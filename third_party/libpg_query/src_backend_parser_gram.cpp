/* A Bison parser, made by GNU Bison 3.8.2.  */

/* Bison implementation for Yacc-like parsers in C

   Copyright (C) 1984, 1989-1990, 2000-2015, 2018-2021 Free Software Foundation,
   Inc.

   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <https://www.gnu.org/licenses/>.  */

/* As a special exception, you may create a larger work that contains
   part or all of the Bison parser skeleton and distribute that work
   under terms of your choice, so long as that work isn't itself a
   parser generator using the skeleton or a modified version thereof
   as a parser skeleton.  Alternatively, if you modify or redistribute
   the parser skeleton itself, you may (at your option) remove this
   special exception, which will cause the skeleton and the resulting
   Bison output files to be licensed under the GNU General Public
   License without this special exception.

   This special exception was added by the Free Software Foundation in
   version 2.2 of Bison.  */

/* C LALR(1) parser skeleton written by Richard Stallman, by
   simplifying the original so-called "semantic" parser.  */

/* DO NOT RELY ON FEATURES THAT ARE NOT DOCUMENTED in the manual,
   especially those whose name start with YY_ or yy_.  They are
   private implementation details that can be changed or removed.  */

/* All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.  */

/* Identify Bison output, and Bison version.  */
#define YYBISON 30802

/* Bison version string.  */
#define YYBISON_VERSION "3.8.2"

/* Skeleton name.  */
#define YYSKELETON_NAME "yacc.c"

/* Pure parsers.  */
#define YYPURE 1

/* Push parsers.  */
#define YYPUSH 0

/* Pull parsers.  */
#define YYPULL 1


/* Substitute the variable and function names.  */
#define yyparse         base_yyparse
#define yylex           base_yylex
#define yyerror         base_yyerror
#define yydebug         base_yydebug
#define yynerrs         base_yynerrs

/* First part of user prologue.  */
#line 1 "third_party/libpg_query/grammar/grammar.y.tmp"

#line 1 "third_party/libpg_query/grammar/grammar.hpp"
/*#define YYDEBUG 1*/
/*-------------------------------------------------------------------------
 *
 * gram.y
 *	  POSTGRESQL BISON rules/actions
 *
 * Portions Copyright (c) 1996-2017, PostgreSQL Global Development PGGroup
 * Portions Copyright (c) 1994, Regents of the University of California
 *
 *
 * IDENTIFICATION
 *	  src/backend/parser/gram.y
 *
 * HISTORY
 *	  AUTHOR			DATE			MAJOR EVENT
 *	  Andrew Yu			Sept, 1994		POSTQUEL to SQL conversion
 *	  Andrew Yu			Oct, 1994		lispy code conversion
 *
 * NOTES
 *	  CAPITALS are used to represent terminal symbols.
 *	  non-capitals are used to represent non-terminals.
 *
 *	  In general, nothing in this file should initiate database accesses
 *	  nor depend on changeable state (such as SET variables).  If you do
 *	  database accesses, your code will fail when we have aborted the
 *	  current transaction and are just parsing commands to find the next
 *	  ROLLBACK or COMMIT.  If you make use of SET variables, then you
 *	  will do the wrong thing in multi-query strings like this:
 *			SET constraint_exclusion TO off; SELECT * FROM foo;
 *	  because the entire string is parsed by gram.y before the SET gets
 *	  executed.  Anything that depends on the database or changeable state
 *	  should be handled during parse analysis so that it happens at the
 *	  right time not the wrong time.
 *
 * WARNINGS
 *	  If you use a list, make sure the datum is a node so that the printing
 *	  routines work.
 *
 *	  Sometimes we assign constants to makeStrings. Make sure we don't free
 *	  those.
 *
 *-------------------------------------------------------------------------
 */
#include "pg_functions.hpp"
#include <string.h>

#include <ctype.h>
#include <limits.h>

#include "nodes/makefuncs.hpp"
#include "nodes/nodeFuncs.hpp"
#include "parser/gramparse.hpp"
#include "parser/parser.hpp"
#include "utils/datetime.hpp"

namespace duckdb_libpgquery {
#define DEFAULT_SCHEMA "main"

/*
 * Location tracking support --- simpler than bison's default, since we only
 * want to track the start position not the end position of each nonterminal.
 */
#define YYLLOC_DEFAULT(Current, Rhs, N) \
	do { \
		if ((N) > 0) \
			(Current) = (Rhs)[1]; \
		else \
			(Current) = (-1); \
	} while (0)

/*
 * The above macro assigns -1 (unknown) as the parse location of any
 * nonterminal that was reduced from an empty rule, or whose leftmost
 * component was reduced from an empty rule.  This is problematic
 * for nonterminals defined like
 *		OptFooList: / * EMPTY * / { ... } | OptFooList Foo { ... } ;
 * because we'll set -1 as the location during the first reduction and then
 * copy it during each subsequent reduction, leaving us with -1 for the
 * location even when the list is not empty.  To fix that, do this in the
 * action for the nonempty rule(s):
 *		if (@$ < 0) @$ = @2;
 * (Although we have many nonterminals that follow this pattern, we only
 * bother with fixing @$ like this when the nonterminal's parse location
 * is actually referenced in some rule.)
 *
 * A cleaner answer would be to make YYLLOC_DEFAULT scan all the Rhs
 * locations until it's found one that's not -1.  Then we'd get a correct
 * location for any nonterminal that isn't entirely empty.  But this way
 * would add overhead to every rule reduction, and so far there's not been
 * a compelling reason to pay that overhead.
 */

/*
 * Bison doesn't allocate anything that needs to live across parser calls,
 * so we can easily have it use palloc instead of malloc.  This prevents
 * memory leaks if we error out during parsing.  Note this only works with
 * bison >= 2.0.  However, in bison 1.875 the default is to use alloca()
 * if possible, so there's not really much problem anyhow, at least if
 * you're building with gcc.
 */
#define YYMALLOC palloc
#define YYFREE   pfree
#define YYINITDEPTH 1000

/* yields an integer bitmask of these flags: */
#define CAS_NOT_DEFERRABLE			0x01
#define CAS_DEFERRABLE				0x02
#define CAS_INITIALLY_IMMEDIATE		0x04
#define CAS_INITIALLY_DEFERRED		0x08
#define CAS_NOT_VALID				0x10
#define CAS_NO_INHERIT				0x20


#define parser_yyerror(msg)  scanner_yyerror(msg, yyscanner)
#define parser_errposition(pos)  scanner_errposition(pos, yyscanner)

static void base_yyerror(YYLTYPE *yylloc, core_yyscan_t yyscanner,
						 const char *msg);
static PGRawStmt *makeRawStmt(PGNode *stmt, int stmt_location);
static void updateRawStmtEnd(PGRawStmt *rs, int end_location);
static PGNode *makeColumnRef(char *colname, PGList *indirection,
						   int location, core_yyscan_t yyscanner);
static PGNode *makeTypeCast(PGNode *arg, PGTypeName *tpname, int trycast, int location);
static PGNode *makeStringConst(char *str, int location);
static PGNode *makeStringConstCast(char *str, int location, PGTypeName *tpname);
static PGNode *makeIntervalNode(char *str, int location, PGList *typmods);
static PGNode *makeIntervalNode(int val, int location, PGList *typmods);
static PGNode *makeIntervalNode(PGNode *arg, int location, PGList *typmods);
static PGNode *makeSampleSize(PGValue *sample_size, bool is_percentage);
static PGNode *makeSampleOptions(PGNode *sample_size, char *method, int *seed, int location);
static PGNode *makeIntConst(int val, int location);
static PGNode *makeFloatConst(char *str, int location);
static PGNode *makeBitStringConst(char *str, int location);
static PGNode *makeNullAConst(int location);
static PGNode *makeAConst(PGValue *v, int location);
static PGNode *makeBoolAConst(bool state, int location);
static PGNode *makeParamRef(int number, int location);
static PGNode *makeNamedParamRef(char* name, int location);
static void check_qualified_name(PGList *names, core_yyscan_t yyscanner);
static PGList *check_func_name(PGList *names, core_yyscan_t yyscanner);
static PGList *check_indirection(PGList *indirection, core_yyscan_t yyscanner);
static void insertSelectOptions(PGSelectStmt *stmt,
								PGList *sortClause, PGList *lockingClause,
								PGNode *limitOffset, PGNode *limitCount,
								PGWithClause *withClause,
								core_yyscan_t yyscanner);
static PGNode *makeSetOp(PGSetOperation op, bool all, PGNode *larg, PGNode *rarg);
static PGNode *doNegate(PGNode *n, int location);
static void doNegateFloat(PGValue *v);
static PGNode *makeAndExpr(PGNode *lexpr, PGNode *rexpr, int location);
static PGNode *makeOrExpr(PGNode *lexpr, PGNode *rexpr, int location);
static PGNode *makeNotExpr(PGNode *expr, int location);
static void SplitColQualList(PGList *qualList,
							 PGList **constraintList, PGCollateClause **collClause,
							 core_yyscan_t yyscanner);
static void processCASbits(int cas_bits, int location, const char *constrType,
			   bool *deferrable, bool *initdeferred, bool *not_valid,
			   bool *no_inherit, core_yyscan_t yyscanner);
static PGNode *makeRecursiveViewSelect(char *relname, PGList *aliases, PGNode *query);
static PGNode *makeLimitPercent(PGNode *limit_percent);


#line 241 "third_party/libpg_query/grammar/grammar_out.cpp"

# ifndef YY_CAST
#  ifdef __cplusplus
#   define YY_CAST(Type, Val) static_cast<Type> (Val)
#   define YY_REINTERPRET_CAST(Type, Val) reinterpret_cast<Type> (Val)
#  else
#   define YY_CAST(Type, Val) ((Type) (Val))
#   define YY_REINTERPRET_CAST(Type, Val) ((Type) (Val))
#  endif
# endif
# ifndef YY_NULLPTR
#  if defined __cplusplus
#   if 201103L <= __cplusplus
#    define YY_NULLPTR nullptr
#   else
#    define YY_NULLPTR 0
#   endif
#  else
#   define YY_NULLPTR ((void*)0)
#  endif
# endif

#include "include/parser/gram.hpp"
/* Symbol kind.  */
enum yysymbol_kind_t
{
  YYSYMBOL_YYEMPTY = -2,
  YYSYMBOL_YYEOF = 0,                      /* "end of file"  */
  YYSYMBOL_YYerror = 1,                    /* error  */
  YYSYMBOL_YYUNDEF = 2,                    /* "invalid token"  */
  YYSYMBOL_IDENT = 3,                      /* IDENT  */
  YYSYMBOL_FCONST = 4,                     /* FCONST  */
  YYSYMBOL_SCONST = 5,                     /* SCONST  */
  YYSYMBOL_BCONST = 6,                     /* BCONST  */
  YYSYMBOL_XCONST = 7,                     /* XCONST  */
  YYSYMBOL_Op = 8,                         /* Op  */
  YYSYMBOL_ICONST = 9,                     /* ICONST  */
  YYSYMBOL_PARAM = 10,                     /* PARAM  */
  YYSYMBOL_TYPECAST = 11,                  /* TYPECAST  */
  YYSYMBOL_DOT_DOT = 12,                   /* DOT_DOT  */
  YYSYMBOL_COLON_EQUALS = 13,              /* COLON_EQUALS  */
  YYSYMBOL_EQUALS_GREATER = 14,            /* EQUALS_GREATER  */
  YYSYMBOL_INTEGER_DIVISION = 15,          /* INTEGER_DIVISION  */
  YYSYMBOL_POWER_OF = 16,                  /* POWER_OF  */
  YYSYMBOL_LAMBDA_ARROW = 17,              /* LAMBDA_ARROW  */
  YYSYMBOL_DOUBLE_ARROW = 18,              /* DOUBLE_ARROW  */
  YYSYMBOL_LESS_EQUALS = 19,               /* LESS_EQUALS  */
  YYSYMBOL_GREATER_EQUALS = 20,            /* GREATER_EQUALS  */
  YYSYMBOL_NOT_EQUALS = 21,                /* NOT_EQUALS  */
  YYSYMBOL_ABORT_P = 22,                   /* ABORT_P  */
  YYSYMBOL_ABSOLUTE_P = 23,                /* ABSOLUTE_P  */
  YYSYMBOL_ACCESS = 24,                    /* ACCESS  */
  YYSYMBOL_ACTION = 25,                    /* ACTION  */
  YYSYMBOL_ACYCLIC = 26,                   /* ACYCLIC  */
  YYSYMBOL_ADD_P = 27,                     /* ADD_P  */
  YYSYMBOL_ADMIN = 28,                     /* ADMIN  */
  YYSYMBOL_AFTER = 29,                     /* AFTER  */
  YYSYMBOL_AGGREGATE = 30,                 /* AGGREGATE  */
  YYSYMBOL_ALL = 31,                       /* ALL  */
  YYSYMBOL_ALSO = 32,                      /* ALSO  */
  YYSYMBOL_ALTER = 33,                     /* ALTER  */
  YYSYMBOL_ALWAYS = 34,                    /* ALWAYS  */
  YYSYMBOL_ANALYSE = 35,                   /* ANALYSE  */
  YYSYMBOL_ANALYZE = 36,                   /* ANALYZE  */
  YYSYMBOL_AND = 37,                       /* AND  */
  YYSYMBOL_ANTI = 38,                      /* ANTI  */
  YYSYMBOL_ANY = 39,                       /* ANY  */
  YYSYMBOL_ARE = 40,                       /* ARE  */
  YYSYMBOL_ARRAY = 41,                     /* ARRAY  */
  YYSYMBOL_AS = 42,                        /* AS  */
  YYSYMBOL_ASC_P = 43,                     /* ASC_P  */
  YYSYMBOL_ASOF = 44,                      /* ASOF  */
  YYSYMBOL_ASSERTION = 45,                 /* ASSERTION  */
  YYSYMBOL_ASSIGNMENT = 46,                /* ASSIGNMENT  */
  YYSYMBOL_ASYMMETRIC = 47,                /* ASYMMETRIC  */
  YYSYMBOL_AT = 48,                        /* AT  */
  YYSYMBOL_ATTACH = 49,                    /* ATTACH  */
  YYSYMBOL_ATTRIBUTE = 50,                 /* ATTRIBUTE  */
  YYSYMBOL_AUTHORIZATION = 51,             /* AUTHORIZATION  */
  YYSYMBOL_BACKWARD = 52,                  /* BACKWARD  */
  YYSYMBOL_BEFORE = 53,                    /* BEFORE  */
  YYSYMBOL_BEGIN_P = 54,                   /* BEGIN_P  */
  YYSYMBOL_BETWEEN = 55,                   /* BETWEEN  */
  YYSYMBOL_BIGINT = 56,                    /* BIGINT  */
  YYSYMBOL_BINARY = 57,                    /* BINARY  */
  YYSYMBOL_BIT = 58,                       /* BIT  */
  YYSYMBOL_BOOLEAN_P = 59,                 /* BOOLEAN_P  */
  YYSYMBOL_BOTH = 60,                      /* BOTH  */
  YYSYMBOL_BY = 61,                        /* BY  */
  YYSYMBOL_CACHE = 62,                     /* CACHE  */
  YYSYMBOL_CALL_P = 63,                    /* CALL_P  */
  YYSYMBOL_CALLED = 64,                    /* CALLED  */
  YYSYMBOL_CASCADE = 65,                   /* CASCADE  */
  YYSYMBOL_CASCADED = 66,                  /* CASCADED  */
  YYSYMBOL_CASE = 67,                      /* CASE  */
  YYSYMBOL_CAST = 68,                      /* CAST  */
  YYSYMBOL_CATALOG_P = 69,                 /* CATALOG_P  */
  YYSYMBOL_CHAIN = 70,                     /* CHAIN  */
  YYSYMBOL_CHAR_P = 71,                    /* CHAR_P  */
  YYSYMBOL_CHARACTER = 72,                 /* CHARACTER  */
  YYSYMBOL_CHARACTERISTICS = 73,           /* CHARACTERISTICS  */
  YYSYMBOL_CHECK_P = 74,                   /* CHECK_P  */
  YYSYMBOL_CHECKPOINT = 75,                /* CHECKPOINT  */
  YYSYMBOL_CLASS = 76,                     /* CLASS  */
  YYSYMBOL_CLOSE = 77,                     /* CLOSE  */
  YYSYMBOL_CLUSTER = 78,                   /* CLUSTER  */
  YYSYMBOL_COALESCE = 79,                  /* COALESCE  */
  YYSYMBOL_COLLATE = 80,                   /* COLLATE  */
  YYSYMBOL_COLLATION = 81,                 /* COLLATION  */
  YYSYMBOL_COLUMN = 82,                    /* COLUMN  */
  YYSYMBOL_COLUMNS = 83,                   /* COLUMNS  */
  YYSYMBOL_COMMENT = 84,                   /* COMMENT  */
  YYSYMBOL_COMMENTS = 85,                  /* COMMENTS  */
  YYSYMBOL_COMMIT = 86,                    /* COMMIT  */
  YYSYMBOL_COMMITTED = 87,                 /* COMMITTED  */
  YYSYMBOL_COMPRESSION = 88,               /* COMPRESSION  */
  YYSYMBOL_CONCURRENTLY = 89,              /* CONCURRENTLY  */
  YYSYMBOL_CONFIGURATION = 90,             /* CONFIGURATION  */
  YYSYMBOL_CONFLICT = 91,                  /* CONFLICT  */
  YYSYMBOL_CONNECTION = 92,                /* CONNECTION  */
  YYSYMBOL_CONSTRAINT = 93,                /* CONSTRAINT  */
  YYSYMBOL_CONSTRAINTS = 94,               /* CONSTRAINTS  */
  YYSYMBOL_CONTENT_P = 95,                 /* CONTENT_P  */
  YYSYMBOL_CONTINUE_P = 96,                /* CONTINUE_P  */
  YYSYMBOL_CONVERSION_P = 97,              /* CONVERSION_P  */
  YYSYMBOL_COPY = 98,                      /* COPY  */
  YYSYMBOL_COST = 99,                      /* COST  */
  YYSYMBOL_CREATE_P = 100,                 /* CREATE_P  */
  YYSYMBOL_CROSS = 101,                    /* CROSS  */
  YYSYMBOL_CSV = 102,                      /* CSV  */
  YYSYMBOL_CUBE = 103,                     /* CUBE  */
  YYSYMBOL_CURRENT_P = 104,                /* CURRENT_P  */
  YYSYMBOL_CURSOR = 105,                   /* CURSOR  */
  YYSYMBOL_CYCLE = 106,                    /* CYCLE  */
  YYSYMBOL_DATA_P = 107,                   /* DATA_P  */
  YYSYMBOL_DATABASE = 108,                 /* DATABASE  */
  YYSYMBOL_DAY_P = 109,                    /* DAY_P  */
  YYSYMBOL_DAYS_P = 110,                   /* DAYS_P  */
  YYSYMBOL_DEALLOCATE = 111,               /* DEALLOCATE  */
  YYSYMBOL_DEC = 112,                      /* DEC  */
  YYSYMBOL_DECIMAL_P = 113,                /* DECIMAL_P  */
  YYSYMBOL_DECLARE = 114,                  /* DECLARE  */
  YYSYMBOL_DEFAULT = 115,                  /* DEFAULT  */
  YYSYMBOL_DEFAULTS = 116,                 /* DEFAULTS  */
  YYSYMBOL_DEFERRABLE = 117,               /* DEFERRABLE  */
  YYSYMBOL_DEFERRED = 118,                 /* DEFERRED  */
  YYSYMBOL_DEFINER = 119,                  /* DEFINER  */
  YYSYMBOL_DELETE_P = 120,                 /* DELETE_P  */
  YYSYMBOL_DELIMITER = 121,                /* DELIMITER  */
  YYSYMBOL_DELIMITERS = 122,               /* DELIMITERS  */
  YYSYMBOL_DEPENDS = 123,                  /* DEPENDS  */
  YYSYMBOL_DESC_P = 124,                   /* DESC_P  */
  YYSYMBOL_DESCRIBE = 125,                 /* DESCRIBE  */
  YYSYMBOL_DESTINATION = 126,              /* DESTINATION  */
  YYSYMBOL_DETACH = 127,                   /* DETACH  */
  YYSYMBOL_DICTIONARY = 128,               /* DICTIONARY  */
  YYSYMBOL_DISABLE_P = 129,                /* DISABLE_P  */
  YYSYMBOL_DISCARD = 130,                  /* DISCARD  */
  YYSYMBOL_DISTINCT = 131,                 /* DISTINCT  */
  YYSYMBOL_DO = 132,                       /* DO  */
  YYSYMBOL_DOCUMENT_P = 133,               /* DOCUMENT_P  */
  YYSYMBOL_DOMAIN_P = 134,                 /* DOMAIN_P  */
  YYSYMBOL_DOUBLE_P = 135,                 /* DOUBLE_P  */
  YYSYMBOL_DROP = 136,                     /* DROP  */
  YYSYMBOL_EACH = 137,                     /* EACH  */
  YYSYMBOL_EDGE = 138,                     /* EDGE  */
  YYSYMBOL_ELEMENT_ID = 139,               /* ELEMENT_ID  */
  YYSYMBOL_ELSE = 140,                     /* ELSE  */
  YYSYMBOL_ENABLE_P = 141,                 /* ENABLE_P  */
  YYSYMBOL_ENCODING = 142,                 /* ENCODING  */
  YYSYMBOL_ENCRYPTED = 143,                /* ENCRYPTED  */
  YYSYMBOL_END_P = 144,                    /* END_P  */
  YYSYMBOL_ENUM_P = 145,                   /* ENUM_P  */
  YYSYMBOL_ESCAPE = 146,                   /* ESCAPE  */
  YYSYMBOL_EVENT = 147,                    /* EVENT  */
  YYSYMBOL_EXCEPT = 148,                   /* EXCEPT  */
  YYSYMBOL_EXCLUDE = 149,                  /* EXCLUDE  */
  YYSYMBOL_EXCLUDING = 150,                /* EXCLUDING  */
  YYSYMBOL_EXCLUSIVE = 151,                /* EXCLUSIVE  */
  YYSYMBOL_EXECUTE = 152,                  /* EXECUTE  */
  YYSYMBOL_EXISTS = 153,                   /* EXISTS  */
  YYSYMBOL_EXPLAIN = 154,                  /* EXPLAIN  */
  YYSYMBOL_EXPORT_P = 155,                 /* EXPORT_P  */
  YYSYMBOL_EXPORT_STATE = 156,             /* EXPORT_STATE  */
  YYSYMBOL_EXTENSION = 157,                /* EXTENSION  */
  YYSYMBOL_EXTERNAL = 158,                 /* EXTERNAL  */
  YYSYMBOL_EXTRACT = 159,                  /* EXTRACT  */
  YYSYMBOL_FALSE_P = 160,                  /* FALSE_P  */
  YYSYMBOL_FAMILY = 161,                   /* FAMILY  */
  YYSYMBOL_FETCH = 162,                    /* FETCH  */
  YYSYMBOL_FILTER = 163,                   /* FILTER  */
  YYSYMBOL_FIRST_P = 164,                  /* FIRST_P  */
  YYSYMBOL_FLOAT_P = 165,                  /* FLOAT_P  */
  YYSYMBOL_FOLLOWING = 166,                /* FOLLOWING  */
  YYSYMBOL_FOR = 167,                      /* FOR  */
  YYSYMBOL_FORCE = 168,                    /* FORCE  */
  YYSYMBOL_FOREIGN = 169,                  /* FOREIGN  */
  YYSYMBOL_FORWARD = 170,                  /* FORWARD  */
  YYSYMBOL_FREEZE = 171,                   /* FREEZE  */
  YYSYMBOL_FROM = 172,                     /* FROM  */
  YYSYMBOL_FULL = 173,                     /* FULL  */
  YYSYMBOL_FUNCTION = 174,                 /* FUNCTION  */
  YYSYMBOL_FUNCTIONS = 175,                /* FUNCTIONS  */
  YYSYMBOL_GENERATED = 176,                /* GENERATED  */
  YYSYMBOL_GLOB = 177,                     /* GLOB  */
  YYSYMBOL_GLOBAL = 178,                   /* GLOBAL  */
  YYSYMBOL_GRANT = 179,                    /* GRANT  */
  YYSYMBOL_GRANTED = 180,                  /* GRANTED  */
  YYSYMBOL_GRAPH = 181,                    /* GRAPH  */
  YYSYMBOL_GRAPH_TABLE = 182,              /* GRAPH_TABLE  */
  YYSYMBOL_GROUP_P = 183,                  /* GROUP_P  */
  YYSYMBOL_GROUPING = 184,                 /* GROUPING  */
  YYSYMBOL_GROUPING_ID = 185,              /* GROUPING_ID  */
  YYSYMBOL_GROUPS = 186,                   /* GROUPS  */
  YYSYMBOL_HANDLER = 187,                  /* HANDLER  */
  YYSYMBOL_HAVING = 188,                   /* HAVING  */
  YYSYMBOL_HEADER_P = 189,                 /* HEADER_P  */
  YYSYMBOL_HOLD = 190,                     /* HOLD  */
  YYSYMBOL_HOUR_P = 191,                   /* HOUR_P  */
  YYSYMBOL_HOURS_P = 192,                  /* HOURS_P  */
  YYSYMBOL_IDENTITY_P = 193,               /* IDENTITY_P  */
  YYSYMBOL_IF_P = 194,                     /* IF_P  */
  YYSYMBOL_IGNORE_P = 195,                 /* IGNORE_P  */
  YYSYMBOL_ILIKE = 196,                    /* ILIKE  */
  YYSYMBOL_IMMEDIATE = 197,                /* IMMEDIATE  */
  YYSYMBOL_IMMUTABLE = 198,                /* IMMUTABLE  */
  YYSYMBOL_IMPLICIT_P = 199,               /* IMPLICIT_P  */
  YYSYMBOL_IMPORT_P = 200,                 /* IMPORT_P  */
  YYSYMBOL_IN_P = 201,                     /* IN_P  */
  YYSYMBOL_INCLUDE_P = 202,                /* INCLUDE_P  */
  YYSYMBOL_INCLUDING = 203,                /* INCLUDING  */
  YYSYMBOL_INCREMENT = 204,                /* INCREMENT  */
  YYSYMBOL_INDEX = 205,                    /* INDEX  */
  YYSYMBOL_INDEXES = 206,                  /* INDEXES  */
  YYSYMBOL_INHERIT = 207,                  /* INHERIT  */
  YYSYMBOL_INHERITS = 208,                 /* INHERITS  */
  YYSYMBOL_INITIALLY = 209,                /* INITIALLY  */
  YYSYMBOL_INLINE_P = 210,                 /* INLINE_P  */
  YYSYMBOL_INNER_P = 211,                  /* INNER_P  */
  YYSYMBOL_INOUT = 212,                    /* INOUT  */
  YYSYMBOL_INPUT_P = 213,                  /* INPUT_P  */
  YYSYMBOL_INSENSITIVE = 214,              /* INSENSITIVE  */
  YYSYMBOL_INSERT = 215,                   /* INSERT  */
  YYSYMBOL_INSTALL = 216,                  /* INSTALL  */
  YYSYMBOL_INSTEAD = 217,                  /* INSTEAD  */
  YYSYMBOL_INT_P = 218,                    /* INT_P  */
  YYSYMBOL_INTEGER = 219,                  /* INTEGER  */
  YYSYMBOL_INTERSECT = 220,                /* INTERSECT  */
  YYSYMBOL_INTERVAL = 221,                 /* INTERVAL  */
  YYSYMBOL_INTO = 222,                     /* INTO  */
  YYSYMBOL_INVOKER = 223,                  /* INVOKER  */
  YYSYMBOL_IS = 224,                       /* IS  */
  YYSYMBOL_ISNULL = 225,                   /* ISNULL  */
  YYSYMBOL_ISOLATION = 226,                /* ISOLATION  */
  YYSYMBOL_JOIN = 227,                     /* JOIN  */
  YYSYMBOL_JSON = 228,                     /* JSON  */
  YYSYMBOL_KEEP = 229,                     /* KEEP  */
  YYSYMBOL_KEY = 230,                      /* KEY  */
  YYSYMBOL_LABEL = 231,                    /* LABEL  */
  YYSYMBOL_LANGUAGE = 232,                 /* LANGUAGE  */
  YYSYMBOL_LARGE_P = 233,                  /* LARGE_P  */
  YYSYMBOL_LAST_P = 234,                   /* LAST_P  */
  YYSYMBOL_LATERAL_P = 235,                /* LATERAL_P  */
  YYSYMBOL_LEADING = 236,                  /* LEADING  */
  YYSYMBOL_LEAKPROOF = 237,                /* LEAKPROOF  */
  YYSYMBOL_LEFT = 238,                     /* LEFT  */
  YYSYMBOL_LEVEL = 239,                    /* LEVEL  */
  YYSYMBOL_LIKE = 240,                     /* LIKE  */
  YYSYMBOL_LIMIT = 241,                    /* LIMIT  */
  YYSYMBOL_LISTEN = 242,                   /* LISTEN  */
  YYSYMBOL_LOAD = 243,                     /* LOAD  */
  YYSYMBOL_LOCAL = 244,                    /* LOCAL  */
  YYSYMBOL_LOCATION = 245,                 /* LOCATION  */
  YYSYMBOL_LOCK_P = 246,                   /* LOCK_P  */
  YYSYMBOL_LOCKED = 247,                   /* LOCKED  */
  YYSYMBOL_LOGGED = 248,                   /* LOGGED  */
  YYSYMBOL_MACRO = 249,                    /* MACRO  */
  YYSYMBOL_MAP = 250,                      /* MAP  */
  YYSYMBOL_MAPPING = 251,                  /* MAPPING  */
  YYSYMBOL_MATCH = 252,                    /* MATCH  */
  YYSYMBOL_MATERIALIZED = 253,             /* MATERIALIZED  */
  YYSYMBOL_MAXVALUE = 254,                 /* MAXVALUE  */
  YYSYMBOL_METHOD = 255,                   /* METHOD  */
  YYSYMBOL_MICROSECOND_P = 256,            /* MICROSECOND_P  */
  YYSYMBOL_MICROSECONDS_P = 257,           /* MICROSECONDS_P  */
  YYSYMBOL_MILLISECOND_P = 258,            /* MILLISECOND_P  */
  YYSYMBOL_MILLISECONDS_P = 259,           /* MILLISECONDS_P  */
  YYSYMBOL_MINUTE_P = 260,                 /* MINUTE_P  */
  YYSYMBOL_MINUTES_P = 261,                /* MINUTES_P  */
  YYSYMBOL_MINVALUE = 262,                 /* MINVALUE  */
  YYSYMBOL_MODE = 263,                     /* MODE  */
  YYSYMBOL_MONTH_P = 264,                  /* MONTH_P  */
  YYSYMBOL_MONTHS_P = 265,                 /* MONTHS_P  */
  YYSYMBOL_MOVE = 266,                     /* MOVE  */
  YYSYMBOL_NAME_P = 267,                   /* NAME_P  */
  YYSYMBOL_NAMES = 268,                    /* NAMES  */
  YYSYMBOL_NATIONAL = 269,                 /* NATIONAL  */
  YYSYMBOL_NATURAL = 270,                  /* NATURAL  */
  YYSYMBOL_NCHAR = 271,                    /* NCHAR  */
  YYSYMBOL_NEW = 272,                      /* NEW  */
  YYSYMBOL_NEXT = 273,                     /* NEXT  */
  YYSYMBOL_NO = 274,                       /* NO  */
  YYSYMBOL_NODE = 275,                     /* NODE  */
  YYSYMBOL_NONE = 276,                     /* NONE  */
  YYSYMBOL_NOT = 277,                      /* NOT  */
  YYSYMBOL_NOTHING = 278,                  /* NOTHING  */
  YYSYMBOL_NOTIFY = 279,                   /* NOTIFY  */
  YYSYMBOL_NOTNULL = 280,                  /* NOTNULL  */
  YYSYMBOL_NOWAIT = 281,                   /* NOWAIT  */
  YYSYMBOL_NULL_P = 282,                   /* NULL_P  */
  YYSYMBOL_NULLIF = 283,                   /* NULLIF  */
  YYSYMBOL_NULLS_P = 284,                  /* NULLS_P  */
  YYSYMBOL_NUMERIC = 285,                  /* NUMERIC  */
  YYSYMBOL_OBJECT_P = 286,                 /* OBJECT_P  */
  YYSYMBOL_OF = 287,                       /* OF  */
  YYSYMBOL_OFF = 288,                      /* OFF  */
  YYSYMBOL_OFFSET = 289,                   /* OFFSET  */
  YYSYMBOL_OIDS = 290,                     /* OIDS  */
  YYSYMBOL_OLD = 291,                      /* OLD  */
  YYSYMBOL_ON = 292,                       /* ON  */
  YYSYMBOL_ONLY = 293,                     /* ONLY  */
  YYSYMBOL_OPERATOR = 294,                 /* OPERATOR  */
  YYSYMBOL_OPTION = 295,                   /* OPTION  */
  YYSYMBOL_OPTIONS = 296,                  /* OPTIONS  */
  YYSYMBOL_OR = 297,                       /* OR  */
  YYSYMBOL_ORDER = 298,                    /* ORDER  */
  YYSYMBOL_ORDINALITY = 299,               /* ORDINALITY  */
  YYSYMBOL_OUT_P = 300,                    /* OUT_P  */
  YYSYMBOL_OUTER_P = 301,                  /* OUTER_P  */
  YYSYMBOL_OVER = 302,                     /* OVER  */
  YYSYMBOL_OVERLAPS = 303,                 /* OVERLAPS  */
  YYSYMBOL_OVERLAY = 304,                  /* OVERLAY  */
  YYSYMBOL_OVERRIDING = 305,               /* OVERRIDING  */
  YYSYMBOL_OWNED = 306,                    /* OWNED  */
  YYSYMBOL_OWNER = 307,                    /* OWNER  */
  YYSYMBOL_PARALLEL = 308,                 /* PARALLEL  */
  YYSYMBOL_PARSER = 309,                   /* PARSER  */
  YYSYMBOL_PARTIAL = 310,                  /* PARTIAL  */
  YYSYMBOL_PARTITION = 311,                /* PARTITION  */
  YYSYMBOL_PASSING = 312,                  /* PASSING  */
  YYSYMBOL_PASSWORD = 313,                 /* PASSWORD  */
  YYSYMBOL_PATH = 314,                     /* PATH  */
  YYSYMBOL_PATHS = 315,                    /* PATHS  */
  YYSYMBOL_PERCENT = 316,                  /* PERCENT  */
  YYSYMBOL_PIVOT = 317,                    /* PIVOT  */
  YYSYMBOL_PIVOT_LONGER = 318,             /* PIVOT_LONGER  */
  YYSYMBOL_PIVOT_WIDER = 319,              /* PIVOT_WIDER  */
  YYSYMBOL_PLACING = 320,                  /* PLACING  */
  YYSYMBOL_PLANS = 321,                    /* PLANS  */
  YYSYMBOL_POLICY = 322,                   /* POLICY  */
  YYSYMBOL_POSITION = 323,                 /* POSITION  */
  YYSYMBOL_POSITIONAL = 324,               /* POSITIONAL  */
  YYSYMBOL_PRAGMA_P = 325,                 /* PRAGMA_P  */
  YYSYMBOL_PRECEDING = 326,                /* PRECEDING  */
  YYSYMBOL_PRECISION = 327,                /* PRECISION  */
  YYSYMBOL_PREPARE = 328,                  /* PREPARE  */
  YYSYMBOL_PREPARED = 329,                 /* PREPARED  */
  YYSYMBOL_PRESERVE = 330,                 /* PRESERVE  */
  YYSYMBOL_PRIMARY = 331,                  /* PRIMARY  */
  YYSYMBOL_PRIOR = 332,                    /* PRIOR  */
  YYSYMBOL_PRIVILEGES = 333,               /* PRIVILEGES  */
  YYSYMBOL_PROCEDURAL = 334,               /* PROCEDURAL  */
  YYSYMBOL_PROCEDURE = 335,                /* PROCEDURE  */
  YYSYMBOL_PROGRAM = 336,                  /* PROGRAM  */
  YYSYMBOL_PROPERTIES = 337,               /* PROPERTIES  */
  YYSYMBOL_PROPERTY = 338,                 /* PROPERTY  */
  YYSYMBOL_PUBLICATION = 339,              /* PUBLICATION  */
  YYSYMBOL_QUALIFY = 340,                  /* QUALIFY  */
  YYSYMBOL_QUOTE = 341,                    /* QUOTE  */
  YYSYMBOL_RANGE = 342,                    /* RANGE  */
  YYSYMBOL_READ_P = 343,                   /* READ_P  */
  YYSYMBOL_REAL = 344,                     /* REAL  */
  YYSYMBOL_REASSIGN = 345,                 /* REASSIGN  */
  YYSYMBOL_RECHECK = 346,                  /* RECHECK  */
  YYSYMBOL_RECURSIVE = 347,                /* RECURSIVE  */
  YYSYMBOL_REF = 348,                      /* REF  */
  YYSYMBOL_REFERENCES = 349,               /* REFERENCES  */
  YYSYMBOL_REFERENCING = 350,              /* REFERENCING  */
  YYSYMBOL_REFRESH = 351,                  /* REFRESH  */
  YYSYMBOL_REINDEX = 352,                  /* REINDEX  */
  YYSYMBOL_RELATIONSHIP = 353,             /* RELATIONSHIP  */
  YYSYMBOL_RELATIVE_P = 354,               /* RELATIVE_P  */
  YYSYMBOL_RELEASE = 355,                  /* RELEASE  */
  YYSYMBOL_RENAME = 356,                   /* RENAME  */
  YYSYMBOL_REPEATABLE = 357,               /* REPEATABLE  */
  YYSYMBOL_REPLACE = 358,                  /* REPLACE  */
  YYSYMBOL_REPLICA = 359,                  /* REPLICA  */
  YYSYMBOL_RESET = 360,                    /* RESET  */
  YYSYMBOL_RESPECT_P = 361,                /* RESPECT_P  */
  YYSYMBOL_RESTART = 362,                  /* RESTART  */
  YYSYMBOL_RESTRICT = 363,                 /* RESTRICT  */
  YYSYMBOL_RETURNING = 364,                /* RETURNING  */
  YYSYMBOL_RETURNS = 365,                  /* RETURNS  */
  YYSYMBOL_REVOKE = 366,                   /* REVOKE  */
  YYSYMBOL_RIGHT = 367,                    /* RIGHT  */
  YYSYMBOL_ROLE = 368,                     /* ROLE  */
  YYSYMBOL_ROLLBACK = 369,                 /* ROLLBACK  */
  YYSYMBOL_ROLLUP = 370,                   /* ROLLUP  */
  YYSYMBOL_ROW = 371,                      /* ROW  */
  YYSYMBOL_ROWS = 372,                     /* ROWS  */
  YYSYMBOL_RULE = 373,                     /* RULE  */
  YYSYMBOL_SAMPLE = 374,                   /* SAMPLE  */
  YYSYMBOL_SAVEPOINT = 375,                /* SAVEPOINT  */
  YYSYMBOL_SCHEMA = 376,                   /* SCHEMA  */
  YYSYMBOL_SCHEMAS = 377,                  /* SCHEMAS  */
  YYSYMBOL_SCROLL = 378,                   /* SCROLL  */
  YYSYMBOL_SEARCH = 379,                   /* SEARCH  */
  YYSYMBOL_SECOND_P = 380,                 /* SECOND_P  */
  YYSYMBOL_SECONDS_P = 381,                /* SECONDS_P  */
  YYSYMBOL_SECURITY = 382,                 /* SECURITY  */
  YYSYMBOL_SELECT = 383,                   /* SELECT  */
  YYSYMBOL_SEMI = 384,                     /* SEMI  */
  YYSYMBOL_SEQUENCE = 385,                 /* SEQUENCE  */
  YYSYMBOL_SEQUENCES = 386,                /* SEQUENCES  */
  YYSYMBOL_SERIALIZABLE = 387,             /* SERIALIZABLE  */
  YYSYMBOL_SERVER = 388,                   /* SERVER  */
  YYSYMBOL_SESSION = 389,                  /* SESSION  */
  YYSYMBOL_SET = 390,                      /* SET  */
  YYSYMBOL_SETOF = 391,                    /* SETOF  */
  YYSYMBOL_SETS = 392,                     /* SETS  */
  YYSYMBOL_SHARE = 393,                    /* SHARE  */
  YYSYMBOL_SHORTEST = 394,                 /* SHORTEST  */
  YYSYMBOL_SHOW = 395,                     /* SHOW  */
  YYSYMBOL_SIMILAR = 396,                  /* SIMILAR  */
  YYSYMBOL_SIMPLE = 397,                   /* SIMPLE  */
  YYSYMBOL_SKIP = 398,                     /* SKIP  */
  YYSYMBOL_SMALLINT = 399,                 /* SMALLINT  */
  YYSYMBOL_SNAPSHOT = 400,                 /* SNAPSHOT  */
  YYSYMBOL_SOME = 401,                     /* SOME  */
  YYSYMBOL_SOURCE = 402,                   /* SOURCE  */
  YYSYMBOL_SQL_P = 403,                    /* SQL_P  */
  YYSYMBOL_STABLE = 404,                   /* STABLE  */
  YYSYMBOL_STANDALONE_P = 405,             /* STANDALONE_P  */
  YYSYMBOL_START = 406,                    /* START  */
  YYSYMBOL_STATEMENT = 407,                /* STATEMENT  */
  YYSYMBOL_STATISTICS = 408,               /* STATISTICS  */
  YYSYMBOL_STDIN = 409,                    /* STDIN  */
  YYSYMBOL_STDOUT = 410,                   /* STDOUT  */
  YYSYMBOL_STORAGE = 411,                  /* STORAGE  */
  YYSYMBOL_STORED = 412,                   /* STORED  */
  YYSYMBOL_STRICT_P = 413,                 /* STRICT_P  */
  YYSYMBOL_STRIP_P = 414,                  /* STRIP_P  */
  YYSYMBOL_STRUCT = 415,                   /* STRUCT  */
  YYSYMBOL_SUBSCRIPTION = 416,             /* SUBSCRIPTION  */
  YYSYMBOL_SUBSTRING = 417,                /* SUBSTRING  */
  YYSYMBOL_SUMMARIZE = 418,                /* SUMMARIZE  */
  YYSYMBOL_SYMMETRIC = 419,                /* SYMMETRIC  */
  YYSYMBOL_SYSID = 420,                    /* SYSID  */
  YYSYMBOL_SYSTEM_P = 421,                 /* SYSTEM_P  */
  YYSYMBOL_TABLE = 422,                    /* TABLE  */
  YYSYMBOL_TABLES = 423,                   /* TABLES  */
  YYSYMBOL_TABLESAMPLE = 424,              /* TABLESAMPLE  */
  YYSYMBOL_TABLESPACE = 425,               /* TABLESPACE  */
  YYSYMBOL_TEMP = 426,                     /* TEMP  */
  YYSYMBOL_TEMPLATE = 427,                 /* TEMPLATE  */
  YYSYMBOL_TEMPORARY = 428,                /* TEMPORARY  */
  YYSYMBOL_TEXT_P = 429,                   /* TEXT_P  */
  YYSYMBOL_THEN = 430,                     /* THEN  */
  YYSYMBOL_TIME = 431,                     /* TIME  */
  YYSYMBOL_TIMESTAMP = 432,                /* TIMESTAMP  */
  YYSYMBOL_TO = 433,                       /* TO  */
  YYSYMBOL_TRAIL = 434,                    /* TRAIL  */
  YYSYMBOL_TRAILING = 435,                 /* TRAILING  */
  YYSYMBOL_TRANSACTION = 436,              /* TRANSACTION  */
  YYSYMBOL_TRANSFORM = 437,                /* TRANSFORM  */
  YYSYMBOL_TREAT = 438,                    /* TREAT  */
  YYSYMBOL_TRIGGER = 439,                  /* TRIGGER  */
  YYSYMBOL_TRIM = 440,                     /* TRIM  */
  YYSYMBOL_TRUE_P = 441,                   /* TRUE_P  */
  YYSYMBOL_TRUNCATE = 442,                 /* TRUNCATE  */
  YYSYMBOL_TRUSTED = 443,                  /* TRUSTED  */
  YYSYMBOL_TRY_CAST = 444,                 /* TRY_CAST  */
  YYSYMBOL_TYPE_P = 445,                   /* TYPE_P  */
  YYSYMBOL_TYPES_P = 446,                  /* TYPES_P  */
  YYSYMBOL_UNBOUNDED = 447,                /* UNBOUNDED  */
  YYSYMBOL_UNCOMMITTED = 448,              /* UNCOMMITTED  */
  YYSYMBOL_UNENCRYPTED = 449,              /* UNENCRYPTED  */
  YYSYMBOL_UNION = 450,                    /* UNION  */
  YYSYMBOL_UNIQUE = 451,                   /* UNIQUE  */
  YYSYMBOL_UNKNOWN = 452,                  /* UNKNOWN  */
  YYSYMBOL_UNLISTEN = 453,                 /* UNLISTEN  */
  YYSYMBOL_UNLOGGED = 454,                 /* UNLOGGED  */
  YYSYMBOL_UNPIVOT = 455,                  /* UNPIVOT  */
  YYSYMBOL_UNTIL = 456,                    /* UNTIL  */
  YYSYMBOL_UPDATE = 457,                   /* UPDATE  */
  YYSYMBOL_USE_P = 458,                    /* USE_P  */
  YYSYMBOL_USER = 459,                     /* USER  */
  YYSYMBOL_USING = 460,                    /* USING  */
  YYSYMBOL_VACUUM = 461,                   /* VACUUM  */
  YYSYMBOL_VALID = 462,                    /* VALID  */
  YYSYMBOL_VALIDATE = 463,                 /* VALIDATE  */
  YYSYMBOL_VALIDATOR = 464,                /* VALIDATOR  */
  YYSYMBOL_VALUE_P = 465,                  /* VALUE_P  */
  YYSYMBOL_VALUES = 466,                   /* VALUES  */
  YYSYMBOL_VARCHAR = 467,                  /* VARCHAR  */
  YYSYMBOL_VARIADIC = 468,                 /* VARIADIC  */
  YYSYMBOL_VARYING = 469,                  /* VARYING  */
  YYSYMBOL_VERBOSE = 470,                  /* VERBOSE  */
  YYSYMBOL_VERSION_P = 471,                /* VERSION_P  */
  YYSYMBOL_VERTEX = 472,                   /* VERTEX  */
  YYSYMBOL_VIEW = 473,                     /* VIEW  */
  YYSYMBOL_VIEWS = 474,                    /* VIEWS  */
  YYSYMBOL_VIRTUAL = 475,                  /* VIRTUAL  */
  YYSYMBOL_VOLATILE = 476,                 /* VOLATILE  */
  YYSYMBOL_WALK = 477,                     /* WALK  */
  YYSYMBOL_WHEN = 478,                     /* WHEN  */
  YYSYMBOL_WHERE = 479,                    /* WHERE  */
  YYSYMBOL_WHITESPACE_P = 480,             /* WHITESPACE_P  */
  YYSYMBOL_WINDOW = 481,                   /* WINDOW  */
  YYSYMBOL_WITH = 482,                     /* WITH  */
  YYSYMBOL_WITHIN = 483,                   /* WITHIN  */
  YYSYMBOL_WITHOUT = 484,                  /* WITHOUT  */
  YYSYMBOL_WORK = 485,                     /* WORK  */
  YYSYMBOL_WRAPPER = 486,                  /* WRAPPER  */
  YYSYMBOL_WRITE_P = 487,                  /* WRITE_P  */
  YYSYMBOL_XML_P = 488,                    /* XML_P  */
  YYSYMBOL_XMLATTRIBUTES = 489,            /* XMLATTRIBUTES  */
  YYSYMBOL_XMLCONCAT = 490,                /* XMLCONCAT  */
  YYSYMBOL_XMLELEMENT = 491,               /* XMLELEMENT  */
  YYSYMBOL_XMLEXISTS = 492,                /* XMLEXISTS  */
  YYSYMBOL_XMLFOREST = 493,                /* XMLFOREST  */
  YYSYMBOL_XMLNAMESPACES = 494,            /* XMLNAMESPACES  */
  YYSYMBOL_XMLPARSE = 495,                 /* XMLPARSE  */
  YYSYMBOL_XMLPI = 496,                    /* XMLPI  */
  YYSYMBOL_XMLROOT = 497,                  /* XMLROOT  */
  YYSYMBOL_XMLSERIALIZE = 498,             /* XMLSERIALIZE  */
  YYSYMBOL_XMLTABLE = 499,                 /* XMLTABLE  */
  YYSYMBOL_YEAR_P = 500,                   /* YEAR_P  */
  YYSYMBOL_YEARS_P = 501,                  /* YEARS_P  */
  YYSYMBOL_YES_P = 502,                    /* YES_P  */
  YYSYMBOL_ZONE = 503,                     /* ZONE  */
  YYSYMBOL_NOT_LA = 504,                   /* NOT_LA  */
  YYSYMBOL_NULLS_LA = 505,                 /* NULLS_LA  */
  YYSYMBOL_WITH_LA = 506,                  /* WITH_LA  */
  YYSYMBOL_507_ = 507,                     /* '<'  */
  YYSYMBOL_508_ = 508,                     /* '>'  */
  YYSYMBOL_509_ = 509,                     /* '='  */
  YYSYMBOL_POSTFIXOP = 510,                /* POSTFIXOP  */
  YYSYMBOL_511_ = 511,                     /* '+'  */
  YYSYMBOL_512_ = 512,                     /* '-'  */
  YYSYMBOL_513_ = 513,                     /* '*'  */
  YYSYMBOL_514_ = 514,                     /* '/'  */
  YYSYMBOL_515_ = 515,                     /* '%'  */
  YYSYMBOL_516_ = 516,                     /* '^'  */
  YYSYMBOL_UMINUS = 517,                   /* UMINUS  */
  YYSYMBOL_518_ = 518,                     /* '['  */
  YYSYMBOL_519_ = 519,                     /* ']'  */
  YYSYMBOL_520_ = 520,                     /* '('  */
  YYSYMBOL_521_ = 521,                     /* ')'  */
  YYSYMBOL_522_ = 522,                     /* '.'  */
  YYSYMBOL_523_ = 523,                     /* ';'  */
  YYSYMBOL_524_ = 524,                     /* ','  */
  YYSYMBOL_525_ = 525,                     /* '|'  */
  YYSYMBOL_526_ = 526,                     /* '?'  */
  YYSYMBOL_527_ = 527,                     /* '{'  */
  YYSYMBOL_528_ = 528,                     /* '}'  */
  YYSYMBOL_529_ = 529,                     /* '&'  */
  YYSYMBOL_530_ = 530,                     /* '!'  */
  YYSYMBOL_531_ = 531,                     /* ':'  */
  YYSYMBOL_532_ = 532,                     /* '#'  */
  YYSYMBOL_533_ = 533,                     /* '$'  */
  YYSYMBOL_YYACCEPT = 534,                 /* $accept  */
  YYSYMBOL_stmtblock = 535,                /* stmtblock  */
  YYSYMBOL_stmtmulti = 536,                /* stmtmulti  */
  YYSYMBOL_stmt = 537,                     /* stmt  */
  YYSYMBOL_AlterObjectSchemaStmt = 538,    /* AlterObjectSchemaStmt  */
  YYSYMBOL_AlterSeqStmt = 539,             /* AlterSeqStmt  */
  YYSYMBOL_SeqOptList = 540,               /* SeqOptList  */
  YYSYMBOL_opt_with = 541,                 /* opt_with  */
  YYSYMBOL_NumericOnly = 542,              /* NumericOnly  */
  YYSYMBOL_SeqOptElem = 543,               /* SeqOptElem  */
  YYSYMBOL_opt_by = 544,                   /* opt_by  */
  YYSYMBOL_SignedIconst = 545,             /* SignedIconst  */
  YYSYMBOL_AlterTableStmt = 546,           /* AlterTableStmt  */
  YYSYMBOL_alter_identity_column_option_list = 547, /* alter_identity_column_option_list  */
  YYSYMBOL_alter_column_default = 548,     /* alter_column_default  */
  YYSYMBOL_alter_identity_column_option = 549, /* alter_identity_column_option  */
  YYSYMBOL_alter_generic_option_list = 550, /* alter_generic_option_list  */
  YYSYMBOL_alter_table_cmd = 551,          /* alter_table_cmd  */
  YYSYMBOL_alter_using = 552,              /* alter_using  */
  YYSYMBOL_alter_generic_option_elem = 553, /* alter_generic_option_elem  */
  YYSYMBOL_alter_table_cmds = 554,         /* alter_table_cmds  */
  YYSYMBOL_alter_generic_options = 555,    /* alter_generic_options  */
  YYSYMBOL_opt_set_data = 556,             /* opt_set_data  */
  YYSYMBOL_AnalyzeStmt = 557,              /* AnalyzeStmt  */
  YYSYMBOL_AttachStmt = 558,               /* AttachStmt  */
  YYSYMBOL_DetachStmt = 559,               /* DetachStmt  */
  YYSYMBOL_opt_database = 560,             /* opt_database  */
  YYSYMBOL_opt_database_alias = 561,       /* opt_database_alias  */
  YYSYMBOL_CallStmt = 562,                 /* CallStmt  */
  YYSYMBOL_CheckPointStmt = 563,           /* CheckPointStmt  */
  YYSYMBOL_opt_col_id = 564,               /* opt_col_id  */
  YYSYMBOL_qualified_name = 565,           /* qualified_name  */
  YYSYMBOL_ColId = 566,                    /* ColId  */
  YYSYMBOL_ColIdOrString = 567,            /* ColIdOrString  */
  YYSYMBOL_Sconst = 568,                   /* Sconst  */
  YYSYMBOL_indirection = 569,              /* indirection  */
  YYSYMBOL_indirection_el = 570,           /* indirection_el  */
  YYSYMBOL_attr_name = 571,                /* attr_name  */
  YYSYMBOL_ColLabel = 572,                 /* ColLabel  */
  YYSYMBOL_CopyStmt = 573,                 /* CopyStmt  */
  YYSYMBOL_copy_from = 574,                /* copy_from  */
  YYSYMBOL_copy_delimiter = 575,           /* copy_delimiter  */
  YYSYMBOL_copy_generic_opt_arg_list = 576, /* copy_generic_opt_arg_list  */
  YYSYMBOL_opt_using = 577,                /* opt_using  */
  YYSYMBOL_opt_as = 578,                   /* opt_as  */
  YYSYMBOL_opt_program = 579,              /* opt_program  */
  YYSYMBOL_copy_options = 580,             /* copy_options  */
  YYSYMBOL_copy_generic_opt_arg = 581,     /* copy_generic_opt_arg  */
  YYSYMBOL_copy_generic_opt_elem = 582,    /* copy_generic_opt_elem  */
  YYSYMBOL_opt_oids = 583,                 /* opt_oids  */
  YYSYMBOL_copy_opt_list = 584,            /* copy_opt_list  */
  YYSYMBOL_opt_binary = 585,               /* opt_binary  */
  YYSYMBOL_copy_opt_item = 586,            /* copy_opt_item  */
  YYSYMBOL_copy_generic_opt_arg_list_item = 587, /* copy_generic_opt_arg_list_item  */
  YYSYMBOL_copy_file_name = 588,           /* copy_file_name  */
  YYSYMBOL_copy_generic_opt_list = 589,    /* copy_generic_opt_list  */
  YYSYMBOL_CreateStmt = 590,               /* CreateStmt  */
  YYSYMBOL_ConstraintAttributeSpec = 591,  /* ConstraintAttributeSpec  */
  YYSYMBOL_def_arg = 592,                  /* def_arg  */
  YYSYMBOL_OptParenthesizedSeqOptList = 593, /* OptParenthesizedSeqOptList  */
  YYSYMBOL_generic_option_arg = 594,       /* generic_option_arg  */
  YYSYMBOL_key_action = 595,               /* key_action  */
  YYSYMBOL_ColConstraint = 596,            /* ColConstraint  */
  YYSYMBOL_ColConstraintElem = 597,        /* ColConstraintElem  */
  YYSYMBOL_GeneratedColumnType = 598,      /* GeneratedColumnType  */
  YYSYMBOL_opt_GeneratedColumnType = 599,  /* opt_GeneratedColumnType  */
  YYSYMBOL_GeneratedConstraintElem = 600,  /* GeneratedConstraintElem  */
  YYSYMBOL_generic_option_elem = 601,      /* generic_option_elem  */
  YYSYMBOL_key_update = 602,               /* key_update  */
  YYSYMBOL_key_actions = 603,              /* key_actions  */
  YYSYMBOL_OnCommitOption = 604,           /* OnCommitOption  */
  YYSYMBOL_reloptions = 605,               /* reloptions  */
  YYSYMBOL_opt_no_inherit = 606,           /* opt_no_inherit  */
  YYSYMBOL_TableConstraint = 607,          /* TableConstraint  */
  YYSYMBOL_TableLikeOption = 608,          /* TableLikeOption  */
  YYSYMBOL_reloption_list = 609,           /* reloption_list  */
  YYSYMBOL_ExistingIndex = 610,            /* ExistingIndex  */
  YYSYMBOL_ConstraintAttr = 611,           /* ConstraintAttr  */
  YYSYMBOL_OptWith = 612,                  /* OptWith  */
  YYSYMBOL_definition = 613,               /* definition  */
  YYSYMBOL_TableLikeOptionList = 614,      /* TableLikeOptionList  */
  YYSYMBOL_generic_option_name = 615,      /* generic_option_name  */
  YYSYMBOL_ConstraintAttributeElem = 616,  /* ConstraintAttributeElem  */
  YYSYMBOL_columnDef = 617,                /* columnDef  */
  YYSYMBOL_def_list = 618,                 /* def_list  */
  YYSYMBOL_index_name = 619,               /* index_name  */
  YYSYMBOL_TableElement = 620,             /* TableElement  */
  YYSYMBOL_def_elem = 621,                 /* def_elem  */
  YYSYMBOL_opt_definition = 622,           /* opt_definition  */
  YYSYMBOL_OptTableElementList = 623,      /* OptTableElementList  */
  YYSYMBOL_columnElem = 624,               /* columnElem  */
  YYSYMBOL_opt_column_list = 625,          /* opt_column_list  */
  YYSYMBOL_ColQualList = 626,              /* ColQualList  */
  YYSYMBOL_key_delete = 627,               /* key_delete  */
  YYSYMBOL_reloption_elem = 628,           /* reloption_elem  */
  YYSYMBOL_columnList = 629,               /* columnList  */
  YYSYMBOL_columnList_opt_comma = 630,     /* columnList_opt_comma  */
  YYSYMBOL_func_type = 631,                /* func_type  */
  YYSYMBOL_ConstraintElem = 632,           /* ConstraintElem  */
  YYSYMBOL_TableElementList = 633,         /* TableElementList  */
  YYSYMBOL_key_match = 634,                /* key_match  */
  YYSYMBOL_TableLikeClause = 635,          /* TableLikeClause  */
  YYSYMBOL_OptTemp = 636,                  /* OptTemp  */
  YYSYMBOL_generated_when = 637,           /* generated_when  */
  YYSYMBOL_CreateAsStmt = 638,             /* CreateAsStmt  */
  YYSYMBOL_opt_with_data = 639,            /* opt_with_data  */
  YYSYMBOL_create_as_target = 640,         /* create_as_target  */
  YYSYMBOL_unreserved_keyword = 641,       /* unreserved_keyword  */
  YYSYMBOL_col_name_keyword = 642,         /* col_name_keyword  */
  YYSYMBOL_func_name_keyword = 643,        /* func_name_keyword  */
  YYSYMBOL_type_name_keyword = 644,        /* type_name_keyword  */
  YYSYMBOL_other_keyword = 645,            /* other_keyword  */
  YYSYMBOL_type_func_name_keyword = 646,   /* type_func_name_keyword  */
  YYSYMBOL_reserved_keyword = 647,         /* reserved_keyword  */
  YYSYMBOL_pgq_unreserved_keyword = 648,   /* pgq_unreserved_keyword  */
  YYSYMBOL_pgq_col_name_keyword = 649,     /* pgq_col_name_keyword  */
  YYSYMBOL_CreateFunctionStmt = 650,       /* CreateFunctionStmt  */
  YYSYMBOL_macro_alias = 651,              /* macro_alias  */
  YYSYMBOL_param_list = 652,               /* param_list  */
  YYSYMBOL_CreateSchemaStmt = 653,         /* CreateSchemaStmt  */
  YYSYMBOL_OptSchemaEltList = 654,         /* OptSchemaEltList  */
  YYSYMBOL_schema_stmt = 655,              /* schema_stmt  */
  YYSYMBOL_CreateSeqStmt = 656,            /* CreateSeqStmt  */
  YYSYMBOL_OptSeqOptList = 657,            /* OptSeqOptList  */
  YYSYMBOL_CreateTypeStmt = 658,           /* CreateTypeStmt  */
  YYSYMBOL_opt_enum_val_list = 659,        /* opt_enum_val_list  */
  YYSYMBOL_enum_val_list = 660,            /* enum_val_list  */
  YYSYMBOL_DeallocateStmt = 661,           /* DeallocateStmt  */
  YYSYMBOL_DeleteStmt = 662,               /* DeleteStmt  */
  YYSYMBOL_relation_expr_opt_alias = 663,  /* relation_expr_opt_alias  */
  YYSYMBOL_where_or_current_clause = 664,  /* where_or_current_clause  */
  YYSYMBOL_using_clause = 665,             /* using_clause  */
  YYSYMBOL_DropStmt = 666,                 /* DropStmt  */
  YYSYMBOL_drop_type_any_name = 667,       /* drop_type_any_name  */
  YYSYMBOL_drop_type_name = 668,           /* drop_type_name  */
  YYSYMBOL_any_name_list = 669,            /* any_name_list  */
  YYSYMBOL_opt_drop_behavior = 670,        /* opt_drop_behavior  */
  YYSYMBOL_drop_type_name_on_any_name = 671, /* drop_type_name_on_any_name  */
  YYSYMBOL_type_name_list = 672,           /* type_name_list  */
  YYSYMBOL_ExecuteStmt = 673,              /* ExecuteStmt  */
  YYSYMBOL_execute_param_expr = 674,       /* execute_param_expr  */
  YYSYMBOL_execute_param_list = 675,       /* execute_param_list  */
  YYSYMBOL_execute_param_clause = 676,     /* execute_param_clause  */
  YYSYMBOL_ExplainStmt = 677,              /* ExplainStmt  */
  YYSYMBOL_opt_verbose = 678,              /* opt_verbose  */
  YYSYMBOL_explain_option_arg = 679,       /* explain_option_arg  */
  YYSYMBOL_ExplainableStmt = 680,          /* ExplainableStmt  */
  YYSYMBOL_NonReservedWord = 681,          /* NonReservedWord  */
  YYSYMBOL_NonReservedWord_or_Sconst = 682, /* NonReservedWord_or_Sconst  */
  YYSYMBOL_explain_option_list = 683,      /* explain_option_list  */
  YYSYMBOL_analyze_keyword = 684,          /* analyze_keyword  */
  YYSYMBOL_opt_boolean_or_string = 685,    /* opt_boolean_or_string  */
  YYSYMBOL_explain_option_elem = 686,      /* explain_option_elem  */
  YYSYMBOL_explain_option_name = 687,      /* explain_option_name  */
  YYSYMBOL_ExportStmt = 688,               /* ExportStmt  */
  YYSYMBOL_ImportStmt = 689,               /* ImportStmt  */
  YYSYMBOL_IndexStmt = 690,                /* IndexStmt  */
  YYSYMBOL_access_method = 691,            /* access_method  */
  YYSYMBOL_access_method_clause = 692,     /* access_method_clause  */
  YYSYMBOL_opt_concurrently = 693,         /* opt_concurrently  */
  YYSYMBOL_opt_index_name = 694,           /* opt_index_name  */
  YYSYMBOL_opt_reloptions = 695,           /* opt_reloptions  */
  YYSYMBOL_opt_unique = 696,               /* opt_unique  */
  YYSYMBOL_InsertStmt = 697,               /* InsertStmt  */
  YYSYMBOL_insert_rest = 698,              /* insert_rest  */
  YYSYMBOL_insert_target = 699,            /* insert_target  */
  YYSYMBOL_opt_by_name_or_position = 700,  /* opt_by_name_or_position  */
  YYSYMBOL_opt_conf_expr = 701,            /* opt_conf_expr  */
  YYSYMBOL_opt_with_clause = 702,          /* opt_with_clause  */
  YYSYMBOL_insert_column_item = 703,       /* insert_column_item  */
  YYSYMBOL_set_clause = 704,               /* set_clause  */
  YYSYMBOL_opt_or_action = 705,            /* opt_or_action  */
  YYSYMBOL_opt_on_conflict = 706,          /* opt_on_conflict  */
  YYSYMBOL_index_elem = 707,               /* index_elem  */
  YYSYMBOL_returning_clause = 708,         /* returning_clause  */
  YYSYMBOL_override_kind = 709,            /* override_kind  */
  YYSYMBOL_set_target_list = 710,          /* set_target_list  */
  YYSYMBOL_opt_collate = 711,              /* opt_collate  */
  YYSYMBOL_opt_class = 712,                /* opt_class  */
  YYSYMBOL_insert_column_list = 713,       /* insert_column_list  */
  YYSYMBOL_set_clause_list = 714,          /* set_clause_list  */
  YYSYMBOL_set_clause_list_opt_comma = 715, /* set_clause_list_opt_comma  */
  YYSYMBOL_index_params = 716,             /* index_params  */
  YYSYMBOL_set_target = 717,               /* set_target  */
  YYSYMBOL_LoadStmt = 718,                 /* LoadStmt  */
  YYSYMBOL_file_name = 719,                /* file_name  */
  YYSYMBOL_repo_path = 720,                /* repo_path  */
  YYSYMBOL_PGQ_IDENT = 721,                /* PGQ_IDENT  */
  YYSYMBOL_DropPropertyGraphStmt = 722,    /* DropPropertyGraphStmt  */
  YYSYMBOL_VertexOrNode = 723,             /* VertexOrNode  */
  YYSYMBOL_EdgeOrRelationship = 724,       /* EdgeOrRelationship  */
  YYSYMBOL_CreatePropertyGraphStmt = 725,  /* CreatePropertyGraphStmt  */
  YYSYMBOL_VertexTableDefinitionList = 726, /* VertexTableDefinitionList  */
  YYSYMBOL_KeySpecification = 727,         /* KeySpecification  */
  YYSYMBOL_KeyDefinition = 728,            /* KeyDefinition  */
  YYSYMBOL_KeyReference = 729,             /* KeyReference  */
  YYSYMBOL_LabelList = 730,                /* LabelList  */
  YYSYMBOL_LabelOptional = 731,            /* LabelOptional  */
  YYSYMBOL_Discriminator = 732,            /* Discriminator  */
  YYSYMBOL_VertexTableDefinition = 733,    /* VertexTableDefinition  */
  YYSYMBOL_EdgeTableDefinitionList = 734,  /* EdgeTableDefinitionList  */
  YYSYMBOL_EdgeTableDefinition = 735,      /* EdgeTableDefinition  */
  YYSYMBOL_AreOptional = 736,              /* AreOptional  */
  YYSYMBOL_IdentOptionalAs = 737,          /* IdentOptionalAs  */
  YYSYMBOL_QualifiednameOptionalAs = 738,  /* QualifiednameOptionalAs  */
  YYSYMBOL_PropertiesList = 739,           /* PropertiesList  */
  YYSYMBOL_ExceptOptional = 740,           /* ExceptOptional  */
  YYSYMBOL_PropertiesSpec = 741,           /* PropertiesSpec  */
  YYSYMBOL_PropertiesClause = 742,         /* PropertiesClause  */
  YYSYMBOL_GraphTableWhereOptional = 743,  /* GraphTableWhereOptional  */
  YYSYMBOL_GraphTableStmt = 744,           /* GraphTableStmt  */
  YYSYMBOL_ColumnSpec = 745,               /* ColumnSpec  */
  YYSYMBOL_ColumnList = 746,               /* ColumnList  */
  YYSYMBOL_KeepOptional = 747,             /* KeepOptional  */
  YYSYMBOL_PathOrPathsOptional = 748,      /* PathOrPathsOptional  */
  YYSYMBOL_GroupOrGroupsOptional = 749,    /* GroupOrGroupsOptional  */
  YYSYMBOL_PathVariableOptional = 750,     /* PathVariableOptional  */
  YYSYMBOL_PathModeOptional = 751,         /* PathModeOptional  */
  YYSYMBOL_TopKOptional = 752,             /* TopKOptional  */
  YYSYMBOL_PathPrefix = 753,               /* PathPrefix  */
  YYSYMBOL_PathPatternList = 754,          /* PathPatternList  */
  YYSYMBOL_PathPattern = 755,              /* PathPattern  */
  YYSYMBOL_PatternUnion = 756,             /* PatternUnion  */
  YYSYMBOL_KleeneQuantifierOptional = 757, /* KleeneQuantifierOptional  */
  YYSYMBOL_KleeneOptional = 758,           /* KleeneOptional  */
  YYSYMBOL_CostNum = 759,                  /* CostNum  */
  YYSYMBOL_CostDefault = 760,              /* CostDefault  */
  YYSYMBOL_CostOptional = 761,             /* CostOptional  */
  YYSYMBOL_SubPath = 762,                  /* SubPath  */
  YYSYMBOL_EnclosedSubPath = 763,          /* EnclosedSubPath  */
  YYSYMBOL_PathElement = 764,              /* PathElement  */
  YYSYMBOL_PathSequence = 765,             /* PathSequence  */
  YYSYMBOL_PathConcatenation = 766,        /* PathConcatenation  */
  YYSYMBOL_OrLabelExpression = 767,        /* OrLabelExpression  */
  YYSYMBOL_AndLabelExpression = 768,       /* AndLabelExpression  */
  YYSYMBOL_ComposedLabelExpression = 769,  /* ComposedLabelExpression  */
  YYSYMBOL_LabelExpression = 770,          /* LabelExpression  */
  YYSYMBOL_LabelExpressionOptional = 771,  /* LabelExpressionOptional  */
  YYSYMBOL_IsOrColon = 772,                /* IsOrColon  */
  YYSYMBOL_ArrowRight = 773,               /* ArrowRight  */
  YYSYMBOL_ArrowLeftBracket = 774,         /* ArrowLeftBracket  */
  YYSYMBOL_AbbreviatedEdge = 775,          /* AbbreviatedEdge  */
  YYSYMBOL_VariableOptional = 776,         /* VariableOptional  */
  YYSYMBOL_FullElementSpec = 777,          /* FullElementSpec  */
  YYSYMBOL_EdgePattern = 778,              /* EdgePattern  */
  YYSYMBOL_VertexPattern = 779,            /* VertexPattern  */
  YYSYMBOL_pgq_expr = 780,                 /* pgq_expr  */
  YYSYMBOL_PragmaStmt = 781,               /* PragmaStmt  */
  YYSYMBOL_PrepareStmt = 782,              /* PrepareStmt  */
  YYSYMBOL_prep_type_clause = 783,         /* prep_type_clause  */
  YYSYMBOL_PreparableStmt = 784,           /* PreparableStmt  */
  YYSYMBOL_RenameStmt = 785,               /* RenameStmt  */
  YYSYMBOL_opt_column = 786,               /* opt_column  */
  YYSYMBOL_SelectStmt = 787,               /* SelectStmt  */
  YYSYMBOL_select_with_parens = 788,       /* select_with_parens  */
  YYSYMBOL_select_no_parens = 789,         /* select_no_parens  */
  YYSYMBOL_select_clause = 790,            /* select_clause  */
  YYSYMBOL_opt_select = 791,               /* opt_select  */
  YYSYMBOL_simple_select = 792,            /* simple_select  */
  YYSYMBOL_value_or_values = 793,          /* value_or_values  */
  YYSYMBOL_pivot_keyword = 794,            /* pivot_keyword  */
  YYSYMBOL_unpivot_keyword = 795,          /* unpivot_keyword  */
  YYSYMBOL_pivot_column_entry = 796,       /* pivot_column_entry  */
  YYSYMBOL_pivot_column_list_internal = 797, /* pivot_column_list_internal  */
  YYSYMBOL_pivot_column_list = 798,        /* pivot_column_list  */
  YYSYMBOL_with_clause = 799,              /* with_clause  */
  YYSYMBOL_cte_list = 800,                 /* cte_list  */
  YYSYMBOL_common_table_expr = 801,        /* common_table_expr  */
  YYSYMBOL_opt_materialized = 802,         /* opt_materialized  */
  YYSYMBOL_into_clause = 803,              /* into_clause  */
  YYSYMBOL_OptTempTableName = 804,         /* OptTempTableName  */
  YYSYMBOL_opt_table = 805,                /* opt_table  */
  YYSYMBOL_all_or_distinct = 806,          /* all_or_distinct  */
  YYSYMBOL_by_name = 807,                  /* by_name  */
  YYSYMBOL_distinct_clause = 808,          /* distinct_clause  */
  YYSYMBOL_opt_all_clause = 809,           /* opt_all_clause  */
  YYSYMBOL_opt_ignore_nulls = 810,         /* opt_ignore_nulls  */
  YYSYMBOL_opt_sort_clause = 811,          /* opt_sort_clause  */
  YYSYMBOL_sort_clause = 812,              /* sort_clause  */
  YYSYMBOL_sortby_list = 813,              /* sortby_list  */
  YYSYMBOL_sortby = 814,                   /* sortby  */
  YYSYMBOL_opt_asc_desc = 815,             /* opt_asc_desc  */
  YYSYMBOL_opt_nulls_order = 816,          /* opt_nulls_order  */
  YYSYMBOL_select_limit = 817,             /* select_limit  */
  YYSYMBOL_opt_select_limit = 818,         /* opt_select_limit  */
  YYSYMBOL_limit_clause = 819,             /* limit_clause  */
  YYSYMBOL_offset_clause = 820,            /* offset_clause  */
  YYSYMBOL_sample_count = 821,             /* sample_count  */
  YYSYMBOL_sample_clause = 822,            /* sample_clause  */
  YYSYMBOL_opt_sample_func = 823,          /* opt_sample_func  */
  YYSYMBOL_tablesample_entry = 824,        /* tablesample_entry  */
  YYSYMBOL_tablesample_clause = 825,       /* tablesample_clause  */
  YYSYMBOL_opt_tablesample_clause = 826,   /* opt_tablesample_clause  */
  YYSYMBOL_opt_repeatable_clause = 827,    /* opt_repeatable_clause  */
  YYSYMBOL_select_limit_value = 828,       /* select_limit_value  */
  YYSYMBOL_select_offset_value = 829,      /* select_offset_value  */
  YYSYMBOL_select_fetch_first_value = 830, /* select_fetch_first_value  */
  YYSYMBOL_I_or_F_const = 831,             /* I_or_F_const  */
  YYSYMBOL_row_or_rows = 832,              /* row_or_rows  */
  YYSYMBOL_first_or_next = 833,            /* first_or_next  */
  YYSYMBOL_group_clause = 834,             /* group_clause  */
  YYSYMBOL_group_by_list = 835,            /* group_by_list  */
  YYSYMBOL_group_by_list_opt_comma = 836,  /* group_by_list_opt_comma  */
  YYSYMBOL_group_by_item = 837,            /* group_by_item  */
  YYSYMBOL_empty_grouping_set = 838,       /* empty_grouping_set  */
  YYSYMBOL_rollup_clause = 839,            /* rollup_clause  */
  YYSYMBOL_cube_clause = 840,              /* cube_clause  */
  YYSYMBOL_grouping_sets_clause = 841,     /* grouping_sets_clause  */
  YYSYMBOL_grouping_or_grouping_id = 842,  /* grouping_or_grouping_id  */
  YYSYMBOL_having_clause = 843,            /* having_clause  */
  YYSYMBOL_qualify_clause = 844,           /* qualify_clause  */
  YYSYMBOL_for_locking_clause = 845,       /* for_locking_clause  */
  YYSYMBOL_opt_for_locking_clause = 846,   /* opt_for_locking_clause  */
  YYSYMBOL_for_locking_items = 847,        /* for_locking_items  */
  YYSYMBOL_for_locking_item = 848,         /* for_locking_item  */
  YYSYMBOL_for_locking_strength = 849,     /* for_locking_strength  */
  YYSYMBOL_locked_rels_list = 850,         /* locked_rels_list  */
  YYSYMBOL_opt_nowait_or_skip = 851,       /* opt_nowait_or_skip  */
  YYSYMBOL_values_clause = 852,            /* values_clause  */
  YYSYMBOL_values_clause_opt_comma = 853,  /* values_clause_opt_comma  */
  YYSYMBOL_from_clause = 854,              /* from_clause  */
  YYSYMBOL_from_list = 855,                /* from_list  */
  YYSYMBOL_from_list_opt_comma = 856,      /* from_list_opt_comma  */
  YYSYMBOL_table_ref = 857,                /* table_ref  */
  YYSYMBOL_opt_pivot_group_by = 858,       /* opt_pivot_group_by  */
  YYSYMBOL_opt_include_nulls = 859,        /* opt_include_nulls  */
  YYSYMBOL_single_pivot_value = 860,       /* single_pivot_value  */
  YYSYMBOL_pivot_header = 861,             /* pivot_header  */
  YYSYMBOL_pivot_value = 862,              /* pivot_value  */
  YYSYMBOL_pivot_value_list = 863,         /* pivot_value_list  */
  YYSYMBOL_unpivot_header = 864,           /* unpivot_header  */
  YYSYMBOL_unpivot_value = 865,            /* unpivot_value  */
  YYSYMBOL_unpivot_value_list = 866,       /* unpivot_value_list  */
  YYSYMBOL_joined_table = 867,             /* joined_table  */
  YYSYMBOL_alias_clause = 868,             /* alias_clause  */
  YYSYMBOL_opt_alias_clause = 869,         /* opt_alias_clause  */
  YYSYMBOL_func_alias_clause = 870,        /* func_alias_clause  */
  YYSYMBOL_join_type = 871,                /* join_type  */
  YYSYMBOL_join_outer = 872,               /* join_outer  */
  YYSYMBOL_join_qual = 873,                /* join_qual  */
  YYSYMBOL_relation_expr = 874,            /* relation_expr  */
  YYSYMBOL_func_table = 875,               /* func_table  */
  YYSYMBOL_rowsfrom_item = 876,            /* rowsfrom_item  */
  YYSYMBOL_rowsfrom_list = 877,            /* rowsfrom_list  */
  YYSYMBOL_opt_col_def_list = 878,         /* opt_col_def_list  */
  YYSYMBOL_opt_ordinality = 879,           /* opt_ordinality  */
  YYSYMBOL_where_clause = 880,             /* where_clause  */
  YYSYMBOL_TableFuncElementList = 881,     /* TableFuncElementList  */
  YYSYMBOL_TableFuncElement = 882,         /* TableFuncElement  */
  YYSYMBOL_opt_collate_clause = 883,       /* opt_collate_clause  */
  YYSYMBOL_colid_type_list = 884,          /* colid_type_list  */
  YYSYMBOL_RowOrStruct = 885,              /* RowOrStruct  */
  YYSYMBOL_opt_Typename = 886,             /* opt_Typename  */
  YYSYMBOL_Typename = 887,                 /* Typename  */
  YYSYMBOL_opt_array_bounds = 888,         /* opt_array_bounds  */
  YYSYMBOL_SimpleTypename = 889,           /* SimpleTypename  */
  YYSYMBOL_ConstTypename = 890,            /* ConstTypename  */
  YYSYMBOL_GenericType = 891,              /* GenericType  */
  YYSYMBOL_opt_type_modifiers = 892,       /* opt_type_modifiers  */
  YYSYMBOL_Numeric = 893,                  /* Numeric  */
  YYSYMBOL_opt_float = 894,                /* opt_float  */
  YYSYMBOL_Bit = 895,                      /* Bit  */
  YYSYMBOL_ConstBit = 896,                 /* ConstBit  */
  YYSYMBOL_BitWithLength = 897,            /* BitWithLength  */
  YYSYMBOL_BitWithoutLength = 898,         /* BitWithoutLength  */
  YYSYMBOL_Character = 899,                /* Character  */
  YYSYMBOL_ConstCharacter = 900,           /* ConstCharacter  */
  YYSYMBOL_CharacterWithLength = 901,      /* CharacterWithLength  */
  YYSYMBOL_CharacterWithoutLength = 902,   /* CharacterWithoutLength  */
  YYSYMBOL_character = 903,                /* character  */
  YYSYMBOL_opt_varying = 904,              /* opt_varying  */
  YYSYMBOL_ConstDatetime = 905,            /* ConstDatetime  */
  YYSYMBOL_ConstInterval = 906,            /* ConstInterval  */
  YYSYMBOL_opt_timezone = 907,             /* opt_timezone  */
  YYSYMBOL_year_keyword = 908,             /* year_keyword  */
  YYSYMBOL_month_keyword = 909,            /* month_keyword  */
  YYSYMBOL_day_keyword = 910,              /* day_keyword  */
  YYSYMBOL_hour_keyword = 911,             /* hour_keyword  */
  YYSYMBOL_minute_keyword = 912,           /* minute_keyword  */
  YYSYMBOL_second_keyword = 913,           /* second_keyword  */
  YYSYMBOL_millisecond_keyword = 914,      /* millisecond_keyword  */
  YYSYMBOL_microsecond_keyword = 915,      /* microsecond_keyword  */
  YYSYMBOL_opt_interval = 916,             /* opt_interval  */
  YYSYMBOL_a_expr = 917,                   /* a_expr  */
  YYSYMBOL_b_expr = 918,                   /* b_expr  */
  YYSYMBOL_c_expr = 919,                   /* c_expr  */
  YYSYMBOL_d_expr = 920,                   /* d_expr  */
  YYSYMBOL_indirection_expr = 921,         /* indirection_expr  */
  YYSYMBOL_struct_expr = 922,              /* struct_expr  */
  YYSYMBOL_func_application = 923,         /* func_application  */
  YYSYMBOL_func_expr = 924,                /* func_expr  */
  YYSYMBOL_func_expr_windowless = 925,     /* func_expr_windowless  */
  YYSYMBOL_func_expr_common_subexpr = 926, /* func_expr_common_subexpr  */
  YYSYMBOL_list_comprehension = 927,       /* list_comprehension  */
  YYSYMBOL_within_group_clause = 928,      /* within_group_clause  */
  YYSYMBOL_filter_clause = 929,            /* filter_clause  */
  YYSYMBOL_export_clause = 930,            /* export_clause  */
  YYSYMBOL_window_clause = 931,            /* window_clause  */
  YYSYMBOL_window_definition_list = 932,   /* window_definition_list  */
  YYSYMBOL_window_definition = 933,        /* window_definition  */
  YYSYMBOL_over_clause = 934,              /* over_clause  */
  YYSYMBOL_window_specification = 935,     /* window_specification  */
  YYSYMBOL_opt_existing_window_name = 936, /* opt_existing_window_name  */
  YYSYMBOL_opt_partition_clause = 937,     /* opt_partition_clause  */
  YYSYMBOL_opt_frame_clause = 938,         /* opt_frame_clause  */
  YYSYMBOL_frame_extent = 939,             /* frame_extent  */
  YYSYMBOL_frame_bound = 940,              /* frame_bound  */
  YYSYMBOL_qualified_row = 941,            /* qualified_row  */
  YYSYMBOL_row = 942,                      /* row  */
  YYSYMBOL_dict_arg = 943,                 /* dict_arg  */
  YYSYMBOL_dict_arguments = 944,           /* dict_arguments  */
  YYSYMBOL_dict_arguments_opt_comma = 945, /* dict_arguments_opt_comma  */
  YYSYMBOL_map_arg = 946,                  /* map_arg  */
  YYSYMBOL_map_arguments = 947,            /* map_arguments  */
  YYSYMBOL_map_arguments_opt_comma = 948,  /* map_arguments_opt_comma  */
  YYSYMBOL_opt_map_arguments_opt_comma = 949, /* opt_map_arguments_opt_comma  */
  YYSYMBOL_sub_type = 950,                 /* sub_type  */
  YYSYMBOL_all_Op = 951,                   /* all_Op  */
  YYSYMBOL_MathOp = 952,                   /* MathOp  */
  YYSYMBOL_qual_Op = 953,                  /* qual_Op  */
  YYSYMBOL_qual_all_Op = 954,              /* qual_all_Op  */
  YYSYMBOL_subquery_Op = 955,              /* subquery_Op  */
  YYSYMBOL_any_operator = 956,             /* any_operator  */
  YYSYMBOL_c_expr_list = 957,              /* c_expr_list  */
  YYSYMBOL_c_expr_list_opt_comma = 958,    /* c_expr_list_opt_comma  */
  YYSYMBOL_expr_list = 959,                /* expr_list  */
  YYSYMBOL_expr_list_opt_comma = 960,      /* expr_list_opt_comma  */
  YYSYMBOL_opt_expr_list_opt_comma = 961,  /* opt_expr_list_opt_comma  */
  YYSYMBOL_func_arg_list = 962,            /* func_arg_list  */
  YYSYMBOL_func_arg_expr = 963,            /* func_arg_expr  */
  YYSYMBOL_type_list = 964,                /* type_list  */
  YYSYMBOL_extract_list = 965,             /* extract_list  */
  YYSYMBOL_extract_arg = 966,              /* extract_arg  */
  YYSYMBOL_overlay_list = 967,             /* overlay_list  */
  YYSYMBOL_overlay_placing = 968,          /* overlay_placing  */
  YYSYMBOL_position_list = 969,            /* position_list  */
  YYSYMBOL_substr_list = 970,              /* substr_list  */
  YYSYMBOL_substr_from = 971,              /* substr_from  */
  YYSYMBOL_substr_for = 972,               /* substr_for  */
  YYSYMBOL_trim_list = 973,                /* trim_list  */
  YYSYMBOL_in_expr = 974,                  /* in_expr  */
  YYSYMBOL_case_expr = 975,                /* case_expr  */
  YYSYMBOL_when_clause_list = 976,         /* when_clause_list  */
  YYSYMBOL_when_clause = 977,              /* when_clause  */
  YYSYMBOL_case_default = 978,             /* case_default  */
  YYSYMBOL_case_arg = 979,                 /* case_arg  */
  YYSYMBOL_columnref = 980,                /* columnref  */
  YYSYMBOL_opt_slice_bound = 981,          /* opt_slice_bound  */
  YYSYMBOL_opt_indirection = 982,          /* opt_indirection  */
  YYSYMBOL_opt_func_arguments = 983,       /* opt_func_arguments  */
  YYSYMBOL_extended_indirection_el = 984,  /* extended_indirection_el  */
  YYSYMBOL_opt_extended_indirection = 985, /* opt_extended_indirection  */
  YYSYMBOL_opt_asymmetric = 986,           /* opt_asymmetric  */
  YYSYMBOL_opt_target_list_opt_comma = 987, /* opt_target_list_opt_comma  */
  YYSYMBOL_target_list = 988,              /* target_list  */
  YYSYMBOL_target_list_opt_comma = 989,    /* target_list_opt_comma  */
  YYSYMBOL_target_el = 990,                /* target_el  */
  YYSYMBOL_except_list = 991,              /* except_list  */
  YYSYMBOL_opt_except_list = 992,          /* opt_except_list  */
  YYSYMBOL_replace_list_el = 993,          /* replace_list_el  */
  YYSYMBOL_replace_list = 994,             /* replace_list  */
  YYSYMBOL_replace_list_opt_comma = 995,   /* replace_list_opt_comma  */
  YYSYMBOL_opt_replace_list = 996,         /* opt_replace_list  */
  YYSYMBOL_qualified_name_list = 997,      /* qualified_name_list  */
  YYSYMBOL_name_list = 998,                /* name_list  */
  YYSYMBOL_name_list_opt_comma = 999,      /* name_list_opt_comma  */
  YYSYMBOL_name_list_opt_comma_opt_bracket = 1000, /* name_list_opt_comma_opt_bracket  */
  YYSYMBOL_name = 1001,                    /* name  */
  YYSYMBOL_func_name = 1002,               /* func_name  */
  YYSYMBOL_AexprConst = 1003,              /* AexprConst  */
  YYSYMBOL_Iconst = 1004,                  /* Iconst  */
  YYSYMBOL_type_function_name = 1005,      /* type_function_name  */
  YYSYMBOL_function_name_token = 1006,     /* function_name_token  */
  YYSYMBOL_type_name_token = 1007,         /* type_name_token  */
  YYSYMBOL_any_name = 1008,                /* any_name  */
  YYSYMBOL_attrs = 1009,                   /* attrs  */
  YYSYMBOL_opt_name_list = 1010,           /* opt_name_list  */
  YYSYMBOL_param_name = 1011,              /* param_name  */
  YYSYMBOL_ColLabelOrString = 1012,        /* ColLabelOrString  */
  YYSYMBOL_TransactionStmt = 1013,         /* TransactionStmt  */
  YYSYMBOL_opt_transaction = 1014,         /* opt_transaction  */
  YYSYMBOL_UpdateStmt = 1015,              /* UpdateStmt  */
  YYSYMBOL_UseStmt = 1016,                 /* UseStmt  */
  YYSYMBOL_VacuumStmt = 1017,              /* VacuumStmt  */
  YYSYMBOL_vacuum_option_elem = 1018,      /* vacuum_option_elem  */
  YYSYMBOL_opt_full = 1019,                /* opt_full  */
  YYSYMBOL_vacuum_option_list = 1020,      /* vacuum_option_list  */
  YYSYMBOL_opt_freeze = 1021,              /* opt_freeze  */
  YYSYMBOL_VariableResetStmt = 1022,       /* VariableResetStmt  */
  YYSYMBOL_generic_reset = 1023,           /* generic_reset  */
  YYSYMBOL_reset_rest = 1024,              /* reset_rest  */
  YYSYMBOL_VariableSetStmt = 1025,         /* VariableSetStmt  */
  YYSYMBOL_set_rest = 1026,                /* set_rest  */
  YYSYMBOL_generic_set = 1027,             /* generic_set  */
  YYSYMBOL_var_value = 1028,               /* var_value  */
  YYSYMBOL_zone_value = 1029,              /* zone_value  */
  YYSYMBOL_var_list = 1030,                /* var_list  */
  YYSYMBOL_VariableShowStmt = 1031,        /* VariableShowStmt  */
  YYSYMBOL_show_or_describe = 1032,        /* show_or_describe  */
  YYSYMBOL_opt_tables = 1033,              /* opt_tables  */
  YYSYMBOL_var_name = 1034,                /* var_name  */
  YYSYMBOL_table_id = 1035,                /* table_id  */
  YYSYMBOL_ViewStmt = 1036,                /* ViewStmt  */
  YYSYMBOL_opt_check_option = 1037         /* opt_check_option  */
};
typedef enum yysymbol_kind_t yysymbol_kind_t;




#ifdef short
# undef short
#endif

/* On compilers that do not define __PTRDIFF_MAX__ etc., make sure
   <limits.h> and (if available) <stdint.h> are included
   so that the code can choose integer types of a good width.  */

#ifndef __PTRDIFF_MAX__
# include <limits.h> /* INFRINGES ON USER NAME SPACE */
# if defined __STDC_VERSION__ && 199901 <= __STDC_VERSION__
#  include <stdint.h> /* INFRINGES ON USER NAME SPACE */
#  define YY_STDINT_H
# endif
#endif

/* Narrow types that promote to a signed type and that can represent a
   signed or unsigned integer of at least N bits.  In tables they can
   save space and decrease cache pressure.  Promoting to a signed type
   helps avoid bugs in integer arithmetic.  */

#ifdef __INT_LEAST8_MAX__
typedef __INT_LEAST8_TYPE__ yytype_int8;
#elif defined YY_STDINT_H
typedef int_least8_t yytype_int8;
#else
typedef signed char yytype_int8;
#endif

#ifdef __INT_LEAST16_MAX__
typedef __INT_LEAST16_TYPE__ yytype_int16;
#elif defined YY_STDINT_H
typedef int_least16_t yytype_int16;
#else
typedef short yytype_int16;
#endif

/* Work around bug in HP-UX 11.23, which defines these macros
   incorrectly for preprocessor constants.  This workaround can likely
   be removed in 2023, as HPE has promised support for HP-UX 11.23
   (aka HP-UX 11i v2) only through the end of 2022; see Table 2 of
   <https://h20195.www2.hpe.com/V2/getpdf.aspx/4AA4-7673ENW.pdf>.  */
#ifdef __hpux
# undef UINT_LEAST8_MAX
# undef UINT_LEAST16_MAX
# define UINT_LEAST8_MAX 255
# define UINT_LEAST16_MAX 65535
#endif

#if defined __UINT_LEAST8_MAX__ && __UINT_LEAST8_MAX__ <= __INT_MAX__
typedef __UINT_LEAST8_TYPE__ yytype_uint8;
#elif (!defined __UINT_LEAST8_MAX__ && defined YY_STDINT_H \
       && UINT_LEAST8_MAX <= INT_MAX)
typedef uint_least8_t yytype_uint8;
#elif !defined __UINT_LEAST8_MAX__ && UCHAR_MAX <= INT_MAX
typedef unsigned char yytype_uint8;
#else
typedef short yytype_uint8;
#endif

#if defined __UINT_LEAST16_MAX__ && __UINT_LEAST16_MAX__ <= __INT_MAX__
typedef __UINT_LEAST16_TYPE__ yytype_uint16;
#elif (!defined __UINT_LEAST16_MAX__ && defined YY_STDINT_H \
       && UINT_LEAST16_MAX <= INT_MAX)
typedef uint_least16_t yytype_uint16;
#elif !defined __UINT_LEAST16_MAX__ && USHRT_MAX <= INT_MAX
typedef unsigned short yytype_uint16;
#else
typedef int yytype_uint16;
#endif

#ifndef YYPTRDIFF_T
# if defined __PTRDIFF_TYPE__ && defined __PTRDIFF_MAX__
#  define YYPTRDIFF_T __PTRDIFF_TYPE__
#  define YYPTRDIFF_MAXIMUM __PTRDIFF_MAX__
# elif defined PTRDIFF_MAX
#  ifndef ptrdiff_t
#   include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  endif
#  define YYPTRDIFF_T ptrdiff_t
#  define YYPTRDIFF_MAXIMUM PTRDIFF_MAX
# else
#  define YYPTRDIFF_T long
#  define YYPTRDIFF_MAXIMUM LONG_MAX
# endif
#endif

#ifndef YYSIZE_T
# ifdef __SIZE_TYPE__
#  define YYSIZE_T __SIZE_TYPE__
# elif defined size_t
#  define YYSIZE_T size_t
# elif defined __STDC_VERSION__ && 199901 <= __STDC_VERSION__
#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  define YYSIZE_T size_t
# else
#  define YYSIZE_T unsigned
# endif
#endif

#define YYSIZE_MAXIMUM                                  \
  YY_CAST (YYPTRDIFF_T,                                 \
           (YYPTRDIFF_MAXIMUM < YY_CAST (YYSIZE_T, -1)  \
            ? YYPTRDIFF_MAXIMUM                         \
            : YY_CAST (YYSIZE_T, -1)))

#define YYSIZEOF(X) YY_CAST (YYPTRDIFF_T, sizeof (X))


/* Stored state numbers (used for stacks). */
typedef yytype_int16 yy_state_t;

/* State numbers in computations.  */
typedef int yy_state_fast_t;

#ifndef YY_
# if defined YYENABLE_NLS && YYENABLE_NLS
#  if ENABLE_NLS
#   include <libintl.h> /* INFRINGES ON USER NAME SPACE */
#   define YY_(Msgid) dgettext ("bison-runtime", Msgid)
#  endif
# endif
# ifndef YY_
#  define YY_(Msgid) Msgid
# endif
#endif


#ifndef YY_ATTRIBUTE_PURE
# if defined __GNUC__ && 2 < __GNUC__ + (96 <= __GNUC_MINOR__)
#  define YY_ATTRIBUTE_PURE __attribute__ ((__pure__))
# else
#  define YY_ATTRIBUTE_PURE
# endif
#endif

#ifndef YY_ATTRIBUTE_UNUSED
# if defined __GNUC__ && 2 < __GNUC__ + (7 <= __GNUC_MINOR__)
#  define YY_ATTRIBUTE_UNUSED __attribute__ ((__unused__))
# else
#  define YY_ATTRIBUTE_UNUSED
# endif
#endif

/* Suppress unused-variable warnings by "using" E.  */
#if ! defined lint || defined __GNUC__
# define YY_USE(E) ((void) (E))
#else
# define YY_USE(E) /* empty */
#endif

/* Suppress an incorrect diagnostic about yylval being uninitialized.  */
#if defined __GNUC__ && ! defined __ICC && 406 <= __GNUC__ * 100 + __GNUC_MINOR__
# if __GNUC__ * 100 + __GNUC_MINOR__ < 407
#  define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN                           \
    _Pragma ("GCC diagnostic push")                                     \
    _Pragma ("GCC diagnostic ignored \"-Wuninitialized\"")
# else
#  define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN                           \
    _Pragma ("GCC diagnostic push")                                     \
    _Pragma ("GCC diagnostic ignored \"-Wuninitialized\"")              \
    _Pragma ("GCC diagnostic ignored \"-Wmaybe-uninitialized\"")
# endif
# define YY_IGNORE_MAYBE_UNINITIALIZED_END      \
    _Pragma ("GCC diagnostic pop")
#else
# define YY_INITIAL_VALUE(Value) Value
#endif
#ifndef YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_END
#endif
#ifndef YY_INITIAL_VALUE
# define YY_INITIAL_VALUE(Value) /* Nothing. */
#endif

#if defined __cplusplus && defined __GNUC__ && ! defined __ICC && 6 <= __GNUC__
# define YY_IGNORE_USELESS_CAST_BEGIN                          \
    _Pragma ("GCC diagnostic push")                            \
    _Pragma ("GCC diagnostic ignored \"-Wuseless-cast\"")
# define YY_IGNORE_USELESS_CAST_END            \
    _Pragma ("GCC diagnostic pop")
#endif
#ifndef YY_IGNORE_USELESS_CAST_BEGIN
# define YY_IGNORE_USELESS_CAST_BEGIN
# define YY_IGNORE_USELESS_CAST_END
#endif


#define YY_ASSERT(E) ((void) (0 && (E)))

#if !defined yyoverflow

/* The parser invokes alloca or malloc; define the necessary symbols.  */

# ifdef YYSTACK_USE_ALLOCA
#  if YYSTACK_USE_ALLOCA
#   ifdef __GNUC__
#    define YYSTACK_ALLOC __builtin_alloca
#   elif defined __BUILTIN_VA_ARG_INCR
#    include <alloca.h> /* INFRINGES ON USER NAME SPACE */
#   elif defined _AIX
#    define YYSTACK_ALLOC __alloca
#   elif defined _MSC_VER
#    include <malloc.h> /* INFRINGES ON USER NAME SPACE */
#    define alloca _alloca
#   else
#    define YYSTACK_ALLOC alloca
#    if ! defined _ALLOCA_H && ! defined EXIT_SUCCESS
#     include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
      /* Use EXIT_SUCCESS as a witness for stdlib.h.  */
#     ifndef EXIT_SUCCESS
#      define EXIT_SUCCESS 0
#     endif
#    endif
#   endif
#  endif
# endif

# ifdef YYSTACK_ALLOC
   /* Pacify GCC's 'empty if-body' warning.  */
#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (0)
#  ifndef YYSTACK_ALLOC_MAXIMUM
    /* The OS might guarantee only one guard page at the bottom of the stack,
       and a page size can be as small as 4096 bytes.  So we cannot safely
       invoke alloca (N) if N exceeds 4096.  Use a slightly smaller number
       to allow for a few compiler-allocated temporary stack slots.  */
#   define YYSTACK_ALLOC_MAXIMUM 4032 /* reasonable circa 2006 */
#  endif
# else
#  define YYSTACK_ALLOC YYMALLOC
#  define YYSTACK_FREE YYFREE
#  ifndef YYSTACK_ALLOC_MAXIMUM
#   define YYSTACK_ALLOC_MAXIMUM YYSIZE_MAXIMUM
#  endif
#  if (defined __cplusplus && ! defined EXIT_SUCCESS \
       && ! ((defined YYMALLOC || defined malloc) \
             && (defined YYFREE || defined free)))
#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#   ifndef EXIT_SUCCESS
#    define EXIT_SUCCESS 0
#   endif
#  endif
#  ifndef YYMALLOC
#   define YYMALLOC malloc
#   if ! defined malloc && ! defined EXIT_SUCCESS
void *malloc (YYSIZE_T); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
#  ifndef YYFREE
#   define YYFREE free
#   if ! defined free && ! defined EXIT_SUCCESS
void free (void *); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
# endif
#endif /* !defined yyoverflow */

#if (! defined yyoverflow \
     && (! defined __cplusplus \
         || (defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL \
             && defined YYSTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))

/* A type that is properly aligned for any stack member.  */
union yyalloc
{
  yy_state_t yyss_alloc;
  YYSTYPE yyvs_alloc;
  YYLTYPE yyls_alloc;
};

/* The size of the maximum gap between one aligned stack and the next.  */
# define YYSTACK_GAP_MAXIMUM (YYSIZEOF (union yyalloc) - 1)

/* The size of an array large to enough to hold all stacks, each with
   N elements.  */
# define YYSTACK_BYTES(N) \
     ((N) * (YYSIZEOF (yy_state_t) + YYSIZEOF (YYSTYPE) \
             + YYSIZEOF (YYLTYPE)) \
      + 2 * YYSTACK_GAP_MAXIMUM)

# define YYCOPY_NEEDED 1

/* Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */
# define YYSTACK_RELOCATE(Stack_alloc, Stack)                           \
    do                                                                  \
      {                                                                 \
        YYPTRDIFF_T yynewbytes;                                         \
        YYCOPY (&yyptr->Stack_alloc, Stack, yysize);                    \
        Stack = &yyptr->Stack_alloc;                                    \
        yynewbytes = yystacksize * YYSIZEOF (*Stack) + YYSTACK_GAP_MAXIMUM; \
        yyptr += yynewbytes / YYSIZEOF (*yyptr);                        \
      }                                                                 \
    while (0)

#endif

#if defined YYCOPY_NEEDED && YYCOPY_NEEDED
/* Copy COUNT objects from SRC to DST.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if defined __GNUC__ && 1 < __GNUC__
#   define YYCOPY(Dst, Src, Count) \
      __builtin_memcpy (Dst, Src, YY_CAST (YYSIZE_T, (Count)) * sizeof (*(Src)))
#  else
#   define YYCOPY(Dst, Src, Count)              \
      do                                        \
        {                                       \
          YYPTRDIFF_T yyi;                      \
          for (yyi = 0; yyi < (Count); yyi++)   \
            (Dst)[yyi] = (Src)[yyi];            \
        }                                       \
      while (0)
#  endif
# endif
#endif /* !YYCOPY_NEEDED */

/* YYFINAL -- State number of the termination state.  */
#define YYFINAL  767
/* YYLAST -- Last index in YYTABLE.  */
#define YYLAST   76905

/* YYNTOKENS -- Number of terminals.  */
#define YYNTOKENS  534
/* YYNNTS -- Number of nonterminals.  */
#define YYNNTS  504
/* YYNRULES -- Number of rules.  */
#define YYNRULES  2305
/* YYNSTATES -- Number of states.  */
#define YYNSTATES  3845

/* YYMAXUTOK -- Last valid token kind.  */
#define YYMAXUTOK   763


/* YYTRANSLATE(TOKEN-NUM) -- Symbol number corresponding to TOKEN-NUM
   as returned by yylex, with out-of-bounds checking.  */
#define YYTRANSLATE(YYX)                                \
  (0 <= (YYX) && (YYX) <= YYMAXUTOK                     \
   ? YY_CAST (yysymbol_kind_t, yytranslate[YYX])        \
   : YYSYMBOL_YYUNDEF)

/* YYTRANSLATE[TOKEN-NUM] -- Symbol number corresponding to TOKEN-NUM
   as returned by yylex.  */
static const yytype_int16 yytranslate[] =
{
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   530,     2,   532,   533,   515,   529,     2,
     520,   521,   513,   511,   524,   512,   522,   514,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,   531,   523,
     507,   509,   508,   526,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,   518,     2,   519,   516,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   527,   525,   528,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
     125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
     135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,   163,   164,
     165,   166,   167,   168,   169,   170,   171,   172,   173,   174,
     175,   176,   177,   178,   179,   180,   181,   182,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,   196,   197,   198,   199,   200,   201,   202,   203,   204,
     205,   206,   207,   208,   209,   210,   211,   212,   213,   214,
     215,   216,   217,   218,   219,   220,   221,   222,   223,   224,
     225,   226,   227,   228,   229,   230,   231,   232,   233,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
     505,   506,   510,   517
};

#if YYDEBUG
/* YYRLINE[YYN] -- Source line where rule number YYN was defined.  */
static const yytype_int16 yyrline[] =
{
       0,   551,   551,   567,   579,   588,   589,   590,   591,   592,
     593,   594,   595,   596,   597,   598,   599,   600,   601,   602,
     603,   604,   605,   606,   607,   608,   609,   610,   611,   612,
     613,   614,   615,   616,   617,   618,   619,   620,   621,   622,
     623,   624,   625,   626,   627,   629,     9,    18,    27,    36,
      45,    54,    63,    72,    85,    87,    93,    94,    99,   103,
     107,   118,   126,   130,   139,   148,   157,   166,   175,   184,
     192,   200,   209,   218,   227,   236,   253,   262,   271,   280,
     290,   303,   318,   327,   335,   350,   358,   368,   378,   385,
     392,   400,   407,   418,   419,   424,   428,   433,   438,   446,
     447,   452,   456,   457,   458,     7,    13,    19,    25,     9,
      13,    44,    45,    46,    47,    51,    52,    56,    60,    61,
      65,    71,    76,    77,    78,    79,    80,     6,    15,    25,
      35,    45,    55,    65,    75,    85,    95,   106,   117,   127,
     140,   141,     9,    23,    29,    36,    42,    49,    59,    63,
      71,    72,    73,    77,    86,    95,   102,   103,   108,   120,
     125,   150,   155,   160,   166,   176,   186,   192,   203,   214,
     229,   230,   236,   237,   242,   243,   249,   250,   254,   255,
     260,   262,   268,   269,   273,   274,   277,   278,   283,     7,
      16,    25,    46,    47,    50,    54,     7,    14,    22,     9,
      19,    29,    42,    43,     7,    14,    31,    51,    55,    65,
      69,    75,    76,     9,    17,    29,    30,    34,    35,    36,
      41,    42,    43,    48,    52,    56,    60,    64,    68,    72,
      76,    80,    84,    88,    92,    97,   101,   105,   112,   113,
     117,   118,   119,     2,     9,    15,    21,    28,    35,    45,
      46,    47,     2,    40,    41,    42,    50,    64,    66,    70,
      72,    76,    89,    92,    96,   100,   104,   108,   109,   113,
     114,   118,   127,   137,   151,   154,   158,   181,   182,   187,
     189,   193,   195,   199,   201,   206,   209,   213,   219,   223,
     225,   228,   237,   239,   243,   269,   273,   275,   279,   281,
     285,   285,   285,   289,   291,   293,   297,   299,   303,   305,
     307,   309,   311,   315,   317,   321,   333,   345,   357,   369,
     382,   396,   398,   403,   428,   430,   434,   436,   441,   450,
     459,   468,   478,   488,   490,   494,   496,   500,   511,   520,
     532,   541,   543,   547,   570,   572,   576,   578,   589,   591,
     602,   604,   615,   617,   626,   637,   645,   654,   658,   660,
     664,   666,   672,   674,   676,   680,   682,   686,   692,   700,
     702,   706,   717,   733,   760,   793,   794,   796,   804,   819,
     821,   823,   825,   827,   829,   831,   833,   835,   837,   839,
     841,   843,   845,   847,   850,   852,   854,   856,   858,   860,
     865,   870,   877,   882,   889,   894,   901,   906,   914,   922,
     930,   938,   956,   964,   972,   980,   988,   996,  1004,  1008,
    1024,  1032,  1040,  1048,  1056,  1064,  1072,  1076,  1080,  1084,
    1088,  1096,  1104,  1112,  1120,  1140,     7,    21,    36,    56,
      57,    84,    85,    86,    87,    88,    89,    93,    94,    99,
     104,   105,   106,   107,   108,   113,   120,   121,   122,   139,
     146,   153,   163,   173,   185,   193,   202,   220,   221,   225,
     226,   230,   239,   262,   276,   283,   288,   290,   292,   294,
     297,   300,   301,   302,   303,   308,   312,   313,   318,   325,
     330,   331,   332,   333,   334,   335,   336,   337,   343,   344,
     348,   353,   360,   367,   374,   386,   387,   388,   389,   393,
     398,   399,   400,   405,   410,   411,   412,   413,   414,   415,
     420,   440,   469,   470,   474,   478,   479,   480,   484,   488,
     496,   497,   502,   503,   504,   508,   516,   517,   522,   523,
     527,   532,   536,   540,   545,   553,   554,   558,   559,   563,
     564,   570,   581,   594,   608,   622,   636,   650,   673,   677,
     684,   688,   696,   701,   708,   718,   719,   720,   721,   722,
     729,   736,   737,   742,   743,     9,    19,    29,    39,    49,
      59,    69,    79,    93,    94,    95,    96,    97,    98,    99,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     114,   115,   116,   117,   118,   119,   124,   125,   130,   131,
     132,   137,   138,   139,   142,   143,     8,    20,    33,    46,
      58,    70,    86,    87,    91,    95,     7,     1,    30,    53,
      54,    59,    63,    68,    72,    80,    81,    85,    86,    91,
      92,    96,    97,   102,   103,   104,   105,   106,   107,   112,
     120,   124,   129,   130,   135,   139,   144,   148,   152,   156,
     160,   164,   168,   172,   176,   180,   184,   188,   192,   196,
     200,   204,   212,   218,   219,   220,   225,   229,    47,    48,
      52,    53,    68,    69,    76,    84,    92,   100,   108,   116,
     127,   128,   155,   160,   168,   184,   201,   218,   235,   236,
     255,   259,   263,   267,   271,   280,   290,   299,   308,   318,
     328,   339,   353,   370,   370,   374,   374,   378,   378,   382,
     388,   395,   399,   400,   404,   405,   419,   426,   433,   443,
     444,   447,   460,   461,   462,   466,   477,   485,   490,   495,
     500,   505,   513,   521,   526,   531,   538,   539,   543,   544,
     545,   549,   556,   557,   561,   562,   566,   567,   568,   572,
     573,   577,   578,   594,   595,   598,   607,   618,   619,   620,
     623,   624,   625,   629,   630,   631,   632,   636,   637,   641,
     643,   659,   661,   666,   669,   677,   681,   685,   689,   693,
     697,   704,   709,   716,   717,   721,   726,   730,   734,   742,
     749,   750,   755,   756,   760,   761,   766,   768,   770,   775,
     795,   796,   798,   803,   804,   808,   809,   812,   813,   838,
     839,   844,   848,   849,   853,   854,   858,   859,   860,   861,
     862,   866,   879,   886,   893,   900,   901,   905,   906,   910,
     911,   915,   916,   920,   921,   925,   926,   930,   941,   942,
     943,   944,   948,   949,   954,   955,   956,   965,   971,   980,
     981,   994,   995,   999,  1000,  1004,  1005,  1011,  1017,  1025,
    1034,  1042,  1051,  1060,  1064,  1069,  1073,  1083,  1096,  1097,
    1100,  1101,  1102,  1105,  1113,  1123,  1124,  1127,  1135,  1144,
    1148,  1155,  1156,  1160,  1169,  1173,  1198,  1202,  1215,  1229,
    1244,  1256,  1269,  1283,  1297,  1310,  1325,  1344,  1350,  1355,
    1361,  1368,  1369,  1377,  1381,  1385,  1391,  1398,  1403,  1404,
    1405,  1406,  1407,  1408,  1412,  1413,  1425,  1426,  1431,  1438,
    1445,  1452,  1484,  1495,  1508,  1513,  1514,  1517,  1518,  1521,
    1522,  1527,  1528,  1533,  1537,  1543,  1564,  1572,  1585,  1588,
    1592,  1592,  1595,  1596,  1598,  1603,  1610,  1615,  1621,  1626,
    1632,  1638,  1644,  1653,  1655,  1658,  1662,  1663,  1664,  1665,
    1666,  1667,  1672,  1692,  1693,  1694,  1695,  1706,  1720,  1721,
    1727,  1732,  1737,  1742,  1747,  1752,  1757,  1762,  1768,  1774,
    1780,  1787,  1809,  1818,  1822,  1830,  1834,  1842,  1854,  1875,
    1879,  1885,  1889,  1902,  1910,  1920,  1922,  1924,  1926,  1928,
    1930,  1935,  1936,  1943,  1952,  1960,  1969,  1980,  1988,  1989,
    1990,  1994,  1994,  1997,  1997,  2000,  2000,  2003,  2003,  2006,
    2006,  2009,  2009,  2012,  2012,  2015,  2015,  2018,  2020,  2022,
    2024,  2026,  2028,  2030,  2032,  2034,  2039,  2044,  2050,  2057,
    2062,  2068,  2074,  2105,  2107,  2109,  2117,  2132,  2134,  2136,
    2138,  2140,  2142,  2144,  2146,  2148,  2150,  2152,  2154,  2156,
    2158,  2160,  2162,  2165,  2167,  2169,  2172,  2174,  2176,  2178,
    2180,  2185,  2190,  2197,  2202,  2209,  2214,  2221,  2226,  2234,
    2242,  2250,  2258,  2276,  2284,  2292,  2300,  2308,  2316,  2324,
    2328,  2344,  2352,  2360,  2368,  2376,  2384,  2392,  2396,  2400,
    2404,  2408,  2416,  2424,  2432,  2440,  2460,  2482,  2493,  2500,
    2514,  2522,  2530,  2550,  2552,  2554,  2556,  2558,  2560,  2562,
    2564,  2566,  2568,  2570,  2572,  2574,  2576,  2578,  2580,  2582,
    2584,  2586,  2588,  2590,  2592,  2596,  2600,  2604,  2618,  2619,
    2623,  2637,  2638,  2639,  2646,  2650,  2654,  2657,  2668,  2673,
    2675,  2686,  2710,  2721,  2732,  2736,  2743,  2747,  2751,  2768,
    2776,  2785,  2789,  2796,  2804,  2812,  2823,  2843,  2879,  2890,
    2891,  2898,  2904,  2906,  2908,  2912,  2921,  2926,  2933,  2948,
    2955,  2959,  2963,  2967,  2971,  2981,  2990,  3012,  3013,  3017,
    3018,  3019,  3023,  3024,  3031,  3032,  3036,  3037,  3042,  3050,
    3052,  3066,  3069,  3096,  3097,  3100,  3101,  3112,  3118,  3125,
    3134,  3151,  3196,  3204,  3212,  3220,  3228,  3249,  3250,  3253,
    3254,  3258,  3268,  3269,  3273,  3274,  3278,  3285,  3286,  3291,
    3292,  3297,  3298,  3301,  3302,  3303,  3306,  3307,  3310,  3311,
    3312,  3313,  3314,  3315,  3316,  3317,  3318,  3319,  3320,  3321,
    3322,  3323,  3326,  3328,  3333,  3335,  3340,  3342,  3344,  3346,
    3348,  3350,  3352,  3354,  3368,  3370,  3375,  3379,  3386,  3391,
    3397,  3401,  3408,  3413,  3420,  3425,  3433,  3437,  3443,  3447,
    3456,  3467,  3468,  3472,  3476,  3483,  3484,  3485,  3486,  3487,
    3488,  3489,  3490,  3491,  3492,  3502,  3506,  3513,  3520,  3521,
    3537,  3541,  3546,  3550,  3565,  3570,  3574,  3577,  3580,  3581,
    3582,  3585,  3592,  3602,  3616,  3617,  3621,  3632,  3633,  3636,
    3637,  3640,  3644,  3651,  3659,  3667,  3675,  3685,  3686,  3691,
    3692,  3696,  3697,  3698,  3702,  3711,  3719,  3727,  3736,  3751,
    3752,  3757,  3758,  3768,  3769,  3773,  3774,  3778,  3779,  3782,
    3798,  3806,  3816,  3817,  3820,  3821,  3824,  3828,  3829,  3833,
    3834,  3837,  3838,  3839,  3849,  3850,  3854,  3856,  3862,  3863,
    3867,  3868,  3871,  3882,  3885,  3896,  3900,  3904,  3916,  3920,
    3929,  3936,  3974,  3978,  3982,  3986,  3990,  3994,  3998,  4004,
    4021,  4022,  4023,  4024,  4028,  4029,  4030,  4031,  4035,  4036,
    4037,  4038,  4042,  4043,  4046,  4048,  4053,  4054,  4057,  4061,
    4062,     7,    18,    19,    23,    24,    25,    26,    27,     7,
      26,    50,    73,    80,    85,    86,    87,    88,     8,    33,
      62,    66,    67,    72,    73,    78,    79,    83,    84,    89,
      90,     7,    16,    25,    34,    43,    52,     5,    12,    22,
      23,     7,    19,    33,     9,    16,    26,    33,    44,    45,
      50,    51,    52,    57,    58,    59,    60,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
      74,    75,    76,    77,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    90,    91,    92,    93,    98,    99,   104,
     108,   116,   117,   122,   123,   124,   130,   135,   143,   144,
      10,    16,    22,    28,    38,    39,    47,    58,    70,    78,
      86,    93,   103,   105,   111,   115,   119,   134,   141,   142,
     143,   147,   148,     7,    15,    22,    29,    36,    45,    46,
      48,    49,     8,    22,    36,    48,    56,    70,    71,    72,
      73,    74,    87,    88,    93,    94,    98,    99,     7,    18,
      31,    35,    42,    53,    54,    60,    61,     9,    19,     7,
      18,    25,    34,    35,    39,    40,     2,     7,    12,    17,
      26,    33,    43,    44,    51,     3,    10,    17,    24,    31,
      38,    45,    52,    61,    61,    63,    63,    65,    66,    70,
      71,     6,     8,    21,    34,    47,    65,    87,    88,    89,
      90,    11,    24,    37,    54,    55,    56,    61,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    75,    75,    75,    75,    75,
      75,    75,    75,    75,    75,    75,    75,    75,    75,    75,
      75,    75,    75,    75,    75,    75,    75,    75,    75,    75,
      75,    75,    75,    75,    75,    75,    75,    75,    75,    75,
      75,    75,    75,    75,    75,    75,    75,    75,    75,    75,
      75,    75,    75,    75,    75,    75,    75,    75,    75,    76,
      76,    76,    76,    76,    76,    76,    76,    76,    76,    76,
      76,    76,    76,    76,    76,    76,    76,    76,    76,    76,
      76,    76,    76,    76,    76,    76,    76,    77,    77,    77,
      77,    77,    77,    77,    77,    77,    77,    77,    77,    77,
      77,    77,    77,    77,    77,    77,    77,    77,    77,    77,
      77,    77,    77,    77,    77,    77,    78,    78,    78,    78,
      78,    78,    78,    78,    78,    78,    78,    78,    78,    78,
      78,    78,    78,    78,    78,    78,    78,    78,    78,    78,
      78,    78,    78,    78,    78,    78,    78,    78,    78,    78,
      78,    78,    78,    78,    78,    78,    78,    78,    78,    78,
      78,    78,    78,    78,    78,    78,    78,    78,    78,    78,
      78,    78,    78,    78,    78,    78,    78,    78,    78,    78,
      78,    78,    78,    78,    78,    78,    78,    78,    78,    78,
      78,    78,    78,    78,    78,    78,    78,    79,    79,    79,
      79,    79,    79,    79,    79,    79,    79,    79,    79,    79,
      79,    79,    79,    79,    79,    79,    79,    79,    79,    79,
      79,    79,    79,    79,    79,    79,    79,    79,    79,    80,
      80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
      80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
      80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
      80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
      80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
      80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
      80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
      80,    80,    81,    81,    81,    81,    81,    81,    81,    81,
      81,    81,    81,    81,    81,    81,    81,    81,    81,    81,
      81,    81,    81,    82,    82,    82,    82,    82,    82,    82,
      82,    82,    82,    82,    82,    82,    82,    82,    82,    82,
      82,    82,    82,    82,    82,    82,    82,    82,    82,    82,
      82,    82,    82,    82,    82,    82,    82,    82,    82,    82,
      82,    82,    82,    82,    82,    82,    82,    82,    82,    82,
      82,    82,    82,    82,    82,    82
};
#endif

/** Accessing symbol of state STATE.  */
#define YY_ACCESSING_SYMBOL(State) YY_CAST (yysymbol_kind_t, yystos[State])

#if YYDEBUG || 0
/* The user-facing name of the symbol whose (internal) number is
   YYSYMBOL.  No bounds checking.  */
static const char *yysymbol_name (yysymbol_kind_t yysymbol) YY_ATTRIBUTE_UNUSED;

/* YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
   First, the terminals, then, starting at YYNTOKENS, nonterminals.  */
static const char *const yytname[] =
{
  "\"end of file\"", "error", "\"invalid token\"", "IDENT", "FCONST",
  "SCONST", "BCONST", "XCONST", "Op", "ICONST", "PARAM", "TYPECAST",
  "DOT_DOT", "COLON_EQUALS", "EQUALS_GREATER", "INTEGER_DIVISION",
  "POWER_OF", "LAMBDA_ARROW", "DOUBLE_ARROW", "LESS_EQUALS",
  "GREATER_EQUALS", "NOT_EQUALS", "ABORT_P", "ABSOLUTE_P", "ACCESS",
  "ACTION", "ACYCLIC", "ADD_P", "ADMIN", "AFTER", "AGGREGATE", "ALL",
  "ALSO", "ALTER", "ALWAYS", "ANALYSE", "ANALYZE", "AND", "ANTI", "ANY",
  "ARE", "ARRAY", "AS", "ASC_P", "ASOF", "ASSERTION", "ASSIGNMENT",
  "ASYMMETRIC", "AT", "ATTACH", "ATTRIBUTE", "AUTHORIZATION", "BACKWARD",
  "BEFORE", "BEGIN_P", "BETWEEN", "BIGINT", "BINARY", "BIT", "BOOLEAN_P",
  "BOTH", "BY", "CACHE", "CALL_P", "CALLED", "CASCADE", "CASCADED", "CASE",
  "CAST", "CATALOG_P", "CHAIN", "CHAR_P", "CHARACTER", "CHARACTERISTICS",
  "CHECK_P", "CHECKPOINT", "CLASS", "CLOSE", "CLUSTER", "COALESCE",
  "COLLATE", "COLLATION", "COLUMN", "COLUMNS", "COMMENT", "COMMENTS",
  "COMMIT", "COMMITTED", "COMPRESSION", "CONCURRENTLY", "CONFIGURATION",
  "CONFLICT", "CONNECTION", "CONSTRAINT", "CONSTRAINTS", "CONTENT_P",
  "CONTINUE_P", "CONVERSION_P", "COPY", "COST", "CREATE_P", "CROSS", "CSV",
  "CUBE", "CURRENT_P", "CURSOR", "CYCLE", "DATA_P", "DATABASE", "DAY_P",
  "DAYS_P", "DEALLOCATE", "DEC", "DECIMAL_P", "DECLARE", "DEFAULT",
  "DEFAULTS", "DEFERRABLE", "DEFERRED", "DEFINER", "DELETE_P", "DELIMITER",
  "DELIMITERS", "DEPENDS", "DESC_P", "DESCRIBE", "DESTINATION", "DETACH",
  "DICTIONARY", "DISABLE_P", "DISCARD", "DISTINCT", "DO", "DOCUMENT_P",
  "DOMAIN_P", "DOUBLE_P", "DROP", "EACH", "EDGE", "ELEMENT_ID", "ELSE",
  "ENABLE_P", "ENCODING", "ENCRYPTED", "END_P", "ENUM_P", "ESCAPE",
  "EVENT", "EXCEPT", "EXCLUDE", "EXCLUDING", "EXCLUSIVE", "EXECUTE",
  "EXISTS", "EXPLAIN", "EXPORT_P", "EXPORT_STATE", "EXTENSION", "EXTERNAL",
  "EXTRACT", "FALSE_P", "FAMILY", "FETCH", "FILTER", "FIRST_P", "FLOAT_P",
  "FOLLOWING", "FOR", "FORCE", "FOREIGN", "FORWARD", "FREEZE", "FROM",
  "FULL", "FUNCTION", "FUNCTIONS", "GENERATED", "GLOB", "GLOBAL", "GRANT",
  "GRANTED", "GRAPH", "GRAPH_TABLE", "GROUP_P", "GROUPING", "GROUPING_ID",
  "GROUPS", "HANDLER", "HAVING", "HEADER_P", "HOLD", "HOUR_P", "HOURS_P",
  "IDENTITY_P", "IF_P", "IGNORE_P", "ILIKE", "IMMEDIATE", "IMMUTABLE",
  "IMPLICIT_P", "IMPORT_P", "IN_P", "INCLUDE_P", "INCLUDING", "INCREMENT",
  "INDEX", "INDEXES", "INHERIT", "INHERITS", "INITIALLY", "INLINE_P",
  "INNER_P", "INOUT", "INPUT_P", "INSENSITIVE", "INSERT", "INSTALL",
  "INSTEAD", "INT_P", "INTEGER", "INTERSECT", "INTERVAL", "INTO",
  "INVOKER", "IS", "ISNULL", "ISOLATION", "JOIN", "JSON", "KEEP", "KEY",
  "LABEL", "LANGUAGE", "LARGE_P", "LAST_P", "LATERAL_P", "LEADING",
  "LEAKPROOF", "LEFT", "LEVEL", "LIKE", "LIMIT", "LISTEN", "LOAD", "LOCAL",
  "LOCATION", "LOCK_P", "LOCKED", "LOGGED", "MACRO", "MAP", "MAPPING",
  "MATCH", "MATERIALIZED", "MAXVALUE", "METHOD", "MICROSECOND_P",
  "MICROSECONDS_P", "MILLISECOND_P", "MILLISECONDS_P", "MINUTE_P",
  "MINUTES_P", "MINVALUE", "MODE", "MONTH_P", "MONTHS_P", "MOVE", "NAME_P",
  "NAMES", "NATIONAL", "NATURAL", "NCHAR", "NEW", "NEXT", "NO", "NODE",
  "NONE", "NOT", "NOTHING", "NOTIFY", "NOTNULL", "NOWAIT", "NULL_P",
  "NULLIF", "NULLS_P", "NUMERIC", "OBJECT_P", "OF", "OFF", "OFFSET",
  "OIDS", "OLD", "ON", "ONLY", "OPERATOR", "OPTION", "OPTIONS", "OR",
  "ORDER", "ORDINALITY", "OUT_P", "OUTER_P", "OVER", "OVERLAPS", "OVERLAY",
  "OVERRIDING", "OWNED", "OWNER", "PARALLEL", "PARSER", "PARTIAL",
  "PARTITION", "PASSING", "PASSWORD", "PATH", "PATHS", "PERCENT", "PIVOT",
  "PIVOT_LONGER", "PIVOT_WIDER", "PLACING", "PLANS", "POLICY", "POSITION",
  "POSITIONAL", "PRAGMA_P", "PRECEDING", "PRECISION", "PREPARE",
  "PREPARED", "PRESERVE", "PRIMARY", "PRIOR", "PRIVILEGES", "PROCEDURAL",
  "PROCEDURE", "PROGRAM", "PROPERTIES", "PROPERTY", "PUBLICATION",
  "QUALIFY", "QUOTE", "RANGE", "READ_P", "REAL", "REASSIGN", "RECHECK",
  "RECURSIVE", "REF", "REFERENCES", "REFERENCING", "REFRESH", "REINDEX",
  "RELATIONSHIP", "RELATIVE_P", "RELEASE", "RENAME", "REPEATABLE",
  "REPLACE", "REPLICA", "RESET", "RESPECT_P", "RESTART", "RESTRICT",
  "RETURNING", "RETURNS", "REVOKE", "RIGHT", "ROLE", "ROLLBACK", "ROLLUP",
  "ROW", "ROWS", "RULE", "SAMPLE", "SAVEPOINT", "SCHEMA", "SCHEMAS",
  "SCROLL", "SEARCH", "SECOND_P", "SECONDS_P", "SECURITY", "SELECT",
  "SEMI", "SEQUENCE", "SEQUENCES", "SERIALIZABLE", "SERVER", "SESSION",
  "SET", "SETOF", "SETS", "SHARE", "SHORTEST", "SHOW", "SIMILAR", "SIMPLE",
  "SKIP", "SMALLINT", "SNAPSHOT", "SOME", "SOURCE", "SQL_P", "STABLE",
  "STANDALONE_P", "START", "STATEMENT", "STATISTICS", "STDIN", "STDOUT",
  "STORAGE", "STORED", "STRICT_P", "STRIP_P", "STRUCT", "SUBSCRIPTION",
  "SUBSTRING", "SUMMARIZE", "SYMMETRIC", "SYSID", "SYSTEM_P", "TABLE",
  "TABLES", "TABLESAMPLE", "TABLESPACE", "TEMP", "TEMPLATE", "TEMPORARY",
  "TEXT_P", "THEN", "TIME", "TIMESTAMP", "TO", "TRAIL", "TRAILING",
  "TRANSACTION", "TRANSFORM", "TREAT", "TRIGGER", "TRIM", "TRUE_P",
  "TRUNCATE", "TRUSTED", "TRY_CAST", "TYPE_P", "TYPES_P", "UNBOUNDED",
  "UNCOMMITTED", "UNENCRYPTED", "UNION", "UNIQUE", "UNKNOWN", "UNLISTEN",
  "UNLOGGED", "UNPIVOT", "UNTIL", "UPDATE", "USE_P", "USER", "USING",
  "VACUUM", "VALID", "VALIDATE", "VALIDATOR", "VALUE_P", "VALUES",
  "VARCHAR", "VARIADIC", "VARYING", "VERBOSE", "VERSION_P", "VERTEX",
  "VIEW", "VIEWS", "VIRTUAL", "VOLATILE", "WALK", "WHEN", "WHERE",
  "WHITESPACE_P", "WINDOW", "WITH", "WITHIN", "WITHOUT", "WORK", "WRAPPER",
  "WRITE_P", "XML_P", "XMLATTRIBUTES", "XMLCONCAT", "XMLELEMENT",
  "XMLEXISTS", "XMLFOREST", "XMLNAMESPACES", "XMLPARSE", "XMLPI",
  "XMLROOT", "XMLSERIALIZE", "XMLTABLE", "YEAR_P", "YEARS_P", "YES_P",
  "ZONE", "NOT_LA", "NULLS_LA", "WITH_LA", "'<'", "'>'", "'='",
  "POSTFIXOP", "'+'", "'-'", "'*'", "'/'", "'%'", "'^'", "UMINUS", "'['",
  "']'", "'('", "')'", "'.'", "';'", "','", "'|'", "'?'", "'{'", "'}'",
  "'&'", "'!'", "':'", "'#'", "'$'", "$accept", "stmtblock", "stmtmulti",
  "stmt", "AlterObjectSchemaStmt", "AlterSeqStmt", "SeqOptList",
  "opt_with", "NumericOnly", "SeqOptElem", "opt_by", "SignedIconst",
  "AlterTableStmt", "alter_identity_column_option_list",
  "alter_column_default", "alter_identity_column_option",
  "alter_generic_option_list", "alter_table_cmd", "alter_using",
  "alter_generic_option_elem", "alter_table_cmds", "alter_generic_options",
  "opt_set_data", "AnalyzeStmt", "AttachStmt", "DetachStmt",
  "opt_database", "opt_database_alias", "CallStmt", "CheckPointStmt",
  "opt_col_id", "qualified_name", "ColId", "ColIdOrString", "Sconst",
  "indirection", "indirection_el", "attr_name", "ColLabel", "CopyStmt",
  "copy_from", "copy_delimiter", "copy_generic_opt_arg_list", "opt_using",
  "opt_as", "opt_program", "copy_options", "copy_generic_opt_arg",
  "copy_generic_opt_elem", "opt_oids", "copy_opt_list", "opt_binary",
  "copy_opt_item", "copy_generic_opt_arg_list_item", "copy_file_name",
  "copy_generic_opt_list", "CreateStmt", "ConstraintAttributeSpec",
  "def_arg", "OptParenthesizedSeqOptList", "generic_option_arg",
  "key_action", "ColConstraint", "ColConstraintElem",
  "GeneratedColumnType", "opt_GeneratedColumnType",
  "GeneratedConstraintElem", "generic_option_elem", "key_update",
  "key_actions", "OnCommitOption", "reloptions", "opt_no_inherit",
  "TableConstraint", "TableLikeOption", "reloption_list", "ExistingIndex",
  "ConstraintAttr", "OptWith", "definition", "TableLikeOptionList",
  "generic_option_name", "ConstraintAttributeElem", "columnDef",
  "def_list", "index_name", "TableElement", "def_elem", "opt_definition",
  "OptTableElementList", "columnElem", "opt_column_list", "ColQualList",
  "key_delete", "reloption_elem", "columnList", "columnList_opt_comma",
  "func_type", "ConstraintElem", "TableElementList", "key_match",
  "TableLikeClause", "OptTemp", "generated_when", "CreateAsStmt",
  "opt_with_data", "create_as_target", "unreserved_keyword",
  "col_name_keyword", "func_name_keyword", "type_name_keyword",
  "other_keyword", "type_func_name_keyword", "reserved_keyword",
  "pgq_unreserved_keyword", "pgq_col_name_keyword", "CreateFunctionStmt",
  "macro_alias", "param_list", "CreateSchemaStmt", "OptSchemaEltList",
  "schema_stmt", "CreateSeqStmt", "OptSeqOptList", "CreateTypeStmt",
  "opt_enum_val_list", "enum_val_list", "DeallocateStmt", "DeleteStmt",
  "relation_expr_opt_alias", "where_or_current_clause", "using_clause",
  "DropStmt", "drop_type_any_name", "drop_type_name", "any_name_list",
  "opt_drop_behavior", "drop_type_name_on_any_name", "type_name_list",
  "ExecuteStmt", "execute_param_expr", "execute_param_list",
  "execute_param_clause", "ExplainStmt", "opt_verbose",
  "explain_option_arg", "ExplainableStmt", "NonReservedWord",
  "NonReservedWord_or_Sconst", "explain_option_list", "analyze_keyword",
  "opt_boolean_or_string", "explain_option_elem", "explain_option_name",
  "ExportStmt", "ImportStmt", "IndexStmt", "access_method",
  "access_method_clause", "opt_concurrently", "opt_index_name",
  "opt_reloptions", "opt_unique", "InsertStmt", "insert_rest",
  "insert_target", "opt_by_name_or_position", "opt_conf_expr",
  "opt_with_clause", "insert_column_item", "set_clause", "opt_or_action",
  "opt_on_conflict", "index_elem", "returning_clause", "override_kind",
  "set_target_list", "opt_collate", "opt_class", "insert_column_list",
  "set_clause_list", "set_clause_list_opt_comma", "index_params",
  "set_target", "LoadStmt", "file_name", "repo_path", "PGQ_IDENT",
  "DropPropertyGraphStmt", "VertexOrNode", "EdgeOrRelationship",
  "CreatePropertyGraphStmt", "VertexTableDefinitionList",
  "KeySpecification", "KeyDefinition", "KeyReference", "LabelList",
  "LabelOptional", "Discriminator", "VertexTableDefinition",
  "EdgeTableDefinitionList", "EdgeTableDefinition", "AreOptional",
  "IdentOptionalAs", "QualifiednameOptionalAs", "PropertiesList",
  "ExceptOptional", "PropertiesSpec", "PropertiesClause",
  "GraphTableWhereOptional", "GraphTableStmt", "ColumnSpec", "ColumnList",
  "KeepOptional", "PathOrPathsOptional", "GroupOrGroupsOptional",
  "PathVariableOptional", "PathModeOptional", "TopKOptional", "PathPrefix",
  "PathPatternList", "PathPattern", "PatternUnion",
  "KleeneQuantifierOptional", "KleeneOptional", "CostNum", "CostDefault",
  "CostOptional", "SubPath", "EnclosedSubPath", "PathElement",
  "PathSequence", "PathConcatenation", "OrLabelExpression",
  "AndLabelExpression", "ComposedLabelExpression", "LabelExpression",
  "LabelExpressionOptional", "IsOrColon", "ArrowRight", "ArrowLeftBracket",
  "AbbreviatedEdge", "VariableOptional", "FullElementSpec", "EdgePattern",
  "VertexPattern", "pgq_expr", "PragmaStmt", "PrepareStmt",
  "prep_type_clause", "PreparableStmt", "RenameStmt", "opt_column",
  "SelectStmt", "select_with_parens", "select_no_parens", "select_clause",
  "opt_select", "simple_select", "value_or_values", "pivot_keyword",
  "unpivot_keyword", "pivot_column_entry", "pivot_column_list_internal",
  "pivot_column_list", "with_clause", "cte_list", "common_table_expr",
  "opt_materialized", "into_clause", "OptTempTableName", "opt_table",
  "all_or_distinct", "by_name", "distinct_clause", "opt_all_clause",
  "opt_ignore_nulls", "opt_sort_clause", "sort_clause", "sortby_list",
  "sortby", "opt_asc_desc", "opt_nulls_order", "select_limit",
  "opt_select_limit", "limit_clause", "offset_clause", "sample_count",
  "sample_clause", "opt_sample_func", "tablesample_entry",
  "tablesample_clause", "opt_tablesample_clause", "opt_repeatable_clause",
  "select_limit_value", "select_offset_value", "select_fetch_first_value",
  "I_or_F_const", "row_or_rows", "first_or_next", "group_clause",
  "group_by_list", "group_by_list_opt_comma", "group_by_item",
  "empty_grouping_set", "rollup_clause", "cube_clause",
  "grouping_sets_clause", "grouping_or_grouping_id", "having_clause",
  "qualify_clause", "for_locking_clause", "opt_for_locking_clause",
  "for_locking_items", "for_locking_item", "for_locking_strength",
  "locked_rels_list", "opt_nowait_or_skip", "values_clause",
  "values_clause_opt_comma", "from_clause", "from_list",
  "from_list_opt_comma", "table_ref", "opt_pivot_group_by",
  "opt_include_nulls", "single_pivot_value", "pivot_header", "pivot_value",
  "pivot_value_list", "unpivot_header", "unpivot_value",
  "unpivot_value_list", "joined_table", "alias_clause", "opt_alias_clause",
  "func_alias_clause", "join_type", "join_outer", "join_qual",
  "relation_expr", "func_table", "rowsfrom_item", "rowsfrom_list",
  "opt_col_def_list", "opt_ordinality", "where_clause",
  "TableFuncElementList", "TableFuncElement", "opt_collate_clause",
  "colid_type_list", "RowOrStruct", "opt_Typename", "Typename",
  "opt_array_bounds", "SimpleTypename", "ConstTypename", "GenericType",
  "opt_type_modifiers", "Numeric", "opt_float", "Bit", "ConstBit",
  "BitWithLength", "BitWithoutLength", "Character", "ConstCharacter",
  "CharacterWithLength", "CharacterWithoutLength", "character",
  "opt_varying", "ConstDatetime", "ConstInterval", "opt_timezone",
  "year_keyword", "month_keyword", "day_keyword", "hour_keyword",
  "minute_keyword", "second_keyword", "millisecond_keyword",
  "microsecond_keyword", "opt_interval", "a_expr", "b_expr", "c_expr",
  "d_expr", "indirection_expr", "struct_expr", "func_application",
  "func_expr", "func_expr_windowless", "func_expr_common_subexpr",
  "list_comprehension", "within_group_clause", "filter_clause",
  "export_clause", "window_clause", "window_definition_list",
  "window_definition", "over_clause", "window_specification",
  "opt_existing_window_name", "opt_partition_clause", "opt_frame_clause",
  "frame_extent", "frame_bound", "qualified_row", "row", "dict_arg",
  "dict_arguments", "dict_arguments_opt_comma", "map_arg", "map_arguments",
  "map_arguments_opt_comma", "opt_map_arguments_opt_comma", "sub_type",
  "all_Op", "MathOp", "qual_Op", "qual_all_Op", "subquery_Op",
  "any_operator", "c_expr_list", "c_expr_list_opt_comma", "expr_list",
  "expr_list_opt_comma", "opt_expr_list_opt_comma", "func_arg_list",
  "func_arg_expr", "type_list", "extract_list", "extract_arg",
  "overlay_list", "overlay_placing", "position_list", "substr_list",
  "substr_from", "substr_for", "trim_list", "in_expr", "case_expr",
  "when_clause_list", "when_clause", "case_default", "case_arg",
  "columnref", "opt_slice_bound", "opt_indirection", "opt_func_arguments",
  "extended_indirection_el", "opt_extended_indirection", "opt_asymmetric",
  "opt_target_list_opt_comma", "target_list", "target_list_opt_comma",
  "target_el", "except_list", "opt_except_list", "replace_list_el",
  "replace_list", "replace_list_opt_comma", "opt_replace_list",
  "qualified_name_list", "name_list", "name_list_opt_comma",
  "name_list_opt_comma_opt_bracket", "name", "func_name", "AexprConst",
  "Iconst", "type_function_name", "function_name_token", "type_name_token",
  "any_name", "attrs", "opt_name_list", "param_name", "ColLabelOrString",
  "TransactionStmt", "opt_transaction", "UpdateStmt", "UseStmt",
  "VacuumStmt", "vacuum_option_elem", "opt_full", "vacuum_option_list",
  "opt_freeze", "VariableResetStmt", "generic_reset", "reset_rest",
  "VariableSetStmt", "set_rest", "generic_set", "var_value", "zone_value",
  "var_list", "VariableShowStmt", "show_or_describe", "opt_tables",
  "var_name", "table_id", "ViewStmt", "opt_check_option", YY_NULLPTR
};

static const char *
yysymbol_name (yysymbol_kind_t yysymbol)
{
  return yytname[yysymbol];
}
#endif

#define YYPACT_NINF (-3357)

#define yypact_value_is_default(Yyn) \
  ((Yyn) == YYPACT_NINF)

#define YYTABLE_NINF (-2159)

#define yytable_value_is_error(Yyn) \
  ((Yyn) == YYTABLE_NINF)

/* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
   STATE-NUM.  */
static const int yypact[] =
{
    6756,    67,  1286, -3357, -3357,   304,    67, 53932, 68947,    67,
     114,  2000, 55936, -3357,   330,  5976,    67, 58942, 76368,   382,
     729, 36535,   591, 59443, 59443, -3357, -3357, -3357, 68947, 58942,
   59944,    67,   347, 69448, -3357,    67, 38539, 56437,   316, -3357,
   58942,    87,   265, 60445, 58942, 43550,   830,   336, -3357, -3357,
   -3357, -3357, -3357, -3357, -3357, -3357, -3357, -3357, -3357, -3357,
   -3357, -3357, -3357, -3357, -3357, -3357, -3357, -3357, -3357,   404,
   -3357, -3357, -3357, -3357,   251, -3357, -3357, -3357, -3357, -3357,
   -3357, -3357, -3357,   210, -3357,   163,   222, 36535, 36535,  1858,
     368, -3357, -3357, -3357, -3357, -3357, -3357, -3357, -3357, 38038,
   -3357, -3357, -3357, -3357, 60946, 58942, 61447, 56938, 61948, -3357,
     952, -3357,   197, -3357, -3357, -3357, -3357, -3357, -3357, -3357,
   -3357, -3357, -3357, -3357, -3357, -3357, -3357, -3357, -3357, -3357,
   -3357, -3357, -3357, -3357, -3357, -3357, -3357, -3357, -3357, -3357,
   -3357, -3357, -3357, -3357, -3357, -3357, -3357, -3357, -3357, -3357,
   -3357, -3357, -3357, -3357, -3357, -3357, -3357, -3357, -3357, -3357,
   -3357, -3357, -3357, -3357, -3357, -3357, -3357, -3357, -3357, -3357,
   -3357, -3357, -3357, -3357, -3357, -3357, -3357, -3357, -3357, -3357,
   -3357, -3357, -3357, -3357, -3357, -3357, -3357, -3357, -3357, -3357,
   -3357, -3357, -3357, -3357, -3357, -3357, -3357, -3357, -3357, -3357,
   -3357, -3357, -3357, -3357, -3357, -3357, -3357, -3357, -3357, -3357,
   -3357, -3357, -3357, -3357, -3357, -3357, -3357, -3357, -3357, -3357,
   -3357, -3357, -3357, -3357, -3357, -3357, -3357, -3357, -3357, -3357,
   -3357, -3357, -3357, -3357, -3357, -3357,   207, -3357, -3357, -3357,
   -3357, -3357, -3357, -3357, -3357, -3357, -3357, -3357, -3357, -3357,
   -3357, -3357, -3357, -3357, -3357, -3357, -3357, -3357, -3357, -3357,
   -3357, -3357, -3357, -3357, -3357, -3357, -3357, -3357, -3357, -3357,
   -3357, -3357, -3357, -3357, -3357, -3357, -3357, -3357, -3357, -3357,
   -3357, -3357, -3357, -3357, -3357, -3357, -3357, -3357, -3357, -3357,
   -3357, -3357, -3357, -3357, -3357, -3357, -3357, -3357, -3357,   220,
   -3357, -3357, -3357, -3357, -3357, -3357, -3357, -3357, -3357, -3357,
   -3357, -3357, -3357, -3357, -3357, -3357, -3357, -3357, -3357, -3357,
   -3357, -3357, -3357, -3357, -3357, -3357, -3357, -3357, -3357, -3357,
   -3357, -3357, -3357, -3357, -3357, -3357, -3357, -3357, -3357, -3357,
   -3357, -3357, -3357, -3357, -3357, -3357, -3357, -3357, -3357, -3357,
   -3357, -3357, -3357, -3357, -3357, -3357, -3357, -3357, -3357, -3357,
   -3357, -3357, -3357, -3357, -3357, -3357, -3357, -3357, -3357, -3357,
   -3357, -3357, -3357, -3357, -3357, -3357, -3357, -3357, -3357, -3357,
   -3357, -3357, -3357, -3357, -3357, -3357, -3357, -3357, -3357, -3357,
   -3357, -3357, -3357, -3357, -3357, -3357, -3357, -3357, -3357, -3357,
   -3357, -3357, -3357, -3357, -3357, -3357, -3357, -3357, -3357, -3357,
   -3357, -3357, -3357, -3357, -3357, -3357, -3357, -3357, -3357, -3357,
   -3357, -3357, -3357, -3357, -3357, -3357, -3357, -3357, -3357, -3357,
   -3357, -3357, -3357, -3357, -3357, -3357, -3357, -3357, -3357, -3357,
   -3357, -3357, -3357, -3357, -3357, -3357,   221, -3357, -3357, -3357,
   -3357, -3357, -3357, -3357, -3357, -3357, -3357, -3357, -3357, -3357,
   -3357, -3357, -3357, -3357, -3357, -3357, -3357, -3357, -3357, -3357,
   -3357, -3357, -3357, -3357, -3357, -3357, -3357, -3357, -3357, -3357,
   -3357, -3357, -3357, -3357, -3357, -3357, -3357, -3357, -3357, -3357,
   -3357, -3357, -3357, -3357, -3357, -3357, -3357, -3357, -3357, -3357,
   -3357, -3357, -3357, -3357, -3357, -3357, -3357, -3357, -3357, -3357,
   -3357, -3357, -3357, -3357, -3357, -3357, -3357, -3357, -3357, -3357,
     725,   236, -3357, -3357,   237, -3357,   454, -3357, -3357, -3357,
   -3357, -3357, -3357, -3357, -3357, -3357, -3357, -3357,  2695, 58942,
     996,  1099,   657,   854, 62449, -3357, -3357, 58942, -3357, -3357,
     879,   859, -3357, -3357, 57439, -3357, -3357, -3357,   910,  1122,
     905, -3357, -3357,   835, -3357,   170, -3357, -3357,   809,   824,
   -3357,  1158, -3357, -3357, -3357, -3357, -3357, -3357, -3357,   964,
   -3357, 72955, -3357, 69949, 62950, 63451, -3357,   831,  2128, 11230,
   76385, 36033, -3357, -3357, -3357, -3357, -3357, -3357, -3357, -3357,
   -3357, -3357, -3357, -3357, -3357, -3357, -3357, -3357, -3357,   404,
   -3357, -3357, -3357, -3357, -3357, -3357, -3357, -3357, -3357, -3357,
   -3357, -3357, -3357, -3357, 59443, 68947, 59443,   849,   881,  1267,
     939,   946, 37036,   989, 39041,  1000,  1006,  1361,  1068,  1079,
    1086,  1092,   265, 35532,  1145,   725, -3357, 63952, 63952,    26,
    6344, -3357, 63952, 64453, -3357,  1129, -3357,   952, -3357, -3357,
   -3357,  1453, -3357,   340,  1150, -3357, 64954, 64954, 64954,  1196,
    1488, -3357, -3357, -3357,  1157, -3357, -3357,  1426, 23989, 23989,
   70450, 70450,   952, 70450,  1223, -3357, -3357,    73, -3357,  2695,
   -3357, -3357,  1858,  1208,   725, -3357, -3357, 56437, -3357, -3357,
     285,  1566, 23989, 58942,  1232, -3357,  1243,  1232, -3357, -3357,
   -3357, -3357, -3357, -3357, -3357, -3357, -3357, -3357, -3357, -3357,
   -3357, -3357, -3357, -3357, -3357, -3357, -3357, -3357, -3357, -3357,
   -3357, -3357, -3357, -3357, -3357, -3357, -3357, -3357, -3357, -3357,
   -3357, -3357, -3357, -3357, -3357, -3357, -3357, -3357, -3357,   265,
   -3357, -3357, -3357, -3357, -3357, -3357, -3357, -3357, -3357, -3357,
   -3357, -3357, -3357, -3357,  1533,  1294,  1303, -3357,  6756, -3357,
   58942,  1635,  1514, 56437,   367,   367,  1778,   367,   997,  1270,
    4143,  6249, -3357,  1084, -3357,  1332,  1463,  1385,  1631, -3357,
    1208,  1737,   967,  1536,  1741,  2013,  1743,  1109,  1751,  1295,
    1879, 23989, 51427,   725, -3357, 13900,  1404,  1410, -3357, -3357,
   -3357, -3357,  1028, 58942,  1655, -3357,  1899, -3357, -3357,  1472,
   65455, 65956, 66457, 66958,  1861, -3357, -3357,  1802, -3357, -3357,
   -3357,  1474, -3357, -3357, -3357, 58942,   825, -3357, -3357, -3357,
   -3357, -3357, -3357,  1504, -3357,  1504,  1504, -3357, -3357, -3357,
   -3357,  1482,  1482,  1678,  1497, -3357, -3357, -3357,  1866, -3357,
   -3357, -3357, -3357, -3357, -3357, -3357, -3357, -3357, -3357,  1500,
    1305, -3357,  1504, -3357,  1482, -3357, -3357, -3357, -3357, -3357,
   -3357, -3357, 75400, -3357, -3357, -3357, -3357,   538,   545, -3357,
    1509, -3357, -3357, -3357, -3357, -3357,   130,  1512, -3357,  1983,
   -3357, -3357, -3357, -3357, -3357, -3357, -3357, -3357,  1513, -3357,
    2012,  1482,  1881,  1515,   208, -3357,  1890,   415, -3357,  1892,
    1750, 17086, -3357, -3357, -3357, -3357, -3357, -3357, -3357, -3357,
   -3357, -3357, -3357, -3357, -3357, -3357, -3357, -3357, -3357, -3357,
   -3357, -3357, -3357, -3357, -3357, -3357, -3357, -3357, -3357, -3357,
   -3357, -3357, -3357, -3357, -3357, -3357, -3357, -3357, -3357, -3357,
   -3357, -3357, -3357, -3357, -3357, -3357, -3357, -3357, -3357, -3357,
   -3357, -3357, -3357, -3357, -3357, -3357, -3357, -3357, -3357, -3357,
   -3357, -3357, -3357, -3357, -3357, -3357, -3357, -3357, -3357, -3357,
   -3357, -3357,   265, -3357, -3357, -3357, -3357, -3357, -3357, -3357,
   -3357, -3357, -3357, -3357, -3357, -3357, -3357, -3357, -3357, -3357,
     435, -3357, -3357, 48592, 76385,  1615,  1529, -3357,  1878, 23989,
   23989,  1532,  1127, 75886, -3357, 63952, 64453, 23989, 58942, -3357,
   23989, 29299,  1538, 23989, 23989, 14431, 23989, 34530, 63952,  6344,
    1535, -3357,   994, 58942,  1540, -3357,  1629,  1629,   347, 36535,
    1840, -3357,   370,  1836,  1766, -3357, 36535,  1766,   928,  1546,
    1841,  1766, -3357,   293,  1843,  1629, 39542,  1551, -3357,  1629,
    1773, -3357, -3357, 59443, 48592, 17086, 73441,  2031, -3357, -3357,
   -3357, -3357,  1837, 68947,  1557, -3357, -3357, -3357, -3357, -3357,
   -3357,   787,  2074,   180,  2075, 23989,   180,   180,  1564,   238,
     238, -3357,  1567, -3357,   241,  1572,  1576,  2076,  2092,   204,
     186,  1305,   180, 23989, -3357,   238,  1578,  2095,  1585,  2101,
     191,   245, -3357,   242, 23989, 23989, 23989,  1958, 23989, 13369,
   -3357, 58942,  2103, 51427,   844, -3357,   725,  1593,   952, -3357,
   -3357, -3357, -3357, -3357, -3357, -3357, -3357,   229,  7017, -3357,
   -3357, -3357, -3357,  1640, -3357, -3357, -3357, -3357,  1813, 23989,
   -3357, -3357,  1601,  1840, -3357,   247, -3357, -3357,  1840, -3357,
   -3357, -3357, -3357, -3357,   291,  2022, 47590, 48091, 68947,   725,
   -3357, 70951, -3357, -3357, -3357, -3357, -3357, -3357,   747, -3357,
     404, 50205,  1603,  1609,  1232, 58942, 58942,  2090, 75886, -3357,
   -3357, -3357,  1243, 56437,   167,  1913,  1746, -3357, -3357,  1858,
    1858, 18148,   851,   266,    79, 18679, 24520,  1971,  1850,   691,
     710,  1975, -3357,  1857,  2086, 29299, 23989, 23989,   997,  1270,
   23989, -3357, -3357, -3357,  1911, 58942, 54433,  1001,  1064,  1634,
    1723,  1638,    70,  2067, -3357,  1641, -3357,  1735, 58942, 75400,
     261, -3357,  2108,   261,   261,   778,  2109,  1739,   323,  1907,
      50,   467,  2049, -3357,  1641, 56437,   223,    76,  1641, 58942,
    1740,    91,  1641, 68947,  1529, 45149,  1651, -3357, -3357, -3357,
   -3357, -3357, -3357, -3357, -3357, -3357, -3357, -3357, -3357, -3357,
   -3357, -3357, -3357, -3357, -3357, -3357, -3357, -3357, -3357, -3357,
   -3357, -3357, -3357, -3357, -3357, -3357, -3357, -3357, -3357, -3357,
   -3357, -3357, -3357, -3357, -3357, -3357, -3357, -3357, -3357, -3357,
   -3357, -3357, -3357, -3357, -3357, -3357, -3357, -3357, -3357, -3357,
   -3357, -3357, -3357, -3357, -3357, -3357, -3357, -3357, -3357, -3357,
   -3357, -3357, -3357, -3357, -3357, -3357, -3357, -3357, -3357, -3357,
   -3357, -3357, -3357, -3357, -3357, -3357, -3357, -3357, -3357,   201,
   17086, -3357,  1487,  1541,  1548,   366,   173,  1561,  1617, 17086,
    1633,  1692,   203,  1765,  1777,  1781,  1849,  1863,  1867,  1869,
    1871,   185,  1886,  1888,  1894,  1901,  1903,  1906, -3357,  1924,
     206,  1926,   250, 17086,  1935, -3357,   216, -3357,   219, 50205,
       4, -3357, -3357,  1940,  1752, 68947,  1701, 58942,  1234,    66,
    2033,  2087, 73927, 58942,  1912,  2049,  1920,  1679,  2156,  1929,
    1410,  1932,  1681, -3357, 71452,  2209, -3357,   263, -3357, -3357,
   -3357, -3357, -3357,  1695, -3357, -3357, 23989, -3357, -3357, -3357,
    2205, -3357, 73441, 73441,  1504,  1504, -3357, -3357,  2180,  1791,
    1793,  2205, -3357,  2205, -3357, 68947, -3357, -3357, 73441, -3357,
   68947,  1708,  1709,  2205, -3357, -3357, -3357, -3357, -3357, -3357,
   -3357, -3357, -3357, -3357, -3357, -3357, -3357, -3357, -3357, -3357,
    2205,  1795, -3357,  1796,  1797,  1799, -3357, -3357, -3357, -3357,
   -3357, 68947, 51427,  1711, 68947, -3357, 58942, 58942, -3357, 58942,
   68947, -3357,   923, 50205,  2222, 76385, 52930, -3357, -3357, -3357,
   -3357,  1290,  1354, -3357, -3357, -3357, -3357, -3357, -3357, -3357,
   -3357, -3357,   952, 51427, -3357,  4543, 59443, 49213,  1717, 23989,
   -3357, -3357, -3357, -3357, -3357, -3357, -3357, -3357, -3357, -3357,
    1719,  2071, -3357, -3357, -3357,  6246,  1726, 49263,  1733, 29299,
   29299,   725,  2836, -3357, -3357, 29299,  1736, 53431, 49131,  1721,
    1738, 49612, 19210, 23989, 19210, 19210, 49653, -3357,  1742, 49743,
   63952,  1744, 58942, 57940, -3357, -3357, -3357, 23989, 23989,  6344,
   58441,  1786, -3357, 36535, -3357,  2034, 36535, -3357, -3357,  5732,
   -3357, 36535,  2039, 23989, 36535, -3357,  1994,  1995,  1762, 36535,
   -3357, 58942,  1763, 58942, -3357, -3357, -3357, -3357, -3357, -3357,
   -3357, -3357,  1760,   943, -3357,  1015,  1682, -3357, -3357, 23989,
   23989, -3357, 50205,  1808, 23989, -3357, 23989,  6619, 44558, 19741,
    6619,  2278,  2278, 42047, -3357,  1933, 49785, -3357,  1771,  2445,
    7794,  1768,  1767, -3357,  1769,  1772, -3357, -3357, 46087,   200,
     725,   725, 23989, -3357, 23989,  2461,  2461, -3357,   327, 73441,
   23989, 23989, 23989, 23989, 23989, 23989, 23989, 23989, 50926,  1865,
     190, 68947, 23989, 23989,  1774,  1782, -3357, 23989,  2017, -3357,
    1785, 23989,  1874,  1220, 23989, 23989, 23989, 23989, 23989, 23989,
   23989, 23989, 23989, -3357, -3357, 32472,   379,   891,  2125,  2147,
     117,   449, 23989,  2140, 13900, -3357,  2140, -3357, -3357, -3357,
   -3357, -3357,   248, -3357, -3357, -3357,  1760, -3357,  1760, -3357,
   68947, -3357, 58942,   285, 55435, 23989, -3357, -3357,  1790,  1794,
     858,  1809,   388,    42, -3357, -3357,  1860, -3357, -3357, 58942,
   42548,  2097, -3357,   349,  1801, -3357, 49090,  2054,  2097,  1858,
   -3357, -3357, 30361,  1936,  2100,  2038, -3357, -3357,  2016,  2018,
   -3357,  1811, 50297, 25051, 25051, -3357,  1592, 50205,  1613, -3357,
   -3357, -3357, -3357, -3357, -3357,    89, -3357, 58942,   630, 40043,
   -3357,  1812,    93, -3357,  3307,  2154,  2117,  1971,   710,  1824,
   -3357,  1392,  1826, 71953, 58942,  2118,  2070,  2119,   -20, 73441,
   -3357, -3357, -3357, -3357, 58942, 68947, 67459, 72454, 51928, 58942,
   51427, -3357, -3357, -3357, -3357, 58942,  1012, 58942,  3000, -3357,
   -3357, -3357,   261, -3357, -3357, -3357, -3357, -3357, 68947, 58942,
   -3357, -3357,   261, 68947, 58942,   261, -3357,  1393, 58942, 58942,
   58942, 58942,  1428, 58942, 58942, -3357, -3357, -3357, 25582,    33,
      33,  2055, 14962,   165, -3357, 23989, 23989,  2024, -3357, -3357,
    1032,  2073,   108, -3357,  1893, 58942, 58942, 58942, 58942, -3357,
   -3357,  1947, 58942,  1834, -3357, -3357, -3357, -3357, -3357,  1851,
   -3357,  1854,  2226,  2049, -3357,  2227, 54934,  1228,  4066,  2228,
    1900,  2230, 15493,  2342,  2110, -3357, -3357,  2094, -3357, -3357,
   23989,  1868,  1880,   130,  1046, -3357, -3357,  1877,  1709,  1897,
    1902,  1883,  1885, 73441,  1061, -3357,  1065,  2205,   166,  1887,
    1908,  1724,   930,   889,  1611,   208, -3357, 51427, -3357,   415,
   -3357,  2104,   263, -3357, 17086, 23989, -3357, -3357, -3357, -3357,
   -3357, -3357,  1529, 34024, -3357,  1080, -3357, -3357,  2365,   952,
    2365,   792, -3357, -3357,  2365, -3357,  2348,  2365, -3357, -3357,
   73441, -3357,  7860, -3357, 23989, 23989, -3357, 23989,  2246, -3357,
    2409,  2409, 73441, 29299, 29299, 29299, 29299, 29299, 29299,   660,
    1578, 29299, 29299, 29299, 29299, 29299, 29299, 29299, 29299, 29299,
   30892,   821, -3357, -3357,  1108,  2379, 23989, 23989,  2255,  2246,
   23989, -3357, 73441,  1909, -3357,  1910,  1914, 23989, -3357, 73441,
   -3357, 58942,  1915,    27,    97, -3357,  1904,  1918, -3357,  1840,
   -3357,  1341,  1377, 58942,  3886,  5062,  5331, -3357, -3357, 23989,
    2240,  5732, 36535, -3357, 23989,  1919, -3357, -3357, 36535,  2260,
   -3357, -3357, -3357, 40544,  5732, 73441,  1112, -3357, 58942, 73441,
    1119, 48592, -3357, 17086, -3357, 73441, -3357, -3357, -3357, -3357,
   -3357, -3357,  1921,  1927, 23989,   111, -3357,  8591,  4425, -3357,
    1916, -3357,  1922, -3357, -3357, -3357, -3357, -3357, -3357, -3357,
   -3357, -3357, -3357, -3357, -3357, -3357, -3357, -3357,  1925, -3357,
    1928, -3357,  1937, 58942, -3357, 26113, -3357, 68947, -3357, -3357,
   23989, 23989, 58942, -3357,  1958, -3357,  1939,  8994, -3357, -3357,
   -3357,   281,  1164,  4100,   449,  6180,  6180,  6180,  6619, -3357,
   -3357, -3357,  1950, -3357, 29299, 29299, -3357,  2920,  6312, 13369,
   -3357, -3357,  2284, -3357,  1016, -3357,  1942, -3357, -3357,  6996,
   -3357, 44558,  7922, 23989,   211, -3357, 23989,  1774, 23989,  2030,
    6180,  6180,  6180,   354,   354,   281,   281,   281,  1164,   449,
   -3357, -3357, -3357,  1945, 23989, 51427, -3357,  1946,  1948,  2301,
    1585, 23989, -3357, -3357, 36535,  1786,     4,  1786,  2205,  2461,
   -3357,  1243, -3357, -3357,  1243, 50205, 58942, -3357, -3357,  2214,
    1949, -3357,   805,   259,  2462,   334,   388, 75886,  1991, 36535,
    1998,  2440,  2426, 68947, -3357, -3357,  1965,  2140,  1982, -3357,
   -3357,  1989, 23989,   374,  1989, -3357,  2097,    -9,  2202,  1390,
    1390,  1592,  2207, -3357, -3357,  2044, -3357, -3357, -3357, 23989,
   16024,  1622, -3357,  1626, -3357, -3357, -3357, -3357, -3357,  1979,
   -3357,  2259, -3357, 58942, -3357, -3357, 29299,  2446, 23989, 41045,
    2447,  2242, -3357, -3357, -3357,  2077,  1641, 23989,  2247, -3357,
     227,  1997,  2372,   535,  2321, 68947, -3357,   397,   408, -3357,
     969,  2374,   263,  2376,   263, 51427, 51427, 51427,  1142, -3357,
   -3357, -3357,   952, -3357,   516,  1148, -3357, -3357, -3357, -3357,
    2098,   617,  2049,  1641, -3357, -3357, -3357, -3357, -3357, -3357,
   -3357,   233,   739,  1641,  2105, -3357,  2106, -3357,  2111,  1031,
    1641, -3357, -3357, 20272, 50205,   598,   165,   165,   165, 17086,
   -3357,  2250,  2253,  2009, 50205, 50205, -3357,   196, -3357, 68947,
   -3357, -3357, -3357,  2024,  2087, 58942,  2049,  2025,  2504,  1410,
    1681,  2029, -3357,  2190,   868,   834, -3357, 68947, 58942, 58942,
   58942, 67960, -3357, -3357, -3357,  2032,  2026, -3357,    -3,  2261,
    2263, 58942,  2080, 58942,  1638,  2510, 58942, -3357,  1153, 20803,
    2404, 58942,  2042, -3357, -3357, -3357, -3357,  2205, -3357, -3357,
     606,   606, -3357, -3357, 68947, -3357,  2045, -3357,  2047, -3357,
   -3357, -3357, -3357, -3357, -3357, -3357, -3357, -3357, -3357, -3357,
   -3357, 68947, -3357, -3357, 50205, -3357, -3357, 52429, -3357, -3357,
   -3357, -3357, -3357, 51427, -3357,   952, -3357,   952,  2285, 68947,
   46588,   952, 47089,   952,  2048, -3357, 50205,  9896, 50205,  2255,
   -3357,   258,  2409,  2477,  2477,  2477,  3771,  2396,   228,  2056,
    2477,  2477,  2477,   274,   274,   258,   258,   258,  2409,   821,
    1129, 53431,  2057, -3357, 50205, 50205, -3357, -3357,  2059, -3357,
   -3357, -3357, -3357,  2060,  2062, -3357, -3357, -3357, -3357, -3357,
   -3357, 68947,  1434,  1786,   316,   316,   316,   316, -3357, 58942,
   58942, 58942, 50205,  2514,  2390, -3357,  5732, 50205, 58942, -3357,
   33003, 58942, -3357,  2417, -3357,  2505, -3357, 58942,  1154, -3357,
   -3357, -3357, -3357, -3357, 49908, 23989, -3357,  2443, -3357, 23989,
   23989, -3357, 44558, -3357, -3357,  2081, 13369, 50134, -3357,  2387,
   10493, 50205, -3357,  1933, -3357,  2461, 23989,  1359,  2007, 23989,
    2083, 23989,  2419, -3357, -3357,  2069, -3357, -3357, 73441, 23989,
    2084,  7553, 29299, 29299,  8330, -3357,  9028, 23989, 13369, -3357,
   45190,  2061,  2093,  2055, 21334, -3357,  2294,  2096, -3357,  2240,
     165,  2240,  2102, -3357, -3357, -3357, -3357,  1682,  1694, -3357,
   -3357,   533,  1694,  1694,  1694, -3357, -3357, -3357,   533,   533,
     533, -3357,   172,   695, 75886, 75886,   334,   334,  2072, -3357,
   -3357, 75886,   765, -3357, -3357, -3357, -3357, 28768,  2531, -3357,
   23989,  2252, 68947,   631,  1423,  1162, -3357,   725, 42548,  1998,
   23989,   253, -3357, -3357,  2099, -3357,  1989, -3357, -3357, -3357,
    2325, -3357, -3357, -3357, 58942, -3357,  2107, -3357, 40043,  2439,
   13369, -3357, 40043, 58942, 58942, 11026,  2471, -3357, 68947, 68947,
   68947, -3357, 68947,  2112,  2113,   909,  2120,   907, -3357,  1587,
     909,  2454,   306,  1638,   323,  5032,   699, -3357, -3357, -3357,
    2193, 58942, -3357, 68947, -3357, -3357, -3357, -3357, -3357, 51928,
   -3357, -3357, 44056, 51427, -3357, 51427, 58942, 58942, 58942, 58942,
   58942, 58942, 58942, 58942, 58942, 58942, 23989, -3357, 23989,  2124,
    2126,  2127,  2055, -3357, -3357, -3357, -3357, -3357, -3357,   467,
   -3357,   196,  2121, -3357, 54934,  2695,  1900,  2597, 58942,  2087,
    1077, 68446, -3357,  2129,  2131,  1163,  2049,  2138,  2609, -3357,
    1228, 54934, -3357, -3357, -3357,  2573, -3357,   831,   280, -3357,
    1410, -3357,  2695,  1681, -3357,  2695, 50205, 68947,  2200, -3357,
    1709,  2142, -3357, -3357,  1709, 73441,  1709, -3357, -3357,   263,
    1170, -3357, -3357, -3357, -3357, -3357, 68947,  2139, -3357,  2139,
   -3357, -3357,  2139, -3357, -3357, -3357, -3357, 29299,  2490,  2144,
   73441, -3357, -3357, 58942, -3357, -3357, -3357,  1171,  2145,  2240,
   58942, 58942, 58942, 58942, -3357, -3357, -3357, 21865, 23989,  2186,
   -3357,  2158, 17617,  2467, -3357, 31954, -3357,   249,  2159, 40544,
   68947, -3357, -3357, -3357, 23989, 50205, -3357, 50205, -3357, -3357,
   -3357,  7378, -3357,  2160,  2162, 68947, 23989, -3357, -3357, -3357,
     375, 23989, 23989,  2920, -3357,  8269, 23989, 73441,  1176,  2920,
     432, 23989,  3650,  4252, 23989, 23989,  9287, 11149, -3357, 26644,
   16555, -3357,  2167, 23989, 11347, 43049, -3357, 36535,  2390,  2168,
    2390,   952,  2169, -3357, -3357, -3357, -3357, -3357, -3357, -3357,
    1537,   712, -3357, -3357, -3357,   533,  2172, -3357,    54,  2171,
   -3357, -3357,  2183,   334,  2176, -3357, -3357, -3357,  2687, -3357,
   28768, 28768, 28768, 28768, 50431, -3357,  2397,  2185, 50205, 23989,
   -3357, -3357, -3357, -3357,  2237,   733, 38539,  2414, -3357,  2198,
   68947, -3357,  2252, 50205, -3357, -3357, 44558, -3357, -3357, -3357,
   -3357, -3357,  2647,  2811,  2188,  2189, -3357,  1545, -3357, -3357,
   68947,  2191, -3357,  2192,   909, -3357, 68947,  2229, -3357,   273,
    2508,   110, -3357, 23989, -3357,  2601,  2681,  1587,  2208, 68947,
   58942, 29299, -3357,   745,   332, -3357,  2499, 58942,  2229,  2643,
   -3357, -3357, -3357,   907, -3357,  2538,  2453, -3357,   261, -3357,
   23989,   907,  2456,   158, 68947, -3357, -3357,  3688, -3357, 73441,
     263,   263, -3357,  2217,  2220,  2223,  2225,  2231,  2234,  2235,
    2236,  2241,  2256,  2258, -3357,  2264,  2265,  2267,  2268,  2269,
    2288,  2289,  2291,  1500,  2292, -3357,  2293,  2099,  2295,  2296,
    2297,  2298,  2299, 74413,  2300,  2303,  2304,  2305,  1509,  2307,
    1290,  1354, -3357, -3357, -3357, -3357,  2308, -3357,  2309, -3357,
   -3357,  1515,  2239, -3357, -3357, -3357,  2311, -3357,  2326, -3357,
   -3357, -3357, -3357, -3357,  2245,  2249, -3357, -3357, -3357,   165,
    1529,   144, 68947,  2215,  2080,  2720, 22396,  2723,  2248,   570,
    1147,  2492,  2257, -3357,   952,  1900, -3357, 54934,  4069,   853,
    2263, -3357,   742,  2080, -3357,  2674,  1900,  2324,  2765, -3357,
    2524, 68947,  2312, -3357, -3357, -3357, -3357, 52429,  2139,  5198,
   29299, 73441,  1201,  1210, -3357,  2814,  2476,  2390, -3357, -3357,
   -3357, -3357, -3357,  2315,   451,  2316, 12838,  2313, -3357, -3357,
   -3357, -3357, -3357, -3357, 50205, 50205, 68947,  2503, -3357, -3357,
    2322,  2318, 41546,  2784,  2327, -3357, 17086, -3357,  2648, -3357,
   35031, -3357, 50205, 23989, -3357, -3357, 45232,  2656,  2920,  2920,
    8269,  1215, -3357,  2920, 23989, 23989,  2920,  2920, 23989, -3357,
   22927,   625, -3357,  1226, -3357, 11721, -3357, 74899, -3357, -3357,
    2186,   952,  2186, -3357, -3357, -3357, -3357, -3357, -3357,   334,
     765, -3357, -3357,  1991, 33515, -3357,  2328, -3357,   218, -3357,
    2330,  9806,  9806,  2847,  2847, 73441, 28768, 28768, 28768, 28768,
   28768, 28768, 28768,  2428,   244, 68947, 28768, 28768,  1774,  1875,
   -3357, 28768,  2580, -3357, 28768,  2430,   252, 28768, 28768, 28768,
   28768, 28768, 28768, 28768, 28768, 28768, 28768,   117, 23989,  2340,
   -3357, -3357, -3357,  2400, -3357, -3357,  1236,  2777,  2252, 23989,
   -3357, -3357,  2349, 40043, -3357, -3357, -3357, -3357, 40043,   909,
   -3357,  2520,  2229,  2351, -3357, -3357, -3357, -3357, -3357, -3357,
   11912, -3357,    74, 23989, -3357,  1011,  3771, -3357, -3357, -3357,
   -3357,  2229,  1410, -3357, 58942,  2830,  2725, -3357, -3357, 50205,
   -3357, -3357,  2205,  2205, -3357, -3357,  2505, -3357, -3357, -3357,
   -3357,  1515,   -68, 44056, 58942, 58942, -3357, -3357,  2359, -3357,
   -3357,   467,  2759,  1241,  1228, -3357,  2695,  2695, 50205, 75886,
   58942,  2361,  2546,   178,  2653, 58942,  2732, 54934, -3357,  2844,
    2366, 58942,  2080,  1230,  1230, -3357,  2516, -3357,  2518, -3357,
   -3357,  2850,   385, -3357, 23458, 58942, -3357, -3357, 37537, -3357,
    5198,  1247, -3357, -3357,  2375,  2377, -3357,  2186, 23989,  2380,
   23989, -3357, 27175,  2852,  2378, -3357, 23989,  2441, 31423, -3357,
   23989, -3357, 58942, 63952,    33,  2383, 63952, -3357, -3357, -3357,
   23989, -3357,  2920,  2920,  2920, 23989, -3357, 23989, -3357, -3357,
   -3357,  2593,  2503, -3357,  2503,  1991, -3357,  2806, 33515, 33515,
   -3357, -3357, -3357,  2398,   765,  2687, -3357,  1168,  9195,   468,
    8937,  8937,  8937,  9806,  2406, 29299, 29299, -3357, 11204,  4941,
   -3357,  2735, -3357,  1063, -3357,  2391, -3357, -3357,  7840, -3357,
    9241, 28768,   246, 28768,  1774, 28768,  2479,  8937,  8937,  8937,
     475,   475,   292,   292,   292,  1168,   468, -3357, -3357,  1253,
   -3357, 23989,  2695,   725,  3479, 68947,    14, -3357, 50205, -3357,
   -3357, -3357, 58942, -3357, 51427, -3357,   909,   536,  2394, 23989,
   12236,  2628, -3357, -3357,  2663, -3357,  2727, -3357,  2458,   643,
    2478, -3357, -3357, -3357, -3357,  1529,   952,  1900,  2263,  2324,
   -3357, -3357,  2248,   198, -3357, -3357, 75886,  2890, -3357, 75886,
    2721,  2405, 58942,  2695,  1228,   831, -3357, -3357, -3357, -3357,
   -3357, -3357, -3357, -3357, -3357, -3357, -3357, -3357, -3357,  2695,
    2856,  2629,  2863,  2695, 50205,  2200, 23989,   276, -3357,  1268,
    2846, -3357, -3357,  2929,  2503,  2418, 27175,  2420, -3357,  2423,
   68947, 50205,  2570, -3357, -3357,  2424, -3357, -3357,   165, 23989,
   -3357, 45589,  2427,  2429,  2886,  2055,  2441,  2441,  2806, 29299,
   -3357,  2431,   758, -3357, -3357,  2421, 28768,  5598,  7083, 28768,
   28768,  2779, -3357, -3357,  2433, -3357, -3357, 73441, 28768,  9763,
   29299, 29299, 10420, -3357, 10546, 28768,  2434, 23989, -3357,   733,
   -3357, -3357,  2861, 37537,  2824,  1410,   909,  2451,  1280, -3357,
   -3357, -3357, -3357, -3357,  2049, -3357, 45067,  2690,   164,  2673,
    2394, 23989, -3357,  2525, -3357, -3357, -3357,  2927, -3357, -3357,
   -3357, -3357, -3357,  2549,  2932, -3357,  1288,  2893, -3357, 58942,
   -3357, 54934,  2457,  2324,  2263,  2080,  2324,  2684, -3357,  2685,
   -3357,  2474, 45108, 68947, 68947,  1900, 37537, 68947,  2460,  2441,
   -3357,  2466, -3357, -3357, -3357, 57940, -3357,  2475,  2480, -3357,
   -3357, -3357, 23989,    61, -3357, -3357, -3357,  3118, -3357, 33515,
   33515, -3357,   860, 28768, 28768, 11204,  9828, 28768, 73441,  1299,
   11204, 28768,  7973,  8234, 28768, 28768, 10721, 58942, -3357,  2517,
   58942,  1314,   401,  2663, 44056, -3357, 51427,  1889,   536,  2788,
   -3357, -3357, -3357, -3357,   214,  2705, -3357,  2706, -3357, 50205,
   -3357,  2695,  2482, 75886, -3357, 75886,  2855,  2484, 54934, -3357,
   -3357, -3357, -3357, -3357, -3357, 37537,  2846, -3357,   349, -3357,
    1786, -3357,   349, -3357, -3357, -3357, -3357,   952, -3357,  1721,
   27706, 27706,  2485,  1454, -3357, -3357,  2483, -3357,  2487, 11204,
   11204,  9828,  1319, -3357, 11204, 28768, 28768, 11204, 11204, 28768,
   -3357,  2695, -3357,  1786, -3357,  2615,  2673, -3357, -3357, -3357,
   -3357, -3357,   810,   810,  2887, -3357,  2552, -3357,  2324, 58942,
   -3357, -3357,  2491, -3357, 75886,  1320, 68947,  1989, -3357,  1989,
   29830,  2649,   183, 49172, -3357, -3357, -3357, -3357, -3357, -3357,
   -3357, 33515, 33515, -3357, 11204, 11204, 11204, -3357, -3357, 42548,
   -3357, -3357,  2993, -3357,   282, -3357, -3357, -3357,  2495,  2620,
   75886, -3357,  1325,  1900,   349, -3357, -3357,  2989, -3357, -3357,
   -3357, -3357, -3357, -3357, -3357,  1786,   909, -3357, -3357, -3357,
   58942,  2507,  2799,  1326, -3357, 75886,  1786,  1989, 28237, -3357,
    2495, -3357,  2512,  2691, 58942, -3357, -3357, -3357, -3357, -3357,
   -3357, 58942, -3357, -3357,  2512,  1327,  2904, -3357,  2799, 58942,
    2512,   570,  2653,  2721, -3357
};

/* YYDEFACT[STATE-NUM] -- Default reduction number in state STATE-NUM.
   Performed when YYTABLE does not specify something else to do.  Zero
   means the default is an error.  */
static const yytype_int16 yydefact[] =
{
     157,   251,     0,  1512,  1511,  1583,   251,     0,  1460,   251,
     655,   572,     0,  1604,  1583,     0,   251,     0,   157,     0,
       0,     0,     0,     0,     0,   715,   718,   716,     0,     0,
       0,   251,   755,     0,  1603,   251,     0,     0,   747,   717,
       0,  1563,     0,     0,     0,     0,     0,     2,     4,     5,
       6,     7,     8,     9,    22,    10,    11,    12,    18,    13,
      14,    16,    17,    19,    20,    21,    24,    25,    26,  1469,
      27,    29,    30,    31,     0,    32,    23,    15,    28,    33,
      34,    35,    36,   691,   678,   760,   690,     0,     0,   156,
     859,   698,    37,    38,    39,    40,    41,    42,    43,  1602,
      44,   250,   249,   243,     0,     0,     0,     0,     0,  1582,
       0,   244,   111,  1628,  1629,  1630,  1631,  2232,  1632,  1633,
    1634,  1635,  1636,  1637,  1638,  2233,  1989,  1639,  1640,  1641,
    1642,  1643,  1990,  1644,  1645,  1646,  1935,  1936,  1991,  1937,
    1938,  1647,  1648,  1649,  1650,  1651,  1652,  1653,  1654,  1939,
    1940,  1655,  1656,  1657,  1658,  1659,  1941,  1992,  1942,  1660,
    1661,  1662,  1663,  1664,  1993,  1665,  1666,  1667,  1668,  1669,
    1670,  1671,  1672,  2234,  1994,  1673,  1674,  1675,  1676,  1677,
    1678,  1679,  1680,  1681,  1682,  1943,  1944,  1683,  1684,  1685,
    1686,  1687,  1688,  1689,  1690,  1691,  2235,  1692,  1693,  1694,
    1695,  1696,  1697,  1698,  1699,  1700,  2236,  2237,  1701,  1702,
    1703,  1704,  1705,  1706,  1707,  1708,  1709,  1710,  1945,  1711,
    1712,  1713,  1714,  1715,  1946,  1716,  1717,  1718,  1947,  1719,
    1720,  1721,  1995,  1996,  1722,  1723,  1948,  1998,  1724,  1725,
    2238,  1949,  1950,  2239,  1726,  1727,  1728,  1729,  1730,  1731,
    1732,  1733,  1999,  1734,  1735,  1736,  1737,  1738,  1739,  1740,
    1741,  1742,  1743,  1744,  1745,  2000,  1951,  1746,  1747,  1748,
    1749,  1750,  1952,  1953,  1954,  1751,  2001,  2002,  1752,  2003,
    1753,  2240,  1754,  1755,  1756,  1757,  1758,  1759,  2004,  1760,
    2005,  1761,  1762,  1763,  1764,  1765,  1766,  1767,  1768,  1955,
    1769,  1770,  1771,  1772,  1773,  1774,  1775,  1776,  1777,  1778,
    1779,  1780,  1781,  1782,  1783,  1784,  1785,  1786,  1956,  2007,
    1957,  1787,  1788,  1789,  2241,  1958,  1790,  1791,  2008,  1792,
    1959,  1793,  1960,  1794,  1795,  1796,  1797,  1798,  1799,  1800,
    1801,  1802,  1961,  2009,  1803,  2010,  1962,  1804,  1805,  1806,
    1807,  1808,  1809,  1810,  1811,  1812,  2242,  2243,  1813,  1814,
    1815,  1963,  2011,  1816,  1817,  1964,  1818,  1819,  1820,  1821,
    1822,  1823,  1824,  1825,  2244,  2245,  1826,  1827,  1828,  1829,
    1965,  1830,  1831,  1832,  1833,  1834,  1835,  1836,  2246,  1837,
    1838,  1839,  1840,  1841,  1842,  1843,  1844,  1845,  1846,  1847,
    1848,  2012,  1849,  1850,  1851,  1966,  1852,  1853,  1854,  1855,
    1856,  1857,  1858,  1859,  1860,  1861,  1862,  1863,  1864,  1865,
    1866,  1867,  1868,  1967,  1869,  1870,  2247,  1871,  2013,  2248,
    1872,  1968,  1873,  2249,  1874,  1875,  1876,  1877,  1878,  1879,
    1880,  1881,  1882,  1883,  1884,  1885,  1969,  1886,  1970,  1887,
    1888,  1889,  1890,  2015,  1891,  1892,  1893,  1894,  1895,  1971,
    1972,  2250,  1896,  1897,  1973,  1898,  1974,  1899,  1900,  1975,
    1901,  1902,  1903,  1904,  1905,  1906,  1907,  1908,  1909,  1910,
    1911,  1912,  1913,  1914,  1915,  1916,  1917,  1976,  1977,  1918,
    2016,  1919,  2251,  1920,  1921,  1922,  1923,  2252,  1924,  1925,
    1926,  1927,  1928,  1929,  1930,  1978,  1979,  1980,  1981,  1982,
    1983,  1984,  1985,  1986,  1987,  1988,  1931,  1932,  1933,  1934,
       0,   112,   113,  1406,   114,  1611,     0,  1383,   111,  1948,
    1955,  1969,  1458,  1459,   112,   114,   246,   654,     0,     0,
       0,     0,     0,     0,     0,   566,   565,     0,  1449,   571,
       0,     0,   116,   107,  1818,   115,  1382,   105,  1582,     0,
       0,   592,   593,     0,   602,     0,   585,   590,   586,     0,
     611,     0,   604,   612,   594,   584,   605,   595,   583,     0,
     613,     0,   588,     0,     0,     0,   247,   212,   572,     0,
     157,     0,  1473,  1474,  1475,  1476,  1477,  1478,  1483,  1479,
    1480,  1481,  1482,  1484,  1485,  1486,  1487,  1488,  1464,  1469,
    1489,  1490,  1491,  1492,  1493,  1494,  1495,  1496,  1497,  1498,
    1499,  1500,  1501,  1502,     0,  1460,     0,     0,  1941,  1992,
    1946,     0,     0,  1959,     0,  1962,  1963,  1852,  1970,  1973,
    1974,  1975,  1976,     0,   928,   115,   109,   912,     0,   693,
     863,   873,   912,   917,  1179,   940,  1180,     0,   117,  1549,
    1548,  1544,  1543,   196,  1423,  1591,  1724,  1763,  1867,  1971,
    1896,  1607,  1592,  1586,  1590,   248,   754,   752,     0,  1354,
    1724,  1763,  1856,  1867,  1971,  1520,  1524,     0,   245,     0,
    1609,  1596,     0,  1597,   115,   699,   746,     0,   252,  1562,
       0,  1567,     0,  1832,   726,   729,  1417,   727,   253,  2253,
    2254,  2255,  2256,  2257,  2258,  2259,  2260,  2261,  2262,  2263,
    2264,  2265,  2266,  2267,  2268,  2269,  2270,  2271,  2272,  2273,
    2274,  2275,  2276,  2277,  2278,  2279,  2280,  2281,  2282,  2283,
    2284,  2285,  2286,  2287,  2288,  2289,  2290,  2291,  2292,  2293,
    2294,  2295,  2296,  2297,  2298,  2299,  2300,  2301,  2302,  2303,
    2304,  2305,   254,   255,     0,   691,     0,     1,   157,  1468,
    1577,     0,   163,     0,   750,   750,     0,   750,     0,   683,
       0,     0,   691,   686,   690,   860,  1606,  1971,  1896,  1595,
    1598,  1732,     0,     0,  1732,     0,  1732,     0,  1732,     0,
    1585,  1338,     0,  1384,   118,     0,     0,   537,   570,   569,
     568,   567,   572,     0,  1732,  1433,     0,   622,   623,     0,
       0,     0,     0,     0,  1444,   108,   106,     0,  1580,   600,
     601,     0,   591,   587,   589,     0,     0,  1408,  2017,  2018,
    2019,   983,  2020,  1012,   990,  1012,  1012,  2021,  2022,  2023,
    2024,   979,   979,  1698,   992,  2025,  2026,  2027,  1732,  2028,
    2029,   980,   981,  1017,  2030,  2031,  2032,  2033,  2034,     0,
       0,  2035,  1012,  2036,   979,  2037,  2038,  2039,   984,  2040,
     950,  2041,     0,  2042,   982,   951,  2043,  1020,  1020,  2044,
       0,  1007,  2045,  1409,  1410,  1411,   610,     0,   614,   965,
     966,   967,   968,   993,   994,   969,   999,  1000,  1004,   970,
    1052,   979,  1732,  1412,   610,   606,  1732,   610,  1376,  1732,
       0,     0,   204,  1466,  1503,  2046,  2047,  2048,  2049,  2050,
    2051,  2052,  2053,  2055,  2054,  2056,  2057,  2058,  2059,  2060,
    2061,  2062,  2063,  2064,  2065,  2066,  2067,  2068,  2069,  2070,
    2071,  2072,  2073,  2074,  2077,  2075,  2076,  2078,  2079,  2080,
    2081,  2082,  2083,  2084,  2085,  2086,  2087,  2088,  2089,  2090,
    2092,  2091,  2093,  2094,  2095,  2096,  2097,  2098,  2099,  2100,
    2101,  2102,  2103,  2104,  2105,  2106,  2107,  2108,  2109,  2110,
    2111,  2112,  2113,  2114,  2115,  2116,  2117,  2118,  2119,  2120,
    2121,  2122,  2123,  2124,  2125,  2126,  1504,  1505,  1506,  1518,
       0,  1519,  1509,  1472,   157,     0,   653,  1457,  1545,     0,
       0,     0,  1294,     0,   875,   912,   917,     0,     0,   930,
       0,  1309,     0,  1315,     0,     0,     0,   912,   698,     0,
     873,   929,   110,     0,   910,   911,   801,   801,   755,     0,
     736,   922,     0,     0,   925,   923,     0,   925,     0,     0,
       0,   925,   921,   882,     0,   801,     0,   910,   913,   801,
       0,   932,  1463,     0,     0,     0,     0,     0,  1589,  1587,
    1588,  1593,     0,     0,     0,  1386,  1388,  1389,  1262,  1399,
    1165,     0,  1936,  1937,  1938,  1330,  1939,  1940,  1942,  1943,
    1944,  1119,  1945,  1397,  1947,  1949,  1950,  1952,  1953,  1954,
    1955,  1956,  1957,     0,  1398,  1960,  1799,  1965,  1966,  1968,
    1971,  1972,  1396,  1977,     0,     0,     0,  1365,  1285,     0,
    1164,     0,     0,     0,  1331,  1339,  1160,     0,     0,   973,
     974,   995,   996,   975,  1001,  1002,   976,     0,  1361,  1053,
    1148,  1349,  1167,  1198,  1169,  1178,  1156,  1229,  1149,     0,
    1159,  1151,  1357,   736,  1355,     0,  1152,  1385,   736,  1353,
    1523,  1521,  1527,  1522,     0,     0,     0,     0,     0,   110,
    1569,  1570,  1561,  1559,  1560,  1558,  1557,  1564,     0,  1566,
    1469,  1280,  1282,     0,   728,     0,     0,     0,   307,   681,
     680,     3,  1417,     0,     0,     0,     0,   748,   749,     0,
       0,     0,     0,     0,     0,     0,     0,   844,   775,   776,
     778,   841,   845,   853,     0,     0,     0,     0,     0,   687,
       0,  1605,  1601,  1599,     0,     0,     0,   141,   141,     0,
       0,     0,     0,     0,    99,    48,    92,     0,     0,     0,
       0,   226,   239,     0,     0,     0,     0,     0,   236,     0,
       0,   219,   213,   215,    50,     0,   141,     0,    46,     0,
       0,     0,    52,     0,   653,  1337,     0,   122,  2159,  2160,
    2161,  2162,  2163,  2164,  2165,  2166,  2167,  2168,  2169,  2170,
    2171,  2172,  2173,  2174,  2175,  2176,  2177,  2178,  2179,  2180,
    2181,  2182,  2183,  2184,  2185,  2186,  2187,  2188,  2189,  2190,
    2191,  2192,  2193,  2194,  2195,  2196,  2197,  2198,  2199,  2200,
    2201,  2202,  2203,  2204,  2205,  2206,  2207,  2208,  2209,  2210,
    2211,  2212,  2213,  2214,  2215,  2216,  2217,  2218,  2219,  2220,
    2221,  2222,  2223,  2224,  2225,  2226,  2113,  2227,  2228,  2229,
    2230,  2231,   120,   121,   124,   123,   125,   126,   119,   111,
       0,  2127,  1989,  1990,  1991,  1992,  1942,  1993,  1994,     0,
    1995,  1996,  1948,  1998,  1999,  2000,  2001,  2002,  2003,  2004,
    2005,  1955,  2007,  2008,  2009,  2010,  2011,  2012,  2153,  2013,
    1969,  2015,  1975,     0,  2016,  1171,   112,  1402,   114,  1288,
     760,  1286,  1418,     0,     0,     0,   651,     0,     0,     0,
       0,  1429,     0,     0,  1732,   203,  1732,   537,     0,  1732,
     537,  1732,     0,  1443,  1446,     0,   603,   610,   599,   597,
     596,   598,  1011,   998,  1006,  1005,  1285,   988,   987,   986,
       0,   985,     0,     0,  1012,  1012,  1010,   989,   965,     0,
       0,     0,  1016,     0,  1014,     0,   608,   609,     0,   581,
       0,   958,   954,     0,  1025,  1026,  1027,  1028,  1035,  1036,
    1033,  1034,  1029,  1030,  1023,  1024,  1031,  1032,  1021,  1022,
       0,  1037,  1038,  1039,  1040,  1041,  1042,  1043,  1044,   971,
     977,     0,     0,  1413,     0,   576,     0,     0,   578,     0,
       0,   209,     0,   207,     0,   157,     0,   220,  1514,  1515,
    1513,     0,     0,  1471,   223,  1508,  1517,  1507,  1516,  1470,
     240,  1465,     0,     0,  1461,   641,     0,     0,     0,     0,
    1295,  1304,  1296,  1297,  1298,  1299,  1300,  1301,  1302,  1303,
       0,     0,  2293,   872,   870,     0,     0,     0,     0,     0,
       0,  1331,     0,  1123,  1149,     0,     0,     0,  1280,  1314,
       0,     0,     0,     0,     0,     0,  1280,  1320,     0,     0,
     896,   908,     0,   794,   800,   871,   869,     0,  1354,   864,
       0,   942,   922,     0,   921,     0,     0,   924,   918,     0,
     919,     0,     0,     0,     0,   920,     0,     0,     0,     0,
     867,     0,   908,     0,   868,   939,  1551,  1550,  1546,  1533,
    1532,  1541,   197,     0,  1291,     0,   157,  1594,  1608,     0,
    1285,  1157,  1329,     0,     0,  1162,  1242,  1078,     0,     0,
    1079,  1057,  1058,     0,  1364,  1373,  1280,  1284,     0,  1160,
    1280,     0,     0,  1232,  1234,     0,  1153,  1154,     0,  1332,
    1387,  1161,     0,  1392,     0,  1052,  1052,  1360,  1262,     0,
    1252,  1255,     0,     0,  1259,  1260,  1261,     0,     0,     0,
    1352,     0,  1270,  1272,     0,     0,  1094,  1268,     0,  1097,
       0,     0,     0,     0,  1256,  1257,  1258,  1248,  1249,  1250,
    1251,  1253,  1254,  1266,  1247,  1075,     0,  1150,     0,  1201,
       0,  1074,  1358,   862,     0,  1390,   862,  1535,  1539,  1540,
    1538,  1534,     0,  1526,  1525,  1530,  1528,  1531,  1529,  1610,
       0,  1571,  1555,     0,  1552,  1283,   857,   730,  1378,     0,
     734,     0,   320,   299,   321,  1578,  1576,   162,   161,     0,
       0,   703,   702,   769,   761,   763,   769,     0,   701,     0,
     817,   818,     0,     0,     0,     0,   850,   848,  1386,  1399,
     805,   779,   804,     0,     0,   783,     0,   809,  1053,   843,
     685,   773,   774,   777,   684,     0,   846,     0,   856,     0,
     722,   724,   707,   721,   719,   704,   712,   844,   778,     0,
    1600,     0,     0,     0,     0,     0,  1732,     0,     0,   953,
      83,    64,   489,   140,     0,     0,     0,     0,     0,     0,
       0,    91,    88,    89,    90,     0,     0,     0,     0,   224,
     225,   238,     0,   229,   230,   227,   231,   232,     0,     0,
     217,   218,     0,     0,     0,     0,   216,     0,     0,     0,
       0,     0,     0,     0,     0,  1584,  1579,  1333,  1338,   760,
     760,   760,     0,   758,   759,     0,     0,   640,   535,   545,
       0,     0,     0,  1433,     0,     0,     0,     0,     0,   258,
     257,     0,     0,   572,  1434,  1432,  1436,  1435,  1437,  1704,
     191,     0,     0,   202,   199,     0,   534,   508,     0,     0,
    1448,     0,     0,     0,  1732,   524,  1445,     0,  1581,   256,
       0,     0,     0,   610,     0,  1009,  1008,   959,   955,     0,
       0,     0,     0,     0,     0,   615,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   610,  1414,     0,   607,   610,
    1377,     0,   610,   211,     0,     0,  1467,  1510,   221,   241,
     222,   242,   653,   648,   676,     0,   656,   661,   638,     0,
     638,     0,   658,   662,   638,   657,     0,   638,   652,  1547,
       0,  1194,     0,  1184,     0,     0,   931,     0,     0,  1185,
    1125,  1126,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1143,  1142,  1186,   935,     0,   938,     0,     0,  1312,  1313,
       0,  1187,     0,     0,  1319,     0,     0,     0,  1192,     0,
     874,     0,     0,     0,   789,   793,   796,     0,   799,   736,
     692,  1724,  1763,     0,   747,   747,   747,   745,   735,     0,
     821,     0,     0,   897,     0,     0,   899,   901,     0,     0,
     904,   881,   880,     0,     0,     0,     0,   943,     0,  1382,
       0,     0,   198,     0,  1422,     0,  1427,  1428,  1425,  1421,
    1424,  1426,     0,     0,     0,  1328,  1324,     0,     0,  1237,
    1239,  1241,     0,  1246,  1252,  1255,  1259,  1260,  1261,  1256,
    1257,  1258,  1248,  1249,  1250,  1251,  1253,  1254,     0,  1274,
       0,  1228,     0,     0,  1363,     0,  1121,     0,  1155,  1166,
       0,     0,  1235,  1170,  1365,  1340,     0,     0,  1395,  1394,
    1054,  1063,  1066,  1098,  1099,  1070,  1071,  1072,  1076,  1420,
    1419,  1359,     0,  1351,     0,     0,  1055,  1080,  1085,     0,
    1321,  1115,     0,  1103,     0,  1093,     0,  1101,  1105,  1081,
    1096,     0,  1077,     0,  1352,  1271,  1273,     0,  1269,     0,
    1067,  1068,  1069,  1059,  1060,  1061,  1062,  1064,  1065,  1073,
    1245,  1243,  1244,     0,  1338,     0,  1350,     0,     0,  1203,
       0,     0,  1100,  1356,     0,   942,   760,   942,     0,  1052,
    1572,  1417,  1565,  1554,  1417,  1281,  1379,  1416,   732,     0,
       0,   306,   302,   314,     0,   345,   320,   307,   293,     0,
    1574,   148,   152,     0,  1339,   182,   184,   862,     0,   767,
     768,   772,     0,     0,   772,   751,   700,  1966,  1852,     0,
       0,     0,     0,   810,   851,     0,   842,   807,   808,     0,
     806,  1386,   811,  1385,   812,   815,   816,   784,  1374,   852,
     854,     0,   847,     0,  1380,   706,   725,     0,     0,     0,
       0,     0,   689,   688,   858,     0,    49,     0,  1732,    66,
       0,     0,     0,     0,     0,     0,   439,     0,   539,   439,
     104,  1732,   610,  1732,   610,  1632,  1699,  1868,     0,    62,
     513,    95,     0,   134,   542,     0,   498,    85,   100,   127,
       0,     0,   214,    51,   228,   233,   130,   237,   234,  1453,
     235,   141,     0,    47,     0,   128,     0,  1451,     0,     0,
      53,   132,  1455,     0,  1337,     0,   758,   758,   758,     0,
    1287,     0,     0,     0,  1289,  1290,   639,     0,   536,     0,
     650,   629,   630,   640,  1431,     0,   203,   537,     0,   537,
       0,     0,  1433,     0,     0,   193,   189,     0,     0,     0,
       0,   535,   527,   525,   558,     0,   532,   526,     0,     0,
     484,     0,  1626,     0,     0,     0,     0,   624,     0,     0,
       0,     0,     0,   978,   991,   582,   965,     0,  1019,  1018,
    1020,  1020,   948,   965,     0,   965,     0,   963,     0,  1003,
     972,  1045,  1046,  1047,  1048,  1049,  1050,  1051,   575,  1415,
     577,     0,   579,   210,   208,  1462,   645,     0,   644,   649,
     643,   647,   642,     0,   637,     0,   671,     0,     0,     0,
       0,     0,     0,     0,     0,  1181,  1293,     0,  1307,  1306,
    1124,  1131,  1134,  1138,  1139,  1140,  1308,     0,     0,     0,
    1135,  1136,  1137,  1127,  1128,  1129,  1130,  1132,  1133,  1141,
     940,     0,     0,   934,  1317,  1316,  1310,  1311,     0,  1189,
    1190,  1191,  1318,     0,     0,   909,   787,   785,   788,   790,
     786,     0,     0,   942,   747,   747,   747,   747,   744,     0,
       0,     0,   941,     0,   838,   903,     0,   927,     0,   900,
       0,     0,   891,     0,   898,   947,   914,     0,     0,   916,
    1542,  1292,   753,  1158,     0,     0,  1325,     0,  1120,     0,
    1240,  1168,     0,  1263,  1227,     0,     0,     0,  1372,     0,
    1281,  1231,  1233,  1373,  1163,  1052,     0,     0,     0,     0,
       0,     0,     0,  1104,  1095,     0,  1102,  1106,     0,     0,
       0,  1089,     0,     0,  1087,  1116,  1083,     0,     0,  1117,
    1337,     0,  1341,     0,     0,  1202,  1211,   865,   861,   821,
     758,   821,     0,  1536,  1556,  1553,   733,   157,   302,   300,
     301,   302,   302,   302,   302,   312,   318,   313,   302,   302,
     302,   364,     0,   362,   307,   370,   345,   345,   346,   323,
     368,   370,   332,   342,   341,   298,   322,     0,     0,  1575,
       0,   171,     0,     0,     0,     0,   174,   188,   185,  1574,
       0,     0,   762,   764,     0,  1264,   772,   766,   814,   813,
       0,   782,   849,   780,     0,   855,     0,   723,     0,   709,
       0,   884,     0,     0,     0,     0,     0,   488,     0,     0,
       0,   439,     0,   547,     0,   554,     0,     0,   539,   520,
      84,     0,     0,     0,    58,   103,    76,    68,    54,    82,
       0,     0,    87,     0,    80,    97,    98,    96,   101,     0,
     449,   474,     0,     0,   485,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1338,  1334,  1338,     0,
       0,     0,   760,   756,   757,  1172,   674,   675,   673,   219,
     546,     0,     0,   201,   534,     0,  1448,     0,     0,  1430,
     572,     0,   194,     0,   192,     0,   203,   537,     0,   512,
     508,   533,   506,   505,   507,     0,  1627,   212,     0,  1621,
     537,  1447,     0,     0,   625,     0,   619,     0,  1442,   997,
     961,     0,  1015,  1013,   962,     0,   960,   956,   964,   610,
       0,   633,   672,   677,   659,   664,     0,   670,   666,   665,
     660,   668,   667,   663,  1182,  1193,  1305,     0,     0,     0,
       0,   933,   936,     0,  1188,  1183,   907,     0,     0,   821,
       0,     0,     0,     0,   738,   737,   743,     0,     0,  1205,
     902,     0,     0,     0,   889,   879,   885,     0,     0,     0,
       0,   945,   944,   915,     0,  1327,  1323,  1236,  1238,  1275,
    1362,  1280,  1367,  1369,     0,     0,     0,  1230,  1122,  1393,
    1056,     0,     0,  1086,  1322,  1107,     0,     0,     0,  1082,
    1263,     0,     0,     0,     0,     0,  1091,     0,  1345,  1338,
       0,  1344,     0,     0,     0,     0,  1177,   866,   838,     0,
     838,     0,     0,   311,   317,   310,   309,   308,   315,   319,
     305,   362,   367,   363,   365,   302,     0,   369,   359,     0,
     343,   344,   324,   345,     0,   329,   328,   330,   327,   372,
       0,     0,     0,     0,   292,   375,  1149,     0,  1573,     0,
    1568,   149,   150,   151,     0,     0,     0,   166,   143,     0,
       0,   183,   171,   159,   770,   771,     0,   765,   781,  1375,
    1381,   708,     0,  1160,     0,     0,   705,     0,   135,   439,
       0,     0,    65,     0,   556,   500,   548,   531,   515,     0,
       0,     0,   440,     0,   573,     0,     0,   521,     0,     0,
       0,     0,   501,     0,     0,   460,     0,     0,   531,     0,
     538,   456,   457,     0,    57,    77,     0,    73,     0,   102,
       0,     0,     0,     0,     0,    60,    72,     0,    55,     0,
     610,   610,    63,  1408,  2017,  2018,  2019,  2020,  2021,  2022,
    2023,  2024,  2025,  2026,  2137,  2027,  2028,  2029,  2030,  2031,
    2032,  2033,  2034,  2146,  2035,   446,  2036,  1799,  2037,  2038,
    2039,  2040,  2041,     0,  2042,   951,  2043,  2044,  2223,  2045,
    1248,  1249,   444,   445,   541,   441,  1409,   442,  1411,   549,
     443,     0,   544,   499,   131,  1454,     0,   129,     0,  1452,
     138,   136,   133,  1456,     0,     0,  1175,  1176,  1173,   758,
     653,   632,     0,     0,  1626,     0,     0,   281,   263,   291,
       0,  1732,     0,   190,     0,  1448,   200,   534,     0,   564,
     484,   559,     0,  1626,  1624,     0,  1448,  1620,     0,   616,
       0,     0,     0,   957,   949,   580,   646,     0,   669,  1144,
       0,     0,     0,     0,   797,     0,   803,   838,   742,   741,
     740,   739,   820,  1674,  1949,  1851,     0,   824,   819,   822,
     827,   829,   828,   830,   826,   837,     0,   840,   926,  1276,
    1278,     0,     0,     0,     0,   890,     0,   892,     0,   894,
       0,   946,  1326,  1370,  1371,  1366,     0,  1053,  1113,  1111,
    1108,     0,  1109,  1090,     0,     0,  1088,  1084,     0,  1118,
       0,     0,  1342,     0,  1197,     0,  1200,  1214,  1210,  1209,
    1205,  1172,  1205,  1537,   731,   303,   304,   316,   366,   345,
     332,   360,   361,   293,     0,   374,     0,   347,     0,   326,
       0,   397,   398,   379,   380,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1352,     0,     0,     0,     0,     0,
     413,     0,     0,   416,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   170,
     147,   173,   172,     0,  1339,   180,     0,     0,   171,     0,
     175,   626,     0,     0,   720,   883,   713,   714,     0,   552,
      67,     0,   531,     0,   439,   517,   516,   519,   514,   518,
       0,   574,     0,     0,   458,     0,   465,   503,   504,   502,
     459,   531,   537,   461,     0,     0,     0,    69,    59,    56,
      61,    70,     0,     0,    71,    74,   947,    86,    79,  2146,
    2155,     0,     0,     0,     0,     0,  1336,  1335,     0,   628,
     635,   219,     0,     0,   508,  1623,     0,     0,   621,     0,
       0,     0,     0,   278,   270,     0,     0,   534,   195,     0,
       0,     0,  1626,     0,     0,   436,     0,   481,     0,   205,
    1625,     0,     0,  1612,     0,     0,  1440,  1441,     0,   634,
    1145,     0,  1146,   937,     0,     0,   795,  1205,     0,     0,
       0,   831,   825,     0,  1204,  1206,     0,   792,  1279,   886,
       0,   888,     0,   912,   760,     0,   912,   895,  1368,  1195,
       0,  1110,  1114,  1112,  1092,  1338,  1346,  1338,  1343,  1199,
    1213,  1216,   840,  1391,   840,   293,   340,   338,     0,     0,
     355,   358,   325,   362,   332,   327,   376,   387,   417,   418,
     391,   392,   393,   395,     0,     0,     0,   377,   399,   404,
     434,     0,   422,     0,   412,     0,   420,   424,   400,   415,
     396,     0,  1352,     0,     0,     0,     0,   388,   389,   390,
     381,   382,   383,   384,   385,   386,   394,   419,   296,     0,
     295,     0,     0,   158,     0,     0,   155,   142,   160,  1265,
     710,   711,     0,   439,     0,   530,   553,   470,   448,     0,
       0,     0,   455,   462,   563,   464,     0,    78,    94,     0,
       0,   543,   139,   137,  1174,   653,     0,  1448,   484,  1620,
     618,   282,   263,     0,   289,   277,     0,     0,   290,     0,
     272,     0,     0,     0,   508,   212,  1622,   497,   490,   491,
     492,   493,   494,   495,   496,   511,   510,   482,   483,     0,
       0,     0,     0,     0,   620,  1442,     0,   177,   186,     0,
     177,  1147,   798,     0,   840,     0,     0,     0,   823,     0,
       0,   839,     0,   696,  1277,     0,   878,   876,   758,     0,
     877,     0,     0,     0,     0,   760,   792,   792,   338,     0,
     371,     0,   352,   356,   373,     0,     0,     0,     0,     0,
       0,     0,   423,   414,     0,   421,   425,     0,     0,   408,
       0,     0,   406,   435,   402,     0,     0,     0,   144,     0,
     145,   181,     0,     0,     0,   537,   555,   529,     0,   522,
     468,   467,   469,   473,     0,   471,     0,   487,     0,   480,
     448,     0,    81,     0,   550,   627,   631,     0,   438,  1614,
     262,   259,   260,     0,   279,   283,     0,     0,   269,     0,
     273,   534,     0,  1620,   484,  1626,  1620,     0,  1617,     0,
     617,     0,     0,     0,   179,  1448,     0,   179,     0,   792,
     833,     0,   832,  1208,  1207,   794,   887,     0,     0,  1196,
    1348,  1347,     0,  1219,   695,   694,   339,   336,   357,     0,
       0,   331,   378,     0,     0,   405,   426,     0,     0,     0,
     401,     0,     0,     0,     0,     0,   410,     0,   297,     0,
       0,     0,     0,   563,     0,   509,     0,     0,   470,     0,
     463,   560,   561,   562,     0,   476,   466,   477,    75,    93,
     551,     0,     0,     0,   288,     0,   286,     0,   534,  1615,
     437,   206,  1613,  1618,  1619,     0,   177,   176,   769,   178,
     942,   187,   769,   802,   697,   834,   791,     0,   893,  1215,
       0,     0,     0,     0,   337,   353,   348,   354,   350,   432,
     430,   427,     0,   428,   409,     0,     0,   407,   403,     0,
     294,     0,   154,   942,   165,     0,   480,   528,   523,   447,
     472,   486,     0,     0,     0,   478,     0,   479,  1620,     0,
     280,   284,     0,   287,     0,     0,   179,   772,  1438,   772,
    1935,  1675,  1903,     0,  1217,  1220,  1218,  1212,   334,   333,
     335,     0,     0,   429,   433,   431,   411,   146,   153,     0,
     439,   452,     0,   451,     0,   540,   475,  1616,   275,     0,
       0,   267,     0,  1448,   769,   167,   168,     0,  1224,  1223,
    1222,  1226,  1225,   349,   351,   942,   557,   450,   454,   453,
       0,     0,     0,     0,   271,     0,   942,   772,     0,   164,
     275,   261,     0,     0,     0,   285,   268,  1439,   169,  1221,
     274,     0,   265,   266,     0,     0,     0,   264,     0,     0,
       0,   291,   270,   272,   276
};

/* YYPGOTO[NTERM-NUM].  */
static const yytype_int16 yypgoto[] =
{
   -3357, -3357, -3357,  2266,   105,   123,  -791, -1227,  -971, -1206,
   -3357,    80,   125, -3357, -3357,   380, -3357,  1229, -3357,   384,
    -675,   769, -3357,  1324, -3357, -3357,  3035, -3357,   126,   127,
    2432,   675,    -7,   118,  1072,  -514,  -794, -1347, -1066,     7,
   -3357, -3357, -3357, -3357,  -673,   718, -1247, -3357,   641, -3357,
   -3357, -3357, -3357,   -22,   355, -3357,    18, -2200, -3012,  -519,
   -3357,  -680, -3357,  -178, -3357,  -600, -3357,  -623,  -608,  -665,
   -2895, -1177, -3357,  1838,  -232, -3357,   814, -3357, -2568, -3357,
   -3357,   803, -3357, -1165, -3357, -2254,   359,  -583, -2676, -2626,
   -2178,  -804,   436,  -590,   414, -2163,  -824, -3357,   832, -3357,
    -573, -3357,  -764, -1711,   128, -2870, -1685,  3058, -3357, -3357,
   -3357,  -578, -3357, -2585,  5912, -3357,   129,  1685, -2109,   132,
   -1675, -3357,    24, -2081,   133, -3357, -3357,   136,    41,  -545,
     487, -3357,   137, -3357, -3357,  1616,  -862, -3357,  1668,   140,
    1178, -3357, -2609, -3357,  -443, -3357,  -507,  -498, -3357, -3357,
      52,  -974,  1608, -3357, -3357, -3357,    28, -3357,  -380, -3357,
   -3357, -2630, -3357,    43, -3357, -3357, -3357, -3357, -3357,  -307,
     511, -3357, -3357,  -496, -2627,  -437, -3357, -3136, -3262, -3357,
   -3357,  -655, -3187, -2062,   148,   134,  1602,   -26, -3357, -3357,
   -3357, -3357,  -335, -2580, -3357,  -707, -3357,  -701,  -700,  -148,
    -674,  -663, -3357,  -540, -3334,  -642, -3357, -3357,  -692, -2821,
    2521,  -406, -3357, -3357, -1122, -3357,   569, -2058, -3357,   962,
   -3357,   970, -3357,  -207, -2856, -3357, -3357,  -352, -3357, -3357,
   -3357, -2273,    22,  -589,  -587, -3357, -3001, -3357, -3357, -2422,
   -3357, -3357, -3357,   592, -3357, -3357,  1476,   149,   150, -3357,
     619,   153, -1156,    77,   312,    12,    -5, -3357,    15, -3357,
   -3357, -3357,   942, -3357, -3357,    32,    98,  2005, -3357, -1049,
   -3357, -1651,  1053, -3357,  2141,  2155, -2222,  -758,   -73, -3357,
     990, -1695, -2135,  -584,  1417,  1987,  1992,   735, -2479, -3357,
    -416, -3357,   346, -3357, -3357,   982,  1460, -1582, -1574, -3357,
   -1719, -3357,  -293,  -115, -3357, -3357, -3357, -3357, -3357, -2525,
   -2426,  -571,  1431, -3357,  1999, -3357, -3357, -3357, -3357,    19,
   -1527,  3198,  1023,   -42, -3357, -3357, -3357, -3357,   428, -3357,
    1181,   106, -3357,  2584,  -537,  -644,  2203,   297,   445, -1795,
      37,  2596,   780, -3357, -3357,   782, -2089, -1538,   737,   -31,
    1776, -3357, -3357,  -532, -1333,  -844, -3357, -3357,   666,  1312,
   -3357, -3357, -3357,  2243,  2959, -3357, -3357,  3313,  3327, -3357,
    -668,  4118,  2068,  -835,  2218,  -901,  2219,  -905,  -910,  -825,
    2221,  2224, -1547,  7932,  2028,  6948, -2228, -3357,  1296,    51,
   -3357, -1542,   152, -3357, -3357, -3357, -3357, -2800, -3357,  -273,
   -3357,  -265, -3357, -3357, -3357,  -466, -3356, -3357,  9151,  1146,
   -3357, -3357,   740, -3357, -3357, -3357, -3357, -1562, -3357,  8667,
    1038, -3357, -2007, -3357, -3357,  -986,  -643, -1101, -1015, -1303,
   -1432, -3357, -3357, -3357, -3357, -3357, -3357, -1554, -1798,  -367,
   -2074, -3357, -3357,  1187, -3357, -3357, -3357, -1757, -2141, -3357,
   -3357, -3357, -2082,  1675,   369,  -658, -1648, -3357,  1151, -2370,
   -3357, -3357,   734, -3357,  -582, -1135, -2464,  2373,    82, -3357,
    -830, -2587, -3357, -3357,  -548, -2740, -1127,  -853, -3357,   154,
    1562,    44, -3357,   155,  1542, -3357, -3357, -3357,   156, -3357,
     813,   157,   497, -3357,  1205, -3357,   837,   159, -3357, -3357,
     139,  3160,    31, -3160
};

/* YYDEFGOTO[NTERM-NUM].  */
static const yytype_int16 yydefgoto[] =
{
       0,    46,    47,    48,   592,   593,  1883,  1832,  1609,  1263,
    1822,  1514,   594,  2656,  2657,  2658,  2278,  1244,  3582,  2279,
    1245,  1246,  2660,    52,    53,    54,   110,  1274,   595,   596,
     532,   644,  1134,   646,  1135,  1651,   804,  1352,  1353,   597,
    2333,  3281,  2750,  3282,  2415,  2327,  1524,  2409,  1944,  1862,
    1525,   539,  1958,  2751,  2699,  1945,   598,  2645,  3014,  3575,
    2671,  3785,  2950,  2951,  3572,  3573,  2648,  2281,  3675,  3676,
    2726,  1814,  3670,  2352,  3485,  2285,  2266,  2952,  2360,  3435,
    3059,  2282,  2932,  2353,  3568,  1896,  2354,  3569,  3234,  2355,
    1859,  1887,  2649,  3677,  2286,  1860,  2644,  3015,  1802,  2356,
    3579,  2357,   550,  2936,   599,  2729,  1418,   521,   522,   523,
     894,  1355,  1397,  1356,   524,   763,   600,   823,  1893,   601,
    1411,  1875,   602,  1884,   603,  2713,  2714,   604,   605,  1180,
    2601,  2200,   606,   583,   584,   914,  1459,   585,   896,   607,
    1501,  1502,   922,    68,   770,  1516,   608,  1517,  1518,  1010,
      69,  1610,  1012,  1013,    70,    71,   610,  3317,  3072,  1424,
    1897,  2365,   551,   611,  2897,  2202,  2604,  3564,    74,  3215,
    2205,  1205,  3218,  3498,  2890,  3213,  2605,  3614,  3698,  3216,
    2206,  2207,  3499,  2208,   612,   661,  1608,  3370,    76,  1871,
    3593,    77,  3291,  3832,  3823,  3824,  3792,  3470,  3600,  3048,
    3811,  3788,  3467,  3595,  3049,  3596,  3753,  3468,  3294,  2598,
      78,  3418,  3419,  2198,  2575,  3157,  1732,  2576,  2579,  2195,
    1733,  1734,  2873,  3170,  2879,  3770,  3714,  3530,  2866,  2586,
    2587,  2588,  2589,  3715,  3717,  3531,  3716,  3163,  3164,  2590,
    2591,  2592,  2868,  2869,  2593,  2594,  2884,   613,   614,  1077,
    2059,   615,  1805,   616,  1136,    84,    85,  1050,    86,  3228,
      87,    88,  1780,  1781,  1782,   692,   704,   705,  2190,  1581,
    2028,   697,  1209,  1749,   678,   679,  2323,   778,  1854,  1744,
    1745,  2211,  2612,  1773,  1774,  1218,  1219,  2016,  3513,  2017,
    2018,  1574,  1575,  3326,  1761,  1765,  1766,  2232,  2222,  1752,
    2484,  3097,  3098,  3099,  3100,  3101,  3102,  3103,  1137,  2789,
    3337,  1769,  1770,  1221,  1222,  1223,  1778,  2242,    90,    91,
    2175,  2557,  2558,   650,  3114,  1598,  1783,  2793,  2794,  2795,
    3118,  3119,  3120,   651,  1045,  1046,  1069,  1064,  1588,  2036,
     652,   653,  1993,  1994,  2453,  1071,  2030,  2046,  2047,  2801,
    1914,   897,  2267,  1614,  1462,   899,  1138,   900,  1437,  1139,
    1441,   902,  1140,  1141,  1142,   905,  1143,  1144,  1145,   908,
    1433,  1146,  1147,  1452,  1481,  1482,  1483,  1484,  1485,  1486,
    1487,  1488,  1489,  1148,  1784,  1149,  1150,  1151,  1152,  1153,
    1154,   655,  1155,  1156,  1699,  2169,  2556,  3107,  3334,  3335,
    2846,  3149,  3361,  3525,  3712,  3764,  3765,  1157,  1158,  1643,
    1644,  1645,  2069,  2070,  2071,  2072,  2163,  1693,  1694,  1159,
    3020,  1696,  2090,  3110,  3111,  1192,  1567,  1638,  1400,  1401,
    1615,  1540,  1541,  1548,  1968,  1556,  1560,  1998,  1999,  1568,
    2131,  1160,  2065,  2066,  2507,  1623,  1161,  1276,  1650,  2841,
    2166,  1697,  2125,  1168,  1162,  1169,  1164,  1634,  1635,  2518,
    2813,  2814,  2096,  2239,  1728,  2244,  2245,   918,  1165,  1166,
    1167,  1402,   527,   911,  3699,  1493,  1197,  1403,  2121,   617,
     103,   618,    94,   619,  1187,   701,  1188,  1190,   620,   672,
     673,   621,   685,   686,  1611,  1713,  1612,   622,    99,  1232,
     674,   693,   623,  3313
};

/* YYTABLE[YYPACT[STATE-NUM]] -- What to do in state STATE-NUM.  If
   positive, shift that token.  If negative, reduce the rule whose
   number is the opposite.  If YYTABLE_NINF, syntax error.  */
static const yytype_int16 yytable[] =
{
     520,   533,   917,  1406,  1262,   555,   803,    57,  1065,  1358,
     555,  1904,   779,  1007,   645,  1995,   659,   659,    58,   764,
    1163,   663,   555,   671,    62,  1228,   671,  1846,    72,   690,
     694,   100,    89,   694,  1835,   915,   555,   555,  1448,  1519,
     648,    65,  1513,    73,    93,   780,   781,  1559,  1408,   898,
      89,  2214,  1495,  1454,  2173,  1498,  1836,   766,   525,  1193,
    1613,  1729,  2543,  2607,  1811,  2050,  2089,  1647,  1504,  2650,
     609,  1801,   654,  2545,   695,  1735,  3045,    82,  3043,  2617,
     645,   645,  1807,   923,   783,  3021,  2559,  3017,  2561,   526,
    1851,  2315,   690,  1009,  2689,  2690,  2691,   694,   555,   694,
     694,   694,  2643,   526,   784,    49,   648,   648,  2108,  2109,
    1840,  1047,  1536,   691,  1703,  1908,  1068,  1535,  3063,  1706,
    1264,  1533,  1268,    50,  1272,    51,    55,    56,    59,    60,
     556,  1042,    61,    63,  2540,   556,    64,    66,   654,   654,
      67,  2606,   707,  1641,   797,  1926,  2812,   556,    75,    79,
      80,  2700,  3060,    81,    92,    95,    96,    97,   662,    98,
    2862,   556,   556,  3371,  2911,  3305,  1014,  1089,  2916,   526,
     526,   537,   687,   656,  3285,  1089,   789,  1434,  1435,  2177,
    1179,  2338,  2234,  1520,  2715, -1012, -2132, -2132,  2334,  2581,
   -2006, -2006,  2237,  3309,  1217,  1456, -1020,  1537, -2146, -2146,
    2456,   658, -1404,  1710,  1446, -1384, -1404,  1220, -1997, -1017,
    -679, -2014, -1997, -1017, -1400, -1400, -2137, -2137,  3465, -2155,
   -2155, -1405,  -682,   556, -1407, -2006, -2014,  3238,  1206, -1401,
   -1401,  2707, -1403, -1403,   658,  2581,  2485,  2123,  1089,   656,
     656, -1405, -1407,  -979,  1520,  1175,  -992, -1007,  1358,  2494,
   -1020,  2505,   658,   658,   658,  2703,  2757,  2759,  2123,  2762,
     699,  3451,  2796, -2157, -2157,  1507,  -636,  3438,  2577,  1972,
    1089,  2196,  3253,  1456,  1974,  3221,  2247,   831,  3161,  1820,
    2331,  3272,  1823,  1824,  -815,  1972,  1454,  2722,  1182,  1973,
    1974,  2123,  1659,  2123,  1707,  1507,   658,  1661,  1812,  3589,
    1089,  1792,   776,  3175,  3366,  1803,  3562,  3402,  3176,  1753,
    -679,   774,    83,  2870,  2871,  1803,  1838,  1656,  1812,  1753,
       3,     4,  -682,  3150,  1812,  3152,  2678,  -219,  1456,  1669,
      83,   776,  -219,   647,  3742,  1901,  3591,  3671,  2849,  1812,
    3183,  1869,  3367,  2466,  1520,  1849,  1520,  1520,    83,  3799,
    3362,  2581,  3364,  1754,  1850,  3702,  3613,   765, -1246,  2768,
    2321,  1671,  1737,  1754,  3617,  1659, -1246,  3532,  3533,  1660,
    1661,   771,  3185,  2479,  2480,  2481,  3661,  1528,   676, -2131,
   -2131,  1543,  2073,   775,  2779,  1358,  1659,  3064,  2925,  2074,
    2075,  3235,  2209,  2076,  2077,  2078,  1795,  3808,  1207,   647,
     647,   782,  1669,  3710,  3797,  1819,  1708,  2551,  1582,  1048,
    2160,    83,   109,  2468,  2429,  3789,  3271,  2904,  2161,  2192,
    1520,  2954,  1755,  1520,  1520,  3299,  1834,  2193,  1434,  1435,
    1750,  3300,  3476,  3711,  1671,  1007,  3311,  2012,   558,  2646,
    2264,  2924,  1596,  3689,  1446,  2457,  3692,  3450,  3403,  3249,
    -952,  3490,  1841,  3404,  1927,  1671,  1183,  1943,  1184,  3491,
    1659,   776,  3829, -1267,  1660,  1661,   772,  1844,  2012,  2469,
    3236, -1267,  1756,  2210,  3672,  2643,  3789,  2643,   677,  3175,
    1456,  2907,  1756,  3070,  3176,  1637,  3175,  2905,  2170,  1068,
     624,  3176,  3405,  1457,  3794,  1597,  1007,  1669,  1208,  2955,
    2265,  1047,  -679,   101,  1813,  2809,  1176,  1521,  3755,  3800,
    2498,  1629,   863,  2854,  -682,  2769,  3183,  1810,  3534,  2063,
    2858,  2859,  2860,  3183,  1813,  1738,  2322,  3504,  1852,  1671,
    1813,  3449,   694,  1021,  3563,  1709,  1757,   694,  1870,  1751,
     694,  2332,  2467,  1054,  3528,  1813,  1757,   555,  3185,  2320,
    1049,  3592,   102,  2248,  3065,  3185,  3433,  2053,  1797,  2568,
    3756,  3673,  3327,  3588,  3809,  1899,  2197,  2796,  1785,  1786,
    1810,  1457,  3239,  2647,  -679,  3443,   913,   555,   555,  2089,
    2399,  1055,  1177,  2956,  -952,  3162,  -682,  1789,  3787,  2064,
    1810,  3427,   832,  3078,  3439,  1083,  1810,  1583,  1007,  1007,
    3167,  1039,  2120,   766,  3280,  2696,  2697,   700,  1057,  2124,
    1902,  1810,  2470,   777,  3250,   806,  1890,  1015,   533,   659,
    1649,  1911,    89,  1912,  3068,   520,  1457,   694,  2259,  3492,
    2542,  2766,  2563,  1919,   538,  3056,   645,  2171,  2234,  3718,
    1044,  1044,  1853,  1011,  1787,  1044,  1067,  2620,  3406,  1432,
    1920,  2615,  3737,  2578,  1458,   766,  1839,  1788,  1736,   671,
     671,   671,  1038,  3385,  2718,  3550,  2679,  2709,  2614,  3262,
    3263,  3743,   556,   671,   671,  1449,   671,  1836,  1798,  3734,
    2609,  1939,  1941,   654,  2861,  2387,  3021,   783,  3017,  2176,
     694,  2790,  -679,  1624,   654,  2405,   555,  1450,  3466,   657,
   -1012,   766,   556,   556,  -682, -2006, -2006,   784,   773,  3690,
    1229,  1451,  1626,  1626,   526,   698,  3458, -1404,   801,  3229,
   -1384, -1404,   802, -1997, -1017,   526, -2014, -1997, -1246,  1449,
    3373,  -679,  1494,  -679,  1181,  3691, -1405,  1061,   696, -1407,
   -2006, -2014,  2280,  -682,  2284,  -682,  3374,  1724,  2700,  1654,
    2320,  1450,  1186,  3348,  1584,  1185, -1405, -1407,  1436,  3430,
    1018,  1440, -1007,   694,  3431,  1453,   694,  1704,  2178,  3116,
    1036,  3718,  1511,  1512,  1989,    57,  1905,  1906,  1457,   792,
    2162,   795,  2194,   799,   656,   702,    58,  1986,  1987,  1988,
    1989,  2437,    62,  1637,   801,   656,    72,  1692,   802,   100,
      89,  1194,  1511,  1512,   625,  1830,   694,  3159,  3205,    65,
    1181,    73,    93,   694,   694,   694,   694,  3278,  2552,   687,
     687,   556,   687,  2780,  2781,  2782,  2783,  3587,   694,  1831,
     767,  2568,  1972, -1267,  -219,  -219,  1973,  1974,  3220,   658,
    2848,  2582,  2850,  3329,  3292,    82,  2583,  2569,  2570,  1074,
      83,  2294,  2584,  1213,  2585,  1358,  2105,  1358,  3735,   768,
    1075,  2297,  3306,  3247,  2300,  1812,  3605,  1689,  1690,  1691,
    1692,  3175,  1213,    49,   769,  3781,  2464,  2368,  3307,  3283,
    1880,  2079,  2080,  2081,  1825,  2082,  2083,  2084,  2085,  2086,
    2087,    50,   785,    51,    55,    56,    59,    60,  2892,  3222,
      61,    63,    83,   765,    64,    66,  3604,  3293,    67,  1995,
     898,  2240,  1747,  2464,  1929,  1428,    75,    79,    80,  2019,
    2004,    81,    92,    95,    96,    97,  1915,    98,  1007,  3034,
    2572,  3035,  1215,  2233,  2233,  2039,  3526,  2438,  3527,  1497,
    3185,  2934,  3248,   915,  1025,   626,  1928,  2439,  3570,  1830,
    2089,  1215,  1932,  1429,  2893,  1037,  1505,   658,  2515,  1506,
    1687,  1688,  1689,  1690,  1691,  1692,  1582,  2573,  2935,  2410,
    2473,  -835,  2408,  1831,   805,  3043,  2062,  1637,  2819,  3200,
    3201,  3202,  3203,  3204,  3205,  3700,  2092,  1812,  3202,  3203,
    3204,  3205,  1520,  2677,  1236,  2264,  2651,   764,  1936,  1216,
    1237,   765,  1520,  3303,   782,  1520,    21,  1579,  1009,  2106,
    2574,  3571,  2393,  2395,  1589,   812,  2692,  2392,  1044,  1067,
    2391,   694,  1449,    21,  1551,  2672,  2928,  2292,  2241,  1449,
    1044,  1044,  1826,  2010,  3436,   813,   555,  1649,  2673,  1236,
    1827,  2375,   645,  2740,  1450,  1237,    89,  3634,  3635,   645,
    2744,  1450,  2746,   817,  2564,  2640,  3304,  2565,  1451,   555,
    3087,  2654,  3300,  2398,   824,  1453,  1606,  2400,   648,  2418,
    2402,  1813,  3308,  3423,  2419,   648,  1618,  3021,  3619,  3017,
      83,  1504,  3141,  1803,  3782,  2938,  1836,  2386,  2388,  2967,
    1449,  2316,  2317,  2318,  1804,   660,   660,  2394,  2396,  2397,
     654,  1054,  3386,  1238,   827,  2652,  2828,   654,  2626,  2344,
    2615,  2188,  1450,  1520,  3390,  2681,  2256,  2687,  2929,  2569,
    2570,  1466,  1467,  2126,   555,   828,  2941,  2110,   818,  2688,
    1530,   526,   658,  2420,  1430,  2189,  1236,  1810,   526,  1055,
    3704,   766,  1237,  2293,  3356,  2680,  1803,  2532,  1238,  1472,
    1473,    25,    26,    27,  3211,  1591,  3357,  1806,  3583,  1213,
     829,  1571,  2303,  3816,  1214,  1927,  1057,  2310,    25,    26,
      27,  1719,  1731,  3783,  1721,  1659,  2533,  1170,  1171,  3175,
    1173,  2723,   800,  2930,  1602,  1641,  2931,  2731,   555,   555,
    1472,  1473,  3212,  1813,  3541,  2003,   694,  2005,  2006,  2571,
    3784,   656,  2572,  2863,  1741,  1742,   540,  1748,   656,  2280,
    2280,  2280,  1669,  2864,   807,   819,  3183,    32,  1551,   815,
    2863,  1520,   816,  3542,   784,   784,   819,   784,   694,  1799,
    3158,   833,   774,  3566,    32,  3083,  1464,  1465,  1215,  2573,
    1181,   694,  3255,   801,  1671,  1238,  -760,   802,  3185,  1642,
    3260,  -760,  1431,   820,  3836,   540,    37,  2372,   694,  1810,
    3841,  3477,   694,  1239,   820,  1239,  1845,  2268,  1722,  1476,
    1477,  1723,   541,    37,   830,  2144,  2875,  2417,  2876,  1812,
    2295,  2421,  2574,  3639,  2423,  2298,  1216,  3640,  3441,    39,
    2711,  2877,  2878,  2945,  1938,  1061,  3627,   834,  2534,  1089,
      42,   821,  1837,  2535,   775,  1620,    39,   689,  1239,  1029,
    1476,  1477,  1584,   556,   556,  3478,    43,    42,  1466,  1467,
    3551,   541,  1236,  1240,  3479,  -760,    83,  1241,  1237,  2653,
    3553,  2654,  1984,  1985,  1986,  1987,  1988,  1989,  3082,   835,
      44,   822,  2946,   836,  2089,  3543,  3480,  1943,  2562,  1585,
    3544,   921,   822,  2791,   689,  1592,  2798,  1242,  1940,  2655,
    2947,   647,   801,  1089,  2462,  1007,  1648,  1088,   647,  1019,
    1972,   689,  1241,  -760,  1973,  1974,  1444,  1445,  1975,  1976,
    1977,  2382,   776,  1468,  1469,  1470,  1471,  1472,  1473,  2619,
    2619,  1474,  1475,  1576,  2618,  3131,  2821,  2145,  1858,  1089,
     694,  1020,  1242,  1621,  1407,  1239,   694,  2685,   817,  2164,
    2662,  1600,  2664,  2165,  1625,  1604,  2146,  1895,  2560,  1236,
    1236,  2147,   808,  3481,   809,  1237,  1237,  2958,  2424,  1874,
    1243,  1238,  -759,  2752,  1021,  1876,  3482,  -759,  2013,  1877,
    2430,  1639,  1878,  2014,  1933,  1202,  2853,  1934,  1913,  2965,
    2855,  2856,  2857,  1913,   545,  1236,   546,  2536,  3768,  1022,
    2148,  1237,  2948,  3769,  2052,  1266,  1023,  2053,  2537,  1241,
    2458,  2949,  3040,  1007,  2922,  1243,  2957,  2463,  2966,  1078,
    1079,  1080,   549,   818,   913,  1813,  2530,   913,  1409,   555,
     555,   104,   555,   913,  1864,  1415,  1417,  1420,  1422,  1267,
   -2128, -2128,  1590,   545,  3545,   546,  1595,  1476,  1477,  1027,
    1427,  -759,   801,  2495, -1384,  3546,   802,  2495,  1438,  1606,
    1030,   782,   782,  2501,   782,   810,  1031,   811,  1238,  1238,
    1641,   549,  1865,  1032,   777,  2706,  2054,    89,  2894,  2055,
    1447,  2031,  1551,  1551,  2033,  2742,  2743,  2741,  1551,  2037,
     520,  1810,  2040,  2328, -2129, -2129,  2329,  2044,  1011,  -759,
    3420, -2130, -2130,  1044,  1238,   555,  2015,  2376,   111,  3295,
    2055,   536,  1243,   694, -2133, -2133,   645,  1490,   586,   645,
    3806,  1864,  2383,  1979,   645,  2384,  2385,   645,  1033,  2384,
    2629,  1239,   645,   675,   555,    21,   555,   688,  3522,  1034,
    3523,  2412,   648,  2280,  2413,   648,  1035,  3022,   654,  2284,
     648,  3758,  1036,   648,   556,   556,  2149,   556,   648,  1865,
    1867,  2088,  3795,  2056,  3796,  1073,  2094,  1478,  1479,  2450,
   -2134, -2134,  2451,  2496,   654,  1070,  2497,   654,  3483,   526,
    2499,  3484,   654,  2497,  3778,   654, -2135, -2135,    89,  3321,
     654,  1270,  2665,  1980,  2667,  1241,  1866,  2057,  1041,  2058,
    2061,  2938,   105,  2668,   913,   526,  2669,  2939,   526,  2674,
    1076,   106,  2675,   526,  2734,  2803,   526,  2053,  2497,  1083,
    2940,   526,  3828,  2899,  3055,  1271,  2900,  2329,  1239,  1239,
     556,  3076,  3084,  2060,  3077,  3085,  1016,  3132,   660,  1081,
    2055,  3012,  2941,  1546,  2942, -2136, -2136,  1867,   107,   656,
    2358,  2615,  2359,  2180,  1082,   694,  3819,   694,  1084,  2045,
    3155,  2049,  3322,  3156,  1239,  2055,  1174,  3827,  2895,  1072,
    1178,  3323,   694,  2204,  2497,   656,  3351,  1189,   656,  2055,
      25,    26,    27,   656,  2216,  1551,   656,  3358,  2255,  2301,
    2053,   656,  1241,  1241,  1172,  3230,  1195,  3424,  1243,   108,
    3425,  2965,  3457,  1196,   784,  2329,  1438,  2474,  3501,  2475,
     694,  2055,   555,  2173,  3556,  1186,  3500,  3557, -2138, -2138,
      10,  1447,  1242,  2302,  2308,  1198,  1799,   555,  1241,  3615,
   -2139, -2139,  3616,  3279, -2140, -2140,  2943,   555,  2270,   555,
    2274,  3665,   555,  2476,  3666,  2477,    32,  1203,   555,  3684,
     555,  1204,  3685,  2105,  2921,  1199,  2923,    83,  2309,  2268,
    3723,   913,   555,  2055,  1200,  3143,   913,   555,  1210,  1007,
    1212,   555,   555,   555,   555,  3733,   555,   555,  3616,  1211,
    3773,  3793,  1520,  2055,  3616,    37,  3814,  3825,  3837,  3815,
    3685,  1497,  1230,  2749,    21,  1243,  1243,  1234,   694,   694,
     694,   694, -2141, -2141,  2944,   694,  1981,  1982,  1983,  2945,
    1984,  1985,  1986,  1987,  1988,  1989, -2142, -2142,    39,  2351,
   -2143, -2143, -2144, -2144, -2145, -2145,  1231,  3075,  1233,    42,
    1235,  1243,  1247,   901,  1248,   647,  1265,   556,   647, -2147,
   -2147, -2148, -2148,   647,  1269,    43,   647, -2149, -2149,  3420,
    1791,   647,   556,  2132, -2150, -2150, -2151, -2151,  2946, -2152,
   -2152,  1273,   556,  1818,   556,  1404,  3066,   556,    83,    44,
    1405,  1249,  1410,   556,  3039,   556,  2947, -2154, -2154, -2156,
   -2156,  1412,  2133,  2896,  1842,  1413,  3050,   556, -2158, -2158,
    1423,  1250,   556,  1855,  1856,  1425,   556,   556,   556,   556,
    1426,   556,   556,  2235,  2236,  2362,  1551,  1551,  1551,  1551,
    1551,  1551,  2915,  1432,  1551,  1551,  1551,  1551,  1551,  1551,
    1551,  1551,  1551,  1551,  -810,  -810,  2130,  3258,  1474,  1475,
    2486,  1476,  1477,  -814,  -814,  1251,  2489,  -813,  -813,    25,
      26,    27,  1436,  3757,   555,  1439,  3391,  3759,  2569,  2570,
    3226,  3227,   540,  1716,  1718,  1088,   694,  1440,  1972,  1442,
    1443,  3500,  1973,  1974,  1461,   645,  1975,  1976,  1977,  1455,
      21,   645,  1460,  1463,  1491,  3392,   555,  1492,  2948, -1450,
    1236,   555,  1500,  1496,  2822,  1499,  1237,  2949,  1522,  1523,
    1526,   648,  1529,  1573,  3455,  1249,  1570,   648,  1557,  2134,
    1572,   782,  1580,  1586,  2135,    32,  1593,  1587,  1594,  2136,
    1599,  1603,  1605,  1616,  3500,  1250,  1617,  1619,   541,  -983,
    -990,  -980,  1863,   654,  1624,  1515,   555,   689,  1881,   654,
    2519,  1249,  -835,  1252,  1531,   555,  -836,  -981,  1628,  3817,
    -984,  3344,  2615,  2752,    37,  1629,  -982,  1633,  3267,  3268,
    1641,  1250,  1646,  1652,   526,  3649,  1700,  1551,  1551,  1251,
     526,  1464,  1465,  1698,    38,  1702,  1714,  1725,  1520,   556,
    1726,  2343,  1730,  1520,  2088,  1739,  1740,    39,  1214,  1216,
    3019,   766,  1775,  1253,  1777,  1607,  1515,  1779,    42,  1238,
    1790,  1254,  3393,  3500,  1808,  1251,  1809,  3394,  1810,  1448,
    1815,  2492,  3395,  1255,    43,  1816,  2049,   645,  1817,  1821,
    1828,  1731,  1829,  1843,  1833,    25,    26,    27,   540,   555,
    1939,  1941,  1848,  1861,   656,  1857,  1872,  1873,    44,  1882,
     656,  2346,   645,   648,   901,  1256,  2204,  1885,  1888,  1886,
      83,  1892,   689,  1466,  1467, -1450,  1889,  3516,  3585,  1891,
    1653,   556,  1898,  3074,  1089,  1900,  3722,  1252,   648,  1655,
    1642,  1907,  1909,  2137,  1910,   654,  1917,  1918,  1921,  1922,
    1923,  1979,  1924,  1927,  2138,  1935,   555,  1705,  1961,  1551,
    1963,    32,   555,  1964,   541,  2000,  1711,  1966,  1515,  1515,
     654,  1258,  3121,  1252,  1969,  2027,   526,  1992,  1858,  2001,
     545,  2032,   546,  2008,  2011,  2029,  2038,  1253,  1468,  1469,
    1470,  1471,  1472,  1473,  1259,  1254,  1474,  1475,  2041,  2042,
      37,   526,  2043,  2048,  2051,   548,  2064,  1255,   549,  1659,
    2098,  2095,  2100,  2102,  2129,  1261,  2122,   542,  2101,  2140,
    2103,  1980,  3012,  1253,   556,  2141,   540,  2143,  2167,  1239,
    2168,  1254,  2174,    39,  2186,  2187,  3396,   775,  2191,  1256,
    2199,  2215,  1858,  1255,    42,  2212,   656,  3397,   694,  2224,
    2225,  2226,  2227, -1450,  2228,  2229,  2246,  2250,   543,  2251,
    1858,   694,   694,   694,   647,  2254,  2257,  2262,  2261,  2263,
     647,   656,  1874,   776,   555,  1256,   694,   766,  1876,   694,
    2326,   556,  1877,  2330,   694,  1878,  2335,  2631,  3567,  1257,
    2341,  2345,   541,  1241,  2347,  1258,   544,  2745,   689,  2348,
    2349,  2363,  2364,  2366,  2369,   557,  2371,  2370,   901,  2373,
     587,  3244,  1476,  1477,   913,  2377,  2401,  2181,  1259,  2184,
    2378,  2374,   664,  1260,  2380,  2379,  2381,  2414,  2389,  2422,
    3739,  1258,  1858,  1858,  2201,  1858,   706,   706,  1997,  1261,
    1972,  2452,  1996,  2483,  2471,   542,   545,  2490,   546,  2390,
    2459,  2460,  1939,  1941,  1259,  2461,  2465,  3266,  2472,  2488,
    2510,  1639,  2502,  1520,   520,   547,  2503,  2512,  3444,  2513,
    2511,   548,  2238,  2526,   549,  1261,  2531,  2555,  2514,  2130,
    2524,  1836,  2538,  2547,  2777,  2548,  2553,  2566,  2554,  2567,
    2597,  2580,   694,   694,   694,  2549,  1243,  2600,   793,   556,
    2842,   555,  2602,  1551,   555,  1088,   647,  2603,  1972,  2608,
     555,  2610,  1973,  1974,  2611,  -816, -2159, -2159, -2159,  1007,
    2621,  2622,   654,  2624,   544,  2088,  2625,  2628,  2632,  2633,
    2634,   647,  1478,  1479,  1981,  1982,  1983,  2638,  1984,  1985,
    1986,  1987,  1988,  1989,  2636,  2639,  2642,  2661,   766,  2663,
    2695,  2676,  1480,   526,  2693,  1551,  1551,  2694,  2682,  2683,
    2336,  2337,  2339,  2340,  2684,  2704,  2705,  2342,  2710,  2708,
    2721,  2724,  2732,  2720,   545,  2725,   546,  2737,  1731,  2867,
     766,   901,  2728,  2739,  2747,  2867,  2748,  2756,  2767,  2764,
    1464,  1465,  2797,   547,  2056,  2787,  2770,  2773,  2788,   548,
    2774,  2775,   549,  2776,  2799,  2800,  3518,  2806,  2816,  2827,
    1551,  2826,  2839,  -691,  1942,  2891,  2845,  2872,  1607,    89,
    3567,  2204,  2810,   656,  2824,  2830,   556,  -691,  2057,   556,
    2058,  2061,  -691,  2840,  2887,  2045,  2889,   694,  2908,  2906,
    2847,   555,  2912,  2851,  2920,   555,   555,   555,  2910,  2105,
    2953,  1858,  1799,  1858,  2927,  1895,  2926,  3387,  2969,  3046,
    2933,  3042,  2914,  3376,  2060,  3036,  3709,  3037,  3038,   910,
    3053,  3058,  1466,  1467,   555,  3054,  2971,   765,  3057,  3062,
    3071,  3073,  3080,  2329,  3081,  -691,  3086,  3106,  3112,   555,
     555,   555,   555,   555,   555,   555,   555,   555,   555,  3108,
    3117,  2898,  3515,  3124,  3123,  3505,  -691,  3507,  3144,  3151,
    3154,  3160,  3165,  3012,  3166,  3168,  3169,  2351,  2478,  3517,
    3207,   694,  3520,  3210,   694,  3208,  3217,  3219,  3223,  3224,
    3225,  3233,  3231,  3232,  1799,  3237,  3241,  1468,  1469,  1470,
    1471,  1472,  1473,  3242,   901,  1474,  1475,  1874,  3243,  3251,
    1895,  3254,  3256,  1876,  -691,  3257,  3284,  1877,  3261, -1400,
    1878,  3019, -2127,  -691,  3274, -2128,   556, -2129,  3273,  1858,
     556,   556,   556, -2130,   901,   901, -2131, -2132, -2133,  3275,
    1551,  3663,  3286, -2134,  3276,  3289,   555,  3633,  3277,  3296,
     901,  1980,  3290,   694,   694,   694,   694,  3297, -2135,   556,
   -2136,  3310,  3044,  3667,  2179,  1551, -2138, -2139,  1551, -2140,
   -2141, -2142,   555,   913,   556,   556,   556,   556,   556,   556,
     556,   556,   556,   556,   766,  1579,  3312,  3314,  3125,  3067,
   -2143, -2144,  3069, -2145, -2147, -2148,  3315, -2149, -2150, -2151,
   -2152, -2153, -2154,  3324,   903, -2155, -2156, -2157,  1639, -2158,
   -1401, -1403,  3318,  3325,  1520,  3328,  3330,  3332,  3148,  3339,
     645,  1476,  1477,  3336,  1088,  3342,  3338,  1972,  3343,  3345,
    3350,  1973,  1974,  3372,  3375,  1975,  1976,  1977,  3175,  3384,
    1639,  3628,  3399,  3401,  3421,  3422,   648,    21,  3426,  3432,
    3429,  3434,  3446,  1551,  1551,  1551,  1551,  2797,  3447,    83,
    3454,  3456,  3463,  3464,  3469,  3472,  3473,  3474,  3487,  3214,
    3488,  2045,  3489,  2204,  3509,  -691,  3502,  3503,   654,  2088,
    3506,  3512,  3510,  3519,  3524,  3529,  2863,  3540,   766,  3536,
    3250,  3547,  3555,  1799,  3574,  3578,    83,  2492,  3581,  1858,
    3580,  3597,  3599,  3584,  3608,  3601,  3613,   826,  1658,   526,
    3607,  1659,   913,   555,  1551,  1660,  1661,  3609,  3618,  3620,
     694,  3622,  2913,  3147,  3625,  3626,  3630,  3632,  3631,  3641,
     910,  3647,  3638,  3648,  3660,  3657,  3662,  3265,   920,  -691,
    3664,  1478,  1479,   801,  3669,  3674,  1199,   802,  1669,  3681,
    3680,   901,  3682,  -691,  3683, -2159,  3686,  3688,  -691,  3693,
    3694,  3703,  3731,   803, -2159, -2159, -2159,  3705,  1984,  1985,
    1986,  1987,  1988,  1989,  3695,  3741,  3707,  3744,  3746,   656,
    1671,  3708,  3749,  3752,  3754,  3779,  3767,  3742,  3771,  3743,
    2702,  3790,    25,    26,    27,  1515,  3772,    83,  3807,  3810,
    3798,  2416,  3812,  2716,  2717,  2719,  3818,  1236,  3821,  3822,
    3838,  -691,  3831,  1237,  1201,  1858,  2968,  1978,  2730,  2659,
    3833,  2733,  1249,  3264,    83,  2288,  2738,    83,  2183,   559,
    2351,  2701,  -691,  2972,  2753,  3319,  3041,  1017,   556,  1552,
    1979,  3678,  1250,  3786,  3316,  3697,   534,  3442,  3740,  3747,
     534,  3780,  3486,  1551,  1800,   534,   706,  2641,    32,  2666,
    3061,   534,   534,  3738,  2937,  3745,   534,   534,   534,  3023,
    3736,   534,  2637,  1868,   534,   534,  2902, -2159,   534,  3333,
    -691,   534,   534,   762,  1639,   555,  1251,  1925,   766,  -691,
    1903,   901,  2403,   555,  1937,  3611, -2159,    37,  3561,  2901,
    3701, -2159,  3659,  1515,  3805,   903,  1088,  3590,  1959,  1972,
    1980,  3839,  3019,  1973,  1974,  3302,  1238,  1975,  1976,  1977,
    3360,  3843,  3462,  3844,   910,  3751,  3830,  3820,  3813,  3842,
      39,  3658,  1024,  2865,  2784,  2785,  2786,   534,  2595,   647,
   -2159,    42,   534,   534,   534,   534,   534,  2596,  3535,  1551,
    1551,  1551,  1551,  1551,  1551,  1551,  3636,    43,   913,  1551,
    1551,  3365,  3803,  2874,  1551,  3804,  2852,  1551,  2627,  1577,
    1551,  1551,  1551,  1551,  1551,  1551,  1551,  1551,  1551,  1551,
    1727,    44,  2613,  1578,  1252,  2253,  1772,  2778,   765,  3706,
    1771,  2623,  2221,  3621,  1680,   689,   555,  3508,  2252,   649,
    1776,   555,  2599,  3115,  2493,   901,  3347,  1040,  1026,  1544,
    3341,  2772,  2771,  3713,  2802,  3448,  1916,  3624,  2492,  2411,
    1532,  1534,  1712,  1538,  3623,  3766,  1539,   555,  2522,  3835,
    2808,  2616,  2506,  2020,  1253,  2523,  2500,  2818,  3209,   790,
       0,  -691,  1254,  3461,     0,  2182,     0,   555,   555,     0,
       0,     0,   901,     0,  1255,     0,     0,     0,     0,     0,
       0,     0,     0,   694,   901,     0,     0,     0,   694,     0,
    1799,     0,     0,     0,   555,     0,  1239,     0,     0,  2909,
       0,     0,     0,     0,     0,     0,  1256,     0,   694,     0,
       0,  3497,     0,     0,   901,  1088, -2159,   910,  1972,   903,
       0,   901,  1973,  1974,     0,     0,  1975,  1976,  1977,   801,
       0,  1551,     0,   802,     0,   555,  1044,     0,     0,  1044,
       0,   556,  1979,  1981,  1982,  1983,   556,  1984,  1985,  1986,
    1987,  1988,  1989,     0,  2670,     0,  2290,   901,     0,     0,
    1241,   901,  1258,  3459,  3460,     0,     0,   901,     0,   654,
      83,     0,   556,     0,     0,     0,     0,     0,  1551,  1551,
       0,     0,     0,  3047,     0,  1259,  3052,     0,     0,     0,
    2291,     0,   556,   556,  1551,     0,  1551,     0,  1551,  2698,
     526,     0,     0,     0,     0,     0,  1261,     0,  1639,     0,
       0,     0,  1980,     0,     0,     0,     0,  2712,  3214,   556,
       0,     0,     0,     0, -2159,   694,     0,     0,     0,     0,
       0,  1687,  1688,  1689,  1690,  1691,  1692,     0,     0,     0,
    3594,     0,     0,  3598,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  3088,  3089,  3090,  3091,     0,
     556,     0,     0,  1243,     0,   694,     0,     0,     0,     0,
     656,     0,     0,     0,     0,     0,     0,     0,     0,  1515,
     910,     0,     0,     0,     0,     0,     0,  2754,     0,  2755,
       0,     0,   903,  2760,     0,  2763,     0,     0,     0,  3558,
    2130,  3560,     0,  3333,     0,     0,     0,     0,  2249,     0,
     910,   910,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1551,     0,     0,     0,   910,     0,     0,  1551,
       0,  1979,  1551,  1551,     0,     0,     0,     0,     0,     0,
     904,  1551,     0,  1551,  1551,     0,     0,     0,  1551,     0,
    3603,     0,     0,     0,     0,     0,  3497,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  3606,     0,   706,     0,
    3610,     0,     0,     0,     0,     0,     0,  1970,  1971,     0,
       0,     0,     0,  1991,     0,     0,     0,     0,     0,     0,
       0,     0,   694,     0,  1799,     0,     0,   534,    83,    83,
       0,  1980,   534,     0,     0,   534,   913,   913,     0,  3497,
     913,     0,   534,     0,   654,     0,     0,     0,  2015,     0,
       0,     0,  3252,     0,     0,  1981,  1982,  1983,     0,  1984,
    1985,  1986,  1987,  1988,  1989,     0,  1551,  1551,     0,   893,
    1551,   534,   534,   534,  1551,   526,     0,  1551,  1551,  1006,
     694,    21,     0,   555,     0,   903,     0,  3750,  1088,  3594,
       0,  1972,     0,   901,     0,  1973,  1974,   654,     0,  1975,
    1976,  1977,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1799,   534,   534,   534,   903,   903,  3134,  3497,     0,
       0,     0,   534,     0,     0,     0,     0,     0,   526,     0,
       0,   903,     0,     0,     0,   534,   534,     0,     0,     0,
     534,   534,     0,     0,     0,   656,  2130,     0,  1551,  1551,
       0,     0,  1551,     0,   534,   534,   534,   910,  3791,     0,
    1249,     0,     0,     0,    83,     0,    83,     0,   534,   534,
       0,   534,   694,     0,  3013,     0,   654,     0,     0,   913,
    1250,     0,     0,     0,     0,   534,     0,     0,  3748,     0,
       0,   534,     0,     0,  3594,     0,     0,     0,   656,     0,
       0,     0,  2204,  2698,     0,     0,     0,   526,   556,  1088,
       0,     0,  1972,     0,  3559,    83,  1973,  1974,     0,  3826,
    1975,  1976,  1977,     0,  1251,     0,    25,    26,    27,     0,
       0,    83,     0,   694,     0,    83,     0,     0,  3777,     0,
       0,     0,     0,     0,  1981,  1982,  1983,   694,  1984,  1985,
    1986,  1987,  1988,  1989,   555,     0,     0,     0,   534,     0,
       0,   534,   694,     0,     0,     0,     0,     0,     0,     0,
       0,   904,     0,     0,     0,     0,     0,   656,     0,     0,
     901,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1354,     0,    32,  1396,  2961,     0,     0,   910,     0,  1705,
    1930,   534,  1931,     0,  1979,     0,     0,     0,   534,   534,
     534,   534,     0,     0,     0,     0, -1892,     0,     0,     0,
       0,     0,  1252,   534,   906,     0,     0,     0,     0,     0,
       0,    37,   903,     0,     0,     0,     0,     0,   907,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  3153,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    39,     0,     0,     0,     0,     0,
     893,     0,  1253,     0,  1980,    42,     0,     0,     0,   556,
    1254,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    43,  1255,     0,     0,  3047,     0,     0,     0,     0,
    3471,     0,     0,     0,     0,     0,     0,     0,     0,  1396,
       0,   910,     0,     0,   901,    44, -1892,     0,     0,     0,
    3495,     0,     0,    83,  1256,  1979,     0,     0,     0,   689,
       0,  2431,  2432,  2433,  2434,  2435,  2436,     0,     0,  2440,
    2441,  2442,  2443,  2444,  2445,  2446,  2447,  2448,  2449,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   910,     0,
       0,     0,     0,     0, -1892,   904,     0,     0,     0,     0,
     910,     0,   903,    83,     0,     0,     0,     0, -1892,     0,
    1258,     0,     0, -1892,     0,     0,     0,   901, -1892,     0,
       0,     0,     0,     0,     0,  1980,     0,     0,     0, -1892,
     910,  1006,     0,  1259, -1892,     0,     0,   910,     0,     0,
       0,   762,   901,   534,   534,     0,   534,     0,     0,     0,
       0,     0,     0,     0,  1261,   534,   534,     0,     0,     0,
       0,   534,     0,     0,     0,     0, -1892,  3565,  1658,     0,
       0,  1659,     0,   910,     0,  1660,  1661,   910,     0,  1664,
    1665,  1666,     0,   910,   534,     0,  3298, -1892,     0,     0,
       0,   534,  1006,  1396,   893,     0,     0,  1667,     0,   901,
       0,   534,     0,     0,     0,     0,     0,  3602,  1669,  1515,
       0,     0,  2527,  2528,     0,  1670,   903,  1981,  1982,  1983,
       0,  1984,  1985,  1986,  1987,  1988,  1989,  2260,     0,     0,
       0,     0,     0,     0,     0, -1892,     0,  2269, -1892,  2272,
    1671,  1051,  2283,     0, -1892,     0,     0,  1052,  2287,   534,
    2289,  1354,     0,     0,     0,   906,     0,     0,     0,     0,
       0,     0,  2296,   903,     0,     0,     0,  2299,   904,   907,
       0,  2304,  2305,  2306,  2307,   903,  2311,  2312,  2361,     0,
       0,  3301,     0,  3363,     0,     0, -1892,     0,     0,     0,
       0,     0,     0,     0,  1006,  1006,   534,     0,    21,   534,
       0,    21,     0,     0,  1053,   903,     0,     0,     0,     0,
   -1892,     0,   903,   534,   534,     0,   762,     0,     0,     0,
    1088,   534,     0,  1972,     0,     0,     0,  1973,  1974,     0,
       0,  1975,  1976,  1977,  3687,     0,     0,  1672,  1981,  1982,
    1983,   901,  1984,  1985,  1986,  1987,  1988,  1989,   903,  3135,
       0,     0,   903,   534,   534,     0,  1673,     0,   903,     0,
       0,  1674,     0,     0,     0,     0,   534,   893,   696,     0,
       0,     0,     0,     0,     0,   901,  1054,     0,     0,     0,
       0,     0,     0,   534,  1675,  1676,  1224,   534,     0,     0,
       0,   534,  3730,     0,     0,     0, -1892,     0,     0,     0,
    1677,     0,     0,     0,     0,  3013, -1892,     0,     0,     0,
       0,     0,     0,     0,  1055,     0,  3171,  3172,  3173,  3174,
       0,     0,     0,     0,     0, -1892,     0, -1892, -1892,     0,
    1056,   904,     0,     0,     0,     0,     0,  1678,     0,     0,
    1679,  1057,     0,    25,    26,    27,    25,    26,    27,   906,
       0,     0,     0,   901,  1680,     0,     0,  1681,     0,     0,
       0,   904,   904,   907, -1892,     0,     0, -1892, -1892, -1892,
       0,     0,     0,  1058,     0,     0,     0,   904,  1396,   910,
       0,     0,     0,     0,  3047,     0,     0,  1396,     0,     0,
       0,     0,     0,  1658,     0,  1225,  1659,     0,     0,     0,
    1660,  1661,  1662,  1663,  1664,  1665,  1666,     0,     0,    32,
       0,  1396,    32,     0,     0,     0,     0,     0,     0,     0,
    1059,     0,  1667,   534,     0,   534,     0,  1060,     0,     0,
     893,   534,     0,  1669,     0,     0,  1979,     0,     0,     0,
    1670,     0,   534,     0,     0,  3047,     0,   901,    37,     0,
       0,    37,     0,     0,     0,     0,  1682,     0,     0,  3834,
     893,   893,     0,     0,     0,  1671,     0,     0,     0,     0,
    1061,     0,     0,   534,  3840,     0,   893,     0,   534,     0,
       0,    39,     0,     0,    39,     0,     0,  1062,  3586,     0,
       0,     0,    42,     0,     0,    42,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1980,     0,    43,   534,
    1354,    43,   534,     0,   534,   534,     0,   534,   534,  1930,
       0,     0,   906,     0,  1006,     0,     0,     0,     0,     0,
    2832,  2833,    44,     0,     0,    44,   907,     0,     0,     0,
       0,  1354,     0,     0,   534,   901,   689,     0,     0,   689,
       0,     0,     0,     0,   903,     0,     0,     0,  1063,     0,
    1946,     0,  1672,  1226,  1683,     0,   910,  1684,  1685,  1686,
       0,  1687,  1688,  1689,  1690,  1691,  1692,     0,   904,     0,
       0,  1673,     0,     0,     0,     0,  1674,     0,   534,     0,
     534,   534,     0,     0,     0,     0,     0,     0,   534,     0,
       0,     0,     0,     0,     0,  1947,     0,     0,     0,  1675,
    1676,     0,  3377,  3378,  3379,  3380,  3381,  3382,  3383,   534,
       0,   534,  3388,  3389,  1948,  1677,     0,  3398,     0,     0,
    3400,     0,     0,  3407,  3408,  3409,  3410,  3411,  3412,  3413,
    3414,  3415,  3416,     0,     0,  1949,   534,     0,     0,  1950,
       0,   534,     0,     0,     0,     0,     0,     0,     0,   909,
       0,     0,  1678,     0,     0,  1679,  1354,     0,     0,     0,
       0,  1951,     0,     0,  1952,     0,     0,   893,     0,  1680,
       0,     0,  1681,     0,     0,   906,  1354,     0,     0,   534,
       0,     0,  1953,     0,  2727,     0,  3013,     0,     0,   907,
     910,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   906,   906,     0,   904,  1981,
    1982,  1983,  1396,  1984,  1985,  1986,  1987,  1988,  1989,   907,
     907,   906,     0,     0,     0,     0,     0,     0,   534,  3363,
     534,   903,   534,     0,     0,   907,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  3079,     0,   534,   534,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   910,     0,     0,     0,     0,     0,     0,
       0,  1682,     0,     0,     0,  1954,     0,     0,     0,     0,
       0,     0,     0,  1955,     0,   534,     0,   534,   910,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   534,   534,     0,  1956,     0,     0,   893,     0,   901,
       0,     0,   534,   534,   534,   534,  1354,   534,  1354,     0,
       0,     0,   904,   534,     0,   534,     0,  3549,     0,  3552,
       0,  3554,     0,     0,  1957,     0,   534,   534,     0,     0,
       0,   534,   534,     0,     0,   910,   534,   534,   534,   534,
       0,   534,   534,     0,     0,     0,     0,     0,     0,     0,
    1396,     0,     0,     0,     0,   903,     0,     0,     0,   904,
       0,     0,     0,   534,   534,   534,   534,     0,     0,  1683,
     534,   904,  1684,  1685,  1686,     0,  1687,  1688,  1689,  1690,
    1691,  1692,     0,     0,   534,     0,     0,     0,     0,  1088,
    1396,     0,  3175,     0,     0,     0,  2509,  3176,     0,     0,
     901,   904,     0,     0,     0,     0,     0,     0,   904,  3246,
       0,   893,   906,     0,     0,     0,   901,     0,     0,     0,
       0,     0,     0,     0,     0,  1354,   907,     0,   903,  3183,
       0,     0,  1396,     0,     0,     0, -2159,     0,     0,     0,
     909,  1006,     0,     0,   904,     0,  2917,  2918,   904,     0,
       0,     0,  3642,   903,   904,  3645,  3646,     0,   893,     0,
       0,  3185,     0,     0,  3650,     0,     0,     0,     0,     0,
     893,  3656,     0,     0,  2970,     0,     0,   910,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  3024,
    3025,  3026,  3027,  3028,  3029,  3030,  3031,  3032,  3033,     0,
     893,     0, -1894,     0,     0,     0,     0,   893,     0,   534,
     903,   910,     0,     0,  1249,     0,     0,     0,     0,     0,
       0,   534,     0,     0,     0,     0,     0,  3539,     0,     0,
       0,     0,     0,     0,  1250,     0,     0,     0,     0,     0,
       0,   534,     0,   893,     0,     0,   534,   893,  3320,  1006,
       0,  1396,   906,   893,     0,     0,     0,     0, -2159,  3719,
    3720,     0,     0,  3721,     0,     0,   907,  3724,     0,     0,
    3727,  3728,     0,     0,     0,     0,     0, -2159,  1251,  2959,
       0,     0, -2159,     0,     0,     0,     0,  2960,     0,   910,
       0,   534,     0,     0,     0,   534,     0,     0,     0,     0,
     534,     0, -1894,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0, -2159,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   909,     0,     0,     0,     0,   534,
       0,  3774,  3775,     0,     0,  3776,  1088,     0,  2961,  1972,
   -1894,     0,   903,  1973,  1974,     0,     0,  1975,  1976,  1977,
       0,     0,     0,  1354, -1894,     0,   906,     0,     0, -1894,
       0,     0,     0,     0, -1894,  1980,  1252,     0,     0,     0,
     907,     0,     0,   910,   534, -1894,   903,     0,     0,     0,
   -1894,     0,     0,     0,     0,   762,     0,     0,     0,     0,
       0,   534,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   906,     0,     0,     0,     0,     0,     0,
       0,     0, -1894,     0,     0,   906,  1253,   907,     0,     0,
       0,     0,     0,     0,  1254,     0,     0,     0,     0,   907,
       0,   534,     0, -1894,     0,     0,  1255,   534,     0,  2962,
     904,     0,     0,  3245,     0,   906,     0,     0,     0,     0,
       0,     0,   906,   534,   903,     0,     0,     0,     0,   907,
       0, -1908,     0,  1354,  1354,  1354,   907, -2159,  1256,     0,
       0,   910,     0,     0,     0,     0,     0,     0,     0,     0,
       0, -1894,     0,     0, -1894,     0,     0,     0,   906,     0,
   -1894,     0,   906,     0,     0,     0,     0,   909,   906,     0,
       0,     0,   907,     0,     0,     0,   907,  1396,     0,     0,
       0,     0,   907,     0,     0,     0,     0,   534,     0,     0,
       0,     0,     0,   534,  1258,     0,     0,     0,     0,     0,
       0,     0, -1894,     0,     0,   534,   534,   534,   534,   893,
       0,     0,     0,  3537,  3538,     0,     0,  1259,   903,   534,
       0,   534, -2159,     0,   534,     0, -1894,     0,     0,   534,
       0, -1908,     0,     0,     0,     0,     0,     0,  1261,     0,
    2963,     0,   534,  2964,     0, -2159,     0,     0,     0,     0,
       0,     0,  3200,  3201,  3202,  3203,  3204,  3205,     0,   534,
       0,     0,     0,     0,     0,  1006,     0,     0,     0,     0,
       0,  1354,     0,     0,     0,     0,     0,   534,   534, -1908,
     534,     0,     0,     0,   696,     0,     0,     0,     0,     0,
       0,     0,  1980, -1908,     0,     0,     0,   904, -1908,     0,
       0,     0,     0, -1908,     0,     0,     0,     0,     0,     0,
       0,     0, -1894,     0, -1908,     0,   903,     0,     0, -1908,
       0,     0, -1894,     0,     0,     0,     0,     0,     0,   534,
     909,     0,     0,     0,     0,     0,     0,   534,   534,   534,
       0, -1894,     0, -1894, -1894,     0,   534,     0,     0,   534,
       0, -1908,  1810,     0,     0,   534,     0,  3637,     0,     0,
     909,   909,     0,     0,     0,     0,     0,     0,     0,     0,
     534,     0, -1908,     0,     0,     0,   909,     0,  3652,  3653,
   -1894,     0,     0, -1894, -1894, -1894,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   893,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1088,     0,     0,  1972,
       0,     0,     0,  1973,  1974,   910,     0,  1975,  1976,  1977,
   -1908,     0,     0, -1908,     0,     0,     0,  3445,     0, -1908,
       0,   904,     0,     0,     0,  3643,     0,     0,     0,     0,
       0,     0,   762,   762,     0,     0,     0,  3452,  3453,   762,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     534,     0,     0,     0,   906,     0,   534,     0,     0,     0,
       0, -1908,     0,     0,  3475,     0,     0,     0,   907,     0,
       0,     0,   534,     0,     0,     0,   534,     0,     0,     0,
     534,   534,   534,     0,     0, -1908,   534,   534,   534,     0,
     534,     0,     0,     0,   904,  1981,  1982,  1983,     0,  1984,
    1985,  1986,  1987,  1988,  1989,     0,   910,     0,     0,   534,
       0,   534,     0,     0,     0,     0,     0,  1354,     0,   904,
    3016,  1354,   910,  1354,   534,   534,   534,   534,   534,   534,
     534,   534,   534,   534,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   696,     0,     0,     0,     0,     0,     0,
       0,     0,   534,     0,     0,     0,   534,     0,     0,   534,
    1051,     0,     0,     0,     0,     0,  1052,   909,     0,   534,
       0, -1908,     0,     0,     0,     0,   904,     0,     0,     0,
     903, -1908,     0,     0,     0,   534,     0,     0,     0,     0,
       0,     0,     0,   893,     0,     0,     0,     0,     0,     0,
   -1908,     0, -1908, -1908,   534,     0,     0,     0,     0,     0,
       0,     0,  1979,     0,     0,     0,     0,     0,   893,     0,
       0,   534,     0,  1053,     0,     0,     0,     0,   534,   534,
     534,   534,     0,     0,     0,     0,     0,     0,     0, -1908,
       0,   906, -1908, -1908, -1908,     0,     0,   534,   534,     0,
       0,     0,     0,     0,     0,   907,     0,     0,     0,     0,
       0,     0,     0,   534,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   893,     0,     0,     0,     0,
       0,   903,  1980,     0,     0,     0,     0,     0,  1396,     0,
       0,     0,     0,   534,     0,  1054,     0,   903,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   909,     0,     0,
     535,     0,     0,     0,   535,     0,     0,     0,   904,   535,
       0,     0,     0,     0,     0,   535,   535,     0,     0,     0,
     535,   535,   535,  1055,     0,   535,     0,     0,   535,   535,
       0,     0,   535,     0,   534,   535,   535,     0,   534,  1056,
       0,     0,   904,     0,   534,     0,     0,     0,     0,     0,
    1057,     0,     0,     0,     0,     0,     0,     0,   534,     0,
       0,     0,     0,     0,   534,   906,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   534,   534,   907,
     560,     0,  1058,     0,     0,   534,     0,     0,     0,     0,
       0,   535,     0,     0,     0,     0,   535,   535,   535,   535,
     535,     0,   534,     0,  2034,     0,     0,   893,     0,     0,
       0,   909,     0,  3732,     0,     0,     0,     0,     0,     0,
     904,     0,     0,     0,     0,     0,     0,     0,     0,  1059,
       0,     0,     0,     0,     0,     0,  1060,   561,   906,     0,
       0,  3016,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   907,   562,     0,     0,     0,     0,   909,     0,
       0,     0,     0,   906,     0,     0,     0,     0,     0,     0,
     909,     0,     0,     0,     0,     0,     0,   907,     0,  1061,
     534,     0,     0,     0,     0,  1981,  1982,  1983,     0,  1984,
    1985,  1986,  1987,  1988,  1989,   534,  1062,     0,     0,     0,
     909,     0,     0,   563,     0,     0,     0,   909,     0,   534,
       0,     0,     0,   564,   904,  1006,     0,     0,     0,   893,
     906,     0,     0,     0,     0,   565,     0,     0,     0,     0,
     566,     0,     0,     0,   907,     0,     0,     0,     0,     0,
       0,     0,     0,   909,   534,     0,     0,   909,     0,     0,
     534,     0,     0,   909,  1396,     0,     0,     0,   534,     0,
       0,   567,     0,     0,     0,     0,     0,  1063,  1658,     0,
       0,  1659,  2035,     0,     0,  1660,  1661,     0,     0, -2159,
   -2159, -2159,     0,     0,     0,   534,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   762,     0,     0,   568,     0,     0,  1669,   569,
       0,     0,   904,   893,     0,  1670,     0,     0,     0,     0,
       0,     0,     0,   534,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1658,     0,     0,  1659,     0,     0,
    1671,  1660,  1661,  1662,  1663,  1664,  1665,  1666,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   534,   906,  1667,     0,     0,   534,  1051,     0,     0,
       0,     0,     0,  1052,  1669,     0,   907,     0,   570,     0,
       0,  1670,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   534,     0,   571,   572,   906,     0,     0,     0,
    1658,     0,     0,  1659,     0,     0,  1671,  1660,  1661,     0,
     907,  3016,   534,   534,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   762,   534,   573,
    1053,     0,   574,   534,     0,   534,     0,  1672,     0,   534,
    1669,   575,     0,     0,   576,     0,     0, -2159,     0,     0,
       0,     0,     0,   534,     0,     0,  1673,     0,     0,     0,
       0,  1674,  1051,     0,   577,     0,     0,     0,  1052,     0,
       0,     0,  1671,     0,   906,     0,     0,     0,   578,     0,
     534,   534,     0,     0,   534,   579,     0,     0,   907,     0,
       0,     0,     0,     0,     0,   580,     0,     0,     0,     0,
    1677,   581,  1054,  1672,     0,     0,   762,   762,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1673,     0,     0,  1053,     0,  1674,     0,   582,
       0,   535,     0,     0,     0,     0,   535,     0,  2529,   535,
    1055,     0,     0,     0,     0,     0,   535,     0,     0,   909,
    1675,  1676,     0,     0,  1680,     0,  1056,     0,     0,     0,
       0,     0,     0,   534,     0,     0,  1677,  1057,   906, -2159,
     534,     0,  1354,   895,     0,   535,   535,   535,     0,     0,
       0,     0,   907,  1008,     0,     0,   904,     0, -2159,     0,
       0,     0,     0, -2159,     0,     0,     0,  1054,     0,  1058,
       0,     0,     0,  1678,   762,     0,  1679,   762,     0,     0,
     534,     0,     0,     0,     0,     0,   535,   535,   535,     0,
    1680,  1227,     0,  1681,     0,     0,   535,     0,     0,     0,
       0,     0, -2159,     0,     0,  1055,     0,     0,     0,   535,
     535,     0,     0,     0,   535,   535,  1059,     0,   534,     0,
       0,  1056,     0,  1060,     0,     0,  1682,     0,   535,   535,
     535,     0,  1057,     0,     0,     0,   906,     0,     0,     0,
       0,     0,   535,   535,     0,   535,     0,     0,     0,     0,
     907,     0,     0,     0,     0,   893,  1680,   904,     0,   535,
       0,     0,     0,     0,  1058,   535,  1061,     0,     0,     0,
       0,     0,     0,   904,     0,     0,     0,  1658,     0,     0,
    1659,     0,     0,  1062,  1660,  1661,     0,     0,  1664,  1665,
    1666,     0,  1682,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   909,   534,     0,   534,
       0,  1059,     0,     0,     0,     0,     0,  1669,  1060,     0,
       0,   534,   534,     0,  1670,   534,     0,     0,     0,     0,
       0,     0,   535,   534,  1683,   535,     0, -2159, -2159, -2159,
       0,  1687,  1688,  1689,  1690,  1691,  1692,   762,   762,  1671,
       0,     0,     0,     0,  1063,     0,   893,     0, -2159,     0,
       0,  1061,     0,     0,  1357,   534,     0,  1398,   534,     0,
       0,     0,  3016,     0,  1354,   535,     0,     0,  1062,     0,
       0,     0,   535,   535,   535,   535,     0,     0,     0,     0,
       0,   762,     0,   762,     0,     0,   534,   535,     0,     0,
    1683,     0,     0,  1684,  1685,  1686,   -45,  1687,  1688,  1689,
    1690,  1691,  1692,     0,     0,     0,     0,     0,     0,     0,
    1965,     0,     0,     0,     0,     0,     0,     0,     1,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     2,
     909,     3,     4,     0,   895,     0,  1672,     0,     0,  1063,
       0,     0,     0,     0,     0,     5,     0,   534,     0,     0,
       6,     0,   762,     0,   534,  1673, -2159,     0,     0,     7,
    1674,     0,     0,  1687,  1688,  1689,  1690,  1691,  1692,   762,
     762,     8,     0,  1398,     0,     0,     0,   534,     0,     0,
       0,     0,     9,  1675,  1676,     0,     0,     0,   762,     0,
       0,     0,     0,     0,    10,     0,    11,     0,     0,  1677,
     906,     0,     0,   909,     0,     0,     0,    12,   534,     0,
       0,     0,     0,   762,   907,     0,     0,     0,     0,     0,
       0,    13,   534,    14,     0,     0,     0,     0,   909,   534,
       0,     0,    15,     0,     0,     0,  1678,   534,     0,  1679,
      16,     0,     0,     0,     0,     0,     0,     0,    17,     0,
      18,    19,     0,  1680,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    20,  1008,     0,     0,    21,     0,
       0,     0,     0,     0,     0,     0,     0,   535,   535,     0,
     535,     0,     0,     0,     0,   909,     0,     0,     0,   535,
     535,     0,     0,     0,     0,   535,    22,     0,     0,     0,
       0,   906,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    23,     0,     0,   907,     0,   906,   535,     0,
       0,     0,     0,     0,     0,   535,  1008,  1398,   895,     0,
       0,   907,     0,     0,     0,   535,     0,     0,     0,    24,
       0,     0,     0,     0,  1658,     0,     0,  1659,     0,     0,
       0,  1660,  1661,     0,     0,  1682,     0,     0,     0,     0,
    1657,     0,     0,     0,     0,  1658,     0,     0,  1659,     0,
       0,     0,  1660,  1661,  1662,  1663,  1664,  1665,  1666,     0,
       0,     0,     0,   535,  1669,  1357,     0,     0,     0,     0,
       0, -2159,     0,     0,  1667,     0,     0,     0,     0,  1668,
       0,     0,     0,     0,     0,  1669,     0,     0,     0,     0,
       0,     0,  1670,    25,    26,    27,  1671,     0,     0,     0,
       0,    28,     0,     0,    29,     0,     0,   909,  1008,  1008,
     535,  1088,     0,   535,  1972,     0,     0,  1671,  1973,  1974,
       0,     0,  1975,  1976,  1977,     0,     0,   535,   535,     0,
       0,     0,     0,     0,     0,   535,    30,     0,     0,     0,
    3644,   909,     0,  1683,     0,    31,  1684,  1685,  1686,     0,
    1687,  1688,  1689,  1690,  1691,  1692,     0,     0,     0,    32,
       0,     0,  2539,     0,     0,     0,    33,   535,   535,     0,
       0,    34,     0,     0,     0,     0,     0,     0,     0,     0,
     535,   895,    35,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0, -2159,    36,     0,     0,   535,    37,     0,
       0,   535,     0,     0,     0,   535,     0,     0,     0,     0,
       0,     0, -2159,     0,  1672,     0,     0, -2159,    38,   909,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    39,     0,  1673,    40,     0,     0,    41,  1674,     0,
       0,     0,    42,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0, -2159,     0,    43,     0,
       0,  1675,  1676,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1677,     0,     0,
       0,     0,    44,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1398,     0,     0,     0,    45,     0,     0,   -45,
       0,  1398,     0,     0,     0,     0,     0,     0,     0,     0,
    1680,     0,     0,   909,  1678,     0,     0,  1679,     0,     0,
       0,     0,     0,     0,     0,  1398,     0,  1979,     0,     0,
       0,  1680,     0,     0,  1681,     0,     0,   535,     0,   535,
       0,     0,     0,     0,   895,   535,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   535,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   895,   895,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   535,     0,     0,
     895,     0,   535,     0,     0,     0,     0,  1980,     0,     0,
       0,     0,     0,     0,     0,     0,  1658,     0,     0,  1659,
       0,   909, -2159,  1660,  1661,  1662,  1663,  1664,  1665,  1666,
       0,     0,     0,   535,  1357,     0,   535,     0,   535,   535,
       0,   535,   535,  1682,     0,  1667,     0,     0,  1008,     0,
    2815,     0,     0,     0,     0,     0,  1669,     0,     0,     0,
       0,     0,     0,  1670,     0,  1357,     0,     0,   535,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1671,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   535,     0,   535,   535,     0,     0,     0,     0,
       0,     0,   535,     0,     0,     0,     0,     0,     0,     0,
   -2159,     0,     0,     0,     0,     0,     0,  1687,  1688,  1689,
    1690,  1691,  1692,   535,     0,   535,     0,     0,     0,     0,
       0,  1683,     0,     0,  1684,  1685,  1686,     0,  1687,  1688,
    1689,  1690,  1691,  1692,     0,     0,     0,     0,     0,     0,
     535,     0,     0,     0,     0,   535,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1672,     0,     0,     0,     0,
    1357,  1658,     0,     0,  1659,     0,     0,     0,  1660,  1661,
       0,   895,     0,     0,  1673,     0,     0,     0,     0,  1674,
    1357,     0,     0,   535,     0,     0,     0,     0,     0,     0,
    1981,  1982,  1983,     0,  1984,  1985,  1986,  1987,  1988,  1989,
       0,  1669,  1675,  1676,     0,     0,     0,     0, -2159,     0,
       0,     0,     0,     0,     0,     0,  1398,     0,  1677,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   535,  1671,   535,     0,   535,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   535,   535,     0,     0,  1678,     0,     0,  1679,     0,
       0,     0,     0,     0,     0,   909,     0,     0,     0,     0,
       0,     0,  1680,     0,     0,  1681,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   535,
       0,   535,     0,     0,     0,     0,     0,     0,     0,  2831,
       0,     0,     0,     0,     0,   535,   535,     0,     0,     0,
       0,   895,     0,     0,     0,     0,   535,   535,   535,   535,
    1357,   535,  1357,     0,     0,     0,     0,   535,     0,   535,
   -2159,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     535,   535,     0,     0,     0,   535,   535,     0,     0, -2159,
     535,   535,   535,   535, -2159,   535,   535,     0,     0,     0,
       0,     0,     0,     0,  1398,     0,   909,     0,     0,     0,
       0,     0,     0,     0,  1682,     0,     0,   535,   535,   535,
     535,     0,   909,     0,   535,     0,     0,     0,     0,     0,
       0,     0,     0, -2159,     0,     0,     0,     0,   535,     0,
       0,     0,  1658,     0,  1398,  1659,     0,     0,     0,  1660,
    1661,  1662,  1663,  1664,  1665,  1666,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   895,     0,     0,     0,     0,
       0,  1667,     0,     0,     0,     0,     0,     0,     0,  1357,
       0,     0,  1669,     0,     0,     0,  1398,  1680,  1088,  1670,
       0,  3175,     0,     0,     0,  1008,  3176,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1658,     0,
       0,  1659,   895,     0,  1671,  1660,  1661,  1662,  1663,  1664,
    1665,  1666,  1683,     0,   895,  1684,  1685,  1686,  3183,  1687,
    1688,  1689,  1690,  1691,  1692, -2159,     0,  1667,     0,  2099,
       0,     0,     0,     0,     0,     0,     0,     0,  1669,     0,
       0,     0,     0,     0,   895,  1670,     0,     0,     0,     0,
    3185,   895,     0,   535,     0,     0,     0,     0,     0,     0,
    1658,     0,     0,  1659,     0,   535,     0,  1660,  1661,     0,
    1671,  1664,  1665,  1666,     0,     0,     0,     0,     0, -2159,
       0,     0,     0,     0,     0,   535,     0,   895,     0,  1667,
     535,   895,     0,  1008,     0,  1398,     0,   895,     0,     0,
    1669,  1672,     0,     0,     0,     0,     0,  1670,     0,  1553,
       0,  1088,     0,     0,  1972,     0,  3548,     0,  1973,  1974,
    1673,     0,  1975,  1976,  1977,  1674,     0,     0,     0,     0,
       0,     0,  1671,     0,     0,   535,     0,     0,     0,   535,
    3725,     0,     0,     0,   535,     0,     0, -2159,  1675,  1676,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1677,     0, -2159,  1672,     0,     0,
       0, -2159,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   535,     0,     0,  1673, -2159,     0,     0,
       0,  1674,     0,     0,  1687,  1688,  1689,  1690,  1691,  1692,
       0,  1678,     0,     0,  1679,     0,     0,  1357,     0,     0,
   -2159,     0,     0,     0,  1675,  1676,     0,     0,  1680,     0,
       0,  1681,     0,     0,     0,     0,     0,     0,   535,  1672,
    1677,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   535,     0,     0,  1673,     0,
       0,     0,     0,  1674,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1980,     0,     0,  1678,     0,     0,
    1679,     0,     0,     0,     0,     0,  1675,  1676,     0,     0,
       0,     0,     0,     0,  1680,   535,     0,  1681,     0,     0,
       0,   535,  1677,     0,  1768,     0,     0,     0,     0,     0,
       0,     0,     0,  1553,     0,     0,     0,   535,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1357,  1357,  1357,
    1682,     0,     0,     0,     0,     0,     0,  1979,     0,  1678,
       0,     0,  1679,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1680,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1398,     0,     0,     0,     0, -2159,     0,     0,     0,
       0,   535,  1088,     0,     0,  1972,     0,   535,     0,  1973,
    1974,     0,     0,  1975,  1976,  1977,  1682,     0,     0,   535,
     535,   535,   535,   895,     0,     0,     0,  1980,     0,     0,
       0,  3726,     0,   535,     0,   535,     0,  1658,   535,     0,
    1659,     0,     0,   535,  1660,  1661,     0,     0,  1664,  1665,
    1666,     0,     0,     0,     0,     0,   535,     0,  1683,     0,
       0,  1684,  1685,  1686,     0,  1687,  1688,  1689,  1690,  1691,
    1692,     0,     0,   535,     0,  2099,     0,  1669,  1682,  1008,
       0,     0,     0,     0,  1670,  1357,     0,     0,     0,     0,
       0,   535,   535,     0,   535,     0,     0,     0,  1658,     0,
       0,  1659,     0,     0, -2159,  1660,  1661,     0,     0,  1671,
       0,  3200,  3201,  3202,  3203,  3204,  3205,     0,     0,     0,
       0,     0,     0,     0,  1683,     0,     0,  1684,  1685,  1686,
       0,  1687,  1688,  1689,  1690,  1691,  1692,     0,  1669,     0,
       0,  2425,     0,   535,     0, -2159,     0,     0,     0,     0,
       0,   535,   535,   535,     0,     0,     0,     0,     0,     0,
     535,     0,     0,   535,     0,     0,     0,     0,     0,   535,
    1671,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   535,     0,  1683,     0,     0,  1684,
    1685,  1686,     0,  1687,  1688,  1689,  1690,  1691,  1692,     0,
       0,     0,     0,     0,     0,     0,  1672,     0,     0,     0,
     895,     0,     0,     0,     0,     0,     0,     0,  1979,     0,
       0,     0,     0,     0,     0,  1673,     0,     0,     0,     0,
    1674,     0,     0,     0,     0,     0,  2834,     0,     0,     0,
    1981,  1982,  1983,     0,  1984,  1985,  1986,  1987,  1988,  1989,
       0,     0,     0, -2159, -2159,     0,     0,  1553,  1553,     0,
       0,     0,     0,  1553,     0,     0,     0, -2159,     0,  1677,
       0,     0,     0,     0,   535,     0,     0,     0,     0,     0,
     535,     0,     0,     0,     0,     0, -2159,     0,  1980,     0,
       0, -2159,     0,     0,     0,     0,   535,     0,     0,     0,
     535,     0,     0,     0,   535,   535,   535,     0,     0, -2159,
     535,   535,   535,     0,   535,     0,     0,     0,     0,     0,
       0,     0,     0,  1680,     0,     0,     0,     0,     0,     0,
   -2159,     0,     0,   535,     0,   535,     0,     0,     0,     0,
       0,  1357,     0,     0,  3018,  1357,     0,  1357,   535,   535,
     535,   535,   535,   535,   535,   535,   535,   535,     0,  1658,
       0,     0,  1659,     0,     0,     0,  1660,  1661,  1662,  1663,
    1664,  1665,  1666,     0,     0,     0,   535,     0,     0,     0,
     535,     0,     0,   535,  1680,     0,     0,     0,  1667,     0,
       0,     0,     0,   535,  1191,     0,     0,     0,     0,  1669,
       0,     0,     0,     0,     0,     0,  1670,     0,     0,   535,
       0,     0,     0,     0,     0,     0,     0,   895,     0,     0,
       0,     0,     0,     0,     0,  1682,     0,     0,   535,     0,
       0,  1671,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   895,     0,     0,   535,     0,     0,     0,     0,
       0,     0,   535,   535,   535,   535,     0,     0,     0,     0,
    2223,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   535,   535,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0, -2159,   535,     0,     0,
       0,     0,     0,  1275,     0,     0,     0,  1399,     0,   895,
       0,  1981,  1982,  1983,     0,  1984,  1985,  1986,  1987,  1988,
    1989,     0,  1398,     0,     0,     0,     0,   535,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1672,     0,
       0,     0,     0,  1683,     0,     0,  1684,  1685,  1686,     0,
    1687,  1688,  1689,  1690,  1691,  1692,     0,  1673,     0,     0,
       0,     0,  1674,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   535,     0,
       0,     0,   535,     0,     0,  1675,  1676,     0,   535,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1677,   535,     0, -2159,     0,     0,     0,   535,     0,
       0,  1687,  1688,  1689,  1690,  1691,  1692,     0,     0,     0,
       0,   535,   535,  1503,     0,     0,     0,     0,     0,   535,
       0,     0,     0,     0,     0,     0,     0,     0,  1678,     0,
       0,  1679,     0,     0,     0,     0,   535,     0,     0,     0,
       0,   895,     0,     0,     0,  1680,     0,     0,  1681,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  3018,     0,     0,     0,     0,
       0,  1553,  1553,  1553,  1553,  1553,  1553,     0,     0,  1553,
    1553,  1553,  1553,  1553,  1553,  1553,  1553,  1553,  1553,     0,
       0,     0,     0,     0,     0,  1088,     0,     0,  3175,     0,
       0,  1527,  1191,  3176,   535,     0, -2159, -2159, -2159,  1545,
       0,     0,  1547,     0,     0,  1558,  1561,  1566,  1569,   535,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   535,     0,  3183,     0,  1682,     0,  1008,
       0,     0,  3184,   895,     0,     0,     0,     0,     0,     0,
       0,     0,  1658,     0,     0,  1659,     0,  1399,     0,  1660,
    1661,  1662,  1663,  1664,  1665,  1666,     0,  3185,   535,     0,
       0,     0,     0,     0,   535,     0,     0,  1622,  1398,     0,
       0,  1667,   535,     0,     0,     0,  1658,     0,     0,  1659,
       0,     0,  1669,  1660,  1661,  1627,     0,     0,     0,  1670,
       0,     0,     0,     0,     0,     0,  1630,  1631,  1632,   535,
    1636,  1640,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1553,  1553,  1671,     0,  1669,     0,     0,     0,
       0,     0,     0, -2159,     0,     0,     0,   895,     0,     0,
       0,  1701,     0,     0,     0,  1683,     0,   535,  1684,  1685,
    1686,     0,  1687,  1688,  1689,  1690,  1691,  1692,  1671,     0,
       0,     0,  2508,     0,  3186,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  3187,     0,   535,     0,     0,  3188,     0,
     535,     0,     0,  1746,     0,     0,     0,  1762,  1767,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1191,     0,     0,     0,   535,     0,     0,     0,
       0,  1672,     0,     0,  2835,     0,     0,  3191,     0,     0,
       0,     0,     0,     0,     0,  3018,   535,   535,     0,     0,
    1673,     0,     0,     0,  1553,  1674,     0,     0,     0,     0,
       0,     0,   535,  1088,     0, -2159,  3175,   535,     0,   535,
       0,  3176,     0,   535,  3179,  3180,  3181,     0,  1675,  1676,
       0,     0,     0,     0, -2159,     0,     0,   535,     0, -2159,
       0,  1980,  3182,     0,  1677,     0,     0,     0,     0,     0,
       0,     0,     0,  3183,     0,     0,     0,     0,     0,  1088,
    3184,     0,  3175,     0,   535,   535,     0,  3176,   535,     0,
    3179,  3180,  3181,     0,     0,     0,     0,     0, -2159,     0,
       0,  1678,     0,     0,  1679,  3185,     0,     0,  3182,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1680,  3183,
       0,  1681,  1399,     0,     0,  1658,  3184,     0,  1659,     0,
       0,  1399,  1660,  1661,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  3185,  1680,     0,     0,  1399,     0,     0,     0,     0,
       0,     0,     0,  3195,     0,  1669,     0,   535,     0,     0,
       0,     0, -2159,     0,   535,     0,  1357,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1671,  1191,     0,
       0,     0,  3186,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   535,     0,     0,     0,     0,     0,
    1682,  3187,     0,     0,     0,     0,  3188,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  3186,  3189,
    3190,     0,   535,     0, -2159,     0,     0,     0,     0,     0,
       0,     0,     0,  3138,     0,  3191,     0,  3187,     0,     0,
       0,  3196,  3188,     0, -2159, -2159, -2159,     0,  3200,  3201,
    3202,  3203,  3204,  3205,     0,     0,     0,     0,     0,   895,
       0,  1962,     0,     0, -2159,  3189,  3190,     0,     0,     0,
       0,     0,  3192,     0,     0,  3193,     0,     0,     0,     0,
       0,  3191,     0, -2159,     0,     0,     0,     0, -2159,  1980,
    1553,  1553,  3194,     0,  1566,  1191,  1566,  1566,  1683,     0,
       0,  1684,  1685,  1686,     0,  1687,  1688,  1689,  1690,  1691,
    1692,   535,     0,   535,     0,  2525,     0,     0,  3192,     0,
       0,  3193,     0,     0,     0,   535,   535, -2159,     0,   535,
       0,     0, -2159,     0,     0,  1980,     0,   535,     0,  1687,
    1688,  1689,  1690,  1691,  1692,  2885,     0,     0,     0,     0,
       0,  1191,  1191,     0,     0,     0,  2067,     0,  2068,     0,
     895,  1191,     0,     0,     0,     0,     0,     0,     0,   535,
       0,     0,   535,     0,     0,     0,  3018,     0,  1357,     0,
       0,  1680,     0,     0,  1191,     0,  2107,     0,     0,     0,
       0,  3195,  2111,  2112,  2113,  2114,  2115,  2116,  2117,  2118,
     535,     0,     0,     0,  2127,  2128,     0,     0,     0,  2139,
       0,     0,     0,  2142,     0,     0,  2150,  2151,  2152,  2153,
    2154,  2155,  2156,  2157,  2158,     0,     0,  2159,     0,     0,
       0,     0,     0,     0,     0,     0,  1399,  3195,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  2185,     0,     0,
       0,   535,     0,     0,     0,     0,     0,     0,   535,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0, -2159,     0,     0,     0,     0,     0,     0,
       0,   535,     0,     0,     0,  1631,  1632,     0,  1555,  3196,
       0,     0,  3197,  3198,  3199,     0,  3200,  3201,  3202,  3203,
    3204,  3205,     0,     0,     0,  1553,     0,     0,     0,     0,
       0,     0,   535,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   535,     0,     0,     0,
    3109,     0,     0,   535,     0,  3196,     0,     0,  3197,  3198,
    3199,   535,  3200,  3201,  3202,  3203,  3204,  3205,     0,     0,
       0,     0,     0,     0,  3127,     0,     0,     0,     0,     0,
       0,  1088,     0,     0,  3175,     0,     0,     0,     0,  3176,
    2314,     0,     0,     0,  1399,     0,     0,  2324,  2325,     0,
       0, -2159,     0,     0,     0,     0,     0,     0,  1687,  1688,
    1689,  1690,  1691,  1692,     0,     0,     0,     0,     0,     0,
       0,  3183,     0,     0,  1088,  1695,     0,  3175, -2159,     0,
       0,     0,  3176,     0,  1399,  3179,  3180,  3181,  2885,  2885,
    2885,  2885,  1191,     0,     0,     0,  1088,     0,     0,  3175,
       0,     0,     0,  3185,  3176,     0,     0,  3179,  3180,  3181,
       0,     0,     0,     0,  3183,     0,     0,     0,  1695,     0,
       0,  3184,     0,     0,     0,     0,  1503,  2404,     0,     0,
       0,     0,     0,     0,     0,     0,  3183,     0,     0,     0,
       0,     0,     0,  3184,     0,     0,  3185,     0,     0,  1553,
       0,     0,  1555,     0,     0,     0,  2426,  2427,     0,  2428,
       0,     0,     0,     0,  1658,     0,     0,  1659,  3185,  3651,
       0,  1660,  1661,  1662,  1663,  1664,  1665,  1666,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  2454,  2455,
       0,     0,  2185,  1667,     0,     0,     0,     0,     0,  1191,
   -2159,     0,  1695,     0,  1669,     0,     0,     0,     0,     0,
       0,  1670,     0,     0,     0,     0,     0,     0,     0, -2159,
       0,  2482,     0,     0, -2159,     0,  2487,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1671,     0,     0,     0,
       0,     0,     0,  3186,     0,  1399,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  2504,     0,     0,     0,
       0,     0,  3187, -2159,     0,  3186,     0,  3188,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  3187,     0,     0,  2517,  1553,  3188,
    3189,  3190,  2520,  2521,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  3191,     0,     0,     0,
       0,     0, -2159, -2159,     0,     0,     0,  1980,     0,     0,
       0,  1191,     0,     0,     0,     0,  1695,     0,  3191,     0,
       0,     0,     0,  1672,     0,  2541,     0,     0,  2544,     0,
    2546,     0,     0,  3192,     0,     0,  3193,     0,     0,     0,
       0,     0,  1673,     0,     0,     0,  2550,  1674,     0,     0,
    1980,     0,     0,  1191,     0,     0,     0,     0, -2159,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1675,  1676,  1980,     0,  2885,  2885,  2885,  2885,  2885,  2885,
    2885,     0,     0,     0,  2885,  2885,  1677,     0,     0,  2885,
       0,     0,  2885,     0,  1746,  2885,  2885,  2885,  2885,  2885,
    2885,  2885,  2885,  2885,  2885,     0,     0,     0,     0, -2159,
       0,  1767,  2157,     0,     0,     0,     0,     0,     0,     0,
    1695,     0,     0,  1678,     0,     0,  1679,     0,     0,     0,
       0,     0,  1554,     0,     0,     0,     0,     0,     0,  2635,
    1680,     0,     0,  1681,  1695,     0,     0,     0,     0,     0,
       0,     0,  3195,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1695,     0,  1695,     0,  1555,  1555,     0,  1990,
       0,     0,  1555,     0,  3195,  1695,     0,     0,  1695,     0,
       0,     0,     0,  1695,     0,     0,  1695,     0,     0,     0,
       0,     0,     0,     0,     0,  1632,     0,     0,     0,     0,
       0,  1399,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0, -2159,     0,     0,
       0,     0,     0,     0,  3200,  3201,  3202,  3203,  3204,  3205,
       0,     0,     0,     0,     0,     0,  3514,     0,     0,  1695,
       0,     0,  1682,     0,  1695,     0,     0,  1695,  1695,  1695,
       0,  2736,     0,  1695,     0,     0,     0,  1695,     0,     0,
    3196,     0,     0,  3197,  3198,  3199,     0,  3200,  3201,  3202,
    3203,  3204,  3205,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  3196,  1553,  1553,  3197,  3198,  3199,     0,  3200,
    3201,  3202,  3203,  3204,  3205,     0,     0,     0,     0,  2885,
       0,  2885,     0,  2885,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1695,     0,
       0,     0,     0,     0,     0,     0,  1554,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1683,     0,     0,  1684,  1685,  1686,     0,  1687,  1688,  1689,
    1690,  1691,  1692,  1695,     0,     0,     0,  2765,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1088,  1695,
       0,  3175,     0,     0,  1695,     0,  3176,  2805,     0,     0,
       0,  2807,  2068,     0,     0,     0,     0,     0,  2811,     0,
       0,  1990,     0,     0,     0,     0,     0,     0,  2820,     0,
       0,  2823,     0,  2825,     0,     0,     0,     0,  3183,     0,
       0,  2829,     0,     0,     0, -2159,     0,  1553,     0,  2836,
    2837,     0,     0,     0,  2885,     0,  2844,  2885,  2885,     0,
       0,     0,     0,     0,     0,     0,  2885,     0,  1553,  1553,
    3185,  1658,     0,  2885,  1659,     0,     0,     0,  1660,  1661,
    1662,  1663,  1664,  1665,  1666,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1667,     0,  2888,     0,     0,     0,     0,     0,     0,     0,
       0,  1669,  2903,     0,     0,     0,     0,     0,  1670,     0,
       0,     0,     0,     0,  1088,     0,     0,  3175,     0,     0,
       0,     0,  3176,     0,     0,     0,  3654,     0,     0,     0,
       0,     0,     0,  1671,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  2885,  2885,     0,  3183,  2885,     0, -2159,     0,  2885,
       0, -2159,  2885,  2885,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0, -2159,     0,  2314,     0,
    2314, -2159,     0,     0,     0,     0,  3185,     0,     0,  1695,
       0,     0,     0,     0,     0,     0,     0,  1990,  1990,     0,
    1555,  1555,  1555,  1555,  1555,  1555,     0,     0,  1555,  1555,
    1555,  1555,  1555,  1555,  1555,  1555,  1555,  1555,  1990,     0,
   -2159,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1672,     0,     0,  2885,  2885,     0,     0,  2885,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1673,
       0,     0,  3655,     0,  1674,     0,     0,     0,     0,     0,
    1554,  1554,     0,     0,     0,     0,  1554,     0,     0,     0,
       0,     0,     0,     0,  1980,     0,     0,  1675,  1676,  3104,
    3105,     0,     0, -2159,     0,     0,     0,     0,     0,  1088,
       0,     0,  3175,  1677,  1695,  1695,  3122,  3176,     0,     0,
       0,     0, -2159,     0,     0,     0,     0, -2159,  3126,     0,
       0,     0,     0,  3128,  3129,     0,     0,     0,  3130,     0,
       0,     0,     0,  3133,     0,     0,  3136,  3137,     0,  3183,
    1678,  2314,  1399,  1679,  1695,  3145, -2159,     0,  1695,  1695,
    1695,  1695,  1695,  1695,  1695,  1695, -2159,  1680,     0,     0,
    1681,  1555,  1555,     0,  1695,  1695,     0,     0,     0,     0,
       0,  3185,     0,     0,     0,     0,  1695,     0,     0,  1695,
       0,     0,     0,     0,     0,     0, -2159,  1695,  1695,  1695,
    1695,  1695,  1695,  1695,  1695,  1695,  1695,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1980,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  2172,  1695,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  3240,     0,  3729,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1682,
       0,     0,  3259,     0,     0,     0,     0,     0, -2159,     0,
       0,     0,     0,  1554,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1555,     0,     0,     0, -2159,     0,     0,
       0,     0, -2159,     0, -2159,     0,     0,     0,     0,     0,
       0,  3200,  3201,  3202,  3203,  3204,  3205,     0,     0,     0,
       0,     0, -2159,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0, -2159,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  3288,     0,
       0,  1695,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1695,  1695,     0,     0,     0,     0,  1683,     0,     0,
    1684,  1685,  1686,     0,  1687,  1688,  1689,  1690,  1691,  1692,
       0,     0,     0,     0,  2817,  1980,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1640,     0,
       0,     0,     0,     0,  1658,     0,     0,  1659,     0,     0,
       0,  1660,  1661,  1662,  1663,  1664,  1665,  1666,  1399,     0,
   -2159,     0,     0,     0,     0,  2517,     0,  3200,  3201,  3202,
    3203,  3204,  3205,  1667,     0,     0,  3352,  3353,     0,     0,
    3354,  1695,  1632,     0,  1669,     0,     0,     0,     0,     0,
       0,  1670,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1695,  1695,  1695,     0,     0,  1990,  1990,
    1990,  1990,  1990,  1990,     0,     0,  1671,  1990,  1990,  1990,
    1990,  1990,  1990,  1990,  1990,  1990,  1990, -2159,     0,     0,
       0,  1695,  1695,     0,  1554,  1554,  1554,  1554,  1554,  1554,
       0,     0,  1554,  1554,  1554,  1554,  1554,  1554,  1554,  1554,
    1554,  1554,     0,     0,     0,     0,     0,     0,     0,  1695,
       0,  3428,     0,     0,  1695,     0,     0,  1658,     0,     0,
    1659,     0,     0,     0,  1660,  1661,  1662,  1663,  1664,  1665,
    1666,  1695,     0,     0,     0,  3440,     0,     0,     0,     0,
       0,     0,     0,     0,  1695,     0,  1667,  1695,  1695,     0,
       0,     0,     0,     0,  1990,  1990,     0,  1669,     0,     0,
       0,     0,     0,  1672,  1670,     0,     0,     0,  1695,  1555,
    1555,  1695,  1088,  1695,     0,  3175,     0,  1695,     0,     0,
    3176,     0,  1673,     0,     0, -2159,     0,  1674,     0,  1671,
       0,     0,  3200,  3201,  3202,  3203,  3204,  3205,     0,     0,
       0,     0,     0,     0,     0,     0,  3494,     0,     0,     0,
    1675,  1676,  3183,     0,   560,     0,     0,     0,     0, -2159,
    1191,     0,  1191,     0,  3104,     0,  1677,     0,  3511,     0,
       0,     0,     0,     0,     0,  1554,  1554,     0,     0,     0,
       0,     0,  3521,     0,  3185,     0,     0,  2314,     0,  2314,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1695,  1678,     0,     0,  1679,     0,     0,     0,
       0,   561,     0,     0,     0,     0,     0,     0,     0,     0,
    1680,     0,     0,  1681,     0,     0,  1672,   562,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1673,     0,     0,     0,     0,
    1674,     0,     0,     0,     0,  1658,     0,     0,  1659,     0,
       0,     0,  1660,  1661,  1662,  1663,  1664,  1665,  1666,     0,
       0,  3576,     0,  1675,  1676,     0,     0,   563,     0,     0,
       0, -2159,     0,     0,  1667,     0,     0,   564,     0,  1677,
       0,     0,     0,     0,     0,  1669,     0,  1554,     0,   565,
   -2159,     0,  1670,  1695,   566, -2159,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1682,     0,     0,     0,  1678,  1671,  3612,  1679,
       0,     0,     0,     0,  1555,   567,     0,     0,  3104,     0,
       0,     0,     0,  1680, -2159,     0,  1681,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1695,     0,  1695,     0,     0,     0,  1695,   568,
       0,     0,     0,   569,     0,     0,     0,  1695,     0,     0,
    1695,     0,  1695,     0,     0,     0,  1695,     0,  1980,  1990,
    1990,     0,     0,  1695,  1695,     0,     0,     0,     0,     0,
       0,  1695,     0,  3679,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1672,     0,     0,     0,     0,     0,
    1683,     0,     0,  1684,  1685,  1686,     0,  1687,  1688,  1689,
    1690,  1691,  1692,  1673,     0,  1682,     0,  2919,  1674,     0,
       0,  3206,   570,     0,     0,  1695,     0,     0,     0,     0,
       0,     0,     0,     0,  1191,     0,     0,     0,     0,   572,
    1695,  1675,  1676,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1677,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   -2159,     0,     0,   573,     0,     0,   574,     0,  1555,     0,
       0,     0,     0,     0,     0,   575,     0,     0,   576,     0,
       0,     0,     0,     0,  1678,     0,     0,  1679,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   577,     0,
       0,  1680,  3763,  3763,  1681,     0,     0,     0,     0,     0,
       0,     0,   578,  1683,     0,     0,  1684,  1685,  1686,   579,
    1687,  1688,  1689,  1690,  1691,  1692,     0,     0,     0,   580,
    3139,     0,     0,     0,     0,   581,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  3763,  1554,  1554,     0,     0,     0,     0,     0,
       0,     0,     0,   582,     0,     0,     0,     0, -2159,     0,
       0,     0,     0,     0,     0,  3200,  3201,  3202,  3203,  3204,
    3205,     0,     0,     0,     0,     0,     0,     0,     0,  1658,
       0,     0,  1659,     0,     0,     0,  1660,  1661,  1662,  1663,
    1664,  1665,  1666,  1682,     0,     0,  1990,  1555,  2886,     0,
    3763,     0,     0,     0,     0,     0,     0,     0,  1667,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1669,
       0,  1695,  1695,     0,     0,     0,  1670,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1695,
       0,     0,     0,  1695,     0,  1695,  1695,  1695,     0,     0,
    1695,  1671,     0,  1695,  1695,     0,     0,     0,     0,     0,
       0,     0,  1695,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  3206,  3206,
    3206,  3206,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1683,     0,     0,  1684,  1685,  1686,     0,  1687,  1688,
    1689,  1690,  1691,  1692,     0,     0,     0,     0,  3146,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1672,     0,
       0,     0,     0,     0,     0,     0,     0,  1695,     0,     0,
       0,     0,     0,  1990,     0,     0,     0,  1673,  1554,     0,
    1658,     0,  1674,  1659,     0,     0,  1695,  1660,  1661,  1662,
    1663,  1664,  1665,  1666,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1554,     0,  1675,  1676,     0,     0,  1667,
       0,     0,     0,     0,     0,  1695,     0,     0,     0,     0,
    1669,  1677,     0,     0,     0,     0,     0,  1670,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1990,     0,     0,
       0,     0,  1671,     0,     0,     0,     0,     0,  1678,     0,
       0,  1679,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1680,     0,     0,  1681,  1695,
    1695,  1695,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  2886,  2886,  2886,  2886,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  3206,  3206,  3206,  3206,  3206,  3206,
    3206,     0,  1555,  1555,     0,  3206,  3206,     0,     0,     0,
       0,     0,     0,     0,     0,  3206,     0,  3206,     0,     0,
       0,     0,     0,     0,  3206,  3206,  3206,  3206,  3206,  3206,
    3206,  3206,  3206,  3206,     0,     0,     0,     0,     0,  1672,
       0,     0,  1554,     0,     0,  1695,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1695,  1673,     0,
       0,     0,     0,  1674,     0,     0,     0,  1682,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1675,  1676,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1677,     0,     0,     0,     0,     0,     0,     0,
       0,  1695,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1695,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1695,  1678,
       0,     0,  1679,     0,     0,     0,  1555,     0,     0,     0,
       0,     0,     0,     0,  1990,  1990,  1680,     0,     0,  1681,
       0,     0,     0,     0,     0,     0,  3206,  1555,  1555,  3206,
       0,  3206,     0,     0,     0,  1683,     0,     0,  1684,  1685,
    1686,  1554,  1687,  1688,  1689,  1690,  1691,  1692,     0,     0,
       0,     0,  3359,  1695,  1658,     0,     0,  1659,     0,     0,
       0,  1660,  1661,  1662,  1663,  1664,  1665,  1666,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1667,     0,     0,     0,     0,     0,  1695,
       0,     0,     0,     0,  1669,     0,     0,     0,     0,     0,
       0,  1670,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1990,     0,     0,     0,  1682,  3206,
       0,     0,  3206,  3206,     0,     0,  1671,  3206,     0,  1990,
    1990,     0,     0,  3206,     0,     0,     0,  2886,  2886,  2886,
    2886,  2886,  2886,  2886,     0,     0,     0,  2886,  2886,     0,
       0,     0,  2886,     0,     0,  2886,  1695,     0,  2886,  2886,
    2886,  2886,  2886,  2886,  2886,  2886,  2886,  2886,  3417,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  3206,  3206,  3206,     0,
       0,  3206,     0,     0,  3206,  3206,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1672,     0,     0,  1683,     0,     0,  1684,
    1685,  1686,     0,  1687,  1688,  1689,  1690,  1691,  1692,     0,
    1695,     0,  1673,  3437,     0,     0,     0,  1674,     0,     0,
       0,  3206,  3206,  3206,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1675,  1676,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1677,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1554,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1678,     0,     0,  1679,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1680,     0,     0,  1681,     0,     0,  1554,  1554,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  2886,     0,  2886,     0,  2886,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1682,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1554,     0,     0,     0,     0,     0,     0,  2886,     0,     0,
    2886,  2886,     0,     0,     0,     0,     0,     0,     0,  2886,
       0,  1554,  1554,     0,     0,     0,  2886,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1683,     0,     0,  1684,  1685,  1686,     0,  1687,  1688,  1689,
    1690,  1691,  1692,     0,     0,     0,     0,  3577,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  2886,  2886,     0,     0,  2886,     0,
       0,     0,  2886,     0,     0,  2886,  2886,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   112,  1085,   658,  1086,  1087,  1088,  1089,  1090,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     113,   114,   115,   116,   117,   118,   119,   120,   121,     0,
     122,   123,   124,     0,     0,     0,  2886,  2886,   125,  1091,
    2886,     0,   126,   127,   128,     0,   129,   130,   131,   132,
     133,   134,   135,   136,  1092,   138,  1093,  1094,     0,   141,
     142,   143,   144,   145,   146,  1095,   627,   147,   148,  1096,
    1097,   151,     0,   152,   153,   154,   155,   628,     0,   629,
       0,  1098,   159,   160,   161,   162,   163,   164,   165,   166,
     167,     0,   168,   169,   170,   171,   172,   173,     0,   174,
     175,   176,   177,   178,   179,   180,   181,   182,   183,   184,
    1099,  1100,   187,  1101,   188,     0,   189,   190,   191,   192,
     193,   194,     0,   195,   196,   197,   198,   199,   200,     0,
       0,   201,   202,   853,   204,   205,   206,   207,     0,   208,
     209,   210,     0,   211,   212,   213,     0,   214,   215,   216,
     217,  1102,   219,   220,   221,   222,   223,   630,  1103,   225,
       0,   226,   227,  1104,   229,     0,   230,     0,   231,   232,
      21,   233,   234,   235,   236,   237,   238,     0,   239,   240,
       0,     0,  1105,  1106,   243,   244,     0,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,     0,
     257,   258,   259,   260,   261,   262,   263,     0,   264,   265,
     266,   267,   268,   269,   270,   271,  1107,  1108,     0,  1109,
       0,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,     0,     0,   287,   288,   289,   290,     0,
     291,   292,   293,   294,   295,   296,   297,   298,  1110,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,  1111,   319,  1112,
     321,   322,   323,   324,   325,  1113,   326,   327,   328,   329,
    1114,   633,   331,  1115,   333,   334,   335,     0,   336,   337,
       0,     0,  1116,   339,   340,     0,     0,   341,   342,   343,
     344,   345,   635,   347,   348,   349,   350,   351,   352,   353,
     354,   355,   356,   357,   358,    25,    26,    27,     0,   359,
     360,   636,   362,   363,   364,   365,   366,   367,   368,     0,
     369,   370,   371,   372,   373,   374,   375,   376,     0,   377,
     378,   379,  1117,   381,   382,   383,   384,     0,   385,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,     0,   399,   400,   401,   402,   403,   404,  1118,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,    32,     0,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,   428,   429,   430,  1119,   432,     0,
     433,   434,   435,   436,   437,   438,   439,   440,   441,   442,
     443,   444,   445,   446,   447,   638,   449,     0,   450,   451,
      37,   452,   453,   454,   455,   456,   457,   458,     0,  1120,
    1121,     0,   461,     0,   462,   463,   639,   465,   640,  1122,
     467,   468,   641,   470,   471,   472,   473,   474,     0,     0,
     475,   476,   477,    39,   478,   479,   480,   481,     0,   482,
     483,   484,   485,   486,   642,  1123,     0,   489,   490,   491,
     492,   493,   494,   495,   496,   497,     0,     0,   498,     0,
      43,   499,   500,   501,   502,   503,   504,   505,   506,   507,
     508,   509,   510,   511,   512,   513,   514,   515,   516,   517,
     518,   519,  1124,     0,    44,     0,     0,     0,     0,  1125,
    1126,  1127,     0,     0,     0,     0,  1128,     0,  1129,  3331,
       0,     0,     0,     0,  1130,  1131,     0,     0,     0,     0,
    1132,  1133,   112,  1085,   658,  1086,  1087,  1088,  1089,  1090,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   113,   114,   115,   116,   117,   118,   119,   120,   121,
       0,   122,   123,   124,     0,     0,     0,     0,     0,   125,
    1091,     0,     0,   126,   127,   128,     0,   129,   130,   131,
     132,   133,   134,   135,   136,  1092,   138,  1093,  1094,     0,
     141,   142,   143,   144,   145,   146,  1095,   627,   147,   148,
    1096,  1097,   151,     0,   152,   153,   154,   155,   628,     0,
     629,     0,  1098,   159,   160,   161,   162,   163,   164,   165,
     166,   167,     0,   168,   169,   170,   171,   172,   173,     0,
     174,   175,   176,   177,   178,   179,   180,   181,   182,   183,
     184,  1099,  1100,   187,  1101,   188,     0,   189,   190,   191,
     192,   193,   194,     0,   195,   196,   197,   198,   199,   200,
       0,     0,   201,   202,   853,   204,   205,   206,   207,     0,
     208,   209,   210,     0,   211,   212,   213,     0,   214,   215,
     216,   217,  1102,   219,   220,   221,   222,   223,   630,  1103,
     225,     0,   226,   227,  1104,   229,     0,   230,     0,   231,
     232,    21,   233,   234,   235,   236,   237,   238,     0,   239,
     240,     0,     0,  1105,  1106,   243,   244,     0,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
       0,   257,   258,   259,   260,   261,   262,   263,     0,   264,
     265,   266,   267,   268,   269,   270,   271,  1107,  1108,     0,
    1109,     0,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,     0,     0,   287,   288,   289,   290,
       0,   291,   292,   293,   294,   295,   296,   297,   298,  1110,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,  1111,   319,
    1112,   321,   322,   323,   324,   325,  1113,   326,   327,   328,
     329,  1114,   633,   331,  1115,   333,   334,   335,     0,   336,
     337,     0,     0,  1116,   339,   340,     0,     0,   341,   342,
     343,   344,   345,   635,   347,   348,   349,   350,   351,   352,
     353,   354,   355,   356,   357,   358,    25,    26,    27,     0,
     359,   360,   636,   362,   363,   364,   365,   366,   367,   368,
       0,   369,   370,   371,   372,   373,   374,   375,   376,     0,
     377,   378,   379,  1117,   381,   382,   383,   384,     0,   385,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,     0,   399,   400,   401,   402,   403,   404,
    1118,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,    32,     0,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,   427,   428,   429,   430,  1119,   432,
       0,   433,   434,   435,   436,   437,   438,   439,   440,   441,
     442,   443,   444,   445,   446,   447,   638,   449,     0,   450,
     451,    37,   452,   453,   454,   455,   456,   457,   458,     0,
    1120,  1121,     0,   461,     0,   462,   463,   639,   465,   640,
    1122,   467,   468,   641,   470,   471,   472,   473,   474,     0,
       0,   475,   476,   477,    39,   478,   479,   480,   481,     0,
     482,   483,   484,   485,   486,   642,  1123,     0,   489,   490,
     491,   492,   493,   494,   495,   496,   497,     0,     0,   498,
       0,    43,   499,   500,   501,   502,   503,   504,   505,   506,
     507,   508,   509,   510,   511,   512,   513,   514,   515,   516,
     517,   518,   519,  1124,     0,    44,     0,     0,     0,     0,
    1125,  1126,  1127,     0,     0,     0,     0,  1128,     0,  1129,
       0,     0,     0,     0,     0,  1130,  1131,     0,     0,     0,
       0,  1132,  1133,  1359,  1085,   658,  1086,  1087,  1088,  1089,
    1090,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   113,   114,   115,   116,   117,   118,   119,   120,
     121,  1360,   122,   123,   124,     0,     0,     0,  1361,     0,
     125,  1091,     0,     0,  1362,   127,   128,     0,   129,   130,
     131,  1363,   133,   134,   135,   136,  1092,  1364,  1093,  1094,
       0,   141,   142,   143,   144,   145,   146,  1095,   627,   147,
     148,  1096,  1097,   151,     0,   152,   153,   154,   155,   628,
       0,  1365,     0,  1366,   159,   160,   161,   162,   163,  1367,
     165,   166,   167,     0,   168,   169,   170,   171,   172,   173,
       0,  1368,   175,   176,   177,   178,   179,   180,   181,   182,
     183,   184,  1099,  1100,   187,  1101,   188,     0,   189,   190,
     191,   192,   193,   194,     0,   195,   196,   197,   198,   199,
     200,  1369,     0,   201,   202,   853,   204,   205,   206,   207,
       0,   208,   209,   210,     0,   211,   212,   213,     0,   214,
     215,   216,   217,  1102,   219,   220,   221,   222,   223,   630,
    1103,   225,     0,   226,   227,  1104,   229,     0,   230,     0,
     231,  1370,     0,  1371,   234,   235,  1372,  1373,   238,     0,
     239,   240,     0,     0,  1105,  1106,   243,   244,     0,   245,
     246,   247,   248,   249,   250,   251,  1374,   253,   254,   255,
     256,     0,   257,   258,   259,   260,   261,   262,   263,     0,
     264,  1375,   266,   267,   268,   269,   270,   271,  1107,  1108,
       0,  1109,     0,   275,  1376,  1377,   278,  1378,   280,   281,
     282,   283,   284,   285,   286,     0,     0,   287,  1379,   289,
    1380,     0,   291,   292,   293,   294,   295,   296,   297,   298,
    1381,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,  1111,
    1382,  1112,   321,   322,   323,   324,   325,  1113,   326,   327,
    1383,   329,  1114,   633,   331,  1115,   333,   334,   335,     0,
     336,   337,     0,     0,  1116,   339,   340,     0,     0,   341,
     342,  1384,   344,  1385,   635,   347,   348,   349,   350,   351,
     352,   353,   354,   355,   356,   357,   358,     0,     0,     0,
       0,   359,   360,   636,  1386,   363,   364,   365,   366,   367,
     368,     0,   369,   370,   371,   372,   373,   374,   375,   376,
       0,   377,   378,   379,  1117,   381,   382,   383,   384,     0,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,     0,   399,   400,  1387,   402,   403,
     404,  1118,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,     0,  1388,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,  1389,   429,   430,  1119,
     432,     0,   433,   434,   435,   436,   437,   438,   439,   440,
     441,   442,   443,   444,   445,  1390,   447,   638,   449,     0,
     450,   451,     0,   452,  1391,   454,   455,   456,   457,   458,
       0,  1120,  1121,     0,   461,     0,   462,   463,   639,   465,
     640,  1122,   467,   468,  1392,   470,   471,   472,   473,   474,
       0,     0,   475,   476,   477,     0,   478,   479,   480,   481,
       0,   482,   483,   484,   485,   486,   487,  1123,  1393,   489,
    1394,   491,   492,   493,   494,   495,   496,   497,     0,     0,
     498,     0,     0,   499,   500,   501,   502,   503,   504,   505,
     506,   507,   508,   509,   510,   511,   512,   513,   514,   515,
     516,   517,   518,   519,  1124,     0,     0,     0,     0,     0,
       0,  1125,  1126,  1127,     0,     0,     0,     0,  1128,     0,
    1129,  1395,     0,     0,     0,     0,  1130,  1131,     0,     0,
       0,     0,  1132,  1133,   112,  1085,   658,  1086,  1087,  1088,
    1089,  1090,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   113,   114,   115,   116,   117,   118,   119,
     120,   121,     0,   122,   123,   124,     0,     0,     0,     0,
       0,   125,  1091,     0,     0,   126,   127,   128,     0,   129,
     130,   131,   132,   133,   134,   135,   136,  1092,   138,  1093,
    1094,  1562,   141,   142,   143,   144,   145,   146,  1095,   627,
     147,   148,  1096,  1097,   151,     0,   152,   153,   154,   155,
     628,     0,   629,     0,  1098,   159,   160,   161,   162,   163,
     164,   165,   166,   167,     0,   168,   169,   170,   171,   172,
     173,     0,   174,   175,   176,   177,   178,   179,   180,   181,
     182,   183,   184,  1099,  1100,   187,  1101,   188,     0,   189,
     190,   191,   192,   193,   194,     0,   195,   196,   197,   198,
     199,   200,     0,     0,   201,   202,   853,   204,   205,   206,
     207,     0,   208,   209,   210,     0,   211,   212,   213,     0,
     214,   215,   216,   217,  1102,   219,   220,   221,   222,   223,
     630,  1103,   225,     0,   226,   227,  1104,   229,     0,   230,
       0,   231,   232,  1563,   233,   234,   235,   236,   237,   238,
       0,   239,   240,     0,     0,  1105,  1106,   243,   244,     0,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,     0,   257,   258,   259,   260,   261,   262,   263,
       0,   264,   265,   266,   267,   268,   269,   270,   271,  1107,
    1108,     0,  1109,     0,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,     0,  1564,   287,   288,
     289,   290,     0,   291,   292,   293,   294,   295,   296,   297,
     298,  1110,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
    1111,   319,  1112,   321,   322,   323,   324,   325,  1113,   326,
     327,   328,   329,  1114,   633,   331,  1115,   333,   334,   335,
       0,   336,   337,     0,     0,  1116,   339,   340,     0,     0,
     341,   342,   343,   344,   345,   635,   347,   348,   349,   350,
     351,   352,   353,   354,   355,   356,   357,   358,     0,     0,
       0,     0,   359,   360,   636,   362,   363,   364,   365,   366,
     367,   368,     0,   369,   370,   371,   372,   373,   374,   375,
     376,     0,   377,   378,   379,  1117,   381,   382,   383,   384,
       0,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,     0,   399,   400,   401,   402,
     403,   404,  1118,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,     0,     0,   417,   418,   419,   420,
     421,   422,   423,   424,   425,   426,   427,   428,   429,   430,
    1119,   432,     0,   433,   434,   435,   436,   437,   438,   439,
     440,   441,   442,   443,   444,   445,   446,   447,   638,   449,
       0,   450,   451,     0,   452,   453,   454,   455,   456,   457,
     458,     0,  1120,  1121,     0,   461,  1565,   462,   463,   639,
     465,   640,  1122,   467,   468,   641,   470,   471,   472,   473,
     474,     0,     0,   475,   476,   477,     0,   478,   479,   480,
     481,     0,   482,   483,   484,   485,   486,   487,  1123,     0,
     489,   490,   491,   492,   493,   494,   495,   496,   497,     0,
       0,   498,     0,     0,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,   517,   518,   519,  1124,     0,     0,     0,     0,
       0,     0,  1125,  1126,  1127,     0,     0,     0,     0,  1128,
       0,  1129,     0,     0,     0,     0,     0,  1130,  1131,     0,
       0,     0,     0,  1132,  1133,  1359,  1085,   658,  1086,  1087,
    1088,  1089,  1090,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   113,   114,   115,   116,   117,   118,
     119,   120,   121,     0,   122,   123,   124,     0,     0,     0,
    1361,     0,   125,  1091,     0,     0,  1362,   127,   128,     0,
     129,   130,   131,  1363,   133,   134,   135,   136,  1092,  1364,
    1093,  1094,     0,   141,   142,   143,   144,   145,   146,  1095,
     627,   147,   148,  1096,  1097,   151,     0,   152,   153,   154,
     155,   628,     0,  1365,     0,  1366,   159,   160,   161,   162,
     163,  1367,   165,   166,   167,     0,   168,   169,   170,   171,
     172,   173,     0,  1368,   175,   176,   177,   178,   179,   180,
     181,   182,   183,   184,  1099,  1100,   187,  1101,   188,     0,
     189,   190,   191,   192,   193,   194,     0,   195,   196,   197,
     198,   199,   200,     0,     0,   201,   202,   853,   204,   205,
     206,   207,     0,   208,   209,   210,     0,   211,   212,   213,
       0,   214,   215,   216,   217,  1102,   219,   220,   221,   222,
     223,   630,  1103,   225,     0,   226,   227,  1104,   229,     0,
     230,     0,   231,  1370,     0,  1371,   234,   235,  1372,  1373,
     238,     0,   239,   240,     0,     0,  1105,  1106,   243,   244,
       0,   245,   246,   247,   248,   249,   250,   251,  1374,   253,
     254,   255,   256,     0,   257,   258,   259,   260,   261,   262,
     263,     0,   264,  1375,   266,   267,   268,   269,   270,   271,
    1107,  1108,     0,  1109,     0,   275,  1376,  1377,   278,  1378,
     280,   281,   282,   283,   284,   285,   286,     0,     0,   287,
    1379,   289,  1380,     0,   291,   292,   293,   294,   295,   296,
     297,   298,  1381,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,  1111,  1382,  1112,   321,   322,   323,   324,   325,  1113,
     326,   327,  1383,   329,  1114,   633,   331,  1115,   333,   334,
     335,     0,   336,   337,     0,     0,  1116,   339,   340,     0,
       0,   341,   342,  1384,   344,  1385,   635,   347,   348,   349,
     350,   351,   352,   353,   354,   355,   356,   357,   358,     0,
       0,     0,     0,   359,   360,   636,  1386,   363,   364,   365,
     366,   367,   368,     0,   369,   370,   371,   372,   373,   374,
     375,   376,     0,   377,   378,   379,  1117,   381,   382,   383,
     384,     0,   385,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,     0,   399,   400,  1387,
     402,   403,   404,  1118,   406,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,     0,  1388,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,  1389,   429,
     430,  1119,   432,     0,   433,   434,   435,   436,   437,   438,
     439,   440,   441,   442,   443,   444,   445,  1390,   447,   638,
     449,     0,   450,   451,     0,   452,  1391,   454,   455,   456,
     457,   458,     0,  1120,  1121,     0,   461,     0,   462,   463,
     639,   465,   640,  1122,   467,   468,  1392,   470,   471,   472,
     473,   474,     0,     0,   475,   476,   477,     0,   478,   479,
     480,   481,     0,   482,   483,   484,   485,   486,   487,  1123,
    2319,   489,  1394,   491,   492,   493,   494,   495,   496,   497,
       0,     0,   498,     0,     0,   499,   500,   501,   502,   503,
     504,   505,   506,   507,   508,   509,   510,   511,   512,   513,
     514,   515,   516,   517,   518,   519,  1124,     0,     0,     0,
       0,     0,     0,  1125,  1126,  1127,     0,     0,     0,     0,
    1128,     0,  1129,     0,     0,     0,     0,     0,  1130,  1131,
       0,     0,     0,     0,  1132,  1133,  1359,  1085,   658,  1086,
    1087,  1088,  1089,  1090,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   113,   114,   115,   116,   117,
     118,   119,   120,   121,     0,   122,   123,   124,     0,     0,
       0,  1361,     0,   125,  1091,     0,     0,  1362,   127,   128,
       0,   129,   130,   131,  1363,   133,   134,   135,   136,  1092,
    1364,  1093,  1094,     0,   141,   142,   143,   144,   145,   146,
    1095,   627,   147,   148,  1096,  1097,   151,     0,   152,   153,
     154,   155,   628,     0,  1365,     0,  1366,   159,   160,   161,
     162,   163,  1367,   165,   166,   167,     0,   168,   169,   170,
     171,   172,   173,     0,  1368,   175,   176,   177,   178,   179,
     180,   181,   182,   183,   184,  1099,  1100,   187,  1101,   188,
       0,   189,   190,   191,   192,   193,   194,     0,   195,   196,
     197,   198,   199,   200,     0,     0,   201,   202,   853,   204,
     205,   206,   207,     0,   208,   209,   210,     0,   211,   212,
     213,     0,   214,   215,   216,   217,  1102,   219,   220,   221,
     222,   223,   630,  1103,   225,     0,   226,   227,  1104,   229,
       0,   230,     0,   231,  1370,     0,  1371,   234,   235,  1372,
    1373,   238,     0,   239,   240,     0,     0,  1105,  1106,   243,
     244,     0,   245,   246,   247,   248,   249,   250,   251,  1374,
     253,   254,   255,   256,     0,   257,   258,   259,   260,   261,
     262,   263,     0,   264,  1375,   266,   267,   268,   269,   270,
     271,  1107,  1108,     0,  1109,     0,   275,  1376,  1377,   278,
    1378,   280,   281,   282,   283,   284,   285,   286,     0,     0,
     287,  1379,   289,  1380,     0,   291,   292,   293,   294,   295,
     296,   297,   298,  1381,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,  1111,  1382,  1112,   321,   322,   323,   324,   325,
    1113,   326,   327,  1383,   329,  1114,   633,   331,  1115,   333,
     334,   335,     0,   336,   337,     0,     0,  1116,   339,   340,
       0,     0,   341,   342,  1384,   344,  1385,   635,   347,   348,
     349,   350,   351,   352,   353,   354,   355,   356,   357,   358,
       0,     0,     0,     0,   359,   360,   636,  1386,   363,   364,
     365,   366,   367,   368,     0,   369,   370,   371,   372,   373,
     374,   375,   376,     0,   377,   378,   379,  1117,   381,   382,
     383,   384,     0,   385,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,     0,   399,   400,
    1387,   402,   403,   404,  1118,   406,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,     0,  1388,   417,   418,
     419,   420,   421,   422,   423,   424,   425,   426,   427,  1389,
     429,   430,  1119,   432,     0,   433,   434,   435,   436,   437,
     438,   439,   440,   441,   442,   443,   444,   445,  1390,   447,
     638,   449,     0,   450,   451,     0,   452,  1391,   454,   455,
     456,   457,   458,     0,  1120,  1121,     0,   461,     0,   462,
     463,   639,   465,   640,  1122,   467,   468,  1392,   470,   471,
     472,   473,   474,     0,     0,   475,   476,   477,     0,   478,
     479,   480,   481,     0,   482,   483,   484,   485,   486,   487,
    1123,     0,   489,  1394,   491,   492,   493,   494,   495,   496,
     497,     0,     0,   498,     0,     0,   499,   500,   501,   502,
     503,   504,   505,   506,   507,   508,   509,   510,   511,   512,
     513,   514,   515,   516,   517,   518,   519,  1124,     0,     0,
       0,     0,     0,     0,  1125,  1126,  1127,     0,     0,     0,
       0,  1128,     0,  1129,  2367,     0,     0,     0,     0,  1130,
    1131,     0,     0,     0,     0,  1132,  1133,   112,  1085,   658,
    1086,  1087,  1088,  1089,  1090,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   113,   114,   115,   116,
     117,   118,   119,   120,   121, -1253,   122,   123,   124,     0,
       0,     0,     0, -1253,   125,  1091,     0,     0,   126,   127,
     128,     0,   129,   130,   131,   132,   133,   134,   135,   136,
    1092,   138,  1093,  1094,     0,   141,   142,   143,   144,   145,
     146,  1095,   627,   147,   148,  1096,  1097,   151,     0,   152,
     153,   154,   155,   628,     0,   629,     0,  1098,   159,   160,
     161,   162,   163,   164,   165,   166,   167,     0,   168,   169,
     170,   171,   172,   173,     0,   174,   175,   176,   177,   178,
     179,   180,   181,   182,   183,   184,  1099,  1100,   187,  1101,
     188,     0,   189,   190,   191,   192,   193,   194,     0,   195,
     196,   197,   198,   199,   200,     0,     0,   201,   202,   853,
     204,   205,   206,   207,     0,   208,   209,   210,     0,   211,
     212,   213,     0,   214,   215,   216,   217,  1102,   219,   220,
     221,   222,   223,   630,  1103,   225,     0,   226,   227,  1104,
     229,     0,   230,     0,   231,   232,     0,   233,   234,   235,
     236,   237,   238,     0,   239,   240,     0,     0,  1105,  1106,
     243,   244,     0,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,     0,   257,   258,   259,   260,
     261,   262,   263,     0,   264,   265,   266,   267,   268,   269,
     270,   271,  1107,  1108,     0,  1109,     0,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,   286,     0,
       0,   287,   288,   289,   290,     0,   291,   292,   293,   294,
     295,   296,   297,   298,  1110,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,  1111,   319,  1112,   321,   322,   323,   324,
     325,  1113,   326,   327,   328,   329,  1114,   633,   331,  1115,
     333,   334,   335,     0,   336,   337,     0,     0,  1116,   339,
     340,     0,     0,   341,   342,   343,   344,   345,   635,   347,
     348,   349,   350,   351,   352,   353,   354,   355,   356,   357,
     358,     0,     0,     0,     0,   359,   360,   636,   362,   363,
     364,   365,   366,   367,   368,     0,   369,   370,   371,   372,
     373,   374,   375,   376,     0,   377,   378,   379,  1117,   381,
     382,   383,   384,     0,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,     0,   399,
     400,   401,   402,   403,   404,  1118,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,     0,     0,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   429,   430,  1119,   432, -1253,   433,   434,   435,   436,
     437,   438,   439,   440,   441,   442,   443,   444,   445,   446,
     447,   638,   449,     0,   450,   451,     0,   452,   453,   454,
     455,   456,   457,   458,     0,  1120,  1121,     0,   461,     0,
     462,   463,   639,   465,   640,  1122,   467,   468,   641,   470,
     471,   472,   473,   474,     0,     0,   475,   476,   477,     0,
     478,   479,   480,   481,     0,   482,   483,   484,   485,   486,
     487,  1123,     0,   489,   490,   491,   492,   493,   494,   495,
     496,   497,     0,     0,   498,     0,     0,   499,   500,   501,
     502,   503,   504,   505,   506,   507,   508,   509,   510,   511,
     512,   513,   514,   515,   516,   517,   518,   519,  1124,     0,
       0,     0,     0,     0,     0,  1125,  1126,  1127,     0,     0,
       0,     0,  1128,     0,  1129,     0,     0,     0,     0,     0,
    1130,  1131,     0,     0,     0,     0,  1132,  1133,  1359,  1085,
     658,  1086,  1087,  1088,  1089,  1090,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   113,   114,   115,
     116,   117,   118,   119,   120,   121,     0,   122,   123,   124,
       0,     0,     0,  1361,     0,   125,  1091,     0,     0,  1362,
     127,   128,     0,   129,   130,   131,  1363,   133,   134,   135,
     136,  1092,  1364,  1093,  1094,     0,   141,   142,   143,   144,
     145,   146,  1095,   627,   147,   148,  1096,  1097,   151,     0,
     152,   153,   154,   155,   628,     0,  1365,     0,  1366,   159,
     160,   161,   162,   163,  1367,   165,   166,   167,     0,   168,
     169,   170,   171,   172,   173,     0,  1368,   175,   176,   177,
     178,   179,   180,   181,   182,   183,   184,  1099,  1100,   187,
    1101,   188,     0,   189,   190,   191,   192,   193,   194,     0,
     195,   196,   197,   198,   199,   200,     0,     0,   201,   202,
     853,   204,   205,   206,   207,     0,   208,   209,   210,     0,
     211,   212,   213,     0,   214,   215,   216,   217,  1102,   219,
     220,   221,   222,   223,   630,  1103,   225,     0,   226,   227,
    1104,   229,     0,   230,     0,   231,  1370,     0,  1371,   234,
     235,  1372,  1373,   238,     0,   239,   240,     0,     0,  1105,
    1106,   243,   244,     0,   245,   246,   247,   248,   249,   250,
     251,  1374,   253,   254,   255,   256,     0,   257,   258,   259,
     260,   261,   262,   263,     0,   264,  1375,   266,   267,   268,
     269,   270,   271,  1107,  1108,     0,  1109,     0,   275,  1376,
    1377,   278,  1378,   280,   281,   282,   283,   284,   285,   286,
       0,     0,   287,  1379,   289,  1380,     0,   291,   292,   293,
     294,   295,   296,   297,   298,  1381,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,  1111,  1382,  1112,   321,   322,   323,
     324,   325,  1113,   326,   327,  1383,   329,  1114,   633,   331,
    1115,   333,   334,   335,     0,   336,   337,     0,     0,  1116,
     339,   340,     0,     0,   341,   342,  1384,   344,  1385,   635,
     347,   348,   349,   350,   351,   352,   353,   354,   355,   356,
     357,   358,     0,     0,     0,     0,   359,   360,   636,  1386,
     363,   364,   365,   366,   367,   368,     0,   369,   370,   371,
     372,   373,   374,   375,   376,     0,   377,   378,   379,  1117,
     381,   382,   383,   384,     0,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,     0,
     399,   400,  1387,   402,   403,   404,  1118,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,     0,  1388,
     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
     427,  1389,   429,   430,  1119,   432,     0,   433,   434,   435,
     436,   437,   438,   439,   440,   441,   442,   443,   444,   445,
    1390,   447,   638,   449,     0,   450,   451,     0,   452,  1391,
     454,   455,   456,   457,   458,     0,  1120,  1121,     0,   461,
       0,   462,   463,   639,   465,   640,  1122,   467,   468,  1392,
     470,   471,   472,   473,   474,     0,     0,   475,   476,   477,
       0,   478,   479,   480,   481,     0,   482,   483,   484,   485,
     486,   487,  1123,     0,   489,  1394,   491,   492,   493,   494,
     495,   496,   497,     0,     0,   498,     0,     0,   499,   500,
     501,   502,   503,   504,   505,   506,   507,   508,   509,   510,
     511,   512,   513,   514,   515,   516,   517,   518,   519,  1124,
       0,     0,     0,     0,     0,     0,  1125,  1126,  1127,     0,
       0,     0,     0,  1128,     0,  1129,  3142,     0,     0,     0,
       0,  1130,  1131,     0,     0,     0,     0,  1132,  1133,  1359,
    1085,   658,  1086,  1087,  1088,  1089,  1090,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   113,   114,
     115,   116,   117,   118,   119,   120,   121,     0,   122,   123,
     124,     0,     0,     0,  1361,     0,   125,  1091,     0,     0,
    1362,   127,   128,     0,   129,   130,   131,  1363,   133,   134,
     135,   136,  1092,  1364,  1093,  1094,     0,   141,   142,   143,
     144,   145,   146,  1095,   627,   147,   148,  1096,  1097,   151,
       0,   152,   153,   154,   155,   628,     0,  1365,     0,  1366,
     159,   160,   161,   162,   163,  1367,   165,   166,   167,     0,
     168,   169,   170,   171,   172,   173,     0,  1368,   175,   176,
     177,   178,   179,   180,   181,   182,   183,   184,  1099,  1100,
     187,  1101,   188,     0,   189,   190,   191,   192,   193,   194,
       0,   195,   196,   197,   198,   199,   200,     0,     0,   201,
     202,   853,   204,   205,   206,   207,     0,   208,   209,   210,
       0,   211,   212,   213,     0,   214,   215,   216,   217,  1102,
     219,   220,   221,   222,   223,   630,  1103,   225,     0,   226,
     227,  1104,   229,     0,   230,     0,   231,  1370,     0,  1371,
     234,   235,  1372,  1373,   238,     0,   239,   240,     0,     0,
    1105,  1106,   243,   244,     0,   245,   246,   247,   248,   249,
     250,   251,  1374,   253,   254,   255,   256,     0,   257,   258,
     259,   260,   261,   262,   263,     0,   264,  1375,   266,   267,
     268,   269,   270,   271,  1107,  1108,     0,  1109,     0,   275,
    1376,  1377,   278,  1378,   280,   281,   282,   283,   284,   285,
     286,     0,     0,   287,  1379,   289,  1380,     0,   291,   292,
     293,   294,   295,   296,   297,   298,  1381,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,  1111,  1382,  1112,   321,   322,
     323,   324,   325,  1113,   326,   327,  1383,   329,  1114,   633,
     331,  1115,   333,   334,   335,     0,   336,   337,     0,     0,
    1116,   339,   340,     0,     0,   341,   342,  1384,   344,  1385,
     635,   347,   348,   349,   350,   351,   352,   353,   354,   355,
     356,   357,   358,     0,     0,     0,     0,   359,   360,   636,
    1386,   363,   364,   365,   366,   367,   368,     0,   369,   370,
     371,   372,   373,   374,   375,   376,     0,   377,   378,   379,
    1117,   381,   382,   383,   384,     0,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
       0,   399,   400,  1387,   402,   403,   404,  1118,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,     0,
    1388,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,  1389,   429,   430,  1119,   432,     0,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,  1390,   447,   638,   449,     0,   450,   451,     0,   452,
    1391,   454,   455,   456,   457,   458,     0,  1120,  1121,     0,
     461,     0,   462,   463,   639,   465,   640,  1122,   467,   468,
    1392,   470,   471,   472,   473,   474,     0,     0,   475,   476,
     477,     0,   478,   479,   480,   481,     0,   482,   483,   484,
     485,   486,   487,  1123,     0,   489,  1394,   491,   492,   493,
     494,   495,   496,   497,     0,     0,   498,     0,     0,   499,
     500,   501,   502,   503,   504,   505,   506,   507,   508,   509,
     510,   511,   512,   513,   514,   515,   516,   517,   518,   519,
    1124,     0,     0,     0,     0,     0,     0,  1125,  1126,  1127,
       0,     0,     0,     0,  1128,     0,  1129,     0,     0,     0,
       0,     0,  1130,  1131,     0,     0,     0,     0,  1132,  1133,
     112,  1085,   658,  1086,  1087,     0,  1089,  1090,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   113,
     114,   115,   116,   117,   118,   119,   120,   121,     0,   122,
     123,   124,     0,     0,     0,     0,     0,   125,  1091,     0,
       0,   126,   127,   128,     0,   129,   130,   131,   132,   133,
     134,   135,   136,  1092,   138,  1093,  1094,     0,   141,   142,
     143,   144,   145,   146,  1095,   627,   147,   148,  1096,  1097,
     151,     0,   152,   153,   154,   155,   628,     0,   629,     0,
     158,   159,   160,   161,   162,   163,   164,   165,   166,   167,
       0,   168,   169,   170,   171,   172,   173,     0,   174,   175,
     176,   177,   178,   179,   180,   181,   182,   183,   184,  1099,
    1100,   187,     0,   188,     0,   189,   190,   191,   192,   193,
     194,     0,   195,   196,   197,   198,   199,   200,     0,     0,
     201,   202,   853,   204,   205,   206,   207,     0,   208,   209,
     210,     0,   211,   212,   213,     0,   214,   215,   216,   217,
    1102,   219,   220,   221,   222,   223,   630,  1103,   225,     0,
     226,   227,  1104,   229,     0,   230,     0,   231,   232,    21,
     233,   234,   235,   236,   237,   238,     0,   239,   240,     0,
       0,  1105,  1106,   243,   244,     0,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,     0,   257,
     258,   259,   260,   261,   262,   263,     0,   264,   265,   266,
     267,   268,   269,   270,   271,  1107,  1108,     0,  1109,     0,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,     0,     0,   287,   288,   289,   290,     0,   291,
     292,   293,   294,   295,   296,   297,   298,  1110,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,  1111,   319,  1112,   321,
     322,   323,   324,   325,     0,   326,   327,   328,   329,  1114,
     633,   331,  1115,   333,   334,   335,     0,   336,   337,     0,
       0,   338,   339,   340,     0,     0,   341,   342,   343,   344,
     345,   635,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,    25,    26,    27,     0,   359,   360,
     636,   362,   363,   364,   365,   366,   367,   368,     0,   369,
     370,   371,   372,   373,   374,   375,   376,     0,   377,   378,
     379,  1117,   381,   382,   383,   384,     0,   385,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,     0,   399,   400,   401,   402,   403,   404,  1118,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
      32,     0,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,  1119,   432,     0,   433,
     434,   435,   436,   437,   438,   439,   440,   441,   442,   443,
     444,   445,   446,   447,   638,   449,     0,   450,   451,    37,
     452,   453,   454,   455,   456,   457,   458,     0,  1120,  1121,
       0,   461,     0,   462,   463,   639,   465,   640,  1122,   467,
     468,   641,   470,   471,   472,   473,   474,     0,     0,   475,
     476,   477,    39,   478,   479,   480,   481,     0,   482,   483,
     484,   485,   486,   642,  1123,     0,   489,   490,   491,   492,
     493,   494,   495,   496,   497,     0,     0,   498,     0,    43,
     499,   500,   501,   502,   503,   504,   505,   506,   507,   508,
     509,   510,   511,   512,   513,   514,   515,   516,   517,   518,
     519,     0,     0,    44,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1128,     0,  1129,     0,     0,
       0,     0,     0,  1130,  1131,     0,     0,     0,     0,  1132,
    1133,   112,  1085,   658,  1086,  1087,  1088,  1089,  1090,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     113,   114,   115,   116,   117,   118,   119,   120,   121,  1743,
     122,   123,   124,     0,     0,     0,     0,     0,   125,  1091,
       0,     0,   126,   127,   128,     0,   129,   130,   131,   132,
     133,   134,   135,   136,  1092,   138,  1093,  1094,     0,   141,
     142,   143,   144,   145,   146,  1095,   627,   147,   148,  1096,
    1097,   151,     0,   152,   153,   154,   155,   628,     0,   629,
       0,  1098,   159,   160,   161,   162,   163,   164,   165,   166,
     167,     0,   168,   169,   170,   171,   172,   173,     0,   174,
     175,   176,   177,   178,   179,   180,   181,   182,   183,   184,
    1099,  1100,   187,  1101,   188,     0,   189,   190,   191,   192,
     193,   194,     0,   195,   196,   197,   198,   199,   200,     0,
       0,   201,   202,   853,   204,   205,   206,   207,     0,   208,
     209,   210,     0,   211,   212,   213,     0,   214,   215,   216,
     217,  1102,   219,   220,   221,   222,   223,   630,  1103,   225,
       0,   226,   227,  1104,   229,     0,   230,     0,   231,   232,
       0,   233,   234,   235,   236,   237,   238,     0,   239,   240,
       0,     0,  1105,  1106,   243,   244,     0,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,     0,
     257,   258,   259,   260,   261,   262,   263,     0,   264,   265,
     266,   267,   268,   269,   270,   271,  1107,  1108,     0,  1109,
       0,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,     0,     0,   287,   288,   289,   290,     0,
     291,   292,   293,   294,   295,   296,   297,   298,  1110,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,  1111,   319,  1112,
     321,   322,   323,   324,   325,  1113,   326,   327,   328,   329,
    1114,   633,   331,  1115,   333,   334,   335,     0,   336,   337,
       0,     0,  1116,   339,   340,     0,     0,   341,   342,   343,
     344,   345,   635,   347,   348,   349,   350,   351,   352,   353,
     354,   355,   356,   357,   358,     0,     0,     0,     0,   359,
     360,   636,   362,   363,   364,   365,   366,   367,   368,     0,
     369,   370,   371,   372,   373,   374,   375,   376,     0,   377,
     378,   379,  1117,   381,   382,   383,   384,     0,   385,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,     0,   399,   400,   401,   402,   403,   404,  1118,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,     0,     0,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,   428,   429,   430,  1119,   432,     0,
     433,   434,   435,   436,   437,   438,   439,   440,   441,   442,
     443,   444,   445,   446,   447,   638,   449,     0,   450,   451,
       0,   452,   453,   454,   455,   456,   457,   458,     0,  1120,
    1121,     0,   461,     0,   462,   463,   639,   465,   640,  1122,
     467,   468,   641,   470,   471,   472,   473,   474,     0,     0,
     475,   476,   477,     0,   478,   479,   480,   481,     0,   482,
     483,   484,   485,   486,   487,  1123,     0,   489,   490,   491,
     492,   493,   494,   495,   496,   497,     0,     0,   498,     0,
       0,   499,   500,   501,   502,   503,   504,   505,   506,   507,
     508,   509,   510,   511,   512,   513,   514,   515,   516,   517,
     518,   519,  1124,     0,     0,     0,     0,     0,     0,  1125,
    1126,  1127,     0,     0,     0,     0,  1128,     0,  1129,     0,
       0,     0,     0,     0,  1130,  1131,     0,     0,     0,     0,
    1132,  1133,   112,  1758,   658,  1086,  1087,  1088,  1759,  1090,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   113,   114,   115,   116,   117,   118,   119,   120,   121,
    1760,   122,   123,   124,     0,     0,     0,     0,     0,   125,
    1091,     0,     0,   126,   127,   128,     0,   129,   130,   131,
     132,   133,   134,   135,   136,  1092,   138,  1093,  1094,     0,
     141,   142,   143,   144,   145,   146,  1095,   627,   147,   148,
    1096,  1097,   151,     0,   152,   153,   154,   155,   628,     0,
     629,     0,  1098,   159,   160,   161,   162,   163,   164,   165,
     166,   167,     0,   168,   169,   170,   171,   172,   173,     0,
     174,   175,   176,   177,   178,   179,   180,   181,   182,   183,
     184,  1099,  1100,   187,  1101,   188,     0,   189,   190,   191,
     192,   193,   194,     0,   195,   196,   197,   198,   199,   200,
       0,     0,   201,   202,   853,   204,   205,   206,   207,     0,
     208,   209,   210,     0,   211,   212,   213,     0,   214,   215,
     216,   217,  1102,   219,   220,   221,   222,   223,   630,  1103,
     225,     0,   226,   227,  1104,   229,     0,   230,     0,   231,
     232,     0,   233,   234,   235,   236,   237,   238,     0,   239,
     240,     0,     0,  1105,  1106,   243,   244,     0,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
       0,   257,   258,   259,   260,   261,   262,   263,     0,   264,
     265,   266,   267,   268,   269,   270,   271,  1107,  1108,     0,
    1109,     0,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,     0,     0,   287,   288,   289,   290,
       0,   291,   292,   293,   294,   295,   296,   297,   298,  1110,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,  1111,   319,
    1112,   321,   322,   323,   324,   325,  1113,   326,   327,   328,
     329,  1114,   633,   331,  1115,   333,   334,   335,     0,   336,
     337,     0,     0,  1116,   339,   340,     0,     0,   341,   342,
     343,   344,   345,   635,   347,   348,   349,   350,   351,   352,
     353,   354,   355,   356,   357,   358,     0,     0,     0,     0,
     359,   360,   636,   362,   363,   364,   365,   366,   367,   368,
       0,   369,   370,   371,   372,   373,   374,   375,   376,     0,
     377,   378,   379,  1117,   381,   382,   383,   384,     0,   385,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,     0,   399,   400,   401,   402,   403,   404,
    1118,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,     0,     0,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,   427,   428,   429,   430,  1119,   432,
       0,   433,   434,   435,   436,   437,   438,   439,   440,   441,
     442,   443,   444,   445,   446,   447,   638,   449,     0,   450,
     451,     0,   452,   453,   454,   455,   456,   457,   458,     0,
    1120,  1121,     0,   461,     0,   462,   463,   639,   465,   640,
    1122,   467,   468,   641,   470,   471,   472,   473,   474,     0,
       0,   475,   476,   477,     0,   478,   479,   480,   481,     0,
     482,   483,   484,   485,   486,   487,  1123,     0,   489,   490,
     491,   492,   493,   494,   495,   496,   497,     0,     0,   498,
       0,     0,   499,   500,   501,   502,   503,   504,   505,   506,
     507,   508,   509,   510,   511,   512,   513,   514,   515,   516,
     517,   518,   519,  1124,     0,     0,     0,     0,     0,     0,
    1125,  1126,  1127,     0,     0,     0,     0,  1128,     0,  1129,
       0,     0,     0,     0,     0,  1130,  1131,     0,     0,     0,
       0,  1132,  1133,   112,  1085,   658,  1086,  1087,  1088,  1089,
    1090,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   113,   114,   115,   116,   117,   118,   119,   120,
     121,     0,   122,   123,   124,     0,     0,     0,     0,     0,
     125,  1091,     0,     0,   126,   127,   128,     0,   129,   130,
     131,   132,   133,   134,   135,   136,  1092,   138,  1093,  1094,
       0,   141,   142,   143,   144,   145,   146,  1095,   627,   147,
     148,  1096,  1097,   151,     0,   152,   153,   154,   155,   628,
       0,   629,     0,  1098,   159,   160,   161,   162,   163,   164,
     165,   166,   167,     0,   168,   169,   170,   171,   172,   173,
       0,   174,   175,   176,   177,   178,   179,   180,   181,   182,
     183,   184,  1099,  1100,   187,  1101,   188,     0,   189,   190,
     191,   192,   193,   194,     0,   195,   196,   197,   198,   199,
     200,     0,     0,   201,   202,   853,   204,   205,   206,   207,
       0,   208,   209,   210,     0,   211,   212,   213,     0,   214,
     215,   216,   217,  1102,   219,   220,   221,   222,   223,   630,
    1103,   225,     0,   226,   227,  1104,   229,     0,   230,     0,
     231,   232,  1563,   233,   234,   235,   236,   237,   238,     0,
     239,   240,     0,     0,  1105,  1106,   243,   244,     0,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,     0,   257,   258,   259,   260,   261,   262,   263,     0,
     264,   265,   266,   267,   268,   269,   270,   271,  1107,  1108,
       0,  1109,     0,   275,   276,   277,   278,   279,   280,   281,
     282,   283,   284,   285,   286,     0,     0,   287,   288,   289,
     290,     0,   291,   292,   293,   294,   295,   296,   297,   298,
    1110,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,  1111,
     319,  1112,   321,   322,   323,   324,   325,  1113,   326,   327,
     328,   329,  1114,   633,   331,  1115,   333,   334,   335,     0,
     336,   337,     0,     0,  1116,   339,   340,     0,     0,   341,
     342,   343,   344,   345,   635,   347,   348,   349,   350,   351,
     352,   353,   354,   355,   356,   357,   358,     0,     0,     0,
       0,   359,   360,   636,   362,   363,   364,   365,   366,   367,
     368,     0,   369,   370,   371,   372,   373,   374,   375,   376,
       0,   377,   378,   379,  1117,   381,   382,   383,   384,     0,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,     0,   399,   400,   401,   402,   403,
     404,  1118,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,     0,     0,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,   428,   429,   430,  1119,
     432,     0,   433,   434,   435,   436,   437,   438,   439,   440,
     441,   442,   443,   444,   445,   446,   447,   638,   449,     0,
     450,   451,     0,   452,   453,   454,   455,   456,   457,   458,
       0,  1120,  1121,     0,   461,     0,   462,   463,   639,   465,
     640,  1122,   467,   468,   641,   470,   471,   472,   473,   474,
       0,     0,   475,   476,   477,     0,   478,   479,   480,   481,
       0,   482,   483,   484,   485,   486,   487,  1123,     0,   489,
     490,   491,   492,   493,   494,   495,   496,   497,     0,     0,
     498,     0,     0,   499,   500,   501,   502,   503,   504,   505,
     506,   507,   508,   509,   510,   511,   512,   513,   514,   515,
     516,   517,   518,   519,  1124,     0,     0,     0,     0,     0,
       0,  1125,  1126,  1127,     0,     0,     0,     0,  1128,     0,
    1129,     0,     0,     0,     0,     0,  1130,  1131,     0,     0,
       0,     0,  1132,  1133,   112,  1085,   658,  1086,  1087,  1088,
    1089,  1090,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   113,   114,   115,   116,   117,   118,   119,
     120,   121,     0,   122,   123,   124,     0,     0,     0,     0,
       0,   125,  1091,     0,     0,   126,   127,   128,     0,   129,
     130,   131,   132,   133,   134,   135,   136,  1092,   138,  1093,
    1094,     0,   141,   142,   143,   144,   145,   146,  1095,   627,
     147,   148,  1096,  1097,   151,     0,   152,   153,   154,   155,
     628,     0,   629,     0,  1098,   159,   160,   161,   162,   163,
     164,   165,   166,   167,     0,   168,   169,   170,   171,   172,
     173,     0,   174,   175,   176,   177,   178,   179,   180,   181,
     182,   183,   184,  1099,  1100,   187,  1101,   188,     0,   189,
     190,   191,   192,   193,   194,     0,   195,   196,   197,   198,
     199,   200,     0,     0,   201,   202,   853,   204,   205,   206,
     207,     0,   208,   209,   210,     0,   211,   212,   213,     0,
     214,   215,   216,   217,  1102,   219,   220,   221,   222,   223,
     630,  1103,   225,     0,   226,   227,  1104,   229,     0,   230,
       0,   231,   232,     0,   233,   234,   235,   236,   237,   238,
       0,   239,   240,     0,     0,  1105,  1106,   243,   244,     0,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,     0,   257,   258,   259,   260,   261,   262,   263,
       0,   264,   265,   266,   267,   268,   269,   270,   271,  1107,
    1108,     0,  1109,     0,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,     0,     0,   287,   288,
     289,   290,     0,   291,   292,   293,   294,   295,   296,   297,
     298,  1110,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
    1111,   319,  1112,   321,   322,   323,   324,   325,  1113,   326,
     327,   328,   329,  1114,   633,   331,  1115,   333,   334,   335,
       0,   336,   337,     0,     0,  1116,   339,   340,     0,     0,
     341,   342,   343,   344,   345,   635,   347,   348,   349,   350,
     351,   352,   353,   354,   355,   356,   357,   358,     0,     0,
       0,     0,   359,   360,   636,   362,   363,   364,   365,   366,
     367,   368,     0,   369,   370,   371,   372,   373,   374,   375,
     376,     0,   377,   378,   379,  1117,   381,   382,   383,   384,
       0,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,     0,   399,   400,   401,   402,
     403,   404,  1118,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,     0,     0,   417,   418,   419,   420,
     421,   422,   423,   424,   425,   426,   427,   428,   429,   430,
    1119,   432,     0,   433,   434,   435,   436,   437,   438,   439,
     440,   441,   442,   443,   444,   445,   446,   447,   638,   449,
       0,   450,   451,     0,   452,   453,   454,   455,   456,   457,
     458,     0,  1120,  1121,     0,   461,     0,   462,   463,   639,
     465,   640,  1122,   467,   468,   641,   470,   471,   472,   473,
     474,     0,     0,   475,   476,   477,     0,   478,   479,   480,
     481,     0,   482,   483,   484,   485,   486,   487,  1123,     0,
     489,   490,   491,   492,   493,   494,   495,   496,   497,     0,
       0,   498,     0,     0,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,   517,   518,   519,  1124,     0,     0,     0,     0,
       0,     0,  1125,  1126,  1127,     0,     0,     0,     0,  1128,
       0,  1129,  2091,     0,     0,     0,     0,  1130,  1131,     0,
       0,     0,     0,  1132,  1133,   112,  1085,   658,  1086,  1087,
    1088,  1089,  1090,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   113,   114,   115,   116,   117,   118,
     119,   120,   121,     0,   122,   123,   124,     0,     0,     0,
       0,     0,   125,  1091,     0,     0,   126,   127,   128,     0,
     129,   130,   131,   132,   133,   134,   135,   136,  1092,   138,
    1093,  1094,     0,   141,   142,   143,   144,   145,   146,  1095,
     627,   147,   148,  1096,  1097,   151,     0,   152,   153,   154,
     155,   628,     0,   629,     0,  1098,   159,   160,   161,   162,
     163,   164,   165,   166,   167,     0,   168,   169,   170,   171,
     172,   173,     0,   174,   175,   176,   177,   178,   179,   180,
     181,   182,   183,   184,  1099,  1100,   187,  1101,   188,     0,
     189,   190,   191,   192,   193,   194,     0,   195,   196,   197,
     198,   199,   200,     0,     0,   201,   202,   853,   204,   205,
     206,   207,     0,   208,   209,   210,     0,   211,   212,   213,
       0,   214,   215,   216,   217,  1102,   219,   220,   221,   222,
     223,   630,  1103,   225,     0,   226,   227,  1104,   229,     0,
     230,     0,   231,   232,     0,   233,   234,   235,   236,   237,
     238,     0,   239,   240,     0,     0,  1105,  1106,   243,   244,
       0,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,     0,   257,   258,   259,   260,   261,   262,
     263,     0,   264,   265,   266,   267,   268,   269,   270,   271,
    1107,  1108,     0,  1109,     0,   275,   276,   277,   278,   279,
     280,   281,   282,   283,   284,   285,   286,     0,     0,   287,
     288,   289,   290,     0,   291,   292,   293,   294,   295,   296,
     297,   298,  1110,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,  1111,   319,  1112,   321,   322,   323,   324,   325,  1113,
     326,   327,   328,   329,  1114,   633,   331,  1115,   333,   334,
     335,     0,   336,   337,     0,     0,  1116,   339,   340,     0,
       0,   341,   342,   343,   344,   345,   635,   347,   348,   349,
     350,   351,   352,   353,   354,   355,   356,   357,   358,     0,
       0,     0,     0,   359,   360,   636,   362,   363,   364,   365,
     366,   367,   368,     0,   369,   370,   371,   372,   373,   374,
     375,   376,     0,   377,   378,   379,  1117,   381,   382,   383,
     384,     0,   385,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,     0,   399,   400,   401,
     402,   403,   404,  1118,   406,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,     0,     0,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,   428,   429,
     430,  1119,   432,     0,   433,   434,   435,   436,   437,   438,
     439,   440,   441,   442,   443,   444,   445,   446,   447,   638,
     449,     0,   450,   451,     0,   452,   453,   454,   455,   456,
     457,   458,     0,  1120,  1121,     0,   461,     0,   462,   463,
     639,   465,   640,  1122,   467,   468,   641,   470,   471,   472,
     473,   474,     0,     0,   475,   476,   477,     0,   478,   479,
     480,   481,     0,   482,   483,   484,   485,   486,   487,  1123,
       0,   489,   490,   491,   492,   493,   494,   495,   496,   497,
       0,     0,   498,     0,     0,   499,   500,   501,   502,   503,
     504,   505,   506,   507,   508,   509,   510,   511,   512,   513,
     514,   515,   516,   517,   518,   519,  1124,     0,     0,     0,
       0,     0,     0,  1125,  1126,  1127,     0,     0,     0,     0,
    1128,     0,  1129,     0,     0,     0,     0,     0,  1130,  1131,
       0,     0,     0,  2686,  1132,  1133,   112,  1085,   658,  1086,
    1087,  1088,  1089,  1090,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   113,   114,   115,   116,   117,
     118,   119,   120,   121,     0,   122,   123,   124,     0,     0,
       0,     0,     0,   125,  1091,     0,     0,   126,   127,   128,
       0,   129,   130,   131,   132,   133,   134,   135,   136,  1092,
     138,  1093,  1094,     0,   141,   142,   143,   144,   145,   146,
    1095,   627,   147,   148,  1096,  1097,   151,     0,   152,   153,
     154,   155,   628,     0,   629,     0,  1098,   159,   160,   161,
     162,   163,   164,   165,   166,   167,     0,   168,   169,   170,
     171,   172,   173,     0,   174,   175,   176,   177,   178,   179,
     180,   181,   182,   183,   184,  1099,  1100,   187,  1101,   188,
       0,   189,   190,   191,   192,   193,   194,     0,   195,   196,
     197,   198,   199,   200,     0,     0,   201,   202,   853,   204,
     205,   206,   207,     0,   208,   209,   210,     0,   211,   212,
     213,     0,   214,   215,   216,   217,  1102,   219,   220,   221,
     222,   223,   630,  1103,   225,     0,   226,   227,  1104,   229,
       0,   230,     0,   231,   232,     0,   233,   234,   235,   236,
     237,   238,     0,   239,   240,     0,     0,  1105,  1106,   243,
     244,     0,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,     0,   257,   258,   259,   260,   261,
     262,   263,     0,   264,   265,   266,   267,   268,   269,   270,
     271,  1107,  1108,     0,  1109,     0,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,     0,     0,
     287,   288,   289,   290,     0,   291,   292,   293,   294,   295,
     296,   297,   298,  1110,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,  1111,   319,  1112,   321,   322,   323,   324,   325,
    1113,   326,   327,   328,   329,  1114,   633,   331,  1115,   333,
     334,   335,     0,   336,   337,     0,     0,  1116,   339,   340,
       0,     0,   341,   342,   343,   344,   345,   635,   347,   348,
     349,   350,   351,   352,   353,   354,   355,   356,   357,   358,
       0,     0,     0,     0,   359,   360,   636,   362,   363,   364,
     365,   366,   367,   368,     0,   369,   370,   371,   372,   373,
     374,   375,   376,     0,   377,   378,   379,  1117,   381,   382,
     383,   384,     0,   385,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,     0,   399,   400,
     401,   402,   403,   404,  1118,   406,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,     0,     0,   417,   418,
     419,   420,   421,   422,   423,   424,   425,   426,   427,   428,
     429,   430,  1119,   432,     0,   433,   434,   435,   436,   437,
     438,   439,   440,   441,   442,   443,   444,   445,   446,   447,
     638,   449,     0,   450,   451,  2735,   452,   453,   454,   455,
     456,   457,   458,     0,  1120,  1121,     0,   461,     0,   462,
     463,   639,   465,   640,  1122,   467,   468,   641,   470,   471,
     472,   473,   474,     0,     0,   475,   476,   477,     0,   478,
     479,   480,   481,     0,   482,   483,   484,   485,   486,   487,
    1123,     0,   489,   490,   491,   492,   493,   494,   495,   496,
     497,     0,     0,   498,     0,     0,   499,   500,   501,   502,
     503,   504,   505,   506,   507,   508,   509,   510,   511,   512,
     513,   514,   515,   516,   517,   518,   519,  1124,     0,     0,
       0,     0,     0,     0,  1125,  1126,  1127,     0,     0,     0,
       0,  1128,     0,  1129,     0,     0,     0,     0,     0,  1130,
    1131,     0,     0,     0,     0,  1132,  1133,   112,  1085,   658,
    1086,  1087,  1088,  1089,  1090,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   113,   114,   115,   116,
     117,   118,   119,   120,   121,     0,   122,   123,   124,     0,
       0,     0,     0,     0,   125,  1091,     0,     0,   126,   127,
     128,     0,   129,   130,   131,   132,   133,   134,   135,   136,
    1092,   138,  1093,  1094,     0,   141,   142,   143,   144,   145,
     146,  1095,   627,   147,   148,  1096,  1097,   151,     0,   152,
     153,   154,   155,   628,     0,   629,     0,  1098,   159,   160,
     161,   162,   163,   164,   165,   166,   167,     0,   168,   169,
     170,   171,   172,   173,     0,   174,   175,   176,   177,   178,
     179,   180,   181,   182,   183,   184,  1099,  1100,   187,  1101,
     188,     0,   189,   190,   191,   192,   193,   194,     0,   195,
     196,   197,   198,   199,   200,     0,     0,   201,   202,   853,
     204,   205,   206,   207,     0,   208,   209,   210,     0,   211,
     212,   213,     0,   214,   215,   216,   217,  1102,   219,   220,
     221,   222,   223,   630,  1103,   225,     0,   226,   227,  1104,
     229,     0,   230,     0,   231,   232,     0,   233,   234,   235,
     236,   237,   238,     0,   239,   240,     0,     0,  1105,  1106,
     243,   244,     0,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,     0,   257,   258,   259,   260,
     261,   262,   263,     0,   264,   265,   266,   267,   268,   269,
     270,   271,  1107,  1108,     0,  1109,     0,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,   286,     0,
       0,   287,   288,   289,   290,     0,   291,   292,   293,   294,
     295,   296,   297,   298,  1110,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,  1111,   319,  1112,   321,   322,   323,   324,
     325,  1113,   326,   327,   328,   329,  1114,   633,   331,  1115,
     333,   334,   335,     0,   336,   337,     0,     0,  1116,   339,
     340,     0,     0,   341,   342,   343,   344,   345,   635,   347,
     348,   349,   350,   351,   352,   353,   354,   355,   356,   357,
     358,     0,     0,     0,     0,   359,   360,   636,   362,   363,
     364,   365,   366,   367,   368,     0,   369,   370,   371,   372,
     373,   374,   375,   376,     0,   377,   378,   379,  1117,   381,
     382,   383,   384,     0,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,     0,   399,
     400,   401,   402,   403,   404,  1118,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,     0,     0,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   429,   430,  1119,   432,     0,   433,   434,   435,   436,
     437,   438,   439,   440,   441,   442,   443,   444,   445,   446,
     447,   638,   449,     0,   450,   451,     0,   452,   453,   454,
     455,   456,   457,   458,     0,  1120,  1121,     0,   461,     0,
     462,   463,   639,   465,   640,  1122,   467,   468,   641,   470,
     471,   472,   473,   474,     0,     0,   475,   476,   477,     0,
     478,   479,   480,   481,     0,   482,   483,   484,   485,   486,
     487,  1123,     0,   489,   490,   491,   492,   493,   494,   495,
     496,   497,     0,  2843,   498,     0,     0,   499,   500,   501,
     502,   503,   504,   505,   506,   507,   508,   509,   510,   511,
     512,   513,   514,   515,   516,   517,   518,   519,  1124,     0,
       0,     0,     0,     0,     0,  1125,  1126,  1127,     0,     0,
       0,     0,  1128,     0,  1129,     0,     0,     0,     0,     0,
    1130,  1131,     0,     0,     0,     0,  1132,  1133,   112,  1085,
     658,  1086,  1087,  1088,  1089,  1090,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   113,   114,   115,
     116,   117,   118,   119,   120,   121,  3092,   122,   123,   124,
       0,     0,     0,     0,     0,   125,  1091,     0,     0,   126,
     127,   128,     0,   129,   130,   131,   132,   133,   134,   135,
     136,  1092,   138,  1093,  1094,     0,   141,   142,   143,   144,
     145,   146,  1095,   627,   147,   148,  1096,  1097,   151,     0,
     152,   153,   154,   155,   628,     0,   629,     0,  1098,   159,
     160,   161,   162,   163,   164,   165,   166,   167,     0,   168,
     169,   170,   171,   172,   173,     0,   174,   175,  3093,   177,
     178,   179,   180,   181,   182,   183,   184,  1099,  1100,   187,
    1101,   188,     0,   189,   190,   191,   192,   193,   194,     0,
     195,   196,   197,   198,   199,   200,     0,     0,   201,   202,
     853,   204,   205,   206,   207,     0,   208,   209,   210,     0,
     211,   212,   213,     0,   214,   215,   216,   217,  1102,   219,
     220,   221,   222,   223,   630,  1103,   225,     0,   226,   227,
    1104,   229,     0,   230,     0,   231,   232,     0,   233,   234,
     235,   236,   237,   238,     0,   239,   240,     0,     0,  3094,
    1106,   243,   244,     0,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,     0,   257,   258,   259,
     260,   261,   262,   263,     0,   264,   265,   266,   267,   268,
     269,   270,   271,  1107,  1108,     0,  1109,     0,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
       0,     0,   287,   288,   289,   290,     0,   291,   292,   293,
     294,   295,   296,   297,   298,  1110,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,  1111,   319,  1112,   321,   322,   323,
     324,   325,  1113,   326,   327,   328,   329,  1114,   633,   331,
    1115,   333,   334,   335,     0,   336,   337,     0,     0,  1116,
     339,   340,     0,     0,   341,   342,   343,   344,   345,   635,
     347,   348,   349,   350,   351,   352,   353,   354,   355,   356,
     357,   358,     0,     0,     0,     0,   359,   360,   636,   362,
     363,   364,   365,   366,   367,   368,     0,   369,   370,   371,
     372,   373,   374,   375,   376,     0,   377,   378,   379,  1117,
     381,   382,   383,   384,     0,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,     0,
     399,   400,   401,   402,   403,  3095,  1118,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,     0,     0,
     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
     427,   428,   429,   430,  1119,   432,     0,   433,   434,   435,
     436,   437,   438,   439,   440,   441,   442,   443,   444,   445,
     446,   447,   638,   449,     0,   450,   451,     0,   452,   453,
     454,   455,   456,   457,   458,     0,  1120,  1121,     0,   461,
       0,   462,   463,   639,   465,   640,  1122,   467,   468,   641,
     470,   471,   472,   473,   474,     0,     0,   475,   476,   477,
       0,   478,   479,   480,   481,     0,   482,   483,   484,   485,
     486,   487,  1123,     0,   489,   490,   491,   492,   493,   494,
     495,   496,   497,     0,     0,   498,     0,     0,   499,   500,
     501,   502,   503,   504,   505,   506,   507,   508,   509,   510,
     511,   512,   513,   514,   515,   516,   517,   518,   519,  1124,
       0,     0,     0,     0,     0,     0,  1125,  1126,  1127,     0,
       0,     0,     0,  1128,     0,  3096,     0,     0,     0,     0,
       0,  1130,  1131,     0,     0,     0,     0,  1132,  1133,   112,
    1085,   658,  1086,  1087,  1088,  1089,  1090,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   113,   114,
     115,   116,   117,   118,   119,   120,   121,     0,   122,   123,
     124,     0,     0,     0,     0,     0,   125,  1091,     0,     0,
     126,   127,   128,     0,   129,   130,   131,   132,   133,   134,
     135,   136,  1092,   138,  1093,  1094,     0,   141,   142,   143,
     144,   145,   146,  1095,   627,   147,   148,  1096,  1097,   151,
       0,   152,   153,   154,   155,   628,     0,   629,     0,  1098,
     159,   160,   161,   162,   163,   164,   165,   166,   167,     0,
     168,   169,   170,   171,   172,   173,     0,   174,   175,   176,
     177,   178,   179,   180,   181,   182,   183,   184,  1099,  1100,
     187,  1101,   188,     0,   189,   190,   191,   192,   193,   194,
       0,   195,   196,   197,   198,   199,   200,     0,     0,   201,
     202,   853,   204,   205,   206,   207,     0,   208,   209,   210,
       0,   211,   212,   213,     0,   214,   215,   216,   217,  1102,
     219,   220,   221,   222,   223,   630,  1103,   225,     0,   226,
     227,  1104,   229,     0,   230,     0,   231,   232,     0,   233,
     234,   235,   236,   237,   238,     0,   239,   240,     0,     0,
    1105,  1106,   243,   244,     0,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,     0,   257,   258,
     259,   260,   261,   262,   263,     0,   264,   265,   266,   267,
     268,   269,   270,   271,  1107,  1108,     0,  1109,     0,   275,
     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
     286,     0,     0,   287,   288,   289,   290,     0,   291,   292,
     293,   294,   295,   296,   297,   298,  1110,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,  1111,   319,  1112,   321,   322,
     323,   324,   325,  1113,   326,   327,   328,   329,  1114,   633,
     331,  1115,   333,   334,   335,     0,   336,   337,     0,     0,
    1116,   339,   340,     0,     0,   341,   342,   343,   344,   345,
     635,   347,   348,   349,   350,   351,   352,   353,   354,   355,
     356,   357,   358,     0,     0,     0,     0,   359,   360,   636,
     362,   363,   364,   365,   366,   367,   368,     0,   369,   370,
     371,   372,   373,   374,   375,   376,     0,   377,   378,   379,
    1117,   381,   382,   383,   384,     0,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
       0,   399,   400,   401,   402,   403,   404,  1118,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,     0,
       0,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,   428,   429,   430,  1119,   432,     0,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   638,   449,     0,   450,   451,  3287,   452,
     453,   454,   455,   456,   457,   458,     0,  1120,  1121,     0,
     461,     0,   462,   463,   639,   465,   640,  1122,   467,   468,
     641,   470,   471,   472,   473,   474,     0,     0,   475,   476,
     477,     0,   478,   479,   480,   481,     0,   482,   483,   484,
     485,   486,   487,  1123,     0,   489,   490,   491,   492,   493,
     494,   495,   496,   497,     0,     0,   498,     0,     0,   499,
     500,   501,   502,   503,   504,   505,   506,   507,   508,   509,
     510,   511,   512,   513,   514,   515,   516,   517,   518,   519,
    1124,     0,     0,     0,     0,     0,     0,  1125,  1126,  1127,
       0,     0,     0,     0,  1128,     0,  1129,     0,     0,     0,
       0,     0,  1130,  1131,     0,     0,     0,     0,  1132,  1133,
     112,  1085,   658,  1086,  1087,  1088,  1089,  1090,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   113,
     114,   115,   116,   117,   118,   119,   120,   121,     0,   122,
     123,   124,     0,     0,     0,     0,     0,   125,  1091,     0,
       0,   126,   127,   128,     0,   129,   130,   131,   132,   133,
     134,   135,   136,  1092,   138,  1093,  1094,     0,   141,   142,
     143,   144,   145,   146,  1095,   627,   147,   148,  1096,  1097,
     151,     0,   152,   153,   154,   155,   628,     0,   629,     0,
    1098,   159,   160,   161,   162,   163,   164,   165,   166,   167,
       0,   168,   169,   170,   171,   172,   173,     0,   174,   175,
     176,   177,   178,   179,   180,   181,   182,   183,   184,  1099,
    1100,   187,  1101,   188,     0,   189,   190,   191,   192,   193,
     194,     0,   195,   196,   197,   198,   199,   200,     0,     0,
     201,   202,   853,   204,   205,   206,   207,     0,   208,   209,
     210,     0,   211,   212,   213,     0,   214,   215,   216,   217,
    1102,   219,   220,   221,   222,   223,   630,  1103,   225,     0,
     226,   227,  1104,   229,     0,   230,     0,   231,   232,     0,
     233,   234,   235,   236,   237,   238,     0,   239,   240,     0,
       0,  1105,  1106,   243,   244,     0,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,     0,   257,
     258,   259,   260,   261,   262,   263,     0,   264,   265,   266,
     267,   268,   269,   270,   271,  1107,  1108,     0,  1109,     0,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,     0,     0,   287,   288,   289,   290,     0,   291,
     292,   293,   294,   295,   296,   297,   298,  1110,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,  1111,   319,  1112,   321,
     322,   323,   324,   325,  1113,   326,   327,   328,   329,  1114,
     633,   331,  1115,   333,   334,   335,     0,   336,   337,     0,
       0,  1116,   339,   340,     0,     0,   341,   342,   343,   344,
     345,   635,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,     0,     0,     0,     0,   359,   360,
     636,   362,   363,   364,   365,   366,   367,   368,     0,   369,
     370,   371,   372,   373,   374,   375,   376,     0,   377,   378,
     379,  1117,   381,   382,   383,   384,     0,   385,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,     0,   399,   400,   401,   402,   403,   404,  1118,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
       0,     0,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,  1119,   432,     0,   433,
     434,   435,   436,   437,   438,   439,   440,   441,   442,   443,
     444,   445,   446,   447,   638,   449,     0,   450,   451,     0,
     452,   453,   454,   455,   456,   457,   458,     0,  1120,  1121,
       0,   461,     0,   462,   463,   639,   465,   640,  1122,   467,
     468,   641,   470,   471,   472,   473,   474,     0,     0,   475,
     476,   477,     0,   478,   479,   480,   481,     0,   482,   483,
     484,   485,   486,   487,  1123,     0,   489,   490,   491,   492,
     493,   494,   495,   496,   497,     0,     0,   498,     0,     0,
     499,   500,   501,   502,   503,   504,   505,   506,   507,   508,
     509,   510,   511,   512,   513,   514,   515,   516,   517,   518,
     519,  1124,     0,     0,     0,     0,     0,     0,  1125,  1126,
    1127,     0,     0,     0,     0,  1128,     0,  1129,     0,     0,
       0,     0,     0,  1130,  1131,     0,     0,     0,  3355,  1132,
    1133,   112,  1085,   658,  1086,  1087,  1088,  1089,  1090,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     113,   114,   115,   116,   117,   118,   119,   120,   121,     0,
     122,   123,   124,     0,     0,     0,     0,     0,   125,  1091,
       0,     0,   126,   127,   128,     0,   129,   130,   131,   132,
     133,   134,   135,   136,  1092,   138,  1093,  1094,     0,   141,
     142,   143,   144,   145,   146,  1095,   627,   147,   148,  1096,
    1097,   151,     0,   152,   153,   154,   155,   628,     0,   629,
       0,  1098,   159,   160,   161,   162,   163,   164,   165,   166,
     167,     0,   168,   169,   170,   171,   172,   173,     0,   174,
     175,   176,   177,   178,   179,   180,   181,   182,   183,   184,
    1099,  1100,   187,  1101,   188,     0,   189,   190,   191,   192,
     193,   194,     0,   195,   196,   197,   198,   199,   200,     0,
       0,   201,   202,   853,   204,   205,   206,   207,     0,   208,
     209,   210,     0,   211,   212,   213,     0,   214,   215,   216,
     217,  1102,   219,   220,   221,   222,   223,   630,  1103,   225,
       0,   226,   227,  1104,   229,     0,   230,     0,   231,   232,
       0,   233,   234,   235,   236,   237,   238,     0,   239,   240,
       0,     0,  1105,  1106,   243,   244,     0,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,     0,
     257,   258,   259,   260,   261,   262,   263,     0,   264,   265,
     266,   267,   268,   269,   270,   271,  1107,  1108,     0,  1109,
       0,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,     0,     0,   287,   288,   289,   290,     0,
     291,   292,   293,   294,   295,   296,   297,   298,  1110,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,  1111,   319,  1112,
     321,   322,   323,   324,   325,  1113,   326,   327,   328,   329,
    1114,   633,   331,  1115,   333,   334,   335,     0,   336,   337,
       0,     0,  1116,   339,   340,     0,     0,   341,   342,   343,
     344,   345,   635,   347,   348,   349,   350,   351,   352,   353,
     354,   355,   356,   357,   358,     0,     0,     0,     0,   359,
     360,   636,   362,   363,   364,   365,   366,   367,   368,     0,
     369,   370,   371,   372,   373,   374,   375,   376,     0,   377,
     378,   379,  1117,   381,   382,   383,   384,     0,   385,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,     0,   399,   400,   401,   402,   403,   404,  1118,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,     0,     0,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,   428,   429,   430,  1119,   432,     0,
     433,   434,   435,   436,   437,   438,   439,   440,   441,   442,
     443,   444,   445,   446,   447,   638,   449,     0,   450,   451,
    3493,   452,   453,   454,   455,   456,   457,   458,     0,  1120,
    1121,     0,   461,     0,   462,   463,   639,   465,   640,  1122,
     467,   468,   641,   470,   471,   472,   473,   474,     0,     0,
     475,   476,   477,     0,   478,   479,   480,   481,     0,   482,
     483,   484,   485,   486,   487,  1123,     0,   489,   490,   491,
     492,   493,   494,   495,   496,   497,     0,     0,   498,     0,
       0,   499,   500,   501,   502,   503,   504,   505,   506,   507,
     508,   509,   510,   511,   512,   513,   514,   515,   516,   517,
     518,   519,  1124,     0,     0,     0,     0,     0,     0,  1125,
    1126,  1127,     0,     0,     0,     0,  1128,     0,  1129,     0,
       0,     0,     0,     0,  1130,  1131,     0,     0,     0,     0,
    1132,  1133,   112,  1085,   658,  1086,  1087,  1088,  1089,  1090,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   113,   114,   115,   116,   117,   118,   119,   120,   121,
       0,   122,   123,   124,     0,     0,     0,     0,     0,   125,
    1091,     0,     0,   126,   127,   128,     0,   129,   130,   131,
     132,   133,   134,   135,   136,  1092,   138,  1093,  1094,     0,
     141,   142,   143,   144,   145,   146,  1095,   627,   147,   148,
    1096,  1097,   151,     0,   152,   153,   154,   155,   628,     0,
     629,     0,  1098,   159,   160,   161,   162,   163,   164,   165,
     166,   167,     0,   168,   169,   170,   171,   172,   173,     0,
     174,   175,   176,   177,   178,   179,   180,   181,   182,   183,
     184,  1099,  1100,   187,  1101,   188,     0,   189,   190,   191,
     192,   193,   194,     0,   195,   196,   197,   198,   199,   200,
       0,     0,   201,   202,   853,   204,   205,   206,   207,     0,
     208,   209,   210,     0,   211,   212,   213,     0,   214,   215,
     216,   217,  1102,   219,   220,   221,   222,   223,   630,  1103,
     225,     0,   226,   227,  1104,   229,     0,   230,     0,   231,
     232,     0,   233,   234,   235,   236,   237,   238,     0,   239,
     240,     0,     0,  1105,  1106,   243,   244,     0,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
       0,   257,   258,   259,   260,   261,   262,   263,     0,   264,
     265,   266,   267,   268,   269,   270,   271,  1107,  1108,     0,
    1109,     0,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,     0,     0,   287,   288,   289,   290,
       0,   291,   292,   293,   294,   295,   296,   297,   298,  1110,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,  1111,   319,
    1112,   321,   322,   323,   324,   325,  1113,   326,   327,   328,
     329,  1114,   633,   331,  1115,   333,   334,   335,     0,   336,
     337,     0,     0,  1116,   339,   340,     0,     0,   341,   342,
     343,   344,   345,   635,   347,   348,   349,   350,   351,   352,
     353,   354,   355,   356,   357,   358,     0,     0,     0,     0,
     359,   360,   636,   362,   363,   364,   365,   366,   367,   368,
       0,   369,   370,   371,   372,   373,   374,   375,   376,     0,
     377,   378,   379,  1117,   381,   382,   383,   384,     0,   385,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,     0,   399,   400,   401,   402,   403,   404,
    1118,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,     0,     0,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,   427,   428,   429,   430,  1119,   432,
       0,   433,   434,   435,   436,   437,   438,   439,   440,   441,
     442,   443,   444,   445,   446,   447,   638,   449,     0,   450,
     451,     0,   452,   453,   454,   455,   456,   457,   458,     0,
    1120,  1121,     0,   461,     0,   462,   463,   639,   465,   640,
    1122,   467,   468,   641,   470,   471,   472,   473,   474,     0,
       0,   475,   476,   477,     0,   478,   479,   480,   481,     0,
     482,   483,   484,   485,   486,   487,  1123,     0,   489,   490,
     491,   492,   493,   494,   495,   496,   497,     0,     0,   498,
       0,     0,   499,   500,   501,   502,   503,   504,   505,   506,
     507,   508,   509,   510,   511,   512,   513,   514,   515,   516,
     517,   518,   519,  1124,     0,     0,     0,     0,     0,     0,
    1125,  1126,  1127,     0,     0,     0,     0,  1128,     0,  1129,
       0,     0,     0,     0,     0,  1130,  1131,     0,     0,     0,
       0,  1132,  1133,   112,  1085,   658,  1086,  1087,  1088,  1089,
    1090,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   113,   114,   115,   116,   117,   118,   119,   120,
     121,     0,   122,   123,   124,     0,     0,     0,     0,     0,
     125,  1091,     0,     0,   126,   127,   128,     0,   129,   130,
     131,   132,   133,   134,   135,   136,  1092,   138,  1093,  1094,
       0,   141,   142,   143,   144,   145,   146,  1095,   627,   147,
     148,  1096,  1097,   151,     0,   152,   153,   154,   155,   628,
       0,   629,     0,  1098,   159,   160,   161,   162,   163,   164,
     165,   166,   167,     0,   168,   169,   170,   171,   172,   173,
       0,   174,   175,   176,   177,   178,   179,   180,   181,   182,
     183,   184,  1099,  1100,   187,  1101,   188,     0,   189,   190,
     191,   192,   193,   194,     0,   195,   196,   197,   198,   199,
     200,     0,     0,   201,   202,   853,   204,   205,   206,   207,
       0,   208,   209,   210,     0,   211,   212,   213,     0,   214,
     215,   216,   217,  1102,   219,   220,   221,   222,   223,   630,
    1103,   225,     0,   226,   227,  1104,   229,     0,   230,     0,
     231,   232,     0,   233,   234,   235,   236,   237,   238,     0,
     239,   240,     0,     0,  1105,  1106,   243,   244,     0,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,     0,   257,   258,   259,   260,   261,   262,   263,     0,
     264,   265,   266,   267,   268,   269,   270,   271,  1107,  1108,
       0,  1109,     0,   275,   276,   277,   278,   279,   280,   281,
     282,   283,   284,   285,   286,     0,     0,   287,   288,   289,
     290,     0,   291,   292,   293,   294,   295,   296,   297,   298,
    1110,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,  1111,
     319,  1112,   321,   322,   323,   324,   325,  1113,   326,   327,
     328,   329,  1114,   633,   331,  1115,   333,   334,   335,     0,
     336,   337,     0,     0,  1116,   339,   340,     0,     0,   341,
     342,   343,   344,   345,   635,   347,   348,   349,   350,   351,
     352,   353,   354,   355,   356,   357,   358,     0,     0,     0,
       0,   359,   360,   636,   362,   363,   364,   365,   366,   367,
     368,     0,   369,   370,   371,   372,   373,   374,   375,   376,
       0,   377,   378,   379,  1117,   381,   382,   383,   384,     0,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,     0,   399,   400,   401,   402,   403,
     404,  1118,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,     0,     0,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,   428,   429,   430,  1119,
     432,     0,   433,   434,   435,   436,   437,   438,   439,   440,
     441,   442,   443,   444,   445,   446,   447,   638,   449,     0,
     450,   451,     0,   452,   453,   454,   455,   456,   457,   458,
       0,  1120,  1121,     0,   461,     0,   462,   463,   639,   465,
     640,  1122,   467,   468,   641,   470,   471,   472,   473,   474,
       0,     0,   475,   476,   477,     0,   478,   479,   480,   481,
       0,   482,   483,   484,   485,   486,   487,  1123,     0,   489,
     490,   491,   492,   493,   494,   495,   496,   497,     0,     0,
     498,     0,     0,   499,   500,   501,   502,   503,   504,   505,
     506,   507,   508,   509,   510,   511,   512,   513,   514,   515,
     516,   517,   518,   519,  1124,     0,     0,     0,     0,     0,
       0,  1763,  1764,  1127,     0,     0,     0,     0,  1128,     0,
    1129,     0,     0,     0,     0,     0,  1130,  1131,     0,     0,
       0,     0,  1132,  1133,   112,  2231,   658,  1086,  1087,  1088,
    1089,  1090,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   113,   114,   115,   116,   117,   118,   119,
     120,   121,     0,   122,   123,   124,     0,     0,     0,     0,
       0,   125,  1091,     0,     0,   126,   127,   128,     0,   129,
     130,   131,   132,   133,   134,   135,   136,  1092,   138,  1093,
    1094,     0,   141,   142,   143,   144,   145,   146,  1095,   627,
     147,   148,  1096,  1097,   151,     0,   152,   153,   154,   155,
     628,     0,   629,     0,  1098,   159,   160,   161,   162,   163,
     164,   165,   166,   167,     0,   168,   169,   170,   171,   172,
     173,     0,   174,   175,   176,   177,   178,   179,   180,   181,
     182,   183,   184,  1099,  1100,   187,  1101,   188,     0,   189,
     190,   191,   192,   193,   194,     0,   195,   196,   197,   198,
     199,   200,     0,     0,   201,   202,   853,   204,   205,   206,
     207,     0,   208,   209,   210,     0,   211,   212,   213,     0,
     214,   215,   216,   217,  1102,   219,   220,   221,   222,   223,
     630,  1103,   225,     0,   226,   227,  1104,   229,     0,   230,
       0,   231,   232,     0,   233,   234,   235,   236,   237,   238,
       0,   239,   240,     0,     0,  1105,  1106,   243,   244,     0,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,     0,   257,   258,   259,   260,   261,   262,   263,
       0,   264,   265,   266,   267,   268,   269,   270,   271,  1107,
    1108,     0,  1109,     0,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,     0,     0,   287,   288,
     289,   290,     0,   291,   292,   293,   294,   295,   296,   297,
     298,  1110,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
    1111,   319,  1112,   321,   322,   323,   324,   325,  1113,   326,
     327,   328,   329,  1114,   633,   331,  1115,   333,   334,   335,
       0,   336,   337,     0,     0,  1116,   339,   340,     0,     0,
     341,   342,   343,   344,   345,   635,   347,   348,   349,   350,
     351,   352,   353,   354,   355,   356,   357,   358,     0,     0,
       0,     0,   359,   360,   636,   362,   363,   364,   365,   366,
     367,   368,     0,   369,   370,   371,   372,   373,   374,   375,
     376,     0,   377,   378,   379,  1117,   381,   382,   383,   384,
       0,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,     0,   399,   400,   401,   402,
     403,   404,  1118,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,     0,     0,   417,   418,   419,   420,
     421,   422,   423,   424,   425,   426,   427,   428,   429,   430,
    1119,   432,     0,   433,   434,   435,   436,   437,   438,   439,
     440,   441,   442,   443,   444,   445,   446,   447,   638,   449,
       0,   450,   451,     0,   452,   453,   454,   455,   456,   457,
     458,     0,  1120,  1121,     0,   461,     0,   462,   463,   639,
     465,   640,  1122,   467,   468,   641,   470,   471,   472,   473,
     474,     0,     0,   475,   476,   477,     0,   478,   479,   480,
     481,     0,   482,   483,   484,   485,   486,   487,  1123,     0,
     489,   490,   491,   492,   493,   494,   495,   496,   497,     0,
       0,   498,     0,     0,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,   517,   518,   519,  1124,     0,     0,     0,     0,
       0,     0,  1125,  1126,  1127,     0,     0,     0,     0,  1128,
       0,  1129,     0,     0,     0,     0,     0,  1130,  1131,     0,
       0,     0,     0,  1132,  1133,   112,  1085,   658,  1086,  1087,
    1088,  1089,  1090,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   113,   114,   115,   116,   117,   118,
     119,   120,   121,     0,   122,   123,   124,     0,     0,     0,
       0,     0,   125,  1091,     0,     0,   126,   127,   128,     0,
     129,   130,   131,   132,   133,   134,   135,   136,  1092,   138,
    1093,  1094,     0,   141,   142,   143,   144,   145,   146,  1095,
     627,   147,   148,  1096,  1097,   151,     0,   152,   153,   154,
     155,   628,     0,   629,     0,  1098,   159,   160,   161,   162,
     163,   164,   165,   166,   167,     0,   168,   169,   170,   171,
     172,   173,     0,   174,   175,   176,   177,   178,   179,   180,
     181,   182,   183,   184,  1099,  1100,   187,  1101,   188,     0,
     189,   190,   191,   192,   193,   194,     0,   195,   196,   197,
     198,   199,   200,     0,     0,   201,   202,   853,   204,   205,
     206,   207,     0,   208,   209,   210,     0,   211,   212,   213,
       0,   214,   215,   216,   217,  1102,   219,   220,   221,   222,
     223,   630,  1103,   225,     0,   226,   227,  1104,   229,     0,
     230,     0,   231,   232,     0,   233,   234,   235,   236,   237,
     238,     0,   239,   240,     0,     0,  1105,  1106,   243,   244,
       0,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,     0,   257,   258,   259,   260,   261,   262,
     263,     0,   264,   265,   266,   267,   268,   269,   270,   271,
    1107,  1108,     0,  1109,     0,   275,   276,   277,   278,   279,
     280,   281,   282,   283,   284,   285,   286,     0,     0,   287,
     288,   289,   290,     0,   291,   292,   293,   294,   295,   296,
     297,   298,  1110,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,  1111,   319,  1112,   321,   322,   323,   324,   325,  1113,
     326,   327,   328,   329,  1114,   633,   331,  1115,   333,   334,
     335,     0,   336,   337,     0,     0,  1116,   339,   340,     0,
       0,   341,   342,   343,   344,   345,   635,   347,   348,   349,
     350,   351,   352,   353,   354,   355,   356,   357,   358,     0,
       0,     0,     0,   359,   360,   636,   362,   363,   364,   365,
     366,   367,   368,     0,   369,   370,   371,   372,   373,   374,
     375,   376,     0,   377,   378,   379,  1117,   381,   382,   383,
     384,     0,   385,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,     0,   399,   400,   401,
     402,   403,   404,  1118,   406,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,     0,     0,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,   428,   429,
     430,  1119,   432,     0,   433,   434,   435,   436,   437,   438,
     439,   440,   441,   442,   443,   444,   445,   446,   447,   638,
     449,     0,   450,   451,     0,   452,   453,   454,   455,   456,
     457,   458,     0,  1120,  1121,     0,   461,     0,   462,   463,
     639,   465,   640,  1122,   467,   468,   641,   470,   471,   472,
     473,   474,     0,     0,   475,   476,   477,     0,   478,   479,
     480,   481,     0,   482,   483,   484,   485,   486,   487,  1123,
       0,   489,   490,   491,   492,   493,   494,   495,   496,   497,
       0,     0,   498,     0,     0,   499,   500,   501,   502,   503,
     504,   505,   506,   507,   508,   509,   510,   511,   512,   513,
     514,   515,   516,   517,   518,   519,  1124,     0,     0,     0,
       0,     0,     0,  1125,  2313,  1127,     0,     0,     0,     0,
    1128,     0,  1129,     0,     0,     0,     0,     0,  1130,  1131,
       0,     0,     0,     0,  1132,  1133,   112,  1085,   658,  1086,
    1087,  1088,  1089,  1090,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   113,   114,   115,   116,   117,
     118,   119,   120,   121,     0,   122,   123,   124,     0,     0,
       0,     0,     0,   125,  1091,     0,     0,   126,   127,   128,
       0,   129,   130,   131,   132,   133,   134,   135,   136,  1092,
     138,  1093,  1094,     0,   141,   142,   143,   144,   145,   146,
    1095,   627,   147,   148,  1096,  1097,   151,     0,   152,   153,
     154,   155,   628,     0,   629,     0,  1098,   159,   160,   161,
     162,   163,   164,   165,   166,   167,     0,   168,   169,   170,
     171,   172,   173,     0,   174,   175,   176,   177,   178,   179,
     180,   181,   182,   183,   184,  1099,  1100,   187,  1101,   188,
       0,   189,   190,   191,   192,   193,   194,     0,   195,   196,
     197,   198,   199,   200,     0,     0,   201,   202,   853,   204,
     205,   206,   207,     0,   208,   209,   210,     0,   211,   212,
     213,     0,   214,   215,   216,   217,  1102,   219,   220,   221,
     222,   223,   630,  1103,   225,     0,   226,   227,  1104,   229,
       0,   230,     0,   231,   232,     0,   233,   234,   235,   236,
     237,   238,     0,   239,   240,     0,     0,  1105,  1106,   243,
     244,     0,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,     0,   257,   258,   259,   260,   261,
     262,   263,     0,   264,   265,   266,   267,   268,   269,   270,
     271,  1107,  1108,     0,  1109,     0,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,     0,     0,
     287,   288,   289,   290,     0,   291,   292,   293,   294,   295,
     296,   297,   298,  1110,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,  1111,   319,  1112,   321,   322,   323,   324,   325,
    1113,   326,   327,   328,   329,  1114,   633,   331,  1115,   333,
     334,   335,     0,   336,   337,     0,     0,  1116,   339,   340,
       0,     0,   341,   342,   343,   344,   345,   635,   347,   348,
     349,   350,   351,   352,   353,   354,   355,   356,   357,   358,
       0,     0,     0,     0,   359,   360,   636,   362,   363,   364,
     365,   366,   367,   368,     0,   369,   370,   371,   372,   373,
     374,   375,   376,     0,   377,   378,   379,  1117,   381,   382,
     383,   384,     0,   385,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,     0,   399,   400,
     401,   402,   403,   404,  1118,   406,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,     0,     0,   417,   418,
     419,   420,   421,   422,   423,   424,   425,   426,   427,   428,
     429,   430,  1119,   432,     0,   433,   434,   435,   436,   437,
     438,   439,   440,   441,   442,   443,   444,   445,   446,   447,
     638,   449,     0,   450,   451,     0,   452,   453,   454,   455,
     456,   457,   458,     0,  1120,  1121,     0,   461,     0,   462,
     463,   639,   465,   640,  1122,   467,   468,   641,   470,   471,
     472,   473,   474,     0,     0,   475,   476,   477,     0,   478,
     479,   480,   481,     0,   482,   483,   484,   485,   486,   487,
    1123,     0,   489,   490,   491,   492,   493,   494,   495,   496,
     497,     0,     0,   498,     0,     0,   499,   500,   501,   502,
     503,   504,   505,   506,   507,   508,   509,   510,   511,   512,
     513,   514,   515,   516,   517,   518,   519,  1124,     0,     0,
       0,     0,     0,     0,  1125,  1126,  1127,     0,     0,     0,
       0,  1128,     0,  2516,     0,     0,     0,     0,     0,  1130,
    1131,     0,     0,     0,     0,  1132,  1133,   112,  1085,   658,
    1086,  1087,  1088,  1089,  1090,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   113,   114,   115,   116,
     117,   118,   119,   120,   121,     0,   122,   123,   124,     0,
       0,     0,     0,     0,   125,  1091,     0,     0,   126,   127,
     128,     0,   129,   130,   131,   132,   133,   134,   135,   136,
    1092,   138,  1093,  1094,     0,   141,   142,   143,   144,   145,
     146,  1095,   627,   147,   148,  1096,  1097,   151,     0,   152,
     153,   154,   155,   628,     0,   629,     0,  1098,   159,   160,
     161,   162,   163,   164,   165,   166,   167,     0,   168,   169,
     170,   171,   172,   173,     0,   174,   175,   176,   177,   178,
     179,   180,   181,   182,   183,   184,  1099,  1100,   187,  1101,
     188,     0,   189,   190,   191,   192,   193,   194,     0,   195,
     196,   197,   198,   199,   200,     0,     0,   201,   202,   853,
     204,   205,   206,   207,     0,   208,   209,   210,     0,   211,
     212,   213,     0,   214,   215,   216,   217,  1102,   219,   220,
     221,   222,   223,   630,  1103,   225,     0,   226,   227,  1104,
     229,     0,   230,     0,   231,   232,     0,   233,   234,   235,
     236,   237,   238,     0,   239,   240,     0,     0,  1105,  1106,
     243,   244,     0,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,     0,   257,   258,   259,   260,
     261,   262,   263,     0,   264,   265,   266,   267,   268,   269,
     270,   271,  1107,  1108,     0,  1109,     0,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,   286,     0,
       0,   287,   288,   289,   290,     0,   291,   292,   293,   294,
     295,   296,   297,   298,  1110,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,  1111,   319,  1112,   321,   322,   323,   324,
     325,  1113,   326,   327,   328,   329,  1114,   633,   331,  1115,
     333,   334,   335,     0,   336,   337,     0,     0,  1116,   339,
     340,     0,     0,   341,   342,   343,   344,   345,   635,   347,
     348,   349,   350,   351,   352,   353,   354,   355,   356,   357,
     358,     0,     0,     0,     0,   359,   360,   636,   362,   363,
     364,   365,   366,   367,   368,     0,   369,   370,   371,   372,
     373,   374,   375,   376,     0,   377,   378,   379,  1117,   381,
     382,   383,   384,     0,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,     0,   399,
     400,   401,   402,   403,   404,  1118,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,     0,     0,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   429,   430,  1119,   432,     0,   433,   434,   435,   436,
     437,   438,   439,   440,   441,   442,   443,   444,   445,   446,
     447,   638,   449,     0,   450,   451,     0,   452,   453,   454,
     455,   456,   457,   458,     0,  1120,  1121,     0,   461,     0,
     462,   463,   639,   465,   640,  1122,   467,   468,   641,   470,
     471,   472,   473,   474,     0,     0,   475,   476,   477,     0,
     478,   479,   480,   481,     0,   482,   483,   484,   485,   486,
     487,  1123,     0,   489,   490,   491,   492,   493,   494,   495,
     496,   497,     0,     0,   498,     0,     0,   499,   500,   501,
     502,   503,   504,   505,   506,   507,   508,   509,   510,   511,
     512,   513,   514,   515,   516,   517,   518,   519,  1124,     0,
       0,     0,     0,     0,     0,  1125,  3140,  1127,     0,     0,
       0,     0,  1128,     0,  1129,     0,     0,     0,     0,     0,
    1130,  1131,     0,     0,     0,     0,  1132,  1133,   112,  1085,
     658,  1086,  1087,  1088,  1089,  1090,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   113,   114,   115,
     116,   117,   118,   119,   120,   121,     0,   122,   123,   124,
       0,     0,     0,     0,     0,   125,  1091,     0,     0,   126,
     127,   128,     0,   129,   130,   131,   132,   133,   134,   135,
     136,  1092,   138,  1093,  1094,     0,   141,   142,   143,   144,
     145,   146,  1095,   627,   147,   148,  1096,  1097,   151,     0,
     152,   153,   154,   155,   628,     0,   629,     0,  1098,   159,
     160,   161,   162,   163,   164,   165,   166,   167,     0,   168,
     169,   170,   171,   172,   173,     0,   174,   175,  3093,   177,
     178,   179,   180,   181,   182,   183,   184,  1099,  1100,   187,
    1101,   188,     0,   189,   190,   191,   192,   193,   194,     0,
     195,   196,   197,   198,   199,   200,     0,     0,   201,   202,
     853,   204,   205,   206,   207,     0,   208,   209,   210,     0,
     211,   212,   213,     0,   214,   215,   216,   217,  1102,   219,
     220,   221,   222,   223,   630,  1103,   225,     0,   226,   227,
    1104,   229,     0,   230,     0,   231,   232,     0,   233,   234,
     235,   236,   237,   238,     0,   239,   240,     0,     0,  3094,
    1106,   243,   244,     0,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,     0,   257,   258,   259,
     260,   261,   262,   263,     0,   264,   265,   266,   267,   268,
     269,   270,   271,  1107,  1108,     0,  1109,     0,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
       0,     0,   287,   288,   289,   290,     0,   291,   292,   293,
     294,   295,   296,   297,   298,  1110,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,  1111,   319,  1112,   321,   322,   323,
     324,   325,  1113,   326,   327,   328,   329,  1114,   633,   331,
    1115,   333,   334,   335,     0,   336,   337,     0,     0,  1116,
     339,   340,     0,     0,   341,   342,   343,   344,   345,   635,
     347,   348,   349,   350,   351,   352,   353,   354,   355,   356,
     357,   358,     0,     0,     0,     0,   359,   360,   636,   362,
     363,   364,   365,   366,   367,   368,     0,   369,   370,   371,
     372,   373,   374,   375,   376,     0,   377,   378,   379,  1117,
     381,   382,   383,   384,     0,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,     0,
     399,   400,   401,   402,   403,  3095,  1118,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,     0,     0,
     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
     427,   428,   429,   430,  1119,   432,     0,   433,   434,   435,
     436,   437,   438,   439,   440,   441,   442,   443,   444,   445,
     446,   447,   638,   449,     0,   450,   451,     0,   452,   453,
     454,   455,   456,   457,   458,     0,  1120,  1121,     0,   461,
       0,   462,   463,   639,   465,   640,  1122,   467,   468,   641,
     470,   471,   472,   473,   474,     0,     0,   475,   476,   477,
       0,   478,   479,   480,   481,     0,   482,   483,   484,   485,
     486,   487,  1123,     0,   489,   490,   491,   492,   493,   494,
     495,   496,   497,     0,     0,   498,     0,     0,   499,   500,
     501,   502,   503,   504,   505,   506,   507,   508,   509,   510,
     511,   512,   513,   514,   515,   516,   517,   518,   519,  1124,
       0,     0,     0,     0,     0,     0,  1125,  1126,  1127,     0,
       0,     0,     0,  1128,     0,  3096,     0,     0,     0,     0,
       0,  1130,  1131,     0,     0,     0,     0,  1132,  1133,   112,
    1085,   658,  1086,  1087,  1088,  1089,  1090,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   113,   114,
     115,   116,   117,   118,   119,   120,   121,     0,   122,   123,
     124,     0,     0,     0,     0,     0,   125,  1091,     0,     0,
     126,   127,   128,     0,   129,   130,   131,   132,   133,   134,
     135,  3760,  1092,   138,  1093,  1094,     0,   141,   142,   143,
     144,   145,   146,  1095,   627,   147,   148,  1096,  1097,   151,
       0,   152,   153,   154,   155,   628,     0,   629,     0,  1098,
     159,   160,   161,   162,   163,   164,   165,   166,   167,     0,
     168,   169,   170,   171,   172,   173,     0,   174,   175,   176,
    3761,   178,   179,   180,   181,   182,   183,   184,  1099,  1100,
     187,  1101,   188,     0,   189,   190,   191,   192,   193,   194,
       0,   195,   196,   197,   198,   199,   200,     0,     0,   201,
     202,   853,   204,   205,   206,   207,     0,   208,   209,   210,
       0,   211,   212,   213,     0,   214,   215,   216,   217,  1102,
     219,   220,   221,   222,   223,   630,  1103,   225,     0,   226,
     227,  1104,   229,     0,   230,     0,   231,   232,     0,   233,
     234,   235,   236,   237,   238,     0,   239,   240,     0,     0,
    1105,  1106,   243,   244,     0,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,     0,   257,   258,
     259,   260,   261,   262,   263,     0,   264,   265,   266,   267,
     268,   269,   270,   271,  1107,  1108,     0,  1109,     0,   275,
     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
     286,     0,     0,   287,   288,   289,   290,     0,   291,   292,
     293,   294,   295,   296,   297,   298,  1110,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,  1111,   319,  1112,   321,   322,
     323,   324,   325,  1113,   326,   327,   328,   329,  1114,   633,
     331,  1115,   333,   334,   335,     0,   336,   337,     0,     0,
    1116,   339,   340,     0,     0,   341,   342,   343,   344,   345,
     635,   347,   348,   349,   350,   351,   352,   353,   354,   355,
     356,   357,   358,     0,     0,     0,     0,   359,   360,   636,
     362,   363,   364,   365,   366,   367,   368,     0,   369,   370,
     371,   372,   373,   374,   375,   376,     0,   377,   378,   379,
    1117,   381,   382,   383,   384,     0,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
       0,   399,   400,   401,   402,   403,   404,  1118,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,     0,
       0,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,   428,   429,   430,  1119,   432,     0,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   638,   449,     0,   450,   451,     0,   452,
     453,   454,   455,   456,   457,   458,     0,  1120,  1121,     0,
     461,     0,   462,   463,   639,   465,   640,  1122,   467,   468,
     641,   470,   471,  3762,   473,   474,     0,     0,   475,   476,
     477,     0,   478,   479,   480,   481,     0,   482,   483,   484,
     485,   486,   487,  1123,     0,   489,   490,   491,   492,   493,
     494,   495,   496,   497,     0,     0,   498,     0,     0,   499,
     500,   501,   502,   503,   504,   505,   506,   507,   508,   509,
     510,   511,   512,   513,   514,   515,   516,   517,   518,   519,
    1124,     0,     0,     0,     0,     0,     0,  1125,  1126,  1127,
       0,     0,     0,     0,  1128,     0,  1129,     0,     0,     0,
       0,     0,  1130,  1131,     0,     0,     0,     0,  1132,  1133,
     112,  1085,   658,  1086,  1087,  1088,  1089,  1090,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   113,
     114,   115,   116,   117,   118,   119,   120,   121,     0,   122,
     123,   124,     0,     0,     0,     0,     0,   125,  1091,     0,
       0,   126,   127,   128,     0,   129,   130,   131,   132,   133,
     134,   135,   136,  1092,   138,  1093,  1094,     0,   141,   142,
     143,   144,   145,   146,  1095,   627,   147,   148,  1096,  1097,
     151,     0,   152,   153,   154,   155,   628,     0,   629,     0,
    1098,   159,   160,   161,   162,   163,   164,   165,   166,   167,
       0,   168,   169,   170,   171,   172,   173,     0,   174,   175,
     176,  3761,   178,   179,   180,   181,   182,   183,   184,  1099,
    1100,   187,  1101,   188,     0,   189,   190,   191,   192,   193,
     194,     0,   195,   196,   197,   198,   199,   200,     0,     0,
     201,   202,   853,   204,   205,   206,   207,     0,   208,   209,
     210,     0,   211,   212,   213,     0,   214,   215,   216,   217,
    1102,   219,   220,   221,   222,   223,   630,  1103,   225,     0,
     226,   227,  1104,   229,     0,   230,     0,   231,   232,     0,
     233,   234,   235,   236,   237,   238,     0,   239,   240,     0,
       0,  1105,  1106,   243,   244,     0,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,     0,   257,
     258,   259,   260,   261,   262,   263,     0,   264,   265,   266,
     267,   268,   269,   270,   271,  1107,  1108,     0,  1109,     0,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,     0,     0,   287,   288,   289,   290,     0,   291,
     292,   293,   294,   295,   296,   297,   298,  1110,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,  1111,   319,  1112,   321,
     322,   323,   324,   325,  1113,   326,   327,   328,   329,  1114,
     633,   331,  1115,   333,   334,   335,     0,   336,   337,     0,
       0,  1116,   339,   340,     0,     0,   341,   342,   343,   344,
     345,   635,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,     0,     0,     0,     0,   359,   360,
     636,   362,   363,   364,   365,   366,   367,   368,     0,   369,
     370,   371,   372,   373,   374,   375,   376,     0,   377,   378,
     379,  1117,   381,   382,   383,   384,     0,   385,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,     0,   399,   400,   401,   402,   403,   404,  1118,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
       0,     0,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,  1119,   432,     0,   433,
     434,   435,   436,   437,   438,   439,   440,   441,   442,   443,
     444,   445,   446,   447,   638,   449,     0,   450,   451,     0,
     452,   453,   454,   455,   456,   457,   458,     0,  1120,  1121,
       0,   461,     0,   462,   463,   639,   465,   640,  1122,   467,
     468,   641,   470,   471,  3762,   473,   474,     0,     0,   475,
     476,   477,     0,   478,   479,   480,   481,     0,   482,   483,
     484,   485,   486,   487,  1123,     0,   489,   490,   491,   492,
     493,   494,   495,   496,   497,     0,     0,   498,     0,     0,
     499,   500,   501,   502,   503,   504,   505,   506,   507,   508,
     509,   510,   511,   512,   513,   514,   515,   516,   517,   518,
     519,  1124,     0,     0,     0,     0,     0,     0,  1125,  1126,
    1127,     0,     0,     0,     0,  1128,     0,  1129,     0,     0,
       0,     0,     0,  1130,  1131,     0,     0,     0,     0,  1132,
    1133,   112,  1085,   658,  1086,  1087,     0,  1089,  1090,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     113,   114,   115,   116,   117,   118,   119,   120,   121,     0,
     122,   123,   124,     0,     0,     0,     0,     0,   125,  1091,
       0,     0,   126,   127,   128,     0,   129,   130,   131,   132,
     133,   134,   135,   136,  1092,   138,  1093,  1094,     0,   141,
     142,   143,   144,   145,   146,  1095,   627,   147,   148,  1096,
    1097,   151,     0,   152,   153,   154,   155,   628,     0,   629,
       0,   158,   159,   160,   161,   162,   163,   164,   165,   166,
     167,     0,   168,   169,   170,   171,   172,   173,     0,   174,
     175,   176,   177,   178,   179,   180,   181,   182,   183,   184,
    1099,  1100,   187,     0,   188,     0,   189,   190,   191,   192,
     193,   194,     0,   195,   196,   197,   198,   199,   200,     0,
       0,   201,   202,   853,   204,   205,   206,   207,     0,   208,
     209,   210,     0,   211,   212,   213,     0,   214,   215,   216,
     217,  1102,   219,   220,   221,   222,   223,   630,  1103,   225,
       0,   226,   227,  1104,   229,     0,   230,     0,   231,   232,
       0,   233,   234,   235,   236,   237,   238,     0,   239,   240,
       0,     0,  1105,  1106,   243,   244,     0,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,     0,
     257,   258,   259,   260,   261,   262,   263,     0,   264,   265,
     266,   267,   268,   269,   270,   271,  1107,  1108,     0,  1109,
       0,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,     0,     0,   287,   288,   289,   290,     0,
     291,   292,   293,   294,   295,   296,   297,   298,  1110,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,  1111,   319,  1112,
     321,   322,   323,   324,   325,  2880,   326,   327,   328,   329,
    1114,   633,   331,  1115,   333,   334,   335,     0,   336,   337,
       0,     0,   338,   339,   340,     0,     0,   341,   342,   343,
     344,   345,   635,   347,   348,   349,   350,   351,   352,   353,
     354,   355,   356,   357,   358,     0,     0,     0,     0,   359,
     360,   636,   362,   363,   364,   365,   366,   367,   368,     0,
     369,   370,   371,   372,   373,   374,   375,   376,     0,   377,
     378,   379,  1117,   381,   382,   383,   384,     0,   385,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,     0,   399,   400,   401,   402,   403,   404,  1118,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,     0,     0,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,   428,   429,   430,  1119,   432,     0,
     433,   434,   435,   436,   437,   438,   439,   440,   441,   442,
     443,   444,   445,   446,   447,   638,   449,     0,   450,   451,
       0,   452,   453,   454,   455,   456,   457,   458,     0,  1120,
    1121,     0,   461,     0,   462,   463,   639,   465,   640,  1122,
     467,   468,   641,   470,   471,   472,   473,   474,     0,     0,
     475,   476,   477,     0,   478,   479,   480,   481,     0,   482,
     483,   484,   485,   486,   487,  1123,     0,   489,   490,   491,
     492,   493,   494,   495,   496,   497,     0,     0,   498,     0,
       0,   499,   500,   501,   502,   503,   504,   505,   506,   507,
     508,   509,   510,   511,   512,   513,   514,   515,   516,   517,
     518,   519,  2881,     0,     0,     0,     0,     0,     0,  2882,
    2883,     0,     0,     0,     0,     0,  1128,     0,  1129,     0,
       0,     0,     0,     0,  1130,  1131,     0,     0,     0,     0,
    1132,  1133,   112,  1085,   658,  1086,  1087,  1088,  1089,  1090,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   113,   114,   115,   116,   117,   118,   119,   120,   121,
       0,   122,   123,   124,     0,     0,     0,     0,     0,   125,
    1091,     0,     0,   126,   127,   128,     0,   129,   130,   131,
     132,   133,   134,   135,   136,  1092,   138,  1093,  1094,     0,
     141,   142,   143,   144,   145,   146,  1095,   627,   147,   148,
    1096,  1097,   151,     0,   152,   153,   154,   155,   628,     0,
     629,     0,   158,   159,   160,   161,   162,   163,   164,   165,
     166,   167,     0,   168,   169,   170,   171,   172,   173,     0,
     174,   175,   176,   177,   178,   179,   180,   181,   182,   183,
     184,  1099,  1100,   187,     0,   188,     0,   189,   190,   191,
     192,   193,   194,     0,   195,   196,   197,   198,   199,   200,
       0,     0,   201,   202,   853,   204,   205,   206,   207,     0,
     208,   209,   210,     0,   211,   212,   213,     0,   214,   215,
     216,   217,  1102,   219,   220,   221,   222,   223,   630,  1103,
     225,     0,   226,   227,  1104,   229,     0,   230,     0,   231,
     232,     0,   233,   234,   235,   236,   237,   238,     0,   239,
     240,     0,     0,  1105,  1106,   243,   244,     0,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
       0,   257,   258,   259,   260,   261,   262,   263,     0,   264,
     265,   266,   267,   268,   269,   270,   271,  1107,  1108,     0,
    1109,     0,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,     0,     0,   287,   288,   289,   290,
       0,   291,   292,   293,   294,   295,   296,   297,   298,  1110,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,  1111,   319,
    1112,   321,   322,   323,   324,   325,     0,   326,   327,   328,
     329,  1114,   633,   331,  1115,   333,   334,   335,     0,   336,
     337,     0,     0,  1116,   339,   340,     0,     0,   341,   342,
     343,   344,   345,   635,   347,   348,   349,   350,   351,   352,
     353,   354,   355,   356,   357,   358,     0,     0,     0,     0,
     359,   360,   636,   362,   363,   364,   365,   366,   367,   368,
       0,   369,   370,   371,   372,   373,   374,   375,   376,     0,
     377,   378,   379,  1117,   381,   382,   383,   384,     0,   385,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,     0,   399,   400,   401,   402,   403,   404,
    1118,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,     0,     0,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,   427,   428,   429,   430,  1119,   432,
       0,   433,   434,   435,   436,   437,   438,   439,   440,   441,
     442,   443,   444,   445,   446,   447,   638,   449,     0,   450,
     451,     0,   452,   453,   454,   455,   456,   457,   458,     0,
    1120,  1121,     0,   461,     0,   462,   463,   639,   465,   640,
    1122,   467,   468,   641,   470,   471,   472,   473,   474,     0,
       0,   475,   476,   477,     0,   478,   479,   480,   481,     0,
     482,   483,   484,   485,   486,   487,  1123,     0,   489,   490,
     491,   492,   493,   494,   495,   496,   497,     0,     0,   498,
       0,     0,   499,   500,   501,   502,   503,   504,   505,   506,
     507,   508,   509,   510,   511,   512,   513,   514,   515,   516,
     517,   518,   519,     0,     0,     0,     0,     0,     0,     0,
    1549,  1550,     0,     0,     0,     0,     0,  1128,     0,  1129,
       0,     0,     0,     0,     0,  1130,  1131,     0,     0,     0,
       0,  1132,  1133,   112,  1085,   658,  1086,  1087,  1088,  1089,
    1090,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   113,   114,   115,   116,   117,   118,   119,   120,
     121,     0,   122,   123,   124,     0,     0,     0,     0,     0,
     125,  1091,     0,     0,   126,   127,   128,     0,   129,   130,
     131,   132,   133,   134,   135, -2159,  1092,   138,  1093,  1094,
       0,   141,   142,   143,   144,   145,   146,  1095,   627,   147,
     148,  1096,  1097,   151,     0,   152,   153,   154,   155,   628,
       0,   629,     0,  1098,   159,   160,   161,   162,   163,   164,
     165,   166,   167,     0,   168,   169,   170,   171,   172,   173,
       0,   174,   175,   176,  3761,   178,   179,   180,   181,   182,
     183,   184,  1099,  1100,   187,  1101,   188,     0,   189,   190,
     191,   192,   193,   194,     0,   195,   196,   197,   198,   199,
     200,     0,     0,   201,   202,   853,   204,   205,   206,   207,
       0,   208,   209,   210,     0,   211,   212,   213,     0,   214,
     215,   216,   217,  1102,   219,   220,   221,   222,   223,   630,
    1103,   225,     0,   226,   227,  1104,   229,     0,   230,     0,
     231,   232,     0,   233,   234,   235,   236, -2159,   238,     0,
     239,   240,     0,     0,  1105,  1106,   243,   244,     0,   245,
     246,   247,   248,   249,   250,   251, -2159,   253,   254,   255,
     256,     0,   257,   258,   259,   260,   261,   262,   263,     0,
     264,   265,   266,   267,   268,   269,   270,   271,  1107,  1108,
       0,  1109,     0,   275,     0,     0,   278,   279,   280,   281,
     282,   283,   284,   285,   286,     0,     0,   287,   288,   289,
   -2159,     0,   291,   292,   293,   294,   295,   296,   297,   298,
    1110,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,  1111,
     319,  1112,   321,   322,   323,   324,   325,     0,   326,   327,
       0,   329,  1114,   633,   331,  1115,   333,   334,   335,     0,
     336,   337,     0,     0,  1116,   339,   340,     0,     0,   341,
     342,   343,   344,   345,   635,   347,   348,   349,   350,   351,
     352,   353,   354,   355,   356,   357,   358,     0,     0,     0,
       0,   359,   360,   636,   362,   363,   364,   365,   366,   367,
     368,     0,   369,   370,   371,   372,   373,   374,   375,   376,
       0,   377,   378,   379,  1117,   381,   382,   383,   384,     0,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,     0,   399,   400,   401,   402,   403,
     404,  1118,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,     0,     0,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427, -2159,   429,   430,  1119,
     432,     0,   433,   434,   435,   436,   437,   438,   439,   440,
     441,   442,   443,   444,   445,   446,   447,   638,   449,     0,
     450,   451,     0,   452,   453,   454,   455,   456,   457,   458,
       0,  1120,  1121,     0,   461,     0,   462,   463,   639,   465,
     640,  1122,   467,   468,   641,   470,   471,  3762,   473,   474,
       0,     0,   475,   476,   477,     0,   478,   479,   480,   481,
       0,   482,   483,   484,   485,   486,   487,  1123,     0,   489,
     490,   491,   492,   493,   494,   495,   496,   497,     0,     0,
     498,     0,     0,   499,   500,   501,   502,   503,   504,   505,
     506,   507,   508,   509,   510,   511,   512,   513,   514,   515,
     516,   517,   518,   519, -2159,     0,     0,     0,     0,     0,
       0,  1125,  1126,  1127,     0,     0,     0,     0,  1128,     0,
    1129,     0,     0,     0,     0,     0,  1130,  1131,     0,     0,
       0,     0,  1132,  1133,   112,  1085,   658,  1086,  1087,     0,
    1089,  1090,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   113,   114,   115,   116,   117,   118,   119,
     120,   121,     0,   122,   123,   124,     0,     0,     0,     0,
       0,   125,  1091,     0,     0,   126,   127,   128,     0,   129,
     130,   131,   132,   133,   134,   135,   136,  1092,   138,  1093,
    1094,     0,   141,   142,   143,   144,   145,   146,  1095,   627,
     147,   148,  1096,  1097,   151,     0,   152,   153,   154,   155,
     628,     0,   629,     0,   158,   159,   160,   161,   162,   163,
     164,   165,   166,   167,     0,   168,   169,   170,   171,   172,
     173,     0,   174,   175,   176,   177,   178,   179,   180,   181,
     182,   183,   184,  1099,  1100,   187,     0,   188,     0,   189,
     190,   191,   192,   193,   194,     0,   195,   196,   197,   198,
     199,   200,     0,     0,   201,   202,   853,   204,   205,   206,
     207,     0,   208,   209,   210,     0,   211,   212,   213,     0,
     214,   215,   216,   217,  1102,   219,   220,   221,   222,   223,
     630,  1103,   225,     0,   226,   227,  1104,   229,     0,   230,
       0,   231,   232,     0,   233,   234,   235,   236,   237,   238,
       0,   239,   240,     0,     0,  1105,  1106,   243,   244,     0,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,     0,   257,   258,   259,   260,   261,   262,   263,
       0,   264,   265,   266,   267,   268,   269,   270,   271,  1107,
    1108,     0,  1109,     0,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,     0,     0,   287,   288,
     289,   290,     0,   291,   292,   293,   294,   295,   296,   297,
     298,  1110,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
    1111,   319,  1112,   321,   322,   323,   324,   325,     0,   326,
     327,   328,   329,  1114,   633,   331,  1115,   333,   334,   335,
       0,   336,   337,     0,     0,   338,   339,   340,     0,     0,
     341,   342,   343,   344,   345,   635,   347,   348,   349,   350,
     351,   352,   353,   354,   355,   356,   357,   358,     0,     0,
       0,     0,   359,   360,   636,   362,   363,   364,   365,   366,
     367,   368,     0,   369,   370,   371,   372,   373,   374,   375,
     376,     0,   377,   378,   379,  1117,   381,   382,   383,   384,
       0,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,     0,   399,   400,   401,   402,
     403,   404,  2217,  2218,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,     0,     0,   417,   418,   419,   420,
     421,   422,   423,   424,   425,   426,   427,   428,   429,   430,
    1119,   432,     0,   433,   434,   435,   436,   437,   438,   439,
     440,   441,   442,   443,   444,   445,   446,   447,   638,   449,
       0,   450,   451,     0,   452,   453,   454,   455,   456,   457,
     458,     0,  1120,  1121,     0,   461,     0,   462,   463,   639,
     465,   640,  1122,   467,   468,   641,   470,   471,   472,   473,
     474,     0,     0,   475,   476,   477,     0,   478,   479,   480,
     481,     0,   482,   483,   484,   485,   486,   487,  1123,     0,
     489,   490,   491,   492,   493,   494,   495,   496,   497,     0,
       0,   498,     0,     0,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,   517,   518,   519,     0,     0,     0,     0,     0,
       0,     0,  2219,  2220,     0,     0,     0,     0,     0,  1128,
       0,  1129,     0,     0,     0,     0,     0,  1130,  1131,     0,
       0,     0,     0,  1132,  1133,   112,  1085,   658,  1086,  1087,
    1088,  1089,  1090,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   113,   114,   115,   116,   117,   118,
     119,   120,   121,     0,   122,   123,   124,     0,     0,     0,
       0,     0,   125,  1091,     0,     0,   126,   127,   128,     0,
     129,   130,   131,   132,   133,   134,   135,   136,  1092,   138,
    1093,  1094,     0,   141,   142,   143,   144,   145,   146,  1095,
     627,   147,   148,  1096,  1097,   151,     0,   152,   153,   154,
     155,   628,     0,   629,     0,   158,   159,   160,   161,   162,
     163,   164,   165,   166,   167,     0,   168,   169,   170,   171,
     172,   173,     0,   174,   175,   176,   177,   178,   179,   180,
     181,   182,   183,   184,  1099,  1100,   187,     0,   188,     0,
     189,   190,   191,   192,   193,   194,     0,   195,   196,   197,
     198,   199,   200,     0,     0,   201,   202,   853,   204,   205,
     206,   207,     0,   208,   209,   210,     0,   211,   212,   213,
       0,   214,   215,   216,   217,  1102,   219,   220,   221,   222,
     223,   630,  1103,   225,     0,   226,   227,  1104,   229,     0,
     230,     0,   231,   232,     0,   233,   234,   235,   236,   237,
     238,     0,   239,   240,     0,     0,  1105,  1106,   243,   244,
       0,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,     0,   257,   258,   259,   260,   261,   262,
     263,     0,   264,   265,   266,   267,   268,   269,   270,   271,
    1107,  1108,     0,  1109,     0,   275,     0,   277,   278,   279,
     280,   281,   282,   283,   284,   285,   286,     0,     0,   287,
     288,   289,   290,     0,   291,   292,   293,   294,   295,   296,
     297,   298,  1110,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,  1111,   319,  1112,   321,   322,   323,   324,   325,     0,
     326,   327,   328,   329,  1114,   633,   331,  1115,   333,   334,
     335,     0,   336,   337,     0,     0,  1116,   339,   340,     0,
       0,   341,   342,   343,   344,   345,   635,   347,   348,   349,
     350,   351,   352,   353,   354,   355,   356,   357,   358,     0,
       0,     0,     0,   359,   360,   636,   362,   363,   364,   365,
     366,   367,   368,     0,   369,   370,   371,   372,   373,   374,
     375,   376,     0,   377,   378,   379,  1117,   381,   382,   383,
     384,     0,   385,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,     0,   399,   400,   401,
     402,   403,   404,  1118,   406,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,     0,     0,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,   428,   429,
     430,  1119,   432,     0,   433,   434,   435,   436,   437,   438,
     439,   440,   441,   442,   443,   444,   445,   446,   447,   638,
     449,     0,   450,   451,     0,   452,   453,   454,   455,   456,
     457,   458,     0,  1120,  1121,     0,   461,     0,   462,   463,
     639,   465,   640,  1122,   467,   468,   641,   470,   471,   472,
     473,   474,     0,     0,   475,   476,   477,     0,   478,   479,
     480,   481,     0,   482,   483,   484,   485,   486,   487,  1123,
       0,   489,   490,   491,   492,   493,   494,   495,   496,   497,
       0,     0,   498,     0,     0,   499,   500,   501,   502,   503,
     504,   505,   506,   507,   508,   509,   510,   511,   512,   513,
     514,   515,   516,   517,   518,   519,     0,     0,     0,     0,
       0,     0,     0,  1549,  1550,     0,     0,     0,     0,     0,
    1128,     0,  1129,     0,     0,     0,     0,     0,  1130,  1131,
       0,     0,     0,     0,  1132,  1133,   112,  1085,   658,  1086,
    1087,     0,  1089,  1090,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   113,   114,   115,   116,   117,
     118,   119,   120,   121,     0,   122,   123,   124,     0,     0,
       0,     0,     0,   125,  1091,     0,     0,   126,   127,   128,
       0,   129,   130,   131,   132,   133,   134,   135,   136,  1092,
     138,  1093,  1094,     0,   141,   142,   143,   144,   145,   146,
    1095,   627,   147,   148,  1096,  1097,   151,     0,   152,   153,
     154,   155,   628,     0,   629,     0,   158,   159,   160,   161,
     162,   163,   164,   165,   166,   167,     0,   168,   169,   170,
     171,   172,   173,     0,   174,   175,   176,   177,   178,   179,
     180,   181,   182,   183,   184,  1099,  1100,   187,     0,   188,
       0,   189,   190,   191,   192,   193,   194,     0,   195,   196,
     197,   198,   199,   200,     0,     0,   201,   202,   853,   204,
     205,   206,   207,     0,   208,   209,   210,     0,   211,   212,
     213,     0,   214,   215,   216,   217,  1102,   219,   220,   221,
     222,   223,   630,  1103,   225,     0,   226,   227,  1104,   229,
       0,   230,     0,   231,   232,     0,   233,   234,   235,   236,
     237,   238,     0,   239,   240,     0,     0,  1105,  1106,   243,
     244,     0,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,     0,   257,   258,   259,   260,   261,
     262,   263,     0,   264,   265,   266,   267,   268,   269,   270,
     271,  1107,  1108,     0,  1109,     0,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,     0,     0,
     287,   288,   289,   290,     0,   291,   292,   293,   294,   295,
     296,   297,   298,  1110,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,  1111,   319,  1112,   321,   322,   323,   324,   325,
       0,   326,   327,   328,   329,  1114,   633,   331,  1115,   333,
     334,   335,     0,   336,   337,     0,     0,   338,   339,   340,
       0,     0,   341,   342,   343,   344,   345,   635,   347,   348,
     349,   350,   351,   352,   353,   354,   355,   356,   357,   358,
       0,     0,     0,     0,   359,   360,   636,   362,   363,   364,
     365,   366,   367,   368,     0,   369,   370,   371,   372,   373,
     374,   375,   376,     0,   377,   378,   379,  1117,   381,   382,
     383,   384,     0,   385,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,     0,   399,   400,
     401,   402,   403,   404,  1118,   406,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,     0,     0,   417,   418,
     419,   420,   421,   422,   423,   424,   425,   426,   427,   428,
     429,   430,  1119,   432,     0,   433,   434,   435,   436,   437,
     438,   439,   440,   441,   442,   443,   444,   445,   446,   447,
     638,   449,     0,   450,   451,     0,   452,   453,   454,   455,
     456,   457,   458,     0,  1120,  1121,     0,   461,     0,   462,
     463,   639,   465,   640,  1122,   467,   468,   641,   470,   471,
     472,   473,   474,     0,     0,   475,   476,   477,     0,   478,
     479,   480,   481,     0,   482,   483,   484,   485,   486,   487,
    1123,     0,   489,   490,   491,   492,   493,   494,   495,   496,
     497,     0,     0,   498,     0,     0,   499,   500,   501,   502,
     503,   504,   505,   506,   507,   508,   509,   510,   511,   512,
     513,   514,   515,   516,   517,   518,   519,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1128,     0,  1129,     0,     0,     0,     0,     0,  1130,
    1131,     0,     0,     0,     0,  1132,  1133,   112,  1085,   658,
    1086,  1087,     0,  1089,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   113,   114,   115,   116,
     117,   118,   119,   120,   121,     0,   122,   123,   124,     0,
       0,     0,     0,     0,   125,  1091,     0,     0,   126,   127,
     128,     0,   129,   130,   131,   132,   133,   134,   135,   136,
    1092,   138,  1093,  1094,     0,   141,   142,   143,   144,   145,
     146,  1095,     0,   147,   148,  1096,  1097,   151,     0,   152,
     153,   154,   155,   156,     0,   157,     0,   158,   159,   160,
     161,   162,   163,   164,   165,   166,   167,     0,   168,   169,
     170,   171,   172,   173,     0,   174,   175,   176,   177,   178,
     179,   180,   181,   182,   183,   184,  1099,  1100,   187,     0,
     188,     0,   189,   190,   191,   192,   193,   194,     0,   195,
     196,   197,   198,   199,   200,     0,     0,   201,   202,   853,
     204,   205,   206,   207,     0,   208,   209,   210,     0,   211,
     212,   213,     0,   214,   215,   216,   217,  1102,   219,   220,
     221,   222,   223,   224,  1103,   225,     0,   226,   227,  1104,
     229,     0,   230,     0,   231,   232,     0,   233,   234,   235,
     236,   237,   238,     0,   239,   240,     0,  3113,  1105,  1106,
     243,   244,     0,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,     0,   257,   258,   259,   260,
     261,   262,   263,     0,   264,   265,   266,   267,   268,   269,
     270,   271,  1107,  1108,     0,  1109,     0,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,   286,     0,
       0,   287,   288,   289,   290,     0,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,  1111,   319,  1112,   321,   322,   323,   324,
     325,     0,   326,   327,   328,   329,  1114,   330,   331,  1115,
     333,   334,   335,     0,   336,   337,     0,     0,   338,   339,
     340,     0,     0,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,   351,   352,   353,   354,   355,   356,   357,
     358,     0,     0,     0,     0,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,     0,   369,   370,   371,   372,
     373,   374,   375,   376,     0,   377,   378,   379,  1117,   381,
     382,   383,   384,     0,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,     0,   399,
     400,   401,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,     0,     0,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   429,   430,  1119,   432,     0,   433,   434,   435,   436,
     437,   438,   439,   440,   441,   442,   443,   444,   445,   446,
     447,   448,   449,     0,   450,   451,     0,   452,   453,   454,
     455,   456,   457,   458,     0,  1120,  1121,     0,   461,     0,
     462,   463,   464,   465,   466,  1122,   467,   468,   469,   470,
     471,   472,   473,   474,     0,     0,   475,   476,   477,     0,
     478,   479,   480,   481,     0,   482,   483,   484,   485,   486,
     487,  1123,     0,   489,   490,   491,   492,   493,   494,   495,
     496,   497,     0,     0,   498,     0,     0,   499,   500,   501,
     502,   503,   504,   505,   506,   507,   508,   509,   510,   511,
     512,   513,   514,   515,   516,   517,   518,   519,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1128,     0,  2792,   112,  1085,   658,  1086,  1087,
    1088,  1089,  1090,     0,     0,     0,  1132,  1133,     0,     0,
       0,     0,     0,     0,   113,   114,   115,   116,   117,   118,
     119,   120,   121,     0,   122,   123,   124,     0,     0,     0,
       0,     0,   125,  1091,     0,     0,   126,   127,   128,     0,
     129,   130,   131,   132,   133,   134,   135,     0,  1092,   138,
    1093,  1094,     0,   141,   142,   143,   144,   145,   146,  1095,
     627,   147,   148,  1096,  1097,   151,     0,   152,   153,   154,
     155,   628,     0,   629,     0,  1098,   159,   160,   161,   162,
     163,   164,   165,   166,   167,     0,   168,   169,   170,   171,
     172,   173,     0,   174,   175,   176,   177,   178,   179,   180,
     181,   182,   183,   184,  1099,  1100,   187,  1101,   188,     0,
     189,   190,   191,   192,   193,   194,     0,   195,   196,   197,
     198,   199,   200,     0,     0,   201,   202,   853,   204,   205,
     206,   207,     0,   208,   209,   210,     0,   211,     0,   213,
       0,   214,   215,   216,   217,  1102,   219,   220,   221,   222,
     223,   630,  1103,   225,     0,   226,   227,  1104,   229,     0,
     230,     0,   231,   232,     0,   233,   234,   235,   236,     0,
     238,     0,   239,   240,     0,     0,  1105,  1106,   243,   244,
       0,   245,   246,   247,   248,   249,   250,   251,     0,   253,
     254,   255,   256,     0,   257,   258,   259,   260,   261,   262,
     263,     0,   264,   265,   266,   267,   268,   269,   270,   271,
    1107,  1108,     0,  1109,     0,   275,     0,     0,   278,   279,
     280,   281,   282,   283,   284,   285,   286,     0,     0,   287,
     288,   289,     0,     0,   291,   292,   293,   294,   295,   296,
     297,   298,  1110,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,  1111,   319,  1112,   321,   322,   323,   324,   325,     0,
     326,   327,     0,   329,  1114,   633,   331,  1115,   333,   334,
     335,     0,   336,   337,     0,     0,  1116,   339,   340,     0,
       0,   341,   342,   343,   344,   345,   635,   347,   348,   349,
     350,   351,   352,   353,   354,   355,   356,   357,   358,     0,
       0,     0,     0,   359,   360,   636,   362,   363,   364,   365,
     366,   367,   368,     0,   369,   370,   371,   372,   373,   374,
     375,   376,     0,   377,   378,   379,  1117,   381,   382,   383,
     384,     0,   385,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,     0,   399,   400,   401,
     402,   403,   404,  1118,   406,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,     0,     0,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,     0,   429,
     430,  1119,   432,     0,   433,   434,   435,   436,   437,   438,
     439,   440,   441,   442,   443,   444,   445,   446,   447,   638,
     449,     0,   450,   451,     0,   452,   453,   454,   455,   456,
     457,   458,     0,  1120,  1121,     0,   461,     0,   462,   463,
     639,   465,   640,  1122,   467,   468,   641,   470,   471,   472,
     473,   474,     0,     0,   475,   476,   477,     0,   478,   479,
     480,   481,     0,   482,   483,   484,   485,   486,   487,  1123,
       0,   489,   490,   491,   492,   493,   494,   495,   496,   497,
       0,     0,   498,     0,     0,   499,   500,   501,   502,   503,
     504,   505,   506,   507,   508,   509,   510,   511,   512,   513,
     514,   515,   516,   517,   518,   519,     0,     0,     0,     0,
       0,     0,     0,  1125,  1126,  1127,     0,     0,     0,     0,
    1128,     0,  1129,     0,     0,     0,     0,     0,  1130,  1131,
       0,     0,     0,     0,  1132,  1133,   112,  1085,   658,  1086,
    1087,     0,  1089,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   113,   114,   115,   116,   117,
     118,   119,   120,   121,     0,   122,   123,   124,     0,     0,
       0,     0,     0,   125,  1091,     0,     0,   126,   127,   128,
       0,   129,   130,   131,   132,   133,   134,   135,   136,  1092,
     138,  1093,  1094,     0,   141,   142,   143,   144,   145,   146,
    1095,     0,   147,   148,  1096,  1097,   151,     0,   152,   153,
     154,   155,   156,     0,   157,     0,   158,   159,   160,   161,
     162,   163,   164,   165,   166,   167,     0,   168,   169,   170,
     171,   172,   173,     0,   174,   175,   176,   177,   178,   179,
     180,   181,   182,   183,   184,  1099,  1100,   187,     0,   188,
       0,   189,   190,   191,   192,   193,   194,     0,   195,   196,
     197,   198,   199,   200,     0,     0,   201,   202,   853,   204,
     205,   206,   207,     0,   208,   209,   210,     0,   211,   212,
     213,     0,   214,   215,   216,   217,  1102,   219,   220,   221,
     222,   223,   224,  1103,   225,     0,   226,   227,  1104,   229,
       0,   230,     0,   231,   232,     0,   233,   234,   235,   236,
     237,   238,     0,   239,   240,     0,     0,  1105,  1106,   243,
     244,     0,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,     0,   257,   258,   259,   260,   261,
     262,   263,     0,   264,   265,   266,   267,   268,   269,   270,
     271,  1107,  1108,     0,  1109,     0,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,     0,     0,
     287,   288,   289,   290,     0,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,  1111,   319,  1112,   321,   322,   323,   324,   325,
       0,   326,   327,   328,   329,  1114,   330,   331,  1115,   333,
     334,   335,     0,   336,   337,     0,     0,   338,   339,   340,
       0,     0,   341,   342,   343,   344,   345,   346,   347,   348,
     349,   350,   351,   352,   353,   354,   355,   356,   357,   358,
       0,     0,     0,     0,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,     0,   369,   370,   371,   372,   373,
     374,   375,   376,     0,   377,   378,   379,  1117,   381,   382,
     383,   384,     0,   385,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,     0,   399,   400,
     401,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,     0,     0,   417,   418,
     419,   420,   421,   422,   423,   424,   425,   426,   427,   428,
     429,   430,  1119,   432,     0,   433,   434,   435,   436,   437,
     438,   439,   440,   441,   442,   443,   444,   445,   446,   447,
     448,   449,     0,   450,   451,     0,   452,   453,   454,   455,
     456,   457,   458,     0,  1120,  1121,     0,   461,     0,   462,
     463,   464,   465,   466,  1122,   467,   468,   469,   470,   471,
     472,   473,   474,     0,     0,   475,   476,   477,     0,   478,
     479,   480,   481,     0,   482,   483,   484,   485,   486,   487,
    1123,     0,   489,   490,   491,   492,   493,   494,   495,   496,
     497,     0,     0,   498,     0,     0,   499,   500,   501,   502,
     503,   504,   505,   506,   507,   508,   509,   510,   511,   512,
     513,   514,   515,   516,   517,   518,   519,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   708,     0,
       0,  1128,     0,  2792,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1132,  1133,   113,   114,   115,
     116,     0,   118,   119,   120,   121,     0,   122,   123,   124,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     127,   128,     0,   129,   130,   131,     0,   133,   134,   135,
     709,   710,     0,   711,   712,     0,   141,   142,   143,   144,
     145,   146,     0,     0,   147,   148,   713,   714,   151,     0,
     152,   153,   154,   155,   715,     0,     0,     0,     0,   159,
     160,   161,   162,   163,     0,   165,   166,   167,     0,   168,
     169,   170,   171,   172,     0,     0,     0,   175,   176,   177,
     178,   179,   180,   181,   182,   183,   184,   716,   717,   187,
       0,   188,     0,   189,   190,   191,   192,   193,   194,     0,
     195,     0,   197,   198,   199,   200,     0,     0,   201,   202,
     203,   204,   205,     0,     0,     0,   208,   209,   210,     0,
     211,   212,   213,     0,   214,   215,   216,   217,   718,   219,
     220,   221,   222,   223,   719,     0,   225,     0,   226,   227,
     720,   229,     0,   230,     0,   231,     0,     0,     0,   234,
     235,   721,     0,   238,     0,   239,     0,     0,     0,   722,
     723,     0,   244,     0,   245,   246,   247,   248,   249,   250,
     251,     0,   253,   254,   255,   256,     0,   257,   258,   259,
     260,   261,   262,   263,     0,   264,     0,   724,   267,   268,
     269,   270,   271,   725,   726,     0,   727,     0,   275,     0,
       0,   278,     0,   280,     0,   282,   283,   284,   285,   286,
       0,     0,   287,     0,   289,     0,     0,   291,   292,   293,
     294,   295,   296,   297,   298,   728,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   729,     0,   730,   321,   322,   323,
       0,   731,     0,   326,   327,     0,   329,     0,   732,   331,
     733,   333,   334,   335,     0,   336,   337,     0,     0,   338,
     339,   340,     0,     0,   341,   734,     0,   344,     0,   735,
     347,   348,   349,   350,   351,   352,   353,   354,   355,     0,
       0,   358,     0,     0,     0,     0,   359,   360,   736,     0,
     363,   364,   737,   366,   367,   368,     0,   369,   370,   371,
     372,   373,     0,     0,   376,     0,   377,   378,   379,   738,
     381,   382,   383,   384,     0,   385,   386,   387,     0,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,     0,
     399,   400,     0,   402,   403,   404,   739,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,     0,     0,
     417,   418,   419,   420,   421,   422,   740,   424,   425,     0,
     427,     0,     0,   430,   741,   432,     0,     0,   434,   435,
     436,   437,   438,   439,   440,   441,   442,   443,   444,   445,
     742,   447,   743,   449,     0,   450,   451,     0,   452,     0,
     454,   455,   456,   457,   458,     0,   744,   745,     0,     0,
       0,   462,   463,   746,   465,   747,     0,   467,   468,   748,
     470,   471,   472,   473,   474,     0,     0,   475,   476,   477,
       0,   478,   479,   480,   481,     0,   482,   483,   484,   485,
     486,  1542,   750,     0,   489,     0,   491,     0,   493,   494,
     495,   496,     0,     0,     0,   498,     0,     0,   499,   500,
     501,   502,   503,   504,   751,   752,   753,   754,   755,   756,
     757,   758,   759,   760,   761,   516,   517,   518,   519,     0,
       0,     0,     0,     0,     0,     0,     0,   924,  1507,   658,
       0,     0,     0,  1089,     0,  3368,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  3369,   113,   114,   115,   116,
     117,   118,   119,   120,   121,     0,   122,   123,   124,     0,
       0,     0,   925,     0,   125,     0,     0,     0,   926,   127,
     128,     0,   129,   130,   131,   927,   133,   134,   135,   928,
     929,   930,   931,   932,     0,   141,   142,   143,   144,   145,
     146,     0,     0,   147,   148,   933,   934,   151,     0,   152,
     153,   154,   155,   935,     0,   936,     0,   937,   159,   160,
     161,   162,   163,   938,   165,   166,   167,     0,   168,   169,
     170,   171,   172,   173,     0,   939,   175,   176,   177,   178,
     179,   180,   181,   182,   183,   184,   940,   941,   187,     0,
     188,     0,   189,   190,   191,   192,   193,   194,     0,   195,
     196,   197,   198,   199,   200,     0,     0,   201,   202,   203,
     204,   205,   206,   207,     0,   208,   209,   210,     0,   211,
     212,   213,     0,   214,   215,   216,   217,   942,   219,   220,
     221,   222,   223,   943,  1508,   225,     0,   226,   227,   944,
     229,     0,   230,     0,   231,   945,     0,   946,   234,   235,
     947,   948,   238,     0,   239,   240,     0,     0,   949,   950,
     243,   244,     0,   245,   246,   247,   248,   249,   250,   251,
     951,   253,   254,   255,   256,     0,   257,   258,   259,   260,
     261,   262,   263,     0,   264,   952,   953,   267,   268,   269,
     270,   271,   954,   955,     0,   956,     0,   275,   957,   958,
     278,   959,   280,   281,   282,   283,   284,   285,   286,     0,
       0,   287,   960,   289,   961,     0,   291,   292,   293,   294,
     295,   296,   297,   298,   962,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   963,   964,   965,   321,   322,   323,   324,
     966,     0,   326,   327,   967,   329,     0,   968,   331,   969,
     333,   334,   335,     0,   336,   337,  1509,     0,   338,   339,
     340,     0,     0,   341,   970,   971,   344,   972,   973,   347,
     348,   349,   350,   351,   352,   353,   354,   355,   356,   357,
     358,     0,     0,     0,     0,   359,   360,   974,   975,   363,
     364,   976,   366,   367,   368,     0,   369,   370,   371,   372,
     373,   374,   375,   376,     0,   377,   378,   379,   977,   381,
     382,   383,   384,     0,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,     0,   399,
     400,   978,   402,   403,   404,   979,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,     0,   980,   417,
     418,   419,   420,   421,   422,   981,   424,   425,   426,   427,
     982,   429,   430,   983,   432,     0,   433,   434,   435,   436,
     437,   438,   439,   440,   441,   442,   443,   444,   445,   984,
     447,   985,   449,     0,   450,   451,     0,   452,   986,   454,
     455,   456,   457,   458,     0,   987,   988,     0,   461,     0,
     462,   463,   989,   465,   990,  1510,   467,   468,   991,   470,
     471,   472,   473,   474,     0,     0,   475,   476,   477,     0,
     478,   479,   480,   481,     0,   482,   483,   484,   485,   486,
    1346,   993,     0,   489,   994,   491,   492,   493,   494,   495,
     496,   497,     0,     0,   498,     0,     0,   499,   500,   501,
     502,   503,   504,   995,   996,   997,   998,   999,  1000,  1001,
    1002,  1003,  1004,  1005,   516,   517,   518,   519,     0,     0,
       0,     0,     0,   528,     0,  1511,  1512,  2406,     0,     0,
       0,     0,     0,     0,  2407,     0,     0,     0,     0,     0,
       0,  1131,   113,   114,   115,   116,   117,   118,   119,   120,
     121,     0,   122,   123,   124,     0,     0,     0,     0,     0,
     125,     0,  1043,     0,     0,   127,   128,     0,   129,   130,
     131,     0,   133,   134,   135,   136,   137,     0,   139,   140,
       0,   141,   142,   143,   144,   145,   146,     0,     0,   147,
     148,   149,   150,   151,     0,   152,   153,   154,   155,   156,
       0,     0,     0,   158,   159,   160,   161,   162,   163,     0,
     165,   166,   167,     0,   168,   169,   170,   171,   172,   173,
       0,     0,   175,   176,   177,   178,   179,   180,   181,   182,
     183,   184,   185,   186,   187,     0,   188,     0,   189,   190,
     191,   192,   193,   194,     0,   195,   196,   197,   198,   199,
     200,     0,     0,   201,   202,   203,   204,   205,   206,   207,
       0,   208,   209,   210,     0,   211,   212,   213,  -691,   214,
     215,   216,   217,   218,   219,   220,   221,   222,   223,   224,
       0,   225,  -691,   226,   227,   228,   229,  -691,   230,     0,
     231,     0,     0,     0,   234,   235,   529,     0,   238,     0,
     239,   240,     0,     0,   241,   242,   243,   244,     0,   245,
     246,   247,   248,   249,   250,   251,     0,   253,   254,   255,
     256,     0,   257,   258,   259,   260,   261,   262,   263,     0,
     264,     0,   266,   267,   268,   269,   270,   271,   272,   273,
    -691,   274,     0,   275,     0,     0,   278,     0,   280,   281,
     282,   283,   284,   285,   286,     0,     0,   287,     0,   289,
       0,  -691,   291,   292,   293,   294,   295,   296,   297,   298,
     530,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
       0,   320,   321,   322,   323,   324,   325,     0,   326,   327,
       0,   329,     0,   330,   331,   332,   333,   334,   335,  -691,
     336,   337,     0,     0,   338,   339,   340,     0,  -691,   341,
     342,     0,   344,     0,   346,   347,   348,   349,   350,   351,
     352,   353,   354,   355,   356,   357,   358,     0,     0,     0,
       0,   359,   360,   361,     0,   363,   364,   365,   366,   367,
     368,     0,   369,   370,   371,   372,   373,   374,   375,   376,
       0,   377,   378,   379,   380,   381,   382,   383,   384,     0,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,     0,   399,   400,     0,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,     0,     0,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,     0,   429,   430,   431,
     432,     0,   433,   434,   435,   436,   437,   438,   439,   440,
     441,   442,   443,   444,   445,   531,   447,   448,   449,     0,
     450,   451,     0,   452,     0,   454,   455,   456,   457,   458,
       0,   459,   460,     0,   461,     0,   462,   463,   464,   465,
     466,     0,   467,   468,   469,   470,   471,   472,   473,   474,
    -691,     0,   475,   476,   477,     0,   478,   479,   480,   481,
       0,   482,   483,   484,   485,   486,   487,   488,     0,   489,
       0,   491,   492,   493,   494,   495,   496,   497,     0,     0,
     498,     0,     0,   499,   500,   501,   502,   503,   504,   505,
     506,   507,   508,   509,   510,   511,   512,   513,   514,   515,
     516,   517,   518,   519,   528,     0,   552,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1199,     0,   113,   114,   115,   116,   117,   118,   119,
     120,   121,     0,   122,   123,   124,     0,     0,     0,     0,
       0,   125,     0,     0,     0,     0,   127,   128,     0,   129,
     130,   131,     0,   133,   134,   135,   136,   137,     0,   139,
     140,     0,   141,   142,   143,   144,   145,   146,     0,     0,
     147,   148,   149,   150,   151,     0,   152,   153,   154,   155,
     156,     0,     0,     0,   158,   159,   160,   161,   162,   163,
       0,   165,   166,   167,     0,   168,   169,   170,   171,   172,
     173,     0,     0,   175,   176,   177,   178,   179,   180,   181,
     182,   183,   184,   185,   186,   187,     0,   188,     0,   189,
     190,   191,   192,   193,   194,     0,   195,   196,   197,   198,
     199,   200,     0,     0,   201,   202,   203,   204,   205,   206,
     207,     0,   208,   209,   210,     0,   211,   212,   213,     0,
     214,   215,   216,   217,   218,   219,   220,   221,   222,   223,
     224,     0,   225,     0,   226,   227,   228,   229,     0,   230,
       0,   231,     0,     0,     0,   234,   235,   529,     0,   238,
       0,   239,   240,     0,     0,   241,   242,   243,   244,     0,
     245,   246,   247,   248,   249,   250,   251,     0,   253,   254,
     255,   256,     0,   257,   258,   259,   260,   261,   262,   263,
       0,   264,     0,   266,   267,   268,   269,   270,   271,   272,
     273,     0,   274,     0,   275,     0,     0,   278,     0,   280,
     281,   282,   283,   284,   285,   286,     0,     0,   287,     0,
     289,     0,     0,   291,   292,   293,   294,   295,   296,   297,
     298,   530,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,     0,   320,   321,   322,   323,   324,   325,     0,   326,
     327,     0,   329,     0,   330,   331,   332,   333,   334,   335,
       0,   336,   337,     0,     0,   338,   339,   340,     0,     0,
     341,   342,     0,   344,     0,   346,   347,   348,   349,   350,
     351,   352,   353,   354,   355,   356,   357,   358,     0,     0,
       0,     0,   359,   360,   361,     0,   363,   364,   365,   366,
     367,   368,     0,   369,   370,   371,   372,   373,   374,   375,
     376,     0,   377,   378,   379,   380,   381,   382,   383,   384,
       0,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,     0,   399,   400,     0,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,     0,     0,   417,   418,   419,   420,
     421,   422,   423,   424,   425,   426,   427,     0,   429,   430,
     431,   432,     0,   433,   434,   435,   436,   437,   438,   439,
     440,   441,   442,   443,   444,   445,   531,   447,   448,   449,
       0,   450,   451,     0,   452,     0,   454,   455,   456,   457,
     458,     0,   459,   460,     0,   461,     0,   462,   463,   464,
     465,   466,     0,   467,   468,   469,   470,   471,   472,   473,
     474,     0,     0,   475,   476,   477,     0,   478,   479,   480,
     481,     0,   482,   483,   484,   485,   486,   487,   488,     0,
     489,     0,   491,   492,   493,   494,   495,   496,   497,     0,
       0,   498,     0,     0,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,   517,   518,   519,   112,     0,   552,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  2491,  3346,     0,   113,   114,   115,   116,   117,   118,
     119,   120,   121,     0,   122,   123,   124,     0,     0,     0,
       0,     0,   125,     0,     0,     0,   126,   127,   128,     0,
     129,   130,   131,   132,   133,   134,   135,   136,   137,   138,
     139,   140,     0,   141,   142,   143,   144,   145,   146,     0,
     627,   147,   148,   149,   150,   151,     0,   152,   153,   154,
     155,   628,     0,   629,     0,   158,   159,   160,   161,   162,
     163,   164,   165,   166,   167,     0,   168,   169,   170,   171,
     172,   173,     0,   174,   175,   176,   177,   178,   179,   180,
     181,   182,   183,   184,   185,   186,   187,     0,   188,     0,
     189,   190,   191,   192,   193,   194,     0,   195,   196,   197,
     198,   199,   200,     0,     0,   201,   202,   203,   204,   205,
     206,   207,     0,   208,   209,   210,     0,   211,   212,   213,
       0,   214,   215,   216,   217,   218,   219,   220,   221,   222,
     223,   630,     0,   225,     0,   226,   227,   228,   229,     0,
     230,     0,   231,   232,    21,   233,   234,   235,   236,   237,
     238,     0,   239,   240,   631,     0,   241,   242,   243,   244,
       0,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,     0,   257,   258,   259,   260,   261,   262,
     263,     0,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,     0,   274,     0,   275,   276,   277,   278,   279,
     280,   281,   282,   283,   284,   285,   286,   632,     0,   287,
     288,   289,   290,     0,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,   323,   324,   325,     0,
     326,   327,   328,   329,     0,   633,   331,   332,   333,   334,
     335,     0,   336,   337,     0,   634,   338,   339,   340,     0,
       0,   341,   342,   343,   344,   345,   635,   347,   348,   349,
     350,   351,   352,   353,   354,   355,   356,   357,   358,    25,
      26,    27,     0,   359,   360,   636,   362,   363,   364,   365,
     366,   367,   368,     0,   369,   370,   371,   372,   373,   374,
     375,   376,     0,   377,   378,   379,   380,   381,   382,   383,
     384,     0,   385,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,     0,   399,   400,   401,
     402,   403,   404,   405,   637,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,    32,     0,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,   428,   429,
     430,   431,   432,     0,   433,   434,   435,   436,   437,   438,
     439,   440,   441,   442,   443,   444,   445,   446,   447,   638,
     449,     0,   450,   451,    37,   452,   453,   454,   455,   456,
     457,   458,     0,   459,   460,     0,   461,     0,   462,   463,
     639,   465,   640,     0,   467,   468,   641,   470,   471,   472,
     473,   474,     0,     0,   475,   476,   477,    39,   478,   479,
     480,   481,     0,   482,   483,   484,   485,   486,   642,   488,
       0,   489,   490,   491,   492,   493,   494,   495,   496,   497,
       0,     0,   498,     0,    43,   499,   500,   501,   502,   503,
     504,   505,   506,   507,   508,   509,   510,   511,   512,   513,
     514,   515,   516,   517,   518,   519,   924,     0,    44,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   643,     0,     0,   113,   114,   115,   116,   117,
     118,   119,   120,   121,     0,   122,   123,   124,     3,     4,
       0,   925,     0,   125,     0,     0,     0,   926,   127,   128,
       0,   129,   130,   131,   927,   133,   134,   135,   928,   929,
     930,   931,   932,     0,   141,   142,   143,   144,   145,   146,
       0,     0,   147,   148,   933,   934,   151,     0,   152,   153,
     154,   155,   935,     0,   936,     0,   937,   159,   160,   161,
     162,   163,   938,   165,   166,   167,     0,   168,   169,   170,
     171,   172,   173,     0,   939,   175,   176,   177,   178,   179,
     180,   181,   182,   183,   184,   940,   941,   187,     0,   188,
       0,   189,   190,   191,   192,   193,   194,     0,   195,   196,
     197,   198,   199,   200,     0,     0,   201,   202,   203,   204,
     205,   206,   207,     0,   208,   209,   210,     0,   211,   212,
     213,     0,   214,   215,   216,   217,   942,   219,   220,   221,
     222,   223,   943,     0,   225,     0,   226,   227,   944,   229,
       0,   230,     0,   231,   945,    21,   946,   234,   235,   947,
     948,   238,     0,   239,   240,     0,     0,   949,   950,   243,
     244,     0,   245,   246,   247,   248,   249,   250,   251,   951,
     253,   254,   255,   256,     0,   257,   258,   259,   260,   261,
     262,   263,     0,   264,   952,   953,   267,   268,   269,   270,
     271,   954,   955,     0,   956,     0,   275,   957,   958,   278,
     959,   280,   281,   282,   283,   284,   285,   286,     0,     0,
     287,   960,   289,   961,     0,   291,   292,   293,   294,   295,
     296,   297,   298,   962,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   963,   964,   965,   321,   322,   323,   324,   966,
       0,   326,   327,   967,   329,     0,   968,   331,   969,   333,
     334,   335,     0,   336,   337,     0,     0,   338,   339,   340,
       0,     0,   341,   970,   971,   344,   972,   973,   347,   348,
     349,   350,   351,   352,   353,   354,   355,   356,   357,   358,
      25,    26,    27,     0,   359,   360,   974,   975,   363,   364,
     976,   366,   367,   368,     0,   369,   370,   371,   372,   373,
     374,   375,   376,     0,   377,   378,   379,   977,   381,   382,
     383,   384,     0,   385,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,     0,   399,   400,
     978,   402,   403,   404,   979,   406,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,    32,   980,   417,   418,
     419,   420,   421,   422,   981,   424,   425,   426,   427,   982,
     429,   430,   983,   432,     0,   433,   434,   435,   436,   437,
     438,   439,   440,   441,   442,   443,   444,   445,   984,   447,
     985,   449,     0,   450,   451,    37,   452,   986,   454,   455,
     456,   457,   458,     0,   987,   988,     0,   461,     0,   462,
     463,   989,   465,   990,     0,   467,   468,   991,   470,   471,
     472,   473,   474,     0,     0,   475,   476,   477,    39,   478,
     479,   480,   481,     0,   482,   483,   484,   485,   486,   992,
     993,     0,   489,   994,   491,   492,   493,   494,   495,   496,
     497,     0,     0,   498,     0,    43,   499,   500,   501,   502,
     503,   504,   995,   996,   997,   998,   999,  1000,  1001,  1002,
    1003,  1004,  1005,   516,   517,   518,   519,     0,   112,    44,
     552,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   689,     0,     0,     0,   113,   114,   115,
     116,   117,   118,   119,   120,   121,     0,   122,   123,   124,
       0,     0,     0,     0,     0,   125,     0,     0,     0,   126,
     127,   128,     0,   129,   130,   131,   132,   133,   134,   135,
     136,   137,   138,   139,   140,     0,   141,   142,   143,   144,
     145,   146,     0,   627,   147,   148,   149,   150,   151,     0,
     152,   153,   154,   155,   628,     0,   629,     0,   158,   159,
     160,   161,   162,   163,   164,   165,   166,   167,     0,   168,
     169,   170,   171,   172,   173,     0,   174,   175,   176,   177,
     178,   179,   180,   181,   182,   183,   184,   185,   186,   187,
       0,   188,     0,   189,   190,   191,   192,   193,   194,     0,
     195,   196,   197,   198,   199,   200,     0,     0,   201,   202,
     203,   204,   205,   206,   207,     0,   208,   209,   210,     0,
     211,   212,   213,     0,   214,   215,   216,   217,   218,   219,
     220,   221,   222,   223,   630,     0,   225,     0,   226,   227,
     228,   229,     0,   230,     0,   231,   232,     0,   233,   234,
     235,   236,   237,   238,     0,   239,   240,   631,     0,   241,
     242,   243,   244,     0,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,     0,   257,   258,   259,
     260,   261,   262,   263,     0,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,     0,   274,     0,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     632,     0,   287,   288,   289,   290,     0,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,     0,   326,   327,   328,   329,     0,   633,   331,
     332,   333,   334,   335,     0,   336,   337,     0,   634,   338,
     339,   340,     0,     0,   341,   342,   343,   344,   345,   635,
     347,   348,   349,   350,   351,   352,   353,   354,   355,   356,
     357,   358,     0,     0,     0,     0,   359,   360,   636,   362,
     363,   364,   365,   366,   367,   368,     0,   369,   370,   371,
     372,   373,   374,   375,   376,     0,   377,   378,   379,   380,
     381,   382,   383,   384,     0,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,     0,
     399,   400,   401,   402,   403,   404,   405,   637,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,     0,     0,
     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
     427,   428,   429,   430,   431,   432,     0,   433,   434,   435,
     436,   437,   438,   439,   440,   441,   442,   443,   444,   445,
     446,   447,   638,   449,     0,   450,   451,     0,   452,   453,
     454,   455,   456,   457,   458,     0,   459,   460,     0,   461,
       0,   462,   463,   639,   465,   640,     0,   467,   468,   641,
     470,   471,   472,   473,   474,     0,     0,   475,   476,   477,
       0,   478,   479,   480,   481,     0,   482,   483,   484,   485,
     486,   642,   488,     0,   489,   490,   491,   492,   493,   494,
     495,   496,   497,     0,     0,   498,     0,     0,   499,   500,
     501,   502,   503,   504,   505,   506,   507,   508,   509,   510,
     511,   512,   513,   514,   515,   516,   517,   518,   519,   112,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   643,     0,     0,   113,   114,
     115,   116,   117,   118,   119,   120,   121,     0,   122,   123,
     124,     0,     0,     0,     0,     0,   125,     0,     0,     0,
     126,   127,   128,     0,   129,   130,   131,   132,   133,   134,
     135,   136,   137,   138,   139,   140,     0,   141,   142,   143,
     144,   145,   146,     0,   627,   147,   148,   149,   150,   151,
       0,   152,   153,   154,   155,   628,     0,   629,     0,   158,
     159,   160,   161,   162,   163,   164,   165,   166,   167,     0,
     168,   169,   170,   171,   172,   173,     0,   174,   175,   176,
     177,   178,   179,   180,   181,   182,   183,   184,   185,   186,
     187,     0,   188,     0,   189,   190,   191,   192,   193,   194,
       0,   195,   196,   197,   198,   199,   200,     0,     0,   201,
     202,   203,   204,   205,   206,   207,     0,   208,   209,   210,
       0,   211,   212,   213,     0,   214,   215,   216,   217,   218,
     219,   220,   221,   222,   223,   630,     0,   225,     0,   226,
     227,   228,   229,     0,   230,     0,   231,   232,     0,   233,
     234,   235,   236,   237,   238,     0,   239,   240,     0,     0,
     241,   242,   243,   244,     0,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,     0,   257,   258,
     259,   260,   261,   262,   263,     0,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,     0,   274,     0,   275,
     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
     286,     0,     0,   287,   288,   289,   290,     0,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
     323,   324,   325,     0,   326,   327,   328,   329,     0,   633,
     331,   332,   333,   334,   335,     0,   336,   337,     0,     0,
     338,   339,   340,     0,     0,   341,   342,   343,   344,   345,
     635,   347,   348,   349,   350,   351,   352,   353,   354,   355,
     356,   357,   358,     0,     0,     0,     0,   359,   360,   636,
     362,   363,   364,   365,   366,   367,   368,     0,   369,   370,
     371,   372,   373,   374,   375,   376,     0,   377,   378,   379,
     380,   381,   382,   383,   384,     0,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
       0,   399,   400,   401,   402,   403,   404,   405,   637,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,     0,
       0,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,   428,   429,   430,   431,   432,     0,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   638,   449,     0,   450,   451,     0,   452,
     453,   454,   455,   456,   457,   458,     0,   459,   460,     0,
     461,     0,   462,   463,   639,   465,   640,     0,   467,   468,
     641,   470,   471,   472,   473,   474,     0,     0,   475,   476,
     477,     0,   478,   479,   480,   481,     0,   482,   483,   484,
     485,   486,   487,   488,     0,   489,   490,   491,   492,   493,
     494,   495,   496,   497,     0,     0,   498,     0,     0,   499,
     500,   501,   502,   503,   504,   505,   506,   507,   508,   509,
     510,   511,   512,   513,   514,   515,   516,   517,   518,   519,
     112,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   689,     0,     0,   113,
     114,   115,   116,   117,   118,   119,   120,   121,     0,   122,
     123,   124,     0,     0,     0,     0,     0,   125,     0,     0,
       0,   126,   127,   128,     0,   129,   130,   131,   132,   133,
     134,   135,   136,   137,   138,   139,   140,     0,   141,   142,
     143,   144,   145,   146,     0,   627,   147,   148,   149,   150,
     151,     0,   152,   153,   154,   155,   628,     0,   629,     0,
     158,   159,   160,   161,   162,   163,   164,   165,   166,   167,
       0,   168,   169,   170,   171,   172,   173,     0,   174,   175,
     176,   177,   178,   179,   180,   181,   182,   183,   184,   185,
     186,   187,     0,   188,     0,   189,   190,   191,   192,   193,
     194,     0,   195,   196,   197,   198,   199,   200,     0,     0,
     201,   202,   203,   204,   205,   206,   207,     0,   208,   209,
     210,     0,   211,   212,   213,     0,   214,   215,   216,   217,
     218,   219,   220,   221,   222,   223,   630,     0,   225,     0,
     226,   227,   228,   229,     0,   230,     0,   231,   232,     0,
     233,   234,   235,   236,   237,   238,     0,   239,   240,     0,
       0,   241,   242,   243,   244,     0,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,     0,   257,
     258,   259,   260,   261,   262,   263,     0,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,     0,   274,     0,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,     0,     0,   287,   288,   289,   290,     0,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,   323,   324,   325,     0,   326,   327,   328,   329,     0,
     633,   331,   332,   333,   334,   335,     0,   336,   337,     0,
       0,   338,   339,   340,     0,     0,   341,   342,   343,   344,
     345,   635,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,     0,     0,     0,     0,   359,   360,
     636,   362,   363,   364,   365,   366,   367,   368,     0,   369,
     370,   371,   372,   373,   374,   375,   376,     0,   377,   378,
     379,   380,   381,   382,   383,   384,     0,   385,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,     0,   399,   400,   401,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
       0,     0,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,     0,   433,
     434,   435,   436,   437,   438,   439,   440,   441,   442,   443,
     444,   445,   446,   447,   638,   449,     0,   450,   451,     0,
     452,   453,   454,   455,   456,   457,   458,     0,   459,   460,
       0,   461,     0,   462,   463,   639,   465,   640,     0,   467,
     468,   641,   470,   471,   472,   473,   474,     0,     0,   475,
     476,   477,     0,   478,   479,   480,   481,     0,   482,   483,
     484,   485,   486,   487,   488,     0,   489,   490,   491,   492,
     493,   494,   495,   496,   497,     0,     0,   498,     0,     0,
     499,   500,   501,   502,   503,   504,   505,   506,   507,   508,
     509,   510,   511,   512,   513,   514,   515,   516,   517,   518,
     519,   528,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  3496,     0,     0,
     113,   114,   115,   116,   117,   118,   119,   120,   121,   786,
     122,   123,   124,     0,     0,     0,     0,     0,   125,     0,
       0,     0,     0,   127,   128,     0,   129,   130,   131,     0,
     133,   134,   135,   136,   137,     0,   139,   140,     0,   141,
     142,   143,   144,   145,   146,     0,     0,   147,   148,   149,
     150,   151,     0,   152,   153,   154,   155,   156,     0,     0,
       0,   158,   159,   160,   161,   162,   163,     0,   165,   166,
     167,     0,   168,   169,   170,   171,   172,   173,     0,     0,
     175,   176,   177,   178,   179,   180,   181,   182,   183,   184,
     185,   186,   187,     0,   188,     0,   189,   190,   191,   192,
     193,   194,     0,   195,   196,   197,   198,   199,   200,     0,
       0,   201,   202,   203,   204,   205,   206,   207,     0,   208,
     209,   210,     0,   211,   212,   213,     0,   214,   215,   216,
     217,   218,   219,   220,   221,   222,   223,   224,     0,   225,
       0,   226,   227,   228,   229,     0,   230,     0,   231,     0,
      21,     0,   234,   235,   529,     0,   238,     0,   239,   240,
       0,     0,   241,   242,   243,   244,     0,   245,   246,   247,
     248,   249,   250,   251,     0,   253,   254,   255,   256,     0,
     257,   258,   259,   260,   261,   262,   263,     0,   264,     0,
     266,   267,   268,   269,   270,   271,   272,   273,     0,   274,
       0,   275,     0,     0,   278,     0,   280,   281,   282,   283,
     284,   285,   286,     0,     0,   287,     0,   289,     0,     0,
     291,   292,   293,   294,   295,   296,   297,   298,   530,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,     0,   320,
     321,   322,   323,   324,   325,     0,   326,   327,     0,   329,
       0,   330,   331,   332,   333,   334,   335,     0,   336,   337,
       0,     0,   338,   339,   340,     0,     0,   341,   342,     0,
     344,     0,   346,   347,   348,   349,   350,   351,   352,   353,
     354,   355,   356,   357,   358,    25,    26,    27,     0,   359,
     360,   361,     0,   363,   364,   365,   366,   367,   368,     0,
     369,   370,   371,   372,   373,   374,   375,   376,     0,   377,
     378,   379,   380,   381,   382,   383,   384,     0,   385,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,     0,   399,   400,     0,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,    32,     0,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,     0,   429,   430,   431,   432,     0,
     433,   434,   435,   436,   437,   438,   439,   440,   441,   442,
     443,   444,   445,   531,   447,   448,   449,     0,   450,   451,
      37,   452,     0,   454,   455,   456,   457,   458,     0,   787,
     460,     0,   461,     0,   788,   463,   464,   465,   466,     0,
     467,   468,   469,   470,   471,   472,   473,   474,     0,     0,
     475,   476,   477,    39,   478,   479,   480,   481,     0,   482,
     483,   484,   485,   486,   642,   488,     0,   489,     0,   491,
     492,   493,   494,   495,   496,   497,     0,     0,   498,     0,
      43,   499,   500,   501,   502,   503,   504,   505,   506,   507,
     508,   509,   510,   511,   512,   513,   514,   515,   516,   517,
     518,   519,   528,     0,    44,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   689,     0,
       0,   113,   114,   115,   116,   117,   118,   119,   120,   121,
       0,   122,   123,   124,     0,     0,     0,     0,     0,   125,
       0,     0,     0,     0,   127,   128,     0,   129,   130,   131,
       0,   133,   134,   135,   136,   137,     0,   139,   140,     0,
     141,   142,   143,   144,   145,   146,     0,     0,   147,   148,
     149,   150,   151,     0,   152,   153,   154,   155,   156,     0,
       0,     0,   158,   159,   160,   161,   162,   163,     0,   165,
     166,   167,     0,   168,   169,   170,   171,   172,   173,     0,
       0,   175,   176,   177,   178,   179,   180,   181,   182,   183,
     184,   185,   186,   187,     0,   188,     0,   189,   190,   191,
     192,   193,   194,     0,   195,   196,   197,   198,   199,   200,
       0,     0,   201,   202,   203,   204,   205,   206,   207,     0,
     208,   209,   210,     0,   211,   212,   213,     0,   214,   215,
     216,   217,   218,   219,   220,   221,   222,   223,   224,     0,
     225,     0,   226,   227,   228,   229,     0,   230,     0,   231,
       0,    21,     0,   234,   235,   529,     0,   238,     0,   239,
     240,     0,     0,   241,   242,   243,   244,     0,   245,   246,
     247,   248,   249,   250,   251,     0,   253,   254,   255,   256,
       0,   257,   258,   259,   260,   261,   262,   263,     0,   264,
       0,   266,   267,   268,   269,   270,   271,   272,   273,     0,
     274,     0,   275,     0,     0,   278,     0,   280,   281,   282,
     283,   284,   285,   286,     0,     0,   287,     0,   289,     0,
       0,   291,   292,   293,   294,   295,   296,   297,   298,   530,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,     0,
     320,   321,   322,   323,   324,   325,     0,   326,   327,     0,
     329,     0,   330,   331,   332,   333,   334,   335,     0,   336,
     337,     0,     0,   338,   339,   340,     0,     0,   341,   342,
       0,   344,     0,   346,   347,   348,   349,   350,   351,   352,
     353,   354,   355,   356,   357,   358,    25,    26,    27,     0,
     359,   360,   361,     0,   363,   364,   365,   366,   367,   368,
       0,   369,   370,   371,   372,   373,   374,   375,   376,     0,
     377,   378,   379,   380,   381,   382,   383,   384,     0,   385,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,     0,   399,   400,     0,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,    32,     0,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,   427,     0,   429,   430,   431,   432,
       0,   433,   434,   435,   436,   437,   438,   439,   440,   441,
     442,   443,   444,   445,   531,   447,   448,   449,     0,   450,
     451,    37,   452,     0,   454,   455,   456,   457,   458,     0,
     459,   460,     0,   461,     0,   462,   463,   464,   465,   466,
       0,   467,   468,   469,   470,   471,   472,   473,   474,     0,
       0,   475,   476,   477,    39,   478,   479,   480,   481,     0,
     482,   483,   484,   485,   486,   642,   488,     0,   489,     0,
     491,   492,   493,   494,   495,   496,   497,     0,     0,   498,
       0,    43,   499,   500,   501,   502,   503,   504,   505,   506,
     507,   508,   509,   510,   511,   512,   513,   514,   515,   516,
     517,   518,   519,     0,   528,    44,   552,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   689,
       0,     0,     0,   113,   114,   115,   116,   117,   118,   119,
     120,   121,     0,   122,   123,   124,     0,     0,     0,     0,
       0,   125,     0,     0,     0,     0,   127,   128,     0,   129,
     130,   131,     0,   133,   134,   135,   136,   137,     0,   139,
     140,     0,   141,   142,   143,   144,   145,   146,     0,     0,
     147,   148,   149,   150,   151,     0,   152,   153,   154,   155,
     156,     0,     0,     0,   158,   159,   160,   161,   162,   163,
       0,   165,   166,   167,     0,   168,   169,   170,   171,   172,
     173,     0,     0,   175,   176,   177,   178,   179,   180,   181,
     182,   183,   184,   185,   186,   187,     0,   188,     0,   189,
     190,   191,   192,   193,   194,     0,   195,   196,   197,   198,
     199,   200,     0,     0,   201,   202,   203,   204,   205,   206,
     207,     0,   208,   209,   210,     0,   211,   212,   213,     0,
     214,   215,   216,   217,   218,   219,   220,   221,   222,   223,
     224,     0,   225,     0,   226,   227,   228,   229,     0,   230,
       0,   231,     0,     0,     0,   234,   235,   529,     0,   238,
       0,   239,   240,     0,     0,   241,   242,   243,   244,     0,
     245,   246,   247,   248,   249,   250,   251,     0,   253,   254,
     255,   256,     0,   257,   258,   259,   260,   261,   262,   263,
       0,   264,     0,   266,   267,   268,   269,   270,   271,   272,
     273,     0,   274,     0,   275,     0,     0,   278,     0,   280,
     281,   282,   283,   284,   285,   286,     0,     0,   287,     0,
     289,     0,     0,   291,   292,   293,   294,   295,   296,   297,
     298,   530,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,     0,   320,   321,   322,   323,   324,   325,     0,   326,
     327,     0,   329,     0,   330,   331,   332,   333,   334,   335,
       0,   336,   337,     0,     0,   338,   339,   340,     0,     0,
     341,   342,     0,   344,     0,   346,   347,   348,   349,   350,
     351,   352,   353,   354,   355,   356,   357,   358,     0,     0,
       0,     0,   359,   360,   361,     0,   363,   364,   365,   366,
     367,   368,     0,   369,   370,   371,   372,   373,   374,   375,
     376,     0,   377,   378,   379,   380,   381,   382,   383,   384,
       0,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,     0,   399,   400,     0,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,     0,     0,   417,   418,   419,   420,
     421,   422,   423,   424,   425,   426,   427,     0,   429,   430,
     431,   432,     0,   433,   434,   435,   436,   437,   438,   439,
     440,   441,   442,   443,   444,   445,   531,   447,   448,   449,
       0,   450,   451,     0,   452,     0,   454,   455,   456,   457,
     458,     0,   459,   460,     0,   461,     0,   462,   463,   464,
     465,   466,     0,   467,   468,   469,   470,   471,   472,   473,
     474,     0,     0,   475,   476,   477,     0,   478,   479,   480,
     481,     0,   482,   483,   484,   485,   486,   487,   488,     0,
     489,     0,   491,   492,   493,   494,   495,   496,   497,     0,
       0,   498,     0,     0,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,   517,   518,   519,   528,     0,   552,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1028,     0,     0,   113,   114,   115,   116,   117,   118,
     119,   120,   121,     0,   122,   123,   124,     0,     0,     0,
       0,     0,   125,     0,     0,     0,     0,   127,   128,     0,
     129,   130,   131,     0,   133,   134,   135,   136,   137,     0,
     139,   140,     0,   141,   142,   143,   144,   145,   146,     0,
       0,   147,   148,   149,   150,   151,     0,   152,   153,   154,
     155,   156,     0,     0,     0,   158,   159,   160,   161,   162,
     163,     0,   165,   166,   167,     0,   168,   169,   170,   171,
     172,   173,     0,     0,   175,   176,   177,   178,   179,   180,
     181,   182,   183,   184,   185,   186,   187,     0,   188,     0,
     189,   190,   191,   192,   193,   194,     0,   195,   196,   197,
     198,   199,   200,     0,     0,   201,   202,   203,   204,   205,
     206,   207,     0,   208,   209,   210,     0,   211,   212,   213,
       0,   214,   215,   216,   217,   218,   219,   220,   221,   222,
     223,   224,     0,   225,     0,   226,   227,   228,   229,     0,
     230,     0,   231,     0,     0,     0,   234,   235,   529,     0,
     238,     0,   239,   240,     0,     0,   241,   242,   243,   244,
       0,   245,   246,   247,   248,   249,   250,   251,     0,   253,
     254,   255,   256,     0,   257,   258,   259,   260,   261,   262,
     263,     0,   264,     0,   266,   267,   268,   269,   270,   271,
     272,   273,     0,   274,     0,   275,     0,     0,   278,     0,
     280,   281,   282,   283,   284,   285,   286,     0,     0,   287,
       0,   289,     0,     0,   291,   292,   293,   294,   295,   296,
     297,   298,   530,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,     0,   320,   321,   322,   323,   324,   325,     0,
     326,   327,     0,   329,     0,   330,   331,   332,   333,   334,
     335,     0,   336,   337,     0,     0,   338,   339,   340,     0,
       0,   341,   342,     0,   344,     0,   346,   347,   348,   349,
     350,   351,   352,   353,   354,   355,   356,   357,   358,     0,
       0,     0,     0,   359,   360,   361,     0,   363,   364,   365,
     366,   367,   368,     0,   369,   370,   371,   372,   373,   374,
     375,   376,     0,   377,   378,   379,   380,   381,   382,   383,
     384,     0,   385,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,     0,   399,   400,     0,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,     0,     0,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,     0,   429,
     430,   431,   432,     0,   433,   434,   435,   436,   437,   438,
     439,   440,   441,   442,   443,   444,   445,   531,   447,   448,
     449,     0,   450,   451,     0,   452,     0,   454,   455,   456,
     457,   458,     0,   459,   460,     0,   461,     0,   462,   463,
     464,   465,   466,     0,   467,   468,   469,   470,   471,   472,
     473,   474,     0,     0,   475,   476,   477,     0,   478,   479,
     480,   481,     0,   482,   483,   484,   485,   486,   487,   488,
       0,   489,     0,   491,   492,   493,   494,   495,   496,   497,
       0,     0,   498,     0,     0,   499,   500,   501,   502,   503,
     504,   505,   506,   507,   508,   509,   510,   511,   512,   513,
     514,   515,   516,   517,   518,   519,   528,     0,   552,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1601,     0,     0,   113,   114,   115,   116,   117,
     118,   119,   120,   121,     0,   122,   123,   124,     0,     0,
       0,     0,     0,   125,     0,     0,     0,     0,   127,   128,
       0,   129,   130,   131,     0,   133,   134,   135,   136,   137,
       0,   139,   140,     0,   141,   142,   143,   144,   145,   146,
       0,     0,   147,   148,   149,   150,   151,     0,   152,   153,
     154,   155,   156,     0,     0,     0,   158,   159,   160,   161,
     162,   163,     0,   165,   166,   167,     0,   168,   169,   170,
     171,   172,   173,     0,     0,   175,   176,   177,   178,   179,
     180,   181,   182,   183,   184,   185,   186,   187,     0,   188,
       0,   189,   190,   191,   192,   193,   194,     0,   195,   196,
     197,   198,   199,   200,     0,     0,   201,   202,   203,   204,
     205,   206,   207,     0,   208,   209,   210,     0,   211,   212,
     213,     0,   214,   215,   216,   217,   218,   219,   220,   221,
     222,   223,   224,     0,   225,     0,   226,   227,   228,   229,
       0,   230,     0,   231,     0,     0,     0,   234,   235,   529,
       0,   238,     0,   239,   240,     0,     0,   241,   242,   243,
     244,     0,   245,   246,   247,   248,   249,   250,   251,     0,
     253,   254,   255,   256,     0,   257,   258,   259,   260,   261,
     262,   263,     0,   264,     0,   266,   267,   268,   269,   270,
     271,   272,   273,     0,   274,     0,   275,     0,     0,   278,
       0,   280,   281,   282,   283,   284,   285,   286,     0,     0,
     287,     0,   289,     0,     0,   291,   292,   293,   294,   295,
     296,   297,   298,   530,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,     0,   320,   321,   322,   323,   324,   325,
       0,   326,   327,     0,   329,     0,   330,   331,   332,   333,
     334,   335,     0,   336,   337,     0,     0,   338,   339,   340,
       0,     0,   341,   342,     0,   344,     0,   346,   347,   348,
     349,   350,   351,   352,   353,   354,   355,   356,   357,   358,
       0,     0,     0,     0,   359,   360,   361,     0,   363,   364,
     365,   366,   367,   368,     0,   369,   370,   371,   372,   373,
     374,   375,   376,     0,   377,   378,   379,   380,   381,   382,
     383,   384,     0,   385,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,     0,   399,   400,
       0,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,     0,     0,   417,   418,
     419,   420,   421,   422,   423,   424,   425,   426,   427,     0,
     429,   430,   431,   432,     0,   433,   434,   435,   436,   437,
     438,   439,   440,   441,   442,   443,   444,   445,   531,   447,
     448,   449,     0,   450,   451,     0,   452,     0,   454,   455,
     456,   457,   458,     0,   459,   460,     0,   461,     0,   462,
     463,   464,   465,   466,     0,   467,   468,   469,   470,   471,
     472,   473,   474,     0,     0,   475,   476,   477,     0,   478,
     479,   480,   481,     0,   482,   483,   484,   485,   486,   487,
     488,     0,   489,     0,   491,   492,   493,   494,   495,   496,
     497,     0,     0,   498,     0,     0,   499,   500,   501,   502,
     503,   504,   505,   506,   507,   508,   509,   510,   511,   512,
     513,   514,   515,   516,   517,   518,   519,   528,     0,   552,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  2243,     0,     0,   113,   114,   115,   116,
     117,   118,   119,   120,   121,     0,   122,   123,   124,     0,
       0,     0,     0,     0,   125,     0,     0,     0,     0,   127,
     128,     0,   129,   130,   131,     0,   133,   134,   135,   136,
     137,     0,   139,   140,     0,   141,   142,   143,   144,   145,
     146,     0,     0,   147,   148,   149,   150,   151,     0,   152,
     153,   154,   155,   156,     0,     0,     0,   158,   159,   160,
     161,   162,   163,     0,   165,   166,   167,     0,   168,   169,
     170,   171,   172,   173,     0,     0,   175,   176,   177,   178,
     179,   180,   181,   182,   183,   184,   185,   186,   187,     0,
     188,     0,   189,   190,   191,   192,   193,   194,     0,   195,
     196,   197,   198,   199,   200,     0,     0,   201,   202,   203,
     204,   205,   206,   207,     0,   208,   209,   210,     0,   211,
     212,   213,     0,   214,   215,   216,   217,   218,   219,   220,
     221,   222,   223,   224,     0,   225,     0,   226,   227,   228,
     229,     0,   230,     0,   231,     0,     0,     0,   234,   235,
     529,     0,   238,     0,   239,   240,     0,     0,   241,   242,
     243,   244,     0,   245,   246,   247,   248,   249,   250,   251,
       0,   253,   254,   255,   256,     0,   257,   258,   259,   260,
     261,   262,   263,     0,   264,     0,   266,   267,   268,   269,
     270,   271,   272,   273,     0,   274,     0,   275,     0,     0,
     278,     0,   280,   281,   282,   283,   284,   285,   286,     0,
       0,   287,     0,   289,     0,     0,   291,   292,   293,   294,
     295,   296,   297,   298,   530,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,     0,   320,   321,   322,   323,   324,
     325,     0,   326,   327,     0,   329,     0,   330,   331,   332,
     333,   334,   335,     0,   336,   337,     0,     0,   338,   339,
     340,     0,     0,   341,   342,     0,   344,     0,   346,   347,
     348,   349,   350,   351,   352,   353,   354,   355,   356,   357,
     358,     0,     0,     0,     0,   359,   360,   361,     0,   363,
     364,   365,   366,   367,   368,     0,   369,   370,   371,   372,
     373,   374,   375,   376,     0,   377,   378,   379,   380,   381,
     382,   383,   384,     0,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,     0,   399,
     400,     0,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,     0,     0,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
       0,   429,   430,   431,   432,     0,   433,   434,   435,   436,
     437,   438,   439,   440,   441,   442,   443,   444,   445,   531,
     447,   448,   449,     0,   450,   451,     0,   452,     0,   454,
     455,   456,   457,   458,     0,   459,   460,     0,   461,     0,
     462,   463,   464,   465,   466,     0,   467,   468,   469,   470,
     471,   472,   473,   474,     0,     0,   475,   476,   477,     0,
     478,   479,   480,   481,     0,   482,   483,   484,   485,   486,
     487,   488,     0,   489,     0,   491,   492,   493,   494,   495,
     496,   497,     0,     0,   498,     0,     0,   499,   500,   501,
     502,   503,   504,   505,   506,   507,   508,   509,   510,   511,
     512,   513,   514,   515,   516,   517,   518,   519,   528,     0,
     552,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  2491,     0,     0,   113,   114,   115,
     116,   117,   118,   119,   120,   121,     0,   122,   123,   124,
       0,     0,     0,     0,     0,   125,     0,     0,     0,     0,
     127,   128,     0,   129,   130,   131,     0,   133,   134,   135,
     136,   137,     0,   139,   140,     0,   141,   142,   143,   144,
     145,   146,     0,     0,   147,   148,   149,   150,   151,     0,
     152,   153,   154,   155,   156,     0,     0,     0,   158,   159,
     160,   161,   162,   163,     0,   165,   166,   167,     0,   168,
     169,   170,   171,   172,   173,     0,     0,   175,   176,   177,
     178,   179,   180,   181,   182,   183,   184,   185,   186,   187,
       0,   188,     0,   189,   190,   191,   192,   193,   194,     0,
     195,   196,   197,   198,   199,   200,     0,     0,   201,   202,
     203,   204,   205,   206,   207,     0,   208,   209,   210,     0,
     211,   212,   213,     0,   214,   215,   216,   217,   218,   219,
     220,   221,   222,   223,   224,     0,   225,     0,   226,   227,
     228,   229,     0,   230,     0,   231,     0,     0,     0,   234,
     235,   529,     0,   238,     0,   239,   240,     0,     0,   241,
     242,   243,   244,     0,   245,   246,   247,   248,   249,   250,
     251,     0,   253,   254,   255,   256,     0,   257,   258,   259,
     260,   261,   262,   263,     0,   264,     0,   266,   267,   268,
     269,   270,   271,   272,   273,     0,   274,     0,   275,     0,
       0,   278,     0,   280,   281,   282,   283,   284,   285,   286,
       0,     0,   287,     0,   289,     0,     0,   291,   292,   293,
     294,   295,   296,   297,   298,   530,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,     0,   320,   321,   322,   323,
     324,   325,     0,   326,   327,     0,   329,     0,   330,   331,
     332,   333,   334,   335,     0,   336,   337,     0,     0,   338,
     339,   340,     0,     0,   341,   342,     0,   344,     0,   346,
     347,   348,   349,   350,   351,   352,   353,   354,   355,   356,
     357,   358,     0,     0,     0,     0,   359,   360,   361,     0,
     363,   364,   365,   366,   367,   368,     0,   369,   370,   371,
     372,   373,   374,   375,   376,     0,   377,   378,   379,   380,
     381,   382,   383,   384,     0,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,     0,
     399,   400,     0,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,     0,     0,
     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
     427,     0,   429,   430,   431,   432,     0,   433,   434,   435,
     436,   437,   438,   439,   440,   441,   442,   443,   444,   445,
     531,   447,   448,   449,     0,   450,   451,     0,   452,     0,
     454,   455,   456,   457,   458,     0,   459,   460,     0,   461,
       0,   462,   463,   464,   465,   466,     0,   467,   468,   469,
     470,   471,   472,   473,   474,     0,     0,   475,   476,   477,
       0,   478,   479,   480,   481,     0,   482,   483,   484,   485,
     486,   487,   488,     0,   489,     0,   491,   492,   493,   494,
     495,   496,   497,     0,     0,   498,     0,     0,   499,   500,
     501,   502,   503,   504,   505,   506,   507,   508,   509,   510,
     511,   512,   513,   514,   515,   516,   517,   518,   519,   528,
       0,   552,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  2630,     0,     0,   113,   114,
     115,   116,   117,   118,   119,   120,   121,     0,   122,   123,
     124,     0,     0,     0,     0,     0,   125,     0,     0,     0,
       0,   127,   128,     0,   129,   130,   131,     0,   133,   134,
     135,   136,   137,     0,   139,   140,     0,   141,   142,   143,
     144,   145,   146,     0,     0,   147,   148,   149,   150,   151,
       0,   152,   153,   154,   155,   156,     0,     0,     0,   158,
     159,   160,   161,   162,   163,     0,   165,   166,   167,     0,
     168,   169,   170,   171,   172,   173,     0,     0,   175,   176,
     177,   178,   179,   180,   181,   182,   183,   184,   185,   186,
     187,     0,   188,     0,   189,   190,   191,   192,   193,   194,
       0,   195,   196,   197,   198,   199,   200,     0,     0,   201,
     202,   203,   204,   205,   206,   207,     0,   208,   209,   210,
       0,   211,   212,   213,     0,   214,   215,   216,   217,   218,
     219,   220,   221,   222,   223,   224,     0,   225,     0,   226,
     227,   228,   229,     0,   230,     0,   231,     0,     0,     0,
     234,   235,   529,     0,   238,     0,   239,   240,     0,     0,
     241,   242,   243,   244,     0,   245,   246,   247,   248,   249,
     250,   251,     0,   253,   254,   255,   256,     0,   257,   258,
     259,   260,   261,   262,   263,     0,   264,     0,   266,   267,
     268,   269,   270,   271,   272,   273,     0,   274,     0,   275,
       0,     0,   278,     0,   280,   281,   282,   283,   284,   285,
     286,     0,     0,   287,     0,   289,     0,     0,   291,   292,
     293,   294,   295,   296,   297,   298,   530,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,     0,   320,   321,   322,
     323,   324,   325,     0,   326,   327,     0,   329,     0,   330,
     331,   332,   333,   334,   335,     0,   336,   337,     0,     0,
     338,   339,   340,     0,     0,   341,   342,     0,   344,     0,
     346,   347,   348,   349,   350,   351,   352,   353,   354,   355,
     356,   357,   358,     0,     0,     0,     0,   359,   360,   361,
       0,   363,   364,   365,   366,   367,   368,     0,   369,   370,
     371,   372,   373,   374,   375,   376,     0,   377,   378,   379,
     380,   381,   382,   383,   384,     0,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
       0,   399,   400,     0,   402,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,     0,
       0,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,     0,   429,   430,   431,   432,     0,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   531,   447,   448,   449,     0,   450,   451,     0,   452,
       0,   454,   455,   456,   457,   458,     0,   459,   460,     0,
     461,     0,   462,   463,   464,   465,   466,     0,   467,   468,
     469,   470,   471,   472,   473,   474,     0,     0,   475,   476,
     477,     0,   478,   479,   480,   481,     0,   482,   483,   484,
     485,   486,   487,   488,     0,   489,     0,   491,   492,   493,
     494,   495,   496,   497,     0,     0,   498,     0,     0,   499,
     500,   501,   502,   503,   504,   505,   506,   507,   508,   509,
     510,   511,   512,   513,   514,   515,   516,   517,   518,   519,
     528,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  3340,     0,     0,   113,
     114,   115,   116,   117,   118,   119,   120,   121,     0,   122,
     123,   124,     0,     0,     0,     0,     0,   125,     0,     0,
       0,     0,   127,   128,     0,   129,   130,   131,     0,   133,
     134,   135,   136,   137,     0,   139,   140,     0,   141,   142,
     143,   144,   145,   146,     0,     0,   147,   148,   149,   150,
     151,     0,   152,   153,   154,   155,   156,     0,     0,     0,
     158,   159,   160,   161,   162,   163,     0,   165,   166,   167,
       0,   168,   169,   170,   171,   172,   173,     0,     0,   175,
     176,   177,   178,   179,   180,   181,   182,   183,   184,   185,
     186,   187,     0,   188,     0,   189,   190,   191,   192,   193,
     194,     0,   195,   196,   197,   198,   199,   200,     0,     0,
     201,   202,   203,   204,   205,   206,   207,     0,   208,   209,
     210,     0,   211,   212,   213,     0,   214,   215,   216,   217,
     218,   219,   220,   221,   222,   223,   224,     0,   225,     0,
     226,   227,   228,   229,     0,   230,     0,   231,     0,     0,
       0,   234,   235,   529,     0,   238,     0,   239,   240,     0,
       0,   241,   242,   243,   244,     0,   245,   246,   247,   248,
     249,   250,   251,     0,   253,   254,   255,   256,     0,   257,
     258,   259,   260,   261,   262,   263,     0,   264,     0,   266,
     267,   268,   269,   270,   271,   272,   273,     0,   274,     0,
     275,     0,     0,   278,     0,   280,   281,   282,   283,   284,
     285,   286,     0,     0,   287,     0,   289,     0,     0,   291,
     292,   293,   294,   295,   296,   297,   298,   530,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,     0,   320,   321,
     322,   323,   324,   325,     0,   326,   327,     0,   329,     0,
     330,   331,   332,   333,   334,   335,     0,   336,   337,     0,
       0,   338,   339,   340,     0,     0,   341,   342,     0,   344,
       0,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,     0,     0,     0,     0,   359,   360,
     361,     0,   363,   364,   365,   366,   367,   368,     0,   369,
     370,   371,   372,   373,   374,   375,   376,     0,   377,   378,
     379,   380,   381,   382,   383,   384,     0,   385,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,     0,   399,   400,     0,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
       0,     0,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,     0,   429,   430,   431,   432,     0,   433,
     434,   435,   436,   437,   438,   439,   440,   441,   442,   443,
     444,   445,   531,   447,   448,   449,     0,   450,   451,     0,
     452,     0,   454,   455,   456,   457,   458,     0,   459,   460,
       0,   461,     0,   462,   463,   464,   465,   466,     0,   467,
     468,   469,   470,   471,   472,   473,   474,     0,     0,   475,
     476,   477,     0,   478,   479,   480,   481,     0,   482,   483,
     484,   485,   486,   487,   488,     0,   489,     0,   491,   492,
     493,   494,   495,   496,   497,     0,     0,   498,     0,     0,
     499,   500,   501,   502,   503,   504,   505,   506,   507,   508,
     509,   510,   511,   512,   513,   514,   515,   516,   517,   518,
     519,   528,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  2093,     0,     0,
     113,   114,   115,   116,   117,   118,   119,   120,   121,     0,
     122,   123,   124,     0,     0,     0,     0,     0,   125,     0,
       0,     0,     0,   127,   128,     0,   129,   130,   131,     0,
     133,   134,   135,   136,   137,     0,   139,   140,     0,   141,
     142,   143,   144,   145,   146,     0,     0,   147,   148,   149,
     150,   151,     0,   152,   153,   154,   155,   156,     0,     0,
       0,   158,   159,   160,   161,   162,   163,     0,   165,   166,
     167,     0,   168,   169,   170,   171,   172,   173,     0,     0,
     175,   176,   177,   178,   179,   180,   181,   182,   183,   184,
     185,   186,   187,     0,   188,     0,   189,   190,   191,   192,
     193,   194,     0,   195,   196,   197,   198,   199,   200,     0,
       0,   201,   202,   203,   204,   205,   206,   207,     0,   208,
     209,   210,     0,   211,   212,   213,     0,   214,   215,   216,
     217,   218,   219,   220,   221,   222,   223,   224,     0,   225,
       0,   226,   227,   228,   229,     0,   230,     0,   231,     0,
       0,     0,   234,   235,   529,     0,   238,     0,   239,   240,
       0,     0,   241,   242,   243,   244,     0,   245,   246,   247,
     248,   249,   250,   251,     0,   253,   254,   255,   256,     0,
     257,   258,   259,   260,   261,   262,   263,     0,   264,     0,
     266,   267,   268,   269,   270,   271,   272,   273,     0,   274,
       0,   275,     0,     0,   278,     0,   280,   281,   282,   283,
     284,   285,   286,     0,     0,   287,     0,   289,     0,     0,
     291,   292,   293,   294,   295,   296,   297,   298,   530,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,     0,   320,
     321,   322,   323,   324,   325,     0,   326,   327,     0,   329,
       0,   330,   331,   332,   333,   334,   335,     0,   336,   337,
       0,     0,   338,   339,   340,     0,     0,   341,   342,     0,
     344,     0,   346,   347,   348,   349,   350,   351,   352,   353,
     354,   355,   356,   357,   358,     0,     0,     0,     0,   359,
     360,   361,     0,   363,   364,   365,   366,   367,   368,     0,
     369,   370,   371,   372,   373,   374,   375,   376,     0,   377,
     378,   379,   380,   381,   382,   383,   384,     0,   385,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,     0,   399,   400,     0,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,     0,     0,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,     0,   429,   430,   431,   432,     0,
     433,   434,   435,   436,   437,   438,   439,   440,   441,   442,
     443,   444,   445,   531,   447,   448,   449,     0,   450,   451,
       0,   452,     0,   454,   455,   456,   457,   458,     0,   459,
     460,     0,   461,     0,   462,   463,   464,   465,   466,     0,
     467,   468,   469,   470,   471,   472,   473,   474,     0,     0,
     475,   476,   477,     0,   478,   479,   480,   481,     0,   482,
     483,   484,   485,   486,   487,   488,     0,   489,     0,   491,
     492,   493,   494,   495,   496,   497,     0,     0,   498,     0,
       0,   499,   500,   501,   502,   503,   504,   505,   506,   507,
     508,   509,   510,   511,   512,   513,   514,   515,   516,   517,
     518,   519,   528,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  2203,     0,
       0,   113,   114,   115,   116,   117,   118,   119,   120,   121,
       0,   122,   123,   124,     0,     0,     0,     0,     0,   125,
       0,     0,     0,     0,   127,   128,     0,   129,   130,   131,
       0,   133,   134,   135,   136,   137,     0,   139,   140,     0,
     141,   142,   143,   144,   145,   146,     0,     0,   147,   148,
     149,   150,   151,     0,   152,   153,   154,   155,   156,     0,
       0,     0,   158,   159,   160,   161,   162,   163,     0,   165,
     166,   167,     0,   168,   169,   170,   171,   172,   173,     0,
       0,   175,   176,   177,   178,   179,   180,   181,   182,   183,
     184,   185,   186,   187,     0,   188,     0,   189,   190,   191,
     192,   193,   194,     0,   195,   196,   197,   198,   199,   200,
       0,     0,   201,   202,   203,   204,   205,   206,   207,     0,
     208,   209,   210,     0,   211,   212,   213,     0,   214,   215,
     216,   217,   218,   219,   220,   221,   222,   223,   224,     0,
     225,     0,   226,   227,   228,   229,     0,   230,     0,   231,
       0,     0,     0,   234,   235,   529,     0,   238,     0,   239,
     240,     0,     0,   241,   242,   243,   244,     0,   245,   246,
     247,   248,   249,   250,   251,     0,   253,   254,   255,   256,
       0,   257,   258,   259,   260,   261,   262,   263,     0,   264,
       0,   266,   267,   268,   269,   270,   271,   272,   273,     0,
     274,     0,   275,     0,     0,   278,     0,   280,   281,   282,
     283,   284,   285,   286,     0,     0,   287,     0,   289,     0,
       0,   291,   292,   293,   294,   295,   296,   297,   298,   530,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,     0,
     320,   321,   322,   323,   324,   325,     0,   326,   327,     0,
     329,     0,   330,   331,   332,   333,   334,   335,     0,   336,
     337,     0,     0,   338,   339,   340,     0,     0,   341,   342,
       0,   344,     0,   346,   347,   348,   349,   350,   351,   352,
     353,   354,   355,   356,   357,   358,     0,     0,     0,     0,
     359,   360,   361,     0,   363,   364,   365,   366,   367,   368,
       0,   369,   370,   371,   372,   373,   374,   375,   376,     0,
     377,   378,   379,   380,   381,   382,   383,   384,     0,   385,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,     0,   399,   400,     0,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,     0,     0,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,   427,     0,   429,   430,   431,   432,
       0,   433,   434,   435,   436,   437,   438,   439,   440,   441,
     442,   443,   444,   445,   531,   447,   448,   449,     0,   450,
     451,     0,   452,     0,   454,   455,   456,   457,   458,     0,
     459,   460,     0,   461,     0,   462,   463,   464,   465,   466,
       0,   467,   468,   469,   470,   471,   472,   473,   474,     0,
       0,   475,   476,   477,     0,   478,   479,   480,   481,     0,
     482,   483,   484,   485,   486,   487,   488,     0,   489,     0,
     491,   492,   493,   494,   495,   496,   497,     0,     0,   498,
       0,     0,   499,   500,   501,   502,   503,   504,   505,   506,
     507,   508,   509,   510,   511,   512,   513,   514,   515,   516,
     517,   518,   519,   708,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  3147,
       0,     0,   113,   114,   115,   116,     0,   118,   119,   120,
     121,     0,   122,   123,   124,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   127,   128,     0,   129,   130,
     131,     0,   133,   134,   135,   709,   710,     0,   711,   712,
       0,   141,   142,   143,   144,   145,   146,     0,     0,   147,
     148,   713,   714,   151,     0,   152,   153,   154,   155,   715,
       0,     0,     0,     0,   159,   160,   161,   162,   163,     0,
     165,   166,   167,     0,   168,   169,   170,   171,   172,     0,
       0,     0,   175,   176,   177,   178,   179,   180,   181,   182,
     183,   184,   716,   717,   187,     0,   188,     0,   189,   190,
     191,   192,   193,   194,     0,   195,     0,   197,   198,   199,
     200,     0,     0,   201,   202,   203,   204,   205,     0,     0,
       0,   208,   209,   210,     0,   211,   212,   213,     0,   214,
     215,   216,   217,   718,   219,   220,   221,   222,   223,   719,
       0,   225,     0,   226,   227,   720,   229,     0,   230,     0,
     231,     0,    21,     0,   234,   235,   721,     0,   238,     0,
     239,     0,     0,     0,   722,   723,     0,   244,     0,   245,
     246,   247,   248,   249,   250,   251,     0,   253,   254,   255,
     256,     0,   257,   258,   259,   260,   261,   262,   263,     0,
     264,     0,   724,   267,   268,   269,   270,   271,   725,   726,
       0,   727,     0,   275,     0,     0,   278,     0,   280,     0,
     282,   283,   284,   285,   286,     0,     0,   287,     0,   289,
       0,     0,   291,   292,   293,   294,   295,   296,   297,   298,
     728,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   729,
       0,   730,   321,   322,   323,     0,   731,     0,   326,   327,
       0,   329,     0,   732,   331,   733,   333,   334,   335,     0,
     336,   337,     0,     0,   338,   339,   340,     0,     0,   341,
     734,     0,   344,     0,   735,   347,   348,   349,   350,   351,
     352,   353,   354,   355,     0,     0,   358,    25,    26,    27,
       0,   359,   360,   736,     0,   363,   364,   737,   366,   367,
     368,     0,   369,   370,   371,   372,   373,     0,     0,   376,
       0,   377,   378,   379,   738,   381,   382,   383,   384,     0,
     385,   386,   387,     0,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,     0,   399,   400,     0,   402,   403,
     404,   739,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,    32,     0,   417,   418,   419,   420,   421,
     422,   740,   424,   425,     0,   427,     0,     0,   430,   741,
     432,     0,     0,   434,   435,   436,   437,   438,   439,   440,
     441,   442,   443,   444,   445,   742,   447,   743,   449,     0,
     450,   451,    37,   452,     0,   454,   455,   456,   457,   458,
       0,   744,   745,     0,     0,     0,   462,   463,   746,   465,
     747,     0,   467,   468,   748,   470,   471,   472,   473,   474,
       0,     0,   475,   476,   477,    39,   478,   479,   480,   481,
       0,   482,   483,   484,   485,   486,   749,   750,     0,   489,
       0,   491,     0,   493,   494,   495,   496,     0,     0,     0,
     498,     0,    43,   499,   500,   501,   502,   503,   504,   751,
     752,   753,   754,   755,   756,   757,   758,   759,   760,   761,
     516,   517,   518,   519,     0,     0,    44,     0,     0,  2973,
    1507,   658,     0,     0,  2073,  1089,     0,     0,     0,     0,
     689,  2074,  2075,     0,     0,  2076,  2077,  2078,   113,   114,
     115,   116,   117,   118,   119,   120,   121,  1278,   122,   123,
     124,  1279,  1280,  1281,  2974,  1282,   125,  1283,  1284,  1285,
    2975,   127,   128,  1286,   129,   130,   131,  2976,   133,   134,
     135,     0,   841,  2977,   843,   844,  1287,   141,   142,   143,
     144,   145,   146,  1288,  1289,   147,   148,   845,   846,   151,
    1290,   152,   153,   154,   155,     0,  1291,  2978,  1292,  2979,
     159,   160,   161,   162,   163,  2980,   165,   166,   167,  1293,
     168,   169,   170,   171,   172,   173,  1294,  2981,   175,   176,
     177,   178,   179,   180,   181,   182,   183,   184,   851,   852,
     187,  1295,   188,  1296,   189,   190,   191,   192,   193,   194,
    1297,   195,   196,   197,   198,   199,   200,  1298,  1299,   201,
     202,   853,   204,   205,   206,   207,  1300,   208,   209,   210,
    1301,   211,   212,   213,  1302,   214,   215,   216,   217,     0,
     219,   220,   221,   222,   223,     0,  1303,   225,  1304,   226,
     227,   854,   229,  1305,   230,  1306,   231,  2982,  1307,  2983,
     234,   235,  2984,  2985,   238,  1308,   239,   240,  1309,  1310,
       0,     0,   243,   244,  1311,   245,   246,   247,   248,   249,
     250,   251,  2986,   253,   254,   255,   256,  1312,   257,   258,
     259,   260,   261,   262,   263,  1313,   264,  2987,     0,   267,
     268,   269,   270,   271,   861,   862,  1314,   863,  1315,   275,
    2988,  2989,   278,  2990,   280,   281,   282,   283,   284,   285,
     286,  1316,  1317,   287,  2991,   289,  2992,  1318,   291,   292,
     293,   294,   295,   296,   297,   298,  2993,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   870,  2994,   872,   321,   322,
     323,   324,  2995,  1319,   326,   327,  2996,   329,  1320,     0,
     331,   874,   333,   334,   335,  1321,   336,   337,  1322,  1323,
    2997,   339,   340,  1324,  1325,   341,     0,  2998,   344,  2999,
       0,   347,   348,   349,   350,   351,   352,   353,   354,   355,
     356,   357,   358,  1326,  1327,  1328,  1329,   359,   360,     0,
    3000,   363,   364,     0,   366,   367,   368,  1330,   369,   370,
     371,   372,   373,   374,   375,   376,  1331,   377,   378,   379,
     878,   381,   382,   383,   384,  1332,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
    1333,   399,   400,  3001,   402,   403,   404,   880,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,  1334,
    3002,   417,   418,   419,   420,   421,   422,  3003,   424,   425,
     426,   427,  3004,   429,   430,   884,   432,  1335,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,  3005,   447,     0,   449,  1336,   450,   451,  1337,   452,
    3006,   454,   455,   456,   457,   458,  1338,   887,   888,  1339,
     461,  1340,   462,   463,     0,   465,     0,  1341,   467,   468,
    3007,   470,   471,   472,   473,   474,  3008,  1343,   475,   476,
     477,  1344,   478,   479,   480,   481,  1345,   482,   483,   484,
     485,   486,     0,   891,  1347,   489,  3009,   491,   492,   493,
     494,   495,   496,   497,  1348,  1349,   498,  1350,  1351,   499,
     500,   501,   502,   503,   504,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   516,   517,   518,   519,
       0,   528,     0,  2079,  2080,  2081,  2073,  3010,  3011,  2084,
    2085,  2086,  2087,  2074,  2075,     0,     0,  2076,  2077,  2078,
     113,   114,   115,   116,   117,   118,   119,   120,   121,     0,
     122,   123,   124,     0,     0,     0,     0,     0,   125,     0,
       0,     0,     0,   127,   128,     0,   129,   130,   131,     0,
     133,   134,   135,   136,   137,     0,   139,   140,     0,   141,
     142,   143,   144,   145,   146,     0,     0,   147,   148,   149,
     150,   151,     0,   152,   153,   154,   155,   156,     0,     0,
       0,   158,   159,   160,   161,   162,   163,     0,   165,   166,
     167,     0,   168,   169,   170,   171,   172,   173,     0,     0,
     175,   176,   177,   178,   179,   180,   181,   182,   183,   184,
     185,   186,   187,     0,   188,     0,   189,   190,   191,   192,
     193,   194,     0,   195,   196,   197,   198,   199,   200,     0,
       0,   201,   202,   203,   204,   205,   206,   207,     0,   208,
     209,   210,     0,   211,   212,   213,     0,   214,   215,   216,
     217,   218,   219,   220,   221,   222,   223,   224,     0,   225,
       0,   226,   227,   228,   229,     0,   230,     0,   231,     0,
       0,     0,   234,   235,   529,     0,   238,     0,   239,   240,
       0,     0,   241,   242,   243,   244,     0,   245,   246,   247,
     248,   249,   250,   251,     0,   253,   254,   255,   256,     0,
     257,   258,   259,   260,   261,   262,   263,     0,   264,     0,
     266,   267,   268,   269,   270,   271,   272,   273,     0,   274,
       0,   275,     0,     0,   278,     0,   280,   281,   282,   283,
     284,   285,   286,     0,     0,   287,     0,   289,     0,     0,
     291,   292,   293,   294,   295,   296,   297,   298,   530,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,     0,   320,
     321,   322,   323,   324,   325,     0,   326,   327,     0,   329,
       0,   330,   331,   332,   333,   334,   335,     0,   336,   337,
       0,     0,   338,   339,   340,     0,     0,   341,   342,     0,
     344,     0,   346,   347,   348,   349,   350,   351,   352,   353,
     354,   355,   356,   357,   358,     0,     0,     0,     0,   359,
     360,   361,     0,   363,   364,   365,   366,   367,   368,     0,
     369,   370,   371,   372,   373,   374,   375,   376,     0,   377,
     378,   379,   380,   381,   382,   383,   384,     0,   385,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,     0,   399,   400,     0,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,     0,     0,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,     0,   429,   430,   431,   432,     0,
     433,   434,   435,   436,   437,   438,   439,   440,   441,   442,
     443,   444,   445,   531,   447,   448,   449,     0,   450,   451,
       0,   452,     0,   454,   455,   456,   457,   458,     0,   459,
     460,     0,   461,     0,   462,   463,   464,   465,   466,     0,
     467,   468,   469,   470,   471,   472,   473,   474,     0,     0,
     475,   476,   477,     0,   478,   479,   480,   481,     0,   482,
     483,   484,   485,   486,   487,   488,     0,   489,     0,   491,
     492,   493,   494,   495,   496,   497,     0,     0,   498,     0,
       0,   499,   500,   501,   502,   503,   504,   505,   506,   507,
     508,   509,   510,   511,   512,   513,   514,   515,   516,   517,
     518,   519,     0,     0,     0,  2079,  2080,  2081,     0,  2082,
    2083,  2084,  2085,  2086,  2087,  1658,     0,     0,  1659,     0,
       0,     0,  1660,  1661,  1662,  1663,  1664,  1665,  1666,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1667,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1669,  1658,     0,     0,  1659,
       0,     0,  1670,  1660,  1661,  1662,  1663,  1664,  1665,  1666,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1667,     0,  1671,     0,     0,
       0,     0,     0,     0,     0,     0,  1669,  1658,     0,     0,
    1659,     0,     0,  1670,  1660,  1661,  1662,  1663,  1664,  1665,
    1666,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1667,     0,  1671,     0,
       0,     0,     0,     0,     0,     0,     0,  1669,  1658,     0,
       0,  1659,     0,     0,  1670,  1660,  1661,  1662,  1663,  1664,
    1665,  1666,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1667,     0,  1671,
       0,     0,     0,     0,     0,     0,     0,     0,  1669,     0,
    1658,     0,     0,  1659,  1672,  1670,     0,  1660,  1661,  1662,
    1663,  1664,  1665,  1666,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1673,     0,     0,     0,     0,  1674,  1667,
    1671,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1669,     0,     0,     0,     0,  1672,     0,  1670,     0,     0,
       0,  1675,  1676,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1673,     0,     0,  1677,     0,  1674,
       0,     0,  1671,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1672,     0,     0,     0,
       0,     0,  1675,  1676,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1678,  1673,     0,  1679,  1677,     0,
    1674,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1680,     0,     0,  1681,     0,     0,  1672,     0,     0,
       0,     0,     0,  1675,  1676,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1678,  1673,     0,  1679,  1677,
       0,  1674,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1680,     0,     0,  1681,     0,     0,     0,  1672,
       0,     0,     0,     0,  1675,  1676,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1678,     0,  1673,  1679,
    1677,     0,     0,  1674,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1680,     0,     0,  1681,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1675,  1676,     0,     0,
       0,     0,     0,  1682,     0,     0,     0,  1678,     0,     0,
    1679,     0,  1677,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1680,     0,     0,  1681,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1682,     0,     0,     0,     0,  1678,
       0,     0,  1679,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1680,     0,     0,  1681,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1682,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1683,     0,     0,  1684,  1685,  1686,     0,  1687,  1688,
    1689,  1690,  1691,  1692,     0,     0,  1682,     0,  3668,     0,
       0,     0,     0,     0,     0,     0,     0,  1658,     0,     0,
    1659,     0,     0,     0,  1660,  1661,  1662,  1663,  1664,  1665,
    1666,     0,  1683,     0,     0,  1684,  1685,  1686,     0,  1687,
    1688,  1689,  1690,  1691,  1692,     0,  1667,     0,  1682,  3696,
       0,     0,     0,     0,     0,     0,     0,  1669,     0,     0,
       0,     0,     0,     0,  1670,     0,     0,     0,     0,     0,
       0,     0,     0,  1683,     0,     0,  1684,  1685,  1686,     0,
    1687,  1688,  1689,  1690,  1691,  1692,     0,     0,  1847,  1671,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1683,     0,     0,  1684,  1685,  1686,
       0,  1687,  1688,  1689,  1690,  1691,  1692,     0,     0,  2838,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1683,     0,     0,  1684,
    1685,  1686,     0,  1687,  1688,  1689,  1690,  1691,  1692,     0,
       0,  3349,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1672,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1673,     0,     0,     0,     0,
    1674,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1675,  1676,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1677,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1678,     0,     0,  1679,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1680,     0,     0,  1681,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1682,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1277,     0,     0,  1683,     0,     0,  1684,  1685,  1686,     0,
    1687,  1688,  1689,  1690,  1691,  1692,     0,     0,  3629,   113,
     114,   115,   116,   117,   118,   119,   120,   121,  1278,   122,
     123,   124,  1279,  1280,  1281,   925,  1282,   125,  1283,  1284,
    1285,   926,   127,   128,  1286,   129,   130,   131,   927,   133,
     134,   135,   928,   929,   930,   931,   932,  1287,   141,   142,
     143,   144,   145,   146,  1288,  1289,   147,   148,   933,   934,
     151,  1290,   152,   153,   154,   155,   935,  1291,   936,  1292,
     937,   159,   160,   161,   162,   163,   938,   165,   166,   167,
    1293,   168,   169,   170,   171,   172,   173,  1294,   939,   175,
     176,   177,   178,   179,   180,   181,   182,   183,   184,   940,
     941,   187,  1295,   188,  1296,   189,   190,   191,   192,   193,
     194,  1297,   195,   196,   197,   198,   199,   200,  1298,  1299,
     201,   202,   203,   204,   205,   206,   207,  1300,   208,   209,
     210,  1301,   211,   212,   213,  1302,   214,   215,   216,   217,
     942,   219,   220,   221,   222,   223,   943,  1303,   225,  1304,
     226,   227,   944,   229,  1305,   230,  1306,   231,   945,  1307,
     946,   234,   235,   947,   948,   238,  1308,   239,   240,  1309,
    1310,   949,   950,   243,   244,  1311,   245,   246,   247,   248,
     249,   250,   251,   951,   253,   254,   255,   256,  1312,   257,
     258,   259,   260,   261,   262,   263,  1313,   264,   952,   953,
     267,   268,   269,   270,   271,   954,   955,  1314,   956,  1315,
     275,   957,   958,   278,   959,   280,   281,   282,   283,   284,
     285,   286,  1316,  1317,   287,   960,   289,   961,  1318,   291,
     292,   293,   294,   295,   296,   297,   298,   962,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   963,   964,   965,   321,
     322,   323,   324,   966,  1319,   326,   327,   967,   329,  1320,
     968,   331,   969,   333,   334,   335,  1321,   336,   337,  1322,
    1323,   338,   339,   340,  1324,  1325,   341,   970,   971,   344,
     972,   973,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,  1326,  1327,  1328,  1329,   359,   360,
     974,   975,   363,   364,   976,   366,   367,   368,  1330,   369,
     370,   371,   372,   373,   374,   375,   376,  1331,   377,   378,
     379,   977,   381,   382,   383,   384,  1332,   385,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,  1333,   399,   400,   978,   402,   403,   404,   979,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
    1334,   980,   417,   418,   419,   420,   421,   422,   981,   424,
     425,   426,   427,   982,   429,   430,   983,   432,  1335,   433,
     434,   435,   436,   437,   438,   439,   440,   441,   442,   443,
     444,   445,   984,   447,   985,   449,  1336,   450,   451,  1337,
     452,   986,   454,   455,   456,   457,   458,  1338,   987,   988,
    1339,   461,  1340,   462,   463,   989,   465,   990,  1341,   467,
     468,   991,   470,   471,   472,   473,   474,  1342,  1343,   475,
     476,   477,  1344,   478,   479,   480,   481,  1345,   482,   483,
     484,   485,   486,  1346,   993,  1347,   489,   994,   491,   492,
     493,   494,   495,   496,   497,  1348,  1349,   498,  1350,  1351,
     499,   500,   501,   502,   503,   504,   995,   996,   997,   998,
     999,  1000,  1001,  1002,  1003,  1004,  1005,   516,   517,   518,
     519,   528,     0,     0,     0,     0,     0,     0,     0,     0,
    2104,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     113,   114,   115,   116,   117,   118,   119,   120,   121,     0,
     122,   123,   124,     0,     0,     0,     0,     0,   125,     0,
       0,     0,     0,   127,   128,     0,   129,   130,   131,     0,
     133,   134,   135,   136,   137,     0,   139,   140,     0,   141,
     142,   143,   144,   145,   146,     0,     0,   147,   148,   149,
     150,   151,     0,   152,   153,   154,   155,   156,     0,     0,
       0,   158,   159,   160,   161,   162,   163,     0,   165,   166,
     167,     0,   168,   169,   170,   171,   172,   173,     0,     0,
     175,   176,   177,   178,   179,   180,   181,   182,   183,   184,
     185,   186,   187,     0,   188,     0,   189,   190,   191,   192,
     193,   194,     0,   195,   196,   197,   198,   199,   200,     0,
       0,   201,   202,   203,   204,   205,   206,   207,     0,   208,
     209,   210,     0,   211,   212,   213,     0,   214,   215,   216,
     217,   218,   219,   220,   221,   222,   223,   224,     0,   225,
       0,   226,   227,   228,   229,     0,   230,     0,   231,     0,
       0,     0,   234,   235,   529,     0,   238,     0,   239,   240,
       0,     0,   241,   242,   243,   244,     0,   245,   246,   247,
     248,   249,   250,   251,     0,   253,   254,   255,   256,     0,
     257,   258,   259,   260,   261,   262,   263,     0,   264,     0,
     266,   267,   268,   269,   270,   271,   272,   273,     0,   274,
       0,   275,     0,     0,   278,     0,   280,   281,   282,   283,
     284,   285,   286,     0,     0,   287,     0,   289,     0,     0,
     291,   292,   293,   294,   295,   296,   297,   298,   530,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,     0,   320,
     321,   322,   323,   324,   325,     0,   326,   327,     0,   329,
       0,   330,   331,   332,   333,   334,   335,     0,   336,   337,
       0,     0,   338,   339,   340,     0,     0,   341,   342,     0,
     344,     0,   346,   347,   348,   349,   350,   351,   352,   353,
     354,   355,   356,   357,   358,     0,     0,     0,     0,   359,
     360,   361,     0,   363,   364,   365,   366,   367,   368,     0,
     369,   370,   371,   372,   373,   374,   375,   376,     0,   377,
     378,   379,   380,   381,   382,   383,   384,     0,   385,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,     0,   399,   400,     0,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,     0,     0,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,     0,   429,   430,   431,   432,     0,
     433,   434,   435,   436,   437,   438,   439,   440,   441,   442,
     443,   444,   445,   531,   447,   448,   449,     0,   450,   451,
       0,   452,     0,   454,   455,   456,   457,   458,     0,   459,
     460,     0,   461,     0,   462,   463,   464,   465,   466,     0,
     467,   468,   469,   470,   471,   472,   473,   474,     0,     0,
     475,   476,   477,     0,   478,   479,   480,   481,     0,   482,
     483,   484,   485,   486,   487,   488,     0,   489,     0,   491,
     492,   493,   494,   495,   496,   497,     0,     0,   498,     0,
       0,   499,   500,   501,   502,   503,   504,   505,   506,   507,
     508,   509,   510,   511,   512,   513,   514,   515,   516,   517,
     518,   519,   528,     0,     0,     0,     0,     0,     0,     0,
       0,  2758,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   113,   114,   115,   116,   117,   118,   119,   120,   121,
       0,   122,   123,   124,     0,     0,     0,     0,     0,   125,
       0,     0,     0,     0,   127,   128,     0,   129,   130,   131,
       0,   133,   134,   135,   136,   137,     0,   139,   140,     0,
     141,   142,   143,   144,   145,   146,     0,     0,   147,   148,
     149,   150,   151,     0,   152,   153,   154,   155,   156,     0,
       0,     0,   158,   159,   160,   161,   162,   163,     0,   165,
     166,   167,     0,   168,   169,   170,   171,   172,   173,     0,
       0,   175,   176,   177,   178,   179,   180,   181,   182,   183,
     184,   185,   186,   187,     0,   188,     0,   189,   190,   191,
     192,   193,   194,     0,   195,   196,   197,   198,   199,   200,
       0,     0,   201,   202,   203,   204,   205,   206,   207,     0,
     208,   209,   210,     0,   211,   212,   213,     0,   214,   215,
     216,   217,   218,   219,   220,   221,   222,   223,   224,     0,
     225,     0,   226,   227,   228,   229,     0,   230,     0,   231,
       0,     0,     0,   234,   235,   529,     0,   238,     0,   239,
     240,     0,     0,   241,   242,   243,   244,     0,   245,   246,
     247,   248,   249,   250,   251,     0,   253,   254,   255,   256,
       0,   257,   258,   259,   260,   261,   262,   263,     0,   264,
       0,   266,   267,   268,   269,   270,   271,   272,   273,     0,
     274,     0,   275,     0,     0,   278,     0,   280,   281,   282,
     283,   284,   285,   286,     0,     0,   287,     0,   289,     0,
       0,   291,   292,   293,   294,   295,   296,   297,   298,   530,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,     0,
     320,   321,   322,   323,   324,   325,     0,   326,   327,     0,
     329,     0,   330,   331,   332,   333,   334,   335,     0,   336,
     337,     0,     0,   338,   339,   340,     0,     0,   341,   342,
       0,   344,     0,   346,   347,   348,   349,   350,   351,   352,
     353,   354,   355,   356,   357,   358,     0,     0,     0,     0,
     359,   360,   361,     0,   363,   364,   365,   366,   367,   368,
       0,   369,   370,   371,   372,   373,   374,   375,   376,     0,
     377,   378,   379,   380,   381,   382,   383,   384,     0,   385,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,     0,   399,   400,     0,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,     0,     0,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,   427,     0,   429,   430,   431,   432,
       0,   433,   434,   435,   436,   437,   438,   439,   440,   441,
     442,   443,   444,   445,   531,   447,   448,   449,     0,   450,
     451,     0,   452,     0,   454,   455,   456,   457,   458,     0,
     459,   460,     0,   461,     0,   462,   463,   464,   465,   466,
       0,   467,   468,   469,   470,   471,   472,   473,   474,     0,
       0,   475,   476,   477,     0,   478,   479,   480,   481,     0,
     482,   483,   484,   485,   486,   487,   488,     0,   489,     0,
     491,   492,   493,   494,   495,   496,   497,     0,     0,   498,
       0,     0,   499,   500,   501,   502,   503,   504,   505,   506,
     507,   508,   509,   510,   511,   512,   513,   514,   515,   516,
     517,   518,   519,   924,  1507,   658,     0,     0,     0,  1089,
       0,     0,  2761,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   113,   114,   115,   116,   117,   118,   119,   120,
     121,     0,   122,   123,   124,     0,     0,     0,   925,     0,
     125,     0,     0,     0,   926,   127,   128,     0,   129,   130,
     131,   927,   133,   134,   135,   928,   929,   930,   931,   932,
       0,   141,   142,   143,   144,   145,   146,     0,     0,   147,
     148,   933,   934,   151,     0,   152,   153,   154,   155,   935,
       0,   936,     0,   937,   159,   160,   161,   162,   163,   938,
     165,   166,   167,     0,   168,   169,   170,   171,   172,   173,
       0,   939,   175,   176,   177,   178,   179,   180,   181,   182,
     183,   184,   940,   941,   187,  1715,   188,     0,   189,   190,
     191,   192,   193,   194,     0,   195,   196,   197,   198,   199,
     200,     0,     0,   201,   202,   203,   204,   205,   206,   207,
       0,   208,   209,   210,     0,   211,   212,   213,     0,   214,
     215,   216,   217,   942,   219,   220,   221,   222,   223,   943,
    1508,   225,     0,   226,   227,   944,   229,     0,   230,     0,
     231,   945,     0,   946,   234,   235,   947,   948,   238,     0,
     239,   240,     0,     0,   949,   950,   243,   244,     0,   245,
     246,   247,   248,   249,   250,   251,   951,   253,   254,   255,
     256,     0,   257,   258,   259,   260,   261,   262,   263,     0,
     264,   952,   953,   267,   268,   269,   270,   271,   954,   955,
       0,   956,     0,   275,   957,   958,   278,   959,   280,   281,
     282,   283,   284,   285,   286,     0,     0,   287,   960,   289,
     961,     0,   291,   292,   293,   294,   295,   296,   297,   298,
     962,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   963,
     964,   965,   321,   322,   323,   324,   966,     0,   326,   327,
     967,   329,     0,   968,   331,   969,   333,   334,   335,     0,
     336,   337,  1509,     0,   338,   339,   340,     0,     0,   341,
     970,   971,   344,   972,   973,   347,   348,   349,   350,   351,
     352,   353,   354,   355,   356,   357,   358,     0,     0,     0,
       0,   359,   360,   974,   975,   363,   364,   976,   366,   367,
     368,     0,   369,   370,   371,   372,   373,   374,   375,   376,
       0,   377,   378,   379,   977,   381,   382,   383,   384,     0,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,     0,   399,   400,   978,   402,   403,
     404,   979,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,     0,   980,   417,   418,   419,   420,   421,
     422,   981,   424,   425,   426,   427,   982,   429,   430,   983,
     432,     0,   433,   434,   435,   436,   437,   438,   439,   440,
     441,   442,   443,   444,   445,   984,   447,   985,   449,     0,
     450,   451,     0,   452,   986,   454,   455,   456,   457,   458,
       0,   987,   988,     0,   461,     0,   462,   463,   989,   465,
     990,  1510,   467,   468,   991,   470,   471,   472,   473,   474,
       0,     0,   475,   476,   477,     0,   478,   479,   480,   481,
       0,   482,   483,   484,   485,   486,  1346,   993,     0,   489,
     994,   491,   492,   493,   494,   495,   496,   497,     0,     0,
     498,     0,     0,   499,   500,   501,   502,   503,   504,   995,
     996,   997,   998,   999,  1000,  1001,  1002,  1003,  1004,  1005,
     516,   517,   518,   519,   924,  1507,   658,     0,     0,     0,
    1089,  1511,  1512,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   113,   114,   115,   116,   117,   118,   119,
     120,   121,     0,   122,   123,   124,     0,     0,     0,   925,
       0,   125,     0,     0,     0,   926,   127,   128,     0,   129,
     130,   131,   927,   133,   134,   135,   928,   929,   930,   931,
     932,     0,   141,   142,   143,   144,   145,   146,     0,     0,
     147,   148,   933,   934,   151,     0,   152,   153,   154,   155,
     935,     0,   936,     0,   937,   159,   160,   161,   162,   163,
     938,   165,   166,   167,     0,   168,   169,   170,   171,   172,
     173,     0,   939,   175,   176,   177,   178,   179,   180,   181,
     182,   183,   184,   940,   941,   187,  1717,   188,     0,   189,
     190,   191,   192,   193,   194,     0,   195,   196,   197,   198,
     199,   200,     0,     0,   201,   202,   203,   204,   205,   206,
     207,     0,   208,   209,   210,     0,   211,   212,   213,     0,
     214,   215,   216,   217,   942,   219,   220,   221,   222,   223,
     943,  1508,   225,     0,   226,   227,   944,   229,     0,   230,
       0,   231,   945,     0,   946,   234,   235,   947,   948,   238,
       0,   239,   240,     0,     0,   949,   950,   243,   244,     0,
     245,   246,   247,   248,   249,   250,   251,   951,   253,   254,
     255,   256,     0,   257,   258,   259,   260,   261,   262,   263,
       0,   264,   952,   953,   267,   268,   269,   270,   271,   954,
     955,     0,   956,     0,   275,   957,   958,   278,   959,   280,
     281,   282,   283,   284,   285,   286,     0,     0,   287,   960,
     289,   961,     0,   291,   292,   293,   294,   295,   296,   297,
     298,   962,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     963,   964,   965,   321,   322,   323,   324,   966,     0,   326,
     327,   967,   329,     0,   968,   331,   969,   333,   334,   335,
       0,   336,   337,  1509,     0,   338,   339,   340,     0,     0,
     341,   970,   971,   344,   972,   973,   347,   348,   349,   350,
     351,   352,   353,   354,   355,   356,   357,   358,     0,     0,
       0,     0,   359,   360,   974,   975,   363,   364,   976,   366,
     367,   368,     0,   369,   370,   371,   372,   373,   374,   375,
     376,     0,   377,   378,   379,   977,   381,   382,   383,   384,
       0,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,     0,   399,   400,   978,   402,
     403,   404,   979,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,     0,   980,   417,   418,   419,   420,
     421,   422,   981,   424,   425,   426,   427,   982,   429,   430,
     983,   432,     0,   433,   434,   435,   436,   437,   438,   439,
     440,   441,   442,   443,   444,   445,   984,   447,   985,   449,
       0,   450,   451,     0,   452,   986,   454,   455,   456,   457,
     458,     0,   987,   988,     0,   461,     0,   462,   463,   989,
     465,   990,  1510,   467,   468,   991,   470,   471,   472,   473,
     474,     0,     0,   475,   476,   477,     0,   478,   479,   480,
     481,     0,   482,   483,   484,   485,   486,  1346,   993,     0,
     489,   994,   491,   492,   493,   494,   495,   496,   497,     0,
       0,   498,     0,     0,   499,   500,   501,   502,   503,   504,
     995,   996,   997,   998,   999,  1000,  1001,  1002,  1003,  1004,
    1005,   516,   517,   518,   519,   924,  1507,   658,     0,     0,
       0,  1089,  1511,  1512,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   113,   114,   115,   116,   117,   118,
     119,   120,   121,     0,   122,   123,   124,     0,     0,     0,
     925,     0,   125,     0,     0,     0,   926,   127,   128,     0,
     129,   130,   131,   927,   133,   134,   135,   928,   929,   930,
     931,   932,     0,   141,   142,   143,   144,   145,   146,     0,
       0,   147,   148,   933,   934,   151,     0,   152,   153,   154,
     155,   935,     0,   936,     0,   937,   159,   160,   161,   162,
     163,   938,   165,   166,   167,     0,   168,   169,   170,   171,
     172,   173,     0,   939,   175,   176,   177,   178,   179,   180,
     181,   182,   183,   184,   940,   941,   187,     0,   188,     0,
     189,   190,   191,   192,   193,   194,     0,   195,   196,   197,
     198,   199,   200,     0,     0,   201,   202,   203,   204,   205,
     206,   207,     0,   208,   209,   210,     0,   211,   212,   213,
       0,   214,   215,   216,   217,   942,   219,   220,   221,   222,
     223,   943,  1508,   225,     0,   226,   227,   944,   229,     0,
     230,     0,   231,   945,     0,   946,   234,   235,   947,   948,
     238,     0,   239,   240,     0,     0,   949,   950,   243,   244,
       0,   245,   246,   247,   248,   249,   250,   251,   951,   253,
     254,   255,   256,     0,   257,   258,   259,   260,   261,   262,
     263,     0,   264,   952,   953,   267,   268,   269,   270,   271,
     954,   955,     0,   956,     0,   275,   957,   958,   278,   959,
     280,   281,   282,   283,   284,   285,   286,     0,     0,   287,
     960,   289,   961,     0,   291,   292,   293,   294,   295,   296,
     297,   298,   962,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   963,   964,   965,   321,   322,   323,   324,   966,     0,
     326,   327,   967,   329,     0,   968,   331,   969,   333,   334,
     335,     0,   336,   337,  1509,     0,   338,   339,   340,     0,
       0,   341,   970,   971,   344,   972,   973,   347,   348,   349,
     350,   351,   352,   353,   354,   355,   356,   357,   358,     0,
       0,     0,     0,   359,   360,   974,   975,   363,   364,   976,
     366,   367,   368,     0,   369,   370,   371,   372,   373,   374,
     375,   376,     0,   377,   378,   379,   977,   381,   382,   383,
     384,     0,   385,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,     0,   399,   400,   978,
     402,   403,   404,   979,   406,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,     0,   980,   417,   418,   419,
     420,   421,   422,   981,   424,   425,   426,   427,   982,   429,
     430,   983,   432,     0,   433,   434,   435,   436,   437,   438,
     439,   440,   441,   442,   443,   444,   445,   984,   447,   985,
     449,     0,   450,   451,     0,   452,   986,   454,   455,   456,
     457,   458,     0,   987,   988,     0,   461,     0,   462,   463,
     989,   465,   990,  1510,   467,   468,   991,   470,   471,   472,
     473,   474,     0,     0,   475,   476,   477,     0,   478,   479,
     480,   481,     0,   482,   483,   484,   485,   486,  1346,   993,
       0,   489,   994,   491,   492,   493,   494,   495,   496,   497,
       0,     0,   498,     0,     0,   499,   500,   501,   502,   503,
     504,   995,   996,   997,   998,   999,  1000,  1001,  1002,  1003,
    1004,  1005,   516,   517,   518,   519,     0,     0,  1658,     0,
       0,  1659,     0,  1511,  1512,  1660,  1661,  1662,  1663,  1664,
    1665,  1666,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1667,     0,     0,
       0,     0,     0,  2209,     0,     0,     0,     0,  1669,  1658,
       0,     0,  1659,     0,     0,  1670,  1660,  1661,  1662,  1663,
    1664,  1665,  1666,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1667,     0,
    1671,     0,     0,     0,     0,     0,     0,     0,     0,  1669,
    1658,     0,     0,  1659,     0,     0,  1670,  1660,  1661,  1662,
    1663,  1664,  1665,  1666,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1667,
       0,  1671,     0,     0,  2210,     0,     0,     0,     0,     0,
    1669,  1658,     0,     0,  1659,     0,     0,  1670,  1660,  1661,
    1662,  1663,  1664,  1665,  1666,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1667,     0,  1671,     0,     0,  1960,     0,     0,     0,     0,
       0,  1669,     0,     0,     0,     0,     0,  1672,  1670,     0,
       0,  1658,     0,     0,  1659,     0,     0,     0,  1660,  1661,
    1662,  1663,  1664,  1665,  1666,     0,  1673,     0,     0,     0,
       0,  1674,     0,  1671,     0,     0,     0,     0,  1996,     0,
    1667,     0,     0,  1997,     0,     0,     0,     0,  1672,     0,
       0,  1669,     0,     0,  1675,  1676,     0,     0,  1670,     0,
       0,     0,     0,     0,     0,     0,     0,  1673,     0,     0,
    1677,     0,  1674,     0,     0,     0,     0,     0,  3801,     0,
       0,     0,     0,  1671,     0,     0,     0,     0,     0,  1672,
       0,     0,     0,     0,     0,  1675,  1676,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1678,  1673,     0,
    1679,  1677,     0,  1674,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1680,     0,     0,  1681,     0,     0,
    1672,     0,     0,     0,     0,     0,  1675,  1676,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1678,  1673,
       0,  1679,  1677,     0,  1674,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1680,     0,     0,  1681,     0,
       0,     0,     0,     0,     0,     0,     0,  1675,  1676,     0,
    1672,     0,     0,     0,     0,     0,     0,     0,     0,  1678,
       0,     0,  1679,  1677,     0,     0,     0,     0,     0,  1673,
       0,     0,     0,     0,  1674,     0,  1680,     0,     0,  1681,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1682,  1675,  1676,     0,
    1678,     0,     0,  1679,     0,     0,     0,     0,  3802,     0,
       0,     0,     0,  1677,     0,     0,     0,  1680,     0,     0,
    1681,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1682,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1678,     0,     0,  1679,     0,     0,     0,     0,     0,     0,
    2213,     0,     0,     0,     0,     0,     0,  1680,     0,     0,
    1681,     0,     0,     0,     0,     0,     0,     0,  1682,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1967,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1683,     0,     0,  1684,  1685,  1686,
       0,  1687,  1688,  1689,  1690,  1691,  1692,     0,     0,  1682,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1658,     0,     0,  1659,     0,     0,     0,  1660,  1661,  1662,
    1663,  1664,  1665,  1666,     0,  1683,     0,     0,  1684,  1685,
    1686,     0,  1687,  1688,  1689,  1690,  1691,  1692,     0,  1667,
       0,     0,     0,     0,  2002,     0,     0,     0,     0,  1682,
    1669,  1658,     0,     0,  1659,     0,     0,  1670,  1660,  1661,
    1662,  1663,  1664,  1665,  1666,     0,  1683,     0,     0,  1684,
    1685,  1686,     0,  1687,  1688,  1689,  1690,  1691,  1692,     0,
    1667,     0,  1671,     0,     0,     0,     0,     0,     0,     0,
       0,  1669,     0,     0,     0,     0,     0,     0,  1670,     0,
       0,     0,     0,     0,     0,     0,     0,  1683,     0,     0,
    1684,  1685,  1686,     0,  1687,  1688,  1689,  1690,  1691,  1692,
       0,     0,     0,  1671,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1658,     0,     0,  1659,     0,     0,     0,  1660,  1661,
    1662,  1663,  1664,  1665,  1666,     0,     0,  1683,     0,     0,
    1684,  1685,  1686,     0,  1687,  1688,  1689,  1690,  1691,  1692,
    1667,     0,     0,     0,     0,  2009,     0,     0,     0,  1672,
       0,  1669,     0,  1658,     0,     0,  1659,     0,  1670,     0,
    1660,  1661,  1662,  1663,  1664,  1665,  1666,     0,  1673,     0,
       0,     0,     0,  1674,     0,     0,     0,     0,     0,     0,
       0,     0,  1667,  1671,     0,  2007,     0,     0,     0,     0,
    1672,     0,     0,  1669,     0,     0,  1675,  1676,     0,     0,
    1670,     0,     0,     0,     0,     0,     0,     0,     0,  1673,
       0,     0,  1677,     0,  1674,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1671,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1675,  1676,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1678,
       0,     0,  1679,  1677,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1680,     0,     0,  1681,
       0,     0,     0,     0,     0,     0,  1658,     0,     0,  1659,
    1672,     0,     0,  1660,  1661,  1662,  1663,  1664,  1665,  1666,
    1678,     0,     0,  1679,     0,     0,     0,     0,     0,  1673,
       0,     0,     0,     0,  1674,  1667,     0,  1680,     0,     0,
    1681,     0,  2097,     0,     0,     0,  1669,     0,     0,     0,
       0,     0,  1672,  1670,     0,     0,     0,  1675,  1676,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1673,     0,  1677,     0,     0,  1674,     0,  1671,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1682,  1675,
    1676,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1678,     0,     0,  1679,     0,  1677,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1680,     0,     0,
    1681,     0,     0,     0,     0,     0,     0,     0,     0,  1682,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1678,     0,     0,  1679,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1680,
       0,     0,  1681,     0,     0,  1672,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1673,     0,     0,     0,     0,  1674,
       0,     0,     0,     0,     0,     0,  1683,     0,     0,  1684,
    1685,  1686,     0,  1687,  1688,  1689,  1690,  1691,  1692,     0,
       0,     0,  1675,  1676,     0,     0,     0,     0,     0,  1682,
       0,     0,  1658,     0,     0,  1659,     0,     0,  1677,  1660,
    1661,  1662,  1663,  1664,  1665,  1666,     0,  1683,     0,     0,
    1684,  1685,  1686,     0,  1687,  1688,  1689,  1690,  1691,  1692,
       0,  1667,     0,     0,     0,     0,  2815,     0,     0,     0,
       0,  1682,  1669,     0,     0,  1678,     0,     0,  1679,  1670,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1680,     0,     0,  1681,     0,     0,     0,     0,
       0,     0,     0,  1658,  1671,     0,  1659,     0,     0,     0,
    1660,  1661,  1662,  1663,  1664,  1665,  1666,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1667,     0,     0,     0,     0,  1683,     0,     0,
    1684,  1685,  1686,  1669,  1687,  1688,  1689,  1690,  1691,  1692,
    1670,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1671,     0,     0,     0,  1683,
       0,     0,  1684,  1685,  1686,     0,  1687,  1688,  1689,  1690,
    1691,  1692,     0,     0,  1682,  1658,     0,     0,  1659,     0,
       0,  1672,  1660,  1661,  1662,  1663,  1664,  1665,  1666,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1673,     0,     0,     0,  1667,  1674,     0,     0,  2804,     0,
       0,     0,     0,     0,     0,  1669,     0,     0,     0,     0,
       0,     0,  1670,     0,     0,     0,     0,     0,  1675,  1676,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1677,     0,     0,  1671,     0,     0,
       0,     0,  1672,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1673,     0,     0,     0,     0,  1674,     0,     0,     0,
       0,  1678,  1683,     0,  1679,  1684,  1685,  1686,     0,  1687,
    1688,  1689,  1690,  1691,  1692,     0,     0,     0,  1680,  1675,
    1676,  1681,     0,     0,     0,     0,     0,     0,     0,  1088,
       0,     0,  3175,     0,     0,  1677,     0,  3176,  3177,  3178,
    3179,  3180,  3181,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  3182,     0,
       0,     0,     0,     0,  1672,     0,     0,     0,     0,  3183,
       0,     0,  1678,     0,     0,  1679,  3184,     0,     0,     0,
       0,     0,     0,  1673,     0,     0,     0,     0,  1674,  1680,
       0,     0,  1681,     0,     0,     0,     0,     0,     0,     0,
       0,  3185,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1675,  1676,     0,     0,     0,     0,     0,     0,     0,
    1682,     0,     0,     0,     0,     0,     0,  1677,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1678,     0,     0,  1679,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1680,     0,     0,  1681,     0,     0,     0,     0,     0,
       0,  1682,     0,     0,     0,     0,     0,     0,  3186,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  3187,     0,     0,
       0,     0,  3188,     0,     0,     0,     0,     0,  1683,     0,
       0,  1684,  1685,  1686,     0,  1687,  1688,  1689,  1690,  1691,
    1692,     0,     0,     0,     0,  3189,  3190,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  3191,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1682,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  3192,  1683,
       0,  3193,  1684,  1685,  1686,     0,  1687,  1688,  1689,  1690,
    1691,  1692,     0,     0,     0,  1980,     0,     0,  3194,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1683,     0,     0,  1684,  1685,  1686,     0,  1687,  1688,
    1689,  1690,  2230,  1692,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  3195,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1277,
       0,  2119,     0,     0,     0,  3196,     0,     0,  3197,  3198,
    3199,     0,  3200,  3201,  3202,  3203,  3204,  3205,   113,   114,
     115,   116,   117,   118,   119,   120,   121,  1278,   122,   123,
     124,  1279,  1280,  1281,   925,  1282,   125,  1283,  1284,  1285,
     926,   127,   128,  1286,   129,   130,   131,   927,   133,   134,
     135,   928,   929,   930,   931,   932,  1287,   141,   142,   143,
     144,   145,   146,  1288,  1289,   147,   148,   933,   934,   151,
    1290,   152,   153,   154,   155,   935,  1291,   936,  1292,   937,
     159,   160,   161,   162,   163,   938,   165,   166,   167,  1293,
     168,   169,   170,   171,   172,   173,  1294,   939,   175,   176,
     177,   178,   179,   180,   181,   182,   183,   184,   940,   941,
     187,  1295,   188,  1296,   189,   190,   191,   192,   193,   194,
    1297,   195,   196,   197,   198,   199,   200,  1298,  1299,   201,
     202,   203,   204,   205,   206,   207,  1300,   208,   209,   210,
    1301,   211,   212,   213,  1302,   214,   215,   216,   217,   942,
     219,   220,   221,   222,   223,   943,  1303,   225,  1304,   226,
     227,   944,   229,  1305,   230,  1306,   231,   945,  1307,   946,
     234,   235,   947,   948,   238,  1308,   239,   240,  1309,  1310,
     949,   950,   243,   244,  1311,   245,   246,   247,   248,   249,
     250,   251,   951,   253,   254,   255,   256,  1312,   257,   258,
     259,   260,   261,   262,   263,  1313,   264,   952,   953,   267,
     268,   269,   270,   271,   954,   955,  1314,   956,  1315,   275,
     957,   958,   278,   959,   280,   281,   282,   283,   284,   285,
     286,  1316,  1317,   287,   960,   289,   961,  1318,   291,   292,
     293,   294,   295,   296,   297,   298,   962,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   963,   964,   965,   321,   322,
     323,   324,   966,  1319,   326,   327,   967,   329,  1320,   968,
     331,   969,   333,   334,   335,  1321,   336,   337,  1322,  1323,
     338,   339,   340,  1324,  1325,   341,   970,   971,   344,   972,
     973,   347,   348,   349,   350,   351,   352,   353,   354,   355,
     356,   357,   358,  1326,  1327,  1328,  1329,   359,   360,   974,
     975,   363,   364,   976,   366,   367,   368,  1330,   369,   370,
     371,   372,   373,   374,   375,   376,  1331,   377,   378,   379,
     977,   381,   382,   383,   384,  1332,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
    1333,   399,   400,   978,   402,   403,   404,   979,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,  1334,
     980,   417,   418,   419,   420,   421,   422,   981,   424,   425,
     426,   427,   982,   429,   430,   983,   432,  1335,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   984,   447,   985,   449,  1336,   450,   451,  1337,   452,
     986,   454,   455,   456,   457,   458,  1338,   987,   988,  1339,
     461,  1340,   462,   463,   989,   465,   990,  1341,   467,   468,
     991,   470,   471,   472,   473,   474,  1342,  1343,   475,   476,
     477,  1344,   478,   479,   480,   481,  1345,   482,   483,   484,
     485,   486,  1346,   993,  1347,   489,   994,   491,   492,   493,
     494,   495,   496,   497,  1348,  1349,   498,  1350,  1351,   499,
     500,   501,   502,   503,   504,   995,   996,   997,   998,   999,
    1000,  1001,  1002,  1003,  1004,  1005,   516,   517,   518,   519,
    1277,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   113,
     114,   115,   116,   117,   118,   119,   120,   121,  1278,   122,
     123,   124,  1279,  1280,  1281,   925,  1282,   125,  1283,  1284,
    1285,   926,   127,   128,  1286,   129,   130,   131,   927,   133,
     134,   135,   928,   929,   930,   931,   932,  1287,   141,   142,
     143,   144,   145,   146,  1288,  1289,   147,   148,   933,   934,
     151,  1290,   152,   153,   154,   155,   935,  1291,   936,  1292,
     937,   159,   160,   161,   162,   163,   938,   165,   166,   167,
    1293,   168,   169,   170,   171,   172,   173,  1294,   939,   175,
     176,   177,   178,   179,   180,   181,   182,   183,   184,   940,
     941,   187,  1295,   188,  1296,   189,   190,   191,   192,   193,
     194,  1297,   195,   196,   197,   198,   199,   200,  1298,  1299,
     201,   202,   203,   204,   205,   206,   207,  1300,   208,   209,
     210,  1301,   211,   212,   213,  1302,   214,   215,   216,   217,
     942,   219,   220,   221,   222,   223,   943,  1303,   225,  1304,
     226,   227,   944,   229,  1305,   230,  1306,   231,   945,  1307,
     946,   234,   235,   947,   948,   238,  1308,   239,   240,  1309,
    1310,   949,   950,   243,   244,  1311,   245,   246,   247,   248,
     249,   250,   251,   951,   253,   254,   255,   256,  1312,   257,
     258,   259,   260,   261,   262,   263,  1313,   264,   952,   953,
     267,   268,   269,   270,   271,   954,   955,  1314,   956,  1315,
     275,   957,   958,   278,   959,   280,   281,   282,   283,   284,
     285,   286,  1316,  1317,   287,   960,   289,   961,  1318,   291,
     292,   293,   294,   295,   296,   297,   298,   962,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   963,   964,   965,   321,
     322,   323,   324,   966,  1319,   326,   327,   967,   329,  1320,
     968,   331,   969,   333,   334,   335,  1321,   336,   337,  1322,
    1323,   338,   339,   340,  1324,  1325,   341,   970,   971,   344,
     972,   973,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,  1326,  1327,  1328,  1329,   359,   360,
     974,   975,   363,   364,   976,   366,   367,   368,  1330,   369,
     370,   371,   372,   373,   374,   375,   376,  1331,   377,   378,
     379,   977,   381,   382,   383,   384,  1332,   385,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,  1333,   399,   400,   978,   402,   403,   404,   979,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
    1334,   980,   417,   418,   419,   420,   421,   422,   981,   424,
     425,   426,   427,   982,   429,   430,   983,   432,  1335,   433,
     434,   435,   436,   437,   438,   439,   440,   441,   442,   443,
     444,   445,   984,   447,   985,   449,  1336,   450,   451,  1337,
     452,   986,   454,   455,   456,   457,   458,  1338,   987,   988,
    1339,   461,  1340,   462,   463,   989,   465,   990,  1341,   467,
     468,   991,   470,   471,   472,   473,   474,  1342,  1343,   475,
     476,   477,  1344,   478,   479,   480,   481,  1345,   482,   483,
     484,   485,   486,  1346,   993,  1347,   489,   994,   491,   492,
     493,   494,   495,   496,   497,  1348,  1349,   498,  1350,  1351,
     499,   500,   501,   502,   503,   504,   995,   996,   997,   998,
     999,  1000,  1001,  1002,  1003,  1004,  1005,   516,   517,   518,
     519,  1277,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     113,   114,   115,   116,   117,  2275,   119,   120,   121,  1278,
     122,   123,   124,  1279,  1280,  1281,   925,  1282,   125,  1283,
    1284,  1285,   926,   127,   128,  1286,   129,   130,   131,   927,
     133,   134,   135,   928,   929,   930,   931,   932,  1287,   141,
     142,   143,   144,   145,   146,  1288,  1289,   147,   148,   933,
     934,   151,  1290,   152,   153,   154,   155,   935,  1291,   936,
    1292,   937,   159,   160,   161,   162,   163,   938,   165,   166,
     167,  1293,   168,   169,   170,   171,   172,   173,  1294,   939,
     175,   176,   177,   178,   179,   180,   181,   182,   183,   184,
     940,   941,   187,  1295,   188,  1296,   189,   190,   191,   192,
     193,   194,  1297,   195,   196,   197,   198,   199,   200,  1298,
    1299,   201,   202,   203,  2276,   205,   206,   207,  1300,   208,
     209,   210,  1301,   211,   212,   213,  1302,   214,   215,   216,
     217,   942,   219,   220,   221,   222,   223,   943,  1303,   225,
    1304,   226,   227,   944,   229,  1305,   230,  1306,   231,   945,
    1307,   946,   234,   235,   947,   948,   238,  1308,   239,   240,
    1309,  1310,   949,   950,   243,   244,  1311,   245,   246,   247,
     248,   249,   250,   251,   951,   253,   254,   255,   256,  1312,
     257,   258,   259,   260,   261,   262,   263,  1313,   264,   952,
     953,   267,   268,   269,   270,   271,   954,   955,  1314,   956,
    1315,   275,   957,   958,   278,   959,   280,   281,   282,   283,
     284,   285,   286,  1316,  1317,   287,   960,   289,   961,  1318,
     291,   292,   293,   294,   295,   296,   297,   298,   962,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   963,   964,   965,
     321,   322,   323,   324,   966,  1319,   326,   327,   967,   329,
    1320,   968,   331,   969,   333,   334,   335,  1321,   336,   337,
    1322,  1323,   338,   339,   340,  1324,  1325,   341,   970,   971,
     344,   972,   973,   347,   348,   349,   350,   351,   352,   353,
     354,   355,   356,   357,   358,  1326,  1327,  1328,  1329,   359,
     360,   974,   975,   363,   364,   976,   366,   367,   368,  1330,
     369,   370,   371,   372,   373,   374,   375,   376,  1331,   377,
     378,   379,   977,   381,   382,   383,   384,  1332,   385,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,  1333,   399,   400,   978,   402,   403,   404,   979,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,  1334,   980,   417,   418,   419,   420,   421,  2277,   981,
     424,   425,   426,   427,   982,   429,   430,   983,   432,  1335,
     433,   434,   435,   436,   437,   438,   439,   440,   441,   442,
     443,   444,   445,   984,   447,   985,   449,  1336,   450,   451,
    1337,   452,   986,   454,   455,   456,   457,   458,  1338,   987,
     988,  1339,   461,  1340,   462,   463,   989,   465,   990,  1341,
     467,   468,   991,   470,   471,   472,   473,   474,  1342,  1343,
     475,   476,   477,  1344,   478,   479,   480,   481,  1345,   482,
     483,   484,   485,   486,  1346,   993,  1347,   489,   994,   491,
     492,   493,   494,   495,   496,   497,  1348,  1349,   498,  1350,
    1351,   499,   500,   501,   502,   503,   504,   995,   996,   997,
     998,   999,  1000,  1001,  1002,  1003,  1004,  1005,   516,   517,
     518,   519,   924,     0,   658,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   113,   114,   115,   116,   117,   118,   119,   120,   121,
       0,   122,   123,   124,     0,     0,     0,   925,     0,   125,
       0,     0,     0,   926,   127,   128,     0,   129,   130,   131,
     927,   133,   134,   135,   928,   929,   930,   931,   932,     0,
     141,   142,   143,   144,   145,   146,     0,     0,   147,   148,
     933,   934,   151,     0,   152,   153,   154,   155,   935,     0,
     936,     0,   937,   159,   160,   161,   162,   163,   938,   165,
     166,   167,     0,   168,   169,   170,   171,   172,   173,     0,
     939,   175,   176,   177,   178,   179,   180,   181,   182,   183,
     184,   940,   941,   187,     0,   188,     0,   189,   190,   191,
     192,   193,   194,     0,   195,   196,   197,   198,   199,   200,
       0,     0,   201,   202,   203,   204,   205,   206,   207,     0,
     208,   209,   210,     0,   211,   212,   213,     0,   214,   215,
     216,   217,   942,   219,   220,   221,   222,   223,   943,  1508,
     225,     0,   226,   227,   944,   229,     0,   230,     0,   231,
     945,     0,   946,   234,   235,   947,   948,   238,     0,   239,
     240,     0,     0,   949,   950,   243,   244,     0,   245,   246,
     247,   248,   249,   250,   251,   951,   253,   254,   255,   256,
       0,   257,   258,   259,   260,   261,   262,   263,     0,   264,
     952,   953,   267,   268,   269,   270,   271,   954,   955,     0,
     956,     0,   275,   957,   958,   278,   959,   280,   281,   282,
     283,   284,   285,   286,     0,     0,   287,   960,   289,   961,
       0,   291,   292,   293,   294,   295,   296,   297,   298,   962,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   963,   964,
     965,   321,   322,   323,   324,   966,     0,   326,   327,   967,
     329,     0,   968,   331,   969,   333,   334,   335,     0,   336,
     337,  1509,     0,   338,   339,   340,     0,     0,   341,   970,
     971,   344,   972,   973,   347,   348,   349,   350,   351,   352,
     353,   354,   355,   356,   357,   358,     0,     0,     0,     0,
     359,   360,   974,   975,   363,   364,   976,   366,   367,   368,
       0,   369,   370,   371,   372,   373,   374,   375,   376,     0,
     377,   378,   379,   977,   381,   382,   383,   384,     0,   385,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,     0,   399,   400,   978,   402,   403,   404,
     979,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,     0,   980,   417,   418,   419,   420,   421,   422,
     981,   424,   425,   426,   427,   982,   429,   430,   983,   432,
       0,   433,   434,   435,   436,   437,   438,   439,   440,   441,
     442,   443,   444,   445,   984,   447,   985,   449,     0,   450,
     451,     0,   452,   986,   454,   455,   456,   457,   458,     0,
     987,   988,     0,   461,     0,   462,   463,   989,   465,   990,
    1510,   467,   468,   991,   470,   471,   472,   473,   474,     0,
       0,   475,   476,   477,     0,   478,   479,   480,   481,     0,
     482,   483,   484,   485,   486,  1346,   993,     0,   489,   994,
     491,   492,   493,   494,   495,   496,   497,     0,     0,   498,
       0,     0,   499,   500,   501,   502,   503,   504,   995,   996,
     997,   998,   999,  1000,  1001,  1002,  1003,  1004,  1005,   516,
     517,   518,   519,   924,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   113,   114,   115,   116,   117,   118,   119,   120,
     121,     0,   122,   123,   124,     3,     4,     0,   925,     0,
     125,     0,     0,     0,   926,   127,   128,     0,   129,   130,
     131,   927,   133,   134,   135,   928,   929,   930,   931,   932,
       0,   141,   142,   143,   144,   145,   146,     0,     0,   147,
     148,   933,   934,   151,     0,   152,   153,   154,   155,   935,
       0,   936,     0,   937,   159,   160,   161,   162,   163,   938,
     165,   166,   167,     0,   168,   169,   170,   171,   172,   173,
       0,   939,   175,   176,   177,   178,   179,   180,   181,   182,
     183,   184,   940,   941,   187,     0,   188,     0,   189,   190,
     191,   192,   193,   194,     0,   195,   196,   197,   198,   199,
     200,     0,     0,   201,   202,   203,   204,   205,   206,   207,
       0,   208,   209,   210,     0,   211,   212,   213,     0,   214,
     215,   216,   217,   942,   219,   220,   221,   222,   223,   943,
       0,   225,     0,   226,   227,   944,   229,     0,   230,     0,
     231,   945,     0,   946,   234,   235,   947,   948,   238,     0,
     239,   240,     0,     0,   949,   950,   243,   244,     0,   245,
     246,   247,   248,   249,   250,   251,   951,   253,   254,   255,
     256,     0,   257,   258,   259,   260,   261,   262,   263,     0,
     264,   952,   953,   267,   268,   269,   270,   271,   954,   955,
       0,   956,     0,   275,   957,   958,   278,   959,   280,   281,
     282,   283,   284,   285,   286,     0,     0,   287,   960,   289,
     961,     0,   291,   292,   293,   294,   295,   296,   297,   298,
     962,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   963,
     964,   965,   321,   322,   323,   324,   966,     0,   326,   327,
     967,   329,     0,   968,   331,   969,   333,   334,   335,     0,
     336,   337,     0,     0,   338,   339,   340,     0,     0,   341,
     970,   971,   344,   972,   973,   347,   348,   349,   350,   351,
     352,   353,   354,   355,   356,   357,   358,     0,     0,     0,
       0,   359,   360,   974,   975,   363,   364,   976,   366,   367,
     368,     0,   369,   370,   371,   372,   373,   374,   375,   376,
       0,   377,   378,   379,   977,   381,   382,   383,   384,     0,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,     0,   399,   400,   978,   402,   403,
     404,   979,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,     0,   980,   417,   418,   419,   420,   421,
     422,   981,   424,   425,   426,   427,   982,   429,   430,   983,
     432,     0,   433,   434,   435,   436,   437,   438,   439,   440,
     441,   442,   443,   444,   445,   984,   447,   985,   449,     0,
     450,   451,     0,   452,   986,   454,   455,   456,   457,   458,
       0,   987,   988,     0,   461,     0,   462,   463,   989,   465,
     990,     0,   467,   468,   991,   470,   471,   472,   473,   474,
       0,     0,   475,   476,   477,     0,   478,   479,   480,   481,
       0,   482,   483,   484,   485,   486,  1346,   993,     0,   489,
     994,   491,   492,   493,   494,   495,   496,   497,     0,     0,
     498,     0,     0,   499,   500,   501,   502,   503,   504,   995,
     996,   997,   998,   999,  1000,  1001,  1002,  1003,  1004,  1005,
     516,   517,   518,   519,   112,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   113,   114,   115,   116,   117,   118,   119,
     120,   121,     0,   122,   123,   124,     0,     0,     0,     0,
       0,   125,     0,     0,     0,   126,   127,   128,     0,   129,
     130,   131,   132,   133,   134,   135,   136,   137,   138,   139,
     140,     0,   141,   142,   143,   144,   145,   146,     0,   627,
     147,   148,   149,   150,   151,     0,   152,   153,   154,   155,
     628,     0,   629,     0,   158,   159,   160,   161,   162,   163,
     164,   165,   166,   167,     0,   168,   169,   170,   171,   172,
     173,     0,   174,   175,   176,   177,   178,   179,   180,   181,
     182,   183,   184,   185,   186,   187,     0,   188,     0,   189,
     190,   191,   192,   193,   194,     0,   195,   196,   197,   198,
     199,   200,     0,     0,   201,   202,   203,   204,   205,   206,
     207,     0,   208,   209,   210,     0,   211,   212,   213,     0,
     214,   215,   216,   217,   218,   219,   220,   221,   222,   223,
     630,     0,   225,     0,   226,   227,   228,   229,     0,   230,
       0,   231,   232,     0,   233,   234,   235,   236,   237,   238,
       0,   239,   240,     0,     0,   241,   242,   243,   244,     0,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,     0,   257,   258,   259,   260,   261,   262,   263,
       0,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,     0,   274,     0,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,     0,     0,   287,   288,
     289,   290,     0,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323,   324,   325,     0,   326,
     327,   328,   329,     0,   633,   331,   332,   333,   334,   335,
       0,   336,   337,     0,     0,   338,   339,   340,     0,     0,
     341,   342,   343,   344,   345,   635,   347,   348,   349,   350,
     351,   352,   353,   354,   355,   356,   357,   358,     0,     0,
       0,     0,   359,   360,   636,   362,   363,   364,   365,   366,
     367,   368,     0,   369,   370,   371,   372,   373,   374,   375,
     376,     0,   377,   378,   379,   380,   381,   382,   383,   384,
       0,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,     0,   399,   400,   401,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,     0,     0,   417,   418,   419,   420,
     421,   422,   423,   424,   425,   426,   427,   428,   429,   430,
     431,   432,     0,   433,   434,   435,   436,   437,   438,   439,
     440,   441,   442,   443,   444,   445,   446,   447,   638,   449,
       0,   450,   451,     0,   452,   453,   454,   455,   456,   457,
     458,     0,   459,   460,     0,   461,     0,   462,   463,   639,
     465,   640,     0,   467,   468,   641,   470,   471,   472,   473,
     474,     0,     0,   475,   476,   477,     0,   478,   479,   480,
     481,     0,   482,   483,   484,   485,   486,   487,   488,     0,
     489,   490,   491,   492,   493,   494,   495,   496,   497,     0,
       0,   498,     0,     0,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,   517,   518,   519,   112,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   113,   114,   115,   116,   117,   118,
     119,   120,   121,     0,   122,   123,   124,     0,     0,     0,
       0,     0,   125,     0,     0,     0,   126,   127,   128,     0,
     129,   130,   131,   132,   133,   134,   135,   136,   137,   138,
     139,   140,     0,   141,   142,   143,   144,   145,   146,     0,
       0,   147,   148,   149,   150,   151,     0,   152,   153,   154,
     155,   156,     0,   157,     0,   158,   159,   160,   161,   162,
     163,   164,   165,   166,   167,     0,   168,   169,   170,   171,
     172,   173,     0,   174,   175,   176,   177,   178,   179,   180,
     181,   182,   183,   184,   185,   186,   187,     0,   188,     0,
     189,   190,   191,   192,   193,   194,     0,   195,   196,   197,
     198,   199,   200,     0,     0,   201,   202,   203,   204,   205,
     206,   207,     0,   208,   209,   210,     0,   211,   212,   213,
       0,   214,   215,   216,   217,   218,   219,   220,   221,   222,
     223,   224,     0,   225,     0,   226,   227,   228,   229,     0,
     230,     0,   231,   232,     0,   233,   234,   235,   236,   237,
     238,     0,   239,   240,     0,     0,   241,   242,   243,   244,
       0,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,     0,   257,   258,   259,   260,   261,   262,
     263,     0,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,     0,   274,     0,   275,   276,   277,   278,   279,
     280,   281,   282,   283,   284,   285,   286,     0,     0,   287,
     288,   289,   290,     0,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,   323,   324,   325,     0,
     326,   327,   328,   329,     0,   330,   331,   332,   333,   334,
     335,     0,   336,   337,     0,     0,   338,   339,   340,     0,
       0,   341,   342,   343,   344,   345,   346,   347,   348,   349,
     350,   351,   352,   353,   354,   355,   356,   357,   358,     0,
       0,     0,     0,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,     0,   369,   370,   371,   372,   373,   374,
     375,   376,     0,   377,   378,   379,   380,   381,   382,   383,
     384,     0,   385,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,     0,   399,   400,   401,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,     0,     0,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,   428,   429,
     430,   431,   432,     0,   433,   434,   435,   436,   437,   438,
     439,   440,   441,   442,   443,   444,   445,   446,   447,   448,
     449,     0,   450,   451,     0,   452,   453,   454,   455,   456,
     457,   458,     0,   459,   460,     0,   461,     0,   462,   463,
     464,   465,   466,     0,   467,   468,   469,   470,   471,   472,
     473,   474,     0,     0,   475,   476,   477,     0,   478,   479,
     480,   481,     0,   482,   483,   484,   485,   486,   487,   488,
       0,   489,   490,   491,   492,   493,   494,   495,   496,   497,
       0,     0,   498,     0,     0,   499,   500,   501,   502,   503,
     504,   505,   506,   507,   508,   509,   510,   511,   512,   513,
     514,   515,   516,   517,   518,   519,   528,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   113,   114,   115,   116,   117,
     118,   119,   120,   121,     0,   122,   123,   124,     0,     0,
       0,     0,     0,   125,     0,     0,     0,     0,   127,   128,
       0,   129,   130,   131,     0,   133,   134,   135,   136,   137,
       0,   139,   140,     0,   141,   142,   143,   144,   145,   146,
       0,     0,   147,   148,   149,   150,   151,  1792,   152,   153,
     154,   155,   156,     0,     0,  1793,   158,   159,   160,   161,
     162,   163,     0,   165,   166,   167,  1794,   168,   169,   170,
     171,   172,   173,     0,     0,   175,   176,   177,   178,   179,
     180,   181,   182,   183,   184,   185,   186,   187,     0,   188,
       0,   189,   190,   191,   192,   193,   194,     0,   195,   196,
     197,   198,   199,   200,     0,     0,   201,   202,   203,   204,
     205,   206,   207,     0,   208,   209,   210,     0,   211,   212,
     213,     0,   214,   215,   216,   217,   218,   219,   220,   221,
     222,   223,   224,     0,   225,     0,   226,   227,   228,   229,
       0,   230,  1795,   231,     0,     0,     0,   234,   235,   529,
       0,   238,     0,   239,   240,     0,     0,   241,   242,   243,
     244,     0,   245,   246,   247,   248,   249,  1796,   251,     0,
     253,   254,   255,   256,     0,   257,   258,   259,   260,   261,
     262,   263,     0,   264,     0,   266,   267,   268,   269,   270,
     271,   272,   273,     0,   274,     0,   275,     0,     0,   278,
       0,   280,   281,   282,   283,   284,   285,   286,     0,     0,
     287,     0,   289,     0,     0,   291,   292,   293,   294,   295,
     296,   297,   298,   530,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,     0,   320,   321,   322,   323,   324,   325,
       0,   326,   327,     0,   329,     0,   330,   331,   332,   333,
     334,   335,     0,   336,   337,     0,     0,   338,   339,   340,
       0,     0,   341,   342,     0,   344,     0,   346,   347,   348,
     349,   350,   351,   352,   353,   354,   355,   356,   357,   358,
       0,     0,     0,     0,   359,   360,   361,     0,   363,   364,
     365,   366,   367,   368,  1797,   369,   370,   371,   372,   373,
     374,   375,   376,     0,   377,   378,   379,   380,   381,   382,
     383,   384,     0,   385,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,     0,   399,   400,
       0,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,     0,     0,   417,   418,
     419,   420,   421,   422,   423,   424,   425,   426,   427,     0,
     429,   430,   431,   432,     0,   433,   434,   435,   436,   437,
     438,   439,   440,   441,   442,   443,   444,   445,   531,   447,
     448,   449,     0,   450,   451,     0,   452,     0,   454,   455,
     456,   457,   458,     0,   459,   460,     0,   461,     0,   462,
     463,   464,   465,   466,     0,   467,   468,   469,   470,   471,
     472,   473,   474,     0,  1798,   475,   476,   477,     0,   478,
     479,   480,   481,     0,   482,   483,   484,   485,   486,   487,
     488,     0,   489,     0,   491,   492,   493,   494,   495,   496,
     497,     0,     0,   498,     0,     0,   499,   500,   501,   502,
     503,   504,   505,   506,   507,   508,   509,   510,   511,   512,
     513,   514,   515,   516,   517,   518,   519,   528,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   113,   114,   115,   116,
     117,   118,   119,   120,   121,     0,   122,   123,   124,     0,
       0,     0,     0,     0,   125,     0,     0,     0,     0,   127,
     128,     0,   129,   130,   131,     0,   133,   134,   135,   136,
     137,     0,   139,   140,     0,   141,   142,   143,   144,   145,
     146,     0,     0,   147,   148,   149,   150,   151,  1792,   152,
     153,   154,   155,   156,     0,     0,     0,   158,   159,   160,
     161,   162,   163,     0,   165,   166,   167,  1794,   168,   169,
     170,   171,   172,   173,     0,     0,   175,   176,   177,   178,
     179,   180,   181,   182,   183,   184,   185,   186,   187,     0,
     188,     0,   189,   190,   191,   192,   193,   194,     0,   195,
     196,   197,   198,   199,   200,     0,     0,   201,   202,   203,
     204,   205,   206,   207,     0,   208,   209,   210,     0,   211,
     212,   213,     0,   214,   215,   216,   217,   218,   219,   220,
     221,   222,   223,   224,     0,   225,     0,   226,   227,   228,
     229,     0,   230,  1795,   231,     0,     0,     0,   234,   235,
     529,     0,   238,     0,   239,   240,     0,     0,   241,   242,
     243,   244,     0,   245,   246,   247,   248,   249,   250,   251,
       0,   253,   254,   255,   256,     0,   257,   258,   259,   260,
     261,   262,   263,     0,   264,     0,   266,   267,   268,   269,
     270,   271,   272,   273,     0,   274,     0,   275,     0,     0,
     278,     0,   280,   281,   282,   283,   284,   285,   286,     0,
       0,   287,     0,   289,  2350,     0,   291,   292,   293,   294,
     295,   296,   297,   298,   530,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,     0,   320,   321,   322,   323,   324,
     325,     0,   326,   327,     0,   329,     0,   330,   331,   332,
     333,   334,   335,     0,   336,   337,     0,     0,   338,   339,
     340,     0,     0,   341,   342,     0,   344,     0,   346,   347,
     348,   349,   350,   351,   352,   353,   354,   355,   356,   357,
     358,     0,     0,     0,     0,   359,   360,   361,     0,   363,
     364,   365,   366,   367,   368,  1797,   369,   370,   371,   372,
     373,   374,   375,   376,     0,   377,   378,   379,   380,   381,
     382,   383,   384,     0,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,     0,   399,
     400,     0,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,     0,     0,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
       0,   429,   430,   431,   432,     0,   433,   434,   435,   436,
     437,   438,   439,   440,   441,   442,   443,   444,   445,   531,
     447,   448,   449,     0,   450,   451,     0,   452,     0,   454,
     455,   456,   457,   458,     0,   459,   460,     0,   461,     0,
     462,   463,   464,   465,   466,     0,   467,   468,   469,   470,
     471,   472,   473,   474,     0,  1798,   475,   476,   477,     0,
     478,   479,   480,   481,     0,   482,   483,   484,   485,   486,
     487,   488,     0,   489,     0,   491,   492,   493,   494,   495,
     496,   497,     0,     0,   498,     0,     0,   499,   500,   501,
     502,   503,   504,   505,   506,   507,   508,   509,   510,   511,
     512,   513,   514,   515,   516,   517,   518,   519,   528,     0,
     552,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   113,   114,   115,
     116,   117,   118,   119,   120,   121,     0,   122,   123,   124,
       3,     4,     0,     0,     0,   125,     0,     0,     0,     0,
     127,   128,     0,   129,   130,   131,     0,   133,   134,   135,
     136,   137,     0,   139,   140,     0,   141,   142,   143,   144,
     145,   146,     0,     0,   147,   148,   149,   150,   151,     0,
     152,   153,   154,   155,   156,     0,     0,     0,   158,   159,
     160,   161,   162,   163,     0,   165,   166,   167,     0,   168,
     169,   170,   171,   172,   173,     0,     0,   175,   176,   177,
     178,   179,   180,   181,   182,   183,   184,   185,   186,   187,
       0,   188,     0,   189,   190,   191,   192,   193,   194,     0,
     195,   196,   197,   198,   199,   200,     0,     0,   201,   202,
     203,   204,   205,   206,   207,     0,   208,   209,   210,     0,
     211,   212,   213,     0,   214,   215,   216,   217,   218,   219,
     220,   221,   222,   223,   224,     0,   225,     0,   226,   227,
     228,   229,     0,   230,     0,   231,     0,     0,     0,   234,
     235,   529,     0,   238,     0,   239,   240,     0,     0,   241,
     242,   243,   244,     0,   245,   246,   247,   248,   249,   250,
     251,     0,   253,   254,   255,   256,     0,   257,   258,   259,
     260,   261,   262,   263,     0,   264,     0,   266,   267,   268,
     269,   270,   271,   272,   273,     0,   274,     0,   275,     0,
       0,   278,     0,   280,   281,   282,   283,   284,   285,   286,
       0,     0,   287,     0,   289,     0,     0,   291,   292,   293,
     294,   295,   296,   297,   298,   530,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,     0,   320,   321,   322,   323,
     324,   325,     0,   326,   327,     0,   329,     0,   330,   331,
     332,   333,   334,   335,     0,   336,   337,     0,     0,   338,
     339,   340,     0,     0,   341,   342,     0,   344,     0,   346,
     347,   348,   349,   350,   351,   352,   353,   354,   355,   356,
     357,   358,     0,     0,     0,     0,   359,   360,   361,     0,
     363,   364,   365,   366,   367,   368,     0,   369,   370,   371,
     372,   373,   374,   375,   376,     0,   377,   378,   379,   380,
     381,   382,   383,   384,     0,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,     0,
     399,   400,     0,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,     0,     0,
     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
     427,     0,   429,   430,   431,   432,     0,   433,   434,   435,
     436,   437,   438,   439,   440,   441,   442,   443,   444,   445,
     531,   447,   448,   449,     0,   450,   451,     0,   452,     0,
     454,   455,   456,   457,   458,     0,   459,   460,     0,   461,
       0,   462,   463,   464,   465,   466,     0,   467,   468,   469,
     470,   471,   472,   473,   474,     0,     0,   475,   476,   477,
       0,   478,   479,   480,   481,     0,   482,   483,   484,   485,
     486,   487,   488,     0,   489,     0,   491,   492,   493,   494,
     495,   496,   497,     0,     0,   498,     0,     0,   499,   500,
     501,   502,   503,   504,   505,   506,   507,   508,   509,   510,
     511,   512,   513,   514,   515,   516,   517,   518,   519,   528,
       0,   552,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   113,   114,
     115,   116,   117,   118,   119,   120,   121,   553,   122,   123,
     124,     0,     0,     0,     0,     0,   125,     0,     0,     0,
       0,   127,   128,     0,   129,   130,   131,     0,   133,   134,
     135,   136,   137,     0,   139,   140,     0,   141,   142,   143,
     144,   145,   146,     0,     0,   147,   148,   149,   150,   151,
       0,   152,   153,   154,   155,   156,     0,     0,     0,   158,
     159,   160,   161,   162,   163,     0,   165,   166,   167,     0,
     168,   169,   170,   171,   172,   173,     0,     0,   175,   176,
     177,   178,   179,   180,   181,   182,   183,   184,   185,   186,
     187,     0,   188,     0,   189,   190,   191,   192,   193,   194,
       0,   195,   196,   197,   198,   199,   200,     0,     0,   201,
     202,   203,   204,   205,   206,   207,     0,   208,   209,   210,
       0,   211,   212,   213,     0,   214,   215,   216,   217,   218,
     219,   220,   221,   222,   223,   224,     0,   225,     0,   226,
     227,   228,   229,     0,   230,     0,   231,     0,     0,     0,
     234,   235,   529,     0,   238,     0,   239,   240,     0,     0,
     241,   242,   243,   244,     0,   245,   246,   247,   248,   249,
     250,   251,     0,   253,   254,   255,   256,     0,   257,   258,
     259,   260,   261,   262,   263,     0,   264,     0,   266,   267,
     268,   269,   270,   271,   272,   273,     0,   274,     0,   275,
       0,     0,   278,     0,   280,   281,   282,   283,   284,   285,
     286,     0,     0,   287,     0,   289,     0,     0,   291,   292,
     293,   294,   295,   296,   297,   298,   530,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,     0,   320,   321,   322,
     323,   324,   325,     0,   326,   327,     0,   329,     0,   330,
     331,   332,   333,   334,   335,     0,   336,   337,     0,     0,
     338,   339,   340,     0,     0,   341,   342,     0,   344,     0,
     346,   347,   348,   349,   350,   351,   352,   353,   354,   355,
     356,   357,   358,     0,     0,     0,     0,   359,   360,   361,
       0,   363,   364,   365,   554,   367,   368,     0,   369,   370,
     371,   372,   373,   374,   375,   376,     0,   377,   378,   379,
     380,   381,   382,   383,   384,     0,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
       0,   399,   400,     0,   402,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,     0,
       0,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,     0,   429,   430,   431,   432,     0,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   531,   447,   448,   449,     0,   450,   451,     0,   452,
       0,   454,   455,   456,   457,   458,     0,   459,   460,     0,
     461,     0,   462,   463,   464,   465,   466,     0,   467,   468,
     469,   470,   471,   472,   473,   474,     0,     0,   475,   476,
     477,     0,   478,   479,   480,   481,     0,   482,   483,   484,
     485,   486,   487,   488,     0,   489,     0,   491,   492,   493,
     494,   495,   496,   497,     0,     0,   498,     0,     0,   499,
     500,   501,   502,   503,   504,   505,   506,   507,   508,   509,
     510,   511,   512,   513,   514,   515,   516,   517,   518,   519,
     528,     0,   552,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   113,
     114,   115,   116,   117,   118,   119,   120,   121,     0,   122,
     123,   124,     0,     0,     0,     0,     0,   125,     0,     0,
       0,     0,   127,   128,     0,   129,   130,   131,     0,   133,
     134,   135,   136,   137,     0,   139,   140,     0,   141,   142,
     143,   144,   145,   146,     0,     0,   147,   148,   149,   150,
     151,     0,   152,   153,   154,   155,   156,     0,     0,     0,
     158,   159,   160,   161,   162,   163,     0,   165,   166,   167,
       0,   168,   169,   170,   171,   172,   173,     0,     0,   175,
     176,   177,   178,   179,   180,   181,   182,   183,   184,   185,
     186,   187,     0,   188,     0,   189,   190,   191,   192,   193,
     194,     0,   195,   196,   197,   198,   199,   200,     0,     0,
     201,   202,   203,   204,   205,   206,   207,     0,   208,   209,
     210,     0,   211,   212,   213,     0,   214,   215,   216,   217,
     218,   219,   220,   221,   222,   223,   224,     0,   225,     0,
     226,   227,   228,   229,     0,   230,     0,   231,     0,     0,
       0,   234,   235,   529,     0,   238,     0,   239,   240,     0,
       0,   241,   242,   243,   244,     0,   245,   246,   247,   248,
     249,   250,   251,     0,   253,   254,   255,   256,     0,   257,
     258,   259,   260,   261,   262,   263,     0,   264,     0,   266,
     267,   268,   269,   270,   271,   272,   273,     0,   274,     0,
     275,     0,     0,   278,     0,   280,   281,   282,   283,   284,
     285,   286,     0,     0,   287,     0,   289,     0,     0,   291,
     292,   293,   294,   295,   296,   297,   298,   530,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,     0,   320,   321,
     322,   323,   324,   325,     0,   326,   327,     0,   329,     0,
     330,   331,   332,   333,   334,   335,     0,   336,   337,     0,
     634,   338,   339,   340,     0,     0,   341,   342,     0,   344,
       0,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,     0,     0,     0,     0,   359,   360,
     361,     0,   363,   364,   365,   366,   367,   368,     0,   369,
     370,   371,   372,   373,   374,   375,   376,     0,   377,   378,
     379,   380,   381,   382,   383,   384,     0,   385,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,     0,   399,   400,     0,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
       0,     0,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,     0,   429,   430,   431,   432,     0,   433,
     434,   435,   436,   437,   438,   439,   440,   441,   442,   443,
     444,   445,   531,   447,   448,   449,     0,   450,   451,     0,
     452,     0,   454,   455,   456,   457,   458,     0,   459,   460,
       0,   461,     0,   462,   463,   464,   465,   466,     0,   467,
     468,   469,   470,   471,   472,   473,   474,     0,     0,   475,
     476,   477,     0,   478,   479,   480,   481,     0,   482,   483,
     484,   485,   486,   487,   488,     0,   489,     0,   491,   492,
     493,   494,   495,   496,   497,     0,     0,   498,     0,     0,
     499,   500,   501,   502,   503,   504,   505,   506,   507,   508,
     509,   510,   511,   512,   513,   514,   515,   516,   517,   518,
     519,   528,     0,   552,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     113,   114,   115,   116,   117,   118,   119,   120,   121,     0,
     122,   123,   124,     0,     0,     0,     0,     0,   125,     0,
       0,     0,     0,   127,   128,     0,   129,   130,   131,     0,
     133,   134,   135,   136,   137,     0,   139,   140,     0,   141,
     142,   143,   144,   145,   146,     0,     0,   147,   148,   149,
     150,   151,     0,   152,   153,   154,   155,   156,     0,     0,
       0,   158,   159,   160,   161,   162,   163,     0,   165,   166,
     167,     0,   168,   169,   170,   171,   172,   173,     0,     0,
     175,   176,   177,   178,   179,   180,   181,   182,   183,   184,
     185,   186,   187,     0,   188,     0,   189,   190,   191,   192,
     193,   194,     0,   195,   196,   197,   198,   199,   200,     0,
       0,   201,   202,   203,   204,   205,   206,   207,     0,   208,
     209,   210,     0,   211,   212,   213,     0,   214,   215,   216,
     217,   218,   219,   220,   221,   222,   223,   224,     0,   225,
       0,   226,   227,   228,   229,     0,   230,     0,   231,     0,
       0,     0,   234,   235,   529,     0,   238,     0,   239,   240,
       0,     0,   241,   242,   243,   244,     0,   245,   246,   247,
     248,   249,   796,   251,     0,   253,   254,   255,   256,     0,
     257,   258,   259,   260,   261,   262,   263,     0,   264,     0,
     266,   267,   268,   269,   270,   271,   272,   273,     0,   274,
       0,   275,     0,     0,   278,     0,   280,   281,   282,   283,
     284,   285,   286,     0,     0,   287,     0,   289,     0,     0,
     291,   292,   293,   294,   295,   296,   297,   298,   530,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,     0,   320,
     321,   322,   323,   324,   325,     0,   326,   327,     0,   329,
       0,   330,   331,   332,   333,   334,   335,     0,   336,   337,
       0,   634,   338,   339,   340,     0,     0,   341,   342,     0,
     344,     0,   346,   347,   348,   349,   350,   351,   352,   353,
     354,   355,   356,   357,   358,     0,     0,     0,     0,   359,
     360,   361,     0,   363,   364,   365,   366,   367,   368,     0,
     369,   370,   371,   372,   373,   374,   375,   376,     0,   377,
     378,   379,   380,   381,   382,   383,   384,     0,   385,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,     0,   399,   400,     0,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,     0,     0,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,     0,   429,   430,   431,   432,     0,
     433,   434,   435,   436,   437,   438,   439,   440,   441,   442,
     443,   444,   445,   531,   447,   448,   449,     0,   450,   451,
       0,   452,     0,   454,   455,   456,   457,   458,     0,   459,
     460,     0,   461,     0,   462,   463,   464,   465,   466,     0,
     467,   468,   469,   470,   471,   472,   473,   474,     0,     0,
     475,   476,   477,     0,   478,   479,   480,   481,     0,   482,
     483,   484,   485,   486,   487,   488,     0,   489,     0,   491,
     492,   493,   494,   495,   496,   497,     0,     0,   498,     0,
       0,   499,   500,   501,   502,   503,   504,   505,   506,   507,
     508,   509,   510,   511,   512,   513,   514,   515,   516,   517,
     518,   519,   528,     0,   552,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   113,   114,   115,   116,   117,   118,   119,   120,   121,
     825,   122,   123,   124,     0,     0,     0,     0,     0,   125,
       0,     0,     0,     0,   127,   128,     0,   129,   130,   131,
       0,   133,   134,   135,   136,   137,     0,   139,   140,     0,
     141,   142,   143,   144,   145,   146,     0,     0,   147,   148,
     149,   150,   151,     0,   152,   153,   154,   155,   156,     0,
       0,     0,   158,   159,   160,   161,   162,   163,     0,   165,
     166,   167,     0,   168,   169,   170,   171,   172,   173,     0,
       0,   175,   176,   177,   178,   179,   180,   181,   182,   183,
     184,   185,   186,   187,     0,   188,     0,   189,   190,   191,
     192,   193,   194,     0,   195,   196,   197,   198,   199,   200,
       0,     0,   201,   202,   203,   204,   205,   206,   207,     0,
     208,   209,   210,     0,   211,   212,   213,     0,   214,   215,
     216,   217,   218,   219,   220,   221,   222,   223,   224,     0,
     225,     0,   226,   227,   228,   229,     0,   230,     0,   231,
       0,     0,     0,   234,   235,   529,     0,   238,     0,   239,
     240,     0,     0,   241,   242,   243,   244,     0,   245,   246,
     247,   248,   249,   250,   251,     0,   253,   254,   255,   256,
       0,   257,   258,   259,   260,   261,   262,   263,     0,   264,
       0,   266,   267,   268,   269,   270,   271,   272,   273,     0,
     274,     0,   275,     0,     0,   278,     0,   280,   281,   282,
     283,   284,   285,   286,     0,     0,   287,     0,   289,     0,
       0,   291,   292,   293,   294,   295,   296,   297,   298,   530,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,     0,
     320,   321,   322,   323,   324,   325,     0,   326,   327,     0,
     329,     0,   330,   331,   332,   333,   334,   335,     0,   336,
     337,     0,     0,   338,   339,   340,     0,     0,   341,   342,
       0,   344,     0,   346,   347,   348,   349,   350,   351,   352,
     353,   354,   355,   356,   357,   358,     0,     0,     0,     0,
     359,   360,   361,     0,   363,   364,   365,   366,   367,   368,
       0,   369,   370,   371,   372,   373,   374,   375,   376,     0,
     377,   378,   379,   380,   381,   382,   383,   384,     0,   385,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,     0,   399,   400,     0,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,     0,     0,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,   427,     0,   429,   430,   431,   432,
       0,   433,   434,   435,   436,   437,   438,   439,   440,   441,
     442,   443,   444,   445,   531,   447,   448,   449,     0,   450,
     451,     0,   452,     0,   454,   455,   456,   457,   458,     0,
     459,   460,     0,   461,     0,   462,   463,   464,   465,   466,
       0,   467,   468,   469,   470,   471,   472,   473,   474,     0,
       0,   475,   476,   477,     0,   478,   479,   480,   481,     0,
     482,   483,   484,   485,   486,   487,   488,     0,   489,     0,
     491,   492,   493,   494,   495,   496,   497,     0,     0,   498,
       0,     0,   499,   500,   501,   502,   503,   504,   505,   506,
     507,   508,   509,   510,   511,   512,   513,   514,   515,   516,
     517,   518,   519,   528,  2013,     0,     0,     0,     0,  2014,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   113,   114,   115,   116,   117,   118,   119,   120,
     121,     0,   122,   123,   124,     0,     0,     0,     0,     0,
     125,     0,     0,     0,     0,   127,   128,     0,   129,   130,
     131,     0,   133,   134,   135,   136,   137,     0,   139,   140,
       0,   141,   142,   143,   144,   145,   146,     0,     0,   147,
     148,   149,   150,   151,     0,   152,   153,   154,   155,   156,
       0,     0,     0,   158,   159,   160,   161,   162,   163,     0,
     165,   166,   167,     0,   168,   169,   170,   171,   172,   173,
       0,     0,   175,   176,   177,   178,   179,   180,   181,   182,
     183,   184,   185,   186,   187,     0,   188,     0,   189,   190,
     191,   192,   193,   194,     0,   195,   196,   197,   198,   199,
     200,     0,     0,   201,   202,   203,   204,   205,   206,   207,
       0,   208,   209,   210,     0,   211,   212,   213,     0,   214,
     215,   216,   217,   218,   219,   220,   221,   222,   223,   224,
       0,   225,     0,   226,   227,   228,   229,     0,   230,     0,
     231,     0,     0,     0,   234,   235,   529,     0,   238,     0,
     239,   240,     0,     0,   241,   242,   243,   244,     0,   245,
     246,   247,   248,   249,   250,   251,     0,   253,   254,   255,
     256,     0,   257,   258,   259,   260,   261,   262,   263,     0,
     264,     0,   266,   267,   268,   269,   270,   271,   272,   273,
       0,   274,     0,   275,     0,     0,   278,     0,   280,   281,
     282,   283,   284,   285,   286,     0,     0,   287,     0,   289,
       0,     0,   291,   292,   293,   294,   295,   296,   297,   298,
     530,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
       0,   320,   321,   322,   323,   324,   325,     0,   326,   327,
       0,   329,     0,   330,   331,   332,   333,   334,   335,     0,
     336,   337,     0,     0,   338,   339,   340,     0,     0,   341,
     342,     0,   344,     0,   346,   347,   348,   349,   350,   351,
     352,   353,   354,   355,   356,   357,   358,     0,     0,     0,
       0,   359,   360,   361,     0,   363,   364,   365,   366,   367,
     368,     0,   369,   370,   371,   372,   373,   374,   375,   376,
       0,   377,   378,   379,   380,   381,   382,   383,   384,     0,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,     0,   399,   400,     0,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,     0,     0,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,     0,   429,   430,   431,
     432,     0,   433,   434,   435,   436,   437,   438,   439,   440,
     441,   442,   443,   444,   445,   531,   447,   448,   449,     0,
     450,   451,     0,   452,     0,   454,   455,   456,   457,   458,
       0,   459,   460,     0,   461,     0,   462,   463,   464,   465,
     466,     0,   467,   468,   469,   470,   471,   472,   473,   474,
       0,     0,   475,   476,   477,     0,   478,   479,   480,   481,
       0,   482,   483,   484,   485,   486,   487,   488,     0,   489,
       0,   491,   492,   493,   494,   495,   496,   497,     0,     0,
     498,     0,     0,   499,   500,   501,   502,   503,   504,   505,
     506,   507,   508,   509,   510,   511,   512,   513,   514,   515,
     516,   517,   518,   519,   528,     0,   552,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   113,   114,   115,   116,   117,   118,   119,
     120,   121,     0,   122,   123,   124,     0,     0,     0,     0,
       0,   125,     0,     0,     0,     0,   127,   128,     0,   129,
     130,   131,     0,   133,   134,   135,   136,   137,     0,   139,
     140,     0,   141,   142,   143,   144,   145,   146,     0,     0,
     147,   148,   149,   150,   151,     0,   152,   153,   154,   155,
     156,     0,     0,     0,   158,   159,   160,   161,   162,   163,
       0,   165,   166,   167,     0,   168,   169,   170,   171,   172,
     173,     0,     0,   175,   176,   177,   178,   179,   180,   181,
     182,   183,   184,   185,   186,   187,     0,   188,     0,   189,
     190,   191,   192,   193,   194,     0,   195,   196,   197,   198,
     199,   200,     0,     0,   201,   202,   203,   204,   205,   206,
     207,     0,   208,   209,   210,     0,   211,   212,   213,     0,
     214,   215,   216,   217,   218,   219,   220,   221,   222,   223,
     224,     0,   225,     0,   226,   227,   228,   229,     0,   230,
       0,   231,     0,     0,     0,   234,   235,   529,     0,  2021,
       0,   239,   240,     0,     0,   241,   242,   243,   244,     0,
     245,   246,   247,   248,   249,   250,   251,     0,   253,   254,
     255,   256,     0,   257,   258,   259,   260,   261,   262,   263,
       0,   264,     0,   266,   267,   268,   269,   270,   271,   272,
     273,     0,   274,     0,   275,     0,     0,   278,     0,   280,
     281,   282,   283,   284,   285,   286,     0,     0,   287,     0,
     289,     0,     0,   291,   292,  2022,   294,   295,   296,   297,
     298,   530,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,     0,   320,   321,   322,   323,   324,   325,     0,   326,
     327,     0,   329,     0,   330,   331,   332,   333,   334,   335,
       0,   336,   337,     0,     0,   338,   339,   340,     0,     0,
     341,   342,     0,   344,     0,   346,   347,   348,   349,   350,
     351,   352,   353,   354,   355,   356,   357,   358,     0,     0,
       0,     0,   359,   360,   361,     0,   363,   364,   365,   366,
     367,   368,     0,   369,   370,   371,   372,   373,   374,   375,
     376,     0,   377,   378,   379,   380,   381,   382,   383,   384,
       0,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,     0,   399,   400,     0,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,     0,     0,   417,   418,   419,   420,
     421,   422,   423,   424,   425,   426,   427,     0,   429,   430,
     431,   432,     0,   433,   434,   435,   436,   437,   438,   439,
     440,   441,   442,   443,   444,   445,   531,   447,   448,   449,
       0,   450,   451,  2023,   452,     0,   454,  2024,   456,  2025,
     458,     0,   459,   460,     0,   461,     0,   462,   463,   464,
     465,   466,     0,   467,   468,   469,   470,   471,   472,   473,
     474,     0,     0,   475,   476,  2026,     0,   478,   479,   480,
     481,     0,   482,   483,   484,   485,   486,   487,   488,     0,
     489,     0,   491,   492,   493,   494,   495,   496,   497,     0,
       0,   498,     0,     0,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,   517,   518,   519,   528,     0,   552,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   113,   114,   115,   116,   117,   118,
     119,   120,   121,     0,   122,   123,   124,     0,     0,     0,
       0,     0,   125,     0,     0,     0,     0,   127,   128,     0,
     129,   130,   131,     0,   133,   134,   135,   136,   137,     0,
     139,   140,     0,   141,   142,   143,   144,   145,   146,     0,
       0,   147,   148,   149,   150,   151,     0,   152,   153,   154,
     155,   156,     0,     0,     0,   158,   159,   160,   161,   162,
     163,     0,   165,   166,   167,     0,   168,   169,   170,   171,
     172,   173,     0,     0,   175,   176,   177,   178,   179,   180,
     181,   182,   183,   184,   185,   186,   187,     0,   188,     0,
     189,   190,   191,   192,   193,   194,     0,   195,   196,   197,
     198,   199,   200,     0,     0,   201,   202,   203,   204,   205,
     206,   207,     0,   208,   209,   210,     0,   211,   212,   213,
       0,   214,   215,   216,   217,   218,   219,   220,   221,   222,
     223,   224,     0,   225,     0,   226,   227,   228,   229,     0,
     230,     0,   231,     0,     0,     0,   234,   235,   529,     0,
     238,     0,   239,   240,     0,     0,   241,   242,   243,   244,
       0,   245,   246,   247,   248,   249,   250,   251,     0,   253,
     254,   255,   256,     0,   257,   258,   259,   260,   261,   262,
     263,     0,   264,     0,   266,   267,   268,   269,   270,   271,
     272,   273,     0,   274,     0,   275,     0,     0,   278,     0,
     280,   281,   282,   283,   284,   285,   286,     0,     0,   287,
       0,   289,     0,     0,   291,   292,   293,   294,   295,   296,
     297,   298,   530,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,     0,   320,   321,   322,   323,   324,   325,     0,
     326,   327,     0,   329,     0,   330,   331,   332,   333,   334,
     335,     0,   336,   337,     0,     0,   338,   339,   340,     0,
       0,   341,   342,     0,   344,     0,   346,   347,   348,   349,
     350,   351,   352,   353,   354,   355,   356,   357,   358,     0,
       0,     0,     0,   359,   360,   361,     0,   363,   364,   365,
     366,   367,   368,     0,   369,   370,   371,   372,   373,   374,
     375,   376,     0,   377,   378,   379,   380,   381,   382,   383,
     384,     0,   385,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,     0,   399,   400,     0,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,     0,     0,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,     0,   429,
     430,   431,   432,     0,   433,   434,   435,   436,   437,   438,
     439,   440,   441,   442,   443,   444,   445,   531,   447,   448,
     449,     0,   450,   451,     0,   452,     0,   454,   455,   456,
     457,   458,     0,   459,   460,     0,   461,     0,   462,   463,
     464,   465,   466,     0,   467,   468,   469,   470,   471,   472,
     473,   474,     0,     0,   475,   476,   477,     0,   478,   479,
     480,   481,     0,   482,   483,   484,   485,   486,   487,   488,
       0,   489,     0,   491,   492,   493,   494,   495,   496,   497,
       0,     0,   498,     0,     0,   499,   500,   501,   502,   503,
     504,   505,   506,   507,   508,   509,   510,   511,   512,   513,
     514,   515,   516,   517,   518,   519,   528,     0,   658,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   113,   114,   115,   116,   117,
     118,   119,   120,   121,     0,   122,   123,   124,     0,     0,
       0,     0,     0,   125,     0,     0,     0,     0,   127,   128,
       0,   129,   130,   131,     0,   133,   134,   135,   136,   137,
       0,   139,   140,     0,   141,   142,   143,   144,   145,   146,
       0,     0,   147,   148,   149,   150,   151,     0,   152,   153,
     154,   155,   156,     0,     0,     0,   158,   159,   160,   161,
     162,   163,     0,   165,   166,   167,     0,   168,   169,   170,
     171,   172,   173,     0,     0,   175,   176,   177,   178,   179,
     180,   181,   182,   183,   184,   185,   186,   187,     0,   188,
       0,   189,   190,   191,   192,   193,   194,     0,   195,   196,
     197,   198,   199,   200,     0,     0,   201,   202,   203,   204,
     205,   206,   207,     0,   208,   209,   210,     0,   211,   212,
     213,     0,   214,   215,   216,   217,   218,   219,   220,   221,
     222,   223,   224,     0,   225,     0,   226,   227,   228,   229,
       0,   230,     0,   231,     0,     0,     0,   234,   235,   529,
       0,   238,     0,   239,   240,     0,     0,   241,   242,   243,
     244,     0,   245,   246,   247,   248,   249,   250,   251,     0,
     253,   254,   255,   256,     0,   257,   258,   259,   260,   261,
     262,   263,     0,   264,     0,   266,   267,   268,   269,   270,
     271,   272,   273,     0,   274,     0,   275,     0,     0,   278,
       0,   280,   281,   282,   283,   284,   285,   286,     0,     0,
     287,     0,   289,     0,     0,   291,   292,   293,   294,   295,
     296,   297,   298,   530,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,     0,   320,   321,   322,   323,   324,   325,
       0,   326,   327,     0,   329,     0,   330,   331,   332,   333,
     334,   335,     0,   336,   337,     0,     0,   338,   339,   340,
       0,     0,   341,   342,     0,   344,     0,   346,   347,   348,
     349,   350,   351,   352,   353,   354,   355,   356,   357,   358,
       0,     0,     0,     0,   359,   360,   361,     0,   363,   364,
     365,   366,   367,   368,     0,   369,   370,   371,   372,   373,
     374,   375,   376,     0,   377,   378,   379,   380,   381,   382,
     383,   384,     0,   385,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,     0,   399,   400,
       0,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,     0,     0,   417,   418,
     419,   420,   421,   422,   423,   424,   425,   426,   427,     0,
     429,   430,   431,   432,     0,   433,   434,   435,   436,   437,
     438,   439,   440,   441,   442,   443,   444,   445,   531,   447,
     448,   449,     0,   450,   451,     0,   452,     0,   454,   455,
     456,   457,   458,     0,   459,   460,     0,   461,     0,   462,
     463,   464,   465,   466,     0,   467,   468,   469,   470,   471,
     472,   473,   474,     0,     0,   475,   476,   477,     0,   478,
     479,   480,   481,     0,   482,   483,   484,   485,   486,   487,
     488,     0,   489,     0,   491,   492,   493,   494,   495,   496,
     497,     0,     0,   498,     0,     0,   499,   500,   501,   502,
     503,   504,   505,   506,   507,   508,   509,   510,   511,   512,
     513,   514,   515,   516,   517,   518,   519,   528,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   113,   114,   115,   116,
     117,   118,   119,   120,   121,   665,   122,   123,   124,     0,
       0,     0,     0,     0,   125,     0,     0,     0,     0,   127,
     128,     0,   129,   130,   131,     0,   133,   134,   135,   136,
     137,     0,   139,   140,     0,   141,   142,   143,   144,   145,
     146,     0,     0,   147,   148,   149,   150,   151,     0,   152,
     153,   154,   155,   156,     0,     0,     0,   158,   159,   160,
     161,   162,   163,     0,   165,   166,   167,     0,   168,   169,
     170,   171,   172,   173,     0,     0,   175,   176,   177,   178,
     179,   180,   181,   182,   183,   184,   185,   186,   187,     0,
     188,     0,   189,   190,   191,   192,   193,   194,     0,   195,
     196,   197,   198,   199,   200,     0,     0,   201,   202,   203,
     204,   205,   206,   207,     0,   208,   209,   210,     0,   211,
     212,   213,     0,   214,   215,   216,   217,   218,   219,   220,
     221,   222,   223,   224,     0,   225,     0,   226,   227,   228,
     229,     0,   230,     0,   231,     0,     0,     0,   234,   235,
     529,     0,   666,     0,   239,   240,     0,     0,   241,   242,
     243,   244,     0,   245,   246,   247,   248,   249,   250,   251,
       0,   253,   254,   255,   256,     0,   257,   258,   259,   260,
     261,   262,   263,     0,   264,     0,   266,   267,   268,   269,
     270,   271,   272,   273,     0,   274,     0,   275,     0,     0,
     278,     0,   280,   281,   282,   283,   284,   285,   286,     0,
       0,   287,     0,   289,     0,     0,   291,   292,   667,   294,
     295,   296,   297,   298,   530,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,     0,   320,   321,   322,   323,   324,
     325,     0,   326,   327,     0,   329,     0,   330,   331,   332,
     333,   334,   335,     0,   336,   337,     0,     0,   338,   339,
     340,     0,     0,   341,   342,     0,   344,     0,   346,   347,
     348,   349,   350,   351,   352,   353,   354,   355,   356,   357,
     358,     0,     0,     0,     0,   359,   360,   361,     0,   363,
     364,   365,   366,   367,   368,     0,   369,   370,   371,   372,
     373,   374,   375,   376,     0,   377,   378,   379,   380,   381,
     382,   383,   384,     0,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,     0,   399,
     400,     0,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,     0,     0,   417,
     418,   419,   420,   668,   422,   423,   424,   425,   426,   427,
       0,   429,   430,   431,   432,     0,   433,   434,   435,   436,
     437,   438,   439,   440,   441,   442,   443,   444,   445,   531,
     447,   448,   449,     0,   450,   451,     0,   452,     0,   454,
     455,   456,   457,   458,     0,   669,   460,     0,   461,     0,
     670,   463,   464,   465,   466,     0,   467,   468,   469,   470,
     471,   472,   473,   474,     0,     0,   475,   476,   477,     0,
     478,   479,   480,   481,     0,   482,   483,   484,   485,   486,
     487,   488,     0,   489,     0,   491,   492,   493,   494,   495,
     496,   497,     0,     0,   498,     0,     0,   499,   500,   501,
     502,   503,   504,   505,   506,   507,   508,   509,   510,   511,
     512,   513,   514,   515,   516,   517,   518,   519,   528,     0,
     552,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   113,   114,   115,
     116,   117,   118,   119,   120,   121,     0,   122,   123,   124,
       0,     0,     0,     0,     0,   125,     0,     0,     0,     0,
     127,   128,     0,   129,   130,   131,     0,   133,   134,   135,
     136,   137,     0,   139,   140,     0,   141,   142,   143,   144,
     145,   146,     0,     0,   147,   148,   149,   150,   151,     0,
     152,   153,   154,   155,   156,     0,     0,     0,   158,   159,
     160,   161,   162,   163,     0,   165,   166,   167,     0,   168,
     169,   170,   171,   172,   173,     0,     0,   175,   176,   177,
     178,   179,   180,   181,   182,   183,   184,   185,   186,   187,
       0,   188,     0,   189,   190,   191,   192,   193,   194,     0,
     195,   196,   197,   198,   199,   200,     0,     0,   201,   202,
     203,   204,   205,   206,   207,     0,   208,   209,   210,     0,
     211,   212,   213,     0,   214,   215,   216,   217,   218,   219,
     220,   221,   222,   223,   224,     0,   225,     0,   226,   227,
     228,   229,     0,   230,     0,   231,     0,     0,     0,   234,
     235,   529,     0,   238,     0,   239,   240,     0,     0,   241,
     242,   243,   244,     0,   245,   246,   247,   248,   249,   250,
     251,     0,   253,   254,   255,   256,     0,   257,   258,   259,
     260,   261,   262,   263,     0,   264,     0,   266,   267,   268,
     269,   270,   271,   272,   273,     0,   274,     0,   275,     0,
       0,   278,     0,   280,   281,   282,   283,   284,   285,   286,
       0,     0,   287,     0,   289,     0,     0,   291,   292,   293,
     294,   295,   296,   297,   298,   530,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,     0,   320,   321,   322,   323,
     324,   325,     0,   326,   327,     0,   329,     0,   330,   331,
     332,   333,   334,   335,     0,   336,   337,     0,     0,   338,
     339,   340,     0,     0,   341,   342,     0,   344,     0,   346,
     347,   348,   349,   350,   351,   352,   353,   354,   355,   356,
     357,   358,     0,     0,     0,     0,   359,   360,   361,     0,
     363,   364,   365,   366,   367,   368,     0,   369,   370,   371,
     372,   373,   374,   375,   376,     0,   377,   378,   379,   380,
     381,   382,   703,   384,     0,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,     0,
     399,   400,     0,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,     0,     0,
     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
     427,     0,   429,   430,   431,   432,     0,   433,   434,   435,
     436,   437,   438,   439,   440,   441,   442,   443,   444,   445,
     531,   447,   448,   449,     0,   450,   451,     0,   452,     0,
     454,   455,   456,   457,   458,     0,   459,   460,     0,   461,
       0,   462,   463,   464,   465,   466,     0,   467,   468,   469,
     470,   471,   472,   473,   474,     0,     0,   475,   476,   477,
       0,   478,   479,   480,   481,     0,   482,   483,   484,   485,
     486,   487,   488,     0,   489,     0,   491,   492,   493,   494,
     495,   496,   497,     0,     0,   498,     0,     0,   499,   500,
     501,   502,   503,   504,   505,   506,   507,   508,   509,   510,
     511,   512,   513,   514,   515,   516,   517,   518,   519,   528,
       0,   552,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   113,   114,
     115,   116,   117,   118,   119,   120,   121,     0,   122,   123,
     124,     0,     0,     0,     0,     0,   125,     0,     0,     0,
       0,   127,   128,     0,   129,   130,   131,     0,   133,   134,
     135,   136,   137,     0,   139,   140,     0,   141,   142,   143,
     144,   145,   146,     0,     0,   147,   148,   149,   150,   151,
       0,   152,   153,   154,   155,   156,     0,     0,     0,   158,
     159,   160,   161,   162,   163,     0,   165,   166,   167,     0,
     168,   169,   170,   171,   172,   173,     0,     0,   175,   176,
     177,   178,   179,   180,   181,   182,   183,   184,   185,   186,
     187,     0,   188,     0,   189,   190,   191,   192,   193,   194,
       0,   195,   196,   197,   198,   199,   200,     0,     0,   201,
     202,   203,   204,   205,   206,   207,     0,   208,   209,   210,
       0,   211,   212,   213,     0,   214,   215,   216,   217,   218,
     219,   220,   221,   222,   223,   224,     0,   225,     0,   226,
     227,   228,   229,     0,   230,     0,   231,     0,     0,     0,
     234,   235,   529,     0,   238,     0,   239,   240,     0,     0,
     241,   242,   243,   244,     0,   245,   246,   247,   248,   249,
     791,   251,     0,   253,   254,   255,   256,     0,   257,   258,
     259,   260,   261,   262,   263,     0,   264,     0,   266,   267,
     268,   269,   270,   271,   272,   273,     0,   274,     0,   275,
       0,     0,   278,     0,   280,   281,   282,   283,   284,   285,
     286,     0,     0,   287,     0,   289,     0,     0,   291,   292,
     293,   294,   295,   296,   297,   298,   530,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,     0,   320,   321,   322,
     323,   324,   325,     0,   326,   327,     0,   329,     0,   330,
     331,   332,   333,   334,   335,     0,   336,   337,     0,     0,
     338,   339,   340,     0,     0,   341,   342,     0,   344,     0,
     346,   347,   348,   349,   350,   351,   352,   353,   354,   355,
     356,   357,   358,     0,     0,     0,     0,   359,   360,   361,
       0,   363,   364,   365,   366,   367,   368,     0,   369,   370,
     371,   372,   373,   374,   375,   376,     0,   377,   378,   379,
     380,   381,   382,   383,   384,     0,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
       0,   399,   400,     0,   402,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,     0,
       0,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,     0,   429,   430,   431,   432,     0,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   531,   447,   448,   449,     0,   450,   451,     0,   452,
       0,   454,   455,   456,   457,   458,     0,   459,   460,     0,
     461,     0,   462,   463,   464,   465,   466,     0,   467,   468,
     469,   470,   471,   472,   473,   474,     0,     0,   475,   476,
     477,     0,   478,   479,   480,   481,     0,   482,   483,   484,
     485,   486,   487,   488,     0,   489,     0,   491,   492,   493,
     494,   495,   496,   497,     0,     0,   498,     0,     0,   499,
     500,   501,   502,   503,   504,   505,   506,   507,   508,   509,
     510,   511,   512,   513,   514,   515,   516,   517,   518,   519,
     528,     0,   552,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   113,
     114,   115,   116,   117,   118,   119,   120,   121,     0,   122,
     123,   124,     0,     0,     0,     0,     0,   125,     0,     0,
       0,     0,   127,   128,     0,   129,   130,   131,     0,   133,
     134,   135,   136,   137,     0,   139,   140,     0,   141,   142,
     143,   144,   145,   146,     0,     0,   147,   148,   149,   150,
     151,     0,   152,   153,   154,   155,   156,     0,     0,     0,
     158,   159,   160,   161,   162,   163,     0,   165,   166,   167,
       0,   168,   169,   170,   171,   172,   173,     0,     0,   175,
     176,   177,   178,   179,   180,   181,   182,   183,   184,   185,
     186,   187,     0,   188,     0,   189,   190,   191,   192,   193,
     194,     0,   195,   196,   197,   198,   199,   200,     0,     0,
     201,   202,   203,   204,   205,   206,   207,     0,   208,   209,
     210,     0,   211,   212,   213,     0,   214,   215,   216,   217,
     218,   219,   220,   221,   222,   223,   224,     0,   225,     0,
     226,   227,   228,   229,     0,   230,     0,   231,     0,     0,
       0,   234,   235,   529,     0,   238,     0,   239,   240,     0,
       0,   241,   242,   243,   244,     0,   245,   246,   247,   248,
     249,   794,   251,     0,   253,   254,   255,   256,     0,   257,
     258,   259,   260,   261,   262,   263,     0,   264,     0,   266,
     267,   268,   269,   270,   271,   272,   273,     0,   274,     0,
     275,     0,     0,   278,     0,   280,   281,   282,   283,   284,
     285,   286,     0,     0,   287,     0,   289,     0,     0,   291,
     292,   293,   294,   295,   296,   297,   298,   530,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,     0,   320,   321,
     322,   323,   324,   325,     0,   326,   327,     0,   329,     0,
     330,   331,   332,   333,   334,   335,     0,   336,   337,     0,
       0,   338,   339,   340,     0,     0,   341,   342,     0,   344,
       0,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,     0,     0,     0,     0,   359,   360,
     361,     0,   363,   364,   365,   366,   367,   368,     0,   369,
     370,   371,   372,   373,   374,   375,   376,     0,   377,   378,
     379,   380,   381,   382,   383,   384,     0,   385,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,     0,   399,   400,     0,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
       0,     0,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,     0,   429,   430,   431,   432,     0,   433,
     434,   435,   436,   437,   438,   439,   440,   441,   442,   443,
     444,   445,   531,   447,   448,   449,     0,   450,   451,     0,
     452,     0,   454,   455,   456,   457,   458,     0,   459,   460,
       0,   461,     0,   462,   463,   464,   465,   466,     0,   467,
     468,   469,   470,   471,   472,   473,   474,     0,     0,   475,
     476,   477,     0,   478,   479,   480,   481,     0,   482,   483,
     484,   485,   486,   487,   488,     0,   489,     0,   491,   492,
     493,   494,   495,   496,   497,     0,     0,   498,     0,     0,
     499,   500,   501,   502,   503,   504,   505,   506,   507,   508,
     509,   510,   511,   512,   513,   514,   515,   516,   517,   518,
     519,   528,     0,   552,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     113,   114,   115,   116,   117,   118,   119,   120,   121,     0,
     122,   123,   124,     0,     0,     0,     0,     0,   125,     0,
       0,     0,     0,   127,   128,     0,   129,   130,   131,     0,
     133,   134,   135,   136,   137,     0,   139,   140,     0,   141,
     142,   143,   144,   145,   146,     0,     0,   147,   148,   149,
     150,   151,     0,   152,   153,   154,   155,   156,     0,     0,
       0,   158,   159,   160,   161,   162,   163,     0,   165,   166,
     167,     0,   168,   169,   170,   171,   172,   173,     0,     0,
     175,   176,   177,   178,   179,   180,   181,   182,   183,   184,
     185,   186,   187,     0,   188,     0,   189,   190,   191,   192,
     193,   194,     0,   195,   196,   197,   198,   199,   200,     0,
       0,   201,   202,   203,   204,   205,   206,   207,     0,   208,
     209,   210,     0,   211,   212,   213,     0,   214,   215,   216,
     217,   218,   219,   220,   221,   222,   223,   224,     0,   225,
       0,   226,   227,   228,   229,     0,   230,     0,   231,     0,
       0,     0,   234,   235,   529,     0,   238,     0,   239,   240,
       0,     0,   241,   242,   243,   244,     0,   245,   246,   247,
     248,   249,   798,   251,     0,   253,   254,   255,   256,     0,
     257,   258,   259,   260,   261,   262,   263,     0,   264,     0,
     266,   267,   268,   269,   270,   271,   272,   273,     0,   274,
       0,   275,     0,     0,   278,     0,   280,   281,   282,   283,
     284,   285,   286,     0,     0,   287,     0,   289,     0,     0,
     291,   292,   293,   294,   295,   296,   297,   298,   530,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,     0,   320,
     321,   322,   323,   324,   325,     0,   326,   327,     0,   329,
       0,   330,   331,   332,   333,   334,   335,     0,   336,   337,
       0,     0,   338,   339,   340,     0,     0,   341,   342,     0,
     344,     0,   346,   347,   348,   349,   350,   351,   352,   353,
     354,   355,   356,   357,   358,     0,     0,     0,     0,   359,
     360,   361,     0,   363,   364,   365,   366,   367,   368,     0,
     369,   370,   371,   372,   373,   374,   375,   376,     0,   377,
     378,   379,   380,   381,   382,   383,   384,     0,   385,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,     0,   399,   400,     0,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,     0,     0,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,     0,   429,   430,   431,   432,     0,
     433,   434,   435,   436,   437,   438,   439,   440,   441,   442,
     443,   444,   445,   531,   447,   448,   449,     0,   450,   451,
       0,   452,     0,   454,   455,   456,   457,   458,     0,   459,
     460,     0,   461,     0,   462,   463,   464,   465,   466,     0,
     467,   468,   469,   470,   471,   472,   473,   474,     0,     0,
     475,   476,   477,     0,   478,   479,   480,   481,     0,   482,
     483,   484,   485,   486,   487,   488,     0,   489,     0,   491,
     492,   493,   494,   495,   496,   497,     0,     0,   498,     0,
       0,   499,   500,   501,   502,   503,   504,   505,   506,   507,
     508,   509,   510,   511,   512,   513,   514,   515,   516,   517,
     518,   519,   528,     0,   552,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   113,   114,   115,   116,   117,   118,   119,   120,   121,
       0,   122,   123,   124,     0,     0,     0,     0,     0,   125,
       0,     0,     0,     0,   127,   128,     0,   129,   130,   131,
       0,   133,   134,   135,   136,   137,     0,   139,   140,     0,
     141,   142,   143,   144,   145,   146,     0,     0,   147,   148,
     149,   150,   151,     0,   152,   153,   154,   155,   156,     0,
       0,     0,   158,   159,   160,   161,   162,   163,     0,   165,
     166,   167,     0,   168,   169,   170,   171,   172,   173,     0,
       0,   175,   176,   177,   178,   179,   180,   181,   182,   183,
     184,   185,   186,   187,     0,   188,     0,   189,   190,   191,
     192,   193,   194,     0,   195,   196,   197,   198,   199,   200,
       0,     0,   201,   202,   203,   204,   205,   206,   207,     0,
     208,   209,   210,     0,   211,   212,   213,     0,   214,   215,
     216,   217,   218,   219,   220,   221,   222,   223,   224,     0,
     225,     0,   226,   227,   228,   229,     0,   230,     0,   231,
       0,     0,     0,   234,   235,   529,     0,   238,     0,   239,
     240,     0,     0,   241,   242,   243,   244,     0,   245,   246,
     247,   248,   249,   814,   251,     0,   253,   254,   255,   256,
       0,   257,   258,   259,   260,   261,   262,   263,     0,   264,
       0,   266,   267,   268,   269,   270,   271,   272,   273,     0,
     274,     0,   275,     0,     0,   278,     0,   280,   281,   282,
     283,   284,   285,   286,     0,     0,   287,     0,   289,     0,
       0,   291,   292,   293,   294,   295,   296,   297,   298,   530,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,     0,
     320,   321,   322,   323,   324,   325,     0,   326,   327,     0,
     329,     0,   330,   331,   332,   333,   334,   335,     0,   336,
     337,     0,     0,   338,   339,   340,     0,     0,   341,   342,
       0,   344,     0,   346,   347,   348,   349,   350,   351,   352,
     353,   354,   355,   356,   357,   358,     0,     0,     0,     0,
     359,   360,   361,     0,   363,   364,   365,   366,   367,   368,
       0,   369,   370,   371,   372,   373,   374,   375,   376,     0,
     377,   378,   379,   380,   381,   382,   383,   384,     0,   385,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,     0,   399,   400,     0,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,     0,     0,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,   427,     0,   429,   430,   431,   432,
       0,   433,   434,   435,   436,   437,   438,   439,   440,   441,
     442,   443,   444,   445,   531,   447,   448,   449,     0,   450,
     451,     0,   452,     0,   454,   455,   456,   457,   458,     0,
     459,   460,     0,   461,     0,   462,   463,   464,   465,   466,
       0,   467,   468,   469,   470,   471,   472,   473,   474,     0,
       0,   475,   476,   477,     0,   478,   479,   480,   481,     0,
     482,   483,   484,   485,   486,   487,   488,     0,   489,     0,
     491,   492,   493,   494,   495,   496,   497,     0,     0,   498,
       0,     0,   499,   500,   501,   502,   503,   504,   505,   506,
     507,   508,   509,   510,   511,   512,   513,   514,   515,   516,
     517,   518,   519,   528,     0,   552,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   113,   114,   115,   116,   117,   118,   119,   120,
     121,     0,   122,   123,   124,     0,     0,     0,     0,     0,
     125,     0,     0,     0,     0,   127,   128,     0,   129,   130,
     131,     0,   133,   134,   135,   136,   137,     0,   139,   140,
       0,   141,   142,   143,   144,   145,   146,     0,     0,   147,
     148,   149,   150,   151,     0,   152,   153,   154,   155,   156,
       0,     0,     0,   158,   159,   160,   161,   162,   163,     0,
     165,   166,   167,     0,   168,   169,   170,   171,   172,   173,
       0,     0,   175,   176,   177,   178,   179,   180,   181,   182,
     183,   184,   185,   186,   187,     0,   188,     0,   189,   190,
     191,   192,   193,   194,     0,   195,   196,   197,   198,   199,
     200,     0,     0,   201,   202,   203,   204,   205,   206,   207,
       0,   208,   209,   210,     0,   211,   212,   213,     0,   214,
     215,   216,   217,   218,   219,   220,   221,   222,   223,   224,
       0,   225,     0,   226,   227,   228,   229,     0,   230,     0,
     231,     0,     0,     0,   234,   235,   529,     0,   238,     0,
     239,   240,     0,     0,   241,   242,   243,   244,     0,   245,
     246,   247,   248,   249,   916,   251,     0,   253,   254,   255,
     256,     0,   257,   258,   259,   260,   261,   262,   263,     0,
     264,     0,   266,   267,   268,   269,   270,   271,   272,   273,
       0,   274,     0,   275,     0,     0,   278,     0,   280,   281,
     282,   283,   284,   285,   286,     0,     0,   287,     0,   289,
       0,     0,   291,   292,   293,   294,   295,   296,   297,   298,
     530,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
       0,   320,   321,   322,   323,   324,   325,     0,   326,   327,
       0,   329,     0,   330,   331,   332,   333,   334,   335,     0,
     336,   337,     0,     0,   338,   339,   340,     0,     0,   341,
     342,     0,   344,     0,   346,   347,   348,   349,   350,   351,
     352,   353,   354,   355,   356,   357,   358,     0,     0,     0,
       0,   359,   360,   361,     0,   363,   364,   365,   366,   367,
     368,     0,   369,   370,   371,   372,   373,   374,   375,   376,
       0,   377,   378,   379,   380,   381,   382,   383,   384,     0,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,     0,   399,   400,     0,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,     0,     0,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,     0,   429,   430,   431,
     432,     0,   433,   434,   435,   436,   437,   438,   439,   440,
     441,   442,   443,   444,   445,   531,   447,   448,   449,     0,
     450,   451,     0,   452,     0,   454,   455,   456,   457,   458,
       0,   459,   460,     0,   461,     0,   462,   463,   464,   465,
     466,     0,   467,   468,   469,   470,   471,   472,   473,   474,
       0,     0,   475,   476,   477,     0,   478,   479,   480,   481,
       0,   482,   483,   484,   485,   486,   487,   488,     0,   489,
       0,   491,   492,   493,   494,   495,   496,   497,     0,     0,
     498,     0,     0,   499,   500,   501,   502,   503,   504,   505,
     506,   507,   508,   509,   510,   511,   512,   513,   514,   515,
     516,   517,   518,   519,   528,     0,   552,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   113,   114,   115,   116,   117,   118,   119,
     120,   121,     0,   122,   123,   124,     0,     0,     0,     0,
       0,   125,     0,     0,     0,     0,   127,   128,     0,   129,
     130,   131,     0,   133,   134,   135,   136,   137,     0,   139,
     140,     0,   141,   142,   143,   144,   145,   146,     0,     0,
     147,   148,   149,   150,   151,     0,   152,   153,   154,   155,
     156,     0,     0,     0,   158,   159,   160,   161,   162,   163,
       0,   165,   166,   167,     0,   168,   169,   170,   171,   172,
     173,     0,     0,   175,   176,   177,   178,   179,   180,   181,
     182,   183,   184,   185,   186,   187,     0,   188,     0,   189,
     190,   191,   192,   193,   194,     0,   195,   196,   197,   198,
     199,   200,     0,     0,   201,   202,   203,   204,   205,   206,
     207,     0,   208,   209,   210,     0,   211,   212,   213,     0,
     214,   215,   216,   217,   218,   219,   220,   221,   222,   223,
     224,     0,   225,     0,   226,   227,   228,   229,     0,   230,
       0,   231,     0,     0,     0,   234,   235,   529,     0,   238,
       0,   239,   240,     0,     0,   241,   242,   243,   244,     0,
     245,   246,   247,   248,   249,   919,   251,     0,   253,   254,
     255,   256,     0,   257,   258,   259,   260,   261,   262,   263,
       0,   264,     0,   266,   267,   268,   269,   270,   271,   272,
     273,     0,   274,     0,   275,     0,     0,   278,     0,   280,
     281,   282,   283,   284,   285,   286,     0,     0,   287,     0,
     289,     0,     0,   291,   292,   293,   294,   295,   296,   297,
     298,   530,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,     0,   320,   321,   322,   323,   324,   325,     0,   326,
     327,     0,   329,     0,   330,   331,   332,   333,   334,   335,
       0,   336,   337,     0,     0,   338,   339,   340,     0,     0,
     341,   342,     0,   344,     0,   346,   347,   348,   349,   350,
     351,   352,   353,   354,   355,   356,   357,   358,     0,     0,
       0,     0,   359,   360,   361,     0,   363,   364,   365,   366,
     367,   368,     0,   369,   370,   371,   372,   373,   374,   375,
     376,     0,   377,   378,   379,   380,   381,   382,   383,   384,
       0,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,     0,   399,   400,     0,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,     0,     0,   417,   418,   419,   420,
     421,   422,   423,   424,   425,   426,   427,     0,   429,   430,
     431,   432,     0,   433,   434,   435,   436,   437,   438,   439,
     440,   441,   442,   443,   444,   445,   531,   447,   448,   449,
       0,   450,   451,     0,   452,     0,   454,   455,   456,   457,
     458,     0,   459,   460,     0,   461,     0,   462,   463,   464,
     465,   466,     0,   467,   468,   469,   470,   471,   472,   473,
     474,     0,     0,   475,   476,   477,     0,   478,   479,   480,
     481,     0,   482,   483,   484,   485,   486,   487,   488,     0,
     489,     0,   491,   492,   493,   494,   495,   496,   497,     0,
       0,   498,     0,     0,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,   517,   518,   519,   528,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   113,   114,   115,   116,   117,   118,
     119,   120,   121,     0,   122,   123,   124,     0,     0,     0,
       0,     0,   125,     0,  1043,     0,     0,   127,   128,     0,
     129,   130,   131,     0,   133,   134,   135,   136,   137,     0,
     139,   140,     0,   141,   142,   143,   144,   145,   146,     0,
       0,   147,   148,   149,   150,   151,     0,   152,   153,   154,
     155,   156,     0,     0,     0,   158,   159,   160,   161,   162,
     163,     0,   165,   166,   167,     0,   168,   169,   170,   171,
     172,   173,     0,     0,   175,   176,   177,   178,   179,   180,
     181,   182,   183,   184,   185,   186,   187,     0,   188,     0,
     189,   190,   191,   192,   193,   194,     0,   195,   196,   197,
     198,   199,   200,     0,     0,   201,   202,   203,   204,   205,
     206,   207,     0,   208,   209,   210,     0,   211,   212,   213,
       0,   214,   215,   216,   217,   218,   219,   220,   221,   222,
     223,   224,     0,   225,     0,   226,   227,   228,   229,     0,
     230,     0,   231,     0,     0,     0,   234,   235,   529,     0,
     238,     0,   239,   240,     0,     0,   241,   242,   243,   244,
       0,   245,   246,   247,   248,   249,   250,   251,     0,   253,
     254,   255,   256,     0,   257,   258,   259,   260,   261,   262,
     263,     0,   264,     0,   266,   267,   268,   269,   270,   271,
     272,   273,     0,   274,     0,   275,     0,     0,   278,     0,
     280,   281,   282,   283,   284,   285,   286,     0,     0,   287,
       0,   289,     0,     0,   291,   292,   293,   294,   295,   296,
     297,   298,   530,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,     0,   320,   321,   322,   323,   324,   325,     0,
     326,   327,     0,   329,     0,   330,   331,   332,   333,   334,
     335,     0,   336,   337,     0,     0,   338,   339,   340,     0,
       0,   341,   342,     0,   344,     0,   346,   347,   348,   349,
     350,   351,   352,   353,   354,   355,   356,   357,   358,     0,
       0,     0,     0,   359,   360,   361,     0,   363,   364,   365,
     366,   367,   368,     0,   369,   370,   371,   372,   373,   374,
     375,   376,     0,   377,   378,   379,   380,   381,   382,   383,
     384,     0,   385,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,     0,   399,   400,     0,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,     0,     0,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,     0,   429,
     430,   431,   432,     0,   433,   434,   435,   436,   437,   438,
     439,   440,   441,   442,   443,   444,   445,   531,   447,   448,
     449,     0,   450,   451,     0,   452,     0,   454,   455,   456,
     457,   458,     0,   459,   460,     0,   461,     0,   462,   463,
     464,   465,   466,     0,   467,   468,   469,   470,   471,   472,
     473,   474,     0,     0,   475,   476,   477,     0,   478,   479,
     480,   481,     0,   482,   483,   484,   485,   486,   487,   488,
       0,   489,     0,   491,   492,   493,   494,   495,   496,   497,
       0,     0,   498,     0,     0,   499,   500,   501,   502,   503,
     504,   505,   506,   507,   508,   509,   510,   511,   512,   513,
     514,   515,   516,   517,   518,   519,   528,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   113,   114,   115,   116,   117,
     118,   119,   120,   121,     0,   122,   123,   124,     0,     0,
       0,     0,     0,   125,     0,  1066,     0,     0,   127,   128,
       0,   129,   130,   131,     0,   133,   134,   135,   136,   137,
       0,   139,   140,     0,   141,   142,   143,   144,   145,   146,
       0,     0,   147,   148,   149,   150,   151,     0,   152,   153,
     154,   155,   156,     0,     0,     0,   158,   159,   160,   161,
     162,   163,     0,   165,   166,   167,     0,   168,   169,   170,
     171,   172,   173,     0,     0,   175,   176,   177,   178,   179,
     180,   181,   182,   183,   184,   185,   186,   187,     0,   188,
       0,   189,   190,   191,   192,   193,   194,     0,   195,   196,
     197,   198,   199,   200,     0,     0,   201,   202,   203,   204,
     205,   206,   207,     0,   208,   209,   210,     0,   211,   212,
     213,     0,   214,   215,   216,   217,   218,   219,   220,   221,
     222,   223,   224,     0,   225,     0,   226,   227,   228,   229,
       0,   230,     0,   231,     0,     0,     0,   234,   235,   529,
       0,   238,     0,   239,   240,     0,     0,   241,   242,   243,
     244,     0,   245,   246,   247,   248,   249,   250,   251,     0,
     253,   254,   255,   256,     0,   257,   258,   259,   260,   261,
     262,   263,     0,   264,     0,   266,   267,   268,   269,   270,
     271,   272,   273,     0,   274,     0,   275,     0,     0,   278,
       0,   280,   281,   282,   283,   284,   285,   286,     0,     0,
     287,     0,   289,     0,     0,   291,   292,   293,   294,   295,
     296,   297,   298,   530,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,     0,   320,   321,   322,   323,   324,   325,
       0,   326,   327,     0,   329,     0,   330,   331,   332,   333,
     334,   335,     0,   336,   337,     0,     0,   338,   339,   340,
       0,     0,   341,   342,     0,   344,     0,   346,   347,   348,
     349,   350,   351,   352,   353,   354,   355,   356,   357,   358,
       0,     0,     0,     0,   359,   360,   361,     0,   363,   364,
     365,   366,   367,   368,     0,   369,   370,   371,   372,   373,
     374,   375,   376,     0,   377,   378,   379,   380,   381,   382,
     383,   384,     0,   385,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,     0,   399,   400,
       0,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,     0,     0,   417,   418,
     419,   420,   421,   422,   423,   424,   425,   426,   427,     0,
     429,   430,   431,   432,     0,   433,   434,   435,   436,   437,
     438,   439,   440,   441,   442,   443,   444,   445,   531,   447,
     448,   449,     0,   450,   451,     0,   452,     0,   454,   455,
     456,   457,   458,     0,   459,   460,     0,   461,     0,   462,
     463,   464,   465,   466,     0,   467,   468,   469,   470,   471,
     472,   473,   474,     0,     0,   475,   476,   477,     0,   478,
     479,   480,   481,     0,   482,   483,   484,   485,   486,   487,
     488,     0,   489,     0,   491,   492,   493,   494,   495,   496,
     497,     0,     0,   498,     0,     0,   499,   500,   501,   502,
     503,   504,   505,   506,   507,   508,   509,   510,   511,   512,
     513,   514,   515,   516,   517,   518,   519,   528,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   113,   114,   115,   116,
     117,   118,   119,   120,   121,   665,   122,   123,   124,     0,
       0,     0,     0,     0,   125,     0,     0,     0,     0,   127,
     128,     0,   129,   130,   131,     0,   133,   134,   135,   136,
     137,     0,   139,   140,     0,   141,   142,   143,   144,   145,
     146,     0,     0,   147,   148,   149,   150,   151,     0,   152,
     153,   154,   155,   156,     0,     0,     0,   158,   159,   160,
     161,   162,   163,     0,   165,   166,   167,     0,   168,   169,
     170,   171,   172,   173,     0,     0,   175,   176,   177,   178,
     179,   180,   181,   182,   183,   184,   185,   186,   187,     0,
     188,     0,   189,   190,   191,   192,   193,   194,     0,   195,
     196,   197,   198,   199,   200,     0,     0,   201,   202,   203,
     204,   205,   206,   207,     0,   208,   209,   210,     0,   211,
     212,   213,     0,   214,   215,   216,   217,   218,   219,   220,
     221,   222,   223,   224,     0,   225,     0,   226,   227,   228,
     229,     0,   230,     0,   231,     0,     0,     0,   234,   235,
     529,     0,   238,     0,   239,   240,     0,     0,   241,   242,
     243,   244,     0,   245,   246,   247,   248,   249,   250,   251,
       0,   253,   254,   255,   256,     0,   257,   258,   259,   260,
     261,   262,   263,     0,   264,     0,   266,   267,   268,   269,
     270,   271,   272,   273,     0,   274,     0,   275,     0,     0,
     278,     0,   280,   281,   282,   283,   284,   285,   286,     0,
       0,   287,     0,   289,     0,     0,   291,   292,   293,   294,
     295,   296,   297,   298,   530,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,     0,   320,   321,   322,   323,   324,
     325,     0,   326,   327,     0,   329,     0,   330,   331,   332,
     333,   334,   335,     0,   336,   337,     0,     0,   338,   339,
     340,     0,     0,   341,   342,     0,   344,     0,   346,   347,
     348,   349,   350,   351,   352,   353,   354,   355,   356,   357,
     358,     0,     0,     0,     0,   359,   360,   361,     0,   363,
     364,   365,   366,   367,   368,     0,   369,   370,   371,   372,
     373,   374,   375,   376,     0,   377,   378,   379,   380,   381,
     382,   383,   384,     0,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,     0,   399,
     400,     0,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,     0,     0,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
       0,   429,   430,   431,   432,     0,   433,   434,   435,   436,
     437,   438,   439,   440,   441,   442,   443,   444,   445,   531,
     447,   448,   449,     0,   450,   451,     0,   452,     0,   454,
     455,   456,   457,   458,     0,   669,   460,     0,   461,     0,
     670,   463,   464,   465,   466,     0,   467,   468,   469,   470,
     471,   472,   473,   474,     0,     0,   475,   476,   477,     0,
     478,   479,   480,   481,     0,   482,   483,   484,   485,   486,
     487,   488,     0,   489,     0,   491,   492,   493,   494,   495,
     496,   497,     0,     0,   498,     0,     0,   499,   500,   501,
     502,   503,   504,   505,   506,   507,   508,   509,   510,   511,
     512,   513,   514,   515,   516,   517,   518,   519,   528,     0,
     552,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   113,   114,   115,
     116,   117,   118,   119,   120,   121,     0,   122,   123,   124,
       0,     0,     0,     0,     0,   125,     0,     0,     0,     0,
     127,   128,     0,   129,   130,   131,     0,   133,   134,   135,
     136,   137,     0,   139,   140,     0,   141,   142,   143,   144,
     145,   146,     0,     0,   147,   148,   149,   150,   151,     0,
     152,   153,   154,   155,   156,     0,     0,     0,   158,   159,
     160,   161,   162,   163,     0,   165,   166,   167,     0,   168,
     169,   170,   171,   172,   173,     0,     0,   175,   176,   177,
     178,   179,   180,   181,   182,   183,   184,   185,   186,   187,
       0,   188,     0,   189,   190,   191,   192,   193,   194,     0,
     195,   196,   197,   198,   199,   200,     0,     0,   201,   202,
     203,   204,   205,   206,   207,     0,   208,   209,   210,     0,
     211,   212,   213,     0,   214,   215,   216,   217,   218,   219,
     220,   221,   222,   223,   224,     0,   225,     0,   226,   227,
     228,   229,     0,   230,     0,   231,     0,     0,     0,   234,
     235,   529,     0,   238,     0,   239,   240,     0,     0,   241,
     242,   243,   244,     0,   245,   246,   247,   248,   249,  1414,
     251,     0,   253,   254,   255,   256,     0,   257,   258,   259,
     260,   261,   262,   263,     0,   264,     0,   266,   267,   268,
     269,   270,   271,   272,   273,     0,   274,     0,   275,     0,
       0,   278,     0,   280,   281,   282,   283,   284,   285,   286,
       0,     0,   287,     0,   289,     0,     0,   291,   292,   293,
     294,   295,   296,   297,   298,   530,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,     0,   320,   321,   322,   323,
     324,   325,     0,   326,   327,     0,   329,     0,   330,   331,
     332,   333,   334,   335,     0,   336,   337,     0,     0,   338,
     339,   340,     0,     0,   341,   342,     0,   344,     0,   346,
     347,   348,   349,   350,   351,   352,   353,   354,   355,   356,
     357,   358,     0,     0,     0,     0,   359,   360,   361,     0,
     363,   364,   365,   366,   367,   368,     0,   369,   370,   371,
     372,   373,   374,   375,   376,     0,   377,   378,   379,   380,
     381,   382,   383,   384,     0,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,     0,
     399,   400,     0,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,     0,     0,
     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
     427,     0,   429,   430,   431,   432,     0,   433,   434,   435,
     436,   437,   438,   439,   440,   441,   442,   443,   444,   445,
     531,   447,   448,   449,     0,   450,   451,     0,   452,     0,
     454,   455,   456,   457,   458,     0,   459,   460,     0,   461,
       0,   462,   463,   464,   465,   466,     0,   467,   468,   469,
     470,   471,   472,   473,   474,     0,     0,   475,   476,   477,
       0,   478,   479,   480,   481,     0,   482,   483,   484,   485,
     486,   487,   488,     0,   489,     0,   491,   492,   493,   494,
     495,   496,   497,     0,     0,   498,     0,     0,   499,   500,
     501,   502,   503,   504,   505,   506,   507,   508,   509,   510,
     511,   512,   513,   514,   515,   516,   517,   518,   519,   528,
       0,   552,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   113,   114,
     115,   116,   117,   118,   119,   120,   121,     0,   122,   123,
     124,     0,     0,     0,     0,     0,   125,     0,     0,     0,
       0,   127,   128,     0,   129,   130,   131,     0,   133,   134,
     135,   136,   137,     0,   139,   140,     0,   141,   142,   143,
     144,   145,   146,     0,     0,   147,   148,   149,   150,   151,
       0,   152,   153,   154,   155,   156,     0,     0,     0,   158,
     159,   160,   161,   162,   163,     0,   165,   166,   167,     0,
     168,   169,   170,   171,   172,   173,     0,     0,   175,   176,
     177,   178,   179,   180,   181,   182,   183,   184,   185,   186,
     187,     0,   188,     0,   189,   190,   191,   192,   193,   194,
       0,   195,   196,   197,   198,   199,   200,     0,     0,   201,
     202,   203,   204,   205,   206,   207,     0,   208,   209,   210,
       0,   211,   212,   213,     0,   214,   215,   216,   217,   218,
     219,   220,   221,   222,   223,   224,     0,   225,     0,   226,
     227,   228,   229,     0,   230,     0,   231,     0,     0,     0,
     234,   235,   529,     0,   238,     0,   239,   240,     0,     0,
     241,   242,   243,   244,     0,   245,   246,   247,   248,   249,
    1416,   251,     0,   253,   254,   255,   256,     0,   257,   258,
     259,   260,   261,   262,   263,     0,   264,     0,   266,   267,
     268,   269,   270,   271,   272,   273,     0,   274,     0,   275,
       0,     0,   278,     0,   280,   281,   282,   283,   284,   285,
     286,     0,     0,   287,     0,   289,     0,     0,   291,   292,
     293,   294,   295,   296,   297,   298,   530,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,     0,   320,   321,   322,
     323,   324,   325,     0,   326,   327,     0,   329,     0,   330,
     331,   332,   333,   334,   335,     0,   336,   337,     0,     0,
     338,   339,   340,     0,     0,   341,   342,     0,   344,     0,
     346,   347,   348,   349,   350,   351,   352,   353,   354,   355,
     356,   357,   358,     0,     0,     0,     0,   359,   360,   361,
       0,   363,   364,   365,   366,   367,   368,     0,   369,   370,
     371,   372,   373,   374,   375,   376,     0,   377,   378,   379,
     380,   381,   382,   383,   384,     0,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
       0,   399,   400,     0,   402,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,     0,
       0,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,     0,   429,   430,   431,   432,     0,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   531,   447,   448,   449,     0,   450,   451,     0,   452,
       0,   454,   455,   456,   457,   458,     0,   459,   460,     0,
     461,     0,   462,   463,   464,   465,   466,     0,   467,   468,
     469,   470,   471,   472,   473,   474,     0,     0,   475,   476,
     477,     0,   478,   479,   480,   481,     0,   482,   483,   484,
     485,   486,   487,   488,     0,   489,     0,   491,   492,   493,
     494,   495,   496,   497,     0,     0,   498,     0,     0,   499,
     500,   501,   502,   503,   504,   505,   506,   507,   508,   509,
     510,   511,   512,   513,   514,   515,   516,   517,   518,   519,
     528,     0,   552,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   113,
     114,   115,   116,   117,   118,   119,   120,   121,     0,   122,
     123,   124,     0,     0,     0,     0,     0,   125,     0,     0,
       0,     0,   127,   128,     0,   129,   130,   131,     0,   133,
     134,   135,   136,   137,     0,   139,   140,     0,   141,   142,
     143,   144,   145,   146,     0,     0,   147,   148,   149,   150,
     151,     0,   152,   153,   154,   155,   156,     0,     0,     0,
     158,   159,   160,   161,   162,   163,     0,   165,   166,   167,
       0,   168,   169,   170,   171,   172,   173,     0,     0,   175,
     176,   177,   178,   179,   180,   181,   182,   183,   184,   185,
     186,   187,     0,   188,     0,   189,   190,   191,   192,   193,
     194,     0,   195,   196,   197,   198,   199,   200,     0,     0,
     201,   202,   203,   204,   205,   206,   207,     0,   208,   209,
     210,     0,   211,   212,   213,     0,   214,   215,   216,   217,
     218,   219,   220,   221,   222,   223,   224,     0,   225,     0,
     226,   227,   228,   229,     0,   230,     0,   231,     0,     0,
       0,   234,   235,   529,     0,   238,     0,   239,   240,     0,
       0,   241,   242,   243,   244,     0,   245,   246,   247,   248,
     249,  1419,   251,     0,   253,   254,   255,   256,     0,   257,
     258,   259,   260,   261,   262,   263,     0,   264,     0,   266,
     267,   268,   269,   270,   271,   272,   273,     0,   274,     0,
     275,     0,     0,   278,     0,   280,   281,   282,   283,   284,
     285,   286,     0,     0,   287,     0,   289,     0,     0,   291,
     292,   293,   294,   295,   296,   297,   298,   530,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,     0,   320,   321,
     322,   323,   324,   325,     0,   326,   327,     0,   329,     0,
     330,   331,   332,   333,   334,   335,     0,   336,   337,     0,
       0,   338,   339,   340,     0,     0,   341,   342,     0,   344,
       0,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,     0,     0,     0,     0,   359,   360,
     361,     0,   363,   364,   365,   366,   367,   368,     0,   369,
     370,   371,   372,   373,   374,   375,   376,     0,   377,   378,
     379,   380,   381,   382,   383,   384,     0,   385,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,     0,   399,   400,     0,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
       0,     0,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,     0,   429,   430,   431,   432,     0,   433,
     434,   435,   436,   437,   438,   439,   440,   441,   442,   443,
     444,   445,   531,   447,   448,   449,     0,   450,   451,     0,
     452,     0,   454,   455,   456,   457,   458,     0,   459,   460,
       0,   461,     0,   462,   463,   464,   465,   466,     0,   467,
     468,   469,   470,   471,   472,   473,   474,     0,     0,   475,
     476,   477,     0,   478,   479,   480,   481,     0,   482,   483,
     484,   485,   486,   487,   488,     0,   489,     0,   491,   492,
     493,   494,   495,   496,   497,     0,     0,   498,     0,     0,
     499,   500,   501,   502,   503,   504,   505,   506,   507,   508,
     509,   510,   511,   512,   513,   514,   515,   516,   517,   518,
     519,   528,     0,   552,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     113,   114,   115,   116,   117,   118,   119,   120,   121,     0,
     122,   123,   124,     0,     0,     0,     0,     0,   125,     0,
       0,     0,     0,   127,   128,     0,   129,   130,   131,     0,
     133,   134,   135,   136,   137,     0,   139,   140,     0,   141,
     142,   143,   144,   145,   146,     0,     0,   147,   148,   149,
     150,   151,     0,   152,   153,   154,   155,   156,     0,     0,
       0,   158,   159,   160,   161,   162,   163,     0,   165,   166,
     167,     0,   168,   169,   170,   171,   172,   173,     0,     0,
     175,   176,   177,   178,   179,   180,   181,   182,   183,   184,
     185,   186,   187,     0,   188,     0,   189,   190,   191,   192,
     193,   194,     0,   195,   196,   197,   198,   199,   200,     0,
       0,   201,   202,   203,   204,   205,   206,   207,     0,   208,
     209,   210,     0,   211,   212,   213,     0,   214,   215,   216,
     217,   218,   219,   220,   221,   222,   223,   224,     0,   225,
       0,   226,   227,   228,   229,     0,   230,     0,   231,     0,
       0,     0,   234,   235,   529,     0,   238,     0,   239,   240,
       0,     0,   241,   242,   243,   244,     0,   245,   246,   247,
     248,   249,  1421,   251,     0,   253,   254,   255,   256,     0,
     257,   258,   259,   260,   261,   262,   263,     0,   264,     0,
     266,   267,   268,   269,   270,   271,   272,   273,     0,   274,
       0,   275,     0,     0,   278,     0,   280,   281,   282,   283,
     284,   285,   286,     0,     0,   287,     0,   289,     0,     0,
     291,   292,   293,   294,   295,   296,   297,   298,   530,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,     0,   320,
     321,   322,   323,   324,   325,     0,   326,   327,     0,   329,
       0,   330,   331,   332,   333,   334,   335,     0,   336,   337,
       0,     0,   338,   339,   340,     0,     0,   341,   342,     0,
     344,     0,   346,   347,   348,   349,   350,   351,   352,   353,
     354,   355,   356,   357,   358,     0,     0,     0,     0,   359,
     360,   361,     0,   363,   364,   365,   366,   367,   368,     0,
     369,   370,   371,   372,   373,   374,   375,   376,     0,   377,
     378,   379,   380,   381,   382,   383,   384,     0,   385,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,     0,   399,   400,     0,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,     0,     0,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,     0,   429,   430,   431,   432,     0,
     433,   434,   435,   436,   437,   438,   439,   440,   441,   442,
     443,   444,   445,   531,   447,   448,   449,     0,   450,   451,
       0,   452,     0,   454,   455,   456,   457,   458,     0,   459,
     460,     0,   461,     0,   462,   463,   464,   465,   466,     0,
     467,   468,   469,   470,   471,   472,   473,   474,     0,     0,
     475,   476,   477,     0,   478,   479,   480,   481,     0,   482,
     483,   484,   485,   486,   487,   488,     0,   489,     0,   491,
     492,   493,   494,   495,   496,   497,     0,     0,   498,     0,
       0,   499,   500,   501,   502,   503,   504,   505,   506,   507,
     508,   509,   510,   511,   512,   513,   514,   515,   516,   517,
     518,   519,   528,     0,   552,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   113,   114,   115,   116,   117,   118,   119,   120,   121,
       0,   122,   123,   124,     0,     0,     0,     0,     0,   125,
       0,     0,     0,     0,   127,   128,     0,   129,   130,   131,
       0,   133,   134,   135,   136,   137,     0,   139,   140,     0,
     141,   142,   143,   144,   145,   146,     0,     0,   147,   148,
     149,   150,   151,     0,   152,   153,   154,   155,   156,     0,
       0,     0,   158,   159,   160,   161,   162,   163,     0,   165,
     166,   167,     0,   168,   169,   170,   171,   172,   173,     0,
       0,   175,   176,   177,   178,   179,   180,   181,   182,   183,
     184,   185,   186,   187,     0,   188,     0,   189,   190,   191,
     192,   193,   194,     0,   195,   196,   197,   198,   199,   200,
       0,     0,   201,   202,   203,   204,   205,   206,   207,     0,
     208,   209,   210,     0,   211,   212,   213,     0,   214,   215,
     216,   217,   218,   219,   220,   221,   222,   223,   224,     0,
     225,     0,   226,   227,   228,   229,     0,   230,     0,   231,
       0,     0,     0,   234,   235,   529,     0,   238,     0,   239,
     240,     0,     0,   241,   242,   243,   244,     0,   245,   246,
     247,   248,   249,  2271,   251,     0,   253,   254,   255,   256,
       0,   257,   258,   259,   260,   261,   262,   263,     0,   264,
       0,   266,   267,   268,   269,   270,   271,   272,   273,     0,
     274,     0,   275,     0,     0,   278,     0,   280,   281,   282,
     283,   284,   285,   286,     0,     0,   287,     0,   289,     0,
       0,   291,   292,   293,   294,   295,   296,   297,   298,   530,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,     0,
     320,   321,   322,   323,   324,   325,     0,   326,   327,     0,
     329,     0,   330,   331,   332,   333,   334,   335,     0,   336,
     337,     0,     0,   338,   339,   340,     0,     0,   341,   342,
       0,   344,     0,   346,   347,   348,   349,   350,   351,   352,
     353,   354,   355,   356,   357,   358,     0,     0,     0,     0,
     359,   360,   361,     0,   363,   364,   365,   366,   367,   368,
       0,   369,   370,   371,   372,   373,   374,   375,   376,     0,
     377,   378,   379,   380,   381,   382,   383,   384,     0,   385,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,     0,   399,   400,     0,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,     0,     0,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,   427,     0,   429,   430,   431,   432,
       0,   433,   434,   435,   436,   437,   438,   439,   440,   441,
     442,   443,   444,   445,   531,   447,   448,   449,     0,   450,
     451,     0,   452,     0,   454,   455,   456,   457,   458,     0,
     459,   460,     0,   461,     0,   462,   463,   464,   465,   466,
       0,   467,   468,   469,   470,   471,   472,   473,   474,     0,
       0,   475,   476,   477,     0,   478,   479,   480,   481,     0,
     482,   483,   484,   485,   486,   487,   488,     0,   489,     0,
     491,   492,   493,   494,   495,   496,   497,     0,     0,   498,
       0,     0,   499,   500,   501,   502,   503,   504,   505,   506,
     507,   508,   509,   510,   511,   512,   513,   514,   515,   516,
     517,   518,   519,   837,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   113,   114,   115,   116,   117,   118,   119,   120,
     121,     0,   122,   123,   124,     0,     0,     0,   838,     0,
     125,     0,  -953,     0,   839,   127,   128,     0,   129,   130,
     131,   840,   133,   134,   135,     0,   841,   842,   843,   844,
       0,   141,   142,   143,   144,   145,   146,     0,     0,   147,
     148,   845,   846,   151,     0,   152,   153,   154,   155,     0,
       0,   847,     0,   848,   159,   160,   161,   162,   163,   849,
     165,   166,   167,     0,   168,   169,   170,   171,   172,   173,
       0,   850,   175,   176,   177,   178,   179,   180,   181,   182,
     183,   184,   851,   852,   187,     0,   188,     0,   189,   190,
     191,   192,   193,   194,     0,   195,   196,   197,   198,   199,
     200,     0,     0,   201,   202,   853,   204,   205,   206,   207,
       0,   208,   209,   210,     0,   211,   212,   213,     0,   214,
     215,   216,   217,     0,   219,   220,   221,   222,   223,     0,
       0,   225,     0,   226,   227,   854,   229,     0,   230,     0,
     231,   855,     0,   856,   234,   235,  -953,   857,   238,     0,
     239,   240,     0,     0,     0,     0,   243,   244,     0,   245,
     246,   247,   248,   249,   250,   251,   859,   253,   254,   255,
     256,     0,   257,   258,   259,   260,   261,   262,   263,     0,
     264,   860,     0,   267,   268,   269,   270,   271,   861,   862,
       0,   863,     0,   275,   864,   865,   278,   866,   280,   281,
     282,   283,   284,   285,   286,     0,     0,   287,   867,   289,
     868,     0,   291,   292,   293,   294,   295,   296,   297,   298,
     869,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   870,
     871,   872,   321,   322,   323,   324,     0,     0,   326,   327,
     873,   329,     0,     0,   331,   874,   333,   334,   335,     0,
     336,   337,     0,     0,   338,   339,   340,     0,     0,   341,
       0,   875,   344,   876,     0,   347,   348,   349,   350,   351,
     352,   353,   354,   355,   356,   357,   358,     0,     0,     0,
       0,   359,   360,     0,   877,   363,   364,     0,   366,   367,
     368,     0,   369,   370,   371,   372,   373,   374,   375,   376,
       0,   377,   378,   379,   878,   381,   382,   383,   384,     0,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,     0,   399,   400,   879,   402,   403,
     404,   880,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,     0,   881,   417,   418,   419,   420,   421,
     422,   882,   424,   425,   426,   427,   883,   429,   430,   884,
     432,     0,   433,   434,   435,   436,   437,   438,   439,   440,
     441,   442,   443,   444,   445,   885,   447,     0,   449,     0,
     450,   451,     0,   452,   886,   454,   455,   456,   457,   458,
       0,   887,   888,     0,   461,     0,   462,   463,     0,   465,
       0,     0,   467,   468,   889,   470,   471,   472,   473,   474,
     890,     0,   475,   476,   477,     0,   478,   479,   480,   481,
       0,   482,   483,   484,   485,   486,     0,   891,     0,   489,
     892,   491,   492,   493,   494,   495,   496,   497,     0,     0,
     498,     0,     0,   499,   500,   501,   502,   503,   504,   528,
       0,   552,     0,     0,     0,     0,     0,     0,     0,     0,
     516,   517,   518,   519,     0,     0,     0,     0,   113,   114,
     115,   116,   117,   118,   119,   120,   121,     0,   122,   123,
     124,     0,     0,     0,     0,     0,   125,     0,     0,     0,
       0,   127,   128,     0,   129,   130,   131,     0,   133,   134,
     135,   136,   137,     0,   139,   140,     0,   141,   142,   143,
     144,   145,   146,     0,     0,   147,   148,   149,   150,   151,
       0,   152,   153,   154,   155,   156,     0,     0,     0,   158,
     159,   160,   161,   162,   163,     0,   165,   166,   167,     0,
     168,   169,   170,   171,   172,   173,     0,     0,   175,   176,
     177,   178,   179,   180,   181,   182,   183,   184,   185,   186,
     187,     0,   188,     0,   189,   190,   191,   192,   193,   194,
       0,   195,   196,   197,   198,   199,   200,     0,     0,   201,
     202,   203,   204,   205,   206,   207,     0,   208,   209,   210,
       0,   211,   212,   213,     0,   214,   215,   216,   217,   218,
     219,   220,   221,   222,   223,   224,     0,   225,     0,   226,
     227,   228,   229,     0,   230,     0,   231,     0,     0,     0,
     234,   235,   529,     0,   238,     0,   239,   240,     0,     0,
     241,   242,   243,   244,     0,   245,   246,   247,   248,   249,
    3051,   251,     0,   253,   254,   255,   256,     0,   257,   258,
     259,   260,   261,   262,   263,     0,   264,     0,   266,   267,
     268,   269,   270,   271,   272,   273,     0,   274,     0,   275,
       0,     0,   278,     0,   280,   281,   282,   283,   284,   285,
     286,     0,     0,   287,     0,   289,     0,     0,   291,   292,
     293,   294,   295,   296,   297,   298,   530,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,     0,   320,   321,   322,
     323,   324,   325,     0,   326,   327,     0,   329,     0,   330,
     331,   332,   333,   334,   335,     0,   336,   337,     0,     0,
     338,   339,   340,     0,     0,   341,   342,     0,   344,     0,
     346,   347,   348,   349,   350,   351,   352,   353,   354,   355,
     356,   357,   358,     0,     0,     0,     0,   359,   360,   361,
       0,   363,   364,   365,   366,   367,   368,     0,   369,   370,
     371,   372,   373,   374,   375,   376,     0,   377,   378,   379,
     380,   381,   382,   383,   384,     0,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
       0,   399,   400,     0,   402,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,     0,
       0,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,     0,   429,   430,   431,   432,     0,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   531,   447,   448,   449,     0,   450,   451,     0,   452,
       0,   454,   455,   456,   457,   458,     0,   459,   460,     0,
     461,     0,   462,   463,   464,   465,   466,     0,   467,   468,
     469,   470,   471,   472,   473,   474,     0,     0,   475,   476,
     477,     0,   478,   479,   480,   481,     0,   482,   483,   484,
     485,   486,   487,   488,     0,   489,     0,   491,   492,   493,
     494,   495,   496,   497,     0,     0,   498,     0,     0,   499,
     500,   501,   502,   503,   504,   505,   506,   507,   508,   509,
     510,   511,   512,   513,   514,   515,   516,   517,   518,   519,
     528,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   113,
     114,   115,   116,   117,   118,   119,   120,   121,     0,   122,
     123,   124,     0,     0,     0,     0,     0,   125,     0,     0,
       0,     0,   127,   128,     0,   129,   130,   131,     0,   133,
     134,   135,   136,   137,     0,   139,   140,     0,   141,   142,
     143,   144,   145,   146,     0,     0,   147,   148,   149,   150,
     151,     0,   152,   153,   154,   155,   156,     0,     0,     0,
     158,   159,   160,   161,   162,   163,     0,   165,   166,   167,
       0,   168,   169,   170,   171,   172,   173,     0,     0,   175,
     176,   177,   178,   179,   180,   181,   182,   183,   184,   185,
     186,   187,     0,   188,     0,   189,   190,   191,   192,   193,
     194,     0,   195,   196,   197,   198,   199,   200,     0,     0,
     201,   202,   203,   204,   205,   206,   207,     0,   208,   209,
     210,     0,   211,   212,   213,     0,   214,   215,   216,   217,
     218,   219,   220,   221,   222,   223,   224,     0,   225,     0,
     226,   227,   228,   229,     0,   230,     0,   231,     0,     0,
       0,   234,   235,   529,     0,   238,     0,   239,   240,     0,
       0,   241,   242,   243,   244,     0,   245,   246,   247,   248,
     249,   250,   251,     0,   253,   254,   255,   256,     0,   257,
     258,   259,   260,   261,   262,   263,     0,   264,     0,   266,
     267,   268,   269,   270,   271,   272,   273,     0,   274,     0,
     275,     0,     0,   278,     0,   280,   281,   282,   283,   284,
     285,   286,     0,     0,   287,     0,   289,     0,     0,   291,
     292,   293,   294,   295,   296,   297,   298,   530,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,     0,   320,   321,
     322,   323,   324,   325,     0,   326,   327,     0,   329,     0,
     330,   331,   332,   333,   334,   335,     0,   336,   337,     0,
       0,   338,   339,   340,     0,     0,   341,   342,     0,   344,
       0,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,     0,     0,     0,     0,   359,   360,
     361,     0,   363,   364,   365,   366,   367,   368,     0,   369,
     370,   371,   372,   373,   374,   375,   376,     0,   377,   378,
     379,   380,   381,   382,   383,   384,     0,   385,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,     0,   399,   400,     0,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
       0,     0,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,     0,   429,   430,   431,   432,     0,   433,
     434,   435,   436,   437,   438,   439,   440,   441,   442,   443,
     444,   445,   531,   447,   448,   449,     0,   450,   451,     0,
     452,     0,   454,   455,   456,   457,   458,     0,   459,   460,
       0,   461,     0,   462,   463,   464,   465,   466,     0,   467,
     468,   469,   470,   471,   472,   473,   474,     0,     0,   475,
     476,   477,     0,   478,   479,   480,   481,     0,   482,   483,
     484,   485,   486,   487,   488,     0,   489,     0,   491,   492,
     493,   494,   495,   496,   497,     0,     0,   498,     0,     0,
     499,   500,   501,   502,   503,   504,   505,   506,   507,   508,
     509,   510,   511,   512,   513,   514,   515,   516,   517,   518,
     519,   528,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     113,   114,   115,   116,   117,   118,   119,   120,   121,     0,
     122,   123,   124,     0,     0,     0,     0,     0,   125,     0,
       0,     0,     0,   127,   128,     0,   129,   130,   131,     0,
     133,   134,   135,   136,   137,     0,   139,   140,     0,   141,
     142,   143,   144,   145,   146,     0,     0,   147,   148,   149,
     150,   151,     0,   152,   153,   154,   155,   156,     0,     0,
       0,   158,   159,   160,   161,   162,   163,     0,   165,   166,
     167,     0,   168,   169,   170,   171,   172,   173,     0,     0,
     175,   176,   177,   178,   179,   180,   181,   182,   183,   184,
     185,   186,   187,     0,   188,     0,   189,   190,   191,   192,
     193,   194,     0,   195,   196,   197,   198,   199,   200,     0,
       0,   201,   202,   203,   204,   205,   206,   207,     0,   208,
     209,   210,     0,   211,   212,   213,     0,   214,   215,   216,
     217,   218,   219,   220,   221,   222,   223,   224,     0,   225,
       0,   226,   227,   228,   229,     0,   230,     0,   231,     0,
       0,     0,   234,   235,   529,     0,   680,     0,   239,   240,
       0,     0,   241,   242,   243,   244,     0,   245,   246,   247,
     248,   249,   250,   251,     0,   253,   254,   255,   256,     0,
     257,   258,   259,   260,   261,   262,   263,     0,   264,     0,
     266,   267,   268,   269,   270,   271,   272,   273,     0,   274,
       0,   275,     0,     0,   278,     0,   280,   281,   282,   283,
     284,   285,   286,     0,     0,   287,     0,   289,     0,     0,
     291,   292,   681,   294,   295,   296,   297,   298,   530,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,     0,   320,
     321,   322,   323,   324,   325,     0,   326,   327,     0,   329,
       0,   330,   331,   332,   333,   334,   335,     0,   336,   337,
       0,     0,   338,   339,   340,     0,     0,   341,   342,     0,
     344,     0,   346,   347,   348,   349,   350,   351,   352,   353,
     354,   355,   356,   357,   358,     0,     0,     0,     0,   359,
     360,   361,     0,   363,   364,   365,   366,   367,   368,     0,
     369,   370,   371,   372,   373,   374,   375,   376,     0,   377,
     378,   379,   380,   381,   382,   383,   384,     0,   385,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,     0,   399,   400,     0,   402,   403,   404,   405,
     406,   407,   408,   409,   682,   411,   412,   413,   414,   415,
     416,     0,     0,   417,   418,   419,   420,   683,   422,   423,
     424,   425,   426,   427,     0,   429,   430,   431,   432,     0,
     433,   434,   435,   436,   437,   438,   439,   440,   441,   442,
     443,   444,   445,   531,   447,   448,   449,     0,   450,   451,
       0,   452,     0,   454,   455,   456,   457,   458,     0,   684,
     460,     0,   461,     0,   462,   463,   464,   465,   466,     0,
     467,   468,   469,   470,   471,   472,   473,   474,     0,     0,
     475,   476,   477,     0,   478,   479,   480,   481,     0,   482,
     483,   484,   485,   486,   487,   488,     0,   489,     0,   491,
     492,   493,   494,   495,   496,   497,     0,     0,   498,     0,
       0,   499,   500,   501,   502,   503,   504,   505,   506,   507,
     508,   509,   510,   511,   512,   513,   514,   515,   516,   517,
     518,   519,   528,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   113,   114,   115,   116,   117,   118,   119,   120,   121,
       0,   122,   123,   124,     0,     0,     0,     0,     0,   125,
       0,     0,     0,     0,   127,   128,     0,   129,   130,   131,
       0,   133,   134,   135,   136,   137,     0,   139,   140,     0,
     141,   142,   143,   144,   145,   146,     0,     0,   147,   148,
     149,   150,   151,     0,   152,   153,   154,   155,   156,     0,
       0,     0,   158,   159,   160,   161,   162,   163,     0,   165,
     166,   167,     0,   168,   169,   170,   171,   172,   173,     0,
       0,   175,   176,   177,   178,   179,   180,   181,   182,   183,
     184,   185,   186,   187,     0,   188,     0,   189,   190,   191,
     192,   193,   194,     0,   195,   196,   197,   198,   199,   200,
       0,     0,   201,   202,   203,   204,   205,   206,   207,     0,
     208,   209,   210,     0,   211,   212,   213,     0,   214,   215,
     216,   217,   218,   219,   220,   221,   222,   223,   224,     0,
     225,     0,   226,   227,   228,   229,     0,   230,     0,   231,
       0,     0,     0,   234,   235,   529,     0,   238,     0,   239,
     240,     0,     0,   241,   242,   243,   244,     0,   245,   246,
     247,   248,   249,   912,   251,     0,   253,   254,   255,   256,
       0,   257,   258,   259,   260,   261,   262,   263,     0,   264,
       0,   266,   267,   268,   269,   270,   271,   272,   273,     0,
     274,     0,   275,     0,     0,   278,     0,   280,   281,   282,
     283,   284,   285,   286,     0,     0,   287,     0,   289,     0,
       0,   291,   292,   293,   294,   295,   296,   297,   298,   530,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,     0,
     320,   321,   322,   323,   324,   325,     0,   326,   327,     0,
     329,     0,   330,   331,   332,   333,   334,   335,     0,   336,
     337,     0,     0,   338,   339,   340,     0,     0,   341,   342,
       0,   344,     0,   346,   347,   348,   349,   350,   351,   352,
     353,   354,   355,   356,   357,   358,     0,     0,     0,     0,
     359,   360,   361,     0,   363,   364,   365,   366,   367,   368,
       0,   369,   370,   371,   372,   373,   374,   375,   376,     0,
     377,   378,   379,   380,   381,   382,   383,   384,     0,   385,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,     0,   399,   400,     0,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,     0,     0,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,   427,     0,   429,   430,   431,   432,
       0,   433,   434,   435,   436,   437,   438,   439,   440,   441,
     442,   443,   444,   445,   531,   447,   448,   449,     0,   450,
     451,     0,   452,     0,   454,   455,   456,   457,   458,     0,
     459,   460,     0,   461,     0,   462,   463,   464,   465,   466,
       0,   467,   468,   469,   470,   471,   472,   473,   474,     0,
       0,   475,   476,   477,     0,   478,   479,   480,   481,     0,
     482,   483,   484,   485,   486,   487,   488,     0,   489,     0,
     491,   492,   493,   494,   495,   496,   497,     0,     0,   498,
       0,     0,   499,   500,   501,   502,   503,   504,   505,   506,
     507,   508,   509,   510,   511,   512,   513,   514,   515,   516,
     517,   518,   519,   528,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   113,   114,   115,   116,   117,   118,   119,   120,
     121,     0,   122,   123,   124,     0,     0,     0,     0,     0,
     125,     0,     0,     0,     0,   127,   128,     0,   129,   130,
     131,     0,   133,   134,   135,   136,   137,     0,   139,   140,
       0,   141,   142,   143,   144,   145,   146,     0,     0,   147,
     148,   149,   150,   151,     0,   152,   153,   154,   155,   156,
       0,     0,     0,   158,   159,   160,   161,   162,   163,     0,
     165,   166,   167,     0,   168,   169,   170,   171,   172,   173,
       0,     0,   175,   176,   177,   178,   179,   180,   181,   182,
     183,   184,   185,   186,   187,     0,   188,     0,   189,   190,
     191,   192,   193,   194,     0,   195,   196,   197,   198,   199,
     200,     0,     0,   201,   202,   203,   204,   205,   206,   207,
       0,   208,   209,   210,     0,   211,   212,   213,     0,   214,
     215,   216,   217,   218,   219,   220,   221,   222,   223,   224,
       0,   225,     0,   226,   227,   228,   229,     0,   230,     0,
     231,     0,     0,     0,   234,   235,   529,     0,   238,     0,
     239,   240,     0,     0,   241,   242,   243,   244,     0,   245,
     246,   247,   248,   249,   250,   251,     0,   253,   254,   255,
     256,     0,   257,   258,   259,   260,   261,   262,   263,     0,
     264,     0,   266,   267,   268,   269,   270,   271,   272,   273,
       0,   274,     0,   275,     0,     0,   278,     0,   280,   281,
     282,   283,   284,   285,   286,     0,     0,   287,     0,   289,
       0,     0,   291,   292,   293,   294,   295,   296,   297,   298,
     530,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
       0,   320,   321,   322,   323,   324,   325,     0,   326,   327,
       0,   329,     0,   330,   331,   332,   333,   334,   335,     0,
     336,   337,     0,     0,   338,   339,   340,     0,     0,   341,
     342,     0,   344,     0,   346,   347,   348,   349,   350,   351,
     352,   353,   354,   355,   356,   357,   358,     0,     0,     0,
       0,   359,   360,   361,     0,   363,   364,   365,   366,   367,
     368,     0,   369,   370,   371,   372,   373,   374,   375,   376,
       0,   377,   378,   379,   380,   381,   382,   383,   384,     0,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,     0,   399,   400,     0,   402,   403,
     404,   405,   406,   407,   408,   409,   682,   411,   412,   413,
     414,   415,   416,     0,     0,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,     0,   429,   430,   431,
     432,     0,   433,   434,   435,   436,   437,   438,   439,   440,
     441,   442,   443,   444,   445,   531,   447,   448,   449,     0,
     450,   451,     0,   452,     0,   454,   455,   456,   457,   458,
       0,   684,   460,     0,   461,     0,   462,   463,   464,   465,
     466,     0,   467,   468,   469,   470,   471,   472,   473,   474,
       0,     0,   475,   476,   477,     0,   478,   479,   480,   481,
       0,   482,   483,   484,   485,   486,   487,   488,     0,   489,
       0,   491,   492,   493,   494,   495,   496,   497,     0,     0,
     498,     0,     0,   499,   500,   501,   502,   503,   504,   505,
     506,   507,   508,   509,   510,   511,   512,   513,   514,   515,
     516,   517,   518,   519,   528,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   113,   114,   115,   116,   117,   118,   119,
     120,   121,     0,   122,   123,   124,     0,     0,     0,     0,
       0,   125,     0,  1720,     0,     0,   127,   128,     0,   129,
     130,   131,     0,   133,   134,   135,   136,   137,     0,   139,
     140,     0,   141,   142,   143,   144,   145,   146,     0,     0,
     147,   148,   149,   150,   151,     0,   152,   153,   154,   155,
     156,     0,     0,     0,   158,   159,   160,   161,   162,   163,
       0,   165,   166,   167,     0,   168,   169,   170,   171,   172,
     173,     0,     0,   175,   176,   177,   178,   179,   180,   181,
     182,   183,   184,   185,   186,   187,     0,   188,     0,   189,
     190,   191,   192,   193,   194,     0,   195,   196,   197,   198,
     199,   200,     0,     0,   201,   202,   203,   204,   205,   206,
     207,     0,   208,   209,   210,     0,   211,   212,   213,     0,
     214,   215,   216,   217,   218,   219,   220,   221,   222,   223,
     224,     0,   225,     0,   226,   227,   228,   229,     0,   230,
       0,   231,     0,     0,     0,   234,   235,   529,     0,   238,
       0,   239,   240,     0,     0,   241,   242,   243,   244,     0,
     245,   246,   247,   248,   249,   250,   251,     0,   253,   254,
     255,   256,     0,   257,   258,   259,   260,   261,   262,   263,
       0,   264,     0,   266,   267,   268,   269,   270,   271,   272,
     273,     0,   274,     0,   275,     0,     0,   278,     0,   280,
     281,   282,   283,   284,   285,   286,     0,     0,   287,     0,
     289,     0,     0,   291,   292,   293,   294,   295,   296,   297,
     298,   530,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,     0,   320,   321,   322,   323,   324,   325,     0,   326,
     327,     0,   329,     0,   330,   331,   332,   333,   334,   335,
       0,   336,   337,     0,     0,   338,   339,   340,     0,     0,
     341,   342,     0,   344,     0,   346,   347,   348,   349,   350,
     351,   352,   353,   354,   355,   356,   357,   358,     0,     0,
       0,     0,   359,   360,   361,     0,   363,   364,   365,   366,
     367,   368,     0,   369,   370,   371,   372,   373,   374,   375,
     376,     0,   377,   378,   379,   380,   381,   382,   383,   384,
       0,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,     0,   399,   400,     0,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,     0,     0,   417,   418,   419,   420,
     421,     0,   423,   424,   425,   426,   427,     0,   429,   430,
     431,   432,     0,   433,   434,   435,   436,   437,   438,   439,
     440,   441,   442,   443,   444,   445,   531,   447,   448,   449,
       0,   450,   451,     0,   452,     0,   454,   455,   456,   457,
     458,     0,   459,   460,     0,   461,     0,   462,   463,   464,
     465,   466,     0,   467,   468,   469,   470,   471,   472,   473,
     474,     0,     0,   475,   476,   477,     0,   478,   479,   480,
     481,     0,   482,   483,   484,   485,   486,   487,   488,     0,
     489,     0,   491,   492,   493,   494,   495,   496,   497,     0,
       0,   498,     0,     0,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,   517,   518,   519,   528,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   113,   114,   115,   116,   117,   118,
     119,   120,   121,     0,   122,   123,   124,     0,     0,     0,
       0,     0,   125,     0,     0,     0,     0,   127,   128,     0,
     129,   130,   131,     0,   133,   134,   135,   136,   137,     0,
     139,   140,     0,   141,   142,   143,   144,   145,   146,     0,
       0,   147,   148,   149,   150,   151,     0,   152,   153,   154,
     155,   156,     0,     0,     0,   158,   159,   160,   161,   162,
     163,     0,   165,   166,   167,     0,   168,   169,   170,   171,
     172,   173,     0,     0,   175,   176,   177,   178,   179,   180,
     181,   182,   183,   184,   185,   186,   187,     0,   188,     0,
     189,   190,   191,   192,   193,   194,     0,   195,   196,   197,
     198,   199,   200,     0,     0,   201,   202,   203,   204,   205,
     206,   207,     0,   208,   209,   210,     0,   211,   212,   213,
       0,   214,   215,   216,   217,   218,   219,   220,   221,   222,
     223,   224,     0,   225,     0,   226,   227,   228,   229,     0,
     230,     0,   231,     0,     0,     0,   234,   235,   529,     0,
     238,     0,   239,   240,     0,     0,   241,   242,   243,   244,
       0,   245,   246,   247,   248,   249,  1894,   251,     0,   253,
     254,   255,   256,     0,   257,   258,   259,   260,   261,   262,
     263,     0,   264,     0,   266,   267,   268,   269,   270,   271,
     272,   273,     0,   274,     0,   275,     0,     0,   278,     0,
     280,   281,   282,   283,   284,   285,   286,     0,     0,   287,
       0,   289,     0,     0,   291,   292,   293,   294,   295,   296,
     297,   298,   530,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,     0,   320,   321,   322,   323,   324,   325,     0,
     326,   327,     0,   329,     0,   330,   331,   332,   333,   334,
     335,     0,   336,   337,     0,     0,   338,   339,   340,     0,
       0,   341,   342,     0,   344,     0,   346,   347,   348,   349,
     350,   351,   352,   353,   354,   355,   356,   357,   358,     0,
       0,     0,     0,   359,   360,   361,     0,   363,   364,   365,
     366,   367,   368,     0,   369,   370,   371,   372,   373,   374,
     375,   376,     0,   377,   378,   379,   380,   381,   382,   383,
     384,     0,   385,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,     0,   399,   400,     0,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,     0,     0,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,     0,   429,
     430,   431,   432,     0,   433,   434,   435,   436,   437,   438,
     439,   440,   441,   442,   443,   444,   445,   531,   447,   448,
     449,     0,   450,   451,     0,   452,     0,   454,   455,   456,
     457,   458,     0,   459,   460,     0,   461,     0,   462,   463,
     464,   465,   466,     0,   467,   468,   469,   470,   471,   472,
     473,   474,     0,     0,   475,   476,   477,     0,   478,   479,
     480,   481,     0,   482,   483,   484,   485,   486,   487,   488,
       0,   489,     0,   491,   492,   493,   494,   495,   496,   497,
       0,     0,   498,     0,     0,   499,   500,   501,   502,   503,
     504,   505,   506,   507,   508,   509,   510,   511,   512,   513,
     514,   515,   516,   517,   518,   519,   528,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   113,   114,   115,   116,   117,
     118,   119,   120,   121,     0,   122,   123,   124,     0,     0,
       0,     0,     0,   125,     0,     0,     0,     0,   127,   128,
       0,   129,   130,   131,     0,   133,   134,   135,   136,   137,
       0,   139,   140,     0,   141,   142,   143,   144,   145,   146,
       0,     0,   147,   148,   149,   150,   151,     0,   152,   153,
     154,   155,   156,     0,     0,     0,   158,   159,   160,   161,
     162,   163,     0,   165,   166,   167,     0,   168,   169,   170,
     171,   172,   173,     0,     0,   175,   176,   177,   178,   179,
     180,   181,   182,   183,   184,   185,   186,   187,     0,   188,
       0,   189,   190,   191,   192,   193,   194,     0,   195,   196,
     197,   198,   199,   200,     0,     0,   201,   202,   203,   204,
     205,   206,   207,     0,   208,   209,   210,     0,   211,   212,
     213,     0,   214,   215,   216,   217,   218,   219,   220,   221,
     222,   223,   224,     0,   225,     0,   226,   227,   228,   229,
       0,   230,     0,   231,     0,     0,     0,   234,   235,   529,
       0,   238,     0,   239,   240,     0,     0,   241,   242,   243,
     244,     0,   245,   246,   247,   248,   249,  2258,   251,     0,
     253,   254,   255,   256,     0,   257,   258,   259,   260,   261,
     262,   263,     0,   264,     0,   266,   267,   268,   269,   270,
     271,   272,   273,     0,   274,     0,   275,     0,     0,   278,
       0,   280,   281,   282,   283,   284,   285,   286,     0,     0,
     287,     0,   289,     0,     0,   291,   292,   293,   294,   295,
     296,   297,   298,   530,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,     0,   320,   321,   322,   323,   324,   325,
       0,   326,   327,     0,   329,     0,   330,   331,   332,   333,
     334,   335,     0,   336,   337,     0,     0,   338,   339,   340,
       0,     0,   341,   342,     0,   344,     0,   346,   347,   348,
     349,   350,   351,   352,   353,   354,   355,   356,   357,   358,
       0,     0,     0,     0,   359,   360,   361,     0,   363,   364,
     365,   366,   367,   368,     0,   369,   370,   371,   372,   373,
     374,   375,   376,     0,   377,   378,   379,   380,   381,   382,
     383,   384,     0,   385,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,     0,   399,   400,
       0,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,     0,     0,   417,   418,
     419,   420,   421,   422,   423,   424,   425,   426,   427,     0,
     429,   430,   431,   432,     0,   433,   434,   435,   436,   437,
     438,   439,   440,   441,   442,   443,   444,   445,   531,   447,
     448,   449,     0,   450,   451,     0,   452,     0,   454,   455,
     456,   457,   458,     0,   459,   460,     0,   461,     0,   462,
     463,   464,   465,   466,     0,   467,   468,   469,   470,   471,
     472,   473,   474,     0,     0,   475,   476,   477,     0,   478,
     479,   480,   481,     0,   482,   483,   484,   485,   486,   487,
     488,     0,   489,     0,   491,   492,   493,   494,   495,   496,
     497,     0,     0,   498,     0,     0,   499,   500,   501,   502,
     503,   504,   505,   506,   507,   508,   509,   510,   511,   512,
     513,   514,   515,   516,   517,   518,   519,   528,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   113,   114,   115,   116,
     117,   118,   119,   120,   121,     0,   122,   123,   124,     0,
       0,     0,     0,     0,   125,     0,     0,     0,     0,   127,
     128,     0,   129,   130,   131,     0,   133,   134,   135,   136,
     137,     0,   139,   140,     0,   141,   142,   143,   144,   145,
     146,     0,     0,   147,   148,   149,   150,   151,     0,   152,
     153,   154,   155,   156,     0,     0,     0,   158,   159,   160,
     161,   162,   163,     0,   165,   166,   167,     0,   168,   169,
     170,   171,   172,   173,     0,     0,   175,   176,   177,   178,
     179,   180,   181,   182,   183,   184,   185,   186,   187,     0,
     188,     0,   189,   190,   191,   192,   193,   194,     0,   195,
     196,   197,   198,   199,   200,     0,     0,   201,   202,   203,
     204,   205,   206,   207,     0,   208,   209,   210,     0,   211,
     212,   213,     0,   214,   215,   216,   217,   218,   219,   220,
     221,   222,   223,   224,     0,   225,     0,   226,   227,   228,
     229,     0,   230,     0,   231,     0,     0,     0,   234,   235,
     529,     0,   238,     0,   239,   240,     0,     0,   241,   242,
     243,   244,     0,   245,   246,   247,   248,   249,  2273,   251,
       0,   253,   254,   255,   256,     0,   257,   258,   259,   260,
     261,   262,   263,     0,   264,     0,   266,   267,   268,   269,
     270,   271,   272,   273,     0,   274,     0,   275,     0,     0,
     278,     0,   280,   281,   282,   283,   284,   285,   286,     0,
       0,   287,     0,   289,     0,     0,   291,   292,   293,   294,
     295,   296,   297,   298,   530,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,     0,   320,   321,   322,   323,   324,
     325,     0,   326,   327,     0,   329,     0,   330,   331,   332,
     333,   334,   335,     0,   336,   337,     0,     0,   338,   339,
     340,     0,     0,   341,   342,     0,   344,     0,   346,   347,
     348,   349,   350,   351,   352,   353,   354,   355,   356,   357,
     358,     0,     0,     0,     0,   359,   360,   361,     0,   363,
     364,   365,   366,   367,   368,     0,   369,   370,   371,   372,
     373,   374,   375,   376,     0,   377,   378,   379,   380,   381,
     382,   383,   384,     0,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,     0,   399,
     400,     0,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,     0,     0,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
       0,   429,   430,   431,   432,     0,   433,   434,   435,   436,
     437,   438,   439,   440,   441,   442,   443,   444,   445,   531,
     447,   448,   449,     0,   450,   451,     0,   452,     0,   454,
     455,   456,   457,   458,     0,   459,   460,     0,   461,     0,
     462,   463,   464,   465,   466,     0,   467,   468,   469,   470,
     471,   472,   473,   474,     0,     0,   475,   476,   477,     0,
     478,   479,   480,   481,     0,   482,   483,   484,   485,   486,
     487,   488,     0,   489,     0,   491,   492,   493,   494,   495,
     496,   497,     0,     0,   498,     0,     0,   499,   500,   501,
     502,   503,   504,   505,   506,   507,   508,   509,   510,   511,
     512,   513,   514,   515,   516,   517,   518,   519,   837,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   113,   114,   115,
     116,   117,   118,   119,   120,   121,     0,   122,   123,   124,
       0,     0,     0,   838,     0,   125,     0,     0,     0,   839,
     127,   128,     0,   129,   130,   131,   840,   133,   134,   135,
       0,   841,   842,   843,   844,     0,   141,   142,   143,   144,
     145,   146,     0,     0,   147,   148,   845,   846,   151,     0,
     152,   153,   154,   155,     0,     0,   847,     0,   848,   159,
     160,   161,   162,   163,   849,   165,   166,   167,     0,   168,
     169,   170,   171,   172,   173,     0,   850,   175,   176,   177,
     178,   179,   180,   181,   182,   183,   184,   851,   852,   187,
       0,   188,     0,   189,   190,   191,   192,   193,   194,     0,
     195,   196,   197,   198,   199,   200,     0,     0,   201,   202,
     853,   204,   205,   206,   207,     0,   208,   209,   210,     0,
     211,   212,   213,     0,   214,   215,   216,   217,     0,   219,
     220,   221,   222,   223,     0,     0,   225,     0,   226,   227,
     854,   229,     0,   230,     0,   231,   855,     0,   856,   234,
     235,     0,   857,   238,     0,   239,   240,     0,     0,     0,
       0,   243,   244,     0,   245,   246,   247,   248,   249,   858,
     251,   859,   253,   254,   255,   256,     0,   257,   258,   259,
     260,   261,   262,   263,     0,   264,   860,     0,   267,   268,
     269,   270,   271,   861,   862,     0,   863,     0,   275,   864,
     865,   278,   866,   280,   281,   282,   283,   284,   285,   286,
       0,     0,   287,   867,   289,   868,     0,   291,   292,   293,
     294,   295,   296,   297,   298,   869,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   870,   871,   872,   321,   322,   323,
     324,     0,     0,   326,   327,   873,   329,     0,     0,   331,
     874,   333,   334,   335,     0,   336,   337,     0,     0,   338,
     339,   340,     0,     0,   341,     0,   875,   344,   876,     0,
     347,   348,   349,   350,   351,   352,   353,   354,   355,   356,
     357,   358,     0,     0,     0,     0,   359,   360,     0,   877,
     363,   364,     0,   366,   367,   368,     0,   369,   370,   371,
     372,   373,   374,   375,   376,     0,   377,   378,   379,   878,
     381,   382,   383,   384,     0,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,     0,
     399,   400,   879,   402,   403,   404,   880,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,     0,   881,
     417,   418,   419,   420,   421,   422,   882,   424,   425,   426,
     427,   883,   429,   430,   884,   432,     0,   433,   434,   435,
     436,   437,   438,   439,   440,   441,   442,   443,   444,   445,
     885,   447,     0,   449,     0,   450,   451,     0,   452,   886,
     454,   455,   456,   457,   458,     0,   887,   888,     0,   461,
       0,   462,   463,     0,   465,     0,     0,   467,   468,   889,
     470,   471,   472,   473,   474,   890,     0,   475,   476,   477,
       0,   478,   479,   480,   481,     0,   482,   483,   484,   485,
     486,     0,   891,     0,   489,   892,   491,   492,   493,   494,
     495,   496,   497,     0,     0,   498,     0,     0,   499,   500,
     501,   502,   503,   504,   837,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   516,   517,   518,   519,     0,
       0,     0,     0,   113,   114,   115,   116,   117,   118,   119,
     120,   121,     0,   122,   123,   124,     0,     0,     0,   838,
       0,   125,     0,     0,     0,   839,   127,   128,     0,   129,
     130,   131,   840,   133,   134,   135,     0,   841,   842,   843,
     844,     0,   141,   142,   143,   144,   145,   146,     0,     0,
     147,   148,   845,   846,   151,     0,   152,   153,   154,   155,
       0,     0,   847,     0,   848,   159,   160,   161,   162,   163,
     849,   165,   166,   167,     0,   168,   169,   170,   171,   172,
     173,     0,   850,   175,   176,   177,   178,   179,   180,   181,
     182,   183,   184,   851,   852,   187,     0,   188,     0,   189,
     190,   191,   192,   193,   194,     0,   195,   196,   197,   198,
     199,   200,     0,     0,   201,   202,   853,   204,   205,   206,
     207,     0,   208,   209,   210,     0,   211,   212,   213,     0,
     214,   215,   216,   217,     0,   219,   220,   221,   222,   223,
       0,     0,   225,     0,   226,   227,   854,   229,     0,   230,
       0,   231,   855,     0,   856,   234,   235,     0,   857,   238,
       0,   239,   240,     0,     0,     0,     0,   243,   244,     0,
     245,   246,   247,   248,   249,   250,   251,   859,   253,   254,
     255,   256,     0,   257,   258,   259,   260,   261,   262,   263,
       0,   264,   860,     0,   267,   268,   269,   270,   271,   861,
     862,     0,   863,     0,   275,   864,   865,   278,   866,   280,
     281,   282,   283,   284,   285,   286,     0,     0,   287,   867,
     289,   868,     0,   291,   292,   293,   294,   295,   296,   297,
     298,   869,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     870,   871,   872,   321,   322,   323,   324,     0,     0,   326,
     327,   873,   329,     0,     0,   331,   874,   333,   334,   335,
       0,   336,   337,     0,     0,   338,   339,   340,     0,     0,
     341,     0,   875,   344,   876,     0,   347,   348,   349,   350,
     351,   352,   353,   354,   355,   356,   357,   358,     0,     0,
       0,     0,   359,   360,     0,   877,   363,   364,     0,   366,
     367,   368,     0,   369,   370,   371,   372,   373,   374,   375,
     376,     0,   377,   378,   379,   878,   381,   382,   383,   384,
       0,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,     0,   399,   400,   879,   402,
     403,   404,   880,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,     0,   881,   417,   418,   419,   420,
     421,   422,   882,   424,   425,   426,   427,   883,   429,   430,
     884,   432,     0,   433,   434,   435,   436,   437,   438,   439,
     440,   441,   442,   443,   444,   445,   885,   447,     0,   449,
       0,   450,   451,     0,   452,   886,   454,   455,   456,   457,
     458,     0,   887,   888,     0,   461,     0,   462,   463,     0,
     465,     0,     0,   467,   468,   889,   470,   471,   472,   473,
     474,   890,     0,   475,   476,   477,     0,   478,   479,   480,
     481,     0,   482,   483,   484,   485,   486,     0,   891,     0,
     489,   892,   491,   492,   493,   494,   495,   496,   497,     0,
       0,   498,     0,     0,   499,   500,   501,   502,   503,   504,
     837,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   516,   517,   518,   519,     0,     0,     0,     0,   113,
     114,   115,   116,   117,   118,   119,   120,   121,     0,   122,
     123,   124,     0,     0,     0,   838,     0,   125,     0,     0,
       0,   839,   127,   128,     0,   129,   130,   131,   840,   133,
     134,   135,     0,   841,   842,   843,   844,     0,   141,   142,
     143,   144,   145,   146,     0,     0,   147,   148,   845,   846,
     151,     0,   152,   153,   154,   155,     0,     0,   847,     0,
     848,   159,   160,   161,   162,   163,   849,   165,   166,   167,
       0,   168,   169,   170,   171,   172,   173,     0,   850,   175,
     176,   177,   178,   179,   180,   181,   182,   183,   184,   851,
     852,   187,     0,   188,     0,   189,   190,   191,   192,   193,
     194,     0,   195,   196,   197,   198,   199,   200,     0,     0,
     201,   202,   853,   204,   205,   206,   207,     0,   208,   209,
     210,     0,  1879,   212,   213,     0,   214,   215,   216,   217,
       0,   219,   220,   221,   222,   223,     0,     0,   225,     0,
     226,   227,   854,   229,     0,   230,     0,   231,   855,     0,
     856,   234,   235,     0,   857,   238,     0,   239,   240,     0,
       0,     0,     0,   243,   244,     0,   245,   246,   247,   248,
     249,   250,   251,   859,   253,   254,   255,   256,     0,   257,
     258,   259,   260,   261,   262,   263,     0,   264,   860,     0,
     267,   268,   269,   270,   271,   861,   862,     0,   863,     0,
     275,   864,   865,   278,   866,   280,   281,   282,   283,   284,
     285,   286,     0,     0,   287,   867,   289,   868,     0,   291,
     292,   293,   294,   295,   296,   297,   298,   869,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   870,   871,   872,   321,
     322,   323,   324,     0,     0,   326,   327,   873,   329,     0,
       0,   331,   874,   333,   334,   335,     0,   336,   337,     0,
       0,   338,   339,   340,     0,     0,   341,     0,   875,   344,
     876,     0,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,     0,     0,     0,     0,   359,   360,
       0,   877,   363,   364,     0,   366,   367,   368,     0,   369,
     370,   371,   372,   373,   374,   375,   376,     0,   377,   378,
     379,   878,   381,   382,   383,   384,     0,   385,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,     0,   399,   400,   879,   402,   403,   404,   880,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
       0,   881,   417,   418,   419,   420,   421,   422,   882,   424,
     425,   426,   427,   883,   429,   430,   884,   432,     0,   433,
     434,   435,   436,   437,   438,   439,   440,   441,   442,   443,
     444,   445,   885,   447,     0,   449,     0,   450,   451,     0,
     452,   886,   454,   455,   456,   457,   458,     0,   887,   888,
       0,   461,     0,   462,   463,     0,   465,     0,     0,   467,
     468,   889,   470,   471,   472,   473,   474,   890,     0,   475,
     476,   477,     0,   478,   479,   480,   481,     0,   482,   483,
     484,   485,   486,     0,   891,     0,   489,   892,   491,   492,
     493,   494,   495,   496,   497,     0,     0,   498,     0,     0,
     499,   500,   501,   502,   503,   504,  2973,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   516,   517,   518,
     519,     0,     0,     0,     0,   113,   114,   115,   116,   117,
     118,   119,   120,   121,     0,   122,   123,   124,     0,     0,
       0,  2974,     0,   125,     0,     0,     0,  2975,   127,   128,
       0,   129,   130,   131,  2976,   133,   134,   135,     0,   841,
    2977,   843,   844,     0,   141,   142,   143,   144,   145,   146,
       0,     0,   147,   148,   845,   846,   151,     0,   152,   153,
     154,   155,     0,     0,  2978,     0,  2979,   159,   160,   161,
     162,   163,  2980,   165,   166,   167,     0,   168,   169,   170,
     171,   172,   173,     0,  2981,   175,   176,   177,   178,   179,
     180,   181,   182,   183,   184,   851,   852,   187,     0,   188,
       0,   189,   190,   191,   192,   193,   194,     0,   195,   196,
     197,   198,   199,   200,     0,     0,   201,   202,   853,   204,
     205,   206,   207,     0,   208,   209,   210,     0,   211,   212,
     213,     0,   214,   215,   216,   217,     0,   219,   220,   221,
     222,   223,     0,     0,   225,     0,   226,   227,   854,   229,
       0,   230,     0,   231,  2982,     0,  2983,   234,   235,  2984,
    2985,   238,     0,   239,   240,     0,     0,     0,     0,   243,
     244,     0,   245,   246,   247,   248,   249,   250,   251,  2986,
     253,   254,   255,   256,     0,   257,   258,   259,   260,   261,
     262,   263,     0,   264,  2987,     0,   267,   268,   269,   270,
     271,   861,   862,     0,   863,     0,   275,  2988,  2989,   278,
    2990,   280,   281,   282,   283,   284,   285,   286,     0,     0,
     287,  2991,   289,  2992,     0,   291,   292,   293,   294,   295,
     296,   297,   298,  3269,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   870,  2994,   872,   321,   322,   323,   324,     0,
       0,   326,   327,  2996,   329,     0,     0,   331,   874,   333,
     334,   335,     0,   336,   337,     0,     0,   338,   339,   340,
       0,     0,   341,     0,  2998,   344,  2999,     0,   347,   348,
     349,   350,   351,   352,   353,   354,   355,   356,   357,   358,
       0,     0,     0,     0,   359,   360,     0,  3000,   363,   364,
       0,   366,   367,   368,     0,   369,   370,   371,   372,   373,
     374,   375,   376,     0,   377,   378,   379,   878,   381,   382,
     383,   384,     0,   385,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,     0,   399,   400,
    3001,   402,   403,   404,     0,   406,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,     0,  3002,   417,   418,
     419,   420,   421,   422,     0,   424,   425,   426,   427,  3004,
     429,   430,   884,   432,     0,   433,   434,   435,   436,   437,
     438,   439,   440,   441,   442,   443,   444,   445,  3270,   447,
       0,   449,     0,   450,   451,     0,   452,  3006,   454,   455,
     456,   457,   458,     0,   887,   888,     0,   461,     0,   462,
     463,     0,   465,     0,     0,   467,   468,  3007,   470,   471,
     472,   473,   474,     0,     0,   475,   476,   477,     0,   478,
     479,   480,   481,     0,   482,   483,   484,   485,   486,     0,
     891,     0,   489,  3009,   491,   492,   493,   494,   495,   496,
     497,     0,     0,   498,     0,     0,   499,   500,   501,   502,
     503,   504,   528,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   516,   517,   518,   519,     0,     0,     0,
       0,   113,   114,   115,   116,   117,   118,   119,   120,   121,
       0,   122,   123,   124,     0,     0,     0,     0,     0,   125,
       0,     0,     0,     0,   127,   128,     0,   129,   130,   131,
       0,   133,   134,   135,   136,   137,     0,   139,   140,     0,
     141,   142,   143,   144,   145,   146,     0,     0,   147,   148,
     149,   150,   151,     0,   152,   153,   154,   155,   156,     0,
       0,     0,   158,   159,   160,   161,   162,   163,     0,   165,
     166,   167,     0,   168,   169,   170,   171,   172,   173,     0,
       0,   175,   176,   177,   178,   179,   180,   181,   182,   183,
     184,   185,   186,   187,     0,   188,     0,   189,   190,   191,
     192,   193,   194,     0,   195,   196,   197,   198,   199,   200,
       0,     0,   201,   202,   203,   204,   205,   206,   207,     0,
     208,   209,   210,     0,   211,   212,   213,     0,   214,   215,
     216,   217,   218,   219,   220,   221,   222,   223,   224,     0,
     225,     0,   226,   227,   228,   229,     0,   230,     0,   231,
       0,     0,     0,   234,   235,   529,     0,   238,     0,   239,
     240,     0,     0,   241,   242,   243,   244,     0,   245,   246,
     247,   248,   249,   250,   251,     0,   253,   254,   255,   256,
       0,   257,   258,   259,   260,   261,   262,   263,     0,   264,
       0,   266,   267,   268,   269,   270,   271,   272,   273,     0,
     274,     0,   275,     0,     0,   278,     0,   280,   281,   282,
     283,   284,   285,   286,     0,     0,   287,     0,   289,     0,
       0,   291,   292,   293,   294,   295,   296,   297,   298,   530,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,     0,
     320,   321,   322,   323,   324,   325,     0,   326,   327,     0,
     329,     0,   330,   331,   332,   333,   334,   335,     0,   336,
     337,     0,     0,   338,   339,   340,     0,     0,   341,   342,
       0,   344,     0,   346,   347,   348,   349,   350,   351,   352,
       0,   354,   355,   356,   357,   358,     0,     0,     0,     0,
     359,   360,   361,     0,   363,   364,   365,   366,   367,   368,
       0,   369,   370,   371,   372,   373,   374,   375,   376,     0,
     377,     0,   379,   380,   381,   382,   383,   384,     0,   385,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,     0,   399,   400,     0,   402,   403,   404,
     405,     0,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,     0,     0,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,   427,     0,   429,   430,   431,   432,
       0,   433,   434,   435,   436,   437,   438,   439,   440,   441,
     442,   443,   444,   445,   531,   447,   448,   449,     0,   450,
     451,     0,   452,     0,   454,   455,   456,   457,   458,     0,
     459,   460,     0,   461,     0,   462,   463,   464,   465,   466,
       0,   467,   468,   469,   470,   471,   472,   473,   474,     0,
       0,   475,   476,   477,     0,   478,   479,   480,   481,     0,
     482,   483,   484,   485,   486,   487,   488,     0,   489,     0,
     491,   492,   493,   494,   495,   496,   497,     0,     0,   498,
       0,     0,   499,   500,   501,   502,   503,   504,   505,   506,
     507,   508,   509,   510,   511,   512,   513,   514,   515,   516,
     517,   518,   519,   837,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   113,   114,   115,   116,   117,   118,   119,   120,
     121,     0,   122,   123,   124,     0,     0,     0,   838,     0,
     125,     0,     0,     0,   839,   127,   128,     0,   129,   130,
     131,   840,   133,   134,   135,     0,   841,   842,   843,   844,
       0,   141,   142,   143,   144,   145,   146,     0,     0,   147,
     148,   845,   846,   151,     0,   152,   153,   154,   155,     0,
       0,   847,     0,   848,   159,   160,   161,   162,   163,   849,
     165,   166,   167,     0,   168,   169,   170,   171,   172,   173,
       0,   850,   175,   176,   177,   178,   179,   180,   181,   182,
     183,   184,   851,   852,   187,     0,   188,     0,   189,   190,
     191,   192,   193,   194,     0,   195,   196,   197,   198,   199,
     200,     0,     0,   201,   202,   853,   204,   205,   206,   207,
       0,   208,   209,   210,     0,   211,   212,   213,     0,   214,
     215,   216,   217,     0,   219,   220,   221,   222,   223,     0,
       0,   225,     0,   226,   227,   854,   229,     0,   230,     0,
     231,   855,     0,   856,   234,   235,     0,   857,   238,     0,
     239,   240,     0,     0,     0,     0,   243,   244,     0,   245,
     246,   247,   248,   249,   250,   251,   859,   253,   254,   255,
     256,     0,   257,   258,   259,   260,   261,   262,   263,     0,
     264,   860,     0,   267,   268,   269,   270,   271,   861,   862,
       0,   863,     0,   275,   864,   865,   278,   866,   280,   281,
     282,   283,   284,   285,   286,     0,     0,   287,   867,   289,
     868,     0,   291,   292,   293,   294,   295,   296,   297,   298,
       0,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   870,
     871,   872,   321,   322,   323,   324,     0,     0,   326,   327,
     873,   329,     0,     0,   331,   874,   333,   334,   335,     0,
     336,   337,     0,     0,   338,   339,   340,     0,     0,   341,
       0,   875,   344,   876,     0,   347,   348,   349,   350,   351,
     352,   353,   354,   355,   356,   357,   358,     0,     0,     0,
       0,   359,   360,     0,   877,   363,   364,     0,   366,   367,
     368,     0,   369,   370,   371,   372,   373,   374,   375,   376,
       0,   377,   378,   379,   878,   381,   382,   383,   384,     0,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,     0,   399,   400,   879,   402,   403,
     404,     0,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,     0,   881,   417,   418,   419,   420,   421,
     422,     0,   424,   425,   426,   427,   883,   429,   430,   884,
     432,     0,   433,   434,   435,   436,   437,   438,   439,   440,
     441,   442,   443,   444,   445,     0,   447,     0,   449,     0,
     450,   451,     0,   452,   886,   454,   455,   456,   457,   458,
       0,   887,   888,     0,   461,     0,   462,   463,     0,   465,
       0,     0,   467,   468,   889,   470,   471,   472,   473,   474,
       0,     0,   475,   476,   477,     0,   478,   479,   480,   481,
       0,   482,   483,   484,   485,   486,     0,   891,     0,   489,
     892,   491,   492,   493,   494,   495,   496,   497,     0,     0,
     498,     0,     0,   499,   500,   501,   502,   503,   504,   708,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     516,   517,   518,   519,     0,     0,     0,     0,   113,   114,
     115,   116,     0,   118,   119,   120,   121,     0,   122,   123,
     124,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   127,   128,     0,   129,   130,   131,     0,   133,   134,
     135,   709,   710,     0,   711,   712,     0,   141,   142,   143,
     144,   145,   146,     0,     0,   147,   148,   713,   714,   151,
       0,   152,   153,   154,   155,   715,     0,     0,     0,     0,
     159,   160,   161,   162,   163,     0,   165,   166,   167,     0,
     168,   169,   170,   171,   172,     0,     0,     0,   175,   176,
     177,   178,   179,   180,   181,   182,   183,   184,   716,   717,
     187,     0,   188,     0,   189,   190,   191,   192,   193,   194,
       0,   195,     0,   197,   198,   199,   200,     0,     0,   201,
     202,   203,   204,   205,     0,     0,     0,   208,   209,   210,
       0,   211,   212,   213,     0,   214,   215,   216,   217,   718,
     219,   220,   221,   222,   223,   719,     0,   225,     0,   226,
     227,   720,   229,     0,   230,     0,   231,     0,     0,     0,
     234,   235,   721,     0,   238,     0,   239,     0,     0,     0,
     722,   723,     0,   244,     0,   245,   246,   247,   248,   249,
     250,   251,     0,   253,   254,   255,   256,     0,   257,   258,
     259,   260,   261,   262,   263,     0,   264,     0,   724,   267,
     268,   269,   270,   271,   725,   726,     0,   727,     0,   275,
       0,     0,   278,     0,   280,     0,   282,   283,   284,   285,
     286,     0,     0,   287,     0,   289,     0,     0,   291,   292,
     293,   294,   295,   296,   297,   298,   728,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   729,     0,   730,   321,   322,
     323,     0,   731,     0,   326,   327,     0,   329,     0,   732,
     331,   733,   333,   334,   335,     0,   336,   337,     0,     0,
     338,   339,   340,     0,     0,   341,   734,     0,   344,     0,
     735,   347,   348,   349,   350,   351,   352,   353,   354,   355,
       0,     0,   358,     0,     0,     0,     0,   359,   360,   736,
       0,   363,   364,   737,   366,   367,   368,     0,   369,   370,
     371,   372,   373,     0,     0,   376,     0,   377,   378,   379,
     738,   381,   382,   383,   384,     0,   385,   386,   387,     0,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
       0,   399,   400,     0,   402,   403,   404,   739,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,     0,
       0,   417,   418,   419,   420,   421,   422,   740,   424,   425,
       0,   427,     0,     0,   430,   741,   432,     0,     0,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   742,   447,   743,   449,     0,   450,   451,     0,   452,
       0,   454,   455,   456,   457,   458,     0,   744,   745,     0,
       0,     0,   462,   463,   746,   465,   747,     0,   467,   468,
     748,   470,   471,   472,   473,   474,     0,     0,   475,   476,
     477,     0,   478,   479,   480,   481,     0,   482,   483,   484,
     485,   486,  1542,   750,     0,   489,     0,   491,     0,   493,
     494,   495,   496,     0,     0,     0,   498,     0,     0,   499,
     500,   501,   502,   503,   504,   751,   752,   753,   754,   755,
     756,   757,   758,   759,   760,   761,   516,   517,   518,   519,
       1,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     2,     0,     3,     4,     0,     0,     1,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     2,     0,
       0,     0,     6,     0,     0,     0,     0,     0,     0,     0,
       0,     7,     0,     0,     0,     0,     0,     0,     0,     6,
       0,     0,     0,     8,     0,     0,     0,     0,     7,     0,
       0,     0,     0,     0,     9,     0,     0,     0,     0,     0,
       8,     0,     0,     0,     0,     0,    10,     0,   588,     0,
       0,     9,     0,     0,     0,     0,     0,     0,     0,    12,
       0,     0,     0,    10,     0,   588,     0,     0,     0,     0,
       0,     0,     0,    13,     0,     0,    12,     0,     0,     0,
       0,     0,     0,     0,   589,     0,     0,     0,     0,     0,
      13,     0,    16,     0,     0,     0,     0,     0,     0,     0,
      17,   589,     0,     0,     0,     0,     0,     0,     0,    16,
       0,     0,     0,     0,     0,     0,    20,    17,     0,     0,
      21,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    20,     0,     0,     0,    21,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    23,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    23,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    24,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    24,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    25,    26,    27,     0,     0,
       0,     0,     0,    28,     0,     0,    29,     0,     0,     0,
       0,     0,    25,    26,    27,     0,     0,     0,     0,     0,
      28,     0,     0,    29,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    30,     0,
       0,     0,     0,     0,     0,     0,     0,    31,     0,     0,
       0,     0,     0,     0,     0,    30,     0,     0,     0,     0,
       0,    32,     0,     0,    31,     0,     0,     0,    33,     0,
       0,     0,     0,    34,     0,     0,     0,     0,    32,     0,
       0,     0,     0,     0,    35,    33,     0,     0,     0,     0,
      34,     0,     0,     0,     0,     0,    36,     0,     0,     0,
      37,    35,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    36,     0,     0,     0,    37,     0,     0,
      38,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    39,     0,     0,     0,    38,     0,    41,
       0,     0,     0,     0,    42,     0,     0,     0,   590,     0,
      39,     0,     0,     0,     0,     0,    41,     0,     0,     0,
      43,    42,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    43,     0,     0,
       0,     0,     0,     0,    44,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   591,     0,
       0,    44,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   689
};

static const yytype_int16 yycheck[] =
{
       7,     8,   584,   807,   795,    12,   520,     0,   652,   803,
      17,  1443,    85,   591,    21,  1557,    23,    24,     0,    45,
     678,    28,    29,    30,     0,   783,    33,  1274,     0,    36,
      37,     0,     0,    40,  1261,   583,    43,    44,   882,  1013,
      21,     0,  1013,     0,     0,    87,    88,  1033,   812,   581,
      18,  1746,   914,   888,  1702,   917,  1262,    45,     7,   702,
    1075,  1196,  2144,  2204,  1241,  1603,  1628,  1133,   921,  2269,
      18,  1236,    21,  2147,    37,  1202,  2706,     0,  2704,  2214,
      87,    88,  1238,   590,    89,  2672,  2175,  2672,  2177,     7,
    1393,  1848,    99,   591,  2316,  2317,  2318,   104,   105,   106,
     107,   108,  2265,    21,    89,     0,    87,    88,  1655,  1656,
    1266,   648,  1022,    36,  1163,  1448,   653,  1022,  2727,  1168,
     795,  1022,   797,     0,   799,     0,     0,     0,     0,     0,
      12,   645,     0,     0,  2141,    17,     0,     0,    87,    88,
       0,  2203,    44,  1129,   107,  1492,  2516,    29,     0,     0,
       0,  2329,  2720,     0,     0,     0,     0,     0,    24,     0,
    2582,    43,    44,  3164,  2628,  3060,   609,     9,  2632,    87,
      88,    57,    33,    21,  3044,     9,    99,   845,   846,  1706,
     694,  1866,  1764,  1013,  2347,     5,    13,    14,  1863,    17,
       5,     5,  1766,  3063,   778,    65,     5,  1022,    13,    14,
    1998,     5,     5,  1174,   872,     5,     5,   778,     5,     5,
       0,     5,     5,     9,    13,    14,    13,    14,    40,    13,
      14,     5,     0,   105,     5,     5,     5,   117,   773,    13,
      14,  2340,    13,    14,     5,    17,  2031,    47,     9,    87,
      88,     5,     5,     5,  1074,   172,     5,     5,  1042,  2044,
       5,   140,     5,     5,     5,  2336,  2419,  2420,    47,  2422,
     173,  3273,  2490,    13,    14,     4,   122,   193,     9,    11,
       9,   229,  2948,    65,    16,  2902,   183,   107,   224,  1250,
     172,  3021,  1253,  1254,   293,    11,  1121,   290,     3,    15,
      16,    47,    11,    47,     3,     4,     5,    16,   248,  3459,
       9,    74,   298,    11,  3160,    82,   292,    55,    16,   230,
     100,   148,     0,  2586,  2587,    82,    93,  1147,   248,   230,
      35,    36,   100,  2848,   248,  2850,    93,     4,    65,    48,
      18,   298,     9,    21,   120,  1436,   138,   173,  2560,   248,
      48,   275,  3163,   316,  1174,  1360,  1176,  1177,    36,   166,
    3150,    17,  3152,   274,  1369,  3617,    80,    45,    31,   131,
     195,    80,   195,   274,  3500,    11,    39,  3368,  3369,    15,
      16,   120,    80,  2024,  2025,  2026,  3563,  1020,    31,    13,
      14,  1025,     8,   220,  2473,  1179,    11,   107,  2642,    15,
      16,   118,    43,    19,    20,    21,   169,   115,    31,    87,
      88,    89,    48,   342,  3760,  1249,   115,  2164,    38,   383,
      31,    99,   108,   316,  1968,  3749,  3003,   164,    39,    31,
    1250,   115,   343,  1253,  1254,  3055,   376,    39,  1096,  1097,
     164,  3057,  3302,   372,    80,  1013,  3066,  1572,   108,    42,
     460,  2641,   149,  3603,  1112,  1999,  3606,   515,   196,   117,
      42,    66,   376,   201,   522,    80,   171,  1523,   173,    74,
      11,   298,  3818,    31,    15,    16,   215,   376,  1603,   372,
     197,    39,   393,   124,   310,  2638,  3810,  2640,   131,    11,
      65,  2616,   393,  2737,    16,  1128,    11,   234,   371,  1026,
     108,    16,   240,   363,  3756,   202,  1074,    48,   131,   193,
     520,  1038,   292,   436,   454,  2512,   433,  1014,  3695,   326,
    2048,   520,   221,  2571,   292,   287,    48,   520,  3374,  1620,
    2578,  2579,  2580,    48,   454,   358,   361,  3327,   524,    80,
     454,  3271,   539,   167,   520,   244,   457,   544,   472,   273,
     547,   433,   515,   173,  3365,   454,   457,   554,    80,  1852,
     524,   353,   485,   460,   274,    80,  3232,   524,   331,    26,
    3696,   397,  3087,  3458,   282,  1427,   524,  2795,  1226,  1227,
     520,   363,   462,   176,   364,  3251,   583,   584,   585,  2141,
    1927,   211,   509,   277,   176,   531,   364,  1230,  3748,   478,
     520,  3218,   422,  2756,   520,   522,   520,   227,  1176,  1177,
    2873,   643,  1668,   591,   460,   409,   410,   520,   238,   419,
    1440,   520,   515,   450,   282,   538,  1420,   624,   625,   626,
    1134,  1451,   590,  1453,  2733,   632,   363,   634,  1793,   244,
     419,  2429,  2179,  1463,   520,  2716,   643,   520,  2220,  3640,
     647,   648,  1400,   591,  1228,   652,   653,  2221,   396,   469,
    1480,  2213,  3664,   394,   524,   643,   433,  1228,  1203,   666,
     667,   668,   643,   419,  2349,   419,   433,  2342,   294,   511,
     512,   457,   554,   680,   681,   484,   683,  1883,   451,   278,
    2207,  1511,  1512,   632,   512,   519,  3273,   692,  3273,  1704,
     697,  2486,   482,   520,   643,  1942,   703,   506,   520,   108,
     520,   689,   584,   585,   482,   520,   520,   692,   457,  3604,
     783,   520,   527,   527,   632,    40,  3284,   520,   518,  2919,
     520,   520,   522,   520,   520,   643,   520,   520,   401,   484,
     512,   521,   524,   523,   697,  3605,   520,   367,   422,   520,
     520,   520,  1808,   521,  1810,   523,  3168,  1190,  2926,   520,
    2053,   506,   700,  3123,   384,   470,   520,   520,   520,  3223,
     626,   520,   520,   770,  3228,   520,   773,   520,   520,   520,
     520,  3772,   511,   512,   516,   768,  1444,  1445,   363,   104,
     401,   106,   394,   108,   632,   520,   768,   513,   514,   515,
     516,   131,   768,  1436,   518,   643,   768,   516,   522,   768,
     768,   703,   511,   512,    75,   482,   813,  2865,   516,   768,
     773,   768,   768,   820,   821,   822,   823,  3039,  2165,   680,
     681,   703,   683,  2474,  2475,  2476,  2477,  3457,   835,   506,
       0,    26,    11,   401,   511,   512,    15,    16,  2900,     5,
    2559,   507,  2561,   392,   274,   768,   512,   314,   315,   509,
     538,  1822,   518,   162,   520,  1649,  1650,  1651,   457,   523,
     520,  1832,   120,   118,  1835,   248,  3475,   513,   514,   515,
     516,    11,   162,   768,   470,    65,  2011,  1892,   136,  3042,
    1412,   507,   508,   509,   106,   511,   512,   513,   514,   515,
     516,   768,   524,   768,   768,   768,   768,   768,   267,  2906,
     768,   768,   590,   591,   768,   768,  3474,   337,   768,  2451,
    1442,   281,    61,  2048,  1496,    90,   768,   768,   768,  1577,
    1563,   768,   768,   768,   768,   768,  1458,   768,  1506,  2686,
     397,  2688,   241,  1763,  1764,  1593,  3362,   277,  3364,   524,
      80,    34,   197,  1491,   632,   216,  1494,   287,   412,   482,
    2512,   241,  1500,   128,   323,   643,   521,     5,  2093,   524,
     511,   512,   513,   514,   515,   516,    38,   434,    61,  1943,
    2019,   520,  1943,   506,   520,  3601,  1619,  1620,  2525,   511,
     512,   513,   514,   515,   516,  3615,  1629,   248,   513,   514,
     515,   516,  1822,   376,    27,   460,    27,  1023,  1505,   289,
      33,   689,  1832,   150,   692,  1835,   172,  1049,  1506,  1652,
     477,   475,  1922,  1923,  1056,   358,  2319,  1922,  1025,  1026,
    1921,  1028,   484,   172,  1031,   509,   117,  1818,   398,   484,
    1037,  1038,   254,  1570,  3234,   181,  1043,  1551,   522,    27,
     262,  1903,  1049,  2376,   506,    33,  1014,  3526,  3527,  1056,
    2383,   506,  2385,   174,  2181,   520,   203,  2184,   520,  1066,
    2779,   362,  3688,  1925,   205,   520,  1073,  1929,  1049,   277,
    1932,   454,   330,  3214,   282,  1056,  1083,  3664,  3504,  3664,
     768,  1934,  2839,    82,   274,    74,  2292,  1917,  1918,   390,
     484,  1849,  1850,  1851,    93,    23,    24,  1922,  1923,  1924,
    1049,   173,  3184,   136,   194,   136,  2538,  1056,  2243,  1873,
    2672,   253,   506,  1943,  3188,   376,  1791,   519,   209,   314,
     315,   191,   192,  1671,  1131,     3,   115,  1659,   249,   531,
       3,  1049,     5,   341,   309,   277,    27,   520,  1056,   211,
    3619,  1129,    33,  1818,   519,  2301,    82,   131,   136,   260,
     261,   317,   318,   319,   421,   227,   531,    93,   515,   162,
     255,  1043,  1837,  3793,   167,   522,   238,  1842,   317,   318,
     319,  1178,  1198,   363,  1181,    11,   160,   680,   681,    11,
     683,  2358,   110,   274,  1066,  2171,   277,  2364,  1195,  1196,
     260,   261,   459,   454,   131,  1562,  1203,  1564,  1565,   394,
     390,  1049,   397,   508,  1209,  1210,   178,  1212,  1056,  2275,
    2276,  2277,    48,   518,   539,   347,    48,   383,  1225,   544,
     508,  2051,   547,   160,  1209,  1210,   347,  1212,  1235,  1236,
     518,   422,   148,  3433,   383,  2773,   109,   110,   241,   434,
    1203,  1248,  2953,   518,    80,   136,   162,   522,    80,  1131,
    2961,   167,   427,   385,  3834,   178,   422,  1900,  1265,   520,
    3840,    31,  1269,   296,   385,   296,  1273,  1799,   521,   380,
     381,   524,   244,   422,   439,    55,   511,  1950,   513,   248,
    1828,  1954,   477,   525,  1957,  1833,   289,   529,   277,   455,
     422,   526,   527,   282,     4,   367,  3518,   473,   282,     9,
     466,   422,  1265,   287,   220,   518,   455,   520,   296,   634,
     380,   381,   384,  1195,  1196,    85,   482,   466,   191,   192,
    3402,   244,    27,   356,    94,   241,  1014,   360,    33,   360,
    3404,   362,   511,   512,   513,   514,   515,   516,  2770,   181,
     506,   473,   331,   379,  2906,   282,   116,  2413,  2178,  1052,
     287,   520,   473,  2488,   520,  1058,  2491,   390,     4,   390,
     349,  1049,   518,     9,  2007,  1943,   522,     8,  1056,   520,
      11,   520,   360,   289,    15,    16,    71,    72,    19,    20,
      21,  1913,   298,   256,   257,   258,   259,   260,   261,  2219,
    2220,   264,   265,  1047,     4,  2827,    37,   177,  1405,     9,
    1407,   520,   390,  1091,   376,   296,  1413,   376,   174,   518,
    2272,  1065,  2274,   522,  1102,  1069,   196,  1424,  2176,    27,
      27,   201,   426,   193,   428,    33,    33,  2654,  1960,  1411,
     463,   136,   162,  2407,   167,  1411,   206,   167,     4,  1411,
    1972,  1129,  1411,     9,   521,   770,  2568,   524,  1455,  2655,
    2572,  2573,  2574,  1460,   426,    27,   428,   441,     4,   520,
     240,    33,   451,     9,   521,   356,   520,   524,   452,   360,
    2002,   460,  2699,  2051,  2639,   463,  2653,  2009,  2655,   666,
     667,   668,   454,   249,  1491,   454,  2129,  1494,   813,  1496,
    1497,   205,  1499,  1500,   347,   820,   821,   822,   823,   390,
      13,    14,  1057,   426,   441,   428,  1061,   380,   381,   520,
     835,   241,   518,  2045,   520,   452,   522,  2049,   852,  1526,
     520,  1209,  1210,  2055,  1212,   426,   520,   428,   136,   136,
    2516,   454,   385,   172,   450,  2339,   521,  1505,   115,   524,
     874,  1583,  1549,  1550,  1586,  2380,  2381,  2377,  1555,  1591,
    1557,   520,  1594,   521,    13,    14,   524,  1599,  1506,   289,
    3208,    13,    14,  1570,   136,  1572,  1573,   521,     6,   422,
     524,     9,   463,  1580,    13,    14,  1583,   911,    16,  1586,
    3780,   347,   521,   224,  1591,   524,   521,  1594,   520,   524,
    2248,   296,  1599,    31,  1601,   172,  1603,    35,  3355,   520,
    3357,   521,  1583,  2669,   524,  1586,   520,  2673,  1557,  2675,
    1591,  3700,   520,  1594,  1496,  1497,   396,  1499,  1599,   385,
     473,  1628,  3757,  1616,  3759,   172,  1633,   500,   501,   521,
      13,    14,   524,   521,  1583,   506,   524,  1586,   408,  1557,
     521,   411,  1591,   524,  3733,  1594,    13,    14,  1616,  3081,
    1599,   356,  2275,   294,  2277,   360,   422,  1616,   513,  1616,
    1616,    74,   376,   521,  1671,  1583,   524,    80,  1586,   521,
     520,   385,   524,  1591,   521,   521,  1594,   524,   524,   522,
      93,  1599,  3817,   521,   521,   390,   524,   524,   296,   296,
    1572,   521,   521,  1616,   524,   524,   624,   521,   626,   503,
     524,  2672,   115,  1028,   117,    13,    14,   473,   422,  1557,
     482,  3273,   484,  1720,   226,  1722,  3805,  1724,   292,  1601,
     183,  1603,   521,   186,   296,   524,   503,  3816,   305,   657,
     522,   521,  1739,  1740,   524,  1583,   521,   171,  1586,   524,
     317,   318,   319,  1591,  1749,  1752,  1594,   521,   356,   356,
     524,  1599,   360,   360,   682,  2920,   524,   521,   463,   473,
     524,  2967,   521,   520,  1749,   524,  1100,   426,   521,   428,
    1777,   524,  1779,  3421,   521,  1723,  3318,   524,    13,    14,
      98,  1115,   390,   390,   356,   252,  1793,  1794,   360,   521,
      13,    14,   524,  3040,    13,    14,   209,  1804,  1805,  1806,
    1807,   521,  1809,   426,   524,   428,   383,   172,  1815,   521,
    1817,   297,   524,  2607,  2638,   521,  2640,  1505,   390,  2351,
     521,  1828,  1829,   524,   521,  2840,  1833,  1834,   775,  2407,
     777,  1838,  1839,  1840,  1841,   521,  1843,  1844,   524,    61,
     521,   521,  2672,   524,   524,   422,   521,   521,   521,   524,
     524,   524,   520,  2401,   172,   463,   463,   226,  1865,  1866,
    1867,  1868,    13,    14,   277,  1872,   507,   508,   509,   282,
     511,   512,   513,   514,   515,   516,    13,    14,   455,  1886,
      13,    14,    13,    14,    13,    14,   423,  2749,   503,   466,
     153,   463,   356,   581,   153,  1583,   153,  1779,  1586,    13,
      14,    13,    14,  1591,   153,   482,  1594,    13,    14,  3557,
    1235,  1599,  1794,   131,    13,    14,    13,    14,   331,    13,
      14,    42,  1804,  1248,  1806,   521,  2730,  1809,  1616,   506,
     520,    42,   277,  1815,  2692,  1817,   349,    13,    14,    13,
      14,    42,   160,   520,  1269,   473,  2710,  1829,    13,    14,
      89,    62,  1834,    13,    14,   153,  1838,  1839,  1840,  1841,
     486,  1843,  1844,   371,   372,  1888,  1973,  1974,  1975,  1976,
    1977,  1978,  2630,   469,  1981,  1982,  1983,  1984,  1985,  1986,
    1987,  1988,  1989,  1990,   371,   372,  1674,  2958,   264,   265,
    2032,   380,   381,   371,   372,   106,  2038,   371,   372,   317,
     318,   319,   520,  3698,  2011,   327,   131,  3702,   314,   315,
     465,   466,   178,  1176,  1177,     8,  2023,   520,    11,   153,
     520,  3563,    15,    16,    41,  2032,    19,    20,    21,   520,
     172,  2038,   520,   520,   153,   160,  2043,   522,   451,   205,
      27,  2048,   292,   153,    37,   153,    33,   460,   433,   520,
     172,  2032,   520,   424,  3281,    42,   521,  2038,   520,   277,
     520,  1749,   222,   227,   282,   383,   520,   301,   227,   287,
     227,   520,   299,    42,  3616,    62,   239,   520,   244,     5,
       5,     5,  1407,  2032,   520,  1013,  2093,   520,  1413,  2038,
    2097,    42,   520,   204,  1022,  2102,   520,     5,   520,  3794,
       5,  3116,  3664,  3077,   422,   520,     5,   149,  2970,  2971,
    3096,    62,     9,   520,  2032,  3547,   303,  2124,  2125,   106,
    2038,   109,   110,   483,   442,   524,   104,   524,  2958,  2011,
     521,   297,    42,  2963,  2141,   222,   390,   455,   167,   289,
    2672,  2129,   167,   254,   287,  1073,  1074,    61,   466,   136,
     239,   262,   277,  3695,   520,   106,   433,   282,   520,  3003,
      93,  2043,   287,   274,   482,   524,  2048,  2174,   433,    61,
      61,  2197,   433,   433,   267,   317,   318,   319,   178,  2186,
    3010,  3011,   531,   482,  2032,   433,   153,   100,   506,   277,
    2038,  1879,  2199,  2174,   882,   306,  2203,   277,    42,   520,
    1888,   520,   520,   191,   192,   205,   277,  3342,  3455,   277,
    1138,  2093,     3,  2745,     9,   520,  3648,   204,  2199,  1147,
    2102,    41,   431,   441,   431,  2174,   518,   518,   433,   433,
     433,   224,   433,   522,   452,    13,  2243,  1165,   521,  2246,
     521,   383,  2249,   172,   244,   524,  1174,   521,  1176,  1177,
    2199,   362,  2800,   204,   521,  1580,  2174,   521,  2265,   521,
     426,   227,   428,   521,   520,   479,   227,   254,   256,   257,
     258,   259,   260,   261,   385,   262,   264,   265,   284,   284,
     422,  2199,   520,   520,   524,   451,   478,   274,   454,    11,
     519,   358,   524,   524,   520,   406,   431,   297,   531,   282,
     528,   294,  3273,   254,  2186,   520,   178,   433,   183,   296,
     163,   262,   172,   455,   524,   521,   441,   220,   509,   306,
     460,   267,  2329,   274,   466,   524,  2174,   452,  2335,   393,
     230,   293,   316,   205,   316,   524,   524,   183,   338,   222,
    2347,  2348,  2349,  2350,  2032,   521,   520,   277,   230,   230,
    2038,  2199,  2334,   298,  2361,   306,  2363,  2345,  2334,  2366,
     336,  2243,  2334,   290,  2371,  2334,   473,  2249,  3434,   356,
     423,   520,   244,   360,   520,   362,   376,  2384,   520,   153,
     153,   153,   482,   153,    42,    12,   292,   277,  1076,   521,
      17,  2939,   380,   381,  2401,   518,   292,  1722,   385,  1724,
     503,   521,    29,   390,   521,   503,   521,    42,   521,    61,
     521,   362,  2419,  2420,  1739,  2422,    43,    44,   172,   406,
      11,    42,   167,   183,   520,   297,   426,   167,   428,   521,
     521,   521,  3262,  3263,   385,   521,   521,  2969,   520,   520,
     524,  2129,   521,  3273,  2451,   445,   519,   522,  3252,   521,
     528,   451,  1777,   503,   454,   406,   172,   156,   521,  2147,
     521,  3667,   520,   433,  2471,   520,   520,   253,   520,   520,
     479,     9,  2479,  2480,  2481,  2163,   463,   479,   105,  2361,
    2553,  2488,    42,  2490,  2491,     8,  2174,    61,    11,   524,
    2497,   509,    15,    16,   505,   293,    19,    20,    21,  3077,
     293,   457,  2451,   524,   376,  2512,   247,    61,    61,   267,
     433,  2199,   500,   501,   507,   508,   509,   520,   511,   512,
     513,   514,   515,   516,   277,   153,   205,   153,  2516,   153,
     521,   433,   520,  2451,   284,  2542,  2543,   284,   433,   433,
    1865,  1866,  1867,  1868,   433,   520,    42,  1872,   358,   520,
     524,   290,    42,   521,   426,   292,   428,   153,  2584,  2585,
    2548,  1249,   482,   521,   519,  2591,   519,   282,   172,   521,
     109,   110,  2490,   445,  2567,    61,   520,   520,   188,   451,
     521,   521,   454,   521,   167,    80,  3344,   144,   201,   520,
    2597,   172,   531,   148,  1522,  2602,   302,   525,  1526,  2567,
    3666,  2608,   521,  2451,   521,   521,  2488,   162,  2567,  2491,
    2567,  2567,   167,   520,    83,  2497,   364,  2624,   293,   520,
     524,  2628,   183,   521,   153,  2632,  2633,  2634,   521,  3423,
     176,  2638,  2639,  2640,   521,  2642,   524,  3185,   445,    42,
     520,   520,  2630,  3175,  2567,   521,  3632,   521,   521,   581,
     521,    42,   191,   192,  2661,   524,  2663,  2345,   520,    86,
     460,   519,   172,   524,   520,   220,   521,   481,   201,  2676,
    2677,  2678,  2679,  2680,  2681,  2682,  2683,  2684,  2685,   521,
     521,  2604,  3340,   521,   524,  3328,   241,  3330,   521,   521,
     521,   519,   521,  3664,   511,   519,     9,  2704,  2023,  3343,
     303,  2708,  3346,   466,  2711,   520,   292,   509,    61,   521,
     521,   482,   521,   521,  2721,   207,   115,   256,   257,   258,
     259,   260,   261,    42,  1412,   264,   265,  2709,   520,   230,
    2737,    88,   194,  2709,   289,   282,   521,  2709,   282,   522,
    2709,  3273,   522,   298,   433,   522,  2628,   522,   509,  2756,
    2632,  2633,  2634,   522,  1442,  1443,   522,   522,   522,   433,
    2767,  3565,    42,   522,   519,    42,  2773,  3525,   519,   277,
    1458,   294,   524,  2780,  2781,  2782,  2783,   520,   522,  2661,
     522,   107,  2705,  3574,  1712,  2792,   522,   522,  2795,   522,
     522,   522,  2799,  2800,  2676,  2677,  2678,  2679,  2680,  2681,
    2682,  2683,  2684,  2685,  2792,  2847,   482,    42,  2815,  2732,
     522,   522,  2735,   522,   522,   522,   292,   522,   522,   522,
     522,   522,   522,     9,   581,   522,   522,   522,  2516,   522,
     522,   522,   520,   357,  3664,   520,   520,   524,  2845,   521,
    2847,   380,   381,   340,     8,    61,   524,    11,   521,   201,
     194,    15,    16,   525,   524,    19,    20,    21,    11,   431,
    2548,  3519,   282,   433,   524,   465,  2847,   172,    91,   349,
     521,   520,    42,  2880,  2881,  2882,  2883,  2795,   153,  2567,
     521,   122,   521,   337,   231,   153,    42,   521,   372,  2896,
     372,  2773,    42,  2900,    42,   450,   521,   520,  2847,  2906,
     520,   460,   524,   520,   311,    99,   508,   172,  2896,   503,
     282,   520,   433,  2920,   520,   252,  2604,  2799,   460,  2926,
     193,    31,   201,   445,   295,   520,    80,   554,     8,  2847,
      74,    11,  2939,  2940,  2941,    15,    16,    74,     9,   521,
    2947,   521,  2630,   520,   374,   521,   519,    61,   519,   528,
     882,   172,   521,   520,    93,   521,   132,  2964,   585,   148,
     509,   500,   501,   518,   274,   292,   521,   522,    48,    42,
     445,  1659,   423,   162,    42,    55,    83,   520,   167,   295,
     295,   521,   465,  3497,   507,   508,   509,   521,   511,   512,
     513,   514,   515,   516,   520,   207,   521,   292,   292,  2847,
      80,   521,   520,   148,   520,   390,   521,   120,   525,   457,
    2335,   520,   317,   318,   319,  1943,   529,  2705,    25,   524,
     371,  1949,   402,  2348,  2349,  2350,    37,    27,   521,   230,
     126,   220,   520,    33,   768,  3042,  2656,   201,  2363,  2270,
     349,  2366,    42,  2963,  2732,  1816,  2371,  2735,  1724,    14,
    3057,  2333,   241,  2669,  2413,  3077,  2701,   625,  2940,  1031,
     224,  3580,    62,  3743,  3071,  3613,     8,  3245,  3668,  3677,
      12,  3736,  3304,  3080,  1236,    17,   703,  2263,   383,  2276,
    2721,    23,    24,  3666,  2648,  3675,    28,    29,    30,  2675,
    3663,    33,  2260,  1408,    36,    37,  2609,   177,    40,  3106,
     289,    43,    44,    45,  2792,  3112,   106,  1491,  3096,   298,
    1442,  1799,  1934,  3120,  1506,  3495,   196,   422,  3425,  2608,
    3616,   201,  3559,  2051,  3779,   882,     8,  3462,  1526,    11,
     294,  3838,  3664,    15,    16,  3058,   136,    19,    20,    21,
    3147,  3842,  3290,  3843,  1076,  3685,  3820,  3810,  3790,  3841,
     455,  3557,   631,  2584,  2479,  2480,  2481,    99,  2196,  2847,
     240,   466,   104,   105,   106,   107,   108,  2197,  3375,  3176,
    3177,  3178,  3179,  3180,  3181,  3182,  3528,   482,  3185,  3186,
    3187,  3159,  3771,  2591,  3191,  3772,  2567,  3194,  2246,  1048,
    3197,  3198,  3199,  3200,  3201,  3202,  3203,  3204,  3205,  3206,
    1195,   506,  2212,  1048,   204,  1788,  1219,  2472,  2896,  3625,
    1218,  2229,  1752,  3506,   294,   520,  3223,  3332,  1787,    21,
    1221,  3228,  2199,  2795,  2043,  1913,  3120,   643,   632,  1026,
    3112,  2451,  2450,   115,  2497,  3266,  1460,  3510,  3120,  1943,
    1022,  1022,  1174,  1022,  3509,  3711,  1022,  3254,  2102,  3831,
    2510,  2213,  2065,  1578,   254,  2104,  2051,  2523,  2889,    99,
      -1,   450,   262,  3289,    -1,  1723,    -1,  3274,  3275,    -1,
      -1,    -1,  1960,    -1,   274,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  3290,  1972,    -1,    -1,    -1,  3295,    -1,
    3297,    -1,    -1,    -1,  3301,    -1,   296,    -1,    -1,  2624,
      -1,    -1,    -1,    -1,    -1,    -1,   306,    -1,  3315,    -1,
      -1,  3318,    -1,    -1,  2002,     8,   396,  1249,    11,  1076,
      -1,  2009,    15,    16,    -1,    -1,    19,    20,    21,   518,
      -1,  3338,    -1,   522,    -1,  3342,  3343,    -1,    -1,  3346,
      -1,  3223,   224,   507,   508,   509,  3228,   511,   512,   513,
     514,   515,   516,    -1,  2282,    -1,   356,  2045,    -1,    -1,
     360,  2049,   362,  3286,  3287,    -1,    -1,  2055,    -1,  3318,
    3058,    -1,  3254,    -1,    -1,    -1,    -1,    -1,  3385,  3386,
      -1,    -1,    -1,  2708,    -1,   385,  2711,    -1,    -1,    -1,
     390,    -1,  3274,  3275,  3401,    -1,  3403,    -1,  3405,  2327,
    3318,    -1,    -1,    -1,    -1,    -1,   406,    -1,  3096,    -1,
      -1,    -1,   294,    -1,    -1,    -1,    -1,  2345,  3425,  3301,
      -1,    -1,    -1,    -1,   504,  3432,    -1,    -1,    -1,    -1,
      -1,   511,   512,   513,   514,   515,   516,    -1,    -1,    -1,
    3466,    -1,    -1,  3469,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2780,  2781,  2782,  2783,    -1,
    3342,    -1,    -1,   463,    -1,  3472,    -1,    -1,    -1,    -1,
    3318,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2407,
    1412,    -1,    -1,    -1,    -1,    -1,    -1,  2415,    -1,  2417,
      -1,    -1,  1249,  2421,    -1,  2423,    -1,    -1,    -1,  3422,
    3188,  3424,    -1,  3510,    -1,    -1,    -1,    -1,   201,    -1,
    1442,  1443,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  3529,    -1,    -1,    -1,  1458,    -1,    -1,  3536,
      -1,   224,  3539,  3540,    -1,    -1,    -1,    -1,    -1,    -1,
     581,  3548,    -1,  3550,  3551,    -1,    -1,    -1,  3555,    -1,
    3473,    -1,    -1,    -1,    -1,    -1,  3563,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  3489,    -1,  1195,    -1,
    3493,    -1,    -1,    -1,    -1,    -1,    -1,  1549,  1550,    -1,
      -1,    -1,    -1,  1555,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  3599,    -1,  3601,    -1,    -1,   539,  3286,  3287,
      -1,   294,   544,    -1,    -1,   547,  3613,  3614,    -1,  3616,
    3617,    -1,   554,    -1,  3563,    -1,    -1,    -1,  3625,    -1,
      -1,    -1,  2947,    -1,    -1,   507,   508,   509,    -1,   511,
     512,   513,   514,   515,   516,    -1,  3643,  3644,    -1,   581,
    3647,   583,   584,   585,  3651,  3563,    -1,  3654,  3655,   591,
    3657,   172,    -1,  3660,    -1,  1412,    -1,  3683,     8,  3685,
      -1,    11,    -1,  2351,    -1,    15,    16,  3616,    -1,    19,
      20,    21,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  3688,   624,   625,   626,  1442,  1443,    37,  3695,    -1,
      -1,    -1,   634,    -1,    -1,    -1,    -1,    -1,  3616,    -1,
      -1,  1458,    -1,    -1,    -1,   647,   648,    -1,    -1,    -1,
     652,   653,    -1,    -1,    -1,  3563,  3404,    -1,  3725,  3726,
      -1,    -1,  3729,    -1,   666,   667,   668,  1659,  3754,    -1,
      42,    -1,    -1,    -1,  3422,    -1,  3424,    -1,   680,   681,
      -1,   683,  3749,    -1,  2672,    -1,  3695,    -1,    -1,  3756,
      62,    -1,    -1,    -1,    -1,   697,    -1,    -1,  3681,    -1,
      -1,   703,    -1,    -1,  3790,    -1,    -1,    -1,  3616,    -1,
      -1,    -1,  3779,  2701,    -1,    -1,    -1,  3695,  3660,     8,
      -1,    -1,    11,    -1,   305,  3473,    15,    16,    -1,  3815,
      19,    20,    21,    -1,   106,    -1,   317,   318,   319,    -1,
      -1,  3489,    -1,  3810,    -1,  3493,    -1,    -1,  3731,    -1,
      -1,    -1,    -1,    -1,   507,   508,   509,  3824,   511,   512,
     513,   514,   515,   516,  3831,    -1,    -1,    -1,   770,    -1,
      -1,   773,  3839,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   882,    -1,    -1,    -1,    -1,    -1,  3695,    -1,    -1,
    2538,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     802,    -1,   383,   805,   176,    -1,    -1,  1799,    -1,  2797,
    1497,   813,  1499,    -1,   224,    -1,    -1,    -1,   820,   821,
     822,   823,    -1,    -1,    -1,    -1,     0,    -1,    -1,    -1,
      -1,    -1,   204,   835,   581,    -1,    -1,    -1,    -1,    -1,
      -1,   422,  1659,    -1,    -1,    -1,    -1,    -1,   581,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  2851,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   455,    -1,    -1,    -1,    -1,    -1,
     882,    -1,   254,    -1,   294,   466,    -1,    -1,    -1,  3831,
     262,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   482,   274,    -1,    -1,  3290,    -1,    -1,    -1,    -1,
    3295,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   921,
      -1,  1913,    -1,    -1,  2672,   506,   100,    -1,    -1,    -1,
    3315,    -1,    -1,  3681,   306,   224,    -1,    -1,    -1,   520,
      -1,  1973,  1974,  1975,  1976,  1977,  1978,    -1,    -1,  1981,
    1982,  1983,  1984,  1985,  1986,  1987,  1988,  1989,  1990,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1960,    -1,
      -1,    -1,    -1,    -1,   148,  1076,    -1,    -1,    -1,    -1,
    1972,    -1,  1799,  3731,    -1,    -1,    -1,    -1,   162,    -1,
     362,    -1,    -1,   167,    -1,    -1,    -1,  2745,   172,    -1,
      -1,    -1,    -1,    -1,    -1,   294,    -1,    -1,    -1,   183,
    2002,  1013,    -1,   385,   188,    -1,    -1,  2009,    -1,    -1,
      -1,  1023,  2770,  1025,  1026,    -1,  1028,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   406,  1037,  1038,    -1,    -1,    -1,
      -1,  1043,    -1,    -1,    -1,    -1,   220,  3432,     8,    -1,
      -1,    11,    -1,  2045,    -1,    15,    16,  2049,    -1,    19,
      20,    21,    -1,  2055,  1066,    -1,  3054,   241,    -1,    -1,
      -1,  1073,  1074,  1075,  1076,    -1,    -1,    37,    -1,  2827,
      -1,  1083,    -1,    -1,    -1,    -1,    -1,  3472,    48,  3077,
      -1,    -1,  2124,  2125,    -1,    55,  1913,   507,   508,   509,
      -1,   511,   512,   513,   514,   515,   516,  1794,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   289,    -1,  1804,   292,  1806,
      80,    38,  1809,    -1,   298,    -1,    -1,    44,  1815,  1131,
    1817,  1133,    -1,    -1,    -1,   882,    -1,    -1,    -1,    -1,
      -1,    -1,  1829,  1960,    -1,    -1,    -1,  1834,  1249,   882,
      -1,  1838,  1839,  1840,  1841,  1972,  1843,  1844,   152,    -1,
      -1,   152,    -1,  3151,    -1,    -1,   340,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1176,  1177,  1178,    -1,   172,  1181,
      -1,   172,    -1,    -1,   101,  2002,    -1,    -1,    -1,    -1,
     364,    -1,  2009,  1195,  1196,    -1,  1198,    -1,    -1,    -1,
       8,  1203,    -1,    11,    -1,    -1,    -1,    15,    16,    -1,
      -1,    19,    20,    21,  3599,    -1,    -1,   177,   507,   508,
     509,  2969,   511,   512,   513,   514,   515,   516,  2045,    37,
      -1,    -1,  2049,  1235,  1236,    -1,   196,    -1,  2055,    -1,
      -1,   201,    -1,    -1,    -1,    -1,  1248,  1249,   422,    -1,
      -1,    -1,    -1,    -1,    -1,  3003,   173,    -1,    -1,    -1,
      -1,    -1,    -1,  1265,   224,   225,   183,  1269,    -1,    -1,
      -1,  1273,  3657,    -1,    -1,    -1,   450,    -1,    -1,    -1,
     240,    -1,    -1,    -1,    -1,  3273,   460,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   211,    -1,  2880,  2881,  2882,  2883,
      -1,    -1,    -1,    -1,    -1,   479,    -1,   481,   482,    -1,
     227,  1412,    -1,    -1,    -1,    -1,    -1,   277,    -1,    -1,
     280,   238,    -1,   317,   318,   319,   317,   318,   319,  1076,
      -1,    -1,    -1,  3081,   294,    -1,    -1,   297,    -1,    -1,
      -1,  1442,  1443,  1076,   518,    -1,    -1,   521,   522,   523,
      -1,    -1,    -1,   270,    -1,    -1,    -1,  1458,  1360,  2351,
      -1,    -1,    -1,    -1,  3749,    -1,    -1,  1369,    -1,    -1,
      -1,    -1,    -1,     8,    -1,   292,    11,    -1,    -1,    -1,
      15,    16,    17,    18,    19,    20,    21,    -1,    -1,   383,
      -1,  1393,   383,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     317,    -1,    37,  1405,    -1,  1407,    -1,   324,    -1,    -1,
    1412,  1413,    -1,    48,    -1,    -1,   224,    -1,    -1,    -1,
      55,    -1,  1424,    -1,    -1,  3810,    -1,  3175,   422,    -1,
      -1,   422,    -1,    -1,    -1,    -1,   396,    -1,    -1,  3824,
    1442,  1443,    -1,    -1,    -1,    80,    -1,    -1,    -1,    -1,
     367,    -1,    -1,  1455,  3839,    -1,  1458,    -1,  1460,    -1,
      -1,   455,    -1,    -1,   455,    -1,    -1,   384,  3456,    -1,
      -1,    -1,   466,    -1,    -1,   466,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   294,    -1,   482,  1491,
    1492,   482,  1494,    -1,  1496,  1497,    -1,  1499,  1500,  2186,
      -1,    -1,  1249,    -1,  1506,    -1,    -1,    -1,    -1,    -1,
    2542,  2543,   506,    -1,    -1,   506,  1249,    -1,    -1,    -1,
      -1,  1523,    -1,    -1,  1526,  3273,   520,    -1,    -1,   520,
      -1,    -1,    -1,    -1,  2351,    -1,    -1,    -1,   455,    -1,
      57,    -1,   177,   460,   504,    -1,  2538,   507,   508,   509,
      -1,   511,   512,   513,   514,   515,   516,    -1,  1659,    -1,
      -1,   196,    -1,    -1,    -1,    -1,   201,    -1,  1570,    -1,
    1572,  1573,    -1,    -1,    -1,    -1,    -1,    -1,  1580,    -1,
      -1,    -1,    -1,    -1,    -1,   102,    -1,    -1,    -1,   224,
     225,    -1,  3176,  3177,  3178,  3179,  3180,  3181,  3182,  1601,
      -1,  1603,  3186,  3187,   121,   240,    -1,  3191,    -1,    -1,
    3194,    -1,    -1,  3197,  3198,  3199,  3200,  3201,  3202,  3203,
    3204,  3205,  3206,    -1,    -1,   142,  1628,    -1,    -1,   146,
      -1,  1633,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   581,
      -1,    -1,   277,    -1,    -1,   280,  1648,    -1,    -1,    -1,
      -1,   168,    -1,    -1,   171,    -1,    -1,  1659,    -1,   294,
      -1,    -1,   297,    -1,    -1,  1412,  1668,    -1,    -1,  1671,
      -1,    -1,   189,    -1,  2361,    -1,  3664,    -1,    -1,  1412,
    2672,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1442,  1443,    -1,  1799,   507,
     508,   509,  1704,   511,   512,   513,   514,   515,   516,  1442,
    1443,  1458,    -1,    -1,    -1,    -1,    -1,    -1,  1720,  3707,
    1722,  2538,  1724,    -1,    -1,  1458,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2767,    -1,  1739,  1740,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  2745,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   396,    -1,    -1,    -1,   282,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   290,    -1,  1777,    -1,  1779,  2770,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1793,  1794,    -1,   311,    -1,    -1,  1799,    -1,  3547,
      -1,    -1,  1804,  1805,  1806,  1807,  1808,  1809,  1810,    -1,
      -1,    -1,  1913,  1815,    -1,  1817,    -1,  3401,    -1,  3403,
      -1,  3405,    -1,    -1,   341,    -1,  1828,  1829,    -1,    -1,
      -1,  1833,  1834,    -1,    -1,  2827,  1838,  1839,  1840,  1841,
      -1,  1843,  1844,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1852,    -1,    -1,    -1,    -1,  2672,    -1,    -1,    -1,  1960,
      -1,    -1,    -1,  1865,  1866,  1867,  1868,    -1,    -1,   504,
    1872,  1972,   507,   508,   509,    -1,   511,   512,   513,   514,
     515,   516,    -1,    -1,  1886,    -1,    -1,    -1,    -1,     8,
    1892,    -1,    11,    -1,    -1,    -1,   531,    16,    -1,    -1,
    3648,  2002,    -1,    -1,    -1,    -1,    -1,    -1,  2009,  2941,
      -1,  1913,  1659,    -1,    -1,    -1,  3664,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1927,  1659,    -1,  2745,    48,
      -1,    -1,  1934,    -1,    -1,    -1,    55,    -1,    -1,    -1,
     882,  1943,    -1,    -1,  2045,    -1,  2633,  2634,  2049,    -1,
      -1,    -1,  3536,  2770,  2055,  3539,  3540,    -1,  1960,    -1,
      -1,    80,    -1,    -1,  3548,    -1,    -1,    -1,    -1,    -1,
    1972,  3555,    -1,    -1,  2661,    -1,    -1,  2969,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2676,
    2677,  2678,  2679,  2680,  2681,  2682,  2683,  2684,  2685,    -1,
    2002,    -1,     0,    -1,    -1,    -1,    -1,  2009,    -1,  2011,
    2827,  3003,    -1,    -1,    42,    -1,    -1,    -1,    -1,    -1,
      -1,  2023,    -1,    -1,    -1,    -1,    -1,   146,    -1,    -1,
      -1,    -1,    -1,    -1,    62,    -1,    -1,    -1,    -1,    -1,
      -1,  2043,    -1,  2045,    -1,    -1,  2048,  2049,  3080,  2051,
      -1,  2053,  1799,  2055,    -1,    -1,    -1,    -1,   177,  3643,
    3644,    -1,    -1,  3647,    -1,    -1,  1799,  3651,    -1,    -1,
    3654,  3655,    -1,    -1,    -1,    -1,    -1,   196,   106,   107,
      -1,    -1,   201,    -1,    -1,    -1,    -1,   115,    -1,  3081,
      -1,  2093,    -1,    -1,    -1,  2097,    -1,    -1,    -1,    -1,
    2102,    -1,   100,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   240,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1076,    -1,    -1,    -1,    -1,  2141,
      -1,  3725,  3726,    -1,    -1,  3729,     8,    -1,   176,    11,
     148,    -1,  2969,    15,    16,    -1,    -1,    19,    20,    21,
      -1,    -1,    -1,  2165,   162,    -1,  1913,    -1,    -1,   167,
      -1,    -1,    -1,    -1,   172,   294,   204,    -1,    -1,    -1,
    1913,    -1,    -1,  3175,  2186,   183,  3003,    -1,    -1,    -1,
     188,    -1,    -1,    -1,    -1,  2197,    -1,    -1,    -1,    -1,
      -1,  2203,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1960,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   220,    -1,    -1,  1972,   254,  1960,    -1,    -1,
      -1,    -1,    -1,    -1,   262,    -1,    -1,    -1,    -1,  1972,
      -1,  2243,    -1,   241,    -1,    -1,   274,  2249,    -1,   277,
    2351,    -1,    -1,  2940,    -1,  2002,    -1,    -1,    -1,    -1,
      -1,    -1,  2009,  2265,  3081,    -1,    -1,    -1,    -1,  2002,
      -1,     0,    -1,  2275,  2276,  2277,  2009,   396,   306,    -1,
      -1,  3273,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   289,    -1,    -1,   292,    -1,    -1,    -1,  2045,    -1,
     298,    -1,  2049,    -1,    -1,    -1,    -1,  1249,  2055,    -1,
      -1,    -1,  2045,    -1,    -1,    -1,  2049,  2319,    -1,    -1,
      -1,    -1,  2055,    -1,    -1,    -1,    -1,  2329,    -1,    -1,
      -1,    -1,    -1,  2335,   362,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   340,    -1,    -1,  2347,  2348,  2349,  2350,  2351,
      -1,    -1,    -1,  3385,  3386,    -1,    -1,   385,  3175,  2361,
      -1,  2363,   224,    -1,  2366,    -1,   364,    -1,    -1,  2371,
      -1,   100,    -1,    -1,    -1,    -1,    -1,    -1,   406,    -1,
     408,    -1,  2384,   411,    -1,   504,    -1,    -1,    -1,    -1,
      -1,    -1,   511,   512,   513,   514,   515,   516,    -1,  2401,
      -1,    -1,    -1,    -1,    -1,  2407,    -1,    -1,    -1,    -1,
      -1,  2413,    -1,    -1,    -1,    -1,    -1,  2419,  2420,   148,
    2422,    -1,    -1,    -1,   422,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   294,   162,    -1,    -1,    -1,  2538,   167,    -1,
      -1,    -1,    -1,   172,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   450,    -1,   183,    -1,  3273,    -1,    -1,   188,
      -1,    -1,   460,    -1,    -1,    -1,    -1,    -1,    -1,  2471,
    1412,    -1,    -1,    -1,    -1,    -1,    -1,  2479,  2480,  2481,
      -1,   479,    -1,   481,   482,    -1,  2488,    -1,    -1,  2491,
      -1,   220,   520,    -1,    -1,  2497,    -1,  3529,    -1,    -1,
    1442,  1443,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2512,    -1,   241,    -1,    -1,    -1,  1458,    -1,  3550,  3551,
     518,    -1,    -1,   521,   522,   523,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2538,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,     8,    -1,    -1,    11,
      -1,    -1,    -1,    15,    16,  3547,    -1,    19,    20,    21,
     289,    -1,    -1,   292,    -1,    -1,    -1,  3254,    -1,   298,
      -1,  2672,    -1,    -1,    -1,    37,    -1,    -1,    -1,    -1,
      -1,    -1,  2584,  2585,    -1,    -1,    -1,  3274,  3275,  2591,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2602,    -1,    -1,    -1,  2351,    -1,  2608,    -1,    -1,    -1,
      -1,   340,    -1,    -1,  3301,    -1,    -1,    -1,  2351,    -1,
      -1,    -1,  2624,    -1,    -1,    -1,  2628,    -1,    -1,    -1,
    2632,  2633,  2634,    -1,    -1,   364,  2638,  2639,  2640,    -1,
    2642,    -1,    -1,    -1,  2745,   507,   508,   509,    -1,   511,
     512,   513,   514,   515,   516,    -1,  3648,    -1,    -1,  2661,
      -1,  2663,    -1,    -1,    -1,    -1,    -1,  2669,    -1,  2770,
    2672,  2673,  3664,  2675,  2676,  2677,  2678,  2679,  2680,  2681,
    2682,  2683,  2684,  2685,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   422,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2704,    -1,    -1,    -1,  2708,    -1,    -1,  2711,
      38,    -1,    -1,    -1,    -1,    -1,    44,  1659,    -1,  2721,
      -1,   450,    -1,    -1,    -1,    -1,  2827,    -1,    -1,    -1,
    3547,   460,    -1,    -1,    -1,  2737,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  2745,    -1,    -1,    -1,    -1,    -1,    -1,
     479,    -1,   481,   482,  2756,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   224,    -1,    -1,    -1,    -1,    -1,  2770,    -1,
      -1,  2773,    -1,   101,    -1,    -1,    -1,    -1,  2780,  2781,
    2782,  2783,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   518,
      -1,  2538,   521,   522,   523,    -1,    -1,  2799,  2800,    -1,
      -1,    -1,    -1,    -1,    -1,  2538,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  2815,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2827,    -1,    -1,    -1,    -1,
      -1,  3648,   294,    -1,    -1,    -1,    -1,    -1,  2840,    -1,
      -1,    -1,    -1,  2845,    -1,   173,    -1,  3664,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1799,    -1,    -1,
       8,    -1,    -1,    -1,    12,    -1,    -1,    -1,  2969,    17,
      -1,    -1,    -1,    -1,    -1,    23,    24,    -1,    -1,    -1,
      28,    29,    30,   211,    -1,    33,    -1,    -1,    36,    37,
      -1,    -1,    40,    -1,  2896,    43,    44,    -1,  2900,   227,
      -1,    -1,  3003,    -1,  2906,    -1,    -1,    -1,    -1,    -1,
     238,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2920,    -1,
      -1,    -1,    -1,    -1,  2926,  2672,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2939,  2940,  2672,
      24,    -1,   270,    -1,    -1,  2947,    -1,    -1,    -1,    -1,
      -1,    99,    -1,    -1,    -1,    -1,   104,   105,   106,   107,
     108,    -1,  2964,    -1,   292,    -1,    -1,  2969,    -1,    -1,
      -1,  1913,    -1,  3660,    -1,    -1,    -1,    -1,    -1,    -1,
    3081,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   317,
      -1,    -1,    -1,    -1,    -1,    -1,   324,    81,  2745,    -1,
      -1,  3003,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2745,    97,    -1,    -1,    -1,    -1,  1960,    -1,
      -1,    -1,    -1,  2770,    -1,    -1,    -1,    -1,    -1,    -1,
    1972,    -1,    -1,    -1,    -1,    -1,    -1,  2770,    -1,   367,
    3042,    -1,    -1,    -1,    -1,   507,   508,   509,    -1,   511,
     512,   513,   514,   515,   516,  3057,   384,    -1,    -1,    -1,
    2002,    -1,    -1,   147,    -1,    -1,    -1,  2009,    -1,  3071,
      -1,    -1,    -1,   157,  3175,  3077,    -1,    -1,    -1,  3081,
    2827,    -1,    -1,    -1,    -1,   169,    -1,    -1,    -1,    -1,
     174,    -1,    -1,    -1,  2827,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  2045,  3106,    -1,    -1,  2049,    -1,    -1,
    3112,    -1,    -1,  2055,  3116,    -1,    -1,    -1,  3120,    -1,
      -1,   205,    -1,    -1,    -1,    -1,    -1,   455,     8,    -1,
      -1,    11,   460,    -1,    -1,    15,    16,    -1,    -1,    19,
      20,    21,    -1,    -1,    -1,  3147,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  3164,    -1,    -1,   249,    -1,    -1,    48,   253,
      -1,    -1,  3273,  3175,    -1,    55,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  3185,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,     8,    -1,    -1,    11,    -1,    -1,
      80,    15,    16,    17,    18,    19,    20,    21,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  3223,  2969,    37,    -1,    -1,  3228,    38,    -1,    -1,
      -1,    -1,    -1,    44,    48,    -1,  2969,    -1,   322,    -1,
      -1,    55,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  3254,    -1,   338,   339,  3003,    -1,    -1,    -1,
       8,    -1,    -1,    11,    -1,    -1,    80,    15,    16,    -1,
    3003,  3273,  3274,  3275,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  3289,  3290,   373,
     101,    -1,   376,  3295,    -1,  3297,    -1,   177,    -1,  3301,
      48,   385,    -1,    -1,   388,    -1,    -1,    55,    -1,    -1,
      -1,    -1,    -1,  3315,    -1,    -1,   196,    -1,    -1,    -1,
      -1,   201,    38,    -1,   408,    -1,    -1,    -1,    44,    -1,
      -1,    -1,    80,    -1,  3081,    -1,    -1,    -1,   422,    -1,
    3342,  3343,    -1,    -1,  3346,   429,    -1,    -1,  3081,    -1,
      -1,    -1,    -1,    -1,    -1,   439,    -1,    -1,    -1,    -1,
     240,   445,   173,   177,    -1,    -1,  3368,  3369,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   196,    -1,    -1,   101,    -1,   201,    -1,   473,
      -1,   539,    -1,    -1,    -1,    -1,   544,    -1,   146,   547,
     211,    -1,    -1,    -1,    -1,    -1,   554,    -1,    -1,  2351,
     224,   225,    -1,    -1,   294,    -1,   227,    -1,    -1,    -1,
      -1,    -1,    -1,  3425,    -1,    -1,   240,   238,  3175,   177,
    3432,    -1,  3434,   581,    -1,   583,   584,   585,    -1,    -1,
      -1,    -1,  3175,   591,    -1,    -1,  3547,    -1,   196,    -1,
      -1,    -1,    -1,   201,    -1,    -1,    -1,   173,    -1,   270,
      -1,    -1,    -1,   277,  3466,    -1,   280,  3469,    -1,    -1,
    3472,    -1,    -1,    -1,    -1,    -1,   624,   625,   626,    -1,
     294,   292,    -1,   297,    -1,    -1,   634,    -1,    -1,    -1,
      -1,    -1,   240,    -1,    -1,   211,    -1,    -1,    -1,   647,
     648,    -1,    -1,    -1,   652,   653,   317,    -1,  3510,    -1,
      -1,   227,    -1,   324,    -1,    -1,   396,    -1,   666,   667,
     668,    -1,   238,    -1,    -1,    -1,  3273,    -1,    -1,    -1,
      -1,    -1,   680,   681,    -1,   683,    -1,    -1,    -1,    -1,
    3273,    -1,    -1,    -1,    -1,  3547,   294,  3648,    -1,   697,
      -1,    -1,    -1,    -1,   270,   703,   367,    -1,    -1,    -1,
      -1,    -1,    -1,  3664,    -1,    -1,    -1,     8,    -1,    -1,
      11,    -1,    -1,   384,    15,    16,    -1,    -1,    19,    20,
      21,    -1,   396,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2538,  3599,    -1,  3601,
      -1,   317,    -1,    -1,    -1,    -1,    -1,    48,   324,    -1,
      -1,  3613,  3614,    -1,    55,  3617,    -1,    -1,    -1,    -1,
      -1,    -1,   770,  3625,   504,   773,    -1,   507,   508,   509,
      -1,   511,   512,   513,   514,   515,   516,  3639,  3640,    80,
      -1,    -1,    -1,    -1,   455,    -1,  3648,    -1,   396,    -1,
      -1,   367,    -1,    -1,   802,  3657,    -1,   805,  3660,    -1,
      -1,    -1,  3664,    -1,  3666,   813,    -1,    -1,   384,    -1,
      -1,    -1,   820,   821,   822,   823,    -1,    -1,    -1,    -1,
      -1,  3683,    -1,  3685,    -1,    -1,  3688,   835,    -1,    -1,
     504,    -1,    -1,   507,   508,   509,     0,   511,   512,   513,
     514,   515,   516,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     524,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    33,
    2672,    35,    36,    -1,   882,    -1,   177,    -1,    -1,   455,
      -1,    -1,    -1,    -1,    -1,    49,    -1,  3749,    -1,    -1,
      54,    -1,  3754,    -1,  3756,   196,   504,    -1,    -1,    63,
     201,    -1,    -1,   511,   512,   513,   514,   515,   516,  3771,
    3772,    75,    -1,   921,    -1,    -1,    -1,  3779,    -1,    -1,
      -1,    -1,    86,   224,   225,    -1,    -1,    -1,  3790,    -1,
      -1,    -1,    -1,    -1,    98,    -1,   100,    -1,    -1,   240,
    3547,    -1,    -1,  2745,    -1,    -1,    -1,   111,  3810,    -1,
      -1,    -1,    -1,  3815,  3547,    -1,    -1,    -1,    -1,    -1,
      -1,   125,  3824,   127,    -1,    -1,    -1,    -1,  2770,  3831,
      -1,    -1,   136,    -1,    -1,    -1,   277,  3839,    -1,   280,
     144,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   152,    -1,
     154,   155,    -1,   294,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   168,  1013,    -1,    -1,   172,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1025,  1026,    -1,
    1028,    -1,    -1,    -1,    -1,  2827,    -1,    -1,    -1,  1037,
    1038,    -1,    -1,    -1,    -1,  1043,   200,    -1,    -1,    -1,
      -1,  3648,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   216,    -1,    -1,  3648,    -1,  3664,  1066,    -1,
      -1,    -1,    -1,    -1,    -1,  1073,  1074,  1075,  1076,    -1,
      -1,  3664,    -1,    -1,    -1,  1083,    -1,    -1,    -1,   243,
      -1,    -1,    -1,    -1,     8,    -1,    -1,    11,    -1,    -1,
      -1,    15,    16,    -1,    -1,   396,    -1,    -1,    -1,    -1,
       3,    -1,    -1,    -1,    -1,     8,    -1,    -1,    11,    -1,
      -1,    -1,    15,    16,    17,    18,    19,    20,    21,    -1,
      -1,    -1,    -1,  1131,    48,  1133,    -1,    -1,    -1,    -1,
      -1,    55,    -1,    -1,    37,    -1,    -1,    -1,    -1,    42,
      -1,    -1,    -1,    -1,    -1,    48,    -1,    -1,    -1,    -1,
      -1,    -1,    55,   317,   318,   319,    80,    -1,    -1,    -1,
      -1,   325,    -1,    -1,   328,    -1,    -1,  2969,  1176,  1177,
    1178,     8,    -1,  1181,    11,    -1,    -1,    80,    15,    16,
      -1,    -1,    19,    20,    21,    -1,    -1,  1195,  1196,    -1,
      -1,    -1,    -1,    -1,    -1,  1203,   360,    -1,    -1,    -1,
      37,  3003,    -1,   504,    -1,   369,   507,   508,   509,    -1,
     511,   512,   513,   514,   515,   516,    -1,    -1,    -1,   383,
      -1,    -1,   146,    -1,    -1,    -1,   390,  1235,  1236,    -1,
      -1,   395,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1248,  1249,   406,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   177,   418,    -1,    -1,  1265,   422,    -1,
      -1,  1269,    -1,    -1,    -1,  1273,    -1,    -1,    -1,    -1,
      -1,    -1,   196,    -1,   177,    -1,    -1,   201,   442,  3081,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   455,    -1,   196,   458,    -1,    -1,   461,   201,    -1,
      -1,    -1,   466,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   240,    -1,   482,    -1,
      -1,   224,   225,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   240,    -1,    -1,
      -1,    -1,   506,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1360,    -1,    -1,    -1,   520,    -1,    -1,   523,
      -1,  1369,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     294,    -1,    -1,  3175,   277,    -1,    -1,   280,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1393,    -1,   224,    -1,    -1,
      -1,   294,    -1,    -1,   297,    -1,    -1,  1405,    -1,  1407,
      -1,    -1,    -1,    -1,  1412,  1413,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1424,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1442,  1443,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1455,    -1,    -1,
    1458,    -1,  1460,    -1,    -1,    -1,    -1,   294,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,     8,    -1,    -1,    11,
      -1,  3273,   396,    15,    16,    17,    18,    19,    20,    21,
      -1,    -1,    -1,  1491,  1492,    -1,  1494,    -1,  1496,  1497,
      -1,  1499,  1500,   396,    -1,    37,    -1,    -1,  1506,    -1,
      42,    -1,    -1,    -1,    -1,    -1,    48,    -1,    -1,    -1,
      -1,    -1,    -1,    55,    -1,  1523,    -1,    -1,  1526,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    80,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1570,    -1,  1572,  1573,    -1,    -1,    -1,    -1,
      -1,    -1,  1580,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     504,    -1,    -1,    -1,    -1,    -1,    -1,   511,   512,   513,
     514,   515,   516,  1601,    -1,  1603,    -1,    -1,    -1,    -1,
      -1,   504,    -1,    -1,   507,   508,   509,    -1,   511,   512,
     513,   514,   515,   516,    -1,    -1,    -1,    -1,    -1,    -1,
    1628,    -1,    -1,    -1,    -1,  1633,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   177,    -1,    -1,    -1,    -1,
    1648,     8,    -1,    -1,    11,    -1,    -1,    -1,    15,    16,
      -1,  1659,    -1,    -1,   196,    -1,    -1,    -1,    -1,   201,
    1668,    -1,    -1,  1671,    -1,    -1,    -1,    -1,    -1,    -1,
     507,   508,   509,    -1,   511,   512,   513,   514,   515,   516,
      -1,    48,   224,   225,    -1,    -1,    -1,    -1,    55,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1704,    -1,   240,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1720,    80,  1722,    -1,  1724,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1739,  1740,    -1,    -1,   277,    -1,    -1,   280,    -1,
      -1,    -1,    -1,    -1,    -1,  3547,    -1,    -1,    -1,    -1,
      -1,    -1,   294,    -1,    -1,   297,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1777,
      -1,  1779,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   146,
      -1,    -1,    -1,    -1,    -1,  1793,  1794,    -1,    -1,    -1,
      -1,  1799,    -1,    -1,    -1,    -1,  1804,  1805,  1806,  1807,
    1808,  1809,  1810,    -1,    -1,    -1,    -1,  1815,    -1,  1817,
     177,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1828,  1829,    -1,    -1,    -1,  1833,  1834,    -1,    -1,   196,
    1838,  1839,  1840,  1841,   201,  1843,  1844,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1852,    -1,  3648,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   396,    -1,    -1,  1865,  1866,  1867,
    1868,    -1,  3664,    -1,  1872,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   240,    -1,    -1,    -1,    -1,  1886,    -1,
      -1,    -1,     8,    -1,  1892,    11,    -1,    -1,    -1,    15,
      16,    17,    18,    19,    20,    21,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1913,    -1,    -1,    -1,    -1,
      -1,    37,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1927,
      -1,    -1,    48,    -1,    -1,    -1,  1934,   294,     8,    55,
      -1,    11,    -1,    -1,    -1,  1943,    16,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     8,    -1,
      -1,    11,  1960,    -1,    80,    15,    16,    17,    18,    19,
      20,    21,   504,    -1,  1972,   507,   508,   509,    48,   511,
     512,   513,   514,   515,   516,    55,    -1,    37,    -1,   521,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    48,    -1,
      -1,    -1,    -1,    -1,  2002,    55,    -1,    -1,    -1,    -1,
      80,  2009,    -1,  2011,    -1,    -1,    -1,    -1,    -1,    -1,
       8,    -1,    -1,    11,    -1,  2023,    -1,    15,    16,    -1,
      80,    19,    20,    21,    -1,    -1,    -1,    -1,    -1,   396,
      -1,    -1,    -1,    -1,    -1,  2043,    -1,  2045,    -1,    37,
    2048,  2049,    -1,  2051,    -1,  2053,    -1,  2055,    -1,    -1,
      48,   177,    -1,    -1,    -1,    -1,    -1,    55,    -1,  1031,
      -1,     8,    -1,    -1,    11,    -1,   146,    -1,    15,    16,
     196,    -1,    19,    20,    21,   201,    -1,    -1,    -1,    -1,
      -1,    -1,    80,    -1,    -1,  2093,    -1,    -1,    -1,  2097,
      37,    -1,    -1,    -1,  2102,    -1,    -1,   177,   224,   225,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   240,    -1,   196,   177,    -1,    -1,
      -1,   201,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  2141,    -1,    -1,   196,   504,    -1,    -1,
      -1,   201,    -1,    -1,   511,   512,   513,   514,   515,   516,
      -1,   277,    -1,    -1,   280,    -1,    -1,  2165,    -1,    -1,
     240,    -1,    -1,    -1,   224,   225,    -1,    -1,   294,    -1,
      -1,   297,    -1,    -1,    -1,    -1,    -1,    -1,  2186,   177,
     240,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2203,    -1,    -1,   196,    -1,
      -1,    -1,    -1,   201,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   294,    -1,    -1,   277,    -1,    -1,
     280,    -1,    -1,    -1,    -1,    -1,   224,   225,    -1,    -1,
      -1,    -1,    -1,    -1,   294,  2243,    -1,   297,    -1,    -1,
      -1,  2249,   240,    -1,  1216,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1225,    -1,    -1,    -1,  2265,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2275,  2276,  2277,
     396,    -1,    -1,    -1,    -1,    -1,    -1,   224,    -1,   277,
      -1,    -1,   280,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   294,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2319,    -1,    -1,    -1,    -1,   396,    -1,    -1,    -1,
      -1,  2329,     8,    -1,    -1,    11,    -1,  2335,    -1,    15,
      16,    -1,    -1,    19,    20,    21,   396,    -1,    -1,  2347,
    2348,  2349,  2350,  2351,    -1,    -1,    -1,   294,    -1,    -1,
      -1,    37,    -1,  2361,    -1,  2363,    -1,     8,  2366,    -1,
      11,    -1,    -1,  2371,    15,    16,    -1,    -1,    19,    20,
      21,    -1,    -1,    -1,    -1,    -1,  2384,    -1,   504,    -1,
      -1,   507,   508,   509,    -1,   511,   512,   513,   514,   515,
     516,    -1,    -1,  2401,    -1,   521,    -1,    48,   396,  2407,
      -1,    -1,    -1,    -1,    55,  2413,    -1,    -1,    -1,    -1,
      -1,  2419,  2420,    -1,  2422,    -1,    -1,    -1,     8,    -1,
      -1,    11,    -1,    -1,   504,    15,    16,    -1,    -1,    80,
      -1,   511,   512,   513,   514,   515,   516,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   504,    -1,    -1,   507,   508,   509,
      -1,   511,   512,   513,   514,   515,   516,    -1,    48,    -1,
      -1,   521,    -1,  2471,    -1,    55,    -1,    -1,    -1,    -1,
      -1,  2479,  2480,  2481,    -1,    -1,    -1,    -1,    -1,    -1,
    2488,    -1,    -1,  2491,    -1,    -1,    -1,    -1,    -1,  2497,
      80,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2512,    -1,   504,    -1,    -1,   507,
     508,   509,    -1,   511,   512,   513,   514,   515,   516,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   177,    -1,    -1,    -1,
    2538,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   224,    -1,
      -1,    -1,    -1,    -1,    -1,   196,    -1,    -1,    -1,    -1,
     201,    -1,    -1,    -1,    -1,    -1,   146,    -1,    -1,    -1,
     507,   508,   509,    -1,   511,   512,   513,   514,   515,   516,
      -1,    -1,    -1,   224,   225,    -1,    -1,  1549,  1550,    -1,
      -1,    -1,    -1,  1555,    -1,    -1,    -1,   177,    -1,   240,
      -1,    -1,    -1,    -1,  2602,    -1,    -1,    -1,    -1,    -1,
    2608,    -1,    -1,    -1,    -1,    -1,   196,    -1,   294,    -1,
      -1,   201,    -1,    -1,    -1,    -1,  2624,    -1,    -1,    -1,
    2628,    -1,    -1,    -1,  2632,  2633,  2634,    -1,    -1,   280,
    2638,  2639,  2640,    -1,  2642,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   294,    -1,    -1,    -1,    -1,    -1,    -1,
     240,    -1,    -1,  2661,    -1,  2663,    -1,    -1,    -1,    -1,
      -1,  2669,    -1,    -1,  2672,  2673,    -1,  2675,  2676,  2677,
    2678,  2679,  2680,  2681,  2682,  2683,  2684,  2685,    -1,     8,
      -1,    -1,    11,    -1,    -1,    -1,    15,    16,    17,    18,
      19,    20,    21,    -1,    -1,    -1,  2704,    -1,    -1,    -1,
    2708,    -1,    -1,  2711,   294,    -1,    -1,    -1,    37,    -1,
      -1,    -1,    -1,  2721,   702,    -1,    -1,    -1,    -1,    48,
      -1,    -1,    -1,    -1,    -1,    -1,    55,    -1,    -1,  2737,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2745,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   396,    -1,    -1,  2756,    -1,
      -1,    80,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2770,    -1,    -1,  2773,    -1,    -1,    -1,    -1,
      -1,    -1,  2780,  2781,  2782,  2783,    -1,    -1,    -1,    -1,
    1752,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2799,  2800,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   396,  2815,    -1,    -1,
      -1,    -1,    -1,   801,    -1,    -1,    -1,   805,    -1,  2827,
      -1,   507,   508,   509,    -1,   511,   512,   513,   514,   515,
     516,    -1,  2840,    -1,    -1,    -1,    -1,  2845,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   177,    -1,
      -1,    -1,    -1,   504,    -1,    -1,   507,   508,   509,    -1,
     511,   512,   513,   514,   515,   516,    -1,   196,    -1,    -1,
      -1,    -1,   201,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2896,    -1,
      -1,    -1,  2900,    -1,    -1,   224,   225,    -1,  2906,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   240,  2920,    -1,   504,    -1,    -1,    -1,  2926,    -1,
      -1,   511,   512,   513,   514,   515,   516,    -1,    -1,    -1,
      -1,  2939,  2940,   921,    -1,    -1,    -1,    -1,    -1,  2947,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   277,    -1,
      -1,   280,    -1,    -1,    -1,    -1,  2964,    -1,    -1,    -1,
      -1,  2969,    -1,    -1,    -1,   294,    -1,    -1,   297,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  3003,    -1,    -1,    -1,    -1,
      -1,  1973,  1974,  1975,  1976,  1977,  1978,    -1,    -1,  1981,
    1982,  1983,  1984,  1985,  1986,  1987,  1988,  1989,  1990,    -1,
      -1,    -1,    -1,    -1,    -1,     8,    -1,    -1,    11,    -1,
      -1,  1019,  1020,    16,  3042,    -1,    19,    20,    21,  1027,
      -1,    -1,  1030,    -1,    -1,  1033,  1034,  1035,  1036,  3057,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  3071,    -1,    48,    -1,   396,    -1,  3077,
      -1,    -1,    55,  3081,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,     8,    -1,    -1,    11,    -1,  1075,    -1,    15,
      16,    17,    18,    19,    20,    21,    -1,    80,  3106,    -1,
      -1,    -1,    -1,    -1,  3112,    -1,    -1,  1095,  3116,    -1,
      -1,    37,  3120,    -1,    -1,    -1,     8,    -1,    -1,    11,
      -1,    -1,    48,    15,    16,  1113,    -1,    -1,    -1,    55,
      -1,    -1,    -1,    -1,    -1,    -1,  1124,  1125,  1126,  3147,
    1128,  1129,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2124,  2125,    80,    -1,    48,    -1,    -1,    -1,
      -1,    -1,    -1,    55,    -1,    -1,    -1,  3175,    -1,    -1,
      -1,  1159,    -1,    -1,    -1,   504,    -1,  3185,   507,   508,
     509,    -1,   511,   512,   513,   514,   515,   516,    80,    -1,
      -1,    -1,   521,    -1,   177,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   196,    -1,  3223,    -1,    -1,   201,    -1,
    3228,    -1,    -1,  1211,    -1,    -1,    -1,  1215,  1216,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1230,    -1,    -1,    -1,  3254,    -1,    -1,    -1,
      -1,   177,    -1,    -1,   146,    -1,    -1,   240,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  3273,  3274,  3275,    -1,    -1,
     196,    -1,    -1,    -1,  2246,   201,    -1,    -1,    -1,    -1,
      -1,    -1,  3290,     8,    -1,   177,    11,  3295,    -1,  3297,
      -1,    16,    -1,  3301,    19,    20,    21,    -1,   224,   225,
      -1,    -1,    -1,    -1,   196,    -1,    -1,  3315,    -1,   201,
      -1,   294,    37,    -1,   240,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    48,    -1,    -1,    -1,    -1,    -1,     8,
      55,    -1,    11,    -1,  3342,  3343,    -1,    16,  3346,    -1,
      19,    20,    21,    -1,    -1,    -1,    -1,    -1,   240,    -1,
      -1,   277,    -1,    -1,   280,    80,    -1,    -1,    37,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   294,    48,
      -1,   297,  1360,    -1,    -1,     8,    55,    -1,    11,    -1,
      -1,  1369,    15,    16,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    80,   294,    -1,    -1,  1393,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   396,    -1,    48,    -1,  3425,    -1,    -1,
      -1,    -1,    55,    -1,  3432,    -1,  3434,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    80,  1436,    -1,
      -1,    -1,   177,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  3472,    -1,    -1,    -1,    -1,    -1,
     396,   196,    -1,    -1,    -1,    -1,   201,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   177,   224,
     225,    -1,  3510,    -1,   396,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   146,    -1,   240,    -1,   196,    -1,    -1,
      -1,   504,   201,    -1,   507,   508,   509,    -1,   511,   512,
     513,   514,   515,   516,    -1,    -1,    -1,    -1,    -1,  3547,
      -1,  1529,    -1,    -1,   177,   224,   225,    -1,    -1,    -1,
      -1,    -1,   277,    -1,    -1,   280,    -1,    -1,    -1,    -1,
      -1,   240,    -1,   196,    -1,    -1,    -1,    -1,   201,   294,
    2542,  2543,   297,    -1,  1562,  1563,  1564,  1565,   504,    -1,
      -1,   507,   508,   509,    -1,   511,   512,   513,   514,   515,
     516,  3599,    -1,  3601,    -1,   521,    -1,    -1,   277,    -1,
      -1,   280,    -1,    -1,    -1,  3613,  3614,   240,    -1,  3617,
      -1,    -1,   504,    -1,    -1,   294,    -1,  3625,    -1,   511,
     512,   513,   514,   515,   516,  2597,    -1,    -1,    -1,    -1,
      -1,  1619,  1620,    -1,    -1,    -1,  1624,    -1,  1626,    -1,
    3648,  1629,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3657,
      -1,    -1,  3660,    -1,    -1,    -1,  3664,    -1,  3666,    -1,
      -1,   294,    -1,    -1,  1652,    -1,  1654,    -1,    -1,    -1,
      -1,   396,  1660,  1661,  1662,  1663,  1664,  1665,  1666,  1667,
    3688,    -1,    -1,    -1,  1672,  1673,    -1,    -1,    -1,  1677,
      -1,    -1,    -1,  1681,    -1,    -1,  1684,  1685,  1686,  1687,
    1688,  1689,  1690,  1691,  1692,    -1,    -1,  1695,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1704,   396,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1725,    -1,    -1,
      -1,  3749,    -1,    -1,    -1,    -1,    -1,    -1,  3756,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   396,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  3779,    -1,    -1,    -1,  1763,  1764,    -1,  1031,   504,
      -1,    -1,   507,   508,   509,    -1,   511,   512,   513,   514,
     515,   516,    -1,    -1,    -1,  2767,    -1,    -1,    -1,    -1,
      -1,    -1,  3810,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  3824,    -1,    -1,    -1,
    2792,    -1,    -1,  3831,    -1,   504,    -1,    -1,   507,   508,
     509,  3839,   511,   512,   513,   514,   515,   516,    -1,    -1,
      -1,    -1,    -1,    -1,  2816,    -1,    -1,    -1,    -1,    -1,
      -1,     8,    -1,    -1,    11,    -1,    -1,    -1,    -1,    16,
    1848,    -1,    -1,    -1,  1852,    -1,    -1,  1855,  1856,    -1,
      -1,   504,    -1,    -1,    -1,    -1,    -1,    -1,   511,   512,
     513,   514,   515,   516,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    48,    -1,    -1,     8,  1148,    -1,    11,    55,    -1,
      -1,    -1,    16,    -1,  1892,    19,    20,    21,  2880,  2881,
    2882,  2883,  1900,    -1,    -1,    -1,     8,    -1,    -1,    11,
      -1,    -1,    -1,    80,    16,    -1,    -1,    19,    20,    21,
      -1,    -1,    -1,    -1,    48,    -1,    -1,    -1,  1191,    -1,
      -1,    55,    -1,    -1,    -1,    -1,  1934,  1935,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    48,    -1,    -1,    -1,
      -1,    -1,    -1,    55,    -1,    -1,    80,    -1,    -1,  2941,
      -1,    -1,  1225,    -1,    -1,    -1,  1964,  1965,    -1,  1967,
      -1,    -1,    -1,    -1,     8,    -1,    -1,    11,    80,   146,
      -1,    15,    16,    17,    18,    19,    20,    21,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1996,  1997,
      -1,    -1,  2000,    37,    -1,    -1,    -1,    -1,    -1,  2007,
     177,    -1,  1275,    -1,    48,    -1,    -1,    -1,    -1,    -1,
      -1,    55,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   196,
      -1,  2029,    -1,    -1,   201,    -1,  2034,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    80,    -1,    -1,    -1,
      -1,    -1,    -1,   177,    -1,  2053,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2064,    -1,    -1,    -1,
      -1,    -1,   196,   240,    -1,   177,    -1,   201,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   196,    -1,    -1,  2095,  3080,   201,
     224,   225,  2100,  2101,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   240,    -1,    -1,    -1,
      -1,    -1,   224,   225,    -1,    -1,    -1,   294,    -1,    -1,
      -1,  2129,    -1,    -1,    -1,    -1,  1399,    -1,   240,    -1,
      -1,    -1,    -1,   177,    -1,  2143,    -1,    -1,  2146,    -1,
    2148,    -1,    -1,   277,    -1,    -1,   280,    -1,    -1,    -1,
      -1,    -1,   196,    -1,    -1,    -1,  2164,   201,    -1,    -1,
     294,    -1,    -1,  2171,    -1,    -1,    -1,    -1,   280,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     224,   225,   294,    -1,  3176,  3177,  3178,  3179,  3180,  3181,
    3182,    -1,    -1,    -1,  3186,  3187,   240,    -1,    -1,  3191,
      -1,    -1,  3194,    -1,  2212,  3197,  3198,  3199,  3200,  3201,
    3202,  3203,  3204,  3205,  3206,    -1,    -1,    -1,    -1,   396,
      -1,  2229,  2230,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1503,    -1,    -1,   277,    -1,    -1,   280,    -1,    -1,    -1,
      -1,    -1,  1031,    -1,    -1,    -1,    -1,    -1,    -1,  2257,
     294,    -1,    -1,   297,  1527,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   396,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1545,    -1,  1547,    -1,  1549,  1550,    -1,  1552,
      -1,    -1,  1555,    -1,   396,  1558,    -1,    -1,  1561,    -1,
      -1,    -1,    -1,  1566,    -1,    -1,  1569,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2313,    -1,    -1,    -1,    -1,
      -1,  2319,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   504,    -1,    -1,
      -1,    -1,    -1,    -1,   511,   512,   513,   514,   515,   516,
      -1,    -1,    -1,    -1,    -1,    -1,  3338,    -1,    -1,  1622,
      -1,    -1,   396,    -1,  1627,    -1,    -1,  1630,  1631,  1632,
      -1,  2369,    -1,  1636,    -1,    -1,    -1,  1640,    -1,    -1,
     504,    -1,    -1,   507,   508,   509,    -1,   511,   512,   513,
     514,   515,   516,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   504,  3385,  3386,   507,   508,   509,    -1,   511,
     512,   513,   514,   515,   516,    -1,    -1,    -1,    -1,  3401,
      -1,  3403,    -1,  3405,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1701,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1225,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     504,    -1,    -1,   507,   508,   509,    -1,   511,   512,   513,
     514,   515,   516,  1746,    -1,    -1,    -1,   521,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     8,  1762,
      -1,    11,    -1,    -1,  1767,    -1,    16,  2505,    -1,    -1,
      -1,  2509,  2510,    -1,    -1,    -1,    -1,    -1,  2516,    -1,
      -1,  1784,    -1,    -1,    -1,    -1,    -1,    -1,  2526,    -1,
      -1,  2529,    -1,  2531,    -1,    -1,    -1,    -1,    48,    -1,
      -1,  2539,    -1,    -1,    -1,    55,    -1,  3529,    -1,  2547,
    2548,    -1,    -1,    -1,  3536,    -1,  2554,  3539,  3540,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  3548,    -1,  3550,  3551,
      80,     8,    -1,  3555,    11,    -1,    -1,    -1,    15,    16,
      17,    18,    19,    20,    21,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      37,    -1,  2600,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    48,  2610,    -1,    -1,    -1,    -1,    -1,    55,    -1,
      -1,    -1,    -1,    -1,     8,    -1,    -1,    11,    -1,    -1,
      -1,    -1,    16,    -1,    -1,    -1,   146,    -1,    -1,    -1,
      -1,    -1,    -1,    80,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  3643,  3644,    -1,    48,  3647,    -1,   177,    -1,  3651,
      -1,    55,  3654,  3655,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   196,    -1,  2686,    -1,
    2688,   201,    -1,    -1,    -1,    -1,    80,    -1,    -1,  1962,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1970,  1971,    -1,
    1973,  1974,  1975,  1976,  1977,  1978,    -1,    -1,  1981,  1982,
    1983,  1984,  1985,  1986,  1987,  1988,  1989,  1990,  1991,    -1,
     240,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     177,    -1,    -1,  3725,  3726,    -1,    -1,  3729,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   196,
      -1,    -1,   146,    -1,   201,    -1,    -1,    -1,    -1,    -1,
    1549,  1550,    -1,    -1,    -1,    -1,  1555,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   294,    -1,    -1,   224,   225,  2787,
    2788,    -1,    -1,   177,    -1,    -1,    -1,    -1,    -1,     8,
      -1,    -1,    11,   240,  2067,  2068,  2804,    16,    -1,    -1,
      -1,    -1,   196,    -1,    -1,    -1,    -1,   201,  2816,    -1,
      -1,    -1,    -1,  2821,  2822,    -1,    -1,    -1,  2826,    -1,
      -1,    -1,    -1,  2831,    -1,    -1,  2834,  2835,    -1,    48,
     277,  2839,  2840,   280,  2107,  2843,    55,    -1,  2111,  2112,
    2113,  2114,  2115,  2116,  2117,  2118,   240,   294,    -1,    -1,
     297,  2124,  2125,    -1,  2127,  2128,    -1,    -1,    -1,    -1,
      -1,    80,    -1,    -1,    -1,    -1,  2139,    -1,    -1,  2142,
      -1,    -1,    -1,    -1,    -1,    -1,   396,  2150,  2151,  2152,
    2153,  2154,  2155,  2156,  2157,  2158,  2159,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     294,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1700,  2185,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2933,    -1,   146,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   396,
      -1,    -1,  2960,    -1,    -1,    -1,    -1,    -1,   177,    -1,
      -1,    -1,    -1,  1752,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  2246,    -1,    -1,    -1,   196,    -1,    -1,
      -1,    -1,   201,    -1,   504,    -1,    -1,    -1,    -1,    -1,
      -1,   511,   512,   513,   514,   515,   516,    -1,    -1,    -1,
      -1,    -1,   396,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   240,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3046,    -1,
      -1,  2314,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2324,  2325,    -1,    -1,    -1,    -1,   504,    -1,    -1,
     507,   508,   509,    -1,   511,   512,   513,   514,   515,   516,
      -1,    -1,    -1,    -1,   521,   294,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3096,    -1,
      -1,    -1,    -1,    -1,     8,    -1,    -1,    11,    -1,    -1,
      -1,    15,    16,    17,    18,    19,    20,    21,  3116,    -1,
     504,    -1,    -1,    -1,    -1,  3123,    -1,   511,   512,   513,
     514,   515,   516,    37,    -1,    -1,  3134,  3135,    -1,    -1,
    3138,  2404,  3140,    -1,    48,    -1,    -1,    -1,    -1,    -1,
      -1,    55,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  2426,  2427,  2428,    -1,    -1,  2431,  2432,
    2433,  2434,  2435,  2436,    -1,    -1,    80,  2440,  2441,  2442,
    2443,  2444,  2445,  2446,  2447,  2448,  2449,   396,    -1,    -1,
      -1,  2454,  2455,    -1,  1973,  1974,  1975,  1976,  1977,  1978,
      -1,    -1,  1981,  1982,  1983,  1984,  1985,  1986,  1987,  1988,
    1989,  1990,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2482,
      -1,  3219,    -1,    -1,  2487,    -1,    -1,     8,    -1,    -1,
      11,    -1,    -1,    -1,    15,    16,    17,    18,    19,    20,
      21,  2504,    -1,    -1,    -1,  3243,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2517,    -1,    37,  2520,  2521,    -1,
      -1,    -1,    -1,    -1,  2527,  2528,    -1,    48,    -1,    -1,
      -1,    -1,    -1,   177,    55,    -1,    -1,    -1,  2541,  2542,
    2543,  2544,     8,  2546,    -1,    11,    -1,  2550,    -1,    -1,
      16,    -1,   196,    -1,    -1,   504,    -1,   201,    -1,    80,
      -1,    -1,   511,   512,   513,   514,   515,   516,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  3314,    -1,    -1,    -1,
     224,   225,    48,    -1,    24,    -1,    -1,    -1,    -1,    55,
    3328,    -1,  3330,    -1,  3332,    -1,   240,    -1,  3336,    -1,
      -1,    -1,    -1,    -1,    -1,  2124,  2125,    -1,    -1,    -1,
      -1,    -1,  3350,    -1,    80,    -1,    -1,  3355,    -1,  3357,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2635,   277,    -1,    -1,   280,    -1,    -1,    -1,
      -1,    81,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     294,    -1,    -1,   297,    -1,    -1,   177,    97,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   196,    -1,    -1,    -1,    -1,
     201,    -1,    -1,    -1,    -1,     8,    -1,    -1,    11,    -1,
      -1,    -1,    15,    16,    17,    18,    19,    20,    21,    -1,
      -1,  3439,    -1,   224,   225,    -1,    -1,   147,    -1,    -1,
      -1,   177,    -1,    -1,    37,    -1,    -1,   157,    -1,   240,
      -1,    -1,    -1,    -1,    -1,    48,    -1,  2246,    -1,   169,
     196,    -1,    55,  2736,   174,   201,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   396,    -1,    -1,    -1,   277,    80,  3496,   280,
      -1,    -1,    -1,    -1,  2767,   205,    -1,    -1,  3506,    -1,
      -1,    -1,    -1,   294,   240,    -1,   297,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2805,    -1,  2807,    -1,    -1,    -1,  2811,   249,
      -1,    -1,    -1,   253,    -1,    -1,    -1,  2820,    -1,    -1,
    2823,    -1,  2825,    -1,    -1,    -1,  2829,    -1,   294,  2832,
    2833,    -1,    -1,  2836,  2837,    -1,    -1,    -1,    -1,    -1,
      -1,  2844,    -1,  3581,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   177,    -1,    -1,    -1,    -1,    -1,
     504,    -1,    -1,   507,   508,   509,    -1,   511,   512,   513,
     514,   515,   516,   196,    -1,   396,    -1,   521,   201,    -1,
      -1,  2884,   322,    -1,    -1,  2888,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  3632,    -1,    -1,    -1,    -1,   339,
    2903,   224,   225,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   240,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     396,    -1,    -1,   373,    -1,    -1,   376,    -1,  2941,    -1,
      -1,    -1,    -1,    -1,    -1,   385,    -1,    -1,   388,    -1,
      -1,    -1,    -1,    -1,   277,    -1,    -1,   280,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   408,    -1,
      -1,   294,  3710,  3711,   297,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   422,   504,    -1,    -1,   507,   508,   509,   429,
     511,   512,   513,   514,   515,   516,    -1,    -1,    -1,   439,
     521,    -1,    -1,    -1,    -1,   445,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  3760,  2542,  2543,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   473,    -1,    -1,    -1,    -1,   504,    -1,
      -1,    -1,    -1,    -1,    -1,   511,   512,   513,   514,   515,
     516,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     8,
      -1,    -1,    11,    -1,    -1,    -1,    15,    16,    17,    18,
      19,    20,    21,   396,    -1,    -1,  3079,  3080,  2597,    -1,
    3818,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    37,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    48,
      -1,  3104,  3105,    -1,    -1,    -1,    55,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3122,
      -1,    -1,    -1,  3126,    -1,  3128,  3129,  3130,    -1,    -1,
    3133,    80,    -1,  3136,  3137,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  3145,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3171,  3172,
    3173,  3174,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   504,    -1,    -1,   507,   508,   509,    -1,   511,   512,
     513,   514,   515,   516,    -1,    -1,    -1,    -1,   521,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   177,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  3240,    -1,    -1,
      -1,    -1,    -1,  3246,    -1,    -1,    -1,   196,  2767,    -1,
       8,    -1,   201,    11,    -1,    -1,  3259,    15,    16,    17,
      18,    19,    20,    21,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  2792,    -1,   224,   225,    -1,    -1,    37,
      -1,    -1,    -1,    -1,    -1,  3288,    -1,    -1,    -1,    -1,
      48,   240,    -1,    -1,    -1,    -1,    -1,    55,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  3320,    -1,    -1,
      -1,    -1,    80,    -1,    -1,    -1,    -1,    -1,   277,    -1,
      -1,   280,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   294,    -1,    -1,   297,  3352,
    3353,  3354,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2880,  2881,  2882,  2883,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  3377,  3378,  3379,  3380,  3381,  3382,
    3383,    -1,  3385,  3386,    -1,  3388,  3389,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  3398,    -1,  3400,    -1,    -1,
      -1,    -1,    -1,    -1,  3407,  3408,  3409,  3410,  3411,  3412,
    3413,  3414,  3415,  3416,    -1,    -1,    -1,    -1,    -1,   177,
      -1,    -1,  2941,    -1,    -1,  3428,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  3440,   196,    -1,
      -1,    -1,    -1,   201,    -1,    -1,    -1,   396,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   224,   225,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   240,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  3494,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3511,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3521,   277,
      -1,    -1,   280,    -1,    -1,    -1,  3529,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  3537,  3538,   294,    -1,    -1,   297,
      -1,    -1,    -1,    -1,    -1,    -1,  3549,  3550,  3551,  3552,
      -1,  3554,    -1,    -1,    -1,   504,    -1,    -1,   507,   508,
     509,  3080,   511,   512,   513,   514,   515,   516,    -1,    -1,
      -1,    -1,   521,  3576,     8,    -1,    -1,    11,    -1,    -1,
      -1,    15,    16,    17,    18,    19,    20,    21,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    37,    -1,    -1,    -1,    -1,    -1,  3612,
      -1,    -1,    -1,    -1,    48,    -1,    -1,    -1,    -1,    -1,
      -1,    55,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  3637,    -1,    -1,    -1,   396,  3642,
      -1,    -1,  3645,  3646,    -1,    -1,    80,  3650,    -1,  3652,
    3653,    -1,    -1,  3656,    -1,    -1,    -1,  3176,  3177,  3178,
    3179,  3180,  3181,  3182,    -1,    -1,    -1,  3186,  3187,    -1,
      -1,    -1,  3191,    -1,    -1,  3194,  3679,    -1,  3197,  3198,
    3199,  3200,  3201,  3202,  3203,  3204,  3205,  3206,  3207,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  3719,  3720,  3721,    -1,
      -1,  3724,    -1,    -1,  3727,  3728,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   177,    -1,    -1,   504,    -1,    -1,   507,
     508,   509,    -1,   511,   512,   513,   514,   515,   516,    -1,
    3763,    -1,   196,   521,    -1,    -1,    -1,   201,    -1,    -1,
      -1,  3774,  3775,  3776,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     224,   225,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   240,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3338,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   277,    -1,    -1,   280,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     294,    -1,    -1,   297,    -1,    -1,  3385,  3386,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  3401,    -1,  3403,    -1,  3405,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   396,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    3529,    -1,    -1,    -1,    -1,    -1,    -1,  3536,    -1,    -1,
    3539,  3540,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3548,
      -1,  3550,  3551,    -1,    -1,    -1,  3555,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     504,    -1,    -1,   507,   508,   509,    -1,   511,   512,   513,
     514,   515,   516,    -1,    -1,    -1,    -1,   521,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  3643,  3644,    -1,    -1,  3647,    -1,
      -1,    -1,  3651,    -1,    -1,  3654,  3655,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,     3,     4,     5,     6,     7,     8,     9,    10,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    -1,
      32,    33,    34,    -1,    -1,    -1,  3725,  3726,    40,    41,
    3729,    -1,    44,    45,    46,    -1,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    58,    59,    -1,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
      72,    73,    -1,    75,    76,    77,    78,    79,    -1,    81,
      -1,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    -1,    94,    95,    96,    97,    98,    99,    -1,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,    -1,   118,   119,   120,   121,
     122,   123,    -1,   125,   126,   127,   128,   129,   130,    -1,
      -1,   133,   134,   135,   136,   137,   138,   139,    -1,   141,
     142,   143,    -1,   145,   146,   147,    -1,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,   160,   161,
      -1,   163,   164,   165,   166,    -1,   168,    -1,   170,   171,
     172,   173,   174,   175,   176,   177,   178,    -1,   180,   181,
      -1,    -1,   184,   185,   186,   187,    -1,   189,   190,   191,
     192,   193,   194,   195,   196,   197,   198,   199,   200,    -1,
     202,   203,   204,   205,   206,   207,   208,    -1,   210,   211,
     212,   213,   214,   215,   216,   217,   218,   219,    -1,   221,
      -1,   223,   224,   225,   226,   227,   228,   229,   230,   231,
     232,   233,   234,    -1,    -1,   237,   238,   239,   240,    -1,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     282,   283,   284,   285,   286,   287,   288,    -1,   290,   291,
      -1,    -1,   294,   295,   296,    -1,    -1,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,    -1,   321,
     322,   323,   324,   325,   326,   327,   328,   329,   330,    -1,
     332,   333,   334,   335,   336,   337,   338,   339,    -1,   341,
     342,   343,   344,   345,   346,   347,   348,    -1,   350,   351,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,    -1,   365,   366,   367,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,    -1,   385,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,    -1,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,   417,   418,    -1,   420,   421,
     422,   423,   424,   425,   426,   427,   428,   429,    -1,   431,
     432,    -1,   434,    -1,   436,   437,   438,   439,   440,   441,
     442,   443,   444,   445,   446,   447,   448,   449,    -1,    -1,
     452,   453,   454,   455,   456,   457,   458,   459,    -1,   461,
     462,   463,   464,   465,   466,   467,    -1,   469,   470,   471,
     472,   473,   474,   475,   476,   477,    -1,    -1,   480,    -1,
     482,   483,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,   498,   499,   500,   501,
     502,   503,   504,    -1,   506,    -1,    -1,    -1,    -1,   511,
     512,   513,    -1,    -1,    -1,    -1,   518,    -1,   520,   521,
      -1,    -1,    -1,    -1,   526,   527,    -1,    -1,    -1,    -1,
     532,   533,     3,     4,     5,     6,     7,     8,     9,    10,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    30,
      -1,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,    40,
      41,    -1,    -1,    44,    45,    46,    -1,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    58,    59,    -1,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    72,    73,    -1,    75,    76,    77,    78,    79,    -1,
      81,    -1,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    -1,    94,    95,    96,    97,    98,    99,    -1,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,    -1,   118,   119,   120,
     121,   122,   123,    -1,   125,   126,   127,   128,   129,   130,
      -1,    -1,   133,   134,   135,   136,   137,   138,   139,    -1,
     141,   142,   143,    -1,   145,   146,   147,    -1,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
     161,    -1,   163,   164,   165,   166,    -1,   168,    -1,   170,
     171,   172,   173,   174,   175,   176,   177,   178,    -1,   180,
     181,    -1,    -1,   184,   185,   186,   187,    -1,   189,   190,
     191,   192,   193,   194,   195,   196,   197,   198,   199,   200,
      -1,   202,   203,   204,   205,   206,   207,   208,    -1,   210,
     211,   212,   213,   214,   215,   216,   217,   218,   219,    -1,
     221,    -1,   223,   224,   225,   226,   227,   228,   229,   230,
     231,   232,   233,   234,    -1,    -1,   237,   238,   239,   240,
      -1,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,   287,   288,    -1,   290,
     291,    -1,    -1,   294,   295,   296,    -1,    -1,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,    -1,
     321,   322,   323,   324,   325,   326,   327,   328,   329,   330,
      -1,   332,   333,   334,   335,   336,   337,   338,   339,    -1,
     341,   342,   343,   344,   345,   346,   347,   348,    -1,   350,
     351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,    -1,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,    -1,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
      -1,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,   417,   418,    -1,   420,
     421,   422,   423,   424,   425,   426,   427,   428,   429,    -1,
     431,   432,    -1,   434,    -1,   436,   437,   438,   439,   440,
     441,   442,   443,   444,   445,   446,   447,   448,   449,    -1,
      -1,   452,   453,   454,   455,   456,   457,   458,   459,    -1,
     461,   462,   463,   464,   465,   466,   467,    -1,   469,   470,
     471,   472,   473,   474,   475,   476,   477,    -1,    -1,   480,
      -1,   482,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,   499,   500,
     501,   502,   503,   504,    -1,   506,    -1,    -1,    -1,    -1,
     511,   512,   513,    -1,    -1,    -1,    -1,   518,    -1,   520,
      -1,    -1,    -1,    -1,    -1,   526,   527,    -1,    -1,    -1,
      -1,   532,   533,     3,     4,     5,     6,     7,     8,     9,
      10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    33,    34,    -1,    -1,    -1,    38,    -1,
      40,    41,    -1,    -1,    44,    45,    46,    -1,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
      -1,    61,    62,    63,    64,    65,    66,    67,    68,    69,
      70,    71,    72,    73,    -1,    75,    76,    77,    78,    79,
      -1,    81,    -1,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    -1,    94,    95,    96,    97,    98,    99,
      -1,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,    -1,   118,   119,
     120,   121,   122,   123,    -1,   125,   126,   127,   128,   129,
     130,   131,    -1,   133,   134,   135,   136,   137,   138,   139,
      -1,   141,   142,   143,    -1,   145,   146,   147,    -1,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
     160,   161,    -1,   163,   164,   165,   166,    -1,   168,    -1,
     170,   171,    -1,   173,   174,   175,   176,   177,   178,    -1,
     180,   181,    -1,    -1,   184,   185,   186,   187,    -1,   189,
     190,   191,   192,   193,   194,   195,   196,   197,   198,   199,
     200,    -1,   202,   203,   204,   205,   206,   207,   208,    -1,
     210,   211,   212,   213,   214,   215,   216,   217,   218,   219,
      -1,   221,    -1,   223,   224,   225,   226,   227,   228,   229,
     230,   231,   232,   233,   234,    -1,    -1,   237,   238,   239,
     240,    -1,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
     280,   281,   282,   283,   284,   285,   286,   287,   288,    -1,
     290,   291,    -1,    -1,   294,   295,   296,    -1,    -1,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,    -1,    -1,    -1,
      -1,   321,   322,   323,   324,   325,   326,   327,   328,   329,
     330,    -1,   332,   333,   334,   335,   336,   337,   338,   339,
      -1,   341,   342,   343,   344,   345,   346,   347,   348,    -1,
     350,   351,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,    -1,   365,   366,   367,   368,   369,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,    -1,   384,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,    -1,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,   417,   418,    -1,
     420,   421,    -1,   423,   424,   425,   426,   427,   428,   429,
      -1,   431,   432,    -1,   434,    -1,   436,   437,   438,   439,
     440,   441,   442,   443,   444,   445,   446,   447,   448,   449,
      -1,    -1,   452,   453,   454,    -1,   456,   457,   458,   459,
      -1,   461,   462,   463,   464,   465,   466,   467,   468,   469,
     470,   471,   472,   473,   474,   475,   476,   477,    -1,    -1,
     480,    -1,    -1,   483,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,   498,   499,
     500,   501,   502,   503,   504,    -1,    -1,    -1,    -1,    -1,
      -1,   511,   512,   513,    -1,    -1,    -1,    -1,   518,    -1,
     520,   521,    -1,    -1,    -1,    -1,   526,   527,    -1,    -1,
      -1,    -1,   532,   533,     3,     4,     5,     6,     7,     8,
       9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    22,    23,    24,    25,    26,    27,    28,
      29,    30,    -1,    32,    33,    34,    -1,    -1,    -1,    -1,
      -1,    40,    41,    -1,    -1,    44,    45,    46,    -1,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    58,
      59,    60,    61,    62,    63,    64,    65,    66,    67,    68,
      69,    70,    71,    72,    73,    -1,    75,    76,    77,    78,
      79,    -1,    81,    -1,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    -1,    94,    95,    96,    97,    98,
      99,    -1,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,    -1,   118,
     119,   120,   121,   122,   123,    -1,   125,   126,   127,   128,
     129,   130,    -1,    -1,   133,   134,   135,   136,   137,   138,
     139,    -1,   141,   142,   143,    -1,   145,   146,   147,    -1,
     149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
     159,   160,   161,    -1,   163,   164,   165,   166,    -1,   168,
      -1,   170,   171,   172,   173,   174,   175,   176,   177,   178,
      -1,   180,   181,    -1,    -1,   184,   185,   186,   187,    -1,
     189,   190,   191,   192,   193,   194,   195,   196,   197,   198,
     199,   200,    -1,   202,   203,   204,   205,   206,   207,   208,
      -1,   210,   211,   212,   213,   214,   215,   216,   217,   218,
     219,    -1,   221,    -1,   223,   224,   225,   226,   227,   228,
     229,   230,   231,   232,   233,   234,    -1,   236,   237,   238,
     239,   240,    -1,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
      -1,   290,   291,    -1,    -1,   294,   295,   296,    -1,    -1,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,    -1,    -1,
      -1,    -1,   321,   322,   323,   324,   325,   326,   327,   328,
     329,   330,    -1,   332,   333,   334,   335,   336,   337,   338,
     339,    -1,   341,   342,   343,   344,   345,   346,   347,   348,
      -1,   350,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,    -1,   365,   366,   367,   368,
     369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,    -1,    -1,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,    -1,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,   417,   418,
      -1,   420,   421,    -1,   423,   424,   425,   426,   427,   428,
     429,    -1,   431,   432,    -1,   434,   435,   436,   437,   438,
     439,   440,   441,   442,   443,   444,   445,   446,   447,   448,
     449,    -1,    -1,   452,   453,   454,    -1,   456,   457,   458,
     459,    -1,   461,   462,   463,   464,   465,   466,   467,    -1,
     469,   470,   471,   472,   473,   474,   475,   476,   477,    -1,
      -1,   480,    -1,    -1,   483,   484,   485,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
     499,   500,   501,   502,   503,   504,    -1,    -1,    -1,    -1,
      -1,    -1,   511,   512,   513,    -1,    -1,    -1,    -1,   518,
      -1,   520,    -1,    -1,    -1,    -1,    -1,   526,   527,    -1,
      -1,    -1,    -1,   532,   533,     3,     4,     5,     6,     7,
       8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    -1,    32,    33,    34,    -1,    -1,    -1,
      38,    -1,    40,    41,    -1,    -1,    44,    45,    46,    -1,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      58,    59,    -1,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    72,    73,    -1,    75,    76,    77,
      78,    79,    -1,    81,    -1,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    -1,    94,    95,    96,    97,
      98,    99,    -1,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,    -1,
     118,   119,   120,   121,   122,   123,    -1,   125,   126,   127,
     128,   129,   130,    -1,    -1,   133,   134,   135,   136,   137,
     138,   139,    -1,   141,   142,   143,    -1,   145,   146,   147,
      -1,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,   159,   160,   161,    -1,   163,   164,   165,   166,    -1,
     168,    -1,   170,   171,    -1,   173,   174,   175,   176,   177,
     178,    -1,   180,   181,    -1,    -1,   184,   185,   186,   187,
      -1,   189,   190,   191,   192,   193,   194,   195,   196,   197,
     198,   199,   200,    -1,   202,   203,   204,   205,   206,   207,
     208,    -1,   210,   211,   212,   213,   214,   215,   216,   217,
     218,   219,    -1,   221,    -1,   223,   224,   225,   226,   227,
     228,   229,   230,   231,   232,   233,   234,    -1,    -1,   237,
     238,   239,   240,    -1,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
     288,    -1,   290,   291,    -1,    -1,   294,   295,   296,    -1,
      -1,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,    -1,
      -1,    -1,    -1,   321,   322,   323,   324,   325,   326,   327,
     328,   329,   330,    -1,   332,   333,   334,   335,   336,   337,
     338,   339,    -1,   341,   342,   343,   344,   345,   346,   347,
     348,    -1,   350,   351,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,    -1,   365,   366,   367,
     368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,    -1,   384,   385,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,    -1,   402,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,   417,
     418,    -1,   420,   421,    -1,   423,   424,   425,   426,   427,
     428,   429,    -1,   431,   432,    -1,   434,    -1,   436,   437,
     438,   439,   440,   441,   442,   443,   444,   445,   446,   447,
     448,   449,    -1,    -1,   452,   453,   454,    -1,   456,   457,
     458,   459,    -1,   461,   462,   463,   464,   465,   466,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
      -1,    -1,   480,    -1,    -1,   483,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,   499,   500,   501,   502,   503,   504,    -1,    -1,    -1,
      -1,    -1,    -1,   511,   512,   513,    -1,    -1,    -1,    -1,
     518,    -1,   520,    -1,    -1,    -1,    -1,    -1,   526,   527,
      -1,    -1,    -1,    -1,   532,   533,     3,     4,     5,     6,
       7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    -1,    32,    33,    34,    -1,    -1,
      -1,    38,    -1,    40,    41,    -1,    -1,    44,    45,    46,
      -1,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    58,    59,    -1,    61,    62,    63,    64,    65,    66,
      67,    68,    69,    70,    71,    72,    73,    -1,    75,    76,
      77,    78,    79,    -1,    81,    -1,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    -1,    94,    95,    96,
      97,    98,    99,    -1,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
      -1,   118,   119,   120,   121,   122,   123,    -1,   125,   126,
     127,   128,   129,   130,    -1,    -1,   133,   134,   135,   136,
     137,   138,   139,    -1,   141,   142,   143,    -1,   145,   146,
     147,    -1,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,   160,   161,    -1,   163,   164,   165,   166,
      -1,   168,    -1,   170,   171,    -1,   173,   174,   175,   176,
     177,   178,    -1,   180,   181,    -1,    -1,   184,   185,   186,
     187,    -1,   189,   190,   191,   192,   193,   194,   195,   196,
     197,   198,   199,   200,    -1,   202,   203,   204,   205,   206,
     207,   208,    -1,   210,   211,   212,   213,   214,   215,   216,
     217,   218,   219,    -1,   221,    -1,   223,   224,   225,   226,
     227,   228,   229,   230,   231,   232,   233,   234,    -1,    -1,
     237,   238,   239,   240,    -1,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     287,   288,    -1,   290,   291,    -1,    -1,   294,   295,   296,
      -1,    -1,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
      -1,    -1,    -1,    -1,   321,   322,   323,   324,   325,   326,
     327,   328,   329,   330,    -1,   332,   333,   334,   335,   336,
     337,   338,   339,    -1,   341,   342,   343,   344,   345,   346,
     347,   348,    -1,   350,   351,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,    -1,   365,   366,
     367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,    -1,   384,   385,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,    -1,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
     417,   418,    -1,   420,   421,    -1,   423,   424,   425,   426,
     427,   428,   429,    -1,   431,   432,    -1,   434,    -1,   436,
     437,   438,   439,   440,   441,   442,   443,   444,   445,   446,
     447,   448,   449,    -1,    -1,   452,   453,   454,    -1,   456,
     457,   458,   459,    -1,   461,   462,   463,   464,   465,   466,
     467,    -1,   469,   470,   471,   472,   473,   474,   475,   476,
     477,    -1,    -1,   480,    -1,    -1,   483,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,   498,   499,   500,   501,   502,   503,   504,    -1,    -1,
      -1,    -1,    -1,    -1,   511,   512,   513,    -1,    -1,    -1,
      -1,   518,    -1,   520,   521,    -1,    -1,    -1,    -1,   526,
     527,    -1,    -1,    -1,    -1,   532,   533,     3,     4,     5,
       6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    34,    -1,
      -1,    -1,    -1,    39,    40,    41,    -1,    -1,    44,    45,
      46,    -1,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    -1,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    -1,    75,
      76,    77,    78,    79,    -1,    81,    -1,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    -1,    94,    95,
      96,    97,    98,    99,    -1,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,    -1,   118,   119,   120,   121,   122,   123,    -1,   125,
     126,   127,   128,   129,   130,    -1,    -1,   133,   134,   135,
     136,   137,   138,   139,    -1,   141,   142,   143,    -1,   145,
     146,   147,    -1,   149,   150,   151,   152,   153,   154,   155,
     156,   157,   158,   159,   160,   161,    -1,   163,   164,   165,
     166,    -1,   168,    -1,   170,   171,    -1,   173,   174,   175,
     176,   177,   178,    -1,   180,   181,    -1,    -1,   184,   185,
     186,   187,    -1,   189,   190,   191,   192,   193,   194,   195,
     196,   197,   198,   199,   200,    -1,   202,   203,   204,   205,
     206,   207,   208,    -1,   210,   211,   212,   213,   214,   215,
     216,   217,   218,   219,    -1,   221,    -1,   223,   224,   225,
     226,   227,   228,   229,   230,   231,   232,   233,   234,    -1,
      -1,   237,   238,   239,   240,    -1,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
     286,   287,   288,    -1,   290,   291,    -1,    -1,   294,   295,
     296,    -1,    -1,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,    -1,    -1,    -1,    -1,   321,   322,   323,   324,   325,
     326,   327,   328,   329,   330,    -1,   332,   333,   334,   335,
     336,   337,   338,   339,    -1,   341,   342,   343,   344,   345,
     346,   347,   348,    -1,   350,   351,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,    -1,   365,
     366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,    -1,    -1,   385,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,   417,   418,    -1,   420,   421,    -1,   423,   424,   425,
     426,   427,   428,   429,    -1,   431,   432,    -1,   434,    -1,
     436,   437,   438,   439,   440,   441,   442,   443,   444,   445,
     446,   447,   448,   449,    -1,    -1,   452,   453,   454,    -1,
     456,   457,   458,   459,    -1,   461,   462,   463,   464,   465,
     466,   467,    -1,   469,   470,   471,   472,   473,   474,   475,
     476,   477,    -1,    -1,   480,    -1,    -1,   483,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,   498,   499,   500,   501,   502,   503,   504,    -1,
      -1,    -1,    -1,    -1,    -1,   511,   512,   513,    -1,    -1,
      -1,    -1,   518,    -1,   520,    -1,    -1,    -1,    -1,    -1,
     526,   527,    -1,    -1,    -1,    -1,   532,   533,     3,     4,
       5,     6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    -1,    32,    33,    34,
      -1,    -1,    -1,    38,    -1,    40,    41,    -1,    -1,    44,
      45,    46,    -1,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    -1,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    -1,
      75,    76,    77,    78,    79,    -1,    81,    -1,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    -1,    94,
      95,    96,    97,    98,    99,    -1,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,    -1,   118,   119,   120,   121,   122,   123,    -1,
     125,   126,   127,   128,   129,   130,    -1,    -1,   133,   134,
     135,   136,   137,   138,   139,    -1,   141,   142,   143,    -1,
     145,   146,   147,    -1,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   161,    -1,   163,   164,
     165,   166,    -1,   168,    -1,   170,   171,    -1,   173,   174,
     175,   176,   177,   178,    -1,   180,   181,    -1,    -1,   184,
     185,   186,   187,    -1,   189,   190,   191,   192,   193,   194,
     195,   196,   197,   198,   199,   200,    -1,   202,   203,   204,
     205,   206,   207,   208,    -1,   210,   211,   212,   213,   214,
     215,   216,   217,   218,   219,    -1,   221,    -1,   223,   224,
     225,   226,   227,   228,   229,   230,   231,   232,   233,   234,
      -1,    -1,   237,   238,   239,   240,    -1,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,    -1,   290,   291,    -1,    -1,   294,
     295,   296,    -1,    -1,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,    -1,    -1,    -1,    -1,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,    -1,   332,   333,   334,
     335,   336,   337,   338,   339,    -1,   341,   342,   343,   344,
     345,   346,   347,   348,    -1,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,    -1,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,    -1,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,    -1,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,    -1,   420,   421,    -1,   423,   424,
     425,   426,   427,   428,   429,    -1,   431,   432,    -1,   434,
      -1,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,    -1,    -1,   452,   453,   454,
      -1,   456,   457,   458,   459,    -1,   461,   462,   463,   464,
     465,   466,   467,    -1,   469,   470,   471,   472,   473,   474,
     475,   476,   477,    -1,    -1,   480,    -1,    -1,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
      -1,    -1,    -1,    -1,    -1,    -1,   511,   512,   513,    -1,
      -1,    -1,    -1,   518,    -1,   520,   521,    -1,    -1,    -1,
      -1,   526,   527,    -1,    -1,    -1,    -1,   532,   533,     3,
       4,     5,     6,     7,     8,     9,    10,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    -1,    32,    33,
      34,    -1,    -1,    -1,    38,    -1,    40,    41,    -1,    -1,
      44,    45,    46,    -1,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    58,    59,    -1,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
      -1,    75,    76,    77,    78,    79,    -1,    81,    -1,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    -1,
      94,    95,    96,    97,    98,    99,    -1,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,    -1,   118,   119,   120,   121,   122,   123,
      -1,   125,   126,   127,   128,   129,   130,    -1,    -1,   133,
     134,   135,   136,   137,   138,   139,    -1,   141,   142,   143,
      -1,   145,   146,   147,    -1,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,   159,   160,   161,    -1,   163,
     164,   165,   166,    -1,   168,    -1,   170,   171,    -1,   173,
     174,   175,   176,   177,   178,    -1,   180,   181,    -1,    -1,
     184,   185,   186,   187,    -1,   189,   190,   191,   192,   193,
     194,   195,   196,   197,   198,   199,   200,    -1,   202,   203,
     204,   205,   206,   207,   208,    -1,   210,   211,   212,   213,
     214,   215,   216,   217,   218,   219,    -1,   221,    -1,   223,
     224,   225,   226,   227,   228,   229,   230,   231,   232,   233,
     234,    -1,    -1,   237,   238,   239,   240,    -1,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,    -1,   290,   291,    -1,    -1,
     294,   295,   296,    -1,    -1,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,    -1,    -1,    -1,    -1,   321,   322,   323,
     324,   325,   326,   327,   328,   329,   330,    -1,   332,   333,
     334,   335,   336,   337,   338,   339,    -1,   341,   342,   343,
     344,   345,   346,   347,   348,    -1,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
      -1,   365,   366,   367,   368,   369,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,    -1,
     384,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,    -1,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,   417,   418,    -1,   420,   421,    -1,   423,
     424,   425,   426,   427,   428,   429,    -1,   431,   432,    -1,
     434,    -1,   436,   437,   438,   439,   440,   441,   442,   443,
     444,   445,   446,   447,   448,   449,    -1,    -1,   452,   453,
     454,    -1,   456,   457,   458,   459,    -1,   461,   462,   463,
     464,   465,   466,   467,    -1,   469,   470,   471,   472,   473,
     474,   475,   476,   477,    -1,    -1,   480,    -1,    -1,   483,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,   499,   500,   501,   502,   503,
     504,    -1,    -1,    -1,    -1,    -1,    -1,   511,   512,   513,
      -1,    -1,    -1,    -1,   518,    -1,   520,    -1,    -1,    -1,
      -1,    -1,   526,   527,    -1,    -1,    -1,    -1,   532,   533,
       3,     4,     5,     6,     7,    -1,     9,    10,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,
      23,    24,    25,    26,    27,    28,    29,    30,    -1,    32,
      33,    34,    -1,    -1,    -1,    -1,    -1,    40,    41,    -1,
      -1,    44,    45,    46,    -1,    48,    49,    50,    51,    52,
      53,    54,    55,    56,    57,    58,    59,    -1,    61,    62,
      63,    64,    65,    66,    67,    68,    69,    70,    71,    72,
      73,    -1,    75,    76,    77,    78,    79,    -1,    81,    -1,
      83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      -1,    94,    95,    96,    97,    98,    99,    -1,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,    -1,   116,    -1,   118,   119,   120,   121,   122,
     123,    -1,   125,   126,   127,   128,   129,   130,    -1,    -1,
     133,   134,   135,   136,   137,   138,   139,    -1,   141,   142,
     143,    -1,   145,   146,   147,    -1,   149,   150,   151,   152,
     153,   154,   155,   156,   157,   158,   159,   160,   161,    -1,
     163,   164,   165,   166,    -1,   168,    -1,   170,   171,   172,
     173,   174,   175,   176,   177,   178,    -1,   180,   181,    -1,
      -1,   184,   185,   186,   187,    -1,   189,   190,   191,   192,
     193,   194,   195,   196,   197,   198,   199,   200,    -1,   202,
     203,   204,   205,   206,   207,   208,    -1,   210,   211,   212,
     213,   214,   215,   216,   217,   218,   219,    -1,   221,    -1,
     223,   224,   225,   226,   227,   228,   229,   230,   231,   232,
     233,   234,    -1,    -1,   237,   238,   239,   240,    -1,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,    -1,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,    -1,   290,   291,    -1,
      -1,   294,   295,   296,    -1,    -1,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,    -1,   321,   322,
     323,   324,   325,   326,   327,   328,   329,   330,    -1,   332,
     333,   334,   335,   336,   337,   338,   339,    -1,   341,   342,
     343,   344,   345,   346,   347,   348,    -1,   350,   351,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,    -1,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,    -1,   385,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,    -1,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,   417,   418,    -1,   420,   421,   422,
     423,   424,   425,   426,   427,   428,   429,    -1,   431,   432,
      -1,   434,    -1,   436,   437,   438,   439,   440,   441,   442,
     443,   444,   445,   446,   447,   448,   449,    -1,    -1,   452,
     453,   454,   455,   456,   457,   458,   459,    -1,   461,   462,
     463,   464,   465,   466,   467,    -1,   469,   470,   471,   472,
     473,   474,   475,   476,   477,    -1,    -1,   480,    -1,   482,
     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   500,   501,   502,
     503,    -1,    -1,   506,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   518,    -1,   520,    -1,    -1,
      -1,    -1,    -1,   526,   527,    -1,    -1,    -1,    -1,   532,
     533,     3,     4,     5,     6,     7,     8,     9,    10,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
      32,    33,    34,    -1,    -1,    -1,    -1,    -1,    40,    41,
      -1,    -1,    44,    45,    46,    -1,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    58,    59,    -1,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
      72,    73,    -1,    75,    76,    77,    78,    79,    -1,    81,
      -1,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    -1,    94,    95,    96,    97,    98,    99,    -1,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,    -1,   118,   119,   120,   121,
     122,   123,    -1,   125,   126,   127,   128,   129,   130,    -1,
      -1,   133,   134,   135,   136,   137,   138,   139,    -1,   141,
     142,   143,    -1,   145,   146,   147,    -1,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,   160,   161,
      -1,   163,   164,   165,   166,    -1,   168,    -1,   170,   171,
      -1,   173,   174,   175,   176,   177,   178,    -1,   180,   181,
      -1,    -1,   184,   185,   186,   187,    -1,   189,   190,   191,
     192,   193,   194,   195,   196,   197,   198,   199,   200,    -1,
     202,   203,   204,   205,   206,   207,   208,    -1,   210,   211,
     212,   213,   214,   215,   216,   217,   218,   219,    -1,   221,
      -1,   223,   224,   225,   226,   227,   228,   229,   230,   231,
     232,   233,   234,    -1,    -1,   237,   238,   239,   240,    -1,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     282,   283,   284,   285,   286,   287,   288,    -1,   290,   291,
      -1,    -1,   294,   295,   296,    -1,    -1,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,    -1,    -1,    -1,    -1,   321,
     322,   323,   324,   325,   326,   327,   328,   329,   330,    -1,
     332,   333,   334,   335,   336,   337,   338,   339,    -1,   341,
     342,   343,   344,   345,   346,   347,   348,    -1,   350,   351,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,    -1,   365,   366,   367,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,    -1,    -1,   385,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,    -1,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,   417,   418,    -1,   420,   421,
      -1,   423,   424,   425,   426,   427,   428,   429,    -1,   431,
     432,    -1,   434,    -1,   436,   437,   438,   439,   440,   441,
     442,   443,   444,   445,   446,   447,   448,   449,    -1,    -1,
     452,   453,   454,    -1,   456,   457,   458,   459,    -1,   461,
     462,   463,   464,   465,   466,   467,    -1,   469,   470,   471,
     472,   473,   474,   475,   476,   477,    -1,    -1,   480,    -1,
      -1,   483,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,   498,   499,   500,   501,
     502,   503,   504,    -1,    -1,    -1,    -1,    -1,    -1,   511,
     512,   513,    -1,    -1,    -1,    -1,   518,    -1,   520,    -1,
      -1,    -1,    -1,    -1,   526,   527,    -1,    -1,    -1,    -1,
     532,   533,     3,     4,     5,     6,     7,     8,     9,    10,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,    40,
      41,    -1,    -1,    44,    45,    46,    -1,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    58,    59,    -1,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    72,    73,    -1,    75,    76,    77,    78,    79,    -1,
      81,    -1,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    -1,    94,    95,    96,    97,    98,    99,    -1,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,    -1,   118,   119,   120,
     121,   122,   123,    -1,   125,   126,   127,   128,   129,   130,
      -1,    -1,   133,   134,   135,   136,   137,   138,   139,    -1,
     141,   142,   143,    -1,   145,   146,   147,    -1,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
     161,    -1,   163,   164,   165,   166,    -1,   168,    -1,   170,
     171,    -1,   173,   174,   175,   176,   177,   178,    -1,   180,
     181,    -1,    -1,   184,   185,   186,   187,    -1,   189,   190,
     191,   192,   193,   194,   195,   196,   197,   198,   199,   200,
      -1,   202,   203,   204,   205,   206,   207,   208,    -1,   210,
     211,   212,   213,   214,   215,   216,   217,   218,   219,    -1,
     221,    -1,   223,   224,   225,   226,   227,   228,   229,   230,
     231,   232,   233,   234,    -1,    -1,   237,   238,   239,   240,
      -1,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,   287,   288,    -1,   290,
     291,    -1,    -1,   294,   295,   296,    -1,    -1,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,    -1,    -1,    -1,    -1,
     321,   322,   323,   324,   325,   326,   327,   328,   329,   330,
      -1,   332,   333,   334,   335,   336,   337,   338,   339,    -1,
     341,   342,   343,   344,   345,   346,   347,   348,    -1,   350,
     351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,    -1,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,    -1,    -1,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
      -1,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,   417,   418,    -1,   420,
     421,    -1,   423,   424,   425,   426,   427,   428,   429,    -1,
     431,   432,    -1,   434,    -1,   436,   437,   438,   439,   440,
     441,   442,   443,   444,   445,   446,   447,   448,   449,    -1,
      -1,   452,   453,   454,    -1,   456,   457,   458,   459,    -1,
     461,   462,   463,   464,   465,   466,   467,    -1,   469,   470,
     471,   472,   473,   474,   475,   476,   477,    -1,    -1,   480,
      -1,    -1,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,   499,   500,
     501,   502,   503,   504,    -1,    -1,    -1,    -1,    -1,    -1,
     511,   512,   513,    -1,    -1,    -1,    -1,   518,    -1,   520,
      -1,    -1,    -1,    -1,    -1,   526,   527,    -1,    -1,    -1,
      -1,   532,   533,     3,     4,     5,     6,     7,     8,     9,
      10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    -1,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,
      40,    41,    -1,    -1,    44,    45,    46,    -1,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
      -1,    61,    62,    63,    64,    65,    66,    67,    68,    69,
      70,    71,    72,    73,    -1,    75,    76,    77,    78,    79,
      -1,    81,    -1,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    -1,    94,    95,    96,    97,    98,    99,
      -1,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,    -1,   118,   119,
     120,   121,   122,   123,    -1,   125,   126,   127,   128,   129,
     130,    -1,    -1,   133,   134,   135,   136,   137,   138,   139,
      -1,   141,   142,   143,    -1,   145,   146,   147,    -1,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
     160,   161,    -1,   163,   164,   165,   166,    -1,   168,    -1,
     170,   171,   172,   173,   174,   175,   176,   177,   178,    -1,
     180,   181,    -1,    -1,   184,   185,   186,   187,    -1,   189,
     190,   191,   192,   193,   194,   195,   196,   197,   198,   199,
     200,    -1,   202,   203,   204,   205,   206,   207,   208,    -1,
     210,   211,   212,   213,   214,   215,   216,   217,   218,   219,
      -1,   221,    -1,   223,   224,   225,   226,   227,   228,   229,
     230,   231,   232,   233,   234,    -1,    -1,   237,   238,   239,
     240,    -1,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
     280,   281,   282,   283,   284,   285,   286,   287,   288,    -1,
     290,   291,    -1,    -1,   294,   295,   296,    -1,    -1,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,    -1,    -1,    -1,
      -1,   321,   322,   323,   324,   325,   326,   327,   328,   329,
     330,    -1,   332,   333,   334,   335,   336,   337,   338,   339,
      -1,   341,   342,   343,   344,   345,   346,   347,   348,    -1,
     350,   351,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,    -1,   365,   366,   367,   368,   369,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,    -1,    -1,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,    -1,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,   417,   418,    -1,
     420,   421,    -1,   423,   424,   425,   426,   427,   428,   429,
      -1,   431,   432,    -1,   434,    -1,   436,   437,   438,   439,
     440,   441,   442,   443,   444,   445,   446,   447,   448,   449,
      -1,    -1,   452,   453,   454,    -1,   456,   457,   458,   459,
      -1,   461,   462,   463,   464,   465,   466,   467,    -1,   469,
     470,   471,   472,   473,   474,   475,   476,   477,    -1,    -1,
     480,    -1,    -1,   483,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,   498,   499,
     500,   501,   502,   503,   504,    -1,    -1,    -1,    -1,    -1,
      -1,   511,   512,   513,    -1,    -1,    -1,    -1,   518,    -1,
     520,    -1,    -1,    -1,    -1,    -1,   526,   527,    -1,    -1,
      -1,    -1,   532,   533,     3,     4,     5,     6,     7,     8,
       9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    22,    23,    24,    25,    26,    27,    28,
      29,    30,    -1,    32,    33,    34,    -1,    -1,    -1,    -1,
      -1,    40,    41,    -1,    -1,    44,    45,    46,    -1,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    58,
      59,    -1,    61,    62,    63,    64,    65,    66,    67,    68,
      69,    70,    71,    72,    73,    -1,    75,    76,    77,    78,
      79,    -1,    81,    -1,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    -1,    94,    95,    96,    97,    98,
      99,    -1,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,    -1,   118,
     119,   120,   121,   122,   123,    -1,   125,   126,   127,   128,
     129,   130,    -1,    -1,   133,   134,   135,   136,   137,   138,
     139,    -1,   141,   142,   143,    -1,   145,   146,   147,    -1,
     149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
     159,   160,   161,    -1,   163,   164,   165,   166,    -1,   168,
      -1,   170,   171,    -1,   173,   174,   175,   176,   177,   178,
      -1,   180,   181,    -1,    -1,   184,   185,   186,   187,    -1,
     189,   190,   191,   192,   193,   194,   195,   196,   197,   198,
     199,   200,    -1,   202,   203,   204,   205,   206,   207,   208,
      -1,   210,   211,   212,   213,   214,   215,   216,   217,   218,
     219,    -1,   221,    -1,   223,   224,   225,   226,   227,   228,
     229,   230,   231,   232,   233,   234,    -1,    -1,   237,   238,
     239,   240,    -1,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
      -1,   290,   291,    -1,    -1,   294,   295,   296,    -1,    -1,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,    -1,    -1,
      -1,    -1,   321,   322,   323,   324,   325,   326,   327,   328,
     329,   330,    -1,   332,   333,   334,   335,   336,   337,   338,
     339,    -1,   341,   342,   343,   344,   345,   346,   347,   348,
      -1,   350,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,    -1,   365,   366,   367,   368,
     369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,    -1,    -1,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,    -1,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,   417,   418,
      -1,   420,   421,    -1,   423,   424,   425,   426,   427,   428,
     429,    -1,   431,   432,    -1,   434,    -1,   436,   437,   438,
     439,   440,   441,   442,   443,   444,   445,   446,   447,   448,
     449,    -1,    -1,   452,   453,   454,    -1,   456,   457,   458,
     459,    -1,   461,   462,   463,   464,   465,   466,   467,    -1,
     469,   470,   471,   472,   473,   474,   475,   476,   477,    -1,
      -1,   480,    -1,    -1,   483,   484,   485,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
     499,   500,   501,   502,   503,   504,    -1,    -1,    -1,    -1,
      -1,    -1,   511,   512,   513,    -1,    -1,    -1,    -1,   518,
      -1,   520,   521,    -1,    -1,    -1,    -1,   526,   527,    -1,
      -1,    -1,    -1,   532,   533,     3,     4,     5,     6,     7,
       8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    -1,    32,    33,    34,    -1,    -1,    -1,
      -1,    -1,    40,    41,    -1,    -1,    44,    45,    46,    -1,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      58,    59,    -1,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    72,    73,    -1,    75,    76,    77,
      78,    79,    -1,    81,    -1,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    -1,    94,    95,    96,    97,
      98,    99,    -1,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,    -1,
     118,   119,   120,   121,   122,   123,    -1,   125,   126,   127,
     128,   129,   130,    -1,    -1,   133,   134,   135,   136,   137,
     138,   139,    -1,   141,   142,   143,    -1,   145,   146,   147,
      -1,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,   159,   160,   161,    -1,   163,   164,   165,   166,    -1,
     168,    -1,   170,   171,    -1,   173,   174,   175,   176,   177,
     178,    -1,   180,   181,    -1,    -1,   184,   185,   186,   187,
      -1,   189,   190,   191,   192,   193,   194,   195,   196,   197,
     198,   199,   200,    -1,   202,   203,   204,   205,   206,   207,
     208,    -1,   210,   211,   212,   213,   214,   215,   216,   217,
     218,   219,    -1,   221,    -1,   223,   224,   225,   226,   227,
     228,   229,   230,   231,   232,   233,   234,    -1,    -1,   237,
     238,   239,   240,    -1,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
     288,    -1,   290,   291,    -1,    -1,   294,   295,   296,    -1,
      -1,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,    -1,
      -1,    -1,    -1,   321,   322,   323,   324,   325,   326,   327,
     328,   329,   330,    -1,   332,   333,   334,   335,   336,   337,
     338,   339,    -1,   341,   342,   343,   344,   345,   346,   347,
     348,    -1,   350,   351,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,    -1,   365,   366,   367,
     368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,    -1,    -1,   385,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,    -1,   402,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,   417,
     418,    -1,   420,   421,    -1,   423,   424,   425,   426,   427,
     428,   429,    -1,   431,   432,    -1,   434,    -1,   436,   437,
     438,   439,   440,   441,   442,   443,   444,   445,   446,   447,
     448,   449,    -1,    -1,   452,   453,   454,    -1,   456,   457,
     458,   459,    -1,   461,   462,   463,   464,   465,   466,   467,
      -1,   469,   470,   471,   472,   473,   474,   475,   476,   477,
      -1,    -1,   480,    -1,    -1,   483,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,   499,   500,   501,   502,   503,   504,    -1,    -1,    -1,
      -1,    -1,    -1,   511,   512,   513,    -1,    -1,    -1,    -1,
     518,    -1,   520,    -1,    -1,    -1,    -1,    -1,   526,   527,
      -1,    -1,    -1,   531,   532,   533,     3,     4,     5,     6,
       7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    -1,    32,    33,    34,    -1,    -1,
      -1,    -1,    -1,    40,    41,    -1,    -1,    44,    45,    46,
      -1,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    58,    59,    -1,    61,    62,    63,    64,    65,    66,
      67,    68,    69,    70,    71,    72,    73,    -1,    75,    76,
      77,    78,    79,    -1,    81,    -1,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    -1,    94,    95,    96,
      97,    98,    99,    -1,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
      -1,   118,   119,   120,   121,   122,   123,    -1,   125,   126,
     127,   128,   129,   130,    -1,    -1,   133,   134,   135,   136,
     137,   138,   139,    -1,   141,   142,   143,    -1,   145,   146,
     147,    -1,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,   160,   161,    -1,   163,   164,   165,   166,
      -1,   168,    -1,   170,   171,    -1,   173,   174,   175,   176,
     177,   178,    -1,   180,   181,    -1,    -1,   184,   185,   186,
     187,    -1,   189,   190,   191,   192,   193,   194,   195,   196,
     197,   198,   199,   200,    -1,   202,   203,   204,   205,   206,
     207,   208,    -1,   210,   211,   212,   213,   214,   215,   216,
     217,   218,   219,    -1,   221,    -1,   223,   224,   225,   226,
     227,   228,   229,   230,   231,   232,   233,   234,    -1,    -1,
     237,   238,   239,   240,    -1,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     287,   288,    -1,   290,   291,    -1,    -1,   294,   295,   296,
      -1,    -1,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
      -1,    -1,    -1,    -1,   321,   322,   323,   324,   325,   326,
     327,   328,   329,   330,    -1,   332,   333,   334,   335,   336,
     337,   338,   339,    -1,   341,   342,   343,   344,   345,   346,
     347,   348,    -1,   350,   351,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,    -1,   365,   366,
     367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,    -1,    -1,   385,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,    -1,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
     417,   418,    -1,   420,   421,   422,   423,   424,   425,   426,
     427,   428,   429,    -1,   431,   432,    -1,   434,    -1,   436,
     437,   438,   439,   440,   441,   442,   443,   444,   445,   446,
     447,   448,   449,    -1,    -1,   452,   453,   454,    -1,   456,
     457,   458,   459,    -1,   461,   462,   463,   464,   465,   466,
     467,    -1,   469,   470,   471,   472,   473,   474,   475,   476,
     477,    -1,    -1,   480,    -1,    -1,   483,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,   498,   499,   500,   501,   502,   503,   504,    -1,    -1,
      -1,    -1,    -1,    -1,   511,   512,   513,    -1,    -1,    -1,
      -1,   518,    -1,   520,    -1,    -1,    -1,    -1,    -1,   526,
     527,    -1,    -1,    -1,    -1,   532,   533,     3,     4,     5,
       6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    -1,    32,    33,    34,    -1,
      -1,    -1,    -1,    -1,    40,    41,    -1,    -1,    44,    45,
      46,    -1,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    -1,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    -1,    75,
      76,    77,    78,    79,    -1,    81,    -1,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    -1,    94,    95,
      96,    97,    98,    99,    -1,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,    -1,   118,   119,   120,   121,   122,   123,    -1,   125,
     126,   127,   128,   129,   130,    -1,    -1,   133,   134,   135,
     136,   137,   138,   139,    -1,   141,   142,   143,    -1,   145,
     146,   147,    -1,   149,   150,   151,   152,   153,   154,   155,
     156,   157,   158,   159,   160,   161,    -1,   163,   164,   165,
     166,    -1,   168,    -1,   170,   171,    -1,   173,   174,   175,
     176,   177,   178,    -1,   180,   181,    -1,    -1,   184,   185,
     186,   187,    -1,   189,   190,   191,   192,   193,   194,   195,
     196,   197,   198,   199,   200,    -1,   202,   203,   204,   205,
     206,   207,   208,    -1,   210,   211,   212,   213,   214,   215,
     216,   217,   218,   219,    -1,   221,    -1,   223,   224,   225,
     226,   227,   228,   229,   230,   231,   232,   233,   234,    -1,
      -1,   237,   238,   239,   240,    -1,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
     286,   287,   288,    -1,   290,   291,    -1,    -1,   294,   295,
     296,    -1,    -1,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,    -1,    -1,    -1,    -1,   321,   322,   323,   324,   325,
     326,   327,   328,   329,   330,    -1,   332,   333,   334,   335,
     336,   337,   338,   339,    -1,   341,   342,   343,   344,   345,
     346,   347,   348,    -1,   350,   351,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,    -1,   365,
     366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,    -1,    -1,   385,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,    -1,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,   417,   418,    -1,   420,   421,    -1,   423,   424,   425,
     426,   427,   428,   429,    -1,   431,   432,    -1,   434,    -1,
     436,   437,   438,   439,   440,   441,   442,   443,   444,   445,
     446,   447,   448,   449,    -1,    -1,   452,   453,   454,    -1,
     456,   457,   458,   459,    -1,   461,   462,   463,   464,   465,
     466,   467,    -1,   469,   470,   471,   472,   473,   474,   475,
     476,   477,    -1,   479,   480,    -1,    -1,   483,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,   498,   499,   500,   501,   502,   503,   504,    -1,
      -1,    -1,    -1,    -1,    -1,   511,   512,   513,    -1,    -1,
      -1,    -1,   518,    -1,   520,    -1,    -1,    -1,    -1,    -1,
     526,   527,    -1,    -1,    -1,    -1,   532,   533,     3,     4,
       5,     6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      -1,    -1,    -1,    -1,    -1,    40,    41,    -1,    -1,    44,
      45,    46,    -1,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    -1,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    -1,
      75,    76,    77,    78,    79,    -1,    81,    -1,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    -1,    94,
      95,    96,    97,    98,    99,    -1,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,    -1,   118,   119,   120,   121,   122,   123,    -1,
     125,   126,   127,   128,   129,   130,    -1,    -1,   133,   134,
     135,   136,   137,   138,   139,    -1,   141,   142,   143,    -1,
     145,   146,   147,    -1,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   161,    -1,   163,   164,
     165,   166,    -1,   168,    -1,   170,   171,    -1,   173,   174,
     175,   176,   177,   178,    -1,   180,   181,    -1,    -1,   184,
     185,   186,   187,    -1,   189,   190,   191,   192,   193,   194,
     195,   196,   197,   198,   199,   200,    -1,   202,   203,   204,
     205,   206,   207,   208,    -1,   210,   211,   212,   213,   214,
     215,   216,   217,   218,   219,    -1,   221,    -1,   223,   224,
     225,   226,   227,   228,   229,   230,   231,   232,   233,   234,
      -1,    -1,   237,   238,   239,   240,    -1,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,    -1,   290,   291,    -1,    -1,   294,
     295,   296,    -1,    -1,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,    -1,    -1,    -1,    -1,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,    -1,   332,   333,   334,
     335,   336,   337,   338,   339,    -1,   341,   342,   343,   344,
     345,   346,   347,   348,    -1,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,    -1,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,    -1,    -1,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,    -1,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,    -1,   420,   421,    -1,   423,   424,
     425,   426,   427,   428,   429,    -1,   431,   432,    -1,   434,
      -1,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,    -1,    -1,   452,   453,   454,
      -1,   456,   457,   458,   459,    -1,   461,   462,   463,   464,
     465,   466,   467,    -1,   469,   470,   471,   472,   473,   474,
     475,   476,   477,    -1,    -1,   480,    -1,    -1,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
      -1,    -1,    -1,    -1,    -1,    -1,   511,   512,   513,    -1,
      -1,    -1,    -1,   518,    -1,   520,    -1,    -1,    -1,    -1,
      -1,   526,   527,    -1,    -1,    -1,    -1,   532,   533,     3,
       4,     5,     6,     7,     8,     9,    10,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    -1,    32,    33,
      34,    -1,    -1,    -1,    -1,    -1,    40,    41,    -1,    -1,
      44,    45,    46,    -1,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    58,    59,    -1,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
      -1,    75,    76,    77,    78,    79,    -1,    81,    -1,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    -1,
      94,    95,    96,    97,    98,    99,    -1,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,    -1,   118,   119,   120,   121,   122,   123,
      -1,   125,   126,   127,   128,   129,   130,    -1,    -1,   133,
     134,   135,   136,   137,   138,   139,    -1,   141,   142,   143,
      -1,   145,   146,   147,    -1,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,   159,   160,   161,    -1,   163,
     164,   165,   166,    -1,   168,    -1,   170,   171,    -1,   173,
     174,   175,   176,   177,   178,    -1,   180,   181,    -1,    -1,
     184,   185,   186,   187,    -1,   189,   190,   191,   192,   193,
     194,   195,   196,   197,   198,   199,   200,    -1,   202,   203,
     204,   205,   206,   207,   208,    -1,   210,   211,   212,   213,
     214,   215,   216,   217,   218,   219,    -1,   221,    -1,   223,
     224,   225,   226,   227,   228,   229,   230,   231,   232,   233,
     234,    -1,    -1,   237,   238,   239,   240,    -1,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,    -1,   290,   291,    -1,    -1,
     294,   295,   296,    -1,    -1,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,    -1,    -1,    -1,    -1,   321,   322,   323,
     324,   325,   326,   327,   328,   329,   330,    -1,   332,   333,
     334,   335,   336,   337,   338,   339,    -1,   341,   342,   343,
     344,   345,   346,   347,   348,    -1,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
      -1,   365,   366,   367,   368,   369,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,    -1,
      -1,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,    -1,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,   417,   418,    -1,   420,   421,   422,   423,
     424,   425,   426,   427,   428,   429,    -1,   431,   432,    -1,
     434,    -1,   436,   437,   438,   439,   440,   441,   442,   443,
     444,   445,   446,   447,   448,   449,    -1,    -1,   452,   453,
     454,    -1,   456,   457,   458,   459,    -1,   461,   462,   463,
     464,   465,   466,   467,    -1,   469,   470,   471,   472,   473,
     474,   475,   476,   477,    -1,    -1,   480,    -1,    -1,   483,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,   499,   500,   501,   502,   503,
     504,    -1,    -1,    -1,    -1,    -1,    -1,   511,   512,   513,
      -1,    -1,    -1,    -1,   518,    -1,   520,    -1,    -1,    -1,
      -1,    -1,   526,   527,    -1,    -1,    -1,    -1,   532,   533,
       3,     4,     5,     6,     7,     8,     9,    10,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,
      23,    24,    25,    26,    27,    28,    29,    30,    -1,    32,
      33,    34,    -1,    -1,    -1,    -1,    -1,    40,    41,    -1,
      -1,    44,    45,    46,    -1,    48,    49,    50,    51,    52,
      53,    54,    55,    56,    57,    58,    59,    -1,    61,    62,
      63,    64,    65,    66,    67,    68,    69,    70,    71,    72,
      73,    -1,    75,    76,    77,    78,    79,    -1,    81,    -1,
      83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      -1,    94,    95,    96,    97,    98,    99,    -1,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,    -1,   118,   119,   120,   121,   122,
     123,    -1,   125,   126,   127,   128,   129,   130,    -1,    -1,
     133,   134,   135,   136,   137,   138,   139,    -1,   141,   142,
     143,    -1,   145,   146,   147,    -1,   149,   150,   151,   152,
     153,   154,   155,   156,   157,   158,   159,   160,   161,    -1,
     163,   164,   165,   166,    -1,   168,    -1,   170,   171,    -1,
     173,   174,   175,   176,   177,   178,    -1,   180,   181,    -1,
      -1,   184,   185,   186,   187,    -1,   189,   190,   191,   192,
     193,   194,   195,   196,   197,   198,   199,   200,    -1,   202,
     203,   204,   205,   206,   207,   208,    -1,   210,   211,   212,
     213,   214,   215,   216,   217,   218,   219,    -1,   221,    -1,
     223,   224,   225,   226,   227,   228,   229,   230,   231,   232,
     233,   234,    -1,    -1,   237,   238,   239,   240,    -1,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,    -1,   290,   291,    -1,
      -1,   294,   295,   296,    -1,    -1,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,    -1,    -1,    -1,    -1,   321,   322,
     323,   324,   325,   326,   327,   328,   329,   330,    -1,   332,
     333,   334,   335,   336,   337,   338,   339,    -1,   341,   342,
     343,   344,   345,   346,   347,   348,    -1,   350,   351,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,    -1,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
      -1,    -1,   385,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,    -1,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,   417,   418,    -1,   420,   421,    -1,
     423,   424,   425,   426,   427,   428,   429,    -1,   431,   432,
      -1,   434,    -1,   436,   437,   438,   439,   440,   441,   442,
     443,   444,   445,   446,   447,   448,   449,    -1,    -1,   452,
     453,   454,    -1,   456,   457,   458,   459,    -1,   461,   462,
     463,   464,   465,   466,   467,    -1,   469,   470,   471,   472,
     473,   474,   475,   476,   477,    -1,    -1,   480,    -1,    -1,
     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   500,   501,   502,
     503,   504,    -1,    -1,    -1,    -1,    -1,    -1,   511,   512,
     513,    -1,    -1,    -1,    -1,   518,    -1,   520,    -1,    -1,
      -1,    -1,    -1,   526,   527,    -1,    -1,    -1,   531,   532,
     533,     3,     4,     5,     6,     7,     8,     9,    10,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    -1,
      32,    33,    34,    -1,    -1,    -1,    -1,    -1,    40,    41,
      -1,    -1,    44,    45,    46,    -1,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    58,    59,    -1,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
      72,    73,    -1,    75,    76,    77,    78,    79,    -1,    81,
      -1,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    -1,    94,    95,    96,    97,    98,    99,    -1,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,    -1,   118,   119,   120,   121,
     122,   123,    -1,   125,   126,   127,   128,   129,   130,    -1,
      -1,   133,   134,   135,   136,   137,   138,   139,    -1,   141,
     142,   143,    -1,   145,   146,   147,    -1,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,   160,   161,
      -1,   163,   164,   165,   166,    -1,   168,    -1,   170,   171,
      -1,   173,   174,   175,   176,   177,   178,    -1,   180,   181,
      -1,    -1,   184,   185,   186,   187,    -1,   189,   190,   191,
     192,   193,   194,   195,   196,   197,   198,   199,   200,    -1,
     202,   203,   204,   205,   206,   207,   208,    -1,   210,   211,
     212,   213,   214,   215,   216,   217,   218,   219,    -1,   221,
      -1,   223,   224,   225,   226,   227,   228,   229,   230,   231,
     232,   233,   234,    -1,    -1,   237,   238,   239,   240,    -1,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     282,   283,   284,   285,   286,   287,   288,    -1,   290,   291,
      -1,    -1,   294,   295,   296,    -1,    -1,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,    -1,    -1,    -1,    -1,   321,
     322,   323,   324,   325,   326,   327,   328,   329,   330,    -1,
     332,   333,   334,   335,   336,   337,   338,   339,    -1,   341,
     342,   343,   344,   345,   346,   347,   348,    -1,   350,   351,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,    -1,   365,   366,   367,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,    -1,    -1,   385,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,    -1,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,   417,   418,    -1,   420,   421,
     422,   423,   424,   425,   426,   427,   428,   429,    -1,   431,
     432,    -1,   434,    -1,   436,   437,   438,   439,   440,   441,
     442,   443,   444,   445,   446,   447,   448,   449,    -1,    -1,
     452,   453,   454,    -1,   456,   457,   458,   459,    -1,   461,
     462,   463,   464,   465,   466,   467,    -1,   469,   470,   471,
     472,   473,   474,   475,   476,   477,    -1,    -1,   480,    -1,
      -1,   483,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,   498,   499,   500,   501,
     502,   503,   504,    -1,    -1,    -1,    -1,    -1,    -1,   511,
     512,   513,    -1,    -1,    -1,    -1,   518,    -1,   520,    -1,
      -1,    -1,    -1,    -1,   526,   527,    -1,    -1,    -1,    -1,
     532,   533,     3,     4,     5,     6,     7,     8,     9,    10,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    30,
      -1,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,    40,
      41,    -1,    -1,    44,    45,    46,    -1,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    58,    59,    -1,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    72,    73,    -1,    75,    76,    77,    78,    79,    -1,
      81,    -1,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    -1,    94,    95,    96,    97,    98,    99,    -1,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,    -1,   118,   119,   120,
     121,   122,   123,    -1,   125,   126,   127,   128,   129,   130,
      -1,    -1,   133,   134,   135,   136,   137,   138,   139,    -1,
     141,   142,   143,    -1,   145,   146,   147,    -1,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
     161,    -1,   163,   164,   165,   166,    -1,   168,    -1,   170,
     171,    -1,   173,   174,   175,   176,   177,   178,    -1,   180,
     181,    -1,    -1,   184,   185,   186,   187,    -1,   189,   190,
     191,   192,   193,   194,   195,   196,   197,   198,   199,   200,
      -1,   202,   203,   204,   205,   206,   207,   208,    -1,   210,
     211,   212,   213,   214,   215,   216,   217,   218,   219,    -1,
     221,    -1,   223,   224,   225,   226,   227,   228,   229,   230,
     231,   232,   233,   234,    -1,    -1,   237,   238,   239,   240,
      -1,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,   287,   288,    -1,   290,
     291,    -1,    -1,   294,   295,   296,    -1,    -1,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,    -1,    -1,    -1,    -1,
     321,   322,   323,   324,   325,   326,   327,   328,   329,   330,
      -1,   332,   333,   334,   335,   336,   337,   338,   339,    -1,
     341,   342,   343,   344,   345,   346,   347,   348,    -1,   350,
     351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,    -1,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,    -1,    -1,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
      -1,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,   417,   418,    -1,   420,
     421,    -1,   423,   424,   425,   426,   427,   428,   429,    -1,
     431,   432,    -1,   434,    -1,   436,   437,   438,   439,   440,
     441,   442,   443,   444,   445,   446,   447,   448,   449,    -1,
      -1,   452,   453,   454,    -1,   456,   457,   458,   459,    -1,
     461,   462,   463,   464,   465,   466,   467,    -1,   469,   470,
     471,   472,   473,   474,   475,   476,   477,    -1,    -1,   480,
      -1,    -1,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,   499,   500,
     501,   502,   503,   504,    -1,    -1,    -1,    -1,    -1,    -1,
     511,   512,   513,    -1,    -1,    -1,    -1,   518,    -1,   520,
      -1,    -1,    -1,    -1,    -1,   526,   527,    -1,    -1,    -1,
      -1,   532,   533,     3,     4,     5,     6,     7,     8,     9,
      10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    -1,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,
      40,    41,    -1,    -1,    44,    45,    46,    -1,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
      -1,    61,    62,    63,    64,    65,    66,    67,    68,    69,
      70,    71,    72,    73,    -1,    75,    76,    77,    78,    79,
      -1,    81,    -1,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    -1,    94,    95,    96,    97,    98,    99,
      -1,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,    -1,   118,   119,
     120,   121,   122,   123,    -1,   125,   126,   127,   128,   129,
     130,    -1,    -1,   133,   134,   135,   136,   137,   138,   139,
      -1,   141,   142,   143,    -1,   145,   146,   147,    -1,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
     160,   161,    -1,   163,   164,   165,   166,    -1,   168,    -1,
     170,   171,    -1,   173,   174,   175,   176,   177,   178,    -1,
     180,   181,    -1,    -1,   184,   185,   186,   187,    -1,   189,
     190,   191,   192,   193,   194,   195,   196,   197,   198,   199,
     200,    -1,   202,   203,   204,   205,   206,   207,   208,    -1,
     210,   211,   212,   213,   214,   215,   216,   217,   218,   219,
      -1,   221,    -1,   223,   224,   225,   226,   227,   228,   229,
     230,   231,   232,   233,   234,    -1,    -1,   237,   238,   239,
     240,    -1,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
     280,   281,   282,   283,   284,   285,   286,   287,   288,    -1,
     290,   291,    -1,    -1,   294,   295,   296,    -1,    -1,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,    -1,    -1,    -1,
      -1,   321,   322,   323,   324,   325,   326,   327,   328,   329,
     330,    -1,   332,   333,   334,   335,   336,   337,   338,   339,
      -1,   341,   342,   343,   344,   345,   346,   347,   348,    -1,
     350,   351,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,    -1,   365,   366,   367,   368,   369,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,    -1,    -1,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,    -1,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,   417,   418,    -1,
     420,   421,    -1,   423,   424,   425,   426,   427,   428,   429,
      -1,   431,   432,    -1,   434,    -1,   436,   437,   438,   439,
     440,   441,   442,   443,   444,   445,   446,   447,   448,   449,
      -1,    -1,   452,   453,   454,    -1,   456,   457,   458,   459,
      -1,   461,   462,   463,   464,   465,   466,   467,    -1,   469,
     470,   471,   472,   473,   474,   475,   476,   477,    -1,    -1,
     480,    -1,    -1,   483,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,   498,   499,
     500,   501,   502,   503,   504,    -1,    -1,    -1,    -1,    -1,
      -1,   511,   512,   513,    -1,    -1,    -1,    -1,   518,    -1,
     520,    -1,    -1,    -1,    -1,    -1,   526,   527,    -1,    -1,
      -1,    -1,   532,   533,     3,     4,     5,     6,     7,     8,
       9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    22,    23,    24,    25,    26,    27,    28,
      29,    30,    -1,    32,    33,    34,    -1,    -1,    -1,    -1,
      -1,    40,    41,    -1,    -1,    44,    45,    46,    -1,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    58,
      59,    -1,    61,    62,    63,    64,    65,    66,    67,    68,
      69,    70,    71,    72,    73,    -1,    75,    76,    77,    78,
      79,    -1,    81,    -1,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    -1,    94,    95,    96,    97,    98,
      99,    -1,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,    -1,   118,
     119,   120,   121,   122,   123,    -1,   125,   126,   127,   128,
     129,   130,    -1,    -1,   133,   134,   135,   136,   137,   138,
     139,    -1,   141,   142,   143,    -1,   145,   146,   147,    -1,
     149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
     159,   160,   161,    -1,   163,   164,   165,   166,    -1,   168,
      -1,   170,   171,    -1,   173,   174,   175,   176,   177,   178,
      -1,   180,   181,    -1,    -1,   184,   185,   186,   187,    -1,
     189,   190,   191,   192,   193,   194,   195,   196,   197,   198,
     199,   200,    -1,   202,   203,   204,   205,   206,   207,   208,
      -1,   210,   211,   212,   213,   214,   215,   216,   217,   218,
     219,    -1,   221,    -1,   223,   224,   225,   226,   227,   228,
     229,   230,   231,   232,   233,   234,    -1,    -1,   237,   238,
     239,   240,    -1,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
      -1,   290,   291,    -1,    -1,   294,   295,   296,    -1,    -1,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,    -1,    -1,
      -1,    -1,   321,   322,   323,   324,   325,   326,   327,   328,
     329,   330,    -1,   332,   333,   334,   335,   336,   337,   338,
     339,    -1,   341,   342,   343,   344,   345,   346,   347,   348,
      -1,   350,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,    -1,   365,   366,   367,   368,
     369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,    -1,    -1,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,    -1,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,   417,   418,
      -1,   420,   421,    -1,   423,   424,   425,   426,   427,   428,
     429,    -1,   431,   432,    -1,   434,    -1,   436,   437,   438,
     439,   440,   441,   442,   443,   444,   445,   446,   447,   448,
     449,    -1,    -1,   452,   453,   454,    -1,   456,   457,   458,
     459,    -1,   461,   462,   463,   464,   465,   466,   467,    -1,
     469,   470,   471,   472,   473,   474,   475,   476,   477,    -1,
      -1,   480,    -1,    -1,   483,   484,   485,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
     499,   500,   501,   502,   503,   504,    -1,    -1,    -1,    -1,
      -1,    -1,   511,   512,   513,    -1,    -1,    -1,    -1,   518,
      -1,   520,    -1,    -1,    -1,    -1,    -1,   526,   527,    -1,
      -1,    -1,    -1,   532,   533,     3,     4,     5,     6,     7,
       8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    -1,    32,    33,    34,    -1,    -1,    -1,
      -1,    -1,    40,    41,    -1,    -1,    44,    45,    46,    -1,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      58,    59,    -1,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    72,    73,    -1,    75,    76,    77,
      78,    79,    -1,    81,    -1,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    -1,    94,    95,    96,    97,
      98,    99,    -1,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,    -1,
     118,   119,   120,   121,   122,   123,    -1,   125,   126,   127,
     128,   129,   130,    -1,    -1,   133,   134,   135,   136,   137,
     138,   139,    -1,   141,   142,   143,    -1,   145,   146,   147,
      -1,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,   159,   160,   161,    -1,   163,   164,   165,   166,    -1,
     168,    -1,   170,   171,    -1,   173,   174,   175,   176,   177,
     178,    -1,   180,   181,    -1,    -1,   184,   185,   186,   187,
      -1,   189,   190,   191,   192,   193,   194,   195,   196,   197,
     198,   199,   200,    -1,   202,   203,   204,   205,   206,   207,
     208,    -1,   210,   211,   212,   213,   214,   215,   216,   217,
     218,   219,    -1,   221,    -1,   223,   224,   225,   226,   227,
     228,   229,   230,   231,   232,   233,   234,    -1,    -1,   237,
     238,   239,   240,    -1,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
     288,    -1,   290,   291,    -1,    -1,   294,   295,   296,    -1,
      -1,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,    -1,
      -1,    -1,    -1,   321,   322,   323,   324,   325,   326,   327,
     328,   329,   330,    -1,   332,   333,   334,   335,   336,   337,
     338,   339,    -1,   341,   342,   343,   344,   345,   346,   347,
     348,    -1,   350,   351,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,    -1,   365,   366,   367,
     368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,    -1,    -1,   385,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,    -1,   402,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,   417,
     418,    -1,   420,   421,    -1,   423,   424,   425,   426,   427,
     428,   429,    -1,   431,   432,    -1,   434,    -1,   436,   437,
     438,   439,   440,   441,   442,   443,   444,   445,   446,   447,
     448,   449,    -1,    -1,   452,   453,   454,    -1,   456,   457,
     458,   459,    -1,   461,   462,   463,   464,   465,   466,   467,
      -1,   469,   470,   471,   472,   473,   474,   475,   476,   477,
      -1,    -1,   480,    -1,    -1,   483,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,   499,   500,   501,   502,   503,   504,    -1,    -1,    -1,
      -1,    -1,    -1,   511,   512,   513,    -1,    -1,    -1,    -1,
     518,    -1,   520,    -1,    -1,    -1,    -1,    -1,   526,   527,
      -1,    -1,    -1,    -1,   532,   533,     3,     4,     5,     6,
       7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    -1,    32,    33,    34,    -1,    -1,
      -1,    -1,    -1,    40,    41,    -1,    -1,    44,    45,    46,
      -1,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    58,    59,    -1,    61,    62,    63,    64,    65,    66,
      67,    68,    69,    70,    71,    72,    73,    -1,    75,    76,
      77,    78,    79,    -1,    81,    -1,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    -1,    94,    95,    96,
      97,    98,    99,    -1,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
      -1,   118,   119,   120,   121,   122,   123,    -1,   125,   126,
     127,   128,   129,   130,    -1,    -1,   133,   134,   135,   136,
     137,   138,   139,    -1,   141,   142,   143,    -1,   145,   146,
     147,    -1,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,   160,   161,    -1,   163,   164,   165,   166,
      -1,   168,    -1,   170,   171,    -1,   173,   174,   175,   176,
     177,   178,    -1,   180,   181,    -1,    -1,   184,   185,   186,
     187,    -1,   189,   190,   191,   192,   193,   194,   195,   196,
     197,   198,   199,   200,    -1,   202,   203,   204,   205,   206,
     207,   208,    -1,   210,   211,   212,   213,   214,   215,   216,
     217,   218,   219,    -1,   221,    -1,   223,   224,   225,   226,
     227,   228,   229,   230,   231,   232,   233,   234,    -1,    -1,
     237,   238,   239,   240,    -1,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     287,   288,    -1,   290,   291,    -1,    -1,   294,   295,   296,
      -1,    -1,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
      -1,    -1,    -1,    -1,   321,   322,   323,   324,   325,   326,
     327,   328,   329,   330,    -1,   332,   333,   334,   335,   336,
     337,   338,   339,    -1,   341,   342,   343,   344,   345,   346,
     347,   348,    -1,   350,   351,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,    -1,   365,   366,
     367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,    -1,    -1,   385,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,    -1,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
     417,   418,    -1,   420,   421,    -1,   423,   424,   425,   426,
     427,   428,   429,    -1,   431,   432,    -1,   434,    -1,   436,
     437,   438,   439,   440,   441,   442,   443,   444,   445,   446,
     447,   448,   449,    -1,    -1,   452,   453,   454,    -1,   456,
     457,   458,   459,    -1,   461,   462,   463,   464,   465,   466,
     467,    -1,   469,   470,   471,   472,   473,   474,   475,   476,
     477,    -1,    -1,   480,    -1,    -1,   483,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,   498,   499,   500,   501,   502,   503,   504,    -1,    -1,
      -1,    -1,    -1,    -1,   511,   512,   513,    -1,    -1,    -1,
      -1,   518,    -1,   520,    -1,    -1,    -1,    -1,    -1,   526,
     527,    -1,    -1,    -1,    -1,   532,   533,     3,     4,     5,
       6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    -1,    32,    33,    34,    -1,
      -1,    -1,    -1,    -1,    40,    41,    -1,    -1,    44,    45,
      46,    -1,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    -1,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    -1,    75,
      76,    77,    78,    79,    -1,    81,    -1,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    -1,    94,    95,
      96,    97,    98,    99,    -1,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,    -1,   118,   119,   120,   121,   122,   123,    -1,   125,
     126,   127,   128,   129,   130,    -1,    -1,   133,   134,   135,
     136,   137,   138,   139,    -1,   141,   142,   143,    -1,   145,
     146,   147,    -1,   149,   150,   151,   152,   153,   154,   155,
     156,   157,   158,   159,   160,   161,    -1,   163,   164,   165,
     166,    -1,   168,    -1,   170,   171,    -1,   173,   174,   175,
     176,   177,   178,    -1,   180,   181,    -1,    -1,   184,   185,
     186,   187,    -1,   189,   190,   191,   192,   193,   194,   195,
     196,   197,   198,   199,   200,    -1,   202,   203,   204,   205,
     206,   207,   208,    -1,   210,   211,   212,   213,   214,   215,
     216,   217,   218,   219,    -1,   221,    -1,   223,   224,   225,
     226,   227,   228,   229,   230,   231,   232,   233,   234,    -1,
      -1,   237,   238,   239,   240,    -1,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
     286,   287,   288,    -1,   290,   291,    -1,    -1,   294,   295,
     296,    -1,    -1,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,    -1,    -1,    -1,    -1,   321,   322,   323,   324,   325,
     326,   327,   328,   329,   330,    -1,   332,   333,   334,   335,
     336,   337,   338,   339,    -1,   341,   342,   343,   344,   345,
     346,   347,   348,    -1,   350,   351,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,    -1,   365,
     366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,    -1,    -1,   385,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,    -1,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,   417,   418,    -1,   420,   421,    -1,   423,   424,   425,
     426,   427,   428,   429,    -1,   431,   432,    -1,   434,    -1,
     436,   437,   438,   439,   440,   441,   442,   443,   444,   445,
     446,   447,   448,   449,    -1,    -1,   452,   453,   454,    -1,
     456,   457,   458,   459,    -1,   461,   462,   463,   464,   465,
     466,   467,    -1,   469,   470,   471,   472,   473,   474,   475,
     476,   477,    -1,    -1,   480,    -1,    -1,   483,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,   498,   499,   500,   501,   502,   503,   504,    -1,
      -1,    -1,    -1,    -1,    -1,   511,   512,   513,    -1,    -1,
      -1,    -1,   518,    -1,   520,    -1,    -1,    -1,    -1,    -1,
     526,   527,    -1,    -1,    -1,    -1,   532,   533,     3,     4,
       5,     6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    -1,    32,    33,    34,
      -1,    -1,    -1,    -1,    -1,    40,    41,    -1,    -1,    44,
      45,    46,    -1,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    -1,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    -1,
      75,    76,    77,    78,    79,    -1,    81,    -1,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    -1,    94,
      95,    96,    97,    98,    99,    -1,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,    -1,   118,   119,   120,   121,   122,   123,    -1,
     125,   126,   127,   128,   129,   130,    -1,    -1,   133,   134,
     135,   136,   137,   138,   139,    -1,   141,   142,   143,    -1,
     145,   146,   147,    -1,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   161,    -1,   163,   164,
     165,   166,    -1,   168,    -1,   170,   171,    -1,   173,   174,
     175,   176,   177,   178,    -1,   180,   181,    -1,    -1,   184,
     185,   186,   187,    -1,   189,   190,   191,   192,   193,   194,
     195,   196,   197,   198,   199,   200,    -1,   202,   203,   204,
     205,   206,   207,   208,    -1,   210,   211,   212,   213,   214,
     215,   216,   217,   218,   219,    -1,   221,    -1,   223,   224,
     225,   226,   227,   228,   229,   230,   231,   232,   233,   234,
      -1,    -1,   237,   238,   239,   240,    -1,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,    -1,   290,   291,    -1,    -1,   294,
     295,   296,    -1,    -1,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,    -1,    -1,    -1,    -1,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,    -1,   332,   333,   334,
     335,   336,   337,   338,   339,    -1,   341,   342,   343,   344,
     345,   346,   347,   348,    -1,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,    -1,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,    -1,    -1,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,    -1,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,    -1,   420,   421,    -1,   423,   424,
     425,   426,   427,   428,   429,    -1,   431,   432,    -1,   434,
      -1,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,    -1,    -1,   452,   453,   454,
      -1,   456,   457,   458,   459,    -1,   461,   462,   463,   464,
     465,   466,   467,    -1,   469,   470,   471,   472,   473,   474,
     475,   476,   477,    -1,    -1,   480,    -1,    -1,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
      -1,    -1,    -1,    -1,    -1,    -1,   511,   512,   513,    -1,
      -1,    -1,    -1,   518,    -1,   520,    -1,    -1,    -1,    -1,
      -1,   526,   527,    -1,    -1,    -1,    -1,   532,   533,     3,
       4,     5,     6,     7,     8,     9,    10,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    -1,    32,    33,
      34,    -1,    -1,    -1,    -1,    -1,    40,    41,    -1,    -1,
      44,    45,    46,    -1,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    58,    59,    -1,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
      -1,    75,    76,    77,    78,    79,    -1,    81,    -1,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    -1,
      94,    95,    96,    97,    98,    99,    -1,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,    -1,   118,   119,   120,   121,   122,   123,
      -1,   125,   126,   127,   128,   129,   130,    -1,    -1,   133,
     134,   135,   136,   137,   138,   139,    -1,   141,   142,   143,
      -1,   145,   146,   147,    -1,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,   159,   160,   161,    -1,   163,
     164,   165,   166,    -1,   168,    -1,   170,   171,    -1,   173,
     174,   175,   176,   177,   178,    -1,   180,   181,    -1,    -1,
     184,   185,   186,   187,    -1,   189,   190,   191,   192,   193,
     194,   195,   196,   197,   198,   199,   200,    -1,   202,   203,
     204,   205,   206,   207,   208,    -1,   210,   211,   212,   213,
     214,   215,   216,   217,   218,   219,    -1,   221,    -1,   223,
     224,   225,   226,   227,   228,   229,   230,   231,   232,   233,
     234,    -1,    -1,   237,   238,   239,   240,    -1,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,    -1,   290,   291,    -1,    -1,
     294,   295,   296,    -1,    -1,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,    -1,    -1,    -1,    -1,   321,   322,   323,
     324,   325,   326,   327,   328,   329,   330,    -1,   332,   333,
     334,   335,   336,   337,   338,   339,    -1,   341,   342,   343,
     344,   345,   346,   347,   348,    -1,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
      -1,   365,   366,   367,   368,   369,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,    -1,
      -1,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,    -1,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,   417,   418,    -1,   420,   421,    -1,   423,
     424,   425,   426,   427,   428,   429,    -1,   431,   432,    -1,
     434,    -1,   436,   437,   438,   439,   440,   441,   442,   443,
     444,   445,   446,   447,   448,   449,    -1,    -1,   452,   453,
     454,    -1,   456,   457,   458,   459,    -1,   461,   462,   463,
     464,   465,   466,   467,    -1,   469,   470,   471,   472,   473,
     474,   475,   476,   477,    -1,    -1,   480,    -1,    -1,   483,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,   499,   500,   501,   502,   503,
     504,    -1,    -1,    -1,    -1,    -1,    -1,   511,   512,   513,
      -1,    -1,    -1,    -1,   518,    -1,   520,    -1,    -1,    -1,
      -1,    -1,   526,   527,    -1,    -1,    -1,    -1,   532,   533,
       3,     4,     5,     6,     7,     8,     9,    10,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,
      23,    24,    25,    26,    27,    28,    29,    30,    -1,    32,
      33,    34,    -1,    -1,    -1,    -1,    -1,    40,    41,    -1,
      -1,    44,    45,    46,    -1,    48,    49,    50,    51,    52,
      53,    54,    55,    56,    57,    58,    59,    -1,    61,    62,
      63,    64,    65,    66,    67,    68,    69,    70,    71,    72,
      73,    -1,    75,    76,    77,    78,    79,    -1,    81,    -1,
      83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      -1,    94,    95,    96,    97,    98,    99,    -1,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,    -1,   118,   119,   120,   121,   122,
     123,    -1,   125,   126,   127,   128,   129,   130,    -1,    -1,
     133,   134,   135,   136,   137,   138,   139,    -1,   141,   142,
     143,    -1,   145,   146,   147,    -1,   149,   150,   151,   152,
     153,   154,   155,   156,   157,   158,   159,   160,   161,    -1,
     163,   164,   165,   166,    -1,   168,    -1,   170,   171,    -1,
     173,   174,   175,   176,   177,   178,    -1,   180,   181,    -1,
      -1,   184,   185,   186,   187,    -1,   189,   190,   191,   192,
     193,   194,   195,   196,   197,   198,   199,   200,    -1,   202,
     203,   204,   205,   206,   207,   208,    -1,   210,   211,   212,
     213,   214,   215,   216,   217,   218,   219,    -1,   221,    -1,
     223,   224,   225,   226,   227,   228,   229,   230,   231,   232,
     233,   234,    -1,    -1,   237,   238,   239,   240,    -1,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,    -1,   290,   291,    -1,
      -1,   294,   295,   296,    -1,    -1,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,    -1,    -1,    -1,    -1,   321,   322,
     323,   324,   325,   326,   327,   328,   329,   330,    -1,   332,
     333,   334,   335,   336,   337,   338,   339,    -1,   341,   342,
     343,   344,   345,   346,   347,   348,    -1,   350,   351,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,    -1,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
      -1,    -1,   385,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,    -1,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,   417,   418,    -1,   420,   421,    -1,
     423,   424,   425,   426,   427,   428,   429,    -1,   431,   432,
      -1,   434,    -1,   436,   437,   438,   439,   440,   441,   442,
     443,   444,   445,   446,   447,   448,   449,    -1,    -1,   452,
     453,   454,    -1,   456,   457,   458,   459,    -1,   461,   462,
     463,   464,   465,   466,   467,    -1,   469,   470,   471,   472,
     473,   474,   475,   476,   477,    -1,    -1,   480,    -1,    -1,
     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   500,   501,   502,
     503,   504,    -1,    -1,    -1,    -1,    -1,    -1,   511,   512,
     513,    -1,    -1,    -1,    -1,   518,    -1,   520,    -1,    -1,
      -1,    -1,    -1,   526,   527,    -1,    -1,    -1,    -1,   532,
     533,     3,     4,     5,     6,     7,    -1,     9,    10,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    -1,
      32,    33,    34,    -1,    -1,    -1,    -1,    -1,    40,    41,
      -1,    -1,    44,    45,    46,    -1,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    58,    59,    -1,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
      72,    73,    -1,    75,    76,    77,    78,    79,    -1,    81,
      -1,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    -1,    94,    95,    96,    97,    98,    99,    -1,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,    -1,   116,    -1,   118,   119,   120,   121,
     122,   123,    -1,   125,   126,   127,   128,   129,   130,    -1,
      -1,   133,   134,   135,   136,   137,   138,   139,    -1,   141,
     142,   143,    -1,   145,   146,   147,    -1,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,   160,   161,
      -1,   163,   164,   165,   166,    -1,   168,    -1,   170,   171,
      -1,   173,   174,   175,   176,   177,   178,    -1,   180,   181,
      -1,    -1,   184,   185,   186,   187,    -1,   189,   190,   191,
     192,   193,   194,   195,   196,   197,   198,   199,   200,    -1,
     202,   203,   204,   205,   206,   207,   208,    -1,   210,   211,
     212,   213,   214,   215,   216,   217,   218,   219,    -1,   221,
      -1,   223,   224,   225,   226,   227,   228,   229,   230,   231,
     232,   233,   234,    -1,    -1,   237,   238,   239,   240,    -1,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     282,   283,   284,   285,   286,   287,   288,    -1,   290,   291,
      -1,    -1,   294,   295,   296,    -1,    -1,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,    -1,    -1,    -1,    -1,   321,
     322,   323,   324,   325,   326,   327,   328,   329,   330,    -1,
     332,   333,   334,   335,   336,   337,   338,   339,    -1,   341,
     342,   343,   344,   345,   346,   347,   348,    -1,   350,   351,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,    -1,   365,   366,   367,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,    -1,    -1,   385,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,    -1,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,   417,   418,    -1,   420,   421,
      -1,   423,   424,   425,   426,   427,   428,   429,    -1,   431,
     432,    -1,   434,    -1,   436,   437,   438,   439,   440,   441,
     442,   443,   444,   445,   446,   447,   448,   449,    -1,    -1,
     452,   453,   454,    -1,   456,   457,   458,   459,    -1,   461,
     462,   463,   464,   465,   466,   467,    -1,   469,   470,   471,
     472,   473,   474,   475,   476,   477,    -1,    -1,   480,    -1,
      -1,   483,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,   498,   499,   500,   501,
     502,   503,   504,    -1,    -1,    -1,    -1,    -1,    -1,   511,
     512,    -1,    -1,    -1,    -1,    -1,   518,    -1,   520,    -1,
      -1,    -1,    -1,    -1,   526,   527,    -1,    -1,    -1,    -1,
     532,   533,     3,     4,     5,     6,     7,     8,     9,    10,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    30,
      -1,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,    40,
      41,    -1,    -1,    44,    45,    46,    -1,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    58,    59,    -1,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    72,    73,    -1,    75,    76,    77,    78,    79,    -1,
      81,    -1,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    -1,    94,    95,    96,    97,    98,    99,    -1,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,    -1,   116,    -1,   118,   119,   120,
     121,   122,   123,    -1,   125,   126,   127,   128,   129,   130,
      -1,    -1,   133,   134,   135,   136,   137,   138,   139,    -1,
     141,   142,   143,    -1,   145,   146,   147,    -1,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
     161,    -1,   163,   164,   165,   166,    -1,   168,    -1,   170,
     171,    -1,   173,   174,   175,   176,   177,   178,    -1,   180,
     181,    -1,    -1,   184,   185,   186,   187,    -1,   189,   190,
     191,   192,   193,   194,   195,   196,   197,   198,   199,   200,
      -1,   202,   203,   204,   205,   206,   207,   208,    -1,   210,
     211,   212,   213,   214,   215,   216,   217,   218,   219,    -1,
     221,    -1,   223,   224,   225,   226,   227,   228,   229,   230,
     231,   232,   233,   234,    -1,    -1,   237,   238,   239,   240,
      -1,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,    -1,   278,   279,   280,
     281,   282,   283,   284,   285,   286,   287,   288,    -1,   290,
     291,    -1,    -1,   294,   295,   296,    -1,    -1,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,    -1,    -1,    -1,    -1,
     321,   322,   323,   324,   325,   326,   327,   328,   329,   330,
      -1,   332,   333,   334,   335,   336,   337,   338,   339,    -1,
     341,   342,   343,   344,   345,   346,   347,   348,    -1,   350,
     351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,    -1,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,    -1,    -1,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
      -1,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,   417,   418,    -1,   420,
     421,    -1,   423,   424,   425,   426,   427,   428,   429,    -1,
     431,   432,    -1,   434,    -1,   436,   437,   438,   439,   440,
     441,   442,   443,   444,   445,   446,   447,   448,   449,    -1,
      -1,   452,   453,   454,    -1,   456,   457,   458,   459,    -1,
     461,   462,   463,   464,   465,   466,   467,    -1,   469,   470,
     471,   472,   473,   474,   475,   476,   477,    -1,    -1,   480,
      -1,    -1,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,   499,   500,
     501,   502,   503,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     511,   512,    -1,    -1,    -1,    -1,    -1,   518,    -1,   520,
      -1,    -1,    -1,    -1,    -1,   526,   527,    -1,    -1,    -1,
      -1,   532,   533,     3,     4,     5,     6,     7,     8,     9,
      10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    -1,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,
      40,    41,    -1,    -1,    44,    45,    46,    -1,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
      -1,    61,    62,    63,    64,    65,    66,    67,    68,    69,
      70,    71,    72,    73,    -1,    75,    76,    77,    78,    79,
      -1,    81,    -1,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    -1,    94,    95,    96,    97,    98,    99,
      -1,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,    -1,   118,   119,
     120,   121,   122,   123,    -1,   125,   126,   127,   128,   129,
     130,    -1,    -1,   133,   134,   135,   136,   137,   138,   139,
      -1,   141,   142,   143,    -1,   145,   146,   147,    -1,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
     160,   161,    -1,   163,   164,   165,   166,    -1,   168,    -1,
     170,   171,    -1,   173,   174,   175,   176,   177,   178,    -1,
     180,   181,    -1,    -1,   184,   185,   186,   187,    -1,   189,
     190,   191,   192,   193,   194,   195,   196,   197,   198,   199,
     200,    -1,   202,   203,   204,   205,   206,   207,   208,    -1,
     210,   211,   212,   213,   214,   215,   216,   217,   218,   219,
      -1,   221,    -1,   223,    -1,    -1,   226,   227,   228,   229,
     230,   231,   232,   233,   234,    -1,    -1,   237,   238,   239,
     240,    -1,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,    -1,   278,   279,
      -1,   281,   282,   283,   284,   285,   286,   287,   288,    -1,
     290,   291,    -1,    -1,   294,   295,   296,    -1,    -1,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,    -1,    -1,    -1,
      -1,   321,   322,   323,   324,   325,   326,   327,   328,   329,
     330,    -1,   332,   333,   334,   335,   336,   337,   338,   339,
      -1,   341,   342,   343,   344,   345,   346,   347,   348,    -1,
     350,   351,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,    -1,   365,   366,   367,   368,   369,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,    -1,    -1,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,    -1,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,   417,   418,    -1,
     420,   421,    -1,   423,   424,   425,   426,   427,   428,   429,
      -1,   431,   432,    -1,   434,    -1,   436,   437,   438,   439,
     440,   441,   442,   443,   444,   445,   446,   447,   448,   449,
      -1,    -1,   452,   453,   454,    -1,   456,   457,   458,   459,
      -1,   461,   462,   463,   464,   465,   466,   467,    -1,   469,
     470,   471,   472,   473,   474,   475,   476,   477,    -1,    -1,
     480,    -1,    -1,   483,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,   498,   499,
     500,   501,   502,   503,   504,    -1,    -1,    -1,    -1,    -1,
      -1,   511,   512,   513,    -1,    -1,    -1,    -1,   518,    -1,
     520,    -1,    -1,    -1,    -1,    -1,   526,   527,    -1,    -1,
      -1,    -1,   532,   533,     3,     4,     5,     6,     7,    -1,
       9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    22,    23,    24,    25,    26,    27,    28,
      29,    30,    -1,    32,    33,    34,    -1,    -1,    -1,    -1,
      -1,    40,    41,    -1,    -1,    44,    45,    46,    -1,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    58,
      59,    -1,    61,    62,    63,    64,    65,    66,    67,    68,
      69,    70,    71,    72,    73,    -1,    75,    76,    77,    78,
      79,    -1,    81,    -1,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    -1,    94,    95,    96,    97,    98,
      99,    -1,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,    -1,   116,    -1,   118,
     119,   120,   121,   122,   123,    -1,   125,   126,   127,   128,
     129,   130,    -1,    -1,   133,   134,   135,   136,   137,   138,
     139,    -1,   141,   142,   143,    -1,   145,   146,   147,    -1,
     149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
     159,   160,   161,    -1,   163,   164,   165,   166,    -1,   168,
      -1,   170,   171,    -1,   173,   174,   175,   176,   177,   178,
      -1,   180,   181,    -1,    -1,   184,   185,   186,   187,    -1,
     189,   190,   191,   192,   193,   194,   195,   196,   197,   198,
     199,   200,    -1,   202,   203,   204,   205,   206,   207,   208,
      -1,   210,   211,   212,   213,   214,   215,   216,   217,   218,
     219,    -1,   221,    -1,   223,   224,   225,   226,   227,   228,
     229,   230,   231,   232,   233,   234,    -1,    -1,   237,   238,
     239,   240,    -1,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,    -1,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
      -1,   290,   291,    -1,    -1,   294,   295,   296,    -1,    -1,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,    -1,    -1,
      -1,    -1,   321,   322,   323,   324,   325,   326,   327,   328,
     329,   330,    -1,   332,   333,   334,   335,   336,   337,   338,
     339,    -1,   341,   342,   343,   344,   345,   346,   347,   348,
      -1,   350,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,    -1,   365,   366,   367,   368,
     369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,    -1,    -1,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,    -1,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,   417,   418,
      -1,   420,   421,    -1,   423,   424,   425,   426,   427,   428,
     429,    -1,   431,   432,    -1,   434,    -1,   436,   437,   438,
     439,   440,   441,   442,   443,   444,   445,   446,   447,   448,
     449,    -1,    -1,   452,   453,   454,    -1,   456,   457,   458,
     459,    -1,   461,   462,   463,   464,   465,   466,   467,    -1,
     469,   470,   471,   472,   473,   474,   475,   476,   477,    -1,
      -1,   480,    -1,    -1,   483,   484,   485,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
     499,   500,   501,   502,   503,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   511,   512,    -1,    -1,    -1,    -1,    -1,   518,
      -1,   520,    -1,    -1,    -1,    -1,    -1,   526,   527,    -1,
      -1,    -1,    -1,   532,   533,     3,     4,     5,     6,     7,
       8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    -1,    32,    33,    34,    -1,    -1,    -1,
      -1,    -1,    40,    41,    -1,    -1,    44,    45,    46,    -1,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      58,    59,    -1,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    72,    73,    -1,    75,    76,    77,
      78,    79,    -1,    81,    -1,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    -1,    94,    95,    96,    97,
      98,    99,    -1,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,    -1,   116,    -1,
     118,   119,   120,   121,   122,   123,    -1,   125,   126,   127,
     128,   129,   130,    -1,    -1,   133,   134,   135,   136,   137,
     138,   139,    -1,   141,   142,   143,    -1,   145,   146,   147,
      -1,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,   159,   160,   161,    -1,   163,   164,   165,   166,    -1,
     168,    -1,   170,   171,    -1,   173,   174,   175,   176,   177,
     178,    -1,   180,   181,    -1,    -1,   184,   185,   186,   187,
      -1,   189,   190,   191,   192,   193,   194,   195,   196,   197,
     198,   199,   200,    -1,   202,   203,   204,   205,   206,   207,
     208,    -1,   210,   211,   212,   213,   214,   215,   216,   217,
     218,   219,    -1,   221,    -1,   223,    -1,   225,   226,   227,
     228,   229,   230,   231,   232,   233,   234,    -1,    -1,   237,
     238,   239,   240,    -1,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,    -1,
     278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
     288,    -1,   290,   291,    -1,    -1,   294,   295,   296,    -1,
      -1,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,    -1,
      -1,    -1,    -1,   321,   322,   323,   324,   325,   326,   327,
     328,   329,   330,    -1,   332,   333,   334,   335,   336,   337,
     338,   339,    -1,   341,   342,   343,   344,   345,   346,   347,
     348,    -1,   350,   351,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,    -1,   365,   366,   367,
     368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,    -1,    -1,   385,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,    -1,   402,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,   417,
     418,    -1,   420,   421,    -1,   423,   424,   425,   426,   427,
     428,   429,    -1,   431,   432,    -1,   434,    -1,   436,   437,
     438,   439,   440,   441,   442,   443,   444,   445,   446,   447,
     448,   449,    -1,    -1,   452,   453,   454,    -1,   456,   457,
     458,   459,    -1,   461,   462,   463,   464,   465,   466,   467,
      -1,   469,   470,   471,   472,   473,   474,   475,   476,   477,
      -1,    -1,   480,    -1,    -1,   483,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,   499,   500,   501,   502,   503,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   511,   512,    -1,    -1,    -1,    -1,    -1,
     518,    -1,   520,    -1,    -1,    -1,    -1,    -1,   526,   527,
      -1,    -1,    -1,    -1,   532,   533,     3,     4,     5,     6,
       7,    -1,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    -1,    32,    33,    34,    -1,    -1,
      -1,    -1,    -1,    40,    41,    -1,    -1,    44,    45,    46,
      -1,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    58,    59,    -1,    61,    62,    63,    64,    65,    66,
      67,    68,    69,    70,    71,    72,    73,    -1,    75,    76,
      77,    78,    79,    -1,    81,    -1,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    -1,    94,    95,    96,
      97,    98,    99,    -1,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,    -1,   116,
      -1,   118,   119,   120,   121,   122,   123,    -1,   125,   126,
     127,   128,   129,   130,    -1,    -1,   133,   134,   135,   136,
     137,   138,   139,    -1,   141,   142,   143,    -1,   145,   146,
     147,    -1,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,   160,   161,    -1,   163,   164,   165,   166,
      -1,   168,    -1,   170,   171,    -1,   173,   174,   175,   176,
     177,   178,    -1,   180,   181,    -1,    -1,   184,   185,   186,
     187,    -1,   189,   190,   191,   192,   193,   194,   195,   196,
     197,   198,   199,   200,    -1,   202,   203,   204,   205,   206,
     207,   208,    -1,   210,   211,   212,   213,   214,   215,   216,
     217,   218,   219,    -1,   221,    -1,   223,   224,   225,   226,
     227,   228,   229,   230,   231,   232,   233,   234,    -1,    -1,
     237,   238,   239,   240,    -1,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
      -1,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     287,   288,    -1,   290,   291,    -1,    -1,   294,   295,   296,
      -1,    -1,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
      -1,    -1,    -1,    -1,   321,   322,   323,   324,   325,   326,
     327,   328,   329,   330,    -1,   332,   333,   334,   335,   336,
     337,   338,   339,    -1,   341,   342,   343,   344,   345,   346,
     347,   348,    -1,   350,   351,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,    -1,   365,   366,
     367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,    -1,    -1,   385,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,    -1,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
     417,   418,    -1,   420,   421,    -1,   423,   424,   425,   426,
     427,   428,   429,    -1,   431,   432,    -1,   434,    -1,   436,
     437,   438,   439,   440,   441,   442,   443,   444,   445,   446,
     447,   448,   449,    -1,    -1,   452,   453,   454,    -1,   456,
     457,   458,   459,    -1,   461,   462,   463,   464,   465,   466,
     467,    -1,   469,   470,   471,   472,   473,   474,   475,   476,
     477,    -1,    -1,   480,    -1,    -1,   483,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,   498,   499,   500,   501,   502,   503,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   518,    -1,   520,    -1,    -1,    -1,    -1,    -1,   526,
     527,    -1,    -1,    -1,    -1,   532,   533,     3,     4,     5,
       6,     7,    -1,     9,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    -1,    32,    33,    34,    -1,
      -1,    -1,    -1,    -1,    40,    41,    -1,    -1,    44,    45,
      46,    -1,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    -1,    61,    62,    63,    64,    65,
      66,    67,    -1,    69,    70,    71,    72,    73,    -1,    75,
      76,    77,    78,    79,    -1,    81,    -1,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    -1,    94,    95,
      96,    97,    98,    99,    -1,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,    -1,
     116,    -1,   118,   119,   120,   121,   122,   123,    -1,   125,
     126,   127,   128,   129,   130,    -1,    -1,   133,   134,   135,
     136,   137,   138,   139,    -1,   141,   142,   143,    -1,   145,
     146,   147,    -1,   149,   150,   151,   152,   153,   154,   155,
     156,   157,   158,   159,   160,   161,    -1,   163,   164,   165,
     166,    -1,   168,    -1,   170,   171,    -1,   173,   174,   175,
     176,   177,   178,    -1,   180,   181,    -1,   183,   184,   185,
     186,   187,    -1,   189,   190,   191,   192,   193,   194,   195,
     196,   197,   198,   199,   200,    -1,   202,   203,   204,   205,
     206,   207,   208,    -1,   210,   211,   212,   213,   214,   215,
     216,   217,   218,   219,    -1,   221,    -1,   223,   224,   225,
     226,   227,   228,   229,   230,   231,   232,   233,   234,    -1,
      -1,   237,   238,   239,   240,    -1,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,    -1,   278,   279,   280,   281,   282,   283,   284,   285,
     286,   287,   288,    -1,   290,   291,    -1,    -1,   294,   295,
     296,    -1,    -1,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,    -1,    -1,    -1,    -1,   321,   322,   323,   324,   325,
     326,   327,   328,   329,   330,    -1,   332,   333,   334,   335,
     336,   337,   338,   339,    -1,   341,   342,   343,   344,   345,
     346,   347,   348,    -1,   350,   351,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,    -1,   365,
     366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,    -1,    -1,   385,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,    -1,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,   417,   418,    -1,   420,   421,    -1,   423,   424,   425,
     426,   427,   428,   429,    -1,   431,   432,    -1,   434,    -1,
     436,   437,   438,   439,   440,   441,   442,   443,   444,   445,
     446,   447,   448,   449,    -1,    -1,   452,   453,   454,    -1,
     456,   457,   458,   459,    -1,   461,   462,   463,   464,   465,
     466,   467,    -1,   469,   470,   471,   472,   473,   474,   475,
     476,   477,    -1,    -1,   480,    -1,    -1,   483,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,   498,   499,   500,   501,   502,   503,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   518,    -1,   520,     3,     4,     5,     6,     7,
       8,     9,    10,    -1,    -1,    -1,   532,   533,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    -1,    32,    33,    34,    -1,    -1,    -1,
      -1,    -1,    40,    41,    -1,    -1,    44,    45,    46,    -1,
      48,    49,    50,    51,    52,    53,    54,    -1,    56,    57,
      58,    59,    -1,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    72,    73,    -1,    75,    76,    77,
      78,    79,    -1,    81,    -1,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    -1,    94,    95,    96,    97,
      98,    99,    -1,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,    -1,
     118,   119,   120,   121,   122,   123,    -1,   125,   126,   127,
     128,   129,   130,    -1,    -1,   133,   134,   135,   136,   137,
     138,   139,    -1,   141,   142,   143,    -1,   145,    -1,   147,
      -1,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,   159,   160,   161,    -1,   163,   164,   165,   166,    -1,
     168,    -1,   170,   171,    -1,   173,   174,   175,   176,    -1,
     178,    -1,   180,   181,    -1,    -1,   184,   185,   186,   187,
      -1,   189,   190,   191,   192,   193,   194,   195,    -1,   197,
     198,   199,   200,    -1,   202,   203,   204,   205,   206,   207,
     208,    -1,   210,   211,   212,   213,   214,   215,   216,   217,
     218,   219,    -1,   221,    -1,   223,    -1,    -1,   226,   227,
     228,   229,   230,   231,   232,   233,   234,    -1,    -1,   237,
     238,   239,    -1,    -1,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,    -1,
     278,   279,    -1,   281,   282,   283,   284,   285,   286,   287,
     288,    -1,   290,   291,    -1,    -1,   294,   295,   296,    -1,
      -1,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,    -1,
      -1,    -1,    -1,   321,   322,   323,   324,   325,   326,   327,
     328,   329,   330,    -1,   332,   333,   334,   335,   336,   337,
     338,   339,    -1,   341,   342,   343,   344,   345,   346,   347,
     348,    -1,   350,   351,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,    -1,   365,   366,   367,
     368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,    -1,    -1,   385,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,    -1,   397,
     398,   399,   400,    -1,   402,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,   417,
     418,    -1,   420,   421,    -1,   423,   424,   425,   426,   427,
     428,   429,    -1,   431,   432,    -1,   434,    -1,   436,   437,
     438,   439,   440,   441,   442,   443,   444,   445,   446,   447,
     448,   449,    -1,    -1,   452,   453,   454,    -1,   456,   457,
     458,   459,    -1,   461,   462,   463,   464,   465,   466,   467,
      -1,   469,   470,   471,   472,   473,   474,   475,   476,   477,
      -1,    -1,   480,    -1,    -1,   483,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,   499,   500,   501,   502,   503,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   511,   512,   513,    -1,    -1,    -1,    -1,
     518,    -1,   520,    -1,    -1,    -1,    -1,    -1,   526,   527,
      -1,    -1,    -1,    -1,   532,   533,     3,     4,     5,     6,
       7,    -1,     9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    -1,    32,    33,    34,    -1,    -1,
      -1,    -1,    -1,    40,    41,    -1,    -1,    44,    45,    46,
      -1,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    58,    59,    -1,    61,    62,    63,    64,    65,    66,
      67,    -1,    69,    70,    71,    72,    73,    -1,    75,    76,
      77,    78,    79,    -1,    81,    -1,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    -1,    94,    95,    96,
      97,    98,    99,    -1,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,    -1,   116,
      -1,   118,   119,   120,   121,   122,   123,    -1,   125,   126,
     127,   128,   129,   130,    -1,    -1,   133,   134,   135,   136,
     137,   138,   139,    -1,   141,   142,   143,    -1,   145,   146,
     147,    -1,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,   160,   161,    -1,   163,   164,   165,   166,
      -1,   168,    -1,   170,   171,    -1,   173,   174,   175,   176,
     177,   178,    -1,   180,   181,    -1,    -1,   184,   185,   186,
     187,    -1,   189,   190,   191,   192,   193,   194,   195,   196,
     197,   198,   199,   200,    -1,   202,   203,   204,   205,   206,
     207,   208,    -1,   210,   211,   212,   213,   214,   215,   216,
     217,   218,   219,    -1,   221,    -1,   223,   224,   225,   226,
     227,   228,   229,   230,   231,   232,   233,   234,    -1,    -1,
     237,   238,   239,   240,    -1,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
      -1,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     287,   288,    -1,   290,   291,    -1,    -1,   294,   295,   296,
      -1,    -1,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
      -1,    -1,    -1,    -1,   321,   322,   323,   324,   325,   326,
     327,   328,   329,   330,    -1,   332,   333,   334,   335,   336,
     337,   338,   339,    -1,   341,   342,   343,   344,   345,   346,
     347,   348,    -1,   350,   351,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,    -1,   365,   366,
     367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,    -1,    -1,   385,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,    -1,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
     417,   418,    -1,   420,   421,    -1,   423,   424,   425,   426,
     427,   428,   429,    -1,   431,   432,    -1,   434,    -1,   436,
     437,   438,   439,   440,   441,   442,   443,   444,   445,   446,
     447,   448,   449,    -1,    -1,   452,   453,   454,    -1,   456,
     457,   458,   459,    -1,   461,   462,   463,   464,   465,   466,
     467,    -1,   469,   470,   471,   472,   473,   474,   475,   476,
     477,    -1,    -1,   480,    -1,    -1,   483,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,   498,   499,   500,   501,   502,   503,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     3,    -1,
      -1,   518,    -1,   520,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   532,   533,    22,    23,    24,
      25,    -1,    27,    28,    29,    30,    -1,    32,    33,    34,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      45,    46,    -1,    48,    49,    50,    -1,    52,    53,    54,
      55,    56,    -1,    58,    59,    -1,    61,    62,    63,    64,
      65,    66,    -1,    -1,    69,    70,    71,    72,    73,    -1,
      75,    76,    77,    78,    79,    -1,    -1,    -1,    -1,    84,
      85,    86,    87,    88,    -1,    90,    91,    92,    -1,    94,
      95,    96,    97,    98,    -1,    -1,    -1,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
      -1,   116,    -1,   118,   119,   120,   121,   122,   123,    -1,
     125,    -1,   127,   128,   129,   130,    -1,    -1,   133,   134,
     135,   136,   137,    -1,    -1,    -1,   141,   142,   143,    -1,
     145,   146,   147,    -1,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,    -1,   161,    -1,   163,   164,
     165,   166,    -1,   168,    -1,   170,    -1,    -1,    -1,   174,
     175,   176,    -1,   178,    -1,   180,    -1,    -1,    -1,   184,
     185,    -1,   187,    -1,   189,   190,   191,   192,   193,   194,
     195,    -1,   197,   198,   199,   200,    -1,   202,   203,   204,
     205,   206,   207,   208,    -1,   210,    -1,   212,   213,   214,
     215,   216,   217,   218,   219,    -1,   221,    -1,   223,    -1,
      -1,   226,    -1,   228,    -1,   230,   231,   232,   233,   234,
      -1,    -1,   237,    -1,   239,    -1,    -1,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,    -1,   271,   272,   273,   274,
      -1,   276,    -1,   278,   279,    -1,   281,    -1,   283,   284,
     285,   286,   287,   288,    -1,   290,   291,    -1,    -1,   294,
     295,   296,    -1,    -1,   299,   300,    -1,   302,    -1,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,    -1,
      -1,   316,    -1,    -1,    -1,    -1,   321,   322,   323,    -1,
     325,   326,   327,   328,   329,   330,    -1,   332,   333,   334,
     335,   336,    -1,    -1,   339,    -1,   341,   342,   343,   344,
     345,   346,   347,   348,    -1,   350,   351,   352,    -1,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,    -1,
     365,   366,    -1,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,    -1,    -1,
     385,   386,   387,   388,   389,   390,   391,   392,   393,    -1,
     395,    -1,    -1,   398,   399,   400,    -1,    -1,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,    -1,   420,   421,    -1,   423,    -1,
     425,   426,   427,   428,   429,    -1,   431,   432,    -1,    -1,
      -1,   436,   437,   438,   439,   440,    -1,   442,   443,   444,
     445,   446,   447,   448,   449,    -1,    -1,   452,   453,   454,
      -1,   456,   457,   458,   459,    -1,   461,   462,   463,   464,
     465,   466,   467,    -1,   469,    -1,   471,    -1,   473,   474,
     475,   476,    -1,    -1,    -1,   480,    -1,    -1,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,     3,     4,     5,
      -1,    -1,    -1,     9,    -1,   520,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   530,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    -1,    32,    33,    34,    -1,
      -1,    -1,    38,    -1,    40,    -1,    -1,    -1,    44,    45,
      46,    -1,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    -1,    61,    62,    63,    64,    65,
      66,    -1,    -1,    69,    70,    71,    72,    73,    -1,    75,
      76,    77,    78,    79,    -1,    81,    -1,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    -1,    94,    95,
      96,    97,    98,    99,    -1,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,    -1,
     116,    -1,   118,   119,   120,   121,   122,   123,    -1,   125,
     126,   127,   128,   129,   130,    -1,    -1,   133,   134,   135,
     136,   137,   138,   139,    -1,   141,   142,   143,    -1,   145,
     146,   147,    -1,   149,   150,   151,   152,   153,   154,   155,
     156,   157,   158,   159,   160,   161,    -1,   163,   164,   165,
     166,    -1,   168,    -1,   170,   171,    -1,   173,   174,   175,
     176,   177,   178,    -1,   180,   181,    -1,    -1,   184,   185,
     186,   187,    -1,   189,   190,   191,   192,   193,   194,   195,
     196,   197,   198,   199,   200,    -1,   202,   203,   204,   205,
     206,   207,   208,    -1,   210,   211,   212,   213,   214,   215,
     216,   217,   218,   219,    -1,   221,    -1,   223,   224,   225,
     226,   227,   228,   229,   230,   231,   232,   233,   234,    -1,
      -1,   237,   238,   239,   240,    -1,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,    -1,   278,   279,   280,   281,    -1,   283,   284,   285,
     286,   287,   288,    -1,   290,   291,   292,    -1,   294,   295,
     296,    -1,    -1,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,    -1,    -1,    -1,    -1,   321,   322,   323,   324,   325,
     326,   327,   328,   329,   330,    -1,   332,   333,   334,   335,
     336,   337,   338,   339,    -1,   341,   342,   343,   344,   345,
     346,   347,   348,    -1,   350,   351,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,    -1,   365,
     366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,    -1,   384,   385,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,    -1,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,   417,   418,    -1,   420,   421,    -1,   423,   424,   425,
     426,   427,   428,   429,    -1,   431,   432,    -1,   434,    -1,
     436,   437,   438,   439,   440,   441,   442,   443,   444,   445,
     446,   447,   448,   449,    -1,    -1,   452,   453,   454,    -1,
     456,   457,   458,   459,    -1,   461,   462,   463,   464,   465,
     466,   467,    -1,   469,   470,   471,   472,   473,   474,   475,
     476,   477,    -1,    -1,   480,    -1,    -1,   483,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,   498,   499,   500,   501,   502,   503,    -1,    -1,
      -1,    -1,    -1,     3,    -1,   511,   512,   513,    -1,    -1,
      -1,    -1,    -1,    -1,   520,    -1,    -1,    -1,    -1,    -1,
      -1,   527,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    -1,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,
      40,    -1,    42,    -1,    -1,    45,    46,    -1,    48,    49,
      50,    -1,    52,    53,    54,    55,    56,    -1,    58,    59,
      -1,    61,    62,    63,    64,    65,    66,    -1,    -1,    69,
      70,    71,    72,    73,    -1,    75,    76,    77,    78,    79,
      -1,    -1,    -1,    83,    84,    85,    86,    87,    88,    -1,
      90,    91,    92,    -1,    94,    95,    96,    97,    98,    99,
      -1,    -1,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,    -1,   116,    -1,   118,   119,
     120,   121,   122,   123,    -1,   125,   126,   127,   128,   129,
     130,    -1,    -1,   133,   134,   135,   136,   137,   138,   139,
      -1,   141,   142,   143,    -1,   145,   146,   147,   148,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
      -1,   161,   162,   163,   164,   165,   166,   167,   168,    -1,
     170,    -1,    -1,    -1,   174,   175,   176,    -1,   178,    -1,
     180,   181,    -1,    -1,   184,   185,   186,   187,    -1,   189,
     190,   191,   192,   193,   194,   195,    -1,   197,   198,   199,
     200,    -1,   202,   203,   204,   205,   206,   207,   208,    -1,
     210,    -1,   212,   213,   214,   215,   216,   217,   218,   219,
     220,   221,    -1,   223,    -1,    -1,   226,    -1,   228,   229,
     230,   231,   232,   233,   234,    -1,    -1,   237,    -1,   239,
      -1,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
      -1,   271,   272,   273,   274,   275,   276,    -1,   278,   279,
      -1,   281,    -1,   283,   284,   285,   286,   287,   288,   289,
     290,   291,    -1,    -1,   294,   295,   296,    -1,   298,   299,
     300,    -1,   302,    -1,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,    -1,    -1,    -1,
      -1,   321,   322,   323,    -1,   325,   326,   327,   328,   329,
     330,    -1,   332,   333,   334,   335,   336,   337,   338,   339,
      -1,   341,   342,   343,   344,   345,   346,   347,   348,    -1,
     350,   351,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,    -1,   365,   366,    -1,   368,   369,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,    -1,    -1,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,    -1,   397,   398,   399,
     400,    -1,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,   417,   418,    -1,
     420,   421,    -1,   423,    -1,   425,   426,   427,   428,   429,
      -1,   431,   432,    -1,   434,    -1,   436,   437,   438,   439,
     440,    -1,   442,   443,   444,   445,   446,   447,   448,   449,
     450,    -1,   452,   453,   454,    -1,   456,   457,   458,   459,
      -1,   461,   462,   463,   464,   465,   466,   467,    -1,   469,
      -1,   471,   472,   473,   474,   475,   476,   477,    -1,    -1,
     480,    -1,    -1,   483,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,   498,   499,
     500,   501,   502,   503,     3,    -1,     5,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   521,    -1,    22,    23,    24,    25,    26,    27,    28,
      29,    30,    -1,    32,    33,    34,    -1,    -1,    -1,    -1,
      -1,    40,    -1,    -1,    -1,    -1,    45,    46,    -1,    48,
      49,    50,    -1,    52,    53,    54,    55,    56,    -1,    58,
      59,    -1,    61,    62,    63,    64,    65,    66,    -1,    -1,
      69,    70,    71,    72,    73,    -1,    75,    76,    77,    78,
      79,    -1,    -1,    -1,    83,    84,    85,    86,    87,    88,
      -1,    90,    91,    92,    -1,    94,    95,    96,    97,    98,
      99,    -1,    -1,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,    -1,   116,    -1,   118,
     119,   120,   121,   122,   123,    -1,   125,   126,   127,   128,
     129,   130,    -1,    -1,   133,   134,   135,   136,   137,   138,
     139,    -1,   141,   142,   143,    -1,   145,   146,   147,    -1,
     149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
     159,    -1,   161,    -1,   163,   164,   165,   166,    -1,   168,
      -1,   170,    -1,    -1,    -1,   174,   175,   176,    -1,   178,
      -1,   180,   181,    -1,    -1,   184,   185,   186,   187,    -1,
     189,   190,   191,   192,   193,   194,   195,    -1,   197,   198,
     199,   200,    -1,   202,   203,   204,   205,   206,   207,   208,
      -1,   210,    -1,   212,   213,   214,   215,   216,   217,   218,
     219,    -1,   221,    -1,   223,    -1,    -1,   226,    -1,   228,
     229,   230,   231,   232,   233,   234,    -1,    -1,   237,    -1,
     239,    -1,    -1,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,    -1,   271,   272,   273,   274,   275,   276,    -1,   278,
     279,    -1,   281,    -1,   283,   284,   285,   286,   287,   288,
      -1,   290,   291,    -1,    -1,   294,   295,   296,    -1,    -1,
     299,   300,    -1,   302,    -1,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,    -1,    -1,
      -1,    -1,   321,   322,   323,    -1,   325,   326,   327,   328,
     329,   330,    -1,   332,   333,   334,   335,   336,   337,   338,
     339,    -1,   341,   342,   343,   344,   345,   346,   347,   348,
      -1,   350,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,    -1,   365,   366,    -1,   368,
     369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,    -1,    -1,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,    -1,   397,   398,
     399,   400,    -1,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,   417,   418,
      -1,   420,   421,    -1,   423,    -1,   425,   426,   427,   428,
     429,    -1,   431,   432,    -1,   434,    -1,   436,   437,   438,
     439,   440,    -1,   442,   443,   444,   445,   446,   447,   448,
     449,    -1,    -1,   452,   453,   454,    -1,   456,   457,   458,
     459,    -1,   461,   462,   463,   464,   465,   466,   467,    -1,
     469,    -1,   471,   472,   473,   474,   475,   476,   477,    -1,
      -1,   480,    -1,    -1,   483,   484,   485,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
     499,   500,   501,   502,   503,     3,    -1,     5,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   520,   521,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    -1,    32,    33,    34,    -1,    -1,    -1,
      -1,    -1,    40,    -1,    -1,    -1,    44,    45,    46,    -1,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      58,    59,    -1,    61,    62,    63,    64,    65,    66,    -1,
      68,    69,    70,    71,    72,    73,    -1,    75,    76,    77,
      78,    79,    -1,    81,    -1,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    -1,    94,    95,    96,    97,
      98,    99,    -1,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,    -1,   116,    -1,
     118,   119,   120,   121,   122,   123,    -1,   125,   126,   127,
     128,   129,   130,    -1,    -1,   133,   134,   135,   136,   137,
     138,   139,    -1,   141,   142,   143,    -1,   145,   146,   147,
      -1,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,   159,    -1,   161,    -1,   163,   164,   165,   166,    -1,
     168,    -1,   170,   171,   172,   173,   174,   175,   176,   177,
     178,    -1,   180,   181,   182,    -1,   184,   185,   186,   187,
      -1,   189,   190,   191,   192,   193,   194,   195,   196,   197,
     198,   199,   200,    -1,   202,   203,   204,   205,   206,   207,
     208,    -1,   210,   211,   212,   213,   214,   215,   216,   217,
     218,   219,    -1,   221,    -1,   223,   224,   225,   226,   227,
     228,   229,   230,   231,   232,   233,   234,   235,    -1,   237,
     238,   239,   240,    -1,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,    -1,
     278,   279,   280,   281,    -1,   283,   284,   285,   286,   287,
     288,    -1,   290,   291,    -1,   293,   294,   295,   296,    -1,
      -1,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,    -1,   321,   322,   323,   324,   325,   326,   327,
     328,   329,   330,    -1,   332,   333,   334,   335,   336,   337,
     338,   339,    -1,   341,   342,   343,   344,   345,   346,   347,
     348,    -1,   350,   351,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,    -1,   365,   366,   367,
     368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,    -1,   385,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,    -1,   402,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,   417,
     418,    -1,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   429,    -1,   431,   432,    -1,   434,    -1,   436,   437,
     438,   439,   440,    -1,   442,   443,   444,   445,   446,   447,
     448,   449,    -1,    -1,   452,   453,   454,   455,   456,   457,
     458,   459,    -1,   461,   462,   463,   464,   465,   466,   467,
      -1,   469,   470,   471,   472,   473,   474,   475,   476,   477,
      -1,    -1,   480,    -1,   482,   483,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,   499,   500,   501,   502,   503,     3,    -1,   506,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   520,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    -1,    32,    33,    34,    35,    36,
      -1,    38,    -1,    40,    -1,    -1,    -1,    44,    45,    46,
      -1,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    58,    59,    -1,    61,    62,    63,    64,    65,    66,
      -1,    -1,    69,    70,    71,    72,    73,    -1,    75,    76,
      77,    78,    79,    -1,    81,    -1,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    -1,    94,    95,    96,
      97,    98,    99,    -1,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,    -1,   116,
      -1,   118,   119,   120,   121,   122,   123,    -1,   125,   126,
     127,   128,   129,   130,    -1,    -1,   133,   134,   135,   136,
     137,   138,   139,    -1,   141,   142,   143,    -1,   145,   146,
     147,    -1,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,    -1,   161,    -1,   163,   164,   165,   166,
      -1,   168,    -1,   170,   171,   172,   173,   174,   175,   176,
     177,   178,    -1,   180,   181,    -1,    -1,   184,   185,   186,
     187,    -1,   189,   190,   191,   192,   193,   194,   195,   196,
     197,   198,   199,   200,    -1,   202,   203,   204,   205,   206,
     207,   208,    -1,   210,   211,   212,   213,   214,   215,   216,
     217,   218,   219,    -1,   221,    -1,   223,   224,   225,   226,
     227,   228,   229,   230,   231,   232,   233,   234,    -1,    -1,
     237,   238,   239,   240,    -1,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
      -1,   278,   279,   280,   281,    -1,   283,   284,   285,   286,
     287,   288,    -1,   290,   291,    -1,    -1,   294,   295,   296,
      -1,    -1,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,    -1,   321,   322,   323,   324,   325,   326,
     327,   328,   329,   330,    -1,   332,   333,   334,   335,   336,
     337,   338,   339,    -1,   341,   342,   343,   344,   345,   346,
     347,   348,    -1,   350,   351,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,    -1,   365,   366,
     367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,    -1,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
     417,   418,    -1,   420,   421,   422,   423,   424,   425,   426,
     427,   428,   429,    -1,   431,   432,    -1,   434,    -1,   436,
     437,   438,   439,   440,    -1,   442,   443,   444,   445,   446,
     447,   448,   449,    -1,    -1,   452,   453,   454,   455,   456,
     457,   458,   459,    -1,   461,   462,   463,   464,   465,   466,
     467,    -1,   469,   470,   471,   472,   473,   474,   475,   476,
     477,    -1,    -1,   480,    -1,   482,   483,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,   498,   499,   500,   501,   502,   503,    -1,     3,   506,
       5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   520,    -1,    -1,    -1,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    -1,    32,    33,    34,
      -1,    -1,    -1,    -1,    -1,    40,    -1,    -1,    -1,    44,
      45,    46,    -1,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    -1,    61,    62,    63,    64,
      65,    66,    -1,    68,    69,    70,    71,    72,    73,    -1,
      75,    76,    77,    78,    79,    -1,    81,    -1,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    -1,    94,
      95,    96,    97,    98,    99,    -1,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
      -1,   116,    -1,   118,   119,   120,   121,   122,   123,    -1,
     125,   126,   127,   128,   129,   130,    -1,    -1,   133,   134,
     135,   136,   137,   138,   139,    -1,   141,   142,   143,    -1,
     145,   146,   147,    -1,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,    -1,   161,    -1,   163,   164,
     165,   166,    -1,   168,    -1,   170,   171,    -1,   173,   174,
     175,   176,   177,   178,    -1,   180,   181,   182,    -1,   184,
     185,   186,   187,    -1,   189,   190,   191,   192,   193,   194,
     195,   196,   197,   198,   199,   200,    -1,   202,   203,   204,
     205,   206,   207,   208,    -1,   210,   211,   212,   213,   214,
     215,   216,   217,   218,   219,    -1,   221,    -1,   223,   224,
     225,   226,   227,   228,   229,   230,   231,   232,   233,   234,
     235,    -1,   237,   238,   239,   240,    -1,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,    -1,   278,   279,   280,   281,    -1,   283,   284,
     285,   286,   287,   288,    -1,   290,   291,    -1,   293,   294,
     295,   296,    -1,    -1,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,    -1,    -1,    -1,    -1,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,    -1,   332,   333,   334,
     335,   336,   337,   338,   339,    -1,   341,   342,   343,   344,
     345,   346,   347,   348,    -1,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,    -1,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,    -1,    -1,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,    -1,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,    -1,   420,   421,    -1,   423,   424,
     425,   426,   427,   428,   429,    -1,   431,   432,    -1,   434,
      -1,   436,   437,   438,   439,   440,    -1,   442,   443,   444,
     445,   446,   447,   448,   449,    -1,    -1,   452,   453,   454,
      -1,   456,   457,   458,   459,    -1,   461,   462,   463,   464,
     465,   466,   467,    -1,   469,   470,   471,   472,   473,   474,
     475,   476,   477,    -1,    -1,   480,    -1,    -1,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   520,    -1,    -1,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    -1,    32,    33,
      34,    -1,    -1,    -1,    -1,    -1,    40,    -1,    -1,    -1,
      44,    45,    46,    -1,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    58,    59,    -1,    61,    62,    63,
      64,    65,    66,    -1,    68,    69,    70,    71,    72,    73,
      -1,    75,    76,    77,    78,    79,    -1,    81,    -1,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    -1,
      94,    95,    96,    97,    98,    99,    -1,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,    -1,   116,    -1,   118,   119,   120,   121,   122,   123,
      -1,   125,   126,   127,   128,   129,   130,    -1,    -1,   133,
     134,   135,   136,   137,   138,   139,    -1,   141,   142,   143,
      -1,   145,   146,   147,    -1,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,   159,    -1,   161,    -1,   163,
     164,   165,   166,    -1,   168,    -1,   170,   171,    -1,   173,
     174,   175,   176,   177,   178,    -1,   180,   181,    -1,    -1,
     184,   185,   186,   187,    -1,   189,   190,   191,   192,   193,
     194,   195,   196,   197,   198,   199,   200,    -1,   202,   203,
     204,   205,   206,   207,   208,    -1,   210,   211,   212,   213,
     214,   215,   216,   217,   218,   219,    -1,   221,    -1,   223,
     224,   225,   226,   227,   228,   229,   230,   231,   232,   233,
     234,    -1,    -1,   237,   238,   239,   240,    -1,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,    -1,   278,   279,   280,   281,    -1,   283,
     284,   285,   286,   287,   288,    -1,   290,   291,    -1,    -1,
     294,   295,   296,    -1,    -1,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,    -1,    -1,    -1,    -1,   321,   322,   323,
     324,   325,   326,   327,   328,   329,   330,    -1,   332,   333,
     334,   335,   336,   337,   338,   339,    -1,   341,   342,   343,
     344,   345,   346,   347,   348,    -1,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
      -1,   365,   366,   367,   368,   369,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,    -1,
      -1,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,    -1,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,   417,   418,    -1,   420,   421,    -1,   423,
     424,   425,   426,   427,   428,   429,    -1,   431,   432,    -1,
     434,    -1,   436,   437,   438,   439,   440,    -1,   442,   443,
     444,   445,   446,   447,   448,   449,    -1,    -1,   452,   453,
     454,    -1,   456,   457,   458,   459,    -1,   461,   462,   463,
     464,   465,   466,   467,    -1,   469,   470,   471,   472,   473,
     474,   475,   476,   477,    -1,    -1,   480,    -1,    -1,   483,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,   499,   500,   501,   502,   503,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   520,    -1,    -1,    22,
      23,    24,    25,    26,    27,    28,    29,    30,    -1,    32,
      33,    34,    -1,    -1,    -1,    -1,    -1,    40,    -1,    -1,
      -1,    44,    45,    46,    -1,    48,    49,    50,    51,    52,
      53,    54,    55,    56,    57,    58,    59,    -1,    61,    62,
      63,    64,    65,    66,    -1,    68,    69,    70,    71,    72,
      73,    -1,    75,    76,    77,    78,    79,    -1,    81,    -1,
      83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      -1,    94,    95,    96,    97,    98,    99,    -1,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,    -1,   116,    -1,   118,   119,   120,   121,   122,
     123,    -1,   125,   126,   127,   128,   129,   130,    -1,    -1,
     133,   134,   135,   136,   137,   138,   139,    -1,   141,   142,
     143,    -1,   145,   146,   147,    -1,   149,   150,   151,   152,
     153,   154,   155,   156,   157,   158,   159,    -1,   161,    -1,
     163,   164,   165,   166,    -1,   168,    -1,   170,   171,    -1,
     173,   174,   175,   176,   177,   178,    -1,   180,   181,    -1,
      -1,   184,   185,   186,   187,    -1,   189,   190,   191,   192,
     193,   194,   195,   196,   197,   198,   199,   200,    -1,   202,
     203,   204,   205,   206,   207,   208,    -1,   210,   211,   212,
     213,   214,   215,   216,   217,   218,   219,    -1,   221,    -1,
     223,   224,   225,   226,   227,   228,   229,   230,   231,   232,
     233,   234,    -1,    -1,   237,   238,   239,   240,    -1,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,    -1,   278,   279,   280,   281,    -1,
     283,   284,   285,   286,   287,   288,    -1,   290,   291,    -1,
      -1,   294,   295,   296,    -1,    -1,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,    -1,    -1,    -1,    -1,   321,   322,
     323,   324,   325,   326,   327,   328,   329,   330,    -1,   332,
     333,   334,   335,   336,   337,   338,   339,    -1,   341,   342,
     343,   344,   345,   346,   347,   348,    -1,   350,   351,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,    -1,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
      -1,    -1,   385,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,    -1,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,   417,   418,    -1,   420,   421,    -1,
     423,   424,   425,   426,   427,   428,   429,    -1,   431,   432,
      -1,   434,    -1,   436,   437,   438,   439,   440,    -1,   442,
     443,   444,   445,   446,   447,   448,   449,    -1,    -1,   452,
     453,   454,    -1,   456,   457,   458,   459,    -1,   461,   462,
     463,   464,   465,   466,   467,    -1,   469,   470,   471,   472,
     473,   474,   475,   476,   477,    -1,    -1,   480,    -1,    -1,
     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   500,   501,   502,
     503,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   520,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
      32,    33,    34,    -1,    -1,    -1,    -1,    -1,    40,    -1,
      -1,    -1,    -1,    45,    46,    -1,    48,    49,    50,    -1,
      52,    53,    54,    55,    56,    -1,    58,    59,    -1,    61,
      62,    63,    64,    65,    66,    -1,    -1,    69,    70,    71,
      72,    73,    -1,    75,    76,    77,    78,    79,    -1,    -1,
      -1,    83,    84,    85,    86,    87,    88,    -1,    90,    91,
      92,    -1,    94,    95,    96,    97,    98,    99,    -1,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,    -1,   116,    -1,   118,   119,   120,   121,
     122,   123,    -1,   125,   126,   127,   128,   129,   130,    -1,
      -1,   133,   134,   135,   136,   137,   138,   139,    -1,   141,
     142,   143,    -1,   145,   146,   147,    -1,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,    -1,   161,
      -1,   163,   164,   165,   166,    -1,   168,    -1,   170,    -1,
     172,    -1,   174,   175,   176,    -1,   178,    -1,   180,   181,
      -1,    -1,   184,   185,   186,   187,    -1,   189,   190,   191,
     192,   193,   194,   195,    -1,   197,   198,   199,   200,    -1,
     202,   203,   204,   205,   206,   207,   208,    -1,   210,    -1,
     212,   213,   214,   215,   216,   217,   218,   219,    -1,   221,
      -1,   223,    -1,    -1,   226,    -1,   228,   229,   230,   231,
     232,   233,   234,    -1,    -1,   237,    -1,   239,    -1,    -1,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,    -1,   271,
     272,   273,   274,   275,   276,    -1,   278,   279,    -1,   281,
      -1,   283,   284,   285,   286,   287,   288,    -1,   290,   291,
      -1,    -1,   294,   295,   296,    -1,    -1,   299,   300,    -1,
     302,    -1,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,    -1,   321,
     322,   323,    -1,   325,   326,   327,   328,   329,   330,    -1,
     332,   333,   334,   335,   336,   337,   338,   339,    -1,   341,
     342,   343,   344,   345,   346,   347,   348,    -1,   350,   351,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,    -1,   365,   366,    -1,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,    -1,   385,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,    -1,   397,   398,   399,   400,    -1,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,   417,   418,    -1,   420,   421,
     422,   423,    -1,   425,   426,   427,   428,   429,    -1,   431,
     432,    -1,   434,    -1,   436,   437,   438,   439,   440,    -1,
     442,   443,   444,   445,   446,   447,   448,   449,    -1,    -1,
     452,   453,   454,   455,   456,   457,   458,   459,    -1,   461,
     462,   463,   464,   465,   466,   467,    -1,   469,    -1,   471,
     472,   473,   474,   475,   476,   477,    -1,    -1,   480,    -1,
     482,   483,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,   498,   499,   500,   501,
     502,   503,     3,    -1,   506,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   520,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    30,
      -1,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,    40,
      -1,    -1,    -1,    -1,    45,    46,    -1,    48,    49,    50,
      -1,    52,    53,    54,    55,    56,    -1,    58,    59,    -1,
      61,    62,    63,    64,    65,    66,    -1,    -1,    69,    70,
      71,    72,    73,    -1,    75,    76,    77,    78,    79,    -1,
      -1,    -1,    83,    84,    85,    86,    87,    88,    -1,    90,
      91,    92,    -1,    94,    95,    96,    97,    98,    99,    -1,
      -1,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,    -1,   116,    -1,   118,   119,   120,
     121,   122,   123,    -1,   125,   126,   127,   128,   129,   130,
      -1,    -1,   133,   134,   135,   136,   137,   138,   139,    -1,
     141,   142,   143,    -1,   145,   146,   147,    -1,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,    -1,
     161,    -1,   163,   164,   165,   166,    -1,   168,    -1,   170,
      -1,   172,    -1,   174,   175,   176,    -1,   178,    -1,   180,
     181,    -1,    -1,   184,   185,   186,   187,    -1,   189,   190,
     191,   192,   193,   194,   195,    -1,   197,   198,   199,   200,
      -1,   202,   203,   204,   205,   206,   207,   208,    -1,   210,
      -1,   212,   213,   214,   215,   216,   217,   218,   219,    -1,
     221,    -1,   223,    -1,    -1,   226,    -1,   228,   229,   230,
     231,   232,   233,   234,    -1,    -1,   237,    -1,   239,    -1,
      -1,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,    -1,
     271,   272,   273,   274,   275,   276,    -1,   278,   279,    -1,
     281,    -1,   283,   284,   285,   286,   287,   288,    -1,   290,
     291,    -1,    -1,   294,   295,   296,    -1,    -1,   299,   300,
      -1,   302,    -1,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,    -1,
     321,   322,   323,    -1,   325,   326,   327,   328,   329,   330,
      -1,   332,   333,   334,   335,   336,   337,   338,   339,    -1,
     341,   342,   343,   344,   345,   346,   347,   348,    -1,   350,
     351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,    -1,   365,   366,    -1,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,    -1,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,    -1,   397,   398,   399,   400,
      -1,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,   417,   418,    -1,   420,
     421,   422,   423,    -1,   425,   426,   427,   428,   429,    -1,
     431,   432,    -1,   434,    -1,   436,   437,   438,   439,   440,
      -1,   442,   443,   444,   445,   446,   447,   448,   449,    -1,
      -1,   452,   453,   454,   455,   456,   457,   458,   459,    -1,
     461,   462,   463,   464,   465,   466,   467,    -1,   469,    -1,
     471,   472,   473,   474,   475,   476,   477,    -1,    -1,   480,
      -1,   482,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,   499,   500,
     501,   502,   503,    -1,     3,   506,     5,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   520,
      -1,    -1,    -1,    22,    23,    24,    25,    26,    27,    28,
      29,    30,    -1,    32,    33,    34,    -1,    -1,    -1,    -1,
      -1,    40,    -1,    -1,    -1,    -1,    45,    46,    -1,    48,
      49,    50,    -1,    52,    53,    54,    55,    56,    -1,    58,
      59,    -1,    61,    62,    63,    64,    65,    66,    -1,    -1,
      69,    70,    71,    72,    73,    -1,    75,    76,    77,    78,
      79,    -1,    -1,    -1,    83,    84,    85,    86,    87,    88,
      -1,    90,    91,    92,    -1,    94,    95,    96,    97,    98,
      99,    -1,    -1,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,    -1,   116,    -1,   118,
     119,   120,   121,   122,   123,    -1,   125,   126,   127,   128,
     129,   130,    -1,    -1,   133,   134,   135,   136,   137,   138,
     139,    -1,   141,   142,   143,    -1,   145,   146,   147,    -1,
     149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
     159,    -1,   161,    -1,   163,   164,   165,   166,    -1,   168,
      -1,   170,    -1,    -1,    -1,   174,   175,   176,    -1,   178,
      -1,   180,   181,    -1,    -1,   184,   185,   186,   187,    -1,
     189,   190,   191,   192,   193,   194,   195,    -1,   197,   198,
     199,   200,    -1,   202,   203,   204,   205,   206,   207,   208,
      -1,   210,    -1,   212,   213,   214,   215,   216,   217,   218,
     219,    -1,   221,    -1,   223,    -1,    -1,   226,    -1,   228,
     229,   230,   231,   232,   233,   234,    -1,    -1,   237,    -1,
     239,    -1,    -1,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,    -1,   271,   272,   273,   274,   275,   276,    -1,   278,
     279,    -1,   281,    -1,   283,   284,   285,   286,   287,   288,
      -1,   290,   291,    -1,    -1,   294,   295,   296,    -1,    -1,
     299,   300,    -1,   302,    -1,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,    -1,    -1,
      -1,    -1,   321,   322,   323,    -1,   325,   326,   327,   328,
     329,   330,    -1,   332,   333,   334,   335,   336,   337,   338,
     339,    -1,   341,   342,   343,   344,   345,   346,   347,   348,
      -1,   350,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,    -1,   365,   366,    -1,   368,
     369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,    -1,    -1,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,    -1,   397,   398,
     399,   400,    -1,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,   417,   418,
      -1,   420,   421,    -1,   423,    -1,   425,   426,   427,   428,
     429,    -1,   431,   432,    -1,   434,    -1,   436,   437,   438,
     439,   440,    -1,   442,   443,   444,   445,   446,   447,   448,
     449,    -1,    -1,   452,   453,   454,    -1,   456,   457,   458,
     459,    -1,   461,   462,   463,   464,   465,   466,   467,    -1,
     469,    -1,   471,   472,   473,   474,   475,   476,   477,    -1,
      -1,   480,    -1,    -1,   483,   484,   485,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
     499,   500,   501,   502,   503,     3,    -1,     5,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   520,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    -1,    32,    33,    34,    -1,    -1,    -1,
      -1,    -1,    40,    -1,    -1,    -1,    -1,    45,    46,    -1,
      48,    49,    50,    -1,    52,    53,    54,    55,    56,    -1,
      58,    59,    -1,    61,    62,    63,    64,    65,    66,    -1,
      -1,    69,    70,    71,    72,    73,    -1,    75,    76,    77,
      78,    79,    -1,    -1,    -1,    83,    84,    85,    86,    87,
      88,    -1,    90,    91,    92,    -1,    94,    95,    96,    97,
      98,    99,    -1,    -1,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,    -1,   116,    -1,
     118,   119,   120,   121,   122,   123,    -1,   125,   126,   127,
     128,   129,   130,    -1,    -1,   133,   134,   135,   136,   137,
     138,   139,    -1,   141,   142,   143,    -1,   145,   146,   147,
      -1,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,   159,    -1,   161,    -1,   163,   164,   165,   166,    -1,
     168,    -1,   170,    -1,    -1,    -1,   174,   175,   176,    -1,
     178,    -1,   180,   181,    -1,    -1,   184,   185,   186,   187,
      -1,   189,   190,   191,   192,   193,   194,   195,    -1,   197,
     198,   199,   200,    -1,   202,   203,   204,   205,   206,   207,
     208,    -1,   210,    -1,   212,   213,   214,   215,   216,   217,
     218,   219,    -1,   221,    -1,   223,    -1,    -1,   226,    -1,
     228,   229,   230,   231,   232,   233,   234,    -1,    -1,   237,
      -1,   239,    -1,    -1,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,    -1,   271,   272,   273,   274,   275,   276,    -1,
     278,   279,    -1,   281,    -1,   283,   284,   285,   286,   287,
     288,    -1,   290,   291,    -1,    -1,   294,   295,   296,    -1,
      -1,   299,   300,    -1,   302,    -1,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,    -1,
      -1,    -1,    -1,   321,   322,   323,    -1,   325,   326,   327,
     328,   329,   330,    -1,   332,   333,   334,   335,   336,   337,
     338,   339,    -1,   341,   342,   343,   344,   345,   346,   347,
     348,    -1,   350,   351,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,    -1,   365,   366,    -1,
     368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,    -1,    -1,   385,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,    -1,   397,
     398,   399,   400,    -1,   402,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,   417,
     418,    -1,   420,   421,    -1,   423,    -1,   425,   426,   427,
     428,   429,    -1,   431,   432,    -1,   434,    -1,   436,   437,
     438,   439,   440,    -1,   442,   443,   444,   445,   446,   447,
     448,   449,    -1,    -1,   452,   453,   454,    -1,   456,   457,
     458,   459,    -1,   461,   462,   463,   464,   465,   466,   467,
      -1,   469,    -1,   471,   472,   473,   474,   475,   476,   477,
      -1,    -1,   480,    -1,    -1,   483,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,   499,   500,   501,   502,   503,     3,    -1,     5,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   520,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    -1,    32,    33,    34,    -1,    -1,
      -1,    -1,    -1,    40,    -1,    -1,    -1,    -1,    45,    46,
      -1,    48,    49,    50,    -1,    52,    53,    54,    55,    56,
      -1,    58,    59,    -1,    61,    62,    63,    64,    65,    66,
      -1,    -1,    69,    70,    71,    72,    73,    -1,    75,    76,
      77,    78,    79,    -1,    -1,    -1,    83,    84,    85,    86,
      87,    88,    -1,    90,    91,    92,    -1,    94,    95,    96,
      97,    98,    99,    -1,    -1,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,    -1,   116,
      -1,   118,   119,   120,   121,   122,   123,    -1,   125,   126,
     127,   128,   129,   130,    -1,    -1,   133,   134,   135,   136,
     137,   138,   139,    -1,   141,   142,   143,    -1,   145,   146,
     147,    -1,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,    -1,   161,    -1,   163,   164,   165,   166,
      -1,   168,    -1,   170,    -1,    -1,    -1,   174,   175,   176,
      -1,   178,    -1,   180,   181,    -1,    -1,   184,   185,   186,
     187,    -1,   189,   190,   191,   192,   193,   194,   195,    -1,
     197,   198,   199,   200,    -1,   202,   203,   204,   205,   206,
     207,   208,    -1,   210,    -1,   212,   213,   214,   215,   216,
     217,   218,   219,    -1,   221,    -1,   223,    -1,    -1,   226,
      -1,   228,   229,   230,   231,   232,   233,   234,    -1,    -1,
     237,    -1,   239,    -1,    -1,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,    -1,   271,   272,   273,   274,   275,   276,
      -1,   278,   279,    -1,   281,    -1,   283,   284,   285,   286,
     287,   288,    -1,   290,   291,    -1,    -1,   294,   295,   296,
      -1,    -1,   299,   300,    -1,   302,    -1,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
      -1,    -1,    -1,    -1,   321,   322,   323,    -1,   325,   326,
     327,   328,   329,   330,    -1,   332,   333,   334,   335,   336,
     337,   338,   339,    -1,   341,   342,   343,   344,   345,   346,
     347,   348,    -1,   350,   351,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,    -1,   365,   366,
      -1,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,    -1,    -1,   385,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,    -1,
     397,   398,   399,   400,    -1,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
     417,   418,    -1,   420,   421,    -1,   423,    -1,   425,   426,
     427,   428,   429,    -1,   431,   432,    -1,   434,    -1,   436,
     437,   438,   439,   440,    -1,   442,   443,   444,   445,   446,
     447,   448,   449,    -1,    -1,   452,   453,   454,    -1,   456,
     457,   458,   459,    -1,   461,   462,   463,   464,   465,   466,
     467,    -1,   469,    -1,   471,   472,   473,   474,   475,   476,
     477,    -1,    -1,   480,    -1,    -1,   483,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,   498,   499,   500,   501,   502,   503,     3,    -1,     5,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   520,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    -1,    32,    33,    34,    -1,
      -1,    -1,    -1,    -1,    40,    -1,    -1,    -1,    -1,    45,
      46,    -1,    48,    49,    50,    -1,    52,    53,    54,    55,
      56,    -1,    58,    59,    -1,    61,    62,    63,    64,    65,
      66,    -1,    -1,    69,    70,    71,    72,    73,    -1,    75,
      76,    77,    78,    79,    -1,    -1,    -1,    83,    84,    85,
      86,    87,    88,    -1,    90,    91,    92,    -1,    94,    95,
      96,    97,    98,    99,    -1,    -1,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,    -1,
     116,    -1,   118,   119,   120,   121,   122,   123,    -1,   125,
     126,   127,   128,   129,   130,    -1,    -1,   133,   134,   135,
     136,   137,   138,   139,    -1,   141,   142,   143,    -1,   145,
     146,   147,    -1,   149,   150,   151,   152,   153,   154,   155,
     156,   157,   158,   159,    -1,   161,    -1,   163,   164,   165,
     166,    -1,   168,    -1,   170,    -1,    -1,    -1,   174,   175,
     176,    -1,   178,    -1,   180,   181,    -1,    -1,   184,   185,
     186,   187,    -1,   189,   190,   191,   192,   193,   194,   195,
      -1,   197,   198,   199,   200,    -1,   202,   203,   204,   205,
     206,   207,   208,    -1,   210,    -1,   212,   213,   214,   215,
     216,   217,   218,   219,    -1,   221,    -1,   223,    -1,    -1,
     226,    -1,   228,   229,   230,   231,   232,   233,   234,    -1,
      -1,   237,    -1,   239,    -1,    -1,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,    -1,   271,   272,   273,   274,   275,
     276,    -1,   278,   279,    -1,   281,    -1,   283,   284,   285,
     286,   287,   288,    -1,   290,   291,    -1,    -1,   294,   295,
     296,    -1,    -1,   299,   300,    -1,   302,    -1,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,    -1,    -1,    -1,    -1,   321,   322,   323,    -1,   325,
     326,   327,   328,   329,   330,    -1,   332,   333,   334,   335,
     336,   337,   338,   339,    -1,   341,   342,   343,   344,   345,
     346,   347,   348,    -1,   350,   351,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,    -1,   365,
     366,    -1,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,    -1,    -1,   385,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
      -1,   397,   398,   399,   400,    -1,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,   417,   418,    -1,   420,   421,    -1,   423,    -1,   425,
     426,   427,   428,   429,    -1,   431,   432,    -1,   434,    -1,
     436,   437,   438,   439,   440,    -1,   442,   443,   444,   445,
     446,   447,   448,   449,    -1,    -1,   452,   453,   454,    -1,
     456,   457,   458,   459,    -1,   461,   462,   463,   464,   465,
     466,   467,    -1,   469,    -1,   471,   472,   473,   474,   475,
     476,   477,    -1,    -1,   480,    -1,    -1,   483,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,   498,   499,   500,   501,   502,   503,     3,    -1,
       5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   520,    -1,    -1,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    -1,    32,    33,    34,
      -1,    -1,    -1,    -1,    -1,    40,    -1,    -1,    -1,    -1,
      45,    46,    -1,    48,    49,    50,    -1,    52,    53,    54,
      55,    56,    -1,    58,    59,    -1,    61,    62,    63,    64,
      65,    66,    -1,    -1,    69,    70,    71,    72,    73,    -1,
      75,    76,    77,    78,    79,    -1,    -1,    -1,    83,    84,
      85,    86,    87,    88,    -1,    90,    91,    92,    -1,    94,
      95,    96,    97,    98,    99,    -1,    -1,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
      -1,   116,    -1,   118,   119,   120,   121,   122,   123,    -1,
     125,   126,   127,   128,   129,   130,    -1,    -1,   133,   134,
     135,   136,   137,   138,   139,    -1,   141,   142,   143,    -1,
     145,   146,   147,    -1,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,    -1,   161,    -1,   163,   164,
     165,   166,    -1,   168,    -1,   170,    -1,    -1,    -1,   174,
     175,   176,    -1,   178,    -1,   180,   181,    -1,    -1,   184,
     185,   186,   187,    -1,   189,   190,   191,   192,   193,   194,
     195,    -1,   197,   198,   199,   200,    -1,   202,   203,   204,
     205,   206,   207,   208,    -1,   210,    -1,   212,   213,   214,
     215,   216,   217,   218,   219,    -1,   221,    -1,   223,    -1,
      -1,   226,    -1,   228,   229,   230,   231,   232,   233,   234,
      -1,    -1,   237,    -1,   239,    -1,    -1,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,    -1,   271,   272,   273,   274,
     275,   276,    -1,   278,   279,    -1,   281,    -1,   283,   284,
     285,   286,   287,   288,    -1,   290,   291,    -1,    -1,   294,
     295,   296,    -1,    -1,   299,   300,    -1,   302,    -1,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,    -1,    -1,    -1,    -1,   321,   322,   323,    -1,
     325,   326,   327,   328,   329,   330,    -1,   332,   333,   334,
     335,   336,   337,   338,   339,    -1,   341,   342,   343,   344,
     345,   346,   347,   348,    -1,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,    -1,
     365,   366,    -1,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,    -1,    -1,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,    -1,   397,   398,   399,   400,    -1,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,    -1,   420,   421,    -1,   423,    -1,
     425,   426,   427,   428,   429,    -1,   431,   432,    -1,   434,
      -1,   436,   437,   438,   439,   440,    -1,   442,   443,   444,
     445,   446,   447,   448,   449,    -1,    -1,   452,   453,   454,
      -1,   456,   457,   458,   459,    -1,   461,   462,   463,   464,
     465,   466,   467,    -1,   469,    -1,   471,   472,   473,   474,
     475,   476,   477,    -1,    -1,   480,    -1,    -1,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,     3,
      -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   520,    -1,    -1,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    -1,    32,    33,
      34,    -1,    -1,    -1,    -1,    -1,    40,    -1,    -1,    -1,
      -1,    45,    46,    -1,    48,    49,    50,    -1,    52,    53,
      54,    55,    56,    -1,    58,    59,    -1,    61,    62,    63,
      64,    65,    66,    -1,    -1,    69,    70,    71,    72,    73,
      -1,    75,    76,    77,    78,    79,    -1,    -1,    -1,    83,
      84,    85,    86,    87,    88,    -1,    90,    91,    92,    -1,
      94,    95,    96,    97,    98,    99,    -1,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,    -1,   116,    -1,   118,   119,   120,   121,   122,   123,
      -1,   125,   126,   127,   128,   129,   130,    -1,    -1,   133,
     134,   135,   136,   137,   138,   139,    -1,   141,   142,   143,
      -1,   145,   146,   147,    -1,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,   159,    -1,   161,    -1,   163,
     164,   165,   166,    -1,   168,    -1,   170,    -1,    -1,    -1,
     174,   175,   176,    -1,   178,    -1,   180,   181,    -1,    -1,
     184,   185,   186,   187,    -1,   189,   190,   191,   192,   193,
     194,   195,    -1,   197,   198,   199,   200,    -1,   202,   203,
     204,   205,   206,   207,   208,    -1,   210,    -1,   212,   213,
     214,   215,   216,   217,   218,   219,    -1,   221,    -1,   223,
      -1,    -1,   226,    -1,   228,   229,   230,   231,   232,   233,
     234,    -1,    -1,   237,    -1,   239,    -1,    -1,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,    -1,   271,   272,   273,
     274,   275,   276,    -1,   278,   279,    -1,   281,    -1,   283,
     284,   285,   286,   287,   288,    -1,   290,   291,    -1,    -1,
     294,   295,   296,    -1,    -1,   299,   300,    -1,   302,    -1,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,    -1,    -1,    -1,    -1,   321,   322,   323,
      -1,   325,   326,   327,   328,   329,   330,    -1,   332,   333,
     334,   335,   336,   337,   338,   339,    -1,   341,   342,   343,
     344,   345,   346,   347,   348,    -1,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
      -1,   365,   366,    -1,   368,   369,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,    -1,
      -1,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,    -1,   397,   398,   399,   400,    -1,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,   417,   418,    -1,   420,   421,    -1,   423,
      -1,   425,   426,   427,   428,   429,    -1,   431,   432,    -1,
     434,    -1,   436,   437,   438,   439,   440,    -1,   442,   443,
     444,   445,   446,   447,   448,   449,    -1,    -1,   452,   453,
     454,    -1,   456,   457,   458,   459,    -1,   461,   462,   463,
     464,   465,   466,   467,    -1,   469,    -1,   471,   472,   473,
     474,   475,   476,   477,    -1,    -1,   480,    -1,    -1,   483,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,   499,   500,   501,   502,   503,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   520,    -1,    -1,    22,
      23,    24,    25,    26,    27,    28,    29,    30,    -1,    32,
      33,    34,    -1,    -1,    -1,    -1,    -1,    40,    -1,    -1,
      -1,    -1,    45,    46,    -1,    48,    49,    50,    -1,    52,
      53,    54,    55,    56,    -1,    58,    59,    -1,    61,    62,
      63,    64,    65,    66,    -1,    -1,    69,    70,    71,    72,
      73,    -1,    75,    76,    77,    78,    79,    -1,    -1,    -1,
      83,    84,    85,    86,    87,    88,    -1,    90,    91,    92,
      -1,    94,    95,    96,    97,    98,    99,    -1,    -1,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,    -1,   116,    -1,   118,   119,   120,   121,   122,
     123,    -1,   125,   126,   127,   128,   129,   130,    -1,    -1,
     133,   134,   135,   136,   137,   138,   139,    -1,   141,   142,
     143,    -1,   145,   146,   147,    -1,   149,   150,   151,   152,
     153,   154,   155,   156,   157,   158,   159,    -1,   161,    -1,
     163,   164,   165,   166,    -1,   168,    -1,   170,    -1,    -1,
      -1,   174,   175,   176,    -1,   178,    -1,   180,   181,    -1,
      -1,   184,   185,   186,   187,    -1,   189,   190,   191,   192,
     193,   194,   195,    -1,   197,   198,   199,   200,    -1,   202,
     203,   204,   205,   206,   207,   208,    -1,   210,    -1,   212,
     213,   214,   215,   216,   217,   218,   219,    -1,   221,    -1,
     223,    -1,    -1,   226,    -1,   228,   229,   230,   231,   232,
     233,   234,    -1,    -1,   237,    -1,   239,    -1,    -1,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,    -1,   271,   272,
     273,   274,   275,   276,    -1,   278,   279,    -1,   281,    -1,
     283,   284,   285,   286,   287,   288,    -1,   290,   291,    -1,
      -1,   294,   295,   296,    -1,    -1,   299,   300,    -1,   302,
      -1,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,    -1,    -1,    -1,    -1,   321,   322,
     323,    -1,   325,   326,   327,   328,   329,   330,    -1,   332,
     333,   334,   335,   336,   337,   338,   339,    -1,   341,   342,
     343,   344,   345,   346,   347,   348,    -1,   350,   351,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,    -1,   365,   366,    -1,   368,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
      -1,    -1,   385,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,    -1,   397,   398,   399,   400,    -1,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,   417,   418,    -1,   420,   421,    -1,
     423,    -1,   425,   426,   427,   428,   429,    -1,   431,   432,
      -1,   434,    -1,   436,   437,   438,   439,   440,    -1,   442,
     443,   444,   445,   446,   447,   448,   449,    -1,    -1,   452,
     453,   454,    -1,   456,   457,   458,   459,    -1,   461,   462,
     463,   464,   465,   466,   467,    -1,   469,    -1,   471,   472,
     473,   474,   475,   476,   477,    -1,    -1,   480,    -1,    -1,
     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   500,   501,   502,
     503,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   520,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    -1,
      32,    33,    34,    -1,    -1,    -1,    -1,    -1,    40,    -1,
      -1,    -1,    -1,    45,    46,    -1,    48,    49,    50,    -1,
      52,    53,    54,    55,    56,    -1,    58,    59,    -1,    61,
      62,    63,    64,    65,    66,    -1,    -1,    69,    70,    71,
      72,    73,    -1,    75,    76,    77,    78,    79,    -1,    -1,
      -1,    83,    84,    85,    86,    87,    88,    -1,    90,    91,
      92,    -1,    94,    95,    96,    97,    98,    99,    -1,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,    -1,   116,    -1,   118,   119,   120,   121,
     122,   123,    -1,   125,   126,   127,   128,   129,   130,    -1,
      -1,   133,   134,   135,   136,   137,   138,   139,    -1,   141,
     142,   143,    -1,   145,   146,   147,    -1,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,    -1,   161,
      -1,   163,   164,   165,   166,    -1,   168,    -1,   170,    -1,
      -1,    -1,   174,   175,   176,    -1,   178,    -1,   180,   181,
      -1,    -1,   184,   185,   186,   187,    -1,   189,   190,   191,
     192,   193,   194,   195,    -1,   197,   198,   199,   200,    -1,
     202,   203,   204,   205,   206,   207,   208,    -1,   210,    -1,
     212,   213,   214,   215,   216,   217,   218,   219,    -1,   221,
      -1,   223,    -1,    -1,   226,    -1,   228,   229,   230,   231,
     232,   233,   234,    -1,    -1,   237,    -1,   239,    -1,    -1,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,    -1,   271,
     272,   273,   274,   275,   276,    -1,   278,   279,    -1,   281,
      -1,   283,   284,   285,   286,   287,   288,    -1,   290,   291,
      -1,    -1,   294,   295,   296,    -1,    -1,   299,   300,    -1,
     302,    -1,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,    -1,    -1,    -1,    -1,   321,
     322,   323,    -1,   325,   326,   327,   328,   329,   330,    -1,
     332,   333,   334,   335,   336,   337,   338,   339,    -1,   341,
     342,   343,   344,   345,   346,   347,   348,    -1,   350,   351,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,    -1,   365,   366,    -1,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,    -1,    -1,   385,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,    -1,   397,   398,   399,   400,    -1,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,   417,   418,    -1,   420,   421,
      -1,   423,    -1,   425,   426,   427,   428,   429,    -1,   431,
     432,    -1,   434,    -1,   436,   437,   438,   439,   440,    -1,
     442,   443,   444,   445,   446,   447,   448,   449,    -1,    -1,
     452,   453,   454,    -1,   456,   457,   458,   459,    -1,   461,
     462,   463,   464,   465,   466,   467,    -1,   469,    -1,   471,
     472,   473,   474,   475,   476,   477,    -1,    -1,   480,    -1,
      -1,   483,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,   498,   499,   500,   501,
     502,   503,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   520,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    30,
      -1,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,    40,
      -1,    -1,    -1,    -1,    45,    46,    -1,    48,    49,    50,
      -1,    52,    53,    54,    55,    56,    -1,    58,    59,    -1,
      61,    62,    63,    64,    65,    66,    -1,    -1,    69,    70,
      71,    72,    73,    -1,    75,    76,    77,    78,    79,    -1,
      -1,    -1,    83,    84,    85,    86,    87,    88,    -1,    90,
      91,    92,    -1,    94,    95,    96,    97,    98,    99,    -1,
      -1,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,    -1,   116,    -1,   118,   119,   120,
     121,   122,   123,    -1,   125,   126,   127,   128,   129,   130,
      -1,    -1,   133,   134,   135,   136,   137,   138,   139,    -1,
     141,   142,   143,    -1,   145,   146,   147,    -1,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,    -1,
     161,    -1,   163,   164,   165,   166,    -1,   168,    -1,   170,
      -1,    -1,    -1,   174,   175,   176,    -1,   178,    -1,   180,
     181,    -1,    -1,   184,   185,   186,   187,    -1,   189,   190,
     191,   192,   193,   194,   195,    -1,   197,   198,   199,   200,
      -1,   202,   203,   204,   205,   206,   207,   208,    -1,   210,
      -1,   212,   213,   214,   215,   216,   217,   218,   219,    -1,
     221,    -1,   223,    -1,    -1,   226,    -1,   228,   229,   230,
     231,   232,   233,   234,    -1,    -1,   237,    -1,   239,    -1,
      -1,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,    -1,
     271,   272,   273,   274,   275,   276,    -1,   278,   279,    -1,
     281,    -1,   283,   284,   285,   286,   287,   288,    -1,   290,
     291,    -1,    -1,   294,   295,   296,    -1,    -1,   299,   300,
      -1,   302,    -1,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,    -1,    -1,    -1,    -1,
     321,   322,   323,    -1,   325,   326,   327,   328,   329,   330,
      -1,   332,   333,   334,   335,   336,   337,   338,   339,    -1,
     341,   342,   343,   344,   345,   346,   347,   348,    -1,   350,
     351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,    -1,   365,   366,    -1,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,    -1,    -1,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,    -1,   397,   398,   399,   400,
      -1,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,   417,   418,    -1,   420,
     421,    -1,   423,    -1,   425,   426,   427,   428,   429,    -1,
     431,   432,    -1,   434,    -1,   436,   437,   438,   439,   440,
      -1,   442,   443,   444,   445,   446,   447,   448,   449,    -1,
      -1,   452,   453,   454,    -1,   456,   457,   458,   459,    -1,
     461,   462,   463,   464,   465,   466,   467,    -1,   469,    -1,
     471,   472,   473,   474,   475,   476,   477,    -1,    -1,   480,
      -1,    -1,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,   499,   500,
     501,   502,   503,     3,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   520,
      -1,    -1,    22,    23,    24,    25,    -1,    27,    28,    29,
      30,    -1,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    45,    46,    -1,    48,    49,
      50,    -1,    52,    53,    54,    55,    56,    -1,    58,    59,
      -1,    61,    62,    63,    64,    65,    66,    -1,    -1,    69,
      70,    71,    72,    73,    -1,    75,    76,    77,    78,    79,
      -1,    -1,    -1,    -1,    84,    85,    86,    87,    88,    -1,
      90,    91,    92,    -1,    94,    95,    96,    97,    98,    -1,
      -1,    -1,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,    -1,   116,    -1,   118,   119,
     120,   121,   122,   123,    -1,   125,    -1,   127,   128,   129,
     130,    -1,    -1,   133,   134,   135,   136,   137,    -1,    -1,
      -1,   141,   142,   143,    -1,   145,   146,   147,    -1,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
      -1,   161,    -1,   163,   164,   165,   166,    -1,   168,    -1,
     170,    -1,   172,    -1,   174,   175,   176,    -1,   178,    -1,
     180,    -1,    -1,    -1,   184,   185,    -1,   187,    -1,   189,
     190,   191,   192,   193,   194,   195,    -1,   197,   198,   199,
     200,    -1,   202,   203,   204,   205,   206,   207,   208,    -1,
     210,    -1,   212,   213,   214,   215,   216,   217,   218,   219,
      -1,   221,    -1,   223,    -1,    -1,   226,    -1,   228,    -1,
     230,   231,   232,   233,   234,    -1,    -1,   237,    -1,   239,
      -1,    -1,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
      -1,   271,   272,   273,   274,    -1,   276,    -1,   278,   279,
      -1,   281,    -1,   283,   284,   285,   286,   287,   288,    -1,
     290,   291,    -1,    -1,   294,   295,   296,    -1,    -1,   299,
     300,    -1,   302,    -1,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,    -1,    -1,   316,   317,   318,   319,
      -1,   321,   322,   323,    -1,   325,   326,   327,   328,   329,
     330,    -1,   332,   333,   334,   335,   336,    -1,    -1,   339,
      -1,   341,   342,   343,   344,   345,   346,   347,   348,    -1,
     350,   351,   352,    -1,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,    -1,   365,   366,    -1,   368,   369,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,    -1,   385,   386,   387,   388,   389,
     390,   391,   392,   393,    -1,   395,    -1,    -1,   398,   399,
     400,    -1,    -1,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,   417,   418,    -1,
     420,   421,   422,   423,    -1,   425,   426,   427,   428,   429,
      -1,   431,   432,    -1,    -1,    -1,   436,   437,   438,   439,
     440,    -1,   442,   443,   444,   445,   446,   447,   448,   449,
      -1,    -1,   452,   453,   454,   455,   456,   457,   458,   459,
      -1,   461,   462,   463,   464,   465,   466,   467,    -1,   469,
      -1,   471,    -1,   473,   474,   475,   476,    -1,    -1,    -1,
     480,    -1,   482,   483,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,   498,   499,
     500,   501,   502,   503,    -1,    -1,   506,    -1,    -1,     3,
       4,     5,    -1,    -1,     8,     9,    -1,    -1,    -1,    -1,
     520,    15,    16,    -1,    -1,    19,    20,    21,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    -1,    56,    57,    58,    59,    60,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
      74,    75,    76,    77,    78,    -1,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    95,    96,    97,    98,    99,   100,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
     124,   125,   126,   127,   128,   129,   130,   131,   132,   133,
     134,   135,   136,   137,   138,   139,   140,   141,   142,   143,
     144,   145,   146,   147,   148,   149,   150,   151,   152,    -1,
     154,   155,   156,   157,   158,    -1,   160,   161,   162,   163,
     164,   165,   166,   167,   168,   169,   170,   171,   172,   173,
     174,   175,   176,   177,   178,   179,   180,   181,   182,   183,
      -1,    -1,   186,   187,   188,   189,   190,   191,   192,   193,
     194,   195,   196,   197,   198,   199,   200,   201,   202,   203,
     204,   205,   206,   207,   208,   209,   210,   211,    -1,   213,
     214,   215,   216,   217,   218,   219,   220,   221,   222,   223,
     224,   225,   226,   227,   228,   229,   230,   231,   232,   233,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,    -1,
     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,    -1,   301,   302,   303,
      -1,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,    -1,
     324,   325,   326,    -1,   328,   329,   330,   331,   332,   333,
     334,   335,   336,   337,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,   348,   349,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,    -1,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,   428,   429,   430,   431,   432,   433,
     434,   435,   436,   437,    -1,   439,    -1,   441,   442,   443,
     444,   445,   446,   447,   448,   449,   450,   451,   452,   453,
     454,   455,   456,   457,   458,   459,   460,   461,   462,   463,
     464,   465,    -1,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,   483,
     484,   485,   486,   487,   488,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   500,   501,   502,   503,
      -1,     3,    -1,   507,   508,   509,     8,   511,   512,   513,
     514,   515,   516,    15,    16,    -1,    -1,    19,    20,    21,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    -1,
      32,    33,    34,    -1,    -1,    -1,    -1,    -1,    40,    -1,
      -1,    -1,    -1,    45,    46,    -1,    48,    49,    50,    -1,
      52,    53,    54,    55,    56,    -1,    58,    59,    -1,    61,
      62,    63,    64,    65,    66,    -1,    -1,    69,    70,    71,
      72,    73,    -1,    75,    76,    77,    78,    79,    -1,    -1,
      -1,    83,    84,    85,    86,    87,    88,    -1,    90,    91,
      92,    -1,    94,    95,    96,    97,    98,    99,    -1,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,    -1,   116,    -1,   118,   119,   120,   121,
     122,   123,    -1,   125,   126,   127,   128,   129,   130,    -1,
      -1,   133,   134,   135,   136,   137,   138,   139,    -1,   141,
     142,   143,    -1,   145,   146,   147,    -1,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,    -1,   161,
      -1,   163,   164,   165,   166,    -1,   168,    -1,   170,    -1,
      -1,    -1,   174,   175,   176,    -1,   178,    -1,   180,   181,
      -1,    -1,   184,   185,   186,   187,    -1,   189,   190,   191,
     192,   193,   194,   195,    -1,   197,   198,   199,   200,    -1,
     202,   203,   204,   205,   206,   207,   208,    -1,   210,    -1,
     212,   213,   214,   215,   216,   217,   218,   219,    -1,   221,
      -1,   223,    -1,    -1,   226,    -1,   228,   229,   230,   231,
     232,   233,   234,    -1,    -1,   237,    -1,   239,    -1,    -1,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,    -1,   271,
     272,   273,   274,   275,   276,    -1,   278,   279,    -1,   281,
      -1,   283,   284,   285,   286,   287,   288,    -1,   290,   291,
      -1,    -1,   294,   295,   296,    -1,    -1,   299,   300,    -1,
     302,    -1,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,    -1,    -1,    -1,    -1,   321,
     322,   323,    -1,   325,   326,   327,   328,   329,   330,    -1,
     332,   333,   334,   335,   336,   337,   338,   339,    -1,   341,
     342,   343,   344,   345,   346,   347,   348,    -1,   350,   351,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,    -1,   365,   366,    -1,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,    -1,    -1,   385,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,    -1,   397,   398,   399,   400,    -1,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,   417,   418,    -1,   420,   421,
      -1,   423,    -1,   425,   426,   427,   428,   429,    -1,   431,
     432,    -1,   434,    -1,   436,   437,   438,   439,   440,    -1,
     442,   443,   444,   445,   446,   447,   448,   449,    -1,    -1,
     452,   453,   454,    -1,   456,   457,   458,   459,    -1,   461,
     462,   463,   464,   465,   466,   467,    -1,   469,    -1,   471,
     472,   473,   474,   475,   476,   477,    -1,    -1,   480,    -1,
      -1,   483,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,   498,   499,   500,   501,
     502,   503,    -1,    -1,    -1,   507,   508,   509,    -1,   511,
     512,   513,   514,   515,   516,     8,    -1,    -1,    11,    -1,
      -1,    -1,    15,    16,    17,    18,    19,    20,    21,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    37,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    48,     8,    -1,    -1,    11,
      -1,    -1,    55,    15,    16,    17,    18,    19,    20,    21,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    37,    -1,    80,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    48,     8,    -1,    -1,
      11,    -1,    -1,    55,    15,    16,    17,    18,    19,    20,
      21,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    37,    -1,    80,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    48,     8,    -1,
      -1,    11,    -1,    -1,    55,    15,    16,    17,    18,    19,
      20,    21,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    37,    -1,    80,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    48,    -1,
       8,    -1,    -1,    11,   177,    55,    -1,    15,    16,    17,
      18,    19,    20,    21,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   196,    -1,    -1,    -1,    -1,   201,    37,
      80,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      48,    -1,    -1,    -1,    -1,   177,    -1,    55,    -1,    -1,
      -1,   224,   225,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   196,    -1,    -1,   240,    -1,   201,
      -1,    -1,    80,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   177,    -1,    -1,    -1,
      -1,    -1,   224,   225,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   277,   196,    -1,   280,   240,    -1,
     201,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   294,    -1,    -1,   297,    -1,    -1,   177,    -1,    -1,
      -1,    -1,    -1,   224,   225,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   277,   196,    -1,   280,   240,
      -1,   201,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   294,    -1,    -1,   297,    -1,    -1,    -1,   177,
      -1,    -1,    -1,    -1,   224,   225,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   277,    -1,   196,   280,
     240,    -1,    -1,   201,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   294,    -1,    -1,   297,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   224,   225,    -1,    -1,
      -1,    -1,    -1,   396,    -1,    -1,    -1,   277,    -1,    -1,
     280,    -1,   240,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   294,    -1,    -1,   297,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   396,    -1,    -1,    -1,    -1,   277,
      -1,    -1,   280,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   294,    -1,    -1,   297,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   396,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   504,    -1,    -1,   507,   508,   509,    -1,   511,   512,
     513,   514,   515,   516,    -1,    -1,   396,    -1,   521,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,     8,    -1,    -1,
      11,    -1,    -1,    -1,    15,    16,    17,    18,    19,    20,
      21,    -1,   504,    -1,    -1,   507,   508,   509,    -1,   511,
     512,   513,   514,   515,   516,    -1,    37,    -1,   396,   521,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    48,    -1,    -1,
      -1,    -1,    -1,    -1,    55,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   504,    -1,    -1,   507,   508,   509,    -1,
     511,   512,   513,   514,   515,   516,    -1,    -1,   519,    80,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   504,    -1,    -1,   507,   508,   509,
      -1,   511,   512,   513,   514,   515,   516,    -1,    -1,   519,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   504,    -1,    -1,   507,
     508,   509,    -1,   511,   512,   513,   514,   515,   516,    -1,
      -1,   519,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   177,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   196,    -1,    -1,    -1,    -1,
     201,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   224,   225,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   240,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   277,    -1,    -1,   280,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   294,    -1,    -1,   297,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   396,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
       3,    -1,    -1,   504,    -1,    -1,   507,   508,   509,    -1,
     511,   512,   513,   514,   515,   516,    -1,    -1,   519,    22,
      23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      53,    54,    55,    56,    57,    58,    59,    60,    61,    62,
      63,    64,    65,    66,    67,    68,    69,    70,    71,    72,
      73,    74,    75,    76,    77,    78,    79,    80,    81,    82,
      83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      93,    94,    95,    96,    97,    98,    99,   100,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,   117,   118,   119,   120,   121,   122,
     123,   124,   125,   126,   127,   128,   129,   130,   131,   132,
     133,   134,   135,   136,   137,   138,   139,   140,   141,   142,
     143,   144,   145,   146,   147,   148,   149,   150,   151,   152,
     153,   154,   155,   156,   157,   158,   159,   160,   161,   162,
     163,   164,   165,   166,   167,   168,   169,   170,   171,   172,
     173,   174,   175,   176,   177,   178,   179,   180,   181,   182,
     183,   184,   185,   186,   187,   188,   189,   190,   191,   192,
     193,   194,   195,   196,   197,   198,   199,   200,   201,   202,
     203,   204,   205,   206,   207,   208,   209,   210,   211,   212,
     213,   214,   215,   216,   217,   218,   219,   220,   221,   222,
     223,   224,   225,   226,   227,   228,   229,   230,   231,   232,
     233,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
     323,   324,   325,   326,   327,   328,   329,   330,   331,   332,
     333,   334,   335,   336,   337,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,   348,   349,   350,   351,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,   385,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,   427,   428,   429,   430,   431,   432,
     433,   434,   435,   436,   437,   438,   439,   440,   441,   442,
     443,   444,   445,   446,   447,   448,   449,   450,   451,   452,
     453,   454,   455,   456,   457,   458,   459,   460,   461,   462,
     463,   464,   465,   466,   467,   468,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,
     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   500,   501,   502,
     503,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     513,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    -1,
      32,    33,    34,    -1,    -1,    -1,    -1,    -1,    40,    -1,
      -1,    -1,    -1,    45,    46,    -1,    48,    49,    50,    -1,
      52,    53,    54,    55,    56,    -1,    58,    59,    -1,    61,
      62,    63,    64,    65,    66,    -1,    -1,    69,    70,    71,
      72,    73,    -1,    75,    76,    77,    78,    79,    -1,    -1,
      -1,    83,    84,    85,    86,    87,    88,    -1,    90,    91,
      92,    -1,    94,    95,    96,    97,    98,    99,    -1,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,    -1,   116,    -1,   118,   119,   120,   121,
     122,   123,    -1,   125,   126,   127,   128,   129,   130,    -1,
      -1,   133,   134,   135,   136,   137,   138,   139,    -1,   141,
     142,   143,    -1,   145,   146,   147,    -1,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,    -1,   161,
      -1,   163,   164,   165,   166,    -1,   168,    -1,   170,    -1,
      -1,    -1,   174,   175,   176,    -1,   178,    -1,   180,   181,
      -1,    -1,   184,   185,   186,   187,    -1,   189,   190,   191,
     192,   193,   194,   195,    -1,   197,   198,   199,   200,    -1,
     202,   203,   204,   205,   206,   207,   208,    -1,   210,    -1,
     212,   213,   214,   215,   216,   217,   218,   219,    -1,   221,
      -1,   223,    -1,    -1,   226,    -1,   228,   229,   230,   231,
     232,   233,   234,    -1,    -1,   237,    -1,   239,    -1,    -1,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,    -1,   271,
     272,   273,   274,   275,   276,    -1,   278,   279,    -1,   281,
      -1,   283,   284,   285,   286,   287,   288,    -1,   290,   291,
      -1,    -1,   294,   295,   296,    -1,    -1,   299,   300,    -1,
     302,    -1,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,    -1,    -1,    -1,    -1,   321,
     322,   323,    -1,   325,   326,   327,   328,   329,   330,    -1,
     332,   333,   334,   335,   336,   337,   338,   339,    -1,   341,
     342,   343,   344,   345,   346,   347,   348,    -1,   350,   351,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,    -1,   365,   366,    -1,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,    -1,    -1,   385,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,    -1,   397,   398,   399,   400,    -1,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,   417,   418,    -1,   420,   421,
      -1,   423,    -1,   425,   426,   427,   428,   429,    -1,   431,
     432,    -1,   434,    -1,   436,   437,   438,   439,   440,    -1,
     442,   443,   444,   445,   446,   447,   448,   449,    -1,    -1,
     452,   453,   454,    -1,   456,   457,   458,   459,    -1,   461,
     462,   463,   464,   465,   466,   467,    -1,   469,    -1,   471,
     472,   473,   474,   475,   476,   477,    -1,    -1,   480,    -1,
      -1,   483,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,   498,   499,   500,   501,
     502,   503,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   513,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    30,
      -1,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,    40,
      -1,    -1,    -1,    -1,    45,    46,    -1,    48,    49,    50,
      -1,    52,    53,    54,    55,    56,    -1,    58,    59,    -1,
      61,    62,    63,    64,    65,    66,    -1,    -1,    69,    70,
      71,    72,    73,    -1,    75,    76,    77,    78,    79,    -1,
      -1,    -1,    83,    84,    85,    86,    87,    88,    -1,    90,
      91,    92,    -1,    94,    95,    96,    97,    98,    99,    -1,
      -1,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,    -1,   116,    -1,   118,   119,   120,
     121,   122,   123,    -1,   125,   126,   127,   128,   129,   130,
      -1,    -1,   133,   134,   135,   136,   137,   138,   139,    -1,
     141,   142,   143,    -1,   145,   146,   147,    -1,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,    -1,
     161,    -1,   163,   164,   165,   166,    -1,   168,    -1,   170,
      -1,    -1,    -1,   174,   175,   176,    -1,   178,    -1,   180,
     181,    -1,    -1,   184,   185,   186,   187,    -1,   189,   190,
     191,   192,   193,   194,   195,    -1,   197,   198,   199,   200,
      -1,   202,   203,   204,   205,   206,   207,   208,    -1,   210,
      -1,   212,   213,   214,   215,   216,   217,   218,   219,    -1,
     221,    -1,   223,    -1,    -1,   226,    -1,   228,   229,   230,
     231,   232,   233,   234,    -1,    -1,   237,    -1,   239,    -1,
      -1,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,    -1,
     271,   272,   273,   274,   275,   276,    -1,   278,   279,    -1,
     281,    -1,   283,   284,   285,   286,   287,   288,    -1,   290,
     291,    -1,    -1,   294,   295,   296,    -1,    -1,   299,   300,
      -1,   302,    -1,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,    -1,    -1,    -1,    -1,
     321,   322,   323,    -1,   325,   326,   327,   328,   329,   330,
      -1,   332,   333,   334,   335,   336,   337,   338,   339,    -1,
     341,   342,   343,   344,   345,   346,   347,   348,    -1,   350,
     351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,    -1,   365,   366,    -1,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,    -1,    -1,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,    -1,   397,   398,   399,   400,
      -1,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,   417,   418,    -1,   420,
     421,    -1,   423,    -1,   425,   426,   427,   428,   429,    -1,
     431,   432,    -1,   434,    -1,   436,   437,   438,   439,   440,
      -1,   442,   443,   444,   445,   446,   447,   448,   449,    -1,
      -1,   452,   453,   454,    -1,   456,   457,   458,   459,    -1,
     461,   462,   463,   464,   465,   466,   467,    -1,   469,    -1,
     471,   472,   473,   474,   475,   476,   477,    -1,    -1,   480,
      -1,    -1,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,   499,   500,
     501,   502,   503,     3,     4,     5,    -1,    -1,    -1,     9,
      -1,    -1,   513,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    -1,    32,    33,    34,    -1,    -1,    -1,    38,    -1,
      40,    -1,    -1,    -1,    44,    45,    46,    -1,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
      -1,    61,    62,    63,    64,    65,    66,    -1,    -1,    69,
      70,    71,    72,    73,    -1,    75,    76,    77,    78,    79,
      -1,    81,    -1,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    -1,    94,    95,    96,    97,    98,    99,
      -1,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,    -1,   118,   119,
     120,   121,   122,   123,    -1,   125,   126,   127,   128,   129,
     130,    -1,    -1,   133,   134,   135,   136,   137,   138,   139,
      -1,   141,   142,   143,    -1,   145,   146,   147,    -1,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
     160,   161,    -1,   163,   164,   165,   166,    -1,   168,    -1,
     170,   171,    -1,   173,   174,   175,   176,   177,   178,    -1,
     180,   181,    -1,    -1,   184,   185,   186,   187,    -1,   189,
     190,   191,   192,   193,   194,   195,   196,   197,   198,   199,
     200,    -1,   202,   203,   204,   205,   206,   207,   208,    -1,
     210,   211,   212,   213,   214,   215,   216,   217,   218,   219,
      -1,   221,    -1,   223,   224,   225,   226,   227,   228,   229,
     230,   231,   232,   233,   234,    -1,    -1,   237,   238,   239,
     240,    -1,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,    -1,   278,   279,
     280,   281,    -1,   283,   284,   285,   286,   287,   288,    -1,
     290,   291,   292,    -1,   294,   295,   296,    -1,    -1,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,    -1,    -1,    -1,
      -1,   321,   322,   323,   324,   325,   326,   327,   328,   329,
     330,    -1,   332,   333,   334,   335,   336,   337,   338,   339,
      -1,   341,   342,   343,   344,   345,   346,   347,   348,    -1,
     350,   351,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,    -1,   365,   366,   367,   368,   369,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,    -1,   384,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,    -1,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,   417,   418,    -1,
     420,   421,    -1,   423,   424,   425,   426,   427,   428,   429,
      -1,   431,   432,    -1,   434,    -1,   436,   437,   438,   439,
     440,   441,   442,   443,   444,   445,   446,   447,   448,   449,
      -1,    -1,   452,   453,   454,    -1,   456,   457,   458,   459,
      -1,   461,   462,   463,   464,   465,   466,   467,    -1,   469,
     470,   471,   472,   473,   474,   475,   476,   477,    -1,    -1,
     480,    -1,    -1,   483,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,   498,   499,
     500,   501,   502,   503,     3,     4,     5,    -1,    -1,    -1,
       9,   511,   512,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    22,    23,    24,    25,    26,    27,    28,
      29,    30,    -1,    32,    33,    34,    -1,    -1,    -1,    38,
      -1,    40,    -1,    -1,    -1,    44,    45,    46,    -1,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    58,
      59,    -1,    61,    62,    63,    64,    65,    66,    -1,    -1,
      69,    70,    71,    72,    73,    -1,    75,    76,    77,    78,
      79,    -1,    81,    -1,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    -1,    94,    95,    96,    97,    98,
      99,    -1,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,    -1,   118,
     119,   120,   121,   122,   123,    -1,   125,   126,   127,   128,
     129,   130,    -1,    -1,   133,   134,   135,   136,   137,   138,
     139,    -1,   141,   142,   143,    -1,   145,   146,   147,    -1,
     149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
     159,   160,   161,    -1,   163,   164,   165,   166,    -1,   168,
      -1,   170,   171,    -1,   173,   174,   175,   176,   177,   178,
      -1,   180,   181,    -1,    -1,   184,   185,   186,   187,    -1,
     189,   190,   191,   192,   193,   194,   195,   196,   197,   198,
     199,   200,    -1,   202,   203,   204,   205,   206,   207,   208,
      -1,   210,   211,   212,   213,   214,   215,   216,   217,   218,
     219,    -1,   221,    -1,   223,   224,   225,   226,   227,   228,
     229,   230,   231,   232,   233,   234,    -1,    -1,   237,   238,
     239,   240,    -1,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,    -1,   278,
     279,   280,   281,    -1,   283,   284,   285,   286,   287,   288,
      -1,   290,   291,   292,    -1,   294,   295,   296,    -1,    -1,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,    -1,    -1,
      -1,    -1,   321,   322,   323,   324,   325,   326,   327,   328,
     329,   330,    -1,   332,   333,   334,   335,   336,   337,   338,
     339,    -1,   341,   342,   343,   344,   345,   346,   347,   348,
      -1,   350,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,    -1,   365,   366,   367,   368,
     369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,    -1,   384,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,    -1,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,   417,   418,
      -1,   420,   421,    -1,   423,   424,   425,   426,   427,   428,
     429,    -1,   431,   432,    -1,   434,    -1,   436,   437,   438,
     439,   440,   441,   442,   443,   444,   445,   446,   447,   448,
     449,    -1,    -1,   452,   453,   454,    -1,   456,   457,   458,
     459,    -1,   461,   462,   463,   464,   465,   466,   467,    -1,
     469,   470,   471,   472,   473,   474,   475,   476,   477,    -1,
      -1,   480,    -1,    -1,   483,   484,   485,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
     499,   500,   501,   502,   503,     3,     4,     5,    -1,    -1,
      -1,     9,   511,   512,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    -1,    32,    33,    34,    -1,    -1,    -1,
      38,    -1,    40,    -1,    -1,    -1,    44,    45,    46,    -1,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      58,    59,    -1,    61,    62,    63,    64,    65,    66,    -1,
      -1,    69,    70,    71,    72,    73,    -1,    75,    76,    77,
      78,    79,    -1,    81,    -1,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    -1,    94,    95,    96,    97,
      98,    99,    -1,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,    -1,   116,    -1,
     118,   119,   120,   121,   122,   123,    -1,   125,   126,   127,
     128,   129,   130,    -1,    -1,   133,   134,   135,   136,   137,
     138,   139,    -1,   141,   142,   143,    -1,   145,   146,   147,
      -1,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,   159,   160,   161,    -1,   163,   164,   165,   166,    -1,
     168,    -1,   170,   171,    -1,   173,   174,   175,   176,   177,
     178,    -1,   180,   181,    -1,    -1,   184,   185,   186,   187,
      -1,   189,   190,   191,   192,   193,   194,   195,   196,   197,
     198,   199,   200,    -1,   202,   203,   204,   205,   206,   207,
     208,    -1,   210,   211,   212,   213,   214,   215,   216,   217,
     218,   219,    -1,   221,    -1,   223,   224,   225,   226,   227,
     228,   229,   230,   231,   232,   233,   234,    -1,    -1,   237,
     238,   239,   240,    -1,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,    -1,
     278,   279,   280,   281,    -1,   283,   284,   285,   286,   287,
     288,    -1,   290,   291,   292,    -1,   294,   295,   296,    -1,
      -1,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,    -1,
      -1,    -1,    -1,   321,   322,   323,   324,   325,   326,   327,
     328,   329,   330,    -1,   332,   333,   334,   335,   336,   337,
     338,   339,    -1,   341,   342,   343,   344,   345,   346,   347,
     348,    -1,   350,   351,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,    -1,   365,   366,   367,
     368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,    -1,   384,   385,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,    -1,   402,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,   417,
     418,    -1,   420,   421,    -1,   423,   424,   425,   426,   427,
     428,   429,    -1,   431,   432,    -1,   434,    -1,   436,   437,
     438,   439,   440,   441,   442,   443,   444,   445,   446,   447,
     448,   449,    -1,    -1,   452,   453,   454,    -1,   456,   457,
     458,   459,    -1,   461,   462,   463,   464,   465,   466,   467,
      -1,   469,   470,   471,   472,   473,   474,   475,   476,   477,
      -1,    -1,   480,    -1,    -1,   483,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,   499,   500,   501,   502,   503,    -1,    -1,     8,    -1,
      -1,    11,    -1,   511,   512,    15,    16,    17,    18,    19,
      20,    21,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    37,    -1,    -1,
      -1,    -1,    -1,    43,    -1,    -1,    -1,    -1,    48,     8,
      -1,    -1,    11,    -1,    -1,    55,    15,    16,    17,    18,
      19,    20,    21,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    37,    -1,
      80,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    48,
       8,    -1,    -1,    11,    -1,    -1,    55,    15,    16,    17,
      18,    19,    20,    21,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    37,
      -1,    80,    -1,    -1,   124,    -1,    -1,    -1,    -1,    -1,
      48,     8,    -1,    -1,    11,    -1,    -1,    55,    15,    16,
      17,    18,    19,    20,    21,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      37,    -1,    80,    -1,    -1,    42,    -1,    -1,    -1,    -1,
      -1,    48,    -1,    -1,    -1,    -1,    -1,   177,    55,    -1,
      -1,     8,    -1,    -1,    11,    -1,    -1,    -1,    15,    16,
      17,    18,    19,    20,    21,    -1,   196,    -1,    -1,    -1,
      -1,   201,    -1,    80,    -1,    -1,    -1,    -1,   167,    -1,
      37,    -1,    -1,   172,    -1,    -1,    -1,    -1,   177,    -1,
      -1,    48,    -1,    -1,   224,   225,    -1,    -1,    55,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   196,    -1,    -1,
     240,    -1,   201,    -1,    -1,    -1,    -1,    -1,   166,    -1,
      -1,    -1,    -1,    80,    -1,    -1,    -1,    -1,    -1,   177,
      -1,    -1,    -1,    -1,    -1,   224,   225,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   277,   196,    -1,
     280,   240,    -1,   201,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   294,    -1,    -1,   297,    -1,    -1,
     177,    -1,    -1,    -1,    -1,    -1,   224,   225,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   277,   196,
      -1,   280,   240,    -1,   201,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   294,    -1,    -1,   297,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   224,   225,    -1,
     177,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   277,
      -1,    -1,   280,   240,    -1,    -1,    -1,    -1,    -1,   196,
      -1,    -1,    -1,    -1,   201,    -1,   294,    -1,    -1,   297,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   396,   224,   225,    -1,
     277,    -1,    -1,   280,    -1,    -1,    -1,    -1,   326,    -1,
      -1,    -1,    -1,   240,    -1,    -1,    -1,   294,    -1,    -1,
     297,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   396,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     277,    -1,    -1,   280,    -1,    -1,    -1,    -1,    -1,    -1,
     460,    -1,    -1,    -1,    -1,    -1,    -1,   294,    -1,    -1,
     297,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   396,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   320,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   504,    -1,    -1,   507,   508,   509,
      -1,   511,   512,   513,   514,   515,   516,    -1,    -1,   396,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
       8,    -1,    -1,    11,    -1,    -1,    -1,    15,    16,    17,
      18,    19,    20,    21,    -1,   504,    -1,    -1,   507,   508,
     509,    -1,   511,   512,   513,   514,   515,   516,    -1,    37,
      -1,    -1,    -1,    -1,    42,    -1,    -1,    -1,    -1,   396,
      48,     8,    -1,    -1,    11,    -1,    -1,    55,    15,    16,
      17,    18,    19,    20,    21,    -1,   504,    -1,    -1,   507,
     508,   509,    -1,   511,   512,   513,   514,   515,   516,    -1,
      37,    -1,    80,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    48,    -1,    -1,    -1,    -1,    -1,    -1,    55,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   504,    -1,    -1,
     507,   508,   509,    -1,   511,   512,   513,   514,   515,   516,
      -1,    -1,    -1,    80,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,     8,    -1,    -1,    11,    -1,    -1,    -1,    15,    16,
      17,    18,    19,    20,    21,    -1,    -1,   504,    -1,    -1,
     507,   508,   509,    -1,   511,   512,   513,   514,   515,   516,
      37,    -1,    -1,    -1,    -1,    42,    -1,    -1,    -1,   177,
      -1,    48,    -1,     8,    -1,    -1,    11,    -1,    55,    -1,
      15,    16,    17,    18,    19,    20,    21,    -1,   196,    -1,
      -1,    -1,    -1,   201,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    37,    80,    -1,   172,    -1,    -1,    -1,    -1,
     177,    -1,    -1,    48,    -1,    -1,   224,   225,    -1,    -1,
      55,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   196,
      -1,    -1,   240,    -1,   201,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    80,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   224,   225,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   277,
      -1,    -1,   280,   240,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   294,    -1,    -1,   297,
      -1,    -1,    -1,    -1,    -1,    -1,     8,    -1,    -1,    11,
     177,    -1,    -1,    15,    16,    17,    18,    19,    20,    21,
     277,    -1,    -1,   280,    -1,    -1,    -1,    -1,    -1,   196,
      -1,    -1,    -1,    -1,   201,    37,    -1,   294,    -1,    -1,
     297,    -1,   167,    -1,    -1,    -1,    48,    -1,    -1,    -1,
      -1,    -1,   177,    55,    -1,    -1,    -1,   224,   225,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   196,    -1,   240,    -1,    -1,   201,    -1,    80,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   396,   224,
     225,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     277,    -1,    -1,   280,    -1,   240,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   294,    -1,    -1,
     297,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   396,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   277,    -1,    -1,   280,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   294,
      -1,    -1,   297,    -1,    -1,   177,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   196,    -1,    -1,    -1,    -1,   201,
      -1,    -1,    -1,    -1,    -1,    -1,   504,    -1,    -1,   507,
     508,   509,    -1,   511,   512,   513,   514,   515,   516,    -1,
      -1,    -1,   224,   225,    -1,    -1,    -1,    -1,    -1,   396,
      -1,    -1,     8,    -1,    -1,    11,    -1,    -1,   240,    15,
      16,    17,    18,    19,    20,    21,    -1,   504,    -1,    -1,
     507,   508,   509,    -1,   511,   512,   513,   514,   515,   516,
      -1,    37,    -1,    -1,    -1,    -1,    42,    -1,    -1,    -1,
      -1,   396,    48,    -1,    -1,   277,    -1,    -1,   280,    55,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   294,    -1,    -1,   297,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,     8,    80,    -1,    11,    -1,    -1,    -1,
      15,    16,    17,    18,    19,    20,    21,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    37,    -1,    -1,    -1,    -1,   504,    -1,    -1,
     507,   508,   509,    48,   511,   512,   513,   514,   515,   516,
      55,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    80,    -1,    -1,    -1,   504,
      -1,    -1,   507,   508,   509,    -1,   511,   512,   513,   514,
     515,   516,    -1,    -1,   396,     8,    -1,    -1,    11,    -1,
      -1,   177,    15,    16,    17,    18,    19,    20,    21,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     196,    -1,    -1,    -1,    37,   201,    -1,    -1,   430,    -1,
      -1,    -1,    -1,    -1,    -1,    48,    -1,    -1,    -1,    -1,
      -1,    -1,    55,    -1,    -1,    -1,    -1,    -1,   224,   225,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   240,    -1,    -1,    80,    -1,    -1,
      -1,    -1,   177,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   196,    -1,    -1,    -1,    -1,   201,    -1,    -1,    -1,
      -1,   277,   504,    -1,   280,   507,   508,   509,    -1,   511,
     512,   513,   514,   515,   516,    -1,    -1,    -1,   294,   224,
     225,   297,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     8,
      -1,    -1,    11,    -1,    -1,   240,    -1,    16,    17,    18,
      19,    20,    21,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    37,    -1,
      -1,    -1,    -1,    -1,   177,    -1,    -1,    -1,    -1,    48,
      -1,    -1,   277,    -1,    -1,   280,    55,    -1,    -1,    -1,
      -1,    -1,    -1,   196,    -1,    -1,    -1,    -1,   201,   294,
      -1,    -1,   297,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    80,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   224,   225,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     396,    -1,    -1,    -1,    -1,    -1,    -1,   240,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   277,    -1,    -1,   280,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   294,    -1,    -1,   297,    -1,    -1,    -1,    -1,    -1,
      -1,   396,    -1,    -1,    -1,    -1,    -1,    -1,   177,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   196,    -1,    -1,
      -1,    -1,   201,    -1,    -1,    -1,    -1,    -1,   504,    -1,
      -1,   507,   508,   509,    -1,   511,   512,   513,   514,   515,
     516,    -1,    -1,    -1,    -1,   224,   225,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   240,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   396,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   277,   504,
      -1,   280,   507,   508,   509,    -1,   511,   512,   513,   514,
     515,   516,    -1,    -1,    -1,   294,    -1,    -1,   297,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   504,    -1,    -1,   507,   508,   509,    -1,   511,   512,
     513,   514,   515,   516,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   396,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     3,
      -1,     5,    -1,    -1,    -1,   504,    -1,    -1,   507,   508,
     509,    -1,   511,   512,   513,   514,   515,   516,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
      74,    75,    76,    77,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    95,    96,    97,    98,    99,   100,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
     124,   125,   126,   127,   128,   129,   130,   131,   132,   133,
     134,   135,   136,   137,   138,   139,   140,   141,   142,   143,
     144,   145,   146,   147,   148,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,   159,   160,   161,   162,   163,
     164,   165,   166,   167,   168,   169,   170,   171,   172,   173,
     174,   175,   176,   177,   178,   179,   180,   181,   182,   183,
     184,   185,   186,   187,   188,   189,   190,   191,   192,   193,
     194,   195,   196,   197,   198,   199,   200,   201,   202,   203,
     204,   205,   206,   207,   208,   209,   210,   211,   212,   213,
     214,   215,   216,   217,   218,   219,   220,   221,   222,   223,
     224,   225,   226,   227,   228,   229,   230,   231,   232,   233,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,   329,   330,   331,   332,   333,
     334,   335,   336,   337,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,   348,   349,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,   428,   429,   430,   431,   432,   433,
     434,   435,   436,   437,   438,   439,   440,   441,   442,   443,
     444,   445,   446,   447,   448,   449,   450,   451,   452,   453,
     454,   455,   456,   457,   458,   459,   460,   461,   462,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,   483,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,   499,   500,   501,   502,   503,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,
      23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      53,    54,    55,    56,    57,    58,    59,    60,    61,    62,
      63,    64,    65,    66,    67,    68,    69,    70,    71,    72,
      73,    74,    75,    76,    77,    78,    79,    80,    81,    82,
      83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      93,    94,    95,    96,    97,    98,    99,   100,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,   117,   118,   119,   120,   121,   122,
     123,   124,   125,   126,   127,   128,   129,   130,   131,   132,
     133,   134,   135,   136,   137,   138,   139,   140,   141,   142,
     143,   144,   145,   146,   147,   148,   149,   150,   151,   152,
     153,   154,   155,   156,   157,   158,   159,   160,   161,   162,
     163,   164,   165,   166,   167,   168,   169,   170,   171,   172,
     173,   174,   175,   176,   177,   178,   179,   180,   181,   182,
     183,   184,   185,   186,   187,   188,   189,   190,   191,   192,
     193,   194,   195,   196,   197,   198,   199,   200,   201,   202,
     203,   204,   205,   206,   207,   208,   209,   210,   211,   212,
     213,   214,   215,   216,   217,   218,   219,   220,   221,   222,
     223,   224,   225,   226,   227,   228,   229,   230,   231,   232,
     233,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
     323,   324,   325,   326,   327,   328,   329,   330,   331,   332,
     333,   334,   335,   336,   337,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,   348,   349,   350,   351,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,   385,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,   427,   428,   429,   430,   431,   432,
     433,   434,   435,   436,   437,   438,   439,   440,   441,   442,
     443,   444,   445,   446,   447,   448,   449,   450,   451,   452,
     453,   454,   455,   456,   457,   458,   459,   460,   461,   462,
     463,   464,   465,   466,   467,   468,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,
     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   500,   501,   502,
     503,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
      72,    73,    74,    75,    76,    77,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    95,    96,    97,    98,    99,   100,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
     122,   123,   124,   125,   126,   127,   128,   129,   130,   131,
     132,   133,   134,   135,   136,   137,   138,   139,   140,   141,
     142,   143,   144,   145,   146,   147,   148,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,   160,   161,
     162,   163,   164,   165,   166,   167,   168,   169,   170,   171,
     172,   173,   174,   175,   176,   177,   178,   179,   180,   181,
     182,   183,   184,   185,   186,   187,   188,   189,   190,   191,
     192,   193,   194,   195,   196,   197,   198,   199,   200,   201,
     202,   203,   204,   205,   206,   207,   208,   209,   210,   211,
     212,   213,   214,   215,   216,   217,   218,   219,   220,   221,
     222,   223,   224,   225,   226,   227,   228,   229,   230,   231,
     232,   233,   234,   235,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     282,   283,   284,   285,   286,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,   323,   324,   325,   326,   327,   328,   329,   330,   331,
     332,   333,   334,   335,   336,   337,   338,   339,   340,   341,
     342,   343,   344,   345,   346,   347,   348,   349,   350,   351,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,   428,   429,   430,   431,
     432,   433,   434,   435,   436,   437,   438,   439,   440,   441,
     442,   443,   444,   445,   446,   447,   448,   449,   450,   451,
     452,   453,   454,   455,   456,   457,   458,   459,   460,   461,
     462,   463,   464,   465,   466,   467,   468,   469,   470,   471,
     472,   473,   474,   475,   476,   477,   478,   479,   480,   481,
     482,   483,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,   498,   499,   500,   501,
     502,   503,     3,    -1,     5,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    30,
      -1,    32,    33,    34,    -1,    -1,    -1,    38,    -1,    40,
      -1,    -1,    -1,    44,    45,    46,    -1,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    58,    59,    -1,
      61,    62,    63,    64,    65,    66,    -1,    -1,    69,    70,
      71,    72,    73,    -1,    75,    76,    77,    78,    79,    -1,
      81,    -1,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    -1,    94,    95,    96,    97,    98,    99,    -1,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,    -1,   116,    -1,   118,   119,   120,
     121,   122,   123,    -1,   125,   126,   127,   128,   129,   130,
      -1,    -1,   133,   134,   135,   136,   137,   138,   139,    -1,
     141,   142,   143,    -1,   145,   146,   147,    -1,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
     161,    -1,   163,   164,   165,   166,    -1,   168,    -1,   170,
     171,    -1,   173,   174,   175,   176,   177,   178,    -1,   180,
     181,    -1,    -1,   184,   185,   186,   187,    -1,   189,   190,
     191,   192,   193,   194,   195,   196,   197,   198,   199,   200,
      -1,   202,   203,   204,   205,   206,   207,   208,    -1,   210,
     211,   212,   213,   214,   215,   216,   217,   218,   219,    -1,
     221,    -1,   223,   224,   225,   226,   227,   228,   229,   230,
     231,   232,   233,   234,    -1,    -1,   237,   238,   239,   240,
      -1,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,    -1,   278,   279,   280,
     281,    -1,   283,   284,   285,   286,   287,   288,    -1,   290,
     291,   292,    -1,   294,   295,   296,    -1,    -1,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,    -1,    -1,    -1,    -1,
     321,   322,   323,   324,   325,   326,   327,   328,   329,   330,
      -1,   332,   333,   334,   335,   336,   337,   338,   339,    -1,
     341,   342,   343,   344,   345,   346,   347,   348,    -1,   350,
     351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,    -1,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,    -1,   384,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
      -1,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,   417,   418,    -1,   420,
     421,    -1,   423,   424,   425,   426,   427,   428,   429,    -1,
     431,   432,    -1,   434,    -1,   436,   437,   438,   439,   440,
     441,   442,   443,   444,   445,   446,   447,   448,   449,    -1,
      -1,   452,   453,   454,    -1,   456,   457,   458,   459,    -1,
     461,   462,   463,   464,   465,   466,   467,    -1,   469,   470,
     471,   472,   473,   474,   475,   476,   477,    -1,    -1,   480,
      -1,    -1,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,   499,   500,
     501,   502,   503,     3,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    -1,    32,    33,    34,    35,    36,    -1,    38,    -1,
      40,    -1,    -1,    -1,    44,    45,    46,    -1,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
      -1,    61,    62,    63,    64,    65,    66,    -1,    -1,    69,
      70,    71,    72,    73,    -1,    75,    76,    77,    78,    79,
      -1,    81,    -1,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    -1,    94,    95,    96,    97,    98,    99,
      -1,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,    -1,   116,    -1,   118,   119,
     120,   121,   122,   123,    -1,   125,   126,   127,   128,   129,
     130,    -1,    -1,   133,   134,   135,   136,   137,   138,   139,
      -1,   141,   142,   143,    -1,   145,   146,   147,    -1,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
      -1,   161,    -1,   163,   164,   165,   166,    -1,   168,    -1,
     170,   171,    -1,   173,   174,   175,   176,   177,   178,    -1,
     180,   181,    -1,    -1,   184,   185,   186,   187,    -1,   189,
     190,   191,   192,   193,   194,   195,   196,   197,   198,   199,
     200,    -1,   202,   203,   204,   205,   206,   207,   208,    -1,
     210,   211,   212,   213,   214,   215,   216,   217,   218,   219,
      -1,   221,    -1,   223,   224,   225,   226,   227,   228,   229,
     230,   231,   232,   233,   234,    -1,    -1,   237,   238,   239,
     240,    -1,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,    -1,   278,   279,
     280,   281,    -1,   283,   284,   285,   286,   287,   288,    -1,
     290,   291,    -1,    -1,   294,   295,   296,    -1,    -1,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,    -1,    -1,    -1,
      -1,   321,   322,   323,   324,   325,   326,   327,   328,   329,
     330,    -1,   332,   333,   334,   335,   336,   337,   338,   339,
      -1,   341,   342,   343,   344,   345,   346,   347,   348,    -1,
     350,   351,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,    -1,   365,   366,   367,   368,   369,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,    -1,   384,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,    -1,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,   417,   418,    -1,
     420,   421,    -1,   423,   424,   425,   426,   427,   428,   429,
      -1,   431,   432,    -1,   434,    -1,   436,   437,   438,   439,
     440,    -1,   442,   443,   444,   445,   446,   447,   448,   449,
      -1,    -1,   452,   453,   454,    -1,   456,   457,   458,   459,
      -1,   461,   462,   463,   464,   465,   466,   467,    -1,   469,
     470,   471,   472,   473,   474,   475,   476,   477,    -1,    -1,
     480,    -1,    -1,   483,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,   498,   499,
     500,   501,   502,   503,     3,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    22,    23,    24,    25,    26,    27,    28,
      29,    30,    -1,    32,    33,    34,    -1,    -1,    -1,    -1,
      -1,    40,    -1,    -1,    -1,    44,    45,    46,    -1,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    58,
      59,    -1,    61,    62,    63,    64,    65,    66,    -1,    68,
      69,    70,    71,    72,    73,    -1,    75,    76,    77,    78,
      79,    -1,    81,    -1,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    -1,    94,    95,    96,    97,    98,
      99,    -1,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,    -1,   116,    -1,   118,
     119,   120,   121,   122,   123,    -1,   125,   126,   127,   128,
     129,   130,    -1,    -1,   133,   134,   135,   136,   137,   138,
     139,    -1,   141,   142,   143,    -1,   145,   146,   147,    -1,
     149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
     159,    -1,   161,    -1,   163,   164,   165,   166,    -1,   168,
      -1,   170,   171,    -1,   173,   174,   175,   176,   177,   178,
      -1,   180,   181,    -1,    -1,   184,   185,   186,   187,    -1,
     189,   190,   191,   192,   193,   194,   195,   196,   197,   198,
     199,   200,    -1,   202,   203,   204,   205,   206,   207,   208,
      -1,   210,   211,   212,   213,   214,   215,   216,   217,   218,
     219,    -1,   221,    -1,   223,   224,   225,   226,   227,   228,
     229,   230,   231,   232,   233,   234,    -1,    -1,   237,   238,
     239,   240,    -1,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,    -1,   278,
     279,   280,   281,    -1,   283,   284,   285,   286,   287,   288,
      -1,   290,   291,    -1,    -1,   294,   295,   296,    -1,    -1,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,    -1,    -1,
      -1,    -1,   321,   322,   323,   324,   325,   326,   327,   328,
     329,   330,    -1,   332,   333,   334,   335,   336,   337,   338,
     339,    -1,   341,   342,   343,   344,   345,   346,   347,   348,
      -1,   350,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,    -1,   365,   366,   367,   368,
     369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,    -1,    -1,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,    -1,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,   417,   418,
      -1,   420,   421,    -1,   423,   424,   425,   426,   427,   428,
     429,    -1,   431,   432,    -1,   434,    -1,   436,   437,   438,
     439,   440,    -1,   442,   443,   444,   445,   446,   447,   448,
     449,    -1,    -1,   452,   453,   454,    -1,   456,   457,   458,
     459,    -1,   461,   462,   463,   464,   465,   466,   467,    -1,
     469,   470,   471,   472,   473,   474,   475,   476,   477,    -1,
      -1,   480,    -1,    -1,   483,   484,   485,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
     499,   500,   501,   502,   503,     3,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    -1,    32,    33,    34,    -1,    -1,    -1,
      -1,    -1,    40,    -1,    -1,    -1,    44,    45,    46,    -1,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      58,    59,    -1,    61,    62,    63,    64,    65,    66,    -1,
      -1,    69,    70,    71,    72,    73,    -1,    75,    76,    77,
      78,    79,    -1,    81,    -1,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    -1,    94,    95,    96,    97,
      98,    99,    -1,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,    -1,   116,    -1,
     118,   119,   120,   121,   122,   123,    -1,   125,   126,   127,
     128,   129,   130,    -1,    -1,   133,   134,   135,   136,   137,
     138,   139,    -1,   141,   142,   143,    -1,   145,   146,   147,
      -1,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,   159,    -1,   161,    -1,   163,   164,   165,   166,    -1,
     168,    -1,   170,   171,    -1,   173,   174,   175,   176,   177,
     178,    -1,   180,   181,    -1,    -1,   184,   185,   186,   187,
      -1,   189,   190,   191,   192,   193,   194,   195,   196,   197,
     198,   199,   200,    -1,   202,   203,   204,   205,   206,   207,
     208,    -1,   210,   211,   212,   213,   214,   215,   216,   217,
     218,   219,    -1,   221,    -1,   223,   224,   225,   226,   227,
     228,   229,   230,   231,   232,   233,   234,    -1,    -1,   237,
     238,   239,   240,    -1,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,    -1,
     278,   279,   280,   281,    -1,   283,   284,   285,   286,   287,
     288,    -1,   290,   291,    -1,    -1,   294,   295,   296,    -1,
      -1,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,    -1,
      -1,    -1,    -1,   321,   322,   323,   324,   325,   326,   327,
     328,   329,   330,    -1,   332,   333,   334,   335,   336,   337,
     338,   339,    -1,   341,   342,   343,   344,   345,   346,   347,
     348,    -1,   350,   351,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,    -1,   365,   366,   367,
     368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,    -1,    -1,   385,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,    -1,   402,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,   417,
     418,    -1,   420,   421,    -1,   423,   424,   425,   426,   427,
     428,   429,    -1,   431,   432,    -1,   434,    -1,   436,   437,
     438,   439,   440,    -1,   442,   443,   444,   445,   446,   447,
     448,   449,    -1,    -1,   452,   453,   454,    -1,   456,   457,
     458,   459,    -1,   461,   462,   463,   464,   465,   466,   467,
      -1,   469,   470,   471,   472,   473,   474,   475,   476,   477,
      -1,    -1,   480,    -1,    -1,   483,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,   499,   500,   501,   502,   503,     3,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    -1,    32,    33,    34,    -1,    -1,
      -1,    -1,    -1,    40,    -1,    -1,    -1,    -1,    45,    46,
      -1,    48,    49,    50,    -1,    52,    53,    54,    55,    56,
      -1,    58,    59,    -1,    61,    62,    63,    64,    65,    66,
      -1,    -1,    69,    70,    71,    72,    73,    74,    75,    76,
      77,    78,    79,    -1,    -1,    82,    83,    84,    85,    86,
      87,    88,    -1,    90,    91,    92,    93,    94,    95,    96,
      97,    98,    99,    -1,    -1,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,    -1,   116,
      -1,   118,   119,   120,   121,   122,   123,    -1,   125,   126,
     127,   128,   129,   130,    -1,    -1,   133,   134,   135,   136,
     137,   138,   139,    -1,   141,   142,   143,    -1,   145,   146,
     147,    -1,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,    -1,   161,    -1,   163,   164,   165,   166,
      -1,   168,   169,   170,    -1,    -1,    -1,   174,   175,   176,
      -1,   178,    -1,   180,   181,    -1,    -1,   184,   185,   186,
     187,    -1,   189,   190,   191,   192,   193,   194,   195,    -1,
     197,   198,   199,   200,    -1,   202,   203,   204,   205,   206,
     207,   208,    -1,   210,    -1,   212,   213,   214,   215,   216,
     217,   218,   219,    -1,   221,    -1,   223,    -1,    -1,   226,
      -1,   228,   229,   230,   231,   232,   233,   234,    -1,    -1,
     237,    -1,   239,    -1,    -1,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,    -1,   271,   272,   273,   274,   275,   276,
      -1,   278,   279,    -1,   281,    -1,   283,   284,   285,   286,
     287,   288,    -1,   290,   291,    -1,    -1,   294,   295,   296,
      -1,    -1,   299,   300,    -1,   302,    -1,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
      -1,    -1,    -1,    -1,   321,   322,   323,    -1,   325,   326,
     327,   328,   329,   330,   331,   332,   333,   334,   335,   336,
     337,   338,   339,    -1,   341,   342,   343,   344,   345,   346,
     347,   348,    -1,   350,   351,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,    -1,   365,   366,
      -1,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,    -1,    -1,   385,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,    -1,
     397,   398,   399,   400,    -1,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
     417,   418,    -1,   420,   421,    -1,   423,    -1,   425,   426,
     427,   428,   429,    -1,   431,   432,    -1,   434,    -1,   436,
     437,   438,   439,   440,    -1,   442,   443,   444,   445,   446,
     447,   448,   449,    -1,   451,   452,   453,   454,    -1,   456,
     457,   458,   459,    -1,   461,   462,   463,   464,   465,   466,
     467,    -1,   469,    -1,   471,   472,   473,   474,   475,   476,
     477,    -1,    -1,   480,    -1,    -1,   483,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,   498,   499,   500,   501,   502,   503,     3,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    -1,    32,    33,    34,    -1,
      -1,    -1,    -1,    -1,    40,    -1,    -1,    -1,    -1,    45,
      46,    -1,    48,    49,    50,    -1,    52,    53,    54,    55,
      56,    -1,    58,    59,    -1,    61,    62,    63,    64,    65,
      66,    -1,    -1,    69,    70,    71,    72,    73,    74,    75,
      76,    77,    78,    79,    -1,    -1,    -1,    83,    84,    85,
      86,    87,    88,    -1,    90,    91,    92,    93,    94,    95,
      96,    97,    98,    99,    -1,    -1,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,    -1,
     116,    -1,   118,   119,   120,   121,   122,   123,    -1,   125,
     126,   127,   128,   129,   130,    -1,    -1,   133,   134,   135,
     136,   137,   138,   139,    -1,   141,   142,   143,    -1,   145,
     146,   147,    -1,   149,   150,   151,   152,   153,   154,   155,
     156,   157,   158,   159,    -1,   161,    -1,   163,   164,   165,
     166,    -1,   168,   169,   170,    -1,    -1,    -1,   174,   175,
     176,    -1,   178,    -1,   180,   181,    -1,    -1,   184,   185,
     186,   187,    -1,   189,   190,   191,   192,   193,   194,   195,
      -1,   197,   198,   199,   200,    -1,   202,   203,   204,   205,
     206,   207,   208,    -1,   210,    -1,   212,   213,   214,   215,
     216,   217,   218,   219,    -1,   221,    -1,   223,    -1,    -1,
     226,    -1,   228,   229,   230,   231,   232,   233,   234,    -1,
      -1,   237,    -1,   239,   240,    -1,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,    -1,   271,   272,   273,   274,   275,
     276,    -1,   278,   279,    -1,   281,    -1,   283,   284,   285,
     286,   287,   288,    -1,   290,   291,    -1,    -1,   294,   295,
     296,    -1,    -1,   299,   300,    -1,   302,    -1,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,    -1,    -1,    -1,    -1,   321,   322,   323,    -1,   325,
     326,   327,   328,   329,   330,   331,   332,   333,   334,   335,
     336,   337,   338,   339,    -1,   341,   342,   343,   344,   345,
     346,   347,   348,    -1,   350,   351,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,    -1,   365,
     366,    -1,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,    -1,    -1,   385,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
      -1,   397,   398,   399,   400,    -1,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,   417,   418,    -1,   420,   421,    -1,   423,    -1,   425,
     426,   427,   428,   429,    -1,   431,   432,    -1,   434,    -1,
     436,   437,   438,   439,   440,    -1,   442,   443,   444,   445,
     446,   447,   448,   449,    -1,   451,   452,   453,   454,    -1,
     456,   457,   458,   459,    -1,   461,   462,   463,   464,   465,
     466,   467,    -1,   469,    -1,   471,   472,   473,   474,   475,
     476,   477,    -1,    -1,   480,    -1,    -1,   483,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,   498,   499,   500,   501,   502,   503,     3,    -1,
       5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    -1,    32,    33,    34,
      35,    36,    -1,    -1,    -1,    40,    -1,    -1,    -1,    -1,
      45,    46,    -1,    48,    49,    50,    -1,    52,    53,    54,
      55,    56,    -1,    58,    59,    -1,    61,    62,    63,    64,
      65,    66,    -1,    -1,    69,    70,    71,    72,    73,    -1,
      75,    76,    77,    78,    79,    -1,    -1,    -1,    83,    84,
      85,    86,    87,    88,    -1,    90,    91,    92,    -1,    94,
      95,    96,    97,    98,    99,    -1,    -1,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
      -1,   116,    -1,   118,   119,   120,   121,   122,   123,    -1,
     125,   126,   127,   128,   129,   130,    -1,    -1,   133,   134,
     135,   136,   137,   138,   139,    -1,   141,   142,   143,    -1,
     145,   146,   147,    -1,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,    -1,   161,    -1,   163,   164,
     165,   166,    -1,   168,    -1,   170,    -1,    -1,    -1,   174,
     175,   176,    -1,   178,    -1,   180,   181,    -1,    -1,   184,
     185,   186,   187,    -1,   189,   190,   191,   192,   193,   194,
     195,    -1,   197,   198,   199,   200,    -1,   202,   203,   204,
     205,   206,   207,   208,    -1,   210,    -1,   212,   213,   214,
     215,   216,   217,   218,   219,    -1,   221,    -1,   223,    -1,
      -1,   226,    -1,   228,   229,   230,   231,   232,   233,   234,
      -1,    -1,   237,    -1,   239,    -1,    -1,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,    -1,   271,   272,   273,   274,
     275,   276,    -1,   278,   279,    -1,   281,    -1,   283,   284,
     285,   286,   287,   288,    -1,   290,   291,    -1,    -1,   294,
     295,   296,    -1,    -1,   299,   300,    -1,   302,    -1,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,    -1,    -1,    -1,    -1,   321,   322,   323,    -1,
     325,   326,   327,   328,   329,   330,    -1,   332,   333,   334,
     335,   336,   337,   338,   339,    -1,   341,   342,   343,   344,
     345,   346,   347,   348,    -1,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,    -1,
     365,   366,    -1,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,    -1,    -1,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,    -1,   397,   398,   399,   400,    -1,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,    -1,   420,   421,    -1,   423,    -1,
     425,   426,   427,   428,   429,    -1,   431,   432,    -1,   434,
      -1,   436,   437,   438,   439,   440,    -1,   442,   443,   444,
     445,   446,   447,   448,   449,    -1,    -1,   452,   453,   454,
      -1,   456,   457,   458,   459,    -1,   461,   462,   463,   464,
     465,   466,   467,    -1,   469,    -1,   471,   472,   473,   474,
     475,   476,   477,    -1,    -1,   480,    -1,    -1,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,     3,
      -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
      34,    -1,    -1,    -1,    -1,    -1,    40,    -1,    -1,    -1,
      -1,    45,    46,    -1,    48,    49,    50,    -1,    52,    53,
      54,    55,    56,    -1,    58,    59,    -1,    61,    62,    63,
      64,    65,    66,    -1,    -1,    69,    70,    71,    72,    73,
      -1,    75,    76,    77,    78,    79,    -1,    -1,    -1,    83,
      84,    85,    86,    87,    88,    -1,    90,    91,    92,    -1,
      94,    95,    96,    97,    98,    99,    -1,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,    -1,   116,    -1,   118,   119,   120,   121,   122,   123,
      -1,   125,   126,   127,   128,   129,   130,    -1,    -1,   133,
     134,   135,   136,   137,   138,   139,    -1,   141,   142,   143,
      -1,   145,   146,   147,    -1,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,   159,    -1,   161,    -1,   163,
     164,   165,   166,    -1,   168,    -1,   170,    -1,    -1,    -1,
     174,   175,   176,    -1,   178,    -1,   180,   181,    -1,    -1,
     184,   185,   186,   187,    -1,   189,   190,   191,   192,   193,
     194,   195,    -1,   197,   198,   199,   200,    -1,   202,   203,
     204,   205,   206,   207,   208,    -1,   210,    -1,   212,   213,
     214,   215,   216,   217,   218,   219,    -1,   221,    -1,   223,
      -1,    -1,   226,    -1,   228,   229,   230,   231,   232,   233,
     234,    -1,    -1,   237,    -1,   239,    -1,    -1,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,    -1,   271,   272,   273,
     274,   275,   276,    -1,   278,   279,    -1,   281,    -1,   283,
     284,   285,   286,   287,   288,    -1,   290,   291,    -1,    -1,
     294,   295,   296,    -1,    -1,   299,   300,    -1,   302,    -1,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,    -1,    -1,    -1,    -1,   321,   322,   323,
      -1,   325,   326,   327,   328,   329,   330,    -1,   332,   333,
     334,   335,   336,   337,   338,   339,    -1,   341,   342,   343,
     344,   345,   346,   347,   348,    -1,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
      -1,   365,   366,    -1,   368,   369,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,    -1,
      -1,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,    -1,   397,   398,   399,   400,    -1,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,   417,   418,    -1,   420,   421,    -1,   423,
      -1,   425,   426,   427,   428,   429,    -1,   431,   432,    -1,
     434,    -1,   436,   437,   438,   439,   440,    -1,   442,   443,
     444,   445,   446,   447,   448,   449,    -1,    -1,   452,   453,
     454,    -1,   456,   457,   458,   459,    -1,   461,   462,   463,
     464,   465,   466,   467,    -1,   469,    -1,   471,   472,   473,
     474,   475,   476,   477,    -1,    -1,   480,    -1,    -1,   483,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,   499,   500,   501,   502,   503,
       3,    -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,
      23,    24,    25,    26,    27,    28,    29,    30,    -1,    32,
      33,    34,    -1,    -1,    -1,    -1,    -1,    40,    -1,    -1,
      -1,    -1,    45,    46,    -1,    48,    49,    50,    -1,    52,
      53,    54,    55,    56,    -1,    58,    59,    -1,    61,    62,
      63,    64,    65,    66,    -1,    -1,    69,    70,    71,    72,
      73,    -1,    75,    76,    77,    78,    79,    -1,    -1,    -1,
      83,    84,    85,    86,    87,    88,    -1,    90,    91,    92,
      -1,    94,    95,    96,    97,    98,    99,    -1,    -1,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,    -1,   116,    -1,   118,   119,   120,   121,   122,
     123,    -1,   125,   126,   127,   128,   129,   130,    -1,    -1,
     133,   134,   135,   136,   137,   138,   139,    -1,   141,   142,
     143,    -1,   145,   146,   147,    -1,   149,   150,   151,   152,
     153,   154,   155,   156,   157,   158,   159,    -1,   161,    -1,
     163,   164,   165,   166,    -1,   168,    -1,   170,    -1,    -1,
      -1,   174,   175,   176,    -1,   178,    -1,   180,   181,    -1,
      -1,   184,   185,   186,   187,    -1,   189,   190,   191,   192,
     193,   194,   195,    -1,   197,   198,   199,   200,    -1,   202,
     203,   204,   205,   206,   207,   208,    -1,   210,    -1,   212,
     213,   214,   215,   216,   217,   218,   219,    -1,   221,    -1,
     223,    -1,    -1,   226,    -1,   228,   229,   230,   231,   232,
     233,   234,    -1,    -1,   237,    -1,   239,    -1,    -1,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,    -1,   271,   272,
     273,   274,   275,   276,    -1,   278,   279,    -1,   281,    -1,
     283,   284,   285,   286,   287,   288,    -1,   290,   291,    -1,
     293,   294,   295,   296,    -1,    -1,   299,   300,    -1,   302,
      -1,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,    -1,    -1,    -1,    -1,   321,   322,
     323,    -1,   325,   326,   327,   328,   329,   330,    -1,   332,
     333,   334,   335,   336,   337,   338,   339,    -1,   341,   342,
     343,   344,   345,   346,   347,   348,    -1,   350,   351,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,    -1,   365,   366,    -1,   368,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
      -1,    -1,   385,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,    -1,   397,   398,   399,   400,    -1,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,   417,   418,    -1,   420,   421,    -1,
     423,    -1,   425,   426,   427,   428,   429,    -1,   431,   432,
      -1,   434,    -1,   436,   437,   438,   439,   440,    -1,   442,
     443,   444,   445,   446,   447,   448,   449,    -1,    -1,   452,
     453,   454,    -1,   456,   457,   458,   459,    -1,   461,   462,
     463,   464,   465,   466,   467,    -1,   469,    -1,   471,   472,
     473,   474,   475,   476,   477,    -1,    -1,   480,    -1,    -1,
     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   500,   501,   502,
     503,     3,    -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    -1,
      32,    33,    34,    -1,    -1,    -1,    -1,    -1,    40,    -1,
      -1,    -1,    -1,    45,    46,    -1,    48,    49,    50,    -1,
      52,    53,    54,    55,    56,    -1,    58,    59,    -1,    61,
      62,    63,    64,    65,    66,    -1,    -1,    69,    70,    71,
      72,    73,    -1,    75,    76,    77,    78,    79,    -1,    -1,
      -1,    83,    84,    85,    86,    87,    88,    -1,    90,    91,
      92,    -1,    94,    95,    96,    97,    98,    99,    -1,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,    -1,   116,    -1,   118,   119,   120,   121,
     122,   123,    -1,   125,   126,   127,   128,   129,   130,    -1,
      -1,   133,   134,   135,   136,   137,   138,   139,    -1,   141,
     142,   143,    -1,   145,   146,   147,    -1,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,    -1,   161,
      -1,   163,   164,   165,   166,    -1,   168,    -1,   170,    -1,
      -1,    -1,   174,   175,   176,    -1,   178,    -1,   180,   181,
      -1,    -1,   184,   185,   186,   187,    -1,   189,   190,   191,
     192,   193,   194,   195,    -1,   197,   198,   199,   200,    -1,
     202,   203,   204,   205,   206,   207,   208,    -1,   210,    -1,
     212,   213,   214,   215,   216,   217,   218,   219,    -1,   221,
      -1,   223,    -1,    -1,   226,    -1,   228,   229,   230,   231,
     232,   233,   234,    -1,    -1,   237,    -1,   239,    -1,    -1,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,    -1,   271,
     272,   273,   274,   275,   276,    -1,   278,   279,    -1,   281,
      -1,   283,   284,   285,   286,   287,   288,    -1,   290,   291,
      -1,   293,   294,   295,   296,    -1,    -1,   299,   300,    -1,
     302,    -1,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,    -1,    -1,    -1,    -1,   321,
     322,   323,    -1,   325,   326,   327,   328,   329,   330,    -1,
     332,   333,   334,   335,   336,   337,   338,   339,    -1,   341,
     342,   343,   344,   345,   346,   347,   348,    -1,   350,   351,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,    -1,   365,   366,    -1,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,    -1,    -1,   385,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,    -1,   397,   398,   399,   400,    -1,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,   417,   418,    -1,   420,   421,
      -1,   423,    -1,   425,   426,   427,   428,   429,    -1,   431,
     432,    -1,   434,    -1,   436,   437,   438,   439,   440,    -1,
     442,   443,   444,   445,   446,   447,   448,   449,    -1,    -1,
     452,   453,   454,    -1,   456,   457,   458,   459,    -1,   461,
     462,   463,   464,   465,   466,   467,    -1,   469,    -1,   471,
     472,   473,   474,   475,   476,   477,    -1,    -1,   480,    -1,
      -1,   483,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,   498,   499,   500,   501,
     502,   503,     3,    -1,     5,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,    40,
      -1,    -1,    -1,    -1,    45,    46,    -1,    48,    49,    50,
      -1,    52,    53,    54,    55,    56,    -1,    58,    59,    -1,
      61,    62,    63,    64,    65,    66,    -1,    -1,    69,    70,
      71,    72,    73,    -1,    75,    76,    77,    78,    79,    -1,
      -1,    -1,    83,    84,    85,    86,    87,    88,    -1,    90,
      91,    92,    -1,    94,    95,    96,    97,    98,    99,    -1,
      -1,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,    -1,   116,    -1,   118,   119,   120,
     121,   122,   123,    -1,   125,   126,   127,   128,   129,   130,
      -1,    -1,   133,   134,   135,   136,   137,   138,   139,    -1,
     141,   142,   143,    -1,   145,   146,   147,    -1,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,    -1,
     161,    -1,   163,   164,   165,   166,    -1,   168,    -1,   170,
      -1,    -1,    -1,   174,   175,   176,    -1,   178,    -1,   180,
     181,    -1,    -1,   184,   185,   186,   187,    -1,   189,   190,
     191,   192,   193,   194,   195,    -1,   197,   198,   199,   200,
      -1,   202,   203,   204,   205,   206,   207,   208,    -1,   210,
      -1,   212,   213,   214,   215,   216,   217,   218,   219,    -1,
     221,    -1,   223,    -1,    -1,   226,    -1,   228,   229,   230,
     231,   232,   233,   234,    -1,    -1,   237,    -1,   239,    -1,
      -1,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,    -1,
     271,   272,   273,   274,   275,   276,    -1,   278,   279,    -1,
     281,    -1,   283,   284,   285,   286,   287,   288,    -1,   290,
     291,    -1,    -1,   294,   295,   296,    -1,    -1,   299,   300,
      -1,   302,    -1,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,    -1,    -1,    -1,    -1,
     321,   322,   323,    -1,   325,   326,   327,   328,   329,   330,
      -1,   332,   333,   334,   335,   336,   337,   338,   339,    -1,
     341,   342,   343,   344,   345,   346,   347,   348,    -1,   350,
     351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,    -1,   365,   366,    -1,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,    -1,    -1,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,    -1,   397,   398,   399,   400,
      -1,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,   417,   418,    -1,   420,
     421,    -1,   423,    -1,   425,   426,   427,   428,   429,    -1,
     431,   432,    -1,   434,    -1,   436,   437,   438,   439,   440,
      -1,   442,   443,   444,   445,   446,   447,   448,   449,    -1,
      -1,   452,   453,   454,    -1,   456,   457,   458,   459,    -1,
     461,   462,   463,   464,   465,   466,   467,    -1,   469,    -1,
     471,   472,   473,   474,   475,   476,   477,    -1,    -1,   480,
      -1,    -1,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,   499,   500,
     501,   502,   503,     3,     4,    -1,    -1,    -1,    -1,     9,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    -1,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,
      40,    -1,    -1,    -1,    -1,    45,    46,    -1,    48,    49,
      50,    -1,    52,    53,    54,    55,    56,    -1,    58,    59,
      -1,    61,    62,    63,    64,    65,    66,    -1,    -1,    69,
      70,    71,    72,    73,    -1,    75,    76,    77,    78,    79,
      -1,    -1,    -1,    83,    84,    85,    86,    87,    88,    -1,
      90,    91,    92,    -1,    94,    95,    96,    97,    98,    99,
      -1,    -1,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,    -1,   116,    -1,   118,   119,
     120,   121,   122,   123,    -1,   125,   126,   127,   128,   129,
     130,    -1,    -1,   133,   134,   135,   136,   137,   138,   139,
      -1,   141,   142,   143,    -1,   145,   146,   147,    -1,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
      -1,   161,    -1,   163,   164,   165,   166,    -1,   168,    -1,
     170,    -1,    -1,    -1,   174,   175,   176,    -1,   178,    -1,
     180,   181,    -1,    -1,   184,   185,   186,   187,    -1,   189,
     190,   191,   192,   193,   194,   195,    -1,   197,   198,   199,
     200,    -1,   202,   203,   204,   205,   206,   207,   208,    -1,
     210,    -1,   212,   213,   214,   215,   216,   217,   218,   219,
      -1,   221,    -1,   223,    -1,    -1,   226,    -1,   228,   229,
     230,   231,   232,   233,   234,    -1,    -1,   237,    -1,   239,
      -1,    -1,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
      -1,   271,   272,   273,   274,   275,   276,    -1,   278,   279,
      -1,   281,    -1,   283,   284,   285,   286,   287,   288,    -1,
     290,   291,    -1,    -1,   294,   295,   296,    -1,    -1,   299,
     300,    -1,   302,    -1,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,    -1,    -1,    -1,
      -1,   321,   322,   323,    -1,   325,   326,   327,   328,   329,
     330,    -1,   332,   333,   334,   335,   336,   337,   338,   339,
      -1,   341,   342,   343,   344,   345,   346,   347,   348,    -1,
     350,   351,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,    -1,   365,   366,    -1,   368,   369,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,    -1,    -1,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,    -1,   397,   398,   399,
     400,    -1,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,   417,   418,    -1,
     420,   421,    -1,   423,    -1,   425,   426,   427,   428,   429,
      -1,   431,   432,    -1,   434,    -1,   436,   437,   438,   439,
     440,    -1,   442,   443,   444,   445,   446,   447,   448,   449,
      -1,    -1,   452,   453,   454,    -1,   456,   457,   458,   459,
      -1,   461,   462,   463,   464,   465,   466,   467,    -1,   469,
      -1,   471,   472,   473,   474,   475,   476,   477,    -1,    -1,
     480,    -1,    -1,   483,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,   498,   499,
     500,   501,   502,   503,     3,    -1,     5,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    22,    23,    24,    25,    26,    27,    28,
      29,    30,    -1,    32,    33,    34,    -1,    -1,    -1,    -1,
      -1,    40,    -1,    -1,    -1,    -1,    45,    46,    -1,    48,
      49,    50,    -1,    52,    53,    54,    55,    56,    -1,    58,
      59,    -1,    61,    62,    63,    64,    65,    66,    -1,    -1,
      69,    70,    71,    72,    73,    -1,    75,    76,    77,    78,
      79,    -1,    -1,    -1,    83,    84,    85,    86,    87,    88,
      -1,    90,    91,    92,    -1,    94,    95,    96,    97,    98,
      99,    -1,    -1,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,    -1,   116,    -1,   118,
     119,   120,   121,   122,   123,    -1,   125,   126,   127,   128,
     129,   130,    -1,    -1,   133,   134,   135,   136,   137,   138,
     139,    -1,   141,   142,   143,    -1,   145,   146,   147,    -1,
     149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
     159,    -1,   161,    -1,   163,   164,   165,   166,    -1,   168,
      -1,   170,    -1,    -1,    -1,   174,   175,   176,    -1,   178,
      -1,   180,   181,    -1,    -1,   184,   185,   186,   187,    -1,
     189,   190,   191,   192,   193,   194,   195,    -1,   197,   198,
     199,   200,    -1,   202,   203,   204,   205,   206,   207,   208,
      -1,   210,    -1,   212,   213,   214,   215,   216,   217,   218,
     219,    -1,   221,    -1,   223,    -1,    -1,   226,    -1,   228,
     229,   230,   231,   232,   233,   234,    -1,    -1,   237,    -1,
     239,    -1,    -1,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,    -1,   271,   272,   273,   274,   275,   276,    -1,   278,
     279,    -1,   281,    -1,   283,   284,   285,   286,   287,   288,
      -1,   290,   291,    -1,    -1,   294,   295,   296,    -1,    -1,
     299,   300,    -1,   302,    -1,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,    -1,    -1,
      -1,    -1,   321,   322,   323,    -1,   325,   326,   327,   328,
     329,   330,    -1,   332,   333,   334,   335,   336,   337,   338,
     339,    -1,   341,   342,   343,   344,   345,   346,   347,   348,
      -1,   350,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,    -1,   365,   366,    -1,   368,
     369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,    -1,    -1,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,    -1,   397,   398,
     399,   400,    -1,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,   417,   418,
      -1,   420,   421,   422,   423,    -1,   425,   426,   427,   428,
     429,    -1,   431,   432,    -1,   434,    -1,   436,   437,   438,
     439,   440,    -1,   442,   443,   444,   445,   446,   447,   448,
     449,    -1,    -1,   452,   453,   454,    -1,   456,   457,   458,
     459,    -1,   461,   462,   463,   464,   465,   466,   467,    -1,
     469,    -1,   471,   472,   473,   474,   475,   476,   477,    -1,
      -1,   480,    -1,    -1,   483,   484,   485,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
     499,   500,   501,   502,   503,     3,    -1,     5,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    -1,    32,    33,    34,    -1,    -1,    -1,
      -1,    -1,    40,    -1,    -1,    -1,    -1,    45,    46,    -1,
      48,    49,    50,    -1,    52,    53,    54,    55,    56,    -1,
      58,    59,    -1,    61,    62,    63,    64,    65,    66,    -1,
      -1,    69,    70,    71,    72,    73,    -1,    75,    76,    77,
      78,    79,    -1,    -1,    -1,    83,    84,    85,    86,    87,
      88,    -1,    90,    91,    92,    -1,    94,    95,    96,    97,
      98,    99,    -1,    -1,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,    -1,   116,    -1,
     118,   119,   120,   121,   122,   123,    -1,   125,   126,   127,
     128,   129,   130,    -1,    -1,   133,   134,   135,   136,   137,
     138,   139,    -1,   141,   142,   143,    -1,   145,   146,   147,
      -1,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,   159,    -1,   161,    -1,   163,   164,   165,   166,    -1,
     168,    -1,   170,    -1,    -1,    -1,   174,   175,   176,    -1,
     178,    -1,   180,   181,    -1,    -1,   184,   185,   186,   187,
      -1,   189,   190,   191,   192,   193,   194,   195,    -1,   197,
     198,   199,   200,    -1,   202,   203,   204,   205,   206,   207,
     208,    -1,   210,    -1,   212,   213,   214,   215,   216,   217,
     218,   219,    -1,   221,    -1,   223,    -1,    -1,   226,    -1,
     228,   229,   230,   231,   232,   233,   234,    -1,    -1,   237,
      -1,   239,    -1,    -1,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,    -1,   271,   272,   273,   274,   275,   276,    -1,
     278,   279,    -1,   281,    -1,   283,   284,   285,   286,   287,
     288,    -1,   290,   291,    -1,    -1,   294,   295,   296,    -1,
      -1,   299,   300,    -1,   302,    -1,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,    -1,
      -1,    -1,    -1,   321,   322,   323,    -1,   325,   326,   327,
     328,   329,   330,    -1,   332,   333,   334,   335,   336,   337,
     338,   339,    -1,   341,   342,   343,   344,   345,   346,   347,
     348,    -1,   350,   351,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,    -1,   365,   366,    -1,
     368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,    -1,    -1,   385,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,    -1,   397,
     398,   399,   400,    -1,   402,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,   417,
     418,    -1,   420,   421,    -1,   423,    -1,   425,   426,   427,
     428,   429,    -1,   431,   432,    -1,   434,    -1,   436,   437,
     438,   439,   440,    -1,   442,   443,   444,   445,   446,   447,
     448,   449,    -1,    -1,   452,   453,   454,    -1,   456,   457,
     458,   459,    -1,   461,   462,   463,   464,   465,   466,   467,
      -1,   469,    -1,   471,   472,   473,   474,   475,   476,   477,
      -1,    -1,   480,    -1,    -1,   483,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,   499,   500,   501,   502,   503,     3,    -1,     5,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    -1,    32,    33,    34,    -1,    -1,
      -1,    -1,    -1,    40,    -1,    -1,    -1,    -1,    45,    46,
      -1,    48,    49,    50,    -1,    52,    53,    54,    55,    56,
      -1,    58,    59,    -1,    61,    62,    63,    64,    65,    66,
      -1,    -1,    69,    70,    71,    72,    73,    -1,    75,    76,
      77,    78,    79,    -1,    -1,    -1,    83,    84,    85,    86,
      87,    88,    -1,    90,    91,    92,    -1,    94,    95,    96,
      97,    98,    99,    -1,    -1,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,    -1,   116,
      -1,   118,   119,   120,   121,   122,   123,    -1,   125,   126,
     127,   128,   129,   130,    -1,    -1,   133,   134,   135,   136,
     137,   138,   139,    -1,   141,   142,   143,    -1,   145,   146,
     147,    -1,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,    -1,   161,    -1,   163,   164,   165,   166,
      -1,   168,    -1,   170,    -1,    -1,    -1,   174,   175,   176,
      -1,   178,    -1,   180,   181,    -1,    -1,   184,   185,   186,
     187,    -1,   189,   190,   191,   192,   193,   194,   195,    -1,
     197,   198,   199,   200,    -1,   202,   203,   204,   205,   206,
     207,   208,    -1,   210,    -1,   212,   213,   214,   215,   216,
     217,   218,   219,    -1,   221,    -1,   223,    -1,    -1,   226,
      -1,   228,   229,   230,   231,   232,   233,   234,    -1,    -1,
     237,    -1,   239,    -1,    -1,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,    -1,   271,   272,   273,   274,   275,   276,
      -1,   278,   279,    -1,   281,    -1,   283,   284,   285,   286,
     287,   288,    -1,   290,   291,    -1,    -1,   294,   295,   296,
      -1,    -1,   299,   300,    -1,   302,    -1,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
      -1,    -1,    -1,    -1,   321,   322,   323,    -1,   325,   326,
     327,   328,   329,   330,    -1,   332,   333,   334,   335,   336,
     337,   338,   339,    -1,   341,   342,   343,   344,   345,   346,
     347,   348,    -1,   350,   351,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,    -1,   365,   366,
      -1,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,    -1,    -1,   385,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,    -1,
     397,   398,   399,   400,    -1,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
     417,   418,    -1,   420,   421,    -1,   423,    -1,   425,   426,
     427,   428,   429,    -1,   431,   432,    -1,   434,    -1,   436,
     437,   438,   439,   440,    -1,   442,   443,   444,   445,   446,
     447,   448,   449,    -1,    -1,   452,   453,   454,    -1,   456,
     457,   458,   459,    -1,   461,   462,   463,   464,   465,   466,
     467,    -1,   469,    -1,   471,   472,   473,   474,   475,   476,
     477,    -1,    -1,   480,    -1,    -1,   483,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,   498,   499,   500,   501,   502,   503,     3,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    34,    -1,
      -1,    -1,    -1,    -1,    40,    -1,    -1,    -1,    -1,    45,
      46,    -1,    48,    49,    50,    -1,    52,    53,    54,    55,
      56,    -1,    58,    59,    -1,    61,    62,    63,    64,    65,
      66,    -1,    -1,    69,    70,    71,    72,    73,    -1,    75,
      76,    77,    78,    79,    -1,    -1,    -1,    83,    84,    85,
      86,    87,    88,    -1,    90,    91,    92,    -1,    94,    95,
      96,    97,    98,    99,    -1,    -1,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,    -1,
     116,    -1,   118,   119,   120,   121,   122,   123,    -1,   125,
     126,   127,   128,   129,   130,    -1,    -1,   133,   134,   135,
     136,   137,   138,   139,    -1,   141,   142,   143,    -1,   145,
     146,   147,    -1,   149,   150,   151,   152,   153,   154,   155,
     156,   157,   158,   159,    -1,   161,    -1,   163,   164,   165,
     166,    -1,   168,    -1,   170,    -1,    -1,    -1,   174,   175,
     176,    -1,   178,    -1,   180,   181,    -1,    -1,   184,   185,
     186,   187,    -1,   189,   190,   191,   192,   193,   194,   195,
      -1,   197,   198,   199,   200,    -1,   202,   203,   204,   205,
     206,   207,   208,    -1,   210,    -1,   212,   213,   214,   215,
     216,   217,   218,   219,    -1,   221,    -1,   223,    -1,    -1,
     226,    -1,   228,   229,   230,   231,   232,   233,   234,    -1,
      -1,   237,    -1,   239,    -1,    -1,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,    -1,   271,   272,   273,   274,   275,
     276,    -1,   278,   279,    -1,   281,    -1,   283,   284,   285,
     286,   287,   288,    -1,   290,   291,    -1,    -1,   294,   295,
     296,    -1,    -1,   299,   300,    -1,   302,    -1,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,    -1,    -1,    -1,    -1,   321,   322,   323,    -1,   325,
     326,   327,   328,   329,   330,    -1,   332,   333,   334,   335,
     336,   337,   338,   339,    -1,   341,   342,   343,   344,   345,
     346,   347,   348,    -1,   350,   351,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,    -1,   365,
     366,    -1,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,    -1,    -1,   385,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
      -1,   397,   398,   399,   400,    -1,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,   417,   418,    -1,   420,   421,    -1,   423,    -1,   425,
     426,   427,   428,   429,    -1,   431,   432,    -1,   434,    -1,
     436,   437,   438,   439,   440,    -1,   442,   443,   444,   445,
     446,   447,   448,   449,    -1,    -1,   452,   453,   454,    -1,
     456,   457,   458,   459,    -1,   461,   462,   463,   464,   465,
     466,   467,    -1,   469,    -1,   471,   472,   473,   474,   475,
     476,   477,    -1,    -1,   480,    -1,    -1,   483,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,   498,   499,   500,   501,   502,   503,     3,    -1,
       5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    -1,    32,    33,    34,
      -1,    -1,    -1,    -1,    -1,    40,    -1,    -1,    -1,    -1,
      45,    46,    -1,    48,    49,    50,    -1,    52,    53,    54,
      55,    56,    -1,    58,    59,    -1,    61,    62,    63,    64,
      65,    66,    -1,    -1,    69,    70,    71,    72,    73,    -1,
      75,    76,    77,    78,    79,    -1,    -1,    -1,    83,    84,
      85,    86,    87,    88,    -1,    90,    91,    92,    -1,    94,
      95,    96,    97,    98,    99,    -1,    -1,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
      -1,   116,    -1,   118,   119,   120,   121,   122,   123,    -1,
     125,   126,   127,   128,   129,   130,    -1,    -1,   133,   134,
     135,   136,   137,   138,   139,    -1,   141,   142,   143,    -1,
     145,   146,   147,    -1,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,    -1,   161,    -1,   163,   164,
     165,   166,    -1,   168,    -1,   170,    -1,    -1,    -1,   174,
     175,   176,    -1,   178,    -1,   180,   181,    -1,    -1,   184,
     185,   186,   187,    -1,   189,   190,   191,   192,   193,   194,
     195,    -1,   197,   198,   199,   200,    -1,   202,   203,   204,
     205,   206,   207,   208,    -1,   210,    -1,   212,   213,   214,
     215,   216,   217,   218,   219,    -1,   221,    -1,   223,    -1,
      -1,   226,    -1,   228,   229,   230,   231,   232,   233,   234,
      -1,    -1,   237,    -1,   239,    -1,    -1,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,    -1,   271,   272,   273,   274,
     275,   276,    -1,   278,   279,    -1,   281,    -1,   283,   284,
     285,   286,   287,   288,    -1,   290,   291,    -1,    -1,   294,
     295,   296,    -1,    -1,   299,   300,    -1,   302,    -1,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,    -1,    -1,    -1,    -1,   321,   322,   323,    -1,
     325,   326,   327,   328,   329,   330,    -1,   332,   333,   334,
     335,   336,   337,   338,   339,    -1,   341,   342,   343,   344,
     345,   346,   347,   348,    -1,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,    -1,
     365,   366,    -1,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,    -1,    -1,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,    -1,   397,   398,   399,   400,    -1,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,    -1,   420,   421,    -1,   423,    -1,
     425,   426,   427,   428,   429,    -1,   431,   432,    -1,   434,
      -1,   436,   437,   438,   439,   440,    -1,   442,   443,   444,
     445,   446,   447,   448,   449,    -1,    -1,   452,   453,   454,
      -1,   456,   457,   458,   459,    -1,   461,   462,   463,   464,
     465,   466,   467,    -1,   469,    -1,   471,   472,   473,   474,
     475,   476,   477,    -1,    -1,   480,    -1,    -1,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,     3,
      -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    -1,    32,    33,
      34,    -1,    -1,    -1,    -1,    -1,    40,    -1,    -1,    -1,
      -1,    45,    46,    -1,    48,    49,    50,    -1,    52,    53,
      54,    55,    56,    -1,    58,    59,    -1,    61,    62,    63,
      64,    65,    66,    -1,    -1,    69,    70,    71,    72,    73,
      -1,    75,    76,    77,    78,    79,    -1,    -1,    -1,    83,
      84,    85,    86,    87,    88,    -1,    90,    91,    92,    -1,
      94,    95,    96,    97,    98,    99,    -1,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,    -1,   116,    -1,   118,   119,   120,   121,   122,   123,
      -1,   125,   126,   127,   128,   129,   130,    -1,    -1,   133,
     134,   135,   136,   137,   138,   139,    -1,   141,   142,   143,
      -1,   145,   146,   147,    -1,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,   159,    -1,   161,    -1,   163,
     164,   165,   166,    -1,   168,    -1,   170,    -1,    -1,    -1,
     174,   175,   176,    -1,   178,    -1,   180,   181,    -1,    -1,
     184,   185,   186,   187,    -1,   189,   190,   191,   192,   193,
     194,   195,    -1,   197,   198,   199,   200,    -1,   202,   203,
     204,   205,   206,   207,   208,    -1,   210,    -1,   212,   213,
     214,   215,   216,   217,   218,   219,    -1,   221,    -1,   223,
      -1,    -1,   226,    -1,   228,   229,   230,   231,   232,   233,
     234,    -1,    -1,   237,    -1,   239,    -1,    -1,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,    -1,   271,   272,   273,
     274,   275,   276,    -1,   278,   279,    -1,   281,    -1,   283,
     284,   285,   286,   287,   288,    -1,   290,   291,    -1,    -1,
     294,   295,   296,    -1,    -1,   299,   300,    -1,   302,    -1,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,    -1,    -1,    -1,    -1,   321,   322,   323,
      -1,   325,   326,   327,   328,   329,   330,    -1,   332,   333,
     334,   335,   336,   337,   338,   339,    -1,   341,   342,   343,
     344,   345,   346,   347,   348,    -1,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
      -1,   365,   366,    -1,   368,   369,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,    -1,
      -1,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,    -1,   397,   398,   399,   400,    -1,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,   417,   418,    -1,   420,   421,    -1,   423,
      -1,   425,   426,   427,   428,   429,    -1,   431,   432,    -1,
     434,    -1,   436,   437,   438,   439,   440,    -1,   442,   443,
     444,   445,   446,   447,   448,   449,    -1,    -1,   452,   453,
     454,    -1,   456,   457,   458,   459,    -1,   461,   462,   463,
     464,   465,   466,   467,    -1,   469,    -1,   471,   472,   473,
     474,   475,   476,   477,    -1,    -1,   480,    -1,    -1,   483,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,   499,   500,   501,   502,   503,
       3,    -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,
      23,    24,    25,    26,    27,    28,    29,    30,    -1,    32,
      33,    34,    -1,    -1,    -1,    -1,    -1,    40,    -1,    -1,
      -1,    -1,    45,    46,    -1,    48,    49,    50,    -1,    52,
      53,    54,    55,    56,    -1,    58,    59,    -1,    61,    62,
      63,    64,    65,    66,    -1,    -1,    69,    70,    71,    72,
      73,    -1,    75,    76,    77,    78,    79,    -1,    -1,    -1,
      83,    84,    85,    86,    87,    88,    -1,    90,    91,    92,
      -1,    94,    95,    96,    97,    98,    99,    -1,    -1,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,    -1,   116,    -1,   118,   119,   120,   121,   122,
     123,    -1,   125,   126,   127,   128,   129,   130,    -1,    -1,
     133,   134,   135,   136,   137,   138,   139,    -1,   141,   142,
     143,    -1,   145,   146,   147,    -1,   149,   150,   151,   152,
     153,   154,   155,   156,   157,   158,   159,    -1,   161,    -1,
     163,   164,   165,   166,    -1,   168,    -1,   170,    -1,    -1,
      -1,   174,   175,   176,    -1,   178,    -1,   180,   181,    -1,
      -1,   184,   185,   186,   187,    -1,   189,   190,   191,   192,
     193,   194,   195,    -1,   197,   198,   199,   200,    -1,   202,
     203,   204,   205,   206,   207,   208,    -1,   210,    -1,   212,
     213,   214,   215,   216,   217,   218,   219,    -1,   221,    -1,
     223,    -1,    -1,   226,    -1,   228,   229,   230,   231,   232,
     233,   234,    -1,    -1,   237,    -1,   239,    -1,    -1,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,    -1,   271,   272,
     273,   274,   275,   276,    -1,   278,   279,    -1,   281,    -1,
     283,   284,   285,   286,   287,   288,    -1,   290,   291,    -1,
      -1,   294,   295,   296,    -1,    -1,   299,   300,    -1,   302,
      -1,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,    -1,    -1,    -1,    -1,   321,   322,
     323,    -1,   325,   326,   327,   328,   329,   330,    -1,   332,
     333,   334,   335,   336,   337,   338,   339,    -1,   341,   342,
     343,   344,   345,   346,   347,   348,    -1,   350,   351,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,    -1,   365,   366,    -1,   368,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
      -1,    -1,   385,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,    -1,   397,   398,   399,   400,    -1,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,   417,   418,    -1,   420,   421,    -1,
     423,    -1,   425,   426,   427,   428,   429,    -1,   431,   432,
      -1,   434,    -1,   436,   437,   438,   439,   440,    -1,   442,
     443,   444,   445,   446,   447,   448,   449,    -1,    -1,   452,
     453,   454,    -1,   456,   457,   458,   459,    -1,   461,   462,
     463,   464,   465,   466,   467,    -1,   469,    -1,   471,   472,
     473,   474,   475,   476,   477,    -1,    -1,   480,    -1,    -1,
     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   500,   501,   502,
     503,     3,    -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    -1,
      32,    33,    34,    -1,    -1,    -1,    -1,    -1,    40,    -1,
      -1,    -1,    -1,    45,    46,    -1,    48,    49,    50,    -1,
      52,    53,    54,    55,    56,    -1,    58,    59,    -1,    61,
      62,    63,    64,    65,    66,    -1,    -1,    69,    70,    71,
      72,    73,    -1,    75,    76,    77,    78,    79,    -1,    -1,
      -1,    83,    84,    85,    86,    87,    88,    -1,    90,    91,
      92,    -1,    94,    95,    96,    97,    98,    99,    -1,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,    -1,   116,    -1,   118,   119,   120,   121,
     122,   123,    -1,   125,   126,   127,   128,   129,   130,    -1,
      -1,   133,   134,   135,   136,   137,   138,   139,    -1,   141,
     142,   143,    -1,   145,   146,   147,    -1,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,    -1,   161,
      -1,   163,   164,   165,   166,    -1,   168,    -1,   170,    -1,
      -1,    -1,   174,   175,   176,    -1,   178,    -1,   180,   181,
      -1,    -1,   184,   185,   186,   187,    -1,   189,   190,   191,
     192,   193,   194,   195,    -1,   197,   198,   199,   200,    -1,
     202,   203,   204,   205,   206,   207,   208,    -1,   210,    -1,
     212,   213,   214,   215,   216,   217,   218,   219,    -1,   221,
      -1,   223,    -1,    -1,   226,    -1,   228,   229,   230,   231,
     232,   233,   234,    -1,    -1,   237,    -1,   239,    -1,    -1,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,    -1,   271,
     272,   273,   274,   275,   276,    -1,   278,   279,    -1,   281,
      -1,   283,   284,   285,   286,   287,   288,    -1,   290,   291,
      -1,    -1,   294,   295,   296,    -1,    -1,   299,   300,    -1,
     302,    -1,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,    -1,    -1,    -1,    -1,   321,
     322,   323,    -1,   325,   326,   327,   328,   329,   330,    -1,
     332,   333,   334,   335,   336,   337,   338,   339,    -1,   341,
     342,   343,   344,   345,   346,   347,   348,    -1,   350,   351,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,    -1,   365,   366,    -1,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,    -1,    -1,   385,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,    -1,   397,   398,   399,   400,    -1,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,   417,   418,    -1,   420,   421,
      -1,   423,    -1,   425,   426,   427,   428,   429,    -1,   431,
     432,    -1,   434,    -1,   436,   437,   438,   439,   440,    -1,
     442,   443,   444,   445,   446,   447,   448,   449,    -1,    -1,
     452,   453,   454,    -1,   456,   457,   458,   459,    -1,   461,
     462,   463,   464,   465,   466,   467,    -1,   469,    -1,   471,
     472,   473,   474,   475,   476,   477,    -1,    -1,   480,    -1,
      -1,   483,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,   498,   499,   500,   501,
     502,   503,     3,    -1,     5,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    30,
      -1,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,    40,
      -1,    -1,    -1,    -1,    45,    46,    -1,    48,    49,    50,
      -1,    52,    53,    54,    55,    56,    -1,    58,    59,    -1,
      61,    62,    63,    64,    65,    66,    -1,    -1,    69,    70,
      71,    72,    73,    -1,    75,    76,    77,    78,    79,    -1,
      -1,    -1,    83,    84,    85,    86,    87,    88,    -1,    90,
      91,    92,    -1,    94,    95,    96,    97,    98,    99,    -1,
      -1,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,    -1,   116,    -1,   118,   119,   120,
     121,   122,   123,    -1,   125,   126,   127,   128,   129,   130,
      -1,    -1,   133,   134,   135,   136,   137,   138,   139,    -1,
     141,   142,   143,    -1,   145,   146,   147,    -1,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,    -1,
     161,    -1,   163,   164,   165,   166,    -1,   168,    -1,   170,
      -1,    -1,    -1,   174,   175,   176,    -1,   178,    -1,   180,
     181,    -1,    -1,   184,   185,   186,   187,    -1,   189,   190,
     191,   192,   193,   194,   195,    -1,   197,   198,   199,   200,
      -1,   202,   203,   204,   205,   206,   207,   208,    -1,   210,
      -1,   212,   213,   214,   215,   216,   217,   218,   219,    -1,
     221,    -1,   223,    -1,    -1,   226,    -1,   228,   229,   230,
     231,   232,   233,   234,    -1,    -1,   237,    -1,   239,    -1,
      -1,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,    -1,
     271,   272,   273,   274,   275,   276,    -1,   278,   279,    -1,
     281,    -1,   283,   284,   285,   286,   287,   288,    -1,   290,
     291,    -1,    -1,   294,   295,   296,    -1,    -1,   299,   300,
      -1,   302,    -1,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,    -1,    -1,    -1,    -1,
     321,   322,   323,    -1,   325,   326,   327,   328,   329,   330,
      -1,   332,   333,   334,   335,   336,   337,   338,   339,    -1,
     341,   342,   343,   344,   345,   346,   347,   348,    -1,   350,
     351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,    -1,   365,   366,    -1,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,    -1,    -1,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,    -1,   397,   398,   399,   400,
      -1,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,   417,   418,    -1,   420,
     421,    -1,   423,    -1,   425,   426,   427,   428,   429,    -1,
     431,   432,    -1,   434,    -1,   436,   437,   438,   439,   440,
      -1,   442,   443,   444,   445,   446,   447,   448,   449,    -1,
      -1,   452,   453,   454,    -1,   456,   457,   458,   459,    -1,
     461,   462,   463,   464,   465,   466,   467,    -1,   469,    -1,
     471,   472,   473,   474,   475,   476,   477,    -1,    -1,   480,
      -1,    -1,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,   499,   500,
     501,   502,   503,     3,    -1,     5,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    -1,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,
      40,    -1,    -1,    -1,    -1,    45,    46,    -1,    48,    49,
      50,    -1,    52,    53,    54,    55,    56,    -1,    58,    59,
      -1,    61,    62,    63,    64,    65,    66,    -1,    -1,    69,
      70,    71,    72,    73,    -1,    75,    76,    77,    78,    79,
      -1,    -1,    -1,    83,    84,    85,    86,    87,    88,    -1,
      90,    91,    92,    -1,    94,    95,    96,    97,    98,    99,
      -1,    -1,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,    -1,   116,    -1,   118,   119,
     120,   121,   122,   123,    -1,   125,   126,   127,   128,   129,
     130,    -1,    -1,   133,   134,   135,   136,   137,   138,   139,
      -1,   141,   142,   143,    -1,   145,   146,   147,    -1,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
      -1,   161,    -1,   163,   164,   165,   166,    -1,   168,    -1,
     170,    -1,    -1,    -1,   174,   175,   176,    -1,   178,    -1,
     180,   181,    -1,    -1,   184,   185,   186,   187,    -1,   189,
     190,   191,   192,   193,   194,   195,    -1,   197,   198,   199,
     200,    -1,   202,   203,   204,   205,   206,   207,   208,    -1,
     210,    -1,   212,   213,   214,   215,   216,   217,   218,   219,
      -1,   221,    -1,   223,    -1,    -1,   226,    -1,   228,   229,
     230,   231,   232,   233,   234,    -1,    -1,   237,    -1,   239,
      -1,    -1,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
      -1,   271,   272,   273,   274,   275,   276,    -1,   278,   279,
      -1,   281,    -1,   283,   284,   285,   286,   287,   288,    -1,
     290,   291,    -1,    -1,   294,   295,   296,    -1,    -1,   299,
     300,    -1,   302,    -1,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,    -1,    -1,    -1,
      -1,   321,   322,   323,    -1,   325,   326,   327,   328,   329,
     330,    -1,   332,   333,   334,   335,   336,   337,   338,   339,
      -1,   341,   342,   343,   344,   345,   346,   347,   348,    -1,
     350,   351,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,    -1,   365,   366,    -1,   368,   369,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,    -1,    -1,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,    -1,   397,   398,   399,
     400,    -1,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,   417,   418,    -1,
     420,   421,    -1,   423,    -1,   425,   426,   427,   428,   429,
      -1,   431,   432,    -1,   434,    -1,   436,   437,   438,   439,
     440,    -1,   442,   443,   444,   445,   446,   447,   448,   449,
      -1,    -1,   452,   453,   454,    -1,   456,   457,   458,   459,
      -1,   461,   462,   463,   464,   465,   466,   467,    -1,   469,
      -1,   471,   472,   473,   474,   475,   476,   477,    -1,    -1,
     480,    -1,    -1,   483,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,   498,   499,
     500,   501,   502,   503,     3,    -1,     5,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    22,    23,    24,    25,    26,    27,    28,
      29,    30,    -1,    32,    33,    34,    -1,    -1,    -1,    -1,
      -1,    40,    -1,    -1,    -1,    -1,    45,    46,    -1,    48,
      49,    50,    -1,    52,    53,    54,    55,    56,    -1,    58,
      59,    -1,    61,    62,    63,    64,    65,    66,    -1,    -1,
      69,    70,    71,    72,    73,    -1,    75,    76,    77,    78,
      79,    -1,    -1,    -1,    83,    84,    85,    86,    87,    88,
      -1,    90,    91,    92,    -1,    94,    95,    96,    97,    98,
      99,    -1,    -1,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,    -1,   116,    -1,   118,
     119,   120,   121,   122,   123,    -1,   125,   126,   127,   128,
     129,   130,    -1,    -1,   133,   134,   135,   136,   137,   138,
     139,    -1,   141,   142,   143,    -1,   145,   146,   147,    -1,
     149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
     159,    -1,   161,    -1,   163,   164,   165,   166,    -1,   168,
      -1,   170,    -1,    -1,    -1,   174,   175,   176,    -1,   178,
      -1,   180,   181,    -1,    -1,   184,   185,   186,   187,    -1,
     189,   190,   191,   192,   193,   194,   195,    -1,   197,   198,
     199,   200,    -1,   202,   203,   204,   205,   206,   207,   208,
      -1,   210,    -1,   212,   213,   214,   215,   216,   217,   218,
     219,    -1,   221,    -1,   223,    -1,    -1,   226,    -1,   228,
     229,   230,   231,   232,   233,   234,    -1,    -1,   237,    -1,
     239,    -1,    -1,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,    -1,   271,   272,   273,   274,   275,   276,    -1,   278,
     279,    -1,   281,    -1,   283,   284,   285,   286,   287,   288,
      -1,   290,   291,    -1,    -1,   294,   295,   296,    -1,    -1,
     299,   300,    -1,   302,    -1,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,    -1,    -1,
      -1,    -1,   321,   322,   323,    -1,   325,   326,   327,   328,
     329,   330,    -1,   332,   333,   334,   335,   336,   337,   338,
     339,    -1,   341,   342,   343,   344,   345,   346,   347,   348,
      -1,   350,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,    -1,   365,   366,    -1,   368,
     369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,    -1,    -1,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,    -1,   397,   398,
     399,   400,    -1,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,   417,   418,
      -1,   420,   421,    -1,   423,    -1,   425,   426,   427,   428,
     429,    -1,   431,   432,    -1,   434,    -1,   436,   437,   438,
     439,   440,    -1,   442,   443,   444,   445,   446,   447,   448,
     449,    -1,    -1,   452,   453,   454,    -1,   456,   457,   458,
     459,    -1,   461,   462,   463,   464,   465,   466,   467,    -1,
     469,    -1,   471,   472,   473,   474,   475,   476,   477,    -1,
      -1,   480,    -1,    -1,   483,   484,   485,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
     499,   500,   501,   502,   503,     3,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    -1,    32,    33,    34,    -1,    -1,    -1,
      -1,    -1,    40,    -1,    42,    -1,    -1,    45,    46,    -1,
      48,    49,    50,    -1,    52,    53,    54,    55,    56,    -1,
      58,    59,    -1,    61,    62,    63,    64,    65,    66,    -1,
      -1,    69,    70,    71,    72,    73,    -1,    75,    76,    77,
      78,    79,    -1,    -1,    -1,    83,    84,    85,    86,    87,
      88,    -1,    90,    91,    92,    -1,    94,    95,    96,    97,
      98,    99,    -1,    -1,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,    -1,   116,    -1,
     118,   119,   120,   121,   122,   123,    -1,   125,   126,   127,
     128,   129,   130,    -1,    -1,   133,   134,   135,   136,   137,
     138,   139,    -1,   141,   142,   143,    -1,   145,   146,   147,
      -1,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,   159,    -1,   161,    -1,   163,   164,   165,   166,    -1,
     168,    -1,   170,    -1,    -1,    -1,   174,   175,   176,    -1,
     178,    -1,   180,   181,    -1,    -1,   184,   185,   186,   187,
      -1,   189,   190,   191,   192,   193,   194,   195,    -1,   197,
     198,   199,   200,    -1,   202,   203,   204,   205,   206,   207,
     208,    -1,   210,    -1,   212,   213,   214,   215,   216,   217,
     218,   219,    -1,   221,    -1,   223,    -1,    -1,   226,    -1,
     228,   229,   230,   231,   232,   233,   234,    -1,    -1,   237,
      -1,   239,    -1,    -1,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,    -1,   271,   272,   273,   274,   275,   276,    -1,
     278,   279,    -1,   281,    -1,   283,   284,   285,   286,   287,
     288,    -1,   290,   291,    -1,    -1,   294,   295,   296,    -1,
      -1,   299,   300,    -1,   302,    -1,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,    -1,
      -1,    -1,    -1,   321,   322,   323,    -1,   325,   326,   327,
     328,   329,   330,    -1,   332,   333,   334,   335,   336,   337,
     338,   339,    -1,   341,   342,   343,   344,   345,   346,   347,
     348,    -1,   350,   351,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,    -1,   365,   366,    -1,
     368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,    -1,    -1,   385,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,    -1,   397,
     398,   399,   400,    -1,   402,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,   417,
     418,    -1,   420,   421,    -1,   423,    -1,   425,   426,   427,
     428,   429,    -1,   431,   432,    -1,   434,    -1,   436,   437,
     438,   439,   440,    -1,   442,   443,   444,   445,   446,   447,
     448,   449,    -1,    -1,   452,   453,   454,    -1,   456,   457,
     458,   459,    -1,   461,   462,   463,   464,   465,   466,   467,
      -1,   469,    -1,   471,   472,   473,   474,   475,   476,   477,
      -1,    -1,   480,    -1,    -1,   483,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,   499,   500,   501,   502,   503,     3,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    -1,    32,    33,    34,    -1,    -1,
      -1,    -1,    -1,    40,    -1,    42,    -1,    -1,    45,    46,
      -1,    48,    49,    50,    -1,    52,    53,    54,    55,    56,
      -1,    58,    59,    -1,    61,    62,    63,    64,    65,    66,
      -1,    -1,    69,    70,    71,    72,    73,    -1,    75,    76,
      77,    78,    79,    -1,    -1,    -1,    83,    84,    85,    86,
      87,    88,    -1,    90,    91,    92,    -1,    94,    95,    96,
      97,    98,    99,    -1,    -1,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,    -1,   116,
      -1,   118,   119,   120,   121,   122,   123,    -1,   125,   126,
     127,   128,   129,   130,    -1,    -1,   133,   134,   135,   136,
     137,   138,   139,    -1,   141,   142,   143,    -1,   145,   146,
     147,    -1,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,    -1,   161,    -1,   163,   164,   165,   166,
      -1,   168,    -1,   170,    -1,    -1,    -1,   174,   175,   176,
      -1,   178,    -1,   180,   181,    -1,    -1,   184,   185,   186,
     187,    -1,   189,   190,   191,   192,   193,   194,   195,    -1,
     197,   198,   199,   200,    -1,   202,   203,   204,   205,   206,
     207,   208,    -1,   210,    -1,   212,   213,   214,   215,   216,
     217,   218,   219,    -1,   221,    -1,   223,    -1,    -1,   226,
      -1,   228,   229,   230,   231,   232,   233,   234,    -1,    -1,
     237,    -1,   239,    -1,    -1,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,    -1,   271,   272,   273,   274,   275,   276,
      -1,   278,   279,    -1,   281,    -1,   283,   284,   285,   286,
     287,   288,    -1,   290,   291,    -1,    -1,   294,   295,   296,
      -1,    -1,   299,   300,    -1,   302,    -1,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
      -1,    -1,    -1,    -1,   321,   322,   323,    -1,   325,   326,
     327,   328,   329,   330,    -1,   332,   333,   334,   335,   336,
     337,   338,   339,    -1,   341,   342,   343,   344,   345,   346,
     347,   348,    -1,   350,   351,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,    -1,   365,   366,
      -1,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,    -1,    -1,   385,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,    -1,
     397,   398,   399,   400,    -1,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
     417,   418,    -1,   420,   421,    -1,   423,    -1,   425,   426,
     427,   428,   429,    -1,   431,   432,    -1,   434,    -1,   436,
     437,   438,   439,   440,    -1,   442,   443,   444,   445,   446,
     447,   448,   449,    -1,    -1,   452,   453,   454,    -1,   456,
     457,   458,   459,    -1,   461,   462,   463,   464,   465,   466,
     467,    -1,   469,    -1,   471,   472,   473,   474,   475,   476,
     477,    -1,    -1,   480,    -1,    -1,   483,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,   498,   499,   500,   501,   502,   503,     3,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    34,    -1,
      -1,    -1,    -1,    -1,    40,    -1,    -1,    -1,    -1,    45,
      46,    -1,    48,    49,    50,    -1,    52,    53,    54,    55,
      56,    -1,    58,    59,    -1,    61,    62,    63,    64,    65,
      66,    -1,    -1,    69,    70,    71,    72,    73,    -1,    75,
      76,    77,    78,    79,    -1,    -1,    -1,    83,    84,    85,
      86,    87,    88,    -1,    90,    91,    92,    -1,    94,    95,
      96,    97,    98,    99,    -1,    -1,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,    -1,
     116,    -1,   118,   119,   120,   121,   122,   123,    -1,   125,
     126,   127,   128,   129,   130,    -1,    -1,   133,   134,   135,
     136,   137,   138,   139,    -1,   141,   142,   143,    -1,   145,
     146,   147,    -1,   149,   150,   151,   152,   153,   154,   155,
     156,   157,   158,   159,    -1,   161,    -1,   163,   164,   165,
     166,    -1,   168,    -1,   170,    -1,    -1,    -1,   174,   175,
     176,    -1,   178,    -1,   180,   181,    -1,    -1,   184,   185,
     186,   187,    -1,   189,   190,   191,   192,   193,   194,   195,
      -1,   197,   198,   199,   200,    -1,   202,   203,   204,   205,
     206,   207,   208,    -1,   210,    -1,   212,   213,   214,   215,
     216,   217,   218,   219,    -1,   221,    -1,   223,    -1,    -1,
     226,    -1,   228,   229,   230,   231,   232,   233,   234,    -1,
      -1,   237,    -1,   239,    -1,    -1,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,    -1,   271,   272,   273,   274,   275,
     276,    -1,   278,   279,    -1,   281,    -1,   283,   284,   285,
     286,   287,   288,    -1,   290,   291,    -1,    -1,   294,   295,
     296,    -1,    -1,   299,   300,    -1,   302,    -1,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,    -1,    -1,    -1,    -1,   321,   322,   323,    -1,   325,
     326,   327,   328,   329,   330,    -1,   332,   333,   334,   335,
     336,   337,   338,   339,    -1,   341,   342,   343,   344,   345,
     346,   347,   348,    -1,   350,   351,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,    -1,   365,
     366,    -1,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,    -1,    -1,   385,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
      -1,   397,   398,   399,   400,    -1,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,   417,   418,    -1,   420,   421,    -1,   423,    -1,   425,
     426,   427,   428,   429,    -1,   431,   432,    -1,   434,    -1,
     436,   437,   438,   439,   440,    -1,   442,   443,   444,   445,
     446,   447,   448,   449,    -1,    -1,   452,   453,   454,    -1,
     456,   457,   458,   459,    -1,   461,   462,   463,   464,   465,
     466,   467,    -1,   469,    -1,   471,   472,   473,   474,   475,
     476,   477,    -1,    -1,   480,    -1,    -1,   483,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,   498,   499,   500,   501,   502,   503,     3,    -1,
       5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    -1,    32,    33,    34,
      -1,    -1,    -1,    -1,    -1,    40,    -1,    -1,    -1,    -1,
      45,    46,    -1,    48,    49,    50,    -1,    52,    53,    54,
      55,    56,    -1,    58,    59,    -1,    61,    62,    63,    64,
      65,    66,    -1,    -1,    69,    70,    71,    72,    73,    -1,
      75,    76,    77,    78,    79,    -1,    -1,    -1,    83,    84,
      85,    86,    87,    88,    -1,    90,    91,    92,    -1,    94,
      95,    96,    97,    98,    99,    -1,    -1,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
      -1,   116,    -1,   118,   119,   120,   121,   122,   123,    -1,
     125,   126,   127,   128,   129,   130,    -1,    -1,   133,   134,
     135,   136,   137,   138,   139,    -1,   141,   142,   143,    -1,
     145,   146,   147,    -1,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,    -1,   161,    -1,   163,   164,
     165,   166,    -1,   168,    -1,   170,    -1,    -1,    -1,   174,
     175,   176,    -1,   178,    -1,   180,   181,    -1,    -1,   184,
     185,   186,   187,    -1,   189,   190,   191,   192,   193,   194,
     195,    -1,   197,   198,   199,   200,    -1,   202,   203,   204,
     205,   206,   207,   208,    -1,   210,    -1,   212,   213,   214,
     215,   216,   217,   218,   219,    -1,   221,    -1,   223,    -1,
      -1,   226,    -1,   228,   229,   230,   231,   232,   233,   234,
      -1,    -1,   237,    -1,   239,    -1,    -1,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,    -1,   271,   272,   273,   274,
     275,   276,    -1,   278,   279,    -1,   281,    -1,   283,   284,
     285,   286,   287,   288,    -1,   290,   291,    -1,    -1,   294,
     295,   296,    -1,    -1,   299,   300,    -1,   302,    -1,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,    -1,    -1,    -1,    -1,   321,   322,   323,    -1,
     325,   326,   327,   328,   329,   330,    -1,   332,   333,   334,
     335,   336,   337,   338,   339,    -1,   341,   342,   343,   344,
     345,   346,   347,   348,    -1,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,    -1,
     365,   366,    -1,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,    -1,    -1,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,    -1,   397,   398,   399,   400,    -1,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,    -1,   420,   421,    -1,   423,    -1,
     425,   426,   427,   428,   429,    -1,   431,   432,    -1,   434,
      -1,   436,   437,   438,   439,   440,    -1,   442,   443,   444,
     445,   446,   447,   448,   449,    -1,    -1,   452,   453,   454,
      -1,   456,   457,   458,   459,    -1,   461,   462,   463,   464,
     465,   466,   467,    -1,   469,    -1,   471,   472,   473,   474,
     475,   476,   477,    -1,    -1,   480,    -1,    -1,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,     3,
      -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    -1,    32,    33,
      34,    -1,    -1,    -1,    -1,    -1,    40,    -1,    -1,    -1,
      -1,    45,    46,    -1,    48,    49,    50,    -1,    52,    53,
      54,    55,    56,    -1,    58,    59,    -1,    61,    62,    63,
      64,    65,    66,    -1,    -1,    69,    70,    71,    72,    73,
      -1,    75,    76,    77,    78,    79,    -1,    -1,    -1,    83,
      84,    85,    86,    87,    88,    -1,    90,    91,    92,    -1,
      94,    95,    96,    97,    98,    99,    -1,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,    -1,   116,    -1,   118,   119,   120,   121,   122,   123,
      -1,   125,   126,   127,   128,   129,   130,    -1,    -1,   133,
     134,   135,   136,   137,   138,   139,    -1,   141,   142,   143,
      -1,   145,   146,   147,    -1,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,   159,    -1,   161,    -1,   163,
     164,   165,   166,    -1,   168,    -1,   170,    -1,    -1,    -1,
     174,   175,   176,    -1,   178,    -1,   180,   181,    -1,    -1,
     184,   185,   186,   187,    -1,   189,   190,   191,   192,   193,
     194,   195,    -1,   197,   198,   199,   200,    -1,   202,   203,
     204,   205,   206,   207,   208,    -1,   210,    -1,   212,   213,
     214,   215,   216,   217,   218,   219,    -1,   221,    -1,   223,
      -1,    -1,   226,    -1,   228,   229,   230,   231,   232,   233,
     234,    -1,    -1,   237,    -1,   239,    -1,    -1,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,    -1,   271,   272,   273,
     274,   275,   276,    -1,   278,   279,    -1,   281,    -1,   283,
     284,   285,   286,   287,   288,    -1,   290,   291,    -1,    -1,
     294,   295,   296,    -1,    -1,   299,   300,    -1,   302,    -1,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,    -1,    -1,    -1,    -1,   321,   322,   323,
      -1,   325,   326,   327,   328,   329,   330,    -1,   332,   333,
     334,   335,   336,   337,   338,   339,    -1,   341,   342,   343,
     344,   345,   346,   347,   348,    -1,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
      -1,   365,   366,    -1,   368,   369,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,    -1,
      -1,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,    -1,   397,   398,   399,   400,    -1,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,   417,   418,    -1,   420,   421,    -1,   423,
      -1,   425,   426,   427,   428,   429,    -1,   431,   432,    -1,
     434,    -1,   436,   437,   438,   439,   440,    -1,   442,   443,
     444,   445,   446,   447,   448,   449,    -1,    -1,   452,   453,
     454,    -1,   456,   457,   458,   459,    -1,   461,   462,   463,
     464,   465,   466,   467,    -1,   469,    -1,   471,   472,   473,
     474,   475,   476,   477,    -1,    -1,   480,    -1,    -1,   483,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,   499,   500,   501,   502,   503,
       3,    -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,
      23,    24,    25,    26,    27,    28,    29,    30,    -1,    32,
      33,    34,    -1,    -1,    -1,    -1,    -1,    40,    -1,    -1,
      -1,    -1,    45,    46,    -1,    48,    49,    50,    -1,    52,
      53,    54,    55,    56,    -1,    58,    59,    -1,    61,    62,
      63,    64,    65,    66,    -1,    -1,    69,    70,    71,    72,
      73,    -1,    75,    76,    77,    78,    79,    -1,    -1,    -1,
      83,    84,    85,    86,    87,    88,    -1,    90,    91,    92,
      -1,    94,    95,    96,    97,    98,    99,    -1,    -1,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,    -1,   116,    -1,   118,   119,   120,   121,   122,
     123,    -1,   125,   126,   127,   128,   129,   130,    -1,    -1,
     133,   134,   135,   136,   137,   138,   139,    -1,   141,   142,
     143,    -1,   145,   146,   147,    -1,   149,   150,   151,   152,
     153,   154,   155,   156,   157,   158,   159,    -1,   161,    -1,
     163,   164,   165,   166,    -1,   168,    -1,   170,    -1,    -1,
      -1,   174,   175,   176,    -1,   178,    -1,   180,   181,    -1,
      -1,   184,   185,   186,   187,    -1,   189,   190,   191,   192,
     193,   194,   195,    -1,   197,   198,   199,   200,    -1,   202,
     203,   204,   205,   206,   207,   208,    -1,   210,    -1,   212,
     213,   214,   215,   216,   217,   218,   219,    -1,   221,    -1,
     223,    -1,    -1,   226,    -1,   228,   229,   230,   231,   232,
     233,   234,    -1,    -1,   237,    -1,   239,    -1,    -1,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,    -1,   271,   272,
     273,   274,   275,   276,    -1,   278,   279,    -1,   281,    -1,
     283,   284,   285,   286,   287,   288,    -1,   290,   291,    -1,
      -1,   294,   295,   296,    -1,    -1,   299,   300,    -1,   302,
      -1,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,    -1,    -1,    -1,    -1,   321,   322,
     323,    -1,   325,   326,   327,   328,   329,   330,    -1,   332,
     333,   334,   335,   336,   337,   338,   339,    -1,   341,   342,
     343,   344,   345,   346,   347,   348,    -1,   350,   351,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,    -1,   365,   366,    -1,   368,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
      -1,    -1,   385,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,    -1,   397,   398,   399,   400,    -1,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,   417,   418,    -1,   420,   421,    -1,
     423,    -1,   425,   426,   427,   428,   429,    -1,   431,   432,
      -1,   434,    -1,   436,   437,   438,   439,   440,    -1,   442,
     443,   444,   445,   446,   447,   448,   449,    -1,    -1,   452,
     453,   454,    -1,   456,   457,   458,   459,    -1,   461,   462,
     463,   464,   465,   466,   467,    -1,   469,    -1,   471,   472,
     473,   474,   475,   476,   477,    -1,    -1,   480,    -1,    -1,
     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   500,   501,   502,
     503,     3,    -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    -1,
      32,    33,    34,    -1,    -1,    -1,    -1,    -1,    40,    -1,
      -1,    -1,    -1,    45,    46,    -1,    48,    49,    50,    -1,
      52,    53,    54,    55,    56,    -1,    58,    59,    -1,    61,
      62,    63,    64,    65,    66,    -1,    -1,    69,    70,    71,
      72,    73,    -1,    75,    76,    77,    78,    79,    -1,    -1,
      -1,    83,    84,    85,    86,    87,    88,    -1,    90,    91,
      92,    -1,    94,    95,    96,    97,    98,    99,    -1,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,    -1,   116,    -1,   118,   119,   120,   121,
     122,   123,    -1,   125,   126,   127,   128,   129,   130,    -1,
      -1,   133,   134,   135,   136,   137,   138,   139,    -1,   141,
     142,   143,    -1,   145,   146,   147,    -1,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,    -1,   161,
      -1,   163,   164,   165,   166,    -1,   168,    -1,   170,    -1,
      -1,    -1,   174,   175,   176,    -1,   178,    -1,   180,   181,
      -1,    -1,   184,   185,   186,   187,    -1,   189,   190,   191,
     192,   193,   194,   195,    -1,   197,   198,   199,   200,    -1,
     202,   203,   204,   205,   206,   207,   208,    -1,   210,    -1,
     212,   213,   214,   215,   216,   217,   218,   219,    -1,   221,
      -1,   223,    -1,    -1,   226,    -1,   228,   229,   230,   231,
     232,   233,   234,    -1,    -1,   237,    -1,   239,    -1,    -1,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,    -1,   271,
     272,   273,   274,   275,   276,    -1,   278,   279,    -1,   281,
      -1,   283,   284,   285,   286,   287,   288,    -1,   290,   291,
      -1,    -1,   294,   295,   296,    -1,    -1,   299,   300,    -1,
     302,    -1,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,    -1,    -1,    -1,    -1,   321,
     322,   323,    -1,   325,   326,   327,   328,   329,   330,    -1,
     332,   333,   334,   335,   336,   337,   338,   339,    -1,   341,
     342,   343,   344,   345,   346,   347,   348,    -1,   350,   351,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,    -1,   365,   366,    -1,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,    -1,    -1,   385,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,    -1,   397,   398,   399,   400,    -1,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,   417,   418,    -1,   420,   421,
      -1,   423,    -1,   425,   426,   427,   428,   429,    -1,   431,
     432,    -1,   434,    -1,   436,   437,   438,   439,   440,    -1,
     442,   443,   444,   445,   446,   447,   448,   449,    -1,    -1,
     452,   453,   454,    -1,   456,   457,   458,   459,    -1,   461,
     462,   463,   464,   465,   466,   467,    -1,   469,    -1,   471,
     472,   473,   474,   475,   476,   477,    -1,    -1,   480,    -1,
      -1,   483,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,   498,   499,   500,   501,
     502,   503,     3,    -1,     5,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    30,
      -1,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,    40,
      -1,    -1,    -1,    -1,    45,    46,    -1,    48,    49,    50,
      -1,    52,    53,    54,    55,    56,    -1,    58,    59,    -1,
      61,    62,    63,    64,    65,    66,    -1,    -1,    69,    70,
      71,    72,    73,    -1,    75,    76,    77,    78,    79,    -1,
      -1,    -1,    83,    84,    85,    86,    87,    88,    -1,    90,
      91,    92,    -1,    94,    95,    96,    97,    98,    99,    -1,
      -1,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,    -1,   116,    -1,   118,   119,   120,
     121,   122,   123,    -1,   125,   126,   127,   128,   129,   130,
      -1,    -1,   133,   134,   135,   136,   137,   138,   139,    -1,
     141,   142,   143,    -1,   145,   146,   147,    -1,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,    -1,
     161,    -1,   163,   164,   165,   166,    -1,   168,    -1,   170,
      -1,    -1,    -1,   174,   175,   176,    -1,   178,    -1,   180,
     181,    -1,    -1,   184,   185,   186,   187,    -1,   189,   190,
     191,   192,   193,   194,   195,    -1,   197,   198,   199,   200,
      -1,   202,   203,   204,   205,   206,   207,   208,    -1,   210,
      -1,   212,   213,   214,   215,   216,   217,   218,   219,    -1,
     221,    -1,   223,    -1,    -1,   226,    -1,   228,   229,   230,
     231,   232,   233,   234,    -1,    -1,   237,    -1,   239,    -1,
      -1,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,    -1,
     271,   272,   273,   274,   275,   276,    -1,   278,   279,    -1,
     281,    -1,   283,   284,   285,   286,   287,   288,    -1,   290,
     291,    -1,    -1,   294,   295,   296,    -1,    -1,   299,   300,
      -1,   302,    -1,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,    -1,    -1,    -1,    -1,
     321,   322,   323,    -1,   325,   326,   327,   328,   329,   330,
      -1,   332,   333,   334,   335,   336,   337,   338,   339,    -1,
     341,   342,   343,   344,   345,   346,   347,   348,    -1,   350,
     351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,    -1,   365,   366,    -1,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,    -1,    -1,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,    -1,   397,   398,   399,   400,
      -1,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,   417,   418,    -1,   420,
     421,    -1,   423,    -1,   425,   426,   427,   428,   429,    -1,
     431,   432,    -1,   434,    -1,   436,   437,   438,   439,   440,
      -1,   442,   443,   444,   445,   446,   447,   448,   449,    -1,
      -1,   452,   453,   454,    -1,   456,   457,   458,   459,    -1,
     461,   462,   463,   464,   465,   466,   467,    -1,   469,    -1,
     471,   472,   473,   474,   475,   476,   477,    -1,    -1,   480,
      -1,    -1,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,   499,   500,
     501,   502,   503,     3,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    -1,    32,    33,    34,    -1,    -1,    -1,    38,    -1,
      40,    -1,    42,    -1,    44,    45,    46,    -1,    48,    49,
      50,    51,    52,    53,    54,    -1,    56,    57,    58,    59,
      -1,    61,    62,    63,    64,    65,    66,    -1,    -1,    69,
      70,    71,    72,    73,    -1,    75,    76,    77,    78,    -1,
      -1,    81,    -1,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    -1,    94,    95,    96,    97,    98,    99,
      -1,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,    -1,   116,    -1,   118,   119,
     120,   121,   122,   123,    -1,   125,   126,   127,   128,   129,
     130,    -1,    -1,   133,   134,   135,   136,   137,   138,   139,
      -1,   141,   142,   143,    -1,   145,   146,   147,    -1,   149,
     150,   151,   152,    -1,   154,   155,   156,   157,   158,    -1,
      -1,   161,    -1,   163,   164,   165,   166,    -1,   168,    -1,
     170,   171,    -1,   173,   174,   175,   176,   177,   178,    -1,
     180,   181,    -1,    -1,    -1,    -1,   186,   187,    -1,   189,
     190,   191,   192,   193,   194,   195,   196,   197,   198,   199,
     200,    -1,   202,   203,   204,   205,   206,   207,   208,    -1,
     210,   211,    -1,   213,   214,   215,   216,   217,   218,   219,
      -1,   221,    -1,   223,   224,   225,   226,   227,   228,   229,
     230,   231,   232,   233,   234,    -1,    -1,   237,   238,   239,
     240,    -1,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,    -1,    -1,   278,   279,
     280,   281,    -1,    -1,   284,   285,   286,   287,   288,    -1,
     290,   291,    -1,    -1,   294,   295,   296,    -1,    -1,   299,
      -1,   301,   302,   303,    -1,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,    -1,    -1,    -1,
      -1,   321,   322,    -1,   324,   325,   326,    -1,   328,   329,
     330,    -1,   332,   333,   334,   335,   336,   337,   338,   339,
      -1,   341,   342,   343,   344,   345,   346,   347,   348,    -1,
     350,   351,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,    -1,   365,   366,   367,   368,   369,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,    -1,   384,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,    -1,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,    -1,   418,    -1,
     420,   421,    -1,   423,   424,   425,   426,   427,   428,   429,
      -1,   431,   432,    -1,   434,    -1,   436,   437,    -1,   439,
      -1,    -1,   442,   443,   444,   445,   446,   447,   448,   449,
     450,    -1,   452,   453,   454,    -1,   456,   457,   458,   459,
      -1,   461,   462,   463,   464,   465,    -1,   467,    -1,   469,
     470,   471,   472,   473,   474,   475,   476,   477,    -1,    -1,
     480,    -1,    -1,   483,   484,   485,   486,   487,   488,     3,
      -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     500,   501,   502,   503,    -1,    -1,    -1,    -1,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    -1,    32,    33,
      34,    -1,    -1,    -1,    -1,    -1,    40,    -1,    -1,    -1,
      -1,    45,    46,    -1,    48,    49,    50,    -1,    52,    53,
      54,    55,    56,    -1,    58,    59,    -1,    61,    62,    63,
      64,    65,    66,    -1,    -1,    69,    70,    71,    72,    73,
      -1,    75,    76,    77,    78,    79,    -1,    -1,    -1,    83,
      84,    85,    86,    87,    88,    -1,    90,    91,    92,    -1,
      94,    95,    96,    97,    98,    99,    -1,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,    -1,   116,    -1,   118,   119,   120,   121,   122,   123,
      -1,   125,   126,   127,   128,   129,   130,    -1,    -1,   133,
     134,   135,   136,   137,   138,   139,    -1,   141,   142,   143,
      -1,   145,   146,   147,    -1,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,   159,    -1,   161,    -1,   163,
     164,   165,   166,    -1,   168,    -1,   170,    -1,    -1,    -1,
     174,   175,   176,    -1,   178,    -1,   180,   181,    -1,    -1,
     184,   185,   186,   187,    -1,   189,   190,   191,   192,   193,
     194,   195,    -1,   197,   198,   199,   200,    -1,   202,   203,
     204,   205,   206,   207,   208,    -1,   210,    -1,   212,   213,
     214,   215,   216,   217,   218,   219,    -1,   221,    -1,   223,
      -1,    -1,   226,    -1,   228,   229,   230,   231,   232,   233,
     234,    -1,    -1,   237,    -1,   239,    -1,    -1,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,    -1,   271,   272,   273,
     274,   275,   276,    -1,   278,   279,    -1,   281,    -1,   283,
     284,   285,   286,   287,   288,    -1,   290,   291,    -1,    -1,
     294,   295,   296,    -1,    -1,   299,   300,    -1,   302,    -1,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,    -1,    -1,    -1,    -1,   321,   322,   323,
      -1,   325,   326,   327,   328,   329,   330,    -1,   332,   333,
     334,   335,   336,   337,   338,   339,    -1,   341,   342,   343,
     344,   345,   346,   347,   348,    -1,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
      -1,   365,   366,    -1,   368,   369,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,    -1,
      -1,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,    -1,   397,   398,   399,   400,    -1,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,   417,   418,    -1,   420,   421,    -1,   423,
      -1,   425,   426,   427,   428,   429,    -1,   431,   432,    -1,
     434,    -1,   436,   437,   438,   439,   440,    -1,   442,   443,
     444,   445,   446,   447,   448,   449,    -1,    -1,   452,   453,
     454,    -1,   456,   457,   458,   459,    -1,   461,   462,   463,
     464,   465,   466,   467,    -1,   469,    -1,   471,   472,   473,
     474,   475,   476,   477,    -1,    -1,   480,    -1,    -1,   483,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,   499,   500,   501,   502,   503,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,
      23,    24,    25,    26,    27,    28,    29,    30,    -1,    32,
      33,    34,    -1,    -1,    -1,    -1,    -1,    40,    -1,    -1,
      -1,    -1,    45,    46,    -1,    48,    49,    50,    -1,    52,
      53,    54,    55,    56,    -1,    58,    59,    -1,    61,    62,
      63,    64,    65,    66,    -1,    -1,    69,    70,    71,    72,
      73,    -1,    75,    76,    77,    78,    79,    -1,    -1,    -1,
      83,    84,    85,    86,    87,    88,    -1,    90,    91,    92,
      -1,    94,    95,    96,    97,    98,    99,    -1,    -1,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,    -1,   116,    -1,   118,   119,   120,   121,   122,
     123,    -1,   125,   126,   127,   128,   129,   130,    -1,    -1,
     133,   134,   135,   136,   137,   138,   139,    -1,   141,   142,
     143,    -1,   145,   146,   147,    -1,   149,   150,   151,   152,
     153,   154,   155,   156,   157,   158,   159,    -1,   161,    -1,
     163,   164,   165,   166,    -1,   168,    -1,   170,    -1,    -1,
      -1,   174,   175,   176,    -1,   178,    -1,   180,   181,    -1,
      -1,   184,   185,   186,   187,    -1,   189,   190,   191,   192,
     193,   194,   195,    -1,   197,   198,   199,   200,    -1,   202,
     203,   204,   205,   206,   207,   208,    -1,   210,    -1,   212,
     213,   214,   215,   216,   217,   218,   219,    -1,   221,    -1,
     223,    -1,    -1,   226,    -1,   228,   229,   230,   231,   232,
     233,   234,    -1,    -1,   237,    -1,   239,    -1,    -1,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,    -1,   271,   272,
     273,   274,   275,   276,    -1,   278,   279,    -1,   281,    -1,
     283,   284,   285,   286,   287,   288,    -1,   290,   291,    -1,
      -1,   294,   295,   296,    -1,    -1,   299,   300,    -1,   302,
      -1,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,    -1,    -1,    -1,    -1,   321,   322,
     323,    -1,   325,   326,   327,   328,   329,   330,    -1,   332,
     333,   334,   335,   336,   337,   338,   339,    -1,   341,   342,
     343,   344,   345,   346,   347,   348,    -1,   350,   351,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,    -1,   365,   366,    -1,   368,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
      -1,    -1,   385,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,    -1,   397,   398,   399,   400,    -1,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,   417,   418,    -1,   420,   421,    -1,
     423,    -1,   425,   426,   427,   428,   429,    -1,   431,   432,
      -1,   434,    -1,   436,   437,   438,   439,   440,    -1,   442,
     443,   444,   445,   446,   447,   448,   449,    -1,    -1,   452,
     453,   454,    -1,   456,   457,   458,   459,    -1,   461,   462,
     463,   464,   465,   466,   467,    -1,   469,    -1,   471,   472,
     473,   474,   475,   476,   477,    -1,    -1,   480,    -1,    -1,
     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   500,   501,   502,
     503,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    -1,
      32,    33,    34,    -1,    -1,    -1,    -1,    -1,    40,    -1,
      -1,    -1,    -1,    45,    46,    -1,    48,    49,    50,    -1,
      52,    53,    54,    55,    56,    -1,    58,    59,    -1,    61,
      62,    63,    64,    65,    66,    -1,    -1,    69,    70,    71,
      72,    73,    -1,    75,    76,    77,    78,    79,    -1,    -1,
      -1,    83,    84,    85,    86,    87,    88,    -1,    90,    91,
      92,    -1,    94,    95,    96,    97,    98,    99,    -1,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,    -1,   116,    -1,   118,   119,   120,   121,
     122,   123,    -1,   125,   126,   127,   128,   129,   130,    -1,
      -1,   133,   134,   135,   136,   137,   138,   139,    -1,   141,
     142,   143,    -1,   145,   146,   147,    -1,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,    -1,   161,
      -1,   163,   164,   165,   166,    -1,   168,    -1,   170,    -1,
      -1,    -1,   174,   175,   176,    -1,   178,    -1,   180,   181,
      -1,    -1,   184,   185,   186,   187,    -1,   189,   190,   191,
     192,   193,   194,   195,    -1,   197,   198,   199,   200,    -1,
     202,   203,   204,   205,   206,   207,   208,    -1,   210,    -1,
     212,   213,   214,   215,   216,   217,   218,   219,    -1,   221,
      -1,   223,    -1,    -1,   226,    -1,   228,   229,   230,   231,
     232,   233,   234,    -1,    -1,   237,    -1,   239,    -1,    -1,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,    -1,   271,
     272,   273,   274,   275,   276,    -1,   278,   279,    -1,   281,
      -1,   283,   284,   285,   286,   287,   288,    -1,   290,   291,
      -1,    -1,   294,   295,   296,    -1,    -1,   299,   300,    -1,
     302,    -1,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,    -1,    -1,    -1,    -1,   321,
     322,   323,    -1,   325,   326,   327,   328,   329,   330,    -1,
     332,   333,   334,   335,   336,   337,   338,   339,    -1,   341,
     342,   343,   344,   345,   346,   347,   348,    -1,   350,   351,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,    -1,   365,   366,    -1,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,    -1,    -1,   385,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,    -1,   397,   398,   399,   400,    -1,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,   417,   418,    -1,   420,   421,
      -1,   423,    -1,   425,   426,   427,   428,   429,    -1,   431,
     432,    -1,   434,    -1,   436,   437,   438,   439,   440,    -1,
     442,   443,   444,   445,   446,   447,   448,   449,    -1,    -1,
     452,   453,   454,    -1,   456,   457,   458,   459,    -1,   461,
     462,   463,   464,   465,   466,   467,    -1,   469,    -1,   471,
     472,   473,   474,   475,   476,   477,    -1,    -1,   480,    -1,
      -1,   483,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,   498,   499,   500,   501,
     502,   503,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    30,
      -1,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,    40,
      -1,    -1,    -1,    -1,    45,    46,    -1,    48,    49,    50,
      -1,    52,    53,    54,    55,    56,    -1,    58,    59,    -1,
      61,    62,    63,    64,    65,    66,    -1,    -1,    69,    70,
      71,    72,    73,    -1,    75,    76,    77,    78,    79,    -1,
      -1,    -1,    83,    84,    85,    86,    87,    88,    -1,    90,
      91,    92,    -1,    94,    95,    96,    97,    98,    99,    -1,
      -1,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,    -1,   116,    -1,   118,   119,   120,
     121,   122,   123,    -1,   125,   126,   127,   128,   129,   130,
      -1,    -1,   133,   134,   135,   136,   137,   138,   139,    -1,
     141,   142,   143,    -1,   145,   146,   147,    -1,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,    -1,
     161,    -1,   163,   164,   165,   166,    -1,   168,    -1,   170,
      -1,    -1,    -1,   174,   175,   176,    -1,   178,    -1,   180,
     181,    -1,    -1,   184,   185,   186,   187,    -1,   189,   190,
     191,   192,   193,   194,   195,    -1,   197,   198,   199,   200,
      -1,   202,   203,   204,   205,   206,   207,   208,    -1,   210,
      -1,   212,   213,   214,   215,   216,   217,   218,   219,    -1,
     221,    -1,   223,    -1,    -1,   226,    -1,   228,   229,   230,
     231,   232,   233,   234,    -1,    -1,   237,    -1,   239,    -1,
      -1,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,    -1,
     271,   272,   273,   274,   275,   276,    -1,   278,   279,    -1,
     281,    -1,   283,   284,   285,   286,   287,   288,    -1,   290,
     291,    -1,    -1,   294,   295,   296,    -1,    -1,   299,   300,
      -1,   302,    -1,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,    -1,    -1,    -1,    -1,
     321,   322,   323,    -1,   325,   326,   327,   328,   329,   330,
      -1,   332,   333,   334,   335,   336,   337,   338,   339,    -1,
     341,   342,   343,   344,   345,   346,   347,   348,    -1,   350,
     351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,    -1,   365,   366,    -1,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,    -1,    -1,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,    -1,   397,   398,   399,   400,
      -1,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,   417,   418,    -1,   420,
     421,    -1,   423,    -1,   425,   426,   427,   428,   429,    -1,
     431,   432,    -1,   434,    -1,   436,   437,   438,   439,   440,
      -1,   442,   443,   444,   445,   446,   447,   448,   449,    -1,
      -1,   452,   453,   454,    -1,   456,   457,   458,   459,    -1,
     461,   462,   463,   464,   465,   466,   467,    -1,   469,    -1,
     471,   472,   473,   474,   475,   476,   477,    -1,    -1,   480,
      -1,    -1,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,   499,   500,
     501,   502,   503,     3,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    -1,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,
      40,    -1,    -1,    -1,    -1,    45,    46,    -1,    48,    49,
      50,    -1,    52,    53,    54,    55,    56,    -1,    58,    59,
      -1,    61,    62,    63,    64,    65,    66,    -1,    -1,    69,
      70,    71,    72,    73,    -1,    75,    76,    77,    78,    79,
      -1,    -1,    -1,    83,    84,    85,    86,    87,    88,    -1,
      90,    91,    92,    -1,    94,    95,    96,    97,    98,    99,
      -1,    -1,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,    -1,   116,    -1,   118,   119,
     120,   121,   122,   123,    -1,   125,   126,   127,   128,   129,
     130,    -1,    -1,   133,   134,   135,   136,   137,   138,   139,
      -1,   141,   142,   143,    -1,   145,   146,   147,    -1,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
      -1,   161,    -1,   163,   164,   165,   166,    -1,   168,    -1,
     170,    -1,    -1,    -1,   174,   175,   176,    -1,   178,    -1,
     180,   181,    -1,    -1,   184,   185,   186,   187,    -1,   189,
     190,   191,   192,   193,   194,   195,    -1,   197,   198,   199,
     200,    -1,   202,   203,   204,   205,   206,   207,   208,    -1,
     210,    -1,   212,   213,   214,   215,   216,   217,   218,   219,
      -1,   221,    -1,   223,    -1,    -1,   226,    -1,   228,   229,
     230,   231,   232,   233,   234,    -1,    -1,   237,    -1,   239,
      -1,    -1,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
      -1,   271,   272,   273,   274,   275,   276,    -1,   278,   279,
      -1,   281,    -1,   283,   284,   285,   286,   287,   288,    -1,
     290,   291,    -1,    -1,   294,   295,   296,    -1,    -1,   299,
     300,    -1,   302,    -1,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,    -1,    -1,    -1,
      -1,   321,   322,   323,    -1,   325,   326,   327,   328,   329,
     330,    -1,   332,   333,   334,   335,   336,   337,   338,   339,
      -1,   341,   342,   343,   344,   345,   346,   347,   348,    -1,
     350,   351,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,    -1,   365,   366,    -1,   368,   369,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,    -1,    -1,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,    -1,   397,   398,   399,
     400,    -1,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,   417,   418,    -1,
     420,   421,    -1,   423,    -1,   425,   426,   427,   428,   429,
      -1,   431,   432,    -1,   434,    -1,   436,   437,   438,   439,
     440,    -1,   442,   443,   444,   445,   446,   447,   448,   449,
      -1,    -1,   452,   453,   454,    -1,   456,   457,   458,   459,
      -1,   461,   462,   463,   464,   465,   466,   467,    -1,   469,
      -1,   471,   472,   473,   474,   475,   476,   477,    -1,    -1,
     480,    -1,    -1,   483,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,   498,   499,
     500,   501,   502,   503,     3,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    22,    23,    24,    25,    26,    27,    28,
      29,    30,    -1,    32,    33,    34,    -1,    -1,    -1,    -1,
      -1,    40,    -1,    42,    -1,    -1,    45,    46,    -1,    48,
      49,    50,    -1,    52,    53,    54,    55,    56,    -1,    58,
      59,    -1,    61,    62,    63,    64,    65,    66,    -1,    -1,
      69,    70,    71,    72,    73,    -1,    75,    76,    77,    78,
      79,    -1,    -1,    -1,    83,    84,    85,    86,    87,    88,
      -1,    90,    91,    92,    -1,    94,    95,    96,    97,    98,
      99,    -1,    -1,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,    -1,   116,    -1,   118,
     119,   120,   121,   122,   123,    -1,   125,   126,   127,   128,
     129,   130,    -1,    -1,   133,   134,   135,   136,   137,   138,
     139,    -1,   141,   142,   143,    -1,   145,   146,   147,    -1,
     149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
     159,    -1,   161,    -1,   163,   164,   165,   166,    -1,   168,
      -1,   170,    -1,    -1,    -1,   174,   175,   176,    -1,   178,
      -1,   180,   181,    -1,    -1,   184,   185,   186,   187,    -1,
     189,   190,   191,   192,   193,   194,   195,    -1,   197,   198,
     199,   200,    -1,   202,   203,   204,   205,   206,   207,   208,
      -1,   210,    -1,   212,   213,   214,   215,   216,   217,   218,
     219,    -1,   221,    -1,   223,    -1,    -1,   226,    -1,   228,
     229,   230,   231,   232,   233,   234,    -1,    -1,   237,    -1,
     239,    -1,    -1,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,    -1,   271,   272,   273,   274,   275,   276,    -1,   278,
     279,    -1,   281,    -1,   283,   284,   285,   286,   287,   288,
      -1,   290,   291,    -1,    -1,   294,   295,   296,    -1,    -1,
     299,   300,    -1,   302,    -1,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,    -1,    -1,
      -1,    -1,   321,   322,   323,    -1,   325,   326,   327,   328,
     329,   330,    -1,   332,   333,   334,   335,   336,   337,   338,
     339,    -1,   341,   342,   343,   344,   345,   346,   347,   348,
      -1,   350,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,    -1,   365,   366,    -1,   368,
     369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,    -1,    -1,   385,   386,   387,   388,
     389,    -1,   391,   392,   393,   394,   395,    -1,   397,   398,
     399,   400,    -1,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,   417,   418,
      -1,   420,   421,    -1,   423,    -1,   425,   426,   427,   428,
     429,    -1,   431,   432,    -1,   434,    -1,   436,   437,   438,
     439,   440,    -1,   442,   443,   444,   445,   446,   447,   448,
     449,    -1,    -1,   452,   453,   454,    -1,   456,   457,   458,
     459,    -1,   461,   462,   463,   464,   465,   466,   467,    -1,
     469,    -1,   471,   472,   473,   474,   475,   476,   477,    -1,
      -1,   480,    -1,    -1,   483,   484,   485,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
     499,   500,   501,   502,   503,     3,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    -1,    32,    33,    34,    -1,    -1,    -1,
      -1,    -1,    40,    -1,    -1,    -1,    -1,    45,    46,    -1,
      48,    49,    50,    -1,    52,    53,    54,    55,    56,    -1,
      58,    59,    -1,    61,    62,    63,    64,    65,    66,    -1,
      -1,    69,    70,    71,    72,    73,    -1,    75,    76,    77,
      78,    79,    -1,    -1,    -1,    83,    84,    85,    86,    87,
      88,    -1,    90,    91,    92,    -1,    94,    95,    96,    97,
      98,    99,    -1,    -1,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,    -1,   116,    -1,
     118,   119,   120,   121,   122,   123,    -1,   125,   126,   127,
     128,   129,   130,    -1,    -1,   133,   134,   135,   136,   137,
     138,   139,    -1,   141,   142,   143,    -1,   145,   146,   147,
      -1,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,   159,    -1,   161,    -1,   163,   164,   165,   166,    -1,
     168,    -1,   170,    -1,    -1,    -1,   174,   175,   176,    -1,
     178,    -1,   180,   181,    -1,    -1,   184,   185,   186,   187,
      -1,   189,   190,   191,   192,   193,   194,   195,    -1,   197,
     198,   199,   200,    -1,   202,   203,   204,   205,   206,   207,
     208,    -1,   210,    -1,   212,   213,   214,   215,   216,   217,
     218,   219,    -1,   221,    -1,   223,    -1,    -1,   226,    -1,
     228,   229,   230,   231,   232,   233,   234,    -1,    -1,   237,
      -1,   239,    -1,    -1,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,    -1,   271,   272,   273,   274,   275,   276,    -1,
     278,   279,    -1,   281,    -1,   283,   284,   285,   286,   287,
     288,    -1,   290,   291,    -1,    -1,   294,   295,   296,    -1,
      -1,   299,   300,    -1,   302,    -1,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,    -1,
      -1,    -1,    -1,   321,   322,   323,    -1,   325,   326,   327,
     328,   329,   330,    -1,   332,   333,   334,   335,   336,   337,
     338,   339,    -1,   341,   342,   343,   344,   345,   346,   347,
     348,    -1,   350,   351,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,    -1,   365,   366,    -1,
     368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,    -1,    -1,   385,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,    -1,   397,
     398,   399,   400,    -1,   402,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,   417,
     418,    -1,   420,   421,    -1,   423,    -1,   425,   426,   427,
     428,   429,    -1,   431,   432,    -1,   434,    -1,   436,   437,
     438,   439,   440,    -1,   442,   443,   444,   445,   446,   447,
     448,   449,    -1,    -1,   452,   453,   454,    -1,   456,   457,
     458,   459,    -1,   461,   462,   463,   464,   465,   466,   467,
      -1,   469,    -1,   471,   472,   473,   474,   475,   476,   477,
      -1,    -1,   480,    -1,    -1,   483,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,   499,   500,   501,   502,   503,     3,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    -1,    32,    33,    34,    -1,    -1,
      -1,    -1,    -1,    40,    -1,    -1,    -1,    -1,    45,    46,
      -1,    48,    49,    50,    -1,    52,    53,    54,    55,    56,
      -1,    58,    59,    -1,    61,    62,    63,    64,    65,    66,
      -1,    -1,    69,    70,    71,    72,    73,    -1,    75,    76,
      77,    78,    79,    -1,    -1,    -1,    83,    84,    85,    86,
      87,    88,    -1,    90,    91,    92,    -1,    94,    95,    96,
      97,    98,    99,    -1,    -1,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,    -1,   116,
      -1,   118,   119,   120,   121,   122,   123,    -1,   125,   126,
     127,   128,   129,   130,    -1,    -1,   133,   134,   135,   136,
     137,   138,   139,    -1,   141,   142,   143,    -1,   145,   146,
     147,    -1,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,    -1,   161,    -1,   163,   164,   165,   166,
      -1,   168,    -1,   170,    -1,    -1,    -1,   174,   175,   176,
      -1,   178,    -1,   180,   181,    -1,    -1,   184,   185,   186,
     187,    -1,   189,   190,   191,   192,   193,   194,   195,    -1,
     197,   198,   199,   200,    -1,   202,   203,   204,   205,   206,
     207,   208,    -1,   210,    -1,   212,   213,   214,   215,   216,
     217,   218,   219,    -1,   221,    -1,   223,    -1,    -1,   226,
      -1,   228,   229,   230,   231,   232,   233,   234,    -1,    -1,
     237,    -1,   239,    -1,    -1,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,    -1,   271,   272,   273,   274,   275,   276,
      -1,   278,   279,    -1,   281,    -1,   283,   284,   285,   286,
     287,   288,    -1,   290,   291,    -1,    -1,   294,   295,   296,
      -1,    -1,   299,   300,    -1,   302,    -1,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
      -1,    -1,    -1,    -1,   321,   322,   323,    -1,   325,   326,
     327,   328,   329,   330,    -1,   332,   333,   334,   335,   336,
     337,   338,   339,    -1,   341,   342,   343,   344,   345,   346,
     347,   348,    -1,   350,   351,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,    -1,   365,   366,
      -1,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,    -1,    -1,   385,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,    -1,
     397,   398,   399,   400,    -1,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
     417,   418,    -1,   420,   421,    -1,   423,    -1,   425,   426,
     427,   428,   429,    -1,   431,   432,    -1,   434,    -1,   436,
     437,   438,   439,   440,    -1,   442,   443,   444,   445,   446,
     447,   448,   449,    -1,    -1,   452,   453,   454,    -1,   456,
     457,   458,   459,    -1,   461,   462,   463,   464,   465,   466,
     467,    -1,   469,    -1,   471,   472,   473,   474,   475,   476,
     477,    -1,    -1,   480,    -1,    -1,   483,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,   498,   499,   500,   501,   502,   503,     3,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    -1,    32,    33,    34,    -1,
      -1,    -1,    -1,    -1,    40,    -1,    -1,    -1,    -1,    45,
      46,    -1,    48,    49,    50,    -1,    52,    53,    54,    55,
      56,    -1,    58,    59,    -1,    61,    62,    63,    64,    65,
      66,    -1,    -1,    69,    70,    71,    72,    73,    -1,    75,
      76,    77,    78,    79,    -1,    -1,    -1,    83,    84,    85,
      86,    87,    88,    -1,    90,    91,    92,    -1,    94,    95,
      96,    97,    98,    99,    -1,    -1,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,    -1,
     116,    -1,   118,   119,   120,   121,   122,   123,    -1,   125,
     126,   127,   128,   129,   130,    -1,    -1,   133,   134,   135,
     136,   137,   138,   139,    -1,   141,   142,   143,    -1,   145,
     146,   147,    -1,   149,   150,   151,   152,   153,   154,   155,
     156,   157,   158,   159,    -1,   161,    -1,   163,   164,   165,
     166,    -1,   168,    -1,   170,    -1,    -1,    -1,   174,   175,
     176,    -1,   178,    -1,   180,   181,    -1,    -1,   184,   185,
     186,   187,    -1,   189,   190,   191,   192,   193,   194,   195,
      -1,   197,   198,   199,   200,    -1,   202,   203,   204,   205,
     206,   207,   208,    -1,   210,    -1,   212,   213,   214,   215,
     216,   217,   218,   219,    -1,   221,    -1,   223,    -1,    -1,
     226,    -1,   228,   229,   230,   231,   232,   233,   234,    -1,
      -1,   237,    -1,   239,    -1,    -1,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,    -1,   271,   272,   273,   274,   275,
     276,    -1,   278,   279,    -1,   281,    -1,   283,   284,   285,
     286,   287,   288,    -1,   290,   291,    -1,    -1,   294,   295,
     296,    -1,    -1,   299,   300,    -1,   302,    -1,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,    -1,    -1,    -1,    -1,   321,   322,   323,    -1,   325,
     326,   327,   328,   329,   330,    -1,   332,   333,   334,   335,
     336,   337,   338,   339,    -1,   341,   342,   343,   344,   345,
     346,   347,   348,    -1,   350,   351,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,    -1,   365,
     366,    -1,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,    -1,    -1,   385,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
      -1,   397,   398,   399,   400,    -1,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,   417,   418,    -1,   420,   421,    -1,   423,    -1,   425,
     426,   427,   428,   429,    -1,   431,   432,    -1,   434,    -1,
     436,   437,   438,   439,   440,    -1,   442,   443,   444,   445,
     446,   447,   448,   449,    -1,    -1,   452,   453,   454,    -1,
     456,   457,   458,   459,    -1,   461,   462,   463,   464,   465,
     466,   467,    -1,   469,    -1,   471,   472,   473,   474,   475,
     476,   477,    -1,    -1,   480,    -1,    -1,   483,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,   498,   499,   500,   501,   502,   503,     3,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    -1,    32,    33,    34,
      -1,    -1,    -1,    38,    -1,    40,    -1,    -1,    -1,    44,
      45,    46,    -1,    48,    49,    50,    51,    52,    53,    54,
      -1,    56,    57,    58,    59,    -1,    61,    62,    63,    64,
      65,    66,    -1,    -1,    69,    70,    71,    72,    73,    -1,
      75,    76,    77,    78,    -1,    -1,    81,    -1,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    -1,    94,
      95,    96,    97,    98,    99,    -1,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
      -1,   116,    -1,   118,   119,   120,   121,   122,   123,    -1,
     125,   126,   127,   128,   129,   130,    -1,    -1,   133,   134,
     135,   136,   137,   138,   139,    -1,   141,   142,   143,    -1,
     145,   146,   147,    -1,   149,   150,   151,   152,    -1,   154,
     155,   156,   157,   158,    -1,    -1,   161,    -1,   163,   164,
     165,   166,    -1,   168,    -1,   170,   171,    -1,   173,   174,
     175,    -1,   177,   178,    -1,   180,   181,    -1,    -1,    -1,
      -1,   186,   187,    -1,   189,   190,   191,   192,   193,   194,
     195,   196,   197,   198,   199,   200,    -1,   202,   203,   204,
     205,   206,   207,   208,    -1,   210,   211,    -1,   213,   214,
     215,   216,   217,   218,   219,    -1,   221,    -1,   223,   224,
     225,   226,   227,   228,   229,   230,   231,   232,   233,   234,
      -1,    -1,   237,   238,   239,   240,    -1,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,    -1,    -1,   278,   279,   280,   281,    -1,    -1,   284,
     285,   286,   287,   288,    -1,   290,   291,    -1,    -1,   294,
     295,   296,    -1,    -1,   299,    -1,   301,   302,   303,    -1,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,    -1,    -1,    -1,    -1,   321,   322,    -1,   324,
     325,   326,    -1,   328,   329,   330,    -1,   332,   333,   334,
     335,   336,   337,   338,   339,    -1,   341,   342,   343,   344,
     345,   346,   347,   348,    -1,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,    -1,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,    -1,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,    -1,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,    -1,   418,    -1,   420,   421,    -1,   423,   424,
     425,   426,   427,   428,   429,    -1,   431,   432,    -1,   434,
      -1,   436,   437,    -1,   439,    -1,    -1,   442,   443,   444,
     445,   446,   447,   448,   449,   450,    -1,   452,   453,   454,
      -1,   456,   457,   458,   459,    -1,   461,   462,   463,   464,
     465,    -1,   467,    -1,   469,   470,   471,   472,   473,   474,
     475,   476,   477,    -1,    -1,   480,    -1,    -1,   483,   484,
     485,   486,   487,   488,     3,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   500,   501,   502,   503,    -1,
      -1,    -1,    -1,    22,    23,    24,    25,    26,    27,    28,
      29,    30,    -1,    32,    33,    34,    -1,    -1,    -1,    38,
      -1,    40,    -1,    -1,    -1,    44,    45,    46,    -1,    48,
      49,    50,    51,    52,    53,    54,    -1,    56,    57,    58,
      59,    -1,    61,    62,    63,    64,    65,    66,    -1,    -1,
      69,    70,    71,    72,    73,    -1,    75,    76,    77,    78,
      -1,    -1,    81,    -1,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    -1,    94,    95,    96,    97,    98,
      99,    -1,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,    -1,   116,    -1,   118,
     119,   120,   121,   122,   123,    -1,   125,   126,   127,   128,
     129,   130,    -1,    -1,   133,   134,   135,   136,   137,   138,
     139,    -1,   141,   142,   143,    -1,   145,   146,   147,    -1,
     149,   150,   151,   152,    -1,   154,   155,   156,   157,   158,
      -1,    -1,   161,    -1,   163,   164,   165,   166,    -1,   168,
      -1,   170,   171,    -1,   173,   174,   175,    -1,   177,   178,
      -1,   180,   181,    -1,    -1,    -1,    -1,   186,   187,    -1,
     189,   190,   191,   192,   193,   194,   195,   196,   197,   198,
     199,   200,    -1,   202,   203,   204,   205,   206,   207,   208,
      -1,   210,   211,    -1,   213,   214,   215,   216,   217,   218,
     219,    -1,   221,    -1,   223,   224,   225,   226,   227,   228,
     229,   230,   231,   232,   233,   234,    -1,    -1,   237,   238,
     239,   240,    -1,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,    -1,    -1,   278,
     279,   280,   281,    -1,    -1,   284,   285,   286,   287,   288,
      -1,   290,   291,    -1,    -1,   294,   295,   296,    -1,    -1,
     299,    -1,   301,   302,   303,    -1,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,    -1,    -1,
      -1,    -1,   321,   322,    -1,   324,   325,   326,    -1,   328,
     329,   330,    -1,   332,   333,   334,   335,   336,   337,   338,
     339,    -1,   341,   342,   343,   344,   345,   346,   347,   348,
      -1,   350,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,    -1,   365,   366,   367,   368,
     369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,    -1,   384,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,    -1,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,    -1,   418,
      -1,   420,   421,    -1,   423,   424,   425,   426,   427,   428,
     429,    -1,   431,   432,    -1,   434,    -1,   436,   437,    -1,
     439,    -1,    -1,   442,   443,   444,   445,   446,   447,   448,
     449,   450,    -1,   452,   453,   454,    -1,   456,   457,   458,
     459,    -1,   461,   462,   463,   464,   465,    -1,   467,    -1,
     469,   470,   471,   472,   473,   474,   475,   476,   477,    -1,
      -1,   480,    -1,    -1,   483,   484,   485,   486,   487,   488,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   500,   501,   502,   503,    -1,    -1,    -1,    -1,    22,
      23,    24,    25,    26,    27,    28,    29,    30,    -1,    32,
      33,    34,    -1,    -1,    -1,    38,    -1,    40,    -1,    -1,
      -1,    44,    45,    46,    -1,    48,    49,    50,    51,    52,
      53,    54,    -1,    56,    57,    58,    59,    -1,    61,    62,
      63,    64,    65,    66,    -1,    -1,    69,    70,    71,    72,
      73,    -1,    75,    76,    77,    78,    -1,    -1,    81,    -1,
      83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      -1,    94,    95,    96,    97,    98,    99,    -1,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,    -1,   116,    -1,   118,   119,   120,   121,   122,
     123,    -1,   125,   126,   127,   128,   129,   130,    -1,    -1,
     133,   134,   135,   136,   137,   138,   139,    -1,   141,   142,
     143,    -1,   145,   146,   147,    -1,   149,   150,   151,   152,
      -1,   154,   155,   156,   157,   158,    -1,    -1,   161,    -1,
     163,   164,   165,   166,    -1,   168,    -1,   170,   171,    -1,
     173,   174,   175,    -1,   177,   178,    -1,   180,   181,    -1,
      -1,    -1,    -1,   186,   187,    -1,   189,   190,   191,   192,
     193,   194,   195,   196,   197,   198,   199,   200,    -1,   202,
     203,   204,   205,   206,   207,   208,    -1,   210,   211,    -1,
     213,   214,   215,   216,   217,   218,   219,    -1,   221,    -1,
     223,   224,   225,   226,   227,   228,   229,   230,   231,   232,
     233,   234,    -1,    -1,   237,   238,   239,   240,    -1,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,    -1,    -1,   278,   279,   280,   281,    -1,
      -1,   284,   285,   286,   287,   288,    -1,   290,   291,    -1,
      -1,   294,   295,   296,    -1,    -1,   299,    -1,   301,   302,
     303,    -1,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,    -1,    -1,    -1,    -1,   321,   322,
      -1,   324,   325,   326,    -1,   328,   329,   330,    -1,   332,
     333,   334,   335,   336,   337,   338,   339,    -1,   341,   342,
     343,   344,   345,   346,   347,   348,    -1,   350,   351,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,    -1,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
      -1,   384,   385,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,    -1,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,    -1,   418,    -1,   420,   421,    -1,
     423,   424,   425,   426,   427,   428,   429,    -1,   431,   432,
      -1,   434,    -1,   436,   437,    -1,   439,    -1,    -1,   442,
     443,   444,   445,   446,   447,   448,   449,   450,    -1,   452,
     453,   454,    -1,   456,   457,   458,   459,    -1,   461,   462,
     463,   464,   465,    -1,   467,    -1,   469,   470,   471,   472,
     473,   474,   475,   476,   477,    -1,    -1,   480,    -1,    -1,
     483,   484,   485,   486,   487,   488,     3,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   500,   501,   502,
     503,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    -1,    32,    33,    34,    -1,    -1,
      -1,    38,    -1,    40,    -1,    -1,    -1,    44,    45,    46,
      -1,    48,    49,    50,    51,    52,    53,    54,    -1,    56,
      57,    58,    59,    -1,    61,    62,    63,    64,    65,    66,
      -1,    -1,    69,    70,    71,    72,    73,    -1,    75,    76,
      77,    78,    -1,    -1,    81,    -1,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    -1,    94,    95,    96,
      97,    98,    99,    -1,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,    -1,   116,
      -1,   118,   119,   120,   121,   122,   123,    -1,   125,   126,
     127,   128,   129,   130,    -1,    -1,   133,   134,   135,   136,
     137,   138,   139,    -1,   141,   142,   143,    -1,   145,   146,
     147,    -1,   149,   150,   151,   152,    -1,   154,   155,   156,
     157,   158,    -1,    -1,   161,    -1,   163,   164,   165,   166,
      -1,   168,    -1,   170,   171,    -1,   173,   174,   175,   176,
     177,   178,    -1,   180,   181,    -1,    -1,    -1,    -1,   186,
     187,    -1,   189,   190,   191,   192,   193,   194,   195,   196,
     197,   198,   199,   200,    -1,   202,   203,   204,   205,   206,
     207,   208,    -1,   210,   211,    -1,   213,   214,   215,   216,
     217,   218,   219,    -1,   221,    -1,   223,   224,   225,   226,
     227,   228,   229,   230,   231,   232,   233,   234,    -1,    -1,
     237,   238,   239,   240,    -1,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,    -1,
      -1,   278,   279,   280,   281,    -1,    -1,   284,   285,   286,
     287,   288,    -1,   290,   291,    -1,    -1,   294,   295,   296,
      -1,    -1,   299,    -1,   301,   302,   303,    -1,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
      -1,    -1,    -1,    -1,   321,   322,    -1,   324,   325,   326,
      -1,   328,   329,   330,    -1,   332,   333,   334,   335,   336,
     337,   338,   339,    -1,   341,   342,   343,   344,   345,   346,
     347,   348,    -1,   350,   351,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,    -1,   365,   366,
     367,   368,   369,   370,    -1,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,    -1,   384,   385,   386,
     387,   388,   389,   390,    -1,   392,   393,   394,   395,   396,
     397,   398,   399,   400,    -1,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
      -1,   418,    -1,   420,   421,    -1,   423,   424,   425,   426,
     427,   428,   429,    -1,   431,   432,    -1,   434,    -1,   436,
     437,    -1,   439,    -1,    -1,   442,   443,   444,   445,   446,
     447,   448,   449,    -1,    -1,   452,   453,   454,    -1,   456,
     457,   458,   459,    -1,   461,   462,   463,   464,   465,    -1,
     467,    -1,   469,   470,   471,   472,   473,   474,   475,   476,
     477,    -1,    -1,   480,    -1,    -1,   483,   484,   485,   486,
     487,   488,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   500,   501,   502,   503,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    30,
      -1,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,    40,
      -1,    -1,    -1,    -1,    45,    46,    -1,    48,    49,    50,
      -1,    52,    53,    54,    55,    56,    -1,    58,    59,    -1,
      61,    62,    63,    64,    65,    66,    -1,    -1,    69,    70,
      71,    72,    73,    -1,    75,    76,    77,    78,    79,    -1,
      -1,    -1,    83,    84,    85,    86,    87,    88,    -1,    90,
      91,    92,    -1,    94,    95,    96,    97,    98,    99,    -1,
      -1,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,    -1,   116,    -1,   118,   119,   120,
     121,   122,   123,    -1,   125,   126,   127,   128,   129,   130,
      -1,    -1,   133,   134,   135,   136,   137,   138,   139,    -1,
     141,   142,   143,    -1,   145,   146,   147,    -1,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,    -1,
     161,    -1,   163,   164,   165,   166,    -1,   168,    -1,   170,
      -1,    -1,    -1,   174,   175,   176,    -1,   178,    -1,   180,
     181,    -1,    -1,   184,   185,   186,   187,    -1,   189,   190,
     191,   192,   193,   194,   195,    -1,   197,   198,   199,   200,
      -1,   202,   203,   204,   205,   206,   207,   208,    -1,   210,
      -1,   212,   213,   214,   215,   216,   217,   218,   219,    -1,
     221,    -1,   223,    -1,    -1,   226,    -1,   228,   229,   230,
     231,   232,   233,   234,    -1,    -1,   237,    -1,   239,    -1,
      -1,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,    -1,
     271,   272,   273,   274,   275,   276,    -1,   278,   279,    -1,
     281,    -1,   283,   284,   285,   286,   287,   288,    -1,   290,
     291,    -1,    -1,   294,   295,   296,    -1,    -1,   299,   300,
      -1,   302,    -1,   304,   305,   306,   307,   308,   309,   310,
      -1,   312,   313,   314,   315,   316,    -1,    -1,    -1,    -1,
     321,   322,   323,    -1,   325,   326,   327,   328,   329,   330,
      -1,   332,   333,   334,   335,   336,   337,   338,   339,    -1,
     341,    -1,   343,   344,   345,   346,   347,   348,    -1,   350,
     351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,    -1,   365,   366,    -1,   368,   369,   370,
     371,    -1,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,    -1,    -1,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,    -1,   397,   398,   399,   400,
      -1,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,   417,   418,    -1,   420,
     421,    -1,   423,    -1,   425,   426,   427,   428,   429,    -1,
     431,   432,    -1,   434,    -1,   436,   437,   438,   439,   440,
      -1,   442,   443,   444,   445,   446,   447,   448,   449,    -1,
      -1,   452,   453,   454,    -1,   456,   457,   458,   459,    -1,
     461,   462,   463,   464,   465,   466,   467,    -1,   469,    -1,
     471,   472,   473,   474,   475,   476,   477,    -1,    -1,   480,
      -1,    -1,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,   499,   500,
     501,   502,   503,     3,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    -1,    32,    33,    34,    -1,    -1,    -1,    38,    -1,
      40,    -1,    -1,    -1,    44,    45,    46,    -1,    48,    49,
      50,    51,    52,    53,    54,    -1,    56,    57,    58,    59,
      -1,    61,    62,    63,    64,    65,    66,    -1,    -1,    69,
      70,    71,    72,    73,    -1,    75,    76,    77,    78,    -1,
      -1,    81,    -1,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    -1,    94,    95,    96,    97,    98,    99,
      -1,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,    -1,   116,    -1,   118,   119,
     120,   121,   122,   123,    -1,   125,   126,   127,   128,   129,
     130,    -1,    -1,   133,   134,   135,   136,   137,   138,   139,
      -1,   141,   142,   143,    -1,   145,   146,   147,    -1,   149,
     150,   151,   152,    -1,   154,   155,   156,   157,   158,    -1,
      -1,   161,    -1,   163,   164,   165,   166,    -1,   168,    -1,
     170,   171,    -1,   173,   174,   175,    -1,   177,   178,    -1,
     180,   181,    -1,    -1,    -1,    -1,   186,   187,    -1,   189,
     190,   191,   192,   193,   194,   195,   196,   197,   198,   199,
     200,    -1,   202,   203,   204,   205,   206,   207,   208,    -1,
     210,   211,    -1,   213,   214,   215,   216,   217,   218,   219,
      -1,   221,    -1,   223,   224,   225,   226,   227,   228,   229,
     230,   231,   232,   233,   234,    -1,    -1,   237,   238,   239,
     240,    -1,   242,   243,   244,   245,   246,   247,   248,   249,
      -1,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,    -1,    -1,   278,   279,
     280,   281,    -1,    -1,   284,   285,   286,   287,   288,    -1,
     290,   291,    -1,    -1,   294,   295,   296,    -1,    -1,   299,
      -1,   301,   302,   303,    -1,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,    -1,    -1,    -1,
      -1,   321,   322,    -1,   324,   325,   326,    -1,   328,   329,
     330,    -1,   332,   333,   334,   335,   336,   337,   338,   339,
      -1,   341,   342,   343,   344,   345,   346,   347,   348,    -1,
     350,   351,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,    -1,   365,   366,   367,   368,   369,
     370,    -1,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,    -1,   384,   385,   386,   387,   388,   389,
     390,    -1,   392,   393,   394,   395,   396,   397,   398,   399,
     400,    -1,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,    -1,   416,    -1,   418,    -1,
     420,   421,    -1,   423,   424,   425,   426,   427,   428,   429,
      -1,   431,   432,    -1,   434,    -1,   436,   437,    -1,   439,
      -1,    -1,   442,   443,   444,   445,   446,   447,   448,   449,
      -1,    -1,   452,   453,   454,    -1,   456,   457,   458,   459,
      -1,   461,   462,   463,   464,   465,    -1,   467,    -1,   469,
     470,   471,   472,   473,   474,   475,   476,   477,    -1,    -1,
     480,    -1,    -1,   483,   484,   485,   486,   487,   488,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     500,   501,   502,   503,    -1,    -1,    -1,    -1,    22,    23,
      24,    25,    -1,    27,    28,    29,    30,    -1,    32,    33,
      34,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    45,    46,    -1,    48,    49,    50,    -1,    52,    53,
      54,    55,    56,    -1,    58,    59,    -1,    61,    62,    63,
      64,    65,    66,    -1,    -1,    69,    70,    71,    72,    73,
      -1,    75,    76,    77,    78,    79,    -1,    -1,    -1,    -1,
      84,    85,    86,    87,    88,    -1,    90,    91,    92,    -1,
      94,    95,    96,    97,    98,    -1,    -1,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,    -1,   116,    -1,   118,   119,   120,   121,   122,   123,
      -1,   125,    -1,   127,   128,   129,   130,    -1,    -1,   133,
     134,   135,   136,   137,    -1,    -1,    -1,   141,   142,   143,
      -1,   145,   146,   147,    -1,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,   159,    -1,   161,    -1,   163,
     164,   165,   166,    -1,   168,    -1,   170,    -1,    -1,    -1,
     174,   175,   176,    -1,   178,    -1,   180,    -1,    -1,    -1,
     184,   185,    -1,   187,    -1,   189,   190,   191,   192,   193,
     194,   195,    -1,   197,   198,   199,   200,    -1,   202,   203,
     204,   205,   206,   207,   208,    -1,   210,    -1,   212,   213,
     214,   215,   216,   217,   218,   219,    -1,   221,    -1,   223,
      -1,    -1,   226,    -1,   228,    -1,   230,   231,   232,   233,
     234,    -1,    -1,   237,    -1,   239,    -1,    -1,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,    -1,   271,   272,   273,
     274,    -1,   276,    -1,   278,   279,    -1,   281,    -1,   283,
     284,   285,   286,   287,   288,    -1,   290,   291,    -1,    -1,
     294,   295,   296,    -1,    -1,   299,   300,    -1,   302,    -1,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
      -1,    -1,   316,    -1,    -1,    -1,    -1,   321,   322,   323,
      -1,   325,   326,   327,   328,   329,   330,    -1,   332,   333,
     334,   335,   336,    -1,    -1,   339,    -1,   341,   342,   343,
     344,   345,   346,   347,   348,    -1,   350,   351,   352,    -1,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
      -1,   365,   366,    -1,   368,   369,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,    -1,
      -1,   385,   386,   387,   388,   389,   390,   391,   392,   393,
      -1,   395,    -1,    -1,   398,   399,   400,    -1,    -1,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,   417,   418,    -1,   420,   421,    -1,   423,
      -1,   425,   426,   427,   428,   429,    -1,   431,   432,    -1,
      -1,    -1,   436,   437,   438,   439,   440,    -1,   442,   443,
     444,   445,   446,   447,   448,   449,    -1,    -1,   452,   453,
     454,    -1,   456,   457,   458,   459,    -1,   461,   462,   463,
     464,   465,   466,   467,    -1,   469,    -1,   471,    -1,   473,
     474,   475,   476,    -1,    -1,    -1,   480,    -1,    -1,   483,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,   499,   500,   501,   502,   503,
      22,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    33,    -1,    35,    36,    -1,    -1,    22,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    33,    -1,
      -1,    -1,    54,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    63,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    54,
      -1,    -1,    -1,    75,    -1,    -1,    -1,    -1,    63,    -1,
      -1,    -1,    -1,    -1,    86,    -1,    -1,    -1,    -1,    -1,
      75,    -1,    -1,    -1,    -1,    -1,    98,    -1,   100,    -1,
      -1,    86,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   111,
      -1,    -1,    -1,    98,    -1,   100,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   125,    -1,    -1,   111,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   136,    -1,    -1,    -1,    -1,    -1,
     125,    -1,   144,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     152,   136,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   144,
      -1,    -1,    -1,    -1,    -1,    -1,   168,   152,    -1,    -1,
     172,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   168,    -1,    -1,    -1,   172,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   216,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   216,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   243,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   243,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   317,   318,   319,    -1,    -1,
      -1,    -1,    -1,   325,    -1,    -1,   328,    -1,    -1,    -1,
      -1,    -1,   317,   318,   319,    -1,    -1,    -1,    -1,    -1,
     325,    -1,    -1,   328,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   360,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   369,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   360,    -1,    -1,    -1,    -1,
      -1,   383,    -1,    -1,   369,    -1,    -1,    -1,   390,    -1,
      -1,    -1,    -1,   395,    -1,    -1,    -1,    -1,   383,    -1,
      -1,    -1,    -1,    -1,   406,   390,    -1,    -1,    -1,    -1,
     395,    -1,    -1,    -1,    -1,    -1,   418,    -1,    -1,    -1,
     422,   406,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   418,    -1,    -1,    -1,   422,    -1,    -1,
     442,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   455,    -1,    -1,    -1,   442,    -1,   461,
      -1,    -1,    -1,    -1,   466,    -1,    -1,    -1,   470,    -1,
     455,    -1,    -1,    -1,    -1,    -1,   461,    -1,    -1,    -1,
     482,   466,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   482,    -1,    -1,
      -1,    -1,    -1,    -1,   506,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   520,    -1,
      -1,   506,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   520
};

/* YYSTOS[STATE-NUM] -- The symbol kind of the accessing symbol of
   state STATE-NUM.  */
static const yytype_int16 yystos[] =
{
       0,    22,    33,    35,    36,    49,    54,    63,    75,    86,
      98,   100,   111,   125,   127,   136,   144,   152,   154,   155,
     168,   172,   200,   216,   243,   317,   318,   319,   325,   328,
     360,   369,   383,   390,   395,   406,   418,   422,   442,   455,
     458,   461,   466,   482,   506,   520,   535,   536,   537,   538,
     539,   546,   557,   558,   559,   562,   563,   573,   590,   638,
     650,   653,   656,   658,   661,   662,   666,   673,   677,   684,
     688,   689,   690,   697,   702,   718,   722,   725,   744,   781,
     782,   785,   787,   788,   789,   790,   792,   794,   795,   799,
     852,   853,  1013,  1015,  1016,  1017,  1022,  1025,  1031,  1032,
    1036,   436,   485,  1014,   205,   376,   385,   422,   473,   108,
     560,  1014,     3,    22,    23,    24,    25,    26,    27,    28,
      29,    30,    32,    33,    34,    40,    44,    45,    46,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    58,
      59,    61,    62,    63,    64,    65,    66,    69,    70,    71,
      72,    73,    75,    76,    77,    78,    79,    81,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    94,    95,
      96,    97,    98,    99,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   116,   118,
     119,   120,   121,   122,   123,   125,   126,   127,   128,   129,
     130,   133,   134,   135,   136,   137,   138,   139,   141,   142,
     143,   145,   146,   147,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   161,   163,   164,   165,   166,
     168,   170,   171,   173,   174,   175,   176,   177,   178,   180,
     181,   184,   185,   186,   187,   189,   190,   191,   192,   193,
     194,   195,   196,   197,   198,   199,   200,   202,   203,   204,
     205,   206,   207,   208,   210,   211,   212,   213,   214,   215,
     216,   217,   218,   219,   221,   223,   224,   225,   226,   227,
     228,   229,   230,   231,   232,   233,   234,   237,   238,   239,
     240,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   278,   279,   280,   281,
     283,   284,   285,   286,   287,   288,   290,   291,   294,   295,
     296,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   321,
     322,   323,   324,   325,   326,   327,   328,   329,   330,   332,
     333,   334,   335,   336,   337,   338,   339,   341,   342,   343,
     344,   345,   346,   347,   348,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   365,
     366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   385,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,   417,   418,
     420,   421,   423,   424,   425,   426,   427,   428,   429,   431,
     432,   434,   436,   437,   438,   439,   440,   442,   443,   444,
     445,   446,   447,   448,   449,   452,   453,   454,   456,   457,
     458,   459,   461,   462,   463,   464,   465,   466,   467,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   480,   483,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,   499,   500,   501,   502,   503,
     566,   641,   642,   643,   648,   923,  1002,  1006,     3,   176,
     250,   415,   564,   566,   641,   648,  1014,    57,   520,   585,
     178,   244,   297,   338,   376,   426,   428,   445,   451,   454,
     636,   696,     5,    31,   328,   566,   567,  1001,   108,   560,
      24,    81,    97,   147,   157,   169,   174,   205,   249,   253,
     322,   338,   339,   373,   376,   385,   388,   408,   422,   429,
     439,   445,   473,   667,   668,   671,  1014,  1001,   100,   136,
     470,   520,   538,   539,   546,   562,   563,   573,   590,   638,
     650,   653,   656,   658,   661,   662,   666,   673,   680,   684,
     690,   697,   718,   781,   782,   785,   787,  1013,  1015,  1017,
    1022,  1025,  1031,  1036,   108,    75,   216,    68,    79,    81,
     159,   182,   235,   283,   293,   304,   323,   372,   417,   438,
     440,   444,   466,   520,   565,   566,   567,   788,   853,   855,
     857,   867,   874,   875,   923,   925,   926,   108,     5,   566,
     568,   719,   719,   566,  1001,    31,   178,   244,   389,   431,
     436,   566,  1023,  1024,  1034,  1014,    31,   131,   808,   809,
     178,   244,   376,   389,   431,  1026,  1027,  1034,  1014,   520,
     566,   787,   799,  1035,   566,   874,   422,   805,   565,   173,
     520,  1019,   520,   347,   800,   801,  1001,   800,     3,    55,
      56,    58,    59,    71,    72,    79,   112,   113,   153,   159,
     165,   176,   184,   185,   212,   218,   219,   221,   250,   269,
     271,   276,   283,   285,   300,   304,   323,   327,   344,   371,
     391,   399,   415,   417,   431,   432,   438,   440,   444,   466,
     467,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,   499,   641,   649,   721,   788,   789,     0,   523,   470,
     678,   120,   215,   457,   148,   220,   298,   450,   811,   812,
     857,   857,   788,   790,   792,   524,    31,   431,   436,   787,
    1035,   194,   565,  1001,   194,   565,   194,   874,   194,   565,
     568,   518,   522,   569,   570,   520,   787,   565,   426,   428,
     426,   428,   358,   181,   194,   565,   565,   174,   249,   347,
     385,   422,   473,   651,   205,    31,  1001,   194,     3,   255,
     439,   107,   422,   422,   473,   181,   379,     3,    38,    44,
      51,    56,    57,    58,    59,    71,    72,    81,    83,    89,
     101,   112,   113,   135,   165,   171,   173,   177,   194,   196,
     211,   218,   219,   221,   224,   225,   227,   238,   240,   250,
     269,   270,   271,   280,   285,   301,   303,   324,   344,   367,
     371,   384,   391,   396,   399,   415,   424,   431,   432,   444,
     450,   467,   470,   641,   644,   648,   672,   885,   887,   889,
     891,   893,   895,   897,   898,   899,   901,   902,   903,   905,
     906,  1007,   194,   566,   669,  1008,   194,   998,  1001,   194,
    1001,   520,   676,   680,     3,    38,    44,    51,    55,    56,
      57,    58,    59,    71,    72,    79,    81,    83,    89,   101,
     112,   113,   153,   159,   165,   171,   173,   176,   177,   184,
     185,   196,   211,   212,   218,   219,   221,   224,   225,   227,
     238,   240,   250,   269,   270,   271,   276,   280,   283,   285,
     300,   301,   303,   304,   323,   324,   327,   344,   367,   371,
     384,   391,   396,   399,   415,   417,   424,   431,   432,   438,
     440,   444,   466,   467,   470,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,   499,   641,   645,   648,   681,
     683,   684,   686,   687,   678,   566,   568,   564,   719,   520,
     520,   167,   520,   520,   744,   788,   875,   520,   520,   565,
     520,   520,   172,   520,   520,   520,   520,   788,   853,   857,
     867,   513,   569,    42,   566,   868,   869,   868,   383,   524,
     791,    38,    44,   101,   173,   211,   227,   238,   270,   317,
     324,   367,   384,   455,   871,   869,    42,   566,   868,   870,
     506,   879,   568,   172,   509,   520,   520,   783,  1024,  1024,
    1024,   503,   226,   522,   292,     4,     6,     7,     8,     9,
      10,    41,    56,    58,    59,    67,    71,    72,    83,   112,
     113,   115,   153,   160,   165,   184,   185,   218,   219,   221,
     250,   269,   271,   277,   282,   285,   294,   344,   371,   399,
     431,   432,   441,   467,   504,   511,   512,   513,   518,   520,
     526,   527,   532,   533,   566,   568,   788,   842,   890,   893,
     896,   897,   898,   900,   901,   902,   905,   906,   917,   919,
     920,   921,   922,   923,   924,   926,   927,   941,   942,   953,
     975,   980,   988,   989,   990,  1002,  1003,  1004,   987,   989,
    1026,  1026,   568,  1026,   503,   172,   433,   509,   522,   569,
     663,   874,     3,   171,   173,   470,   684,  1018,  1020,   171,
    1021,   917,   959,   960,   800,   524,   520,  1010,   252,   521,
     521,   537,   565,   172,   297,   705,   663,    31,   131,   806,
     806,    61,   806,   162,   167,   241,   289,   817,   819,   820,
     845,   847,   848,   849,   183,   292,   460,   292,   811,   812,
     520,   423,  1033,   503,   226,   153,    27,    33,   136,   296,
     356,   360,   390,   463,   551,   554,   555,   356,   153,    42,
      62,   106,   204,   254,   262,   274,   306,   356,   362,   385,
     390,   406,   540,   543,   554,   153,   356,   390,   554,   153,
     356,   390,   554,    42,   561,   917,   981,     3,    31,    35,
      36,    37,    39,    41,    42,    43,    47,    60,    67,    68,
      74,    80,    82,    93,   100,   115,   117,   124,   131,   132,
     140,   144,   148,   160,   162,   167,   169,   172,   179,   182,
     183,   188,   201,   209,   220,   222,   235,   236,   241,   277,
     282,   289,   292,   293,   297,   298,   317,   318,   319,   320,
     331,   340,   349,   364,   383,   401,   419,   422,   430,   433,
     435,   441,   450,   451,   455,   460,   466,   468,   478,   479,
     481,   482,   571,   572,   641,   645,   647,   648,   570,     3,
      31,    38,    44,    51,    57,    81,    83,    89,   101,   131,
     171,   173,   176,   177,   196,   211,   224,   225,   227,   238,
     240,   250,   270,   280,   301,   303,   324,   367,   384,   396,
     415,   424,   444,   468,   470,   521,   641,   646,   648,   917,
     962,   963,  1005,  1011,   521,   520,   625,   376,   636,   565,
     277,   654,    42,   473,   194,   565,   194,   565,   640,   194,
     565,   194,   565,    89,   693,   153,   486,   565,    90,   128,
     309,   427,   469,   904,   904,   904,   520,   892,   892,   327,
     520,   894,   153,   520,    71,    72,   904,   892,   889,   484,
     506,   520,   907,   520,   907,   520,    65,   363,   524,   670,
     520,    41,   888,   520,   109,   110,   191,   192,   256,   257,
     258,   259,   260,   261,   264,   265,   380,   381,   500,   501,
     520,   908,   909,   910,   911,   912,   913,   914,   915,   916,
     892,   153,   522,  1009,   524,   670,   153,   524,   670,   153,
     292,   674,   675,   917,  1011,   521,   524,     4,   160,   292,
     441,   511,   512,   542,   545,   568,   679,   681,   682,   685,
    1004,   680,   433,   520,   580,   584,   172,   917,   960,   520,
       3,   568,   908,   909,   910,   911,   912,   913,   914,   915,
     965,   966,   466,   869,   870,   917,   565,   917,   967,   511,
     512,   566,   918,   919,   942,   953,   969,   520,   917,   959,
     970,   917,    60,   172,   236,   435,   917,   960,   973,   917,
     521,   567,   520,   424,   825,   826,   826,   808,   809,   857,
     222,   803,    38,   227,   384,   871,   227,   301,   872,   857,
     872,   227,   871,   520,   227,   872,   149,   202,   859,   227,
     826,   520,   567,   520,   826,   299,   566,   568,   720,   542,
     685,  1028,  1030,   962,   887,   964,    42,   239,   566,   520,
     518,   788,   917,   979,   520,   788,   527,   917,   520,   520,
     917,   917,   917,   149,   991,   992,   917,   960,   961,   788,
     917,   959,   567,   943,   944,   945,     9,   572,   522,   569,
     982,   569,   520,   568,   520,   568,  1004,     3,     8,    11,
      15,    16,    17,    18,    19,    20,    21,    37,    42,    48,
      55,    80,   177,   196,   201,   224,   225,   240,   277,   280,
     294,   297,   396,   504,   507,   508,   509,   511,   512,   513,
     514,   515,   516,   951,   952,   953,   955,   985,   483,   928,
     303,   917,   524,   803,   520,   568,   803,     3,   115,   244,
     542,   568,   906,  1029,   104,   115,  1030,   115,  1030,   566,
      42,   566,   521,   524,   678,   524,   521,   801,   998,   999,
      42,   721,   750,   754,   755,  1010,   663,   195,   358,   222,
     390,   790,   790,    31,   813,   814,   917,    61,   790,   807,
     164,   273,   833,   230,   274,   343,   393,   457,     4,     9,
      31,   828,   917,   511,   512,   829,   830,   917,   919,   845,
     846,   820,   819,   817,   818,   167,   848,   287,   850,    61,
     796,   797,   798,   860,   918,   989,   989,   817,   845,   960,
     239,   565,    74,    82,    93,   169,   194,   331,   451,   566,
     607,   617,   632,    82,    93,   786,    93,   786,   520,   433,
     520,   605,   248,   454,   605,    93,   524,   433,   565,   889,
     542,    61,   544,   542,   542,   106,   254,   262,    61,   433,
     482,   506,   541,   267,   376,   541,   543,   874,    93,   433,
     786,   376,   565,   433,   376,   566,   580,   519,   531,   962,
     962,   963,   524,   811,   812,    13,    14,   433,   566,   624,
     629,   482,   583,   565,   347,   385,   422,   473,   651,   275,
     472,   723,   153,   100,   590,   655,   656,   690,  1036,   145,
     887,   565,   277,   540,   657,   277,   520,   625,    42,   277,
     625,   277,   520,   652,   194,   566,   619,   694,     3,   670,
     520,   961,  1004,   672,   964,   904,   904,    41,   888,   431,
     431,  1004,  1004,   566,   884,   887,   884,   518,   518,  1004,
    1004,   433,   433,   433,   433,   669,   571,   522,  1008,   998,
    1001,  1001,  1008,   521,   524,    13,   680,   686,     4,  1004,
       4,  1004,   568,   572,   582,   589,    57,   102,   121,   142,
     146,   168,   171,   189,   282,   290,   311,   341,   586,   720,
      42,   521,   917,   521,   172,   524,   521,   320,   968,   521,
     918,   918,    11,    15,    16,    19,    20,    21,   201,   224,
     294,   507,   508,   509,   511,   512,   513,   514,   515,   516,
     953,   918,   521,   876,   877,   925,   167,   172,   971,   972,
     524,   521,    42,   973,   960,   973,   973,   172,   521,    42,
     868,   520,   999,     4,     9,   566,   821,   823,   824,   989,
     987,   178,   244,   422,   426,   428,   454,   565,   804,   479,
     880,   857,   227,   857,   292,   460,   873,   857,   227,   989,
     857,   284,   284,   520,   857,   567,   881,   882,   520,   567,
     881,   524,   521,   524,   521,   524,   573,   662,   697,   784,
     787,  1015,   960,   961,   478,   976,   977,   917,   917,   946,
     947,   948,   949,     8,    15,    16,    19,    20,    21,   507,
     508,   509,   511,   512,   513,   514,   515,   516,   566,   951,
     956,   521,   960,   520,   566,   358,   996,   167,   519,   521,
     524,   531,   524,   528,   513,   570,   960,   917,   916,   916,
     887,   917,   917,   917,   917,   917,   917,   917,   917,     5,
     572,  1012,   431,    47,   419,   986,  1008,   917,   917,   520,
     788,   974,   131,   160,   277,   282,   287,   441,   452,   917,
     282,   520,   917,   433,    55,   177,   196,   201,   240,   396,
     917,   917,   917,   917,   917,   917,   917,   917,   917,   917,
      31,    39,   401,   950,   518,   522,   984,   183,   163,   929,
     371,   520,   942,   990,   172,   854,   962,   854,   520,   568,
     566,   565,  1018,   557,   565,   917,   524,   521,   253,   277,
     802,   509,    31,    39,   394,   753,   229,   524,   747,   460,
     665,   565,   699,   520,   566,   704,   714,   715,   717,    43,
     124,   815,   524,   460,   815,   267,   790,   371,   372,   511,
     512,   830,   832,   919,   393,   230,   293,   316,   316,   524,
     515,     4,   831,  1004,   831,   371,   372,   832,   565,   997,
     281,   398,   851,   520,   999,  1000,   524,   183,   460,   201,
     183,   222,   846,   818,   521,   356,   554,   520,   194,   617,
    1001,   230,   277,   230,   460,   520,   610,   886,   887,  1001,
     566,   194,  1001,   194,   566,    27,   136,   390,   550,   553,
     572,   601,   615,  1001,   572,   609,   628,  1001,   551,  1001,
     356,   390,   540,   554,   542,  1008,  1001,   542,  1008,  1001,
     542,   356,   390,   554,  1001,  1001,  1001,  1001,   356,   390,
     554,  1001,  1001,   512,   917,   981,   811,   811,   811,   468,
     963,   195,   361,   810,   917,   917,   336,   579,   521,   524,
     290,   172,   433,   574,   654,   473,   565,   565,   640,   565,
     565,   423,   565,   297,   636,   520,   788,   520,   153,   153,
     240,   566,   607,   617,   620,   623,   633,   635,   482,   484,
     612,   152,   787,   153,   482,   695,   153,   521,   962,    42,
     277,   292,   960,   521,   521,   670,   521,   518,   503,   503,
     521,   521,   887,   521,   524,   521,  1004,   519,  1004,   521,
     521,   909,   911,   912,   913,   912,   913,   913,   670,   571,
     670,   292,   670,   674,   917,   580,   513,   520,   542,   581,
     685,   922,   521,   524,    42,   578,   568,   578,   277,   282,
     341,   578,    61,   578,   887,   521,   917,   917,   917,   971,
     887,   918,   918,   918,   918,   918,   918,   131,   277,   287,
     918,   918,   918,   918,   918,   918,   918,   918,   918,   918,
     521,   524,    42,   878,   917,   917,   972,   971,   887,   521,
     521,   521,   960,   887,   999,   521,   316,   515,   316,   372,
     515,   520,   520,   803,   426,   428,   426,   428,   565,   805,
     805,   805,   917,   183,   834,   873,   857,   917,   520,   857,
     167,   520,   567,   864,   873,   887,   521,   524,   881,   521,
    1028,   887,   521,   519,   917,   140,   977,   978,   521,   531,
     524,   528,   522,   521,   521,   999,   520,   917,   993,   566,
     917,   917,   943,   992,   521,   521,   503,   918,   918,   146,
     960,   172,   131,   160,   282,   287,   441,   452,   520,   146,
     956,   917,   419,   986,   917,   974,   917,   433,   520,   788,
     917,   981,   571,   520,   520,   156,   930,   855,   856,   880,
     811,   880,  1004,   916,  1010,  1010,   253,   520,    26,   314,
     315,   394,   397,   434,   477,   748,   751,     9,   394,   752,
       9,    17,   507,   512,   518,   520,   763,   764,   765,   766,
     773,   774,   775,   778,   779,   753,   755,   479,   743,   856,
     479,   664,    42,    61,   700,   710,   717,   982,   524,   854,
     509,   505,   816,   814,   294,   951,   954,   816,     4,  1004,
     832,   293,   457,   829,   524,   247,   999,   796,    61,   989,
     520,   567,    61,   267,   433,   917,   277,   632,   520,   153,
     520,   610,   205,   629,   630,   591,    42,   176,   600,   626,
     591,    27,   136,   360,   362,   390,   547,   548,   549,   555,
     556,   153,   670,   153,   670,   601,   615,   601,   521,   524,
     568,   594,   509,   522,   521,   524,   433,   376,    93,   433,
     786,   376,   433,   433,   433,   376,   531,   519,   531,   810,
     810,   810,   963,   284,   284,   521,   409,   410,   568,   588,
     624,   579,   565,   657,   520,    42,   625,   652,   520,   654,
     358,   422,   568,   659,   660,   629,   565,   565,   640,   565,
     521,   524,   290,   605,   290,   292,   604,  1001,   482,   639,
     565,   605,    42,   565,   521,   422,   917,   153,   565,   521,
     888,  1004,   907,   907,   888,   566,   888,   519,   519,  1008,
     576,   587,   685,   582,   568,   568,   282,   629,   513,   629,
     568,   513,   629,   568,   521,   521,   972,   172,   131,   287,
     520,   879,   876,   520,   521,   521,   521,   566,   821,   880,
     805,   805,   805,   805,   565,   565,   565,    61,   188,   843,
     873,   999,   520,   861,   862,   863,   920,  1002,   999,   167,
      80,   883,   882,   521,   430,   917,   144,   917,   946,   956,
     521,   917,   993,   994,   995,    42,   201,   521,   996,   916,
     917,    37,    37,   917,   521,   917,   172,   520,   964,   917,
     521,   146,   918,   918,   146,   146,   917,   917,   519,   531,
     520,   983,   812,   479,   917,   302,   934,   524,   834,   810,
     834,   521,   784,   748,   751,   748,   748,   748,   751,   751,
     751,   512,   773,   508,   518,   750,   762,   721,   776,   777,
     765,   765,   525,   756,   777,   511,   513,   526,   527,   758,
     277,   504,   511,   512,   780,   919,   942,    83,   917,   364,
     708,   566,   267,   323,   115,   305,   520,   698,   787,   521,
     524,   704,   664,   917,   164,   234,   520,   816,   293,   565,
     521,  1000,   183,   788,   789,   989,  1000,  1001,  1001,   521,
     153,   630,   617,   630,   591,   619,   524,   521,   117,   209,
     274,   277,   616,   520,    34,    61,   637,   626,    74,    80,
      93,   115,   117,   209,   277,   282,   331,   349,   451,   460,
     596,   597,   611,   176,   115,   193,   277,   605,   541,   107,
     115,   176,   277,   408,   411,   543,   605,   390,   549,   445,
    1001,   566,   553,     3,    38,    44,    51,    57,    81,    83,
      89,   101,   171,   173,   176,   177,   196,   211,   224,   225,
     227,   238,   240,   250,   270,   276,   280,   294,   301,   303,
     324,   367,   384,   391,   396,   415,   424,   444,   450,   470,
     511,   512,   542,   568,   592,   631,   641,   647,   648,   887,
     954,  1005,   572,   628,  1001,  1001,  1001,  1001,  1001,  1001,
    1001,  1001,  1001,  1001,   981,   981,   521,   521,   521,   811,
     541,   588,   520,   623,   787,   695,    42,   565,   733,   738,
     636,   194,   565,   521,   524,   521,   657,   520,    42,   614,
     612,   620,    86,   676,   107,   274,   625,   787,   652,   787,
     619,   460,   692,   519,   887,   670,   521,   524,   629,   918,
     172,   520,   964,   881,   521,   524,   521,   834,   565,   565,
     565,   565,    31,   103,   184,   370,   520,   835,   836,   837,
     838,   839,   840,   841,   917,   917,   481,   931,   521,   919,
     957,   958,   201,   183,   858,   862,   520,   521,   864,   865,
     866,  1008,   917,   524,   521,   566,   917,   919,   917,   917,
     917,   964,   521,   917,    37,    37,   917,   917,   146,   521,
     512,   981,   521,   962,   521,   917,   521,   520,   566,   935,
     843,   521,   843,   568,   521,   183,   186,   749,   518,   751,
     519,   224,   531,   771,   772,   521,   511,   765,   519,     9,
     757,   780,   780,   780,   780,    11,    16,    17,    18,    19,
      20,    21,    37,    48,    55,    80,   177,   196,   201,   224,
     225,   240,   277,   280,   297,   396,   504,   507,   508,   509,
     511,   512,   513,   514,   515,   516,   953,   303,   520,   988,
     466,   421,   459,   709,   566,   703,   713,   292,   706,   509,
     717,   708,   956,    61,   521,   521,   465,   466,   793,   591,
     617,   521,   521,   482,   622,   118,   197,   207,   117,   462,
     917,   115,    42,   520,  1008,  1001,   918,   118,   197,   117,
     282,   230,   565,   622,    88,   637,   194,   282,   542,   917,
     637,   282,   511,   512,   545,   566,   887,   670,   670,   250,
     415,  1005,  1009,   509,   433,   433,   519,   519,   810,   580,
     460,   575,   577,   629,   521,   639,    42,   422,   917,    42,
     524,   726,   274,   337,   742,   422,   277,   520,   568,   695,
     623,   152,   787,   150,   203,   604,   120,   136,   330,   639,
     107,   695,   482,  1037,    42,   292,   566,   691,   520,   587,
     918,   964,   521,   521,     9,   357,   827,   843,   520,   392,
     520,   521,   524,   566,   932,   933,   340,   844,   524,   521,
     520,   567,    61,   521,   962,   201,   521,   865,   993,   519,
     194,   521,   917,   917,   917,   531,   519,   531,   521,   521,
     566,   936,   931,   568,   931,   766,   758,   743,   520,   530,
     721,   770,   525,   512,   773,   524,   887,   780,   780,   780,
     780,   780,   780,   780,   431,   419,   986,  1008,   780,   780,
     974,   131,   160,   277,   282,   287,   441,   452,   780,   282,
     780,   433,    55,   196,   201,   240,   396,   780,   780,   780,
     780,   780,   780,   780,   780,   780,   780,   942,   745,   746,
     990,   524,   465,   982,   521,   524,    91,   708,   917,   521,
    1000,  1000,   349,   622,   520,   613,   591,   521,   193,   520,
     917,   277,   597,   622,   625,  1001,    42,   153,   883,  1009,
     515,   592,  1001,  1001,   521,   541,   122,   521,   612,   787,
     787,   721,   733,   521,   337,    40,   520,   736,   741,   231,
     731,   565,   153,    42,   521,  1001,   639,    31,    85,    94,
     116,   193,   206,   408,   411,   608,   608,   372,   372,    42,
      66,    74,   244,   422,   917,   565,   520,   566,   707,   716,
     925,   521,   521,   520,   931,   960,   520,   960,   837,    42,
     524,   917,   460,   822,   919,   989,   999,   869,   811,   520,
     869,   917,   981,   981,   311,   937,   844,   844,   743,    99,
     761,   769,   770,   770,   758,   757,   503,   918,   918,   146,
     172,   131,   160,   282,   287,   441,   452,   520,   146,   780,
     419,   986,   780,   974,   780,   433,   521,   524,   787,   305,
     787,   703,   292,   520,   701,   565,   591,   572,   618,   621,
     412,   475,   598,   599,   520,   593,   917,   521,   252,   634,
     193,   460,   552,   515,   445,   580,   568,   695,   604,  1037,
     726,   138,   353,   724,   721,   737,   739,    31,   721,   201,
     732,   520,   565,   787,   612,   676,   787,    74,   295,    74,
     787,   692,   917,    80,   711,   521,   524,   711,     9,   844,
     521,   836,   521,   935,   933,   374,   521,   810,   989,   519,
     519,   519,    61,   811,   822,   822,   761,   918,   521,   525,
     529,   528,   780,    37,    37,   780,   780,   172,   520,   964,
     780,   146,   918,   918,   146,   146,   780,   521,   745,   709,
      93,   716,   132,   625,   509,   521,   524,   540,   521,   274,
     606,   173,   310,   397,   292,   602,   603,   627,   593,   917,
     445,    42,   423,    42,   521,   524,    83,   565,   520,  1037,
     604,   639,  1037,   295,   295,   520,   521,  1008,   712,  1008,
     695,   707,   712,   521,   822,   521,   824,   521,   521,   959,
     342,   372,   938,   115,   760,   767,   770,   768,   770,   780,
     780,   780,   964,   521,   780,    37,    37,   780,   780,   146,
     565,   465,  1001,   521,   278,   457,   634,   592,   621,   521,
     599,   207,   120,   457,   292,   627,   292,   602,   787,   520,
     721,   737,   148,   740,   520,   716,   711,   815,   880,   815,
      55,   104,   447,   917,   939,   940,   939,   521,     4,     9,
     759,   525,   529,   521,   780,   780,   780,   787,   880,   390,
     603,    65,   274,   363,   390,   595,   595,  1037,   735,   738,
     520,   721,   730,   521,   712,   816,   816,   940,   371,   166,
     326,   166,   326,   767,   768,   715,   591,    25,   115,   282,
     524,   734,   402,   739,   521,   524,   695,   815,    37,   880,
     735,   521,   230,   728,   729,   521,   721,   880,   816,   940,
     734,   520,   727,   349,   565,   998,   727,   521,   126,   729,
     565,   727,   742,   731,   732
};

/* YYR1[RULE-NUM] -- Symbol kind of the left-hand side of rule RULE-NUM.  */
static const yytype_int16 yyr1[] =
{
       0,   534,   535,   536,   536,   537,   537,   537,   537,   537,
     537,   537,   537,   537,   537,   537,   537,   537,   537,   537,
     537,   537,   537,   537,   537,   537,   537,   537,   537,   537,
     537,   537,   537,   537,   537,   537,   537,   537,   537,   537,
     537,   537,   537,   537,   537,   537,   546,   546,   546,   546,
     546,   546,   546,   546,   547,   547,   548,   548,   549,   549,
     549,   549,   550,   550,   551,   551,   551,   551,   551,   551,
     551,   551,   551,   551,   551,   551,   551,   551,   551,   551,
     551,   551,   551,   551,   551,   551,   551,   551,   551,   551,
     551,   551,   551,   552,   552,   553,   553,   553,   553,   554,
     554,   555,   556,   556,   556,   661,   661,   661,   661,   565,
     565,   566,   566,   566,   566,   567,   567,   568,   569,   569,
     570,   571,   572,   572,   572,   572,   572,   785,   785,   785,
     785,   785,   785,   785,   785,   785,   785,   785,   785,   785,
     786,   786,   697,   698,   698,   698,   698,   698,   699,   699,
     700,   700,   700,   701,   701,   701,   702,   702,   703,   704,
     704,   705,   705,   705,   706,   706,   706,   707,   707,   707,
     708,   708,   709,   709,   710,   710,   711,   711,   712,   712,
     713,   713,   714,   714,   715,   715,   716,   716,   717,   658,
     658,   658,   659,   659,   660,   660,   781,   781,   781,   656,
     656,   656,   657,   657,   673,   673,   673,   674,   674,   675,
     675,   676,   676,   539,   539,   540,   540,   541,   541,   541,
     542,   542,   542,   542,   543,   543,   543,   543,   543,   543,
     543,   543,   543,   543,   543,   543,   543,   543,   544,   544,
     545,   545,   545,  1013,  1013,  1013,  1013,  1013,  1013,  1014,
    1014,  1014,  1016,   721,   721,   721,   722,   723,   723,   724,
     724,   725,   726,   726,   727,   728,   729,   730,   730,   731,
     731,   732,   732,   733,   734,   734,   735,   736,   736,   737,
     737,   738,   738,   739,   739,   740,   740,   741,   741,   742,
     742,   742,   743,   743,   744,   745,   746,   746,   747,   747,
     748,   748,   748,   749,   749,   749,   750,   750,   751,   751,
     751,   751,   751,   752,   752,   753,   753,   753,   753,   753,
     753,   754,   754,   755,   756,   756,   757,   757,   758,   758,
     758,   758,   758,   759,   759,   760,   760,   761,   761,   762,
     763,   764,   764,   765,   765,   765,   766,   766,   767,   767,
     768,   768,   769,   769,   769,   770,   770,   770,   771,   771,
     772,   772,   773,   773,   773,   774,   774,   775,   775,   776,
     776,   777,   778,   778,   779,   780,   780,   780,   780,   780,
     780,   780,   780,   780,   780,   780,   780,   780,   780,   780,
     780,   780,   780,   780,   780,   780,   780,   780,   780,   780,
     780,   780,   780,   780,   780,   780,   780,   780,   780,   780,
     780,   780,   780,   780,   780,   780,   780,   780,   780,   780,
     780,   780,   780,   780,   780,   780,   780,   780,   780,   780,
     780,   780,   780,   780,   780,   780,   590,   590,   590,   591,
     591,   592,   592,   592,   592,   592,   592,   593,   593,   594,
     595,   595,   595,   595,   595,   596,   596,   596,   596,   597,
     597,   597,   597,   597,   597,   597,   597,   598,   598,   599,
     599,   600,   600,   600,   601,   602,   603,   603,   603,   603,
     603,   604,   604,   604,   604,   605,   606,   606,   607,   607,
     608,   608,   608,   608,   608,   608,   608,   608,   609,   609,
     610,   611,   611,   611,   611,   612,   612,   612,   612,   613,
     614,   614,   614,   615,   616,   616,   616,   616,   616,   616,
     617,   617,   618,   618,   619,   620,   620,   620,   621,   621,
     622,   622,   623,   623,   623,   624,   625,   625,   626,   626,
     627,   628,   628,   628,   628,   629,   629,   630,   630,   631,
     631,   631,   632,   632,   632,   632,   632,   632,   633,   633,
     634,   634,   634,   634,   635,   636,   636,   636,   636,   636,
     636,   636,   636,   637,   637,   666,   666,   666,   666,   666,
     666,   666,   666,   667,   667,   667,   667,   667,   667,   667,
     667,   667,   667,   667,   667,   667,   667,   667,   667,   667,
     668,   668,   668,   668,   668,   668,   669,   669,   670,   670,
     670,   671,   671,   671,   672,   672,   650,   650,   650,   650,
     650,   650,   651,   651,   652,   652,  1015,   573,   573,   574,
     574,   575,   575,   576,   576,   577,   577,   578,   578,   579,
     579,   580,   580,   581,   581,   581,   581,   581,   581,   582,
     583,   583,   584,   584,   585,   585,   586,   586,   586,   586,
     586,   586,   586,   586,   586,   586,   586,   586,   586,   586,
     586,   586,   587,   588,   588,   588,   589,   589,   787,   787,
     788,   788,   789,   789,   789,   789,   789,   789,   789,   789,
     790,   790,   791,   791,   792,   792,   792,   792,   792,   792,
     792,   792,   792,   792,   792,   792,   792,   792,   792,   792,
     792,   792,   792,   793,   793,   794,   794,   795,   795,   796,
     796,   796,   797,   797,   798,   798,   799,   799,   799,   800,
     800,   801,   802,   802,   802,   803,   803,   804,   804,   804,
     804,   804,   804,   804,   804,   804,   805,   805,   806,   806,
     806,   807,   808,   808,   809,   809,   810,   810,   810,   811,
     811,   812,   812,   813,   813,   814,   814,   815,   815,   815,
     816,   816,   816,   817,   817,   817,   817,   818,   818,   819,
     819,   819,   819,   820,   820,   821,   821,   821,   821,   821,
     821,   822,   822,   823,   823,   824,   824,   824,   824,   825,
     826,   826,   827,   827,   828,   828,   828,   828,   828,   829,
     830,   830,   830,   831,   831,   832,   832,   833,   833,   834,
     834,   834,   835,   835,   836,   836,   837,   837,   837,   837,
     837,   838,   839,   840,   841,   842,   842,   843,   843,   844,
     844,   845,   845,   846,   846,   847,   847,   848,   849,   849,
     849,   849,   850,   850,   851,   851,   851,   852,   852,   853,
     853,   854,   854,   855,   855,   856,   856,   857,   857,   857,
     857,   857,   857,   857,   857,   857,   857,   857,   858,   858,
     859,   859,   859,   860,   860,   861,   861,   862,   862,   863,
     863,   864,   864,   865,   866,   866,   867,   867,   867,   867,
     867,   867,   867,   867,   867,   867,   867,   868,   868,   868,
     868,   869,   869,   870,   870,   870,   870,   870,   871,   871,
     871,   871,   871,   871,   872,   872,   873,   873,   874,   874,
     874,   874,   875,   875,   876,   877,   877,   878,   878,   879,
     879,   880,   880,   881,   881,   882,   883,   883,   884,   884,
     885,   885,   886,   886,   887,   887,   887,   887,   887,   887,
     887,   887,   887,   888,   888,   888,   889,   889,   889,   889,
     889,   889,   889,   890,   890,   890,   890,   891,   892,   892,
     893,   893,   893,   893,   893,   893,   893,   893,   893,   893,
     893,   894,   894,   895,   895,   896,   896,   897,   898,   899,
     899,   900,   900,   901,   902,   903,   903,   903,   903,   903,
     903,   904,   904,   905,   905,   905,   905,   906,   907,   907,
     907,   908,   908,   909,   909,   910,   910,   911,   911,   912,
     912,   913,   913,   914,   914,   915,   915,   916,   916,   916,
     916,   916,   916,   916,   916,   916,   916,   916,   916,   916,
     916,   916,   916,   917,   917,   917,   917,   917,   917,   917,
     917,   917,   917,   917,   917,   917,   917,   917,   917,   917,
     917,   917,   917,   917,   917,   917,   917,   917,   917,   917,
     917,   917,   917,   917,   917,   917,   917,   917,   917,   917,
     917,   917,   917,   917,   917,   917,   917,   917,   917,   917,
     917,   917,   917,   917,   917,   917,   917,   917,   917,   917,
     917,   917,   917,   917,   917,   917,   917,   917,   917,   917,
     917,   917,   917,   918,   918,   918,   918,   918,   918,   918,
     918,   918,   918,   918,   918,   918,   918,   918,   918,   918,
     918,   918,   918,   918,   918,   918,   918,   918,   919,   919,
     919,   920,   920,   920,   920,   920,   920,   920,   920,   920,
     920,   920,   920,   920,   921,   921,   921,   921,   921,   921,
     922,   923,   923,   923,   923,   923,   923,   924,   924,   925,
     925,   926,   926,   926,   926,   926,   926,   926,   926,   926,
     926,   926,   926,   926,   926,   927,   927,   928,   928,   929,
     929,   929,   930,   930,   931,   931,   932,   932,   933,   934,
     934,   934,   935,   936,   936,   937,   937,   938,   938,   938,
     939,   939,   940,   940,   940,   940,   940,   941,   941,   942,
     942,   943,   944,   944,   945,   945,   946,   947,   947,   948,
     948,   949,   949,   950,   950,   950,   951,   951,   952,   952,
     952,   952,   952,   952,   952,   952,   952,   952,   952,   952,
     952,   952,   953,   953,   954,   954,   955,   955,   955,   955,
     955,   955,   955,   955,   956,   956,   957,   957,   958,   958,
     959,   959,   960,   960,   961,   961,   962,   962,   963,   963,
     963,   964,   964,   965,   965,   966,   966,   966,   966,   966,
     966,   966,   966,   966,   966,   967,   967,   968,   969,   969,
     970,   970,   970,   970,   970,   970,   971,   972,   973,   973,
     973,   974,   974,   975,   976,   976,   977,   978,   978,   979,
     979,   980,   980,   570,   570,   570,   570,   981,   981,   982,
     982,   983,   983,   983,   984,   984,   984,   984,   984,   985,
     985,   986,   986,   987,   987,   988,   988,   989,   989,   990,
     990,   990,   991,   991,   992,   992,   993,   994,   994,   995,
     995,   996,   996,   996,   997,   997,   998,   998,   999,   999,
    1000,  1000,  1001,  1002,  1002,  1003,  1003,  1003,  1003,  1003,
    1003,  1003,  1003,  1003,  1003,  1003,  1003,  1003,  1003,  1004,
    1005,  1005,  1005,  1005,  1006,  1006,  1006,  1006,  1007,  1007,
    1007,  1007,  1008,  1008,  1009,  1009,  1010,  1010,  1011,  1012,
    1012,   782,   783,   783,   784,   784,   784,   784,   784,   653,
     653,   653,   654,   654,   655,   655,   655,   655,   690,   690,
     691,   692,   692,   693,   693,   694,   694,   695,   695,   696,
     696,   538,   538,   538,   538,   538,   538,   563,   563,   564,
     564,   688,   688,   689,   677,   677,   677,   677,   678,   678,
     679,   679,   679,   680,   680,   680,   680,   680,   680,   680,
     680,   680,   680,   680,   680,   680,   680,   680,   680,   680,
     680,   680,   680,   680,   680,   680,   680,   680,   680,   680,
     680,   680,   680,   681,   681,   681,   681,   682,   682,   683,
     683,   684,   684,   685,   685,   685,   685,   686,   687,   687,
    1025,  1025,  1025,  1025,  1026,  1026,  1026,  1026,  1027,  1027,
    1027,  1027,  1028,  1028,  1029,  1029,  1029,  1029,  1029,  1029,
    1029,  1030,  1030,   718,   718,   718,   718,   718,   719,   719,
     720,   720,  1017,  1017,  1017,  1017,  1017,  1018,  1018,  1018,
    1018,  1018,  1019,  1019,  1020,  1020,  1021,  1021,   662,   662,
     663,   663,   663,   664,   664,   665,   665,   557,   557,   558,
     559,   559,   560,   560,   561,   561,  1022,  1022,  1022,  1022,
    1023,  1023,  1024,  1024,  1024,  1031,  1031,  1031,  1031,  1031,
    1031,  1031,  1031,  1032,  1032,  1033,  1033,  1034,  1034,  1035,
    1035,   562,  1036,  1036,  1036,  1036,  1036,  1037,  1037,  1037,
    1037,   638,   638,   638,   639,   639,   639,   640,   641,   641,
     641,   641,   641,   641,   641,   641,   641,   641,   641,   641,
     641,   641,   641,   641,   641,   641,   641,   641,   641,   641,
     641,   641,   641,   641,   641,   641,   641,   641,   641,   641,
     641,   641,   641,   641,   641,   641,   641,   641,   641,   641,
     641,   641,   641,   641,   641,   641,   641,   641,   641,   641,
     641,   641,   641,   641,   641,   641,   641,   641,   641,   641,
     641,   641,   641,   641,   641,   641,   641,   641,   641,   641,
     641,   641,   641,   641,   641,   641,   641,   641,   641,   641,
     641,   641,   641,   641,   641,   641,   641,   641,   641,   641,
     641,   641,   641,   641,   641,   641,   641,   641,   641,   641,
     641,   641,   641,   641,   641,   641,   641,   641,   641,   641,
     641,   641,   641,   641,   641,   641,   641,   641,   641,   641,
     641,   641,   641,   641,   641,   641,   641,   641,   641,   641,
     641,   641,   641,   641,   641,   641,   641,   641,   641,   641,
     641,   641,   641,   641,   641,   641,   641,   641,   641,   641,
     641,   641,   641,   641,   641,   641,   641,   641,   641,   641,
     641,   641,   641,   641,   641,   641,   641,   641,   641,   641,
     641,   641,   641,   641,   641,   641,   641,   641,   641,   641,
     641,   641,   641,   641,   641,   641,   641,   641,   641,   641,
     641,   641,   641,   641,   641,   641,   641,   641,   641,   641,
     641,   641,   641,   641,   641,   641,   641,   641,   641,   641,
     641,   641,   641,   641,   641,   641,   641,   641,   641,   641,
     641,   641,   641,   641,   641,   641,   641,   641,   641,   641,
     641,   641,   641,   641,   641,   641,   641,   641,   641,   641,
     641,   641,   641,   641,   641,   641,   641,   641,   641,   641,
     641,   641,   641,   641,   641,   641,   641,   641,   641,   641,
     641,   641,   641,   641,   641,   641,   641,   641,   641,   641,
     641,   641,   641,   641,   641,   641,   641,   641,   641,   641,
     641,   641,   641,   641,   641,   641,   641,   641,   641,   641,
     641,   641,   641,   641,   641,   641,   641,   641,   641,   641,
     641,   641,   641,   641,   641,   642,   642,   642,   642,   642,
     642,   642,   642,   642,   642,   642,   642,   642,   642,   642,
     642,   642,   642,   642,   642,   642,   642,   642,   642,   642,
     642,   642,   642,   642,   642,   642,   642,   642,   642,   642,
     642,   642,   642,   642,   642,   642,   642,   642,   642,   642,
     642,   642,   642,   642,   642,   642,   642,   642,   642,   643,
     643,   643,   643,   643,   643,   643,   643,   643,   643,   643,
     643,   643,   643,   643,   643,   643,   643,   643,   643,   643,
     643,   643,   643,   643,   643,   643,   643,   644,   644,   644,
     644,   644,   644,   644,   644,   644,   644,   644,   644,   644,
     644,   644,   644,   644,   644,   644,   644,   644,   644,   644,
     644,   644,   644,   644,   644,   644,   645,   645,   645,   645,
     645,   645,   645,   645,   645,   645,   645,   645,   645,   645,
     645,   645,   645,   645,   645,   645,   645,   645,   645,   645,
     645,   645,   645,   645,   645,   645,   645,   645,   645,   645,
     645,   645,   645,   645,   645,   645,   645,   645,   645,   645,
     645,   645,   645,   645,   645,   645,   645,   645,   645,   645,
     645,   645,   645,   645,   645,   645,   645,   645,   645,   645,
     645,   645,   645,   645,   645,   645,   645,   645,   645,   645,
     645,   645,   645,   645,   645,   645,   645,   646,   646,   646,
     646,   646,   646,   646,   646,   646,   646,   646,   646,   646,
     646,   646,   646,   646,   646,   646,   646,   646,   646,   646,
     646,   646,   646,   646,   646,   646,   646,   646,   646,   647,
     647,   647,   647,   647,   647,   647,   647,   647,   647,   647,
     647,   647,   647,   647,   647,   647,   647,   647,   647,   647,
     647,   647,   647,   647,   647,   647,   647,   647,   647,   647,
     647,   647,   647,   647,   647,   647,   647,   647,   647,   647,
     647,   647,   647,   647,   647,   647,   647,   647,   647,   647,
     647,   647,   647,   647,   647,   647,   647,   647,   647,   647,
     647,   647,   647,   647,   647,   647,   647,   647,   647,   647,
     647,   647,   648,   648,   648,   648,   648,   648,   648,   648,
     648,   648,   648,   648,   648,   648,   648,   648,   648,   648,
     648,   648,   648,   649,   649,   649,   649,   649,   649,   649,
     649,   649,   649,   649,   649,   649,   649,   649,   649,   649,
     649,   649,   649,   649,   649,   649,   649,   649,   649,   649,
     649,   649,   649,   649,   649,   649,   649,   649,   649,   649,
     649,   649,   649,   649,   649,   649,   649,   649,   649,   649,
     649,   649,   649,   649,   649,   649
};

/* YYR2[RULE-NUM] -- Number of symbols on the right-hand side of rule RULE-NUM.  */
static const yytype_int8 yyr2[] =
{
       0,     2,     1,     3,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     0,     4,     6,     4,     6,
       4,     6,     4,     6,     1,     2,     3,     2,     1,     3,
       2,     3,     1,     3,     2,     5,     3,     6,     4,     6,
       6,     6,     5,     5,     6,     9,     4,     5,     7,     6,
       4,     8,     4,     2,     4,     3,     6,     4,     2,     2,
       2,     2,     1,     2,     0,     1,     2,     2,     2,     1,
       3,     4,     2,     1,     0,     2,     3,     2,     3,     1,
       2,     1,     1,     1,     1,     1,     1,     1,     1,     2,
       2,     1,     1,     1,     1,     1,     1,     6,     6,     8,
       6,     8,     6,     8,     6,     8,     8,    10,     8,    10,
       1,     0,     9,     1,     4,     4,     7,     2,     1,     3,
       2,     2,     0,     4,     3,     0,     1,     0,     2,     3,
       5,     2,     2,     0,     8,     5,     0,     5,     5,     7,
       2,     0,     1,     1,     1,     3,     2,     0,     1,     0,
       1,     3,     1,     3,     1,     2,     1,     3,     2,     6,
       8,     5,     1,     0,     1,     3,     2,     4,     5,     5,
       8,     7,     1,     0,     3,     9,    12,     1,     3,     1,
       3,     3,     0,     4,     6,     1,     2,     1,     1,     0,
       1,     2,     2,     1,     2,     2,     1,     2,     3,     2,
       2,     2,     2,     3,     3,     3,     1,     3,     1,     0,
       1,     2,     2,     2,     2,     2,     2,     2,     2,     1,
       1,     0,     2,     1,     1,     1,     5,     1,     1,     1,
       1,    16,     3,     0,     3,     2,     2,     1,     3,     2,
       0,     5,     0,     4,     3,     0,    12,     1,     0,     1,
       3,     1,     3,     1,     3,     4,     0,     4,     3,     2,
       2,     0,     2,     0,    12,     1,     1,     3,     2,     0,
       1,     1,     0,     1,     1,     0,     2,     0,     2,     2,
       2,     2,     1,     1,     0,     3,     4,     3,     2,     3,
       0,     1,     3,     3,     1,     3,     1,     0,     1,     1,
       1,     5,     0,     1,     1,     2,     0,     3,     0,     5,
       4,     1,     1,     2,     2,     0,     1,     3,     1,     3,
       1,     3,     1,     3,     3,     1,     2,     3,     2,     0,
       1,     1,     1,     2,     1,     2,     3,     2,     1,     1,
       0,     4,     2,     5,     3,     1,     3,     3,     5,     2,
       2,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     2,     2,     3,
       3,     5,     4,     6,     3,     5,     4,     6,     4,     6,
       5,     7,     3,     2,     4,     3,     2,     3,     3,     3,
       3,     4,     3,     4,     3,     4,     5,     6,     6,     7,
       6,     7,     6,     7,     3,     4,     9,    12,    11,     0,
       2,     1,     1,     1,     1,     1,     1,     3,     0,     1,
       2,     1,     1,     2,     2,     3,     1,     1,     2,     2,
       1,     2,     3,     5,     3,     2,     5,     1,     1,     1,
       0,     5,     7,     5,     2,     3,     1,     1,     2,     2,
       0,     3,     4,     4,     0,     3,     2,     0,     3,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     3,
       3,     1,     2,     2,     2,     2,     2,     2,     0,     3,
       3,     3,     0,     1,     2,     1,     2,     2,     2,     2,
       3,     4,     1,     3,     1,     1,     1,     1,     3,     1,
       2,     0,     1,     2,     0,     1,     3,     0,     2,     0,
       3,     3,     1,     5,     3,     1,     3,     1,     2,     1,
       4,     5,     5,     6,     3,     7,     4,    11,     1,     3,
       2,     2,     2,     0,     3,     1,     1,     2,     2,     2,
       2,     1,     0,     1,     2,     6,     4,     6,     4,     6,
       8,     4,     6,     1,     1,     1,     1,     2,     1,     2,
       1,     2,     1,     1,     1,     1,     3,     3,     3,     3,
       2,     2,     1,     3,     1,     1,     1,     3,     1,     1,
       0,     1,     1,     1,     1,     3,     8,    11,    10,     7,
      10,     9,     1,     1,     2,     3,     8,    11,     9,     1,
       1,     3,     0,     1,     3,     1,     0,     1,     0,     1,
       0,     1,     3,     1,     1,     1,     3,     1,     0,     2,
       2,     0,     2,     0,     1,     0,     1,     1,     1,     3,
       3,     1,     1,     3,     3,     3,     3,     3,     3,     4,
       3,     2,     1,     1,     1,     1,     1,     3,     1,     1,
       3,     3,     1,     2,     4,     4,     2,     3,     5,     5,
       1,     1,     3,     0,    11,    11,    10,    12,     1,     2,
       5,     4,     4,     4,     4,     7,     5,     4,     7,     6,
       9,     9,     4,     1,     1,     1,     1,     1,     1,     1,
       5,     1,     1,     3,     1,     2,     2,     2,     3,     1,
       3,     7,     1,     2,     0,     2,     0,     3,     3,     4,
       4,     4,     4,     3,     2,     1,     1,     0,     1,     1,
       0,     2,     1,     5,     1,     0,     2,     2,     0,     1,
       0,     3,     5,     1,     3,     4,     3,     1,     1,     0,
       2,     2,     0,     2,     2,     1,     1,     1,     0,     2,
       4,     5,     4,     2,     3,     2,     2,     2,     2,     1,
       2,     3,     0,     1,     0,     5,     1,     4,     6,     2,
       1,     0,     4,     0,     1,     1,     2,     2,     2,     1,
       1,     2,     2,     1,     1,     1,     1,     1,     1,     3,
       3,     0,     1,     3,     1,     2,     1,     1,     1,     1,
       1,     2,     4,     4,     5,     1,     1,     2,     0,     2,
       0,     1,     3,     1,     0,     1,     2,     3,     2,     4,
       2,     3,     2,     0,     1,     2,     0,     4,     5,     1,
       2,     2,     0,     1,     3,     1,     2,     3,     3,     3,
       3,     3,     3,     1,     4,     2,     9,     9,     3,     0,
       2,     2,     0,     5,     3,     1,     3,     5,     3,     1,
       2,     1,     3,     5,     1,     2,     3,     4,     5,     4,
       5,     4,     6,     5,     4,     5,     5,     5,     2,     4,
       1,     1,     0,     1,     4,     5,     4,     0,     2,     2,
       2,     1,     1,     1,     1,     0,     4,     2,     1,     2,
       2,     4,     2,     6,     2,     1,     3,     4,     0,     2,
       0,     2,     0,     1,     3,     3,     2,     0,     2,     4,
       1,     1,     1,     0,     2,     3,     5,     6,     2,     3,
       5,     5,     5,     3,     4,     0,     1,     1,     1,     1,
       1,     2,     4,     1,     1,     1,     1,     2,     3,     0,
       1,     1,     1,     1,     1,     2,     2,     2,     2,     2,
       1,     3,     0,     1,     1,     1,     1,     5,     2,     1,
       1,     1,     1,     4,     1,     2,     2,     1,     3,     3,
       2,     1,     0,     5,     2,     5,     2,     1,     3,     3,
       0,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     3,     3,     3,     3,     3,
       3,     3,     0,     1,     3,     3,     5,     2,     2,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     2,     2,     3,     3,     2,     2,
       3,     3,     5,     4,     6,     3,     5,     4,     6,     4,
       6,     5,     7,     3,     2,     4,     3,     2,     3,     3,
       3,     3,     4,     3,     4,     3,     4,     5,     6,     6,
       7,     6,     7,     6,     7,     3,     4,     4,     6,     1,
       4,     3,     5,     1,     3,     2,     2,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     2,     2,     5,     6,     6,     7,     1,     1,
       2,     1,     1,     2,     2,     3,     1,     2,     4,     1,
       1,     2,     2,     4,     1,     1,     3,     1,     4,     1,
       3,     3,     6,     7,     9,     7,     7,     5,     1,     1,
       1,     5,     6,     6,     4,     4,     4,     4,     6,     5,
       5,     5,     4,     6,     4,     7,     9,     5,     0,     5,
       4,     0,     1,     0,     2,     0,     1,     3,     3,     2,
       2,     0,     6,     1,     0,     3,     0,     2,     2,     0,
       1,     4,     2,     2,     2,     2,     2,     4,     3,     1,
       5,     3,     1,     3,     1,     2,     3,     1,     3,     1,
       2,     1,     0,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     4,     1,     4,     1,     4,     1,     2,
       1,     2,     1,     2,     1,     3,     1,     3,     1,     2,
       1,     3,     1,     2,     1,     0,     1,     3,     1,     3,
       3,     1,     3,     3,     0,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     4,     3,     2,     3,     0,
       3,     3,     2,     2,     1,     0,     2,     2,     3,     2,
       1,     1,     3,     5,     1,     2,     4,     2,     0,     1,
       0,     1,     2,     3,     5,     7,     7,     1,     0,     0,
       2,     0,     2,     3,     3,     3,     5,     7,     7,     0,
       2,     1,     0,     1,     0,     1,     3,     1,     2,     3,
       2,     1,     4,     2,     1,     0,     3,     1,     3,     1,
       2,     4,     2,     0,     1,     3,     1,     3,     1,     2,
       1,     3,     1,     1,     2,     1,     1,     2,     1,     1,
       2,     7,     2,     5,     3,     3,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     2,     2,     3,     3,     0,     1,     1,
       1,     5,     3,     0,     1,     1,     1,     1,     1,     4,
       7,     6,     2,     0,     1,     1,     1,     1,    13,    16,
       1,     2,     0,     1,     0,     1,     0,     2,     0,     1,
       0,     6,     8,     6,     8,     6,     8,     3,     2,     1,
       0,     4,     6,     3,     2,     4,     3,     5,     1,     0,
       1,     1,     0,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       3,     1,     1,     1,     1,     1,     1,     2,     1,     1,
       2,     3,     3,     3,     1,     3,     3,     2,     3,     3,
       3,     3,     1,     1,     1,     1,     3,     5,     1,     1,
       1,     1,     3,     2,     2,     3,     4,     5,     1,     1,
       1,     1,     4,     6,     5,     4,     6,     1,     1,     1,
       1,     1,     1,     0,     1,     3,     1,     0,     7,     3,
       1,     2,     3,     2,     0,     2,     0,     2,     4,     5,
       3,     5,     1,     0,     2,     0,     2,     3,     3,     3,
       1,     1,     1,     2,     3,     2,     2,     2,     2,     3,
       4,     3,     1,     1,     1,     1,     0,     1,     3,     1,
       3,     2,     9,    12,    11,    12,    14,     3,     4,     4,
       0,     7,    10,     9,     2,     3,     0,     4,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1
};


enum { YYENOMEM = -2 };

#define yyerrok         (yyerrstatus = 0)
#define yyclearin       (yychar = YYEMPTY)

#define YYACCEPT        goto yyacceptlab
#define YYABORT         goto yyabortlab
#define YYERROR         goto yyerrorlab
#define YYNOMEM         goto yyexhaustedlab


#define YYRECOVERING()  (!!yyerrstatus)

#define YYBACKUP(Token, Value)                                    \
  do                                                              \
    if (yychar == YYEMPTY)                                        \
      {                                                           \
        yychar = (Token);                                         \
        yylval = (Value);                                         \
        YYPOPSTACK (yylen);                                       \
        yystate = *yyssp;                                         \
        goto yybackup;                                            \
      }                                                           \
    else                                                          \
      {                                                           \
        yyerror (&yylloc, yyscanner, YY_("syntax error: cannot back up")); \
        YYERROR;                                                  \
      }                                                           \
  while (0)

/* Backward compatibility with an undocumented macro.
   Use YYerror or YYUNDEF. */
#define YYERRCODE YYUNDEF

/* YYLLOC_DEFAULT -- Set CURRENT to span from RHS[1] to RHS[N].
   If N is 0, then set CURRENT to the empty location which ends
   the previous symbol: RHS[0] (always defined).  */

#ifndef YYLLOC_DEFAULT
# define YYLLOC_DEFAULT(Current, Rhs, N)                                \
    do                                                                  \
      if (N)                                                            \
        {                                                               \
          (Current).first_line   = YYRHSLOC (Rhs, 1).first_line;        \
          (Current).first_column = YYRHSLOC (Rhs, 1).first_column;      \
          (Current).last_line    = YYRHSLOC (Rhs, N).last_line;         \
          (Current).last_column  = YYRHSLOC (Rhs, N).last_column;       \
        }                                                               \
      else                                                              \
        {                                                               \
          (Current).first_line   = (Current).last_line   =              \
            YYRHSLOC (Rhs, 0).last_line;                                \
          (Current).first_column = (Current).last_column =              \
            YYRHSLOC (Rhs, 0).last_column;                              \
        }                                                               \
    while (0)
#endif

#define YYRHSLOC(Rhs, K) ((Rhs)[K])


/* Enable debugging if requested.  */
#if YYDEBUG

# ifndef YYFPRINTF
#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#  define YYFPRINTF fprintf
# endif

# define YYDPRINTF(Args)                        \
do {                                            \
  if (yydebug)                                  \
    YYFPRINTF Args;                             \
} while (0)


/* YYLOCATION_PRINT -- Print the location on the stream.
   This macro was not mandated originally: define only if we know
   we won't break user code: when these are the locations we know.  */

# ifndef YYLOCATION_PRINT

#  if defined YY_LOCATION_PRINT

   /* Temporary convenience wrapper in case some people defined the
      undocumented and private YY_LOCATION_PRINT macros.  */
#   define YYLOCATION_PRINT(File, Loc)  YY_LOCATION_PRINT(File, *(Loc))

#  elif defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL

/* Print *YYLOCP on YYO.  Private, do not rely on its existence. */

YY_ATTRIBUTE_UNUSED
static int
yy_location_print_ (FILE *yyo, YYLTYPE const * const yylocp)
{
  int res = 0;
  int end_col = 0 != yylocp->last_column ? yylocp->last_column - 1 : 0;
  if (0 <= yylocp->first_line)
    {
      res += YYFPRINTF (yyo, "%d", yylocp->first_line);
      if (0 <= yylocp->first_column)
        res += YYFPRINTF (yyo, ".%d", yylocp->first_column);
    }
  if (0 <= yylocp->last_line)
    {
      if (yylocp->first_line < yylocp->last_line)
        {
          res += YYFPRINTF (yyo, "-%d", yylocp->last_line);
          if (0 <= end_col)
            res += YYFPRINTF (yyo, ".%d", end_col);
        }
      else if (0 <= end_col && yylocp->first_column < end_col)
        res += YYFPRINTF (yyo, "-%d", end_col);
    }
  return res;
}

#   define YYLOCATION_PRINT  yy_location_print_

    /* Temporary convenience wrapper in case some people defined the
       undocumented and private YY_LOCATION_PRINT macros.  */
#   define YY_LOCATION_PRINT(File, Loc)  YYLOCATION_PRINT(File, &(Loc))

#  else

#   define YYLOCATION_PRINT(File, Loc) ((void) 0)
    /* Temporary convenience wrapper in case some people defined the
       undocumented and private YY_LOCATION_PRINT macros.  */
#   define YY_LOCATION_PRINT  YYLOCATION_PRINT

#  endif
# endif /* !defined YYLOCATION_PRINT */


# define YY_SYMBOL_PRINT(Title, Kind, Value, Location)                    \
do {                                                                      \
  if (yydebug)                                                            \
    {                                                                     \
      YYFPRINTF (stderr, "%s ", Title);                                   \
      yy_symbol_print (stderr,                                            \
                  Kind, Value, Location, yyscanner); \
      YYFPRINTF (stderr, "\n");                                           \
    }                                                                     \
} while (0)


/*-----------------------------------.
| Print this symbol's value on YYO.  |
`-----------------------------------*/

static void
yy_symbol_value_print (FILE *yyo,
                       yysymbol_kind_t yykind, YYSTYPE const * const yyvaluep, YYLTYPE const * const yylocationp, core_yyscan_t yyscanner)
{
  FILE *yyoutput = yyo;
  YY_USE (yyoutput);
  YY_USE (yylocationp);
  YY_USE (yyscanner);
  if (!yyvaluep)
    return;
  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  YY_USE (yykind);
  YY_IGNORE_MAYBE_UNINITIALIZED_END
}


/*---------------------------.
| Print this symbol on YYO.  |
`---------------------------*/

static void
yy_symbol_print (FILE *yyo,
                 yysymbol_kind_t yykind, YYSTYPE const * const yyvaluep, YYLTYPE const * const yylocationp, core_yyscan_t yyscanner)
{
  YYFPRINTF (yyo, "%s %s (",
             yykind < YYNTOKENS ? "token" : "nterm", yysymbol_name (yykind));

  YYLOCATION_PRINT (yyo, yylocationp);
  YYFPRINTF (yyo, ": ");
  yy_symbol_value_print (yyo, yykind, yyvaluep, yylocationp, yyscanner);
  YYFPRINTF (yyo, ")");
}

/*------------------------------------------------------------------.
| yy_stack_print -- Print the state stack from its BOTTOM up to its |
| TOP (included).                                                   |
`------------------------------------------------------------------*/

static void
yy_stack_print (yy_state_t *yybottom, yy_state_t *yytop)
{
  YYFPRINTF (stderr, "Stack now");
  for (; yybottom <= yytop; yybottom++)
    {
      int yybot = *yybottom;
      YYFPRINTF (stderr, " %d", yybot);
    }
  YYFPRINTF (stderr, "\n");
}

# define YY_STACK_PRINT(Bottom, Top)                            \
do {                                                            \
  if (yydebug)                                                  \
    yy_stack_print ((Bottom), (Top));                           \
} while (0)


/*------------------------------------------------.
| Report that the YYRULE is going to be reduced.  |
`------------------------------------------------*/

static void
yy_reduce_print (yy_state_t *yyssp, YYSTYPE *yyvsp, YYLTYPE *yylsp,
                 int yyrule, core_yyscan_t yyscanner)
{
  int yylno = yyrline[yyrule];
  int yynrhs = yyr2[yyrule];
  int yyi;
  YYFPRINTF (stderr, "Reducing stack by rule %d (line %d):\n",
             yyrule - 1, yylno);
  /* The symbols being reduced.  */
  for (yyi = 0; yyi < yynrhs; yyi++)
    {
      YYFPRINTF (stderr, "   $%d = ", yyi + 1);
      yy_symbol_print (stderr,
                       YY_ACCESSING_SYMBOL (+yyssp[yyi + 1 - yynrhs]),
                       &yyvsp[(yyi + 1) - (yynrhs)],
                       &(yylsp[(yyi + 1) - (yynrhs)]), yyscanner);
      YYFPRINTF (stderr, "\n");
    }
}

# define YY_REDUCE_PRINT(Rule)          \
do {                                    \
  if (yydebug)                          \
    yy_reduce_print (yyssp, yyvsp, yylsp, Rule, yyscanner); \
} while (0)

/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
int yydebug;
#else /* !YYDEBUG */
# define YYDPRINTF(Args) ((void) 0)
# define YY_SYMBOL_PRINT(Title, Kind, Value, Location)
# define YY_STACK_PRINT(Bottom, Top)
# define YY_REDUCE_PRINT(Rule)
#endif /* !YYDEBUG */


/* YYINITDEPTH -- initial size of the parser's stacks.  */
#ifndef YYINITDEPTH
# define YYINITDEPTH 200
#endif

/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   YYSTACK_ALLOC_MAXIMUM < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.  */

#ifndef YYMAXDEPTH
# define YYMAXDEPTH 10000
#endif






/*-----------------------------------------------.
| Release the memory associated to this symbol.  |
`-----------------------------------------------*/

static void
yydestruct (const char *yymsg,
            yysymbol_kind_t yykind, YYSTYPE *yyvaluep, YYLTYPE *yylocationp, core_yyscan_t yyscanner)
{
  YY_USE (yyvaluep);
  YY_USE (yylocationp);
  YY_USE (yyscanner);
  if (!yymsg)
    yymsg = "Deleting";
  YY_SYMBOL_PRINT (yymsg, yykind, yyvaluep, yylocationp);

  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  YY_USE (yykind);
  YY_IGNORE_MAYBE_UNINITIALIZED_END
}






/*----------.
| yyparse.  |
`----------*/

int
yyparse (core_yyscan_t yyscanner)
{
/* Lookahead token kind.  */
int yychar;


/* The semantic value of the lookahead symbol.  */
/* Default value used for initialization, for pacifying older GCCs
   or non-GCC compilers.  */
YY_INITIAL_VALUE (static YYSTYPE yyval_default;)
YYSTYPE yylval YY_INITIAL_VALUE (= yyval_default);

/* Location data for the lookahead symbol.  */
static YYLTYPE yyloc_default
# if defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL
  = { 1, 1, 1, 1 }
# endif
;
YYLTYPE yylloc = yyloc_default;

    /* Number of syntax errors so far.  */
    int yynerrs = 0; (void)yynerrs;

    yy_state_fast_t yystate = 0;
    /* Number of tokens to shift before error messages enabled.  */
    int yyerrstatus = 0;

    /* Refer to the stacks through separate pointers, to allow yyoverflow
       to reallocate them elsewhere.  */

    /* Their size.  */
    YYPTRDIFF_T yystacksize = YYINITDEPTH;

    /* The state stack: array, bottom, top.  */
    yy_state_t yyssa[YYINITDEPTH];
    yy_state_t *yyss = yyssa;
    yy_state_t *yyssp = yyss;

    /* The semantic value stack: array, bottom, top.  */
    YYSTYPE yyvsa[YYINITDEPTH];
    YYSTYPE *yyvs = yyvsa;
    YYSTYPE *yyvsp = yyvs;

    /* The location stack: array, bottom, top.  */
    YYLTYPE yylsa[YYINITDEPTH];
    YYLTYPE *yyls = yylsa;
    YYLTYPE *yylsp = yyls;

  int yyn;
  /* The return value of yyparse.  */
  int yyresult;
  /* Lookahead symbol kind.  */
  yysymbol_kind_t yytoken = YYSYMBOL_YYEMPTY;
  /* The variables used to return semantic value and location from the
     action routines.  */
  YYSTYPE yyval;
  YYLTYPE yyloc;

  /* The locations where the error started and ended.  */
  YYLTYPE yyerror_range[3];



#define YYPOPSTACK(N)   (yyvsp -= (N), yyssp -= (N), yylsp -= (N))

  /* The number of symbols on the RHS of the reduced rule.
     Keep to zero when no symbol should be popped.  */
  int yylen = 0;

  YYDPRINTF ((stderr, "Starting parse\n"));

  yychar = YYEMPTY; /* Cause a token to be read.  */

  yylsp[0] = yylloc;
  goto yysetstate;


/*------------------------------------------------------------.
| yynewstate -- push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
yynewstate:
  /* In all cases, when you get here, the value and location stacks
     have just been pushed.  So pushing a state here evens the stacks.  */
  yyssp++;


/*--------------------------------------------------------------------.
| yysetstate -- set current state (the top of the stack) to yystate.  |
`--------------------------------------------------------------------*/
yysetstate:
  YYDPRINTF ((stderr, "Entering state %d\n", yystate));
  YY_ASSERT (0 <= yystate && yystate < YYNSTATES);
  YY_IGNORE_USELESS_CAST_BEGIN
  *yyssp = YY_CAST (yy_state_t, yystate);
  YY_IGNORE_USELESS_CAST_END
  YY_STACK_PRINT (yyss, yyssp);

  if (yyss + yystacksize - 1 <= yyssp)
#if !defined yyoverflow && !defined YYSTACK_RELOCATE
    YYNOMEM;
#else
    {
      /* Get the current used size of the three stacks, in elements.  */
      YYPTRDIFF_T yysize = yyssp - yyss + 1;

# if defined yyoverflow
      {
        /* Give user a chance to reallocate the stack.  Use copies of
           these so that the &'s don't force the real ones into
           memory.  */
        yy_state_t *yyss1 = yyss;
        YYSTYPE *yyvs1 = yyvs;
        YYLTYPE *yyls1 = yyls;

        /* Each stack pointer address is followed by the size of the
           data in use in that stack, in bytes.  This used to be a
           conditional around just the two extra args, but that might
           be undefined if yyoverflow is a macro.  */
        yyoverflow (YY_("memory exhausted"),
                    &yyss1, yysize * YYSIZEOF (*yyssp),
                    &yyvs1, yysize * YYSIZEOF (*yyvsp),
                    &yyls1, yysize * YYSIZEOF (*yylsp),
                    &yystacksize);
        yyss = yyss1;
        yyvs = yyvs1;
        yyls = yyls1;
      }
# else /* defined YYSTACK_RELOCATE */
      /* Extend the stack our own way.  */
      if (YYMAXDEPTH <= yystacksize)
        YYNOMEM;
      yystacksize *= 2;
      if (YYMAXDEPTH < yystacksize)
        yystacksize = YYMAXDEPTH;

      {
        yy_state_t *yyss1 = yyss;
        union yyalloc *yyptr =
          YY_CAST (union yyalloc *,
                   YYSTACK_ALLOC (YY_CAST (YYSIZE_T, YYSTACK_BYTES (yystacksize))));
        if (! yyptr)
          YYNOMEM;
        YYSTACK_RELOCATE (yyss_alloc, yyss);
        YYSTACK_RELOCATE (yyvs_alloc, yyvs);
        YYSTACK_RELOCATE (yyls_alloc, yyls);
#  undef YYSTACK_RELOCATE
        if (yyss1 != yyssa)
          YYSTACK_FREE (yyss1);
      }
# endif

      yyssp = yyss + yysize - 1;
      yyvsp = yyvs + yysize - 1;
      yylsp = yyls + yysize - 1;

      YY_IGNORE_USELESS_CAST_BEGIN
      YYDPRINTF ((stderr, "Stack size increased to %ld\n",
                  YY_CAST (long, yystacksize)));
      YY_IGNORE_USELESS_CAST_END

      if (yyss + yystacksize - 1 <= yyssp)
        YYABORT;
    }
#endif /* !defined yyoverflow && !defined YYSTACK_RELOCATE */


  if (yystate == YYFINAL)
    YYACCEPT;

  goto yybackup;


/*-----------.
| yybackup.  |
`-----------*/
yybackup:
  /* Do appropriate processing given the current state.  Read a
     lookahead token if we need one and don't already have one.  */

  /* First try to decide what to do without reference to lookahead token.  */
  yyn = yypact[yystate];
  if (yypact_value_is_default (yyn))
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* YYCHAR is either empty, or end-of-input, or a valid lookahead.  */
  if (yychar == YYEMPTY)
    {
      YYDPRINTF ((stderr, "Reading a token\n"));
      yychar = yylex (&yylval, &yylloc, yyscanner);
    }

  if (yychar <= YYEOF)
    {
      yychar = YYEOF;
      yytoken = YYSYMBOL_YYEOF;
      YYDPRINTF ((stderr, "Now at end of input.\n"));
    }
  else if (yychar == YYerror)
    {
      /* The scanner already issued an error message, process directly
         to error recovery.  But do not keep the error token as
         lookahead, it is too special and may lead us to an endless
         loop in error recovery. */
      yychar = YYUNDEF;
      yytoken = YYSYMBOL_YYerror;
      yyerror_range[1] = yylloc;
      goto yyerrlab1;
    }
  else
    {
      yytoken = YYTRANSLATE (yychar);
      YY_SYMBOL_PRINT ("Next token is", yytoken, &yylval, &yylloc);
    }

  /* If the proper action on seeing token YYTOKEN is to reduce or to
     detect an error, take that action.  */
  yyn += yytoken;
  if (yyn < 0 || YYLAST < yyn || yycheck[yyn] != yytoken)
    goto yydefault;
  yyn = yytable[yyn];
  if (yyn <= 0)
    {
      if (yytable_value_is_error (yyn))
        goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }

  /* Count tokens shifted since error; after three, turn off error
     status.  */
  if (yyerrstatus)
    yyerrstatus--;

  /* Shift the lookahead token.  */
  YY_SYMBOL_PRINT ("Shifting", yytoken, &yylval, &yylloc);
  yystate = yyn;
  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  *++yyvsp = yylval;
  YY_IGNORE_MAYBE_UNINITIALIZED_END
  *++yylsp = yylloc;

  /* Discard the shifted token.  */
  yychar = YYEMPTY;
  goto yynewstate;


/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
yydefault:
  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;
  goto yyreduce;


/*-----------------------------.
| yyreduce -- do a reduction.  |
`-----------------------------*/
yyreduce:
  /* yyn is the number of a rule to reduce with.  */
  yylen = yyr2[yyn];

  /* If YYLEN is nonzero, implement the default value of the action:
     '$$ = $1'.

     Otherwise, the following line sets YYVAL to garbage.
     This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */
  yyval = yyvsp[1-yylen];

  /* Default location. */
  YYLLOC_DEFAULT (yyloc, (yylsp - yylen), yylen);
  yyerror_range[1] = yyloc;
  YY_REDUCE_PRINT (yyn);
  switch (yyn)
    {
  case 2: /* stmtblock: stmtmulti  */
#line 552 "third_party/libpg_query/grammar/grammar.y"
                        {
				pg_yyget_extra(yyscanner)->parsetree = (yyvsp[0].list);
			}
#line 19973 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 3: /* stmtmulti: stmtmulti ';' stmt  */
#line 568 "third_party/libpg_query/grammar/grammar.y"
                                {
					if ((yyvsp[-2].list) != NIL)
					{
						/* update length of previous stmt */
						updateRawStmtEnd(llast_node(PGRawStmt, (yyvsp[-2].list)), (yylsp[-1]));
					}
					if ((yyvsp[0].node) != NULL)
						(yyval.list) = lappend((yyvsp[-2].list), makeRawStmt((yyvsp[0].node), (yylsp[-1]) + 1));
					else
						(yyval.list) = (yyvsp[-2].list);
				}
#line 19989 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 4: /* stmtmulti: stmt  */
#line 580 "third_party/libpg_query/grammar/grammar.y"
                                {
					if ((yyvsp[0].node) != NULL)
						(yyval.list) = list_make1(makeRawStmt((yyvsp[0].node), 0));
					else
						(yyval.list) = NIL;
				}
#line 20000 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 45: /* stmt: %empty  */
#line 629 "third_party/libpg_query/grammar/grammar.y"
        { (yyval.node) = NULL; }
#line 20006 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 46: /* AlterTableStmt: ALTER TABLE relation_expr alter_table_cmds  */
#line 10 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_TABLE;
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 20019 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 47: /* AlterTableStmt: ALTER TABLE IF_P EXISTS relation_expr alter_table_cmds  */
#line 19 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_TABLE;
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 20032 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 48: /* AlterTableStmt: ALTER INDEX qualified_name alter_table_cmds  */
#line 28 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_INDEX;
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 20045 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 49: /* AlterTableStmt: ALTER INDEX IF_P EXISTS qualified_name alter_table_cmds  */
#line 37 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_INDEX;
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 20058 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 50: /* AlterTableStmt: ALTER SEQUENCE qualified_name alter_table_cmds  */
#line 46 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_SEQUENCE;
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 20071 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 51: /* AlterTableStmt: ALTER SEQUENCE IF_P EXISTS qualified_name alter_table_cmds  */
#line 55 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_SEQUENCE;
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 20084 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 52: /* AlterTableStmt: ALTER VIEW qualified_name alter_table_cmds  */
#line 64 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_VIEW;
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 20097 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 53: /* AlterTableStmt: ALTER VIEW IF_P EXISTS qualified_name alter_table_cmds  */
#line 73 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_VIEW;
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 20110 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 54: /* alter_identity_column_option_list: alter_identity_column_option  */
#line 86 "third_party/libpg_query/grammar/statements/alter_table.y"
                                { (yyval.list) = list_make1((yyvsp[0].defelt)); }
#line 20116 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 55: /* alter_identity_column_option_list: alter_identity_column_option_list alter_identity_column_option  */
#line 88 "third_party/libpg_query/grammar/statements/alter_table.y"
                                { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].defelt)); }
#line 20122 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 56: /* alter_column_default: SET DEFAULT a_expr  */
#line 93 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                { (yyval.node) = (yyvsp[0].node); }
#line 20128 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 57: /* alter_column_default: DROP DEFAULT  */
#line 94 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                { (yyval.node) = NULL; }
#line 20134 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 58: /* alter_identity_column_option: RESTART  */
#line 100 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = makeDefElem("restart", NULL, (yylsp[0]));
				}
#line 20142 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 59: /* alter_identity_column_option: RESTART opt_with NumericOnly  */
#line 104 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = makeDefElem("restart", (PGNode *)(yyvsp[0].value), (yylsp[-2]));
				}
#line 20150 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 60: /* alter_identity_column_option: SET SeqOptElem  */
#line 108 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					if (strcmp((yyvsp[0].defelt)->defname, "as") == 0 ||
						strcmp((yyvsp[0].defelt)->defname, "restart") == 0 ||
						strcmp((yyvsp[0].defelt)->defname, "owned_by") == 0)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("sequence option \"%s\" not supported here", (yyvsp[0].defelt)->defname),
								 parser_errposition((yylsp[0]))));
					(yyval.defelt) = (yyvsp[0].defelt);
				}
#line 20165 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 61: /* alter_identity_column_option: SET GENERATED generated_when  */
#line 119 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = makeDefElem("generated", (PGNode *) makeInteger((yyvsp[0].ival)), (yylsp[-2]));
				}
#line 20173 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 62: /* alter_generic_option_list: alter_generic_option_elem  */
#line 127 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].defelt));
				}
#line 20181 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 63: /* alter_generic_option_list: alter_generic_option_list ',' alter_generic_option_elem  */
#line 131 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt));
				}
#line 20189 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 64: /* alter_table_cmd: ADD_P columnDef  */
#line 140 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AddColumn;
					n->def = (yyvsp[0].node);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 20201 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 65: /* alter_table_cmd: ADD_P IF_P NOT EXISTS columnDef  */
#line 149 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AddColumn;
					n->def = (yyvsp[0].node);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 20213 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 66: /* alter_table_cmd: ADD_P COLUMN columnDef  */
#line 158 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AddColumn;
					n->def = (yyvsp[0].node);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 20225 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 67: /* alter_table_cmd: ADD_P COLUMN IF_P NOT EXISTS columnDef  */
#line 167 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AddColumn;
					n->def = (yyvsp[0].node);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 20237 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 68: /* alter_table_cmd: ALTER opt_column ColId alter_column_default  */
#line 176 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_ColumnDefault;
					n->name = (yyvsp[-1].str);
					n->def = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 20249 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 69: /* alter_table_cmd: ALTER opt_column ColId DROP NOT NULL_P  */
#line 185 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_DropNotNull;
					n->name = (yyvsp[-3].str);
					(yyval.node) = (PGNode *)n;
				}
#line 20260 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 70: /* alter_table_cmd: ALTER opt_column ColId SET NOT NULL_P  */
#line 193 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetNotNull;
					n->name = (yyvsp[-3].str);
					(yyval.node) = (PGNode *)n;
				}
#line 20271 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 71: /* alter_table_cmd: ALTER opt_column ColId SET STATISTICS SignedIconst  */
#line 201 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetStatistics;
					n->name = (yyvsp[-3].str);
					n->def = (PGNode *) makeInteger((yyvsp[0].ival));
					(yyval.node) = (PGNode *)n;
				}
#line 20283 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 72: /* alter_table_cmd: ALTER opt_column ColId SET reloptions  */
#line 210 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetOptions;
					n->name = (yyvsp[-2].str);
					n->def = (PGNode *) (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 20295 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 73: /* alter_table_cmd: ALTER opt_column ColId RESET reloptions  */
#line 219 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_ResetOptions;
					n->name = (yyvsp[-2].str);
					n->def = (PGNode *) (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 20307 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 74: /* alter_table_cmd: ALTER opt_column ColId SET STORAGE ColId  */
#line 228 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetStorage;
					n->name = (yyvsp[-3].str);
					n->def = (PGNode *) makeString((yyvsp[0].str));
					(yyval.node) = (PGNode *)n;
				}
#line 20319 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 75: /* alter_table_cmd: ALTER opt_column ColId ADD_P GENERATED generated_when AS IDENTITY_P OptParenthesizedSeqOptList  */
#line 237 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					PGConstraint *c = makeNode(PGConstraint);

					c->contype = PG_CONSTR_IDENTITY;
					c->generated_when = (yyvsp[-3].ival);
					c->options = (yyvsp[0].list);
					c->location = (yylsp[-4]);

					n->subtype = PG_AT_AddIdentity;
					n->name = (yyvsp[-6].str);
					n->def = (PGNode *) c;

					(yyval.node) = (PGNode *)n;
				}
#line 20339 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 76: /* alter_table_cmd: ALTER opt_column ColId alter_identity_column_option_list  */
#line 254 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetIdentity;
					n->name = (yyvsp[-1].str);
					n->def = (PGNode *) (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 20351 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 77: /* alter_table_cmd: ALTER opt_column ColId DROP IDENTITY_P  */
#line 263 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = AT_DropIdentity;
					n->name = (yyvsp[-2].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 20363 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 78: /* alter_table_cmd: ALTER opt_column ColId DROP IDENTITY_P IF_P EXISTS  */
#line 272 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = AT_DropIdentity;
					n->name = (yyvsp[-4].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 20375 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 79: /* alter_table_cmd: DROP opt_column IF_P EXISTS ColId opt_drop_behavior  */
#line 281 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_DropColumn;
					n->name = (yyvsp[-1].str);
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 20388 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 80: /* alter_table_cmd: DROP opt_column ColId opt_drop_behavior  */
#line 291 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_DropColumn;
					n->name = (yyvsp[-1].str);
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 20401 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 81: /* alter_table_cmd: ALTER opt_column ColId opt_set_data TYPE_P Typename opt_collate_clause alter_using  */
#line 304 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					PGColumnDef *def = makeNode(PGColumnDef);
					n->subtype = PG_AT_AlterColumnType;
					n->name = (yyvsp[-5].str);
					n->def = (PGNode *) def;
					/* We only use these fields of the PGColumnDef node */
					def->typeName = (yyvsp[-2].typnam);
					def->collClause = (PGCollateClause *) (yyvsp[-1].node);
					def->raw_default = (yyvsp[0].node);
					def->location = (yylsp[-5]);
					(yyval.node) = (PGNode *)n;
				}
#line 20419 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 82: /* alter_table_cmd: ALTER opt_column ColId alter_generic_options  */
#line 319 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AlterColumnGenericOptions;
					n->name = (yyvsp[-1].str);
					n->def = (PGNode *) (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 20431 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 83: /* alter_table_cmd: ADD_P TableConstraint  */
#line 328 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AddConstraint;
					n->def = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 20442 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 84: /* alter_table_cmd: ALTER CONSTRAINT name ConstraintAttributeSpec  */
#line 336 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					PGConstraint *c = makeNode(PGConstraint);
					n->subtype = PG_AT_AlterConstraint;
					n->def = (PGNode *) c;
					c->contype = PG_CONSTR_FOREIGN; /* others not supported, yet */
					c->conname = (yyvsp[-1].str);
					processCASbits((yyvsp[0].ival), (yylsp[0]), "ALTER CONSTRAINT statement",
									&c->deferrable,
									&c->initdeferred,
									NULL, NULL, yyscanner);
					(yyval.node) = (PGNode *)n;
				}
#line 20460 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 85: /* alter_table_cmd: VALIDATE CONSTRAINT name  */
#line 351 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_ValidateConstraint;
					n->name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 20471 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 86: /* alter_table_cmd: DROP CONSTRAINT IF_P EXISTS name opt_drop_behavior  */
#line 359 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_DropConstraint;
					n->name = (yyvsp[-1].str);
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 20484 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 87: /* alter_table_cmd: DROP CONSTRAINT name opt_drop_behavior  */
#line 369 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_DropConstraint;
					n->name = (yyvsp[-1].str);
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 20497 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 88: /* alter_table_cmd: SET LOGGED  */
#line 379 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetLogged;
					(yyval.node) = (PGNode *)n;
				}
#line 20507 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 89: /* alter_table_cmd: SET UNLOGGED  */
#line 386 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetUnLogged;
					(yyval.node) = (PGNode *)n;
				}
#line 20517 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 90: /* alter_table_cmd: SET reloptions  */
#line 393 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetRelOptions;
					n->def = (PGNode *)(yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 20528 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 91: /* alter_table_cmd: RESET reloptions  */
#line 401 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_ResetRelOptions;
					n->def = (PGNode *)(yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 20539 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 92: /* alter_table_cmd: alter_generic_options  */
#line 408 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_GenericOptions;
					n->def = (PGNode *)(yyvsp[0].list);
					(yyval.node) = (PGNode *) n;
				}
#line 20550 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 93: /* alter_using: USING a_expr  */
#line 418 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                { (yyval.node) = (yyvsp[0].node); }
#line 20556 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 94: /* alter_using: %empty  */
#line 419 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                { (yyval.node) = NULL; }
#line 20562 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 95: /* alter_generic_option_elem: generic_option_elem  */
#line 425 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = (yyvsp[0].defelt);
				}
#line 20570 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 96: /* alter_generic_option_elem: SET generic_option_elem  */
#line 429 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = (yyvsp[0].defelt);
					(yyval.defelt)->defaction = PG_DEFELEM_SET;
				}
#line 20579 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 97: /* alter_generic_option_elem: ADD_P generic_option_elem  */
#line 434 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = (yyvsp[0].defelt);
					(yyval.defelt)->defaction = PG_DEFELEM_ADD;
				}
#line 20588 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 98: /* alter_generic_option_elem: DROP generic_option_name  */
#line 439 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = makeDefElemExtended(NULL, (yyvsp[0].str), NULL, DEFELEM_DROP, (yylsp[0]));
				}
#line 20596 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 99: /* alter_table_cmds: alter_table_cmd  */
#line 446 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 20602 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 100: /* alter_table_cmds: alter_table_cmds ',' alter_table_cmd  */
#line 447 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 20608 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 101: /* alter_generic_options: OPTIONS '(' alter_generic_option_list ')'  */
#line 452 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 20614 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 102: /* opt_set_data: SET DATA_P  */
#line 456 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                                { (yyval.ival) = 1; }
#line 20620 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 103: /* opt_set_data: SET  */
#line 457 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                                                { (yyval.ival) = 0; }
#line 20626 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 104: /* opt_set_data: %empty  */
#line 458 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                                                { (yyval.ival) = 0; }
#line 20632 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 105: /* DeallocateStmt: DEALLOCATE name  */
#line 8 "third_party/libpg_query/grammar/statements/deallocate.y"
                                        {
						PGDeallocateStmt *n = makeNode(PGDeallocateStmt);
						n->name = (yyvsp[0].str);
						(yyval.node) = (PGNode *) n;
					}
#line 20642 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 106: /* DeallocateStmt: DEALLOCATE PREPARE name  */
#line 14 "third_party/libpg_query/grammar/statements/deallocate.y"
                                        {
						PGDeallocateStmt *n = makeNode(PGDeallocateStmt);
						n->name = (yyvsp[0].str);
						(yyval.node) = (PGNode *) n;
					}
#line 20652 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 107: /* DeallocateStmt: DEALLOCATE ALL  */
#line 20 "third_party/libpg_query/grammar/statements/deallocate.y"
                                        {
						PGDeallocateStmt *n = makeNode(PGDeallocateStmt);
						n->name = NULL;
						(yyval.node) = (PGNode *) n;
					}
#line 20662 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 108: /* DeallocateStmt: DEALLOCATE PREPARE ALL  */
#line 26 "third_party/libpg_query/grammar/statements/deallocate.y"
                                        {
						PGDeallocateStmt *n = makeNode(PGDeallocateStmt);
						n->name = NULL;
						(yyval.node) = (PGNode *) n;
					}
#line 20672 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 109: /* qualified_name: ColIdOrString  */
#line 10 "third_party/libpg_query/grammar/statements/common.y"
                                {
					(yyval.range) = makeRangeVar(NULL, (yyvsp[0].str), (yylsp[0]));
				}
#line 20680 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 110: /* qualified_name: ColId indirection  */
#line 14 "third_party/libpg_query/grammar/statements/common.y"
                                {
					check_qualified_name((yyvsp[0].list), yyscanner);
					(yyval.range) = makeRangeVar(NULL, NULL, (yylsp[-1]));
					switch (list_length((yyvsp[0].list)))
					{
						case 1:
							(yyval.range)->catalogname = NULL;
							(yyval.range)->schemaname = (yyvsp[-1].str);
							(yyval.range)->relname = strVal(linitial((yyvsp[0].list)));
							break;
						case 2:
							(yyval.range)->catalogname = (yyvsp[-1].str);
							(yyval.range)->schemaname = strVal(linitial((yyvsp[0].list)));
							(yyval.range)->relname = strVal(lsecond((yyvsp[0].list)));
							break;
						case 3:
						default:
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("improper qualified name (too many dotted names): %s",
											NameListToString(lcons(makeString((yyvsp[-1].str)), (yyvsp[0].list)))),
									 parser_errposition((yylsp[-1]))));
							break;
					}
				}
#line 20710 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 111: /* ColId: IDENT  */
#line 44 "third_party/libpg_query/grammar/statements/common.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 20716 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 112: /* ColId: unreserved_keyword  */
#line 45 "third_party/libpg_query/grammar/statements/common.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 20722 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 113: /* ColId: col_name_keyword  */
#line 46 "third_party/libpg_query/grammar/statements/common.y"
                                                                                        { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 20728 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 114: /* ColId: pgq_unreserved_keyword  */
#line 47 "third_party/libpg_query/grammar/statements/common.y"
                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 20734 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 115: /* ColIdOrString: ColId  */
#line 51 "third_party/libpg_query/grammar/statements/common.y"
                                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 20740 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 116: /* ColIdOrString: SCONST  */
#line 52 "third_party/libpg_query/grammar/statements/common.y"
                                                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 20746 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 117: /* Sconst: SCONST  */
#line 56 "third_party/libpg_query/grammar/statements/common.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 20752 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 118: /* indirection: indirection_el  */
#line 60 "third_party/libpg_query/grammar/statements/common.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 20758 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 119: /* indirection: indirection indirection_el  */
#line 61 "third_party/libpg_query/grammar/statements/common.y"
                                                                        { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 20764 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 120: /* indirection_el: '.' attr_name  */
#line 66 "third_party/libpg_query/grammar/statements/common.y"
                                {
					(yyval.node) = (PGNode *) makeString((yyvsp[0].str));
				}
#line 20772 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 121: /* attr_name: ColLabel  */
#line 71 "third_party/libpg_query/grammar/statements/common.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 20778 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 122: /* ColLabel: IDENT  */
#line 76 "third_party/libpg_query/grammar/statements/common.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 20784 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 123: /* ColLabel: other_keyword  */
#line 77 "third_party/libpg_query/grammar/statements/common.y"
                                                                                        { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 20790 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 124: /* ColLabel: unreserved_keyword  */
#line 78 "third_party/libpg_query/grammar/statements/common.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 20796 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 125: /* ColLabel: reserved_keyword  */
#line 79 "third_party/libpg_query/grammar/statements/common.y"
                                                                                        { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 20802 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 126: /* ColLabel: pgq_unreserved_keyword  */
#line 80 "third_party/libpg_query/grammar/statements/common.y"
                                                    { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 20808 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 127: /* RenameStmt: ALTER SCHEMA name RENAME TO name  */
#line 7 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_SCHEMA;
					n->subname = (yyvsp[-3].str);
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 20821 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 128: /* RenameStmt: ALTER TABLE relation_expr RENAME TO name  */
#line 16 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 20835 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 129: /* RenameStmt: ALTER TABLE IF_P EXISTS relation_expr RENAME TO name  */
#line 26 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 20849 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 130: /* RenameStmt: ALTER SEQUENCE qualified_name RENAME TO name  */
#line 36 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_SEQUENCE;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 20863 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 131: /* RenameStmt: ALTER SEQUENCE IF_P EXISTS qualified_name RENAME TO name  */
#line 46 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_SEQUENCE;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 20877 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 132: /* RenameStmt: ALTER VIEW qualified_name RENAME TO name  */
#line 56 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_VIEW;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 20891 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 133: /* RenameStmt: ALTER VIEW IF_P EXISTS qualified_name RENAME TO name  */
#line 66 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_VIEW;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 20905 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 134: /* RenameStmt: ALTER INDEX qualified_name RENAME TO name  */
#line 76 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_INDEX;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 20919 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 135: /* RenameStmt: ALTER INDEX IF_P EXISTS qualified_name RENAME TO name  */
#line 86 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_INDEX;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 20933 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 136: /* RenameStmt: ALTER TABLE relation_expr RENAME opt_column name TO name  */
#line 96 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_COLUMN;
					n->relationType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-5].range);
					n->subname = (yyvsp[-2].str);
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 20948 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 137: /* RenameStmt: ALTER TABLE IF_P EXISTS relation_expr RENAME opt_column name TO name  */
#line 107 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_COLUMN;
					n->relationType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-5].range);
					n->subname = (yyvsp[-2].str);
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 20963 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 138: /* RenameStmt: ALTER TABLE relation_expr RENAME CONSTRAINT name TO name  */
#line 118 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_TABCONSTRAINT;
					n->relation = (yyvsp[-5].range);
					n->subname = (yyvsp[-2].str);
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 20977 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 139: /* RenameStmt: ALTER TABLE IF_P EXISTS relation_expr RENAME CONSTRAINT name TO name  */
#line 128 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_TABCONSTRAINT;
					n->relation = (yyvsp[-5].range);
					n->subname = (yyvsp[-2].str);
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 20991 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 140: /* opt_column: COLUMN  */
#line 140 "third_party/libpg_query/grammar/statements/rename.y"
                                                                                        { (yyval.ival) = COLUMN; }
#line 20997 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 141: /* opt_column: %empty  */
#line 141 "third_party/libpg_query/grammar/statements/rename.y"
                                                                                                { (yyval.ival) = 0; }
#line 21003 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 142: /* InsertStmt: opt_with_clause INSERT opt_or_action INTO insert_target opt_by_name_or_position insert_rest opt_on_conflict returning_clause  */
#line 11 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyvsp[-2].istmt)->relation = (yyvsp[-4].range);
					(yyvsp[-2].istmt)->onConflictAlias = (yyvsp[-6].onconflictshorthand);
					(yyvsp[-2].istmt)->onConflictClause = (yyvsp[-1].onconflict);
					(yyvsp[-2].istmt)->returningList = (yyvsp[0].list);
					(yyvsp[-2].istmt)->withClause = (yyvsp[-8].with);
					(yyvsp[-2].istmt)->insert_column_order = (yyvsp[-3].bynameorposition);
					(yyval.node) = (PGNode *) (yyvsp[-2].istmt);
				}
#line 21017 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 143: /* insert_rest: SelectStmt  */
#line 24 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.istmt) = makeNode(PGInsertStmt);
					(yyval.istmt)->cols = NIL;
					(yyval.istmt)->selectStmt = (yyvsp[0].node);
				}
#line 21027 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 144: /* insert_rest: OVERRIDING override_kind VALUE_P SelectStmt  */
#line 30 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.istmt) = makeNode(PGInsertStmt);
					(yyval.istmt)->cols = NIL;
					(yyval.istmt)->override = (yyvsp[-2].override);
					(yyval.istmt)->selectStmt = (yyvsp[0].node);
				}
#line 21038 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 145: /* insert_rest: '(' insert_column_list ')' SelectStmt  */
#line 37 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.istmt) = makeNode(PGInsertStmt);
					(yyval.istmt)->cols = (yyvsp[-2].list);
					(yyval.istmt)->selectStmt = (yyvsp[0].node);
				}
#line 21048 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 146: /* insert_rest: '(' insert_column_list ')' OVERRIDING override_kind VALUE_P SelectStmt  */
#line 43 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.istmt) = makeNode(PGInsertStmt);
					(yyval.istmt)->cols = (yyvsp[-5].list);
					(yyval.istmt)->override = (yyvsp[-2].override);
					(yyval.istmt)->selectStmt = (yyvsp[0].node);
				}
#line 21059 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 147: /* insert_rest: DEFAULT VALUES  */
#line 50 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.istmt) = makeNode(PGInsertStmt);
					(yyval.istmt)->cols = NIL;
					(yyval.istmt)->selectStmt = NULL;
				}
#line 21069 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 148: /* insert_target: qualified_name  */
#line 60 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.range) = (yyvsp[0].range);
				}
#line 21077 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 149: /* insert_target: qualified_name AS ColId  */
#line 64 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyvsp[-2].range)->alias = makeAlias((yyvsp[0].str), NIL);
					(yyval.range) = (yyvsp[-2].range);
				}
#line 21086 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 150: /* opt_by_name_or_position: BY NAME_P  */
#line 71 "third_party/libpg_query/grammar/statements/insert.y"
                                                        { (yyval.bynameorposition) = PG_INSERT_BY_NAME; }
#line 21092 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 151: /* opt_by_name_or_position: BY POSITION  */
#line 72 "third_party/libpg_query/grammar/statements/insert.y"
                                                { (yyval.bynameorposition) = PG_INSERT_BY_POSITION; }
#line 21098 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 152: /* opt_by_name_or_position: %empty  */
#line 73 "third_party/libpg_query/grammar/statements/insert.y"
                                                { (yyval.bynameorposition) = PG_INSERT_BY_POSITION; }
#line 21104 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 153: /* opt_conf_expr: '(' index_params ')' where_clause  */
#line 78 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.infer) = makeNode(PGInferClause);
					(yyval.infer)->indexElems = (yyvsp[-2].list);
					(yyval.infer)->whereClause = (yyvsp[0].node);
					(yyval.infer)->conname = NULL;
					(yyval.infer)->location = (yylsp[-3]);
				}
#line 21116 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 154: /* opt_conf_expr: ON CONSTRAINT name  */
#line 87 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.infer) = makeNode(PGInferClause);
					(yyval.infer)->indexElems = NIL;
					(yyval.infer)->whereClause = NULL;
					(yyval.infer)->conname = (yyvsp[0].str);
					(yyval.infer)->location = (yylsp[-2]);
				}
#line 21128 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 155: /* opt_conf_expr: %empty  */
#line 95 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.infer) = NULL;
				}
#line 21136 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 156: /* opt_with_clause: with_clause  */
#line 102 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                        { (yyval.with) = (yyvsp[0].with); }
#line 21142 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 157: /* opt_with_clause: %empty  */
#line 103 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                        { (yyval.with) = NULL; }
#line 21148 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 158: /* insert_column_item: ColId opt_indirection  */
#line 109 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = (yyvsp[-1].str);
					(yyval.target)->indirection = check_indirection((yyvsp[0].list), yyscanner);
					(yyval.target)->val = NULL;
					(yyval.target)->location = (yylsp[-1]);
				}
#line 21160 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 159: /* set_clause: set_target '=' a_expr  */
#line 121 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyvsp[-2].target)->val = (PGNode *) (yyvsp[0].node);
					(yyval.list) = list_make1((yyvsp[-2].target));
				}
#line 21169 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 160: /* set_clause: '(' set_target_list ')' '=' a_expr  */
#line 126 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					int ncolumns = list_length((yyvsp[-3].list));
					int i = 1;
					PGListCell *col_cell;

					/* Create a PGMultiAssignRef source for each target */
					foreach(col_cell, (yyvsp[-3].list))
					{
						PGResTarget *res_col = (PGResTarget *) lfirst(col_cell);
						PGMultiAssignRef *r = makeNode(PGMultiAssignRef);

						r->source = (PGNode *) (yyvsp[0].node);
						r->colno = i;
						r->ncolumns = ncolumns;
						res_col->val = (PGNode *) r;
						i++;
					}

					(yyval.list) = (yyvsp[-3].list);
				}
#line 21194 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 161: /* opt_or_action: OR REPLACE  */
#line 151 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.onconflictshorthand) = PG_ONCONFLICT_ALIAS_REPLACE;
				}
#line 21202 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 162: /* opt_or_action: OR IGNORE_P  */
#line 156 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.onconflictshorthand) = PG_ONCONFLICT_ALIAS_IGNORE;
				}
#line 21210 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 163: /* opt_or_action: %empty  */
#line 160 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.onconflictshorthand) = PG_ONCONFLICT_ALIAS_NONE;
				}
#line 21218 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 164: /* opt_on_conflict: ON CONFLICT opt_conf_expr DO UPDATE SET set_clause_list_opt_comma where_clause  */
#line 167 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.onconflict) = makeNode(PGOnConflictClause);
					(yyval.onconflict)->action = PG_ONCONFLICT_UPDATE;
					(yyval.onconflict)->infer = (yyvsp[-5].infer);
					(yyval.onconflict)->targetList = (yyvsp[-1].list);
					(yyval.onconflict)->whereClause = (yyvsp[0].node);
					(yyval.onconflict)->location = (yylsp[-7]);
				}
#line 21231 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 165: /* opt_on_conflict: ON CONFLICT opt_conf_expr DO NOTHING  */
#line 177 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.onconflict) = makeNode(PGOnConflictClause);
					(yyval.onconflict)->action = PG_ONCONFLICT_NOTHING;
					(yyval.onconflict)->infer = (yyvsp[-2].infer);
					(yyval.onconflict)->targetList = NIL;
					(yyval.onconflict)->whereClause = NULL;
					(yyval.onconflict)->location = (yylsp[-4]);
				}
#line 21244 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 166: /* opt_on_conflict: %empty  */
#line 186 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.onconflict) = NULL;
				}
#line 21252 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 167: /* index_elem: ColId opt_collate opt_class opt_asc_desc opt_nulls_order  */
#line 193 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.ielem) = makeNode(PGIndexElem);
					(yyval.ielem)->name = (yyvsp[-4].str);
					(yyval.ielem)->expr = NULL;
					(yyval.ielem)->indexcolname = NULL;
					(yyval.ielem)->collation = (yyvsp[-3].list);
					(yyval.ielem)->opclass = (yyvsp[-2].list);
					(yyval.ielem)->ordering = (yyvsp[-1].sortorder);
					(yyval.ielem)->nulls_ordering = (yyvsp[0].nullorder);
				}
#line 21267 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 168: /* index_elem: func_expr_windowless opt_collate opt_class opt_asc_desc opt_nulls_order  */
#line 204 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.ielem) = makeNode(PGIndexElem);
					(yyval.ielem)->name = NULL;
					(yyval.ielem)->expr = (yyvsp[-4].node);
					(yyval.ielem)->indexcolname = NULL;
					(yyval.ielem)->collation = (yyvsp[-3].list);
					(yyval.ielem)->opclass = (yyvsp[-2].list);
					(yyval.ielem)->ordering = (yyvsp[-1].sortorder);
					(yyval.ielem)->nulls_ordering = (yyvsp[0].nullorder);
				}
#line 21282 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 169: /* index_elem: '(' a_expr ')' opt_collate opt_class opt_asc_desc opt_nulls_order  */
#line 215 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.ielem) = makeNode(PGIndexElem);
					(yyval.ielem)->name = NULL;
					(yyval.ielem)->expr = (yyvsp[-5].node);
					(yyval.ielem)->indexcolname = NULL;
					(yyval.ielem)->collation = (yyvsp[-3].list);
					(yyval.ielem)->opclass = (yyvsp[-2].list);
					(yyval.ielem)->ordering = (yyvsp[-1].sortorder);
					(yyval.ielem)->nulls_ordering = (yyvsp[0].nullorder);
				}
#line 21297 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 170: /* returning_clause: RETURNING target_list  */
#line 229 "third_party/libpg_query/grammar/statements/insert.y"
                                                        { (yyval.list) = (yyvsp[0].list); }
#line 21303 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 171: /* returning_clause: %empty  */
#line 230 "third_party/libpg_query/grammar/statements/insert.y"
                                                                { (yyval.list) = NIL; }
#line 21309 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 172: /* override_kind: USER  */
#line 236 "third_party/libpg_query/grammar/statements/insert.y"
                                        { (yyval.override) = PG_OVERRIDING_USER_VALUE; }
#line 21315 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 173: /* override_kind: SYSTEM_P  */
#line 237 "third_party/libpg_query/grammar/statements/insert.y"
                                        { (yyval.override) = OVERRIDING_SYSTEM_VALUE; }
#line 21321 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 174: /* set_target_list: set_target  */
#line 242 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].target)); }
#line 21327 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 175: /* set_target_list: set_target_list ',' set_target  */
#line 243 "third_party/libpg_query/grammar/statements/insert.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list),(yyvsp[0].target)); }
#line 21333 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 176: /* opt_collate: COLLATE any_name  */
#line 249 "third_party/libpg_query/grammar/statements/insert.y"
                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 21339 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 177: /* opt_collate: %empty  */
#line 250 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                                { (yyval.list) = NIL; }
#line 21345 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 178: /* opt_class: any_name  */
#line 254 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 21351 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 179: /* opt_class: %empty  */
#line 255 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                                { (yyval.list) = NIL; }
#line 21357 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 180: /* insert_column_list: insert_column_item  */
#line 261 "third_party/libpg_query/grammar/statements/insert.y"
                                        { (yyval.list) = list_make1((yyvsp[0].target)); }
#line 21363 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 181: /* insert_column_list: insert_column_list ',' insert_column_item  */
#line 263 "third_party/libpg_query/grammar/statements/insert.y"
                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].target)); }
#line 21369 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 182: /* set_clause_list: set_clause  */
#line 268 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 21375 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 183: /* set_clause_list: set_clause_list ',' set_clause  */
#line 269 "third_party/libpg_query/grammar/statements/insert.y"
                                                                { (yyval.list) = list_concat((yyvsp[-2].list),(yyvsp[0].list)); }
#line 21381 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 184: /* set_clause_list_opt_comma: set_clause_list  */
#line 273 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 21387 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 185: /* set_clause_list_opt_comma: set_clause_list ','  */
#line 274 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 21393 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 186: /* index_params: index_elem  */
#line 277 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                { (yyval.list) = list_make1((yyvsp[0].ielem)); }
#line 21399 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 187: /* index_params: index_params ',' index_elem  */
#line 278 "third_party/libpg_query/grammar/statements/insert.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].ielem)); }
#line 21405 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 188: /* set_target: ColId opt_indirection  */
#line 284 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = (yyvsp[-1].str);
					(yyval.target)->indirection = check_indirection((yyvsp[0].list), yyscanner);
					(yyval.target)->val = NULL;	/* upper production sets this */
					(yyval.target)->location = (yylsp[-1]);
				}
#line 21417 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 189: /* CreateTypeStmt: CREATE_P TYPE_P qualified_name AS ENUM_P select_with_parens  */
#line 8 "third_party/libpg_query/grammar/statements/create_type.y"
                                {
					PGCreateTypeStmt *n = makeNode(PGCreateTypeStmt);
					n->typeName = (yyvsp[-3].range);
					n->kind = PG_NEWTYPE_ENUM;
					n->query = (yyvsp[0].node);
					n->vals = NULL;
					(yyval.node) = (PGNode *)n;
				}
#line 21430 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 190: /* CreateTypeStmt: CREATE_P TYPE_P qualified_name AS ENUM_P '(' opt_enum_val_list ')'  */
#line 17 "third_party/libpg_query/grammar/statements/create_type.y"
                                {
					PGCreateTypeStmt *n = makeNode(PGCreateTypeStmt);
					n->typeName = (yyvsp[-5].range);
					n->kind = PG_NEWTYPE_ENUM;
					n->vals = (yyvsp[-1].list);
					n->query = NULL;
					(yyval.node) = (PGNode *)n;
				}
#line 21443 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 191: /* CreateTypeStmt: CREATE_P TYPE_P qualified_name AS Typename  */
#line 26 "third_party/libpg_query/grammar/statements/create_type.y"
                                {
					PGCreateTypeStmt *n = makeNode(PGCreateTypeStmt);
					n->typeName = (yyvsp[-2].range);
					n->query = NULL;
					auto name = std::string(reinterpret_cast<PGValue *>((yyvsp[0].typnam)->names->tail->data.ptr_value)->val.str);
					if (name == "enum") {
						n->kind = PG_NEWTYPE_ENUM;
						n->vals = (yyvsp[0].typnam)->typmods;
					} else {
						n->kind = PG_NEWTYPE_ALIAS;
						n->ofType = (yyvsp[0].typnam);
					}
					(yyval.node) = (PGNode *)n;
				}
#line 21462 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 192: /* opt_enum_val_list: enum_val_list  */
#line 46 "third_party/libpg_query/grammar/statements/create_type.y"
                                      { (yyval.list) = (yyvsp[0].list);}
#line 21468 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 193: /* opt_enum_val_list: %empty  */
#line 47 "third_party/libpg_query/grammar/statements/create_type.y"
                                                        {(yyval.list) = NIL;}
#line 21474 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 194: /* enum_val_list: Sconst  */
#line 51 "third_party/libpg_query/grammar/statements/create_type.y"
                                {
					(yyval.list) = list_make1(makeStringConst((yyvsp[0].str), (yylsp[0])));
				}
#line 21482 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 195: /* enum_val_list: enum_val_list ',' Sconst  */
#line 55 "third_party/libpg_query/grammar/statements/create_type.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), makeStringConst((yyvsp[0].str), (yylsp[0])));
				}
#line 21490 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 196: /* PragmaStmt: PRAGMA_P ColId  */
#line 8 "third_party/libpg_query/grammar/statements/pragma.y"
                                {
					PGPragmaStmt *n = makeNode(PGPragmaStmt);
					n->kind = PG_PRAGMA_TYPE_NOTHING;
					n->name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 21501 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 197: /* PragmaStmt: PRAGMA_P ColId '=' var_list  */
#line 15 "third_party/libpg_query/grammar/statements/pragma.y"
                                {
					PGPragmaStmt *n = makeNode(PGPragmaStmt);
					n->kind = PG_PRAGMA_TYPE_ASSIGNMENT;
					n->name = (yyvsp[-2].str);
					n->args = (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 21513 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 198: /* PragmaStmt: PRAGMA_P ColId '(' func_arg_list ')'  */
#line 23 "third_party/libpg_query/grammar/statements/pragma.y"
                                {
					PGPragmaStmt *n = makeNode(PGPragmaStmt);
					n->kind = PG_PRAGMA_TYPE_CALL;
					n->name = (yyvsp[-3].str);
					n->args = (yyvsp[-1].list);
					(yyval.node) = (PGNode *)n;
				}
#line 21525 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 199: /* CreateSeqStmt: CREATE_P OptTemp SEQUENCE qualified_name OptSeqOptList  */
#line 10 "third_party/libpg_query/grammar/statements/create_sequence.y"
                                {
					PGCreateSeqStmt *n = makeNode(PGCreateSeqStmt);
					(yyvsp[-1].range)->relpersistence = (yyvsp[-3].ival);
					n->sequence = (yyvsp[-1].range);
					n->options = (yyvsp[0].list);
					n->ownerId = InvalidOid;
					n->onconflict = PG_ERROR_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 21539 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 200: /* CreateSeqStmt: CREATE_P OptTemp SEQUENCE IF_P NOT EXISTS qualified_name OptSeqOptList  */
#line 20 "third_party/libpg_query/grammar/statements/create_sequence.y"
                                {
					PGCreateSeqStmt *n = makeNode(PGCreateSeqStmt);
					(yyvsp[-1].range)->relpersistence = (yyvsp[-6].ival);
					n->sequence = (yyvsp[-1].range);
					n->options = (yyvsp[0].list);
					n->ownerId = InvalidOid;
					n->onconflict = PG_IGNORE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 21553 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 201: /* CreateSeqStmt: CREATE_P OR REPLACE OptTemp SEQUENCE qualified_name OptSeqOptList  */
#line 30 "third_party/libpg_query/grammar/statements/create_sequence.y"
                                {
					PGCreateSeqStmt *n = makeNode(PGCreateSeqStmt);
					(yyvsp[-1].range)->relpersistence = (yyvsp[-3].ival);
					n->sequence = (yyvsp[-1].range);
					n->options = (yyvsp[0].list);
					n->ownerId = InvalidOid;
					n->onconflict = PG_REPLACE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 21567 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 202: /* OptSeqOptList: SeqOptList  */
#line 42 "third_party/libpg_query/grammar/statements/create_sequence.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 21573 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 203: /* OptSeqOptList: %empty  */
#line 43 "third_party/libpg_query/grammar/statements/create_sequence.y"
                                                                                                { (yyval.list) = NIL; }
#line 21579 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 204: /* ExecuteStmt: EXECUTE name execute_param_clause  */
#line 8 "third_party/libpg_query/grammar/statements/execute.y"
                                {
					PGExecuteStmt *n = makeNode(PGExecuteStmt);
					n->name = (yyvsp[-1].str);
					n->params = (yyvsp[0].list);
					(yyval.node) = (PGNode *) n;
				}
#line 21590 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 205: /* ExecuteStmt: CREATE_P OptTemp TABLE create_as_target AS EXECUTE name execute_param_clause opt_with_data  */
#line 16 "third_party/libpg_query/grammar/statements/execute.y"
                                {
					PGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);
					PGExecuteStmt *n = makeNode(PGExecuteStmt);
					n->name = (yyvsp[-2].str);
					n->params = (yyvsp[-1].list);
					ctas->query = (PGNode *) n;
					ctas->into = (yyvsp[-5].into);
					ctas->relkind = PG_OBJECT_TABLE;
					ctas->is_select_into = false;
					ctas->onconflict = PG_ERROR_ON_CONFLICT;
					/* cram additional flags into the PGIntoClause */
					(yyvsp[-5].into)->rel->relpersistence = (yyvsp[-7].ival);
					(yyvsp[-5].into)->skipData = !((yyvsp[0].boolean));
					(yyval.node) = (PGNode *) ctas;
				}
#line 21610 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 206: /* ExecuteStmt: CREATE_P OptTemp TABLE IF_P NOT EXISTS create_as_target AS EXECUTE name execute_param_clause opt_with_data  */
#line 33 "third_party/libpg_query/grammar/statements/execute.y"
                                {
					PGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);
					PGExecuteStmt *n = makeNode(PGExecuteStmt);
					n->name = (yyvsp[-2].str);
					n->params = (yyvsp[-1].list);
					ctas->query = (PGNode *) n;
					ctas->into = (yyvsp[-5].into);
					ctas->relkind = PG_OBJECT_TABLE;
					ctas->is_select_into = false;
					ctas->onconflict = PG_IGNORE_ON_CONFLICT;
					/* cram additional flags into the PGIntoClause */
					(yyvsp[-5].into)->rel->relpersistence = (yyvsp[-10].ival);
					(yyvsp[-5].into)->skipData = !((yyvsp[0].boolean));
					(yyval.node) = (PGNode *) ctas;
				}
#line 21630 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 207: /* execute_param_expr: a_expr  */
#line 52 "third_party/libpg_query/grammar/statements/execute.y"
                                {
					(yyval.node) = (yyvsp[0].node);
				}
#line 21638 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 208: /* execute_param_expr: param_name COLON_EQUALS a_expr  */
#line 56 "third_party/libpg_query/grammar/statements/execute.y"
                                {
					PGNamedArgExpr *na = makeNode(PGNamedArgExpr);
					na->name = (yyvsp[-2].str);
					na->arg = (PGExpr *) (yyvsp[0].node);
					na->argnumber = -1;		/* until determined */
					na->location = (yylsp[-2]);
					(yyval.node) = (PGNode *) na;
				}
#line 21651 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 209: /* execute_param_list: execute_param_expr  */
#line 66 "third_party/libpg_query/grammar/statements/execute.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 21659 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 210: /* execute_param_list: execute_param_list ',' execute_param_expr  */
#line 70 "third_party/libpg_query/grammar/statements/execute.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 21667 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 211: /* execute_param_clause: '(' execute_param_list ')'  */
#line 75 "third_party/libpg_query/grammar/statements/execute.y"
                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 21673 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 212: /* execute_param_clause: %empty  */
#line 76 "third_party/libpg_query/grammar/statements/execute.y"
                                                                                        { (yyval.list) = NIL; }
#line 21679 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 213: /* AlterSeqStmt: ALTER SEQUENCE qualified_name SeqOptList  */
#line 10 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					PGAlterSeqStmt *n = makeNode(PGAlterSeqStmt);
					n->sequence = (yyvsp[-1].range);
					n->options = (yyvsp[0].list);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 21691 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 214: /* AlterSeqStmt: ALTER SEQUENCE IF_P EXISTS qualified_name SeqOptList  */
#line 18 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					PGAlterSeqStmt *n = makeNode(PGAlterSeqStmt);
					n->sequence = (yyvsp[-1].range);
					n->options = (yyvsp[0].list);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 21703 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 215: /* SeqOptList: SeqOptElem  */
#line 29 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                { (yyval.list) = list_make1((yyvsp[0].defelt)); }
#line 21709 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 216: /* SeqOptList: SeqOptList SeqOptElem  */
#line 30 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].defelt)); }
#line 21715 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 217: /* opt_with: WITH  */
#line 34 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                        {}
#line 21721 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 218: /* opt_with: WITH_LA  */
#line 35 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                                {}
#line 21727 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 219: /* opt_with: %empty  */
#line 36 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                                {}
#line 21733 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 220: /* NumericOnly: FCONST  */
#line 41 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                        { (yyval.value) = makeFloat((yyvsp[0].str)); }
#line 21739 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 221: /* NumericOnly: '+' FCONST  */
#line 42 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                { (yyval.value) = makeFloat((yyvsp[0].str)); }
#line 21745 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 222: /* NumericOnly: '-' FCONST  */
#line 44 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.value) = makeFloat((yyvsp[0].str));
					doNegateFloat((yyval.value));
				}
#line 21754 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 223: /* NumericOnly: SignedIconst  */
#line 48 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                { (yyval.value) = makeInteger((yyvsp[0].ival)); }
#line 21760 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 224: /* SeqOptElem: AS SimpleTypename  */
#line 53 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("as", (PGNode *)(yyvsp[0].typnam), (yylsp[-1]));
				}
#line 21768 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 225: /* SeqOptElem: CACHE NumericOnly  */
#line 57 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("cache", (PGNode *)(yyvsp[0].value), (yylsp[-1]));
				}
#line 21776 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 226: /* SeqOptElem: CYCLE  */
#line 61 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("cycle", (PGNode *)makeInteger(true), (yylsp[0]));
				}
#line 21784 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 227: /* SeqOptElem: NO CYCLE  */
#line 65 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("cycle", (PGNode *)makeInteger(false), (yylsp[-1]));
				}
#line 21792 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 228: /* SeqOptElem: INCREMENT opt_by NumericOnly  */
#line 69 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("increment", (PGNode *)(yyvsp[0].value), (yylsp[-2]));
				}
#line 21800 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 229: /* SeqOptElem: MAXVALUE NumericOnly  */
#line 73 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("maxvalue", (PGNode *)(yyvsp[0].value), (yylsp[-1]));
				}
#line 21808 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 230: /* SeqOptElem: MINVALUE NumericOnly  */
#line 77 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("minvalue", (PGNode *)(yyvsp[0].value), (yylsp[-1]));
				}
#line 21816 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 231: /* SeqOptElem: NO MAXVALUE  */
#line 81 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("maxvalue", NULL, (yylsp[-1]));
				}
#line 21824 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 232: /* SeqOptElem: NO MINVALUE  */
#line 85 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("minvalue", NULL, (yylsp[-1]));
				}
#line 21832 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 233: /* SeqOptElem: OWNED BY any_name  */
#line 89 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("owned_by", (PGNode *)(yyvsp[0].list), (yylsp[-2]));
				}
#line 21840 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 234: /* SeqOptElem: SEQUENCE NAME_P any_name  */
#line 93 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					/* not documented, only used by pg_dump */
					(yyval.defelt) = makeDefElem("sequence_name", (PGNode *)(yyvsp[0].list), (yylsp[-2]));
				}
#line 21849 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 235: /* SeqOptElem: START opt_with NumericOnly  */
#line 98 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("start", (PGNode *)(yyvsp[0].value), (yylsp[-2]));
				}
#line 21857 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 236: /* SeqOptElem: RESTART  */
#line 102 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("restart", NULL, (yylsp[0]));
				}
#line 21865 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 237: /* SeqOptElem: RESTART opt_with NumericOnly  */
#line 106 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("restart", (PGNode *)(yyvsp[0].value), (yylsp[-2]));
				}
#line 21873 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 238: /* opt_by: BY  */
#line 112 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                {}
#line 21879 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 239: /* opt_by: %empty  */
#line 113 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                        {}
#line 21885 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 240: /* SignedIconst: Iconst  */
#line 117 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                { (yyval.ival) = (yyvsp[0].ival); }
#line 21891 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 241: /* SignedIconst: '+' Iconst  */
#line 118 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                        { (yyval.ival) = + (yyvsp[0].ival); }
#line 21897 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 242: /* SignedIconst: '-' Iconst  */
#line 119 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                        { (yyval.ival) = - (yyvsp[0].ival); }
#line 21903 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 243: /* TransactionStmt: ABORT_P opt_transaction  */
#line 3 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_ROLLBACK;
					n->options = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 21914 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 244: /* TransactionStmt: BEGIN_P opt_transaction  */
#line 10 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_BEGIN;
					(yyval.node) = (PGNode *)n;
				}
#line 21924 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 245: /* TransactionStmt: START opt_transaction  */
#line 16 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_START;
					(yyval.node) = (PGNode *)n;
				}
#line 21934 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 246: /* TransactionStmt: COMMIT opt_transaction  */
#line 22 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_COMMIT;
					n->options = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 21945 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 247: /* TransactionStmt: END_P opt_transaction  */
#line 29 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_COMMIT;
					n->options = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 21956 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 248: /* TransactionStmt: ROLLBACK opt_transaction  */
#line 36 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_ROLLBACK;
					n->options = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 21967 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 249: /* opt_transaction: WORK  */
#line 45 "third_party/libpg_query/grammar/statements/transaction.y"
                                                                                {}
#line 21973 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 250: /* opt_transaction: TRANSACTION  */
#line 46 "third_party/libpg_query/grammar/statements/transaction.y"
                                                                                        {}
#line 21979 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 251: /* opt_transaction: %empty  */
#line 47 "third_party/libpg_query/grammar/statements/transaction.y"
                                                                                                {}
#line 21985 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 252: /* UseStmt: USE_P qualified_name  */
#line 3 "third_party/libpg_query/grammar/statements/use.y"
                                {
					PGUseStmt *n = makeNode(PGUseStmt);
					n->name = (yyvsp[0].range);
					(yyval.node) = (PGNode *) n;
				}
#line 21995 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 253: /* PGQ_IDENT: IDENT  */
#line 40 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 22001 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 254: /* PGQ_IDENT: unreserved_keyword  */
#line 41 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 22007 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 255: /* PGQ_IDENT: pgq_col_name_keyword  */
#line 42 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                                        { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 22013 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 256: /* DropPropertyGraphStmt: DROP PROPERTY GRAPH qualified_name opt_drop_behavior  */
#line 51 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGDropPropertyGraphStmt *n = makeNode(PGDropPropertyGraphStmt);
				n->name = (yyvsp[-1].range);
				n->behavior = (yyvsp[0].dbehavior);
				(yyval.node) = (PGNode *)n;
			}
#line 22024 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 261: /* CreatePropertyGraphStmt: CREATE_P PROPERTY GRAPH qualified_name VertexOrNode TABLES '(' VertexTableDefinition VertexTableDefinitionList ')' EdgeOrRelationship TABLES '(' EdgeTableDefinition EdgeTableDefinitionList ')'  */
#line 79 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGCreatePropertyGraphStmt *n = makeNode(PGCreatePropertyGraphStmt);
				n->name = (yyvsp[-12].range);
				n->vertex_tables = (yyvsp[-7].list)?lappend((yyvsp[-7].list),(yyvsp[-8].node)):list_make1((yyvsp[-8].node));
				n->edge_tables = (yyvsp[-1].list)?lappend((yyvsp[-1].list),(yyvsp[-2].node)):list_make1((yyvsp[-2].node));
				(yyval.node) = (PGNode *)n;
			}
#line 22036 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 262: /* VertexTableDefinitionList: ',' VertexTableDefinition VertexTableDefinitionList  */
#line 90 "third_party/libpg_query/grammar/statements/pgq.y"
                                                { (yyval.list) = (yyvsp[0].list)?lappend((yyvsp[0].list),(yyvsp[-1].node)):list_make1((yyvsp[-1].node)); }
#line 22042 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 263: /* VertexTableDefinitionList: %empty  */
#line 92 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.list) = NULL; }
#line 22048 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 264: /* KeySpecification: '(' name_list ')'  */
#line 96 "third_party/libpg_query/grammar/statements/pgq.y"
                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 22054 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 265: /* KeyDefinition: KEY KeySpecification  */
#line 100 "third_party/libpg_query/grammar/statements/pgq.y"
                                                { (yyval.list) = (yyvsp[0].list); }
#line 22060 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 266: /* KeyReference: KeyDefinition REFERENCES  */
#line 104 "third_party/libpg_query/grammar/statements/pgq.y"
                                                { (yyval.list) = (yyvsp[-1].list); }
#line 22066 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 267: /* LabelList: PGQ_IDENT  */
#line 108 "third_party/libpg_query/grammar/statements/pgq.y"
                                    { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 22072 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 268: /* LabelList: LabelList ',' PGQ_IDENT  */
#line 109 "third_party/libpg_query/grammar/statements/pgq.y"
                                    { (yyval.list) = lappend((yyvsp[-2].list), makeString((yyvsp[0].str))); }
#line 22078 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 269: /* LabelOptional: LABEL PGQ_IDENT  */
#line 113 "third_party/libpg_query/grammar/statements/pgq.y"
                    { (yyval.str) = (yyvsp[0].str); }
#line 22084 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 270: /* LabelOptional: %empty  */
#line 114 "third_party/libpg_query/grammar/statements/pgq.y"
                    { (yyval.str) = NULL; }
#line 22090 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 271: /* Discriminator: IN_P qualified_name '(' LabelList ')'  */
#line 119 "third_party/libpg_query/grammar/statements/pgq.y"
                        { 
				PGPropertyGraphTable *n = makeNode(PGPropertyGraphTable);
				n->discriminator = (yyvsp[-3].range); /* a BIGINT column with 64 bits to set detailed label membership */
				n->labels = (yyvsp[-1].list); /* there is a list of up to 64 labels */
				(yyval.node) = (PGNode*) n;
			}
#line 22101 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 272: /* Discriminator: %empty  */
#line 127 "third_party/libpg_query/grammar/statements/pgq.y"
                        { 
				PGPropertyGraphTable *n = makeNode(PGPropertyGraphTable);
				n->discriminator = NULL; /* no discriminator */
				n->labels = NULL; /* no list, just the single staring PGQ_IDENT */
				(yyval.node) = (PGNode*) n;
			}
#line 22112 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 273: /* VertexTableDefinition: QualifiednameOptionalAs PropertiesClause LabelOptional Discriminator  */
#line 138 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGPropertyGraphTable *n = (PGPropertyGraphTable*) (yyvsp[0].node);
				n->table = (yyvsp[-3].list);
				n->properties = (yyvsp[-2].list);
				/* Xth label in list is set iff discriminator Xth-bit==1 */
				if (n->labels) n->labels = lappend(n->labels,makeString((yyvsp[-1].str)));
				else n->labels = list_make1(makeString((yyvsp[-1].str)));
				n->is_vertex_table = true;
				(yyval.node) = (PGNode *) n;
			}
#line 22127 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 274: /* EdgeTableDefinitionList: ',' EdgeTableDefinition EdgeTableDefinitionList  */
#line 152 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                        { (yyval.list) = (yyvsp[0].list)?lappend((yyvsp[0].list),(yyvsp[-1].node)):list_make1((yyvsp[-1].node)); }
#line 22133 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 275: /* EdgeTableDefinitionList: %empty  */
#line 154 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.list) = NULL; }
#line 22139 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 276: /* EdgeTableDefinition: QualifiednameOptionalAs SOURCE KeyReference qualified_name KeySpecification DESTINATION KeyReference qualified_name KeySpecification PropertiesClause LabelOptional Discriminator  */
#line 162 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGPropertyGraphTable *n = (PGPropertyGraphTable*) (yyvsp[0].node);
				n->table = (yyvsp[-11].list);
				n->is_vertex_table = false;
				n->src_fk = (yyvsp[-9].list);
				n->src_name = (yyvsp[-8].range);
				n->src_pk = (yyvsp[-7].list);
				n->dst_fk = (yyvsp[-5].list);
				n->dst_name = (yyvsp[-4].range);
				n->dst_pk = (yyvsp[-3].list);
				n->properties = (yyvsp[-2].list);
				/* Xth label in list is set iff discriminator Xth-bit==1 */
				if (n->labels) n->labels = lappend(n->labels,makeString((yyvsp[-1].str)));
				else n->labels = list_make1(makeString((yyvsp[-1].str)));
				(yyval.node) = (PGNode *) n;
			}
#line 22160 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 279: /* IdentOptionalAs: PGQ_IDENT  */
#line 187 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                    { (yyval.list) = list_make2(makeString((yyvsp[0].str)), makeString((yyvsp[0].str))); }
#line 22166 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 280: /* IdentOptionalAs: PGQ_IDENT AS PGQ_IDENT  */
#line 189 "third_party/libpg_query/grammar/statements/pgq.y"
                                                        { (yyval.list) = list_make2(makeString((yyvsp[-2].str)), makeString((yyvsp[0].str))); }
#line 22172 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 281: /* QualifiednameOptionalAs: qualified_name  */
#line 193 "third_party/libpg_query/grammar/statements/pgq.y"
                                        { (yyval.list) = list_make2((yyvsp[0].range), makeString("")); }
#line 22178 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 282: /* QualifiednameOptionalAs: qualified_name AS PGQ_IDENT  */
#line 195 "third_party/libpg_query/grammar/statements/pgq.y"
                                        { (yyval.list) = list_make2((yyvsp[-2].range), makeString((yyvsp[0].str))); }
#line 22184 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 283: /* PropertiesList: IdentOptionalAs  */
#line 199 "third_party/libpg_query/grammar/statements/pgq.y"
                                                { (yyval.list) = list_make1((yyvsp[0].list)); }
#line 22190 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 284: /* PropertiesList: PropertiesList ',' IdentOptionalAs  */
#line 202 "third_party/libpg_query/grammar/statements/pgq.y"
                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].list)); }
#line 22196 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 285: /* ExceptOptional: EXCEPT '(' PropertiesList ')'  */
#line 207 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 22202 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 286: /* ExceptOptional: %empty  */
#line 209 "third_party/libpg_query/grammar/statements/pgq.y"
                                                        { (yyval.list) = NULL; }
#line 22208 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 287: /* PropertiesSpec: AreOptional ALL COLUMNS ExceptOptional  */
#line 214 "third_party/libpg_query/grammar/statements/pgq.y"
                        { 
				(yyval.list) = list_make1(list_make2(makeString("*"), makeString("*")));
				if ((yyvsp[0].list)) (yyval.list) = list_concat((yyval.list),(yyvsp[0].list)); 
			}
#line 22217 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 288: /* PropertiesSpec: '(' PropertiesList ')'  */
#line 219 "third_party/libpg_query/grammar/statements/pgq.y"
                                        { (yyval.list) = (yyvsp[-1].list); }
#line 22223 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 289: /* PropertiesClause: NO PROPERTIES  */
#line 223 "third_party/libpg_query/grammar/statements/pgq.y"
                                                { (yyval.list) = NULL; }
#line 22229 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 290: /* PropertiesClause: PROPERTIES PropertiesSpec  */
#line 226 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.list) = (yyvsp[0].list); }
#line 22235 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 291: /* PropertiesClause: %empty  */
#line 228 "third_party/libpg_query/grammar/statements/pgq.y"
                                                        { (yyval.list) = list_make1(list_make2(makeString("*"), makeString("*"))); }
#line 22241 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 292: /* GraphTableWhereOptional: WHERE pgq_expr  */
#line 237 "third_party/libpg_query/grammar/statements/pgq.y"
                                                { (yyval.node) = (yyvsp[0].node); }
#line 22247 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 293: /* GraphTableWhereOptional: %empty  */
#line 239 "third_party/libpg_query/grammar/statements/pgq.y"
                                                        { (yyval.node) = NULL; }
#line 22253 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 294: /* GraphTableStmt: '(' PGQ_IDENT MATCH PathPatternList KeepOptional GraphTableWhereOptional COLUMNS '(' ColumnList ')' ')' qualified_name  */
#line 245 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGMatchClause *n = makeNode(PGMatchClause);
				n->pg_name = (yyvsp[-10].str);
				n->paths = (yyvsp[-8].list);
				if ((yyvsp[-7].node)) {
					/* we massage away 'keep' functionality immediately */
					PGPathPattern *keep = (PGPathPattern*) (yyvsp[-7].node);
					PGListCell *list = list_head(n->paths);
					while(list) {
						PGPathPattern *p = (PGPathPattern*) lfirst(list);
						PGList *backup = p->path;
						*p = *keep; /* copy path spec into all paths */
						p->path = backup; /* restore */
						list = lnext(list);
					}
				}
				n->where_clause = (yyvsp[-6].node);
				n->columns = (yyvsp[-3].list);
				n->graph_table = (yyvsp[0].range);
				(yyval.node) = (PGNode *) n;
			}
#line 22279 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 295: /* ColumnSpec: target_el  */
#line 269 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.list) = list_make2(makeInteger(PG_COLUMNSPEC_EXPR), (yyvsp[0].target)); }
#line 22285 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 296: /* ColumnList: ColumnSpec  */
#line 273 "third_party/libpg_query/grammar/statements/pgq.y"
                                                        { (yyval.list) = list_make1((yyvsp[0].list)); }
#line 22291 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 297: /* ColumnList: ColumnList ',' ColumnSpec  */
#line 275 "third_party/libpg_query/grammar/statements/pgq.y"
                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].list)); }
#line 22297 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 298: /* KeepOptional: KEEP PathPrefix  */
#line 279 "third_party/libpg_query/grammar/statements/pgq.y"
                                                        { (yyval.node) = (yyvsp[0].node); }
#line 22303 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 299: /* KeepOptional: %empty  */
#line 281 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.node) = NULL; }
#line 22309 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 303: /* GroupOrGroupsOptional: GROUP_P  */
#line 289 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.ival) = 1; }
#line 22315 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 304: /* GroupOrGroupsOptional: GROUPS  */
#line 291 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.ival) = 1; }
#line 22321 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 305: /* GroupOrGroupsOptional: %empty  */
#line 293 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.ival) = 0; }
#line 22327 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 306: /* PathVariableOptional: PGQ_IDENT '='  */
#line 297 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.keyword) = (yyvsp[-1].str); }
#line 22333 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 307: /* PathVariableOptional: %empty  */
#line 299 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.keyword) = NULL;}
#line 22339 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 308: /* PathModeOptional: WALK PathOrPathsOptional  */
#line 303 "third_party/libpg_query/grammar/statements/pgq.y"
                                                { (yyval.ival) = PG_PATHMODE_WALK; }
#line 22345 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 309: /* PathModeOptional: TRAIL PathOrPathsOptional  */
#line 305 "third_party/libpg_query/grammar/statements/pgq.y"
                                                { (yyval.ival) = PG_PATHMODE_TRAIL; }
#line 22351 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 310: /* PathModeOptional: SIMPLE PathOrPathsOptional  */
#line 307 "third_party/libpg_query/grammar/statements/pgq.y"
                                                { (yyval.ival) = PG_PATHMODE_SIMPLE; }
#line 22357 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 311: /* PathModeOptional: ACYCLIC PathOrPathsOptional  */
#line 309 "third_party/libpg_query/grammar/statements/pgq.y"
                                                { (yyval.ival) = PG_PATHMODE_ACYCLIC; }
#line 22363 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 312: /* PathModeOptional: PathOrPathsOptional  */
#line 311 "third_party/libpg_query/grammar/statements/pgq.y"
                                                        { (yyval.ival) = PG_PATHMODE_WALK; }
#line 22369 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 313: /* TopKOptional: ICONST  */
#line 315 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.ival) = (yyvsp[0].ival); }
#line 22375 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 314: /* TopKOptional: %empty  */
#line 317 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.ival) = 0; }
#line 22381 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 315: /* PathPrefix: ANY SHORTEST PathModeOptional  */
#line 322 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGPathPattern *n = makeNode(PGPathPattern);
				n->path = NULL;
				n->all = false;
				n->group = false;
				n->shortest = true;
				n->mode = (PGPathMode) (yyvsp[0].ival);
				n->topk = 1;
				(yyval.node) = (PGNode*) n;
			}
#line 22396 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 316: /* PathPrefix: SHORTEST ICONST PathModeOptional GroupOrGroupsOptional  */
#line 334 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGPathPattern *n = makeNode(PGPathPattern);
				n->path = NULL;
				n->all = false;
				n->group = (yyvsp[0].ival);
				n->shortest = true;
				n->mode = (PGPathMode) (yyvsp[-1].ival);
				n->topk = (yyvsp[-2].ival);
				(yyval.node) = (PGNode*) n;
			}
#line 22411 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 317: /* PathPrefix: ALL SHORTEST PathModeOptional  */
#line 346 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGPathPattern *n = makeNode(PGPathPattern);
				n->path = NULL;
				n->all = true;
				n->group = false;
				n->shortest = true;
				n->mode = (PGPathMode) (yyvsp[0].ival);
				n->topk = 0;
				(yyval.node) = (PGNode*) n;
			}
#line 22426 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 318: /* PathPrefix: ALL PathModeOptional  */
#line 358 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGPathPattern *n = makeNode(PGPathPattern);
				n->path = NULL;
				n->all = true;
				n->group = false;
				n->shortest = false;
				n->mode = (PGPathMode) (yyvsp[0].ival);
				n->topk = 0;
				(yyval.node) = (PGNode*) n;
			}
#line 22441 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 319: /* PathPrefix: ANY TopKOptional PathModeOptional  */
#line 370 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGPathPattern *n = makeNode(PGPathPattern);
				n->path = NULL;
				n->all = false;
				n->group = false;
				n->shortest = false;
				n->mode = (PGPathMode) (yyvsp[0].ival);
				n->topk = (yyvsp[-1].ival);
				(yyval.node) = (PGNode*) n;
			}
#line 22456 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 320: /* PathPrefix: %empty  */
#line 382 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGPathPattern *n = makeNode(PGPathPattern);
				n->path = NULL;
				n->all = true;
				n->group = false;
				n->shortest = false;
				n->mode = PG_PATHMODE_WALK;
				n->topk = 0;
				(yyval.node) = (PGNode*) n;
			}
#line 22471 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 321: /* PathPatternList: PathPattern  */
#line 396 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 22477 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 322: /* PathPatternList: PathPatternList ',' PathPattern  */
#line 399 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 22483 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 323: /* PathPattern: PathVariableOptional PathPrefix PathConcatenation  */
#line 404 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGPathPattern *n = (PGPathPattern*) (yyvsp[-1].node);
				PGList *l = (PGList *) (yyvsp[0].list);
				PGSubPath *p = (PGSubPath *) lfirst(list_head(l));

				(yyval.node) = (PGNode*) n;
				if ((yyvsp[-2].keyword) == NULL) {
					n->path = (yyvsp[0].list);
				} else if (list_length(l)==1 && p->type==T_PGSubPath && !p->path_var)  {
					p->path_var = (yyvsp[-2].keyword);
					(yyval.node) = (PGNode*) p;
				} else {
					/* generate a named subpath because of the variable */
					p = makeNode(PGSubPath);
					p->mode = n->mode;
					p->lower = p->upper = p->single_bind = 1;
					p->path_var = (yyvsp[-2].keyword);
					p->path = (yyvsp[0].list);
					n->path = list_make1(p);
				}
			}
#line 22509 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 324: /* PatternUnion: '|'  */
#line 428 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                        { (yyval.ival) = 0; }
#line 22515 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 325: /* PatternUnion: '|' '+' '|'  */
#line 430 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.ival) = 1; }
#line 22521 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 326: /* KleeneQuantifierOptional: ICONST  */
#line 434 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.ival) = (yyvsp[0].ival); }
#line 22527 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 327: /* KleeneQuantifierOptional: %empty  */
#line 436 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.ival) = -1; }
#line 22533 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 328: /* KleeneOptional: '*'  */
#line 442 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGSubPath *n = makeNode(PGSubPath);
				n->single_bind = 0;
				n->lower = 0;
				n->upper = (1<<30);
				(yyval.node) = (PGNode*) n;
			}
#line 22545 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 329: /* KleeneOptional: '+'  */
#line 451 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGSubPath *n = makeNode(PGSubPath);
				n->single_bind = 0;
				n->lower = 1;
				n->upper = (1<<30);
				(yyval.node) = (PGNode*) n;
			}
#line 22557 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 330: /* KleeneOptional: '?'  */
#line 460 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGSubPath *n = makeNode(PGSubPath);
				n->single_bind = 1;
				n->lower = 0;
				n->upper = 1;
				(yyval.node) = (PGNode*) n;
			}
#line 22569 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 331: /* KleeneOptional: '{' KleeneQuantifierOptional ',' KleeneQuantifierOptional '}'  */
#line 469 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGSubPath *n = makeNode(PGSubPath);
				n->single_bind = 0;
				n->lower = ((yyvsp[-3].ival)>=0)?(yyvsp[-3].ival):0;
				n->upper = ((yyvsp[-1].ival)>=0)?(yyvsp[-1].ival):(1<<30);
				(yyval.node) = (PGNode*) n;
			}
#line 22581 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 332: /* KleeneOptional: %empty  */
#line 478 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGSubPath *n = makeNode(PGSubPath);
				n->single_bind = 1;
				n->lower = 1;
				n->upper = 1;
				(yyval.node) = (PGNode*) n;
			}
#line 22593 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 333: /* CostNum: ICONST  */
#line 488 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.ival) = (yyvsp[0].ival); }
#line 22599 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 334: /* CostNum: FCONST  */
#line 490 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.ival) = atof((yyvsp[0].str)); }
#line 22605 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 335: /* CostDefault: DEFAULT CostNum  */
#line 494 "third_party/libpg_query/grammar/statements/pgq.y"
                                                        { (yyval.ival) = (yyvsp[0].ival); }
#line 22611 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 336: /* CostDefault: %empty  */
#line 496 "third_party/libpg_query/grammar/statements/pgq.y"
                                                        { (yyval.ival) = NULL; }
#line 22617 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 337: /* CostOptional: COST b_expr CostDefault  */
#line 501 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGPathInfo *n = makeNode(PGPathInfo);
				PGAConst *d = (PGAConst*) (yyvsp[0].ival);
				n->cost_expr = (yyvsp[-1].node);
				n->default_value = d?((d->val.type == T_PGInteger)?
					((double) d->val.val.ival):strtod(d->val.val.str,NULL)):1;
				(yyval.node) = (PGNode*) n;
			}
#line 22630 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 338: /* CostOptional: %empty  */
#line 511 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGPathInfo *n = makeNode(PGPathInfo);
				n->cost_expr = NULL;
				n->default_value = 1;
				(yyval.node) = (PGNode*) n;
			}
#line 22641 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 339: /* SubPath: PathVariableOptional PathModeOptional PathConcatenation GraphTableWhereOptional CostOptional  */
#line 521 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGPathInfo *n = (PGPathInfo*) (yyvsp[0].node);
				n->var_name = (yyvsp[-4].keyword);
				n->mode = (PGPathMode) (yyvsp[-3].ival);
				n->path = (yyvsp[-2].list);
				n->where_clause = (yyvsp[-1].node);
				(yyval.node) = (PGNode*) n;
			}
#line 22654 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 340: /* EnclosedSubPath: '[' SubPath ']' KleeneOptional  */
#line 533 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGSubPath *p = (PGSubPath*) (yyvsp[0].node);
				p->path = list_make1((yyvsp[-2].node));
				(yyval.node) = (PGNode*) p;
			}
#line 22664 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 341: /* PathElement: VertexPattern  */
#line 541 "third_party/libpg_query/grammar/statements/pgq.y"
                                                        { (yyval.list) = (yyvsp[0].list); }
#line 22670 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 342: /* PathElement: EdgePattern  */
#line 543 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.list) = (yyvsp[0].list); }
#line 22676 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 343: /* PathSequence: EnclosedSubPath PathSequence  */
#line 548 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGSubPath *n = (PGSubPath*) (yyvsp[-1].node);
				PGPathInfo *i = (PGPathInfo*) n->path;
				PGList* p = (PGList*) i->path;

				if (i->var_name == NULL && i->mode <= PG_PATHMODE_WALK &&
					i->where_clause == NULL && i->cost_expr == NULL)
				{
					/* there is no need for a SubPath */
					(yyval.list) = (yyvsp[0].list)?list_concat(p,(yyvsp[0].list)):p;
				} else {
        			n->path_var = i->var_name;
					n->mode = i->mode;
					n->path = p;
					n->where_clause = i->where_clause;
					n->cost_expr = i->cost_expr;
					n->default_value = i->default_value;
					(yyval.list) = list_make1(n);
					if ((yyvsp[0].list)) (yyval.list) = list_concat((yyval.list),(yyvsp[0].list));
				}
			}
#line 22702 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 344: /* PathSequence: PathElement PathSequence  */
#line 570 "third_party/libpg_query/grammar/statements/pgq.y"
                                                { (yyval.list) = (yyvsp[-1].list)?list_concat((yyvsp[-1].list),(yyvsp[0].list)):(yyvsp[0].list); }
#line 22708 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 345: /* PathSequence: %empty  */
#line 572 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.list) = NULL; }
#line 22714 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 346: /* PathConcatenation: PathSequence  */
#line 576 "third_party/libpg_query/grammar/statements/pgq.y"
                                                        { (yyval.list) = (yyvsp[0].list); }
#line 22720 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 347: /* PathConcatenation: PathSequence PatternUnion PathSequence  */
#line 579 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGPathUnion *n = makeNode(PGPathUnion);
				n->multiset = (yyvsp[-1].ival);
				n->path1 = (yyvsp[-2].list);
				n->path2 = (yyvsp[0].list);
				(yyval.list) = list_make1(n);
			}
#line 22732 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 348: /* OrLabelExpression: LabelExpression  */
#line 589 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 22738 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 349: /* OrLabelExpression: LabelExpression '|' OrLabelExpression  */
#line 592 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGLabelTest *n = makeNode(PGLabelTest);
				n->name = "|";
				n->left = (PGLabelTest*) (yyvsp[-2].node);
				n->right = (PGLabelTest*) (yyvsp[0].node);
				(yyval.node) = (PGNode*) n;
			}
#line 22750 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 350: /* AndLabelExpression: LabelExpression  */
#line 602 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 22756 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 351: /* AndLabelExpression: LabelExpression '&' AndLabelExpression  */
#line 605 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGLabelTest *n = makeNode(PGLabelTest);
				n->name = "|";
				n->left = (PGLabelTest*) (yyvsp[-2].node);
				n->right = (PGLabelTest*) (yyvsp[0].node);
				(yyval.node) = (PGNode*) n;
			}
#line 22768 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 352: /* ComposedLabelExpression: LabelExpression  */
#line 615 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 22774 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 353: /* ComposedLabelExpression: LabelExpression '|' OrLabelExpression  */
#line 618 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGLabelTest *n = makeNode(PGLabelTest);
				n->name = "|";
				n->left = (PGLabelTest*) (yyvsp[-2].node);
				n->right = (PGLabelTest*) (yyvsp[0].node);
				(yyval.node) = (PGNode*) n;
			}
#line 22786 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 354: /* ComposedLabelExpression: LabelExpression '&' AndLabelExpression  */
#line 627 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGLabelTest *n = makeNode(PGLabelTest);
				n->name = "&";
				n->left = (PGLabelTest*) (yyvsp[-2].node);
				n->right = (PGLabelTest*) (yyvsp[0].node);
				(yyval.node) = (PGNode*) n;
			}
#line 22798 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 355: /* LabelExpression: PGQ_IDENT  */
#line 638 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGLabelTest *n = makeNode(PGLabelTest);
				n->name = (yyvsp[0].str);
				n->left = n->right = NULL;
				(yyval.node) = (PGNode*) n;
			}
#line 22809 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 356: /* LabelExpression: '!' LabelExpression  */
#line 646 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGLabelTest *n = makeNode(PGLabelTest);
				n->name = "!";
				n->left = (PGLabelTest*) (yyvsp[0].node);
				n->right = NULL;
				(yyval.node) = (PGNode*) n;
			}
#line 22821 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 357: /* LabelExpression: '(' ComposedLabelExpression ')'  */
#line 654 "third_party/libpg_query/grammar/statements/pgq.y"
                                                { (yyval.node) = (yyvsp[-1].node); }
#line 22827 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 358: /* LabelExpressionOptional: IsOrColon LabelExpression  */
#line 658 "third_party/libpg_query/grammar/statements/pgq.y"
                                                { (yyval.node) = (yyvsp[0].node); }
#line 22833 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 359: /* LabelExpressionOptional: %empty  */
#line 660 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.node) = NULL; }
#line 22839 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 362: /* ArrowRight: '-'  */
#line 672 "third_party/libpg_query/grammar/statements/pgq.y"
                                                { (yyval.str) = "-"; }
#line 22845 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 363: /* ArrowRight: '-' '>'  */
#line 674 "third_party/libpg_query/grammar/statements/pgq.y"
                                                { (yyval.str) = "->"; }
#line 22851 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 364: /* ArrowRight: LAMBDA_ARROW  */
#line 676 "third_party/libpg_query/grammar/statements/pgq.y"
                                                        { (yyval.str) = "->"; }
#line 22857 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 365: /* ArrowLeftBracket: '-' '['  */
#line 680 "third_party/libpg_query/grammar/statements/pgq.y"
                                                { (yyval.str) = "-"; }
#line 22863 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 366: /* ArrowLeftBracket: '<' '-' '['  */
#line 682 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.str) = "<-"; }
#line 22869 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 367: /* AbbreviatedEdge: '<' ArrowRight  */
#line 687 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				char* dir = (yyvsp[0].str);
				(yyval.ival) = (dir[1] == '>')?PG_MATCH_EDGE_LEFT_RIGHT:PG_MATCH_EDGE_LEFT;
			}
#line 22878 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 368: /* AbbreviatedEdge: ArrowRight  */
#line 693 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				char* dir = (yyvsp[0].str);
				(yyval.ival) = (dir[1] == '>')?PG_MATCH_EDGE_RIGHT:PG_MATCH_EDGE_ANY;
			}
#line 22887 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 369: /* VariableOptional: PGQ_IDENT  */
#line 700 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 22893 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 370: /* VariableOptional: %empty  */
#line 702 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.str) = NULL;}
#line 22899 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 371: /* FullElementSpec: VariableOptional LabelExpressionOptional GraphTableWhereOptional CostOptional  */
#line 707 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGPathInfo *n = (PGPathInfo*) (yyvsp[0].node);
				n->var_name = (yyvsp[-3].str);
				n->where_clause = (yyvsp[-1].node);
				n->label_expr = (PGLabelTest*) (yyvsp[-2].node);
				(yyval.node) = (PGNode*) n;
			}
#line 22911 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 372: /* EdgePattern: AbbreviatedEdge KleeneOptional  */
#line 718 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGSubPath *p = (PGSubPath*) (yyvsp[0].node);
				PGPathElement *n = makeNode(PGPathElement);
				n->label_expr = NULL;
				n->element_var = NULL;
				n->match_type = (PGMatchType) (yyvsp[-1].ival);
				(yyval.list) = list_make1(n);
				if (p->lower != 1 || !p->single_bind) {
					/* return a subpath consisting of one edge (element) */
					p->path = (yyval.list);
					p->path_var = NULL;
					(yyval.list) = list_make1(p);
				}
			}
#line 22930 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 373: /* EdgePattern: ArrowLeftBracket FullElementSpec ']' ArrowRight KleeneOptional  */
#line 734 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				char *left = (yyvsp[-4].str), *right = (yyvsp[-1].str);
				PGPathInfo* i = (PGPathInfo*) (yyvsp[-3].node);
				PGSubPath *p = (PGSubPath*) (yyvsp[0].node);
				PGPathElement *n = makeNode(PGPathElement);

				n->match_type =
					(right[1] == '>')?
						((left[0] == '<')?PG_MATCH_EDGE_LEFT_RIGHT:PG_MATCH_EDGE_RIGHT):
						((left[0] == '<')?PG_MATCH_EDGE_LEFT:PG_MATCH_EDGE_ANY);
				n->element_var = i->var_name;
				n->label_expr = i->label_expr;
				(yyval.list) = list_make1(n);
				if (i->where_clause || i->cost_expr || p->lower != 1 || !p->single_bind) {
					/* return a subpath consisting of one edge (element) */
					p->where_clause = i->where_clause;
					p->cost_expr = i->cost_expr;
					p->default_value = i->default_value;
					p->path = (yyval.list);
					p->path_var = NULL;
					(yyval.list) = list_make1(p);
				}
			}
#line 22958 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 374: /* VertexPattern: '(' FullElementSpec ')'  */
#line 761 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGPathElement *n = makeNode(PGPathElement);
				PGPathInfo* i = (PGPathInfo*) (yyvsp[-1].node);

				n->element_var = i->var_name;
				n->label_expr = i->label_expr;
				n->match_type = PG_MATCH_VERTEX;
				(yyval.list) = list_make1(n);
				if (i->where_clause || i->cost_expr) {
					PGSubPath *p = makeNode(PGSubPath);
					p->mode = PG_PATHMODE_NONE;
					p->lower = p->upper = p->single_bind = 1;
					p->where_clause = i->where_clause;
					p->cost_expr = i->cost_expr;
					p->default_value = i->default_value;
					p->path = (yyval.list);
					p->path_var = NULL;
					(yyval.list) = list_make1(p);
				}
			}
#line 22983 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 375: /* pgq_expr: c_expr  */
#line 793 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 22989 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 376: /* pgq_expr: pgq_expr TYPECAST Typename  */
#line 795 "third_party/libpg_query/grammar/statements/pgq.y"
                                        { (yyval.node) = makeTypeCast((yyvsp[-2].node), (yyvsp[0].typnam), 0, (yylsp[-1])); }
#line 22995 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 377: /* pgq_expr: pgq_expr COLLATE any_name  */
#line 797 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					PGCollateClause *n = makeNode(PGCollateClause);
					n->arg = (yyvsp[-2].node);
					n->collname = (yyvsp[0].list);
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *) n;
				}
#line 23007 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 378: /* pgq_expr: pgq_expr AT TIME ZONE pgq_expr  */
#line 805 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("timezone"),
											   list_make2((yyvsp[0].node), (yyvsp[-4].node)),
											   (yylsp[-3]));
				}
#line 23017 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 379: /* pgq_expr: '+' pgq_expr  */
#line 820 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", NULL, (yyvsp[0].node), (yylsp[-1])); }
#line 23023 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 380: /* pgq_expr: '-' pgq_expr  */
#line 822 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = doNegate((yyvsp[0].node), (yylsp[-1])); }
#line 23029 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 381: /* pgq_expr: pgq_expr '+' pgq_expr  */
#line 824 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 23035 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 382: /* pgq_expr: pgq_expr '-' pgq_expr  */
#line 826 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "-", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 23041 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 383: /* pgq_expr: pgq_expr '*' pgq_expr  */
#line 828 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "*", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 23047 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 384: /* pgq_expr: pgq_expr '/' pgq_expr  */
#line 830 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "/", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 23053 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 385: /* pgq_expr: pgq_expr '%' pgq_expr  */
#line 832 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "%", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 23059 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 386: /* pgq_expr: pgq_expr '^' pgq_expr  */
#line 834 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "^", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 23065 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 387: /* pgq_expr: pgq_expr POWER_OF pgq_expr  */
#line 836 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "**", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 23071 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 388: /* pgq_expr: pgq_expr '<' pgq_expr  */
#line 838 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 23077 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 389: /* pgq_expr: pgq_expr '>' pgq_expr  */
#line 840 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, ">", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 23083 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 390: /* pgq_expr: pgq_expr '=' pgq_expr  */
#line 842 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 23089 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 391: /* pgq_expr: pgq_expr LESS_EQUALS pgq_expr  */
#line 844 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 23095 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 392: /* pgq_expr: pgq_expr GREATER_EQUALS pgq_expr  */
#line 846 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, ">=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 23101 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 393: /* pgq_expr: pgq_expr NOT_EQUALS pgq_expr  */
#line 848 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<>", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 23107 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 394: /* pgq_expr: pgq_expr qual_Op pgq_expr  */
#line 851 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[-1].list), (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 23113 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 395: /* pgq_expr: pgq_expr AND pgq_expr  */
#line 853 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = makeAndExpr((yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 23119 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 396: /* pgq_expr: pgq_expr OR pgq_expr  */
#line 855 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = makeOrExpr((yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 23125 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 397: /* pgq_expr: NOT pgq_expr  */
#line 857 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = makeNotExpr((yyvsp[0].node), (yylsp[-1])); }
#line 23131 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 398: /* pgq_expr: NOT_LA pgq_expr  */
#line 859 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = makeNotExpr((yyvsp[0].node), (yylsp[-1])); }
#line 23137 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 399: /* pgq_expr: pgq_expr GLOB pgq_expr  */
#line 861 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_GLOB, "~~~",
												   (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
				}
#line 23146 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 400: /* pgq_expr: pgq_expr LIKE pgq_expr  */
#line 866 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_LIKE, "~~",
												   (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
				}
#line 23155 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 401: /* pgq_expr: pgq_expr LIKE pgq_expr ESCAPE pgq_expr  */
#line 871 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("like_escape"),
											   list_make3((yyvsp[-4].node), (yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-3]));
					(yyval.node) = (PGNode *) n;
				}
#line 23166 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 402: /* pgq_expr: pgq_expr NOT_LA LIKE pgq_expr  */
#line 878 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_LIKE, "!~~",
												   (yyvsp[-3].node), (yyvsp[0].node), (yylsp[-2]));
				}
#line 23175 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 403: /* pgq_expr: pgq_expr NOT_LA LIKE pgq_expr ESCAPE pgq_expr  */
#line 883 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("not_like_escape"),
											   list_make3((yyvsp[-5].node), (yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-4]));
					(yyval.node) = (PGNode *) n;
				}
#line 23186 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 404: /* pgq_expr: pgq_expr ILIKE pgq_expr  */
#line 890 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_ILIKE, "~~*",
												   (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
				}
#line 23195 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 405: /* pgq_expr: pgq_expr ILIKE pgq_expr ESCAPE pgq_expr  */
#line 895 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("ilike_escape"),
											   list_make3((yyvsp[-4].node), (yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-3]));
					(yyval.node) = (PGNode *) n;
				}
#line 23206 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 406: /* pgq_expr: pgq_expr NOT_LA ILIKE pgq_expr  */
#line 902 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_ILIKE, "!~~*",
												   (yyvsp[-3].node), (yyvsp[0].node), (yylsp[-2]));
				}
#line 23215 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 407: /* pgq_expr: pgq_expr NOT_LA ILIKE pgq_expr ESCAPE pgq_expr  */
#line 907 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("not_ilike_escape"),
											   list_make3((yyvsp[-5].node), (yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-4]));
					(yyval.node) = (PGNode *) n;
				}
#line 23226 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 408: /* pgq_expr: pgq_expr SIMILAR TO pgq_expr  */
#line 915 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
											   list_make2((yyvsp[0].node), makeNullAConst(-1)),
											   (yylsp[-2]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "~",
												   (yyvsp[-3].node), (PGNode *) n, (yylsp[-2]));
				}
#line 23238 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 409: /* pgq_expr: pgq_expr SIMILAR TO pgq_expr ESCAPE pgq_expr  */
#line 923 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
											   list_make2((yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-4]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "~",
												   (yyvsp[-5].node), (PGNode *) n, (yylsp[-4]));
				}
#line 23250 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 410: /* pgq_expr: pgq_expr NOT_LA SIMILAR TO pgq_expr  */
#line 931 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
											   list_make2((yyvsp[0].node), makeNullAConst(-1)),
											   (yylsp[-3]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "!~",
												   (yyvsp[-4].node), (PGNode *) n, (yylsp[-3]));
				}
#line 23262 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 411: /* pgq_expr: pgq_expr NOT_LA SIMILAR TO pgq_expr ESCAPE pgq_expr  */
#line 939 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
											   list_make2((yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-5]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "!~",
												   (yyvsp[-6].node), (PGNode *) n, (yylsp[-5]));
				}
#line 23274 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 412: /* pgq_expr: pgq_expr IS NULL_P  */
#line 957 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-2].node);
					n->nulltesttype = PG_IS_NULL;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 23286 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 413: /* pgq_expr: pgq_expr ISNULL  */
#line 965 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-1].node);
					n->nulltesttype = PG_IS_NULL;
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 23298 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 414: /* pgq_expr: pgq_expr IS NOT NULL_P  */
#line 973 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-3].node);
					n->nulltesttype = IS_NOT_NULL;
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)n;
				}
#line 23310 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 415: /* pgq_expr: pgq_expr NOT NULL_P  */
#line 981 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-2].node);
					n->nulltesttype = IS_NOT_NULL;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 23322 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 416: /* pgq_expr: pgq_expr NOTNULL  */
#line 989 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-1].node);
					n->nulltesttype = IS_NOT_NULL;
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 23334 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 417: /* pgq_expr: pgq_expr LAMBDA_ARROW pgq_expr  */
#line 997 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGLambdaFunction *n = makeNode(PGLambdaFunction);
				n->lhs = (yyvsp[-2].node);
				n->rhs = (yyvsp[0].node);
				n->location = (yylsp[-1]);
				(yyval.node) = (PGNode *) n;
			}
#line 23346 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 418: /* pgq_expr: pgq_expr DOUBLE_ARROW pgq_expr  */
#line 1005 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
							(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "->>", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
			}
#line 23354 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 419: /* pgq_expr: row OVERLAPS row  */
#line 1009 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					if (list_length((yyvsp[-2].list)) != 2)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("wrong number of parameters on left side of OVERLAPS expression"),
								 parser_errposition((yylsp[-2]))));
					if (list_length((yyvsp[0].list)) != 2)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("wrong number of parameters on right side of OVERLAPS expression"),
								 parser_errposition((yylsp[0]))));
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("overlaps"),
											   list_concat((yyvsp[-2].list), (yyvsp[0].list)),
											   (yylsp[-1]));
				}
#line 23374 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 420: /* pgq_expr: pgq_expr IS TRUE_P  */
#line 1025 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-2].node);
					b->booltesttype = PG_IS_TRUE;
					b->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)b;
				}
#line 23386 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 421: /* pgq_expr: pgq_expr IS NOT TRUE_P  */
#line 1033 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-3].node);
					b->booltesttype = IS_NOT_TRUE;
					b->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)b;
				}
#line 23398 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 422: /* pgq_expr: pgq_expr IS FALSE_P  */
#line 1041 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-2].node);
					b->booltesttype = IS_FALSE;
					b->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)b;
				}
#line 23410 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 423: /* pgq_expr: pgq_expr IS NOT FALSE_P  */
#line 1049 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-3].node);
					b->booltesttype = IS_NOT_FALSE;
					b->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)b;
				}
#line 23422 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 424: /* pgq_expr: pgq_expr IS UNKNOWN  */
#line 1057 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-2].node);
					b->booltesttype = IS_UNKNOWN;
					b->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)b;
				}
#line 23434 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 425: /* pgq_expr: pgq_expr IS NOT UNKNOWN  */
#line 1065 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-3].node);
					b->booltesttype = IS_NOT_UNKNOWN;
					b->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)b;
				}
#line 23446 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 426: /* pgq_expr: pgq_expr IS DISTINCT FROM pgq_expr  */
#line 1073 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_DISTINCT, "=", (yyvsp[-4].node), (yyvsp[0].node), (yylsp[-3]));
				}
#line 23454 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 427: /* pgq_expr: pgq_expr IS NOT DISTINCT FROM pgq_expr  */
#line 1077 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_DISTINCT, "=", (yyvsp[-5].node), (yyvsp[0].node), (yylsp[-4]));
				}
#line 23462 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 428: /* pgq_expr: pgq_expr IS OF '(' type_list ')'  */
#line 1081 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OF, "=", (yyvsp[-5].node), (PGNode *) (yyvsp[-1].list), (yylsp[-4]));
				}
#line 23470 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 429: /* pgq_expr: pgq_expr IS NOT OF '(' type_list ')'  */
#line 1085 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OF, "<>", (yyvsp[-6].node), (PGNode *) (yyvsp[-1].list), (yylsp[-5]));
				}
#line 23478 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 430: /* pgq_expr: pgq_expr BETWEEN opt_asymmetric b_expr AND pgq_expr  */
#line 1089 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_BETWEEN,
												   "BETWEEN",
												   (yyvsp[-5].node),
												   (PGNode *) list_make2((yyvsp[-2].node), (yyvsp[0].node)),
												   (yylsp[-4]));
				}
#line 23490 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 431: /* pgq_expr: pgq_expr NOT_LA BETWEEN opt_asymmetric b_expr AND pgq_expr  */
#line 1097 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_BETWEEN,
												   "NOT BETWEEN",
												   (yyvsp[-6].node),
												   (PGNode *) list_make2((yyvsp[-2].node), (yyvsp[0].node)),
												   (yylsp[-5]));
				}
#line 23502 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 432: /* pgq_expr: pgq_expr BETWEEN SYMMETRIC b_expr AND pgq_expr  */
#line 1105 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_BETWEEN_SYM,
												   "BETWEEN SYMMETRIC",
												   (yyvsp[-5].node),
												   (PGNode *) list_make2((yyvsp[-2].node), (yyvsp[0].node)),
												   (yylsp[-4]));
				}
#line 23514 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 433: /* pgq_expr: pgq_expr NOT_LA BETWEEN SYMMETRIC b_expr AND pgq_expr  */
#line 1113 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_BETWEEN_SYM,
												   "NOT BETWEEN SYMMETRIC",
												   (yyvsp[-6].node),
												   (PGNode *) list_make2((yyvsp[-2].node), (yyvsp[0].node)),
												   (yylsp[-5]));
				}
#line 23526 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 434: /* pgq_expr: pgq_expr IN_P in_expr  */
#line 1121 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					/* in_expr returns a PGSubLink or a list of pgq_exprs */
					if (IsA((yyvsp[0].node), PGSubLink))
					{
						/* generate foo = ANY (subquery) */
						PGSubLink *n = (PGSubLink *) (yyvsp[0].node);
						n->subLinkType = PG_ANY_SUBLINK;
						n->subLinkId = 0;
						n->testexpr = (yyvsp[-2].node);
						n->operName = NIL;		/* show it's IN not = ANY */
						n->location = (yylsp[-1]);
						(yyval.node) = (PGNode *)n;
					}
					else
					{
						/* generate scalar IN expression */
						(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_IN, "=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
					}
				}
#line 23550 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 435: /* pgq_expr: pgq_expr NOT_LA IN_P in_expr  */
#line 1141 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					/* in_expr returns a PGSubLink or a list of pgq_exprs */
					if (IsA((yyvsp[0].node), PGSubLink))
					{
						/* generate NOT (foo = ANY (subquery)) */
						/* Make an = ANY node */
						PGSubLink *n = (PGSubLink *) (yyvsp[0].node);
						n->subLinkType = PG_ANY_SUBLINK;
						n->subLinkId = 0;
						n->testexpr = (yyvsp[-3].node);
						n->operName = NIL;		/* show it's IN not = ANY */
						n->location = (yylsp[-2]);
						/* Stick a NOT on top; must have same parse location */
						(yyval.node) = makeNotExpr((PGNode *) n, (yylsp[-2]));
					}
					else
					{
						/* generate scalar NOT IN expression */
						(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_IN, "<>", (yyvsp[-3].node), (yyvsp[0].node), (yylsp[-2]));
					}
				}
#line 23576 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 436: /* CreateStmt: CREATE_P OptTemp TABLE qualified_name '(' OptTableElementList ')' OptWith OnCommitOption  */
#line 9 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGCreateStmt *n = makeNode(PGCreateStmt);
					(yyvsp[-5].range)->relpersistence = (yyvsp[-7].ival);
					n->relation = (yyvsp[-5].range);
					n->tableElts = (yyvsp[-3].list);
					n->ofTypename = NULL;
					n->constraints = NIL;
					n->options = (yyvsp[-1].list);
					n->oncommit = (yyvsp[0].oncommit);
					n->onconflict = PG_ERROR_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 23593 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 437: /* CreateStmt: CREATE_P OptTemp TABLE IF_P NOT EXISTS qualified_name '(' OptTableElementList ')' OptWith OnCommitOption  */
#line 24 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGCreateStmt *n = makeNode(PGCreateStmt);
					(yyvsp[-5].range)->relpersistence = (yyvsp[-10].ival);
					n->relation = (yyvsp[-5].range);
					n->tableElts = (yyvsp[-3].list);
					n->ofTypename = NULL;
					n->constraints = NIL;
					n->options = (yyvsp[-1].list);
					n->oncommit = (yyvsp[0].oncommit);
					n->onconflict = PG_IGNORE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 23610 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 438: /* CreateStmt: CREATE_P OR REPLACE OptTemp TABLE qualified_name '(' OptTableElementList ')' OptWith OnCommitOption  */
#line 39 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGCreateStmt *n = makeNode(PGCreateStmt);
					(yyvsp[-5].range)->relpersistence = (yyvsp[-7].ival);
					n->relation = (yyvsp[-5].range);
					n->tableElts = (yyvsp[-3].list);
					n->ofTypename = NULL;
					n->constraints = NIL;
					n->options = (yyvsp[-1].list);
					n->oncommit = (yyvsp[0].oncommit);
					n->onconflict = PG_REPLACE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 23627 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 439: /* ConstraintAttributeSpec: %empty  */
#line 56 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = 0; }
#line 23633 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 440: /* ConstraintAttributeSpec: ConstraintAttributeSpec ConstraintAttributeElem  */
#line 58 "third_party/libpg_query/grammar/statements/create.y"
                                {
					/*
					 * We must complain about conflicting options.
					 * We could, but choose not to, complain about redundant
					 * options (ie, where $2's bit is already set in $1).
					 */
					int		newspec = (yyvsp[-1].ival) | (yyvsp[0].ival);

					/* special message for this case */
					if ((newspec & (CAS_NOT_DEFERRABLE | CAS_INITIALLY_DEFERRED)) == (CAS_NOT_DEFERRABLE | CAS_INITIALLY_DEFERRED))
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("constraint declared INITIALLY DEFERRED must be DEFERRABLE"),
								 parser_errposition((yylsp[0]))));
					/* generic message for other conflicts */
					if ((newspec & (CAS_NOT_DEFERRABLE | CAS_DEFERRABLE)) == (CAS_NOT_DEFERRABLE | CAS_DEFERRABLE) ||
						(newspec & (CAS_INITIALLY_IMMEDIATE | CAS_INITIALLY_DEFERRED)) == (CAS_INITIALLY_IMMEDIATE | CAS_INITIALLY_DEFERRED))
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("conflicting constraint properties"),
								 parser_errposition((yylsp[0]))));
					(yyval.ival) = newspec;
				}
#line 23661 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 441: /* def_arg: func_type  */
#line 84 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.node) = (PGNode *)(yyvsp[0].typnam); }
#line 23667 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 442: /* def_arg: reserved_keyword  */
#line 85 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.node) = (PGNode *)makeString(pstrdup((yyvsp[0].keyword))); }
#line 23673 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 443: /* def_arg: qual_all_Op  */
#line 86 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.node) = (PGNode *)(yyvsp[0].list); }
#line 23679 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 444: /* def_arg: NumericOnly  */
#line 87 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.node) = (PGNode *)(yyvsp[0].value); }
#line 23685 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 445: /* def_arg: Sconst  */
#line 88 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.node) = (PGNode *)makeString((yyvsp[0].str)); }
#line 23691 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 446: /* def_arg: NONE  */
#line 89 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.node) = (PGNode *)makeString(pstrdup((yyvsp[0].keyword))); }
#line 23697 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 447: /* OptParenthesizedSeqOptList: '(' SeqOptList ')'  */
#line 93 "third_party/libpg_query/grammar/statements/create.y"
                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 23703 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 448: /* OptParenthesizedSeqOptList: %empty  */
#line 94 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                { (yyval.list) = NIL; }
#line 23709 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 449: /* generic_option_arg: Sconst  */
#line 99 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.node) = (PGNode *) makeString((yyvsp[0].str)); }
#line 23715 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 450: /* key_action: NO ACTION  */
#line 104 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = PG_FKCONSTR_ACTION_NOACTION; }
#line 23721 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 451: /* key_action: RESTRICT  */
#line 105 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = PG_FKCONSTR_ACTION_RESTRICT; }
#line 23727 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 452: /* key_action: CASCADE  */
#line 106 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = PG_FKCONSTR_ACTION_CASCADE; }
#line 23733 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 453: /* key_action: SET NULL_P  */
#line 107 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_FKCONSTR_ACTION_SETNULL; }
#line 23739 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 454: /* key_action: SET DEFAULT  */
#line 108 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_FKCONSTR_ACTION_SETDEFAULT; }
#line 23745 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 455: /* ColConstraint: CONSTRAINT name ColConstraintElem  */
#line 114 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = castNode(PGConstraint, (yyvsp[0].node));
					n->conname = (yyvsp[-1].str);
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *) n;
				}
#line 23756 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 456: /* ColConstraint: ColConstraintElem  */
#line 120 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 23762 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 457: /* ColConstraint: ConstraintAttr  */
#line 121 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 23768 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 458: /* ColConstraint: COLLATE any_name  */
#line 123 "third_party/libpg_query/grammar/statements/create.y"
                                {
					/*
					 * Note: the PGCollateClause is momentarily included in
					 * the list built by ColQualList, but we split it out
					 * again in SplitColQualList.
					 */
					PGCollateClause *n = makeNode(PGCollateClause);
					n->arg = NULL;
					n->collname = (yyvsp[0].list);
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *) n;
				}
#line 23785 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 459: /* ColConstraintElem: NOT NULL_P  */
#line 140 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_NOTNULL;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 23796 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 460: /* ColConstraintElem: NULL_P  */
#line 147 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_NULL;
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 23807 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 461: /* ColConstraintElem: UNIQUE opt_definition  */
#line 154 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_UNIQUE;
					n->location = (yylsp[-1]);
					n->keys = NULL;
					n->options = (yyvsp[0].list);
					n->indexname = NULL;
					(yyval.node) = (PGNode *)n;
				}
#line 23821 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 462: /* ColConstraintElem: PRIMARY KEY opt_definition  */
#line 164 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_PRIMARY;
					n->location = (yylsp[-2]);
					n->keys = NULL;
					n->options = (yyvsp[0].list);
					n->indexname = NULL;
					(yyval.node) = (PGNode *)n;
				}
#line 23835 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 463: /* ColConstraintElem: CHECK_P '(' a_expr ')' opt_no_inherit  */
#line 174 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_CHECK;
					n->location = (yylsp[-4]);
					n->is_no_inherit = (yyvsp[0].boolean);
					n->raw_expr = (yyvsp[-2].node);
					n->cooked_expr = NULL;
					n->skip_validation = false;
					n->initially_valid = true;
					(yyval.node) = (PGNode *)n;
				}
#line 23851 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 464: /* ColConstraintElem: USING COMPRESSION name  */
#line 186 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_COMPRESSION;
					n->location = (yylsp[-2]);
					n->compression_name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 23863 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 465: /* ColConstraintElem: DEFAULT b_expr  */
#line 194 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_DEFAULT;
					n->location = (yylsp[-1]);
					n->raw_expr = (yyvsp[0].node);
					n->cooked_expr = NULL;
					(yyval.node) = (PGNode *)n;
				}
#line 23876 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 466: /* ColConstraintElem: REFERENCES qualified_name opt_column_list key_match key_actions  */
#line 203 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_FOREIGN;
					n->location = (yylsp[-4]);
					n->pktable			= (yyvsp[-3].range);
					n->fk_attrs			= NIL;
					n->pk_attrs			= (yyvsp[-2].list);
					n->fk_matchtype		= (yyvsp[-1].ival);
					n->fk_upd_action	= (char) ((yyvsp[0].ival) >> 8);
					n->fk_del_action	= (char) ((yyvsp[0].ival) & 0xFF);
					n->skip_validation  = false;
					n->initially_valid  = true;
					(yyval.node) = (PGNode *)n;
				}
#line 23895 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 467: /* GeneratedColumnType: VIRTUAL  */
#line 220 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.constr) = PG_CONSTR_GENERATED_VIRTUAL; }
#line 23901 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 468: /* GeneratedColumnType: STORED  */
#line 221 "third_party/libpg_query/grammar/statements/create.y"
                                 { (yyval.constr) = PG_CONSTR_GENERATED_STORED; }
#line 23907 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 469: /* opt_GeneratedColumnType: GeneratedColumnType  */
#line 225 "third_party/libpg_query/grammar/statements/create.y"
                                            { (yyval.constr) = (yyvsp[0].constr); }
#line 23913 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 470: /* opt_GeneratedColumnType: %empty  */
#line 226 "third_party/libpg_query/grammar/statements/create.y"
                                      { (yyval.constr) = PG_CONSTR_GENERATED_VIRTUAL; }
#line 23919 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 471: /* GeneratedConstraintElem: GENERATED generated_when AS IDENTITY_P OptParenthesizedSeqOptList  */
#line 231 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_IDENTITY;
					n->generated_when = (yyvsp[-3].ival);
					n->options = (yyvsp[0].list);
					n->location = (yylsp[-4]);
					(yyval.node) = (PGNode *)n;
				}
#line 23932 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 472: /* GeneratedConstraintElem: GENERATED generated_when AS '(' a_expr ')' opt_GeneratedColumnType  */
#line 240 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = (yyvsp[0].constr);
					n->generated_when = (yyvsp[-5].ival);
					n->raw_expr = (yyvsp[-2].node);
					n->cooked_expr = NULL;
					n->location = (yylsp[-6]);

					/*
					 * Can't do this in the grammar because of shift/reduce
					 * conflicts.  (IDENTITY allows both ALWAYS and BY
					 * DEFAULT, but generated columns only allow ALWAYS.)  We
					 * can also give a more useful error message and location.
					 */
					if ((yyvsp[-5].ival) != PG_ATTRIBUTE_IDENTITY_ALWAYS)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("for a generated column, GENERATED ALWAYS must be specified"),
								 parser_errposition((yylsp[-5]))));

					(yyval.node) = (PGNode *)n;
				}
#line 23959 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 473: /* GeneratedConstraintElem: AS '(' a_expr ')' opt_GeneratedColumnType  */
#line 263 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = (yyvsp[0].constr);
					n->generated_when = PG_ATTRIBUTE_IDENTITY_ALWAYS;
					n->raw_expr = (yyvsp[-2].node);
					n->cooked_expr = NULL;
					n->location = (yylsp[-4]);
					(yyval.node) = (PGNode *)n;
				}
#line 23973 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 474: /* generic_option_elem: generic_option_name generic_option_arg  */
#line 277 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[-1].str), (yyvsp[0].node), (yylsp[-1]));
				}
#line 23981 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 475: /* key_update: ON UPDATE key_action  */
#line 283 "third_party/libpg_query/grammar/statements/create.y"
                                                { (yyval.ival) = (yyvsp[0].ival); }
#line 23987 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 476: /* key_actions: key_update  */
#line 289 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = ((yyvsp[0].ival) << 8) | (PG_FKCONSTR_ACTION_NOACTION & 0xFF); }
#line 23993 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 477: /* key_actions: key_delete  */
#line 291 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = (PG_FKCONSTR_ACTION_NOACTION << 8) | ((yyvsp[0].ival) & 0xFF); }
#line 23999 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 478: /* key_actions: key_update key_delete  */
#line 293 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = ((yyvsp[-1].ival) << 8) | ((yyvsp[0].ival) & 0xFF); }
#line 24005 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 479: /* key_actions: key_delete key_update  */
#line 295 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = ((yyvsp[0].ival) << 8) | ((yyvsp[-1].ival) & 0xFF); }
#line 24011 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 480: /* key_actions: %empty  */
#line 297 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = (PG_FKCONSTR_ACTION_NOACTION << 8) | (PG_FKCONSTR_ACTION_NOACTION & 0xFF); }
#line 24017 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 481: /* OnCommitOption: ON COMMIT DROP  */
#line 300 "third_party/libpg_query/grammar/statements/create.y"
                                                        { (yyval.oncommit) = ONCOMMIT_DROP; }
#line 24023 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 482: /* OnCommitOption: ON COMMIT DELETE_P ROWS  */
#line 301 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.oncommit) = PG_ONCOMMIT_DELETE_ROWS; }
#line 24029 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 483: /* OnCommitOption: ON COMMIT PRESERVE ROWS  */
#line 302 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.oncommit) = PG_ONCOMMIT_PRESERVE_ROWS; }
#line 24035 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 484: /* OnCommitOption: %empty  */
#line 303 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.oncommit) = PG_ONCOMMIT_NOOP; }
#line 24041 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 485: /* reloptions: '(' reloption_list ')'  */
#line 308 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 24047 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 486: /* opt_no_inherit: NO INHERIT  */
#line 312 "third_party/libpg_query/grammar/statements/create.y"
                                                                                {  (yyval.boolean) = true; }
#line 24053 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 487: /* opt_no_inherit: %empty  */
#line 313 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        {  (yyval.boolean) = false; }
#line 24059 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 488: /* TableConstraint: CONSTRAINT name ConstraintElem  */
#line 319 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = castNode(PGConstraint, (yyvsp[0].node));
					n->conname = (yyvsp[-1].str);
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *) n;
				}
#line 24070 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 489: /* TableConstraint: ConstraintElem  */
#line 325 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 24076 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 490: /* TableLikeOption: COMMENTS  */
#line 330 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_CREATE_TABLE_LIKE_COMMENTS; }
#line 24082 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 491: /* TableLikeOption: CONSTRAINTS  */
#line 331 "third_party/libpg_query/grammar/statements/create.y"
                                                        { (yyval.ival) = PG_CREATE_TABLE_LIKE_CONSTRAINTS; }
#line 24088 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 492: /* TableLikeOption: DEFAULTS  */
#line 332 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_CREATE_TABLE_LIKE_DEFAULTS; }
#line 24094 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 493: /* TableLikeOption: IDENTITY_P  */
#line 333 "third_party/libpg_query/grammar/statements/create.y"
                                                        { (yyval.ival) = PG_CREATE_TABLE_LIKE_IDENTITY; }
#line 24100 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 494: /* TableLikeOption: INDEXES  */
#line 334 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_CREATE_TABLE_LIKE_INDEXES; }
#line 24106 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 495: /* TableLikeOption: STATISTICS  */
#line 335 "third_party/libpg_query/grammar/statements/create.y"
                                                        { (yyval.ival) = PG_CREATE_TABLE_LIKE_STATISTICS; }
#line 24112 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 496: /* TableLikeOption: STORAGE  */
#line 336 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_CREATE_TABLE_LIKE_STORAGE; }
#line 24118 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 497: /* TableLikeOption: ALL  */
#line 337 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_CREATE_TABLE_LIKE_ALL; }
#line 24124 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 498: /* reloption_list: reloption_elem  */
#line 343 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].defelt)); }
#line 24130 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 499: /* reloption_list: reloption_list ',' reloption_elem  */
#line 344 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt)); }
#line 24136 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 500: /* ExistingIndex: USING INDEX index_name  */
#line 348 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.str) = (yyvsp[0].str); }
#line 24142 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 501: /* ConstraintAttr: DEFERRABLE  */
#line 354 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_ATTR_DEFERRABLE;
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 24153 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 502: /* ConstraintAttr: NOT DEFERRABLE  */
#line 361 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_ATTR_NOT_DEFERRABLE;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 24164 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 503: /* ConstraintAttr: INITIALLY DEFERRED  */
#line 368 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_ATTR_DEFERRED;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 24175 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 504: /* ConstraintAttr: INITIALLY IMMEDIATE  */
#line 375 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_ATTR_IMMEDIATE;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 24186 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 505: /* OptWith: WITH reloptions  */
#line 386 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.list) = (yyvsp[0].list); }
#line 24192 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 506: /* OptWith: WITH OIDS  */
#line 387 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.list) = list_make1(makeDefElem("oids", (PGNode *) makeInteger(true), (yylsp[-1]))); }
#line 24198 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 507: /* OptWith: WITHOUT OIDS  */
#line 388 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.list) = list_make1(makeDefElem("oids", (PGNode *) makeInteger(false), (yylsp[-1]))); }
#line 24204 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 508: /* OptWith: %empty  */
#line 389 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.list) = NIL; }
#line 24210 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 509: /* definition: '(' def_list ')'  */
#line 393 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 24216 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 510: /* TableLikeOptionList: TableLikeOptionList INCLUDING TableLikeOption  */
#line 398 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.ival) = (yyvsp[-2].ival) | (yyvsp[0].ival); }
#line 24222 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 511: /* TableLikeOptionList: TableLikeOptionList EXCLUDING TableLikeOption  */
#line 399 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.ival) = (yyvsp[-2].ival) & ~(yyvsp[0].ival); }
#line 24228 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 512: /* TableLikeOptionList: %empty  */
#line 400 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.ival) = 0; }
#line 24234 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 513: /* generic_option_name: ColLabel  */
#line 405 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.str) = (yyvsp[0].str); }
#line 24240 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 514: /* ConstraintAttributeElem: NOT DEFERRABLE  */
#line 410 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = CAS_NOT_DEFERRABLE; }
#line 24246 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 515: /* ConstraintAttributeElem: DEFERRABLE  */
#line 411 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = CAS_DEFERRABLE; }
#line 24252 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 516: /* ConstraintAttributeElem: INITIALLY IMMEDIATE  */
#line 412 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = CAS_INITIALLY_IMMEDIATE; }
#line 24258 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 517: /* ConstraintAttributeElem: INITIALLY DEFERRED  */
#line 413 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = CAS_INITIALLY_DEFERRED; }
#line 24264 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 518: /* ConstraintAttributeElem: NOT VALID  */
#line 414 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.ival) = CAS_NOT_VALID; }
#line 24270 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 519: /* ConstraintAttributeElem: NO INHERIT  */
#line 415 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = CAS_NO_INHERIT; }
#line 24276 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 520: /* columnDef: ColId Typename ColQualList  */
#line 421 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGColumnDef *n = makeNode(PGColumnDef);
					n->category = COL_STANDARD;
					n->colname = (yyvsp[-2].str);
					n->typeName = (yyvsp[-1].typnam);
					n->inhcount = 0;
					n->is_local = true;
					n->is_not_null = false;
					n->is_from_type = false;
					n->storage = 0;
					n->raw_default = NULL;
					n->cooked_default = NULL;
					n->collOid = InvalidOid;
					SplitColQualList((yyvsp[0].list), &n->constraints, &n->collClause,
									 yyscanner);
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)n;
			}
#line 24299 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 521: /* columnDef: ColId opt_Typename GeneratedConstraintElem ColQualList  */
#line 441 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGColumnDef *n = makeNode(PGColumnDef);
					n->category = COL_GENERATED;
					n->colname = (yyvsp[-3].str);
					n->typeName = (yyvsp[-2].typnam);
					n->inhcount = 0;
					n->is_local = true;
					n->is_not_null = false;
					n->is_from_type = false;
					n->storage = 0;
					n->raw_default = NULL;
					n->cooked_default = NULL;
					n->collOid = InvalidOid;
					// merge the constraints with the generated column constraint
					auto constraints = (yyvsp[0].list);
					if (constraints) {
					    constraints = lappend(constraints, (yyvsp[-1].node));
					} else {
					    constraints = list_make1((yyvsp[-1].node));
					}
					SplitColQualList(constraints, &n->constraints, &n->collClause,
									 yyscanner);
					n->location = (yylsp[-3]);
					(yyval.node) = (PGNode *)n;
			}
#line 24329 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 522: /* def_list: def_elem  */
#line 469 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].defelt)); }
#line 24335 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 523: /* def_list: def_list ',' def_elem  */
#line 470 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt)); }
#line 24341 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 524: /* index_name: ColId  */
#line 474 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 24347 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 525: /* TableElement: columnDef  */
#line 478 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 24353 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 526: /* TableElement: TableLikeClause  */
#line 479 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 24359 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 527: /* TableElement: TableConstraint  */
#line 480 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 24365 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 528: /* def_elem: ColLabel '=' def_arg  */
#line 485 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[-2].str), (PGNode *) (yyvsp[0].node), (yylsp[-2]));
				}
#line 24373 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 529: /* def_elem: ColLabel  */
#line 489 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[0].str), NULL, (yylsp[0]));
				}
#line 24381 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 530: /* opt_definition: WITH definition  */
#line 496 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 24387 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 531: /* opt_definition: %empty  */
#line 497 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                { (yyval.list) = NIL; }
#line 24393 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 532: /* OptTableElementList: TableElementList  */
#line 502 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 24399 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 533: /* OptTableElementList: TableElementList ','  */
#line 503 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 24405 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 534: /* OptTableElementList: %empty  */
#line 504 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.list) = NIL; }
#line 24411 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 535: /* columnElem: ColId  */
#line 509 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.node) = (PGNode *) makeString((yyvsp[0].str));
				}
#line 24419 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 536: /* opt_column_list: '(' columnList ')'  */
#line 516 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 24425 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 537: /* opt_column_list: %empty  */
#line 517 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                { (yyval.list) = NIL; }
#line 24431 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 538: /* ColQualList: ColQualList ColConstraint  */
#line 522 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 24437 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 539: /* ColQualList: %empty  */
#line 523 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                { (yyval.list) = NIL; }
#line 24443 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 540: /* key_delete: ON DELETE_P key_action  */
#line 527 "third_party/libpg_query/grammar/statements/create.y"
                                                { (yyval.ival) = (yyvsp[0].ival); }
#line 24449 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 541: /* reloption_elem: ColLabel '=' def_arg  */
#line 533 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[-2].str), (PGNode *) (yyvsp[0].node), (yylsp[-2]));
				}
#line 24457 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 542: /* reloption_elem: ColLabel  */
#line 537 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[0].str), NULL, (yylsp[0]));
				}
#line 24465 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 543: /* reloption_elem: ColLabel '.' ColLabel '=' def_arg  */
#line 541 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElemExtended((yyvsp[-4].str), (yyvsp[-2].str), (PGNode *) (yyvsp[0].node),
											 PG_DEFELEM_UNSPEC, (yylsp[-4]));
				}
#line 24474 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 544: /* reloption_elem: ColLabel '.' ColLabel  */
#line 546 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElemExtended((yyvsp[-2].str), (yyvsp[0].str), NULL, PG_DEFELEM_UNSPEC, (yylsp[-2]));
				}
#line 24482 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 545: /* columnList: columnElem  */
#line 553 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 24488 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 546: /* columnList: columnList ',' columnElem  */
#line 554 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 24494 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 547: /* columnList_opt_comma: columnList  */
#line 558 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 24500 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 548: /* columnList_opt_comma: columnList ','  */
#line 559 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 24506 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 549: /* func_type: Typename  */
#line 563 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.typnam) = (yyvsp[0].typnam); }
#line 24512 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 550: /* func_type: type_function_name attrs '%' TYPE_P  */
#line 565 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.typnam) = makeTypeNameFromNameList(lcons(makeString((yyvsp[-3].str)), (yyvsp[-2].list)));
					(yyval.typnam)->pct_type = true;
					(yyval.typnam)->location = (yylsp[-3]);
				}
#line 24522 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 551: /* func_type: SETOF type_function_name attrs '%' TYPE_P  */
#line 571 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.typnam) = makeTypeNameFromNameList(lcons(makeString((yyvsp[-3].str)), (yyvsp[-2].list)));
					(yyval.typnam)->pct_type = true;
					(yyval.typnam)->setof = true;
					(yyval.typnam)->location = (yylsp[-3]);
				}
#line 24533 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 552: /* ConstraintElem: CHECK_P '(' a_expr ')' ConstraintAttributeSpec  */
#line 582 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_CHECK;
					n->location = (yylsp[-4]);
					n->raw_expr = (yyvsp[-2].node);
					n->cooked_expr = NULL;
					processCASbits((yyvsp[0].ival), (yylsp[0]), "CHECK",
								   NULL, NULL, &n->skip_validation,
								   &n->is_no_inherit, yyscanner);
					n->initially_valid = !n->skip_validation;
					(yyval.node) = (PGNode *)n;
				}
#line 24550 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 553: /* ConstraintElem: UNIQUE '(' columnList_opt_comma ')' opt_definition ConstraintAttributeSpec  */
#line 596 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_UNIQUE;
					n->location = (yylsp[-5]);
					n->keys = (yyvsp[-3].list);
					n->options = (yyvsp[-1].list);
					n->indexname = NULL;
					processCASbits((yyvsp[0].ival), (yylsp[0]), "UNIQUE",
								   &n->deferrable, &n->initdeferred, NULL,
								   NULL, yyscanner);
					(yyval.node) = (PGNode *)n;
				}
#line 24567 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 554: /* ConstraintElem: UNIQUE ExistingIndex ConstraintAttributeSpec  */
#line 609 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_UNIQUE;
					n->location = (yylsp[-2]);
					n->keys = NIL;
					n->options = NIL;
					n->indexname = (yyvsp[-1].str);
					n->indexspace = NULL;
					processCASbits((yyvsp[0].ival), (yylsp[0]), "UNIQUE",
								   &n->deferrable, &n->initdeferred, NULL,
								   NULL, yyscanner);
					(yyval.node) = (PGNode *)n;
				}
#line 24585 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 555: /* ConstraintElem: PRIMARY KEY '(' columnList_opt_comma ')' opt_definition ConstraintAttributeSpec  */
#line 624 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_PRIMARY;
					n->location = (yylsp[-6]);
					n->keys = (yyvsp[-3].list);
					n->options = (yyvsp[-1].list);
					n->indexname = NULL;
					processCASbits((yyvsp[0].ival), (yylsp[0]), "PRIMARY KEY",
								   &n->deferrable, &n->initdeferred, NULL,
								   NULL, yyscanner);
					(yyval.node) = (PGNode *)n;
				}
#line 24602 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 556: /* ConstraintElem: PRIMARY KEY ExistingIndex ConstraintAttributeSpec  */
#line 637 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_PRIMARY;
					n->location = (yylsp[-3]);
					n->keys = NIL;
					n->options = NIL;
					n->indexname = (yyvsp[-1].str);
					n->indexspace = NULL;
					processCASbits((yyvsp[0].ival), (yylsp[0]), "PRIMARY KEY",
								   &n->deferrable, &n->initdeferred, NULL,
								   NULL, yyscanner);
					(yyval.node) = (PGNode *)n;
				}
#line 24620 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 557: /* ConstraintElem: FOREIGN KEY '(' columnList_opt_comma ')' REFERENCES qualified_name opt_column_list key_match key_actions ConstraintAttributeSpec  */
#line 652 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_FOREIGN;
					n->location = (yylsp[-10]);
					n->pktable			= (yyvsp[-4].range);
					n->fk_attrs			= (yyvsp[-7].list);
					n->pk_attrs			= (yyvsp[-3].list);
					n->fk_matchtype		= (yyvsp[-2].ival);
					n->fk_upd_action	= (char) ((yyvsp[-1].ival) >> 8);
					n->fk_del_action	= (char) ((yyvsp[-1].ival) & 0xFF);
					processCASbits((yyvsp[0].ival), (yylsp[0]), "FOREIGN KEY",
								   &n->deferrable, &n->initdeferred,
								   &n->skip_validation, NULL,
								   yyscanner);
					n->initially_valid = !n->skip_validation;
					(yyval.node) = (PGNode *)n;
				}
#line 24642 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 558: /* TableElementList: TableElement  */
#line 674 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 24650 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 559: /* TableElementList: TableElementList ',' TableElement  */
#line 678 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 24658 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 560: /* key_match: MATCH FULL  */
#line 685 "third_party/libpg_query/grammar/statements/create.y"
                        {
				(yyval.ival) = PG_FKCONSTR_MATCH_FULL;
			}
#line 24666 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 561: /* key_match: MATCH PARTIAL  */
#line 689 "third_party/libpg_query/grammar/statements/create.y"
                        {
				ereport(ERROR,
						(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
						 errmsg("MATCH PARTIAL not yet implemented"),
						 parser_errposition((yylsp[-1]))));
				(yyval.ival) = PG_FKCONSTR_MATCH_PARTIAL;
			}
#line 24678 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 562: /* key_match: MATCH SIMPLE  */
#line 697 "third_party/libpg_query/grammar/statements/create.y"
                        {
				(yyval.ival) = PG_FKCONSTR_MATCH_SIMPLE;
			}
#line 24686 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 563: /* key_match: %empty  */
#line 701 "third_party/libpg_query/grammar/statements/create.y"
                        {
				(yyval.ival) = PG_FKCONSTR_MATCH_SIMPLE;
			}
#line 24694 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 564: /* TableLikeClause: LIKE qualified_name TableLikeOptionList  */
#line 709 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGTableLikeClause *n = makeNode(PGTableLikeClause);
					n->relation = (yyvsp[-1].range);
					n->options = (yyvsp[0].ival);
					(yyval.node) = (PGNode *)n;
				}
#line 24705 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 565: /* OptTemp: TEMPORARY  */
#line 718 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_RELPERSISTENCE_TEMP; }
#line 24711 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 566: /* OptTemp: TEMP  */
#line 719 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = PG_RELPERSISTENCE_TEMP; }
#line 24717 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 567: /* OptTemp: LOCAL TEMPORARY  */
#line 720 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_RELPERSISTENCE_TEMP; }
#line 24723 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 568: /* OptTemp: LOCAL TEMP  */
#line 721 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_RELPERSISTENCE_TEMP; }
#line 24729 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 569: /* OptTemp: GLOBAL TEMPORARY  */
#line 723 "third_party/libpg_query/grammar/statements/create.y"
                                {
					ereport(PGWARNING,
							(errmsg("GLOBAL is deprecated in temporary table creation"),
							 parser_errposition((yylsp[-1]))));
					(yyval.ival) = PG_RELPERSISTENCE_TEMP;
				}
#line 24740 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 570: /* OptTemp: GLOBAL TEMP  */
#line 730 "third_party/libpg_query/grammar/statements/create.y"
                                {
					ereport(PGWARNING,
							(errmsg("GLOBAL is deprecated in temporary table creation"),
							 parser_errposition((yylsp[-1]))));
					(yyval.ival) = PG_RELPERSISTENCE_TEMP;
				}
#line 24751 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 571: /* OptTemp: UNLOGGED  */
#line 736 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = PG_RELPERSISTENCE_UNLOGGED; }
#line 24757 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 572: /* OptTemp: %empty  */
#line 737 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = RELPERSISTENCE_PERMANENT; }
#line 24763 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 573: /* generated_when: ALWAYS  */
#line 742 "third_party/libpg_query/grammar/statements/create.y"
                                                { (yyval.ival) = PG_ATTRIBUTE_IDENTITY_ALWAYS; }
#line 24769 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 574: /* generated_when: BY DEFAULT  */
#line 743 "third_party/libpg_query/grammar/statements/create.y"
                                        { (yyval.ival) = ATTRIBUTE_IDENTITY_BY_DEFAULT; }
#line 24775 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 575: /* DropStmt: DROP drop_type_any_name IF_P EXISTS any_name_list opt_drop_behavior  */
#line 10 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-4].objtype);
					n->missing_ok = true;
					n->objects = (yyvsp[-1].list);
					n->behavior = (yyvsp[0].dbehavior);
					n->concurrent = false;
					(yyval.node) = (PGNode *)n;
				}
#line 24789 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 576: /* DropStmt: DROP drop_type_any_name any_name_list opt_drop_behavior  */
#line 20 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-2].objtype);
					n->missing_ok = false;
					n->objects = (yyvsp[-1].list);
					n->behavior = (yyvsp[0].dbehavior);
					n->concurrent = false;
					(yyval.node) = (PGNode *)n;
				}
#line 24803 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 577: /* DropStmt: DROP drop_type_name IF_P EXISTS name_list opt_drop_behavior  */
#line 30 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-4].objtype);
					n->missing_ok = true;
					n->objects = (yyvsp[-1].list);
					n->behavior = (yyvsp[0].dbehavior);
					n->concurrent = false;
					(yyval.node) = (PGNode *)n;
				}
#line 24817 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 578: /* DropStmt: DROP drop_type_name name_list opt_drop_behavior  */
#line 40 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-2].objtype);
					n->missing_ok = false;
					n->objects = (yyvsp[-1].list);
					n->behavior = (yyvsp[0].dbehavior);
					n->concurrent = false;
					(yyval.node) = (PGNode *)n;
				}
#line 24831 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 579: /* DropStmt: DROP drop_type_name_on_any_name name ON any_name opt_drop_behavior  */
#line 50 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-4].objtype);
					n->objects = list_make1(lappend((yyvsp[-1].list), makeString((yyvsp[-3].str))));
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = false;
					n->concurrent = false;
					(yyval.node) = (PGNode *) n;
				}
#line 24845 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 580: /* DropStmt: DROP drop_type_name_on_any_name IF_P EXISTS name ON any_name opt_drop_behavior  */
#line 60 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-6].objtype);
					n->objects = list_make1(lappend((yyvsp[-1].list), makeString((yyvsp[-3].str))));
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = true;
					n->concurrent = false;
					(yyval.node) = (PGNode *) n;
				}
#line 24859 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 581: /* DropStmt: DROP TYPE_P type_name_list opt_drop_behavior  */
#line 70 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = PG_OBJECT_TYPE;
					n->missing_ok = false;
					n->objects = (yyvsp[-1].list);
					n->behavior = (yyvsp[0].dbehavior);
					n->concurrent = false;
					(yyval.node) = (PGNode *) n;
				}
#line 24873 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 582: /* DropStmt: DROP TYPE_P IF_P EXISTS type_name_list opt_drop_behavior  */
#line 80 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = PG_OBJECT_TYPE;
					n->missing_ok = true;
					n->objects = (yyvsp[-1].list);
					n->behavior = (yyvsp[0].dbehavior);
					n->concurrent = false;
					(yyval.node) = (PGNode *) n;
				}
#line 24887 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 583: /* drop_type_any_name: TABLE  */
#line 93 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_TABLE; }
#line 24893 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 584: /* drop_type_any_name: SEQUENCE  */
#line 94 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_SEQUENCE; }
#line 24899 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 585: /* drop_type_any_name: FUNCTION  */
#line 95 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_FUNCTION; }
#line 24905 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 586: /* drop_type_any_name: MACRO  */
#line 96 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_FUNCTION; }
#line 24911 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 587: /* drop_type_any_name: MACRO TABLE  */
#line 97 "third_party/libpg_query/grammar/statements/drop.y"
                                                                { (yyval.objtype) = PG_OBJECT_TABLE_MACRO; }
#line 24917 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 588: /* drop_type_any_name: VIEW  */
#line 98 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_VIEW; }
#line 24923 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 589: /* drop_type_any_name: MATERIALIZED VIEW  */
#line 99 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_MATVIEW; }
#line 24929 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 590: /* drop_type_any_name: INDEX  */
#line 100 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_INDEX; }
#line 24935 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 591: /* drop_type_any_name: FOREIGN TABLE  */
#line 101 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_FOREIGN_TABLE; }
#line 24941 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 592: /* drop_type_any_name: COLLATION  */
#line 102 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_COLLATION; }
#line 24947 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 593: /* drop_type_any_name: CONVERSION_P  */
#line 103 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_CONVERSION; }
#line 24953 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 594: /* drop_type_any_name: SCHEMA  */
#line 104 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_SCHEMA; }
#line 24959 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 595: /* drop_type_any_name: STATISTICS  */
#line 105 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_STATISTIC_EXT; }
#line 24965 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 596: /* drop_type_any_name: TEXT_P SEARCH PARSER  */
#line 106 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                { (yyval.objtype) = PG_OBJECT_TSPARSER; }
#line 24971 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 597: /* drop_type_any_name: TEXT_P SEARCH DICTIONARY  */
#line 107 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                { (yyval.objtype) = PG_OBJECT_TSDICTIONARY; }
#line 24977 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 598: /* drop_type_any_name: TEXT_P SEARCH TEMPLATE  */
#line 108 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                { (yyval.objtype) = PG_OBJECT_TSTEMPLATE; }
#line 24983 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 599: /* drop_type_any_name: TEXT_P SEARCH CONFIGURATION  */
#line 109 "third_party/libpg_query/grammar/statements/drop.y"
                                                                        { (yyval.objtype) = PG_OBJECT_TSCONFIGURATION; }
#line 24989 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 600: /* drop_type_name: ACCESS METHOD  */
#line 114 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_ACCESS_METHOD; }
#line 24995 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 601: /* drop_type_name: EVENT TRIGGER  */
#line 115 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_EVENT_TRIGGER; }
#line 25001 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 602: /* drop_type_name: EXTENSION  */
#line 116 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_EXTENSION; }
#line 25007 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 603: /* drop_type_name: FOREIGN DATA_P WRAPPER  */
#line 117 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                { (yyval.objtype) = PG_OBJECT_FDW; }
#line 25013 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 604: /* drop_type_name: PUBLICATION  */
#line 118 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_PUBLICATION; }
#line 25019 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 605: /* drop_type_name: SERVER  */
#line 119 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_FOREIGN_SERVER; }
#line 25025 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 606: /* any_name_list: any_name  */
#line 124 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].list)); }
#line 25031 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 607: /* any_name_list: any_name_list ',' any_name  */
#line 125 "third_party/libpg_query/grammar/statements/drop.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].list)); }
#line 25037 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 608: /* opt_drop_behavior: CASCADE  */
#line 130 "third_party/libpg_query/grammar/statements/drop.y"
                                                                        { (yyval.dbehavior) = PG_DROP_CASCADE; }
#line 25043 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 609: /* opt_drop_behavior: RESTRICT  */
#line 131 "third_party/libpg_query/grammar/statements/drop.y"
                                                                        { (yyval.dbehavior) = PG_DROP_RESTRICT; }
#line 25049 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 610: /* opt_drop_behavior: %empty  */
#line 132 "third_party/libpg_query/grammar/statements/drop.y"
                                                                { (yyval.dbehavior) = PG_DROP_RESTRICT; /* default */ }
#line 25055 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 611: /* drop_type_name_on_any_name: POLICY  */
#line 137 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_POLICY; }
#line 25061 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 612: /* drop_type_name_on_any_name: RULE  */
#line 138 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_RULE; }
#line 25067 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 613: /* drop_type_name_on_any_name: TRIGGER  */
#line 139 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_TRIGGER; }
#line 25073 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 614: /* type_name_list: Typename  */
#line 142 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].typnam)); }
#line 25079 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 615: /* type_name_list: type_name_list ',' Typename  */
#line 143 "third_party/libpg_query/grammar/statements/drop.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].typnam)); }
#line 25085 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 616: /* CreateFunctionStmt: CREATE_P OptTemp macro_alias qualified_name param_list AS TABLE SelectStmt  */
#line 9 "third_party/libpg_query/grammar/statements/create_function.y"
                        {
				PGCreateFunctionStmt *n = makeNode(PGCreateFunctionStmt);
				(yyvsp[-4].range)->relpersistence = (yyvsp[-6].ival);
				n->name = (yyvsp[-4].range);
				n->params = (yyvsp[-3].list);
				n->function = NULL;
				n->query = (yyvsp[0].node);
				n->onconflict = PG_ERROR_ON_CONFLICT;
				(yyval.node) = (PGNode *)n;
			}
#line 25100 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 617: /* CreateFunctionStmt: CREATE_P OptTemp macro_alias IF_P NOT EXISTS qualified_name param_list AS TABLE SelectStmt  */
#line 21 "third_party/libpg_query/grammar/statements/create_function.y"
                        {
				PGCreateFunctionStmt *n = makeNode(PGCreateFunctionStmt);
				(yyvsp[-4].range)->relpersistence = (yyvsp[-9].ival);
				n->name = (yyvsp[-4].range);
				n->params = (yyvsp[-3].list);
				n->function = NULL;
				n->query = (yyvsp[0].node);
				n->onconflict = PG_IGNORE_ON_CONFLICT;
				(yyval.node) = (PGNode *)n;

			}
#line 25116 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 618: /* CreateFunctionStmt: CREATE_P OR REPLACE OptTemp macro_alias qualified_name param_list AS TABLE SelectStmt  */
#line 34 "third_party/libpg_query/grammar/statements/create_function.y"
                        {
				PGCreateFunctionStmt *n = makeNode(PGCreateFunctionStmt);
				(yyvsp[-4].range)->relpersistence = (yyvsp[-6].ival);
				n->name = (yyvsp[-4].range);
				n->params = (yyvsp[-3].list);
				n->function = NULL;
				n->query = (yyvsp[0].node);
				n->onconflict = PG_REPLACE_ON_CONFLICT;
				(yyval.node) = (PGNode *)n;

			}
#line 25132 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 619: /* CreateFunctionStmt: CREATE_P OptTemp macro_alias qualified_name param_list AS a_expr  */
#line 47 "third_party/libpg_query/grammar/statements/create_function.y"
                         {
				PGCreateFunctionStmt *n = makeNode(PGCreateFunctionStmt);
				(yyvsp[-3].range)->relpersistence = (yyvsp[-5].ival);
				n->name = (yyvsp[-3].range);
				n->params = (yyvsp[-2].list);
				n->function = (yyvsp[0].node);
				n->query = NULL;
				n->onconflict = PG_ERROR_ON_CONFLICT;
				(yyval.node) = (PGNode *)n;
                         }
#line 25147 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 620: /* CreateFunctionStmt: CREATE_P OptTemp macro_alias IF_P NOT EXISTS qualified_name param_list AS a_expr  */
#line 59 "third_party/libpg_query/grammar/statements/create_function.y"
                         {
				PGCreateFunctionStmt *n = makeNode(PGCreateFunctionStmt);
				(yyvsp[-3].range)->relpersistence = (yyvsp[-8].ival);
				n->name = (yyvsp[-3].range);
				n->params = (yyvsp[-2].list);
				n->function = (yyvsp[0].node);
				n->query = NULL;
				n->onconflict = PG_IGNORE_ON_CONFLICT;
				(yyval.node) = (PGNode *)n;
			 }
#line 25162 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 621: /* CreateFunctionStmt: CREATE_P OR REPLACE OptTemp macro_alias qualified_name param_list AS a_expr  */
#line 71 "third_party/libpg_query/grammar/statements/create_function.y"
                         {
				PGCreateFunctionStmt *n = makeNode(PGCreateFunctionStmt);
				(yyvsp[-3].range)->relpersistence = (yyvsp[-5].ival);
				n->name = (yyvsp[-3].range);
				n->params = (yyvsp[-2].list);
				n->function = (yyvsp[0].node);
				n->query = NULL;
				n->onconflict = PG_REPLACE_ON_CONFLICT;
				(yyval.node) = (PGNode *)n;
			 }
#line 25177 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 624: /* param_list: '(' ')'  */
#line 92 "third_party/libpg_query/grammar/statements/create_function.y"
                        {
				(yyval.list) = NIL;
			}
#line 25185 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 625: /* param_list: '(' func_arg_list ')'  */
#line 96 "third_party/libpg_query/grammar/statements/create_function.y"
                        {
				(yyval.list) = (yyvsp[-1].list);
			}
#line 25193 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 626: /* UpdateStmt: opt_with_clause UPDATE relation_expr_opt_alias SET set_clause_list_opt_comma from_clause where_or_current_clause returning_clause  */
#line 12 "third_party/libpg_query/grammar/statements/update.y"
                                {
					PGUpdateStmt *n = makeNode(PGUpdateStmt);
					n->relation = (yyvsp[-5].range);
					n->targetList = (yyvsp[-3].list);
					n->fromClause = (yyvsp[-2].list);
					n->whereClause = (yyvsp[-1].node);
					n->returningList = (yyvsp[0].list);
					n->withClause = (yyvsp[-7].with);
					(yyval.node) = (PGNode *)n;
				}
#line 25208 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 627: /* CopyStmt: COPY opt_binary qualified_name opt_column_list opt_oids copy_from opt_program copy_file_name copy_delimiter opt_with copy_options  */
#line 3 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					PGCopyStmt *n = makeNode(PGCopyStmt);
					n->relation = (yyvsp[-8].range);
					n->query = NULL;
					n->attlist = (yyvsp[-7].list);
					n->is_from = (yyvsp[-5].boolean);
					n->is_program = (yyvsp[-4].boolean);
					n->filename = (yyvsp[-3].str);

					if (n->is_program && n->filename == NULL)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("STDIN/STDOUT not allowed with PROGRAM"),
								 parser_errposition((yylsp[-3]))));

					n->options = NIL;
					/* Concatenate user-supplied flags */
					if ((yyvsp[-9].defelt))
						n->options = lappend(n->options, (yyvsp[-9].defelt));
					if ((yyvsp[-6].defelt))
						n->options = lappend(n->options, (yyvsp[-6].defelt));
					if ((yyvsp[-2].defelt))
						n->options = lappend(n->options, (yyvsp[-2].defelt));
					if ((yyvsp[0].list))
						n->options = list_concat(n->options, (yyvsp[0].list));
					(yyval.node) = (PGNode *)n;
				}
#line 25240 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 628: /* CopyStmt: COPY '(' SelectStmt ')' TO opt_program copy_file_name opt_with copy_options  */
#line 31 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					PGCopyStmt *n = makeNode(PGCopyStmt);
					n->relation = NULL;
					n->query = (yyvsp[-6].node);
					n->attlist = NIL;
					n->is_from = false;
					n->is_program = (yyvsp[-3].boolean);
					n->filename = (yyvsp[-2].str);
					n->options = (yyvsp[0].list);

					if (n->is_program && n->filename == NULL)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("STDIN/STDOUT not allowed with PROGRAM"),
								 parser_errposition((yylsp[-4]))));

					(yyval.node) = (PGNode *)n;
				}
#line 25263 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 629: /* copy_from: FROM  */
#line 53 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.boolean) = true; }
#line 25269 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 630: /* copy_from: TO  */
#line 54 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.boolean) = false; }
#line 25275 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 631: /* copy_delimiter: opt_using DELIMITERS Sconst  */
#line 60 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("delimiter", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-1]));
				}
#line 25283 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 632: /* copy_delimiter: %empty  */
#line 63 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.defelt) = NULL; }
#line 25289 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 633: /* copy_generic_opt_arg_list: copy_generic_opt_arg_list_item  */
#line 69 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 25297 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 634: /* copy_generic_opt_arg_list: copy_generic_opt_arg_list ',' copy_generic_opt_arg_list_item  */
#line 73 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 25305 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 635: /* opt_using: USING  */
#line 80 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                {}
#line 25311 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 636: /* opt_using: %empty  */
#line 81 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                {}
#line 25317 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 637: /* opt_as: AS  */
#line 85 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                {}
#line 25323 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 638: /* opt_as: %empty  */
#line 86 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                        {}
#line 25329 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 639: /* opt_program: PROGRAM  */
#line 91 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.boolean) = true; }
#line 25335 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 640: /* opt_program: %empty  */
#line 92 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                        { (yyval.boolean) = false; }
#line 25341 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 641: /* copy_options: copy_opt_list  */
#line 96 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 25347 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 642: /* copy_options: '(' copy_generic_opt_list ')'  */
#line 97 "third_party/libpg_query/grammar/statements/copy.y"
                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 25353 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 643: /* copy_generic_opt_arg: opt_boolean_or_string  */
#line 102 "third_party/libpg_query/grammar/statements/copy.y"
                                                                { (yyval.node) = (PGNode *) makeString((yyvsp[0].str)); }
#line 25359 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 644: /* copy_generic_opt_arg: NumericOnly  */
#line 103 "third_party/libpg_query/grammar/statements/copy.y"
                                                                        { (yyval.node) = (PGNode *) (yyvsp[0].value); }
#line 25365 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 645: /* copy_generic_opt_arg: '*'  */
#line 104 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                { (yyval.node) = (PGNode *) makeNode(PGAStar); }
#line 25371 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 646: /* copy_generic_opt_arg: '(' copy_generic_opt_arg_list ')'  */
#line 105 "third_party/libpg_query/grammar/statements/copy.y"
                                                                        { (yyval.node) = (PGNode *) (yyvsp[-1].list); }
#line 25377 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 647: /* copy_generic_opt_arg: struct_expr  */
#line 106 "third_party/libpg_query/grammar/statements/copy.y"
                                                                        { (yyval.node) = (PGNode *) (yyvsp[0].node); }
#line 25383 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 648: /* copy_generic_opt_arg: %empty  */
#line 107 "third_party/libpg_query/grammar/statements/copy.y"
                                                                        { (yyval.node) = NULL; }
#line 25389 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 649: /* copy_generic_opt_elem: ColLabel copy_generic_opt_arg  */
#line 113 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[-1].str), (yyvsp[0].node), (yylsp[-1]));
				}
#line 25397 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 650: /* opt_oids: WITH OIDS  */
#line 121 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("oids", (PGNode *)makeInteger(true), (yylsp[-1]));
				}
#line 25405 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 651: /* opt_oids: %empty  */
#line 124 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.defelt) = NULL; }
#line 25411 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 652: /* copy_opt_list: copy_opt_list copy_opt_item  */
#line 129 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].defelt)); }
#line 25417 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 653: /* copy_opt_list: %empty  */
#line 130 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                        { (yyval.list) = NIL; }
#line 25423 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 654: /* opt_binary: BINARY  */
#line 136 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("format", (PGNode *)makeString("binary"), (yylsp[0]));
				}
#line 25431 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 655: /* opt_binary: %empty  */
#line 139 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.defelt) = NULL; }
#line 25437 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 656: /* copy_opt_item: BINARY  */
#line 145 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("format", (PGNode *)makeString("binary"), (yylsp[0]));
				}
#line 25445 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 657: /* copy_opt_item: OIDS  */
#line 149 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("oids", (PGNode *)makeInteger(true), (yylsp[0]));
				}
#line 25453 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 658: /* copy_opt_item: FREEZE  */
#line 153 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("freeze", (PGNode *)makeInteger(true), (yylsp[0]));
				}
#line 25461 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 659: /* copy_opt_item: DELIMITER opt_as Sconst  */
#line 157 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("delimiter", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-2]));
				}
#line 25469 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 660: /* copy_opt_item: NULL_P opt_as Sconst  */
#line 161 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("null", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-2]));
				}
#line 25477 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 661: /* copy_opt_item: CSV  */
#line 165 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("format", (PGNode *)makeString("csv"), (yylsp[0]));
				}
#line 25485 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 662: /* copy_opt_item: HEADER_P  */
#line 169 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("header", (PGNode *)makeInteger(true), (yylsp[0]));
				}
#line 25493 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 663: /* copy_opt_item: QUOTE opt_as Sconst  */
#line 173 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("quote", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-2]));
				}
#line 25501 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 664: /* copy_opt_item: ESCAPE opt_as Sconst  */
#line 177 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("escape", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-2]));
				}
#line 25509 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 665: /* copy_opt_item: FORCE QUOTE columnList  */
#line 181 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("force_quote", (PGNode *)(yyvsp[0].list), (yylsp[-2]));
				}
#line 25517 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 666: /* copy_opt_item: FORCE QUOTE '*'  */
#line 185 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("force_quote", (PGNode *)makeNode(PGAStar), (yylsp[-2]));
				}
#line 25525 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 667: /* copy_opt_item: PARTITION BY columnList  */
#line 189 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("partition_by", (PGNode *)(yyvsp[0].list), (yylsp[-2]));
				}
#line 25533 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 668: /* copy_opt_item: PARTITION BY '*'  */
#line 193 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("partition_by", (PGNode *)makeNode(PGAStar), (yylsp[-2]));
				}
#line 25541 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 669: /* copy_opt_item: FORCE NOT NULL_P columnList  */
#line 197 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("force_not_null", (PGNode *)(yyvsp[0].list), (yylsp[-3]));
				}
#line 25549 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 670: /* copy_opt_item: FORCE NULL_P columnList  */
#line 201 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("force_null", (PGNode *)(yyvsp[0].list), (yylsp[-2]));
				}
#line 25557 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 671: /* copy_opt_item: ENCODING Sconst  */
#line 205 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("encoding", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-1]));
				}
#line 25565 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 672: /* copy_generic_opt_arg_list_item: opt_boolean_or_string  */
#line 212 "third_party/libpg_query/grammar/statements/copy.y"
                                                { (yyval.node) = (PGNode *) makeString((yyvsp[0].str)); }
#line 25571 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 673: /* copy_file_name: Sconst  */
#line 218 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 25577 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 674: /* copy_file_name: STDIN  */
#line 219 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.str) = NULL; }
#line 25583 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 675: /* copy_file_name: STDOUT  */
#line 220 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.str) = NULL; }
#line 25589 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 676: /* copy_generic_opt_list: copy_generic_opt_elem  */
#line 226 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].defelt));
				}
#line 25597 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 677: /* copy_generic_opt_list: copy_generic_opt_list ',' copy_generic_opt_elem  */
#line 230 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt));
				}
#line 25605 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 680: /* select_with_parens: '(' select_no_parens ')'  */
#line 52 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[-1].node); }
#line 25611 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 681: /* select_with_parens: '(' select_with_parens ')'  */
#line 53 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.node) = (yyvsp[-1].node); }
#line 25617 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 682: /* select_no_parens: simple_select  */
#line 68 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 25623 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 683: /* select_no_parens: select_clause sort_clause  */
#line 70 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-1].node), (yyvsp[0].list), NIL,
										NULL, NULL, NULL,
										yyscanner);
					(yyval.node) = (yyvsp[-1].node);
				}
#line 25634 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 684: /* select_no_parens: select_clause opt_sort_clause for_locking_clause opt_select_limit  */
#line 77 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-3].node), (yyvsp[-2].list), (yyvsp[-1].list),
										(PGNode*) list_nth((yyvsp[0].list), 0), (PGNode*) list_nth((yyvsp[0].list), 1),
										NULL,
										yyscanner);
					(yyval.node) = (yyvsp[-3].node);
				}
#line 25646 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 685: /* select_no_parens: select_clause opt_sort_clause select_limit opt_for_locking_clause  */
#line 85 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-3].node), (yyvsp[-2].list), (yyvsp[0].list),
										(PGNode*) list_nth((yyvsp[-1].list), 0), (PGNode*) list_nth((yyvsp[-1].list), 1),
										NULL,
										yyscanner);
					(yyval.node) = (yyvsp[-3].node);
				}
#line 25658 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 686: /* select_no_parens: with_clause select_clause  */
#line 93 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[0].node), NULL, NIL,
										NULL, NULL,
										(yyvsp[-1].with),
										yyscanner);
					(yyval.node) = (yyvsp[0].node);
				}
#line 25670 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 687: /* select_no_parens: with_clause select_clause sort_clause  */
#line 101 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-1].node), (yyvsp[0].list), NIL,
										NULL, NULL,
										(yyvsp[-2].with),
										yyscanner);
					(yyval.node) = (yyvsp[-1].node);
				}
#line 25682 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 688: /* select_no_parens: with_clause select_clause opt_sort_clause for_locking_clause opt_select_limit  */
#line 109 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-3].node), (yyvsp[-2].list), (yyvsp[-1].list),
										(PGNode*) list_nth((yyvsp[0].list), 0), (PGNode*) list_nth((yyvsp[0].list), 1),
										(yyvsp[-4].with),
										yyscanner);
					(yyval.node) = (yyvsp[-3].node);
				}
#line 25694 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 689: /* select_no_parens: with_clause select_clause opt_sort_clause select_limit opt_for_locking_clause  */
#line 117 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-3].node), (yyvsp[-2].list), (yyvsp[0].list),
										(PGNode*) list_nth((yyvsp[-1].list), 0), (PGNode*) list_nth((yyvsp[-1].list), 1),
										(yyvsp[-4].with),
										yyscanner);
					(yyval.node) = (yyvsp[-3].node);
				}
#line 25706 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 690: /* select_clause: simple_select  */
#line 127 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 25712 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 691: /* select_clause: select_with_parens  */
#line 128 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 25718 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 692: /* opt_select: SELECT opt_all_clause opt_target_list_opt_comma  */
#line 156 "third_party/libpg_query/grammar/statements/select.y"
                        {
				(yyval.list) = (yyvsp[0].list);
			}
#line 25726 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 693: /* opt_select: %empty  */
#line 160 "third_party/libpg_query/grammar/statements/select.y"
                        {
				PGAStar *star = makeNode(PGAStar);
				(yyval.list) = list_make1(star);
			}
#line 25735 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 694: /* simple_select: SELECT opt_all_clause opt_target_list_opt_comma into_clause from_clause where_clause group_clause having_clause window_clause qualify_clause sample_clause  */
#line 171 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *n = makeNode(PGSelectStmt);
					n->targetList = (yyvsp[-8].list);
					n->intoClause = (yyvsp[-7].into);
					n->fromClause = (yyvsp[-6].list);
					n->whereClause = (yyvsp[-5].node);
					n->groupClause = (yyvsp[-4].list);
					n->havingClause = (yyvsp[-3].node);
					n->windowClause = (yyvsp[-2].list);
					n->qualifyClause = (yyvsp[-1].node);
					n->sampleOptions = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 25753 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 695: /* simple_select: SELECT distinct_clause target_list_opt_comma into_clause from_clause where_clause group_clause having_clause window_clause qualify_clause sample_clause  */
#line 187 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *n = makeNode(PGSelectStmt);
					n->distinctClause = (yyvsp[-9].list);
					n->targetList = (yyvsp[-8].list);
					n->intoClause = (yyvsp[-7].into);
					n->fromClause = (yyvsp[-6].list);
					n->whereClause = (yyvsp[-5].node);
					n->groupClause = (yyvsp[-4].list);
					n->havingClause = (yyvsp[-3].node);
					n->windowClause = (yyvsp[-2].list);
					n->qualifyClause = (yyvsp[-1].node);
					n->sampleOptions = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 25772 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 696: /* simple_select: FROM from_list opt_select into_clause where_clause group_clause having_clause window_clause qualify_clause sample_clause  */
#line 204 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *n = makeNode(PGSelectStmt);
					n->targetList = (yyvsp[-7].list);
					n->fromClause = (yyvsp[-8].list);
					n->intoClause = (yyvsp[-6].into);
					n->whereClause = (yyvsp[-5].node);
					n->groupClause = (yyvsp[-4].list);
					n->havingClause = (yyvsp[-3].node);
					n->windowClause = (yyvsp[-2].list);
					n->qualifyClause = (yyvsp[-1].node);
					n->sampleOptions = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 25790 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 697: /* simple_select: FROM from_list SELECT distinct_clause target_list_opt_comma into_clause where_clause group_clause having_clause window_clause qualify_clause sample_clause  */
#line 221 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *n = makeNode(PGSelectStmt);
					n->targetList = (yyvsp[-7].list);
					n->distinctClause = (yyvsp[-8].list);
					n->fromClause = (yyvsp[-10].list);
					n->intoClause = (yyvsp[-6].into);
					n->whereClause = (yyvsp[-5].node);
					n->groupClause = (yyvsp[-4].list);
					n->havingClause = (yyvsp[-3].node);
					n->windowClause = (yyvsp[-2].list);
					n->qualifyClause = (yyvsp[-1].node);
					n->sampleOptions = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 25809 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 698: /* simple_select: values_clause_opt_comma  */
#line 235 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 25815 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 699: /* simple_select: TABLE relation_expr  */
#line 237 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* same as SELECT * FROM relation_expr */
					PGColumnRef *cr = makeNode(PGColumnRef);
					PGResTarget *rt = makeNode(PGResTarget);
					PGSelectStmt *n = makeNode(PGSelectStmt);

					cr->fields = list_make1(makeNode(PGAStar));
					cr->location = -1;

					rt->name = NULL;
					rt->indirection = NIL;
					rt->val = (PGNode *)cr;
					rt->location = -1;

					n->targetList = list_make1(rt);
					n->fromClause = list_make1((yyvsp[0].range));
					(yyval.node) = (PGNode *)n;
				}
#line 25838 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 700: /* simple_select: select_clause UNION all_or_distinct by_name select_clause  */
#line 256 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSetOp(PG_SETOP_UNION_BY_NAME, (yyvsp[-2].boolean), (yyvsp[-4].node), (yyvsp[0].node));
				}
#line 25846 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 701: /* simple_select: select_clause UNION all_or_distinct select_clause  */
#line 260 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSetOp(PG_SETOP_UNION, (yyvsp[-1].boolean), (yyvsp[-3].node), (yyvsp[0].node));
				}
#line 25854 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 702: /* simple_select: select_clause INTERSECT all_or_distinct select_clause  */
#line 264 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSetOp(PG_SETOP_INTERSECT, (yyvsp[-1].boolean), (yyvsp[-3].node), (yyvsp[0].node));
				}
#line 25862 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 703: /* simple_select: select_clause EXCEPT all_or_distinct select_clause  */
#line 268 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSetOp(PG_SETOP_EXCEPT, (yyvsp[-1].boolean), (yyvsp[-3].node), (yyvsp[0].node));
				}
#line 25870 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 704: /* simple_select: pivot_keyword table_ref USING target_list_opt_comma  */
#line 272 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *res = makeNode(PGSelectStmt);
					PGPivotStmt *n = makeNode(PGPivotStmt);
					n->source = (yyvsp[-2].node);
					n->aggrs = (yyvsp[0].list);
					res->pivot = n;
					(yyval.node) = (PGNode *)res;
				}
#line 25883 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 705: /* simple_select: pivot_keyword table_ref USING target_list_opt_comma GROUP_P BY name_list_opt_comma_opt_bracket  */
#line 281 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *res = makeNode(PGSelectStmt);
					PGPivotStmt *n = makeNode(PGPivotStmt);
					n->source = (yyvsp[-5].node);
					n->aggrs = (yyvsp[-3].list);
					n->groups = (yyvsp[0].list);
					res->pivot = n;
					(yyval.node) = (PGNode *)res;
				}
#line 25897 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 706: /* simple_select: pivot_keyword table_ref GROUP_P BY name_list_opt_comma_opt_bracket  */
#line 291 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *res = makeNode(PGSelectStmt);
					PGPivotStmt *n = makeNode(PGPivotStmt);
					n->source = (yyvsp[-3].node);
					n->groups = (yyvsp[0].list);
					res->pivot = n;
					(yyval.node) = (PGNode *)res;
				}
#line 25910 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 707: /* simple_select: pivot_keyword table_ref ON pivot_column_list  */
#line 300 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *res = makeNode(PGSelectStmt);
					PGPivotStmt *n = makeNode(PGPivotStmt);
					n->source = (yyvsp[-2].node);
					n->columns = (yyvsp[0].list);
					res->pivot = n;
					(yyval.node) = (PGNode *)res;
				}
#line 25923 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 708: /* simple_select: pivot_keyword table_ref ON pivot_column_list GROUP_P BY name_list_opt_comma_opt_bracket  */
#line 309 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *res = makeNode(PGSelectStmt);
					PGPivotStmt *n = makeNode(PGPivotStmt);
					n->source = (yyvsp[-5].node);
					n->columns = (yyvsp[-3].list);
					n->groups = (yyvsp[0].list);
					res->pivot = n;
					(yyval.node) = (PGNode *)res;
				}
#line 25937 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 709: /* simple_select: pivot_keyword table_ref ON pivot_column_list USING target_list_opt_comma  */
#line 319 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *res = makeNode(PGSelectStmt);
					PGPivotStmt *n = makeNode(PGPivotStmt);
					n->source = (yyvsp[-4].node);
					n->columns = (yyvsp[-2].list);
					n->aggrs = (yyvsp[0].list);
					res->pivot = n;
					(yyval.node) = (PGNode *)res;
				}
#line 25951 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 710: /* simple_select: pivot_keyword table_ref ON pivot_column_list USING target_list_opt_comma GROUP_P BY name_list_opt_comma_opt_bracket  */
#line 329 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *res = makeNode(PGSelectStmt);
					PGPivotStmt *n = makeNode(PGPivotStmt);
					n->source = (yyvsp[-7].node);
					n->columns = (yyvsp[-5].list);
					n->aggrs = (yyvsp[-3].list);
					n->groups = (yyvsp[0].list);
					res->pivot = n;
					(yyval.node) = (PGNode *)res;
				}
#line 25966 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 711: /* simple_select: unpivot_keyword table_ref ON target_list_opt_comma INTO NAME_P name value_or_values name_list_opt_comma_opt_bracket  */
#line 340 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *res = makeNode(PGSelectStmt);
					PGPivotStmt *n = makeNode(PGPivotStmt);
					n->source = (yyvsp[-7].node);
					n->unpivots = (yyvsp[0].list);
					PGPivot *piv = makeNode(PGPivot);
					piv->unpivot_columns = list_make1(makeString((yyvsp[-2].str)));
					piv->pivot_value = (yyvsp[-5].list);
					n->columns = list_make1(piv);

					res->pivot = n;
					(yyval.node) = (PGNode *)res;
				}
#line 25984 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 712: /* simple_select: unpivot_keyword table_ref ON target_list_opt_comma  */
#line 354 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *res = makeNode(PGSelectStmt);
					PGPivotStmt *n = makeNode(PGPivotStmt);
					n->source = (yyvsp[-2].node);
					n->unpivots = list_make1(makeString("value"));
					PGPivot *piv = makeNode(PGPivot);
					piv->unpivot_columns = list_make1(makeString("name"));
					piv->pivot_value = (yyvsp[0].list);
					n->columns = list_make1(piv);

					res->pivot = n;
					(yyval.node) = (PGNode *)res;
				}
#line 26002 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 719: /* pivot_column_entry: b_expr  */
#line 383 "third_party/libpg_query/grammar/statements/select.y"
                        {
				PGPivot *n = makeNode(PGPivot);
				n->pivot_columns = list_make1((yyvsp[0].node));
				(yyval.node) = (PGNode *) n;
			}
#line 26012 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 720: /* pivot_column_entry: b_expr IN_P '(' select_no_parens ')'  */
#line 389 "third_party/libpg_query/grammar/statements/select.y"
                        {
				PGPivot *n = makeNode(PGPivot);
				n->pivot_columns = list_make1((yyvsp[-4].node));
				n->subquery = (yyvsp[-1].node);
				(yyval.node) = (PGNode *) n;
			}
#line 26023 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 721: /* pivot_column_entry: single_pivot_value  */
#line 395 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 26029 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 722: /* pivot_column_list_internal: pivot_column_entry  */
#line 399 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 26035 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 723: /* pivot_column_list_internal: pivot_column_list_internal ',' pivot_column_entry  */
#line 400 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 26041 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 724: /* pivot_column_list: pivot_column_list_internal  */
#line 404 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 26047 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 725: /* pivot_column_list: pivot_column_list_internal ','  */
#line 405 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 26053 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 726: /* with_clause: WITH cte_list  */
#line 420 "third_party/libpg_query/grammar/statements/select.y"
                        {
				(yyval.with) = makeNode(PGWithClause);
				(yyval.with)->ctes = (yyvsp[0].list);
				(yyval.with)->recursive = false;
				(yyval.with)->location = (yylsp[-1]);
			}
#line 26064 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 727: /* with_clause: WITH_LA cte_list  */
#line 427 "third_party/libpg_query/grammar/statements/select.y"
                        {
				(yyval.with) = makeNode(PGWithClause);
				(yyval.with)->ctes = (yyvsp[0].list);
				(yyval.with)->recursive = false;
				(yyval.with)->location = (yylsp[-1]);
			}
#line 26075 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 728: /* with_clause: WITH RECURSIVE cte_list  */
#line 434 "third_party/libpg_query/grammar/statements/select.y"
                        {
				(yyval.with) = makeNode(PGWithClause);
				(yyval.with)->ctes = (yyvsp[0].list);
				(yyval.with)->recursive = true;
				(yyval.with)->location = (yylsp[-2]);
			}
#line 26086 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 729: /* cte_list: common_table_expr  */
#line 443 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 26092 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 730: /* cte_list: cte_list ',' common_table_expr  */
#line 444 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 26098 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 731: /* common_table_expr: name opt_name_list AS opt_materialized '(' PreparableStmt ')'  */
#line 448 "third_party/libpg_query/grammar/statements/select.y"
                        {
				PGCommonTableExpr *n = makeNode(PGCommonTableExpr);
				n->ctename = (yyvsp[-6].str);
				n->aliascolnames = (yyvsp[-5].list);
				n->ctematerialized = (yyvsp[-3].ctematerialize);
				n->ctequery = (yyvsp[-1].node);
				n->location = (yylsp[-6]);
				(yyval.node) = (PGNode *) n;
			}
#line 26112 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 732: /* opt_materialized: MATERIALIZED  */
#line 460 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.ctematerialize) = PGCTEMaterializeAlways; }
#line 26118 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 733: /* opt_materialized: NOT MATERIALIZED  */
#line 461 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.ctematerialize) = PGCTEMaterializeNever; }
#line 26124 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 734: /* opt_materialized: %empty  */
#line 462 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.ctematerialize) = PGCTEMaterializeDefault; }
#line 26130 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 735: /* into_clause: INTO OptTempTableName  */
#line 467 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.into) = makeNode(PGIntoClause);
					(yyval.into)->rel = (yyvsp[0].range);
					(yyval.into)->colNames = NIL;
					(yyval.into)->options = NIL;
					(yyval.into)->onCommit = PG_ONCOMMIT_NOOP;
					(yyval.into)->viewQuery = NULL;
					(yyval.into)->skipData = false;
				}
#line 26144 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 736: /* into_clause: %empty  */
#line 477 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.into) = NULL; }
#line 26150 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 737: /* OptTempTableName: TEMPORARY opt_table qualified_name  */
#line 486 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 26159 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 738: /* OptTempTableName: TEMP opt_table qualified_name  */
#line 491 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 26168 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 739: /* OptTempTableName: LOCAL TEMPORARY opt_table qualified_name  */
#line 496 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 26177 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 740: /* OptTempTableName: LOCAL TEMP opt_table qualified_name  */
#line 501 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 26186 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 741: /* OptTempTableName: GLOBAL TEMPORARY opt_table qualified_name  */
#line 506 "third_party/libpg_query/grammar/statements/select.y"
                                {
					ereport(PGWARNING,
							(errmsg("GLOBAL is deprecated in temporary table creation"),
							 parser_errposition((yylsp[-3]))));
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 26198 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 742: /* OptTempTableName: GLOBAL TEMP opt_table qualified_name  */
#line 514 "third_party/libpg_query/grammar/statements/select.y"
                                {
					ereport(PGWARNING,
							(errmsg("GLOBAL is deprecated in temporary table creation"),
							 parser_errposition((yylsp[-3]))));
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 26210 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 743: /* OptTempTableName: UNLOGGED opt_table qualified_name  */
#line 522 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_UNLOGGED;
				}
#line 26219 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 744: /* OptTempTableName: TABLE qualified_name  */
#line 527 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = RELPERSISTENCE_PERMANENT;
				}
#line 26228 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 745: /* OptTempTableName: qualified_name  */
#line 532 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = RELPERSISTENCE_PERMANENT;
				}
#line 26237 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 746: /* opt_table: TABLE  */
#line 538 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        {}
#line 26243 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 747: /* opt_table: %empty  */
#line 539 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                {}
#line 26249 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 748: /* all_or_distinct: ALL  */
#line 543 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.boolean) = true; }
#line 26255 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 749: /* all_or_distinct: DISTINCT  */
#line 544 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 26261 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 750: /* all_or_distinct: %empty  */
#line 545 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 26267 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 751: /* by_name: BY NAME_P  */
#line 549 "third_party/libpg_query/grammar/statements/select.y"
                                                          { }
#line 26273 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 752: /* distinct_clause: DISTINCT  */
#line 556 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1(NIL); }
#line 26279 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 753: /* distinct_clause: DISTINCT ON '(' expr_list_opt_comma ')'  */
#line 557 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 26285 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 754: /* opt_all_clause: ALL  */
#line 561 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.list) = NIL;}
#line 26291 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 755: /* opt_all_clause: %empty  */
#line 562 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 26297 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 756: /* opt_ignore_nulls: IGNORE_P NULLS_P  */
#line 566 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.boolean) = true;}
#line 26303 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 757: /* opt_ignore_nulls: RESPECT_P NULLS_P  */
#line 567 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.boolean) = false;}
#line 26309 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 758: /* opt_ignore_nulls: %empty  */
#line 568 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 26315 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 759: /* opt_sort_clause: sort_clause  */
#line 572 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list);}
#line 26321 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 760: /* opt_sort_clause: %empty  */
#line 573 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 26327 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 761: /* sort_clause: ORDER BY sortby_list  */
#line 577 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 26333 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 762: /* sort_clause: ORDER BY ALL opt_asc_desc opt_nulls_order  */
#line 579 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSortBy *sort = makeNode(PGSortBy);
					PGAStar *star = makeNode(PGAStar);
					star->columns = true;
					star->location = (yylsp[-2]);
					sort->node = (PGNode *) star;
					sort->sortby_dir = (yyvsp[-1].sortorder);
					sort->sortby_nulls = (yyvsp[0].nullorder);
					sort->useOp = NIL;
					sort->location = -1;		/* no operator */
					(yyval.list) = list_make1(sort);
				}
#line 26350 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 763: /* sortby_list: sortby  */
#line 594 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].sortby)); }
#line 26356 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 764: /* sortby_list: sortby_list ',' sortby  */
#line 595 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].sortby)); }
#line 26362 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 765: /* sortby: a_expr USING qual_all_Op opt_nulls_order  */
#line 599 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.sortby) = makeNode(PGSortBy);
					(yyval.sortby)->node = (yyvsp[-3].node);
					(yyval.sortby)->sortby_dir = SORTBY_USING;
					(yyval.sortby)->sortby_nulls = (yyvsp[0].nullorder);
					(yyval.sortby)->useOp = (yyvsp[-1].list);
					(yyval.sortby)->location = (yylsp[-1]);
				}
#line 26375 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 766: /* sortby: a_expr opt_asc_desc opt_nulls_order  */
#line 608 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.sortby) = makeNode(PGSortBy);
					(yyval.sortby)->node = (yyvsp[-2].node);
					(yyval.sortby)->sortby_dir = (yyvsp[-1].sortorder);
					(yyval.sortby)->sortby_nulls = (yyvsp[0].nullorder);
					(yyval.sortby)->useOp = NIL;
					(yyval.sortby)->location = -1;		/* no operator */
				}
#line 26388 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 767: /* opt_asc_desc: ASC_P  */
#line 618 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.sortorder) = PG_SORTBY_ASC; }
#line 26394 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 768: /* opt_asc_desc: DESC_P  */
#line 619 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.sortorder) = PG_SORTBY_DESC; }
#line 26400 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 769: /* opt_asc_desc: %empty  */
#line 620 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.sortorder) = PG_SORTBY_DEFAULT; }
#line 26406 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 770: /* opt_nulls_order: NULLS_LA FIRST_P  */
#line 623 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.nullorder) = PG_SORTBY_NULLS_FIRST; }
#line 26412 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 771: /* opt_nulls_order: NULLS_LA LAST_P  */
#line 624 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.nullorder) = PG_SORTBY_NULLS_LAST; }
#line 26418 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 772: /* opt_nulls_order: %empty  */
#line 625 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.nullorder) = PG_SORTBY_NULLS_DEFAULT; }
#line 26424 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 773: /* select_limit: limit_clause offset_clause  */
#line 629 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = list_make2((yyvsp[0].node), (yyvsp[-1].node)); }
#line 26430 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 774: /* select_limit: offset_clause limit_clause  */
#line 630 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = list_make2((yyvsp[-1].node), (yyvsp[0].node)); }
#line 26436 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 775: /* select_limit: limit_clause  */
#line 631 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = list_make2(NULL, (yyvsp[0].node)); }
#line 26442 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 776: /* select_limit: offset_clause  */
#line 632 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = list_make2((yyvsp[0].node), NULL); }
#line 26448 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 777: /* opt_select_limit: select_limit  */
#line 636 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 26454 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 778: /* opt_select_limit: %empty  */
#line 637 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = list_make2(NULL,NULL); }
#line 26460 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 779: /* limit_clause: LIMIT select_limit_value  */
#line 642 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 26466 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 780: /* limit_clause: LIMIT select_limit_value ',' select_offset_value  */
#line 644 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* Disabled because it was too confusing, bjm 2002-02-18 */
					ereport(ERROR,
							(errcode(PG_ERRCODE_SYNTAX_ERROR),
							 errmsg("LIMIT #,# syntax is not supported"),
							 errhint("Use separate LIMIT and OFFSET clauses."),
							 parser_errposition((yylsp[-3]))));
				}
#line 26479 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 781: /* limit_clause: FETCH first_or_next select_fetch_first_value row_or_rows ONLY  */
#line 660 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[-2].node); }
#line 26485 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 782: /* limit_clause: FETCH first_or_next row_or_rows ONLY  */
#line 662 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeIntConst(1, -1); }
#line 26491 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 783: /* offset_clause: OFFSET select_offset_value  */
#line 667 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 26497 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 784: /* offset_clause: OFFSET select_fetch_first_value row_or_rows  */
#line 670 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[-1].node); }
#line 26503 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 785: /* sample_count: FCONST '%'  */
#line 678 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleSize(makeFloat((yyvsp[-1].str)), true);
		}
#line 26511 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 786: /* sample_count: ICONST '%'  */
#line 682 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleSize(makeInteger((yyvsp[-1].ival)), true);
		}
#line 26519 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 787: /* sample_count: FCONST PERCENT  */
#line 686 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleSize(makeFloat((yyvsp[-1].str)), true);
		}
#line 26527 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 788: /* sample_count: ICONST PERCENT  */
#line 690 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleSize(makeInteger((yyvsp[-1].ival)), true);
		}
#line 26535 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 789: /* sample_count: ICONST  */
#line 694 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleSize(makeInteger((yyvsp[0].ival)), false);
		}
#line 26543 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 790: /* sample_count: ICONST ROWS  */
#line 698 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleSize(makeInteger((yyvsp[-1].ival)), false);
		}
#line 26551 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 791: /* sample_clause: USING SAMPLE tablesample_entry  */
#line 705 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (yyvsp[0].node);
				}
#line 26559 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 792: /* sample_clause: %empty  */
#line 709 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = NULL; }
#line 26565 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 793: /* opt_sample_func: ColId  */
#line 716 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.str) = (yyvsp[0].str); }
#line 26571 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 794: /* opt_sample_func: %empty  */
#line 717 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.str) = NULL; }
#line 26577 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 795: /* tablesample_entry: opt_sample_func '(' sample_count ')' opt_repeatable_clause  */
#line 722 "third_party/libpg_query/grammar/statements/select.y"
                                {
					int seed = (yyvsp[0].ival);
					(yyval.node) = makeSampleOptions((yyvsp[-2].node), (yyvsp[-4].str), &seed, (yylsp[-4]));
				}
#line 26586 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 796: /* tablesample_entry: sample_count  */
#line 727 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleOptions((yyvsp[0].node), NULL, NULL, (yylsp[0]));
		}
#line 26594 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 797: /* tablesample_entry: sample_count '(' ColId ')'  */
#line 731 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleOptions((yyvsp[-3].node), (yyvsp[-1].str), NULL, (yylsp[-3]));
		}
#line 26602 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 798: /* tablesample_entry: sample_count '(' ColId ',' ICONST ')'  */
#line 735 "third_party/libpg_query/grammar/statements/select.y"
                {
			int seed = (yyvsp[-1].ival);
			(yyval.node) = makeSampleOptions((yyvsp[-5].node), (yyvsp[-3].str), &seed, (yylsp[-5]));
		}
#line 26611 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 799: /* tablesample_clause: TABLESAMPLE tablesample_entry  */
#line 743 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (yyvsp[0].node);
				}
#line 26619 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 800: /* opt_tablesample_clause: tablesample_clause  */
#line 749 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.node) = (yyvsp[0].node); }
#line 26625 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 801: /* opt_tablesample_clause: %empty  */
#line 750 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.node) = NULL; }
#line 26631 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 802: /* opt_repeatable_clause: REPEATABLE '(' ICONST ')'  */
#line 755 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.ival) = (yyvsp[-1].ival); }
#line 26637 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 803: /* opt_repeatable_clause: %empty  */
#line 756 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.ival) = -1; }
#line 26643 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 804: /* select_limit_value: a_expr  */
#line 760 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 26649 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 805: /* select_limit_value: ALL  */
#line 762 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* LIMIT ALL is represented as a NULL constant */
					(yyval.node) = makeNullAConst((yylsp[0]));
				}
#line 26658 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 806: /* select_limit_value: a_expr '%'  */
#line 767 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeLimitPercent((yyvsp[-1].node)); }
#line 26664 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 807: /* select_limit_value: FCONST PERCENT  */
#line 769 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeLimitPercent(makeFloatConst((yyvsp[-1].str),(yylsp[-1]))); }
#line 26670 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 808: /* select_limit_value: ICONST PERCENT  */
#line 771 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeLimitPercent(makeIntConst((yyvsp[-1].ival),(yylsp[-1]))); }
#line 26676 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 809: /* select_offset_value: a_expr  */
#line 775 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 26682 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 810: /* select_fetch_first_value: c_expr  */
#line 795 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 26688 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 811: /* select_fetch_first_value: '+' I_or_F_const  */
#line 797 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", NULL, (yyvsp[0].node), (yylsp[-1])); }
#line 26694 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 812: /* select_fetch_first_value: '-' I_or_F_const  */
#line 799 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = doNegate((yyvsp[0].node), (yylsp[-1])); }
#line 26700 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 813: /* I_or_F_const: Iconst  */
#line 803 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = makeIntConst((yyvsp[0].ival),(yylsp[0])); }
#line 26706 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 814: /* I_or_F_const: FCONST  */
#line 804 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = makeFloatConst((yyvsp[0].str),(yylsp[0])); }
#line 26712 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 815: /* row_or_rows: ROW  */
#line 808 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.ival) = 0; }
#line 26718 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 816: /* row_or_rows: ROWS  */
#line 809 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.ival) = 0; }
#line 26724 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 817: /* first_or_next: FIRST_P  */
#line 812 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.ival) = 0; }
#line 26730 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 818: /* first_or_next: NEXT  */
#line 813 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.ival) = 0; }
#line 26736 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 819: /* group_clause: GROUP_P BY group_by_list_opt_comma  */
#line 838 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 26742 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 820: /* group_clause: GROUP_P BY ALL  */
#line 840 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNode *node = (PGNode *) makeGroupingSet(GROUPING_SET_ALL, NIL, (yylsp[0]));
					(yyval.list) = list_make1(node);
				}
#line 26751 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 821: /* group_clause: %empty  */
#line 844 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 26757 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 822: /* group_by_list: group_by_item  */
#line 848 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 26763 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 823: /* group_by_list: group_by_list ',' group_by_item  */
#line 849 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list),(yyvsp[0].node)); }
#line 26769 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 824: /* group_by_list_opt_comma: group_by_list  */
#line 853 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 26775 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 825: /* group_by_list_opt_comma: group_by_list ','  */
#line 854 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 26781 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 826: /* group_by_item: a_expr  */
#line 858 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 26787 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 827: /* group_by_item: empty_grouping_set  */
#line 859 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 26793 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 828: /* group_by_item: cube_clause  */
#line 860 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 26799 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 829: /* group_by_item: rollup_clause  */
#line 861 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 26805 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 830: /* group_by_item: grouping_sets_clause  */
#line 862 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 26811 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 831: /* empty_grouping_set: '(' ')'  */
#line 867 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeGroupingSet(GROUPING_SET_EMPTY, NIL, (yylsp[-1]));
				}
#line 26819 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 832: /* rollup_clause: ROLLUP '(' expr_list_opt_comma ')'  */
#line 880 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeGroupingSet(GROUPING_SET_ROLLUP, (yyvsp[-1].list), (yylsp[-3]));
				}
#line 26827 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 833: /* cube_clause: CUBE '(' expr_list_opt_comma ')'  */
#line 887 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeGroupingSet(GROUPING_SET_CUBE, (yyvsp[-1].list), (yylsp[-3]));
				}
#line 26835 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 834: /* grouping_sets_clause: GROUPING SETS '(' group_by_list_opt_comma ')'  */
#line 894 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeGroupingSet(GROUPING_SET_SETS, (yyvsp[-1].list), (yylsp[-4]));
				}
#line 26843 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 835: /* grouping_or_grouping_id: GROUPING  */
#line 900 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = NULL; }
#line 26849 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 836: /* grouping_or_grouping_id: GROUPING_ID  */
#line 901 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = NULL; }
#line 26855 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 837: /* having_clause: HAVING a_expr  */
#line 905 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 26861 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 838: /* having_clause: %empty  */
#line 906 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 26867 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 839: /* qualify_clause: QUALIFY a_expr  */
#line 910 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 26873 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 840: /* qualify_clause: %empty  */
#line 911 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 26879 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 841: /* for_locking_clause: for_locking_items  */
#line 915 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 26885 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 842: /* for_locking_clause: FOR READ_P ONLY  */
#line 916 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 26891 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 843: /* opt_for_locking_clause: for_locking_clause  */
#line 920 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 26897 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 844: /* opt_for_locking_clause: %empty  */
#line 921 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = NIL; }
#line 26903 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 845: /* for_locking_items: for_locking_item  */
#line 925 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 26909 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 846: /* for_locking_items: for_locking_items for_locking_item  */
#line 926 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 26915 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 847: /* for_locking_item: for_locking_strength locked_rels_list opt_nowait_or_skip  */
#line 931 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGLockingClause *n = makeNode(PGLockingClause);
					n->lockedRels = (yyvsp[-1].list);
					n->strength = (yyvsp[-2].lockstrength);
					n->waitPolicy = (yyvsp[0].lockwaitpolicy);
					(yyval.node) = (PGNode *) n;
				}
#line 26927 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 848: /* for_locking_strength: FOR UPDATE  */
#line 941 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.lockstrength) = LCS_FORUPDATE; }
#line 26933 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 849: /* for_locking_strength: FOR NO KEY UPDATE  */
#line 942 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.lockstrength) = PG_LCS_FORNOKEYUPDATE; }
#line 26939 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 850: /* for_locking_strength: FOR SHARE  */
#line 943 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.lockstrength) = PG_LCS_FORSHARE; }
#line 26945 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 851: /* for_locking_strength: FOR KEY SHARE  */
#line 944 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.lockstrength) = PG_LCS_FORKEYSHARE; }
#line 26951 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 852: /* locked_rels_list: OF qualified_name_list  */
#line 948 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 26957 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 853: /* locked_rels_list: %empty  */
#line 949 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = NIL; }
#line 26963 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 854: /* opt_nowait_or_skip: NOWAIT  */
#line 954 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.lockwaitpolicy) = LockWaitError; }
#line 26969 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 855: /* opt_nowait_or_skip: SKIP LOCKED  */
#line 955 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.lockwaitpolicy) = PGLockWaitSkip; }
#line 26975 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 856: /* opt_nowait_or_skip: %empty  */
#line 956 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.lockwaitpolicy) = PGLockWaitBlock; }
#line 26981 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 857: /* values_clause: VALUES '(' expr_list_opt_comma ')'  */
#line 966 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *n = makeNode(PGSelectStmt);
					n->valuesLists = list_make1((yyvsp[-1].list));
					(yyval.node) = (PGNode *) n;
				}
#line 26991 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 858: /* values_clause: values_clause ',' '(' expr_list_opt_comma ')'  */
#line 972 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *n = (PGSelectStmt *) (yyvsp[-4].node);
					n->valuesLists = lappend(n->valuesLists, (yyvsp[-1].list));
					(yyval.node) = (PGNode *) n;
				}
#line 27001 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 859: /* values_clause_opt_comma: values_clause  */
#line 980 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.node) = (yyvsp[0].node); }
#line 27007 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 860: /* values_clause_opt_comma: values_clause ','  */
#line 981 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.node) = (yyvsp[-1].node); }
#line 27013 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 861: /* from_clause: FROM from_list_opt_comma  */
#line 994 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 27019 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 862: /* from_clause: %empty  */
#line 995 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 27025 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 863: /* from_list: table_ref  */
#line 999 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 27031 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 864: /* from_list: from_list ',' table_ref  */
#line 1000 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 27037 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 865: /* from_list_opt_comma: from_list  */
#line 1004 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 27043 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 866: /* from_list_opt_comma: from_list ','  */
#line 1005 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 27049 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 867: /* table_ref: relation_expr opt_alias_clause opt_tablesample_clause  */
#line 1012 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyvsp[-2].range)->alias = (yyvsp[-1].alias);
					(yyvsp[-2].range)->sample = (yyvsp[0].node);
					(yyval.node) = (PGNode *) (yyvsp[-2].range);
				}
#line 27059 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 868: /* table_ref: func_table func_alias_clause opt_tablesample_clause  */
#line 1018 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeFunction *n = (PGRangeFunction *) (yyvsp[-2].node);
					n->alias = (PGAlias*) linitial((yyvsp[-1].list));
					n->coldeflist = (PGList*) lsecond((yyvsp[-1].list));
					n->sample = (yyvsp[0].node);
					(yyval.node) = (PGNode *) n;
				}
#line 27071 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 869: /* table_ref: values_clause_opt_comma alias_clause opt_tablesample_clause  */
#line 1026 "third_party/libpg_query/grammar/statements/select.y"
                        {
				PGRangeSubselect *n = makeNode(PGRangeSubselect);
				n->lateral = false;
				n->subquery = (yyvsp[-2].node);
				n->alias = (yyvsp[-1].alias);
				n->sample = (yyvsp[0].node);
				(yyval.node) = (PGNode *) n;
			}
#line 27084 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 870: /* table_ref: LATERAL_P func_table func_alias_clause  */
#line 1035 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeFunction *n = (PGRangeFunction *) (yyvsp[-1].node);
					n->lateral = true;
					n->alias = (PGAlias*) linitial((yyvsp[0].list));
					n->coldeflist = (PGList*) lsecond((yyvsp[0].list));
					(yyval.node) = (PGNode *) n;
				}
#line 27096 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 871: /* table_ref: select_with_parens opt_alias_clause opt_tablesample_clause  */
#line 1043 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeSubselect *n = makeNode(PGRangeSubselect);
					n->lateral = false;
					n->subquery = (yyvsp[-2].node);
					n->alias = (yyvsp[-1].alias);
					n->sample = (yyvsp[0].node);
					(yyval.node) = (PGNode *) n;
				}
#line 27109 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 872: /* table_ref: LATERAL_P select_with_parens opt_alias_clause  */
#line 1052 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeSubselect *n = makeNode(PGRangeSubselect);
					n->lateral = true;
					n->subquery = (yyvsp[-1].node);
					n->alias = (yyvsp[0].alias);
					n->sample = NULL;
					(yyval.node) = (PGNode *) n;
				}
#line 27122 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 873: /* table_ref: joined_table  */
#line 1061 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) (yyvsp[0].jexpr);
				}
#line 27130 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 874: /* table_ref: '(' joined_table ')' alias_clause  */
#line 1065 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyvsp[-2].jexpr)->alias = (yyvsp[0].alias);
					(yyval.node) = (PGNode *) (yyvsp[-2].jexpr);
				}
#line 27139 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 875: /* table_ref: GRAPH_TABLE GraphTableStmt  */
#line 1070 "third_party/libpg_query/grammar/statements/select.y"
                {
                        (yyval.node) = (PGNode *) (yyvsp[0].node);
                }
#line 27147 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 876: /* table_ref: table_ref PIVOT '(' target_list_opt_comma FOR pivot_value_list opt_pivot_group_by ')' opt_alias_clause  */
#line 1074 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGPivotExpr *n = makeNode(PGPivotExpr);
					n->source = (yyvsp[-8].node);
					n->aggrs = (yyvsp[-5].list);
					n->pivots = (yyvsp[-3].list);
					n->groups = (yyvsp[-2].list);
					n->alias = (yyvsp[0].alias);
					(yyval.node) = (PGNode *) n;
				}
#line 27161 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 877: /* table_ref: table_ref UNPIVOT opt_include_nulls '(' unpivot_header FOR unpivot_value_list ')' opt_alias_clause  */
#line 1084 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGPivotExpr *n = makeNode(PGPivotExpr);
					n->source = (yyvsp[-8].node);
					n->include_nulls = (yyvsp[-6].boolean);
					n->unpivots = (yyvsp[-4].list);
					n->pivots = (yyvsp[-2].list);
					n->alias = (yyvsp[0].alias);
					(yyval.node) = (PGNode *) n;
				}
#line 27175 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 878: /* opt_pivot_group_by: GROUP_P BY name_list_opt_comma  */
#line 1096 "third_party/libpg_query/grammar/statements/select.y"
                                                { (yyval.list) = (yyvsp[0].list); }
#line 27181 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 879: /* opt_pivot_group_by: %empty  */
#line 1097 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = NULL; }
#line 27187 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 880: /* opt_include_nulls: INCLUDE_P NULLS_P  */
#line 1100 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.boolean) = true; }
#line 27193 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 881: /* opt_include_nulls: EXCLUDE NULLS_P  */
#line 1101 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.boolean) = false; }
#line 27199 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 882: /* opt_include_nulls: %empty  */
#line 1102 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.boolean) = false; }
#line 27205 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 883: /* single_pivot_value: b_expr IN_P '(' target_list_opt_comma ')'  */
#line 1106 "third_party/libpg_query/grammar/statements/select.y"
                {
			PGPivot *n = makeNode(PGPivot);
			n->pivot_columns = list_make1((yyvsp[-4].node));
			n->pivot_value = (yyvsp[-1].list);
			(yyval.node) = (PGNode *) n;
		}
#line 27216 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 884: /* single_pivot_value: b_expr IN_P ColIdOrString  */
#line 1114 "third_party/libpg_query/grammar/statements/select.y"
                {
			PGPivot *n = makeNode(PGPivot);
			n->pivot_columns = list_make1((yyvsp[-2].node));
			n->pivot_enum = (yyvsp[0].str);
			(yyval.node) = (PGNode *) n;
		}
#line 27227 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 885: /* pivot_header: d_expr  */
#line 1123 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 27233 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 886: /* pivot_header: '(' c_expr_list_opt_comma ')'  */
#line 1124 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 27239 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 887: /* pivot_value: pivot_header IN_P '(' target_list_opt_comma ')'  */
#line 1128 "third_party/libpg_query/grammar/statements/select.y"
                {
			PGPivot *n = makeNode(PGPivot);
			n->pivot_columns = (yyvsp[-4].list);
			n->pivot_value = (yyvsp[-1].list);
			(yyval.node) = (PGNode *) n;
		}
#line 27250 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 888: /* pivot_value: pivot_header IN_P ColIdOrString  */
#line 1136 "third_party/libpg_query/grammar/statements/select.y"
                {
			PGPivot *n = makeNode(PGPivot);
			n->pivot_columns = (yyvsp[-2].list);
			n->pivot_enum = (yyvsp[0].str);
			(yyval.node) = (PGNode *) n;
		}
#line 27261 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 889: /* pivot_value_list: pivot_value  */
#line 1145 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 27269 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 890: /* pivot_value_list: pivot_value_list pivot_value  */
#line 1149 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node));
				}
#line 27277 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 891: /* unpivot_header: ColIdOrString  */
#line 1155 "third_party/libpg_query/grammar/statements/select.y"
                                                          { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 27283 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 892: /* unpivot_header: '(' name_list_opt_comma ')'  */
#line 1156 "third_party/libpg_query/grammar/statements/select.y"
                                              { (yyval.list) = (yyvsp[-1].list); }
#line 27289 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 893: /* unpivot_value: unpivot_header IN_P '(' target_list_opt_comma ')'  */
#line 1161 "third_party/libpg_query/grammar/statements/select.y"
                {
			PGPivot *n = makeNode(PGPivot);
			n->unpivot_columns = (yyvsp[-4].list);
			n->pivot_value = (yyvsp[-1].list);
			(yyval.node) = (PGNode *) n;
		}
#line 27300 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 894: /* unpivot_value_list: unpivot_value  */
#line 1170 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 27308 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 895: /* unpivot_value_list: unpivot_value_list unpivot_value  */
#line 1174 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node));
				}
#line 27316 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 896: /* joined_table: '(' joined_table ')'  */
#line 1199 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.jexpr) = (yyvsp[-1].jexpr);
				}
#line 27324 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 897: /* joined_table: table_ref CROSS JOIN table_ref  */
#line 1203 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* CROSS JOIN is same as unqualified inner join */
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = PG_JOIN_INNER;
					n->joinreftype = PG_JOIN_REGULAR;
					n->larg = (yyvsp[-3].node);
					n->rarg = (yyvsp[0].node);
					n->usingClause = NIL;
					n->quals = NULL;
					n->location = (yylsp[-2]);
					(yyval.jexpr) = n;
				}
#line 27341 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 898: /* joined_table: table_ref join_type JOIN table_ref join_qual  */
#line 1216 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = (yyvsp[-3].jtype);
					n->joinreftype = PG_JOIN_REGULAR;
					n->larg = (yyvsp[-4].node);
					n->rarg = (yyvsp[-1].node);
					if ((yyvsp[0].node) != NULL && IsA((yyvsp[0].node), PGList))
						n->usingClause = (PGList *) (yyvsp[0].node); /* USING clause */
					else
						n->quals = (yyvsp[0].node); /* ON clause */
					n->location = (yylsp[-3]);
					(yyval.jexpr) = n;
				}
#line 27359 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 899: /* joined_table: table_ref JOIN table_ref join_qual  */
#line 1230 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* letting join_type reduce to empty doesn't work */
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = PG_JOIN_INNER;
					n->joinreftype = PG_JOIN_REGULAR;
					n->larg = (yyvsp[-3].node);
					n->rarg = (yyvsp[-1].node);
					if ((yyvsp[0].node) != NULL && IsA((yyvsp[0].node), PGList))
						n->usingClause = (PGList *) (yyvsp[0].node); /* USING clause */
					else
						n->quals = (yyvsp[0].node); /* ON clause */
					n->location = (yylsp[-2]);
					(yyval.jexpr) = n;
				}
#line 27378 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 900: /* joined_table: table_ref NATURAL join_type JOIN table_ref  */
#line 1245 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = (yyvsp[-2].jtype);
					n->joinreftype = PG_JOIN_NATURAL;
					n->larg = (yyvsp[-4].node);
					n->rarg = (yyvsp[0].node);
					n->usingClause = NIL; /* figure out which columns later... */
					n->quals = NULL; /* fill later */
					n->location = (yylsp[-3]);
					(yyval.jexpr) = n;
				}
#line 27394 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 901: /* joined_table: table_ref NATURAL JOIN table_ref  */
#line 1257 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* letting join_type reduce to empty doesn't work */
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = PG_JOIN_INNER;
					n->joinreftype = PG_JOIN_NATURAL;
					n->larg = (yyvsp[-3].node);
					n->rarg = (yyvsp[0].node);
					n->usingClause = NIL; /* figure out which columns later... */
					n->quals = NULL; /* fill later */
					n->location = (yylsp[-2]);
					(yyval.jexpr) = n;
				}
#line 27411 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 902: /* joined_table: table_ref ASOF join_type JOIN table_ref join_qual  */
#line 1270 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = (yyvsp[-3].jtype);
					n->joinreftype = PG_JOIN_ASOF;
					n->larg = (yyvsp[-5].node);
					n->rarg = (yyvsp[-1].node);
					if ((yyvsp[0].node) != NULL && IsA((yyvsp[0].node), PGList))
						n->usingClause = (PGList *) (yyvsp[0].node); /* USING clause */
					else
						n->quals = (yyvsp[0].node); /* ON clause */
					n->location = (yylsp[-4]);
					(yyval.jexpr) = n;
				}
#line 27429 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 903: /* joined_table: table_ref ASOF JOIN table_ref join_qual  */
#line 1284 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = PG_JOIN_INNER;
					n->joinreftype = PG_JOIN_ASOF;
					n->larg = (yyvsp[-4].node);
					n->rarg = (yyvsp[-1].node);
					if ((yyvsp[0].node) != NULL && IsA((yyvsp[0].node), PGList))
						n->usingClause = (PGList *) (yyvsp[0].node); /* USING clause */
					else
						n->quals = (yyvsp[0].node); /* ON clause */
					n->location = (yylsp[-3]);
					(yyval.jexpr) = n;
				}
#line 27447 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 904: /* joined_table: table_ref POSITIONAL JOIN table_ref  */
#line 1298 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* POSITIONAL JOIN is a coordinated scan */
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = PG_JOIN_POSITION;
					n->joinreftype = PG_JOIN_REGULAR;
					n->larg = (yyvsp[-3].node);
					n->rarg = (yyvsp[0].node);
					n->usingClause = NIL;
					n->quals = NULL;
					n->location = (yylsp[-2]);
					(yyval.jexpr) = n;
				}
#line 27464 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 905: /* joined_table: table_ref ANTI JOIN table_ref join_qual  */
#line 1311 "third_party/libpg_query/grammar/statements/select.y"
                {
                    /* ANTI JOIN is a filter */
                    PGJoinExpr *n = makeNode(PGJoinExpr);
                    n->jointype = PG_JOIN_ANTI;
                    n->joinreftype = PG_JOIN_REGULAR;
                    n->larg = (yyvsp[-4].node);
                    n->rarg = (yyvsp[-1].node);
                    if ((yyvsp[0].node) != NULL && IsA((yyvsp[0].node), PGList))
                        n->usingClause = (PGList *) (yyvsp[0].node); /* USING clause */
                    else
                        n->quals = (yyvsp[0].node); /* ON clause */
                    n->location = (yylsp[-3]);
                    (yyval.jexpr) = n;
                }
#line 27483 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 906: /* joined_table: table_ref SEMI JOIN table_ref join_qual  */
#line 1326 "third_party/libpg_query/grammar/statements/select.y"
               {
                   /* SEMI JOIN is also a filter */
                   PGJoinExpr *n = makeNode(PGJoinExpr);
                   n->jointype = PG_JOIN_SEMI;
                   n->joinreftype = PG_JOIN_REGULAR;
                   n->larg = (yyvsp[-4].node);
                   n->rarg = (yyvsp[-1].node);
                   if ((yyvsp[0].node) != NULL && IsA((yyvsp[0].node), PGList))
                       n->usingClause = (PGList *) (yyvsp[0].node); /* USING clause */
                   else
                       n->quals = (yyvsp[0].node); /* ON clause */
                   n->location = (yylsp[-3]);
                   n->location = (yylsp[-3]);
                   (yyval.jexpr) = n;
               }
#line 27503 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 907: /* alias_clause: AS ColIdOrString '(' name_list_opt_comma ')'  */
#line 1345 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.alias) = makeNode(PGAlias);
					(yyval.alias)->aliasname = (yyvsp[-3].str);
					(yyval.alias)->colnames = (yyvsp[-1].list);
				}
#line 27513 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 908: /* alias_clause: AS ColIdOrString  */
#line 1351 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.alias) = makeNode(PGAlias);
					(yyval.alias)->aliasname = (yyvsp[0].str);
				}
#line 27522 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 909: /* alias_clause: ColId '(' name_list_opt_comma ')'  */
#line 1356 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.alias) = makeNode(PGAlias);
					(yyval.alias)->aliasname = (yyvsp[-3].str);
					(yyval.alias)->colnames = (yyvsp[-1].list);
				}
#line 27532 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 910: /* alias_clause: ColId  */
#line 1362 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.alias) = makeNode(PGAlias);
					(yyval.alias)->aliasname = (yyvsp[0].str);
				}
#line 27541 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 911: /* opt_alias_clause: alias_clause  */
#line 1368 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.alias) = (yyvsp[0].alias); }
#line 27547 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 912: /* opt_alias_clause: %empty  */
#line 1369 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.alias) = NULL; }
#line 27553 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 913: /* func_alias_clause: alias_clause  */
#line 1378 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make2((yyvsp[0].alias), NIL);
				}
#line 27561 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 914: /* func_alias_clause: AS '(' TableFuncElementList ')'  */
#line 1382 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make2(NULL, (yyvsp[-1].list));
				}
#line 27569 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 915: /* func_alias_clause: AS ColIdOrString '(' TableFuncElementList ')'  */
#line 1386 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAlias *a = makeNode(PGAlias);
					a->aliasname = (yyvsp[-3].str);
					(yyval.list) = list_make2(a, (yyvsp[-1].list));
				}
#line 27579 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 916: /* func_alias_clause: ColId '(' TableFuncElementList ')'  */
#line 1392 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAlias *a = makeNode(PGAlias);
					a->aliasname = (yyvsp[-3].str);
					(yyval.list) = list_make2(a, (yyvsp[-1].list));
				}
#line 27589 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 917: /* func_alias_clause: %empty  */
#line 1398 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make2(NULL, NIL);
				}
#line 27597 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 918: /* join_type: FULL join_outer  */
#line 1403 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.jtype) = PG_JOIN_FULL; }
#line 27603 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 919: /* join_type: LEFT join_outer  */
#line 1404 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.jtype) = PG_JOIN_LEFT; }
#line 27609 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 920: /* join_type: RIGHT join_outer  */
#line 1405 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.jtype) = PG_JOIN_RIGHT; }
#line 27615 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 921: /* join_type: SEMI  */
#line 1406 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.jtype) = PG_JOIN_SEMI; }
#line 27621 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 922: /* join_type: ANTI  */
#line 1407 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.jtype) = PG_JOIN_ANTI; }
#line 27627 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 923: /* join_type: INNER_P  */
#line 1408 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.jtype) = PG_JOIN_INNER; }
#line 27633 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 924: /* join_outer: OUTER_P  */
#line 1412 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = NULL; }
#line 27639 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 925: /* join_outer: %empty  */
#line 1413 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 27645 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 926: /* join_qual: USING '(' name_list_opt_comma ')'  */
#line 1425 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (PGNode *) (yyvsp[-1].list); }
#line 27651 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 927: /* join_qual: ON a_expr  */
#line 1426 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 27657 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 928: /* relation_expr: qualified_name  */
#line 1432 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* inheritance query, implicitly */
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->inh = true;
					(yyval.range)->alias = NULL;
				}
#line 27668 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 929: /* relation_expr: qualified_name '*'  */
#line 1439 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* inheritance query, explicitly */
					(yyval.range) = (yyvsp[-1].range);
					(yyval.range)->inh = true;
					(yyval.range)->alias = NULL;
				}
#line 27679 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 930: /* relation_expr: ONLY qualified_name  */
#line 1446 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* no inheritance */
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->inh = false;
					(yyval.range)->alias = NULL;
				}
#line 27690 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 931: /* relation_expr: ONLY '(' qualified_name ')'  */
#line 1453 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* no inheritance, SQL99-style syntax */
					(yyval.range) = (yyvsp[-1].range);
					(yyval.range)->inh = false;
					(yyval.range)->alias = NULL;
				}
#line 27701 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 932: /* func_table: func_expr_windowless opt_ordinality  */
#line 1485 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeFunction *n = makeNode(PGRangeFunction);
					n->lateral = false;
					n->ordinality = (yyvsp[0].boolean);
					n->is_rowsfrom = false;
					n->functions = list_make1(list_make2((yyvsp[-1].node), NIL));
					n->sample = NULL;
					/* alias and coldeflist are set by table_ref production */
					(yyval.node) = (PGNode *) n;
				}
#line 27716 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 933: /* func_table: ROWS FROM '(' rowsfrom_list ')' opt_ordinality  */
#line 1496 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeFunction *n = makeNode(PGRangeFunction);
					n->lateral = false;
					n->ordinality = (yyvsp[0].boolean);
					n->is_rowsfrom = true;
					n->functions = (yyvsp[-2].list);
					n->sample = NULL;
					/* alias and coldeflist are set by table_ref production */
					(yyval.node) = (PGNode *) n;
				}
#line 27731 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 934: /* rowsfrom_item: func_expr_windowless opt_col_def_list  */
#line 1509 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make2((yyvsp[-1].node), (yyvsp[0].list)); }
#line 27737 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 935: /* rowsfrom_list: rowsfrom_item  */
#line 1513 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = list_make1((yyvsp[0].list)); }
#line 27743 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 936: /* rowsfrom_list: rowsfrom_list ',' rowsfrom_item  */
#line 1514 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].list)); }
#line 27749 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 937: /* opt_col_def_list: AS '(' TableFuncElementList ')'  */
#line 1517 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 27755 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 938: /* opt_col_def_list: %empty  */
#line 1518 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 27761 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 939: /* opt_ordinality: WITH_LA ORDINALITY  */
#line 1521 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.boolean) = true; }
#line 27767 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 940: /* opt_ordinality: %empty  */
#line 1522 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 27773 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 941: /* where_clause: WHERE a_expr  */
#line 1527 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 27779 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 942: /* where_clause: %empty  */
#line 1528 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 27785 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 943: /* TableFuncElementList: TableFuncElement  */
#line 1534 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 27793 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 944: /* TableFuncElementList: TableFuncElementList ',' TableFuncElement  */
#line 1538 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 27801 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 945: /* TableFuncElement: ColIdOrString Typename opt_collate_clause  */
#line 1544 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGColumnDef *n = makeNode(PGColumnDef);
					n->colname = (yyvsp[-2].str);
					n->typeName = (yyvsp[-1].typnam);
					n->inhcount = 0;
					n->is_local = true;
					n->is_not_null = false;
					n->is_from_type = false;
					n->storage = 0;
					n->raw_default = NULL;
					n->cooked_default = NULL;
					n->collClause = (PGCollateClause *) (yyvsp[0].node);
					n->collOid = InvalidOid;
					n->constraints = NIL;
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)n;
				}
#line 27823 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 946: /* opt_collate_clause: COLLATE any_name  */
#line 1565 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGCollateClause *n = makeNode(PGCollateClause);
					n->arg = NULL;
					n->collname = (yyvsp[0].list);
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *) n;
				}
#line 27835 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 947: /* opt_collate_clause: %empty  */
#line 1572 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.node) = NULL; }
#line 27841 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 948: /* colid_type_list: ColId Typename  */
#line 1585 "third_party/libpg_query/grammar/statements/select.y"
                             {
             (yyval.list) = list_make1(list_make2(makeString((yyvsp[-1].str)), (yyvsp[0].typnam)));
            }
#line 27849 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 949: /* colid_type_list: colid_type_list ',' ColId Typename  */
#line 1588 "third_party/libpg_query/grammar/statements/select.y"
                                                 {
             (yyval.list) = lappend((yyvsp[-3].list), list_make2(makeString((yyvsp[-1].str)), (yyvsp[0].typnam)));
            }
#line 27857 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 952: /* opt_Typename: Typename  */
#line 1595 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 27863 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 953: /* opt_Typename: %empty  */
#line 1596 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.typnam) = NULL; }
#line 27869 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 954: /* Typename: SimpleTypename opt_array_bounds  */
#line 1599 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-1].typnam);
					(yyval.typnam)->arrayBounds = (yyvsp[0].list);
				}
#line 27878 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 955: /* Typename: SETOF SimpleTypename opt_array_bounds  */
#line 1604 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-1].typnam);
					(yyval.typnam)->arrayBounds = (yyvsp[0].list);
					(yyval.typnam)->setof = true;
				}
#line 27888 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 956: /* Typename: SimpleTypename ARRAY '[' Iconst ']'  */
#line 1611 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-4].typnam);
					(yyval.typnam)->arrayBounds = list_make1(makeInteger((yyvsp[-1].ival)));
				}
#line 27897 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 957: /* Typename: SETOF SimpleTypename ARRAY '[' Iconst ']'  */
#line 1616 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-4].typnam);
					(yyval.typnam)->arrayBounds = list_make1(makeInteger((yyvsp[-1].ival)));
					(yyval.typnam)->setof = true;
				}
#line 27907 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 958: /* Typename: SimpleTypename ARRAY  */
#line 1622 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-1].typnam);
					(yyval.typnam)->arrayBounds = list_make1(makeInteger(-1));
				}
#line 27916 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 959: /* Typename: SETOF SimpleTypename ARRAY  */
#line 1627 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-1].typnam);
					(yyval.typnam)->arrayBounds = list_make1(makeInteger(-1));
					(yyval.typnam)->setof = true;
				}
#line 27926 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 960: /* Typename: RowOrStruct '(' colid_type_list ')' opt_array_bounds  */
#line 1632 "third_party/libpg_query/grammar/statements/select.y"
                                                                               {
               (yyval.typnam) = SystemTypeName("struct");
               (yyval.typnam)->arrayBounds = (yyvsp[0].list);
               (yyval.typnam)->typmods = (yyvsp[-2].list);
               (yyval.typnam)->location = (yylsp[-4]);
               }
#line 27937 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 961: /* Typename: MAP '(' type_list ')' opt_array_bounds  */
#line 1638 "third_party/libpg_query/grammar/statements/select.y"
                                                     {
               (yyval.typnam) = SystemTypeName("map");
               (yyval.typnam)->arrayBounds = (yyvsp[0].list);
               (yyval.typnam)->typmods = (yyvsp[-2].list);
               (yyval.typnam)->location = (yylsp[-4]);
			}
#line 27948 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 962: /* Typename: UNION '(' colid_type_list ')' opt_array_bounds  */
#line 1644 "third_party/libpg_query/grammar/statements/select.y"
                                                                         {
			   (yyval.typnam) = SystemTypeName("union");
			   (yyval.typnam)->arrayBounds = (yyvsp[0].list);
			   (yyval.typnam)->typmods = (yyvsp[-2].list);
			   (yyval.typnam)->location = (yylsp[-4]);
			}
#line 27959 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 963: /* opt_array_bounds: opt_array_bounds '[' ']'  */
#line 1654 "third_party/libpg_query/grammar/statements/select.y"
                                        {  (yyval.list) = lappend((yyvsp[-2].list), makeInteger(-1)); }
#line 27965 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 964: /* opt_array_bounds: opt_array_bounds '[' Iconst ']'  */
#line 1656 "third_party/libpg_query/grammar/statements/select.y"
                                        {  (yyval.list) = lappend((yyvsp[-3].list), makeInteger((yyvsp[-1].ival))); }
#line 27971 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 965: /* opt_array_bounds: %empty  */
#line 1658 "third_party/libpg_query/grammar/statements/select.y"
                                        {  (yyval.list) = NIL; }
#line 27977 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 966: /* SimpleTypename: GenericType  */
#line 1662 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 27983 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 967: /* SimpleTypename: Numeric  */
#line 1663 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 27989 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 968: /* SimpleTypename: Bit  */
#line 1664 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 27995 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 969: /* SimpleTypename: Character  */
#line 1665 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 28001 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 970: /* SimpleTypename: ConstDatetime  */
#line 1666 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.typnam) = (yyvsp[0].typnam); }
#line 28007 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 971: /* SimpleTypename: ConstInterval opt_interval  */
#line 1668 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-1].typnam);
					(yyval.typnam)->typmods = (yyvsp[0].list);
				}
#line 28016 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 972: /* SimpleTypename: ConstInterval '(' Iconst ')'  */
#line 1673 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-3].typnam);
					(yyval.typnam)->typmods = list_make2(makeIntConst(INTERVAL_FULL_RANGE, -1),
											 makeIntConst((yyvsp[-1].ival), (yylsp[-1])));
				}
#line 28026 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 973: /* ConstTypename: Numeric  */
#line 1692 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 28032 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 974: /* ConstTypename: ConstBit  */
#line 1693 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 28038 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 975: /* ConstTypename: ConstCharacter  */
#line 1694 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.typnam) = (yyvsp[0].typnam); }
#line 28044 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 976: /* ConstTypename: ConstDatetime  */
#line 1695 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.typnam) = (yyvsp[0].typnam); }
#line 28050 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 977: /* GenericType: type_name_token opt_type_modifiers  */
#line 1707 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = makeTypeName((yyvsp[-1].str));
					(yyval.typnam)->typmods = (yyvsp[0].list);
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 28060 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 978: /* opt_type_modifiers: '(' opt_expr_list_opt_comma ')'  */
#line 1720 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 28066 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 979: /* opt_type_modifiers: %empty  */
#line 1721 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = NIL; }
#line 28072 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 980: /* Numeric: INT_P  */
#line 1728 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("int4");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 28081 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 981: /* Numeric: INTEGER  */
#line 1733 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("int4");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 28090 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 982: /* Numeric: SMALLINT  */
#line 1738 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("int2");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 28099 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 983: /* Numeric: BIGINT  */
#line 1743 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("int8");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 28108 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 984: /* Numeric: REAL  */
#line 1748 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("float4");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 28117 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 985: /* Numeric: FLOAT_P opt_float  */
#line 1753 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 28126 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 986: /* Numeric: DOUBLE_P PRECISION  */
#line 1758 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("float8");
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 28135 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 987: /* Numeric: DECIMAL_P opt_type_modifiers  */
#line 1763 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("numeric");
					(yyval.typnam)->typmods = (yyvsp[0].list);
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 28145 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 988: /* Numeric: DEC opt_type_modifiers  */
#line 1769 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("numeric");
					(yyval.typnam)->typmods = (yyvsp[0].list);
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 28155 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 989: /* Numeric: NUMERIC opt_type_modifiers  */
#line 1775 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("numeric");
					(yyval.typnam)->typmods = (yyvsp[0].list);
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 28165 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 990: /* Numeric: BOOLEAN_P  */
#line 1781 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("bool");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 28174 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 991: /* opt_float: '(' Iconst ')'  */
#line 1788 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/*
					 * Check FLOAT() precision limits assuming IEEE floating
					 * types - thomas 1997-09-18
					 */
					if ((yyvsp[-1].ival) < 1)
						ereport(ERROR,
								(errcode(PG_ERRCODE_INVALID_PARAMETER_VALUE),
								 errmsg("precision for type float must be at least 1 bit"),
								 parser_errposition((yylsp[-1]))));
					else if ((yyvsp[-1].ival) <= 24)
						(yyval.typnam) = SystemTypeName("float4");
					else if ((yyvsp[-1].ival) <= 53)
						(yyval.typnam) = SystemTypeName("float8");
					else
						ereport(ERROR,
								(errcode(PG_ERRCODE_INVALID_PARAMETER_VALUE),
								 errmsg("precision for type float must be less than 54 bits"),
								 parser_errposition((yylsp[-1]))));
				}
#line 28199 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 992: /* opt_float: %empty  */
#line 1809 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("float4");
				}
#line 28207 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 993: /* Bit: BitWithLength  */
#line 1819 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 28215 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 994: /* Bit: BitWithoutLength  */
#line 1823 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 28223 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 995: /* ConstBit: BitWithLength  */
#line 1831 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 28231 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 996: /* ConstBit: BitWithoutLength  */
#line 1835 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
					(yyval.typnam)->typmods = NIL;
				}
#line 28240 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 997: /* BitWithLength: BIT opt_varying '(' expr_list_opt_comma ')'  */
#line 1843 "third_party/libpg_query/grammar/statements/select.y"
                                {
					const char *typname;

					typname = (yyvsp[-3].boolean) ? "varbit" : "bit";
					(yyval.typnam) = SystemTypeName(typname);
					(yyval.typnam)->typmods = (yyvsp[-1].list);
					(yyval.typnam)->location = (yylsp[-4]);
				}
#line 28253 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 998: /* BitWithoutLength: BIT opt_varying  */
#line 1855 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* bit defaults to bit(1), varbit to no limit */
					if ((yyvsp[0].boolean))
					{
						(yyval.typnam) = SystemTypeName("varbit");
					}
					else
					{
						(yyval.typnam) = SystemTypeName("bit");
						(yyval.typnam)->typmods = list_make1(makeIntConst(1, -1));
					}
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 28271 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 999: /* Character: CharacterWithLength  */
#line 1876 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 28279 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1000: /* Character: CharacterWithoutLength  */
#line 1880 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 28287 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1001: /* ConstCharacter: CharacterWithLength  */
#line 1886 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 28295 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1002: /* ConstCharacter: CharacterWithoutLength  */
#line 1890 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* Length was not specified so allow to be unrestricted.
					 * This handles problems with fixed-length (bpchar) strings
					 * which in column definitions must default to a length
					 * of one, but should not be constrained if the length
					 * was not specified.
					 */
					(yyval.typnam) = (yyvsp[0].typnam);
					(yyval.typnam)->typmods = NIL;
				}
#line 28310 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1003: /* CharacterWithLength: character '(' Iconst ')'  */
#line 1903 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName((yyvsp[-3].conststr));
					(yyval.typnam)->typmods = list_make1(makeIntConst((yyvsp[-1].ival), (yylsp[-1])));
					(yyval.typnam)->location = (yylsp[-3]);
				}
#line 28320 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1004: /* CharacterWithoutLength: character  */
#line 1911 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName((yyvsp[0].conststr));
					/* char defaults to char(1), varchar to no limit */
					if (strcmp((yyvsp[0].conststr), "bpchar") == 0)
						(yyval.typnam)->typmods = list_make1(makeIntConst(1, -1));
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 28332 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1005: /* character: CHARACTER opt_varying  */
#line 1921 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = (yyvsp[0].boolean) ? "varchar": "bpchar"; }
#line 28338 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1006: /* character: CHAR_P opt_varying  */
#line 1923 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = (yyvsp[0].boolean) ? "varchar": "bpchar"; }
#line 28344 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1007: /* character: VARCHAR  */
#line 1925 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = "varchar"; }
#line 28350 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1008: /* character: NATIONAL CHARACTER opt_varying  */
#line 1927 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = (yyvsp[0].boolean) ? "varchar": "bpchar"; }
#line 28356 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1009: /* character: NATIONAL CHAR_P opt_varying  */
#line 1929 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = (yyvsp[0].boolean) ? "varchar": "bpchar"; }
#line 28362 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1010: /* character: NCHAR opt_varying  */
#line 1931 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = (yyvsp[0].boolean) ? "varchar": "bpchar"; }
#line 28368 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1011: /* opt_varying: VARYING  */
#line 1935 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = true; }
#line 28374 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1012: /* opt_varying: %empty  */
#line 1936 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 28380 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1013: /* ConstDatetime: TIMESTAMP '(' Iconst ')' opt_timezone  */
#line 1944 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].boolean))
						(yyval.typnam) = SystemTypeName("timestamptz");
					else
						(yyval.typnam) = SystemTypeName("timestamp");
					(yyval.typnam)->typmods = list_make1(makeIntConst((yyvsp[-2].ival), (yylsp[-2])));
					(yyval.typnam)->location = (yylsp[-4]);
				}
#line 28393 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1014: /* ConstDatetime: TIMESTAMP opt_timezone  */
#line 1953 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].boolean))
						(yyval.typnam) = SystemTypeName("timestamptz");
					else
						(yyval.typnam) = SystemTypeName("timestamp");
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 28405 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1015: /* ConstDatetime: TIME '(' Iconst ')' opt_timezone  */
#line 1961 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].boolean))
						(yyval.typnam) = SystemTypeName("timetz");
					else
						(yyval.typnam) = SystemTypeName("time");
					(yyval.typnam)->typmods = list_make1(makeIntConst((yyvsp[-2].ival), (yylsp[-2])));
					(yyval.typnam)->location = (yylsp[-4]);
				}
#line 28418 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1016: /* ConstDatetime: TIME opt_timezone  */
#line 1970 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].boolean))
						(yyval.typnam) = SystemTypeName("timetz");
					else
						(yyval.typnam) = SystemTypeName("time");
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 28430 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1017: /* ConstInterval: INTERVAL  */
#line 1981 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("interval");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 28439 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1018: /* opt_timezone: WITH_LA TIME ZONE  */
#line 1988 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.boolean) = true; }
#line 28445 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1019: /* opt_timezone: WITHOUT TIME ZONE  */
#line 1989 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.boolean) = false; }
#line 28451 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1020: /* opt_timezone: %empty  */
#line 1990 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 28457 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1037: /* opt_interval: year_keyword  */
#line 2019 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(YEAR), (yylsp[0]))); }
#line 28463 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1038: /* opt_interval: month_keyword  */
#line 2021 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MONTH), (yylsp[0]))); }
#line 28469 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1039: /* opt_interval: day_keyword  */
#line 2023 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(DAY), (yylsp[0]))); }
#line 28475 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1040: /* opt_interval: hour_keyword  */
#line 2025 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(HOUR), (yylsp[0]))); }
#line 28481 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1041: /* opt_interval: minute_keyword  */
#line 2027 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MINUTE), (yylsp[0]))); }
#line 28487 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1042: /* opt_interval: second_keyword  */
#line 2029 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(SECOND), (yylsp[0]))); }
#line 28493 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1043: /* opt_interval: millisecond_keyword  */
#line 2031 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MILLISECOND), (yylsp[0]))); }
#line 28499 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1044: /* opt_interval: microsecond_keyword  */
#line 2033 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MICROSECOND), (yylsp[0]))); }
#line 28505 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1045: /* opt_interval: year_keyword TO month_keyword  */
#line 2035 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(YEAR) |
												 INTERVAL_MASK(MONTH), (yylsp[-2])));
				}
#line 28514 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1046: /* opt_interval: day_keyword TO hour_keyword  */
#line 2040 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(DAY) |
												 INTERVAL_MASK(HOUR), (yylsp[-2])));
				}
#line 28523 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1047: /* opt_interval: day_keyword TO minute_keyword  */
#line 2045 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(DAY) |
												 INTERVAL_MASK(HOUR) |
												 INTERVAL_MASK(MINUTE), (yylsp[-2])));
				}
#line 28533 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1048: /* opt_interval: day_keyword TO second_keyword  */
#line 2051 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(DAY) |
												 INTERVAL_MASK(HOUR) |
												 INTERVAL_MASK(MINUTE) |
												 INTERVAL_MASK(SECOND), (yylsp[-2])));
				}
#line 28544 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1049: /* opt_interval: hour_keyword TO minute_keyword  */
#line 2058 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(HOUR) |
												 INTERVAL_MASK(MINUTE), (yylsp[-2])));
				}
#line 28553 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1050: /* opt_interval: hour_keyword TO second_keyword  */
#line 2063 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(HOUR) |
												 INTERVAL_MASK(MINUTE) |
												 INTERVAL_MASK(SECOND), (yylsp[-2])));
				}
#line 28563 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1051: /* opt_interval: minute_keyword TO second_keyword  */
#line 2069 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MINUTE) |
												 INTERVAL_MASK(SECOND), (yylsp[-2])));
				}
#line 28572 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1052: /* opt_interval: %empty  */
#line 2074 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = NIL; }
#line 28578 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1053: /* a_expr: c_expr  */
#line 2105 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 28584 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1054: /* a_expr: a_expr TYPECAST Typename  */
#line 2108 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.node) = makeTypeCast((yyvsp[-2].node), (yyvsp[0].typnam), 0, (yylsp[-1])); }
#line 28590 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1055: /* a_expr: a_expr COLLATE any_name  */
#line 2110 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGCollateClause *n = makeNode(PGCollateClause);
					n->arg = (yyvsp[-2].node);
					n->collname = (yyvsp[0].list);
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *) n;
				}
#line 28602 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1056: /* a_expr: a_expr AT TIME ZONE a_expr  */
#line 2118 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("timezone"),
											   list_make2((yyvsp[0].node), (yyvsp[-4].node)),
											   (yylsp[-3]));
				}
#line 28612 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1057: /* a_expr: '+' a_expr  */
#line 2133 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", NULL, (yyvsp[0].node), (yylsp[-1])); }
#line 28618 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1058: /* a_expr: '-' a_expr  */
#line 2135 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = doNegate((yyvsp[0].node), (yylsp[-1])); }
#line 28624 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1059: /* a_expr: a_expr '+' a_expr  */
#line 2137 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 28630 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1060: /* a_expr: a_expr '-' a_expr  */
#line 2139 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "-", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 28636 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1061: /* a_expr: a_expr '*' a_expr  */
#line 2141 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "*", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 28642 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1062: /* a_expr: a_expr '/' a_expr  */
#line 2143 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "/", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 28648 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1063: /* a_expr: a_expr INTEGER_DIVISION a_expr  */
#line 2145 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "//", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 28654 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1064: /* a_expr: a_expr '%' a_expr  */
#line 2147 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "%", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 28660 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1065: /* a_expr: a_expr '^' a_expr  */
#line 2149 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "^", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 28666 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1066: /* a_expr: a_expr POWER_OF a_expr  */
#line 2151 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "**", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 28672 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1067: /* a_expr: a_expr '<' a_expr  */
#line 2153 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 28678 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1068: /* a_expr: a_expr '>' a_expr  */
#line 2155 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, ">", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 28684 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1069: /* a_expr: a_expr '=' a_expr  */
#line 2157 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 28690 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1070: /* a_expr: a_expr LESS_EQUALS a_expr  */
#line 2159 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 28696 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1071: /* a_expr: a_expr GREATER_EQUALS a_expr  */
#line 2161 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, ">=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 28702 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1072: /* a_expr: a_expr NOT_EQUALS a_expr  */
#line 2163 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<>", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 28708 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1073: /* a_expr: a_expr qual_Op a_expr  */
#line 2166 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[-1].list), (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 28714 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1074: /* a_expr: qual_Op a_expr  */
#line 2168 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[-1].list), NULL, (yyvsp[0].node), (yylsp[-1])); }
#line 28720 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1075: /* a_expr: a_expr qual_Op  */
#line 2170 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[0].list), (yyvsp[-1].node), NULL, (yylsp[0])); }
#line 28726 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1076: /* a_expr: a_expr AND a_expr  */
#line 2173 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeAndExpr((yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 28732 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1077: /* a_expr: a_expr OR a_expr  */
#line 2175 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeOrExpr((yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 28738 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1078: /* a_expr: NOT a_expr  */
#line 2177 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeNotExpr((yyvsp[0].node), (yylsp[-1])); }
#line 28744 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1079: /* a_expr: NOT_LA a_expr  */
#line 2179 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeNotExpr((yyvsp[0].node), (yylsp[-1])); }
#line 28750 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1080: /* a_expr: a_expr GLOB a_expr  */
#line 2181 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_GLOB, "~~~",
												   (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
				}
#line 28759 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1081: /* a_expr: a_expr LIKE a_expr  */
#line 2186 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_LIKE, "~~",
												   (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
				}
#line 28768 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1082: /* a_expr: a_expr LIKE a_expr ESCAPE a_expr  */
#line 2191 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("like_escape"),
											   list_make3((yyvsp[-4].node), (yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-3]));
					(yyval.node) = (PGNode *) n;
				}
#line 28779 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1083: /* a_expr: a_expr NOT_LA LIKE a_expr  */
#line 2198 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_LIKE, "!~~",
												   (yyvsp[-3].node), (yyvsp[0].node), (yylsp[-2]));
				}
#line 28788 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1084: /* a_expr: a_expr NOT_LA LIKE a_expr ESCAPE a_expr  */
#line 2203 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("not_like_escape"),
											   list_make3((yyvsp[-5].node), (yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-4]));
					(yyval.node) = (PGNode *) n;
				}
#line 28799 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1085: /* a_expr: a_expr ILIKE a_expr  */
#line 2210 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_ILIKE, "~~*",
												   (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
				}
#line 28808 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1086: /* a_expr: a_expr ILIKE a_expr ESCAPE a_expr  */
#line 2215 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("ilike_escape"),
											   list_make3((yyvsp[-4].node), (yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-3]));
					(yyval.node) = (PGNode *) n;
				}
#line 28819 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1087: /* a_expr: a_expr NOT_LA ILIKE a_expr  */
#line 2222 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_ILIKE, "!~~*",
												   (yyvsp[-3].node), (yyvsp[0].node), (yylsp[-2]));
				}
#line 28828 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1088: /* a_expr: a_expr NOT_LA ILIKE a_expr ESCAPE a_expr  */
#line 2227 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("not_ilike_escape"),
											   list_make3((yyvsp[-5].node), (yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-4]));
					(yyval.node) = (PGNode *) n;
				}
#line 28839 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1089: /* a_expr: a_expr SIMILAR TO a_expr  */
#line 2235 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
											   list_make2((yyvsp[0].node), makeNullAConst(-1)),
											   (yylsp[-2]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "~",
												   (yyvsp[-3].node), (PGNode *) n, (yylsp[-2]));
				}
#line 28851 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1090: /* a_expr: a_expr SIMILAR TO a_expr ESCAPE a_expr  */
#line 2243 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
											   list_make2((yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-4]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "~",
												   (yyvsp[-5].node), (PGNode *) n, (yylsp[-4]));
				}
#line 28863 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1091: /* a_expr: a_expr NOT_LA SIMILAR TO a_expr  */
#line 2251 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
											   list_make2((yyvsp[0].node), makeNullAConst(-1)),
											   (yylsp[-3]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "!~",
												   (yyvsp[-4].node), (PGNode *) n, (yylsp[-3]));
				}
#line 28875 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1092: /* a_expr: a_expr NOT_LA SIMILAR TO a_expr ESCAPE a_expr  */
#line 2259 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
											   list_make2((yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-5]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "!~",
												   (yyvsp[-6].node), (PGNode *) n, (yylsp[-5]));
				}
#line 28887 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1093: /* a_expr: a_expr IS NULL_P  */
#line 2277 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-2].node);
					n->nulltesttype = PG_IS_NULL;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 28899 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1094: /* a_expr: a_expr ISNULL  */
#line 2285 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-1].node);
					n->nulltesttype = PG_IS_NULL;
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 28911 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1095: /* a_expr: a_expr IS NOT NULL_P  */
#line 2293 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-3].node);
					n->nulltesttype = IS_NOT_NULL;
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)n;
				}
#line 28923 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1096: /* a_expr: a_expr NOT NULL_P  */
#line 2301 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-2].node);
					n->nulltesttype = IS_NOT_NULL;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 28935 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1097: /* a_expr: a_expr NOTNULL  */
#line 2309 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-1].node);
					n->nulltesttype = IS_NOT_NULL;
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 28947 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1098: /* a_expr: a_expr LAMBDA_ARROW a_expr  */
#line 2317 "third_party/libpg_query/grammar/statements/select.y"
                        {
				PGLambdaFunction *n = makeNode(PGLambdaFunction);
				n->lhs = (yyvsp[-2].node);
				n->rhs = (yyvsp[0].node);
				n->location = (yylsp[-1]);
				(yyval.node) = (PGNode *) n;
			}
#line 28959 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1099: /* a_expr: a_expr DOUBLE_ARROW a_expr  */
#line 2325 "third_party/libpg_query/grammar/statements/select.y"
                        {
							(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "->>", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
			}
#line 28967 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1100: /* a_expr: row OVERLAPS row  */
#line 2329 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if (list_length((yyvsp[-2].list)) != 2)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("wrong number of parameters on left side of OVERLAPS expression"),
								 parser_errposition((yylsp[-2]))));
					if (list_length((yyvsp[0].list)) != 2)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("wrong number of parameters on right side of OVERLAPS expression"),
								 parser_errposition((yylsp[0]))));
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("overlaps"),
											   list_concat((yyvsp[-2].list), (yyvsp[0].list)),
											   (yylsp[-1]));
				}
#line 28987 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1101: /* a_expr: a_expr IS TRUE_P  */
#line 2345 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-2].node);
					b->booltesttype = PG_IS_TRUE;
					b->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)b;
				}
#line 28999 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1102: /* a_expr: a_expr IS NOT TRUE_P  */
#line 2353 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-3].node);
					b->booltesttype = IS_NOT_TRUE;
					b->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)b;
				}
#line 29011 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1103: /* a_expr: a_expr IS FALSE_P  */
#line 2361 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-2].node);
					b->booltesttype = IS_FALSE;
					b->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)b;
				}
#line 29023 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1104: /* a_expr: a_expr IS NOT FALSE_P  */
#line 2369 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-3].node);
					b->booltesttype = IS_NOT_FALSE;
					b->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)b;
				}
#line 29035 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1105: /* a_expr: a_expr IS UNKNOWN  */
#line 2377 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-2].node);
					b->booltesttype = IS_UNKNOWN;
					b->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)b;
				}
#line 29047 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1106: /* a_expr: a_expr IS NOT UNKNOWN  */
#line 2385 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-3].node);
					b->booltesttype = IS_NOT_UNKNOWN;
					b->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)b;
				}
#line 29059 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1107: /* a_expr: a_expr IS DISTINCT FROM a_expr  */
#line 2393 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_DISTINCT, "=", (yyvsp[-4].node), (yyvsp[0].node), (yylsp[-3]));
				}
#line 29067 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1108: /* a_expr: a_expr IS NOT DISTINCT FROM a_expr  */
#line 2397 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_DISTINCT, "=", (yyvsp[-5].node), (yyvsp[0].node), (yylsp[-4]));
				}
#line 29075 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1109: /* a_expr: a_expr IS OF '(' type_list ')'  */
#line 2401 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OF, "=", (yyvsp[-5].node), (PGNode *) (yyvsp[-1].list), (yylsp[-4]));
				}
#line 29083 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1110: /* a_expr: a_expr IS NOT OF '(' type_list ')'  */
#line 2405 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OF, "<>", (yyvsp[-6].node), (PGNode *) (yyvsp[-1].list), (yylsp[-5]));
				}
#line 29091 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1111: /* a_expr: a_expr BETWEEN opt_asymmetric b_expr AND a_expr  */
#line 2409 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_BETWEEN,
												   "BETWEEN",
												   (yyvsp[-5].node),
												   (PGNode *) list_make2((yyvsp[-2].node), (yyvsp[0].node)),
												   (yylsp[-4]));
				}
#line 29103 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1112: /* a_expr: a_expr NOT_LA BETWEEN opt_asymmetric b_expr AND a_expr  */
#line 2417 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_BETWEEN,
												   "NOT BETWEEN",
												   (yyvsp[-6].node),
												   (PGNode *) list_make2((yyvsp[-2].node), (yyvsp[0].node)),
												   (yylsp[-5]));
				}
#line 29115 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1113: /* a_expr: a_expr BETWEEN SYMMETRIC b_expr AND a_expr  */
#line 2425 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_BETWEEN_SYM,
												   "BETWEEN SYMMETRIC",
												   (yyvsp[-5].node),
												   (PGNode *) list_make2((yyvsp[-2].node), (yyvsp[0].node)),
												   (yylsp[-4]));
				}
#line 29127 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1114: /* a_expr: a_expr NOT_LA BETWEEN SYMMETRIC b_expr AND a_expr  */
#line 2433 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_BETWEEN_SYM,
												   "NOT BETWEEN SYMMETRIC",
												   (yyvsp[-6].node),
												   (PGNode *) list_make2((yyvsp[-2].node), (yyvsp[0].node)),
												   (yylsp[-5]));
				}
#line 29139 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1115: /* a_expr: a_expr IN_P in_expr  */
#line 2441 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* in_expr returns a PGSubLink or a list of a_exprs */
					if (IsA((yyvsp[0].node), PGSubLink))
					{
						/* generate foo = ANY (subquery) */
						PGSubLink *n = (PGSubLink *) (yyvsp[0].node);
						n->subLinkType = PG_ANY_SUBLINK;
						n->subLinkId = 0;
						n->testexpr = (yyvsp[-2].node);
						n->operName = NIL;		/* show it's IN not = ANY */
						n->location = (yylsp[-1]);
						(yyval.node) = (PGNode *)n;
					}
					else
					{
						/* generate scalar IN expression */
						(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_IN, "=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
					}
				}
#line 29163 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1116: /* a_expr: a_expr NOT_LA IN_P in_expr  */
#line 2461 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* in_expr returns a PGSubLink or a list of a_exprs */
					if (IsA((yyvsp[0].node), PGSubLink))
					{
						/* generate NOT (foo = ANY (subquery)) */
						/* Make an = ANY node */
						PGSubLink *n = (PGSubLink *) (yyvsp[0].node);
						n->subLinkType = PG_ANY_SUBLINK;
						n->subLinkId = 0;
						n->testexpr = (yyvsp[-3].node);
						n->operName = NIL;		/* show it's IN not = ANY */
						n->location = (yylsp[-2]);
						/* Stick a NOT on top; must have same parse location */
						(yyval.node) = makeNotExpr((PGNode *) n, (yylsp[-2]));
					}
					else
					{
						/* generate scalar NOT IN expression */
						(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_IN, "<>", (yyvsp[-3].node), (yyvsp[0].node), (yylsp[-2]));
					}
				}
#line 29189 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1117: /* a_expr: a_expr subquery_Op sub_type select_with_parens  */
#line 2483 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSubLink *n = makeNode(PGSubLink);
					n->subLinkType = (yyvsp[-1].subquerytype);
					n->subLinkId = 0;
					n->testexpr = (yyvsp[-3].node);
					n->operName = (yyvsp[-2].list);
					n->subselect = (yyvsp[0].node);
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)n;
				}
#line 29204 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1118: /* a_expr: a_expr subquery_Op sub_type '(' a_expr ')'  */
#line 2494 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[-3].subquerytype) == PG_ANY_SUBLINK)
						(yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP_ANY, (yyvsp[-4].list), (yyvsp[-5].node), (yyvsp[-1].node), (yylsp[-4]));
					else
						(yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP_ALL, (yyvsp[-4].list), (yyvsp[-5].node), (yyvsp[-1].node), (yylsp[-4]));
				}
#line 29215 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1119: /* a_expr: DEFAULT  */
#line 2501 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/*
					 * The SQL spec only allows DEFAULT in "contextually typed
					 * expressions", but for us, it's easier to allow it in
					 * any a_expr and then throw error during parse analysis
					 * if it's in an inappropriate context.  This way also
					 * lets us say something smarter than "syntax error".
					 */
					PGSetToDefault *n = makeNode(PGSetToDefault);
					/* parse analysis will fill in the rest */
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 29233 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1120: /* a_expr: COLUMNS '(' a_expr ')'  */
#line 2515 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAStar *star = makeNode(PGAStar);
					star->expr = (yyvsp[-1].node);
					star->columns = true;
					star->location = (yylsp[-3]);
					(yyval.node) = (PGNode *) star;
				}
#line 29245 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1121: /* a_expr: '*' opt_except_list opt_replace_list  */
#line 2523 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAStar *star = makeNode(PGAStar);
					star->except_list = (yyvsp[-1].list);
					star->replace_list = (yyvsp[0].list);
					star->location = (yylsp[-2]);
					(yyval.node) = (PGNode *) star;
				}
#line 29257 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1122: /* a_expr: ColId '.' '*' opt_except_list opt_replace_list  */
#line 2531 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAStar *star = makeNode(PGAStar);
					star->relation = (yyvsp[-4].str);
					star->except_list = (yyvsp[-1].list);
					star->replace_list = (yyvsp[0].list);
					star->location = (yylsp[-4]);
					(yyval.node) = (PGNode *) star;
				}
#line 29270 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1123: /* b_expr: c_expr  */
#line 2551 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 29276 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1124: /* b_expr: b_expr TYPECAST Typename  */
#line 2553 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeTypeCast((yyvsp[-2].node), (yyvsp[0].typnam), 0, (yylsp[-1])); }
#line 29282 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1125: /* b_expr: '+' b_expr  */
#line 2555 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", NULL, (yyvsp[0].node), (yylsp[-1])); }
#line 29288 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1126: /* b_expr: '-' b_expr  */
#line 2557 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = doNegate((yyvsp[0].node), (yylsp[-1])); }
#line 29294 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1127: /* b_expr: b_expr '+' b_expr  */
#line 2559 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 29300 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1128: /* b_expr: b_expr '-' b_expr  */
#line 2561 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "-", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 29306 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1129: /* b_expr: b_expr '*' b_expr  */
#line 2563 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "*", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 29312 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1130: /* b_expr: b_expr '/' b_expr  */
#line 2565 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "/", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 29318 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1131: /* b_expr: b_expr INTEGER_DIVISION b_expr  */
#line 2567 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "//", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 29324 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1132: /* b_expr: b_expr '%' b_expr  */
#line 2569 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "%", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 29330 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1133: /* b_expr: b_expr '^' b_expr  */
#line 2571 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "^", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 29336 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1134: /* b_expr: b_expr POWER_OF b_expr  */
#line 2573 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "**", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 29342 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1135: /* b_expr: b_expr '<' b_expr  */
#line 2575 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 29348 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1136: /* b_expr: b_expr '>' b_expr  */
#line 2577 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, ">", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 29354 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1137: /* b_expr: b_expr '=' b_expr  */
#line 2579 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 29360 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1138: /* b_expr: b_expr LESS_EQUALS b_expr  */
#line 2581 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 29366 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1139: /* b_expr: b_expr GREATER_EQUALS b_expr  */
#line 2583 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, ">=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 29372 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1140: /* b_expr: b_expr NOT_EQUALS b_expr  */
#line 2585 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<>", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 29378 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1141: /* b_expr: b_expr qual_Op b_expr  */
#line 2587 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[-1].list), (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 29384 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1142: /* b_expr: qual_Op b_expr  */
#line 2589 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[-1].list), NULL, (yyvsp[0].node), (yylsp[-1])); }
#line 29390 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1143: /* b_expr: b_expr qual_Op  */
#line 2591 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[0].list), (yyvsp[-1].node), NULL, (yylsp[0])); }
#line 29396 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1144: /* b_expr: b_expr IS DISTINCT FROM b_expr  */
#line 2593 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_DISTINCT, "=", (yyvsp[-4].node), (yyvsp[0].node), (yylsp[-3]));
				}
#line 29404 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1145: /* b_expr: b_expr IS NOT DISTINCT FROM b_expr  */
#line 2597 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_DISTINCT, "=", (yyvsp[-5].node), (yyvsp[0].node), (yylsp[-4]));
				}
#line 29412 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1146: /* b_expr: b_expr IS OF '(' type_list ')'  */
#line 2601 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OF, "=", (yyvsp[-5].node), (PGNode *) (yyvsp[-1].list), (yylsp[-4]));
				}
#line 29420 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1147: /* b_expr: b_expr IS NOT OF '(' type_list ')'  */
#line 2605 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OF, "<>", (yyvsp[-6].node), (PGNode *) (yyvsp[-1].list), (yylsp[-5]));
				}
#line 29428 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1149: /* c_expr: row  */
#line 2619 "third_party/libpg_query/grammar/statements/select.y"
                              {
				PGFuncCall *n = makeFuncCall(SystemFuncName("row"), (yyvsp[0].list), (yylsp[0]));
				(yyval.node) = (PGNode *) n;
			}
#line 29437 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1150: /* c_expr: indirection_expr opt_extended_indirection  */
#line 2624 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].list))
					{
						PGAIndirection *n = makeNode(PGAIndirection);
						n->arg = (PGNode *) (yyvsp[-1].node);
						n->indirection = check_indirection((yyvsp[0].list), yyscanner);
						(yyval.node) = (PGNode *) n;
					}
					else
						(yyval.node) = (PGNode *) (yyvsp[-1].node);
				}
#line 29453 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1151: /* d_expr: columnref  */
#line 2637 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 29459 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1152: /* d_expr: AexprConst  */
#line 2638 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 29465 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1153: /* d_expr: '#' ICONST  */
#line 2640 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGPositionalReference *n = makeNode(PGPositionalReference);
					n->position = (yyvsp[0].ival);
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *) n;
				}
#line 29476 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1154: /* d_expr: '$' ColLabel  */
#line 2647 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeNamedParamRef((yyvsp[0].str), (yylsp[-1]));
				}
#line 29484 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1155: /* d_expr: '[' opt_expr_list_opt_comma ']'  */
#line 2650 "third_party/libpg_query/grammar/statements/select.y"
                                                          {
				PGFuncCall *n = makeFuncCall(SystemFuncName("list_value"), (yyvsp[-1].list), (yylsp[-1]));
				(yyval.node) = (PGNode *) n;
			}
#line 29493 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1156: /* d_expr: list_comprehension  */
#line 2654 "third_party/libpg_query/grammar/statements/select.y"
                                             {
				(yyval.node) = (yyvsp[0].node);
			}
#line 29501 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1157: /* d_expr: ARRAY select_with_parens  */
#line 2658 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSubLink *n = makeNode(PGSubLink);
					n->subLinkType = PG_ARRAY_SUBLINK;
					n->subLinkId = 0;
					n->testexpr = NULL;
					n->operName = NULL;
					n->subselect = (yyvsp[0].node);
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 29516 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1158: /* d_expr: ARRAY '[' opt_expr_list_opt_comma ']'  */
#line 2668 "third_party/libpg_query/grammar/statements/select.y"
                                                                {
				PGList *func_name = list_make1(makeString("construct_array"));
				PGFuncCall *n = makeFuncCall(func_name, (yyvsp[-1].list), (yylsp[-3]));
				(yyval.node) = (PGNode *) n;
			}
#line 29526 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1159: /* d_expr: case_expr  */
#line 2674 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 29532 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1160: /* d_expr: select_with_parens  */
#line 2676 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSubLink *n = makeNode(PGSubLink);
					n->subLinkType = PG_EXPR_SUBLINK;
					n->subLinkId = 0;
					n->testexpr = NULL;
					n->operName = NIL;
					n->subselect = (yyvsp[0].node);
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 29547 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1161: /* d_expr: select_with_parens indirection  */
#line 2687 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/*
					 * Because the select_with_parens nonterminal is designed
					 * to "eat" as many levels of parens as possible, the
					 * '(' a_expr ')' opt_indirection production above will
					 * fail to match a sub-SELECT with indirection decoration;
					 * the sub-SELECT won't be regarded as an a_expr as long
					 * as there are parens around it.  To support applying
					 * subscripting or field selection to a sub-SELECT result,
					 * we need this redundant-looking production.
					 */
					PGSubLink *n = makeNode(PGSubLink);
					PGAIndirection *a = makeNode(PGAIndirection);
					n->subLinkType = PG_EXPR_SUBLINK;
					n->subLinkId = 0;
					n->testexpr = NULL;
					n->operName = NIL;
					n->subselect = (yyvsp[-1].node);
					n->location = (yylsp[-1]);
					a->arg = (PGNode *)n;
					a->indirection = check_indirection((yyvsp[0].list), yyscanner);
					(yyval.node) = (PGNode *)a;
				}
#line 29575 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1162: /* d_expr: EXISTS select_with_parens  */
#line 2711 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSubLink *n = makeNode(PGSubLink);
					n->subLinkType = PG_EXISTS_SUBLINK;
					n->subLinkId = 0;
					n->testexpr = NULL;
					n->operName = NIL;
					n->subselect = (yyvsp[0].node);
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 29590 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1163: /* d_expr: grouping_or_grouping_id '(' expr_list_opt_comma ')'  */
#line 2722 "third_party/libpg_query/grammar/statements/select.y"
                          {
				  PGGroupingFunc *g = makeNode(PGGroupingFunc);
				  g->args = (yyvsp[-1].list);
				  g->location = (yylsp[-3]);
				  (yyval.node) = (PGNode *)g;
			  }
#line 29601 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1164: /* indirection_expr: '?'  */
#line 2733 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeParamRef(0, (yylsp[0]));
				}
#line 29609 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1165: /* indirection_expr: PARAM  */
#line 2737 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGParamRef *p = makeNode(PGParamRef);
					p->number = (yyvsp[0].ival);
					p->location = (yylsp[0]);
					(yyval.node) = (PGNode *) p;
				}
#line 29620 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1166: /* indirection_expr: '(' a_expr ')'  */
#line 2744 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (yyvsp[-1].node);
				}
#line 29628 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1167: /* indirection_expr: struct_expr  */
#line 2748 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (yyvsp[0].node);
				}
#line 29636 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1168: /* indirection_expr: MAP '{' opt_map_arguments_opt_comma '}'  */
#line 2752 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGList *key_list = NULL;
					PGList *value_list = NULL;
					PGListCell *lc;
					PGList *entry_list = (yyvsp[-1].list);
					foreach(lc, entry_list)
					{
						PGList *l = (PGList *) lc->data.ptr_value;
						key_list = lappend(key_list, (PGNode *) l->head->data.ptr_value);
						value_list = lappend(value_list, (PGNode *) l->tail->data.ptr_value);
					}
					PGNode *keys   = (PGNode *) makeFuncCall(SystemFuncName("list_value"), key_list, (yylsp[-1]));
					PGNode *values = (PGNode *) makeFuncCall(SystemFuncName("list_value"), value_list, (yylsp[-1]));
					PGFuncCall *f = makeFuncCall(SystemFuncName("map"), list_make2(keys, values), (yylsp[-1]));
					(yyval.node) = (PGNode *) f;
				}
#line 29657 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1169: /* indirection_expr: func_expr  */
#line 2769 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (yyvsp[0].node);
				}
#line 29665 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1170: /* struct_expr: '{' dict_arguments_opt_comma '}'  */
#line 2777 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *f = makeFuncCall(SystemFuncName("struct_pack"), (yyvsp[-1].list), (yylsp[-1]));
					(yyval.node) = (PGNode *) f;
				}
#line 29674 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1171: /* func_application: func_name '(' ')'  */
#line 2786 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall((yyvsp[-2].list), NIL, (yylsp[-2]));
				}
#line 29682 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1172: /* func_application: func_name '(' func_arg_list opt_sort_clause opt_ignore_nulls ')'  */
#line 2790 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall((yyvsp[-5].list), (yyvsp[-3].list), (yylsp[-5]));
					n->agg_order = (yyvsp[-2].list);
					n->agg_ignore_nulls = (yyvsp[-1].boolean);
					(yyval.node) = (PGNode *)n;
				}
#line 29693 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1173: /* func_application: func_name '(' VARIADIC func_arg_expr opt_sort_clause opt_ignore_nulls ')'  */
#line 2797 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall((yyvsp[-6].list), list_make1((yyvsp[-3].node)), (yylsp[-6]));
					n->func_variadic = true;
					n->agg_order = (yyvsp[-2].list);
					n->agg_ignore_nulls = (yyvsp[-1].boolean);
					(yyval.node) = (PGNode *)n;
				}
#line 29705 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1174: /* func_application: func_name '(' func_arg_list ',' VARIADIC func_arg_expr opt_sort_clause opt_ignore_nulls ')'  */
#line 2805 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall((yyvsp[-8].list), lappend((yyvsp[-6].list), (yyvsp[-3].node)), (yylsp[-8]));
					n->func_variadic = true;
					n->agg_order = (yyvsp[-2].list);
					n->agg_ignore_nulls = (yyvsp[-1].boolean);
					(yyval.node) = (PGNode *)n;
				}
#line 29717 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1175: /* func_application: func_name '(' ALL func_arg_list opt_sort_clause opt_ignore_nulls ')'  */
#line 2813 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall((yyvsp[-6].list), (yyvsp[-3].list), (yylsp[-6]));
					n->agg_order = (yyvsp[-2].list);
					n->agg_ignore_nulls = (yyvsp[-1].boolean);
					/* Ideally we'd mark the PGFuncCall node to indicate
					 * "must be an aggregate", but there's no provision
					 * for that in PGFuncCall at the moment.
					 */
					(yyval.node) = (PGNode *)n;
				}
#line 29732 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1176: /* func_application: func_name '(' DISTINCT func_arg_list opt_sort_clause opt_ignore_nulls ')'  */
#line 2824 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall((yyvsp[-6].list), (yyvsp[-3].list), (yylsp[-6]));
					n->agg_order = (yyvsp[-2].list);
					n->agg_ignore_nulls = (yyvsp[-1].boolean);
					n->agg_distinct = true;
					(yyval.node) = (PGNode *)n;
				}
#line 29744 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1177: /* func_expr: func_application within_group_clause filter_clause export_clause over_clause  */
#line 2844 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = (PGFuncCall *) (yyvsp[-4].node);
					/*
					 * The order clause for WITHIN GROUP and the one for
					 * plain-aggregate ORDER BY share a field, so we have to
					 * check here that at most one is present.  We also check
					 * for DISTINCT and VARIADIC here to give a better error
					 * location.  Other consistency checks are deferred to
					 * parse analysis.
					 */
					if ((yyvsp[-3].list) != NIL)
					{
						if (n->agg_order != NIL)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("cannot use multiple ORDER BY clauses with WITHIN GROUP"),
									 parser_errposition((yylsp[-3]))));
						if (n->agg_distinct)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("cannot use DISTINCT with WITHIN GROUP"),
									 parser_errposition((yylsp[-3]))));
						if (n->func_variadic)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("cannot use VARIADIC with WITHIN GROUP"),
									 parser_errposition((yylsp[-3]))));
						n->agg_order = (yyvsp[-3].list);
						n->agg_within_group = true;
					}
					n->agg_filter = (yyvsp[-2].node);
					n->export_state = (yyvsp[-1].boolean);
					n->over = (yyvsp[0].windef);
					(yyval.node) = (PGNode *) n;
				}
#line 29784 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1178: /* func_expr: func_expr_common_subexpr  */
#line 2880 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 29790 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1179: /* func_expr_windowless: func_application  */
#line 2890 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 29796 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1180: /* func_expr_windowless: func_expr_common_subexpr  */
#line 2891 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 29802 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1181: /* func_expr_common_subexpr: COLLATION FOR '(' a_expr ')'  */
#line 2899 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("pg_collation_for"),
											   list_make1((yyvsp[-1].node)),
											   (yylsp[-4]));
				}
#line 29812 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1182: /* func_expr_common_subexpr: CAST '(' a_expr AS Typename ')'  */
#line 2905 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeTypeCast((yyvsp[-3].node), (yyvsp[-1].typnam), 0, (yylsp[-5])); }
#line 29818 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1183: /* func_expr_common_subexpr: TRY_CAST '(' a_expr AS Typename ')'  */
#line 2907 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeTypeCast((yyvsp[-3].node), (yyvsp[-1].typnam), 1, (yylsp[-5])); }
#line 29824 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1184: /* func_expr_common_subexpr: EXTRACT '(' extract_list ')'  */
#line 2909 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("date_part"), (yyvsp[-1].list), (yylsp[-3]));
				}
#line 29832 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1185: /* func_expr_common_subexpr: OVERLAY '(' overlay_list ')'  */
#line 2913 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* overlay(A PLACING B FROM C FOR D) is converted to
					 * overlay(A, B, C, D)
					 * overlay(A PLACING B FROM C) is converted to
					 * overlay(A, B, C)
					 */
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("overlay"), (yyvsp[-1].list), (yylsp[-3]));
				}
#line 29845 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1186: /* func_expr_common_subexpr: POSITION '(' position_list ')'  */
#line 2922 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* position(A in B) is converted to position(B, A) */
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("position"), (yyvsp[-1].list), (yylsp[-3]));
				}
#line 29854 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1187: /* func_expr_common_subexpr: SUBSTRING '(' substr_list ')'  */
#line 2927 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* substring(A from B for C) is converted to
					 * substring(A, B, C) - thomas 2000-11-28
					 */
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("substring"), (yyvsp[-1].list), (yylsp[-3]));
				}
#line 29865 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1188: /* func_expr_common_subexpr: TREAT '(' a_expr AS Typename ')'  */
#line 2934 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* TREAT(expr AS target) converts expr of a particular type to target,
					 * which is defined to be a subtype of the original expression.
					 * In SQL99, this is intended for use with structured UDTs,
					 * but let's make this a generally useful form allowing stronger
					 * coercions than are handled by implicit casting.
					 *
					 * Convert SystemTypeName() to SystemFuncName() even though
					 * at the moment they result in the same thing.
					 */
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName(((PGValue *)llast((yyvsp[-1].typnam)->names))->val.str),
												list_make1((yyvsp[-3].node)),
												(yylsp[-5]));
				}
#line 29884 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1189: /* func_expr_common_subexpr: TRIM '(' BOTH trim_list ')'  */
#line 2949 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* various trim expressions are defined in SQL
					 * - thomas 1997-07-19
					 */
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("trim"), (yyvsp[-1].list), (yylsp[-4]));
				}
#line 29895 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1190: /* func_expr_common_subexpr: TRIM '(' LEADING trim_list ')'  */
#line 2956 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("ltrim"), (yyvsp[-1].list), (yylsp[-4]));
				}
#line 29903 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1191: /* func_expr_common_subexpr: TRIM '(' TRAILING trim_list ')'  */
#line 2960 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("rtrim"), (yyvsp[-1].list), (yylsp[-4]));
				}
#line 29911 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1192: /* func_expr_common_subexpr: TRIM '(' trim_list ')'  */
#line 2964 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("trim"), (yyvsp[-1].list), (yylsp[-3]));
				}
#line 29919 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1193: /* func_expr_common_subexpr: NULLIF '(' a_expr ',' a_expr ')'  */
#line 2968 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NULLIF, "=", (yyvsp[-3].node), (yyvsp[-1].node), (yylsp[-5]));
				}
#line 29927 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1194: /* func_expr_common_subexpr: COALESCE '(' expr_list_opt_comma ')'  */
#line 2972 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGCoalesceExpr *c = makeNode(PGCoalesceExpr);
					c->args = (yyvsp[-1].list);
					c->location = (yylsp[-3]);
					(yyval.node) = (PGNode *)c;
				}
#line 29938 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1195: /* list_comprehension: '[' a_expr FOR ColId IN_P a_expr ']'  */
#line 2982 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGLambdaFunction *lambda = makeNode(PGLambdaFunction);
					lambda->lhs = makeColumnRef((yyvsp[-3].str), NIL, (yylsp[-3]), yyscanner);
					lambda->rhs = (yyvsp[-5].node);
					lambda->location = (yylsp[-6]);
					PGFuncCall *n = makeFuncCall(SystemFuncName("list_apply"), list_make2((yyvsp[-1].node), lambda), (yylsp[-6]));
					(yyval.node) = (PGNode *) n;
				}
#line 29951 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1196: /* list_comprehension: '[' a_expr FOR ColId IN_P c_expr IF_P a_expr ']'  */
#line 2991 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGLambdaFunction *lambda = makeNode(PGLambdaFunction);
					lambda->lhs = makeColumnRef((yyvsp[-5].str), NIL, (yylsp[-5]), yyscanner);
					lambda->rhs = (yyvsp[-7].node);
					lambda->location = (yylsp[-8]);

					PGLambdaFunction *lambda_filter = makeNode(PGLambdaFunction);
					lambda_filter->lhs = makeColumnRef((yyvsp[-5].str), NIL, (yylsp[-5]), yyscanner);
					lambda_filter->rhs = (yyvsp[-1].node);
					lambda_filter->location = (yylsp[-1]);
					PGFuncCall *filter = makeFuncCall(SystemFuncName("list_filter"), list_make2((yyvsp[-3].node), lambda_filter), (yylsp[-8]));
					PGFuncCall *n = makeFuncCall(SystemFuncName("list_apply"), list_make2(filter, lambda), (yylsp[-8]));
					(yyval.node) = (PGNode *) n;
				}
#line 29970 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1197: /* within_group_clause: WITHIN GROUP_P '(' sort_clause ')'  */
#line 3012 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 29976 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1198: /* within_group_clause: %empty  */
#line 3013 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 29982 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1199: /* filter_clause: FILTER '(' WHERE a_expr ')'  */
#line 3017 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[-1].node); }
#line 29988 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1200: /* filter_clause: FILTER '(' a_expr ')'  */
#line 3018 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[-1].node); }
#line 29994 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1201: /* filter_clause: %empty  */
#line 3019 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 30000 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1202: /* export_clause: EXPORT_STATE  */
#line 3023 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.boolean) = true; }
#line 30006 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1203: /* export_clause: %empty  */
#line 3024 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 30012 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1204: /* window_clause: WINDOW window_definition_list  */
#line 3031 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 30018 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1205: /* window_clause: %empty  */
#line 3032 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 30024 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1206: /* window_definition_list: window_definition  */
#line 3036 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].windef)); }
#line 30030 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1207: /* window_definition_list: window_definition_list ',' window_definition  */
#line 3038 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].windef)); }
#line 30036 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1208: /* window_definition: ColId AS window_specification  */
#line 3043 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = (yyvsp[0].windef);
					n->name = (yyvsp[-2].str);
					(yyval.windef) = n;
				}
#line 30046 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1209: /* over_clause: OVER window_specification  */
#line 3051 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.windef) = (yyvsp[0].windef); }
#line 30052 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1210: /* over_clause: OVER ColId  */
#line 3053 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->name = (yyvsp[0].str);
					n->refname = NULL;
					n->partitionClause = NIL;
					n->orderClause = NIL;
					n->frameOptions = FRAMEOPTION_DEFAULTS;
					n->startOffset = NULL;
					n->endOffset = NULL;
					n->location = (yylsp[0]);
					(yyval.windef) = n;
				}
#line 30069 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1211: /* over_clause: %empty  */
#line 3066 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.windef) = NULL; }
#line 30075 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1212: /* window_specification: '(' opt_existing_window_name opt_partition_clause opt_sort_clause opt_frame_clause ')'  */
#line 3071 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->name = NULL;
					n->refname = (yyvsp[-4].str);
					n->partitionClause = (yyvsp[-3].list);
					n->orderClause = (yyvsp[-2].list);
					/* copy relevant fields of opt_frame_clause */
					n->frameOptions = (yyvsp[-1].windef)->frameOptions;
					n->startOffset = (yyvsp[-1].windef)->startOffset;
					n->endOffset = (yyvsp[-1].windef)->endOffset;
					n->location = (yylsp[-5]);
					(yyval.windef) = n;
				}
#line 30093 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1213: /* opt_existing_window_name: ColId  */
#line 3096 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 30099 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1214: /* opt_existing_window_name: %empty  */
#line 3097 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = NULL; }
#line 30105 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1215: /* opt_partition_clause: PARTITION BY expr_list  */
#line 3100 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.list) = (yyvsp[0].list); }
#line 30111 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1216: /* opt_partition_clause: %empty  */
#line 3101 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 30117 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1217: /* opt_frame_clause: RANGE frame_extent  */
#line 3113 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = (yyvsp[0].windef);
					n->frameOptions |= FRAMEOPTION_NONDEFAULT | FRAMEOPTION_RANGE;
					(yyval.windef) = n;
				}
#line 30127 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1218: /* opt_frame_clause: ROWS frame_extent  */
#line 3119 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = (yyvsp[0].windef);
					n->frameOptions |= FRAMEOPTION_NONDEFAULT | FRAMEOPTION_ROWS;
					(yyval.windef) = n;
				}
#line 30137 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1219: /* opt_frame_clause: %empty  */
#line 3125 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->frameOptions = FRAMEOPTION_DEFAULTS;
					n->startOffset = NULL;
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 30149 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1220: /* frame_extent: frame_bound  */
#line 3135 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = (yyvsp[0].windef);
					/* reject invalid cases */
					if (n->frameOptions & FRAMEOPTION_START_UNBOUNDED_FOLLOWING)
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame start cannot be UNBOUNDED FOLLOWING"),
								 parser_errposition((yylsp[0]))));
					if (n->frameOptions & FRAMEOPTION_START_VALUE_FOLLOWING)
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame starting from following row cannot end with current row"),
								 parser_errposition((yylsp[0]))));
					n->frameOptions |= FRAMEOPTION_END_CURRENT_ROW;
					(yyval.windef) = n;
				}
#line 30170 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1221: /* frame_extent: BETWEEN frame_bound AND frame_bound  */
#line 3152 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n1 = (yyvsp[-2].windef);
					PGWindowDef *n2 = (yyvsp[0].windef);
					/* form merged options */
					int		frameOptions = n1->frameOptions;
					/* shift converts START_ options to END_ options */
					frameOptions |= n2->frameOptions << 1;
					frameOptions |= FRAMEOPTION_BETWEEN;
					/* reject invalid cases */
					if (frameOptions & FRAMEOPTION_START_UNBOUNDED_FOLLOWING)
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame start cannot be UNBOUNDED FOLLOWING"),
								 parser_errposition((yylsp[-2]))));
					if (frameOptions & FRAMEOPTION_END_UNBOUNDED_PRECEDING)
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame end cannot be UNBOUNDED PRECEDING"),
								 parser_errposition((yylsp[0]))));
					if ((frameOptions & FRAMEOPTION_START_CURRENT_ROW) &&
						(frameOptions & FRAMEOPTION_END_VALUE_PRECEDING))
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame starting from current row cannot have preceding rows"),
								 parser_errposition((yylsp[0]))));
					if ((frameOptions & FRAMEOPTION_START_VALUE_FOLLOWING) &&
						(frameOptions & (FRAMEOPTION_END_VALUE_PRECEDING |
										 FRAMEOPTION_END_CURRENT_ROW)))
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame starting from following row cannot have preceding rows"),
								 parser_errposition((yylsp[0]))));
					n1->frameOptions = frameOptions;
					n1->endOffset = n2->startOffset;
					(yyval.windef) = n1;
				}
#line 30211 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1222: /* frame_bound: UNBOUNDED PRECEDING  */
#line 3197 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->frameOptions = FRAMEOPTION_START_UNBOUNDED_PRECEDING;
					n->startOffset = NULL;
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 30223 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1223: /* frame_bound: UNBOUNDED FOLLOWING  */
#line 3205 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->frameOptions = FRAMEOPTION_START_UNBOUNDED_FOLLOWING;
					n->startOffset = NULL;
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 30235 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1224: /* frame_bound: CURRENT_P ROW  */
#line 3213 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->frameOptions = FRAMEOPTION_START_CURRENT_ROW;
					n->startOffset = NULL;
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 30247 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1225: /* frame_bound: a_expr PRECEDING  */
#line 3221 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->frameOptions = FRAMEOPTION_START_VALUE_PRECEDING;
					n->startOffset = (yyvsp[-1].node);
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 30259 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1226: /* frame_bound: a_expr FOLLOWING  */
#line 3229 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->frameOptions = FRAMEOPTION_START_VALUE_FOLLOWING;
					n->startOffset = (yyvsp[-1].node);
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 30271 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1227: /* qualified_row: ROW '(' expr_list_opt_comma ')'  */
#line 3249 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 30277 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1228: /* qualified_row: ROW '(' ')'  */
#line 3250 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = NIL; }
#line 30283 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1229: /* row: qualified_row  */
#line 3253 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[0].list);}
#line 30289 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1230: /* row: '(' expr_list ',' a_expr ')'  */
#line 3254 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = lappend((yyvsp[-3].list), (yyvsp[-1].node)); }
#line 30295 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1231: /* dict_arg: ColIdOrString ':' a_expr  */
#line 3258 "third_party/libpg_query/grammar/statements/select.y"
                                                                                {
		PGNamedArgExpr *na = makeNode(PGNamedArgExpr);
		na->name = (yyvsp[-2].str);
		na->arg = (PGExpr *) (yyvsp[0].node);
		na->argnumber = -1;
		na->location = (yylsp[-2]);
		(yyval.node) = (PGNode *) na;
	}
#line 30308 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1232: /* dict_arguments: dict_arg  */
#line 3268 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 30314 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1233: /* dict_arguments: dict_arguments ',' dict_arg  */
#line 3269 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 30320 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1234: /* dict_arguments_opt_comma: dict_arguments  */
#line 3273 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 30326 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1235: /* dict_arguments_opt_comma: dict_arguments ','  */
#line 3274 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 30332 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1236: /* map_arg: a_expr ':' a_expr  */
#line 3279 "third_party/libpg_query/grammar/statements/select.y"
                        {
				(yyval.list) = list_make2((yyvsp[-2].node), (yyvsp[0].node));
			}
#line 30340 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1237: /* map_arguments: map_arg  */
#line 3285 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].list)); }
#line 30346 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1238: /* map_arguments: map_arguments ',' map_arg  */
#line 3286 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].list)); }
#line 30352 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1239: /* map_arguments_opt_comma: map_arguments  */
#line 3291 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 30358 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1240: /* map_arguments_opt_comma: map_arguments ','  */
#line 3292 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 30364 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1241: /* opt_map_arguments_opt_comma: map_arguments_opt_comma  */
#line 3297 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 30370 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1242: /* opt_map_arguments_opt_comma: %empty  */
#line 3298 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = NULL; }
#line 30376 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1243: /* sub_type: ANY  */
#line 3301 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.subquerytype) = PG_ANY_SUBLINK; }
#line 30382 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1244: /* sub_type: SOME  */
#line 3302 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.subquerytype) = PG_ANY_SUBLINK; }
#line 30388 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1245: /* sub_type: ALL  */
#line 3303 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.subquerytype) = PG_ALL_SUBLINK; }
#line 30394 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1246: /* all_Op: Op  */
#line 3306 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 30400 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1247: /* all_Op: MathOp  */
#line 3307 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.str) = (char*) (yyvsp[0].conststr); }
#line 30406 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1248: /* MathOp: '+'  */
#line 3310 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.conststr) = "+"; }
#line 30412 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1249: /* MathOp: '-'  */
#line 3311 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "-"; }
#line 30418 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1250: /* MathOp: '*'  */
#line 3312 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "*"; }
#line 30424 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1251: /* MathOp: '/'  */
#line 3313 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "/"; }
#line 30430 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1252: /* MathOp: INTEGER_DIVISION  */
#line 3314 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.conststr) = "//"; }
#line 30436 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1253: /* MathOp: '%'  */
#line 3315 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "%"; }
#line 30442 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1254: /* MathOp: '^'  */
#line 3316 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "^"; }
#line 30448 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1255: /* MathOp: POWER_OF  */
#line 3317 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "**"; }
#line 30454 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1256: /* MathOp: '<'  */
#line 3318 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "<"; }
#line 30460 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1257: /* MathOp: '>'  */
#line 3319 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = ">"; }
#line 30466 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1258: /* MathOp: '='  */
#line 3320 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "="; }
#line 30472 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1259: /* MathOp: LESS_EQUALS  */
#line 3321 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.conststr) = "<="; }
#line 30478 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1260: /* MathOp: GREATER_EQUALS  */
#line 3322 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.conststr) = ">="; }
#line 30484 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1261: /* MathOp: NOT_EQUALS  */
#line 3323 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.conststr) = "<>"; }
#line 30490 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1262: /* qual_Op: Op  */
#line 3327 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 30496 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1263: /* qual_Op: OPERATOR '(' any_operator ')'  */
#line 3329 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = (yyvsp[-1].list); }
#line 30502 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1264: /* qual_all_Op: all_Op  */
#line 3334 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 30508 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1265: /* qual_all_Op: OPERATOR '(' any_operator ')'  */
#line 3336 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = (yyvsp[-1].list); }
#line 30514 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1266: /* subquery_Op: all_Op  */
#line 3341 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 30520 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1267: /* subquery_Op: OPERATOR '(' any_operator ')'  */
#line 3343 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = (yyvsp[-1].list); }
#line 30526 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1268: /* subquery_Op: LIKE  */
#line 3345 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("~~")); }
#line 30532 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1269: /* subquery_Op: NOT_LA LIKE  */
#line 3347 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("!~~")); }
#line 30538 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1270: /* subquery_Op: GLOB  */
#line 3349 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("~~~")); }
#line 30544 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1271: /* subquery_Op: NOT_LA GLOB  */
#line 3351 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("!~~~")); }
#line 30550 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1272: /* subquery_Op: ILIKE  */
#line 3353 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("~~*")); }
#line 30556 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1273: /* subquery_Op: NOT_LA ILIKE  */
#line 3355 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("!~~*")); }
#line 30562 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1274: /* any_operator: all_Op  */
#line 3369 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 30568 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1275: /* any_operator: ColId '.' any_operator  */
#line 3371 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = lcons(makeString((yyvsp[-2].str)), (yyvsp[0].list)); }
#line 30574 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1276: /* c_expr_list: c_expr  */
#line 3376 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 30582 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1277: /* c_expr_list: c_expr_list ',' c_expr  */
#line 3380 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 30590 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1278: /* c_expr_list_opt_comma: c_expr_list  */
#line 3387 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = (yyvsp[0].list);
				}
#line 30598 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1279: /* c_expr_list_opt_comma: c_expr_list ','  */
#line 3392 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = (yyvsp[-1].list);
				}
#line 30606 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1280: /* expr_list: a_expr  */
#line 3398 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 30614 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1281: /* expr_list: expr_list ',' a_expr  */
#line 3402 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 30622 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1282: /* expr_list_opt_comma: expr_list  */
#line 3409 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = (yyvsp[0].list);
				}
#line 30630 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1283: /* expr_list_opt_comma: expr_list ','  */
#line 3414 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = (yyvsp[-1].list);
				}
#line 30638 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1284: /* opt_expr_list_opt_comma: expr_list_opt_comma  */
#line 3421 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = (yyvsp[0].list);
				}
#line 30646 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1285: /* opt_expr_list_opt_comma: %empty  */
#line 3425 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = NULL;
				}
#line 30654 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1286: /* func_arg_list: func_arg_expr  */
#line 3434 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 30662 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1287: /* func_arg_list: func_arg_list ',' func_arg_expr  */
#line 3438 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 30670 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1288: /* func_arg_expr: a_expr  */
#line 3444 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (yyvsp[0].node);
				}
#line 30678 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1289: /* func_arg_expr: param_name COLON_EQUALS a_expr  */
#line 3448 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNamedArgExpr *na = makeNode(PGNamedArgExpr);
					na->name = (yyvsp[-2].str);
					na->arg = (PGExpr *) (yyvsp[0].node);
					na->argnumber = -1;		/* until determined */
					na->location = (yylsp[-2]);
					(yyval.node) = (PGNode *) na;
				}
#line 30691 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1290: /* func_arg_expr: param_name EQUALS_GREATER a_expr  */
#line 3457 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNamedArgExpr *na = makeNode(PGNamedArgExpr);
					na->name = (yyvsp[-2].str);
					na->arg = (PGExpr *) (yyvsp[0].node);
					na->argnumber = -1;		/* until determined */
					na->location = (yylsp[-2]);
					(yyval.node) = (PGNode *) na;
				}
#line 30704 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1291: /* type_list: Typename  */
#line 3467 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].typnam)); }
#line 30710 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1292: /* type_list: type_list ',' Typename  */
#line 3468 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].typnam)); }
#line 30716 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1293: /* extract_list: extract_arg FROM a_expr  */
#line 3473 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make2(makeStringConst((yyvsp[-2].str), (yylsp[-2])), (yyvsp[0].node));
				}
#line 30724 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1294: /* extract_list: %empty  */
#line 3476 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 30730 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1295: /* extract_arg: IDENT  */
#line 3483 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 30736 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1296: /* extract_arg: year_keyword  */
#line 3484 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "year"; }
#line 30742 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1297: /* extract_arg: month_keyword  */
#line 3485 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "month"; }
#line 30748 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1298: /* extract_arg: day_keyword  */
#line 3486 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "day"; }
#line 30754 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1299: /* extract_arg: hour_keyword  */
#line 3487 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "hour"; }
#line 30760 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1300: /* extract_arg: minute_keyword  */
#line 3488 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "minute"; }
#line 30766 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1301: /* extract_arg: second_keyword  */
#line 3489 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "second"; }
#line 30772 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1302: /* extract_arg: millisecond_keyword  */
#line 3490 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.str) = (char*) "millisecond"; }
#line 30778 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1303: /* extract_arg: microsecond_keyword  */
#line 3491 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.str) = (char*) "microsecond"; }
#line 30784 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1304: /* extract_arg: Sconst  */
#line 3492 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 30790 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1305: /* overlay_list: a_expr overlay_placing substr_from substr_for  */
#line 3503 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make4((yyvsp[-3].node), (yyvsp[-2].node), (yyvsp[-1].node), (yyvsp[0].node));
				}
#line 30798 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1306: /* overlay_list: a_expr overlay_placing substr_from  */
#line 3507 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make3((yyvsp[-2].node), (yyvsp[-1].node), (yyvsp[0].node));
				}
#line 30806 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1307: /* overlay_placing: PLACING a_expr  */
#line 3514 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 30812 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1308: /* position_list: b_expr IN_P b_expr  */
#line 3520 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make2((yyvsp[0].node), (yyvsp[-2].node)); }
#line 30818 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1309: /* position_list: %empty  */
#line 3521 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 30824 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1310: /* substr_list: a_expr substr_from substr_for  */
#line 3538 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make3((yyvsp[-2].node), (yyvsp[-1].node), (yyvsp[0].node));
				}
#line 30832 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1311: /* substr_list: a_expr substr_for substr_from  */
#line 3542 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* not legal per SQL99, but might as well allow it */
					(yyval.list) = list_make3((yyvsp[-2].node), (yyvsp[0].node), (yyvsp[-1].node));
				}
#line 30841 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1312: /* substr_list: a_expr substr_from  */
#line 3547 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make2((yyvsp[-1].node), (yyvsp[0].node));
				}
#line 30849 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1313: /* substr_list: a_expr substr_for  */
#line 3551 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/*
					 * Since there are no cases where this syntax allows
					 * a textual FOR value, we forcibly cast the argument
					 * to int4.  The possible matches in pg_proc are
					 * substring(text,int4) and substring(text,text),
					 * and we don't want the parser to choose the latter,
					 * which it is likely to do if the second argument
					 * is unknown or doesn't have an implicit cast to int4.
					 */
					(yyval.list) = list_make3((yyvsp[-1].node), makeIntConst(1, -1),
									makeTypeCast((yyvsp[0].node),
												 SystemTypeName("int4"), 0, -1));
				}
#line 30868 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1314: /* substr_list: expr_list  */
#line 3566 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = (yyvsp[0].list);
				}
#line 30876 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1315: /* substr_list: %empty  */
#line 3570 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = NIL; }
#line 30882 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1316: /* substr_from: FROM a_expr  */
#line 3574 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 30888 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1317: /* substr_for: FOR a_expr  */
#line 3577 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 30894 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1318: /* trim_list: a_expr FROM expr_list_opt_comma  */
#line 3580 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = lappend((yyvsp[0].list), (yyvsp[-2].node)); }
#line 30900 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1319: /* trim_list: FROM expr_list_opt_comma  */
#line 3581 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 30906 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1320: /* trim_list: expr_list_opt_comma  */
#line 3582 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 30912 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1321: /* in_expr: select_with_parens  */
#line 3586 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSubLink *n = makeNode(PGSubLink);
					n->subselect = (yyvsp[0].node);
					/* other fields will be filled later */
					(yyval.node) = (PGNode *)n;
				}
#line 30923 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1322: /* in_expr: '(' expr_list_opt_comma ')'  */
#line 3592 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (PGNode *)(yyvsp[-1].list); }
#line 30929 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1323: /* case_expr: CASE case_arg when_clause_list case_default END_P  */
#line 3603 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGCaseExpr *c = makeNode(PGCaseExpr);
					c->casetype = InvalidOid; /* not analyzed yet */
					c->arg = (PGExpr *) (yyvsp[-3].node);
					c->args = (yyvsp[-2].list);
					c->defresult = (PGExpr *) (yyvsp[-1].node);
					c->location = (yylsp[-4]);
					(yyval.node) = (PGNode *)c;
				}
#line 30943 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1324: /* when_clause_list: when_clause  */
#line 3616 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 30949 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1325: /* when_clause_list: when_clause_list when_clause  */
#line 3617 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 30955 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1326: /* when_clause: WHEN a_expr THEN a_expr  */
#line 3622 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGCaseWhen *w = makeNode(PGCaseWhen);
					w->expr = (PGExpr *) (yyvsp[-2].node);
					w->result = (PGExpr *) (yyvsp[0].node);
					w->location = (yylsp[-3]);
					(yyval.node) = (PGNode *)w;
				}
#line 30967 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1327: /* case_default: ELSE a_expr  */
#line 3632 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 30973 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1328: /* case_default: %empty  */
#line 3633 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 30979 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1329: /* case_arg: a_expr  */
#line 3636 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 30985 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1330: /* case_arg: %empty  */
#line 3637 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 30991 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1331: /* columnref: ColId  */
#line 3641 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeColumnRef((yyvsp[0].str), NIL, (yylsp[0]), yyscanner);
				}
#line 30999 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1332: /* columnref: ColId indirection  */
#line 3645 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeColumnRef((yyvsp[-1].str), (yyvsp[0].list), (yylsp[-1]), yyscanner);
				}
#line 31007 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1333: /* indirection_el: '[' a_expr ']'  */
#line 3652 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAIndices *ai = makeNode(PGAIndices);
					ai->is_slice = false;
					ai->lidx = NULL;
					ai->uidx = (yyvsp[-1].node);
					(yyval.node) = (PGNode *) ai;
				}
#line 31019 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1334: /* indirection_el: '[' opt_slice_bound ':' opt_slice_bound ']'  */
#line 3660 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAIndices *ai = makeNode(PGAIndices);
					ai->is_slice = true;
					ai->lidx = (yyvsp[-3].node);
					ai->uidx = (yyvsp[-1].node);
					(yyval.node) = (PGNode *) ai;
				}
#line 31031 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1335: /* indirection_el: '[' opt_slice_bound ':' opt_slice_bound ':' opt_slice_bound ']'  */
#line 3667 "third_party/libpg_query/grammar/statements/select.y"
                                                                                          {
				    	PGAIndices *ai = makeNode(PGAIndices);
				    	ai->is_slice = true;
				    	ai->lidx = (yyvsp[-5].node);
				    	ai->uidx = (yyvsp[-3].node);
				    	ai->step = (yyvsp[-1].node);
				    	(yyval.node) = (PGNode *) ai;
				}
#line 31044 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1336: /* indirection_el: '[' opt_slice_bound ':' '-' ':' opt_slice_bound ']'  */
#line 3675 "third_party/libpg_query/grammar/statements/select.y"
                                                                              {
					PGAIndices *ai = makeNode(PGAIndices);
					ai->is_slice = true;
					ai->lidx = (yyvsp[-5].node);
					ai->step = (yyvsp[-1].node);
					(yyval.node) = (PGNode *) ai;
				}
#line 31056 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1337: /* opt_slice_bound: a_expr  */
#line 3685 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 31062 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1338: /* opt_slice_bound: %empty  */
#line 3686 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 31068 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1339: /* opt_indirection: %empty  */
#line 3691 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 31074 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1340: /* opt_indirection: opt_indirection indirection_el  */
#line 3692 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 31080 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1341: /* opt_func_arguments: %empty  */
#line 3696 "third_party/libpg_query/grammar/statements/select.y"
                                                { (yyval.list) = NULL; }
#line 31086 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1342: /* opt_func_arguments: '(' ')'  */
#line 3697 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.list) = list_make1(NULL); }
#line 31092 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1343: /* opt_func_arguments: '(' func_arg_list ')'  */
#line 3698 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = (yyvsp[-1].list); }
#line 31098 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1344: /* extended_indirection_el: '.' attr_name opt_func_arguments  */
#line 3703 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].list)) {
						PGFuncCall *n = makeFuncCall(list_make1(makeString((yyvsp[-1].str))), (yyvsp[0].list)->head->data.ptr_value ? (yyvsp[0].list) : NULL, (yylsp[-1]));
						(yyval.node) = (PGNode *) n;
					} else {
						(yyval.node) = (PGNode *) makeString((yyvsp[-1].str));
					}
				}
#line 31111 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1345: /* extended_indirection_el: '[' a_expr ']'  */
#line 3712 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAIndices *ai = makeNode(PGAIndices);
					ai->is_slice = false;
					ai->lidx = NULL;
					ai->uidx = (yyvsp[-1].node);
					(yyval.node) = (PGNode *) ai;
				}
#line 31123 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1346: /* extended_indirection_el: '[' opt_slice_bound ':' opt_slice_bound ']'  */
#line 3720 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAIndices *ai = makeNode(PGAIndices);
					ai->is_slice = true;
					ai->lidx = (yyvsp[-3].node);
					ai->uidx = (yyvsp[-1].node);
					(yyval.node) = (PGNode *) ai;
				}
#line 31135 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1347: /* extended_indirection_el: '[' opt_slice_bound ':' opt_slice_bound ':' opt_slice_bound ']'  */
#line 3727 "third_party/libpg_query/grammar/statements/select.y"
                                                                                          {
					PGAIndices *ai = makeNode(PGAIndices);
					ai->is_slice = true;
					ai->lidx = (yyvsp[-5].node);
					ai->uidx = (yyvsp[-3].node);
					ai->step = (yyvsp[-1].node);
                 			(yyval.node) = (PGNode *) ai;
                		}
#line 31148 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1348: /* extended_indirection_el: '[' opt_slice_bound ':' '-' ':' opt_slice_bound ']'  */
#line 3736 "third_party/libpg_query/grammar/statements/select.y"
                                                                              {
					PGAIndices *ai = makeNode(PGAIndices);
					ai->is_slice = true;
					ai->lidx = (yyvsp[-5].node);
					ai->step = (yyvsp[-1].node);
					(yyval.node) = (PGNode *) ai;
				}
#line 31160 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1349: /* opt_extended_indirection: %empty  */
#line 3751 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                                { (yyval.list) = NIL; }
#line 31166 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1350: /* opt_extended_indirection: opt_extended_indirection extended_indirection_el  */
#line 3752 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 31172 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1353: /* opt_target_list_opt_comma: target_list_opt_comma  */
#line 3768 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 31178 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1354: /* opt_target_list_opt_comma: %empty  */
#line 3769 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = NIL; }
#line 31184 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1355: /* target_list: target_el  */
#line 3773 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].target)); }
#line 31190 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1356: /* target_list: target_list ',' target_el  */
#line 3774 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].target)); }
#line 31196 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1357: /* target_list_opt_comma: target_list  */
#line 3778 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 31202 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1358: /* target_list_opt_comma: target_list ','  */
#line 3779 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 31208 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1359: /* target_el: a_expr AS ColLabelOrString  */
#line 3783 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = (yyvsp[0].str);
					(yyval.target)->indirection = NIL;
					(yyval.target)->val = (PGNode *)(yyvsp[-2].node);
					(yyval.target)->location = (yylsp[-2]);
				}
#line 31220 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1360: /* target_el: a_expr IDENT  */
#line 3799 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = (yyvsp[0].str);
					(yyval.target)->indirection = NIL;
					(yyval.target)->val = (PGNode *)(yyvsp[-1].node);
					(yyval.target)->location = (yylsp[-1]);
				}
#line 31232 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1361: /* target_el: a_expr  */
#line 3807 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = NULL;
					(yyval.target)->indirection = NIL;
					(yyval.target)->val = (PGNode *)(yyvsp[0].node);
					(yyval.target)->location = (yylsp[0]);
				}
#line 31244 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1362: /* except_list: EXCLUDE '(' name_list_opt_comma ')'  */
#line 3816 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 31250 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1363: /* except_list: EXCLUDE ColId  */
#line 3817 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 31256 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1364: /* opt_except_list: except_list  */
#line 3820 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 31262 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1365: /* opt_except_list: %empty  */
#line 3821 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NULL; }
#line 31268 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1366: /* replace_list_el: a_expr AS ColId  */
#line 3824 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = list_make2((yyvsp[-2].node), makeString((yyvsp[0].str))); }
#line 31274 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1367: /* replace_list: replace_list_el  */
#line 3828 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].list)); }
#line 31280 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1368: /* replace_list: replace_list ',' replace_list_el  */
#line 3829 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].list)); }
#line 31286 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1369: /* replace_list_opt_comma: replace_list  */
#line 3833 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 31292 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1370: /* replace_list_opt_comma: replace_list ','  */
#line 3834 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 31298 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1371: /* opt_replace_list: REPLACE '(' replace_list_opt_comma ')'  */
#line 3837 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 31304 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1372: /* opt_replace_list: REPLACE replace_list_el  */
#line 3838 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = list_make1((yyvsp[0].list)); }
#line 31310 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1373: /* opt_replace_list: %empty  */
#line 3839 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NULL; }
#line 31316 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1374: /* qualified_name_list: qualified_name  */
#line 3849 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].range)); }
#line 31322 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1375: /* qualified_name_list: qualified_name_list ',' qualified_name  */
#line 3850 "third_party/libpg_query/grammar/statements/select.y"
                                                                 { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].range)); }
#line 31328 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1376: /* name_list: name  */
#line 3855 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 31334 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1377: /* name_list: name_list ',' name  */
#line 3857 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = lappend((yyvsp[-2].list), makeString((yyvsp[0].str))); }
#line 31340 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1378: /* name_list_opt_comma: name_list  */
#line 3862 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 31346 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1379: /* name_list_opt_comma: name_list ','  */
#line 3863 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 31352 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1380: /* name_list_opt_comma_opt_bracket: name_list_opt_comma  */
#line 3867 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 31358 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1381: /* name_list_opt_comma_opt_bracket: '(' name_list_opt_comma ')'  */
#line 3868 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 31364 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1382: /* name: ColIdOrString  */
#line 3871 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 31370 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1383: /* func_name: function_name_token  */
#line 3883 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 31376 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1384: /* func_name: ColId indirection  */
#line 3886 "third_party/libpg_query/grammar/statements/select.y"
                                        {
						(yyval.list) = check_func_name(lcons(makeString((yyvsp[-1].str)), (yyvsp[0].list)),
											 yyscanner);
					}
#line 31385 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1385: /* AexprConst: Iconst  */
#line 3897 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeIntConst((yyvsp[0].ival), (yylsp[0]));
				}
#line 31393 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1386: /* AexprConst: FCONST  */
#line 3901 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeFloatConst((yyvsp[0].str), (yylsp[0]));
				}
#line 31401 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1387: /* AexprConst: Sconst opt_indirection  */
#line 3905 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].list))
					{
						PGAIndirection *n = makeNode(PGAIndirection);
						n->arg = makeStringConst((yyvsp[-1].str), (yylsp[-1]));
						n->indirection = check_indirection((yyvsp[0].list), yyscanner);
						(yyval.node) = (PGNode *) n;
					}
					else
						(yyval.node) = makeStringConst((yyvsp[-1].str), (yylsp[-1]));
				}
#line 31417 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1388: /* AexprConst: BCONST  */
#line 3917 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeBitStringConst((yyvsp[0].str), (yylsp[0]));
				}
#line 31425 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1389: /* AexprConst: XCONST  */
#line 3921 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* This is a bit constant per SQL99:
					 * Without Feature F511, "BIT data type",
					 * a <general literal> shall not be a
					 * <bit string literal> or a <hex string literal>.
					 */
					(yyval.node) = makeBitStringConst((yyvsp[0].str), (yylsp[0]));
				}
#line 31438 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1390: /* AexprConst: func_name Sconst  */
#line 3930 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* generic type 'literal' syntax */
					PGTypeName *t = makeTypeNameFromNameList((yyvsp[-1].list));
					t->location = (yylsp[-1]);
					(yyval.node) = makeStringConstCast((yyvsp[0].str), (yylsp[0]), t);
				}
#line 31449 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1391: /* AexprConst: func_name '(' func_arg_list opt_sort_clause opt_ignore_nulls ')' Sconst  */
#line 3937 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* generic syntax with a type modifier */
					PGTypeName *t = makeTypeNameFromNameList((yyvsp[-6].list));
					PGListCell *lc;

					/*
					 * We must use func_arg_list and opt_sort_clause in the
					 * production to avoid reduce/reduce conflicts, but we
					 * don't actually wish to allow PGNamedArgExpr in this
					 * context, ORDER BY, nor IGNORE NULLS.
					 */
					foreach(lc, (yyvsp[-4].list))
					{
						PGNamedArgExpr *arg = (PGNamedArgExpr *) lfirst(lc);

						if (IsA(arg, PGNamedArgExpr))
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("type modifier cannot have parameter name"),
									 parser_errposition(arg->location)));
					}
					if ((yyvsp[-3].list) != NIL)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("type modifier cannot have ORDER BY"),
									 parser_errposition((yylsp[-3]))));
					if ((yyvsp[-2].boolean) != false)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("type modifier cannot have IGNORE NULLS"),
									 parser_errposition((yylsp[-2]))));


					t->typmods = (yyvsp[-4].list);
					t->location = (yylsp[-6]);
					(yyval.node) = makeStringConstCast((yyvsp[0].str), (yylsp[0]), t);
				}
#line 31491 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1392: /* AexprConst: ConstTypename Sconst  */
#line 3975 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeStringConstCast((yyvsp[0].str), (yylsp[0]), (yyvsp[-1].typnam));
				}
#line 31499 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1393: /* AexprConst: ConstInterval '(' a_expr ')' opt_interval  */
#line 3979 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeIntervalNode((yyvsp[-2].node), (yylsp[-2]), (yyvsp[0].list));
				}
#line 31507 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1394: /* AexprConst: ConstInterval Iconst opt_interval  */
#line 3983 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeIntervalNode((yyvsp[-1].ival), (yylsp[-1]), (yyvsp[0].list));
				}
#line 31515 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1395: /* AexprConst: ConstInterval Sconst opt_interval  */
#line 3987 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeIntervalNode((yyvsp[-1].str), (yylsp[-1]), (yyvsp[0].list));
				}
#line 31523 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1396: /* AexprConst: TRUE_P  */
#line 3991 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeBoolAConst(true, (yylsp[0]));
				}
#line 31531 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1397: /* AexprConst: FALSE_P  */
#line 3995 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeBoolAConst(false, (yylsp[0]));
				}
#line 31539 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1398: /* AexprConst: NULL_P  */
#line 3999 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeNullAConst((yylsp[0]));
				}
#line 31547 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1399: /* Iconst: ICONST  */
#line 4004 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.ival) = (yyvsp[0].ival); }
#line 31553 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1400: /* type_function_name: IDENT  */
#line 4021 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 31559 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1401: /* type_function_name: unreserved_keyword  */
#line 4022 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 31565 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1402: /* type_function_name: type_func_name_keyword  */
#line 4023 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 31571 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1403: /* type_function_name: pgq_unreserved_keyword  */
#line 4024 "third_party/libpg_query/grammar/statements/select.y"
                                                    { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 31577 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1404: /* function_name_token: IDENT  */
#line 4028 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 31583 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1405: /* function_name_token: unreserved_keyword  */
#line 4029 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 31589 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1406: /* function_name_token: func_name_keyword  */
#line 4030 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 31595 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1407: /* function_name_token: pgq_unreserved_keyword  */
#line 4031 "third_party/libpg_query/grammar/statements/select.y"
                                                    { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 31601 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1408: /* type_name_token: IDENT  */
#line 4035 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 31607 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1409: /* type_name_token: unreserved_keyword  */
#line 4036 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 31613 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1410: /* type_name_token: type_name_keyword  */
#line 4037 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 31619 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1411: /* type_name_token: pgq_unreserved_keyword  */
#line 4038 "third_party/libpg_query/grammar/statements/select.y"
                                                    { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 31625 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1412: /* any_name: ColId  */
#line 4042 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 31631 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1413: /* any_name: ColId attrs  */
#line 4043 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = lcons(makeString((yyvsp[-1].str)), (yyvsp[0].list)); }
#line 31637 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1414: /* attrs: '.' attr_name  */
#line 4047 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 31643 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1415: /* attrs: attrs '.' attr_name  */
#line 4049 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = lappend((yyvsp[-2].list), makeString((yyvsp[0].str))); }
#line 31649 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1416: /* opt_name_list: '(' name_list_opt_comma ')'  */
#line 4053 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 31655 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1417: /* opt_name_list: %empty  */
#line 4054 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 31661 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1419: /* ColLabelOrString: ColLabel  */
#line 4061 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 31667 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1420: /* ColLabelOrString: SCONST  */
#line 4062 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 31673 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1421: /* PrepareStmt: PREPARE name prep_type_clause AS PreparableStmt  */
#line 8 "third_party/libpg_query/grammar/statements/prepare.y"
                                {
					PGPrepareStmt *n = makeNode(PGPrepareStmt);
					n->name = (yyvsp[-3].str);
					n->argtypes = (yyvsp[-2].list);
					n->query = (yyvsp[0].node);
					(yyval.node) = (PGNode *) n;
				}
#line 31685 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1422: /* prep_type_clause: '(' type_list ')'  */
#line 18 "third_party/libpg_query/grammar/statements/prepare.y"
                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 31691 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1423: /* prep_type_clause: %empty  */
#line 19 "third_party/libpg_query/grammar/statements/prepare.y"
                                                                        { (yyval.list) = NIL; }
#line 31697 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1429: /* CreateSchemaStmt: CREATE_P SCHEMA qualified_name OptSchemaEltList  */
#line 8 "third_party/libpg_query/grammar/statements/create_schema.y"
                                {
					PGCreateSchemaStmt *n = makeNode(PGCreateSchemaStmt);
					if ((yyvsp[-1].range)->catalogname) {
						ereport(ERROR,
								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
								 errmsg("CREATE SCHEMA too many dots: expected \"catalog.schema\" or \"schema\""),
								 parser_errposition((yylsp[-1]))));
					}
					if ((yyvsp[-1].range)->schemaname) {
						n->catalogname = (yyvsp[-1].range)->schemaname;
						n->schemaname = (yyvsp[-1].range)->relname;
					} else {
						n->schemaname = (yyvsp[-1].range)->relname;
					}
					n->schemaElts = (yyvsp[0].list);
					n->onconflict = PG_ERROR_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 31720 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1430: /* CreateSchemaStmt: CREATE_P SCHEMA IF_P NOT EXISTS qualified_name OptSchemaEltList  */
#line 27 "third_party/libpg_query/grammar/statements/create_schema.y"
                                {
					PGCreateSchemaStmt *n = makeNode(PGCreateSchemaStmt);
					if ((yyvsp[-1].range)->catalogname) {
						ereport(ERROR,
								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
								 errmsg("CREATE SCHEMA too many dots: expected \"catalog.schema\" or \"schema\""),
								 parser_errposition((yylsp[-1]))));
					}
					if ((yyvsp[-1].range)->schemaname) {
						n->catalogname = (yyvsp[-1].range)->schemaname;
						n->schemaname = (yyvsp[-1].range)->relname;
					} else {
						n->schemaname = (yyvsp[-1].range)->relname;
					}
					if ((yyvsp[0].list) != NIL)
						ereport(ERROR,
								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
								 errmsg("CREATE SCHEMA IF NOT EXISTS cannot include schema elements"),
								 parser_errposition((yylsp[0]))));
					n->schemaElts = (yyvsp[0].list);
					n->onconflict = PG_IGNORE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 31748 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1431: /* CreateSchemaStmt: CREATE_P OR REPLACE SCHEMA qualified_name OptSchemaEltList  */
#line 51 "third_party/libpg_query/grammar/statements/create_schema.y"
                                {
					PGCreateSchemaStmt *n = makeNode(PGCreateSchemaStmt);
					if ((yyvsp[-1].range)->catalogname) {
						ereport(ERROR,
								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
								 errmsg("CREATE SCHEMA too many dots: expected \"catalog.schema\" or \"schema\""),
								 parser_errposition((yylsp[-1]))));
					}
					if ((yyvsp[-1].range)->schemaname) {
						n->catalogname = (yyvsp[-1].range)->schemaname;
						n->schemaname = (yyvsp[-1].range)->relname;
					} else {
						n->schemaname = (yyvsp[-1].range)->relname;
					}
					n->schemaElts = (yyvsp[0].list);
					n->onconflict = PG_REPLACE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 31771 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1432: /* OptSchemaEltList: OptSchemaEltList schema_stmt  */
#line 74 "third_party/libpg_query/grammar/statements/create_schema.y"
                                {
					if ((yyloc) < 0)			/* see comments for YYLLOC_DEFAULT */
						(yyloc) = (yylsp[0]);
					(yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node));
				}
#line 31781 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1433: /* OptSchemaEltList: %empty  */
#line 80 "third_party/libpg_query/grammar/statements/create_schema.y"
                                { (yyval.list) = NIL; }
#line 31787 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1438: /* IndexStmt: CREATE_P opt_unique INDEX opt_concurrently opt_index_name ON qualified_name access_method_clause '(' index_params ')' opt_reloptions where_clause  */
#line 11 "third_party/libpg_query/grammar/statements/index.y"
                                {
					PGIndexStmt *n = makeNode(PGIndexStmt);
					n->unique = (yyvsp[-11].boolean);
					n->concurrent = (yyvsp[-9].boolean);
					n->idxname = (yyvsp[-8].str);
					n->relation = (yyvsp[-6].range);
					n->accessMethod = (yyvsp[-5].str);
					n->indexParams = (yyvsp[-3].list);
					n->options = (yyvsp[-1].list);
					n->whereClause = (yyvsp[0].node);
					n->excludeOpNames = NIL;
					n->idxcomment = NULL;
					n->indexOid = InvalidOid;
					n->oldNode = InvalidOid;
					n->primary = false;
					n->isconstraint = false;
					n->deferrable = false;
					n->initdeferred = false;
					n->transformed = false;
					n->onconflict = PG_ERROR_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 31814 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1439: /* IndexStmt: CREATE_P opt_unique INDEX opt_concurrently IF_P NOT EXISTS index_name ON qualified_name access_method_clause '(' index_params ')' opt_reloptions where_clause  */
#line 36 "third_party/libpg_query/grammar/statements/index.y"
                                {
					PGIndexStmt *n = makeNode(PGIndexStmt);
					n->unique = (yyvsp[-14].boolean);
					n->concurrent = (yyvsp[-12].boolean);
					n->idxname = (yyvsp[-8].str);
					n->relation = (yyvsp[-6].range);
					n->accessMethod = (yyvsp[-5].str);
					n->indexParams = (yyvsp[-3].list);
					n->options = (yyvsp[-1].list);
					n->whereClause = (yyvsp[0].node);
					n->excludeOpNames = NIL;
					n->idxcomment = NULL;
					n->indexOid = InvalidOid;
					n->oldNode = InvalidOid;
					n->primary = false;
					n->isconstraint = false;
					n->deferrable = false;
					n->initdeferred = false;
					n->transformed = false;
					n->onconflict = PG_IGNORE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 31841 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1440: /* access_method: ColId  */
#line 62 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 31847 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1441: /* access_method_clause: USING access_method  */
#line 66 "third_party/libpg_query/grammar/statements/index.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 31853 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1442: /* access_method_clause: %empty  */
#line 67 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.str) = (char*) DEFAULT_INDEX_TYPE; }
#line 31859 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1443: /* opt_concurrently: CONCURRENTLY  */
#line 72 "third_party/libpg_query/grammar/statements/index.y"
                                                                                        { (yyval.boolean) = true; }
#line 31865 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1444: /* opt_concurrently: %empty  */
#line 73 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.boolean) = false; }
#line 31871 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1445: /* opt_index_name: index_name  */
#line 78 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 31877 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1446: /* opt_index_name: %empty  */
#line 79 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.str) = NULL; }
#line 31883 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1447: /* opt_reloptions: WITH reloptions  */
#line 83 "third_party/libpg_query/grammar/statements/index.y"
                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 31889 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1448: /* opt_reloptions: %empty  */
#line 84 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.list) = NIL; }
#line 31895 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1449: /* opt_unique: UNIQUE  */
#line 89 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.boolean) = true; }
#line 31901 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1450: /* opt_unique: %empty  */
#line 90 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.boolean) = false; }
#line 31907 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1451: /* AlterObjectSchemaStmt: ALTER TABLE relation_expr SET SCHEMA name  */
#line 8 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 31920 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1452: /* AlterObjectSchemaStmt: ALTER TABLE IF_P EXISTS relation_expr SET SCHEMA name  */
#line 17 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 31933 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1453: /* AlterObjectSchemaStmt: ALTER SEQUENCE qualified_name SET SCHEMA name  */
#line 26 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_SEQUENCE;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 31946 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1454: /* AlterObjectSchemaStmt: ALTER SEQUENCE IF_P EXISTS qualified_name SET SCHEMA name  */
#line 35 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_SEQUENCE;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 31959 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1455: /* AlterObjectSchemaStmt: ALTER VIEW qualified_name SET SCHEMA name  */
#line 44 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_VIEW;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 31972 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1456: /* AlterObjectSchemaStmt: ALTER VIEW IF_P EXISTS qualified_name SET SCHEMA name  */
#line 53 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_VIEW;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 31985 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1457: /* CheckPointStmt: FORCE CHECKPOINT opt_col_id  */
#line 6 "third_party/libpg_query/grammar/statements/checkpoint.y"
                                {
					PGCheckPointStmt *n = makeNode(PGCheckPointStmt);
					n->force = true;
					n->name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 31996 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1458: /* CheckPointStmt: CHECKPOINT opt_col_id  */
#line 13 "third_party/libpg_query/grammar/statements/checkpoint.y"
                                {
					PGCheckPointStmt *n = makeNode(PGCheckPointStmt);
					n->force = false;
					n->name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 32007 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1459: /* opt_col_id: ColId  */
#line 22 "third_party/libpg_query/grammar/statements/checkpoint.y"
                                                        { (yyval.str) = (yyvsp[0].str); }
#line 32013 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1460: /* opt_col_id: %empty  */
#line 23 "third_party/libpg_query/grammar/statements/checkpoint.y"
                                                { (yyval.str) = NULL; }
#line 32019 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1461: /* ExportStmt: EXPORT_P DATABASE Sconst copy_options  */
#line 8 "third_party/libpg_query/grammar/statements/export.y"
                                {
					PGExportStmt *n = makeNode(PGExportStmt);
					n->database = NULL;
					n->filename = (yyvsp[-1].str);
					n->options = NIL;
					if ((yyvsp[0].list)) {
						n->options = list_concat(n->options, (yyvsp[0].list));
					}
					(yyval.node) = (PGNode *)n;
				}
#line 32034 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1462: /* ExportStmt: EXPORT_P DATABASE ColId TO Sconst copy_options  */
#line 20 "third_party/libpg_query/grammar/statements/export.y"
                                {
					PGExportStmt *n = makeNode(PGExportStmt);
					n->database = (yyvsp[-3].str);
					n->filename = (yyvsp[-1].str);
					n->options = NIL;
					if ((yyvsp[0].list)) {
						n->options = list_concat(n->options, (yyvsp[0].list));
					}
					(yyval.node) = (PGNode *)n;
				}
#line 32049 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1463: /* ImportStmt: IMPORT_P DATABASE Sconst  */
#line 34 "third_party/libpg_query/grammar/statements/export.y"
                                {
					PGImportStmt *n = makeNode(PGImportStmt);
					n->filename = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 32059 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1464: /* ExplainStmt: EXPLAIN ExplainableStmt  */
#line 10 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					PGExplainStmt *n = makeNode(PGExplainStmt);
					n->query = (yyvsp[0].node);
					n->options = NIL;
					(yyval.node) = (PGNode *) n;
				}
#line 32070 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1465: /* ExplainStmt: EXPLAIN analyze_keyword opt_verbose ExplainableStmt  */
#line 17 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					PGExplainStmt *n = makeNode(PGExplainStmt);
					n->query = (yyvsp[0].node);
					n->options = list_make1(makeDefElem("analyze", NULL, (yylsp[-2])));
					if ((yyvsp[-1].boolean))
						n->options = lappend(n->options,
											 makeDefElem("verbose", NULL, (yylsp[-1])));
					(yyval.node) = (PGNode *) n;
				}
#line 32084 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1466: /* ExplainStmt: EXPLAIN VERBOSE ExplainableStmt  */
#line 27 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					PGExplainStmt *n = makeNode(PGExplainStmt);
					n->query = (yyvsp[0].node);
					n->options = list_make1(makeDefElem("verbose", NULL, (yylsp[-1])));
					(yyval.node) = (PGNode *) n;
				}
#line 32095 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1467: /* ExplainStmt: EXPLAIN '(' explain_option_list ')' ExplainableStmt  */
#line 34 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					PGExplainStmt *n = makeNode(PGExplainStmt);
					n->query = (yyvsp[0].node);
					n->options = (yyvsp[-2].list);
					(yyval.node) = (PGNode *) n;
				}
#line 32106 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1468: /* opt_verbose: VERBOSE  */
#line 44 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.boolean) = true; }
#line 32112 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1469: /* opt_verbose: %empty  */
#line 45 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.boolean) = false; }
#line 32118 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1470: /* explain_option_arg: opt_boolean_or_string  */
#line 50 "third_party/libpg_query/grammar/statements/explain.y"
                                                { (yyval.node) = (PGNode *) makeString((yyvsp[0].str)); }
#line 32124 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1471: /* explain_option_arg: NumericOnly  */
#line 51 "third_party/libpg_query/grammar/statements/explain.y"
                                                        { (yyval.node) = (PGNode *) (yyvsp[0].value); }
#line 32130 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1472: /* explain_option_arg: %empty  */
#line 52 "third_party/libpg_query/grammar/statements/explain.y"
                                                        { (yyval.node) = NULL; }
#line 32136 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1503: /* NonReservedWord: IDENT  */
#line 90 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 32142 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1504: /* NonReservedWord: unreserved_keyword  */
#line 91 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 32148 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1505: /* NonReservedWord: other_keyword  */
#line 92 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 32154 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1506: /* NonReservedWord: pgq_unreserved_keyword  */
#line 93 "third_party/libpg_query/grammar/statements/explain.y"
                                                            { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 32160 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1507: /* NonReservedWord_or_Sconst: NonReservedWord  */
#line 98 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 32166 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1508: /* NonReservedWord_or_Sconst: Sconst  */
#line 99 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 32172 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1509: /* explain_option_list: explain_option_elem  */
#line 105 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].defelt));
				}
#line 32180 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1510: /* explain_option_list: explain_option_list ',' explain_option_elem  */
#line 109 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt));
				}
#line 32188 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1511: /* analyze_keyword: ANALYZE  */
#line 116 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                {}
#line 32194 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1512: /* analyze_keyword: ANALYSE  */
#line 117 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                {}
#line 32200 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1513: /* opt_boolean_or_string: TRUE_P  */
#line 122 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.str) = (char*) "true"; }
#line 32206 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1514: /* opt_boolean_or_string: FALSE_P  */
#line 123 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.str) = (char*) "false"; }
#line 32212 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1515: /* opt_boolean_or_string: ON  */
#line 124 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.str) = (char*) "on"; }
#line 32218 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1516: /* opt_boolean_or_string: NonReservedWord_or_Sconst  */
#line 130 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 32224 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1517: /* explain_option_elem: explain_option_name explain_option_arg  */
#line 136 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[-1].str), (yyvsp[0].node), (yylsp[-1]));
				}
#line 32232 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1518: /* explain_option_name: NonReservedWord  */
#line 143 "third_party/libpg_query/grammar/statements/explain.y"
                                                        { (yyval.str) = (yyvsp[0].str); }
#line 32238 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1519: /* explain_option_name: analyze_keyword  */
#line 144 "third_party/libpg_query/grammar/statements/explain.y"
                                                        { (yyval.str) = (char*) "analyze"; }
#line 32244 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1520: /* VariableSetStmt: SET set_rest  */
#line 11 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = (yyvsp[0].vsetstmt);
					n->scope = VAR_SET_SCOPE_DEFAULT;
					(yyval.node) = (PGNode *) n;
				}
#line 32254 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1521: /* VariableSetStmt: SET LOCAL set_rest  */
#line 17 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = (yyvsp[0].vsetstmt);
					n->scope = VAR_SET_SCOPE_LOCAL;
					(yyval.node) = (PGNode *) n;
				}
#line 32264 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1522: /* VariableSetStmt: SET SESSION set_rest  */
#line 23 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = (yyvsp[0].vsetstmt);
					n->scope = VAR_SET_SCOPE_SESSION;
					(yyval.node) = (PGNode *) n;
				}
#line 32274 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1523: /* VariableSetStmt: SET GLOBAL set_rest  */
#line 29 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = (yyvsp[0].vsetstmt);
					n->scope = VAR_SET_SCOPE_GLOBAL;
					(yyval.node) = (PGNode *) n;
				}
#line 32284 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1524: /* set_rest: generic_set  */
#line 38 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                {(yyval.vsetstmt) = (yyvsp[0].vsetstmt);}
#line 32290 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1525: /* set_rest: var_name FROM CURRENT_P  */
#line 40 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_CURRENT;
					n->name = (yyvsp[-2].str);
					(yyval.vsetstmt) = n;
				}
#line 32301 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1526: /* set_rest: TIME ZONE zone_value  */
#line 48 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_VALUE;
					n->name = (char*) "timezone";
					if ((yyvsp[0].node) != NULL)
						n->args = list_make1((yyvsp[0].node));
					else
						n->kind = VAR_SET_DEFAULT;
					(yyval.vsetstmt) = n;
				}
#line 32316 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1527: /* set_rest: SCHEMA Sconst  */
#line 59 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_VALUE;
					n->name = (char*) "search_path";
					n->args = list_make1(makeStringConst((yyvsp[0].str), (yylsp[0])));
					(yyval.vsetstmt) = n;
				}
#line 32328 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1528: /* generic_set: var_name TO var_list  */
#line 71 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_VALUE;
					n->name = (yyvsp[-2].str);
					n->args = (yyvsp[0].list);
					(yyval.vsetstmt) = n;
				}
#line 32340 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1529: /* generic_set: var_name '=' var_list  */
#line 79 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_VALUE;
					n->name = (yyvsp[-2].str);
					n->args = (yyvsp[0].list);
					(yyval.vsetstmt) = n;
				}
#line 32352 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1530: /* generic_set: var_name TO DEFAULT  */
#line 87 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_DEFAULT;
					n->name = (yyvsp[-2].str);
					(yyval.vsetstmt) = n;
				}
#line 32363 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1531: /* generic_set: var_name '=' DEFAULT  */
#line 94 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_DEFAULT;
					n->name = (yyvsp[-2].str);
					(yyval.vsetstmt) = n;
				}
#line 32374 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1532: /* var_value: opt_boolean_or_string  */
#line 104 "third_party/libpg_query/grammar/statements/variable_set.y"
                                { (yyval.node) = makeStringConst((yyvsp[0].str), (yylsp[0])); }
#line 32380 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1533: /* var_value: NumericOnly  */
#line 106 "third_party/libpg_query/grammar/statements/variable_set.y"
                                { (yyval.node) = makeAConst((yyvsp[0].value), (yylsp[0])); }
#line 32386 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1534: /* zone_value: Sconst  */
#line 112 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					(yyval.node) = makeStringConst((yyvsp[0].str), (yylsp[0]));
				}
#line 32394 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1535: /* zone_value: IDENT  */
#line 116 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					(yyval.node) = makeStringConst((yyvsp[0].str), (yylsp[0]));
				}
#line 32402 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1536: /* zone_value: ConstInterval Sconst opt_interval  */
#line 120 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGTypeName *t = (yyvsp[-2].typnam);
					if ((yyvsp[0].list) != NIL)
					{
						PGAConst *n = (PGAConst *) linitial((yyvsp[0].list));
						if ((n->val.val.ival & ~(INTERVAL_MASK(HOUR) | INTERVAL_MASK(MINUTE))) != 0)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("time zone interval must be HOUR or HOUR TO MINUTE"),
									 parser_errposition((yylsp[0]))));
					}
					t->typmods = (yyvsp[0].list);
					(yyval.node) = makeStringConstCast((yyvsp[-1].str), (yylsp[-1]), t);
				}
#line 32421 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1537: /* zone_value: ConstInterval '(' Iconst ')' Sconst  */
#line 135 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGTypeName *t = (yyvsp[-4].typnam);
					t->typmods = list_make2(makeIntConst(INTERVAL_FULL_RANGE, -1),
											makeIntConst((yyvsp[-2].ival), (yylsp[-2])));
					(yyval.node) = makeStringConstCast((yyvsp[0].str), (yylsp[0]), t);
				}
#line 32432 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1538: /* zone_value: NumericOnly  */
#line 141 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                        { (yyval.node) = makeAConst((yyvsp[0].value), (yylsp[0])); }
#line 32438 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1539: /* zone_value: DEFAULT  */
#line 142 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                                { (yyval.node) = NULL; }
#line 32444 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1540: /* zone_value: LOCAL  */
#line 143 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                                { (yyval.node) = NULL; }
#line 32450 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1541: /* var_list: var_value  */
#line 147 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 32456 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1542: /* var_list: var_list ',' var_value  */
#line 148 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 32462 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1543: /* LoadStmt: LOAD file_name  */
#line 8 "third_party/libpg_query/grammar/statements/load.y"
                                {
					PGLoadStmt *n = makeNode(PGLoadStmt);
					n->filename = (yyvsp[0].str);
					n->repository = "";
					n->load_type = PG_LOAD_TYPE_LOAD;
					(yyval.node) = (PGNode *)n;
				}
#line 32474 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1544: /* LoadStmt: INSTALL file_name  */
#line 15 "third_party/libpg_query/grammar/statements/load.y"
                                                  {
                    PGLoadStmt *n = makeNode(PGLoadStmt);
                    n->filename = (yyvsp[0].str);
                    n->repository = "";
                    n->load_type = PG_LOAD_TYPE_INSTALL;
                    (yyval.node) = (PGNode *)n;
				}
#line 32486 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1545: /* LoadStmt: FORCE INSTALL file_name  */
#line 22 "third_party/libpg_query/grammar/statements/load.y"
                                                        {
                      PGLoadStmt *n = makeNode(PGLoadStmt);
                      n->filename = (yyvsp[0].str);
                      n->repository = "";
                      n->load_type = PG_LOAD_TYPE_FORCE_INSTALL;
                      (yyval.node) = (PGNode *)n;
                }
#line 32498 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1546: /* LoadStmt: INSTALL file_name FROM repo_path  */
#line 29 "third_party/libpg_query/grammar/statements/load.y"
                                                {
                      PGLoadStmt *n = makeNode(PGLoadStmt);
                      n->filename = (yyvsp[-2].str);
                      n->repository = (yyvsp[0].str);
                      n->load_type = PG_LOAD_TYPE_INSTALL;
                      (yyval.node) = (PGNode *)n;
                }
#line 32510 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1547: /* LoadStmt: FORCE INSTALL file_name FROM repo_path  */
#line 36 "third_party/libpg_query/grammar/statements/load.y"
                                                       {
                        PGLoadStmt *n = makeNode(PGLoadStmt);
                        n->filename = (yyvsp[-2].str);
                        n->repository = (yyvsp[0].str);
                        n->load_type = PG_LOAD_TYPE_FORCE_INSTALL;
                        (yyval.node) = (PGNode *)n;
                  }
#line 32522 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1548: /* file_name: Sconst  */
#line 45 "third_party/libpg_query/grammar/statements/load.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 32528 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1549: /* file_name: ColId  */
#line 46 "third_party/libpg_query/grammar/statements/load.y"
                                                { (yyval.str) = (yyvsp[0].str); }
#line 32534 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1550: /* repo_path: Sconst  */
#line 48 "third_party/libpg_query/grammar/statements/load.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 32540 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1551: /* repo_path: ColId  */
#line 49 "third_party/libpg_query/grammar/statements/load.y"
                                                { (yyval.str) = (yyvsp[0].str); }
#line 32546 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1552: /* VacuumStmt: VACUUM opt_full opt_freeze opt_verbose  */
#line 9 "third_party/libpg_query/grammar/statements/vacuum.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_VACUUM;
					if ((yyvsp[-2].boolean))
						n->options |= PG_VACOPT_FULL;
					if ((yyvsp[-1].boolean))
						n->options |= PG_VACOPT_FREEZE;
					if ((yyvsp[0].boolean))
						n->options |= PG_VACOPT_VERBOSE;
					n->relation = NULL;
					n->va_cols = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 32564 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1553: /* VacuumStmt: VACUUM opt_full opt_freeze opt_verbose qualified_name opt_name_list  */
#line 23 "third_party/libpg_query/grammar/statements/vacuum.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_VACUUM;
					if ((yyvsp[-4].boolean))
						n->options |= PG_VACOPT_FULL;
					if ((yyvsp[-3].boolean))
						n->options |= PG_VACOPT_FREEZE;
					if ((yyvsp[-2].boolean))
						n->options |= PG_VACOPT_VERBOSE;
					n->relation = (yyvsp[-1].range);
					n->va_cols = (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 32582 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1554: /* VacuumStmt: VACUUM opt_full opt_freeze opt_verbose AnalyzeStmt  */
#line 37 "third_party/libpg_query/grammar/statements/vacuum.y"
                                {
					PGVacuumStmt *n = (PGVacuumStmt *) (yyvsp[0].node);
					n->options |= PG_VACOPT_VACUUM;
					if ((yyvsp[-3].boolean))
						n->options |= PG_VACOPT_FULL;
					if ((yyvsp[-2].boolean))
						n->options |= PG_VACOPT_FREEZE;
					if ((yyvsp[-1].boolean))
						n->options |= PG_VACOPT_VERBOSE;
					(yyval.node) = (PGNode *)n;
				}
#line 32598 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1555: /* VacuumStmt: VACUUM '(' vacuum_option_list ')'  */
#line 49 "third_party/libpg_query/grammar/statements/vacuum.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_VACUUM | (yyvsp[-1].ival);
					n->relation = NULL;
					n->va_cols = NIL;
					(yyval.node) = (PGNode *) n;
				}
#line 32610 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1556: /* VacuumStmt: VACUUM '(' vacuum_option_list ')' qualified_name opt_name_list  */
#line 57 "third_party/libpg_query/grammar/statements/vacuum.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_VACUUM | (yyvsp[-3].ival);
					n->relation = (yyvsp[-1].range);
					n->va_cols = (yyvsp[0].list);
					if (n->va_cols != NIL)	/* implies analyze */
						n->options |= PG_VACOPT_ANALYZE;
					(yyval.node) = (PGNode *) n;
				}
#line 32624 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1557: /* vacuum_option_elem: analyze_keyword  */
#line 70 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                { (yyval.ival) = PG_VACOPT_ANALYZE; }
#line 32630 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1558: /* vacuum_option_elem: VERBOSE  */
#line 71 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                        { (yyval.ival) = PG_VACOPT_VERBOSE; }
#line 32636 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1559: /* vacuum_option_elem: FREEZE  */
#line 72 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                        { (yyval.ival) = PG_VACOPT_FREEZE; }
#line 32642 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1560: /* vacuum_option_elem: FULL  */
#line 73 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                        { (yyval.ival) = PG_VACOPT_FULL; }
#line 32648 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1561: /* vacuum_option_elem: IDENT  */
#line 75 "third_party/libpg_query/grammar/statements/vacuum.y"
                                {
					if (strcmp((yyvsp[0].str), "disable_page_skipping") == 0)
						(yyval.ival) = PG_VACOPT_DISABLE_PAGE_SKIPPING;
					else
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
							 errmsg("unrecognized VACUUM option \"%s\"", (yyvsp[0].str)),
									 parser_errposition((yylsp[0]))));
				}
#line 32662 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1562: /* opt_full: FULL  */
#line 87 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                                                        { (yyval.boolean) = true; }
#line 32668 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1563: /* opt_full: %empty  */
#line 88 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                                                                { (yyval.boolean) = false; }
#line 32674 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1564: /* vacuum_option_list: vacuum_option_elem  */
#line 93 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                                                                        { (yyval.ival) = (yyvsp[0].ival); }
#line 32680 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1565: /* vacuum_option_list: vacuum_option_list ',' vacuum_option_elem  */
#line 94 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                                                { (yyval.ival) = (yyvsp[-2].ival) | (yyvsp[0].ival); }
#line 32686 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1566: /* opt_freeze: FREEZE  */
#line 98 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                                                        { (yyval.boolean) = true; }
#line 32692 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1567: /* opt_freeze: %empty  */
#line 99 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                                                                { (yyval.boolean) = false; }
#line 32698 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1568: /* DeleteStmt: opt_with_clause DELETE_P FROM relation_expr_opt_alias using_clause where_or_current_clause returning_clause  */
#line 9 "third_party/libpg_query/grammar/statements/delete.y"
                                {
					PGDeleteStmt *n = makeNode(PGDeleteStmt);
					n->relation = (yyvsp[-3].range);
					n->usingClause = (yyvsp[-2].list);
					n->whereClause = (yyvsp[-1].node);
					n->returningList = (yyvsp[0].list);
					n->withClause = (yyvsp[-6].with);
					(yyval.node) = (PGNode *)n;
				}
#line 32712 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1569: /* DeleteStmt: TRUNCATE opt_table relation_expr_opt_alias  */
#line 19 "third_party/libpg_query/grammar/statements/delete.y"
                            {
					PGDeleteStmt *n = makeNode(PGDeleteStmt);
					n->relation = (yyvsp[0].range);
					n->usingClause = NULL;
					n->whereClause = NULL;
					n->returningList = NULL;
					n->withClause = NULL;
					(yyval.node) = (PGNode *)n;
			    }
#line 32726 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1570: /* relation_expr_opt_alias: relation_expr  */
#line 32 "third_party/libpg_query/grammar/statements/delete.y"
                                {
					(yyval.range) = (yyvsp[0].range);
				}
#line 32734 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1571: /* relation_expr_opt_alias: relation_expr ColId  */
#line 36 "third_party/libpg_query/grammar/statements/delete.y"
                                {
					PGAlias *alias = makeNode(PGAlias);
					alias->aliasname = (yyvsp[0].str);
					(yyvsp[-1].range)->alias = alias;
					(yyval.range) = (yyvsp[-1].range);
				}
#line 32745 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1572: /* relation_expr_opt_alias: relation_expr AS ColId  */
#line 43 "third_party/libpg_query/grammar/statements/delete.y"
                                {
					PGAlias *alias = makeNode(PGAlias);
					alias->aliasname = (yyvsp[0].str);
					(yyvsp[-2].range)->alias = alias;
					(yyval.range) = (yyvsp[-2].range);
				}
#line 32756 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1573: /* where_or_current_clause: WHERE a_expr  */
#line 53 "third_party/libpg_query/grammar/statements/delete.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 32762 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1574: /* where_or_current_clause: %empty  */
#line 54 "third_party/libpg_query/grammar/statements/delete.y"
                                                                                                { (yyval.node) = NULL; }
#line 32768 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1575: /* using_clause: USING from_list_opt_comma  */
#line 60 "third_party/libpg_query/grammar/statements/delete.y"
                                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 32774 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1576: /* using_clause: %empty  */
#line 61 "third_party/libpg_query/grammar/statements/delete.y"
                                                                                                { (yyval.list) = NIL; }
#line 32780 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1577: /* AnalyzeStmt: analyze_keyword opt_verbose  */
#line 10 "third_party/libpg_query/grammar/statements/analyze.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_ANALYZE;
					if ((yyvsp[0].boolean))
						n->options |= PG_VACOPT_VERBOSE;
					n->relation = NULL;
					n->va_cols = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 32794 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1578: /* AnalyzeStmt: analyze_keyword opt_verbose qualified_name opt_name_list  */
#line 20 "third_party/libpg_query/grammar/statements/analyze.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_ANALYZE;
					if ((yyvsp[-2].boolean))
						n->options |= PG_VACOPT_VERBOSE;
					n->relation = (yyvsp[-1].range);
					n->va_cols = (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 32808 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1579: /* AttachStmt: ATTACH opt_database Sconst opt_database_alias copy_options  */
#line 8 "third_party/libpg_query/grammar/statements/attach.y"
                                {
					PGAttachStmt *n = makeNode(PGAttachStmt);
					n->path = (yyvsp[-2].str);
					n->name = (yyvsp[-1].str);
					n->options = (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 32820 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1580: /* DetachStmt: DETACH opt_database IDENT  */
#line 19 "third_party/libpg_query/grammar/statements/attach.y"
                                {
					PGDetachStmt *n = makeNode(PGDetachStmt);
					n->missing_ok = false;
					n->db_name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 32831 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1581: /* DetachStmt: DETACH DATABASE IF_P EXISTS IDENT  */
#line 26 "third_party/libpg_query/grammar/statements/attach.y"
                                {
					PGDetachStmt *n = makeNode(PGDetachStmt);
					n->missing_ok = true;
					n->db_name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 32842 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1582: /* opt_database: DATABASE  */
#line 34 "third_party/libpg_query/grammar/statements/attach.y"
                                                                                {}
#line 32848 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1583: /* opt_database: %empty  */
#line 35 "third_party/libpg_query/grammar/statements/attach.y"
                                                                                                {}
#line 32854 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1584: /* opt_database_alias: AS ColId  */
#line 39 "third_party/libpg_query/grammar/statements/attach.y"
                                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 32860 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1585: /* opt_database_alias: %empty  */
#line 40 "third_party/libpg_query/grammar/statements/attach.y"
                                                                                                        { (yyval.str) = NULL; }
#line 32866 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1586: /* VariableResetStmt: RESET reset_rest  */
#line 3 "third_party/libpg_query/grammar/statements/variable_reset.y"
                        {
				(yyvsp[0].vsetstmt)->scope = VAR_SET_SCOPE_DEFAULT;
				(yyval.node) = (PGNode *) (yyvsp[0].vsetstmt);
			}
#line 32875 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1587: /* VariableResetStmt: RESET LOCAL reset_rest  */
#line 8 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                {
					(yyvsp[0].vsetstmt)->scope = VAR_SET_SCOPE_LOCAL;
					(yyval.node) = (PGNode *) (yyvsp[0].vsetstmt);
				}
#line 32884 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1588: /* VariableResetStmt: RESET SESSION reset_rest  */
#line 13 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                {
					(yyvsp[0].vsetstmt)->scope = VAR_SET_SCOPE_SESSION;
					(yyval.node) = (PGNode *) (yyvsp[0].vsetstmt);
				}
#line 32893 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1589: /* VariableResetStmt: RESET GLOBAL reset_rest  */
#line 18 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                {
					(yyvsp[0].vsetstmt)->scope = VAR_SET_SCOPE_GLOBAL;
					(yyval.node) = (PGNode *) (yyvsp[0].vsetstmt);
				}
#line 32902 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1590: /* generic_reset: var_name  */
#line 27 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_RESET;
					n->name = (yyvsp[0].str);
					(yyval.vsetstmt) = n;
				}
#line 32913 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1591: /* generic_reset: ALL  */
#line 34 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_RESET_ALL;
					(yyval.vsetstmt) = n;
				}
#line 32923 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1592: /* reset_rest: generic_reset  */
#line 43 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                                                                        { (yyval.vsetstmt) = (yyvsp[0].vsetstmt); }
#line 32929 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1593: /* reset_rest: TIME ZONE  */
#line 45 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_RESET;
					n->name = (char*) "timezone";
					(yyval.vsetstmt) = n;
				}
#line 32940 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1594: /* reset_rest: TRANSACTION ISOLATION LEVEL  */
#line 52 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_RESET;
					n->name = (char*) "transaction_isolation";
					(yyval.vsetstmt) = n;
				}
#line 32951 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1595: /* VariableShowStmt: show_or_describe SelectStmt  */
#line 3 "third_party/libpg_query/grammar/statements/variable_show.y"
                                                    {
				PGVariableShowSelectStmt *n = makeNode(PGVariableShowSelectStmt);
				n->stmt = (yyvsp[0].node);
				n->name = (char*) "select";
				n->is_summary = 0;
				(yyval.node) = (PGNode *) n;
			}
#line 32963 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1596: /* VariableShowStmt: SUMMARIZE SelectStmt  */
#line 10 "third_party/libpg_query/grammar/statements/variable_show.y"
                                        {
				PGVariableShowSelectStmt *n = makeNode(PGVariableShowSelectStmt);
				n->stmt = (yyvsp[0].node);
				n->name = (char*) "select";
				n->is_summary = 1;
				(yyval.node) = (PGNode *) n;
			}
#line 32975 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1597: /* VariableShowStmt: SUMMARIZE table_id  */
#line 18 "third_party/libpg_query/grammar/statements/variable_show.y"
                        {
				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
				n->name = (yyvsp[0].str);
				n->is_summary = 1;
				(yyval.node) = (PGNode *) n;
			}
#line 32986 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1598: /* VariableShowStmt: show_or_describe table_id  */
#line 25 "third_party/libpg_query/grammar/statements/variable_show.y"
                        {
				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
				n->name = (yyvsp[0].str);
				n->is_summary = 0;
				(yyval.node) = (PGNode *) n;
			}
#line 32997 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1599: /* VariableShowStmt: show_or_describe TIME ZONE  */
#line 32 "third_party/libpg_query/grammar/statements/variable_show.y"
                        {
				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
				n->name = (char*) "timezone";
				n->is_summary = 0;
				(yyval.node) = (PGNode *) n;
			}
#line 33008 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1600: /* VariableShowStmt: show_or_describe TRANSACTION ISOLATION LEVEL  */
#line 39 "third_party/libpg_query/grammar/statements/variable_show.y"
                        {
				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
				n->name = (char*) "transaction_isolation";
				n->is_summary = 0;
				(yyval.node) = (PGNode *) n;
			}
#line 33019 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1601: /* VariableShowStmt: show_or_describe ALL opt_tables  */
#line 46 "third_party/libpg_query/grammar/statements/variable_show.y"
                        {
				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
				n->name = (char*) "__show_tables_expanded";
				n->is_summary = 0;
				(yyval.node) = (PGNode *) n;
			}
#line 33030 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1602: /* VariableShowStmt: show_or_describe  */
#line 53 "third_party/libpg_query/grammar/statements/variable_show.y"
                        {
				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
				n->name = (char*) "__show_tables_expanded";
				n->is_summary = 0;
				(yyval.node) = (PGNode *) n;
			}
#line 33041 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1607: /* var_name: ColId  */
#line 65 "third_party/libpg_query/grammar/statements/variable_show.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 33047 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1608: /* var_name: var_name '.' ColId  */
#line 67 "third_party/libpg_query/grammar/statements/variable_show.y"
                                { (yyval.str) = psprintf("%s.%s", (yyvsp[-2].str), (yyvsp[0].str)); }
#line 33053 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1609: /* table_id: ColId  */
#line 70 "third_party/libpg_query/grammar/statements/variable_show.y"
                                                                                { (yyval.str) = psprintf("\"%s\"", (yyvsp[0].str)); }
#line 33059 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1610: /* table_id: table_id '.' ColId  */
#line 72 "third_party/libpg_query/grammar/statements/variable_show.y"
                                { (yyval.str) = psprintf("%s.\"%s\"", (yyvsp[-2].str), (yyvsp[0].str)); }
#line 33065 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1611: /* CallStmt: CALL_P func_application  */
#line 7 "third_party/libpg_query/grammar/statements/call.y"
                                {
					PGCallStmt *n = makeNode(PGCallStmt);
					n->func = (yyvsp[0].node);
					(yyval.node) = (PGNode *) n;
				}
#line 33075 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1612: /* ViewStmt: CREATE_P OptTemp VIEW qualified_name opt_column_list opt_reloptions AS SelectStmt opt_check_option  */
#line 10 "third_party/libpg_query/grammar/statements/view.y"
                                {
					PGViewStmt *n = makeNode(PGViewStmt);
					n->view = (yyvsp[-5].range);
					n->view->relpersistence = (yyvsp[-7].ival);
					n->aliases = (yyvsp[-4].list);
					n->query = (yyvsp[-1].node);
					n->onconflict = PG_ERROR_ON_CONFLICT;
					n->options = (yyvsp[-3].list);
					n->withCheckOption = (yyvsp[0].viewcheckoption);
					(yyval.node) = (PGNode *) n;
				}
#line 33091 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1613: /* ViewStmt: CREATE_P OptTemp VIEW IF_P NOT EXISTS qualified_name opt_column_list opt_reloptions AS SelectStmt opt_check_option  */
#line 23 "third_party/libpg_query/grammar/statements/view.y"
                                {
					PGViewStmt *n = makeNode(PGViewStmt);
					n->view = (yyvsp[-5].range);
					n->view->relpersistence = (yyvsp[-10].ival);
					n->aliases = (yyvsp[-4].list);
					n->query = (yyvsp[-1].node);
					n->onconflict = PG_IGNORE_ON_CONFLICT;
					n->options = (yyvsp[-3].list);
					n->withCheckOption = (yyvsp[0].viewcheckoption);
					(yyval.node) = (PGNode *) n;
				}
#line 33107 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1614: /* ViewStmt: CREATE_P OR REPLACE OptTemp VIEW qualified_name opt_column_list opt_reloptions AS SelectStmt opt_check_option  */
#line 36 "third_party/libpg_query/grammar/statements/view.y"
                                {
					PGViewStmt *n = makeNode(PGViewStmt);
					n->view = (yyvsp[-5].range);
					n->view->relpersistence = (yyvsp[-7].ival);
					n->aliases = (yyvsp[-4].list);
					n->query = (yyvsp[-1].node);
					n->onconflict = PG_REPLACE_ON_CONFLICT;
					n->options = (yyvsp[-3].list);
					n->withCheckOption = (yyvsp[0].viewcheckoption);
					(yyval.node) = (PGNode *) n;
				}
#line 33123 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1615: /* ViewStmt: CREATE_P OptTemp RECURSIVE VIEW qualified_name '(' columnList ')' opt_reloptions AS SelectStmt opt_check_option  */
#line 49 "third_party/libpg_query/grammar/statements/view.y"
                                {
					PGViewStmt *n = makeNode(PGViewStmt);
					n->view = (yyvsp[-7].range);
					n->view->relpersistence = (yyvsp[-10].ival);
					n->aliases = (yyvsp[-5].list);
					n->query = makeRecursiveViewSelect(n->view->relname, n->aliases, (yyvsp[-1].node));
					n->onconflict = PG_ERROR_ON_CONFLICT;
					n->options = (yyvsp[-3].list);
					n->withCheckOption = (yyvsp[0].viewcheckoption);
					if (n->withCheckOption != PG_NO_CHECK_OPTION)
						ereport(ERROR,
								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
								 errmsg("WITH CHECK OPTION not supported on recursive views"),
								 parser_errposition((yylsp[0]))));
					(yyval.node) = (PGNode *) n;
				}
#line 33144 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1616: /* ViewStmt: CREATE_P OR REPLACE OptTemp RECURSIVE VIEW qualified_name '(' columnList ')' opt_reloptions AS SelectStmt opt_check_option  */
#line 67 "third_party/libpg_query/grammar/statements/view.y"
                                {
					PGViewStmt *n = makeNode(PGViewStmt);
					n->view = (yyvsp[-7].range);
					n->view->relpersistence = (yyvsp[-10].ival);
					n->aliases = (yyvsp[-5].list);
					n->query = makeRecursiveViewSelect(n->view->relname, n->aliases, (yyvsp[-1].node));
					n->onconflict = PG_REPLACE_ON_CONFLICT;
					n->options = (yyvsp[-3].list);
					n->withCheckOption = (yyvsp[0].viewcheckoption);
					if (n->withCheckOption != PG_NO_CHECK_OPTION)
						ereport(ERROR,
								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
								 errmsg("WITH CHECK OPTION not supported on recursive views"),
								 parser_errposition((yylsp[0]))));
					(yyval.node) = (PGNode *) n;
				}
#line 33165 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1617: /* opt_check_option: WITH CHECK_P OPTION  */
#line 87 "third_party/libpg_query/grammar/statements/view.y"
                                                                { (yyval.viewcheckoption) = CASCADED_CHECK_OPTION; }
#line 33171 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1618: /* opt_check_option: WITH CASCADED CHECK_P OPTION  */
#line 88 "third_party/libpg_query/grammar/statements/view.y"
                                                { (yyval.viewcheckoption) = CASCADED_CHECK_OPTION; }
#line 33177 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1619: /* opt_check_option: WITH LOCAL CHECK_P OPTION  */
#line 89 "third_party/libpg_query/grammar/statements/view.y"
                                                        { (yyval.viewcheckoption) = PG_LOCAL_CHECK_OPTION; }
#line 33183 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1620: /* opt_check_option: %empty  */
#line 90 "third_party/libpg_query/grammar/statements/view.y"
                                                                { (yyval.viewcheckoption) = PG_NO_CHECK_OPTION; }
#line 33189 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1621: /* CreateAsStmt: CREATE_P OptTemp TABLE create_as_target AS SelectStmt opt_with_data  */
#line 12 "third_party/libpg_query/grammar/statements/create_as.y"
                                {
					PGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);
					ctas->query = (yyvsp[-1].node);
					ctas->into = (yyvsp[-3].into);
					ctas->relkind = PG_OBJECT_TABLE;
					ctas->is_select_into = false;
					ctas->onconflict = PG_ERROR_ON_CONFLICT;
					/* cram additional flags into the PGIntoClause */
					(yyvsp[-3].into)->rel->relpersistence = (yyvsp[-5].ival);
					(yyvsp[-3].into)->skipData = !((yyvsp[0].boolean));
					(yyval.node) = (PGNode *) ctas;
				}
#line 33206 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1622: /* CreateAsStmt: CREATE_P OptTemp TABLE IF_P NOT EXISTS create_as_target AS SelectStmt opt_with_data  */
#line 25 "third_party/libpg_query/grammar/statements/create_as.y"
                                {
					PGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);
					ctas->query = (yyvsp[-1].node);
					ctas->into = (yyvsp[-3].into);
					ctas->relkind = PG_OBJECT_TABLE;
					ctas->is_select_into = false;
					ctas->onconflict = PG_IGNORE_ON_CONFLICT;
					/* cram additional flags into the PGIntoClause */
					(yyvsp[-3].into)->rel->relpersistence = (yyvsp[-8].ival);
					(yyvsp[-3].into)->skipData = !((yyvsp[0].boolean));
					(yyval.node) = (PGNode *) ctas;
				}
#line 33223 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1623: /* CreateAsStmt: CREATE_P OR REPLACE OptTemp TABLE create_as_target AS SelectStmt opt_with_data  */
#line 38 "third_party/libpg_query/grammar/statements/create_as.y"
                                {
					PGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);
					ctas->query = (yyvsp[-1].node);
					ctas->into = (yyvsp[-3].into);
					ctas->relkind = PG_OBJECT_TABLE;
					ctas->is_select_into = false;
					ctas->onconflict = PG_REPLACE_ON_CONFLICT;
					/* cram additional flags into the PGIntoClause */
					(yyvsp[-3].into)->rel->relpersistence = (yyvsp[-5].ival);
					(yyvsp[-3].into)->skipData = !((yyvsp[0].boolean));
					(yyval.node) = (PGNode *) ctas;
				}
#line 33240 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1624: /* opt_with_data: WITH DATA_P  */
#line 54 "third_party/libpg_query/grammar/statements/create_as.y"
                                                                                                { (yyval.boolean) = true; }
#line 33246 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1625: /* opt_with_data: WITH NO DATA_P  */
#line 55 "third_party/libpg_query/grammar/statements/create_as.y"
                                                                                        { (yyval.boolean) = false; }
#line 33252 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1626: /* opt_with_data: %empty  */
#line 56 "third_party/libpg_query/grammar/statements/create_as.y"
                                                                                                { (yyval.boolean) = true; }
#line 33258 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1627: /* create_as_target: qualified_name opt_column_list OptWith OnCommitOption  */
#line 62 "third_party/libpg_query/grammar/statements/create_as.y"
                                {
					(yyval.into) = makeNode(PGIntoClause);
					(yyval.into)->rel = (yyvsp[-3].range);
					(yyval.into)->colNames = (yyvsp[-2].list);
					(yyval.into)->options = (yyvsp[-1].list);
					(yyval.into)->onCommit = (yyvsp[0].oncommit);
					(yyval.into)->viewQuery = NULL;
					(yyval.into)->skipData = false;		/* might get changed later */
				}
#line 33272 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;


#line 33276 "third_party/libpg_query/grammar/grammar_out.cpp"

      default: break;
    }
  /* User semantic actions sometimes alter yychar, and that requires
     that yytoken be updated with the new translation.  We take the
     approach of translating immediately before every use of yytoken.
     One alternative is translating here after every semantic action,
     but that translation would be missed if the semantic action invokes
     YYABORT, YYACCEPT, or YYERROR immediately after altering yychar or
     if it invokes YYBACKUP.  In the case of YYABORT or YYACCEPT, an
     incorrect destructor might then be invoked immediately.  In the
     case of YYERROR or YYBACKUP, subsequent parser actions might lead
     to an incorrect destructor call or verbose syntax error message
     before the lookahead is translated.  */
  YY_SYMBOL_PRINT ("-> $$ =", YY_CAST (yysymbol_kind_t, yyr1[yyn]), &yyval, &yyloc);

  YYPOPSTACK (yylen);
  yylen = 0;

  *++yyvsp = yyval;
  *++yylsp = yyloc;

  /* Now 'shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */
  {
    const int yylhs = yyr1[yyn] - YYNTOKENS;
    const int yyi = yypgoto[yylhs] + *yyssp;
    yystate = (0 <= yyi && yyi <= YYLAST && yycheck[yyi] == *yyssp
               ? yytable[yyi]
               : yydefgoto[yylhs]);
  }

  goto yynewstate;


/*--------------------------------------.
| yyerrlab -- here on detecting error.  |
`--------------------------------------*/
yyerrlab:
  /* Make sure we have latest lookahead translation.  See comments at
     user semantic actions for why this is necessary.  */
  yytoken = yychar == YYEMPTY ? YYSYMBOL_YYEMPTY : YYTRANSLATE (yychar);
  /* If not already recovering from an error, report this error.  */
  if (!yyerrstatus)
    {
      ++yynerrs;
      yyerror (&yylloc, yyscanner, YY_("syntax error"));
    }

  yyerror_range[1] = yylloc;
  if (yyerrstatus == 3)
    {
      /* If just tried and failed to reuse lookahead token after an
         error, discard it.  */

      if (yychar <= YYEOF)
        {
          /* Return failure if at end of input.  */
          if (yychar == YYEOF)
            YYABORT;
        }
      else
        {
          yydestruct ("Error: discarding",
                      yytoken, &yylval, &yylloc, yyscanner);
          yychar = YYEMPTY;
        }
    }

  /* Else will try to reuse lookahead token after shifting the error
     token.  */
  goto yyerrlab1;


/*---------------------------------------------------.
| yyerrorlab -- error raised explicitly by YYERROR.  |
`---------------------------------------------------*/
yyerrorlab:
  /* Pacify compilers when the user code never invokes YYERROR and the
     label yyerrorlab therefore never appears in user code.  */
  if (0)
    YYERROR;
  ++yynerrs;

  /* Do not reclaim the symbols of the rule whose action triggered
     this YYERROR.  */
  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);
  yystate = *yyssp;
  goto yyerrlab1;


/*-------------------------------------------------------------.
| yyerrlab1 -- common code for both syntax error and YYERROR.  |
`-------------------------------------------------------------*/
yyerrlab1:
  yyerrstatus = 3;      /* Each real token shifted decrements this.  */

  /* Pop stack until we find a state that shifts the error token.  */
  for (;;)
    {
      yyn = yypact[yystate];
      if (!yypact_value_is_default (yyn))
        {
          yyn += YYSYMBOL_YYerror;
          if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYSYMBOL_YYerror)
            {
              yyn = yytable[yyn];
              if (0 < yyn)
                break;
            }
        }

      /* Pop the current state because it cannot handle the error token.  */
      if (yyssp == yyss)
        YYABORT;

      yyerror_range[1] = *yylsp;
      yydestruct ("Error: popping",
                  YY_ACCESSING_SYMBOL (yystate), yyvsp, yylsp, yyscanner);
      YYPOPSTACK (1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
    }

  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  *++yyvsp = yylval;
  YY_IGNORE_MAYBE_UNINITIALIZED_END

  yyerror_range[2] = yylloc;
  ++yylsp;
  YYLLOC_DEFAULT (*yylsp, yyerror_range, 2);

  /* Shift the error token.  */
  YY_SYMBOL_PRINT ("Shifting", YY_ACCESSING_SYMBOL (yyn), yyvsp, yylsp);

  yystate = yyn;
  goto yynewstate;


/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/
yyacceptlab:
  yyresult = 0;
  goto yyreturnlab;


/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/
yyabortlab:
  yyresult = 1;
  goto yyreturnlab;


/*-----------------------------------------------------------.
| yyexhaustedlab -- YYNOMEM (memory exhaustion) comes here.  |
`-----------------------------------------------------------*/
yyexhaustedlab:
  yyerror (&yylloc, yyscanner, YY_("memory exhausted"));
  yyresult = 2;
  goto yyreturnlab;


/*----------------------------------------------------------.
| yyreturnlab -- parsing is finished, clean up and return.  |
`----------------------------------------------------------*/
yyreturnlab:
  if (yychar != YYEMPTY)
    {
      /* Make sure we have latest lookahead translation.  See comments at
         user semantic actions for why this is necessary.  */
      yytoken = YYTRANSLATE (yychar);
      yydestruct ("Cleanup: discarding lookahead",
                  yytoken, &yylval, &yylloc, yyscanner);
    }
  /* Do not reclaim the symbols of the rule whose action triggered
     this YYABORT or YYACCEPT.  */
  YYPOPSTACK (yylen);
  YY_STACK_PRINT (yyss, yyssp);
  while (yyssp != yyss)
    {
      yydestruct ("Cleanup: popping",
                  YY_ACCESSING_SYMBOL (+*yyssp), yyvsp, yylsp, yyscanner);
      YYPOPSTACK (1);
    }
#ifndef yyoverflow
  if (yyss != yyssa)
    YYSTACK_FREE (yyss);
#endif

  return yyresult;
}

#line 85 "third_party/libpg_query/grammar/statements/create_as.y"


#line 1 "third_party/libpg_query/grammar/grammar.cpp"
/*
 * The signature of this function is required by bison.  However, we
 * ignore the passed yylloc and instead use the last token position
 * available from the scanner.
 */
static void
base_yyerror(YYLTYPE *yylloc, core_yyscan_t yyscanner, const char *msg)
{
	parser_yyerror(msg);
}

static PGRawStmt *
makeRawStmt(PGNode *stmt, int stmt_location)
{
	PGRawStmt    *rs = makeNode(PGRawStmt);

	rs->stmt = stmt;
	rs->stmt_location = stmt_location;
	rs->stmt_len = 0;			/* might get changed later */
	return rs;
}

/* Adjust a PGRawStmt to reflect that it doesn't run to the end of the string */
static void
updateRawStmtEnd(PGRawStmt *rs, int end_location)
{
	/*
	 * If we already set the length, don't change it.  This is for situations
	 * like "select foo ;; select bar" where the same statement will be last
	 * in the string for more than one semicolon.
	 */
	if (rs->stmt_len > 0)
		return;

	/* OK, update length of PGRawStmt */
	rs->stmt_len = end_location - rs->stmt_location;
}

static PGNode *
makeColumnRef(char *colname, PGList *indirection,
			  int location, core_yyscan_t yyscanner)
{
	/*
	 * Generate a PGColumnRef node, with an PGAIndirection node added if there
	 * is any subscripting in the specified indirection list.  However,
	 * any field selection at the start of the indirection list must be
	 * transposed into the "fields" part of the PGColumnRef node.
	 */
	PGColumnRef  *c = makeNode(PGColumnRef);
	int		nfields = 0;
	PGListCell *l;

	c->location = location;
	foreach(l, indirection)
	{
		if (IsA(lfirst(l), PGAIndices))
		{
			PGAIndirection *i = makeNode(PGAIndirection);

			if (nfields == 0)
			{
				/* easy case - all indirection goes to PGAIndirection */
				c->fields = list_make1(makeString(colname));
				i->indirection = check_indirection(indirection, yyscanner);
			}
			else
			{
				/* got to split the list in two */
				i->indirection = check_indirection(list_copy_tail(indirection,
																  nfields),
												   yyscanner);
				indirection = list_truncate(indirection, nfields);
				c->fields = lcons(makeString(colname), indirection);
			}
			i->arg = (PGNode *) c;
			return (PGNode *) i;
		}
		else if (IsA(lfirst(l), PGAStar))
		{
			/* We only allow '*' at the end of a PGColumnRef */
			if (lnext(l) != NULL)
				parser_yyerror("improper use of \"*\"");
		}
		nfields++;
	}
	/* No subscripting, so all indirection gets added to field list */
	c->fields = lcons(makeString(colname), indirection);
	return (PGNode *) c;
}

static PGNode *
makeTypeCast(PGNode *arg, PGTypeName *tpname, int trycast, int location)
{
	PGTypeCast *n = makeNode(PGTypeCast);
	n->arg = arg;
	n->typeName = tpname;
	n->tryCast = trycast;
	n->location = location;
	return (PGNode *) n;
}

static PGNode *
makeStringConst(char *str, int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGString;
	n->val.val.str = str;
	n->location = location;

	return (PGNode *)n;
}

static PGNode *
makeStringConstCast(char *str, int location, PGTypeName *tpname)
{
	PGNode *s = makeStringConst(str, location);

	return makeTypeCast(s, tpname, 0, -1);
}

static PGNode *
makeIntervalNode(char *str, int location, PGList *typmods) {
	PGIntervalConstant *n = makeNode(PGIntervalConstant);

	n->val_type = T_PGString;
	n->sval = str;
	n->location = location;
	n->typmods = typmods;

	return (PGNode *)n;

}

static PGNode *
makeIntervalNode(int val, int location, PGList *typmods) {
	PGIntervalConstant *n = makeNode(PGIntervalConstant);

	n->val_type = T_PGInteger;
	n->ival = val;
	n->location = location;
	n->typmods = typmods;

	return (PGNode *)n;
}

static PGNode *
makeIntervalNode(PGNode *arg, int location, PGList *typmods) {
	PGIntervalConstant *n = makeNode(PGIntervalConstant);

	n->val_type = T_PGAExpr;
	n->eval = arg;
	n->location = location;
	n->typmods = typmods;

	return (PGNode *)n;
}

static PGNode *
makeSampleSize(PGValue *sample_size, bool is_percentage) {
	PGSampleSize *n = makeNode(PGSampleSize);

	n->sample_size = *sample_size;
	n->is_percentage = is_percentage;

	return (PGNode *)n;
}

static PGNode *
makeSampleOptions(PGNode *sample_size, char *method, int *seed, int location) {
	PGSampleOptions *n = makeNode(PGSampleOptions);

	n->sample_size = sample_size;
	n->method = method;
	if (seed) {
		n->has_seed = true;
		n->seed = *seed;
	}
	n->location = location;

	return (PGNode *)n;
}

/* makeLimitPercent()
 * Make limit percent node
 */
static PGNode *
makeLimitPercent(PGNode *limit_percent) {
	PGLimitPercent *n = makeNode(PGLimitPercent);

	n->limit_percent = limit_percent;

	return (PGNode *)n;
}

static PGNode *
makeIntConst(int val, int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGInteger;
	n->val.val.ival = val;
	n->location = location;

	return (PGNode *)n;
}

static PGNode *
makeFloatConst(char *str, int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGFloat;
	n->val.val.str = str;
	n->location = location;

	return (PGNode *)n;
}

static PGNode *
makeBitStringConst(char *str, int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGBitString;
	n->val.val.str = str;
	n->location = location;

	return (PGNode *)n;
}

static PGNode *
makeNullAConst(int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGNull;
	n->location = location;

	return (PGNode *)n;
}

static PGNode *
makeAConst(PGValue *v, int location)
{
	PGNode *n;

	switch (v->type)
	{
		case T_PGFloat:
			n = makeFloatConst(v->val.str, location);
			break;

		case T_PGInteger:
			n = makeIntConst(v->val.ival, location);
			break;

		case T_PGString:
		default:
			n = makeStringConst(v->val.str, location);
			break;
	}

	return n;
}

/* makeBoolAConst()
 * Create an PGAConst string node and put it inside a boolean cast.
 */
static PGNode *
makeBoolAConst(bool state, int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGString;
	n->val.val.str = (state ? (char*) "t" : (char*) "f");
	n->location = location;

	return makeTypeCast((PGNode *)n, SystemTypeName("bool"), 0, -1);
}

/* check_qualified_name --- check the result of qualified_name production
 *
 * It's easiest to let the grammar production for qualified_name allow
 * subscripts and '*', which we then must reject here.
 */
static void
check_qualified_name(PGList *names, core_yyscan_t yyscanner)
{
	PGListCell   *i;

	foreach(i, names)
	{
		if (!IsA(lfirst(i), PGString))
			parser_yyerror("syntax error");
	}
}

/* check_func_name --- check the result of func_name production
 *
 * It's easiest to let the grammar production for func_name allow subscripts
 * and '*', which we then must reject here.
 */
static PGList *
check_func_name(PGList *names, core_yyscan_t yyscanner)
{
	PGListCell   *i;

	foreach(i, names)
	{
		if (!IsA(lfirst(i), PGString))
			parser_yyerror("syntax error");
	}
	return names;
}

/* check_indirection --- check the result of indirection production
 *
 * We only allow '*' at the end of the list, but it's hard to enforce that
 * in the grammar, so do it here.
 */
static PGList *
check_indirection(PGList *indirection, core_yyscan_t yyscanner)
{
	PGListCell *l;

	foreach(l, indirection)
	{
		if (IsA(lfirst(l), PGAStar))
		{
			if (lnext(l) != NULL)
				parser_yyerror("improper use of \"*\"");
		}
	}
	return indirection;
}

/* makeParamRef
 * Creates a new PGParamRef node
 */
static PGNode* makeParamRef(int number, int location)
{
	PGParamRef *p = makeNode(PGParamRef);
	p->number = number;
	p->location = location;
	p->name = NULL;
	return (PGNode *) p;
}

/* makeNamedParamRef
 * Creates a new PGParamRef node
 */
static PGNode* makeNamedParamRef(char *name, int location)
{
	PGParamRef *p = (PGParamRef *)makeParamRef(0, location);
	p->name = name;
	return (PGNode *) p;
}


/* insertSelectOptions()
 * Insert ORDER BY, etc into an already-constructed SelectStmt.
 *
 * This routine is just to avoid duplicating code in PGSelectStmt productions.
 */
static void
insertSelectOptions(PGSelectStmt *stmt,
					PGList *sortClause, PGList *lockingClause,
					PGNode *limitOffset, PGNode *limitCount,
					PGWithClause *withClause,
					core_yyscan_t yyscanner)
{
	Assert(IsA(stmt, PGSelectStmt));

	/*
	 * Tests here are to reject constructs like
	 *	(SELECT foo ORDER BY bar) ORDER BY baz
	 */
	if (sortClause)
	{
		if (stmt->sortClause)
			ereport(ERROR,
					(errcode(PG_ERRCODE_SYNTAX_ERROR),
					 errmsg("multiple ORDER BY clauses not allowed"),
					 parser_errposition(exprLocation((PGNode *) sortClause))));
		stmt->sortClause = sortClause;
	}
	/* We can handle multiple locking clauses, though */
	stmt->lockingClause = list_concat(stmt->lockingClause, lockingClause);
	if (limitOffset)
	{
		if (stmt->limitOffset)
			ereport(ERROR,
					(errcode(PG_ERRCODE_SYNTAX_ERROR),
					 errmsg("multiple OFFSET clauses not allowed"),
					 parser_errposition(exprLocation(limitOffset))));
		stmt->limitOffset = limitOffset;
	}
	if (limitCount)
	{
		if (stmt->limitCount)
			ereport(ERROR,
					(errcode(PG_ERRCODE_SYNTAX_ERROR),
					 errmsg("multiple LIMIT clauses not allowed"),
					 parser_errposition(exprLocation(limitCount))));
		stmt->limitCount = limitCount;
	}
	if (withClause)
	{
		if (stmt->withClause)
			ereport(ERROR,
					(errcode(PG_ERRCODE_SYNTAX_ERROR),
					 errmsg("multiple WITH clauses not allowed"),
					 parser_errposition(exprLocation((PGNode *) withClause))));
		stmt->withClause = withClause;
	}
}

static PGNode *
makeSetOp(PGSetOperation op, bool all, PGNode *larg, PGNode *rarg)
{
	PGSelectStmt *n = makeNode(PGSelectStmt);

	n->op = op;
	n->all = all;
	n->larg = (PGSelectStmt *) larg;
	n->rarg = (PGSelectStmt *) rarg;
	return (PGNode *) n;
}

/* SystemFuncName()
 * Build a properly-qualified reference to a built-in function.
 */
PGList *
SystemFuncName(const char *name)
{
	return list_make2(makeString(DEFAULT_SCHEMA), makeString(name));
}

/* SystemTypeName()
 * Build a properly-qualified reference to a built-in type.
 *
 * typmod is defaulted, but may be changed afterwards by caller.
 * Likewise for the location.
 */
PGTypeName *
SystemTypeName(const char *name)
{
	return makeTypeNameFromNameList(list_make2(makeString(DEFAULT_SCHEMA),
											   makeString(name)));
}

/* doNegate()
 * Handle negation of a numeric constant.
 *
 * Formerly, we did this here because the optimizer couldn't cope with
 * indexquals that looked like "var = -4" --- it wants "var = const"
 * and a unary minus operator applied to a constant didn't qualify.
 * As of Postgres 7.0, that problem doesn't exist anymore because there
 * is a constant-subexpression simplifier in the optimizer.  However,
 * there's still a good reason for doing this here, which is that we can
 * postpone committing to a particular internal representation for simple
 * negative constants.	It's better to leave "-123.456" in string form
 * until we know what the desired type is.
 */
static PGNode *
doNegate(PGNode *n, int location)
{
	if (IsA(n, PGAConst))
	{
		PGAConst *con = (PGAConst *)n;

		/* report the constant's location as that of the '-' sign */
		con->location = location;

		if (con->val.type == T_PGInteger)
		{
			con->val.val.ival = -con->val.val.ival;
			return n;
		}
		if (con->val.type == T_PGFloat)
		{
			doNegateFloat(&con->val);
			return n;
		}
	}

	return (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "-", NULL, n, location);
}

static void
doNegateFloat(PGValue *v)
{
	char   *oldval = v->val.str;

	Assert(IsA(v, PGFloat));
	if (*oldval == '+')
		oldval++;
	if (*oldval == '-')
		v->val.str = oldval+1;	/* just strip the '-' */
	else
		v->val.str = psprintf("-%s", oldval);
}

static PGNode *
makeAndExpr(PGNode *lexpr, PGNode *rexpr, int location)
{
	PGNode	   *lexp = lexpr;

	/* Look through AEXPR_PAREN nodes so they don't affect flattening */
	while (IsA(lexp, PGAExpr) &&
		   ((PGAExpr *) lexp)->kind == AEXPR_PAREN)
		lexp = ((PGAExpr *) lexp)->lexpr;
	/* Flatten "a AND b AND c ..." to a single PGBoolExpr on sight */
	if (IsA(lexp, PGBoolExpr))
	{
		PGBoolExpr *blexpr = (PGBoolExpr *) lexp;

		if (blexpr->boolop == PG_AND_EXPR)
		{
			blexpr->args = lappend(blexpr->args, rexpr);
			return (PGNode *) blexpr;
		}
	}
	return (PGNode *) makeBoolExpr(PG_AND_EXPR, list_make2(lexpr, rexpr), location);
}

static PGNode *
makeOrExpr(PGNode *lexpr, PGNode *rexpr, int location)
{
	PGNode	   *lexp = lexpr;

	/* Look through AEXPR_PAREN nodes so they don't affect flattening */
	while (IsA(lexp, PGAExpr) &&
		   ((PGAExpr *) lexp)->kind == AEXPR_PAREN)
		lexp = ((PGAExpr *) lexp)->lexpr;
	/* Flatten "a OR b OR c ..." to a single PGBoolExpr on sight */
	if (IsA(lexp, PGBoolExpr))
	{
		PGBoolExpr *blexpr = (PGBoolExpr *) lexp;

		if (blexpr->boolop == PG_OR_EXPR)
		{
			blexpr->args = lappend(blexpr->args, rexpr);
			return (PGNode *) blexpr;
		}
	}
	return (PGNode *) makeBoolExpr(PG_OR_EXPR, list_make2(lexpr, rexpr), location);
}

static PGNode *
makeNotExpr(PGNode *expr, int location)
{
	return (PGNode *) makeBoolExpr(PG_NOT_EXPR, list_make1(expr), location);
}

/* Separate PGConstraint nodes from COLLATE clauses in a */
static void
SplitColQualList(PGList *qualList,
				 PGList **constraintList, PGCollateClause **collClause,
				 core_yyscan_t yyscanner)
{
	PGListCell   *cell;
	PGListCell   *prev;
	PGListCell   *next;

	*collClause = NULL;
	prev = NULL;
	for (cell = list_head(qualList); cell; cell = next)
	{
		PGNode   *n = (PGNode *) lfirst(cell);

		next = lnext(cell);
		if (IsA(n, PGConstraint))
		{
			/* keep it in list */
			prev = cell;
			continue;
		}
		if (IsA(n, PGCollateClause))
		{
			PGCollateClause *c = (PGCollateClause *) n;

			if (*collClause)
				ereport(ERROR,
						(errcode(PG_ERRCODE_SYNTAX_ERROR),
						 errmsg("multiple COLLATE clauses not allowed"),
						 parser_errposition(c->location)));
			*collClause = c;
		}
		else
			elog(ERROR, "unexpected node type %d", (int) n->type);
		/* remove non-Constraint nodes from qualList */
		qualList = list_delete_cell(qualList, cell, prev);
	}
	*constraintList = qualList;
}

/*
 * Process result of ConstraintAttributeSpec, and set appropriate bool flags
 * in the output command node.  Pass NULL for any flags the particular
 * command doesn't support.
 */
static void
processCASbits(int cas_bits, int location, const char *constrType,
			   bool *deferrable, bool *initdeferred, bool *not_valid,
			   bool *no_inherit, core_yyscan_t yyscanner)
{
	/* defaults */
	if (deferrable)
		*deferrable = false;
	if (initdeferred)
		*initdeferred = false;
	if (not_valid)
		*not_valid = false;

	if (cas_bits & (CAS_DEFERRABLE | CAS_INITIALLY_DEFERRED))
	{
		if (deferrable)
			*deferrable = true;
		else
			ereport(ERROR,
					(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
					 /* translator: %s is CHECK, UNIQUE, or similar */
					 errmsg("%s constraints cannot be marked DEFERRABLE",
							constrType),
					 parser_errposition(location)));
	}

	if (cas_bits & CAS_INITIALLY_DEFERRED)
	{
		if (initdeferred)
			*initdeferred = true;
		else
			ereport(ERROR,
					(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
					 /* translator: %s is CHECK, UNIQUE, or similar */
					 errmsg("%s constraints cannot be marked DEFERRABLE",
							constrType),
					 parser_errposition(location)));
	}

	if (cas_bits & CAS_NOT_VALID)
	{
		if (not_valid)
			*not_valid = true;
		else
			ereport(ERROR,
					(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
					 /* translator: %s is CHECK, UNIQUE, or similar */
					 errmsg("%s constraints cannot be marked NOT VALID",
							constrType),
					 parser_errposition(location)));
	}

	if (cas_bits & CAS_NO_INHERIT)
	{
		if (no_inherit)
			*no_inherit = true;
		else
			ereport(ERROR,
					(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
					 /* translator: %s is CHECK, UNIQUE, or similar */
					 errmsg("%s constraints cannot be marked NO INHERIT",
							constrType),
					 parser_errposition(location)));
	}
}

/*----------
 * Recursive view transformation
 *
 * Convert
 *
 *     CREATE RECURSIVE VIEW relname (aliases) AS query
 *
 * to
 *
 *     CREATE VIEW relname (aliases) AS
 *         WITH RECURSIVE relname (aliases) AS (query)
 *         SELECT aliases FROM relname
 *
 * Actually, just the WITH ... part, which is then inserted into the original
 * view as the query.
 * ----------
 */
static PGNode *
makeRecursiveViewSelect(char *relname, PGList *aliases, PGNode *query)
{
	PGSelectStmt *s = makeNode(PGSelectStmt);
	PGWithClause *w = makeNode(PGWithClause);
	PGCommonTableExpr *cte = makeNode(PGCommonTableExpr);
	PGList	   *tl = NIL;
	PGListCell   *lc;

	/* create common table expression */
	cte->ctename = relname;
	cte->aliascolnames = aliases;
	cte->ctequery = query;
	cte->location = -1;

	/* create WITH clause and attach CTE */
	w->recursive = true;
	w->ctes = list_make1(cte);
	w->location = -1;

	/* create target list for the new SELECT from the alias list of the
	 * recursive view specification */
	foreach (lc, aliases)
	{
		PGResTarget *rt = makeNode(PGResTarget);

		rt->name = NULL;
		rt->indirection = NIL;
		rt->val = makeColumnRef(strVal(lfirst(lc)), NIL, -1, 0);
		rt->location = -1;

		tl = lappend(tl, rt);
	}

	/* create new SELECT combining WITH clause, target list, and fake FROM
	 * clause */
	s->withClause = w;
	s->targetList = tl;
	s->fromClause = list_make1(makeRangeVar(NULL, relname, -1));

	return (PGNode *) s;
}

/* parser_init()
 * Initialize to parse one query string
 */
void
parser_init(base_yy_extra_type *yyext)
{
	yyext->parsetree = NIL;		/* in case grammar forgets to set it */
}

#undef yyparse
#undef yylex
#undef yyerror
#undef yylval
#undef yychar
#undef yydebug
#undef yynerrs
#undef yylloc

} // namespace duckdb_libpgquery
