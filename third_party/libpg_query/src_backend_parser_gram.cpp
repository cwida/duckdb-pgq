/* A Bison parser, made by GNU Bison 3.8.2.  */

/* Bison implementation for Yacc-like parsers in C

   Copyright (C) 1984, 1989-1990, 2000-2015, 2018-2021 Free Software Foundation,
   Inc.

   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <https://www.gnu.org/licenses/>.  */

/* As a special exception, you may create a larger work that contains
   part or all of the Bison parser skeleton and distribute that work
   under terms of your choice, so long as that work isn't itself a
   parser generator using the skeleton or a modified version thereof
   as a parser skeleton.  Alternatively, if you modify or redistribute
   the parser skeleton itself, you may (at your option) remove this
   special exception, which will cause the skeleton and the resulting
   Bison output files to be licensed under the GNU General Public
   License without this special exception.

   This special exception was added by the Free Software Foundation in
   version 2.2 of Bison.  */

/* C LALR(1) parser skeleton written by Richard Stallman, by
   simplifying the original so-called "semantic" parser.  */

/* DO NOT RELY ON FEATURES THAT ARE NOT DOCUMENTED in the manual,
   especially those whose name start with YY_ or yy_.  They are
   private implementation details that can be changed or removed.  */

/* All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.  */

/* Identify Bison output, and Bison version.  */
#define YYBISON 30802

/* Bison version string.  */
#define YYBISON_VERSION "3.8.2"

/* Skeleton name.  */
#define YYSKELETON_NAME "yacc.c"

/* Pure parsers.  */
#define YYPURE 1

/* Push parsers.  */
#define YYPUSH 0

/* Pull parsers.  */
#define YYPULL 1


/* Substitute the variable and function names.  */
#define yyparse         base_yyparse
#define yylex           base_yylex
#define yyerror         base_yyerror
#define yydebug         base_yydebug
#define yynerrs         base_yynerrs

/* First part of user prologue.  */
#line 1 "third_party/libpg_query/grammar/grammar.y.tmp"

#line 1 "third_party/libpg_query/grammar/grammar.hpp"
/*#define YYDEBUG 1*/
/*-------------------------------------------------------------------------
 *
 * gram.y
 *	  POSTGRESQL BISON rules/actions
 *
 * Portions Copyright (c) 1996-2017, PostgreSQL Global Development PGGroup
 * Portions Copyright (c) 1994, Regents of the University of California
 *
 *
 * IDENTIFICATION
 *	  src/backend/parser/gram.y
 *
 * HISTORY
 *	  AUTHOR			DATE			MAJOR EVENT
 *	  Andrew Yu			Sept, 1994		POSTQUEL to SQL conversion
 *	  Andrew Yu			Oct, 1994		lispy code conversion
 *
 * NOTES
 *	  CAPITALS are used to represent terminal symbols.
 *	  non-capitals are used to represent non-terminals.
 *
 *	  In general, nothing in this file should initiate database accesses
 *	  nor depend on changeable state (such as SET variables).  If you do
 *	  database accesses, your code will fail when we have aborted the
 *	  current transaction and are just parsing commands to find the next
 *	  ROLLBACK or COMMIT.  If you make use of SET variables, then you
 *	  will do the wrong thing in multi-query strings like this:
 *			SET constraint_exclusion TO off; SELECT * FROM foo;
 *	  because the entire string is parsed by gram.y before the SET gets
 *	  executed.  Anything that depends on the database or changeable state
 *	  should be handled during parse analysis so that it happens at the
 *	  right time not the wrong time.
 *
 * WARNINGS
 *	  If you use a list, make sure the datum is a node so that the printing
 *	  routines work.
 *
 *	  Sometimes we assign constants to makeStrings. Make sure we don't free
 *	  those.
 *
 *-------------------------------------------------------------------------
 */
#include "pg_functions.hpp"
#include <string.h>

#include <ctype.h>
#include <limits.h>

#include "nodes/makefuncs.hpp"
#include "nodes/nodeFuncs.hpp"
#include "parser/gramparse.hpp"
#include "parser/parser.hpp"
#include "utils/datetime.hpp"

namespace duckdb_libpgquery {
#define DEFAULT_SCHEMA "main"

/*
 * Location tracking support --- simpler than bison's default, since we only
 * want to track the start position not the end position of each nonterminal.
 */
#define YYLLOC_DEFAULT(Current, Rhs, N) \
	do { \
		if ((N) > 0) \
			(Current) = (Rhs)[1]; \
		else \
			(Current) = (-1); \
	} while (0)

/*
 * The above macro assigns -1 (unknown) as the parse location of any
 * nonterminal that was reduced from an empty rule, or whose leftmost
 * component was reduced from an empty rule.  This is problematic
 * for nonterminals defined like
 *		OptFooList: / * EMPTY * / { ... } | OptFooList Foo { ... } ;
 * because we'll set -1 as the location during the first reduction and then
 * copy it during each subsequent reduction, leaving us with -1 for the
 * location even when the list is not empty.  To fix that, do this in the
 * action for the nonempty rule(s):
 *		if (@$ < 0) @$ = @2;
 * (Although we have many nonterminals that follow this pattern, we only
 * bother with fixing @$ like this when the nonterminal's parse location
 * is actually referenced in some rule.)
 *
 * A cleaner answer would be to make YYLLOC_DEFAULT scan all the Rhs
 * locations until it's found one that's not -1.  Then we'd get a correct
 * location for any nonterminal that isn't entirely empty.  But this way
 * would add overhead to every rule reduction, and so far there's not been
 * a compelling reason to pay that overhead.
 */

/*
 * Bison doesn't allocate anything that needs to live across parser calls,
 * so we can easily have it use palloc instead of malloc.  This prevents
 * memory leaks if we error out during parsing.  Note this only works with
 * bison >= 2.0.  However, in bison 1.875 the default is to use alloca()
 * if possible, so there's not really much problem anyhow, at least if
 * you're building with gcc.
 */
#define YYMALLOC palloc
#define YYFREE   pfree
#define YYINITDEPTH 1000

/* yields an integer bitmask of these flags: */
#define CAS_NOT_DEFERRABLE			0x01
#define CAS_DEFERRABLE				0x02
#define CAS_INITIALLY_IMMEDIATE		0x04
#define CAS_INITIALLY_DEFERRED		0x08
#define CAS_NOT_VALID				0x10
#define CAS_NO_INHERIT				0x20


#define parser_yyerror(msg)  scanner_yyerror(msg, yyscanner)
#define parser_errposition(pos)  scanner_errposition(pos, yyscanner)

static void base_yyerror(YYLTYPE *yylloc, core_yyscan_t yyscanner,
						 const char *msg);
static PGRawStmt *makeRawStmt(PGNode *stmt, int stmt_location);
static void updateRawStmtEnd(PGRawStmt *rs, int end_location);
static PGNode *makeColumnRef(char *colname, PGList *indirection,
						   int location, core_yyscan_t yyscanner);
static PGNode *makeTypeCast(PGNode *arg, PGTypeName *tpname, int trycast, int location);
static PGNode *makeStringConst(char *str, int location);
static PGNode *makeStringConstCast(char *str, int location, PGTypeName *tpname);
static PGNode *makeIntervalNode(char *str, int location, PGList *typmods);
static PGNode *makeIntervalNode(int val, int location, PGList *typmods);
static PGNode *makeIntervalNode(PGNode *arg, int location, PGList *typmods);
static PGNode *makeSampleSize(PGValue *sample_size, bool is_percentage);
static PGNode *makeSampleOptions(PGNode *sample_size, char *method, int *seed, int location);
static PGNode *makeIntConst(int val, int location);
static PGNode *makeFloatConst(char *str, int location);
static PGNode *makeBitStringConst(char *str, int location);
static PGNode *makeNullAConst(int location);
static PGNode *makeAConst(PGValue *v, int location);
static PGNode *makeBoolAConst(bool state, int location);
static PGNode *makeParamRef(int number, int location);
static PGNode *makeNamedParamRef(char* name, int location);
static void check_qualified_name(PGList *names, core_yyscan_t yyscanner);
static PGList *check_func_name(PGList *names, core_yyscan_t yyscanner);
static PGList *check_indirection(PGList *indirection, core_yyscan_t yyscanner);
static void insertSelectOptions(PGSelectStmt *stmt,
								PGList *sortClause, PGList *lockingClause,
								PGNode *limitOffset, PGNode *limitCount,
								PGWithClause *withClause,
								core_yyscan_t yyscanner);
static PGNode *makeSetOp(PGSetOperation op, bool all, PGNode *larg, PGNode *rarg);
static PGNode *doNegate(PGNode *n, int location);
static void doNegateFloat(PGValue *v);
static PGNode *makeAndExpr(PGNode *lexpr, PGNode *rexpr, int location);
static PGNode *makeOrExpr(PGNode *lexpr, PGNode *rexpr, int location);
static PGNode *makeNotExpr(PGNode *expr, int location);
static PGNode *makeSQLValueFunction(PGSQLValueFunctionOp op, int32_t typmod,
								  int location);
static void SplitColQualList(PGList *qualList,
							 PGList **constraintList, PGCollateClause **collClause,
							 core_yyscan_t yyscanner);
static void processCASbits(int cas_bits, int location, const char *constrType,
			   bool *deferrable, bool *initdeferred, bool *not_valid,
			   bool *no_inherit, core_yyscan_t yyscanner);
static PGNode *makeRecursiveViewSelect(char *relname, PGList *aliases, PGNode *query);
static PGNode *makeLimitPercent(PGNode *limit_percent);


#line 243 "third_party/libpg_query/grammar/grammar_out.cpp"

# ifndef YY_CAST
#  ifdef __cplusplus
#   define YY_CAST(Type, Val) static_cast<Type> (Val)
#   define YY_REINTERPRET_CAST(Type, Val) reinterpret_cast<Type> (Val)
#  else
#   define YY_CAST(Type, Val) ((Type) (Val))
#   define YY_REINTERPRET_CAST(Type, Val) ((Type) (Val))
#  endif
# endif
# ifndef YY_NULLPTR
#  if defined __cplusplus
#   if 201103L <= __cplusplus
#    define YY_NULLPTR nullptr
#   else
#    define YY_NULLPTR 0
#   endif
#  else
#   define YY_NULLPTR ((void*)0)
#  endif
# endif

#include "include/parser/gram.hpp"
/* Symbol kind.  */
enum yysymbol_kind_t
{
  YYSYMBOL_YYEMPTY = -2,
  YYSYMBOL_YYEOF = 0,                      /* "end of file"  */
  YYSYMBOL_YYerror = 1,                    /* error  */
  YYSYMBOL_YYUNDEF = 2,                    /* "invalid token"  */
  YYSYMBOL_IDENT = 3,                      /* IDENT  */
  YYSYMBOL_FCONST = 4,                     /* FCONST  */
  YYSYMBOL_SCONST = 5,                     /* SCONST  */
  YYSYMBOL_BCONST = 6,                     /* BCONST  */
  YYSYMBOL_XCONST = 7,                     /* XCONST  */
  YYSYMBOL_Op = 8,                         /* Op  */
  YYSYMBOL_ICONST = 9,                     /* ICONST  */
  YYSYMBOL_PARAM = 10,                     /* PARAM  */
  YYSYMBOL_TYPECAST = 11,                  /* TYPECAST  */
  YYSYMBOL_DOT_DOT = 12,                   /* DOT_DOT  */
  YYSYMBOL_COLON_EQUALS = 13,              /* COLON_EQUALS  */
  YYSYMBOL_EQUALS_GREATER = 14,            /* EQUALS_GREATER  */
  YYSYMBOL_POWER_OF = 15,                  /* POWER_OF  */
  YYSYMBOL_LAMBDA_ARROW = 16,              /* LAMBDA_ARROW  */
  YYSYMBOL_DOUBLE_ARROW = 17,              /* DOUBLE_ARROW  */
  YYSYMBOL_LESS_EQUALS = 18,               /* LESS_EQUALS  */
  YYSYMBOL_GREATER_EQUALS = 19,            /* GREATER_EQUALS  */
  YYSYMBOL_NOT_EQUALS = 20,                /* NOT_EQUALS  */
  YYSYMBOL_ABORT_P = 21,                   /* ABORT_P  */
  YYSYMBOL_ABSOLUTE_P = 22,                /* ABSOLUTE_P  */
  YYSYMBOL_ACCESS = 23,                    /* ACCESS  */
  YYSYMBOL_ACTION = 24,                    /* ACTION  */
  YYSYMBOL_ACYCLIC = 25,                   /* ACYCLIC  */
  YYSYMBOL_ADD_P = 26,                     /* ADD_P  */
  YYSYMBOL_ADMIN = 27,                     /* ADMIN  */
  YYSYMBOL_AFTER = 28,                     /* AFTER  */
  YYSYMBOL_AGGREGATE = 29,                 /* AGGREGATE  */
  YYSYMBOL_ALL = 30,                       /* ALL  */
  YYSYMBOL_ALSO = 31,                      /* ALSO  */
  YYSYMBOL_ALTER = 32,                     /* ALTER  */
  YYSYMBOL_ALWAYS = 33,                    /* ALWAYS  */
  YYSYMBOL_ANALYSE = 34,                   /* ANALYSE  */
  YYSYMBOL_ANALYZE = 35,                   /* ANALYZE  */
  YYSYMBOL_AND = 36,                       /* AND  */
  YYSYMBOL_ANY = 37,                       /* ANY  */
  YYSYMBOL_ARE = 38,                       /* ARE  */
  YYSYMBOL_ARRAY = 39,                     /* ARRAY  */
  YYSYMBOL_AS = 40,                        /* AS  */
  YYSYMBOL_ASC_P = 41,                     /* ASC_P  */
  YYSYMBOL_ASSERTION = 42,                 /* ASSERTION  */
  YYSYMBOL_ASSIGNMENT = 43,                /* ASSIGNMENT  */
  YYSYMBOL_ASYMMETRIC = 44,                /* ASYMMETRIC  */
  YYSYMBOL_AT = 45,                        /* AT  */
  YYSYMBOL_ATTACH = 46,                    /* ATTACH  */
  YYSYMBOL_ATTRIBUTE = 47,                 /* ATTRIBUTE  */
  YYSYMBOL_AUTHORIZATION = 48,             /* AUTHORIZATION  */
  YYSYMBOL_BACKWARD = 49,                  /* BACKWARD  */
  YYSYMBOL_BEFORE = 50,                    /* BEFORE  */
  YYSYMBOL_BEGIN_P = 51,                   /* BEGIN_P  */
  YYSYMBOL_BETWEEN = 52,                   /* BETWEEN  */
  YYSYMBOL_BIGINT = 53,                    /* BIGINT  */
  YYSYMBOL_BINARY = 54,                    /* BINARY  */
  YYSYMBOL_BIT = 55,                       /* BIT  */
  YYSYMBOL_BOOLEAN_P = 56,                 /* BOOLEAN_P  */
  YYSYMBOL_BOTH = 57,                      /* BOTH  */
  YYSYMBOL_BY = 58,                        /* BY  */
  YYSYMBOL_CACHE = 59,                     /* CACHE  */
  YYSYMBOL_CALL_P = 60,                    /* CALL_P  */
  YYSYMBOL_CALLED = 61,                    /* CALLED  */
  YYSYMBOL_CASCADE = 62,                   /* CASCADE  */
  YYSYMBOL_CASCADED = 63,                  /* CASCADED  */
  YYSYMBOL_CASE = 64,                      /* CASE  */
  YYSYMBOL_CAST = 65,                      /* CAST  */
  YYSYMBOL_CATALOG_P = 66,                 /* CATALOG_P  */
  YYSYMBOL_CHAIN = 67,                     /* CHAIN  */
  YYSYMBOL_CHAR_P = 68,                    /* CHAR_P  */
  YYSYMBOL_CHARACTER = 69,                 /* CHARACTER  */
  YYSYMBOL_CHARACTERISTICS = 70,           /* CHARACTERISTICS  */
  YYSYMBOL_CHECK_P = 71,                   /* CHECK_P  */
  YYSYMBOL_CHECKPOINT = 72,                /* CHECKPOINT  */
  YYSYMBOL_CLASS = 73,                     /* CLASS  */
  YYSYMBOL_CLOSE = 74,                     /* CLOSE  */
  YYSYMBOL_CLUSTER = 75,                   /* CLUSTER  */
  YYSYMBOL_COALESCE = 76,                  /* COALESCE  */
  YYSYMBOL_COLLATE = 77,                   /* COLLATE  */
  YYSYMBOL_COLLATION = 78,                 /* COLLATION  */
  YYSYMBOL_COLUMN = 79,                    /* COLUMN  */
  YYSYMBOL_COLUMNS = 80,                   /* COLUMNS  */
  YYSYMBOL_COMMENT = 81,                   /* COMMENT  */
  YYSYMBOL_COMMENTS = 82,                  /* COMMENTS  */
  YYSYMBOL_COMMIT = 83,                    /* COMMIT  */
  YYSYMBOL_COMMITTED = 84,                 /* COMMITTED  */
  YYSYMBOL_COMPRESSION = 85,               /* COMPRESSION  */
  YYSYMBOL_CONCURRENTLY = 86,              /* CONCURRENTLY  */
  YYSYMBOL_CONFIGURATION = 87,             /* CONFIGURATION  */
  YYSYMBOL_CONFLICT = 88,                  /* CONFLICT  */
  YYSYMBOL_CONNECTION = 89,                /* CONNECTION  */
  YYSYMBOL_CONSTRAINT = 90,                /* CONSTRAINT  */
  YYSYMBOL_CONSTRAINTS = 91,               /* CONSTRAINTS  */
  YYSYMBOL_CONTENT_P = 92,                 /* CONTENT_P  */
  YYSYMBOL_CONTINUE_P = 93,                /* CONTINUE_P  */
  YYSYMBOL_CONVERSION_P = 94,              /* CONVERSION_P  */
  YYSYMBOL_COPY = 95,                      /* COPY  */
  YYSYMBOL_COST = 96,                      /* COST  */
  YYSYMBOL_CREATE_P = 97,                  /* CREATE_P  */
  YYSYMBOL_CROSS = 98,                     /* CROSS  */
  YYSYMBOL_CSV = 99,                       /* CSV  */
  YYSYMBOL_CUBE = 100,                     /* CUBE  */
  YYSYMBOL_CURRENT_P = 101,                /* CURRENT_P  */
  YYSYMBOL_CURRENT_CATALOG = 102,          /* CURRENT_CATALOG  */
  YYSYMBOL_CURRENT_DATE = 103,             /* CURRENT_DATE  */
  YYSYMBOL_CURRENT_ROLE = 104,             /* CURRENT_ROLE  */
  YYSYMBOL_CURRENT_SCHEMA = 105,           /* CURRENT_SCHEMA  */
  YYSYMBOL_CURRENT_TIME = 106,             /* CURRENT_TIME  */
  YYSYMBOL_CURRENT_TIMESTAMP = 107,        /* CURRENT_TIMESTAMP  */
  YYSYMBOL_CURRENT_USER = 108,             /* CURRENT_USER  */
  YYSYMBOL_CURSOR = 109,                   /* CURSOR  */
  YYSYMBOL_CYCLE = 110,                    /* CYCLE  */
  YYSYMBOL_DATA_P = 111,                   /* DATA_P  */
  YYSYMBOL_DATABASE = 112,                 /* DATABASE  */
  YYSYMBOL_DAY_P = 113,                    /* DAY_P  */
  YYSYMBOL_DAYS_P = 114,                   /* DAYS_P  */
  YYSYMBOL_DEALLOCATE = 115,               /* DEALLOCATE  */
  YYSYMBOL_DEC = 116,                      /* DEC  */
  YYSYMBOL_DECIMAL_P = 117,                /* DECIMAL_P  */
  YYSYMBOL_DECLARE = 118,                  /* DECLARE  */
  YYSYMBOL_DEFAULT = 119,                  /* DEFAULT  */
  YYSYMBOL_DEFAULTS = 120,                 /* DEFAULTS  */
  YYSYMBOL_DEFERRABLE = 121,               /* DEFERRABLE  */
  YYSYMBOL_DEFERRED = 122,                 /* DEFERRED  */
  YYSYMBOL_DEFINER = 123,                  /* DEFINER  */
  YYSYMBOL_DELETE_P = 124,                 /* DELETE_P  */
  YYSYMBOL_DELIMITER = 125,                /* DELIMITER  */
  YYSYMBOL_DELIMITERS = 126,               /* DELIMITERS  */
  YYSYMBOL_DEPENDS = 127,                  /* DEPENDS  */
  YYSYMBOL_DESC_P = 128,                   /* DESC_P  */
  YYSYMBOL_DESCRIBE = 129,                 /* DESCRIBE  */
  YYSYMBOL_DESTINATION = 130,              /* DESTINATION  */
  YYSYMBOL_DETACH = 131,                   /* DETACH  */
  YYSYMBOL_DICTIONARY = 132,               /* DICTIONARY  */
  YYSYMBOL_DISABLE_P = 133,                /* DISABLE_P  */
  YYSYMBOL_DISCARD = 134,                  /* DISCARD  */
  YYSYMBOL_DISTINCT = 135,                 /* DISTINCT  */
  YYSYMBOL_DO = 136,                       /* DO  */
  YYSYMBOL_DOCUMENT_P = 137,               /* DOCUMENT_P  */
  YYSYMBOL_DOMAIN_P = 138,                 /* DOMAIN_P  */
  YYSYMBOL_DOUBLE_P = 139,                 /* DOUBLE_P  */
  YYSYMBOL_DROP = 140,                     /* DROP  */
  YYSYMBOL_EACH = 141,                     /* EACH  */
  YYSYMBOL_EDGE = 142,                     /* EDGE  */
  YYSYMBOL_ELEMENT_ID = 143,               /* ELEMENT_ID  */
  YYSYMBOL_ELSE = 144,                     /* ELSE  */
  YYSYMBOL_ENABLE_P = 145,                 /* ENABLE_P  */
  YYSYMBOL_ENCODING = 146,                 /* ENCODING  */
  YYSYMBOL_ENCRYPTED = 147,                /* ENCRYPTED  */
  YYSYMBOL_END_P = 148,                    /* END_P  */
  YYSYMBOL_ENUM_P = 149,                   /* ENUM_P  */
  YYSYMBOL_ESCAPE = 150,                   /* ESCAPE  */
  YYSYMBOL_EVENT = 151,                    /* EVENT  */
  YYSYMBOL_EXCEPT = 152,                   /* EXCEPT  */
  YYSYMBOL_EXCLUDE = 153,                  /* EXCLUDE  */
  YYSYMBOL_EXCLUDING = 154,                /* EXCLUDING  */
  YYSYMBOL_EXCLUSIVE = 155,                /* EXCLUSIVE  */
  YYSYMBOL_EXECUTE = 156,                  /* EXECUTE  */
  YYSYMBOL_EXISTS = 157,                   /* EXISTS  */
  YYSYMBOL_EXPLAIN = 158,                  /* EXPLAIN  */
  YYSYMBOL_EXPORT_P = 159,                 /* EXPORT_P  */
  YYSYMBOL_EXPORT_STATE = 160,             /* EXPORT_STATE  */
  YYSYMBOL_EXTENSION = 161,                /* EXTENSION  */
  YYSYMBOL_EXTERNAL = 162,                 /* EXTERNAL  */
  YYSYMBOL_EXTRACT = 163,                  /* EXTRACT  */
  YYSYMBOL_FALSE_P = 164,                  /* FALSE_P  */
  YYSYMBOL_FAMILY = 165,                   /* FAMILY  */
  YYSYMBOL_FETCH = 166,                    /* FETCH  */
  YYSYMBOL_FILTER = 167,                   /* FILTER  */
  YYSYMBOL_FIRST_P = 168,                  /* FIRST_P  */
  YYSYMBOL_FLOAT_P = 169,                  /* FLOAT_P  */
  YYSYMBOL_FOLLOWING = 170,                /* FOLLOWING  */
  YYSYMBOL_FOR = 171,                      /* FOR  */
  YYSYMBOL_FORCE = 172,                    /* FORCE  */
  YYSYMBOL_FOREIGN = 173,                  /* FOREIGN  */
  YYSYMBOL_FORWARD = 174,                  /* FORWARD  */
  YYSYMBOL_FREEZE = 175,                   /* FREEZE  */
  YYSYMBOL_FROM = 176,                     /* FROM  */
  YYSYMBOL_FULL = 177,                     /* FULL  */
  YYSYMBOL_FUNCTION = 178,                 /* FUNCTION  */
  YYSYMBOL_FUNCTIONS = 179,                /* FUNCTIONS  */
  YYSYMBOL_GENERATED = 180,                /* GENERATED  */
  YYSYMBOL_GLOB = 181,                     /* GLOB  */
  YYSYMBOL_GLOBAL = 182,                   /* GLOBAL  */
  YYSYMBOL_GRANT = 183,                    /* GRANT  */
  YYSYMBOL_GRANTED = 184,                  /* GRANTED  */
  YYSYMBOL_GRAPH = 185,                    /* GRAPH  */
  YYSYMBOL_GRAPH_TABLE = 186,              /* GRAPH_TABLE  */
  YYSYMBOL_GROUP_P = 187,                  /* GROUP_P  */
  YYSYMBOL_GROUPING = 188,                 /* GROUPING  */
  YYSYMBOL_GROUPING_ID = 189,              /* GROUPING_ID  */
  YYSYMBOL_GROUPS = 190,                   /* GROUPS  */
  YYSYMBOL_HANDLER = 191,                  /* HANDLER  */
  YYSYMBOL_HAVING = 192,                   /* HAVING  */
  YYSYMBOL_HEADER_P = 193,                 /* HEADER_P  */
  YYSYMBOL_HOLD = 194,                     /* HOLD  */
  YYSYMBOL_HOUR_P = 195,                   /* HOUR_P  */
  YYSYMBOL_HOURS_P = 196,                  /* HOURS_P  */
  YYSYMBOL_IDENTITY_P = 197,               /* IDENTITY_P  */
  YYSYMBOL_IF_P = 198,                     /* IF_P  */
  YYSYMBOL_IGNORE_P = 199,                 /* IGNORE_P  */
  YYSYMBOL_ILIKE = 200,                    /* ILIKE  */
  YYSYMBOL_IMMEDIATE = 201,                /* IMMEDIATE  */
  YYSYMBOL_IMMUTABLE = 202,                /* IMMUTABLE  */
  YYSYMBOL_IMPLICIT_P = 203,               /* IMPLICIT_P  */
  YYSYMBOL_IMPORT_P = 204,                 /* IMPORT_P  */
  YYSYMBOL_IN_P = 205,                     /* IN_P  */
  YYSYMBOL_INCLUDING = 206,                /* INCLUDING  */
  YYSYMBOL_INCREMENT = 207,                /* INCREMENT  */
  YYSYMBOL_INDEX = 208,                    /* INDEX  */
  YYSYMBOL_INDEXES = 209,                  /* INDEXES  */
  YYSYMBOL_INHERIT = 210,                  /* INHERIT  */
  YYSYMBOL_INHERITS = 211,                 /* INHERITS  */
  YYSYMBOL_INITIALLY = 212,                /* INITIALLY  */
  YYSYMBOL_INLINE_P = 213,                 /* INLINE_P  */
  YYSYMBOL_INNER_P = 214,                  /* INNER_P  */
  YYSYMBOL_INOUT = 215,                    /* INOUT  */
  YYSYMBOL_INPUT_P = 216,                  /* INPUT_P  */
  YYSYMBOL_INSENSITIVE = 217,              /* INSENSITIVE  */
  YYSYMBOL_INSERT = 218,                   /* INSERT  */
  YYSYMBOL_INSTALL = 219,                  /* INSTALL  */
  YYSYMBOL_INSTEAD = 220,                  /* INSTEAD  */
  YYSYMBOL_INT_P = 221,                    /* INT_P  */
  YYSYMBOL_INTEGER = 222,                  /* INTEGER  */
  YYSYMBOL_INTERSECT = 223,                /* INTERSECT  */
  YYSYMBOL_INTERVAL = 224,                 /* INTERVAL  */
  YYSYMBOL_INTO = 225,                     /* INTO  */
  YYSYMBOL_INVOKER = 226,                  /* INVOKER  */
  YYSYMBOL_IS = 227,                       /* IS  */
  YYSYMBOL_ISNULL = 228,                   /* ISNULL  */
  YYSYMBOL_ISOLATION = 229,                /* ISOLATION  */
  YYSYMBOL_JOIN = 230,                     /* JOIN  */
  YYSYMBOL_JSON = 231,                     /* JSON  */
  YYSYMBOL_KEEP = 232,                     /* KEEP  */
  YYSYMBOL_KEY = 233,                      /* KEY  */
  YYSYMBOL_LABEL = 234,                    /* LABEL  */
  YYSYMBOL_LANGUAGE = 235,                 /* LANGUAGE  */
  YYSYMBOL_LARGE_P = 236,                  /* LARGE_P  */
  YYSYMBOL_LAST_P = 237,                   /* LAST_P  */
  YYSYMBOL_LATERAL_P = 238,                /* LATERAL_P  */
  YYSYMBOL_LEADING = 239,                  /* LEADING  */
  YYSYMBOL_LEAKPROOF = 240,                /* LEAKPROOF  */
  YYSYMBOL_LEFT = 241,                     /* LEFT  */
  YYSYMBOL_LEVEL = 242,                    /* LEVEL  */
  YYSYMBOL_LIKE = 243,                     /* LIKE  */
  YYSYMBOL_LIMIT = 244,                    /* LIMIT  */
  YYSYMBOL_LISTEN = 245,                   /* LISTEN  */
  YYSYMBOL_LOAD = 246,                     /* LOAD  */
  YYSYMBOL_LOCAL = 247,                    /* LOCAL  */
  YYSYMBOL_LOCALTIME = 248,                /* LOCALTIME  */
  YYSYMBOL_LOCALTIMESTAMP = 249,           /* LOCALTIMESTAMP  */
  YYSYMBOL_LOCATION = 250,                 /* LOCATION  */
  YYSYMBOL_LOCK_P = 251,                   /* LOCK_P  */
  YYSYMBOL_LOCKED = 252,                   /* LOCKED  */
  YYSYMBOL_LOGGED = 253,                   /* LOGGED  */
  YYSYMBOL_MACRO = 254,                    /* MACRO  */
  YYSYMBOL_MAP = 255,                      /* MAP  */
  YYSYMBOL_MAPPING = 256,                  /* MAPPING  */
  YYSYMBOL_MATCH = 257,                    /* MATCH  */
  YYSYMBOL_MATERIALIZED = 258,             /* MATERIALIZED  */
  YYSYMBOL_MAXVALUE = 259,                 /* MAXVALUE  */
  YYSYMBOL_METHOD = 260,                   /* METHOD  */
  YYSYMBOL_MICROSECOND_P = 261,            /* MICROSECOND_P  */
  YYSYMBOL_MICROSECONDS_P = 262,           /* MICROSECONDS_P  */
  YYSYMBOL_MILLISECOND_P = 263,            /* MILLISECOND_P  */
  YYSYMBOL_MILLISECONDS_P = 264,           /* MILLISECONDS_P  */
  YYSYMBOL_MINUTE_P = 265,                 /* MINUTE_P  */
  YYSYMBOL_MINUTES_P = 266,                /* MINUTES_P  */
  YYSYMBOL_MINVALUE = 267,                 /* MINVALUE  */
  YYSYMBOL_MODE = 268,                     /* MODE  */
  YYSYMBOL_MONTH_P = 269,                  /* MONTH_P  */
  YYSYMBOL_MONTHS_P = 270,                 /* MONTHS_P  */
  YYSYMBOL_MOVE = 271,                     /* MOVE  */
  YYSYMBOL_NAME_P = 272,                   /* NAME_P  */
  YYSYMBOL_NAMES = 273,                    /* NAMES  */
  YYSYMBOL_NATIONAL = 274,                 /* NATIONAL  */
  YYSYMBOL_NATURAL = 275,                  /* NATURAL  */
  YYSYMBOL_NCHAR = 276,                    /* NCHAR  */
  YYSYMBOL_NEW = 277,                      /* NEW  */
  YYSYMBOL_NEXT = 278,                     /* NEXT  */
  YYSYMBOL_NO = 279,                       /* NO  */
  YYSYMBOL_NODE = 280,                     /* NODE  */
  YYSYMBOL_NONE = 281,                     /* NONE  */
  YYSYMBOL_NOT = 282,                      /* NOT  */
  YYSYMBOL_NOTHING = 283,                  /* NOTHING  */
  YYSYMBOL_NOTIFY = 284,                   /* NOTIFY  */
  YYSYMBOL_NOTNULL = 285,                  /* NOTNULL  */
  YYSYMBOL_NOWAIT = 286,                   /* NOWAIT  */
  YYSYMBOL_NULL_P = 287,                   /* NULL_P  */
  YYSYMBOL_NULLIF = 288,                   /* NULLIF  */
  YYSYMBOL_NULLS_P = 289,                  /* NULLS_P  */
  YYSYMBOL_NUMERIC = 290,                  /* NUMERIC  */
  YYSYMBOL_OBJECT_P = 291,                 /* OBJECT_P  */
  YYSYMBOL_OF = 292,                       /* OF  */
  YYSYMBOL_OFF = 293,                      /* OFF  */
  YYSYMBOL_OFFSET = 294,                   /* OFFSET  */
  YYSYMBOL_OIDS = 295,                     /* OIDS  */
  YYSYMBOL_OLD = 296,                      /* OLD  */
  YYSYMBOL_ON = 297,                       /* ON  */
  YYSYMBOL_ONLY = 298,                     /* ONLY  */
  YYSYMBOL_OPERATOR = 299,                 /* OPERATOR  */
  YYSYMBOL_OPTION = 300,                   /* OPTION  */
  YYSYMBOL_OPTIONS = 301,                  /* OPTIONS  */
  YYSYMBOL_OR = 302,                       /* OR  */
  YYSYMBOL_ORDER = 303,                    /* ORDER  */
  YYSYMBOL_ORDINALITY = 304,               /* ORDINALITY  */
  YYSYMBOL_OUT_P = 305,                    /* OUT_P  */
  YYSYMBOL_OUTER_P = 306,                  /* OUTER_P  */
  YYSYMBOL_OVER = 307,                     /* OVER  */
  YYSYMBOL_OVERLAPS = 308,                 /* OVERLAPS  */
  YYSYMBOL_OVERLAY = 309,                  /* OVERLAY  */
  YYSYMBOL_OVERRIDING = 310,               /* OVERRIDING  */
  YYSYMBOL_OWNED = 311,                    /* OWNED  */
  YYSYMBOL_OWNER = 312,                    /* OWNER  */
  YYSYMBOL_PARALLEL = 313,                 /* PARALLEL  */
  YYSYMBOL_PARSER = 314,                   /* PARSER  */
  YYSYMBOL_PARTIAL = 315,                  /* PARTIAL  */
  YYSYMBOL_PARTITION = 316,                /* PARTITION  */
  YYSYMBOL_PASSING = 317,                  /* PASSING  */
  YYSYMBOL_PASSWORD = 318,                 /* PASSWORD  */
  YYSYMBOL_PATH = 319,                     /* PATH  */
  YYSYMBOL_PATHS = 320,                    /* PATHS  */
  YYSYMBOL_PERCENT = 321,                  /* PERCENT  */
  YYSYMBOL_PLACING = 322,                  /* PLACING  */
  YYSYMBOL_PLANS = 323,                    /* PLANS  */
  YYSYMBOL_POLICY = 324,                   /* POLICY  */
  YYSYMBOL_POSITION = 325,                 /* POSITION  */
  YYSYMBOL_POSITIONAL = 326,               /* POSITIONAL  */
  YYSYMBOL_PRAGMA_P = 327,                 /* PRAGMA_P  */
  YYSYMBOL_PRECEDING = 328,                /* PRECEDING  */
  YYSYMBOL_PRECISION = 329,                /* PRECISION  */
  YYSYMBOL_PREPARE = 330,                  /* PREPARE  */
  YYSYMBOL_PREPARED = 331,                 /* PREPARED  */
  YYSYMBOL_PRESERVE = 332,                 /* PRESERVE  */
  YYSYMBOL_PRIMARY = 333,                  /* PRIMARY  */
  YYSYMBOL_PRIOR = 334,                    /* PRIOR  */
  YYSYMBOL_PRIVILEGES = 335,               /* PRIVILEGES  */
  YYSYMBOL_PROCEDURAL = 336,               /* PROCEDURAL  */
  YYSYMBOL_PROCEDURE = 337,                /* PROCEDURE  */
  YYSYMBOL_PROGRAM = 338,                  /* PROGRAM  */
  YYSYMBOL_PROPERTIES = 339,               /* PROPERTIES  */
  YYSYMBOL_PROPERTY = 340,                 /* PROPERTY  */
  YYSYMBOL_PUBLICATION = 341,              /* PUBLICATION  */
  YYSYMBOL_QUALIFY = 342,                  /* QUALIFY  */
  YYSYMBOL_QUOTE = 343,                    /* QUOTE  */
  YYSYMBOL_RANGE = 344,                    /* RANGE  */
  YYSYMBOL_READ_P = 345,                   /* READ_P  */
  YYSYMBOL_REAL = 346,                     /* REAL  */
  YYSYMBOL_REASSIGN = 347,                 /* REASSIGN  */
  YYSYMBOL_RECHECK = 348,                  /* RECHECK  */
  YYSYMBOL_RECURSIVE = 349,                /* RECURSIVE  */
  YYSYMBOL_REF = 350,                      /* REF  */
  YYSYMBOL_REFERENCES = 351,               /* REFERENCES  */
  YYSYMBOL_REFERENCING = 352,              /* REFERENCING  */
  YYSYMBOL_REFRESH = 353,                  /* REFRESH  */
  YYSYMBOL_REINDEX = 354,                  /* REINDEX  */
  YYSYMBOL_RELATIONSHIP = 355,             /* RELATIONSHIP  */
  YYSYMBOL_RELATIVE_P = 356,               /* RELATIVE_P  */
  YYSYMBOL_RELEASE = 357,                  /* RELEASE  */
  YYSYMBOL_RENAME = 358,                   /* RENAME  */
  YYSYMBOL_REPEATABLE = 359,               /* REPEATABLE  */
  YYSYMBOL_REPLACE = 360,                  /* REPLACE  */
  YYSYMBOL_REPLICA = 361,                  /* REPLICA  */
  YYSYMBOL_RESET = 362,                    /* RESET  */
  YYSYMBOL_RESPECT_P = 363,                /* RESPECT_P  */
  YYSYMBOL_RESTART = 364,                  /* RESTART  */
  YYSYMBOL_RESTRICT = 365,                 /* RESTRICT  */
  YYSYMBOL_RETURNING = 366,                /* RETURNING  */
  YYSYMBOL_RETURNS = 367,                  /* RETURNS  */
  YYSYMBOL_REVOKE = 368,                   /* REVOKE  */
  YYSYMBOL_RIGHT = 369,                    /* RIGHT  */
  YYSYMBOL_ROLE = 370,                     /* ROLE  */
  YYSYMBOL_ROLLBACK = 371,                 /* ROLLBACK  */
  YYSYMBOL_ROLLUP = 372,                   /* ROLLUP  */
  YYSYMBOL_ROW = 373,                      /* ROW  */
  YYSYMBOL_ROWS = 374,                     /* ROWS  */
  YYSYMBOL_RULE = 375,                     /* RULE  */
  YYSYMBOL_SAMPLE = 376,                   /* SAMPLE  */
  YYSYMBOL_SAVEPOINT = 377,                /* SAVEPOINT  */
  YYSYMBOL_SCHEMA = 378,                   /* SCHEMA  */
  YYSYMBOL_SCHEMAS = 379,                  /* SCHEMAS  */
  YYSYMBOL_SCROLL = 380,                   /* SCROLL  */
  YYSYMBOL_SEARCH = 381,                   /* SEARCH  */
  YYSYMBOL_SECOND_P = 382,                 /* SECOND_P  */
  YYSYMBOL_SECONDS_P = 383,                /* SECONDS_P  */
  YYSYMBOL_SECURITY = 384,                 /* SECURITY  */
  YYSYMBOL_SELECT = 385,                   /* SELECT  */
  YYSYMBOL_SEQUENCE = 386,                 /* SEQUENCE  */
  YYSYMBOL_SEQUENCES = 387,                /* SEQUENCES  */
  YYSYMBOL_SERIALIZABLE = 388,             /* SERIALIZABLE  */
  YYSYMBOL_SERVER = 389,                   /* SERVER  */
  YYSYMBOL_SESSION = 390,                  /* SESSION  */
  YYSYMBOL_SESSION_USER = 391,             /* SESSION_USER  */
  YYSYMBOL_SET = 392,                      /* SET  */
  YYSYMBOL_SETOF = 393,                    /* SETOF  */
  YYSYMBOL_SETS = 394,                     /* SETS  */
  YYSYMBOL_SHARE = 395,                    /* SHARE  */
  YYSYMBOL_SHORTEST = 396,                 /* SHORTEST  */
  YYSYMBOL_SHOW = 397,                     /* SHOW  */
  YYSYMBOL_SIMILAR = 398,                  /* SIMILAR  */
  YYSYMBOL_SIMPLE = 399,                   /* SIMPLE  */
  YYSYMBOL_SKIP = 400,                     /* SKIP  */
  YYSYMBOL_SMALLINT = 401,                 /* SMALLINT  */
  YYSYMBOL_SNAPSHOT = 402,                 /* SNAPSHOT  */
  YYSYMBOL_SOME = 403,                     /* SOME  */
  YYSYMBOL_SOURCE = 404,                   /* SOURCE  */
  YYSYMBOL_SQL_P = 405,                    /* SQL_P  */
  YYSYMBOL_STABLE = 406,                   /* STABLE  */
  YYSYMBOL_STANDALONE_P = 407,             /* STANDALONE_P  */
  YYSYMBOL_START = 408,                    /* START  */
  YYSYMBOL_STATEMENT = 409,                /* STATEMENT  */
  YYSYMBOL_STATISTICS = 410,               /* STATISTICS  */
  YYSYMBOL_STDIN = 411,                    /* STDIN  */
  YYSYMBOL_STDOUT = 412,                   /* STDOUT  */
  YYSYMBOL_STORAGE = 413,                  /* STORAGE  */
  YYSYMBOL_STORED = 414,                   /* STORED  */
  YYSYMBOL_STRICT_P = 415,                 /* STRICT_P  */
  YYSYMBOL_STRIP_P = 416,                  /* STRIP_P  */
  YYSYMBOL_STRUCT = 417,                   /* STRUCT  */
  YYSYMBOL_SUBSCRIPTION = 418,             /* SUBSCRIPTION  */
  YYSYMBOL_SUBSTRING = 419,                /* SUBSTRING  */
  YYSYMBOL_SUMMARIZE = 420,                /* SUMMARIZE  */
  YYSYMBOL_SYMMETRIC = 421,                /* SYMMETRIC  */
  YYSYMBOL_SYSID = 422,                    /* SYSID  */
  YYSYMBOL_SYSTEM_P = 423,                 /* SYSTEM_P  */
  YYSYMBOL_TABLE = 424,                    /* TABLE  */
  YYSYMBOL_TABLES = 425,                   /* TABLES  */
  YYSYMBOL_TABLESAMPLE = 426,              /* TABLESAMPLE  */
  YYSYMBOL_TABLESPACE = 427,               /* TABLESPACE  */
  YYSYMBOL_TEMP = 428,                     /* TEMP  */
  YYSYMBOL_TEMPLATE = 429,                 /* TEMPLATE  */
  YYSYMBOL_TEMPORARY = 430,                /* TEMPORARY  */
  YYSYMBOL_TEXT_P = 431,                   /* TEXT_P  */
  YYSYMBOL_THEN = 432,                     /* THEN  */
  YYSYMBOL_TIME = 433,                     /* TIME  */
  YYSYMBOL_TIMESTAMP = 434,                /* TIMESTAMP  */
  YYSYMBOL_TO = 435,                       /* TO  */
  YYSYMBOL_TRAIL = 436,                    /* TRAIL  */
  YYSYMBOL_TRAILING = 437,                 /* TRAILING  */
  YYSYMBOL_TRANSACTION = 438,              /* TRANSACTION  */
  YYSYMBOL_TRANSFORM = 439,                /* TRANSFORM  */
  YYSYMBOL_TREAT = 440,                    /* TREAT  */
  YYSYMBOL_TRIGGER = 441,                  /* TRIGGER  */
  YYSYMBOL_TRIM = 442,                     /* TRIM  */
  YYSYMBOL_TRUE_P = 443,                   /* TRUE_P  */
  YYSYMBOL_TRUNCATE = 444,                 /* TRUNCATE  */
  YYSYMBOL_TRUSTED = 445,                  /* TRUSTED  */
  YYSYMBOL_TRY_CAST = 446,                 /* TRY_CAST  */
  YYSYMBOL_TYPE_P = 447,                   /* TYPE_P  */
  YYSYMBOL_TYPES_P = 448,                  /* TYPES_P  */
  YYSYMBOL_UNBOUNDED = 449,                /* UNBOUNDED  */
  YYSYMBOL_UNCOMMITTED = 450,              /* UNCOMMITTED  */
  YYSYMBOL_UNENCRYPTED = 451,              /* UNENCRYPTED  */
  YYSYMBOL_UNION = 452,                    /* UNION  */
  YYSYMBOL_UNIQUE = 453,                   /* UNIQUE  */
  YYSYMBOL_UNKNOWN = 454,                  /* UNKNOWN  */
  YYSYMBOL_UNLISTEN = 455,                 /* UNLISTEN  */
  YYSYMBOL_UNLOGGED = 456,                 /* UNLOGGED  */
  YYSYMBOL_UNTIL = 457,                    /* UNTIL  */
  YYSYMBOL_UPDATE = 458,                   /* UPDATE  */
  YYSYMBOL_USE_P = 459,                    /* USE_P  */
  YYSYMBOL_USER = 460,                     /* USER  */
  YYSYMBOL_USING = 461,                    /* USING  */
  YYSYMBOL_VACUUM = 462,                   /* VACUUM  */
  YYSYMBOL_VALID = 463,                    /* VALID  */
  YYSYMBOL_VALIDATE = 464,                 /* VALIDATE  */
  YYSYMBOL_VALIDATOR = 465,                /* VALIDATOR  */
  YYSYMBOL_VALUE_P = 466,                  /* VALUE_P  */
  YYSYMBOL_VALUES = 467,                   /* VALUES  */
  YYSYMBOL_VARCHAR = 468,                  /* VARCHAR  */
  YYSYMBOL_VARIADIC = 469,                 /* VARIADIC  */
  YYSYMBOL_VARYING = 470,                  /* VARYING  */
  YYSYMBOL_VERBOSE = 471,                  /* VERBOSE  */
  YYSYMBOL_VERSION_P = 472,                /* VERSION_P  */
  YYSYMBOL_VERTEX = 473,                   /* VERTEX  */
  YYSYMBOL_VIEW = 474,                     /* VIEW  */
  YYSYMBOL_VIEWS = 475,                    /* VIEWS  */
  YYSYMBOL_VIRTUAL = 476,                  /* VIRTUAL  */
  YYSYMBOL_VOLATILE = 477,                 /* VOLATILE  */
  YYSYMBOL_WALK = 478,                     /* WALK  */
  YYSYMBOL_WHEN = 479,                     /* WHEN  */
  YYSYMBOL_WHERE = 480,                    /* WHERE  */
  YYSYMBOL_WHITESPACE_P = 481,             /* WHITESPACE_P  */
  YYSYMBOL_WINDOW = 482,                   /* WINDOW  */
  YYSYMBOL_WITH = 483,                     /* WITH  */
  YYSYMBOL_WITHIN = 484,                   /* WITHIN  */
  YYSYMBOL_WITHOUT = 485,                  /* WITHOUT  */
  YYSYMBOL_WORK = 486,                     /* WORK  */
  YYSYMBOL_WRAPPER = 487,                  /* WRAPPER  */
  YYSYMBOL_WRITE_P = 488,                  /* WRITE_P  */
  YYSYMBOL_XML_P = 489,                    /* XML_P  */
  YYSYMBOL_XMLATTRIBUTES = 490,            /* XMLATTRIBUTES  */
  YYSYMBOL_XMLCONCAT = 491,                /* XMLCONCAT  */
  YYSYMBOL_XMLELEMENT = 492,               /* XMLELEMENT  */
  YYSYMBOL_XMLEXISTS = 493,                /* XMLEXISTS  */
  YYSYMBOL_XMLFOREST = 494,                /* XMLFOREST  */
  YYSYMBOL_XMLNAMESPACES = 495,            /* XMLNAMESPACES  */
  YYSYMBOL_XMLPARSE = 496,                 /* XMLPARSE  */
  YYSYMBOL_XMLPI = 497,                    /* XMLPI  */
  YYSYMBOL_XMLROOT = 498,                  /* XMLROOT  */
  YYSYMBOL_XMLSERIALIZE = 499,             /* XMLSERIALIZE  */
  YYSYMBOL_XMLTABLE = 500,                 /* XMLTABLE  */
  YYSYMBOL_YEAR_P = 501,                   /* YEAR_P  */
  YYSYMBOL_YEARS_P = 502,                  /* YEARS_P  */
  YYSYMBOL_YES_P = 503,                    /* YES_P  */
  YYSYMBOL_ZONE = 504,                     /* ZONE  */
  YYSYMBOL_NOT_LA = 505,                   /* NOT_LA  */
  YYSYMBOL_NULLS_LA = 506,                 /* NULLS_LA  */
  YYSYMBOL_WITH_LA = 507,                  /* WITH_LA  */
  YYSYMBOL_508_ = 508,                     /* '<'  */
  YYSYMBOL_509_ = 509,                     /* '>'  */
  YYSYMBOL_510_ = 510,                     /* '='  */
  YYSYMBOL_POSTFIXOP = 511,                /* POSTFIXOP  */
  YYSYMBOL_512_ = 512,                     /* '+'  */
  YYSYMBOL_513_ = 513,                     /* '-'  */
  YYSYMBOL_514_ = 514,                     /* '*'  */
  YYSYMBOL_515_ = 515,                     /* '/'  */
  YYSYMBOL_516_ = 516,                     /* '%'  */
  YYSYMBOL_517_ = 517,                     /* '^'  */
  YYSYMBOL_UMINUS = 518,                   /* UMINUS  */
  YYSYMBOL_519_ = 519,                     /* '['  */
  YYSYMBOL_520_ = 520,                     /* ']'  */
  YYSYMBOL_521_ = 521,                     /* '('  */
  YYSYMBOL_522_ = 522,                     /* ')'  */
  YYSYMBOL_523_ = 523,                     /* '.'  */
  YYSYMBOL_524_ = 524,                     /* ';'  */
  YYSYMBOL_525_ = 525,                     /* ','  */
  YYSYMBOL_526_ = 526,                     /* '|'  */
  YYSYMBOL_527_ = 527,                     /* '?'  */
  YYSYMBOL_528_ = 528,                     /* '{'  */
  YYSYMBOL_529_ = 529,                     /* '}'  */
  YYSYMBOL_530_ = 530,                     /* '&'  */
  YYSYMBOL_531_ = 531,                     /* '!'  */
  YYSYMBOL_532_ = 532,                     /* ':'  */
  YYSYMBOL_533_ = 533,                     /* '#'  */
  YYSYMBOL_534_ = 534,                     /* '$'  */
  YYSYMBOL_YYACCEPT = 535,                 /* $accept  */
  YYSYMBOL_stmtblock = 536,                /* stmtblock  */
  YYSYMBOL_stmtmulti = 537,                /* stmtmulti  */
  YYSYMBOL_stmt = 538,                     /* stmt  */
  YYSYMBOL_AlterObjectSchemaStmt = 539,    /* AlterObjectSchemaStmt  */
  YYSYMBOL_AlterSeqStmt = 540,             /* AlterSeqStmt  */
  YYSYMBOL_SeqOptList = 541,               /* SeqOptList  */
  YYSYMBOL_opt_with = 542,                 /* opt_with  */
  YYSYMBOL_NumericOnly = 543,              /* NumericOnly  */
  YYSYMBOL_SeqOptElem = 544,               /* SeqOptElem  */
  YYSYMBOL_opt_by = 545,                   /* opt_by  */
  YYSYMBOL_SignedIconst = 546,             /* SignedIconst  */
  YYSYMBOL_AlterTableStmt = 547,           /* AlterTableStmt  */
  YYSYMBOL_alter_identity_column_option_list = 548, /* alter_identity_column_option_list  */
  YYSYMBOL_alter_column_default = 549,     /* alter_column_default  */
  YYSYMBOL_alter_identity_column_option = 550, /* alter_identity_column_option  */
  YYSYMBOL_alter_generic_option_list = 551, /* alter_generic_option_list  */
  YYSYMBOL_alter_table_cmd = 552,          /* alter_table_cmd  */
  YYSYMBOL_alter_using = 553,              /* alter_using  */
  YYSYMBOL_alter_generic_option_elem = 554, /* alter_generic_option_elem  */
  YYSYMBOL_alter_table_cmds = 555,         /* alter_table_cmds  */
  YYSYMBOL_alter_generic_options = 556,    /* alter_generic_options  */
  YYSYMBOL_opt_set_data = 557,             /* opt_set_data  */
  YYSYMBOL_AnalyzeStmt = 558,              /* AnalyzeStmt  */
  YYSYMBOL_AttachStmt = 559,               /* AttachStmt  */
  YYSYMBOL_DetachStmt = 560,               /* DetachStmt  */
  YYSYMBOL_opt_database = 561,             /* opt_database  */
  YYSYMBOL_opt_database_alias = 562,       /* opt_database_alias  */
  YYSYMBOL_CallStmt = 563,                 /* CallStmt  */
  YYSYMBOL_CheckPointStmt = 564,           /* CheckPointStmt  */
  YYSYMBOL_opt_col_id = 565,               /* opt_col_id  */
  YYSYMBOL_CopyStmt = 566,                 /* CopyStmt  */
  YYSYMBOL_copy_from = 567,                /* copy_from  */
  YYSYMBOL_copy_delimiter = 568,           /* copy_delimiter  */
  YYSYMBOL_copy_generic_opt_arg_list = 569, /* copy_generic_opt_arg_list  */
  YYSYMBOL_opt_using = 570,                /* opt_using  */
  YYSYMBOL_opt_as = 571,                   /* opt_as  */
  YYSYMBOL_opt_program = 572,              /* opt_program  */
  YYSYMBOL_copy_options = 573,             /* copy_options  */
  YYSYMBOL_copy_generic_opt_arg = 574,     /* copy_generic_opt_arg  */
  YYSYMBOL_copy_generic_opt_elem = 575,    /* copy_generic_opt_elem  */
  YYSYMBOL_opt_oids = 576,                 /* opt_oids  */
  YYSYMBOL_copy_opt_list = 577,            /* copy_opt_list  */
  YYSYMBOL_opt_binary = 578,               /* opt_binary  */
  YYSYMBOL_copy_opt_item = 579,            /* copy_opt_item  */
  YYSYMBOL_copy_generic_opt_arg_list_item = 580, /* copy_generic_opt_arg_list_item  */
  YYSYMBOL_copy_file_name = 581,           /* copy_file_name  */
  YYSYMBOL_copy_generic_opt_list = 582,    /* copy_generic_opt_list  */
  YYSYMBOL_CreateStmt = 583,               /* CreateStmt  */
  YYSYMBOL_ConstraintAttributeSpec = 584,  /* ConstraintAttributeSpec  */
  YYSYMBOL_def_arg = 585,                  /* def_arg  */
  YYSYMBOL_OptParenthesizedSeqOptList = 586, /* OptParenthesizedSeqOptList  */
  YYSYMBOL_generic_option_arg = 587,       /* generic_option_arg  */
  YYSYMBOL_key_action = 588,               /* key_action  */
  YYSYMBOL_ColConstraint = 589,            /* ColConstraint  */
  YYSYMBOL_ColConstraintElem = 590,        /* ColConstraintElem  */
  YYSYMBOL_GeneratedColumnType = 591,      /* GeneratedColumnType  */
  YYSYMBOL_opt_GeneratedColumnType = 592,  /* opt_GeneratedColumnType  */
  YYSYMBOL_GeneratedConstraintElem = 593,  /* GeneratedConstraintElem  */
  YYSYMBOL_generic_option_elem = 594,      /* generic_option_elem  */
  YYSYMBOL_key_update = 595,               /* key_update  */
  YYSYMBOL_key_actions = 596,              /* key_actions  */
  YYSYMBOL_OnCommitOption = 597,           /* OnCommitOption  */
  YYSYMBOL_reloptions = 598,               /* reloptions  */
  YYSYMBOL_opt_no_inherit = 599,           /* opt_no_inherit  */
  YYSYMBOL_TableConstraint = 600,          /* TableConstraint  */
  YYSYMBOL_TableLikeOption = 601,          /* TableLikeOption  */
  YYSYMBOL_reloption_list = 602,           /* reloption_list  */
  YYSYMBOL_ExistingIndex = 603,            /* ExistingIndex  */
  YYSYMBOL_ConstraintAttr = 604,           /* ConstraintAttr  */
  YYSYMBOL_OptWith = 605,                  /* OptWith  */
  YYSYMBOL_definition = 606,               /* definition  */
  YYSYMBOL_TableLikeOptionList = 607,      /* TableLikeOptionList  */
  YYSYMBOL_generic_option_name = 608,      /* generic_option_name  */
  YYSYMBOL_ConstraintAttributeElem = 609,  /* ConstraintAttributeElem  */
  YYSYMBOL_columnDef = 610,                /* columnDef  */
  YYSYMBOL_def_list = 611,                 /* def_list  */
  YYSYMBOL_index_name = 612,               /* index_name  */
  YYSYMBOL_TableElement = 613,             /* TableElement  */
  YYSYMBOL_def_elem = 614,                 /* def_elem  */
  YYSYMBOL_opt_definition = 615,           /* opt_definition  */
  YYSYMBOL_OptTableElementList = 616,      /* OptTableElementList  */
  YYSYMBOL_columnElem = 617,               /* columnElem  */
  YYSYMBOL_opt_column_list = 618,          /* opt_column_list  */
  YYSYMBOL_ColQualList = 619,              /* ColQualList  */
  YYSYMBOL_key_delete = 620,               /* key_delete  */
  YYSYMBOL_reloption_elem = 621,           /* reloption_elem  */
  YYSYMBOL_columnList = 622,               /* columnList  */
  YYSYMBOL_columnList_opt_comma = 623,     /* columnList_opt_comma  */
  YYSYMBOL_func_type = 624,                /* func_type  */
  YYSYMBOL_ConstraintElem = 625,           /* ConstraintElem  */
  YYSYMBOL_TableElementList = 626,         /* TableElementList  */
  YYSYMBOL_key_match = 627,                /* key_match  */
  YYSYMBOL_TableLikeClause = 628,          /* TableLikeClause  */
  YYSYMBOL_OptTemp = 629,                  /* OptTemp  */
  YYSYMBOL_generated_when = 630,           /* generated_when  */
  YYSYMBOL_CreateAsStmt = 631,             /* CreateAsStmt  */
  YYSYMBOL_opt_with_data = 632,            /* opt_with_data  */
  YYSYMBOL_create_as_target = 633,         /* create_as_target  */
  YYSYMBOL_unreserved_keyword = 634,       /* unreserved_keyword  */
  YYSYMBOL_col_name_keyword = 635,         /* col_name_keyword  */
  YYSYMBOL_func_name_keyword = 636,        /* func_name_keyword  */
  YYSYMBOL_type_name_keyword = 637,        /* type_name_keyword  */
  YYSYMBOL_other_keyword = 638,            /* other_keyword  */
  YYSYMBOL_type_func_name_keyword = 639,   /* type_func_name_keyword  */
  YYSYMBOL_reserved_keyword = 640,         /* reserved_keyword  */
  YYSYMBOL_pgq_col_name_keyword = 641,     /* pgq_col_name_keyword  */
  YYSYMBOL_CreateDatabaseStmt = 642,       /* CreateDatabaseStmt  */
  YYSYMBOL_opt_extension_name = 643,       /* opt_extension_name  */
  YYSYMBOL_CreateFunctionStmt = 644,       /* CreateFunctionStmt  */
  YYSYMBOL_macro_alias = 645,              /* macro_alias  */
  YYSYMBOL_param_list = 646,               /* param_list  */
  YYSYMBOL_CreateSchemaStmt = 647,         /* CreateSchemaStmt  */
  YYSYMBOL_OptSchemaEltList = 648,         /* OptSchemaEltList  */
  YYSYMBOL_schema_stmt = 649,              /* schema_stmt  */
  YYSYMBOL_CreateSeqStmt = 650,            /* CreateSeqStmt  */
  YYSYMBOL_OptSeqOptList = 651,            /* OptSeqOptList  */
  YYSYMBOL_CreateTypeStmt = 652,           /* CreateTypeStmt  */
  YYSYMBOL_opt_enum_val_list = 653,        /* opt_enum_val_list  */
  YYSYMBOL_enum_val_list = 654,            /* enum_val_list  */
  YYSYMBOL_DeallocateStmt = 655,           /* DeallocateStmt  */
  YYSYMBOL_DeleteStmt = 656,               /* DeleteStmt  */
  YYSYMBOL_relation_expr_opt_alias = 657,  /* relation_expr_opt_alias  */
  YYSYMBOL_where_or_current_clause = 658,  /* where_or_current_clause  */
  YYSYMBOL_using_clause = 659,             /* using_clause  */
  YYSYMBOL_DropStmt = 660,                 /* DropStmt  */
  YYSYMBOL_drop_type_any_name = 661,       /* drop_type_any_name  */
  YYSYMBOL_drop_type_name = 662,           /* drop_type_name  */
  YYSYMBOL_any_name_list = 663,            /* any_name_list  */
  YYSYMBOL_opt_drop_behavior = 664,        /* opt_drop_behavior  */
  YYSYMBOL_drop_type_name_on_any_name = 665, /* drop_type_name_on_any_name  */
  YYSYMBOL_type_name_list = 666,           /* type_name_list  */
  YYSYMBOL_ExecuteStmt = 667,              /* ExecuteStmt  */
  YYSYMBOL_execute_param_clause = 668,     /* execute_param_clause  */
  YYSYMBOL_ExplainStmt = 669,              /* ExplainStmt  */
  YYSYMBOL_opt_verbose = 670,              /* opt_verbose  */
  YYSYMBOL_explain_option_arg = 671,       /* explain_option_arg  */
  YYSYMBOL_ExplainableStmt = 672,          /* ExplainableStmt  */
  YYSYMBOL_NonReservedWord = 673,          /* NonReservedWord  */
  YYSYMBOL_NonReservedWord_or_Sconst = 674, /* NonReservedWord_or_Sconst  */
  YYSYMBOL_explain_option_list = 675,      /* explain_option_list  */
  YYSYMBOL_analyze_keyword = 676,          /* analyze_keyword  */
  YYSYMBOL_opt_boolean_or_string = 677,    /* opt_boolean_or_string  */
  YYSYMBOL_explain_option_elem = 678,      /* explain_option_elem  */
  YYSYMBOL_explain_option_name = 679,      /* explain_option_name  */
  YYSYMBOL_ExportStmt = 680,               /* ExportStmt  */
  YYSYMBOL_ImportStmt = 681,               /* ImportStmt  */
  YYSYMBOL_IndexStmt = 682,                /* IndexStmt  */
  YYSYMBOL_access_method = 683,            /* access_method  */
  YYSYMBOL_access_method_clause = 684,     /* access_method_clause  */
  YYSYMBOL_opt_concurrently = 685,         /* opt_concurrently  */
  YYSYMBOL_opt_index_name = 686,           /* opt_index_name  */
  YYSYMBOL_opt_reloptions = 687,           /* opt_reloptions  */
  YYSYMBOL_opt_unique = 688,               /* opt_unique  */
  YYSYMBOL_InsertStmt = 689,               /* InsertStmt  */
  YYSYMBOL_insert_rest = 690,              /* insert_rest  */
  YYSYMBOL_insert_target = 691,            /* insert_target  */
  YYSYMBOL_opt_conf_expr = 692,            /* opt_conf_expr  */
  YYSYMBOL_opt_with_clause = 693,          /* opt_with_clause  */
  YYSYMBOL_insert_column_item = 694,       /* insert_column_item  */
  YYSYMBOL_set_clause = 695,               /* set_clause  */
  YYSYMBOL_opt_or_action = 696,            /* opt_or_action  */
  YYSYMBOL_opt_on_conflict = 697,          /* opt_on_conflict  */
  YYSYMBOL_index_elem = 698,               /* index_elem  */
  YYSYMBOL_returning_clause = 699,         /* returning_clause  */
  YYSYMBOL_override_kind = 700,            /* override_kind  */
  YYSYMBOL_set_target_list = 701,          /* set_target_list  */
  YYSYMBOL_opt_collate = 702,              /* opt_collate  */
  YYSYMBOL_opt_class = 703,                /* opt_class  */
  YYSYMBOL_insert_column_list = 704,       /* insert_column_list  */
  YYSYMBOL_set_clause_list = 705,          /* set_clause_list  */
  YYSYMBOL_set_clause_list_opt_comma = 706, /* set_clause_list_opt_comma  */
  YYSYMBOL_index_params = 707,             /* index_params  */
  YYSYMBOL_set_target = 708,               /* set_target  */
  YYSYMBOL_LoadStmt = 709,                 /* LoadStmt  */
  YYSYMBOL_file_name = 710,                /* file_name  */
  YYSYMBOL_PGQ_IDENT = 711,                /* PGQ_IDENT  */
  YYSYMBOL_DropPropertyGraphStmt = 712,    /* DropPropertyGraphStmt  */
  YYSYMBOL_VertexOrNode = 713,             /* VertexOrNode  */
  YYSYMBOL_EdgeOrRelationship = 714,       /* EdgeOrRelationship  */
  YYSYMBOL_CreatePropertyGraphStmt = 715,  /* CreatePropertyGraphStmt  */
  YYSYMBOL_VertexTableDefinitionList = 716, /* VertexTableDefinitionList  */
  YYSYMBOL_KeySpecification = 717,         /* KeySpecification  */
  YYSYMBOL_KeyDefinition = 718,            /* KeyDefinition  */
  YYSYMBOL_KeyReference = 719,             /* KeyReference  */
  YYSYMBOL_LabelList = 720,                /* LabelList  */
  YYSYMBOL_Discriminator = 721,            /* Discriminator  */
  YYSYMBOL_VertexTableDefinition = 722,    /* VertexTableDefinition  */
  YYSYMBOL_EdgeTableDefinitionList = 723,  /* EdgeTableDefinitionList  */
  YYSYMBOL_EdgeTableDefinition = 724,      /* EdgeTableDefinition  */
  YYSYMBOL_AreOptional = 725,              /* AreOptional  */
  YYSYMBOL_IdentOptionalAs = 726,          /* IdentOptionalAs  */
  YYSYMBOL_QualifiednameOptionalAs = 727,  /* QualifiednameOptionalAs  */
  YYSYMBOL_PropertiesList = 728,           /* PropertiesList  */
  YYSYMBOL_ExceptOptional = 729,           /* ExceptOptional  */
  YYSYMBOL_PropertiesSpec = 730,           /* PropertiesSpec  */
  YYSYMBOL_PropertiesClause = 731,         /* PropertiesClause  */
  YYSYMBOL_GraphTableWhereOptional = 732,  /* GraphTableWhereOptional  */
  YYSYMBOL_GraphTableStmt = 733,           /* GraphTableStmt  */
  YYSYMBOL_ColumnSpec = 734,               /* ColumnSpec  */
  YYSYMBOL_ColumnList = 735,               /* ColumnList  */
  YYSYMBOL_KeepOptional = 736,             /* KeepOptional  */
  YYSYMBOL_PathOrPathsOptional = 737,      /* PathOrPathsOptional  */
  YYSYMBOL_GroupOrGroupsOptional = 738,    /* GroupOrGroupsOptional  */
  YYSYMBOL_PathVariableOptional = 739,     /* PathVariableOptional  */
  YYSYMBOL_PathModeOptional = 740,         /* PathModeOptional  */
  YYSYMBOL_TopKOptional = 741,             /* TopKOptional  */
  YYSYMBOL_PathPrefix = 742,               /* PathPrefix  */
  YYSYMBOL_PathPatternList = 743,          /* PathPatternList  */
  YYSYMBOL_PathPattern = 744,              /* PathPattern  */
  YYSYMBOL_PatternUnion = 745,             /* PatternUnion  */
  YYSYMBOL_KleeneQuantifierOptional = 746, /* KleeneQuantifierOptional  */
  YYSYMBOL_KleeneOptional = 747,           /* KleeneOptional  */
  YYSYMBOL_CostNum = 748,                  /* CostNum  */
  YYSYMBOL_CostDefault = 749,              /* CostDefault  */
  YYSYMBOL_CostOptional = 750,             /* CostOptional  */
  YYSYMBOL_SubPath = 751,                  /* SubPath  */
  YYSYMBOL_EnclosedSubPath = 752,          /* EnclosedSubPath  */
  YYSYMBOL_PathElement = 753,              /* PathElement  */
  YYSYMBOL_PathSequence = 754,             /* PathSequence  */
  YYSYMBOL_PathConcatenation = 755,        /* PathConcatenation  */
  YYSYMBOL_OrLabelExpression = 756,        /* OrLabelExpression  */
  YYSYMBOL_AndLabelExpression = 757,       /* AndLabelExpression  */
  YYSYMBOL_ComposedLabelExpression = 758,  /* ComposedLabelExpression  */
  YYSYMBOL_LabelExpression = 759,          /* LabelExpression  */
  YYSYMBOL_LabelExpressionOptional = 760,  /* LabelExpressionOptional  */
  YYSYMBOL_IsOrColon = 761,                /* IsOrColon  */
  YYSYMBOL_ArrowRight = 762,               /* ArrowRight  */
  YYSYMBOL_ArrowLeftBracket = 763,         /* ArrowLeftBracket  */
  YYSYMBOL_AbbreviatedEdge = 764,          /* AbbreviatedEdge  */
  YYSYMBOL_VariableOptional = 765,         /* VariableOptional  */
  YYSYMBOL_FullElementSpec = 766,          /* FullElementSpec  */
  YYSYMBOL_EdgePattern = 767,              /* EdgePattern  */
  YYSYMBOL_VertexPattern = 768,            /* VertexPattern  */
  YYSYMBOL_pgq_expr = 769,                 /* pgq_expr  */
  YYSYMBOL_PragmaStmt = 770,               /* PragmaStmt  */
  YYSYMBOL_PrepareStmt = 771,              /* PrepareStmt  */
  YYSYMBOL_prep_type_clause = 772,         /* prep_type_clause  */
  YYSYMBOL_PreparableStmt = 773,           /* PreparableStmt  */
  YYSYMBOL_RenameStmt = 774,               /* RenameStmt  */
  YYSYMBOL_opt_column = 775,               /* opt_column  */
  YYSYMBOL_SelectStmt = 776,               /* SelectStmt  */
  YYSYMBOL_select_with_parens = 777,       /* select_with_parens  */
  YYSYMBOL_select_no_parens = 778,         /* select_no_parens  */
  YYSYMBOL_select_clause = 779,            /* select_clause  */
  YYSYMBOL_opt_select = 780,               /* opt_select  */
  YYSYMBOL_simple_select = 781,            /* simple_select  */
  YYSYMBOL_with_clause = 782,              /* with_clause  */
  YYSYMBOL_cte_list = 783,                 /* cte_list  */
  YYSYMBOL_common_table_expr = 784,        /* common_table_expr  */
  YYSYMBOL_into_clause = 785,              /* into_clause  */
  YYSYMBOL_OptTempTableName = 786,         /* OptTempTableName  */
  YYSYMBOL_opt_table = 787,                /* opt_table  */
  YYSYMBOL_all_or_distinct = 788,          /* all_or_distinct  */
  YYSYMBOL_by_name = 789,                  /* by_name  */
  YYSYMBOL_distinct_clause = 790,          /* distinct_clause  */
  YYSYMBOL_opt_all_clause = 791,           /* opt_all_clause  */
  YYSYMBOL_opt_ignore_nulls = 792,         /* opt_ignore_nulls  */
  YYSYMBOL_opt_sort_clause = 793,          /* opt_sort_clause  */
  YYSYMBOL_sort_clause = 794,              /* sort_clause  */
  YYSYMBOL_sortby_list = 795,              /* sortby_list  */
  YYSYMBOL_sortby = 796,                   /* sortby  */
  YYSYMBOL_opt_asc_desc = 797,             /* opt_asc_desc  */
  YYSYMBOL_opt_nulls_order = 798,          /* opt_nulls_order  */
  YYSYMBOL_select_limit = 799,             /* select_limit  */
  YYSYMBOL_opt_select_limit = 800,         /* opt_select_limit  */
  YYSYMBOL_limit_clause = 801,             /* limit_clause  */
  YYSYMBOL_offset_clause = 802,            /* offset_clause  */
  YYSYMBOL_sample_count = 803,             /* sample_count  */
  YYSYMBOL_sample_clause = 804,            /* sample_clause  */
  YYSYMBOL_opt_sample_func = 805,          /* opt_sample_func  */
  YYSYMBOL_tablesample_entry = 806,        /* tablesample_entry  */
  YYSYMBOL_tablesample_clause = 807,       /* tablesample_clause  */
  YYSYMBOL_opt_tablesample_clause = 808,   /* opt_tablesample_clause  */
  YYSYMBOL_opt_repeatable_clause = 809,    /* opt_repeatable_clause  */
  YYSYMBOL_select_limit_value = 810,       /* select_limit_value  */
  YYSYMBOL_select_offset_value = 811,      /* select_offset_value  */
  YYSYMBOL_select_fetch_first_value = 812, /* select_fetch_first_value  */
  YYSYMBOL_I_or_F_const = 813,             /* I_or_F_const  */
  YYSYMBOL_row_or_rows = 814,              /* row_or_rows  */
  YYSYMBOL_first_or_next = 815,            /* first_or_next  */
  YYSYMBOL_group_clause = 816,             /* group_clause  */
  YYSYMBOL_group_by_list = 817,            /* group_by_list  */
  YYSYMBOL_group_by_list_opt_comma = 818,  /* group_by_list_opt_comma  */
  YYSYMBOL_group_by_item = 819,            /* group_by_item  */
  YYSYMBOL_empty_grouping_set = 820,       /* empty_grouping_set  */
  YYSYMBOL_rollup_clause = 821,            /* rollup_clause  */
  YYSYMBOL_cube_clause = 822,              /* cube_clause  */
  YYSYMBOL_grouping_sets_clause = 823,     /* grouping_sets_clause  */
  YYSYMBOL_grouping_or_grouping_id = 824,  /* grouping_or_grouping_id  */
  YYSYMBOL_having_clause = 825,            /* having_clause  */
  YYSYMBOL_qualify_clause = 826,           /* qualify_clause  */
  YYSYMBOL_for_locking_clause = 827,       /* for_locking_clause  */
  YYSYMBOL_opt_for_locking_clause = 828,   /* opt_for_locking_clause  */
  YYSYMBOL_for_locking_items = 829,        /* for_locking_items  */
  YYSYMBOL_for_locking_item = 830,         /* for_locking_item  */
  YYSYMBOL_for_locking_strength = 831,     /* for_locking_strength  */
  YYSYMBOL_locked_rels_list = 832,         /* locked_rels_list  */
  YYSYMBOL_opt_nowait_or_skip = 833,       /* opt_nowait_or_skip  */
  YYSYMBOL_values_clause = 834,            /* values_clause  */
  YYSYMBOL_values_clause_opt_comma = 835,  /* values_clause_opt_comma  */
  YYSYMBOL_from_clause = 836,              /* from_clause  */
  YYSYMBOL_from_list = 837,                /* from_list  */
  YYSYMBOL_from_list_opt_comma = 838,      /* from_list_opt_comma  */
  YYSYMBOL_table_ref = 839,                /* table_ref  */
  YYSYMBOL_joined_table = 840,             /* joined_table  */
  YYSYMBOL_alias_clause = 841,             /* alias_clause  */
  YYSYMBOL_opt_alias_clause = 842,         /* opt_alias_clause  */
  YYSYMBOL_func_alias_clause = 843,        /* func_alias_clause  */
  YYSYMBOL_join_type = 844,                /* join_type  */
  YYSYMBOL_join_outer = 845,               /* join_outer  */
  YYSYMBOL_join_qual = 846,                /* join_qual  */
  YYSYMBOL_relation_expr = 847,            /* relation_expr  */
  YYSYMBOL_func_table = 848,               /* func_table  */
  YYSYMBOL_rowsfrom_item = 849,            /* rowsfrom_item  */
  YYSYMBOL_rowsfrom_list = 850,            /* rowsfrom_list  */
  YYSYMBOL_opt_col_def_list = 851,         /* opt_col_def_list  */
  YYSYMBOL_opt_ordinality = 852,           /* opt_ordinality  */
  YYSYMBOL_where_clause = 853,             /* where_clause  */
  YYSYMBOL_TableFuncElementList = 854,     /* TableFuncElementList  */
  YYSYMBOL_TableFuncElement = 855,         /* TableFuncElement  */
  YYSYMBOL_opt_collate_clause = 856,       /* opt_collate_clause  */
  YYSYMBOL_colid_type_list = 857,          /* colid_type_list  */
  YYSYMBOL_RowOrStruct = 858,              /* RowOrStruct  */
  YYSYMBOL_opt_Typename = 859,             /* opt_Typename  */
  YYSYMBOL_Typename = 860,                 /* Typename  */
  YYSYMBOL_opt_array_bounds = 861,         /* opt_array_bounds  */
  YYSYMBOL_SimpleTypename = 862,           /* SimpleTypename  */
  YYSYMBOL_ConstTypename = 863,            /* ConstTypename  */
  YYSYMBOL_GenericType = 864,              /* GenericType  */
  YYSYMBOL_opt_type_modifiers = 865,       /* opt_type_modifiers  */
  YYSYMBOL_Numeric = 866,                  /* Numeric  */
  YYSYMBOL_opt_float = 867,                /* opt_float  */
  YYSYMBOL_Bit = 868,                      /* Bit  */
  YYSYMBOL_ConstBit = 869,                 /* ConstBit  */
  YYSYMBOL_BitWithLength = 870,            /* BitWithLength  */
  YYSYMBOL_BitWithoutLength = 871,         /* BitWithoutLength  */
  YYSYMBOL_Character = 872,                /* Character  */
  YYSYMBOL_ConstCharacter = 873,           /* ConstCharacter  */
  YYSYMBOL_CharacterWithLength = 874,      /* CharacterWithLength  */
  YYSYMBOL_CharacterWithoutLength = 875,   /* CharacterWithoutLength  */
  YYSYMBOL_character = 876,                /* character  */
  YYSYMBOL_opt_varying = 877,              /* opt_varying  */
  YYSYMBOL_ConstDatetime = 878,            /* ConstDatetime  */
  YYSYMBOL_ConstInterval = 879,            /* ConstInterval  */
  YYSYMBOL_opt_timezone = 880,             /* opt_timezone  */
  YYSYMBOL_year_keyword = 881,             /* year_keyword  */
  YYSYMBOL_month_keyword = 882,            /* month_keyword  */
  YYSYMBOL_day_keyword = 883,              /* day_keyword  */
  YYSYMBOL_hour_keyword = 884,             /* hour_keyword  */
  YYSYMBOL_minute_keyword = 885,           /* minute_keyword  */
  YYSYMBOL_second_keyword = 886,           /* second_keyword  */
  YYSYMBOL_millisecond_keyword = 887,      /* millisecond_keyword  */
  YYSYMBOL_microsecond_keyword = 888,      /* microsecond_keyword  */
  YYSYMBOL_opt_interval = 889,             /* opt_interval  */
  YYSYMBOL_a_expr = 890,                   /* a_expr  */
  YYSYMBOL_b_expr = 891,                   /* b_expr  */
  YYSYMBOL_c_expr = 892,                   /* c_expr  */
  YYSYMBOL_indirection_expr = 893,         /* indirection_expr  */
  YYSYMBOL_func_application = 894,         /* func_application  */
  YYSYMBOL_func_expr = 895,                /* func_expr  */
  YYSYMBOL_func_expr_windowless = 896,     /* func_expr_windowless  */
  YYSYMBOL_func_expr_common_subexpr = 897, /* func_expr_common_subexpr  */
  YYSYMBOL_list_comprehension = 898,       /* list_comprehension  */
  YYSYMBOL_within_group_clause = 899,      /* within_group_clause  */
  YYSYMBOL_filter_clause = 900,            /* filter_clause  */
  YYSYMBOL_export_clause = 901,            /* export_clause  */
  YYSYMBOL_window_clause = 902,            /* window_clause  */
  YYSYMBOL_window_definition_list = 903,   /* window_definition_list  */
  YYSYMBOL_window_definition = 904,        /* window_definition  */
  YYSYMBOL_over_clause = 905,              /* over_clause  */
  YYSYMBOL_window_specification = 906,     /* window_specification  */
  YYSYMBOL_opt_existing_window_name = 907, /* opt_existing_window_name  */
  YYSYMBOL_opt_partition_clause = 908,     /* opt_partition_clause  */
  YYSYMBOL_opt_frame_clause = 909,         /* opt_frame_clause  */
  YYSYMBOL_frame_extent = 910,             /* frame_extent  */
  YYSYMBOL_frame_bound = 911,              /* frame_bound  */
  YYSYMBOL_qualified_row = 912,            /* qualified_row  */
  YYSYMBOL_row = 913,                      /* row  */
  YYSYMBOL_dict_arg = 914,                 /* dict_arg  */
  YYSYMBOL_dict_arguments = 915,           /* dict_arguments  */
  YYSYMBOL_dict_arguments_opt_comma = 916, /* dict_arguments_opt_comma  */
  YYSYMBOL_sub_type = 917,                 /* sub_type  */
  YYSYMBOL_all_Op = 918,                   /* all_Op  */
  YYSYMBOL_MathOp = 919,                   /* MathOp  */
  YYSYMBOL_qual_Op = 920,                  /* qual_Op  */
  YYSYMBOL_qual_all_Op = 921,              /* qual_all_Op  */
  YYSYMBOL_subquery_Op = 922,              /* subquery_Op  */
  YYSYMBOL_any_operator = 923,             /* any_operator  */
  YYSYMBOL_expr_list = 924,                /* expr_list  */
  YYSYMBOL_expr_list_opt_comma = 925,      /* expr_list_opt_comma  */
  YYSYMBOL_opt_expr_list_opt_comma = 926,  /* opt_expr_list_opt_comma  */
  YYSYMBOL_func_arg_list = 927,            /* func_arg_list  */
  YYSYMBOL_func_arg_expr = 928,            /* func_arg_expr  */
  YYSYMBOL_type_list = 929,                /* type_list  */
  YYSYMBOL_extract_list = 930,             /* extract_list  */
  YYSYMBOL_extract_arg = 931,              /* extract_arg  */
  YYSYMBOL_overlay_list = 932,             /* overlay_list  */
  YYSYMBOL_overlay_placing = 933,          /* overlay_placing  */
  YYSYMBOL_position_list = 934,            /* position_list  */
  YYSYMBOL_substr_list = 935,              /* substr_list  */
  YYSYMBOL_substr_from = 936,              /* substr_from  */
  YYSYMBOL_substr_for = 937,               /* substr_for  */
  YYSYMBOL_trim_list = 938,                /* trim_list  */
  YYSYMBOL_in_expr = 939,                  /* in_expr  */
  YYSYMBOL_case_expr = 940,                /* case_expr  */
  YYSYMBOL_when_clause_list = 941,         /* when_clause_list  */
  YYSYMBOL_when_clause = 942,              /* when_clause  */
  YYSYMBOL_case_default = 943,             /* case_default  */
  YYSYMBOL_case_arg = 944,                 /* case_arg  */
  YYSYMBOL_columnref = 945,                /* columnref  */
  YYSYMBOL_indirection_el = 946,           /* indirection_el  */
  YYSYMBOL_opt_slice_bound = 947,          /* opt_slice_bound  */
  YYSYMBOL_indirection = 948,              /* indirection  */
  YYSYMBOL_opt_indirection = 949,          /* opt_indirection  */
  YYSYMBOL_opt_asymmetric = 950,           /* opt_asymmetric  */
  YYSYMBOL_opt_target_list_opt_comma = 951, /* opt_target_list_opt_comma  */
  YYSYMBOL_target_list = 952,              /* target_list  */
  YYSYMBOL_target_list_opt_comma = 953,    /* target_list_opt_comma  */
  YYSYMBOL_target_el = 954,                /* target_el  */
  YYSYMBOL_except_list = 955,              /* except_list  */
  YYSYMBOL_opt_except_list = 956,          /* opt_except_list  */
  YYSYMBOL_replace_list_el = 957,          /* replace_list_el  */
  YYSYMBOL_replace_list = 958,             /* replace_list  */
  YYSYMBOL_replace_list_opt_comma = 959,   /* replace_list_opt_comma  */
  YYSYMBOL_opt_replace_list = 960,         /* opt_replace_list  */
  YYSYMBOL_qualified_name_list = 961,      /* qualified_name_list  */
  YYSYMBOL_qualified_name = 962,           /* qualified_name  */
  YYSYMBOL_name_list = 963,                /* name_list  */
  YYSYMBOL_name_list_opt_comma = 964,      /* name_list_opt_comma  */
  YYSYMBOL_name = 965,                     /* name  */
  YYSYMBOL_attr_name = 966,                /* attr_name  */
  YYSYMBOL_func_name = 967,                /* func_name  */
  YYSYMBOL_AexprConst = 968,               /* AexprConst  */
  YYSYMBOL_Iconst = 969,                   /* Iconst  */
  YYSYMBOL_Sconst = 970,                   /* Sconst  */
  YYSYMBOL_ColId = 971,                    /* ColId  */
  YYSYMBOL_ColIdOrString = 972,            /* ColIdOrString  */
  YYSYMBOL_type_function_name = 973,       /* type_function_name  */
  YYSYMBOL_function_name_token = 974,      /* function_name_token  */
  YYSYMBOL_type_name_token = 975,          /* type_name_token  */
  YYSYMBOL_any_name = 976,                 /* any_name  */
  YYSYMBOL_attrs = 977,                    /* attrs  */
  YYSYMBOL_opt_name_list = 978,            /* opt_name_list  */
  YYSYMBOL_param_name = 979,               /* param_name  */
  YYSYMBOL_ColLabel = 980,                 /* ColLabel  */
  YYSYMBOL_ColLabelOrString = 981,         /* ColLabelOrString  */
  YYSYMBOL_named_param = 982,              /* named_param  */
  YYSYMBOL_TransactionStmt = 983,          /* TransactionStmt  */
  YYSYMBOL_opt_transaction = 984,          /* opt_transaction  */
  YYSYMBOL_UpdateStmt = 985,               /* UpdateStmt  */
  YYSYMBOL_UseStmt = 986,                  /* UseStmt  */
  YYSYMBOL_VacuumStmt = 987,               /* VacuumStmt  */
  YYSYMBOL_vacuum_option_elem = 988,       /* vacuum_option_elem  */
  YYSYMBOL_opt_full = 989,                 /* opt_full  */
  YYSYMBOL_vacuum_option_list = 990,       /* vacuum_option_list  */
  YYSYMBOL_opt_freeze = 991,               /* opt_freeze  */
  YYSYMBOL_VariableResetStmt = 992,        /* VariableResetStmt  */
  YYSYMBOL_generic_reset = 993,            /* generic_reset  */
  YYSYMBOL_reset_rest = 994,               /* reset_rest  */
  YYSYMBOL_VariableSetStmt = 995,          /* VariableSetStmt  */
  YYSYMBOL_set_rest = 996,                 /* set_rest  */
  YYSYMBOL_generic_set = 997,              /* generic_set  */
  YYSYMBOL_var_value = 998,                /* var_value  */
  YYSYMBOL_zone_value = 999,               /* zone_value  */
  YYSYMBOL_var_list = 1000,                /* var_list  */
  YYSYMBOL_VariableShowStmt = 1001,        /* VariableShowStmt  */
  YYSYMBOL_show_or_describe = 1002,        /* show_or_describe  */
  YYSYMBOL_var_name = 1003,                /* var_name  */
  YYSYMBOL_table_id = 1004,                /* table_id  */
  YYSYMBOL_ViewStmt = 1005,                /* ViewStmt  */
  YYSYMBOL_opt_check_option = 1006         /* opt_check_option  */
};
typedef enum yysymbol_kind_t yysymbol_kind_t;




#ifdef short
# undef short
#endif

/* On compilers that do not define __PTRDIFF_MAX__ etc., make sure
   <limits.h> and (if available) <stdint.h> are included
   so that the code can choose integer types of a good width.  */

#ifndef __PTRDIFF_MAX__
# include <limits.h> /* INFRINGES ON USER NAME SPACE */
# if defined __STDC_VERSION__ && 199901 <= __STDC_VERSION__
#  include <stdint.h> /* INFRINGES ON USER NAME SPACE */
#  define YY_STDINT_H
# endif
#endif

/* Narrow types that promote to a signed type and that can represent a
   signed or unsigned integer of at least N bits.  In tables they can
   save space and decrease cache pressure.  Promoting to a signed type
   helps avoid bugs in integer arithmetic.  */

#ifdef __INT_LEAST8_MAX__
typedef __INT_LEAST8_TYPE__ yytype_int8;
#elif defined YY_STDINT_H
typedef int_least8_t yytype_int8;
#else
typedef signed char yytype_int8;
#endif

#ifdef __INT_LEAST16_MAX__
typedef __INT_LEAST16_TYPE__ yytype_int16;
#elif defined YY_STDINT_H
typedef int_least16_t yytype_int16;
#else
typedef short yytype_int16;
#endif

/* Work around bug in HP-UX 11.23, which defines these macros
   incorrectly for preprocessor constants.  This workaround can likely
   be removed in 2023, as HPE has promised support for HP-UX 11.23
   (aka HP-UX 11i v2) only through the end of 2022; see Table 2 of
   <https://h20195.www2.hpe.com/V2/getpdf.aspx/4AA4-7673ENW.pdf>.  */
#ifdef __hpux
# undef UINT_LEAST8_MAX
# undef UINT_LEAST16_MAX
# define UINT_LEAST8_MAX 255
# define UINT_LEAST16_MAX 65535
#endif

#if defined __UINT_LEAST8_MAX__ && __UINT_LEAST8_MAX__ <= __INT_MAX__
typedef __UINT_LEAST8_TYPE__ yytype_uint8;
#elif (!defined __UINT_LEAST8_MAX__ && defined YY_STDINT_H \
       && UINT_LEAST8_MAX <= INT_MAX)
typedef uint_least8_t yytype_uint8;
#elif !defined __UINT_LEAST8_MAX__ && UCHAR_MAX <= INT_MAX
typedef unsigned char yytype_uint8;
#else
typedef short yytype_uint8;
#endif

#if defined __UINT_LEAST16_MAX__ && __UINT_LEAST16_MAX__ <= __INT_MAX__
typedef __UINT_LEAST16_TYPE__ yytype_uint16;
#elif (!defined __UINT_LEAST16_MAX__ && defined YY_STDINT_H \
       && UINT_LEAST16_MAX <= INT_MAX)
typedef uint_least16_t yytype_uint16;
#elif !defined __UINT_LEAST16_MAX__ && USHRT_MAX <= INT_MAX
typedef unsigned short yytype_uint16;
#else
typedef int yytype_uint16;
#endif

#ifndef YYPTRDIFF_T
# if defined __PTRDIFF_TYPE__ && defined __PTRDIFF_MAX__
#  define YYPTRDIFF_T __PTRDIFF_TYPE__
#  define YYPTRDIFF_MAXIMUM __PTRDIFF_MAX__
# elif defined PTRDIFF_MAX
#  ifndef ptrdiff_t
#   include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  endif
#  define YYPTRDIFF_T ptrdiff_t
#  define YYPTRDIFF_MAXIMUM PTRDIFF_MAX
# else
#  define YYPTRDIFF_T long
#  define YYPTRDIFF_MAXIMUM LONG_MAX
# endif
#endif

#ifndef YYSIZE_T
# ifdef __SIZE_TYPE__
#  define YYSIZE_T __SIZE_TYPE__
# elif defined size_t
#  define YYSIZE_T size_t
# elif defined __STDC_VERSION__ && 199901 <= __STDC_VERSION__
#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  define YYSIZE_T size_t
# else
#  define YYSIZE_T unsigned
# endif
#endif

#define YYSIZE_MAXIMUM                                  \
  YY_CAST (YYPTRDIFF_T,                                 \
           (YYPTRDIFF_MAXIMUM < YY_CAST (YYSIZE_T, -1)  \
            ? YYPTRDIFF_MAXIMUM                         \
            : YY_CAST (YYSIZE_T, -1)))

#define YYSIZEOF(X) YY_CAST (YYPTRDIFF_T, sizeof (X))


/* Stored state numbers (used for stacks). */
typedef yytype_int16 yy_state_t;

/* State numbers in computations.  */
typedef int yy_state_fast_t;

#ifndef YY_
# if defined YYENABLE_NLS && YYENABLE_NLS
#  if ENABLE_NLS
#   include <libintl.h> /* INFRINGES ON USER NAME SPACE */
#   define YY_(Msgid) dgettext ("bison-runtime", Msgid)
#  endif
# endif
# ifndef YY_
#  define YY_(Msgid) Msgid
# endif
#endif


#ifndef YY_ATTRIBUTE_PURE
# if defined __GNUC__ && 2 < __GNUC__ + (96 <= __GNUC_MINOR__)
#  define YY_ATTRIBUTE_PURE __attribute__ ((__pure__))
# else
#  define YY_ATTRIBUTE_PURE
# endif
#endif

#ifndef YY_ATTRIBUTE_UNUSED
# if defined __GNUC__ && 2 < __GNUC__ + (7 <= __GNUC_MINOR__)
#  define YY_ATTRIBUTE_UNUSED __attribute__ ((__unused__))
# else
#  define YY_ATTRIBUTE_UNUSED
# endif
#endif

/* Suppress unused-variable warnings by "using" E.  */
#if ! defined lint || defined __GNUC__
# define YY_USE(E) ((void) (E))
#else
# define YY_USE(E) /* empty */
#endif

/* Suppress an incorrect diagnostic about yylval being uninitialized.  */
#if defined __GNUC__ && ! defined __ICC && 406 <= __GNUC__ * 100 + __GNUC_MINOR__
# if __GNUC__ * 100 + __GNUC_MINOR__ < 407
#  define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN                           \
    _Pragma ("GCC diagnostic push")                                     \
    _Pragma ("GCC diagnostic ignored \"-Wuninitialized\"")
# else
#  define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN                           \
    _Pragma ("GCC diagnostic push")                                     \
    _Pragma ("GCC diagnostic ignored \"-Wuninitialized\"")              \
    _Pragma ("GCC diagnostic ignored \"-Wmaybe-uninitialized\"")
# endif
# define YY_IGNORE_MAYBE_UNINITIALIZED_END      \
    _Pragma ("GCC diagnostic pop")
#else
# define YY_INITIAL_VALUE(Value) Value
#endif
#ifndef YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_END
#endif
#ifndef YY_INITIAL_VALUE
# define YY_INITIAL_VALUE(Value) /* Nothing. */
#endif

#if defined __cplusplus && defined __GNUC__ && ! defined __ICC && 6 <= __GNUC__
# define YY_IGNORE_USELESS_CAST_BEGIN                          \
    _Pragma ("GCC diagnostic push")                            \
    _Pragma ("GCC diagnostic ignored \"-Wuseless-cast\"")
# define YY_IGNORE_USELESS_CAST_END            \
    _Pragma ("GCC diagnostic pop")
#endif
#ifndef YY_IGNORE_USELESS_CAST_BEGIN
# define YY_IGNORE_USELESS_CAST_BEGIN
# define YY_IGNORE_USELESS_CAST_END
#endif


#define YY_ASSERT(E) ((void) (0 && (E)))

#if !defined yyoverflow

/* The parser invokes alloca or malloc; define the necessary symbols.  */

# ifdef YYSTACK_USE_ALLOCA
#  if YYSTACK_USE_ALLOCA
#   ifdef __GNUC__
#    define YYSTACK_ALLOC __builtin_alloca
#   elif defined __BUILTIN_VA_ARG_INCR
#    include <alloca.h> /* INFRINGES ON USER NAME SPACE */
#   elif defined _AIX
#    define YYSTACK_ALLOC __alloca
#   elif defined _MSC_VER
#    include <malloc.h> /* INFRINGES ON USER NAME SPACE */
#    define alloca _alloca
#   else
#    define YYSTACK_ALLOC alloca
#    if ! defined _ALLOCA_H && ! defined EXIT_SUCCESS
#     include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
      /* Use EXIT_SUCCESS as a witness for stdlib.h.  */
#     ifndef EXIT_SUCCESS
#      define EXIT_SUCCESS 0
#     endif
#    endif
#   endif
#  endif
# endif

# ifdef YYSTACK_ALLOC
   /* Pacify GCC's 'empty if-body' warning.  */
#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (0)
#  ifndef YYSTACK_ALLOC_MAXIMUM
    /* The OS might guarantee only one guard page at the bottom of the stack,
       and a page size can be as small as 4096 bytes.  So we cannot safely
       invoke alloca (N) if N exceeds 4096.  Use a slightly smaller number
       to allow for a few compiler-allocated temporary stack slots.  */
#   define YYSTACK_ALLOC_MAXIMUM 4032 /* reasonable circa 2006 */
#  endif
# else
#  define YYSTACK_ALLOC YYMALLOC
#  define YYSTACK_FREE YYFREE
#  ifndef YYSTACK_ALLOC_MAXIMUM
#   define YYSTACK_ALLOC_MAXIMUM YYSIZE_MAXIMUM
#  endif
#  if (defined __cplusplus && ! defined EXIT_SUCCESS \
       && ! ((defined YYMALLOC || defined malloc) \
             && (defined YYFREE || defined free)))
#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#   ifndef EXIT_SUCCESS
#    define EXIT_SUCCESS 0
#   endif
#  endif
#  ifndef YYMALLOC
#   define YYMALLOC malloc
#   if ! defined malloc && ! defined EXIT_SUCCESS
void *malloc (YYSIZE_T); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
#  ifndef YYFREE
#   define YYFREE free
#   if ! defined free && ! defined EXIT_SUCCESS
void free (void *); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
# endif
#endif /* !defined yyoverflow */

#if (! defined yyoverflow \
     && (! defined __cplusplus \
         || (defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL \
             && defined YYSTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))

/* A type that is properly aligned for any stack member.  */
union yyalloc
{
  yy_state_t yyss_alloc;
  YYSTYPE yyvs_alloc;
  YYLTYPE yyls_alloc;
};

/* The size of the maximum gap between one aligned stack and the next.  */
# define YYSTACK_GAP_MAXIMUM (YYSIZEOF (union yyalloc) - 1)

/* The size of an array large to enough to hold all stacks, each with
   N elements.  */
# define YYSTACK_BYTES(N) \
     ((N) * (YYSIZEOF (yy_state_t) + YYSIZEOF (YYSTYPE) \
             + YYSIZEOF (YYLTYPE)) \
      + 2 * YYSTACK_GAP_MAXIMUM)

# define YYCOPY_NEEDED 1

/* Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */
# define YYSTACK_RELOCATE(Stack_alloc, Stack)                           \
    do                                                                  \
      {                                                                 \
        YYPTRDIFF_T yynewbytes;                                         \
        YYCOPY (&yyptr->Stack_alloc, Stack, yysize);                    \
        Stack = &yyptr->Stack_alloc;                                    \
        yynewbytes = yystacksize * YYSIZEOF (*Stack) + YYSTACK_GAP_MAXIMUM; \
        yyptr += yynewbytes / YYSIZEOF (*yyptr);                        \
      }                                                                 \
    while (0)

#endif

#if defined YYCOPY_NEEDED && YYCOPY_NEEDED
/* Copy COUNT objects from SRC to DST.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if defined __GNUC__ && 1 < __GNUC__
#   define YYCOPY(Dst, Src, Count) \
      __builtin_memcpy (Dst, Src, YY_CAST (YYSIZE_T, (Count)) * sizeof (*(Src)))
#  else
#   define YYCOPY(Dst, Src, Count)              \
      do                                        \
        {                                       \
          YYPTRDIFF_T yyi;                      \
          for (yyi = 0; yyi < (Count); yyi++)   \
            (Dst)[yyi] = (Src)[yyi];            \
        }                                       \
      while (0)
#  endif
# endif
#endif /* !YYCOPY_NEEDED */

/* YYFINAL -- State number of the termination state.  */
#define YYFINAL  755
/* YYLAST -- Last index in YYTABLE.  */
#define YYLAST   67852

/* YYNTOKENS -- Number of terminals.  */
#define YYNTOKENS  535
/* YYNNTS -- Number of nonterminals.  */
#define YYNNTS  472
/* YYNRULES -- Number of rules.  */
#define YYNRULES  2220
/* YYNSTATES -- Number of states.  */
#define YYNSTATES  3686

/* YYMAXUTOK -- Last valid token kind.  */
#define YYMAXUTOK   764


/* YYTRANSLATE(TOKEN-NUM) -- Symbol number corresponding to TOKEN-NUM
   as returned by yylex, with out-of-bounds checking.  */
#define YYTRANSLATE(YYX)                                \
  (0 <= (YYX) && (YYX) <= YYMAXUTOK                     \
   ? YY_CAST (yysymbol_kind_t, yytranslate[YYX])        \
   : YYSYMBOL_YYUNDEF)

/* YYTRANSLATE[TOKEN-NUM] -- Symbol number corresponding to TOKEN-NUM
   as returned by yylex.  */
static const yytype_int16 yytranslate[] =
{
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   531,     2,   533,   534,   516,   530,     2,
     521,   522,   514,   512,   525,   513,   523,   515,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,   532,   524,
     508,   510,   509,   527,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,   519,     2,   520,   517,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   528,   526,   529,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
     125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
     135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,   163,   164,
     165,   166,   167,   168,   169,   170,   171,   172,   173,   174,
     175,   176,   177,   178,   179,   180,   181,   182,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,   196,   197,   198,   199,   200,   201,   202,   203,   204,
     205,   206,   207,   208,   209,   210,   211,   212,   213,   214,
     215,   216,   217,   218,   219,   220,   221,   222,   223,   224,
     225,   226,   227,   228,   229,   230,   231,   232,   233,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   511,   518
};

#if YYDEBUG
/* YYRLINE[YYN] -- Source line where rule number YYN was defined.  */
static const yytype_int16 yyrline[] =
{
       0,   541,   541,   557,   569,   578,   579,   580,   581,   582,
     583,   584,   585,   586,   587,   588,   589,   590,   591,   592,
     593,   594,   595,   596,   597,   598,   599,   600,   601,   602,
     603,   604,   605,   606,   607,   608,   609,   610,   611,   612,
     613,   614,   615,   616,   617,   618,   620,     9,    18,    27,
      36,    45,    54,    63,    72,    85,    87,    93,    94,    99,
     103,   107,   118,   126,   130,   139,   148,   157,   166,   175,
     184,   192,   200,   209,   218,   227,   236,   253,   262,   271,
     280,   290,   303,   318,   327,   335,   350,   358,   368,   378,
     385,   392,   400,   407,   418,   419,   424,   428,   433,   438,
     446,   447,   452,   456,   457,   458,     7,    13,    19,    25,
       6,    15,    25,    35,    45,    55,    65,    75,    85,    95,
     106,   117,   127,   140,   141,     9,    23,    29,    36,    42,
      49,    59,    63,    72,    81,    90,    97,    98,   103,   115,
     120,   145,   150,   155,   161,   171,   181,   187,   198,   209,
     224,   225,   231,   232,   237,   238,   244,   245,   249,   250,
     255,   257,   263,   264,   268,   269,   272,   273,   278,     7,
      16,    25,    46,    47,    50,    54,     7,    14,    22,     9,
      15,    22,    28,    34,    41,    48,    59,     9,    19,    32,
      33,     7,    14,    31,    51,    52,     9,    17,    29,    30,
      34,    35,    36,    41,    42,    43,    48,    52,    56,    60,
      64,    68,    72,    76,    80,    84,    88,    92,    97,   101,
     105,   112,   113,   117,   118,   119,     2,     9,    15,    21,
      28,    35,    45,    46,    47,     2,    40,    41,    42,    50,
      64,    66,    70,    72,    76,    89,    92,    96,   100,   104,
     108,   109,   113,   122,   132,   146,   149,   153,   176,   177,
     182,   184,   188,   190,   194,   196,   201,   204,   208,   214,
     218,   220,   223,   232,   234,   238,   264,   268,   270,   274,
     276,   280,   280,   280,   284,   286,   288,   292,   294,   298,
     300,   302,   304,   306,   310,   312,   316,   328,   340,   352,
     364,   377,   391,   393,   398,   423,   425,   429,   431,   436,
     445,   454,   463,   473,   483,   485,   489,   491,   495,   506,
     515,   527,   536,   538,   542,   565,   567,   571,   573,   584,
     586,   597,   599,   610,   612,   621,   632,   640,   649,   653,
     655,   659,   661,   667,   669,   671,   675,   677,   681,   687,
     695,   697,   701,   712,   728,   755,   788,   789,   791,   799,
     814,   816,   818,   820,   822,   824,   826,   828,   830,   832,
     834,   836,   838,   840,   842,   845,   847,   849,   851,   853,
     855,   860,   865,   872,   877,   884,   889,   896,   901,   909,
     917,   925,   933,   951,   959,   967,   975,   983,   991,   999,
    1003,  1019,  1027,  1035,  1043,  1051,  1059,  1067,  1071,  1075,
    1079,  1083,  1091,  1099,  1107,  1115,  1135,     7,    21,    36,
      56,    57,    84,    85,    86,    87,    88,    89,    93,    94,
      99,   104,   105,   106,   107,   108,   113,   120,   121,   122,
     139,   146,   153,   163,   173,   185,   193,   202,   220,   221,
     225,   226,   230,   239,   262,   276,   283,   288,   290,   292,
     294,   297,   300,   301,   302,   303,   308,   312,   313,   318,
     325,   330,   331,   332,   333,   334,   335,   336,   337,   343,
     344,   348,   353,   360,   367,   374,   386,   387,   388,   389,
     393,   398,   399,   400,   405,   410,   411,   412,   413,   414,
     415,   420,   440,   469,   470,   474,   478,   479,   480,   484,
     488,   496,   497,   502,   503,   504,   508,   516,   517,   522,
     523,   527,   532,   536,   540,   545,   553,   554,   558,   559,
     563,   564,   570,   581,   594,   608,   622,   636,   650,   673,
     677,   684,   688,   696,   701,   708,   718,   719,   720,   721,
     722,   729,   736,   737,   742,   743,     9,    19,    29,    39,
      49,    59,    69,    79,    93,    94,    95,    96,    97,    98,
      99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   115,   116,   117,   118,   119,   120,   125,   126,
     131,   132,   133,   138,   139,   140,   143,   144,     8,    20,
      33,    46,    58,    70,    86,    87,    91,    95,     7,     1,
      30,    53,    54,    59,    63,    68,    72,    80,    81,    85,
      86,    91,    92,    96,    97,   102,   103,   104,   105,   106,
     111,   119,   123,   128,   129,   134,   138,   143,   147,   151,
     155,   159,   163,   167,   171,   175,   179,   183,   187,   191,
     195,   199,   203,   211,   217,   218,   219,   224,   228,    47,
      48,    52,    53,    68,    69,    76,    84,    92,   100,   108,
     116,   127,   128,   155,   160,   168,   184,   201,   218,   235,
     236,   255,   259,   263,   267,   284,   291,   298,   308,   309,
     312,   324,   335,   343,   348,   353,   358,   363,   371,   379,
     384,   389,   396,   397,   401,   402,   403,   407,   414,   415,
     419,   420,   424,   425,   426,   430,   431,   435,   436,   446,
     459,   460,   463,   472,   483,   484,   485,   488,   489,   490,
     494,   495,   496,   497,   501,   502,   506,   508,   524,   526,
     531,   534,   542,   546,   550,   554,   558,   562,   569,   574,
     581,   582,   586,   591,   595,   599,   607,   614,   615,   620,
     621,   625,   626,   631,   633,   635,   640,   660,   661,   663,
     668,   669,   673,   674,   677,   678,   703,   704,   709,   714,
     718,   719,   723,   724,   728,   729,   730,   731,   732,   736,
     749,   756,   763,   770,   771,   775,   776,   780,   781,   785,
     786,   790,   791,   795,   796,   800,   811,   812,   813,   814,
     818,   819,   824,   825,   826,   835,   841,   850,   851,   864,
     865,   869,   870,   874,   875,   881,   887,   895,   904,   912,
     921,   930,   934,   939,   965,   969,   982,   996,  1011,  1023,
    1036,  1052,  1058,  1063,  1069,  1076,  1077,  1085,  1089,  1093,
    1099,  1106,  1111,  1112,  1113,  1114,  1118,  1119,  1131,  1132,
    1137,  1144,  1151,  1158,  1190,  1201,  1214,  1219,  1220,  1223,
    1224,  1227,  1228,  1233,  1234,  1239,  1243,  1249,  1270,  1278,
    1291,  1294,  1298,  1298,  1301,  1302,  1304,  1309,  1316,  1321,
    1327,  1332,  1338,  1344,  1350,  1359,  1361,  1364,  1368,  1369,
    1370,  1371,  1372,  1373,  1378,  1398,  1399,  1400,  1401,  1412,
    1426,  1427,  1433,  1438,  1443,  1448,  1453,  1458,  1463,  1468,
    1474,  1480,  1486,  1493,  1515,  1524,  1528,  1536,  1540,  1548,
    1560,  1581,  1585,  1591,  1595,  1608,  1616,  1626,  1628,  1630,
    1632,  1634,  1636,  1641,  1642,  1649,  1658,  1666,  1675,  1686,
    1694,  1695,  1696,  1700,  1700,  1703,  1703,  1706,  1706,  1709,
    1709,  1712,  1712,  1715,  1715,  1718,  1718,  1721,  1721,  1724,
    1726,  1728,  1730,  1732,  1734,  1736,  1738,  1740,  1745,  1750,
    1756,  1763,  1768,  1774,  1780,  1811,  1813,  1815,  1823,  1838,
    1840,  1842,  1844,  1846,  1848,  1850,  1852,  1854,  1856,  1858,
    1860,  1862,  1864,  1866,  1869,  1871,  1873,  1876,  1878,  1880,
    1882,  1884,  1889,  1894,  1901,  1906,  1913,  1918,  1925,  1930,
    1938,  1946,  1954,  1962,  1980,  1988,  1996,  2004,  2012,  2020,
    2028,  2032,  2048,  2056,  2064,  2072,  2080,  2088,  2096,  2100,
    2104,  2108,  2112,  2120,  2128,  2136,  2144,  2164,  2186,  2197,
    2204,  2218,  2227,  2246,  2248,  2250,  2252,  2254,  2256,  2258,
    2260,  2262,  2264,  2266,  2268,  2270,  2272,  2274,  2276,  2278,
    2280,  2282,  2284,  2286,  2290,  2294,  2298,  2312,  2313,  2314,
    2321,  2333,  2337,  2341,  2345,  2348,  2359,  2364,  2366,  2377,
    2401,  2412,  2423,  2427,  2434,  2438,  2443,  2448,  2452,  2459,
    2467,  2475,  2486,  2494,  2522,  2558,  2569,  2570,  2577,  2583,
    2587,  2591,  2595,  2599,  2603,  2607,  2611,  2615,  2619,  2623,
    2627,  2631,  2635,  2639,  2643,  2645,  2647,  2651,  2660,  2665,
    2672,  2687,  2694,  2698,  2702,  2706,  2710,  2720,  2729,  2751,
    2752,  2756,  2757,  2758,  2762,  2763,  2770,  2771,  2775,  2776,
    2781,  2789,  2791,  2805,  2808,  2835,  2836,  2839,  2840,  2851,
    2857,  2864,  2873,  2890,  2935,  2943,  2951,  2959,  2967,  2988,
    2989,  2992,  2993,  2997,  3007,  3008,  3012,  3013,  3017,  3018,
    3019,  3022,  3023,  3026,  3027,  3028,  3029,  3030,  3031,  3032,
    3033,  3034,  3035,  3036,  3037,  3038,  3041,  3043,  3048,  3050,
    3055,  3057,  3059,  3061,  3063,  3065,  3067,  3069,  3083,  3085,
    3089,  3093,  3100,  3105,  3112,  3117,  3125,  3129,  3135,  3139,
    3148,  3159,  3160,  3164,  3168,  3175,  3176,  3177,  3178,  3179,
    3180,  3181,  3182,  3183,  3184,  3194,  3198,  3205,  3212,  3213,
    3229,  3233,  3238,  3242,  3257,  3262,  3266,  3269,  3272,  3273,
    3274,  3277,  3284,  3294,  3308,  3309,  3313,  3324,  3325,  3328,
    3329,  3332,  3336,  3343,  3347,  3355,  3366,  3367,  3371,  3372,
    3376,  3377,  3380,  3381,  3391,  3392,  3396,  3397,  3401,  3402,
    3405,  3421,  3429,  3437,  3452,  3470,  3471,  3474,  3475,  3478,
    3482,  3483,  3487,  3488,  3491,  3492,  3493,  3503,  3504,  3515,
    3519,  3547,  3549,  3555,  3556,  3559,  3561,  3571,  3574,  3585,
    3589,  3593,  3605,  3609,  3618,  3625,  3663,  3667,  3671,  3675,
    3679,  3683,  3687,  3693,  3694,  3710,  3711,  3712,  3715,  3716,
    3722,  3723,  3724,  3727,  3728,  3729,  3732,  3733,  3734,  3737,
    3738,  3741,  3743,  3748,  3749,  3752,  3760,  3761,  3762,  3763,
    3766,  3767,  3770,     7,    18,    19,    23,    24,    25,    26,
       7,    26,    54,    61,    66,    67,    68,    69,     8,    33,
      62,    66,    67,    72,    73,    78,    79,    83,    84,    89,
      90,     7,    16,    25,    34,    43,    52,     5,    12,    22,
      23,     7,    19,    33,     9,    16,    26,    33,    44,    45,
      50,    51,    52,    57,    58,    59,    60,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
      74,    75,    76,    77,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    90,    91,    92,    97,    98,   103,   107,
     115,   116,   121,   122,   123,   129,   134,   142,   143,    10,
      16,    22,    28,    38,    39,    47,    58,    70,    78,    86,
      93,   103,   105,   111,   115,   119,   134,   141,   142,   143,
     147,   148,     7,    14,    20,    28,    29,     8,    22,    36,
      48,    56,    70,    71,    72,    73,    74,    87,    88,    93,
      94,    98,    99,     7,    18,    31,    35,    42,    53,    54,
      60,    61,     9,    19,     7,    18,    25,    34,    35,    39,
      40,     2,     7,    15,    26,    27,    34,     3,    10,    17,
      24,    31,    38,    45,    52,    61,    61,    63,    64,    68,
      69,     6,     8,    21,    34,    47,    65,    87,    88,    89,
      90,    11,    24,    37,    54,    55,    56,    61,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    75,    75,    75,    75,    75,    75,    75,
      75,    75,    75,    75,    75,    75,    75,    75,    75,    75,
      75,    75,    75,    75,    75,    75,    75,    75,    75,    75,
      75,    75,    75,    75,    75,    75,    75,    75,    75,    75,
      75,    75,    75,    75,    75,    75,    75,    75,    75,    75,
      75,    75,    75,    75,    75,    75,    75,    76,    76,    76,
      76,    76,    76,    76,    76,    76,    76,    76,    76,    76,
      76,    76,    76,    76,    76,    76,    76,    76,    76,    76,
      76,    76,    76,    76,    76,    76,    76,    76,    76,    76,
      76,    77,    77,    77,    77,    77,    77,    77,    77,    77,
      77,    77,    77,    77,    77,    77,    77,    77,    77,    77,
      77,    77,    77,    77,    77,    77,    77,    77,    77,    77,
      77,    77,    77,    77,    78,    78,    78,    78,    78,    78,
      78,    78,    78,    78,    78,    78,    78,    78,    78,    78,
      78,    78,    78,    78,    78,    78,    78,    78,    78,    78,
      78,    78,    78,    78,    78,    78,    78,    78,    78,    78,
      78,    78,    78,    78,    78,    78,    78,    78,    78,    78,
      78,    78,    78,    78,    78,    78,    78,    78,    78,    78,
      78,    78,    78,    78,    78,    78,    78,    78,    78,    78,
      78,    78,    78,    78,    78,    78,    78,    78,    78,    78,
      78,    78,    78,    78,    78,    78,    78,    78,    78,    79,
      79,    79,    79,    79,    79,    79,    79,    79,    79,    79,
      79,    79,    79,    79,    79,    79,    79,    79,    79,    79,
      79,    79,    79,    79,    79,    79,    79,    79,    79,    79,
      79,    79,    79,    79,    79,    80,    80,    80,    80,    80,
      80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
      80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
      80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
      80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
      80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
      80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
      80,    80,    80,    80,    80,    80,    80,    80,    82,    82,
      82,    82,    82,    82,    82,    82,    82,    82,    82,    82,
      82,    82,    82,    82,    82,    82,    82,    82,    82,    82,
      82,    82,    82,    82,    82,    82,    82,    82,    82,    82,
      82,    82,    82,    82,    82,    82,    82,    82,    82,    82,
      82,    82,    82,    82,    82,    82,    82,    82,    82,    82,
      82
};
#endif

/** Accessing symbol of state STATE.  */
#define YY_ACCESSING_SYMBOL(State) YY_CAST (yysymbol_kind_t, yystos[State])

#if YYDEBUG || 0
/* The user-facing name of the symbol whose (internal) number is
   YYSYMBOL.  No bounds checking.  */
static const char *yysymbol_name (yysymbol_kind_t yysymbol) YY_ATTRIBUTE_UNUSED;

/* YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
   First, the terminals, then, starting at YYNTOKENS, nonterminals.  */
static const char *const yytname[] =
{
  "\"end of file\"", "error", "\"invalid token\"", "IDENT", "FCONST",
  "SCONST", "BCONST", "XCONST", "Op", "ICONST", "PARAM", "TYPECAST",
  "DOT_DOT", "COLON_EQUALS", "EQUALS_GREATER", "POWER_OF", "LAMBDA_ARROW",
  "DOUBLE_ARROW", "LESS_EQUALS", "GREATER_EQUALS", "NOT_EQUALS", "ABORT_P",
  "ABSOLUTE_P", "ACCESS", "ACTION", "ACYCLIC", "ADD_P", "ADMIN", "AFTER",
  "AGGREGATE", "ALL", "ALSO", "ALTER", "ALWAYS", "ANALYSE", "ANALYZE",
  "AND", "ANY", "ARE", "ARRAY", "AS", "ASC_P", "ASSERTION", "ASSIGNMENT",
  "ASYMMETRIC", "AT", "ATTACH", "ATTRIBUTE", "AUTHORIZATION", "BACKWARD",
  "BEFORE", "BEGIN_P", "BETWEEN", "BIGINT", "BINARY", "BIT", "BOOLEAN_P",
  "BOTH", "BY", "CACHE", "CALL_P", "CALLED", "CASCADE", "CASCADED", "CASE",
  "CAST", "CATALOG_P", "CHAIN", "CHAR_P", "CHARACTER", "CHARACTERISTICS",
  "CHECK_P", "CHECKPOINT", "CLASS", "CLOSE", "CLUSTER", "COALESCE",
  "COLLATE", "COLLATION", "COLUMN", "COLUMNS", "COMMENT", "COMMENTS",
  "COMMIT", "COMMITTED", "COMPRESSION", "CONCURRENTLY", "CONFIGURATION",
  "CONFLICT", "CONNECTION", "CONSTRAINT", "CONSTRAINTS", "CONTENT_P",
  "CONTINUE_P", "CONVERSION_P", "COPY", "COST", "CREATE_P", "CROSS", "CSV",
  "CUBE", "CURRENT_P", "CURRENT_CATALOG", "CURRENT_DATE", "CURRENT_ROLE",
  "CURRENT_SCHEMA", "CURRENT_TIME", "CURRENT_TIMESTAMP", "CURRENT_USER",
  "CURSOR", "CYCLE", "DATA_P", "DATABASE", "DAY_P", "DAYS_P", "DEALLOCATE",
  "DEC", "DECIMAL_P", "DECLARE", "DEFAULT", "DEFAULTS", "DEFERRABLE",
  "DEFERRED", "DEFINER", "DELETE_P", "DELIMITER", "DELIMITERS", "DEPENDS",
  "DESC_P", "DESCRIBE", "DESTINATION", "DETACH", "DICTIONARY", "DISABLE_P",
  "DISCARD", "DISTINCT", "DO", "DOCUMENT_P", "DOMAIN_P", "DOUBLE_P",
  "DROP", "EACH", "EDGE", "ELEMENT_ID", "ELSE", "ENABLE_P", "ENCODING",
  "ENCRYPTED", "END_P", "ENUM_P", "ESCAPE", "EVENT", "EXCEPT", "EXCLUDE",
  "EXCLUDING", "EXCLUSIVE", "EXECUTE", "EXISTS", "EXPLAIN", "EXPORT_P",
  "EXPORT_STATE", "EXTENSION", "EXTERNAL", "EXTRACT", "FALSE_P", "FAMILY",
  "FETCH", "FILTER", "FIRST_P", "FLOAT_P", "FOLLOWING", "FOR", "FORCE",
  "FOREIGN", "FORWARD", "FREEZE", "FROM", "FULL", "FUNCTION", "FUNCTIONS",
  "GENERATED", "GLOB", "GLOBAL", "GRANT", "GRANTED", "GRAPH",
  "GRAPH_TABLE", "GROUP_P", "GROUPING", "GROUPING_ID", "GROUPS", "HANDLER",
  "HAVING", "HEADER_P", "HOLD", "HOUR_P", "HOURS_P", "IDENTITY_P", "IF_P",
  "IGNORE_P", "ILIKE", "IMMEDIATE", "IMMUTABLE", "IMPLICIT_P", "IMPORT_P",
  "IN_P", "INCLUDING", "INCREMENT", "INDEX", "INDEXES", "INHERIT",
  "INHERITS", "INITIALLY", "INLINE_P", "INNER_P", "INOUT", "INPUT_P",
  "INSENSITIVE", "INSERT", "INSTALL", "INSTEAD", "INT_P", "INTEGER",
  "INTERSECT", "INTERVAL", "INTO", "INVOKER", "IS", "ISNULL", "ISOLATION",
  "JOIN", "JSON", "KEEP", "KEY", "LABEL", "LANGUAGE", "LARGE_P", "LAST_P",
  "LATERAL_P", "LEADING", "LEAKPROOF", "LEFT", "LEVEL", "LIKE", "LIMIT",
  "LISTEN", "LOAD", "LOCAL", "LOCALTIME", "LOCALTIMESTAMP", "LOCATION",
  "LOCK_P", "LOCKED", "LOGGED", "MACRO", "MAP", "MAPPING", "MATCH",
  "MATERIALIZED", "MAXVALUE", "METHOD", "MICROSECOND_P", "MICROSECONDS_P",
  "MILLISECOND_P", "MILLISECONDS_P", "MINUTE_P", "MINUTES_P", "MINVALUE",
  "MODE", "MONTH_P", "MONTHS_P", "MOVE", "NAME_P", "NAMES", "NATIONAL",
  "NATURAL", "NCHAR", "NEW", "NEXT", "NO", "NODE", "NONE", "NOT",
  "NOTHING", "NOTIFY", "NOTNULL", "NOWAIT", "NULL_P", "NULLIF", "NULLS_P",
  "NUMERIC", "OBJECT_P", "OF", "OFF", "OFFSET", "OIDS", "OLD", "ON",
  "ONLY", "OPERATOR", "OPTION", "OPTIONS", "OR", "ORDER", "ORDINALITY",
  "OUT_P", "OUTER_P", "OVER", "OVERLAPS", "OVERLAY", "OVERRIDING", "OWNED",
  "OWNER", "PARALLEL", "PARSER", "PARTIAL", "PARTITION", "PASSING",
  "PASSWORD", "PATH", "PATHS", "PERCENT", "PLACING", "PLANS", "POLICY",
  "POSITION", "POSITIONAL", "PRAGMA_P", "PRECEDING", "PRECISION",
  "PREPARE", "PREPARED", "PRESERVE", "PRIMARY", "PRIOR", "PRIVILEGES",
  "PROCEDURAL", "PROCEDURE", "PROGRAM", "PROPERTIES", "PROPERTY",
  "PUBLICATION", "QUALIFY", "QUOTE", "RANGE", "READ_P", "REAL", "REASSIGN",
  "RECHECK", "RECURSIVE", "REF", "REFERENCES", "REFERENCING", "REFRESH",
  "REINDEX", "RELATIONSHIP", "RELATIVE_P", "RELEASE", "RENAME",
  "REPEATABLE", "REPLACE", "REPLICA", "RESET", "RESPECT_P", "RESTART",
  "RESTRICT", "RETURNING", "RETURNS", "REVOKE", "RIGHT", "ROLE",
  "ROLLBACK", "ROLLUP", "ROW", "ROWS", "RULE", "SAMPLE", "SAVEPOINT",
  "SCHEMA", "SCHEMAS", "SCROLL", "SEARCH", "SECOND_P", "SECONDS_P",
  "SECURITY", "SELECT", "SEQUENCE", "SEQUENCES", "SERIALIZABLE", "SERVER",
  "SESSION", "SESSION_USER", "SET", "SETOF", "SETS", "SHARE", "SHORTEST",
  "SHOW", "SIMILAR", "SIMPLE", "SKIP", "SMALLINT", "SNAPSHOT", "SOME",
  "SOURCE", "SQL_P", "STABLE", "STANDALONE_P", "START", "STATEMENT",
  "STATISTICS", "STDIN", "STDOUT", "STORAGE", "STORED", "STRICT_P",
  "STRIP_P", "STRUCT", "SUBSCRIPTION", "SUBSTRING", "SUMMARIZE",
  "SYMMETRIC", "SYSID", "SYSTEM_P", "TABLE", "TABLES", "TABLESAMPLE",
  "TABLESPACE", "TEMP", "TEMPLATE", "TEMPORARY", "TEXT_P", "THEN", "TIME",
  "TIMESTAMP", "TO", "TRAIL", "TRAILING", "TRANSACTION", "TRANSFORM",
  "TREAT", "TRIGGER", "TRIM", "TRUE_P", "TRUNCATE", "TRUSTED", "TRY_CAST",
  "TYPE_P", "TYPES_P", "UNBOUNDED", "UNCOMMITTED", "UNENCRYPTED", "UNION",
  "UNIQUE", "UNKNOWN", "UNLISTEN", "UNLOGGED", "UNTIL", "UPDATE", "USE_P",
  "USER", "USING", "VACUUM", "VALID", "VALIDATE", "VALIDATOR", "VALUE_P",
  "VALUES", "VARCHAR", "VARIADIC", "VARYING", "VERBOSE", "VERSION_P",
  "VERTEX", "VIEW", "VIEWS", "VIRTUAL", "VOLATILE", "WALK", "WHEN",
  "WHERE", "WHITESPACE_P", "WINDOW", "WITH", "WITHIN", "WITHOUT", "WORK",
  "WRAPPER", "WRITE_P", "XML_P", "XMLATTRIBUTES", "XMLCONCAT",
  "XMLELEMENT", "XMLEXISTS", "XMLFOREST", "XMLNAMESPACES", "XMLPARSE",
  "XMLPI", "XMLROOT", "XMLSERIALIZE", "XMLTABLE", "YEAR_P", "YEARS_P",
  "YES_P", "ZONE", "NOT_LA", "NULLS_LA", "WITH_LA", "'<'", "'>'", "'='",
  "POSTFIXOP", "'+'", "'-'", "'*'", "'/'", "'%'", "'^'", "UMINUS", "'['",
  "']'", "'('", "')'", "'.'", "';'", "','", "'|'", "'?'", "'{'", "'}'",
  "'&'", "'!'", "':'", "'#'", "'$'", "$accept", "stmtblock", "stmtmulti",
  "stmt", "AlterObjectSchemaStmt", "AlterSeqStmt", "SeqOptList",
  "opt_with", "NumericOnly", "SeqOptElem", "opt_by", "SignedIconst",
  "AlterTableStmt", "alter_identity_column_option_list",
  "alter_column_default", "alter_identity_column_option",
  "alter_generic_option_list", "alter_table_cmd", "alter_using",
  "alter_generic_option_elem", "alter_table_cmds", "alter_generic_options",
  "opt_set_data", "AnalyzeStmt", "AttachStmt", "DetachStmt",
  "opt_database", "opt_database_alias", "CallStmt", "CheckPointStmt",
  "opt_col_id", "CopyStmt", "copy_from", "copy_delimiter",
  "copy_generic_opt_arg_list", "opt_using", "opt_as", "opt_program",
  "copy_options", "copy_generic_opt_arg", "copy_generic_opt_elem",
  "opt_oids", "copy_opt_list", "opt_binary", "copy_opt_item",
  "copy_generic_opt_arg_list_item", "copy_file_name",
  "copy_generic_opt_list", "CreateStmt", "ConstraintAttributeSpec",
  "def_arg", "OptParenthesizedSeqOptList", "generic_option_arg",
  "key_action", "ColConstraint", "ColConstraintElem",
  "GeneratedColumnType", "opt_GeneratedColumnType",
  "GeneratedConstraintElem", "generic_option_elem", "key_update",
  "key_actions", "OnCommitOption", "reloptions", "opt_no_inherit",
  "TableConstraint", "TableLikeOption", "reloption_list", "ExistingIndex",
  "ConstraintAttr", "OptWith", "definition", "TableLikeOptionList",
  "generic_option_name", "ConstraintAttributeElem", "columnDef",
  "def_list", "index_name", "TableElement", "def_elem", "opt_definition",
  "OptTableElementList", "columnElem", "opt_column_list", "ColQualList",
  "key_delete", "reloption_elem", "columnList", "columnList_opt_comma",
  "func_type", "ConstraintElem", "TableElementList", "key_match",
  "TableLikeClause", "OptTemp", "generated_when", "CreateAsStmt",
  "opt_with_data", "create_as_target", "unreserved_keyword",
  "col_name_keyword", "func_name_keyword", "type_name_keyword",
  "other_keyword", "type_func_name_keyword", "reserved_keyword",
  "pgq_col_name_keyword", "CreateDatabaseStmt", "opt_extension_name",
  "CreateFunctionStmt", "macro_alias", "param_list", "CreateSchemaStmt",
  "OptSchemaEltList", "schema_stmt", "CreateSeqStmt", "OptSeqOptList",
  "CreateTypeStmt", "opt_enum_val_list", "enum_val_list", "DeallocateStmt",
  "DeleteStmt", "relation_expr_opt_alias", "where_or_current_clause",
  "using_clause", "DropStmt", "drop_type_any_name", "drop_type_name",
  "any_name_list", "opt_drop_behavior", "drop_type_name_on_any_name",
  "type_name_list", "ExecuteStmt", "execute_param_clause", "ExplainStmt",
  "opt_verbose", "explain_option_arg", "ExplainableStmt",
  "NonReservedWord", "NonReservedWord_or_Sconst", "explain_option_list",
  "analyze_keyword", "opt_boolean_or_string", "explain_option_elem",
  "explain_option_name", "ExportStmt", "ImportStmt", "IndexStmt",
  "access_method", "access_method_clause", "opt_concurrently",
  "opt_index_name", "opt_reloptions", "opt_unique", "InsertStmt",
  "insert_rest", "insert_target", "opt_conf_expr", "opt_with_clause",
  "insert_column_item", "set_clause", "opt_or_action", "opt_on_conflict",
  "index_elem", "returning_clause", "override_kind", "set_target_list",
  "opt_collate", "opt_class", "insert_column_list", "set_clause_list",
  "set_clause_list_opt_comma", "index_params", "set_target", "LoadStmt",
  "file_name", "PGQ_IDENT", "DropPropertyGraphStmt", "VertexOrNode",
  "EdgeOrRelationship", "CreatePropertyGraphStmt",
  "VertexTableDefinitionList", "KeySpecification", "KeyDefinition",
  "KeyReference", "LabelList", "Discriminator", "VertexTableDefinition",
  "EdgeTableDefinitionList", "EdgeTableDefinition", "AreOptional",
  "IdentOptionalAs", "QualifiednameOptionalAs", "PropertiesList",
  "ExceptOptional", "PropertiesSpec", "PropertiesClause",
  "GraphTableWhereOptional", "GraphTableStmt", "ColumnSpec", "ColumnList",
  "KeepOptional", "PathOrPathsOptional", "GroupOrGroupsOptional",
  "PathVariableOptional", "PathModeOptional", "TopKOptional", "PathPrefix",
  "PathPatternList", "PathPattern", "PatternUnion",
  "KleeneQuantifierOptional", "KleeneOptional", "CostNum", "CostDefault",
  "CostOptional", "SubPath", "EnclosedSubPath", "PathElement",
  "PathSequence", "PathConcatenation", "OrLabelExpression",
  "AndLabelExpression", "ComposedLabelExpression", "LabelExpression",
  "LabelExpressionOptional", "IsOrColon", "ArrowRight", "ArrowLeftBracket",
  "AbbreviatedEdge", "VariableOptional", "FullElementSpec", "EdgePattern",
  "VertexPattern", "pgq_expr", "PragmaStmt", "PrepareStmt",
  "prep_type_clause", "PreparableStmt", "RenameStmt", "opt_column",
  "SelectStmt", "select_with_parens", "select_no_parens", "select_clause",
  "opt_select", "simple_select", "with_clause", "cte_list",
  "common_table_expr", "into_clause", "OptTempTableName", "opt_table",
  "all_or_distinct", "by_name", "distinct_clause", "opt_all_clause",
  "opt_ignore_nulls", "opt_sort_clause", "sort_clause", "sortby_list",
  "sortby", "opt_asc_desc", "opt_nulls_order", "select_limit",
  "opt_select_limit", "limit_clause", "offset_clause", "sample_count",
  "sample_clause", "opt_sample_func", "tablesample_entry",
  "tablesample_clause", "opt_tablesample_clause", "opt_repeatable_clause",
  "select_limit_value", "select_offset_value", "select_fetch_first_value",
  "I_or_F_const", "row_or_rows", "first_or_next", "group_clause",
  "group_by_list", "group_by_list_opt_comma", "group_by_item",
  "empty_grouping_set", "rollup_clause", "cube_clause",
  "grouping_sets_clause", "grouping_or_grouping_id", "having_clause",
  "qualify_clause", "for_locking_clause", "opt_for_locking_clause",
  "for_locking_items", "for_locking_item", "for_locking_strength",
  "locked_rels_list", "opt_nowait_or_skip", "values_clause",
  "values_clause_opt_comma", "from_clause", "from_list",
  "from_list_opt_comma", "table_ref", "joined_table", "alias_clause",
  "opt_alias_clause", "func_alias_clause", "join_type", "join_outer",
  "join_qual", "relation_expr", "func_table", "rowsfrom_item",
  "rowsfrom_list", "opt_col_def_list", "opt_ordinality", "where_clause",
  "TableFuncElementList", "TableFuncElement", "opt_collate_clause",
  "colid_type_list", "RowOrStruct", "opt_Typename", "Typename",
  "opt_array_bounds", "SimpleTypename", "ConstTypename", "GenericType",
  "opt_type_modifiers", "Numeric", "opt_float", "Bit", "ConstBit",
  "BitWithLength", "BitWithoutLength", "Character", "ConstCharacter",
  "CharacterWithLength", "CharacterWithoutLength", "character",
  "opt_varying", "ConstDatetime", "ConstInterval", "opt_timezone",
  "year_keyword", "month_keyword", "day_keyword", "hour_keyword",
  "minute_keyword", "second_keyword", "millisecond_keyword",
  "microsecond_keyword", "opt_interval", "a_expr", "b_expr", "c_expr",
  "indirection_expr", "func_application", "func_expr",
  "func_expr_windowless", "func_expr_common_subexpr", "list_comprehension",
  "within_group_clause", "filter_clause", "export_clause", "window_clause",
  "window_definition_list", "window_definition", "over_clause",
  "window_specification", "opt_existing_window_name",
  "opt_partition_clause", "opt_frame_clause", "frame_extent",
  "frame_bound", "qualified_row", "row", "dict_arg", "dict_arguments",
  "dict_arguments_opt_comma", "sub_type", "all_Op", "MathOp", "qual_Op",
  "qual_all_Op", "subquery_Op", "any_operator", "expr_list",
  "expr_list_opt_comma", "opt_expr_list_opt_comma", "func_arg_list",
  "func_arg_expr", "type_list", "extract_list", "extract_arg",
  "overlay_list", "overlay_placing", "position_list", "substr_list",
  "substr_from", "substr_for", "trim_list", "in_expr", "case_expr",
  "when_clause_list", "when_clause", "case_default", "case_arg",
  "columnref", "indirection_el", "opt_slice_bound", "indirection",
  "opt_indirection", "opt_asymmetric", "opt_target_list_opt_comma",
  "target_list", "target_list_opt_comma", "target_el", "except_list",
  "opt_except_list", "replace_list_el", "replace_list",
  "replace_list_opt_comma", "opt_replace_list", "qualified_name_list",
  "qualified_name", "name_list", "name_list_opt_comma", "name",
  "attr_name", "func_name", "AexprConst", "Iconst", "Sconst", "ColId",
  "ColIdOrString", "type_function_name", "function_name_token",
  "type_name_token", "any_name", "attrs", "opt_name_list", "param_name",
  "ColLabel", "ColLabelOrString", "named_param", "TransactionStmt",
  "opt_transaction", "UpdateStmt", "UseStmt", "VacuumStmt",
  "vacuum_option_elem", "opt_full", "vacuum_option_list", "opt_freeze",
  "VariableResetStmt", "generic_reset", "reset_rest", "VariableSetStmt",
  "set_rest", "generic_set", "var_value", "zone_value", "var_list",
  "VariableShowStmt", "show_or_describe", "var_name", "table_id",
  "ViewStmt", "opt_check_option", YY_NULLPTR
};

static const char *
yysymbol_name (yysymbol_kind_t yysymbol)
{
  return yytname[yysymbol];
}
#endif

#define YYPACT_NINF (-3212)

#define yypact_value_is_default(Yyn) \
  ((Yyn) == YYPACT_NINF)

#define YYTABLE_NINF (-2095)

#define yytable_value_is_error(Yyn) \
  ((Yyn) == YYTABLE_NINF)

/* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
   STATE-NUM.  */
static const int yypact[] =
{
    4200,   431,   955, -3212, -3212,   287,   431, 44848, 61841,   431,
     117,  1537, 48804, -3212,   319,  9369,   431, 51816, 67330,   401,
     256, 27828,   458, 52318, 52318, 61841, 51816, 52820,   431,   334,
   62343, -3212,   431, 30840, 49306,    48, 51816,    46,  -105, 53322,
   51816, 31342,   632,   336, -3212, -3212, -3212, -3212, -3212, -3212,
   -3212, -3212, -3212, -3212, -3212, -3212, -3212, -3212, -3212, -3212,
   -3212, -3212, -3212, -3212, -3212, -3212,   415, -3212, -3212, -3212,
   -3212,   119, -3212, -3212, -3212, -3212, -3212, -3212, -3212, -3212,
     162, -3212,   175,   166,  1079,   400, -3212, -3212, -3212, -3212,
   -3212, -3212, -3212, -3212, 30338, -3212, -3212, -3212, -3212, 53824,
   51816, 54326, 49808, 54828, -3212,   720, -3212,   164, -3212, -3212,
   -3212, -3212, -3212, -3212, -3212, -3212, -3212, -3212, -3212, -3212,
   -3212, -3212, -3212, -3212, -3212, -3212, -3212, -3212, -3212, -3212,
   -3212, -3212, -3212, -3212, -3212, -3212, -3212, -3212, -3212, -3212,
   -3212, -3212, -3212, -3212, -3212, -3212, -3212, -3212, -3212, -3212,
   -3212, -3212, -3212, -3212, -3212, -3212, -3212, -3212, -3212, -3212,
   -3212, -3212, -3212, -3212, -3212, -3212, -3212, -3212, -3212, -3212,
   -3212, -3212, -3212, -3212, -3212, -3212, -3212, -3212, -3212, -3212,
   -3212, -3212, -3212, -3212, -3212, -3212, -3212, -3212, -3212, -3212,
   -3212, -3212, -3212, -3212, -3212, -3212, -3212, -3212, -3212, -3212,
   -3212, -3212, -3212, -3212, -3212, -3212, -3212, -3212, -3212, -3212,
   -3212, -3212, -3212, -3212, -3212, -3212, -3212, -3212, -3212, -3212,
   -3212, -3212, -3212, -3212, -3212, -3212, -3212, -3212, -3212,   176,
   -3212, -3212, -3212, -3212, -3212, -3212, -3212, -3212, -3212, -3212,
   -3212, -3212, -3212, -3212, -3212, -3212, -3212, -3212, -3212, -3212,
   -3212, -3212, -3212, -3212, -3212, -3212, -3212, -3212, -3212, -3212,
   -3212, -3212, -3212, -3212, -3212, -3212, -3212, -3212, -3212, -3212,
   -3212, -3212, -3212, -3212, -3212, -3212, -3212, -3212, -3212, -3212,
   -3212, -3212, -3212, -3212, -3212, -3212, -3212, -3212,   181, -3212,
   -3212, -3212, -3212, -3212, -3212, -3212, -3212, -3212, -3212, -3212,
   -3212, -3212, -3212, -3212, -3212, -3212, -3212, -3212, -3212, -3212,
   -3212, -3212, -3212, -3212, -3212, -3212, -3212, -3212, -3212, -3212,
   -3212, -3212, -3212, -3212, -3212, -3212, -3212, -3212, -3212, -3212,
   -3212, -3212, -3212, -3212, -3212, -3212, -3212, -3212, -3212, -3212,
   -3212, -3212, -3212, -3212, -3212, -3212, -3212, -3212, -3212, -3212,
   -3212, -3212, -3212, -3212, -3212, -3212, -3212, -3212, -3212, -3212,
   -3212, -3212, -3212, -3212, -3212, -3212, -3212, -3212, -3212, -3212,
   -3212, -3212, -3212, -3212, -3212, -3212, -3212, -3212, -3212, -3212,
   -3212, -3212, -3212, -3212, -3212, -3212, -3212, -3212, -3212, -3212,
   -3212, -3212, -3212, -3212, -3212, -3212, -3212, -3212, -3212, -3212,
   -3212, -3212, -3212, -3212, -3212, -3212, -3212, -3212, -3212, -3212,
   -3212, -3212, -3212, -3212, -3212, -3212, -3212, -3212, -3212, -3212,
   -3212, -3212, -3212, -3212, -3212, -3212, -3212,   191, -3212, -3212,
   -3212, -3212, -3212, -3212, -3212, -3212, -3212, -3212, -3212, -3212,
   -3212, -3212, -3212, -3212, -3212, -3212, -3212, -3212, -3212, -3212,
   -3212, -3212, -3212, -3212, -3212, -3212, -3212, -3212, -3212, -3212,
   -3212, -3212, -3212, -3212, -3212, -3212, -3212, -3212, -3212, -3212,
   -3212, -3212, -3212, -3212, -3212, -3212, -3212, -3212, -3212, -3212,
   -3212, -3212, -3212, -3212, -3212, -3212, -3212, -3212, -3212, -3212,
   -3212, -3212, -3212, -3212, -3212, -3212, -3212, -3212,   209, -3212,
   -3212, -3212,   427,   -71, -3212, -3212, -3212, -3212, -3212, -3212,
   -3212, -3212, -3212, -3212,  1169, 51816, -3212, 55330,   844,   896,
     609,   812, 55832, -3212, -3212, 51816, -3212, -3212,  1500,   912,
     830, -3212, -3212, -3212, 50310, -3212, -3212, -3212,   920,  1151,
     909, -3212, -3212, -3212,   753, -3212,   201, -3212, -3212,   782,
     744, -3212,  1057, -3212, -3212, -3212, -3212, -3212, -3212, -3212,
     905, -3212, 46841, -3212, 62845, 56334, 56836, -3212,   735,  2086,
   35972, 67331, 28832, -3212, -3212, -3212, -3212, -3212, -3212, -3212,
   -3212, -3212, -3212, -3212, -3212, -3212, -3212, -3212, -3212, -3212,
     415, -3212, -3212, -3212, -3212, -3212, -3212, -3212, -3212, -3212,
   -3212, -3212, -3212, -3212, -3212, 52318, 61841, 52318,   752,   783,
    1159,   217,   219,   220,   221,   825,   849,   223,   861,   868,
   29334,   897,   924,   935, 31845,   940,   953,  1237,   224,   962,
     981,   985,   996,   225,  -105, 27325, 57338, 57338,   410,  1762,
   -3212, 57338, 57840, -3212,  1022, -3212,  1036,   -71, -3212,   720,
   -3212, -3212, -3212, -3212,   440,  1017, -3212,  1055,  1335, -3212,
   -3212, -3212,  1058, -3212, -3212,  1288, 13567, 13567, 63347, 63347,
     720, 63347,  1099, -3212, -3212,   397, -3212,  1169, -3212,  1079,
   -3212,  1084, -3212,   -71, -3212, 49306, -3212, -3212,   262,  1445,
   18887, 51816,  1126, -3212,  1140,  1126, -3212, -3212, -3212, -3212,
   -3212, -3212, -3212, -3212, -3212, -3212, -3212, -3212, -3212, -3212,
   -3212, -3212, -3212, -3212, -3212, -3212, -3212, -3212, -3212, -3212,
   -3212, -3212, -3212, -3212, -3212, -3212, -3212, -3212, -3212, -3212,
   -3212, -3212, -3212, -3212, -3212, -3212, -3212,  -105, -3212, -3212,
   -3212, -3212, -3212, -3212, -3212, -3212, -3212, -3212, -3212, -3212,
   -3212, -3212,  1376,  1143,  1147, -3212,  4200, -3212, 51816,  1503,
    1379, 49306,   335,   335,  1637,   335,   943,  1112, -3212,  1686,
   -3212,  1176, -3212,  1222,  1477, -3212,  1084,  1578,   963,  1382,
    1585,  5600,  1587,  1096,  1593,  1183,  1721, 10375, 18887, 42338,
   -3212,   -71,  1260,  1271,  1512,  1622, -3212, -3212, -3212, -3212,
    1003, 51816,  1528, -3212,  1778, -3212, -3212,  1330, 58342, 58844,
   59346, 59848, 51816,  1743, -3212, -3212,  1676, -3212, -3212, -3212,
    1360, -3212, -3212, -3212, 51816,   152, -3212, -3212, -3212, -3212,
    1384, -3212,  1384,  1384, -3212, -3212, -3212, -3212, -3212, -3212,
   -3212, -3212, -3212,  1342,  1342,  1529,  1344, -3212, -3212, -3212,
    1712, -3212, -3212, -3212, -3212, -3212, -3212, -3212, -3212, -3212,
   -3212,  1362,  1162, -3212,  1384, -3212,  1342, -3212, -3212, -3212,
   -3212, -3212, -3212, -3212, 66359, -3212, -3212, -3212, -3212,   693,
     950, -3212,  1386, -3212, -3212, -3212, -3212, -3212,   178,  1396,
   -3212,  1848, -3212, -3212, -3212, -3212, -3212, -3212, -3212, -3212,
    1410, -3212,  5087,  1342,  1746,   229,  1415, -3212,  1790,   238,
   -3212,  1803,  1660, 18887, -3212,  1603, -3212, -3212, -3212, -3212,
   -3212, -3212, -3212, -3212, -3212, -3212, -3212, -3212, -3212, -3212,
   -3212, -3212, -3212, -3212, -3212, -3212, -3212, -3212, -3212, -3212,
   -3212, -3212, -3212, -3212, -3212, -3212, -3212, -3212, -3212, -3212,
   -3212, -3212, -3212, -3212, -3212, -3212, -3212, -3212, -3212, -3212,
   -3212, -3212, -3212, -3212, -3212, -3212, -3212, -3212, -3212, -3212,
   -3212, -3212, -3212, -3212, -3212, -3212, -3212, -3212, -3212, -3212,
   -3212, -3212, -3212, -3212, -3212, -3212, -3212, -3212, -3212,  -105,
   -3212, -3212, -3212, -3212, -3212, -3212, -3212, -3212, -3212, -3212,
   -3212, -3212, -3212, -3212, -3212, -3212,   556, -3212, -3212, 39073,
   67331,  1451,  1542, -3212, -3212, 18887, 18887,  1458,  1979,  1979,
    3004, 65857, -3212, 57338, 57840,  1979,  1979, 18887, 51816, -3212,
   18887, 23675,  1473, 18887, 18887, 11439, 18887, 26823, 57338,  1762,
    1480, 51816, -3212,  1581,  1483,  1581,   334, 27828,  1787,  1793,
    1711, -3212, 27828,  1711,  1405,  1795,  1711,  1798,  1581, 32347,
   -3212,  1581,  1518,  1744, -3212, -3212,   888, -3212, 39073, 19419,
   47328,  2012, -3212,  1812, 61841,  1541, -3212, -3212, -3212, -3212,
   -3212, -3212,   875,  2053,   150,  2071, 18887,   150,   150,  1560,
     226,   226, -3212,  1568, -3212,   227,  1571,  1573,  2090,  2091,
     206,  1162,   150, 18887, -3212,   226,  1577,  2094,  1579,  2096,
     171,   172, -3212,   228, 18887, 18887, 18887,  1955, 18887, 10907,
   -3212, 51816,  2102,  2109,   -71,  1594,   720, -3212, -3212, -3212,
   -3212, -3212, -3212, -3212, -3212,   208,  7955, -3212, -3212,  1630,
   -3212, -3212, -3212, -3212,  1809, 18887, -3212, -3212,  1595,  1787,
   -3212,   230, -3212, -3212, -3212,   698,  1787, -3212, -3212, -3212,
   -3212, -3212,   284,  2017, 38069, 38571, 61841,   -71, -3212, 63849,
   -3212, -3212, -3212, -3212, -3212, -3212,   661, -3212,   415, 40417,
    1596,  1597,   -71,  1126, 51816, 51816,  2082, 65857, -3212, -3212,
   -3212,  1140, 49306,   235,  1898,  1732, -3212, -3212,  1079,  1079,
   12503,   478,   210,  1024, 14099, 19951,  1956,  1832,   285,   802,
    1958, -3212,  1836,   943,  1112, 18887, -3212,  1888, 51816, 45350,
     917,   974,  1611,  1698,  1614,    55,  2046, -3212,  1612, -3212,
    1704, 51816, 66359,   243, -3212,  2083,   243,   243,   808,  2084,
    1713,   277,  1872,    71,   -81,  3252, -3212,  1612, 49306,   350,
     678,  1612, 51816,  1715,   717,  1612, 61841,  1451,   154, 19419,
    1282,  1345,   422,   236,  1555,  1576,   160,   170,   174,   177,
     180, 19419,  1862,  1936,   187,  1940,  1942,  1957,  1968,  1972,
    1983,  1985,  1987,   190,  2006,  2008,  2018,  2020,  2022,  2030,
     192,  2033,   194,  2037,   247,   205, 19419,  2043,  1624, -3212,
     207, -3212, 40417,    -4, -3212, -3212,  2047, 35819,  1615, -3212,
   -3212, -3212, -3212, -3212, -3212, -3212, -3212, -3212, -3212, -3212,
   -3212, -3212, -3212, -3212, -3212, -3212, -3212, -3212, -3212, -3212,
   -3212, -3212, -3212, -3212, -3212, -3212, -3212, -3212, -3212, -3212,
   -3212, -3212, -3212, -3212, -3212, -3212, -3212, -3212, -3212, -3212,
   -3212, -3212, -3212, -3212, -3212, -3212, -3212, -3212, -3212, -3212,
   -3212, -3212, -3212, -3212, -3212, -3212, -3212, -3212, -3212, -3212,
   -3212, -3212, -3212, -3212, -3212, -3212, -3212, -3212, -3212, -3212,
   -3212, -3212, -3212, -3212, -3212, -3212, -3212, -3212, -3212, -3212,
    1716, 61841,  1670,  1997,   720, 51816,   877,    52,  1998,  2059,
   47815, 51816,  1875,  3252,  1878,  2125,  1645,  1889,  1271,  1892,
    1649, -3212, -3212, 64351,  2172, -3212,   241, -3212, -3212, -3212,
   -3212, -3212,  1655, -3212, -3212, 18887, -3212, -3212, -3212,  1979,
   -3212, 47328, 47328,  1384,  1384, -3212, -3212,  2138,  1745,  1752,
    1979, -3212,  1979, -3212, 61841, -3212, -3212, 47328, -3212, 61841,
    1668,  1669,  1979, -3212, -3212, -3212, -3212, -3212, -3212, -3212,
   -3212, -3212, -3212, -3212, -3212, -3212, -3212, -3212, -3212,  1979,
    1754, -3212,  1755,  1757,  1760, -3212, -3212, -3212, -3212, -3212,
   61841, 61841, -3212, 42338,  1673, 51816, 51816, -3212, 51816, 61841,
    1677,   811, 67331, 44346, -3212, -3212, -3212, -3212,  1095,  1171,
   -3212, -3212, -3212, -3212, -3212, -3212, -3212, -3212, -3212, 42338,
   -3212,  2745,   720, 39675,  1688, 18887,  1690,  1694, -3212, -3212,
   -3212, -3212, -3212, -3212, -3212, -3212, -3212,  1695,  2035, -3212,
   -3212, -3212, -3212,  1696,  1699,  6881,  1701, 39715,  1703, 23675,
   23675,   325, -3212, -3212, 23675,  1706, 43342, 39585,  1702,  1708,
   39728, 14631, 18887, 14631, 14631, 39970, -3212,  1710, 40245, 57338,
    1719, 50812, -3212, -3212, 51816, -3212, 13567, 13567,  1762, 51314,
    1718, 27828, -3212, -3212,  1052, -3212, 27828,  1996, 27828, -3212,
   27828, -3212, 51816,  1722, -3212, 51816, -3212, -3212, -3212, -3212,
    1724,   945, -3212,  1002,   894, -3212, -3212, 18887, 18887, -3212,
   40417,  1765,   173, -3212, 41064, 34860, 15163, 41064,  2220,  2220,
   32849, -3212,  1874, 40276, -3212,  1727,  2112,  8085,  1725, -3212,
    1728,  1726,  1729, -3212, -3212, -3212,   -71, 18887, -3212, 18887,
    3481,  3481, -3212,   245, 47328, 18887, 18887, 18887, 18887, 18887,
   18887, 18887, 41836,  1823,   345, 61841, 18887, 18887,  1737,   989,
   -3212, 18887,  1973, -3212,  1741, 18887,  1828,   892, 18887, 18887,
   18887, 18887, 18887, 18887, 18887, 18887, 18887, -3212, -3212, 25803,
     264,   -71,  2078,  2100,    -1,   331, 13567,  2093, 10375, -3212,
     -71, 36563,   151,  2093, -3212, -3212, -3212, -3212,   231, -3212,
   -3212, -3212, -3212,  1724, -3212,  1724, -3212, 61841, -3212, 51816,
     262, 48302, 18887, -3212, -3212,  1747,  1748,  1750,  1766,   234,
      35, -3212, -3212,  1813, -3212, -3212, 51816, 33351,  2052, -3212,
     322,   322,  1756, -3212, 39572,  2005,  2052,  1079, -3212, -3212,
   24207,  1884,  2049,  1990, -3212, -3212,  1969,  1970, -3212,  1767,
   40617, 20483, 20483, -3212,  1522, 40417,  1693, -3212, -3212, -3212,
   -3212, -3212, -3212,   922, -3212, 51816,    68,  1956,   802,  1771,
   -3212,  1322,  1774, 64853, 51816,  2064,  2016,  2066,   -57, -3212,
   -3212, -3212, 47328, -3212, 51816, 61841, 60350, 65355, 42840, 51816,
   42338, -3212, -3212, -3212, -3212, 51816,  1554, 51816,  5964, -3212,
   -3212, -3212,   243, -3212, -3212, -3212, -3212, -3212, 61841, 51816,
   -3212, -3212,   243, 61841, 51816,   243, -3212,  1488, 51816, 51816,
   51816, 51816,  1552, 51816, 51816, -3212, -3212,     8,     8,  1999,
   -3212, 15695,   149, -3212, 18887, 18887, -3212, 18887,  1971, -3212,
    1009, -3212,  2015,   100, 51816, -3212,  2131,  1843, 51816, 51816,
   51816, -3212, -3212,  1893, 51816,  1505, -3212, -3212, -3212, -3212,
   -3212,  1801, -3212,  1802,  2162,  3252, -3212,  2164,   822, 45852,
     880,  2168,  1844,  2169, 16227,  2288,  2048, -3212,  2032, -3212,
   -3212, -3212, 18887,  1810,  1817,   178,  1015, -3212, -3212,  1821,
    1669,  1827,  1838,  1826,  1829,  1051, 47328, -3212,  1073,  1979,
     189,  1837,  1856,  1800,  1647,  1110,  1689,   229, -3212, -3212,
   42338,   238, -3212,  2057,   241, -3212, -3212, -3212, -3212, -3212,
   -3212, -3212, -3212,  1100, 28330, -3212, -3212,  2305,   720,  2305,
    1108, -3212, -3212,  2305, -3212,  2292,  2305, -3212,  1451, 47328,
   -3212,  8176, -3212, -3212, -3212, 18887, -3212, -3212, 18887, -3212,
   18887,  2182, -3212,  2349,  2349, 47328, 23675, 23675, 23675, 23675,
   23675,   967,  1577, 23675, 23675, 23675, 23675, 23675, 23675, 23675,
   23675, 23675, 24739,   628, -3212, -3212,  1117,  2340, 18887, 18887,
    2210,  2182, 18887, -3212, 47328,  1860, -3212,  1861,  1863, 18887,
   -3212, 47328, -3212, 51816,    62,    47,  1865,  1868, -3212, -3212,
    1871,  1787, -3212,  1016,  1038, 51816,  2344,  5684,  6080, -3212,
   -3212, 18887,  2197, -3212, 18887,  1880, -3212, -3212, 27828, -3212,
    1052,  1133, -3212, 47328, 51816,  1135, 47328, 39073, -3212, 19419,
   -3212, 47328, -3212, -3212, -3212, -3212, -3212,  1883,  1891, 18887,
      93, -3212,  1955,  1887, -3212, -3212, -3212, -3212, -3212, -3212,
   -3212, -3212, -3212, -3212, -3212, -3212, -3212, -3212, -3212,  1894,
    1879, -3212,  1895, 51816, -3212, 21015, -3212, 61841, -3212, -3212,
   18887, 51816, -3212, 18887,  1899,  8602, -3212, -3212, -3212,   898,
   40937,   331,  2474,  2474,  2474, 41064, -3212, -3212, -3212,  1916,
   -3212, 23675, 23675, -3212,  1859,  1217, 10907, -3212, -3212,  2246,
   -3212,   910, -3212,  1903, -3212, -3212,  3804, -3212, 34860, 41013,
   18887,   349, -3212, 18887,  1737, 18887,  1991,  2474,  2474,  2474,
     257,   257,   294,   294,   294,   898,   331, -3212, -3212, -3212,
    1906, -3212,  1907,  1908,  2271,  1579, 18887, -3212, -3212, 27828,
    1718,    -4,  1955,  1718,  1979,  3481, -3212,  1140, -3212, -3212,
   -3212, 40417, 51816, -3212,   894, -3212,   712,   193,  2423,   393,
     234, 65857,  1953, 27828,  1954,  1181,  2395, 61841, -3212,  1911,
    2093,  1927, -3212, -3212, -3212,  1933,  1933, 18887,   799,  1933,
   -3212,  2052,   -15,  2142,  1199,  1199,  1522,  2144, -3212, -3212,
    1986, -3212, -3212, -3212, 18887, 11971,  1700, -3212,  1705, -3212,
   -3212, -3212, -3212,  1918, -3212, -3212,  2193, -3212, -3212, -3212,
   -3212,  2011,  1612, 18887,  2165, -3212,   281,  1929,  2291,   -56,
    2243, 61841, -3212,   470,   656, -3212,  1313,  2295,   241,  2296,
     241, 42338, 42338, 42338,  1141, -3212, -3212,   720, -3212, -3212,
    1149, -3212,  -103, -3212, -3212, -3212,  2023,   789,  3252,  1612,
   -3212, -3212, -3212, -3212, -3212, -3212, -3212,   351,  1007,  1612,
    2025, -3212,  2026, -3212,  2034,  1161,  1612, -3212, -3212,   149,
     149,   149, 19419, -3212,  2166,  2176,  1948, 40417, 40417, 40417,
    1951, -3212,   311, -3212, 61841, -3212, -3212, -3212,  1971,  2297,
     720, 51816,  2432,  1959,  1271,  1649,  1962, -3212,  2116,   780,
     159, -3212, 61841, 51816, 51816, 51816,  1994, 51816, -3212, -3212,
   -3212,  1964,  1963, -3212, 46354,    -3,  2183,  2190, 51816,  1614,
    2439, 51816, -3212,  1179, 16759,  2333, 51816,  1975, -3212, -3212,
   -3212, -3212,  1979, -3212, -3212,   387,   387, -3212, 61841, -3212,
   -3212,  1978, -3212,  1980, -3212, -3212, -3212, -3212, -3212, -3212,
   -3212, -3212, -3212, -3212, -3212, -3212, 61841, -3212, -3212, 42338,
   -3212, 43844, -3212, -3212, -3212, -3212,   720, -3212,   720,  2204,
   61841, 37065,   720, 37567,   720, -3212,  1977, -3212, 40417,  8779,
   40417,  2210, -3212,  2349,   342,   342,   342,  4319,  2319,   253,
    1981,   342,   342,   342,   413,   413,   259,   259,   259,  2349,
     628,  1022, 43342,  1982, -3212, 40417, 40417, -3212, -3212,  1984,
   -3212, -3212, -3212, -3212,  1995,  2000, -3212, -3212, -3212, -3212,
   -3212, 61841,  1249, -3212,  1718,    48,    48,    48,    48, -3212,
   51816, 51816, 51816, 40417,  2449,  2317, 40417, 51816, -3212, -3212,
   -3212, 51816,  2431,  1198, -3212, -3212, -3212, -3212, -3212, 40324,
   18887, -3212,  2364,  1874, -3212, -3212, 34860, -3212,  2001, 10907,
   40369, -3212,  2308,  8846, -3212, 40417, -3212,  3481, 18887,  1692,
    1853, 18887,  2003, 18887,  2342, -3212, -3212,  2007, -3212, -3212,
   47328, 18887,  2010,  4100, 23675, 23675,  4694, -3212,  4714, 18887,
   10907, -3212,  1999, 17291, -3212,  2227,  2013, -3212,  2197,   149,
    1874,  2197,  2019, -3212, -3212,  2021,  1764, -3212, -3212,   797,
    1764,  1764,  1764, -3212, -3212, -3212,   797,   797,   797, -3212,
     145,   495, 65857, 65857,   393,   393,  2009, -3212, -3212, 65857,
     624, -3212, -3212, -3212, -3212, 23143,  2457, -3212, 18887,  2174,
    2079,   -17, 30840,  2248, -3212, 61841,  1214, -3212, 33351,  1954,
   18887,   -71,   781, -3212, -3212, -3212,  2031, -3212,  1933, -3212,
   -3212, -3212,  2255, -3212, -3212, -3212, 51816, -3212, 51816,  9023,
    2402, -3212, 61841, 61841, 61841, -3212, 61841,  2036,  2038,  1053,
    2041,   927, -3212,  2492,  1053,  2385,   743,  1614,   277,  2831,
      53, -3212, -3212, -3212,  2119, 51816, -3212, 61841, -3212, -3212,
   -3212, -3212, -3212, 42840, -3212, -3212, -3212, 42338, 34357, 42338,
   51816, 51816, 51816, 51816, 51816, 51816, 51816, 51816, 51816, 51816,
    2050,  2051,  2054,  1999, -3212, -3212, -3212, -3212, -3212, -3212,
     -81, -3212, -3212,   311,   720, -3212,  2060,  1169, 45852,  1844,
    2528, 51816,  2059,   811, 60852,  2056,  2055, -3212,  1224,  3252,
    2531,  2062,   735,   195, -3212, -3212,   880, 45852, -3212, -3212,
   -3212,  2491, -3212,  1271, -3212,  1169,  1649, -3212,  1169, 40417,
   61841,  2114, -3212,  1669,  2067, -3212, -3212,  1669, 47328,  1669,
   -3212, -3212,   241, -3212,  1226, -3212, -3212, -3212, -3212, 61841,
    2061, -3212,  2061, -3212, -3212,  2061, -3212, -3212, -3212, -3212,
   23675,  2408,  2081, 47328, -3212, -3212, 51816, -3212, -3212, -3212,
    1238,  2085,  2197, 51816, 51816, 51816, 51816, -3212, -3212, -3212,
   13035, 18887,  2121,  2087, -3212, 61841, -3212, -3212, 18887, 40417,
   -3212,  2088, -3212, -3212,  1882, -3212,  2089,  2095, 61841, 18887,
   -3212, -3212,   379, 18887, 18887,  1859, -3212,  7359, 18887, 47328,
    1251,  1859,   385, 18887,  2448,  3172, 18887, 18887,  5245,  9261,
    2097, 18887, 35370, 33853, -3212, 27828,  2317,  2099, -3212,  2317,
     720, -3212, -3212, -3212, -3212, -3212, -3212, -3212, -3212,  1575,
     591, -3212, -3212, -3212,   797,  2092, -3212,    39,  2103, -3212,
   -3212,  2104,   393,  2098, -3212, -3212, -3212,  2595, -3212, 23143,
   23143, 23143, 23143, 40662, -3212,  2307,  2101, 40417, 13567, -3212,
   -3212, -3212, -3212,  2158, -3212,  1253, -3212,  2539,  2174, -3212,
    2118, 61841, -3212,  2174, 40417, -3212, -3212, 34860, -3212, -3212,
   -3212, -3212, -3212, 61841,  2110, -3212,  2111,  1053, -3212, 61841,
    2153, -3212,   360,  2430,   254, -3212, 18887, -3212,  2523,  2604,
    2492,  2127, 61841, 51816, 23675, -3212,   707,   237, -3212,  2416,
   51816,  2153,  2565, -3212, -3212, -3212,   927, -3212,  2456,  2369,
   -3212,   243, -3212, 18887,   927,  2370,   270, 61841, -3212, -3212,
    2747, -3212, 47328,   241,   241, -3212, -3212,  2135,  2139,  2141,
    2143,  2145,  2146,  2147,  2149,  2150,  2154,  2155,  2157,  2159,
    2160, -3212,  2167,  2170,  2177,  2178,  2180,  2185,  2186,  2188,
    1362,  2189, -3212,  2191,  2031,  2195,  2196,  2198,  2199,  2200,
   61354,  2201,  2202,  2203,  2205,  1386,  2207,  2209,  1095,  1171,
   -3212, -3212, -3212,  2213, -3212, -3212, -3212, -3212,  1415,  2151,
   -3212, -3212,  2230, -3212,  2232, -3212, -3212, -3212, -3212, -3212,
   -3212, -3212, -3212,   149,  1451,   130, -3212, 61841,  1994,  2184,
    2636, 17823,  2156,   529,  2647,   688,  2407,  2171, -3212,   720,
    1844, -3212,   867, 45852,  1994, -3212,  2588,   265,  2190, -3212,
     242,  1844,  2233,  2673, -3212,  2438, 61841,  2217, -3212, -3212,
   -3212, -3212, 43844,  2061,  4470, 23675, 47328,  1258,  1290, -3212,
    2730,  2381,  2317, -3212, -3212, -3212, -3212, -3212,  2222,   455,
    2223, -3212,  9843,  2216, -3212, -3212, -3212, -3212, -3212, -3212,
   40417, 40417, 61841,  2406, -3212, -3212, 40417, -3212, 18887, -3212,
   -3212, 35971,  2551,  1859,  1859,  7359,  1292, -3212,  1859, 18887,
   18887,  1859,  1859, 18887, -3212, -3212, 35401, -3212, 66846, -3212,
   -3212,  2121,   720,  2121, -3212, -3212, -3212, -3212, -3212,   393,
     624, -3212, -3212,  1953, 26317, -3212,  2224, -3212,   211, -3212,
    2226, 41308, 41308,  2741,  2741, 47328, 23143, 23143, 23143, 23143,
   23143, 23143, 23143,  2320,   357, 61841, 23143, 23143,  1737,  1380,
   -3212, 23143,  2467, -3212, 23143,  2321,   233, 23143, 23143, 23143,
   23143, 23143, 23143, 23143, 23143, 23143, 23143,    -1, 13567,  2234,
    1169,  1314, 61841,   -71,     1, -3212, 18887, -3212, -3212,  2235,
    1053, -3212,  2404,  2153,  2237, -3212, -3212, -3212, -3212, -3212,
   -3212, 35446, -3212,    65, 18887, -3212,   883,  4319, -3212, -3212,
   -3212, -3212,  2153,  1271, -3212, 51816,  2720,  2605, -3212, -3212,
   40417, -3212, -3212,  1979,  1979, -3212, -3212,  2431, -3212, -3212,
   -3212, -3212,  1415,   553, 34357, 51816, 51816,  2239, -3212, -3212,
     -81,  2637,  1294, -3212,   880,  1169,  1169, 40417, 51816,  2242,
    2426,   200,  2532, 65857, 51816,  2610, 45852, -3212,  2729, 51816,
    1994,  2250, -3212, -3212,  1240,  1240, -3212,  2396, -3212,  2401,
    2740,   321, -3212, 18355, 51816, -3212, -3212, 29836, -3212,  4470,
    1302, -3212, -3212,  2259,  2261, -3212,  2121, 18887,  2262, 18887,
   -3212, 21547,  2264, -3212,  2744, 18887,  2325, -3212, -3212, 18887,
   -3212,  1859,  1859,  1859, -3212,  2475, -3212,  2406, -3212,  2406,
    1953, -3212,  2694, 26317, 26317, -3212, -3212, -3212,  2283,   624,
    2595, -3212,  1136, 40968,   995,  3567,  3567,  3567, 41308,  2289,
   23675, 23675, -3212,  8136,  5793, -3212,  2618, -3212,  1202, -3212,
    2274, -3212, -3212,  5939, -3212, 41033, 23143,   366, 23143,  1737,
   23143,  2362,  3567,  3567,  3567,   310,   310,   304,   304,   304,
    1136,   995, -3212, -3212,  1315, -3212, 13567, -3212,   -17, -3212,
   -3212,  2708, 29836,  2664, 40417, -3212, 51816, -3212, 42338, -3212,
    1053,   -14,  2280, 18887, 35496,  2515, -3212, -3212,  2547, -3212,
    2611, -3212,  2346,   603,  2363, -3212, -3212, -3212, -3212,  1451,
     720,  1844,  2190,  2233, -3212,  2156,   196, -3212, -3212, 65857,
    2781, -3212, 65857, -3212,  2293, 51816,  1169,   735, -3212,   880,
   -3212, -3212, -3212, -3212, -3212, -3212, -3212, -3212, -3212, -3212,
   -3212, -3212,  1169,  2742,  2512,  2749,  1169, 40417,  2114, 18887,
   -3212,  1319,  2739,   290, -3212, -3212,  2813,  2406,  2301, 21547,
    2306, -3212, 61841,  2310, 40417,  2453, -3212, 36063,  2775,  1999,
    2325,  2325,  2694, 23675, -3212,  2315,   772, -3212, -3212,  2309,
   23143,  3201,  3553, 23143, 23143,  2663, -3212, -3212,  2324, -3212,
   -3212, 47328, 23143,  6333, 23675, 23675,  6754, -3212,  7015, 23143,
    2318, 13567,  2375, 51816,  1323,    76,  1271,  1053,  1337, -3212,
    2336, -3212, -3212, -3212, -3212,  3252, -3212, 35527,  2571,   734,
    2554,  2280, 18887, -3212,  2405, -3212, -3212, -3212,  2815, -3212,
   -3212, -3212, -3212, -3212,  2433,  2821, -3212,  1366,  2782,  2660,
   45852,  2348,  2233,  1994,  2190,  2233,  2573, -3212,  2574, -3212,
    2354, 35771,  1844, 29836, 61841, 61841, 61841,  2355,  2325, -3212,
    2360, -3212, -3212, -3212, 50812, -3212, 18887,   308, -3212, -3212,
   -3212,  3871, -3212, 26317, 26317, -3212,   384, 23143, 23143,  8136,
   41339, 23143, 47328,  1383,  8136, 23143,  3897,  4139, 23143, 23143,
    7537, 51816, -3212,  1169, -3212,  1718, -3212,  2484,  2547, -3212,
   42338, 34357,  1061,   -14,  2675, -3212, -3212, -3212, -3212,   261,
    2589, -3212,  2592, -3212, 40417, -3212,  1169,  2371, 65857, -3212,
   65857,  2746, 51816, -3212, 45852, -3212, -3212, -3212, -3212, -3212,
   -3212, 29836,  2739,  1718, -3212, -3212,   322, -3212,   322, -3212,
   -3212, -3212, -3212,  1702, 22079, 22079,  2378,  1283, -3212, -3212,
    2367, -3212,  2374,  8136,  8136, 41339,  1401, -3212,  8136, 23143,
   23143,  8136,  8136, 23143, -3212, -3212, -3212, 33351,  2554, -3212,
   -3212, -3212, -3212, -3212,   729,   729,  2777, -3212,  2450, -3212,
    2233, 51816, -3212, -3212,  2388, -3212,  2389,  1403, 61841, -3212,
    1933,  1933, 25271,  2533,   283, 39625, -3212, -3212, -3212, -3212,
   -3212, -3212, -3212, 26317, 26317, -3212,  8136,  8136,  8136,  1718,
   -3212, -3212,  2887, -3212,   232, -3212, -3212, -3212,  2387,  2509,
   65857, 65857,  1844,   322, -3212, -3212,  2878, -3212, -3212, -3212,
   -3212, -3212, -3212, -3212, -3212,  1053, -3212, -3212, -3212, 51816,
    2393,  2683,  1407, -3212,  1418,  1718,  1933, 22611,  2387, -3212,
    2397,  2572, 51816, -3212, -3212, 65857, -3212, -3212, -3212, -3212,
   51816, -3212, -3212,  2397, -3212,  1423,  2791, -3212,  2683, 51816,
    2397,   529,  2688, 65857,  2660, -3212
};

/* YYDEFACT[STATE-NUM] -- Default reduction number in state STATE-NUM.
   Performed when YYTABLE does not specify something else to do.  Zero
   means the default is an error.  */
static const yytype_int16 yydefact[] =
{
     137,   234,     0,  1441,  1440,  1508,   234,     0,  1390,   234,
     636,   553,     0,  1526,  1508,     0,   234,     0,   137,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   234,   711,
       0,  1525,   234,     0,     0,   703,     0,  1488,     0,     0,
       0,     0,     0,     2,     4,     5,     6,     7,     8,     9,
      23,    10,    11,    12,    19,    13,    14,    15,    17,    18,
      20,    21,    22,    25,    26,    27,  1399,    28,    30,    31,
      32,     0,    33,    24,    16,    29,    34,    35,    36,    37,
     672,   659,   716,   671,   136,   817,   679,    38,    39,    40,
      41,    42,    43,    44,  1524,    45,   233,   232,   226,     0,
       0,     0,     0,     0,  1507,     0,   227,  1325,  1548,  1549,
    1550,  1551,  1552,  1553,  1554,  1555,  1556,  1557,  1558,  1559,
    1560,  1561,  1562,  1563,  1907,  1564,  1565,  1566,  1853,  1854,
    1908,  1855,  1856,  1567,  1568,  1569,  1570,  1571,  1572,  1573,
    1574,  1857,  1858,  1575,  1576,  1577,  1578,  1579,  1859,  1909,
    1860,  1580,  1581,  1582,  1583,  1584,  1910,  1585,  1586,  1587,
    1588,  1589,  1590,  1591,  1592,  1911,  1593,  1594,  1595,  1912,
    1913,  1914,  1915,  1916,  1596,  1597,  1598,  1599,  1600,  1601,
    1602,  1861,  1862,  1603,  1604,  1605,  1606,  1607,  1608,  1609,
    1610,  1611,  1612,  1613,  1614,  1615,  1616,  1617,  1618,  1619,
    1620,  1621,  1622,  1623,  1624,  1625,  1626,  1627,  1628,  1629,
    1630,  1863,  1631,  1632,  1633,  1634,  1635,  1864,  1636,  1637,
    1638,  1865,  1639,  1640,  1641,  1917,  1918,  1642,  1643,  1866,
    1920,  1644,  1645,  1867,  1868,  1646,  1647,  1648,  1649,  1650,
    1651,  1652,  1653,  1921,  1654,  1655,  1656,  1657,  1658,  1659,
    1660,  1661,  1662,  1663,  1664,  1922,  1869,  1665,  1666,  1667,
    1668,  1669,  1870,  1871,  1872,  1670,  1923,  1924,  1671,  1925,
    1672,  1673,  1674,  1675,  1676,  1677,  1678,  1926,  1679,  1927,
    1680,  1681,  1682,  1683,  1684,  1685,  1686,  1687,  1873,  1688,
    1689,  1690,  1691,  1692,  1693,  1694,  1695,  1696,  1697,  1698,
    1699,  1700,  1701,  1702,  1703,  1704,  1705,  1874,  1929,  1875,
    1706,  1707,  1708,  1876,  1709,  1710,  1930,  1711,  1877,  1712,
    1878,  1713,  1714,  1715,  1716,  1717,  1718,  1719,  1720,  1721,
    1879,  1931,  1722,  1932,  1880,  1723,  1724,  1725,  1726,  1727,
    1728,  1729,  1730,  1731,  1732,  1733,  1734,  1881,  1933,  1735,
    1736,  1882,  1737,  1738,  1739,  1740,  1741,  1742,  1743,  1744,
    1745,  1746,  1747,  1748,  1883,  1749,  1750,  1751,  1752,  1753,
    1754,  1755,  1756,  1757,  1758,  1759,  1760,  1761,  1762,  1763,
    1764,  1765,  1766,  1767,  1934,  1768,  1769,  1770,  1884,  1771,
    1772,  1773,  1774,  1775,  1776,  1777,  1778,  1779,  1780,  1781,
    1782,  1783,  1784,  1785,  1786,  1935,  1787,  1885,  1788,  1789,
    1790,  1936,  1791,  1886,  1792,  1793,  1794,  1795,  1796,  1797,
    1798,  1799,  1800,  1801,  1802,  1803,  1804,  1887,  1805,  1888,
    1806,  1807,  1808,  1809,  1938,  1810,  1811,  1812,  1813,  1814,
    1889,  1890,  1815,  1816,  1891,  1817,  1892,  1818,  1819,  1893,
    1820,  1821,  1822,  1823,  1824,  1825,  1826,  1827,  1828,  1829,
    1830,  1939,  1831,  1832,  1833,  1834,  1835,  1894,  1895,  1836,
    1940,  1837,  1838,  1839,  1840,  1841,  1842,  1843,  1844,  1845,
    1846,  1847,  1848,  1896,  1897,  1898,  1899,  1900,  1901,  1902,
    1903,  1904,  1905,  1906,  1849,  1850,  1851,  1852,  1326,  1327,
    1335,  1531,     0,     0,  1307,  1325,  1866,  1873,  1887,  1388,
    1326,  1389,   229,   635,     0,     0,  1324,     0,     0,     0,
       0,     0,     0,   547,   546,     0,  1379,   552,     0,     0,
       0,   186,  1329,   108,  1737,   106,  1328,  1305,  1507,     0,
       0,   574,   575,   565,     0,   584,     0,   567,   572,   568,
       0,   593,     0,   586,   594,   576,   566,   587,   577,   564,
       0,   595,     0,   570,     0,     0,     0,   230,   195,   553,
       0,   137,     0,  1403,  1404,  1405,  1406,  1407,  1408,  1413,
    1409,  1410,  1411,  1412,  1414,  1415,  1416,  1417,  1418,  1394,
    1399,  1419,  1420,  1421,  1422,  1423,  1424,  1425,  1426,  1427,
    1428,  1429,  1430,  1431,  1432,     0,  1390,     0,     0,  1859,
    1909,  1122,  1109,  1118,  1123,  1110,  1112,  1119,  1864,     0,
       0,  1114,  1116,  1877,     0,  1880,  1881,  1771,  1120,  1888,
    1891,  1892,  1893,  1121,  1894,     0,   846,     0,   674,   821,
     831,   846,   851,  1106,   872,  1107,   860,  1328,  1299,     0,
    1473,  1475,  1476,  1472,   176,  1355,  1513,  1889,  1815,  1527,
    1514,  1511,  1512,   231,   710,   708,     0,  1275,  1644,  1682,
    1775,  1786,  1889,  1449,  1453,     0,   228,     0,  1518,     0,
    1529,  1519,   680,  1328,   702,     0,   235,  1487,     0,  1492,
       0,  1751,   685,   688,  1344,   686,   236,  2168,  2169,  2170,
    2171,  2172,  2173,  2174,  2175,  2176,  2177,  2178,  2179,  2180,
    2181,  2182,  2183,  2184,  2185,  2186,  2187,  2188,  2189,  2190,
    2191,  2192,  2193,  2194,  2195,  2196,  2197,  2198,  2199,  2200,
    2201,  2202,  2203,  2204,  2205,  2206,  2207,  2208,  2209,  2210,
    2211,  2212,  2213,  2214,  2215,  2216,  2217,  2218,  2219,  2220,
     237,   238,     0,   672,     0,     1,   137,  1398,  1502,     0,
     143,     0,   706,   706,     0,   706,     0,   664,   672,   667,
     671,   818,  1523,  1889,  1815,  1517,  1520,  1652,     0,     0,
    1652,     0,  1652,     0,  1652,     0,  1510,     0,  1267,     0,
    1268,  1308,     0,   518,  1652,   179,   551,   550,   549,   548,
     553,     0,  1652,  1363,     0,   604,   605,     0,     0,     0,
       0,     0,     0,  1374,   109,   107,     0,  1505,   582,   583,
       0,   573,   569,   571,     0,     0,  1336,  1941,   915,  1942,
     944,   922,   944,   944,  1943,  1944,  1945,  1946,  1947,  1948,
    1949,  1950,  1951,   911,   911,  1618,   924,  1952,  1953,  1954,
    1652,  1955,  1956,   912,   913,   949,  1957,  1958,  1959,  1960,
    1961,     0,     0,  1962,   944,  1963,   911,  1964,  1965,  1966,
     916,  1967,   882,  1968,     0,  1969,   914,   883,  1970,   952,
     952,  1971,     0,  1972,   939,  1973,  1337,  1338,   592,     0,
     596,   897,   898,   899,   900,   925,   926,   901,   931,   932,
     936,   902,   984,   911,  1652,   592,  1339,   588,  1652,   592,
    1301,  1652,     0,     0,   191,     0,  1396,  1433,  1974,  1975,
    1976,  1977,  1978,  1979,  1981,  1980,  1982,  1983,  1984,  1985,
    1986,  1987,  1988,  1989,  1990,  1991,  1992,  1993,  1994,  1995,
    1996,  1997,  1998,  1999,  2000,  2001,  2002,  2003,  2004,  2005,
    2008,  2006,  2007,  2009,  2010,  2011,  2012,  2013,  2014,  2015,
    2016,  2017,  2018,  2019,  2020,  2021,  2023,  2022,  2024,  2025,
    2026,  2027,  2028,  2029,  2030,  2031,  2032,  2033,  2034,  2035,
    2036,  2037,  2038,  2039,  2040,  2041,  2042,  2043,  2044,  2045,
    2046,  2047,  2048,  2049,  2050,  2051,  2052,  2053,  2054,  2055,
    2056,  2057,  2058,  1434,  1435,  1447,     0,  1448,  1438,  1402,
     137,   634,     0,  1387,  1474,     0,     0,     0,     0,     0,
    1224,     0,   833,   846,   851,     0,     0,     0,     0,   862,
       0,  1239,     0,  1245,     0,     0,     0,   846,   679,     0,
     831,     0,   845,   758,   844,   758,   711,     0,   692,     0,
     857,   855,     0,   857,     0,     0,   857,     0,   758,     0,
     847,   758,   844,     0,   864,   861,  1300,  1393,     0,     0,
       0,     0,  1515,     0,     0,     0,  1310,  1312,  1313,  1196,
    1323,  1093,     0,  1854,  1855,  1856,  1260,  1857,  1858,  1860,
    1861,  1862,  1050,  1863,  1321,  1865,  1867,  1868,  1870,  1871,
    1872,  1874,  1875,     0,  1322,  1878,  1718,  1883,  1884,  1886,
    1889,  1890,  1320,  1895,     0,     0,     0,  1288,  1215,     0,
    1092,     0,     0,     0,  1088,     0,     0,   905,   906,   927,
     928,   907,   933,   934,   908,     0,  1282,   985,  1270,  1140,
    1096,  1105,  1084,  1171,  1082,     0,  1087,  1077,  1278,   692,
    1276,     0,  1078,  1309,  1270,  1261,   692,  1274,  1452,  1450,
    1456,  1451,     0,     0,     0,     0,     0,  1300,  1494,  1495,
    1486,  1484,  1485,  1483,  1482,  1489,     0,  1491,  1399,  1210,
    1212,     0,  1261,   687,     0,     0,     0,   288,   662,   661,
       3,  1344,     0,     0,     0,     0,   704,   705,     0,     0,
       0,     0,     0,     0,     0,     0,   802,   732,   733,   735,
     799,   803,   811,     0,   668,     0,  1521,     0,     0,     0,
     124,   124,     0,     0,     0,     0,     0,   100,    49,    93,
       0,     0,     0,     0,   209,   222,     0,     0,     0,     0,
       0,   219,     0,     0,   202,   196,   198,    51,     0,   124,
       0,    47,     0,     0,     0,    53,     0,   634,  1325,     0,
    1907,  1908,  1909,  1860,  1910,  1911,  1122,  1109,  1118,  1123,
    1119,     0,  1917,  1918,  1866,  1920,  1921,  1922,  1923,  1924,
    1925,  1926,  1927,  1873,  1929,  1930,  1931,  1932,  1933,  1934,
    1120,  1936,  1887,  1938,  1893,  1121,     0,  1940,     0,  1097,
    1326,  1332,  1218,   716,  1216,  1345,     0,  1266,     0,  1346,
    2095,  2096,  2097,  2098,  2099,  2100,  2101,  2102,  2103,  2104,
    2105,  2106,  2107,  2108,  2109,  2110,  2111,  2112,  2113,  2114,
    2115,  2116,  2117,  2118,  2119,  2120,  2121,  2122,  2123,  2124,
    2125,  2126,  2127,  2128,  2129,  2130,  2131,  2132,  2133,  2134,
    2135,  2136,  2137,  2138,  2139,  2140,  2141,  2142,  2143,  2144,
    2145,  2146,  2147,  2148,  2149,  2150,  2151,  2152,  2153,  2154,
    2155,  2156,  2157,  2158,  2159,  2160,  2161,  2162,  2045,  2163,
    2164,  2165,  2166,  2167,  1348,  1347,  1349,  1263,  1306,  1269,
       0,     0,   632,     0,     0,     0,     0,     0,     0,  1360,
       0,     0,  1652,   190,  1652,     0,   518,  1652,   518,  1652,
       0,   180,  1373,  1376,     0,   585,   592,   581,   579,   578,
     580,   943,   930,   938,   937,  1215,   920,   919,   918,     0,
     917,     0,     0,   944,   944,   942,   921,   897,     0,     0,
       0,   948,     0,   946,     0,   590,   591,     0,   562,     0,
     890,   886,     0,   957,   958,   959,   960,   967,   968,   965,
     966,   961,   962,   955,   956,   963,   964,   953,   954,     0,
     969,   970,   971,   972,   973,   974,   975,   976,   903,   909,
       0,     0,   557,     0,  1340,     0,     0,   559,     0,     0,
       0,   553,   137,     0,   203,  1443,  1444,  1442,     0,     0,
    1401,   206,  1446,  1436,  1445,  1400,   223,  1437,  1395,     0,
    1391,   623,     0,     0,     0,     0,     0,     0,  1225,  1226,
    1227,  1228,  1229,  1230,  1231,  1232,  1233,     0,     0,  1234,
    2208,   830,   828,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1053,  1082,     0,     0,     0,  1210,  1244,     0,
       0,     0,     0,     0,     0,  1210,  1250,     0,     0,   834,
     842,   751,   757,   829,     0,   827,     0,  1275,   822,     0,
     874,     0,   856,   852,     0,   853,     0,     0,     0,   854,
       0,   825,     0,   842,   826,     0,   871,  1462,  1461,  1470,
     177,     0,  1221,     0,   137,  1516,  1528,     0,  1215,  1085,
    1259,     0,     0,  1090,  1009,     0,     0,  1010,   989,   990,
       0,  1287,  1296,  1210,  1214,     0,  1088,  1210,     0,  1174,
    1176,     0,     0,  1079,  1352,  1081,  1089,     0,  1316,     0,
     984,   984,  1281,  1196,     0,  1189,     0,     0,  1193,  1194,
    1195,     0,     0,     0,  1273,     0,  1204,  1206,     0,     0,
    1025,  1202,     0,  1028,     0,     0,     0,     0,  1190,  1191,
    1192,  1183,  1184,  1185,  1186,  1187,  1188,  1200,  1182,  1006,
       0,  1080,     0,  1143,     0,  1005,  1279,   820,     0,  1314,
    1311,     0,  1262,   820,  1464,  1468,  1469,  1467,     0,  1463,
    1455,  1454,  1459,  1457,  1460,  1458,  1530,     0,  1496,  1480,
       0,  1477,  1213,   815,   689,  1303,     0,     0,     0,   301,
     280,   302,  1503,  1501,   142,   141,     0,     0,   684,   683,
     726,   726,   717,   720,   726,     0,   682,     0,   774,   775,
       0,     0,     0,     0,   808,   806,  1310,  1323,   762,   736,
     761,     0,     0,   740,     0,   766,   985,   801,   666,   730,
     731,   734,   665,     0,   804,     0,   814,   802,   735,     0,
    1522,     0,     0,     0,     0,     0,  1652,     0,     0,    84,
      65,   470,   885,   123,     0,     0,     0,     0,     0,     0,
       0,    92,    89,    90,    91,     0,     0,     0,     0,   207,
     208,   221,     0,   212,   213,   210,   214,   215,     0,     0,
     200,   201,     0,     0,     0,     0,   199,     0,     0,     0,
       0,     0,     0,     0,     0,  1509,  1504,   716,   716,   716,
    1103,     0,   714,   715,     0,     0,  1264,  1267,   622,   526,
       0,   516,     0,     0,     0,   183,   182,     0,     0,     0,
       0,   241,   240,     0,     0,   553,  1364,  1362,  1366,  1365,
    1367,  1624,   171,     0,     0,   189,   187,     0,     0,   515,
     489,     0,  1378,     0,     0,     0,  1652,  1375,     0,   505,
    1506,   239,     0,     0,     0,   592,     0,   941,   940,   891,
     887,     0,     0,     0,     0,     0,     0,   597,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   592,   589,  1341,
       0,   592,  1302,     0,   592,   194,  1397,  1439,   204,   224,
     205,   225,   657,     0,   629,   637,   642,   620,     0,   620,
       0,   639,   643,   620,   638,     0,   620,   633,   634,     0,
    1136,     0,  1111,  1113,  1126,     0,  1115,  1117,     0,   863,
       0,     0,  1127,  1055,  1056,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1072,  1071,  1128,   867,     0,   870,     0,     0,
    1242,  1243,     0,  1129,     0,     0,  1249,     0,     0,     0,
    1134,     0,   832,     0,     0,   746,   753,     0,   756,   750,
       0,   692,   673,  1644,  1682,     0,   703,   703,   703,   691,
     701,     0,   779,   835,     0,     0,   837,   839,     0,   840,
       0,     0,   875,     0,     0,     0,  1305,     0,   178,     0,
    1354,     0,  1359,  1357,  1353,  1356,  1358,     0,     0,     0,
    1258,  1254,  1288,     0,  1181,  1189,  1193,  1194,  1195,  1190,
    1191,  1192,  1183,  1184,  1185,  1186,  1187,  1188,  1208,     0,
       0,  1170,     0,     0,  1286,     0,  1283,     0,  1083,  1094,
       0,  1177,  1095,     0,     0,     0,  1318,  1319,   986,   997,
    1029,  1030,  1001,  1002,  1003,  1007,  1351,  1350,  1280,     0,
    1272,     0,     0,   987,  1011,  1016,     0,  1251,  1046,     0,
    1034,     0,  1024,     0,  1032,  1036,  1012,  1027,     0,  1008,
       0,  1273,  1205,  1207,     0,  1203,     0,   998,   999,  1000,
     991,   992,   993,   994,   995,   996,  1004,  1180,  1178,  1179,
       0,  1271,     0,     0,  1145,     0,     0,  1031,  1277,     0,
     874,   716,  1288,   874,     0,   984,  1497,  1344,  1490,  1479,
    1478,  1211,  1304,  1343,   137,   287,   283,   295,     0,   326,
     301,   288,   274,     0,  1499,     0,   131,     0,   162,   164,
     820,     0,  1270,   724,   725,   729,   729,     0,     0,   729,
     707,   681,  1884,  1771,     0,     0,     0,     0,   767,   809,
       0,   800,   764,   765,     0,   763,  1310,   768,  1309,   769,
     772,   773,   741,   810,  1297,   812,     0,   805,   670,   669,
     816,     0,    50,     0,  1652,    67,     0,     0,     0,     0,
       0,     0,   420,     0,   520,   420,   105,  1652,   592,  1652,
     592,  1552,  1619,  1787,     0,    63,    96,     0,   494,   117,
       0,   479,   523,    86,   101,   110,     0,     0,   197,    52,
     211,   216,   113,   220,   217,  1383,   218,   124,     0,    48,
       0,   111,     0,  1381,     0,     0,    54,   115,  1385,   714,
     714,   714,     0,  1217,     0,     0,     0,  1219,  1220,  1266,
       0,   621,     0,   517,     0,   631,   611,   612,   622,   181,
       0,     0,     0,   518,   518,     0,     0,  1363,     0,     0,
     173,   169,     0,     0,     0,     0,  1546,     0,   508,   506,
     539,     0,   513,   507,   516,     0,     0,   465,     0,     0,
       0,     0,   606,     0,     0,     0,     0,     0,   910,   923,
     563,   897,     0,   951,   950,   952,   952,   897,     0,   880,
     897,     0,   895,     0,   935,   904,   977,   978,   979,   980,
     981,   982,   983,   556,  1342,   558,     0,   560,   624,     0,
     627,     0,   626,   630,   625,   619,     0,   652,     0,     0,
       0,     0,     0,     0,     0,  1392,     0,  1108,  1223,     0,
    1237,  1236,  1054,  1063,  1067,  1068,  1069,  1238,     0,     0,
       0,  1064,  1065,  1066,  1057,  1058,  1059,  1060,  1061,  1062,
    1070,   872,     0,     0,   866,  1247,  1246,  1240,  1241,     0,
    1131,  1132,  1133,  1248,     0,     0,   744,   742,   745,   747,
     743,     0,     0,   843,   874,   703,   703,   703,   703,   700,
       0,     0,     0,   873,     0,   796,   859,     0,   838,   836,
     848,     0,   879,     0,   850,  1471,  1222,   709,  1086,     0,
       0,  1255,     0,  1296,  1052,  1197,     0,  1169,     0,     0,
       0,  1295,     0,  1211,  1175,  1173,  1091,   984,     0,     0,
       0,     0,     0,     0,     0,  1035,  1026,     0,  1033,  1037,
       0,     0,     0,  1020,     0,     0,  1018,  1047,  1014,     0,
       0,  1048,     0,     0,  1144,  1153,   823,   819,   779,   714,
    1296,   779,     0,  1465,  1481,     0,   283,   281,   282,   283,
     283,   283,   283,   293,   299,   294,   283,   283,   283,   345,
       0,   343,   288,   351,   326,   326,   327,   304,   349,   351,
     313,   323,   322,   279,   303,     0,     0,  1500,     0,   151,
       0,     0,     0,   146,   126,     0,     0,   154,   165,  1499,
       0,   168,     0,   718,   719,   721,     0,  1198,   729,   723,
     771,   770,     0,   739,   807,   737,     0,   813,     0,     0,
       0,   469,     0,     0,     0,   420,     0,   528,     0,   535,
       0,     0,   520,   501,    85,     0,     0,     0,    59,   104,
      77,    69,    55,    83,     0,     0,    88,     0,    81,    98,
      99,    97,   102,     0,   455,   430,   466,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   716,   712,   713,  1098,  1265,   655,   656,
     202,   654,   527,     0,     0,   185,     0,     0,   515,  1378,
       0,     0,  1361,   553,     0,     0,   172,   174,     0,   190,
       0,   518,   195,     0,  1541,   493,   489,   514,   487,   486,
     488,     0,  1547,   518,  1377,     0,     0,   607,     0,   601,
       0,  1372,   929,   893,     0,   947,   945,   894,     0,   892,
     888,   896,   592,   658,     0,   615,   653,   640,   645,     0,
     651,   647,   646,   641,   649,   648,   644,  1124,  1135,  1235,
       0,     0,     0,     0,   865,   868,     0,  1130,  1125,   841,
       0,     0,   779,     0,     0,     0,     0,   694,   693,   699,
       0,     0,  1147,     0,   876,     0,   877,   849,     0,  1257,
    1253,     0,  1209,  1285,  1210,  1290,  1292,     0,     0,     0,
    1172,  1317,   988,     0,     0,  1017,  1252,  1038,     0,     0,
       0,  1013,  1197,     0,     0,     0,     0,     0,  1022,     0,
       0,     0,     0,     0,  1104,   824,   796,     0,  1284,   796,
       0,   690,   292,   298,   291,   290,   289,   296,   300,   286,
     343,   348,   344,   346,   283,     0,   350,   340,     0,   324,
     325,   305,   326,     0,   310,   309,   311,   308,   353,     0,
       0,     0,     0,   273,   356,  1082,     0,  1498,     0,  1493,
     130,   153,   152,     0,   160,     0,  1270,     0,   151,   132,
       0,     0,   163,   151,   139,   727,   728,     0,   722,   738,
    1298,   118,   420,     0,     0,    66,     0,   537,   481,   529,
     512,   496,     0,     0,     0,   421,     0,   554,     0,     0,
     502,     0,     0,     0,     0,   482,     0,     0,   441,     0,
       0,   512,     0,   519,   437,   438,     0,    58,    78,     0,
      74,     0,   103,     0,     0,     0,     0,     0,    61,    73,
       0,    56,     0,   592,   592,    64,   480,  1336,  1941,  1942,
    1943,  1944,  1945,  1946,  1947,  1948,  1949,  1950,  1951,  1952,
    1953,  2072,  1954,  1955,  1956,  1957,  1958,  1959,  1960,  1961,
    2081,  1962,   427,  1963,  1718,  1964,  1965,  1966,  1967,  1968,
       0,  1969,   883,  1970,  1971,  2160,  1972,  1973,  1183,  1184,
     425,   522,   422,  1337,   423,   530,   424,   426,     0,   525,
     114,  1384,     0,   112,     0,  1382,   121,   119,   116,  1386,
    1101,  1102,  1099,   714,   634,   614,   184,     0,  1546,     0,
       0,     0,   246,   272,   262,     0,  1652,     0,   170,     0,
    1378,   188,     0,   515,  1546,  1544,     0,   545,   465,   540,
       0,  1378,  1540,     0,   598,     0,     0,     0,   889,   881,
     561,   628,     0,   650,  1073,     0,     0,     0,     0,   754,
       0,   760,   796,   698,   697,   696,   695,   777,  1594,  1867,
    1770,   778,     0,   782,   776,   780,   785,   787,   786,   788,
     784,   795,     0,   798,   858,   878,  1256,  1051,  1293,  1294,
    1289,     0,   985,  1044,  1042,  1039,     0,  1040,  1021,     0,
       0,  1019,  1015,     0,  1049,  1139,     0,  1142,  1156,  1151,
    1152,  1147,  1098,  1147,  1466,   284,   285,   297,   347,   326,
     313,   341,   342,   274,     0,   355,     0,   328,     0,   307,
       0,   378,   379,   360,   361,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1273,     0,     0,     0,     0,     0,
     394,     0,     0,   397,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   150,
       0,     0,     0,   138,   135,   125,     0,   155,   608,     0,
     533,    68,     0,   512,     0,   420,   498,   497,   500,   495,
     499,     0,   555,     0,     0,   439,     0,   446,   484,   485,
     483,   440,   512,   518,   442,     0,     0,     0,    70,    60,
      57,    62,    71,     0,     0,    72,    75,   879,    87,    80,
    2081,  2090,     0,     0,     0,     0,     0,     0,   610,   617,
     202,     0,     0,  1543,   489,     0,     0,   603,     0,     0,
       0,   259,     0,     0,     0,     0,   515,   175,     0,     0,
    1546,     0,   192,  1545,     0,     0,   417,     0,   462,     0,
       0,     0,  1532,     0,     0,  1371,  1370,     0,   616,  1074,
       0,  1075,   869,     0,     0,   752,  1147,     0,     0,     0,
     789,   783,  1146,  1148,     0,     0,   749,  1291,  1137,     0,
    1041,  1045,  1043,  1023,  1141,  1158,  1155,   798,  1315,   798,
     274,   321,   319,     0,     0,   336,   339,   306,   343,   313,
     308,   357,   368,   398,   399,   372,   373,   374,   376,     0,
       0,     0,   358,   380,   385,   415,     0,   403,     0,   393,
       0,   401,   405,   381,   396,   377,     0,  1273,     0,     0,
       0,     0,   369,   370,   371,   362,   363,   364,   365,   366,
     367,   375,   400,   277,     0,   276,     0,   127,     0,   128,
     161,     0,     0,     0,   140,  1199,     0,   420,     0,   511,
     534,   451,   429,     0,     0,     0,   436,   443,   544,   445,
       0,    79,    95,     0,     0,   524,   122,   120,  1100,   634,
       0,  1378,   465,  1540,   600,   246,     0,   270,   258,     0,
       0,   271,     0,   263,     0,     0,     0,   195,  1542,   489,
     478,   471,   472,   473,   474,   475,   476,   477,   492,   491,
     463,   464,     0,     0,     0,     0,     0,   602,  1372,     0,
     166,     0,   157,   157,  1076,   755,     0,   798,     0,     0,
       0,   781,     0,     0,   797,     0,   677,     0,     0,   716,
     749,   749,   319,     0,   352,     0,   333,   337,   354,     0,
       0,     0,     0,     0,     0,     0,   404,   395,     0,   402,
     406,     0,     0,   389,     0,     0,   387,   416,   383,     0,
       0,     0,     0,     0,     0,     0,   518,   536,     0,   503,
     510,   449,   448,   450,   454,     0,   452,     0,   468,     0,
     461,   429,     0,    82,     0,   531,   609,   613,     0,   419,
    1534,   245,   242,   243,     0,   260,   264,     0,     0,   253,
     515,     0,  1540,  1546,   465,  1540,     0,  1537,     0,   599,
       0,     0,  1378,     0,     0,   159,   159,     0,   749,   791,
       0,   790,  1149,  1150,   751,  1138,     0,  1161,   676,   675,
     320,   317,   338,     0,     0,   312,   359,     0,     0,   386,
     407,     0,     0,     0,   382,     0,     0,     0,     0,     0,
     391,     0,   278,     0,   134,   874,   145,     0,   544,   490,
       0,     0,     0,   451,     0,   444,   541,   542,   543,     0,
     457,   447,   458,    76,    94,   532,     0,     0,     0,   269,
       0,   267,     0,   254,   515,  1535,   193,   418,  1533,  1538,
    1539,     0,   157,   874,   167,   156,   726,   158,   726,   759,
     678,   792,   748,  1157,     0,     0,     0,     0,   318,   334,
     329,   335,   331,   413,   411,   408,     0,   409,   390,     0,
       0,   388,   384,     0,   275,   129,   133,     0,   461,   504,
     509,   428,   453,   467,     0,     0,     0,   459,     0,   460,
    1540,     0,   261,   265,     0,   268,     0,     0,   159,  1368,
     729,   729,  1853,  1595,  1822,     0,  1159,  1162,  1160,  1154,
     315,   314,   316,     0,     0,   410,   414,   412,   392,   874,
     420,   433,     0,   432,     0,   521,   456,  1536,   256,     0,
       0,     0,  1378,   726,   148,   147,     0,  1166,  1165,  1164,
    1168,  1167,   330,   332,   144,   538,   431,   435,   434,     0,
       0,     0,     0,   250,     0,   874,   729,     0,   256,   244,
       0,     0,     0,   266,   252,     0,  1369,   149,  1163,   255,
       0,   248,   249,     0,   251,     0,     0,   247,     0,     0,
       0,   272,     0,     0,   253,   257
};

/* YYPGOTO[NTERM-NUM].  */
static const yytype_int16 yypgoto[] =
{
   -3212, -3212, -3212,  2179,   111,   115,  -779, -1192,  -982, -1211,
   -3212,    59,   118, -3212, -3212,   346, -3212,  1146, -3212,   344,
    -682,   724, -3212,  1242, -3212, -3212,  2930, -3212,   120,   121,
    2341,   122, -3212, -3212, -3212, -3212,  -471,   670, -1228, -3212,
     600, -3212, -3212, -3212, -3212,   -30,   343, -3212,     5, -2133,
   -2910,  -464, -3212,  -616, -3212,  -154, -3212,  -538, -3212,  -725,
    -546,  -601, -2734, -1137, -3212,  1761,  -204, -3212,   776, -3212,
   -2509, -3212, -3212,   770, -3212, -1155, -3212, -2180,   347,  -514,
   -2547, -2540, -2122,  -787,   425,  -521,   403, -2083, -1039, -3212,
     795, -3212,  -506, -3212,  -752, -1922,   123, -2691, -1590,    -8,
   -3212, -3212, -3212,  -552, -3212, -2490, -3212, -3212, -3212,   124,
    1607, -2069,   125,   718, -3212,    11,   369,   126, -3212, -3212,
     127,    24,  -516,   471, -3212,   129, -3212, -3212,  1532,  -847,
   -3212,  1584,   131, -2506, -3212,  -443, -3212,  -487,  -476, -3212,
   -3212,    43,  -967,  1525, -3212, -3212, -3212,    13, -3212,  -333,
   -3212, -3212, -2546, -3212,    49, -3212, -3212, -3212, -3212,   -74,
     489, -3212, -3212,  -434, -1466,  -257, -3212, -3037, -3125, -3212,
   -3212,  -544, -2979, -2047,   132,   136,   -38, -3212, -3212, -3212,
   -3212,  -291, -2475, -3212,  -643, -3212,  -647,  -129,  -617,  -607,
   -3212,  -486, -2730,  -587, -3212, -3212,  -636, -2684,  2428,  -363,
   -3212, -3212,  -743, -3212,   537, -1959, -3212,   900, -3212,   901,
   -3212,  -189, -2736, -3212, -3212,  -329, -3212, -3212, -3212, -2192,
       6,  -559,  -558, -3212, -2904, -3212, -3212, -2359, -3212, -3212,
   -3212,   540, -3212, -3212,  3944,   133,   134, -3212,   916,   135,
   -1142,    36,  2316,   -31,   -10, -3212,    -6,    38,   108,  1881,
   -1040, -3212, -1459,   864, -3212,  2024,  2027, -2115,  -728,   -75,
   -3212,   895, -1664, -2101,  -508,  1306,  1858,  1864,   657, -3001,
   -3212,  -406, -3212,   474, -3212, -3212,   890,  1346, -1570, -1574,
   -3212, -2118, -3212,  -294,  -134, -3212, -3212, -3212, -3212, -3212,
   -2439, -2785,  -497,  1321, -3212,  1869, -3212, -3212, -3212, -3212,
      30, -1520,  3059,   928,  -592,  2447,  -523,  -400,  2063,  2029,
     671,  1074,    51,  2465,   694, -3212, -3212,   700, -2067, -1514,
     658,   -55,  1644, -3212, -3212,  -495, -1340,  -835, -3212, -3212,
     156,  3129, -3212, -3212, -3212,  3479,  3560, -3212, -3212,  3621,
    3771, -3212,  -675,  4084,  2570,  -821,  2075,  -916,  2076,  -930,
    -903,  -922,  2077,  2080, -1518,  4258, -1463,  4636, -3212,    16,
   -3212, -1499,   -13, -3212, -3212, -3212, -3212, -2647, -3212,  -273,
   -3212,  -272, -3212, -3212, -3212,  -453, -3211, -3212,  6314,  1043,
   -3212, -3212, -3212, -1533, -3212,  5693,   937, -3212, -1944, -1019,
    -660, -1094,  -964, -1221, -1387, -3212, -3212, -3212, -3212, -3212,
   -3212, -1038, -1724,    87, -2034, -3212, -3212,  1077, -3212, -3212,
   -3212,  -756,  1281,  -545, -1110, -2048,  1545,   316,  -586, -1603,
   -3212, -1655, -2300, -3212, -3212, -1568, -3212,  3027,  -564, -1130,
    1531, -1241,    33, -3212,  4025,   942,  2212,  1120, -2492, -3212,
   -3212,  -518, -2610, -1102, -3212,  -777, -3212, -3212,   139,  1709,
      50, -3212,   140,  1409, -3212, -3212, -3212,   141, -3212, -3212,
     142,   731, -3212,  1098, -3212,   921,   143, -3212,  3089,  3025,
      21, -2368
};

/* YYDEFGOTO[NTERM-NUM].  */
static const yytype_int16 yydefgoto[] =
{
       0,    42,    43,    44,   573,   574,  1855,  1802,  1587,  1246,
    1792,  1501,   575,  2580,  2581,  2582,  2224,  1227,  3433,  2225,
    1228,  1229,  2584,    48,    49,    50,   105,  1257,   576,   577,
     509,   578,  2278,  3160,  2674,  3161,  2356,  2272,  1510,  2353,
    1912,  1833,  1511,   515,  1927,  2675,  2620,  1913,   579,  2569,
    2921,  3426,  2594,  3625,  2853,  2854,  3423,  3424,  2572,  2226,
    3520,  3521,  2652,  1784,  3515,  2298,  3348,  2230,  2212,  2855,
    2307,  3299,  2967,  2227,  2835,  2299,  3418,  1867,  2300,  3419,
    3115,  2301,  1829,  1860,  2573,  3522,  2231,  1830,  2568,  2922,
    1771,  2302,  3430,  2303,   528,  2839,   580,  2644,  1405,   498,
     499,   500,   887,  1385,  1301,  1386,   751,    56,   529,   581,
     811,  1865,   582,  1399,  1847,   583,  1856,   584,  2635,  2636,
     585,   586,  1168,  2529,  2154,   587,   564,   565,   905,  1448,
     566,   888,   588,   914,    65,   758,  1502,   589,  1503,  1504,
    1006,    66,  1588,  1008,  1009,    67,    68,   591,  3195,  2977,
    1413,  1868,  2310,   530,   592,  2533,  2155,  3293,    71,  2804,
    2158,  1194,  2808,  3360,  2799,  2803,  2536,  3465,  3546,  2805,
    2159,  2160,  3361,  2161,   593,   650,  3235,    73,  1843,  3444,
      74,  3169,  3671,  3661,  3662,  3654,  3533,  2952,  3650,  3628,
    3330,  3446,  2953,  3447,  3595,  3331,  3172,  2526,    75,  3283,
    3284,  2152,  2503,  3047,  1709,  2504,  2507,  2149,  1710,  1711,
    2782,  3060,  2788,  3612,  3558,  3384,  2775,  2514,  2515,  2516,
    2517,  3559,  3561,  3385,  3560,  3053,  3054,  2518,  2519,  2520,
    2777,  2778,  2521,  2522,  2793,   594,   595,  1071,  2024,   596,
    1775,   597,  1124,    81,    82,  1048,    83,   679,   692,   693,
    1570,  1999,   685,  1198,  1727,   666,   667,  2266,   766,  1823,
    1722,  1723,  2165,  2543,  1751,  1752,  1207,  1208,  1986,  3376,
    1987,  1988,  1562,  1563,  3205,  1739,  1743,  1744,  2187,  2177,
    1730,  2425,  3003,  3004,  3005,  3006,  3007,  3008,  3009,  1125,
    2712,  3216,  1747,  1748,  1210,  1211,  1212,  1756,  2197,    85,
      86,  2130,  2486,  2487,   639,   640,  1042,  1043,  1061,  1057,
    1573,  2006,   641,   642,  1965,  1966,  2394,  1064,  2002,  2011,
    2012,  2716,  1885,   889,  2213,  1592,  1451,   891,  1126,   892,
    1426,  1127,  1430,   894,  1128,  1129,  1130,   897,  1131,  1132,
    1133,   900,  1422,  1134,  1135,  1441,  1470,  1471,  1472,  1473,
    1474,  1475,  1476,  1477,  1478,  1179,  1541,  1137,  1138,  1139,
    1140,   644,  1141,  1142,  1673,  2124,  2485,  3013,  3212,  3213,
    2754,  3039,  3225,  3379,  3556,  3606,  3607,  1143,  1144,  1619,
    1620,  1621,  2120,  1667,  1668,  1145,  2926,  1670,  2049,  1180,
    1556,  1615,  1303,  1304,  1593,  1527,  1528,  1538,  1941,  1545,
    1549,  1970,  1971,  1557,  2088,  1146,  2030,  2031,  2442,  1601,
    1147,   790,  1308,   791,  1671,  2082,  1156,  1148,  1157,  1150,
    1611,  1612,  2451,  2726,  2727,  2056,  2193,   646,  1705,  1990,
     910,  1387,  1151,  1152,  1153,  1154,  1182,   648,  1305,   504,
     903,  3547,  1484,  1186,  1306,  2228,  2078,  1625,   598,    98,
     599,    89,   600,  1175,   689,  1176,  1178,   601,   660,   661,
     602,   673,   674,  1589,  1690,  1590,   603,    94,   675,   681,
     604,  3192
};

/* YYTABLE[YYPACT[STATE-NUM]] -- What to do in state STATE-NUM.  If
   positive, shift that token.  If negative, reduce the rule whose
   number is the opposite.  If YYTABLE_NINF, syntax error.  */
static const yytype_int16 yytable[] =
{
     510,   909,  1245,   752,   510,    54,  1392,   767,   645,   510,
     754,    59,  1388,    69,  1548,   510,   510,   510,   510,   510,
    1004,    95,   510,   501,    62,   510,   510,  1500,   510,  1816,
    1181,   510,   510,   750,  1806,  1389,    79,   643,    84,  1437,
     502,  1213,  1505,  1039,  1680,  1876,   907,  1967,  1396,    70,
      88,   637,  1805,  2475,   502,  1706,    84,  2166,  1482,  1443,
    2169,   590,  1487,  2488,  1770,  2544,  2491,   890,  2549,   678,
    2477,  2015,  2048,  2128,   769,  1819,  1943,  1944,   770,  1777,
    1149,  1963,  2574,  2950,   916,   682,   510,  1781,  2949,  1712,
    1522,   510,   510,   510,   510,   510,  1005,  1880,  1524,  1247,
    1618,  1251,  1066,  1255,  1520,  1591,  2928,  1810,  2924,  1677,
    2537,    45,  2066,  2067,  1045,    46,  1683,  1523,    47,  1060,
      51,    52,    53,    55,    57,    58,    60,    61,  2567,    63,
     775,    64,    72,    76,    77,    78,  2964,  2968,  1167,    87,
      90,    91,    92,    93,  2610,  2611,  2612,  1010,   695,  2725,
    3236,  2771,  2622,   783,  2472,  -944, -1308,  1423,  1424, -1333,
     653,  2509,  -660,  2133,   516, -1912,  -663, -1330, -1330, -1333,
    2192,   513,  2189, -2065, -2065, -1913,  -952,  -952,   516, -1914,
    1687, -1919, -1915, -2066, -2066, -1916, -1928, -2067, -2067,  1435,
   -2068, -2068, -1919, -2069, -2069, -1928, -1937, -1935,  1080, -1937,
   -2072, -2072,  2505, -2081, -2081, -2088, -2088, -2090, -2090,  2638,
   -1939,  -949, -1334,   516, -1334,  -949,  2630,  1080, -2093, -2093,
   -1331, -1331, -1912,   687, -1913, -1914, -1915,  2509, -1916, -1935,
   -1939,  -911,  -924,  -939,  3186,   516,   516,  2440,  3328,  1417,
    1445,  1058,  1899,   759,  3315,  1195,  2397,  1494,  2282, -2062,
   -2062,  1790,  1080,  1490,  1793,  1794,  -618,  3163,  1206,  -660,
   -2092, -2092,  3302,  -663,  2146,  1170,  3051,  2150,  1634,  1209,
    1945,  2147,  1635,  3182,  1946, -1181,  2276,  2680,  2682,  1080,
    2685,  -202, -1181,  -772,  1418,  3267,  -202,  1684,  1494,   516,
    1443,  1445,  2648,  1080,  2117,  1817,     3,     4,  3291,   764,
    1445,  2118,  1643,  1445,  3134,  1634,  2965,  1818,  1782,  1635,
    1389,   764,   820,  3414,  3231,  3065,   516,  3041,  3153,  3066,
    3043,  3065,  2779,  2780,  1782,  3066,  3466,   762,   606,  3386,
    3387,  1873,  1841,  1079,  1645,    21,  1945,   760,  3442,  1643,
    1946,  3548,  1634,  1947,  1948,  1949,  1635,  2702,  2264,  3073,
    1079,  3647,  1762,  1945,  2195,  3073,  1514,  1946,  3130,  3506,
   -2095, -2095, -2095,  2163,   664,  1196,  3187,  3464,  2408,  3232,
    2756,  1645,  2125,  2759,  2757,  3119,  1643,  2443,  1728,  3478,
    3479,  3075,  3188,  2406,  3353,  3584,  2828,  3075,  2691,  2080,
    1634,  3636,  3354,  2080,  3227,  3065,  3229,  1789,   763,   104,
    3421,  2080,  1800,  1685,  2210,  2210,  2801,  2598,  1645,  2509,
    2080,  1389,  1423,  1424,  3178, -1201,   690,  2578,  3152,  3184,
    2599,  2409, -1201,  3181,  1945,  3190,  1801,  1435,  1946,  1773,
    1773,   538,  2827,  3268,  1714, -2061, -2061,  1171,  3269,  1172,
    1808,  2602,  3380,  2802,  3381,  2870,  3668,  2818,   788,  1804,
    2164,  1202,   789,  3638,  1765,  1568,  1645,  1004,  1614,  -660,
    1574,  3075,  3422,  -663,  2211,  2564,  1419,  3550,  2196,   665,
    1197,  3185,   684,  3633,  2966,   607,  3270,  2490,   764,  2567,
    2975,  2567,  3116,  2373,  2374,  2375,  2376,  2377,  1729,  3338,
    2381,  2382,  2383,  2384,  2385,  2386,  2387,  2388,  2389,  2390,
    2433,  1060,  2722,  3388,  2028,  3598,  1606,   510,   855,   510,
    2570,  1783,  2265,   605,   510,  1045,  1004,   510,  1780,  3648,
    2126,  1821,  3292,  1508,  3131,  1842,   510,  1783,  -660,  1204,
    1950,  1686,  -663,  2019,  3507,  2277,  1725,  2420,  2421,  2422,
    2763,   754,  3313,  1446,    29,  2692,  3382,  2767,  2768,  2769,
     792,  3443,  1951,  3206,   886,  1759,   510,   510,   510,  3367,
    2151,  3117,  3597,  2410,  1003,  2048,  3297,   688,  3355,  1871,
     649,  3052,  2029,  1163,  3189,  1822,  1780,   761,  2407,  1626,
    3562,  1420,  3468,    34,  2992,  3307,  3303,  2973,  3439,  2506,
    3057,  3159,  1780,  1017,  1446,  1715,  2983,   510,   510,   510,
    2263,  3580,  2552,  1446,   754,  2189,  1446,   645,  2205,    84,
    1682,  3639,  1004,  1004,  1767,  1007,   510,  2493,  2459,  2460,
    1421,  1862,   645,  1531,  1952,   821,    38,   765,   510,   510,
    2148,  3271,   755,   510,   510,  2547,   643,  1682,   514,  1945,
    2539,  1952,    39,  1946,  1806,  -660,   754,  2689, -1181,  -663,
    2571,   643,  3554,   502,    21,  3322,  1438,  1438,  2770,  2344,
     510,   510,  2928,   510,  2924,  1038,    40,  2119,   502,   769,
     788,  -944, -1308,   770,   789, -1333,  1713,   510,  1439,  1439,
     677, -1912,  3555,   510,  -660, -1333,  -660,  2032,  -663,  3110,
    -663, -1913,  1440,  1442,  1214, -1914,  -884, -1919, -1915,  3239,
    2365, -1916, -1928,  1447,  2640,  1757,  1388,  2622, -1919,  2332,
    3562, -1928, -1937, -1935,  2131, -1937,  1758,  3120,  3217,  3585,
    3537,  3329,  2618,  2619,  3238,   516, -1939,  -949, -1334,  1629,
   -1334,  1174,  1914,  1173,  1768,  1701,  1169,  2496, -1912,  1396,
   -1913, -1914, -1915,  1014, -1916, -1935, -1939,  1425,  1429,  -939,
     510,  1678,  2134,   510,  1481,  1498,  1499,  1602,  1877,  1878,
    1800,    54,  3536,  1486,  3107,  1614,  2081,    59,  1036,    69,
    2474,  1663,  1664,  1665,  1666,  3438,  1961,    95,  3250,  1300,
      62,  1384,  3143,  3144,  1801,  1809,  2603,  3404, -1201,  -202,
    -202,  3621,    79,   510,    84,  1046,  1498,  1499,  2263,  1183,
     510,   510,   510,   510,   510,    70,    88,  2034,  3170,   788,
    2240,  1666,  1169,   789,  2035,  3049,   510,  2036,  2037,  2038,
    2243,  3095,  2496,  2246,  3092,  3093,  3094,  3095,  3157,  3128,
    3454,  3453,  1164,  1953,  1954,  1955,  -884,  1956,  1957,  1958,
    1959,  1960,  1961,  1661,  1662,  1663,  1664,  1665,  1666,  3208,
   -2095, -2095, -2095,  2405,  1956,  1957,  1958,  1959,  1960,  1961,
     756,  3629,  2857,    29,  3162,  2077,   886,    45,  3171,    96,
    1389,    46,  1438,  3109,    47,  2721,    51,    52,    53,    55,
      57,    58,    60,    61,  2405,    63,   757,    64,    72,    76,
      77,    78,  1976,  1967,  1439,    87,    90,    91,    92,    93,
    2313,  2510,    34,  2371,  1388,  1852,  2511,  1165,  3129,  1634,
    2949,  3516,  2512,  2048,  2513,  2121,  3543,    97,  1795,  3629,
    1074,  1901,  2758,  2448,  2121,   771,  1389,  1958,  1959,  1960,
    1961,  1782,  2352,  2398,  3136,  1047,   890,  2027,  1614,  2731,
    2858,  1004,  3141,  1643,  2101,    38,  2052,  2354,   787,  2815,
    1068,  2414,  1887,   531,  2841,  3440,  2703,  2704,  2705,  2706,
    2837,  1069,   907,  1898,  2337,   651,   651,  2064,  1202,   800,
    1782,  1904,  2339,  2341,  2342,  1645,  -793,  2336,  2295,  2003,
    1991,  2663,  3300,   752,  2007,  2838,  2009,  2667,  2010,  1219,
    2669,  2338,  2340,   518,  3181,  1220,  1773,   801,    21,   677,
    1427,  1003,  2844,  2232,  2772,  1906,  3065,  1774,  3622,  2238,
    3066,  2744,  2745,   750,  2773,   510,   510,  1005,  2816,  2928,
     510,  2924,  1436,  3179,   812,  2859,  3251,  1806,  2320,   510,
     510,  2497,  2498,   510,   645,  2494,  1982,  1837,   813,   645,
    3073,  2613,  1782,    21,  3255,  2464,  1204,   786,    84,  3517,
    2343,   510,  2541,  1773,  2345,   805,  1811,  2347,   519,  1479,
    1003,  1300,   886,   643,  1776,  2547,   510,  1796,   643,  3314,
      21,  1626,  3075,  2102,  2465,  1797,  1900,   637,  1492,  2202,
     502,  1493,   637,  2740,  3535,   502,  3655,  3538,   754,  2259,
    2260,  2261,  2103,  2289,  3623,  1814,  1205,  2104,  2546,  1908,
    2772,  1232,  2378,  1221,  1080,  2604,  2239,  1618,  2499,  1202,
    3048,  2500,  3174,   510,  1203,  1395,  2497,  2498,   816,  3434,
    1233,  3624,  1219,  1388,  2089,  2249,  1900,  2083,  1220,   807,
    2256,   806,   537,  3518,  1783,  2105,  2784,   537,  2785,  2068,
    1956,  1957,  1958,  1959,  1960,  1961,   537,  3065,  2501,  1708,
    1049,  2786,  2787,  2090,   817,  1731,  1003,  1003,   510,   537,
     537,   510,  1839,    99,  3417,  3305,   808,  2601,  2649,   818,
    2848,  1234,  2654,  1783,  2831,  1910,   510,   510,  1438,   750,
    1080,  3073,  2988,  1699,   510,   518,  1700,  1204,  1718,  1719,
    2502,  1726,   770,   770,   819,   770,  2500,  2466,  3676,  1780,
    1439,  1732,  2467,  2550,  2634,  3681,   822,    29,  1080,  1219,
     510,   510,  2317,  3075,  1440,  1220,  2849,   788,   823,  3405,
     537,  1681,  3627,   510,   886,  1633,  1837,  2984,  1634,  1050,
    1433,  1434,  1635,  2501,  2850,  3407,  1221,  1205,  1780,   523,
     510,   524,   824,  1169,   510,  1783,    34,  1427,   510,  2379,
     519,  1300,    29,  1984,   810,    21,   913,  1731,  1985,  2380,
    1782,  1436,  1643,  1300,  1222,  2832,  1051,   527,  1235, -2095,
    3340,  2091,   796,  1015,   797,  2502,  2092,  2214,  -715,    29,
    2241,  2093,  1052,  -715,  2048,  2244,   825,  3610,  1300,    38,
    2106,    34,  3611,  1053,  1645, -2059, -2059,  2713,  3483,  1807,
    2530,  1838,  3484,  1732,  1016,    39,  2987,  2039,  2040,  2041,
    1780,  2042,  2043,  2044,  2045,  2046,  2047,  1734,    34,  2403,
    1236,  1223,  3341,  1221,   798,  1224,   799,  1054,  1237,    40,
    1017,  3342,  2833,   100,    38,  2834,  2851,  3395,    35,  2575,
    1238,   101,  3105,   677,  2852,    21,  1018,  3108,  1219,  2004,
      39,  1839,  3026,  2468,  1220,  1225,  -715,    21, -2060, -2060,
    3343,    38,  1004,  2305,  2469,  2306,  3396,  2461,  2868,  1733,
    1019,  2586,  1239,  2588,    40,  1461,  1462,    39,  1055,   102,
    1735,  3127,  1020,   510,  2676,  2605,  2861,   510,   677,  1021,
    2359,  2329,   886,   510,  1598,  2360,   677,  1222, -2095,  1158,
    1159,    40,  1161,  2489,  1846,   510,  -715,   788,  2825, -1308,
    1848,   789,  1849,  1032,  1782,   677,  2428, -2095,  1025,  1734,
    1850,  1056, -2095,   886,   886,  1241,  2462,  1226,  2944,   103,
    1618,   523,  2094,   524,  2366,  1438,   510,  3344,  3576,   886,
    2860,   510,  2869,  2095,  2415,  1026,  2416,  1242,  2358,  3345,
    2372,  2361,  2362,  2576,  1249,  2364,  1027,  1439,  1224,   527,
   -2095,  1030,  1221,  1783,    29,  1004,  2417,  2018,  2418,  1244,
    2019,  1442,   510,   510,  1031,  1384,  3599,   510,   510,  2399,
     510,   510,  1735,  1033,  1222,  1003,  2404,  3645,  1250,  3397,
      21,  2531,  1465,  1466,  3398,  3285,  2589,  2629,  2591,  3634,
    3635,  1384,  1034,    34,  2665,  2666,  1035,  3090,  3091,  3092,
    3093,  3094,  3095,  2005,  1219,  3256,  1654,  1036,  2432,  1565,
    1220,  2432,  3199,  2824,  2020,  2826,  2436,  2021,  1780,  1063,
      84,  2273,  1581,   645,  2274,  1584,  1007,  2321,  1070,  2609,
    2021,  1253,   516,   535,  3257,  1224,    38,  1011,   568,   651,
    1065,   510,  3644,   510,    29,  3667,   510,   655,   645,  1072,
    1226,   510,   643,   645,  1073,   645,    29,   645, -2063, -2063,
     694,   694,  1914,  2327,   510,  1254,  2328,   510,  1219,   502,
    1219,  1074,  1050,  3581,  1220,  1075,  1220,   643,  3666, -2064,
   -2064,  1067,   643,    34,   643,  2330,   643,   510,  2328,  3200,
     677,   637,   510,  1162,   502,    34,   637,  1166,   637,   502,
     637,   502,  1160,   502,  1222, -2095,  2920,  1783,  2022,  1051,
    1177,  2547,  2348,  1222,  3288,  2349,   886,  1199,  1221,  1201,
    2025,   779,    84,  1187,  1384,  1576,    38,   510,  1975,  2391,
    1977,  1978,  2392,  2023,  2026,  3399,  1053,  1226,    38,   517,
    3346,  1184,    39,  3347,   537,  2430,  3400,  2434,  2431,  2868,
    2431,  1185,  3258,  2592,    39,  1188,  2593,  3259,  3111,  1189,
    1300,  2596,  3260,  1384,  2597,  2577,    40,  2578,   805,  1192,
    2201,  1193,  1780,  2128,  1224,   537,   537,   518,    40,   510,
     677,   510,  1221,   510,  1221,  1200,  3103,  1215,  3362,    29,
    1079,  2657,  2532,  1945,  2019,  2579,  1217,  1946,   510,   510,
    1947,  1948,  1949, -1380,  1225,   106,  3158,  2171,   512,   518,
    2717,   770, -2095,  2431,  1575,   567,  1216,  1579,  2733,  1661,
    1662,  1663,  1664,  1665,  1666,  1218,  2810,   663,    34,  2811,
    1230,   676,  1231,  1174,  1248, -1380,  2960,   510,  2981,  2274,
    1252,  2982,   519,  2762,   806,   510,   510,  2764,  2765,  2766,
    2989,  1256,  3045,  2990,   886,  3046,   510,   510,   510,   510,
    1384,   510,  1384,  3027,  1056,  3101,  2021,   510,  3102,   510,
    3201,    38,  1390,  2021,   519,  2121,  1226,  3391,  3392,  1222,
     510,   510,  1391,  3362,  1393,   510,   510,    39,  1394,  1004,
     510,   510,   510,   510,  1401,   510,   510,  2288,  3285,  2214,
    1398,   537,  3202,  1300,  3220,  2431,  3321,  2021,  1400,  2274,
    2232,    40,  2929,  3261,  3364,  2980,   510,  2021,  2672,  1412,
     510,   510,   510,  1414,  3262,   677,   510,  3410,   762,   520,
    3411,  3462,  1455,  1456,  3463,  3505,  2247,  1415,  3463,   807,
    1224,   510,  -716,  1222,  1421,  1222,  1300,  -716,  1428,  3509,
    1049,  1079,  3510,  1425,  1945,  1429,  2971,  1633,  1946,  1431,
    1634,  1947,  1948,  1949,  1635, -2070, -2070,   521,   886,  3139,
    2248,  2955,  3600,  1432,  3601,  2943,   808,  1450,  3529,  2734,
    1633,  3530,  1384,  1634,  2296,  2190,  2191,  1635,  1636,  1637,
    1638,  1639,  1640,  1480,  1643,  3567,  1003,  1444,  2021,   763,
    2254, -2095,  1461,  1462,  1224,   522,  1224,  1449,  1641,  1951,
    3481,   886,  2728,  3615,   809,  3632,  2021,  1643,  3463,  3663,
    -716,  1452,  3530,   523,  1644,   524,  1645,   886,  1483,  1050,
    3664,  3496,  3497,  3665,  2255,  3677,  1225,  1485,  1486, -2071,
   -2071,  1507,  1226, -2073, -2073, -2074, -2074,  1489,   526,  1645,
    1488,   527,  1529,  1491,  3362,   523,   886,   524,  3319,  3656,
   -2075, -2075,  1509,   886,   810,   510,  1051,  1512,  2547,  1515,
    -716, -2076, -2076,  1618,   525, -2077, -2077,   510,  1080,   764,
     526,  1952,  1052,   527,  1546,   645, -2078, -2078, -2079, -2079,
   -2080, -2080,  1559,  1053,  1564,   886,   510,  1561,   886,  1003,
    1507,  1300,  1569,   886,  3493,  2676,  1226,  1572,  1226, -2082,
   -2082, -2083, -2083,  1571,   643,  1578,  3148,  3149,  1580,  1465,
    1466, -2084, -2084, -2085, -2085, -2086, -2086,  1054,   637,  1585,
   -2095,   502,  3362, -2087, -2087,   510, -2089, -2089,  1586,   510,
   -2091, -2091,  1594,   510,  1595,   754, -2094, -2094,  -915, -2095,
    1824,  1825,  1597,  1646, -2095,   815,  -767,  -767,  1628,  1463,
    1464,  1465,  1466,  -771,  -771,  1437,  -922,  1631,  -770,  -770,
    1951,  1602,  1647,  2497,  2498,  1693,  1695,  1648,  1055,   677,
     510,  3436,  -793,  1679,  -794,  -912,  -913,   912,  1605,  -916,
    1606,  -914, -2095,  2925,  1689,  3566,  1507,  1507,  1610,  1649,
    1650,  1623,  1624,  1708,  1672,  1627,   645,  1674,  1691,  1703,
    1676,  1702,  1707,  1716,  1717,  1651,  1205,  1203,  1755,  1753,
    1760,  1056,  1778,  1779,   510,  1780,  1785,  1786,   765,  1787,
     645,  1791,  1798,   750,  1803,   643,  1820,  1827,  1799,   510,
    1813,  1828,  1952,  1832,  1834,  1844,  1845,  1854,  1654,   637,
    1857,  1560,   502,  1568,  1652,  1858,  1859,  1653,  2022,   643,
    1864,  1861,  2920,  2979,  1863,  1870,  1872,  1879,  1881,  1583,
    2025,  1654,    84,   637,  1655,  1882,   502,  1889,  1890,  1893,
    1894,  2534,  1895,  2023,  2026,  1896,  1900,  3015,  2001,  1905,
    1953,  1954,  1955,   510,  1956,  1957,  1958,  1959,  1960,  1961,
    1930,  1935,  1932,  1384,  1384,  1384,  1933,  1934,  1936,   503,
     511,  1937,   694,  1939,   536,  1942,  2008,  1972,  1964,   536,
    1973,  1634,  1980,   647,  2055,   652,   652,   654,   536,   659,
    1983,  1622,   659,  2014,  2029,   680,   683,  2058,   683,  2017,
    2060,   536,   536,  2061,  1300,  2062,  2079, -2095,  2086,   754,
    2097,  2063,  2098,  2100,  -672,  2122,   510,  2123,   518,  2129,
    2143,  2144,  2142,   510,  2153,   763,  2145,  2170,  -672,  2179,
    1656,  2167,  2180,  -672,   510,   510,   510,   510,  2181,   510,
    2182,  2183,  2184,  2200, -1380,  2203,   886,  2207,  2208,  2209,
     510,  1806,   764,   510,   537,   537,   680,  2280,   510,  2271,
    2275,   683,   536,   683,   683,   683,    80,  2281,  2286,  2293,
     510,  2294,  2290,  2292,  3125,  2308,  2311,  2309,  2314,  2316,
    2315,  2323,  2318,   519,    80,  -672,  1835,   636,   510,  2319,
    2322,  1384,  2324,  1003, -1811,  2355,  3308,  2121,  2325,    80,
    2363,  2326,   510,   510,  2346,   510,  -672,   753,  1969,  2334,
    1945,  1953,  1954,  1955, -2095,  1956,  1957,  1958,  1959,  1960,
    1961,  1661,  1662,  1663,  1664,  1665,  1666,  3147,  2335,   645,
    2393,  1968,  2400,  2401,  2424,  2402,  2411,  1657,   915,  2412,
    1658,  1659,  1660,  2413,  1661,  1662,  1663,  1664,  1665,  1666,
     768,  2427,  2446,   510,  2059,  2437,  -672,  2750,   643,  2444,
      80,  2438,   510,   510,   510,  -672,  2445,  2447,   754,   510,
    2458,  2456,  2463,   510,  2470,   502,  2479,  2480,  2482,  2483,
    1004,  2484,  2508,  2525,  2528,  2535,  2538,  2540,   510,  2542,
    -773, -1811,  2553,  2556,  2554,  2557,  2558,  2560,  2563,   754,
    2562,  2566,  2585,  2587,  1928,  2614,  1079,  3553,  2600,  1945,
    2606,  2607,   886,  1946,   522,  2615,  1947,  1948,  1949,  2608,
    2616,  2617,  2627,  2624,  1708,  2776,  2633,  2643,  2650,  2655,
    2628,  2776,  1633,  2631,  3029,  1634,  2646,  2651,  2647,  1635,
    2660,  2679, -2095, -2095, -2095,  2690, -1811,  2662,  2670,  2687,
    2671,   754,  2693,  2696,   750,   750,  2697,  2710,  2715,  2711,
   -1811,   750,  2720,  2729,   523, -1811,   524,  2698,  2738,  1643,
   -1811,  3420,  2699,  2723,   510,  2736,  1644,   510,  2739,  2920,
     510, -1811,  2742,   525,  2753,  2781, -1811,  2796,  2755,   526,
    2798,  2760,   527,  2761,  2033,  2807,  2800,  3368,   510,  3370,
     510,  1645,  2817,  2819,   510,   510,   510,  3252,   510,  2823,
    2830,  2829,  2836,  2841,  -672,  2856,  2872, -1811,  2951,  2842,
    3241,  2962,  2940,  2941,  2970,  2976,  2942,   510,  2958,   510,
    2959,  2947,  2843,  2963,  2985,  1384,  2274,  2978, -1811,  1384,
    2923,  1384,   510,   510,   510,   510,   510,   510,   510,   510,
     510,   510,  2986,  3012,  3059,   537,   537,  2991,   537,  3014,
    3017,  2844,  3050,  2845,  3018,  3097,  3056,  3019,  3058,  3035,
     510,  3042,  3098,   510,  3100,  3055,   510,  3104,  3106,  3508,
    2135,   788,  3112,  3113,  1188,   789,  3114,  1846, -1811,   510,
    3118, -1811,  3122,  1848,  3123,  1849,  3512, -1811,  3124,  3132,
    3135,  3477,   510,  1850,  3137,  1646,  3138,  3142, -1330,  2925,
     886,  3154, -2059,  2948, -2060,  3155, -2061,  3156, -2062, -2063,
   -2064,   510, -2065, -2066,  1647,  1951,  3165, -2067, -2068,  1648,
   -2069,  3168, -2070, -2071,   537,   886, -1811,  3173,   510,  3175,
   -2073,  2972,  3176, -2074,  2974,   510,   510,   510,   510,  3183,
   -2075, -2076,  2013, -2077,  2846,  2016,  3164,   510, -2078, -2079,
   -1811, -2080, -2082,  3193, -2083,   694,  3191,  1651, -2084, -2085,
     510, -2086, -2087, -2088, -2089, -2090, -2091,   683, -2092,   683,
   -2093,   886, -2094,  3420,   683,  3194, -1331,   683,  3197,  3203,
    3204,  3211,   645,  3207,  3209,   510,   536,  1952,  3215,  3219,
    3237,  3240,  3065,  3249,  3264,  3296,  3266,  3295,  3298,  3286,
    3310,  3318,  3311,  3320,  3326,  3327,  3332,  3335,   684,  3336,
    3350,   643,  3339,  1654,  2847,  3351,   906,   536,   536,  2848,
    3352,  3365,  3366,  3369,  3373,   637,  3375,  1232,   502,  3372,
    3383,  3378,  2772,  3390,  3394,  3401, -1811,  3409,  3413,  1915,
    3415,  3425,  3131,   510,  3429, -1811,  1233,  3432,  3431,   510,
    3435,  3448,  3457,  3456,  3450,   510,  3464,  1012,   511,   652,
    3458,   510,  3467,  3469, -1811,  2849, -1811, -1811,  3471,  3474,
      80,  3038,   503,  3476,   510,   510,   683,  3482,  3485,  3491,
    3501,  3503,   510,  2850,  1916,  3492,  3511,   647,  1044,  1044,
    3514,  3519,  3525,  1044,  1062,  3526,  1507,  1234,  3527,   510,
    2357,  3528,  3531, -1811,   886,  3532, -1811, -1811, -1811,  3534,
    1917,  1232,  1656,  3539,  3540,  3541,  3577,  3549,  1155,  1155,
     659,   659,  3551,   659,   537,  3583,  3586,    80,   753,  3588,
    1233,  1918,  3591,  3613,   537,  1919,   537,   683,  3594,   537,
    3609,  3584,  2923,   536,  3614,   537,  3637,   537,  3585,  3630,
    3631,  3646,  3649,  3651,  3657,  3659,  3660,  1920,  3670,   537,
    1921,  3678,  3683,  3672,   537,  3145,  2871,  2864,   537,   537,
     537,   537,  2234,   537,   537,  1190,  1023,  2875,  1922,   510,
    2583,  1234,  2862,  2139,   539,  2851,  3545,  1013,  2623,  2673,
    2863,  1037,  3198,  2852,  1235,   510,  1953,  1954,  1955,  1507,
    1956,  1957,  1958,  1959,  1960,  1961,  2945,  3523,   510,  3626,
     683,   754,  3306,   683,  1003,  3582,  3589,  3620,   886,  1657,
    1769,  3349, -2095, -2095, -2095,  2565,  1661,  1662,  1663,  1664,
    1665,  1666,  2590,   753,  2969,   768,  3579,  2840,  3180,  3587,
    2876,  2561,  3578,  1840,   510,  2632,  1236,  1518,  2961,   516,
    2813,  2864,  1897,   683,  1237,  1875,  2925,  1902,  1907,  1903,
     683,   683,   683,   683,   683,  3460,  1238,  2812,  3290,  3544,
     510,  3412,  1923,  3619,  3441,  3679,   683,  3685,  1235,  3325,
    1924,  3669,  3658,  3652,  3593,  3682,   750,  1022,  3502,  2774,
    2523,  3389,  2524,  3480,  3642,  3230,  3643,   886,  1239,  2783,
    2495,  1925,  2545,   686,  2199,  1704,  1750,   510,  3552,  2701,
    1566,  1749,    80,  1567,  2555,  3470,  2176,  3371,  2198,  1754,
     638,  2527,  1040,  1577,  2429,  1024,  2695,  1532,  1926,  2714,
    1236,  2694,  3312,  1888,   510,  1519,  1521,  1525,  1237,  3472,
    1526,  3473,  3608,   537,  2454,  2548,  3675,  2441,  2270,  2138,
    1238,  1241,  1992,  2865,  3099,  2435,   662,  1453,  1454,   776,
       0,     0,     0,     0,     0,     0,   778,   510,   781,     0,
     785,     0,   902,  1242,  2016,  3333,  3287,  3289,     0,     0,
       0,     0,  1239,     0,     0,     0,  2923,   510,   510,     0,
       0,     0,     0,     0,     0,  1244,     0,     0,     0,     0,
     510,     0,     0,     0,     0,   750,   510,     0,   510,  2595,
       0,   510,     0,   537,     0,     0,     0,     0,     0,     0,
    1079,  1622,     0,  1945,   645,     0,   510,  1946,     0,     0,
    1947,  1948,  1949,     0,     0,  1241,     0,     0,     0,  1455,
    1456,  3323,  3324,     0,     0,     0,     0,     0,  3030,  1079,
       0,     0,  1945,   643,  2621,     0,  1946,  1242,     0,  1947,
    1948,  1949,  2625,     0,     0,   750,   750,     0,     0,     0,
     502,     0,  2637,     0,     0,  1044,  1062,  3487,     0,  1244,
     683,  2866,     0,     0,  2867,     0,     0,     0,     0,  1044,
    1044,     0,     0,   536,     0,     0,     0,     0,     0,   647,
       0,     0,   537,     0,   647,  1457,  1458,  1459,  1460,  1461,
    1462,   536,     0,  1463,  1464,     0,     0,     0,     0,   645,
       0,     0,     0,     0,     0,     0,  1596,     0,   510,     0,
    1384,  3445,  1232,  1507,  3449,  2206,     0,     0,  2677,     0,
    2678,     0,     0,     0,  2683,  2215,  2686,  2218,   643,     0,
    2229,  1233,     0,     0,     0,     0,  2233,     0,  2235,     0,
       0,   750,     0,     0,   750,   502,    80,   510,     0,     0,
    2242,     0,     0,   536,     0,  2245,     0,     0,     0,  2250,
    2251,  2252,  2253,     0,  2257,  2258,     0,     0,     0,     0,
       0,     0,  1780,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1234,   636,   510,     0,     0,     0,   636,     0,
       0,     0,  3452,     0,     0,     0,     0,     0,  1696,     0,
       0,  1698,     0,     0,     0,     0,  1465,  1466,  3455,     0,
       0,     0,  3459,   886,     0,     0,   536,   536,  1599,  1951,
       0,     0,     0,     0,   683,   510,     0,     0,     0,  1603,
       0,     0,     0,     0,     0,   537,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1951,     0,
     683,  1772,     0,     0,     0,  1616,     0,     0,     0,     0,
       0,     0,   510,   683,   902,     0,     0,     0,     0,     0,
     645,     0,     0,     0,     0,     0,   510,   510,   510,  1235,
     683,     0,     0,     0,   683,     0,   510,     0,  1815,     0,
       0,  1952,     0,     0,     0,   750,   750,     0,     0,   643,
       0,     0,     0,     0,   886,     0,     0,     0,     0,     0,
    3592,     0,  3445,   510,     0,     0,   502,     0,     0,     0,
    1952,     0,  1384,  2923,     0,  1467,  1468,     0,     0,     0,
       0,  1236,     0,     0,   768,   768,     0,   768,     0,  1237,
     750,     0,   750,     0,   510,     0,   510,     0,   645,     0,
       0,  1238,     0,     0,     0,     0,     0,     0,     0,  3575,
    2927,     0,   793,     0,   795,     0,     0,   537,     0,   803,
       0,  2013,   804,     0,     0,     0,     0,   643,     0,     0,
       0,  1079,  3590,  1239,  1945,  2621,  2946,     0,  1946,   510,
       0,  1947,  1948,  1949,   502,  1079,     0,     0,  3065,     0,
       0,     0,  3066,   510,     0, -2095, -2095, -2095,     0,  3488,
     510,     0,  3445,  3653,  1453,  1454,     0,     0,     0,     0,
       0,     0,     0,  1831,     0,   750,   750,   683,     0,     0,
       0,     0,  3073,   683,     0,     0,  1241,     0,     0,  3074,
       0,     0,   750,   750,     0,  1869,     0,  3674,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1242,     0,
     902,   510,     0,     0,  3075,  3684,     0,     0,     0,     0,
       0,  1029,     0,     0,   510,     0,  1886,   750,     0,     0,
    1244,  1886,   510,     0,     0,     0,     0,     0,     0,     0,
       0,   510,     0,  1902,     0,   750,  1455,  1456,   537,     0,
    1953,  1954,  1955,     0,  1956,  1957,  1958,  1959,  1960,  1961,
       0,   893,   906,   906,     0,     0,     0,   536,   536,     0,
     536,   906,  3044,     0,     0,   537,     0,     0,     0,  1953,
    1954,  1955,     0,  1956,  1957,  1958,  1959,  1960,  1961,     0,
     537,   537,   537,   537,   537,   537,   537,   537,   537,   537,
       0,     0,  1688,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1457,  1458,  1459,  1460,  1461,  1462,  3076,     0,
    1463,  1464,     0,     0,     0,     0,     0,     0,   503,     0,
       0,     0,     0,     0,     0,     0,     0,  3077,     0,     0,
       0,  1044,  3078,  1989,     0,     0,   536,     0,  1155,  1155,
    1951,   683,     0,   647,     0,  1191,     0,     0,   647,     0,
     647,     0,   647,     0,   536,     0,     0,   536,     0,     0,
       0,     0,   902,     0,     0,     0,     0,     0,    80,     0,
    3081,     0,  1633,     0,     0,  1634,  2013,  2050,     0,  1635,
       0,     0,  2054,     0,     0,     0,  2642,     0,  1397,     0,
       0,     0,     0,     0,     0,  1403,  1406,  1408,  1410,  1411,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1643,
       0,  1416,  1952,     0,     0,     0, -2095,   906,     0,     0,
       0,     0,     0,  1465,  1466,     0,  1952,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1079,
       0,  1645,  1945,     0,     0,     0,  1946,   636,  1155,  1947,
    1948,  1949,   636,     0,   636,     0,   636,     0,     0,     0,
       0,  3177,     0,     0,     0,  1079,     0,     0,  1945,  2136,
      80,   683,  1946,   683,     0,  1947,  1948,  1949,     0,     0,
       0,     0,     0,     0,  1507,     0,     0,     0,   683,  2162,
       0,     0,     0,  3569,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  2471,     0,     0,     0,     0,     0,
       0,     0,     0,   537,  2087,  3085,     0,   683,     0,     0,
     902,     0,     0,     0,     0,  1772,   536,     0,     0,     0,
       0,     0,  1467,  1468,  3228, -2095,   536,  2216,   536,  2220,
    3557,   536,     0,     0,     0,     0,     0,   536,     0,   536,
       0,   902,   902,   893, -2095,     0,     0,     0,     0, -2095,
     906,   536,     0,     0,     0,   906,   536,   902,     0,     0,
     536,   536,   536,   536,     0,   536,   536,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   895,     0,   768,     0,     0,   683, -2095,     0,     0,
     683,   683,   683,     0,     0,  1536,   683,     0,     0,     0,
       0,  1953,  1954,  1955,     0,  1956,  1957,  1958,  1959,  1960,
    1961,  2304,  3086,     0,     0, -2095, -2095, -2095,     0,  3090,
    3091,  3092,  3093,  3094,  3095,     0,     0,     0,     0,  2821,
       0,     0,     0,     0,     0,     0,  2927,     0,  1951,     0,
       0,     0,     0,  1654,     0,     0,     0,     0,  1633,     0,
       0,  1634,     0,     0,     0,  1635,  2873,     0,     0,     0,
       0,     0,   896,     0,  1951,     0,     0,     0,     0,     0,
       0,  2930,  2931,  2932,  2933,  2934,  2935,  2936,  2937,  2938,
    2939,     0,     0,     0,     0,  1643,     0,  1079,     0,     0,
    1945,     0, -2095,     0,  1946,     0,     0,  1947,  1948,  1949,
       0,     0,     0,     0,     0,     0,     0,  2291,     0,     0,
    1952,     0,     0,     0,    80,  3570,     0,  1645,     0,     0,
       0,     0,     0,   898,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   536,  1952,     0,     0,   893,
     -46,     0, -2095,     0,   902,     0,     0,   683,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     647,     1,     0,     0,     0,     0,   536,     0,     0,     0,
       0,     0,     2,     0,     3,     4,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1761,     5,     0,     0,     0,
    2743,     6,     0,     0,     0,   537,     0,     0,  1788,     0,
       7,     0,  3437,     0,     0,   536,     0,     0,     0,  2452,
       0,     0,     8,   536,     0,   537,   537,     0,     0,  1812,
       0, -2095,     0,     9,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    10,     0,    11,     0,   537,
   -2095,     0,     0,     0,     0, -2095,     0,     0,     0, -2095,
    2050,     0,     0,     0,     0,    12,  1661,  1662,  1663,  1664,
    1665,  1666,     0,     0,   636,     0,     0,  1079,     0,    13,
    1945,    14,     0,   899,  1946,     0,     0,  1947,  1948,  1949,
      15,   647,   902, -2095,     0,     0,     0,     0,    16,     0,
       0,     0,     0,   895,   536,     0,    17,     0,    18,    19,
       0,   893,     0,     0,     0,   647,  1951,     0,     0,  2162,
       0,     0,    20,     0,  3126,     0,    21,     0,     0,  1953,
    1954,  1955,     0,  1956,  1957,  1958,  1959,  1960,  1961,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1654,
       0,     0,  1616,     0,    22,  1953,  1954,  1955,     0,  1956,
    1957,  1958,  1959,  1960,  1961,     0,     0,     0,     0,    23,
    2087,     0,  1836,  1831,     0,     0,     0,     0,  1853,     0,
       0,     0,     0,     0,   896,     0,  2481,     0,  1952,     0,
       0,     0,     0,     0,     0,   636,    24,     0,     0,     0,
       0,     0,     0,  2927,     0,     0,   902,     0,     0,     0,
      80,     0,     0,     0,     0,     0,     0,     0,     0,   636,
       0,    80,     0,     0,     0,     0,     0,     0,  1079,     0,
       0,  1945,     0,     0,     0,  1946,  1831,     0,  1947,  1948,
    1949,     0,     0,   683,     0,   898,     0,     0, -2095,   902,
       0,     0,     0,     0,  1831,   683,   683,   536,     0,   683,
       0,     0,     0,     0,     0,   902,     0,     0,     0,     0,
     683,     0,     0,   683,     0,     0,     0,    25,   683,   893,
      26,     0,     0,   537,     0,     0,     0,     0,     0,     0,
    2668,     0,     0,     0,   902,     0,  1951,     0,     0,   895,
       0,   902,     0,     0,     0,     0,     0,     0,   906,     0,
     893,   893,    27,     0,     0,     0,     0,     0,     0,     0,
       0,    28,  1831,  1831,     0,  1831,   893,     0,     0,     0,
       0,     0,     0,   902,     0,    29,   902,     0,     0,     0,
       0,   902,    30,     0,     0,     0,  2000,    31,     0,     0,
       0,     0,     0,     0,   503, -2095,   753,     0,    32,     0,
       0,     0,  1661,  1662,  1663,  1664,  1665,  1666,  1952,     0,
      33,     0,     0,  2700,    34,     0,     0,     0,     0,     0,
     896,     0,   683,   683,   683,     0,     0,     0,     0,   536,
       0,     0,     0,   536,    35,   899,   901,  1953,  1954,  1955,
       0,  1956,  1957,  1958,  1959,  1960,  1961,     0,  2050,    36,
       0,     0,    37,     0,     0,     0,  3309,    38,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    39,     0,     0,  3316,  3317,     0,     0,
       0,   898,     0,     0,     0,     0,     0, -2095,     0,     0,
       0,     0,  1633,     0,     0,  1634,     0,    40,     0,  1635,
    3337,   895,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    41,  1633,     0,   -46,  1634,  2137,     0,  2140,  1635,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1643,
       0,     0,     0,  2156,  2806,     0, -2095,  2809,     0,     0,
    2162,     0,     0,     0,     0,     0,     0,     0,     0,  1643,
       0,     0,     0,   893,     0,  1616, -2095,     0,   683,  1952,
     536,  1645,     0,     0,  1831,  1772,  1831,     0,  1869,     0,
       0,     0,  2194,     0,     0,     0,     0,     0,     0,     0,
     537,  1645,   896,     0,     0,     0,  1616,   536,     0,  2874,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   536,   536,   536,   536,   536,   536,   536,   536,
     536,   536,     0,     0,     0,     0,     0,  1953,  1954,  1955,
       0,  1956,  1957,  1958,  1959,  1960,  1961,     0,     0,     0,
    2304,   899,     0,   683,  2746,     0,   683,     0,   753,     0,
       0,     0,     0,   898,     0,     0,     0,     0,     0,  1772,
       0,  2279,     0,     0,  2747,  2283,  2284,  2285,     0,     0,
       0,  2287,  1869,     0,   902, -2095,     0,     0,     0,   895,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1831,     0,     0, -2095, -2095,     0,     0,     0, -2095,
       0,   893,     0,     0,     0,     0,     0,     0,   536,     0,
     895,   895,     0,     0, -2095,   683,   683,   683,   683, -2095,
       0,     0,     0,     0,  1136,  1136,   895,   906,     0,     0,
       0,     0,     0,     0,     0,     0,     0, -2095,     0,     0,
    3020,     0,     0,    80,  3504,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0, -2095,   901,     0,
     896,     0,     0,     0,     0,  3040,     0,   647,     0,     0,
       0,    80,     0,     0,    80,     0,     0,     0,  1953,  1954,
    1955,     0,  1956,  1957,  1958,  1959,  1960,  1961,     0,     0,
       0,   896,   896,  1654,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   899,     0,     0,     0,   896,     0,     0,
    1155,     0,     0,  1654,     0,   893,     0,     0,     0,     0,
       0,   898,  2419,  2162,     0,     0,     0,     0,     0,  2050,
       0,     0,     0,     0,  1506,  1772,     0,     0,     0,     0,
     902,  1831,     0,  1516,  1517,  1302,  1307,     0,     0,     0,
    1533,  1534,   898,   898,   906,   536,     0,     0,   893,     0,
       0,     0,   683,     0,     0,     0,     0,     0,   898,     0,
       0,   636,     0,     0,   893,     0,     0,     0,     0,  3146,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0, -2095,  1506,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   893,     0,     0,     0,     0,     0,     0,
     893,     0, -2095,   895,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   893,     0,     0,   893,     0,     0,     0,     0,
     893,     0,     0,     0,   901,     0,     0,     0,     0,  1831,
    1630,     0,     0,     0,     0,     0,     0,     0,   902,     0,
       0,   899,     0,     0,     0,  2304,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1506,  3196,  1506,
    1506,     0,     0,     0,   896,     0,     0,     0,     0, -2095,
    1453,  1454,   899,   899,     0,     0,  1661,  1662,  1663,  1664,
    1665,  1666,     0,     0,     0,     0,     0,     0,   899, -2095,
       0,     0,     0,     0,  3214,     0,  1661,  1662,  1663,  1664,
    1665,  1666,     0,     0,     0,     0,     0,     0,   902,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    3226,   895,     0,  1633,     0,   898,  1634,     0,  1506,     0,
    1635,  1506,  1506,   902,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1513,     0,     0,     0,     0,    80,     0,
       0,     0,  1455,  1456,     0,  1535,     0,   906,  1537,     0,
    1643,  1547,  1550,  1555,  1558,     0,     0, -2095,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  2626,   902,
    1155,     0,     0,     0,  2806,     0,   901,     0,  1616,     0,
    2639,  2641,  1645,     0,  2645,     0,     0,  1302,     0,     0,
       0,     0,   896,     0,     0,  2653,     0,     0,  2656,     0,
       0,     0,     0,  2661,  1600,     0,     0,   536,  1457,  1458,
    1459,  1460,  1461,  1462,     0,     0,  1463,  1464,     0,     0,
       0,  1604,     0,     0,     0,   895,     0,   536,   536,     0,
       0,     0,  1607,  1608,  1609,     0,  1613,  1617,     0,     0,
     683,     0,     0,     0,     0,     0,   683,     0,  1772,     0,
       0,   536,     0,   898,  2087,  3033,     0,     0,     0,     0,
       0,     0,     0,  1675,     0,   899,   683,     0,   895,  3363,
       0,     0,     0,     0,     0,     0,    80,    80,     0,     0,
       0,     0,     0,     0,   895,     0, -2095,     0,     0,     0,
       0,     0,     0,   893,     0,     0,     0,     0,     0,     0,
       0,     0,   902,     0,     0, -2095,   896,  2707,  2708,  2709,
   -2095,     0,     0,   895,  1874,     0,     0,     0,  1724,     0,
     895,     0,  1740,  1745,     0,  1883,     0,  1884,     0,  1465,
    1466,     0,     0,     0,     0,     0,     0,  1891,     0,     0,
     902,    80,    80,     0,   901,     0,     0,     0, -2095,   896,
       0,     0,   895,     0,  1892,   895,     0,     0,  1155,     0,
     895,     0,     0,     0,  3363,   896,     0,   898,   683,     0,
       0,     0,     0,     0,     0,   901,   901,  1302,     0,     0,
       0,     0,     0,  1909,  1911,     0,     0,     0,     0,  1302,
       0,   901,     0,     0,   896,     0,     0,     0,     0,     0,
       0,   896,     0,   899,  1654,     0,     0,   683,     0,     0,
     898,     0,     0,     0,  1302,     0,   902,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   898,     0,     0,     0,
       0,     0,     0,   896,     0,     0,   896,     0,     0,     0,
       0,   896,     0,  2820,  3214,  2087,     0,     0,  1467,  1468,
       0,     0,     0,     0,     0,   898,     0,     0,     0,   893,
       0,     0,   898,     0,     0,     0,     0,     0,  1469,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1155,     0,   536,  1219,     0,     0,     0,
       0,     0,  1220,     0,   898,   902,     0,   898,     0,     0,
    1232,     0,   898, -2095,     0,     0,     0,     0,     0,     0,
       0,     0,    80,     0,     0,     0,     0,   899,  2954,  1233,
       0,  2957,  1772,     0,     0,     0,     0,  1542,    80,     0,
       0,     0,    80,     0,     0,  3363,   906,   906,   906,     0,
       0,     0,     0,     0, -1813,     0,  1989,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     899,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1234,     0,     0,   683,     0,     0,   899,     0,   901,     0,
       0,     0,     0,     0,   902,     0,     0,   893,     0,     0,
    2993,  2994,  2995,  2996,     0,     0,     0,     0,     0,     0,
    1221,     0,     0,     0,   683,   899,  1772,     0,     0,     0,
   -2095,     0,   899,  3363,     0,     0,     0,  1661,  1662,  1663,
    1664,  1665,  1666,     0,     0,     0,  2188,  2188,     0,     0,
       0,     0,     0,  1931,     0,     0,     0,     0,     0,     0,
       0, -1813,     0,   895,   899,     0,     0,   899,     0,  2162,
       0,     0,   899,     0,     0,     0,     0,   893,     0,     0,
       0,  1079,     0,   683,  3065,     0,     0,  1235,  3066,  1555,
     906,  1555,  1555,     0,     0,     0,     0,  1506,     0,    80,
       0,     0,   893,     0,  1136,  1136,     0,  1506,     0,     0,
    1506,     0,     0,     0,     0,     0, -1813,     0,  3073,     0,
       0,  1746,    80,     0,     0, -2095,     0,     0,     0,     0,
   -1813,     0,     0,     0,     0, -1813,   901,     0,     0,  1236,
   -1813,   683,     0,     0,   896,     0,     0,  1237,   893,     0,
    3075, -1813,     0,     0,   683,     0, -1813,  3133,     0,  1238,
       0,     0,   536,     0,     0,     0,     0,  2065,     0,     0,
       0,   683,     0,  2069,  2070,  2071,  2072,  2073,  2074,  2075,
       0,  1222,     0,     0,  2084,  2085,     0, -1813,     0,  2096,
       0,  1239,     0,  2099,  2331,  2333,  2107,  2108,  2109,  2110,
    2111,  2112,  2113,  2114,  2115,   898,     0,  2116, -1813,     0,
       0,     0,     0,     0,  1136,     0,  1302,     0,     0,  1506,
       0,     0,     0,  3393,     0,     0,     0,  1079,     0,   895,
    3065,     0,     0,     0,  3066,     0,     0,     0,  1240,     0,
    2141,     0,  1224,     0,  1241,     0,     0,     0,     0,     0,
     901,   902,     0,     0, -2095,     0,     0,     0, -1813,     0,
       0, -1813,     0,     0,  3073,     0,  1242, -1813,     0,     0,
    1219, -2095,  1243, -2095,     0,     0,  1220,     0, -2095,  1608,
    1609,   893,     0,     0,  1232,     0,     0,     0,  1244,     0,
       0,     0,     0,   901,     0,     0,  3075,     0,     0,     0,
       0,     0,     0,  1233,     0,     0, -1813,     0,     0,   901,
     896,     0,     0,     0,     0,     0, -2095,     0,     0,   893,
       0,     0,  1506,     0,     0,     0,     0,     0,     0,     0,
   -1813,     0,     0,     0,     0,     0,     0,     0,   901,     0,
       0,     0,   902,     0,  1226,   901,     0,     0,     0,     0,
       0,     0,     0,     0,  1234,   899,     0,   895,     0,  1302,
   -1827,   902,  2267,  2268,     0,  2269,     0,     0,     0,  3402,
       0,   898,  1952,     0,     0,     0,     0,   901,     0,     0,
     901,     0,     0,     0,  1221,   901,     0,     0,   684,     0,
       0,     0,     0,     0,     0,   893,     0,     0,     0,     0,
   -2095,     0,  1302,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0, -1813,     0,     0, -2095,
       0,     0,     0,     0, -2095, -1813,     0,   895,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   896,  2492,
       0,     0,     0,     0, -1813,     0, -1813, -1813,     0,     0,
       0,  1235,   895,     0,     0,  1542,  1542, -1827,     0,     0,
    1542,     0, -2095,     0,     0,     0,     0,     0,     0,     0,
       0, -2095,     0,  2368,   893,  2954,  2369,     0,  2370,  2551,
    2551,  3334,     0, -1813,     0,     0, -1813, -1813, -1813,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   895,   898,
       0,  3358,     0,  1236,     0,     0,  2395,  2396,   896,     0,
    2141,  1237, -1827,     0,     0,     0,     0,     0,  1952,     0,
       0,   899,     0,  1238,     0,     0, -1827,     0,     0,     0,
       0, -1827,     0,   896,     0,     0, -1827,     0,     0,  2423,
       0,     0,  2426,     0,     0,  1222,     0, -1827,     0,     0,
       0,     0, -1827,     0,     0,  1239,     0,  1302,     0,     0,
       0,     0,     0,   893,     0,     0,     0,  2439,     0,   898,
       0,     0,     0,     0,     0,     0,     0,     0, -2095,   896,
       0,     0,     0, -1827,     0,  3090,  3091,  3092,  3093,  3094,
    3095,     0,     0,  2450,   898,     0,     0,     0,  2453,     0,
       0,  2455,  2236,  3416, -1827,     0,  1224,     0,  1241,     0,
       0,     0,     0,     0,     0,     0,     0, -2095,     0,     0,
       0,  1079,     0,     0,  3065,     0,     0,  2664,  3066,     0,
    1242,   895,     0,     0,     0,     0,  2237,     0,  2473,     0,
     898,  2476,  3451,  2478,     0,     0,  2178,     0,     0,   899,
       0,     0,  1244,     0, -1827,     0,     0, -1827,  3073,     0,
       0,     0,     0, -1827,     0, -2095,     0,     0,   901,   895,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    3075,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0, -1827,     0,     0,  1724,     0,     0,  1226,     0,
       0,     0,   896,     0,     0,     0,     0,     0,     0,   899,
       0,     0,  1745,  2114, -2095,     0, -1827,     0,     0,     0,
       0,  3090,  3091,  3092,  3093,  3094,  3095,     0,     0,     0,
       0,  2559,     0,     0,   899,   895,     0,     0,     0,     0,
     896,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  3495,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   898,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   684,     0,     0,     0,     0,     0,
     899,     0,     0,     0, -2095,     0,     0,     0,     0,     0,
    1302,     0,     0,     0,     0,     0,     0,     0,  3574,     0,
     893,   898, -1827, -2095,     0,     0,     0,     0, -2095,     0,
       0, -1827,     0,     0,   895,     0,   896,     0,     0,     0,
       0,     0,     0,     0,   901,     0,     0,     0,     0,  3596,
   -1827,     0, -1827, -1827,     0,     0,     0,     0,     0,     0,
       0,     0,  2659,     0,     0,     0, -2095,     0,     0,     0,
       0,     0,  1542,  1542,  1542,  1542,  1542,     0,     0,  1542,
    1542,  1542,  1542,  1542,  1542,  1542,  1542,  1542,  1542, -1827,
       0,     0, -1827, -1827, -1827,     0,     0,   898,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  2954,     0,
       0,   893,     0,  1506,     0,   896,     0,     0,     0,     0,
       0,     0,  1952,   895,     0,     0,     0,     0,     0,     0,
     893,     0,     0,   899,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  2954,     0,     0,     0,
       0,   899,   901,     0,     0,     0,   898,     0,     0,  3673,
       0,     0,     0,     0,     0,     0,     0,     0,  2719,     0,
       0,     0,     0,     0,     0,     0,  3680,  2724,     0,     0,
       0,     0,     0,     0,   896,     0,  2732,  1542,  1542,  2735,
       0,  2737,     0,     0,  1544,     0,     0,     0,     0,  2741,
       0, -2095,     0,  3061,  3062,  3063,  3064,  2748,  2749,     0,
       0,  2752,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   901,     0,     0,     0,     0,   899,     0,     0,
       0,     0,  1079,     0,     0,  3065,     0,     0,     0,  3066,
       0,     0,     0,     0,     0,   898,     0,   901,     0,     0,
       0,     0,     0,     0,     0,     0,  2797,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  2814,  3073,
       0,     0,     0,     0,     0,     0, -2095,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   901,     0,     0,     0,     0,     0,  1669,
       0,  3075,     0,     0,     0,     0,   899,     0, -2095,     0,
       0,     0,     0,     0,     0,  3090,  3091,  3092,  3093,  3094,
    3095,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1669,     0,     0,     0,     0,     0,     0,     0,
     895,     0,     0,     0,     0,     0,  1506,     0,     0,  1633,
       0,  1506,  1634,     0,     0,     0,  1635,  1636,  1637,  1638,
    1639,  1640,     0,     0,  3498,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1641,     0,     0,
       0,     0,     0,     0,     0,   899,  1643,     0,     0,     0,
       0,     0,     0,  1644,     0, -2095,     0,     0,     0,     0,
       0,     0,     0,  1909,  1911,     0,     0,     0,     0,     0,
       0,     0,     0,     0, -2095,     0,   901,     0,  1645, -2095,
       0,   896,     0,     0,     0,     0,     0,     0,  3010,  3011,
       0,   895,     0,     0,     0,     0,  3016,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  3021,     0,     0,
     895,  3023,  3024,     0,   901,  1669,  3025, -2095,     0,     0,
    1669,  3028,     0,     0,  3031,  3032,     0,     0,     0,  3036,
    3242,  3243,  3244,  3245,  3246,  3247,  3248,     0,     0,     0,
    3253,  3254,   898,  1079,     0,  3263,  3065,     0,  3265,     0,
    3066,  3272,  3273,  3274,  3275,  3276,  3277,  3278,  3279,  3280,
    3281,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   896,  1952,     0,     0,  1136,     0,     0,     0,
    3073,     0,  1646,     0,     0,     0,     0, -2095,     0,     0,
     901,   896,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1647,     0,     0,     0,     0,  1648,     0,     0,     0,
       0,     0,  3075,     0,  3121,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1649,  1650,
    1542,  1542,     0,   898,     0,     0,     0,     0,     0,     0,
       0,  3140,     0,     0,  1651,     0,     0,     0,     0,     0,
       0,     0,   898,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   901,
       0,     0, -2095,     0,     0,     0,     0,     0,     0,     0,
       0,  2794,     0,  1652,     0,  3499,  1653,     0,  1909,  1911,
       0,     0,   899,     0,     0,     0,     0,     0,     0,  1506,
    1654,     0,     0,  1655,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0, -2095,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1669,     0,     0,  3167,
    3403,     0,  3406,     0,  3408, -2095,     0,     0,     0,     0,
   -2095,     0,     0,     0,     0,     0,     0,     0,  1669,     0,
    1669,     0,  1544,  1544,  1962,     0,     0,  1544,   901,     0,
    1669,     0,     0,  1669,     0,     0,     0,     0,  1669,     0,
       0,  1669,     0,     0,     0,     0,     0,     0, -2095, -2095,
    1617,     0,     0,   899,     0,     0,  3090,  3091,  3092,  3093,
    3094,  3095,     0,     0,     0,     0,  2450,     0,     0,  1656,
       0,     0,   899,     0,     0,     0,     0,  3221,  3222,     0,
       0,  3223,     0,  1669,     0,     0,     0,  1669,     0,     0,
    1669,  1669,  1669,     0,     0,     0,  1669,     0,     0,     0,
    1669,     0,     0,     0,  1952,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1542,     0,     0,     0,
       0,     0,     0,     0,  3486,     0,     0,  3489,  3490,     0,
       0,     0,     0,     0,     0,  1543,  3494,     0,     0,     0,
       0,     0,     0,  3500,     0,     0,  1136,     0,     0,     0,
       0,     0,     0,     0,  3294,  3022,     0,  1633,  1669,     0,
    1634,     0,     0,     0,  1635,     0,     0,  1638,  1639,  1640,
       0,     0,  3304,     0,     0,     0,  1657,     0,     0,  1658,
    1659,  1660,     0,  1661,  1662,  1663,  1664,  1665,  1666,     0,
       0,     0,     0,     0,  1643,     0,  1938,     0,     0,     0,
       0,  1644,     0, -2095,     0,     0,     0,  1669,     0,     0,
       0,     0,     0,     0,     0,  2794,  2794,  2794,  2794,     0,
       0,  3563,  3564,  1669,     0,  3565,  1645,     0,  1669,  3568,
       0,     0,  3571,  3572,     0,     0,     0,     0,     0,     0,
       0,  3357,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  3010,
       0,     0,     0,  3374,     0,     0,     0,  3377,     0,     0,
    1542,     0,     0,     0,     0,   901,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  3616,  3617,     0,     0,  3618,     0,     0,
   -2095,     0,     0,     0,     0,     0,     0,  3090,  3091,  3092,
    3093,  3094,  3095,     0,     0,     0,  1506,     0,     0,     0,
    1646,     0,     0,     0,  1136,  1079,     0,     0,  3065,     0,
       0,     0,  3066,     0,     0,     0,     0,     0,     0,  1647,
       0,  3427,     0,     0,  1648,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   901,     0,     0,     0,
       0,     0,  3073,     0,     0,     0, -2095, -2095,     0, -2095,
       0,     0,     0,     0,     0,   901,     0,     0,     0,     0,
       0,     0,  1651,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  3075,     0,     0,  3461,     0,     0,
       0,  1542,     0,     0,  1669,     0,     0,  3010,     0,     0,
       0,     0,     0,     0,     0,     0,  1962,  1962,     0,  1544,
    1544,  1544,  1544,  1544, -2095,     0,  1544,  1544,  1544,  1544,
    1544,  1544,  1544,  1544,  1544,  1544,  1962,     0,  1654,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1136,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  3573,     0,     0,
    3524,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  2794,  2794,  2794,  2794,  2794,  2794,  2794,     0,
       0,     0,  2794,  2794,     0,     0,     0,  2794, -2095,     0,
    2794,     0,     0,  2794,  2794,  2794,  2794,  2794,  2794,  2794,
    2794,  2794,  2794,     0,     0,     0,     0, -2095,     0,     0,
       0,     0, -2095,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1656,  1669,     0,
       0,     0,  1669,  1669,  1669,  1669,  1669,  1669,  1669,     0,
       0,     0,     0,     0,  1544,  1544,     0,  1669,  1669,     0,
   -2095,     0,     0,     0,     0,     0,     0,     0,     0,  1669,
       0,     0,  1669,     0,     0,     0,     0,     0,     0,     0,
    1669,  1669,  1669,  1669,  1669,  1669,  1669,  1669,  1669,  1669,
       0,     0,  3605,  3605,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1669,     0,  1952,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1543,  1543,     0,     0,     0,  1543,     0,
    3605,     0,     0,     0,  1657,     0,     0,  1658,  1659,  1660,
       0,  1661,  1662,  1663,  1664,  1665,  1666,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1542,  1542,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  2794,     0,  2794,     0,  2794,     0,     0,     0,
       0,     0,     0,     0,     0,  3605,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0, -2095,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1632,     0,
    1669,  1669,  1669,  1633,     0,     0,  1634,     0,     0,     0,
    1635,  1636,  1637,  1638,  1639,  1640,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  2127,     0,
       0,  1641,     0,     0,     0,  1642,     0,     0,     0,     0,
    1643,     0,     0,     0,     0,     0,     0,  1644,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1542,
       0,     0,     0,     0,     0,     0,  2794,     0,     0,  2794,
    2794,     0,  1645,     0,     0,     0,     0,     0,  2794,     0,
    1542,  1542, -2095,     0,  1543,  2794,     0,     0,     0,  3090,
    3091,  3092,  3093,  3094,  3095,     0,     0,     0,     0,     0,
       0,  1669,  1669,  1669,     0,     0,  1962,  1962,  1962,  1962,
    1962,     0,     0,     0,  1962,  1962,  1962,  1962,  1962,  1962,
    1962,  1962,  1962,  1962,     0,     0,     0,     0,  1669,  1669,
       0,     0,     0,  1633,     0,     0,  1634,     0,     0,     0,
    1635,  1636,  1637,  1638,  1639,  1640,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1669,     0,     0,  1669,
       0,  1641,     0,  2794,  2794,     0,     0,  2794,     0,     0,
    1643,  2794,  1669,     0,  2794,  2794,  1646,  1644,     0,     0,
       0,     0,     0,  1669,  1079,     0,  1669,  3065,  1669,     0,
       0,  3066,  1962,  1962,     0,  1647,     0,     0,     0,     0,
    1648,     0,  1645,     0,     0,     0,  1669,  1544,  1544,  1669,
       0,  1669,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  3073,  1649,  1650,  1633,     0,     0,  1634, -2095,     0,
       0,  1635,  1636,  1637,  1638,  1639,  1640,     0,  1651,     0,
       0,     0,     0,     0,     0,  2794,  2794,     0,     0,  2794,
       0,     0,  1641,  3075,     0,     0,     0,     0,     0,     0,
       0,  1643,     0,     0,     0,     0,     0,     0,  1644,     0,
       0,     0,     0,     0,     0,     0,     0,  1652,     0,     0,
    1653,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1669,  1645,  1654,     0,     0,  1655,     0,     0,
    1543,  1543,  1543,  1543,  1543,     0,  1646,  1543,  1543,  1543,
    1543,  1543,  1543,  1543,  1543,  1543,  1543,     0,     0,     0,
       0,     0,     0,     0,     0,  1647,     0,     0,     0,     0,
    1648,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1649,  1650,     0,     0,     0, -2095,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1651,     0,
       0,     0,     0,     0,     0,     0, -2095,     0,     0,     0,
       0, -2095,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1669,  1656,     0,     0,     0,  1646,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1652,     0,     0,
    1653,     0,     0,     0,     0,     0,  1647,     0,     0, -2095,
       0,  1648,     0,  1544,  1654,     0,     0,  1655,     0,     0,
       0,     0,     0,     0,     0,  1543,  1543,     0,     0,     0,
       0,     0,     0,  1649,  1650,     0,     0,     0,     0,     0,
       0,     0,  1669,     0,     0,     0,     0,  1669,     0,  1651,
       0,     0,     0,     0,     0,  1669,     0,     0,  1669,     0,
    1669,     0,     0,     0,  1669,  1952,     0,  1962,  1962,     0,
       0,  1669,  1669,     0,     0,  1669,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1652,     0,
    1657,  1653,     0,  1658,  1659,  1660,     0,  1661,  1662,  1663,
    1664,  1665,  1666,     0,     0,  1654,     0,     0,  1655,     0,
       0,     0,     0,  1656,     0,     0,  3096,     0,     0,     0,
    1669,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1669,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0, -2095,     0,     0,  1544,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1656,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1657,     0,     0,  1658,  1659,  1660,     0,  1661,  1662,  1663,
    1664,  1665,  1666,     0,     0,     0,     0,  2059,     0,     0,
    1633,     0,     0,  1634,     0,     0,     0,  1635,  1636,  1637,
    1638,  1639,  1640,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1641,     0,
       0, -2095,     0,     0,     0,     0,     0,  1643,  3090,  3091,
    3092,  3093,  3094,  3095,  1644,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1962,  1544,  1645,
       0,  1657,     0,     0,  1658,  1659,  1660,     0,  1661,  1662,
    1663,  1664,  1665,  1666,     0,     0,     0,     0,  2367,     0,
       0,     0,     0,  1669,  1669,     0,     0,     0,     0,  1669,
       0,     0,     0,     0,  1669,     0,  1669,  1669,  1669,     0,
       0,  1669,     0,     0,  1669,  1669,     0,     0,     0,  1669,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  3096,  3096,  3096,  3096,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1646,     0,     0,     0,  1633,  1543,  1543,
    1634,     0,     0,     0,  1635,  1636,  1637,  1638,  1639,  1640,
       0,     0,  1647,     0,     0,     0,     0,  1648,     0,     0,
       0,     0,     0,     0,  1669,  1641,     0,     0,     0,     0,
    1962,     0,     0,     0,  1643,     0,     0,     0,     0,  1649,
    1650,  1644,     0,  1669,     0,     0,     0,     0,     0,  2795,
       0,     0,     0,     0,     0,  1651,     0,     0,     0,     0,
       0,     0,     0,     0,  1633,     0,  1645,  1634,     0,     0,
    1669,  1635,  1636,  1637,  1638,  1639,  1640,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1641,     0,  1652,     0,     0,  1653,     0,     0,
       0,  1643,  1962,     0,     0,     0,     0,     0,  1644,     0,
       0,  1654,     0,     0,  1655,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1669,  1669,  1669,     0,     0,     0,
       0,     0,     0,  1645,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  3096,  3096,  3096,  3096,  3096,
    3096,  3096,     0,  1544,  1544,     0,  3096,  3096,     0,     0,
       0,     0,     0,     0,     0,     0,  3096,     0,  3096,     0,
    1646,     0,     0,     0,     0,  3096,  3096,  3096,  3096,  3096,
    3096,  3096,  3096,  3096,  3096,     0,     0,     0,     0,  1647,
       0,     0,     0,     0,  1648,     0,     0,  1669,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1669,     0,     0,
    1656,     0,     0,     0,  1543,     0,  1649,  1650,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1651,     0,     0,     0,     0,  1646,     0,     0,
       0,  1633,     0,     0,  1634,     0,     0,     0,  1635,  1636,
    1637,  1638,  1639,  1640,     0,     0,  1647,     0,     0,     0,
    1669,  1648,     0,     0,     0,     0,     0,     0,     0,  1641,
       0,  1652,     0,     0,  1653,     0,     0,  1669,  1643,     0,
    1669,     0,     0,  1649,  1650,  1644,  1544,     0,  1654,     0,
       0,  1655,     0,     0,  1962,  1962,     0,     0,     0,  1651,
       0,     0,     0,     0,     0,     0,  3096,  1544,  1544,  3096,
    1645,  3096,     0,  2795,  2795,  2795,  2795,  1657,     0,     0,
    1658,  1659,  1660,     0,  1661,  1662,  1663,  1664,  1665,  1666,
    1669,     0,     0,     0,  2457,     0,     0,     0,  1652,     0,
       0,  1653,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1654,     0,     0,  1655,     0,
       0,     0,     0,     0,  1669,     0,     0,     0,  1543,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1962,     0,     0,  1656,     0,  3096,
       0,     0,  3096,  3096,     0,     0,     0,  3096,     0,  1962,
    1962,     0,     0,  3096,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1646,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1669,     0,     0,
       0,     0,     0,  1647,     0,     0,     0,     0,  1648,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1656,     0,     0,     0,     0,     0,
    1649,  1650,     0,     0,     0,     0,  3096,  3096,  3096,     0,
       0,  3096,     0,     0,  3096,  3096,  1651,     0,     0,  1633,
       0,     0,  1634,     0,     0,     0,  1635,  1636,  1637,  1638,
    1639,  1640,     0,     0,  1657,     0,     0,  1658,  1659,  1660,
       0,  1661,  1662,  1663,  1664,  1665,  1666,  1641,  1669,  1543,
       0,  2688,     0,     0,     0,  1652,  1643,     0,  1653,  3096,
    3096,  3096,     0,  1644,     0,     0,     0,     0,     0,     0,
       0,     0,  1654,     0,     0,  1655,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1645,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1657,     0,     0,  1658,  1659,  1660,     0,  1661,  1662,
    1663,  1664,  1665,  1666,     0,     0,     0,     0,  2730,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    2795,  2795,  2795,  2795,  2795,  2795,  2795,     0,     0,     0,
    2795,  2795,   540,     0,     0,  2795,     0,     0,  2795,     0,
       0,  2795,  2795,  2795,  2795,  2795,  2795,  2795,  2795,  2795,
    2795,  3282,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1656,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1646,     0,     0,     0,     0,   541,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1647,     0,   542,     0,     0,  1648,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   543,     0,     0,     0,     0,     0,     0,  1649,  1650,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1651,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     544,     0,     0,     0,     0,     0,     0,     0,  1657,     0,
     545,  1658,  1659,  1660,     0,  1661,  1662,  1663,  1664,  1665,
    1666,     0,   546,  1652,     0,  2822,  1653,   547,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1654,     0,     0,  1655,  1543,  1543,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   548,     0,     0,
    2795,     0,  2795,     0,  2795,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   549,     0,     0,     0,   550,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1656,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   551,     0,     0,     0,  1543,     0,     0,
       0,     0,     0,     0,  2795,     0,     0,  2795,  2795,   552,
     553,     0,     0,     0,     0,     0,  2795,     0,  1543,  1543,
       0,     0,     0,  2795,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   554,     0,     0,   555,     0,     0,
       0,     0,     0,     0,     0,   556,     0,     0,   557,     0,
       0,     0,     0,     0,     0,     0,  1657,     0,     0,  1658,
    1659,  1660,     0,  1661,  1662,  1663,  1664,  1665,  1666,   558,
       0,     0,     0,  3034,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   559,     0,     0,     0,     0,     0,     0,
     560,  2795,  2795,     0,     0,  2795,     0,     0,     0,  2795,
     561,     0,  2795,  2795,     0,     0,   562,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   563,     0,     0,   107,  1076,   516,  1077,
    1078,  1079,  1080,  1081,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   108,   109,   110,   111,     0,   112,
     113,   114,   115,     0,   116,   117,   118,     0,     0,     0,
       0,     0,  1082,  2795,  2795,   119,   120,  2795,   121,   122,
     123,   124,   125,   126,   127,   128,  1083,   130,  1084,  1085,
       0,   133,   134,   135,   136,   137,   138,  1086,   608,   139,
     140,  1087,  1088,   143,     0,   144,   145,   146,   147,   609,
       0,   610,     0,  1089,   151,   152,   153,   154,   155,   156,
     157,   158,   159,     0,   160,   161,   162,   163,   164,     0,
       0,   165,   166,   167,   168,   611,   612,   613,   614,   615,
     616,   617,   174,   175,   176,   177,   178,   179,   180,  1090,
    1091,   183,  1092,   184,     0,   185,   186,   187,   188,   189,
     190,     0,   191,     0,   192,   193,   194,   195,     0,     0,
     196,   197,   845,   199,   200,     0,     0,     0,   201,   202,
     203,     0,   204,   205,   206,     0,   207,   208,   209,   210,
    1093,   212,   213,   214,   215,   216,   618,  1094,   218,     0,
     219,   220,  1095,   222,     0,   223,     0,   224,   225,    21,
     226,   227,   228,   229,   230,   231,     0,   232,     0,     0,
       0,  1096,  1097,     0,   235,     0,   236,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,     0,   248,
     249,   250,   251,   252,   253,     0,   254,   255,   256,   257,
     258,   259,   260,   261,  1098,  1099,     0,  1100,     0,   265,
     266,   267,   268,   269,   270,     0,   271,   272,   273,   274,
     275,     0,     0,   276,   277,   278,   279,     0,   280,   281,
     282,   621,   622,   283,   284,   285,   286,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,  1101,   308,  1102,
     310,   311,   312,     0,   313,  1103,   314,   315,   316,   317,
    1104,   623,   319,  1105,   321,   322,   323,     0,   324,   325,
       0,     0,  1106,   327,   328,     0,     0,   329,   330,   331,
     332,   333,   625,   335,   336,   337,   338,   339,   340,   341,
     342,   343,     0,     0,   344,     0,   345,   346,   626,   348,
     349,   350,   351,   352,   353,   354,     0,   355,   356,   357,
     358,   359,     0,     0,   360,     0,   361,   362,   363,  1107,
     365,   366,   367,   368,     0,   369,   370,   371,     0,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,     0,
     382,   383,   384,   385,   386,   387,  1108,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,    29,   400,
     401,   402,   403,   404,   628,   406,   407,   408,   409,     0,
     410,   411,     0,   412,  1109,   414,     0,     0,   415,   416,
     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
     427,   428,   629,   430,     0,   431,   432,    34,   433,   434,
     435,   436,   437,   438,   439,     0,  1110,  1111,     0,     0,
       0,   442,   443,   630,   445,   631,  1112,   447,   448,   632,
     450,   451,   452,   453,   454,     0,     0,   455,   456,   457,
     458,   459,   460,   633,     0,   462,   463,   464,   465,   466,
     634,  1113,     0,   469,   470,   471,     0,   472,   473,   474,
     475,     0,     0,     0,   476,     0,    39,   477,   478,   479,
     480,   481,   482,   483,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,  1114,     0,
      40,     0,     0,     0,     0,  1115,  1116,     0,     0,     0,
       0,     0,  1118,     0,  1119,  3210,     0,     0,     0,     0,
    1120,  1121,     0,     0,     0,     0,  1122,  1123,  1258,  1076,
     516,  1077,  1078,  1079,  1080,  1081,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   108,   109,   110,   111,
       0,   112,   113,   114,   115,  1259,   116,   117,   118,     0,
       0,     0,     0,     0,  1082,     0,     0,   119,   120,     0,
     121,   122,   123,  1260,   125,   126,   127,   128,  1083,  1261,
    1084,  1085,     0,   133,   134,   135,   136,   137,   138,  1086,
     608,   139,   140,  1087,  1088,   143,     0,   144,   145,   146,
     147,   609,     0,  1262,     0,  1263,   151,   152,   153,   154,
     155,  1264,   157,   158,   159,     0,   160,   161,   162,   163,
     164,     0,     0,  1265,   166,   167,   168,  1266,  1267,  1268,
    1269,   615,   616,  1270,   174,   175,   176,   177,   178,   179,
     180,  1090,  1091,   183,  1092,   184,     0,   185,   186,   187,
     188,   189,   190,     0,   191,     0,   192,   193,   194,   195,
    1271,     0,   196,   197,   845,   199,   200,     0,     0,     0,
     201,   202,   203,     0,   204,   205,   206,     0,   207,   208,
     209,   210,  1093,   212,   213,   214,   215,   216,   618,  1094,
     218,     0,   219,   220,  1095,   222,     0,   223,     0,   224,
    1272,     0,  1273,   227,   228,  1274,  1275,   231,     0,   232,
       0,     0,     0,  1096,  1097,     0,   235,     0,   236,   237,
     238,   239,   240,   241,   242,  1276,   244,   245,   246,   247,
       0,   248,   249,   250,   251,   252,   253,     0,   254,  1277,
     256,   257,   258,   259,   260,   261,  1098,  1099,     0,  1100,
       0,   265,  1278,  1279,   268,  1280,   270,     0,   271,   272,
     273,   274,   275,     0,     0,   276,  1281,   278,  1282,     0,
     280,   281,   282,   621,   622,   283,   284,   285,   286,   287,
    1283,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,  1101,
    1284,  1102,   310,   311,   312,     0,   313,  1103,   314,   315,
    1285,   317,  1104,   623,   319,  1105,   321,   322,   323,     0,
     324,   325,     0,     0,  1106,   327,   328,     0,     0,   329,
     330,  1286,   332,  1287,   625,   335,   336,   337,   338,   339,
     340,   341,   342,   343,     0,     0,   344,     0,   345,   346,
     626,  1288,   349,   350,   351,   352,   353,   354,     0,   355,
     356,   357,   358,   359,     0,     0,   360,     0,   361,   362,
     363,  1107,   365,   366,   367,   368,     0,   369,   370,   371,
       0,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,     0,   382,   383,  1289,   385,   386,   387,  1108,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
       0,   400,   401,   402,   403,   404,  1290,   406,   407,   408,
     409,     0,   410,  1291,     0,   412,  1109,   414,     0,     0,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,  1292,   428,   629,   430,     0,   431,   432,     0,
     433,  1293,   435,   436,   437,   438,   439,     0,  1110,  1111,
       0,     0,     0,   442,   443,   630,   445,   631,  1112,   447,
     448,  1294,   450,   451,   452,   453,   454,     0,     0,   455,
     456,   457,   458,   459,   460,  1295,     0,   462,   463,   464,
     465,   466,   467,  1113,  1296,   469,  1297,   471,     0,   472,
     473,   474,   475,     0,     0,     0,   476,     0,     0,   477,
     478,   479,   480,   481,   482,   483,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
    1114,     0,     0,     0,     0,     0,     0,  1115,  1116,  1298,
       0,     0,     0,     0,  1118,     0,  1119,  1299,     0,     0,
       0,     0,  1120,  1121,     0,     0,     0,     0,  1122,  1123,
     107,  1076,   516,  1077,  1078,  1079,  1080,  1081,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   108,   109,
     110,   111,     0,   112,   113,   114,   115,     0,   116,   117,
     118,     0,     0,     0,     0,     0,  1082,     0,     0,   119,
     120,     0,   121,   122,   123,   124,   125,   126,   127,   128,
    1083,   130,  1084,  1085,     0,   133,   134,   135,   136,   137,
     138,  1086,   608,   139,   140,  1087,  1088,   143,     0,   144,
     145,   146,   147,   609,     0,   610,     0,  1089,   151,   152,
     153,   154,   155,   156,   157,   158,   159,     0,   160,   161,
     162,   163,   164,     0,     0,   165,   166,   167,   168,   611,
     612,   613,   614,   615,   616,   617,   174,   175,   176,   177,
     178,   179,   180,  1090,  1091,   183,  1092,   184,     0,   185,
     186,   187,   188,   189,   190,     0,   191,     0,   192,   193,
     194,   195,     0,     0,   196,   197,   845,   199,   200,     0,
       0,     0,   201,   202,   203,     0,   204,   205,   206,     0,
     207,   208,   209,   210,  1093,   212,   213,   214,   215,   216,
     618,  1094,   218,     0,   219,   220,  1095,   222,     0,   223,
       0,   224,   225,    21,   226,   227,   228,   229,   230,   231,
       0,   232,     0,     0,     0,  1096,  1097,     0,   235,     0,
     236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,     0,   248,   249,   250,   251,   252,   253,     0,
     254,   255,   256,   257,   258,   259,   260,   261,  1098,  1099,
       0,  1100,     0,   265,   266,   267,   268,   269,   270,     0,
     271,   272,   273,   274,   275,     0,     0,   276,   277,   278,
     279,     0,   280,   281,   282,   621,   622,   283,   284,   285,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,  1101,   308,  1102,   310,   311,   312,     0,   313,  1103,
     314,   315,   316,   317,  1104,   623,   319,  1105,   321,   322,
     323,     0,   324,   325,     0,     0,  1106,   327,   328,     0,
       0,   329,   330,   331,   332,   333,   625,   335,   336,   337,
     338,   339,   340,   341,   342,   343,     0,     0,   344,     0,
     345,   346,   626,   348,   349,   350,   351,   352,   353,   354,
       0,   355,   356,   357,   358,   359,     0,     0,   360,     0,
     361,   362,   363,  1107,   365,   366,   367,   368,     0,   369,
     370,   371,     0,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,     0,   382,   383,   384,   385,   386,   387,
    1108,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,    29,   400,   401,   402,   403,   404,   628,   406,
     407,   408,   409,     0,   410,   411,     0,   412,  1109,   414,
       0,     0,   415,   416,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,   427,   428,   629,   430,     0,   431,
     432,    34,   433,   434,   435,   436,   437,   438,   439,     0,
    1110,  1111,     0,     0,     0,   442,   443,   630,   445,   631,
    1112,   447,   448,   632,   450,   451,   452,   453,   454,     0,
       0,   455,   456,   457,   458,   459,   460,   633,     0,   462,
     463,   464,   465,   466,   634,  1113,     0,   469,   470,   471,
       0,   472,   473,   474,   475,     0,     0,     0,   476,     0,
      39,   477,   478,   479,   480,   481,   482,   483,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,  1114,     0,    40,     0,     0,     0,     0,  1115,
    1116,     0,     0,     0,     0,     0,  1118,     0,  1119,     0,
       0,     0,     0,     0,  1120,  1121,     0,     0,     0,     0,
    1122,  1123,   107,  1076,   516,  1077,  1078,  1079,  1080,  1081,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     108,   109,   110,   111,     0,   112,   113,   114,   115,     0,
     116,   117,   118,     0,     0,     0,     0,     0,  1082,     0,
       0,   119,   120,     0,   121,   122,   123,   124,   125,   126,
     127,   128,  1083,   130,  1084,  1085,  1551,   133,   134,   135,
     136,   137,   138,  1086,   608,   139,   140,  1087,  1088,   143,
       0,   144,   145,   146,   147,   609,     0,   610,     0,  1089,
     151,   152,   153,   154,   155,   156,   157,   158,   159,     0,
     160,   161,   162,   163,   164,     0,     0,   165,   166,   167,
     168,   611,   612,   613,   614,   615,   616,   617,   174,   175,
     176,   177,   178,   179,   180,  1090,  1091,   183,  1092,   184,
       0,   185,   186,   187,   188,   189,   190,     0,   191,     0,
     192,   193,   194,   195,     0,     0,   196,   197,   845,   199,
     200,     0,     0,     0,   201,   202,   203,     0,   204,   205,
     206,     0,   207,   208,   209,   210,  1093,   212,   213,   214,
     215,   216,   618,  1094,   218,     0,   219,   220,  1095,   222,
       0,   223,     0,   224,   225,  1552,   226,   227,   228,   229,
     230,   231,     0,   232,     0,     0,     0,  1096,  1097,     0,
     235,     0,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,     0,   248,   249,   250,   251,   252,
     253,     0,   254,   255,   256,   257,   258,   259,   260,   261,
    1098,  1099,     0,  1100,     0,   265,   266,   267,   268,   269,
     270,     0,   271,   272,   273,   274,   275,     0,  1553,   276,
     277,   278,   279,     0,   280,   281,   282,   621,   622,   283,
     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,  1101,   308,  1102,   310,   311,   312,     0,
     313,  1103,   314,   315,   316,   317,  1104,   623,   319,  1105,
     321,   322,   323,     0,   324,   325,     0,     0,  1106,   327,
     328,     0,     0,   329,   330,   331,   332,   333,   625,   335,
     336,   337,   338,   339,   340,   341,   342,   343,     0,     0,
     344,     0,   345,   346,   626,   348,   349,   350,   351,   352,
     353,   354,     0,   355,   356,   357,   358,   359,     0,     0,
     360,     0,   361,   362,   363,  1107,   365,   366,   367,   368,
       0,   369,   370,   371,     0,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,     0,   382,   383,   384,   385,
     386,   387,  1108,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,     0,   400,   401,   402,   403,   404,
     628,   406,   407,   408,   409,     0,   410,   411,     0,   412,
    1109,   414,     0,     0,   415,   416,   417,   418,   419,   420,
     421,   422,   423,   424,   425,   426,   427,   428,   629,   430,
       0,   431,   432,     0,   433,   434,   435,   436,   437,   438,
     439,     0,  1110,  1111,     0,     0,  1554,   442,   443,   630,
     445,   631,  1112,   447,   448,   632,   450,   451,   452,   453,
     454,     0,     0,   455,   456,   457,   458,   459,   460,   633,
       0,   462,   463,   464,   465,   466,   467,  1113,     0,   469,
     470,   471,     0,   472,   473,   474,   475,     0,     0,     0,
     476,     0,     0,   477,   478,   479,   480,   481,   482,   483,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,  1114,     0,     0,     0,     0,     0,
       0,  1115,  1116,     0,     0,     0,     0,     0,  1118,     0,
    1119,     0,     0,     0,     0,     0,  1120,  1121,     0,     0,
       0,     0,  1122,  1123,   107,  1076,   516,  1077,  1078,  1079,
    1080,  1081,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   108,   109,   110,   111,     0,   112,   113,   114,
     115, -1187,   116,   117,   118,     0,     0,     0, -1187,     0,
    1082,     0,     0,   119,   120,     0,   121,   122,   123,   124,
     125,   126,   127,   128,  1083,   130,  1084,  1085,     0,   133,
     134,   135,   136,   137,   138,  1086,   608,   139,   140,  1087,
    1088,   143,     0,   144,   145,   146,   147,   609,     0,   610,
       0,  1089,   151,   152,   153,   154,   155,   156,   157,   158,
     159,     0,   160,   161,   162,   163,   164,     0,     0,   165,
     166,   167,   168,   611,   612,   613,   614,   615,   616,   617,
     174,   175,   176,   177,   178,   179,   180,  1090,  1091,   183,
    1092,   184,     0,   185,   186,   187,   188,   189,   190,     0,
     191,     0,   192,   193,   194,   195,     0,     0,   196,   197,
     845,   199,   200,     0,     0,     0,   201,   202,   203,     0,
     204,   205,   206,     0,   207,   208,   209,   210,  1093,   212,
     213,   214,   215,   216,   618,  1094,   218,     0,   219,   220,
    1095,   222,     0,   223,     0,   224,   225,     0,   226,   227,
     228,   229,   230,   231,     0,   232,     0,     0,     0,  1096,
    1097,     0,   235,     0,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,     0,   248,   249,   250,
     251,   252,   253,     0,   254,   255,   256,   257,   258,   259,
     260,   261,  1098,  1099,     0,  1100,     0,   265,   266,   267,
     268,   269,   270,     0,   271,   272,   273,   274,   275,     0,
       0,   276,   277,   278,   279,     0,   280,   281,   282,   621,
     622,   283,   284,   285,   286,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,  1101,   308,  1102,   310,   311,
     312,     0,   313,  1103,   314,   315,   316,   317,  1104,   623,
     319,  1105,   321,   322,   323,     0,   324,   325,     0,     0,
    1106,   327,   328,     0,     0,   329,   330,   331,   332,   333,
     625,   335,   336,   337,   338,   339,   340,   341,   342,   343,
       0,     0,   344,     0,   345,   346,   626,   348,   349,   350,
     351,   352,   353,   354,     0,   355,   356,   357,   358,   359,
       0,     0,   360,     0,   361,   362,   363,  1107,   365,   366,
     367,   368,     0,   369,   370,   371,     0,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,     0,   382,   383,
     384,   385,   386,   387,  1108,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,     0,   400,   401,   402,
     403,   404,   628,   406,   407,   408,   409,     0,   410,   411,
       0,   412,  1109,   414, -1187,     0,   415,   416,   417,   418,
     419,   420,   421,   422,   423,   424,   425,   426,   427,   428,
     629,   430,     0,   431,   432,     0,   433,   434,   435,   436,
     437,   438,   439,     0,  1110,  1111,     0,     0,     0,   442,
     443,   630,   445,   631,  1112,   447,   448,   632,   450,   451,
     452,   453,   454,     0,     0,   455,   456,   457,   458,   459,
     460,   633,     0,   462,   463,   464,   465,   466,   467,  1113,
       0,   469,   470,   471,     0,   472,   473,   474,   475,     0,
       0,     0,   476,     0,     0,   477,   478,   479,   480,   481,
     482,   483,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,  1114,     0,     0,     0,
       0,     0,     0,  1115,  1116,     0,     0,     0,     0,     0,
    1118,     0,  1119,     0,     0,     0,     0,     0,  1120,  1121,
       0,     0,     0,     0,  1122,  1123,   107,  1076,   516,  1077,
    1078,  1079,  1080,  1081,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   108,   109,   110,   111,     0,   112,
     113,   114,   115,  1720,   116,   117,   118,     0,     0,     0,
       0,     0,  1082,     0,     0,   119,   120,     0,   121,   122,
     123,   124,   125,   126,   127,   128,  1083,   130,  1084,  1085,
       0,   133,   134,   135,   136,   137,   138,  1086,   608,   139,
     140,  1087,  1088,   143,     0,   144,   145,   146,   147,   609,
       0,   610,     0,  1089,   151,   152,   153,   154,   155,   156,
     157,   158,   159,     0,   160,   161,   162,   163,   164,     0,
       0,   165,   166,   167,   168,   611,   612,   613,   614,   615,
     616,   617,   174,   175,   176,   177,   178,   179,   180,  1090,
    1091,   183,  1092,   184,     0,   185,   186,   187,   188,   189,
     190,     0,   191,     0,   192,   193,   194,   195,     0,     0,
     196,   197,   845,   199,   200,     0,     0,     0,   201,   202,
     203,     0,   204,   205,   206,     0,   207,   208,   209,   210,
    1093,   212,   213,   214,   215,   216,   618,  1094,   218,     0,
     219,   220,  1095,   222,     0,   223,     0,   224,   225,     0,
     226,   227,   228,   229,   230,   231,     0,   232,     0,     0,
       0,  1096,  1097,     0,   235,     0,   236,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,     0,   248,
     249,   250,   251,   252,   253,     0,   254,   255,   256,   257,
     258,   259,   260,   261,  1098,  1099,     0,  1100,     0,   265,
     266,   267,   268,   269,   270,     0,   271,   272,   273,   274,
     275,     0,     0,   276,   277,   278,   279,     0,   280,   281,
     282,   621,   622,   283,   284,   285,   286,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,  1101,   308,  1102,
     310,   311,   312,     0,   313,  1103,   314,   315,   316,   317,
    1104,   623,   319,  1105,   321,   322,   323,     0,   324,   325,
       0,     0,  1106,   327,   328,     0,     0,   329,   330,   331,
     332,   333,   625,   335,   336,   337,   338,   339,   340,   341,
     342,   343,     0,     0,   344,     0,   345,   346,   626,   348,
     349,   350,   351,   352,   353,   354,     0,   355,   356,   357,
     358,   359,     0,     0,   360,     0,   361,   362,   363,  1107,
     365,   366,   367,   368,     0,   369,   370,   371,     0,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,     0,
     382,   383,   384,   385,   386,   387,  1108,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,     0,   400,
     401,   402,   403,   404,   628,   406,   407,   408,   409,     0,
     410,   411,     0,   412,  1109,   414,     0,     0,   415,   416,
     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
     427,   428,   629,   430,     0,   431,   432,     0,   433,   434,
     435,   436,   437,   438,   439,     0,  1110,  1111,     0,     0,
       0,   442,   443,   630,   445,   631,  1112,   447,   448,   632,
     450,   451,   452,   453,   454,     0,     0,   455,   456,   457,
     458,   459,   460,   633,     0,   462,   463,   464,   465,   466,
     467,  1113,     0,   469,   470,   471,     0,   472,   473,   474,
     475,     0,     0,     0,   476,     0,     0,   477,   478,   479,
     480,   481,   482,   483,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,  1114,     0,
       0,     0,     0,     0,     0,  1115,  1116,  1721,     0,     0,
       0,     0,  1118,     0,  1119,     0,     0,     0,     0,     0,
    1120,  1121,     0,     0,     0,     0,  1122,  1123,   107,  1076,
     516,  1077,  1078,  1079,  1080,  1081,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   108,   109,   110,   111,
       0,   112,   113,   114,   115,  2997,   116,   117,   118,     0,
       0,     0,     0,     0,  1082,     0,     0,   119,   120,     0,
     121,   122,   123,   124,   125,   126,   127,   128,  1083,   130,
    1084,  1085,     0,   133,   134,   135,   136,   137,   138,  1086,
     608,   139,   140,  1087,  1088,   143,     0,   144,   145,   146,
     147,   609,     0,   610,     0,  1089,   151,   152,   153,   154,
     155,   156,   157,   158,   159,     0,   160,   161,   162,   163,
     164,     0,     0,   165,   166,  2998,   168,   611,   612,   613,
     614,   615,   616,   617,   174,   175,   176,   177,   178,   179,
     180,  1090,  1091,   183,  1092,   184,     0,   185,   186,   187,
     188,   189,   190,     0,   191,     0,   192,   193,   194,   195,
       0,     0,   196,   197,   845,   199,   200,     0,     0,     0,
     201,   202,   203,     0,   204,   205,   206,     0,   207,   208,
     209,   210,  1093,   212,   213,   214,   215,   216,   618,  1094,
     218,     0,   219,   220,  1095,   222,     0,   223,     0,   224,
     225,     0,   226,   227,   228,   229,   230,   231,     0,   232,
       0,     0,     0,  2999,  1097,     0,   235,     0,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
       0,   248,   249,   250,   251,   252,   253,     0,   254,   255,
     256,   257,   258,   259,   260,   261,  1098,  1099,     0,  1100,
       0,   265,   266,   267,   268,   269,   270,     0,   271,   272,
     273,   274,   275,     0,     0,   276,   277,   278,   279,     0,
     280,   281,   282,   621,   622,   283,   284,   285,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,  1101,
     308,  1102,   310,   311,   312,     0,   313,  1103,   314,   315,
     316,   317,  1104,   623,   319,  1105,   321,   322,   323,     0,
     324,   325,     0,     0,  1106,   327,   328,     0,     0,   329,
     330,   331,   332,   333,   625,   335,   336,   337,   338,   339,
     340,   341,   342,   343,     0,     0,   344,     0,   345,   346,
     626,   348,   349,   350,   351,   352,   353,   354,     0,   355,
     356,   357,   358,   359,     0,     0,   360,     0,   361,   362,
     363,  1107,   365,   366,   367,   368,     0,   369,   370,   371,
       0,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,     0,   382,   383,   384,   385,   386,  3000,  1108,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
       0,   400,   401,   402,   403,   404,   628,   406,   407,   408,
     409,     0,   410,   411,     0,   412,  1109,   414,     0,     0,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   629,   430,     0,   431,   432,     0,
     433,   434,   435,   436,   437,   438,   439,     0,  1110,  1111,
       0,     0,     0,   442,   443,   630,   445,   631,  1112,   447,
     448,   632,   450,   451,   452,   453,   454,     0,     0,   455,
     456,   457,   458,   459,   460,   633,     0,   462,   463,   464,
     465,   466,   467,  1113,     0,   469,   470,   471,     0,   472,
     473,   474,   475,     0,     0,     0,   476,     0,     0,   477,
     478,   479,   480,   481,   482,   483,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
    1114,     0,     0,     0,     0,     0,     0,  1115,  1116,  3001,
       0,     0,     0,     0,  1118,     0,  3002,     0,     0,     0,
       0,     0,  1120,  1121,     0,     0,     0,     0,  1122,  1123,
     107,  1076,   516,  1077,  1078,  1079,  1080,  1081,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   108,   109,
     110,   111,     0,   112,   113,   114,   115,     0,   116,   117,
     118,     0,     0,     0,     0,     0,  1082,     0,     0,   119,
     120,     0,   121,   122,   123,   124,   125,   126,   127,   128,
    1083,   130,  1084,  1085,     0,   133,   134,   135,   136,   137,
     138,  1086,   608,   139,   140,  1087,  1088,   143,     0,   144,
     145,   146,   147,   609,     0,   610,     0,  1089,   151,   152,
     153,   154,   155,   156,   157,   158,   159,     0,   160,   161,
     162,   163,   164,     0,     0,   165,   166,   167,   168,   611,
     612,   613,   614,   615,   616,   617,   174,   175,   176,   177,
     178,   179,   180,  1090,  1091,   183,  1092,   184,     0,   185,
     186,   187,   188,   189,   190,     0,   191,     0,   192,   193,
     194,   195,     0,     0,   196,   197,   845,   199,   200,     0,
       0,     0,   201,   202,   203,     0,   204,   205,   206,     0,
     207,   208,   209,   210,  1093,   212,   213,   214,   215,   216,
     618,  1094,   218,     0,   219,   220,  1095,   222,     0,   223,
       0,   224,   225,     0,   226,   227,   228,   229,   230,   231,
       0,   232,     0,     0,     0,  1096,  1097,     0,   235,     0,
     236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,     0,   248,   249,   250,   251,   252,   253,     0,
     254,   255,   256,   257,   258,   259,   260,   261,  1098,  1099,
       0,  1100,     0,   265,   266,   267,   268,   269,   270,     0,
     271,   272,   273,   274,   275,     0,     0,   276,   277,   278,
     279,     0,   280,   281,   282,   621,   622,   283,   284,   285,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,  1101,   308,  1102,   310,   311,   312,     0,   313,  1103,
     314,   315,   316,   317,  1104,   623,   319,  1105,   321,   322,
     323,     0,   324,   325,     0,     0,  1106,   327,   328,     0,
       0,   329,   330,   331,   332,   333,   625,   335,   336,   337,
     338,   339,   340,   341,   342,   343,     0,     0,   344,     0,
     345,   346,   626,   348,   349,   350,   351,   352,   353,   354,
       0,   355,   356,   357,   358,   359,     0,     0,   360,     0,
     361,   362,   363,  1107,   365,   366,   367,   368,     0,   369,
     370,   371,     0,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,     0,   382,   383,   384,   385,   386,   387,
    1108,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,     0,   400,   401,   402,   403,   404,   628,   406,
     407,   408,   409,     0,   410,   411,     0,   412,  1109,   414,
       0,     0,   415,   416,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,   427,   428,   629,   430,     0,   431,
     432,     0,   433,   434,   435,   436,   437,   438,   439,     0,
    1110,  1111,     0,     0,     0,   442,   443,   630,   445,   631,
    1112,   447,   448,   632,   450,   451,   452,   453,   454,     0,
       0,   455,   456,   457,   458,   459,   460,   633,     0,   462,
     463,   464,   465,   466,   467,  1113,     0,   469,   470,   471,
       0,   472,   473,   474,   475,     0,     0,     0,   476,     0,
       0,   477,   478,   479,   480,   481,   482,   483,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,  1114,     0,     0,     0,     0,     0,     0,  1115,
    1116,  1117,     0,     0,     0,     0,  1118,     0,  1119,     0,
       0,     0,     0,     0,  1120,  1121,     0,     0,     0,     0,
    1122,  1123,   107,  1736,   516,  1077,  1078,  1079,  1737,  1081,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     108,   109,   110,   111,     0,   112,   113,   114,   115,  1738,
     116,   117,   118,     0,     0,     0,     0,     0,  1082,     0,
       0,   119,   120,     0,   121,   122,   123,   124,   125,   126,
     127,   128,  1083,   130,  1084,  1085,     0,   133,   134,   135,
     136,   137,   138,  1086,   608,   139,   140,  1087,  1088,   143,
       0,   144,   145,   146,   147,   609,     0,   610,     0,  1089,
     151,   152,   153,   154,   155,   156,   157,   158,   159,     0,
     160,   161,   162,   163,   164,     0,     0,   165,   166,   167,
     168,   611,   612,   613,   614,   615,   616,   617,   174,   175,
     176,   177,   178,   179,   180,  1090,  1091,   183,  1092,   184,
       0,   185,   186,   187,   188,   189,   190,     0,   191,     0,
     192,   193,   194,   195,     0,     0,   196,   197,   845,   199,
     200,     0,     0,     0,   201,   202,   203,     0,   204,   205,
     206,     0,   207,   208,   209,   210,  1093,   212,   213,   214,
     215,   216,   618,  1094,   218,     0,   219,   220,  1095,   222,
       0,   223,     0,   224,   225,     0,   226,   227,   228,   229,
     230,   231,     0,   232,     0,     0,     0,  1096,  1097,     0,
     235,     0,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,     0,   248,   249,   250,   251,   252,
     253,     0,   254,   255,   256,   257,   258,   259,   260,   261,
    1098,  1099,     0,  1100,     0,   265,   266,   267,   268,   269,
     270,     0,   271,   272,   273,   274,   275,     0,     0,   276,
     277,   278,   279,     0,   280,   281,   282,   621,   622,   283,
     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,  1101,   308,  1102,   310,   311,   312,     0,
     313,  1103,   314,   315,   316,   317,  1104,   623,   319,  1105,
     321,   322,   323,     0,   324,   325,     0,     0,  1106,   327,
     328,     0,     0,   329,   330,   331,   332,   333,   625,   335,
     336,   337,   338,   339,   340,   341,   342,   343,     0,     0,
     344,     0,   345,   346,   626,   348,   349,   350,   351,   352,
     353,   354,     0,   355,   356,   357,   358,   359,     0,     0,
     360,     0,   361,   362,   363,  1107,   365,   366,   367,   368,
       0,   369,   370,   371,     0,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,     0,   382,   383,   384,   385,
     386,   387,  1108,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,     0,   400,   401,   402,   403,   404,
     628,   406,   407,   408,   409,     0,   410,   411,     0,   412,
    1109,   414,     0,     0,   415,   416,   417,   418,   419,   420,
     421,   422,   423,   424,   425,   426,   427,   428,   629,   430,
       0,   431,   432,     0,   433,   434,   435,   436,   437,   438,
     439,     0,  1110,  1111,     0,     0,     0,   442,   443,   630,
     445,   631,  1112,   447,   448,   632,   450,   451,   452,   453,
     454,     0,     0,   455,   456,   457,   458,   459,   460,   633,
       0,   462,   463,   464,   465,   466,   467,  1113,     0,   469,
     470,   471,     0,   472,   473,   474,   475,     0,     0,     0,
     476,     0,     0,   477,   478,   479,   480,   481,   482,   483,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,  1114,     0,     0,     0,     0,     0,
       0,  1115,  1116,     0,     0,     0,     0,     0,  1118,     0,
    1119,     0,     0,     0,     0,     0,  1120,  1121,     0,     0,
       0,     0,  1122,  1123,   107,  1076,   516,  1077,  1078,  1079,
    1080,  1081,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   108,   109,   110,   111,     0,   112,   113,   114,
     115,     0,   116,   117,   118,     0,     0,     0,     0,     0,
    1082,     0,     0,   119,   120,     0,   121,   122,   123,   124,
     125,   126,   127,   128,  1083,   130,  1084,  1085,     0,   133,
     134,   135,   136,   137,   138,  1086,   608,   139,   140,  1087,
    1088,   143,     0,   144,   145,   146,   147,   609,     0,   610,
       0,  1089,   151,   152,   153,   154,   155,   156,   157,   158,
     159,     0,   160,   161,   162,   163,   164,     0,     0,   165,
     166,   167,   168,   611,   612,   613,   614,   615,   616,   617,
     174,   175,   176,   177,   178,   179,   180,  1090,  1091,   183,
    1092,   184,     0,   185,   186,   187,   188,   189,   190,     0,
     191,     0,   192,   193,   194,   195,     0,     0,   196,   197,
     845,   199,   200,     0,     0,     0,   201,   202,   203,     0,
     204,   205,   206,     0,   207,   208,   209,   210,  1093,   212,
     213,   214,   215,   216,   618,  1094,   218,     0,   219,   220,
    1095,   222,     0,   223,     0,   224,   225,  1552,   226,   227,
     228,   229,   230,   231,     0,   232,     0,     0,     0,  1096,
    1097,     0,   235,     0,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,     0,   248,   249,   250,
     251,   252,   253,     0,   254,   255,   256,   257,   258,   259,
     260,   261,  1098,  1099,     0,  1100,     0,   265,   266,   267,
     268,   269,   270,     0,   271,   272,   273,   274,   275,     0,
       0,   276,   277,   278,   279,     0,   280,   281,   282,   621,
     622,   283,   284,   285,   286,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,  1101,   308,  1102,   310,   311,
     312,     0,   313,  1103,   314,   315,   316,   317,  1104,   623,
     319,  1105,   321,   322,   323,     0,   324,   325,     0,     0,
    1106,   327,   328,     0,     0,   329,   330,   331,   332,   333,
     625,   335,   336,   337,   338,   339,   340,   341,   342,   343,
       0,     0,   344,     0,   345,   346,   626,   348,   349,   350,
     351,   352,   353,   354,     0,   355,   356,   357,   358,   359,
       0,     0,   360,     0,   361,   362,   363,  1107,   365,   366,
     367,   368,     0,   369,   370,   371,     0,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,     0,   382,   383,
     384,   385,   386,   387,  1108,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,     0,   400,   401,   402,
     403,   404,   628,   406,   407,   408,   409,     0,   410,   411,
       0,   412,  1109,   414,     0,     0,   415,   416,   417,   418,
     419,   420,   421,   422,   423,   424,   425,   426,   427,   428,
     629,   430,     0,   431,   432,     0,   433,   434,   435,   436,
     437,   438,   439,     0,  1110,  1111,     0,     0,     0,   442,
     443,   630,   445,   631,  1112,   447,   448,   632,   450,   451,
     452,   453,   454,     0,     0,   455,   456,   457,   458,   459,
     460,   633,     0,   462,   463,   464,   465,   466,   467,  1113,
       0,   469,   470,   471,     0,   472,   473,   474,   475,     0,
       0,     0,   476,     0,     0,   477,   478,   479,   480,   481,
     482,   483,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,  1114,     0,     0,     0,
       0,     0,     0,  1115,  1116,     0,     0,     0,     0,     0,
    1118,     0,  1119,     0,     0,     0,     0,     0,  1120,  1121,
       0,     0,     0,     0,  1122,  1123,   107,  1076,   516,  1077,
    1078,  1079,  1080,  1081,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   108,   109,   110,   111,     0,   112,
     113,   114,   115,     0,   116,   117,   118,     0,     0,     0,
       0,     0,  1082,     0,     0,   119,   120,     0,   121,   122,
     123,   124,   125,   126,   127,   128,  1083,   130,  1084,  1085,
       0,   133,   134,   135,   136,   137,   138,  1086,   608,   139,
     140,  1087,  1088,   143,     0,   144,   145,   146,   147,   609,
       0,   610,     0,  1089,   151,   152,   153,   154,   155,   156,
     157,   158,   159,     0,   160,   161,   162,   163,   164,     0,
       0,   165,   166,   167,   168,   611,   612,   613,   614,   615,
     616,   617,   174,   175,   176,   177,   178,   179,   180,  1090,
    1091,   183,  1092,   184,     0,   185,   186,   187,   188,   189,
     190,     0,   191,     0,   192,   193,   194,   195,     0,     0,
     196,   197,   845,   199,   200,     0,     0,     0,   201,   202,
     203,     0,   204,   205,   206,     0,   207,   208,   209,   210,
    1093,   212,   213,   214,   215,   216,   618,  1094,   218,     0,
     219,   220,  1095,   222,     0,   223,     0,   224,   225,     0,
     226,   227,   228,   229,   230,   231,     0,   232,     0,     0,
       0,  1096,  1097,     0,   235,     0,   236,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,     0,   248,
     249,   250,   251,   252,   253,     0,   254,   255,   256,   257,
     258,   259,   260,   261,  1098,  1099,     0,  1100,     0,   265,
     266,   267,   268,   269,   270,     0,   271,   272,   273,   274,
     275,     0,     0,   276,   277,   278,   279,     0,   280,   281,
     282,   621,   622,   283,   284,   285,   286,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,  1101,   308,  1102,
     310,   311,   312,     0,   313,  1103,   314,   315,   316,   317,
    1104,   623,   319,  1105,   321,   322,   323,     0,   324,   325,
       0,     0,  1106,   327,   328,     0,     0,   329,   330,   331,
     332,   333,   625,   335,   336,   337,   338,   339,   340,   341,
     342,   343,     0,     0,   344,     0,   345,   346,   626,   348,
     349,   350,   351,   352,   353,   354,     0,   355,   356,   357,
     358,   359,     0,     0,   360,     0,   361,   362,   363,  1107,
     365,   366,   367,   368,     0,   369,   370,   371,     0,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,     0,
     382,   383,   384,   385,   386,   387,  1108,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,     0,   400,
     401,   402,   403,   404,   628,   406,   407,   408,   409,     0,
     410,   411,     0,   412,  1109,   414,     0,     0,   415,   416,
     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
     427,   428,   629,   430,     0,   431,   432,     0,   433,   434,
     435,   436,   437,   438,   439,     0,  1110,  1111,     0,     0,
       0,   442,   443,   630,   445,   631,  1112,   447,   448,   632,
     450,   451,   452,   453,   454,     0,     0,   455,   456,   457,
     458,   459,   460,   633,     0,   462,   463,   464,   465,   466,
     467,  1113,     0,   469,   470,   471,     0,   472,   473,   474,
     475,     0,     0,     0,   476,     0,     0,   477,   478,   479,
     480,   481,   482,   483,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,  1114,     0,
       0,     0,     0,     0,     0,  1115,  1116,     0,     0,     0,
       0,     0,  1118,     0,  1119,  2051,     0,     0,     0,     0,
    1120,  1121,     0,     0,     0,     0,  1122,  1123,  1258,  1076,
     516,  1077,  1078,  1079,  1080,  1081,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   108,   109,   110,   111,
       0,   112,   113,   114,   115,     0,   116,   117,   118,     0,
       0,     0,     0,     0,  1082,     0,     0,   119,   120,     0,
     121,   122,   123,  1260,   125,   126,   127,   128,  1083,  1261,
    1084,  1085,     0,   133,   134,   135,   136,   137,   138,  1086,
     608,   139,   140,  1087,  1088,   143,     0,   144,   145,   146,
     147,   609,     0,  1262,     0,  1263,   151,   152,   153,   154,
     155,  1264,   157,   158,   159,     0,   160,   161,   162,   163,
     164,     0,     0,  1265,   166,   167,   168,  1266,  1267,  1268,
    1269,   615,   616,  1270,   174,   175,   176,   177,   178,   179,
     180,  1090,  1091,   183,  1092,   184,     0,   185,   186,   187,
     188,   189,   190,     0,   191,     0,   192,   193,   194,   195,
       0,     0,   196,   197,   845,   199,   200,     0,     0,     0,
     201,   202,   203,     0,   204,   205,   206,     0,   207,   208,
     209,   210,  1093,   212,   213,   214,   215,   216,   618,  1094,
     218,     0,   219,   220,  1095,   222,     0,   223,     0,   224,
    1272,     0,  1273,   227,   228,  1274,  1275,   231,     0,   232,
       0,     0,     0,  1096,  1097,     0,   235,     0,   236,   237,
     238,   239,   240,   241,   242,  1276,   244,   245,   246,   247,
       0,   248,   249,   250,   251,   252,   253,     0,   254,  1277,
     256,   257,   258,   259,   260,   261,  1098,  1099,     0,  1100,
       0,   265,  1278,  1279,   268,  1280,   270,     0,   271,   272,
     273,   274,   275,     0,     0,   276,  1281,   278,  1282,     0,
     280,   281,   282,   621,   622,   283,   284,   285,   286,   287,
    1283,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,  1101,
    1284,  1102,   310,   311,   312,     0,   313,  1103,   314,   315,
    1285,   317,  1104,   623,   319,  1105,   321,   322,   323,     0,
     324,   325,     0,     0,  1106,   327,   328,     0,     0,   329,
     330,  1286,   332,  1287,   625,   335,   336,   337,   338,   339,
     340,   341,   342,   343,     0,     0,   344,     0,   345,   346,
     626,  1288,   349,   350,   351,   352,   353,   354,     0,   355,
     356,   357,   358,   359,     0,     0,   360,     0,   361,   362,
     363,  1107,   365,   366,   367,   368,     0,   369,   370,   371,
       0,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,     0,   382,   383,  1289,   385,   386,   387,  1108,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
       0,   400,   401,   402,   403,   404,  1290,   406,   407,   408,
     409,     0,   410,  1291,     0,   412,  1109,   414,     0,     0,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,  1292,   428,   629,   430,     0,   431,   432,     0,
     433,  1293,   435,   436,   437,   438,   439,     0,  1110,  1111,
       0,     0,     0,   442,   443,   630,   445,   631,  1112,   447,
     448,  1294,   450,   451,   452,   453,   454,     0,     0,   455,
     456,   457,   458,   459,   460,  1295,     0,   462,   463,   464,
     465,   466,   467,  1113,  2262,   469,  1297,   471,     0,   472,
     473,   474,   475,     0,     0,     0,   476,     0,     0,   477,
     478,   479,   480,   481,   482,   483,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
    1114,     0,     0,     0,     0,     0,     0,  1115,  1116,     0,
       0,     0,     0,     0,  1118,     0,  1119,     0,     0,     0,
       0,     0,  1120,  1121,     0,     0,     0,     0,  1122,  1123,
    1258,  1076,   516,  1077,  1078,  1079,  1080,  1081,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   108,   109,
     110,   111,     0,   112,   113,   114,   115,     0,   116,   117,
     118,     0,     0,     0,     0,     0,  1082,     0,     0,   119,
     120,     0,   121,   122,   123,  1260,   125,   126,   127,   128,
    1083,  1261,  1084,  1085,     0,   133,   134,   135,   136,   137,
     138,  1086,   608,   139,   140,  1087,  1088,   143,     0,   144,
     145,   146,   147,   609,     0,  1262,     0,  1263,   151,   152,
     153,   154,   155,  1264,   157,   158,   159,     0,   160,   161,
     162,   163,   164,     0,     0,  1265,   166,   167,   168,  1266,
    1267,  1268,  1269,   615,   616,  1270,   174,   175,   176,   177,
     178,   179,   180,  1090,  1091,   183,  1092,   184,     0,   185,
     186,   187,   188,   189,   190,     0,   191,     0,   192,   193,
     194,   195,     0,     0,   196,   197,   845,   199,   200,     0,
       0,     0,   201,   202,   203,     0,   204,   205,   206,     0,
     207,   208,   209,   210,  1093,   212,   213,   214,   215,   216,
     618,  1094,   218,     0,   219,   220,  1095,   222,     0,   223,
       0,   224,  1272,     0,  1273,   227,   228,  1274,  1275,   231,
       0,   232,     0,     0,     0,  1096,  1097,     0,   235,     0,
     236,   237,   238,   239,   240,   241,   242,  1276,   244,   245,
     246,   247,     0,   248,   249,   250,   251,   252,   253,     0,
     254,  1277,   256,   257,   258,   259,   260,   261,  1098,  1099,
       0,  1100,     0,   265,  1278,  1279,   268,  1280,   270,     0,
     271,   272,   273,   274,   275,     0,     0,   276,  1281,   278,
    1282,     0,   280,   281,   282,   621,   622,   283,   284,   285,
     286,   287,  1283,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,  1101,  1284,  1102,   310,   311,   312,     0,   313,  1103,
     314,   315,  1285,   317,  1104,   623,   319,  1105,   321,   322,
     323,     0,   324,   325,     0,     0,  1106,   327,   328,     0,
       0,   329,   330,  1286,   332,  1287,   625,   335,   336,   337,
     338,   339,   340,   341,   342,   343,     0,     0,   344,     0,
     345,   346,   626,  1288,   349,   350,   351,   352,   353,   354,
       0,   355,   356,   357,   358,   359,     0,     0,   360,     0,
     361,   362,   363,  1107,   365,   366,   367,   368,     0,   369,
     370,   371,     0,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,     0,   382,   383,  1289,   385,   386,   387,
    1108,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,     0,   400,   401,   402,   403,   404,  1290,   406,
     407,   408,   409,     0,   410,  1291,     0,   412,  1109,   414,
       0,     0,   415,   416,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,  1292,   428,   629,   430,     0,   431,
     432,     0,   433,  1293,   435,   436,   437,   438,   439,     0,
    1110,  1111,     0,     0,     0,   442,   443,   630,   445,   631,
    1112,   447,   448,  1294,   450,   451,   452,   453,   454,     0,
       0,   455,   456,   457,   458,   459,   460,  1295,     0,   462,
     463,   464,   465,   466,   467,  1113,     0,   469,  1297,   471,
       0,   472,   473,   474,   475,     0,     0,     0,   476,     0,
       0,   477,   478,   479,   480,   481,   482,   483,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,  1114,     0,     0,     0,     0,     0,     0,  1115,
    1116,     0,     0,     0,     0,     0,  1118,     0,  1119,  2312,
       0,     0,     0,     0,  1120,  1121,     0,     0,     0,     0,
    1122,  1123,   107,  1076,   516,  1077,  1078,  1079,  1080,  1081,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     108,   109,   110,   111,     0,   112,   113,   114,   115,     0,
     116,   117,   118,     0,     0,     0,     0,     0,  1082,     0,
       0,   119,   120,     0,   121,   122,   123,   124,   125,   126,
     127,   128,  1083,   130,  1084,  1085,     0,   133,   134,   135,
     136,   137,   138,  1086,   608,   139,   140,  1087,  1088,   143,
       0,   144,   145,   146,   147,   609,     0,   610,     0,  1089,
     151,   152,   153,   154,   155,   156,   157,   158,   159,     0,
     160,   161,   162,   163,   164,     0,     0,   165,   166,   167,
     168,   611,   612,   613,   614,   615,   616,   617,   174,   175,
     176,   177,   178,   179,   180,  1090,  1091,   183,  1092,   184,
       0,   185,   186,   187,   188,   189,   190,     0,   191,     0,
     192,   193,   194,   195,     0,     0,   196,   197,   845,   199,
     200,     0,     0,     0,   201,   202,   203,     0,   204,   205,
     206,     0,   207,   208,   209,   210,  1093,   212,   213,   214,
     215,   216,   618,  1094,   218,     0,   219,   220,  1095,   222,
       0,   223,     0,   224,   225,     0,   226,   227,   228,   229,
     230,   231,     0,   232,     0,     0,     0,  1096,  1097,     0,
     235,     0,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,     0,   248,   249,   250,   251,   252,
     253,     0,   254,   255,   256,   257,   258,   259,   260,   261,
    1098,  1099,     0,  1100,     0,   265,   266,   267,   268,   269,
     270,     0,   271,   272,   273,   274,   275,     0,     0,   276,
     277,   278,   279,     0,   280,   281,   282,   621,   622,   283,
     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,  1101,   308,  1102,   310,   311,   312,     0,
     313,  1103,   314,   315,   316,   317,  1104,   623,   319,  1105,
     321,   322,   323,     0,   324,   325,     0,     0,  1106,   327,
     328,     0,     0,   329,   330,   331,   332,   333,   625,   335,
     336,   337,   338,   339,   340,   341,   342,   343,     0,     0,
     344,     0,   345,   346,   626,   348,   349,   350,   351,   352,
     353,   354,     0,   355,   356,   357,   358,   359,     0,     0,
     360,     0,   361,   362,   363,  1107,   365,   366,   367,   368,
       0,   369,   370,   371,     0,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,     0,   382,   383,   384,   385,
     386,   387,  1108,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,     0,   400,   401,   402,   403,   404,
     628,   406,   407,   408,   409,     0,   410,   411,     0,   412,
    1109,   414,     0,     0,   415,   416,   417,   418,   419,   420,
     421,   422,   423,   424,   425,   426,   427,   428,   629,   430,
       0,   431,   432,  2658,   433,   434,   435,   436,   437,   438,
     439,     0,  1110,  1111,     0,     0,     0,   442,   443,   630,
     445,   631,  1112,   447,   448,   632,   450,   451,   452,   453,
     454,     0,     0,   455,   456,   457,   458,   459,   460,   633,
       0,   462,   463,   464,   465,   466,   467,  1113,     0,   469,
     470,   471,     0,   472,   473,   474,   475,     0,     0,     0,
     476,     0,     0,   477,   478,   479,   480,   481,   482,   483,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,  1114,     0,     0,     0,     0,     0,
       0,  1115,  1116,     0,     0,     0,     0,     0,  1118,     0,
    1119,     0,     0,     0,     0,     0,  1120,  1121,     0,     0,
       0,     0,  1122,  1123,   107,  1076,   516,  1077,  1078,  1079,
    1080,  1081,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   108,   109,   110,   111,     0,   112,   113,   114,
     115,     0,   116,   117,   118,     0,     0,     0,     0,     0,
    1082,     0,     0,   119,   120,     0,   121,   122,   123,   124,
     125,   126,   127,   128,  1083,   130,  1084,  1085,     0,   133,
     134,   135,   136,   137,   138,  1086,   608,   139,   140,  1087,
    1088,   143,     0,   144,   145,   146,   147,   609,     0,   610,
       0,  1089,   151,   152,   153,   154,   155,   156,   157,   158,
     159,     0,   160,   161,   162,   163,   164,     0,     0,   165,
     166,   167,   168,   611,   612,   613,   614,   615,   616,   617,
     174,   175,   176,   177,   178,   179,   180,  1090,  1091,   183,
    1092,   184,     0,   185,   186,   187,   188,   189,   190,     0,
     191,     0,   192,   193,   194,   195,     0,     0,   196,   197,
     845,   199,   200,     0,     0,     0,   201,   202,   203,     0,
     204,   205,   206,     0,   207,   208,   209,   210,  1093,   212,
     213,   214,   215,   216,   618,  1094,   218,     0,   219,   220,
    1095,   222,     0,   223,     0,   224,   225,     0,   226,   227,
     228,   229,   230,   231,     0,   232,     0,     0,     0,  1096,
    1097,     0,   235,     0,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,     0,   248,   249,   250,
     251,   252,   253,     0,   254,   255,   256,   257,   258,   259,
     260,   261,  1098,  1099,     0,  1100,     0,   265,   266,   267,
     268,   269,   270,     0,   271,   272,   273,   274,   275,     0,
       0,   276,   277,   278,   279,     0,   280,   281,   282,   621,
     622,   283,   284,   285,   286,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,  1101,   308,  1102,   310,   311,
     312,     0,   313,  1103,   314,   315,   316,   317,  1104,   623,
     319,  1105,   321,   322,   323,     0,   324,   325,     0,     0,
    1106,   327,   328,     0,     0,   329,   330,   331,   332,   333,
     625,   335,   336,   337,   338,   339,   340,   341,   342,   343,
       0,     0,   344,     0,   345,   346,   626,   348,   349,   350,
     351,   352,   353,   354,     0,   355,   356,   357,   358,   359,
       0,     0,   360,     0,   361,   362,   363,  1107,   365,   366,
     367,   368,     0,   369,   370,   371,     0,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,     0,   382,   383,
     384,   385,   386,   387,  1108,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,     0,   400,   401,   402,
     403,   404,   628,   406,   407,   408,   409,     0,   410,   411,
       0,   412,  1109,   414,     0,     0,   415,   416,   417,   418,
     419,   420,   421,   422,   423,   424,   425,   426,   427,   428,
     629,   430,     0,   431,   432,     0,   433,   434,   435,   436,
     437,   438,   439,     0,  1110,  1111,     0,     0,     0,   442,
     443,   630,   445,   631,  1112,   447,   448,   632,   450,   451,
     452,   453,   454,     0,     0,   455,   456,   457,   458,   459,
     460,   633,     0,   462,   463,   464,   465,   466,   467,  1113,
       0,   469,   470,   471,     0,   472,   473,   474,   475,     0,
       0,  2751,   476,     0,     0,   477,   478,   479,   480,   481,
     482,   483,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,  1114,     0,     0,     0,
       0,     0,     0,  1115,  1116,     0,     0,     0,     0,     0,
    1118,     0,  1119,     0,     0,     0,     0,     0,  1120,  1121,
       0,     0,     0,     0,  1122,  1123,   107,  1076,   516,  1077,
    1078,  1079,  1080,  1081,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   108,   109,   110,   111,     0,   112,
     113,   114,   115,     0,   116,   117,   118,     0,     0,     0,
       0,     0,  1082,     0,     0,   119,   120,     0,   121,   122,
     123,   124,   125,   126,   127,   128,  1083,   130,  1084,  1085,
       0,   133,   134,   135,   136,   137,   138,  1086,   608,   139,
     140,  1087,  1088,   143,     0,   144,   145,   146,   147,   609,
       0,   610,     0,  1089,   151,   152,   153,   154,   155,   156,
     157,   158,   159,     0,   160,   161,   162,   163,   164,     0,
       0,   165,   166,   167,   168,   611,   612,   613,   614,   615,
     616,   617,   174,   175,   176,   177,   178,   179,   180,  1090,
    1091,   183,  1092,   184,     0,   185,   186,   187,   188,   189,
     190,     0,   191,     0,   192,   193,   194,   195,     0,     0,
     196,   197,   845,   199,   200,     0,     0,     0,   201,   202,
     203,     0,   204,   205,   206,     0,   207,   208,   209,   210,
    1093,   212,   213,   214,   215,   216,   618,  1094,   218,     0,
     219,   220,  1095,   222,     0,   223,     0,   224,   225,     0,
     226,   227,   228,   229,   230,   231,     0,   232,     0,     0,
       0,  1096,  1097,     0,   235,     0,   236,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,     0,   248,
     249,   250,   251,   252,   253,     0,   254,   255,   256,   257,
     258,   259,   260,   261,  1098,  1099,     0,  1100,     0,   265,
     266,   267,   268,   269,   270,     0,   271,   272,   273,   274,
     275,     0,     0,   276,   277,   278,   279,     0,   280,   281,
     282,   621,   622,   283,   284,   285,   286,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,  1101,   308,  1102,
     310,   311,   312,     0,   313,  1103,   314,   315,   316,   317,
    1104,   623,   319,  1105,   321,   322,   323,     0,   324,   325,
       0,     0,  1106,   327,   328,     0,     0,   329,   330,   331,
     332,   333,   625,   335,   336,   337,   338,   339,   340,   341,
     342,   343,     0,     0,   344,     0,   345,   346,   626,   348,
     349,   350,   351,   352,   353,   354,     0,   355,   356,   357,
     358,   359,     0,     0,   360,     0,   361,   362,   363,  1107,
     365,   366,   367,   368,     0,   369,   370,   371,     0,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,     0,
     382,   383,   384,   385,   386,   387,  1108,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,     0,   400,
     401,   402,   403,   404,   628,   406,   407,   408,   409,     0,
     410,   411,     0,   412,  1109,   414,     0,     0,   415,   416,
     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
     427,   428,   629,   430,     0,   431,   432,  3166,   433,   434,
     435,   436,   437,   438,   439,     0,  1110,  1111,     0,     0,
       0,   442,   443,   630,   445,   631,  1112,   447,   448,   632,
     450,   451,   452,   453,   454,     0,     0,   455,   456,   457,
     458,   459,   460,   633,     0,   462,   463,   464,   465,   466,
     467,  1113,     0,   469,   470,   471,     0,   472,   473,   474,
     475,     0,     0,     0,   476,     0,     0,   477,   478,   479,
     480,   481,   482,   483,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,  1114,     0,
       0,     0,     0,     0,     0,  1115,  1116,     0,     0,     0,
       0,     0,  1118,     0,  1119,     0,     0,     0,     0,     0,
    1120,  1121,     0,     0,     0,     0,  1122,  1123,   107,  1076,
     516,  1077,  1078,  1079,  1080,  1081,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   108,   109,   110,   111,
       0,   112,   113,   114,   115,     0,   116,   117,   118,     0,
       0,     0,     0,     0,  1082,     0,     0,   119,   120,     0,
     121,   122,   123,   124,   125,   126,   127,   128,  1083,   130,
    1084,  1085,     0,   133,   134,   135,   136,   137,   138,  1086,
     608,   139,   140,  1087,  1088,   143,     0,   144,   145,   146,
     147,   609,     0,   610,     0,  1089,   151,   152,   153,   154,
     155,   156,   157,   158,   159,     0,   160,   161,   162,   163,
     164,     0,     0,   165,   166,   167,   168,   611,   612,   613,
     614,   615,   616,   617,   174,   175,   176,   177,   178,   179,
     180,  1090,  1091,   183,  1092,   184,     0,   185,   186,   187,
     188,   189,   190,     0,   191,     0,   192,   193,   194,   195,
       0,     0,   196,   197,   845,   199,   200,     0,     0,     0,
     201,   202,   203,     0,   204,   205,   206,     0,   207,   208,
     209,   210,  1093,   212,   213,   214,   215,   216,   618,  1094,
     218,     0,   219,   220,  1095,   222,     0,   223,     0,   224,
     225,     0,   226,   227,   228,   229,   230,   231,     0,   232,
       0,     0,     0,  1096,  1097,     0,   235,     0,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
       0,   248,   249,   250,   251,   252,   253,     0,   254,   255,
     256,   257,   258,   259,   260,   261,  1098,  1099,     0,  1100,
       0,   265,   266,   267,   268,   269,   270,     0,   271,   272,
     273,   274,   275,     0,     0,   276,   277,   278,   279,     0,
     280,   281,   282,   621,   622,   283,   284,   285,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,  1101,
     308,  1102,   310,   311,   312,     0,   313,  1103,   314,   315,
     316,   317,  1104,   623,   319,  1105,   321,   322,   323,     0,
     324,   325,     0,     0,  1106,   327,   328,     0,     0,   329,
     330,   331,   332,   333,   625,   335,   336,   337,   338,   339,
     340,   341,   342,   343,     0,     0,   344,     0,   345,   346,
     626,   348,   349,   350,   351,   352,   353,   354,     0,   355,
     356,   357,   358,   359,     0,     0,   360,     0,   361,   362,
     363,  1107,   365,   366,   367,   368,     0,   369,   370,   371,
       0,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,     0,   382,   383,   384,   385,   386,   387,  1108,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
       0,   400,   401,   402,   403,   404,   628,   406,   407,   408,
     409,     0,   410,   411,     0,   412,  1109,   414,     0,     0,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   629,   430,     0,   431,   432,  3356,
     433,   434,   435,   436,   437,   438,   439,     0,  1110,  1111,
       0,     0,     0,   442,   443,   630,   445,   631,  1112,   447,
     448,   632,   450,   451,   452,   453,   454,     0,     0,   455,
     456,   457,   458,   459,   460,   633,     0,   462,   463,   464,
     465,   466,   467,  1113,     0,   469,   470,   471,     0,   472,
     473,   474,   475,     0,     0,     0,   476,     0,     0,   477,
     478,   479,   480,   481,   482,   483,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
    1114,     0,     0,     0,     0,     0,     0,  1115,  1116,     0,
       0,     0,     0,     0,  1118,     0,  1119,     0,     0,     0,
       0,     0,  1120,  1121,     0,     0,     0,     0,  1122,  1123,
     107,  1076,   516,  1077,  1078,  1079,  1080,  1081,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   108,   109,
     110,   111,     0,   112,   113,   114,   115,     0,   116,   117,
     118,     0,     0,     0,     0,     0,  1082,     0,     0,   119,
     120,     0,   121,   122,   123,   124,   125,   126,   127,   128,
    1083,   130,  1084,  1085,     0,   133,   134,   135,   136,   137,
     138,  1086,   608,   139,   140,  1087,  1088,   143,     0,   144,
     145,   146,   147,   609,     0,   610,     0,  1089,   151,   152,
     153,   154,   155,   156,   157,   158,   159,     0,   160,   161,
     162,   163,   164,     0,     0,   165,   166,   167,   168,   611,
     612,   613,   614,   615,   616,   617,   174,   175,   176,   177,
     178,   179,   180,  1090,  1091,   183,  1092,   184,     0,   185,
     186,   187,   188,   189,   190,     0,   191,     0,   192,   193,
     194,   195,     0,     0,   196,   197,   845,   199,   200,     0,
       0,     0,   201,   202,   203,     0,   204,   205,   206,     0,
     207,   208,   209,   210,  1093,   212,   213,   214,   215,   216,
     618,  1094,   218,     0,   219,   220,  1095,   222,     0,   223,
       0,   224,   225,     0,   226,   227,   228,   229,   230,   231,
       0,   232,     0,     0,     0,  1096,  1097,     0,   235,     0,
     236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,     0,   248,   249,   250,   251,   252,   253,     0,
     254,   255,   256,   257,   258,   259,   260,   261,  1098,  1099,
       0,  1100,     0,   265,   266,   267,   268,   269,   270,     0,
     271,   272,   273,   274,   275,     0,     0,   276,   277,   278,
     279,     0,   280,   281,   282,   621,   622,   283,   284,   285,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,  1101,   308,  1102,   310,   311,   312,     0,   313,  1103,
     314,   315,   316,   317,  1104,   623,   319,  1105,   321,   322,
     323,     0,   324,   325,     0,     0,  1106,   327,   328,     0,
       0,   329,   330,   331,   332,   333,   625,   335,   336,   337,
     338,   339,   340,   341,   342,   343,     0,     0,   344,     0,
     345,   346,   626,   348,   349,   350,   351,   352,   353,   354,
       0,   355,   356,   357,   358,   359,     0,     0,   360,     0,
     361,   362,   363,  1107,   365,   366,   367,   368,     0,   369,
     370,   371,     0,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,     0,   382,   383,   384,   385,   386,   387,
    1108,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,     0,   400,   401,   402,   403,   404,   628,   406,
     407,   408,   409,     0,   410,   411,     0,   412,  1109,   414,
       0,     0,   415,   416,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,   427,   428,   629,   430,     0,   431,
     432,     0,   433,   434,   435,   436,   437,   438,   439,     0,
    1110,  1111,     0,     0,     0,   442,   443,   630,   445,   631,
    1112,   447,   448,   632,   450,   451,   452,   453,   454,     0,
       0,   455,   456,   457,   458,   459,   460,   633,     0,   462,
     463,   464,   465,   466,   467,  1113,     0,   469,   470,   471,
       0,   472,   473,   474,   475,     0,     0,     0,   476,     0,
       0,   477,   478,   479,   480,   481,   482,   483,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,  1114,     0,     0,     0,     0,     0,     0,  1115,
    1116,     0,     0,     0,     0,     0,  1118,     0,  1119,     0,
       0,     0,     0,     0,  1120,  1121,     0,     0,     0,     0,
    1122,  1123,  1258,  1076,   516,  1077,  1078,  1079,  1080,  1081,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     108,   109,   110,   111,     0,   112,   113,   114,   115,     0,
     116,   117,   118,     0,     0,     0,     0,     0,  1082,     0,
       0,   119,   120,     0,   121,   122,   123,  1260,   125,   126,
     127,   128,  1083,  1261,  1084,  1085,     0,   133,   134,   135,
     136,   137,   138,  1086,   608,   139,   140,  1087,  1088,   143,
       0,   144,   145,   146,   147,   609,     0,  1262,     0,  1263,
     151,   152,   153,   154,   155,  1264,   157,   158,   159,     0,
     160,   161,   162,   163,   164,     0,     0,  1265,   166,   167,
     168,  1266,  1267,  1268,  1269,   615,   616,  1270,   174,   175,
     176,   177,   178,   179,   180,  1090,  1091,   183,  1092,   184,
       0,   185,   186,   187,   188,   189,   190,     0,   191,     0,
     192,   193,   194,   195,     0,     0,   196,   197,   845,   199,
     200,     0,     0,     0,   201,   202,   203,     0,   204,   205,
     206,     0,   207,   208,   209,   210,  1093,   212,   213,   214,
     215,   216,   618,  1094,   218,     0,   219,   220,  1095,   222,
       0,   223,     0,   224,  1272,     0,  1273,   227,   228,  1274,
    1275,   231,     0,   232,     0,     0,     0,  1096,  1097,     0,
     235,     0,   236,   237,   238,   239,   240,   241,   242,  1276,
     244,   245,   246,   247,     0,   248,   249,   250,   251,   252,
     253,     0,   254,  1277,   256,   257,   258,   259,   260,   261,
    1098,  1099,     0,  1100,     0,   265,  1278,  1279,   268,  1280,
     270,     0,   271,   272,   273,   274,   275,     0,     0,   276,
    1281,   278,  1282,     0,   280,   281,   282,   621,   622,   283,
     284,   285,   286,   287,  1283,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,  1101,  1284,  1102,   310,   311,   312,     0,
     313,  1103,   314,   315,  1285,   317,  1104,   623,   319,  1105,
     321,   322,   323,     0,   324,   325,     0,     0,  1106,   327,
     328,     0,     0,   329,   330,  1286,   332,  1287,   625,   335,
     336,   337,   338,   339,   340,   341,   342,   343,     0,     0,
     344,     0,   345,   346,   626,  1288,   349,   350,   351,   352,
     353,   354,     0,   355,   356,   357,   358,   359,     0,     0,
     360,     0,   361,   362,   363,  1107,   365,   366,   367,   368,
       0,   369,   370,   371,     0,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,     0,   382,   383,  1289,   385,
     386,   387,  1108,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,     0,   400,   401,   402,   403,   404,
    1290,   406,   407,   408,   409,     0,   410,  1291,     0,   412,
    1109,   414,     0,     0,   415,   416,   417,   418,   419,   420,
     421,   422,   423,   424,   425,   426,  1292,   428,   629,   430,
       0,   431,   432,     0,   433,  1293,   435,   436,   437,   438,
     439,     0,  1110,  1111,     0,     0,     0,   442,   443,   630,
     445,   631,  1112,   447,   448,  1294,   450,   451,   452,   453,
     454,     0,     0,   455,   456,   457,   458,   459,   460,  1295,
       0,   462,   463,   464,   465,   466,   467,  1113,     0,   469,
    1297,   471,     0,   472,   473,   474,   475,     0,     0,     0,
     476,     0,     0,   477,   478,   479,   480,   481,   482,   483,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,  1114,     0,     0,     0,     0,     0,
       0,  1115,  1116,     0,     0,     0,     0,     0,  1118,     0,
    1119,     0,     0,     0,     0,     0,  1120,  1121,     0,     0,
       0,     0,  1122,  1123,   107,  1076,   516,  1077,  1078,  1079,
    1080,  1081,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   108,   109,   110,   111,     0,   112,   113,   114,
     115,     0,   116,   117,   118,     0,     0,     0,     0,     0,
    1082,     0,     0,   119,   120,     0,   121,   122,   123,   124,
     125,   126,   127,   128,  1083,   130,  1084,  1085,     0,   133,
     134,   135,   136,   137,   138,  1086,   608,   139,   140,  1087,
    1088,   143,     0,   144,   145,   146,   147,   609,     0,   610,
       0,  1089,   151,   152,   153,   154,   155,   156,   157,   158,
     159,     0,   160,   161,   162,   163,   164,     0,     0,   165,
     166,   167,   168,   611,   612,   613,   614,   615,   616,   617,
     174,   175,   176,   177,   178,   179,   180,  1090,  1091,   183,
    1092,   184,     0,   185,   186,   187,   188,   189,   190,     0,
     191,     0,   192,   193,   194,   195,     0,     0,   196,   197,
     845,   199,   200,     0,     0,     0,   201,   202,   203,     0,
     204,   205,   206,     0,   207,   208,   209,   210,  1093,   212,
     213,   214,   215,   216,   618,  1094,   218,     0,   219,   220,
    1095,   222,     0,   223,     0,   224,   225,     0,   226,   227,
     228,   229,   230,   231,     0,   232,     0,     0,     0,  1096,
    1097,     0,   235,     0,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,     0,   248,   249,   250,
     251,   252,   253,     0,   254,   255,   256,   257,   258,   259,
     260,   261,  1098,  1099,     0,  1100,     0,   265,   266,   267,
     268,   269,   270,     0,   271,   272,   273,   274,   275,     0,
       0,   276,   277,   278,   279,     0,   280,   281,   282,   621,
     622,   283,   284,   285,   286,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,  1101,   308,  1102,   310,   311,
     312,     0,   313,  1103,   314,   315,   316,   317,  1104,   623,
     319,  1105,   321,   322,   323,     0,   324,   325,     0,     0,
    1106,   327,   328,     0,     0,   329,   330,   331,   332,   333,
     625,   335,   336,   337,   338,   339,   340,   341,   342,   343,
       0,     0,   344,     0,   345,   346,   626,   348,   349,   350,
     351,   352,   353,   354,     0,   355,   356,   357,   358,   359,
       0,     0,   360,     0,   361,   362,   363,  1107,   365,   366,
     367,   368,     0,   369,   370,   371,     0,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,     0,   382,   383,
     384,   385,   386,   387,  1108,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,     0,   400,   401,   402,
     403,   404,   628,   406,   407,   408,   409,     0,   410,   411,
       0,   412,  1109,   414,     0,     0,   415,   416,   417,   418,
     419,   420,   421,   422,   423,   424,   425,   426,   427,   428,
     629,   430,     0,   431,   432,     0,   433,   434,   435,   436,
     437,   438,   439,     0,  1110,  1111,     0,     0,     0,   442,
     443,   630,   445,   631,  1112,   447,   448,   632,   450,   451,
     452,   453,   454,     0,     0,   455,   456,   457,   458,   459,
     460,   633,     0,   462,   463,   464,   465,   466,   467,  1113,
       0,   469,   470,   471,     0,   472,   473,   474,   475,     0,
       0,     0,   476,     0,     0,   477,   478,   479,   480,   481,
     482,   483,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,  1114,     0,     0,     0,
       0,     0,     0,  1741,  1742,     0,     0,     0,     0,     0,
    1118,     0,  1119,     0,     0,     0,     0,     0,  1120,  1121,
       0,     0,     0,     0,  1122,  1123,   107,  2186,   516,  1077,
    1078,  1079,  1080,  1081,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   108,   109,   110,   111,     0,   112,
     113,   114,   115,     0,   116,   117,   118,     0,     0,     0,
       0,     0,  1082,     0,     0,   119,   120,     0,   121,   122,
     123,   124,   125,   126,   127,   128,  1083,   130,  1084,  1085,
       0,   133,   134,   135,   136,   137,   138,  1086,   608,   139,
     140,  1087,  1088,   143,     0,   144,   145,   146,   147,   609,
       0,   610,     0,  1089,   151,   152,   153,   154,   155,   156,
     157,   158,   159,     0,   160,   161,   162,   163,   164,     0,
       0,   165,   166,   167,   168,   611,   612,   613,   614,   615,
     616,   617,   174,   175,   176,   177,   178,   179,   180,  1090,
    1091,   183,  1092,   184,     0,   185,   186,   187,   188,   189,
     190,     0,   191,     0,   192,   193,   194,   195,     0,     0,
     196,   197,   845,   199,   200,     0,     0,     0,   201,   202,
     203,     0,   204,   205,   206,     0,   207,   208,   209,   210,
    1093,   212,   213,   214,   215,   216,   618,  1094,   218,     0,
     219,   220,  1095,   222,     0,   223,     0,   224,   225,     0,
     226,   227,   228,   229,   230,   231,     0,   232,     0,     0,
       0,  1096,  1097,     0,   235,     0,   236,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,     0,   248,
     249,   250,   251,   252,   253,     0,   254,   255,   256,   257,
     258,   259,   260,   261,  1098,  1099,     0,  1100,     0,   265,
     266,   267,   268,   269,   270,     0,   271,   272,   273,   274,
     275,     0,     0,   276,   277,   278,   279,     0,   280,   281,
     282,   621,   622,   283,   284,   285,   286,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,  1101,   308,  1102,
     310,   311,   312,     0,   313,  1103,   314,   315,   316,   317,
    1104,   623,   319,  1105,   321,   322,   323,     0,   324,   325,
       0,     0,  1106,   327,   328,     0,     0,   329,   330,   331,
     332,   333,   625,   335,   336,   337,   338,   339,   340,   341,
     342,   343,     0,     0,   344,     0,   345,   346,   626,   348,
     349,   350,   351,   352,   353,   354,     0,   355,   356,   357,
     358,   359,     0,     0,   360,     0,   361,   362,   363,  1107,
     365,   366,   367,   368,     0,   369,   370,   371,     0,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,     0,
     382,   383,   384,   385,   386,   387,  1108,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,     0,   400,
     401,   402,   403,   404,   628,   406,   407,   408,   409,     0,
     410,   411,     0,   412,  1109,   414,     0,     0,   415,   416,
     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
     427,   428,   629,   430,     0,   431,   432,     0,   433,   434,
     435,   436,   437,   438,   439,     0,  1110,  1111,     0,     0,
       0,   442,   443,   630,   445,   631,  1112,   447,   448,   632,
     450,   451,   452,   453,   454,     0,     0,   455,   456,   457,
     458,   459,   460,   633,     0,   462,   463,   464,   465,   466,
     467,  1113,     0,   469,   470,   471,     0,   472,   473,   474,
     475,     0,     0,     0,   476,     0,     0,   477,   478,   479,
     480,   481,   482,   483,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,  1114,     0,
       0,     0,     0,     0,     0,  1115,  1116,     0,     0,     0,
       0,     0,  1118,     0,  1119,     0,     0,     0,     0,     0,
    1120,  1121,     0,     0,     0,     0,  1122,  1123,   107,  1076,
     516,  1077,  1078,  1079,  1080,  1081,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   108,   109,   110,   111,
       0,   112,   113,   114,   115,     0,   116,   117,   118,     0,
       0,     0,     0,     0,  1082,     0,     0,   119,   120,     0,
     121,   122,   123,   124,   125,   126,   127,   128,  1083,   130,
    1084,  1085,     0,   133,   134,   135,   136,   137,   138,  1086,
     608,   139,   140,  1087,  1088,   143,     0,   144,   145,   146,
     147,   609,     0,   610,     0,  1089,   151,   152,   153,   154,
     155,   156,   157,   158,   159,     0,   160,   161,   162,   163,
     164,     0,     0,   165,   166,   167,   168,   611,   612,   613,
     614,   615,   616,   617,   174,   175,   176,   177,   178,   179,
     180,  1090,  1091,   183,  1092,   184,     0,   185,   186,   187,
     188,   189,   190,     0,   191,     0,   192,   193,   194,   195,
       0,     0,   196,   197,   845,   199,   200,     0,     0,     0,
     201,   202,   203,     0,   204,   205,   206,     0,   207,   208,
     209,   210,  1093,   212,   213,   214,   215,   216,   618,  1094,
     218,     0,   219,   220,  1095,   222,     0,   223,     0,   224,
     225,     0,   226,   227,   228,   229,   230,   231,     0,   232,
       0,     0,     0,  1096,  1097,     0,   235,     0,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
       0,   248,   249,   250,   251,   252,   253,     0,   254,   255,
     256,   257,   258,   259,   260,   261,  1098,  1099,     0,  1100,
       0,   265,   266,   267,   268,   269,   270,     0,   271,   272,
     273,   274,   275,     0,     0,   276,   277,   278,   279,     0,
     280,   281,   282,   621,   622,   283,   284,   285,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,  1101,
     308,  1102,   310,   311,   312,     0,   313,  1103,   314,   315,
     316,   317,  1104,   623,   319,  1105,   321,   322,   323,     0,
     324,   325,     0,     0,  1106,   327,   328,     0,     0,   329,
     330,   331,   332,   333,   625,   335,   336,   337,   338,   339,
     340,   341,   342,   343,     0,     0,   344,     0,   345,   346,
     626,   348,   349,   350,   351,   352,   353,   354,     0,   355,
     356,   357,   358,   359,     0,     0,   360,     0,   361,   362,
     363,  1107,   365,   366,   367,   368,     0,   369,   370,   371,
       0,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,     0,   382,   383,   384,   385,   386,   387,  1108,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
       0,   400,   401,   402,   403,   404,   628,   406,   407,   408,
     409,     0,   410,   411,     0,   412,  1109,   414,     0,     0,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   629,   430,     0,   431,   432,     0,
     433,   434,   435,   436,   437,   438,   439,     0,  1110,  1111,
       0,     0,     0,   442,   443,   630,   445,   631,  1112,   447,
     448,   632,   450,   451,   452,   453,   454,     0,     0,   455,
     456,   457,   458,   459,   460,   633,     0,   462,   463,   464,
     465,   466,   467,  1113,     0,   469,   470,   471,     0,   472,
     473,   474,   475,     0,     0,     0,   476,     0,     0,   477,
     478,   479,   480,   481,   482,   483,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
    1114,     0,     0,     0,     0,     0,     0,  1115,  1116,     0,
       0,     0,     0,     0,  1118,     0,  2449,     0,     0,     0,
       0,     0,  1120,  1121,     0,     0,     0,     0,  1122,  1123,
     107,  1076,   516,  1077,  1078,  1079,  1080,  1081,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   108,   109,
     110,   111,     0,   112,   113,   114,   115,     0,   116,   117,
     118,     0,     0,     0,     0,     0,  1082,     0,     0,   119,
     120,     0,   121,   122,   123,   124,   125,   126,   127,   128,
    1083,   130,  1084,  1085,     0,   133,   134,   135,   136,   137,
     138,  1086,   608,   139,   140,  1087,  1088,   143,     0,   144,
     145,   146,   147,   609,     0,   610,     0,  1089,   151,   152,
     153,   154,   155,   156,   157,   158,   159,     0,   160,   161,
     162,   163,   164,     0,     0,   165,   166,  2998,   168,   611,
     612,   613,   614,   615,   616,   617,   174,   175,   176,   177,
     178,   179,   180,  1090,  1091,   183,  1092,   184,     0,   185,
     186,   187,   188,   189,   190,     0,   191,     0,   192,   193,
     194,   195,     0,     0,   196,   197,   845,   199,   200,     0,
       0,     0,   201,   202,   203,     0,   204,   205,   206,     0,
     207,   208,   209,   210,  1093,   212,   213,   214,   215,   216,
     618,  1094,   218,     0,   219,   220,  1095,   222,     0,   223,
       0,   224,   225,     0,   226,   227,   228,   229,   230,   231,
       0,   232,     0,     0,     0,  2999,  1097,     0,   235,     0,
     236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,     0,   248,   249,   250,   251,   252,   253,     0,
     254,   255,   256,   257,   258,   259,   260,   261,  1098,  1099,
       0,  1100,     0,   265,   266,   267,   268,   269,   270,     0,
     271,   272,   273,   274,   275,     0,     0,   276,   277,   278,
     279,     0,   280,   281,   282,   621,   622,   283,   284,   285,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,  1101,   308,  1102,   310,   311,   312,     0,   313,  1103,
     314,   315,   316,   317,  1104,   623,   319,  1105,   321,   322,
     323,     0,   324,   325,     0,     0,  1106,   327,   328,     0,
       0,   329,   330,   331,   332,   333,   625,   335,   336,   337,
     338,   339,   340,   341,   342,   343,     0,     0,   344,     0,
     345,   346,   626,   348,   349,   350,   351,   352,   353,   354,
       0,   355,   356,   357,   358,   359,     0,     0,   360,     0,
     361,   362,   363,  1107,   365,   366,   367,   368,     0,   369,
     370,   371,     0,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,     0,   382,   383,   384,   385,   386,  3000,
    1108,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,     0,   400,   401,   402,   403,   404,   628,   406,
     407,   408,   409,     0,   410,   411,     0,   412,  1109,   414,
       0,     0,   415,   416,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,   427,   428,   629,   430,     0,   431,
     432,     0,   433,   434,   435,   436,   437,   438,   439,     0,
    1110,  1111,     0,     0,     0,   442,   443,   630,   445,   631,
    1112,   447,   448,   632,   450,   451,   452,   453,   454,     0,
       0,   455,   456,   457,   458,   459,   460,   633,     0,   462,
     463,   464,   465,   466,   467,  1113,     0,   469,   470,   471,
       0,   472,   473,   474,   475,     0,     0,     0,   476,     0,
       0,   477,   478,   479,   480,   481,   482,   483,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,  1114,     0,     0,     0,     0,     0,     0,  1115,
    1116,     0,     0,     0,     0,     0,  1118,     0,  3002,     0,
       0,     0,     0,     0,  1120,  1121,     0,     0,     0,     0,
    1122,  1123,   107,  1076,   516,  1077,  1078,  1079,  1080,  1081,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     108,   109,   110,   111,     0,   112,   113,   114,   115,     0,
     116,   117,   118,     0,     0,     0,     0,     0,  1082,     0,
       0,   119,   120,     0,   121,   122,   123,   124,   125,   126,
     127,  3602,  1083,   130,  1084,  1085,     0,   133,   134,   135,
     136,   137,   138,  1086,   608,   139,   140,  1087,  1088,   143,
       0,   144,   145,   146,   147,   609,     0,   610,     0,  1089,
     151,   152,   153,   154,   155,   156,   157,   158,   159,     0,
     160,   161,   162,   163,   164,     0,     0,   165,   166,   167,
    3603,   611,   612,   613,   614,   615,   616,   617,   174,   175,
     176,   177,   178,   179,   180,  1090,  1091,   183,  1092,   184,
       0,   185,   186,   187,   188,   189,   190,     0,   191,     0,
     192,   193,   194,   195,     0,     0,   196,   197,   845,   199,
     200,     0,     0,     0,   201,   202,   203,     0,   204,   205,
     206,     0,   207,   208,   209,   210,  1093,   212,   213,   214,
     215,   216,   618,  1094,   218,     0,   219,   220,  1095,   222,
       0,   223,     0,   224,   225,     0,   226,   227,   228,   229,
     230,   231,     0,   232,     0,     0,     0,  1096,  1097,     0,
     235,     0,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,     0,   248,   249,   250,   251,   252,
     253,     0,   254,   255,   256,   257,   258,   259,   260,   261,
    1098,  1099,     0,  1100,     0,   265,   266,   267,   268,   269,
     270,     0,   271,   272,   273,   274,   275,     0,     0,   276,
     277,   278,   279,     0,   280,   281,   282,   621,   622,   283,
     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,  1101,   308,  1102,   310,   311,   312,     0,
     313,  1103,   314,   315,   316,   317,  1104,   623,   319,  1105,
     321,   322,   323,     0,   324,   325,     0,     0,  1106,   327,
     328,     0,     0,   329,   330,   331,   332,   333,   625,   335,
     336,   337,   338,   339,   340,   341,   342,   343,     0,     0,
     344,     0,   345,   346,   626,   348,   349,   350,   351,   352,
     353,   354,     0,   355,   356,   357,   358,   359,     0,     0,
     360,     0,   361,   362,   363,  1107,   365,   366,   367,   368,
       0,   369,   370,   371,     0,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,     0,   382,   383,   384,   385,
     386,   387,  1108,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,     0,   400,   401,   402,   403,   404,
     628,   406,   407,   408,   409,     0,   410,   411,     0,   412,
    1109,   414,     0,     0,   415,   416,   417,   418,   419,   420,
     421,   422,   423,   424,   425,   426,   427,   428,   629,   430,
       0,   431,   432,     0,   433,   434,   435,   436,   437,   438,
     439,     0,  1110,  1111,     0,     0,     0,   442,   443,   630,
     445,   631,  1112,   447,   448,   632,   450,   451,  3604,   453,
     454,     0,     0,   455,   456,   457,   458,   459,   460,   633,
       0,   462,   463,   464,   465,   466,   467,  1113,     0,   469,
     470,   471,     0,   472,   473,   474,   475,     0,     0,     0,
     476,     0,     0,   477,   478,   479,   480,   481,   482,   483,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,  1114,     0,     0,     0,     0,     0,
       0,  1115,  1116,     0,     0,     0,     0,     0,  1118,     0,
    1119,     0,     0,     0,     0,     0,  1120,  1121,     0,     0,
       0,     0,  1122,  1123,   107,  1076,   516,  1077,  1078,  1079,
    1080,  1081,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   108,   109,   110,   111,     0,   112,   113,   114,
     115,     0,   116,   117,   118,     0,     0,     0,     0,     0,
    1082,     0,     0,   119,   120,     0,   121,   122,   123,   124,
     125,   126,   127,   128,  1083,   130,  1084,  1085,     0,   133,
     134,   135,   136,   137,   138,  1086,   608,   139,   140,  1087,
    1088,   143,     0,   144,   145,   146,   147,   609,     0,   610,
       0,  1089,   151,   152,   153,   154,   155,   156,   157,   158,
     159,     0,   160,   161,   162,   163,   164,     0,     0,   165,
     166,   167,  3603,   611,   612,   613,   614,   615,   616,   617,
     174,   175,   176,   177,   178,   179,   180,  1090,  1091,   183,
    1092,   184,     0,   185,   186,   187,   188,   189,   190,     0,
     191,     0,   192,   193,   194,   195,     0,     0,   196,   197,
     845,   199,   200,     0,     0,     0,   201,   202,   203,     0,
     204,   205,   206,     0,   207,   208,   209,   210,  1093,   212,
     213,   214,   215,   216,   618,  1094,   218,     0,   219,   220,
    1095,   222,     0,   223,     0,   224,   225,     0,   226,   227,
     228,   229,   230,   231,     0,   232,     0,     0,     0,  1096,
    1097,     0,   235,     0,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,     0,   248,   249,   250,
     251,   252,   253,     0,   254,   255,   256,   257,   258,   259,
     260,   261,  1098,  1099,     0,  1100,     0,   265,   266,   267,
     268,   269,   270,     0,   271,   272,   273,   274,   275,     0,
       0,   276,   277,   278,   279,     0,   280,   281,   282,   621,
     622,   283,   284,   285,   286,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,  1101,   308,  1102,   310,   311,
     312,     0,   313,  1103,   314,   315,   316,   317,  1104,   623,
     319,  1105,   321,   322,   323,     0,   324,   325,     0,     0,
    1106,   327,   328,     0,     0,   329,   330,   331,   332,   333,
     625,   335,   336,   337,   338,   339,   340,   341,   342,   343,
       0,     0,   344,     0,   345,   346,   626,   348,   349,   350,
     351,   352,   353,   354,     0,   355,   356,   357,   358,   359,
       0,     0,   360,     0,   361,   362,   363,  1107,   365,   366,
     367,   368,     0,   369,   370,   371,     0,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,     0,   382,   383,
     384,   385,   386,   387,  1108,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,     0,   400,   401,   402,
     403,   404,   628,   406,   407,   408,   409,     0,   410,   411,
       0,   412,  1109,   414,     0,     0,   415,   416,   417,   418,
     419,   420,   421,   422,   423,   424,   425,   426,   427,   428,
     629,   430,     0,   431,   432,     0,   433,   434,   435,   436,
     437,   438,   439,     0,  1110,  1111,     0,     0,     0,   442,
     443,   630,   445,   631,  1112,   447,   448,   632,   450,   451,
    3604,   453,   454,     0,     0,   455,   456,   457,   458,   459,
     460,   633,     0,   462,   463,   464,   465,   466,   467,  1113,
       0,   469,   470,   471,     0,   472,   473,   474,   475,     0,
       0,     0,   476,     0,     0,   477,   478,   479,   480,   481,
     482,   483,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,  1114,     0,     0,     0,
       0,     0,     0,  1115,  1116,     0,     0,     0,     0,     0,
    1118,     0,  1119,     0,     0,     0,     0,     0,  1120,  1121,
       0,     0,     0,     0,  1122,  1123,   107,  1076,   516,  1077,
    1078,     0,  1080,  1081,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   108,   109,   110,   111,     0,   112,
     113,   114,   115,     0,   116,   117,   118,     0,     0,     0,
       0,     0,  1082,     0,     0,   119,   120,     0,   121,   122,
     123,   124,   125,   126,   127,   128,  1083,   130,  1084,  1085,
       0,   133,   134,   135,   136,   137,   138,  1086,   608,   139,
     140,  1087,  1088,   143,     0,   144,   145,   146,   147,   609,
       0,   610,     0,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,     0,   160,   161,   162,   163,   164,     0,
       0,   165,   166,   167,   168,   611,   612,   613,   614,   615,
     616,   617,   174,   175,   176,   177,   178,   179,   180,  1090,
    1091,   183,     0,   184,     0,   185,   186,   187,   188,   189,
     190,     0,   191,     0,   192,   193,   194,   195,     0,     0,
     196,   197,   845,   199,   200,     0,     0,     0,   201,   202,
     203,     0,   204,   205,   206,     0,   207,   208,   209,   210,
    1093,   212,   213,   214,   215,   216,   618,  1094,   218,     0,
     219,   220,  1095,   222,     0,   223,     0,   224,   225,     0,
     226,   227,   228,   229,   230,   231,     0,   232,     0,     0,
       0,  1096,  1097,     0,   235,     0,   236,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,     0,   248,
     249,   250,   251,   252,   253,     0,   254,   255,   256,   257,
     258,   259,   260,   261,  1098,  1099,     0,  1100,     0,   265,
     266,   267,   268,   269,   270,     0,   271,   272,   273,   274,
     275,     0,     0,   276,   277,   278,   279,     0,   280,   281,
     282,   621,   622,   283,   284,   285,   286,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,  1101,   308,  1102,
     310,   311,   312,     0,   313,  2789,   314,   315,   316,   317,
    1104,   623,   319,  1105,   321,   322,   323,     0,   324,   325,
       0,     0,   326,   327,   328,     0,     0,   329,   330,   331,
     332,   333,   625,   335,   336,   337,   338,   339,   340,   341,
     342,   343,     0,     0,   344,     0,   345,   346,   626,   348,
     349,   350,   351,   352,   353,   354,     0,   355,   356,   357,
     358,   359,     0,     0,   360,     0,   361,   362,   363,  1107,
     365,   366,   367,   368,     0,   369,   370,   371,     0,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,     0,
     382,   383,   384,   385,   386,   387,  1108,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,     0,   400,
     401,   402,   403,   404,   628,   406,   407,   408,   409,     0,
     410,   411,     0,   412,  1109,   414,     0,     0,   415,   416,
     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
     427,   428,   629,   430,     0,   431,   432,     0,   433,   434,
     435,   436,   437,   438,   439,     0,  1110,  1111,     0,     0,
       0,   442,   443,   630,   445,   631,  1112,   447,   448,   632,
     450,   451,   452,   453,   454,     0,     0,   455,   456,   457,
     458,   459,   460,   633,     0,   462,   463,   464,   465,   466,
     467,  1113,     0,   469,   470,   471,     0,   472,   473,   474,
     475,     0,     0,     0,   476,     0,     0,   477,   478,   479,
     480,   481,   482,   483,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,  2790,     0,
       0,     0,     0,     0,     0,  2791,  2792,     0,     0,     0,
       0,     0,  1118,     0,  1119,     0,     0,     0,     0,     0,
    1120,  1121,     0,     0,     0,     0,  1122,  1123,   107,  1076,
     516,  1077,  1078,  1079,  1080,  1081,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   108,   109,   110,   111,
       0,   112,   113,   114,   115,     0,   116,   117,   118,     0,
       0,     0,     0,     0,  1082,     0,     0,   119,   120,     0,
     121,   122,   123,   124,   125,   126,   127,   128,  1083,   130,
    1084,  1085,     0,   133,   134,   135,   136,   137,   138,  1086,
     608,   139,   140,  1087,  1088,   143,     0,   144,   145,   146,
     147,   609,     0,   610,     0,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,     0,   160,   161,   162,   163,
     164,     0,     0,   165,   166,   167,   168,   611,   612,   613,
     614,   615,   616,   617,   174,   175,   176,   177,   178,   179,
     180,  1090,  1091,   183,     0,   184,     0,   185,   186,   187,
     188,   189,   190,     0,   191,     0,   192,   193,   194,   195,
       0,     0,   196,   197,   845,   199,   200,     0,     0,     0,
     201,   202,   203,     0,   204,   205,   206,     0,   207,   208,
     209,   210,  1093,   212,   213,   214,   215,   216,   618,  1094,
     218,     0,   219,   220,  1095,   222,     0,   223,     0,   224,
     225,     0,   226,   227,   228,   229,   230,   231,     0,   232,
       0,     0,     0,  1096,  1097,     0,   235,     0,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
       0,   248,   249,   250,   251,   252,   253,     0,   254,   255,
     256,   257,   258,   259,   260,   261,  1098,  1099,     0,  1100,
       0,   265,   266,   267,   268,   269,   270,     0,   271,   272,
     273,   274,   275,     0,     0,   276,   277,   278,   279,     0,
     280,   281,   282,   621,   622,   283,   284,   285,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,  1101,
     308,  1102,   310,   311,   312,     0,   313,     0,   314,   315,
     316,   317,  1104,   623,   319,  1105,   321,   322,   323,     0,
     324,   325,     0,     0,  1106,   327,   328,     0,     0,   329,
     330,   331,   332,   333,   625,   335,   336,   337,   338,   339,
     340,   341,   342,   343,     0,     0,   344,     0,   345,   346,
     626,   348,   349,   350,   351,   352,   353,   354,     0,   355,
     356,   357,   358,   359,     0,     0,   360,     0,   361,   362,
     363,  1107,   365,   366,   367,   368,     0,   369,   370,   371,
       0,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,     0,   382,   383,   384,   385,   386,   387,  1108,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
       0,   400,   401,   402,   403,   404,   628,   406,   407,   408,
     409,     0,   410,   411,     0,   412,  1109,   414,     0,     0,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   629,   430,     0,   431,   432,     0,
     433,   434,   435,   436,   437,   438,   439,     0,  1110,  1111,
       0,     0,     0,   442,   443,   630,   445,   631,  1112,   447,
     448,   632,   450,   451,   452,   453,   454,     0,     0,   455,
     456,   457,   458,   459,   460,   633,     0,   462,   463,   464,
     465,   466,   467,  1113,     0,   469,   470,   471,     0,   472,
     473,   474,   475,     0,     0,     0,   476,     0,     0,   477,
     478,   479,   480,   481,   482,   483,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
       0,     0,     0,     0,     0,     0,     0,  1539,  1540,     0,
       0,     0,     0,     0,  1118,     0,  1119,     0,     0,     0,
       0,     0,  1120,  1121,     0,     0,     0,     0,  1122,  1123,
     107,  1076,   516,  1077,  1078,     0,  1080,  1081,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   108,   109,
     110,   111,     0,   112,   113,   114,   115,     0,   116,   117,
     118,     0,     0,     0,     0,     0,  1082,     0,     0,   119,
     120,     0,   121,   122,   123,   124,   125,   126,   127,   128,
    1083,   130,  1084,  1085,     0,   133,   134,   135,   136,   137,
     138,  1086,   608,   139,   140,  1087,  1088,   143,     0,   144,
     145,   146,   147,   609,     0,   610,     0,   150,   151,   152,
     153,   154,   155,   156,   157,   158,   159,     0,   160,   161,
     162,   163,   164,     0,     0,   165,   166,   167,   168,   611,
     612,   613,   614,   615,   616,   617,   174,   175,   176,   177,
     178,   179,   180,  1090,  1091,   183,     0,   184,     0,   185,
     186,   187,   188,   189,   190,     0,   191,     0,   192,   193,
     194,   195,     0,     0,   196,   197,   845,   199,   200,     0,
       0,     0,   201,   202,   203,     0,   204,   205,   206,     0,
     207,   208,   209,   210,  1093,   212,   213,   214,   215,   216,
     618,  1094,   218,     0,   219,   220,  1095,   222,     0,   223,
       0,   224,   225,     0,   226,   227,   228,   229,   230,   231,
       0,   232,     0,     0,     0,  1096,  1097,     0,   235,     0,
     236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,     0,   248,   249,   250,   251,   252,   253,     0,
     254,   255,   256,   257,   258,   259,   260,   261,  1098,  1099,
       0,  1100,     0,   265,   266,   267,   268,   269,   270,     0,
     271,   272,   273,   274,   275,     0,     0,   276,   277,   278,
     279,     0,   280,   281,   282,   621,   622,   283,   284,   285,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,  1101,   308,  1102,   310,   311,   312,     0,   313,     0,
     314,   315,   316,   317,  1104,   623,   319,  1105,   321,   322,
     323,     0,   324,   325,     0,     0,   326,   327,   328,     0,
       0,   329,   330,   331,   332,   333,   625,   335,   336,   337,
     338,   339,   340,   341,   342,   343,     0,     0,   344,     0,
     345,   346,   626,   348,   349,   350,   351,   352,   353,   354,
       0,   355,   356,   357,   358,   359,     0,     0,   360,     0,
     361,   362,   363,  1107,   365,   366,   367,   368,     0,   369,
     370,   371,     0,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,     0,   382,   383,   384,   385,   386,   387,
    2172,  2173,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,     0,   400,   401,   402,   403,   404,   628,   406,
     407,   408,   409,     0,   410,   411,     0,   412,  1109,   414,
       0,     0,   415,   416,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,   427,   428,   629,   430,     0,   431,
     432,     0,   433,   434,   435,   436,   437,   438,   439,     0,
    1110,  1111,     0,     0,     0,   442,   443,   630,   445,   631,
    1112,   447,   448,   632,   450,   451,   452,   453,   454,     0,
       0,   455,   456,   457,   458,   459,   460,   633,     0,   462,
     463,   464,   465,   466,   467,  1113,     0,   469,   470,   471,
       0,   472,   473,   474,   475,     0,     0,     0,   476,     0,
       0,   477,   478,   479,   480,   481,   482,   483,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,     0,     0,     0,     0,     0,     0,     0,  2174,
    2175,     0,     0,     0,     0,     0,  1118,     0,  1119,     0,
       0,     0,     0,     0,  1120,  1121,     0,     0,     0,     0,
    1122,  1123,   107,  1076,   516,  1077,  1078,  1079,  1080,  1081,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     108,   109,   110,   111,     0,   112,   113,   114,   115,     0,
     116,   117,   118,     0,     0,     0,     0,     0,  1082,     0,
       0,   119,   120,     0,   121,   122,   123,   124,   125,   126,
     127,   128,  1083,   130,  1084,  1085,     0,   133,   134,   135,
     136,   137,   138,  1086,   608,   139,   140,  1087,  1088,   143,
       0,   144,   145,   146,   147,   609,     0,   610,     0,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,     0,
     160,   161,   162,   163,   164,     0,     0,   165,   166,   167,
     168,   611,   612,   613,   614,   615,   616,   617,   174,   175,
     176,   177,   178,   179,   180,  1090,  1091,   183,     0,   184,
       0,   185,   186,   187,   188,   189,   190,     0,   191,     0,
     192,   193,   194,   195,     0,     0,   196,   197,   845,   199,
     200,     0,     0,     0,   201,   202,   203,     0,   204,   205,
     206,     0,   207,   208,   209,   210,  1093,   212,   213,   214,
     215,   216,   618,  1094,   218,     0,   219,   220,  1095,   222,
       0,   223,     0,   224,   225,     0,   226,   227,   228,   229,
     230,   231,     0,   232,     0,     0,     0,  1096,  1097,     0,
     235,     0,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,     0,   248,   249,   250,   251,   252,
     253,     0,   254,   255,   256,   257,   258,   259,   260,   261,
    1098,  1099,     0,  1100,     0,   265,     0,   267,   268,   269,
     270,     0,   271,   272,   273,   274,   275,     0,     0,   276,
     277,   278,   279,     0,   280,   281,   282,   621,   622,   283,
     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,  1101,   308,  1102,   310,   311,   312,     0,
     313,     0,   314,   315,   316,   317,  1104,   623,   319,  1105,
     321,   322,   323,     0,   324,   325,     0,     0,  1106,   327,
     328,     0,     0,   329,   330,   331,   332,   333,   625,   335,
     336,   337,   338,   339,   340,   341,   342,   343,     0,     0,
     344,     0,   345,   346,   626,   348,   349,   350,   351,   352,
     353,   354,     0,   355,   356,   357,   358,   359,     0,     0,
     360,     0,   361,   362,   363,  1107,   365,   366,   367,   368,
       0,   369,   370,   371,     0,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,     0,   382,   383,   384,   385,
     386,   387,  1108,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,     0,   400,   401,   402,   403,   404,
     628,   406,   407,   408,   409,     0,   410,   411,     0,   412,
    1109,   414,     0,     0,   415,   416,   417,   418,   419,   420,
     421,   422,   423,   424,   425,   426,   427,   428,   629,   430,
       0,   431,   432,     0,   433,   434,   435,   436,   437,   438,
     439,     0,  1110,  1111,     0,     0,     0,   442,   443,   630,
     445,   631,  1112,   447,   448,   632,   450,   451,   452,   453,
     454,     0,     0,   455,   456,   457,   458,   459,   460,   633,
       0,   462,   463,   464,   465,   466,   467,  1113,     0,   469,
     470,   471,     0,   472,   473,   474,   475,     0,     0,     0,
     476,     0,     0,   477,   478,   479,   480,   481,   482,   483,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,     0,     0,     0,     0,     0,     0,
       0,  1539,  1540,     0,     0,     0,     0,     0,  1118,     0,
    1119,     0,     0,     0,     0,     0,  1120,  1121,     0,     0,
       0,     0,  1122,  1123,   107,  1076,   516,  1077,  1078,  1079,
    1080,  1081,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   108,   109,   110,   111,     0,   112,   113,   114,
     115,     0,   116,   117,   118,     0,     0,     0,     0,     0,
    1082,     0,     0,   119,   120,     0,   121,   122,   123,   124,
     125,   126,   127, -2095,  1083,   130,  1084,  1085,     0,   133,
     134,   135,   136,   137,   138,  1086,   608,   139,   140,  1087,
    1088,   143,     0,   144,   145,   146,   147,   609,     0,   610,
       0,  1089,   151,   152,   153,   154,   155,   156,   157,   158,
     159,     0,   160,   161,   162,   163,   164,     0,     0,   165,
     166,   167,  3603,   611,   612,   613,   614,   615,   616,   617,
     174,   175,   176,   177,   178,   179,   180,  1090,  1091,   183,
    1092,   184,     0,   185,   186,   187,   188,   189,   190,     0,
     191,     0,   192,   193,   194,   195,     0,     0,   196,   197,
     845,   199,   200,     0,     0,     0,   201,   202,   203,     0,
     204,   205,   206,     0,   207,   208,   209,   210,  1093,   212,
     213,   214,   215,   216,   618,  1094,   218,     0,   219,   220,
    1095,   222,     0,   223,     0,   224,   225,     0,   226,   227,
     228,   229, -2095,   231,     0,   232,     0,     0,     0,  1096,
    1097,     0,   235,     0,   236,   237,   238,   239,   240,   241,
     242, -2095,   244,   245,   246,   247,     0,   248,   249,   250,
     251,   252,   253,     0,   254,   255,   256,   257,   258,   259,
     260,   261,  1098,  1099,     0,  1100,     0,   265,     0,     0,
     268,   269,   270,     0,   271,   272,   273,   274,   275,     0,
       0,   276,   277,   278, -2095,     0,   280,   281,   282,   621,
     622,   283,   284,   285,   286,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,  1101,   308,  1102,   310,   311,
     312,     0,   313,     0,   314,   315,     0,   317,  1104,   623,
     319,  1105,   321,   322,   323,     0,   324,   325,     0,     0,
    1106,   327,   328,     0,     0,   329,   330,   331,   332,   333,
     625,   335,   336,   337,   338,   339,   340,   341,   342,   343,
       0,     0,   344,     0,   345,   346,   626,   348,   349,   350,
     351,   352,   353,   354,     0,   355,   356,   357,   358,   359,
       0,     0,   360,     0,   361,   362,   363,  1107,   365,   366,
     367,   368,     0,   369,   370,   371,     0,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,     0,   382,   383,
     384,   385,   386,   387,  1108,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,     0,   400,   401,   402,
     403,   404,   628,   406,   407,   408,   409,     0,   410, -2095,
       0,   412,  1109,   414,     0,     0,   415,   416,   417,   418,
     419,   420,   421,   422,   423,   424,   425,   426,   427,   428,
     629,   430,     0,   431,   432,     0,   433,   434,   435,   436,
     437,   438,   439,     0,  1110,  1111,     0,     0,     0,   442,
     443,   630,   445,   631,  1112,   447,   448,   632,   450,   451,
    3604,   453,   454,     0,     0,   455,   456,   457,   458,   459,
     460,   633,     0,   462,   463,   464,   465,   466,   467,  1113,
       0,   469,   470,   471,     0,   472,   473,   474,   475,     0,
       0,     0,   476,     0,     0,   477,   478,   479,   480,   481,
     482,   483,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497, -2095,     0,     0,     0,
       0,     0,     0,  1115,  1116,     0,     0,     0,     0,     0,
    1118,     0,  1119,     0,     0,     0,     0,     0,  1120,  1121,
       0,     0,     0,     0,  1122,  1123,   107,  1076,   516,  1077,
    1078,  1079,  1080,  1081,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   108,   109,   110,   111,     0,   112,
     113,   114,   115,     0,   116,   117,   118,     0,     0,     0,
       0,     0,  1082,     0,     0,   119,   120,     0,   121,   122,
     123,   124,   125,   126,   127,     0,  1083,   130,  1084,  1085,
       0,   133,   134,   135,   136,   137,   138,  1086,   608,   139,
     140,  1087,  1088,   143,     0,   144,   145,   146,   147,   609,
       0,   610,     0,  1089,   151,   152,   153,   154,   155,   156,
     157,   158,   159,     0,   160,   161,   162,   163,   164,     0,
       0,   165,   166,   167,   168,   611,   612,   613,   614,   615,
     616,   617,   174,   175,   176,   177,   178,   179,   180,  1090,
    1091,   183,  1092,   184,     0,   185,   186,   187,   188,   189,
     190,     0,   191,     0,   192,   193,   194,   195,     0,     0,
     196,   197,   845,   199,   200,     0,     0,     0,   201,   202,
     203,     0,   204,     0,   206,     0,   207,   208,   209,   210,
    1093,   212,   213,   214,   215,   216,   618,  1094,   218,     0,
     219,   220,  1095,   222,     0,   223,     0,   224,   225,     0,
     226,   227,   228,   229,     0,   231,     0,   232,     0,     0,
       0,  1096,  1097,     0,   235,     0,   236,   237,   238,   239,
     240,   241,   242,     0,   244,   245,   246,   247,     0,   248,
     249,   250,   251,   252,   253,     0,   254,   255,   256,   257,
     258,   259,   260,   261,  1098,  1099,     0,  1100,     0,   265,
       0,     0,   268,   269,   270,     0,   271,   272,   273,   274,
     275,     0,     0,   276,   277,   278,     0,     0,   280,   281,
     282,   621,   622,   283,   284,   285,   286,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,  1101,   308,  1102,
     310,   311,   312,     0,   313,     0,   314,   315,     0,   317,
    1104,   623,   319,  1105,   321,   322,   323,     0,   324,   325,
       0,     0,  1106,   327,   328,     0,     0,   329,   330,   331,
     332,   333,   625,   335,   336,   337,   338,   339,   340,   341,
     342,   343,     0,     0,   344,     0,   345,   346,   626,   348,
     349,   350,   351,   352,   353,   354,     0,   355,   356,   357,
     358,   359,     0,     0,   360,     0,   361,   362,   363,  1107,
     365,   366,   367,   368,     0,   369,   370,   371,     0,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,     0,
     382,   383,   384,   385,   386,   387,  1108,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,     0,   400,
     401,   402,   403,   404,   628,   406,   407,   408,   409,     0,
     410,     0,     0,   412,  1109,   414,     0,     0,   415,   416,
     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
     427,   428,   629,   430,     0,   431,   432,     0,   433,   434,
     435,   436,   437,   438,   439,     0,  1110,  1111,     0,     0,
       0,   442,   443,   630,   445,   631,  1112,   447,   448,   632,
     450,   451,   452,   453,   454,     0,     0,   455,   456,   457,
     458,   459,   460,   633,     0,   462,   463,   464,   465,   466,
     467,  1113,     0,   469,   470,   471,     0,   472,   473,   474,
     475,     0,     0,     0,   476,     0,     0,   477,   478,   479,
     480,   481,   482,   483,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,     0,     0,
       0,     0,     0,     0,     0,  1115,  1116,     0,     0,     0,
     696,     0,  1118,     0,  1119,     0,     0,     0,     0,     0,
    1120,  1121,     0,     0,     0,     0,  1122,  1123,   108,   109,
     110,   111,     0,   112,   113,   114,   115,     0,   116,   117,
     118,     0,     0,     0,     0,     0,     0,     0,     0,   119,
     120,     0,   121,   122,   123,     0,   125,   126,   127,   697,
     698,     0,   699,   700,     0,   133,   134,   135,   136,   137,
     138,     0,     0,   139,   140,   701,   702,   143,     0,   144,
     145,   146,   147,   703,     0,     0,     0,     0,   151,   152,
     153,   154,   155,     0,   157,   158,   159,     0,   160,   161,
     162,   163,   164,     0,     0,     0,   166,   167,   168,     0,
       0,     0,     0,     0,     0,     0,   174,   175,   176,   177,
     178,   179,   180,   704,   705,   183,     0,   184,     0,   185,
     186,   187,   188,   189,   190,     0,   191,     0,   192,   193,
     194,   195,     0,     0,   196,   197,   198,   199,   200,     0,
       0,     0,   201,   202,   203,     0,   204,   205,   206,     0,
     207,   208,   209,   210,   706,   212,   213,   214,   215,   216,
     707,     0,   218,     0,   219,   220,   708,   222,     0,   223,
       0,   224,     0,     0,     0,   227,   228,   709,     0,   231,
       0,   232,     0,     0,     0,   710,   711,     0,   235,     0,
     236,   237,   238,   239,   240,   241,   242,     0,   244,   245,
     246,   247,     0,   248,   249,   250,   251,   252,   253,     0,
     254,     0,   712,   257,   258,   259,   260,   261,   713,   714,
       0,   715,     0,   265,     0,     0,   268,     0,   270,     0,
     271,   272,   273,   274,   275,     0,     0,   276,     0,   278,
       0,     0,   280,   281,   282,     0,     0,   283,   284,   285,
     286,   287,   716,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   717,     0,   718,   310,   311,   312,     0,   719,     0,
     314,   315,     0,   317,     0,   720,   319,   721,   321,   322,
     323,     0,   324,   325,     0,     0,   326,   327,   328,     0,
       0,   329,   722,     0,   332,     0,   723,   335,   336,   337,
     338,   339,   340,   341,   342,   343,     0,     0,   344,     0,
     345,   346,   724,     0,   349,   350,   725,   352,   353,   354,
       0,   355,   356,   357,   358,   359,     0,     0,   360,     0,
     361,   362,   363,   726,   365,   366,   367,   368,     0,   369,
     370,   371,     0,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,     0,   382,   383,     0,   385,   386,   387,
     727,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,     0,   400,   401,   402,   403,   404,     0,   406,
     728,   408,   409,     0,   410,     0,     0,   412,   729,   414,
       0,     0,   415,   416,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,   730,   428,   731,   430,     0,   431,
     432,     0,   433,     0,   435,   436,   437,   438,   439,     0,
     732,   733,     0,     0,     0,   442,   443,   734,   445,   735,
       0,   447,   448,   736,   450,   451,   452,   453,   454,     0,
       0,   455,   456,   457,   458,   459,   460,     0,     0,   462,
     463,   464,   465,   466,  1530,   738,     0,   469,     0,   471,
       0,   472,   473,   474,   475,     0,     0,     0,   476,     0,
       0,   477,   478,   479,   480,   481,   482,   739,   740,   741,
     742,   743,   744,   745,   746,   747,   748,   749,   494,   495,
     496,   497,     0,     0,     0,     0,   505,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  3233,     0,
       0,     0,     0,     0,   108,   109,   110,   111,  3234,   112,
     113,   114,   115,     0,   116,   117,   118,     0,     0,     0,
       0,     0,     0,  1041,     0,   119,   120,     0,   121,   122,
     123,     0,   125,   126,   127,   128,   129,     0,   131,   132,
       0,   133,   134,   135,   136,   137,   138,     0,     0,   139,
     140,   141,   142,   143,     0,   144,   145,   146,   147,   148,
       0,     0,     0,   150,   151,   152,   153,   154,   155,     0,
     157,   158,   159,     0,   160,   161,   162,   163,   164,     0,
       0,     0,   166,   167,   168,     0,     0,     0,     0,     0,
       0,     0,   174,   175,   176,   177,   178,   179,   180,   181,
     182,   183,     0,   184,     0,   185,   186,   187,   188,   189,
     190,     0,   191,     0,   192,   193,   194,   195,     0,     0,
     196,   197,   198,   199,   200,     0,     0,     0,   201,   202,
     203,     0,   204,   205,   206,  -672,   207,   208,   209,   210,
     211,   212,   213,   214,   215,   216,   217,     0,   218,  -672,
     219,   220,   221,   222,  -672,   223,     0,   224,     0,     0,
       0,   227,   228,   506,     0,   231,     0,   232,     0,     0,
       0,   233,   234,     0,   235,     0,   236,   237,   238,   239,
     240,   241,   242,     0,   244,   245,   246,   247,     0,   248,
     249,   250,   251,   252,   253,     0,   254,     0,   256,   257,
     258,   259,   260,   261,   262,   263,  -672,   264,     0,   265,
       0,     0,   268,     0,   270,     0,   271,   272,   273,   274,
     275,     0,     0,   276,     0,   278,     0,  -672,   280,   281,
     282,     0,     0,   283,   284,   285,   286,   287,   507,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,     0,   309,
     310,   311,   312,     0,   313,     0,   314,   315,     0,   317,
       0,   318,   319,   320,   321,   322,   323,  -672,   324,   325,
       0,     0,   326,   327,   328,     0,  -672,   329,   330,     0,
     332,     0,   334,   335,   336,   337,   338,   339,   340,   341,
     342,   343,     0,     0,   344,     0,   345,   346,   347,     0,
     349,   350,   351,   352,   353,   354,     0,   355,   356,   357,
     358,   359,     0,     0,   360,     0,   361,   362,   363,   364,
     365,   366,   367,   368,     0,   369,   370,   371,     0,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,     0,
     382,   383,     0,   385,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,     0,   400,
     401,   402,   403,   404,     0,   406,   407,   408,   409,     0,
     410,     0,     0,   412,   413,   414,     0,     0,   415,   416,
     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
     508,   428,   429,   430,     0,   431,   432,     0,   433,     0,
     435,   436,   437,   438,   439,     0,   440,   441,     0,     0,
       0,   442,   443,   444,   445,   446,     0,   447,   448,   449,
     450,   451,   452,   453,   454,  -672,     0,   455,   456,   457,
     458,   459,   460,     0,     0,   462,   463,   464,   465,   466,
     467,   468,     0,   469,     0,   471,     0,   472,   473,   474,
     475,     0,     0,     0,   476,     0,     0,   477,   478,   479,
     480,   481,   482,   483,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,   107,     0,
     532,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1188,   108,   109,   110,   111,
       0,   112,   113,   114,   115,     0,   116,   117,   118,     0,
       0,     0,     0,     0,     0,     0,     0,   119,   120,     0,
     121,   122,   123,   124,   125,   126,   127,   128,   129,   130,
     131,   132,     0,   133,   134,   135,   136,   137,   138,     0,
     608,   139,   140,   141,   142,   143,     0,   144,   145,   146,
     147,   609,     0,   610,     0,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,     0,   160,   161,   162,   163,
     164,     0,     0,   165,   166,   167,   168,   611,   612,   613,
     614,   615,   616,   617,   174,   175,   176,   177,   178,   179,
     180,   181,   182,   183,     0,   184,     0,   185,   186,   187,
     188,   189,   190,     0,   191,     0,   192,   193,   194,   195,
       0,     0,   196,   197,   198,   199,   200,     0,     0,     0,
     201,   202,   203,     0,   204,   205,   206,     0,   207,   208,
     209,   210,   211,   212,   213,   214,   215,   216,   618,     0,
     218,     0,   219,   220,   221,   222,     0,   223,     0,   224,
     225,    21,   226,   227,   228,   229,   230,   231,     0,   232,
       0,   619,     0,   233,   234,     0,   235,     0,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
       0,   248,   249,   250,   251,   252,   253,     0,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,     0,   264,
       0,   265,   266,   267,   268,   269,   270,     0,   271,   272,
     273,   274,   275,   620,     0,   276,   277,   278,   279,     0,
     280,   281,   282,   621,   622,   283,   284,   285,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,     0,   313,     0,   314,   315,
     316,   317,     0,   623,   319,   320,   321,   322,   323,     0,
     324,   325,     0,   624,   326,   327,   328,     0,     0,   329,
     330,   331,   332,   333,   625,   335,   336,   337,   338,   339,
     340,   341,   342,   343,     0,     0,   344,     0,   345,   346,
     626,   348,   349,   350,   351,   352,   353,   354,     0,   355,
     356,   357,   358,   359,     0,     0,   360,     0,   361,   362,
     363,   364,   365,   366,   367,   368,     0,   369,   370,   371,
       0,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,     0,   382,   383,   384,   385,   386,   387,   388,   627,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
      29,   400,   401,   402,   403,   404,   628,   406,   407,   408,
     409,     0,   410,   411,     0,   412,   413,   414,     0,     0,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   629,   430,     0,   431,   432,    34,
     433,   434,   435,   436,   437,   438,   439,     0,   440,   441,
       0,     0,     0,   442,   443,   630,   445,   631,     0,   447,
     448,   632,   450,   451,   452,   453,   454,     0,     0,   455,
     456,   457,   458,   459,   460,   633,     0,   462,   463,   464,
     465,   466,   634,   468,     0,   469,   470,   471,     0,   472,
     473,   474,   475,     0,     0,     0,   476,     0,    39,   477,
     478,   479,   480,   481,   482,   483,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
       0,   107,    40,   532,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   635,     0,     0,   108,
     109,   110,   111,     0,   112,   113,   114,   115,     0,   116,
     117,   118,     0,     0,     0,     0,     0,     0,     0,     0,
     119,   120,     0,   121,   122,   123,   124,   125,   126,   127,
     128,   129,   130,   131,   132,     0,   133,   134,   135,   136,
     137,   138,     0,   608,   139,   140,   141,   142,   143,     0,
     144,   145,   146,   147,   609,     0,   610,     0,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,     0,   160,
     161,   162,   163,   164,     0,     0,   165,   166,   167,   168,
     611,   612,   613,   614,   615,   616,   617,   174,   175,   176,
     177,   178,   179,   180,   181,   182,   183,     0,   184,     0,
     185,   186,   187,   188,   189,   190,     0,   191,     0,   192,
     193,   194,   195,     0,     0,   196,   197,   198,   199,   200,
       0,     0,     0,   201,   202,   203,     0,   204,   205,   206,
       0,   207,   208,   209,   210,   211,   212,   213,   214,   215,
     216,   618,     0,   218,     0,   219,   220,   221,   222,     0,
     223,     0,   224,   225,     0,   226,   227,   228,   229,   230,
     231,     0,   232,     0,   619,     0,   233,   234,     0,   235,
       0,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,     0,   248,   249,   250,   251,   252,   253,
       0,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,     0,   264,     0,   265,   266,   267,   268,   269,   270,
       0,   271,   272,   273,   274,   275,   620,     0,   276,   277,
     278,   279,     0,   280,   281,   282,   621,   622,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,     0,   313,
       0,   314,   315,   316,   317,     0,   623,   319,   320,   321,
     322,   323,     0,   324,   325,     0,   624,   326,   327,   328,
       0,     0,   329,   330,   331,   332,   333,   625,   335,   336,
     337,   338,   339,   340,   341,   342,   343,     0,     0,   344,
       0,   345,   346,   626,   348,   349,   350,   351,   352,   353,
     354,     0,   355,   356,   357,   358,   359,     0,     0,   360,
       0,   361,   362,   363,   364,   365,   366,   367,   368,     0,
     369,   370,   371,     0,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,     0,   382,   383,   384,   385,   386,
     387,   388,   627,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,     0,   400,   401,   402,   403,   404,   628,
     406,   407,   408,   409,     0,   410,   411,     0,   412,   413,
     414,     0,     0,   415,   416,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,   428,   629,   430,     0,
     431,   432,     0,   433,   434,   435,   436,   437,   438,   439,
       0,   440,   441,     0,     0,     0,   442,   443,   630,   445,
     631,     0,   447,   448,   632,   450,   451,   452,   453,   454,
       0,     0,   455,   456,   457,   458,   459,   460,   633,     0,
     462,   463,   464,   465,   466,   634,   468,     0,   469,   470,
     471,     0,   472,   473,   474,   475,     0,     0,     0,   476,
       0,     0,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   917,  1494,   516,     0,     0,     0,  1080,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   635,
       0,   108,   109,   110,   111,     0,   112,   113,   114,   115,
       0,   116,   117,   118,     0,     0,     0,     0,     0,     0,
       0,     0,   119,   120,     0,   121,   122,   123,   918,   125,
     126,   127,   919,   920,   921,   922,   923,     0,   133,   134,
     135,   136,   137,   138,     0,     0,   139,   140,   924,   925,
     143,     0,   144,   145,   146,   147,   926,     0,   927,     0,
     928,   151,   152,   153,   154,   155,   929,   157,   158,   159,
       0,   160,   161,   162,   163,   164,     0,     0,   930,   166,
     167,   168,   931,   932,   933,   934,     0,     0,   935,   174,
     175,   176,   177,   178,   179,   180,   936,   937,   183,     0,
     184,     0,   185,   186,   187,   188,   189,   190,     0,   191,
       0,   192,   193,   194,   195,     0,     0,   196,   197,   198,
     199,   200,     0,     0,     0,   201,   202,   203,     0,   204,
     205,   206,     0,   207,   208,   209,   210,   938,   212,   213,
     214,   215,   216,   939,  1495,   218,     0,   219,   220,   940,
     222,     0,   223,     0,   224,   941,     0,   942,   227,   228,
     943,   944,   231,     0,   232,     0,     0,     0,   945,   946,
       0,   235,     0,   236,   237,   238,   239,   240,   241,   242,
     947,   244,   245,   246,   247,     0,   248,   249,   250,   251,
     252,   253,     0,   254,   948,   949,   257,   258,   259,   260,
     261,   950,   951,     0,   952,     0,   265,   953,   954,   268,
     955,   270,     0,   271,   272,   273,   274,   275,     0,     0,
     276,   956,   278,   957,     0,   280,   281,   282,     0,     0,
     283,   284,   285,   286,   287,   958,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   959,   960,   961,   310,   311,   312,
       0,   962,     0,   314,   315,   963,   317,     0,   964,   319,
     965,   321,   322,   323,     0,   324,   325,  1496,     0,   326,
     327,   328,     0,     0,   329,   966,   967,   332,   968,   969,
     335,   336,   337,   338,   339,   340,   341,   342,   343,     0,
       0,   344,     0,   345,   346,   970,   971,   349,   350,   972,
     352,   353,   354,     0,   355,   356,   357,   358,   359,     0,
       0,   360,     0,   361,   362,   363,   973,   365,   366,   367,
     368,     0,   369,   370,   371,     0,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,     0,   382,   383,   974,
     385,   386,   387,   975,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,     0,   400,   401,   402,   403,
     404,   976,   406,   977,   408,   409,     0,   410,   978,     0,
     412,   979,   414,     0,     0,   415,   416,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   980,   428,   981,
     430,     0,   431,   432,     0,   433,   982,   435,   436,   437,
     438,   439,     0,   983,   984,     0,     0,     0,   442,   443,
     985,   445,   986,  1497,   447,   448,   987,   450,   451,   452,
     453,   454,     0,     0,   455,   456,   457,   458,   459,   460,
     988,     0,   462,   463,   464,   465,   466,  1378,   990,     0,
     469,   991,   471,     0,   472,   473,   474,   475,     0,     0,
       0,   476,     0,     0,   477,   478,   479,   480,   481,   482,
     992,   993,   994,   995,   996,   997,   998,   999,  1000,  1001,
    1002,   494,   495,   496,   497,   917,     0,     0,     0,     0,
       0,     0,  1498,  1499,  2350,     0,     0,     0,     0,     0,
       0,  2351,     0,   108,   109,   110,   111,     0,   112,   113,
     114,   115,     0,   116,   117,   118,     3,     4,     0,     0,
       0,     0,     0,     0,   119,   120,     0,   121,   122,   123,
     918,   125,   126,   127,   919,   920,   921,   922,   923,     0,
     133,   134,   135,   136,   137,   138,     0,     0,   139,   140,
     924,   925,   143,     0,   144,   145,   146,   147,   926,     0,
     927,     0,   928,   151,   152,   153,   154,   155,   929,   157,
     158,   159,     0,   160,   161,   162,   163,   164,     0,     0,
     930,   166,   167,   168,   931,   932,   933,   934,     0,     0,
     935,   174,   175,   176,   177,   178,   179,   180,   936,   937,
     183,     0,   184,     0,   185,   186,   187,   188,   189,   190,
       0,   191,     0,   192,   193,   194,   195,     0,     0,   196,
     197,   198,   199,   200,     0,     0,     0,   201,   202,   203,
       0,   204,   205,   206,     0,   207,   208,   209,   210,   938,
     212,   213,   214,   215,   216,   939,     0,   218,     0,   219,
     220,   940,   222,     0,   223,     0,   224,   941,    21,   942,
     227,   228,   943,   944,   231,     0,   232,     0,     0,     0,
     945,   946,     0,   235,     0,   236,   237,   238,   239,   240,
     241,   242,   947,   244,   245,   246,   247,     0,   248,   249,
     250,   251,   252,   253,     0,   254,   948,   949,   257,   258,
     259,   260,   261,   950,   951,     0,   952,     0,   265,   953,
     954,   268,   955,   270,     0,   271,   272,   273,   274,   275,
       0,     0,   276,   956,   278,   957,     0,   280,   281,   282,
       0,     0,   283,   284,   285,   286,   287,   958,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   959,   960,   961,   310,
     311,   312,     0,   962,     0,   314,   315,   963,   317,     0,
     964,   319,   965,   321,   322,   323,     0,   324,   325,     0,
       0,   326,   327,   328,     0,     0,   329,   966,   967,   332,
     968,   969,   335,   336,   337,   338,   339,   340,   341,   342,
     343,     0,     0,   344,     0,   345,   346,   970,   971,   349,
     350,   972,   352,   353,   354,     0,   355,   356,   357,   358,
     359,     0,     0,   360,     0,   361,   362,   363,   973,   365,
     366,   367,   368,     0,   369,   370,   371,     0,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,     0,   382,
     383,   974,   385,   386,   387,   975,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,    29,   400,   401,
     402,   403,   404,   976,   406,   977,   408,   409,     0,   410,
     978,     0,   412,   979,   414,     0,     0,   415,   416,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   980,
     428,   981,   430,     0,   431,   432,    34,   433,   982,   435,
     436,   437,   438,   439,     0,   983,   984,     0,     0,     0,
     442,   443,   985,   445,   986,     0,   447,   448,   987,   450,
     451,   452,   453,   454,     0,     0,   455,   456,   457,   458,
     459,   460,   988,     0,   462,   463,   464,   465,   466,   989,
     990,     0,   469,   991,   471,     0,   472,   473,   474,   475,
       0,     0,     0,   476,     0,    39,   477,   478,   479,   480,
     481,   482,   992,   993,   994,   995,   996,   997,   998,   999,
    1000,  1001,  1002,   494,   495,   496,   497,   107,     0,    40,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   677,     0,   108,   109,   110,   111,     0,
     112,   113,   114,   115,     0,   116,   117,   118,     0,     0,
       0,     0,     0,     0,     0,     0,   119,   120,     0,   121,
     122,   123,   124,   125,   126,   127,   128,   129,   130,   131,
     132,     0,   133,   134,   135,   136,   137,   138,     0,   608,
     139,   140,   141,   142,   143,     0,   144,   145,   146,   147,
     609,     0,   610,     0,   150,   151,   152,   153,   154,   155,
     156,   157,   158,   159,     0,   160,   161,   162,   163,   164,
       0,     0,   165,   166,   167,   168,   611,   612,   613,   614,
     615,   616,   617,   174,   175,   176,   177,   178,   179,   180,
     181,   182,   183,     0,   184,     0,   185,   186,   187,   188,
     189,   190,     0,   191,     0,   192,   193,   194,   195,     0,
       0,   196,   197,   198,   199,   200,     0,     0,     0,   201,
     202,   203,     0,   204,   205,   206,     0,   207,   208,   209,
     210,   211,   212,   213,   214,   215,   216,   618,     0,   218,
       0,   219,   220,   221,   222,     0,   223,     0,   224,   225,
       0,   226,   227,   228,   229,   230,   231,     0,   232,     0,
       0,     0,   233,   234,     0,   235,     0,   236,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,     0,
     248,   249,   250,   251,   252,   253,     0,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,     0,   264,     0,
     265,   266,   267,   268,   269,   270,     0,   271,   272,   273,
     274,   275,     0,     0,   276,   277,   278,   279,     0,   280,
     281,   282,   621,   622,   283,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,     0,   313,     0,   314,   315,   316,
     317,     0,   623,   319,   320,   321,   322,   323,     0,   324,
     325,     0,     0,   326,   327,   328,     0,     0,   329,   330,
     331,   332,   333,   625,   335,   336,   337,   338,   339,   340,
     341,   342,   343,     0,     0,   344,     0,   345,   346,   626,
     348,   349,   350,   351,   352,   353,   354,     0,   355,   356,
     357,   358,   359,     0,     0,   360,     0,   361,   362,   363,
     364,   365,   366,   367,   368,     0,   369,   370,   371,     0,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
       0,   382,   383,   384,   385,   386,   387,   388,   627,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,     0,
     400,   401,   402,   403,   404,   628,   406,   407,   408,   409,
       0,   410,   411,     0,   412,   413,   414,     0,     0,   415,
     416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,   428,   629,   430,     0,   431,   432,     0,   433,
     434,   435,   436,   437,   438,   439,     0,   440,   441,     0,
       0,     0,   442,   443,   630,   445,   631,     0,   447,   448,
     632,   450,   451,   452,   453,   454,     0,     0,   455,   456,
     457,   458,   459,   460,   633,     0,   462,   463,   464,   465,
     466,   467,   468,     0,   469,   470,   471,     0,   472,   473,
     474,   475,     0,     0,     0,   476,     0,     0,   477,   478,
     479,   480,   481,   482,   483,   484,   485,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   107,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   677,     0,   108,   109,   110,
     111,     0,   112,   113,   114,   115,     0,   116,   117,   118,
       0,     0,     0,     0,     0,     0,     0,     0,   119,   120,
       0,   121,   122,   123,   124,   125,   126,   127,   128,   129,
     130,   131,   132,     0,   133,   134,   135,   136,   137,   138,
       0,   608,   139,   140,   141,   142,   143,     0,   144,   145,
     146,   147,   609,     0,   610,     0,   150,   151,   152,   153,
     154,   155,   156,   157,   158,   159,     0,   160,   161,   162,
     163,   164,     0,     0,   165,   166,   167,   168,   611,   612,
     613,   614,   615,   616,   617,   174,   175,   176,   177,   178,
     179,   180,   181,   182,   183,     0,   184,     0,   185,   186,
     187,   188,   189,   190,     0,   191,     0,   192,   193,   194,
     195,     0,     0,   196,   197,   198,   199,   200,     0,     0,
       0,   201,   202,   203,     0,   204,   205,   206,     0,   207,
     208,   209,   210,   211,   212,   213,   214,   215,   216,   618,
       0,   218,     0,   219,   220,   221,   222,     0,   223,     0,
     224,   225,     0,   226,   227,   228,   229,   230,   231,     0,
     232,     0,     0,     0,   233,   234,     0,   235,     0,   236,
     237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,     0,   248,   249,   250,   251,   252,   253,     0,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,     0,
     264,     0,   265,   266,   267,   268,   269,   270,     0,   271,
     272,   273,   274,   275,     0,     0,   276,   277,   278,   279,
       0,   280,   281,   282,   621,   622,   283,   284,   285,   286,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,     0,   313,     0,   314,
     315,   316,   317,     0,   623,   319,   320,   321,   322,   323,
       0,   324,   325,     0,     0,   326,   327,   328,     0,     0,
     329,   330,   331,   332,   333,   625,   335,   336,   337,   338,
     339,   340,   341,   342,   343,     0,     0,   344,     0,   345,
     346,   626,   348,   349,   350,   351,   352,   353,   354,     0,
     355,   356,   357,   358,   359,     0,     0,   360,     0,   361,
     362,   363,   364,   365,   366,   367,   368,     0,   369,   370,
     371,     0,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,     0,   382,   383,   384,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,     0,   400,   401,   402,   403,   404,   628,   406,   407,
     408,   409,     0,   410,   411,     0,   412,   413,   414,     0,
       0,   415,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,   428,   629,   430,     0,   431,   432,
       0,   433,   434,   435,   436,   437,   438,   439,     0,   440,
     441,     0,     0,     0,   442,   443,   630,   445,   631,     0,
     447,   448,   632,   450,   451,   452,   453,   454,     0,     0,
     455,   456,   457,   458,   459,   460,   633,     0,   462,   463,
     464,   465,   466,   467,   468,     0,   469,   470,   471,     0,
     472,   473,   474,   475,     0,     0,     0,   476,     0,     0,
     477,   478,   479,   480,   481,   482,   483,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,   505,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  3359,     0,   108,
     109,   110,   111,     0,   112,   113,   114,   115,   772,   116,
     117,   118,     0,     0,     0,     0,     0,     0,     0,     0,
     119,   120,     0,   121,   122,   123,     0,   125,   126,   127,
     128,   129,     0,   131,   132,     0,   133,   134,   135,   136,
     137,   138,     0,     0,   139,   140,   141,   142,   143,     0,
     144,   145,   146,   147,   148,     0,     0,     0,   150,   151,
     152,   153,   154,   155,     0,   157,   158,   159,     0,   160,
     161,   162,   163,   164,     0,     0,     0,   166,   167,   168,
       0,     0,     0,     0,     0,     0,     0,   174,   175,   176,
     177,   178,   179,   180,   181,   182,   183,     0,   184,     0,
     185,   186,   187,   188,   189,   190,     0,   191,     0,   192,
     193,   194,   195,     0,     0,   196,   197,   198,   199,   200,
       0,     0,     0,   201,   202,   203,     0,   204,   205,   206,
       0,   207,   208,   209,   210,   211,   212,   213,   214,   215,
     216,   217,     0,   218,     0,   219,   220,   221,   222,     0,
     223,     0,   224,     0,    21,     0,   227,   228,   506,     0,
     231,     0,   232,     0,     0,     0,   233,   234,     0,   235,
       0,   236,   237,   238,   239,   240,   241,   242,     0,   244,
     245,   246,   247,     0,   248,   249,   250,   251,   252,   253,
       0,   254,     0,   256,   257,   258,   259,   260,   261,   262,
     263,     0,   264,     0,   265,     0,     0,   268,     0,   270,
       0,   271,   272,   273,   274,   275,     0,     0,   276,     0,
     278,     0,     0,   280,   281,   282,     0,     0,   283,   284,
     285,   286,   287,   507,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,     0,   309,   310,   311,   312,     0,   313,
       0,   314,   315,     0,   317,     0,   318,   319,   320,   321,
     322,   323,     0,   324,   325,     0,     0,   326,   327,   328,
       0,     0,   329,   330,     0,   332,     0,   334,   335,   336,
     337,   338,   339,   340,   341,   342,   343,     0,     0,   344,
       0,   345,   346,   347,     0,   349,   350,   351,   352,   353,
     354,     0,   355,   356,   357,   358,   359,     0,     0,   360,
       0,   361,   362,   363,   364,   365,   366,   367,   368,     0,
     369,   370,   371,     0,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,     0,   382,   383,     0,   385,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,    29,   400,   401,   402,   403,   404,     0,
     406,   407,   408,   409,     0,   410,     0,     0,   412,   413,
     414,     0,     0,   415,   416,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   508,   428,   429,   430,     0,
     431,   432,    34,   433,     0,   435,   436,   437,   438,   439,
       0,   773,   441,     0,     0,     0,   774,   443,   444,   445,
     446,     0,   447,   448,   449,   450,   451,   452,   453,   454,
       0,     0,   455,   456,   457,   458,   459,   460,     0,     0,
     462,   463,   464,   465,   466,   634,   468,     0,   469,     0,
     471,     0,   472,   473,   474,   475,     0,     0,     0,   476,
       0,    39,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   505,     0,    40,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   677,
       0,   108,   109,   110,   111,     0,   112,   113,   114,   115,
       0,   116,   117,   118,     0,     0,     0,     0,     0,     0,
       0,     0,   119,   120,     0,   121,   122,   123,     0,   125,
     126,   127,   128,   129,     0,   131,   132,     0,   133,   134,
     135,   136,   137,   138,     0,     0,   139,   140,   141,   142,
     143,     0,   144,   145,   146,   147,   148,     0,     0,     0,
     150,   151,   152,   153,   154,   155,     0,   157,   158,   159,
       0,   160,   161,   162,   163,   164,     0,     0,     0,   166,
     167,   168,     0,     0,     0,     0,     0,     0,     0,   174,
     175,   176,   177,   178,   179,   180,   181,   182,   183,     0,
     184,     0,   185,   186,   187,   188,   189,   190,     0,   191,
       0,   192,   193,   194,   195,     0,     0,   196,   197,   198,
     199,   200,     0,     0,     0,   201,   202,   203,     0,   204,
     205,   206,     0,   207,   208,   209,   210,   211,   212,   213,
     214,   215,   216,   217,     0,   218,     0,   219,   220,   221,
     222,     0,   223,     0,   224,     0,    21,     0,   227,   228,
     506,     0,   231,     0,   232,     0,     0,     0,   233,   234,
       0,   235,     0,   236,   237,   238,   239,   240,   241,   242,
       0,   244,   245,   246,   247,     0,   248,   249,   250,   251,
     252,   253,     0,   254,     0,   256,   257,   258,   259,   260,
     261,   262,   263,     0,   264,     0,   265,     0,     0,   268,
       0,   270,     0,   271,   272,   273,   274,   275,     0,     0,
     276,     0,   278,     0,     0,   280,   281,   282,     0,     0,
     283,   284,   285,   286,   287,   507,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,     0,   309,   310,   311,   312,
       0,   313,     0,   314,   315,     0,   317,     0,   318,   319,
     320,   321,   322,   323,     0,   324,   325,     0,     0,   326,
     327,   328,     0,     0,   329,   330,     0,   332,     0,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,     0,
       0,   344,     0,   345,   346,   347,     0,   349,   350,   351,
     352,   353,   354,     0,   355,   356,   357,   358,   359,     0,
       0,   360,     0,   361,   362,   363,   364,   365,   366,   367,
     368,     0,   369,   370,   371,     0,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,     0,   382,   383,     0,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,    29,   400,   401,   402,   403,
     404,     0,   406,   407,   408,   409,     0,   410,     0,     0,
     412,   413,   414,     0,     0,   415,   416,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   508,   428,   429,
     430,     0,   431,   432,    34,   433,     0,   435,   436,   437,
     438,   439,     0,   440,   441,     0,     0,     0,   442,   443,
     444,   445,   446,     0,   447,   448,   449,   450,   451,   452,
     453,   454,     0,     0,   455,   456,   457,   458,   459,   460,
       0,     0,   462,   463,   464,   465,   466,   634,   468,     0,
     469,     0,   471,     0,   472,   473,   474,   475,     0,     0,
       0,   476,     0,    39,   477,   478,   479,   480,   481,   482,
     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   696,     0,    40,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   677,     0,   108,   109,   110,   111,     0,   112,   113,
     114,   115,     0,   116,   117,   118,     0,     0,     0,     0,
       0,     0,     0,     0,   119,   120,     0,   121,   122,   123,
       0,   125,   126,   127,   697,   698,     0,   699,   700,     0,
     133,   134,   135,   136,   137,   138,     0,     0,   139,   140,
     701,   702,   143,     0,   144,   145,   146,   147,   703,     0,
       0,     0,     0,   151,   152,   153,   154,   155,     0,   157,
     158,   159,     0,   160,   161,   162,   163,   164,     0,     0,
       0,   166,   167,   168,     0,     0,     0,     0,     0,     0,
       0,   174,   175,   176,   177,   178,   179,   180,   704,   705,
     183,     0,   184,     0,   185,   186,   187,   188,   189,   190,
       0,   191,     0,   192,   193,   194,   195,     0,     0,   196,
     197,   198,   199,   200,     0,     0,     0,   201,   202,   203,
       0,   204,   205,   206,     0,   207,   208,   209,   210,   706,
     212,   213,   214,   215,   216,   707,     0,   218,     0,   219,
     220,   708,   222,     0,   223,     0,   224,     0,    21,     0,
     227,   228,   709,     0,   231,     0,   232,     0,     0,     0,
     710,   711,     0,   235,     0,   236,   237,   238,   239,   240,
     241,   242,     0,   244,   245,   246,   247,     0,   248,   249,
     250,   251,   252,   253,     0,   254,     0,   712,   257,   258,
     259,   260,   261,   713,   714,     0,   715,     0,   265,     0,
       0,   268,     0,   270,     0,   271,   272,   273,   274,   275,
       0,     0,   276,     0,   278,     0,     0,   280,   281,   282,
       0,     0,   283,   284,   285,   286,   287,   716,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   717,     0,   718,   310,
     311,   312,     0,   719,     0,   314,   315,     0,   317,     0,
     720,   319,   721,   321,   322,   323,     0,   324,   325,     0,
       0,   326,   327,   328,     0,     0,   329,   722,     0,   332,
       0,   723,   335,   336,   337,   338,   339,   340,   341,   342,
     343,     0,     0,   344,     0,   345,   346,   724,     0,   349,
     350,   725,   352,   353,   354,     0,   355,   356,   357,   358,
     359,     0,     0,   360,     0,   361,   362,   363,   726,   365,
     366,   367,   368,     0,   369,   370,   371,     0,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,     0,   382,
     383,     0,   385,   386,   387,   727,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,    29,   400,   401,
     402,   403,   404,     0,   406,   728,   408,   409,     0,   410,
       0,     0,   412,   729,   414,     0,     0,   415,   416,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   730,
     428,   731,   430,     0,   431,   432,    34,   433,     0,   435,
     436,   437,   438,   439,     0,   732,   733,     0,     0,     0,
     442,   443,   734,   445,   735,     0,   447,   448,   736,   450,
     451,   452,   453,   454,     0,     0,   455,   456,   457,   458,
     459,   460,     0,     0,   462,   463,   464,   465,   466,   737,
     738,     0,   469,     0,   471,     0,   472,   473,   474,   475,
       0,     0,     0,   476,     0,    39,   477,   478,   479,   480,
     481,   482,   739,   740,   741,   742,   743,   744,   745,   746,
     747,   748,   749,   494,   495,   496,   497,     0,   505,    40,
     532,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   677,     0,     0,   108,   109,   110,   111,
       0,   112,   113,   114,   115,     0,   116,   117,   118,     0,
       0,     0,     0,     0,     0,     0,     0,   119,   120,     0,
     121,   122,   123,     0,   125,   126,   127,   128,   129,     0,
     131,   132,     0,   133,   134,   135,   136,   137,   138,     0,
       0,   139,   140,   141,   142,   143,     0,   144,   145,   146,
     147,   148,     0,     0,     0,   150,   151,   152,   153,   154,
     155,     0,   157,   158,   159,     0,   160,   161,   162,   163,
     164,     0,     0,     0,   166,   167,   168,     0,     0,     0,
       0,     0,     0,     0,   174,   175,   176,   177,   178,   179,
     180,   181,   182,   183,     0,   184,     0,   185,   186,   187,
     188,   189,   190,     0,   191,     0,   192,   193,   194,   195,
       0,     0,   196,   197,   198,   199,   200,     0,     0,     0,
     201,   202,   203,     0,   204,   205,   206,     0,   207,   208,
     209,   210,   211,   212,   213,   214,   215,   216,   217,     0,
     218,     0,   219,   220,   221,   222,     0,   223,     0,   224,
       0,     0,     0,   227,   228,   506,     0,   231,     0,   232,
       0,     0,     0,   233,   234,     0,   235,     0,   236,   237,
     238,   239,   240,   241,   242,     0,   244,   245,   246,   247,
       0,   248,   249,   250,   251,   252,   253,     0,   254,     0,
     256,   257,   258,   259,   260,   261,   262,   263,     0,   264,
       0,   265,     0,     0,   268,     0,   270,     0,   271,   272,
     273,   274,   275,     0,     0,   276,     0,   278,     0,     0,
     280,   281,   282,     0,     0,   283,   284,   285,   286,   287,
     507,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
       0,   309,   310,   311,   312,     0,   313,     0,   314,   315,
       0,   317,     0,   318,   319,   320,   321,   322,   323,     0,
     324,   325,     0,     0,   326,   327,   328,     0,     0,   329,
     330,     0,   332,     0,   334,   335,   336,   337,   338,   339,
     340,   341,   342,   343,     0,     0,   344,     0,   345,   346,
     347,     0,   349,   350,   351,   352,   353,   354,     0,   355,
     356,   357,   358,   359,     0,     0,   360,     0,   361,   362,
     363,   364,   365,   366,   367,   368,     0,   369,   370,   371,
       0,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,     0,   382,   383,     0,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
       0,   400,   401,   402,   403,   404,     0,   406,   407,   408,
     409,     0,   410,     0,     0,   412,   413,   414,     0,     0,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   508,   428,   429,   430,     0,   431,   432,     0,
     433,     0,   435,   436,   437,   438,   439,     0,   440,   441,
       0,     0,     0,   442,   443,   444,   445,   446,     0,   447,
     448,   449,   450,   451,   452,   453,   454,     0,     0,   455,
     456,   457,   458,   459,   460,     0,     0,   462,   463,   464,
     465,   466,   467,   468,     0,   469,     0,   471,     0,   472,
     473,   474,   475,     0,     0,     0,   476,     0,     0,   477,
     478,   479,   480,   481,   482,   483,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     505,     0,   532,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1028,     0,   108,   109,
     110,   111,     0,   112,   113,   114,   115,     0,   116,   117,
     118,     0,     0,     0,     0,     0,     0,     0,     0,   119,
     120,     0,   121,   122,   123,     0,   125,   126,   127,   128,
     129,     0,   131,   132,     0,   133,   134,   135,   136,   137,
     138,     0,     0,   139,   140,   141,   142,   143,     0,   144,
     145,   146,   147,   148,     0,     0,     0,   150,   151,   152,
     153,   154,   155,     0,   157,   158,   159,     0,   160,   161,
     162,   163,   164,     0,     0,     0,   166,   167,   168,     0,
       0,     0,     0,     0,     0,     0,   174,   175,   176,   177,
     178,   179,   180,   181,   182,   183,     0,   184,     0,   185,
     186,   187,   188,   189,   190,     0,   191,     0,   192,   193,
     194,   195,     0,     0,   196,   197,   198,   199,   200,     0,
       0,     0,   201,   202,   203,     0,   204,   205,   206,     0,
     207,   208,   209,   210,   211,   212,   213,   214,   215,   216,
     217,     0,   218,     0,   219,   220,   221,   222,     0,   223,
       0,   224,     0,     0,     0,   227,   228,   506,     0,   231,
       0,   232,     0,     0,     0,   233,   234,     0,   235,     0,
     236,   237,   238,   239,   240,   241,   242,     0,   244,   245,
     246,   247,     0,   248,   249,   250,   251,   252,   253,     0,
     254,     0,   256,   257,   258,   259,   260,   261,   262,   263,
       0,   264,     0,   265,     0,     0,   268,     0,   270,     0,
     271,   272,   273,   274,   275,     0,     0,   276,     0,   278,
       0,     0,   280,   281,   282,     0,     0,   283,   284,   285,
     286,   287,   507,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,     0,   309,   310,   311,   312,     0,   313,     0,
     314,   315,     0,   317,     0,   318,   319,   320,   321,   322,
     323,     0,   324,   325,     0,     0,   326,   327,   328,     0,
       0,   329,   330,     0,   332,     0,   334,   335,   336,   337,
     338,   339,   340,   341,   342,   343,     0,     0,   344,     0,
     345,   346,   347,     0,   349,   350,   351,   352,   353,   354,
       0,   355,   356,   357,   358,   359,     0,     0,   360,     0,
     361,   362,   363,   364,   365,   366,   367,   368,     0,   369,
     370,   371,     0,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,     0,   382,   383,     0,   385,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,     0,   400,   401,   402,   403,   404,     0,   406,
     407,   408,   409,     0,   410,     0,     0,   412,   413,   414,
       0,     0,   415,   416,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,   508,   428,   429,   430,     0,   431,
     432,     0,   433,     0,   435,   436,   437,   438,   439,     0,
     440,   441,     0,     0,     0,   442,   443,   444,   445,   446,
       0,   447,   448,   449,   450,   451,   452,   453,   454,     0,
       0,   455,   456,   457,   458,   459,   460,     0,     0,   462,
     463,   464,   465,   466,   467,   468,     0,   469,     0,   471,
       0,   472,   473,   474,   475,     0,     0,     0,   476,     0,
       0,   477,   478,   479,   480,   481,   482,   483,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,   505,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1582,     0,
     108,   109,   110,   111,     0,   112,   113,   114,   115,     0,
     116,   117,   118,     0,     0,     0,     0,     0,     0,     0,
       0,   119,   120,     0,   121,   122,   123,     0,   125,   126,
     127,   128,   129,     0,   131,   132,     0,   133,   134,   135,
     136,   137,   138,     0,     0,   139,   140,   141,   142,   143,
       0,   144,   145,   146,   147,   148,     0,     0,     0,   150,
     151,   152,   153,   154,   155,     0,   157,   158,   159,     0,
     160,   161,   162,   163,   164,     0,     0,     0,   166,   167,
     168,     0,     0,     0,     0,     0,     0,     0,   174,   175,
     176,   177,   178,   179,   180,   181,   182,   183,     0,   184,
       0,   185,   186,   187,   188,   189,   190,     0,   191,     0,
     192,   193,   194,   195,     0,     0,   196,   197,   198,   199,
     200,     0,     0,     0,   201,   202,   203,     0,   204,   205,
     206,     0,   207,   208,   209,   210,   211,   212,   213,   214,
     215,   216,   217,     0,   218,     0,   219,   220,   221,   222,
       0,   223,     0,   224,     0,     0,     0,   227,   228,   506,
       0,   231,     0,   232,     0,     0,     0,   233,   234,     0,
     235,     0,   236,   237,   238,   239,   240,   241,   242,     0,
     244,   245,   246,   247,     0,   248,   249,   250,   251,   252,
     253,     0,   254,     0,   256,   257,   258,   259,   260,   261,
     262,   263,     0,   264,     0,   265,     0,     0,   268,     0,
     270,     0,   271,   272,   273,   274,   275,     0,     0,   276,
       0,   278,     0,     0,   280,   281,   282,     0,     0,   283,
     284,   285,   286,   287,   507,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,     0,   309,   310,   311,   312,     0,
     313,     0,   314,   315,     0,   317,     0,   318,   319,   320,
     321,   322,   323,     0,   324,   325,     0,     0,   326,   327,
     328,     0,     0,   329,   330,     0,   332,     0,   334,   335,
     336,   337,   338,   339,   340,   341,   342,   343,     0,     0,
     344,     0,   345,   346,   347,     0,   349,   350,   351,   352,
     353,   354,     0,   355,   356,   357,   358,   359,     0,     0,
     360,     0,   361,   362,   363,   364,   365,   366,   367,   368,
       0,   369,   370,   371,     0,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,     0,   382,   383,     0,   385,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,     0,   400,   401,   402,   403,   404,
       0,   406,   407,   408,   409,     0,   410,     0,     0,   412,
     413,   414,     0,     0,   415,   416,   417,   418,   419,   420,
     421,   422,   423,   424,   425,   426,   508,   428,   429,   430,
       0,   431,   432,     0,   433,     0,   435,   436,   437,   438,
     439,     0,   440,   441,     0,     0,     0,   442,   443,   444,
     445,   446,     0,   447,   448,   449,   450,   451,   452,   453,
     454,     0,     0,   455,   456,   457,   458,   459,   460,     0,
       0,   462,   463,   464,   465,   466,   467,   468,     0,   469,
       0,   471,     0,   472,   473,   474,   475,     0,     0,     0,
     476,     0,     0,   477,   478,   479,   480,   481,   482,   483,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   505,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    2053,     0,   108,   109,   110,   111,     0,   112,   113,   114,
     115,     0,   116,   117,   118,     0,     0,     0,     0,     0,
       0,     0,     0,   119,   120,     0,   121,   122,   123,     0,
     125,   126,   127,   128,   129,     0,   131,   132,     0,   133,
     134,   135,   136,   137,   138,     0,     0,   139,   140,   141,
     142,   143,     0,   144,   145,   146,   147,   148,     0,     0,
       0,   150,   151,   152,   153,   154,   155,     0,   157,   158,
     159,     0,   160,   161,   162,   163,   164,     0,     0,     0,
     166,   167,   168,     0,     0,     0,     0,     0,     0,     0,
     174,   175,   176,   177,   178,   179,   180,   181,   182,   183,
       0,   184,     0,   185,   186,   187,   188,   189,   190,     0,
     191,     0,   192,   193,   194,   195,     0,     0,   196,   197,
     198,   199,   200,     0,     0,     0,   201,   202,   203,     0,
     204,   205,   206,     0,   207,   208,   209,   210,   211,   212,
     213,   214,   215,   216,   217,     0,   218,     0,   219,   220,
     221,   222,     0,   223,     0,   224,     0,     0,     0,   227,
     228,   506,     0,   231,     0,   232,     0,     0,     0,   233,
     234,     0,   235,     0,   236,   237,   238,   239,   240,   241,
     242,     0,   244,   245,   246,   247,     0,   248,   249,   250,
     251,   252,   253,     0,   254,     0,   256,   257,   258,   259,
     260,   261,   262,   263,     0,   264,     0,   265,     0,     0,
     268,     0,   270,     0,   271,   272,   273,   274,   275,     0,
       0,   276,     0,   278,     0,     0,   280,   281,   282,     0,
       0,   283,   284,   285,   286,   287,   507,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,     0,   309,   310,   311,
     312,     0,   313,     0,   314,   315,     0,   317,     0,   318,
     319,   320,   321,   322,   323,     0,   324,   325,     0,     0,
     326,   327,   328,     0,     0,   329,   330,     0,   332,     0,
     334,   335,   336,   337,   338,   339,   340,   341,   342,   343,
       0,     0,   344,     0,   345,   346,   347,     0,   349,   350,
     351,   352,   353,   354,     0,   355,   356,   357,   358,   359,
       0,     0,   360,     0,   361,   362,   363,   364,   365,   366,
     367,   368,     0,   369,   370,   371,     0,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,     0,   382,   383,
       0,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,     0,   400,   401,   402,
     403,   404,     0,   406,   407,   408,   409,     0,   410,     0,
       0,   412,   413,   414,     0,     0,   415,   416,   417,   418,
     419,   420,   421,   422,   423,   424,   425,   426,   508,   428,
     429,   430,     0,   431,   432,     0,   433,     0,   435,   436,
     437,   438,   439,     0,   440,   441,     0,     0,     0,   442,
     443,   444,   445,   446,     0,   447,   448,   449,   450,   451,
     452,   453,   454,     0,     0,   455,   456,   457,   458,   459,
     460,     0,     0,   462,   463,   464,   465,   466,   467,   468,
       0,   469,     0,   471,     0,   472,   473,   474,   475,     0,
       0,     0,   476,     0,     0,   477,   478,   479,   480,   481,
     482,   483,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,   505,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  2157,     0,   108,   109,   110,   111,     0,   112,
     113,   114,   115,     0,   116,   117,   118,     0,     0,     0,
       0,     0,     0,     0,     0,   119,   120,     0,   121,   122,
     123,     0,   125,   126,   127,   128,   129,     0,   131,   132,
       0,   133,   134,   135,   136,   137,   138,     0,     0,   139,
     140,   141,   142,   143,     0,   144,   145,   146,   147,   148,
       0,     0,     0,   150,   151,   152,   153,   154,   155,     0,
     157,   158,   159,     0,   160,   161,   162,   163,   164,     0,
       0,     0,   166,   167,   168,     0,     0,     0,     0,     0,
       0,     0,   174,   175,   176,   177,   178,   179,   180,   181,
     182,   183,     0,   184,     0,   185,   186,   187,   188,   189,
     190,     0,   191,     0,   192,   193,   194,   195,     0,     0,
     196,   197,   198,   199,   200,     0,     0,     0,   201,   202,
     203,     0,   204,   205,   206,     0,   207,   208,   209,   210,
     211,   212,   213,   214,   215,   216,   217,     0,   218,     0,
     219,   220,   221,   222,     0,   223,     0,   224,     0,     0,
       0,   227,   228,   506,     0,   231,     0,   232,     0,     0,
       0,   233,   234,     0,   235,     0,   236,   237,   238,   239,
     240,   241,   242,     0,   244,   245,   246,   247,     0,   248,
     249,   250,   251,   252,   253,     0,   254,     0,   256,   257,
     258,   259,   260,   261,   262,   263,     0,   264,     0,   265,
       0,     0,   268,     0,   270,     0,   271,   272,   273,   274,
     275,     0,     0,   276,     0,   278,     0,     0,   280,   281,
     282,     0,     0,   283,   284,   285,   286,   287,   507,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,     0,   309,
     310,   311,   312,     0,   313,     0,   314,   315,     0,   317,
       0,   318,   319,   320,   321,   322,   323,     0,   324,   325,
       0,     0,   326,   327,   328,     0,     0,   329,   330,     0,
     332,     0,   334,   335,   336,   337,   338,   339,   340,   341,
     342,   343,     0,     0,   344,     0,   345,   346,   347,     0,
     349,   350,   351,   352,   353,   354,     0,   355,   356,   357,
     358,   359,     0,     0,   360,     0,   361,   362,   363,   364,
     365,   366,   367,   368,     0,   369,   370,   371,     0,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,     0,
     382,   383,     0,   385,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,     0,   400,
     401,   402,   403,   404,     0,   406,   407,   408,   409,     0,
     410,     0,     0,   412,   413,   414,     0,     0,   415,   416,
     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
     508,   428,   429,   430,     0,   431,   432,     0,   433,     0,
     435,   436,   437,   438,   439,     0,   440,   441,     0,     0,
       0,   442,   443,   444,   445,   446,     0,   447,   448,   449,
     450,   451,   452,   453,   454,     0,     0,   455,   456,   457,
     458,   459,   460,     0,     0,   462,   463,   464,   465,   466,
     467,   468,     0,   469,     0,   471,     0,   472,   473,   474,
     475,     0,     0,     0,   476,     0,     0,   477,   478,   479,
     480,   481,   482,   483,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,     0,     0,
    2877,  1494,   516,     0,     0,  2034,  1080,     0,     0,     0,
       0,     0,  2035,     0,  3038,  2036,  2037,  2038,   108,   109,
     110,   111,     0,   112,   113,   114,   115,  1310,   116,   117,
     118,  1311,  1312,  1313,  1314,     0,  1315,  1316,  1317,   119,
     120,  1318,   121,   122,   123,  2878,   125,   126,   127,     0,
     828,  2879,   830,   831,  1319,   133,   134,   135,   136,   137,
     138,  1320,  1321,   139,   140,   832,   833,   143,  1322,   144,
     145,   146,   147,     0,  1323,  2880,  1324,  2881,   151,   152,
     153,   154,   155,  2882,   157,   158,   159,  1325,   160,   161,
     162,   163,   164,     0,  1326,  2883,   166,   167,   168,  2884,
    2885,  2886,  2887,  1327,  1328,  2888,   174,   175,   176,   177,
     178,   179,   180,   843,   844,   183,  1329,   184,  1330,   185,
     186,   187,   188,   189,   190,  1331,   191,     0,   192,   193,
     194,   195,  1332,  1333,   196,   197,   845,   199,   200,     0,
       0,  1334,   201,   202,   203,  1335,   204,   205,   206,  1336,
     207,   208,   209,   210,     0,   212,   213,   214,   215,   216,
       0,  1337,   218,  1338,   219,   220,   846,   222,  1339,   223,
    1340,   224,  2889,  1341,  2890,   227,   228,  2891,  2892,   231,
    1342,   232,     0,  1343,  1344,     0,     0,     0,   235,  1345,
     236,   237,   238,   239,   240,   241,   242,  2893,   244,   245,
     246,   247,  1346,   248,   249,   250,   251,   252,   253,  1347,
     254,  2894,     0,   257,   258,   259,   260,   261,   853,   854,
    1348,   855,  1349,   265,  2895,  2896,   268,  2897,   270,     0,
     271,   272,   273,   274,   275,  1350,  1351,   276,  2898,   278,
    2899,  1352,   280,   281,   282,  1353,  1354,   283,   284,   285,
     286,   287,  2900,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   862,  2901,   864,   310,   311,   312,     0,  2902,  1355,
     314,   315,  2903,   317,  1356,     0,   319,   866,   321,   322,
     323,  1357,   324,   325,  1358,  1359,  2904,   327,   328,  1360,
    1361,   329,     0,  2905,   332,  2906,     0,   335,   336,   337,
     338,   339,   340,   341,   342,   343,     0,     0,   344,  1362,
     345,   346,     0,  2907,   349,   350,     0,   352,   353,   354,
    1363,   355,   356,   357,   358,   359,     0,     0,   360,  1364,
     361,   362,   363,   870,   365,   366,   367,   368,  1365,   369,
     370,   371,     0,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,  1366,   382,   383,  2908,   385,   386,   387,
     872,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,  1367,   400,   401,   402,   403,   404,  2909,   406,
    2910,   408,   409,     0,   410,  2911,     0,   412,   876,   414,
    1368,     0,   415,   416,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,  2912,   428,     0,   430,  1369,   431,
     432,  1370,   433,  2913,   435,   436,   437,   438,   439,  1371,
     879,   880,  1372,     0,  1373,   442,   443,     0,   445,     0,
    1374,   447,   448,  2914,   450,   451,   452,   453,   454,  2915,
    1376,   455,   456,   457,   458,   459,   460,  2916,  1377,   462,
     463,   464,   465,   466,     0,   884,  1379,   469,  2917,   471,
       0,   472,   473,   474,   475,     0,  1380,  1381,   476,  1382,
    1383,   477,   478,   479,   480,   481,   482,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   494,   495,
     496,   497,     0,   505,     0,  2039,  2040,  2041,  2034,  2918,
    2919,  2044,  2045,  2046,  2047,  2035,     0,     0,  2036,  2037,
    2038,   108,   109,   110,   111,     0,   112,   113,   114,   115,
       0,   116,   117,   118,     0,     0,     0,     0,     0,     0,
       0,     0,   119,   120,     0,   121,   122,   123,     0,   125,
     126,   127,   128,   129,     0,   131,   132,     0,   133,   134,
     135,   136,   137,   138,     0,     0,   139,   140,   141,   142,
     143,     0,   144,   145,   146,   147,   148,     0,     0,     0,
     150,   151,   152,   153,   154,   155,     0,   157,   158,   159,
       0,   160,   161,   162,   163,   164,     0,     0,     0,   166,
     167,   168,     0,     0,     0,     0,     0,     0,     0,   174,
     175,   176,   177,   178,   179,   180,   181,   182,   183,     0,
     184,     0,   185,   186,   187,   188,   189,   190,     0,   191,
       0,   192,   193,   194,   195,     0,     0,   196,   197,   198,
     199,   200,     0,     0,     0,   201,   202,   203,     0,   204,
     205,   206,     0,   207,   208,   209,   210,   211,   212,   213,
     214,   215,   216,   217,     0,   218,     0,   219,   220,   221,
     222,     0,   223,     0,   224,     0,     0,     0,   227,   228,
     506,     0,   231,     0,   232,     0,     0,     0,   233,   234,
       0,   235,     0,   236,   237,   238,   239,   240,   241,   242,
       0,   244,   245,   246,   247,     0,   248,   249,   250,   251,
     252,   253,     0,   254,     0,   256,   257,   258,   259,   260,
     261,   262,   263,     0,   264,     0,   265,     0,     0,   268,
       0,   270,     0,   271,   272,   273,   274,   275,     0,     0,
     276,     0,   278,     0,     0,   280,   281,   282,     0,     0,
     283,   284,   285,   286,   287,   507,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,     0,   309,   310,   311,   312,
       0,   313,     0,   314,   315,     0,   317,     0,   318,   319,
     320,   321,   322,   323,     0,   324,   325,     0,     0,   326,
     327,   328,     0,     0,   329,   330,     0,   332,     0,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,     0,
       0,   344,     0,   345,   346,   347,     0,   349,   350,   351,
     352,   353,   354,     0,   355,   356,   357,   358,   359,     0,
       0,   360,     0,   361,   362,   363,   364,   365,   366,   367,
     368,     0,   369,   370,   371,     0,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,     0,   382,   383,     0,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,     0,   400,   401,   402,   403,
     404,     0,   406,   407,   408,   409,     0,   410,     0,     0,
     412,   413,   414,     0,     0,   415,   416,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   508,   428,   429,
     430,     0,   431,   432,     0,   433,     0,   435,   436,   437,
     438,   439,     0,   440,   441,     0,     0,     0,   442,   443,
     444,   445,   446,     0,   447,   448,   449,   450,   451,   452,
     453,   454,     0,     0,   455,   456,   457,   458,   459,   460,
       0,     0,   462,   463,   464,   465,   466,   467,   468,     0,
     469,     0,   471,     0,   472,   473,   474,   475,     0,     0,
       0,   476,     0,     0,   477,   478,   479,   480,   481,   482,
     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,     0,     0,     0,  2039,  2040,
    2041,     0,  2042,  2043,  2044,  2045,  2046,  2047,  1633,     0,
       0,  1634,     0,     0,     0,  1635,  1636,  1637,  1638,  1639,
    1640,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1641,     0,     0,  1633,
       0,     0,  1634,     0,     0,  1643,  1635,  1636,  1637,  1638,
    1639,  1640,  1644,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1641,     0,     0,
       0,     0,     0,     0,     0,     0,  1643,  1645,     0,     0,
       0,     0,     0,  1644,  1633,     0,     0,  1634,     0,     0,
       0,  1635,  1636,  1637,  1638,  1639,  1640,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1645,     0,
       0,     0,  1641,     0,     0,     0,     0,     0,     0,     0,
       0,  1643,     0,     0,     0,     0,     0,     0,  1644,     0,
       0,     0,     0,     0,  1633,     0,     0,  1634,     0,     0,
       0,  1635,  1636,  1637,  1638,  1639,  1640,     0,     0,     0,
       0,     0,     0,  1645,     0,     0,     0,     0,     0,     0,
       0,     0,  1641,     0,     0,  1633,     0,     0,  1634,     0,
       0,  1643,  1635,  1636,  1637,  1638,  1639,  1640,  1644,     0,
       0,  1646,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1641,     0,     0,     0,     0,     0,     0,
    1647,     0,  1643,  1645,     0,  1648,     0,     0,     0,  1644,
       0,     0,  1646,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1649,  1650,     0,
       0,  1647,     0,     0,  1645,     0,  1648,     0,     0,     0,
       0,     0,     0,  1651,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1646,  1649,  1650,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1651,     0,  1647,     0,     0,     0,
       0,  1648,  1652,     0,     0,  1653,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1654,
       0,     0,  1655,  1649,  1650,     0,     0,  1646,     0,     0,
       0,     0,     0,  1652,     0,     0,  1653,     0,     0,  1651,
       0,     0,     0,     0,     0,     0,  1647,     0,     0,     0,
    1654,  1648,     0,  1655,     0,     0,     0,     0,  1646,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1649,  1650,     0,     0,  1647,  1652,     0,
       0,  1653,  1648,     0,     0,     0,     0,     0,     0,  1651,
       0,     0,     0,     0,     0,  1654,     0,     0,  1655,     0,
       0,     0,     0,     0,  1649,  1650,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1656,     0,
    1651,     0,     0,     0,     0,     0,     0,     0,  1652,  1633,
       0,  1653,  1634,     0,     0,     0,  1635,  1636,  1637,  1638,
    1639,  1640,     0,     0,     0,  1654,     0,     0,  1655,  1656,
       0,     0,     0,     0,     0,     0,     0,  1641,     0,  1652,
       0,     0,  1653,     0,     0,     0,  1643,     0,     0,     0,
       0,     0,     0,  1644,     0,     0,  1654,  1633,     0,  1655,
    1634,     0,     0,     0,  1635,  1636,  1637,  1638,  1639,  1640,
       0,     0,     0,     0,  1656,     0,     0,     0,  1645,     0,
       0,     0,     0,     0,     0,  1641,     0,     0,     0,     0,
       0,     0,     0,     0,  1643,     0,     0,     0,     0,     0,
       0,  1644,     0,     0,     0,  1657,     0,     0,  1658,  1659,
    1660,     0,  1661,  1662,  1663,  1664,  1665,  1666,     0,     0,
       0,     0,  3037,     0,  1656,     0,  1645,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1657,     0,     0,  1658,
    1659,  1660,     0,  1661,  1662,  1663,  1664,  1665,  1666,     0,
       0,     0,     0,  3224,     0,  1656,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1657,  1646,     0,  1658,  1659,  1660,     0,  1661,  1662,
    1663,  1664,  1665,  1666,     0,     0,     0,     0,  3301,     0,
       0,  1647,     0,     0,     0,     0,  1648,     0,     0,  1633,
       0,     0,  1634,     0,     0,     0,  1635,  1636,  1637,  1638,
    1639,  1640,     0,     0,     0,   540,     0,     0,  1649,  1650,
    1646,  1657,     0,     0,  1658,  1659,  1660,  1641,  1661,  1662,
    1663,  1664,  1665,  1666,  1651,     0,  1643,     0,  3428,  1647,
       0,     0,     0,  1644,  1648,     0,     0,     0,     0,     0,
       0,     0,  1657,     0,     0,  1658,  1659,  1660,     0,  1661,
    1662,  1663,  1664,  1665,  1666,     0,  1649,  1650,  1645,  3513,
     541,     0,     0,  1652,     0,     0,  1653,     0,     0,     0,
       0,     0,  1651,     0,     0,     0,   542,     0,     0,     0,
    1654,  1633,     0,  1655,  1634,     0,     0,     0,  1635,  1636,
    1637,  1638,  1639,  1640,   543,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1641,
       0,  1652,     0,     0,  1653,     0,     0,     0,  1643,     0,
       0,     0,     0,     0,     0,  1644,     0,     0,  1654,     0,
       0,  1655,     0,   544,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   545,     0,     0,     0,     0,     0,     0,
    1645,     0,     0,     0,     0,   546,     0,     0,     0,     0,
     547,     0,  1646,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1656,
       0,  1647,     0,     0,     0,     0,  1648,     0,     0,     0,
     548,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1649,  1650,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1651,     0,     0,  1656,     0,     0,
       0,     0,     0,     0,     0,     0,   549,     0,     0,     0,
     550,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1646,     0,     0,     0,     0,     0,
       0,     0,     0,  1652,     0,     0,  1653,     0,     0,     0,
       0,     0,     0,  1647,     0,     0,     0,     0,  1648,     0,
    1654,     0,     0,  1655,     0,     0,  1657,     0,     0,  1658,
    1659,  1660,     0,  1661,  1662,  1663,  1664,  1665,  1666,     0,
    1649,  1650,     0,  3542,     0,     0,   551,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1651,     0,     0,     0,
       0,     0,     0,   553,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1657,     0,     0,  1658,  1659,  1660,
       0,  1661,  1662,  1663,  1664,  1665,  1666,     0,     0,  1826,
       0,     0,     0,     0,     0,  1652,     0,   554,  1653,     0,
     555,     0,     0,     0,     0,     0,     0,     0,   556,     0,
       0,   557,  1654,     0,     0,  1655,     0,     0,     0,  1656,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   558,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   559,     0,     0,     0,
       0,     0,     0,   560,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   561,     0,     0,     0,     0,     0,   562,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   563,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1656,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1657,     0,     0,  1658,
    1659,  1660,     0,  1661,  1662,  1663,  1664,  1665,  1666,     0,
       0,  3218,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1309,     0,  1657,     0,
       0,  1658,  1659,  1660,     0,  1661,  1662,  1663,  1664,  1665,
    1666,     0,     0,  3475,   108,   109,   110,   111,     0,   112,
     113,   114,   115,  1310,   116,   117,   118,  1311,  1312,  1313,
    1314,     0,  1315,  1316,  1317,   119,   120,  1318,   121,   122,
     123,   918,   125,   126,   127,   919,   920,   921,   922,   923,
    1319,   133,   134,   135,   136,   137,   138,  1320,  1321,   139,
     140,   924,   925,   143,  1322,   144,   145,   146,   147,   926,
    1323,   927,  1324,   928,   151,   152,   153,   154,   155,   929,
     157,   158,   159,  1325,   160,   161,   162,   163,   164,     0,
    1326,   930,   166,   167,   168,   931,   932,   933,   934,  1327,
    1328,   935,   174,   175,   176,   177,   178,   179,   180,   936,
     937,   183,  1329,   184,  1330,   185,   186,   187,   188,   189,
     190,  1331,   191,     0,   192,   193,   194,   195,  1332,  1333,
     196,   197,   198,   199,   200,     0,     0,  1334,   201,   202,
     203,  1335,   204,   205,   206,  1336,   207,   208,   209,   210,
     938,   212,   213,   214,   215,   216,   939,  1337,   218,  1338,
     219,   220,   940,   222,  1339,   223,  1340,   224,   941,  1341,
     942,   227,   228,   943,   944,   231,  1342,   232,     0,  1343,
    1344,   945,   946,     0,   235,  1345,   236,   237,   238,   239,
     240,   241,   242,   947,   244,   245,   246,   247,  1346,   248,
     249,   250,   251,   252,   253,  1347,   254,   948,   949,   257,
     258,   259,   260,   261,   950,   951,  1348,   952,  1349,   265,
     953,   954,   268,   955,   270,     0,   271,   272,   273,   274,
     275,  1350,  1351,   276,   956,   278,   957,  1352,   280,   281,
     282,  1353,  1354,   283,   284,   285,   286,   287,   958,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   959,   960,   961,
     310,   311,   312,     0,   962,  1355,   314,   315,   963,   317,
    1356,   964,   319,   965,   321,   322,   323,  1357,   324,   325,
    1358,  1359,   326,   327,   328,  1360,  1361,   329,   966,   967,
     332,   968,   969,   335,   336,   337,   338,   339,   340,   341,
     342,   343,     0,     0,   344,  1362,   345,   346,   970,   971,
     349,   350,   972,   352,   353,   354,  1363,   355,   356,   357,
     358,   359,     0,     0,   360,  1364,   361,   362,   363,   973,
     365,   366,   367,   368,  1365,   369,   370,   371,     0,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,  1366,
     382,   383,   974,   385,   386,   387,   975,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,  1367,   400,
     401,   402,   403,   404,   976,   406,   977,   408,   409,     0,
     410,   978,     0,   412,   979,   414,  1368,     0,   415,   416,
     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
     980,   428,   981,   430,  1369,   431,   432,  1370,   433,   982,
     435,   436,   437,   438,   439,  1371,   983,   984,  1372,     0,
    1373,   442,   443,   985,   445,   986,  1374,   447,   448,   987,
     450,   451,   452,   453,   454,  1375,  1376,   455,   456,   457,
     458,   459,   460,   988,  1377,   462,   463,   464,   465,   466,
    1378,   990,  1379,   469,   991,   471,     0,   472,   473,   474,
     475,     0,  1380,  1381,   476,  1382,  1383,   477,   478,   479,
     480,   481,   482,   992,   993,   994,   995,   996,   997,   998,
     999,  1000,  1001,  1002,   494,   495,   496,   497,   505,     0,
       0,     0,     0,     0,     0,     0,     0,  2132,     0,     0,
       0,     0,     0,     0,     0,     0,   108,   109,   110,   111,
       0,   112,   113,   114,   115,     0,   116,   117,   118,     0,
       0,     0,     0,     0,     0,     0,     0,   119,   120,     0,
     121,   122,   123,     0,   125,   126,   127,   128,   129,     0,
     131,   132,     0,   133,   134,   135,   136,   137,   138,     0,
       0,   139,   140,   141,   142,   143,     0,   144,   145,   146,
     147,   148,     0,     0,     0,   150,   151,   152,   153,   154,
     155,     0,   157,   158,   159,     0,   160,   161,   162,   163,
     164,     0,     0,     0,   166,   167,   168,     0,     0,     0,
       0,     0,     0,     0,   174,   175,   176,   177,   178,   179,
     180,   181,   182,   183,     0,   184,     0,   185,   186,   187,
     188,   189,   190,     0,   191,     0,   192,   193,   194,   195,
       0,     0,   196,   197,   198,   199,   200,     0,     0,     0,
     201,   202,   203,     0,   204,   205,   206,     0,   207,   208,
     209,   210,   211,   212,   213,   214,   215,   216,   217,     0,
     218,     0,   219,   220,   221,   222,     0,   223,     0,   224,
       0,     0,     0,   227,   228,   506,     0,   231,     0,   232,
       0,     0,     0,   233,   234,     0,   235,     0,   236,   237,
     238,   239,   240,   241,   242,     0,   244,   245,   246,   247,
       0,   248,   249,   250,   251,   252,   253,     0,   254,     0,
     256,   257,   258,   259,   260,   261,   262,   263,     0,   264,
       0,   265,     0,     0,   268,     0,   270,     0,   271,   272,
     273,   274,   275,     0,     0,   276,     0,   278,     0,     0,
     280,   281,   282,     0,     0,   283,   284,   285,   286,   287,
     507,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
       0,   309,   310,   311,   312,     0,   313,     0,   314,   315,
       0,   317,     0,   318,   319,   320,   321,   322,   323,     0,
     324,   325,     0,     0,   326,   327,   328,     0,     0,   329,
     330,     0,   332,     0,   334,   335,   336,   337,   338,   339,
     340,   341,   342,   343,     0,     0,   344,     0,   345,   346,
     347,     0,   349,   350,   351,   352,   353,   354,     0,   355,
     356,   357,   358,   359,     0,     0,   360,     0,   361,   362,
     363,   364,   365,   366,   367,   368,     0,   369,   370,   371,
       0,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,     0,   382,   383,     0,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
       0,   400,   401,   402,   403,   404,     0,   406,   407,   408,
     409,     0,   410,     0,     0,   412,   413,   414,     0,     0,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   508,   428,   429,   430,     0,   431,   432,     0,
     433,     0,   435,   436,   437,   438,   439,     0,   440,   441,
       0,     0,     0,   442,   443,   444,   445,   446,     0,   447,
     448,   449,   450,   451,   452,   453,   454,     0,     0,   455,
     456,   457,   458,   459,   460,     0,     0,   462,   463,   464,
     465,   466,   467,   468,     0,   469,     0,   471,     0,   472,
     473,   474,   475,     0,     0,     0,   476,     0,     0,   477,
     478,   479,   480,   481,   482,   483,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     505,     0,     0,     0,     0,     0,     0,     0,     0,  2681,
       0,     0,     0,     0,     0,     0,     0,     0,   108,   109,
     110,   111,     0,   112,   113,   114,   115,     0,   116,   117,
     118,     0,     0,     0,     0,     0,     0,     0,     0,   119,
     120,     0,   121,   122,   123,     0,   125,   126,   127,   128,
     129,     0,   131,   132,     0,   133,   134,   135,   136,   137,
     138,     0,     0,   139,   140,   141,   142,   143,     0,   144,
     145,   146,   147,   148,     0,     0,     0,   150,   151,   152,
     153,   154,   155,     0,   157,   158,   159,     0,   160,   161,
     162,   163,   164,     0,     0,     0,   166,   167,   168,     0,
       0,     0,     0,     0,     0,     0,   174,   175,   176,   177,
     178,   179,   180,   181,   182,   183,     0,   184,     0,   185,
     186,   187,   188,   189,   190,     0,   191,     0,   192,   193,
     194,   195,     0,     0,   196,   197,   198,   199,   200,     0,
       0,     0,   201,   202,   203,     0,   204,   205,   206,     0,
     207,   208,   209,   210,   211,   212,   213,   214,   215,   216,
     217,     0,   218,     0,   219,   220,   221,   222,     0,   223,
       0,   224,     0,     0,     0,   227,   228,   506,     0,   231,
       0,   232,     0,     0,     0,   233,   234,     0,   235,     0,
     236,   237,   238,   239,   240,   241,   242,     0,   244,   245,
     246,   247,     0,   248,   249,   250,   251,   252,   253,     0,
     254,     0,   256,   257,   258,   259,   260,   261,   262,   263,
       0,   264,     0,   265,     0,     0,   268,     0,   270,     0,
     271,   272,   273,   274,   275,     0,     0,   276,     0,   278,
       0,     0,   280,   281,   282,     0,     0,   283,   284,   285,
     286,   287,   507,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,     0,   309,   310,   311,   312,     0,   313,     0,
     314,   315,     0,   317,     0,   318,   319,   320,   321,   322,
     323,     0,   324,   325,     0,     0,   326,   327,   328,     0,
       0,   329,   330,     0,   332,     0,   334,   335,   336,   337,
     338,   339,   340,   341,   342,   343,     0,     0,   344,     0,
     345,   346,   347,     0,   349,   350,   351,   352,   353,   354,
       0,   355,   356,   357,   358,   359,     0,     0,   360,     0,
     361,   362,   363,   364,   365,   366,   367,   368,     0,   369,
     370,   371,     0,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,     0,   382,   383,     0,   385,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,     0,   400,   401,   402,   403,   404,     0,   406,
     407,   408,   409,     0,   410,     0,     0,   412,   413,   414,
       0,     0,   415,   416,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,   508,   428,   429,   430,     0,   431,
     432,     0,   433,     0,   435,   436,   437,   438,   439,     0,
     440,   441,     0,     0,     0,   442,   443,   444,   445,   446,
       0,   447,   448,   449,   450,   451,   452,   453,   454,     0,
       0,   455,   456,   457,   458,   459,   460,     0,     0,   462,
     463,   464,   465,   466,   467,   468,     0,   469,     0,   471,
       0,   472,   473,   474,   475,     0,     0,     0,   476,     0,
       0,   477,   478,   479,   480,   481,   482,   483,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,   917,  1494,   516,     0,     0,     0,  1080,     0,
       0,  2684,     0,     0,     0,     0,     0,     0,     0,     0,
     108,   109,   110,   111,     0,   112,   113,   114,   115,     0,
     116,   117,   118,     0,     0,     0,     0,     0,     0,     0,
       0,   119,   120,     0,   121,   122,   123,   918,   125,   126,
     127,   919,   920,   921,   922,   923,     0,   133,   134,   135,
     136,   137,   138,     0,     0,   139,   140,   924,   925,   143,
       0,   144,   145,   146,   147,   926,     0,   927,     0,   928,
     151,   152,   153,   154,   155,   929,   157,   158,   159,     0,
     160,   161,   162,   163,   164,     0,     0,   930,   166,   167,
     168,   931,   932,   933,   934,     0,     0,   935,   174,   175,
     176,   177,   178,   179,   180,   936,   937,   183,  1692,   184,
       0,   185,   186,   187,   188,   189,   190,     0,   191,     0,
     192,   193,   194,   195,     0,     0,   196,   197,   198,   199,
     200,     0,     0,     0,   201,   202,   203,     0,   204,   205,
     206,     0,   207,   208,   209,   210,   938,   212,   213,   214,
     215,   216,   939,  1495,   218,     0,   219,   220,   940,   222,
       0,   223,     0,   224,   941,     0,   942,   227,   228,   943,
     944,   231,     0,   232,     0,     0,     0,   945,   946,     0,
     235,     0,   236,   237,   238,   239,   240,   241,   242,   947,
     244,   245,   246,   247,     0,   248,   249,   250,   251,   252,
     253,     0,   254,   948,   949,   257,   258,   259,   260,   261,
     950,   951,     0,   952,     0,   265,   953,   954,   268,   955,
     270,     0,   271,   272,   273,   274,   275,     0,     0,   276,
     956,   278,   957,     0,   280,   281,   282,     0,     0,   283,
     284,   285,   286,   287,   958,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   959,   960,   961,   310,   311,   312,     0,
     962,     0,   314,   315,   963,   317,     0,   964,   319,   965,
     321,   322,   323,     0,   324,   325,  1496,     0,   326,   327,
     328,     0,     0,   329,   966,   967,   332,   968,   969,   335,
     336,   337,   338,   339,   340,   341,   342,   343,     0,     0,
     344,     0,   345,   346,   970,   971,   349,   350,   972,   352,
     353,   354,     0,   355,   356,   357,   358,   359,     0,     0,
     360,     0,   361,   362,   363,   973,   365,   366,   367,   368,
       0,   369,   370,   371,     0,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,     0,   382,   383,   974,   385,
     386,   387,   975,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,     0,   400,   401,   402,   403,   404,
     976,   406,   977,   408,   409,     0,   410,   978,     0,   412,
     979,   414,     0,     0,   415,   416,   417,   418,   419,   420,
     421,   422,   423,   424,   425,   426,   980,   428,   981,   430,
       0,   431,   432,     0,   433,   982,   435,   436,   437,   438,
     439,     0,   983,   984,     0,     0,     0,   442,   443,   985,
     445,   986,  1497,   447,   448,   987,   450,   451,   452,   453,
     454,     0,     0,   455,   456,   457,   458,   459,   460,   988,
       0,   462,   463,   464,   465,   466,  1378,   990,     0,   469,
     991,   471,     0,   472,   473,   474,   475,     0,     0,     0,
     476,     0,     0,   477,   478,   479,   480,   481,   482,   992,
     993,   994,   995,   996,   997,   998,   999,  1000,  1001,  1002,
     494,   495,   496,   497,   917,  1494,   516,     0,     0,     0,
    1080,  1498,  1499,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   108,   109,   110,   111,     0,   112,   113,   114,
     115,     0,   116,   117,   118,     0,     0,     0,     0,     0,
       0,     0,     0,   119,   120,     0,   121,   122,   123,   918,
     125,   126,   127,   919,   920,   921,   922,   923,     0,   133,
     134,   135,   136,   137,   138,     0,     0,   139,   140,   924,
     925,   143,     0,   144,   145,   146,   147,   926,     0,   927,
       0,   928,   151,   152,   153,   154,   155,   929,   157,   158,
     159,     0,   160,   161,   162,   163,   164,     0,     0,   930,
     166,   167,   168,   931,   932,   933,   934,     0,     0,   935,
     174,   175,   176,   177,   178,   179,   180,   936,   937,   183,
    1694,   184,     0,   185,   186,   187,   188,   189,   190,     0,
     191,     0,   192,   193,   194,   195,     0,     0,   196,   197,
     198,   199,   200,     0,     0,     0,   201,   202,   203,     0,
     204,   205,   206,     0,   207,   208,   209,   210,   938,   212,
     213,   214,   215,   216,   939,  1495,   218,     0,   219,   220,
     940,   222,     0,   223,     0,   224,   941,     0,   942,   227,
     228,   943,   944,   231,     0,   232,     0,     0,     0,   945,
     946,     0,   235,     0,   236,   237,   238,   239,   240,   241,
     242,   947,   244,   245,   246,   247,     0,   248,   249,   250,
     251,   252,   253,     0,   254,   948,   949,   257,   258,   259,
     260,   261,   950,   951,     0,   952,     0,   265,   953,   954,
     268,   955,   270,     0,   271,   272,   273,   274,   275,     0,
       0,   276,   956,   278,   957,     0,   280,   281,   282,     0,
       0,   283,   284,   285,   286,   287,   958,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   959,   960,   961,   310,   311,
     312,     0,   962,     0,   314,   315,   963,   317,     0,   964,
     319,   965,   321,   322,   323,     0,   324,   325,  1496,     0,
     326,   327,   328,     0,     0,   329,   966,   967,   332,   968,
     969,   335,   336,   337,   338,   339,   340,   341,   342,   343,
       0,     0,   344,     0,   345,   346,   970,   971,   349,   350,
     972,   352,   353,   354,     0,   355,   356,   357,   358,   359,
       0,     0,   360,     0,   361,   362,   363,   973,   365,   366,
     367,   368,     0,   369,   370,   371,     0,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,     0,   382,   383,
     974,   385,   386,   387,   975,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,     0,   400,   401,   402,
     403,   404,   976,   406,   977,   408,   409,     0,   410,   978,
       0,   412,   979,   414,     0,     0,   415,   416,   417,   418,
     419,   420,   421,   422,   423,   424,   425,   426,   980,   428,
     981,   430,     0,   431,   432,     0,   433,   982,   435,   436,
     437,   438,   439,     0,   983,   984,     0,     0,     0,   442,
     443,   985,   445,   986,  1497,   447,   448,   987,   450,   451,
     452,   453,   454,     0,     0,   455,   456,   457,   458,   459,
     460,   988,     0,   462,   463,   464,   465,   466,  1378,   990,
       0,   469,   991,   471,     0,   472,   473,   474,   475,     0,
       0,     0,   476,     0,     0,   477,   478,   479,   480,   481,
     482,   992,   993,   994,   995,   996,   997,   998,   999,  1000,
    1001,  1002,   494,   495,   496,   497,   917,  1494,   516,     0,
       0,     0,  1080,  1498,  1499,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   108,   109,   110,   111,     0,   112,
     113,   114,   115,     0,   116,   117,   118,     0,     0,     0,
       0,     0,     0,     0,     0,   119,   120,     0,   121,   122,
     123,   918,   125,   126,   127,   919,   920,   921,   922,   923,
       0,   133,   134,   135,   136,   137,   138,     0,     0,   139,
     140,   924,   925,   143,     0,   144,   145,   146,   147,   926,
       0,   927,     0,   928,   151,   152,   153,   154,   155,   929,
     157,   158,   159,     0,   160,   161,   162,   163,   164,     0,
       0,   930,   166,   167,   168,   931,   932,   933,   934,     0,
       0,   935,   174,   175,   176,   177,   178,   179,   180,   936,
     937,   183,     0,   184,     0,   185,   186,   187,   188,   189,
     190,     0,   191,     0,   192,   193,   194,   195,     0,     0,
     196,   197,   198,   199,   200,     0,     0,     0,   201,   202,
     203,     0,   204,   205,   206,     0,   207,   208,   209,   210,
     938,   212,   213,   214,   215,   216,   939,  1495,   218,     0,
     219,   220,   940,   222,     0,   223,     0,   224,   941,     0,
     942,   227,   228,   943,   944,   231,     0,   232,     0,     0,
       0,   945,   946,     0,   235,     0,   236,   237,   238,   239,
     240,   241,   242,   947,   244,   245,   246,   247,     0,   248,
     249,   250,   251,   252,   253,     0,   254,   948,   949,   257,
     258,   259,   260,   261,   950,   951,     0,   952,     0,   265,
     953,   954,   268,   955,   270,     0,   271,   272,   273,   274,
     275,     0,     0,   276,   956,   278,   957,     0,   280,   281,
     282,     0,     0,   283,   284,   285,   286,   287,   958,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   959,   960,   961,
     310,   311,   312,     0,   962,     0,   314,   315,   963,   317,
       0,   964,   319,   965,   321,   322,   323,     0,   324,   325,
    1496,     0,   326,   327,   328,     0,     0,   329,   966,   967,
     332,   968,   969,   335,   336,   337,   338,   339,   340,   341,
     342,   343,     0,     0,   344,     0,   345,   346,   970,   971,
     349,   350,   972,   352,   353,   354,     0,   355,   356,   357,
     358,   359,     0,     0,   360,     0,   361,   362,   363,   973,
     365,   366,   367,   368,     0,   369,   370,   371,     0,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,     0,
     382,   383,   974,   385,   386,   387,   975,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,     0,   400,
     401,   402,   403,   404,   976,   406,   977,   408,   409,     0,
     410,   978,     0,   412,   979,   414,     0,     0,   415,   416,
     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
     980,   428,   981,   430,     0,   431,   432,     0,   433,   982,
     435,   436,   437,   438,   439,     0,   983,   984,     0,     0,
       0,   442,   443,   985,   445,   986,  1497,   447,   448,   987,
     450,   451,   452,   453,   454,     0,     0,   455,   456,   457,
     458,   459,   460,   988,     0,   462,   463,   464,   465,   466,
    1378,   990,     0,   469,   991,   471,     0,   472,   473,   474,
     475,     0,     0,     0,   476,     0,     0,   477,   478,   479,
     480,   481,   482,   992,   993,   994,   995,   996,   997,   998,
     999,  1000,  1001,  1002,   494,   495,   496,   497,     0,     0,
    1633,     0,     0,  1634,     0,  1498,  1499,  1635,  1636,  1637,
    1638,  1639,  1640,  1633,     0,     0,  1634,     0,     0,     0,
    1635,  1636,  1637,  1638,  1639,  1640,     0,     0,  1641,     0,
       0,     0,     0,  2163,     0,     0,     0,  1643,     0,     0,
       0,  1641,     0,     0,  1644,     0,     0,     0,     0,     0,
    1643,     0,     0,  1633,     0,     0,  1634,  1644,     0,     0,
    1635,  1636,  1637,  1638,  1639,  1640,     0,     0,     0,  1645,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1641,  1645,     0,     0,     0,     0,     0,     0,     0,
    1643,     0,     0,     0,     0,     0,     0,  1644,     0,     0,
       0,     0,     0,  1633,     0,     0,  1634,     0,     0,     0,
    1635,  1636,  1637,  1638,  1639,  1640,     0,     0,     0,     0,
    2164,     0,  1645,     0,     0,     0,     0,     0,     0,     0,
       0,  1641,     0,     0,     0,  1929,     0,     0,     0,     0,
    1643,     0,     0,  1633,     0,     0,  1634,  1644,     0,     0,
    1635,  1636,  1637,  1638,  1639,  1640,  1633,     0,     0,  1634,
       0,     0,     0,  1635,  1636,  1637,  1638,  1639,  1640,     0,
       0,  1641,  1645,  1646,     0,     0,  1968,     0,     0,     0,
    1643,  1969,     0,     0,  1641,     0,  1646,  1644,  1974,     0,
       0,     0,  1647,  1643,     0,     0,     0,  1648,     0,     0,
    1644,     0,     0,     0,     0,  1647,     0,     0,     0,     0,
    1648,     0,  1645,     0,     0,  3640,     0,     0,     0,  1649,
    1650,     0,     0,     0,     0,  1645,  1646,     0,     0,     0,
       0,     0,  1649,  1650,     0,  1651,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1647,     0,     0,  1651,     0,
    1648,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1649,  1650,  1652,     0,  1646,  1653,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1652,  1651,     0,
    1653,  1654,     0,     0,  1655,  1647,     0,     0,     0,     0,
    1648,     0,     0,     0,  1654,     0,     0,  1655,     0,     0,
       0,     0,     0,     0,     0,     0,  1646,     0,     0,     0,
       0,     0,  1649,  1650,     0,     0,     0,  1652,     0,  1646,
    1653,     0,     0,     0,     0,  1647,     0,     0,  1651,     0,
    1648,     0,     0,     0,  1654,     0,     0,  1655,  1647,     0,
       0,     0,     0,  1648,     0,     0,     0,     0,     0,     0,
       0,     0,  1649,  1650,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  3641,     0,  1649,  1650,  1652,  1651,     0,
    1653,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1656,  1651,     0,     0,  1654,     0,     0,  1655,  1633,     0,
       0,  1634,     0,  1656,     0,  1635,  1636,  1637,  1638,  1639,
    1640,     0,     0,     0,     0,     0,     0,  1652,     0,     0,
    1653,     0,     0,     0,     0,     0,  1641,     0,     0,     0,
    1652,     0,     0,  1653,  1654,  1643,     0,  1655,     0,     0,
       0,     0,  1644,  1656,     0,     0,     0,  1654,     0,     0,
    1655,     0,     0,  2168,     0,     0,     0,  1940,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1645,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1656,     0,     0,     0,  1657,     0,     0,
    1658,  1659,  1660,     0,  1661,  1662,  1663,  1664,  1665,  1666,
    1657,     0,     0,  1658,  1659,  1660,     0,  1661,  1662,  1663,
    1664,  1665,  1666,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1656,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1656,     0,     0,     0,
    1657,     0,     0,  1658,  1659,  1660,     0,  1661,  1662,  1663,
    1664,  1665,  1666,     0,     0,     0,  1979,     0,     0,     0,
       0,  1646,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1647,     0,     0,     0,     0,  1648,     0,     0,     0,     0,
    1657,     0,     0,  1658,  1659,  1660,     0,  1661,  1662,  1663,
    1664,  1665,  1666,     0,     0,     0,     0,  1649,  1650,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1651,     0,     0,     0,     0,     0,     0,
    1657,     0,     0,  1658,  1659,  1660,     0,  1661,  1662,  1663,
    1664,  1665,  1666,  1657,     0,     0,  1658,  1659,  1660,     0,
    1661,  1662,  1663,  1664,  1665,  1666,     0,     0,     0,     0,
       0,     0,  1652,  1633,     0,  1653,  1634,     0,     0,     0,
    1635,  1636,  1637,  1638,  1639,  1640,     0,     0,     0,  1654,
       0,     0,  1655,     0,     0,     0,     0,     0,     0,     0,
       0,  1641,     0,     0,  1633,  1981,     0,  1634,     0,     0,
    1643,  1635,  1636,  1637,  1638,  1639,  1640,  1644,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1641,     0,     0,     0,     0,     0,     0,     0,
       0,  1643,  1645,     0,     0,     0,     0,     0,  1644,     0,
       0,     0,  1633,     0,     0,  1634,     0,     0,     0,  1635,
    1636,  1637,  1638,  1639,  1640,     0,     0,     0,     0,     0,
       0,     0,     0,  1645,     0,     0,     0,     0,     0,     0,
    1641,     0,     0,     0,     0,     0,     0,     0,  1656,  1643,
       0,     0,     0,     0,     0,     0,  1644,  1633,     0,     0,
    1634,     0,     0,     0,  1635,  1636,  1637,  1638,  1639,  1640,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1645,     0,     0,     0,  1641,     0,     0,     0,  2728,
       0,     0,     0,     0,  1643,     0,     0,     0,     0,     0,
       0,  1644,     0,     0,     0,  1633,  1646,     0,  1634,     0,
       0,     0,  1635,  1636,  1637,  1638,  1639,  1640,     0,     0,
       0,     0,     0,     0,     0,  1647,  1645,  2057,     0,     0,
    1648,     0,     0,  1641,     0,     0,     0,  1646,     0,     0,
       0,     0,  1643,     0,     0,     0,     0,     0,     0,  1644,
       0,     0,  1649,  1650,     0,  1657,  1647,     0,  1658,  1659,
    1660,  1648,  1661,  1662,  1663,  1664,  1665,  1666,  1651,     0,
       0,     0,     0,     0,  1645,     0,     0,     0,     0,     0,
       0,     0,     0,  1649,  1650,  1646,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1651,
       0,     0,     0,     0,  1647,     0,     0,  1652,     0,  1648,
    1653,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1654,     0,     0,  1655,     0,     0,
    1646,  1649,  1650,     0,     0,     0,     0,     0,  1652,     0,
       0,  1653,     0,     0,     0,     0,     0,  1651,     0,  1647,
       0,     0,     0,     0,  1648,  1654,     0,     0,  1655,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1649,  1650,  1646,     0,
       0,     0,     0,     0,     0,     0,  1652,     0,     0,  1653,
       0,     0,  1651,     0,     0,     0,     0,  1647,     0,     0,
       0,     0,  1648,  1654,     0,  1633,  1655,     0,  1634,     0,
       0,     0,  1635,  1636,  1637,  1638,  1639,  1640,     0,     0,
       0,     0,     0,  1656,  1649,  1650,     0,     0,     0,     0,
       0,  1652,     0,  1641,  1653,     0,     0,     0,     0,     0,
    1651,     0,  1643,     0,     0,     0,     0,     0,  1654,  1644,
    1079,  1655,     0,  3065,  1656,     0,     0,  3066,  3067,  3068,
    3069,  3070,  3071,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1645,     0,     0,     0,  3072,  1652,
       0,     0,  1653,     0,     0,     0,     0,  3073,     0,     0,
       0,     0,     0,     0,  3074,     0,  1654,     0,     0,  1655,
       0,     0,  1656,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  3075,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1657,     0,     0,  1658,  1659,  1660,  2718,  1661,  1662,  1663,
    1664,  1665,  1666,     0,     0,     0,     0,  1656,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1657,     0,     0,  1658,  1659,  1660,     0,  1661,  1662,
    1663,  1664,  1665,  1666,     0,     0,     0,     0,  1646,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1656,     0,  1647,     0,     0,
       0,     0,  1648,     0,     0,     0,     0,     0,     0,  1657,
       0,     0,  1658,  1659,  1660,     0,  1661,  1662,  1663,  1664,
    1665,  1666,     0,  3076,  1649,  1650,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1651,     0,  3077,     0,     0,     0,     0,  3078,     0,     0,
       0,     0,     0,     0,  1657,     0,     0,  1658,  1659,  1660,
       0,  1661,  1662,  1663,  1664,  1665,  1666,     0,     0,  3079,
    3080,     0,     0,     0,     0,     0,     0,     0,     0,  1652,
       0,     0,  1653,     0,     0,  3081,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1654,     0,     0,  1655,
       0,     0,  1657,     0,     0,  1658,  1659,  1660,     0,  1661,
    1662,  1663,  1664,  1665,  1666,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  3082,  1633,     0,  3083,  1634,     0,
       0,     0,  1635,     0,     0,  1638,  1639,  1640,     0,     0,
       0,  1952,     0,     0,  3084,     0,     0,     0,     0,     0,
       0,     0,     0,  1641,     0,     0,  1079,     0,     0,  3065,
       0,     0,  1643,  3066,     0,     0,  3069,  3070,  3071,  1644,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  3072,     0,     0,     0,     0,     0,
       0,     0,     0,  3073,  1645,  1656,     0,     0,     0,     0,
    3074,  1633,     0,     0,  1634,     0,     0,     0,  1635,     0,
       0,  1638,  1639,  1640,     0,     0,     0,     0,     0,     0,
       0,  1079,     0,     0,  3065,  3075,     0,     0,  3066,  1641,
       0,  3069,  3070,  3071,     0,     0,     0,     0,  1643,     0,
    3085,     0,     0,     0,     0,  1644,     0,     0,     0,  3072,
       0,     0,  1633,     0,     0,  1634,     0,     0,  3073,  1635,
       0,     0,  1638,  1639,  1640,  3074,     0,     0,     0,     0,
    1645,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1643,
    3075,     0,     0,     0,     0,     0,  1644,     0,  1646,     0,
       0,     0,  1657,     0,     0,  1658,  1659,  1660,     0,  1661,
    1662,  1663,  1664,  2185,  1666,     0,     0,  1647,     0,     0,
       0,  1645,  1648,     0,     0,     0,     0,     0,     0,  3076,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1649,  1650,     0,  3086,  3077,     0,
    3087,  3088,  3089,  3078,  3090,  3091,  3092,  3093,  3094,  3095,
    1651,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1646,  3079,  3080,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  3081,     0,  1647,  3076,     0,     0,     0,  1648,  1652,
       0,     0,  1653,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  3077,     0,     0,  1654,     0,  3078,  1655,
    1649,  1650,     0,     0,     0,  1646,     0,     0,     0,     0,
    3082,     0,     0,  3083,     0,     0,  1651,     0,     0,     0,
    3079,  3080,     0,     0,  1647,     0,     0,  1952,     0,  1648,
    3084,     0,     0,     0,     0,     0,  3081,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1649,  1650,     0,     0,  1652,     0,     0,  1653,     0,
       0,     0,     0,     0,     0,     0,     0,  1651,     0,     0,
       0,     0,  1654,     0,     0,  3082,  1079,     0,  3083,  3065,
       0,     0,     0,  3066,     0,     0,  3069,  3070,  3071,     0,
       0,     0,  1952,     0,     0,  1656,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1652,  1079,     0,  1653,
    3065,     0,     0,  3073,  3066,     0,     0,  3069,  3070,  3071,
    3074,     0,     0,  1654,     0,     0,  3085,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  3073,  3075,     0,     0,     0,     0,
       0,  3074,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1656,     0,     0,     0,     0,  3075,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  3085,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1657,     0,     0,  1658,  1659,  1660,     0,  1661,
    1662,  1663,  1664,  1665,  1666,     0,     0,     0,     0,     0,
       0,     0,  1656,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  3086,     0,     0,  3087,  3088,  3089,     0,
    3090,  3091,  3092,  3093,  3094,  3095,     0,     0,     0,  3076,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  3077,     0,
       0,     0,     0,  3078,     0,     0,     0,     0,  1657,     0,
    3076,  1658,  1659,  1660,     0,  1661,  1662,  1663,  1664,  1665,
    1666,     0,     0,     0,     0,  3079,  3080,     0,  3086,  3077,
       0,  3087,  3088,  3089,  3078,  3090,  3091,  3092,  3093,  3094,
    3095,  3081,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0, -2095, -2095,     0,  1657,
       0,     0,  1658,  1659,  1660,     0,  1661,  1662,  1663,  1664,
    1665,  1666,  3081,     0,     0,     0,     0,     0,     0,     0,
    3082,     0,     0,  3083,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1952,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0, -2095,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1952,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  3085,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  3085,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  3086,     0,     0,  3087,  3088,  3089,     0,
    3090,  3091,  3092,  3093,  3094,  3095,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1309,
       0,  2076,     0,     0,  3086,     0,     0,  3087,  3088,  3089,
       0,  3090,  3091,  3092,  3093,  3094,  3095,   108,   109,   110,
     111,     0,   112,   113,   114,   115,  1310,   116,   117,   118,
    1311,  1312,  1313,  1314,     0,  1315,  1316,  1317,   119,   120,
    1318,   121,   122,   123,   918,   125,   126,   127,   919,   920,
     921,   922,   923,  1319,   133,   134,   135,   136,   137,   138,
    1320,  1321,   139,   140,   924,   925,   143,  1322,   144,   145,
     146,   147,   926,  1323,   927,  1324,   928,   151,   152,   153,
     154,   155,   929,   157,   158,   159,  1325,   160,   161,   162,
     163,   164,     0,  1326,   930,   166,   167,   168,   931,   932,
     933,   934,  1327,  1328,   935,   174,   175,   176,   177,   178,
     179,   180,   936,   937,   183,  1329,   184,  1330,   185,   186,
     187,   188,   189,   190,  1331,   191,     0,   192,   193,   194,
     195,  1332,  1333,   196,   197,   198,   199,   200,     0,     0,
    1334,   201,   202,   203,  1335,   204,   205,   206,  1336,   207,
     208,   209,   210,   938,   212,   213,   214,   215,   216,   939,
    1337,   218,  1338,   219,   220,   940,   222,  1339,   223,  1340,
     224,   941,  1341,   942,   227,   228,   943,   944,   231,  1342,
     232,     0,  1343,  1344,   945,   946,     0,   235,  1345,   236,
     237,   238,   239,   240,   241,   242,   947,   244,   245,   246,
     247,  1346,   248,   249,   250,   251,   252,   253,  1347,   254,
     948,   949,   257,   258,   259,   260,   261,   950,   951,  1348,
     952,  1349,   265,   953,   954,   268,   955,   270,     0,   271,
     272,   273,   274,   275,  1350,  1351,   276,   956,   278,   957,
    1352,   280,   281,   282,  1353,  1354,   283,   284,   285,   286,
     287,   958,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     959,   960,   961,   310,   311,   312,     0,   962,  1355,   314,
     315,   963,   317,  1356,   964,   319,   965,   321,   322,   323,
    1357,   324,   325,  1358,  1359,   326,   327,   328,  1360,  1361,
     329,   966,   967,   332,   968,   969,   335,   336,   337,   338,
     339,   340,   341,   342,   343,     0,     0,   344,  1362,   345,
     346,   970,   971,   349,   350,   972,   352,   353,   354,  1363,
     355,   356,   357,   358,   359,     0,     0,   360,  1364,   361,
     362,   363,   973,   365,   366,   367,   368,  1365,   369,   370,
     371,     0,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,  1366,   382,   383,   974,   385,   386,   387,   975,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,  1367,   400,   401,   402,   403,   404,   976,   406,   977,
     408,   409,     0,   410,   978,     0,   412,   979,   414,  1368,
       0,   415,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   980,   428,   981,   430,  1369,   431,   432,
    1370,   433,   982,   435,   436,   437,   438,   439,  1371,   983,
     984,  1372,     0,  1373,   442,   443,   985,   445,   986,  1374,
     447,   448,   987,   450,   451,   452,   453,   454,  1375,  1376,
     455,   456,   457,   458,   459,   460,   988,  1377,   462,   463,
     464,   465,   466,  1378,   990,  1379,   469,   991,   471,     0,
     472,   473,   474,   475,     0,  1380,  1381,   476,  1382,  1383,
     477,   478,   479,   480,   481,   482,   992,   993,   994,   995,
     996,   997,   998,   999,  1000,  1001,  1002,   494,   495,   496,
     497,  1309,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   108,
     109,   110,   111,     0,   112,   113,   114,   115,  1310,   116,
     117,   118,  1311,  1312,  1313,  1314,     0,  1315,  1316,  1317,
     119,   120,  1318,   121,   122,   123,   918,   125,   126,   127,
     919,   920,   921,   922,   923,  1319,   133,   134,   135,   136,
     137,   138,  1320,  1321,   139,   140,   924,   925,   143,  1322,
     144,   145,   146,   147,   926,  1323,   927,  1324,   928,   151,
     152,   153,   154,   155,   929,   157,   158,   159,  1325,   160,
     161,   162,   163,   164,     0,  1326,   930,   166,   167,   168,
     931,   932,   933,   934,  1327,  1328,   935,   174,   175,   176,
     177,   178,   179,   180,   936,   937,   183,  1329,   184,  1330,
     185,   186,   187,   188,   189,   190,  1331,   191,     0,   192,
     193,   194,   195,  1332,  1333,   196,   197,   198,   199,   200,
       0,     0,  1334,   201,   202,   203,  1335,   204,   205,   206,
    1336,   207,   208,   209,   210,   938,   212,   213,   214,   215,
     216,   939,  1337,   218,  1338,   219,   220,   940,   222,  1339,
     223,  1340,   224,   941,  1341,   942,   227,   228,   943,   944,
     231,  1342,   232,     0,  1343,  1344,   945,   946,     0,   235,
    1345,   236,   237,   238,   239,   240,   241,   242,   947,   244,
     245,   246,   247,  1346,   248,   249,   250,   251,   252,   253,
    1347,   254,   948,   949,   257,   258,   259,   260,   261,   950,
     951,  1348,   952,  1349,   265,   953,   954,   268,   955,   270,
       0,   271,   272,   273,   274,   275,  1350,  1351,   276,   956,
     278,   957,  1352,   280,   281,   282,  1353,  1354,   283,   284,
     285,   286,   287,   958,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   959,   960,   961,   310,   311,   312,     0,   962,
    1355,   314,   315,   963,   317,  1356,   964,   319,   965,   321,
     322,   323,  1357,   324,   325,  1358,  1359,   326,   327,   328,
    1360,  1361,   329,   966,   967,   332,   968,   969,   335,   336,
     337,   338,   339,   340,   341,   342,   343,     0,     0,   344,
    1362,   345,   346,   970,   971,   349,   350,   972,   352,   353,
     354,  1363,   355,   356,   357,   358,   359,     0,     0,   360,
    1364,   361,   362,   363,   973,   365,   366,   367,   368,  1365,
     369,   370,   371,     0,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,  1366,   382,   383,   974,   385,   386,
     387,   975,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,  1367,   400,   401,   402,   403,   404,   976,
     406,   977,   408,   409,     0,   410,   978,     0,   412,   979,
     414,  1368,     0,   415,   416,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   980,   428,   981,   430,  1369,
     431,   432,  1370,   433,   982,   435,   436,   437,   438,   439,
    1371,   983,   984,  1372,     0,  1373,   442,   443,   985,   445,
     986,  1374,   447,   448,   987,   450,   451,   452,   453,   454,
    1375,  1376,   455,   456,   457,   458,   459,   460,   988,  1377,
     462,   463,   464,   465,   466,  1378,   990,  1379,   469,   991,
     471,     0,   472,   473,   474,   475,     0,  1380,  1381,   476,
    1382,  1383,   477,   478,   479,   480,   481,   482,   992,   993,
     994,   995,   996,   997,   998,   999,  1000,  1001,  1002,   494,
     495,   496,   497,  1309,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   108,   109,   110,   111,     0,  2221,   113,   114,   115,
    1310,   116,   117,   118,  1311,  1312,  1313,  1314,     0,  1315,
    1316,  1317,   119,   120,  1318,   121,   122,   123,   918,   125,
     126,   127,   919,   920,   921,   922,   923,  1319,   133,   134,
     135,   136,   137,   138,  1320,  1321,   139,   140,   924,   925,
     143,  1322,   144,   145,   146,   147,   926,  1323,   927,  1324,
     928,   151,   152,   153,   154,   155,   929,   157,   158,   159,
    1325,   160,   161,   162,   163,   164,     0,  1326,   930,   166,
     167,   168,   931,   932,   933,   934,  1327,  1328,   935,   174,
     175,   176,   177,   178,   179,   180,   936,   937,   183,  1329,
     184,  1330,   185,   186,   187,   188,   189,   190,  1331,   191,
       0,   192,   193,   194,   195,  1332,  1333,   196,   197,   198,
    2222,   200,     0,     0,  1334,   201,   202,   203,  1335,   204,
     205,   206,  1336,   207,   208,   209,   210,   938,   212,   213,
     214,   215,   216,   939,  1337,   218,  1338,   219,   220,   940,
     222,  1339,   223,  1340,   224,   941,  1341,   942,   227,   228,
     943,   944,   231,  1342,   232,     0,  1343,  1344,   945,   946,
       0,   235,  1345,   236,   237,   238,   239,   240,   241,   242,
     947,   244,   245,   246,   247,  1346,   248,   249,   250,   251,
     252,   253,  1347,   254,   948,   949,   257,   258,   259,   260,
     261,   950,   951,  1348,   952,  1349,   265,   953,   954,   268,
     955,   270,     0,   271,   272,   273,   274,   275,  1350,  1351,
     276,   956,   278,   957,  1352,   280,   281,   282,  1353,  1354,
     283,   284,   285,   286,   287,   958,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   959,   960,   961,   310,   311,   312,
       0,   962,  1355,   314,   315,   963,   317,  1356,   964,   319,
     965,   321,   322,   323,  1357,   324,   325,  1358,  1359,   326,
     327,   328,  1360,  1361,   329,   966,   967,   332,   968,   969,
     335,   336,   337,   338,   339,   340,   341,   342,   343,     0,
       0,   344,  1362,   345,   346,   970,   971,   349,   350,   972,
     352,   353,   354,  1363,   355,   356,   357,   358,   359,     0,
       0,   360,  1364,   361,   362,   363,   973,   365,   366,   367,
     368,  1365,   369,   370,   371,     0,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,  1366,   382,   383,   974,
     385,   386,   387,   975,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,  1367,   400,   401,   402,   403,
     404,   976,  2223,   977,   408,   409,     0,   410,   978,     0,
     412,   979,   414,  1368,     0,   415,   416,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   980,   428,   981,
     430,  1369,   431,   432,  1370,   433,   982,   435,   436,   437,
     438,   439,  1371,   983,   984,  1372,     0,  1373,   442,   443,
     985,   445,   986,  1374,   447,   448,   987,   450,   451,   452,
     453,   454,  1375,  1376,   455,   456,   457,   458,   459,   460,
     988,  1377,   462,   463,   464,   465,   466,  1378,   990,  1379,
     469,   991,   471,     0,   472,   473,   474,   475,     0,  1380,
    1381,   476,  1382,  1383,   477,   478,   479,   480,   481,   482,
     992,   993,   994,   995,   996,   997,   998,   999,  1000,  1001,
    1002,   494,   495,   496,   497,   107,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   108,   109,   110,   111,     0,   112,   113,
     114,   115,     0,   116,   117,   118,     0,     0,     0,     0,
       0,     0,     0,     0,   119,   120,     0,   121,   122,   123,
     124,   125,   126,   127,   128,   129,   130,   131,   132,     0,
     133,   134,   135,   136,   137,   138,     0,   608,   139,   140,
     141,   142,   143,     0,   144,   145,   146,   147,   609,     0,
     610,     0,   150,   151,   152,   153,   154,   155,   156,   157,
     158,   159,     0,   160,   161,   162,   163,   164,     0,     0,
     165,   166,   167,   168,   611,   612,   613,   614,   615,   616,
     617,   174,   175,   176,   177,   178,   179,   180,   181,   182,
     183,     0,   184,     0,   185,   186,   187,   188,   189,   190,
       0,   191,     0,   192,   193,   194,   195,     0,     0,   196,
     197,   198,   199,   200,     0,     0,     0,   201,   202,   203,
       0,   204,   205,   206,     0,   207,   208,   209,   210,   211,
     212,   213,   214,   215,   216,   618,     0,   218,     0,   219,
     220,   221,   222,     0,   223,     0,   224,   225,     0,   226,
     227,   228,   229,   230,   231,     0,   232,     0,     0,     0,
     233,   234,     0,   235,     0,   236,   237,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,     0,   248,   249,
     250,   251,   252,   253,     0,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,     0,   264,     0,   265,   266,
     267,   268,   269,   270,     0,   271,   272,   273,   274,   275,
       0,     0,   276,   277,   278,   279,     0,   280,   281,   282,
     621,   622,   283,   284,   285,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,     0,   313,     0,   314,   315,   316,   317,     0,
     623,   319,   320,   321,   322,   323,     0,   324,   325,     0,
       0,   326,   327,   328,     0,     0,   329,   330,   331,   332,
     333,   625,   335,   336,   337,   338,   339,   340,   341,   342,
     343,     0,     0,   344,     0,   345,   346,   626,   348,   349,
     350,   351,   352,   353,   354,     0,   355,   356,   357,   358,
     359,     0,     0,   360,     0,   361,   362,   363,   364,   365,
     366,   367,   368,     0,   369,   370,   371,     0,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,     0,   382,
     383,   384,   385,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,     0,   400,   401,
     402,   403,   404,   628,   406,   407,   408,   409,     0,   410,
     411,     0,   412,   413,   414,     0,     0,   415,   416,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   629,   430,     0,   431,   432,     0,   433,   434,   435,
     436,   437,   438,   439,     0,   440,   441,     0,     0,     0,
     442,   443,   630,   445,   631,     0,   447,   448,   632,   450,
     451,   452,   453,   454,     0,     0,   455,   456,   457,   458,
     459,   460,   633,     0,   462,   463,   464,   465,   466,   467,
     468,     0,   469,   470,   471,     0,   472,   473,   474,   475,
       0,     0,     0,   476,     0,     0,   477,   478,   479,   480,
     481,   482,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   917,     0,   516,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   108,   109,   110,   111,     0,
     112,   113,   114,   115,     0,   116,   117,   118,     0,     0,
       0,     0,     0,     0,     0,     0,   119,   120,     0,   121,
     122,   123,   918,   125,   126,   127,   919,   920,   921,   922,
     923,     0,   133,   134,   135,   136,   137,   138,     0,     0,
     139,   140,   924,   925,   143,     0,   144,   145,   146,   147,
     926,     0,   927,     0,   928,   151,   152,   153,   154,   155,
     929,   157,   158,   159,     0,   160,   161,   162,   163,   164,
       0,     0,   930,   166,   167,   168,   931,   932,   933,   934,
       0,     0,   935,   174,   175,   176,   177,   178,   179,   180,
     936,   937,   183,     0,   184,     0,   185,   186,   187,   188,
     189,   190,     0,   191,     0,   192,   193,   194,   195,     0,
       0,   196,   197,   198,   199,   200,     0,     0,     0,   201,
     202,   203,     0,   204,   205,   206,     0,   207,   208,   209,
     210,   938,   212,   213,   214,   215,   216,   939,  1495,   218,
       0,   219,   220,   940,   222,     0,   223,     0,   224,   941,
       0,   942,   227,   228,   943,   944,   231,     0,   232,     0,
       0,     0,   945,   946,     0,   235,     0,   236,   237,   238,
     239,   240,   241,   242,   947,   244,   245,   246,   247,     0,
     248,   249,   250,   251,   252,   253,     0,   254,   948,   949,
     257,   258,   259,   260,   261,   950,   951,     0,   952,     0,
     265,   953,   954,   268,   955,   270,     0,   271,   272,   273,
     274,   275,     0,     0,   276,   956,   278,   957,     0,   280,
     281,   282,     0,     0,   283,   284,   285,   286,   287,   958,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   959,   960,
     961,   310,   311,   312,     0,   962,     0,   314,   315,   963,
     317,     0,   964,   319,   965,   321,   322,   323,     0,   324,
     325,  1496,     0,   326,   327,   328,     0,     0,   329,   966,
     967,   332,   968,   969,   335,   336,   337,   338,   339,   340,
     341,   342,   343,     0,     0,   344,     0,   345,   346,   970,
     971,   349,   350,   972,   352,   353,   354,     0,   355,   356,
     357,   358,   359,     0,     0,   360,     0,   361,   362,   363,
     973,   365,   366,   367,   368,     0,   369,   370,   371,     0,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
       0,   382,   383,   974,   385,   386,   387,   975,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,     0,
     400,   401,   402,   403,   404,   976,   406,   977,   408,   409,
       0,   410,   978,     0,   412,   979,   414,     0,     0,   415,
     416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   980,   428,   981,   430,     0,   431,   432,     0,   433,
     982,   435,   436,   437,   438,   439,     0,   983,   984,     0,
       0,     0,   442,   443,   985,   445,   986,  1497,   447,   448,
     987,   450,   451,   452,   453,   454,     0,     0,   455,   456,
     457,   458,   459,   460,   988,     0,   462,   463,   464,   465,
     466,  1378,   990,     0,   469,   991,   471,     0,   472,   473,
     474,   475,     0,     0,     0,   476,     0,     0,   477,   478,
     479,   480,   481,   482,   992,   993,   994,   995,   996,   997,
     998,   999,  1000,  1001,  1002,   494,   495,   496,   497,   917,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   108,   109,   110,
     111,     0,   112,   113,   114,   115,     0,   116,   117,   118,
       3,     4,     0,     0,     0,     0,     0,     0,   119,   120,
       0,   121,   122,   123,   918,   125,   126,   127,   919,   920,
     921,   922,   923,     0,   133,   134,   135,   136,   137,   138,
       0,     0,   139,   140,   924,   925,   143,     0,   144,   145,
     146,   147,   926,     0,   927,     0,   928,   151,   152,   153,
     154,   155,   929,   157,   158,   159,     0,   160,   161,   162,
     163,   164,     0,     0,   930,   166,   167,   168,   931,   932,
     933,   934,     0,     0,   935,   174,   175,   176,   177,   178,
     179,   180,   936,   937,   183,     0,   184,     0,   185,   186,
     187,   188,   189,   190,     0,   191,     0,   192,   193,   194,
     195,     0,     0,   196,   197,   198,   199,   200,     0,     0,
       0,   201,   202,   203,     0,   204,   205,   206,     0,   207,
     208,   209,   210,   938,   212,   213,   214,   215,   216,   939,
       0,   218,     0,   219,   220,   940,   222,     0,   223,     0,
     224,   941,     0,   942,   227,   228,   943,   944,   231,     0,
     232,     0,     0,     0,   945,   946,     0,   235,     0,   236,
     237,   238,   239,   240,   241,   242,   947,   244,   245,   246,
     247,     0,   248,   249,   250,   251,   252,   253,     0,   254,
     948,   949,   257,   258,   259,   260,   261,   950,   951,     0,
     952,     0,   265,   953,   954,   268,   955,   270,     0,   271,
     272,   273,   274,   275,     0,     0,   276,   956,   278,   957,
       0,   280,   281,   282,     0,     0,   283,   284,   285,   286,
     287,   958,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     959,   960,   961,   310,   311,   312,     0,   962,     0,   314,
     315,   963,   317,     0,   964,   319,   965,   321,   322,   323,
       0,   324,   325,     0,     0,   326,   327,   328,     0,     0,
     329,   966,   967,   332,   968,   969,   335,   336,   337,   338,
     339,   340,   341,   342,   343,     0,     0,   344,     0,   345,
     346,   970,   971,   349,   350,   972,   352,   353,   354,     0,
     355,   356,   357,   358,   359,     0,     0,   360,     0,   361,
     362,   363,   973,   365,   366,   367,   368,     0,   369,   370,
     371,     0,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,     0,   382,   383,   974,   385,   386,   387,   975,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,     0,   400,   401,   402,   403,   404,   976,   406,   977,
     408,   409,     0,   410,   978,     0,   412,   979,   414,     0,
       0,   415,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   980,   428,   981,   430,     0,   431,   432,
       0,   433,   982,   435,   436,   437,   438,   439,     0,   983,
     984,     0,     0,     0,   442,   443,   985,   445,   986,     0,
     447,   448,   987,   450,   451,   452,   453,   454,     0,     0,
     455,   456,   457,   458,   459,   460,   988,     0,   462,   463,
     464,   465,   466,  1378,   990,     0,   469,   991,   471,     0,
     472,   473,   474,   475,     0,     0,     0,   476,     0,     0,
     477,   478,   479,   480,   481,   482,   992,   993,   994,   995,
     996,   997,   998,   999,  1000,  1001,  1002,   494,   495,   496,
     497,   107,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   108,
     109,   110,   111,     0,   112,   113,   114,   115,     0,   116,
     117,   118,     0,     0,     0,     0,     0,     0,     0,     0,
     119,   120,     0,   121,   122,   123,   124,   125,   126,   127,
     128,   129,   130,   131,   132,     0,   133,   134,   135,   136,
     137,   138,     0,     0,   139,   140,   141,   142,   143,     0,
     144,   145,   146,   147,   148,     0,   149,     0,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,     0,   160,
     161,   162,   163,   164,     0,     0,   165,   166,   167,   168,
     169,   170,   171,   172,     0,     0,   173,   174,   175,   176,
     177,   178,   179,   180,   181,   182,   183,     0,   184,     0,
     185,   186,   187,   188,   189,   190,     0,   191,     0,   192,
     193,   194,   195,     0,     0,   196,   197,   198,   199,   200,
       0,     0,     0,   201,   202,   203,     0,   204,   205,   206,
       0,   207,   208,   209,   210,   211,   212,   213,   214,   215,
     216,   217,     0,   218,     0,   219,   220,   221,   222,     0,
     223,     0,   224,   225,     0,   226,   227,   228,   229,   230,
     231,     0,   232,     0,     0,     0,   233,   234,     0,   235,
       0,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,     0,   248,   249,   250,   251,   252,   253,
       0,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,     0,   264,     0,   265,   266,   267,   268,   269,   270,
       0,   271,   272,   273,   274,   275,     0,     0,   276,   277,
     278,   279,     0,   280,   281,   282,     0,     0,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,     0,   313,
       0,   314,   315,   316,   317,     0,   318,   319,   320,   321,
     322,   323,     0,   324,   325,     0,     0,   326,   327,   328,
       0,     0,   329,   330,   331,   332,   333,   334,   335,   336,
     337,   338,   339,   340,   341,   342,   343,     0,     0,   344,
       0,   345,   346,   347,   348,   349,   350,   351,   352,   353,
     354,     0,   355,   356,   357,   358,   359,     0,     0,   360,
       0,   361,   362,   363,   364,   365,   366,   367,   368,     0,
     369,   370,   371,     0,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,     0,   382,   383,   384,   385,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,     0,   400,   401,   402,   403,   404,   405,
     406,   407,   408,   409,     0,   410,   411,     0,   412,   413,
     414,     0,     0,   415,   416,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,   428,   429,   430,     0,
     431,   432,     0,   433,   434,   435,   436,   437,   438,   439,
       0,   440,   441,     0,     0,     0,   442,   443,   444,   445,
     446,     0,   447,   448,   449,   450,   451,   452,   453,   454,
       0,     0,   455,   456,   457,   458,   459,   460,   461,     0,
     462,   463,   464,   465,   466,   467,   468,     0,   469,   470,
     471,     0,   472,   473,   474,   475,     0,     0,     0,   476,
       0,     0,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   505,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   108,   109,   110,   111,     0,   112,   113,   114,   115,
       0,   116,   117,   118,     0,     0,     0,     0,     0,     0,
       0,     0,   119,   120,     0,   121,   122,   123,     0,   125,
     126,   127,   128,   129,     0,   131,   132,     0,   133,   134,
     135,   136,   137,   138,     0,     0,   139,   140,   141,   142,
     143,  1762,   144,   145,   146,   147,   148,     0,     0,  1763,
     150,   151,   152,   153,   154,   155,     0,   157,   158,   159,
    1764,   160,   161,   162,   163,   164,     0,     0,     0,   166,
     167,   168,     0,     0,     0,     0,     0,     0,     0,   174,
     175,   176,   177,   178,   179,   180,   181,   182,   183,     0,
     184,     0,   185,   186,   187,   188,   189,   190,     0,   191,
       0,   192,   193,   194,   195,     0,     0,   196,   197,   198,
     199,   200,     0,     0,     0,   201,   202,   203,     0,   204,
     205,   206,     0,   207,   208,   209,   210,   211,   212,   213,
     214,   215,   216,   217,     0,   218,     0,   219,   220,   221,
     222,     0,   223,  1765,   224,     0,     0,     0,   227,   228,
     506,     0,   231,     0,   232,     0,     0,     0,   233,   234,
       0,   235,     0,   236,   237,   238,   239,   240,  1766,   242,
       0,   244,   245,   246,   247,     0,   248,   249,   250,   251,
     252,   253,     0,   254,     0,   256,   257,   258,   259,   260,
     261,   262,   263,     0,   264,     0,   265,     0,     0,   268,
       0,   270,     0,   271,   272,   273,   274,   275,     0,     0,
     276,     0,   278,     0,     0,   280,   281,   282,     0,     0,
     283,   284,   285,   286,   287,   507,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,     0,   309,   310,   311,   312,
       0,   313,     0,   314,   315,     0,   317,     0,   318,   319,
     320,   321,   322,   323,     0,   324,   325,     0,     0,   326,
     327,   328,     0,     0,   329,   330,     0,   332,     0,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,     0,
       0,   344,     0,   345,   346,   347,     0,   349,   350,   351,
     352,   353,   354,  1767,   355,   356,   357,   358,   359,     0,
       0,   360,     0,   361,   362,   363,   364,   365,   366,   367,
     368,     0,   369,   370,   371,     0,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,     0,   382,   383,     0,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,     0,   400,   401,   402,   403,
     404,     0,   406,   407,   408,   409,     0,   410,     0,     0,
     412,   413,   414,     0,     0,   415,   416,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   508,   428,   429,
     430,     0,   431,   432,     0,   433,     0,   435,   436,   437,
     438,   439,     0,   440,   441,     0,     0,     0,   442,   443,
     444,   445,   446,     0,   447,   448,   449,   450,   451,   452,
     453,   454,     0,  1768,   455,   456,   457,   458,   459,   460,
       0,     0,   462,   463,   464,   465,   466,   467,   468,     0,
     469,     0,   471,     0,   472,   473,   474,   475,     0,     0,
       0,   476,     0,     0,   477,   478,   479,   480,   481,   482,
     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   505,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   108,   109,   110,   111,     0,   112,   113,
     114,   115,     0,   116,   117,   118,     0,     0,     0,     0,
       0,     0,     0,     0,   119,   120,     0,   121,   122,   123,
       0,   125,   126,   127,   128,   129,     0,   131,   132,     0,
     133,   134,   135,   136,   137,   138,     0,     0,   139,   140,
     141,   142,   143,  1762,   144,   145,   146,   147,   148,     0,
       0,     0,   150,   151,   152,   153,   154,   155,     0,   157,
     158,   159,  1764,   160,   161,   162,   163,   164,     0,     0,
       0,   166,   167,   168,     0,     0,     0,     0,     0,     0,
       0,   174,   175,   176,   177,   178,   179,   180,   181,   182,
     183,     0,   184,     0,   185,   186,   187,   188,   189,   190,
       0,   191,     0,   192,   193,   194,   195,     0,     0,   196,
     197,   198,   199,   200,     0,     0,     0,   201,   202,   203,
       0,   204,   205,   206,     0,   207,   208,   209,   210,   211,
     212,   213,   214,   215,   216,   217,     0,   218,     0,   219,
     220,   221,   222,     0,   223,  1765,   224,     0,     0,     0,
     227,   228,   506,     0,   231,     0,   232,     0,     0,     0,
     233,   234,     0,   235,     0,   236,   237,   238,   239,   240,
     241,   242,     0,   244,   245,   246,   247,     0,   248,   249,
     250,   251,   252,   253,     0,   254,     0,   256,   257,   258,
     259,   260,   261,   262,   263,     0,   264,     0,   265,     0,
       0,   268,     0,   270,     0,   271,   272,   273,   274,   275,
       0,     0,   276,     0,   278,  2297,     0,   280,   281,   282,
       0,     0,   283,   284,   285,   286,   287,   507,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,     0,   309,   310,
     311,   312,     0,   313,     0,   314,   315,     0,   317,     0,
     318,   319,   320,   321,   322,   323,     0,   324,   325,     0,
       0,   326,   327,   328,     0,     0,   329,   330,     0,   332,
       0,   334,   335,   336,   337,   338,   339,   340,   341,   342,
     343,     0,     0,   344,     0,   345,   346,   347,     0,   349,
     350,   351,   352,   353,   354,  1767,   355,   356,   357,   358,
     359,     0,     0,   360,     0,   361,   362,   363,   364,   365,
     366,   367,   368,     0,   369,   370,   371,     0,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,     0,   382,
     383,     0,   385,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,     0,   400,   401,
     402,   403,   404,     0,   406,   407,   408,   409,     0,   410,
       0,     0,   412,   413,   414,     0,     0,   415,   416,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   508,
     428,   429,   430,     0,   431,   432,     0,   433,     0,   435,
     436,   437,   438,   439,     0,   440,   441,     0,     0,     0,
     442,   443,   444,   445,   446,     0,   447,   448,   449,   450,
     451,   452,   453,   454,     0,  1768,   455,   456,   457,   458,
     459,   460,     0,     0,   462,   463,   464,   465,   466,   467,
     468,     0,   469,     0,   471,     0,   472,   473,   474,   475,
       0,     0,     0,   476,     0,     0,   477,   478,   479,   480,
     481,   482,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   826,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   108,   109,   110,   111,     0,
     112,   113,   114,   115,     0,   116,   117,   118,     0,     0,
       0,     0,     0,     0,  -885,     0,   119,   120,     0,   121,
     122,   123,   827,   125,   126,   127,     0,   828,   829,   830,
     831,     0,   133,   134,   135,   136,   137,   138,     0,     0,
     139,   140,   832,   833,   143,     0,   144,   145,   146,   147,
       0,     0,   834,     0,   835,   151,   152,   153,   154,   155,
     836,   157,   158,   159,     0,   160,   161,   162,   163,   164,
       0,     0,   837,   166,   167,   168,   838,   839,   840,   841,
       0,     0,   842,   174,   175,   176,   177,   178,   179,   180,
     843,   844,   183,     0,   184,     0,   185,   186,   187,   188,
     189,   190,     0,   191,     0,   192,   193,   194,   195,     0,
       0,   196,   197,   845,   199,   200,     0,     0,     0,   201,
     202,   203,     0,   204,   205,   206,     0,   207,   208,   209,
     210,     0,   212,   213,   214,   215,   216,     0,     0,   218,
       0,   219,   220,   846,   222,     0,   223,     0,   224,   847,
       0,   848,   227,   228,  -885,   849,   231,     0,   232,     0,
       0,     0,     0,     0,     0,   235,     0,   236,   237,   238,
     239,   240,   241,   242,   851,   244,   245,   246,   247,     0,
     248,   249,   250,   251,   252,   253,     0,   254,   852,     0,
     257,   258,   259,   260,   261,   853,   854,     0,   855,     0,
     265,   856,   857,   268,   858,   270,     0,   271,   272,   273,
     274,   275,     0,     0,   276,   859,   278,   860,     0,   280,
     281,   282,     0,     0,   283,   284,   285,   286,   287,   861,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   862,   863,
     864,   310,   311,   312,     0,     0,     0,   314,   315,   865,
     317,     0,     0,   319,   866,   321,   322,   323,     0,   324,
     325,     0,     0,   326,   327,   328,     0,     0,   329,     0,
     867,   332,   868,     0,   335,   336,   337,   338,   339,   340,
     341,   342,   343,     0,     0,   344,     0,   345,   346,     0,
     869,   349,   350,     0,   352,   353,   354,     0,   355,   356,
     357,   358,   359,     0,     0,   360,     0,   361,   362,   363,
     870,   365,   366,   367,   368,     0,   369,   370,   371,     0,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
       0,   382,   383,   871,   385,   386,   387,   872,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,     0,
     400,   401,   402,   403,   404,   873,   406,   874,   408,   409,
       0,   410,   875,     0,   412,   876,   414,     0,     0,   415,
     416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   877,   428,     0,   430,     0,   431,   432,     0,   433,
     878,   435,   436,   437,   438,   439,     0,   879,   880,     0,
       0,     0,   442,   443,     0,   445,     0,     0,   447,   448,
     881,   450,   451,   452,   453,   454,   882,     0,   455,   456,
     457,   458,   459,   460,   883,     0,   462,   463,   464,   465,
     466,     0,   884,     0,   469,   885,   471,     0,   472,   473,
     474,   475,     0,     0,     0,   476,     0,     0,   477,   478,
     479,   480,   481,   482,   826,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   494,   495,   496,   497,     0,
       0,     0,   108,   109,   110,   111,     0,   112,   113,   114,
     115,     0,   116,   117,   118,     0,     0,     0,     0,     0,
       0,     0,     0,   119,   120,     0,   121,   122,   123,   827,
     125,   126,   127,     0,   828,   829,   830,   831,     0,   133,
     134,   135,   136,   137,   138,     0,     0,   139,   140,   832,
     833,   143,     0,   144,   145,   146,   147,     0,     0,   834,
       0,   835,   151,   152,   153,   154,   155,   836,   157,   158,
     159,     0,   160,   161,   162,   163,   164,     0,     0,   837,
     166,   167,   168,   838,   839,   840,   841,     0,     0,   842,
     174,   175,   176,   177,   178,   179,   180,   843,   844,   183,
       0,   184,     0,   185,   186,   187,   188,   189,   190,     0,
     191,     0,   192,   193,   194,   195,     0,     0,   196,   197,
     845,   199,   200,     0,     0,     0,   201,   202,   203,     0,
     204,   205,   206,     0,   207,   208,   209,   210,     0,   212,
     213,   214,   215,   216,     0,     0,   218,     0,   219,   220,
     846,   222,     0,   223,     0,   224,   847,     0,   848,   227,
     228,     0,   849,   231,     0,   232,     0,     0,     0,     0,
       0,     0,   235,     0,   236,   237,   238,   239,   240,   850,
     242,   851,   244,   245,   246,   247,     0,   248,   249,   250,
     251,   252,   253,     0,   254,   852,     0,   257,   258,   259,
     260,   261,   853,   854,     0,   855,     0,   265,   856,   857,
     268,   858,   270,     0,   271,   272,   273,   274,   275,     0,
       0,   276,   859,   278,   860,     0,   280,   281,   282,     0,
       0,   283,   284,   285,   286,   287,   861,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   862,   863,   864,   310,   311,
     312,     0,     0,     0,   314,   315,   865,   317,     0,     0,
     319,   866,   321,   322,   323,     0,   324,   325,     0,     0,
     326,   327,   328,     0,     0,   329,     0,   867,   332,   868,
       0,   335,   336,   337,   338,   339,   340,   341,   342,   343,
       0,     0,   344,     0,   345,   346,     0,   869,   349,   350,
       0,   352,   353,   354,     0,   355,   356,   357,   358,   359,
       0,     0,   360,     0,   361,   362,   363,   870,   365,   366,
     367,   368,     0,   369,   370,   371,     0,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,     0,   382,   383,
     871,   385,   386,   387,   872,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,     0,   400,   401,   402,
     403,   404,   873,   406,   874,   408,   409,     0,   410,   875,
       0,   412,   876,   414,     0,     0,   415,   416,   417,   418,
     419,   420,   421,   422,   423,   424,   425,   426,   877,   428,
       0,   430,     0,   431,   432,     0,   433,   878,   435,   436,
     437,   438,   439,     0,   879,   880,     0,     0,     0,   442,
     443,     0,   445,     0,     0,   447,   448,   881,   450,   451,
     452,   453,   454,   882,     0,   455,   456,   457,   458,   459,
     460,   883,     0,   462,   463,   464,   465,   466,     0,   884,
       0,   469,   885,   471,     0,   472,   473,   474,   475,     0,
       0,     0,   476,     0,     0,   477,   478,   479,   480,   481,
     482,   826,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   494,   495,   496,   497,     0,     0,     0,   108,
     109,   110,   111,     0,   112,   113,   114,   115,     0,   116,
     117,   118,     0,     0,     0,     0,     0,     0,     0,     0,
     119,   120,     0,   121,   122,   123,   827,   125,   126,   127,
       0,   828,   829,   830,   831,     0,   133,   134,   135,   136,
     137,   138,     0,     0,   139,   140,   832,   833,   143,     0,
     144,   145,   146,   147,     0,     0,   834,     0,   835,   151,
     152,   153,   154,   155,   836,   157,   158,   159,     0,   160,
     161,   162,   163,   164,     0,     0,   837,   166,   167,   168,
     838,   839,   840,   841,     0,     0,   842,   174,   175,   176,
     177,   178,   179,   180,   843,   844,   183,     0,   184,     0,
     185,   186,   187,   188,   189,   190,     0,   191,     0,   192,
     193,   194,   195,     0,     0,   196,   197,   845,   199,   200,
       0,     0,     0,   201,   202,   203,     0,   204,   205,   206,
       0,   207,   208,   209,   210,     0,   212,   213,   214,   215,
     216,     0,     0,   218,     0,   219,   220,   846,   222,     0,
     223,     0,   224,   847,     0,   848,   227,   228,     0,   849,
     231,     0,   232,     0,     0,     0,     0,     0,     0,   235,
       0,   236,   237,   238,   239,   240,   241,   242,   851,   244,
     245,   246,   247,     0,   248,   249,   250,   251,   252,   253,
       0,   254,   852,     0,   257,   258,   259,   260,   261,   853,
     854,     0,   855,     0,   265,   856,   857,   268,   858,   270,
       0,   271,   272,   273,   274,   275,     0,     0,   276,   859,
     278,   860,     0,   280,   281,   282,     0,     0,   283,   284,
     285,   286,   287,   861,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   862,   863,   864,   310,   311,   312,     0,     0,
       0,   314,   315,   865,   317,     0,     0,   319,   866,   321,
     322,   323,     0,   324,   325,     0,     0,   326,   327,   328,
       0,     0,   329,     0,   867,   332,   868,     0,   335,   336,
     337,   338,   339,   340,   341,   342,   343,     0,     0,   344,
       0,   345,   346,     0,   869,   349,   350,     0,   352,   353,
     354,     0,   355,   356,   357,   358,   359,     0,     0,   360,
       0,   361,   362,   363,   870,   365,   366,   367,   368,     0,
     369,   370,   371,     0,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,     0,   382,   383,   871,   385,   386,
     387,   872,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,     0,   400,   401,   402,   403,   404,   873,
     406,   874,   408,   409,     0,   410,   875,     0,   412,   876,
     414,     0,     0,   415,   416,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   877,   428,     0,   430,     0,
     431,   432,     0,   433,   878,   435,   436,   437,   438,   439,
       0,   879,   880,     0,     0,     0,   442,   443,     0,   445,
       0,     0,   447,   448,   881,   450,   451,   452,   453,   454,
     882,     0,   455,   456,   457,   458,   459,   460,   883,     0,
     462,   463,   464,   465,   466,     0,   884,     0,   469,   885,
     471,     0,   472,   473,   474,   475,     0,     0,     0,   476,
       0,     0,   477,   478,   479,   480,   481,   482,   826,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   494,
     495,   496,   497,     0,     0,     0,   108,   109,   110,   111,
       0,   112,   113,   114,   115,     0,   116,   117,   118,     0,
       0,     0,     0,     0,     0,     0,     0,   119,   120,     0,
     121,   122,   123,   827,   125,   126,   127,     0,   828,   829,
     830,   831,     0,   133,   134,   135,   136,   137,   138,     0,
       0,   139,   140,   832,   833,   143,     0,   144,   145,   146,
     147,     0,     0,   834,     0,   835,   151,   152,   153,   154,
     155,   836,   157,   158,   159,     0,   160,   161,   162,   163,
     164,     0,     0,   837,   166,   167,   168,   838,   839,   840,
     841,     0,     0,   842,   174,   175,   176,   177,   178,   179,
     180,   843,   844,   183,     0,   184,     0,   185,   186,   187,
     188,   189,   190,     0,   191,     0,   192,   193,   194,   195,
       0,     0,   196,   197,   845,   199,   200,     0,     0,     0,
     201,   202,   203,     0,  1851,   205,   206,     0,   207,   208,
     209,   210,     0,   212,   213,   214,   215,   216,     0,     0,
     218,     0,   219,   220,   846,   222,     0,   223,     0,   224,
     847,     0,   848,   227,   228,     0,   849,   231,     0,   232,
       0,     0,     0,     0,     0,     0,   235,     0,   236,   237,
     238,   239,   240,   241,   242,   851,   244,   245,   246,   247,
       0,   248,   249,   250,   251,   252,   253,     0,   254,   852,
       0,   257,   258,   259,   260,   261,   853,   854,     0,   855,
       0,   265,   856,   857,   268,   858,   270,     0,   271,   272,
     273,   274,   275,     0,     0,   276,   859,   278,   860,     0,
     280,   281,   282,     0,     0,   283,   284,   285,   286,   287,
     861,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   862,
     863,   864,   310,   311,   312,     0,     0,     0,   314,   315,
     865,   317,     0,     0,   319,   866,   321,   322,   323,     0,
     324,   325,     0,     0,   326,   327,   328,     0,     0,   329,
       0,   867,   332,   868,     0,   335,   336,   337,   338,   339,
     340,   341,   342,   343,     0,     0,   344,     0,   345,   346,
       0,   869,   349,   350,     0,   352,   353,   354,     0,   355,
     356,   357,   358,   359,     0,     0,   360,     0,   361,   362,
     363,   870,   365,   366,   367,   368,     0,   369,   370,   371,
       0,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,     0,   382,   383,   871,   385,   386,   387,   872,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
       0,   400,   401,   402,   403,   404,   873,   406,   874,   408,
     409,     0,   410,   875,     0,   412,   876,   414,     0,     0,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   877,   428,     0,   430,     0,   431,   432,     0,
     433,   878,   435,   436,   437,   438,   439,     0,   879,   880,
       0,     0,     0,   442,   443,     0,   445,     0,     0,   447,
     448,   881,   450,   451,   452,   453,   454,   882,     0,   455,
     456,   457,   458,   459,   460,   883,     0,   462,   463,   464,
     465,   466,     0,   884,     0,   469,   885,   471,     0,   472,
     473,   474,   475,     0,     0,     0,   476,     0,     0,   477,
     478,   479,   480,   481,   482,   505,     0,   532,     0,     0,
       0,     0,     0,     0,     0,     0,   494,   495,   496,   497,
       0,     0,     0,   108,   109,   110,   111,     0,   112,   113,
     114,   115,     0,   116,   117,   118,     3,     4,     0,     0,
       0,     0,     0,     0,   119,   120,     0,   121,   122,   123,
       0,   125,   126,   127,   128,   129,     0,   131,   132,     0,
     133,   134,   135,   136,   137,   138,     0,     0,   139,   140,
     141,   142,   143,     0,   144,   145,   146,   147,   148,     0,
       0,     0,   150,   151,   152,   153,   154,   155,     0,   157,
     158,   159,     0,   160,   161,   162,   163,   164,     0,     0,
       0,   166,   167,   168,     0,     0,     0,     0,     0,     0,
       0,   174,   175,   176,   177,   178,   179,   180,   181,   182,
     183,     0,   184,     0,   185,   186,   187,   188,   189,   190,
       0,   191,     0,   192,   193,   194,   195,     0,     0,   196,
     197,   198,   199,   200,     0,     0,     0,   201,   202,   203,
       0,   204,   205,   206,     0,   207,   208,   209,   210,   211,
     212,   213,   214,   215,   216,   217,     0,   218,     0,   219,
     220,   221,   222,     0,   223,     0,   224,     0,     0,     0,
     227,   228,   506,     0,   231,     0,   232,     0,     0,     0,
     233,   234,     0,   235,     0,   236,   237,   238,   239,   240,
     241,   242,     0,   244,   245,   246,   247,     0,   248,   249,
     250,   251,   252,   253,     0,   254,     0,   256,   257,   258,
     259,   260,   261,   262,   263,     0,   264,     0,   265,     0,
       0,   268,     0,   270,     0,   271,   272,   273,   274,   275,
       0,     0,   276,     0,   278,     0,     0,   280,   281,   282,
       0,     0,   283,   284,   285,   286,   287,   507,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,     0,   309,   310,
     311,   312,     0,   313,     0,   314,   315,     0,   317,     0,
     318,   319,   320,   321,   322,   323,     0,   324,   325,     0,
       0,   326,   327,   328,     0,     0,   329,   330,     0,   332,
       0,   334,   335,   336,   337,   338,   339,   340,   341,   342,
     343,     0,     0,   344,     0,   345,   346,   347,     0,   349,
     350,   351,   352,   353,   354,     0,   355,   356,   357,   358,
     359,     0,     0,   360,     0,   361,   362,   363,   364,   365,
     366,   367,   368,     0,   369,   370,   371,     0,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,     0,   382,
     383,     0,   385,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,     0,   400,   401,
     402,   403,   404,     0,   406,   407,   408,   409,     0,   410,
       0,     0,   412,   413,   414,     0,     0,   415,   416,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   508,
     428,   429,   430,     0,   431,   432,     0,   433,     0,   435,
     436,   437,   438,   439,     0,   440,   441,     0,     0,     0,
     442,   443,   444,   445,   446,     0,   447,   448,   449,   450,
     451,   452,   453,   454,     0,     0,   455,   456,   457,   458,
     459,   460,     0,     0,   462,   463,   464,   465,   466,   467,
     468,     0,   469,     0,   471,     0,   472,   473,   474,   475,
       0,     0,     0,   476,     0,     0,   477,   478,   479,   480,
     481,   482,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   505,     0,   532,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   108,   109,   110,   111,     0,
     112,   113,   114,   115,   533,   116,   117,   118,     0,     0,
       0,     0,     0,     0,     0,     0,   119,   120,     0,   121,
     122,   123,     0,   125,   126,   127,   128,   129,     0,   131,
     132,     0,   133,   134,   135,   136,   137,   138,     0,     0,
     139,   140,   141,   142,   143,     0,   144,   145,   146,   147,
     148,     0,     0,     0,   150,   151,   152,   153,   154,   155,
       0,   157,   158,   159,     0,   160,   161,   162,   163,   164,
       0,     0,     0,   166,   167,   168,     0,     0,     0,     0,
       0,     0,     0,   174,   175,   176,   177,   178,   179,   180,
     181,   182,   183,     0,   184,     0,   185,   186,   187,   188,
     189,   190,     0,   191,     0,   192,   193,   194,   195,     0,
       0,   196,   197,   198,   199,   200,     0,     0,     0,   201,
     202,   203,     0,   204,   205,   206,     0,   207,   208,   209,
     210,   211,   212,   213,   214,   215,   216,   217,     0,   218,
       0,   219,   220,   221,   222,     0,   223,     0,   224,     0,
       0,     0,   227,   228,   506,     0,   231,     0,   232,     0,
       0,     0,   233,   234,     0,   235,     0,   236,   237,   238,
     239,   240,   241,   242,     0,   244,   245,   246,   247,     0,
     248,   249,   250,   251,   252,   253,     0,   254,     0,   256,
     257,   258,   259,   260,   261,   262,   263,     0,   264,     0,
     265,     0,     0,   268,     0,   270,     0,   271,   272,   273,
     274,   275,     0,     0,   276,     0,   278,     0,     0,   280,
     281,   282,     0,     0,   283,   284,   285,   286,   287,   507,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,     0,
     309,   310,   311,   312,     0,   313,     0,   314,   315,     0,
     317,     0,   318,   319,   320,   321,   322,   323,     0,   324,
     325,     0,     0,   326,   327,   328,     0,     0,   329,   330,
       0,   332,     0,   334,   335,   336,   337,   338,   339,   340,
     341,   342,   343,     0,     0,   344,     0,   345,   346,   347,
       0,   349,   350,   351,   534,   353,   354,     0,   355,   356,
     357,   358,   359,     0,     0,   360,     0,   361,   362,   363,
     364,   365,   366,   367,   368,     0,   369,   370,   371,     0,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
       0,   382,   383,     0,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,     0,
     400,   401,   402,   403,   404,     0,   406,   407,   408,   409,
       0,   410,     0,     0,   412,   413,   414,     0,     0,   415,
     416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   508,   428,   429,   430,     0,   431,   432,     0,   433,
       0,   435,   436,   437,   438,   439,     0,   440,   441,     0,
       0,     0,   442,   443,   444,   445,   446,     0,   447,   448,
     449,   450,   451,   452,   453,   454,     0,     0,   455,   456,
     457,   458,   459,   460,     0,     0,   462,   463,   464,   465,
     466,   467,   468,     0,   469,     0,   471,     0,   472,   473,
     474,   475,     0,     0,     0,   476,     0,     0,   477,   478,
     479,   480,   481,   482,   483,   484,   485,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   505,
       0,   532,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   108,   109,   110,
     111,     0,   112,   113,   114,   115,     0,   116,   117,   118,
       0,     0,     0,     0,     0,     0,     0,     0,   119,   120,
       0,   121,   122,   123,     0,   125,   126,   127,   128,   129,
       0,   131,   132,     0,   133,   134,   135,   136,   137,   138,
       0,     0,   139,   140,   141,   142,   143,     0,   144,   145,
     146,   147,   148,     0,     0,     0,   150,   151,   152,   153,
     154,   155,     0,   157,   158,   159,     0,   160,   161,   162,
     163,   164,     0,     0,     0,   166,   167,   168,     0,     0,
       0,     0,     0,     0,     0,   174,   175,   176,   177,   178,
     179,   180,   181,   182,   183,     0,   184,     0,   185,   186,
     187,   188,   189,   190,     0,   191,     0,   192,   193,   194,
     195,     0,     0,   196,   197,   198,   199,   200,     0,     0,
       0,   201,   202,   203,     0,   204,   205,   206,     0,   207,
     208,   209,   210,   211,   212,   213,   214,   215,   216,   217,
       0,   218,     0,   219,   220,   221,   222,     0,   223,     0,
     224,     0,     0,     0,   227,   228,   506,     0,   231,     0,
     232,     0,     0,     0,   233,   234,     0,   235,     0,   236,
     237,   238,   239,   240,   241,   242,     0,   244,   245,   246,
     247,     0,   248,   249,   250,   251,   252,   253,     0,   254,
       0,   256,   257,   258,   259,   260,   261,   262,   263,     0,
     264,     0,   265,     0,     0,   268,     0,   270,     0,   271,
     272,   273,   274,   275,     0,     0,   276,     0,   278,     0,
       0,   280,   281,   282,     0,     0,   283,   284,   285,   286,
     287,   507,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,     0,   309,   310,   311,   312,     0,   313,     0,   314,
     315,     0,   317,     0,   318,   319,   320,   321,   322,   323,
       0,   324,   325,     0,   624,   326,   327,   328,     0,     0,
     329,   330,     0,   332,     0,   334,   335,   336,   337,   338,
     339,   340,   341,   342,   343,     0,     0,   344,     0,   345,
     346,   347,     0,   349,   350,   351,   352,   353,   354,     0,
     355,   356,   357,   358,   359,     0,     0,   360,     0,   361,
     362,   363,   364,   365,   366,   367,   368,     0,   369,   370,
     371,     0,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,     0,   382,   383,     0,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,     0,   400,   401,   402,   403,   404,     0,   406,   407,
     408,   409,     0,   410,     0,     0,   412,   413,   414,     0,
       0,   415,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   508,   428,   429,   430,     0,   431,   432,
       0,   433,     0,   435,   436,   437,   438,   439,     0,   440,
     441,     0,     0,     0,   442,   443,   444,   445,   446,     0,
     447,   448,   449,   450,   451,   452,   453,   454,     0,     0,
     455,   456,   457,   458,   459,   460,     0,     0,   462,   463,
     464,   465,   466,   467,   468,     0,   469,     0,   471,     0,
     472,   473,   474,   475,     0,     0,     0,   476,     0,     0,
     477,   478,   479,   480,   481,   482,   483,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,   505,     0,   532,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   108,
     109,   110,   111,     0,   112,   113,   114,   115,     0,   116,
     117,   118,     0,     0,     0,     0,     0,     0,     0,     0,
     119,   120,     0,   121,   122,   123,     0,   125,   126,   127,
     128,   129,     0,   131,   132,     0,   133,   134,   135,   136,
     137,   138,     0,     0,   139,   140,   141,   142,   143,     0,
     144,   145,   146,   147,   148,     0,     0,     0,   150,   151,
     152,   153,   154,   155,     0,   157,   158,   159,     0,   160,
     161,   162,   163,   164,     0,     0,     0,   166,   167,   168,
       0,     0,     0,     0,     0,     0,     0,   174,   175,   176,
     177,   178,   179,   180,   181,   182,   183,     0,   184,     0,
     185,   186,   187,   188,   189,   190,     0,   191,     0,   192,
     193,   194,   195,     0,     0,   196,   197,   198,   199,   200,
       0,     0,     0,   201,   202,   203,     0,   204,   205,   206,
       0,   207,   208,   209,   210,   211,   212,   213,   214,   215,
     216,   217,     0,   218,     0,   219,   220,   221,   222,     0,
     223,     0,   224,     0,     0,     0,   227,   228,   506,     0,
     231,     0,   232,     0,     0,     0,   233,   234,     0,   235,
       0,   236,   237,   238,   239,   240,   782,   242,     0,   244,
     245,   246,   247,     0,   248,   249,   250,   251,   252,   253,
       0,   254,     0,   256,   257,   258,   259,   260,   261,   262,
     263,     0,   264,     0,   265,     0,     0,   268,     0,   270,
       0,   271,   272,   273,   274,   275,     0,     0,   276,     0,
     278,     0,     0,   280,   281,   282,     0,     0,   283,   284,
     285,   286,   287,   507,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,     0,   309,   310,   311,   312,     0,   313,
       0,   314,   315,     0,   317,     0,   318,   319,   320,   321,
     322,   323,     0,   324,   325,     0,   624,   326,   327,   328,
       0,     0,   329,   330,     0,   332,     0,   334,   335,   336,
     337,   338,   339,   340,   341,   342,   343,     0,     0,   344,
       0,   345,   346,   347,     0,   349,   350,   351,   352,   353,
     354,     0,   355,   356,   357,   358,   359,     0,     0,   360,
       0,   361,   362,   363,   364,   365,   366,   367,   368,     0,
     369,   370,   371,     0,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,     0,   382,   383,     0,   385,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,     0,   400,   401,   402,   403,   404,     0,
     406,   407,   408,   409,     0,   410,     0,     0,   412,   413,
     414,     0,     0,   415,   416,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   508,   428,   429,   430,     0,
     431,   432,     0,   433,     0,   435,   436,   437,   438,   439,
       0,   440,   441,     0,     0,     0,   442,   443,   444,   445,
     446,     0,   447,   448,   449,   450,   451,   452,   453,   454,
       0,     0,   455,   456,   457,   458,   459,   460,     0,     0,
     462,   463,   464,   465,   466,   467,   468,     0,   469,     0,
     471,     0,   472,   473,   474,   475,     0,     0,     0,   476,
       0,     0,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   505,     0,   532,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   108,   109,   110,   111,     0,   112,   113,   114,   115,
     814,   116,   117,   118,     0,     0,     0,     0,     0,     0,
       0,     0,   119,   120,     0,   121,   122,   123,     0,   125,
     126,   127,   128,   129,     0,   131,   132,     0,   133,   134,
     135,   136,   137,   138,     0,     0,   139,   140,   141,   142,
     143,     0,   144,   145,   146,   147,   148,     0,     0,     0,
     150,   151,   152,   153,   154,   155,     0,   157,   158,   159,
       0,   160,   161,   162,   163,   164,     0,     0,     0,   166,
     167,   168,     0,     0,     0,     0,     0,     0,     0,   174,
     175,   176,   177,   178,   179,   180,   181,   182,   183,     0,
     184,     0,   185,   186,   187,   188,   189,   190,     0,   191,
       0,   192,   193,   194,   195,     0,     0,   196,   197,   198,
     199,   200,     0,     0,     0,   201,   202,   203,     0,   204,
     205,   206,     0,   207,   208,   209,   210,   211,   212,   213,
     214,   215,   216,   217,     0,   218,     0,   219,   220,   221,
     222,     0,   223,     0,   224,     0,     0,     0,   227,   228,
     506,     0,   231,     0,   232,     0,     0,     0,   233,   234,
       0,   235,     0,   236,   237,   238,   239,   240,   241,   242,
       0,   244,   245,   246,   247,     0,   248,   249,   250,   251,
     252,   253,     0,   254,     0,   256,   257,   258,   259,   260,
     261,   262,   263,     0,   264,     0,   265,     0,     0,   268,
       0,   270,     0,   271,   272,   273,   274,   275,     0,     0,
     276,     0,   278,     0,     0,   280,   281,   282,     0,     0,
     283,   284,   285,   286,   287,   507,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,     0,   309,   310,   311,   312,
       0,   313,     0,   314,   315,     0,   317,     0,   318,   319,
     320,   321,   322,   323,     0,   324,   325,     0,     0,   326,
     327,   328,     0,     0,   329,   330,     0,   332,     0,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,     0,
       0,   344,     0,   345,   346,   347,     0,   349,   350,   351,
     352,   353,   354,     0,   355,   356,   357,   358,   359,     0,
       0,   360,     0,   361,   362,   363,   364,   365,   366,   367,
     368,     0,   369,   370,   371,     0,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,     0,   382,   383,     0,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,     0,   400,   401,   402,   403,
     404,     0,   406,   407,   408,   409,     0,   410,     0,     0,
     412,   413,   414,     0,     0,   415,   416,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   508,   428,   429,
     430,     0,   431,   432,     0,   433,     0,   435,   436,   437,
     438,   439,     0,   440,   441,     0,     0,     0,   442,   443,
     444,   445,   446,     0,   447,   448,   449,   450,   451,   452,
     453,   454,     0,     0,   455,   456,   457,   458,   459,   460,
       0,     0,   462,   463,   464,   465,   466,   467,   468,     0,
     469,     0,   471,     0,   472,   473,   474,   475,     0,     0,
       0,   476,     0,     0,   477,   478,   479,   480,   481,   482,
     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   505,  1984,     0,     0,     0,
       0,  1985,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   108,   109,   110,   111,     0,   112,   113,
     114,   115,     0,   116,   117,   118,     0,     0,     0,     0,
       0,     0,     0,     0,   119,   120,     0,   121,   122,   123,
       0,   125,   126,   127,   128,   129,     0,   131,   132,     0,
     133,   134,   135,   136,   137,   138,     0,     0,   139,   140,
     141,   142,   143,     0,   144,   145,   146,   147,   148,     0,
       0,     0,   150,   151,   152,   153,   154,   155,     0,   157,
     158,   159,     0,   160,   161,   162,   163,   164,     0,     0,
       0,   166,   167,   168,     0,     0,     0,     0,     0,     0,
       0,   174,   175,   176,   177,   178,   179,   180,   181,   182,
     183,     0,   184,     0,   185,   186,   187,   188,   189,   190,
       0,   191,     0,   192,   193,   194,   195,     0,     0,   196,
     197,   198,   199,   200,     0,     0,     0,   201,   202,   203,
       0,   204,   205,   206,     0,   207,   208,   209,   210,   211,
     212,   213,   214,   215,   216,   217,     0,   218,     0,   219,
     220,   221,   222,     0,   223,     0,   224,     0,     0,     0,
     227,   228,   506,     0,   231,     0,   232,     0,     0,     0,
     233,   234,     0,   235,     0,   236,   237,   238,   239,   240,
     241,   242,     0,   244,   245,   246,   247,     0,   248,   249,
     250,   251,   252,   253,     0,   254,     0,   256,   257,   258,
     259,   260,   261,   262,   263,     0,   264,     0,   265,     0,
       0,   268,     0,   270,     0,   271,   272,   273,   274,   275,
       0,     0,   276,     0,   278,     0,     0,   280,   281,   282,
       0,     0,   283,   284,   285,   286,   287,   507,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,     0,   309,   310,
     311,   312,     0,   313,     0,   314,   315,     0,   317,     0,
     318,   319,   320,   321,   322,   323,     0,   324,   325,     0,
       0,   326,   327,   328,     0,     0,   329,   330,     0,   332,
       0,   334,   335,   336,   337,   338,   339,   340,   341,   342,
     343,     0,     0,   344,     0,   345,   346,   347,     0,   349,
     350,   351,   352,   353,   354,     0,   355,   356,   357,   358,
     359,     0,     0,   360,     0,   361,   362,   363,   364,   365,
     366,   367,   368,     0,   369,   370,   371,     0,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,     0,   382,
     383,     0,   385,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,     0,   400,   401,
     402,   403,   404,     0,   406,   407,   408,   409,     0,   410,
       0,     0,   412,   413,   414,     0,     0,   415,   416,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   508,
     428,   429,   430,     0,   431,   432,     0,   433,     0,   435,
     436,   437,   438,   439,     0,   440,   441,     0,     0,     0,
     442,   443,   444,   445,   446,     0,   447,   448,   449,   450,
     451,   452,   453,   454,     0,     0,   455,   456,   457,   458,
     459,   460,     0,     0,   462,   463,   464,   465,   466,   467,
     468,     0,   469,     0,   471,     0,   472,   473,   474,   475,
       0,     0,     0,   476,     0,     0,   477,   478,   479,   480,
     481,   482,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   505,     0,   532,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   108,   109,   110,   111,     0,
     112,   113,   114,   115,     0,   116,   117,   118,     0,     0,
       0,     0,     0,     0,     0,     0,   119,   120,     0,   121,
     122,   123,     0,   125,   126,   127,   128,   129,     0,   131,
     132,     0,   133,   134,   135,   136,   137,   138,     0,     0,
     139,   140,   141,   142,   143,     0,   144,   145,   146,   147,
     148,     0,     0,     0,   150,   151,   152,   153,   154,   155,
       0,   157,   158,   159,     0,   160,   161,   162,   163,   164,
       0,     0,     0,   166,   167,   168,     0,     0,     0,     0,
       0,     0,     0,   174,   175,   176,   177,   178,   179,   180,
     181,   182,   183,     0,   184,     0,   185,   186,   187,   188,
     189,   190,     0,   191,     0,   192,   193,   194,   195,     0,
       0,   196,   197,   198,   199,   200,     0,     0,     0,   201,
     202,   203,     0,   204,   205,   206,     0,   207,   208,   209,
     210,   211,   212,   213,   214,   215,   216,   217,     0,   218,
       0,   219,   220,   221,   222,     0,   223,     0,   224,     0,
       0,     0,   227,   228,   506,     0,  1993,     0,   232,     0,
       0,     0,   233,   234,     0,   235,     0,   236,   237,   238,
     239,   240,   241,   242,     0,   244,   245,   246,   247,     0,
     248,   249,   250,   251,   252,   253,     0,   254,     0,   256,
     257,   258,   259,   260,   261,   262,   263,     0,   264,     0,
     265,     0,     0,   268,     0,   270,     0,   271,   272,   273,
     274,   275,     0,     0,   276,     0,   278,     0,     0,   280,
     281,  1994,     0,     0,   283,   284,   285,   286,   287,   507,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,     0,
     309,   310,   311,   312,     0,   313,     0,   314,   315,     0,
     317,     0,   318,   319,   320,   321,   322,   323,     0,   324,
     325,     0,     0,   326,   327,   328,     0,     0,   329,   330,
       0,   332,     0,   334,   335,   336,   337,   338,   339,   340,
     341,   342,   343,     0,     0,   344,     0,   345,   346,   347,
       0,   349,   350,   351,   352,   353,   354,     0,   355,   356,
     357,   358,   359,     0,     0,   360,     0,   361,   362,   363,
     364,   365,   366,   367,   368,     0,   369,   370,   371,     0,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
       0,   382,   383,     0,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,     0,
     400,   401,   402,   403,   404,     0,   406,   407,   408,   409,
       0,   410,     0,     0,   412,   413,   414,     0,     0,   415,
     416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   508,   428,   429,   430,     0,   431,   432,  1995,   433,
       0,   435,  1996,   437,  1997,   439,     0,   440,   441,     0,
       0,     0,   442,   443,   444,   445,   446,     0,   447,   448,
     449,   450,   451,   452,   453,   454,     0,     0,   455,   456,
    1998,   458,   459,   460,     0,     0,   462,   463,   464,   465,
     466,   467,   468,     0,   469,     0,   471,     0,   472,   473,
     474,   475,     0,     0,     0,   476,     0,     0,   477,   478,
     479,   480,   481,   482,   483,   484,   485,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   505,
       0,   532,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   108,   109,   110,
     111,     0,   112,   113,   114,   115,     0,   116,   117,   118,
       0,     0,     0,     0,     0,     0,     0,     0,   119,   120,
       0,   121,   122,   123,     0,   125,   126,   127,   128,   129,
       0,   131,   132,     0,   133,   134,   135,   136,   137,   138,
       0,     0,   139,   140,   141,   142,   143,     0,   144,   145,
     146,   147,   148,     0,     0,     0,   150,   151,   152,   153,
     154,   155,     0,   157,   158,   159,     0,   160,   161,   162,
     163,   164,     0,     0,     0,   166,   167,   168,     0,     0,
       0,     0,     0,     0,     0,   174,   175,   176,   177,   178,
     179,   180,   181,   182,   183,     0,   184,     0,   185,   186,
     187,   188,   189,   190,     0,   191,     0,   192,   193,   194,
     195,     0,     0,   196,   197,   198,   199,   200,     0,     0,
       0,   201,   202,   203,     0,   204,   205,   206,     0,   207,
     208,   209,   210,   211,   212,   213,   214,   215,   216,   217,
       0,   218,     0,   219,   220,   221,   222,     0,   223,     0,
     224,     0,     0,     0,   227,   228,   506,     0,   231,     0,
     232,     0,     0,     0,   233,   234,     0,   235,     0,   236,
     237,   238,   239,   240,   241,   242,     0,   244,   245,   246,
     247,     0,   248,   249,   250,   251,   252,   253,     0,   254,
       0,   256,   257,   258,   259,   260,   261,   262,   263,     0,
     264,     0,   265,     0,     0,   268,     0,   270,     0,   271,
     272,   273,   274,   275,     0,     0,   276,     0,   278,     0,
       0,   280,   281,   282,     0,     0,   283,   284,   285,   286,
     287,   507,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,     0,   309,   310,   311,   312,     0,   313,     0,   314,
     315,     0,   317,     0,   318,   319,   320,   321,   322,   323,
       0,   324,   325,     0,     0,   326,   327,   328,     0,     0,
     329,   330,     0,   332,     0,   334,   335,   336,   337,   338,
     339,   340,   341,   342,   343,     0,     0,   344,     0,   345,
     346,   347,     0,   349,   350,   351,   352,   353,   354,     0,
     355,   356,   357,   358,   359,     0,     0,   360,     0,   361,
     362,   363,   364,   365,   366,   367,   368,     0,   369,   370,
     371,     0,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,     0,   382,   383,     0,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,     0,   400,   401,   402,   403,   404,     0,   406,   407,
     408,   409,     0,   410,     0,     0,   412,   413,   414,     0,
       0,   415,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   508,   428,   429,   430,     0,   431,   432,
       0,   433,     0,   435,   436,   437,   438,   439,     0,   440,
     441,     0,     0,     0,   442,   443,   444,   445,   446,     0,
     447,   448,   449,   450,   451,   452,   453,   454,     0,     0,
     455,   456,   457,   458,   459,   460,     0,     0,   462,   463,
     464,   465,   466,   467,   468,     0,   469,     0,   471,     0,
     472,   473,   474,   475,     0,     0,     0,   476,     0,     0,
     477,   478,   479,   480,   481,   482,   483,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,   505,     0,   516,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   108,
     109,   110,   111,     0,   112,   113,   114,   115,     0,   116,
     117,   118,     0,     0,     0,     0,     0,     0,     0,     0,
     119,   120,     0,   121,   122,   123,     0,   125,   126,   127,
     128,   129,     0,   131,   132,     0,   133,   134,   135,   136,
     137,   138,     0,     0,   139,   140,   141,   142,   143,     0,
     144,   145,   146,   147,   148,     0,     0,     0,   150,   151,
     152,   153,   154,   155,     0,   157,   158,   159,     0,   160,
     161,   162,   163,   164,     0,     0,     0,   166,   167,   168,
       0,     0,     0,     0,     0,     0,     0,   174,   175,   176,
     177,   178,   179,   180,   181,   182,   183,     0,   184,     0,
     185,   186,   187,   188,   189,   190,     0,   191,     0,   192,
     193,   194,   195,     0,     0,   196,   197,   198,   199,   200,
       0,     0,     0,   201,   202,   203,     0,   204,   205,   206,
       0,   207,   208,   209,   210,   211,   212,   213,   214,   215,
     216,   217,     0,   218,     0,   219,   220,   221,   222,     0,
     223,     0,   224,     0,     0,     0,   227,   228,   506,     0,
     231,     0,   232,     0,     0,     0,   233,   234,     0,   235,
       0,   236,   237,   238,   239,   240,   241,   242,     0,   244,
     245,   246,   247,     0,   248,   249,   250,   251,   252,   253,
       0,   254,     0,   256,   257,   258,   259,   260,   261,   262,
     263,     0,   264,     0,   265,     0,     0,   268,     0,   270,
       0,   271,   272,   273,   274,   275,     0,     0,   276,     0,
     278,     0,     0,   280,   281,   282,     0,     0,   283,   284,
     285,   286,   287,   507,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,     0,   309,   310,   311,   312,     0,   313,
       0,   314,   315,     0,   317,     0,   318,   319,   320,   321,
     322,   323,     0,   324,   325,     0,     0,   326,   327,   328,
       0,     0,   329,   330,     0,   332,     0,   334,   335,   336,
     337,   338,   339,   340,   341,   342,   343,     0,     0,   344,
       0,   345,   346,   347,     0,   349,   350,   351,   352,   353,
     354,     0,   355,   356,   357,   358,   359,     0,     0,   360,
       0,   361,   362,   363,   364,   365,   366,   367,   368,     0,
     369,   370,   371,     0,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,     0,   382,   383,     0,   385,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,     0,   400,   401,   402,   403,   404,     0,
     406,   407,   408,   409,     0,   410,     0,     0,   412,   413,
     414,     0,     0,   415,   416,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   508,   428,   429,   430,     0,
     431,   432,     0,   433,     0,   435,   436,   437,   438,   439,
       0,   440,   441,     0,     0,     0,   442,   443,   444,   445,
     446,     0,   447,   448,   449,   450,   451,   452,   453,   454,
       0,     0,   455,   456,   457,   458,   459,   460,     0,     0,
     462,   463,   464,   465,   466,   467,   468,     0,   469,     0,
     471,     0,   472,   473,   474,   475,     0,     0,     0,   476,
       0,     0,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   505,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   108,   109,   110,   111,     0,   112,   113,   114,   115,
     656,   116,   117,   118,     0,     0,     0,     0,     0,     0,
       0,     0,   119,   120,     0,   121,   122,   123,     0,   125,
     126,   127,   128,   129,     0,   131,   132,     0,   133,   134,
     135,   136,   137,   138,     0,     0,   139,   140,   141,   142,
     143,     0,   144,   145,   146,   147,   148,     0,     0,     0,
     150,   151,   152,   153,   154,   155,     0,   157,   158,   159,
       0,   160,   161,   162,   163,   164,     0,     0,     0,   166,
     167,   168,     0,     0,     0,     0,     0,     0,     0,   174,
     175,   176,   177,   178,   179,   180,   181,   182,   183,     0,
     184,     0,   185,   186,   187,   188,   189,   190,     0,   191,
       0,   192,   193,   194,   195,     0,     0,   196,   197,   198,
     199,   200,     0,     0,     0,   201,   202,   203,     0,   204,
     205,   206,     0,   207,   208,   209,   210,   211,   212,   213,
     214,   215,   216,   217,     0,   218,     0,   219,   220,   221,
     222,     0,   223,     0,   224,     0,     0,     0,   227,   228,
     506,     0,   231,     0,   232,     0,     0,     0,   233,   234,
       0,   235,     0,   236,   237,   238,   239,   240,   241,   242,
       0,   244,   245,   246,   247,     0,   248,   249,   250,   251,
     252,   253,     0,   254,     0,   256,   257,   258,   259,   260,
     261,   262,   263,     0,   264,     0,   265,     0,     0,   268,
       0,   270,     0,   271,   272,   273,   274,   275,     0,     0,
     276,     0,   278,     0,     0,   280,   281,   282,     0,     0,
     283,   284,   285,   286,   287,   507,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,     0,   309,   310,   311,   312,
       0,   313,     0,   314,   315,     0,   317,     0,   318,   319,
     320,   321,   322,   323,     0,   324,   325,     0,     0,   326,
     327,   328,     0,     0,   329,   330,     0,   332,     0,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,     0,
       0,   344,     0,   345,   346,   347,     0,   349,   350,   351,
     352,   353,   354,     0,   355,   356,   357,   358,   359,     0,
       0,   360,     0,   361,   362,   363,   364,   365,   366,   367,
     368,     0,   369,   370,   371,     0,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,     0,   382,   383,     0,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,     0,   400,   401,   402,   403,
     404,     0,   406,   407,   408,   409,     0,   410,     0,     0,
     412,   413,   414,     0,     0,   415,   416,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   508,   428,   429,
     430,     0,   431,   432,     0,   433,     0,   435,   436,   437,
     438,   439,     0,   657,   441,     0,     0,     0,   658,   443,
     444,   445,   446,     0,   447,   448,   449,   450,   451,   452,
     453,   454,     0,     0,   455,   456,   457,   458,   459,   460,
       0,     0,   462,   463,   464,   465,   466,   467,   468,     0,
     469,     0,   471,     0,   472,   473,   474,   475,     0,     0,
       0,   476,     0,     0,   477,   478,   479,   480,   481,   482,
     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   505,     0,   532,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   108,   109,   110,   111,     0,   112,   113,
     114,   115,     0,   116,   117,   118,     0,     0,     0,     0,
       0,     0,     0,     0,   119,   120,     0,   121,   122,   123,
       0,   125,   126,   127,   128,   129,     0,   131,   132,     0,
     133,   134,   135,   136,   137,   138,     0,     0,   139,   140,
     141,   142,   143,     0,   144,   145,   146,   147,   148,     0,
       0,     0,   150,   151,   152,   153,   154,   155,     0,   157,
     158,   159,     0,   160,   161,   162,   163,   164,     0,     0,
       0,   166,   167,   168,     0,     0,     0,     0,     0,     0,
       0,   174,   175,   176,   177,   178,   179,   180,   181,   182,
     183,     0,   184,     0,   185,   186,   187,   188,   189,   190,
       0,   191,     0,   192,   193,   194,   195,     0,     0,   196,
     197,   198,   199,   200,     0,     0,     0,   201,   202,   203,
       0,   204,   205,   206,     0,   207,   208,   209,   210,   211,
     212,   213,   214,   215,   216,   217,     0,   218,     0,   219,
     220,   221,   222,     0,   223,     0,   224,     0,     0,     0,
     227,   228,   506,     0,   231,     0,   232,     0,     0,     0,
     233,   234,     0,   235,     0,   236,   237,   238,   239,   240,
     241,   242,     0,   244,   245,   246,   247,     0,   248,   249,
     250,   251,   252,   253,     0,   254,     0,   256,   257,   258,
     259,   260,   261,   262,   263,     0,   264,     0,   265,     0,
       0,   268,     0,   270,     0,   271,   272,   273,   274,   275,
       0,     0,   276,     0,   278,     0,     0,   280,   281,   282,
       0,     0,   283,   284,   285,   286,   287,   507,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,     0,   309,   310,
     311,   312,     0,   313,     0,   314,   315,     0,   317,     0,
     318,   319,   320,   321,   322,   323,     0,   324,   325,     0,
       0,   326,   327,   328,     0,     0,   329,   330,     0,   332,
       0,   334,   335,   336,   337,   338,   339,   340,   341,   342,
     343,     0,     0,   344,     0,   345,   346,   347,     0,   349,
     350,   351,   352,   353,   354,     0,   355,   356,   357,   358,
     359,     0,     0,   360,     0,   361,   362,   363,   364,   365,
     366,   691,   368,     0,   369,   370,   371,     0,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,     0,   382,
     383,     0,   385,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,     0,   400,   401,
     402,   403,   404,     0,   406,   407,   408,   409,     0,   410,
       0,     0,   412,   413,   414,     0,     0,   415,   416,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   508,
     428,   429,   430,     0,   431,   432,     0,   433,     0,   435,
     436,   437,   438,   439,     0,   440,   441,     0,     0,     0,
     442,   443,   444,   445,   446,     0,   447,   448,   449,   450,
     451,   452,   453,   454,     0,     0,   455,   456,   457,   458,
     459,   460,     0,     0,   462,   463,   464,   465,   466,   467,
     468,     0,   469,     0,   471,     0,   472,   473,   474,   475,
       0,     0,     0,   476,     0,     0,   477,   478,   479,   480,
     481,   482,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   505,     0,   532,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   108,   109,   110,   111,     0,
     112,   113,   114,   115,     0,   116,   117,   118,     0,     0,
       0,     0,     0,     0,     0,     0,   119,   120,     0,   121,
     122,   123,     0,   125,   126,   127,   128,   129,     0,   131,
     132,     0,   133,   134,   135,   136,   137,   138,     0,     0,
     139,   140,   141,   142,   143,     0,   144,   145,   146,   147,
     148,     0,     0,     0,   150,   151,   152,   153,   154,   155,
       0,   157,   158,   159,     0,   160,   161,   162,   163,   164,
       0,     0,     0,   166,   167,   168,     0,     0,     0,     0,
       0,     0,     0,   174,   175,   176,   177,   178,   179,   180,
     181,   182,   183,     0,   184,     0,   185,   186,   187,   188,
     189,   190,     0,   191,     0,   192,   193,   194,   195,     0,
       0,   196,   197,   198,   199,   200,     0,     0,     0,   201,
     202,   203,     0,   204,   205,   206,     0,   207,   208,   209,
     210,   211,   212,   213,   214,   215,   216,   217,     0,   218,
       0,   219,   220,   221,   222,     0,   223,     0,   224,     0,
       0,     0,   227,   228,   506,     0,   231,     0,   232,     0,
       0,     0,   233,   234,     0,   235,     0,   236,   237,   238,
     239,   240,   777,   242,     0,   244,   245,   246,   247,     0,
     248,   249,   250,   251,   252,   253,     0,   254,     0,   256,
     257,   258,   259,   260,   261,   262,   263,     0,   264,     0,
     265,     0,     0,   268,     0,   270,     0,   271,   272,   273,
     274,   275,     0,     0,   276,     0,   278,     0,     0,   280,
     281,   282,     0,     0,   283,   284,   285,   286,   287,   507,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,     0,
     309,   310,   311,   312,     0,   313,     0,   314,   315,     0,
     317,     0,   318,   319,   320,   321,   322,   323,     0,   324,
     325,     0,     0,   326,   327,   328,     0,     0,   329,   330,
       0,   332,     0,   334,   335,   336,   337,   338,   339,   340,
     341,   342,   343,     0,     0,   344,     0,   345,   346,   347,
       0,   349,   350,   351,   352,   353,   354,     0,   355,   356,
     357,   358,   359,     0,     0,   360,     0,   361,   362,   363,
     364,   365,   366,   367,   368,     0,   369,   370,   371,     0,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
       0,   382,   383,     0,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,     0,
     400,   401,   402,   403,   404,     0,   406,   407,   408,   409,
       0,   410,     0,     0,   412,   413,   414,     0,     0,   415,
     416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   508,   428,   429,   430,     0,   431,   432,     0,   433,
       0,   435,   436,   437,   438,   439,     0,   440,   441,     0,
       0,     0,   442,   443,   444,   445,   446,     0,   447,   448,
     449,   450,   451,   452,   453,   454,     0,     0,   455,   456,
     457,   458,   459,   460,     0,     0,   462,   463,   464,   465,
     466,   467,   468,     0,   469,     0,   471,     0,   472,   473,
     474,   475,     0,     0,     0,   476,     0,     0,   477,   478,
     479,   480,   481,   482,   483,   484,   485,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   505,
       0,   532,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   108,   109,   110,
     111,     0,   112,   113,   114,   115,     0,   116,   117,   118,
       0,     0,     0,     0,     0,     0,     0,     0,   119,   120,
       0,   121,   122,   123,     0,   125,   126,   127,   128,   129,
       0,   131,   132,     0,   133,   134,   135,   136,   137,   138,
       0,     0,   139,   140,   141,   142,   143,     0,   144,   145,
     146,   147,   148,     0,     0,     0,   150,   151,   152,   153,
     154,   155,     0,   157,   158,   159,     0,   160,   161,   162,
     163,   164,     0,     0,     0,   166,   167,   168,     0,     0,
       0,     0,     0,     0,     0,   174,   175,   176,   177,   178,
     179,   180,   181,   182,   183,     0,   184,     0,   185,   186,
     187,   188,   189,   190,     0,   191,     0,   192,   193,   194,
     195,     0,     0,   196,   197,   198,   199,   200,     0,     0,
       0,   201,   202,   203,     0,   204,   205,   206,     0,   207,
     208,   209,   210,   211,   212,   213,   214,   215,   216,   217,
       0,   218,     0,   219,   220,   221,   222,     0,   223,     0,
     224,     0,     0,     0,   227,   228,   506,     0,   231,     0,
     232,     0,     0,     0,   233,   234,     0,   235,     0,   236,
     237,   238,   239,   240,   780,   242,     0,   244,   245,   246,
     247,     0,   248,   249,   250,   251,   252,   253,     0,   254,
       0,   256,   257,   258,   259,   260,   261,   262,   263,     0,
     264,     0,   265,     0,     0,   268,     0,   270,     0,   271,
     272,   273,   274,   275,     0,     0,   276,     0,   278,     0,
       0,   280,   281,   282,     0,     0,   283,   284,   285,   286,
     287,   507,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,     0,   309,   310,   311,   312,     0,   313,     0,   314,
     315,     0,   317,     0,   318,   319,   320,   321,   322,   323,
       0,   324,   325,     0,     0,   326,   327,   328,     0,     0,
     329,   330,     0,   332,     0,   334,   335,   336,   337,   338,
     339,   340,   341,   342,   343,     0,     0,   344,     0,   345,
     346,   347,     0,   349,   350,   351,   352,   353,   354,     0,
     355,   356,   357,   358,   359,     0,     0,   360,     0,   361,
     362,   363,   364,   365,   366,   367,   368,     0,   369,   370,
     371,     0,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,     0,   382,   383,     0,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,     0,   400,   401,   402,   403,   404,     0,   406,   407,
     408,   409,     0,   410,     0,     0,   412,   413,   414,     0,
       0,   415,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   508,   428,   429,   430,     0,   431,   432,
       0,   433,     0,   435,   436,   437,   438,   439,     0,   440,
     441,     0,     0,     0,   442,   443,   444,   445,   446,     0,
     447,   448,   449,   450,   451,   452,   453,   454,     0,     0,
     455,   456,   457,   458,   459,   460,     0,     0,   462,   463,
     464,   465,   466,   467,   468,     0,   469,     0,   471,     0,
     472,   473,   474,   475,     0,     0,     0,   476,     0,     0,
     477,   478,   479,   480,   481,   482,   483,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,   505,     0,   532,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   108,
     109,   110,   111,     0,   112,   113,   114,   115,     0,   116,
     117,   118,     0,     0,     0,     0,     0,     0,     0,     0,
     119,   120,     0,   121,   122,   123,     0,   125,   126,   127,
     128,   129,     0,   131,   132,     0,   133,   134,   135,   136,
     137,   138,     0,     0,   139,   140,   141,   142,   143,     0,
     144,   145,   146,   147,   148,     0,     0,     0,   150,   151,
     152,   153,   154,   155,     0,   157,   158,   159,     0,   160,
     161,   162,   163,   164,     0,     0,     0,   166,   167,   168,
       0,     0,     0,     0,     0,     0,     0,   174,   175,   176,
     177,   178,   179,   180,   181,   182,   183,     0,   184,     0,
     185,   186,   187,   188,   189,   190,     0,   191,     0,   192,
     193,   194,   195,     0,     0,   196,   197,   198,   199,   200,
       0,     0,     0,   201,   202,   203,     0,   204,   205,   206,
       0,   207,   208,   209,   210,   211,   212,   213,   214,   215,
     216,   217,     0,   218,     0,   219,   220,   221,   222,     0,
     223,     0,   224,     0,     0,     0,   227,   228,   506,     0,
     231,     0,   232,     0,     0,     0,   233,   234,     0,   235,
       0,   236,   237,   238,   239,   240,   784,   242,     0,   244,
     245,   246,   247,     0,   248,   249,   250,   251,   252,   253,
       0,   254,     0,   256,   257,   258,   259,   260,   261,   262,
     263,     0,   264,     0,   265,     0,     0,   268,     0,   270,
       0,   271,   272,   273,   274,   275,     0,     0,   276,     0,
     278,     0,     0,   280,   281,   282,     0,     0,   283,   284,
     285,   286,   287,   507,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,     0,   309,   310,   311,   312,     0,   313,
       0,   314,   315,     0,   317,     0,   318,   319,   320,   321,
     322,   323,     0,   324,   325,     0,     0,   326,   327,   328,
       0,     0,   329,   330,     0,   332,     0,   334,   335,   336,
     337,   338,   339,   340,   341,   342,   343,     0,     0,   344,
       0,   345,   346,   347,     0,   349,   350,   351,   352,   353,
     354,     0,   355,   356,   357,   358,   359,     0,     0,   360,
       0,   361,   362,   363,   364,   365,   366,   367,   368,     0,
     369,   370,   371,     0,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,     0,   382,   383,     0,   385,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,     0,   400,   401,   402,   403,   404,     0,
     406,   407,   408,   409,     0,   410,     0,     0,   412,   413,
     414,     0,     0,   415,   416,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   508,   428,   429,   430,     0,
     431,   432,     0,   433,     0,   435,   436,   437,   438,   439,
       0,   440,   441,     0,     0,     0,   442,   443,   444,   445,
     446,     0,   447,   448,   449,   450,   451,   452,   453,   454,
       0,     0,   455,   456,   457,   458,   459,   460,     0,     0,
     462,   463,   464,   465,   466,   467,   468,     0,   469,     0,
     471,     0,   472,   473,   474,   475,     0,     0,     0,   476,
       0,     0,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   505,     0,   532,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   108,   109,   110,   111,     0,   112,   113,   114,   115,
       0,   116,   117,   118,     0,     0,     0,     0,     0,     0,
       0,     0,   119,   120,     0,   121,   122,   123,     0,   125,
     126,   127,   128,   129,     0,   131,   132,     0,   133,   134,
     135,   136,   137,   138,     0,     0,   139,   140,   141,   142,
     143,     0,   144,   145,   146,   147,   148,     0,     0,     0,
     150,   151,   152,   153,   154,   155,     0,   157,   158,   159,
       0,   160,   161,   162,   163,   164,     0,     0,     0,   166,
     167,   168,     0,     0,     0,     0,     0,     0,     0,   174,
     175,   176,   177,   178,   179,   180,   181,   182,   183,     0,
     184,     0,   185,   186,   187,   188,   189,   190,     0,   191,
       0,   192,   193,   194,   195,     0,     0,   196,   197,   198,
     199,   200,     0,     0,     0,   201,   202,   203,     0,   204,
     205,   206,     0,   207,   208,   209,   210,   211,   212,   213,
     214,   215,   216,   217,     0,   218,     0,   219,   220,   221,
     222,     0,   223,     0,   224,     0,     0,     0,   227,   228,
     506,     0,   231,     0,   232,     0,     0,     0,   233,   234,
       0,   235,     0,   236,   237,   238,   239,   240,   794,   242,
       0,   244,   245,   246,   247,     0,   248,   249,   250,   251,
     252,   253,     0,   254,     0,   256,   257,   258,   259,   260,
     261,   262,   263,     0,   264,     0,   265,     0,     0,   268,
       0,   270,     0,   271,   272,   273,   274,   275,     0,     0,
     276,     0,   278,     0,     0,   280,   281,   282,     0,     0,
     283,   284,   285,   286,   287,   507,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,     0,   309,   310,   311,   312,
       0,   313,     0,   314,   315,     0,   317,     0,   318,   319,
     320,   321,   322,   323,     0,   324,   325,     0,     0,   326,
     327,   328,     0,     0,   329,   330,     0,   332,     0,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,     0,
       0,   344,     0,   345,   346,   347,     0,   349,   350,   351,
     352,   353,   354,     0,   355,   356,   357,   358,   359,     0,
       0,   360,     0,   361,   362,   363,   364,   365,   366,   367,
     368,     0,   369,   370,   371,     0,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,     0,   382,   383,     0,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,     0,   400,   401,   402,   403,
     404,     0,   406,   407,   408,   409,     0,   410,     0,     0,
     412,   413,   414,     0,     0,   415,   416,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   508,   428,   429,
     430,     0,   431,   432,     0,   433,     0,   435,   436,   437,
     438,   439,     0,   440,   441,     0,     0,     0,   442,   443,
     444,   445,   446,     0,   447,   448,   449,   450,   451,   452,
     453,   454,     0,     0,   455,   456,   457,   458,   459,   460,
       0,     0,   462,   463,   464,   465,   466,   467,   468,     0,
     469,     0,   471,     0,   472,   473,   474,   475,     0,     0,
       0,   476,     0,     0,   477,   478,   479,   480,   481,   482,
     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   505,     0,   532,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   108,   109,   110,   111,     0,   112,   113,
     114,   115,     0,   116,   117,   118,     0,     0,     0,     0,
       0,     0,     0,     0,   119,   120,     0,   121,   122,   123,
       0,   125,   126,   127,   128,   129,     0,   131,   132,     0,
     133,   134,   135,   136,   137,   138,     0,     0,   139,   140,
     141,   142,   143,     0,   144,   145,   146,   147,   148,     0,
       0,     0,   150,   151,   152,   153,   154,   155,     0,   157,
     158,   159,     0,   160,   161,   162,   163,   164,     0,     0,
       0,   166,   167,   168,     0,     0,     0,     0,     0,     0,
       0,   174,   175,   176,   177,   178,   179,   180,   181,   182,
     183,     0,   184,     0,   185,   186,   187,   188,   189,   190,
       0,   191,     0,   192,   193,   194,   195,     0,     0,   196,
     197,   198,   199,   200,     0,     0,     0,   201,   202,   203,
       0,   204,   205,   206,     0,   207,   208,   209,   210,   211,
     212,   213,   214,   215,   216,   217,     0,   218,     0,   219,
     220,   221,   222,     0,   223,     0,   224,     0,     0,     0,
     227,   228,   506,     0,   231,     0,   232,     0,     0,     0,
     233,   234,     0,   235,     0,   236,   237,   238,   239,   240,
     802,   242,     0,   244,   245,   246,   247,     0,   248,   249,
     250,   251,   252,   253,     0,   254,     0,   256,   257,   258,
     259,   260,   261,   262,   263,     0,   264,     0,   265,     0,
       0,   268,     0,   270,     0,   271,   272,   273,   274,   275,
       0,     0,   276,     0,   278,     0,     0,   280,   281,   282,
       0,     0,   283,   284,   285,   286,   287,   507,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,     0,   309,   310,
     311,   312,     0,   313,     0,   314,   315,     0,   317,     0,
     318,   319,   320,   321,   322,   323,     0,   324,   325,     0,
       0,   326,   327,   328,     0,     0,   329,   330,     0,   332,
       0,   334,   335,   336,   337,   338,   339,   340,   341,   342,
     343,     0,     0,   344,     0,   345,   346,   347,     0,   349,
     350,   351,   352,   353,   354,     0,   355,   356,   357,   358,
     359,     0,     0,   360,     0,   361,   362,   363,   364,   365,
     366,   367,   368,     0,   369,   370,   371,     0,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,     0,   382,
     383,     0,   385,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,     0,   400,   401,
     402,   403,   404,     0,   406,   407,   408,   409,     0,   410,
       0,     0,   412,   413,   414,     0,     0,   415,   416,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   508,
     428,   429,   430,     0,   431,   432,     0,   433,     0,   435,
     436,   437,   438,   439,     0,   440,   441,     0,     0,     0,
     442,   443,   444,   445,   446,     0,   447,   448,   449,   450,
     451,   452,   453,   454,     0,     0,   455,   456,   457,   458,
     459,   460,     0,     0,   462,   463,   464,   465,   466,   467,
     468,     0,   469,     0,   471,     0,   472,   473,   474,   475,
       0,     0,     0,   476,     0,     0,   477,   478,   479,   480,
     481,   482,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   505,     0,   532,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   108,   109,   110,   111,     0,
     112,   113,   114,   115,     0,   116,   117,   118,     0,     0,
       0,     0,     0,     0,     0,     0,   119,   120,     0,   121,
     122,   123,     0,   125,   126,   127,   128,   129,     0,   131,
     132,     0,   133,   134,   135,   136,   137,   138,     0,     0,
     139,   140,   141,   142,   143,     0,   144,   145,   146,   147,
     148,     0,     0,     0,   150,   151,   152,   153,   154,   155,
       0,   157,   158,   159,     0,   160,   161,   162,   163,   164,
       0,     0,     0,   166,   167,   168,     0,     0,     0,     0,
       0,     0,     0,   174,   175,   176,   177,   178,   179,   180,
     181,   182,   183,     0,   184,     0,   185,   186,   187,   188,
     189,   190,     0,   191,     0,   192,   193,   194,   195,     0,
       0,   196,   197,   198,   199,   200,     0,     0,     0,   201,
     202,   203,     0,   204,   205,   206,     0,   207,   208,   209,
     210,   211,   212,   213,   214,   215,   216,   217,     0,   218,
       0,   219,   220,   221,   222,     0,   223,     0,   224,     0,
       0,     0,   227,   228,   506,     0,   231,     0,   232,     0,
       0,     0,   233,   234,     0,   235,     0,   236,   237,   238,
     239,   240,   908,   242,     0,   244,   245,   246,   247,     0,
     248,   249,   250,   251,   252,   253,     0,   254,     0,   256,
     257,   258,   259,   260,   261,   262,   263,     0,   264,     0,
     265,     0,     0,   268,     0,   270,     0,   271,   272,   273,
     274,   275,     0,     0,   276,     0,   278,     0,     0,   280,
     281,   282,     0,     0,   283,   284,   285,   286,   287,   507,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,     0,
     309,   310,   311,   312,     0,   313,     0,   314,   315,     0,
     317,     0,   318,   319,   320,   321,   322,   323,     0,   324,
     325,     0,     0,   326,   327,   328,     0,     0,   329,   330,
       0,   332,     0,   334,   335,   336,   337,   338,   339,   340,
     341,   342,   343,     0,     0,   344,     0,   345,   346,   347,
       0,   349,   350,   351,   352,   353,   354,     0,   355,   356,
     357,   358,   359,     0,     0,   360,     0,   361,   362,   363,
     364,   365,   366,   367,   368,     0,   369,   370,   371,     0,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
       0,   382,   383,     0,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,     0,
     400,   401,   402,   403,   404,     0,   406,   407,   408,   409,
       0,   410,     0,     0,   412,   413,   414,     0,     0,   415,
     416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   508,   428,   429,   430,     0,   431,   432,     0,   433,
       0,   435,   436,   437,   438,   439,     0,   440,   441,     0,
       0,     0,   442,   443,   444,   445,   446,     0,   447,   448,
     449,   450,   451,   452,   453,   454,     0,     0,   455,   456,
     457,   458,   459,   460,     0,     0,   462,   463,   464,   465,
     466,   467,   468,     0,   469,     0,   471,     0,   472,   473,
     474,   475,     0,     0,     0,   476,     0,     0,   477,   478,
     479,   480,   481,   482,   483,   484,   485,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   505,
       0,   532,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   108,   109,   110,
     111,     0,   112,   113,   114,   115,     0,   116,   117,   118,
       0,     0,     0,     0,     0,     0,     0,     0,   119,   120,
       0,   121,   122,   123,     0,   125,   126,   127,   128,   129,
       0,   131,   132,     0,   133,   134,   135,   136,   137,   138,
       0,     0,   139,   140,   141,   142,   143,     0,   144,   145,
     146,   147,   148,     0,     0,     0,   150,   151,   152,   153,
     154,   155,     0,   157,   158,   159,     0,   160,   161,   162,
     163,   164,     0,     0,     0,   166,   167,   168,     0,     0,
       0,     0,     0,     0,     0,   174,   175,   176,   177,   178,
     179,   180,   181,   182,   183,     0,   184,     0,   185,   186,
     187,   188,   189,   190,     0,   191,     0,   192,   193,   194,
     195,     0,     0,   196,   197,   198,   199,   200,     0,     0,
       0,   201,   202,   203,     0,   204,   205,   206,     0,   207,
     208,   209,   210,   211,   212,   213,   214,   215,   216,   217,
       0,   218,     0,   219,   220,   221,   222,     0,   223,     0,
     224,     0,     0,     0,   227,   228,   506,     0,   231,     0,
     232,     0,     0,     0,   233,   234,     0,   235,     0,   236,
     237,   238,   239,   240,   911,   242,     0,   244,   245,   246,
     247,     0,   248,   249,   250,   251,   252,   253,     0,   254,
       0,   256,   257,   258,   259,   260,   261,   262,   263,     0,
     264,     0,   265,     0,     0,   268,     0,   270,     0,   271,
     272,   273,   274,   275,     0,     0,   276,     0,   278,     0,
       0,   280,   281,   282,     0,     0,   283,   284,   285,   286,
     287,   507,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,     0,   309,   310,   311,   312,     0,   313,     0,   314,
     315,     0,   317,     0,   318,   319,   320,   321,   322,   323,
       0,   324,   325,     0,     0,   326,   327,   328,     0,     0,
     329,   330,     0,   332,     0,   334,   335,   336,   337,   338,
     339,   340,   341,   342,   343,     0,     0,   344,     0,   345,
     346,   347,     0,   349,   350,   351,   352,   353,   354,     0,
     355,   356,   357,   358,   359,     0,     0,   360,     0,   361,
     362,   363,   364,   365,   366,   367,   368,     0,   369,   370,
     371,     0,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,     0,   382,   383,     0,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,     0,   400,   401,   402,   403,   404,     0,   406,   407,
     408,   409,     0,   410,     0,     0,   412,   413,   414,     0,
       0,   415,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   508,   428,   429,   430,     0,   431,   432,
       0,   433,     0,   435,   436,   437,   438,   439,     0,   440,
     441,     0,     0,     0,   442,   443,   444,   445,   446,     0,
     447,   448,   449,   450,   451,   452,   453,   454,     0,     0,
     455,   456,   457,   458,   459,   460,     0,     0,   462,   463,
     464,   465,   466,   467,   468,     0,   469,     0,   471,     0,
     472,   473,   474,   475,     0,     0,     0,   476,     0,     0,
     477,   478,   479,   480,   481,   482,   483,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,   505,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   108,
     109,   110,   111,     0,   112,   113,   114,   115,     0,   116,
     117,   118,     0,     0,     0,     0,     0,     0,  1041,     0,
     119,   120,     0,   121,   122,   123,     0,   125,   126,   127,
     128,   129,     0,   131,   132,     0,   133,   134,   135,   136,
     137,   138,     0,     0,   139,   140,   141,   142,   143,     0,
     144,   145,   146,   147,   148,     0,     0,     0,   150,   151,
     152,   153,   154,   155,     0,   157,   158,   159,     0,   160,
     161,   162,   163,   164,     0,     0,     0,   166,   167,   168,
       0,     0,     0,     0,     0,     0,     0,   174,   175,   176,
     177,   178,   179,   180,   181,   182,   183,     0,   184,     0,
     185,   186,   187,   188,   189,   190,     0,   191,     0,   192,
     193,   194,   195,     0,     0,   196,   197,   198,   199,   200,
       0,     0,     0,   201,   202,   203,     0,   204,   205,   206,
       0,   207,   208,   209,   210,   211,   212,   213,   214,   215,
     216,   217,     0,   218,     0,   219,   220,   221,   222,     0,
     223,     0,   224,     0,     0,     0,   227,   228,   506,     0,
     231,     0,   232,     0,     0,     0,   233,   234,     0,   235,
       0,   236,   237,   238,   239,   240,   241,   242,     0,   244,
     245,   246,   247,     0,   248,   249,   250,   251,   252,   253,
       0,   254,     0,   256,   257,   258,   259,   260,   261,   262,
     263,     0,   264,     0,   265,     0,     0,   268,     0,   270,
       0,   271,   272,   273,   274,   275,     0,     0,   276,     0,
     278,     0,     0,   280,   281,   282,     0,     0,   283,   284,
     285,   286,   287,   507,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,     0,   309,   310,   311,   312,     0,   313,
       0,   314,   315,     0,   317,     0,   318,   319,   320,   321,
     322,   323,     0,   324,   325,     0,     0,   326,   327,   328,
       0,     0,   329,   330,     0,   332,     0,   334,   335,   336,
     337,   338,   339,   340,   341,   342,   343,     0,     0,   344,
       0,   345,   346,   347,     0,   349,   350,   351,   352,   353,
     354,     0,   355,   356,   357,   358,   359,     0,     0,   360,
       0,   361,   362,   363,   364,   365,   366,   367,   368,     0,
     369,   370,   371,     0,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,     0,   382,   383,     0,   385,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,     0,   400,   401,   402,   403,   404,     0,
     406,   407,   408,   409,     0,   410,     0,     0,   412,   413,
     414,     0,     0,   415,   416,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   508,   428,   429,   430,     0,
     431,   432,     0,   433,     0,   435,   436,   437,   438,   439,
       0,   440,   441,     0,     0,     0,   442,   443,   444,   445,
     446,     0,   447,   448,   449,   450,   451,   452,   453,   454,
       0,     0,   455,   456,   457,   458,   459,   460,     0,     0,
     462,   463,   464,   465,   466,   467,   468,     0,   469,     0,
     471,     0,   472,   473,   474,   475,     0,     0,     0,   476,
       0,     0,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   505,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   108,   109,   110,   111,     0,   112,   113,   114,   115,
       0,   116,   117,   118,     0,     0,     0,     0,     0,     0,
    1059,     0,   119,   120,     0,   121,   122,   123,     0,   125,
     126,   127,   128,   129,     0,   131,   132,     0,   133,   134,
     135,   136,   137,   138,     0,     0,   139,   140,   141,   142,
     143,     0,   144,   145,   146,   147,   148,     0,     0,     0,
     150,   151,   152,   153,   154,   155,     0,   157,   158,   159,
       0,   160,   161,   162,   163,   164,     0,     0,     0,   166,
     167,   168,     0,     0,     0,     0,     0,     0,     0,   174,
     175,   176,   177,   178,   179,   180,   181,   182,   183,     0,
     184,     0,   185,   186,   187,   188,   189,   190,     0,   191,
       0,   192,   193,   194,   195,     0,     0,   196,   197,   198,
     199,   200,     0,     0,     0,   201,   202,   203,     0,   204,
     205,   206,     0,   207,   208,   209,   210,   211,   212,   213,
     214,   215,   216,   217,     0,   218,     0,   219,   220,   221,
     222,     0,   223,     0,   224,     0,     0,     0,   227,   228,
     506,     0,   231,     0,   232,     0,     0,     0,   233,   234,
       0,   235,     0,   236,   237,   238,   239,   240,   241,   242,
       0,   244,   245,   246,   247,     0,   248,   249,   250,   251,
     252,   253,     0,   254,     0,   256,   257,   258,   259,   260,
     261,   262,   263,     0,   264,     0,   265,     0,     0,   268,
       0,   270,     0,   271,   272,   273,   274,   275,     0,     0,
     276,     0,   278,     0,     0,   280,   281,   282,     0,     0,
     283,   284,   285,   286,   287,   507,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,     0,   309,   310,   311,   312,
       0,   313,     0,   314,   315,     0,   317,     0,   318,   319,
     320,   321,   322,   323,     0,   324,   325,     0,     0,   326,
     327,   328,     0,     0,   329,   330,     0,   332,     0,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,     0,
       0,   344,     0,   345,   346,   347,     0,   349,   350,   351,
     352,   353,   354,     0,   355,   356,   357,   358,   359,     0,
       0,   360,     0,   361,   362,   363,   364,   365,   366,   367,
     368,     0,   369,   370,   371,     0,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,     0,   382,   383,     0,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,     0,   400,   401,   402,   403,
     404,     0,   406,   407,   408,   409,     0,   410,     0,     0,
     412,   413,   414,     0,     0,   415,   416,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   508,   428,   429,
     430,     0,   431,   432,     0,   433,     0,   435,   436,   437,
     438,   439,     0,   440,   441,     0,     0,     0,   442,   443,
     444,   445,   446,     0,   447,   448,   449,   450,   451,   452,
     453,   454,     0,     0,   455,   456,   457,   458,   459,   460,
       0,     0,   462,   463,   464,   465,   466,   467,   468,     0,
     469,     0,   471,     0,   472,   473,   474,   475,     0,     0,
       0,   476,     0,     0,   477,   478,   479,   480,   481,   482,
     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   505,     0,   532,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   108,   109,   110,   111,     0,   112,   113,
     114,   115,     0,   116,   117,   118,     0,     0,     0,     0,
       0,     0,     0,     0,   119,   120,     0,   121,   122,   123,
       0,   125,   126,   127,   128,   129,     0,   131,   132,     0,
     133,   134,   135,   136,   137,   138,     0,     0,   139,   140,
     141,   142,   143,     0,   144,   145,   146,   147,   148,     0,
       0,     0,   150,   151,   152,   153,   154,   155,     0,   157,
     158,   159,     0,   160,   161,   162,   163,   164,     0,     0,
       0,   166,   167,   168,     0,     0,     0,     0,     0,     0,
       0,   174,   175,   176,   177,   178,   179,   180,   181,   182,
     183,     0,   184,     0,   185,   186,   187,   188,   189,   190,
       0,   191,     0,   192,   193,   194,   195,     0,     0,   196,
     197,   198,   199,   200,     0,     0,     0,   201,   202,   203,
       0,   204,   205,   206,     0,   207,   208,   209,   210,   211,
     212,   213,   214,   215,   216,   217,     0,   218,     0,   219,
     220,   221,   222,     0,   223,     0,   224,     0,     0,     0,
     227,   228,   506,     0,   231,     0,   232,     0,     0,     0,
     233,   234,     0,   235,     0,   236,   237,   238,   239,   240,
    1402,   242,     0,   244,   245,   246,   247,     0,   248,   249,
     250,   251,   252,   253,     0,   254,     0,   256,   257,   258,
     259,   260,   261,   262,   263,     0,   264,     0,   265,     0,
       0,   268,     0,   270,     0,   271,   272,   273,   274,   275,
       0,     0,   276,     0,   278,     0,     0,   280,   281,   282,
       0,     0,   283,   284,   285,   286,   287,   507,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,     0,   309,   310,
     311,   312,     0,   313,     0,   314,   315,     0,   317,     0,
     318,   319,   320,   321,   322,   323,     0,   324,   325,     0,
       0,   326,   327,   328,     0,     0,   329,   330,     0,   332,
       0,   334,   335,   336,   337,   338,   339,   340,   341,   342,
     343,     0,     0,   344,     0,   345,   346,   347,     0,   349,
     350,   351,   352,   353,   354,     0,   355,   356,   357,   358,
     359,     0,     0,   360,     0,   361,   362,   363,   364,   365,
     366,   367,   368,     0,   369,   370,   371,     0,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,     0,   382,
     383,     0,   385,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,     0,   400,   401,
     402,   403,   404,     0,   406,   407,   408,   409,     0,   410,
       0,     0,   412,   413,   414,     0,     0,   415,   416,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   508,
     428,   429,   430,     0,   431,   432,     0,   433,     0,   435,
     436,   437,   438,   439,     0,   440,   441,     0,     0,     0,
     442,   443,   444,   445,   446,     0,   447,   448,   449,   450,
     451,   452,   453,   454,     0,     0,   455,   456,   457,   458,
     459,   460,     0,     0,   462,   463,   464,   465,   466,   467,
     468,     0,   469,     0,   471,     0,   472,   473,   474,   475,
       0,     0,     0,   476,     0,     0,   477,   478,   479,   480,
     481,   482,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   505,     0,   532,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   108,   109,   110,   111,     0,
     112,   113,   114,   115,     0,   116,   117,   118,     0,     0,
       0,     0,     0,     0,     0,     0,   119,   120,     0,   121,
     122,   123,     0,   125,   126,   127,   128,   129,     0,   131,
     132,     0,   133,   134,   135,   136,   137,   138,     0,     0,
     139,   140,   141,   142,   143,     0,   144,   145,   146,   147,
     148,     0,     0,     0,   150,   151,   152,   153,   154,   155,
       0,   157,   158,   159,     0,   160,   161,   162,   163,   164,
       0,     0,     0,   166,   167,   168,     0,     0,     0,     0,
       0,     0,     0,   174,   175,   176,   177,   178,   179,   180,
     181,   182,   183,     0,   184,     0,   185,   186,   187,   188,
     189,   190,     0,   191,     0,   192,   193,   194,   195,     0,
       0,   196,   197,   198,   199,   200,     0,     0,     0,   201,
     202,   203,     0,   204,   205,   206,     0,   207,   208,   209,
     210,   211,   212,   213,   214,   215,   216,   217,     0,   218,
       0,   219,   220,   221,   222,     0,   223,     0,   224,     0,
       0,     0,   227,   228,   506,     0,   231,     0,   232,     0,
       0,     0,   233,   234,     0,   235,     0,   236,   237,   238,
     239,   240,  1404,   242,     0,   244,   245,   246,   247,     0,
     248,   249,   250,   251,   252,   253,     0,   254,     0,   256,
     257,   258,   259,   260,   261,   262,   263,     0,   264,     0,
     265,     0,     0,   268,     0,   270,     0,   271,   272,   273,
     274,   275,     0,     0,   276,     0,   278,     0,     0,   280,
     281,   282,     0,     0,   283,   284,   285,   286,   287,   507,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,     0,
     309,   310,   311,   312,     0,   313,     0,   314,   315,     0,
     317,     0,   318,   319,   320,   321,   322,   323,     0,   324,
     325,     0,     0,   326,   327,   328,     0,     0,   329,   330,
       0,   332,     0,   334,   335,   336,   337,   338,   339,   340,
     341,   342,   343,     0,     0,   344,     0,   345,   346,   347,
       0,   349,   350,   351,   352,   353,   354,     0,   355,   356,
     357,   358,   359,     0,     0,   360,     0,   361,   362,   363,
     364,   365,   366,   367,   368,     0,   369,   370,   371,     0,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
       0,   382,   383,     0,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,     0,
     400,   401,   402,   403,   404,     0,   406,   407,   408,   409,
       0,   410,     0,     0,   412,   413,   414,     0,     0,   415,
     416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   508,   428,   429,   430,     0,   431,   432,     0,   433,
       0,   435,   436,   437,   438,   439,     0,   440,   441,     0,
       0,     0,   442,   443,   444,   445,   446,     0,   447,   448,
     449,   450,   451,   452,   453,   454,     0,     0,   455,   456,
     457,   458,   459,   460,     0,     0,   462,   463,   464,   465,
     466,   467,   468,     0,   469,     0,   471,     0,   472,   473,
     474,   475,     0,     0,     0,   476,     0,     0,   477,   478,
     479,   480,   481,   482,   483,   484,   485,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   505,
       0,   532,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   108,   109,   110,
     111,     0,   112,   113,   114,   115,     0,   116,   117,   118,
       0,     0,     0,     0,     0,     0,     0,     0,   119,   120,
       0,   121,   122,   123,     0,   125,   126,   127,   128,   129,
       0,   131,   132,     0,   133,   134,   135,   136,   137,   138,
       0,     0,   139,   140,   141,   142,   143,     0,   144,   145,
     146,   147,   148,     0,     0,     0,   150,   151,   152,   153,
     154,   155,     0,   157,   158,   159,     0,   160,   161,   162,
     163,   164,     0,     0,     0,   166,   167,   168,     0,     0,
       0,     0,     0,     0,     0,   174,   175,   176,   177,   178,
     179,   180,   181,   182,   183,     0,   184,     0,   185,   186,
     187,   188,   189,   190,     0,   191,     0,   192,   193,   194,
     195,     0,     0,   196,   197,   198,   199,   200,     0,     0,
       0,   201,   202,   203,     0,   204,   205,   206,     0,   207,
     208,   209,   210,   211,   212,   213,   214,   215,   216,   217,
       0,   218,     0,   219,   220,   221,   222,     0,   223,     0,
     224,     0,     0,     0,   227,   228,   506,     0,   231,     0,
     232,     0,     0,     0,   233,   234,     0,   235,     0,   236,
     237,   238,   239,   240,  1407,   242,     0,   244,   245,   246,
     247,     0,   248,   249,   250,   251,   252,   253,     0,   254,
       0,   256,   257,   258,   259,   260,   261,   262,   263,     0,
     264,     0,   265,     0,     0,   268,     0,   270,     0,   271,
     272,   273,   274,   275,     0,     0,   276,     0,   278,     0,
       0,   280,   281,   282,     0,     0,   283,   284,   285,   286,
     287,   507,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,     0,   309,   310,   311,   312,     0,   313,     0,   314,
     315,     0,   317,     0,   318,   319,   320,   321,   322,   323,
       0,   324,   325,     0,     0,   326,   327,   328,     0,     0,
     329,   330,     0,   332,     0,   334,   335,   336,   337,   338,
     339,   340,   341,   342,   343,     0,     0,   344,     0,   345,
     346,   347,     0,   349,   350,   351,   352,   353,   354,     0,
     355,   356,   357,   358,   359,     0,     0,   360,     0,   361,
     362,   363,   364,   365,   366,   367,   368,     0,   369,   370,
     371,     0,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,     0,   382,   383,     0,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,     0,   400,   401,   402,   403,   404,     0,   406,   407,
     408,   409,     0,   410,     0,     0,   412,   413,   414,     0,
       0,   415,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   508,   428,   429,   430,     0,   431,   432,
       0,   433,     0,   435,   436,   437,   438,   439,     0,   440,
     441,     0,     0,     0,   442,   443,   444,   445,   446,     0,
     447,   448,   449,   450,   451,   452,   453,   454,     0,     0,
     455,   456,   457,   458,   459,   460,     0,     0,   462,   463,
     464,   465,   466,   467,   468,     0,   469,     0,   471,     0,
     472,   473,   474,   475,     0,     0,     0,   476,     0,     0,
     477,   478,   479,   480,   481,   482,   483,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,   505,     0,   532,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   108,
     109,   110,   111,     0,   112,   113,   114,   115,     0,   116,
     117,   118,     0,     0,     0,     0,     0,     0,     0,     0,
     119,   120,     0,   121,   122,   123,     0,   125,   126,   127,
     128,   129,     0,   131,   132,     0,   133,   134,   135,   136,
     137,   138,     0,     0,   139,   140,   141,   142,   143,     0,
     144,   145,   146,   147,   148,     0,     0,     0,   150,   151,
     152,   153,   154,   155,     0,   157,   158,   159,     0,   160,
     161,   162,   163,   164,     0,     0,     0,   166,   167,   168,
       0,     0,     0,     0,     0,     0,     0,   174,   175,   176,
     177,   178,   179,   180,   181,   182,   183,     0,   184,     0,
     185,   186,   187,   188,   189,   190,     0,   191,     0,   192,
     193,   194,   195,     0,     0,   196,   197,   198,   199,   200,
       0,     0,     0,   201,   202,   203,     0,   204,   205,   206,
       0,   207,   208,   209,   210,   211,   212,   213,   214,   215,
     216,   217,     0,   218,     0,   219,   220,   221,   222,     0,
     223,     0,   224,     0,     0,     0,   227,   228,   506,     0,
     231,     0,   232,     0,     0,     0,   233,   234,     0,   235,
       0,   236,   237,   238,   239,   240,  1409,   242,     0,   244,
     245,   246,   247,     0,   248,   249,   250,   251,   252,   253,
       0,   254,     0,   256,   257,   258,   259,   260,   261,   262,
     263,     0,   264,     0,   265,     0,     0,   268,     0,   270,
       0,   271,   272,   273,   274,   275,     0,     0,   276,     0,
     278,     0,     0,   280,   281,   282,     0,     0,   283,   284,
     285,   286,   287,   507,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,     0,   309,   310,   311,   312,     0,   313,
       0,   314,   315,     0,   317,     0,   318,   319,   320,   321,
     322,   323,     0,   324,   325,     0,     0,   326,   327,   328,
       0,     0,   329,   330,     0,   332,     0,   334,   335,   336,
     337,   338,   339,   340,   341,   342,   343,     0,     0,   344,
       0,   345,   346,   347,     0,   349,   350,   351,   352,   353,
     354,     0,   355,   356,   357,   358,   359,     0,     0,   360,
       0,   361,   362,   363,   364,   365,   366,   367,   368,     0,
     369,   370,   371,     0,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,     0,   382,   383,     0,   385,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,     0,   400,   401,   402,   403,   404,     0,
     406,   407,   408,   409,     0,   410,     0,     0,   412,   413,
     414,     0,     0,   415,   416,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   508,   428,   429,   430,     0,
     431,   432,     0,   433,     0,   435,   436,   437,   438,   439,
       0,   440,   441,     0,     0,     0,   442,   443,   444,   445,
     446,     0,   447,   448,   449,   450,   451,   452,   453,   454,
       0,     0,   455,   456,   457,   458,   459,   460,     0,     0,
     462,   463,   464,   465,   466,   467,   468,     0,   469,     0,
     471,     0,   472,   473,   474,   475,     0,     0,     0,   476,
       0,     0,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   505,     0,   532,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   108,   109,   110,   111,     0,   112,   113,   114,   115,
       0,   116,   117,   118,     0,     0,     0,     0,     0,     0,
       0,     0,   119,   120,     0,   121,   122,   123,     0,   125,
     126,   127,   128,   129,     0,   131,   132,     0,   133,   134,
     135,   136,   137,   138,     0,     0,   139,   140,   141,   142,
     143,     0,   144,   145,   146,   147,   148,     0,     0,     0,
     150,   151,   152,   153,   154,   155,     0,   157,   158,   159,
       0,   160,   161,   162,   163,   164,     0,     0,     0,   166,
     167,   168,     0,     0,     0,     0,     0,     0,     0,   174,
     175,   176,   177,   178,   179,   180,   181,   182,   183,     0,
     184,     0,   185,   186,   187,   188,   189,   190,     0,   191,
       0,   192,   193,   194,   195,     0,     0,   196,   197,   198,
     199,   200,     0,     0,     0,   201,   202,   203,     0,   204,
     205,   206,     0,   207,   208,   209,   210,   211,   212,   213,
     214,   215,   216,   217,     0,   218,     0,   219,   220,   221,
     222,     0,   223,     0,   224,     0,     0,     0,   227,   228,
     506,     0,   231,     0,   232,     0,     0,     0,   233,   234,
       0,   235,     0,   236,   237,   238,   239,   240,  2217,   242,
       0,   244,   245,   246,   247,     0,   248,   249,   250,   251,
     252,   253,     0,   254,     0,   256,   257,   258,   259,   260,
     261,   262,   263,     0,   264,     0,   265,     0,     0,   268,
       0,   270,     0,   271,   272,   273,   274,   275,     0,     0,
     276,     0,   278,     0,     0,   280,   281,   282,     0,     0,
     283,   284,   285,   286,   287,   507,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,     0,   309,   310,   311,   312,
       0,   313,     0,   314,   315,     0,   317,     0,   318,   319,
     320,   321,   322,   323,     0,   324,   325,     0,     0,   326,
     327,   328,     0,     0,   329,   330,     0,   332,     0,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,     0,
       0,   344,     0,   345,   346,   347,     0,   349,   350,   351,
     352,   353,   354,     0,   355,   356,   357,   358,   359,     0,
       0,   360,     0,   361,   362,   363,   364,   365,   366,   367,
     368,     0,   369,   370,   371,     0,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,     0,   382,   383,     0,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,     0,   400,   401,   402,   403,
     404,     0,   406,   407,   408,   409,     0,   410,     0,     0,
     412,   413,   414,     0,     0,   415,   416,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   508,   428,   429,
     430,     0,   431,   432,     0,   433,     0,   435,   436,   437,
     438,   439,     0,   440,   441,     0,     0,     0,   442,   443,
     444,   445,   446,     0,   447,   448,   449,   450,   451,   452,
     453,   454,     0,     0,   455,   456,   457,   458,   459,   460,
       0,     0,   462,   463,   464,   465,   466,   467,   468,     0,
     469,     0,   471,     0,   472,   473,   474,   475,     0,     0,
       0,   476,     0,     0,   477,   478,   479,   480,   481,   482,
     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   505,     0,   532,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   108,   109,   110,   111,     0,   112,   113,
     114,   115,     0,   116,   117,   118,     0,     0,     0,     0,
       0,     0,     0,     0,   119,   120,     0,   121,   122,   123,
       0,   125,   126,   127,   128,   129,     0,   131,   132,     0,
     133,   134,   135,   136,   137,   138,     0,     0,   139,   140,
     141,   142,   143,     0,   144,   145,   146,   147,   148,     0,
       0,     0,   150,   151,   152,   153,   154,   155,     0,   157,
     158,   159,     0,   160,   161,   162,   163,   164,     0,     0,
       0,   166,   167,   168,     0,     0,     0,     0,     0,     0,
       0,   174,   175,   176,   177,   178,   179,   180,   181,   182,
     183,     0,   184,     0,   185,   186,   187,   188,   189,   190,
       0,   191,     0,   192,   193,   194,   195,     0,     0,   196,
     197,   198,   199,   200,     0,     0,     0,   201,   202,   203,
       0,   204,   205,   206,     0,   207,   208,   209,   210,   211,
     212,   213,   214,   215,   216,   217,     0,   218,     0,   219,
     220,   221,   222,     0,   223,     0,   224,     0,     0,     0,
     227,   228,   506,     0,   231,     0,   232,     0,     0,     0,
     233,   234,     0,   235,     0,   236,   237,   238,   239,   240,
    2956,   242,     0,   244,   245,   246,   247,     0,   248,   249,
     250,   251,   252,   253,     0,   254,     0,   256,   257,   258,
     259,   260,   261,   262,   263,     0,   264,     0,   265,     0,
       0,   268,     0,   270,     0,   271,   272,   273,   274,   275,
       0,     0,   276,     0,   278,     0,     0,   280,   281,   282,
       0,     0,   283,   284,   285,   286,   287,   507,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,     0,   309,   310,
     311,   312,     0,   313,     0,   314,   315,     0,   317,     0,
     318,   319,   320,   321,   322,   323,     0,   324,   325,     0,
       0,   326,   327,   328,     0,     0,   329,   330,     0,   332,
       0,   334,   335,   336,   337,   338,   339,   340,   341,   342,
     343,     0,     0,   344,     0,   345,   346,   347,     0,   349,
     350,   351,   352,   353,   354,     0,   355,   356,   357,   358,
     359,     0,     0,   360,     0,   361,   362,   363,   364,   365,
     366,   367,   368,     0,   369,   370,   371,     0,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,     0,   382,
     383,     0,   385,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,     0,   400,   401,
     402,   403,   404,     0,   406,   407,   408,   409,     0,   410,
       0,     0,   412,   413,   414,     0,     0,   415,   416,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   508,
     428,   429,   430,     0,   431,   432,     0,   433,     0,   435,
     436,   437,   438,   439,     0,   440,   441,     0,     0,     0,
     442,   443,   444,   445,   446,     0,   447,   448,   449,   450,
     451,   452,   453,   454,     0,     0,   455,   456,   457,   458,
     459,   460,     0,     0,   462,   463,   464,   465,   466,   467,
     468,     0,   469,     0,   471,     0,   472,   473,   474,   475,
       0,     0,     0,   476,     0,     0,   477,   478,   479,   480,
     481,   482,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,  2877,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   108,   109,   110,   111,     0,
     112,   113,   114,   115,     0,   116,   117,   118,     0,     0,
       0,     0,     0,     0,     0,     0,   119,   120,     0,   121,
     122,   123,  2878,   125,   126,   127,     0,   828,  2879,   830,
     831,     0,   133,   134,   135,   136,   137,   138,     0,     0,
     139,   140,   832,   833,   143,     0,   144,   145,   146,   147,
       0,     0,  2880,     0,  2881,   151,   152,   153,   154,   155,
    2882,   157,   158,   159,     0,   160,   161,   162,   163,   164,
       0,     0,  2883,   166,   167,   168,  2884,  2885,  2886,  2887,
       0,     0,  2888,   174,   175,   176,   177,   178,   179,   180,
     843,   844,   183,     0,   184,     0,   185,   186,   187,   188,
     189,   190,     0,   191,     0,   192,   193,   194,   195,     0,
       0,   196,   197,   845,   199,   200,     0,     0,     0,   201,
     202,   203,     0,   204,   205,   206,     0,   207,   208,   209,
     210,     0,   212,   213,   214,   215,   216,     0,     0,   218,
       0,   219,   220,   846,   222,     0,   223,     0,   224,  2889,
       0,  2890,   227,   228,  2891,  2892,   231,     0,   232,     0,
       0,     0,     0,     0,     0,   235,     0,   236,   237,   238,
     239,   240,   241,   242,  2893,   244,   245,   246,   247,     0,
     248,   249,   250,   251,   252,   253,     0,   254,  2894,     0,
     257,   258,   259,   260,   261,   853,   854,     0,   855,     0,
     265,  2895,  2896,   268,  2897,   270,     0,   271,   272,   273,
     274,   275,     0,     0,   276,  2898,   278,  2899,     0,   280,
     281,   282,     0,     0,   283,   284,   285,   286,   287,  3150,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   862,  2901,
     864,   310,   311,   312,     0,     0,     0,   314,   315,  2903,
     317,     0,     0,   319,   866,   321,   322,   323,     0,   324,
     325,     0,     0,   326,   327,   328,     0,     0,   329,     0,
    2905,   332,  2906,     0,   335,   336,   337,   338,   339,   340,
     341,   342,   343,     0,     0,   344,     0,   345,   346,     0,
    2907,   349,   350,     0,   352,   353,   354,     0,   355,   356,
     357,   358,   359,     0,     0,   360,     0,   361,   362,   363,
     870,   365,   366,   367,   368,     0,   369,   370,   371,     0,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
       0,   382,   383,  2908,   385,   386,   387,     0,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,     0,
     400,   401,   402,   403,   404,  2909,   406,     0,   408,   409,
       0,   410,  2911,     0,   412,   876,   414,     0,     0,   415,
     416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,  3151,   428,     0,   430,     0,   431,   432,     0,   433,
    2913,   435,   436,   437,   438,   439,     0,   879,   880,     0,
       0,     0,   442,   443,     0,   445,     0,     0,   447,   448,
    2914,   450,   451,   452,   453,   454,     0,     0,   455,   456,
     457,   458,   459,   460,  2916,     0,   462,   463,   464,   465,
     466,     0,   884,     0,   469,  2917,   471,     0,   472,   473,
     474,   475,     0,     0,     0,   476,     0,     0,   477,   478,
     479,   480,   481,   482,   505,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   494,   495,   496,   497,     0,
       0,     0,   108,   109,   110,   111,     0,   112,   113,   114,
     115,     0,   116,   117,   118,     0,     0,     0,     0,     0,
       0,     0,     0,   119,   120,     0,   121,   122,   123,     0,
     125,   126,   127,   128,   129,     0,   131,   132,     0,   133,
     134,   135,   136,   137,   138,     0,     0,   139,   140,   141,
     142,   143,     0,   144,   145,   146,   147,   148,     0,     0,
       0,   150,   151,   152,   153,   154,   155,     0,   157,   158,
     159,     0,   160,   161,   162,   163,   164,     0,     0,     0,
     166,   167,   168,     0,     0,     0,     0,     0,     0,     0,
     174,   175,   176,   177,   178,   179,   180,   181,   182,   183,
       0,   184,     0,   185,   186,   187,   188,   189,   190,     0,
     191,     0,   192,   193,   194,   195,     0,     0,   196,   197,
     198,   199,   200,     0,     0,     0,   201,   202,   203,     0,
     204,   205,   206,     0,   207,   208,   209,   210,   211,   212,
     213,   214,   215,   216,   217,     0,   218,     0,   219,   220,
     221,   222,     0,   223,     0,   224,     0,     0,     0,   227,
     228,   506,     0,   231,     0,   232,     0,     0,     0,   233,
     234,     0,   235,     0,   236,   237,   238,   239,   240,   241,
     242,     0,   244,   245,   246,   247,     0,   248,   249,   250,
     251,   252,   253,     0,   254,     0,   256,   257,   258,   259,
     260,   261,   262,   263,     0,   264,     0,   265,     0,     0,
     268,     0,   270,     0,   271,   272,   273,   274,   275,     0,
       0,   276,     0,   278,     0,     0,   280,   281,   282,     0,
       0,   283,   284,   285,   286,   287,   507,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,     0,   309,   310,   311,
     312,     0,   313,     0,   314,   315,     0,   317,     0,   318,
     319,   320,   321,   322,   323,     0,   324,   325,     0,     0,
     326,   327,   328,     0,     0,   329,   330,     0,   332,     0,
     334,   335,   336,   337,   338,   339,   340,   341,   342,   343,
       0,     0,   344,     0,   345,   346,   347,     0,   349,   350,
     351,   352,   353,   354,     0,   355,   356,   357,   358,   359,
       0,     0,   360,     0,   361,   362,   363,   364,   365,   366,
     367,   368,     0,   369,   370,   371,     0,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,     0,   382,   383,
       0,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,     0,   400,   401,   402,
     403,   404,     0,   406,   407,   408,   409,     0,   410,     0,
       0,   412,   413,   414,     0,     0,   415,   416,   417,   418,
     419,   420,   421,   422,   423,   424,   425,   426,   508,   428,
     429,   430,     0,   431,   432,     0,   433,     0,   435,   436,
     437,   438,   439,     0,   440,   441,     0,     0,     0,   442,
     443,   444,   445,   446,     0,   447,   448,   449,   450,   451,
     452,   453,   454,     0,     0,   455,   456,   457,   458,   459,
     460,     0,     0,   462,   463,   464,   465,   466,   467,   468,
       0,   469,     0,   471,     0,   472,   473,   474,   475,     0,
       0,     0,   476,     0,     0,   477,   478,   479,   480,   481,
     482,   483,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,   505,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   108,   109,   110,   111,     0,   112,
     113,   114,   115,     0,   116,   117,   118,     0,     0,     0,
       0,     0,     0,     0,     0,   119,   120,     0,   121,   122,
     123,     0,   125,   126,   127,   128,   129,     0,   131,   132,
       0,   133,   134,   135,   136,   137,   138,     0,     0,   139,
     140,   141,   142,   143,     0,   144,   145,   146,   147,   148,
       0,     0,     0,   150,   151,   152,   153,   154,   155,     0,
     157,   158,   159,     0,   160,   161,   162,   163,   164,     0,
       0,     0,   166,   167,   168,     0,     0,     0,     0,     0,
       0,     0,   174,   175,   176,   177,   178,   179,   180,   181,
     182,   183,     0,   184,     0,   185,   186,   187,   188,   189,
     190,     0,   191,     0,   192,   193,   194,   195,     0,     0,
     196,   197,   198,   199,   200,     0,     0,     0,   201,   202,
     203,     0,   204,   205,   206,     0,   207,   208,   209,   210,
     211,   212,   213,   214,   215,   216,   217,     0,   218,     0,
     219,   220,   221,   222,     0,   223,     0,   224,     0,     0,
       0,   227,   228,   506,     0,   668,     0,   232,     0,     0,
       0,   233,   234,     0,   235,     0,   236,   237,   238,   239,
     240,   241,   242,     0,   244,   245,   246,   247,     0,   248,
     249,   250,   251,   252,   253,     0,   254,     0,   256,   257,
     258,   259,   260,   261,   262,   263,     0,   264,     0,   265,
       0,     0,   268,     0,   270,     0,   271,   272,   273,   274,
     275,     0,     0,   276,     0,   278,     0,     0,   280,   281,
     669,     0,     0,   283,   284,   285,   286,   287,   507,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,     0,   309,
     310,   311,   312,     0,   313,     0,   314,   315,     0,   317,
       0,   318,   319,   320,   321,   322,   323,     0,   324,   325,
       0,     0,   326,   327,   328,     0,     0,   329,   330,     0,
     332,     0,   334,   335,   336,   337,   338,   339,   340,   341,
     342,   343,     0,     0,   344,     0,   345,   346,   347,     0,
     349,   350,   351,   352,   353,   354,     0,   355,   356,   357,
     358,   359,     0,     0,   360,     0,   361,   362,   363,   364,
     365,   366,   367,   368,     0,   369,   370,   371,     0,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,     0,
     382,   383,     0,   385,   386,   387,   388,   389,   390,   391,
     392,   670,   394,   395,   396,   397,   398,   399,     0,   400,
     401,   402,   403,   671,     0,   406,   407,   408,   409,     0,
     410,     0,     0,   412,   413,   414,     0,     0,   415,   416,
     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
     508,   428,   429,   430,     0,   431,   432,     0,   433,     0,
     435,   436,   437,   438,   439,     0,   672,   441,     0,     0,
       0,   442,   443,   444,   445,   446,     0,   447,   448,   449,
     450,   451,   452,   453,   454,     0,     0,   455,   456,   457,
     458,   459,   460,     0,     0,   462,   463,   464,   465,   466,
     467,   468,     0,   469,     0,   471,     0,   472,   473,   474,
     475,     0,     0,     0,   476,     0,     0,   477,   478,   479,
     480,   481,   482,   483,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,   505,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   108,   109,   110,   111,
       0,   112,   113,   114,   115,     0,   116,   117,   118,     0,
       0,     0,     0,     0,     0,     0,     0,   119,   120,     0,
     121,   122,   123,     0,   125,   126,   127,   128,   129,     0,
     131,   132,     0,   133,   134,   135,   136,   137,   138,     0,
       0,   139,   140,   141,   142,   143,     0,   144,   145,   146,
     147,   148,     0,     0,     0,   150,   151,   152,   153,   154,
     155,     0,   157,   158,   159,     0,   160,   161,   162,   163,
     164,     0,     0,     0,   166,   167,   168,     0,     0,     0,
       0,     0,     0,     0,   174,   175,   176,   177,   178,   179,
     180,   181,   182,   183,     0,   184,     0,   185,   186,   187,
     188,   189,   190,     0,   191,     0,   192,   193,   194,   195,
       0,     0,   196,   197,   198,   199,   200,     0,     0,     0,
     201,   202,   203,     0,   204,   205,   206,     0,   207,   208,
     209,   210,   211,   212,   213,   214,   215,   216,   217,     0,
     218,     0,   219,   220,   221,   222,     0,   223,     0,   224,
       0,     0,     0,   227,   228,   506,     0,   231,     0,   232,
       0,     0,     0,   233,   234,     0,   235,     0,   236,   237,
     238,   239,   240,   904,   242,     0,   244,   245,   246,   247,
       0,   248,   249,   250,   251,   252,   253,     0,   254,     0,
     256,   257,   258,   259,   260,   261,   262,   263,     0,   264,
       0,   265,     0,     0,   268,     0,   270,     0,   271,   272,
     273,   274,   275,     0,     0,   276,     0,   278,     0,     0,
     280,   281,   282,     0,     0,   283,   284,   285,   286,   287,
     507,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
       0,   309,   310,   311,   312,     0,   313,     0,   314,   315,
       0,   317,     0,   318,   319,   320,   321,   322,   323,     0,
     324,   325,     0,     0,   326,   327,   328,     0,     0,   329,
     330,     0,   332,     0,   334,   335,   336,   337,   338,   339,
     340,   341,   342,   343,     0,     0,   344,     0,   345,   346,
     347,     0,   349,   350,   351,   352,   353,   354,     0,   355,
     356,   357,   358,   359,     0,     0,   360,     0,   361,   362,
     363,   364,   365,   366,   367,   368,     0,   369,   370,   371,
       0,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,     0,   382,   383,     0,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
       0,   400,   401,   402,   403,   404,     0,   406,   407,   408,
     409,     0,   410,     0,     0,   412,   413,   414,     0,     0,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   508,   428,   429,   430,     0,   431,   432,     0,
     433,     0,   435,   436,   437,   438,   439,     0,   440,   441,
       0,     0,     0,   442,   443,   444,   445,   446,     0,   447,
     448,   449,   450,   451,   452,   453,   454,     0,     0,   455,
     456,   457,   458,   459,   460,     0,     0,   462,   463,   464,
     465,   466,   467,   468,     0,   469,     0,   471,     0,   472,
     473,   474,   475,     0,     0,     0,   476,     0,     0,   477,
     478,   479,   480,   481,   482,   483,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     505,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   108,   109,
     110,   111,     0,   112,   113,   114,   115,     0,   116,   117,
     118,     0,     0,     0,     0,     0,     0,     0,     0,   119,
     120,     0,   121,   122,   123,     0,   125,   126,   127,   128,
     129,     0,   131,   132,     0,   133,   134,   135,   136,   137,
     138,     0,     0,   139,   140,   141,   142,   143,     0,   144,
     145,   146,   147,   148,     0,     0,     0,   150,   151,   152,
     153,   154,   155,     0,   157,   158,   159,     0,   160,   161,
     162,   163,   164,     0,     0,     0,   166,   167,   168,     0,
       0,     0,     0,     0,     0,     0,   174,   175,   176,   177,
     178,   179,   180,   181,   182,   183,     0,   184,     0,   185,
     186,   187,   188,   189,   190,     0,   191,     0,   192,   193,
     194,   195,     0,     0,   196,   197,   198,   199,   200,     0,
       0,     0,   201,   202,   203,     0,   204,   205,   206,     0,
     207,   208,   209,   210,   211,   212,   213,   214,   215,   216,
     217,     0,   218,     0,   219,   220,   221,   222,     0,   223,
       0,   224,     0,     0,     0,   227,   228,   506,     0,   231,
       0,   232,     0,     0,     0,   233,   234,     0,   235,     0,
     236,   237,   238,   239,   240,   241,   242,     0,   244,   245,
     246,   247,     0,   248,   249,   250,   251,   252,   253,     0,
     254,     0,   256,   257,   258,   259,   260,   261,   262,   263,
       0,   264,     0,   265,     0,     0,   268,     0,   270,     0,
     271,   272,   273,   274,   275,     0,     0,   276,     0,   278,
       0,     0,   280,   281,   282,     0,     0,   283,   284,   285,
     286,   287,   507,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,     0,   309,   310,   311,   312,     0,   313,     0,
     314,   315,     0,   317,     0,   318,   319,   320,   321,   322,
     323,     0,   324,   325,     0,     0,   326,   327,   328,     0,
       0,   329,   330,     0,   332,     0,   334,   335,   336,   337,
     338,   339,   340,   341,   342,   343,     0,     0,   344,     0,
     345,   346,   347,     0,   349,   350,   351,   352,   353,   354,
       0,   355,   356,   357,   358,   359,     0,     0,   360,     0,
     361,   362,   363,   364,   365,   366,   367,   368,     0,   369,
     370,   371,     0,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,     0,   382,   383,     0,   385,   386,   387,
     388,   389,   390,   391,   392,   670,   394,   395,   396,   397,
     398,   399,     0,   400,   401,   402,   403,   404,     0,   406,
     407,   408,   409,     0,   410,     0,     0,   412,   413,   414,
       0,     0,   415,   416,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,   508,   428,   429,   430,     0,   431,
     432,     0,   433,     0,   435,   436,   437,   438,   439,     0,
     672,   441,     0,     0,     0,   442,   443,   444,   445,   446,
       0,   447,   448,   449,   450,   451,   452,   453,   454,     0,
       0,   455,   456,   457,   458,   459,   460,     0,     0,   462,
     463,   464,   465,   466,   467,   468,     0,   469,     0,   471,
       0,   472,   473,   474,   475,     0,     0,     0,   476,     0,
       0,   477,   478,   479,   480,   481,   482,   483,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,   505,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     108,   109,   110,   111,     0,   112,   113,   114,   115,     0,
     116,   117,   118,     0,     0,     0,     0,     0,     0,  1697,
       0,   119,   120,     0,   121,   122,   123,     0,   125,   126,
     127,   128,   129,     0,   131,   132,     0,   133,   134,   135,
     136,   137,   138,     0,     0,   139,   140,   141,   142,   143,
       0,   144,   145,   146,   147,   148,     0,     0,     0,   150,
     151,   152,   153,   154,   155,     0,   157,   158,   159,     0,
     160,   161,   162,   163,   164,     0,     0,     0,   166,   167,
     168,     0,     0,     0,     0,     0,     0,     0,   174,   175,
     176,   177,   178,   179,   180,   181,   182,   183,     0,   184,
       0,   185,   186,   187,   188,   189,   190,     0,   191,     0,
     192,   193,   194,   195,     0,     0,   196,   197,   198,   199,
     200,     0,     0,     0,   201,   202,   203,     0,   204,   205,
     206,     0,   207,   208,   209,   210,   211,   212,   213,   214,
     215,   216,   217,     0,   218,     0,   219,   220,   221,   222,
       0,   223,     0,   224,     0,     0,     0,   227,   228,   506,
       0,   231,     0,   232,     0,     0,     0,   233,   234,     0,
     235,     0,   236,   237,   238,   239,   240,   241,   242,     0,
     244,   245,   246,   247,     0,   248,   249,   250,   251,   252,
     253,     0,   254,     0,   256,   257,   258,   259,   260,   261,
     262,   263,     0,   264,     0,   265,     0,     0,   268,     0,
     270,     0,   271,   272,   273,   274,   275,     0,     0,   276,
       0,   278,     0,     0,   280,   281,   282,     0,     0,   283,
     284,   285,   286,   287,   507,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,     0,   309,   310,   311,   312,     0,
     313,     0,   314,   315,     0,   317,     0,   318,   319,   320,
     321,   322,   323,     0,   324,   325,     0,     0,   326,   327,
     328,     0,     0,   329,   330,     0,   332,     0,   334,   335,
     336,   337,   338,   339,   340,   341,   342,   343,     0,     0,
     344,     0,   345,   346,   347,     0,   349,   350,   351,   352,
     353,   354,     0,   355,   356,   357,   358,   359,     0,     0,
     360,     0,   361,   362,   363,   364,   365,   366,   367,   368,
       0,   369,   370,   371,     0,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,     0,   382,   383,     0,   385,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,     0,   400,   401,   402,   403,   404,
       0,     0,   407,   408,   409,     0,   410,     0,     0,   412,
     413,   414,     0,     0,   415,   416,   417,   418,   419,   420,
     421,   422,   423,   424,   425,   426,   508,   428,   429,   430,
       0,   431,   432,     0,   433,     0,   435,   436,   437,   438,
     439,     0,   440,   441,     0,     0,     0,   442,   443,   444,
     445,   446,     0,   447,   448,   449,   450,   451,   452,   453,
     454,     0,     0,   455,   456,   457,   458,   459,   460,     0,
       0,   462,   463,   464,   465,   466,   467,   468,     0,   469,
       0,   471,     0,   472,   473,   474,   475,     0,     0,     0,
     476,     0,     0,   477,   478,   479,   480,   481,   482,   483,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   505,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   108,   109,   110,   111,     0,   112,   113,   114,
     115,     0,   116,   117,   118,     0,     0,     0,     0,     0,
       0,     0,     0,   119,   120,     0,   121,   122,   123,     0,
     125,   126,   127,   128,   129,     0,   131,   132,     0,   133,
     134,   135,   136,   137,   138,     0,     0,   139,   140,   141,
     142,   143,     0,   144,   145,   146,   147,   148,     0,     0,
       0,   150,   151,   152,   153,   154,   155,     0,   157,   158,
     159,     0,   160,   161,   162,   163,   164,     0,     0,     0,
     166,   167,   168,     0,     0,     0,     0,     0,     0,     0,
     174,   175,   176,   177,   178,   179,   180,   181,   182,   183,
       0,   184,     0,   185,   186,   187,   188,   189,   190,     0,
     191,     0,   192,   193,   194,   195,     0,     0,   196,   197,
     198,   199,   200,     0,     0,     0,   201,   202,   203,     0,
     204,   205,   206,     0,   207,   208,   209,   210,   211,   212,
     213,   214,   215,   216,   217,     0,   218,     0,   219,   220,
     221,   222,     0,   223,     0,   224,     0,     0,     0,   227,
     228,   506,     0,   231,     0,   232,     0,     0,     0,   233,
     234,     0,   235,     0,   236,   237,   238,   239,   240,  1866,
     242,     0,   244,   245,   246,   247,     0,   248,   249,   250,
     251,   252,   253,     0,   254,     0,   256,   257,   258,   259,
     260,   261,   262,   263,     0,   264,     0,   265,     0,     0,
     268,     0,   270,     0,   271,   272,   273,   274,   275,     0,
       0,   276,     0,   278,     0,     0,   280,   281,   282,     0,
       0,   283,   284,   285,   286,   287,   507,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,     0,   309,   310,   311,
     312,     0,   313,     0,   314,   315,     0,   317,     0,   318,
     319,   320,   321,   322,   323,     0,   324,   325,     0,     0,
     326,   327,   328,     0,     0,   329,   330,     0,   332,     0,
     334,   335,   336,   337,   338,   339,   340,   341,   342,   343,
       0,     0,   344,     0,   345,   346,   347,     0,   349,   350,
     351,   352,   353,   354,     0,   355,   356,   357,   358,   359,
       0,     0,   360,     0,   361,   362,   363,   364,   365,   366,
     367,   368,     0,   369,   370,   371,     0,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,     0,   382,   383,
       0,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,     0,   400,   401,   402,
     403,   404,     0,   406,   407,   408,   409,     0,   410,     0,
       0,   412,   413,   414,     0,     0,   415,   416,   417,   418,
     419,   420,   421,   422,   423,   424,   425,   426,   508,   428,
     429,   430,     0,   431,   432,     0,   433,     0,   435,   436,
     437,   438,   439,     0,   440,   441,     0,     0,     0,   442,
     443,   444,   445,   446,     0,   447,   448,   449,   450,   451,
     452,   453,   454,     0,     0,   455,   456,   457,   458,   459,
     460,     0,     0,   462,   463,   464,   465,   466,   467,   468,
       0,   469,     0,   471,     0,   472,   473,   474,   475,     0,
       0,     0,   476,     0,     0,   477,   478,   479,   480,   481,
     482,   483,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,   505,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   108,   109,   110,   111,     0,   112,
     113,   114,   115,     0,   116,   117,   118,     0,     0,     0,
       0,     0,     0,     0,     0,   119,   120,     0,   121,   122,
     123,     0,   125,   126,   127,   128,   129,     0,   131,   132,
       0,   133,   134,   135,   136,   137,   138,     0,     0,   139,
     140,   141,   142,   143,     0,   144,   145,   146,   147,   148,
       0,     0,     0,   150,   151,   152,   153,   154,   155,     0,
     157,   158,   159,     0,   160,   161,   162,   163,   164,     0,
       0,     0,   166,   167,   168,     0,     0,     0,     0,     0,
       0,     0,   174,   175,   176,   177,   178,   179,   180,   181,
     182,   183,     0,   184,     0,   185,   186,   187,   188,   189,
     190,     0,   191,     0,   192,   193,   194,   195,     0,     0,
     196,   197,   198,   199,   200,     0,     0,     0,   201,   202,
     203,     0,   204,   205,   206,     0,   207,   208,   209,   210,
     211,   212,   213,   214,   215,   216,   217,     0,   218,     0,
     219,   220,   221,   222,     0,   223,     0,   224,     0,     0,
       0,   227,   228,   506,     0,   231,     0,   232,     0,     0,
       0,   233,   234,     0,   235,     0,   236,   237,   238,   239,
     240,  2204,   242,     0,   244,   245,   246,   247,     0,   248,
     249,   250,   251,   252,   253,     0,   254,     0,   256,   257,
     258,   259,   260,   261,   262,   263,     0,   264,     0,   265,
       0,     0,   268,     0,   270,     0,   271,   272,   273,   274,
     275,     0,     0,   276,     0,   278,     0,     0,   280,   281,
     282,     0,     0,   283,   284,   285,   286,   287,   507,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,     0,   309,
     310,   311,   312,     0,   313,     0,   314,   315,     0,   317,
       0,   318,   319,   320,   321,   322,   323,     0,   324,   325,
       0,     0,   326,   327,   328,     0,     0,   329,   330,     0,
     332,     0,   334,   335,   336,   337,   338,   339,   340,   341,
     342,   343,     0,     0,   344,     0,   345,   346,   347,     0,
     349,   350,   351,   352,   353,   354,     0,   355,   356,   357,
     358,   359,     0,     0,   360,     0,   361,   362,   363,   364,
     365,   366,   367,   368,     0,   369,   370,   371,     0,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,     0,
     382,   383,     0,   385,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,     0,   400,
     401,   402,   403,   404,     0,   406,   407,   408,   409,     0,
     410,     0,     0,   412,   413,   414,     0,     0,   415,   416,
     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
     508,   428,   429,   430,     0,   431,   432,     0,   433,     0,
     435,   436,   437,   438,   439,     0,   440,   441,     0,     0,
       0,   442,   443,   444,   445,   446,     0,   447,   448,   449,
     450,   451,   452,   453,   454,     0,     0,   455,   456,   457,
     458,   459,   460,     0,     0,   462,   463,   464,   465,   466,
     467,   468,     0,   469,     0,   471,     0,   472,   473,   474,
     475,     0,     0,     0,   476,     0,     0,   477,   478,   479,
     480,   481,   482,   483,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,   505,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   108,   109,   110,   111,
       0,   112,   113,   114,   115,     0,   116,   117,   118,     0,
       0,     0,     0,     0,     0,     0,     0,   119,   120,     0,
     121,   122,   123,     0,   125,   126,   127,   128,   129,     0,
     131,   132,     0,   133,   134,   135,   136,   137,   138,     0,
       0,   139,   140,   141,   142,   143,     0,   144,   145,   146,
     147,   148,     0,     0,     0,   150,   151,   152,   153,   154,
     155,     0,   157,   158,   159,     0,   160,   161,   162,   163,
     164,     0,     0,     0,   166,   167,   168,     0,     0,     0,
       0,     0,     0,     0,   174,   175,   176,   177,   178,   179,
     180,   181,   182,   183,     0,   184,     0,   185,   186,   187,
     188,   189,   190,     0,   191,     0,   192,   193,   194,   195,
       0,     0,   196,   197,   198,   199,   200,     0,     0,     0,
     201,   202,   203,     0,   204,   205,   206,     0,   207,   208,
     209,   210,   211,   212,   213,   214,   215,   216,   217,     0,
     218,     0,   219,   220,   221,   222,     0,   223,     0,   224,
       0,     0,     0,   227,   228,   506,     0,   231,     0,   232,
       0,     0,     0,   233,   234,     0,   235,     0,   236,   237,
     238,   239,   240,  2219,   242,     0,   244,   245,   246,   247,
       0,   248,   249,   250,   251,   252,   253,     0,   254,     0,
     256,   257,   258,   259,   260,   261,   262,   263,     0,   264,
       0,   265,     0,     0,   268,     0,   270,     0,   271,   272,
     273,   274,   275,     0,     0,   276,     0,   278,     0,     0,
     280,   281,   282,     0,     0,   283,   284,   285,   286,   287,
     507,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
       0,   309,   310,   311,   312,     0,   313,     0,   314,   315,
       0,   317,     0,   318,   319,   320,   321,   322,   323,     0,
     324,   325,     0,     0,   326,   327,   328,     0,     0,   329,
     330,     0,   332,     0,   334,   335,   336,   337,   338,   339,
     340,   341,   342,   343,     0,     0,   344,     0,   345,   346,
     347,     0,   349,   350,   351,   352,   353,   354,     0,   355,
     356,   357,   358,   359,     0,     0,   360,     0,   361,   362,
     363,   364,   365,   366,   367,   368,     0,   369,   370,   371,
       0,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,     0,   382,   383,     0,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
       0,   400,   401,   402,   403,   404,     0,   406,   407,   408,
     409,     0,   410,     0,     0,   412,   413,   414,     0,     0,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   508,   428,   429,   430,     0,   431,   432,     0,
     433,     0,   435,   436,   437,   438,   439,     0,   440,   441,
       0,     0,     0,   442,   443,   444,   445,   446,     0,   447,
     448,   449,   450,   451,   452,   453,   454,     0,     0,   455,
     456,   457,   458,   459,   460,     0,     0,   462,   463,   464,
     465,   466,   467,   468,     0,   469,     0,   471,     0,   472,
     473,   474,   475,     0,     0,     0,   476,     0,     0,   477,
     478,   479,   480,   481,   482,   483,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     696,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   108,   109,
     110,   111,     0,   112,   113,   114,   115,     0,   116,   117,
     118,     0,     0,     0,     0,     0,     0,     0,     0,   119,
     120,     0,   121,   122,   123,     0,   125,   126,   127,   697,
     698,     0,   699,   700,     0,   133,   134,   135,   136,   137,
     138,     0,     0,   139,   140,   701,   702,   143,     0,   144,
     145,   146,   147,   703,     0,     0,     0,     0,   151,   152,
     153,   154,   155,     0,   157,   158,   159,     0,   160,   161,
     162,   163,   164,     0,     0,     0,   166,   167,   168,     0,
       0,     0,     0,     0,     0,     0,   174,   175,   176,   177,
     178,   179,   180,   704,   705,   183,     0,   184,     0,   185,
     186,   187,   188,   189,   190,     0,   191,     0,   192,   193,
     194,   195,     0,     0,   196,   197,   198,   199,   200,     0,
       0,     0,   201,   202,   203,     0,   204,   205,   206,     0,
     207,   208,   209,   210,   706,   212,   213,   214,   215,   216,
     707,     0,   218,     0,   219,   220,   708,   222,     0,   223,
       0,   224,     0,     0,     0,   227,   228,   709,     0,   231,
       0,   232,     0,     0,     0,   710,   711,     0,   235,     0,
     236,   237,   238,   239,   240,   241,   242,     0,   244,   245,
     246,   247,     0,   248,   249,   250,   251,   252,   253,     0,
     254,     0,   712,   257,   258,   259,   260,   261,   713,   714,
       0,   715,     0,   265,     0,     0,   268,     0,   270,     0,
     271,   272,   273,   274,   275,     0,     0,   276,     0,   278,
       0,     0,   280,   281,   282,     0,     0,   283,   284,   285,
     286,   287,   716,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   717,     0,   718,   310,   311,   312,     0,   719,     0,
     314,   315,     0,   317,     0,   720,   319,   721,   321,   322,
     323,     0,   324,   325,     0,     0,   326,   327,   328,     0,
       0,   329,   722,     0,   332,     0,   723,   335,   336,   337,
     338,   339,   340,   341,   342,   343,     0,     0,   344,     0,
     345,   346,   724,     0,   349,   350,   725,   352,   353,   354,
       0,   355,   356,   357,   358,   359,     0,     0,   360,     0,
     361,   362,   363,   726,   365,   366,   367,   368,     0,   369,
     370,   371,     0,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,     0,   382,   383,     0,   385,   386,   387,
     727,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,     0,   400,   401,   402,   403,   404,     0,   406,
     728,   408,   409,     0,   410,     0,     0,   412,   729,   414,
       0,     0,   415,   416,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,   730,   428,   731,   430,     0,   431,
     432,     0,   433,     0,   435,   436,   437,   438,   439,     0,
     732,   733,     0,     0,     0,   442,   443,   734,   445,   735,
       0,   447,   448,   736,   450,   451,   452,   453,   454,     0,
       0,   455,   456,   457,   458,   459,   460,     0,     0,   462,
     463,   464,   465,   466,  1530,   738,     0,   469,     0,   471,
       0,   472,   473,   474,   475,     0,     0,     0,   476,     0,
       0,   477,   478,   479,   480,   481,   482,   739,   740,   741,
     742,   743,   744,   745,   746,   747,   748,   749,   494,   495,
     496,   497,   826,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     108,   109,   110,   111,     0,   112,   113,   114,   115,     0,
     116,   117,   118,     0,     0,     0,     0,     0,     0,     0,
       0,   119,   120,     0,   121,   122,   123,   827,   125,   126,
     127,     0,   828,   829,   830,   831,     0,   133,   134,   135,
     136,   137,   138,     0,     0,   139,   140,   832,   833,   143,
       0,   144,   145,   146,   147,     0,     0,   834,     0,   835,
     151,   152,   153,   154,   155,   836,   157,   158,   159,     0,
     160,   161,   162,   163,   164,     0,     0,   837,   166,   167,
     168,   838,   839,   840,   841,     0,     0,   842,   174,   175,
     176,   177,   178,   179,   180,   843,   844,   183,     0,   184,
       0,   185,   186,   187,   188,   189,   190,     0,   191,     0,
     192,   193,   194,   195,     0,     0,   196,   197,   845,   199,
     200,     0,     0,     0,   201,   202,   203,     0,   204,   205,
     206,     0,   207,   208,   209,   210,     0,   212,   213,   214,
     215,   216,     0,     0,   218,     0,   219,   220,   846,   222,
       0,   223,     0,   224,   847,     0,   848,   227,   228,     0,
     849,   231,     0,   232,     0,     0,     0,     0,     0,     0,
     235,     0,   236,   237,   238,   239,   240,   241,   242,   851,
     244,   245,   246,   247,     0,   248,   249,   250,   251,   252,
     253,     0,   254,   852,     0,   257,   258,   259,   260,   261,
     853,   854,     0,   855,     0,   265,   856,   857,   268,   858,
     270,     0,   271,   272,   273,   274,   275,     0,     0,   276,
     859,   278,   860,     0,   280,   281,   282,     0,     0,   283,
     284,   285,   286,   287,     0,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   862,   863,   864,   310,   311,   312,     0,
       0,     0,   314,   315,   865,   317,     0,     0,   319,   866,
     321,   322,   323,     0,   324,   325,     0,     0,   326,   327,
     328,     0,     0,   329,     0,   867,   332,   868,     0,   335,
     336,   337,   338,   339,   340,   341,   342,   343,     0,     0,
     344,     0,   345,   346,     0,   869,   349,   350,     0,   352,
     353,   354,     0,   355,   356,   357,   358,   359,     0,     0,
     360,     0,   361,   362,   363,   870,   365,   366,   367,   368,
       0,   369,   370,   371,     0,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,     0,   382,   383,   871,   385,
     386,   387,     0,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,     0,   400,   401,   402,   403,   404,
     873,   406,     0,   408,   409,     0,   410,   875,     0,   412,
     876,   414,     0,     0,   415,   416,   417,   418,   419,   420,
     421,   422,   423,   424,   425,   426,     0,   428,     0,   430,
       0,   431,   432,     0,   433,   878,   435,   436,   437,   438,
     439,     0,   879,   880,     0,     0,     0,   442,   443,     0,
     445,     0,     0,   447,   448,   881,   450,   451,   452,   453,
     454,     0,     0,   455,   456,   457,   458,   459,   460,   883,
       0,   462,   463,   464,   465,   466,     0,   884,     0,   469,
     885,   471,     0,   472,   473,   474,   475,     0,     0,     0,
     476,     0,     0,   477,   478,   479,   480,   481,   482,   505,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     494,   495,   496,   497,     0,     0,     0,   108,   109,   110,
     111,     0,   112,   113,   114,   115,     0,   116,   117,   118,
       0,     0,     0,     0,     0,     0,     0,     0,   119,   120,
       0,   121,   122,   123,     0,   125,   126,   127,   128,   129,
       0,   131,   132,     0,   133,   134,   135,   136,   137,   138,
       0,     0,   139,   140,   141,   142,   143,     0,   144,   145,
     146,   147,   148,     0,     0,     0,   150,   151,   152,   153,
     154,   155,     0,   157,   158,   159,     0,   160,   161,   162,
     163,   164,     0,     0,     0,   166,   167,   168,     0,     0,
       0,     0,     0,     0,     0,   174,   175,   176,   177,   178,
     179,   180,   181,   182,   183,     0,   184,     0,   185,   186,
     187,   188,   189,   190,     0,   191,     0,   192,   193,   194,
     195,     0,     0,   196,   197,   198,   199,   200,     0,     0,
       0,   201,   202,   203,     0,   204,   205,   206,     0,   207,
     208,   209,   210,   211,   212,   213,   214,   215,   216,   217,
       0,   218,     0,   219,   220,   221,   222,     0,   223,     0,
     224,     0,     0,     0,   227,   228,   506,     0,   231,     0,
     232,     0,     0,     0,   233,   234,     0,   235,     0,   236,
     237,   238,   239,   240,   241,   242,     0,   244,   245,   246,
     247,     0,   248,   249,   250,   251,   252,   253,     0,   254,
       0,   256,   257,   258,   259,   260,   261,   262,   263,     0,
     264,     0,   265,     0,     0,   268,     0,   270,     0,   271,
     272,   273,   274,   275,     0,     0,   276,     0,   278,     0,
       0,   280,   281,   282,     0,     0,   283,   284,   285,   286,
     287,   507,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,     0,   309,   310,   311,   312,     0,   313,     0,   314,
     315,     0,   317,     0,   318,   319,   320,   321,   322,   323,
       0,   324,   325,     0,     0,   326,   327,   328,     0,     0,
     329,   330,     0,   332,     0,   334,   335,   336,   337,   338,
     339,   340,     0,   342,   343,     0,     0,   344,     0,   345,
     346,   347,     0,   349,   350,   351,   352,   353,   354,     0,
     355,   356,   357,   358,   359,     0,     0,   360,     0,   361,
       0,   363,   364,   365,   366,   367,   368,     0,   369,   370,
     371,     0,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,     0,   382,   383,     0,   385,   386,   387,   388,
       0,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,     0,   400,   401,   402,   403,   404,     0,   406,   407,
     408,   409,     0,   410,     0,     0,   412,   413,   414,     0,
       0,   415,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   508,   428,   429,   430,     0,   431,   432,
       0,   433,     0,   435,   436,   437,   438,   439,     0,   440,
     441,     0,     0,     0,   442,   443,   444,   445,   446,     0,
     447,   448,   449,   450,   451,   452,   453,   454,     0,     0,
     455,   456,   457,   458,   459,   460,     0,     0,   462,   463,
     464,   465,   466,   467,   468,     0,   469,     0,   471,     0,
     472,   473,   474,   475,     0,     0,     0,   476,     0,     0,
     477,   478,   479,   480,   481,   482,   483,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,     1,     1,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     2,     2,     3,     4,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     6,     6,     0,     0,     0,     0,     0,     0,     0,
       7,     7,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     8,     8,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     9,     9,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    10,    10,   569,   569,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    12,    12,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    13,
      13,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     570,   570,     0,     0,     0,     0,     0,     0,    16,    16,
       0,     0,     0,     0,     0,     0,    17,    17,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    20,    20,     0,     0,    21,    21,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    23,
      23,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    24,    24,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    25,    25,     0,
      26,    26,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    27,    27,     0,     0,     0,     0,     0,     0,
       0,    28,    28,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    29,    29,     0,     0,     0,
       0,     0,    30,    30,     0,     0,     0,    31,    31,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    32,    32,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      33,    33,     0,     0,    34,    34,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    35,    35,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    37,    37,     0,     0,     0,    38,    38,     0,
       0,   571,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    39,    39,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    40,    40,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   572,   677
};

static const yytype_int16 yycheck[] =
{
       8,   565,   781,    41,    12,     0,   793,    82,    21,    17,
      41,     0,   789,     0,  1033,    23,    24,    25,    26,    27,
     572,     0,    30,     7,     0,    33,    34,  1009,    36,  1257,
     690,    39,    40,    41,  1245,   791,     0,    21,     0,   874,
       7,   769,  1009,   635,  1154,  1432,   564,  1546,   800,     0,
       0,    21,  1244,  2101,    21,  1185,    18,  1721,   905,   880,
    1724,    18,   909,  2130,  1219,  2166,  2133,   562,  2169,    33,
    2104,  1585,  1605,  1676,    84,  1296,  1539,  1540,    84,  1221,
     666,  1544,  2215,  2629,   571,    34,    94,  1224,  2628,  1191,
    1020,    99,   100,   101,   102,   103,   572,  1437,  1020,   781,
    1119,   783,   647,   785,  1020,  1069,  2598,  1249,  2598,  1149,
    2157,     0,  1630,  1631,   637,     0,  1156,  1020,     0,   642,
       0,     0,     0,     0,     0,     0,     0,     0,  2211,     0,
      94,     0,     0,     0,     0,     0,  2642,  2646,   683,     0,
       0,     0,     0,     0,  2259,  2260,  2261,   590,    40,  2449,
    3054,  2510,  2274,   102,  2098,     5,     5,   832,   833,     5,
      24,    16,     0,  1683,     5,     5,     0,    13,    14,     5,
    1744,    54,  1742,    13,    14,     5,     5,     5,     5,     5,
    1162,     5,     5,    13,    14,     5,     5,    13,    14,   864,
      13,    14,     5,    13,    14,     5,     5,     5,     9,     5,
      13,    14,     9,    13,    14,    13,    14,    13,    14,  2292,
       5,     5,     5,     5,     5,     9,  2285,     9,    13,    14,
      13,    14,     5,   177,     5,     5,     5,    16,     5,     5,
       5,     5,     5,     5,  2968,     5,     5,   144,    38,    87,
      62,   641,  1483,   124,  3154,   761,  1970,     4,  1838,    13,
      14,  1233,     9,   913,  1236,  1237,   126,  2948,   766,    97,
      13,    14,   197,    97,    30,     3,   227,   232,    11,   766,
      11,    37,    15,  2964,    15,    30,   176,  2360,  2361,     9,
    2363,     4,    37,   298,   132,    52,     9,     3,     4,     5,
    1111,    62,   295,     9,    30,  1259,    34,    35,   297,   303,
      62,    37,    45,    62,  2851,    11,   111,  1271,   253,    15,
    1066,   303,   111,  3292,  3050,    11,     5,  2756,  2928,    15,
    2759,    11,  2514,  2515,   253,    15,  3363,   152,    72,  3233,
    3234,  1425,   280,     8,    77,   176,    11,   218,   142,    45,
      15,  3466,    11,    18,    19,    20,    15,  2414,   199,    45,
       8,   119,    71,    11,   286,    45,  1016,    15,   121,   283,
      18,    19,    20,    41,    30,    30,   124,    77,   321,  3053,
    2488,    77,   373,  2491,  2489,   121,    45,  2032,   168,  3380,
    3381,    77,   140,   321,    63,   124,  2566,    77,   135,    44,
      11,  3602,    71,    44,  3041,    11,  3043,  1232,   223,   112,
     414,    44,   483,   119,   461,   461,   423,   510,    77,    16,
      44,  1167,  1087,  1088,  2960,    30,   521,   364,  2910,   154,
     523,   374,    37,  2963,    11,  2971,   507,  1102,    15,    79,
      79,   112,  2565,   200,   199,    13,    14,   175,   205,   177,
      90,    90,  3227,   460,  3229,   392,  3657,  2548,   519,   378,
     128,   166,   523,   170,   173,  1047,    77,  1009,  1118,   297,
    1052,    77,   476,   297,   521,   521,   314,  3468,   400,   135,
     135,   206,   424,  3598,   279,   219,   243,  2132,   303,  2562,
    2660,  2564,   122,  1946,  1947,  1948,  1949,  1950,   278,  3180,
    1953,  1954,  1955,  1956,  1957,  1958,  1959,  1960,  1961,  1962,
    2014,  1024,  2446,  3239,  1598,  3542,   521,   515,   224,   517,
      40,   456,   363,   112,   522,  1038,  1068,   525,   521,   287,
     521,   525,   521,  1010,   287,   473,   534,   456,   366,   244,
     205,   247,   366,   525,   458,   435,    58,  1996,  1997,  1998,
    2499,   572,  3152,   365,   385,   292,  3230,  2506,  2507,  2508,
     514,   355,   227,  2992,   562,  1215,   564,   565,   566,  3206,
     525,   201,  3541,   516,   572,  2098,  3113,   521,   247,  1416,
     112,   532,   479,   176,   332,  1303,   521,   458,   516,  1124,
    3484,   429,  3367,   424,  2702,  3132,   521,  2656,  3322,   396,
    2782,   461,   521,   171,   365,   360,  2679,   605,   606,   607,
    1821,  3511,  2176,   365,   635,  2175,   365,   620,  1763,   571,
    1155,   328,  1164,  1165,   333,   572,   624,  2135,  2081,  2082,
     470,  1408,   635,  1023,   299,   424,   467,   452,   636,   637,
     396,   398,     0,   641,   642,  2168,   620,  1182,   521,    11,
    2160,   299,   483,    15,  1855,   483,   677,  2371,   403,   483,
     180,   635,   344,   620,   176,  3164,   485,   485,   513,  1900,
     668,   669,  3154,   671,  3154,   635,   507,   403,   635,   679,
     519,   521,   521,   679,   523,   521,  1192,   685,   507,   507,
     521,   521,   374,   691,   522,   521,   524,   514,   522,  2822,
     524,   521,   521,   521,   769,   521,    40,   521,   521,  3058,
    1928,   521,   521,   525,  2294,  1213,  1483,  2829,   521,   520,
    3614,   521,   521,   521,  1678,   521,  1213,   463,  3018,   458,
    3454,   521,   411,   412,   513,     5,   521,   521,   521,   521,
     521,   688,  1509,   471,   453,  1178,   685,    25,   521,  1491,
     521,   521,   521,   607,   521,   521,   521,   521,   521,   521,
     758,   521,   521,   761,   525,   512,   513,   521,  1433,  1434,
     483,   756,  3453,   525,  2811,  1425,   421,   756,   521,   756,
     421,   514,   515,   516,   517,  3321,   517,   756,   421,   787,
     756,   789,   512,   513,   507,   435,   435,   421,   403,   512,
     513,    62,   756,   801,   756,   385,   512,   513,  2019,   691,
     808,   809,   810,   811,   812,   756,   756,     8,   279,   519,
    1792,   517,   761,   523,    15,  2774,   824,    18,    19,    20,
    1802,   517,    25,  1805,   514,   515,   516,   517,  2943,   122,
    3339,  3337,   435,   508,   509,   510,   180,   512,   513,   514,
     515,   516,   517,   512,   513,   514,   515,   516,   517,   394,
     508,   509,   510,  1983,   512,   513,   514,   515,   516,   517,
     524,  3591,   119,   385,  2947,  1642,   874,   756,   339,   438,
    1626,   756,   485,  2817,   756,  2443,   756,   756,   756,   756,
     756,   756,   756,   756,  2014,   756,   471,   756,   756,   756,
     756,   756,  1552,  2392,   507,   756,   756,   756,   756,   756,
    1864,   508,   424,  1941,  1681,  1400,   513,   510,   201,    11,
    3450,   177,   519,  2446,   521,  1671,  3462,   486,   110,  3649,
     523,  1485,  2490,  2053,  1680,   525,  1682,   514,   515,   516,
     517,   253,  1914,  1971,  2856,   525,  1431,  1597,  1598,  2457,
     197,  1493,  2864,    45,    52,   467,  1606,  1914,   521,   168,
     510,  1991,  1447,    11,    71,  3323,  2415,  2416,  2417,  2418,
      33,   521,  1480,  1481,  1894,    23,    24,  1627,   166,   360,
     253,  1489,  1894,  1895,  1896,    77,   521,  1893,   156,  1571,
    1566,  2321,  3115,  1021,  1576,    58,  1578,  2327,  1580,    26,
    2330,  1894,  1895,   182,  3534,    32,    79,   185,   176,   521,
     844,  1009,   119,  1780,   509,  1492,    11,    90,   279,  1788,
      15,  2474,  2475,  1021,   519,  1023,  1024,  1493,   237,  3511,
    1028,  3511,   866,   156,   112,   282,  3074,  2238,  1875,  1037,
    1038,   319,   320,  1041,  1047,  2137,  1559,   349,   208,  1052,
      45,  2262,   253,   176,  3078,   135,   244,   105,  1010,   315,
    1897,  1059,  2162,    79,  1901,   178,   378,  1904,   247,   903,
    1068,  1069,  1070,  1047,    90,  2598,  1074,   259,  1052,   516,
     176,  1616,    77,   181,   164,   267,   523,  1047,   522,  1761,
    1047,   525,  1052,  2470,  3452,  1052,  3632,  3455,  1119,  1817,
    1818,  1819,   200,  1845,   365,   378,   294,   205,   299,     4,
     509,    40,   135,   140,     9,  2247,  1788,  2126,   396,   166,
     519,   399,   424,  1121,   171,   112,   319,   320,   198,   516,
      59,   392,    26,  1900,   135,  1807,   523,  1645,    32,   349,
    1812,   254,    12,   399,   456,   243,   512,    17,   514,  1634,
     512,   513,   514,   515,   516,   517,    26,    11,   436,  1187,
      98,   527,   528,   164,     3,   233,  1164,  1165,  1166,    39,
      40,  1169,   474,   208,  3297,   282,   386,   378,  2305,   260,
     287,   110,  2309,   456,   121,     4,  1184,  1185,   485,  1187,
       9,    45,  2696,   522,  1192,   182,   525,   244,  1198,  1199,
     478,  1201,  1198,  1199,   441,  1201,   399,   287,  3673,   521,
     507,   279,   292,     4,   424,  3680,   424,   385,     9,    26,
    1218,  1219,  1872,    77,   521,    32,   333,   519,   474,  3267,
     100,   523,  3590,  1231,  1232,     8,   349,  2690,    11,   177,
      68,    69,    15,   436,   351,  3269,   140,   294,   521,   428,
    1248,   430,   185,  1192,  1252,   456,   424,  1091,  1256,   282,
     247,  1259,   385,     4,   474,   176,   521,   233,     9,   292,
     253,  1105,    45,  1271,   301,   212,   214,   456,   207,    52,
      30,   282,   428,   521,   430,   478,   287,  1772,   166,   385,
    1798,   292,   230,   171,  2817,  1803,   381,     4,  1296,   467,
     398,   424,     9,   241,    77,    13,    14,  2427,   526,  1248,
     119,   424,   530,   279,   521,   483,  2693,   508,   509,   510,
     521,   512,   513,   514,   515,   516,   517,   395,   424,  1979,
     259,   358,    82,   140,   428,   362,   430,   275,   267,   507,
     171,    91,   279,   378,   467,   282,   453,   135,   444,    26,
     279,   386,  2808,   521,   461,   176,   521,  2813,    26,   297,
     483,   474,  2739,   443,    32,   392,   244,   176,    13,    14,
     120,   467,  1914,   483,   454,   485,   164,   150,  2579,   345,
     521,  2218,   311,  2220,   507,   265,   266,   483,   326,   424,
     458,  2844,   521,  1391,  2351,   378,  2578,  1395,   521,   521,
     282,  1886,  1400,  1401,   519,   287,   521,   301,   181,   668,
     669,   507,   671,  2131,  1399,  1413,   294,   519,  2563,   521,
    1399,   523,  1399,   176,   253,   521,  2008,   200,   521,   395,
    1399,   369,   205,  1431,  1432,   364,  2086,   464,  2620,   474,
    2449,   428,   443,   430,  1929,   485,  1444,   197,  3505,  1447,
    2577,  1449,  2579,   454,   428,   521,   430,   386,  1919,   209,
    1945,   343,  1923,   140,   358,  1926,   521,   507,   362,   456,
     243,   521,   140,   456,   385,  2017,   428,   522,   430,   408,
     525,   521,  1480,  1481,   521,  1483,  3543,  1485,  1486,  1974,
    1488,  1489,   458,   521,   301,  1493,  1981,  3620,   392,   287,
     176,   310,   382,   383,   292,  3098,  2221,  2284,  2223,  3600,
    3601,  1509,   521,   424,  2325,  2326,   521,   512,   513,   514,
     515,   516,   517,   461,    26,   135,   299,   521,  2013,  1045,
      32,  2016,  2985,  2562,   522,  2564,  2021,   525,   521,   507,
    1492,   522,  1058,  1546,   525,  1061,  1493,   522,   521,   378,
     525,   358,     5,    12,   164,   362,   467,   605,    17,   607,
     514,  1559,  3619,  1561,   385,  3656,  1564,    26,  1571,   504,
     464,  1569,  1546,  1576,   229,  1578,   385,  1580,    13,    14,
      39,    40,  2349,   522,  1582,   392,   525,  1585,    26,  1546,
      26,   523,   177,   522,    32,   297,    32,  1571,  3655,    13,
      14,   649,  1576,   424,  1578,   522,  1580,  1605,   525,  2986,
     521,  1571,  1610,   504,  1571,   424,  1576,   523,  1578,  1576,
    1580,  1578,   670,  1580,   301,   398,  2598,   456,  1594,   214,
     175,  3154,   522,   301,   310,   525,  1634,   763,   140,   765,
    1594,   100,  1594,   257,  1642,   230,   467,  1645,  1551,   522,
    1553,  1554,   525,  1594,  1594,   443,   241,   464,   467,   112,
     410,   525,   483,   413,   534,   522,   454,   522,   525,  2870,
     525,   521,   282,   522,   483,   522,   525,   287,  2823,   522,
    1678,   522,   292,  1681,   525,   362,   507,   364,   178,   176,
     358,   302,   521,  3286,   362,   565,   566,   182,   507,  1697,
     521,  1699,   140,  1701,   140,    58,  2806,   521,  3197,   385,
       8,   522,   521,    11,   525,   392,   229,    15,  1716,  1717,
      18,    19,    20,   208,   392,     6,  2944,  1727,     9,   182,
     522,  1727,   505,   525,  1053,    16,   504,  1056,    36,   512,
     513,   514,   515,   516,   517,   157,   522,    28,   424,   525,
     358,    32,   157,  1700,   157,   208,   522,  1755,   522,   525,
     157,   525,   247,  2496,   254,  1763,  1764,  2500,  2501,  2502,
     522,    40,   187,   525,  1772,   190,  1774,  1775,  1776,  1777,
    1778,  1779,  1780,   522,   369,   522,   525,  1785,   525,  1787,
     522,   467,   522,   525,   247,  2541,   464,  3250,  3251,   301,
    1798,  1799,   521,  3292,   282,  1803,  1804,   483,   176,  2351,
    1808,  1809,  1810,  1811,   474,  1813,  1814,   302,  3411,  2304,
     282,   691,   522,  1821,   522,   525,   522,   525,    40,   525,
    2597,   507,  2599,   443,   522,  2672,  1834,   525,  2346,    86,
    1838,  1839,  1840,   157,   454,   521,  1844,   522,   152,   302,
     525,   522,   195,   196,   525,   522,   358,   487,   525,   349,
     362,  1859,   166,   301,   470,   301,  1864,   171,   329,   522,
      98,     8,   525,   521,    11,   521,  2653,     8,    15,   157,
      11,    18,    19,    20,    15,    13,    14,   340,  1886,  2861,
     392,  2633,  3546,   521,  3548,  2613,   386,    39,   522,    36,
       8,   525,  1900,    11,  1858,   373,   374,    15,    16,    17,
      18,    19,    20,   157,    45,   522,  1914,   521,   525,   223,
     358,    52,   265,   266,   362,   378,   362,   521,    36,   227,
    3383,  1929,    40,   522,   424,   522,   525,    45,   525,   522,
     244,   521,   525,   428,    52,   430,    77,  1945,   523,   177,
     522,  3404,  3405,   525,   392,   522,   392,   157,   525,    13,
      14,  1009,   464,    13,    14,    13,    14,   297,   453,    77,
     157,   456,  1020,   360,  3463,   428,  1974,   430,  3160,  3633,
      13,    14,   521,  1981,   474,  1983,   214,   435,  3511,   521,
     294,    13,    14,  3002,   447,    13,    14,  1995,     9,   303,
     453,   299,   230,   456,   521,  2008,    13,    14,    13,    14,
      13,    14,   522,   241,   521,  2013,  2014,   426,  2016,  2017,
    1068,  2019,   225,  2021,  3401,  2982,   464,   306,   464,    13,
      14,    13,    14,   230,  2008,   230,  2873,  2874,   230,   382,
     383,    13,    14,    13,    14,    13,    14,   275,  2008,   521,
     181,  2008,  3541,    13,    14,  2053,    13,    14,   304,  2057,
      13,    14,    40,  2061,   242,  2086,    13,    14,     5,   200,
      13,    14,   521,   181,   205,   534,   373,   374,  1126,   269,
     270,   382,   383,   373,   374,  2910,     5,  1135,   373,   374,
     227,   521,   200,   319,   320,  1164,  1165,   205,   326,   521,
    2098,  3319,   521,  1151,   521,     5,     5,   566,   521,     5,
     521,     5,   243,  2598,  1162,  3492,  1164,  1165,   153,   227,
     228,     9,     3,  2151,   484,   521,  2129,   308,   101,   522,
     525,   525,    40,   225,   392,   243,   294,   171,   292,   171,
     242,   369,   521,   435,  2142,   521,    90,   525,   452,   435,
    2153,    58,    58,  2151,   272,  2129,   522,   532,   435,  2157,
     435,   435,   299,   483,   157,   157,    97,   282,   299,  2129,
     282,  1041,  2129,  2755,   282,    40,   521,   285,  2144,  2153,
     521,   282,  3154,  2668,   282,     3,   521,    39,   433,  1059,
    2144,   299,  2144,  2153,   302,   433,  2153,   519,   519,   435,
     435,  2155,   435,  2144,  2144,   435,   523,  2715,   480,   522,
     508,   509,   510,  2211,   512,   513,   514,   515,   516,   517,
     522,   176,   522,  2221,  2222,  2223,   522,   522,   522,     7,
       8,   522,   691,   522,    12,   522,   230,   525,   522,    17,
     522,    11,   522,    21,   360,    23,    24,    25,    26,    27,
     521,  1121,    30,   521,   479,    33,    34,   520,    36,   525,
     525,    39,    40,   525,  2262,   529,   433,   398,   521,  2290,
     287,   532,   521,   435,   152,   187,  2274,   167,   182,   176,
     522,   521,   525,  2281,   461,   223,   510,   272,   166,   395,
     398,   525,   233,   171,  2292,  2293,  2294,  2295,   298,  2297,
     321,   321,   525,   522,   208,   521,  2304,   233,   282,   233,
    2308,  3512,   303,  2311,  1184,  1185,    94,   176,  2316,   338,
     295,    99,   100,   101,   102,   103,     0,   474,   425,   157,
    2328,   157,   521,   521,  2842,   157,   157,   483,    40,   297,
     282,   504,   522,   247,    18,   223,  1394,    21,  2346,   522,
     519,  2349,   504,  2351,     0,    40,  3133,  3103,   522,    33,
      58,   522,  2360,  2361,   297,  2363,   244,    41,   176,   522,
      11,   508,   509,   510,   505,   512,   513,   514,   515,   516,
     517,   512,   513,   514,   515,   516,   517,  2872,   522,  2392,
      40,   171,   522,   522,   187,   522,   521,   505,   302,   521,
     508,   509,   510,   522,   512,   513,   514,   515,   516,   517,
      84,   521,   523,  2411,   522,   522,   294,  2482,  2392,   522,
      94,   520,  2420,  2421,  2422,   303,   522,   522,  2449,  2427,
     504,   522,   176,  2431,   521,  2392,   435,   521,   521,   521,
    2982,   160,     9,   480,   480,    40,   525,   510,  2446,   506,
     298,    97,   298,   525,   458,   252,   435,   282,   157,  2480,
     521,   208,   157,   157,  1512,   289,     8,  3476,   435,    11,
     435,   435,  2470,    15,   378,   289,    18,    19,    20,   435,
     522,   520,    40,   176,  2512,  2513,   360,   483,   295,    40,
     521,  2519,     8,   521,    36,    11,   522,   297,   525,    15,
     157,   287,    18,    19,    20,   176,   152,   522,   520,   522,
     520,  2532,   521,   521,  2512,  2513,   522,    58,    77,   192,
     166,  2519,   148,   205,   428,   171,   430,   522,   176,    45,
     176,  3298,   522,   522,  2532,   522,    52,  2535,   521,  3511,
    2538,   187,   522,   447,   307,   526,   192,    80,   525,   453,
     366,   522,   456,   522,  1602,   297,   467,  3207,  2556,  3209,
    2558,    77,   521,   298,  2562,  2563,  2564,  3075,  2566,   157,
     522,   525,   521,    71,   452,   180,   447,   223,    40,    77,
    3065,    40,   522,   522,    83,   461,   522,  2585,   522,  2587,
     525,   521,    90,   521,   176,  2593,   525,   520,   244,  2597,
    2598,  2599,  2600,  2601,  2602,  2603,  2604,  2605,  2606,  2607,
    2608,  2609,   521,   482,     9,  1485,  1486,   522,  1488,   522,
     522,   119,   520,   121,   525,   308,   512,   522,   520,   522,
    2628,   522,   521,  2631,   466,   522,  2634,    88,   510,  3416,
    1688,   519,   522,   522,   522,   523,   483,  2632,   294,  2647,
     210,   297,   119,  2632,    40,  2632,  3425,   303,   521,   233,
      85,  3379,  2660,  2632,   198,   181,   287,   287,   523,  3154,
    2668,   510,   523,  2627,   523,   435,   523,   435,   523,   523,
     523,  2679,   523,   523,   200,   227,    40,   523,   523,   205,
     523,   525,   523,   523,  1564,  2693,   342,    40,  2696,   282,
     523,  2655,   521,   523,  2658,  2703,  2704,  2705,  2706,   111,
     523,   523,  1582,   523,   212,  1585,   522,  2715,   523,   523,
     366,   523,   523,    40,   523,  1184,   483,   243,   523,   523,
    2728,   523,   523,   523,   523,   523,   523,   515,   523,   517,
     523,  2739,   523,  3510,   522,   297,   523,   525,   521,     9,
     359,   525,  2755,   521,   521,  2753,   534,   299,   342,   198,
     526,   525,    11,   433,   287,   351,   435,   522,   521,   525,
      40,   522,   157,   126,   522,   339,   234,   157,   424,    40,
     374,  2755,   522,   299,   282,   374,   564,   565,   566,   287,
      40,   522,   521,   521,    40,  2755,   461,    40,  2755,   525,
      96,   316,   509,   504,   176,   521,   452,   435,    90,    54,
     136,   521,   287,  2811,   257,   461,    59,   461,   197,  2817,
     447,    30,   300,    71,   521,  2823,    77,   605,   606,   607,
      71,  2829,     9,   522,   480,   333,   482,   483,   522,   376,
     514,   521,   620,    58,  2842,  2843,   624,   522,   529,   176,
     522,   466,  2850,   351,    99,   521,   510,   635,   636,   637,
     279,   297,   447,   641,   642,    40,  1914,   110,   425,  2867,
    1918,    40,    80,   519,  2872,   205,   522,   523,   524,   521,
     125,    40,   398,   300,   300,   521,   392,   522,   666,   667,
     668,   669,   522,   671,  1764,   210,   297,   571,   572,   297,
      59,   146,   521,   526,  1774,   150,  1776,   685,   152,  1779,
     522,   124,  2910,   691,   530,  1785,   373,  1787,   458,   521,
     521,    24,   525,   404,    36,   522,   233,   172,   521,  1799,
     175,   130,   234,   351,  1804,  2866,  2580,   180,  1808,  1809,
    1810,  1811,  1786,  1813,  1814,   756,   620,  2593,   193,  2947,
    2216,   110,   111,  1701,    14,   453,  3464,   606,  2278,  2349,
     119,   635,  2982,   461,   207,  2963,   508,   509,   510,  2017,
     512,   513,   514,   515,   516,   517,  2623,  3431,  2976,  3585,
     758,  3002,  3126,   761,  2982,  3513,  3522,  3578,  2986,   505,
    1219,  3185,   508,   509,   510,  2209,   512,   513,   514,   515,
     516,   517,  2222,   677,  2647,   679,  3510,  2572,  2962,  3520,
    2597,  2206,  3508,  1396,  3012,  2287,   259,     3,  2639,     5,
    2539,   180,  1480,   801,   267,  1431,  3511,  1486,  1493,  1488,
     808,   809,   810,   811,   812,  3358,   279,  2538,  3102,  3463,
    3038,  3288,   287,  3577,  3325,  3678,   824,  3684,   207,  3168,
     295,  3658,  3649,  3630,  3530,  3681,  3054,   619,  3411,  2512,
    2150,  3240,  2151,  3382,  3613,  3049,  3614,  3065,   311,  2519,
    2144,   316,  2167,    36,  1758,  1184,  1208,  3075,  3474,  2412,
    1046,  1207,   756,  1046,  2184,  3369,  1730,  3211,  1757,  1210,
      21,  2153,   635,  1054,  2010,   620,  2392,  1024,   343,  2431,
     259,  2391,  3147,  1449,  3102,  1020,  1020,  1020,   267,  3372,
    1020,  3373,  3555,  1983,  2061,  2168,  3670,  2030,  1827,  1700,
     279,   364,  1567,   282,  2798,  2017,    27,   113,   114,    94,
      -1,    -1,    -1,    -1,    -1,    -1,    99,  3135,   101,    -1,
     103,    -1,   562,   386,  2014,  3173,  3100,  3101,    -1,    -1,
      -1,    -1,   311,    -1,    -1,    -1,  3154,  3155,  3156,    -1,
      -1,    -1,    -1,    -1,    -1,   408,    -1,    -1,    -1,    -1,
    3168,    -1,    -1,    -1,    -1,  3173,  3174,    -1,  3176,  2227,
      -1,  3179,    -1,  2053,    -1,    -1,    -1,    -1,    -1,    -1,
       8,  2061,    -1,    11,  3197,    -1,  3194,    15,    -1,    -1,
      18,    19,    20,    -1,    -1,   364,    -1,    -1,    -1,   195,
     196,  3165,  3166,    -1,    -1,    -1,    -1,    -1,    36,     8,
      -1,    -1,    11,  3197,  2272,    -1,    15,   386,    -1,    18,
      19,    20,  2280,    -1,    -1,  3233,  3234,    -1,    -1,    -1,
    3197,    -1,  2290,    -1,    -1,  1023,  1024,    36,    -1,   408,
    1028,   410,    -1,    -1,   413,    -1,    -1,    -1,    -1,  1037,
    1038,    -1,    -1,  1041,    -1,    -1,    -1,    -1,    -1,  1047,
      -1,    -1,  2142,    -1,  1052,   261,   262,   263,   264,   265,
     266,  1059,    -1,   269,   270,    -1,    -1,    -1,    -1,  3292,
      -1,    -1,    -1,    -1,    -1,    -1,  1074,    -1,  3296,    -1,
    3298,  3329,    40,  2351,  3332,  1764,    -1,    -1,  2356,    -1,
    2358,    -1,    -1,    -1,  2362,  1774,  2364,  1776,  3292,    -1,
    1779,    59,    -1,    -1,    -1,    -1,  1785,    -1,  1787,    -1,
      -1,  3329,    -1,    -1,  3332,  3292,  1010,  3335,    -1,    -1,
    1799,    -1,    -1,  1121,    -1,  1804,    -1,    -1,    -1,  1808,
    1809,  1810,  1811,    -1,  1813,  1814,    -1,    -1,    -1,    -1,
      -1,    -1,   521,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   110,  1047,  3372,    -1,    -1,    -1,  1052,    -1,
      -1,    -1,  3336,    -1,    -1,    -1,    -1,    -1,  1166,    -1,
      -1,  1169,    -1,    -1,    -1,    -1,   382,   383,  3352,    -1,
      -1,    -1,  3356,  3401,    -1,    -1,  1184,  1185,  1082,   227,
      -1,    -1,    -1,    -1,  1192,  3413,    -1,    -1,    -1,  1093,
      -1,    -1,    -1,    -1,    -1,  2295,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   227,    -1,
    1218,  1219,    -1,    -1,    -1,  1119,    -1,    -1,    -1,    -1,
      -1,    -1,  3450,  1231,   874,    -1,    -1,    -1,    -1,    -1,
    3463,    -1,    -1,    -1,    -1,    -1,  3464,  3465,  3466,   207,
    1248,    -1,    -1,    -1,  1252,    -1,  3474,    -1,  1256,    -1,
      -1,   299,    -1,    -1,    -1,  3483,  3484,    -1,    -1,  3463,
      -1,    -1,    -1,    -1,  3492,    -1,    -1,    -1,    -1,    -1,
    3528,    -1,  3530,  3501,    -1,    -1,  3463,    -1,    -1,    -1,
     299,    -1,  3510,  3511,    -1,   501,   502,    -1,    -1,    -1,
      -1,   259,    -1,    -1,  1198,  1199,    -1,  1201,    -1,   267,
    3528,    -1,  3530,    -1,  3532,    -1,  3534,    -1,  3541,    -1,
      -1,   279,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3503,
    2598,    -1,   515,    -1,   517,    -1,    -1,  2427,    -1,   522,
      -1,  2431,   525,    -1,    -1,    -1,    -1,  3541,    -1,    -1,
      -1,     8,  3526,   311,    11,  2623,  2624,    -1,    15,  3577,
      -1,    18,    19,    20,  3541,     8,    -1,    -1,    11,    -1,
      -1,    -1,    15,  3591,    -1,    18,    19,    20,    -1,    36,
    3598,    -1,  3630,  3631,   113,   114,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1391,    -1,  3613,  3614,  1395,    -1,    -1,
      -1,    -1,    45,  1401,    -1,    -1,   364,    -1,    -1,    52,
      -1,    -1,  3630,  3631,    -1,  1413,    -1,  3665,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   386,    -1,
    1070,  3649,    -1,    -1,    77,  3683,    -1,    -1,    -1,    -1,
      -1,   624,    -1,    -1,  3662,    -1,  1444,  3665,    -1,    -1,
     408,  1449,  3670,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  3679,    -1,  2142,    -1,  3683,   195,   196,  2558,    -1,
     508,   509,   510,    -1,   512,   513,   514,   515,   516,   517,
      -1,   562,  1480,  1481,    -1,    -1,    -1,  1485,  1486,    -1,
    1488,  1489,  2760,    -1,    -1,  2585,    -1,    -1,    -1,   508,
     509,   510,    -1,   512,   513,   514,   515,   516,   517,    -1,
    2600,  2601,  2602,  2603,  2604,  2605,  2606,  2607,  2608,  2609,
      -1,    -1,  1162,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   261,   262,   263,   264,   265,   266,   181,    -1,
     269,   270,    -1,    -1,    -1,    -1,    -1,    -1,  1546,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   200,    -1,    -1,
      -1,  1559,   205,  1561,    -1,    -1,  1564,    -1,  1566,  1567,
     227,  1569,    -1,  1571,    -1,   758,    -1,    -1,  1576,    -1,
    1578,    -1,  1580,    -1,  1582,    -1,    -1,  1585,    -1,    -1,
      -1,    -1,  1232,    -1,    -1,    -1,    -1,    -1,  1492,    -1,
     243,    -1,     8,    -1,    -1,    11,  2696,  1605,    -1,    15,
      -1,    -1,  1610,    -1,    -1,    -1,  2295,    -1,   801,    -1,
      -1,    -1,    -1,    -1,    -1,   808,   809,   810,   811,   812,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    45,
      -1,   824,   299,    -1,    -1,    -1,    52,  1645,    -1,    -1,
      -1,    -1,    -1,   382,   383,    -1,   299,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     8,
      -1,    77,    11,    -1,    -1,    -1,    15,  1571,  1676,    18,
      19,    20,  1576,    -1,  1578,    -1,  1580,    -1,    -1,    -1,
      -1,  2959,    -1,    -1,    -1,     8,    -1,    -1,    11,  1697,
    1594,  1699,    15,  1701,    -1,    18,    19,    20,    -1,    -1,
      -1,    -1,    -1,    -1,  2982,    -1,    -1,    -1,  1716,  1717,
      -1,    -1,    -1,    36,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   150,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  2843,  1648,   398,    -1,  1755,    -1,    -1,
    1400,    -1,    -1,    -1,    -1,  1763,  1764,    -1,    -1,    -1,
      -1,    -1,   501,   502,  3042,   181,  1774,  1775,  1776,  1777,
     119,  1779,    -1,    -1,    -1,    -1,    -1,  1785,    -1,  1787,
      -1,  1431,  1432,   874,   200,    -1,    -1,    -1,    -1,   205,
    1798,  1799,    -1,    -1,    -1,  1803,  1804,  1447,    -1,    -1,
    1808,  1809,  1810,  1811,    -1,  1813,  1814,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   562,    -1,  1727,    -1,    -1,  1834,   243,    -1,    -1,
    1838,  1839,  1840,    -1,    -1,  1028,  1844,    -1,    -1,    -1,
      -1,   508,   509,   510,    -1,   512,   513,   514,   515,   516,
     517,  1859,   505,    -1,    -1,   508,   509,   510,    -1,   512,
     513,   514,   515,   516,   517,    -1,    -1,    -1,    -1,  2558,
      -1,    -1,    -1,    -1,    -1,    -1,  3154,    -1,   227,    -1,
      -1,    -1,    -1,   299,    -1,    -1,    -1,    -1,     8,    -1,
      -1,    11,    -1,    -1,    -1,    15,  2585,    -1,    -1,    -1,
      -1,    -1,   562,    -1,   227,    -1,    -1,    -1,    -1,    -1,
      -1,  2600,  2601,  2602,  2603,  2604,  2605,  2606,  2607,  2608,
    2609,    -1,    -1,    -1,    -1,    45,    -1,     8,    -1,    -1,
      11,    -1,    52,    -1,    15,    -1,    -1,    18,    19,    20,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1851,    -1,    -1,
     299,    -1,    -1,    -1,  1858,    36,    -1,    77,    -1,    -1,
      -1,    -1,    -1,   562,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1983,   299,    -1,    -1,  1070,
       0,    -1,   398,    -1,  1634,    -1,    -1,  1995,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2008,    21,    -1,    -1,    -1,    -1,  2014,    -1,    -1,    -1,
      -1,    -1,    32,    -1,    34,    35,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1218,    46,    -1,    -1,    -1,
     150,    51,    -1,    -1,    -1,  3135,    -1,    -1,  1231,    -1,
      60,    -1,  3320,    -1,    -1,  2053,    -1,    -1,    -1,  2057,
      -1,    -1,    72,  2061,    -1,  3155,  3156,    -1,    -1,  1252,
      -1,   181,    -1,    83,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    95,    -1,    97,    -1,  3179,
     200,    -1,    -1,    -1,    -1,   205,    -1,    -1,    -1,   505,
    2098,    -1,    -1,    -1,    -1,   115,   512,   513,   514,   515,
     516,   517,    -1,    -1,  2008,    -1,    -1,     8,    -1,   129,
      11,   131,    -1,   562,    15,    -1,    -1,    18,    19,    20,
     140,  2129,  1772,   243,    -1,    -1,    -1,    -1,   148,    -1,
      -1,    -1,    -1,   874,  2142,    -1,   156,    -1,   158,   159,
      -1,  1232,    -1,    -1,    -1,  2153,   227,    -1,    -1,  2157,
      -1,    -1,   172,    -1,  2843,    -1,   176,    -1,    -1,   508,
     509,   510,    -1,   512,   513,   514,   515,   516,   517,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   299,
      -1,    -1,  2086,    -1,   204,   508,   509,   510,    -1,   512,
     513,   514,   515,   516,   517,    -1,    -1,    -1,    -1,   219,
    2104,    -1,  1395,  2211,    -1,    -1,    -1,    -1,  1401,    -1,
      -1,    -1,    -1,    -1,   874,    -1,  2120,    -1,   299,    -1,
      -1,    -1,    -1,    -1,    -1,  2129,   246,    -1,    -1,    -1,
      -1,    -1,    -1,  3511,    -1,    -1,  1886,    -1,    -1,    -1,
    2144,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2153,
      -1,  2155,    -1,    -1,    -1,    -1,    -1,    -1,     8,    -1,
      -1,    11,    -1,    -1,    -1,    15,  2274,    -1,    18,    19,
      20,    -1,    -1,  2281,    -1,   874,    -1,    -1,   398,  1929,
      -1,    -1,    -1,    -1,  2292,  2293,  2294,  2295,    -1,  2297,
      -1,    -1,    -1,    -1,    -1,  1945,    -1,    -1,    -1,    -1,
    2308,    -1,    -1,  2311,    -1,    -1,    -1,   327,  2316,  1400,
     330,    -1,    -1,  3413,    -1,    -1,    -1,    -1,    -1,    -1,
    2328,    -1,    -1,    -1,  1974,    -1,   227,    -1,    -1,  1070,
      -1,  1981,    -1,    -1,    -1,    -1,    -1,    -1,  2346,    -1,
    1431,  1432,   362,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   371,  2360,  2361,    -1,  2363,  1447,    -1,    -1,    -1,
      -1,    -1,    -1,  2013,    -1,   385,  2016,    -1,    -1,    -1,
      -1,  2021,   392,    -1,    -1,    -1,  1569,   397,    -1,    -1,
      -1,    -1,    -1,    -1,  2392,   505,  2290,    -1,   408,    -1,
      -1,    -1,   512,   513,   514,   515,   516,   517,   299,    -1,
     420,    -1,    -1,  2411,   424,    -1,    -1,    -1,    -1,    -1,
    1070,    -1,  2420,  2421,  2422,    -1,    -1,    -1,    -1,  2427,
      -1,    -1,    -1,  2431,   444,   874,   562,   508,   509,   510,
      -1,   512,   513,   514,   515,   516,   517,    -1,  2446,   459,
      -1,    -1,   462,    -1,    -1,    -1,  3135,   467,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   483,    -1,    -1,  3155,  3156,    -1,    -1,
      -1,  1070,    -1,    -1,    -1,    -1,    -1,   227,    -1,    -1,
      -1,    -1,     8,    -1,    -1,    11,    -1,   507,    -1,    15,
    3179,  1232,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   521,     8,    -1,   524,    11,  1699,    -1,  1701,    15,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    45,
      -1,    -1,    -1,  1716,  2532,    -1,    52,  2535,    -1,    -1,
    2538,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    45,
      -1,    -1,    -1,  1634,    -1,  2449,    52,    -1,  2556,   299,
    2558,    77,    -1,    -1,  2562,  2563,  2564,    -1,  2566,    -1,
      -1,    -1,  1755,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    3670,    77,  1232,    -1,    -1,    -1,  2480,  2585,    -1,  2587,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2600,  2601,  2602,  2603,  2604,  2605,  2606,  2607,
    2608,  2609,    -1,    -1,    -1,    -1,    -1,   508,   509,   510,
      -1,   512,   513,   514,   515,   516,   517,    -1,    -1,    -1,
    2628,  1070,    -1,  2631,   150,    -1,  2634,    -1,  2532,    -1,
      -1,    -1,    -1,  1232,    -1,    -1,    -1,    -1,    -1,  2647,
      -1,  1834,    -1,    -1,   150,  1838,  1839,  1840,    -1,    -1,
      -1,  1844,  2660,    -1,  2304,   181,    -1,    -1,    -1,  1400,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2679,    -1,    -1,   200,   181,    -1,    -1,    -1,   205,
      -1,  1772,    -1,    -1,    -1,    -1,    -1,    -1,  2696,    -1,
    1431,  1432,    -1,    -1,   200,  2703,  2704,  2705,  2706,   205,
      -1,    -1,    -1,    -1,   666,   667,  1447,  2715,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   243,    -1,    -1,
    2728,    -1,    -1,  2627,  3413,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   243,   874,    -1,
    1400,    -1,    -1,    -1,    -1,  2753,    -1,  2755,    -1,    -1,
      -1,  2655,    -1,    -1,  2658,    -1,    -1,    -1,   508,   509,
     510,    -1,   512,   513,   514,   515,   516,   517,    -1,    -1,
      -1,  1431,  1432,   299,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1232,    -1,    -1,    -1,  1447,    -1,    -1,
    2798,    -1,    -1,   299,    -1,  1886,    -1,    -1,    -1,    -1,
      -1,  1400,  1995,  2811,    -1,    -1,    -1,    -1,    -1,  2817,
      -1,    -1,    -1,    -1,  1009,  2823,    -1,    -1,    -1,    -1,
    2470,  2829,    -1,  1018,  1019,   787,   788,    -1,    -1,    -1,
    1025,  1026,  1431,  1432,  2842,  2843,    -1,    -1,  1929,    -1,
      -1,    -1,  2850,    -1,    -1,    -1,    -1,    -1,  1447,    -1,
      -1,  2755,    -1,    -1,  1945,    -1,    -1,    -1,    -1,  2867,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   398,  1068,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1974,    -1,    -1,    -1,    -1,    -1,    -1,
    1981,    -1,   398,  1634,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2013,    -1,    -1,  2016,    -1,    -1,    -1,    -1,
    2021,    -1,    -1,    -1,  1070,    -1,    -1,    -1,    -1,  2947,
    1135,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2598,    -1,
      -1,  1400,    -1,    -1,    -1,  2963,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1162,  2976,  1164,
    1165,    -1,    -1,    -1,  1634,    -1,    -1,    -1,    -1,   505,
     113,   114,  1431,  1432,    -1,    -1,   512,   513,   514,   515,
     516,   517,    -1,    -1,    -1,    -1,    -1,    -1,  1447,   505,
      -1,    -1,    -1,    -1,  3012,    -1,   512,   513,   514,   515,
     516,   517,    -1,    -1,    -1,    -1,    -1,    -1,  2668,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    3038,  1772,    -1,     8,    -1,  1634,    11,    -1,  1233,    -1,
      15,  1236,  1237,  2693,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1015,    -1,    -1,    -1,    -1,  2962,    -1,
      -1,    -1,   195,   196,    -1,  1027,    -1,  3075,  1030,    -1,
      45,  1033,  1034,  1035,  1036,    -1,    -1,    52,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2281,  2739,
    3098,    -1,    -1,    -1,  3102,    -1,  1232,    -1,  3002,    -1,
    2293,  2294,    77,    -1,  2297,    -1,    -1,  1069,    -1,    -1,
      -1,    -1,  1772,    -1,    -1,  2308,    -1,    -1,  2311,    -1,
      -1,    -1,    -1,  2316,  1086,    -1,    -1,  3135,   261,   262,
     263,   264,   265,   266,    -1,    -1,   269,   270,    -1,    -1,
      -1,  1103,    -1,    -1,    -1,  1886,    -1,  3155,  3156,    -1,
      -1,    -1,  1114,  1115,  1116,    -1,  1118,  1119,    -1,    -1,
    3168,    -1,    -1,    -1,    -1,    -1,  3174,    -1,  3176,    -1,
      -1,  3179,    -1,  1772,  3078,   150,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1145,    -1,  1634,  3194,    -1,  1929,  3197,
      -1,    -1,    -1,    -1,    -1,    -1,  3100,  3101,    -1,    -1,
      -1,    -1,    -1,    -1,  1945,    -1,   181,    -1,    -1,    -1,
      -1,    -1,    -1,  2304,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2872,    -1,    -1,   200,  1886,  2420,  2421,  2422,
     205,    -1,    -1,  1974,  1429,    -1,    -1,    -1,  1200,    -1,
    1981,    -1,  1204,  1205,    -1,  1440,    -1,  1442,    -1,   382,
     383,    -1,    -1,    -1,    -1,    -1,    -1,  1452,    -1,    -1,
    2910,  3165,  3166,    -1,  1400,    -1,    -1,    -1,   243,  1929,
      -1,    -1,  2013,    -1,  1469,  2016,    -1,    -1,  3286,    -1,
    2021,    -1,    -1,    -1,  3292,  1945,    -1,  1886,  3296,    -1,
      -1,    -1,    -1,    -1,    -1,  1431,  1432,  1259,    -1,    -1,
      -1,    -1,    -1,  1498,  1499,    -1,    -1,    -1,    -1,  1271,
      -1,  1447,    -1,    -1,  1974,    -1,    -1,    -1,    -1,    -1,
      -1,  1981,    -1,  1772,   299,    -1,    -1,  3335,    -1,    -1,
    1929,    -1,    -1,    -1,  1296,    -1,  2986,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1945,    -1,    -1,    -1,
      -1,    -1,    -1,  2013,    -1,    -1,  2016,    -1,    -1,    -1,
      -1,  2021,    -1,  2556,  3372,  3269,    -1,    -1,   501,   502,
      -1,    -1,    -1,    -1,    -1,  1974,    -1,    -1,    -1,  2470,
      -1,    -1,  1981,    -1,    -1,    -1,    -1,    -1,   521,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  3411,    -1,  3413,    26,    -1,    -1,    -1,
      -1,    -1,    32,    -1,  2013,  3065,    -1,  2016,    -1,    -1,
      40,    -1,  2021,   398,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  3336,    -1,    -1,    -1,    -1,  1886,  2631,    59,
      -1,  2634,  3450,    -1,    -1,    -1,    -1,  1031,  3352,    -1,
      -1,    -1,  3356,    -1,    -1,  3463,  3464,  3465,  3466,    -1,
      -1,    -1,    -1,    -1,     0,    -1,  3474,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1929,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     110,    -1,    -1,  3501,    -1,    -1,  1945,    -1,  1634,    -1,
      -1,    -1,    -1,    -1,  3154,    -1,    -1,  2598,    -1,    -1,
    2703,  2704,  2705,  2706,    -1,    -1,    -1,    -1,    -1,    -1,
     140,    -1,    -1,    -1,  3532,  1974,  3534,    -1,    -1,    -1,
     505,    -1,  1981,  3541,    -1,    -1,    -1,   512,   513,   514,
     515,   516,   517,    -1,    -1,    -1,  1741,  1742,    -1,    -1,
      -1,    -1,    -1,  1515,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    97,    -1,  2304,  2013,    -1,    -1,  2016,    -1,  3577,
      -1,    -1,  2021,    -1,    -1,    -1,    -1,  2668,    -1,    -1,
      -1,     8,    -1,  3591,    11,    -1,    -1,   207,    15,  1551,
    3598,  1553,  1554,    -1,    -1,    -1,    -1,  1792,    -1,  3503,
      -1,    -1,  2693,    -1,  1566,  1567,    -1,  1802,    -1,    -1,
    1805,    -1,    -1,    -1,    -1,    -1,   152,    -1,    45,    -1,
      -1,  1205,  3526,    -1,    -1,    52,    -1,    -1,    -1,    -1,
     166,    -1,    -1,    -1,    -1,   171,  1772,    -1,    -1,   259,
     176,  3649,    -1,    -1,  2304,    -1,    -1,   267,  2739,    -1,
      77,   187,    -1,    -1,  3662,    -1,   192,  2850,    -1,   279,
      -1,    -1,  3670,    -1,    -1,    -1,    -1,  1629,    -1,    -1,
      -1,  3679,    -1,  1635,  1636,  1637,  1638,  1639,  1640,  1641,
      -1,   301,    -1,    -1,  1646,  1647,    -1,   223,    -1,  1651,
      -1,   311,    -1,  1655,  1889,  1890,  1658,  1659,  1660,  1661,
    1662,  1663,  1664,  1665,  1666,  2304,    -1,  1669,   244,    -1,
      -1,    -1,    -1,    -1,  1676,    -1,  1678,    -1,    -1,  1914,
      -1,    -1,    -1,   150,    -1,    -1,    -1,     8,    -1,  2470,
      11,    -1,    -1,    -1,    15,    -1,    -1,    -1,   358,    -1,
    1702,    -1,   362,    -1,   364,    -1,    -1,    -1,    -1,    -1,
    1886,  3401,    -1,    -1,   181,    -1,    -1,    -1,   294,    -1,
      -1,   297,    -1,    -1,    45,    -1,   386,   303,    -1,    -1,
      26,    52,   392,   200,    -1,    -1,    32,    -1,   205,  1741,
    1742,  2872,    -1,    -1,    40,    -1,    -1,    -1,   408,    -1,
      -1,    -1,    -1,  1929,    -1,    -1,    77,    -1,    -1,    -1,
      -1,    -1,    -1,    59,    -1,    -1,   342,    -1,    -1,  1945,
    2470,    -1,    -1,    -1,    -1,    -1,   243,    -1,    -1,  2910,
      -1,    -1,  2017,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     366,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1974,    -1,
      -1,    -1,  3492,    -1,   464,  1981,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   110,  2304,    -1,  2598,    -1,  1821,
       0,  3511,  1824,  1825,    -1,  1827,    -1,    -1,    -1,   150,
      -1,  2470,   299,    -1,    -1,    -1,    -1,  2013,    -1,    -1,
    2016,    -1,    -1,    -1,   140,  2021,    -1,    -1,   424,    -1,
      -1,    -1,    -1,    -1,    -1,  2986,    -1,    -1,    -1,    -1,
     181,    -1,  1864,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   452,    -1,    -1,   200,
      -1,    -1,    -1,    -1,   205,   461,    -1,  2668,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2598,  2134,
      -1,    -1,    -1,    -1,   480,    -1,   482,   483,    -1,    -1,
      -1,   207,  2693,    -1,    -1,  1539,  1540,    97,    -1,    -1,
    1544,    -1,   243,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   398,    -1,  1935,  3065,  3168,  1938,    -1,  1940,  2174,
    2175,  3174,    -1,   519,    -1,    -1,   522,   523,   524,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2739,  2598,
      -1,  3194,    -1,   259,    -1,    -1,  1968,  1969,  2668,    -1,
    1972,   267,   152,    -1,    -1,    -1,    -1,    -1,   299,    -1,
      -1,  2470,    -1,   279,    -1,    -1,   166,    -1,    -1,    -1,
      -1,   171,    -1,  2693,    -1,    -1,   176,    -1,    -1,  2001,
      -1,    -1,  2004,    -1,    -1,   301,    -1,   187,    -1,    -1,
      -1,    -1,   192,    -1,    -1,   311,    -1,  2019,    -1,    -1,
      -1,    -1,    -1,  3154,    -1,    -1,    -1,  2029,    -1,  2668,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   505,  2739,
      -1,    -1,    -1,   223,    -1,   512,   513,   514,   515,   516,
     517,    -1,    -1,  2055,  2693,    -1,    -1,    -1,  2060,    -1,
      -1,  2063,   358,  3296,   244,    -1,   362,    -1,   364,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   398,    -1,    -1,
      -1,     8,    -1,    -1,    11,    -1,    -1,  2322,    15,    -1,
     386,  2872,    -1,    -1,    -1,    -1,   392,    -1,  2100,    -1,
    2739,  2103,  3335,  2105,    -1,    -1,  1730,    -1,    -1,  2598,
      -1,    -1,   408,    -1,   294,    -1,    -1,   297,    45,    -1,
      -1,    -1,    -1,   303,    -1,    52,    -1,    -1,  2304,  2910,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      77,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   342,    -1,    -1,  2167,    -1,    -1,   464,    -1,
      -1,    -1,  2872,    -1,    -1,    -1,    -1,    -1,    -1,  2668,
      -1,    -1,  2184,  2185,   505,    -1,   366,    -1,    -1,    -1,
      -1,   512,   513,   514,   515,   516,   517,    -1,    -1,    -1,
      -1,  2203,    -1,    -1,  2693,  2986,    -1,    -1,    -1,    -1,
    2910,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   150,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  2872,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   424,    -1,    -1,    -1,    -1,    -1,
    2739,    -1,    -1,    -1,   181,    -1,    -1,    -1,    -1,    -1,
    2262,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3501,    -1,
    3401,  2910,   452,   200,    -1,    -1,    -1,    -1,   205,    -1,
      -1,   461,    -1,    -1,  3065,    -1,  2986,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2470,    -1,    -1,    -1,    -1,  3532,
     480,    -1,   482,   483,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2314,    -1,    -1,    -1,   243,    -1,    -1,    -1,
      -1,    -1,  1946,  1947,  1948,  1949,  1950,    -1,    -1,  1953,
    1954,  1955,  1956,  1957,  1958,  1959,  1960,  1961,  1962,   519,
      -1,    -1,   522,   523,   524,    -1,    -1,  2986,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3591,    -1,
      -1,  3492,    -1,  2598,    -1,  3065,    -1,    -1,    -1,    -1,
      -1,    -1,   299,  3154,    -1,    -1,    -1,    -1,    -1,    -1,
    3511,    -1,    -1,  2872,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  3649,    -1,    -1,    -1,
      -1,  2910,  2598,    -1,    -1,    -1,  3065,    -1,    -1,  3662,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2440,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  3679,  2449,    -1,    -1,
      -1,    -1,    -1,    -1,  3154,    -1,  2458,  2081,  2082,  2461,
      -1,  2463,    -1,    -1,  1031,    -1,    -1,    -1,    -1,  2471,
      -1,   398,    -1,  2789,  2790,  2791,  2792,  2479,  2480,    -1,
      -1,  2483,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2668,    -1,    -1,    -1,    -1,  2986,    -1,    -1,
      -1,    -1,     8,    -1,    -1,    11,    -1,    -1,    -1,    15,
      -1,    -1,    -1,    -1,    -1,  3154,    -1,  2693,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2528,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2540,    45,
      -1,    -1,    -1,    -1,    -1,    -1,    52,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  2739,    -1,    -1,    -1,    -1,    -1,  1136,
      -1,    77,    -1,    -1,    -1,    -1,  3065,    -1,   505,    -1,
      -1,    -1,    -1,    -1,    -1,   512,   513,   514,   515,   516,
     517,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1179,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    3401,    -1,    -1,    -1,    -1,    -1,  2861,    -1,    -1,     8,
      -1,  2866,    11,    -1,    -1,    -1,    15,    16,    17,    18,
      19,    20,    -1,    -1,   150,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    36,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  3154,    45,    -1,    -1,    -1,
      -1,    -1,    -1,    52,    -1,   181,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  2918,  2919,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   200,    -1,  2872,    -1,    77,   205,
      -1,  3401,    -1,    -1,    -1,    -1,    -1,    -1,  2710,  2711,
      -1,  3492,    -1,    -1,    -1,    -1,  2718,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2729,    -1,    -1,
    3511,  2733,  2734,    -1,  2910,  1302,  2738,   243,    -1,    -1,
    1307,  2743,    -1,    -1,  2746,  2747,    -1,    -1,    -1,  2751,
    3066,  3067,  3068,  3069,  3070,  3071,  3072,    -1,    -1,    -1,
    3076,  3077,  3401,     8,    -1,  3081,    11,    -1,  3084,    -1,
      15,  3087,  3088,  3089,  3090,  3091,  3092,  3093,  3094,  3095,
    3096,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  3492,   299,    -1,    -1,  2798,    -1,    -1,    -1,
      45,    -1,   181,    -1,    -1,    -1,    -1,    52,    -1,    -1,
    2986,  3511,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   200,    -1,    -1,    -1,    -1,   205,    -1,    -1,    -1,
      -1,    -1,    77,    -1,  2836,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   227,   228,
    2474,  2475,    -1,  3492,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2863,    -1,    -1,   243,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  3511,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3065,
      -1,    -1,   398,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2525,    -1,   282,    -1,   150,   285,    -1,  3143,  3144,
      -1,    -1,  3401,    -1,    -1,    -1,    -1,    -1,    -1,  3154,
     299,    -1,    -1,   302,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   181,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1513,    -1,    -1,  2951,
    3266,    -1,  3268,    -1,  3270,   200,    -1,    -1,    -1,    -1,
     205,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1535,    -1,
    1537,    -1,  1539,  1540,  1541,    -1,    -1,  1544,  3154,    -1,
    1547,    -1,    -1,  1550,    -1,    -1,    -1,    -1,  1555,    -1,
      -1,  1558,    -1,    -1,    -1,    -1,    -1,    -1,   243,   505,
    3002,    -1,    -1,  3492,    -1,    -1,   512,   513,   514,   515,
     516,   517,    -1,    -1,    -1,    -1,  3018,    -1,    -1,   398,
      -1,    -1,  3511,    -1,    -1,    -1,    -1,  3029,  3030,    -1,
      -1,  3033,    -1,  1600,    -1,    -1,    -1,  1604,    -1,    -1,
    1607,  1608,  1609,    -1,    -1,    -1,  1613,    -1,    -1,    -1,
    1617,    -1,    -1,    -1,   299,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2690,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  3390,    -1,    -1,  3393,  3394,    -1,
      -1,    -1,    -1,    -1,    -1,  1031,  3402,    -1,    -1,    -1,
      -1,    -1,    -1,  3409,    -1,    -1,  3098,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  3106,  2729,    -1,     8,  1675,    -1,
      11,    -1,    -1,    -1,    15,    -1,    -1,    18,    19,    20,
      -1,    -1,  3124,    -1,    -1,    -1,   505,    -1,    -1,   508,
     509,   510,    -1,   512,   513,   514,   515,   516,   517,    -1,
      -1,    -1,    -1,    -1,    45,    -1,   525,    -1,    -1,    -1,
      -1,    52,    -1,   398,    -1,    -1,    -1,  1724,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2789,  2790,  2791,  2792,    -1,
      -1,  3487,  3488,  1740,    -1,  3491,    77,    -1,  1745,  3495,
      -1,    -1,  3498,  3499,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  3193,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3211,
      -1,    -1,    -1,  3215,    -1,    -1,    -1,  3219,    -1,    -1,
    2844,    -1,    -1,    -1,    -1,  3401,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  3569,  3570,    -1,    -1,  3573,    -1,    -1,
     505,    -1,    -1,    -1,    -1,    -1,    -1,   512,   513,   514,
     515,   516,   517,    -1,    -1,    -1,  3511,    -1,    -1,    -1,
     181,    -1,    -1,    -1,  3286,     8,    -1,    -1,    11,    -1,
      -1,    -1,    15,    -1,    -1,    -1,    -1,    -1,    -1,   200,
      -1,  3303,    -1,    -1,   205,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  3492,    -1,    -1,    -1,
      -1,    -1,    45,    -1,    -1,    -1,   227,   228,    -1,    52,
      -1,    -1,    -1,    -1,    -1,  3511,    -1,    -1,    -1,    -1,
      -1,    -1,   243,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    77,    -1,    -1,  3359,    -1,    -1,
      -1,  2985,    -1,    -1,  1931,    -1,    -1,  3369,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1943,  1944,    -1,  1946,
    1947,  1948,  1949,  1950,   285,    -1,  1953,  1954,  1955,  1956,
    1957,  1958,  1959,  1960,  1961,  1962,  1963,    -1,   299,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3411,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   150,    -1,    -1,
    3432,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  3066,  3067,  3068,  3069,  3070,  3071,  3072,    -1,
      -1,    -1,  3076,  3077,    -1,    -1,    -1,  3081,   181,    -1,
    3084,    -1,    -1,  3087,  3088,  3089,  3090,  3091,  3092,  3093,
    3094,  3095,  3096,    -1,    -1,    -1,    -1,   200,    -1,    -1,
      -1,    -1,   205,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   398,  2065,    -1,
      -1,    -1,  2069,  2070,  2071,  2072,  2073,  2074,  2075,    -1,
      -1,    -1,    -1,    -1,  2081,  2082,    -1,  2084,  2085,    -1,
     243,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2096,
      -1,    -1,  2099,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2107,  2108,  2109,  2110,  2111,  2112,  2113,  2114,  2115,  2116,
      -1,    -1,  3554,  3555,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2141,    -1,   299,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1539,  1540,    -1,    -1,    -1,  1544,    -1,
    3602,    -1,    -1,    -1,   505,    -1,    -1,   508,   509,   510,
      -1,   512,   513,   514,   515,   516,   517,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  3250,  3251,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  3266,    -1,  3268,    -1,  3270,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  3657,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   398,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     3,    -1,
    2267,  2268,  2269,     8,    -1,    -1,    11,    -1,    -1,    -1,
      15,    16,    17,    18,    19,    20,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1674,    -1,
      -1,    36,    -1,    -1,    -1,    40,    -1,    -1,    -1,    -1,
      45,    -1,    -1,    -1,    -1,    -1,    -1,    52,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3383,
      -1,    -1,    -1,    -1,    -1,    -1,  3390,    -1,    -1,  3393,
    3394,    -1,    77,    -1,    -1,    -1,    -1,    -1,  3402,    -1,
    3404,  3405,   505,    -1,  1730,  3409,    -1,    -1,    -1,   512,
     513,   514,   515,   516,   517,    -1,    -1,    -1,    -1,    -1,
      -1,  2368,  2369,  2370,    -1,    -1,  2373,  2374,  2375,  2376,
    2377,    -1,    -1,    -1,  2381,  2382,  2383,  2384,  2385,  2386,
    2387,  2388,  2389,  2390,    -1,    -1,    -1,    -1,  2395,  2396,
      -1,    -1,    -1,     8,    -1,    -1,    11,    -1,    -1,    -1,
      15,    16,    17,    18,    19,    20,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2423,    -1,    -1,  2426,
      -1,    36,    -1,  3487,  3488,    -1,    -1,  3491,    -1,    -1,
      45,  3495,  2439,    -1,  3498,  3499,   181,    52,    -1,    -1,
      -1,    -1,    -1,  2450,     8,    -1,  2453,    11,  2455,    -1,
      -1,    15,  2459,  2460,    -1,   200,    -1,    -1,    -1,    -1,
     205,    -1,    77,    -1,    -1,    -1,  2473,  2474,  2475,  2476,
      -1,  2478,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    45,   227,   228,     8,    -1,    -1,    11,    52,    -1,
      -1,    15,    16,    17,    18,    19,    20,    -1,   243,    -1,
      -1,    -1,    -1,    -1,    -1,  3569,  3570,    -1,    -1,  3573,
      -1,    -1,    36,    77,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    45,    -1,    -1,    -1,    -1,    -1,    -1,    52,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   282,    -1,    -1,
     285,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2559,    77,   299,    -1,    -1,   302,    -1,    -1,
    1946,  1947,  1948,  1949,  1950,    -1,   181,  1953,  1954,  1955,
    1956,  1957,  1958,  1959,  1960,  1961,  1962,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   200,    -1,    -1,    -1,    -1,
     205,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   227,   228,    -1,    -1,    -1,   181,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   243,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   200,    -1,    -1,    -1,
      -1,   205,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2659,   398,    -1,    -1,    -1,   181,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   282,    -1,    -1,
     285,    -1,    -1,    -1,    -1,    -1,   200,    -1,    -1,   243,
      -1,   205,    -1,  2690,   299,    -1,    -1,   302,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2081,  2082,    -1,    -1,    -1,
      -1,    -1,    -1,   227,   228,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2719,    -1,    -1,    -1,    -1,  2724,    -1,   243,
      -1,    -1,    -1,    -1,    -1,  2732,    -1,    -1,  2735,    -1,
    2737,    -1,    -1,    -1,  2741,   299,    -1,  2744,  2745,    -1,
      -1,  2748,  2749,    -1,    -1,  2752,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   282,    -1,
     505,   285,    -1,   508,   509,   510,    -1,   512,   513,   514,
     515,   516,   517,    -1,    -1,   299,    -1,    -1,   302,    -1,
      -1,    -1,    -1,   398,    -1,    -1,  2793,    -1,    -1,    -1,
    2797,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2814,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   398,    -1,    -1,  2844,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   398,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     505,    -1,    -1,   508,   509,   510,    -1,   512,   513,   514,
     515,   516,   517,    -1,    -1,    -1,    -1,   522,    -1,    -1,
       8,    -1,    -1,    11,    -1,    -1,    -1,    15,    16,    17,
      18,    19,    20,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    36,    -1,
      -1,   505,    -1,    -1,    -1,    -1,    -1,    45,   512,   513,
     514,   515,   516,   517,    52,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2984,  2985,    77,
      -1,   505,    -1,    -1,   508,   509,   510,    -1,   512,   513,
     514,   515,   516,   517,    -1,    -1,    -1,    -1,   522,    -1,
      -1,    -1,    -1,  3010,  3011,    -1,    -1,    -1,    -1,  3016,
      -1,    -1,    -1,    -1,  3021,    -1,  3023,  3024,  3025,    -1,
      -1,  3028,    -1,    -1,  3031,  3032,    -1,    -1,    -1,  3036,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  3061,  3062,  3063,  3064,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   181,    -1,    -1,    -1,     8,  2474,  2475,
      11,    -1,    -1,    -1,    15,    16,    17,    18,    19,    20,
      -1,    -1,   200,    -1,    -1,    -1,    -1,   205,    -1,    -1,
      -1,    -1,    -1,    -1,  3121,    36,    -1,    -1,    -1,    -1,
    3127,    -1,    -1,    -1,    45,    -1,    -1,    -1,    -1,   227,
     228,    52,    -1,  3140,    -1,    -1,    -1,    -1,    -1,  2525,
      -1,    -1,    -1,    -1,    -1,   243,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,     8,    -1,    77,    11,    -1,    -1,
    3167,    15,    16,    17,    18,    19,    20,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    36,    -1,   282,    -1,    -1,   285,    -1,    -1,
      -1,    45,  3199,    -1,    -1,    -1,    -1,    -1,    52,    -1,
      -1,   299,    -1,    -1,   302,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  3221,  3222,  3223,    -1,    -1,    -1,
      -1,    -1,    -1,    77,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  3242,  3243,  3244,  3245,  3246,
    3247,  3248,    -1,  3250,  3251,    -1,  3253,  3254,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  3263,    -1,  3265,    -1,
     181,    -1,    -1,    -1,    -1,  3272,  3273,  3274,  3275,  3276,
    3277,  3278,  3279,  3280,  3281,    -1,    -1,    -1,    -1,   200,
      -1,    -1,    -1,    -1,   205,    -1,    -1,  3294,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  3304,    -1,    -1,
     398,    -1,    -1,    -1,  2690,    -1,   227,   228,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   243,    -1,    -1,    -1,    -1,   181,    -1,    -1,
      -1,     8,    -1,    -1,    11,    -1,    -1,    -1,    15,    16,
      17,    18,    19,    20,    -1,    -1,   200,    -1,    -1,    -1,
    3357,   205,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    36,
      -1,   282,    -1,    -1,   285,    -1,    -1,  3374,    45,    -1,
    3377,    -1,    -1,   227,   228,    52,  3383,    -1,   299,    -1,
      -1,   302,    -1,    -1,  3391,  3392,    -1,    -1,    -1,   243,
      -1,    -1,    -1,    -1,    -1,    -1,  3403,  3404,  3405,  3406,
      77,  3408,    -1,  2789,  2790,  2791,  2792,   505,    -1,    -1,
     508,   509,   510,    -1,   512,   513,   514,   515,   516,   517,
    3427,    -1,    -1,    -1,   522,    -1,    -1,    -1,   282,    -1,
      -1,   285,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   299,    -1,    -1,   302,    -1,
      -1,    -1,    -1,    -1,  3461,    -1,    -1,    -1,  2844,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  3481,    -1,    -1,   398,    -1,  3486,
      -1,    -1,  3489,  3490,    -1,    -1,    -1,  3494,    -1,  3496,
    3497,    -1,    -1,  3500,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   181,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  3524,    -1,    -1,
      -1,    -1,    -1,   200,    -1,    -1,    -1,    -1,   205,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   398,    -1,    -1,    -1,    -1,    -1,
     227,   228,    -1,    -1,    -1,    -1,  3563,  3564,  3565,    -1,
      -1,  3568,    -1,    -1,  3571,  3572,   243,    -1,    -1,     8,
      -1,    -1,    11,    -1,    -1,    -1,    15,    16,    17,    18,
      19,    20,    -1,    -1,   505,    -1,    -1,   508,   509,   510,
      -1,   512,   513,   514,   515,   516,   517,    36,  3605,  2985,
      -1,   522,    -1,    -1,    -1,   282,    45,    -1,   285,  3616,
    3617,  3618,    -1,    52,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   299,    -1,    -1,   302,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    77,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   505,    -1,    -1,   508,   509,   510,    -1,   512,   513,
     514,   515,   516,   517,    -1,    -1,    -1,    -1,   522,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    3066,  3067,  3068,  3069,  3070,  3071,  3072,    -1,    -1,    -1,
    3076,  3077,    23,    -1,    -1,  3081,    -1,    -1,  3084,    -1,
      -1,  3087,  3088,  3089,  3090,  3091,  3092,  3093,  3094,  3095,
    3096,  3097,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   398,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   181,    -1,    -1,    -1,    -1,    78,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   200,    -1,    94,    -1,    -1,   205,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   112,    -1,    -1,    -1,    -1,    -1,    -1,   227,   228,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   243,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     151,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   505,    -1,
     161,   508,   509,   510,    -1,   512,   513,   514,   515,   516,
     517,    -1,   173,   282,    -1,   522,   285,   178,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     299,    -1,    -1,   302,  3250,  3251,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   208,    -1,    -1,
    3266,    -1,  3268,    -1,  3270,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   254,    -1,    -1,    -1,   258,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   398,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   324,    -1,    -1,    -1,  3383,    -1,    -1,
      -1,    -1,    -1,    -1,  3390,    -1,    -1,  3393,  3394,   340,
     341,    -1,    -1,    -1,    -1,    -1,  3402,    -1,  3404,  3405,
      -1,    -1,    -1,  3409,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   375,    -1,    -1,   378,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   386,    -1,    -1,   389,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   505,    -1,    -1,   508,
     509,   510,    -1,   512,   513,   514,   515,   516,   517,   410,
      -1,    -1,    -1,   522,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   424,    -1,    -1,    -1,    -1,    -1,    -1,
     431,  3487,  3488,    -1,    -1,  3491,    -1,    -1,    -1,  3495,
     441,    -1,  3498,  3499,    -1,    -1,   447,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   474,    -1,    -1,     3,     4,     5,     6,
       7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    21,    22,    23,    24,    -1,    26,
      27,    28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,
      -1,    -1,    39,  3569,  3570,    42,    43,  3573,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      -1,    58,    59,    60,    61,    62,    63,    64,    65,    66,
      67,    68,    69,    70,    -1,    72,    73,    74,    75,    76,
      -1,    78,    -1,    80,    81,    82,    83,    84,    85,    86,
      87,    88,    89,    -1,    91,    92,    93,    94,    95,    -1,
      -1,    98,    99,   100,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,   118,   119,   120,    -1,   122,   123,   124,   125,   126,
     127,    -1,   129,    -1,   131,   132,   133,   134,    -1,    -1,
     137,   138,   139,   140,   141,    -1,    -1,    -1,   145,   146,
     147,    -1,   149,   150,   151,    -1,   153,   154,   155,   156,
     157,   158,   159,   160,   161,   162,   163,   164,   165,    -1,
     167,   168,   169,   170,    -1,   172,    -1,   174,   175,   176,
     177,   178,   179,   180,   181,   182,    -1,   184,    -1,    -1,
      -1,   188,   189,    -1,   191,    -1,   193,   194,   195,   196,
     197,   198,   199,   200,   201,   202,   203,   204,    -1,   206,
     207,   208,   209,   210,   211,    -1,   213,   214,   215,   216,
     217,   218,   219,   220,   221,   222,    -1,   224,    -1,   226,
     227,   228,   229,   230,   231,    -1,   233,   234,   235,   236,
     237,    -1,    -1,   240,   241,   242,   243,    -1,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,    -1,   281,   282,   283,   284,   285,   286,
     287,   288,   289,   290,   291,   292,   293,    -1,   295,   296,
      -1,    -1,   299,   300,   301,    -1,    -1,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,    -1,    -1,   321,    -1,   323,   324,   325,   326,
     327,   328,   329,   330,   331,   332,    -1,   334,   335,   336,
     337,   338,    -1,    -1,   341,    -1,   343,   344,   345,   346,
     347,   348,   349,   350,    -1,   352,   353,   354,    -1,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,    -1,
     367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,    -1,
     397,   398,    -1,   400,   401,   402,    -1,    -1,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
     417,   418,   419,   420,    -1,   422,   423,   424,   425,   426,
     427,   428,   429,   430,   431,    -1,   433,   434,    -1,    -1,
      -1,   438,   439,   440,   441,   442,   443,   444,   445,   446,
     447,   448,   449,   450,   451,    -1,    -1,   454,   455,   456,
     457,   458,   459,   460,    -1,   462,   463,   464,   465,   466,
     467,   468,    -1,   470,   471,   472,    -1,   474,   475,   476,
     477,    -1,    -1,    -1,   481,    -1,   483,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,   498,   499,   500,   501,   502,   503,   504,   505,    -1,
     507,    -1,    -1,    -1,    -1,   512,   513,    -1,    -1,    -1,
      -1,    -1,   519,    -1,   521,   522,    -1,    -1,    -1,    -1,
     527,   528,    -1,    -1,    -1,    -1,   533,   534,     3,     4,
       5,     6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    21,    22,    23,    24,
      -1,    26,    27,    28,    29,    30,    31,    32,    33,    -1,
      -1,    -1,    -1,    -1,    39,    -1,    -1,    42,    43,    -1,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    -1,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    -1,    72,    73,    74,
      75,    76,    -1,    78,    -1,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    -1,    91,    92,    93,    94,
      95,    -1,    -1,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,    -1,   122,   123,   124,
     125,   126,   127,    -1,   129,    -1,   131,   132,   133,   134,
     135,    -1,   137,   138,   139,   140,   141,    -1,    -1,    -1,
     145,   146,   147,    -1,   149,   150,   151,    -1,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,   163,   164,
     165,    -1,   167,   168,   169,   170,    -1,   172,    -1,   174,
     175,    -1,   177,   178,   179,   180,   181,   182,    -1,   184,
      -1,    -1,    -1,   188,   189,    -1,   191,    -1,   193,   194,
     195,   196,   197,   198,   199,   200,   201,   202,   203,   204,
      -1,   206,   207,   208,   209,   210,   211,    -1,   213,   214,
     215,   216,   217,   218,   219,   220,   221,   222,    -1,   224,
      -1,   226,   227,   228,   229,   230,   231,    -1,   233,   234,
     235,   236,   237,    -1,    -1,   240,   241,   242,   243,    -1,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,    -1,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,    -1,
     295,   296,    -1,    -1,   299,   300,   301,    -1,    -1,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,    -1,    -1,   321,    -1,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,    -1,   334,
     335,   336,   337,   338,    -1,    -1,   341,    -1,   343,   344,
     345,   346,   347,   348,   349,   350,    -1,   352,   353,   354,
      -1,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,    -1,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
      -1,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,    -1,   397,   398,    -1,   400,   401,   402,    -1,    -1,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,    -1,   422,   423,    -1,
     425,   426,   427,   428,   429,   430,   431,    -1,   433,   434,
      -1,    -1,    -1,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,    -1,    -1,   454,
     455,   456,   457,   458,   459,   460,    -1,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,    -1,   474,
     475,   476,   477,    -1,    -1,    -1,   481,    -1,    -1,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
     505,    -1,    -1,    -1,    -1,    -1,    -1,   512,   513,   514,
      -1,    -1,    -1,    -1,   519,    -1,   521,   522,    -1,    -1,
      -1,    -1,   527,   528,    -1,    -1,    -1,    -1,   533,   534,
       3,     4,     5,     6,     7,     8,     9,    10,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    21,    22,
      23,    24,    -1,    26,    27,    28,    29,    -1,    31,    32,
      33,    -1,    -1,    -1,    -1,    -1,    39,    -1,    -1,    42,
      43,    -1,    45,    46,    47,    48,    49,    50,    51,    52,
      53,    54,    55,    56,    -1,    58,    59,    60,    61,    62,
      63,    64,    65,    66,    67,    68,    69,    70,    -1,    72,
      73,    74,    75,    76,    -1,    78,    -1,    80,    81,    82,
      83,    84,    85,    86,    87,    88,    89,    -1,    91,    92,
      93,    94,    95,    -1,    -1,    98,    99,   100,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,   117,   118,   119,   120,    -1,   122,
     123,   124,   125,   126,   127,    -1,   129,    -1,   131,   132,
     133,   134,    -1,    -1,   137,   138,   139,   140,   141,    -1,
      -1,    -1,   145,   146,   147,    -1,   149,   150,   151,    -1,
     153,   154,   155,   156,   157,   158,   159,   160,   161,   162,
     163,   164,   165,    -1,   167,   168,   169,   170,    -1,   172,
      -1,   174,   175,   176,   177,   178,   179,   180,   181,   182,
      -1,   184,    -1,    -1,    -1,   188,   189,    -1,   191,    -1,
     193,   194,   195,   196,   197,   198,   199,   200,   201,   202,
     203,   204,    -1,   206,   207,   208,   209,   210,   211,    -1,
     213,   214,   215,   216,   217,   218,   219,   220,   221,   222,
      -1,   224,    -1,   226,   227,   228,   229,   230,   231,    -1,
     233,   234,   235,   236,   237,    -1,    -1,   240,   241,   242,
     243,    -1,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,    -1,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,    -1,   295,   296,    -1,    -1,   299,   300,   301,    -1,
      -1,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,    -1,    -1,   321,    -1,
     323,   324,   325,   326,   327,   328,   329,   330,   331,   332,
      -1,   334,   335,   336,   337,   338,    -1,    -1,   341,    -1,
     343,   344,   345,   346,   347,   348,   349,   350,    -1,   352,
     353,   354,    -1,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,    -1,   367,   368,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,   385,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,    -1,   397,   398,    -1,   400,   401,   402,
      -1,    -1,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,   417,   418,   419,   420,    -1,   422,
     423,   424,   425,   426,   427,   428,   429,   430,   431,    -1,
     433,   434,    -1,    -1,    -1,   438,   439,   440,   441,   442,
     443,   444,   445,   446,   447,   448,   449,   450,   451,    -1,
      -1,   454,   455,   456,   457,   458,   459,   460,    -1,   462,
     463,   464,   465,   466,   467,   468,    -1,   470,   471,   472,
      -1,   474,   475,   476,   477,    -1,    -1,    -1,   481,    -1,
     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   500,   501,   502,
     503,   504,   505,    -1,   507,    -1,    -1,    -1,    -1,   512,
     513,    -1,    -1,    -1,    -1,    -1,   519,    -1,   521,    -1,
      -1,    -1,    -1,    -1,   527,   528,    -1,    -1,    -1,    -1,
     533,   534,     3,     4,     5,     6,     7,     8,     9,    10,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      21,    22,    23,    24,    -1,    26,    27,    28,    29,    -1,
      31,    32,    33,    -1,    -1,    -1,    -1,    -1,    39,    -1,
      -1,    42,    43,    -1,    45,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    58,    59,    60,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      -1,    72,    73,    74,    75,    76,    -1,    78,    -1,    80,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    -1,
      91,    92,    93,    94,    95,    -1,    -1,    98,    99,   100,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
      -1,   122,   123,   124,   125,   126,   127,    -1,   129,    -1,
     131,   132,   133,   134,    -1,    -1,   137,   138,   139,   140,
     141,    -1,    -1,    -1,   145,   146,   147,    -1,   149,   150,
     151,    -1,   153,   154,   155,   156,   157,   158,   159,   160,
     161,   162,   163,   164,   165,    -1,   167,   168,   169,   170,
      -1,   172,    -1,   174,   175,   176,   177,   178,   179,   180,
     181,   182,    -1,   184,    -1,    -1,    -1,   188,   189,    -1,
     191,    -1,   193,   194,   195,   196,   197,   198,   199,   200,
     201,   202,   203,   204,    -1,   206,   207,   208,   209,   210,
     211,    -1,   213,   214,   215,   216,   217,   218,   219,   220,
     221,   222,    -1,   224,    -1,   226,   227,   228,   229,   230,
     231,    -1,   233,   234,   235,   236,   237,    -1,   239,   240,
     241,   242,   243,    -1,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,    -1,
     281,   282,   283,   284,   285,   286,   287,   288,   289,   290,
     291,   292,   293,    -1,   295,   296,    -1,    -1,   299,   300,
     301,    -1,    -1,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,    -1,    -1,
     321,    -1,   323,   324,   325,   326,   327,   328,   329,   330,
     331,   332,    -1,   334,   335,   336,   337,   338,    -1,    -1,
     341,    -1,   343,   344,   345,   346,   347,   348,   349,   350,
      -1,   352,   353,   354,    -1,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,    -1,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,    -1,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,    -1,   397,   398,    -1,   400,
     401,   402,    -1,    -1,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,   417,   418,   419,   420,
      -1,   422,   423,    -1,   425,   426,   427,   428,   429,   430,
     431,    -1,   433,   434,    -1,    -1,   437,   438,   439,   440,
     441,   442,   443,   444,   445,   446,   447,   448,   449,   450,
     451,    -1,    -1,   454,   455,   456,   457,   458,   459,   460,
      -1,   462,   463,   464,   465,   466,   467,   468,    -1,   470,
     471,   472,    -1,   474,   475,   476,   477,    -1,    -1,    -1,
     481,    -1,    -1,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,   499,   500,
     501,   502,   503,   504,   505,    -1,    -1,    -1,    -1,    -1,
      -1,   512,   513,    -1,    -1,    -1,    -1,    -1,   519,    -1,
     521,    -1,    -1,    -1,    -1,    -1,   527,   528,    -1,    -1,
      -1,    -1,   533,   534,     3,     4,     5,     6,     7,     8,
       9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    21,    22,    23,    24,    -1,    26,    27,    28,
      29,    30,    31,    32,    33,    -1,    -1,    -1,    37,    -1,
      39,    -1,    -1,    42,    43,    -1,    45,    46,    47,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    -1,    58,
      59,    60,    61,    62,    63,    64,    65,    66,    67,    68,
      69,    70,    -1,    72,    73,    74,    75,    76,    -1,    78,
      -1,    80,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    -1,    91,    92,    93,    94,    95,    -1,    -1,    98,
      99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
     119,   120,    -1,   122,   123,   124,   125,   126,   127,    -1,
     129,    -1,   131,   132,   133,   134,    -1,    -1,   137,   138,
     139,   140,   141,    -1,    -1,    -1,   145,   146,   147,    -1,
     149,   150,   151,    -1,   153,   154,   155,   156,   157,   158,
     159,   160,   161,   162,   163,   164,   165,    -1,   167,   168,
     169,   170,    -1,   172,    -1,   174,   175,    -1,   177,   178,
     179,   180,   181,   182,    -1,   184,    -1,    -1,    -1,   188,
     189,    -1,   191,    -1,   193,   194,   195,   196,   197,   198,
     199,   200,   201,   202,   203,   204,    -1,   206,   207,   208,
     209,   210,   211,    -1,   213,   214,   215,   216,   217,   218,
     219,   220,   221,   222,    -1,   224,    -1,   226,   227,   228,
     229,   230,   231,    -1,   233,   234,   235,   236,   237,    -1,
      -1,   240,   241,   242,   243,    -1,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,    -1,   281,   282,   283,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,    -1,   295,   296,    -1,    -1,
     299,   300,   301,    -1,    -1,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
      -1,    -1,   321,    -1,   323,   324,   325,   326,   327,   328,
     329,   330,   331,   332,    -1,   334,   335,   336,   337,   338,
      -1,    -1,   341,    -1,   343,   344,   345,   346,   347,   348,
     349,   350,    -1,   352,   353,   354,    -1,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,    -1,   367,   368,
     369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,    -1,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,    -1,   397,   398,
      -1,   400,   401,   402,   403,    -1,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,   417,   418,
     419,   420,    -1,   422,   423,    -1,   425,   426,   427,   428,
     429,   430,   431,    -1,   433,   434,    -1,    -1,    -1,   438,
     439,   440,   441,   442,   443,   444,   445,   446,   447,   448,
     449,   450,   451,    -1,    -1,   454,   455,   456,   457,   458,
     459,   460,    -1,   462,   463,   464,   465,   466,   467,   468,
      -1,   470,   471,   472,    -1,   474,   475,   476,   477,    -1,
      -1,    -1,   481,    -1,    -1,   484,   485,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
     499,   500,   501,   502,   503,   504,   505,    -1,    -1,    -1,
      -1,    -1,    -1,   512,   513,    -1,    -1,    -1,    -1,    -1,
     519,    -1,   521,    -1,    -1,    -1,    -1,    -1,   527,   528,
      -1,    -1,    -1,    -1,   533,   534,     3,     4,     5,     6,
       7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    21,    22,    23,    24,    -1,    26,
      27,    28,    29,    30,    31,    32,    33,    -1,    -1,    -1,
      -1,    -1,    39,    -1,    -1,    42,    43,    -1,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      -1,    58,    59,    60,    61,    62,    63,    64,    65,    66,
      67,    68,    69,    70,    -1,    72,    73,    74,    75,    76,
      -1,    78,    -1,    80,    81,    82,    83,    84,    85,    86,
      87,    88,    89,    -1,    91,    92,    93,    94,    95,    -1,
      -1,    98,    99,   100,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,   118,   119,   120,    -1,   122,   123,   124,   125,   126,
     127,    -1,   129,    -1,   131,   132,   133,   134,    -1,    -1,
     137,   138,   139,   140,   141,    -1,    -1,    -1,   145,   146,
     147,    -1,   149,   150,   151,    -1,   153,   154,   155,   156,
     157,   158,   159,   160,   161,   162,   163,   164,   165,    -1,
     167,   168,   169,   170,    -1,   172,    -1,   174,   175,    -1,
     177,   178,   179,   180,   181,   182,    -1,   184,    -1,    -1,
      -1,   188,   189,    -1,   191,    -1,   193,   194,   195,   196,
     197,   198,   199,   200,   201,   202,   203,   204,    -1,   206,
     207,   208,   209,   210,   211,    -1,   213,   214,   215,   216,
     217,   218,   219,   220,   221,   222,    -1,   224,    -1,   226,
     227,   228,   229,   230,   231,    -1,   233,   234,   235,   236,
     237,    -1,    -1,   240,   241,   242,   243,    -1,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,    -1,   281,   282,   283,   284,   285,   286,
     287,   288,   289,   290,   291,   292,   293,    -1,   295,   296,
      -1,    -1,   299,   300,   301,    -1,    -1,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,    -1,    -1,   321,    -1,   323,   324,   325,   326,
     327,   328,   329,   330,   331,   332,    -1,   334,   335,   336,
     337,   338,    -1,    -1,   341,    -1,   343,   344,   345,   346,
     347,   348,   349,   350,    -1,   352,   353,   354,    -1,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,    -1,
     367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,    -1,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,    -1,
     397,   398,    -1,   400,   401,   402,    -1,    -1,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
     417,   418,   419,   420,    -1,   422,   423,    -1,   425,   426,
     427,   428,   429,   430,   431,    -1,   433,   434,    -1,    -1,
      -1,   438,   439,   440,   441,   442,   443,   444,   445,   446,
     447,   448,   449,   450,   451,    -1,    -1,   454,   455,   456,
     457,   458,   459,   460,    -1,   462,   463,   464,   465,   466,
     467,   468,    -1,   470,   471,   472,    -1,   474,   475,   476,
     477,    -1,    -1,    -1,   481,    -1,    -1,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,   498,   499,   500,   501,   502,   503,   504,   505,    -1,
      -1,    -1,    -1,    -1,    -1,   512,   513,   514,    -1,    -1,
      -1,    -1,   519,    -1,   521,    -1,    -1,    -1,    -1,    -1,
     527,   528,    -1,    -1,    -1,    -1,   533,   534,     3,     4,
       5,     6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    21,    22,    23,    24,
      -1,    26,    27,    28,    29,    30,    31,    32,    33,    -1,
      -1,    -1,    -1,    -1,    39,    -1,    -1,    42,    43,    -1,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    -1,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    -1,    72,    73,    74,
      75,    76,    -1,    78,    -1,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    -1,    91,    92,    93,    94,
      95,    -1,    -1,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,    -1,   122,   123,   124,
     125,   126,   127,    -1,   129,    -1,   131,   132,   133,   134,
      -1,    -1,   137,   138,   139,   140,   141,    -1,    -1,    -1,
     145,   146,   147,    -1,   149,   150,   151,    -1,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,   163,   164,
     165,    -1,   167,   168,   169,   170,    -1,   172,    -1,   174,
     175,    -1,   177,   178,   179,   180,   181,   182,    -1,   184,
      -1,    -1,    -1,   188,   189,    -1,   191,    -1,   193,   194,
     195,   196,   197,   198,   199,   200,   201,   202,   203,   204,
      -1,   206,   207,   208,   209,   210,   211,    -1,   213,   214,
     215,   216,   217,   218,   219,   220,   221,   222,    -1,   224,
      -1,   226,   227,   228,   229,   230,   231,    -1,   233,   234,
     235,   236,   237,    -1,    -1,   240,   241,   242,   243,    -1,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,    -1,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,    -1,
     295,   296,    -1,    -1,   299,   300,   301,    -1,    -1,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,    -1,    -1,   321,    -1,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,    -1,   334,
     335,   336,   337,   338,    -1,    -1,   341,    -1,   343,   344,
     345,   346,   347,   348,   349,   350,    -1,   352,   353,   354,
      -1,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,    -1,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
      -1,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,    -1,   397,   398,    -1,   400,   401,   402,    -1,    -1,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,    -1,   422,   423,    -1,
     425,   426,   427,   428,   429,   430,   431,    -1,   433,   434,
      -1,    -1,    -1,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,    -1,    -1,   454,
     455,   456,   457,   458,   459,   460,    -1,   462,   463,   464,
     465,   466,   467,   468,    -1,   470,   471,   472,    -1,   474,
     475,   476,   477,    -1,    -1,    -1,   481,    -1,    -1,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
     505,    -1,    -1,    -1,    -1,    -1,    -1,   512,   513,   514,
      -1,    -1,    -1,    -1,   519,    -1,   521,    -1,    -1,    -1,
      -1,    -1,   527,   528,    -1,    -1,    -1,    -1,   533,   534,
       3,     4,     5,     6,     7,     8,     9,    10,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    21,    22,
      23,    24,    -1,    26,    27,    28,    29,    -1,    31,    32,
      33,    -1,    -1,    -1,    -1,    -1,    39,    -1,    -1,    42,
      43,    -1,    45,    46,    47,    48,    49,    50,    51,    52,
      53,    54,    55,    56,    -1,    58,    59,    60,    61,    62,
      63,    64,    65,    66,    67,    68,    69,    70,    -1,    72,
      73,    74,    75,    76,    -1,    78,    -1,    80,    81,    82,
      83,    84,    85,    86,    87,    88,    89,    -1,    91,    92,
      93,    94,    95,    -1,    -1,    98,    99,   100,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,   117,   118,   119,   120,    -1,   122,
     123,   124,   125,   126,   127,    -1,   129,    -1,   131,   132,
     133,   134,    -1,    -1,   137,   138,   139,   140,   141,    -1,
      -1,    -1,   145,   146,   147,    -1,   149,   150,   151,    -1,
     153,   154,   155,   156,   157,   158,   159,   160,   161,   162,
     163,   164,   165,    -1,   167,   168,   169,   170,    -1,   172,
      -1,   174,   175,    -1,   177,   178,   179,   180,   181,   182,
      -1,   184,    -1,    -1,    -1,   188,   189,    -1,   191,    -1,
     193,   194,   195,   196,   197,   198,   199,   200,   201,   202,
     203,   204,    -1,   206,   207,   208,   209,   210,   211,    -1,
     213,   214,   215,   216,   217,   218,   219,   220,   221,   222,
      -1,   224,    -1,   226,   227,   228,   229,   230,   231,    -1,
     233,   234,   235,   236,   237,    -1,    -1,   240,   241,   242,
     243,    -1,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,    -1,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,    -1,   295,   296,    -1,    -1,   299,   300,   301,    -1,
      -1,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,    -1,    -1,   321,    -1,
     323,   324,   325,   326,   327,   328,   329,   330,   331,   332,
      -1,   334,   335,   336,   337,   338,    -1,    -1,   341,    -1,
     343,   344,   345,   346,   347,   348,   349,   350,    -1,   352,
     353,   354,    -1,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,    -1,   367,   368,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,    -1,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,    -1,   397,   398,    -1,   400,   401,   402,
      -1,    -1,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,   417,   418,   419,   420,    -1,   422,
     423,    -1,   425,   426,   427,   428,   429,   430,   431,    -1,
     433,   434,    -1,    -1,    -1,   438,   439,   440,   441,   442,
     443,   444,   445,   446,   447,   448,   449,   450,   451,    -1,
      -1,   454,   455,   456,   457,   458,   459,   460,    -1,   462,
     463,   464,   465,   466,   467,   468,    -1,   470,   471,   472,
      -1,   474,   475,   476,   477,    -1,    -1,    -1,   481,    -1,
      -1,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   500,   501,   502,
     503,   504,   505,    -1,    -1,    -1,    -1,    -1,    -1,   512,
     513,   514,    -1,    -1,    -1,    -1,   519,    -1,   521,    -1,
      -1,    -1,    -1,    -1,   527,   528,    -1,    -1,    -1,    -1,
     533,   534,     3,     4,     5,     6,     7,     8,     9,    10,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      21,    22,    23,    24,    -1,    26,    27,    28,    29,    30,
      31,    32,    33,    -1,    -1,    -1,    -1,    -1,    39,    -1,
      -1,    42,    43,    -1,    45,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    -1,    58,    59,    60,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      -1,    72,    73,    74,    75,    76,    -1,    78,    -1,    80,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    -1,
      91,    92,    93,    94,    95,    -1,    -1,    98,    99,   100,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
      -1,   122,   123,   124,   125,   126,   127,    -1,   129,    -1,
     131,   132,   133,   134,    -1,    -1,   137,   138,   139,   140,
     141,    -1,    -1,    -1,   145,   146,   147,    -1,   149,   150,
     151,    -1,   153,   154,   155,   156,   157,   158,   159,   160,
     161,   162,   163,   164,   165,    -1,   167,   168,   169,   170,
      -1,   172,    -1,   174,   175,    -1,   177,   178,   179,   180,
     181,   182,    -1,   184,    -1,    -1,    -1,   188,   189,    -1,
     191,    -1,   193,   194,   195,   196,   197,   198,   199,   200,
     201,   202,   203,   204,    -1,   206,   207,   208,   209,   210,
     211,    -1,   213,   214,   215,   216,   217,   218,   219,   220,
     221,   222,    -1,   224,    -1,   226,   227,   228,   229,   230,
     231,    -1,   233,   234,   235,   236,   237,    -1,    -1,   240,
     241,   242,   243,    -1,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,    -1,
     281,   282,   283,   284,   285,   286,   287,   288,   289,   290,
     291,   292,   293,    -1,   295,   296,    -1,    -1,   299,   300,
     301,    -1,    -1,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,    -1,    -1,
     321,    -1,   323,   324,   325,   326,   327,   328,   329,   330,
     331,   332,    -1,   334,   335,   336,   337,   338,    -1,    -1,
     341,    -1,   343,   344,   345,   346,   347,   348,   349,   350,
      -1,   352,   353,   354,    -1,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,    -1,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,    -1,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,    -1,   397,   398,    -1,   400,
     401,   402,    -1,    -1,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,   417,   418,   419,   420,
      -1,   422,   423,    -1,   425,   426,   427,   428,   429,   430,
     431,    -1,   433,   434,    -1,    -1,    -1,   438,   439,   440,
     441,   442,   443,   444,   445,   446,   447,   448,   449,   450,
     451,    -1,    -1,   454,   455,   456,   457,   458,   459,   460,
      -1,   462,   463,   464,   465,   466,   467,   468,    -1,   470,
     471,   472,    -1,   474,   475,   476,   477,    -1,    -1,    -1,
     481,    -1,    -1,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,   499,   500,
     501,   502,   503,   504,   505,    -1,    -1,    -1,    -1,    -1,
      -1,   512,   513,    -1,    -1,    -1,    -1,    -1,   519,    -1,
     521,    -1,    -1,    -1,    -1,    -1,   527,   528,    -1,    -1,
      -1,    -1,   533,   534,     3,     4,     5,     6,     7,     8,
       9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    21,    22,    23,    24,    -1,    26,    27,    28,
      29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,
      39,    -1,    -1,    42,    43,    -1,    45,    46,    47,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    -1,    58,
      59,    60,    61,    62,    63,    64,    65,    66,    67,    68,
      69,    70,    -1,    72,    73,    74,    75,    76,    -1,    78,
      -1,    80,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    -1,    91,    92,    93,    94,    95,    -1,    -1,    98,
      99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
     119,   120,    -1,   122,   123,   124,   125,   126,   127,    -1,
     129,    -1,   131,   132,   133,   134,    -1,    -1,   137,   138,
     139,   140,   141,    -1,    -1,    -1,   145,   146,   147,    -1,
     149,   150,   151,    -1,   153,   154,   155,   156,   157,   158,
     159,   160,   161,   162,   163,   164,   165,    -1,   167,   168,
     169,   170,    -1,   172,    -1,   174,   175,   176,   177,   178,
     179,   180,   181,   182,    -1,   184,    -1,    -1,    -1,   188,
     189,    -1,   191,    -1,   193,   194,   195,   196,   197,   198,
     199,   200,   201,   202,   203,   204,    -1,   206,   207,   208,
     209,   210,   211,    -1,   213,   214,   215,   216,   217,   218,
     219,   220,   221,   222,    -1,   224,    -1,   226,   227,   228,
     229,   230,   231,    -1,   233,   234,   235,   236,   237,    -1,
      -1,   240,   241,   242,   243,    -1,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,    -1,   281,   282,   283,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,    -1,   295,   296,    -1,    -1,
     299,   300,   301,    -1,    -1,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
      -1,    -1,   321,    -1,   323,   324,   325,   326,   327,   328,
     329,   330,   331,   332,    -1,   334,   335,   336,   337,   338,
      -1,    -1,   341,    -1,   343,   344,   345,   346,   347,   348,
     349,   350,    -1,   352,   353,   354,    -1,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,    -1,   367,   368,
     369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,    -1,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,    -1,   397,   398,
      -1,   400,   401,   402,    -1,    -1,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,   417,   418,
     419,   420,    -1,   422,   423,    -1,   425,   426,   427,   428,
     429,   430,   431,    -1,   433,   434,    -1,    -1,    -1,   438,
     439,   440,   441,   442,   443,   444,   445,   446,   447,   448,
     449,   450,   451,    -1,    -1,   454,   455,   456,   457,   458,
     459,   460,    -1,   462,   463,   464,   465,   466,   467,   468,
      -1,   470,   471,   472,    -1,   474,   475,   476,   477,    -1,
      -1,    -1,   481,    -1,    -1,   484,   485,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
     499,   500,   501,   502,   503,   504,   505,    -1,    -1,    -1,
      -1,    -1,    -1,   512,   513,    -1,    -1,    -1,    -1,    -1,
     519,    -1,   521,    -1,    -1,    -1,    -1,    -1,   527,   528,
      -1,    -1,    -1,    -1,   533,   534,     3,     4,     5,     6,
       7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    21,    22,    23,    24,    -1,    26,
      27,    28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,
      -1,    -1,    39,    -1,    -1,    42,    43,    -1,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      -1,    58,    59,    60,    61,    62,    63,    64,    65,    66,
      67,    68,    69,    70,    -1,    72,    73,    74,    75,    76,
      -1,    78,    -1,    80,    81,    82,    83,    84,    85,    86,
      87,    88,    89,    -1,    91,    92,    93,    94,    95,    -1,
      -1,    98,    99,   100,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,   118,   119,   120,    -1,   122,   123,   124,   125,   126,
     127,    -1,   129,    -1,   131,   132,   133,   134,    -1,    -1,
     137,   138,   139,   140,   141,    -1,    -1,    -1,   145,   146,
     147,    -1,   149,   150,   151,    -1,   153,   154,   155,   156,
     157,   158,   159,   160,   161,   162,   163,   164,   165,    -1,
     167,   168,   169,   170,    -1,   172,    -1,   174,   175,    -1,
     177,   178,   179,   180,   181,   182,    -1,   184,    -1,    -1,
      -1,   188,   189,    -1,   191,    -1,   193,   194,   195,   196,
     197,   198,   199,   200,   201,   202,   203,   204,    -1,   206,
     207,   208,   209,   210,   211,    -1,   213,   214,   215,   216,
     217,   218,   219,   220,   221,   222,    -1,   224,    -1,   226,
     227,   228,   229,   230,   231,    -1,   233,   234,   235,   236,
     237,    -1,    -1,   240,   241,   242,   243,    -1,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,    -1,   281,   282,   283,   284,   285,   286,
     287,   288,   289,   290,   291,   292,   293,    -1,   295,   296,
      -1,    -1,   299,   300,   301,    -1,    -1,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,    -1,    -1,   321,    -1,   323,   324,   325,   326,
     327,   328,   329,   330,   331,   332,    -1,   334,   335,   336,
     337,   338,    -1,    -1,   341,    -1,   343,   344,   345,   346,
     347,   348,   349,   350,    -1,   352,   353,   354,    -1,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,    -1,
     367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,    -1,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,    -1,
     397,   398,    -1,   400,   401,   402,    -1,    -1,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
     417,   418,   419,   420,    -1,   422,   423,    -1,   425,   426,
     427,   428,   429,   430,   431,    -1,   433,   434,    -1,    -1,
      -1,   438,   439,   440,   441,   442,   443,   444,   445,   446,
     447,   448,   449,   450,   451,    -1,    -1,   454,   455,   456,
     457,   458,   459,   460,    -1,   462,   463,   464,   465,   466,
     467,   468,    -1,   470,   471,   472,    -1,   474,   475,   476,
     477,    -1,    -1,    -1,   481,    -1,    -1,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,   498,   499,   500,   501,   502,   503,   504,   505,    -1,
      -1,    -1,    -1,    -1,    -1,   512,   513,    -1,    -1,    -1,
      -1,    -1,   519,    -1,   521,   522,    -1,    -1,    -1,    -1,
     527,   528,    -1,    -1,    -1,    -1,   533,   534,     3,     4,
       5,     6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    21,    22,    23,    24,
      -1,    26,    27,    28,    29,    -1,    31,    32,    33,    -1,
      -1,    -1,    -1,    -1,    39,    -1,    -1,    42,    43,    -1,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    -1,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    -1,    72,    73,    74,
      75,    76,    -1,    78,    -1,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    -1,    91,    92,    93,    94,
      95,    -1,    -1,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,    -1,   122,   123,   124,
     125,   126,   127,    -1,   129,    -1,   131,   132,   133,   134,
      -1,    -1,   137,   138,   139,   140,   141,    -1,    -1,    -1,
     145,   146,   147,    -1,   149,   150,   151,    -1,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,   163,   164,
     165,    -1,   167,   168,   169,   170,    -1,   172,    -1,   174,
     175,    -1,   177,   178,   179,   180,   181,   182,    -1,   184,
      -1,    -1,    -1,   188,   189,    -1,   191,    -1,   193,   194,
     195,   196,   197,   198,   199,   200,   201,   202,   203,   204,
      -1,   206,   207,   208,   209,   210,   211,    -1,   213,   214,
     215,   216,   217,   218,   219,   220,   221,   222,    -1,   224,
      -1,   226,   227,   228,   229,   230,   231,    -1,   233,   234,
     235,   236,   237,    -1,    -1,   240,   241,   242,   243,    -1,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,    -1,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,    -1,
     295,   296,    -1,    -1,   299,   300,   301,    -1,    -1,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,    -1,    -1,   321,    -1,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,    -1,   334,
     335,   336,   337,   338,    -1,    -1,   341,    -1,   343,   344,
     345,   346,   347,   348,   349,   350,    -1,   352,   353,   354,
      -1,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,    -1,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
      -1,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,    -1,   397,   398,    -1,   400,   401,   402,    -1,    -1,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,    -1,   422,   423,    -1,
     425,   426,   427,   428,   429,   430,   431,    -1,   433,   434,
      -1,    -1,    -1,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,    -1,    -1,   454,
     455,   456,   457,   458,   459,   460,    -1,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,    -1,   474,
     475,   476,   477,    -1,    -1,    -1,   481,    -1,    -1,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
     505,    -1,    -1,    -1,    -1,    -1,    -1,   512,   513,    -1,
      -1,    -1,    -1,    -1,   519,    -1,   521,    -1,    -1,    -1,
      -1,    -1,   527,   528,    -1,    -1,    -1,    -1,   533,   534,
       3,     4,     5,     6,     7,     8,     9,    10,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    21,    22,
      23,    24,    -1,    26,    27,    28,    29,    -1,    31,    32,
      33,    -1,    -1,    -1,    -1,    -1,    39,    -1,    -1,    42,
      43,    -1,    45,    46,    47,    48,    49,    50,    51,    52,
      53,    54,    55,    56,    -1,    58,    59,    60,    61,    62,
      63,    64,    65,    66,    67,    68,    69,    70,    -1,    72,
      73,    74,    75,    76,    -1,    78,    -1,    80,    81,    82,
      83,    84,    85,    86,    87,    88,    89,    -1,    91,    92,
      93,    94,    95,    -1,    -1,    98,    99,   100,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,   117,   118,   119,   120,    -1,   122,
     123,   124,   125,   126,   127,    -1,   129,    -1,   131,   132,
     133,   134,    -1,    -1,   137,   138,   139,   140,   141,    -1,
      -1,    -1,   145,   146,   147,    -1,   149,   150,   151,    -1,
     153,   154,   155,   156,   157,   158,   159,   160,   161,   162,
     163,   164,   165,    -1,   167,   168,   169,   170,    -1,   172,
      -1,   174,   175,    -1,   177,   178,   179,   180,   181,   182,
      -1,   184,    -1,    -1,    -1,   188,   189,    -1,   191,    -1,
     193,   194,   195,   196,   197,   198,   199,   200,   201,   202,
     203,   204,    -1,   206,   207,   208,   209,   210,   211,    -1,
     213,   214,   215,   216,   217,   218,   219,   220,   221,   222,
      -1,   224,    -1,   226,   227,   228,   229,   230,   231,    -1,
     233,   234,   235,   236,   237,    -1,    -1,   240,   241,   242,
     243,    -1,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,    -1,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,    -1,   295,   296,    -1,    -1,   299,   300,   301,    -1,
      -1,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,    -1,    -1,   321,    -1,
     323,   324,   325,   326,   327,   328,   329,   330,   331,   332,
      -1,   334,   335,   336,   337,   338,    -1,    -1,   341,    -1,
     343,   344,   345,   346,   347,   348,   349,   350,    -1,   352,
     353,   354,    -1,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,    -1,   367,   368,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,    -1,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,    -1,   397,   398,    -1,   400,   401,   402,
      -1,    -1,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,   417,   418,   419,   420,    -1,   422,
     423,    -1,   425,   426,   427,   428,   429,   430,   431,    -1,
     433,   434,    -1,    -1,    -1,   438,   439,   440,   441,   442,
     443,   444,   445,   446,   447,   448,   449,   450,   451,    -1,
      -1,   454,   455,   456,   457,   458,   459,   460,    -1,   462,
     463,   464,   465,   466,   467,   468,    -1,   470,   471,   472,
      -1,   474,   475,   476,   477,    -1,    -1,    -1,   481,    -1,
      -1,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   500,   501,   502,
     503,   504,   505,    -1,    -1,    -1,    -1,    -1,    -1,   512,
     513,    -1,    -1,    -1,    -1,    -1,   519,    -1,   521,   522,
      -1,    -1,    -1,    -1,   527,   528,    -1,    -1,    -1,    -1,
     533,   534,     3,     4,     5,     6,     7,     8,     9,    10,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      21,    22,    23,    24,    -1,    26,    27,    28,    29,    -1,
      31,    32,    33,    -1,    -1,    -1,    -1,    -1,    39,    -1,
      -1,    42,    43,    -1,    45,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    -1,    58,    59,    60,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      -1,    72,    73,    74,    75,    76,    -1,    78,    -1,    80,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    -1,
      91,    92,    93,    94,    95,    -1,    -1,    98,    99,   100,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
      -1,   122,   123,   124,   125,   126,   127,    -1,   129,    -1,
     131,   132,   133,   134,    -1,    -1,   137,   138,   139,   140,
     141,    -1,    -1,    -1,   145,   146,   147,    -1,   149,   150,
     151,    -1,   153,   154,   155,   156,   157,   158,   159,   160,
     161,   162,   163,   164,   165,    -1,   167,   168,   169,   170,
      -1,   172,    -1,   174,   175,    -1,   177,   178,   179,   180,
     181,   182,    -1,   184,    -1,    -1,    -1,   188,   189,    -1,
     191,    -1,   193,   194,   195,   196,   197,   198,   199,   200,
     201,   202,   203,   204,    -1,   206,   207,   208,   209,   210,
     211,    -1,   213,   214,   215,   216,   217,   218,   219,   220,
     221,   222,    -1,   224,    -1,   226,   227,   228,   229,   230,
     231,    -1,   233,   234,   235,   236,   237,    -1,    -1,   240,
     241,   242,   243,    -1,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,    -1,
     281,   282,   283,   284,   285,   286,   287,   288,   289,   290,
     291,   292,   293,    -1,   295,   296,    -1,    -1,   299,   300,
     301,    -1,    -1,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,    -1,    -1,
     321,    -1,   323,   324,   325,   326,   327,   328,   329,   330,
     331,   332,    -1,   334,   335,   336,   337,   338,    -1,    -1,
     341,    -1,   343,   344,   345,   346,   347,   348,   349,   350,
      -1,   352,   353,   354,    -1,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,    -1,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,    -1,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,    -1,   397,   398,    -1,   400,
     401,   402,    -1,    -1,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,   417,   418,   419,   420,
      -1,   422,   423,   424,   425,   426,   427,   428,   429,   430,
     431,    -1,   433,   434,    -1,    -1,    -1,   438,   439,   440,
     441,   442,   443,   444,   445,   446,   447,   448,   449,   450,
     451,    -1,    -1,   454,   455,   456,   457,   458,   459,   460,
      -1,   462,   463,   464,   465,   466,   467,   468,    -1,   470,
     471,   472,    -1,   474,   475,   476,   477,    -1,    -1,    -1,
     481,    -1,    -1,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,   499,   500,
     501,   502,   503,   504,   505,    -1,    -1,    -1,    -1,    -1,
      -1,   512,   513,    -1,    -1,    -1,    -1,    -1,   519,    -1,
     521,    -1,    -1,    -1,    -1,    -1,   527,   528,    -1,    -1,
      -1,    -1,   533,   534,     3,     4,     5,     6,     7,     8,
       9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    21,    22,    23,    24,    -1,    26,    27,    28,
      29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,
      39,    -1,    -1,    42,    43,    -1,    45,    46,    47,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    -1,    58,
      59,    60,    61,    62,    63,    64,    65,    66,    67,    68,
      69,    70,    -1,    72,    73,    74,    75,    76,    -1,    78,
      -1,    80,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    -1,    91,    92,    93,    94,    95,    -1,    -1,    98,
      99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
     119,   120,    -1,   122,   123,   124,   125,   126,   127,    -1,
     129,    -1,   131,   132,   133,   134,    -1,    -1,   137,   138,
     139,   140,   141,    -1,    -1,    -1,   145,   146,   147,    -1,
     149,   150,   151,    -1,   153,   154,   155,   156,   157,   158,
     159,   160,   161,   162,   163,   164,   165,    -1,   167,   168,
     169,   170,    -1,   172,    -1,   174,   175,    -1,   177,   178,
     179,   180,   181,   182,    -1,   184,    -1,    -1,    -1,   188,
     189,    -1,   191,    -1,   193,   194,   195,   196,   197,   198,
     199,   200,   201,   202,   203,   204,    -1,   206,   207,   208,
     209,   210,   211,    -1,   213,   214,   215,   216,   217,   218,
     219,   220,   221,   222,    -1,   224,    -1,   226,   227,   228,
     229,   230,   231,    -1,   233,   234,   235,   236,   237,    -1,
      -1,   240,   241,   242,   243,    -1,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,    -1,   281,   282,   283,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,    -1,   295,   296,    -1,    -1,
     299,   300,   301,    -1,    -1,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
      -1,    -1,   321,    -1,   323,   324,   325,   326,   327,   328,
     329,   330,   331,   332,    -1,   334,   335,   336,   337,   338,
      -1,    -1,   341,    -1,   343,   344,   345,   346,   347,   348,
     349,   350,    -1,   352,   353,   354,    -1,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,    -1,   367,   368,
     369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,    -1,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,    -1,   397,   398,
      -1,   400,   401,   402,    -1,    -1,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,   417,   418,
     419,   420,    -1,   422,   423,    -1,   425,   426,   427,   428,
     429,   430,   431,    -1,   433,   434,    -1,    -1,    -1,   438,
     439,   440,   441,   442,   443,   444,   445,   446,   447,   448,
     449,   450,   451,    -1,    -1,   454,   455,   456,   457,   458,
     459,   460,    -1,   462,   463,   464,   465,   466,   467,   468,
      -1,   470,   471,   472,    -1,   474,   475,   476,   477,    -1,
      -1,   480,   481,    -1,    -1,   484,   485,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
     499,   500,   501,   502,   503,   504,   505,    -1,    -1,    -1,
      -1,    -1,    -1,   512,   513,    -1,    -1,    -1,    -1,    -1,
     519,    -1,   521,    -1,    -1,    -1,    -1,    -1,   527,   528,
      -1,    -1,    -1,    -1,   533,   534,     3,     4,     5,     6,
       7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    21,    22,    23,    24,    -1,    26,
      27,    28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,
      -1,    -1,    39,    -1,    -1,    42,    43,    -1,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      -1,    58,    59,    60,    61,    62,    63,    64,    65,    66,
      67,    68,    69,    70,    -1,    72,    73,    74,    75,    76,
      -1,    78,    -1,    80,    81,    82,    83,    84,    85,    86,
      87,    88,    89,    -1,    91,    92,    93,    94,    95,    -1,
      -1,    98,    99,   100,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,   118,   119,   120,    -1,   122,   123,   124,   125,   126,
     127,    -1,   129,    -1,   131,   132,   133,   134,    -1,    -1,
     137,   138,   139,   140,   141,    -1,    -1,    -1,   145,   146,
     147,    -1,   149,   150,   151,    -1,   153,   154,   155,   156,
     157,   158,   159,   160,   161,   162,   163,   164,   165,    -1,
     167,   168,   169,   170,    -1,   172,    -1,   174,   175,    -1,
     177,   178,   179,   180,   181,   182,    -1,   184,    -1,    -1,
      -1,   188,   189,    -1,   191,    -1,   193,   194,   195,   196,
     197,   198,   199,   200,   201,   202,   203,   204,    -1,   206,
     207,   208,   209,   210,   211,    -1,   213,   214,   215,   216,
     217,   218,   219,   220,   221,   222,    -1,   224,    -1,   226,
     227,   228,   229,   230,   231,    -1,   233,   234,   235,   236,
     237,    -1,    -1,   240,   241,   242,   243,    -1,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,    -1,   281,   282,   283,   284,   285,   286,
     287,   288,   289,   290,   291,   292,   293,    -1,   295,   296,
      -1,    -1,   299,   300,   301,    -1,    -1,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,    -1,    -1,   321,    -1,   323,   324,   325,   326,
     327,   328,   329,   330,   331,   332,    -1,   334,   335,   336,
     337,   338,    -1,    -1,   341,    -1,   343,   344,   345,   346,
     347,   348,   349,   350,    -1,   352,   353,   354,    -1,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,    -1,
     367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,    -1,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,    -1,
     397,   398,    -1,   400,   401,   402,    -1,    -1,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
     417,   418,   419,   420,    -1,   422,   423,   424,   425,   426,
     427,   428,   429,   430,   431,    -1,   433,   434,    -1,    -1,
      -1,   438,   439,   440,   441,   442,   443,   444,   445,   446,
     447,   448,   449,   450,   451,    -1,    -1,   454,   455,   456,
     457,   458,   459,   460,    -1,   462,   463,   464,   465,   466,
     467,   468,    -1,   470,   471,   472,    -1,   474,   475,   476,
     477,    -1,    -1,    -1,   481,    -1,    -1,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,   498,   499,   500,   501,   502,   503,   504,   505,    -1,
      -1,    -1,    -1,    -1,    -1,   512,   513,    -1,    -1,    -1,
      -1,    -1,   519,    -1,   521,    -1,    -1,    -1,    -1,    -1,
     527,   528,    -1,    -1,    -1,    -1,   533,   534,     3,     4,
       5,     6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    21,    22,    23,    24,
      -1,    26,    27,    28,    29,    -1,    31,    32,    33,    -1,
      -1,    -1,    -1,    -1,    39,    -1,    -1,    42,    43,    -1,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    -1,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    -1,    72,    73,    74,
      75,    76,    -1,    78,    -1,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    -1,    91,    92,    93,    94,
      95,    -1,    -1,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,    -1,   122,   123,   124,
     125,   126,   127,    -1,   129,    -1,   131,   132,   133,   134,
      -1,    -1,   137,   138,   139,   140,   141,    -1,    -1,    -1,
     145,   146,   147,    -1,   149,   150,   151,    -1,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,   163,   164,
     165,    -1,   167,   168,   169,   170,    -1,   172,    -1,   174,
     175,    -1,   177,   178,   179,   180,   181,   182,    -1,   184,
      -1,    -1,    -1,   188,   189,    -1,   191,    -1,   193,   194,
     195,   196,   197,   198,   199,   200,   201,   202,   203,   204,
      -1,   206,   207,   208,   209,   210,   211,    -1,   213,   214,
     215,   216,   217,   218,   219,   220,   221,   222,    -1,   224,
      -1,   226,   227,   228,   229,   230,   231,    -1,   233,   234,
     235,   236,   237,    -1,    -1,   240,   241,   242,   243,    -1,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,    -1,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,    -1,
     295,   296,    -1,    -1,   299,   300,   301,    -1,    -1,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,    -1,    -1,   321,    -1,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,    -1,   334,
     335,   336,   337,   338,    -1,    -1,   341,    -1,   343,   344,
     345,   346,   347,   348,   349,   350,    -1,   352,   353,   354,
      -1,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,    -1,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
      -1,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,    -1,   397,   398,    -1,   400,   401,   402,    -1,    -1,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,    -1,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,    -1,   433,   434,
      -1,    -1,    -1,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,    -1,    -1,   454,
     455,   456,   457,   458,   459,   460,    -1,   462,   463,   464,
     465,   466,   467,   468,    -1,   470,   471,   472,    -1,   474,
     475,   476,   477,    -1,    -1,    -1,   481,    -1,    -1,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
     505,    -1,    -1,    -1,    -1,    -1,    -1,   512,   513,    -1,
      -1,    -1,    -1,    -1,   519,    -1,   521,    -1,    -1,    -1,
      -1,    -1,   527,   528,    -1,    -1,    -1,    -1,   533,   534,
       3,     4,     5,     6,     7,     8,     9,    10,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    21,    22,
      23,    24,    -1,    26,    27,    28,    29,    -1,    31,    32,
      33,    -1,    -1,    -1,    -1,    -1,    39,    -1,    -1,    42,
      43,    -1,    45,    46,    47,    48,    49,    50,    51,    52,
      53,    54,    55,    56,    -1,    58,    59,    60,    61,    62,
      63,    64,    65,    66,    67,    68,    69,    70,    -1,    72,
      73,    74,    75,    76,    -1,    78,    -1,    80,    81,    82,
      83,    84,    85,    86,    87,    88,    89,    -1,    91,    92,
      93,    94,    95,    -1,    -1,    98,    99,   100,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,   117,   118,   119,   120,    -1,   122,
     123,   124,   125,   126,   127,    -1,   129,    -1,   131,   132,
     133,   134,    -1,    -1,   137,   138,   139,   140,   141,    -1,
      -1,    -1,   145,   146,   147,    -1,   149,   150,   151,    -1,
     153,   154,   155,   156,   157,   158,   159,   160,   161,   162,
     163,   164,   165,    -1,   167,   168,   169,   170,    -1,   172,
      -1,   174,   175,    -1,   177,   178,   179,   180,   181,   182,
      -1,   184,    -1,    -1,    -1,   188,   189,    -1,   191,    -1,
     193,   194,   195,   196,   197,   198,   199,   200,   201,   202,
     203,   204,    -1,   206,   207,   208,   209,   210,   211,    -1,
     213,   214,   215,   216,   217,   218,   219,   220,   221,   222,
      -1,   224,    -1,   226,   227,   228,   229,   230,   231,    -1,
     233,   234,   235,   236,   237,    -1,    -1,   240,   241,   242,
     243,    -1,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,    -1,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,    -1,   295,   296,    -1,    -1,   299,   300,   301,    -1,
      -1,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,    -1,    -1,   321,    -1,
     323,   324,   325,   326,   327,   328,   329,   330,   331,   332,
      -1,   334,   335,   336,   337,   338,    -1,    -1,   341,    -1,
     343,   344,   345,   346,   347,   348,   349,   350,    -1,   352,
     353,   354,    -1,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,    -1,   367,   368,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,    -1,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,    -1,   397,   398,    -1,   400,   401,   402,
      -1,    -1,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,   417,   418,   419,   420,    -1,   422,
     423,    -1,   425,   426,   427,   428,   429,   430,   431,    -1,
     433,   434,    -1,    -1,    -1,   438,   439,   440,   441,   442,
     443,   444,   445,   446,   447,   448,   449,   450,   451,    -1,
      -1,   454,   455,   456,   457,   458,   459,   460,    -1,   462,
     463,   464,   465,   466,   467,   468,    -1,   470,   471,   472,
      -1,   474,   475,   476,   477,    -1,    -1,    -1,   481,    -1,
      -1,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   500,   501,   502,
     503,   504,   505,    -1,    -1,    -1,    -1,    -1,    -1,   512,
     513,    -1,    -1,    -1,    -1,    -1,   519,    -1,   521,    -1,
      -1,    -1,    -1,    -1,   527,   528,    -1,    -1,    -1,    -1,
     533,   534,     3,     4,     5,     6,     7,     8,     9,    10,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      21,    22,    23,    24,    -1,    26,    27,    28,    29,    -1,
      31,    32,    33,    -1,    -1,    -1,    -1,    -1,    39,    -1,
      -1,    42,    43,    -1,    45,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    -1,    58,    59,    60,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      -1,    72,    73,    74,    75,    76,    -1,    78,    -1,    80,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    -1,
      91,    92,    93,    94,    95,    -1,    -1,    98,    99,   100,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
      -1,   122,   123,   124,   125,   126,   127,    -1,   129,    -1,
     131,   132,   133,   134,    -1,    -1,   137,   138,   139,   140,
     141,    -1,    -1,    -1,   145,   146,   147,    -1,   149,   150,
     151,    -1,   153,   154,   155,   156,   157,   158,   159,   160,
     161,   162,   163,   164,   165,    -1,   167,   168,   169,   170,
      -1,   172,    -1,   174,   175,    -1,   177,   178,   179,   180,
     181,   182,    -1,   184,    -1,    -1,    -1,   188,   189,    -1,
     191,    -1,   193,   194,   195,   196,   197,   198,   199,   200,
     201,   202,   203,   204,    -1,   206,   207,   208,   209,   210,
     211,    -1,   213,   214,   215,   216,   217,   218,   219,   220,
     221,   222,    -1,   224,    -1,   226,   227,   228,   229,   230,
     231,    -1,   233,   234,   235,   236,   237,    -1,    -1,   240,
     241,   242,   243,    -1,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,    -1,
     281,   282,   283,   284,   285,   286,   287,   288,   289,   290,
     291,   292,   293,    -1,   295,   296,    -1,    -1,   299,   300,
     301,    -1,    -1,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,    -1,    -1,
     321,    -1,   323,   324,   325,   326,   327,   328,   329,   330,
     331,   332,    -1,   334,   335,   336,   337,   338,    -1,    -1,
     341,    -1,   343,   344,   345,   346,   347,   348,   349,   350,
      -1,   352,   353,   354,    -1,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,    -1,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,    -1,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,    -1,   397,   398,    -1,   400,
     401,   402,    -1,    -1,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,   417,   418,   419,   420,
      -1,   422,   423,    -1,   425,   426,   427,   428,   429,   430,
     431,    -1,   433,   434,    -1,    -1,    -1,   438,   439,   440,
     441,   442,   443,   444,   445,   446,   447,   448,   449,   450,
     451,    -1,    -1,   454,   455,   456,   457,   458,   459,   460,
      -1,   462,   463,   464,   465,   466,   467,   468,    -1,   470,
     471,   472,    -1,   474,   475,   476,   477,    -1,    -1,    -1,
     481,    -1,    -1,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,   499,   500,
     501,   502,   503,   504,   505,    -1,    -1,    -1,    -1,    -1,
      -1,   512,   513,    -1,    -1,    -1,    -1,    -1,   519,    -1,
     521,    -1,    -1,    -1,    -1,    -1,   527,   528,    -1,    -1,
      -1,    -1,   533,   534,     3,     4,     5,     6,     7,     8,
       9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    21,    22,    23,    24,    -1,    26,    27,    28,
      29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,
      39,    -1,    -1,    42,    43,    -1,    45,    46,    47,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    -1,    58,
      59,    60,    61,    62,    63,    64,    65,    66,    67,    68,
      69,    70,    -1,    72,    73,    74,    75,    76,    -1,    78,
      -1,    80,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    -1,    91,    92,    93,    94,    95,    -1,    -1,    98,
      99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
     119,   120,    -1,   122,   123,   124,   125,   126,   127,    -1,
     129,    -1,   131,   132,   133,   134,    -1,    -1,   137,   138,
     139,   140,   141,    -1,    -1,    -1,   145,   146,   147,    -1,
     149,   150,   151,    -1,   153,   154,   155,   156,   157,   158,
     159,   160,   161,   162,   163,   164,   165,    -1,   167,   168,
     169,   170,    -1,   172,    -1,   174,   175,    -1,   177,   178,
     179,   180,   181,   182,    -1,   184,    -1,    -1,    -1,   188,
     189,    -1,   191,    -1,   193,   194,   195,   196,   197,   198,
     199,   200,   201,   202,   203,   204,    -1,   206,   207,   208,
     209,   210,   211,    -1,   213,   214,   215,   216,   217,   218,
     219,   220,   221,   222,    -1,   224,    -1,   226,   227,   228,
     229,   230,   231,    -1,   233,   234,   235,   236,   237,    -1,
      -1,   240,   241,   242,   243,    -1,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,    -1,   281,   282,   283,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,    -1,   295,   296,    -1,    -1,
     299,   300,   301,    -1,    -1,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
      -1,    -1,   321,    -1,   323,   324,   325,   326,   327,   328,
     329,   330,   331,   332,    -1,   334,   335,   336,   337,   338,
      -1,    -1,   341,    -1,   343,   344,   345,   346,   347,   348,
     349,   350,    -1,   352,   353,   354,    -1,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,    -1,   367,   368,
     369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,    -1,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,    -1,   397,   398,
      -1,   400,   401,   402,    -1,    -1,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,   417,   418,
     419,   420,    -1,   422,   423,    -1,   425,   426,   427,   428,
     429,   430,   431,    -1,   433,   434,    -1,    -1,    -1,   438,
     439,   440,   441,   442,   443,   444,   445,   446,   447,   448,
     449,   450,   451,    -1,    -1,   454,   455,   456,   457,   458,
     459,   460,    -1,   462,   463,   464,   465,   466,   467,   468,
      -1,   470,   471,   472,    -1,   474,   475,   476,   477,    -1,
      -1,    -1,   481,    -1,    -1,   484,   485,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
     499,   500,   501,   502,   503,   504,   505,    -1,    -1,    -1,
      -1,    -1,    -1,   512,   513,    -1,    -1,    -1,    -1,    -1,
     519,    -1,   521,    -1,    -1,    -1,    -1,    -1,   527,   528,
      -1,    -1,    -1,    -1,   533,   534,     3,     4,     5,     6,
       7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    21,    22,    23,    24,    -1,    26,
      27,    28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,
      -1,    -1,    39,    -1,    -1,    42,    43,    -1,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      -1,    58,    59,    60,    61,    62,    63,    64,    65,    66,
      67,    68,    69,    70,    -1,    72,    73,    74,    75,    76,
      -1,    78,    -1,    80,    81,    82,    83,    84,    85,    86,
      87,    88,    89,    -1,    91,    92,    93,    94,    95,    -1,
      -1,    98,    99,   100,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,   118,   119,   120,    -1,   122,   123,   124,   125,   126,
     127,    -1,   129,    -1,   131,   132,   133,   134,    -1,    -1,
     137,   138,   139,   140,   141,    -1,    -1,    -1,   145,   146,
     147,    -1,   149,   150,   151,    -1,   153,   154,   155,   156,
     157,   158,   159,   160,   161,   162,   163,   164,   165,    -1,
     167,   168,   169,   170,    -1,   172,    -1,   174,   175,    -1,
     177,   178,   179,   180,   181,   182,    -1,   184,    -1,    -1,
      -1,   188,   189,    -1,   191,    -1,   193,   194,   195,   196,
     197,   198,   199,   200,   201,   202,   203,   204,    -1,   206,
     207,   208,   209,   210,   211,    -1,   213,   214,   215,   216,
     217,   218,   219,   220,   221,   222,    -1,   224,    -1,   226,
     227,   228,   229,   230,   231,    -1,   233,   234,   235,   236,
     237,    -1,    -1,   240,   241,   242,   243,    -1,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,    -1,   281,   282,   283,   284,   285,   286,
     287,   288,   289,   290,   291,   292,   293,    -1,   295,   296,
      -1,    -1,   299,   300,   301,    -1,    -1,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,    -1,    -1,   321,    -1,   323,   324,   325,   326,
     327,   328,   329,   330,   331,   332,    -1,   334,   335,   336,
     337,   338,    -1,    -1,   341,    -1,   343,   344,   345,   346,
     347,   348,   349,   350,    -1,   352,   353,   354,    -1,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,    -1,
     367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,    -1,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,    -1,
     397,   398,    -1,   400,   401,   402,    -1,    -1,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
     417,   418,   419,   420,    -1,   422,   423,    -1,   425,   426,
     427,   428,   429,   430,   431,    -1,   433,   434,    -1,    -1,
      -1,   438,   439,   440,   441,   442,   443,   444,   445,   446,
     447,   448,   449,   450,   451,    -1,    -1,   454,   455,   456,
     457,   458,   459,   460,    -1,   462,   463,   464,   465,   466,
     467,   468,    -1,   470,   471,   472,    -1,   474,   475,   476,
     477,    -1,    -1,    -1,   481,    -1,    -1,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,   498,   499,   500,   501,   502,   503,   504,   505,    -1,
      -1,    -1,    -1,    -1,    -1,   512,   513,    -1,    -1,    -1,
      -1,    -1,   519,    -1,   521,    -1,    -1,    -1,    -1,    -1,
     527,   528,    -1,    -1,    -1,    -1,   533,   534,     3,     4,
       5,     6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    21,    22,    23,    24,
      -1,    26,    27,    28,    29,    -1,    31,    32,    33,    -1,
      -1,    -1,    -1,    -1,    39,    -1,    -1,    42,    43,    -1,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    -1,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    -1,    72,    73,    74,
      75,    76,    -1,    78,    -1,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    -1,    91,    92,    93,    94,
      95,    -1,    -1,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,    -1,   122,   123,   124,
     125,   126,   127,    -1,   129,    -1,   131,   132,   133,   134,
      -1,    -1,   137,   138,   139,   140,   141,    -1,    -1,    -1,
     145,   146,   147,    -1,   149,   150,   151,    -1,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,   163,   164,
     165,    -1,   167,   168,   169,   170,    -1,   172,    -1,   174,
     175,    -1,   177,   178,   179,   180,   181,   182,    -1,   184,
      -1,    -1,    -1,   188,   189,    -1,   191,    -1,   193,   194,
     195,   196,   197,   198,   199,   200,   201,   202,   203,   204,
      -1,   206,   207,   208,   209,   210,   211,    -1,   213,   214,
     215,   216,   217,   218,   219,   220,   221,   222,    -1,   224,
      -1,   226,   227,   228,   229,   230,   231,    -1,   233,   234,
     235,   236,   237,    -1,    -1,   240,   241,   242,   243,    -1,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,    -1,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,    -1,
     295,   296,    -1,    -1,   299,   300,   301,    -1,    -1,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,    -1,    -1,   321,    -1,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,    -1,   334,
     335,   336,   337,   338,    -1,    -1,   341,    -1,   343,   344,
     345,   346,   347,   348,   349,   350,    -1,   352,   353,   354,
      -1,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,    -1,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
      -1,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,    -1,   397,   398,    -1,   400,   401,   402,    -1,    -1,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,    -1,   422,   423,    -1,
     425,   426,   427,   428,   429,   430,   431,    -1,   433,   434,
      -1,    -1,    -1,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,    -1,    -1,   454,
     455,   456,   457,   458,   459,   460,    -1,   462,   463,   464,
     465,   466,   467,   468,    -1,   470,   471,   472,    -1,   474,
     475,   476,   477,    -1,    -1,    -1,   481,    -1,    -1,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
     505,    -1,    -1,    -1,    -1,    -1,    -1,   512,   513,    -1,
      -1,    -1,    -1,    -1,   519,    -1,   521,    -1,    -1,    -1,
      -1,    -1,   527,   528,    -1,    -1,    -1,    -1,   533,   534,
       3,     4,     5,     6,     7,     8,     9,    10,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    21,    22,
      23,    24,    -1,    26,    27,    28,    29,    -1,    31,    32,
      33,    -1,    -1,    -1,    -1,    -1,    39,    -1,    -1,    42,
      43,    -1,    45,    46,    47,    48,    49,    50,    51,    52,
      53,    54,    55,    56,    -1,    58,    59,    60,    61,    62,
      63,    64,    65,    66,    67,    68,    69,    70,    -1,    72,
      73,    74,    75,    76,    -1,    78,    -1,    80,    81,    82,
      83,    84,    85,    86,    87,    88,    89,    -1,    91,    92,
      93,    94,    95,    -1,    -1,    98,    99,   100,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,   117,   118,   119,   120,    -1,   122,
     123,   124,   125,   126,   127,    -1,   129,    -1,   131,   132,
     133,   134,    -1,    -1,   137,   138,   139,   140,   141,    -1,
      -1,    -1,   145,   146,   147,    -1,   149,   150,   151,    -1,
     153,   154,   155,   156,   157,   158,   159,   160,   161,   162,
     163,   164,   165,    -1,   167,   168,   169,   170,    -1,   172,
      -1,   174,   175,    -1,   177,   178,   179,   180,   181,   182,
      -1,   184,    -1,    -1,    -1,   188,   189,    -1,   191,    -1,
     193,   194,   195,   196,   197,   198,   199,   200,   201,   202,
     203,   204,    -1,   206,   207,   208,   209,   210,   211,    -1,
     213,   214,   215,   216,   217,   218,   219,   220,   221,   222,
      -1,   224,    -1,   226,   227,   228,   229,   230,   231,    -1,
     233,   234,   235,   236,   237,    -1,    -1,   240,   241,   242,
     243,    -1,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,    -1,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,    -1,   295,   296,    -1,    -1,   299,   300,   301,    -1,
      -1,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,    -1,    -1,   321,    -1,
     323,   324,   325,   326,   327,   328,   329,   330,   331,   332,
      -1,   334,   335,   336,   337,   338,    -1,    -1,   341,    -1,
     343,   344,   345,   346,   347,   348,   349,   350,    -1,   352,
     353,   354,    -1,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,    -1,   367,   368,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,    -1,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,    -1,   397,   398,    -1,   400,   401,   402,
      -1,    -1,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,   417,   418,   419,   420,    -1,   422,
     423,    -1,   425,   426,   427,   428,   429,   430,   431,    -1,
     433,   434,    -1,    -1,    -1,   438,   439,   440,   441,   442,
     443,   444,   445,   446,   447,   448,   449,   450,   451,    -1,
      -1,   454,   455,   456,   457,   458,   459,   460,    -1,   462,
     463,   464,   465,   466,   467,   468,    -1,   470,   471,   472,
      -1,   474,   475,   476,   477,    -1,    -1,    -1,   481,    -1,
      -1,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   500,   501,   502,
     503,   504,   505,    -1,    -1,    -1,    -1,    -1,    -1,   512,
     513,    -1,    -1,    -1,    -1,    -1,   519,    -1,   521,    -1,
      -1,    -1,    -1,    -1,   527,   528,    -1,    -1,    -1,    -1,
     533,   534,     3,     4,     5,     6,     7,     8,     9,    10,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      21,    22,    23,    24,    -1,    26,    27,    28,    29,    -1,
      31,    32,    33,    -1,    -1,    -1,    -1,    -1,    39,    -1,
      -1,    42,    43,    -1,    45,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    -1,    58,    59,    60,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      -1,    72,    73,    74,    75,    76,    -1,    78,    -1,    80,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    -1,
      91,    92,    93,    94,    95,    -1,    -1,    98,    99,   100,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
      -1,   122,   123,   124,   125,   126,   127,    -1,   129,    -1,
     131,   132,   133,   134,    -1,    -1,   137,   138,   139,   140,
     141,    -1,    -1,    -1,   145,   146,   147,    -1,   149,   150,
     151,    -1,   153,   154,   155,   156,   157,   158,   159,   160,
     161,   162,   163,   164,   165,    -1,   167,   168,   169,   170,
      -1,   172,    -1,   174,   175,    -1,   177,   178,   179,   180,
     181,   182,    -1,   184,    -1,    -1,    -1,   188,   189,    -1,
     191,    -1,   193,   194,   195,   196,   197,   198,   199,   200,
     201,   202,   203,   204,    -1,   206,   207,   208,   209,   210,
     211,    -1,   213,   214,   215,   216,   217,   218,   219,   220,
     221,   222,    -1,   224,    -1,   226,   227,   228,   229,   230,
     231,    -1,   233,   234,   235,   236,   237,    -1,    -1,   240,
     241,   242,   243,    -1,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,    -1,
     281,   282,   283,   284,   285,   286,   287,   288,   289,   290,
     291,   292,   293,    -1,   295,   296,    -1,    -1,   299,   300,
     301,    -1,    -1,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,    -1,    -1,
     321,    -1,   323,   324,   325,   326,   327,   328,   329,   330,
     331,   332,    -1,   334,   335,   336,   337,   338,    -1,    -1,
     341,    -1,   343,   344,   345,   346,   347,   348,   349,   350,
      -1,   352,   353,   354,    -1,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,    -1,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,    -1,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,    -1,   397,   398,    -1,   400,
     401,   402,    -1,    -1,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,   417,   418,   419,   420,
      -1,   422,   423,    -1,   425,   426,   427,   428,   429,   430,
     431,    -1,   433,   434,    -1,    -1,    -1,   438,   439,   440,
     441,   442,   443,   444,   445,   446,   447,   448,   449,   450,
     451,    -1,    -1,   454,   455,   456,   457,   458,   459,   460,
      -1,   462,   463,   464,   465,   466,   467,   468,    -1,   470,
     471,   472,    -1,   474,   475,   476,   477,    -1,    -1,    -1,
     481,    -1,    -1,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,   499,   500,
     501,   502,   503,   504,   505,    -1,    -1,    -1,    -1,    -1,
      -1,   512,   513,    -1,    -1,    -1,    -1,    -1,   519,    -1,
     521,    -1,    -1,    -1,    -1,    -1,   527,   528,    -1,    -1,
      -1,    -1,   533,   534,     3,     4,     5,     6,     7,     8,
       9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    21,    22,    23,    24,    -1,    26,    27,    28,
      29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,
      39,    -1,    -1,    42,    43,    -1,    45,    46,    47,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    -1,    58,
      59,    60,    61,    62,    63,    64,    65,    66,    67,    68,
      69,    70,    -1,    72,    73,    74,    75,    76,    -1,    78,
      -1,    80,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    -1,    91,    92,    93,    94,    95,    -1,    -1,    98,
      99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
     119,   120,    -1,   122,   123,   124,   125,   126,   127,    -1,
     129,    -1,   131,   132,   133,   134,    -1,    -1,   137,   138,
     139,   140,   141,    -1,    -1,    -1,   145,   146,   147,    -1,
     149,   150,   151,    -1,   153,   154,   155,   156,   157,   158,
     159,   160,   161,   162,   163,   164,   165,    -1,   167,   168,
     169,   170,    -1,   172,    -1,   174,   175,    -1,   177,   178,
     179,   180,   181,   182,    -1,   184,    -1,    -1,    -1,   188,
     189,    -1,   191,    -1,   193,   194,   195,   196,   197,   198,
     199,   200,   201,   202,   203,   204,    -1,   206,   207,   208,
     209,   210,   211,    -1,   213,   214,   215,   216,   217,   218,
     219,   220,   221,   222,    -1,   224,    -1,   226,   227,   228,
     229,   230,   231,    -1,   233,   234,   235,   236,   237,    -1,
      -1,   240,   241,   242,   243,    -1,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,    -1,   281,   282,   283,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,    -1,   295,   296,    -1,    -1,
     299,   300,   301,    -1,    -1,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
      -1,    -1,   321,    -1,   323,   324,   325,   326,   327,   328,
     329,   330,   331,   332,    -1,   334,   335,   336,   337,   338,
      -1,    -1,   341,    -1,   343,   344,   345,   346,   347,   348,
     349,   350,    -1,   352,   353,   354,    -1,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,    -1,   367,   368,
     369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,    -1,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,    -1,   397,   398,
      -1,   400,   401,   402,    -1,    -1,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,   417,   418,
     419,   420,    -1,   422,   423,    -1,   425,   426,   427,   428,
     429,   430,   431,    -1,   433,   434,    -1,    -1,    -1,   438,
     439,   440,   441,   442,   443,   444,   445,   446,   447,   448,
     449,   450,   451,    -1,    -1,   454,   455,   456,   457,   458,
     459,   460,    -1,   462,   463,   464,   465,   466,   467,   468,
      -1,   470,   471,   472,    -1,   474,   475,   476,   477,    -1,
      -1,    -1,   481,    -1,    -1,   484,   485,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
     499,   500,   501,   502,   503,   504,   505,    -1,    -1,    -1,
      -1,    -1,    -1,   512,   513,    -1,    -1,    -1,    -1,    -1,
     519,    -1,   521,    -1,    -1,    -1,    -1,    -1,   527,   528,
      -1,    -1,    -1,    -1,   533,   534,     3,     4,     5,     6,
       7,    -1,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    21,    22,    23,    24,    -1,    26,
      27,    28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,
      -1,    -1,    39,    -1,    -1,    42,    43,    -1,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      -1,    58,    59,    60,    61,    62,    63,    64,    65,    66,
      67,    68,    69,    70,    -1,    72,    73,    74,    75,    76,
      -1,    78,    -1,    80,    81,    82,    83,    84,    85,    86,
      87,    88,    89,    -1,    91,    92,    93,    94,    95,    -1,
      -1,    98,    99,   100,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,   118,    -1,   120,    -1,   122,   123,   124,   125,   126,
     127,    -1,   129,    -1,   131,   132,   133,   134,    -1,    -1,
     137,   138,   139,   140,   141,    -1,    -1,    -1,   145,   146,
     147,    -1,   149,   150,   151,    -1,   153,   154,   155,   156,
     157,   158,   159,   160,   161,   162,   163,   164,   165,    -1,
     167,   168,   169,   170,    -1,   172,    -1,   174,   175,    -1,
     177,   178,   179,   180,   181,   182,    -1,   184,    -1,    -1,
      -1,   188,   189,    -1,   191,    -1,   193,   194,   195,   196,
     197,   198,   199,   200,   201,   202,   203,   204,    -1,   206,
     207,   208,   209,   210,   211,    -1,   213,   214,   215,   216,
     217,   218,   219,   220,   221,   222,    -1,   224,    -1,   226,
     227,   228,   229,   230,   231,    -1,   233,   234,   235,   236,
     237,    -1,    -1,   240,   241,   242,   243,    -1,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,    -1,   281,   282,   283,   284,   285,   286,
     287,   288,   289,   290,   291,   292,   293,    -1,   295,   296,
      -1,    -1,   299,   300,   301,    -1,    -1,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,    -1,    -1,   321,    -1,   323,   324,   325,   326,
     327,   328,   329,   330,   331,   332,    -1,   334,   335,   336,
     337,   338,    -1,    -1,   341,    -1,   343,   344,   345,   346,
     347,   348,   349,   350,    -1,   352,   353,   354,    -1,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,    -1,
     367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,    -1,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,    -1,
     397,   398,    -1,   400,   401,   402,    -1,    -1,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
     417,   418,   419,   420,    -1,   422,   423,    -1,   425,   426,
     427,   428,   429,   430,   431,    -1,   433,   434,    -1,    -1,
      -1,   438,   439,   440,   441,   442,   443,   444,   445,   446,
     447,   448,   449,   450,   451,    -1,    -1,   454,   455,   456,
     457,   458,   459,   460,    -1,   462,   463,   464,   465,   466,
     467,   468,    -1,   470,   471,   472,    -1,   474,   475,   476,
     477,    -1,    -1,    -1,   481,    -1,    -1,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,   498,   499,   500,   501,   502,   503,   504,   505,    -1,
      -1,    -1,    -1,    -1,    -1,   512,   513,    -1,    -1,    -1,
      -1,    -1,   519,    -1,   521,    -1,    -1,    -1,    -1,    -1,
     527,   528,    -1,    -1,    -1,    -1,   533,   534,     3,     4,
       5,     6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    21,    22,    23,    24,
      -1,    26,    27,    28,    29,    -1,    31,    32,    33,    -1,
      -1,    -1,    -1,    -1,    39,    -1,    -1,    42,    43,    -1,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    -1,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    -1,    72,    73,    74,
      75,    76,    -1,    78,    -1,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    -1,    91,    92,    93,    94,
      95,    -1,    -1,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,    -1,   120,    -1,   122,   123,   124,
     125,   126,   127,    -1,   129,    -1,   131,   132,   133,   134,
      -1,    -1,   137,   138,   139,   140,   141,    -1,    -1,    -1,
     145,   146,   147,    -1,   149,   150,   151,    -1,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,   163,   164,
     165,    -1,   167,   168,   169,   170,    -1,   172,    -1,   174,
     175,    -1,   177,   178,   179,   180,   181,   182,    -1,   184,
      -1,    -1,    -1,   188,   189,    -1,   191,    -1,   193,   194,
     195,   196,   197,   198,   199,   200,   201,   202,   203,   204,
      -1,   206,   207,   208,   209,   210,   211,    -1,   213,   214,
     215,   216,   217,   218,   219,   220,   221,   222,    -1,   224,
      -1,   226,   227,   228,   229,   230,   231,    -1,   233,   234,
     235,   236,   237,    -1,    -1,   240,   241,   242,   243,    -1,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,    -1,   281,    -1,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,    -1,
     295,   296,    -1,    -1,   299,   300,   301,    -1,    -1,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,    -1,    -1,   321,    -1,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,    -1,   334,
     335,   336,   337,   338,    -1,    -1,   341,    -1,   343,   344,
     345,   346,   347,   348,   349,   350,    -1,   352,   353,   354,
      -1,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,    -1,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
      -1,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,    -1,   397,   398,    -1,   400,   401,   402,    -1,    -1,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,    -1,   422,   423,    -1,
     425,   426,   427,   428,   429,   430,   431,    -1,   433,   434,
      -1,    -1,    -1,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,    -1,    -1,   454,
     455,   456,   457,   458,   459,   460,    -1,   462,   463,   464,
     465,   466,   467,   468,    -1,   470,   471,   472,    -1,   474,
     475,   476,   477,    -1,    -1,    -1,   481,    -1,    -1,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   512,   513,    -1,
      -1,    -1,    -1,    -1,   519,    -1,   521,    -1,    -1,    -1,
      -1,    -1,   527,   528,    -1,    -1,    -1,    -1,   533,   534,
       3,     4,     5,     6,     7,    -1,     9,    10,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    21,    22,
      23,    24,    -1,    26,    27,    28,    29,    -1,    31,    32,
      33,    -1,    -1,    -1,    -1,    -1,    39,    -1,    -1,    42,
      43,    -1,    45,    46,    47,    48,    49,    50,    51,    52,
      53,    54,    55,    56,    -1,    58,    59,    60,    61,    62,
      63,    64,    65,    66,    67,    68,    69,    70,    -1,    72,
      73,    74,    75,    76,    -1,    78,    -1,    80,    81,    82,
      83,    84,    85,    86,    87,    88,    89,    -1,    91,    92,
      93,    94,    95,    -1,    -1,    98,    99,   100,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,   117,   118,    -1,   120,    -1,   122,
     123,   124,   125,   126,   127,    -1,   129,    -1,   131,   132,
     133,   134,    -1,    -1,   137,   138,   139,   140,   141,    -1,
      -1,    -1,   145,   146,   147,    -1,   149,   150,   151,    -1,
     153,   154,   155,   156,   157,   158,   159,   160,   161,   162,
     163,   164,   165,    -1,   167,   168,   169,   170,    -1,   172,
      -1,   174,   175,    -1,   177,   178,   179,   180,   181,   182,
      -1,   184,    -1,    -1,    -1,   188,   189,    -1,   191,    -1,
     193,   194,   195,   196,   197,   198,   199,   200,   201,   202,
     203,   204,    -1,   206,   207,   208,   209,   210,   211,    -1,
     213,   214,   215,   216,   217,   218,   219,   220,   221,   222,
      -1,   224,    -1,   226,   227,   228,   229,   230,   231,    -1,
     233,   234,   235,   236,   237,    -1,    -1,   240,   241,   242,
     243,    -1,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,    -1,   281,    -1,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,    -1,   295,   296,    -1,    -1,   299,   300,   301,    -1,
      -1,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,    -1,    -1,   321,    -1,
     323,   324,   325,   326,   327,   328,   329,   330,   331,   332,
      -1,   334,   335,   336,   337,   338,    -1,    -1,   341,    -1,
     343,   344,   345,   346,   347,   348,   349,   350,    -1,   352,
     353,   354,    -1,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,    -1,   367,   368,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,    -1,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,    -1,   397,   398,    -1,   400,   401,   402,
      -1,    -1,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,   417,   418,   419,   420,    -1,   422,
     423,    -1,   425,   426,   427,   428,   429,   430,   431,    -1,
     433,   434,    -1,    -1,    -1,   438,   439,   440,   441,   442,
     443,   444,   445,   446,   447,   448,   449,   450,   451,    -1,
      -1,   454,   455,   456,   457,   458,   459,   460,    -1,   462,
     463,   464,   465,   466,   467,   468,    -1,   470,   471,   472,
      -1,   474,   475,   476,   477,    -1,    -1,    -1,   481,    -1,
      -1,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   500,   501,   502,
     503,   504,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   512,
     513,    -1,    -1,    -1,    -1,    -1,   519,    -1,   521,    -1,
      -1,    -1,    -1,    -1,   527,   528,    -1,    -1,    -1,    -1,
     533,   534,     3,     4,     5,     6,     7,     8,     9,    10,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      21,    22,    23,    24,    -1,    26,    27,    28,    29,    -1,
      31,    32,    33,    -1,    -1,    -1,    -1,    -1,    39,    -1,
      -1,    42,    43,    -1,    45,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    -1,    58,    59,    60,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      -1,    72,    73,    74,    75,    76,    -1,    78,    -1,    80,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    -1,
      91,    92,    93,    94,    95,    -1,    -1,    98,    99,   100,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,    -1,   120,
      -1,   122,   123,   124,   125,   126,   127,    -1,   129,    -1,
     131,   132,   133,   134,    -1,    -1,   137,   138,   139,   140,
     141,    -1,    -1,    -1,   145,   146,   147,    -1,   149,   150,
     151,    -1,   153,   154,   155,   156,   157,   158,   159,   160,
     161,   162,   163,   164,   165,    -1,   167,   168,   169,   170,
      -1,   172,    -1,   174,   175,    -1,   177,   178,   179,   180,
     181,   182,    -1,   184,    -1,    -1,    -1,   188,   189,    -1,
     191,    -1,   193,   194,   195,   196,   197,   198,   199,   200,
     201,   202,   203,   204,    -1,   206,   207,   208,   209,   210,
     211,    -1,   213,   214,   215,   216,   217,   218,   219,   220,
     221,   222,    -1,   224,    -1,   226,    -1,   228,   229,   230,
     231,    -1,   233,   234,   235,   236,   237,    -1,    -1,   240,
     241,   242,   243,    -1,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,    -1,
     281,    -1,   283,   284,   285,   286,   287,   288,   289,   290,
     291,   292,   293,    -1,   295,   296,    -1,    -1,   299,   300,
     301,    -1,    -1,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,    -1,    -1,
     321,    -1,   323,   324,   325,   326,   327,   328,   329,   330,
     331,   332,    -1,   334,   335,   336,   337,   338,    -1,    -1,
     341,    -1,   343,   344,   345,   346,   347,   348,   349,   350,
      -1,   352,   353,   354,    -1,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,    -1,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,    -1,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,    -1,   397,   398,    -1,   400,
     401,   402,    -1,    -1,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,   417,   418,   419,   420,
      -1,   422,   423,    -1,   425,   426,   427,   428,   429,   430,
     431,    -1,   433,   434,    -1,    -1,    -1,   438,   439,   440,
     441,   442,   443,   444,   445,   446,   447,   448,   449,   450,
     451,    -1,    -1,   454,   455,   456,   457,   458,   459,   460,
      -1,   462,   463,   464,   465,   466,   467,   468,    -1,   470,
     471,   472,    -1,   474,   475,   476,   477,    -1,    -1,    -1,
     481,    -1,    -1,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,   499,   500,
     501,   502,   503,   504,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   512,   513,    -1,    -1,    -1,    -1,    -1,   519,    -1,
     521,    -1,    -1,    -1,    -1,    -1,   527,   528,    -1,    -1,
      -1,    -1,   533,   534,     3,     4,     5,     6,     7,     8,
       9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    21,    22,    23,    24,    -1,    26,    27,    28,
      29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,
      39,    -1,    -1,    42,    43,    -1,    45,    46,    47,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    -1,    58,
      59,    60,    61,    62,    63,    64,    65,    66,    67,    68,
      69,    70,    -1,    72,    73,    74,    75,    76,    -1,    78,
      -1,    80,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    -1,    91,    92,    93,    94,    95,    -1,    -1,    98,
      99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
     119,   120,    -1,   122,   123,   124,   125,   126,   127,    -1,
     129,    -1,   131,   132,   133,   134,    -1,    -1,   137,   138,
     139,   140,   141,    -1,    -1,    -1,   145,   146,   147,    -1,
     149,   150,   151,    -1,   153,   154,   155,   156,   157,   158,
     159,   160,   161,   162,   163,   164,   165,    -1,   167,   168,
     169,   170,    -1,   172,    -1,   174,   175,    -1,   177,   178,
     179,   180,   181,   182,    -1,   184,    -1,    -1,    -1,   188,
     189,    -1,   191,    -1,   193,   194,   195,   196,   197,   198,
     199,   200,   201,   202,   203,   204,    -1,   206,   207,   208,
     209,   210,   211,    -1,   213,   214,   215,   216,   217,   218,
     219,   220,   221,   222,    -1,   224,    -1,   226,    -1,    -1,
     229,   230,   231,    -1,   233,   234,   235,   236,   237,    -1,
      -1,   240,   241,   242,   243,    -1,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,    -1,   281,    -1,   283,   284,    -1,   286,   287,   288,
     289,   290,   291,   292,   293,    -1,   295,   296,    -1,    -1,
     299,   300,   301,    -1,    -1,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
      -1,    -1,   321,    -1,   323,   324,   325,   326,   327,   328,
     329,   330,   331,   332,    -1,   334,   335,   336,   337,   338,
      -1,    -1,   341,    -1,   343,   344,   345,   346,   347,   348,
     349,   350,    -1,   352,   353,   354,    -1,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,    -1,   367,   368,
     369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,    -1,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,    -1,   397,   398,
      -1,   400,   401,   402,    -1,    -1,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,   417,   418,
     419,   420,    -1,   422,   423,    -1,   425,   426,   427,   428,
     429,   430,   431,    -1,   433,   434,    -1,    -1,    -1,   438,
     439,   440,   441,   442,   443,   444,   445,   446,   447,   448,
     449,   450,   451,    -1,    -1,   454,   455,   456,   457,   458,
     459,   460,    -1,   462,   463,   464,   465,   466,   467,   468,
      -1,   470,   471,   472,    -1,   474,   475,   476,   477,    -1,
      -1,    -1,   481,    -1,    -1,   484,   485,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
     499,   500,   501,   502,   503,   504,   505,    -1,    -1,    -1,
      -1,    -1,    -1,   512,   513,    -1,    -1,    -1,    -1,    -1,
     519,    -1,   521,    -1,    -1,    -1,    -1,    -1,   527,   528,
      -1,    -1,    -1,    -1,   533,   534,     3,     4,     5,     6,
       7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    21,    22,    23,    24,    -1,    26,
      27,    28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,
      -1,    -1,    39,    -1,    -1,    42,    43,    -1,    45,    46,
      47,    48,    49,    50,    51,    -1,    53,    54,    55,    56,
      -1,    58,    59,    60,    61,    62,    63,    64,    65,    66,
      67,    68,    69,    70,    -1,    72,    73,    74,    75,    76,
      -1,    78,    -1,    80,    81,    82,    83,    84,    85,    86,
      87,    88,    89,    -1,    91,    92,    93,    94,    95,    -1,
      -1,    98,    99,   100,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,   118,   119,   120,    -1,   122,   123,   124,   125,   126,
     127,    -1,   129,    -1,   131,   132,   133,   134,    -1,    -1,
     137,   138,   139,   140,   141,    -1,    -1,    -1,   145,   146,
     147,    -1,   149,    -1,   151,    -1,   153,   154,   155,   156,
     157,   158,   159,   160,   161,   162,   163,   164,   165,    -1,
     167,   168,   169,   170,    -1,   172,    -1,   174,   175,    -1,
     177,   178,   179,   180,    -1,   182,    -1,   184,    -1,    -1,
      -1,   188,   189,    -1,   191,    -1,   193,   194,   195,   196,
     197,   198,   199,    -1,   201,   202,   203,   204,    -1,   206,
     207,   208,   209,   210,   211,    -1,   213,   214,   215,   216,
     217,   218,   219,   220,   221,   222,    -1,   224,    -1,   226,
      -1,    -1,   229,   230,   231,    -1,   233,   234,   235,   236,
     237,    -1,    -1,   240,   241,   242,    -1,    -1,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,    -1,   281,    -1,   283,   284,    -1,   286,
     287,   288,   289,   290,   291,   292,   293,    -1,   295,   296,
      -1,    -1,   299,   300,   301,    -1,    -1,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,    -1,    -1,   321,    -1,   323,   324,   325,   326,
     327,   328,   329,   330,   331,   332,    -1,   334,   335,   336,
     337,   338,    -1,    -1,   341,    -1,   343,   344,   345,   346,
     347,   348,   349,   350,    -1,   352,   353,   354,    -1,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,    -1,
     367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,    -1,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,    -1,
     397,    -1,    -1,   400,   401,   402,    -1,    -1,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
     417,   418,   419,   420,    -1,   422,   423,    -1,   425,   426,
     427,   428,   429,   430,   431,    -1,   433,   434,    -1,    -1,
      -1,   438,   439,   440,   441,   442,   443,   444,   445,   446,
     447,   448,   449,   450,   451,    -1,    -1,   454,   455,   456,
     457,   458,   459,   460,    -1,   462,   463,   464,   465,   466,
     467,   468,    -1,   470,   471,   472,    -1,   474,   475,   476,
     477,    -1,    -1,    -1,   481,    -1,    -1,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,   498,   499,   500,   501,   502,   503,   504,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   512,   513,    -1,    -1,    -1,
       3,    -1,   519,    -1,   521,    -1,    -1,    -1,    -1,    -1,
     527,   528,    -1,    -1,    -1,    -1,   533,   534,    21,    22,
      23,    24,    -1,    26,    27,    28,    29,    -1,    31,    32,
      33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    42,
      43,    -1,    45,    46,    47,    -1,    49,    50,    51,    52,
      53,    -1,    55,    56,    -1,    58,    59,    60,    61,    62,
      63,    -1,    -1,    66,    67,    68,    69,    70,    -1,    72,
      73,    74,    75,    76,    -1,    -1,    -1,    -1,    81,    82,
      83,    84,    85,    -1,    87,    88,    89,    -1,    91,    92,
      93,    94,    95,    -1,    -1,    -1,    99,   100,   101,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   109,   110,   111,   112,
     113,   114,   115,   116,   117,   118,    -1,   120,    -1,   122,
     123,   124,   125,   126,   127,    -1,   129,    -1,   131,   132,
     133,   134,    -1,    -1,   137,   138,   139,   140,   141,    -1,
      -1,    -1,   145,   146,   147,    -1,   149,   150,   151,    -1,
     153,   154,   155,   156,   157,   158,   159,   160,   161,   162,
     163,    -1,   165,    -1,   167,   168,   169,   170,    -1,   172,
      -1,   174,    -1,    -1,    -1,   178,   179,   180,    -1,   182,
      -1,   184,    -1,    -1,    -1,   188,   189,    -1,   191,    -1,
     193,   194,   195,   196,   197,   198,   199,    -1,   201,   202,
     203,   204,    -1,   206,   207,   208,   209,   210,   211,    -1,
     213,    -1,   215,   216,   217,   218,   219,   220,   221,   222,
      -1,   224,    -1,   226,    -1,    -1,   229,    -1,   231,    -1,
     233,   234,   235,   236,   237,    -1,    -1,   240,    -1,   242,
      -1,    -1,   245,   246,   247,    -1,    -1,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,    -1,   276,   277,   278,   279,    -1,   281,    -1,
     283,   284,    -1,   286,    -1,   288,   289,   290,   291,   292,
     293,    -1,   295,   296,    -1,    -1,   299,   300,   301,    -1,
      -1,   304,   305,    -1,   307,    -1,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,    -1,    -1,   321,    -1,
     323,   324,   325,    -1,   327,   328,   329,   330,   331,   332,
      -1,   334,   335,   336,   337,   338,    -1,    -1,   341,    -1,
     343,   344,   345,   346,   347,   348,   349,   350,    -1,   352,
     353,   354,    -1,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,    -1,   367,   368,    -1,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,    -1,   386,   387,   388,   389,   390,    -1,   392,
     393,   394,   395,    -1,   397,    -1,    -1,   400,   401,   402,
      -1,    -1,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,   417,   418,   419,   420,    -1,   422,
     423,    -1,   425,    -1,   427,   428,   429,   430,   431,    -1,
     433,   434,    -1,    -1,    -1,   438,   439,   440,   441,   442,
      -1,   444,   445,   446,   447,   448,   449,   450,   451,    -1,
      -1,   454,   455,   456,   457,   458,   459,    -1,    -1,   462,
     463,   464,   465,   466,   467,   468,    -1,   470,    -1,   472,
      -1,   474,   475,   476,   477,    -1,    -1,    -1,   481,    -1,
      -1,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   500,   501,   502,
     503,   504,    -1,    -1,    -1,    -1,     3,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   521,    -1,
      -1,    -1,    -1,    -1,    21,    22,    23,    24,   531,    26,
      27,    28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,
      -1,    -1,    -1,    40,    -1,    42,    43,    -1,    45,    46,
      47,    -1,    49,    50,    51,    52,    53,    -1,    55,    56,
      -1,    58,    59,    60,    61,    62,    63,    -1,    -1,    66,
      67,    68,    69,    70,    -1,    72,    73,    74,    75,    76,
      -1,    -1,    -1,    80,    81,    82,    83,    84,    85,    -1,
      87,    88,    89,    -1,    91,    92,    93,    94,    95,    -1,
      -1,    -1,    99,   100,   101,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   109,   110,   111,   112,   113,   114,   115,   116,
     117,   118,    -1,   120,    -1,   122,   123,   124,   125,   126,
     127,    -1,   129,    -1,   131,   132,   133,   134,    -1,    -1,
     137,   138,   139,   140,   141,    -1,    -1,    -1,   145,   146,
     147,    -1,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,   160,   161,   162,   163,    -1,   165,   166,
     167,   168,   169,   170,   171,   172,    -1,   174,    -1,    -1,
      -1,   178,   179,   180,    -1,   182,    -1,   184,    -1,    -1,
      -1,   188,   189,    -1,   191,    -1,   193,   194,   195,   196,
     197,   198,   199,    -1,   201,   202,   203,   204,    -1,   206,
     207,   208,   209,   210,   211,    -1,   213,    -1,   215,   216,
     217,   218,   219,   220,   221,   222,   223,   224,    -1,   226,
      -1,    -1,   229,    -1,   231,    -1,   233,   234,   235,   236,
     237,    -1,    -1,   240,    -1,   242,    -1,   244,   245,   246,
     247,    -1,    -1,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,    -1,   276,
     277,   278,   279,    -1,   281,    -1,   283,   284,    -1,   286,
      -1,   288,   289,   290,   291,   292,   293,   294,   295,   296,
      -1,    -1,   299,   300,   301,    -1,   303,   304,   305,    -1,
     307,    -1,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,    -1,    -1,   321,    -1,   323,   324,   325,    -1,
     327,   328,   329,   330,   331,   332,    -1,   334,   335,   336,
     337,   338,    -1,    -1,   341,    -1,   343,   344,   345,   346,
     347,   348,   349,   350,    -1,   352,   353,   354,    -1,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,    -1,
     367,   368,    -1,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,    -1,   386,
     387,   388,   389,   390,    -1,   392,   393,   394,   395,    -1,
     397,    -1,    -1,   400,   401,   402,    -1,    -1,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
     417,   418,   419,   420,    -1,   422,   423,    -1,   425,    -1,
     427,   428,   429,   430,   431,    -1,   433,   434,    -1,    -1,
      -1,   438,   439,   440,   441,   442,    -1,   444,   445,   446,
     447,   448,   449,   450,   451,   452,    -1,   454,   455,   456,
     457,   458,   459,    -1,    -1,   462,   463,   464,   465,   466,
     467,   468,    -1,   470,    -1,   472,    -1,   474,   475,   476,
     477,    -1,    -1,    -1,   481,    -1,    -1,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,   498,   499,   500,   501,   502,   503,   504,     3,    -1,
       5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   522,    21,    22,    23,    24,
      -1,    26,    27,    28,    29,    -1,    31,    32,    33,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    42,    43,    -1,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    -1,    58,    59,    60,    61,    62,    63,    -1,
      65,    66,    67,    68,    69,    70,    -1,    72,    73,    74,
      75,    76,    -1,    78,    -1,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    -1,    91,    92,    93,    94,
      95,    -1,    -1,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,    -1,   120,    -1,   122,   123,   124,
     125,   126,   127,    -1,   129,    -1,   131,   132,   133,   134,
      -1,    -1,   137,   138,   139,   140,   141,    -1,    -1,    -1,
     145,   146,   147,    -1,   149,   150,   151,    -1,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,   163,    -1,
     165,    -1,   167,   168,   169,   170,    -1,   172,    -1,   174,
     175,   176,   177,   178,   179,   180,   181,   182,    -1,   184,
      -1,   186,    -1,   188,   189,    -1,   191,    -1,   193,   194,
     195,   196,   197,   198,   199,   200,   201,   202,   203,   204,
      -1,   206,   207,   208,   209,   210,   211,    -1,   213,   214,
     215,   216,   217,   218,   219,   220,   221,   222,    -1,   224,
      -1,   226,   227,   228,   229,   230,   231,    -1,   233,   234,
     235,   236,   237,   238,    -1,   240,   241,   242,   243,    -1,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,    -1,   281,    -1,   283,   284,
     285,   286,    -1,   288,   289,   290,   291,   292,   293,    -1,
     295,   296,    -1,   298,   299,   300,   301,    -1,    -1,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,    -1,    -1,   321,    -1,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,    -1,   334,
     335,   336,   337,   338,    -1,    -1,   341,    -1,   343,   344,
     345,   346,   347,   348,   349,   350,    -1,   352,   353,   354,
      -1,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,    -1,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,    -1,   397,   398,    -1,   400,   401,   402,    -1,    -1,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,    -1,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,    -1,   433,   434,
      -1,    -1,    -1,   438,   439,   440,   441,   442,    -1,   444,
     445,   446,   447,   448,   449,   450,   451,    -1,    -1,   454,
     455,   456,   457,   458,   459,   460,    -1,   462,   463,   464,
     465,   466,   467,   468,    -1,   470,   471,   472,    -1,   474,
     475,   476,   477,    -1,    -1,    -1,   481,    -1,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
      -1,     3,   507,     5,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   521,    -1,    -1,    21,
      22,    23,    24,    -1,    26,    27,    28,    29,    -1,    31,
      32,    33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      42,    43,    -1,    45,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    -1,    58,    59,    60,    61,
      62,    63,    -1,    65,    66,    67,    68,    69,    70,    -1,
      72,    73,    74,    75,    76,    -1,    78,    -1,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    -1,    91,
      92,    93,    94,    95,    -1,    -1,    98,    99,   100,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,    -1,   120,    -1,
     122,   123,   124,   125,   126,   127,    -1,   129,    -1,   131,
     132,   133,   134,    -1,    -1,   137,   138,   139,   140,   141,
      -1,    -1,    -1,   145,   146,   147,    -1,   149,   150,   151,
      -1,   153,   154,   155,   156,   157,   158,   159,   160,   161,
     162,   163,    -1,   165,    -1,   167,   168,   169,   170,    -1,
     172,    -1,   174,   175,    -1,   177,   178,   179,   180,   181,
     182,    -1,   184,    -1,   186,    -1,   188,   189,    -1,   191,
      -1,   193,   194,   195,   196,   197,   198,   199,   200,   201,
     202,   203,   204,    -1,   206,   207,   208,   209,   210,   211,
      -1,   213,   214,   215,   216,   217,   218,   219,   220,   221,
     222,    -1,   224,    -1,   226,   227,   228,   229,   230,   231,
      -1,   233,   234,   235,   236,   237,   238,    -1,   240,   241,
     242,   243,    -1,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,    -1,   281,
      -1,   283,   284,   285,   286,    -1,   288,   289,   290,   291,
     292,   293,    -1,   295,   296,    -1,   298,   299,   300,   301,
      -1,    -1,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,    -1,    -1,   321,
      -1,   323,   324,   325,   326,   327,   328,   329,   330,   331,
     332,    -1,   334,   335,   336,   337,   338,    -1,    -1,   341,
      -1,   343,   344,   345,   346,   347,   348,   349,   350,    -1,
     352,   353,   354,    -1,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,    -1,   367,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,    -1,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,    -1,   397,   398,    -1,   400,   401,
     402,    -1,    -1,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,   417,   418,   419,   420,    -1,
     422,   423,    -1,   425,   426,   427,   428,   429,   430,   431,
      -1,   433,   434,    -1,    -1,    -1,   438,   439,   440,   441,
     442,    -1,   444,   445,   446,   447,   448,   449,   450,   451,
      -1,    -1,   454,   455,   456,   457,   458,   459,   460,    -1,
     462,   463,   464,   465,   466,   467,   468,    -1,   470,   471,
     472,    -1,   474,   475,   476,   477,    -1,    -1,    -1,   481,
      -1,    -1,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,   498,   499,   500,   501,
     502,   503,   504,     3,     4,     5,    -1,    -1,    -1,     9,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   521,
      -1,    21,    22,    23,    24,    -1,    26,    27,    28,    29,
      -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    42,    43,    -1,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    -1,    58,    59,
      60,    61,    62,    63,    -1,    -1,    66,    67,    68,    69,
      70,    -1,    72,    73,    74,    75,    76,    -1,    78,    -1,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      -1,    91,    92,    93,    94,    95,    -1,    -1,    98,    99,
     100,   101,   102,   103,   104,   105,    -1,    -1,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,    -1,
     120,    -1,   122,   123,   124,   125,   126,   127,    -1,   129,
      -1,   131,   132,   133,   134,    -1,    -1,   137,   138,   139,
     140,   141,    -1,    -1,    -1,   145,   146,   147,    -1,   149,
     150,   151,    -1,   153,   154,   155,   156,   157,   158,   159,
     160,   161,   162,   163,   164,   165,    -1,   167,   168,   169,
     170,    -1,   172,    -1,   174,   175,    -1,   177,   178,   179,
     180,   181,   182,    -1,   184,    -1,    -1,    -1,   188,   189,
      -1,   191,    -1,   193,   194,   195,   196,   197,   198,   199,
     200,   201,   202,   203,   204,    -1,   206,   207,   208,   209,
     210,   211,    -1,   213,   214,   215,   216,   217,   218,   219,
     220,   221,   222,    -1,   224,    -1,   226,   227,   228,   229,
     230,   231,    -1,   233,   234,   235,   236,   237,    -1,    -1,
     240,   241,   242,   243,    -1,   245,   246,   247,    -1,    -1,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
      -1,   281,    -1,   283,   284,   285,   286,    -1,   288,   289,
     290,   291,   292,   293,    -1,   295,   296,   297,    -1,   299,
     300,   301,    -1,    -1,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,    -1,
      -1,   321,    -1,   323,   324,   325,   326,   327,   328,   329,
     330,   331,   332,    -1,   334,   335,   336,   337,   338,    -1,
      -1,   341,    -1,   343,   344,   345,   346,   347,   348,   349,
     350,    -1,   352,   353,   354,    -1,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,    -1,   367,   368,   369,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,    -1,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,    -1,   397,   398,    -1,
     400,   401,   402,    -1,    -1,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,   417,   418,   419,
     420,    -1,   422,   423,    -1,   425,   426,   427,   428,   429,
     430,   431,    -1,   433,   434,    -1,    -1,    -1,   438,   439,
     440,   441,   442,   443,   444,   445,   446,   447,   448,   449,
     450,   451,    -1,    -1,   454,   455,   456,   457,   458,   459,
     460,    -1,   462,   463,   464,   465,   466,   467,   468,    -1,
     470,   471,   472,    -1,   474,   475,   476,   477,    -1,    -1,
      -1,   481,    -1,    -1,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,   498,   499,
     500,   501,   502,   503,   504,     3,    -1,    -1,    -1,    -1,
      -1,    -1,   512,   513,   514,    -1,    -1,    -1,    -1,    -1,
      -1,   521,    -1,    21,    22,    23,    24,    -1,    26,    27,
      28,    29,    -1,    31,    32,    33,    34,    35,    -1,    -1,
      -1,    -1,    -1,    -1,    42,    43,    -1,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    -1,
      58,    59,    60,    61,    62,    63,    -1,    -1,    66,    67,
      68,    69,    70,    -1,    72,    73,    74,    75,    76,    -1,
      78,    -1,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    -1,    91,    92,    93,    94,    95,    -1,    -1,
      98,    99,   100,   101,   102,   103,   104,   105,    -1,    -1,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,    -1,   120,    -1,   122,   123,   124,   125,   126,   127,
      -1,   129,    -1,   131,   132,   133,   134,    -1,    -1,   137,
     138,   139,   140,   141,    -1,    -1,    -1,   145,   146,   147,
      -1,   149,   150,   151,    -1,   153,   154,   155,   156,   157,
     158,   159,   160,   161,   162,   163,    -1,   165,    -1,   167,
     168,   169,   170,    -1,   172,    -1,   174,   175,   176,   177,
     178,   179,   180,   181,   182,    -1,   184,    -1,    -1,    -1,
     188,   189,    -1,   191,    -1,   193,   194,   195,   196,   197,
     198,   199,   200,   201,   202,   203,   204,    -1,   206,   207,
     208,   209,   210,   211,    -1,   213,   214,   215,   216,   217,
     218,   219,   220,   221,   222,    -1,   224,    -1,   226,   227,
     228,   229,   230,   231,    -1,   233,   234,   235,   236,   237,
      -1,    -1,   240,   241,   242,   243,    -1,   245,   246,   247,
      -1,    -1,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,    -1,   281,    -1,   283,   284,   285,   286,    -1,
     288,   289,   290,   291,   292,   293,    -1,   295,   296,    -1,
      -1,   299,   300,   301,    -1,    -1,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,    -1,    -1,   321,    -1,   323,   324,   325,   326,   327,
     328,   329,   330,   331,   332,    -1,   334,   335,   336,   337,
     338,    -1,    -1,   341,    -1,   343,   344,   345,   346,   347,
     348,   349,   350,    -1,   352,   353,   354,    -1,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,    -1,   367,
     368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,    -1,   397,
     398,    -1,   400,   401,   402,    -1,    -1,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,   417,
     418,   419,   420,    -1,   422,   423,   424,   425,   426,   427,
     428,   429,   430,   431,    -1,   433,   434,    -1,    -1,    -1,
     438,   439,   440,   441,   442,    -1,   444,   445,   446,   447,
     448,   449,   450,   451,    -1,    -1,   454,   455,   456,   457,
     458,   459,   460,    -1,   462,   463,   464,   465,   466,   467,
     468,    -1,   470,   471,   472,    -1,   474,   475,   476,   477,
      -1,    -1,    -1,   481,    -1,   483,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,   499,   500,   501,   502,   503,   504,     3,    -1,   507,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   521,    -1,    21,    22,    23,    24,    -1,
      26,    27,    28,    29,    -1,    31,    32,    33,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    42,    43,    -1,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    -1,    58,    59,    60,    61,    62,    63,    -1,    65,
      66,    67,    68,    69,    70,    -1,    72,    73,    74,    75,
      76,    -1,    78,    -1,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    -1,    91,    92,    93,    94,    95,
      -1,    -1,    98,    99,   100,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,    -1,   120,    -1,   122,   123,   124,   125,
     126,   127,    -1,   129,    -1,   131,   132,   133,   134,    -1,
      -1,   137,   138,   139,   140,   141,    -1,    -1,    -1,   145,
     146,   147,    -1,   149,   150,   151,    -1,   153,   154,   155,
     156,   157,   158,   159,   160,   161,   162,   163,    -1,   165,
      -1,   167,   168,   169,   170,    -1,   172,    -1,   174,   175,
      -1,   177,   178,   179,   180,   181,   182,    -1,   184,    -1,
      -1,    -1,   188,   189,    -1,   191,    -1,   193,   194,   195,
     196,   197,   198,   199,   200,   201,   202,   203,   204,    -1,
     206,   207,   208,   209,   210,   211,    -1,   213,   214,   215,
     216,   217,   218,   219,   220,   221,   222,    -1,   224,    -1,
     226,   227,   228,   229,   230,   231,    -1,   233,   234,   235,
     236,   237,    -1,    -1,   240,   241,   242,   243,    -1,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,    -1,   281,    -1,   283,   284,   285,
     286,    -1,   288,   289,   290,   291,   292,   293,    -1,   295,
     296,    -1,    -1,   299,   300,   301,    -1,    -1,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,    -1,    -1,   321,    -1,   323,   324,   325,
     326,   327,   328,   329,   330,   331,   332,    -1,   334,   335,
     336,   337,   338,    -1,    -1,   341,    -1,   343,   344,   345,
     346,   347,   348,   349,   350,    -1,   352,   353,   354,    -1,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
      -1,   367,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,    -1,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
      -1,   397,   398,    -1,   400,   401,   402,    -1,    -1,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,   417,   418,   419,   420,    -1,   422,   423,    -1,   425,
     426,   427,   428,   429,   430,   431,    -1,   433,   434,    -1,
      -1,    -1,   438,   439,   440,   441,   442,    -1,   444,   445,
     446,   447,   448,   449,   450,   451,    -1,    -1,   454,   455,
     456,   457,   458,   459,   460,    -1,   462,   463,   464,   465,
     466,   467,   468,    -1,   470,   471,   472,    -1,   474,   475,
     476,   477,    -1,    -1,    -1,   481,    -1,    -1,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,   498,   499,   500,   501,   502,   503,   504,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   521,    -1,    21,    22,    23,
      24,    -1,    26,    27,    28,    29,    -1,    31,    32,    33,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    42,    43,
      -1,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    -1,    58,    59,    60,    61,    62,    63,
      -1,    65,    66,    67,    68,    69,    70,    -1,    72,    73,
      74,    75,    76,    -1,    78,    -1,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    -1,    91,    92,    93,
      94,    95,    -1,    -1,    98,    99,   100,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,    -1,   120,    -1,   122,   123,
     124,   125,   126,   127,    -1,   129,    -1,   131,   132,   133,
     134,    -1,    -1,   137,   138,   139,   140,   141,    -1,    -1,
      -1,   145,   146,   147,    -1,   149,   150,   151,    -1,   153,
     154,   155,   156,   157,   158,   159,   160,   161,   162,   163,
      -1,   165,    -1,   167,   168,   169,   170,    -1,   172,    -1,
     174,   175,    -1,   177,   178,   179,   180,   181,   182,    -1,
     184,    -1,    -1,    -1,   188,   189,    -1,   191,    -1,   193,
     194,   195,   196,   197,   198,   199,   200,   201,   202,   203,
     204,    -1,   206,   207,   208,   209,   210,   211,    -1,   213,
     214,   215,   216,   217,   218,   219,   220,   221,   222,    -1,
     224,    -1,   226,   227,   228,   229,   230,   231,    -1,   233,
     234,   235,   236,   237,    -1,    -1,   240,   241,   242,   243,
      -1,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,    -1,   281,    -1,   283,
     284,   285,   286,    -1,   288,   289,   290,   291,   292,   293,
      -1,   295,   296,    -1,    -1,   299,   300,   301,    -1,    -1,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,    -1,    -1,   321,    -1,   323,
     324,   325,   326,   327,   328,   329,   330,   331,   332,    -1,
     334,   335,   336,   337,   338,    -1,    -1,   341,    -1,   343,
     344,   345,   346,   347,   348,   349,   350,    -1,   352,   353,
     354,    -1,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,    -1,   367,   368,   369,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,    -1,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,    -1,   397,   398,    -1,   400,   401,   402,    -1,
      -1,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,   417,   418,   419,   420,    -1,   422,   423,
      -1,   425,   426,   427,   428,   429,   430,   431,    -1,   433,
     434,    -1,    -1,    -1,   438,   439,   440,   441,   442,    -1,
     444,   445,   446,   447,   448,   449,   450,   451,    -1,    -1,
     454,   455,   456,   457,   458,   459,   460,    -1,   462,   463,
     464,   465,   466,   467,   468,    -1,   470,   471,   472,    -1,
     474,   475,   476,   477,    -1,    -1,    -1,   481,    -1,    -1,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,   499,   500,   501,   502,   503,
     504,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   521,    -1,    21,
      22,    23,    24,    -1,    26,    27,    28,    29,    30,    31,
      32,    33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      42,    43,    -1,    45,    46,    47,    -1,    49,    50,    51,
      52,    53,    -1,    55,    56,    -1,    58,    59,    60,    61,
      62,    63,    -1,    -1,    66,    67,    68,    69,    70,    -1,
      72,    73,    74,    75,    76,    -1,    -1,    -1,    80,    81,
      82,    83,    84,    85,    -1,    87,    88,    89,    -1,    91,
      92,    93,    94,    95,    -1,    -1,    -1,    99,   100,   101,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,    -1,   120,    -1,
     122,   123,   124,   125,   126,   127,    -1,   129,    -1,   131,
     132,   133,   134,    -1,    -1,   137,   138,   139,   140,   141,
      -1,    -1,    -1,   145,   146,   147,    -1,   149,   150,   151,
      -1,   153,   154,   155,   156,   157,   158,   159,   160,   161,
     162,   163,    -1,   165,    -1,   167,   168,   169,   170,    -1,
     172,    -1,   174,    -1,   176,    -1,   178,   179,   180,    -1,
     182,    -1,   184,    -1,    -1,    -1,   188,   189,    -1,   191,
      -1,   193,   194,   195,   196,   197,   198,   199,    -1,   201,
     202,   203,   204,    -1,   206,   207,   208,   209,   210,   211,
      -1,   213,    -1,   215,   216,   217,   218,   219,   220,   221,
     222,    -1,   224,    -1,   226,    -1,    -1,   229,    -1,   231,
      -1,   233,   234,   235,   236,   237,    -1,    -1,   240,    -1,
     242,    -1,    -1,   245,   246,   247,    -1,    -1,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,    -1,   276,   277,   278,   279,    -1,   281,
      -1,   283,   284,    -1,   286,    -1,   288,   289,   290,   291,
     292,   293,    -1,   295,   296,    -1,    -1,   299,   300,   301,
      -1,    -1,   304,   305,    -1,   307,    -1,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,    -1,    -1,   321,
      -1,   323,   324,   325,    -1,   327,   328,   329,   330,   331,
     332,    -1,   334,   335,   336,   337,   338,    -1,    -1,   341,
      -1,   343,   344,   345,   346,   347,   348,   349,   350,    -1,
     352,   353,   354,    -1,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,    -1,   367,   368,    -1,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,   386,   387,   388,   389,   390,    -1,
     392,   393,   394,   395,    -1,   397,    -1,    -1,   400,   401,
     402,    -1,    -1,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,   417,   418,   419,   420,    -1,
     422,   423,   424,   425,    -1,   427,   428,   429,   430,   431,
      -1,   433,   434,    -1,    -1,    -1,   438,   439,   440,   441,
     442,    -1,   444,   445,   446,   447,   448,   449,   450,   451,
      -1,    -1,   454,   455,   456,   457,   458,   459,    -1,    -1,
     462,   463,   464,   465,   466,   467,   468,    -1,   470,    -1,
     472,    -1,   474,   475,   476,   477,    -1,    -1,    -1,   481,
      -1,   483,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,   498,   499,   500,   501,
     502,   503,   504,     3,    -1,   507,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   521,
      -1,    21,    22,    23,    24,    -1,    26,    27,    28,    29,
      -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    42,    43,    -1,    45,    46,    47,    -1,    49,
      50,    51,    52,    53,    -1,    55,    56,    -1,    58,    59,
      60,    61,    62,    63,    -1,    -1,    66,    67,    68,    69,
      70,    -1,    72,    73,    74,    75,    76,    -1,    -1,    -1,
      80,    81,    82,    83,    84,    85,    -1,    87,    88,    89,
      -1,    91,    92,    93,    94,    95,    -1,    -1,    -1,    99,
     100,   101,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,    -1,
     120,    -1,   122,   123,   124,   125,   126,   127,    -1,   129,
      -1,   131,   132,   133,   134,    -1,    -1,   137,   138,   139,
     140,   141,    -1,    -1,    -1,   145,   146,   147,    -1,   149,
     150,   151,    -1,   153,   154,   155,   156,   157,   158,   159,
     160,   161,   162,   163,    -1,   165,    -1,   167,   168,   169,
     170,    -1,   172,    -1,   174,    -1,   176,    -1,   178,   179,
     180,    -1,   182,    -1,   184,    -1,    -1,    -1,   188,   189,
      -1,   191,    -1,   193,   194,   195,   196,   197,   198,   199,
      -1,   201,   202,   203,   204,    -1,   206,   207,   208,   209,
     210,   211,    -1,   213,    -1,   215,   216,   217,   218,   219,
     220,   221,   222,    -1,   224,    -1,   226,    -1,    -1,   229,
      -1,   231,    -1,   233,   234,   235,   236,   237,    -1,    -1,
     240,    -1,   242,    -1,    -1,   245,   246,   247,    -1,    -1,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,    -1,   276,   277,   278,   279,
      -1,   281,    -1,   283,   284,    -1,   286,    -1,   288,   289,
     290,   291,   292,   293,    -1,   295,   296,    -1,    -1,   299,
     300,   301,    -1,    -1,   304,   305,    -1,   307,    -1,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,    -1,
      -1,   321,    -1,   323,   324,   325,    -1,   327,   328,   329,
     330,   331,   332,    -1,   334,   335,   336,   337,   338,    -1,
      -1,   341,    -1,   343,   344,   345,   346,   347,   348,   349,
     350,    -1,   352,   353,   354,    -1,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,    -1,   367,   368,    -1,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,   386,   387,   388,   389,
     390,    -1,   392,   393,   394,   395,    -1,   397,    -1,    -1,
     400,   401,   402,    -1,    -1,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,   417,   418,   419,
     420,    -1,   422,   423,   424,   425,    -1,   427,   428,   429,
     430,   431,    -1,   433,   434,    -1,    -1,    -1,   438,   439,
     440,   441,   442,    -1,   444,   445,   446,   447,   448,   449,
     450,   451,    -1,    -1,   454,   455,   456,   457,   458,   459,
      -1,    -1,   462,   463,   464,   465,   466,   467,   468,    -1,
     470,    -1,   472,    -1,   474,   475,   476,   477,    -1,    -1,
      -1,   481,    -1,   483,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,   498,   499,
     500,   501,   502,   503,   504,     3,    -1,   507,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   521,    -1,    21,    22,    23,    24,    -1,    26,    27,
      28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    42,    43,    -1,    45,    46,    47,
      -1,    49,    50,    51,    52,    53,    -1,    55,    56,    -1,
      58,    59,    60,    61,    62,    63,    -1,    -1,    66,    67,
      68,    69,    70,    -1,    72,    73,    74,    75,    76,    -1,
      -1,    -1,    -1,    81,    82,    83,    84,    85,    -1,    87,
      88,    89,    -1,    91,    92,    93,    94,    95,    -1,    -1,
      -1,    99,   100,   101,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,    -1,   120,    -1,   122,   123,   124,   125,   126,   127,
      -1,   129,    -1,   131,   132,   133,   134,    -1,    -1,   137,
     138,   139,   140,   141,    -1,    -1,    -1,   145,   146,   147,
      -1,   149,   150,   151,    -1,   153,   154,   155,   156,   157,
     158,   159,   160,   161,   162,   163,    -1,   165,    -1,   167,
     168,   169,   170,    -1,   172,    -1,   174,    -1,   176,    -1,
     178,   179,   180,    -1,   182,    -1,   184,    -1,    -1,    -1,
     188,   189,    -1,   191,    -1,   193,   194,   195,   196,   197,
     198,   199,    -1,   201,   202,   203,   204,    -1,   206,   207,
     208,   209,   210,   211,    -1,   213,    -1,   215,   216,   217,
     218,   219,   220,   221,   222,    -1,   224,    -1,   226,    -1,
      -1,   229,    -1,   231,    -1,   233,   234,   235,   236,   237,
      -1,    -1,   240,    -1,   242,    -1,    -1,   245,   246,   247,
      -1,    -1,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,    -1,   276,   277,
     278,   279,    -1,   281,    -1,   283,   284,    -1,   286,    -1,
     288,   289,   290,   291,   292,   293,    -1,   295,   296,    -1,
      -1,   299,   300,   301,    -1,    -1,   304,   305,    -1,   307,
      -1,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,    -1,    -1,   321,    -1,   323,   324,   325,    -1,   327,
     328,   329,   330,   331,   332,    -1,   334,   335,   336,   337,
     338,    -1,    -1,   341,    -1,   343,   344,   345,   346,   347,
     348,   349,   350,    -1,   352,   353,   354,    -1,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,    -1,   367,
     368,    -1,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,   386,   387,
     388,   389,   390,    -1,   392,   393,   394,   395,    -1,   397,
      -1,    -1,   400,   401,   402,    -1,    -1,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,   417,
     418,   419,   420,    -1,   422,   423,   424,   425,    -1,   427,
     428,   429,   430,   431,    -1,   433,   434,    -1,    -1,    -1,
     438,   439,   440,   441,   442,    -1,   444,   445,   446,   447,
     448,   449,   450,   451,    -1,    -1,   454,   455,   456,   457,
     458,   459,    -1,    -1,   462,   463,   464,   465,   466,   467,
     468,    -1,   470,    -1,   472,    -1,   474,   475,   476,   477,
      -1,    -1,    -1,   481,    -1,   483,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,   499,   500,   501,   502,   503,   504,    -1,     3,   507,
       5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   521,    -1,    -1,    21,    22,    23,    24,
      -1,    26,    27,    28,    29,    -1,    31,    32,    33,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    42,    43,    -1,
      45,    46,    47,    -1,    49,    50,    51,    52,    53,    -1,
      55,    56,    -1,    58,    59,    60,    61,    62,    63,    -1,
      -1,    66,    67,    68,    69,    70,    -1,    72,    73,    74,
      75,    76,    -1,    -1,    -1,    80,    81,    82,    83,    84,
      85,    -1,    87,    88,    89,    -1,    91,    92,    93,    94,
      95,    -1,    -1,    -1,    99,   100,   101,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,    -1,   120,    -1,   122,   123,   124,
     125,   126,   127,    -1,   129,    -1,   131,   132,   133,   134,
      -1,    -1,   137,   138,   139,   140,   141,    -1,    -1,    -1,
     145,   146,   147,    -1,   149,   150,   151,    -1,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,   163,    -1,
     165,    -1,   167,   168,   169,   170,    -1,   172,    -1,   174,
      -1,    -1,    -1,   178,   179,   180,    -1,   182,    -1,   184,
      -1,    -1,    -1,   188,   189,    -1,   191,    -1,   193,   194,
     195,   196,   197,   198,   199,    -1,   201,   202,   203,   204,
      -1,   206,   207,   208,   209,   210,   211,    -1,   213,    -1,
     215,   216,   217,   218,   219,   220,   221,   222,    -1,   224,
      -1,   226,    -1,    -1,   229,    -1,   231,    -1,   233,   234,
     235,   236,   237,    -1,    -1,   240,    -1,   242,    -1,    -1,
     245,   246,   247,    -1,    -1,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
      -1,   276,   277,   278,   279,    -1,   281,    -1,   283,   284,
      -1,   286,    -1,   288,   289,   290,   291,   292,   293,    -1,
     295,   296,    -1,    -1,   299,   300,   301,    -1,    -1,   304,
     305,    -1,   307,    -1,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,    -1,    -1,   321,    -1,   323,   324,
     325,    -1,   327,   328,   329,   330,   331,   332,    -1,   334,
     335,   336,   337,   338,    -1,    -1,   341,    -1,   343,   344,
     345,   346,   347,   348,   349,   350,    -1,   352,   353,   354,
      -1,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,    -1,   367,   368,    -1,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
      -1,   386,   387,   388,   389,   390,    -1,   392,   393,   394,
     395,    -1,   397,    -1,    -1,   400,   401,   402,    -1,    -1,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,    -1,   422,   423,    -1,
     425,    -1,   427,   428,   429,   430,   431,    -1,   433,   434,
      -1,    -1,    -1,   438,   439,   440,   441,   442,    -1,   444,
     445,   446,   447,   448,   449,   450,   451,    -1,    -1,   454,
     455,   456,   457,   458,   459,    -1,    -1,   462,   463,   464,
     465,   466,   467,   468,    -1,   470,    -1,   472,    -1,   474,
     475,   476,   477,    -1,    -1,    -1,   481,    -1,    -1,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
       3,    -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   521,    -1,    21,    22,
      23,    24,    -1,    26,    27,    28,    29,    -1,    31,    32,
      33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    42,
      43,    -1,    45,    46,    47,    -1,    49,    50,    51,    52,
      53,    -1,    55,    56,    -1,    58,    59,    60,    61,    62,
      63,    -1,    -1,    66,    67,    68,    69,    70,    -1,    72,
      73,    74,    75,    76,    -1,    -1,    -1,    80,    81,    82,
      83,    84,    85,    -1,    87,    88,    89,    -1,    91,    92,
      93,    94,    95,    -1,    -1,    -1,    99,   100,   101,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   109,   110,   111,   112,
     113,   114,   115,   116,   117,   118,    -1,   120,    -1,   122,
     123,   124,   125,   126,   127,    -1,   129,    -1,   131,   132,
     133,   134,    -1,    -1,   137,   138,   139,   140,   141,    -1,
      -1,    -1,   145,   146,   147,    -1,   149,   150,   151,    -1,
     153,   154,   155,   156,   157,   158,   159,   160,   161,   162,
     163,    -1,   165,    -1,   167,   168,   169,   170,    -1,   172,
      -1,   174,    -1,    -1,    -1,   178,   179,   180,    -1,   182,
      -1,   184,    -1,    -1,    -1,   188,   189,    -1,   191,    -1,
     193,   194,   195,   196,   197,   198,   199,    -1,   201,   202,
     203,   204,    -1,   206,   207,   208,   209,   210,   211,    -1,
     213,    -1,   215,   216,   217,   218,   219,   220,   221,   222,
      -1,   224,    -1,   226,    -1,    -1,   229,    -1,   231,    -1,
     233,   234,   235,   236,   237,    -1,    -1,   240,    -1,   242,
      -1,    -1,   245,   246,   247,    -1,    -1,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,    -1,   276,   277,   278,   279,    -1,   281,    -1,
     283,   284,    -1,   286,    -1,   288,   289,   290,   291,   292,
     293,    -1,   295,   296,    -1,    -1,   299,   300,   301,    -1,
      -1,   304,   305,    -1,   307,    -1,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,    -1,    -1,   321,    -1,
     323,   324,   325,    -1,   327,   328,   329,   330,   331,   332,
      -1,   334,   335,   336,   337,   338,    -1,    -1,   341,    -1,
     343,   344,   345,   346,   347,   348,   349,   350,    -1,   352,
     353,   354,    -1,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,    -1,   367,   368,    -1,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,    -1,   386,   387,   388,   389,   390,    -1,   392,
     393,   394,   395,    -1,   397,    -1,    -1,   400,   401,   402,
      -1,    -1,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,   417,   418,   419,   420,    -1,   422,
     423,    -1,   425,    -1,   427,   428,   429,   430,   431,    -1,
     433,   434,    -1,    -1,    -1,   438,   439,   440,   441,   442,
      -1,   444,   445,   446,   447,   448,   449,   450,   451,    -1,
      -1,   454,   455,   456,   457,   458,   459,    -1,    -1,   462,
     463,   464,   465,   466,   467,   468,    -1,   470,    -1,   472,
      -1,   474,   475,   476,   477,    -1,    -1,    -1,   481,    -1,
      -1,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   500,   501,   502,
     503,   504,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   521,    -1,
      21,    22,    23,    24,    -1,    26,    27,    28,    29,    -1,
      31,    32,    33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    42,    43,    -1,    45,    46,    47,    -1,    49,    50,
      51,    52,    53,    -1,    55,    56,    -1,    58,    59,    60,
      61,    62,    63,    -1,    -1,    66,    67,    68,    69,    70,
      -1,    72,    73,    74,    75,    76,    -1,    -1,    -1,    80,
      81,    82,    83,    84,    85,    -1,    87,    88,    89,    -1,
      91,    92,    93,    94,    95,    -1,    -1,    -1,    99,   100,
     101,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,    -1,   120,
      -1,   122,   123,   124,   125,   126,   127,    -1,   129,    -1,
     131,   132,   133,   134,    -1,    -1,   137,   138,   139,   140,
     141,    -1,    -1,    -1,   145,   146,   147,    -1,   149,   150,
     151,    -1,   153,   154,   155,   156,   157,   158,   159,   160,
     161,   162,   163,    -1,   165,    -1,   167,   168,   169,   170,
      -1,   172,    -1,   174,    -1,    -1,    -1,   178,   179,   180,
      -1,   182,    -1,   184,    -1,    -1,    -1,   188,   189,    -1,
     191,    -1,   193,   194,   195,   196,   197,   198,   199,    -1,
     201,   202,   203,   204,    -1,   206,   207,   208,   209,   210,
     211,    -1,   213,    -1,   215,   216,   217,   218,   219,   220,
     221,   222,    -1,   224,    -1,   226,    -1,    -1,   229,    -1,
     231,    -1,   233,   234,   235,   236,   237,    -1,    -1,   240,
      -1,   242,    -1,    -1,   245,   246,   247,    -1,    -1,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,    -1,   276,   277,   278,   279,    -1,
     281,    -1,   283,   284,    -1,   286,    -1,   288,   289,   290,
     291,   292,   293,    -1,   295,   296,    -1,    -1,   299,   300,
     301,    -1,    -1,   304,   305,    -1,   307,    -1,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,    -1,    -1,
     321,    -1,   323,   324,   325,    -1,   327,   328,   329,   330,
     331,   332,    -1,   334,   335,   336,   337,   338,    -1,    -1,
     341,    -1,   343,   344,   345,   346,   347,   348,   349,   350,
      -1,   352,   353,   354,    -1,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,    -1,   367,   368,    -1,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,    -1,   386,   387,   388,   389,   390,
      -1,   392,   393,   394,   395,    -1,   397,    -1,    -1,   400,
     401,   402,    -1,    -1,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,   417,   418,   419,   420,
      -1,   422,   423,    -1,   425,    -1,   427,   428,   429,   430,
     431,    -1,   433,   434,    -1,    -1,    -1,   438,   439,   440,
     441,   442,    -1,   444,   445,   446,   447,   448,   449,   450,
     451,    -1,    -1,   454,   455,   456,   457,   458,   459,    -1,
      -1,   462,   463,   464,   465,   466,   467,   468,    -1,   470,
      -1,   472,    -1,   474,   475,   476,   477,    -1,    -1,    -1,
     481,    -1,    -1,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,   499,   500,
     501,   502,   503,   504,     3,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     521,    -1,    21,    22,    23,    24,    -1,    26,    27,    28,
      29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    42,    43,    -1,    45,    46,    47,    -1,
      49,    50,    51,    52,    53,    -1,    55,    56,    -1,    58,
      59,    60,    61,    62,    63,    -1,    -1,    66,    67,    68,
      69,    70,    -1,    72,    73,    74,    75,    76,    -1,    -1,
      -1,    80,    81,    82,    83,    84,    85,    -1,    87,    88,
      89,    -1,    91,    92,    93,    94,    95,    -1,    -1,    -1,
      99,   100,   101,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
      -1,   120,    -1,   122,   123,   124,   125,   126,   127,    -1,
     129,    -1,   131,   132,   133,   134,    -1,    -1,   137,   138,
     139,   140,   141,    -1,    -1,    -1,   145,   146,   147,    -1,
     149,   150,   151,    -1,   153,   154,   155,   156,   157,   158,
     159,   160,   161,   162,   163,    -1,   165,    -1,   167,   168,
     169,   170,    -1,   172,    -1,   174,    -1,    -1,    -1,   178,
     179,   180,    -1,   182,    -1,   184,    -1,    -1,    -1,   188,
     189,    -1,   191,    -1,   193,   194,   195,   196,   197,   198,
     199,    -1,   201,   202,   203,   204,    -1,   206,   207,   208,
     209,   210,   211,    -1,   213,    -1,   215,   216,   217,   218,
     219,   220,   221,   222,    -1,   224,    -1,   226,    -1,    -1,
     229,    -1,   231,    -1,   233,   234,   235,   236,   237,    -1,
      -1,   240,    -1,   242,    -1,    -1,   245,   246,   247,    -1,
      -1,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,    -1,   276,   277,   278,
     279,    -1,   281,    -1,   283,   284,    -1,   286,    -1,   288,
     289,   290,   291,   292,   293,    -1,   295,   296,    -1,    -1,
     299,   300,   301,    -1,    -1,   304,   305,    -1,   307,    -1,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
      -1,    -1,   321,    -1,   323,   324,   325,    -1,   327,   328,
     329,   330,   331,   332,    -1,   334,   335,   336,   337,   338,
      -1,    -1,   341,    -1,   343,   344,   345,   346,   347,   348,
     349,   350,    -1,   352,   353,   354,    -1,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,    -1,   367,   368,
      -1,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,    -1,   386,   387,   388,
     389,   390,    -1,   392,   393,   394,   395,    -1,   397,    -1,
      -1,   400,   401,   402,    -1,    -1,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,   417,   418,
     419,   420,    -1,   422,   423,    -1,   425,    -1,   427,   428,
     429,   430,   431,    -1,   433,   434,    -1,    -1,    -1,   438,
     439,   440,   441,   442,    -1,   444,   445,   446,   447,   448,
     449,   450,   451,    -1,    -1,   454,   455,   456,   457,   458,
     459,    -1,    -1,   462,   463,   464,   465,   466,   467,   468,
      -1,   470,    -1,   472,    -1,   474,   475,   476,   477,    -1,
      -1,    -1,   481,    -1,    -1,   484,   485,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
     499,   500,   501,   502,   503,   504,     3,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   521,    -1,    21,    22,    23,    24,    -1,    26,
      27,    28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    42,    43,    -1,    45,    46,
      47,    -1,    49,    50,    51,    52,    53,    -1,    55,    56,
      -1,    58,    59,    60,    61,    62,    63,    -1,    -1,    66,
      67,    68,    69,    70,    -1,    72,    73,    74,    75,    76,
      -1,    -1,    -1,    80,    81,    82,    83,    84,    85,    -1,
      87,    88,    89,    -1,    91,    92,    93,    94,    95,    -1,
      -1,    -1,    99,   100,   101,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   109,   110,   111,   112,   113,   114,   115,   116,
     117,   118,    -1,   120,    -1,   122,   123,   124,   125,   126,
     127,    -1,   129,    -1,   131,   132,   133,   134,    -1,    -1,
     137,   138,   139,   140,   141,    -1,    -1,    -1,   145,   146,
     147,    -1,   149,   150,   151,    -1,   153,   154,   155,   156,
     157,   158,   159,   160,   161,   162,   163,    -1,   165,    -1,
     167,   168,   169,   170,    -1,   172,    -1,   174,    -1,    -1,
      -1,   178,   179,   180,    -1,   182,    -1,   184,    -1,    -1,
      -1,   188,   189,    -1,   191,    -1,   193,   194,   195,   196,
     197,   198,   199,    -1,   201,   202,   203,   204,    -1,   206,
     207,   208,   209,   210,   211,    -1,   213,    -1,   215,   216,
     217,   218,   219,   220,   221,   222,    -1,   224,    -1,   226,
      -1,    -1,   229,    -1,   231,    -1,   233,   234,   235,   236,
     237,    -1,    -1,   240,    -1,   242,    -1,    -1,   245,   246,
     247,    -1,    -1,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,    -1,   276,
     277,   278,   279,    -1,   281,    -1,   283,   284,    -1,   286,
      -1,   288,   289,   290,   291,   292,   293,    -1,   295,   296,
      -1,    -1,   299,   300,   301,    -1,    -1,   304,   305,    -1,
     307,    -1,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,    -1,    -1,   321,    -1,   323,   324,   325,    -1,
     327,   328,   329,   330,   331,   332,    -1,   334,   335,   336,
     337,   338,    -1,    -1,   341,    -1,   343,   344,   345,   346,
     347,   348,   349,   350,    -1,   352,   353,   354,    -1,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,    -1,
     367,   368,    -1,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,    -1,   386,
     387,   388,   389,   390,    -1,   392,   393,   394,   395,    -1,
     397,    -1,    -1,   400,   401,   402,    -1,    -1,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
     417,   418,   419,   420,    -1,   422,   423,    -1,   425,    -1,
     427,   428,   429,   430,   431,    -1,   433,   434,    -1,    -1,
      -1,   438,   439,   440,   441,   442,    -1,   444,   445,   446,
     447,   448,   449,   450,   451,    -1,    -1,   454,   455,   456,
     457,   458,   459,    -1,    -1,   462,   463,   464,   465,   466,
     467,   468,    -1,   470,    -1,   472,    -1,   474,   475,   476,
     477,    -1,    -1,    -1,   481,    -1,    -1,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,   498,   499,   500,   501,   502,   503,   504,    -1,    -1,
       3,     4,     5,    -1,    -1,     8,     9,    -1,    -1,    -1,
      -1,    -1,    15,    -1,   521,    18,    19,    20,    21,    22,
      23,    24,    -1,    26,    27,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    -1,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    -1,
      53,    54,    55,    56,    57,    58,    59,    60,    61,    62,
      63,    64,    65,    66,    67,    68,    69,    70,    71,    72,
      73,    74,    75,    -1,    77,    78,    79,    80,    81,    82,
      83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      93,    94,    95,    -1,    97,    98,    99,   100,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,   117,   118,   119,   120,   121,   122,
     123,   124,   125,   126,   127,   128,   129,    -1,   131,   132,
     133,   134,   135,   136,   137,   138,   139,   140,   141,    -1,
      -1,   144,   145,   146,   147,   148,   149,   150,   151,   152,
     153,   154,   155,   156,    -1,   158,   159,   160,   161,   162,
      -1,   164,   165,   166,   167,   168,   169,   170,   171,   172,
     173,   174,   175,   176,   177,   178,   179,   180,   181,   182,
     183,   184,    -1,   186,   187,    -1,    -1,    -1,   191,   192,
     193,   194,   195,   196,   197,   198,   199,   200,   201,   202,
     203,   204,   205,   206,   207,   208,   209,   210,   211,   212,
     213,   214,    -1,   216,   217,   218,   219,   220,   221,   222,
     223,   224,   225,   226,   227,   228,   229,   230,   231,    -1,
     233,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,    -1,   281,   282,
     283,   284,   285,   286,   287,    -1,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,    -1,   306,   307,   308,    -1,   310,   311,   312,
     313,   314,   315,   316,   317,   318,    -1,    -1,   321,   322,
     323,   324,    -1,   326,   327,   328,    -1,   330,   331,   332,
     333,   334,   335,   336,   337,   338,    -1,    -1,   341,   342,
     343,   344,   345,   346,   347,   348,   349,   350,   351,   352,
     353,   354,    -1,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,   385,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,    -1,   397,   398,    -1,   400,   401,   402,
     403,    -1,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,   417,   418,    -1,   420,   421,   422,
     423,   424,   425,   426,   427,   428,   429,   430,   431,   432,
     433,   434,   435,    -1,   437,   438,   439,    -1,   441,    -1,
     443,   444,   445,   446,   447,   448,   449,   450,   451,   452,
     453,   454,   455,   456,   457,   458,   459,   460,   461,   462,
     463,   464,   465,   466,    -1,   468,   469,   470,   471,   472,
      -1,   474,   475,   476,   477,    -1,   479,   480,   481,   482,
     483,   484,   485,   486,   487,   488,   489,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   501,   502,
     503,   504,    -1,     3,    -1,   508,   509,   510,     8,   512,
     513,   514,   515,   516,   517,    15,    -1,    -1,    18,    19,
      20,    21,    22,    23,    24,    -1,    26,    27,    28,    29,
      -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    42,    43,    -1,    45,    46,    47,    -1,    49,
      50,    51,    52,    53,    -1,    55,    56,    -1,    58,    59,
      60,    61,    62,    63,    -1,    -1,    66,    67,    68,    69,
      70,    -1,    72,    73,    74,    75,    76,    -1,    -1,    -1,
      80,    81,    82,    83,    84,    85,    -1,    87,    88,    89,
      -1,    91,    92,    93,    94,    95,    -1,    -1,    -1,    99,
     100,   101,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,    -1,
     120,    -1,   122,   123,   124,   125,   126,   127,    -1,   129,
      -1,   131,   132,   133,   134,    -1,    -1,   137,   138,   139,
     140,   141,    -1,    -1,    -1,   145,   146,   147,    -1,   149,
     150,   151,    -1,   153,   154,   155,   156,   157,   158,   159,
     160,   161,   162,   163,    -1,   165,    -1,   167,   168,   169,
     170,    -1,   172,    -1,   174,    -1,    -1,    -1,   178,   179,
     180,    -1,   182,    -1,   184,    -1,    -1,    -1,   188,   189,
      -1,   191,    -1,   193,   194,   195,   196,   197,   198,   199,
      -1,   201,   202,   203,   204,    -1,   206,   207,   208,   209,
     210,   211,    -1,   213,    -1,   215,   216,   217,   218,   219,
     220,   221,   222,    -1,   224,    -1,   226,    -1,    -1,   229,
      -1,   231,    -1,   233,   234,   235,   236,   237,    -1,    -1,
     240,    -1,   242,    -1,    -1,   245,   246,   247,    -1,    -1,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,    -1,   276,   277,   278,   279,
      -1,   281,    -1,   283,   284,    -1,   286,    -1,   288,   289,
     290,   291,   292,   293,    -1,   295,   296,    -1,    -1,   299,
     300,   301,    -1,    -1,   304,   305,    -1,   307,    -1,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,    -1,
      -1,   321,    -1,   323,   324,   325,    -1,   327,   328,   329,
     330,   331,   332,    -1,   334,   335,   336,   337,   338,    -1,
      -1,   341,    -1,   343,   344,   345,   346,   347,   348,   349,
     350,    -1,   352,   353,   354,    -1,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,    -1,   367,   368,    -1,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,    -1,   386,   387,   388,   389,
     390,    -1,   392,   393,   394,   395,    -1,   397,    -1,    -1,
     400,   401,   402,    -1,    -1,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,   417,   418,   419,
     420,    -1,   422,   423,    -1,   425,    -1,   427,   428,   429,
     430,   431,    -1,   433,   434,    -1,    -1,    -1,   438,   439,
     440,   441,   442,    -1,   444,   445,   446,   447,   448,   449,
     450,   451,    -1,    -1,   454,   455,   456,   457,   458,   459,
      -1,    -1,   462,   463,   464,   465,   466,   467,   468,    -1,
     470,    -1,   472,    -1,   474,   475,   476,   477,    -1,    -1,
      -1,   481,    -1,    -1,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,   498,   499,
     500,   501,   502,   503,   504,    -1,    -1,    -1,   508,   509,
     510,    -1,   512,   513,   514,   515,   516,   517,     8,    -1,
      -1,    11,    -1,    -1,    -1,    15,    16,    17,    18,    19,
      20,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    36,    -1,    -1,     8,
      -1,    -1,    11,    -1,    -1,    45,    15,    16,    17,    18,
      19,    20,    52,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    36,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    45,    77,    -1,    -1,
      -1,    -1,    -1,    52,     8,    -1,    -1,    11,    -1,    -1,
      -1,    15,    16,    17,    18,    19,    20,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    77,    -1,
      -1,    -1,    36,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    45,    -1,    -1,    -1,    -1,    -1,    -1,    52,    -1,
      -1,    -1,    -1,    -1,     8,    -1,    -1,    11,    -1,    -1,
      -1,    15,    16,    17,    18,    19,    20,    -1,    -1,    -1,
      -1,    -1,    -1,    77,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    36,    -1,    -1,     8,    -1,    -1,    11,    -1,
      -1,    45,    15,    16,    17,    18,    19,    20,    52,    -1,
      -1,   181,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    36,    -1,    -1,    -1,    -1,    -1,    -1,
     200,    -1,    45,    77,    -1,   205,    -1,    -1,    -1,    52,
      -1,    -1,   181,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   227,   228,    -1,
      -1,   200,    -1,    -1,    77,    -1,   205,    -1,    -1,    -1,
      -1,    -1,    -1,   243,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   181,   227,   228,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   243,    -1,   200,    -1,    -1,    -1,
      -1,   205,   282,    -1,    -1,   285,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   299,
      -1,    -1,   302,   227,   228,    -1,    -1,   181,    -1,    -1,
      -1,    -1,    -1,   282,    -1,    -1,   285,    -1,    -1,   243,
      -1,    -1,    -1,    -1,    -1,    -1,   200,    -1,    -1,    -1,
     299,   205,    -1,   302,    -1,    -1,    -1,    -1,   181,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   227,   228,    -1,    -1,   200,   282,    -1,
      -1,   285,   205,    -1,    -1,    -1,    -1,    -1,    -1,   243,
      -1,    -1,    -1,    -1,    -1,   299,    -1,    -1,   302,    -1,
      -1,    -1,    -1,    -1,   227,   228,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   398,    -1,
     243,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   282,     8,
      -1,   285,    11,    -1,    -1,    -1,    15,    16,    17,    18,
      19,    20,    -1,    -1,    -1,   299,    -1,    -1,   302,   398,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    36,    -1,   282,
      -1,    -1,   285,    -1,    -1,    -1,    45,    -1,    -1,    -1,
      -1,    -1,    -1,    52,    -1,    -1,   299,     8,    -1,   302,
      11,    -1,    -1,    -1,    15,    16,    17,    18,    19,    20,
      -1,    -1,    -1,    -1,   398,    -1,    -1,    -1,    77,    -1,
      -1,    -1,    -1,    -1,    -1,    36,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    45,    -1,    -1,    -1,    -1,    -1,
      -1,    52,    -1,    -1,    -1,   505,    -1,    -1,   508,   509,
     510,    -1,   512,   513,   514,   515,   516,   517,    -1,    -1,
      -1,    -1,   522,    -1,   398,    -1,    77,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   505,    -1,    -1,   508,
     509,   510,    -1,   512,   513,   514,   515,   516,   517,    -1,
      -1,    -1,    -1,   522,    -1,   398,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   505,   181,    -1,   508,   509,   510,    -1,   512,   513,
     514,   515,   516,   517,    -1,    -1,    -1,    -1,   522,    -1,
      -1,   200,    -1,    -1,    -1,    -1,   205,    -1,    -1,     8,
      -1,    -1,    11,    -1,    -1,    -1,    15,    16,    17,    18,
      19,    20,    -1,    -1,    -1,    23,    -1,    -1,   227,   228,
     181,   505,    -1,    -1,   508,   509,   510,    36,   512,   513,
     514,   515,   516,   517,   243,    -1,    45,    -1,   522,   200,
      -1,    -1,    -1,    52,   205,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   505,    -1,    -1,   508,   509,   510,    -1,   512,
     513,   514,   515,   516,   517,    -1,   227,   228,    77,   522,
      78,    -1,    -1,   282,    -1,    -1,   285,    -1,    -1,    -1,
      -1,    -1,   243,    -1,    -1,    -1,    94,    -1,    -1,    -1,
     299,     8,    -1,   302,    11,    -1,    -1,    -1,    15,    16,
      17,    18,    19,    20,   112,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    36,
      -1,   282,    -1,    -1,   285,    -1,    -1,    -1,    45,    -1,
      -1,    -1,    -1,    -1,    -1,    52,    -1,    -1,   299,    -1,
      -1,   302,    -1,   151,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   161,    -1,    -1,    -1,    -1,    -1,    -1,
      77,    -1,    -1,    -1,    -1,   173,    -1,    -1,    -1,    -1,
     178,    -1,   181,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   398,
      -1,   200,    -1,    -1,    -1,    -1,   205,    -1,    -1,    -1,
     208,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   227,   228,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   243,    -1,    -1,   398,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   254,    -1,    -1,    -1,
     258,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   181,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   282,    -1,    -1,   285,    -1,    -1,    -1,
      -1,    -1,    -1,   200,    -1,    -1,    -1,    -1,   205,    -1,
     299,    -1,    -1,   302,    -1,    -1,   505,    -1,    -1,   508,
     509,   510,    -1,   512,   513,   514,   515,   516,   517,    -1,
     227,   228,    -1,   522,    -1,    -1,   324,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   243,    -1,    -1,    -1,
      -1,    -1,    -1,   341,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   505,    -1,    -1,   508,   509,   510,
      -1,   512,   513,   514,   515,   516,   517,    -1,    -1,   520,
      -1,    -1,    -1,    -1,    -1,   282,    -1,   375,   285,    -1,
     378,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   386,    -1,
      -1,   389,   299,    -1,    -1,   302,    -1,    -1,    -1,   398,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   410,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   424,    -1,    -1,    -1,
      -1,    -1,    -1,   431,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   441,    -1,    -1,    -1,    -1,    -1,   447,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   474,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   398,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   505,    -1,    -1,   508,
     509,   510,    -1,   512,   513,   514,   515,   516,   517,    -1,
      -1,   520,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,     3,    -1,   505,    -1,
      -1,   508,   509,   510,    -1,   512,   513,   514,   515,   516,
     517,    -1,    -1,   520,    21,    22,    23,    24,    -1,    26,
      27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    -1,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
      67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
      77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    93,    94,    95,    -1,
      97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,   118,   119,   120,   121,   122,   123,   124,   125,   126,
     127,   128,   129,    -1,   131,   132,   133,   134,   135,   136,
     137,   138,   139,   140,   141,    -1,    -1,   144,   145,   146,
     147,   148,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,   160,   161,   162,   163,   164,   165,   166,
     167,   168,   169,   170,   171,   172,   173,   174,   175,   176,
     177,   178,   179,   180,   181,   182,   183,   184,    -1,   186,
     187,   188,   189,    -1,   191,   192,   193,   194,   195,   196,
     197,   198,   199,   200,   201,   202,   203,   204,   205,   206,
     207,   208,   209,   210,   211,   212,   213,   214,   215,   216,
     217,   218,   219,   220,   221,   222,   223,   224,   225,   226,
     227,   228,   229,   230,   231,    -1,   233,   234,   235,   236,
     237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,    -1,   281,   282,   283,   284,   285,   286,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,    -1,    -1,   321,   322,   323,   324,   325,   326,
     327,   328,   329,   330,   331,   332,   333,   334,   335,   336,
     337,   338,    -1,    -1,   341,   342,   343,   344,   345,   346,
     347,   348,   349,   350,   351,   352,   353,   354,    -1,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,    -1,
     397,   398,    -1,   400,   401,   402,   403,    -1,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
     427,   428,   429,   430,   431,   432,   433,   434,   435,    -1,
     437,   438,   439,   440,   441,   442,   443,   444,   445,   446,
     447,   448,   449,   450,   451,   452,   453,   454,   455,   456,
     457,   458,   459,   460,   461,   462,   463,   464,   465,   466,
     467,   468,   469,   470,   471,   472,    -1,   474,   475,   476,
     477,    -1,   479,   480,   481,   482,   483,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,   498,   499,   500,   501,   502,   503,   504,     3,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   514,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    21,    22,    23,    24,
      -1,    26,    27,    28,    29,    -1,    31,    32,    33,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    42,    43,    -1,
      45,    46,    47,    -1,    49,    50,    51,    52,    53,    -1,
      55,    56,    -1,    58,    59,    60,    61,    62,    63,    -1,
      -1,    66,    67,    68,    69,    70,    -1,    72,    73,    74,
      75,    76,    -1,    -1,    -1,    80,    81,    82,    83,    84,
      85,    -1,    87,    88,    89,    -1,    91,    92,    93,    94,
      95,    -1,    -1,    -1,    99,   100,   101,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,    -1,   120,    -1,   122,   123,   124,
     125,   126,   127,    -1,   129,    -1,   131,   132,   133,   134,
      -1,    -1,   137,   138,   139,   140,   141,    -1,    -1,    -1,
     145,   146,   147,    -1,   149,   150,   151,    -1,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,   163,    -1,
     165,    -1,   167,   168,   169,   170,    -1,   172,    -1,   174,
      -1,    -1,    -1,   178,   179,   180,    -1,   182,    -1,   184,
      -1,    -1,    -1,   188,   189,    -1,   191,    -1,   193,   194,
     195,   196,   197,   198,   199,    -1,   201,   202,   203,   204,
      -1,   206,   207,   208,   209,   210,   211,    -1,   213,    -1,
     215,   216,   217,   218,   219,   220,   221,   222,    -1,   224,
      -1,   226,    -1,    -1,   229,    -1,   231,    -1,   233,   234,
     235,   236,   237,    -1,    -1,   240,    -1,   242,    -1,    -1,
     245,   246,   247,    -1,    -1,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
      -1,   276,   277,   278,   279,    -1,   281,    -1,   283,   284,
      -1,   286,    -1,   288,   289,   290,   291,   292,   293,    -1,
     295,   296,    -1,    -1,   299,   300,   301,    -1,    -1,   304,
     305,    -1,   307,    -1,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,    -1,    -1,   321,    -1,   323,   324,
     325,    -1,   327,   328,   329,   330,   331,   332,    -1,   334,
     335,   336,   337,   338,    -1,    -1,   341,    -1,   343,   344,
     345,   346,   347,   348,   349,   350,    -1,   352,   353,   354,
      -1,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,    -1,   367,   368,    -1,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
      -1,   386,   387,   388,   389,   390,    -1,   392,   393,   394,
     395,    -1,   397,    -1,    -1,   400,   401,   402,    -1,    -1,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,    -1,   422,   423,    -1,
     425,    -1,   427,   428,   429,   430,   431,    -1,   433,   434,
      -1,    -1,    -1,   438,   439,   440,   441,   442,    -1,   444,
     445,   446,   447,   448,   449,   450,   451,    -1,    -1,   454,
     455,   456,   457,   458,   459,    -1,    -1,   462,   463,   464,
     465,   466,   467,   468,    -1,   470,    -1,   472,    -1,   474,
     475,   476,   477,    -1,    -1,    -1,   481,    -1,    -1,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   514,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    21,    22,
      23,    24,    -1,    26,    27,    28,    29,    -1,    31,    32,
      33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    42,
      43,    -1,    45,    46,    47,    -1,    49,    50,    51,    52,
      53,    -1,    55,    56,    -1,    58,    59,    60,    61,    62,
      63,    -1,    -1,    66,    67,    68,    69,    70,    -1,    72,
      73,    74,    75,    76,    -1,    -1,    -1,    80,    81,    82,
      83,    84,    85,    -1,    87,    88,    89,    -1,    91,    92,
      93,    94,    95,    -1,    -1,    -1,    99,   100,   101,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   109,   110,   111,   112,
     113,   114,   115,   116,   117,   118,    -1,   120,    -1,   122,
     123,   124,   125,   126,   127,    -1,   129,    -1,   131,   132,
     133,   134,    -1,    -1,   137,   138,   139,   140,   141,    -1,
      -1,    -1,   145,   146,   147,    -1,   149,   150,   151,    -1,
     153,   154,   155,   156,   157,   158,   159,   160,   161,   162,
     163,    -1,   165,    -1,   167,   168,   169,   170,    -1,   172,
      -1,   174,    -1,    -1,    -1,   178,   179,   180,    -1,   182,
      -1,   184,    -1,    -1,    -1,   188,   189,    -1,   191,    -1,
     193,   194,   195,   196,   197,   198,   199,    -1,   201,   202,
     203,   204,    -1,   206,   207,   208,   209,   210,   211,    -1,
     213,    -1,   215,   216,   217,   218,   219,   220,   221,   222,
      -1,   224,    -1,   226,    -1,    -1,   229,    -1,   231,    -1,
     233,   234,   235,   236,   237,    -1,    -1,   240,    -1,   242,
      -1,    -1,   245,   246,   247,    -1,    -1,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,    -1,   276,   277,   278,   279,    -1,   281,    -1,
     283,   284,    -1,   286,    -1,   288,   289,   290,   291,   292,
     293,    -1,   295,   296,    -1,    -1,   299,   300,   301,    -1,
      -1,   304,   305,    -1,   307,    -1,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,    -1,    -1,   321,    -1,
     323,   324,   325,    -1,   327,   328,   329,   330,   331,   332,
      -1,   334,   335,   336,   337,   338,    -1,    -1,   341,    -1,
     343,   344,   345,   346,   347,   348,   349,   350,    -1,   352,
     353,   354,    -1,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,    -1,   367,   368,    -1,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,    -1,   386,   387,   388,   389,   390,    -1,   392,
     393,   394,   395,    -1,   397,    -1,    -1,   400,   401,   402,
      -1,    -1,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,   417,   418,   419,   420,    -1,   422,
     423,    -1,   425,    -1,   427,   428,   429,   430,   431,    -1,
     433,   434,    -1,    -1,    -1,   438,   439,   440,   441,   442,
      -1,   444,   445,   446,   447,   448,   449,   450,   451,    -1,
      -1,   454,   455,   456,   457,   458,   459,    -1,    -1,   462,
     463,   464,   465,   466,   467,   468,    -1,   470,    -1,   472,
      -1,   474,   475,   476,   477,    -1,    -1,    -1,   481,    -1,
      -1,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   500,   501,   502,
     503,   504,     3,     4,     5,    -1,    -1,    -1,     9,    -1,
      -1,   514,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      21,    22,    23,    24,    -1,    26,    27,    28,    29,    -1,
      31,    32,    33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    42,    43,    -1,    45,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    -1,    58,    59,    60,
      61,    62,    63,    -1,    -1,    66,    67,    68,    69,    70,
      -1,    72,    73,    74,    75,    76,    -1,    78,    -1,    80,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    -1,
      91,    92,    93,    94,    95,    -1,    -1,    98,    99,   100,
     101,   102,   103,   104,   105,    -1,    -1,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
      -1,   122,   123,   124,   125,   126,   127,    -1,   129,    -1,
     131,   132,   133,   134,    -1,    -1,   137,   138,   139,   140,
     141,    -1,    -1,    -1,   145,   146,   147,    -1,   149,   150,
     151,    -1,   153,   154,   155,   156,   157,   158,   159,   160,
     161,   162,   163,   164,   165,    -1,   167,   168,   169,   170,
      -1,   172,    -1,   174,   175,    -1,   177,   178,   179,   180,
     181,   182,    -1,   184,    -1,    -1,    -1,   188,   189,    -1,
     191,    -1,   193,   194,   195,   196,   197,   198,   199,   200,
     201,   202,   203,   204,    -1,   206,   207,   208,   209,   210,
     211,    -1,   213,   214,   215,   216,   217,   218,   219,   220,
     221,   222,    -1,   224,    -1,   226,   227,   228,   229,   230,
     231,    -1,   233,   234,   235,   236,   237,    -1,    -1,   240,
     241,   242,   243,    -1,   245,   246,   247,    -1,    -1,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,    -1,
     281,    -1,   283,   284,   285,   286,    -1,   288,   289,   290,
     291,   292,   293,    -1,   295,   296,   297,    -1,   299,   300,
     301,    -1,    -1,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,    -1,    -1,
     321,    -1,   323,   324,   325,   326,   327,   328,   329,   330,
     331,   332,    -1,   334,   335,   336,   337,   338,    -1,    -1,
     341,    -1,   343,   344,   345,   346,   347,   348,   349,   350,
      -1,   352,   353,   354,    -1,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,    -1,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,    -1,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,    -1,   397,   398,    -1,   400,
     401,   402,    -1,    -1,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,   417,   418,   419,   420,
      -1,   422,   423,    -1,   425,   426,   427,   428,   429,   430,
     431,    -1,   433,   434,    -1,    -1,    -1,   438,   439,   440,
     441,   442,   443,   444,   445,   446,   447,   448,   449,   450,
     451,    -1,    -1,   454,   455,   456,   457,   458,   459,   460,
      -1,   462,   463,   464,   465,   466,   467,   468,    -1,   470,
     471,   472,    -1,   474,   475,   476,   477,    -1,    -1,    -1,
     481,    -1,    -1,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,   499,   500,
     501,   502,   503,   504,     3,     4,     5,    -1,    -1,    -1,
       9,   512,   513,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    21,    22,    23,    24,    -1,    26,    27,    28,
      29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    42,    43,    -1,    45,    46,    47,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    -1,    58,
      59,    60,    61,    62,    63,    -1,    -1,    66,    67,    68,
      69,    70,    -1,    72,    73,    74,    75,    76,    -1,    78,
      -1,    80,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    -1,    91,    92,    93,    94,    95,    -1,    -1,    98,
      99,   100,   101,   102,   103,   104,   105,    -1,    -1,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
     119,   120,    -1,   122,   123,   124,   125,   126,   127,    -1,
     129,    -1,   131,   132,   133,   134,    -1,    -1,   137,   138,
     139,   140,   141,    -1,    -1,    -1,   145,   146,   147,    -1,
     149,   150,   151,    -1,   153,   154,   155,   156,   157,   158,
     159,   160,   161,   162,   163,   164,   165,    -1,   167,   168,
     169,   170,    -1,   172,    -1,   174,   175,    -1,   177,   178,
     179,   180,   181,   182,    -1,   184,    -1,    -1,    -1,   188,
     189,    -1,   191,    -1,   193,   194,   195,   196,   197,   198,
     199,   200,   201,   202,   203,   204,    -1,   206,   207,   208,
     209,   210,   211,    -1,   213,   214,   215,   216,   217,   218,
     219,   220,   221,   222,    -1,   224,    -1,   226,   227,   228,
     229,   230,   231,    -1,   233,   234,   235,   236,   237,    -1,
      -1,   240,   241,   242,   243,    -1,   245,   246,   247,    -1,
      -1,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,    -1,   281,    -1,   283,   284,   285,   286,    -1,   288,
     289,   290,   291,   292,   293,    -1,   295,   296,   297,    -1,
     299,   300,   301,    -1,    -1,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
      -1,    -1,   321,    -1,   323,   324,   325,   326,   327,   328,
     329,   330,   331,   332,    -1,   334,   335,   336,   337,   338,
      -1,    -1,   341,    -1,   343,   344,   345,   346,   347,   348,
     349,   350,    -1,   352,   353,   354,    -1,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,    -1,   367,   368,
     369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,    -1,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,    -1,   397,   398,
      -1,   400,   401,   402,    -1,    -1,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,   417,   418,
     419,   420,    -1,   422,   423,    -1,   425,   426,   427,   428,
     429,   430,   431,    -1,   433,   434,    -1,    -1,    -1,   438,
     439,   440,   441,   442,   443,   444,   445,   446,   447,   448,
     449,   450,   451,    -1,    -1,   454,   455,   456,   457,   458,
     459,   460,    -1,   462,   463,   464,   465,   466,   467,   468,
      -1,   470,   471,   472,    -1,   474,   475,   476,   477,    -1,
      -1,    -1,   481,    -1,    -1,   484,   485,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
     499,   500,   501,   502,   503,   504,     3,     4,     5,    -1,
      -1,    -1,     9,   512,   513,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    21,    22,    23,    24,    -1,    26,
      27,    28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    42,    43,    -1,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      -1,    58,    59,    60,    61,    62,    63,    -1,    -1,    66,
      67,    68,    69,    70,    -1,    72,    73,    74,    75,    76,
      -1,    78,    -1,    80,    81,    82,    83,    84,    85,    86,
      87,    88,    89,    -1,    91,    92,    93,    94,    95,    -1,
      -1,    98,    99,   100,   101,   102,   103,   104,   105,    -1,
      -1,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,   118,    -1,   120,    -1,   122,   123,   124,   125,   126,
     127,    -1,   129,    -1,   131,   132,   133,   134,    -1,    -1,
     137,   138,   139,   140,   141,    -1,    -1,    -1,   145,   146,
     147,    -1,   149,   150,   151,    -1,   153,   154,   155,   156,
     157,   158,   159,   160,   161,   162,   163,   164,   165,    -1,
     167,   168,   169,   170,    -1,   172,    -1,   174,   175,    -1,
     177,   178,   179,   180,   181,   182,    -1,   184,    -1,    -1,
      -1,   188,   189,    -1,   191,    -1,   193,   194,   195,   196,
     197,   198,   199,   200,   201,   202,   203,   204,    -1,   206,
     207,   208,   209,   210,   211,    -1,   213,   214,   215,   216,
     217,   218,   219,   220,   221,   222,    -1,   224,    -1,   226,
     227,   228,   229,   230,   231,    -1,   233,   234,   235,   236,
     237,    -1,    -1,   240,   241,   242,   243,    -1,   245,   246,
     247,    -1,    -1,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,    -1,   281,    -1,   283,   284,   285,   286,
      -1,   288,   289,   290,   291,   292,   293,    -1,   295,   296,
     297,    -1,   299,   300,   301,    -1,    -1,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,    -1,    -1,   321,    -1,   323,   324,   325,   326,
     327,   328,   329,   330,   331,   332,    -1,   334,   335,   336,
     337,   338,    -1,    -1,   341,    -1,   343,   344,   345,   346,
     347,   348,   349,   350,    -1,   352,   353,   354,    -1,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,    -1,
     367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,    -1,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,    -1,
     397,   398,    -1,   400,   401,   402,    -1,    -1,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
     417,   418,   419,   420,    -1,   422,   423,    -1,   425,   426,
     427,   428,   429,   430,   431,    -1,   433,   434,    -1,    -1,
      -1,   438,   439,   440,   441,   442,   443,   444,   445,   446,
     447,   448,   449,   450,   451,    -1,    -1,   454,   455,   456,
     457,   458,   459,   460,    -1,   462,   463,   464,   465,   466,
     467,   468,    -1,   470,   471,   472,    -1,   474,   475,   476,
     477,    -1,    -1,    -1,   481,    -1,    -1,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,   498,   499,   500,   501,   502,   503,   504,    -1,    -1,
       8,    -1,    -1,    11,    -1,   512,   513,    15,    16,    17,
      18,    19,    20,     8,    -1,    -1,    11,    -1,    -1,    -1,
      15,    16,    17,    18,    19,    20,    -1,    -1,    36,    -1,
      -1,    -1,    -1,    41,    -1,    -1,    -1,    45,    -1,    -1,
      -1,    36,    -1,    -1,    52,    -1,    -1,    -1,    -1,    -1,
      45,    -1,    -1,     8,    -1,    -1,    11,    52,    -1,    -1,
      15,    16,    17,    18,    19,    20,    -1,    -1,    -1,    77,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    36,    77,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      45,    -1,    -1,    -1,    -1,    -1,    -1,    52,    -1,    -1,
      -1,    -1,    -1,     8,    -1,    -1,    11,    -1,    -1,    -1,
      15,    16,    17,    18,    19,    20,    -1,    -1,    -1,    -1,
     128,    -1,    77,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    36,    -1,    -1,    -1,    40,    -1,    -1,    -1,    -1,
      45,    -1,    -1,     8,    -1,    -1,    11,    52,    -1,    -1,
      15,    16,    17,    18,    19,    20,     8,    -1,    -1,    11,
      -1,    -1,    -1,    15,    16,    17,    18,    19,    20,    -1,
      -1,    36,    77,   181,    -1,    -1,   171,    -1,    -1,    -1,
      45,   176,    -1,    -1,    36,    -1,   181,    52,    40,    -1,
      -1,    -1,   200,    45,    -1,    -1,    -1,   205,    -1,    -1,
      52,    -1,    -1,    -1,    -1,   200,    -1,    -1,    -1,    -1,
     205,    -1,    77,    -1,    -1,   170,    -1,    -1,    -1,   227,
     228,    -1,    -1,    -1,    -1,    77,   181,    -1,    -1,    -1,
      -1,    -1,   227,   228,    -1,   243,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   200,    -1,    -1,   243,    -1,
     205,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   227,   228,   282,    -1,   181,   285,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   282,   243,    -1,
     285,   299,    -1,    -1,   302,   200,    -1,    -1,    -1,    -1,
     205,    -1,    -1,    -1,   299,    -1,    -1,   302,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   181,    -1,    -1,    -1,
      -1,    -1,   227,   228,    -1,    -1,    -1,   282,    -1,   181,
     285,    -1,    -1,    -1,    -1,   200,    -1,    -1,   243,    -1,
     205,    -1,    -1,    -1,   299,    -1,    -1,   302,   200,    -1,
      -1,    -1,    -1,   205,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   227,   228,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   328,    -1,   227,   228,   282,   243,    -1,
     285,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     398,   243,    -1,    -1,   299,    -1,    -1,   302,     8,    -1,
      -1,    11,    -1,   398,    -1,    15,    16,    17,    18,    19,
      20,    -1,    -1,    -1,    -1,    -1,    -1,   282,    -1,    -1,
     285,    -1,    -1,    -1,    -1,    -1,    36,    -1,    -1,    -1,
     282,    -1,    -1,   285,   299,    45,    -1,   302,    -1,    -1,
      -1,    -1,    52,   398,    -1,    -1,    -1,   299,    -1,    -1,
     302,    -1,    -1,   461,    -1,    -1,    -1,   322,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    77,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   398,    -1,    -1,    -1,   505,    -1,    -1,
     508,   509,   510,    -1,   512,   513,   514,   515,   516,   517,
     505,    -1,    -1,   508,   509,   510,    -1,   512,   513,   514,
     515,   516,   517,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   398,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   398,    -1,    -1,    -1,
     505,    -1,    -1,   508,   509,   510,    -1,   512,   513,   514,
     515,   516,   517,    -1,    -1,    -1,   176,    -1,    -1,    -1,
      -1,   181,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     200,    -1,    -1,    -1,    -1,   205,    -1,    -1,    -1,    -1,
     505,    -1,    -1,   508,   509,   510,    -1,   512,   513,   514,
     515,   516,   517,    -1,    -1,    -1,    -1,   227,   228,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   243,    -1,    -1,    -1,    -1,    -1,    -1,
     505,    -1,    -1,   508,   509,   510,    -1,   512,   513,   514,
     515,   516,   517,   505,    -1,    -1,   508,   509,   510,    -1,
     512,   513,   514,   515,   516,   517,    -1,    -1,    -1,    -1,
      -1,    -1,   282,     8,    -1,   285,    11,    -1,    -1,    -1,
      15,    16,    17,    18,    19,    20,    -1,    -1,    -1,   299,
      -1,    -1,   302,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    36,    -1,    -1,     8,    40,    -1,    11,    -1,    -1,
      45,    15,    16,    17,    18,    19,    20,    52,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    36,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    45,    77,    -1,    -1,    -1,    -1,    -1,    52,    -1,
      -1,    -1,     8,    -1,    -1,    11,    -1,    -1,    -1,    15,
      16,    17,    18,    19,    20,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    77,    -1,    -1,    -1,    -1,    -1,    -1,
      36,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   398,    45,
      -1,    -1,    -1,    -1,    -1,    -1,    52,     8,    -1,    -1,
      11,    -1,    -1,    -1,    15,    16,    17,    18,    19,    20,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    77,    -1,    -1,    -1,    36,    -1,    -1,    -1,    40,
      -1,    -1,    -1,    -1,    45,    -1,    -1,    -1,    -1,    -1,
      -1,    52,    -1,    -1,    -1,     8,   181,    -1,    11,    -1,
      -1,    -1,    15,    16,    17,    18,    19,    20,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   200,    77,   171,    -1,    -1,
     205,    -1,    -1,    36,    -1,    -1,    -1,   181,    -1,    -1,
      -1,    -1,    45,    -1,    -1,    -1,    -1,    -1,    -1,    52,
      -1,    -1,   227,   228,    -1,   505,   200,    -1,   508,   509,
     510,   205,   512,   513,   514,   515,   516,   517,   243,    -1,
      -1,    -1,    -1,    -1,    77,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   227,   228,   181,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   243,
      -1,    -1,    -1,    -1,   200,    -1,    -1,   282,    -1,   205,
     285,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   299,    -1,    -1,   302,    -1,    -1,
     181,   227,   228,    -1,    -1,    -1,    -1,    -1,   282,    -1,
      -1,   285,    -1,    -1,    -1,    -1,    -1,   243,    -1,   200,
      -1,    -1,    -1,    -1,   205,   299,    -1,    -1,   302,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   227,   228,   181,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   282,    -1,    -1,   285,
      -1,    -1,   243,    -1,    -1,    -1,    -1,   200,    -1,    -1,
      -1,    -1,   205,   299,    -1,     8,   302,    -1,    11,    -1,
      -1,    -1,    15,    16,    17,    18,    19,    20,    -1,    -1,
      -1,    -1,    -1,   398,   227,   228,    -1,    -1,    -1,    -1,
      -1,   282,    -1,    36,   285,    -1,    -1,    -1,    -1,    -1,
     243,    -1,    45,    -1,    -1,    -1,    -1,    -1,   299,    52,
       8,   302,    -1,    11,   398,    -1,    -1,    15,    16,    17,
      18,    19,    20,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    77,    -1,    -1,    -1,    36,   282,
      -1,    -1,   285,    -1,    -1,    -1,    -1,    45,    -1,    -1,
      -1,    -1,    -1,    -1,    52,    -1,   299,    -1,    -1,   302,
      -1,    -1,   398,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    77,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     505,    -1,    -1,   508,   509,   510,   432,   512,   513,   514,
     515,   516,   517,    -1,    -1,    -1,    -1,   398,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   505,    -1,    -1,   508,   509,   510,    -1,   512,   513,
     514,   515,   516,   517,    -1,    -1,    -1,    -1,   181,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   398,    -1,   200,    -1,    -1,
      -1,    -1,   205,    -1,    -1,    -1,    -1,    -1,    -1,   505,
      -1,    -1,   508,   509,   510,    -1,   512,   513,   514,   515,
     516,   517,    -1,   181,   227,   228,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     243,    -1,   200,    -1,    -1,    -1,    -1,   205,    -1,    -1,
      -1,    -1,    -1,    -1,   505,    -1,    -1,   508,   509,   510,
      -1,   512,   513,   514,   515,   516,   517,    -1,    -1,   227,
     228,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   282,
      -1,    -1,   285,    -1,    -1,   243,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   299,    -1,    -1,   302,
      -1,    -1,   505,    -1,    -1,   508,   509,   510,    -1,   512,
     513,   514,   515,   516,   517,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   282,     8,    -1,   285,    11,    -1,
      -1,    -1,    15,    -1,    -1,    18,    19,    20,    -1,    -1,
      -1,   299,    -1,    -1,   302,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    36,    -1,    -1,     8,    -1,    -1,    11,
      -1,    -1,    45,    15,    -1,    -1,    18,    19,    20,    52,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    36,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    45,    77,   398,    -1,    -1,    -1,    -1,
      52,     8,    -1,    -1,    11,    -1,    -1,    -1,    15,    -1,
      -1,    18,    19,    20,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,     8,    -1,    -1,    11,    77,    -1,    -1,    15,    36,
      -1,    18,    19,    20,    -1,    -1,    -1,    -1,    45,    -1,
     398,    -1,    -1,    -1,    -1,    52,    -1,    -1,    -1,    36,
      -1,    -1,     8,    -1,    -1,    11,    -1,    -1,    45,    15,
      -1,    -1,    18,    19,    20,    52,    -1,    -1,    -1,    -1,
      77,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    45,
      77,    -1,    -1,    -1,    -1,    -1,    52,    -1,   181,    -1,
      -1,    -1,   505,    -1,    -1,   508,   509,   510,    -1,   512,
     513,   514,   515,   516,   517,    -1,    -1,   200,    -1,    -1,
      -1,    77,   205,    -1,    -1,    -1,    -1,    -1,    -1,   181,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   227,   228,    -1,   505,   200,    -1,
     508,   509,   510,   205,   512,   513,   514,   515,   516,   517,
     243,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   181,   227,   228,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   243,    -1,   200,   181,    -1,    -1,    -1,   205,   282,
      -1,    -1,   285,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   200,    -1,    -1,   299,    -1,   205,   302,
     227,   228,    -1,    -1,    -1,   181,    -1,    -1,    -1,    -1,
     282,    -1,    -1,   285,    -1,    -1,   243,    -1,    -1,    -1,
     227,   228,    -1,    -1,   200,    -1,    -1,   299,    -1,   205,
     302,    -1,    -1,    -1,    -1,    -1,   243,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   227,   228,    -1,    -1,   282,    -1,    -1,   285,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   243,    -1,    -1,
      -1,    -1,   299,    -1,    -1,   282,     8,    -1,   285,    11,
      -1,    -1,    -1,    15,    -1,    -1,    18,    19,    20,    -1,
      -1,    -1,   299,    -1,    -1,   398,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   282,     8,    -1,   285,
      11,    -1,    -1,    45,    15,    -1,    -1,    18,    19,    20,
      52,    -1,    -1,   299,    -1,    -1,   398,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    45,    77,    -1,    -1,    -1,    -1,
      -1,    52,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   398,    -1,    -1,    -1,    -1,    77,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   398,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   505,    -1,    -1,   508,   509,   510,    -1,   512,
     513,   514,   515,   516,   517,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   398,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   505,    -1,    -1,   508,   509,   510,    -1,
     512,   513,   514,   515,   516,   517,    -1,    -1,    -1,   181,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   200,    -1,
      -1,    -1,    -1,   205,    -1,    -1,    -1,    -1,   505,    -1,
     181,   508,   509,   510,    -1,   512,   513,   514,   515,   516,
     517,    -1,    -1,    -1,    -1,   227,   228,    -1,   505,   200,
      -1,   508,   509,   510,   205,   512,   513,   514,   515,   516,
     517,   243,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   227,   228,    -1,   505,
      -1,    -1,   508,   509,   510,    -1,   512,   513,   514,   515,
     516,   517,   243,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     282,    -1,    -1,   285,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   299,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   285,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   299,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   398,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   398,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   505,    -1,    -1,   508,   509,   510,    -1,
     512,   513,   514,   515,   516,   517,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     3,
      -1,     5,    -1,    -1,   505,    -1,    -1,   508,   509,   510,
      -1,   512,   513,   514,   515,   516,   517,    21,    22,    23,
      24,    -1,    26,    27,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    -1,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
      74,    75,    76,    77,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    95,    -1,    97,    98,    99,   100,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
     124,   125,   126,   127,   128,   129,    -1,   131,   132,   133,
     134,   135,   136,   137,   138,   139,   140,   141,    -1,    -1,
     144,   145,   146,   147,   148,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,   159,   160,   161,   162,   163,
     164,   165,   166,   167,   168,   169,   170,   171,   172,   173,
     174,   175,   176,   177,   178,   179,   180,   181,   182,   183,
     184,    -1,   186,   187,   188,   189,    -1,   191,   192,   193,
     194,   195,   196,   197,   198,   199,   200,   201,   202,   203,
     204,   205,   206,   207,   208,   209,   210,   211,   212,   213,
     214,   215,   216,   217,   218,   219,   220,   221,   222,   223,
     224,   225,   226,   227,   228,   229,   230,   231,    -1,   233,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,    -1,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,    -1,    -1,   321,   322,   323,
     324,   325,   326,   327,   328,   329,   330,   331,   332,   333,
     334,   335,   336,   337,   338,    -1,    -1,   341,   342,   343,
     344,   345,   346,   347,   348,   349,   350,   351,   352,   353,
     354,    -1,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,    -1,   397,   398,    -1,   400,   401,   402,   403,
      -1,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,   428,   429,   430,   431,   432,   433,
     434,   435,    -1,   437,   438,   439,   440,   441,   442,   443,
     444,   445,   446,   447,   448,   449,   450,   451,   452,   453,
     454,   455,   456,   457,   458,   459,   460,   461,   462,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,    -1,
     474,   475,   476,   477,    -1,   479,   480,   481,   482,   483,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,   499,   500,   501,   502,   503,
     504,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    21,
      22,    23,    24,    -1,    26,    27,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    -1,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
      72,    73,    74,    75,    76,    77,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    95,    -1,    97,    98,    99,   100,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
     122,   123,   124,   125,   126,   127,   128,   129,    -1,   131,
     132,   133,   134,   135,   136,   137,   138,   139,   140,   141,
      -1,    -1,   144,   145,   146,   147,   148,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,   160,   161,
     162,   163,   164,   165,   166,   167,   168,   169,   170,   171,
     172,   173,   174,   175,   176,   177,   178,   179,   180,   181,
     182,   183,   184,    -1,   186,   187,   188,   189,    -1,   191,
     192,   193,   194,   195,   196,   197,   198,   199,   200,   201,
     202,   203,   204,   205,   206,   207,   208,   209,   210,   211,
     212,   213,   214,   215,   216,   217,   218,   219,   220,   221,
     222,   223,   224,   225,   226,   227,   228,   229,   230,   231,
      -1,   233,   234,   235,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,    -1,   281,
     282,   283,   284,   285,   286,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,    -1,    -1,   321,
     322,   323,   324,   325,   326,   327,   328,   329,   330,   331,
     332,   333,   334,   335,   336,   337,   338,    -1,    -1,   341,
     342,   343,   344,   345,   346,   347,   348,   349,   350,   351,
     352,   353,   354,    -1,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,    -1,   397,   398,    -1,   400,   401,
     402,   403,    -1,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,   428,   429,   430,   431,
     432,   433,   434,   435,    -1,   437,   438,   439,   440,   441,
     442,   443,   444,   445,   446,   447,   448,   449,   450,   451,
     452,   453,   454,   455,   456,   457,   458,   459,   460,   461,
     462,   463,   464,   465,   466,   467,   468,   469,   470,   471,
     472,    -1,   474,   475,   476,   477,    -1,   479,   480,   481,
     482,   483,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,   498,   499,   500,   501,
     502,   503,   504,     3,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    21,    22,    23,    24,    -1,    26,    27,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    -1,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
      70,    71,    72,    73,    74,    75,    76,    77,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    95,    -1,    97,    98,    99,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
     120,   121,   122,   123,   124,   125,   126,   127,   128,   129,
      -1,   131,   132,   133,   134,   135,   136,   137,   138,   139,
     140,   141,    -1,    -1,   144,   145,   146,   147,   148,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
     160,   161,   162,   163,   164,   165,   166,   167,   168,   169,
     170,   171,   172,   173,   174,   175,   176,   177,   178,   179,
     180,   181,   182,   183,   184,    -1,   186,   187,   188,   189,
      -1,   191,   192,   193,   194,   195,   196,   197,   198,   199,
     200,   201,   202,   203,   204,   205,   206,   207,   208,   209,
     210,   211,   212,   213,   214,   215,   216,   217,   218,   219,
     220,   221,   222,   223,   224,   225,   226,   227,   228,   229,
     230,   231,    -1,   233,   234,   235,   236,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
      -1,   281,   282,   283,   284,   285,   286,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,    -1,
      -1,   321,   322,   323,   324,   325,   326,   327,   328,   329,
     330,   331,   332,   333,   334,   335,   336,   337,   338,    -1,
      -1,   341,   342,   343,   344,   345,   346,   347,   348,   349,
     350,   351,   352,   353,   354,    -1,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,    -1,   397,   398,    -1,
     400,   401,   402,   403,    -1,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,   428,   429,
     430,   431,   432,   433,   434,   435,    -1,   437,   438,   439,
     440,   441,   442,   443,   444,   445,   446,   447,   448,   449,
     450,   451,   452,   453,   454,   455,   456,   457,   458,   459,
     460,   461,   462,   463,   464,   465,   466,   467,   468,   469,
     470,   471,   472,    -1,   474,   475,   476,   477,    -1,   479,
     480,   481,   482,   483,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,   498,   499,
     500,   501,   502,   503,   504,     3,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    21,    22,    23,    24,    -1,    26,    27,
      28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    42,    43,    -1,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    -1,
      58,    59,    60,    61,    62,    63,    -1,    65,    66,    67,
      68,    69,    70,    -1,    72,    73,    74,    75,    76,    -1,
      78,    -1,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    -1,    91,    92,    93,    94,    95,    -1,    -1,
      98,    99,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,    -1,   120,    -1,   122,   123,   124,   125,   126,   127,
      -1,   129,    -1,   131,   132,   133,   134,    -1,    -1,   137,
     138,   139,   140,   141,    -1,    -1,    -1,   145,   146,   147,
      -1,   149,   150,   151,    -1,   153,   154,   155,   156,   157,
     158,   159,   160,   161,   162,   163,    -1,   165,    -1,   167,
     168,   169,   170,    -1,   172,    -1,   174,   175,    -1,   177,
     178,   179,   180,   181,   182,    -1,   184,    -1,    -1,    -1,
     188,   189,    -1,   191,    -1,   193,   194,   195,   196,   197,
     198,   199,   200,   201,   202,   203,   204,    -1,   206,   207,
     208,   209,   210,   211,    -1,   213,   214,   215,   216,   217,
     218,   219,   220,   221,   222,    -1,   224,    -1,   226,   227,
     228,   229,   230,   231,    -1,   233,   234,   235,   236,   237,
      -1,    -1,   240,   241,   242,   243,    -1,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,    -1,   281,    -1,   283,   284,   285,   286,    -1,
     288,   289,   290,   291,   292,   293,    -1,   295,   296,    -1,
      -1,   299,   300,   301,    -1,    -1,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,    -1,    -1,   321,    -1,   323,   324,   325,   326,   327,
     328,   329,   330,   331,   332,    -1,   334,   335,   336,   337,
     338,    -1,    -1,   341,    -1,   343,   344,   345,   346,   347,
     348,   349,   350,    -1,   352,   353,   354,    -1,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,    -1,   367,
     368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,    -1,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,    -1,   397,
     398,    -1,   400,   401,   402,    -1,    -1,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,   417,
     418,   419,   420,    -1,   422,   423,    -1,   425,   426,   427,
     428,   429,   430,   431,    -1,   433,   434,    -1,    -1,    -1,
     438,   439,   440,   441,   442,    -1,   444,   445,   446,   447,
     448,   449,   450,   451,    -1,    -1,   454,   455,   456,   457,
     458,   459,   460,    -1,   462,   463,   464,   465,   466,   467,
     468,    -1,   470,   471,   472,    -1,   474,   475,   476,   477,
      -1,    -1,    -1,   481,    -1,    -1,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,   499,   500,   501,   502,   503,   504,     3,    -1,     5,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    21,    22,    23,    24,    -1,
      26,    27,    28,    29,    -1,    31,    32,    33,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    42,    43,    -1,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    -1,    58,    59,    60,    61,    62,    63,    -1,    -1,
      66,    67,    68,    69,    70,    -1,    72,    73,    74,    75,
      76,    -1,    78,    -1,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    -1,    91,    92,    93,    94,    95,
      -1,    -1,    98,    99,   100,   101,   102,   103,   104,   105,
      -1,    -1,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,    -1,   120,    -1,   122,   123,   124,   125,
     126,   127,    -1,   129,    -1,   131,   132,   133,   134,    -1,
      -1,   137,   138,   139,   140,   141,    -1,    -1,    -1,   145,
     146,   147,    -1,   149,   150,   151,    -1,   153,   154,   155,
     156,   157,   158,   159,   160,   161,   162,   163,   164,   165,
      -1,   167,   168,   169,   170,    -1,   172,    -1,   174,   175,
      -1,   177,   178,   179,   180,   181,   182,    -1,   184,    -1,
      -1,    -1,   188,   189,    -1,   191,    -1,   193,   194,   195,
     196,   197,   198,   199,   200,   201,   202,   203,   204,    -1,
     206,   207,   208,   209,   210,   211,    -1,   213,   214,   215,
     216,   217,   218,   219,   220,   221,   222,    -1,   224,    -1,
     226,   227,   228,   229,   230,   231,    -1,   233,   234,   235,
     236,   237,    -1,    -1,   240,   241,   242,   243,    -1,   245,
     246,   247,    -1,    -1,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,    -1,   281,    -1,   283,   284,   285,
     286,    -1,   288,   289,   290,   291,   292,   293,    -1,   295,
     296,   297,    -1,   299,   300,   301,    -1,    -1,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,    -1,    -1,   321,    -1,   323,   324,   325,
     326,   327,   328,   329,   330,   331,   332,    -1,   334,   335,
     336,   337,   338,    -1,    -1,   341,    -1,   343,   344,   345,
     346,   347,   348,   349,   350,    -1,   352,   353,   354,    -1,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
      -1,   367,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,    -1,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
      -1,   397,   398,    -1,   400,   401,   402,    -1,    -1,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,   417,   418,   419,   420,    -1,   422,   423,    -1,   425,
     426,   427,   428,   429,   430,   431,    -1,   433,   434,    -1,
      -1,    -1,   438,   439,   440,   441,   442,   443,   444,   445,
     446,   447,   448,   449,   450,   451,    -1,    -1,   454,   455,
     456,   457,   458,   459,   460,    -1,   462,   463,   464,   465,
     466,   467,   468,    -1,   470,   471,   472,    -1,   474,   475,
     476,   477,    -1,    -1,    -1,   481,    -1,    -1,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,   498,   499,   500,   501,   502,   503,   504,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    21,    22,    23,
      24,    -1,    26,    27,    28,    29,    -1,    31,    32,    33,
      34,    35,    -1,    -1,    -1,    -1,    -1,    -1,    42,    43,
      -1,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    -1,    58,    59,    60,    61,    62,    63,
      -1,    -1,    66,    67,    68,    69,    70,    -1,    72,    73,
      74,    75,    76,    -1,    78,    -1,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    -1,    91,    92,    93,
      94,    95,    -1,    -1,    98,    99,   100,   101,   102,   103,
     104,   105,    -1,    -1,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,    -1,   120,    -1,   122,   123,
     124,   125,   126,   127,    -1,   129,    -1,   131,   132,   133,
     134,    -1,    -1,   137,   138,   139,   140,   141,    -1,    -1,
      -1,   145,   146,   147,    -1,   149,   150,   151,    -1,   153,
     154,   155,   156,   157,   158,   159,   160,   161,   162,   163,
      -1,   165,    -1,   167,   168,   169,   170,    -1,   172,    -1,
     174,   175,    -1,   177,   178,   179,   180,   181,   182,    -1,
     184,    -1,    -1,    -1,   188,   189,    -1,   191,    -1,   193,
     194,   195,   196,   197,   198,   199,   200,   201,   202,   203,
     204,    -1,   206,   207,   208,   209,   210,   211,    -1,   213,
     214,   215,   216,   217,   218,   219,   220,   221,   222,    -1,
     224,    -1,   226,   227,   228,   229,   230,   231,    -1,   233,
     234,   235,   236,   237,    -1,    -1,   240,   241,   242,   243,
      -1,   245,   246,   247,    -1,    -1,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,    -1,   281,    -1,   283,
     284,   285,   286,    -1,   288,   289,   290,   291,   292,   293,
      -1,   295,   296,    -1,    -1,   299,   300,   301,    -1,    -1,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,    -1,    -1,   321,    -1,   323,
     324,   325,   326,   327,   328,   329,   330,   331,   332,    -1,
     334,   335,   336,   337,   338,    -1,    -1,   341,    -1,   343,
     344,   345,   346,   347,   348,   349,   350,    -1,   352,   353,
     354,    -1,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,    -1,   367,   368,   369,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,    -1,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,    -1,   397,   398,    -1,   400,   401,   402,    -1,
      -1,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,   417,   418,   419,   420,    -1,   422,   423,
      -1,   425,   426,   427,   428,   429,   430,   431,    -1,   433,
     434,    -1,    -1,    -1,   438,   439,   440,   441,   442,    -1,
     444,   445,   446,   447,   448,   449,   450,   451,    -1,    -1,
     454,   455,   456,   457,   458,   459,   460,    -1,   462,   463,
     464,   465,   466,   467,   468,    -1,   470,   471,   472,    -1,
     474,   475,   476,   477,    -1,    -1,    -1,   481,    -1,    -1,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,   499,   500,   501,   502,   503,
     504,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    21,
      22,    23,    24,    -1,    26,    27,    28,    29,    -1,    31,
      32,    33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      42,    43,    -1,    45,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    -1,    58,    59,    60,    61,
      62,    63,    -1,    -1,    66,    67,    68,    69,    70,    -1,
      72,    73,    74,    75,    76,    -1,    78,    -1,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    -1,    91,
      92,    93,    94,    95,    -1,    -1,    98,    99,   100,   101,
     102,   103,   104,   105,    -1,    -1,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,    -1,   120,    -1,
     122,   123,   124,   125,   126,   127,    -1,   129,    -1,   131,
     132,   133,   134,    -1,    -1,   137,   138,   139,   140,   141,
      -1,    -1,    -1,   145,   146,   147,    -1,   149,   150,   151,
      -1,   153,   154,   155,   156,   157,   158,   159,   160,   161,
     162,   163,    -1,   165,    -1,   167,   168,   169,   170,    -1,
     172,    -1,   174,   175,    -1,   177,   178,   179,   180,   181,
     182,    -1,   184,    -1,    -1,    -1,   188,   189,    -1,   191,
      -1,   193,   194,   195,   196,   197,   198,   199,   200,   201,
     202,   203,   204,    -1,   206,   207,   208,   209,   210,   211,
      -1,   213,   214,   215,   216,   217,   218,   219,   220,   221,
     222,    -1,   224,    -1,   226,   227,   228,   229,   230,   231,
      -1,   233,   234,   235,   236,   237,    -1,    -1,   240,   241,
     242,   243,    -1,   245,   246,   247,    -1,    -1,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,    -1,   281,
      -1,   283,   284,   285,   286,    -1,   288,   289,   290,   291,
     292,   293,    -1,   295,   296,    -1,    -1,   299,   300,   301,
      -1,    -1,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,    -1,    -1,   321,
      -1,   323,   324,   325,   326,   327,   328,   329,   330,   331,
     332,    -1,   334,   335,   336,   337,   338,    -1,    -1,   341,
      -1,   343,   344,   345,   346,   347,   348,   349,   350,    -1,
     352,   353,   354,    -1,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,    -1,   367,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,    -1,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,    -1,   397,   398,    -1,   400,   401,
     402,    -1,    -1,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,   417,   418,   419,   420,    -1,
     422,   423,    -1,   425,   426,   427,   428,   429,   430,   431,
      -1,   433,   434,    -1,    -1,    -1,   438,   439,   440,   441,
     442,    -1,   444,   445,   446,   447,   448,   449,   450,   451,
      -1,    -1,   454,   455,   456,   457,   458,   459,   460,    -1,
     462,   463,   464,   465,   466,   467,   468,    -1,   470,   471,
     472,    -1,   474,   475,   476,   477,    -1,    -1,    -1,   481,
      -1,    -1,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,   498,   499,   500,   501,
     502,   503,   504,     3,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    21,    22,    23,    24,    -1,    26,    27,    28,    29,
      -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    42,    43,    -1,    45,    46,    47,    -1,    49,
      50,    51,    52,    53,    -1,    55,    56,    -1,    58,    59,
      60,    61,    62,    63,    -1,    -1,    66,    67,    68,    69,
      70,    71,    72,    73,    74,    75,    76,    -1,    -1,    79,
      80,    81,    82,    83,    84,    85,    -1,    87,    88,    89,
      90,    91,    92,    93,    94,    95,    -1,    -1,    -1,    99,
     100,   101,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,    -1,
     120,    -1,   122,   123,   124,   125,   126,   127,    -1,   129,
      -1,   131,   132,   133,   134,    -1,    -1,   137,   138,   139,
     140,   141,    -1,    -1,    -1,   145,   146,   147,    -1,   149,
     150,   151,    -1,   153,   154,   155,   156,   157,   158,   159,
     160,   161,   162,   163,    -1,   165,    -1,   167,   168,   169,
     170,    -1,   172,   173,   174,    -1,    -1,    -1,   178,   179,
     180,    -1,   182,    -1,   184,    -1,    -1,    -1,   188,   189,
      -1,   191,    -1,   193,   194,   195,   196,   197,   198,   199,
      -1,   201,   202,   203,   204,    -1,   206,   207,   208,   209,
     210,   211,    -1,   213,    -1,   215,   216,   217,   218,   219,
     220,   221,   222,    -1,   224,    -1,   226,    -1,    -1,   229,
      -1,   231,    -1,   233,   234,   235,   236,   237,    -1,    -1,
     240,    -1,   242,    -1,    -1,   245,   246,   247,    -1,    -1,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,    -1,   276,   277,   278,   279,
      -1,   281,    -1,   283,   284,    -1,   286,    -1,   288,   289,
     290,   291,   292,   293,    -1,   295,   296,    -1,    -1,   299,
     300,   301,    -1,    -1,   304,   305,    -1,   307,    -1,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,    -1,
      -1,   321,    -1,   323,   324,   325,    -1,   327,   328,   329,
     330,   331,   332,   333,   334,   335,   336,   337,   338,    -1,
      -1,   341,    -1,   343,   344,   345,   346,   347,   348,   349,
     350,    -1,   352,   353,   354,    -1,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,    -1,   367,   368,    -1,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,    -1,   386,   387,   388,   389,
     390,    -1,   392,   393,   394,   395,    -1,   397,    -1,    -1,
     400,   401,   402,    -1,    -1,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,   417,   418,   419,
     420,    -1,   422,   423,    -1,   425,    -1,   427,   428,   429,
     430,   431,    -1,   433,   434,    -1,    -1,    -1,   438,   439,
     440,   441,   442,    -1,   444,   445,   446,   447,   448,   449,
     450,   451,    -1,   453,   454,   455,   456,   457,   458,   459,
      -1,    -1,   462,   463,   464,   465,   466,   467,   468,    -1,
     470,    -1,   472,    -1,   474,   475,   476,   477,    -1,    -1,
      -1,   481,    -1,    -1,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,   498,   499,
     500,   501,   502,   503,   504,     3,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    21,    22,    23,    24,    -1,    26,    27,
      28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    42,    43,    -1,    45,    46,    47,
      -1,    49,    50,    51,    52,    53,    -1,    55,    56,    -1,
      58,    59,    60,    61,    62,    63,    -1,    -1,    66,    67,
      68,    69,    70,    71,    72,    73,    74,    75,    76,    -1,
      -1,    -1,    80,    81,    82,    83,    84,    85,    -1,    87,
      88,    89,    90,    91,    92,    93,    94,    95,    -1,    -1,
      -1,    99,   100,   101,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,    -1,   120,    -1,   122,   123,   124,   125,   126,   127,
      -1,   129,    -1,   131,   132,   133,   134,    -1,    -1,   137,
     138,   139,   140,   141,    -1,    -1,    -1,   145,   146,   147,
      -1,   149,   150,   151,    -1,   153,   154,   155,   156,   157,
     158,   159,   160,   161,   162,   163,    -1,   165,    -1,   167,
     168,   169,   170,    -1,   172,   173,   174,    -1,    -1,    -1,
     178,   179,   180,    -1,   182,    -1,   184,    -1,    -1,    -1,
     188,   189,    -1,   191,    -1,   193,   194,   195,   196,   197,
     198,   199,    -1,   201,   202,   203,   204,    -1,   206,   207,
     208,   209,   210,   211,    -1,   213,    -1,   215,   216,   217,
     218,   219,   220,   221,   222,    -1,   224,    -1,   226,    -1,
      -1,   229,    -1,   231,    -1,   233,   234,   235,   236,   237,
      -1,    -1,   240,    -1,   242,   243,    -1,   245,   246,   247,
      -1,    -1,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,    -1,   276,   277,
     278,   279,    -1,   281,    -1,   283,   284,    -1,   286,    -1,
     288,   289,   290,   291,   292,   293,    -1,   295,   296,    -1,
      -1,   299,   300,   301,    -1,    -1,   304,   305,    -1,   307,
      -1,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,    -1,    -1,   321,    -1,   323,   324,   325,    -1,   327,
     328,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     338,    -1,    -1,   341,    -1,   343,   344,   345,   346,   347,
     348,   349,   350,    -1,   352,   353,   354,    -1,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,    -1,   367,
     368,    -1,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,    -1,   386,   387,
     388,   389,   390,    -1,   392,   393,   394,   395,    -1,   397,
      -1,    -1,   400,   401,   402,    -1,    -1,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,   417,
     418,   419,   420,    -1,   422,   423,    -1,   425,    -1,   427,
     428,   429,   430,   431,    -1,   433,   434,    -1,    -1,    -1,
     438,   439,   440,   441,   442,    -1,   444,   445,   446,   447,
     448,   449,   450,   451,    -1,   453,   454,   455,   456,   457,
     458,   459,    -1,    -1,   462,   463,   464,   465,   466,   467,
     468,    -1,   470,    -1,   472,    -1,   474,   475,   476,   477,
      -1,    -1,    -1,   481,    -1,    -1,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,   499,   500,   501,   502,   503,   504,     3,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    21,    22,    23,    24,    -1,
      26,    27,    28,    29,    -1,    31,    32,    33,    -1,    -1,
      -1,    -1,    -1,    -1,    40,    -1,    42,    43,    -1,    45,
      46,    47,    48,    49,    50,    51,    -1,    53,    54,    55,
      56,    -1,    58,    59,    60,    61,    62,    63,    -1,    -1,
      66,    67,    68,    69,    70,    -1,    72,    73,    74,    75,
      -1,    -1,    78,    -1,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    -1,    91,    92,    93,    94,    95,
      -1,    -1,    98,    99,   100,   101,   102,   103,   104,   105,
      -1,    -1,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,    -1,   120,    -1,   122,   123,   124,   125,
     126,   127,    -1,   129,    -1,   131,   132,   133,   134,    -1,
      -1,   137,   138,   139,   140,   141,    -1,    -1,    -1,   145,
     146,   147,    -1,   149,   150,   151,    -1,   153,   154,   155,
     156,    -1,   158,   159,   160,   161,   162,    -1,    -1,   165,
      -1,   167,   168,   169,   170,    -1,   172,    -1,   174,   175,
      -1,   177,   178,   179,   180,   181,   182,    -1,   184,    -1,
      -1,    -1,    -1,    -1,    -1,   191,    -1,   193,   194,   195,
     196,   197,   198,   199,   200,   201,   202,   203,   204,    -1,
     206,   207,   208,   209,   210,   211,    -1,   213,   214,    -1,
     216,   217,   218,   219,   220,   221,   222,    -1,   224,    -1,
     226,   227,   228,   229,   230,   231,    -1,   233,   234,   235,
     236,   237,    -1,    -1,   240,   241,   242,   243,    -1,   245,
     246,   247,    -1,    -1,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,    -1,    -1,    -1,   283,   284,   285,
     286,    -1,    -1,   289,   290,   291,   292,   293,    -1,   295,
     296,    -1,    -1,   299,   300,   301,    -1,    -1,   304,    -1,
     306,   307,   308,    -1,   310,   311,   312,   313,   314,   315,
     316,   317,   318,    -1,    -1,   321,    -1,   323,   324,    -1,
     326,   327,   328,    -1,   330,   331,   332,    -1,   334,   335,
     336,   337,   338,    -1,    -1,   341,    -1,   343,   344,   345,
     346,   347,   348,   349,   350,    -1,   352,   353,   354,    -1,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
      -1,   367,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,    -1,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
      -1,   397,   398,    -1,   400,   401,   402,    -1,    -1,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,   417,   418,    -1,   420,    -1,   422,   423,    -1,   425,
     426,   427,   428,   429,   430,   431,    -1,   433,   434,    -1,
      -1,    -1,   438,   439,    -1,   441,    -1,    -1,   444,   445,
     446,   447,   448,   449,   450,   451,   452,    -1,   454,   455,
     456,   457,   458,   459,   460,    -1,   462,   463,   464,   465,
     466,    -1,   468,    -1,   470,   471,   472,    -1,   474,   475,
     476,   477,    -1,    -1,    -1,   481,    -1,    -1,   484,   485,
     486,   487,   488,   489,     3,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   501,   502,   503,   504,    -1,
      -1,    -1,    21,    22,    23,    24,    -1,    26,    27,    28,
      29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    42,    43,    -1,    45,    46,    47,    48,
      49,    50,    51,    -1,    53,    54,    55,    56,    -1,    58,
      59,    60,    61,    62,    63,    -1,    -1,    66,    67,    68,
      69,    70,    -1,    72,    73,    74,    75,    -1,    -1,    78,
      -1,    80,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    -1,    91,    92,    93,    94,    95,    -1,    -1,    98,
      99,   100,   101,   102,   103,   104,   105,    -1,    -1,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
      -1,   120,    -1,   122,   123,   124,   125,   126,   127,    -1,
     129,    -1,   131,   132,   133,   134,    -1,    -1,   137,   138,
     139,   140,   141,    -1,    -1,    -1,   145,   146,   147,    -1,
     149,   150,   151,    -1,   153,   154,   155,   156,    -1,   158,
     159,   160,   161,   162,    -1,    -1,   165,    -1,   167,   168,
     169,   170,    -1,   172,    -1,   174,   175,    -1,   177,   178,
     179,    -1,   181,   182,    -1,   184,    -1,    -1,    -1,    -1,
      -1,    -1,   191,    -1,   193,   194,   195,   196,   197,   198,
     199,   200,   201,   202,   203,   204,    -1,   206,   207,   208,
     209,   210,   211,    -1,   213,   214,    -1,   216,   217,   218,
     219,   220,   221,   222,    -1,   224,    -1,   226,   227,   228,
     229,   230,   231,    -1,   233,   234,   235,   236,   237,    -1,
      -1,   240,   241,   242,   243,    -1,   245,   246,   247,    -1,
      -1,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,    -1,    -1,    -1,   283,   284,   285,   286,    -1,    -1,
     289,   290,   291,   292,   293,    -1,   295,   296,    -1,    -1,
     299,   300,   301,    -1,    -1,   304,    -1,   306,   307,   308,
      -1,   310,   311,   312,   313,   314,   315,   316,   317,   318,
      -1,    -1,   321,    -1,   323,   324,    -1,   326,   327,   328,
      -1,   330,   331,   332,    -1,   334,   335,   336,   337,   338,
      -1,    -1,   341,    -1,   343,   344,   345,   346,   347,   348,
     349,   350,    -1,   352,   353,   354,    -1,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,    -1,   367,   368,
     369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,    -1,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,    -1,   397,   398,
      -1,   400,   401,   402,    -1,    -1,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,   417,   418,
      -1,   420,    -1,   422,   423,    -1,   425,   426,   427,   428,
     429,   430,   431,    -1,   433,   434,    -1,    -1,    -1,   438,
     439,    -1,   441,    -1,    -1,   444,   445,   446,   447,   448,
     449,   450,   451,   452,    -1,   454,   455,   456,   457,   458,
     459,   460,    -1,   462,   463,   464,   465,   466,    -1,   468,
      -1,   470,   471,   472,    -1,   474,   475,   476,   477,    -1,
      -1,    -1,   481,    -1,    -1,   484,   485,   486,   487,   488,
     489,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   501,   502,   503,   504,    -1,    -1,    -1,    21,
      22,    23,    24,    -1,    26,    27,    28,    29,    -1,    31,
      32,    33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      42,    43,    -1,    45,    46,    47,    48,    49,    50,    51,
      -1,    53,    54,    55,    56,    -1,    58,    59,    60,    61,
      62,    63,    -1,    -1,    66,    67,    68,    69,    70,    -1,
      72,    73,    74,    75,    -1,    -1,    78,    -1,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    -1,    91,
      92,    93,    94,    95,    -1,    -1,    98,    99,   100,   101,
     102,   103,   104,   105,    -1,    -1,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,    -1,   120,    -1,
     122,   123,   124,   125,   126,   127,    -1,   129,    -1,   131,
     132,   133,   134,    -1,    -1,   137,   138,   139,   140,   141,
      -1,    -1,    -1,   145,   146,   147,    -1,   149,   150,   151,
      -1,   153,   154,   155,   156,    -1,   158,   159,   160,   161,
     162,    -1,    -1,   165,    -1,   167,   168,   169,   170,    -1,
     172,    -1,   174,   175,    -1,   177,   178,   179,    -1,   181,
     182,    -1,   184,    -1,    -1,    -1,    -1,    -1,    -1,   191,
      -1,   193,   194,   195,   196,   197,   198,   199,   200,   201,
     202,   203,   204,    -1,   206,   207,   208,   209,   210,   211,
      -1,   213,   214,    -1,   216,   217,   218,   219,   220,   221,
     222,    -1,   224,    -1,   226,   227,   228,   229,   230,   231,
      -1,   233,   234,   235,   236,   237,    -1,    -1,   240,   241,
     242,   243,    -1,   245,   246,   247,    -1,    -1,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,    -1,    -1,
      -1,   283,   284,   285,   286,    -1,    -1,   289,   290,   291,
     292,   293,    -1,   295,   296,    -1,    -1,   299,   300,   301,
      -1,    -1,   304,    -1,   306,   307,   308,    -1,   310,   311,
     312,   313,   314,   315,   316,   317,   318,    -1,    -1,   321,
      -1,   323,   324,    -1,   326,   327,   328,    -1,   330,   331,
     332,    -1,   334,   335,   336,   337,   338,    -1,    -1,   341,
      -1,   343,   344,   345,   346,   347,   348,   349,   350,    -1,
     352,   353,   354,    -1,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,    -1,   367,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,    -1,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,    -1,   397,   398,    -1,   400,   401,
     402,    -1,    -1,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,   417,   418,    -1,   420,    -1,
     422,   423,    -1,   425,   426,   427,   428,   429,   430,   431,
      -1,   433,   434,    -1,    -1,    -1,   438,   439,    -1,   441,
      -1,    -1,   444,   445,   446,   447,   448,   449,   450,   451,
     452,    -1,   454,   455,   456,   457,   458,   459,   460,    -1,
     462,   463,   464,   465,   466,    -1,   468,    -1,   470,   471,
     472,    -1,   474,   475,   476,   477,    -1,    -1,    -1,   481,
      -1,    -1,   484,   485,   486,   487,   488,   489,     3,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   501,
     502,   503,   504,    -1,    -1,    -1,    21,    22,    23,    24,
      -1,    26,    27,    28,    29,    -1,    31,    32,    33,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    42,    43,    -1,
      45,    46,    47,    48,    49,    50,    51,    -1,    53,    54,
      55,    56,    -1,    58,    59,    60,    61,    62,    63,    -1,
      -1,    66,    67,    68,    69,    70,    -1,    72,    73,    74,
      75,    -1,    -1,    78,    -1,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    -1,    91,    92,    93,    94,
      95,    -1,    -1,    98,    99,   100,   101,   102,   103,   104,
     105,    -1,    -1,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,    -1,   120,    -1,   122,   123,   124,
     125,   126,   127,    -1,   129,    -1,   131,   132,   133,   134,
      -1,    -1,   137,   138,   139,   140,   141,    -1,    -1,    -1,
     145,   146,   147,    -1,   149,   150,   151,    -1,   153,   154,
     155,   156,    -1,   158,   159,   160,   161,   162,    -1,    -1,
     165,    -1,   167,   168,   169,   170,    -1,   172,    -1,   174,
     175,    -1,   177,   178,   179,    -1,   181,   182,    -1,   184,
      -1,    -1,    -1,    -1,    -1,    -1,   191,    -1,   193,   194,
     195,   196,   197,   198,   199,   200,   201,   202,   203,   204,
      -1,   206,   207,   208,   209,   210,   211,    -1,   213,   214,
      -1,   216,   217,   218,   219,   220,   221,   222,    -1,   224,
      -1,   226,   227,   228,   229,   230,   231,    -1,   233,   234,
     235,   236,   237,    -1,    -1,   240,   241,   242,   243,    -1,
     245,   246,   247,    -1,    -1,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,    -1,    -1,    -1,   283,   284,
     285,   286,    -1,    -1,   289,   290,   291,   292,   293,    -1,
     295,   296,    -1,    -1,   299,   300,   301,    -1,    -1,   304,
      -1,   306,   307,   308,    -1,   310,   311,   312,   313,   314,
     315,   316,   317,   318,    -1,    -1,   321,    -1,   323,   324,
      -1,   326,   327,   328,    -1,   330,   331,   332,    -1,   334,
     335,   336,   337,   338,    -1,    -1,   341,    -1,   343,   344,
     345,   346,   347,   348,   349,   350,    -1,   352,   353,   354,
      -1,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,    -1,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
      -1,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,    -1,   397,   398,    -1,   400,   401,   402,    -1,    -1,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,    -1,   420,    -1,   422,   423,    -1,
     425,   426,   427,   428,   429,   430,   431,    -1,   433,   434,
      -1,    -1,    -1,   438,   439,    -1,   441,    -1,    -1,   444,
     445,   446,   447,   448,   449,   450,   451,   452,    -1,   454,
     455,   456,   457,   458,   459,   460,    -1,   462,   463,   464,
     465,   466,    -1,   468,    -1,   470,   471,   472,    -1,   474,
     475,   476,   477,    -1,    -1,    -1,   481,    -1,    -1,   484,
     485,   486,   487,   488,   489,     3,    -1,     5,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   501,   502,   503,   504,
      -1,    -1,    -1,    21,    22,    23,    24,    -1,    26,    27,
      28,    29,    -1,    31,    32,    33,    34,    35,    -1,    -1,
      -1,    -1,    -1,    -1,    42,    43,    -1,    45,    46,    47,
      -1,    49,    50,    51,    52,    53,    -1,    55,    56,    -1,
      58,    59,    60,    61,    62,    63,    -1,    -1,    66,    67,
      68,    69,    70,    -1,    72,    73,    74,    75,    76,    -1,
      -1,    -1,    80,    81,    82,    83,    84,    85,    -1,    87,
      88,    89,    -1,    91,    92,    93,    94,    95,    -1,    -1,
      -1,    99,   100,   101,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,    -1,   120,    -1,   122,   123,   124,   125,   126,   127,
      -1,   129,    -1,   131,   132,   133,   134,    -1,    -1,   137,
     138,   139,   140,   141,    -1,    -1,    -1,   145,   146,   147,
      -1,   149,   150,   151,    -1,   153,   154,   155,   156,   157,
     158,   159,   160,   161,   162,   163,    -1,   165,    -1,   167,
     168,   169,   170,    -1,   172,    -1,   174,    -1,    -1,    -1,
     178,   179,   180,    -1,   182,    -1,   184,    -1,    -1,    -1,
     188,   189,    -1,   191,    -1,   193,   194,   195,   196,   197,
     198,   199,    -1,   201,   202,   203,   204,    -1,   206,   207,
     208,   209,   210,   211,    -1,   213,    -1,   215,   216,   217,
     218,   219,   220,   221,   222,    -1,   224,    -1,   226,    -1,
      -1,   229,    -1,   231,    -1,   233,   234,   235,   236,   237,
      -1,    -1,   240,    -1,   242,    -1,    -1,   245,   246,   247,
      -1,    -1,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,    -1,   276,   277,
     278,   279,    -1,   281,    -1,   283,   284,    -1,   286,    -1,
     288,   289,   290,   291,   292,   293,    -1,   295,   296,    -1,
      -1,   299,   300,   301,    -1,    -1,   304,   305,    -1,   307,
      -1,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,    -1,    -1,   321,    -1,   323,   324,   325,    -1,   327,
     328,   329,   330,   331,   332,    -1,   334,   335,   336,   337,
     338,    -1,    -1,   341,    -1,   343,   344,   345,   346,   347,
     348,   349,   350,    -1,   352,   353,   354,    -1,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,    -1,   367,
     368,    -1,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,    -1,   386,   387,
     388,   389,   390,    -1,   392,   393,   394,   395,    -1,   397,
      -1,    -1,   400,   401,   402,    -1,    -1,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,   417,
     418,   419,   420,    -1,   422,   423,    -1,   425,    -1,   427,
     428,   429,   430,   431,    -1,   433,   434,    -1,    -1,    -1,
     438,   439,   440,   441,   442,    -1,   444,   445,   446,   447,
     448,   449,   450,   451,    -1,    -1,   454,   455,   456,   457,
     458,   459,    -1,    -1,   462,   463,   464,   465,   466,   467,
     468,    -1,   470,    -1,   472,    -1,   474,   475,   476,   477,
      -1,    -1,    -1,   481,    -1,    -1,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,   499,   500,   501,   502,   503,   504,     3,    -1,     5,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    21,    22,    23,    24,    -1,
      26,    27,    28,    29,    30,    31,    32,    33,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    42,    43,    -1,    45,
      46,    47,    -1,    49,    50,    51,    52,    53,    -1,    55,
      56,    -1,    58,    59,    60,    61,    62,    63,    -1,    -1,
      66,    67,    68,    69,    70,    -1,    72,    73,    74,    75,
      76,    -1,    -1,    -1,    80,    81,    82,    83,    84,    85,
      -1,    87,    88,    89,    -1,    91,    92,    93,    94,    95,
      -1,    -1,    -1,    99,   100,   101,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,    -1,   120,    -1,   122,   123,   124,   125,
     126,   127,    -1,   129,    -1,   131,   132,   133,   134,    -1,
      -1,   137,   138,   139,   140,   141,    -1,    -1,    -1,   145,
     146,   147,    -1,   149,   150,   151,    -1,   153,   154,   155,
     156,   157,   158,   159,   160,   161,   162,   163,    -1,   165,
      -1,   167,   168,   169,   170,    -1,   172,    -1,   174,    -1,
      -1,    -1,   178,   179,   180,    -1,   182,    -1,   184,    -1,
      -1,    -1,   188,   189,    -1,   191,    -1,   193,   194,   195,
     196,   197,   198,   199,    -1,   201,   202,   203,   204,    -1,
     206,   207,   208,   209,   210,   211,    -1,   213,    -1,   215,
     216,   217,   218,   219,   220,   221,   222,    -1,   224,    -1,
     226,    -1,    -1,   229,    -1,   231,    -1,   233,   234,   235,
     236,   237,    -1,    -1,   240,    -1,   242,    -1,    -1,   245,
     246,   247,    -1,    -1,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,    -1,
     276,   277,   278,   279,    -1,   281,    -1,   283,   284,    -1,
     286,    -1,   288,   289,   290,   291,   292,   293,    -1,   295,
     296,    -1,    -1,   299,   300,   301,    -1,    -1,   304,   305,
      -1,   307,    -1,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,    -1,    -1,   321,    -1,   323,   324,   325,
      -1,   327,   328,   329,   330,   331,   332,    -1,   334,   335,
     336,   337,   338,    -1,    -1,   341,    -1,   343,   344,   345,
     346,   347,   348,   349,   350,    -1,   352,   353,   354,    -1,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
      -1,   367,   368,    -1,   370,   371,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,    -1,
     386,   387,   388,   389,   390,    -1,   392,   393,   394,   395,
      -1,   397,    -1,    -1,   400,   401,   402,    -1,    -1,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,   417,   418,   419,   420,    -1,   422,   423,    -1,   425,
      -1,   427,   428,   429,   430,   431,    -1,   433,   434,    -1,
      -1,    -1,   438,   439,   440,   441,   442,    -1,   444,   445,
     446,   447,   448,   449,   450,   451,    -1,    -1,   454,   455,
     456,   457,   458,   459,    -1,    -1,   462,   463,   464,   465,
     466,   467,   468,    -1,   470,    -1,   472,    -1,   474,   475,
     476,   477,    -1,    -1,    -1,   481,    -1,    -1,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,   498,   499,   500,   501,   502,   503,   504,     3,
      -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    21,    22,    23,
      24,    -1,    26,    27,    28,    29,    -1,    31,    32,    33,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    42,    43,
      -1,    45,    46,    47,    -1,    49,    50,    51,    52,    53,
      -1,    55,    56,    -1,    58,    59,    60,    61,    62,    63,
      -1,    -1,    66,    67,    68,    69,    70,    -1,    72,    73,
      74,    75,    76,    -1,    -1,    -1,    80,    81,    82,    83,
      84,    85,    -1,    87,    88,    89,    -1,    91,    92,    93,
      94,    95,    -1,    -1,    -1,    99,   100,   101,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,    -1,   120,    -1,   122,   123,
     124,   125,   126,   127,    -1,   129,    -1,   131,   132,   133,
     134,    -1,    -1,   137,   138,   139,   140,   141,    -1,    -1,
      -1,   145,   146,   147,    -1,   149,   150,   151,    -1,   153,
     154,   155,   156,   157,   158,   159,   160,   161,   162,   163,
      -1,   165,    -1,   167,   168,   169,   170,    -1,   172,    -1,
     174,    -1,    -1,    -1,   178,   179,   180,    -1,   182,    -1,
     184,    -1,    -1,    -1,   188,   189,    -1,   191,    -1,   193,
     194,   195,   196,   197,   198,   199,    -1,   201,   202,   203,
     204,    -1,   206,   207,   208,   209,   210,   211,    -1,   213,
      -1,   215,   216,   217,   218,   219,   220,   221,   222,    -1,
     224,    -1,   226,    -1,    -1,   229,    -1,   231,    -1,   233,
     234,   235,   236,   237,    -1,    -1,   240,    -1,   242,    -1,
      -1,   245,   246,   247,    -1,    -1,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,    -1,   276,   277,   278,   279,    -1,   281,    -1,   283,
     284,    -1,   286,    -1,   288,   289,   290,   291,   292,   293,
      -1,   295,   296,    -1,   298,   299,   300,   301,    -1,    -1,
     304,   305,    -1,   307,    -1,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,    -1,    -1,   321,    -1,   323,
     324,   325,    -1,   327,   328,   329,   330,   331,   332,    -1,
     334,   335,   336,   337,   338,    -1,    -1,   341,    -1,   343,
     344,   345,   346,   347,   348,   349,   350,    -1,   352,   353,
     354,    -1,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,    -1,   367,   368,    -1,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,    -1,   386,   387,   388,   389,   390,    -1,   392,   393,
     394,   395,    -1,   397,    -1,    -1,   400,   401,   402,    -1,
      -1,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,   417,   418,   419,   420,    -1,   422,   423,
      -1,   425,    -1,   427,   428,   429,   430,   431,    -1,   433,
     434,    -1,    -1,    -1,   438,   439,   440,   441,   442,    -1,
     444,   445,   446,   447,   448,   449,   450,   451,    -1,    -1,
     454,   455,   456,   457,   458,   459,    -1,    -1,   462,   463,
     464,   465,   466,   467,   468,    -1,   470,    -1,   472,    -1,
     474,   475,   476,   477,    -1,    -1,    -1,   481,    -1,    -1,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,   499,   500,   501,   502,   503,
     504,     3,    -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    21,
      22,    23,    24,    -1,    26,    27,    28,    29,    -1,    31,
      32,    33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      42,    43,    -1,    45,    46,    47,    -1,    49,    50,    51,
      52,    53,    -1,    55,    56,    -1,    58,    59,    60,    61,
      62,    63,    -1,    -1,    66,    67,    68,    69,    70,    -1,
      72,    73,    74,    75,    76,    -1,    -1,    -1,    80,    81,
      82,    83,    84,    85,    -1,    87,    88,    89,    -1,    91,
      92,    93,    94,    95,    -1,    -1,    -1,    99,   100,   101,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,    -1,   120,    -1,
     122,   123,   124,   125,   126,   127,    -1,   129,    -1,   131,
     132,   133,   134,    -1,    -1,   137,   138,   139,   140,   141,
      -1,    -1,    -1,   145,   146,   147,    -1,   149,   150,   151,
      -1,   153,   154,   155,   156,   157,   158,   159,   160,   161,
     162,   163,    -1,   165,    -1,   167,   168,   169,   170,    -1,
     172,    -1,   174,    -1,    -1,    -1,   178,   179,   180,    -1,
     182,    -1,   184,    -1,    -1,    -1,   188,   189,    -1,   191,
      -1,   193,   194,   195,   196,   197,   198,   199,    -1,   201,
     202,   203,   204,    -1,   206,   207,   208,   209,   210,   211,
      -1,   213,    -1,   215,   216,   217,   218,   219,   220,   221,
     222,    -1,   224,    -1,   226,    -1,    -1,   229,    -1,   231,
      -1,   233,   234,   235,   236,   237,    -1,    -1,   240,    -1,
     242,    -1,    -1,   245,   246,   247,    -1,    -1,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,    -1,   276,   277,   278,   279,    -1,   281,
      -1,   283,   284,    -1,   286,    -1,   288,   289,   290,   291,
     292,   293,    -1,   295,   296,    -1,   298,   299,   300,   301,
      -1,    -1,   304,   305,    -1,   307,    -1,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,    -1,    -1,   321,
      -1,   323,   324,   325,    -1,   327,   328,   329,   330,   331,
     332,    -1,   334,   335,   336,   337,   338,    -1,    -1,   341,
      -1,   343,   344,   345,   346,   347,   348,   349,   350,    -1,
     352,   353,   354,    -1,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,    -1,   367,   368,    -1,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,    -1,   386,   387,   388,   389,   390,    -1,
     392,   393,   394,   395,    -1,   397,    -1,    -1,   400,   401,
     402,    -1,    -1,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,   417,   418,   419,   420,    -1,
     422,   423,    -1,   425,    -1,   427,   428,   429,   430,   431,
      -1,   433,   434,    -1,    -1,    -1,   438,   439,   440,   441,
     442,    -1,   444,   445,   446,   447,   448,   449,   450,   451,
      -1,    -1,   454,   455,   456,   457,   458,   459,    -1,    -1,
     462,   463,   464,   465,   466,   467,   468,    -1,   470,    -1,
     472,    -1,   474,   475,   476,   477,    -1,    -1,    -1,   481,
      -1,    -1,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,   498,   499,   500,   501,
     502,   503,   504,     3,    -1,     5,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    21,    22,    23,    24,    -1,    26,    27,    28,    29,
      30,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    42,    43,    -1,    45,    46,    47,    -1,    49,
      50,    51,    52,    53,    -1,    55,    56,    -1,    58,    59,
      60,    61,    62,    63,    -1,    -1,    66,    67,    68,    69,
      70,    -1,    72,    73,    74,    75,    76,    -1,    -1,    -1,
      80,    81,    82,    83,    84,    85,    -1,    87,    88,    89,
      -1,    91,    92,    93,    94,    95,    -1,    -1,    -1,    99,
     100,   101,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,    -1,
     120,    -1,   122,   123,   124,   125,   126,   127,    -1,   129,
      -1,   131,   132,   133,   134,    -1,    -1,   137,   138,   139,
     140,   141,    -1,    -1,    -1,   145,   146,   147,    -1,   149,
     150,   151,    -1,   153,   154,   155,   156,   157,   158,   159,
     160,   161,   162,   163,    -1,   165,    -1,   167,   168,   169,
     170,    -1,   172,    -1,   174,    -1,    -1,    -1,   178,   179,
     180,    -1,   182,    -1,   184,    -1,    -1,    -1,   188,   189,
      -1,   191,    -1,   193,   194,   195,   196,   197,   198,   199,
      -1,   201,   202,   203,   204,    -1,   206,   207,   208,   209,
     210,   211,    -1,   213,    -1,   215,   216,   217,   218,   219,
     220,   221,   222,    -1,   224,    -1,   226,    -1,    -1,   229,
      -1,   231,    -1,   233,   234,   235,   236,   237,    -1,    -1,
     240,    -1,   242,    -1,    -1,   245,   246,   247,    -1,    -1,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,    -1,   276,   277,   278,   279,
      -1,   281,    -1,   283,   284,    -1,   286,    -1,   288,   289,
     290,   291,   292,   293,    -1,   295,   296,    -1,    -1,   299,
     300,   301,    -1,    -1,   304,   305,    -1,   307,    -1,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,    -1,
      -1,   321,    -1,   323,   324,   325,    -1,   327,   328,   329,
     330,   331,   332,    -1,   334,   335,   336,   337,   338,    -1,
      -1,   341,    -1,   343,   344,   345,   346,   347,   348,   349,
     350,    -1,   352,   353,   354,    -1,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,    -1,   367,   368,    -1,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,    -1,   386,   387,   388,   389,
     390,    -1,   392,   393,   394,   395,    -1,   397,    -1,    -1,
     400,   401,   402,    -1,    -1,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,   417,   418,   419,
     420,    -1,   422,   423,    -1,   425,    -1,   427,   428,   429,
     430,   431,    -1,   433,   434,    -1,    -1,    -1,   438,   439,
     440,   441,   442,    -1,   444,   445,   446,   447,   448,   449,
     450,   451,    -1,    -1,   454,   455,   456,   457,   458,   459,
      -1,    -1,   462,   463,   464,   465,   466,   467,   468,    -1,
     470,    -1,   472,    -1,   474,   475,   476,   477,    -1,    -1,
      -1,   481,    -1,    -1,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,   498,   499,
     500,   501,   502,   503,   504,     3,     4,    -1,    -1,    -1,
      -1,     9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    21,    22,    23,    24,    -1,    26,    27,
      28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    42,    43,    -1,    45,    46,    47,
      -1,    49,    50,    51,    52,    53,    -1,    55,    56,    -1,
      58,    59,    60,    61,    62,    63,    -1,    -1,    66,    67,
      68,    69,    70,    -1,    72,    73,    74,    75,    76,    -1,
      -1,    -1,    80,    81,    82,    83,    84,    85,    -1,    87,
      88,    89,    -1,    91,    92,    93,    94,    95,    -1,    -1,
      -1,    99,   100,   101,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,    -1,   120,    -1,   122,   123,   124,   125,   126,   127,
      -1,   129,    -1,   131,   132,   133,   134,    -1,    -1,   137,
     138,   139,   140,   141,    -1,    -1,    -1,   145,   146,   147,
      -1,   149,   150,   151,    -1,   153,   154,   155,   156,   157,
     158,   159,   160,   161,   162,   163,    -1,   165,    -1,   167,
     168,   169,   170,    -1,   172,    -1,   174,    -1,    -1,    -1,
     178,   179,   180,    -1,   182,    -1,   184,    -1,    -1,    -1,
     188,   189,    -1,   191,    -1,   193,   194,   195,   196,   197,
     198,   199,    -1,   201,   202,   203,   204,    -1,   206,   207,
     208,   209,   210,   211,    -1,   213,    -1,   215,   216,   217,
     218,   219,   220,   221,   222,    -1,   224,    -1,   226,    -1,
      -1,   229,    -1,   231,    -1,   233,   234,   235,   236,   237,
      -1,    -1,   240,    -1,   242,    -1,    -1,   245,   246,   247,
      -1,    -1,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,    -1,   276,   277,
     278,   279,    -1,   281,    -1,   283,   284,    -1,   286,    -1,
     288,   289,   290,   291,   292,   293,    -1,   295,   296,    -1,
      -1,   299,   300,   301,    -1,    -1,   304,   305,    -1,   307,
      -1,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,    -1,    -1,   321,    -1,   323,   324,   325,    -1,   327,
     328,   329,   330,   331,   332,    -1,   334,   335,   336,   337,
     338,    -1,    -1,   341,    -1,   343,   344,   345,   346,   347,
     348,   349,   350,    -1,   352,   353,   354,    -1,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,    -1,   367,
     368,    -1,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,    -1,   386,   387,
     388,   389,   390,    -1,   392,   393,   394,   395,    -1,   397,
      -1,    -1,   400,   401,   402,    -1,    -1,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,   417,
     418,   419,   420,    -1,   422,   423,    -1,   425,    -1,   427,
     428,   429,   430,   431,    -1,   433,   434,    -1,    -1,    -1,
     438,   439,   440,   441,   442,    -1,   444,   445,   446,   447,
     448,   449,   450,   451,    -1,    -1,   454,   455,   456,   457,
     458,   459,    -1,    -1,   462,   463,   464,   465,   466,   467,
     468,    -1,   470,    -1,   472,    -1,   474,   475,   476,   477,
      -1,    -1,    -1,   481,    -1,    -1,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,   499,   500,   501,   502,   503,   504,     3,    -1,     5,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    21,    22,    23,    24,    -1,
      26,    27,    28,    29,    -1,    31,    32,    33,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    42,    43,    -1,    45,
      46,    47,    -1,    49,    50,    51,    52,    53,    -1,    55,
      56,    -1,    58,    59,    60,    61,    62,    63,    -1,    -1,
      66,    67,    68,    69,    70,    -1,    72,    73,    74,    75,
      76,    -1,    -1,    -1,    80,    81,    82,    83,    84,    85,
      -1,    87,    88,    89,    -1,    91,    92,    93,    94,    95,
      -1,    -1,    -1,    99,   100,   101,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,    -1,   120,    -1,   122,   123,   124,   125,
     126,   127,    -1,   129,    -1,   131,   132,   133,   134,    -1,
      -1,   137,   138,   139,   140,   141,    -1,    -1,    -1,   145,
     146,   147,    -1,   149,   150,   151,    -1,   153,   154,   155,
     156,   157,   158,   159,   160,   161,   162,   163,    -1,   165,
      -1,   167,   168,   169,   170,    -1,   172,    -1,   174,    -1,
      -1,    -1,   178,   179,   180,    -1,   182,    -1,   184,    -1,
      -1,    -1,   188,   189,    -1,   191,    -1,   193,   194,   195,
     196,   197,   198,   199,    -1,   201,   202,   203,   204,    -1,
     206,   207,   208,   209,   210,   211,    -1,   213,    -1,   215,
     216,   217,   218,   219,   220,   221,   222,    -1,   224,    -1,
     226,    -1,    -1,   229,    -1,   231,    -1,   233,   234,   235,
     236,   237,    -1,    -1,   240,    -1,   242,    -1,    -1,   245,
     246,   247,    -1,    -1,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,    -1,
     276,   277,   278,   279,    -1,   281,    -1,   283,   284,    -1,
     286,    -1,   288,   289,   290,   291,   292,   293,    -1,   295,
     296,    -1,    -1,   299,   300,   301,    -1,    -1,   304,   305,
      -1,   307,    -1,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,    -1,    -1,   321,    -1,   323,   324,   325,
      -1,   327,   328,   329,   330,   331,   332,    -1,   334,   335,
     336,   337,   338,    -1,    -1,   341,    -1,   343,   344,   345,
     346,   347,   348,   349,   350,    -1,   352,   353,   354,    -1,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
      -1,   367,   368,    -1,   370,   371,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,    -1,
     386,   387,   388,   389,   390,    -1,   392,   393,   394,   395,
      -1,   397,    -1,    -1,   400,   401,   402,    -1,    -1,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,   417,   418,   419,   420,    -1,   422,   423,   424,   425,
      -1,   427,   428,   429,   430,   431,    -1,   433,   434,    -1,
      -1,    -1,   438,   439,   440,   441,   442,    -1,   444,   445,
     446,   447,   448,   449,   450,   451,    -1,    -1,   454,   455,
     456,   457,   458,   459,    -1,    -1,   462,   463,   464,   465,
     466,   467,   468,    -1,   470,    -1,   472,    -1,   474,   475,
     476,   477,    -1,    -1,    -1,   481,    -1,    -1,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,   498,   499,   500,   501,   502,   503,   504,     3,
      -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    21,    22,    23,
      24,    -1,    26,    27,    28,    29,    -1,    31,    32,    33,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    42,    43,
      -1,    45,    46,    47,    -1,    49,    50,    51,    52,    53,
      -1,    55,    56,    -1,    58,    59,    60,    61,    62,    63,
      -1,    -1,    66,    67,    68,    69,    70,    -1,    72,    73,
      74,    75,    76,    -1,    -1,    -1,    80,    81,    82,    83,
      84,    85,    -1,    87,    88,    89,    -1,    91,    92,    93,
      94,    95,    -1,    -1,    -1,    99,   100,   101,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,    -1,   120,    -1,   122,   123,
     124,   125,   126,   127,    -1,   129,    -1,   131,   132,   133,
     134,    -1,    -1,   137,   138,   139,   140,   141,    -1,    -1,
      -1,   145,   146,   147,    -1,   149,   150,   151,    -1,   153,
     154,   155,   156,   157,   158,   159,   160,   161,   162,   163,
      -1,   165,    -1,   167,   168,   169,   170,    -1,   172,    -1,
     174,    -1,    -1,    -1,   178,   179,   180,    -1,   182,    -1,
     184,    -1,    -1,    -1,   188,   189,    -1,   191,    -1,   193,
     194,   195,   196,   197,   198,   199,    -1,   201,   202,   203,
     204,    -1,   206,   207,   208,   209,   210,   211,    -1,   213,
      -1,   215,   216,   217,   218,   219,   220,   221,   222,    -1,
     224,    -1,   226,    -1,    -1,   229,    -1,   231,    -1,   233,
     234,   235,   236,   237,    -1,    -1,   240,    -1,   242,    -1,
      -1,   245,   246,   247,    -1,    -1,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,    -1,   276,   277,   278,   279,    -1,   281,    -1,   283,
     284,    -1,   286,    -1,   288,   289,   290,   291,   292,   293,
      -1,   295,   296,    -1,    -1,   299,   300,   301,    -1,    -1,
     304,   305,    -1,   307,    -1,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,    -1,    -1,   321,    -1,   323,
     324,   325,    -1,   327,   328,   329,   330,   331,   332,    -1,
     334,   335,   336,   337,   338,    -1,    -1,   341,    -1,   343,
     344,   345,   346,   347,   348,   349,   350,    -1,   352,   353,
     354,    -1,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,    -1,   367,   368,    -1,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,    -1,   386,   387,   388,   389,   390,    -1,   392,   393,
     394,   395,    -1,   397,    -1,    -1,   400,   401,   402,    -1,
      -1,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,   417,   418,   419,   420,    -1,   422,   423,
      -1,   425,    -1,   427,   428,   429,   430,   431,    -1,   433,
     434,    -1,    -1,    -1,   438,   439,   440,   441,   442,    -1,
     444,   445,   446,   447,   448,   449,   450,   451,    -1,    -1,
     454,   455,   456,   457,   458,   459,    -1,    -1,   462,   463,
     464,   465,   466,   467,   468,    -1,   470,    -1,   472,    -1,
     474,   475,   476,   477,    -1,    -1,    -1,   481,    -1,    -1,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,   499,   500,   501,   502,   503,
     504,     3,    -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    21,
      22,    23,    24,    -1,    26,    27,    28,    29,    -1,    31,
      32,    33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      42,    43,    -1,    45,    46,    47,    -1,    49,    50,    51,
      52,    53,    -1,    55,    56,    -1,    58,    59,    60,    61,
      62,    63,    -1,    -1,    66,    67,    68,    69,    70,    -1,
      72,    73,    74,    75,    76,    -1,    -1,    -1,    80,    81,
      82,    83,    84,    85,    -1,    87,    88,    89,    -1,    91,
      92,    93,    94,    95,    -1,    -1,    -1,    99,   100,   101,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,    -1,   120,    -1,
     122,   123,   124,   125,   126,   127,    -1,   129,    -1,   131,
     132,   133,   134,    -1,    -1,   137,   138,   139,   140,   141,
      -1,    -1,    -1,   145,   146,   147,    -1,   149,   150,   151,
      -1,   153,   154,   155,   156,   157,   158,   159,   160,   161,
     162,   163,    -1,   165,    -1,   167,   168,   169,   170,    -1,
     172,    -1,   174,    -1,    -1,    -1,   178,   179,   180,    -1,
     182,    -1,   184,    -1,    -1,    -1,   188,   189,    -1,   191,
      -1,   193,   194,   195,   196,   197,   198,   199,    -1,   201,
     202,   203,   204,    -1,   206,   207,   208,   209,   210,   211,
      -1,   213,    -1,   215,   216,   217,   218,   219,   220,   221,
     222,    -1,   224,    -1,   226,    -1,    -1,   229,    -1,   231,
      -1,   233,   234,   235,   236,   237,    -1,    -1,   240,    -1,
     242,    -1,    -1,   245,   246,   247,    -1,    -1,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,    -1,   276,   277,   278,   279,    -1,   281,
      -1,   283,   284,    -1,   286,    -1,   288,   289,   290,   291,
     292,   293,    -1,   295,   296,    -1,    -1,   299,   300,   301,
      -1,    -1,   304,   305,    -1,   307,    -1,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,    -1,    -1,   321,
      -1,   323,   324,   325,    -1,   327,   328,   329,   330,   331,
     332,    -1,   334,   335,   336,   337,   338,    -1,    -1,   341,
      -1,   343,   344,   345,   346,   347,   348,   349,   350,    -1,
     352,   353,   354,    -1,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,    -1,   367,   368,    -1,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,    -1,   386,   387,   388,   389,   390,    -1,
     392,   393,   394,   395,    -1,   397,    -1,    -1,   400,   401,
     402,    -1,    -1,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,   417,   418,   419,   420,    -1,
     422,   423,    -1,   425,    -1,   427,   428,   429,   430,   431,
      -1,   433,   434,    -1,    -1,    -1,   438,   439,   440,   441,
     442,    -1,   444,   445,   446,   447,   448,   449,   450,   451,
      -1,    -1,   454,   455,   456,   457,   458,   459,    -1,    -1,
     462,   463,   464,   465,   466,   467,   468,    -1,   470,    -1,
     472,    -1,   474,   475,   476,   477,    -1,    -1,    -1,   481,
      -1,    -1,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,   498,   499,   500,   501,
     502,   503,   504,     3,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    21,    22,    23,    24,    -1,    26,    27,    28,    29,
      30,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    42,    43,    -1,    45,    46,    47,    -1,    49,
      50,    51,    52,    53,    -1,    55,    56,    -1,    58,    59,
      60,    61,    62,    63,    -1,    -1,    66,    67,    68,    69,
      70,    -1,    72,    73,    74,    75,    76,    -1,    -1,    -1,
      80,    81,    82,    83,    84,    85,    -1,    87,    88,    89,
      -1,    91,    92,    93,    94,    95,    -1,    -1,    -1,    99,
     100,   101,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,    -1,
     120,    -1,   122,   123,   124,   125,   126,   127,    -1,   129,
      -1,   131,   132,   133,   134,    -1,    -1,   137,   138,   139,
     140,   141,    -1,    -1,    -1,   145,   146,   147,    -1,   149,
     150,   151,    -1,   153,   154,   155,   156,   157,   158,   159,
     160,   161,   162,   163,    -1,   165,    -1,   167,   168,   169,
     170,    -1,   172,    -1,   174,    -1,    -1,    -1,   178,   179,
     180,    -1,   182,    -1,   184,    -1,    -1,    -1,   188,   189,
      -1,   191,    -1,   193,   194,   195,   196,   197,   198,   199,
      -1,   201,   202,   203,   204,    -1,   206,   207,   208,   209,
     210,   211,    -1,   213,    -1,   215,   216,   217,   218,   219,
     220,   221,   222,    -1,   224,    -1,   226,    -1,    -1,   229,
      -1,   231,    -1,   233,   234,   235,   236,   237,    -1,    -1,
     240,    -1,   242,    -1,    -1,   245,   246,   247,    -1,    -1,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,    -1,   276,   277,   278,   279,
      -1,   281,    -1,   283,   284,    -1,   286,    -1,   288,   289,
     290,   291,   292,   293,    -1,   295,   296,    -1,    -1,   299,
     300,   301,    -1,    -1,   304,   305,    -1,   307,    -1,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,    -1,
      -1,   321,    -1,   323,   324,   325,    -1,   327,   328,   329,
     330,   331,   332,    -1,   334,   335,   336,   337,   338,    -1,
      -1,   341,    -1,   343,   344,   345,   346,   347,   348,   349,
     350,    -1,   352,   353,   354,    -1,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,    -1,   367,   368,    -1,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,    -1,   386,   387,   388,   389,
     390,    -1,   392,   393,   394,   395,    -1,   397,    -1,    -1,
     400,   401,   402,    -1,    -1,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,   417,   418,   419,
     420,    -1,   422,   423,    -1,   425,    -1,   427,   428,   429,
     430,   431,    -1,   433,   434,    -1,    -1,    -1,   438,   439,
     440,   441,   442,    -1,   444,   445,   446,   447,   448,   449,
     450,   451,    -1,    -1,   454,   455,   456,   457,   458,   459,
      -1,    -1,   462,   463,   464,   465,   466,   467,   468,    -1,
     470,    -1,   472,    -1,   474,   475,   476,   477,    -1,    -1,
      -1,   481,    -1,    -1,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,   498,   499,
     500,   501,   502,   503,   504,     3,    -1,     5,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    21,    22,    23,    24,    -1,    26,    27,
      28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    42,    43,    -1,    45,    46,    47,
      -1,    49,    50,    51,    52,    53,    -1,    55,    56,    -1,
      58,    59,    60,    61,    62,    63,    -1,    -1,    66,    67,
      68,    69,    70,    -1,    72,    73,    74,    75,    76,    -1,
      -1,    -1,    80,    81,    82,    83,    84,    85,    -1,    87,
      88,    89,    -1,    91,    92,    93,    94,    95,    -1,    -1,
      -1,    99,   100,   101,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,    -1,   120,    -1,   122,   123,   124,   125,   126,   127,
      -1,   129,    -1,   131,   132,   133,   134,    -1,    -1,   137,
     138,   139,   140,   141,    -1,    -1,    -1,   145,   146,   147,
      -1,   149,   150,   151,    -1,   153,   154,   155,   156,   157,
     158,   159,   160,   161,   162,   163,    -1,   165,    -1,   167,
     168,   169,   170,    -1,   172,    -1,   174,    -1,    -1,    -1,
     178,   179,   180,    -1,   182,    -1,   184,    -1,    -1,    -1,
     188,   189,    -1,   191,    -1,   193,   194,   195,   196,   197,
     198,   199,    -1,   201,   202,   203,   204,    -1,   206,   207,
     208,   209,   210,   211,    -1,   213,    -1,   215,   216,   217,
     218,   219,   220,   221,   222,    -1,   224,    -1,   226,    -1,
      -1,   229,    -1,   231,    -1,   233,   234,   235,   236,   237,
      -1,    -1,   240,    -1,   242,    -1,    -1,   245,   246,   247,
      -1,    -1,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,    -1,   276,   277,
     278,   279,    -1,   281,    -1,   283,   284,    -1,   286,    -1,
     288,   289,   290,   291,   292,   293,    -1,   295,   296,    -1,
      -1,   299,   300,   301,    -1,    -1,   304,   305,    -1,   307,
      -1,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,    -1,    -1,   321,    -1,   323,   324,   325,    -1,   327,
     328,   329,   330,   331,   332,    -1,   334,   335,   336,   337,
     338,    -1,    -1,   341,    -1,   343,   344,   345,   346,   347,
     348,   349,   350,    -1,   352,   353,   354,    -1,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,    -1,   367,
     368,    -1,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,    -1,   386,   387,
     388,   389,   390,    -1,   392,   393,   394,   395,    -1,   397,
      -1,    -1,   400,   401,   402,    -1,    -1,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,   417,
     418,   419,   420,    -1,   422,   423,    -1,   425,    -1,   427,
     428,   429,   430,   431,    -1,   433,   434,    -1,    -1,    -1,
     438,   439,   440,   441,   442,    -1,   444,   445,   446,   447,
     448,   449,   450,   451,    -1,    -1,   454,   455,   456,   457,
     458,   459,    -1,    -1,   462,   463,   464,   465,   466,   467,
     468,    -1,   470,    -1,   472,    -1,   474,   475,   476,   477,
      -1,    -1,    -1,   481,    -1,    -1,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,   499,   500,   501,   502,   503,   504,     3,    -1,     5,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    21,    22,    23,    24,    -1,
      26,    27,    28,    29,    -1,    31,    32,    33,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    42,    43,    -1,    45,
      46,    47,    -1,    49,    50,    51,    52,    53,    -1,    55,
      56,    -1,    58,    59,    60,    61,    62,    63,    -1,    -1,
      66,    67,    68,    69,    70,    -1,    72,    73,    74,    75,
      76,    -1,    -1,    -1,    80,    81,    82,    83,    84,    85,
      -1,    87,    88,    89,    -1,    91,    92,    93,    94,    95,
      -1,    -1,    -1,    99,   100,   101,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,    -1,   120,    -1,   122,   123,   124,   125,
     126,   127,    -1,   129,    -1,   131,   132,   133,   134,    -1,
      -1,   137,   138,   139,   140,   141,    -1,    -1,    -1,   145,
     146,   147,    -1,   149,   150,   151,    -1,   153,   154,   155,
     156,   157,   158,   159,   160,   161,   162,   163,    -1,   165,
      -1,   167,   168,   169,   170,    -1,   172,    -1,   174,    -1,
      -1,    -1,   178,   179,   180,    -1,   182,    -1,   184,    -1,
      -1,    -1,   188,   189,    -1,   191,    -1,   193,   194,   195,
     196,   197,   198,   199,    -1,   201,   202,   203,   204,    -1,
     206,   207,   208,   209,   210,   211,    -1,   213,    -1,   215,
     216,   217,   218,   219,   220,   221,   222,    -1,   224,    -1,
     226,    -1,    -1,   229,    -1,   231,    -1,   233,   234,   235,
     236,   237,    -1,    -1,   240,    -1,   242,    -1,    -1,   245,
     246,   247,    -1,    -1,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,    -1,
     276,   277,   278,   279,    -1,   281,    -1,   283,   284,    -1,
     286,    -1,   288,   289,   290,   291,   292,   293,    -1,   295,
     296,    -1,    -1,   299,   300,   301,    -1,    -1,   304,   305,
      -1,   307,    -1,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,    -1,    -1,   321,    -1,   323,   324,   325,
      -1,   327,   328,   329,   330,   331,   332,    -1,   334,   335,
     336,   337,   338,    -1,    -1,   341,    -1,   343,   344,   345,
     346,   347,   348,   349,   350,    -1,   352,   353,   354,    -1,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
      -1,   367,   368,    -1,   370,   371,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,    -1,
     386,   387,   388,   389,   390,    -1,   392,   393,   394,   395,
      -1,   397,    -1,    -1,   400,   401,   402,    -1,    -1,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,   417,   418,   419,   420,    -1,   422,   423,    -1,   425,
      -1,   427,   428,   429,   430,   431,    -1,   433,   434,    -1,
      -1,    -1,   438,   439,   440,   441,   442,    -1,   444,   445,
     446,   447,   448,   449,   450,   451,    -1,    -1,   454,   455,
     456,   457,   458,   459,    -1,    -1,   462,   463,   464,   465,
     466,   467,   468,    -1,   470,    -1,   472,    -1,   474,   475,
     476,   477,    -1,    -1,    -1,   481,    -1,    -1,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,   498,   499,   500,   501,   502,   503,   504,     3,
      -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    21,    22,    23,
      24,    -1,    26,    27,    28,    29,    -1,    31,    32,    33,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    42,    43,
      -1,    45,    46,    47,    -1,    49,    50,    51,    52,    53,
      -1,    55,    56,    -1,    58,    59,    60,    61,    62,    63,
      -1,    -1,    66,    67,    68,    69,    70,    -1,    72,    73,
      74,    75,    76,    -1,    -1,    -1,    80,    81,    82,    83,
      84,    85,    -1,    87,    88,    89,    -1,    91,    92,    93,
      94,    95,    -1,    -1,    -1,    99,   100,   101,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,    -1,   120,    -1,   122,   123,
     124,   125,   126,   127,    -1,   129,    -1,   131,   132,   133,
     134,    -1,    -1,   137,   138,   139,   140,   141,    -1,    -1,
      -1,   145,   146,   147,    -1,   149,   150,   151,    -1,   153,
     154,   155,   156,   157,   158,   159,   160,   161,   162,   163,
      -1,   165,    -1,   167,   168,   169,   170,    -1,   172,    -1,
     174,    -1,    -1,    -1,   178,   179,   180,    -1,   182,    -1,
     184,    -1,    -1,    -1,   188,   189,    -1,   191,    -1,   193,
     194,   195,   196,   197,   198,   199,    -1,   201,   202,   203,
     204,    -1,   206,   207,   208,   209,   210,   211,    -1,   213,
      -1,   215,   216,   217,   218,   219,   220,   221,   222,    -1,
     224,    -1,   226,    -1,    -1,   229,    -1,   231,    -1,   233,
     234,   235,   236,   237,    -1,    -1,   240,    -1,   242,    -1,
      -1,   245,   246,   247,    -1,    -1,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,    -1,   276,   277,   278,   279,    -1,   281,    -1,   283,
     284,    -1,   286,    -1,   288,   289,   290,   291,   292,   293,
      -1,   295,   296,    -1,    -1,   299,   300,   301,    -1,    -1,
     304,   305,    -1,   307,    -1,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,    -1,    -1,   321,    -1,   323,
     324,   325,    -1,   327,   328,   329,   330,   331,   332,    -1,
     334,   335,   336,   337,   338,    -1,    -1,   341,    -1,   343,
     344,   345,   346,   347,   348,   349,   350,    -1,   352,   353,
     354,    -1,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,    -1,   367,   368,    -1,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,    -1,   386,   387,   388,   389,   390,    -1,   392,   393,
     394,   395,    -1,   397,    -1,    -1,   400,   401,   402,    -1,
      -1,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,   417,   418,   419,   420,    -1,   422,   423,
      -1,   425,    -1,   427,   428,   429,   430,   431,    -1,   433,
     434,    -1,    -1,    -1,   438,   439,   440,   441,   442,    -1,
     444,   445,   446,   447,   448,   449,   450,   451,    -1,    -1,
     454,   455,   456,   457,   458,   459,    -1,    -1,   462,   463,
     464,   465,   466,   467,   468,    -1,   470,    -1,   472,    -1,
     474,   475,   476,   477,    -1,    -1,    -1,   481,    -1,    -1,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,   499,   500,   501,   502,   503,
     504,     3,    -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    21,
      22,    23,    24,    -1,    26,    27,    28,    29,    -1,    31,
      32,    33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      42,    43,    -1,    45,    46,    47,    -1,    49,    50,    51,
      52,    53,    -1,    55,    56,    -1,    58,    59,    60,    61,
      62,    63,    -1,    -1,    66,    67,    68,    69,    70,    -1,
      72,    73,    74,    75,    76,    -1,    -1,    -1,    80,    81,
      82,    83,    84,    85,    -1,    87,    88,    89,    -1,    91,
      92,    93,    94,    95,    -1,    -1,    -1,    99,   100,   101,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,    -1,   120,    -1,
     122,   123,   124,   125,   126,   127,    -1,   129,    -1,   131,
     132,   133,   134,    -1,    -1,   137,   138,   139,   140,   141,
      -1,    -1,    -1,   145,   146,   147,    -1,   149,   150,   151,
      -1,   153,   154,   155,   156,   157,   158,   159,   160,   161,
     162,   163,    -1,   165,    -1,   167,   168,   169,   170,    -1,
     172,    -1,   174,    -1,    -1,    -1,   178,   179,   180,    -1,
     182,    -1,   184,    -1,    -1,    -1,   188,   189,    -1,   191,
      -1,   193,   194,   195,   196,   197,   198,   199,    -1,   201,
     202,   203,   204,    -1,   206,   207,   208,   209,   210,   211,
      -1,   213,    -1,   215,   216,   217,   218,   219,   220,   221,
     222,    -1,   224,    -1,   226,    -1,    -1,   229,    -1,   231,
      -1,   233,   234,   235,   236,   237,    -1,    -1,   240,    -1,
     242,    -1,    -1,   245,   246,   247,    -1,    -1,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,    -1,   276,   277,   278,   279,    -1,   281,
      -1,   283,   284,    -1,   286,    -1,   288,   289,   290,   291,
     292,   293,    -1,   295,   296,    -1,    -1,   299,   300,   301,
      -1,    -1,   304,   305,    -1,   307,    -1,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,    -1,    -1,   321,
      -1,   323,   324,   325,    -1,   327,   328,   329,   330,   331,
     332,    -1,   334,   335,   336,   337,   338,    -1,    -1,   341,
      -1,   343,   344,   345,   346,   347,   348,   349,   350,    -1,
     352,   353,   354,    -1,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,    -1,   367,   368,    -1,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,    -1,   386,   387,   388,   389,   390,    -1,
     392,   393,   394,   395,    -1,   397,    -1,    -1,   400,   401,
     402,    -1,    -1,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,   417,   418,   419,   420,    -1,
     422,   423,    -1,   425,    -1,   427,   428,   429,   430,   431,
      -1,   433,   434,    -1,    -1,    -1,   438,   439,   440,   441,
     442,    -1,   444,   445,   446,   447,   448,   449,   450,   451,
      -1,    -1,   454,   455,   456,   457,   458,   459,    -1,    -1,
     462,   463,   464,   465,   466,   467,   468,    -1,   470,    -1,
     472,    -1,   474,   475,   476,   477,    -1,    -1,    -1,   481,
      -1,    -1,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,   498,   499,   500,   501,
     502,   503,   504,     3,    -1,     5,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    21,    22,    23,    24,    -1,    26,    27,    28,    29,
      -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    42,    43,    -1,    45,    46,    47,    -1,    49,
      50,    51,    52,    53,    -1,    55,    56,    -1,    58,    59,
      60,    61,    62,    63,    -1,    -1,    66,    67,    68,    69,
      70,    -1,    72,    73,    74,    75,    76,    -1,    -1,    -1,
      80,    81,    82,    83,    84,    85,    -1,    87,    88,    89,
      -1,    91,    92,    93,    94,    95,    -1,    -1,    -1,    99,
     100,   101,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,    -1,
     120,    -1,   122,   123,   124,   125,   126,   127,    -1,   129,
      -1,   131,   132,   133,   134,    -1,    -1,   137,   138,   139,
     140,   141,    -1,    -1,    -1,   145,   146,   147,    -1,   149,
     150,   151,    -1,   153,   154,   155,   156,   157,   158,   159,
     160,   161,   162,   163,    -1,   165,    -1,   167,   168,   169,
     170,    -1,   172,    -1,   174,    -1,    -1,    -1,   178,   179,
     180,    -1,   182,    -1,   184,    -1,    -1,    -1,   188,   189,
      -1,   191,    -1,   193,   194,   195,   196,   197,   198,   199,
      -1,   201,   202,   203,   204,    -1,   206,   207,   208,   209,
     210,   211,    -1,   213,    -1,   215,   216,   217,   218,   219,
     220,   221,   222,    -1,   224,    -1,   226,    -1,    -1,   229,
      -1,   231,    -1,   233,   234,   235,   236,   237,    -1,    -1,
     240,    -1,   242,    -1,    -1,   245,   246,   247,    -1,    -1,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,    -1,   276,   277,   278,   279,
      -1,   281,    -1,   283,   284,    -1,   286,    -1,   288,   289,
     290,   291,   292,   293,    -1,   295,   296,    -1,    -1,   299,
     300,   301,    -1,    -1,   304,   305,    -1,   307,    -1,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,    -1,
      -1,   321,    -1,   323,   324,   325,    -1,   327,   328,   329,
     330,   331,   332,    -1,   334,   335,   336,   337,   338,    -1,
      -1,   341,    -1,   343,   344,   345,   346,   347,   348,   349,
     350,    -1,   352,   353,   354,    -1,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,    -1,   367,   368,    -1,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,    -1,   386,   387,   388,   389,
     390,    -1,   392,   393,   394,   395,    -1,   397,    -1,    -1,
     400,   401,   402,    -1,    -1,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,   417,   418,   419,
     420,    -1,   422,   423,    -1,   425,    -1,   427,   428,   429,
     430,   431,    -1,   433,   434,    -1,    -1,    -1,   438,   439,
     440,   441,   442,    -1,   444,   445,   446,   447,   448,   449,
     450,   451,    -1,    -1,   454,   455,   456,   457,   458,   459,
      -1,    -1,   462,   463,   464,   465,   466,   467,   468,    -1,
     470,    -1,   472,    -1,   474,   475,   476,   477,    -1,    -1,
      -1,   481,    -1,    -1,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,   498,   499,
     500,   501,   502,   503,   504,     3,    -1,     5,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    21,    22,    23,    24,    -1,    26,    27,
      28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    42,    43,    -1,    45,    46,    47,
      -1,    49,    50,    51,    52,    53,    -1,    55,    56,    -1,
      58,    59,    60,    61,    62,    63,    -1,    -1,    66,    67,
      68,    69,    70,    -1,    72,    73,    74,    75,    76,    -1,
      -1,    -1,    80,    81,    82,    83,    84,    85,    -1,    87,
      88,    89,    -1,    91,    92,    93,    94,    95,    -1,    -1,
      -1,    99,   100,   101,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,    -1,   120,    -1,   122,   123,   124,   125,   126,   127,
      -1,   129,    -1,   131,   132,   133,   134,    -1,    -1,   137,
     138,   139,   140,   141,    -1,    -1,    -1,   145,   146,   147,
      -1,   149,   150,   151,    -1,   153,   154,   155,   156,   157,
     158,   159,   160,   161,   162,   163,    -1,   165,    -1,   167,
     168,   169,   170,    -1,   172,    -1,   174,    -1,    -1,    -1,
     178,   179,   180,    -1,   182,    -1,   184,    -1,    -1,    -1,
     188,   189,    -1,   191,    -1,   193,   194,   195,   196,   197,
     198,   199,    -1,   201,   202,   203,   204,    -1,   206,   207,
     208,   209,   210,   211,    -1,   213,    -1,   215,   216,   217,
     218,   219,   220,   221,   222,    -1,   224,    -1,   226,    -1,
      -1,   229,    -1,   231,    -1,   233,   234,   235,   236,   237,
      -1,    -1,   240,    -1,   242,    -1,    -1,   245,   246,   247,
      -1,    -1,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,    -1,   276,   277,
     278,   279,    -1,   281,    -1,   283,   284,    -1,   286,    -1,
     288,   289,   290,   291,   292,   293,    -1,   295,   296,    -1,
      -1,   299,   300,   301,    -1,    -1,   304,   305,    -1,   307,
      -1,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,    -1,    -1,   321,    -1,   323,   324,   325,    -1,   327,
     328,   329,   330,   331,   332,    -1,   334,   335,   336,   337,
     338,    -1,    -1,   341,    -1,   343,   344,   345,   346,   347,
     348,   349,   350,    -1,   352,   353,   354,    -1,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,    -1,   367,
     368,    -1,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,    -1,   386,   387,
     388,   389,   390,    -1,   392,   393,   394,   395,    -1,   397,
      -1,    -1,   400,   401,   402,    -1,    -1,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,   417,
     418,   419,   420,    -1,   422,   423,    -1,   425,    -1,   427,
     428,   429,   430,   431,    -1,   433,   434,    -1,    -1,    -1,
     438,   439,   440,   441,   442,    -1,   444,   445,   446,   447,
     448,   449,   450,   451,    -1,    -1,   454,   455,   456,   457,
     458,   459,    -1,    -1,   462,   463,   464,   465,   466,   467,
     468,    -1,   470,    -1,   472,    -1,   474,   475,   476,   477,
      -1,    -1,    -1,   481,    -1,    -1,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,   499,   500,   501,   502,   503,   504,     3,    -1,     5,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    21,    22,    23,    24,    -1,
      26,    27,    28,    29,    -1,    31,    32,    33,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    42,    43,    -1,    45,
      46,    47,    -1,    49,    50,    51,    52,    53,    -1,    55,
      56,    -1,    58,    59,    60,    61,    62,    63,    -1,    -1,
      66,    67,    68,    69,    70,    -1,    72,    73,    74,    75,
      76,    -1,    -1,    -1,    80,    81,    82,    83,    84,    85,
      -1,    87,    88,    89,    -1,    91,    92,    93,    94,    95,
      -1,    -1,    -1,    99,   100,   101,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,    -1,   120,    -1,   122,   123,   124,   125,
     126,   127,    -1,   129,    -1,   131,   132,   133,   134,    -1,
      -1,   137,   138,   139,   140,   141,    -1,    -1,    -1,   145,
     146,   147,    -1,   149,   150,   151,    -1,   153,   154,   155,
     156,   157,   158,   159,   160,   161,   162,   163,    -1,   165,
      -1,   167,   168,   169,   170,    -1,   172,    -1,   174,    -1,
      -1,    -1,   178,   179,   180,    -1,   182,    -1,   184,    -1,
      -1,    -1,   188,   189,    -1,   191,    -1,   193,   194,   195,
     196,   197,   198,   199,    -1,   201,   202,   203,   204,    -1,
     206,   207,   208,   209,   210,   211,    -1,   213,    -1,   215,
     216,   217,   218,   219,   220,   221,   222,    -1,   224,    -1,
     226,    -1,    -1,   229,    -1,   231,    -1,   233,   234,   235,
     236,   237,    -1,    -1,   240,    -1,   242,    -1,    -1,   245,
     246,   247,    -1,    -1,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,    -1,
     276,   277,   278,   279,    -1,   281,    -1,   283,   284,    -1,
     286,    -1,   288,   289,   290,   291,   292,   293,    -1,   295,
     296,    -1,    -1,   299,   300,   301,    -1,    -1,   304,   305,
      -1,   307,    -1,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,    -1,    -1,   321,    -1,   323,   324,   325,
      -1,   327,   328,   329,   330,   331,   332,    -1,   334,   335,
     336,   337,   338,    -1,    -1,   341,    -1,   343,   344,   345,
     346,   347,   348,   349,   350,    -1,   352,   353,   354,    -1,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
      -1,   367,   368,    -1,   370,   371,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,    -1,
     386,   387,   388,   389,   390,    -1,   392,   393,   394,   395,
      -1,   397,    -1,    -1,   400,   401,   402,    -1,    -1,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,   417,   418,   419,   420,    -1,   422,   423,    -1,   425,
      -1,   427,   428,   429,   430,   431,    -1,   433,   434,    -1,
      -1,    -1,   438,   439,   440,   441,   442,    -1,   444,   445,
     446,   447,   448,   449,   450,   451,    -1,    -1,   454,   455,
     456,   457,   458,   459,    -1,    -1,   462,   463,   464,   465,
     466,   467,   468,    -1,   470,    -1,   472,    -1,   474,   475,
     476,   477,    -1,    -1,    -1,   481,    -1,    -1,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,   498,   499,   500,   501,   502,   503,   504,     3,
      -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    21,    22,    23,
      24,    -1,    26,    27,    28,    29,    -1,    31,    32,    33,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    42,    43,
      -1,    45,    46,    47,    -1,    49,    50,    51,    52,    53,
      -1,    55,    56,    -1,    58,    59,    60,    61,    62,    63,
      -1,    -1,    66,    67,    68,    69,    70,    -1,    72,    73,
      74,    75,    76,    -1,    -1,    -1,    80,    81,    82,    83,
      84,    85,    -1,    87,    88,    89,    -1,    91,    92,    93,
      94,    95,    -1,    -1,    -1,    99,   100,   101,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,    -1,   120,    -1,   122,   123,
     124,   125,   126,   127,    -1,   129,    -1,   131,   132,   133,
     134,    -1,    -1,   137,   138,   139,   140,   141,    -1,    -1,
      -1,   145,   146,   147,    -1,   149,   150,   151,    -1,   153,
     154,   155,   156,   157,   158,   159,   160,   161,   162,   163,
      -1,   165,    -1,   167,   168,   169,   170,    -1,   172,    -1,
     174,    -1,    -1,    -1,   178,   179,   180,    -1,   182,    -1,
     184,    -1,    -1,    -1,   188,   189,    -1,   191,    -1,   193,
     194,   195,   196,   197,   198,   199,    -1,   201,   202,   203,
     204,    -1,   206,   207,   208,   209,   210,   211,    -1,   213,
      -1,   215,   216,   217,   218,   219,   220,   221,   222,    -1,
     224,    -1,   226,    -1,    -1,   229,    -1,   231,    -1,   233,
     234,   235,   236,   237,    -1,    -1,   240,    -1,   242,    -1,
      -1,   245,   246,   247,    -1,    -1,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,    -1,   276,   277,   278,   279,    -1,   281,    -1,   283,
     284,    -1,   286,    -1,   288,   289,   290,   291,   292,   293,
      -1,   295,   296,    -1,    -1,   299,   300,   301,    -1,    -1,
     304,   305,    -1,   307,    -1,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,    -1,    -1,   321,    -1,   323,
     324,   325,    -1,   327,   328,   329,   330,   331,   332,    -1,
     334,   335,   336,   337,   338,    -1,    -1,   341,    -1,   343,
     344,   345,   346,   347,   348,   349,   350,    -1,   352,   353,
     354,    -1,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,    -1,   367,   368,    -1,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,    -1,   386,   387,   388,   389,   390,    -1,   392,   393,
     394,   395,    -1,   397,    -1,    -1,   400,   401,   402,    -1,
      -1,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,   417,   418,   419,   420,    -1,   422,   423,
      -1,   425,    -1,   427,   428,   429,   430,   431,    -1,   433,
     434,    -1,    -1,    -1,   438,   439,   440,   441,   442,    -1,
     444,   445,   446,   447,   448,   449,   450,   451,    -1,    -1,
     454,   455,   456,   457,   458,   459,    -1,    -1,   462,   463,
     464,   465,   466,   467,   468,    -1,   470,    -1,   472,    -1,
     474,   475,   476,   477,    -1,    -1,    -1,   481,    -1,    -1,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,   499,   500,   501,   502,   503,
     504,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    21,
      22,    23,    24,    -1,    26,    27,    28,    29,    -1,    31,
      32,    33,    -1,    -1,    -1,    -1,    -1,    -1,    40,    -1,
      42,    43,    -1,    45,    46,    47,    -1,    49,    50,    51,
      52,    53,    -1,    55,    56,    -1,    58,    59,    60,    61,
      62,    63,    -1,    -1,    66,    67,    68,    69,    70,    -1,
      72,    73,    74,    75,    76,    -1,    -1,    -1,    80,    81,
      82,    83,    84,    85,    -1,    87,    88,    89,    -1,    91,
      92,    93,    94,    95,    -1,    -1,    -1,    99,   100,   101,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,    -1,   120,    -1,
     122,   123,   124,   125,   126,   127,    -1,   129,    -1,   131,
     132,   133,   134,    -1,    -1,   137,   138,   139,   140,   141,
      -1,    -1,    -1,   145,   146,   147,    -1,   149,   150,   151,
      -1,   153,   154,   155,   156,   157,   158,   159,   160,   161,
     162,   163,    -1,   165,    -1,   167,   168,   169,   170,    -1,
     172,    -1,   174,    -1,    -1,    -1,   178,   179,   180,    -1,
     182,    -1,   184,    -1,    -1,    -1,   188,   189,    -1,   191,
      -1,   193,   194,   195,   196,   197,   198,   199,    -1,   201,
     202,   203,   204,    -1,   206,   207,   208,   209,   210,   211,
      -1,   213,    -1,   215,   216,   217,   218,   219,   220,   221,
     222,    -1,   224,    -1,   226,    -1,    -1,   229,    -1,   231,
      -1,   233,   234,   235,   236,   237,    -1,    -1,   240,    -1,
     242,    -1,    -1,   245,   246,   247,    -1,    -1,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,    -1,   276,   277,   278,   279,    -1,   281,
      -1,   283,   284,    -1,   286,    -1,   288,   289,   290,   291,
     292,   293,    -1,   295,   296,    -1,    -1,   299,   300,   301,
      -1,    -1,   304,   305,    -1,   307,    -1,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,    -1,    -1,   321,
      -1,   323,   324,   325,    -1,   327,   328,   329,   330,   331,
     332,    -1,   334,   335,   336,   337,   338,    -1,    -1,   341,
      -1,   343,   344,   345,   346,   347,   348,   349,   350,    -1,
     352,   353,   354,    -1,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,    -1,   367,   368,    -1,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,    -1,   386,   387,   388,   389,   390,    -1,
     392,   393,   394,   395,    -1,   397,    -1,    -1,   400,   401,
     402,    -1,    -1,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,   417,   418,   419,   420,    -1,
     422,   423,    -1,   425,    -1,   427,   428,   429,   430,   431,
      -1,   433,   434,    -1,    -1,    -1,   438,   439,   440,   441,
     442,    -1,   444,   445,   446,   447,   448,   449,   450,   451,
      -1,    -1,   454,   455,   456,   457,   458,   459,    -1,    -1,
     462,   463,   464,   465,   466,   467,   468,    -1,   470,    -1,
     472,    -1,   474,   475,   476,   477,    -1,    -1,    -1,   481,
      -1,    -1,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,   498,   499,   500,   501,
     502,   503,   504,     3,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    21,    22,    23,    24,    -1,    26,    27,    28,    29,
      -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,    -1,
      40,    -1,    42,    43,    -1,    45,    46,    47,    -1,    49,
      50,    51,    52,    53,    -1,    55,    56,    -1,    58,    59,
      60,    61,    62,    63,    -1,    -1,    66,    67,    68,    69,
      70,    -1,    72,    73,    74,    75,    76,    -1,    -1,    -1,
      80,    81,    82,    83,    84,    85,    -1,    87,    88,    89,
      -1,    91,    92,    93,    94,    95,    -1,    -1,    -1,    99,
     100,   101,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,    -1,
     120,    -1,   122,   123,   124,   125,   126,   127,    -1,   129,
      -1,   131,   132,   133,   134,    -1,    -1,   137,   138,   139,
     140,   141,    -1,    -1,    -1,   145,   146,   147,    -1,   149,
     150,   151,    -1,   153,   154,   155,   156,   157,   158,   159,
     160,   161,   162,   163,    -1,   165,    -1,   167,   168,   169,
     170,    -1,   172,    -1,   174,    -1,    -1,    -1,   178,   179,
     180,    -1,   182,    -1,   184,    -1,    -1,    -1,   188,   189,
      -1,   191,    -1,   193,   194,   195,   196,   197,   198,   199,
      -1,   201,   202,   203,   204,    -1,   206,   207,   208,   209,
     210,   211,    -1,   213,    -1,   215,   216,   217,   218,   219,
     220,   221,   222,    -1,   224,    -1,   226,    -1,    -1,   229,
      -1,   231,    -1,   233,   234,   235,   236,   237,    -1,    -1,
     240,    -1,   242,    -1,    -1,   245,   246,   247,    -1,    -1,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,    -1,   276,   277,   278,   279,
      -1,   281,    -1,   283,   284,    -1,   286,    -1,   288,   289,
     290,   291,   292,   293,    -1,   295,   296,    -1,    -1,   299,
     300,   301,    -1,    -1,   304,   305,    -1,   307,    -1,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,    -1,
      -1,   321,    -1,   323,   324,   325,    -1,   327,   328,   329,
     330,   331,   332,    -1,   334,   335,   336,   337,   338,    -1,
      -1,   341,    -1,   343,   344,   345,   346,   347,   348,   349,
     350,    -1,   352,   353,   354,    -1,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,    -1,   367,   368,    -1,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,    -1,   386,   387,   388,   389,
     390,    -1,   392,   393,   394,   395,    -1,   397,    -1,    -1,
     400,   401,   402,    -1,    -1,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,   417,   418,   419,
     420,    -1,   422,   423,    -1,   425,    -1,   427,   428,   429,
     430,   431,    -1,   433,   434,    -1,    -1,    -1,   438,   439,
     440,   441,   442,    -1,   444,   445,   446,   447,   448,   449,
     450,   451,    -1,    -1,   454,   455,   456,   457,   458,   459,
      -1,    -1,   462,   463,   464,   465,   466,   467,   468,    -1,
     470,    -1,   472,    -1,   474,   475,   476,   477,    -1,    -1,
      -1,   481,    -1,    -1,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,   498,   499,
     500,   501,   502,   503,   504,     3,    -1,     5,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    21,    22,    23,    24,    -1,    26,    27,
      28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    42,    43,    -1,    45,    46,    47,
      -1,    49,    50,    51,    52,    53,    -1,    55,    56,    -1,
      58,    59,    60,    61,    62,    63,    -1,    -1,    66,    67,
      68,    69,    70,    -1,    72,    73,    74,    75,    76,    -1,
      -1,    -1,    80,    81,    82,    83,    84,    85,    -1,    87,
      88,    89,    -1,    91,    92,    93,    94,    95,    -1,    -1,
      -1,    99,   100,   101,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,    -1,   120,    -1,   122,   123,   124,   125,   126,   127,
      -1,   129,    -1,   131,   132,   133,   134,    -1,    -1,   137,
     138,   139,   140,   141,    -1,    -1,    -1,   145,   146,   147,
      -1,   149,   150,   151,    -1,   153,   154,   155,   156,   157,
     158,   159,   160,   161,   162,   163,    -1,   165,    -1,   167,
     168,   169,   170,    -1,   172,    -1,   174,    -1,    -1,    -1,
     178,   179,   180,    -1,   182,    -1,   184,    -1,    -1,    -1,
     188,   189,    -1,   191,    -1,   193,   194,   195,   196,   197,
     198,   199,    -1,   201,   202,   203,   204,    -1,   206,   207,
     208,   209,   210,   211,    -1,   213,    -1,   215,   216,   217,
     218,   219,   220,   221,   222,    -1,   224,    -1,   226,    -1,
      -1,   229,    -1,   231,    -1,   233,   234,   235,   236,   237,
      -1,    -1,   240,    -1,   242,    -1,    -1,   245,   246,   247,
      -1,    -1,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,    -1,   276,   277,
     278,   279,    -1,   281,    -1,   283,   284,    -1,   286,    -1,
     288,   289,   290,   291,   292,   293,    -1,   295,   296,    -1,
      -1,   299,   300,   301,    -1,    -1,   304,   305,    -1,   307,
      -1,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,    -1,    -1,   321,    -1,   323,   324,   325,    -1,   327,
     328,   329,   330,   331,   332,    -1,   334,   335,   336,   337,
     338,    -1,    -1,   341,    -1,   343,   344,   345,   346,   347,
     348,   349,   350,    -1,   352,   353,   354,    -1,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,    -1,   367,
     368,    -1,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,    -1,   386,   387,
     388,   389,   390,    -1,   392,   393,   394,   395,    -1,   397,
      -1,    -1,   400,   401,   402,    -1,    -1,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,   417,
     418,   419,   420,    -1,   422,   423,    -1,   425,    -1,   427,
     428,   429,   430,   431,    -1,   433,   434,    -1,    -1,    -1,
     438,   439,   440,   441,   442,    -1,   444,   445,   446,   447,
     448,   449,   450,   451,    -1,    -1,   454,   455,   456,   457,
     458,   459,    -1,    -1,   462,   463,   464,   465,   466,   467,
     468,    -1,   470,    -1,   472,    -1,   474,   475,   476,   477,
      -1,    -1,    -1,   481,    -1,    -1,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,   499,   500,   501,   502,   503,   504,     3,    -1,     5,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    21,    22,    23,    24,    -1,
      26,    27,    28,    29,    -1,    31,    32,    33,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    42,    43,    -1,    45,
      46,    47,    -1,    49,    50,    51,    52,    53,    -1,    55,
      56,    -1,    58,    59,    60,    61,    62,    63,    -1,    -1,
      66,    67,    68,    69,    70,    -1,    72,    73,    74,    75,
      76,    -1,    -1,    -1,    80,    81,    82,    83,    84,    85,
      -1,    87,    88,    89,    -1,    91,    92,    93,    94,    95,
      -1,    -1,    -1,    99,   100,   101,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,    -1,   120,    -1,   122,   123,   124,   125,
     126,   127,    -1,   129,    -1,   131,   132,   133,   134,    -1,
      -1,   137,   138,   139,   140,   141,    -1,    -1,    -1,   145,
     146,   147,    -1,   149,   150,   151,    -1,   153,   154,   155,
     156,   157,   158,   159,   160,   161,   162,   163,    -1,   165,
      -1,   167,   168,   169,   170,    -1,   172,    -1,   174,    -1,
      -1,    -1,   178,   179,   180,    -1,   182,    -1,   184,    -1,
      -1,    -1,   188,   189,    -1,   191,    -1,   193,   194,   195,
     196,   197,   198,   199,    -1,   201,   202,   203,   204,    -1,
     206,   207,   208,   209,   210,   211,    -1,   213,    -1,   215,
     216,   217,   218,   219,   220,   221,   222,    -1,   224,    -1,
     226,    -1,    -1,   229,    -1,   231,    -1,   233,   234,   235,
     236,   237,    -1,    -1,   240,    -1,   242,    -1,    -1,   245,
     246,   247,    -1,    -1,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,    -1,
     276,   277,   278,   279,    -1,   281,    -1,   283,   284,    -1,
     286,    -1,   288,   289,   290,   291,   292,   293,    -1,   295,
     296,    -1,    -1,   299,   300,   301,    -1,    -1,   304,   305,
      -1,   307,    -1,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,    -1,    -1,   321,    -1,   323,   324,   325,
      -1,   327,   328,   329,   330,   331,   332,    -1,   334,   335,
     336,   337,   338,    -1,    -1,   341,    -1,   343,   344,   345,
     346,   347,   348,   349,   350,    -1,   352,   353,   354,    -1,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
      -1,   367,   368,    -1,   370,   371,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,    -1,
     386,   387,   388,   389,   390,    -1,   392,   393,   394,   395,
      -1,   397,    -1,    -1,   400,   401,   402,    -1,    -1,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,   417,   418,   419,   420,    -1,   422,   423,    -1,   425,
      -1,   427,   428,   429,   430,   431,    -1,   433,   434,    -1,
      -1,    -1,   438,   439,   440,   441,   442,    -1,   444,   445,
     446,   447,   448,   449,   450,   451,    -1,    -1,   454,   455,
     456,   457,   458,   459,    -1,    -1,   462,   463,   464,   465,
     466,   467,   468,    -1,   470,    -1,   472,    -1,   474,   475,
     476,   477,    -1,    -1,    -1,   481,    -1,    -1,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,   498,   499,   500,   501,   502,   503,   504,     3,
      -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    21,    22,    23,
      24,    -1,    26,    27,    28,    29,    -1,    31,    32,    33,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    42,    43,
      -1,    45,    46,    47,    -1,    49,    50,    51,    52,    53,
      -1,    55,    56,    -1,    58,    59,    60,    61,    62,    63,
      -1,    -1,    66,    67,    68,    69,    70,    -1,    72,    73,
      74,    75,    76,    -1,    -1,    -1,    80,    81,    82,    83,
      84,    85,    -1,    87,    88,    89,    -1,    91,    92,    93,
      94,    95,    -1,    -1,    -1,    99,   100,   101,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,    -1,   120,    -1,   122,   123,
     124,   125,   126,   127,    -1,   129,    -1,   131,   132,   133,
     134,    -1,    -1,   137,   138,   139,   140,   141,    -1,    -1,
      -1,   145,   146,   147,    -1,   149,   150,   151,    -1,   153,
     154,   155,   156,   157,   158,   159,   160,   161,   162,   163,
      -1,   165,    -1,   167,   168,   169,   170,    -1,   172,    -1,
     174,    -1,    -1,    -1,   178,   179,   180,    -1,   182,    -1,
     184,    -1,    -1,    -1,   188,   189,    -1,   191,    -1,   193,
     194,   195,   196,   197,   198,   199,    -1,   201,   202,   203,
     204,    -1,   206,   207,   208,   209,   210,   211,    -1,   213,
      -1,   215,   216,   217,   218,   219,   220,   221,   222,    -1,
     224,    -1,   226,    -1,    -1,   229,    -1,   231,    -1,   233,
     234,   235,   236,   237,    -1,    -1,   240,    -1,   242,    -1,
      -1,   245,   246,   247,    -1,    -1,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,    -1,   276,   277,   278,   279,    -1,   281,    -1,   283,
     284,    -1,   286,    -1,   288,   289,   290,   291,   292,   293,
      -1,   295,   296,    -1,    -1,   299,   300,   301,    -1,    -1,
     304,   305,    -1,   307,    -1,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,    -1,    -1,   321,    -1,   323,
     324,   325,    -1,   327,   328,   329,   330,   331,   332,    -1,
     334,   335,   336,   337,   338,    -1,    -1,   341,    -1,   343,
     344,   345,   346,   347,   348,   349,   350,    -1,   352,   353,
     354,    -1,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,    -1,   367,   368,    -1,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,    -1,   386,   387,   388,   389,   390,    -1,   392,   393,
     394,   395,    -1,   397,    -1,    -1,   400,   401,   402,    -1,
      -1,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,   417,   418,   419,   420,    -1,   422,   423,
      -1,   425,    -1,   427,   428,   429,   430,   431,    -1,   433,
     434,    -1,    -1,    -1,   438,   439,   440,   441,   442,    -1,
     444,   445,   446,   447,   448,   449,   450,   451,    -1,    -1,
     454,   455,   456,   457,   458,   459,    -1,    -1,   462,   463,
     464,   465,   466,   467,   468,    -1,   470,    -1,   472,    -1,
     474,   475,   476,   477,    -1,    -1,    -1,   481,    -1,    -1,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,   499,   500,   501,   502,   503,
     504,     3,    -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    21,
      22,    23,    24,    -1,    26,    27,    28,    29,    -1,    31,
      32,    33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      42,    43,    -1,    45,    46,    47,    -1,    49,    50,    51,
      52,    53,    -1,    55,    56,    -1,    58,    59,    60,    61,
      62,    63,    -1,    -1,    66,    67,    68,    69,    70,    -1,
      72,    73,    74,    75,    76,    -1,    -1,    -1,    80,    81,
      82,    83,    84,    85,    -1,    87,    88,    89,    -1,    91,
      92,    93,    94,    95,    -1,    -1,    -1,    99,   100,   101,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,    -1,   120,    -1,
     122,   123,   124,   125,   126,   127,    -1,   129,    -1,   131,
     132,   133,   134,    -1,    -1,   137,   138,   139,   140,   141,
      -1,    -1,    -1,   145,   146,   147,    -1,   149,   150,   151,
      -1,   153,   154,   155,   156,   157,   158,   159,   160,   161,
     162,   163,    -1,   165,    -1,   167,   168,   169,   170,    -1,
     172,    -1,   174,    -1,    -1,    -1,   178,   179,   180,    -1,
     182,    -1,   184,    -1,    -1,    -1,   188,   189,    -1,   191,
      -1,   193,   194,   195,   196,   197,   198,   199,    -1,   201,
     202,   203,   204,    -1,   206,   207,   208,   209,   210,   211,
      -1,   213,    -1,   215,   216,   217,   218,   219,   220,   221,
     222,    -1,   224,    -1,   226,    -1,    -1,   229,    -1,   231,
      -1,   233,   234,   235,   236,   237,    -1,    -1,   240,    -1,
     242,    -1,    -1,   245,   246,   247,    -1,    -1,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,    -1,   276,   277,   278,   279,    -1,   281,
      -1,   283,   284,    -1,   286,    -1,   288,   289,   290,   291,
     292,   293,    -1,   295,   296,    -1,    -1,   299,   300,   301,
      -1,    -1,   304,   305,    -1,   307,    -1,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,    -1,    -1,   321,
      -1,   323,   324,   325,    -1,   327,   328,   329,   330,   331,
     332,    -1,   334,   335,   336,   337,   338,    -1,    -1,   341,
      -1,   343,   344,   345,   346,   347,   348,   349,   350,    -1,
     352,   353,   354,    -1,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,    -1,   367,   368,    -1,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,    -1,   386,   387,   388,   389,   390,    -1,
     392,   393,   394,   395,    -1,   397,    -1,    -1,   400,   401,
     402,    -1,    -1,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,   417,   418,   419,   420,    -1,
     422,   423,    -1,   425,    -1,   427,   428,   429,   430,   431,
      -1,   433,   434,    -1,    -1,    -1,   438,   439,   440,   441,
     442,    -1,   444,   445,   446,   447,   448,   449,   450,   451,
      -1,    -1,   454,   455,   456,   457,   458,   459,    -1,    -1,
     462,   463,   464,   465,   466,   467,   468,    -1,   470,    -1,
     472,    -1,   474,   475,   476,   477,    -1,    -1,    -1,   481,
      -1,    -1,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,   498,   499,   500,   501,
     502,   503,   504,     3,    -1,     5,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    21,    22,    23,    24,    -1,    26,    27,    28,    29,
      -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    42,    43,    -1,    45,    46,    47,    -1,    49,
      50,    51,    52,    53,    -1,    55,    56,    -1,    58,    59,
      60,    61,    62,    63,    -1,    -1,    66,    67,    68,    69,
      70,    -1,    72,    73,    74,    75,    76,    -1,    -1,    -1,
      80,    81,    82,    83,    84,    85,    -1,    87,    88,    89,
      -1,    91,    92,    93,    94,    95,    -1,    -1,    -1,    99,
     100,   101,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,    -1,
     120,    -1,   122,   123,   124,   125,   126,   127,    -1,   129,
      -1,   131,   132,   133,   134,    -1,    -1,   137,   138,   139,
     140,   141,    -1,    -1,    -1,   145,   146,   147,    -1,   149,
     150,   151,    -1,   153,   154,   155,   156,   157,   158,   159,
     160,   161,   162,   163,    -1,   165,    -1,   167,   168,   169,
     170,    -1,   172,    -1,   174,    -1,    -1,    -1,   178,   179,
     180,    -1,   182,    -1,   184,    -1,    -1,    -1,   188,   189,
      -1,   191,    -1,   193,   194,   195,   196,   197,   198,   199,
      -1,   201,   202,   203,   204,    -1,   206,   207,   208,   209,
     210,   211,    -1,   213,    -1,   215,   216,   217,   218,   219,
     220,   221,   222,    -1,   224,    -1,   226,    -1,    -1,   229,
      -1,   231,    -1,   233,   234,   235,   236,   237,    -1,    -1,
     240,    -1,   242,    -1,    -1,   245,   246,   247,    -1,    -1,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,    -1,   276,   277,   278,   279,
      -1,   281,    -1,   283,   284,    -1,   286,    -1,   288,   289,
     290,   291,   292,   293,    -1,   295,   296,    -1,    -1,   299,
     300,   301,    -1,    -1,   304,   305,    -1,   307,    -1,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,    -1,
      -1,   321,    -1,   323,   324,   325,    -1,   327,   328,   329,
     330,   331,   332,    -1,   334,   335,   336,   337,   338,    -1,
      -1,   341,    -1,   343,   344,   345,   346,   347,   348,   349,
     350,    -1,   352,   353,   354,    -1,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,    -1,   367,   368,    -1,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,    -1,   386,   387,   388,   389,
     390,    -1,   392,   393,   394,   395,    -1,   397,    -1,    -1,
     400,   401,   402,    -1,    -1,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,   417,   418,   419,
     420,    -1,   422,   423,    -1,   425,    -1,   427,   428,   429,
     430,   431,    -1,   433,   434,    -1,    -1,    -1,   438,   439,
     440,   441,   442,    -1,   444,   445,   446,   447,   448,   449,
     450,   451,    -1,    -1,   454,   455,   456,   457,   458,   459,
      -1,    -1,   462,   463,   464,   465,   466,   467,   468,    -1,
     470,    -1,   472,    -1,   474,   475,   476,   477,    -1,    -1,
      -1,   481,    -1,    -1,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,   498,   499,
     500,   501,   502,   503,   504,     3,    -1,     5,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    21,    22,    23,    24,    -1,    26,    27,
      28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    42,    43,    -1,    45,    46,    47,
      -1,    49,    50,    51,    52,    53,    -1,    55,    56,    -1,
      58,    59,    60,    61,    62,    63,    -1,    -1,    66,    67,
      68,    69,    70,    -1,    72,    73,    74,    75,    76,    -1,
      -1,    -1,    80,    81,    82,    83,    84,    85,    -1,    87,
      88,    89,    -1,    91,    92,    93,    94,    95,    -1,    -1,
      -1,    99,   100,   101,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,    -1,   120,    -1,   122,   123,   124,   125,   126,   127,
      -1,   129,    -1,   131,   132,   133,   134,    -1,    -1,   137,
     138,   139,   140,   141,    -1,    -1,    -1,   145,   146,   147,
      -1,   149,   150,   151,    -1,   153,   154,   155,   156,   157,
     158,   159,   160,   161,   162,   163,    -1,   165,    -1,   167,
     168,   169,   170,    -1,   172,    -1,   174,    -1,    -1,    -1,
     178,   179,   180,    -1,   182,    -1,   184,    -1,    -1,    -1,
     188,   189,    -1,   191,    -1,   193,   194,   195,   196,   197,
     198,   199,    -1,   201,   202,   203,   204,    -1,   206,   207,
     208,   209,   210,   211,    -1,   213,    -1,   215,   216,   217,
     218,   219,   220,   221,   222,    -1,   224,    -1,   226,    -1,
      -1,   229,    -1,   231,    -1,   233,   234,   235,   236,   237,
      -1,    -1,   240,    -1,   242,    -1,    -1,   245,   246,   247,
      -1,    -1,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,    -1,   276,   277,
     278,   279,    -1,   281,    -1,   283,   284,    -1,   286,    -1,
     288,   289,   290,   291,   292,   293,    -1,   295,   296,    -1,
      -1,   299,   300,   301,    -1,    -1,   304,   305,    -1,   307,
      -1,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,    -1,    -1,   321,    -1,   323,   324,   325,    -1,   327,
     328,   329,   330,   331,   332,    -1,   334,   335,   336,   337,
     338,    -1,    -1,   341,    -1,   343,   344,   345,   346,   347,
     348,   349,   350,    -1,   352,   353,   354,    -1,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,    -1,   367,
     368,    -1,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,    -1,   386,   387,
     388,   389,   390,    -1,   392,   393,   394,   395,    -1,   397,
      -1,    -1,   400,   401,   402,    -1,    -1,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,   417,
     418,   419,   420,    -1,   422,   423,    -1,   425,    -1,   427,
     428,   429,   430,   431,    -1,   433,   434,    -1,    -1,    -1,
     438,   439,   440,   441,   442,    -1,   444,   445,   446,   447,
     448,   449,   450,   451,    -1,    -1,   454,   455,   456,   457,
     458,   459,    -1,    -1,   462,   463,   464,   465,   466,   467,
     468,    -1,   470,    -1,   472,    -1,   474,   475,   476,   477,
      -1,    -1,    -1,   481,    -1,    -1,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,   499,   500,   501,   502,   503,   504,     3,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    21,    22,    23,    24,    -1,
      26,    27,    28,    29,    -1,    31,    32,    33,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    42,    43,    -1,    45,
      46,    47,    48,    49,    50,    51,    -1,    53,    54,    55,
      56,    -1,    58,    59,    60,    61,    62,    63,    -1,    -1,
      66,    67,    68,    69,    70,    -1,    72,    73,    74,    75,
      -1,    -1,    78,    -1,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    -1,    91,    92,    93,    94,    95,
      -1,    -1,    98,    99,   100,   101,   102,   103,   104,   105,
      -1,    -1,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,    -1,   120,    -1,   122,   123,   124,   125,
     126,   127,    -1,   129,    -1,   131,   132,   133,   134,    -1,
      -1,   137,   138,   139,   140,   141,    -1,    -1,    -1,   145,
     146,   147,    -1,   149,   150,   151,    -1,   153,   154,   155,
     156,    -1,   158,   159,   160,   161,   162,    -1,    -1,   165,
      -1,   167,   168,   169,   170,    -1,   172,    -1,   174,   175,
      -1,   177,   178,   179,   180,   181,   182,    -1,   184,    -1,
      -1,    -1,    -1,    -1,    -1,   191,    -1,   193,   194,   195,
     196,   197,   198,   199,   200,   201,   202,   203,   204,    -1,
     206,   207,   208,   209,   210,   211,    -1,   213,   214,    -1,
     216,   217,   218,   219,   220,   221,   222,    -1,   224,    -1,
     226,   227,   228,   229,   230,   231,    -1,   233,   234,   235,
     236,   237,    -1,    -1,   240,   241,   242,   243,    -1,   245,
     246,   247,    -1,    -1,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,    -1,    -1,    -1,   283,   284,   285,
     286,    -1,    -1,   289,   290,   291,   292,   293,    -1,   295,
     296,    -1,    -1,   299,   300,   301,    -1,    -1,   304,    -1,
     306,   307,   308,    -1,   310,   311,   312,   313,   314,   315,
     316,   317,   318,    -1,    -1,   321,    -1,   323,   324,    -1,
     326,   327,   328,    -1,   330,   331,   332,    -1,   334,   335,
     336,   337,   338,    -1,    -1,   341,    -1,   343,   344,   345,
     346,   347,   348,   349,   350,    -1,   352,   353,   354,    -1,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
      -1,   367,   368,   369,   370,   371,   372,    -1,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,    -1,
     386,   387,   388,   389,   390,   391,   392,    -1,   394,   395,
      -1,   397,   398,    -1,   400,   401,   402,    -1,    -1,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,   417,   418,    -1,   420,    -1,   422,   423,    -1,   425,
     426,   427,   428,   429,   430,   431,    -1,   433,   434,    -1,
      -1,    -1,   438,   439,    -1,   441,    -1,    -1,   444,   445,
     446,   447,   448,   449,   450,   451,    -1,    -1,   454,   455,
     456,   457,   458,   459,   460,    -1,   462,   463,   464,   465,
     466,    -1,   468,    -1,   470,   471,   472,    -1,   474,   475,
     476,   477,    -1,    -1,    -1,   481,    -1,    -1,   484,   485,
     486,   487,   488,   489,     3,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   501,   502,   503,   504,    -1,
      -1,    -1,    21,    22,    23,    24,    -1,    26,    27,    28,
      29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    42,    43,    -1,    45,    46,    47,    -1,
      49,    50,    51,    52,    53,    -1,    55,    56,    -1,    58,
      59,    60,    61,    62,    63,    -1,    -1,    66,    67,    68,
      69,    70,    -1,    72,    73,    74,    75,    76,    -1,    -1,
      -1,    80,    81,    82,    83,    84,    85,    -1,    87,    88,
      89,    -1,    91,    92,    93,    94,    95,    -1,    -1,    -1,
      99,   100,   101,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
      -1,   120,    -1,   122,   123,   124,   125,   126,   127,    -1,
     129,    -1,   131,   132,   133,   134,    -1,    -1,   137,   138,
     139,   140,   141,    -1,    -1,    -1,   145,   146,   147,    -1,
     149,   150,   151,    -1,   153,   154,   155,   156,   157,   158,
     159,   160,   161,   162,   163,    -1,   165,    -1,   167,   168,
     169,   170,    -1,   172,    -1,   174,    -1,    -1,    -1,   178,
     179,   180,    -1,   182,    -1,   184,    -1,    -1,    -1,   188,
     189,    -1,   191,    -1,   193,   194,   195,   196,   197,   198,
     199,    -1,   201,   202,   203,   204,    -1,   206,   207,   208,
     209,   210,   211,    -1,   213,    -1,   215,   216,   217,   218,
     219,   220,   221,   222,    -1,   224,    -1,   226,    -1,    -1,
     229,    -1,   231,    -1,   233,   234,   235,   236,   237,    -1,
      -1,   240,    -1,   242,    -1,    -1,   245,   246,   247,    -1,
      -1,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,    -1,   276,   277,   278,
     279,    -1,   281,    -1,   283,   284,    -1,   286,    -1,   288,
     289,   290,   291,   292,   293,    -1,   295,   296,    -1,    -1,
     299,   300,   301,    -1,    -1,   304,   305,    -1,   307,    -1,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
      -1,    -1,   321,    -1,   323,   324,   325,    -1,   327,   328,
     329,   330,   331,   332,    -1,   334,   335,   336,   337,   338,
      -1,    -1,   341,    -1,   343,   344,   345,   346,   347,   348,
     349,   350,    -1,   352,   353,   354,    -1,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,    -1,   367,   368,
      -1,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,    -1,   386,   387,   388,
     389,   390,    -1,   392,   393,   394,   395,    -1,   397,    -1,
      -1,   400,   401,   402,    -1,    -1,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,   417,   418,
     419,   420,    -1,   422,   423,    -1,   425,    -1,   427,   428,
     429,   430,   431,    -1,   433,   434,    -1,    -1,    -1,   438,
     439,   440,   441,   442,    -1,   444,   445,   446,   447,   448,
     449,   450,   451,    -1,    -1,   454,   455,   456,   457,   458,
     459,    -1,    -1,   462,   463,   464,   465,   466,   467,   468,
      -1,   470,    -1,   472,    -1,   474,   475,   476,   477,    -1,
      -1,    -1,   481,    -1,    -1,   484,   485,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
     499,   500,   501,   502,   503,   504,     3,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    21,    22,    23,    24,    -1,    26,
      27,    28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    42,    43,    -1,    45,    46,
      47,    -1,    49,    50,    51,    52,    53,    -1,    55,    56,
      -1,    58,    59,    60,    61,    62,    63,    -1,    -1,    66,
      67,    68,    69,    70,    -1,    72,    73,    74,    75,    76,
      -1,    -1,    -1,    80,    81,    82,    83,    84,    85,    -1,
      87,    88,    89,    -1,    91,    92,    93,    94,    95,    -1,
      -1,    -1,    99,   100,   101,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   109,   110,   111,   112,   113,   114,   115,   116,
     117,   118,    -1,   120,    -1,   122,   123,   124,   125,   126,
     127,    -1,   129,    -1,   131,   132,   133,   134,    -1,    -1,
     137,   138,   139,   140,   141,    -1,    -1,    -1,   145,   146,
     147,    -1,   149,   150,   151,    -1,   153,   154,   155,   156,
     157,   158,   159,   160,   161,   162,   163,    -1,   165,    -1,
     167,   168,   169,   170,    -1,   172,    -1,   174,    -1,    -1,
      -1,   178,   179,   180,    -1,   182,    -1,   184,    -1,    -1,
      -1,   188,   189,    -1,   191,    -1,   193,   194,   195,   196,
     197,   198,   199,    -1,   201,   202,   203,   204,    -1,   206,
     207,   208,   209,   210,   211,    -1,   213,    -1,   215,   216,
     217,   218,   219,   220,   221,   222,    -1,   224,    -1,   226,
      -1,    -1,   229,    -1,   231,    -1,   233,   234,   235,   236,
     237,    -1,    -1,   240,    -1,   242,    -1,    -1,   245,   246,
     247,    -1,    -1,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,    -1,   276,
     277,   278,   279,    -1,   281,    -1,   283,   284,    -1,   286,
      -1,   288,   289,   290,   291,   292,   293,    -1,   295,   296,
      -1,    -1,   299,   300,   301,    -1,    -1,   304,   305,    -1,
     307,    -1,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,    -1,    -1,   321,    -1,   323,   324,   325,    -1,
     327,   328,   329,   330,   331,   332,    -1,   334,   335,   336,
     337,   338,    -1,    -1,   341,    -1,   343,   344,   345,   346,
     347,   348,   349,   350,    -1,   352,   353,   354,    -1,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,    -1,
     367,   368,    -1,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,    -1,   386,
     387,   388,   389,   390,    -1,   392,   393,   394,   395,    -1,
     397,    -1,    -1,   400,   401,   402,    -1,    -1,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
     417,   418,   419,   420,    -1,   422,   423,    -1,   425,    -1,
     427,   428,   429,   430,   431,    -1,   433,   434,    -1,    -1,
      -1,   438,   439,   440,   441,   442,    -1,   444,   445,   446,
     447,   448,   449,   450,   451,    -1,    -1,   454,   455,   456,
     457,   458,   459,    -1,    -1,   462,   463,   464,   465,   466,
     467,   468,    -1,   470,    -1,   472,    -1,   474,   475,   476,
     477,    -1,    -1,    -1,   481,    -1,    -1,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,   498,   499,   500,   501,   502,   503,   504,     3,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    21,    22,    23,    24,
      -1,    26,    27,    28,    29,    -1,    31,    32,    33,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    42,    43,    -1,
      45,    46,    47,    -1,    49,    50,    51,    52,    53,    -1,
      55,    56,    -1,    58,    59,    60,    61,    62,    63,    -1,
      -1,    66,    67,    68,    69,    70,    -1,    72,    73,    74,
      75,    76,    -1,    -1,    -1,    80,    81,    82,    83,    84,
      85,    -1,    87,    88,    89,    -1,    91,    92,    93,    94,
      95,    -1,    -1,    -1,    99,   100,   101,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,    -1,   120,    -1,   122,   123,   124,
     125,   126,   127,    -1,   129,    -1,   131,   132,   133,   134,
      -1,    -1,   137,   138,   139,   140,   141,    -1,    -1,    -1,
     145,   146,   147,    -1,   149,   150,   151,    -1,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,   163,    -1,
     165,    -1,   167,   168,   169,   170,    -1,   172,    -1,   174,
      -1,    -1,    -1,   178,   179,   180,    -1,   182,    -1,   184,
      -1,    -1,    -1,   188,   189,    -1,   191,    -1,   193,   194,
     195,   196,   197,   198,   199,    -1,   201,   202,   203,   204,
      -1,   206,   207,   208,   209,   210,   211,    -1,   213,    -1,
     215,   216,   217,   218,   219,   220,   221,   222,    -1,   224,
      -1,   226,    -1,    -1,   229,    -1,   231,    -1,   233,   234,
     235,   236,   237,    -1,    -1,   240,    -1,   242,    -1,    -1,
     245,   246,   247,    -1,    -1,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
      -1,   276,   277,   278,   279,    -1,   281,    -1,   283,   284,
      -1,   286,    -1,   288,   289,   290,   291,   292,   293,    -1,
     295,   296,    -1,    -1,   299,   300,   301,    -1,    -1,   304,
     305,    -1,   307,    -1,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,    -1,    -1,   321,    -1,   323,   324,
     325,    -1,   327,   328,   329,   330,   331,   332,    -1,   334,
     335,   336,   337,   338,    -1,    -1,   341,    -1,   343,   344,
     345,   346,   347,   348,   349,   350,    -1,   352,   353,   354,
      -1,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,    -1,   367,   368,    -1,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
      -1,   386,   387,   388,   389,   390,    -1,   392,   393,   394,
     395,    -1,   397,    -1,    -1,   400,   401,   402,    -1,    -1,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,    -1,   422,   423,    -1,
     425,    -1,   427,   428,   429,   430,   431,    -1,   433,   434,
      -1,    -1,    -1,   438,   439,   440,   441,   442,    -1,   444,
     445,   446,   447,   448,   449,   450,   451,    -1,    -1,   454,
     455,   456,   457,   458,   459,    -1,    -1,   462,   463,   464,
     465,   466,   467,   468,    -1,   470,    -1,   472,    -1,   474,
     475,   476,   477,    -1,    -1,    -1,   481,    -1,    -1,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    21,    22,
      23,    24,    -1,    26,    27,    28,    29,    -1,    31,    32,
      33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    42,
      43,    -1,    45,    46,    47,    -1,    49,    50,    51,    52,
      53,    -1,    55,    56,    -1,    58,    59,    60,    61,    62,
      63,    -1,    -1,    66,    67,    68,    69,    70,    -1,    72,
      73,    74,    75,    76,    -1,    -1,    -1,    80,    81,    82,
      83,    84,    85,    -1,    87,    88,    89,    -1,    91,    92,
      93,    94,    95,    -1,    -1,    -1,    99,   100,   101,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   109,   110,   111,   112,
     113,   114,   115,   116,   117,   118,    -1,   120,    -1,   122,
     123,   124,   125,   126,   127,    -1,   129,    -1,   131,   132,
     133,   134,    -1,    -1,   137,   138,   139,   140,   141,    -1,
      -1,    -1,   145,   146,   147,    -1,   149,   150,   151,    -1,
     153,   154,   155,   156,   157,   158,   159,   160,   161,   162,
     163,    -1,   165,    -1,   167,   168,   169,   170,    -1,   172,
      -1,   174,    -1,    -1,    -1,   178,   179,   180,    -1,   182,
      -1,   184,    -1,    -1,    -1,   188,   189,    -1,   191,    -1,
     193,   194,   195,   196,   197,   198,   199,    -1,   201,   202,
     203,   204,    -1,   206,   207,   208,   209,   210,   211,    -1,
     213,    -1,   215,   216,   217,   218,   219,   220,   221,   222,
      -1,   224,    -1,   226,    -1,    -1,   229,    -1,   231,    -1,
     233,   234,   235,   236,   237,    -1,    -1,   240,    -1,   242,
      -1,    -1,   245,   246,   247,    -1,    -1,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,    -1,   276,   277,   278,   279,    -1,   281,    -1,
     283,   284,    -1,   286,    -1,   288,   289,   290,   291,   292,
     293,    -1,   295,   296,    -1,    -1,   299,   300,   301,    -1,
      -1,   304,   305,    -1,   307,    -1,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,    -1,    -1,   321,    -1,
     323,   324,   325,    -1,   327,   328,   329,   330,   331,   332,
      -1,   334,   335,   336,   337,   338,    -1,    -1,   341,    -1,
     343,   344,   345,   346,   347,   348,   349,   350,    -1,   352,
     353,   354,    -1,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,    -1,   367,   368,    -1,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,    -1,   386,   387,   388,   389,   390,    -1,   392,
     393,   394,   395,    -1,   397,    -1,    -1,   400,   401,   402,
      -1,    -1,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,   417,   418,   419,   420,    -1,   422,
     423,    -1,   425,    -1,   427,   428,   429,   430,   431,    -1,
     433,   434,    -1,    -1,    -1,   438,   439,   440,   441,   442,
      -1,   444,   445,   446,   447,   448,   449,   450,   451,    -1,
      -1,   454,   455,   456,   457,   458,   459,    -1,    -1,   462,
     463,   464,   465,   466,   467,   468,    -1,   470,    -1,   472,
      -1,   474,   475,   476,   477,    -1,    -1,    -1,   481,    -1,
      -1,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   500,   501,   502,
     503,   504,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      21,    22,    23,    24,    -1,    26,    27,    28,    29,    -1,
      31,    32,    33,    -1,    -1,    -1,    -1,    -1,    -1,    40,
      -1,    42,    43,    -1,    45,    46,    47,    -1,    49,    50,
      51,    52,    53,    -1,    55,    56,    -1,    58,    59,    60,
      61,    62,    63,    -1,    -1,    66,    67,    68,    69,    70,
      -1,    72,    73,    74,    75,    76,    -1,    -1,    -1,    80,
      81,    82,    83,    84,    85,    -1,    87,    88,    89,    -1,
      91,    92,    93,    94,    95,    -1,    -1,    -1,    99,   100,
     101,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,    -1,   120,
      -1,   122,   123,   124,   125,   126,   127,    -1,   129,    -1,
     131,   132,   133,   134,    -1,    -1,   137,   138,   139,   140,
     141,    -1,    -1,    -1,   145,   146,   147,    -1,   149,   150,
     151,    -1,   153,   154,   155,   156,   157,   158,   159,   160,
     161,   162,   163,    -1,   165,    -1,   167,   168,   169,   170,
      -1,   172,    -1,   174,    -1,    -1,    -1,   178,   179,   180,
      -1,   182,    -1,   184,    -1,    -1,    -1,   188,   189,    -1,
     191,    -1,   193,   194,   195,   196,   197,   198,   199,    -1,
     201,   202,   203,   204,    -1,   206,   207,   208,   209,   210,
     211,    -1,   213,    -1,   215,   216,   217,   218,   219,   220,
     221,   222,    -1,   224,    -1,   226,    -1,    -1,   229,    -1,
     231,    -1,   233,   234,   235,   236,   237,    -1,    -1,   240,
      -1,   242,    -1,    -1,   245,   246,   247,    -1,    -1,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,    -1,   276,   277,   278,   279,    -1,
     281,    -1,   283,   284,    -1,   286,    -1,   288,   289,   290,
     291,   292,   293,    -1,   295,   296,    -1,    -1,   299,   300,
     301,    -1,    -1,   304,   305,    -1,   307,    -1,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,    -1,    -1,
     321,    -1,   323,   324,   325,    -1,   327,   328,   329,   330,
     331,   332,    -1,   334,   335,   336,   337,   338,    -1,    -1,
     341,    -1,   343,   344,   345,   346,   347,   348,   349,   350,
      -1,   352,   353,   354,    -1,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,    -1,   367,   368,    -1,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,    -1,   386,   387,   388,   389,   390,
      -1,    -1,   393,   394,   395,    -1,   397,    -1,    -1,   400,
     401,   402,    -1,    -1,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,   417,   418,   419,   420,
      -1,   422,   423,    -1,   425,    -1,   427,   428,   429,   430,
     431,    -1,   433,   434,    -1,    -1,    -1,   438,   439,   440,
     441,   442,    -1,   444,   445,   446,   447,   448,   449,   450,
     451,    -1,    -1,   454,   455,   456,   457,   458,   459,    -1,
      -1,   462,   463,   464,   465,   466,   467,   468,    -1,   470,
      -1,   472,    -1,   474,   475,   476,   477,    -1,    -1,    -1,
     481,    -1,    -1,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,   499,   500,
     501,   502,   503,   504,     3,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    21,    22,    23,    24,    -1,    26,    27,    28,
      29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    42,    43,    -1,    45,    46,    47,    -1,
      49,    50,    51,    52,    53,    -1,    55,    56,    -1,    58,
      59,    60,    61,    62,    63,    -1,    -1,    66,    67,    68,
      69,    70,    -1,    72,    73,    74,    75,    76,    -1,    -1,
      -1,    80,    81,    82,    83,    84,    85,    -1,    87,    88,
      89,    -1,    91,    92,    93,    94,    95,    -1,    -1,    -1,
      99,   100,   101,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
      -1,   120,    -1,   122,   123,   124,   125,   126,   127,    -1,
     129,    -1,   131,   132,   133,   134,    -1,    -1,   137,   138,
     139,   140,   141,    -1,    -1,    -1,   145,   146,   147,    -1,
     149,   150,   151,    -1,   153,   154,   155,   156,   157,   158,
     159,   160,   161,   162,   163,    -1,   165,    -1,   167,   168,
     169,   170,    -1,   172,    -1,   174,    -1,    -1,    -1,   178,
     179,   180,    -1,   182,    -1,   184,    -1,    -1,    -1,   188,
     189,    -1,   191,    -1,   193,   194,   195,   196,   197,   198,
     199,    -1,   201,   202,   203,   204,    -1,   206,   207,   208,
     209,   210,   211,    -1,   213,    -1,   215,   216,   217,   218,
     219,   220,   221,   222,    -1,   224,    -1,   226,    -1,    -1,
     229,    -1,   231,    -1,   233,   234,   235,   236,   237,    -1,
      -1,   240,    -1,   242,    -1,    -1,   245,   246,   247,    -1,
      -1,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,    -1,   276,   277,   278,
     279,    -1,   281,    -1,   283,   284,    -1,   286,    -1,   288,
     289,   290,   291,   292,   293,    -1,   295,   296,    -1,    -1,
     299,   300,   301,    -1,    -1,   304,   305,    -1,   307,    -1,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
      -1,    -1,   321,    -1,   323,   324,   325,    -1,   327,   328,
     329,   330,   331,   332,    -1,   334,   335,   336,   337,   338,
      -1,    -1,   341,    -1,   343,   344,   345,   346,   347,   348,
     349,   350,    -1,   352,   353,   354,    -1,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,    -1,   367,   368,
      -1,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,    -1,   386,   387,   388,
     389,   390,    -1,   392,   393,   394,   395,    -1,   397,    -1,
      -1,   400,   401,   402,    -1,    -1,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,   417,   418,
     419,   420,    -1,   422,   423,    -1,   425,    -1,   427,   428,
     429,   430,   431,    -1,   433,   434,    -1,    -1,    -1,   438,
     439,   440,   441,   442,    -1,   444,   445,   446,   447,   448,
     449,   450,   451,    -1,    -1,   454,   455,   456,   457,   458,
     459,    -1,    -1,   462,   463,   464,   465,   466,   467,   468,
      -1,   470,    -1,   472,    -1,   474,   475,   476,   477,    -1,
      -1,    -1,   481,    -1,    -1,   484,   485,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
     499,   500,   501,   502,   503,   504,     3,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    21,    22,    23,    24,    -1,    26,
      27,    28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    42,    43,    -1,    45,    46,
      47,    -1,    49,    50,    51,    52,    53,    -1,    55,    56,
      -1,    58,    59,    60,    61,    62,    63,    -1,    -1,    66,
      67,    68,    69,    70,    -1,    72,    73,    74,    75,    76,
      -1,    -1,    -1,    80,    81,    82,    83,    84,    85,    -1,
      87,    88,    89,    -1,    91,    92,    93,    94,    95,    -1,
      -1,    -1,    99,   100,   101,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   109,   110,   111,   112,   113,   114,   115,   116,
     117,   118,    -1,   120,    -1,   122,   123,   124,   125,   126,
     127,    -1,   129,    -1,   131,   132,   133,   134,    -1,    -1,
     137,   138,   139,   140,   141,    -1,    -1,    -1,   145,   146,
     147,    -1,   149,   150,   151,    -1,   153,   154,   155,   156,
     157,   158,   159,   160,   161,   162,   163,    -1,   165,    -1,
     167,   168,   169,   170,    -1,   172,    -1,   174,    -1,    -1,
      -1,   178,   179,   180,    -1,   182,    -1,   184,    -1,    -1,
      -1,   188,   189,    -1,   191,    -1,   193,   194,   195,   196,
     197,   198,   199,    -1,   201,   202,   203,   204,    -1,   206,
     207,   208,   209,   210,   211,    -1,   213,    -1,   215,   216,
     217,   218,   219,   220,   221,   222,    -1,   224,    -1,   226,
      -1,    -1,   229,    -1,   231,    -1,   233,   234,   235,   236,
     237,    -1,    -1,   240,    -1,   242,    -1,    -1,   245,   246,
     247,    -1,    -1,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,    -1,   276,
     277,   278,   279,    -1,   281,    -1,   283,   284,    -1,   286,
      -1,   288,   289,   290,   291,   292,   293,    -1,   295,   296,
      -1,    -1,   299,   300,   301,    -1,    -1,   304,   305,    -1,
     307,    -1,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,    -1,    -1,   321,    -1,   323,   324,   325,    -1,
     327,   328,   329,   330,   331,   332,    -1,   334,   335,   336,
     337,   338,    -1,    -1,   341,    -1,   343,   344,   345,   346,
     347,   348,   349,   350,    -1,   352,   353,   354,    -1,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,    -1,
     367,   368,    -1,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,    -1,   386,
     387,   388,   389,   390,    -1,   392,   393,   394,   395,    -1,
     397,    -1,    -1,   400,   401,   402,    -1,    -1,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
     417,   418,   419,   420,    -1,   422,   423,    -1,   425,    -1,
     427,   428,   429,   430,   431,    -1,   433,   434,    -1,    -1,
      -1,   438,   439,   440,   441,   442,    -1,   444,   445,   446,
     447,   448,   449,   450,   451,    -1,    -1,   454,   455,   456,
     457,   458,   459,    -1,    -1,   462,   463,   464,   465,   466,
     467,   468,    -1,   470,    -1,   472,    -1,   474,   475,   476,
     477,    -1,    -1,    -1,   481,    -1,    -1,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,   498,   499,   500,   501,   502,   503,   504,     3,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    21,    22,    23,    24,
      -1,    26,    27,    28,    29,    -1,    31,    32,    33,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    42,    43,    -1,
      45,    46,    47,    -1,    49,    50,    51,    52,    53,    -1,
      55,    56,    -1,    58,    59,    60,    61,    62,    63,    -1,
      -1,    66,    67,    68,    69,    70,    -1,    72,    73,    74,
      75,    76,    -1,    -1,    -1,    80,    81,    82,    83,    84,
      85,    -1,    87,    88,    89,    -1,    91,    92,    93,    94,
      95,    -1,    -1,    -1,    99,   100,   101,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,    -1,   120,    -1,   122,   123,   124,
     125,   126,   127,    -1,   129,    -1,   131,   132,   133,   134,
      -1,    -1,   137,   138,   139,   140,   141,    -1,    -1,    -1,
     145,   146,   147,    -1,   149,   150,   151,    -1,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,   163,    -1,
     165,    -1,   167,   168,   169,   170,    -1,   172,    -1,   174,
      -1,    -1,    -1,   178,   179,   180,    -1,   182,    -1,   184,
      -1,    -1,    -1,   188,   189,    -1,   191,    -1,   193,   194,
     195,   196,   197,   198,   199,    -1,   201,   202,   203,   204,
      -1,   206,   207,   208,   209,   210,   211,    -1,   213,    -1,
     215,   216,   217,   218,   219,   220,   221,   222,    -1,   224,
      -1,   226,    -1,    -1,   229,    -1,   231,    -1,   233,   234,
     235,   236,   237,    -1,    -1,   240,    -1,   242,    -1,    -1,
     245,   246,   247,    -1,    -1,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
      -1,   276,   277,   278,   279,    -1,   281,    -1,   283,   284,
      -1,   286,    -1,   288,   289,   290,   291,   292,   293,    -1,
     295,   296,    -1,    -1,   299,   300,   301,    -1,    -1,   304,
     305,    -1,   307,    -1,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,    -1,    -1,   321,    -1,   323,   324,
     325,    -1,   327,   328,   329,   330,   331,   332,    -1,   334,
     335,   336,   337,   338,    -1,    -1,   341,    -1,   343,   344,
     345,   346,   347,   348,   349,   350,    -1,   352,   353,   354,
      -1,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,    -1,   367,   368,    -1,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
      -1,   386,   387,   388,   389,   390,    -1,   392,   393,   394,
     395,    -1,   397,    -1,    -1,   400,   401,   402,    -1,    -1,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,    -1,   422,   423,    -1,
     425,    -1,   427,   428,   429,   430,   431,    -1,   433,   434,
      -1,    -1,    -1,   438,   439,   440,   441,   442,    -1,   444,
     445,   446,   447,   448,   449,   450,   451,    -1,    -1,   454,
     455,   456,   457,   458,   459,    -1,    -1,   462,   463,   464,
     465,   466,   467,   468,    -1,   470,    -1,   472,    -1,   474,
     475,   476,   477,    -1,    -1,    -1,   481,    -1,    -1,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    21,    22,
      23,    24,    -1,    26,    27,    28,    29,    -1,    31,    32,
      33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    42,
      43,    -1,    45,    46,    47,    -1,    49,    50,    51,    52,
      53,    -1,    55,    56,    -1,    58,    59,    60,    61,    62,
      63,    -1,    -1,    66,    67,    68,    69,    70,    -1,    72,
      73,    74,    75,    76,    -1,    -1,    -1,    -1,    81,    82,
      83,    84,    85,    -1,    87,    88,    89,    -1,    91,    92,
      93,    94,    95,    -1,    -1,    -1,    99,   100,   101,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   109,   110,   111,   112,
     113,   114,   115,   116,   117,   118,    -1,   120,    -1,   122,
     123,   124,   125,   126,   127,    -1,   129,    -1,   131,   132,
     133,   134,    -1,    -1,   137,   138,   139,   140,   141,    -1,
      -1,    -1,   145,   146,   147,    -1,   149,   150,   151,    -1,
     153,   154,   155,   156,   157,   158,   159,   160,   161,   162,
     163,    -1,   165,    -1,   167,   168,   169,   170,    -1,   172,
      -1,   174,    -1,    -1,    -1,   178,   179,   180,    -1,   182,
      -1,   184,    -1,    -1,    -1,   188,   189,    -1,   191,    -1,
     193,   194,   195,   196,   197,   198,   199,    -1,   201,   202,
     203,   204,    -1,   206,   207,   208,   209,   210,   211,    -1,
     213,    -1,   215,   216,   217,   218,   219,   220,   221,   222,
      -1,   224,    -1,   226,    -1,    -1,   229,    -1,   231,    -1,
     233,   234,   235,   236,   237,    -1,    -1,   240,    -1,   242,
      -1,    -1,   245,   246,   247,    -1,    -1,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,    -1,   276,   277,   278,   279,    -1,   281,    -1,
     283,   284,    -1,   286,    -1,   288,   289,   290,   291,   292,
     293,    -1,   295,   296,    -1,    -1,   299,   300,   301,    -1,
      -1,   304,   305,    -1,   307,    -1,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,    -1,    -1,   321,    -1,
     323,   324,   325,    -1,   327,   328,   329,   330,   331,   332,
      -1,   334,   335,   336,   337,   338,    -1,    -1,   341,    -1,
     343,   344,   345,   346,   347,   348,   349,   350,    -1,   352,
     353,   354,    -1,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,    -1,   367,   368,    -1,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,    -1,   386,   387,   388,   389,   390,    -1,   392,
     393,   394,   395,    -1,   397,    -1,    -1,   400,   401,   402,
      -1,    -1,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,   417,   418,   419,   420,    -1,   422,
     423,    -1,   425,    -1,   427,   428,   429,   430,   431,    -1,
     433,   434,    -1,    -1,    -1,   438,   439,   440,   441,   442,
      -1,   444,   445,   446,   447,   448,   449,   450,   451,    -1,
      -1,   454,   455,   456,   457,   458,   459,    -1,    -1,   462,
     463,   464,   465,   466,   467,   468,    -1,   470,    -1,   472,
      -1,   474,   475,   476,   477,    -1,    -1,    -1,   481,    -1,
      -1,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   500,   501,   502,
     503,   504,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      21,    22,    23,    24,    -1,    26,    27,    28,    29,    -1,
      31,    32,    33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    42,    43,    -1,    45,    46,    47,    48,    49,    50,
      51,    -1,    53,    54,    55,    56,    -1,    58,    59,    60,
      61,    62,    63,    -1,    -1,    66,    67,    68,    69,    70,
      -1,    72,    73,    74,    75,    -1,    -1,    78,    -1,    80,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    -1,
      91,    92,    93,    94,    95,    -1,    -1,    98,    99,   100,
     101,   102,   103,   104,   105,    -1,    -1,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,    -1,   120,
      -1,   122,   123,   124,   125,   126,   127,    -1,   129,    -1,
     131,   132,   133,   134,    -1,    -1,   137,   138,   139,   140,
     141,    -1,    -1,    -1,   145,   146,   147,    -1,   149,   150,
     151,    -1,   153,   154,   155,   156,    -1,   158,   159,   160,
     161,   162,    -1,    -1,   165,    -1,   167,   168,   169,   170,
      -1,   172,    -1,   174,   175,    -1,   177,   178,   179,    -1,
     181,   182,    -1,   184,    -1,    -1,    -1,    -1,    -1,    -1,
     191,    -1,   193,   194,   195,   196,   197,   198,   199,   200,
     201,   202,   203,   204,    -1,   206,   207,   208,   209,   210,
     211,    -1,   213,   214,    -1,   216,   217,   218,   219,   220,
     221,   222,    -1,   224,    -1,   226,   227,   228,   229,   230,
     231,    -1,   233,   234,   235,   236,   237,    -1,    -1,   240,
     241,   242,   243,    -1,   245,   246,   247,    -1,    -1,   250,
     251,   252,   253,   254,    -1,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,    -1,
      -1,    -1,   283,   284,   285,   286,    -1,    -1,   289,   290,
     291,   292,   293,    -1,   295,   296,    -1,    -1,   299,   300,
     301,    -1,    -1,   304,    -1,   306,   307,   308,    -1,   310,
     311,   312,   313,   314,   315,   316,   317,   318,    -1,    -1,
     321,    -1,   323,   324,    -1,   326,   327,   328,    -1,   330,
     331,   332,    -1,   334,   335,   336,   337,   338,    -1,    -1,
     341,    -1,   343,   344,   345,   346,   347,   348,   349,   350,
      -1,   352,   353,   354,    -1,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,    -1,   367,   368,   369,   370,
     371,   372,    -1,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,    -1,   386,   387,   388,   389,   390,
     391,   392,    -1,   394,   395,    -1,   397,   398,    -1,   400,
     401,   402,    -1,    -1,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,    -1,   418,    -1,   420,
      -1,   422,   423,    -1,   425,   426,   427,   428,   429,   430,
     431,    -1,   433,   434,    -1,    -1,    -1,   438,   439,    -1,
     441,    -1,    -1,   444,   445,   446,   447,   448,   449,   450,
     451,    -1,    -1,   454,   455,   456,   457,   458,   459,   460,
      -1,   462,   463,   464,   465,   466,    -1,   468,    -1,   470,
     471,   472,    -1,   474,   475,   476,   477,    -1,    -1,    -1,
     481,    -1,    -1,   484,   485,   486,   487,   488,   489,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     501,   502,   503,   504,    -1,    -1,    -1,    21,    22,    23,
      24,    -1,    26,    27,    28,    29,    -1,    31,    32,    33,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    42,    43,
      -1,    45,    46,    47,    -1,    49,    50,    51,    52,    53,
      -1,    55,    56,    -1,    58,    59,    60,    61,    62,    63,
      -1,    -1,    66,    67,    68,    69,    70,    -1,    72,    73,
      74,    75,    76,    -1,    -1,    -1,    80,    81,    82,    83,
      84,    85,    -1,    87,    88,    89,    -1,    91,    92,    93,
      94,    95,    -1,    -1,    -1,    99,   100,   101,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,    -1,   120,    -1,   122,   123,
     124,   125,   126,   127,    -1,   129,    -1,   131,   132,   133,
     134,    -1,    -1,   137,   138,   139,   140,   141,    -1,    -1,
      -1,   145,   146,   147,    -1,   149,   150,   151,    -1,   153,
     154,   155,   156,   157,   158,   159,   160,   161,   162,   163,
      -1,   165,    -1,   167,   168,   169,   170,    -1,   172,    -1,
     174,    -1,    -1,    -1,   178,   179,   180,    -1,   182,    -1,
     184,    -1,    -1,    -1,   188,   189,    -1,   191,    -1,   193,
     194,   195,   196,   197,   198,   199,    -1,   201,   202,   203,
     204,    -1,   206,   207,   208,   209,   210,   211,    -1,   213,
      -1,   215,   216,   217,   218,   219,   220,   221,   222,    -1,
     224,    -1,   226,    -1,    -1,   229,    -1,   231,    -1,   233,
     234,   235,   236,   237,    -1,    -1,   240,    -1,   242,    -1,
      -1,   245,   246,   247,    -1,    -1,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,    -1,   276,   277,   278,   279,    -1,   281,    -1,   283,
     284,    -1,   286,    -1,   288,   289,   290,   291,   292,   293,
      -1,   295,   296,    -1,    -1,   299,   300,   301,    -1,    -1,
     304,   305,    -1,   307,    -1,   309,   310,   311,   312,   313,
     314,   315,    -1,   317,   318,    -1,    -1,   321,    -1,   323,
     324,   325,    -1,   327,   328,   329,   330,   331,   332,    -1,
     334,   335,   336,   337,   338,    -1,    -1,   341,    -1,   343,
      -1,   345,   346,   347,   348,   349,   350,    -1,   352,   353,
     354,    -1,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,    -1,   367,   368,    -1,   370,   371,   372,   373,
      -1,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,    -1,   386,   387,   388,   389,   390,    -1,   392,   393,
     394,   395,    -1,   397,    -1,    -1,   400,   401,   402,    -1,
      -1,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,   417,   418,   419,   420,    -1,   422,   423,
      -1,   425,    -1,   427,   428,   429,   430,   431,    -1,   433,
     434,    -1,    -1,    -1,   438,   439,   440,   441,   442,    -1,
     444,   445,   446,   447,   448,   449,   450,   451,    -1,    -1,
     454,   455,   456,   457,   458,   459,    -1,    -1,   462,   463,
     464,   465,   466,   467,   468,    -1,   470,    -1,   472,    -1,
     474,   475,   476,   477,    -1,    -1,    -1,   481,    -1,    -1,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,   499,   500,   501,   502,   503,
     504,    21,    21,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    32,    32,    34,    35,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    51,    51,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      60,    60,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    72,    72,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    83,    83,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    95,    95,    97,    97,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   115,   115,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   129,
     129,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     140,   140,    -1,    -1,    -1,    -1,    -1,    -1,   148,   148,
      -1,    -1,    -1,    -1,    -1,    -1,   156,   156,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   172,   172,    -1,    -1,   176,   176,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   219,
     219,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   246,   246,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   327,   327,    -1,
     330,   330,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   362,   362,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   371,   371,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   385,   385,    -1,    -1,    -1,
      -1,    -1,   392,   392,    -1,    -1,    -1,   397,   397,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   408,   408,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     420,   420,    -1,    -1,   424,   424,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   444,   444,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   462,   462,    -1,    -1,    -1,   467,   467,    -1,
      -1,   471,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   483,   483,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   507,   507,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   521,   521
};

/* YYSTOS[STATE-NUM] -- The symbol kind of the accessing symbol of
   state STATE-NUM.  */
static const yytype_int16 yystos[] =
{
       0,    21,    32,    34,    35,    46,    51,    60,    72,    83,
      95,    97,   115,   129,   131,   140,   148,   156,   158,   159,
     172,   176,   204,   219,   246,   327,   330,   362,   371,   385,
     392,   397,   408,   420,   424,   444,   459,   462,   467,   483,
     507,   521,   536,   537,   538,   539,   540,   547,   558,   559,
     560,   563,   564,   566,   583,   631,   642,   644,   647,   650,
     652,   655,   656,   660,   667,   669,   676,   680,   681,   682,
     689,   693,   709,   712,   715,   733,   770,   771,   774,   776,
     777,   778,   779,   781,   782,   834,   835,   983,   985,   986,
     987,   992,   995,  1001,  1002,  1005,   438,   486,   984,   208,
     378,   386,   424,   474,   112,   561,   984,     3,    21,    22,
      23,    24,    26,    27,    28,    29,    31,    32,    33,    42,
      43,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    58,    59,    60,    61,    62,    63,    66,
      67,    68,    69,    70,    72,    73,    74,    75,    76,    78,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      91,    92,    93,    94,    95,    98,    99,   100,   101,   102,
     103,   104,   105,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   120,   122,   123,   124,   125,   126,
     127,   129,   131,   132,   133,   134,   137,   138,   139,   140,
     141,   145,   146,   147,   149,   150,   151,   153,   154,   155,
     156,   157,   158,   159,   160,   161,   162,   163,   165,   167,
     168,   169,   170,   172,   174,   175,   177,   178,   179,   180,
     181,   182,   184,   188,   189,   191,   193,   194,   195,   196,
     197,   198,   199,   200,   201,   202,   203,   204,   206,   207,
     208,   209,   210,   211,   213,   214,   215,   216,   217,   218,
     219,   220,   221,   222,   224,   226,   227,   228,   229,   230,
     231,   233,   234,   235,   236,   237,   240,   241,   242,   243,
     245,   246,   247,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,   281,   283,   284,   285,   286,   288,   289,
     290,   291,   292,   293,   295,   296,   299,   300,   301,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   321,   323,   324,   325,   326,   327,
     328,   329,   330,   331,   332,   334,   335,   336,   337,   338,
     341,   343,   344,   345,   346,   347,   348,   349,   350,   352,
     353,   354,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     397,   398,   400,   401,   402,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,   417,   418,   419,
     420,   422,   423,   425,   426,   427,   428,   429,   430,   431,
     433,   434,   438,   439,   440,   441,   442,   444,   445,   446,
     447,   448,   449,   450,   451,   454,   455,   456,   457,   458,
     459,   460,   462,   463,   464,   465,   466,   467,   468,   470,
     471,   472,   474,   475,   476,   477,   481,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,   498,   499,   500,   501,   502,   503,   504,   634,   635,
     636,   894,   967,   971,   974,     3,   180,   255,   417,   565,
     634,   971,   984,    54,   521,   578,     5,   112,   182,   247,
     302,   340,   378,   428,   430,   447,   453,   456,   629,   643,
     688,   970,     5,    30,   330,   965,   971,   972,   112,   561,
      23,    78,    94,   112,   151,   161,   173,   178,   208,   254,
     258,   324,   340,   341,   375,   378,   386,   389,   410,   424,
     431,   441,   447,   474,   661,   662,   665,   984,   965,    97,
     140,   471,   521,   539,   540,   547,   563,   564,   566,   583,
     631,   644,   647,   650,   652,   655,   656,   660,   667,   672,
     676,   682,   689,   709,   770,   771,   774,   776,   983,   985,
     987,   992,   995,  1001,  1005,   112,    72,   219,    65,    76,
      78,   102,   103,   104,   105,   106,   107,   108,   163,   186,
     238,   248,   249,   288,   298,   309,   325,   374,   391,   419,
     440,   442,   446,   460,   467,   521,   777,   835,   837,   839,
     840,   847,   848,   894,   896,   897,   962,   971,   972,   112,
     710,   970,   971,   710,   971,   965,    30,   433,   438,   971,
     993,   994,  1003,   984,    30,   135,   790,   791,   182,   247,
     378,   390,   433,   996,   997,  1003,   984,   521,   776,   782,
     971,  1004,   847,   971,   424,   787,   962,   177,   521,   989,
     521,   349,   783,   784,   965,   783,     3,    52,    53,    55,
      56,    68,    69,    76,   116,   117,   157,   163,   169,   180,
     188,   189,   215,   221,   222,   224,   255,   274,   276,   281,
     288,   290,   305,   309,   325,   329,   346,   373,   393,   401,
     417,   419,   433,   434,   440,   442,   446,   467,   468,   490,
     491,   492,   493,   494,   495,   496,   497,   498,   499,   500,
     634,   641,   711,   777,   778,     0,   524,   471,   670,   124,
     218,   458,   152,   223,   303,   452,   793,   794,   777,   779,
     781,   525,    30,   433,   438,   776,  1004,   198,   962,   965,
     198,   962,   198,   847,   198,   962,   970,   521,   519,   523,
     946,   948,   776,   962,   198,   962,   428,   430,   428,   430,
     360,   185,   198,   962,   962,   178,   254,   349,   386,   424,
     474,   645,   112,   208,    30,   965,   198,     3,   260,   441,
     111,   424,   424,   474,   185,   381,     3,    48,    53,    54,
      55,    56,    68,    69,    78,    80,    86,    98,   102,   103,
     104,   105,   108,   116,   117,   139,   169,   175,   177,   181,
     198,   200,   214,   221,   222,   224,   227,   228,   230,   241,
     243,   255,   274,   275,   276,   285,   290,   306,   308,   326,
     346,   369,   373,   391,   393,   398,   401,   417,   426,   433,
     434,   446,   452,   460,   468,   471,   634,   637,   666,   858,
     860,   862,   864,   866,   868,   870,   871,   872,   874,   875,
     876,   878,   879,   975,   198,   663,   971,   976,   198,   963,
     965,   198,   965,   521,   668,   302,   672,     3,    48,    52,
      53,    54,    55,    56,    68,    69,    76,    78,    80,    86,
      98,   102,   103,   104,   105,   108,   116,   117,   157,   163,
     169,   175,   177,   180,   181,   188,   189,   200,   214,   215,
     221,   222,   224,   227,   228,   230,   241,   243,   255,   274,
     275,   276,   281,   285,   288,   290,   305,   306,   308,   309,
     325,   326,   329,   346,   369,   373,   391,   393,   398,   401,
     417,   419,   426,   433,   434,   440,   442,   446,   460,   467,
     468,   471,   490,   491,   492,   493,   494,   495,   496,   497,
     498,   499,   500,   634,   638,   673,   675,   676,   678,   679,
     670,   970,   971,   565,   710,   521,   521,   171,   521,   521,
     521,   521,   733,   777,   848,   521,   521,   521,   521,   962,
     521,   521,   176,   521,   521,   521,   521,   777,   835,   839,
     840,    40,   841,   842,   971,   841,   385,   525,   780,    98,
     177,   214,   230,   241,   275,   326,   369,   844,   842,    40,
     841,   843,   971,   507,   852,   514,   948,   970,   510,   521,
     521,   772,   504,   229,   523,   297,     4,     6,     7,     8,
       9,    10,    39,    53,    55,    56,    64,    68,    69,    80,
     116,   117,   119,   157,   164,   169,   188,   189,   221,   222,
     224,   274,   276,   282,   287,   290,   299,   346,   373,   401,
     433,   434,   443,   468,   505,   512,   513,   514,   519,   521,
     527,   528,   533,   534,   777,   824,   863,   866,   869,   870,
     871,   873,   874,   875,   878,   879,   890,   892,   893,   894,
     895,   897,   898,   912,   913,   920,   940,   945,   952,   953,
     954,   967,   968,   969,   970,   971,   951,   953,   996,   996,
     970,   996,   504,   176,   435,   510,   523,   948,   657,   847,
       3,   175,   177,   471,   676,   988,   990,   175,   991,   890,
     924,   925,   971,   783,   525,   521,   978,   257,   522,   522,
     538,   962,   176,   302,   696,   657,    30,   135,   788,   788,
      58,   788,   166,   171,   244,   294,   799,   801,   802,   827,
     829,   830,   831,   793,   794,   521,   504,   229,   157,    26,
      32,   140,   301,   358,   362,   392,   464,   552,   555,   556,
     358,   157,    40,    59,   110,   207,   259,   267,   279,   311,
     358,   364,   386,   392,   408,   541,   544,   555,   157,   358,
     392,   555,   157,   358,   392,   555,    40,   562,     3,    30,
      48,    54,    78,    80,    86,    98,   102,   103,   104,   105,
     108,   135,   175,   177,   180,   181,   200,   214,   227,   228,
     230,   241,   243,   255,   275,   285,   306,   308,   326,   369,
     391,   398,   417,   426,   446,   460,   469,   471,   514,   522,
     634,   639,   890,   927,   928,   973,   979,   890,   947,     3,
      30,    34,    35,    36,    37,    39,    40,    41,    44,    57,
      64,    65,    71,    77,    79,    90,    97,   106,   107,   119,
     121,   128,   135,   136,   144,   148,   152,   164,   166,   171,
     173,   176,   183,   186,   187,   192,   205,   212,   223,   225,
     238,   239,   244,   248,   249,   282,   287,   294,   297,   298,
     302,   303,   322,   333,   342,   351,   366,   385,   403,   421,
     424,   432,   435,   437,   443,   452,   453,   461,   467,   469,
     479,   480,   482,   483,   634,   638,   640,   966,   980,   946,
     522,   521,   618,   282,   176,   112,   629,   962,   282,   648,
      40,   474,   198,   962,   198,   633,   962,   198,   962,   198,
     962,   962,    86,   685,   157,   487,   962,    87,   132,   314,
     429,   470,   877,   877,   877,   521,   865,   865,   329,   521,
     867,   157,   521,    68,    69,   877,   865,   862,   485,   507,
     521,   880,   521,   880,   521,    62,   365,   525,   664,   521,
      39,   861,   521,   113,   114,   195,   196,   261,   262,   263,
     264,   265,   266,   269,   270,   382,   383,   501,   502,   521,
     881,   882,   883,   884,   885,   886,   887,   888,   889,   865,
     157,   525,   664,   523,   977,   157,   525,   664,   157,   297,
     925,   360,   522,   525,     4,   164,   297,   443,   512,   513,
     543,   546,   671,   673,   674,   677,   969,   970,   672,   521,
     573,   577,   435,   890,   925,   521,   969,   969,     3,   881,
     882,   883,   884,   885,   886,   887,   888,   930,   931,   970,
     467,   842,   843,   969,   969,   890,   962,   890,   932,   512,
     513,   891,   892,   913,   920,   934,   521,   890,   924,   935,
     890,    57,   176,   239,   437,   890,   925,   938,   890,   522,
     972,   426,   807,   808,   521,   808,   790,   791,   839,   225,
     785,   230,   306,   845,   839,   845,   230,   844,   230,   845,
     230,   808,   521,   972,   808,   521,   304,   543,   677,   998,
    1000,   927,   860,   929,    40,   242,   971,   521,   519,   777,
     890,   944,   521,   777,   890,   521,   521,   890,   890,   890,
     153,   955,   956,   890,   925,   926,   777,   890,   924,   914,
     915,   916,   972,     9,     3,   982,   948,   521,   970,   521,
     969,   970,     3,     8,    11,    15,    16,    17,    18,    19,
      20,    36,    40,    45,    52,    77,   181,   200,   205,   227,
     228,   243,   282,   285,   299,   302,   398,   505,   508,   509,
     510,   512,   513,   514,   515,   516,   517,   918,   919,   920,
     922,   949,   484,   899,   308,   890,   525,   785,   521,   970,
     949,   523,   948,   785,     3,   119,   247,   543,   879,   970,
     999,   101,   119,  1000,   119,  1000,   971,    40,   971,   522,
     525,   670,   525,   522,   784,   963,   964,    40,   711,   739,
     743,   744,   978,   657,   199,   360,   225,   392,   779,   779,
      30,   514,   795,   796,   890,    58,   779,   789,   168,   278,
     815,   233,   279,   345,   395,   458,     4,     9,    30,   810,
     890,   512,   513,   811,   812,   890,   892,   827,   828,   802,
     801,   799,   800,   171,   830,   292,   832,   799,   827,   925,
     242,   962,    71,    79,    90,   173,   198,   333,   453,   600,
     610,   625,   971,    79,    90,   775,    90,   775,   521,   435,
     521,   598,   253,   456,   598,    90,   525,   435,   962,   862,
     543,    58,   545,   543,   543,   110,   259,   267,    58,   435,
     483,   507,   542,   272,   378,   542,   544,   847,    90,   435,
     775,   378,   962,   435,   378,   971,   573,   927,   927,   928,
     522,   525,   793,   794,    13,    14,   520,   532,   435,   617,
     622,   971,   483,   576,   157,   970,   962,   349,   424,   474,
     645,   280,   473,   713,   157,    97,   583,   649,   650,   682,
    1005,   149,   860,   962,   282,   541,   651,   282,    40,   521,
     618,   282,   618,   282,   521,   646,   198,   612,   686,   971,
       3,   664,   521,   926,   969,   666,   929,   877,   877,    39,
     861,   433,   433,   969,   969,   857,   971,   860,   857,   519,
     519,   969,   969,   435,   435,   435,   435,   663,   976,   966,
     523,   963,   965,   965,   976,   522,   672,   678,     4,   969,
       4,   969,   575,   582,   980,    54,    99,   125,   146,   150,
     172,   175,   193,   287,   295,   316,   343,   579,   970,    40,
     522,   890,   522,   522,   522,   176,   522,   522,   525,   522,
     322,   933,   522,   891,   891,    11,    15,    18,    19,    20,
     205,   227,   299,   508,   509,   510,   512,   513,   514,   515,
     516,   517,   920,   891,   522,   849,   850,   896,   171,   176,
     936,   937,   525,   522,    40,   938,   925,   938,   938,   176,
     522,    40,   841,   521,     4,     9,   803,   805,   806,   971,
     964,   953,   951,   182,   247,   424,   428,   430,   456,   786,
     962,   480,   853,   839,   297,   461,   846,   839,   230,   839,
     839,   854,   855,   972,   521,   854,   972,   525,   522,   525,
     522,   525,   656,   689,   773,   776,   985,   925,   926,   479,
     941,   942,   514,   970,     8,    15,    18,    19,    20,   508,
     509,   510,   512,   513,   514,   515,   516,   517,   918,   923,
     971,   522,   925,   521,   971,   360,   960,   171,   520,   522,
     525,   525,   529,   532,   925,   890,   889,   889,   860,   890,
     890,   890,   890,   890,   890,   890,     5,   980,   981,   433,
      44,   421,   950,   976,   890,   890,   521,   777,   939,   135,
     164,   282,   287,   292,   443,   454,   890,   287,   521,   890,
     435,    52,   181,   200,   205,   243,   398,   890,   890,   890,
     890,   890,   890,   890,   890,   890,   890,    30,    37,   403,
     917,   946,   187,   167,   900,   373,   521,   913,   954,   176,
     836,   927,   514,   836,   521,   970,   971,   962,   988,   558,
     962,   890,   525,   522,   521,   510,    30,    37,   396,   742,
     232,   525,   736,   461,   659,   691,   962,   521,   695,   705,
     706,   708,   971,    41,   128,   797,   797,   525,   461,   797,
     272,   779,   373,   374,   512,   513,   812,   814,   892,   395,
     233,   298,   321,   321,   525,   516,     4,   813,   969,   813,
     373,   374,   814,   961,   962,   286,   400,   833,   828,   800,
     522,   358,   555,   521,   198,   610,   965,   233,   282,   233,
     461,   521,   603,   859,   860,   965,   971,   198,   965,   198,
     971,    26,   140,   392,   551,   554,   594,   608,   980,   965,
     602,   621,   980,   965,   552,   965,   358,   392,   541,   555,
     543,   976,   965,   543,   976,   965,   543,   358,   392,   555,
     965,   965,   965,   965,   358,   392,   555,   965,   965,   793,
     793,   793,   469,   928,   199,   363,   792,   890,   890,   890,
     947,   338,   572,   522,   525,   295,   176,   435,   567,   962,
     176,   474,   633,   962,   962,   962,   425,   962,   302,   629,
     521,   777,   521,   157,   157,   156,   776,   243,   600,   610,
     613,   616,   626,   628,   971,   483,   485,   605,   157,   483,
     687,   157,   522,   927,    40,   282,   297,   925,   522,   522,
     664,   522,   519,   504,   504,   522,   522,   522,   525,   860,
     522,   969,   520,   969,   522,   522,   882,   884,   885,   886,
     885,   886,   886,   664,   966,   664,   297,   664,   522,   525,
     514,   521,   543,   574,   677,    40,   571,   970,   571,   282,
     287,   343,   571,    58,   571,   573,   860,   522,   890,   890,
     890,   936,   860,   891,   891,   891,   891,   891,   135,   282,
     292,   891,   891,   891,   891,   891,   891,   891,   891,   891,
     891,   522,   525,    40,   851,   890,   890,   937,   936,   860,
     522,   522,   522,   925,   860,   964,   321,   516,   321,   374,
     516,   521,   521,   522,   785,   428,   430,   428,   430,   962,
     787,   787,   787,   890,   187,   816,   890,   521,   839,   846,
     522,   525,   860,   854,   522,   998,   860,   522,   520,   890,
     144,   942,   943,   956,   522,   522,   523,   522,   964,   521,
     890,   957,   971,   890,   914,   890,   522,   522,   504,   891,
     891,   150,   925,   176,   135,   164,   287,   292,   443,   454,
     521,   150,   923,   890,   421,   950,   890,   939,   890,   435,
     521,   777,   521,   521,   160,   901,   837,   838,   853,   793,
     956,   853,   969,   889,   978,   773,    25,   319,   320,   396,
     399,   436,   478,   737,   740,     9,   396,   741,     9,    16,
     508,   513,   519,   521,   752,   753,   754,   755,   762,   763,
     764,   767,   768,   742,   744,   480,   732,   838,   480,   658,
     119,   310,   521,   690,   776,    40,   701,   708,   525,   836,
     510,   949,   506,   798,   798,   796,   299,   918,   921,   798,
       4,   969,   814,   298,   458,   811,   525,   252,   435,   890,
     282,   625,   521,   157,   521,   603,   208,   622,   623,   584,
      40,   180,   593,   619,   584,    26,   140,   362,   364,   392,
     548,   549,   550,   556,   557,   157,   664,   157,   664,   594,
     608,   594,   522,   525,   587,   970,   522,   525,   510,   523,
     435,   378,    90,   435,   775,   378,   435,   435,   435,   378,
     792,   792,   792,   928,   289,   289,   522,   520,   411,   412,
     581,   970,   617,   572,   176,   970,   962,    40,   521,   618,
     646,   521,   648,   360,   424,   653,   654,   970,   622,   962,
     633,   962,   965,   483,   632,   962,   522,   525,   295,   598,
     295,   297,   597,   962,   598,    40,   962,   522,   424,   890,
     157,   962,   522,   861,   969,   880,   880,   861,   971,   861,
     520,   520,   976,   575,   569,   580,   677,   970,   970,   287,
     622,   514,   622,   970,   514,   622,   970,   522,   522,   937,
     176,   135,   292,   521,   852,   849,   521,   522,   522,   522,
     971,   803,   853,   787,   787,   787,   787,   962,   962,   962,
      58,   192,   825,   964,   855,    77,   856,   522,   432,   890,
     148,   960,   923,   522,   890,   957,   958,   959,    40,   205,
     522,   889,   890,    36,    36,   890,   522,   890,   176,   521,
     929,   890,   522,   150,   891,   891,   150,   150,   890,   890,
     794,   480,   890,   307,   905,   525,   816,   792,   960,   816,
     522,   522,   737,   740,   737,   737,   737,   740,   740,   740,
     513,   762,   509,   519,   739,   751,   711,   765,   766,   754,
     754,   526,   745,   766,   512,   514,   527,   528,   747,   282,
     505,   512,   513,   769,   892,   913,    80,   890,   366,   699,
     467,   423,   460,   700,   694,   704,   971,   297,   697,   971,
     522,   525,   695,   658,   890,   168,   237,   521,   798,   298,
     962,   965,   522,   157,   623,   610,   623,   584,   612,   525,
     522,   121,   212,   279,   282,   609,   521,    33,    58,   630,
     619,    71,    77,    90,   119,   121,   212,   282,   287,   333,
     351,   453,   461,   589,   590,   604,   180,   119,   197,   282,
     598,   542,   111,   119,   180,   282,   410,   413,   544,   598,
     392,   550,   447,   965,   971,   554,   621,     3,    48,    54,
      78,    80,    86,    98,   102,   103,   104,   105,   108,   175,
     177,   180,   181,   200,   214,   227,   228,   230,   241,   243,
     255,   275,   281,   285,   299,   306,   308,   326,   369,   391,
     393,   398,   417,   426,   446,   452,   460,   471,   512,   513,
     543,   585,   624,   634,   640,   860,   921,   970,   973,   980,
     965,   965,   965,   965,   965,   965,   965,   965,   965,   965,
     522,   522,   522,   793,   542,   581,   970,   521,   776,   616,
     687,    40,   722,   727,   962,   629,   198,   962,   522,   525,
     522,   651,    40,   521,   668,   111,   279,   607,   605,   613,
      83,   618,   776,   646,   776,   612,   461,   684,   520,   860,
     664,   522,   525,   622,   891,   176,   521,   929,   854,   522,
     525,   522,   816,   962,   962,   962,   962,    30,   100,   188,
     372,   514,   521,   817,   818,   819,   820,   821,   822,   823,
     890,   890,   482,   902,   522,   976,   890,   522,   525,   522,
     971,   890,   892,   890,   890,   890,   929,   522,   890,    36,
      36,   890,   890,   150,   522,   522,   890,   522,   521,   906,
     971,   825,   522,   825,   970,   187,   190,   738,   519,   740,
     520,   227,   532,   760,   761,   522,   512,   754,   520,     9,
     746,   769,   769,   769,   769,    11,    15,    16,    17,    18,
      19,    20,    36,    45,    52,    77,   181,   200,   205,   227,
     228,   243,   282,   285,   302,   398,   505,   508,   509,   510,
     512,   513,   514,   515,   516,   517,   920,   308,   521,   952,
     466,   522,   525,   949,    88,   699,   510,   708,   699,   923,
     584,   610,   522,   522,   483,   615,   122,   201,   210,   121,
     463,   890,   119,    40,   521,   976,   965,   891,   122,   201,
     121,   287,   233,   962,   615,    85,   630,   198,   287,   543,
     890,   630,   287,   512,   513,   546,   971,   860,   664,   664,
     255,   417,   973,   977,   510,   435,   435,   792,   573,   461,
     568,   570,   622,   632,   522,    40,   424,   890,   525,   716,
     279,   339,   731,    40,   424,   282,   521,   970,   687,   156,
     776,   616,   632,   111,   154,   206,   597,   124,   140,   332,
     687,   483,  1006,    40,   297,   683,   971,   521,   580,   891,
     929,   522,   522,     9,   359,   809,   825,   521,   394,   521,
     522,   525,   903,   904,   971,   342,   826,   957,   520,   198,
     522,   890,   890,   890,   522,   907,   971,   902,   970,   902,
     755,   747,   732,   521,   531,   711,   759,   526,   513,   762,
     525,   860,   769,   769,   769,   769,   769,   769,   769,   433,
     421,   950,   976,   769,   769,   939,   135,   164,   282,   287,
     292,   443,   454,   769,   287,   769,   435,    52,   200,   205,
     243,   398,   769,   769,   769,   769,   769,   769,   769,   769,
     769,   769,   913,   734,   735,   954,   525,   776,   310,   776,
     694,   297,   521,   692,   890,   522,   351,   615,   521,   606,
     584,   522,   197,   521,   890,   282,   590,   615,   618,   965,
      40,   157,   856,   977,   516,   585,   965,   965,   522,   542,
     126,   522,   605,   776,   776,   722,   522,   339,    38,   521,
     725,   730,   234,   711,   962,   157,    40,   965,   632,   522,
      30,    82,    91,   120,   197,   209,   410,   413,   601,   601,
     374,   374,    40,    63,    71,   247,   424,   890,   962,   521,
     698,   707,   896,   971,   522,   522,   521,   902,   925,   521,
     925,   819,   525,    40,   890,   461,   804,   890,   316,   908,
     826,   826,   732,    96,   750,   758,   759,   759,   747,   746,
     504,   891,   891,   150,   176,   135,   164,   287,   292,   443,
     454,   521,   150,   769,   421,   950,   769,   939,   769,   435,
     522,   525,   700,    90,   707,   136,   962,   584,   611,   614,
     980,   414,   476,   591,   592,   521,   586,   890,   522,   257,
     627,   197,   461,   553,   516,   447,   573,   970,   687,   597,
    1006,   716,   142,   355,   714,   711,   726,   728,    30,   711,
     521,   962,   776,   668,   605,   776,    71,   300,    71,   776,
     684,   890,   522,   525,    77,   702,   702,     9,   826,   522,
     818,   522,   904,   906,   376,   520,    58,   793,   804,   804,
     750,   891,   522,   526,   530,   529,   769,    36,    36,   769,
     769,   176,   521,   929,   769,   150,   891,   891,   150,   150,
     769,   522,   734,   466,   965,   522,   283,   458,   618,   522,
     525,   510,   541,   522,   279,   599,   177,   315,   399,   297,
     595,   596,   620,   586,   890,   447,    40,   425,    40,   522,
     525,    80,   205,   721,   521,  1006,   632,   597,  1006,   300,
     300,   521,   522,   687,   698,   976,   703,   976,   703,   522,
     804,   522,   806,   924,   344,   374,   909,   119,   749,   756,
     759,   757,   759,   769,   769,   769,   929,   522,   769,    36,
      36,   769,   769,   150,   962,   776,   853,   392,   627,   614,
     585,   522,   592,   210,   124,   458,   297,   620,   297,   595,
     776,   521,   711,   726,   152,   729,   962,   707,   702,   853,
     797,   797,    52,   101,   449,   890,   910,   911,   910,   522,
       4,     9,   748,   526,   530,   522,   769,   769,   769,   706,
     596,    62,   279,   365,   392,   588,   588,  1006,   724,   727,
     521,   521,   522,   703,   798,   798,   911,   373,   170,   328,
     170,   328,   756,   757,   853,   584,    24,   119,   287,   525,
     723,   404,   728,   711,   720,   687,   797,    36,   724,   522,
     233,   718,   719,   522,   522,   525,   853,   798,   911,   723,
     521,   717,   351,   962,   711,   963,   717,   522,   130,   719,
     962,   717,   731,   234,   711,   721
};

/* YYR1[RULE-NUM] -- Symbol kind of the left-hand side of rule RULE-NUM.  */
static const yytype_int16 yyr1[] =
{
       0,   535,   536,   537,   537,   538,   538,   538,   538,   538,
     538,   538,   538,   538,   538,   538,   538,   538,   538,   538,
     538,   538,   538,   538,   538,   538,   538,   538,   538,   538,
     538,   538,   538,   538,   538,   538,   538,   538,   538,   538,
     538,   538,   538,   538,   538,   538,   538,   547,   547,   547,
     547,   547,   547,   547,   547,   548,   548,   549,   549,   550,
     550,   550,   550,   551,   551,   552,   552,   552,   552,   552,
     552,   552,   552,   552,   552,   552,   552,   552,   552,   552,
     552,   552,   552,   552,   552,   552,   552,   552,   552,   552,
     552,   552,   552,   552,   553,   553,   554,   554,   554,   554,
     555,   555,   556,   557,   557,   557,   655,   655,   655,   655,
     774,   774,   774,   774,   774,   774,   774,   774,   774,   774,
     774,   774,   774,   775,   775,   689,   690,   690,   690,   690,
     690,   691,   691,   692,   692,   692,   693,   693,   694,   695,
     695,   696,   696,   696,   697,   697,   697,   698,   698,   698,
     699,   699,   700,   700,   701,   701,   702,   702,   703,   703,
     704,   704,   705,   705,   706,   706,   707,   707,   708,   652,
     652,   652,   653,   653,   654,   654,   770,   770,   770,   642,
     642,   642,   642,   642,   642,   642,   643,   650,   650,   651,
     651,   667,   667,   667,   668,   668,   540,   540,   541,   541,
     542,   542,   542,   543,   543,   543,   543,   544,   544,   544,
     544,   544,   544,   544,   544,   544,   544,   544,   544,   544,
     544,   545,   545,   546,   546,   546,   983,   983,   983,   983,
     983,   983,   984,   984,   984,   986,   711,   711,   711,   712,
     713,   713,   714,   714,   715,   716,   716,   717,   718,   719,
     720,   720,   721,   721,   722,   723,   723,   724,   725,   725,
     726,   726,   727,   727,   728,   728,   729,   729,   730,   730,
     731,   731,   731,   732,   732,   733,   734,   735,   735,   736,
     736,   737,   737,   737,   738,   738,   738,   739,   739,   740,
     740,   740,   740,   740,   741,   741,   742,   742,   742,   742,
     742,   742,   743,   743,   744,   745,   745,   746,   746,   747,
     747,   747,   747,   747,   748,   748,   749,   749,   750,   750,
     751,   752,   753,   753,   754,   754,   754,   755,   755,   756,
     756,   757,   757,   758,   758,   758,   759,   759,   759,   760,
     760,   761,   761,   762,   762,   762,   763,   763,   764,   764,
     765,   765,   766,   767,   767,   768,   769,   769,   769,   769,
     769,   769,   769,   769,   769,   769,   769,   769,   769,   769,
     769,   769,   769,   769,   769,   769,   769,   769,   769,   769,
     769,   769,   769,   769,   769,   769,   769,   769,   769,   769,
     769,   769,   769,   769,   769,   769,   769,   769,   769,   769,
     769,   769,   769,   769,   769,   769,   769,   769,   769,   769,
     769,   769,   769,   769,   769,   769,   769,   583,   583,   583,
     584,   584,   585,   585,   585,   585,   585,   585,   586,   586,
     587,   588,   588,   588,   588,   588,   589,   589,   589,   589,
     590,   590,   590,   590,   590,   590,   590,   590,   591,   591,
     592,   592,   593,   593,   593,   594,   595,   596,   596,   596,
     596,   596,   597,   597,   597,   597,   598,   599,   599,   600,
     600,   601,   601,   601,   601,   601,   601,   601,   601,   602,
     602,   603,   604,   604,   604,   604,   605,   605,   605,   605,
     606,   607,   607,   607,   608,   609,   609,   609,   609,   609,
     609,   610,   610,   611,   611,   612,   613,   613,   613,   614,
     614,   615,   615,   616,   616,   616,   617,   618,   618,   619,
     619,   620,   621,   621,   621,   621,   622,   622,   623,   623,
     624,   624,   624,   625,   625,   625,   625,   625,   625,   626,
     626,   627,   627,   627,   627,   628,   629,   629,   629,   629,
     629,   629,   629,   629,   630,   630,   660,   660,   660,   660,
     660,   660,   660,   660,   661,   661,   661,   661,   661,   661,
     661,   661,   661,   661,   661,   661,   661,   661,   661,   661,
     661,   661,   662,   662,   662,   662,   662,   662,   663,   663,
     664,   664,   664,   665,   665,   665,   666,   666,   644,   644,
     644,   644,   644,   644,   645,   645,   646,   646,   985,   566,
     566,   567,   567,   568,   568,   569,   569,   570,   570,   571,
     571,   572,   572,   573,   573,   574,   574,   574,   574,   574,
     575,   576,   576,   577,   577,   578,   578,   579,   579,   579,
     579,   579,   579,   579,   579,   579,   579,   579,   579,   579,
     579,   579,   579,   580,   581,   581,   581,   582,   582,   776,
     776,   777,   777,   778,   778,   778,   778,   778,   778,   778,
     778,   779,   779,   780,   780,   781,   781,   781,   781,   781,
     781,   781,   781,   781,   781,   782,   782,   782,   783,   783,
     784,   785,   785,   786,   786,   786,   786,   786,   786,   786,
     786,   786,   787,   787,   788,   788,   788,   789,   790,   790,
     791,   791,   792,   792,   792,   793,   793,   794,   794,   794,
     795,   795,   796,   796,   797,   797,   797,   798,   798,   798,
     799,   799,   799,   799,   800,   800,   801,   801,   801,   801,
     802,   802,   803,   803,   803,   803,   803,   803,   804,   804,
     805,   805,   806,   806,   806,   806,   807,   808,   808,   809,
     809,   810,   810,   810,   810,   810,   811,   812,   812,   812,
     813,   813,   814,   814,   815,   815,   816,   816,   816,   816,
     817,   817,   818,   818,   819,   819,   819,   819,   819,   820,
     821,   822,   823,   824,   824,   825,   825,   826,   826,   827,
     827,   828,   828,   829,   829,   830,   831,   831,   831,   831,
     832,   832,   833,   833,   833,   834,   834,   835,   835,   836,
     836,   837,   837,   838,   838,   839,   839,   839,   839,   839,
     839,   839,   839,   839,   840,   840,   840,   840,   840,   840,
     840,   841,   841,   841,   841,   842,   842,   843,   843,   843,
     843,   843,   844,   844,   844,   844,   845,   845,   846,   846,
     847,   847,   847,   847,   848,   848,   849,   850,   850,   851,
     851,   852,   852,   853,   853,   854,   854,   855,   856,   856,
     857,   857,   858,   858,   859,   859,   860,   860,   860,   860,
     860,   860,   860,   860,   860,   861,   861,   861,   862,   862,
     862,   862,   862,   862,   862,   863,   863,   863,   863,   864,
     865,   865,   866,   866,   866,   866,   866,   866,   866,   866,
     866,   866,   866,   867,   867,   868,   868,   869,   869,   870,
     871,   872,   872,   873,   873,   874,   875,   876,   876,   876,
     876,   876,   876,   877,   877,   878,   878,   878,   878,   879,
     880,   880,   880,   881,   881,   882,   882,   883,   883,   884,
     884,   885,   885,   886,   886,   887,   887,   888,   888,   889,
     889,   889,   889,   889,   889,   889,   889,   889,   889,   889,
     889,   889,   889,   889,   889,   890,   890,   890,   890,   890,
     890,   890,   890,   890,   890,   890,   890,   890,   890,   890,
     890,   890,   890,   890,   890,   890,   890,   890,   890,   890,
     890,   890,   890,   890,   890,   890,   890,   890,   890,   890,
     890,   890,   890,   890,   890,   890,   890,   890,   890,   890,
     890,   890,   890,   890,   890,   890,   890,   890,   890,   890,
     890,   890,   890,   890,   890,   890,   890,   890,   890,   890,
     890,   890,   890,   891,   891,   891,   891,   891,   891,   891,
     891,   891,   891,   891,   891,   891,   891,   891,   891,   891,
     891,   891,   891,   891,   891,   891,   891,   892,   892,   892,
     892,   892,   892,   892,   892,   892,   892,   892,   892,   892,
     892,   892,   893,   893,   893,   893,   893,   894,   894,   894,
     894,   894,   894,   894,   895,   895,   896,   896,   897,   897,
     897,   897,   897,   897,   897,   897,   897,   897,   897,   897,
     897,   897,   897,   897,   897,   897,   897,   897,   897,   897,
     897,   897,   897,   897,   897,   897,   897,   898,   898,   899,
     899,   900,   900,   900,   901,   901,   902,   902,   903,   903,
     904,   905,   905,   905,   906,   907,   907,   908,   908,   909,
     909,   909,   910,   910,   911,   911,   911,   911,   911,   912,
     912,   913,   913,   914,   915,   915,   916,   916,   917,   917,
     917,   918,   918,   919,   919,   919,   919,   919,   919,   919,
     919,   919,   919,   919,   919,   919,   920,   920,   921,   921,
     922,   922,   922,   922,   922,   922,   922,   922,   923,   923,
     924,   924,   925,   925,   926,   926,   927,   927,   928,   928,
     928,   929,   929,   930,   930,   931,   931,   931,   931,   931,
     931,   931,   931,   931,   931,   932,   932,   933,   934,   934,
     935,   935,   935,   935,   935,   935,   936,   937,   938,   938,
     938,   939,   939,   940,   941,   941,   942,   943,   943,   944,
     944,   945,   945,   946,   946,   946,   947,   947,   948,   948,
     949,   949,   950,   950,   951,   951,   952,   952,   953,   953,
     954,   954,   954,   954,   954,   955,   955,   956,   956,   957,
     958,   958,   959,   959,   960,   960,   960,   961,   961,   962,
     962,   963,   963,   964,   964,   965,   966,   967,   967,   968,
     968,   968,   968,   968,   968,   968,   968,   968,   968,   968,
     968,   968,   968,   969,   970,   971,   971,   971,   972,   972,
     973,   973,   973,   974,   974,   974,   975,   975,   975,   976,
     976,   977,   977,   978,   978,   979,   980,   980,   980,   980,
     981,   981,   982,   771,   772,   772,   773,   773,   773,   773,
     647,   647,   648,   648,   649,   649,   649,   649,   682,   682,
     683,   684,   684,   685,   685,   686,   686,   687,   687,   688,
     688,   539,   539,   539,   539,   539,   539,   564,   564,   565,
     565,   680,   680,   681,   669,   669,   669,   669,   670,   670,
     671,   671,   671,   672,   672,   672,   672,   672,   672,   672,
     672,   672,   672,   672,   672,   672,   672,   672,   672,   672,
     672,   672,   672,   672,   672,   672,   672,   672,   672,   672,
     672,   672,   672,   673,   673,   673,   674,   674,   675,   675,
     676,   676,   677,   677,   677,   677,   678,   679,   679,   995,
     995,   995,   995,   996,   996,   996,   996,   997,   997,   997,
     997,   998,   998,   999,   999,   999,   999,   999,   999,   999,
    1000,  1000,   709,   709,   709,   710,   710,   987,   987,   987,
     987,   987,   988,   988,   988,   988,   988,   989,   989,   990,
     990,   991,   991,   656,   656,   657,   657,   657,   658,   658,
     659,   659,   558,   558,   559,   560,   560,   561,   561,   562,
     562,   992,   993,   993,   994,   994,   994,  1001,  1001,  1001,
    1001,  1001,  1001,  1001,  1001,  1002,  1002,  1003,  1003,  1004,
    1004,   563,  1005,  1005,  1005,  1005,  1005,  1006,  1006,  1006,
    1006,   631,   631,   631,   632,   632,   632,   633,   634,   634,
     634,   634,   634,   634,   634,   634,   634,   634,   634,   634,
     634,   634,   634,   634,   634,   634,   634,   634,   634,   634,
     634,   634,   634,   634,   634,   634,   634,   634,   634,   634,
     634,   634,   634,   634,   634,   634,   634,   634,   634,   634,
     634,   634,   634,   634,   634,   634,   634,   634,   634,   634,
     634,   634,   634,   634,   634,   634,   634,   634,   634,   634,
     634,   634,   634,   634,   634,   634,   634,   634,   634,   634,
     634,   634,   634,   634,   634,   634,   634,   634,   634,   634,
     634,   634,   634,   634,   634,   634,   634,   634,   634,   634,
     634,   634,   634,   634,   634,   634,   634,   634,   634,   634,
     634,   634,   634,   634,   634,   634,   634,   634,   634,   634,
     634,   634,   634,   634,   634,   634,   634,   634,   634,   634,
     634,   634,   634,   634,   634,   634,   634,   634,   634,   634,
     634,   634,   634,   634,   634,   634,   634,   634,   634,   634,
     634,   634,   634,   634,   634,   634,   634,   634,   634,   634,
     634,   634,   634,   634,   634,   634,   634,   634,   634,   634,
     634,   634,   634,   634,   634,   634,   634,   634,   634,   634,
     634,   634,   634,   634,   634,   634,   634,   634,   634,   634,
     634,   634,   634,   634,   634,   634,   634,   634,   634,   634,
     634,   634,   634,   634,   634,   634,   634,   634,   634,   634,
     634,   634,   634,   634,   634,   634,   634,   634,   634,   634,
     634,   634,   634,   634,   634,   634,   634,   634,   634,   634,
     634,   634,   634,   634,   634,   634,   634,   634,   634,   634,
     634,   634,   634,   634,   634,   634,   634,   634,   634,   634,
     634,   634,   634,   634,   634,   634,   634,   634,   634,   634,
     634,   634,   634,   634,   634,   634,   634,   634,   634,   634,
     634,   634,   634,   634,   634,   634,   634,   634,   634,   634,
     634,   634,   634,   634,   634,   634,   634,   634,   634,   634,
     634,   634,   634,   634,   634,   634,   634,   634,   634,   634,
     634,   634,   634,   634,   634,   634,   634,   634,   634,   634,
     634,   634,   634,   635,   635,   635,   635,   635,   635,   635,
     635,   635,   635,   635,   635,   635,   635,   635,   635,   635,
     635,   635,   635,   635,   635,   635,   635,   635,   635,   635,
     635,   635,   635,   635,   635,   635,   635,   635,   635,   635,
     635,   635,   635,   635,   635,   635,   635,   635,   635,   635,
     635,   635,   635,   635,   635,   635,   635,   636,   636,   636,
     636,   636,   636,   636,   636,   636,   636,   636,   636,   636,
     636,   636,   636,   636,   636,   636,   636,   636,   636,   636,
     636,   636,   636,   636,   636,   636,   636,   636,   636,   636,
     636,   637,   637,   637,   637,   637,   637,   637,   637,   637,
     637,   637,   637,   637,   637,   637,   637,   637,   637,   637,
     637,   637,   637,   637,   637,   637,   637,   637,   637,   637,
     637,   637,   637,   637,   638,   638,   638,   638,   638,   638,
     638,   638,   638,   638,   638,   638,   638,   638,   638,   638,
     638,   638,   638,   638,   638,   638,   638,   638,   638,   638,
     638,   638,   638,   638,   638,   638,   638,   638,   638,   638,
     638,   638,   638,   638,   638,   638,   638,   638,   638,   638,
     638,   638,   638,   638,   638,   638,   638,   638,   638,   638,
     638,   638,   638,   638,   638,   638,   638,   638,   638,   638,
     638,   638,   638,   638,   638,   638,   638,   638,   638,   638,
     638,   638,   638,   638,   638,   638,   638,   638,   638,   639,
     639,   639,   639,   639,   639,   639,   639,   639,   639,   639,
     639,   639,   639,   639,   639,   639,   639,   639,   639,   639,
     639,   639,   639,   639,   639,   639,   639,   639,   639,   639,
     639,   639,   639,   639,   639,   640,   640,   640,   640,   640,
     640,   640,   640,   640,   640,   640,   640,   640,   640,   640,
     640,   640,   640,   640,   640,   640,   640,   640,   640,   640,
     640,   640,   640,   640,   640,   640,   640,   640,   640,   640,
     640,   640,   640,   640,   640,   640,   640,   640,   640,   640,
     640,   640,   640,   640,   640,   640,   640,   640,   640,   640,
     640,   640,   640,   640,   640,   640,   640,   640,   640,   640,
     640,   640,   640,   640,   640,   640,   640,   640,   641,   641,
     641,   641,   641,   641,   641,   641,   641,   641,   641,   641,
     641,   641,   641,   641,   641,   641,   641,   641,   641,   641,
     641,   641,   641,   641,   641,   641,   641,   641,   641,   641,
     641,   641,   641,   641,   641,   641,   641,   641,   641,   641,
     641,   641,   641,   641,   641,   641,   641,   641,   641,   641,
     641
};

/* YYR2[RULE-NUM] -- Number of symbols on the right-hand side of rule RULE-NUM.  */
static const yytype_int8 yyr2[] =
{
       0,     2,     1,     3,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     0,     4,     6,     4,
       6,     4,     6,     4,     6,     1,     2,     3,     2,     1,
       3,     2,     3,     1,     3,     2,     5,     3,     6,     4,
       6,     6,     6,     5,     5,     6,     9,     4,     5,     7,
       6,     4,     8,     4,     2,     4,     3,     6,     4,     2,
       2,     2,     2,     1,     2,     0,     1,     2,     2,     2,
       1,     3,     4,     2,     1,     0,     2,     3,     2,     3,
       6,     6,     8,     6,     8,     6,     8,     6,     8,     8,
      10,     8,    10,     1,     0,     8,     1,     4,     4,     7,
       2,     1,     3,     4,     3,     0,     1,     0,     2,     3,
       5,     2,     2,     0,     8,     5,     0,     5,     5,     7,
       2,     0,     1,     1,     1,     3,     2,     0,     1,     0,
       1,     3,     1,     3,     1,     2,     1,     3,     2,     6,
       8,     5,     1,     0,     1,     3,     2,     4,     5,     3,
       4,     6,     5,     5,     8,     7,     1,     5,     8,     1,
       0,     3,     9,    12,     3,     0,     4,     6,     1,     2,
       1,     1,     0,     1,     2,     2,     1,     2,     2,     1,
       2,     3,     2,     2,     2,     2,     3,     3,     3,     1,
       3,     1,     0,     1,     2,     2,     2,     2,     2,     2,
       2,     2,     1,     1,     0,     2,     1,     1,     1,     5,
       1,     1,     1,     1,    16,     3,     0,     3,     2,     2,
       1,     3,     5,     0,     5,     3,     0,    13,     1,     0,
       1,     3,     1,     3,     1,     3,     4,     0,     4,     3,
       2,     2,     0,     2,     0,    12,     1,     1,     3,     2,
       0,     1,     1,     0,     1,     1,     0,     2,     0,     2,
       2,     2,     2,     1,     1,     0,     3,     4,     3,     2,
       3,     0,     1,     3,     3,     1,     3,     1,     0,     1,
       1,     1,     5,     0,     1,     1,     2,     0,     3,     0,
       5,     4,     1,     1,     2,     2,     0,     1,     3,     1,
       3,     1,     3,     1,     3,     3,     1,     2,     3,     2,
       0,     1,     1,     1,     2,     1,     2,     3,     2,     1,
       1,     0,     4,     2,     5,     3,     1,     3,     3,     5,
       2,     2,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     2,     2,
       3,     3,     5,     4,     6,     3,     5,     4,     6,     4,
       6,     5,     7,     3,     2,     4,     3,     2,     3,     3,
       3,     3,     4,     3,     4,     3,     4,     5,     6,     6,
       7,     6,     7,     6,     7,     3,     4,     9,    12,    11,
       0,     2,     1,     1,     1,     1,     1,     1,     3,     0,
       1,     2,     1,     1,     2,     2,     3,     1,     1,     2,
       2,     1,     2,     3,     5,     3,     2,     5,     1,     1,
       1,     0,     5,     7,     5,     2,     3,     1,     1,     2,
       2,     0,     3,     4,     4,     0,     3,     2,     0,     3,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       3,     3,     1,     2,     2,     2,     2,     2,     2,     0,
       3,     3,     3,     0,     1,     2,     1,     2,     2,     2,
       2,     3,     4,     1,     3,     1,     1,     1,     1,     3,
       1,     2,     0,     1,     2,     0,     1,     3,     0,     2,
       0,     3,     3,     1,     5,     3,     1,     3,     1,     2,
       1,     4,     5,     5,     6,     3,     7,     4,    11,     1,
       3,     2,     2,     2,     0,     3,     1,     1,     2,     2,
       2,     2,     1,     0,     1,     2,     6,     4,     6,     4,
       6,     8,     4,     6,     1,     1,     1,     1,     1,     2,
       1,     2,     1,     2,     1,     1,     1,     1,     3,     3,
       3,     3,     2,     2,     1,     3,     1,     1,     1,     3,
       1,     1,     0,     1,     1,     1,     1,     3,     8,    11,
      10,     7,    10,     9,     1,     1,     2,     3,     8,    11,
       9,     1,     1,     3,     0,     1,     3,     1,     0,     1,
       0,     1,     0,     1,     3,     1,     1,     1,     3,     0,
       2,     2,     0,     2,     0,     1,     0,     1,     1,     1,
       3,     3,     1,     1,     3,     3,     3,     3,     3,     3,
       4,     3,     2,     1,     1,     1,     1,     1,     3,     1,
       1,     3,     3,     1,     2,     4,     4,     2,     3,     5,
       5,     1,     1,     3,     0,    11,    11,    10,    12,     1,
       2,     5,     4,     4,     4,     2,     2,     3,     1,     3,
       6,     2,     0,     3,     3,     4,     4,     4,     4,     3,
       2,     1,     1,     0,     1,     1,     0,     2,     1,     5,
       1,     0,     2,     2,     0,     1,     0,     3,     5,     5,
       1,     3,     4,     3,     1,     1,     0,     2,     2,     0,
       2,     2,     1,     1,     1,     0,     2,     4,     5,     4,
       2,     3,     2,     2,     2,     2,     1,     2,     3,     0,
       1,     0,     5,     1,     4,     6,     2,     1,     0,     4,
       0,     1,     1,     2,     2,     2,     1,     1,     2,     2,
       1,     1,     1,     1,     1,     1,     3,     3,     3,     0,
       1,     3,     1,     2,     1,     1,     1,     1,     1,     2,
       4,     4,     5,     1,     1,     2,     0,     2,     0,     1,
       3,     1,     0,     1,     2,     3,     2,     4,     2,     3,
       2,     0,     1,     2,     0,     4,     5,     1,     2,     2,
       0,     1,     3,     1,     2,     3,     3,     3,     3,     3,
       3,     1,     4,     2,     3,     4,     5,     4,     5,     4,
       4,     5,     2,     4,     1,     1,     0,     1,     4,     5,
       4,     0,     2,     2,     2,     1,     1,     0,     4,     2,
       1,     2,     2,     4,     2,     6,     2,     1,     3,     4,
       0,     2,     0,     2,     0,     1,     3,     3,     2,     0,
       2,     4,     1,     1,     1,     0,     2,     3,     5,     6,
       2,     3,     5,     5,     5,     3,     4,     0,     1,     1,
       1,     1,     1,     2,     4,     1,     1,     1,     1,     2,
       3,     0,     1,     1,     1,     1,     1,     2,     2,     2,
       2,     2,     1,     3,     0,     1,     1,     1,     1,     5,
       2,     1,     1,     1,     1,     4,     1,     2,     2,     1,
       3,     3,     2,     1,     0,     5,     2,     5,     2,     1,
       3,     3,     0,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     3,     3,     3,
       3,     3,     3,     3,     0,     1,     3,     3,     5,     2,
       2,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     2,     2,     3,     3,     2,
       2,     3,     3,     5,     4,     6,     3,     5,     4,     6,
       4,     6,     5,     7,     3,     2,     4,     3,     2,     3,
       3,     3,     3,     4,     3,     4,     3,     4,     5,     6,
       6,     7,     6,     7,     6,     7,     3,     4,     4,     6,
       1,     6,     4,     1,     3,     2,     2,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     2,     2,     5,     6,     6,     7,     1,     1,     2,
       2,     2,     1,     3,     1,     2,     4,     1,     1,     2,
       2,     4,     1,     1,     3,     3,     1,     3,     6,     7,
       9,     7,     7,     4,     5,     1,     1,     1,     5,     1,
       1,     4,     1,     4,     1,     4,     1,     4,     1,     1,
       1,     1,     1,     1,     6,     6,     4,     4,     4,     4,
       6,     5,     5,     5,     4,     6,     4,     7,     9,     5,
       0,     5,     4,     0,     1,     0,     2,     0,     1,     3,
       3,     2,     2,     0,     6,     1,     0,     3,     0,     2,
       2,     0,     1,     4,     2,     2,     2,     2,     2,     4,
       3,     1,     5,     3,     1,     3,     1,     2,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     4,     1,     4,
       1,     4,     1,     2,     1,     2,     1,     2,     1,     3,
       1,     3,     1,     2,     1,     0,     1,     3,     1,     3,
       3,     1,     3,     3,     0,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     4,     3,     2,     3,     0,
       3,     3,     2,     2,     1,     0,     2,     2,     3,     2,
       1,     1,     3,     5,     1,     2,     4,     2,     0,     1,
       0,     1,     2,     2,     3,     5,     1,     0,     1,     2,
       0,     2,     1,     0,     1,     0,     1,     3,     1,     2,
       3,     2,     1,     3,     5,     4,     2,     1,     0,     3,
       1,     3,     1,     2,     4,     2,     0,     1,     3,     1,
       2,     1,     3,     1,     2,     1,     1,     1,     2,     1,
       1,     2,     1,     1,     2,     7,     2,     5,     3,     3,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       2,     2,     3,     3,     0,     1,     1,     1,     1,     1,
       1,     1,     1,     5,     3,     0,     1,     1,     1,     1,
       4,     7,     2,     0,     1,     1,     1,     1,    13,    16,
       1,     2,     0,     1,     0,     1,     0,     2,     0,     1,
       0,     6,     8,     6,     8,     6,     8,     3,     2,     1,
       0,     4,     6,     3,     2,     4,     3,     5,     1,     0,
       1,     1,     0,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     3,
       1,     1,     1,     1,     1,     1,     2,     1,     1,     2,
       3,     3,     3,     1,     3,     3,     2,     3,     3,     3,
       3,     1,     1,     1,     1,     3,     5,     1,     1,     1,
       1,     3,     2,     2,     3,     1,     1,     4,     5,     5,
       4,     6,     1,     1,     1,     1,     1,     1,     0,     1,
       3,     1,     0,     7,     3,     1,     2,     3,     2,     0,
       2,     0,     2,     4,     5,     3,     5,     1,     0,     2,
       0,     2,     1,     1,     1,     2,     3,     2,     2,     2,
       2,     3,     4,     2,     1,     1,     1,     1,     3,     1,
       3,     2,     9,    12,    11,    12,    14,     3,     4,     4,
       0,     7,    10,     9,     2,     3,     0,     4,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1
};


enum { YYENOMEM = -2 };

#define yyerrok         (yyerrstatus = 0)
#define yyclearin       (yychar = YYEMPTY)

#define YYACCEPT        goto yyacceptlab
#define YYABORT         goto yyabortlab
#define YYERROR         goto yyerrorlab
#define YYNOMEM         goto yyexhaustedlab


#define YYRECOVERING()  (!!yyerrstatus)

#define YYBACKUP(Token, Value)                                    \
  do                                                              \
    if (yychar == YYEMPTY)                                        \
      {                                                           \
        yychar = (Token);                                         \
        yylval = (Value);                                         \
        YYPOPSTACK (yylen);                                       \
        yystate = *yyssp;                                         \
        goto yybackup;                                            \
      }                                                           \
    else                                                          \
      {                                                           \
        yyerror (&yylloc, yyscanner, YY_("syntax error: cannot back up")); \
        YYERROR;                                                  \
      }                                                           \
  while (0)

/* Backward compatibility with an undocumented macro.
   Use YYerror or YYUNDEF. */
#define YYERRCODE YYUNDEF

/* YYLLOC_DEFAULT -- Set CURRENT to span from RHS[1] to RHS[N].
   If N is 0, then set CURRENT to the empty location which ends
   the previous symbol: RHS[0] (always defined).  */

#ifndef YYLLOC_DEFAULT
# define YYLLOC_DEFAULT(Current, Rhs, N)                                \
    do                                                                  \
      if (N)                                                            \
        {                                                               \
          (Current).first_line   = YYRHSLOC (Rhs, 1).first_line;        \
          (Current).first_column = YYRHSLOC (Rhs, 1).first_column;      \
          (Current).last_line    = YYRHSLOC (Rhs, N).last_line;         \
          (Current).last_column  = YYRHSLOC (Rhs, N).last_column;       \
        }                                                               \
      else                                                              \
        {                                                               \
          (Current).first_line   = (Current).last_line   =              \
            YYRHSLOC (Rhs, 0).last_line;                                \
          (Current).first_column = (Current).last_column =              \
            YYRHSLOC (Rhs, 0).last_column;                              \
        }                                                               \
    while (0)
#endif

#define YYRHSLOC(Rhs, K) ((Rhs)[K])


/* Enable debugging if requested.  */
#if YYDEBUG

# ifndef YYFPRINTF
#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#  define YYFPRINTF fprintf
# endif

# define YYDPRINTF(Args)                        \
do {                                            \
  if (yydebug)                                  \
    YYFPRINTF Args;                             \
} while (0)


/* YYLOCATION_PRINT -- Print the location on the stream.
   This macro was not mandated originally: define only if we know
   we won't break user code: when these are the locations we know.  */

# ifndef YYLOCATION_PRINT

#  if defined YY_LOCATION_PRINT

   /* Temporary convenience wrapper in case some people defined the
      undocumented and private YY_LOCATION_PRINT macros.  */
#   define YYLOCATION_PRINT(File, Loc)  YY_LOCATION_PRINT(File, *(Loc))

#  elif defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL

/* Print *YYLOCP on YYO.  Private, do not rely on its existence. */

YY_ATTRIBUTE_UNUSED
static int
yy_location_print_ (FILE *yyo, YYLTYPE const * const yylocp)
{
  int res = 0;
  int end_col = 0 != yylocp->last_column ? yylocp->last_column - 1 : 0;
  if (0 <= yylocp->first_line)
    {
      res += YYFPRINTF (yyo, "%d", yylocp->first_line);
      if (0 <= yylocp->first_column)
        res += YYFPRINTF (yyo, ".%d", yylocp->first_column);
    }
  if (0 <= yylocp->last_line)
    {
      if (yylocp->first_line < yylocp->last_line)
        {
          res += YYFPRINTF (yyo, "-%d", yylocp->last_line);
          if (0 <= end_col)
            res += YYFPRINTF (yyo, ".%d", end_col);
        }
      else if (0 <= end_col && yylocp->first_column < end_col)
        res += YYFPRINTF (yyo, "-%d", end_col);
    }
  return res;
}

#   define YYLOCATION_PRINT  yy_location_print_

    /* Temporary convenience wrapper in case some people defined the
       undocumented and private YY_LOCATION_PRINT macros.  */
#   define YY_LOCATION_PRINT(File, Loc)  YYLOCATION_PRINT(File, &(Loc))

#  else

#   define YYLOCATION_PRINT(File, Loc) ((void) 0)
    /* Temporary convenience wrapper in case some people defined the
       undocumented and private YY_LOCATION_PRINT macros.  */
#   define YY_LOCATION_PRINT  YYLOCATION_PRINT

#  endif
# endif /* !defined YYLOCATION_PRINT */


# define YY_SYMBOL_PRINT(Title, Kind, Value, Location)                    \
do {                                                                      \
  if (yydebug)                                                            \
    {                                                                     \
      YYFPRINTF (stderr, "%s ", Title);                                   \
      yy_symbol_print (stderr,                                            \
                  Kind, Value, Location, yyscanner); \
      YYFPRINTF (stderr, "\n");                                           \
    }                                                                     \
} while (0)


/*-----------------------------------.
| Print this symbol's value on YYO.  |
`-----------------------------------*/

static void
yy_symbol_value_print (FILE *yyo,
                       yysymbol_kind_t yykind, YYSTYPE const * const yyvaluep, YYLTYPE const * const yylocationp, core_yyscan_t yyscanner)
{
  FILE *yyoutput = yyo;
  YY_USE (yyoutput);
  YY_USE (yylocationp);
  YY_USE (yyscanner);
  if (!yyvaluep)
    return;
  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  YY_USE (yykind);
  YY_IGNORE_MAYBE_UNINITIALIZED_END
}


/*---------------------------.
| Print this symbol on YYO.  |
`---------------------------*/

static void
yy_symbol_print (FILE *yyo,
                 yysymbol_kind_t yykind, YYSTYPE const * const yyvaluep, YYLTYPE const * const yylocationp, core_yyscan_t yyscanner)
{
  YYFPRINTF (yyo, "%s %s (",
             yykind < YYNTOKENS ? "token" : "nterm", yysymbol_name (yykind));

  YYLOCATION_PRINT (yyo, yylocationp);
  YYFPRINTF (yyo, ": ");
  yy_symbol_value_print (yyo, yykind, yyvaluep, yylocationp, yyscanner);
  YYFPRINTF (yyo, ")");
}

/*------------------------------------------------------------------.
| yy_stack_print -- Print the state stack from its BOTTOM up to its |
| TOP (included).                                                   |
`------------------------------------------------------------------*/

static void
yy_stack_print (yy_state_t *yybottom, yy_state_t *yytop)
{
  YYFPRINTF (stderr, "Stack now");
  for (; yybottom <= yytop; yybottom++)
    {
      int yybot = *yybottom;
      YYFPRINTF (stderr, " %d", yybot);
    }
  YYFPRINTF (stderr, "\n");
}

# define YY_STACK_PRINT(Bottom, Top)                            \
do {                                                            \
  if (yydebug)                                                  \
    yy_stack_print ((Bottom), (Top));                           \
} while (0)


/*------------------------------------------------.
| Report that the YYRULE is going to be reduced.  |
`------------------------------------------------*/

static void
yy_reduce_print (yy_state_t *yyssp, YYSTYPE *yyvsp, YYLTYPE *yylsp,
                 int yyrule, core_yyscan_t yyscanner)
{
  int yylno = yyrline[yyrule];
  int yynrhs = yyr2[yyrule];
  int yyi;
  YYFPRINTF (stderr, "Reducing stack by rule %d (line %d):\n",
             yyrule - 1, yylno);
  /* The symbols being reduced.  */
  for (yyi = 0; yyi < yynrhs; yyi++)
    {
      YYFPRINTF (stderr, "   $%d = ", yyi + 1);
      yy_symbol_print (stderr,
                       YY_ACCESSING_SYMBOL (+yyssp[yyi + 1 - yynrhs]),
                       &yyvsp[(yyi + 1) - (yynrhs)],
                       &(yylsp[(yyi + 1) - (yynrhs)]), yyscanner);
      YYFPRINTF (stderr, "\n");
    }
}

# define YY_REDUCE_PRINT(Rule)          \
do {                                    \
  if (yydebug)                          \
    yy_reduce_print (yyssp, yyvsp, yylsp, Rule, yyscanner); \
} while (0)

/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
int yydebug;
#else /* !YYDEBUG */
# define YYDPRINTF(Args) ((void) 0)
# define YY_SYMBOL_PRINT(Title, Kind, Value, Location)
# define YY_STACK_PRINT(Bottom, Top)
# define YY_REDUCE_PRINT(Rule)
#endif /* !YYDEBUG */


/* YYINITDEPTH -- initial size of the parser's stacks.  */
#ifndef YYINITDEPTH
# define YYINITDEPTH 200
#endif

/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   YYSTACK_ALLOC_MAXIMUM < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.  */

#ifndef YYMAXDEPTH
# define YYMAXDEPTH 10000
#endif






/*-----------------------------------------------.
| Release the memory associated to this symbol.  |
`-----------------------------------------------*/

static void
yydestruct (const char *yymsg,
            yysymbol_kind_t yykind, YYSTYPE *yyvaluep, YYLTYPE *yylocationp, core_yyscan_t yyscanner)
{
  YY_USE (yyvaluep);
  YY_USE (yylocationp);
  YY_USE (yyscanner);
  if (!yymsg)
    yymsg = "Deleting";
  YY_SYMBOL_PRINT (yymsg, yykind, yyvaluep, yylocationp);

  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  YY_USE (yykind);
  YY_IGNORE_MAYBE_UNINITIALIZED_END
}






/*----------.
| yyparse.  |
`----------*/

int
yyparse (core_yyscan_t yyscanner)
{
/* Lookahead token kind.  */
int yychar;


/* The semantic value of the lookahead symbol.  */
/* Default value used for initialization, for pacifying older GCCs
   or non-GCC compilers.  */
YY_INITIAL_VALUE (static YYSTYPE yyval_default;)
YYSTYPE yylval YY_INITIAL_VALUE (= yyval_default);

/* Location data for the lookahead symbol.  */
static YYLTYPE yyloc_default
# if defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL
  = { 1, 1, 1, 1 }
# endif
;
YYLTYPE yylloc = yyloc_default;

    /* Number of syntax errors so far.  */
    int yynerrs = 0; (void)yynerrs;

    yy_state_fast_t yystate = 0;
    /* Number of tokens to shift before error messages enabled.  */
    int yyerrstatus = 0;

    /* Refer to the stacks through separate pointers, to allow yyoverflow
       to reallocate them elsewhere.  */

    /* Their size.  */
    YYPTRDIFF_T yystacksize = YYINITDEPTH;

    /* The state stack: array, bottom, top.  */
    yy_state_t yyssa[YYINITDEPTH];
    yy_state_t *yyss = yyssa;
    yy_state_t *yyssp = yyss;

    /* The semantic value stack: array, bottom, top.  */
    YYSTYPE yyvsa[YYINITDEPTH];
    YYSTYPE *yyvs = yyvsa;
    YYSTYPE *yyvsp = yyvs;

    /* The location stack: array, bottom, top.  */
    YYLTYPE yylsa[YYINITDEPTH];
    YYLTYPE *yyls = yylsa;
    YYLTYPE *yylsp = yyls;

  int yyn;
  /* The return value of yyparse.  */
  int yyresult;
  /* Lookahead symbol kind.  */
  yysymbol_kind_t yytoken = YYSYMBOL_YYEMPTY;
  /* The variables used to return semantic value and location from the
     action routines.  */
  YYSTYPE yyval;
  YYLTYPE yyloc;

  /* The locations where the error started and ended.  */
  YYLTYPE yyerror_range[3];



#define YYPOPSTACK(N)   (yyvsp -= (N), yyssp -= (N), yylsp -= (N))

  /* The number of symbols on the RHS of the reduced rule.
     Keep to zero when no symbol should be popped.  */
  int yylen = 0;

  YYDPRINTF ((stderr, "Starting parse\n"));

  yychar = YYEMPTY; /* Cause a token to be read.  */

  yylsp[0] = yylloc;
  goto yysetstate;


/*------------------------------------------------------------.
| yynewstate -- push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
yynewstate:
  /* In all cases, when you get here, the value and location stacks
     have just been pushed.  So pushing a state here evens the stacks.  */
  yyssp++;


/*--------------------------------------------------------------------.
| yysetstate -- set current state (the top of the stack) to yystate.  |
`--------------------------------------------------------------------*/
yysetstate:
  YYDPRINTF ((stderr, "Entering state %d\n", yystate));
  YY_ASSERT (0 <= yystate && yystate < YYNSTATES);
  YY_IGNORE_USELESS_CAST_BEGIN
  *yyssp = YY_CAST (yy_state_t, yystate);
  YY_IGNORE_USELESS_CAST_END
  YY_STACK_PRINT (yyss, yyssp);

  if (yyss + yystacksize - 1 <= yyssp)
#if !defined yyoverflow && !defined YYSTACK_RELOCATE
    YYNOMEM;
#else
    {
      /* Get the current used size of the three stacks, in elements.  */
      YYPTRDIFF_T yysize = yyssp - yyss + 1;

# if defined yyoverflow
      {
        /* Give user a chance to reallocate the stack.  Use copies of
           these so that the &'s don't force the real ones into
           memory.  */
        yy_state_t *yyss1 = yyss;
        YYSTYPE *yyvs1 = yyvs;
        YYLTYPE *yyls1 = yyls;

        /* Each stack pointer address is followed by the size of the
           data in use in that stack, in bytes.  This used to be a
           conditional around just the two extra args, but that might
           be undefined if yyoverflow is a macro.  */
        yyoverflow (YY_("memory exhausted"),
                    &yyss1, yysize * YYSIZEOF (*yyssp),
                    &yyvs1, yysize * YYSIZEOF (*yyvsp),
                    &yyls1, yysize * YYSIZEOF (*yylsp),
                    &yystacksize);
        yyss = yyss1;
        yyvs = yyvs1;
        yyls = yyls1;
      }
# else /* defined YYSTACK_RELOCATE */
      /* Extend the stack our own way.  */
      if (YYMAXDEPTH <= yystacksize)
        YYNOMEM;
      yystacksize *= 2;
      if (YYMAXDEPTH < yystacksize)
        yystacksize = YYMAXDEPTH;

      {
        yy_state_t *yyss1 = yyss;
        union yyalloc *yyptr =
          YY_CAST (union yyalloc *,
                   YYSTACK_ALLOC (YY_CAST (YYSIZE_T, YYSTACK_BYTES (yystacksize))));
        if (! yyptr)
          YYNOMEM;
        YYSTACK_RELOCATE (yyss_alloc, yyss);
        YYSTACK_RELOCATE (yyvs_alloc, yyvs);
        YYSTACK_RELOCATE (yyls_alloc, yyls);
#  undef YYSTACK_RELOCATE
        if (yyss1 != yyssa)
          YYSTACK_FREE (yyss1);
      }
# endif

      yyssp = yyss + yysize - 1;
      yyvsp = yyvs + yysize - 1;
      yylsp = yyls + yysize - 1;

      YY_IGNORE_USELESS_CAST_BEGIN
      YYDPRINTF ((stderr, "Stack size increased to %ld\n",
                  YY_CAST (long, yystacksize)));
      YY_IGNORE_USELESS_CAST_END

      if (yyss + yystacksize - 1 <= yyssp)
        YYABORT;
    }
#endif /* !defined yyoverflow && !defined YYSTACK_RELOCATE */


  if (yystate == YYFINAL)
    YYACCEPT;

  goto yybackup;


/*-----------.
| yybackup.  |
`-----------*/
yybackup:
  /* Do appropriate processing given the current state.  Read a
     lookahead token if we need one and don't already have one.  */

  /* First try to decide what to do without reference to lookahead token.  */
  yyn = yypact[yystate];
  if (yypact_value_is_default (yyn))
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* YYCHAR is either empty, or end-of-input, or a valid lookahead.  */
  if (yychar == YYEMPTY)
    {
      YYDPRINTF ((stderr, "Reading a token\n"));
      yychar = yylex (&yylval, &yylloc, yyscanner);
    }

  if (yychar <= YYEOF)
    {
      yychar = YYEOF;
      yytoken = YYSYMBOL_YYEOF;
      YYDPRINTF ((stderr, "Now at end of input.\n"));
    }
  else if (yychar == YYerror)
    {
      /* The scanner already issued an error message, process directly
         to error recovery.  But do not keep the error token as
         lookahead, it is too special and may lead us to an endless
         loop in error recovery. */
      yychar = YYUNDEF;
      yytoken = YYSYMBOL_YYerror;
      yyerror_range[1] = yylloc;
      goto yyerrlab1;
    }
  else
    {
      yytoken = YYTRANSLATE (yychar);
      YY_SYMBOL_PRINT ("Next token is", yytoken, &yylval, &yylloc);
    }

  /* If the proper action on seeing token YYTOKEN is to reduce or to
     detect an error, take that action.  */
  yyn += yytoken;
  if (yyn < 0 || YYLAST < yyn || yycheck[yyn] != yytoken)
    goto yydefault;
  yyn = yytable[yyn];
  if (yyn <= 0)
    {
      if (yytable_value_is_error (yyn))
        goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }

  /* Count tokens shifted since error; after three, turn off error
     status.  */
  if (yyerrstatus)
    yyerrstatus--;

  /* Shift the lookahead token.  */
  YY_SYMBOL_PRINT ("Shifting", yytoken, &yylval, &yylloc);
  yystate = yyn;
  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  *++yyvsp = yylval;
  YY_IGNORE_MAYBE_UNINITIALIZED_END
  *++yylsp = yylloc;

  /* Discard the shifted token.  */
  yychar = YYEMPTY;
  goto yynewstate;


/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
yydefault:
  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;
  goto yyreduce;


/*-----------------------------.
| yyreduce -- do a reduction.  |
`-----------------------------*/
yyreduce:
  /* yyn is the number of a rule to reduce with.  */
  yylen = yyr2[yyn];

  /* If YYLEN is nonzero, implement the default value of the action:
     '$$ = $1'.

     Otherwise, the following line sets YYVAL to garbage.
     This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */
  yyval = yyvsp[1-yylen];

  /* Default location. */
  YYLLOC_DEFAULT (yyloc, (yylsp - yylen), yylen);
  yyerror_range[1] = yyloc;
  YY_REDUCE_PRINT (yyn);
  switch (yyn)
    {
  case 2: /* stmtblock: stmtmulti  */
#line 542 "third_party/libpg_query/grammar/grammar.y"
                        {
				pg_yyget_extra(yyscanner)->parsetree = (yyvsp[0].list);
			}
#line 18047 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 3: /* stmtmulti: stmtmulti ';' stmt  */
#line 558 "third_party/libpg_query/grammar/grammar.y"
                                {
					if ((yyvsp[-2].list) != NIL)
					{
						/* update length of previous stmt */
						updateRawStmtEnd(llast_node(PGRawStmt, (yyvsp[-2].list)), (yylsp[-1]));
					}
					if ((yyvsp[0].node) != NULL)
						(yyval.list) = lappend((yyvsp[-2].list), makeRawStmt((yyvsp[0].node), (yylsp[-1]) + 1));
					else
						(yyval.list) = (yyvsp[-2].list);
				}
#line 18063 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 4: /* stmtmulti: stmt  */
#line 570 "third_party/libpg_query/grammar/grammar.y"
                                {
					if ((yyvsp[0].node) != NULL)
						(yyval.list) = list_make1(makeRawStmt((yyvsp[0].node), 0));
					else
						(yyval.list) = NIL;
				}
#line 18074 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 46: /* stmt: %empty  */
#line 620 "third_party/libpg_query/grammar/grammar.y"
        { (yyval.node) = NULL; }
#line 18080 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 47: /* AlterTableStmt: ALTER TABLE relation_expr alter_table_cmds  */
#line 10 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_TABLE;
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 18093 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 48: /* AlterTableStmt: ALTER TABLE IF_P EXISTS relation_expr alter_table_cmds  */
#line 19 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_TABLE;
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 18106 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 49: /* AlterTableStmt: ALTER INDEX qualified_name alter_table_cmds  */
#line 28 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_INDEX;
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 18119 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 50: /* AlterTableStmt: ALTER INDEX IF_P EXISTS qualified_name alter_table_cmds  */
#line 37 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_INDEX;
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 18132 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 51: /* AlterTableStmt: ALTER SEQUENCE qualified_name alter_table_cmds  */
#line 46 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_SEQUENCE;
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 18145 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 52: /* AlterTableStmt: ALTER SEQUENCE IF_P EXISTS qualified_name alter_table_cmds  */
#line 55 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_SEQUENCE;
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 18158 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 53: /* AlterTableStmt: ALTER VIEW qualified_name alter_table_cmds  */
#line 64 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_VIEW;
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 18171 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 54: /* AlterTableStmt: ALTER VIEW IF_P EXISTS qualified_name alter_table_cmds  */
#line 73 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_VIEW;
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 18184 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 55: /* alter_identity_column_option_list: alter_identity_column_option  */
#line 86 "third_party/libpg_query/grammar/statements/alter_table.y"
                                { (yyval.list) = list_make1((yyvsp[0].defelt)); }
#line 18190 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 56: /* alter_identity_column_option_list: alter_identity_column_option_list alter_identity_column_option  */
#line 88 "third_party/libpg_query/grammar/statements/alter_table.y"
                                { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].defelt)); }
#line 18196 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 57: /* alter_column_default: SET DEFAULT a_expr  */
#line 93 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                { (yyval.node) = (yyvsp[0].node); }
#line 18202 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 58: /* alter_column_default: DROP DEFAULT  */
#line 94 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                { (yyval.node) = NULL; }
#line 18208 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 59: /* alter_identity_column_option: RESTART  */
#line 100 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = makeDefElem("restart", NULL, (yylsp[0]));
				}
#line 18216 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 60: /* alter_identity_column_option: RESTART opt_with NumericOnly  */
#line 104 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = makeDefElem("restart", (PGNode *)(yyvsp[0].value), (yylsp[-2]));
				}
#line 18224 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 61: /* alter_identity_column_option: SET SeqOptElem  */
#line 108 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					if (strcmp((yyvsp[0].defelt)->defname, "as") == 0 ||
						strcmp((yyvsp[0].defelt)->defname, "restart") == 0 ||
						strcmp((yyvsp[0].defelt)->defname, "owned_by") == 0)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("sequence option \"%s\" not supported here", (yyvsp[0].defelt)->defname),
								 parser_errposition((yylsp[0]))));
					(yyval.defelt) = (yyvsp[0].defelt);
				}
#line 18239 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 62: /* alter_identity_column_option: SET GENERATED generated_when  */
#line 119 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = makeDefElem("generated", (PGNode *) makeInteger((yyvsp[0].ival)), (yylsp[-2]));
				}
#line 18247 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 63: /* alter_generic_option_list: alter_generic_option_elem  */
#line 127 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].defelt));
				}
#line 18255 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 64: /* alter_generic_option_list: alter_generic_option_list ',' alter_generic_option_elem  */
#line 131 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt));
				}
#line 18263 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 65: /* alter_table_cmd: ADD_P columnDef  */
#line 140 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AddColumn;
					n->def = (yyvsp[0].node);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 18275 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 66: /* alter_table_cmd: ADD_P IF_P NOT EXISTS columnDef  */
#line 149 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AddColumn;
					n->def = (yyvsp[0].node);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 18287 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 67: /* alter_table_cmd: ADD_P COLUMN columnDef  */
#line 158 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AddColumn;
					n->def = (yyvsp[0].node);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 18299 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 68: /* alter_table_cmd: ADD_P COLUMN IF_P NOT EXISTS columnDef  */
#line 167 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AddColumn;
					n->def = (yyvsp[0].node);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 18311 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 69: /* alter_table_cmd: ALTER opt_column ColId alter_column_default  */
#line 176 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_ColumnDefault;
					n->name = (yyvsp[-1].str);
					n->def = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 18323 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 70: /* alter_table_cmd: ALTER opt_column ColId DROP NOT NULL_P  */
#line 185 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_DropNotNull;
					n->name = (yyvsp[-3].str);
					(yyval.node) = (PGNode *)n;
				}
#line 18334 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 71: /* alter_table_cmd: ALTER opt_column ColId SET NOT NULL_P  */
#line 193 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetNotNull;
					n->name = (yyvsp[-3].str);
					(yyval.node) = (PGNode *)n;
				}
#line 18345 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 72: /* alter_table_cmd: ALTER opt_column ColId SET STATISTICS SignedIconst  */
#line 201 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetStatistics;
					n->name = (yyvsp[-3].str);
					n->def = (PGNode *) makeInteger((yyvsp[0].ival));
					(yyval.node) = (PGNode *)n;
				}
#line 18357 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 73: /* alter_table_cmd: ALTER opt_column ColId SET reloptions  */
#line 210 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetOptions;
					n->name = (yyvsp[-2].str);
					n->def = (PGNode *) (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 18369 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 74: /* alter_table_cmd: ALTER opt_column ColId RESET reloptions  */
#line 219 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_ResetOptions;
					n->name = (yyvsp[-2].str);
					n->def = (PGNode *) (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 18381 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 75: /* alter_table_cmd: ALTER opt_column ColId SET STORAGE ColId  */
#line 228 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetStorage;
					n->name = (yyvsp[-3].str);
					n->def = (PGNode *) makeString((yyvsp[0].str));
					(yyval.node) = (PGNode *)n;
				}
#line 18393 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 76: /* alter_table_cmd: ALTER opt_column ColId ADD_P GENERATED generated_when AS IDENTITY_P OptParenthesizedSeqOptList  */
#line 237 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					PGConstraint *c = makeNode(PGConstraint);

					c->contype = PG_CONSTR_IDENTITY;
					c->generated_when = (yyvsp[-3].ival);
					c->options = (yyvsp[0].list);
					c->location = (yylsp[-4]);

					n->subtype = PG_AT_AddIdentity;
					n->name = (yyvsp[-6].str);
					n->def = (PGNode *) c;

					(yyval.node) = (PGNode *)n;
				}
#line 18413 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 77: /* alter_table_cmd: ALTER opt_column ColId alter_identity_column_option_list  */
#line 254 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetIdentity;
					n->name = (yyvsp[-1].str);
					n->def = (PGNode *) (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 18425 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 78: /* alter_table_cmd: ALTER opt_column ColId DROP IDENTITY_P  */
#line 263 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = AT_DropIdentity;
					n->name = (yyvsp[-2].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 18437 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 79: /* alter_table_cmd: ALTER opt_column ColId DROP IDENTITY_P IF_P EXISTS  */
#line 272 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = AT_DropIdentity;
					n->name = (yyvsp[-4].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 18449 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 80: /* alter_table_cmd: DROP opt_column IF_P EXISTS ColId opt_drop_behavior  */
#line 281 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_DropColumn;
					n->name = (yyvsp[-1].str);
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 18462 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 81: /* alter_table_cmd: DROP opt_column ColId opt_drop_behavior  */
#line 291 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_DropColumn;
					n->name = (yyvsp[-1].str);
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 18475 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 82: /* alter_table_cmd: ALTER opt_column ColId opt_set_data TYPE_P Typename opt_collate_clause alter_using  */
#line 304 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					PGColumnDef *def = makeNode(PGColumnDef);
					n->subtype = PG_AT_AlterColumnType;
					n->name = (yyvsp[-5].str);
					n->def = (PGNode *) def;
					/* We only use these fields of the PGColumnDef node */
					def->typeName = (yyvsp[-2].typnam);
					def->collClause = (PGCollateClause *) (yyvsp[-1].node);
					def->raw_default = (yyvsp[0].node);
					def->location = (yylsp[-5]);
					(yyval.node) = (PGNode *)n;
				}
#line 18493 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 83: /* alter_table_cmd: ALTER opt_column ColId alter_generic_options  */
#line 319 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AlterColumnGenericOptions;
					n->name = (yyvsp[-1].str);
					n->def = (PGNode *) (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 18505 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 84: /* alter_table_cmd: ADD_P TableConstraint  */
#line 328 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AddConstraint;
					n->def = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 18516 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 85: /* alter_table_cmd: ALTER CONSTRAINT name ConstraintAttributeSpec  */
#line 336 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					PGConstraint *c = makeNode(PGConstraint);
					n->subtype = PG_AT_AlterConstraint;
					n->def = (PGNode *) c;
					c->contype = PG_CONSTR_FOREIGN; /* others not supported, yet */
					c->conname = (yyvsp[-1].str);
					processCASbits((yyvsp[0].ival), (yylsp[0]), "ALTER CONSTRAINT statement",
									&c->deferrable,
									&c->initdeferred,
									NULL, NULL, yyscanner);
					(yyval.node) = (PGNode *)n;
				}
#line 18534 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 86: /* alter_table_cmd: VALIDATE CONSTRAINT name  */
#line 351 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_ValidateConstraint;
					n->name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 18545 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 87: /* alter_table_cmd: DROP CONSTRAINT IF_P EXISTS name opt_drop_behavior  */
#line 359 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_DropConstraint;
					n->name = (yyvsp[-1].str);
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 18558 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 88: /* alter_table_cmd: DROP CONSTRAINT name opt_drop_behavior  */
#line 369 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_DropConstraint;
					n->name = (yyvsp[-1].str);
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 18571 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 89: /* alter_table_cmd: SET LOGGED  */
#line 379 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetLogged;
					(yyval.node) = (PGNode *)n;
				}
#line 18581 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 90: /* alter_table_cmd: SET UNLOGGED  */
#line 386 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetUnLogged;
					(yyval.node) = (PGNode *)n;
				}
#line 18591 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 91: /* alter_table_cmd: SET reloptions  */
#line 393 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetRelOptions;
					n->def = (PGNode *)(yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 18602 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 92: /* alter_table_cmd: RESET reloptions  */
#line 401 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_ResetRelOptions;
					n->def = (PGNode *)(yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 18613 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 93: /* alter_table_cmd: alter_generic_options  */
#line 408 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_GenericOptions;
					n->def = (PGNode *)(yyvsp[0].list);
					(yyval.node) = (PGNode *) n;
				}
#line 18624 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 94: /* alter_using: USING a_expr  */
#line 418 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                { (yyval.node) = (yyvsp[0].node); }
#line 18630 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 95: /* alter_using: %empty  */
#line 419 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                { (yyval.node) = NULL; }
#line 18636 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 96: /* alter_generic_option_elem: generic_option_elem  */
#line 425 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = (yyvsp[0].defelt);
				}
#line 18644 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 97: /* alter_generic_option_elem: SET generic_option_elem  */
#line 429 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = (yyvsp[0].defelt);
					(yyval.defelt)->defaction = PG_DEFELEM_SET;
				}
#line 18653 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 98: /* alter_generic_option_elem: ADD_P generic_option_elem  */
#line 434 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = (yyvsp[0].defelt);
					(yyval.defelt)->defaction = PG_DEFELEM_ADD;
				}
#line 18662 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 99: /* alter_generic_option_elem: DROP generic_option_name  */
#line 439 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = makeDefElemExtended(NULL, (yyvsp[0].str), NULL, DEFELEM_DROP, (yylsp[0]));
				}
#line 18670 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 100: /* alter_table_cmds: alter_table_cmd  */
#line 446 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 18676 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 101: /* alter_table_cmds: alter_table_cmds ',' alter_table_cmd  */
#line 447 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 18682 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 102: /* alter_generic_options: OPTIONS '(' alter_generic_option_list ')'  */
#line 452 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 18688 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 103: /* opt_set_data: SET DATA_P  */
#line 456 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                                { (yyval.ival) = 1; }
#line 18694 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 104: /* opt_set_data: SET  */
#line 457 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                                                { (yyval.ival) = 0; }
#line 18700 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 105: /* opt_set_data: %empty  */
#line 458 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                                                { (yyval.ival) = 0; }
#line 18706 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 106: /* DeallocateStmt: DEALLOCATE name  */
#line 8 "third_party/libpg_query/grammar/statements/deallocate.y"
                                        {
						PGDeallocateStmt *n = makeNode(PGDeallocateStmt);
						n->name = (yyvsp[0].str);
						(yyval.node) = (PGNode *) n;
					}
#line 18716 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 107: /* DeallocateStmt: DEALLOCATE PREPARE name  */
#line 14 "third_party/libpg_query/grammar/statements/deallocate.y"
                                        {
						PGDeallocateStmt *n = makeNode(PGDeallocateStmt);
						n->name = (yyvsp[0].str);
						(yyval.node) = (PGNode *) n;
					}
#line 18726 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 108: /* DeallocateStmt: DEALLOCATE ALL  */
#line 20 "third_party/libpg_query/grammar/statements/deallocate.y"
                                        {
						PGDeallocateStmt *n = makeNode(PGDeallocateStmt);
						n->name = NULL;
						(yyval.node) = (PGNode *) n;
					}
#line 18736 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 109: /* DeallocateStmt: DEALLOCATE PREPARE ALL  */
#line 26 "third_party/libpg_query/grammar/statements/deallocate.y"
                                        {
						PGDeallocateStmt *n = makeNode(PGDeallocateStmt);
						n->name = NULL;
						(yyval.node) = (PGNode *) n;
					}
#line 18746 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 110: /* RenameStmt: ALTER SCHEMA name RENAME TO name  */
#line 7 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_SCHEMA;
					n->subname = (yyvsp[-3].str);
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 18759 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 111: /* RenameStmt: ALTER TABLE relation_expr RENAME TO name  */
#line 16 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 18773 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 112: /* RenameStmt: ALTER TABLE IF_P EXISTS relation_expr RENAME TO name  */
#line 26 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 18787 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 113: /* RenameStmt: ALTER SEQUENCE qualified_name RENAME TO name  */
#line 36 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_SEQUENCE;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 18801 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 114: /* RenameStmt: ALTER SEQUENCE IF_P EXISTS qualified_name RENAME TO name  */
#line 46 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_SEQUENCE;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 18815 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 115: /* RenameStmt: ALTER VIEW qualified_name RENAME TO name  */
#line 56 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_VIEW;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 18829 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 116: /* RenameStmt: ALTER VIEW IF_P EXISTS qualified_name RENAME TO name  */
#line 66 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_VIEW;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 18843 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 117: /* RenameStmt: ALTER INDEX qualified_name RENAME TO name  */
#line 76 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_INDEX;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 18857 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 118: /* RenameStmt: ALTER INDEX IF_P EXISTS qualified_name RENAME TO name  */
#line 86 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_INDEX;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 18871 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 119: /* RenameStmt: ALTER TABLE relation_expr RENAME opt_column name TO name  */
#line 96 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_COLUMN;
					n->relationType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-5].range);
					n->subname = (yyvsp[-2].str);
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 18886 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 120: /* RenameStmt: ALTER TABLE IF_P EXISTS relation_expr RENAME opt_column name TO name  */
#line 107 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_COLUMN;
					n->relationType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-5].range);
					n->subname = (yyvsp[-2].str);
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 18901 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 121: /* RenameStmt: ALTER TABLE relation_expr RENAME CONSTRAINT name TO name  */
#line 118 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_TABCONSTRAINT;
					n->relation = (yyvsp[-5].range);
					n->subname = (yyvsp[-2].str);
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 18915 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 122: /* RenameStmt: ALTER TABLE IF_P EXISTS relation_expr RENAME CONSTRAINT name TO name  */
#line 128 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_TABCONSTRAINT;
					n->relation = (yyvsp[-5].range);
					n->subname = (yyvsp[-2].str);
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 18929 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 123: /* opt_column: COLUMN  */
#line 140 "third_party/libpg_query/grammar/statements/rename.y"
                                                                                        { (yyval.ival) = COLUMN; }
#line 18935 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 124: /* opt_column: %empty  */
#line 141 "third_party/libpg_query/grammar/statements/rename.y"
                                                                                                { (yyval.ival) = 0; }
#line 18941 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 125: /* InsertStmt: opt_with_clause INSERT opt_or_action INTO insert_target insert_rest opt_on_conflict returning_clause  */
#line 11 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyvsp[-2].istmt)->relation = (yyvsp[-3].range);
					(yyvsp[-2].istmt)->onConflictAlias = (yyvsp[-5].onconflictshorthand);
					(yyvsp[-2].istmt)->onConflictClause = (yyvsp[-1].onconflict);
					(yyvsp[-2].istmt)->returningList = (yyvsp[0].list);
					(yyvsp[-2].istmt)->withClause = (yyvsp[-7].with);
					(yyval.node) = (PGNode *) (yyvsp[-2].istmt);
				}
#line 18954 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 126: /* insert_rest: SelectStmt  */
#line 24 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.istmt) = makeNode(PGInsertStmt);
					(yyval.istmt)->cols = NIL;
					(yyval.istmt)->selectStmt = (yyvsp[0].node);
				}
#line 18964 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 127: /* insert_rest: OVERRIDING override_kind VALUE_P SelectStmt  */
#line 30 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.istmt) = makeNode(PGInsertStmt);
					(yyval.istmt)->cols = NIL;
					(yyval.istmt)->override = (yyvsp[-2].override);
					(yyval.istmt)->selectStmt = (yyvsp[0].node);
				}
#line 18975 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 128: /* insert_rest: '(' insert_column_list ')' SelectStmt  */
#line 37 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.istmt) = makeNode(PGInsertStmt);
					(yyval.istmt)->cols = (yyvsp[-2].list);
					(yyval.istmt)->selectStmt = (yyvsp[0].node);
				}
#line 18985 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 129: /* insert_rest: '(' insert_column_list ')' OVERRIDING override_kind VALUE_P SelectStmt  */
#line 43 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.istmt) = makeNode(PGInsertStmt);
					(yyval.istmt)->cols = (yyvsp[-5].list);
					(yyval.istmt)->override = (yyvsp[-2].override);
					(yyval.istmt)->selectStmt = (yyvsp[0].node);
				}
#line 18996 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 130: /* insert_rest: DEFAULT VALUES  */
#line 50 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.istmt) = makeNode(PGInsertStmt);
					(yyval.istmt)->cols = NIL;
					(yyval.istmt)->selectStmt = NULL;
				}
#line 19006 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 131: /* insert_target: qualified_name  */
#line 60 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.range) = (yyvsp[0].range);
				}
#line 19014 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 132: /* insert_target: qualified_name AS ColId  */
#line 64 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyvsp[-2].range)->alias = makeAlias((yyvsp[0].str), NIL);
					(yyval.range) = (yyvsp[-2].range);
				}
#line 19023 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 133: /* opt_conf_expr: '(' index_params ')' where_clause  */
#line 73 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.infer) = makeNode(PGInferClause);
					(yyval.infer)->indexElems = (yyvsp[-2].list);
					(yyval.infer)->whereClause = (yyvsp[0].node);
					(yyval.infer)->conname = NULL;
					(yyval.infer)->location = (yylsp[-3]);
				}
#line 19035 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 134: /* opt_conf_expr: ON CONSTRAINT name  */
#line 82 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.infer) = makeNode(PGInferClause);
					(yyval.infer)->indexElems = NIL;
					(yyval.infer)->whereClause = NULL;
					(yyval.infer)->conname = (yyvsp[0].str);
					(yyval.infer)->location = (yylsp[-2]);
				}
#line 19047 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 135: /* opt_conf_expr: %empty  */
#line 90 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.infer) = NULL;
				}
#line 19055 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 136: /* opt_with_clause: with_clause  */
#line 97 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                        { (yyval.with) = (yyvsp[0].with); }
#line 19061 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 137: /* opt_with_clause: %empty  */
#line 98 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                        { (yyval.with) = NULL; }
#line 19067 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 138: /* insert_column_item: ColId opt_indirection  */
#line 104 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = (yyvsp[-1].str);
					(yyval.target)->indirection = check_indirection((yyvsp[0].list), yyscanner);
					(yyval.target)->val = NULL;
					(yyval.target)->location = (yylsp[-1]);
				}
#line 19079 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 139: /* set_clause: set_target '=' a_expr  */
#line 116 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyvsp[-2].target)->val = (PGNode *) (yyvsp[0].node);
					(yyval.list) = list_make1((yyvsp[-2].target));
				}
#line 19088 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 140: /* set_clause: '(' set_target_list ')' '=' a_expr  */
#line 121 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					int ncolumns = list_length((yyvsp[-3].list));
					int i = 1;
					PGListCell *col_cell;

					/* Create a PGMultiAssignRef source for each target */
					foreach(col_cell, (yyvsp[-3].list))
					{
						PGResTarget *res_col = (PGResTarget *) lfirst(col_cell);
						PGMultiAssignRef *r = makeNode(PGMultiAssignRef);

						r->source = (PGNode *) (yyvsp[0].node);
						r->colno = i;
						r->ncolumns = ncolumns;
						res_col->val = (PGNode *) r;
						i++;
					}

					(yyval.list) = (yyvsp[-3].list);
				}
#line 19113 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 141: /* opt_or_action: OR REPLACE  */
#line 146 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.onconflictshorthand) = PG_ONCONFLICT_ALIAS_REPLACE;
				}
#line 19121 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 142: /* opt_or_action: OR IGNORE_P  */
#line 151 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.onconflictshorthand) = PG_ONCONFLICT_ALIAS_IGNORE;
				}
#line 19129 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 143: /* opt_or_action: %empty  */
#line 155 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.onconflictshorthand) = PG_ONCONFLICT_ALIAS_NONE;
				}
#line 19137 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 144: /* opt_on_conflict: ON CONFLICT opt_conf_expr DO UPDATE SET set_clause_list_opt_comma where_clause  */
#line 162 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.onconflict) = makeNode(PGOnConflictClause);
					(yyval.onconflict)->action = PG_ONCONFLICT_UPDATE;
					(yyval.onconflict)->infer = (yyvsp[-5].infer);
					(yyval.onconflict)->targetList = (yyvsp[-1].list);
					(yyval.onconflict)->whereClause = (yyvsp[0].node);
					(yyval.onconflict)->location = (yylsp[-7]);
				}
#line 19150 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 145: /* opt_on_conflict: ON CONFLICT opt_conf_expr DO NOTHING  */
#line 172 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.onconflict) = makeNode(PGOnConflictClause);
					(yyval.onconflict)->action = PG_ONCONFLICT_NOTHING;
					(yyval.onconflict)->infer = (yyvsp[-2].infer);
					(yyval.onconflict)->targetList = NIL;
					(yyval.onconflict)->whereClause = NULL;
					(yyval.onconflict)->location = (yylsp[-4]);
				}
#line 19163 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 146: /* opt_on_conflict: %empty  */
#line 181 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.onconflict) = NULL;
				}
#line 19171 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 147: /* index_elem: ColId opt_collate opt_class opt_asc_desc opt_nulls_order  */
#line 188 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.ielem) = makeNode(PGIndexElem);
					(yyval.ielem)->name = (yyvsp[-4].str);
					(yyval.ielem)->expr = NULL;
					(yyval.ielem)->indexcolname = NULL;
					(yyval.ielem)->collation = (yyvsp[-3].list);
					(yyval.ielem)->opclass = (yyvsp[-2].list);
					(yyval.ielem)->ordering = (yyvsp[-1].sortorder);
					(yyval.ielem)->nulls_ordering = (yyvsp[0].nullorder);
				}
#line 19186 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 148: /* index_elem: func_expr_windowless opt_collate opt_class opt_asc_desc opt_nulls_order  */
#line 199 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.ielem) = makeNode(PGIndexElem);
					(yyval.ielem)->name = NULL;
					(yyval.ielem)->expr = (yyvsp[-4].node);
					(yyval.ielem)->indexcolname = NULL;
					(yyval.ielem)->collation = (yyvsp[-3].list);
					(yyval.ielem)->opclass = (yyvsp[-2].list);
					(yyval.ielem)->ordering = (yyvsp[-1].sortorder);
					(yyval.ielem)->nulls_ordering = (yyvsp[0].nullorder);
				}
#line 19201 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 149: /* index_elem: '(' a_expr ')' opt_collate opt_class opt_asc_desc opt_nulls_order  */
#line 210 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.ielem) = makeNode(PGIndexElem);
					(yyval.ielem)->name = NULL;
					(yyval.ielem)->expr = (yyvsp[-5].node);
					(yyval.ielem)->indexcolname = NULL;
					(yyval.ielem)->collation = (yyvsp[-3].list);
					(yyval.ielem)->opclass = (yyvsp[-2].list);
					(yyval.ielem)->ordering = (yyvsp[-1].sortorder);
					(yyval.ielem)->nulls_ordering = (yyvsp[0].nullorder);
				}
#line 19216 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 150: /* returning_clause: RETURNING target_list  */
#line 224 "third_party/libpg_query/grammar/statements/insert.y"
                                                        { (yyval.list) = (yyvsp[0].list); }
#line 19222 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 151: /* returning_clause: %empty  */
#line 225 "third_party/libpg_query/grammar/statements/insert.y"
                                                                { (yyval.list) = NIL; }
#line 19228 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 152: /* override_kind: USER  */
#line 231 "third_party/libpg_query/grammar/statements/insert.y"
                                        { (yyval.override) = PG_OVERRIDING_USER_VALUE; }
#line 19234 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 153: /* override_kind: SYSTEM_P  */
#line 232 "third_party/libpg_query/grammar/statements/insert.y"
                                        { (yyval.override) = OVERRIDING_SYSTEM_VALUE; }
#line 19240 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 154: /* set_target_list: set_target  */
#line 237 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].target)); }
#line 19246 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 155: /* set_target_list: set_target_list ',' set_target  */
#line 238 "third_party/libpg_query/grammar/statements/insert.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list),(yyvsp[0].target)); }
#line 19252 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 156: /* opt_collate: COLLATE any_name  */
#line 244 "third_party/libpg_query/grammar/statements/insert.y"
                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 19258 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 157: /* opt_collate: %empty  */
#line 245 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                                { (yyval.list) = NIL; }
#line 19264 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 158: /* opt_class: any_name  */
#line 249 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 19270 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 159: /* opt_class: %empty  */
#line 250 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                                { (yyval.list) = NIL; }
#line 19276 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 160: /* insert_column_list: insert_column_item  */
#line 256 "third_party/libpg_query/grammar/statements/insert.y"
                                        { (yyval.list) = list_make1((yyvsp[0].target)); }
#line 19282 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 161: /* insert_column_list: insert_column_list ',' insert_column_item  */
#line 258 "third_party/libpg_query/grammar/statements/insert.y"
                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].target)); }
#line 19288 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 162: /* set_clause_list: set_clause  */
#line 263 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 19294 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 163: /* set_clause_list: set_clause_list ',' set_clause  */
#line 264 "third_party/libpg_query/grammar/statements/insert.y"
                                                                { (yyval.list) = list_concat((yyvsp[-2].list),(yyvsp[0].list)); }
#line 19300 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 164: /* set_clause_list_opt_comma: set_clause_list  */
#line 268 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 19306 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 165: /* set_clause_list_opt_comma: set_clause_list ','  */
#line 269 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 19312 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 166: /* index_params: index_elem  */
#line 272 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                { (yyval.list) = list_make1((yyvsp[0].ielem)); }
#line 19318 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 167: /* index_params: index_params ',' index_elem  */
#line 273 "third_party/libpg_query/grammar/statements/insert.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].ielem)); }
#line 19324 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 168: /* set_target: ColId opt_indirection  */
#line 279 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = (yyvsp[-1].str);
					(yyval.target)->indirection = check_indirection((yyvsp[0].list), yyscanner);
					(yyval.target)->val = NULL;	/* upper production sets this */
					(yyval.target)->location = (yylsp[-1]);
				}
#line 19336 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 169: /* CreateTypeStmt: CREATE_P TYPE_P qualified_name AS ENUM_P select_with_parens  */
#line 8 "third_party/libpg_query/grammar/statements/create_type.y"
                                {
					PGCreateTypeStmt *n = makeNode(PGCreateTypeStmt);
					n->typeName = (yyvsp[-3].range);
					n->kind = PG_NEWTYPE_ENUM;
					n->query = (yyvsp[0].node);
					n->vals = NULL;
					(yyval.node) = (PGNode *)n;
				}
#line 19349 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 170: /* CreateTypeStmt: CREATE_P TYPE_P qualified_name AS ENUM_P '(' opt_enum_val_list ')'  */
#line 17 "third_party/libpg_query/grammar/statements/create_type.y"
                                {
					PGCreateTypeStmt *n = makeNode(PGCreateTypeStmt);
					n->typeName = (yyvsp[-5].range);
					n->kind = PG_NEWTYPE_ENUM;
					n->vals = (yyvsp[-1].list);
					n->query = NULL;
					(yyval.node) = (PGNode *)n;
				}
#line 19362 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 171: /* CreateTypeStmt: CREATE_P TYPE_P qualified_name AS Typename  */
#line 26 "third_party/libpg_query/grammar/statements/create_type.y"
                                {
					PGCreateTypeStmt *n = makeNode(PGCreateTypeStmt);
					n->typeName = (yyvsp[-2].range);
					n->query = NULL;
					auto name = std::string(reinterpret_cast<PGValue *>((yyvsp[0].typnam)->names->tail->data.ptr_value)->val.str);
					if (name == "enum") {
						n->kind = PG_NEWTYPE_ENUM;
						n->vals = (yyvsp[0].typnam)->typmods;
					} else {
						n->kind = PG_NEWTYPE_ALIAS;
						n->ofType = (yyvsp[0].typnam);
					}
					(yyval.node) = (PGNode *)n;
				}
#line 19381 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 172: /* opt_enum_val_list: enum_val_list  */
#line 46 "third_party/libpg_query/grammar/statements/create_type.y"
                                      { (yyval.list) = (yyvsp[0].list);}
#line 19387 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 173: /* opt_enum_val_list: %empty  */
#line 47 "third_party/libpg_query/grammar/statements/create_type.y"
                                                        {(yyval.list) = NIL;}
#line 19393 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 174: /* enum_val_list: Sconst  */
#line 51 "third_party/libpg_query/grammar/statements/create_type.y"
                                {
					(yyval.list) = list_make1(makeStringConst((yyvsp[0].str), (yylsp[0])));
				}
#line 19401 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 175: /* enum_val_list: enum_val_list ',' Sconst  */
#line 55 "third_party/libpg_query/grammar/statements/create_type.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), makeStringConst((yyvsp[0].str), (yylsp[0])));
				}
#line 19409 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 176: /* PragmaStmt: PRAGMA_P ColId  */
#line 8 "third_party/libpg_query/grammar/statements/pragma.y"
                                {
					PGPragmaStmt *n = makeNode(PGPragmaStmt);
					n->kind = PG_PRAGMA_TYPE_NOTHING;
					n->name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 19420 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 177: /* PragmaStmt: PRAGMA_P ColId '=' var_list  */
#line 15 "third_party/libpg_query/grammar/statements/pragma.y"
                                {
					PGPragmaStmt *n = makeNode(PGPragmaStmt);
					n->kind = PG_PRAGMA_TYPE_ASSIGNMENT;
					n->name = (yyvsp[-2].str);
					n->args = (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 19432 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 178: /* PragmaStmt: PRAGMA_P ColId '(' func_arg_list ')'  */
#line 23 "third_party/libpg_query/grammar/statements/pragma.y"
                                {
					PGPragmaStmt *n = makeNode(PGPragmaStmt);
					n->kind = PG_PRAGMA_TYPE_CALL;
					n->name = (yyvsp[-3].str);
					n->args = (yyvsp[-1].list);
					(yyval.node) = (PGNode *)n;
				}
#line 19444 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 179: /* CreateDatabaseStmt: CREATE_P DATABASE qualified_name  */
#line 10 "third_party/libpg_query/grammar/statements/create_database.y"
                                {
					PGCreateDatabaseStmt *n = makeNode(PGCreateDatabaseStmt);
					n->name = (yyvsp[0].range);
					(yyval.node) = (PGNode *)n;
				}
#line 19454 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 180: /* CreateDatabaseStmt: CREATE_P opt_extension_name DATABASE qualified_name  */
#line 16 "third_party/libpg_query/grammar/statements/create_database.y"
                                {
				    PGCreateDatabaseStmt *n = makeNode(PGCreateDatabaseStmt);
				    n->extension = (yyvsp[-2].str);
                    n->name = (yyvsp[0].range);
                    (yyval.node) = (PGNode *)n;
				}
#line 19465 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 181: /* CreateDatabaseStmt: CREATE_P DATABASE IF_P NOT EXISTS qualified_name  */
#line 23 "third_party/libpg_query/grammar/statements/create_database.y"
                                {
					PGCreateDatabaseStmt *n = makeNode(PGCreateDatabaseStmt);
					n->name = (yyvsp[0].range);
					(yyval.node) = (PGNode *)n;
				}
#line 19475 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 182: /* CreateDatabaseStmt: CREATE_P OR REPLACE DATABASE qualified_name  */
#line 29 "third_party/libpg_query/grammar/statements/create_database.y"
                                {
					PGCreateDatabaseStmt *n = makeNode(PGCreateDatabaseStmt);
					n->name = (yyvsp[0].range);
					(yyval.node) = (PGNode *)n;
				}
#line 19485 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 183: /* CreateDatabaseStmt: CREATE_P DATABASE qualified_name FROM Sconst  */
#line 35 "third_party/libpg_query/grammar/statements/create_database.y"
                {
                    PGCreateDatabaseStmt *n = makeNode(PGCreateDatabaseStmt);
                    n->name = (yyvsp[-2].range);
                    n->path = (yyvsp[0].str);
                    (yyval.node) = (PGNode *)n;
                }
#line 19496 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 184: /* CreateDatabaseStmt: CREATE_P DATABASE IF_P NOT EXISTS qualified_name FROM Sconst  */
#line 42 "third_party/libpg_query/grammar/statements/create_database.y"
                                {
					PGCreateDatabaseStmt *n = makeNode(PGCreateDatabaseStmt);
					n->name = (yyvsp[-2].range);
					n->path = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 19507 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 185: /* CreateDatabaseStmt: CREATE_P OR REPLACE DATABASE qualified_name FROM Sconst  */
#line 49 "third_party/libpg_query/grammar/statements/create_database.y"
                                {
					PGCreateDatabaseStmt *n = makeNode(PGCreateDatabaseStmt);
					n->name = (yyvsp[-2].range);
					n->path = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 19518 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 186: /* opt_extension_name: Sconst  */
#line 59 "third_party/libpg_query/grammar/statements/create_database.y"
                                                                { (yyval.str) = (yyvsp[0].str); }
#line 19524 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 187: /* CreateSeqStmt: CREATE_P OptTemp SEQUENCE qualified_name OptSeqOptList  */
#line 10 "third_party/libpg_query/grammar/statements/create_sequence.y"
                                {
					PGCreateSeqStmt *n = makeNode(PGCreateSeqStmt);
					(yyvsp[-1].range)->relpersistence = (yyvsp[-3].ival);
					n->sequence = (yyvsp[-1].range);
					n->options = (yyvsp[0].list);
					n->ownerId = InvalidOid;
					n->onconflict = PG_ERROR_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 19538 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 188: /* CreateSeqStmt: CREATE_P OptTemp SEQUENCE IF_P NOT EXISTS qualified_name OptSeqOptList  */
#line 20 "third_party/libpg_query/grammar/statements/create_sequence.y"
                                {
					PGCreateSeqStmt *n = makeNode(PGCreateSeqStmt);
					(yyvsp[-1].range)->relpersistence = (yyvsp[-6].ival);
					n->sequence = (yyvsp[-1].range);
					n->options = (yyvsp[0].list);
					n->ownerId = InvalidOid;
					n->onconflict = PG_IGNORE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 19552 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 189: /* OptSeqOptList: SeqOptList  */
#line 32 "third_party/libpg_query/grammar/statements/create_sequence.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 19558 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 190: /* OptSeqOptList: %empty  */
#line 33 "third_party/libpg_query/grammar/statements/create_sequence.y"
                                                                                                { (yyval.list) = NIL; }
#line 19564 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 191: /* ExecuteStmt: EXECUTE name execute_param_clause  */
#line 8 "third_party/libpg_query/grammar/statements/execute.y"
                                {
					PGExecuteStmt *n = makeNode(PGExecuteStmt);
					n->name = (yyvsp[-1].str);
					n->params = (yyvsp[0].list);
					(yyval.node) = (PGNode *) n;
				}
#line 19575 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 192: /* ExecuteStmt: CREATE_P OptTemp TABLE create_as_target AS EXECUTE name execute_param_clause opt_with_data  */
#line 16 "third_party/libpg_query/grammar/statements/execute.y"
                                {
					PGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);
					PGExecuteStmt *n = makeNode(PGExecuteStmt);
					n->name = (yyvsp[-2].str);
					n->params = (yyvsp[-1].list);
					ctas->query = (PGNode *) n;
					ctas->into = (yyvsp[-5].into);
					ctas->relkind = PG_OBJECT_TABLE;
					ctas->is_select_into = false;
					ctas->onconflict = PG_ERROR_ON_CONFLICT;
					/* cram additional flags into the PGIntoClause */
					(yyvsp[-5].into)->rel->relpersistence = (yyvsp[-7].ival);
					(yyvsp[-5].into)->skipData = !((yyvsp[0].boolean));
					(yyval.node) = (PGNode *) ctas;
				}
#line 19595 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 193: /* ExecuteStmt: CREATE_P OptTemp TABLE IF_P NOT EXISTS create_as_target AS EXECUTE name execute_param_clause opt_with_data  */
#line 33 "third_party/libpg_query/grammar/statements/execute.y"
                                {
					PGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);
					PGExecuteStmt *n = makeNode(PGExecuteStmt);
					n->name = (yyvsp[-2].str);
					n->params = (yyvsp[-1].list);
					ctas->query = (PGNode *) n;
					ctas->into = (yyvsp[-5].into);
					ctas->relkind = PG_OBJECT_TABLE;
					ctas->is_select_into = false;
					ctas->onconflict = PG_IGNORE_ON_CONFLICT;
					/* cram additional flags into the PGIntoClause */
					(yyvsp[-5].into)->rel->relpersistence = (yyvsp[-10].ival);
					(yyvsp[-5].into)->skipData = !((yyvsp[0].boolean));
					(yyval.node) = (PGNode *) ctas;
				}
#line 19615 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 194: /* execute_param_clause: '(' expr_list_opt_comma ')'  */
#line 51 "third_party/libpg_query/grammar/statements/execute.y"
                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 19621 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 195: /* execute_param_clause: %empty  */
#line 52 "third_party/libpg_query/grammar/statements/execute.y"
                                                                                        { (yyval.list) = NIL; }
#line 19627 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 196: /* AlterSeqStmt: ALTER SEQUENCE qualified_name SeqOptList  */
#line 10 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					PGAlterSeqStmt *n = makeNode(PGAlterSeqStmt);
					n->sequence = (yyvsp[-1].range);
					n->options = (yyvsp[0].list);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 19639 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 197: /* AlterSeqStmt: ALTER SEQUENCE IF_P EXISTS qualified_name SeqOptList  */
#line 18 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					PGAlterSeqStmt *n = makeNode(PGAlterSeqStmt);
					n->sequence = (yyvsp[-1].range);
					n->options = (yyvsp[0].list);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 19651 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 198: /* SeqOptList: SeqOptElem  */
#line 29 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                { (yyval.list) = list_make1((yyvsp[0].defelt)); }
#line 19657 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 199: /* SeqOptList: SeqOptList SeqOptElem  */
#line 30 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].defelt)); }
#line 19663 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 200: /* opt_with: WITH  */
#line 34 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                        {}
#line 19669 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 201: /* opt_with: WITH_LA  */
#line 35 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                                {}
#line 19675 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 202: /* opt_with: %empty  */
#line 36 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                                {}
#line 19681 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 203: /* NumericOnly: FCONST  */
#line 41 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                        { (yyval.value) = makeFloat((yyvsp[0].str)); }
#line 19687 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 204: /* NumericOnly: '+' FCONST  */
#line 42 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                { (yyval.value) = makeFloat((yyvsp[0].str)); }
#line 19693 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 205: /* NumericOnly: '-' FCONST  */
#line 44 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.value) = makeFloat((yyvsp[0].str));
					doNegateFloat((yyval.value));
				}
#line 19702 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 206: /* NumericOnly: SignedIconst  */
#line 48 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                { (yyval.value) = makeInteger((yyvsp[0].ival)); }
#line 19708 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 207: /* SeqOptElem: AS SimpleTypename  */
#line 53 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("as", (PGNode *)(yyvsp[0].typnam), (yylsp[-1]));
				}
#line 19716 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 208: /* SeqOptElem: CACHE NumericOnly  */
#line 57 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("cache", (PGNode *)(yyvsp[0].value), (yylsp[-1]));
				}
#line 19724 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 209: /* SeqOptElem: CYCLE  */
#line 61 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("cycle", (PGNode *)makeInteger(true), (yylsp[0]));
				}
#line 19732 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 210: /* SeqOptElem: NO CYCLE  */
#line 65 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("cycle", (PGNode *)makeInteger(false), (yylsp[-1]));
				}
#line 19740 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 211: /* SeqOptElem: INCREMENT opt_by NumericOnly  */
#line 69 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("increment", (PGNode *)(yyvsp[0].value), (yylsp[-2]));
				}
#line 19748 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 212: /* SeqOptElem: MAXVALUE NumericOnly  */
#line 73 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("maxvalue", (PGNode *)(yyvsp[0].value), (yylsp[-1]));
				}
#line 19756 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 213: /* SeqOptElem: MINVALUE NumericOnly  */
#line 77 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("minvalue", (PGNode *)(yyvsp[0].value), (yylsp[-1]));
				}
#line 19764 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 214: /* SeqOptElem: NO MAXVALUE  */
#line 81 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("maxvalue", NULL, (yylsp[-1]));
				}
#line 19772 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 215: /* SeqOptElem: NO MINVALUE  */
#line 85 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("minvalue", NULL, (yylsp[-1]));
				}
#line 19780 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 216: /* SeqOptElem: OWNED BY any_name  */
#line 89 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("owned_by", (PGNode *)(yyvsp[0].list), (yylsp[-2]));
				}
#line 19788 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 217: /* SeqOptElem: SEQUENCE NAME_P any_name  */
#line 93 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					/* not documented, only used by pg_dump */
					(yyval.defelt) = makeDefElem("sequence_name", (PGNode *)(yyvsp[0].list), (yylsp[-2]));
				}
#line 19797 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 218: /* SeqOptElem: START opt_with NumericOnly  */
#line 98 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("start", (PGNode *)(yyvsp[0].value), (yylsp[-2]));
				}
#line 19805 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 219: /* SeqOptElem: RESTART  */
#line 102 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("restart", NULL, (yylsp[0]));
				}
#line 19813 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 220: /* SeqOptElem: RESTART opt_with NumericOnly  */
#line 106 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("restart", (PGNode *)(yyvsp[0].value), (yylsp[-2]));
				}
#line 19821 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 221: /* opt_by: BY  */
#line 112 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                {}
#line 19827 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 222: /* opt_by: %empty  */
#line 113 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                        {}
#line 19833 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 223: /* SignedIconst: Iconst  */
#line 117 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                { (yyval.ival) = (yyvsp[0].ival); }
#line 19839 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 224: /* SignedIconst: '+' Iconst  */
#line 118 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                        { (yyval.ival) = + (yyvsp[0].ival); }
#line 19845 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 225: /* SignedIconst: '-' Iconst  */
#line 119 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                        { (yyval.ival) = - (yyvsp[0].ival); }
#line 19851 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 226: /* TransactionStmt: ABORT_P opt_transaction  */
#line 3 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_ROLLBACK;
					n->options = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 19862 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 227: /* TransactionStmt: BEGIN_P opt_transaction  */
#line 10 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_BEGIN;
					(yyval.node) = (PGNode *)n;
				}
#line 19872 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 228: /* TransactionStmt: START opt_transaction  */
#line 16 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_START;
					(yyval.node) = (PGNode *)n;
				}
#line 19882 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 229: /* TransactionStmt: COMMIT opt_transaction  */
#line 22 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_COMMIT;
					n->options = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 19893 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 230: /* TransactionStmt: END_P opt_transaction  */
#line 29 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_COMMIT;
					n->options = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 19904 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 231: /* TransactionStmt: ROLLBACK opt_transaction  */
#line 36 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_ROLLBACK;
					n->options = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 19915 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 232: /* opt_transaction: WORK  */
#line 45 "third_party/libpg_query/grammar/statements/transaction.y"
                                                                                {}
#line 19921 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 233: /* opt_transaction: TRANSACTION  */
#line 46 "third_party/libpg_query/grammar/statements/transaction.y"
                                                                                        {}
#line 19927 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 234: /* opt_transaction: %empty  */
#line 47 "third_party/libpg_query/grammar/statements/transaction.y"
                                                                                                {}
#line 19933 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 235: /* UseStmt: USE_P qualified_name  */
#line 3 "third_party/libpg_query/grammar/statements/use.y"
                                {
					PGUseStmt *n = makeNode(PGUseStmt);
					n->name = (yyvsp[0].range);
					(yyval.node) = (PGNode *) n;
				}
#line 19943 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 236: /* PGQ_IDENT: IDENT  */
#line 40 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 19949 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 237: /* PGQ_IDENT: unreserved_keyword  */
#line 41 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 19955 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 238: /* PGQ_IDENT: pgq_col_name_keyword  */
#line 42 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                                        { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 19961 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 239: /* DropPropertyGraphStmt: DROP PROPERTY GRAPH qualified_name opt_drop_behavior  */
#line 51 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGDropPropertyGraphStmt *n = makeNode(PGDropPropertyGraphStmt);
				n->name = (yyvsp[-1].range);
				n->behavior = (yyvsp[0].dbehavior);
				(yyval.node) = (PGNode *)n;
			}
#line 19972 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 244: /* CreatePropertyGraphStmt: CREATE_P PROPERTY GRAPH qualified_name VertexOrNode TABLES '(' VertexTableDefinition VertexTableDefinitionList ')' EdgeOrRelationship TABLES '(' EdgeTableDefinition EdgeTableDefinitionList ')'  */
#line 79 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGCreatePropertyGraphStmt *n = makeNode(PGCreatePropertyGraphStmt);
				n->name = (yyvsp[-12].range);
				n->vertex_tables = (yyvsp[-7].list)?lappend((yyvsp[-7].list),(yyvsp[-8].node)):list_make1((yyvsp[-8].node));
				n->edge_tables = (yyvsp[-1].list)?lappend((yyvsp[-1].list),(yyvsp[-2].node)):list_make1((yyvsp[-2].node));
				(yyval.node) = (PGNode *)n;
			}
#line 19984 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 245: /* VertexTableDefinitionList: ',' VertexTableDefinition VertexTableDefinitionList  */
#line 90 "third_party/libpg_query/grammar/statements/pgq.y"
                                                { (yyval.list) = (yyvsp[0].list)?lappend((yyvsp[0].list),(yyvsp[-1].node)):list_make1((yyvsp[-1].node)); }
#line 19990 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 246: /* VertexTableDefinitionList: %empty  */
#line 92 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.list) = NULL; }
#line 19996 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 247: /* KeySpecification: '(' name_list ')'  */
#line 96 "third_party/libpg_query/grammar/statements/pgq.y"
                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 20002 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 248: /* KeyDefinition: KEY KeySpecification  */
#line 100 "third_party/libpg_query/grammar/statements/pgq.y"
                                                { (yyval.list) = (yyvsp[0].list); }
#line 20008 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 249: /* KeyReference: KeyDefinition REFERENCES  */
#line 104 "third_party/libpg_query/grammar/statements/pgq.y"
                                                { (yyval.list) = (yyvsp[-1].list); }
#line 20014 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 250: /* LabelList: PGQ_IDENT  */
#line 108 "third_party/libpg_query/grammar/statements/pgq.y"
                                    { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 20020 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 251: /* LabelList: LabelList ',' PGQ_IDENT  */
#line 109 "third_party/libpg_query/grammar/statements/pgq.y"
                                    { (yyval.list) = lappend((yyvsp[-2].list), makeString((yyvsp[0].str))); }
#line 20026 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 252: /* Discriminator: IN_P qualified_name '(' LabelList ')'  */
#line 114 "third_party/libpg_query/grammar/statements/pgq.y"
                        { 
				PGPropertyGraphTable *n = makeNode(PGPropertyGraphTable);
				n->discriminator = (yyvsp[-3].range); /* a BIGINT column with 64 bits to set detailed label membership */
				n->labels = (yyvsp[-1].list); /* there is a list of up to 64 labels */
				(yyval.node) = (PGNode*) n;
			}
#line 20037 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 253: /* Discriminator: %empty  */
#line 122 "third_party/libpg_query/grammar/statements/pgq.y"
                        { 
				PGPropertyGraphTable *n = makeNode(PGPropertyGraphTable);
				n->discriminator = NULL; /* no discriminator */
				n->labels = NULL; /* no list, just the single staring PGQ_IDENT */
				(yyval.node) = (PGNode*) n;
			}
#line 20048 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 254: /* VertexTableDefinition: QualifiednameOptionalAs PropertiesClause LABEL PGQ_IDENT Discriminator  */
#line 133 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGPropertyGraphTable *n = (PGPropertyGraphTable*) (yyvsp[0].node);
				n->table = (yyvsp[-4].list);
				n->properties = (yyvsp[-3].list);
				/* Xth label in list is set iff discriminator Xth-bit==1 */
				if (n->labels) n->labels = lappend(n->labels,makeString((yyvsp[-1].str)));
				else n->labels = list_make1(makeString((yyvsp[-1].str)));
				n->is_vertex_table = true;
				(yyval.node) = (PGNode *) n;
			}
#line 20063 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 255: /* EdgeTableDefinitionList: ',' EdgeTableDefinition EdgeTableDefinitionList  */
#line 147 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                        { (yyval.list) = (yyvsp[0].list)?lappend((yyvsp[0].list),(yyvsp[-1].node)):list_make1((yyvsp[-1].node)); }
#line 20069 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 256: /* EdgeTableDefinitionList: %empty  */
#line 149 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.list) = NULL; }
#line 20075 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 257: /* EdgeTableDefinition: QualifiednameOptionalAs SOURCE KeyReference qualified_name KeySpecification DESTINATION KeyReference qualified_name KeySpecification PropertiesClause LABEL PGQ_IDENT Discriminator  */
#line 157 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGPropertyGraphTable *n = (PGPropertyGraphTable*) (yyvsp[0].node);
				n->table = (yyvsp[-12].list);
				n->is_vertex_table = false;
				n->src_fk = (yyvsp[-10].list);
				n->src_name = (yyvsp[-9].range);
				n->src_pk = (yyvsp[-8].list);
				n->dst_fk = (yyvsp[-6].list);
				n->dst_name = (yyvsp[-5].range);
				n->dst_pk = (yyvsp[-4].list);
				n->properties = (yyvsp[-3].list);
				/* Xth label in list is set iff discriminator Xth-bit==1 */
				if (n->labels) n->labels = lappend(n->labels,makeString((yyvsp[-1].str)));
				else n->labels = list_make1(makeString((yyvsp[-1].str)));
				(yyval.node) = (PGNode *) n;
			}
#line 20096 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 260: /* IdentOptionalAs: PGQ_IDENT  */
#line 182 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                    { (yyval.list) = list_make2(makeString((yyvsp[0].str)), makeString((yyvsp[0].str))); }
#line 20102 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 261: /* IdentOptionalAs: PGQ_IDENT AS PGQ_IDENT  */
#line 184 "third_party/libpg_query/grammar/statements/pgq.y"
                                                        { (yyval.list) = list_make2(makeString((yyvsp[-2].str)), makeString((yyvsp[0].str))); }
#line 20108 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 262: /* QualifiednameOptionalAs: qualified_name  */
#line 188 "third_party/libpg_query/grammar/statements/pgq.y"
                                        { (yyval.list) = list_make2((yyvsp[0].range), makeString("")); }
#line 20114 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 263: /* QualifiednameOptionalAs: qualified_name AS PGQ_IDENT  */
#line 190 "third_party/libpg_query/grammar/statements/pgq.y"
                                        { (yyval.list) = list_make2((yyvsp[-2].range), makeString((yyvsp[0].str))); }
#line 20120 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 264: /* PropertiesList: IdentOptionalAs  */
#line 194 "third_party/libpg_query/grammar/statements/pgq.y"
                                                { (yyval.list) = list_make1((yyvsp[0].list)); }
#line 20126 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 265: /* PropertiesList: PropertiesList ',' IdentOptionalAs  */
#line 197 "third_party/libpg_query/grammar/statements/pgq.y"
                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].list)); }
#line 20132 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 266: /* ExceptOptional: EXCEPT '(' PropertiesList ')'  */
#line 202 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 20138 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 267: /* ExceptOptional: %empty  */
#line 204 "third_party/libpg_query/grammar/statements/pgq.y"
                                                        { (yyval.list) = NULL; }
#line 20144 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 268: /* PropertiesSpec: AreOptional ALL COLUMNS ExceptOptional  */
#line 209 "third_party/libpg_query/grammar/statements/pgq.y"
                        { 
				(yyval.list) = list_make1(list_make2(makeString("*"), makeString("*")));
				if ((yyvsp[0].list)) (yyval.list) = list_concat((yyval.list),(yyvsp[0].list)); 
			}
#line 20153 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 269: /* PropertiesSpec: '(' PropertiesList ')'  */
#line 214 "third_party/libpg_query/grammar/statements/pgq.y"
                                        { (yyval.list) = (yyvsp[-1].list); }
#line 20159 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 270: /* PropertiesClause: NO PROPERTIES  */
#line 218 "third_party/libpg_query/grammar/statements/pgq.y"
                                                { (yyval.list) = NULL; }
#line 20165 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 271: /* PropertiesClause: PROPERTIES PropertiesSpec  */
#line 221 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.list) = (yyvsp[0].list); }
#line 20171 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 272: /* PropertiesClause: %empty  */
#line 223 "third_party/libpg_query/grammar/statements/pgq.y"
                                                        { (yyval.list) = list_make1(list_make2(makeString("*"), makeString("*"))); }
#line 20177 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 273: /* GraphTableWhereOptional: WHERE pgq_expr  */
#line 232 "third_party/libpg_query/grammar/statements/pgq.y"
                                                { (yyval.node) = (yyvsp[0].node); }
#line 20183 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 274: /* GraphTableWhereOptional: %empty  */
#line 234 "third_party/libpg_query/grammar/statements/pgq.y"
                                                        { (yyval.node) = NULL; }
#line 20189 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 275: /* GraphTableStmt: '(' PGQ_IDENT MATCH PathPatternList KeepOptional GraphTableWhereOptional COLUMNS '(' ColumnList ')' ')' qualified_name  */
#line 240 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGMatchClause *n = makeNode(PGMatchClause);
				n->pg_name = (yyvsp[-10].str);
				n->paths = (yyvsp[-8].list);
				if ((yyvsp[-7].node)) {
					/* we massage away 'keep' functionality immediately */
					PGPathPattern *keep = (PGPathPattern*) (yyvsp[-7].node);
					PGListCell *list = list_head(n->paths);
					while(list) {
						PGPathPattern *p = (PGPathPattern*) lfirst(list);
						PGList *backup = p->path;
						*p = *keep; /* copy path spec into all paths */
						p->path = backup; /* restore */
						list = lnext(list);
					}
				}
				n->where_clause = (yyvsp[-6].node);
				n->columns = (yyvsp[-3].list);
				n->graph_table = (yyvsp[0].range);
				(yyval.node) = (PGNode *) n;
			}
#line 20215 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 276: /* ColumnSpec: target_el  */
#line 264 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.list) = list_make2(makeInteger(PG_COLUMNSPEC_EXPR), (yyvsp[0].target)); }
#line 20221 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 277: /* ColumnList: ColumnSpec  */
#line 268 "third_party/libpg_query/grammar/statements/pgq.y"
                                                        { (yyval.list) = list_make1((yyvsp[0].list)); }
#line 20227 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 278: /* ColumnList: ColumnList ',' ColumnSpec  */
#line 270 "third_party/libpg_query/grammar/statements/pgq.y"
                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].list)); }
#line 20233 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 279: /* KeepOptional: KEEP PathPrefix  */
#line 274 "third_party/libpg_query/grammar/statements/pgq.y"
                                                        { (yyval.node) = (yyvsp[0].node); }
#line 20239 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 280: /* KeepOptional: %empty  */
#line 276 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.node) = NULL; }
#line 20245 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 284: /* GroupOrGroupsOptional: GROUP_P  */
#line 284 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.ival) = 1; }
#line 20251 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 285: /* GroupOrGroupsOptional: GROUPS  */
#line 286 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.ival) = 1; }
#line 20257 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 286: /* GroupOrGroupsOptional: %empty  */
#line 288 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.ival) = 0; }
#line 20263 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 287: /* PathVariableOptional: PGQ_IDENT '='  */
#line 292 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.keyword) = (yyvsp[-1].str); }
#line 20269 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 288: /* PathVariableOptional: %empty  */
#line 294 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.keyword) = NULL;}
#line 20275 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 289: /* PathModeOptional: WALK PathOrPathsOptional  */
#line 298 "third_party/libpg_query/grammar/statements/pgq.y"
                                                { (yyval.ival) = PG_PATHMODE_WALK; }
#line 20281 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 290: /* PathModeOptional: TRAIL PathOrPathsOptional  */
#line 300 "third_party/libpg_query/grammar/statements/pgq.y"
                                                { (yyval.ival) = PG_PATHMODE_TRAIL; }
#line 20287 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 291: /* PathModeOptional: SIMPLE PathOrPathsOptional  */
#line 302 "third_party/libpg_query/grammar/statements/pgq.y"
                                                { (yyval.ival) = PG_PATHMODE_SIMPLE; }
#line 20293 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 292: /* PathModeOptional: ACYCLIC PathOrPathsOptional  */
#line 304 "third_party/libpg_query/grammar/statements/pgq.y"
                                                { (yyval.ival) = PG_PATHMODE_ACYCLIC; }
#line 20299 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 293: /* PathModeOptional: PathOrPathsOptional  */
#line 306 "third_party/libpg_query/grammar/statements/pgq.y"
                                                        { (yyval.ival) = PG_PATHMODE_WALK; }
#line 20305 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 294: /* TopKOptional: ICONST  */
#line 310 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.ival) = (yyvsp[0].ival); }
#line 20311 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 295: /* TopKOptional: %empty  */
#line 312 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.ival) = 0; }
#line 20317 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 296: /* PathPrefix: ANY SHORTEST PathModeOptional  */
#line 317 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGPathPattern *n = makeNode(PGPathPattern);
				n->path = NULL;
				n->all = false;
				n->group = false;
				n->shortest = true;
				n->mode = (PGPathMode) (yyvsp[0].ival);
				n->topk = 1;
				(yyval.node) = (PGNode*) n;
			}
#line 20332 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 297: /* PathPrefix: SHORTEST ICONST PathModeOptional GroupOrGroupsOptional  */
#line 329 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGPathPattern *n = makeNode(PGPathPattern);
				n->path = NULL;
				n->all = false;
				n->group = (yyvsp[0].ival);
				n->shortest = true;
				n->mode = (PGPathMode) (yyvsp[-1].ival);
				n->topk = (yyvsp[-2].ival);
				(yyval.node) = (PGNode*) n;
			}
#line 20347 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 298: /* PathPrefix: ALL SHORTEST PathModeOptional  */
#line 341 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGPathPattern *n = makeNode(PGPathPattern);
				n->path = NULL;
				n->all = true;
				n->group = false;
				n->shortest = true;
				n->mode = (PGPathMode) (yyvsp[0].ival);
				n->topk = 0;
				(yyval.node) = (PGNode*) n;
			}
#line 20362 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 299: /* PathPrefix: ALL PathModeOptional  */
#line 353 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGPathPattern *n = makeNode(PGPathPattern);
				n->path = NULL;
				n->all = true;
				n->group = false;
				n->shortest = false;
				n->mode = (PGPathMode) (yyvsp[0].ival);
				n->topk = 0;
				(yyval.node) = (PGNode*) n;
			}
#line 20377 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 300: /* PathPrefix: ANY TopKOptional PathModeOptional  */
#line 365 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGPathPattern *n = makeNode(PGPathPattern);
				n->path = NULL;
				n->all = false;
				n->group = false;
				n->shortest = false;
				n->mode = (PGPathMode) (yyvsp[0].ival);
				n->topk = (yyvsp[-1].ival);
				(yyval.node) = (PGNode*) n;
			}
#line 20392 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 301: /* PathPrefix: %empty  */
#line 377 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGPathPattern *n = makeNode(PGPathPattern);
				n->path = NULL;
				n->all = true;
				n->group = false;
				n->shortest = false;
				n->mode = PG_PATHMODE_WALK;
				n->topk = 0;
				(yyval.node) = (PGNode*) n;
			}
#line 20407 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 302: /* PathPatternList: PathPattern  */
#line 391 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 20413 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 303: /* PathPatternList: PathPatternList ',' PathPattern  */
#line 394 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 20419 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 304: /* PathPattern: PathVariableOptional PathPrefix PathConcatenation  */
#line 399 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGPathPattern *n = (PGPathPattern*) (yyvsp[-1].node);
				PGList *l = (PGList *) (yyvsp[0].list);
				PGSubPath *p = (PGSubPath *) lfirst(list_head(l));

				(yyval.node) = (PGNode*) n;
				if ((yyvsp[-2].keyword) == NULL) {
					n->path = (yyvsp[0].list);
				} else if (list_length(l)==1 && p->type==T_PGSubPath && !p->path_var)  {
					p->path_var = (yyvsp[-2].keyword);
					(yyval.node) = (PGNode*) p;
				} else {
					/* generate a named subpath because of the variable */
					p = makeNode(PGSubPath);
					p->mode = PG_PATHMODE_NONE;
					p->lower = p->upper = p->single_bind = 1;
					p->path_var = (yyvsp[-2].keyword);
					p->path = (yyvsp[0].list);
					n->path = list_make1(p);
				}
			}
#line 20445 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 305: /* PatternUnion: '|'  */
#line 423 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                        { (yyval.ival) = 0; }
#line 20451 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 306: /* PatternUnion: '|' '+' '|'  */
#line 425 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.ival) = 1; }
#line 20457 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 307: /* KleeneQuantifierOptional: ICONST  */
#line 429 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.ival) = (yyvsp[0].ival); }
#line 20463 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 308: /* KleeneQuantifierOptional: %empty  */
#line 431 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.ival) = -1; }
#line 20469 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 309: /* KleeneOptional: '*'  */
#line 437 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGSubPath *n = makeNode(PGSubPath);
				n->single_bind = 0;
				n->lower = 0;
				n->upper = (1<<30);
				(yyval.node) = (PGNode*) n;
			}
#line 20481 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 310: /* KleeneOptional: '+'  */
#line 446 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGSubPath *n = makeNode(PGSubPath);
				n->single_bind = 0;
				n->lower = 1;
				n->upper = (1<<30);
				(yyval.node) = (PGNode*) n;
			}
#line 20493 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 311: /* KleeneOptional: '?'  */
#line 455 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGSubPath *n = makeNode(PGSubPath);
				n->single_bind = 1;
				n->lower = 0;
				n->upper = 1;
				(yyval.node) = (PGNode*) n;
			}
#line 20505 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 312: /* KleeneOptional: '{' KleeneQuantifierOptional ',' KleeneQuantifierOptional '}'  */
#line 464 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGSubPath *n = makeNode(PGSubPath);
				n->single_bind = 0;
				n->lower = ((yyvsp[-3].ival)>=0)?(yyvsp[-3].ival):0;
				n->upper = ((yyvsp[-1].ival)>=0)?(yyvsp[-1].ival):(1<<30);
				(yyval.node) = (PGNode*) n;
			}
#line 20517 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 313: /* KleeneOptional: %empty  */
#line 473 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGSubPath *n = makeNode(PGSubPath);
				n->single_bind = 1;
				n->lower = 1;
				n->upper = 1;
				(yyval.node) = (PGNode*) n;
			}
#line 20529 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 314: /* CostNum: ICONST  */
#line 483 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.ival) = (yyvsp[0].ival); }
#line 20535 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 315: /* CostNum: FCONST  */
#line 485 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.ival) = atof((yyvsp[0].str)); }
#line 20541 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 316: /* CostDefault: DEFAULT CostNum  */
#line 489 "third_party/libpg_query/grammar/statements/pgq.y"
                                                        { (yyval.ival) = (yyvsp[0].ival); }
#line 20547 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 317: /* CostDefault: %empty  */
#line 491 "third_party/libpg_query/grammar/statements/pgq.y"
                                                        { (yyval.ival) = NULL; }
#line 20553 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 318: /* CostOptional: COST b_expr CostDefault  */
#line 496 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGPathInfo *n = makeNode(PGPathInfo);
				PGAConst *d = (PGAConst*) (yyvsp[0].ival);
				n->cost_expr = (yyvsp[-1].node);
				n->default_value = d?((d->val.type == T_PGInteger)?
					((double) d->val.val.ival):strtod(d->val.val.str,NULL)):1;
				(yyval.node) = (PGNode*) n;
			}
#line 20566 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 319: /* CostOptional: %empty  */
#line 506 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGPathInfo *n = makeNode(PGPathInfo);
				n->cost_expr = NULL;
				n->default_value = 1;
				(yyval.node) = (PGNode*) n;
			}
#line 20577 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 320: /* SubPath: PathVariableOptional PathModeOptional PathConcatenation GraphTableWhereOptional CostOptional  */
#line 516 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGPathInfo *n = (PGPathInfo*) (yyvsp[0].node);
				n->var_name = (yyvsp[-4].keyword);
				n->mode = (PGPathMode) (yyvsp[-3].ival);
				n->path = (yyvsp[-2].list);
				n->where_clause = (yyvsp[-1].node);
				(yyval.node) = (PGNode*) n;
			}
#line 20590 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 321: /* EnclosedSubPath: '[' SubPath ']' KleeneOptional  */
#line 528 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGSubPath *p = (PGSubPath*) (yyvsp[0].node);
				p->path = list_make1((yyvsp[-2].node));
				(yyval.node) = (PGNode*) p;
			}
#line 20600 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 322: /* PathElement: VertexPattern  */
#line 536 "third_party/libpg_query/grammar/statements/pgq.y"
                                                        { (yyval.list) = (yyvsp[0].list); }
#line 20606 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 323: /* PathElement: EdgePattern  */
#line 538 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.list) = (yyvsp[0].list); }
#line 20612 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 324: /* PathSequence: EnclosedSubPath PathSequence  */
#line 543 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGSubPath *n = (PGSubPath*) (yyvsp[-1].node);
				PGPathInfo *i = (PGPathInfo*) n->path;
				PGList* p = (PGList*) i->path;

				if (i->var_name == NULL && i->mode <= PG_PATHMODE_WALK &&
					i->where_clause == NULL && i->cost_expr == NULL)
				{
					/* there is no need for a SubPath */
					(yyval.list) = (yyvsp[0].list)?list_concat(p,(yyvsp[0].list)):p;
				} else {
        			n->path_var = i->var_name;
					n->mode = i->mode;
					n->path = p;
					n->where_clause = i->where_clause;
					n->cost_expr = i->cost_expr;
					n->default_value = i->default_value;
					(yyval.list) = list_make1(n);
					if ((yyvsp[0].list)) (yyval.list) = list_concat((yyval.list),(yyvsp[0].list));
				}
			}
#line 20638 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 325: /* PathSequence: PathElement PathSequence  */
#line 565 "third_party/libpg_query/grammar/statements/pgq.y"
                                                { (yyval.list) = (yyvsp[-1].list)?list_concat((yyvsp[-1].list),(yyvsp[0].list)):(yyvsp[0].list); }
#line 20644 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 326: /* PathSequence: %empty  */
#line 567 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.list) = NULL; }
#line 20650 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 327: /* PathConcatenation: PathSequence  */
#line 571 "third_party/libpg_query/grammar/statements/pgq.y"
                                                        { (yyval.list) = (yyvsp[0].list); }
#line 20656 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 328: /* PathConcatenation: PathSequence PatternUnion PathSequence  */
#line 574 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGPathUnion *n = makeNode(PGPathUnion);
				n->multiset = (yyvsp[-1].ival);
				n->path1 = (yyvsp[-2].list);
				n->path2 = (yyvsp[0].list);
				(yyval.list) = list_make1(n);
			}
#line 20668 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 329: /* OrLabelExpression: LabelExpression  */
#line 584 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 20674 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 330: /* OrLabelExpression: LabelExpression '|' OrLabelExpression  */
#line 587 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGLabelTest *n = makeNode(PGLabelTest);
				n->name = "|";
				n->left = (PGLabelTest*) (yyvsp[-2].node);
				n->right = (PGLabelTest*) (yyvsp[0].node);
				(yyval.node) = (PGNode*) n;
			}
#line 20686 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 331: /* AndLabelExpression: LabelExpression  */
#line 597 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 20692 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 332: /* AndLabelExpression: LabelExpression '&' AndLabelExpression  */
#line 600 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGLabelTest *n = makeNode(PGLabelTest);
				n->name = "|";
				n->left = (PGLabelTest*) (yyvsp[-2].node);
				n->right = (PGLabelTest*) (yyvsp[0].node);
				(yyval.node) = (PGNode*) n;
			}
#line 20704 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 333: /* ComposedLabelExpression: LabelExpression  */
#line 610 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 20710 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 334: /* ComposedLabelExpression: LabelExpression '|' OrLabelExpression  */
#line 613 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGLabelTest *n = makeNode(PGLabelTest);
				n->name = "|";
				n->left = (PGLabelTest*) (yyvsp[-2].node);
				n->right = (PGLabelTest*) (yyvsp[0].node);
				(yyval.node) = (PGNode*) n;
			}
#line 20722 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 335: /* ComposedLabelExpression: LabelExpression '&' AndLabelExpression  */
#line 622 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGLabelTest *n = makeNode(PGLabelTest);
				n->name = "&";
				n->left = (PGLabelTest*) (yyvsp[-2].node);
				n->right = (PGLabelTest*) (yyvsp[0].node);
				(yyval.node) = (PGNode*) n;
			}
#line 20734 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 336: /* LabelExpression: PGQ_IDENT  */
#line 633 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGLabelTest *n = makeNode(PGLabelTest);
				n->name = (yyvsp[0].str);
				n->left = n->right = NULL;
				(yyval.node) = (PGNode*) n;
			}
#line 20745 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 337: /* LabelExpression: '!' LabelExpression  */
#line 641 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGLabelTest *n = makeNode(PGLabelTest);
				n->name = "!";
				n->left = (PGLabelTest*) (yyvsp[0].node);
				n->right = NULL;
				(yyval.node) = (PGNode*) n;
			}
#line 20757 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 338: /* LabelExpression: '(' ComposedLabelExpression ')'  */
#line 649 "third_party/libpg_query/grammar/statements/pgq.y"
                                                { (yyval.node) = (yyvsp[-1].node); }
#line 20763 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 339: /* LabelExpressionOptional: IsOrColon LabelExpression  */
#line 653 "third_party/libpg_query/grammar/statements/pgq.y"
                                                { (yyval.node) = (yyvsp[0].node); }
#line 20769 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 340: /* LabelExpressionOptional: %empty  */
#line 655 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.node) = NULL; }
#line 20775 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 343: /* ArrowRight: '-'  */
#line 667 "third_party/libpg_query/grammar/statements/pgq.y"
                                                { (yyval.str) = "-"; }
#line 20781 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 344: /* ArrowRight: '-' '>'  */
#line 669 "third_party/libpg_query/grammar/statements/pgq.y"
                                                { (yyval.str) = "->"; }
#line 20787 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 345: /* ArrowRight: LAMBDA_ARROW  */
#line 671 "third_party/libpg_query/grammar/statements/pgq.y"
                                                        { (yyval.str) = "->"; }
#line 20793 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 346: /* ArrowLeftBracket: '-' '['  */
#line 675 "third_party/libpg_query/grammar/statements/pgq.y"
                                                { (yyval.str) = "-"; }
#line 20799 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 347: /* ArrowLeftBracket: '<' '-' '['  */
#line 677 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.str) = "<-"; }
#line 20805 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 348: /* AbbreviatedEdge: '<' ArrowRight  */
#line 682 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				char* dir = (yyvsp[0].str);
				(yyval.ival) = (dir[1] == '>')?PG_MATCH_EDGE_LEFT_RIGHT:PG_MATCH_EDGE_LEFT;
			}
#line 20814 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 349: /* AbbreviatedEdge: ArrowRight  */
#line 688 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				char* dir = (yyvsp[0].str);
				(yyval.ival) = (dir[1] == '>')?PG_MATCH_EDGE_RIGHT:PG_MATCH_EDGE_ANY;
			}
#line 20823 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 350: /* VariableOptional: PGQ_IDENT  */
#line 695 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 20829 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 351: /* VariableOptional: %empty  */
#line 697 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.str) = NULL;}
#line 20835 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 352: /* FullElementSpec: VariableOptional LabelExpressionOptional GraphTableWhereOptional CostOptional  */
#line 702 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGPathInfo *n = (PGPathInfo*) (yyvsp[0].node);
				n->var_name = (yyvsp[-3].str);
				n->where_clause = (yyvsp[-1].node);
				n->label_expr = (PGLabelTest*) (yyvsp[-2].node);
				(yyval.node) = (PGNode*) n;
			}
#line 20847 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 353: /* EdgePattern: AbbreviatedEdge KleeneOptional  */
#line 713 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGSubPath *p = (PGSubPath*) (yyvsp[0].node);
				PGPathElement *n = makeNode(PGPathElement);
				n->label_expr = NULL;
				n->element_var = NULL;
				n->match_type = (PGMatchType) (yyvsp[-1].ival);
				(yyval.list) = list_make1(n);
				if (p->lower != 1 || !p->single_bind) {
					/* return a subpath consisting of one edge (element) */
					p->path = (yyval.list);
					p->path_var = NULL;
					(yyval.list) = list_make1(p);
				}
			}
#line 20866 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 354: /* EdgePattern: ArrowLeftBracket FullElementSpec ']' ArrowRight KleeneOptional  */
#line 729 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				char *left = (yyvsp[-4].str), *right = (yyvsp[-1].str);
				PGPathInfo* i = (PGPathInfo*) (yyvsp[-3].node);
				PGSubPath *p = (PGSubPath*) (yyvsp[0].node);
				PGPathElement *n = makeNode(PGPathElement);

				n->match_type =
					(right[1] == '>')?
						((left[0] == '<')?PG_MATCH_EDGE_LEFT_RIGHT:PG_MATCH_EDGE_RIGHT):
						((left[0] == '<')?PG_MATCH_EDGE_LEFT:PG_MATCH_EDGE_ANY);
				n->element_var = i->var_name;
				n->label_expr = i->label_expr;
				(yyval.list) = list_make1(n);
				if (i->where_clause || i->cost_expr || p->lower != 1 || !p->single_bind) {
					/* return a subpath consisting of one edge (element) */
					p->where_clause = i->where_clause;
					p->cost_expr = i->cost_expr;
					p->default_value = i->default_value;
					p->path = (yyval.list);
					p->path_var = NULL;
					(yyval.list) = list_make1(p);
				}
			}
#line 20894 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 355: /* VertexPattern: '(' FullElementSpec ')'  */
#line 756 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGPathElement *n = makeNode(PGPathElement);
				PGPathInfo* i = (PGPathInfo*) (yyvsp[-1].node);

				n->element_var = i->var_name;
				n->label_expr = i->label_expr;
				n->match_type = PG_MATCH_VERTEX;
				(yyval.list) = list_make1(n);
				if (i->where_clause || i->cost_expr) {
					PGSubPath *p = makeNode(PGSubPath);
					p->mode = PG_PATHMODE_NONE;
					p->lower = p->upper = p->single_bind = 1;
					p->where_clause = i->where_clause;
					p->cost_expr = i->cost_expr;
					p->default_value = i->default_value;
					p->path = (yyval.list);
					p->path_var = NULL;
					(yyval.list) = list_make1(p);
				}
			}
#line 20919 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 356: /* pgq_expr: c_expr  */
#line 788 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 20925 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 357: /* pgq_expr: pgq_expr TYPECAST Typename  */
#line 790 "third_party/libpg_query/grammar/statements/pgq.y"
                                        { (yyval.node) = makeTypeCast((yyvsp[-2].node), (yyvsp[0].typnam), 0, (yylsp[-1])); }
#line 20931 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 358: /* pgq_expr: pgq_expr COLLATE any_name  */
#line 792 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					PGCollateClause *n = makeNode(PGCollateClause);
					n->arg = (yyvsp[-2].node);
					n->collname = (yyvsp[0].list);
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *) n;
				}
#line 20943 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 359: /* pgq_expr: pgq_expr AT TIME ZONE pgq_expr  */
#line 800 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("timezone"),
											   list_make2((yyvsp[0].node), (yyvsp[-4].node)),
											   (yylsp[-3]));
				}
#line 20953 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 360: /* pgq_expr: '+' pgq_expr  */
#line 815 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", NULL, (yyvsp[0].node), (yylsp[-1])); }
#line 20959 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 361: /* pgq_expr: '-' pgq_expr  */
#line 817 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = doNegate((yyvsp[0].node), (yylsp[-1])); }
#line 20965 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 362: /* pgq_expr: pgq_expr '+' pgq_expr  */
#line 819 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 20971 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 363: /* pgq_expr: pgq_expr '-' pgq_expr  */
#line 821 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "-", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 20977 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 364: /* pgq_expr: pgq_expr '*' pgq_expr  */
#line 823 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "*", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 20983 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 365: /* pgq_expr: pgq_expr '/' pgq_expr  */
#line 825 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "/", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 20989 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 366: /* pgq_expr: pgq_expr '%' pgq_expr  */
#line 827 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "%", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 20995 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 367: /* pgq_expr: pgq_expr '^' pgq_expr  */
#line 829 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "^", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 21001 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 368: /* pgq_expr: pgq_expr POWER_OF pgq_expr  */
#line 831 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "**", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 21007 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 369: /* pgq_expr: pgq_expr '<' pgq_expr  */
#line 833 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 21013 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 370: /* pgq_expr: pgq_expr '>' pgq_expr  */
#line 835 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, ">", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 21019 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 371: /* pgq_expr: pgq_expr '=' pgq_expr  */
#line 837 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 21025 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 372: /* pgq_expr: pgq_expr LESS_EQUALS pgq_expr  */
#line 839 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 21031 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 373: /* pgq_expr: pgq_expr GREATER_EQUALS pgq_expr  */
#line 841 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, ">=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 21037 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 374: /* pgq_expr: pgq_expr NOT_EQUALS pgq_expr  */
#line 843 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<>", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 21043 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 375: /* pgq_expr: pgq_expr qual_Op pgq_expr  */
#line 846 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[-1].list), (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 21049 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 376: /* pgq_expr: pgq_expr AND pgq_expr  */
#line 848 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = makeAndExpr((yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 21055 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 377: /* pgq_expr: pgq_expr OR pgq_expr  */
#line 850 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = makeOrExpr((yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 21061 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 378: /* pgq_expr: NOT pgq_expr  */
#line 852 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = makeNotExpr((yyvsp[0].node), (yylsp[-1])); }
#line 21067 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 379: /* pgq_expr: NOT_LA pgq_expr  */
#line 854 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = makeNotExpr((yyvsp[0].node), (yylsp[-1])); }
#line 21073 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 380: /* pgq_expr: pgq_expr GLOB pgq_expr  */
#line 856 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_GLOB, "~~~",
												   (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
				}
#line 21082 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 381: /* pgq_expr: pgq_expr LIKE pgq_expr  */
#line 861 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_LIKE, "~~",
												   (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
				}
#line 21091 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 382: /* pgq_expr: pgq_expr LIKE pgq_expr ESCAPE pgq_expr  */
#line 866 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("like_escape"),
											   list_make3((yyvsp[-4].node), (yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-3]));
					(yyval.node) = (PGNode *) n;
				}
#line 21102 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 383: /* pgq_expr: pgq_expr NOT_LA LIKE pgq_expr  */
#line 873 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_LIKE, "!~~",
												   (yyvsp[-3].node), (yyvsp[0].node), (yylsp[-2]));
				}
#line 21111 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 384: /* pgq_expr: pgq_expr NOT_LA LIKE pgq_expr ESCAPE pgq_expr  */
#line 878 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("not_like_escape"),
											   list_make3((yyvsp[-5].node), (yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-4]));
					(yyval.node) = (PGNode *) n;
				}
#line 21122 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 385: /* pgq_expr: pgq_expr ILIKE pgq_expr  */
#line 885 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_ILIKE, "~~*",
												   (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
				}
#line 21131 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 386: /* pgq_expr: pgq_expr ILIKE pgq_expr ESCAPE pgq_expr  */
#line 890 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("ilike_escape"),
											   list_make3((yyvsp[-4].node), (yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-3]));
					(yyval.node) = (PGNode *) n;
				}
#line 21142 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 387: /* pgq_expr: pgq_expr NOT_LA ILIKE pgq_expr  */
#line 897 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_ILIKE, "!~~*",
												   (yyvsp[-3].node), (yyvsp[0].node), (yylsp[-2]));
				}
#line 21151 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 388: /* pgq_expr: pgq_expr NOT_LA ILIKE pgq_expr ESCAPE pgq_expr  */
#line 902 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("not_ilike_escape"),
											   list_make3((yyvsp[-5].node), (yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-4]));
					(yyval.node) = (PGNode *) n;
				}
#line 21162 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 389: /* pgq_expr: pgq_expr SIMILAR TO pgq_expr  */
#line 910 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
											   list_make2((yyvsp[0].node), makeNullAConst(-1)),
											   (yylsp[-2]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "~",
												   (yyvsp[-3].node), (PGNode *) n, (yylsp[-2]));
				}
#line 21174 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 390: /* pgq_expr: pgq_expr SIMILAR TO pgq_expr ESCAPE pgq_expr  */
#line 918 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
											   list_make2((yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-4]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "~",
												   (yyvsp[-5].node), (PGNode *) n, (yylsp[-4]));
				}
#line 21186 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 391: /* pgq_expr: pgq_expr NOT_LA SIMILAR TO pgq_expr  */
#line 926 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
											   list_make2((yyvsp[0].node), makeNullAConst(-1)),
											   (yylsp[-3]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "!~",
												   (yyvsp[-4].node), (PGNode *) n, (yylsp[-3]));
				}
#line 21198 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 392: /* pgq_expr: pgq_expr NOT_LA SIMILAR TO pgq_expr ESCAPE pgq_expr  */
#line 934 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
											   list_make2((yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-5]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "!~",
												   (yyvsp[-6].node), (PGNode *) n, (yylsp[-5]));
				}
#line 21210 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 393: /* pgq_expr: pgq_expr IS NULL_P  */
#line 952 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-2].node);
					n->nulltesttype = PG_IS_NULL;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 21222 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 394: /* pgq_expr: pgq_expr ISNULL  */
#line 960 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-1].node);
					n->nulltesttype = PG_IS_NULL;
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 21234 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 395: /* pgq_expr: pgq_expr IS NOT NULL_P  */
#line 968 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-3].node);
					n->nulltesttype = IS_NOT_NULL;
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)n;
				}
#line 21246 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 396: /* pgq_expr: pgq_expr NOT NULL_P  */
#line 976 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-2].node);
					n->nulltesttype = IS_NOT_NULL;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 21258 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 397: /* pgq_expr: pgq_expr NOTNULL  */
#line 984 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-1].node);
					n->nulltesttype = IS_NOT_NULL;
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 21270 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 398: /* pgq_expr: pgq_expr LAMBDA_ARROW pgq_expr  */
#line 992 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGLambdaFunction *n = makeNode(PGLambdaFunction);
				n->lhs = (yyvsp[-2].node);
				n->rhs = (yyvsp[0].node);
				n->location = (yylsp[-1]);
				(yyval.node) = (PGNode *) n;
			}
#line 21282 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 399: /* pgq_expr: pgq_expr DOUBLE_ARROW pgq_expr  */
#line 1000 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
							(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "->>", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
			}
#line 21290 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 400: /* pgq_expr: row OVERLAPS row  */
#line 1004 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					if (list_length((yyvsp[-2].list)) != 2)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("wrong number of parameters on left side of OVERLAPS expression"),
								 parser_errposition((yylsp[-2]))));
					if (list_length((yyvsp[0].list)) != 2)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("wrong number of parameters on right side of OVERLAPS expression"),
								 parser_errposition((yylsp[0]))));
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("overlaps"),
											   list_concat((yyvsp[-2].list), (yyvsp[0].list)),
											   (yylsp[-1]));
				}
#line 21310 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 401: /* pgq_expr: pgq_expr IS TRUE_P  */
#line 1020 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-2].node);
					b->booltesttype = PG_IS_TRUE;
					b->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)b;
				}
#line 21322 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 402: /* pgq_expr: pgq_expr IS NOT TRUE_P  */
#line 1028 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-3].node);
					b->booltesttype = IS_NOT_TRUE;
					b->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)b;
				}
#line 21334 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 403: /* pgq_expr: pgq_expr IS FALSE_P  */
#line 1036 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-2].node);
					b->booltesttype = IS_FALSE;
					b->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)b;
				}
#line 21346 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 404: /* pgq_expr: pgq_expr IS NOT FALSE_P  */
#line 1044 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-3].node);
					b->booltesttype = IS_NOT_FALSE;
					b->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)b;
				}
#line 21358 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 405: /* pgq_expr: pgq_expr IS UNKNOWN  */
#line 1052 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-2].node);
					b->booltesttype = IS_UNKNOWN;
					b->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)b;
				}
#line 21370 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 406: /* pgq_expr: pgq_expr IS NOT UNKNOWN  */
#line 1060 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-3].node);
					b->booltesttype = IS_NOT_UNKNOWN;
					b->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)b;
				}
#line 21382 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 407: /* pgq_expr: pgq_expr IS DISTINCT FROM pgq_expr  */
#line 1068 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_DISTINCT, "=", (yyvsp[-4].node), (yyvsp[0].node), (yylsp[-3]));
				}
#line 21390 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 408: /* pgq_expr: pgq_expr IS NOT DISTINCT FROM pgq_expr  */
#line 1072 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_DISTINCT, "=", (yyvsp[-5].node), (yyvsp[0].node), (yylsp[-4]));
				}
#line 21398 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 409: /* pgq_expr: pgq_expr IS OF '(' type_list ')'  */
#line 1076 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OF, "=", (yyvsp[-5].node), (PGNode *) (yyvsp[-1].list), (yylsp[-4]));
				}
#line 21406 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 410: /* pgq_expr: pgq_expr IS NOT OF '(' type_list ')'  */
#line 1080 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OF, "<>", (yyvsp[-6].node), (PGNode *) (yyvsp[-1].list), (yylsp[-5]));
				}
#line 21414 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 411: /* pgq_expr: pgq_expr BETWEEN opt_asymmetric b_expr AND pgq_expr  */
#line 1084 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_BETWEEN,
												   "BETWEEN",
												   (yyvsp[-5].node),
												   (PGNode *) list_make2((yyvsp[-2].node), (yyvsp[0].node)),
												   (yylsp[-4]));
				}
#line 21426 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 412: /* pgq_expr: pgq_expr NOT_LA BETWEEN opt_asymmetric b_expr AND pgq_expr  */
#line 1092 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_BETWEEN,
												   "NOT BETWEEN",
												   (yyvsp[-6].node),
												   (PGNode *) list_make2((yyvsp[-2].node), (yyvsp[0].node)),
												   (yylsp[-5]));
				}
#line 21438 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 413: /* pgq_expr: pgq_expr BETWEEN SYMMETRIC b_expr AND pgq_expr  */
#line 1100 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_BETWEEN_SYM,
												   "BETWEEN SYMMETRIC",
												   (yyvsp[-5].node),
												   (PGNode *) list_make2((yyvsp[-2].node), (yyvsp[0].node)),
												   (yylsp[-4]));
				}
#line 21450 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 414: /* pgq_expr: pgq_expr NOT_LA BETWEEN SYMMETRIC b_expr AND pgq_expr  */
#line 1108 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_BETWEEN_SYM,
												   "NOT BETWEEN SYMMETRIC",
												   (yyvsp[-6].node),
												   (PGNode *) list_make2((yyvsp[-2].node), (yyvsp[0].node)),
												   (yylsp[-5]));
				}
#line 21462 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 415: /* pgq_expr: pgq_expr IN_P in_expr  */
#line 1116 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					/* in_expr returns a PGSubLink or a list of pgq_exprs */
					if (IsA((yyvsp[0].node), PGSubLink))
					{
						/* generate foo = ANY (subquery) */
						PGSubLink *n = (PGSubLink *) (yyvsp[0].node);
						n->subLinkType = PG_ANY_SUBLINK;
						n->subLinkId = 0;
						n->testexpr = (yyvsp[-2].node);
						n->operName = NIL;		/* show it's IN not = ANY */
						n->location = (yylsp[-1]);
						(yyval.node) = (PGNode *)n;
					}
					else
					{
						/* generate scalar IN expression */
						(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_IN, "=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
					}
				}
#line 21486 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 416: /* pgq_expr: pgq_expr NOT_LA IN_P in_expr  */
#line 1136 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					/* in_expr returns a PGSubLink or a list of pgq_exprs */
					if (IsA((yyvsp[0].node), PGSubLink))
					{
						/* generate NOT (foo = ANY (subquery)) */
						/* Make an = ANY node */
						PGSubLink *n = (PGSubLink *) (yyvsp[0].node);
						n->subLinkType = PG_ANY_SUBLINK;
						n->subLinkId = 0;
						n->testexpr = (yyvsp[-3].node);
						n->operName = NIL;		/* show it's IN not = ANY */
						n->location = (yylsp[-2]);
						/* Stick a NOT on top; must have same parse location */
						(yyval.node) = makeNotExpr((PGNode *) n, (yylsp[-2]));
					}
					else
					{
						/* generate scalar NOT IN expression */
						(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_IN, "<>", (yyvsp[-3].node), (yyvsp[0].node), (yylsp[-2]));
					}
				}
#line 21512 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 417: /* CreateStmt: CREATE_P OptTemp TABLE qualified_name '(' OptTableElementList ')' OptWith OnCommitOption  */
#line 9 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGCreateStmt *n = makeNode(PGCreateStmt);
					(yyvsp[-5].range)->relpersistence = (yyvsp[-7].ival);
					n->relation = (yyvsp[-5].range);
					n->tableElts = (yyvsp[-3].list);
					n->ofTypename = NULL;
					n->constraints = NIL;
					n->options = (yyvsp[-1].list);
					n->oncommit = (yyvsp[0].oncommit);
					n->onconflict = PG_ERROR_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 21529 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 418: /* CreateStmt: CREATE_P OptTemp TABLE IF_P NOT EXISTS qualified_name '(' OptTableElementList ')' OptWith OnCommitOption  */
#line 24 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGCreateStmt *n = makeNode(PGCreateStmt);
					(yyvsp[-5].range)->relpersistence = (yyvsp[-10].ival);
					n->relation = (yyvsp[-5].range);
					n->tableElts = (yyvsp[-3].list);
					n->ofTypename = NULL;
					n->constraints = NIL;
					n->options = (yyvsp[-1].list);
					n->oncommit = (yyvsp[0].oncommit);
					n->onconflict = PG_IGNORE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 21546 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 419: /* CreateStmt: CREATE_P OR REPLACE OptTemp TABLE qualified_name '(' OptTableElementList ')' OptWith OnCommitOption  */
#line 39 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGCreateStmt *n = makeNode(PGCreateStmt);
					(yyvsp[-5].range)->relpersistence = (yyvsp[-7].ival);
					n->relation = (yyvsp[-5].range);
					n->tableElts = (yyvsp[-3].list);
					n->ofTypename = NULL;
					n->constraints = NIL;
					n->options = (yyvsp[-1].list);
					n->oncommit = (yyvsp[0].oncommit);
					n->onconflict = PG_REPLACE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 21563 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 420: /* ConstraintAttributeSpec: %empty  */
#line 56 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = 0; }
#line 21569 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 421: /* ConstraintAttributeSpec: ConstraintAttributeSpec ConstraintAttributeElem  */
#line 58 "third_party/libpg_query/grammar/statements/create.y"
                                {
					/*
					 * We must complain about conflicting options.
					 * We could, but choose not to, complain about redundant
					 * options (ie, where $2's bit is already set in $1).
					 */
					int		newspec = (yyvsp[-1].ival) | (yyvsp[0].ival);

					/* special message for this case */
					if ((newspec & (CAS_NOT_DEFERRABLE | CAS_INITIALLY_DEFERRED)) == (CAS_NOT_DEFERRABLE | CAS_INITIALLY_DEFERRED))
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("constraint declared INITIALLY DEFERRED must be DEFERRABLE"),
								 parser_errposition((yylsp[0]))));
					/* generic message for other conflicts */
					if ((newspec & (CAS_NOT_DEFERRABLE | CAS_DEFERRABLE)) == (CAS_NOT_DEFERRABLE | CAS_DEFERRABLE) ||
						(newspec & (CAS_INITIALLY_IMMEDIATE | CAS_INITIALLY_DEFERRED)) == (CAS_INITIALLY_IMMEDIATE | CAS_INITIALLY_DEFERRED))
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("conflicting constraint properties"),
								 parser_errposition((yylsp[0]))));
					(yyval.ival) = newspec;
				}
#line 21597 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 422: /* def_arg: func_type  */
#line 84 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.node) = (PGNode *)(yyvsp[0].typnam); }
#line 21603 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 423: /* def_arg: reserved_keyword  */
#line 85 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.node) = (PGNode *)makeString(pstrdup((yyvsp[0].keyword))); }
#line 21609 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 424: /* def_arg: qual_all_Op  */
#line 86 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.node) = (PGNode *)(yyvsp[0].list); }
#line 21615 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 425: /* def_arg: NumericOnly  */
#line 87 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.node) = (PGNode *)(yyvsp[0].value); }
#line 21621 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 426: /* def_arg: Sconst  */
#line 88 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.node) = (PGNode *)makeString((yyvsp[0].str)); }
#line 21627 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 427: /* def_arg: NONE  */
#line 89 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.node) = (PGNode *)makeString(pstrdup((yyvsp[0].keyword))); }
#line 21633 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 428: /* OptParenthesizedSeqOptList: '(' SeqOptList ')'  */
#line 93 "third_party/libpg_query/grammar/statements/create.y"
                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 21639 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 429: /* OptParenthesizedSeqOptList: %empty  */
#line 94 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                { (yyval.list) = NIL; }
#line 21645 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 430: /* generic_option_arg: Sconst  */
#line 99 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.node) = (PGNode *) makeString((yyvsp[0].str)); }
#line 21651 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 431: /* key_action: NO ACTION  */
#line 104 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = PG_FKCONSTR_ACTION_NOACTION; }
#line 21657 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 432: /* key_action: RESTRICT  */
#line 105 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = PG_FKCONSTR_ACTION_RESTRICT; }
#line 21663 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 433: /* key_action: CASCADE  */
#line 106 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = PG_FKCONSTR_ACTION_CASCADE; }
#line 21669 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 434: /* key_action: SET NULL_P  */
#line 107 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_FKCONSTR_ACTION_SETNULL; }
#line 21675 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 435: /* key_action: SET DEFAULT  */
#line 108 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_FKCONSTR_ACTION_SETDEFAULT; }
#line 21681 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 436: /* ColConstraint: CONSTRAINT name ColConstraintElem  */
#line 114 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = castNode(PGConstraint, (yyvsp[0].node));
					n->conname = (yyvsp[-1].str);
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *) n;
				}
#line 21692 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 437: /* ColConstraint: ColConstraintElem  */
#line 120 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 21698 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 438: /* ColConstraint: ConstraintAttr  */
#line 121 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 21704 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 439: /* ColConstraint: COLLATE any_name  */
#line 123 "third_party/libpg_query/grammar/statements/create.y"
                                {
					/*
					 * Note: the PGCollateClause is momentarily included in
					 * the list built by ColQualList, but we split it out
					 * again in SplitColQualList.
					 */
					PGCollateClause *n = makeNode(PGCollateClause);
					n->arg = NULL;
					n->collname = (yyvsp[0].list);
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *) n;
				}
#line 21721 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 440: /* ColConstraintElem: NOT NULL_P  */
#line 140 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_NOTNULL;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 21732 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 441: /* ColConstraintElem: NULL_P  */
#line 147 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_NULL;
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 21743 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 442: /* ColConstraintElem: UNIQUE opt_definition  */
#line 154 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_UNIQUE;
					n->location = (yylsp[-1]);
					n->keys = NULL;
					n->options = (yyvsp[0].list);
					n->indexname = NULL;
					(yyval.node) = (PGNode *)n;
				}
#line 21757 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 443: /* ColConstraintElem: PRIMARY KEY opt_definition  */
#line 164 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_PRIMARY;
					n->location = (yylsp[-2]);
					n->keys = NULL;
					n->options = (yyvsp[0].list);
					n->indexname = NULL;
					(yyval.node) = (PGNode *)n;
				}
#line 21771 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 444: /* ColConstraintElem: CHECK_P '(' a_expr ')' opt_no_inherit  */
#line 174 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_CHECK;
					n->location = (yylsp[-4]);
					n->is_no_inherit = (yyvsp[0].boolean);
					n->raw_expr = (yyvsp[-2].node);
					n->cooked_expr = NULL;
					n->skip_validation = false;
					n->initially_valid = true;
					(yyval.node) = (PGNode *)n;
				}
#line 21787 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 445: /* ColConstraintElem: USING COMPRESSION name  */
#line 186 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_COMPRESSION;
					n->location = (yylsp[-2]);
					n->compression_name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 21799 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 446: /* ColConstraintElem: DEFAULT b_expr  */
#line 194 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_DEFAULT;
					n->location = (yylsp[-1]);
					n->raw_expr = (yyvsp[0].node);
					n->cooked_expr = NULL;
					(yyval.node) = (PGNode *)n;
				}
#line 21812 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 447: /* ColConstraintElem: REFERENCES qualified_name opt_column_list key_match key_actions  */
#line 203 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_FOREIGN;
					n->location = (yylsp[-4]);
					n->pktable			= (yyvsp[-3].range);
					n->fk_attrs			= NIL;
					n->pk_attrs			= (yyvsp[-2].list);
					n->fk_matchtype		= (yyvsp[-1].ival);
					n->fk_upd_action	= (char) ((yyvsp[0].ival) >> 8);
					n->fk_del_action	= (char) ((yyvsp[0].ival) & 0xFF);
					n->skip_validation  = false;
					n->initially_valid  = true;
					(yyval.node) = (PGNode *)n;
				}
#line 21831 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 448: /* GeneratedColumnType: VIRTUAL  */
#line 220 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.constr) = PG_CONSTR_GENERATED_VIRTUAL; }
#line 21837 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 449: /* GeneratedColumnType: STORED  */
#line 221 "third_party/libpg_query/grammar/statements/create.y"
                                 { (yyval.constr) = PG_CONSTR_GENERATED_STORED; }
#line 21843 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 450: /* opt_GeneratedColumnType: GeneratedColumnType  */
#line 225 "third_party/libpg_query/grammar/statements/create.y"
                                            { (yyval.constr) = (yyvsp[0].constr); }
#line 21849 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 451: /* opt_GeneratedColumnType: %empty  */
#line 226 "third_party/libpg_query/grammar/statements/create.y"
                                      { (yyval.constr) = PG_CONSTR_GENERATED_VIRTUAL; }
#line 21855 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 452: /* GeneratedConstraintElem: GENERATED generated_when AS IDENTITY_P OptParenthesizedSeqOptList  */
#line 231 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_IDENTITY;
					n->generated_when = (yyvsp[-3].ival);
					n->options = (yyvsp[0].list);
					n->location = (yylsp[-4]);
					(yyval.node) = (PGNode *)n;
				}
#line 21868 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 453: /* GeneratedConstraintElem: GENERATED generated_when AS '(' a_expr ')' opt_GeneratedColumnType  */
#line 240 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = (yyvsp[0].constr);
					n->generated_when = (yyvsp[-5].ival);
					n->raw_expr = (yyvsp[-2].node);
					n->cooked_expr = NULL;
					n->location = (yylsp[-6]);

					/*
					 * Can't do this in the grammar because of shift/reduce
					 * conflicts.  (IDENTITY allows both ALWAYS and BY
					 * DEFAULT, but generated columns only allow ALWAYS.)  We
					 * can also give a more useful error message and location.
					 */
					if ((yyvsp[-5].ival) != PG_ATTRIBUTE_IDENTITY_ALWAYS)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("for a generated column, GENERATED ALWAYS must be specified"),
								 parser_errposition((yylsp[-5]))));

					(yyval.node) = (PGNode *)n;
				}
#line 21895 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 454: /* GeneratedConstraintElem: AS '(' a_expr ')' opt_GeneratedColumnType  */
#line 263 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = (yyvsp[0].constr);
					n->generated_when = PG_ATTRIBUTE_IDENTITY_ALWAYS;
					n->raw_expr = (yyvsp[-2].node);
					n->cooked_expr = NULL;
					n->location = (yylsp[-4]);
					(yyval.node) = (PGNode *)n;
				}
#line 21909 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 455: /* generic_option_elem: generic_option_name generic_option_arg  */
#line 277 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[-1].str), (yyvsp[0].node), (yylsp[-1]));
				}
#line 21917 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 456: /* key_update: ON UPDATE key_action  */
#line 283 "third_party/libpg_query/grammar/statements/create.y"
                                                { (yyval.ival) = (yyvsp[0].ival); }
#line 21923 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 457: /* key_actions: key_update  */
#line 289 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = ((yyvsp[0].ival) << 8) | (PG_FKCONSTR_ACTION_NOACTION & 0xFF); }
#line 21929 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 458: /* key_actions: key_delete  */
#line 291 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = (PG_FKCONSTR_ACTION_NOACTION << 8) | ((yyvsp[0].ival) & 0xFF); }
#line 21935 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 459: /* key_actions: key_update key_delete  */
#line 293 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = ((yyvsp[-1].ival) << 8) | ((yyvsp[0].ival) & 0xFF); }
#line 21941 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 460: /* key_actions: key_delete key_update  */
#line 295 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = ((yyvsp[0].ival) << 8) | ((yyvsp[-1].ival) & 0xFF); }
#line 21947 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 461: /* key_actions: %empty  */
#line 297 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = (PG_FKCONSTR_ACTION_NOACTION << 8) | (PG_FKCONSTR_ACTION_NOACTION & 0xFF); }
#line 21953 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 462: /* OnCommitOption: ON COMMIT DROP  */
#line 300 "third_party/libpg_query/grammar/statements/create.y"
                                                        { (yyval.oncommit) = ONCOMMIT_DROP; }
#line 21959 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 463: /* OnCommitOption: ON COMMIT DELETE_P ROWS  */
#line 301 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.oncommit) = PG_ONCOMMIT_DELETE_ROWS; }
#line 21965 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 464: /* OnCommitOption: ON COMMIT PRESERVE ROWS  */
#line 302 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.oncommit) = PG_ONCOMMIT_PRESERVE_ROWS; }
#line 21971 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 465: /* OnCommitOption: %empty  */
#line 303 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.oncommit) = PG_ONCOMMIT_NOOP; }
#line 21977 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 466: /* reloptions: '(' reloption_list ')'  */
#line 308 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 21983 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 467: /* opt_no_inherit: NO INHERIT  */
#line 312 "third_party/libpg_query/grammar/statements/create.y"
                                                                                {  (yyval.boolean) = true; }
#line 21989 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 468: /* opt_no_inherit: %empty  */
#line 313 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        {  (yyval.boolean) = false; }
#line 21995 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 469: /* TableConstraint: CONSTRAINT name ConstraintElem  */
#line 319 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = castNode(PGConstraint, (yyvsp[0].node));
					n->conname = (yyvsp[-1].str);
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *) n;
				}
#line 22006 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 470: /* TableConstraint: ConstraintElem  */
#line 325 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 22012 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 471: /* TableLikeOption: COMMENTS  */
#line 330 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_CREATE_TABLE_LIKE_COMMENTS; }
#line 22018 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 472: /* TableLikeOption: CONSTRAINTS  */
#line 331 "third_party/libpg_query/grammar/statements/create.y"
                                                        { (yyval.ival) = PG_CREATE_TABLE_LIKE_CONSTRAINTS; }
#line 22024 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 473: /* TableLikeOption: DEFAULTS  */
#line 332 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_CREATE_TABLE_LIKE_DEFAULTS; }
#line 22030 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 474: /* TableLikeOption: IDENTITY_P  */
#line 333 "third_party/libpg_query/grammar/statements/create.y"
                                                        { (yyval.ival) = PG_CREATE_TABLE_LIKE_IDENTITY; }
#line 22036 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 475: /* TableLikeOption: INDEXES  */
#line 334 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_CREATE_TABLE_LIKE_INDEXES; }
#line 22042 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 476: /* TableLikeOption: STATISTICS  */
#line 335 "third_party/libpg_query/grammar/statements/create.y"
                                                        { (yyval.ival) = PG_CREATE_TABLE_LIKE_STATISTICS; }
#line 22048 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 477: /* TableLikeOption: STORAGE  */
#line 336 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_CREATE_TABLE_LIKE_STORAGE; }
#line 22054 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 478: /* TableLikeOption: ALL  */
#line 337 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_CREATE_TABLE_LIKE_ALL; }
#line 22060 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 479: /* reloption_list: reloption_elem  */
#line 343 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].defelt)); }
#line 22066 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 480: /* reloption_list: reloption_list ',' reloption_elem  */
#line 344 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt)); }
#line 22072 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 481: /* ExistingIndex: USING INDEX index_name  */
#line 348 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.str) = (yyvsp[0].str); }
#line 22078 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 482: /* ConstraintAttr: DEFERRABLE  */
#line 354 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_ATTR_DEFERRABLE;
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 22089 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 483: /* ConstraintAttr: NOT DEFERRABLE  */
#line 361 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_ATTR_NOT_DEFERRABLE;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 22100 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 484: /* ConstraintAttr: INITIALLY DEFERRED  */
#line 368 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_ATTR_DEFERRED;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 22111 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 485: /* ConstraintAttr: INITIALLY IMMEDIATE  */
#line 375 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_ATTR_IMMEDIATE;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 22122 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 486: /* OptWith: WITH reloptions  */
#line 386 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.list) = (yyvsp[0].list); }
#line 22128 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 487: /* OptWith: WITH OIDS  */
#line 387 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.list) = list_make1(makeDefElem("oids", (PGNode *) makeInteger(true), (yylsp[-1]))); }
#line 22134 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 488: /* OptWith: WITHOUT OIDS  */
#line 388 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.list) = list_make1(makeDefElem("oids", (PGNode *) makeInteger(false), (yylsp[-1]))); }
#line 22140 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 489: /* OptWith: %empty  */
#line 389 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.list) = NIL; }
#line 22146 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 490: /* definition: '(' def_list ')'  */
#line 393 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 22152 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 491: /* TableLikeOptionList: TableLikeOptionList INCLUDING TableLikeOption  */
#line 398 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.ival) = (yyvsp[-2].ival) | (yyvsp[0].ival); }
#line 22158 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 492: /* TableLikeOptionList: TableLikeOptionList EXCLUDING TableLikeOption  */
#line 399 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.ival) = (yyvsp[-2].ival) & ~(yyvsp[0].ival); }
#line 22164 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 493: /* TableLikeOptionList: %empty  */
#line 400 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.ival) = 0; }
#line 22170 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 494: /* generic_option_name: ColLabel  */
#line 405 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.str) = (yyvsp[0].str); }
#line 22176 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 495: /* ConstraintAttributeElem: NOT DEFERRABLE  */
#line 410 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = CAS_NOT_DEFERRABLE; }
#line 22182 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 496: /* ConstraintAttributeElem: DEFERRABLE  */
#line 411 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = CAS_DEFERRABLE; }
#line 22188 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 497: /* ConstraintAttributeElem: INITIALLY IMMEDIATE  */
#line 412 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = CAS_INITIALLY_IMMEDIATE; }
#line 22194 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 498: /* ConstraintAttributeElem: INITIALLY DEFERRED  */
#line 413 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = CAS_INITIALLY_DEFERRED; }
#line 22200 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 499: /* ConstraintAttributeElem: NOT VALID  */
#line 414 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.ival) = CAS_NOT_VALID; }
#line 22206 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 500: /* ConstraintAttributeElem: NO INHERIT  */
#line 415 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = CAS_NO_INHERIT; }
#line 22212 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 501: /* columnDef: ColId Typename ColQualList  */
#line 421 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGColumnDef *n = makeNode(PGColumnDef);
					n->category = COL_STANDARD;
					n->colname = (yyvsp[-2].str);
					n->typeName = (yyvsp[-1].typnam);
					n->inhcount = 0;
					n->is_local = true;
					n->is_not_null = false;
					n->is_from_type = false;
					n->storage = 0;
					n->raw_default = NULL;
					n->cooked_default = NULL;
					n->collOid = InvalidOid;
					SplitColQualList((yyvsp[0].list), &n->constraints, &n->collClause,
									 yyscanner);
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)n;
			}
#line 22235 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 502: /* columnDef: ColId opt_Typename GeneratedConstraintElem ColQualList  */
#line 441 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGColumnDef *n = makeNode(PGColumnDef);
					n->category = COL_GENERATED;
					n->colname = (yyvsp[-3].str);
					n->typeName = (yyvsp[-2].typnam);
					n->inhcount = 0;
					n->is_local = true;
					n->is_not_null = false;
					n->is_from_type = false;
					n->storage = 0;
					n->raw_default = NULL;
					n->cooked_default = NULL;
					n->collOid = InvalidOid;
					// merge the constraints with the generated column constraint
					auto constraints = (yyvsp[0].list);
					if (constraints) {
					    constraints = lappend(constraints, (yyvsp[-1].node));
					} else {
					    constraints = list_make1((yyvsp[-1].node));
					}
					SplitColQualList(constraints, &n->constraints, &n->collClause,
									 yyscanner);
					n->location = (yylsp[-3]);
					(yyval.node) = (PGNode *)n;
			}
#line 22265 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 503: /* def_list: def_elem  */
#line 469 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].defelt)); }
#line 22271 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 504: /* def_list: def_list ',' def_elem  */
#line 470 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt)); }
#line 22277 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 505: /* index_name: ColId  */
#line 474 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 22283 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 506: /* TableElement: columnDef  */
#line 478 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 22289 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 507: /* TableElement: TableLikeClause  */
#line 479 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 22295 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 508: /* TableElement: TableConstraint  */
#line 480 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 22301 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 509: /* def_elem: ColLabel '=' def_arg  */
#line 485 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[-2].str), (PGNode *) (yyvsp[0].node), (yylsp[-2]));
				}
#line 22309 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 510: /* def_elem: ColLabel  */
#line 489 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[0].str), NULL, (yylsp[0]));
				}
#line 22317 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 511: /* opt_definition: WITH definition  */
#line 496 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 22323 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 512: /* opt_definition: %empty  */
#line 497 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                { (yyval.list) = NIL; }
#line 22329 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 513: /* OptTableElementList: TableElementList  */
#line 502 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 22335 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 514: /* OptTableElementList: TableElementList ','  */
#line 503 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 22341 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 515: /* OptTableElementList: %empty  */
#line 504 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.list) = NIL; }
#line 22347 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 516: /* columnElem: ColId  */
#line 509 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.node) = (PGNode *) makeString((yyvsp[0].str));
				}
#line 22355 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 517: /* opt_column_list: '(' columnList ')'  */
#line 516 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 22361 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 518: /* opt_column_list: %empty  */
#line 517 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                { (yyval.list) = NIL; }
#line 22367 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 519: /* ColQualList: ColQualList ColConstraint  */
#line 522 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 22373 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 520: /* ColQualList: %empty  */
#line 523 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                { (yyval.list) = NIL; }
#line 22379 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 521: /* key_delete: ON DELETE_P key_action  */
#line 527 "third_party/libpg_query/grammar/statements/create.y"
                                                { (yyval.ival) = (yyvsp[0].ival); }
#line 22385 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 522: /* reloption_elem: ColLabel '=' def_arg  */
#line 533 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[-2].str), (PGNode *) (yyvsp[0].node), (yylsp[-2]));
				}
#line 22393 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 523: /* reloption_elem: ColLabel  */
#line 537 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[0].str), NULL, (yylsp[0]));
				}
#line 22401 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 524: /* reloption_elem: ColLabel '.' ColLabel '=' def_arg  */
#line 541 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElemExtended((yyvsp[-4].str), (yyvsp[-2].str), (PGNode *) (yyvsp[0].node),
											 PG_DEFELEM_UNSPEC, (yylsp[-4]));
				}
#line 22410 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 525: /* reloption_elem: ColLabel '.' ColLabel  */
#line 546 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElemExtended((yyvsp[-2].str), (yyvsp[0].str), NULL, PG_DEFELEM_UNSPEC, (yylsp[-2]));
				}
#line 22418 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 526: /* columnList: columnElem  */
#line 553 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 22424 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 527: /* columnList: columnList ',' columnElem  */
#line 554 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 22430 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 528: /* columnList_opt_comma: columnList  */
#line 558 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 22436 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 529: /* columnList_opt_comma: columnList ','  */
#line 559 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 22442 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 530: /* func_type: Typename  */
#line 563 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.typnam) = (yyvsp[0].typnam); }
#line 22448 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 531: /* func_type: type_function_name attrs '%' TYPE_P  */
#line 565 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.typnam) = makeTypeNameFromNameList(lcons(makeString((yyvsp[-3].str)), (yyvsp[-2].list)));
					(yyval.typnam)->pct_type = true;
					(yyval.typnam)->location = (yylsp[-3]);
				}
#line 22458 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 532: /* func_type: SETOF type_function_name attrs '%' TYPE_P  */
#line 571 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.typnam) = makeTypeNameFromNameList(lcons(makeString((yyvsp[-3].str)), (yyvsp[-2].list)));
					(yyval.typnam)->pct_type = true;
					(yyval.typnam)->setof = true;
					(yyval.typnam)->location = (yylsp[-3]);
				}
#line 22469 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 533: /* ConstraintElem: CHECK_P '(' a_expr ')' ConstraintAttributeSpec  */
#line 582 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_CHECK;
					n->location = (yylsp[-4]);
					n->raw_expr = (yyvsp[-2].node);
					n->cooked_expr = NULL;
					processCASbits((yyvsp[0].ival), (yylsp[0]), "CHECK",
								   NULL, NULL, &n->skip_validation,
								   &n->is_no_inherit, yyscanner);
					n->initially_valid = !n->skip_validation;
					(yyval.node) = (PGNode *)n;
				}
#line 22486 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 534: /* ConstraintElem: UNIQUE '(' columnList_opt_comma ')' opt_definition ConstraintAttributeSpec  */
#line 596 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_UNIQUE;
					n->location = (yylsp[-5]);
					n->keys = (yyvsp[-3].list);
					n->options = (yyvsp[-1].list);
					n->indexname = NULL;
					processCASbits((yyvsp[0].ival), (yylsp[0]), "UNIQUE",
								   &n->deferrable, &n->initdeferred, NULL,
								   NULL, yyscanner);
					(yyval.node) = (PGNode *)n;
				}
#line 22503 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 535: /* ConstraintElem: UNIQUE ExistingIndex ConstraintAttributeSpec  */
#line 609 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_UNIQUE;
					n->location = (yylsp[-2]);
					n->keys = NIL;
					n->options = NIL;
					n->indexname = (yyvsp[-1].str);
					n->indexspace = NULL;
					processCASbits((yyvsp[0].ival), (yylsp[0]), "UNIQUE",
								   &n->deferrable, &n->initdeferred, NULL,
								   NULL, yyscanner);
					(yyval.node) = (PGNode *)n;
				}
#line 22521 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 536: /* ConstraintElem: PRIMARY KEY '(' columnList_opt_comma ')' opt_definition ConstraintAttributeSpec  */
#line 624 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_PRIMARY;
					n->location = (yylsp[-6]);
					n->keys = (yyvsp[-3].list);
					n->options = (yyvsp[-1].list);
					n->indexname = NULL;
					processCASbits((yyvsp[0].ival), (yylsp[0]), "PRIMARY KEY",
								   &n->deferrable, &n->initdeferred, NULL,
								   NULL, yyscanner);
					(yyval.node) = (PGNode *)n;
				}
#line 22538 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 537: /* ConstraintElem: PRIMARY KEY ExistingIndex ConstraintAttributeSpec  */
#line 637 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_PRIMARY;
					n->location = (yylsp[-3]);
					n->keys = NIL;
					n->options = NIL;
					n->indexname = (yyvsp[-1].str);
					n->indexspace = NULL;
					processCASbits((yyvsp[0].ival), (yylsp[0]), "PRIMARY KEY",
								   &n->deferrable, &n->initdeferred, NULL,
								   NULL, yyscanner);
					(yyval.node) = (PGNode *)n;
				}
#line 22556 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 538: /* ConstraintElem: FOREIGN KEY '(' columnList_opt_comma ')' REFERENCES qualified_name opt_column_list key_match key_actions ConstraintAttributeSpec  */
#line 652 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_FOREIGN;
					n->location = (yylsp[-10]);
					n->pktable			= (yyvsp[-4].range);
					n->fk_attrs			= (yyvsp[-7].list);
					n->pk_attrs			= (yyvsp[-3].list);
					n->fk_matchtype		= (yyvsp[-2].ival);
					n->fk_upd_action	= (char) ((yyvsp[-1].ival) >> 8);
					n->fk_del_action	= (char) ((yyvsp[-1].ival) & 0xFF);
					processCASbits((yyvsp[0].ival), (yylsp[0]), "FOREIGN KEY",
								   &n->deferrable, &n->initdeferred,
								   &n->skip_validation, NULL,
								   yyscanner);
					n->initially_valid = !n->skip_validation;
					(yyval.node) = (PGNode *)n;
				}
#line 22578 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 539: /* TableElementList: TableElement  */
#line 674 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 22586 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 540: /* TableElementList: TableElementList ',' TableElement  */
#line 678 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 22594 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 541: /* key_match: MATCH FULL  */
#line 685 "third_party/libpg_query/grammar/statements/create.y"
                        {
				(yyval.ival) = PG_FKCONSTR_MATCH_FULL;
			}
#line 22602 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 542: /* key_match: MATCH PARTIAL  */
#line 689 "third_party/libpg_query/grammar/statements/create.y"
                        {
				ereport(ERROR,
						(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
						 errmsg("MATCH PARTIAL not yet implemented"),
						 parser_errposition((yylsp[-1]))));
				(yyval.ival) = PG_FKCONSTR_MATCH_PARTIAL;
			}
#line 22614 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 543: /* key_match: MATCH SIMPLE  */
#line 697 "third_party/libpg_query/grammar/statements/create.y"
                        {
				(yyval.ival) = PG_FKCONSTR_MATCH_SIMPLE;
			}
#line 22622 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 544: /* key_match: %empty  */
#line 701 "third_party/libpg_query/grammar/statements/create.y"
                        {
				(yyval.ival) = PG_FKCONSTR_MATCH_SIMPLE;
			}
#line 22630 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 545: /* TableLikeClause: LIKE qualified_name TableLikeOptionList  */
#line 709 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGTableLikeClause *n = makeNode(PGTableLikeClause);
					n->relation = (yyvsp[-1].range);
					n->options = (yyvsp[0].ival);
					(yyval.node) = (PGNode *)n;
				}
#line 22641 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 546: /* OptTemp: TEMPORARY  */
#line 718 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_RELPERSISTENCE_TEMP; }
#line 22647 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 547: /* OptTemp: TEMP  */
#line 719 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = PG_RELPERSISTENCE_TEMP; }
#line 22653 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 548: /* OptTemp: LOCAL TEMPORARY  */
#line 720 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_RELPERSISTENCE_TEMP; }
#line 22659 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 549: /* OptTemp: LOCAL TEMP  */
#line 721 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_RELPERSISTENCE_TEMP; }
#line 22665 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 550: /* OptTemp: GLOBAL TEMPORARY  */
#line 723 "third_party/libpg_query/grammar/statements/create.y"
                                {
					ereport(PGWARNING,
							(errmsg("GLOBAL is deprecated in temporary table creation"),
							 parser_errposition((yylsp[-1]))));
					(yyval.ival) = PG_RELPERSISTENCE_TEMP;
				}
#line 22676 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 551: /* OptTemp: GLOBAL TEMP  */
#line 730 "third_party/libpg_query/grammar/statements/create.y"
                                {
					ereport(PGWARNING,
							(errmsg("GLOBAL is deprecated in temporary table creation"),
							 parser_errposition((yylsp[-1]))));
					(yyval.ival) = PG_RELPERSISTENCE_TEMP;
				}
#line 22687 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 552: /* OptTemp: UNLOGGED  */
#line 736 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = PG_RELPERSISTENCE_UNLOGGED; }
#line 22693 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 553: /* OptTemp: %empty  */
#line 737 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = RELPERSISTENCE_PERMANENT; }
#line 22699 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 554: /* generated_when: ALWAYS  */
#line 742 "third_party/libpg_query/grammar/statements/create.y"
                                                { (yyval.ival) = PG_ATTRIBUTE_IDENTITY_ALWAYS; }
#line 22705 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 555: /* generated_when: BY DEFAULT  */
#line 743 "third_party/libpg_query/grammar/statements/create.y"
                                        { (yyval.ival) = ATTRIBUTE_IDENTITY_BY_DEFAULT; }
#line 22711 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 556: /* DropStmt: DROP drop_type_any_name IF_P EXISTS any_name_list opt_drop_behavior  */
#line 10 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-4].objtype);
					n->missing_ok = true;
					n->objects = (yyvsp[-1].list);
					n->behavior = (yyvsp[0].dbehavior);
					n->concurrent = false;
					(yyval.node) = (PGNode *)n;
				}
#line 22725 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 557: /* DropStmt: DROP drop_type_any_name any_name_list opt_drop_behavior  */
#line 20 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-2].objtype);
					n->missing_ok = false;
					n->objects = (yyvsp[-1].list);
					n->behavior = (yyvsp[0].dbehavior);
					n->concurrent = false;
					(yyval.node) = (PGNode *)n;
				}
#line 22739 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 558: /* DropStmt: DROP drop_type_name IF_P EXISTS name_list opt_drop_behavior  */
#line 30 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-4].objtype);
					n->missing_ok = true;
					n->objects = (yyvsp[-1].list);
					n->behavior = (yyvsp[0].dbehavior);
					n->concurrent = false;
					(yyval.node) = (PGNode *)n;
				}
#line 22753 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 559: /* DropStmt: DROP drop_type_name name_list opt_drop_behavior  */
#line 40 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-2].objtype);
					n->missing_ok = false;
					n->objects = (yyvsp[-1].list);
					n->behavior = (yyvsp[0].dbehavior);
					n->concurrent = false;
					(yyval.node) = (PGNode *)n;
				}
#line 22767 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 560: /* DropStmt: DROP drop_type_name_on_any_name name ON any_name opt_drop_behavior  */
#line 50 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-4].objtype);
					n->objects = list_make1(lappend((yyvsp[-1].list), makeString((yyvsp[-3].str))));
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = false;
					n->concurrent = false;
					(yyval.node) = (PGNode *) n;
				}
#line 22781 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 561: /* DropStmt: DROP drop_type_name_on_any_name IF_P EXISTS name ON any_name opt_drop_behavior  */
#line 60 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-6].objtype);
					n->objects = list_make1(lappend((yyvsp[-1].list), makeString((yyvsp[-3].str))));
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = true;
					n->concurrent = false;
					(yyval.node) = (PGNode *) n;
				}
#line 22795 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 562: /* DropStmt: DROP TYPE_P type_name_list opt_drop_behavior  */
#line 70 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = PG_OBJECT_TYPE;
					n->missing_ok = false;
					n->objects = (yyvsp[-1].list);
					n->behavior = (yyvsp[0].dbehavior);
					n->concurrent = false;
					(yyval.node) = (PGNode *) n;
				}
#line 22809 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 563: /* DropStmt: DROP TYPE_P IF_P EXISTS type_name_list opt_drop_behavior  */
#line 80 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = PG_OBJECT_TYPE;
					n->missing_ok = true;
					n->objects = (yyvsp[-1].list);
					n->behavior = (yyvsp[0].dbehavior);
					n->concurrent = false;
					(yyval.node) = (PGNode *) n;
				}
#line 22823 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 564: /* drop_type_any_name: TABLE  */
#line 93 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_TABLE; }
#line 22829 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 565: /* drop_type_any_name: DATABASE  */
#line 94 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_DATABASE; }
#line 22835 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 566: /* drop_type_any_name: SEQUENCE  */
#line 95 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_SEQUENCE; }
#line 22841 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 567: /* drop_type_any_name: FUNCTION  */
#line 96 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_FUNCTION; }
#line 22847 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 568: /* drop_type_any_name: MACRO  */
#line 97 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_FUNCTION; }
#line 22853 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 569: /* drop_type_any_name: MACRO TABLE  */
#line 98 "third_party/libpg_query/grammar/statements/drop.y"
                                                                { (yyval.objtype) = PG_OBJECT_TABLE_MACRO; }
#line 22859 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 570: /* drop_type_any_name: VIEW  */
#line 99 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_VIEW; }
#line 22865 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 571: /* drop_type_any_name: MATERIALIZED VIEW  */
#line 100 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_MATVIEW; }
#line 22871 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 572: /* drop_type_any_name: INDEX  */
#line 101 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_INDEX; }
#line 22877 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 573: /* drop_type_any_name: FOREIGN TABLE  */
#line 102 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_FOREIGN_TABLE; }
#line 22883 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 574: /* drop_type_any_name: COLLATION  */
#line 103 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_COLLATION; }
#line 22889 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 575: /* drop_type_any_name: CONVERSION_P  */
#line 104 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_CONVERSION; }
#line 22895 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 576: /* drop_type_any_name: SCHEMA  */
#line 105 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_SCHEMA; }
#line 22901 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 577: /* drop_type_any_name: STATISTICS  */
#line 106 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_STATISTIC_EXT; }
#line 22907 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 578: /* drop_type_any_name: TEXT_P SEARCH PARSER  */
#line 107 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                { (yyval.objtype) = PG_OBJECT_TSPARSER; }
#line 22913 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 579: /* drop_type_any_name: TEXT_P SEARCH DICTIONARY  */
#line 108 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                { (yyval.objtype) = PG_OBJECT_TSDICTIONARY; }
#line 22919 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 580: /* drop_type_any_name: TEXT_P SEARCH TEMPLATE  */
#line 109 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                { (yyval.objtype) = PG_OBJECT_TSTEMPLATE; }
#line 22925 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 581: /* drop_type_any_name: TEXT_P SEARCH CONFIGURATION  */
#line 110 "third_party/libpg_query/grammar/statements/drop.y"
                                                                        { (yyval.objtype) = PG_OBJECT_TSCONFIGURATION; }
#line 22931 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 582: /* drop_type_name: ACCESS METHOD  */
#line 115 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_ACCESS_METHOD; }
#line 22937 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 583: /* drop_type_name: EVENT TRIGGER  */
#line 116 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_EVENT_TRIGGER; }
#line 22943 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 584: /* drop_type_name: EXTENSION  */
#line 117 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_EXTENSION; }
#line 22949 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 585: /* drop_type_name: FOREIGN DATA_P WRAPPER  */
#line 118 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                { (yyval.objtype) = PG_OBJECT_FDW; }
#line 22955 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 586: /* drop_type_name: PUBLICATION  */
#line 119 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_PUBLICATION; }
#line 22961 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 587: /* drop_type_name: SERVER  */
#line 120 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_FOREIGN_SERVER; }
#line 22967 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 588: /* any_name_list: any_name  */
#line 125 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].list)); }
#line 22973 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 589: /* any_name_list: any_name_list ',' any_name  */
#line 126 "third_party/libpg_query/grammar/statements/drop.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].list)); }
#line 22979 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 590: /* opt_drop_behavior: CASCADE  */
#line 131 "third_party/libpg_query/grammar/statements/drop.y"
                                                                        { (yyval.dbehavior) = PG_DROP_CASCADE; }
#line 22985 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 591: /* opt_drop_behavior: RESTRICT  */
#line 132 "third_party/libpg_query/grammar/statements/drop.y"
                                                                        { (yyval.dbehavior) = PG_DROP_RESTRICT; }
#line 22991 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 592: /* opt_drop_behavior: %empty  */
#line 133 "third_party/libpg_query/grammar/statements/drop.y"
                                                                { (yyval.dbehavior) = PG_DROP_RESTRICT; /* default */ }
#line 22997 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 593: /* drop_type_name_on_any_name: POLICY  */
#line 138 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_POLICY; }
#line 23003 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 594: /* drop_type_name_on_any_name: RULE  */
#line 139 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_RULE; }
#line 23009 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 595: /* drop_type_name_on_any_name: TRIGGER  */
#line 140 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_TRIGGER; }
#line 23015 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 596: /* type_name_list: Typename  */
#line 143 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].typnam)); }
#line 23021 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 597: /* type_name_list: type_name_list ',' Typename  */
#line 144 "third_party/libpg_query/grammar/statements/drop.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].typnam)); }
#line 23027 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 598: /* CreateFunctionStmt: CREATE_P OptTemp macro_alias qualified_name param_list AS TABLE SelectStmt  */
#line 9 "third_party/libpg_query/grammar/statements/create_function.y"
                        {
				PGCreateFunctionStmt *n = makeNode(PGCreateFunctionStmt);
				(yyvsp[-4].range)->relpersistence = (yyvsp[-6].ival);
				n->name = (yyvsp[-4].range);
				n->params = (yyvsp[-3].list);
				n->function = NULL;
				n->query = (yyvsp[0].node);
				n->onconflict = PG_ERROR_ON_CONFLICT;
				(yyval.node) = (PGNode *)n;
			}
#line 23042 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 599: /* CreateFunctionStmt: CREATE_P OptTemp macro_alias IF_P NOT EXISTS qualified_name param_list AS TABLE SelectStmt  */
#line 21 "third_party/libpg_query/grammar/statements/create_function.y"
                        {
				PGCreateFunctionStmt *n = makeNode(PGCreateFunctionStmt);
				(yyvsp[-4].range)->relpersistence = (yyvsp[-9].ival);
				n->name = (yyvsp[-4].range);
				n->params = (yyvsp[-3].list);
				n->function = NULL;
				n->query = (yyvsp[0].node);
				n->onconflict = PG_IGNORE_ON_CONFLICT;
				(yyval.node) = (PGNode *)n;

			}
#line 23058 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 600: /* CreateFunctionStmt: CREATE_P OR REPLACE OptTemp macro_alias qualified_name param_list AS TABLE SelectStmt  */
#line 34 "third_party/libpg_query/grammar/statements/create_function.y"
                        {
				PGCreateFunctionStmt *n = makeNode(PGCreateFunctionStmt);
				(yyvsp[-4].range)->relpersistence = (yyvsp[-6].ival);
				n->name = (yyvsp[-4].range);
				n->params = (yyvsp[-3].list);
				n->function = NULL;
				n->query = (yyvsp[0].node);
				n->onconflict = PG_REPLACE_ON_CONFLICT;
				(yyval.node) = (PGNode *)n;

			}
#line 23074 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 601: /* CreateFunctionStmt: CREATE_P OptTemp macro_alias qualified_name param_list AS a_expr  */
#line 47 "third_party/libpg_query/grammar/statements/create_function.y"
                         {
				PGCreateFunctionStmt *n = makeNode(PGCreateFunctionStmt);
				(yyvsp[-3].range)->relpersistence = (yyvsp[-5].ival);
				n->name = (yyvsp[-3].range);
				n->params = (yyvsp[-2].list);
				n->function = (yyvsp[0].node);
				n->query = NULL;
				n->onconflict = PG_ERROR_ON_CONFLICT;
				(yyval.node) = (PGNode *)n;
                         }
#line 23089 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 602: /* CreateFunctionStmt: CREATE_P OptTemp macro_alias IF_P NOT EXISTS qualified_name param_list AS a_expr  */
#line 59 "third_party/libpg_query/grammar/statements/create_function.y"
                         {
				PGCreateFunctionStmt *n = makeNode(PGCreateFunctionStmt);
				(yyvsp[-3].range)->relpersistence = (yyvsp[-8].ival);
				n->name = (yyvsp[-3].range);
				n->params = (yyvsp[-2].list);
				n->function = (yyvsp[0].node);
				n->query = NULL;
				n->onconflict = PG_IGNORE_ON_CONFLICT;
				(yyval.node) = (PGNode *)n;
			 }
#line 23104 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 603: /* CreateFunctionStmt: CREATE_P OR REPLACE OptTemp macro_alias qualified_name param_list AS a_expr  */
#line 71 "third_party/libpg_query/grammar/statements/create_function.y"
                         {
				PGCreateFunctionStmt *n = makeNode(PGCreateFunctionStmt);
				(yyvsp[-3].range)->relpersistence = (yyvsp[-5].ival);
				n->name = (yyvsp[-3].range);
				n->params = (yyvsp[-2].list);
				n->function = (yyvsp[0].node);
				n->query = NULL;
				n->onconflict = PG_REPLACE_ON_CONFLICT;
				(yyval.node) = (PGNode *)n;
			 }
#line 23119 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 606: /* param_list: '(' ')'  */
#line 92 "third_party/libpg_query/grammar/statements/create_function.y"
                        {
				(yyval.list) = NIL;
			}
#line 23127 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 607: /* param_list: '(' func_arg_list ')'  */
#line 96 "third_party/libpg_query/grammar/statements/create_function.y"
                        {
				(yyval.list) = (yyvsp[-1].list);
			}
#line 23135 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 608: /* UpdateStmt: opt_with_clause UPDATE relation_expr_opt_alias SET set_clause_list_opt_comma from_clause where_or_current_clause returning_clause  */
#line 12 "third_party/libpg_query/grammar/statements/update.y"
                                {
					PGUpdateStmt *n = makeNode(PGUpdateStmt);
					n->relation = (yyvsp[-5].range);
					n->targetList = (yyvsp[-3].list);
					n->fromClause = (yyvsp[-2].list);
					n->whereClause = (yyvsp[-1].node);
					n->returningList = (yyvsp[0].list);
					n->withClause = (yyvsp[-7].with);
					(yyval.node) = (PGNode *)n;
				}
#line 23150 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 609: /* CopyStmt: COPY opt_binary qualified_name opt_column_list opt_oids copy_from opt_program copy_file_name copy_delimiter opt_with copy_options  */
#line 3 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					PGCopyStmt *n = makeNode(PGCopyStmt);
					n->relation = (yyvsp[-8].range);
					n->query = NULL;
					n->attlist = (yyvsp[-7].list);
					n->is_from = (yyvsp[-5].boolean);
					n->is_program = (yyvsp[-4].boolean);
					n->filename = (yyvsp[-3].str);

					if (n->is_program && n->filename == NULL)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("STDIN/STDOUT not allowed with PROGRAM"),
								 parser_errposition((yylsp[-3]))));

					n->options = NIL;
					/* Concatenate user-supplied flags */
					if ((yyvsp[-9].defelt))
						n->options = lappend(n->options, (yyvsp[-9].defelt));
					if ((yyvsp[-6].defelt))
						n->options = lappend(n->options, (yyvsp[-6].defelt));
					if ((yyvsp[-2].defelt))
						n->options = lappend(n->options, (yyvsp[-2].defelt));
					if ((yyvsp[0].list))
						n->options = list_concat(n->options, (yyvsp[0].list));
					(yyval.node) = (PGNode *)n;
				}
#line 23182 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 610: /* CopyStmt: COPY '(' SelectStmt ')' TO opt_program copy_file_name opt_with copy_options  */
#line 31 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					PGCopyStmt *n = makeNode(PGCopyStmt);
					n->relation = NULL;
					n->query = (yyvsp[-6].node);
					n->attlist = NIL;
					n->is_from = false;
					n->is_program = (yyvsp[-3].boolean);
					n->filename = (yyvsp[-2].str);
					n->options = (yyvsp[0].list);

					if (n->is_program && n->filename == NULL)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("STDIN/STDOUT not allowed with PROGRAM"),
								 parser_errposition((yylsp[-4]))));

					(yyval.node) = (PGNode *)n;
				}
#line 23205 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 611: /* copy_from: FROM  */
#line 53 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.boolean) = true; }
#line 23211 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 612: /* copy_from: TO  */
#line 54 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.boolean) = false; }
#line 23217 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 613: /* copy_delimiter: opt_using DELIMITERS Sconst  */
#line 60 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("delimiter", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-1]));
				}
#line 23225 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 614: /* copy_delimiter: %empty  */
#line 63 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.defelt) = NULL; }
#line 23231 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 615: /* copy_generic_opt_arg_list: copy_generic_opt_arg_list_item  */
#line 69 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 23239 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 616: /* copy_generic_opt_arg_list: copy_generic_opt_arg_list ',' copy_generic_opt_arg_list_item  */
#line 73 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 23247 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 617: /* opt_using: USING  */
#line 80 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                {}
#line 23253 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 618: /* opt_using: %empty  */
#line 81 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                {}
#line 23259 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 619: /* opt_as: AS  */
#line 85 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                {}
#line 23265 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 620: /* opt_as: %empty  */
#line 86 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                        {}
#line 23271 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 621: /* opt_program: PROGRAM  */
#line 91 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.boolean) = true; }
#line 23277 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 622: /* opt_program: %empty  */
#line 92 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                        { (yyval.boolean) = false; }
#line 23283 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 623: /* copy_options: copy_opt_list  */
#line 96 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 23289 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 624: /* copy_options: '(' copy_generic_opt_list ')'  */
#line 97 "third_party/libpg_query/grammar/statements/copy.y"
                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 23295 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 625: /* copy_generic_opt_arg: opt_boolean_or_string  */
#line 102 "third_party/libpg_query/grammar/statements/copy.y"
                                                                { (yyval.node) = (PGNode *) makeString((yyvsp[0].str)); }
#line 23301 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 626: /* copy_generic_opt_arg: NumericOnly  */
#line 103 "third_party/libpg_query/grammar/statements/copy.y"
                                                                        { (yyval.node) = (PGNode *) (yyvsp[0].value); }
#line 23307 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 627: /* copy_generic_opt_arg: '*'  */
#line 104 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                { (yyval.node) = (PGNode *) makeNode(PGAStar); }
#line 23313 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 628: /* copy_generic_opt_arg: '(' copy_generic_opt_arg_list ')'  */
#line 105 "third_party/libpg_query/grammar/statements/copy.y"
                                                                        { (yyval.node) = (PGNode *) (yyvsp[-1].list); }
#line 23319 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 629: /* copy_generic_opt_arg: %empty  */
#line 106 "third_party/libpg_query/grammar/statements/copy.y"
                                                                        { (yyval.node) = NULL; }
#line 23325 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 630: /* copy_generic_opt_elem: ColLabel copy_generic_opt_arg  */
#line 112 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[-1].str), (yyvsp[0].node), (yylsp[-1]));
				}
#line 23333 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 631: /* opt_oids: WITH OIDS  */
#line 120 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("oids", (PGNode *)makeInteger(true), (yylsp[-1]));
				}
#line 23341 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 632: /* opt_oids: %empty  */
#line 123 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.defelt) = NULL; }
#line 23347 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 633: /* copy_opt_list: copy_opt_list copy_opt_item  */
#line 128 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].defelt)); }
#line 23353 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 634: /* copy_opt_list: %empty  */
#line 129 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                        { (yyval.list) = NIL; }
#line 23359 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 635: /* opt_binary: BINARY  */
#line 135 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("format", (PGNode *)makeString("binary"), (yylsp[0]));
				}
#line 23367 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 636: /* opt_binary: %empty  */
#line 138 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.defelt) = NULL; }
#line 23373 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 637: /* copy_opt_item: BINARY  */
#line 144 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("format", (PGNode *)makeString("binary"), (yylsp[0]));
				}
#line 23381 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 638: /* copy_opt_item: OIDS  */
#line 148 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("oids", (PGNode *)makeInteger(true), (yylsp[0]));
				}
#line 23389 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 639: /* copy_opt_item: FREEZE  */
#line 152 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("freeze", (PGNode *)makeInteger(true), (yylsp[0]));
				}
#line 23397 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 640: /* copy_opt_item: DELIMITER opt_as Sconst  */
#line 156 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("delimiter", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-2]));
				}
#line 23405 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 641: /* copy_opt_item: NULL_P opt_as Sconst  */
#line 160 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("null", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-2]));
				}
#line 23413 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 642: /* copy_opt_item: CSV  */
#line 164 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("format", (PGNode *)makeString("csv"), (yylsp[0]));
				}
#line 23421 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 643: /* copy_opt_item: HEADER_P  */
#line 168 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("header", (PGNode *)makeInteger(true), (yylsp[0]));
				}
#line 23429 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 644: /* copy_opt_item: QUOTE opt_as Sconst  */
#line 172 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("quote", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-2]));
				}
#line 23437 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 645: /* copy_opt_item: ESCAPE opt_as Sconst  */
#line 176 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("escape", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-2]));
				}
#line 23445 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 646: /* copy_opt_item: FORCE QUOTE columnList  */
#line 180 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("force_quote", (PGNode *)(yyvsp[0].list), (yylsp[-2]));
				}
#line 23453 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 647: /* copy_opt_item: FORCE QUOTE '*'  */
#line 184 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("force_quote", (PGNode *)makeNode(PGAStar), (yylsp[-2]));
				}
#line 23461 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 648: /* copy_opt_item: PARTITION BY columnList  */
#line 188 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("partition_by", (PGNode *)(yyvsp[0].list), (yylsp[-2]));
				}
#line 23469 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 649: /* copy_opt_item: PARTITION BY '*'  */
#line 192 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("partition_by", (PGNode *)makeNode(PGAStar), (yylsp[-2]));
				}
#line 23477 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 650: /* copy_opt_item: FORCE NOT NULL_P columnList  */
#line 196 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("force_not_null", (PGNode *)(yyvsp[0].list), (yylsp[-3]));
				}
#line 23485 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 651: /* copy_opt_item: FORCE NULL_P columnList  */
#line 200 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("force_null", (PGNode *)(yyvsp[0].list), (yylsp[-2]));
				}
#line 23493 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 652: /* copy_opt_item: ENCODING Sconst  */
#line 204 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("encoding", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-1]));
				}
#line 23501 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 653: /* copy_generic_opt_arg_list_item: opt_boolean_or_string  */
#line 211 "third_party/libpg_query/grammar/statements/copy.y"
                                                { (yyval.node) = (PGNode *) makeString((yyvsp[0].str)); }
#line 23507 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 654: /* copy_file_name: Sconst  */
#line 217 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 23513 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 655: /* copy_file_name: STDIN  */
#line 218 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.str) = NULL; }
#line 23519 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 656: /* copy_file_name: STDOUT  */
#line 219 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.str) = NULL; }
#line 23525 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 657: /* copy_generic_opt_list: copy_generic_opt_elem  */
#line 225 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].defelt));
				}
#line 23533 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 658: /* copy_generic_opt_list: copy_generic_opt_list ',' copy_generic_opt_elem  */
#line 229 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt));
				}
#line 23541 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 661: /* select_with_parens: '(' select_no_parens ')'  */
#line 52 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[-1].node); }
#line 23547 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 662: /* select_with_parens: '(' select_with_parens ')'  */
#line 53 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.node) = (yyvsp[-1].node); }
#line 23553 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 663: /* select_no_parens: simple_select  */
#line 68 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 23559 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 664: /* select_no_parens: select_clause sort_clause  */
#line 70 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-1].node), (yyvsp[0].list), NIL,
										NULL, NULL, NULL,
										yyscanner);
					(yyval.node) = (yyvsp[-1].node);
				}
#line 23570 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 665: /* select_no_parens: select_clause opt_sort_clause for_locking_clause opt_select_limit  */
#line 77 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-3].node), (yyvsp[-2].list), (yyvsp[-1].list),
										(PGNode*) list_nth((yyvsp[0].list), 0), (PGNode*) list_nth((yyvsp[0].list), 1),
										NULL,
										yyscanner);
					(yyval.node) = (yyvsp[-3].node);
				}
#line 23582 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 666: /* select_no_parens: select_clause opt_sort_clause select_limit opt_for_locking_clause  */
#line 85 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-3].node), (yyvsp[-2].list), (yyvsp[0].list),
										(PGNode*) list_nth((yyvsp[-1].list), 0), (PGNode*) list_nth((yyvsp[-1].list), 1),
										NULL,
										yyscanner);
					(yyval.node) = (yyvsp[-3].node);
				}
#line 23594 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 667: /* select_no_parens: with_clause select_clause  */
#line 93 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[0].node), NULL, NIL,
										NULL, NULL,
										(yyvsp[-1].with),
										yyscanner);
					(yyval.node) = (yyvsp[0].node);
				}
#line 23606 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 668: /* select_no_parens: with_clause select_clause sort_clause  */
#line 101 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-1].node), (yyvsp[0].list), NIL,
										NULL, NULL,
										(yyvsp[-2].with),
										yyscanner);
					(yyval.node) = (yyvsp[-1].node);
				}
#line 23618 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 669: /* select_no_parens: with_clause select_clause opt_sort_clause for_locking_clause opt_select_limit  */
#line 109 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-3].node), (yyvsp[-2].list), (yyvsp[-1].list),
										(PGNode*) list_nth((yyvsp[0].list), 0), (PGNode*) list_nth((yyvsp[0].list), 1),
										(yyvsp[-4].with),
										yyscanner);
					(yyval.node) = (yyvsp[-3].node);
				}
#line 23630 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 670: /* select_no_parens: with_clause select_clause opt_sort_clause select_limit opt_for_locking_clause  */
#line 117 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-3].node), (yyvsp[-2].list), (yyvsp[0].list),
										(PGNode*) list_nth((yyvsp[-1].list), 0), (PGNode*) list_nth((yyvsp[-1].list), 1),
										(yyvsp[-4].with),
										yyscanner);
					(yyval.node) = (yyvsp[-3].node);
				}
#line 23642 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 671: /* select_clause: simple_select  */
#line 127 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 23648 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 672: /* select_clause: select_with_parens  */
#line 128 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 23654 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 673: /* opt_select: SELECT opt_all_clause opt_target_list_opt_comma  */
#line 156 "third_party/libpg_query/grammar/statements/select.y"
                        {
				(yyval.list) = (yyvsp[0].list);
			}
#line 23662 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 674: /* opt_select: %empty  */
#line 160 "third_party/libpg_query/grammar/statements/select.y"
                        {
				PGAStar *star = makeNode(PGAStar);
				(yyval.list) = list_make1(star);
			}
#line 23671 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 675: /* simple_select: SELECT opt_all_clause opt_target_list_opt_comma into_clause from_clause where_clause group_clause having_clause window_clause qualify_clause sample_clause  */
#line 171 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *n = makeNode(PGSelectStmt);
					n->targetList = (yyvsp[-8].list);
					n->intoClause = (yyvsp[-7].into);
					n->fromClause = (yyvsp[-6].list);
					n->whereClause = (yyvsp[-5].node);
					n->groupClause = (yyvsp[-4].list);
					n->havingClause = (yyvsp[-3].node);
					n->windowClause = (yyvsp[-2].list);
					n->qualifyClause = (yyvsp[-1].node);
					n->sampleOptions = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 23689 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 676: /* simple_select: SELECT distinct_clause target_list_opt_comma into_clause from_clause where_clause group_clause having_clause window_clause qualify_clause sample_clause  */
#line 187 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *n = makeNode(PGSelectStmt);
					n->distinctClause = (yyvsp[-9].list);
					n->targetList = (yyvsp[-8].list);
					n->intoClause = (yyvsp[-7].into);
					n->fromClause = (yyvsp[-6].list);
					n->whereClause = (yyvsp[-5].node);
					n->groupClause = (yyvsp[-4].list);
					n->havingClause = (yyvsp[-3].node);
					n->windowClause = (yyvsp[-2].list);
					n->qualifyClause = (yyvsp[-1].node);
					n->sampleOptions = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 23708 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 677: /* simple_select: FROM from_list opt_select into_clause where_clause group_clause having_clause window_clause qualify_clause sample_clause  */
#line 204 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *n = makeNode(PGSelectStmt);
					n->targetList = (yyvsp[-7].list);
					n->fromClause = (yyvsp[-8].list);
					n->intoClause = (yyvsp[-6].into);
					n->whereClause = (yyvsp[-5].node);
					n->groupClause = (yyvsp[-4].list);
					n->havingClause = (yyvsp[-3].node);
					n->windowClause = (yyvsp[-2].list);
					n->qualifyClause = (yyvsp[-1].node);
					n->sampleOptions = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 23726 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 678: /* simple_select: FROM from_list SELECT distinct_clause target_list_opt_comma into_clause where_clause group_clause having_clause window_clause qualify_clause sample_clause  */
#line 221 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *n = makeNode(PGSelectStmt);
					n->targetList = (yyvsp[-7].list);
					n->distinctClause = (yyvsp[-8].list);
					n->fromClause = (yyvsp[-10].list);
					n->intoClause = (yyvsp[-6].into);
					n->whereClause = (yyvsp[-5].node);
					n->groupClause = (yyvsp[-4].list);
					n->havingClause = (yyvsp[-3].node);
					n->windowClause = (yyvsp[-2].list);
					n->qualifyClause = (yyvsp[-1].node);
					n->sampleOptions = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 23745 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 679: /* simple_select: values_clause_opt_comma  */
#line 235 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 23751 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 680: /* simple_select: TABLE relation_expr  */
#line 237 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* same as SELECT * FROM relation_expr */
					PGColumnRef *cr = makeNode(PGColumnRef);
					PGResTarget *rt = makeNode(PGResTarget);
					PGSelectStmt *n = makeNode(PGSelectStmt);

					cr->fields = list_make1(makeNode(PGAStar));
					cr->location = -1;

					rt->name = NULL;
					rt->indirection = NIL;
					rt->val = (PGNode *)cr;
					rt->location = -1;

					n->targetList = list_make1(rt);
					n->fromClause = list_make1((yyvsp[0].range));
					(yyval.node) = (PGNode *)n;
				}
#line 23774 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 681: /* simple_select: select_clause UNION all_or_distinct by_name select_clause  */
#line 256 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSetOp(PG_SETOP_UNION_BY_NAME, (yyvsp[-2].boolean), (yyvsp[-4].node), (yyvsp[0].node));
				}
#line 23782 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 682: /* simple_select: select_clause UNION all_or_distinct select_clause  */
#line 260 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSetOp(PG_SETOP_UNION, (yyvsp[-1].boolean), (yyvsp[-3].node), (yyvsp[0].node));
				}
#line 23790 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 683: /* simple_select: select_clause INTERSECT all_or_distinct select_clause  */
#line 264 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSetOp(PG_SETOP_INTERSECT, (yyvsp[-1].boolean), (yyvsp[-3].node), (yyvsp[0].node));
				}
#line 23798 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 684: /* simple_select: select_clause EXCEPT all_or_distinct select_clause  */
#line 268 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSetOp(PG_SETOP_EXCEPT, (yyvsp[-1].boolean), (yyvsp[-3].node), (yyvsp[0].node));
				}
#line 23806 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 685: /* with_clause: WITH cte_list  */
#line 285 "third_party/libpg_query/grammar/statements/select.y"
                        {
				(yyval.with) = makeNode(PGWithClause);
				(yyval.with)->ctes = (yyvsp[0].list);
				(yyval.with)->recursive = false;
				(yyval.with)->location = (yylsp[-1]);
			}
#line 23817 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 686: /* with_clause: WITH_LA cte_list  */
#line 292 "third_party/libpg_query/grammar/statements/select.y"
                        {
				(yyval.with) = makeNode(PGWithClause);
				(yyval.with)->ctes = (yyvsp[0].list);
				(yyval.with)->recursive = false;
				(yyval.with)->location = (yylsp[-1]);
			}
#line 23828 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 687: /* with_clause: WITH RECURSIVE cte_list  */
#line 299 "third_party/libpg_query/grammar/statements/select.y"
                        {
				(yyval.with) = makeNode(PGWithClause);
				(yyval.with)->ctes = (yyvsp[0].list);
				(yyval.with)->recursive = true;
				(yyval.with)->location = (yylsp[-2]);
			}
#line 23839 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 688: /* cte_list: common_table_expr  */
#line 308 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 23845 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 689: /* cte_list: cte_list ',' common_table_expr  */
#line 309 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 23851 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 690: /* common_table_expr: name opt_name_list AS '(' PreparableStmt ')'  */
#line 313 "third_party/libpg_query/grammar/statements/select.y"
                        {
				PGCommonTableExpr *n = makeNode(PGCommonTableExpr);
				n->ctename = (yyvsp[-5].str);
				n->aliascolnames = (yyvsp[-4].list);
				n->ctequery = (yyvsp[-1].node);
				n->location = (yylsp[-5]);
				(yyval.node) = (PGNode *) n;
			}
#line 23864 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 691: /* into_clause: INTO OptTempTableName  */
#line 325 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.into) = makeNode(PGIntoClause);
					(yyval.into)->rel = (yyvsp[0].range);
					(yyval.into)->colNames = NIL;
					(yyval.into)->options = NIL;
					(yyval.into)->onCommit = PG_ONCOMMIT_NOOP;
					(yyval.into)->viewQuery = NULL;
					(yyval.into)->skipData = false;
				}
#line 23878 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 692: /* into_clause: %empty  */
#line 335 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.into) = NULL; }
#line 23884 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 693: /* OptTempTableName: TEMPORARY opt_table qualified_name  */
#line 344 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 23893 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 694: /* OptTempTableName: TEMP opt_table qualified_name  */
#line 349 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 23902 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 695: /* OptTempTableName: LOCAL TEMPORARY opt_table qualified_name  */
#line 354 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 23911 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 696: /* OptTempTableName: LOCAL TEMP opt_table qualified_name  */
#line 359 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 23920 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 697: /* OptTempTableName: GLOBAL TEMPORARY opt_table qualified_name  */
#line 364 "third_party/libpg_query/grammar/statements/select.y"
                                {
					ereport(PGWARNING,
							(errmsg("GLOBAL is deprecated in temporary table creation"),
							 parser_errposition((yylsp[-3]))));
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 23932 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 698: /* OptTempTableName: GLOBAL TEMP opt_table qualified_name  */
#line 372 "third_party/libpg_query/grammar/statements/select.y"
                                {
					ereport(PGWARNING,
							(errmsg("GLOBAL is deprecated in temporary table creation"),
							 parser_errposition((yylsp[-3]))));
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 23944 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 699: /* OptTempTableName: UNLOGGED opt_table qualified_name  */
#line 380 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_UNLOGGED;
				}
#line 23953 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 700: /* OptTempTableName: TABLE qualified_name  */
#line 385 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = RELPERSISTENCE_PERMANENT;
				}
#line 23962 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 701: /* OptTempTableName: qualified_name  */
#line 390 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = RELPERSISTENCE_PERMANENT;
				}
#line 23971 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 702: /* opt_table: TABLE  */
#line 396 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        {}
#line 23977 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 703: /* opt_table: %empty  */
#line 397 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                {}
#line 23983 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 704: /* all_or_distinct: ALL  */
#line 401 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.boolean) = true; }
#line 23989 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 705: /* all_or_distinct: DISTINCT  */
#line 402 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 23995 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 706: /* all_or_distinct: %empty  */
#line 403 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 24001 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 707: /* by_name: BY NAME_P  */
#line 407 "third_party/libpg_query/grammar/statements/select.y"
                                                          { }
#line 24007 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 708: /* distinct_clause: DISTINCT  */
#line 414 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1(NIL); }
#line 24013 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 709: /* distinct_clause: DISTINCT ON '(' expr_list_opt_comma ')'  */
#line 415 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 24019 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 710: /* opt_all_clause: ALL  */
#line 419 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.list) = NIL;}
#line 24025 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 711: /* opt_all_clause: %empty  */
#line 420 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 24031 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 712: /* opt_ignore_nulls: IGNORE_P NULLS_P  */
#line 424 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.boolean) = true;}
#line 24037 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 713: /* opt_ignore_nulls: RESPECT_P NULLS_P  */
#line 425 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.boolean) = false;}
#line 24043 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 714: /* opt_ignore_nulls: %empty  */
#line 426 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 24049 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 715: /* opt_sort_clause: sort_clause  */
#line 430 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list);}
#line 24055 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 716: /* opt_sort_clause: %empty  */
#line 431 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 24061 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 717: /* sort_clause: ORDER BY sortby_list  */
#line 435 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 24067 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 718: /* sort_clause: ORDER BY ALL opt_asc_desc opt_nulls_order  */
#line 437 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSortBy *sort = makeNode(PGSortBy);
					sort->node = (PGNode *) makeNode(PGAStar);
					sort->sortby_dir = (yyvsp[-1].sortorder);
					sort->sortby_nulls = (yyvsp[0].nullorder);
					sort->useOp = NIL;
					sort->location = -1;		/* no operator */
					(yyval.list) = list_make1(sort);
				}
#line 24081 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 719: /* sort_clause: ORDER BY '*' opt_asc_desc opt_nulls_order  */
#line 447 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSortBy *sort = makeNode(PGSortBy);
					sort->node = (PGNode *) makeNode(PGAStar);
					sort->sortby_dir = (yyvsp[-1].sortorder);
					sort->sortby_nulls = (yyvsp[0].nullorder);
					sort->useOp = NIL;
					sort->location = -1;		/* no operator */
					(yyval.list) = list_make1(sort);
				}
#line 24095 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 720: /* sortby_list: sortby  */
#line 459 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].sortby)); }
#line 24101 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 721: /* sortby_list: sortby_list ',' sortby  */
#line 460 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].sortby)); }
#line 24107 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 722: /* sortby: a_expr USING qual_all_Op opt_nulls_order  */
#line 464 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.sortby) = makeNode(PGSortBy);
					(yyval.sortby)->node = (yyvsp[-3].node);
					(yyval.sortby)->sortby_dir = SORTBY_USING;
					(yyval.sortby)->sortby_nulls = (yyvsp[0].nullorder);
					(yyval.sortby)->useOp = (yyvsp[-1].list);
					(yyval.sortby)->location = (yylsp[-1]);
				}
#line 24120 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 723: /* sortby: a_expr opt_asc_desc opt_nulls_order  */
#line 473 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.sortby) = makeNode(PGSortBy);
					(yyval.sortby)->node = (yyvsp[-2].node);
					(yyval.sortby)->sortby_dir = (yyvsp[-1].sortorder);
					(yyval.sortby)->sortby_nulls = (yyvsp[0].nullorder);
					(yyval.sortby)->useOp = NIL;
					(yyval.sortby)->location = -1;		/* no operator */
				}
#line 24133 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 724: /* opt_asc_desc: ASC_P  */
#line 483 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.sortorder) = PG_SORTBY_ASC; }
#line 24139 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 725: /* opt_asc_desc: DESC_P  */
#line 484 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.sortorder) = PG_SORTBY_DESC; }
#line 24145 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 726: /* opt_asc_desc: %empty  */
#line 485 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.sortorder) = PG_SORTBY_DEFAULT; }
#line 24151 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 727: /* opt_nulls_order: NULLS_LA FIRST_P  */
#line 488 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.nullorder) = PG_SORTBY_NULLS_FIRST; }
#line 24157 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 728: /* opt_nulls_order: NULLS_LA LAST_P  */
#line 489 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.nullorder) = PG_SORTBY_NULLS_LAST; }
#line 24163 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 729: /* opt_nulls_order: %empty  */
#line 490 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.nullorder) = PG_SORTBY_NULLS_DEFAULT; }
#line 24169 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 730: /* select_limit: limit_clause offset_clause  */
#line 494 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = list_make2((yyvsp[0].node), (yyvsp[-1].node)); }
#line 24175 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 731: /* select_limit: offset_clause limit_clause  */
#line 495 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = list_make2((yyvsp[-1].node), (yyvsp[0].node)); }
#line 24181 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 732: /* select_limit: limit_clause  */
#line 496 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = list_make2(NULL, (yyvsp[0].node)); }
#line 24187 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 733: /* select_limit: offset_clause  */
#line 497 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = list_make2((yyvsp[0].node), NULL); }
#line 24193 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 734: /* opt_select_limit: select_limit  */
#line 501 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 24199 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 735: /* opt_select_limit: %empty  */
#line 502 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = list_make2(NULL,NULL); }
#line 24205 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 736: /* limit_clause: LIMIT select_limit_value  */
#line 507 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 24211 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 737: /* limit_clause: LIMIT select_limit_value ',' select_offset_value  */
#line 509 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* Disabled because it was too confusing, bjm 2002-02-18 */
					ereport(ERROR,
							(errcode(PG_ERRCODE_SYNTAX_ERROR),
							 errmsg("LIMIT #,# syntax is not supported"),
							 errhint("Use separate LIMIT and OFFSET clauses."),
							 parser_errposition((yylsp[-3]))));
				}
#line 24224 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 738: /* limit_clause: FETCH first_or_next select_fetch_first_value row_or_rows ONLY  */
#line 525 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[-2].node); }
#line 24230 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 739: /* limit_clause: FETCH first_or_next row_or_rows ONLY  */
#line 527 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeIntConst(1, -1); }
#line 24236 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 740: /* offset_clause: OFFSET select_offset_value  */
#line 532 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 24242 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 741: /* offset_clause: OFFSET select_fetch_first_value row_or_rows  */
#line 535 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[-1].node); }
#line 24248 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 742: /* sample_count: FCONST '%'  */
#line 543 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleSize(makeFloat((yyvsp[-1].str)), true);
		}
#line 24256 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 743: /* sample_count: ICONST '%'  */
#line 547 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleSize(makeInteger((yyvsp[-1].ival)), true);
		}
#line 24264 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 744: /* sample_count: FCONST PERCENT  */
#line 551 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleSize(makeFloat((yyvsp[-1].str)), true);
		}
#line 24272 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 745: /* sample_count: ICONST PERCENT  */
#line 555 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleSize(makeInteger((yyvsp[-1].ival)), true);
		}
#line 24280 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 746: /* sample_count: ICONST  */
#line 559 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleSize(makeInteger((yyvsp[0].ival)), false);
		}
#line 24288 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 747: /* sample_count: ICONST ROWS  */
#line 563 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleSize(makeInteger((yyvsp[-1].ival)), false);
		}
#line 24296 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 748: /* sample_clause: USING SAMPLE tablesample_entry  */
#line 570 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (yyvsp[0].node);
				}
#line 24304 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 749: /* sample_clause: %empty  */
#line 574 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = NULL; }
#line 24310 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 750: /* opt_sample_func: ColId  */
#line 581 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.str) = (yyvsp[0].str); }
#line 24316 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 751: /* opt_sample_func: %empty  */
#line 582 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.str) = NULL; }
#line 24322 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 752: /* tablesample_entry: opt_sample_func '(' sample_count ')' opt_repeatable_clause  */
#line 587 "third_party/libpg_query/grammar/statements/select.y"
                                {
					int seed = (yyvsp[0].ival);
					(yyval.node) = makeSampleOptions((yyvsp[-2].node), (yyvsp[-4].str), &seed, (yylsp[-4]));
				}
#line 24331 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 753: /* tablesample_entry: sample_count  */
#line 592 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleOptions((yyvsp[0].node), NULL, NULL, (yylsp[0]));
		}
#line 24339 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 754: /* tablesample_entry: sample_count '(' ColId ')'  */
#line 596 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleOptions((yyvsp[-3].node), (yyvsp[-1].str), NULL, (yylsp[-3]));
		}
#line 24347 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 755: /* tablesample_entry: sample_count '(' ColId ',' ICONST ')'  */
#line 600 "third_party/libpg_query/grammar/statements/select.y"
                {
			int seed = (yyvsp[-1].ival);
			(yyval.node) = makeSampleOptions((yyvsp[-5].node), (yyvsp[-3].str), &seed, (yylsp[-5]));
		}
#line 24356 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 756: /* tablesample_clause: TABLESAMPLE tablesample_entry  */
#line 608 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (yyvsp[0].node);
				}
#line 24364 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 757: /* opt_tablesample_clause: tablesample_clause  */
#line 614 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.node) = (yyvsp[0].node); }
#line 24370 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 758: /* opt_tablesample_clause: %empty  */
#line 615 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.node) = NULL; }
#line 24376 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 759: /* opt_repeatable_clause: REPEATABLE '(' ICONST ')'  */
#line 620 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.ival) = (yyvsp[-1].ival); }
#line 24382 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 760: /* opt_repeatable_clause: %empty  */
#line 621 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.ival) = -1; }
#line 24388 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 761: /* select_limit_value: a_expr  */
#line 625 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 24394 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 762: /* select_limit_value: ALL  */
#line 627 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* LIMIT ALL is represented as a NULL constant */
					(yyval.node) = makeNullAConst((yylsp[0]));
				}
#line 24403 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 763: /* select_limit_value: a_expr '%'  */
#line 632 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeLimitPercent((yyvsp[-1].node)); }
#line 24409 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 764: /* select_limit_value: FCONST PERCENT  */
#line 634 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeLimitPercent(makeFloatConst((yyvsp[-1].str),(yylsp[-1]))); }
#line 24415 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 765: /* select_limit_value: ICONST PERCENT  */
#line 636 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeLimitPercent(makeIntConst((yyvsp[-1].ival),(yylsp[-1]))); }
#line 24421 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 766: /* select_offset_value: a_expr  */
#line 640 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 24427 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 767: /* select_fetch_first_value: c_expr  */
#line 660 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 24433 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 768: /* select_fetch_first_value: '+' I_or_F_const  */
#line 662 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", NULL, (yyvsp[0].node), (yylsp[-1])); }
#line 24439 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 769: /* select_fetch_first_value: '-' I_or_F_const  */
#line 664 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = doNegate((yyvsp[0].node), (yylsp[-1])); }
#line 24445 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 770: /* I_or_F_const: Iconst  */
#line 668 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = makeIntConst((yyvsp[0].ival),(yylsp[0])); }
#line 24451 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 771: /* I_or_F_const: FCONST  */
#line 669 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = makeFloatConst((yyvsp[0].str),(yylsp[0])); }
#line 24457 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 772: /* row_or_rows: ROW  */
#line 673 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.ival) = 0; }
#line 24463 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 773: /* row_or_rows: ROWS  */
#line 674 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.ival) = 0; }
#line 24469 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 774: /* first_or_next: FIRST_P  */
#line 677 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.ival) = 0; }
#line 24475 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 775: /* first_or_next: NEXT  */
#line 678 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.ival) = 0; }
#line 24481 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 776: /* group_clause: GROUP_P BY group_by_list_opt_comma  */
#line 703 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 24487 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 777: /* group_clause: GROUP_P BY ALL  */
#line 705 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNode *node = (PGNode *) makeGroupingSet(GROUPING_SET_ALL, NIL, (yylsp[0]));
					(yyval.list) = list_make1(node);
				}
#line 24496 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 778: /* group_clause: GROUP_P BY '*'  */
#line 710 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNode *node = (PGNode *) makeGroupingSet(GROUPING_SET_ALL, NIL, (yylsp[0]));
					(yyval.list) = list_make1(node);
				}
#line 24505 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 779: /* group_clause: %empty  */
#line 714 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 24511 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 780: /* group_by_list: group_by_item  */
#line 718 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 24517 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 781: /* group_by_list: group_by_list ',' group_by_item  */
#line 719 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list),(yyvsp[0].node)); }
#line 24523 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 782: /* group_by_list_opt_comma: group_by_list  */
#line 723 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 24529 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 783: /* group_by_list_opt_comma: group_by_list ','  */
#line 724 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 24535 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 784: /* group_by_item: a_expr  */
#line 728 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 24541 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 785: /* group_by_item: empty_grouping_set  */
#line 729 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 24547 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 786: /* group_by_item: cube_clause  */
#line 730 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 24553 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 787: /* group_by_item: rollup_clause  */
#line 731 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 24559 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 788: /* group_by_item: grouping_sets_clause  */
#line 732 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 24565 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 789: /* empty_grouping_set: '(' ')'  */
#line 737 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeGroupingSet(GROUPING_SET_EMPTY, NIL, (yylsp[-1]));
				}
#line 24573 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 790: /* rollup_clause: ROLLUP '(' expr_list_opt_comma ')'  */
#line 750 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeGroupingSet(GROUPING_SET_ROLLUP, (yyvsp[-1].list), (yylsp[-3]));
				}
#line 24581 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 791: /* cube_clause: CUBE '(' expr_list_opt_comma ')'  */
#line 757 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeGroupingSet(GROUPING_SET_CUBE, (yyvsp[-1].list), (yylsp[-3]));
				}
#line 24589 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 792: /* grouping_sets_clause: GROUPING SETS '(' group_by_list_opt_comma ')'  */
#line 764 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeGroupingSet(GROUPING_SET_SETS, (yyvsp[-1].list), (yylsp[-4]));
				}
#line 24597 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 793: /* grouping_or_grouping_id: GROUPING  */
#line 770 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = NULL; }
#line 24603 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 794: /* grouping_or_grouping_id: GROUPING_ID  */
#line 771 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = NULL; }
#line 24609 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 795: /* having_clause: HAVING a_expr  */
#line 775 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 24615 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 796: /* having_clause: %empty  */
#line 776 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 24621 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 797: /* qualify_clause: QUALIFY a_expr  */
#line 780 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 24627 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 798: /* qualify_clause: %empty  */
#line 781 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 24633 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 799: /* for_locking_clause: for_locking_items  */
#line 785 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 24639 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 800: /* for_locking_clause: FOR READ_P ONLY  */
#line 786 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 24645 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 801: /* opt_for_locking_clause: for_locking_clause  */
#line 790 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 24651 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 802: /* opt_for_locking_clause: %empty  */
#line 791 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = NIL; }
#line 24657 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 803: /* for_locking_items: for_locking_item  */
#line 795 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 24663 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 804: /* for_locking_items: for_locking_items for_locking_item  */
#line 796 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 24669 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 805: /* for_locking_item: for_locking_strength locked_rels_list opt_nowait_or_skip  */
#line 801 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGLockingClause *n = makeNode(PGLockingClause);
					n->lockedRels = (yyvsp[-1].list);
					n->strength = (yyvsp[-2].lockstrength);
					n->waitPolicy = (yyvsp[0].lockwaitpolicy);
					(yyval.node) = (PGNode *) n;
				}
#line 24681 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 806: /* for_locking_strength: FOR UPDATE  */
#line 811 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.lockstrength) = LCS_FORUPDATE; }
#line 24687 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 807: /* for_locking_strength: FOR NO KEY UPDATE  */
#line 812 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.lockstrength) = PG_LCS_FORNOKEYUPDATE; }
#line 24693 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 808: /* for_locking_strength: FOR SHARE  */
#line 813 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.lockstrength) = PG_LCS_FORSHARE; }
#line 24699 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 809: /* for_locking_strength: FOR KEY SHARE  */
#line 814 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.lockstrength) = PG_LCS_FORKEYSHARE; }
#line 24705 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 810: /* locked_rels_list: OF qualified_name_list  */
#line 818 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 24711 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 811: /* locked_rels_list: %empty  */
#line 819 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = NIL; }
#line 24717 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 812: /* opt_nowait_or_skip: NOWAIT  */
#line 824 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.lockwaitpolicy) = LockWaitError; }
#line 24723 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 813: /* opt_nowait_or_skip: SKIP LOCKED  */
#line 825 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.lockwaitpolicy) = PGLockWaitSkip; }
#line 24729 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 814: /* opt_nowait_or_skip: %empty  */
#line 826 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.lockwaitpolicy) = PGLockWaitBlock; }
#line 24735 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 815: /* values_clause: VALUES '(' expr_list_opt_comma ')'  */
#line 836 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *n = makeNode(PGSelectStmt);
					n->valuesLists = list_make1((yyvsp[-1].list));
					(yyval.node) = (PGNode *) n;
				}
#line 24745 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 816: /* values_clause: values_clause ',' '(' expr_list_opt_comma ')'  */
#line 842 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *n = (PGSelectStmt *) (yyvsp[-4].node);
					n->valuesLists = lappend(n->valuesLists, (yyvsp[-1].list));
					(yyval.node) = (PGNode *) n;
				}
#line 24755 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 817: /* values_clause_opt_comma: values_clause  */
#line 850 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.node) = (yyvsp[0].node); }
#line 24761 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 818: /* values_clause_opt_comma: values_clause ','  */
#line 851 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.node) = (yyvsp[-1].node); }
#line 24767 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 819: /* from_clause: FROM from_list_opt_comma  */
#line 864 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 24773 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 820: /* from_clause: %empty  */
#line 865 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 24779 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 821: /* from_list: table_ref  */
#line 869 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 24785 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 822: /* from_list: from_list ',' table_ref  */
#line 870 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 24791 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 823: /* from_list_opt_comma: from_list  */
#line 874 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 24797 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 824: /* from_list_opt_comma: from_list ','  */
#line 875 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 24803 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 825: /* table_ref: relation_expr opt_alias_clause opt_tablesample_clause  */
#line 882 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyvsp[-2].range)->alias = (yyvsp[-1].alias);
					(yyvsp[-2].range)->sample = (yyvsp[0].node);
					(yyval.node) = (PGNode *) (yyvsp[-2].range);
				}
#line 24813 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 826: /* table_ref: func_table func_alias_clause opt_tablesample_clause  */
#line 888 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeFunction *n = (PGRangeFunction *) (yyvsp[-2].node);
					n->alias = (PGAlias*) linitial((yyvsp[-1].list));
					n->coldeflist = (PGList*) lsecond((yyvsp[-1].list));
					n->sample = (yyvsp[0].node);
					(yyval.node) = (PGNode *) n;
				}
#line 24825 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 827: /* table_ref: values_clause_opt_comma alias_clause opt_tablesample_clause  */
#line 896 "third_party/libpg_query/grammar/statements/select.y"
                        {
				PGRangeSubselect *n = makeNode(PGRangeSubselect);
				n->lateral = false;
				n->subquery = (yyvsp[-2].node);
				n->alias = (yyvsp[-1].alias);
				n->sample = (yyvsp[0].node);
				(yyval.node) = (PGNode *) n;
			}
#line 24838 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 828: /* table_ref: LATERAL_P func_table func_alias_clause  */
#line 905 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeFunction *n = (PGRangeFunction *) (yyvsp[-1].node);
					n->lateral = true;
					n->alias = (PGAlias*) linitial((yyvsp[0].list));
					n->coldeflist = (PGList*) lsecond((yyvsp[0].list));
					(yyval.node) = (PGNode *) n;
				}
#line 24850 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 829: /* table_ref: select_with_parens opt_alias_clause opt_tablesample_clause  */
#line 913 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeSubselect *n = makeNode(PGRangeSubselect);
					n->lateral = false;
					n->subquery = (yyvsp[-2].node);
					n->alias = (yyvsp[-1].alias);
					n->sample = (yyvsp[0].node);
					(yyval.node) = (PGNode *) n;
				}
#line 24863 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 830: /* table_ref: LATERAL_P select_with_parens opt_alias_clause  */
#line 922 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeSubselect *n = makeNode(PGRangeSubselect);
					n->lateral = true;
					n->subquery = (yyvsp[-1].node);
					n->alias = (yyvsp[0].alias);
					n->sample = NULL;
					(yyval.node) = (PGNode *) n;
				}
#line 24876 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 831: /* table_ref: joined_table  */
#line 931 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) (yyvsp[0].jexpr);
				}
#line 24884 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 832: /* table_ref: '(' joined_table ')' alias_clause  */
#line 935 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyvsp[-2].jexpr)->alias = (yyvsp[0].alias);
					(yyval.node) = (PGNode *) (yyvsp[-2].jexpr);
				}
#line 24893 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 833: /* table_ref: GRAPH_TABLE GraphTableStmt  */
#line 940 "third_party/libpg_query/grammar/statements/select.y"
                {
                        (yyval.node) = (PGNode *) (yyvsp[0].node);
                }
#line 24901 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 834: /* joined_table: '(' joined_table ')'  */
#line 966 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.jexpr) = (yyvsp[-1].jexpr);
				}
#line 24909 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 835: /* joined_table: table_ref CROSS JOIN table_ref  */
#line 970 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* CROSS JOIN is same as unqualified inner join */
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = PG_JOIN_INNER;
					n->isNatural = false;
					n->larg = (yyvsp[-3].node);
					n->rarg = (yyvsp[0].node);
					n->usingClause = NIL;
					n->quals = NULL;
					n->location = (yylsp[-2]);
					(yyval.jexpr) = n;
				}
#line 24926 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 836: /* joined_table: table_ref join_type JOIN table_ref join_qual  */
#line 983 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = (yyvsp[-3].jtype);
					n->isNatural = false;
					n->larg = (yyvsp[-4].node);
					n->rarg = (yyvsp[-1].node);
					if ((yyvsp[0].node) != NULL && IsA((yyvsp[0].node), PGList))
						n->usingClause = (PGList *) (yyvsp[0].node); /* USING clause */
					else
						n->quals = (yyvsp[0].node); /* ON clause */
					n->location = (yylsp[-3]);
					(yyval.jexpr) = n;
				}
#line 24944 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 837: /* joined_table: table_ref JOIN table_ref join_qual  */
#line 997 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* letting join_type reduce to empty doesn't work */
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = PG_JOIN_INNER;
					n->isNatural = false;
					n->larg = (yyvsp[-3].node);
					n->rarg = (yyvsp[-1].node);
					if ((yyvsp[0].node) != NULL && IsA((yyvsp[0].node), PGList))
						n->usingClause = (PGList *) (yyvsp[0].node); /* USING clause */
					else
						n->quals = (yyvsp[0].node); /* ON clause */
					n->location = (yylsp[-2]);
					(yyval.jexpr) = n;
				}
#line 24963 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 838: /* joined_table: table_ref NATURAL join_type JOIN table_ref  */
#line 1012 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = (yyvsp[-2].jtype);
					n->isNatural = true;
					n->larg = (yyvsp[-4].node);
					n->rarg = (yyvsp[0].node);
					n->usingClause = NIL; /* figure out which columns later... */
					n->quals = NULL; /* fill later */
					n->location = (yylsp[-3]);
					(yyval.jexpr) = n;
				}
#line 24979 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 839: /* joined_table: table_ref NATURAL JOIN table_ref  */
#line 1024 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* letting join_type reduce to empty doesn't work */
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = PG_JOIN_INNER;
					n->isNatural = true;
					n->larg = (yyvsp[-3].node);
					n->rarg = (yyvsp[0].node);
					n->usingClause = NIL; /* figure out which columns later... */
					n->quals = NULL; /* fill later */
					n->location = (yylsp[-2]);
					(yyval.jexpr) = n;
				}
#line 24996 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 840: /* joined_table: table_ref POSITIONAL JOIN table_ref  */
#line 1037 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* POSITIONAL JOIN is a coordinated scan */
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = PG_JOIN_POSITION;
					n->isNatural = false;
					n->larg = (yyvsp[-3].node);
					n->rarg = (yyvsp[0].node);
					n->usingClause = NIL;
					n->quals = NULL;
					n->location = (yylsp[-2]);
					(yyval.jexpr) = n;
				}
#line 25013 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 841: /* alias_clause: AS ColIdOrString '(' name_list_opt_comma ')'  */
#line 1053 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.alias) = makeNode(PGAlias);
					(yyval.alias)->aliasname = (yyvsp[-3].str);
					(yyval.alias)->colnames = (yyvsp[-1].list);
				}
#line 25023 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 842: /* alias_clause: AS ColIdOrString  */
#line 1059 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.alias) = makeNode(PGAlias);
					(yyval.alias)->aliasname = (yyvsp[0].str);
				}
#line 25032 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 843: /* alias_clause: ColId '(' name_list_opt_comma ')'  */
#line 1064 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.alias) = makeNode(PGAlias);
					(yyval.alias)->aliasname = (yyvsp[-3].str);
					(yyval.alias)->colnames = (yyvsp[-1].list);
				}
#line 25042 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 844: /* alias_clause: ColId  */
#line 1070 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.alias) = makeNode(PGAlias);
					(yyval.alias)->aliasname = (yyvsp[0].str);
				}
#line 25051 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 845: /* opt_alias_clause: alias_clause  */
#line 1076 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.alias) = (yyvsp[0].alias); }
#line 25057 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 846: /* opt_alias_clause: %empty  */
#line 1077 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.alias) = NULL; }
#line 25063 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 847: /* func_alias_clause: alias_clause  */
#line 1086 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make2((yyvsp[0].alias), NIL);
				}
#line 25071 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 848: /* func_alias_clause: AS '(' TableFuncElementList ')'  */
#line 1090 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make2(NULL, (yyvsp[-1].list));
				}
#line 25079 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 849: /* func_alias_clause: AS ColIdOrString '(' TableFuncElementList ')'  */
#line 1094 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAlias *a = makeNode(PGAlias);
					a->aliasname = (yyvsp[-3].str);
					(yyval.list) = list_make2(a, (yyvsp[-1].list));
				}
#line 25089 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 850: /* func_alias_clause: ColId '(' TableFuncElementList ')'  */
#line 1100 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAlias *a = makeNode(PGAlias);
					a->aliasname = (yyvsp[-3].str);
					(yyval.list) = list_make2(a, (yyvsp[-1].list));
				}
#line 25099 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 851: /* func_alias_clause: %empty  */
#line 1106 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make2(NULL, NIL);
				}
#line 25107 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 852: /* join_type: FULL join_outer  */
#line 1111 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.jtype) = PG_JOIN_FULL; }
#line 25113 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 853: /* join_type: LEFT join_outer  */
#line 1112 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.jtype) = PG_JOIN_LEFT; }
#line 25119 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 854: /* join_type: RIGHT join_outer  */
#line 1113 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.jtype) = PG_JOIN_RIGHT; }
#line 25125 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 855: /* join_type: INNER_P  */
#line 1114 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.jtype) = PG_JOIN_INNER; }
#line 25131 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 856: /* join_outer: OUTER_P  */
#line 1118 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = NULL; }
#line 25137 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 857: /* join_outer: %empty  */
#line 1119 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 25143 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 858: /* join_qual: USING '(' name_list_opt_comma ')'  */
#line 1131 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (PGNode *) (yyvsp[-1].list); }
#line 25149 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 859: /* join_qual: ON a_expr  */
#line 1132 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 25155 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 860: /* relation_expr: qualified_name  */
#line 1138 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* inheritance query, implicitly */
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->inh = true;
					(yyval.range)->alias = NULL;
				}
#line 25166 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 861: /* relation_expr: qualified_name '*'  */
#line 1145 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* inheritance query, explicitly */
					(yyval.range) = (yyvsp[-1].range);
					(yyval.range)->inh = true;
					(yyval.range)->alias = NULL;
				}
#line 25177 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 862: /* relation_expr: ONLY qualified_name  */
#line 1152 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* no inheritance */
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->inh = false;
					(yyval.range)->alias = NULL;
				}
#line 25188 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 863: /* relation_expr: ONLY '(' qualified_name ')'  */
#line 1159 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* no inheritance, SQL99-style syntax */
					(yyval.range) = (yyvsp[-1].range);
					(yyval.range)->inh = false;
					(yyval.range)->alias = NULL;
				}
#line 25199 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 864: /* func_table: func_expr_windowless opt_ordinality  */
#line 1191 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeFunction *n = makeNode(PGRangeFunction);
					n->lateral = false;
					n->ordinality = (yyvsp[0].boolean);
					n->is_rowsfrom = false;
					n->functions = list_make1(list_make2((yyvsp[-1].node), NIL));
					n->sample = NULL;
					/* alias and coldeflist are set by table_ref production */
					(yyval.node) = (PGNode *) n;
				}
#line 25214 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 865: /* func_table: ROWS FROM '(' rowsfrom_list ')' opt_ordinality  */
#line 1202 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeFunction *n = makeNode(PGRangeFunction);
					n->lateral = false;
					n->ordinality = (yyvsp[0].boolean);
					n->is_rowsfrom = true;
					n->functions = (yyvsp[-2].list);
					n->sample = NULL;
					/* alias and coldeflist are set by table_ref production */
					(yyval.node) = (PGNode *) n;
				}
#line 25229 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 866: /* rowsfrom_item: func_expr_windowless opt_col_def_list  */
#line 1215 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make2((yyvsp[-1].node), (yyvsp[0].list)); }
#line 25235 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 867: /* rowsfrom_list: rowsfrom_item  */
#line 1219 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = list_make1((yyvsp[0].list)); }
#line 25241 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 868: /* rowsfrom_list: rowsfrom_list ',' rowsfrom_item  */
#line 1220 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].list)); }
#line 25247 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 869: /* opt_col_def_list: AS '(' TableFuncElementList ')'  */
#line 1223 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 25253 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 870: /* opt_col_def_list: %empty  */
#line 1224 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 25259 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 871: /* opt_ordinality: WITH_LA ORDINALITY  */
#line 1227 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.boolean) = true; }
#line 25265 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 872: /* opt_ordinality: %empty  */
#line 1228 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 25271 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 873: /* where_clause: WHERE a_expr  */
#line 1233 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 25277 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 874: /* where_clause: %empty  */
#line 1234 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 25283 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 875: /* TableFuncElementList: TableFuncElement  */
#line 1240 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 25291 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 876: /* TableFuncElementList: TableFuncElementList ',' TableFuncElement  */
#line 1244 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 25299 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 877: /* TableFuncElement: ColIdOrString Typename opt_collate_clause  */
#line 1250 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGColumnDef *n = makeNode(PGColumnDef);
					n->colname = (yyvsp[-2].str);
					n->typeName = (yyvsp[-1].typnam);
					n->inhcount = 0;
					n->is_local = true;
					n->is_not_null = false;
					n->is_from_type = false;
					n->storage = 0;
					n->raw_default = NULL;
					n->cooked_default = NULL;
					n->collClause = (PGCollateClause *) (yyvsp[0].node);
					n->collOid = InvalidOid;
					n->constraints = NIL;
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)n;
				}
#line 25321 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 878: /* opt_collate_clause: COLLATE any_name  */
#line 1271 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGCollateClause *n = makeNode(PGCollateClause);
					n->arg = NULL;
					n->collname = (yyvsp[0].list);
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *) n;
				}
#line 25333 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 879: /* opt_collate_clause: %empty  */
#line 1278 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.node) = NULL; }
#line 25339 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 880: /* colid_type_list: ColId Typename  */
#line 1291 "third_party/libpg_query/grammar/statements/select.y"
                             {
             (yyval.list) = list_make1(list_make2(makeString((yyvsp[-1].str)), (yyvsp[0].typnam)));
            }
#line 25347 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 881: /* colid_type_list: colid_type_list ',' ColId Typename  */
#line 1294 "third_party/libpg_query/grammar/statements/select.y"
                                                 {
             (yyval.list) = lappend((yyvsp[-3].list), list_make2(makeString((yyvsp[-1].str)), (yyvsp[0].typnam)));
            }
#line 25355 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 884: /* opt_Typename: Typename  */
#line 1301 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 25361 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 885: /* opt_Typename: %empty  */
#line 1302 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.typnam) = NULL; }
#line 25367 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 886: /* Typename: SimpleTypename opt_array_bounds  */
#line 1305 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-1].typnam);
					(yyval.typnam)->arrayBounds = (yyvsp[0].list);
				}
#line 25376 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 887: /* Typename: SETOF SimpleTypename opt_array_bounds  */
#line 1310 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-1].typnam);
					(yyval.typnam)->arrayBounds = (yyvsp[0].list);
					(yyval.typnam)->setof = true;
				}
#line 25386 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 888: /* Typename: SimpleTypename ARRAY '[' Iconst ']'  */
#line 1317 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-4].typnam);
					(yyval.typnam)->arrayBounds = list_make1(makeInteger((yyvsp[-1].ival)));
				}
#line 25395 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 889: /* Typename: SETOF SimpleTypename ARRAY '[' Iconst ']'  */
#line 1322 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-4].typnam);
					(yyval.typnam)->arrayBounds = list_make1(makeInteger((yyvsp[-1].ival)));
					(yyval.typnam)->setof = true;
				}
#line 25405 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 890: /* Typename: SimpleTypename ARRAY  */
#line 1328 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-1].typnam);
					(yyval.typnam)->arrayBounds = list_make1(makeInteger(-1));
				}
#line 25414 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 891: /* Typename: SETOF SimpleTypename ARRAY  */
#line 1333 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-1].typnam);
					(yyval.typnam)->arrayBounds = list_make1(makeInteger(-1));
					(yyval.typnam)->setof = true;
				}
#line 25424 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 892: /* Typename: RowOrStruct '(' colid_type_list ')' opt_array_bounds  */
#line 1338 "third_party/libpg_query/grammar/statements/select.y"
                                                                               {
               (yyval.typnam) = SystemTypeName("struct");
               (yyval.typnam)->arrayBounds = (yyvsp[0].list);
               (yyval.typnam)->typmods = (yyvsp[-2].list);
               (yyval.typnam)->location = (yylsp[-4]);
               }
#line 25435 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 893: /* Typename: MAP '(' type_list ')' opt_array_bounds  */
#line 1344 "third_party/libpg_query/grammar/statements/select.y"
                                                     {
               (yyval.typnam) = SystemTypeName("map");
               (yyval.typnam)->arrayBounds = (yyvsp[0].list);
               (yyval.typnam)->typmods = (yyvsp[-2].list);
               (yyval.typnam)->location = (yylsp[-4]);
			}
#line 25446 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 894: /* Typename: UNION '(' colid_type_list ')' opt_array_bounds  */
#line 1350 "third_party/libpg_query/grammar/statements/select.y"
                                                                         {
			   (yyval.typnam) = SystemTypeName("union");
			   (yyval.typnam)->arrayBounds = (yyvsp[0].list);
			   (yyval.typnam)->typmods = (yyvsp[-2].list);
			   (yyval.typnam)->location = (yylsp[-4]);
			}
#line 25457 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 895: /* opt_array_bounds: opt_array_bounds '[' ']'  */
#line 1360 "third_party/libpg_query/grammar/statements/select.y"
                                        {  (yyval.list) = lappend((yyvsp[-2].list), makeInteger(-1)); }
#line 25463 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 896: /* opt_array_bounds: opt_array_bounds '[' Iconst ']'  */
#line 1362 "third_party/libpg_query/grammar/statements/select.y"
                                        {  (yyval.list) = lappend((yyvsp[-3].list), makeInteger((yyvsp[-1].ival))); }
#line 25469 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 897: /* opt_array_bounds: %empty  */
#line 1364 "third_party/libpg_query/grammar/statements/select.y"
                                        {  (yyval.list) = NIL; }
#line 25475 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 898: /* SimpleTypename: GenericType  */
#line 1368 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 25481 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 899: /* SimpleTypename: Numeric  */
#line 1369 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 25487 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 900: /* SimpleTypename: Bit  */
#line 1370 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 25493 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 901: /* SimpleTypename: Character  */
#line 1371 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 25499 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 902: /* SimpleTypename: ConstDatetime  */
#line 1372 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.typnam) = (yyvsp[0].typnam); }
#line 25505 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 903: /* SimpleTypename: ConstInterval opt_interval  */
#line 1374 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-1].typnam);
					(yyval.typnam)->typmods = (yyvsp[0].list);
				}
#line 25514 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 904: /* SimpleTypename: ConstInterval '(' Iconst ')'  */
#line 1379 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-3].typnam);
					(yyval.typnam)->typmods = list_make2(makeIntConst(INTERVAL_FULL_RANGE, -1),
											 makeIntConst((yyvsp[-1].ival), (yylsp[-1])));
				}
#line 25524 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 905: /* ConstTypename: Numeric  */
#line 1398 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 25530 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 906: /* ConstTypename: ConstBit  */
#line 1399 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 25536 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 907: /* ConstTypename: ConstCharacter  */
#line 1400 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.typnam) = (yyvsp[0].typnam); }
#line 25542 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 908: /* ConstTypename: ConstDatetime  */
#line 1401 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.typnam) = (yyvsp[0].typnam); }
#line 25548 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 909: /* GenericType: type_name_token opt_type_modifiers  */
#line 1413 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = makeTypeName((yyvsp[-1].str));
					(yyval.typnam)->typmods = (yyvsp[0].list);
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 25558 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 910: /* opt_type_modifiers: '(' opt_expr_list_opt_comma ')'  */
#line 1426 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 25564 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 911: /* opt_type_modifiers: %empty  */
#line 1427 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = NIL; }
#line 25570 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 912: /* Numeric: INT_P  */
#line 1434 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("int4");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 25579 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 913: /* Numeric: INTEGER  */
#line 1439 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("int4");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 25588 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 914: /* Numeric: SMALLINT  */
#line 1444 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("int2");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 25597 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 915: /* Numeric: BIGINT  */
#line 1449 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("int8");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 25606 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 916: /* Numeric: REAL  */
#line 1454 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("float4");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 25615 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 917: /* Numeric: FLOAT_P opt_float  */
#line 1459 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 25624 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 918: /* Numeric: DOUBLE_P PRECISION  */
#line 1464 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("float8");
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 25633 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 919: /* Numeric: DECIMAL_P opt_type_modifiers  */
#line 1469 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("numeric");
					(yyval.typnam)->typmods = (yyvsp[0].list);
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 25643 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 920: /* Numeric: DEC opt_type_modifiers  */
#line 1475 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("numeric");
					(yyval.typnam)->typmods = (yyvsp[0].list);
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 25653 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 921: /* Numeric: NUMERIC opt_type_modifiers  */
#line 1481 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("numeric");
					(yyval.typnam)->typmods = (yyvsp[0].list);
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 25663 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 922: /* Numeric: BOOLEAN_P  */
#line 1487 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("bool");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 25672 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 923: /* opt_float: '(' Iconst ')'  */
#line 1494 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/*
					 * Check FLOAT() precision limits assuming IEEE floating
					 * types - thomas 1997-09-18
					 */
					if ((yyvsp[-1].ival) < 1)
						ereport(ERROR,
								(errcode(PG_ERRCODE_INVALID_PARAMETER_VALUE),
								 errmsg("precision for type float must be at least 1 bit"),
								 parser_errposition((yylsp[-1]))));
					else if ((yyvsp[-1].ival) <= 24)
						(yyval.typnam) = SystemTypeName("float4");
					else if ((yyvsp[-1].ival) <= 53)
						(yyval.typnam) = SystemTypeName("float8");
					else
						ereport(ERROR,
								(errcode(PG_ERRCODE_INVALID_PARAMETER_VALUE),
								 errmsg("precision for type float must be less than 54 bits"),
								 parser_errposition((yylsp[-1]))));
				}
#line 25697 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 924: /* opt_float: %empty  */
#line 1515 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("float4");
				}
#line 25705 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 925: /* Bit: BitWithLength  */
#line 1525 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 25713 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 926: /* Bit: BitWithoutLength  */
#line 1529 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 25721 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 927: /* ConstBit: BitWithLength  */
#line 1537 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 25729 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 928: /* ConstBit: BitWithoutLength  */
#line 1541 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
					(yyval.typnam)->typmods = NIL;
				}
#line 25738 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 929: /* BitWithLength: BIT opt_varying '(' expr_list_opt_comma ')'  */
#line 1549 "third_party/libpg_query/grammar/statements/select.y"
                                {
					const char *typname;

					typname = (yyvsp[-3].boolean) ? "varbit" : "bit";
					(yyval.typnam) = SystemTypeName(typname);
					(yyval.typnam)->typmods = (yyvsp[-1].list);
					(yyval.typnam)->location = (yylsp[-4]);
				}
#line 25751 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 930: /* BitWithoutLength: BIT opt_varying  */
#line 1561 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* bit defaults to bit(1), varbit to no limit */
					if ((yyvsp[0].boolean))
					{
						(yyval.typnam) = SystemTypeName("varbit");
					}
					else
					{
						(yyval.typnam) = SystemTypeName("bit");
						(yyval.typnam)->typmods = list_make1(makeIntConst(1, -1));
					}
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 25769 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 931: /* Character: CharacterWithLength  */
#line 1582 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 25777 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 932: /* Character: CharacterWithoutLength  */
#line 1586 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 25785 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 933: /* ConstCharacter: CharacterWithLength  */
#line 1592 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 25793 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 934: /* ConstCharacter: CharacterWithoutLength  */
#line 1596 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* Length was not specified so allow to be unrestricted.
					 * This handles problems with fixed-length (bpchar) strings
					 * which in column definitions must default to a length
					 * of one, but should not be constrained if the length
					 * was not specified.
					 */
					(yyval.typnam) = (yyvsp[0].typnam);
					(yyval.typnam)->typmods = NIL;
				}
#line 25808 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 935: /* CharacterWithLength: character '(' Iconst ')'  */
#line 1609 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName((yyvsp[-3].conststr));
					(yyval.typnam)->typmods = list_make1(makeIntConst((yyvsp[-1].ival), (yylsp[-1])));
					(yyval.typnam)->location = (yylsp[-3]);
				}
#line 25818 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 936: /* CharacterWithoutLength: character  */
#line 1617 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName((yyvsp[0].conststr));
					/* char defaults to char(1), varchar to no limit */
					if (strcmp((yyvsp[0].conststr), "bpchar") == 0)
						(yyval.typnam)->typmods = list_make1(makeIntConst(1, -1));
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 25830 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 937: /* character: CHARACTER opt_varying  */
#line 1627 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = (yyvsp[0].boolean) ? "varchar": "bpchar"; }
#line 25836 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 938: /* character: CHAR_P opt_varying  */
#line 1629 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = (yyvsp[0].boolean) ? "varchar": "bpchar"; }
#line 25842 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 939: /* character: VARCHAR  */
#line 1631 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = "varchar"; }
#line 25848 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 940: /* character: NATIONAL CHARACTER opt_varying  */
#line 1633 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = (yyvsp[0].boolean) ? "varchar": "bpchar"; }
#line 25854 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 941: /* character: NATIONAL CHAR_P opt_varying  */
#line 1635 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = (yyvsp[0].boolean) ? "varchar": "bpchar"; }
#line 25860 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 942: /* character: NCHAR opt_varying  */
#line 1637 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = (yyvsp[0].boolean) ? "varchar": "bpchar"; }
#line 25866 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 943: /* opt_varying: VARYING  */
#line 1641 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = true; }
#line 25872 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 944: /* opt_varying: %empty  */
#line 1642 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 25878 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 945: /* ConstDatetime: TIMESTAMP '(' Iconst ')' opt_timezone  */
#line 1650 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].boolean))
						(yyval.typnam) = SystemTypeName("timestamptz");
					else
						(yyval.typnam) = SystemTypeName("timestamp");
					(yyval.typnam)->typmods = list_make1(makeIntConst((yyvsp[-2].ival), (yylsp[-2])));
					(yyval.typnam)->location = (yylsp[-4]);
				}
#line 25891 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 946: /* ConstDatetime: TIMESTAMP opt_timezone  */
#line 1659 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].boolean))
						(yyval.typnam) = SystemTypeName("timestamptz");
					else
						(yyval.typnam) = SystemTypeName("timestamp");
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 25903 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 947: /* ConstDatetime: TIME '(' Iconst ')' opt_timezone  */
#line 1667 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].boolean))
						(yyval.typnam) = SystemTypeName("timetz");
					else
						(yyval.typnam) = SystemTypeName("time");
					(yyval.typnam)->typmods = list_make1(makeIntConst((yyvsp[-2].ival), (yylsp[-2])));
					(yyval.typnam)->location = (yylsp[-4]);
				}
#line 25916 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 948: /* ConstDatetime: TIME opt_timezone  */
#line 1676 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].boolean))
						(yyval.typnam) = SystemTypeName("timetz");
					else
						(yyval.typnam) = SystemTypeName("time");
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 25928 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 949: /* ConstInterval: INTERVAL  */
#line 1687 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("interval");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 25937 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 950: /* opt_timezone: WITH_LA TIME ZONE  */
#line 1694 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.boolean) = true; }
#line 25943 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 951: /* opt_timezone: WITHOUT TIME ZONE  */
#line 1695 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.boolean) = false; }
#line 25949 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 952: /* opt_timezone: %empty  */
#line 1696 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 25955 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 969: /* opt_interval: year_keyword  */
#line 1725 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(YEAR), (yylsp[0]))); }
#line 25961 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 970: /* opt_interval: month_keyword  */
#line 1727 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MONTH), (yylsp[0]))); }
#line 25967 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 971: /* opt_interval: day_keyword  */
#line 1729 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(DAY), (yylsp[0]))); }
#line 25973 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 972: /* opt_interval: hour_keyword  */
#line 1731 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(HOUR), (yylsp[0]))); }
#line 25979 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 973: /* opt_interval: minute_keyword  */
#line 1733 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MINUTE), (yylsp[0]))); }
#line 25985 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 974: /* opt_interval: second_keyword  */
#line 1735 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(SECOND), (yylsp[0]))); }
#line 25991 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 975: /* opt_interval: millisecond_keyword  */
#line 1737 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MILLISECOND), (yylsp[0]))); }
#line 25997 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 976: /* opt_interval: microsecond_keyword  */
#line 1739 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MICROSECOND), (yylsp[0]))); }
#line 26003 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 977: /* opt_interval: year_keyword TO month_keyword  */
#line 1741 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(YEAR) |
												 INTERVAL_MASK(MONTH), (yylsp[-2])));
				}
#line 26012 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 978: /* opt_interval: day_keyword TO hour_keyword  */
#line 1746 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(DAY) |
												 INTERVAL_MASK(HOUR), (yylsp[-2])));
				}
#line 26021 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 979: /* opt_interval: day_keyword TO minute_keyword  */
#line 1751 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(DAY) |
												 INTERVAL_MASK(HOUR) |
												 INTERVAL_MASK(MINUTE), (yylsp[-2])));
				}
#line 26031 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 980: /* opt_interval: day_keyword TO second_keyword  */
#line 1757 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(DAY) |
												 INTERVAL_MASK(HOUR) |
												 INTERVAL_MASK(MINUTE) |
												 INTERVAL_MASK(SECOND), (yylsp[-2])));
				}
#line 26042 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 981: /* opt_interval: hour_keyword TO minute_keyword  */
#line 1764 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(HOUR) |
												 INTERVAL_MASK(MINUTE), (yylsp[-2])));
				}
#line 26051 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 982: /* opt_interval: hour_keyword TO second_keyword  */
#line 1769 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(HOUR) |
												 INTERVAL_MASK(MINUTE) |
												 INTERVAL_MASK(SECOND), (yylsp[-2])));
				}
#line 26061 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 983: /* opt_interval: minute_keyword TO second_keyword  */
#line 1775 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MINUTE) |
												 INTERVAL_MASK(SECOND), (yylsp[-2])));
				}
#line 26070 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 984: /* opt_interval: %empty  */
#line 1780 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = NIL; }
#line 26076 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 985: /* a_expr: c_expr  */
#line 1811 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 26082 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 986: /* a_expr: a_expr TYPECAST Typename  */
#line 1814 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.node) = makeTypeCast((yyvsp[-2].node), (yyvsp[0].typnam), 0, (yylsp[-1])); }
#line 26088 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 987: /* a_expr: a_expr COLLATE any_name  */
#line 1816 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGCollateClause *n = makeNode(PGCollateClause);
					n->arg = (yyvsp[-2].node);
					n->collname = (yyvsp[0].list);
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *) n;
				}
#line 26100 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 988: /* a_expr: a_expr AT TIME ZONE a_expr  */
#line 1824 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("timezone"),
											   list_make2((yyvsp[0].node), (yyvsp[-4].node)),
											   (yylsp[-3]));
				}
#line 26110 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 989: /* a_expr: '+' a_expr  */
#line 1839 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", NULL, (yyvsp[0].node), (yylsp[-1])); }
#line 26116 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 990: /* a_expr: '-' a_expr  */
#line 1841 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = doNegate((yyvsp[0].node), (yylsp[-1])); }
#line 26122 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 991: /* a_expr: a_expr '+' a_expr  */
#line 1843 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26128 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 992: /* a_expr: a_expr '-' a_expr  */
#line 1845 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "-", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26134 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 993: /* a_expr: a_expr '*' a_expr  */
#line 1847 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "*", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26140 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 994: /* a_expr: a_expr '/' a_expr  */
#line 1849 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "/", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26146 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 995: /* a_expr: a_expr '%' a_expr  */
#line 1851 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "%", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26152 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 996: /* a_expr: a_expr '^' a_expr  */
#line 1853 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "^", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26158 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 997: /* a_expr: a_expr POWER_OF a_expr  */
#line 1855 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "**", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26164 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 998: /* a_expr: a_expr '<' a_expr  */
#line 1857 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26170 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 999: /* a_expr: a_expr '>' a_expr  */
#line 1859 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, ">", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26176 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1000: /* a_expr: a_expr '=' a_expr  */
#line 1861 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26182 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1001: /* a_expr: a_expr LESS_EQUALS a_expr  */
#line 1863 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26188 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1002: /* a_expr: a_expr GREATER_EQUALS a_expr  */
#line 1865 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, ">=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26194 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1003: /* a_expr: a_expr NOT_EQUALS a_expr  */
#line 1867 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<>", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26200 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1004: /* a_expr: a_expr qual_Op a_expr  */
#line 1870 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[-1].list), (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26206 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1005: /* a_expr: qual_Op a_expr  */
#line 1872 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[-1].list), NULL, (yyvsp[0].node), (yylsp[-1])); }
#line 26212 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1006: /* a_expr: a_expr qual_Op  */
#line 1874 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[0].list), (yyvsp[-1].node), NULL, (yylsp[0])); }
#line 26218 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1007: /* a_expr: a_expr AND a_expr  */
#line 1877 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeAndExpr((yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26224 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1008: /* a_expr: a_expr OR a_expr  */
#line 1879 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeOrExpr((yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26230 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1009: /* a_expr: NOT a_expr  */
#line 1881 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeNotExpr((yyvsp[0].node), (yylsp[-1])); }
#line 26236 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1010: /* a_expr: NOT_LA a_expr  */
#line 1883 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeNotExpr((yyvsp[0].node), (yylsp[-1])); }
#line 26242 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1011: /* a_expr: a_expr GLOB a_expr  */
#line 1885 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_GLOB, "~~~",
												   (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
				}
#line 26251 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1012: /* a_expr: a_expr LIKE a_expr  */
#line 1890 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_LIKE, "~~",
												   (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
				}
#line 26260 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1013: /* a_expr: a_expr LIKE a_expr ESCAPE a_expr  */
#line 1895 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("like_escape"),
											   list_make3((yyvsp[-4].node), (yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-3]));
					(yyval.node) = (PGNode *) n;
				}
#line 26271 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1014: /* a_expr: a_expr NOT_LA LIKE a_expr  */
#line 1902 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_LIKE, "!~~",
												   (yyvsp[-3].node), (yyvsp[0].node), (yylsp[-2]));
				}
#line 26280 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1015: /* a_expr: a_expr NOT_LA LIKE a_expr ESCAPE a_expr  */
#line 1907 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("not_like_escape"),
											   list_make3((yyvsp[-5].node), (yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-4]));
					(yyval.node) = (PGNode *) n;
				}
#line 26291 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1016: /* a_expr: a_expr ILIKE a_expr  */
#line 1914 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_ILIKE, "~~*",
												   (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
				}
#line 26300 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1017: /* a_expr: a_expr ILIKE a_expr ESCAPE a_expr  */
#line 1919 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("ilike_escape"),
											   list_make3((yyvsp[-4].node), (yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-3]));
					(yyval.node) = (PGNode *) n;
				}
#line 26311 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1018: /* a_expr: a_expr NOT_LA ILIKE a_expr  */
#line 1926 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_ILIKE, "!~~*",
												   (yyvsp[-3].node), (yyvsp[0].node), (yylsp[-2]));
				}
#line 26320 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1019: /* a_expr: a_expr NOT_LA ILIKE a_expr ESCAPE a_expr  */
#line 1931 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("not_ilike_escape"),
											   list_make3((yyvsp[-5].node), (yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-4]));
					(yyval.node) = (PGNode *) n;
				}
#line 26331 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1020: /* a_expr: a_expr SIMILAR TO a_expr  */
#line 1939 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
											   list_make2((yyvsp[0].node), makeNullAConst(-1)),
											   (yylsp[-2]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "~",
												   (yyvsp[-3].node), (PGNode *) n, (yylsp[-2]));
				}
#line 26343 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1021: /* a_expr: a_expr SIMILAR TO a_expr ESCAPE a_expr  */
#line 1947 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
											   list_make2((yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-4]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "~",
												   (yyvsp[-5].node), (PGNode *) n, (yylsp[-4]));
				}
#line 26355 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1022: /* a_expr: a_expr NOT_LA SIMILAR TO a_expr  */
#line 1955 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
											   list_make2((yyvsp[0].node), makeNullAConst(-1)),
											   (yylsp[-3]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "!~",
												   (yyvsp[-4].node), (PGNode *) n, (yylsp[-3]));
				}
#line 26367 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1023: /* a_expr: a_expr NOT_LA SIMILAR TO a_expr ESCAPE a_expr  */
#line 1963 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
											   list_make2((yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-5]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "!~",
												   (yyvsp[-6].node), (PGNode *) n, (yylsp[-5]));
				}
#line 26379 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1024: /* a_expr: a_expr IS NULL_P  */
#line 1981 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-2].node);
					n->nulltesttype = PG_IS_NULL;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 26391 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1025: /* a_expr: a_expr ISNULL  */
#line 1989 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-1].node);
					n->nulltesttype = PG_IS_NULL;
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 26403 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1026: /* a_expr: a_expr IS NOT NULL_P  */
#line 1997 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-3].node);
					n->nulltesttype = IS_NOT_NULL;
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)n;
				}
#line 26415 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1027: /* a_expr: a_expr NOT NULL_P  */
#line 2005 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-2].node);
					n->nulltesttype = IS_NOT_NULL;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 26427 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1028: /* a_expr: a_expr NOTNULL  */
#line 2013 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-1].node);
					n->nulltesttype = IS_NOT_NULL;
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 26439 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1029: /* a_expr: a_expr LAMBDA_ARROW a_expr  */
#line 2021 "third_party/libpg_query/grammar/statements/select.y"
                        {
				PGLambdaFunction *n = makeNode(PGLambdaFunction);
				n->lhs = (yyvsp[-2].node);
				n->rhs = (yyvsp[0].node);
				n->location = (yylsp[-1]);
				(yyval.node) = (PGNode *) n;
			}
#line 26451 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1030: /* a_expr: a_expr DOUBLE_ARROW a_expr  */
#line 2029 "third_party/libpg_query/grammar/statements/select.y"
                        {
							(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "->>", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
			}
#line 26459 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1031: /* a_expr: row OVERLAPS row  */
#line 2033 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if (list_length((yyvsp[-2].list)) != 2)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("wrong number of parameters on left side of OVERLAPS expression"),
								 parser_errposition((yylsp[-2]))));
					if (list_length((yyvsp[0].list)) != 2)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("wrong number of parameters on right side of OVERLAPS expression"),
								 parser_errposition((yylsp[0]))));
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("overlaps"),
											   list_concat((yyvsp[-2].list), (yyvsp[0].list)),
											   (yylsp[-1]));
				}
#line 26479 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1032: /* a_expr: a_expr IS TRUE_P  */
#line 2049 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-2].node);
					b->booltesttype = PG_IS_TRUE;
					b->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)b;
				}
#line 26491 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1033: /* a_expr: a_expr IS NOT TRUE_P  */
#line 2057 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-3].node);
					b->booltesttype = IS_NOT_TRUE;
					b->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)b;
				}
#line 26503 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1034: /* a_expr: a_expr IS FALSE_P  */
#line 2065 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-2].node);
					b->booltesttype = IS_FALSE;
					b->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)b;
				}
#line 26515 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1035: /* a_expr: a_expr IS NOT FALSE_P  */
#line 2073 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-3].node);
					b->booltesttype = IS_NOT_FALSE;
					b->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)b;
				}
#line 26527 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1036: /* a_expr: a_expr IS UNKNOWN  */
#line 2081 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-2].node);
					b->booltesttype = IS_UNKNOWN;
					b->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)b;
				}
#line 26539 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1037: /* a_expr: a_expr IS NOT UNKNOWN  */
#line 2089 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-3].node);
					b->booltesttype = IS_NOT_UNKNOWN;
					b->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)b;
				}
#line 26551 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1038: /* a_expr: a_expr IS DISTINCT FROM a_expr  */
#line 2097 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_DISTINCT, "=", (yyvsp[-4].node), (yyvsp[0].node), (yylsp[-3]));
				}
#line 26559 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1039: /* a_expr: a_expr IS NOT DISTINCT FROM a_expr  */
#line 2101 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_DISTINCT, "=", (yyvsp[-5].node), (yyvsp[0].node), (yylsp[-4]));
				}
#line 26567 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1040: /* a_expr: a_expr IS OF '(' type_list ')'  */
#line 2105 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OF, "=", (yyvsp[-5].node), (PGNode *) (yyvsp[-1].list), (yylsp[-4]));
				}
#line 26575 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1041: /* a_expr: a_expr IS NOT OF '(' type_list ')'  */
#line 2109 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OF, "<>", (yyvsp[-6].node), (PGNode *) (yyvsp[-1].list), (yylsp[-5]));
				}
#line 26583 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1042: /* a_expr: a_expr BETWEEN opt_asymmetric b_expr AND a_expr  */
#line 2113 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_BETWEEN,
												   "BETWEEN",
												   (yyvsp[-5].node),
												   (PGNode *) list_make2((yyvsp[-2].node), (yyvsp[0].node)),
												   (yylsp[-4]));
				}
#line 26595 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1043: /* a_expr: a_expr NOT_LA BETWEEN opt_asymmetric b_expr AND a_expr  */
#line 2121 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_BETWEEN,
												   "NOT BETWEEN",
												   (yyvsp[-6].node),
												   (PGNode *) list_make2((yyvsp[-2].node), (yyvsp[0].node)),
												   (yylsp[-5]));
				}
#line 26607 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1044: /* a_expr: a_expr BETWEEN SYMMETRIC b_expr AND a_expr  */
#line 2129 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_BETWEEN_SYM,
												   "BETWEEN SYMMETRIC",
												   (yyvsp[-5].node),
												   (PGNode *) list_make2((yyvsp[-2].node), (yyvsp[0].node)),
												   (yylsp[-4]));
				}
#line 26619 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1045: /* a_expr: a_expr NOT_LA BETWEEN SYMMETRIC b_expr AND a_expr  */
#line 2137 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_BETWEEN_SYM,
												   "NOT BETWEEN SYMMETRIC",
												   (yyvsp[-6].node),
												   (PGNode *) list_make2((yyvsp[-2].node), (yyvsp[0].node)),
												   (yylsp[-5]));
				}
#line 26631 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1046: /* a_expr: a_expr IN_P in_expr  */
#line 2145 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* in_expr returns a PGSubLink or a list of a_exprs */
					if (IsA((yyvsp[0].node), PGSubLink))
					{
						/* generate foo = ANY (subquery) */
						PGSubLink *n = (PGSubLink *) (yyvsp[0].node);
						n->subLinkType = PG_ANY_SUBLINK;
						n->subLinkId = 0;
						n->testexpr = (yyvsp[-2].node);
						n->operName = NIL;		/* show it's IN not = ANY */
						n->location = (yylsp[-1]);
						(yyval.node) = (PGNode *)n;
					}
					else
					{
						/* generate scalar IN expression */
						(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_IN, "=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
					}
				}
#line 26655 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1047: /* a_expr: a_expr NOT_LA IN_P in_expr  */
#line 2165 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* in_expr returns a PGSubLink or a list of a_exprs */
					if (IsA((yyvsp[0].node), PGSubLink))
					{
						/* generate NOT (foo = ANY (subquery)) */
						/* Make an = ANY node */
						PGSubLink *n = (PGSubLink *) (yyvsp[0].node);
						n->subLinkType = PG_ANY_SUBLINK;
						n->subLinkId = 0;
						n->testexpr = (yyvsp[-3].node);
						n->operName = NIL;		/* show it's IN not = ANY */
						n->location = (yylsp[-2]);
						/* Stick a NOT on top; must have same parse location */
						(yyval.node) = makeNotExpr((PGNode *) n, (yylsp[-2]));
					}
					else
					{
						/* generate scalar NOT IN expression */
						(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_IN, "<>", (yyvsp[-3].node), (yyvsp[0].node), (yylsp[-2]));
					}
				}
#line 26681 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1048: /* a_expr: a_expr subquery_Op sub_type select_with_parens  */
#line 2187 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSubLink *n = makeNode(PGSubLink);
					n->subLinkType = (yyvsp[-1].subquerytype);
					n->subLinkId = 0;
					n->testexpr = (yyvsp[-3].node);
					n->operName = (yyvsp[-2].list);
					n->subselect = (yyvsp[0].node);
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)n;
				}
#line 26696 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1049: /* a_expr: a_expr subquery_Op sub_type '(' a_expr ')'  */
#line 2198 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[-3].subquerytype) == PG_ANY_SUBLINK)
						(yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP_ANY, (yyvsp[-4].list), (yyvsp[-5].node), (yyvsp[-1].node), (yylsp[-4]));
					else
						(yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP_ALL, (yyvsp[-4].list), (yyvsp[-5].node), (yyvsp[-1].node), (yylsp[-4]));
				}
#line 26707 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1050: /* a_expr: DEFAULT  */
#line 2205 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/*
					 * The SQL spec only allows DEFAULT in "contextually typed
					 * expressions", but for us, it's easier to allow it in
					 * any a_expr and then throw error during parse analysis
					 * if it's in an inappropriate context.  This way also
					 * lets us say something smarter than "syntax error".
					 */
					PGSetToDefault *n = makeNode(PGSetToDefault);
					/* parse analysis will fill in the rest */
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 26725 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1051: /* a_expr: COLUMNS '(' '*' opt_except_list opt_replace_list ')'  */
#line 2219 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAStar *star = makeNode(PGAStar);
					star->except_list = (yyvsp[-2].list);
					star->replace_list = (yyvsp[-1].list);
					star->columns = true;

					(yyval.node) = (PGNode *) star;
				}
#line 26738 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1052: /* a_expr: COLUMNS '(' Sconst ')'  */
#line 2228 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAStar *star = makeNode(PGAStar);
					star->regex = (yyvsp[-1].str);
					star->columns = true;

					(yyval.node) = (PGNode *) star;
				}
#line 26750 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1053: /* b_expr: c_expr  */
#line 2247 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 26756 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1054: /* b_expr: b_expr TYPECAST Typename  */
#line 2249 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeTypeCast((yyvsp[-2].node), (yyvsp[0].typnam), 0, (yylsp[-1])); }
#line 26762 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1055: /* b_expr: '+' b_expr  */
#line 2251 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", NULL, (yyvsp[0].node), (yylsp[-1])); }
#line 26768 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1056: /* b_expr: '-' b_expr  */
#line 2253 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = doNegate((yyvsp[0].node), (yylsp[-1])); }
#line 26774 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1057: /* b_expr: b_expr '+' b_expr  */
#line 2255 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26780 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1058: /* b_expr: b_expr '-' b_expr  */
#line 2257 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "-", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26786 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1059: /* b_expr: b_expr '*' b_expr  */
#line 2259 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "*", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26792 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1060: /* b_expr: b_expr '/' b_expr  */
#line 2261 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "/", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26798 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1061: /* b_expr: b_expr '%' b_expr  */
#line 2263 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "%", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26804 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1062: /* b_expr: b_expr '^' b_expr  */
#line 2265 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "^", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26810 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1063: /* b_expr: b_expr POWER_OF b_expr  */
#line 2267 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "**", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26816 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1064: /* b_expr: b_expr '<' b_expr  */
#line 2269 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26822 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1065: /* b_expr: b_expr '>' b_expr  */
#line 2271 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, ">", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26828 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1066: /* b_expr: b_expr '=' b_expr  */
#line 2273 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26834 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1067: /* b_expr: b_expr LESS_EQUALS b_expr  */
#line 2275 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26840 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1068: /* b_expr: b_expr GREATER_EQUALS b_expr  */
#line 2277 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, ">=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26846 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1069: /* b_expr: b_expr NOT_EQUALS b_expr  */
#line 2279 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<>", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26852 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1070: /* b_expr: b_expr qual_Op b_expr  */
#line 2281 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[-1].list), (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26858 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1071: /* b_expr: qual_Op b_expr  */
#line 2283 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[-1].list), NULL, (yyvsp[0].node), (yylsp[-1])); }
#line 26864 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1072: /* b_expr: b_expr qual_Op  */
#line 2285 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[0].list), (yyvsp[-1].node), NULL, (yylsp[0])); }
#line 26870 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1073: /* b_expr: b_expr IS DISTINCT FROM b_expr  */
#line 2287 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_DISTINCT, "=", (yyvsp[-4].node), (yyvsp[0].node), (yylsp[-3]));
				}
#line 26878 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1074: /* b_expr: b_expr IS NOT DISTINCT FROM b_expr  */
#line 2291 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_DISTINCT, "=", (yyvsp[-5].node), (yyvsp[0].node), (yylsp[-4]));
				}
#line 26886 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1075: /* b_expr: b_expr IS OF '(' type_list ')'  */
#line 2295 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OF, "=", (yyvsp[-5].node), (PGNode *) (yyvsp[-1].list), (yylsp[-4]));
				}
#line 26894 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1076: /* b_expr: b_expr IS NOT OF '(' type_list ')'  */
#line 2299 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OF, "<>", (yyvsp[-6].node), (PGNode *) (yyvsp[-1].list), (yylsp[-5]));
				}
#line 26902 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1077: /* c_expr: columnref  */
#line 2312 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 26908 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1078: /* c_expr: AexprConst  */
#line 2313 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 26914 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1079: /* c_expr: '#' ICONST  */
#line 2315 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGPositionalReference *n = makeNode(PGPositionalReference);
					n->position = (yyvsp[0].ival);
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *) n;
				}
#line 26925 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1080: /* c_expr: indirection_expr opt_indirection  */
#line 2322 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].list))
					{
						PGAIndirection *n = makeNode(PGAIndirection);
						n->arg = (PGNode *) (yyvsp[-1].node);
						n->indirection = check_indirection((yyvsp[0].list), yyscanner);
						(yyval.node) = (PGNode *) n;
					}
					else
						(yyval.node) = (PGNode *) (yyvsp[-1].node);
				}
#line 26941 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1081: /* c_expr: '$' named_param  */
#line 2334 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeNamedParamRef((yyvsp[0].str), (yylsp[-1]));
				}
#line 26949 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1082: /* c_expr: row  */
#line 2337 "third_party/libpg_query/grammar/statements/select.y"
                              {
				PGFuncCall *n = makeFuncCall(SystemFuncName("row"), (yyvsp[0].list), (yylsp[0]));
				(yyval.node) = (PGNode *) n;
			}
#line 26958 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1083: /* c_expr: '[' opt_expr_list_opt_comma ']'  */
#line 2341 "third_party/libpg_query/grammar/statements/select.y"
                                                          {
				PGFuncCall *n = makeFuncCall(SystemFuncName("list_value"), (yyvsp[-1].list), (yylsp[-1]));
				(yyval.node) = (PGNode *) n;
			}
#line 26967 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1084: /* c_expr: list_comprehension  */
#line 2345 "third_party/libpg_query/grammar/statements/select.y"
                                             {
				(yyval.node) = (yyvsp[0].node);
			}
#line 26975 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1085: /* c_expr: ARRAY select_with_parens  */
#line 2349 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSubLink *n = makeNode(PGSubLink);
					n->subLinkType = PG_ARRAY_SUBLINK;
					n->subLinkId = 0;
					n->testexpr = NULL;
					n->operName = NULL;
					n->subselect = (yyvsp[0].node);
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 26990 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1086: /* c_expr: ARRAY '[' opt_expr_list_opt_comma ']'  */
#line 2359 "third_party/libpg_query/grammar/statements/select.y"
                                                                {
				PGList *func_name = list_make1(makeString("construct_array"));
				PGFuncCall *n = makeFuncCall(func_name, (yyvsp[-1].list), (yylsp[-3]));
				(yyval.node) = (PGNode *) n;
			}
#line 27000 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1087: /* c_expr: case_expr  */
#line 2365 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 27006 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1088: /* c_expr: select_with_parens  */
#line 2367 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSubLink *n = makeNode(PGSubLink);
					n->subLinkType = PG_EXPR_SUBLINK;
					n->subLinkId = 0;
					n->testexpr = NULL;
					n->operName = NIL;
					n->subselect = (yyvsp[0].node);
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 27021 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1089: /* c_expr: select_with_parens indirection  */
#line 2378 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/*
					 * Because the select_with_parens nonterminal is designed
					 * to "eat" as many levels of parens as possible, the
					 * '(' a_expr ')' opt_indirection production above will
					 * fail to match a sub-SELECT with indirection decoration;
					 * the sub-SELECT won't be regarded as an a_expr as long
					 * as there are parens around it.  To support applying
					 * subscripting or field selection to a sub-SELECT result,
					 * we need this redundant-looking production.
					 */
					PGSubLink *n = makeNode(PGSubLink);
					PGAIndirection *a = makeNode(PGAIndirection);
					n->subLinkType = PG_EXPR_SUBLINK;
					n->subLinkId = 0;
					n->testexpr = NULL;
					n->operName = NIL;
					n->subselect = (yyvsp[-1].node);
					n->location = (yylsp[-1]);
					a->arg = (PGNode *)n;
					a->indirection = check_indirection((yyvsp[0].list), yyscanner);
					(yyval.node) = (PGNode *)a;
				}
#line 27049 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1090: /* c_expr: EXISTS select_with_parens  */
#line 2402 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSubLink *n = makeNode(PGSubLink);
					n->subLinkType = PG_EXISTS_SUBLINK;
					n->subLinkId = 0;
					n->testexpr = NULL;
					n->operName = NIL;
					n->subselect = (yyvsp[0].node);
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 27064 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1091: /* c_expr: grouping_or_grouping_id '(' expr_list_opt_comma ')'  */
#line 2413 "third_party/libpg_query/grammar/statements/select.y"
                          {
				  PGGroupingFunc *g = makeNode(PGGroupingFunc);
				  g->args = (yyvsp[-1].list);
				  g->location = (yylsp[-3]);
				  (yyval.node) = (PGNode *)g;
			  }
#line 27075 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1092: /* indirection_expr: '?'  */
#line 2424 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeParamRef(0, (yylsp[0]));
				}
#line 27083 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1093: /* indirection_expr: PARAM  */
#line 2428 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGParamRef *p = makeNode(PGParamRef);
					p->number = (yyvsp[0].ival);
					p->location = (yylsp[0]);
					(yyval.node) = (PGNode *) p;
				}
#line 27094 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1094: /* indirection_expr: '(' a_expr ')'  */
#line 2435 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (yyvsp[-1].node);
				}
#line 27102 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1095: /* indirection_expr: '{' dict_arguments_opt_comma '}'  */
#line 2439 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *f = makeFuncCall(SystemFuncName("struct_pack"), (yyvsp[-1].list), (yylsp[-1]));
					(yyval.node) = (PGNode *) f;
				}
#line 27111 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1096: /* indirection_expr: func_expr  */
#line 2444 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (yyvsp[0].node);
				}
#line 27119 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1097: /* func_application: func_name '(' ')'  */
#line 2449 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall((yyvsp[-2].list), NIL, (yylsp[-2]));
				}
#line 27127 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1098: /* func_application: func_name '(' func_arg_list opt_sort_clause opt_ignore_nulls ')'  */
#line 2453 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall((yyvsp[-5].list), (yyvsp[-3].list), (yylsp[-5]));
					n->agg_order = (yyvsp[-2].list);
					n->agg_ignore_nulls = (yyvsp[-1].boolean);
					(yyval.node) = (PGNode *)n;
				}
#line 27138 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1099: /* func_application: func_name '(' VARIADIC func_arg_expr opt_sort_clause opt_ignore_nulls ')'  */
#line 2460 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall((yyvsp[-6].list), list_make1((yyvsp[-3].node)), (yylsp[-6]));
					n->func_variadic = true;
					n->agg_order = (yyvsp[-2].list);
					n->agg_ignore_nulls = (yyvsp[-1].boolean);
					(yyval.node) = (PGNode *)n;
				}
#line 27150 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1100: /* func_application: func_name '(' func_arg_list ',' VARIADIC func_arg_expr opt_sort_clause opt_ignore_nulls ')'  */
#line 2468 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall((yyvsp[-8].list), lappend((yyvsp[-6].list), (yyvsp[-3].node)), (yylsp[-8]));
					n->func_variadic = true;
					n->agg_order = (yyvsp[-2].list);
					n->agg_ignore_nulls = (yyvsp[-1].boolean);
					(yyval.node) = (PGNode *)n;
				}
#line 27162 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1101: /* func_application: func_name '(' ALL func_arg_list opt_sort_clause opt_ignore_nulls ')'  */
#line 2476 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall((yyvsp[-6].list), (yyvsp[-3].list), (yylsp[-6]));
					n->agg_order = (yyvsp[-2].list);
					n->agg_ignore_nulls = (yyvsp[-1].boolean);
					/* Ideally we'd mark the PGFuncCall node to indicate
					 * "must be an aggregate", but there's no provision
					 * for that in PGFuncCall at the moment.
					 */
					(yyval.node) = (PGNode *)n;
				}
#line 27177 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1102: /* func_application: func_name '(' DISTINCT func_arg_list opt_sort_clause opt_ignore_nulls ')'  */
#line 2487 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall((yyvsp[-6].list), (yyvsp[-3].list), (yylsp[-6]));
					n->agg_order = (yyvsp[-2].list);
					n->agg_ignore_nulls = (yyvsp[-1].boolean);
					n->agg_distinct = true;
					(yyval.node) = (PGNode *)n;
				}
#line 27189 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1103: /* func_application: func_name '(' '*' ')'  */
#line 2495 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/*
					 * We consider AGGREGATE(*) to invoke a parameterless
					 * aggregate.  This does the right thing for COUNT(*),
					 * and there are no other aggregates in SQL that accept
					 * '*' as parameter.
					 *
					 * The PGFuncCall node is also marked agg_star = true,
					 * so that later processing can detect what the argument
					 * really was.
					 */
					PGFuncCall *n = makeFuncCall((yyvsp[-3].list), NIL, (yylsp[-3]));
					n->agg_star = true;
					(yyval.node) = (PGNode *)n;
				}
#line 27209 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1104: /* func_expr: func_application within_group_clause filter_clause export_clause over_clause  */
#line 2523 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = (PGFuncCall *) (yyvsp[-4].node);
					/*
					 * The order clause for WITHIN GROUP and the one for
					 * plain-aggregate ORDER BY share a field, so we have to
					 * check here that at most one is present.  We also check
					 * for DISTINCT and VARIADIC here to give a better error
					 * location.  Other consistency checks are deferred to
					 * parse analysis.
					 */
					if ((yyvsp[-3].list) != NIL)
					{
						if (n->agg_order != NIL)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("cannot use multiple ORDER BY clauses with WITHIN GROUP"),
									 parser_errposition((yylsp[-3]))));
						if (n->agg_distinct)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("cannot use DISTINCT with WITHIN GROUP"),
									 parser_errposition((yylsp[-3]))));
						if (n->func_variadic)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("cannot use VARIADIC with WITHIN GROUP"),
									 parser_errposition((yylsp[-3]))));
						n->agg_order = (yyvsp[-3].list);
						n->agg_within_group = true;
					}
					n->agg_filter = (yyvsp[-2].node);
					n->export_state = (yyvsp[-1].boolean);
					n->over = (yyvsp[0].windef);
					(yyval.node) = (PGNode *) n;
				}
#line 27249 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1105: /* func_expr: func_expr_common_subexpr  */
#line 2559 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 27255 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1106: /* func_expr_windowless: func_application  */
#line 2569 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 27261 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1107: /* func_expr_windowless: func_expr_common_subexpr  */
#line 2570 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 27267 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1108: /* func_expr_common_subexpr: COLLATION FOR '(' a_expr ')'  */
#line 2578 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("pg_collation_for"),
											   list_make1((yyvsp[-1].node)),
											   (yylsp[-4]));
				}
#line 27277 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1109: /* func_expr_common_subexpr: CURRENT_DATE  */
#line 2584 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_CURRENT_DATE, -1, (yylsp[0]));
				}
#line 27285 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1110: /* func_expr_common_subexpr: CURRENT_TIME  */
#line 2588 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_CURRENT_TIME, -1, (yylsp[0]));
				}
#line 27293 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1111: /* func_expr_common_subexpr: CURRENT_TIME '(' Iconst ')'  */
#line 2592 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_CURRENT_TIME_N, (yyvsp[-1].ival), (yylsp[-3]));
				}
#line 27301 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1112: /* func_expr_common_subexpr: CURRENT_TIMESTAMP  */
#line 2596 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_CURRENT_TIMESTAMP, -1, (yylsp[0]));
				}
#line 27309 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1113: /* func_expr_common_subexpr: CURRENT_TIMESTAMP '(' Iconst ')'  */
#line 2600 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_CURRENT_TIMESTAMP_N, (yyvsp[-1].ival), (yylsp[-3]));
				}
#line 27317 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1114: /* func_expr_common_subexpr: LOCALTIME  */
#line 2604 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_LOCALTIME, -1, (yylsp[0]));
				}
#line 27325 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1115: /* func_expr_common_subexpr: LOCALTIME '(' Iconst ')'  */
#line 2608 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_LOCALTIME_N, (yyvsp[-1].ival), (yylsp[-3]));
				}
#line 27333 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1116: /* func_expr_common_subexpr: LOCALTIMESTAMP  */
#line 2612 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_LOCALTIMESTAMP, -1, (yylsp[0]));
				}
#line 27341 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1117: /* func_expr_common_subexpr: LOCALTIMESTAMP '(' Iconst ')'  */
#line 2616 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_LOCALTIMESTAMP_N, (yyvsp[-1].ival), (yylsp[-3]));
				}
#line 27349 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1118: /* func_expr_common_subexpr: CURRENT_ROLE  */
#line 2620 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_CURRENT_ROLE, -1, (yylsp[0]));
				}
#line 27357 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1119: /* func_expr_common_subexpr: CURRENT_USER  */
#line 2624 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_CURRENT_USER, -1, (yylsp[0]));
				}
#line 27365 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1120: /* func_expr_common_subexpr: SESSION_USER  */
#line 2628 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_SESSION_USER, -1, (yylsp[0]));
				}
#line 27373 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1121: /* func_expr_common_subexpr: USER  */
#line 2632 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_USER, -1, (yylsp[0]));
				}
#line 27381 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1122: /* func_expr_common_subexpr: CURRENT_CATALOG  */
#line 2636 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_CURRENT_CATALOG, -1, (yylsp[0]));
				}
#line 27389 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1123: /* func_expr_common_subexpr: CURRENT_SCHEMA  */
#line 2640 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_CURRENT_SCHEMA, -1, (yylsp[0]));
				}
#line 27397 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1124: /* func_expr_common_subexpr: CAST '(' a_expr AS Typename ')'  */
#line 2644 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeTypeCast((yyvsp[-3].node), (yyvsp[-1].typnam), 0, (yylsp[-5])); }
#line 27403 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1125: /* func_expr_common_subexpr: TRY_CAST '(' a_expr AS Typename ')'  */
#line 2646 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeTypeCast((yyvsp[-3].node), (yyvsp[-1].typnam), 1, (yylsp[-5])); }
#line 27409 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1126: /* func_expr_common_subexpr: EXTRACT '(' extract_list ')'  */
#line 2648 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("date_part"), (yyvsp[-1].list), (yylsp[-3]));
				}
#line 27417 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1127: /* func_expr_common_subexpr: OVERLAY '(' overlay_list ')'  */
#line 2652 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* overlay(A PLACING B FROM C FOR D) is converted to
					 * overlay(A, B, C, D)
					 * overlay(A PLACING B FROM C) is converted to
					 * overlay(A, B, C)
					 */
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("overlay"), (yyvsp[-1].list), (yylsp[-3]));
				}
#line 27430 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1128: /* func_expr_common_subexpr: POSITION '(' position_list ')'  */
#line 2661 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* position(A in B) is converted to position(B, A) */
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("position"), (yyvsp[-1].list), (yylsp[-3]));
				}
#line 27439 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1129: /* func_expr_common_subexpr: SUBSTRING '(' substr_list ')'  */
#line 2666 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* substring(A from B for C) is converted to
					 * substring(A, B, C) - thomas 2000-11-28
					 */
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("substring"), (yyvsp[-1].list), (yylsp[-3]));
				}
#line 27450 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1130: /* func_expr_common_subexpr: TREAT '(' a_expr AS Typename ')'  */
#line 2673 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* TREAT(expr AS target) converts expr of a particular type to target,
					 * which is defined to be a subtype of the original expression.
					 * In SQL99, this is intended for use with structured UDTs,
					 * but let's make this a generally useful form allowing stronger
					 * coercions than are handled by implicit casting.
					 *
					 * Convert SystemTypeName() to SystemFuncName() even though
					 * at the moment they result in the same thing.
					 */
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName(((PGValue *)llast((yyvsp[-1].typnam)->names))->val.str),
												list_make1((yyvsp[-3].node)),
												(yylsp[-5]));
				}
#line 27469 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1131: /* func_expr_common_subexpr: TRIM '(' BOTH trim_list ')'  */
#line 2688 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* various trim expressions are defined in SQL
					 * - thomas 1997-07-19
					 */
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("trim"), (yyvsp[-1].list), (yylsp[-4]));
				}
#line 27480 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1132: /* func_expr_common_subexpr: TRIM '(' LEADING trim_list ')'  */
#line 2695 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("ltrim"), (yyvsp[-1].list), (yylsp[-4]));
				}
#line 27488 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1133: /* func_expr_common_subexpr: TRIM '(' TRAILING trim_list ')'  */
#line 2699 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("rtrim"), (yyvsp[-1].list), (yylsp[-4]));
				}
#line 27496 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1134: /* func_expr_common_subexpr: TRIM '(' trim_list ')'  */
#line 2703 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("trim"), (yyvsp[-1].list), (yylsp[-3]));
				}
#line 27504 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1135: /* func_expr_common_subexpr: NULLIF '(' a_expr ',' a_expr ')'  */
#line 2707 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NULLIF, "=", (yyvsp[-3].node), (yyvsp[-1].node), (yylsp[-5]));
				}
#line 27512 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1136: /* func_expr_common_subexpr: COALESCE '(' expr_list_opt_comma ')'  */
#line 2711 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGCoalesceExpr *c = makeNode(PGCoalesceExpr);
					c->args = (yyvsp[-1].list);
					c->location = (yylsp[-3]);
					(yyval.node) = (PGNode *)c;
				}
#line 27523 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1137: /* list_comprehension: '[' a_expr FOR ColId IN_P a_expr ']'  */
#line 2721 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGLambdaFunction *lambda = makeNode(PGLambdaFunction);
					lambda->lhs = makeColumnRef((yyvsp[-3].str), NIL, (yylsp[-3]), yyscanner);
					lambda->rhs = (yyvsp[-5].node);
					lambda->location = (yylsp[-6]);
					PGFuncCall *n = makeFuncCall(SystemFuncName("list_apply"), list_make2((yyvsp[-1].node), lambda), (yylsp[-6]));
					(yyval.node) = (PGNode *) n;
				}
#line 27536 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1138: /* list_comprehension: '[' a_expr FOR ColId IN_P c_expr IF_P a_expr ']'  */
#line 2730 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGLambdaFunction *lambda = makeNode(PGLambdaFunction);
					lambda->lhs = makeColumnRef((yyvsp[-5].str), NIL, (yylsp[-5]), yyscanner);
					lambda->rhs = (yyvsp[-7].node);
					lambda->location = (yylsp[-8]);

					PGLambdaFunction *lambda_filter = makeNode(PGLambdaFunction);
					lambda_filter->lhs = makeColumnRef((yyvsp[-5].str), NIL, (yylsp[-5]), yyscanner);
					lambda_filter->rhs = (yyvsp[-1].node);
					lambda_filter->location = (yylsp[-1]);
					PGFuncCall *filter = makeFuncCall(SystemFuncName("list_filter"), list_make2((yyvsp[-3].node), lambda_filter), (yylsp[-8]));
					PGFuncCall *n = makeFuncCall(SystemFuncName("list_apply"), list_make2(filter, lambda), (yylsp[-8]));
					(yyval.node) = (PGNode *) n;
				}
#line 27555 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1139: /* within_group_clause: WITHIN GROUP_P '(' sort_clause ')'  */
#line 2751 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 27561 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1140: /* within_group_clause: %empty  */
#line 2752 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 27567 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1141: /* filter_clause: FILTER '(' WHERE a_expr ')'  */
#line 2756 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[-1].node); }
#line 27573 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1142: /* filter_clause: FILTER '(' a_expr ')'  */
#line 2757 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[-1].node); }
#line 27579 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1143: /* filter_clause: %empty  */
#line 2758 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 27585 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1144: /* export_clause: EXPORT_STATE  */
#line 2762 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.boolean) = true; }
#line 27591 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1145: /* export_clause: %empty  */
#line 2763 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 27597 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1146: /* window_clause: WINDOW window_definition_list  */
#line 2770 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 27603 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1147: /* window_clause: %empty  */
#line 2771 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 27609 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1148: /* window_definition_list: window_definition  */
#line 2775 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].windef)); }
#line 27615 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1149: /* window_definition_list: window_definition_list ',' window_definition  */
#line 2777 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].windef)); }
#line 27621 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1150: /* window_definition: ColId AS window_specification  */
#line 2782 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = (yyvsp[0].windef);
					n->name = (yyvsp[-2].str);
					(yyval.windef) = n;
				}
#line 27631 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1151: /* over_clause: OVER window_specification  */
#line 2790 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.windef) = (yyvsp[0].windef); }
#line 27637 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1152: /* over_clause: OVER ColId  */
#line 2792 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->name = (yyvsp[0].str);
					n->refname = NULL;
					n->partitionClause = NIL;
					n->orderClause = NIL;
					n->frameOptions = FRAMEOPTION_DEFAULTS;
					n->startOffset = NULL;
					n->endOffset = NULL;
					n->location = (yylsp[0]);
					(yyval.windef) = n;
				}
#line 27654 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1153: /* over_clause: %empty  */
#line 2805 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.windef) = NULL; }
#line 27660 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1154: /* window_specification: '(' opt_existing_window_name opt_partition_clause opt_sort_clause opt_frame_clause ')'  */
#line 2810 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->name = NULL;
					n->refname = (yyvsp[-4].str);
					n->partitionClause = (yyvsp[-3].list);
					n->orderClause = (yyvsp[-2].list);
					/* copy relevant fields of opt_frame_clause */
					n->frameOptions = (yyvsp[-1].windef)->frameOptions;
					n->startOffset = (yyvsp[-1].windef)->startOffset;
					n->endOffset = (yyvsp[-1].windef)->endOffset;
					n->location = (yylsp[-5]);
					(yyval.windef) = n;
				}
#line 27678 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1155: /* opt_existing_window_name: ColId  */
#line 2835 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 27684 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1156: /* opt_existing_window_name: %empty  */
#line 2836 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = NULL; }
#line 27690 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1157: /* opt_partition_clause: PARTITION BY expr_list  */
#line 2839 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.list) = (yyvsp[0].list); }
#line 27696 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1158: /* opt_partition_clause: %empty  */
#line 2840 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 27702 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1159: /* opt_frame_clause: RANGE frame_extent  */
#line 2852 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = (yyvsp[0].windef);
					n->frameOptions |= FRAMEOPTION_NONDEFAULT | FRAMEOPTION_RANGE;
					(yyval.windef) = n;
				}
#line 27712 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1160: /* opt_frame_clause: ROWS frame_extent  */
#line 2858 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = (yyvsp[0].windef);
					n->frameOptions |= FRAMEOPTION_NONDEFAULT | FRAMEOPTION_ROWS;
					(yyval.windef) = n;
				}
#line 27722 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1161: /* opt_frame_clause: %empty  */
#line 2864 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->frameOptions = FRAMEOPTION_DEFAULTS;
					n->startOffset = NULL;
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 27734 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1162: /* frame_extent: frame_bound  */
#line 2874 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = (yyvsp[0].windef);
					/* reject invalid cases */
					if (n->frameOptions & FRAMEOPTION_START_UNBOUNDED_FOLLOWING)
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame start cannot be UNBOUNDED FOLLOWING"),
								 parser_errposition((yylsp[0]))));
					if (n->frameOptions & FRAMEOPTION_START_VALUE_FOLLOWING)
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame starting from following row cannot end with current row"),
								 parser_errposition((yylsp[0]))));
					n->frameOptions |= FRAMEOPTION_END_CURRENT_ROW;
					(yyval.windef) = n;
				}
#line 27755 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1163: /* frame_extent: BETWEEN frame_bound AND frame_bound  */
#line 2891 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n1 = (yyvsp[-2].windef);
					PGWindowDef *n2 = (yyvsp[0].windef);
					/* form merged options */
					int		frameOptions = n1->frameOptions;
					/* shift converts START_ options to END_ options */
					frameOptions |= n2->frameOptions << 1;
					frameOptions |= FRAMEOPTION_BETWEEN;
					/* reject invalid cases */
					if (frameOptions & FRAMEOPTION_START_UNBOUNDED_FOLLOWING)
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame start cannot be UNBOUNDED FOLLOWING"),
								 parser_errposition((yylsp[-2]))));
					if (frameOptions & FRAMEOPTION_END_UNBOUNDED_PRECEDING)
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame end cannot be UNBOUNDED PRECEDING"),
								 parser_errposition((yylsp[0]))));
					if ((frameOptions & FRAMEOPTION_START_CURRENT_ROW) &&
						(frameOptions & FRAMEOPTION_END_VALUE_PRECEDING))
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame starting from current row cannot have preceding rows"),
								 parser_errposition((yylsp[0]))));
					if ((frameOptions & FRAMEOPTION_START_VALUE_FOLLOWING) &&
						(frameOptions & (FRAMEOPTION_END_VALUE_PRECEDING |
										 FRAMEOPTION_END_CURRENT_ROW)))
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame starting from following row cannot have preceding rows"),
								 parser_errposition((yylsp[0]))));
					n1->frameOptions = frameOptions;
					n1->endOffset = n2->startOffset;
					(yyval.windef) = n1;
				}
#line 27796 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1164: /* frame_bound: UNBOUNDED PRECEDING  */
#line 2936 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->frameOptions = FRAMEOPTION_START_UNBOUNDED_PRECEDING;
					n->startOffset = NULL;
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 27808 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1165: /* frame_bound: UNBOUNDED FOLLOWING  */
#line 2944 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->frameOptions = FRAMEOPTION_START_UNBOUNDED_FOLLOWING;
					n->startOffset = NULL;
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 27820 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1166: /* frame_bound: CURRENT_P ROW  */
#line 2952 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->frameOptions = FRAMEOPTION_START_CURRENT_ROW;
					n->startOffset = NULL;
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 27832 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1167: /* frame_bound: a_expr PRECEDING  */
#line 2960 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->frameOptions = FRAMEOPTION_START_VALUE_PRECEDING;
					n->startOffset = (yyvsp[-1].node);
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 27844 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1168: /* frame_bound: a_expr FOLLOWING  */
#line 2968 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->frameOptions = FRAMEOPTION_START_VALUE_FOLLOWING;
					n->startOffset = (yyvsp[-1].node);
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 27856 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1169: /* qualified_row: ROW '(' expr_list_opt_comma ')'  */
#line 2988 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 27862 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1170: /* qualified_row: ROW '(' ')'  */
#line 2989 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = NIL; }
#line 27868 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1171: /* row: qualified_row  */
#line 2992 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[0].list);}
#line 27874 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1172: /* row: '(' expr_list ',' a_expr ')'  */
#line 2993 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = lappend((yyvsp[-3].list), (yyvsp[-1].node)); }
#line 27880 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1173: /* dict_arg: ColIdOrString ':' a_expr  */
#line 2997 "third_party/libpg_query/grammar/statements/select.y"
                                                                                {
		PGNamedArgExpr *na = makeNode(PGNamedArgExpr);
		na->name = (yyvsp[-2].str);
		na->arg = (PGExpr *) (yyvsp[0].node);
		na->argnumber = -1;
		na->location = (yylsp[-2]);
		(yyval.node) = (PGNode *) na;
	}
#line 27893 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1174: /* dict_arguments: dict_arg  */
#line 3007 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 27899 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1175: /* dict_arguments: dict_arguments ',' dict_arg  */
#line 3008 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 27905 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1176: /* dict_arguments_opt_comma: dict_arguments  */
#line 3012 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 27911 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1177: /* dict_arguments_opt_comma: dict_arguments ','  */
#line 3013 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 27917 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1178: /* sub_type: ANY  */
#line 3017 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.subquerytype) = PG_ANY_SUBLINK; }
#line 27923 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1179: /* sub_type: SOME  */
#line 3018 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.subquerytype) = PG_ANY_SUBLINK; }
#line 27929 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1180: /* sub_type: ALL  */
#line 3019 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.subquerytype) = PG_ALL_SUBLINK; }
#line 27935 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1181: /* all_Op: Op  */
#line 3022 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 27941 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1182: /* all_Op: MathOp  */
#line 3023 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.str) = (char*) (yyvsp[0].conststr); }
#line 27947 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1183: /* MathOp: '+'  */
#line 3026 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.conststr) = "+"; }
#line 27953 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1184: /* MathOp: '-'  */
#line 3027 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "-"; }
#line 27959 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1185: /* MathOp: '*'  */
#line 3028 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "*"; }
#line 27965 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1186: /* MathOp: '/'  */
#line 3029 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "/"; }
#line 27971 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1187: /* MathOp: '%'  */
#line 3030 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "%"; }
#line 27977 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1188: /* MathOp: '^'  */
#line 3031 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "^"; }
#line 27983 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1189: /* MathOp: POWER_OF  */
#line 3032 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "**"; }
#line 27989 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1190: /* MathOp: '<'  */
#line 3033 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "<"; }
#line 27995 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1191: /* MathOp: '>'  */
#line 3034 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = ">"; }
#line 28001 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1192: /* MathOp: '='  */
#line 3035 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "="; }
#line 28007 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1193: /* MathOp: LESS_EQUALS  */
#line 3036 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.conststr) = "<="; }
#line 28013 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1194: /* MathOp: GREATER_EQUALS  */
#line 3037 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.conststr) = ">="; }
#line 28019 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1195: /* MathOp: NOT_EQUALS  */
#line 3038 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.conststr) = "<>"; }
#line 28025 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1196: /* qual_Op: Op  */
#line 3042 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 28031 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1197: /* qual_Op: OPERATOR '(' any_operator ')'  */
#line 3044 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = (yyvsp[-1].list); }
#line 28037 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1198: /* qual_all_Op: all_Op  */
#line 3049 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 28043 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1199: /* qual_all_Op: OPERATOR '(' any_operator ')'  */
#line 3051 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = (yyvsp[-1].list); }
#line 28049 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1200: /* subquery_Op: all_Op  */
#line 3056 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 28055 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1201: /* subquery_Op: OPERATOR '(' any_operator ')'  */
#line 3058 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = (yyvsp[-1].list); }
#line 28061 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1202: /* subquery_Op: LIKE  */
#line 3060 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("~~")); }
#line 28067 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1203: /* subquery_Op: NOT_LA LIKE  */
#line 3062 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("!~~")); }
#line 28073 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1204: /* subquery_Op: GLOB  */
#line 3064 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("~~~")); }
#line 28079 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1205: /* subquery_Op: NOT_LA GLOB  */
#line 3066 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("!~~~")); }
#line 28085 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1206: /* subquery_Op: ILIKE  */
#line 3068 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("~~*")); }
#line 28091 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1207: /* subquery_Op: NOT_LA ILIKE  */
#line 3070 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("!~~*")); }
#line 28097 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1208: /* any_operator: all_Op  */
#line 3084 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 28103 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1209: /* any_operator: ColId '.' any_operator  */
#line 3086 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = lcons(makeString((yyvsp[-2].str)), (yyvsp[0].list)); }
#line 28109 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1210: /* expr_list: a_expr  */
#line 3090 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 28117 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1211: /* expr_list: expr_list ',' a_expr  */
#line 3094 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 28125 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1212: /* expr_list_opt_comma: expr_list  */
#line 3101 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = (yyvsp[0].list);
				}
#line 28133 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1213: /* expr_list_opt_comma: expr_list ','  */
#line 3106 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = (yyvsp[-1].list);
				}
#line 28141 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1214: /* opt_expr_list_opt_comma: expr_list_opt_comma  */
#line 3113 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = (yyvsp[0].list);
				}
#line 28149 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1215: /* opt_expr_list_opt_comma: %empty  */
#line 3117 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = NULL;
				}
#line 28157 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1216: /* func_arg_list: func_arg_expr  */
#line 3126 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 28165 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1217: /* func_arg_list: func_arg_list ',' func_arg_expr  */
#line 3130 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 28173 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1218: /* func_arg_expr: a_expr  */
#line 3136 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (yyvsp[0].node);
				}
#line 28181 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1219: /* func_arg_expr: param_name COLON_EQUALS a_expr  */
#line 3140 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNamedArgExpr *na = makeNode(PGNamedArgExpr);
					na->name = (yyvsp[-2].str);
					na->arg = (PGExpr *) (yyvsp[0].node);
					na->argnumber = -1;		/* until determined */
					na->location = (yylsp[-2]);
					(yyval.node) = (PGNode *) na;
				}
#line 28194 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1220: /* func_arg_expr: param_name EQUALS_GREATER a_expr  */
#line 3149 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNamedArgExpr *na = makeNode(PGNamedArgExpr);
					na->name = (yyvsp[-2].str);
					na->arg = (PGExpr *) (yyvsp[0].node);
					na->argnumber = -1;		/* until determined */
					na->location = (yylsp[-2]);
					(yyval.node) = (PGNode *) na;
				}
#line 28207 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1221: /* type_list: Typename  */
#line 3159 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].typnam)); }
#line 28213 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1222: /* type_list: type_list ',' Typename  */
#line 3160 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].typnam)); }
#line 28219 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1223: /* extract_list: extract_arg FROM a_expr  */
#line 3165 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make2(makeStringConst((yyvsp[-2].str), (yylsp[-2])), (yyvsp[0].node));
				}
#line 28227 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1224: /* extract_list: %empty  */
#line 3168 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 28233 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1225: /* extract_arg: IDENT  */
#line 3175 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 28239 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1226: /* extract_arg: year_keyword  */
#line 3176 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "year"; }
#line 28245 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1227: /* extract_arg: month_keyword  */
#line 3177 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "month"; }
#line 28251 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1228: /* extract_arg: day_keyword  */
#line 3178 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "day"; }
#line 28257 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1229: /* extract_arg: hour_keyword  */
#line 3179 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "hour"; }
#line 28263 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1230: /* extract_arg: minute_keyword  */
#line 3180 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "minute"; }
#line 28269 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1231: /* extract_arg: second_keyword  */
#line 3181 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "second"; }
#line 28275 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1232: /* extract_arg: millisecond_keyword  */
#line 3182 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.str) = (char*) "millisecond"; }
#line 28281 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1233: /* extract_arg: microsecond_keyword  */
#line 3183 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.str) = (char*) "microsecond"; }
#line 28287 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1234: /* extract_arg: Sconst  */
#line 3184 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 28293 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1235: /* overlay_list: a_expr overlay_placing substr_from substr_for  */
#line 3195 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make4((yyvsp[-3].node), (yyvsp[-2].node), (yyvsp[-1].node), (yyvsp[0].node));
				}
#line 28301 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1236: /* overlay_list: a_expr overlay_placing substr_from  */
#line 3199 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make3((yyvsp[-2].node), (yyvsp[-1].node), (yyvsp[0].node));
				}
#line 28309 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1237: /* overlay_placing: PLACING a_expr  */
#line 3206 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 28315 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1238: /* position_list: b_expr IN_P b_expr  */
#line 3212 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make2((yyvsp[0].node), (yyvsp[-2].node)); }
#line 28321 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1239: /* position_list: %empty  */
#line 3213 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 28327 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1240: /* substr_list: a_expr substr_from substr_for  */
#line 3230 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make3((yyvsp[-2].node), (yyvsp[-1].node), (yyvsp[0].node));
				}
#line 28335 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1241: /* substr_list: a_expr substr_for substr_from  */
#line 3234 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* not legal per SQL99, but might as well allow it */
					(yyval.list) = list_make3((yyvsp[-2].node), (yyvsp[0].node), (yyvsp[-1].node));
				}
#line 28344 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1242: /* substr_list: a_expr substr_from  */
#line 3239 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make2((yyvsp[-1].node), (yyvsp[0].node));
				}
#line 28352 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1243: /* substr_list: a_expr substr_for  */
#line 3243 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/*
					 * Since there are no cases where this syntax allows
					 * a textual FOR value, we forcibly cast the argument
					 * to int4.  The possible matches in pg_proc are
					 * substring(text,int4) and substring(text,text),
					 * and we don't want the parser to choose the latter,
					 * which it is likely to do if the second argument
					 * is unknown or doesn't have an implicit cast to int4.
					 */
					(yyval.list) = list_make3((yyvsp[-1].node), makeIntConst(1, -1),
									makeTypeCast((yyvsp[0].node),
												 SystemTypeName("int4"), 0, -1));
				}
#line 28371 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1244: /* substr_list: expr_list  */
#line 3258 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = (yyvsp[0].list);
				}
#line 28379 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1245: /* substr_list: %empty  */
#line 3262 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = NIL; }
#line 28385 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1246: /* substr_from: FROM a_expr  */
#line 3266 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 28391 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1247: /* substr_for: FOR a_expr  */
#line 3269 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 28397 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1248: /* trim_list: a_expr FROM expr_list_opt_comma  */
#line 3272 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = lappend((yyvsp[0].list), (yyvsp[-2].node)); }
#line 28403 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1249: /* trim_list: FROM expr_list_opt_comma  */
#line 3273 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 28409 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1250: /* trim_list: expr_list_opt_comma  */
#line 3274 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 28415 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1251: /* in_expr: select_with_parens  */
#line 3278 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSubLink *n = makeNode(PGSubLink);
					n->subselect = (yyvsp[0].node);
					/* other fields will be filled later */
					(yyval.node) = (PGNode *)n;
				}
#line 28426 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1252: /* in_expr: '(' expr_list_opt_comma ')'  */
#line 3284 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (PGNode *)(yyvsp[-1].list); }
#line 28432 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1253: /* case_expr: CASE case_arg when_clause_list case_default END_P  */
#line 3295 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGCaseExpr *c = makeNode(PGCaseExpr);
					c->casetype = InvalidOid; /* not analyzed yet */
					c->arg = (PGExpr *) (yyvsp[-3].node);
					c->args = (yyvsp[-2].list);
					c->defresult = (PGExpr *) (yyvsp[-1].node);
					c->location = (yylsp[-4]);
					(yyval.node) = (PGNode *)c;
				}
#line 28446 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1254: /* when_clause_list: when_clause  */
#line 3308 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 28452 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1255: /* when_clause_list: when_clause_list when_clause  */
#line 3309 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 28458 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1256: /* when_clause: WHEN a_expr THEN a_expr  */
#line 3314 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGCaseWhen *w = makeNode(PGCaseWhen);
					w->expr = (PGExpr *) (yyvsp[-2].node);
					w->result = (PGExpr *) (yyvsp[0].node);
					w->location = (yylsp[-3]);
					(yyval.node) = (PGNode *)w;
				}
#line 28470 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1257: /* case_default: ELSE a_expr  */
#line 3324 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 28476 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1258: /* case_default: %empty  */
#line 3325 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 28482 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1259: /* case_arg: a_expr  */
#line 3328 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 28488 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1260: /* case_arg: %empty  */
#line 3329 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 28494 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1261: /* columnref: ColId  */
#line 3333 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeColumnRef((yyvsp[0].str), NIL, (yylsp[0]), yyscanner);
				}
#line 28502 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1262: /* columnref: ColId indirection  */
#line 3337 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeColumnRef((yyvsp[-1].str), (yyvsp[0].list), (yylsp[-1]), yyscanner);
				}
#line 28510 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1263: /* indirection_el: '.' attr_name  */
#line 3344 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeString((yyvsp[0].str));
				}
#line 28518 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1264: /* indirection_el: '[' a_expr ']'  */
#line 3348 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAIndices *ai = makeNode(PGAIndices);
					ai->is_slice = false;
					ai->lidx = NULL;
					ai->uidx = (yyvsp[-1].node);
					(yyval.node) = (PGNode *) ai;
				}
#line 28530 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1265: /* indirection_el: '[' opt_slice_bound ':' opt_slice_bound ']'  */
#line 3356 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAIndices *ai = makeNode(PGAIndices);
					ai->is_slice = true;
					ai->lidx = (yyvsp[-3].node);
					ai->uidx = (yyvsp[-1].node);
					(yyval.node) = (PGNode *) ai;
				}
#line 28542 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1266: /* opt_slice_bound: a_expr  */
#line 3366 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 28548 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1267: /* opt_slice_bound: %empty  */
#line 3367 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 28554 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1268: /* indirection: indirection_el  */
#line 3371 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 28560 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1269: /* indirection: indirection indirection_el  */
#line 3372 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 28566 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1270: /* opt_indirection: %empty  */
#line 3376 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 28572 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1271: /* opt_indirection: opt_indirection indirection_el  */
#line 3377 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 28578 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1274: /* opt_target_list_opt_comma: target_list_opt_comma  */
#line 3391 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 28584 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1275: /* opt_target_list_opt_comma: %empty  */
#line 3392 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = NIL; }
#line 28590 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1276: /* target_list: target_el  */
#line 3396 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].target)); }
#line 28596 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1277: /* target_list: target_list ',' target_el  */
#line 3397 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].target)); }
#line 28602 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1278: /* target_list_opt_comma: target_list  */
#line 3401 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 28608 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1279: /* target_list_opt_comma: target_list ','  */
#line 3402 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 28614 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1280: /* target_el: a_expr AS ColLabelOrString  */
#line 3406 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = (yyvsp[0].str);
					(yyval.target)->indirection = NIL;
					(yyval.target)->val = (PGNode *)(yyvsp[-2].node);
					(yyval.target)->location = (yylsp[-2]);
				}
#line 28626 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1281: /* target_el: a_expr IDENT  */
#line 3422 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = (yyvsp[0].str);
					(yyval.target)->indirection = NIL;
					(yyval.target)->val = (PGNode *)(yyvsp[-1].node);
					(yyval.target)->location = (yylsp[-1]);
				}
#line 28638 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1282: /* target_el: a_expr  */
#line 3430 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = NULL;
					(yyval.target)->indirection = NIL;
					(yyval.target)->val = (PGNode *)(yyvsp[0].node);
					(yyval.target)->location = (yylsp[0]);
				}
#line 28650 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1283: /* target_el: '*' opt_except_list opt_replace_list  */
#line 3438 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGColumnRef *n = makeNode(PGColumnRef);
					PGAStar *star = makeNode(PGAStar);
					n->fields = list_make1(star);
					n->location = (yylsp[-2]);
					star->except_list = (yyvsp[-1].list);
					star->replace_list = (yyvsp[0].list);

					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = NULL;
					(yyval.target)->indirection = NIL;
					(yyval.target)->val = (PGNode *)n;
					(yyval.target)->location = (yylsp[-2]);
				}
#line 28669 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1284: /* target_el: ColId '.' '*' opt_except_list opt_replace_list  */
#line 3453 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGColumnRef *n = makeNode(PGColumnRef);
					PGAStar *star = makeNode(PGAStar);
					n->fields = list_make1(star);
					n->location = (yylsp[-4]);
					star->relation = (yyvsp[-4].str);
					star->except_list = (yyvsp[-1].list);
					star->replace_list = (yyvsp[0].list);

					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = NULL;
					(yyval.target)->indirection = NIL;
					(yyval.target)->val = (PGNode *)n;
					(yyval.target)->location = (yylsp[-4]);
				}
#line 28689 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1285: /* except_list: EXCLUDE '(' name_list_opt_comma ')'  */
#line 3470 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 28695 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1286: /* except_list: EXCLUDE ColId  */
#line 3471 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 28701 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1287: /* opt_except_list: except_list  */
#line 3474 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 28707 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1288: /* opt_except_list: %empty  */
#line 3475 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NULL; }
#line 28713 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1289: /* replace_list_el: a_expr AS ColId  */
#line 3478 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = list_make2((yyvsp[-2].node), makeString((yyvsp[0].str))); }
#line 28719 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1290: /* replace_list: replace_list_el  */
#line 3482 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].list)); }
#line 28725 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1291: /* replace_list: replace_list ',' replace_list_el  */
#line 3483 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].list)); }
#line 28731 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1292: /* replace_list_opt_comma: replace_list  */
#line 3487 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 28737 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1293: /* replace_list_opt_comma: replace_list ','  */
#line 3488 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 28743 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1294: /* opt_replace_list: REPLACE '(' replace_list_opt_comma ')'  */
#line 3491 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 28749 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1295: /* opt_replace_list: REPLACE replace_list_el  */
#line 3492 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = list_make1((yyvsp[0].list)); }
#line 28755 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1296: /* opt_replace_list: %empty  */
#line 3493 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NULL; }
#line 28761 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1297: /* qualified_name_list: qualified_name  */
#line 3503 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].range)); }
#line 28767 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1298: /* qualified_name_list: qualified_name_list ',' qualified_name  */
#line 3504 "third_party/libpg_query/grammar/statements/select.y"
                                                                 { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].range)); }
#line 28773 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1299: /* qualified_name: ColIdOrString  */
#line 3516 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = makeRangeVar(NULL, (yyvsp[0].str), (yylsp[0]));
				}
#line 28781 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1300: /* qualified_name: ColId indirection  */
#line 3520 "third_party/libpg_query/grammar/statements/select.y"
                                {
					check_qualified_name((yyvsp[0].list), yyscanner);
					(yyval.range) = makeRangeVar(NULL, NULL, (yylsp[-1]));
					switch (list_length((yyvsp[0].list)))
					{
						case 1:
							(yyval.range)->catalogname = NULL;
							(yyval.range)->schemaname = (yyvsp[-1].str);
							(yyval.range)->relname = strVal(linitial((yyvsp[0].list)));
							break;
						case 2:
							(yyval.range)->catalogname = (yyvsp[-1].str);
							(yyval.range)->schemaname = strVal(linitial((yyvsp[0].list)));
							(yyval.range)->relname = strVal(lsecond((yyvsp[0].list)));
							break;
						case 3:
						default:
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("improper qualified name (too many dotted names): %s",
											NameListToString(lcons(makeString((yyvsp[-1].str)), (yyvsp[0].list)))),
									 parser_errposition((yylsp[-1]))));
							break;
					}
				}
#line 28811 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1301: /* name_list: name  */
#line 3548 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 28817 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1302: /* name_list: name_list ',' name  */
#line 3550 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = lappend((yyvsp[-2].list), makeString((yyvsp[0].str))); }
#line 28823 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1303: /* name_list_opt_comma: name_list  */
#line 3555 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 28829 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1304: /* name_list_opt_comma: name_list ','  */
#line 3556 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 28835 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1305: /* name: ColIdOrString  */
#line 3559 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 28841 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1306: /* attr_name: ColLabel  */
#line 3561 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 28847 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1307: /* func_name: function_name_token  */
#line 3572 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 28853 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1308: /* func_name: ColId indirection  */
#line 3575 "third_party/libpg_query/grammar/statements/select.y"
                                        {
						(yyval.list) = check_func_name(lcons(makeString((yyvsp[-1].str)), (yyvsp[0].list)),
											 yyscanner);
					}
#line 28862 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1309: /* AexprConst: Iconst  */
#line 3586 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeIntConst((yyvsp[0].ival), (yylsp[0]));
				}
#line 28870 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1310: /* AexprConst: FCONST  */
#line 3590 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeFloatConst((yyvsp[0].str), (yylsp[0]));
				}
#line 28878 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1311: /* AexprConst: Sconst opt_indirection  */
#line 3594 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].list))
					{
						PGAIndirection *n = makeNode(PGAIndirection);
						n->arg = makeStringConst((yyvsp[-1].str), (yylsp[-1]));
						n->indirection = check_indirection((yyvsp[0].list), yyscanner);
						(yyval.node) = (PGNode *) n;
					}
					else
						(yyval.node) = makeStringConst((yyvsp[-1].str), (yylsp[-1]));
				}
#line 28894 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1312: /* AexprConst: BCONST  */
#line 3606 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeBitStringConst((yyvsp[0].str), (yylsp[0]));
				}
#line 28902 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1313: /* AexprConst: XCONST  */
#line 3610 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* This is a bit constant per SQL99:
					 * Without Feature F511, "BIT data type",
					 * a <general literal> shall not be a
					 * <bit string literal> or a <hex string literal>.
					 */
					(yyval.node) = makeBitStringConst((yyvsp[0].str), (yylsp[0]));
				}
#line 28915 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1314: /* AexprConst: func_name Sconst  */
#line 3619 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* generic type 'literal' syntax */
					PGTypeName *t = makeTypeNameFromNameList((yyvsp[-1].list));
					t->location = (yylsp[-1]);
					(yyval.node) = makeStringConstCast((yyvsp[0].str), (yylsp[0]), t);
				}
#line 28926 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1315: /* AexprConst: func_name '(' func_arg_list opt_sort_clause opt_ignore_nulls ')' Sconst  */
#line 3626 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* generic syntax with a type modifier */
					PGTypeName *t = makeTypeNameFromNameList((yyvsp[-6].list));
					PGListCell *lc;

					/*
					 * We must use func_arg_list and opt_sort_clause in the
					 * production to avoid reduce/reduce conflicts, but we
					 * don't actually wish to allow PGNamedArgExpr in this
					 * context, ORDER BY, nor IGNORE NULLS.
					 */
					foreach(lc, (yyvsp[-4].list))
					{
						PGNamedArgExpr *arg = (PGNamedArgExpr *) lfirst(lc);

						if (IsA(arg, PGNamedArgExpr))
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("type modifier cannot have parameter name"),
									 parser_errposition(arg->location)));
					}
					if ((yyvsp[-3].list) != NIL)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("type modifier cannot have ORDER BY"),
									 parser_errposition((yylsp[-3]))));
					if ((yyvsp[-2].boolean) != false)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("type modifier cannot have IGNORE NULLS"),
									 parser_errposition((yylsp[-2]))));


					t->typmods = (yyvsp[-4].list);
					t->location = (yylsp[-6]);
					(yyval.node) = makeStringConstCast((yyvsp[0].str), (yylsp[0]), t);
				}
#line 28968 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1316: /* AexprConst: ConstTypename Sconst  */
#line 3664 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeStringConstCast((yyvsp[0].str), (yylsp[0]), (yyvsp[-1].typnam));
				}
#line 28976 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1317: /* AexprConst: ConstInterval '(' a_expr ')' opt_interval  */
#line 3668 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeIntervalNode((yyvsp[-2].node), (yylsp[-2]), (yyvsp[0].list));
				}
#line 28984 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1318: /* AexprConst: ConstInterval Iconst opt_interval  */
#line 3672 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeIntervalNode((yyvsp[-1].ival), (yylsp[-1]), (yyvsp[0].list));
				}
#line 28992 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1319: /* AexprConst: ConstInterval Sconst opt_interval  */
#line 3676 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeIntervalNode((yyvsp[-1].str), (yylsp[-1]), (yyvsp[0].list));
				}
#line 29000 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1320: /* AexprConst: TRUE_P  */
#line 3680 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeBoolAConst(true, (yylsp[0]));
				}
#line 29008 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1321: /* AexprConst: FALSE_P  */
#line 3684 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeBoolAConst(false, (yylsp[0]));
				}
#line 29016 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1322: /* AexprConst: NULL_P  */
#line 3688 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeNullAConst((yylsp[0]));
				}
#line 29024 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1323: /* Iconst: ICONST  */
#line 3693 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.ival) = (yyvsp[0].ival); }
#line 29030 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1324: /* Sconst: SCONST  */
#line 3694 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 29036 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1325: /* ColId: IDENT  */
#line 3710 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 29042 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1326: /* ColId: unreserved_keyword  */
#line 3711 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 29048 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1327: /* ColId: col_name_keyword  */
#line 3712 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 29054 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1328: /* ColIdOrString: ColId  */
#line 3715 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 29060 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1329: /* ColIdOrString: SCONST  */
#line 3716 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 29066 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1330: /* type_function_name: IDENT  */
#line 3722 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 29072 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1331: /* type_function_name: unreserved_keyword  */
#line 3723 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 29078 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1332: /* type_function_name: type_func_name_keyword  */
#line 3724 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 29084 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1333: /* function_name_token: IDENT  */
#line 3727 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 29090 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1334: /* function_name_token: unreserved_keyword  */
#line 3728 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 29096 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1335: /* function_name_token: func_name_keyword  */
#line 3729 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 29102 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1336: /* type_name_token: IDENT  */
#line 3732 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 29108 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1337: /* type_name_token: unreserved_keyword  */
#line 3733 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 29114 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1338: /* type_name_token: type_name_keyword  */
#line 3734 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 29120 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1339: /* any_name: ColId  */
#line 3737 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 29126 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1340: /* any_name: ColId attrs  */
#line 3738 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = lcons(makeString((yyvsp[-1].str)), (yyvsp[0].list)); }
#line 29132 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1341: /* attrs: '.' attr_name  */
#line 3742 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 29138 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1342: /* attrs: attrs '.' attr_name  */
#line 3744 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = lappend((yyvsp[-2].list), makeString((yyvsp[0].str))); }
#line 29144 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1343: /* opt_name_list: '(' name_list_opt_comma ')'  */
#line 3748 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 29150 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1344: /* opt_name_list: %empty  */
#line 3749 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 29156 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1346: /* ColLabel: IDENT  */
#line 3760 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 29162 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1347: /* ColLabel: other_keyword  */
#line 3761 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 29168 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1348: /* ColLabel: unreserved_keyword  */
#line 3762 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 29174 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1349: /* ColLabel: reserved_keyword  */
#line 3763 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 29180 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1350: /* ColLabelOrString: ColLabel  */
#line 3766 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 29186 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1351: /* ColLabelOrString: SCONST  */
#line 3767 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 29192 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1352: /* named_param: IDENT  */
#line 3770 "third_party/libpg_query/grammar/statements/select.y"
                   { (yyval.str) = (yyvsp[0].str); }
#line 29198 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1353: /* PrepareStmt: PREPARE name prep_type_clause AS PreparableStmt  */
#line 8 "third_party/libpg_query/grammar/statements/prepare.y"
                                {
					PGPrepareStmt *n = makeNode(PGPrepareStmt);
					n->name = (yyvsp[-3].str);
					n->argtypes = (yyvsp[-2].list);
					n->query = (yyvsp[0].node);
					(yyval.node) = (PGNode *) n;
				}
#line 29210 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1354: /* prep_type_clause: '(' type_list ')'  */
#line 18 "third_party/libpg_query/grammar/statements/prepare.y"
                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 29216 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1355: /* prep_type_clause: %empty  */
#line 19 "third_party/libpg_query/grammar/statements/prepare.y"
                                                                        { (yyval.list) = NIL; }
#line 29222 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1360: /* CreateSchemaStmt: CREATE_P SCHEMA qualified_name OptSchemaEltList  */
#line 8 "third_party/libpg_query/grammar/statements/create_schema.y"
                                {
					PGCreateSchemaStmt *n = makeNode(PGCreateSchemaStmt);
					if ((yyvsp[-1].range)->catalogname) {
						ereport(ERROR,
								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
								 errmsg("CREATE SCHEMA too many dots: expected \"catalog.schema\" or \"schema\""),
								 parser_errposition((yylsp[-1]))));
					}
					if ((yyvsp[-1].range)->schemaname) {
						n->catalogname = (yyvsp[-1].range)->schemaname;
						n->schemaname = (yyvsp[-1].range)->relname;
					} else {
						n->schemaname = (yyvsp[-1].range)->relname;
					}
					n->schemaElts = (yyvsp[0].list);
					n->onconflict = PG_ERROR_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 29245 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1361: /* CreateSchemaStmt: CREATE_P SCHEMA IF_P NOT EXISTS qualified_name OptSchemaEltList  */
#line 27 "third_party/libpg_query/grammar/statements/create_schema.y"
                                {
					PGCreateSchemaStmt *n = makeNode(PGCreateSchemaStmt);
					if ((yyvsp[-1].range)->catalogname) {
						ereport(ERROR,
								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
								 errmsg("CREATE SCHEMA too many dots: expected \"catalog.schema\" or \"schema\""),
								 parser_errposition((yylsp[-1]))));
					}
					if ((yyvsp[-1].range)->schemaname) {
						n->catalogname = (yyvsp[-1].range)->schemaname;
						n->schemaname = (yyvsp[-1].range)->relname;
					} else {
						n->schemaname = (yyvsp[-1].range)->relname;
					}
					if ((yyvsp[0].list) != NIL)
						ereport(ERROR,
								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
								 errmsg("CREATE SCHEMA IF NOT EXISTS cannot include schema elements"),
								 parser_errposition((yylsp[0]))));
					n->schemaElts = (yyvsp[0].list);
					n->onconflict = PG_IGNORE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 29273 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1362: /* OptSchemaEltList: OptSchemaEltList schema_stmt  */
#line 55 "third_party/libpg_query/grammar/statements/create_schema.y"
                                {
					if ((yyloc) < 0)			/* see comments for YYLLOC_DEFAULT */
						(yyloc) = (yylsp[0]);
					(yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node));
				}
#line 29283 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1363: /* OptSchemaEltList: %empty  */
#line 61 "third_party/libpg_query/grammar/statements/create_schema.y"
                                { (yyval.list) = NIL; }
#line 29289 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1368: /* IndexStmt: CREATE_P opt_unique INDEX opt_concurrently opt_index_name ON qualified_name access_method_clause '(' index_params ')' opt_reloptions where_clause  */
#line 11 "third_party/libpg_query/grammar/statements/index.y"
                                {
					PGIndexStmt *n = makeNode(PGIndexStmt);
					n->unique = (yyvsp[-11].boolean);
					n->concurrent = (yyvsp[-9].boolean);
					n->idxname = (yyvsp[-8].str);
					n->relation = (yyvsp[-6].range);
					n->accessMethod = (yyvsp[-5].str);
					n->indexParams = (yyvsp[-3].list);
					n->options = (yyvsp[-1].list);
					n->whereClause = (yyvsp[0].node);
					n->excludeOpNames = NIL;
					n->idxcomment = NULL;
					n->indexOid = InvalidOid;
					n->oldNode = InvalidOid;
					n->primary = false;
					n->isconstraint = false;
					n->deferrable = false;
					n->initdeferred = false;
					n->transformed = false;
					n->onconflict = PG_ERROR_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 29316 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1369: /* IndexStmt: CREATE_P opt_unique INDEX opt_concurrently IF_P NOT EXISTS index_name ON qualified_name access_method_clause '(' index_params ')' opt_reloptions where_clause  */
#line 36 "third_party/libpg_query/grammar/statements/index.y"
                                {
					PGIndexStmt *n = makeNode(PGIndexStmt);
					n->unique = (yyvsp[-14].boolean);
					n->concurrent = (yyvsp[-12].boolean);
					n->idxname = (yyvsp[-8].str);
					n->relation = (yyvsp[-6].range);
					n->accessMethod = (yyvsp[-5].str);
					n->indexParams = (yyvsp[-3].list);
					n->options = (yyvsp[-1].list);
					n->whereClause = (yyvsp[0].node);
					n->excludeOpNames = NIL;
					n->idxcomment = NULL;
					n->indexOid = InvalidOid;
					n->oldNode = InvalidOid;
					n->primary = false;
					n->isconstraint = false;
					n->deferrable = false;
					n->initdeferred = false;
					n->transformed = false;
					n->onconflict = PG_IGNORE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 29343 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1370: /* access_method: ColId  */
#line 62 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 29349 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1371: /* access_method_clause: USING access_method  */
#line 66 "third_party/libpg_query/grammar/statements/index.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 29355 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1372: /* access_method_clause: %empty  */
#line 67 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.str) = (char*) DEFAULT_INDEX_TYPE; }
#line 29361 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1373: /* opt_concurrently: CONCURRENTLY  */
#line 72 "third_party/libpg_query/grammar/statements/index.y"
                                                                                        { (yyval.boolean) = true; }
#line 29367 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1374: /* opt_concurrently: %empty  */
#line 73 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.boolean) = false; }
#line 29373 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1375: /* opt_index_name: index_name  */
#line 78 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 29379 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1376: /* opt_index_name: %empty  */
#line 79 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.str) = NULL; }
#line 29385 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1377: /* opt_reloptions: WITH reloptions  */
#line 83 "third_party/libpg_query/grammar/statements/index.y"
                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 29391 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1378: /* opt_reloptions: %empty  */
#line 84 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.list) = NIL; }
#line 29397 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1379: /* opt_unique: UNIQUE  */
#line 89 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.boolean) = true; }
#line 29403 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1380: /* opt_unique: %empty  */
#line 90 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.boolean) = false; }
#line 29409 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1381: /* AlterObjectSchemaStmt: ALTER TABLE relation_expr SET SCHEMA name  */
#line 8 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 29422 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1382: /* AlterObjectSchemaStmt: ALTER TABLE IF_P EXISTS relation_expr SET SCHEMA name  */
#line 17 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 29435 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1383: /* AlterObjectSchemaStmt: ALTER SEQUENCE qualified_name SET SCHEMA name  */
#line 26 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_SEQUENCE;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 29448 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1384: /* AlterObjectSchemaStmt: ALTER SEQUENCE IF_P EXISTS qualified_name SET SCHEMA name  */
#line 35 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_SEQUENCE;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 29461 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1385: /* AlterObjectSchemaStmt: ALTER VIEW qualified_name SET SCHEMA name  */
#line 44 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_VIEW;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 29474 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1386: /* AlterObjectSchemaStmt: ALTER VIEW IF_P EXISTS qualified_name SET SCHEMA name  */
#line 53 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_VIEW;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 29487 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1387: /* CheckPointStmt: FORCE CHECKPOINT opt_col_id  */
#line 6 "third_party/libpg_query/grammar/statements/checkpoint.y"
                                {
					PGCheckPointStmt *n = makeNode(PGCheckPointStmt);
					n->force = true;
					n->name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 29498 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1388: /* CheckPointStmt: CHECKPOINT opt_col_id  */
#line 13 "third_party/libpg_query/grammar/statements/checkpoint.y"
                                {
					PGCheckPointStmt *n = makeNode(PGCheckPointStmt);
					n->force = false;
					n->name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 29509 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1389: /* opt_col_id: ColId  */
#line 22 "third_party/libpg_query/grammar/statements/checkpoint.y"
                                                        { (yyval.str) = (yyvsp[0].str); }
#line 29515 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1390: /* opt_col_id: %empty  */
#line 23 "third_party/libpg_query/grammar/statements/checkpoint.y"
                                                { (yyval.str) = NULL; }
#line 29521 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1391: /* ExportStmt: EXPORT_P DATABASE Sconst copy_options  */
#line 8 "third_party/libpg_query/grammar/statements/export.y"
                                {
					PGExportStmt *n = makeNode(PGExportStmt);
					n->database = NULL;
					n->filename = (yyvsp[-1].str);
					n->options = NIL;
					if ((yyvsp[0].list)) {
						n->options = list_concat(n->options, (yyvsp[0].list));
					}
					(yyval.node) = (PGNode *)n;
				}
#line 29536 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1392: /* ExportStmt: EXPORT_P DATABASE ColId TO Sconst copy_options  */
#line 20 "third_party/libpg_query/grammar/statements/export.y"
                                {
					PGExportStmt *n = makeNode(PGExportStmt);
					n->database = (yyvsp[-3].str);
					n->filename = (yyvsp[-1].str);
					n->options = NIL;
					if ((yyvsp[0].list)) {
						n->options = list_concat(n->options, (yyvsp[0].list));
					}
					(yyval.node) = (PGNode *)n;
				}
#line 29551 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1393: /* ImportStmt: IMPORT_P DATABASE Sconst  */
#line 34 "third_party/libpg_query/grammar/statements/export.y"
                                {
					PGImportStmt *n = makeNode(PGImportStmt);
					n->filename = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 29561 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1394: /* ExplainStmt: EXPLAIN ExplainableStmt  */
#line 10 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					PGExplainStmt *n = makeNode(PGExplainStmt);
					n->query = (yyvsp[0].node);
					n->options = NIL;
					(yyval.node) = (PGNode *) n;
				}
#line 29572 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1395: /* ExplainStmt: EXPLAIN analyze_keyword opt_verbose ExplainableStmt  */
#line 17 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					PGExplainStmt *n = makeNode(PGExplainStmt);
					n->query = (yyvsp[0].node);
					n->options = list_make1(makeDefElem("analyze", NULL, (yylsp[-2])));
					if ((yyvsp[-1].boolean))
						n->options = lappend(n->options,
											 makeDefElem("verbose", NULL, (yylsp[-1])));
					(yyval.node) = (PGNode *) n;
				}
#line 29586 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1396: /* ExplainStmt: EXPLAIN VERBOSE ExplainableStmt  */
#line 27 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					PGExplainStmt *n = makeNode(PGExplainStmt);
					n->query = (yyvsp[0].node);
					n->options = list_make1(makeDefElem("verbose", NULL, (yylsp[-1])));
					(yyval.node) = (PGNode *) n;
				}
#line 29597 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1397: /* ExplainStmt: EXPLAIN '(' explain_option_list ')' ExplainableStmt  */
#line 34 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					PGExplainStmt *n = makeNode(PGExplainStmt);
					n->query = (yyvsp[0].node);
					n->options = (yyvsp[-2].list);
					(yyval.node) = (PGNode *) n;
				}
#line 29608 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1398: /* opt_verbose: VERBOSE  */
#line 44 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.boolean) = true; }
#line 29614 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1399: /* opt_verbose: %empty  */
#line 45 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.boolean) = false; }
#line 29620 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1400: /* explain_option_arg: opt_boolean_or_string  */
#line 50 "third_party/libpg_query/grammar/statements/explain.y"
                                                { (yyval.node) = (PGNode *) makeString((yyvsp[0].str)); }
#line 29626 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1401: /* explain_option_arg: NumericOnly  */
#line 51 "third_party/libpg_query/grammar/statements/explain.y"
                                                        { (yyval.node) = (PGNode *) (yyvsp[0].value); }
#line 29632 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1402: /* explain_option_arg: %empty  */
#line 52 "third_party/libpg_query/grammar/statements/explain.y"
                                                        { (yyval.node) = NULL; }
#line 29638 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1433: /* NonReservedWord: IDENT  */
#line 90 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 29644 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1434: /* NonReservedWord: unreserved_keyword  */
#line 91 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 29650 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1435: /* NonReservedWord: other_keyword  */
#line 92 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 29656 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1436: /* NonReservedWord_or_Sconst: NonReservedWord  */
#line 97 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 29662 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1437: /* NonReservedWord_or_Sconst: Sconst  */
#line 98 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 29668 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1438: /* explain_option_list: explain_option_elem  */
#line 104 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].defelt));
				}
#line 29676 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1439: /* explain_option_list: explain_option_list ',' explain_option_elem  */
#line 108 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt));
				}
#line 29684 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1440: /* analyze_keyword: ANALYZE  */
#line 115 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                {}
#line 29690 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1441: /* analyze_keyword: ANALYSE  */
#line 116 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                {}
#line 29696 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1442: /* opt_boolean_or_string: TRUE_P  */
#line 121 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.str) = (char*) "true"; }
#line 29702 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1443: /* opt_boolean_or_string: FALSE_P  */
#line 122 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.str) = (char*) "false"; }
#line 29708 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1444: /* opt_boolean_or_string: ON  */
#line 123 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.str) = (char*) "on"; }
#line 29714 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1445: /* opt_boolean_or_string: NonReservedWord_or_Sconst  */
#line 129 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 29720 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1446: /* explain_option_elem: explain_option_name explain_option_arg  */
#line 135 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[-1].str), (yyvsp[0].node), (yylsp[-1]));
				}
#line 29728 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1447: /* explain_option_name: NonReservedWord  */
#line 142 "third_party/libpg_query/grammar/statements/explain.y"
                                                        { (yyval.str) = (yyvsp[0].str); }
#line 29734 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1448: /* explain_option_name: analyze_keyword  */
#line 143 "third_party/libpg_query/grammar/statements/explain.y"
                                                        { (yyval.str) = (char*) "analyze"; }
#line 29740 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1449: /* VariableSetStmt: SET set_rest  */
#line 11 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = (yyvsp[0].vsetstmt);
					n->scope = VAR_SET_SCOPE_DEFAULT;
					(yyval.node) = (PGNode *) n;
				}
#line 29750 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1450: /* VariableSetStmt: SET LOCAL set_rest  */
#line 17 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = (yyvsp[0].vsetstmt);
					n->scope = VAR_SET_SCOPE_LOCAL;
					(yyval.node) = (PGNode *) n;
				}
#line 29760 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1451: /* VariableSetStmt: SET SESSION set_rest  */
#line 23 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = (yyvsp[0].vsetstmt);
					n->scope = VAR_SET_SCOPE_SESSION;
					(yyval.node) = (PGNode *) n;
				}
#line 29770 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1452: /* VariableSetStmt: SET GLOBAL set_rest  */
#line 29 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = (yyvsp[0].vsetstmt);
					n->scope = VAR_SET_SCOPE_GLOBAL;
					(yyval.node) = (PGNode *) n;
				}
#line 29780 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1453: /* set_rest: generic_set  */
#line 38 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                {(yyval.vsetstmt) = (yyvsp[0].vsetstmt);}
#line 29786 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1454: /* set_rest: var_name FROM CURRENT_P  */
#line 40 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_CURRENT;
					n->name = (yyvsp[-2].str);
					(yyval.vsetstmt) = n;
				}
#line 29797 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1455: /* set_rest: TIME ZONE zone_value  */
#line 48 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_VALUE;
					n->name = (char*) "timezone";
					if ((yyvsp[0].node) != NULL)
						n->args = list_make1((yyvsp[0].node));
					else
						n->kind = VAR_SET_DEFAULT;
					(yyval.vsetstmt) = n;
				}
#line 29812 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1456: /* set_rest: SCHEMA Sconst  */
#line 59 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_VALUE;
					n->name = (char*) "search_path";
					n->args = list_make1(makeStringConst((yyvsp[0].str), (yylsp[0])));
					(yyval.vsetstmt) = n;
				}
#line 29824 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1457: /* generic_set: var_name TO var_list  */
#line 71 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_VALUE;
					n->name = (yyvsp[-2].str);
					n->args = (yyvsp[0].list);
					(yyval.vsetstmt) = n;
				}
#line 29836 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1458: /* generic_set: var_name '=' var_list  */
#line 79 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_VALUE;
					n->name = (yyvsp[-2].str);
					n->args = (yyvsp[0].list);
					(yyval.vsetstmt) = n;
				}
#line 29848 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1459: /* generic_set: var_name TO DEFAULT  */
#line 87 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_DEFAULT;
					n->name = (yyvsp[-2].str);
					(yyval.vsetstmt) = n;
				}
#line 29859 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1460: /* generic_set: var_name '=' DEFAULT  */
#line 94 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_DEFAULT;
					n->name = (yyvsp[-2].str);
					(yyval.vsetstmt) = n;
				}
#line 29870 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1461: /* var_value: opt_boolean_or_string  */
#line 104 "third_party/libpg_query/grammar/statements/variable_set.y"
                                { (yyval.node) = makeStringConst((yyvsp[0].str), (yylsp[0])); }
#line 29876 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1462: /* var_value: NumericOnly  */
#line 106 "third_party/libpg_query/grammar/statements/variable_set.y"
                                { (yyval.node) = makeAConst((yyvsp[0].value), (yylsp[0])); }
#line 29882 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1463: /* zone_value: Sconst  */
#line 112 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					(yyval.node) = makeStringConst((yyvsp[0].str), (yylsp[0]));
				}
#line 29890 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1464: /* zone_value: IDENT  */
#line 116 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					(yyval.node) = makeStringConst((yyvsp[0].str), (yylsp[0]));
				}
#line 29898 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1465: /* zone_value: ConstInterval Sconst opt_interval  */
#line 120 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGTypeName *t = (yyvsp[-2].typnam);
					if ((yyvsp[0].list) != NIL)
					{
						PGAConst *n = (PGAConst *) linitial((yyvsp[0].list));
						if ((n->val.val.ival & ~(INTERVAL_MASK(HOUR) | INTERVAL_MASK(MINUTE))) != 0)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("time zone interval must be HOUR or HOUR TO MINUTE"),
									 parser_errposition((yylsp[0]))));
					}
					t->typmods = (yyvsp[0].list);
					(yyval.node) = makeStringConstCast((yyvsp[-1].str), (yylsp[-1]), t);
				}
#line 29917 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1466: /* zone_value: ConstInterval '(' Iconst ')' Sconst  */
#line 135 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGTypeName *t = (yyvsp[-4].typnam);
					t->typmods = list_make2(makeIntConst(INTERVAL_FULL_RANGE, -1),
											makeIntConst((yyvsp[-2].ival), (yylsp[-2])));
					(yyval.node) = makeStringConstCast((yyvsp[0].str), (yylsp[0]), t);
				}
#line 29928 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1467: /* zone_value: NumericOnly  */
#line 141 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                        { (yyval.node) = makeAConst((yyvsp[0].value), (yylsp[0])); }
#line 29934 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1468: /* zone_value: DEFAULT  */
#line 142 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                                { (yyval.node) = NULL; }
#line 29940 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1469: /* zone_value: LOCAL  */
#line 143 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                                { (yyval.node) = NULL; }
#line 29946 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1470: /* var_list: var_value  */
#line 147 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 29952 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1471: /* var_list: var_list ',' var_value  */
#line 148 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 29958 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1472: /* LoadStmt: LOAD file_name  */
#line 8 "third_party/libpg_query/grammar/statements/load.y"
                                {
					PGLoadStmt *n = makeNode(PGLoadStmt);
					n->filename = (yyvsp[0].str);
					n->load_type = PG_LOAD_TYPE_LOAD;
					(yyval.node) = (PGNode *)n;
				}
#line 29969 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1473: /* LoadStmt: INSTALL file_name  */
#line 14 "third_party/libpg_query/grammar/statements/load.y"
                                                  {
                    PGLoadStmt *n = makeNode(PGLoadStmt);
                    n->filename = (yyvsp[0].str);
                    n->load_type = PG_LOAD_TYPE_INSTALL;
                    (yyval.node) = (PGNode *)n;
				}
#line 29980 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1474: /* LoadStmt: FORCE INSTALL file_name  */
#line 20 "third_party/libpg_query/grammar/statements/load.y"
                                                        {
                      PGLoadStmt *n = makeNode(PGLoadStmt);
                      n->filename = (yyvsp[0].str);
                      n->load_type = PG_LOAD_TYPE_FORCE_INSTALL;
                      (yyval.node) = (PGNode *)n;
                }
#line 29991 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1475: /* file_name: Sconst  */
#line 28 "third_party/libpg_query/grammar/statements/load.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 29997 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1476: /* file_name: ColId  */
#line 29 "third_party/libpg_query/grammar/statements/load.y"
                                                { (yyval.str) = (yyvsp[0].str); }
#line 30003 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1477: /* VacuumStmt: VACUUM opt_full opt_freeze opt_verbose  */
#line 9 "third_party/libpg_query/grammar/statements/vacuum.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_VACUUM;
					if ((yyvsp[-2].boolean))
						n->options |= PG_VACOPT_FULL;
					if ((yyvsp[-1].boolean))
						n->options |= PG_VACOPT_FREEZE;
					if ((yyvsp[0].boolean))
						n->options |= PG_VACOPT_VERBOSE;
					n->relation = NULL;
					n->va_cols = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 30021 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1478: /* VacuumStmt: VACUUM opt_full opt_freeze opt_verbose qualified_name  */
#line 23 "third_party/libpg_query/grammar/statements/vacuum.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_VACUUM;
					if ((yyvsp[-3].boolean))
						n->options |= PG_VACOPT_FULL;
					if ((yyvsp[-2].boolean))
						n->options |= PG_VACOPT_FREEZE;
					if ((yyvsp[-1].boolean))
						n->options |= PG_VACOPT_VERBOSE;
					n->relation = (yyvsp[0].range);
					n->va_cols = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 30039 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1479: /* VacuumStmt: VACUUM opt_full opt_freeze opt_verbose AnalyzeStmt  */
#line 37 "third_party/libpg_query/grammar/statements/vacuum.y"
                                {
					PGVacuumStmt *n = (PGVacuumStmt *) (yyvsp[0].node);
					n->options |= PG_VACOPT_VACUUM;
					if ((yyvsp[-3].boolean))
						n->options |= PG_VACOPT_FULL;
					if ((yyvsp[-2].boolean))
						n->options |= PG_VACOPT_FREEZE;
					if ((yyvsp[-1].boolean))
						n->options |= PG_VACOPT_VERBOSE;
					(yyval.node) = (PGNode *)n;
				}
#line 30055 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1480: /* VacuumStmt: VACUUM '(' vacuum_option_list ')'  */
#line 49 "third_party/libpg_query/grammar/statements/vacuum.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_VACUUM | (yyvsp[-1].ival);
					n->relation = NULL;
					n->va_cols = NIL;
					(yyval.node) = (PGNode *) n;
				}
#line 30067 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1481: /* VacuumStmt: VACUUM '(' vacuum_option_list ')' qualified_name opt_name_list  */
#line 57 "third_party/libpg_query/grammar/statements/vacuum.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_VACUUM | (yyvsp[-3].ival);
					n->relation = (yyvsp[-1].range);
					n->va_cols = (yyvsp[0].list);
					if (n->va_cols != NIL)	/* implies analyze */
						n->options |= PG_VACOPT_ANALYZE;
					(yyval.node) = (PGNode *) n;
				}
#line 30081 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1482: /* vacuum_option_elem: analyze_keyword  */
#line 70 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                { (yyval.ival) = PG_VACOPT_ANALYZE; }
#line 30087 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1483: /* vacuum_option_elem: VERBOSE  */
#line 71 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                        { (yyval.ival) = PG_VACOPT_VERBOSE; }
#line 30093 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1484: /* vacuum_option_elem: FREEZE  */
#line 72 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                        { (yyval.ival) = PG_VACOPT_FREEZE; }
#line 30099 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1485: /* vacuum_option_elem: FULL  */
#line 73 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                        { (yyval.ival) = PG_VACOPT_FULL; }
#line 30105 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1486: /* vacuum_option_elem: IDENT  */
#line 75 "third_party/libpg_query/grammar/statements/vacuum.y"
                                {
					if (strcmp((yyvsp[0].str), "disable_page_skipping") == 0)
						(yyval.ival) = PG_VACOPT_DISABLE_PAGE_SKIPPING;
					else
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
							 errmsg("unrecognized VACUUM option \"%s\"", (yyvsp[0].str)),
									 parser_errposition((yylsp[0]))));
				}
#line 30119 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1487: /* opt_full: FULL  */
#line 87 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                                                        { (yyval.boolean) = true; }
#line 30125 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1488: /* opt_full: %empty  */
#line 88 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                                                                { (yyval.boolean) = false; }
#line 30131 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1489: /* vacuum_option_list: vacuum_option_elem  */
#line 93 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                                                                        { (yyval.ival) = (yyvsp[0].ival); }
#line 30137 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1490: /* vacuum_option_list: vacuum_option_list ',' vacuum_option_elem  */
#line 94 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                                                { (yyval.ival) = (yyvsp[-2].ival) | (yyvsp[0].ival); }
#line 30143 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1491: /* opt_freeze: FREEZE  */
#line 98 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                                                        { (yyval.boolean) = true; }
#line 30149 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1492: /* opt_freeze: %empty  */
#line 99 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                                                                { (yyval.boolean) = false; }
#line 30155 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1493: /* DeleteStmt: opt_with_clause DELETE_P FROM relation_expr_opt_alias using_clause where_or_current_clause returning_clause  */
#line 9 "third_party/libpg_query/grammar/statements/delete.y"
                                {
					PGDeleteStmt *n = makeNode(PGDeleteStmt);
					n->relation = (yyvsp[-3].range);
					n->usingClause = (yyvsp[-2].list);
					n->whereClause = (yyvsp[-1].node);
					n->returningList = (yyvsp[0].list);
					n->withClause = (yyvsp[-6].with);
					(yyval.node) = (PGNode *)n;
				}
#line 30169 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1494: /* DeleteStmt: TRUNCATE opt_table relation_expr_opt_alias  */
#line 19 "third_party/libpg_query/grammar/statements/delete.y"
                            {
					PGDeleteStmt *n = makeNode(PGDeleteStmt);
					n->relation = (yyvsp[0].range);
					n->usingClause = NULL;
					n->whereClause = NULL;
					n->returningList = NULL;
					n->withClause = NULL;
					(yyval.node) = (PGNode *)n;
			    }
#line 30183 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1495: /* relation_expr_opt_alias: relation_expr  */
#line 32 "third_party/libpg_query/grammar/statements/delete.y"
                                {
					(yyval.range) = (yyvsp[0].range);
				}
#line 30191 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1496: /* relation_expr_opt_alias: relation_expr ColId  */
#line 36 "third_party/libpg_query/grammar/statements/delete.y"
                                {
					PGAlias *alias = makeNode(PGAlias);
					alias->aliasname = (yyvsp[0].str);
					(yyvsp[-1].range)->alias = alias;
					(yyval.range) = (yyvsp[-1].range);
				}
#line 30202 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1497: /* relation_expr_opt_alias: relation_expr AS ColId  */
#line 43 "third_party/libpg_query/grammar/statements/delete.y"
                                {
					PGAlias *alias = makeNode(PGAlias);
					alias->aliasname = (yyvsp[0].str);
					(yyvsp[-2].range)->alias = alias;
					(yyval.range) = (yyvsp[-2].range);
				}
#line 30213 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1498: /* where_or_current_clause: WHERE a_expr  */
#line 53 "third_party/libpg_query/grammar/statements/delete.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 30219 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1499: /* where_or_current_clause: %empty  */
#line 54 "third_party/libpg_query/grammar/statements/delete.y"
                                                                                                { (yyval.node) = NULL; }
#line 30225 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1500: /* using_clause: USING from_list_opt_comma  */
#line 60 "third_party/libpg_query/grammar/statements/delete.y"
                                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 30231 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1501: /* using_clause: %empty  */
#line 61 "third_party/libpg_query/grammar/statements/delete.y"
                                                                                                { (yyval.list) = NIL; }
#line 30237 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1502: /* AnalyzeStmt: analyze_keyword opt_verbose  */
#line 10 "third_party/libpg_query/grammar/statements/analyze.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_ANALYZE;
					if ((yyvsp[0].boolean))
						n->options |= PG_VACOPT_VERBOSE;
					n->relation = NULL;
					n->va_cols = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 30251 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1503: /* AnalyzeStmt: analyze_keyword opt_verbose qualified_name opt_name_list  */
#line 20 "third_party/libpg_query/grammar/statements/analyze.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_ANALYZE;
					if ((yyvsp[-2].boolean))
						n->options |= PG_VACOPT_VERBOSE;
					n->relation = (yyvsp[-1].range);
					n->va_cols = (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 30265 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1504: /* AttachStmt: ATTACH opt_database Sconst opt_database_alias copy_options  */
#line 8 "third_party/libpg_query/grammar/statements/attach.y"
                                {
					PGAttachStmt *n = makeNode(PGAttachStmt);
					n->path = (yyvsp[-2].str);
					n->name = (yyvsp[-1].str);
					n->options = (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 30277 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1505: /* DetachStmt: DETACH opt_database IDENT  */
#line 19 "third_party/libpg_query/grammar/statements/attach.y"
                                {
					PGDetachStmt *n = makeNode(PGDetachStmt);
					n->missing_ok = false;
					n->db_name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 30288 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1506: /* DetachStmt: DETACH DATABASE IF_P EXISTS IDENT  */
#line 26 "third_party/libpg_query/grammar/statements/attach.y"
                                {
					PGDetachStmt *n = makeNode(PGDetachStmt);
					n->missing_ok = true;
					n->db_name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 30299 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1507: /* opt_database: DATABASE  */
#line 34 "third_party/libpg_query/grammar/statements/attach.y"
                                                                                {}
#line 30305 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1508: /* opt_database: %empty  */
#line 35 "third_party/libpg_query/grammar/statements/attach.y"
                                                                                                {}
#line 30311 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1509: /* opt_database_alias: AS ColId  */
#line 39 "third_party/libpg_query/grammar/statements/attach.y"
                                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 30317 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1510: /* opt_database_alias: %empty  */
#line 40 "third_party/libpg_query/grammar/statements/attach.y"
                                                                                                        { (yyval.str) = NULL; }
#line 30323 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1511: /* VariableResetStmt: RESET reset_rest  */
#line 2 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                                                                        { (yyval.node) = (PGNode *) (yyvsp[0].vsetstmt); }
#line 30329 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1512: /* generic_reset: var_name  */
#line 8 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_RESET;
					n->scope = VAR_SET_SCOPE_GLOBAL;
					n->name = (yyvsp[0].str);
					(yyval.vsetstmt) = n;
				}
#line 30341 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1513: /* generic_reset: ALL  */
#line 16 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_RESET_ALL;
					n->scope = VAR_SET_SCOPE_GLOBAL;
					(yyval.vsetstmt) = n;
				}
#line 30352 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1514: /* reset_rest: generic_reset  */
#line 26 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                                                                        { (yyval.vsetstmt) = (yyvsp[0].vsetstmt); }
#line 30358 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1515: /* reset_rest: TIME ZONE  */
#line 28 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_RESET;
					n->name = (char*) "timezone";
					(yyval.vsetstmt) = n;
				}
#line 30369 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1516: /* reset_rest: TRANSACTION ISOLATION LEVEL  */
#line 35 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_RESET;
					n->name = (char*) "transaction_isolation";
					(yyval.vsetstmt) = n;
				}
#line 30380 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1517: /* VariableShowStmt: show_or_describe SelectStmt  */
#line 3 "third_party/libpg_query/grammar/statements/variable_show.y"
                                                    {
				PGVariableShowSelectStmt *n = makeNode(PGVariableShowSelectStmt);
				n->stmt = (yyvsp[0].node);
				n->name = (char*) "select";
				n->is_summary = 0;
				(yyval.node) = (PGNode *) n;
			}
#line 30392 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1518: /* VariableShowStmt: SUMMARIZE SelectStmt  */
#line 10 "third_party/libpg_query/grammar/statements/variable_show.y"
                                        {
				PGVariableShowSelectStmt *n = makeNode(PGVariableShowSelectStmt);
				n->stmt = (yyvsp[0].node);
				n->name = (char*) "select";
				n->is_summary = 1;
				(yyval.node) = (PGNode *) n;
			}
#line 30404 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1519: /* VariableShowStmt: SUMMARIZE table_id  */
#line 18 "third_party/libpg_query/grammar/statements/variable_show.y"
                        {
				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
				n->name = (yyvsp[0].str);
				n->is_summary = 1;
				(yyval.node) = (PGNode *) n;
			}
#line 30415 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1520: /* VariableShowStmt: show_or_describe table_id  */
#line 25 "third_party/libpg_query/grammar/statements/variable_show.y"
                        {
				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
				n->name = (yyvsp[0].str);
				n->is_summary = 0;
				(yyval.node) = (PGNode *) n;
			}
#line 30426 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1521: /* VariableShowStmt: show_or_describe TIME ZONE  */
#line 32 "third_party/libpg_query/grammar/statements/variable_show.y"
                        {
				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
				n->name = (char*) "timezone";
				n->is_summary = 0;
				(yyval.node) = (PGNode *) n;
			}
#line 30437 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1522: /* VariableShowStmt: show_or_describe TRANSACTION ISOLATION LEVEL  */
#line 39 "third_party/libpg_query/grammar/statements/variable_show.y"
                        {
				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
				n->name = (char*) "transaction_isolation";
				n->is_summary = 0;
				(yyval.node) = (PGNode *) n;
			}
#line 30448 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1523: /* VariableShowStmt: show_or_describe ALL  */
#line 46 "third_party/libpg_query/grammar/statements/variable_show.y"
                        {
				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
				n->name = (char*) "__show_tables_expanded";
				n->is_summary = 0;
				(yyval.node) = (PGNode *) n;
			}
#line 30459 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1524: /* VariableShowStmt: show_or_describe  */
#line 53 "third_party/libpg_query/grammar/statements/variable_show.y"
                        {
				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
				n->name = (char*) "__show_tables_expanded";
				n->is_summary = 0;
				(yyval.node) = (PGNode *) n;
			}
#line 30470 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1527: /* var_name: ColId  */
#line 63 "third_party/libpg_query/grammar/statements/variable_show.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 30476 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1528: /* var_name: var_name '.' ColId  */
#line 65 "third_party/libpg_query/grammar/statements/variable_show.y"
                                { (yyval.str) = psprintf("%s.%s", (yyvsp[-2].str), (yyvsp[0].str)); }
#line 30482 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1529: /* table_id: ColId  */
#line 68 "third_party/libpg_query/grammar/statements/variable_show.y"
                                                                                { (yyval.str) = psprintf("\"%s\"", (yyvsp[0].str)); }
#line 30488 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1530: /* table_id: table_id '.' ColId  */
#line 70 "third_party/libpg_query/grammar/statements/variable_show.y"
                                { (yyval.str) = psprintf("%s.\"%s\"", (yyvsp[-2].str), (yyvsp[0].str)); }
#line 30494 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1531: /* CallStmt: CALL_P func_application  */
#line 7 "third_party/libpg_query/grammar/statements/call.y"
                                {
					PGCallStmt *n = makeNode(PGCallStmt);
					n->func = (yyvsp[0].node);
					(yyval.node) = (PGNode *) n;
				}
#line 30504 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1532: /* ViewStmt: CREATE_P OptTemp VIEW qualified_name opt_column_list opt_reloptions AS SelectStmt opt_check_option  */
#line 10 "third_party/libpg_query/grammar/statements/view.y"
                                {
					PGViewStmt *n = makeNode(PGViewStmt);
					n->view = (yyvsp[-5].range);
					n->view->relpersistence = (yyvsp[-7].ival);
					n->aliases = (yyvsp[-4].list);
					n->query = (yyvsp[-1].node);
					n->onconflict = PG_ERROR_ON_CONFLICT;
					n->options = (yyvsp[-3].list);
					n->withCheckOption = (yyvsp[0].viewcheckoption);
					(yyval.node) = (PGNode *) n;
				}
#line 30520 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1533: /* ViewStmt: CREATE_P OptTemp VIEW IF_P NOT EXISTS qualified_name opt_column_list opt_reloptions AS SelectStmt opt_check_option  */
#line 23 "third_party/libpg_query/grammar/statements/view.y"
                                {
					PGViewStmt *n = makeNode(PGViewStmt);
					n->view = (yyvsp[-5].range);
					n->view->relpersistence = (yyvsp[-10].ival);
					n->aliases = (yyvsp[-4].list);
					n->query = (yyvsp[-1].node);
					n->onconflict = PG_IGNORE_ON_CONFLICT;
					n->options = (yyvsp[-3].list);
					n->withCheckOption = (yyvsp[0].viewcheckoption);
					(yyval.node) = (PGNode *) n;
				}
#line 30536 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1534: /* ViewStmt: CREATE_P OR REPLACE OptTemp VIEW qualified_name opt_column_list opt_reloptions AS SelectStmt opt_check_option  */
#line 36 "third_party/libpg_query/grammar/statements/view.y"
                                {
					PGViewStmt *n = makeNode(PGViewStmt);
					n->view = (yyvsp[-5].range);
					n->view->relpersistence = (yyvsp[-7].ival);
					n->aliases = (yyvsp[-4].list);
					n->query = (yyvsp[-1].node);
					n->onconflict = PG_REPLACE_ON_CONFLICT;
					n->options = (yyvsp[-3].list);
					n->withCheckOption = (yyvsp[0].viewcheckoption);
					(yyval.node) = (PGNode *) n;
				}
#line 30552 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1535: /* ViewStmt: CREATE_P OptTemp RECURSIVE VIEW qualified_name '(' columnList ')' opt_reloptions AS SelectStmt opt_check_option  */
#line 49 "third_party/libpg_query/grammar/statements/view.y"
                                {
					PGViewStmt *n = makeNode(PGViewStmt);
					n->view = (yyvsp[-7].range);
					n->view->relpersistence = (yyvsp[-10].ival);
					n->aliases = (yyvsp[-5].list);
					n->query = makeRecursiveViewSelect(n->view->relname, n->aliases, (yyvsp[-1].node));
					n->onconflict = PG_ERROR_ON_CONFLICT;
					n->options = (yyvsp[-3].list);
					n->withCheckOption = (yyvsp[0].viewcheckoption);
					if (n->withCheckOption != PG_NO_CHECK_OPTION)
						ereport(ERROR,
								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
								 errmsg("WITH CHECK OPTION not supported on recursive views"),
								 parser_errposition((yylsp[0]))));
					(yyval.node) = (PGNode *) n;
				}
#line 30573 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1536: /* ViewStmt: CREATE_P OR REPLACE OptTemp RECURSIVE VIEW qualified_name '(' columnList ')' opt_reloptions AS SelectStmt opt_check_option  */
#line 67 "third_party/libpg_query/grammar/statements/view.y"
                                {
					PGViewStmt *n = makeNode(PGViewStmt);
					n->view = (yyvsp[-7].range);
					n->view->relpersistence = (yyvsp[-10].ival);
					n->aliases = (yyvsp[-5].list);
					n->query = makeRecursiveViewSelect(n->view->relname, n->aliases, (yyvsp[-1].node));
					n->onconflict = PG_REPLACE_ON_CONFLICT;
					n->options = (yyvsp[-3].list);
					n->withCheckOption = (yyvsp[0].viewcheckoption);
					if (n->withCheckOption != PG_NO_CHECK_OPTION)
						ereport(ERROR,
								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
								 errmsg("WITH CHECK OPTION not supported on recursive views"),
								 parser_errposition((yylsp[0]))));
					(yyval.node) = (PGNode *) n;
				}
#line 30594 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1537: /* opt_check_option: WITH CHECK_P OPTION  */
#line 87 "third_party/libpg_query/grammar/statements/view.y"
                                                                { (yyval.viewcheckoption) = CASCADED_CHECK_OPTION; }
#line 30600 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1538: /* opt_check_option: WITH CASCADED CHECK_P OPTION  */
#line 88 "third_party/libpg_query/grammar/statements/view.y"
                                                { (yyval.viewcheckoption) = CASCADED_CHECK_OPTION; }
#line 30606 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1539: /* opt_check_option: WITH LOCAL CHECK_P OPTION  */
#line 89 "third_party/libpg_query/grammar/statements/view.y"
                                                        { (yyval.viewcheckoption) = PG_LOCAL_CHECK_OPTION; }
#line 30612 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1540: /* opt_check_option: %empty  */
#line 90 "third_party/libpg_query/grammar/statements/view.y"
                                                                { (yyval.viewcheckoption) = PG_NO_CHECK_OPTION; }
#line 30618 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1541: /* CreateAsStmt: CREATE_P OptTemp TABLE create_as_target AS SelectStmt opt_with_data  */
#line 12 "third_party/libpg_query/grammar/statements/create_as.y"
                                {
					PGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);
					ctas->query = (yyvsp[-1].node);
					ctas->into = (yyvsp[-3].into);
					ctas->relkind = PG_OBJECT_TABLE;
					ctas->is_select_into = false;
					ctas->onconflict = PG_ERROR_ON_CONFLICT;
					/* cram additional flags into the PGIntoClause */
					(yyvsp[-3].into)->rel->relpersistence = (yyvsp[-5].ival);
					(yyvsp[-3].into)->skipData = !((yyvsp[0].boolean));
					(yyval.node) = (PGNode *) ctas;
				}
#line 30635 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1542: /* CreateAsStmt: CREATE_P OptTemp TABLE IF_P NOT EXISTS create_as_target AS SelectStmt opt_with_data  */
#line 25 "third_party/libpg_query/grammar/statements/create_as.y"
                                {
					PGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);
					ctas->query = (yyvsp[-1].node);
					ctas->into = (yyvsp[-3].into);
					ctas->relkind = PG_OBJECT_TABLE;
					ctas->is_select_into = false;
					ctas->onconflict = PG_IGNORE_ON_CONFLICT;
					/* cram additional flags into the PGIntoClause */
					(yyvsp[-3].into)->rel->relpersistence = (yyvsp[-8].ival);
					(yyvsp[-3].into)->skipData = !((yyvsp[0].boolean));
					(yyval.node) = (PGNode *) ctas;
				}
#line 30652 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1543: /* CreateAsStmt: CREATE_P OR REPLACE OptTemp TABLE create_as_target AS SelectStmt opt_with_data  */
#line 38 "third_party/libpg_query/grammar/statements/create_as.y"
                                {
					PGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);
					ctas->query = (yyvsp[-1].node);
					ctas->into = (yyvsp[-3].into);
					ctas->relkind = PG_OBJECT_TABLE;
					ctas->is_select_into = false;
					ctas->onconflict = PG_REPLACE_ON_CONFLICT;
					/* cram additional flags into the PGIntoClause */
					(yyvsp[-3].into)->rel->relpersistence = (yyvsp[-5].ival);
					(yyvsp[-3].into)->skipData = !((yyvsp[0].boolean));
					(yyval.node) = (PGNode *) ctas;
				}
#line 30669 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1544: /* opt_with_data: WITH DATA_P  */
#line 54 "third_party/libpg_query/grammar/statements/create_as.y"
                                                                                                { (yyval.boolean) = true; }
#line 30675 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1545: /* opt_with_data: WITH NO DATA_P  */
#line 55 "third_party/libpg_query/grammar/statements/create_as.y"
                                                                                        { (yyval.boolean) = false; }
#line 30681 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1546: /* opt_with_data: %empty  */
#line 56 "third_party/libpg_query/grammar/statements/create_as.y"
                                                                                                { (yyval.boolean) = true; }
#line 30687 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1547: /* create_as_target: qualified_name opt_column_list OptWith OnCommitOption  */
#line 62 "third_party/libpg_query/grammar/statements/create_as.y"
                                {
					(yyval.into) = makeNode(PGIntoClause);
					(yyval.into)->rel = (yyvsp[-3].range);
					(yyval.into)->colNames = (yyvsp[-2].list);
					(yyval.into)->options = (yyvsp[-1].list);
					(yyval.into)->onCommit = (yyvsp[0].oncommit);
					(yyval.into)->viewQuery = NULL;
					(yyval.into)->skipData = false;		/* might get changed later */
				}
#line 30701 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;


#line 30705 "third_party/libpg_query/grammar/grammar_out.cpp"

      default: break;
    }
  /* User semantic actions sometimes alter yychar, and that requires
     that yytoken be updated with the new translation.  We take the
     approach of translating immediately before every use of yytoken.
     One alternative is translating here after every semantic action,
     but that translation would be missed if the semantic action invokes
     YYABORT, YYACCEPT, or YYERROR immediately after altering yychar or
     if it invokes YYBACKUP.  In the case of YYABORT or YYACCEPT, an
     incorrect destructor might then be invoked immediately.  In the
     case of YYERROR or YYBACKUP, subsequent parser actions might lead
     to an incorrect destructor call or verbose syntax error message
     before the lookahead is translated.  */
  YY_SYMBOL_PRINT ("-> $$ =", YY_CAST (yysymbol_kind_t, yyr1[yyn]), &yyval, &yyloc);

  YYPOPSTACK (yylen);
  yylen = 0;

  *++yyvsp = yyval;
  *++yylsp = yyloc;

  /* Now 'shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */
  {
    const int yylhs = yyr1[yyn] - YYNTOKENS;
    const int yyi = yypgoto[yylhs] + *yyssp;
    yystate = (0 <= yyi && yyi <= YYLAST && yycheck[yyi] == *yyssp
               ? yytable[yyi]
               : yydefgoto[yylhs]);
  }

  goto yynewstate;


/*--------------------------------------.
| yyerrlab -- here on detecting error.  |
`--------------------------------------*/
yyerrlab:
  /* Make sure we have latest lookahead translation.  See comments at
     user semantic actions for why this is necessary.  */
  yytoken = yychar == YYEMPTY ? YYSYMBOL_YYEMPTY : YYTRANSLATE (yychar);
  /* If not already recovering from an error, report this error.  */
  if (!yyerrstatus)
    {
      ++yynerrs;
      yyerror (&yylloc, yyscanner, YY_("syntax error"));
    }

  yyerror_range[1] = yylloc;
  if (yyerrstatus == 3)
    {
      /* If just tried and failed to reuse lookahead token after an
         error, discard it.  */

      if (yychar <= YYEOF)
        {
          /* Return failure if at end of input.  */
          if (yychar == YYEOF)
            YYABORT;
        }
      else
        {
          yydestruct ("Error: discarding",
                      yytoken, &yylval, &yylloc, yyscanner);
          yychar = YYEMPTY;
        }
    }

  /* Else will try to reuse lookahead token after shifting the error
     token.  */
  goto yyerrlab1;


/*---------------------------------------------------.
| yyerrorlab -- error raised explicitly by YYERROR.  |
`---------------------------------------------------*/
yyerrorlab:
  /* Pacify compilers when the user code never invokes YYERROR and the
     label yyerrorlab therefore never appears in user code.  */
  if (0)
    YYERROR;
  ++yynerrs;

  /* Do not reclaim the symbols of the rule whose action triggered
     this YYERROR.  */
  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);
  yystate = *yyssp;
  goto yyerrlab1;


/*-------------------------------------------------------------.
| yyerrlab1 -- common code for both syntax error and YYERROR.  |
`-------------------------------------------------------------*/
yyerrlab1:
  yyerrstatus = 3;      /* Each real token shifted decrements this.  */

  /* Pop stack until we find a state that shifts the error token.  */
  for (;;)
    {
      yyn = yypact[yystate];
      if (!yypact_value_is_default (yyn))
        {
          yyn += YYSYMBOL_YYerror;
          if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYSYMBOL_YYerror)
            {
              yyn = yytable[yyn];
              if (0 < yyn)
                break;
            }
        }

      /* Pop the current state because it cannot handle the error token.  */
      if (yyssp == yyss)
        YYABORT;

      yyerror_range[1] = *yylsp;
      yydestruct ("Error: popping",
                  YY_ACCESSING_SYMBOL (yystate), yyvsp, yylsp, yyscanner);
      YYPOPSTACK (1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
    }

  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  *++yyvsp = yylval;
  YY_IGNORE_MAYBE_UNINITIALIZED_END

  yyerror_range[2] = yylloc;
  ++yylsp;
  YYLLOC_DEFAULT (*yylsp, yyerror_range, 2);

  /* Shift the error token.  */
  YY_SYMBOL_PRINT ("Shifting", YY_ACCESSING_SYMBOL (yyn), yyvsp, yylsp);

  yystate = yyn;
  goto yynewstate;


/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/
yyacceptlab:
  yyresult = 0;
  goto yyreturnlab;


/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/
yyabortlab:
  yyresult = 1;
  goto yyreturnlab;


/*-----------------------------------------------------------.
| yyexhaustedlab -- YYNOMEM (memory exhaustion) comes here.  |
`-----------------------------------------------------------*/
yyexhaustedlab:
  yyerror (&yylloc, yyscanner, YY_("memory exhausted"));
  yyresult = 2;
  goto yyreturnlab;


/*----------------------------------------------------------.
| yyreturnlab -- parsing is finished, clean up and return.  |
`----------------------------------------------------------*/
yyreturnlab:
  if (yychar != YYEMPTY)
    {
      /* Make sure we have latest lookahead translation.  See comments at
         user semantic actions for why this is necessary.  */
      yytoken = YYTRANSLATE (yychar);
      yydestruct ("Cleanup: discarding lookahead",
                  yytoken, &yylval, &yylloc, yyscanner);
    }
  /* Do not reclaim the symbols of the rule whose action triggered
     this YYABORT or YYACCEPT.  */
  YYPOPSTACK (yylen);
  YY_STACK_PRINT (yyss, yyssp);
  while (yyssp != yyss)
    {
      yydestruct ("Cleanup: popping",
                  YY_ACCESSING_SYMBOL (+*yyssp), yyvsp, yylsp, yyscanner);
      YYPOPSTACK (1);
    }
#ifndef yyoverflow
  if (yyss != yyssa)
    YYSTACK_FREE (yyss);
#endif

  return yyresult;
}

#line 85 "third_party/libpg_query/grammar/statements/create_as.y"


#line 1 "third_party/libpg_query/grammar/grammar.cpp"
/*
 * The signature of this function is required by bison.  However, we
 * ignore the passed yylloc and instead use the last token position
 * available from the scanner.
 */
static void
base_yyerror(YYLTYPE *yylloc, core_yyscan_t yyscanner, const char *msg)
{
	parser_yyerror(msg);
}

static PGRawStmt *
makeRawStmt(PGNode *stmt, int stmt_location)
{
	PGRawStmt    *rs = makeNode(PGRawStmt);

	rs->stmt = stmt;
	rs->stmt_location = stmt_location;
	rs->stmt_len = 0;			/* might get changed later */
	return rs;
}

/* Adjust a PGRawStmt to reflect that it doesn't run to the end of the string */
static void
updateRawStmtEnd(PGRawStmt *rs, int end_location)
{
	/*
	 * If we already set the length, don't change it.  This is for situations
	 * like "select foo ;; select bar" where the same statement will be last
	 * in the string for more than one semicolon.
	 */
	if (rs->stmt_len > 0)
		return;

	/* OK, update length of PGRawStmt */
	rs->stmt_len = end_location - rs->stmt_location;
}

static PGNode *
makeColumnRef(char *colname, PGList *indirection,
			  int location, core_yyscan_t yyscanner)
{
	/*
	 * Generate a PGColumnRef node, with an PGAIndirection node added if there
	 * is any subscripting in the specified indirection list.  However,
	 * any field selection at the start of the indirection list must be
	 * transposed into the "fields" part of the PGColumnRef node.
	 */
	PGColumnRef  *c = makeNode(PGColumnRef);
	int		nfields = 0;
	PGListCell *l;

	c->location = location;
	foreach(l, indirection)
	{
		if (IsA(lfirst(l), PGAIndices))
		{
			PGAIndirection *i = makeNode(PGAIndirection);

			if (nfields == 0)
			{
				/* easy case - all indirection goes to PGAIndirection */
				c->fields = list_make1(makeString(colname));
				i->indirection = check_indirection(indirection, yyscanner);
			}
			else
			{
				/* got to split the list in two */
				i->indirection = check_indirection(list_copy_tail(indirection,
																  nfields),
												   yyscanner);
				indirection = list_truncate(indirection, nfields);
				c->fields = lcons(makeString(colname), indirection);
			}
			i->arg = (PGNode *) c;
			return (PGNode *) i;
		}
		else if (IsA(lfirst(l), PGAStar))
		{
			/* We only allow '*' at the end of a PGColumnRef */
			if (lnext(l) != NULL)
				parser_yyerror("improper use of \"*\"");
		}
		nfields++;
	}
	/* No subscripting, so all indirection gets added to field list */
	c->fields = lcons(makeString(colname), indirection);
	return (PGNode *) c;
}

static PGNode *
makeTypeCast(PGNode *arg, PGTypeName *tpname, int trycast, int location)
{
	PGTypeCast *n = makeNode(PGTypeCast);
	n->arg = arg;
	n->typeName = tpname;
	n->tryCast = trycast;
	n->location = location;
	return (PGNode *) n;
}

static PGNode *
makeStringConst(char *str, int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGString;
	n->val.val.str = str;
	n->location = location;

	return (PGNode *)n;
}

static PGNode *
makeStringConstCast(char *str, int location, PGTypeName *tpname)
{
	PGNode *s = makeStringConst(str, location);

	return makeTypeCast(s, tpname, 0, -1);
}

static PGNode *
makeIntervalNode(char *str, int location, PGList *typmods) {
	PGIntervalConstant *n = makeNode(PGIntervalConstant);

	n->val_type = T_PGString;
	n->sval = str;
	n->location = location;
	n->typmods = typmods;

	return (PGNode *)n;

}

static PGNode *
makeIntervalNode(int val, int location, PGList *typmods) {
	PGIntervalConstant *n = makeNode(PGIntervalConstant);

	n->val_type = T_PGInteger;
	n->ival = val;
	n->location = location;
	n->typmods = typmods;

	return (PGNode *)n;
}

static PGNode *
makeIntervalNode(PGNode *arg, int location, PGList *typmods) {
	PGIntervalConstant *n = makeNode(PGIntervalConstant);

	n->val_type = T_PGAExpr;
	n->eval = arg;
	n->location = location;
	n->typmods = typmods;

	return (PGNode *)n;
}

static PGNode *
makeSampleSize(PGValue *sample_size, bool is_percentage) {
	PGSampleSize *n = makeNode(PGSampleSize);

	n->sample_size = *sample_size;
	n->is_percentage = is_percentage;

	return (PGNode *)n;
}

static PGNode *
makeSampleOptions(PGNode *sample_size, char *method, int *seed, int location) {
	PGSampleOptions *n = makeNode(PGSampleOptions);

	n->sample_size = sample_size;
	n->method = method;
	if (seed) {
		n->has_seed = true;
		n->seed = *seed;
	}
	n->location = location;

	return (PGNode *)n;
}

/* makeLimitPercent()
 * Make limit percent node
 */
static PGNode *
makeLimitPercent(PGNode *limit_percent) {
	PGLimitPercent *n = makeNode(PGLimitPercent);

	n->limit_percent = limit_percent;

	return (PGNode *)n;
}

static PGNode *
makeIntConst(int val, int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGInteger;
	n->val.val.ival = val;
	n->location = location;

	return (PGNode *)n;
}

static PGNode *
makeFloatConst(char *str, int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGFloat;
	n->val.val.str = str;
	n->location = location;

	return (PGNode *)n;
}

static PGNode *
makeBitStringConst(char *str, int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGBitString;
	n->val.val.str = str;
	n->location = location;

	return (PGNode *)n;
}

static PGNode *
makeNullAConst(int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGNull;
	n->location = location;

	return (PGNode *)n;
}

static PGNode *
makeAConst(PGValue *v, int location)
{
	PGNode *n;

	switch (v->type)
	{
		case T_PGFloat:
			n = makeFloatConst(v->val.str, location);
			break;

		case T_PGInteger:
			n = makeIntConst(v->val.ival, location);
			break;

		case T_PGString:
		default:
			n = makeStringConst(v->val.str, location);
			break;
	}

	return n;
}

/* makeBoolAConst()
 * Create an PGAConst string node and put it inside a boolean cast.
 */
static PGNode *
makeBoolAConst(bool state, int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGString;
	n->val.val.str = (state ? (char*) "t" : (char*) "f");
	n->location = location;

	return makeTypeCast((PGNode *)n, SystemTypeName("bool"), 0, -1);
}

/* check_qualified_name --- check the result of qualified_name production
 *
 * It's easiest to let the grammar production for qualified_name allow
 * subscripts and '*', which we then must reject here.
 */
static void
check_qualified_name(PGList *names, core_yyscan_t yyscanner)
{
	PGListCell   *i;

	foreach(i, names)
	{
		if (!IsA(lfirst(i), PGString))
			parser_yyerror("syntax error");
	}
}

/* check_func_name --- check the result of func_name production
 *
 * It's easiest to let the grammar production for func_name allow subscripts
 * and '*', which we then must reject here.
 */
static PGList *
check_func_name(PGList *names, core_yyscan_t yyscanner)
{
	PGListCell   *i;

	foreach(i, names)
	{
		if (!IsA(lfirst(i), PGString))
			parser_yyerror("syntax error");
	}
	return names;
}

/* check_indirection --- check the result of indirection production
 *
 * We only allow '*' at the end of the list, but it's hard to enforce that
 * in the grammar, so do it here.
 */
static PGList *
check_indirection(PGList *indirection, core_yyscan_t yyscanner)
{
	PGListCell *l;

	foreach(l, indirection)
	{
		if (IsA(lfirst(l), PGAStar))
		{
			if (lnext(l) != NULL)
				parser_yyerror("improper use of \"*\"");
		}
	}
	return indirection;
}

/* makeParamRef
 * Creates a new PGParamRef node
 */
static PGNode* makeParamRef(int number, int location)
{
	PGParamRef *p = makeNode(PGParamRef);
	p->number = number;
	p->location = location;
	p->name = NULL;
	return (PGNode *) p;
}

/* makeNamedParamRef
 * Creates a new PGParamRef node
 */
static PGNode* makeNamedParamRef(char *name, int location)
{
	PGParamRef *p = (PGParamRef *)makeParamRef(0, location);
	p->name = name;
	return (PGNode *) p;
}


/* insertSelectOptions()
 * Insert ORDER BY, etc into an already-constructed SelectStmt.
 *
 * This routine is just to avoid duplicating code in PGSelectStmt productions.
 */
static void
insertSelectOptions(PGSelectStmt *stmt,
					PGList *sortClause, PGList *lockingClause,
					PGNode *limitOffset, PGNode *limitCount,
					PGWithClause *withClause,
					core_yyscan_t yyscanner)
{
	Assert(IsA(stmt, PGSelectStmt));

	/*
	 * Tests here are to reject constructs like
	 *	(SELECT foo ORDER BY bar) ORDER BY baz
	 */
	if (sortClause)
	{
		if (stmt->sortClause)
			ereport(ERROR,
					(errcode(PG_ERRCODE_SYNTAX_ERROR),
					 errmsg("multiple ORDER BY clauses not allowed"),
					 parser_errposition(exprLocation((PGNode *) sortClause))));
		stmt->sortClause = sortClause;
	}
	/* We can handle multiple locking clauses, though */
	stmt->lockingClause = list_concat(stmt->lockingClause, lockingClause);
	if (limitOffset)
	{
		if (stmt->limitOffset)
			ereport(ERROR,
					(errcode(PG_ERRCODE_SYNTAX_ERROR),
					 errmsg("multiple OFFSET clauses not allowed"),
					 parser_errposition(exprLocation(limitOffset))));
		stmt->limitOffset = limitOffset;
	}
	if (limitCount)
	{
		if (stmt->limitCount)
			ereport(ERROR,
					(errcode(PG_ERRCODE_SYNTAX_ERROR),
					 errmsg("multiple LIMIT clauses not allowed"),
					 parser_errposition(exprLocation(limitCount))));
		stmt->limitCount = limitCount;
	}
	if (withClause)
	{
		if (stmt->withClause)
			ereport(ERROR,
					(errcode(PG_ERRCODE_SYNTAX_ERROR),
					 errmsg("multiple WITH clauses not allowed"),
					 parser_errposition(exprLocation((PGNode *) withClause))));
		stmt->withClause = withClause;
	}
}

static PGNode *
makeSetOp(PGSetOperation op, bool all, PGNode *larg, PGNode *rarg)
{
	PGSelectStmt *n = makeNode(PGSelectStmt);

	n->op = op;
	n->all = all;
	n->larg = (PGSelectStmt *) larg;
	n->rarg = (PGSelectStmt *) rarg;
	return (PGNode *) n;
}

/* SystemFuncName()
 * Build a properly-qualified reference to a built-in function.
 */
PGList *
SystemFuncName(const char *name)
{
	return list_make2(makeString(DEFAULT_SCHEMA), makeString(name));
}

/* SystemTypeName()
 * Build a properly-qualified reference to a built-in type.
 *
 * typmod is defaulted, but may be changed afterwards by caller.
 * Likewise for the location.
 */
PGTypeName *
SystemTypeName(const char *name)
{
	return makeTypeNameFromNameList(list_make2(makeString(DEFAULT_SCHEMA),
											   makeString(name)));
}

/* doNegate()
 * Handle negation of a numeric constant.
 *
 * Formerly, we did this here because the optimizer couldn't cope with
 * indexquals that looked like "var = -4" --- it wants "var = const"
 * and a unary minus operator applied to a constant didn't qualify.
 * As of Postgres 7.0, that problem doesn't exist anymore because there
 * is a constant-subexpression simplifier in the optimizer.  However,
 * there's still a good reason for doing this here, which is that we can
 * postpone committing to a particular internal representation for simple
 * negative constants.	It's better to leave "-123.456" in string form
 * until we know what the desired type is.
 */
static PGNode *
doNegate(PGNode *n, int location)
{
	if (IsA(n, PGAConst))
	{
		PGAConst *con = (PGAConst *)n;

		/* report the constant's location as that of the '-' sign */
		con->location = location;

		if (con->val.type == T_PGInteger)
		{
			con->val.val.ival = -con->val.val.ival;
			return n;
		}
		if (con->val.type == T_PGFloat)
		{
			doNegateFloat(&con->val);
			return n;
		}
	}

	return (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "-", NULL, n, location);
}

static void
doNegateFloat(PGValue *v)
{
	char   *oldval = v->val.str;

	Assert(IsA(v, PGFloat));
	if (*oldval == '+')
		oldval++;
	if (*oldval == '-')
		v->val.str = oldval+1;	/* just strip the '-' */
	else
		v->val.str = psprintf("-%s", oldval);
}

static PGNode *
makeAndExpr(PGNode *lexpr, PGNode *rexpr, int location)
{
	PGNode	   *lexp = lexpr;

	/* Look through AEXPR_PAREN nodes so they don't affect flattening */
	while (IsA(lexp, PGAExpr) &&
		   ((PGAExpr *) lexp)->kind == AEXPR_PAREN)
		lexp = ((PGAExpr *) lexp)->lexpr;
	/* Flatten "a AND b AND c ..." to a single PGBoolExpr on sight */
	if (IsA(lexp, PGBoolExpr))
	{
		PGBoolExpr *blexpr = (PGBoolExpr *) lexp;

		if (blexpr->boolop == PG_AND_EXPR)
		{
			blexpr->args = lappend(blexpr->args, rexpr);
			return (PGNode *) blexpr;
		}
	}
	return (PGNode *) makeBoolExpr(PG_AND_EXPR, list_make2(lexpr, rexpr), location);
}

static PGNode *
makeOrExpr(PGNode *lexpr, PGNode *rexpr, int location)
{
	PGNode	   *lexp = lexpr;

	/* Look through AEXPR_PAREN nodes so they don't affect flattening */
	while (IsA(lexp, PGAExpr) &&
		   ((PGAExpr *) lexp)->kind == AEXPR_PAREN)
		lexp = ((PGAExpr *) lexp)->lexpr;
	/* Flatten "a OR b OR c ..." to a single PGBoolExpr on sight */
	if (IsA(lexp, PGBoolExpr))
	{
		PGBoolExpr *blexpr = (PGBoolExpr *) lexp;

		if (blexpr->boolop == PG_OR_EXPR)
		{
			blexpr->args = lappend(blexpr->args, rexpr);
			return (PGNode *) blexpr;
		}
	}
	return (PGNode *) makeBoolExpr(PG_OR_EXPR, list_make2(lexpr, rexpr), location);
}

static PGNode *
makeNotExpr(PGNode *expr, int location)
{
	return (PGNode *) makeBoolExpr(PG_NOT_EXPR, list_make1(expr), location);
}

static PGNode *
makeSQLValueFunction(PGSQLValueFunctionOp op, int32_t typmod, int location)
{
	PGSQLValueFunction *svf = makeNode(PGSQLValueFunction);

	svf->op = op;
	/* svf->type will be filled during parse analysis */
	svf->typmod = typmod;
	svf->location = location;
	return (PGNode *) svf;
}

/* Separate PGConstraint nodes from COLLATE clauses in a */
static void
SplitColQualList(PGList *qualList,
				 PGList **constraintList, PGCollateClause **collClause,
				 core_yyscan_t yyscanner)
{
	PGListCell   *cell;
	PGListCell   *prev;
	PGListCell   *next;

	*collClause = NULL;
	prev = NULL;
	for (cell = list_head(qualList); cell; cell = next)
	{
		PGNode   *n = (PGNode *) lfirst(cell);

		next = lnext(cell);
		if (IsA(n, PGConstraint))
		{
			/* keep it in list */
			prev = cell;
			continue;
		}
		if (IsA(n, PGCollateClause))
		{
			PGCollateClause *c = (PGCollateClause *) n;

			if (*collClause)
				ereport(ERROR,
						(errcode(PG_ERRCODE_SYNTAX_ERROR),
						 errmsg("multiple COLLATE clauses not allowed"),
						 parser_errposition(c->location)));
			*collClause = c;
		}
		else
			elog(ERROR, "unexpected node type %d", (int) n->type);
		/* remove non-Constraint nodes from qualList */
		qualList = list_delete_cell(qualList, cell, prev);
	}
	*constraintList = qualList;
}

/*
 * Process result of ConstraintAttributeSpec, and set appropriate bool flags
 * in the output command node.  Pass NULL for any flags the particular
 * command doesn't support.
 */
static void
processCASbits(int cas_bits, int location, const char *constrType,
			   bool *deferrable, bool *initdeferred, bool *not_valid,
			   bool *no_inherit, core_yyscan_t yyscanner)
{
	/* defaults */
	if (deferrable)
		*deferrable = false;
	if (initdeferred)
		*initdeferred = false;
	if (not_valid)
		*not_valid = false;

	if (cas_bits & (CAS_DEFERRABLE | CAS_INITIALLY_DEFERRED))
	{
		if (deferrable)
			*deferrable = true;
		else
			ereport(ERROR,
					(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
					 /* translator: %s is CHECK, UNIQUE, or similar */
					 errmsg("%s constraints cannot be marked DEFERRABLE",
							constrType),
					 parser_errposition(location)));
	}

	if (cas_bits & CAS_INITIALLY_DEFERRED)
	{
		if (initdeferred)
			*initdeferred = true;
		else
			ereport(ERROR,
					(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
					 /* translator: %s is CHECK, UNIQUE, or similar */
					 errmsg("%s constraints cannot be marked DEFERRABLE",
							constrType),
					 parser_errposition(location)));
	}

	if (cas_bits & CAS_NOT_VALID)
	{
		if (not_valid)
			*not_valid = true;
		else
			ereport(ERROR,
					(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
					 /* translator: %s is CHECK, UNIQUE, or similar */
					 errmsg("%s constraints cannot be marked NOT VALID",
							constrType),
					 parser_errposition(location)));
	}

	if (cas_bits & CAS_NO_INHERIT)
	{
		if (no_inherit)
			*no_inherit = true;
		else
			ereport(ERROR,
					(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
					 /* translator: %s is CHECK, UNIQUE, or similar */
					 errmsg("%s constraints cannot be marked NO INHERIT",
							constrType),
					 parser_errposition(location)));
	}
}

/*----------
 * Recursive view transformation
 *
 * Convert
 *
 *     CREATE RECURSIVE VIEW relname (aliases) AS query
 *
 * to
 *
 *     CREATE VIEW relname (aliases) AS
 *         WITH RECURSIVE relname (aliases) AS (query)
 *         SELECT aliases FROM relname
 *
 * Actually, just the WITH ... part, which is then inserted into the original
 * view as the query.
 * ----------
 */
static PGNode *
makeRecursiveViewSelect(char *relname, PGList *aliases, PGNode *query)
{
	PGSelectStmt *s = makeNode(PGSelectStmt);
	PGWithClause *w = makeNode(PGWithClause);
	PGCommonTableExpr *cte = makeNode(PGCommonTableExpr);
	PGList	   *tl = NIL;
	PGListCell   *lc;

	/* create common table expression */
	cte->ctename = relname;
	cte->aliascolnames = aliases;
	cte->ctequery = query;
	cte->location = -1;

	/* create WITH clause and attach CTE */
	w->recursive = true;
	w->ctes = list_make1(cte);
	w->location = -1;

	/* create target list for the new SELECT from the alias list of the
	 * recursive view specification */
	foreach (lc, aliases)
	{
		PGResTarget *rt = makeNode(PGResTarget);

		rt->name = NULL;
		rt->indirection = NIL;
		rt->val = makeColumnRef(strVal(lfirst(lc)), NIL, -1, 0);
		rt->location = -1;

		tl = lappend(tl, rt);
	}

	/* create new SELECT combining WITH clause, target list, and fake FROM
	 * clause */
	s->withClause = w;
	s->targetList = tl;
	s->fromClause = list_make1(makeRangeVar(NULL, relname, -1));

	return (PGNode *) s;
}

/* parser_init()
 * Initialize to parse one query string
 */
void
parser_init(base_yy_extra_type *yyext)
{
	yyext->parsetree = NIL;		/* in case grammar forgets to set it */
}

#undef yyparse
#undef yylex
#undef yyerror
#undef yylval
#undef yychar
#undef yydebug
#undef yynerrs
#undef yylloc

} // namespace duckdb_libpgquery
