/* A Bison parser, made by GNU Bison 3.8.2.  */

/* Bison implementation for Yacc-like parsers in C

   Copyright (C) 1984, 1989-1990, 2000-2015, 2018-2021 Free Software Foundation,
   Inc.

   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <https://www.gnu.org/licenses/>.  */

/* As a special exception, you may create a larger work that contains
   part or all of the Bison parser skeleton and distribute that work
   under terms of your choice, so long as that work isn't itself a
   parser generator using the skeleton or a modified version thereof
   as a parser skeleton.  Alternatively, if you modify or redistribute
   the parser skeleton itself, you may (at your option) remove this
   special exception, which will cause the skeleton and the resulting
   Bison output files to be licensed under the GNU General Public
   License without this special exception.

   This special exception was added by the Free Software Foundation in
   version 2.2 of Bison.  */

/* C LALR(1) parser skeleton written by Richard Stallman, by
   simplifying the original so-called "semantic" parser.  */

/* DO NOT RELY ON FEATURES THAT ARE NOT DOCUMENTED in the manual,
   especially those whose name start with YY_ or yy_.  They are
   private implementation details that can be changed or removed.  */

/* All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.  */

/* Identify Bison output, and Bison version.  */
#define YYBISON 30802

/* Bison version string.  */
#define YYBISON_VERSION "3.8.2"

/* Skeleton name.  */
#define YYSKELETON_NAME "yacc.c"

/* Pure parsers.  */
#define YYPURE 1

/* Push parsers.  */
#define YYPUSH 0

/* Pull parsers.  */
#define YYPULL 1


/* Substitute the variable and function names.  */
#define yyparse         base_yyparse
#define yylex           base_yylex
#define yyerror         base_yyerror
#define yydebug         base_yydebug
#define yynerrs         base_yynerrs

/* First part of user prologue.  */
#line 1 "third_party/libpg_query/grammar/grammar.y.tmp"

#line 1 "third_party/libpg_query/grammar/grammar.hpp"
/*#define YYDEBUG 1*/
/*-------------------------------------------------------------------------
 *
 * gram.y
 *	  POSTGRESQL BISON rules/actions
 *
 * Portions Copyright (c) 1996-2017, PostgreSQL Global Development PGGroup
 * Portions Copyright (c) 1994, Regents of the University of California
 *
 *
 * IDENTIFICATION
 *	  src/backend/parser/gram.y
 *
 * HISTORY
 *	  AUTHOR			DATE			MAJOR EVENT
 *	  Andrew Yu			Sept, 1994		POSTQUEL to SQL conversion
 *	  Andrew Yu			Oct, 1994		lispy code conversion
 *
 * NOTES
 *	  CAPITALS are used to represent terminal symbols.
 *	  non-capitals are used to represent non-terminals.
 *
 *	  In general, nothing in this file should initiate database accesses
 *	  nor depend on changeable state (such as SET variables).  If you do
 *	  database accesses, your code will fail when we have aborted the
 *	  current transaction and are just parsing commands to find the next
 *	  ROLLBACK or COMMIT.  If you make use of SET variables, then you
 *	  will do the wrong thing in multi-query strings like this:
 *			SET constraint_exclusion TO off; SELECT * FROM foo;
 *	  because the entire string is parsed by gram.y before the SET gets
 *	  executed.  Anything that depends on the database or changeable state
 *	  should be handled during parse analysis so that it happens at the
 *	  right time not the wrong time.
 *
 * WARNINGS
 *	  If you use a list, make sure the datum is a node so that the printing
 *	  routines work.
 *
 *	  Sometimes we assign constants to makeStrings. Make sure we don't free
 *	  those.
 *
 *-------------------------------------------------------------------------
 */
#include "pg_functions.hpp"
#include <string.h>

#include <ctype.h>
#include <limits.h>

#include "nodes/makefuncs.hpp"
#include "nodes/nodeFuncs.hpp"
#include "parser/gramparse.hpp"
#include "parser/parser.hpp"
#include "utils/datetime.hpp"

namespace duckdb_libpgquery {
#define DEFAULT_SCHEMA "main"

/*
 * Location tracking support --- simpler than bison's default, since we only
 * want to track the start position not the end position of each nonterminal.
 */
#define YYLLOC_DEFAULT(Current, Rhs, N) \
	do { \
		if ((N) > 0) \
			(Current) = (Rhs)[1]; \
		else \
			(Current) = (-1); \
	} while (0)

/*
 * The above macro assigns -1 (unknown) as the parse location of any
 * nonterminal that was reduced from an empty rule, or whose leftmost
 * component was reduced from an empty rule.  This is problematic
 * for nonterminals defined like
 *		OptFooList: / * EMPTY * / { ... } | OptFooList Foo { ... } ;
 * because we'll set -1 as the location during the first reduction and then
 * copy it during each subsequent reduction, leaving us with -1 for the
 * location even when the list is not empty.  To fix that, do this in the
 * action for the nonempty rule(s):
 *		if (@$ < 0) @$ = @2;
 * (Although we have many nonterminals that follow this pattern, we only
 * bother with fixing @$ like this when the nonterminal's parse location
 * is actually referenced in some rule.)
 *
 * A cleaner answer would be to make YYLLOC_DEFAULT scan all the Rhs
 * locations until it's found one that's not -1.  Then we'd get a correct
 * location for any nonterminal that isn't entirely empty.  But this way
 * would add overhead to every rule reduction, and so far there's not been
 * a compelling reason to pay that overhead.
 */

/*
 * Bison doesn't allocate anything that needs to live across parser calls,
 * so we can easily have it use palloc instead of malloc.  This prevents
 * memory leaks if we error out during parsing.  Note this only works with
 * bison >= 2.0.  However, in bison 1.875 the default is to use alloca()
 * if possible, so there's not really much problem anyhow, at least if
 * you're building with gcc.
 */
#define YYMALLOC palloc
#define YYFREE   pfree
#define YYINITDEPTH 1000

/* yields an integer bitmask of these flags: */
#define CAS_NOT_DEFERRABLE			0x01
#define CAS_DEFERRABLE				0x02
#define CAS_INITIALLY_IMMEDIATE		0x04
#define CAS_INITIALLY_DEFERRED		0x08
#define CAS_NOT_VALID				0x10
#define CAS_NO_INHERIT				0x20


#define parser_yyerror(msg)  scanner_yyerror(msg, yyscanner)
#define parser_errposition(pos)  scanner_errposition(pos, yyscanner)

static void base_yyerror(YYLTYPE *yylloc, core_yyscan_t yyscanner,
						 const char *msg);
static PGRawStmt *makeRawStmt(PGNode *stmt, int stmt_location);
static void updateRawStmtEnd(PGRawStmt *rs, int end_location);
static PGNode *makeColumnRef(char *colname, PGList *indirection,
						   int location, core_yyscan_t yyscanner);
static PGNode *makeTypeCast(PGNode *arg, PGTypeName *tpname, int trycast, int location);
static PGNode *makeStringConst(char *str, int location);
static PGNode *makeStringConstCast(char *str, int location, PGTypeName *tpname);
static PGNode *makeIntervalNode(char *str, int location, PGList *typmods);
static PGNode *makeIntervalNode(int val, int location, PGList *typmods);
static PGNode *makeIntervalNode(PGNode *arg, int location, PGList *typmods);
static PGNode *makeSampleSize(PGValue *sample_size, bool is_percentage);
static PGNode *makeSampleOptions(PGNode *sample_size, char *method, int *seed, int location);
static PGNode *makeIntConst(int val, int location);
static PGNode *makeFloatConst(char *str, int location);
static PGNode *makeBitStringConst(char *str, int location);
static PGNode *makeNullAConst(int location);
static PGNode *makeAConst(PGValue *v, int location);
static PGNode *makeBoolAConst(bool state, int location);
static PGNode *makeParamRef(int number, int location);
static PGNode *makeNamedParamRef(char* name, int location);
static void check_qualified_name(PGList *names, core_yyscan_t yyscanner);
static PGList *check_func_name(PGList *names, core_yyscan_t yyscanner);
static PGList *check_indirection(PGList *indirection, core_yyscan_t yyscanner);
static void insertSelectOptions(PGSelectStmt *stmt,
								PGList *sortClause, PGList *lockingClause,
								PGNode *limitOffset, PGNode *limitCount,
								PGWithClause *withClause,
								core_yyscan_t yyscanner);
static PGNode *makeSetOp(PGSetOperation op, bool all, PGNode *larg, PGNode *rarg);
static PGNode *doNegate(PGNode *n, int location);
static void doNegateFloat(PGValue *v);
static PGNode *makeAndExpr(PGNode *lexpr, PGNode *rexpr, int location);
static PGNode *makeOrExpr(PGNode *lexpr, PGNode *rexpr, int location);
static PGNode *makeNotExpr(PGNode *expr, int location);
static void SplitColQualList(PGList *qualList,
							 PGList **constraintList, PGCollateClause **collClause,
							 core_yyscan_t yyscanner);
static void processCASbits(int cas_bits, int location, const char *constrType,
			   bool *deferrable, bool *initdeferred, bool *not_valid,
			   bool *no_inherit, core_yyscan_t yyscanner);
static PGNode *makeRecursiveViewSelect(char *relname, PGList *aliases, PGNode *query);
static PGNode *makeLimitPercent(PGNode *limit_percent);


#line 241 "third_party/libpg_query/grammar/grammar_out.cpp"

# ifndef YY_CAST
#  ifdef __cplusplus
#   define YY_CAST(Type, Val) static_cast<Type> (Val)
#   define YY_REINTERPRET_CAST(Type, Val) reinterpret_cast<Type> (Val)
#  else
#   define YY_CAST(Type, Val) ((Type) (Val))
#   define YY_REINTERPRET_CAST(Type, Val) ((Type) (Val))
#  endif
# endif
# ifndef YY_NULLPTR
#  if defined __cplusplus
#   if 201103L <= __cplusplus
#    define YY_NULLPTR nullptr
#   else
#    define YY_NULLPTR 0
#   endif
#  else
#   define YY_NULLPTR ((void*)0)
#  endif
# endif

#include "include/parser/gram.hpp"
/* Symbol kind.  */
enum yysymbol_kind_t
{
  YYSYMBOL_YYEMPTY = -2,
  YYSYMBOL_YYEOF = 0,                      /* "end of file"  */
  YYSYMBOL_YYerror = 1,                    /* error  */
  YYSYMBOL_YYUNDEF = 2,                    /* "invalid token"  */
  YYSYMBOL_IDENT = 3,                      /* IDENT  */
  YYSYMBOL_FCONST = 4,                     /* FCONST  */
  YYSYMBOL_SCONST = 5,                     /* SCONST  */
  YYSYMBOL_BCONST = 6,                     /* BCONST  */
  YYSYMBOL_XCONST = 7,                     /* XCONST  */
  YYSYMBOL_Op = 8,                         /* Op  */
  YYSYMBOL_ICONST = 9,                     /* ICONST  */
  YYSYMBOL_PARAM = 10,                     /* PARAM  */
  YYSYMBOL_TYPECAST = 11,                  /* TYPECAST  */
  YYSYMBOL_DOT_DOT = 12,                   /* DOT_DOT  */
  YYSYMBOL_COLON_EQUALS = 13,              /* COLON_EQUALS  */
  YYSYMBOL_EQUALS_GREATER = 14,            /* EQUALS_GREATER  */
  YYSYMBOL_INTEGER_DIVISION = 15,          /* INTEGER_DIVISION  */
  YYSYMBOL_POWER_OF = 16,                  /* POWER_OF  */
  YYSYMBOL_LAMBDA_ARROW = 17,              /* LAMBDA_ARROW  */
  YYSYMBOL_DOUBLE_ARROW = 18,              /* DOUBLE_ARROW  */
  YYSYMBOL_LESS_EQUALS = 19,               /* LESS_EQUALS  */
  YYSYMBOL_GREATER_EQUALS = 20,            /* GREATER_EQUALS  */
  YYSYMBOL_NOT_EQUALS = 21,                /* NOT_EQUALS  */
  YYSYMBOL_ABORT_P = 22,                   /* ABORT_P  */
  YYSYMBOL_ABSOLUTE_P = 23,                /* ABSOLUTE_P  */
  YYSYMBOL_ACCESS = 24,                    /* ACCESS  */
  YYSYMBOL_ACTION = 25,                    /* ACTION  */
  YYSYMBOL_ACYCLIC = 26,                   /* ACYCLIC  */
  YYSYMBOL_ADD_P = 27,                     /* ADD_P  */
  YYSYMBOL_ADMIN = 28,                     /* ADMIN  */
  YYSYMBOL_AFTER = 29,                     /* AFTER  */
  YYSYMBOL_AGGREGATE = 30,                 /* AGGREGATE  */
  YYSYMBOL_ALL = 31,                       /* ALL  */
  YYSYMBOL_ALSO = 32,                      /* ALSO  */
  YYSYMBOL_ALTER = 33,                     /* ALTER  */
  YYSYMBOL_ALWAYS = 34,                    /* ALWAYS  */
  YYSYMBOL_ANALYSE = 35,                   /* ANALYSE  */
  YYSYMBOL_ANALYZE = 36,                   /* ANALYZE  */
  YYSYMBOL_AND = 37,                       /* AND  */
  YYSYMBOL_ANTI = 38,                      /* ANTI  */
  YYSYMBOL_ANY = 39,                       /* ANY  */
  YYSYMBOL_ARE = 40,                       /* ARE  */
  YYSYMBOL_ARRAY = 41,                     /* ARRAY  */
  YYSYMBOL_AS = 42,                        /* AS  */
  YYSYMBOL_ASC_P = 43,                     /* ASC_P  */
  YYSYMBOL_ASOF = 44,                      /* ASOF  */
  YYSYMBOL_ASSERTION = 45,                 /* ASSERTION  */
  YYSYMBOL_ASSIGNMENT = 46,                /* ASSIGNMENT  */
  YYSYMBOL_ASYMMETRIC = 47,                /* ASYMMETRIC  */
  YYSYMBOL_AT = 48,                        /* AT  */
  YYSYMBOL_ATTACH = 49,                    /* ATTACH  */
  YYSYMBOL_ATTRIBUTE = 50,                 /* ATTRIBUTE  */
  YYSYMBOL_AUTHORIZATION = 51,             /* AUTHORIZATION  */
  YYSYMBOL_BACKWARD = 52,                  /* BACKWARD  */
  YYSYMBOL_BEFORE = 53,                    /* BEFORE  */
  YYSYMBOL_BEGIN_P = 54,                   /* BEGIN_P  */
  YYSYMBOL_BETWEEN = 55,                   /* BETWEEN  */
  YYSYMBOL_BIGINT = 56,                    /* BIGINT  */
  YYSYMBOL_BINARY = 57,                    /* BINARY  */
  YYSYMBOL_BIT = 58,                       /* BIT  */
  YYSYMBOL_BOOLEAN_P = 59,                 /* BOOLEAN_P  */
  YYSYMBOL_BOTH = 60,                      /* BOTH  */
  YYSYMBOL_BY = 61,                        /* BY  */
  YYSYMBOL_CACHE = 62,                     /* CACHE  */
  YYSYMBOL_CALL_P = 63,                    /* CALL_P  */
  YYSYMBOL_CALLED = 64,                    /* CALLED  */
  YYSYMBOL_CASCADE = 65,                   /* CASCADE  */
  YYSYMBOL_CASCADED = 66,                  /* CASCADED  */
  YYSYMBOL_CASE = 67,                      /* CASE  */
  YYSYMBOL_CAST = 68,                      /* CAST  */
  YYSYMBOL_CATALOG_P = 69,                 /* CATALOG_P  */
  YYSYMBOL_CENTURIES_P = 70,               /* CENTURIES_P  */
  YYSYMBOL_CENTURY_P = 71,                 /* CENTURY_P  */
  YYSYMBOL_CHAIN = 72,                     /* CHAIN  */
  YYSYMBOL_CHAR_P = 73,                    /* CHAR_P  */
  YYSYMBOL_CHARACTER = 74,                 /* CHARACTER  */
  YYSYMBOL_CHARACTERISTICS = 75,           /* CHARACTERISTICS  */
  YYSYMBOL_CHECK_P = 76,                   /* CHECK_P  */
  YYSYMBOL_CHECKPOINT = 77,                /* CHECKPOINT  */
  YYSYMBOL_CLASS = 78,                     /* CLASS  */
  YYSYMBOL_CLOSE = 79,                     /* CLOSE  */
  YYSYMBOL_CLUSTER = 80,                   /* CLUSTER  */
  YYSYMBOL_COALESCE = 81,                  /* COALESCE  */
  YYSYMBOL_COLLATE = 82,                   /* COLLATE  */
  YYSYMBOL_COLLATION = 83,                 /* COLLATION  */
  YYSYMBOL_COLUMN = 84,                    /* COLUMN  */
  YYSYMBOL_COLUMNS = 85,                   /* COLUMNS  */
  YYSYMBOL_COMMENT = 86,                   /* COMMENT  */
  YYSYMBOL_COMMENTS = 87,                  /* COMMENTS  */
  YYSYMBOL_COMMIT = 88,                    /* COMMIT  */
  YYSYMBOL_COMMITTED = 89,                 /* COMMITTED  */
  YYSYMBOL_COMPRESSION = 90,               /* COMPRESSION  */
  YYSYMBOL_CONCURRENTLY = 91,              /* CONCURRENTLY  */
  YYSYMBOL_CONFIGURATION = 92,             /* CONFIGURATION  */
  YYSYMBOL_CONFLICT = 93,                  /* CONFLICT  */
  YYSYMBOL_CONNECTION = 94,                /* CONNECTION  */
  YYSYMBOL_CONSTRAINT = 95,                /* CONSTRAINT  */
  YYSYMBOL_CONSTRAINTS = 96,               /* CONSTRAINTS  */
  YYSYMBOL_CONTENT_P = 97,                 /* CONTENT_P  */
  YYSYMBOL_CONTINUE_P = 98,                /* CONTINUE_P  */
  YYSYMBOL_CONVERSION_P = 99,              /* CONVERSION_P  */
  YYSYMBOL_COPY = 100,                     /* COPY  */
  YYSYMBOL_COST = 101,                     /* COST  */
  YYSYMBOL_CREATE_P = 102,                 /* CREATE_P  */
  YYSYMBOL_CROSS = 103,                    /* CROSS  */
  YYSYMBOL_CSV = 104,                      /* CSV  */
  YYSYMBOL_CUBE = 105,                     /* CUBE  */
  YYSYMBOL_CURRENT_P = 106,                /* CURRENT_P  */
  YYSYMBOL_CURSOR = 107,                   /* CURSOR  */
  YYSYMBOL_CYCLE = 108,                    /* CYCLE  */
  YYSYMBOL_DATA_P = 109,                   /* DATA_P  */
  YYSYMBOL_DATABASE = 110,                 /* DATABASE  */
  YYSYMBOL_DAY_P = 111,                    /* DAY_P  */
  YYSYMBOL_DAYS_P = 112,                   /* DAYS_P  */
  YYSYMBOL_DEALLOCATE = 113,               /* DEALLOCATE  */
  YYSYMBOL_DEC = 114,                      /* DEC  */
  YYSYMBOL_DECADE_P = 115,                 /* DECADE_P  */
  YYSYMBOL_DECADES_P = 116,                /* DECADES_P  */
  YYSYMBOL_DECIMAL_P = 117,                /* DECIMAL_P  */
  YYSYMBOL_DECLARE = 118,                  /* DECLARE  */
  YYSYMBOL_DEFAULT = 119,                  /* DEFAULT  */
  YYSYMBOL_DEFAULTS = 120,                 /* DEFAULTS  */
  YYSYMBOL_DEFERRABLE = 121,               /* DEFERRABLE  */
  YYSYMBOL_DEFERRED = 122,                 /* DEFERRED  */
  YYSYMBOL_DEFINER = 123,                  /* DEFINER  */
  YYSYMBOL_DELETE_P = 124,                 /* DELETE_P  */
  YYSYMBOL_DELIMITER = 125,                /* DELIMITER  */
  YYSYMBOL_DELIMITERS = 126,               /* DELIMITERS  */
  YYSYMBOL_DEPENDS = 127,                  /* DEPENDS  */
  YYSYMBOL_DESC_P = 128,                   /* DESC_P  */
  YYSYMBOL_DESCRIBE = 129,                 /* DESCRIBE  */
  YYSYMBOL_DESTINATION = 130,              /* DESTINATION  */
  YYSYMBOL_DETACH = 131,                   /* DETACH  */
  YYSYMBOL_DICTIONARY = 132,               /* DICTIONARY  */
  YYSYMBOL_DISABLE_P = 133,                /* DISABLE_P  */
  YYSYMBOL_DISCARD = 134,                  /* DISCARD  */
  YYSYMBOL_DISTINCT = 135,                 /* DISTINCT  */
  YYSYMBOL_DO = 136,                       /* DO  */
  YYSYMBOL_DOCUMENT_P = 137,               /* DOCUMENT_P  */
  YYSYMBOL_DOMAIN_P = 138,                 /* DOMAIN_P  */
  YYSYMBOL_DOUBLE_P = 139,                 /* DOUBLE_P  */
  YYSYMBOL_DROP = 140,                     /* DROP  */
  YYSYMBOL_EACH = 141,                     /* EACH  */
  YYSYMBOL_EDGE = 142,                     /* EDGE  */
  YYSYMBOL_ELEMENT_ID = 143,               /* ELEMENT_ID  */
  YYSYMBOL_ELSE = 144,                     /* ELSE  */
  YYSYMBOL_ENABLE_P = 145,                 /* ENABLE_P  */
  YYSYMBOL_ENCODING = 146,                 /* ENCODING  */
  YYSYMBOL_ENCRYPTED = 147,                /* ENCRYPTED  */
  YYSYMBOL_END_P = 148,                    /* END_P  */
  YYSYMBOL_ENUM_P = 149,                   /* ENUM_P  */
  YYSYMBOL_ESCAPE = 150,                   /* ESCAPE  */
  YYSYMBOL_EVENT = 151,                    /* EVENT  */
  YYSYMBOL_EXCEPT = 152,                   /* EXCEPT  */
  YYSYMBOL_EXCLUDE = 153,                  /* EXCLUDE  */
  YYSYMBOL_EXCLUDING = 154,                /* EXCLUDING  */
  YYSYMBOL_EXCLUSIVE = 155,                /* EXCLUSIVE  */
  YYSYMBOL_EXECUTE = 156,                  /* EXECUTE  */
  YYSYMBOL_EXISTS = 157,                   /* EXISTS  */
  YYSYMBOL_EXPLAIN = 158,                  /* EXPLAIN  */
  YYSYMBOL_EXPORT_P = 159,                 /* EXPORT_P  */
  YYSYMBOL_EXPORT_STATE = 160,             /* EXPORT_STATE  */
  YYSYMBOL_EXTENSION = 161,                /* EXTENSION  */
  YYSYMBOL_EXTERNAL = 162,                 /* EXTERNAL  */
  YYSYMBOL_EXTRACT = 163,                  /* EXTRACT  */
  YYSYMBOL_FALSE_P = 164,                  /* FALSE_P  */
  YYSYMBOL_FAMILY = 165,                   /* FAMILY  */
  YYSYMBOL_FETCH = 166,                    /* FETCH  */
  YYSYMBOL_FILTER = 167,                   /* FILTER  */
  YYSYMBOL_FIRST_P = 168,                  /* FIRST_P  */
  YYSYMBOL_FLOAT_P = 169,                  /* FLOAT_P  */
  YYSYMBOL_FOLLOWING = 170,                /* FOLLOWING  */
  YYSYMBOL_FOR = 171,                      /* FOR  */
  YYSYMBOL_FORCE = 172,                    /* FORCE  */
  YYSYMBOL_FOREIGN = 173,                  /* FOREIGN  */
  YYSYMBOL_FORWARD = 174,                  /* FORWARD  */
  YYSYMBOL_FREEZE = 175,                   /* FREEZE  */
  YYSYMBOL_FROM = 176,                     /* FROM  */
  YYSYMBOL_FULL = 177,                     /* FULL  */
  YYSYMBOL_FUNCTION = 178,                 /* FUNCTION  */
  YYSYMBOL_FUNCTIONS = 179,                /* FUNCTIONS  */
  YYSYMBOL_GENERATED = 180,                /* GENERATED  */
  YYSYMBOL_GLOB = 181,                     /* GLOB  */
  YYSYMBOL_GLOBAL = 182,                   /* GLOBAL  */
  YYSYMBOL_GRANT = 183,                    /* GRANT  */
  YYSYMBOL_GRANTED = 184,                  /* GRANTED  */
  YYSYMBOL_GRAPH = 185,                    /* GRAPH  */
  YYSYMBOL_GRAPH_TABLE = 186,              /* GRAPH_TABLE  */
  YYSYMBOL_GROUP_P = 187,                  /* GROUP_P  */
  YYSYMBOL_GROUPING = 188,                 /* GROUPING  */
  YYSYMBOL_GROUPING_ID = 189,              /* GROUPING_ID  */
  YYSYMBOL_GROUPS = 190,                   /* GROUPS  */
  YYSYMBOL_HANDLER = 191,                  /* HANDLER  */
  YYSYMBOL_HAVING = 192,                   /* HAVING  */
  YYSYMBOL_HEADER_P = 193,                 /* HEADER_P  */
  YYSYMBOL_HOLD = 194,                     /* HOLD  */
  YYSYMBOL_HOUR_P = 195,                   /* HOUR_P  */
  YYSYMBOL_HOURS_P = 196,                  /* HOURS_P  */
  YYSYMBOL_IDENTITY_P = 197,               /* IDENTITY_P  */
  YYSYMBOL_IF_P = 198,                     /* IF_P  */
  YYSYMBOL_IGNORE_P = 199,                 /* IGNORE_P  */
  YYSYMBOL_ILIKE = 200,                    /* ILIKE  */
  YYSYMBOL_IMMEDIATE = 201,                /* IMMEDIATE  */
  YYSYMBOL_IMMUTABLE = 202,                /* IMMUTABLE  */
  YYSYMBOL_IMPLICIT_P = 203,               /* IMPLICIT_P  */
  YYSYMBOL_IMPORT_P = 204,                 /* IMPORT_P  */
  YYSYMBOL_IN_P = 205,                     /* IN_P  */
  YYSYMBOL_INCLUDE_P = 206,                /* INCLUDE_P  */
  YYSYMBOL_INCLUDING = 207,                /* INCLUDING  */
  YYSYMBOL_INCREMENT = 208,                /* INCREMENT  */
  YYSYMBOL_INDEX = 209,                    /* INDEX  */
  YYSYMBOL_INDEXES = 210,                  /* INDEXES  */
  YYSYMBOL_INHERIT = 211,                  /* INHERIT  */
  YYSYMBOL_INHERITS = 212,                 /* INHERITS  */
  YYSYMBOL_INITIALLY = 213,                /* INITIALLY  */
  YYSYMBOL_INLINE_P = 214,                 /* INLINE_P  */
  YYSYMBOL_INNER_P = 215,                  /* INNER_P  */
  YYSYMBOL_INOUT = 216,                    /* INOUT  */
  YYSYMBOL_INPUT_P = 217,                  /* INPUT_P  */
  YYSYMBOL_INSENSITIVE = 218,              /* INSENSITIVE  */
  YYSYMBOL_INSERT = 219,                   /* INSERT  */
  YYSYMBOL_INSTALL = 220,                  /* INSTALL  */
  YYSYMBOL_INSTEAD = 221,                  /* INSTEAD  */
  YYSYMBOL_INT_P = 222,                    /* INT_P  */
  YYSYMBOL_INTEGER = 223,                  /* INTEGER  */
  YYSYMBOL_INTERSECT = 224,                /* INTERSECT  */
  YYSYMBOL_INTERVAL = 225,                 /* INTERVAL  */
  YYSYMBOL_INTO = 226,                     /* INTO  */
  YYSYMBOL_INVOKER = 227,                  /* INVOKER  */
  YYSYMBOL_IS = 228,                       /* IS  */
  YYSYMBOL_ISNULL = 229,                   /* ISNULL  */
  YYSYMBOL_ISOLATION = 230,                /* ISOLATION  */
  YYSYMBOL_JOIN = 231,                     /* JOIN  */
  YYSYMBOL_JSON = 232,                     /* JSON  */
  YYSYMBOL_KEEP = 233,                     /* KEEP  */
  YYSYMBOL_KEY = 234,                      /* KEY  */
  YYSYMBOL_LABEL = 235,                    /* LABEL  */
  YYSYMBOL_LANGUAGE = 236,                 /* LANGUAGE  */
  YYSYMBOL_LARGE_P = 237,                  /* LARGE_P  */
  YYSYMBOL_LAST_P = 238,                   /* LAST_P  */
  YYSYMBOL_LATERAL_P = 239,                /* LATERAL_P  */
  YYSYMBOL_LEADING = 240,                  /* LEADING  */
  YYSYMBOL_LEAKPROOF = 241,                /* LEAKPROOF  */
  YYSYMBOL_LEFT = 242,                     /* LEFT  */
  YYSYMBOL_LEVEL = 243,                    /* LEVEL  */
  YYSYMBOL_LIKE = 244,                     /* LIKE  */
  YYSYMBOL_LIMIT = 245,                    /* LIMIT  */
  YYSYMBOL_LISTEN = 246,                   /* LISTEN  */
  YYSYMBOL_LOAD = 247,                     /* LOAD  */
  YYSYMBOL_LOCAL = 248,                    /* LOCAL  */
  YYSYMBOL_LOCATION = 249,                 /* LOCATION  */
  YYSYMBOL_LOCK_P = 250,                   /* LOCK_P  */
  YYSYMBOL_LOCKED = 251,                   /* LOCKED  */
  YYSYMBOL_LOGGED = 252,                   /* LOGGED  */
  YYSYMBOL_MACRO = 253,                    /* MACRO  */
  YYSYMBOL_MAP = 254,                      /* MAP  */
  YYSYMBOL_MAPPING = 255,                  /* MAPPING  */
  YYSYMBOL_MATCH = 256,                    /* MATCH  */
  YYSYMBOL_MATERIALIZED = 257,             /* MATERIALIZED  */
  YYSYMBOL_MAXVALUE = 258,                 /* MAXVALUE  */
  YYSYMBOL_METHOD = 259,                   /* METHOD  */
  YYSYMBOL_MICROSECOND_P = 260,            /* MICROSECOND_P  */
  YYSYMBOL_MICROSECONDS_P = 261,           /* MICROSECONDS_P  */
  YYSYMBOL_MILLENNIA_P = 262,              /* MILLENNIA_P  */
  YYSYMBOL_MILLENNIUM_P = 263,             /* MILLENNIUM_P  */
  YYSYMBOL_MILLISECOND_P = 264,            /* MILLISECOND_P  */
  YYSYMBOL_MILLISECONDS_P = 265,           /* MILLISECONDS_P  */
  YYSYMBOL_MINUTE_P = 266,                 /* MINUTE_P  */
  YYSYMBOL_MINUTES_P = 267,                /* MINUTES_P  */
  YYSYMBOL_MINVALUE = 268,                 /* MINVALUE  */
  YYSYMBOL_MODE = 269,                     /* MODE  */
  YYSYMBOL_MONTH_P = 270,                  /* MONTH_P  */
  YYSYMBOL_MONTHS_P = 271,                 /* MONTHS_P  */
  YYSYMBOL_MOVE = 272,                     /* MOVE  */
  YYSYMBOL_NAME_P = 273,                   /* NAME_P  */
  YYSYMBOL_NAMES = 274,                    /* NAMES  */
  YYSYMBOL_NATIONAL = 275,                 /* NATIONAL  */
  YYSYMBOL_NATURAL = 276,                  /* NATURAL  */
  YYSYMBOL_NCHAR = 277,                    /* NCHAR  */
  YYSYMBOL_NEW = 278,                      /* NEW  */
  YYSYMBOL_NEXT = 279,                     /* NEXT  */
  YYSYMBOL_NO = 280,                       /* NO  */
  YYSYMBOL_NODE = 281,                     /* NODE  */
  YYSYMBOL_NONE = 282,                     /* NONE  */
  YYSYMBOL_NOT = 283,                      /* NOT  */
  YYSYMBOL_NOTHING = 284,                  /* NOTHING  */
  YYSYMBOL_NOTIFY = 285,                   /* NOTIFY  */
  YYSYMBOL_NOTNULL = 286,                  /* NOTNULL  */
  YYSYMBOL_NOWAIT = 287,                   /* NOWAIT  */
  YYSYMBOL_NULL_P = 288,                   /* NULL_P  */
  YYSYMBOL_NULLIF = 289,                   /* NULLIF  */
  YYSYMBOL_NULLS_P = 290,                  /* NULLS_P  */
  YYSYMBOL_NUMERIC = 291,                  /* NUMERIC  */
  YYSYMBOL_OBJECT_P = 292,                 /* OBJECT_P  */
  YYSYMBOL_OF = 293,                       /* OF  */
  YYSYMBOL_OFF = 294,                      /* OFF  */
  YYSYMBOL_OFFSET = 295,                   /* OFFSET  */
  YYSYMBOL_OIDS = 296,                     /* OIDS  */
  YYSYMBOL_OLD = 297,                      /* OLD  */
  YYSYMBOL_ON = 298,                       /* ON  */
  YYSYMBOL_ONLY = 299,                     /* ONLY  */
  YYSYMBOL_OPERATOR = 300,                 /* OPERATOR  */
  YYSYMBOL_OPTION = 301,                   /* OPTION  */
  YYSYMBOL_OPTIONS = 302,                  /* OPTIONS  */
  YYSYMBOL_OR = 303,                       /* OR  */
  YYSYMBOL_ORDER = 304,                    /* ORDER  */
  YYSYMBOL_ORDINALITY = 305,               /* ORDINALITY  */
  YYSYMBOL_OTHERS = 306,                   /* OTHERS  */
  YYSYMBOL_OUT_P = 307,                    /* OUT_P  */
  YYSYMBOL_OUTER_P = 308,                  /* OUTER_P  */
  YYSYMBOL_OVER = 309,                     /* OVER  */
  YYSYMBOL_OVERLAPS = 310,                 /* OVERLAPS  */
  YYSYMBOL_OVERLAY = 311,                  /* OVERLAY  */
  YYSYMBOL_OVERRIDING = 312,               /* OVERRIDING  */
  YYSYMBOL_OWNED = 313,                    /* OWNED  */
  YYSYMBOL_OWNER = 314,                    /* OWNER  */
  YYSYMBOL_PARALLEL = 315,                 /* PARALLEL  */
  YYSYMBOL_PARSER = 316,                   /* PARSER  */
  YYSYMBOL_PARTIAL = 317,                  /* PARTIAL  */
  YYSYMBOL_PARTITION = 318,                /* PARTITION  */
  YYSYMBOL_PASSING = 319,                  /* PASSING  */
  YYSYMBOL_PASSWORD = 320,                 /* PASSWORD  */
  YYSYMBOL_PATH = 321,                     /* PATH  */
  YYSYMBOL_PATHS = 322,                    /* PATHS  */
  YYSYMBOL_PERCENT = 323,                  /* PERCENT  */
  YYSYMBOL_PERSISTENT = 324,               /* PERSISTENT  */
  YYSYMBOL_PIVOT = 325,                    /* PIVOT  */
  YYSYMBOL_PIVOT_LONGER = 326,             /* PIVOT_LONGER  */
  YYSYMBOL_PIVOT_WIDER = 327,              /* PIVOT_WIDER  */
  YYSYMBOL_PLACING = 328,                  /* PLACING  */
  YYSYMBOL_PLANS = 329,                    /* PLANS  */
  YYSYMBOL_POLICY = 330,                   /* POLICY  */
  YYSYMBOL_POSITION = 331,                 /* POSITION  */
  YYSYMBOL_POSITIONAL = 332,               /* POSITIONAL  */
  YYSYMBOL_PRAGMA_P = 333,                 /* PRAGMA_P  */
  YYSYMBOL_PRECEDING = 334,                /* PRECEDING  */
  YYSYMBOL_PRECISION = 335,                /* PRECISION  */
  YYSYMBOL_PREPARE = 336,                  /* PREPARE  */
  YYSYMBOL_PREPARED = 337,                 /* PREPARED  */
  YYSYMBOL_PRESERVE = 338,                 /* PRESERVE  */
  YYSYMBOL_PRIMARY = 339,                  /* PRIMARY  */
  YYSYMBOL_PRIOR = 340,                    /* PRIOR  */
  YYSYMBOL_PRIVILEGES = 341,               /* PRIVILEGES  */
  YYSYMBOL_PROCEDURAL = 342,               /* PROCEDURAL  */
  YYSYMBOL_PROCEDURE = 343,                /* PROCEDURE  */
  YYSYMBOL_PROGRAM = 344,                  /* PROGRAM  */
  YYSYMBOL_PROPERTIES = 345,               /* PROPERTIES  */
  YYSYMBOL_PROPERTY = 346,                 /* PROPERTY  */
  YYSYMBOL_PUBLICATION = 347,              /* PUBLICATION  */
  YYSYMBOL_QUALIFY = 348,                  /* QUALIFY  */
  YYSYMBOL_QUOTE = 349,                    /* QUOTE  */
  YYSYMBOL_RANGE = 350,                    /* RANGE  */
  YYSYMBOL_READ_P = 351,                   /* READ_P  */
  YYSYMBOL_REAL = 352,                     /* REAL  */
  YYSYMBOL_REASSIGN = 353,                 /* REASSIGN  */
  YYSYMBOL_RECHECK = 354,                  /* RECHECK  */
  YYSYMBOL_RECURSIVE = 355,                /* RECURSIVE  */
  YYSYMBOL_REF = 356,                      /* REF  */
  YYSYMBOL_REFERENCES = 357,               /* REFERENCES  */
  YYSYMBOL_REFERENCING = 358,              /* REFERENCING  */
  YYSYMBOL_REFRESH = 359,                  /* REFRESH  */
  YYSYMBOL_REINDEX = 360,                  /* REINDEX  */
  YYSYMBOL_RELATIONSHIP = 361,             /* RELATIONSHIP  */
  YYSYMBOL_RELATIVE_P = 362,               /* RELATIVE_P  */
  YYSYMBOL_RELEASE = 363,                  /* RELEASE  */
  YYSYMBOL_RENAME = 364,                   /* RENAME  */
  YYSYMBOL_REPEATABLE = 365,               /* REPEATABLE  */
  YYSYMBOL_REPLACE = 366,                  /* REPLACE  */
  YYSYMBOL_REPLICA = 367,                  /* REPLICA  */
  YYSYMBOL_RESET = 368,                    /* RESET  */
  YYSYMBOL_RESPECT_P = 369,                /* RESPECT_P  */
  YYSYMBOL_RESTART = 370,                  /* RESTART  */
  YYSYMBOL_RESTRICT = 371,                 /* RESTRICT  */
  YYSYMBOL_RETURNING = 372,                /* RETURNING  */
  YYSYMBOL_RETURNS = 373,                  /* RETURNS  */
  YYSYMBOL_REVOKE = 374,                   /* REVOKE  */
  YYSYMBOL_RIGHT = 375,                    /* RIGHT  */
  YYSYMBOL_ROLE = 376,                     /* ROLE  */
  YYSYMBOL_ROLLBACK = 377,                 /* ROLLBACK  */
  YYSYMBOL_ROLLUP = 378,                   /* ROLLUP  */
  YYSYMBOL_ROW = 379,                      /* ROW  */
  YYSYMBOL_ROWS = 380,                     /* ROWS  */
  YYSYMBOL_RULE = 381,                     /* RULE  */
  YYSYMBOL_SAMPLE = 382,                   /* SAMPLE  */
  YYSYMBOL_SAVEPOINT = 383,                /* SAVEPOINT  */
  YYSYMBOL_SCHEMA = 384,                   /* SCHEMA  */
  YYSYMBOL_SCHEMAS = 385,                  /* SCHEMAS  */
  YYSYMBOL_SCOPE = 386,                    /* SCOPE  */
  YYSYMBOL_SCROLL = 387,                   /* SCROLL  */
  YYSYMBOL_SEARCH = 388,                   /* SEARCH  */
  YYSYMBOL_SECOND_P = 389,                 /* SECOND_P  */
  YYSYMBOL_SECONDS_P = 390,                /* SECONDS_P  */
  YYSYMBOL_SECRET = 391,                   /* SECRET  */
  YYSYMBOL_SECURITY = 392,                 /* SECURITY  */
  YYSYMBOL_SELECT = 393,                   /* SELECT  */
  YYSYMBOL_SEMI = 394,                     /* SEMI  */
  YYSYMBOL_SEQUENCE = 395,                 /* SEQUENCE  */
  YYSYMBOL_SEQUENCES = 396,                /* SEQUENCES  */
  YYSYMBOL_SERIALIZABLE = 397,             /* SERIALIZABLE  */
  YYSYMBOL_SERVER = 398,                   /* SERVER  */
  YYSYMBOL_SESSION = 399,                  /* SESSION  */
  YYSYMBOL_SET = 400,                      /* SET  */
  YYSYMBOL_SETOF = 401,                    /* SETOF  */
  YYSYMBOL_SETS = 402,                     /* SETS  */
  YYSYMBOL_SHARE = 403,                    /* SHARE  */
  YYSYMBOL_SHORTEST = 404,                 /* SHORTEST  */
  YYSYMBOL_SHOW = 405,                     /* SHOW  */
  YYSYMBOL_SIMILAR = 406,                  /* SIMILAR  */
  YYSYMBOL_SIMPLE = 407,                   /* SIMPLE  */
  YYSYMBOL_SKIP = 408,                     /* SKIP  */
  YYSYMBOL_SMALLINT = 409,                 /* SMALLINT  */
  YYSYMBOL_SNAPSHOT = 410,                 /* SNAPSHOT  */
  YYSYMBOL_SOME = 411,                     /* SOME  */
  YYSYMBOL_SOURCE = 412,                   /* SOURCE  */
  YYSYMBOL_SQL_P = 413,                    /* SQL_P  */
  YYSYMBOL_STABLE = 414,                   /* STABLE  */
  YYSYMBOL_STANDALONE_P = 415,             /* STANDALONE_P  */
  YYSYMBOL_START = 416,                    /* START  */
  YYSYMBOL_STATEMENT = 417,                /* STATEMENT  */
  YYSYMBOL_STATISTICS = 418,               /* STATISTICS  */
  YYSYMBOL_STDIN = 419,                    /* STDIN  */
  YYSYMBOL_STDOUT = 420,                   /* STDOUT  */
  YYSYMBOL_STORAGE = 421,                  /* STORAGE  */
  YYSYMBOL_STORED = 422,                   /* STORED  */
  YYSYMBOL_STRICT_P = 423,                 /* STRICT_P  */
  YYSYMBOL_STRIP_P = 424,                  /* STRIP_P  */
  YYSYMBOL_STRUCT = 425,                   /* STRUCT  */
  YYSYMBOL_SUBSCRIPTION = 426,             /* SUBSCRIPTION  */
  YYSYMBOL_SUBSTRING = 427,                /* SUBSTRING  */
  YYSYMBOL_SUMMARIZE = 428,                /* SUMMARIZE  */
  YYSYMBOL_SYMMETRIC = 429,                /* SYMMETRIC  */
  YYSYMBOL_SYSID = 430,                    /* SYSID  */
  YYSYMBOL_SYSTEM_P = 431,                 /* SYSTEM_P  */
  YYSYMBOL_TABLE = 432,                    /* TABLE  */
  YYSYMBOL_TABLES = 433,                   /* TABLES  */
  YYSYMBOL_TABLESAMPLE = 434,              /* TABLESAMPLE  */
  YYSYMBOL_TABLESPACE = 435,               /* TABLESPACE  */
  YYSYMBOL_TEMP = 436,                     /* TEMP  */
  YYSYMBOL_TEMPLATE = 437,                 /* TEMPLATE  */
  YYSYMBOL_TEMPORARY = 438,                /* TEMPORARY  */
  YYSYMBOL_TEXT_P = 439,                   /* TEXT_P  */
  YYSYMBOL_THEN = 440,                     /* THEN  */
  YYSYMBOL_TIES = 441,                     /* TIES  */
  YYSYMBOL_TIME = 442,                     /* TIME  */
  YYSYMBOL_TIMESTAMP = 443,                /* TIMESTAMP  */
  YYSYMBOL_TO = 444,                       /* TO  */
  YYSYMBOL_TRAIL = 445,                    /* TRAIL  */
  YYSYMBOL_TRAILING = 446,                 /* TRAILING  */
  YYSYMBOL_TRANSACTION = 447,              /* TRANSACTION  */
  YYSYMBOL_TRANSFORM = 448,                /* TRANSFORM  */
  YYSYMBOL_TREAT = 449,                    /* TREAT  */
  YYSYMBOL_TRIGGER = 450,                  /* TRIGGER  */
  YYSYMBOL_TRIM = 451,                     /* TRIM  */
  YYSYMBOL_TRUE_P = 452,                   /* TRUE_P  */
  YYSYMBOL_TRUNCATE = 453,                 /* TRUNCATE  */
  YYSYMBOL_TRUSTED = 454,                  /* TRUSTED  */
  YYSYMBOL_TRY_CAST = 455,                 /* TRY_CAST  */
  YYSYMBOL_TYPE_P = 456,                   /* TYPE_P  */
  YYSYMBOL_TYPES_P = 457,                  /* TYPES_P  */
  YYSYMBOL_UNBOUNDED = 458,                /* UNBOUNDED  */
  YYSYMBOL_UNCOMMITTED = 459,              /* UNCOMMITTED  */
  YYSYMBOL_UNENCRYPTED = 460,              /* UNENCRYPTED  */
  YYSYMBOL_UNION = 461,                    /* UNION  */
  YYSYMBOL_UNIQUE = 462,                   /* UNIQUE  */
  YYSYMBOL_UNKNOWN = 463,                  /* UNKNOWN  */
  YYSYMBOL_UNLISTEN = 464,                 /* UNLISTEN  */
  YYSYMBOL_UNLOGGED = 465,                 /* UNLOGGED  */
  YYSYMBOL_UNPIVOT = 466,                  /* UNPIVOT  */
  YYSYMBOL_UNTIL = 467,                    /* UNTIL  */
  YYSYMBOL_UPDATE = 468,                   /* UPDATE  */
  YYSYMBOL_USE_P = 469,                    /* USE_P  */
  YYSYMBOL_USER = 470,                     /* USER  */
  YYSYMBOL_USING = 471,                    /* USING  */
  YYSYMBOL_VACUUM = 472,                   /* VACUUM  */
  YYSYMBOL_VALID = 473,                    /* VALID  */
  YYSYMBOL_VALIDATE = 474,                 /* VALIDATE  */
  YYSYMBOL_VALIDATOR = 475,                /* VALIDATOR  */
  YYSYMBOL_VALUE_P = 476,                  /* VALUE_P  */
  YYSYMBOL_VALUES = 477,                   /* VALUES  */
  YYSYMBOL_VARCHAR = 478,                  /* VARCHAR  */
  YYSYMBOL_VARIADIC = 479,                 /* VARIADIC  */
  YYSYMBOL_VARYING = 480,                  /* VARYING  */
  YYSYMBOL_VERBOSE = 481,                  /* VERBOSE  */
  YYSYMBOL_VERSION_P = 482,                /* VERSION_P  */
  YYSYMBOL_VERTEX = 483,                   /* VERTEX  */
  YYSYMBOL_VIEW = 484,                     /* VIEW  */
  YYSYMBOL_VIEWS = 485,                    /* VIEWS  */
  YYSYMBOL_VIRTUAL = 486,                  /* VIRTUAL  */
  YYSYMBOL_VOLATILE = 487,                 /* VOLATILE  */
  YYSYMBOL_WALK = 488,                     /* WALK  */
  YYSYMBOL_WEEK_P = 489,                   /* WEEK_P  */
  YYSYMBOL_WEEKS_P = 490,                  /* WEEKS_P  */
  YYSYMBOL_WHEN = 491,                     /* WHEN  */
  YYSYMBOL_WHERE = 492,                    /* WHERE  */
  YYSYMBOL_WHITESPACE_P = 493,             /* WHITESPACE_P  */
  YYSYMBOL_WINDOW = 494,                   /* WINDOW  */
  YYSYMBOL_WITH = 495,                     /* WITH  */
  YYSYMBOL_WITHIN = 496,                   /* WITHIN  */
  YYSYMBOL_WITHOUT = 497,                  /* WITHOUT  */
  YYSYMBOL_WORK = 498,                     /* WORK  */
  YYSYMBOL_WRAPPER = 499,                  /* WRAPPER  */
  YYSYMBOL_WRITE_P = 500,                  /* WRITE_P  */
  YYSYMBOL_XML_P = 501,                    /* XML_P  */
  YYSYMBOL_XMLATTRIBUTES = 502,            /* XMLATTRIBUTES  */
  YYSYMBOL_XMLCONCAT = 503,                /* XMLCONCAT  */
  YYSYMBOL_XMLELEMENT = 504,               /* XMLELEMENT  */
  YYSYMBOL_XMLEXISTS = 505,                /* XMLEXISTS  */
  YYSYMBOL_XMLFOREST = 506,                /* XMLFOREST  */
  YYSYMBOL_XMLNAMESPACES = 507,            /* XMLNAMESPACES  */
  YYSYMBOL_XMLPARSE = 508,                 /* XMLPARSE  */
  YYSYMBOL_XMLPI = 509,                    /* XMLPI  */
  YYSYMBOL_XMLROOT = 510,                  /* XMLROOT  */
  YYSYMBOL_XMLSERIALIZE = 511,             /* XMLSERIALIZE  */
  YYSYMBOL_XMLTABLE = 512,                 /* XMLTABLE  */
  YYSYMBOL_YEAR_P = 513,                   /* YEAR_P  */
  YYSYMBOL_YEARS_P = 514,                  /* YEARS_P  */
  YYSYMBOL_YES_P = 515,                    /* YES_P  */
  YYSYMBOL_ZONE = 516,                     /* ZONE  */
  YYSYMBOL_NOT_LA = 517,                   /* NOT_LA  */
  YYSYMBOL_NULLS_LA = 518,                 /* NULLS_LA  */
  YYSYMBOL_WITH_LA = 519,                  /* WITH_LA  */
  YYSYMBOL_520_ = 520,                     /* '<'  */
  YYSYMBOL_521_ = 521,                     /* '>'  */
  YYSYMBOL_522_ = 522,                     /* '='  */
  YYSYMBOL_POSTFIXOP = 523,                /* POSTFIXOP  */
  YYSYMBOL_524_ = 524,                     /* '+'  */
  YYSYMBOL_525_ = 525,                     /* '-'  */
  YYSYMBOL_526_ = 526,                     /* '*'  */
  YYSYMBOL_527_ = 527,                     /* '/'  */
  YYSYMBOL_528_ = 528,                     /* '%'  */
  YYSYMBOL_529_ = 529,                     /* '^'  */
  YYSYMBOL_UMINUS = 530,                   /* UMINUS  */
  YYSYMBOL_531_ = 531,                     /* '['  */
  YYSYMBOL_532_ = 532,                     /* ']'  */
  YYSYMBOL_533_ = 533,                     /* '('  */
  YYSYMBOL_534_ = 534,                     /* ')'  */
  YYSYMBOL_535_ = 535,                     /* '.'  */
  YYSYMBOL_536_ = 536,                     /* ';'  */
  YYSYMBOL_537_ = 537,                     /* ','  */
  YYSYMBOL_538_ = 538,                     /* '|'  */
  YYSYMBOL_539_ = 539,                     /* '?'  */
  YYSYMBOL_540_ = 540,                     /* '{'  */
  YYSYMBOL_541_ = 541,                     /* '}'  */
  YYSYMBOL_542_ = 542,                     /* '&'  */
  YYSYMBOL_543_ = 543,                     /* '!'  */
  YYSYMBOL_544_ = 544,                     /* ':'  */
  YYSYMBOL_545_ = 545,                     /* '#'  */
  YYSYMBOL_546_ = 546,                     /* '$'  */
  YYSYMBOL_YYACCEPT = 547,                 /* $accept  */
  YYSYMBOL_stmtblock = 548,                /* stmtblock  */
  YYSYMBOL_stmtmulti = 549,                /* stmtmulti  */
  YYSYMBOL_stmt = 550,                     /* stmt  */
  YYSYMBOL_AlterObjectSchemaStmt = 551,    /* AlterObjectSchemaStmt  */
  YYSYMBOL_AlterSeqStmt = 552,             /* AlterSeqStmt  */
  YYSYMBOL_SeqOptList = 553,               /* SeqOptList  */
  YYSYMBOL_opt_with = 554,                 /* opt_with  */
  YYSYMBOL_NumericOnly = 555,              /* NumericOnly  */
  YYSYMBOL_SeqOptElem = 556,               /* SeqOptElem  */
  YYSYMBOL_opt_by = 557,                   /* opt_by  */
  YYSYMBOL_SignedIconst = 558,             /* SignedIconst  */
  YYSYMBOL_AlterTableStmt = 559,           /* AlterTableStmt  */
  YYSYMBOL_alter_identity_column_option_list = 560, /* alter_identity_column_option_list  */
  YYSYMBOL_alter_column_default = 561,     /* alter_column_default  */
  YYSYMBOL_alter_identity_column_option = 562, /* alter_identity_column_option  */
  YYSYMBOL_alter_generic_option_list = 563, /* alter_generic_option_list  */
  YYSYMBOL_alter_table_cmd = 564,          /* alter_table_cmd  */
  YYSYMBOL_alter_using = 565,              /* alter_using  */
  YYSYMBOL_alter_generic_option_elem = 566, /* alter_generic_option_elem  */
  YYSYMBOL_alter_table_cmds = 567,         /* alter_table_cmds  */
  YYSYMBOL_alter_generic_options = 568,    /* alter_generic_options  */
  YYSYMBOL_opt_set_data = 569,             /* opt_set_data  */
  YYSYMBOL_AnalyzeStmt = 570,              /* AnalyzeStmt  */
  YYSYMBOL_AttachStmt = 571,               /* AttachStmt  */
  YYSYMBOL_DetachStmt = 572,               /* DetachStmt  */
  YYSYMBOL_opt_database = 573,             /* opt_database  */
  YYSYMBOL_opt_database_alias = 574,       /* opt_database_alias  */
  YYSYMBOL_CallStmt = 575,                 /* CallStmt  */
  YYSYMBOL_CheckPointStmt = 576,           /* CheckPointStmt  */
  YYSYMBOL_opt_col_id = 577,               /* opt_col_id  */
  YYSYMBOL_CommentOnStmt = 578,            /* CommentOnStmt  */
  YYSYMBOL_comment_value = 579,            /* comment_value  */
  YYSYMBOL_comment_on_type_any_name = 580, /* comment_on_type_any_name  */
  YYSYMBOL_qualified_name = 581,           /* qualified_name  */
  YYSYMBOL_ColId = 582,                    /* ColId  */
  YYSYMBOL_ColIdOrString = 583,            /* ColIdOrString  */
  YYSYMBOL_Sconst = 584,                   /* Sconst  */
  YYSYMBOL_indirection = 585,              /* indirection  */
  YYSYMBOL_indirection_el = 586,           /* indirection_el  */
  YYSYMBOL_attr_name = 587,                /* attr_name  */
  YYSYMBOL_ColLabel = 588,                 /* ColLabel  */
  YYSYMBOL_CopyStmt = 589,                 /* CopyStmt  */
  YYSYMBOL_copy_database_flag = 590,       /* copy_database_flag  */
  YYSYMBOL_copy_from = 591,                /* copy_from  */
  YYSYMBOL_copy_delimiter = 592,           /* copy_delimiter  */
  YYSYMBOL_copy_generic_opt_arg_list = 593, /* copy_generic_opt_arg_list  */
  YYSYMBOL_opt_using = 594,                /* opt_using  */
  YYSYMBOL_opt_as = 595,                   /* opt_as  */
  YYSYMBOL_opt_program = 596,              /* opt_program  */
  YYSYMBOL_copy_options = 597,             /* copy_options  */
  YYSYMBOL_copy_generic_opt_arg = 598,     /* copy_generic_opt_arg  */
  YYSYMBOL_copy_generic_opt_elem = 599,    /* copy_generic_opt_elem  */
  YYSYMBOL_opt_oids = 600,                 /* opt_oids  */
  YYSYMBOL_copy_opt_list = 601,            /* copy_opt_list  */
  YYSYMBOL_opt_binary = 602,               /* opt_binary  */
  YYSYMBOL_copy_opt_item = 603,            /* copy_opt_item  */
  YYSYMBOL_copy_generic_opt_arg_list_item = 604, /* copy_generic_opt_arg_list_item  */
  YYSYMBOL_copy_file_name = 605,           /* copy_file_name  */
  YYSYMBOL_copy_generic_opt_list = 606,    /* copy_generic_opt_list  */
  YYSYMBOL_CreateStmt = 607,               /* CreateStmt  */
  YYSYMBOL_ConstraintAttributeSpec = 608,  /* ConstraintAttributeSpec  */
  YYSYMBOL_def_arg = 609,                  /* def_arg  */
  YYSYMBOL_OptParenthesizedSeqOptList = 610, /* OptParenthesizedSeqOptList  */
  YYSYMBOL_generic_option_arg = 611,       /* generic_option_arg  */
  YYSYMBOL_key_action = 612,               /* key_action  */
  YYSYMBOL_ColConstraint = 613,            /* ColConstraint  */
  YYSYMBOL_ColConstraintElem = 614,        /* ColConstraintElem  */
  YYSYMBOL_GeneratedColumnType = 615,      /* GeneratedColumnType  */
  YYSYMBOL_opt_GeneratedColumnType = 616,  /* opt_GeneratedColumnType  */
  YYSYMBOL_GeneratedConstraintElem = 617,  /* GeneratedConstraintElem  */
  YYSYMBOL_generic_option_elem = 618,      /* generic_option_elem  */
  YYSYMBOL_key_update = 619,               /* key_update  */
  YYSYMBOL_key_actions = 620,              /* key_actions  */
  YYSYMBOL_OnCommitOption = 621,           /* OnCommitOption  */
  YYSYMBOL_reloptions = 622,               /* reloptions  */
  YYSYMBOL_opt_no_inherit = 623,           /* opt_no_inherit  */
  YYSYMBOL_TableConstraint = 624,          /* TableConstraint  */
  YYSYMBOL_TableLikeOption = 625,          /* TableLikeOption  */
  YYSYMBOL_reloption_list = 626,           /* reloption_list  */
  YYSYMBOL_ExistingIndex = 627,            /* ExistingIndex  */
  YYSYMBOL_ConstraintAttr = 628,           /* ConstraintAttr  */
  YYSYMBOL_OptWith = 629,                  /* OptWith  */
  YYSYMBOL_definition = 630,               /* definition  */
  YYSYMBOL_TableLikeOptionList = 631,      /* TableLikeOptionList  */
  YYSYMBOL_generic_option_name = 632,      /* generic_option_name  */
  YYSYMBOL_ConstraintAttributeElem = 633,  /* ConstraintAttributeElem  */
  YYSYMBOL_columnDef = 634,                /* columnDef  */
  YYSYMBOL_def_list = 635,                 /* def_list  */
  YYSYMBOL_index_name = 636,               /* index_name  */
  YYSYMBOL_TableElement = 637,             /* TableElement  */
  YYSYMBOL_def_elem = 638,                 /* def_elem  */
  YYSYMBOL_opt_definition = 639,           /* opt_definition  */
  YYSYMBOL_OptTableElementList = 640,      /* OptTableElementList  */
  YYSYMBOL_columnElem = 641,               /* columnElem  */
  YYSYMBOL_opt_column_list = 642,          /* opt_column_list  */
  YYSYMBOL_ColQualList = 643,              /* ColQualList  */
  YYSYMBOL_key_delete = 644,               /* key_delete  */
  YYSYMBOL_reloption_elem = 645,           /* reloption_elem  */
  YYSYMBOL_columnList = 646,               /* columnList  */
  YYSYMBOL_columnList_opt_comma = 647,     /* columnList_opt_comma  */
  YYSYMBOL_func_type = 648,                /* func_type  */
  YYSYMBOL_ConstraintElem = 649,           /* ConstraintElem  */
  YYSYMBOL_TableElementList = 650,         /* TableElementList  */
  YYSYMBOL_key_match = 651,                /* key_match  */
  YYSYMBOL_TableLikeClause = 652,          /* TableLikeClause  */
  YYSYMBOL_OptTemp = 653,                  /* OptTemp  */
  YYSYMBOL_generated_when = 654,           /* generated_when  */
  YYSYMBOL_CreateAsStmt = 655,             /* CreateAsStmt  */
  YYSYMBOL_opt_with_data = 656,            /* opt_with_data  */
  YYSYMBOL_create_as_target = 657,         /* create_as_target  */
  YYSYMBOL_unreserved_keyword = 658,       /* unreserved_keyword  */
  YYSYMBOL_col_name_keyword = 659,         /* col_name_keyword  */
  YYSYMBOL_func_name_keyword = 660,        /* func_name_keyword  */
  YYSYMBOL_type_name_keyword = 661,        /* type_name_keyword  */
  YYSYMBOL_other_keyword = 662,            /* other_keyword  */
  YYSYMBOL_type_func_name_keyword = 663,   /* type_func_name_keyword  */
  YYSYMBOL_reserved_keyword = 664,         /* reserved_keyword  */
  YYSYMBOL_pgq_unreserved_keyword = 665,   /* pgq_unreserved_keyword  */
  YYSYMBOL_pgq_col_name_keyword = 666,     /* pgq_col_name_keyword  */
  YYSYMBOL_CreateFunctionStmt = 667,       /* CreateFunctionStmt  */
  YYSYMBOL_macro_alias = 668,              /* macro_alias  */
  YYSYMBOL_param_list = 669,               /* param_list  */
  YYSYMBOL_CreateSchemaStmt = 670,         /* CreateSchemaStmt  */
  YYSYMBOL_OptSchemaEltList = 671,         /* OptSchemaEltList  */
  YYSYMBOL_schema_stmt = 672,              /* schema_stmt  */
  YYSYMBOL_CreateSecretStmt = 673,         /* CreateSecretStmt  */
  YYSYMBOL_opt_secret_name = 674,          /* opt_secret_name  */
  YYSYMBOL_opt_persist = 675,              /* opt_persist  */
  YYSYMBOL_opt_storage_specifier = 676,    /* opt_storage_specifier  */
  YYSYMBOL_CreateSeqStmt = 677,            /* CreateSeqStmt  */
  YYSYMBOL_OptSeqOptList = 678,            /* OptSeqOptList  */
  YYSYMBOL_CreateTypeStmt = 679,           /* CreateTypeStmt  */
  YYSYMBOL_opt_enum_val_list = 680,        /* opt_enum_val_list  */
  YYSYMBOL_enum_val_list = 681,            /* enum_val_list  */
  YYSYMBOL_DeallocateStmt = 682,           /* DeallocateStmt  */
  YYSYMBOL_DeleteStmt = 683,               /* DeleteStmt  */
  YYSYMBOL_relation_expr_opt_alias = 684,  /* relation_expr_opt_alias  */
  YYSYMBOL_where_or_current_clause = 685,  /* where_or_current_clause  */
  YYSYMBOL_using_clause = 686,             /* using_clause  */
  YYSYMBOL_DropStmt = 687,                 /* DropStmt  */
  YYSYMBOL_drop_type_any_name = 688,       /* drop_type_any_name  */
  YYSYMBOL_drop_type_name = 689,           /* drop_type_name  */
  YYSYMBOL_any_name_list = 690,            /* any_name_list  */
  YYSYMBOL_opt_drop_behavior = 691,        /* opt_drop_behavior  */
  YYSYMBOL_drop_type_name_on_any_name = 692, /* drop_type_name_on_any_name  */
  YYSYMBOL_DropSecretStmt = 693,           /* DropSecretStmt  */
  YYSYMBOL_opt_storage_drop_specifier = 694, /* opt_storage_drop_specifier  */
  YYSYMBOL_ExecuteStmt = 695,              /* ExecuteStmt  */
  YYSYMBOL_execute_param_expr = 696,       /* execute_param_expr  */
  YYSYMBOL_execute_param_list = 697,       /* execute_param_list  */
  YYSYMBOL_execute_param_clause = 698,     /* execute_param_clause  */
  YYSYMBOL_ExplainStmt = 699,              /* ExplainStmt  */
  YYSYMBOL_opt_verbose = 700,              /* opt_verbose  */
  YYSYMBOL_explain_option_arg = 701,       /* explain_option_arg  */
  YYSYMBOL_ExplainableStmt = 702,          /* ExplainableStmt  */
  YYSYMBOL_NonReservedWord = 703,          /* NonReservedWord  */
  YYSYMBOL_NonReservedWord_or_Sconst = 704, /* NonReservedWord_or_Sconst  */
  YYSYMBOL_explain_option_list = 705,      /* explain_option_list  */
  YYSYMBOL_analyze_keyword = 706,          /* analyze_keyword  */
  YYSYMBOL_opt_boolean_or_string = 707,    /* opt_boolean_or_string  */
  YYSYMBOL_explain_option_elem = 708,      /* explain_option_elem  */
  YYSYMBOL_explain_option_name = 709,      /* explain_option_name  */
  YYSYMBOL_ExportStmt = 710,               /* ExportStmt  */
  YYSYMBOL_ImportStmt = 711,               /* ImportStmt  */
  YYSYMBOL_IndexStmt = 712,                /* IndexStmt  */
  YYSYMBOL_access_method = 713,            /* access_method  */
  YYSYMBOL_access_method_clause = 714,     /* access_method_clause  */
  YYSYMBOL_opt_concurrently = 715,         /* opt_concurrently  */
  YYSYMBOL_opt_index_name = 716,           /* opt_index_name  */
  YYSYMBOL_opt_reloptions = 717,           /* opt_reloptions  */
  YYSYMBOL_opt_unique = 718,               /* opt_unique  */
  YYSYMBOL_InsertStmt = 719,               /* InsertStmt  */
  YYSYMBOL_insert_rest = 720,              /* insert_rest  */
  YYSYMBOL_insert_target = 721,            /* insert_target  */
  YYSYMBOL_opt_by_name_or_position = 722,  /* opt_by_name_or_position  */
  YYSYMBOL_opt_conf_expr = 723,            /* opt_conf_expr  */
  YYSYMBOL_opt_with_clause = 724,          /* opt_with_clause  */
  YYSYMBOL_insert_column_item = 725,       /* insert_column_item  */
  YYSYMBOL_set_clause = 726,               /* set_clause  */
  YYSYMBOL_opt_or_action = 727,            /* opt_or_action  */
  YYSYMBOL_opt_on_conflict = 728,          /* opt_on_conflict  */
  YYSYMBOL_index_elem = 729,               /* index_elem  */
  YYSYMBOL_returning_clause = 730,         /* returning_clause  */
  YYSYMBOL_override_kind = 731,            /* override_kind  */
  YYSYMBOL_set_target_list = 732,          /* set_target_list  */
  YYSYMBOL_opt_collate = 733,              /* opt_collate  */
  YYSYMBOL_opt_class = 734,                /* opt_class  */
  YYSYMBOL_insert_column_list = 735,       /* insert_column_list  */
  YYSYMBOL_set_clause_list = 736,          /* set_clause_list  */
  YYSYMBOL_set_clause_list_opt_comma = 737, /* set_clause_list_opt_comma  */
  YYSYMBOL_index_params = 738,             /* index_params  */
  YYSYMBOL_set_target = 739,               /* set_target  */
  YYSYMBOL_LoadStmt = 740,                 /* LoadStmt  */
  YYSYMBOL_file_name = 741,                /* file_name  */
  YYSYMBOL_repo_path = 742,                /* repo_path  */
  YYSYMBOL_PGQ_IDENT = 743,                /* PGQ_IDENT  */
  YYSYMBOL_DropPropertyGraphStmt = 744,    /* DropPropertyGraphStmt  */
  YYSYMBOL_VertexOrNode = 745,             /* VertexOrNode  */
  YYSYMBOL_EdgeOrRelationship = 746,       /* EdgeOrRelationship  */
  YYSYMBOL_EdgeTablesClauseOptional = 747, /* EdgeTablesClauseOptional  */
  YYSYMBOL_CreatePropertyGraphStmt = 748,  /* CreatePropertyGraphStmt  */
  YYSYMBOL_VertexTableDefinitionList = 749, /* VertexTableDefinitionList  */
  YYSYMBOL_KeySpecification = 750,         /* KeySpecification  */
  YYSYMBOL_KeyDefinition = 751,            /* KeyDefinition  */
  YYSYMBOL_KeyReference = 752,             /* KeyReference  */
  YYSYMBOL_LabelList = 753,                /* LabelList  */
  YYSYMBOL_LabelOptional = 754,            /* LabelOptional  */
  YYSYMBOL_Discriminator = 755,            /* Discriminator  */
  YYSYMBOL_VertexTableDefinition = 756,    /* VertexTableDefinition  */
  YYSYMBOL_EdgeTableDefinitionList = 757,  /* EdgeTableDefinitionList  */
  YYSYMBOL_EdgeTableDefinition = 758,      /* EdgeTableDefinition  */
  YYSYMBOL_AreOptional = 759,              /* AreOptional  */
  YYSYMBOL_IdentOptionalAs = 760,          /* IdentOptionalAs  */
  YYSYMBOL_QualifiednameOptionalAs = 761,  /* QualifiednameOptionalAs  */
  YYSYMBOL_PropertiesList = 762,           /* PropertiesList  */
  YYSYMBOL_ExceptOptional = 763,           /* ExceptOptional  */
  YYSYMBOL_PropertiesSpec = 764,           /* PropertiesSpec  */
  YYSYMBOL_PropertiesClause = 765,         /* PropertiesClause  */
  YYSYMBOL_GraphTableWhereOptional = 766,  /* GraphTableWhereOptional  */
  YYSYMBOL_GraphTableNameOptional = 767,   /* GraphTableNameOptional  */
  YYSYMBOL_ColumnsOptional = 768,          /* ColumnsOptional  */
  YYSYMBOL_GraphTableStmt = 769,           /* GraphTableStmt  */
  YYSYMBOL_KeepOptional = 770,             /* KeepOptional  */
  YYSYMBOL_PathOrPathsOptional = 771,      /* PathOrPathsOptional  */
  YYSYMBOL_GroupOrGroupsOptional = 772,    /* GroupOrGroupsOptional  */
  YYSYMBOL_PathVariableOptional = 773,     /* PathVariableOptional  */
  YYSYMBOL_PathModeOptional = 774,         /* PathModeOptional  */
  YYSYMBOL_TopKOptional = 775,             /* TopKOptional  */
  YYSYMBOL_PathPrefix = 776,               /* PathPrefix  */
  YYSYMBOL_PathPatternList = 777,          /* PathPatternList  */
  YYSYMBOL_PathPattern = 778,              /* PathPattern  */
  YYSYMBOL_PatternUnion = 779,             /* PatternUnion  */
  YYSYMBOL_KleeneQuantifierOptional = 780, /* KleeneQuantifierOptional  */
  YYSYMBOL_KleeneOptional = 781,           /* KleeneOptional  */
  YYSYMBOL_CostNum = 782,                  /* CostNum  */
  YYSYMBOL_CostDefault = 783,              /* CostDefault  */
  YYSYMBOL_CostOptional = 784,             /* CostOptional  */
  YYSYMBOL_SubPath = 785,                  /* SubPath  */
  YYSYMBOL_EnclosedSubPath = 786,          /* EnclosedSubPath  */
  YYSYMBOL_PathElement = 787,              /* PathElement  */
  YYSYMBOL_PathSequence = 788,             /* PathSequence  */
  YYSYMBOL_PathConcatenation = 789,        /* PathConcatenation  */
  YYSYMBOL_OrLabelExpression = 790,        /* OrLabelExpression  */
  YYSYMBOL_AndLabelExpression = 791,       /* AndLabelExpression  */
  YYSYMBOL_ComposedLabelExpression = 792,  /* ComposedLabelExpression  */
  YYSYMBOL_LabelExpression = 793,          /* LabelExpression  */
  YYSYMBOL_LabelExpressionOptional = 794,  /* LabelExpressionOptional  */
  YYSYMBOL_IsOrColon = 795,                /* IsOrColon  */
  YYSYMBOL_ArrowRight = 796,               /* ArrowRight  */
  YYSYMBOL_ArrowLeftBracket = 797,         /* ArrowLeftBracket  */
  YYSYMBOL_AbbreviatedEdge = 798,          /* AbbreviatedEdge  */
  YYSYMBOL_VariableOptional = 799,         /* VariableOptional  */
  YYSYMBOL_FullElementSpec = 800,          /* FullElementSpec  */
  YYSYMBOL_EdgePattern = 801,              /* EdgePattern  */
  YYSYMBOL_VertexPattern = 802,            /* VertexPattern  */
  YYSYMBOL_pgq_expr = 803,                 /* pgq_expr  */
  YYSYMBOL_PragmaStmt = 804,               /* PragmaStmt  */
  YYSYMBOL_PrepareStmt = 805,              /* PrepareStmt  */
  YYSYMBOL_prep_type_clause = 806,         /* prep_type_clause  */
  YYSYMBOL_PreparableStmt = 807,           /* PreparableStmt  */
  YYSYMBOL_RenameStmt = 808,               /* RenameStmt  */
  YYSYMBOL_opt_column = 809,               /* opt_column  */
  YYSYMBOL_SelectStmt = 810,               /* SelectStmt  */
  YYSYMBOL_select_with_parens = 811,       /* select_with_parens  */
  YYSYMBOL_select_no_parens = 812,         /* select_no_parens  */
  YYSYMBOL_select_clause = 813,            /* select_clause  */
  YYSYMBOL_opt_select = 814,               /* opt_select  */
  YYSYMBOL_simple_select = 815,            /* simple_select  */
  YYSYMBOL_value_or_values = 816,          /* value_or_values  */
  YYSYMBOL_pivot_keyword = 817,            /* pivot_keyword  */
  YYSYMBOL_unpivot_keyword = 818,          /* unpivot_keyword  */
  YYSYMBOL_pivot_column_entry = 819,       /* pivot_column_entry  */
  YYSYMBOL_pivot_column_list_internal = 820, /* pivot_column_list_internal  */
  YYSYMBOL_pivot_column_list = 821,        /* pivot_column_list  */
  YYSYMBOL_with_clause = 822,              /* with_clause  */
  YYSYMBOL_cte_list = 823,                 /* cte_list  */
  YYSYMBOL_common_table_expr = 824,        /* common_table_expr  */
  YYSYMBOL_opt_materialized = 825,         /* opt_materialized  */
  YYSYMBOL_into_clause = 826,              /* into_clause  */
  YYSYMBOL_OptTempTableName = 827,         /* OptTempTableName  */
  YYSYMBOL_opt_table = 828,                /* opt_table  */
  YYSYMBOL_all_or_distinct = 829,          /* all_or_distinct  */
  YYSYMBOL_by_name = 830,                  /* by_name  */
  YYSYMBOL_distinct_clause = 831,          /* distinct_clause  */
  YYSYMBOL_opt_all_clause = 832,           /* opt_all_clause  */
  YYSYMBOL_opt_ignore_nulls = 833,         /* opt_ignore_nulls  */
  YYSYMBOL_opt_sort_clause = 834,          /* opt_sort_clause  */
  YYSYMBOL_sort_clause = 835,              /* sort_clause  */
  YYSYMBOL_sortby_list = 836,              /* sortby_list  */
  YYSYMBOL_sortby = 837,                   /* sortby  */
  YYSYMBOL_opt_asc_desc = 838,             /* opt_asc_desc  */
  YYSYMBOL_opt_nulls_order = 839,          /* opt_nulls_order  */
  YYSYMBOL_select_limit = 840,             /* select_limit  */
  YYSYMBOL_opt_select_limit = 841,         /* opt_select_limit  */
  YYSYMBOL_limit_clause = 842,             /* limit_clause  */
  YYSYMBOL_offset_clause = 843,            /* offset_clause  */
  YYSYMBOL_sample_count = 844,             /* sample_count  */
  YYSYMBOL_sample_clause = 845,            /* sample_clause  */
  YYSYMBOL_opt_sample_func = 846,          /* opt_sample_func  */
  YYSYMBOL_tablesample_entry = 847,        /* tablesample_entry  */
  YYSYMBOL_tablesample_clause = 848,       /* tablesample_clause  */
  YYSYMBOL_opt_tablesample_clause = 849,   /* opt_tablesample_clause  */
  YYSYMBOL_opt_repeatable_clause = 850,    /* opt_repeatable_clause  */
  YYSYMBOL_select_limit_value = 851,       /* select_limit_value  */
  YYSYMBOL_select_offset_value = 852,      /* select_offset_value  */
  YYSYMBOL_select_fetch_first_value = 853, /* select_fetch_first_value  */
  YYSYMBOL_I_or_F_const = 854,             /* I_or_F_const  */
  YYSYMBOL_row_or_rows = 855,              /* row_or_rows  */
  YYSYMBOL_first_or_next = 856,            /* first_or_next  */
  YYSYMBOL_group_clause = 857,             /* group_clause  */
  YYSYMBOL_group_by_list = 858,            /* group_by_list  */
  YYSYMBOL_group_by_list_opt_comma = 859,  /* group_by_list_opt_comma  */
  YYSYMBOL_group_by_item = 860,            /* group_by_item  */
  YYSYMBOL_empty_grouping_set = 861,       /* empty_grouping_set  */
  YYSYMBOL_rollup_clause = 862,            /* rollup_clause  */
  YYSYMBOL_cube_clause = 863,              /* cube_clause  */
  YYSYMBOL_grouping_sets_clause = 864,     /* grouping_sets_clause  */
  YYSYMBOL_grouping_or_grouping_id = 865,  /* grouping_or_grouping_id  */
  YYSYMBOL_having_clause = 866,            /* having_clause  */
  YYSYMBOL_qualify_clause = 867,           /* qualify_clause  */
  YYSYMBOL_for_locking_clause = 868,       /* for_locking_clause  */
  YYSYMBOL_opt_for_locking_clause = 869,   /* opt_for_locking_clause  */
  YYSYMBOL_for_locking_items = 870,        /* for_locking_items  */
  YYSYMBOL_for_locking_item = 871,         /* for_locking_item  */
  YYSYMBOL_for_locking_strength = 872,     /* for_locking_strength  */
  YYSYMBOL_locked_rels_list = 873,         /* locked_rels_list  */
  YYSYMBOL_opt_nowait_or_skip = 874,       /* opt_nowait_or_skip  */
  YYSYMBOL_values_clause = 875,            /* values_clause  */
  YYSYMBOL_values_clause_opt_comma = 876,  /* values_clause_opt_comma  */
  YYSYMBOL_from_clause = 877,              /* from_clause  */
  YYSYMBOL_from_list = 878,                /* from_list  */
  YYSYMBOL_from_list_opt_comma = 879,      /* from_list_opt_comma  */
  YYSYMBOL_table_ref = 880,                /* table_ref  */
  YYSYMBOL_opt_pivot_group_by = 881,       /* opt_pivot_group_by  */
  YYSYMBOL_opt_include_nulls = 882,        /* opt_include_nulls  */
  YYSYMBOL_single_pivot_value = 883,       /* single_pivot_value  */
  YYSYMBOL_pivot_header = 884,             /* pivot_header  */
  YYSYMBOL_pivot_value = 885,              /* pivot_value  */
  YYSYMBOL_pivot_value_list = 886,         /* pivot_value_list  */
  YYSYMBOL_unpivot_header = 887,           /* unpivot_header  */
  YYSYMBOL_unpivot_value = 888,            /* unpivot_value  */
  YYSYMBOL_unpivot_value_list = 889,       /* unpivot_value_list  */
  YYSYMBOL_joined_table = 890,             /* joined_table  */
  YYSYMBOL_alias_clause = 891,             /* alias_clause  */
  YYSYMBOL_opt_alias_clause = 892,         /* opt_alias_clause  */
  YYSYMBOL_func_alias_clause = 893,        /* func_alias_clause  */
  YYSYMBOL_join_type = 894,                /* join_type  */
  YYSYMBOL_join_outer = 895,               /* join_outer  */
  YYSYMBOL_join_qual = 896,                /* join_qual  */
  YYSYMBOL_relation_expr = 897,            /* relation_expr  */
  YYSYMBOL_func_table = 898,               /* func_table  */
  YYSYMBOL_rowsfrom_item = 899,            /* rowsfrom_item  */
  YYSYMBOL_rowsfrom_list = 900,            /* rowsfrom_list  */
  YYSYMBOL_opt_col_def_list = 901,         /* opt_col_def_list  */
  YYSYMBOL_opt_ordinality = 902,           /* opt_ordinality  */
  YYSYMBOL_where_clause = 903,             /* where_clause  */
  YYSYMBOL_TableFuncElementList = 904,     /* TableFuncElementList  */
  YYSYMBOL_TableFuncElement = 905,         /* TableFuncElement  */
  YYSYMBOL_opt_collate_clause = 906,       /* opt_collate_clause  */
  YYSYMBOL_colid_type_list = 907,          /* colid_type_list  */
  YYSYMBOL_RowOrStruct = 908,              /* RowOrStruct  */
  YYSYMBOL_opt_Typename = 909,             /* opt_Typename  */
  YYSYMBOL_Typename = 910,                 /* Typename  */
  YYSYMBOL_qualified_typename = 911,       /* qualified_typename  */
  YYSYMBOL_opt_array_bounds = 912,         /* opt_array_bounds  */
  YYSYMBOL_SimpleTypename = 913,           /* SimpleTypename  */
  YYSYMBOL_ConstTypename = 914,            /* ConstTypename  */
  YYSYMBOL_GenericType = 915,              /* GenericType  */
  YYSYMBOL_opt_type_modifiers = 916,       /* opt_type_modifiers  */
  YYSYMBOL_Numeric = 917,                  /* Numeric  */
  YYSYMBOL_opt_float = 918,                /* opt_float  */
  YYSYMBOL_Bit = 919,                      /* Bit  */
  YYSYMBOL_ConstBit = 920,                 /* ConstBit  */
  YYSYMBOL_BitWithLength = 921,            /* BitWithLength  */
  YYSYMBOL_BitWithoutLength = 922,         /* BitWithoutLength  */
  YYSYMBOL_Character = 923,                /* Character  */
  YYSYMBOL_ConstCharacter = 924,           /* ConstCharacter  */
  YYSYMBOL_CharacterWithLength = 925,      /* CharacterWithLength  */
  YYSYMBOL_CharacterWithoutLength = 926,   /* CharacterWithoutLength  */
  YYSYMBOL_character = 927,                /* character  */
  YYSYMBOL_opt_varying = 928,              /* opt_varying  */
  YYSYMBOL_ConstDatetime = 929,            /* ConstDatetime  */
  YYSYMBOL_ConstInterval = 930,            /* ConstInterval  */
  YYSYMBOL_opt_timezone = 931,             /* opt_timezone  */
  YYSYMBOL_year_keyword = 932,             /* year_keyword  */
  YYSYMBOL_month_keyword = 933,            /* month_keyword  */
  YYSYMBOL_day_keyword = 934,              /* day_keyword  */
  YYSYMBOL_hour_keyword = 935,             /* hour_keyword  */
  YYSYMBOL_minute_keyword = 936,           /* minute_keyword  */
  YYSYMBOL_second_keyword = 937,           /* second_keyword  */
  YYSYMBOL_millisecond_keyword = 938,      /* millisecond_keyword  */
  YYSYMBOL_microsecond_keyword = 939,      /* microsecond_keyword  */
  YYSYMBOL_week_keyword = 940,             /* week_keyword  */
  YYSYMBOL_decade_keyword = 941,           /* decade_keyword  */
  YYSYMBOL_century_keyword = 942,          /* century_keyword  */
  YYSYMBOL_millennium_keyword = 943,       /* millennium_keyword  */
  YYSYMBOL_opt_interval = 944,             /* opt_interval  */
  YYSYMBOL_a_expr = 945,                   /* a_expr  */
  YYSYMBOL_b_expr = 946,                   /* b_expr  */
  YYSYMBOL_c_expr = 947,                   /* c_expr  */
  YYSYMBOL_d_expr = 948,                   /* d_expr  */
  YYSYMBOL_indirection_expr_or_a_expr = 949, /* indirection_expr_or_a_expr  */
  YYSYMBOL_indirection_expr = 950,         /* indirection_expr  */
  YYSYMBOL_list_expr = 951,                /* list_expr  */
  YYSYMBOL_struct_expr = 952,              /* struct_expr  */
  YYSYMBOL_func_application = 953,         /* func_application  */
  YYSYMBOL_func_expr = 954,                /* func_expr  */
  YYSYMBOL_func_expr_windowless = 955,     /* func_expr_windowless  */
  YYSYMBOL_func_expr_common_subexpr = 956, /* func_expr_common_subexpr  */
  YYSYMBOL_list_comprehension = 957,       /* list_comprehension  */
  YYSYMBOL_within_group_clause = 958,      /* within_group_clause  */
  YYSYMBOL_filter_clause = 959,            /* filter_clause  */
  YYSYMBOL_export_clause = 960,            /* export_clause  */
  YYSYMBOL_window_clause = 961,            /* window_clause  */
  YYSYMBOL_window_definition_list = 962,   /* window_definition_list  */
  YYSYMBOL_window_definition = 963,        /* window_definition  */
  YYSYMBOL_over_clause = 964,              /* over_clause  */
  YYSYMBOL_window_specification = 965,     /* window_specification  */
  YYSYMBOL_opt_existing_window_name = 966, /* opt_existing_window_name  */
  YYSYMBOL_opt_partition_clause = 967,     /* opt_partition_clause  */
  YYSYMBOL_opt_frame_clause = 968,         /* opt_frame_clause  */
  YYSYMBOL_frame_extent = 969,             /* frame_extent  */
  YYSYMBOL_frame_bound = 970,              /* frame_bound  */
  YYSYMBOL_opt_window_exclusion_clause = 971, /* opt_window_exclusion_clause  */
  YYSYMBOL_qualified_row = 972,            /* qualified_row  */
  YYSYMBOL_row = 973,                      /* row  */
  YYSYMBOL_dict_arg = 974,                 /* dict_arg  */
  YYSYMBOL_dict_arguments = 975,           /* dict_arguments  */
  YYSYMBOL_dict_arguments_opt_comma = 976, /* dict_arguments_opt_comma  */
  YYSYMBOL_map_arg = 977,                  /* map_arg  */
  YYSYMBOL_map_arguments = 978,            /* map_arguments  */
  YYSYMBOL_map_arguments_opt_comma = 979,  /* map_arguments_opt_comma  */
  YYSYMBOL_opt_map_arguments_opt_comma = 980, /* opt_map_arguments_opt_comma  */
  YYSYMBOL_sub_type = 981,                 /* sub_type  */
  YYSYMBOL_all_Op = 982,                   /* all_Op  */
  YYSYMBOL_MathOp = 983,                   /* MathOp  */
  YYSYMBOL_qual_Op = 984,                  /* qual_Op  */
  YYSYMBOL_qual_all_Op = 985,              /* qual_all_Op  */
  YYSYMBOL_subquery_Op = 986,              /* subquery_Op  */
  YYSYMBOL_any_operator = 987,             /* any_operator  */
  YYSYMBOL_c_expr_list = 988,              /* c_expr_list  */
  YYSYMBOL_c_expr_list_opt_comma = 989,    /* c_expr_list_opt_comma  */
  YYSYMBOL_expr_list = 990,                /* expr_list  */
  YYSYMBOL_expr_list_opt_comma = 991,      /* expr_list_opt_comma  */
  YYSYMBOL_opt_expr_list_opt_comma = 992,  /* opt_expr_list_opt_comma  */
  YYSYMBOL_func_arg_list = 993,            /* func_arg_list  */
  YYSYMBOL_func_arg_expr = 994,            /* func_arg_expr  */
  YYSYMBOL_type_list = 995,                /* type_list  */
  YYSYMBOL_extract_list = 996,             /* extract_list  */
  YYSYMBOL_extract_arg = 997,              /* extract_arg  */
  YYSYMBOL_overlay_list = 998,             /* overlay_list  */
  YYSYMBOL_overlay_placing = 999,          /* overlay_placing  */
  YYSYMBOL_position_list = 1000,           /* position_list  */
  YYSYMBOL_substr_list = 1001,             /* substr_list  */
  YYSYMBOL_substr_from = 1002,             /* substr_from  */
  YYSYMBOL_substr_for = 1003,              /* substr_for  */
  YYSYMBOL_trim_list = 1004,               /* trim_list  */
  YYSYMBOL_in_expr = 1005,                 /* in_expr  */
  YYSYMBOL_case_expr = 1006,               /* case_expr  */
  YYSYMBOL_when_clause_list = 1007,        /* when_clause_list  */
  YYSYMBOL_when_clause = 1008,             /* when_clause  */
  YYSYMBOL_case_default = 1009,            /* case_default  */
  YYSYMBOL_case_arg = 1010,                /* case_arg  */
  YYSYMBOL_columnref = 1011,               /* columnref  */
  YYSYMBOL_opt_slice_bound = 1012,         /* opt_slice_bound  */
  YYSYMBOL_opt_indirection = 1013,         /* opt_indirection  */
  YYSYMBOL_opt_func_arguments = 1014,      /* opt_func_arguments  */
  YYSYMBOL_extended_indirection_el = 1015, /* extended_indirection_el  */
  YYSYMBOL_opt_extended_indirection = 1016, /* opt_extended_indirection  */
  YYSYMBOL_opt_asymmetric = 1017,          /* opt_asymmetric  */
  YYSYMBOL_opt_target_list_opt_comma = 1018, /* opt_target_list_opt_comma  */
  YYSYMBOL_target_list = 1019,             /* target_list  */
  YYSYMBOL_target_list_opt_comma = 1020,   /* target_list_opt_comma  */
  YYSYMBOL_target_el = 1021,               /* target_el  */
  YYSYMBOL_except_list = 1022,             /* except_list  */
  YYSYMBOL_opt_except_list = 1023,         /* opt_except_list  */
  YYSYMBOL_replace_list_el = 1024,         /* replace_list_el  */
  YYSYMBOL_replace_list = 1025,            /* replace_list  */
  YYSYMBOL_replace_list_opt_comma = 1026,  /* replace_list_opt_comma  */
  YYSYMBOL_opt_replace_list = 1027,        /* opt_replace_list  */
  YYSYMBOL_qualified_name_list = 1028,     /* qualified_name_list  */
  YYSYMBOL_name_list = 1029,               /* name_list  */
  YYSYMBOL_name_list_opt_comma = 1030,     /* name_list_opt_comma  */
  YYSYMBOL_name_list_opt_comma_opt_bracket = 1031, /* name_list_opt_comma_opt_bracket  */
  YYSYMBOL_name = 1032,                    /* name  */
  YYSYMBOL_func_name = 1033,               /* func_name  */
  YYSYMBOL_AexprConst = 1034,              /* AexprConst  */
  YYSYMBOL_Iconst = 1035,                  /* Iconst  */
  YYSYMBOL_type_function_name = 1036,      /* type_function_name  */
  YYSYMBOL_function_name_token = 1037,     /* function_name_token  */
  YYSYMBOL_type_name_token = 1038,         /* type_name_token  */
  YYSYMBOL_any_name = 1039,                /* any_name  */
  YYSYMBOL_attrs = 1040,                   /* attrs  */
  YYSYMBOL_opt_name_list = 1041,           /* opt_name_list  */
  YYSYMBOL_param_name = 1042,              /* param_name  */
  YYSYMBOL_ColLabelOrString = 1043,        /* ColLabelOrString  */
  YYSYMBOL_TransactionStmt = 1044,         /* TransactionStmt  */
  YYSYMBOL_opt_transaction = 1045,         /* opt_transaction  */
  YYSYMBOL_UpdateStmt = 1046,              /* UpdateStmt  */
  YYSYMBOL_UseStmt = 1047,                 /* UseStmt  */
  YYSYMBOL_VacuumStmt = 1048,              /* VacuumStmt  */
  YYSYMBOL_vacuum_option_elem = 1049,      /* vacuum_option_elem  */
  YYSYMBOL_opt_full = 1050,                /* opt_full  */
  YYSYMBOL_vacuum_option_list = 1051,      /* vacuum_option_list  */
  YYSYMBOL_opt_freeze = 1052,              /* opt_freeze  */
  YYSYMBOL_VariableResetStmt = 1053,       /* VariableResetStmt  */
  YYSYMBOL_generic_reset = 1054,           /* generic_reset  */
  YYSYMBOL_reset_rest = 1055,              /* reset_rest  */
  YYSYMBOL_VariableSetStmt = 1056,         /* VariableSetStmt  */
  YYSYMBOL_set_rest = 1057,                /* set_rest  */
  YYSYMBOL_generic_set = 1058,             /* generic_set  */
  YYSYMBOL_var_value = 1059,               /* var_value  */
  YYSYMBOL_zone_value = 1060,              /* zone_value  */
  YYSYMBOL_var_list = 1061,                /* var_list  */
  YYSYMBOL_VariableShowStmt = 1062,        /* VariableShowStmt  */
  YYSYMBOL_describe_or_desc = 1063,        /* describe_or_desc  */
  YYSYMBOL_show_or_describe = 1064,        /* show_or_describe  */
  YYSYMBOL_opt_tables = 1065,              /* opt_tables  */
  YYSYMBOL_var_name = 1066,                /* var_name  */
  YYSYMBOL_table_id = 1067,                /* table_id  */
  YYSYMBOL_ViewStmt = 1068,                /* ViewStmt  */
  YYSYMBOL_opt_check_option = 1069         /* opt_check_option  */
};
typedef enum yysymbol_kind_t yysymbol_kind_t;




#ifdef short
# undef short
#endif

/* On compilers that do not define __PTRDIFF_MAX__ etc., make sure
   <limits.h> and (if available) <stdint.h> are included
   so that the code can choose integer types of a good width.  */

#ifndef __PTRDIFF_MAX__
# include <limits.h> /* INFRINGES ON USER NAME SPACE */
# if defined __STDC_VERSION__ && 199901 <= __STDC_VERSION__
#  include <stdint.h> /* INFRINGES ON USER NAME SPACE */
#  define YY_STDINT_H
# endif
#endif

/* Narrow types that promote to a signed type and that can represent a
   signed or unsigned integer of at least N bits.  In tables they can
   save space and decrease cache pressure.  Promoting to a signed type
   helps avoid bugs in integer arithmetic.  */

#ifdef __INT_LEAST8_MAX__
typedef __INT_LEAST8_TYPE__ yytype_int8;
#elif defined YY_STDINT_H
typedef int_least8_t yytype_int8;
#else
typedef signed char yytype_int8;
#endif

#ifdef __INT_LEAST16_MAX__
typedef __INT_LEAST16_TYPE__ yytype_int16;
#elif defined YY_STDINT_H
typedef int_least16_t yytype_int16;
#else
typedef short yytype_int16;
#endif

/* Work around bug in HP-UX 11.23, which defines these macros
   incorrectly for preprocessor constants.  This workaround can likely
   be removed in 2023, as HPE has promised support for HP-UX 11.23
   (aka HP-UX 11i v2) only through the end of 2022; see Table 2 of
   <https://h20195.www2.hpe.com/V2/getpdf.aspx/4AA4-7673ENW.pdf>.  */
#ifdef __hpux
# undef UINT_LEAST8_MAX
# undef UINT_LEAST16_MAX
# define UINT_LEAST8_MAX 255
# define UINT_LEAST16_MAX 65535
#endif

#if defined __UINT_LEAST8_MAX__ && __UINT_LEAST8_MAX__ <= __INT_MAX__
typedef __UINT_LEAST8_TYPE__ yytype_uint8;
#elif (!defined __UINT_LEAST8_MAX__ && defined YY_STDINT_H \
       && UINT_LEAST8_MAX <= INT_MAX)
typedef uint_least8_t yytype_uint8;
#elif !defined __UINT_LEAST8_MAX__ && UCHAR_MAX <= INT_MAX
typedef unsigned char yytype_uint8;
#else
typedef short yytype_uint8;
#endif

#if defined __UINT_LEAST16_MAX__ && __UINT_LEAST16_MAX__ <= __INT_MAX__
typedef __UINT_LEAST16_TYPE__ yytype_uint16;
#elif (!defined __UINT_LEAST16_MAX__ && defined YY_STDINT_H \
       && UINT_LEAST16_MAX <= INT_MAX)
typedef uint_least16_t yytype_uint16;
#elif !defined __UINT_LEAST16_MAX__ && USHRT_MAX <= INT_MAX
typedef unsigned short yytype_uint16;
#else
typedef int yytype_uint16;
#endif

#ifndef YYPTRDIFF_T
# if defined __PTRDIFF_TYPE__ && defined __PTRDIFF_MAX__
#  define YYPTRDIFF_T __PTRDIFF_TYPE__
#  define YYPTRDIFF_MAXIMUM __PTRDIFF_MAX__
# elif defined PTRDIFF_MAX
#  ifndef ptrdiff_t
#   include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  endif
#  define YYPTRDIFF_T ptrdiff_t
#  define YYPTRDIFF_MAXIMUM PTRDIFF_MAX
# else
#  define YYPTRDIFF_T long
#  define YYPTRDIFF_MAXIMUM LONG_MAX
# endif
#endif

#ifndef YYSIZE_T
# ifdef __SIZE_TYPE__
#  define YYSIZE_T __SIZE_TYPE__
# elif defined size_t
#  define YYSIZE_T size_t
# elif defined __STDC_VERSION__ && 199901 <= __STDC_VERSION__
#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  define YYSIZE_T size_t
# else
#  define YYSIZE_T unsigned
# endif
#endif

#define YYSIZE_MAXIMUM                                  \
  YY_CAST (YYPTRDIFF_T,                                 \
           (YYPTRDIFF_MAXIMUM < YY_CAST (YYSIZE_T, -1)  \
            ? YYPTRDIFF_MAXIMUM                         \
            : YY_CAST (YYSIZE_T, -1)))

#define YYSIZEOF(X) YY_CAST (YYPTRDIFF_T, sizeof (X))


/* Stored state numbers (used for stacks). */
typedef yytype_int16 yy_state_t;

/* State numbers in computations.  */
typedef int yy_state_fast_t;

#ifndef YY_
# if defined YYENABLE_NLS && YYENABLE_NLS
#  if ENABLE_NLS
#   include <libintl.h> /* INFRINGES ON USER NAME SPACE */
#   define YY_(Msgid) dgettext ("bison-runtime", Msgid)
#  endif
# endif
# ifndef YY_
#  define YY_(Msgid) Msgid
# endif
#endif


#ifndef YY_ATTRIBUTE_PURE
# if defined __GNUC__ && 2 < __GNUC__ + (96 <= __GNUC_MINOR__)
#  define YY_ATTRIBUTE_PURE __attribute__ ((__pure__))
# else
#  define YY_ATTRIBUTE_PURE
# endif
#endif

#ifndef YY_ATTRIBUTE_UNUSED
# if defined __GNUC__ && 2 < __GNUC__ + (7 <= __GNUC_MINOR__)
#  define YY_ATTRIBUTE_UNUSED __attribute__ ((__unused__))
# else
#  define YY_ATTRIBUTE_UNUSED
# endif
#endif

/* Suppress unused-variable warnings by "using" E.  */
#if ! defined lint || defined __GNUC__
# define YY_USE(E) ((void) (E))
#else
# define YY_USE(E) /* empty */
#endif

/* Suppress an incorrect diagnostic about yylval being uninitialized.  */
#if defined __GNUC__ && ! defined __ICC && 406 <= __GNUC__ * 100 + __GNUC_MINOR__
# if __GNUC__ * 100 + __GNUC_MINOR__ < 407
#  define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN                           \
    _Pragma ("GCC diagnostic push")                                     \
    _Pragma ("GCC diagnostic ignored \"-Wuninitialized\"")
# else
#  define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN                           \
    _Pragma ("GCC diagnostic push")                                     \
    _Pragma ("GCC diagnostic ignored \"-Wuninitialized\"")              \
    _Pragma ("GCC diagnostic ignored \"-Wmaybe-uninitialized\"")
# endif
# define YY_IGNORE_MAYBE_UNINITIALIZED_END      \
    _Pragma ("GCC diagnostic pop")
#else
# define YY_INITIAL_VALUE(Value) Value
#endif
#ifndef YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_END
#endif
#ifndef YY_INITIAL_VALUE
# define YY_INITIAL_VALUE(Value) /* Nothing. */
#endif

#if defined __cplusplus && defined __GNUC__ && ! defined __ICC && 6 <= __GNUC__
# define YY_IGNORE_USELESS_CAST_BEGIN                          \
    _Pragma ("GCC diagnostic push")                            \
    _Pragma ("GCC diagnostic ignored \"-Wuseless-cast\"")
# define YY_IGNORE_USELESS_CAST_END            \
    _Pragma ("GCC diagnostic pop")
#endif
#ifndef YY_IGNORE_USELESS_CAST_BEGIN
# define YY_IGNORE_USELESS_CAST_BEGIN
# define YY_IGNORE_USELESS_CAST_END
#endif


#define YY_ASSERT(E) ((void) (0 && (E)))

#if !defined yyoverflow

/* The parser invokes alloca or malloc; define the necessary symbols.  */

# ifdef YYSTACK_USE_ALLOCA
#  if YYSTACK_USE_ALLOCA
#   ifdef __GNUC__
#    define YYSTACK_ALLOC __builtin_alloca
#   elif defined __BUILTIN_VA_ARG_INCR
#    include <alloca.h> /* INFRINGES ON USER NAME SPACE */
#   elif defined _AIX
#    define YYSTACK_ALLOC __alloca
#   elif defined _MSC_VER
#    include <malloc.h> /* INFRINGES ON USER NAME SPACE */
#    define alloca _alloca
#   else
#    define YYSTACK_ALLOC alloca
#    if ! defined _ALLOCA_H && ! defined EXIT_SUCCESS
#     include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
      /* Use EXIT_SUCCESS as a witness for stdlib.h.  */
#     ifndef EXIT_SUCCESS
#      define EXIT_SUCCESS 0
#     endif
#    endif
#   endif
#  endif
# endif

# ifdef YYSTACK_ALLOC
   /* Pacify GCC's 'empty if-body' warning.  */
#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (0)
#  ifndef YYSTACK_ALLOC_MAXIMUM
    /* The OS might guarantee only one guard page at the bottom of the stack,
       and a page size can be as small as 4096 bytes.  So we cannot safely
       invoke alloca (N) if N exceeds 4096.  Use a slightly smaller number
       to allow for a few compiler-allocated temporary stack slots.  */
#   define YYSTACK_ALLOC_MAXIMUM 4032 /* reasonable circa 2006 */
#  endif
# else
#  define YYSTACK_ALLOC YYMALLOC
#  define YYSTACK_FREE YYFREE
#  ifndef YYSTACK_ALLOC_MAXIMUM
#   define YYSTACK_ALLOC_MAXIMUM YYSIZE_MAXIMUM
#  endif
#  if (defined __cplusplus && ! defined EXIT_SUCCESS \
       && ! ((defined YYMALLOC || defined malloc) \
             && (defined YYFREE || defined free)))
#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#   ifndef EXIT_SUCCESS
#    define EXIT_SUCCESS 0
#   endif
#  endif
#  ifndef YYMALLOC
#   define YYMALLOC malloc
#   if ! defined malloc && ! defined EXIT_SUCCESS
void *malloc (YYSIZE_T); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
#  ifndef YYFREE
#   define YYFREE free
#   if ! defined free && ! defined EXIT_SUCCESS
void free (void *); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
# endif
#endif /* !defined yyoverflow */

#if (! defined yyoverflow \
     && (! defined __cplusplus \
         || (defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL \
             && defined YYSTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))

/* A type that is properly aligned for any stack member.  */
union yyalloc
{
  yy_state_t yyss_alloc;
  YYSTYPE yyvs_alloc;
  YYLTYPE yyls_alloc;
};

/* The size of the maximum gap between one aligned stack and the next.  */
# define YYSTACK_GAP_MAXIMUM (YYSIZEOF (union yyalloc) - 1)

/* The size of an array large to enough to hold all stacks, each with
   N elements.  */
# define YYSTACK_BYTES(N) \
     ((N) * (YYSIZEOF (yy_state_t) + YYSIZEOF (YYSTYPE) \
             + YYSIZEOF (YYLTYPE)) \
      + 2 * YYSTACK_GAP_MAXIMUM)

# define YYCOPY_NEEDED 1

/* Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */
# define YYSTACK_RELOCATE(Stack_alloc, Stack)                           \
    do                                                                  \
      {                                                                 \
        YYPTRDIFF_T yynewbytes;                                         \
        YYCOPY (&yyptr->Stack_alloc, Stack, yysize);                    \
        Stack = &yyptr->Stack_alloc;                                    \
        yynewbytes = yystacksize * YYSIZEOF (*Stack) + YYSTACK_GAP_MAXIMUM; \
        yyptr += yynewbytes / YYSIZEOF (*yyptr);                        \
      }                                                                 \
    while (0)

#endif

#if defined YYCOPY_NEEDED && YYCOPY_NEEDED
/* Copy COUNT objects from SRC to DST.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if defined __GNUC__ && 1 < __GNUC__
#   define YYCOPY(Dst, Src, Count) \
      __builtin_memcpy (Dst, Src, YY_CAST (YYSIZE_T, (Count)) * sizeof (*(Src)))
#  else
#   define YYCOPY(Dst, Src, Count)              \
      do                                        \
        {                                       \
          YYPTRDIFF_T yyi;                      \
          for (yyi = 0; yyi < (Count); yyi++)   \
            (Dst)[yyi] = (Src)[yyi];            \
        }                                       \
      while (0)
#  endif
# endif
#endif /* !YYCOPY_NEEDED */

/* YYFINAL -- State number of the termination state.  */
#define YYFINAL  953
/* YYLAST -- Last index in YYTABLE.  */
#define YYLAST   80494

/* YYNTOKENS -- Number of terminals.  */
#define YYNTOKENS  547
/* YYNNTS -- Number of nonterminals.  */
#define YYNNTS  523
/* YYNRULES -- Number of rules.  */
#define YYNRULES  2390
/* YYNSTATES -- Number of states.  */
#define YYNSTATES  3984

/* YYMAXUTOK -- Last valid token kind.  */
#define YYMAXUTOK   776


/* YYTRANSLATE(TOKEN-NUM) -- Symbol number corresponding to TOKEN-NUM
   as returned by yylex, with out-of-bounds checking.  */
#define YYTRANSLATE(YYX)                                \
  (0 <= (YYX) && (YYX) <= YYMAXUTOK                     \
   ? YY_CAST (yysymbol_kind_t, yytranslate[YYX])        \
   : YYSYMBOL_YYUNDEF)

/* YYTRANSLATE[TOKEN-NUM] -- Symbol number corresponding to TOKEN-NUM
   as returned by yylex.  */
static const yytype_int16 yytranslate[] =
{
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   543,     2,   545,   546,   528,   542,     2,
     533,   534,   526,   524,   537,   525,   535,   527,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,   544,   536,
     520,   522,   521,   539,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,   531,     2,   532,   529,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   540,   538,   541,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
     125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
     135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,   163,   164,
     165,   166,   167,   168,   169,   170,   171,   172,   173,   174,
     175,   176,   177,   178,   179,   180,   181,   182,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,   196,   197,   198,   199,   200,   201,   202,   203,   204,
     205,   206,   207,   208,   209,   210,   211,   212,   213,   214,
     215,   216,   217,   218,   219,   220,   221,   222,   223,   224,
     225,   226,   227,   228,   229,   230,   231,   232,   233,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,   517,   518,   519,   523,   530
};

#if YYDEBUG
/* YYRLINE[YYN] -- Source line where rule number YYN was defined.  */
static const yytype_int16 yyrline[] =
{
       0,   564,   564,   580,   592,   601,   602,   603,   604,   605,
     606,   607,   608,   609,   610,   611,   612,   613,   614,   615,
     616,   617,   618,   619,   620,   621,   622,   623,   624,   625,
     626,   627,   628,   629,   630,   631,   632,   633,   634,   635,
     636,   637,   638,   639,   640,   641,   642,   643,   645,     9,
      18,    27,    36,    45,    54,    63,    72,    85,    87,    93,
      94,    99,   103,   107,   118,   126,   130,   139,   148,   157,
     166,   175,   184,   192,   200,   209,   218,   227,   236,   253,
     262,   271,   280,   290,   303,   318,   327,   335,   350,   358,
     368,   378,   385,   392,   400,   407,   418,   419,   424,   428,
     433,   438,   446,   447,   452,   456,   457,   458,     7,    13,
      19,    25,     9,    13,    44,    45,    46,    47,    51,    52,
      56,    60,    61,    65,    71,    76,    77,    78,    79,    80,
       6,    15,    25,    35,    45,    55,    65,    75,    85,    95,
     106,   117,   127,   140,   141,     9,    23,    29,    36,    42,
      49,    59,    63,    71,    72,    73,    77,    86,    95,   102,
     103,   108,   120,   125,   150,   155,   160,   166,   176,   186,
     192,   203,   214,   229,   230,   236,   237,   242,   243,   249,
     250,   254,   255,   260,   262,   268,   269,   273,   274,   277,
     278,   283,     7,    16,    25,    46,    47,    50,    54,     7,
      14,    22,     9,    19,    29,    42,    43,     7,    17,    27,
      40,    41,    45,    46,    47,    51,    52,     7,    14,    31,
      51,    55,    65,    69,    75,    76,     9,    17,    29,    30,
      34,    35,    36,    41,    42,    43,    48,    52,    56,    60,
      64,    68,    72,    76,    80,    84,    88,    92,    97,   101,
     105,   112,   113,   117,   118,   119,     7,    16,    28,    29,
       2,     9,    15,    21,    28,    35,    45,    46,    47,     2,
      40,    41,    42,    50,    64,    66,    70,    72,    76,    78,
      82,    95,   110,   113,   117,   121,   125,   129,   130,   134,
     135,   139,   148,   158,   172,   175,   179,   202,   203,   208,
     210,   214,   216,   220,   222,   227,   230,   234,   240,   244,
     246,   249,   258,   260,   264,   266,   270,   273,   281,   318,
     320,   324,   324,   324,   328,   330,   332,   336,   338,   342,
     344,   346,   348,   350,   354,   356,   360,   372,   384,   396,
     408,   421,   435,   437,   442,   467,   469,   473,   475,   480,
     489,   498,   507,   517,   527,   529,   533,   535,   539,   550,
     559,   571,   580,   582,   586,   609,   611,   615,   617,   628,
     630,   641,   643,   654,   656,   665,   676,   684,   693,   697,
     699,   703,   705,   711,   713,   715,   719,   721,   725,   731,
     739,   741,   745,   756,   772,   799,   832,   833,   835,   843,
     858,   860,   862,   864,   866,   868,   870,   872,   874,   876,
     878,   880,   882,   884,   886,   889,   891,   893,   895,   897,
     899,   904,   909,   916,   921,   928,   933,   940,   945,   953,
     961,   969,   977,   995,  1003,  1011,  1019,  1027,  1035,  1043,
    1047,  1063,  1071,  1079,  1087,  1095,  1103,  1111,  1115,  1119,
    1123,  1127,  1135,  1143,  1151,  1159,  1179,     7,    21,    36,
      56,    57,    84,    85,    86,    87,    88,    89,    93,    94,
      99,   104,   105,   106,   107,   108,   113,   120,   121,   122,
     139,   146,   153,   163,   173,   185,   193,   202,   220,   221,
     225,   226,   230,   239,   262,   276,   283,   288,   290,   292,
     294,   297,   300,   301,   302,   303,   308,   312,   313,   318,
     325,   330,   331,   332,   333,   334,   335,   336,   337,   343,
     344,   348,   353,   360,   367,   374,   386,   387,   388,   389,
     393,   398,   399,   400,   405,   410,   411,   412,   413,   414,
     415,   420,   440,   469,   470,   474,   478,   479,   480,   484,
     488,   496,   497,   502,   503,   504,   508,   516,   517,   522,
     523,   527,   532,   536,   540,   545,   553,   554,   558,   559,
     563,   564,   570,   581,   594,   608,   622,   636,   650,   673,
     677,   684,   688,   696,   701,   708,   718,   719,   720,   721,
     722,   729,   736,   737,   742,   743,     9,    19,    29,    39,
      49,    59,    73,    74,    75,    76,    77,    78,    79,    80,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      95,    96,    97,    98,    99,   100,   105,   106,   111,   112,
     113,   118,   119,   120,     8,    20,    33,    46,    58,    70,
      86,    87,    91,    95,     7,     1,    30,    49,    61,    62,
      63,    67,    68,    73,    77,    82,    86,    94,    95,    99,
     100,   105,   106,   110,   111,   116,   117,   118,   119,   120,
     121,   122,   127,   135,   139,   144,   145,   150,   154,   159,
     163,   167,   171,   175,   179,   183,   187,   191,   195,   199,
     203,   207,   211,   215,   219,   227,   232,   233,   234,   235,
     236,   242,   246,    47,    48,    52,    53,    54,    72,    73,
      80,    88,    96,   104,   112,   120,   131,   132,   159,   164,
     172,   188,   205,   222,   239,   240,   259,   263,   267,   271,
     275,   285,   296,   306,   315,   326,   337,   349,   364,   382,
     382,   386,   386,   390,   390,   394,   400,   407,   411,   412,
     416,   417,   431,   438,   445,   455,   456,   459,   472,   473,
     474,   478,   489,   497,   502,   507,   512,   517,   525,   533,
     538,   543,   550,   551,   555,   556,   557,   561,   568,   569,
     573,   574,   578,   579,   580,   584,   585,   589,   590,   606,
     607,   610,   619,   630,   631,   632,   635,   636,   637,   641,
     642,   643,   644,   648,   649,   653,   655,   671,   673,   678,
     681,   689,   693,   697,   701,   705,   709,   716,   721,   728,
     729,   733,   738,   742,   746,   754,   761,   762,   767,   768,
     772,   773,   778,   780,   782,   787,   807,   808,   810,   815,
     816,   820,   821,   824,   825,   850,   851,   856,   860,   861,
     865,   866,   870,   871,   872,   873,   874,   878,   891,   898,
     905,   912,   913,   917,   918,   922,   923,   927,   928,   932,
     933,   937,   938,   942,   953,   954,   955,   956,   960,   961,
     966,   967,   968,   977,   983,   992,   993,  1006,  1007,  1011,
    1012,  1016,  1017,  1023,  1029,  1037,  1046,  1054,  1063,  1072,
    1076,  1081,  1085,  1096,  1110,  1111,  1114,  1115,  1116,  1119,
    1127,  1136,  1137,  1138,  1139,  1142,  1150,  1159,  1163,  1170,
    1171,  1175,  1184,  1188,  1213,  1217,  1230,  1244,  1259,  1271,
    1284,  1298,  1312,  1325,  1340,  1359,  1365,  1370,  1376,  1383,
    1384,  1392,  1396,  1400,  1406,  1413,  1418,  1419,  1420,  1421,
    1422,  1423,  1427,  1428,  1440,  1441,  1446,  1453,  1460,  1467,
    1499,  1510,  1523,  1528,  1529,  1532,  1533,  1536,  1537,  1542,
    1543,  1548,  1552,  1558,  1579,  1587,  1600,  1603,  1607,  1607,
    1610,  1611,  1613,  1618,  1625,  1630,  1636,  1641,  1647,  1651,
    1658,  1665,  1675,  1676,  1680,  1682,  1685,  1689,  1690,  1691,
    1692,  1693,  1694,  1699,  1719,  1720,  1721,  1722,  1733,  1747,
    1748,  1754,  1759,  1764,  1769,  1774,  1779,  1784,  1789,  1795,
    1801,  1807,  1814,  1836,  1845,  1849,  1857,  1861,  1869,  1881,
    1902,  1906,  1912,  1916,  1929,  1937,  1947,  1949,  1951,  1953,
    1955,  1957,  1962,  1963,  1970,  1979,  1987,  1996,  2007,  2015,
    2016,  2017,  2021,  2021,  2024,  2024,  2027,  2027,  2030,  2030,
    2033,  2033,  2036,  2036,  2039,  2039,  2042,  2042,  2045,  2045,
    2048,  2048,  2051,  2051,  2054,  2054,  2057,  2059,  2061,  2063,
    2065,  2067,  2069,  2071,  2073,  2075,  2077,  2079,  2081,  2086,
    2091,  2097,  2104,  2109,  2115,  2121,  2152,  2154,  2156,  2164,
    2179,  2181,  2183,  2185,  2187,  2189,  2191,  2193,  2195,  2197,
    2199,  2201,  2203,  2205,  2207,  2209,  2212,  2214,  2216,  2219,
    2221,  2223,  2225,  2227,  2232,  2237,  2244,  2249,  2256,  2261,
    2268,  2273,  2281,  2289,  2297,  2305,  2323,  2331,  2339,  2347,
    2355,  2363,  2371,  2375,  2391,  2399,  2407,  2415,  2423,  2431,
    2439,  2443,  2447,  2451,  2455,  2463,  2471,  2479,  2487,  2507,
    2529,  2540,  2547,  2561,  2569,  2577,  2597,  2599,  2601,  2603,
    2605,  2607,  2609,  2611,  2613,  2615,  2617,  2619,  2621,  2623,
    2625,  2627,  2629,  2631,  2633,  2635,  2637,  2639,  2643,  2647,
    2651,  2665,  2666,  2680,  2681,  2682,  2693,  2717,  2728,  2738,
    2742,  2746,  2753,  2757,  2764,  2768,  2785,  2789,  2791,  2794,
    2797,  2808,  2813,  2820,  2826,  2832,  2841,  2845,  2852,  2860,
    2868,  2879,  2899,  2935,  2946,  2947,  2954,  2960,  2962,  2964,
    2968,  2977,  2982,  2989,  3004,  3011,  3015,  3019,  3023,  3027,
    3037,  3046,  3068,  3069,  3073,  3074,  3075,  3079,  3080,  3087,
    3088,  3092,  3093,  3098,  3106,  3108,  3122,  3125,  3152,  3153,
    3156,  3157,  3165,  3173,  3181,  3190,  3200,  3218,  3264,  3273,
    3282,  3291,  3300,  3312,  3313,  3314,  3315,  3316,  3330,  3331,
    3334,  3335,  3340,  3350,  3351,  3355,  3356,  3360,  3367,  3368,
    3373,  3374,  3379,  3380,  3383,  3384,  3385,  3388,  3389,  3392,
    3393,  3394,  3395,  3396,  3397,  3398,  3399,  3400,  3401,  3402,
    3403,  3404,  3405,  3408,  3410,  3415,  3417,  3422,  3424,  3426,
    3428,  3430,  3432,  3434,  3436,  3450,  3452,  3457,  3461,  3468,
    3473,  3479,  3483,  3490,  3495,  3502,  3507,  3515,  3519,  3525,
    3529,  3538,  3549,  3550,  3554,  3558,  3565,  3566,  3567,  3568,
    3569,  3570,  3571,  3572,  3573,  3574,  3575,  3576,  3577,  3578,
    3588,  3592,  3599,  3606,  3607,  3623,  3627,  3632,  3636,  3651,
    3656,  3660,  3663,  3666,  3667,  3668,  3671,  3678,  3688,  3702,
    3703,  3707,  3718,  3719,  3722,  3723,  3726,  3730,  3737,  3745,
    3753,  3761,  3771,  3772,  3777,  3778,  3782,  3783,  3784,  3788,
    3797,  3805,  3813,  3822,  3837,  3838,  3843,  3844,  3854,  3855,
    3859,  3860,  3864,  3865,  3868,  3884,  3892,  3902,  3903,  3906,
    3907,  3910,  3914,  3915,  3919,  3920,  3923,  3924,  3925,  3935,
    3936,  3940,  3942,  3948,  3949,  3953,  3954,  3957,  3968,  3971,
    3982,  3986,  3990,  4002,  4006,  4015,  4022,  4060,  4064,  4068,
    4072,  4076,  4080,  4084,  4090,  4107,  4108,  4109,  4110,  4114,
    4115,  4116,  4117,  4121,  4122,  4123,  4124,  4128,  4129,  4132,
    4134,  4139,  4140,  4143,  4147,  4148,     7,    18,    19,    23,
      24,    25,    26,    27,    28,     7,    26,    50,    73,    80,
      85,    86,    87,    88,     8,    33,    62,    66,    67,    72,
      73,    78,    79,    83,    84,    89,    90,     7,    16,    25,
      34,    43,    52,     5,    12,    22,    23,     7,    15,    26,
      27,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,     7,    19,    33,     9,    16,    26,    33,    44,    45,
      50,    51,    52,    57,    58,    59,    60,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
      74,    75,    76,    77,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    90,    91,    92,    93,    98,    99,   104,
     108,   116,   117,   122,   123,   124,   130,   135,   143,   144,
      10,    16,    22,    28,    38,    39,    47,    58,    70,    78,
      89,    95,    99,   103,   118,   125,   126,   127,   131,   132,
       7,    15,    22,    29,    36,    45,    46,    48,    49,     8,
      22,    36,    48,    56,    70,    71,    72,    73,    74,    87,
      88,    93,    94,    98,    99,     7,    18,    31,    35,    42,
      53,    54,    60,    61,     9,    19,     7,    16,    28,    35,
      42,    51,    52,    56,    57,     2,     7,    12,    17,    26,
      33,    43,    44,    51,     3,    10,    17,    24,    31,    38,
      45,    52,    59,    68,    68,    70,    70,    72,    72,    74,
      75,    79,    80,     6,     8,    21,    34,    47,    65,    87,
      88,    89,    90,    11,    24,    37,    54,    55,    56,    61,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    75,    75,    75,
      75,    75,    75,    75,    75,    75,    75,    75,    75,    75,
      75,    75,    75,    75,    75,    75,    75,    75,    75,    75,
      75,    75,    75,    75,    75,    75,    75,    75,    75,    75,
      75,    75,    75,    75,    75,    75,    75,    75,    75,    75,
      75,    75,    75,    75,    75,    75,    75,    75,    75,    75,
      75,    76,    76,    76,    76,    76,    76,    76,    76,    76,
      76,    76,    76,    76,    76,    76,    76,    76,    76,    76,
      76,    76,    76,    76,    76,    76,    76,    76,    76,    77,
      77,    77,    77,    77,    77,    77,    77,    77,    77,    77,
      77,    77,    77,    77,    77,    77,    77,    77,    77,    77,
      77,    77,    77,    77,    77,    77,    77,    77,    78,    78,
      78,    78,    78,    78,    78,    78,    78,    78,    78,    78,
      78,    78,    78,    78,    78,    78,    78,    78,    78,    78,
      78,    78,    78,    78,    78,    78,    78,    78,    78,    78,
      78,    78,    78,    78,    78,    78,    78,    78,    78,    78,
      78,    78,    78,    78,    78,    78,    78,    78,    78,    78,
      78,    78,    78,    78,    78,    78,    78,    78,    78,    78,
      78,    78,    78,    78,    78,    78,    78,    78,    78,    78,
      78,    78,    78,    78,    78,    78,    78,    78,    78,    79,
      79,    79,    79,    79,    79,    79,    79,    79,    79,    79,
      79,    79,    79,    79,    79,    79,    79,    79,    79,    79,
      79,    79,    79,    79,    79,    79,    79,    79,    79,    79,
      79,    80,    80,    80,    80,    80,    80,    80,    80,    80,
      80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
      80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
      80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
      80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
      80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
      80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
      80,    80,    80,    80,    80,    80,    80,    81,    81,    81,
      81,    81,    81,    81,    81,    81,    81,    81,    81,    81,
      81,    81,    81,    81,    81,    81,    81,    81,    82,    82,
      82,    82,    82,    82,    82,    82,    82,    82,    82,    82,
      82,    82,    82,    82,    82,    82,    82,    82,    82,    82,
      82,    82,    82,    82,    82,    82,    82,    82,    82,    82,
      82,    82,    82,    82,    82,    82,    82,    82,    82,    82,
      82,    82,    82,    82,    82,    82,    82,    82,    82,    82,
      82
};
#endif

/** Accessing symbol of state STATE.  */
#define YY_ACCESSING_SYMBOL(State) YY_CAST (yysymbol_kind_t, yystos[State])

#if YYDEBUG || 0
/* The user-facing name of the symbol whose (internal) number is
   YYSYMBOL.  No bounds checking.  */
static const char *yysymbol_name (yysymbol_kind_t yysymbol) YY_ATTRIBUTE_UNUSED;

/* YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
   First, the terminals, then, starting at YYNTOKENS, nonterminals.  */
static const char *const yytname[] =
{
  "\"end of file\"", "error", "\"invalid token\"", "IDENT", "FCONST",
  "SCONST", "BCONST", "XCONST", "Op", "ICONST", "PARAM", "TYPECAST",
  "DOT_DOT", "COLON_EQUALS", "EQUALS_GREATER", "INTEGER_DIVISION",
  "POWER_OF", "LAMBDA_ARROW", "DOUBLE_ARROW", "LESS_EQUALS",
  "GREATER_EQUALS", "NOT_EQUALS", "ABORT_P", "ABSOLUTE_P", "ACCESS",
  "ACTION", "ACYCLIC", "ADD_P", "ADMIN", "AFTER", "AGGREGATE", "ALL",
  "ALSO", "ALTER", "ALWAYS", "ANALYSE", "ANALYZE", "AND", "ANTI", "ANY",
  "ARE", "ARRAY", "AS", "ASC_P", "ASOF", "ASSERTION", "ASSIGNMENT",
  "ASYMMETRIC", "AT", "ATTACH", "ATTRIBUTE", "AUTHORIZATION", "BACKWARD",
  "BEFORE", "BEGIN_P", "BETWEEN", "BIGINT", "BINARY", "BIT", "BOOLEAN_P",
  "BOTH", "BY", "CACHE", "CALL_P", "CALLED", "CASCADE", "CASCADED", "CASE",
  "CAST", "CATALOG_P", "CENTURIES_P", "CENTURY_P", "CHAIN", "CHAR_P",
  "CHARACTER", "CHARACTERISTICS", "CHECK_P", "CHECKPOINT", "CLASS",
  "CLOSE", "CLUSTER", "COALESCE", "COLLATE", "COLLATION", "COLUMN",
  "COLUMNS", "COMMENT", "COMMENTS", "COMMIT", "COMMITTED", "COMPRESSION",
  "CONCURRENTLY", "CONFIGURATION", "CONFLICT", "CONNECTION", "CONSTRAINT",
  "CONSTRAINTS", "CONTENT_P", "CONTINUE_P", "CONVERSION_P", "COPY", "COST",
  "CREATE_P", "CROSS", "CSV", "CUBE", "CURRENT_P", "CURSOR", "CYCLE",
  "DATA_P", "DATABASE", "DAY_P", "DAYS_P", "DEALLOCATE", "DEC", "DECADE_P",
  "DECADES_P", "DECIMAL_P", "DECLARE", "DEFAULT", "DEFAULTS", "DEFERRABLE",
  "DEFERRED", "DEFINER", "DELETE_P", "DELIMITER", "DELIMITERS", "DEPENDS",
  "DESC_P", "DESCRIBE", "DESTINATION", "DETACH", "DICTIONARY", "DISABLE_P",
  "DISCARD", "DISTINCT", "DO", "DOCUMENT_P", "DOMAIN_P", "DOUBLE_P",
  "DROP", "EACH", "EDGE", "ELEMENT_ID", "ELSE", "ENABLE_P", "ENCODING",
  "ENCRYPTED", "END_P", "ENUM_P", "ESCAPE", "EVENT", "EXCEPT", "EXCLUDE",
  "EXCLUDING", "EXCLUSIVE", "EXECUTE", "EXISTS", "EXPLAIN", "EXPORT_P",
  "EXPORT_STATE", "EXTENSION", "EXTERNAL", "EXTRACT", "FALSE_P", "FAMILY",
  "FETCH", "FILTER", "FIRST_P", "FLOAT_P", "FOLLOWING", "FOR", "FORCE",
  "FOREIGN", "FORWARD", "FREEZE", "FROM", "FULL", "FUNCTION", "FUNCTIONS",
  "GENERATED", "GLOB", "GLOBAL", "GRANT", "GRANTED", "GRAPH",
  "GRAPH_TABLE", "GROUP_P", "GROUPING", "GROUPING_ID", "GROUPS", "HANDLER",
  "HAVING", "HEADER_P", "HOLD", "HOUR_P", "HOURS_P", "IDENTITY_P", "IF_P",
  "IGNORE_P", "ILIKE", "IMMEDIATE", "IMMUTABLE", "IMPLICIT_P", "IMPORT_P",
  "IN_P", "INCLUDE_P", "INCLUDING", "INCREMENT", "INDEX", "INDEXES",
  "INHERIT", "INHERITS", "INITIALLY", "INLINE_P", "INNER_P", "INOUT",
  "INPUT_P", "INSENSITIVE", "INSERT", "INSTALL", "INSTEAD", "INT_P",
  "INTEGER", "INTERSECT", "INTERVAL", "INTO", "INVOKER", "IS", "ISNULL",
  "ISOLATION", "JOIN", "JSON", "KEEP", "KEY", "LABEL", "LANGUAGE",
  "LARGE_P", "LAST_P", "LATERAL_P", "LEADING", "LEAKPROOF", "LEFT",
  "LEVEL", "LIKE", "LIMIT", "LISTEN", "LOAD", "LOCAL", "LOCATION",
  "LOCK_P", "LOCKED", "LOGGED", "MACRO", "MAP", "MAPPING", "MATCH",
  "MATERIALIZED", "MAXVALUE", "METHOD", "MICROSECOND_P", "MICROSECONDS_P",
  "MILLENNIA_P", "MILLENNIUM_P", "MILLISECOND_P", "MILLISECONDS_P",
  "MINUTE_P", "MINUTES_P", "MINVALUE", "MODE", "MONTH_P", "MONTHS_P",
  "MOVE", "NAME_P", "NAMES", "NATIONAL", "NATURAL", "NCHAR", "NEW", "NEXT",
  "NO", "NODE", "NONE", "NOT", "NOTHING", "NOTIFY", "NOTNULL", "NOWAIT",
  "NULL_P", "NULLIF", "NULLS_P", "NUMERIC", "OBJECT_P", "OF", "OFF",
  "OFFSET", "OIDS", "OLD", "ON", "ONLY", "OPERATOR", "OPTION", "OPTIONS",
  "OR", "ORDER", "ORDINALITY", "OTHERS", "OUT_P", "OUTER_P", "OVER",
  "OVERLAPS", "OVERLAY", "OVERRIDING", "OWNED", "OWNER", "PARALLEL",
  "PARSER", "PARTIAL", "PARTITION", "PASSING", "PASSWORD", "PATH", "PATHS",
  "PERCENT", "PERSISTENT", "PIVOT", "PIVOT_LONGER", "PIVOT_WIDER",
  "PLACING", "PLANS", "POLICY", "POSITION", "POSITIONAL", "PRAGMA_P",
  "PRECEDING", "PRECISION", "PREPARE", "PREPARED", "PRESERVE", "PRIMARY",
  "PRIOR", "PRIVILEGES", "PROCEDURAL", "PROCEDURE", "PROGRAM",
  "PROPERTIES", "PROPERTY", "PUBLICATION", "QUALIFY", "QUOTE", "RANGE",
  "READ_P", "REAL", "REASSIGN", "RECHECK", "RECURSIVE", "REF",
  "REFERENCES", "REFERENCING", "REFRESH", "REINDEX", "RELATIONSHIP",
  "RELATIVE_P", "RELEASE", "RENAME", "REPEATABLE", "REPLACE", "REPLICA",
  "RESET", "RESPECT_P", "RESTART", "RESTRICT", "RETURNING", "RETURNS",
  "REVOKE", "RIGHT", "ROLE", "ROLLBACK", "ROLLUP", "ROW", "ROWS", "RULE",
  "SAMPLE", "SAVEPOINT", "SCHEMA", "SCHEMAS", "SCOPE", "SCROLL", "SEARCH",
  "SECOND_P", "SECONDS_P", "SECRET", "SECURITY", "SELECT", "SEMI",
  "SEQUENCE", "SEQUENCES", "SERIALIZABLE", "SERVER", "SESSION", "SET",
  "SETOF", "SETS", "SHARE", "SHORTEST", "SHOW", "SIMILAR", "SIMPLE",
  "SKIP", "SMALLINT", "SNAPSHOT", "SOME", "SOURCE", "SQL_P", "STABLE",
  "STANDALONE_P", "START", "STATEMENT", "STATISTICS", "STDIN", "STDOUT",
  "STORAGE", "STORED", "STRICT_P", "STRIP_P", "STRUCT", "SUBSCRIPTION",
  "SUBSTRING", "SUMMARIZE", "SYMMETRIC", "SYSID", "SYSTEM_P", "TABLE",
  "TABLES", "TABLESAMPLE", "TABLESPACE", "TEMP", "TEMPLATE", "TEMPORARY",
  "TEXT_P", "THEN", "TIES", "TIME", "TIMESTAMP", "TO", "TRAIL", "TRAILING",
  "TRANSACTION", "TRANSFORM", "TREAT", "TRIGGER", "TRIM", "TRUE_P",
  "TRUNCATE", "TRUSTED", "TRY_CAST", "TYPE_P", "TYPES_P", "UNBOUNDED",
  "UNCOMMITTED", "UNENCRYPTED", "UNION", "UNIQUE", "UNKNOWN", "UNLISTEN",
  "UNLOGGED", "UNPIVOT", "UNTIL", "UPDATE", "USE_P", "USER", "USING",
  "VACUUM", "VALID", "VALIDATE", "VALIDATOR", "VALUE_P", "VALUES",
  "VARCHAR", "VARIADIC", "VARYING", "VERBOSE", "VERSION_P", "VERTEX",
  "VIEW", "VIEWS", "VIRTUAL", "VOLATILE", "WALK", "WEEK_P", "WEEKS_P",
  "WHEN", "WHERE", "WHITESPACE_P", "WINDOW", "WITH", "WITHIN", "WITHOUT",
  "WORK", "WRAPPER", "WRITE_P", "XML_P", "XMLATTRIBUTES", "XMLCONCAT",
  "XMLELEMENT", "XMLEXISTS", "XMLFOREST", "XMLNAMESPACES", "XMLPARSE",
  "XMLPI", "XMLROOT", "XMLSERIALIZE", "XMLTABLE", "YEAR_P", "YEARS_P",
  "YES_P", "ZONE", "NOT_LA", "NULLS_LA", "WITH_LA", "'<'", "'>'", "'='",
  "POSTFIXOP", "'+'", "'-'", "'*'", "'/'", "'%'", "'^'", "UMINUS", "'['",
  "']'", "'('", "')'", "'.'", "';'", "','", "'|'", "'?'", "'{'", "'}'",
  "'&'", "'!'", "':'", "'#'", "'$'", "$accept", "stmtblock", "stmtmulti",
  "stmt", "AlterObjectSchemaStmt", "AlterSeqStmt", "SeqOptList",
  "opt_with", "NumericOnly", "SeqOptElem", "opt_by", "SignedIconst",
  "AlterTableStmt", "alter_identity_column_option_list",
  "alter_column_default", "alter_identity_column_option",
  "alter_generic_option_list", "alter_table_cmd", "alter_using",
  "alter_generic_option_elem", "alter_table_cmds", "alter_generic_options",
  "opt_set_data", "AnalyzeStmt", "AttachStmt", "DetachStmt",
  "opt_database", "opt_database_alias", "CallStmt", "CheckPointStmt",
  "opt_col_id", "CommentOnStmt", "comment_value",
  "comment_on_type_any_name", "qualified_name", "ColId", "ColIdOrString",
  "Sconst", "indirection", "indirection_el", "attr_name", "ColLabel",
  "CopyStmt", "copy_database_flag", "copy_from", "copy_delimiter",
  "copy_generic_opt_arg_list", "opt_using", "opt_as", "opt_program",
  "copy_options", "copy_generic_opt_arg", "copy_generic_opt_elem",
  "opt_oids", "copy_opt_list", "opt_binary", "copy_opt_item",
  "copy_generic_opt_arg_list_item", "copy_file_name",
  "copy_generic_opt_list", "CreateStmt", "ConstraintAttributeSpec",
  "def_arg", "OptParenthesizedSeqOptList", "generic_option_arg",
  "key_action", "ColConstraint", "ColConstraintElem",
  "GeneratedColumnType", "opt_GeneratedColumnType",
  "GeneratedConstraintElem", "generic_option_elem", "key_update",
  "key_actions", "OnCommitOption", "reloptions", "opt_no_inherit",
  "TableConstraint", "TableLikeOption", "reloption_list", "ExistingIndex",
  "ConstraintAttr", "OptWith", "definition", "TableLikeOptionList",
  "generic_option_name", "ConstraintAttributeElem", "columnDef",
  "def_list", "index_name", "TableElement", "def_elem", "opt_definition",
  "OptTableElementList", "columnElem", "opt_column_list", "ColQualList",
  "key_delete", "reloption_elem", "columnList", "columnList_opt_comma",
  "func_type", "ConstraintElem", "TableElementList", "key_match",
  "TableLikeClause", "OptTemp", "generated_when", "CreateAsStmt",
  "opt_with_data", "create_as_target", "unreserved_keyword",
  "col_name_keyword", "func_name_keyword", "type_name_keyword",
  "other_keyword", "type_func_name_keyword", "reserved_keyword",
  "pgq_unreserved_keyword", "pgq_col_name_keyword", "CreateFunctionStmt",
  "macro_alias", "param_list", "CreateSchemaStmt", "OptSchemaEltList",
  "schema_stmt", "CreateSecretStmt", "opt_secret_name", "opt_persist",
  "opt_storage_specifier", "CreateSeqStmt", "OptSeqOptList",
  "CreateTypeStmt", "opt_enum_val_list", "enum_val_list", "DeallocateStmt",
  "DeleteStmt", "relation_expr_opt_alias", "where_or_current_clause",
  "using_clause", "DropStmt", "drop_type_any_name", "drop_type_name",
  "any_name_list", "opt_drop_behavior", "drop_type_name_on_any_name",
  "DropSecretStmt", "opt_storage_drop_specifier", "ExecuteStmt",
  "execute_param_expr", "execute_param_list", "execute_param_clause",
  "ExplainStmt", "opt_verbose", "explain_option_arg", "ExplainableStmt",
  "NonReservedWord", "NonReservedWord_or_Sconst", "explain_option_list",
  "analyze_keyword", "opt_boolean_or_string", "explain_option_elem",
  "explain_option_name", "ExportStmt", "ImportStmt", "IndexStmt",
  "access_method", "access_method_clause", "opt_concurrently",
  "opt_index_name", "opt_reloptions", "opt_unique", "InsertStmt",
  "insert_rest", "insert_target", "opt_by_name_or_position",
  "opt_conf_expr", "opt_with_clause", "insert_column_item", "set_clause",
  "opt_or_action", "opt_on_conflict", "index_elem", "returning_clause",
  "override_kind", "set_target_list", "opt_collate", "opt_class",
  "insert_column_list", "set_clause_list", "set_clause_list_opt_comma",
  "index_params", "set_target", "LoadStmt", "file_name", "repo_path",
  "PGQ_IDENT", "DropPropertyGraphStmt", "VertexOrNode",
  "EdgeOrRelationship", "EdgeTablesClauseOptional",
  "CreatePropertyGraphStmt", "VertexTableDefinitionList",
  "KeySpecification", "KeyDefinition", "KeyReference", "LabelList",
  "LabelOptional", "Discriminator", "VertexTableDefinition",
  "EdgeTableDefinitionList", "EdgeTableDefinition", "AreOptional",
  "IdentOptionalAs", "QualifiednameOptionalAs", "PropertiesList",
  "ExceptOptional", "PropertiesSpec", "PropertiesClause",
  "GraphTableWhereOptional", "GraphTableNameOptional", "ColumnsOptional",
  "GraphTableStmt", "KeepOptional", "PathOrPathsOptional",
  "GroupOrGroupsOptional", "PathVariableOptional", "PathModeOptional",
  "TopKOptional", "PathPrefix", "PathPatternList", "PathPattern",
  "PatternUnion", "KleeneQuantifierOptional", "KleeneOptional", "CostNum",
  "CostDefault", "CostOptional", "SubPath", "EnclosedSubPath",
  "PathElement", "PathSequence", "PathConcatenation", "OrLabelExpression",
  "AndLabelExpression", "ComposedLabelExpression", "LabelExpression",
  "LabelExpressionOptional", "IsOrColon", "ArrowRight", "ArrowLeftBracket",
  "AbbreviatedEdge", "VariableOptional", "FullElementSpec", "EdgePattern",
  "VertexPattern", "pgq_expr", "PragmaStmt", "PrepareStmt",
  "prep_type_clause", "PreparableStmt", "RenameStmt", "opt_column",
  "SelectStmt", "select_with_parens", "select_no_parens", "select_clause",
  "opt_select", "simple_select", "value_or_values", "pivot_keyword",
  "unpivot_keyword", "pivot_column_entry", "pivot_column_list_internal",
  "pivot_column_list", "with_clause", "cte_list", "common_table_expr",
  "opt_materialized", "into_clause", "OptTempTableName", "opt_table",
  "all_or_distinct", "by_name", "distinct_clause", "opt_all_clause",
  "opt_ignore_nulls", "opt_sort_clause", "sort_clause", "sortby_list",
  "sortby", "opt_asc_desc", "opt_nulls_order", "select_limit",
  "opt_select_limit", "limit_clause", "offset_clause", "sample_count",
  "sample_clause", "opt_sample_func", "tablesample_entry",
  "tablesample_clause", "opt_tablesample_clause", "opt_repeatable_clause",
  "select_limit_value", "select_offset_value", "select_fetch_first_value",
  "I_or_F_const", "row_or_rows", "first_or_next", "group_clause",
  "group_by_list", "group_by_list_opt_comma", "group_by_item",
  "empty_grouping_set", "rollup_clause", "cube_clause",
  "grouping_sets_clause", "grouping_or_grouping_id", "having_clause",
  "qualify_clause", "for_locking_clause", "opt_for_locking_clause",
  "for_locking_items", "for_locking_item", "for_locking_strength",
  "locked_rels_list", "opt_nowait_or_skip", "values_clause",
  "values_clause_opt_comma", "from_clause", "from_list",
  "from_list_opt_comma", "table_ref", "opt_pivot_group_by",
  "opt_include_nulls", "single_pivot_value", "pivot_header", "pivot_value",
  "pivot_value_list", "unpivot_header", "unpivot_value",
  "unpivot_value_list", "joined_table", "alias_clause", "opt_alias_clause",
  "func_alias_clause", "join_type", "join_outer", "join_qual",
  "relation_expr", "func_table", "rowsfrom_item", "rowsfrom_list",
  "opt_col_def_list", "opt_ordinality", "where_clause",
  "TableFuncElementList", "TableFuncElement", "opt_collate_clause",
  "colid_type_list", "RowOrStruct", "opt_Typename", "Typename",
  "qualified_typename", "opt_array_bounds", "SimpleTypename",
  "ConstTypename", "GenericType", "opt_type_modifiers", "Numeric",
  "opt_float", "Bit", "ConstBit", "BitWithLength", "BitWithoutLength",
  "Character", "ConstCharacter", "CharacterWithLength",
  "CharacterWithoutLength", "character", "opt_varying", "ConstDatetime",
  "ConstInterval", "opt_timezone", "year_keyword", "month_keyword",
  "day_keyword", "hour_keyword", "minute_keyword", "second_keyword",
  "millisecond_keyword", "microsecond_keyword", "week_keyword",
  "decade_keyword", "century_keyword", "millennium_keyword",
  "opt_interval", "a_expr", "b_expr", "c_expr", "d_expr",
  "indirection_expr_or_a_expr", "indirection_expr", "list_expr",
  "struct_expr", "func_application", "func_expr", "func_expr_windowless",
  "func_expr_common_subexpr", "list_comprehension", "within_group_clause",
  "filter_clause", "export_clause", "window_clause",
  "window_definition_list", "window_definition", "over_clause",
  "window_specification", "opt_existing_window_name",
  "opt_partition_clause", "opt_frame_clause", "frame_extent",
  "frame_bound", "opt_window_exclusion_clause", "qualified_row", "row",
  "dict_arg", "dict_arguments", "dict_arguments_opt_comma", "map_arg",
  "map_arguments", "map_arguments_opt_comma",
  "opt_map_arguments_opt_comma", "sub_type", "all_Op", "MathOp", "qual_Op",
  "qual_all_Op", "subquery_Op", "any_operator", "c_expr_list",
  "c_expr_list_opt_comma", "expr_list", "expr_list_opt_comma",
  "opt_expr_list_opt_comma", "func_arg_list", "func_arg_expr", "type_list",
  "extract_list", "extract_arg", "overlay_list", "overlay_placing",
  "position_list", "substr_list", "substr_from", "substr_for", "trim_list",
  "in_expr", "case_expr", "when_clause_list", "when_clause",
  "case_default", "case_arg", "columnref", "opt_slice_bound",
  "opt_indirection", "opt_func_arguments", "extended_indirection_el",
  "opt_extended_indirection", "opt_asymmetric",
  "opt_target_list_opt_comma", "target_list", "target_list_opt_comma",
  "target_el", "except_list", "opt_except_list", "replace_list_el",
  "replace_list", "replace_list_opt_comma", "opt_replace_list",
  "qualified_name_list", "name_list", "name_list_opt_comma",
  "name_list_opt_comma_opt_bracket", "name", "func_name", "AexprConst",
  "Iconst", "type_function_name", "function_name_token", "type_name_token",
  "any_name", "attrs", "opt_name_list", "param_name", "ColLabelOrString",
  "TransactionStmt", "opt_transaction", "UpdateStmt", "UseStmt",
  "VacuumStmt", "vacuum_option_elem", "opt_full", "vacuum_option_list",
  "opt_freeze", "VariableResetStmt", "generic_reset", "reset_rest",
  "VariableSetStmt", "set_rest", "generic_set", "var_value", "zone_value",
  "var_list", "VariableShowStmt", "describe_or_desc", "show_or_describe",
  "opt_tables", "var_name", "table_id", "ViewStmt", "opt_check_option", YY_NULLPTR
};

static const char *
yysymbol_name (yysymbol_kind_t yysymbol)
{
  return yytname[yysymbol];
}
#endif

#define YYPACT_NINF (-3475)

#define yypact_value_is_default(Yyn) \
  ((Yyn) == YYPACT_NINF)

#define YYTABLE_NINF (-2241)

#define yytable_value_is_error(Yyn) \
  ((Yyn) == YYTABLE_NINF)

/* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
   STATE-NUM.  */
static const int yypact[] =
{
    6217,   -35,   134, -3475, -3475,   311,   -35, 56394, 71799,   372,
     -35,   208,  3046, 58450, -3475, -3475, 52796,  9552,   -35, 61534,
   79944,   687,   279, 38618,   768, 62048, 62048, -3475, -3475, -3475,
   71799, 61534, 62562,   -35,   355, 72313, -3475,   -35, 41188, 58964,
     464, -3475, 61534,    77,   399, 63076, 61534, 46329,   950,   439,
   -3475, -3475, -3475, -3475, -3475, -3475, -3475, -3475, -3475, -3475,
   -3475, -3475, -3475, -3475, -3475, -3475, -3475, -3475, -3475, -3475,
   -3475, -3475, -3475, -3475,   546, -3475, -3475, -3475, -3475,   207,
   -3475, -3475, -3475, -3475, -3475, -3475, -3475, -3475,   176, -3475,
     156,   177, 38618, 38618,  1795,   474, -3475, -3475, -3475, -3475,
   -3475, -3475, -3475, -3475, -3475, 40674, -3475, -3475, -3475, -3475,
   63590, 61534, 64104, 59478, 64618, -3475,   760,  1113, -3475,   219,
   -3475, -3475, -3475, -3475, -3475, -3475, -3475, -3475, -3475, -3475,
   -3475, -3475, -3475, -3475, -3475, -3475, -3475, -3475, -3475, -3475,
   -3475, -3475, -3475, -3475, -3475, -3475, -3475, -3475, -3475, -3475,
   -3475, -3475, -3475, -3475, -3475, -3475, -3475, -3475, -3475, -3475,
   -3475, -3475, -3475, -3475, -3475, -3475, -3475, -3475, -3475, -3475,
   -3475, -3475, -3475, -3475, -3475, -3475, -3475, -3475, -3475, -3475,
   -3475, -3475, -3475, -3475, -3475, -3475, -3475, -3475, -3475, -3475,
   -3475, -3475, -3475, -3475, -3475, -3475, -3475, -3475, -3475, -3475,
   -3475, -3475, -3475, -3475, -3475, -3475, -3475, -3475, -3475, -3475,
   -3475, -3475, -3475, -3475, -3475, -3475, -3475, -3475, -3475, -3475,
   -3475, -3475, -3475, -3475, -3475, -3475, -3475, -3475, -3475, -3475,
   -3475, -3475, -3475, -3475, -3475, -3475, -3475, -3475, -3475, -3475,
   -3475, -3475, -3475, -3475, -3475, -3475,   221, -3475, -3475, -3475,
   -3475, -3475, -3475, -3475, -3475, -3475, -3475, -3475, -3475, -3475,
   -3475, -3475, -3475, -3475, -3475, -3475, -3475, -3475, -3475, -3475,
   -3475, -3475, -3475, -3475, -3475, -3475, -3475, -3475, -3475, -3475,
   -3475, -3475, -3475, -3475, -3475, -3475, -3475, -3475, -3475, -3475,
   -3475, -3475, -3475, -3475, -3475, -3475, -3475, -3475, -3475, -3475,
   -3475, -3475, -3475, -3475, -3475, -3475, -3475, -3475, -3475,   526,
   -3475, -3475, -3475, -3475, -3475, -3475, -3475, -3475, -3475, -3475,
   -3475, -3475, -3475, -3475, -3475, -3475, -3475, -3475, -3475, -3475,
   -3475, -3475, -3475, -3475, -3475, -3475, -3475, -3475, -3475, -3475,
   -3475, -3475, -3475, -3475, -3475, -3475, -3475, -3475, -3475, -3475,
   -3475, -3475, -3475, -3475, -3475, -3475, -3475, -3475, -3475, -3475,
   -3475, -3475, -3475, -3475, -3475, -3475, -3475, -3475, -3475, -3475,
   -3475, -3475, -3475, -3475, -3475, -3475, -3475, -3475, -3475, -3475,
   -3475, -3475, -3475, -3475, -3475, -3475, -3475, -3475, -3475, -3475,
   -3475, -3475, -3475, -3475, -3475, -3475, -3475, -3475, -3475, -3475,
   -3475, -3475, -3475, -3475, -3475, -3475, -3475, -3475, -3475, -3475,
   -3475, -3475, -3475, -3475, -3475, -3475, -3475, -3475, -3475, -3475,
   -3475, -3475, -3475, -3475, -3475, -3475, -3475, -3475, -3475, -3475,
   -3475, -3475, -3475, -3475, -3475, -3475, -3475, -3475, -3475, -3475,
   -3475, -3475, -3475, -3475, -3475, -3475, -3475, -3475, -3475, -3475,
   -3475, -3475, -3475, -3475, -3475, -3475, -3475, -3475, -3475, -3475,
   -3475,   223, -3475, -3475, -3475, -3475, -3475, -3475, -3475, -3475,
   -3475, -3475, -3475, -3475, -3475, -3475, -3475, -3475, -3475, -3475,
   -3475, -3475, -3475, -3475, -3475, -3475, -3475, -3475, -3475, -3475,
   -3475, -3475, -3475, -3475, -3475, -3475, -3475, -3475, -3475, -3475,
   -3475, -3475, -3475, -3475, -3475, -3475, -3475, -3475, -3475, -3475,
   -3475, -3475, -3475, -3475, -3475, -3475, -3475, -3475, -3475, -3475,
   -3475, -3475, -3475, -3475, -3475, -3475, -3475, -3475, -3475, -3475,
   -3475, -3475, -3475, -3475, -3475, -3475, -3475,   775,   224, -3475,
   -3475,   225, -3475,   591, -3475, -3475, -3475, -3475, -3475, -3475,
   -3475, -3475, -3475,  1546, -3475, -3475,  1095,  2727, 61534,   723,
     882,   764, -3475,  1045, 65132, -3475,   853, 61534, -3475, -3475,
     879,   877,  1066, -3475, -3475, 59992, -3475, -3475, -3475, -3475,
   -3475, -3475, -3475, -3475, -3475, -3475, -3475, -3475, -3475, -3475,
   -3475, -3475, -3475, -3475, -3475, -3475, -3475, -3475, -3475, -3475,
   -3475, -3475, -3475, -3475, -3475, -3475, -3475, -3475, -3475, -3475,
   -3475, -3475, 53310, -3475, -3475, -3475, -3475, -3475, -3475, -3475,
   -3475, -3475, -3475, -3475, -3475, -3475, -3475, -3475, -3475, -3475,
   -3475, -3475, -3475, -3475, -3475, -3475, -3475, -3475, -3475, -3475,
   -3475, -3475, -3475, -3475, -3475, -3475, -3475, -3475, -3475, -3475,
   -3475, -3475, -3475, -3475, -3475, -3475, -3475, -3475, -3475, -3475,
   -3475, -3475, -3475, -3475, -3475, -3475, -3475, -3475, -3475, -3475,
   -3475, -3475, -3475, -3475, -3475, -3475, -3475, -3475, -3475, -3475,
   -3475, -3475, -3475, -3475, -3475, -3475, -3475, -3475, -3475, -3475,
   -3475, -3475, -3475, -3475, -3475, -3475, -3475, -3475, -3475, -3475,
   -3475, -3475, -3475, -3475, -3475, -3475, -3475, -3475, -3475, -3475,
   -3475, -3475, -3475, -3475, -3475, -3475, -3475, -3475, -3475, -3475,
   -3475, -3475, -3475, -3475, -3475, -3475, -3475, -3475, -3475, -3475,
   -3475, -3475, -3475, -3475, -3475, -3475, -3475, -3475, -3475, -3475,
   -3475, -3475, -3475,  1053, -3475, -3475,   883, -3475,   180, -3475,
   -3475,   910,   891, -3475,  1181, -3475, -3475, -3475, -3475, -3475,
   -3475, -3475, -3475,   998, -3475, -3475, -3475,  1028, 72827, 65646,
   66160, -3475,   881,  2049, 11371, 79961, 38103, -3475, -3475, -3475,
   -3475, -3475, -3475, -3475, -3475, -3475, -3475, -3475, -3475, -3475,
   -3475, -3475, -3475, -3475,   546, -3475, -3475, -3475, -3475, -3475,
   -3475, -3475, -3475, -3475, -3475, -3475, -3475, -3475, -3475, 62048,
   71799, 62048,   896,   904,  1271,   915,   923, 39132,   939, 41703,
     954,   976,  1367,  1016,  1030,  1072,  1118,   399, 37589,  1032,
     775, -3475, 66674, 66674,   -49,  1649, -3475, 66674, 67188, -3475,
    1150, -3475,  1113, -3475, -3475, -3475,  1510, -3475,   614,  1163,
   -3475, 67702, 67702, 67702,  1193,  1484, -3475, -3475, -3475,  1186,
   -3475, -3475,  1425, 25747, 25747, 73341, 73341,  1113, 73341,  1209,
   -3475, -3475,    58, -3475,  2443, -3475, -3475,  1795,  1228,   775,
   -3475, -3475, 58964, -3475, -3475,   406,  1565, 25747, 61534,  1222,
   -3475,  1232,  1222, -3475, -3475, -3475, -3475, -3475, -3475, -3475,
   -3475, -3475, -3475, -3475, -3475, -3475, -3475, -3475, -3475, -3475,
   -3475, -3475, -3475, -3475, -3475, -3475, -3475, -3475, -3475, -3475,
   -3475, -3475, -3475, -3475, -3475, -3475, -3475, -3475, -3475, -3475,
   -3475, -3475, -3475, -3475,   399, -3475, -3475, -3475, -3475, -3475,
   -3475, -3475, -3475, -3475, -3475, -3475, -3475, -3475, -3475,  1550,
    1289,  1291,  1293, -3475,  6217, -3475, 61534,  1655,  1541, 58964,
     384,   384,  1785,   384,   984,  1002,  2870,  3931, -3475,  1755,
   -3475,  1320,  1424,  1680,  1347,  1639, -3475,  1228,  1724,   864,
    1522,  1737, 11067,  1744,   893,  1749,  1012,  1756,  1891, 25747,
   53824,   775, -3475, 15411, 25747, -3475, -3475, -3475,  1506, -3475,
   -3475, -3475, -3475, -3475, 61534, 71799,  1406,  1417, -3475, -3475,
   -3475, -3475,  1819, 61534,  1675, -3475,  1922, -3475, -3475,  1493,
   68216, 68730, 69244, 69758, 73855,  1889, -3475, -3475,  1840, -3475,
   -3475, -3475,  1500, -3475, -3475, -3475, 61534,   214, 74369,  1846,
    1476,   229, -3475,  1865,   270, -3475,  1881,  1751, 19219, -3475,
    1700, -3475, -3475, -3475,   399, -3475, -3475, -3475, -3475,   304,
   -3475, -3475, 50072, 79961,  1603,  1535, -3475,  1894, 25747, 25747,
    1539,  9112, 79449, -3475, 66674, 67188, 25747, 61534, -3475, 25747,
   31187,  1545, 25747, 25747, 16499, 25747, 36561, 66674,  1649,  1562,
   -3475,   873, 61534,  1551, -3475,  1664,  1664,   355, 38618,  1882,
   -3475,   215,  1885,  1805, -3475, 38618,  1805,  1373,  1592,  1901,
    1805, -3475,   286,  1903,  1664, 42217,  1602, -3475,  1664,  1834,
   -3475, -3475, 62048, 25747, 19219, 76939,  2098, -3475, -3475, -3475,
   -3475,  1898, 71799,  1629, -3475, -3475, -3475, -3475, -3475, -3475,
      54,  2155,   205,  2163, 25747,   205,   205,  1638,   226,   226,
   -3475,  1839,  1642, -3475,   227,  1643,  1648,  2177,  2179,   213,
     184,  1389,   205, 25747, -3475,   226,  1652,  2181,  1654,  2187,
     187,   204, -3475,   231, 25747, 25747, 25747,  2040, 25747, 14323,
   -3475, 61534,  2185, 53824,   826, -3475,   775,  1662,  1113, -3475,
   -3475, -3475, -3475, -3475, -3475, -3475,  1665, -3475,   216,  6727,
   -3475, -3475, -3475, -3475, -3475, -3475,  1704, -3475, -3475, -3475,
   -3475,  1892, 25747, -3475, -3475,  1667,  1882, -3475,   232, -3475,
   -3475,  1882, -3475, -3475, -3475, -3475, -3475,   247,  2095, 25747,
   25747, 71799,   775, -3475, 74883, -3475, -3475, -3475, -3475, -3475,
   -3475,   606, -3475,   546, 51670,  1674,  1679,  1222, 61534, 61534,
    2170, 79449, -3475, -3475, -3475, -3475,  1232, 58964,   445,  1989,
    1818, -3475, -3475,  1795,  1795, 19763,   933,   236,  1064, 20307,
   26291,  2048,  1925,   269,   713,  2050, -3475,  1929,  2162, 31187,
   25747, 25747,   984,  1002, 25747, -3475, -3475, 71799, -3475,  1986,
   61534, 56908,  1054,  1085,  1701,  1786,  1702,    66,  2142, -3475,
    1703, -3475,  1794, 61534, 78950,   251, -3475,  2180,   251,   251,
     803,  2182,  1798,   255,  1971,   110,   -41,  2218, -3475,  1703,
   58964,   202,   786,  1703, 61534,  1801,   836,  1703,  2136, 71799,
    1535, 47910,  1706, -3475, -3475, -3475,   186, 19219, -3475,  1468,
    1503,  1596,   388,   183,  1604,  1620, 19219,  1678,  1757,   193,
    1762,  1772,  1784,  1826,  1906,  1956,  1962,  1970,   181,  1972,
    1975,  1978,  1980,  2012,  2014, -3475,  2018,   198,  2021,   206,
   19219,  2023, -3475,   200, -3475,   203, 51670,    10, -3475, -3475,
    2038, 51722, -3475,  2020,  1808,  1810, 71799,  1764,  2077, 61534,
    1205,  1872,    57,  2109,  2167, 77438, 61534,  1988,  2218,  1990,
    1741,  2233,  1994,  1417,  1995,  1746,  1998, -3475,  2078, -3475,
   75397, 53824, -3475,   220, -3475, -3475, -3475, -3475,  2128,  2110,
   71799, 53824,  1752, -3475, -3475, 71799, -3475, 61534, 61534, -3475,
   61534, 71799, -3475,   642, 51670,  2275,  1057, 79961, 55366, -3475,
   -3475, -3475, -3475,   969,  1101, -3475, -3475, -3475, -3475, -3475,
   -3475, -3475, -3475, -3475,  1113, 53824, -3475,  2033, 62048, 50708,
    1761, 25747, -3475, -3475, -3475, -3475, -3475, -3475, -3475, -3475,
   -3475, -3475, -3475, -3475, -3475, -3475, -3475, -3475, -3475, -3475,
   -3475, -3475, -3475, -3475, -3475, -3475, -3475, -3475, -3475, -3475,
   -3475, -3475, -3475, -3475, -3475, -3475, -3475, -3475, -3475, -3475,
    1766,  2113, -3475, -3475, -3475,  6480,  1767, 50759,  1768, 31187,
   31187,   775,   379, -3475, -3475, 31187,  1769, 55880, 50624,  1753,
    1770, 51118, 20851, 25747, 20851, 20851, 51065, -3475,  1771, 51316,
   66674,  1758, 61534, 60506, -3475, -3475, -3475, 25747, 25747,  1649,
   61020,  1821, -3475, 38618, -3475,  2079, 38618, -3475, -3475,  2278,
   -3475, 38618,  2086, 25747, 38618, -3475,  2028,  2034,  1790, 38618,
   -3475, 61534,  1792, 61534, -3475, -3475, -3475, -3475, -3475, 51670,
   -3475,  1796,   653,  1797, -3475, -3475, -3475, -3475, -3475,  1847,
   -3475,  1847,  1847, -3475, -3475, -3475, -3475,  1804,  1804,  1811,
   -3475, -3475, -3475, -3475, -3475, -3475, -3475, -3475, -3475, -3475,
   -3475, -3475, -3475,  1812,  1389, -3475,  1847, -3475,  1804, -3475,
   -3475, -3475, -3475, -3475, -3475, -3475, 78950, -3475, -3475, -3475,
   -3475,   855,  1022, -3475,  1816, -3475, -3475, -3475, -3475, -3475,
    1817, -3475,  1820,  2312, -3475, -3475, -3475, -3475, -3475, -3475,
   -3475, -3475, -3475,  5748,   684,  1804,  1714, -3475, -3475, 25747,
   25747, -3475, -3475,  1823, 51670,  1863, -3475, -3475, 25747, 25747,
   -3475, -3475, -3475, -3475,  2348, -3475, 25747,  1847,  1847, -3475,
    5101, -3475, 47363, 21395,  1916,  1918,  2348, -3475,  2348, -3475,
    5101,  2350,  2350, 44787, -3475,  1997, 51368, -3475,  1832,  1202,
    8363,  1829,  1824, -3475,  1833,  1835, -3475, -3475, 48530,   174,
     775,   775, 25747, -3475,  2348, 25747, 10155, 10155, -3475,   237,
   76939, 25747, 25747, 25747, 25747, 25747, 25747, 25747, 25747, 52282,
    1932,   194, 71799, 25747, 25747,  1842,  1357, -3475, 25747,  2089,
   -3475,  1845, 25747,  1935,  1134, 25747, 25747, 25747, 25747, 25747,
   25747, 25747, 25747, 25747, -3475, -3475, 34995,   241,   908,  2193,
    2219,    43,   496, 25747,  2209, 15411, -3475,  2209, -3475, -3475,
   -3475, -3475, -3475,   235, -3475, -3475,  1796,  1796, -3475, 71799,
   -3475, 61534,   406, 57936, 25747, -3475, -3475,  1850,  1855,   162,
    1868,   264,    59, -3475, -3475,  1920, -3475, -3475, 61534, 45301,
    2168, -3475,   365,  1856, -3475, 50583,  2121,  2168,  1795, -3475,
   -3475, 32275,  1992,  2166,  2097, -3475, -3475,  2080,  2081, -3475,
    1869, 51774, 26835, 26835, -3475,  1677, 51670,  1682, -3475, -3475,
   -3475, -3475, -3475, -3475,  1210, -3475, 61534,   530, 42731, -3475,
    1870,    90, -3475,  1627,  2215,  2183,  2048,   713,  1871, -3475,
   -3475,  1027,  1877, 75911, 61534,  2184,  2129,  2194,   369, 76939,
   -3475, -3475, -3475, -3475, 61534, 71799, 70272, 76425, 54338, 61534,
   53824, -3475, -3475, -3475, -3475, 61534,  1183, 61534, 11085, -3475,
   -3475, -3475, -3475,   251, -3475, -3475, -3475, -3475, -3475, 71799,
   61534, -3475, -3475,   251, 71799, 61534,   251, -3475,  1115, 61534,
   61534, 61534, 61534,  1244, 61534, 61534,  1113, -3475, -3475, -3475,
   27379,    85,    85,  2107, 17043,   189, -3475, 25747, 25747,   346,
     285, 71799,  2069, -3475, -3475,   813,  2118,   301, 61534, -3475,
    1933, 61534, 61534, 61534, 61534, 71799, -3475, -3475,  1983, 61534,
    1525, -3475, -3475, -3475, -3475, -3475,  1899, -3475,  1905,  2274,
    2218, -3475,  2277, 57422,   861,  3172,  2282,  1947,  2286, 17587,
    2403,  2289,  2444,  1934,  2188, -3475, -3475,  2151, -3475, -3475,
   71799,  2463, -3475,   229, -3475, 53824, -3475,   270, -3475,  2172,
     220, -3475, 19219, 25747, -3475, -3475, -3475, -3475, -3475, -3475,
    1535, 36042, -3475,   990, -3475, -3475,  2426,  1113,  2426,   823,
   -3475, -3475,  2426, -3475,  2411,  2426, -3475, -3475, 76939, -3475,
    8718, -3475, 25747, 25747, -3475, 25747,  2302, -3475,  2468,  2468,
   76939, 31187, 31187, 31187, 31187, 31187, 31187,   661,  1652, 31187,
   31187, 31187, 31187, 31187, 31187, 31187, 31187, 31187, 32819,   675,
   -3475, -3475,   994,  2438, 25747, 25747,  2310,  2302, 25747, -3475,
   76939,  1948, -3475,  1949,  1950, 25747, -3475, 76939, -3475, 61534,
    1958,    18,   506, -3475,  1963,  1964, -3475,  1882, -3475,   958,
    1099, 61534,  2196,  3293,  5793, -3475, -3475, 25747,  2308,  2278,
   38618, -3475, 25747,  1966, -3475, -3475, 38618,  2331, -3475, -3475,
   -3475, 43245,  2278, 76939,  1011, -3475, 61534, 76939,  1025, 25747,
   -3475, 19219,  2501, 76939,  2466, 71799, 71799,  2505,  1979,  1981,
    2348,  2071, -3475,  2072,  2073,  2074, -3475, -3475, -3475, -3475,
   -3475, -3475, -3475, -3475, -3475, 76939, -3475, -3475, -3475, -3475,
   -3475, -3475, -3475, -3475,  1985,  1991, 25747, 25747,   117, -3475,
    9799,  1993,  1999,  4542, -3475,  1987, -3475,  2000, -3475, -3475,
   -3475, -3475, -3475, -3475, -3475, -3475, -3475, -3475, -3475, -3475,
   -3475, -3475, -3475, -3475, -3475,  2003, -3475,  2005, -3475,  2006,
    2013,  2016,  2008,  2019, 61534, -3475, 27923, -3475, 71799, -3475,
   -3475, 25747, 25747, 61534, -3475,  2040, -3475,  2022,  2025, 10153,
   -3475, -3475, -3475,   277,   936,  7146,   496,  4573,  4573,  4573,
    5101, -3475, -3475, -3475,  2031, -3475, 31187, 31187, -3475,  3459,
    4635, 14323, -3475, -3475,  2346, -3475,  1048, -3475,  2015, -3475,
   -3475,  5214, -3475, 47363,  7281, 25747,   196, -3475, 25747,  1842,
   25747,  2106,  4573,  4573,  4573,   521,   521,   277,   277,   277,
     936,   496, -3475, -3475, -3475,  2024, 25747, 53824, -3475,  2027,
    2029,  2395,  1654, 25747, -3475, -3475, 38618,  1821,    10,  1821,
    2348, 10155, -3475,  1232, -3475, -3475,  1232, 51670, 61534, -3475,
   -3475,  2306,  2032, -3475,   175,   233,  2555,   337,   264, 79449,
    2075, 38618,  2082,  2524,  2509, 71799, -3475, -3475,  2044,  2209,
    2053, -3475, -3475,  2059, 25747,  1814,  2059, -3475,  2168,    23,
    2283,  1277,  1277,  1677,  2284, -3475, -3475,  2116, -3475, -3475,
   -3475, 25747, 18131,  1685, -3475,  1697, -3475, -3475, -3475, -3475,
   -3475,  2058, -3475,  2336, -3475, 61534, -3475, -3475, 31187,  2529,
   25747, 43759,  2535,  2327, -3475, -3475, -3475,  2157,  1703, 25747,
    2319, -3475,   159,  2083,  2447,   401,  2396, 71799, -3475,   387,
     390, -3475,   924,  2449,   220,  2450,   220, 53824, 53824, 53824,
    1044, -3475, -3475, -3475,  1113, -3475,   -79,  1092, -3475, -3475,
   -3475, -3475,  2164,   865,  2218,  1703, -3475, -3475, -3475, -3475,
   -3475, -3475, -3475,   217,   932,  1703,  2173, -3475,  2174, -3475,
    2189,   965,  1703, -3475, -3475,  1891, 21939, 51670,   475,   189,
     189,   189, 19219, -3475,  2321,  2322,  2091, 51670, 51670,   167,
   -3475, -3475, -3475, -3475,  2090, -3475,   463, -3475, 71799, -3475,
   -3475, -3475,  2069,    57,  2167, 61534,  2218,  2094,  2572,  1417,
    1746,  2078,  2096, -3475,  2260,   759,   199, -3475, 71799, 61534,
   61534, 61534, 70786, -3475, -3475, -3475,  2101,  2099, -3475,    17,
    2335,  2340, 61534,  2150, 61534,  1702,  2604, 61534, -3475,  1094,
   22483, 71799, -3475, 53824,  2490, 61534,  2110, -3475, -3475, -3475,
   -3475, 71799, -3475, -3475, 51670, -3475, -3475, 25747, 54852, -3475,
   -3475, -3475, -3475, -3475, -3475, 53824, -3475,  1113, -3475,  1113,
    2360, 71799, 49044,  1113, 49558,  1113,  2117, -3475, 51670, 10356,
   51670,  2310, -3475,   164,  2468,  1177,  1177,  1177,  6176,  2479,
     272,  2125,  1177,  1177,  1177,   308,   308,   164,   164,   164,
    2468,   675,  1150, 55880,  2126, -3475, 51670, 51670, -3475, -3475,
    2130, -3475, -3475, -3475, -3475,  2131,  2134, -3475, -3475, -3475,
   -3475, -3475, -3475, 71799,  1323,  1821,   464,   464,   464,   464,
   -3475, 61534, 61534, 61534, 51670,  2599,  2470, -3475,  2278, 51670,
   61534, -3475, 33907, 61534, -3475,  2492, -3475,  2587, -3475, 61534,
    1125, -3475, -3475, -3475,  1127,  2139,  1981, 76939,  1140,  1174,
   -3475,  2348,   163,  2137,  1020,  1534,   956,  1693, -3475, -3475,
   -3475,  2143, 51420, 25747, -3475,  2528, -3475, -3475, -3475, 25747,
   25747, -3475, 47363, -3475, -3475, -3475, -3475,   395,   395,  2145,
   14323, 51472, -3475,  2476, 10532, 51670, -3475,  1997, -3475, -3475,
   10155, 25747,  2578,  3691, 25747,  2148, 25747,  2507, -3475, -3475,
    2154, -3475, -3475, 76939, 25747,  2159,  6573, 31187, 31187,  6744,
   -3475,  7195, 25747, 14323, -3475, 47935,  2140,  2165,  2107, 23027,
   -3475,  2387,  2160, -3475,  2308,   189,  2308,  2171, -3475, -3475,
   -3475, -3475,  1714,  1779, -3475, -3475,   801,  1779,  1779,  1779,
   -3475, -3475, -3475,   801,   801,   801, -3475,   157,   505, 79449,
   79449,   337,   337,  2175, -3475, -3475, 79449,   929, -3475, -3475,
   -3475, -3475, 30643,  2615, -3475, 25747,  2332, 71799,   154,  1477,
    1179, -3475,   775, 45301,  2082, 25747,   748, -3475, -3475,  2176,
   -3475,  2059, -3475, -3475, -3475,  2409, -3475, -3475, -3475, 61534,
   -3475,  2190, -3475, 42731,  2527, 14867, -3475, 42731, 61534, 61534,
   10727,  2558, -3475, 71799, 71799, 71799, -3475, 71799,  2191,  2192,
     722,  2186,   403, -3475,  2669,   722,  2541,   262,  1702,   255,
    3164,   609, -3475, -3475, -3475,  2266, 61534, -3475, 71799, -3475,
   -3475, -3475, -3475, -3475, 54338, -3475, -3475, 46848, 53824, -3475,
   53824, 61534, 61534, 61534, 61534, 61534, 61534, 61534, 61534, 61534,
   61534,  1535, 25747, -3475, 25747,  2195,  2199,  2200,  2107, -3475,
   -3475, -3475,   338, -3475,  2201, -3475, -3475, -3475,   -41, -3475,
     463,  2292,  2202, -3475, 57422,  2727,  1947,  2696,  2207, 61534,
    2167,  1608, 71285, -3475,  2208,  2206,  1204,  2218,  2213,  2705,
   -3475,   861, 57422, -3475, -3475, -3475,  2660, -3475,   881,   243,
   -3475,  1417, -3475,  2727,  1746, -3475,  2727, 51670,  2078,  1212,
   71799,  2279, -3475,   220,  1213, -3475, -3475, -3475, -3475, -3475,
   71799,  2216, -3475,  2216, -3475, -3475,  2216, -3475, -3475, -3475,
   -3475, 31187,  2576,  2232, 76939, -3475, -3475, 61534, -3475, -3475,
   -3475,  1217,  2237,  2308, 61534, 61534, 61534, 61534, -3475, -3475,
   -3475, 23571, 25747,  2272, -3475,  2238, 15955,  2562, -3475, 33363,
   -3475, -3475,  2240, 43245, 71799, -3475, -3475, -3475, -3475,  2348,
   -3475, -3475, 71799, -3475,  2243, -3475,  2244, -3475, -3475, -3475,
   -3475, -3475, -3475, -3475, -3475, -3475, 25747, 51670, -3475, 51670,
   -3475, -3475, -3475, -3475, -3475,  7734, -3475,  2241,  2245, 71799,
   25747, -3475, -3475, -3475,   422, 25747, 25747,  3459, -3475,  8160,
   25747, 76939,  1223,  3459,   242, 25747,  4002,  4692, 25747, 25747,
    7993, 11553, -3475, 28467, 18675, -3475,  2246, 25747, 11989, 45815,
   -3475, 38618,  2470,  2247,  2470,  1113,  2249, -3475, -3475, -3475,
   -3475, -3475, -3475, -3475,  1462,   742, -3475, -3475, -3475,   801,
    2250, -3475,   101,  2251, -3475, -3475,  2253,   337,  2252, -3475,
   -3475, -3475,  2777, -3475, 30643, 30643, 30643, 30643,  5650, -3475,
    2483,  2256,  2263, 51670, 25747, -3475, -3475, -3475, -3475,  2317,
     458, 40160,  2503, -3475,  2280, 71799, -3475,  2332, 51670, -3475,
   -3475, 47363, -3475, -3475, -3475, -3475, -3475,  2738,  1136,  2269,
    2285, -3475,  1610, -3475, -3475, 71799,  2290, -3475,  2291,   722,
   -3475, 71799,  2323, -3475,   744,  2601,   142, -3475, 25747, -3475,
    2695,  2774,  2669,  2293, 71799, 61534, 31187, -3475,   752,   195,
   -3475,  2583, 61534,  2323,  2737, -3475, -3475, -3475,   403, -3475,
    2630,  2542, -3475,   251, -3475, 25747,   403,  2543,   253, 71799,
   -3475, -3475,  3624, -3475, 76939,   220,   220, -3475,  1797,  2294,
    2297,  2300,  2303,  2304,  2307,  2314,  2318,  2326,  2328, -3475,
    2329,  2330,  2333,  2338,  2339,  2344,  2345,  2349,  1812,  2351,
   -3475,  2352,  2176,  2353,  2354,  2356,  2358,  2361, 77937,  2362,
    2364,  2366,  2367,  1816,  2370,   969,  1101, -3475, -3475, -3475,
   -3475,  2371, -3475,  2372, -3475, -3475,  1476,  2325, -3475, -3475,
   -3475,  2397, -3475,  2401, -3475, -3475, -3475, -3475, -3475, -3475,
    2320,  2334, -3475, -3475, -3475,   189,  2347,  2376, 71799,  1535,
     140,  2337, 71799,  2377,  2150,  2825, 24115, 53824,  2853,  2378,
     131,   820,  2633,  2385, -3475,  1113,  1947, -3475, 57422,  3286,
     313,  2340, -3475,   234,  2150, -3475,  2810,  1947,  2427,  2879,
   -3475,  2390, -3475,  2626, 71799,  2392, -3475, -3475, 54852,  2216,
    8686, 31187, 76939,  1224,  1246, -3475,  2917,  2563,  2470, -3475,
   -3475, -3475, -3475, -3475,  2394,   -11,  2398, 13779,  2399, -3475,
   -3475, -3475, -3475, -3475, -3475, 51670, 51670, 71799,  2584, -3475,
   -3475,  2400,  2405, 44273,  2872,  2406, -3475, -3475,  2729, -3475,
   37075, -3475,  1981,  2413,  1981, 76939,  1981, -3475, -3475, 51670,
   25747, -3475, -3475, 47978,  2743,  3459,  3459,  8160,  1250, -3475,
    3459, 25747, 25747,  3459,  3459, 25747, -3475, 24659,   509, -3475,
    1259, -3475, 12137, -3475, 78436, -3475, -3475,  2272,  1113,  2272,
   -3475, -3475, -3475, -3475, -3475, -3475,   337,   929, -3475, -3475,
    2075, 35520, -3475,  2408, -3475,   210, -3475,  2410,  2835,  2835,
    2924,  2924, 76939, 30643, 30643, 30643, 30643, 30643, 30643, 30643,
    2506,   197, 71799, 30643, 30643,  1842,  1765, -3475, 30643,  2655,
   -3475, 30643,  2510,  1065, 30643, 30643, 30643, 30643, 30643, 30643,
   30643, 30643, 30643, 30643,    43, 25747, 61534,  2412, -3475, -3475,
   -3475,  2474, -3475, -3475,  1273,  2858,  2332, 25747, -3475, -3475,
    2419, 42731, -3475, -3475, -3475, -3475, 42731,   722, -3475,  2598,
    2323,  2423, -3475, -3475, -3475, -3475, -3475, -3475, 12561, -3475,
      72, 25747, -3475,  1609,  6176, -3475, -3475, -3475, -3475,  2323,
    1417, -3475, 61534,  2916,  2803, -3475, -3475, 51670, -3475, -3475,
    2348,  2348, -3475, -3475,  2587, -3475, -3475,  2428, -3475, -3475,
    1476,   678, 46848, 61534, 61534, -3475, -3475,  2430, -3475, -3475,
   -3475, -3475, -3475,   -41,  2839, 61534,  1274,   861, -3475,  2727,
    2727, 51670,  1279, 79449, 61534,  2432,  2616,   144,  2732, 61534,
    2811, 57422, -3475,  2927,  2436, 61534,  2150,  1180,  1180, -3475,
    2591, -3475,  2594, -3475, -3475,  2933,   784, -3475, 25203, 53824,
   61534, -3475, -3475, 39646, -3475,  8686,  1281, -3475, -3475,  2448,
    2451, -3475,  2272, 25747,  2452, 25747, -3475, 29011,  2939,  2446,
   -3475, 25747,  2515, 34451, -3475, 25747, -3475, 61534, 66674,  2455,
   66674, -3475, -3475, -3475, -3475, -3475, 25747, -3475,  3459,  3459,
    3459, 25747, -3475, 25747, -3475, -3475, -3475,  2671,  2584, -3475,
    2584,  2075, -3475,  2889, 35520, 35520, -3475, -3475, -3475,  2472,
     929,  2777, -3475,  1255,  8890,  1096,  6371,  6371,  6371,  2835,
    2475, 31187, 31187, -3475,  2115,  5296, -3475,  2819, -3475,  1164,
   -3475,  2464, -3475, -3475,  6556, -3475, 12086, 30643,   201, 30643,
    1842, 30643,  2552,  6371,  6371,  6371,   907,   907,   294,   294,
     294,  1255,  1096, -3475,  2467, -3475, -3475, 25747,  2727,   775,
    3959, 71799,    41, -3475, 51670, -3475, -3475, -3475, 61534, -3475,
   53824, -3475,   722,    -2,  2469, 25747, 12776,  2712, -3475, -3475,
    2747, -3475,  2808, -3475,  2536,   734,  2550, -3475, -3475, -3475,
   -3475,  1535,  1113,  2378,  1947,  2340,  2427, -3475, -3475, -3475,
    2378,   173, -3475, -3475, 79449,  2978, -3475, 79449,  2805,  2480,
   61534,  2727,   861,   881, -3475, -3475, -3475, -3475, -3475, -3475,
   -3475, -3475, -3475, -3475, -3475, -3475, -3475,  2727,  2936,  2713,
    2941,  2727, 51670,  1304,  2279, 25747,   105, -3475,  1334,  2940,
   -3475, -3475,  3012,  2584,  2489, 29011,  2491, -3475,  2494, 71799,
   51670,  2646, -3475, -3475,  2496, -3475, -3475, 25747, -3475, 48019,
    2499,  2500,  2973,  2107,  2515,  2515,  2889, 31187, -3475,  2502,
     912, -3475, -3475,  2508, 30643,  4716,  7323, 30643, 30643,  2865,
   -3475, -3475,  2511, -3475, -3475, 76939, 30643,  7369, 31187, 31187,
    7385, -3475,  8147, 30643, -3475, -3475,   458, -3475, -3475,  2947,
   39646,  2907,  1417,   722,  2526,  1359, -3475, -3475, -3475, -3475,
   -3475,  2218, -3475, 12870,  2766,   522,  2753,  2469, 25747, -3475,
    2600, -3475, -3475, -3475,  2525,  3018, -3475, -3475, -3475, -3475,
   -3475,  2632, -3475,  3024, -3475,  1361,  2984, -3475, 61534, -3475,
   57422,  2537,  2427,  2340,  2150,  2427,  2770, -3475,  2775, -3475,
   -3475,  2545, 47885, 71799, 71799,  1947, 39646, 71799,  2548,  2515,
   -3475,  2549, -3475, -3475, -3475, 60506, -3475,  2556, -3475, -3475,
   -3475, 25747,   662, -3475, -3475, -3475,  1936, -3475, 35520, 35520,
   -3475,   781, 30643, 30643,  2115,  9243, 30643, 76939,  1368,  2115,
   30643,  8077,  8311, 30643, 30643,  8225,  2610, 61534,  1394,    65,
    2747, 46848, -3475, 53824,  1837,    -2,  2864, -3475, -3475, -3475,
   -3475,   299,  2793, -3475,  2795, -3475, 51670, -3475,   173,  2727,
    2561, 79449, -3475, 79449,  2943,  2564, 57422, -3475, -3475, -3475,
   -3475, -3475, -3475, 39646,  2940, -3475,   365, -3475,  1821, -3475,
     365, -3475, -3475, -3475, -3475, -3475,  1753, 29555, 29555, 29555,
    2580,  1331, -3475, -3475,  2577, -3475,  2554,  2115,  2115,  9243,
    1398, -3475,  2115, 30643, 30643,  2115,  2115, 30643,  2727, -3475,
    1821, -3475,  2710,  2753, -3475, -3475, -3475, -3475, -3475,   283,
     283,  2992, -3475,  2649, -3475, -3475,  2427, 61534, -3475, -3475,
    2586, -3475, 79449,  1400, 71799,  2059, -3475,  2059, 31731,  2744,
     612, 50665,  2971, -3475,  2971,  2971, -3475, -3475, -3475, -3475,
   35520, 35520, -3475,  2115,  2115,  2115, -3475, -3475, 45301, -3475,
   -3475,  3100, -3475,   266, -3475, -3475, -3475,  2589,  2715, 79449,
   -3475,  1405,  1947,   365, -3475, -3475,  3091, -3475, -3475, -3475,
   -3475, -3475,   352, -3475, -3475, -3475, -3475, -3475,  1821,   722,
   -3475, -3475, -3475, 61534,  2595,  2896,  1412, -3475, 79449,  1821,
    2059, 30099,  2754, -3475,  2826, -3475, -3475,  2589, -3475,  2605,
    2780, 61534, -3475, -3475, -3475, -3475, -3475, -3475, -3475, -3475,
   61534, -3475, -3475,  2605,  1428,  3004, -3475,  2896, 61534,  2605,
     131,  2732,  2805, -3475
};

/* YYDEFACT[STATE-NUM] -- Default reduction number in state STATE-NUM.
   Performed when YYTABLE does not specify something else to do.  Zero
   means the default is an error.  */
static const yytype_int16 yydefact[] =
{
     160,   268,     0,  1582,  1581,  1652,   268,     0,  1516,     0,
     268,   678,   593,     0,  1674,  1673,     0,   212,   268,     0,
     160,     0,     0,     0,     0,     0,     0,   741,   744,   742,
       0,     0,     0,   268,   781,     0,  1675,   268,     0,     0,
     773,   743,     0,  1630,     0,     0,     0,     0,     0,     2,
       4,     5,     6,     7,     8,     9,    24,    10,    11,    12,
      13,    20,    14,    15,    17,    18,    19,    21,    22,    23,
      27,    26,    28,    29,  1539,    30,    32,    33,    34,     0,
      35,    25,    16,    31,    36,    37,    38,    39,   717,   703,
     786,   716,     0,     0,   159,   885,   724,    40,    41,    42,
      43,    44,    45,    46,  1676,  1671,    47,   267,   266,   260,
       0,     0,     0,     0,     0,  1651,     0,     0,   261,   114,
    1700,  1701,  1702,  1703,  2317,  1704,  1705,  1706,  1707,  1708,
    1709,  1710,  2318,  2071,  1711,  1712,  1713,  1714,  1715,  2072,
    1716,  1717,  1718,  2017,  2018,  2073,  2019,  2020,  1719,  1720,
    1721,  1722,  1723,  1724,  1725,  1726,  1727,  1728,  2021,  2022,
    1729,  1730,  1731,  1732,  1733,  2023,  2074,  2024,  1734,  1735,
    1736,  1737,  1738,  2075,  1739,  1740,  1741,  1742,  1743,  1744,
    1745,  1746,  2319,  2076,  1747,  1748,  1749,  1750,  1751,  1752,
    1753,  1754,  1755,  1756,  2025,  1757,  1758,  2026,  1759,  1760,
    1761,  1762,  1763,  1764,  1765,  1766,  2320,  1767,  1768,  1769,
    1770,  1771,  1772,  1773,  1774,  1775,  2321,  2322,  1776,  1777,
    1778,  1779,  1780,  1781,  1782,  1783,  1784,  1785,  2027,  1786,
    1787,  1788,  1789,  1790,  2028,  1791,  1792,  1793,  2029,  1794,
    1795,  1796,  2077,  2078,  1797,  1798,  2030,  2080,  1799,  1800,
    2323,  2031,  2032,  2324,  1801,  1802,  1803,  1804,  1805,  1806,
    1807,  1808,  2081,  1809,  1810,  1811,  1812,  1813,  1814,  1815,
    1816,  1817,  1818,  1819,  1820,  2082,  2033,  1821,  1822,  1823,
    1824,  1825,  2034,  2035,  2036,  1826,  2083,  2084,  1827,  2085,
    1828,  2325,  1829,  1830,  1831,  1832,  1833,  1834,  2086,  1835,
    2087,  1836,  1837,  1838,  1839,  1840,  1841,  1842,  1843,  2037,
    1844,  1845,  1846,  1847,  1848,  1849,  1850,  1851,  1852,  1853,
    1854,  1855,  1856,  1857,  1858,  1859,  1860,  1861,  1862,  1863,
    2038,  2089,  2039,  1864,  1865,  1866,  2326,  2040,  1867,  1868,
    2090,  1869,  2041,  1870,  2042,  1871,  1872,  1873,  1874,  1875,
    1876,  1877,  1878,  1879,  1880,  2043,  2091,  1881,  2092,  2044,
    1882,  1883,  1884,  1885,  1886,  1887,  1888,  1889,  1890,  2327,
    2328,  1891,  1892,  1893,  1894,  2045,  2093,  1895,  1896,  2046,
    1897,  1898,  1899,  1900,  1901,  1902,  1903,  1904,  2329,  2330,
    1905,  1906,  1907,  1908,  2047,  1909,  1910,  1911,  1912,  1913,
    1914,  1915,  2331,  1916,  1917,  1918,  1919,  1920,  1921,  1922,
    1923,  1924,  1925,  1926,  1927,  2094,  1928,  1929,  1930,  2048,
    1931,  1932,  1933,  1934,  1935,  1936,  1937,  1938,  1939,  1940,
    1941,  1942,  1943,  1944,  1945,  1946,  1947,  1948,  1949,  2049,
    1950,  1951,  2332,  2095,  2333,  1952,  2050,  1953,  2334,  1954,
    1955,  1956,  1957,  1958,  1959,  1960,  1961,  1962,  1963,  1964,
    1965,  2051,  1966,  2052,  1967,  1968,  1969,  2097,  1970,  1971,
    1972,  1973,  1974,  1975,  2053,  2054,  2335,  1976,  1977,  2055,
    1978,  2056,  1979,  1980,  2057,  1981,  1982,  1983,  1984,  1985,
    1986,  1987,  1988,  1989,  1990,  1991,  1992,  1993,  1994,  1995,
    1996,  1997,  2058,  2059,  1998,  2098,  1999,  2336,  2000,  2001,
    2002,  2003,  2337,  2004,  2005,  2006,  2007,  2008,  2009,  2010,
    2011,  2012,  2060,  2061,  2062,  2063,  2064,  2065,  2066,  2067,
    2068,  2069,  2070,  2013,  2014,  2015,  2016,     0,   115,   116,
    1461,   117,  1683,     0,  1438,   114,  2030,  2037,  2051,  1514,
    1515,   115,   117,     0,   263,   677,     0,     0,     0,     0,
       0,     0,   214,     0,     0,   587,   586,     0,  1505,   592,
       0,     0,     0,   119,   110,  1897,   118,  1437,   108,   125,
    2241,  2242,  2243,  2244,  2128,  2245,  2246,  2247,  2248,  2129,
    2249,  2130,  2131,  2132,  2133,  2134,  2135,  2250,  2251,  2252,
    2137,  2136,  2253,  2138,  2254,  2139,  2255,  2140,  2141,  2256,
    2257,  2142,  1753,  2143,  2144,  2258,  2259,  2260,  2261,  2262,
    2263,  2264,  2265,  2266,  2145,  2146,  2267,  2268,  2147,  2269,
    2270,  2148,  2271,  2149,  2150,  2151,  2272,  2273,  2274,  2152,
    2153,  2275,  2154,  2276,  2277,  2155,  2156,  2159,  2157,  2278,
    2158,  2279,  2160,  2161,  2162,  2280,  2281,  2163,  2164,  2282,
    2165,  2166,  2167,  2168,  2169,  2283,  2170,  2284,  2171,  2172,
    2285,  2286,  2287,  2288,  2289,  2174,  2173,  2175,  2176,  2290,
    2291,  2292,  2293,  2177,  2178,  2179,  2294,  2295,  2180,  2296,
    2297,  2181,  2182,  2298,  2183,  2184,  2299,  2185,  2186,  2300,
    2187,  2188,  2301,  2302,  2303,  2189,  2304,  2190,  2191,  2305,
    2306,  2192,  2193,  2307,  2194,  2308,  2309,  2310,  2311,  2195,
    2196,  2312,  2197,  2313,  2314,  2315,  2316,  2198,  2199,  2200,
    2201,  2202,  2203,  2204,  2205,  2206,  2207,  2208,  1648,   127,
     126,   128,   129,     0,   611,   612,     0,   622,     0,   604,
     609,   605,     0,   631,     0,   624,   632,   613,   603,   625,
     614,   602,   213,     0,   633,   619,   607,     0,     0,     0,
       0,   264,   225,   593,     0,   160,     0,  1543,  1544,  1545,
    1546,  1547,  1548,  1553,  1549,  1550,  1551,  1552,  1554,  1555,
    1556,  1557,  1558,  1534,  1539,  1559,  1560,  1561,  1562,  1563,
    1564,  1565,  1566,  1567,  1568,  1569,  1570,  1571,  1572,     0,
    1516,     0,     0,  2023,  2074,  2028,     0,     0,  2041,     0,
    2044,  2045,  1931,  2052,  2055,  2056,  2057,  2058,     0,   956,
     118,   112,   940,     0,   719,   889,   899,   940,   945,  1224,
     968,  1225,     0,   120,  1616,  1615,  1611,  1610,   199,  1478,
    1660,  1799,  1838,  1948,  2053,  1976,  1679,  1661,  1655,  1659,
     265,   780,   778,     0,  1409,  1799,  1838,  1935,  1948,  2053,
    1590,  1594,     0,   262,     0,  1681,  1665,     0,  1666,   118,
     725,   772,     0,   269,  1629,     0,  1634,     0,  1911,   752,
     755,  1472,   753,   270,  2338,  2339,  2340,  2341,  2342,  2343,
    2344,  2345,  2346,  2347,  2348,  2349,  2350,  2351,  2352,  2353,
    2354,  2355,  2356,  2357,  2358,  2359,  2360,  2361,  2362,  2363,
    2364,  2365,  2366,  2367,  2368,  2369,  2370,  2371,  2372,  2373,
    2374,  2375,  2376,  2377,  2378,  2379,  2380,  2381,  2382,  2383,
    2384,  2385,  2386,  2387,  2388,  2389,  2390,   271,   272,     0,
     717,     0,     0,     1,   160,  1538,  1644,     0,   166,     0,
     776,   776,     0,   776,     0,   709,     0,     0,   717,   712,
     716,   886,  1678,  2330,  2053,  1976,  1664,  1667,  1807,     0,
       0,  1807,     0,  1807,     0,  1807,     0,     0,  1654,  1393,
       0,  1439,   121,     0,     0,  1527,  1523,  1528,  1524,  1529,
    1522,  1521,  1530,  1526,     0,     0,     0,   558,   591,   590,
     589,   588,   593,     0,  1807,  1489,     0,   640,   641,     0,
       0,     0,     0,     0,   210,  1500,   111,   109,  1807,  1649,
     620,   621,     0,   610,   606,   608,     0,     0,     0,  1807,
    1467,   630,   626,  1807,   630,  1431,  1807,     0,     0,   217,
       0,   586,  1536,  1573,  2195,  1574,  1575,  1576,  1588,     0,
    1589,  1579,  1542,   160,     0,   676,  1513,  1612,     0,     0,
       0,  1345,     0,   901,   940,   945,     0,     0,   958,     0,
    1364,     0,  1370,     0,     0,     0,   940,   724,     0,   899,
     957,   113,     0,   938,   939,   827,   827,   781,     0,   762,
     950,     0,     0,   953,   951,     0,   953,     0,     0,     0,
     953,   949,   908,     0,   827,     0,   938,   941,   827,     0,
     960,  1533,     0,     0,     0,     0,     0,  1658,  1656,  1657,
    1662,     0,     0,     0,  1441,  1443,  1444,  1313,  1454,  1203,
       0,  2018,  2019,  2020,  1385,  2021,  2022,  2024,  2025,  2026,
    1162,  1773,  2027,  1452,  2029,  2031,  2032,  2034,  2035,  2036,
    2037,  2038,  2039,     0,  1453,  2042,  1876,  2047,  2048,  2050,
    2053,  2054,  1451,  2059,     0,     0,     0,  1420,  1336,     0,
    1202,     0,     0,     0,  1386,  1394,  1195,     0,     0,  1004,
    1005,  1026,  1027,  1006,  1032,  1033,  1035,  1007,     0,  1416,
    1096,  1191,  1404,  1200,  1208,  1204,  1243,  1206,  1223,  1209,
    1280,  1201,     0,  1207,  1193,  1412,   762,  1410,     0,  1194,
    1440,   762,  1408,  1593,  1591,  1597,  1592,     0,     0,     0,
       0,     0,   113,  1636,  1637,  1628,  1626,  1627,  1625,  1624,
    1631,     0,  1633,  1539,  1331,  1333,     0,   754,     0,     0,
       0,   328,   706,   705,   707,     3,  1472,     0,     0,     0,
       0,   774,   775,     0,     0,     0,     0,     0,     0,     0,
       0,   870,   801,   802,   804,   867,   871,   879,     0,     0,
       0,     0,     0,   713,     0,  1677,  1670,     0,  1668,     0,
       0,     0,   144,   144,     0,     0,     0,     0,     0,   102,
      51,    95,     0,     0,     0,     0,   239,   252,     0,     0,
       0,     0,     0,   249,     0,     0,   232,   226,   228,    53,
       0,   144,     0,    49,     0,     0,     0,    55,  1652,     0,
     676,  1392,     0,   123,   124,   122,   114,     0,  2209,  2071,
    2072,  2073,  2074,  2024,  2075,  2076,     0,  2077,  2078,  2030,
    2080,  2081,  2082,  2083,  2084,  2085,  2086,  2087,  2037,  2089,
    2090,  2091,  2092,  2093,  2094,  2235,  2095,  2051,  2097,  2057,
       0,  2098,  1216,   115,  1457,   117,  1339,   786,  1337,  1473,
       0,     0,  1525,     0,     0,     0,     0,   674,     0,     0,
       0,     0,     0,     0,  1485,     0,     0,  1807,   206,  1807,
     558,     0,  1807,   558,  1807,     0,  1807,   211,   215,  1499,
    1502,     0,   623,   630,   618,   616,   615,   617,  1807,   258,
       0,     0,  1468,   628,   629,     0,   597,     0,     0,   599,
       0,     0,   222,     0,   220,     0,   593,   160,     0,   233,
    1584,  1585,  1583,     0,     0,  1541,   236,  1578,  1587,  1577,
    1586,  1540,   253,  1535,     0,     0,  1531,   663,     0,     0,
       0,     0,  1346,  1073,  1072,  1056,  1057,  1070,  1071,  1058,
    1059,  1066,  1067,  1075,  1074,  1064,  1065,  1060,  1061,  1054,
    1055,  1062,  1063,  1068,  1069,  1052,  1053,  1359,  1347,  1348,
    1349,  1350,  1351,  1352,  1353,  1354,  1355,  1356,  1357,  1358,
       0,     0,  2378,   898,   896,     0,     0,     0,     0,     0,
       0,  1386,     0,  1166,  1201,     0,     0,     0,  1331,  1369,
       0,     0,     0,     0,     0,     0,  1331,  1375,     0,     0,
     924,   936,     0,   820,   826,   897,   895,     0,  1409,   890,
       0,   970,   950,     0,   949,     0,     0,   952,   946,     0,
     947,     0,     0,     0,     0,   948,     0,     0,     0,     0,
     893,     0,   936,     0,   894,   967,  1618,  1617,  1613,  1600,
    1608,   200,     0,  1463,  2099,  2100,  2101,  1014,  2102,  1043,
    1021,  1043,  1043,  2103,  2104,  2105,  2106,  1010,  1010,  1023,
    2107,  2108,  2109,  2110,  2111,  1011,  1012,  1048,  2112,  2113,
    2114,  2115,  2116,     0,     0,  2117,  1043,  2118,  1010,  2119,
    2120,  2121,  1015,  2122,   978,  2123,     0,  2124,  1013,   979,
    2125,  1051,  1051,  2126,     0,  1038,  2127,  1464,  1465,  1466,
       0,  1342,   988,   996,   997,   998,   999,  1024,  1025,  1000,
    1030,  1031,  1001,  1095,     0,  1010,   160,  1663,  1680,     0,
    1336,  1210,  1042,  1029,  1384,     0,  1037,  1036,     0,  1336,
    1019,  1018,  1017,  1197,     0,  1016,  1293,  1043,  1043,  1041,
    1121,  1020,     0,     0,     0,     0,     0,  1047,     0,  1045,
    1122,  1100,  1101,     0,  1419,  1428,  1331,  1335,     0,  1195,
    1331,     0,     0,  1283,  1285,     0,  1212,  1213,     0,  1387,
    1442,  1196,     0,  1447,     0,     0,  1095,  1095,  1415,  1313,
       0,  1303,  1306,     0,     0,  1310,  1311,  1312,     0,     0,
       0,  1407,     0,  1321,  1323,     0,     0,  1137,  1319,     0,
    1140,     0,     0,     0,     0,  1307,  1308,  1309,  1299,  1300,
    1301,  1302,  1304,  1305,  1317,  1298,  1118,     0,  1192,     0,
    1246,     0,  1117,  1413,   888,     0,  1445,   888,  1602,  1606,
    1607,  1605,  1601,     0,  1596,  1595,  1598,  1599,  1682,     0,
    1638,  1622,     0,  1619,  1334,   883,   756,  1433,     0,   760,
       0,   341,   320,   342,  1645,  1643,   165,   164,     0,     0,
     729,   728,   795,   787,   789,   795,     0,   727,     0,   843,
     844,     0,     0,     0,     0,   876,   874,  1441,  1454,   831,
     805,   830,     0,     0,   809,     0,   835,  1096,   869,   711,
     799,   800,   803,   710,     0,   872,     0,   882,     0,   748,
     750,   733,   747,   745,   730,   738,   870,   804,     0,  1672,
    1669,     0,     0,     0,     0,     0,  1807,     0,     0,   981,
      86,    67,   510,   143,     0,     0,     0,     0,     0,     0,
       0,    94,    91,    92,    93,     0,     0,     0,     0,  1463,
     237,   238,   251,     0,   242,   243,   240,   244,   245,     0,
       0,   230,   231,     0,     0,     0,     0,   229,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1653,  1646,  1388,
    1393,   786,   786,   786,     0,   784,   785,     0,     0,     0,
       0,     0,   662,   556,   566,     0,     0,     0,     0,  1489,
       0,     0,     0,     0,     0,   210,   275,   274,     0,     0,
     593,  1490,  1488,  1492,  1491,  1493,  1779,   194,     0,     0,
     205,   202,     0,   555,   529,     0,     0,  1504,     0,     0,
       0,     0,     0,     0,  1807,   545,  1501,     0,  1650,   273,
       0,     0,   256,   630,  1469,     0,   627,   630,  1432,     0,
     630,   224,     0,     0,  1537,  1580,   234,   254,   235,   255,
     676,   671,   701,     0,   679,   684,   660,     0,   660,     0,
     681,   685,   660,   680,     0,   660,   675,  1614,     0,  1239,
       0,  1229,     0,     0,   959,     0,     0,  1230,  1168,  1169,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1186,  1185,
    1231,   963,     0,   966,     0,     0,  1367,  1368,     0,  1232,
       0,     0,  1374,     0,     0,     0,  1237,     0,   900,     0,
       0,     0,   815,   819,   822,     0,   825,   762,   718,  1799,
    1838,     0,   773,   773,   773,   771,   761,     0,   847,     0,
       0,   925,     0,     0,   927,   929,     0,     0,   932,   907,
     906,     0,     0,     0,     0,   971,     0,  1437,     0,     0,
     201,     0,     0,     0,   996,     0,     0,     0,   986,   982,
       0,  1076,  1077,  1078,  1079,  1080,  1081,  1082,  1083,  1084,
    1085,  1086,  1087,  1002,  1477,     0,  1008,  1482,  1483,  1480,
    1476,  1479,  1481,  1484,     0,     0,     0,     0,  1383,  1379,
       0,     0,     0,     0,  1288,  1290,  1292,     0,  1040,  1039,
    1297,  1303,  1306,  1310,  1311,  1312,  1307,  1308,  1309,  1299,
    1300,  1301,  1302,  1304,  1305,     0,  1325,     0,  1279,     0,
       0,     0,     0,     0,     0,  1418,     0,  1164,     0,  1214,
    1199,     0,     0,  1286,  1215,  1420,  1395,     0,     0,     0,
    1450,  1449,  1097,  1106,  1109,  1141,  1142,  1113,  1114,  1115,
    1119,  1475,  1474,  1414,     0,  1406,     0,     0,  1098,  1123,
    1128,     0,  1376,  1158,     0,  1146,     0,  1136,     0,  1144,
    1148,  1124,  1139,     0,  1120,     0,  1407,  1322,  1324,     0,
    1320,     0,  1110,  1111,  1112,  1102,  1103,  1104,  1105,  1107,
    1108,  1116,  1296,  1294,  1295,     0,  1393,     0,  1405,     0,
       0,  1248,     0,     0,  1143,  1411,     0,   970,   786,   970,
       0,  1095,  1639,  1472,  1632,  1621,  1472,  1332,  1434,  1471,
     758,     0,     0,   327,   323,   335,     0,   366,   341,   328,
     313,     0,  1641,   151,   155,     0,  1394,   185,   187,   888,
       0,   793,   794,   798,     0,     0,   798,   777,   726,  2048,
    1931,     0,     0,     0,     0,   836,   877,     0,   868,   833,
     834,     0,   832,  1441,   837,  1440,   838,   841,   842,   810,
    1429,   878,   880,     0,   873,     0,  1435,   732,   751,     0,
       0,     0,     0,     0,   715,   714,   884,     0,    52,     0,
    1807,    69,     0,     0,     0,     0,     0,     0,   460,     0,
     560,   460,   107,  1807,   630,  1807,   630,  1704,  1774,  1949,
       0,    65,   534,    98,     0,   137,   563,     0,   519,    88,
     103,   130,     0,     0,   227,    54,   241,   246,   133,   250,
     247,  1509,   248,   144,     0,    50,     0,   131,     0,  1507,
       0,     0,    56,   135,  1511,  1654,     0,  1392,     0,   784,
     784,   784,     0,  1338,     0,     0,     0,  1340,  1341,  1136,
    1518,  1519,  1520,  1517,   648,   661,     0,   557,     0,   673,
     651,   652,   662,     0,  1487,     0,   206,   558,     0,   558,
       0,   215,     0,  1489,     0,     0,   196,   192,     0,     0,
       0,     0,   556,   548,   546,   579,     0,   553,   547,     0,
       0,   505,     0,  1698,     0,     0,     0,     0,   642,     0,
       0,   210,   216,     0,     0,     0,   258,   259,   596,  1470,
     598,     0,   600,   223,   221,  1532,   668,  1336,     0,   666,
     672,   665,   667,   670,   664,     0,   659,     0,   694,     0,
       0,     0,     0,     0,     0,     0,     0,  1226,  1344,     0,
    1362,  1361,  1167,  1174,  1177,  1181,  1182,  1183,  1363,     0,
       0,     0,  1178,  1179,  1180,  1170,  1171,  1172,  1173,  1175,
    1176,  1184,   968,     0,     0,   962,  1372,  1371,  1365,  1366,
       0,  1234,  1235,  1236,  1373,     0,     0,   937,   813,   811,
     814,   816,   812,     0,     0,   970,   773,   773,   773,   773,
     770,     0,     0,     0,   969,     0,   864,   931,     0,   955,
       0,   928,   911,     0,   919,     0,   926,   975,   942,     0,
       0,   944,  1609,   992,     0,   987,   983,     0,     0,     0,
     993,     0,     0,     0,     0,     0,     0,     0,  1343,   779,
    1211,     0,     0,     0,  1380,     0,  1163,  1009,  1022,     0,
    1291,  1205,     0,  1314,  1278,  1050,  1049,  1051,  1051,     0,
       0,     0,  1427,     0,  1332,  1282,  1284,  1428,  1198,  1034,
    1095,     0,     0,     0,     0,     0,     0,     0,  1147,  1138,
       0,  1145,  1149,     0,     0,     0,  1132,     0,     0,  1130,
    1159,  1126,     0,     0,  1160,  1392,     0,  1396,     0,     0,
    1247,  1256,   891,   887,   847,   784,   847,     0,  1603,  1623,
    1620,   759,   160,   323,   321,   322,   323,   323,   323,   323,
     333,   339,   334,   323,   323,   323,   385,     0,   383,   328,
     391,   366,   366,   367,   344,   389,   391,   353,   363,   362,
     319,   343,     0,   317,  1642,     0,   174,     0,     0,     0,
       0,   177,   191,   188,  1641,     0,     0,   788,   790,     0,
    1315,   798,   792,   840,   839,     0,   808,   875,   806,     0,
     881,     0,   749,     0,   735,     0,   910,     0,     0,     0,
       0,     0,   509,     0,     0,     0,   460,     0,   568,     0,
     575,     0,     0,   560,   541,    87,     0,     0,     0,    61,
     106,    79,    71,    57,    85,     0,     0,    90,     0,    83,
     100,   101,    99,   104,     0,   470,   495,     0,     0,   506,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   676,  1393,  1389,  1393,     0,     0,     0,   786,   782,
     783,  1217,     0,   647,   700,   697,   698,   696,   232,   567,
       0,     0,     0,   204,   555,     0,  1504,     0,     0,     0,
    1486,   593,     0,   197,     0,   195,     0,   206,   558,     0,
     533,   529,   554,   527,   526,   528,     0,  1699,   225,     0,
    1693,   558,  1503,     0,     0,   643,     0,   637,   215,     0,
       0,  1498,   257,   630,     0,   655,   695,   702,   682,   687,
       0,   693,   689,   688,   683,   691,   690,   686,  1227,  1238,
    1360,     0,     0,     0,     0,   961,   964,     0,  1233,  1228,
     935,     0,     0,   847,     0,     0,     0,     0,   764,   763,
     769,     0,     0,  1250,   930,     0,     0,     0,   917,   905,
     912,   913,     0,     0,     0,   973,   972,   943,   996,     0,
     976,   996,     0,   996,     0,   994,     0,  1003,  1088,  1089,
    1090,  1091,  1092,  1093,  1094,  1028,     0,  1382,  1378,  1287,
    1289,  1326,  1046,  1044,  1417,  1331,  1422,  1424,     0,     0,
       0,  1281,  1165,  1448,  1099,     0,     0,  1129,  1377,  1150,
       0,     0,     0,  1125,  1314,     0,     0,     0,     0,     0,
    1134,     0,  1400,  1393,     0,  1399,     0,     0,     0,     0,
    1222,   892,   864,     0,   864,     0,     0,   332,   338,   331,
     330,   329,   336,   340,   326,   383,   388,   384,   386,   323,
       0,   390,   380,     0,   364,   365,   345,   366,     0,   350,
     349,   351,   348,   393,     0,     0,     0,     0,   312,   396,
    1201,     0,     0,  1640,     0,  1635,   152,   153,   154,     0,
       0,     0,   169,   146,     0,     0,   186,   174,   162,   796,
     797,     0,   791,   807,  1430,  1436,   734,     0,  1195,     0,
       0,   731,     0,   138,   460,     0,     0,    68,     0,   577,
     521,   569,   552,   536,     0,     0,     0,   461,     0,   594,
       0,     0,   542,     0,     0,     0,     0,   522,     0,     0,
     481,     0,     0,   552,     0,   559,   477,   478,     0,    60,
      80,     0,    76,     0,   105,     0,     0,     0,     0,     0,
      63,    75,     0,    58,     0,   630,   630,    66,  1463,  2099,
    2100,  2101,  2102,  2103,  2104,  2105,  2106,  2107,  2108,  2219,
    2109,  2110,  2111,  2112,  2113,  2114,  2115,  2116,  2228,  2117,
     467,  2118,  1876,  2119,  2120,  2121,  2122,  2123,     0,  2124,
     979,  2125,  2126,  2308,  2127,  1299,  1300,   465,   466,   562,
     462,  1464,   463,  1466,   570,   464,     0,   565,   520,   134,
    1510,     0,   132,     0,  1508,   141,   139,   136,  1512,  1647,
       0,     0,  1220,  1221,  1218,   784,     0,     0,     0,   676,
     654,     0,     0,     0,  1698,     0,     0,     0,   301,   283,
     311,     0,  1807,     0,   193,     0,  1504,   203,   555,     0,
     585,   505,   580,     0,  1698,  1696,     0,  1504,  1692,     0,
     634,     0,   207,     0,     0,     0,   601,   669,     0,   692,
    1187,     0,     0,     0,     0,   823,     0,   829,   864,   768,
     767,   766,   765,   846,  1748,  2031,  1930,     0,   850,   845,
     848,   853,   855,   854,   856,   852,   863,     0,   866,   954,
    1327,  1329,     0,     0,     0,     0,   918,   920,     0,   922,
       0,   974,   990,     0,   991,     0,   989,   984,   995,  1381,
    1425,  1426,  1421,     0,  1096,  1156,  1154,  1151,     0,  1152,
    1133,     0,     0,  1131,  1127,     0,  1161,     0,     0,  1397,
       0,  1242,     0,  1245,  1259,  1255,  1254,  1250,  1217,  1250,
    1604,   757,   324,   325,   337,   387,   366,   353,   381,   382,
     313,     0,   395,     0,   368,     0,   347,     0,   418,   419,
     400,   401,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1407,     0,     0,     0,     0,     0,   434,     0,     0,
     437,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   315,   173,   150,   176,
     175,     0,  1394,   183,     0,     0,   174,     0,   178,   644,
       0,     0,   746,   909,   739,   740,     0,   573,    70,     0,
     552,     0,   460,   538,   537,   540,   535,   539,     0,   595,
       0,     0,   479,     0,   486,   524,   525,   523,   480,   552,
     558,   482,     0,     0,     0,    72,    62,    59,    64,    73,
       0,     0,    74,    77,   975,    89,    82,  1463,  2228,  2237,
       0,     0,     0,     0,     0,  1391,  1390,     0,   650,   649,
     699,   646,   657,   232,     0,     0,     0,   529,  1695,     0,
       0,   639,     0,     0,     0,     0,     0,   298,   290,     0,
       0,   555,   198,     0,     0,     0,  1698,     0,     0,   457,
       0,   502,     0,   218,  1697,     0,     0,  1684,     0,     0,
       0,  1496,  1497,     0,   656,  1188,     0,  1189,   965,     0,
       0,   821,  1250,     0,     0,     0,   857,   851,     0,  1249,
    1251,     0,   818,  1330,   914,     0,   916,     0,   940,     0,
     940,   923,   985,   977,  1423,  1240,     0,  1153,  1157,  1155,
    1135,  1393,  1401,  1393,  1398,  1244,  1258,  1261,   866,  1446,
     866,   313,   361,   359,     0,     0,   376,   379,   346,   383,
     353,   348,   397,   408,   438,   439,   412,   413,   414,   416,
       0,     0,     0,   398,   420,   425,   455,     0,   443,     0,
     433,     0,   441,   445,   421,   436,   417,     0,  1407,     0,
       0,     0,     0,   409,   410,   411,   402,   403,   404,   405,
     406,   407,   415,   440,     0,   314,   318,     0,     0,   161,
       0,     0,   158,   145,   163,  1316,   736,   737,     0,   460,
       0,   551,   574,   491,   469,     0,     0,     0,   476,   483,
     584,   485,     0,    81,    97,     0,     0,   564,   142,   140,
    1219,   676,     0,   283,  1504,   505,  1692,   636,   209,   302,
     283,   279,   309,   297,     0,     0,   310,     0,   292,     0,
       0,     0,   529,   225,  1694,   518,   511,   512,   513,   514,
     515,   516,   517,   532,   531,   503,   504,     0,     0,     0,
       0,     0,   638,     0,  1498,     0,   180,   189,     0,   180,
    1190,   824,     0,   866,     0,     0,     0,   849,     0,     0,
     865,     0,   722,  1328,     0,   904,   902,     0,   903,     0,
       0,     0,     0,   786,   818,   818,   359,     0,   392,     0,
     373,   377,   394,     0,     0,     0,     0,     0,     0,     0,
     444,   435,     0,   442,   446,     0,     0,   429,     0,     0,
     427,   456,   423,     0,   316,   147,     0,   148,   184,     0,
       0,     0,   558,   576,   550,     0,   543,   489,   488,   490,
     494,     0,   492,     0,   508,     0,   501,   469,     0,    84,
       0,   571,   645,   653,     0,     0,   459,  1686,   282,   276,
     277,     0,   280,   299,   303,     0,     0,   289,     0,   293,
     555,     0,  1692,   505,  1698,  1692,     0,  1689,     0,   635,
     208,     0,     0,     0,   182,  1504,     0,   182,     0,   818,
     859,     0,   858,  1253,  1252,   820,   915,     0,  1241,  1403,
    1402,     0,  1265,   721,   720,   360,   357,   378,     0,     0,
     352,   399,     0,     0,   426,   447,     0,     0,     0,   422,
       0,     0,     0,     0,     0,   431,     0,     0,     0,     0,
     584,     0,   530,     0,     0,   491,     0,   484,   581,   582,
     583,     0,   497,   487,   498,    78,    96,   572,   279,     0,
       0,     0,   308,     0,   306,     0,   555,  1687,   458,   219,
    1685,  1690,  1691,     0,   180,   179,   795,   181,   970,   190,
     795,   828,   723,   860,   817,   921,  1260,     0,     0,     0,
       0,     0,   358,   374,   369,   375,   371,   453,   451,   448,
       0,   449,   430,     0,     0,   428,   424,     0,     0,   157,
     970,   168,     0,   501,   549,   544,   468,   493,   507,     0,
       0,     0,   499,     0,   500,   281,  1692,     0,   300,   304,
       0,   307,     0,     0,   182,   798,  1494,   798,  2017,  1749,
    1983,     0,  1277,  1266,  1277,  1277,  1257,   355,   354,   356,
       0,     0,   450,   454,   452,   432,   149,   156,     0,   460,
     473,     0,   472,     0,   561,   496,  1688,   295,     0,     0,
     287,     0,  1504,   795,   170,   171,     0,  1270,  1269,  1268,
    1272,  1271,     0,  1264,  1262,  1263,   370,   372,   970,   578,
     471,   475,   474,     0,     0,     0,     0,   291,     0,   970,
     798,     0,     0,  1274,     0,  1275,   167,   295,   278,     0,
       0,     0,   305,   288,  1495,   172,  1267,  1273,  1276,   294,
       0,   285,   286,     0,     0,     0,   284,     0,     0,     0,
     311,   290,   292,   296
};

/* YYPGOTO[NTERM-NUM].  */
static const yytype_int16 yypgoto[] =
{
   -3475, -3475, -3475,  2197,   102,   108,  -978, -1259,  -988, -1281,
   -3475,    71,   109, -3475, -3475,   402, -3475,  1276, -3475,   394,
    -737,   802, -3475,  1376, -3475, -3475,  1822,   772,   111,   112,
    2357, -3475,  1248, -3475,  6301,    -7,  1681,   911,  -534,  -957,
   -1277,    50,    26, -3475, -3475, -3475, -3475, -3475,  -504,   750,
   -1282, -3475,   685, -3475, -3475, -3475, -3475,   -25,   376, -2357,
      11, -2277, -3177,  -538, -3475,  -700, -3475,  -192, -3475,  -623,
   -3475,  -708,  -631,  -689, -3008, -1220, -3475,  1884,  -252, -3475,
     843, -3475, -2678, -3475, -3475,   831, -3475, -1230, -3475, -2317,
     368,  -612, -2545, -2695, -2243,  -997,   452,  -616,   428, -2182,
   -1041, -3475,   857, -3475,  -600, -3475,  -947, -2579,   115, -2986,
   -1741,  3042, -3475, -3475, -3475,  -736, -3475, -2662,  6101, -3475,
     120,  1802, -2218,   122, -1696, -3475, -3475, -1755,    83, -2231,
      13, -2183,   123, -3475, -3475,   124,    37,  -622,   497, -3475,
     127, -3475, -3475,  1776,  -982, -3475, -3475,   741,   130,  1226,
   -3475, -2672, -3475,  -601, -3475,  -615,  -639, -3475, -3475,    40,
    -937,  1763, -3475, -3475, -3475,    15, -3475,  -425, -3475, -3475,
   -2715, -3475,    42, -3475, -3475, -3475, -3475, -3475,  -351,   512,
   -3475, -3475,  -537, -2750,  -478, -3475, -3289, -3383, -3475, -3475,
    -697, -3318, -2125,   132,   128,  1754,   -20, -3475,   804, -3475,
    -594, -3475, -3062, -3159, -3475,  -758, -3475,  -766,  -761, -2953,
    -732,  -723, -3475,  -586, -3474,  -690, -3475, -3475,  -750, -2927,
   -3475, -3475,  2416, -3475,  -914, -3475,   564, -2296, -3475,   966,
   -3475,   967, -3475,  -266, -2973, -3475, -3475,  -419, -3475, -3475,
   -3475, -2388,   -38,  -661,  -658, -3475, -3112, -3475, -3475, -2494,
   -3475, -3475, -3475,   571, -3475, -3475,  2248,   135,   138, -3475,
     588,   139, -1211,    14,  7361,   -42,   -26, -3475,   -10, -3475,
   -3475, -3475,   930, -3475, -3475,     9,    55,  2001, -3475, -1085,
   -3475, -1063,   756, -3475,  2153,  2156, -2232,  -961,   -60, -3475,
     970, -1745, -2219,  -694,  1414,  1996,  1984,   725, -3258, -3475,
    -494, -3475,    68, -3475, -3475,   961,  1465, -1628, -1637, -3475,
   -2208, -3475,  -372,  -189, -3475, -3475, -3475, -3475, -3475, -2643,
   -3117,  -666,  1434, -3475,  2004, -3475, -3475, -3475, -3475,    21,
   -1575,  3251,  1004,   -47, -3475, -3475, -3475, -3475,   397, -3475,
    1197,    52, -3475,  2453,  -682,  -816,  2205,    56,   339, -1795,
      51,  2481,   771, -3475, -3475,   773, -2170, -1485,   743,   -84,
    1207, -3475, -3475, -1332, -3475, -1976, -1246, -3475, -3475,  -715,
    -655, -3475, -3475, -3475,  1184,  1403, -3475, -3475,  2039,  2062,
   -3475,  -812,  2093,  -762, -1084,  2234,  -998,  2235, -1001,  -983,
    -991,  2254,  2255,  2258,  2259,  2261,  2262, -1564,  8407,  2178,
    9912, -2285, -3475, -2281,  1337,  1339,    36, -3475, -1476,    60,
   -3475, -3475, -3475, -3475, -2890, -3475,  -318, -3475,  -316, -3475,
   -3475, -3475, -1735, -2961, -1784, -3475,  9964,  1151, -3475, -3475,
     733, -3475, -3475, -3475, -3475, -1618, -3475,  9189,  1042, -3475,
   -2092, -3475, -3475, -1062,  -831, -1179, -1055, -1276, -2021, -3475,
   -3475, -3475, -3475, -3475, -3475, -1551, -1853,    44, -2128, -3475,
   -3475,  1203, -3475, -3475, -3475, -1808, -2187, -3475, -3475, -3475,
   -2141,  1800,   341,  -856, -1702, -3475,  1165, -2439, -3475, -3475,
     735, -3475,  -767, -1202, -2551,  5717,    48, -3475,  -891, -2664,
   -3475, -3475,  -751, -2771, -1159,  -932, -3475,   145,  1524,    49,
   -3475,   147,  1573, -3475, -3475, -3475,   148, -3475,  1023,   149,
     705, -3475,  1257, -3475,   898,    33, -3475, -3475, -3475,    91,
    3242,    22, -3229
};

/* YYDEFGOTO[NTERM-NUM].  */
static const yytype_int16 yydefgoto[] =
{
       0,    48,    49,    50,   777,   778,  1940,  1883,  3117,  1318,
    1873,  1446,   779,  2741,  2742,  2743,  2350,  1299,  3709,  2351,
    1300,  1301,  2745,    54,    55,    56,   117,  1330,   780,   781,
     549,    59,  2400,  1004,   829,  1184,   831,  1185,  1701,   992,
    1333,  1334,   782,  2783,  2412,  3403,  2834,  3404,  2477,  2406,
    1456,  2470,  1982,  1917,  1457,   558,  1996,  2835,  2788,  1983,
     783,  2730,  3119,  3702,  2756,  3914,  3055,  3056,  3699,  3700,
    2733,  2353,  3802,  3803,  2817,  1864,  3797,  2433,  3613,  2357,
    2338,  3057,  2441,  3561,  3170,  2354,  3037,  2434,  3695,  1956,
    2435,  3696,  3352,  2436,  1914,  1944,  2734,  3804,  2358,  1915,
    2729,  3120,  1852,  2437,  3706,  2438,   570,  3041,   784,  2820,
    1401,   538,   539,   540,  1628,   740,  1374,   741,   541,   948,
     785,  1023,  1950,   786,  1394,  1932,    65,  1408,   571,  1953,
     787,  1941,   788,  2804,  2805,   789,   790,  1233,  2686,  2272,
     791,   768,   769,  1041,  1426,   770,    71,  1962,   792,  1432,
    1433,  1049,    73,   956,  1448,   793,  1449,  1450,  1059,    74,
    2836,  1061,  1062,    75,    76,   795,  3442,  3185,  1410,  1957,
    2446,   572,   796,  3002,  2274,  2689,  3691,    79,  3333,  2277,
    1259,  3336,  3627,  2995,  3331,  2690,  3744,  3826,  3334,  2278,
    2279,  3628,  2280,   797,   846,  1568,  3496,    81,  1928,  3721,
    3722,    82,  3415,  3971,  3960,  3961,  3921,  3598,  3729,  3159,
    3944,  3917,  3595,  3724,  3160,  3725,  3881,  3596,  3418,  2683,
    3546,  2992,    83,  2270,  2660,  3274,  1781,  2661,  2664,  2267,
    1782,  1783,  2977,  3287,  2983,  3899,  3842,  3658,  2970,  2671,
    2672,  2673,  2674,  3843,  3845,  3659,  3844,  3280,  3281,  2675,
    2676,  2677,  2972,  2973,  2678,  2679,  2988,   798,   799,  1126,
    2120,   800,  1855,   801,  1186,    89,    90,  1099,    91,  3346,
      92,    93,  1829,  1830,  1831,   877,   889,   890,  2262,  1541,
    2066,   882,  1263,  1798,   863,   864,  2396,   964,  1906,  1793,
    1794,  2283,  2697,  1822,  1823,  1272,  1273,  2054,  3642,  2055,
    2056,  1534,  1535,  3451,  1810,  1814,  1815,  2304,  2294,  1801,
    2546,  3208,  3209,  3210,  3211,  3212,  3213,  3214,  1187,  2873,
    3462,  1818,  1819,  1275,  1276,  1277,  1827,  2314,    95,    96,
    2247,  2642,  2643,   835,  3225,  1558,  1832,  2877,  2878,  2879,
    3228,  3229,  3230,   836,  1094,  1095,  1118,  1113,  1548,  2074,
     837,   838,  2031,  2032,  2515,  1120,  2068,  2084,  2085,  2885,
    2568,  1630,  2339,  1631,  1632,  2099,  1633,  1188,  1634,  1660,
    1189,  1665,  1636,  1190,  1191,  1192,  1639,  1193,  1194,  1195,
    1196,  1653,  1197,  1198,  1677,  2101,  2102,  2103,  2104,  2105,
    2106,  2107,  2108,  2109,  2110,  2111,  2112,  2113,  1244,  1833,
    1200,  1201,  1202,  1203,  1204,  1205,  1206,  1207,   840,  1208,
    1209,  1750,  2241,  2641,  3218,  3459,  3460,  2950,  3266,  3487,
    3653,  3840,  3892,  3893,  3933,  1210,  1211,  1693,  1694,  1695,
    2134,  2135,  2136,  2137,  2235,  1744,  1745,  1212,  3125,  1747,
    2157,  3221,  3222,  1245,  1527,  1688,  1377,  1378,  1644,  1500,
    1501,  1508,  2006,  1516,  1520,  2036,  2037,  1528,  2203,  1213,
    2128,  2129,  2585,  1655,  1214,  1332,  1700,  2945,  2238,  1748,
    2197,  1221,  1215,  1222,  1217,  1684,  1685,  2602,  2917,  2918,
    2167,  2311,  1777,  2316,  2317,  1045,  1218,  1219,  1220,  1379,
     544,  1645,  3827,  1422,  1250,  1380,  2193,   802,   109,   803,
      99,   804,  1240,   886,  1241,  1243,   805,   857,   858,   806,
     870,   871,  1570,  1764,  1571,   952,   104,   105,  1286,   859,
     878,   808,  3437
};

/* YYTABLE[YYPACT[STATE-NUM]] -- What to do in state STATE-NUM.  If
   positive, shift that token.  If negative, reduce the rule whose
   number is the opposite.  If YYTABLE_NINF, syntax error.  */
static const yytype_int16 yytable[] =
{
     537,   550,  1044,   991,  1317,   951,   576,  1216,  1282,    94,
    1387,    61,   576,    66,    87,    77,   830,  1042,   844,   844,
    1519,  1114,   106,   848,   576,   856,    60,   949,   856,    94,
     965,   875,   879,   103,  1335,   879,  1887,    69,   576,   576,
    1056,  2033,    78,   542,   833,   966,   967,  1778,  1898,    98,
    2286,  2245,   876,   807,  2156,   543,  1246,  1886,  1870,   839,
     794,  1851,  1429,  1937,  2735,  1390,   738,  2702,   969,  1572,
    1491,   543,  2564,  1489,  1445,  2628,  1861,  2644,  2088,  2646,
    1493,  3155,  1857,   841,   970,   830,   830,  1679,  1492,  2692,
     880,  2630,  2388,  3126,  1903,  3122,  2829,  1784,   875,  3153,
     767,   892,    51,   879,   576,   879,   879,   879,    52,    53,
    1891,    57,    58,   833,   833,    62,  1435,  1691,  2566,   976,
      63,  2625,    64,    67,    68,  1451,   872,    70,   839,   839,
      72,  1754,    80,  3171,  1335,    84,  1757,  1058,    85,    86,
     543,   543,  2180,  2181,  1964,    97,  3174,   100,   101,   102,
    2691,  1096,   841,   841,   847,  2728,  1117,  2775,  2776,  2777,
    1052,  2916,  3016,  3429,   984,  2789,  3021, -1520,  3408,  3497,
    2421,  1452,  1138,  2966,  2666,  2010,  -704,  -708,  2309, -1439,
    2012,  2418,  2249,  2518,  3593,  2306, -2088,  3743,  3433, -2088,
    2798, -1459, -1051,  1063, -2228, -2228, -2214, -2214, -2079, -1455,
   -1455,  2653,  2797, -2096,   843, -1460, -2219, -2219, -1462, -1051,
   -1043, -2237, -2237, -1456, -1456,  3577, -1458, -1458, -1048, -2239,
   -2239,   843, -1048,  2414, -1459,  1138, -2079,  2666, -2096, -1460,
   -1462, -1010, -1023,  2793,  1228,  1842, -1038,   843,  1460,  1761,
     843,  2195,  2662,  2195,  2195,  1319,  2806,  1323,  2195,  1327,
    1758,  1439,   843,  1542,   884,  1439,  1138,  3339,  1503,  -232,
    1138,  2583,  1138,  3356,  -232,   555,  -658,  2880, -1297,  3564,
    1271,  2881,  2232, -1318,  2547,  1335, -1297,  2319,  -704,  -708,
    2233, -1318,  1901,  2974,  2975,  1423,  1853,  2556,  1710,  1032,
     843,  1902,  2268,  1712,  1423,  2264,  1091,  1889,  1274,  2841,
    2843,  1853,  2846,  2265,  3492,  3292,  1414,  1707,   960,  3267,
    3293,  3269,  2763,  2813,   962,  3719,  3367,  1871,  1862,  2010,
    1874,  1875,  -841,  2011,  2012,  1720,  1056,    14,    15,  3278,
    2050,   957,  1845,  1656,  1657,  1423,  1452,  1260,  1926,  3689,
    3747,  2528,  3300,   110,  1097,  1232,  1415,  1687,  3910,  3861,
    1669,   843,  3175,  3493,  2666,  3391,   810,  3717,  3430,  1722,
    2958,  2050,  1862,  1643,  3830,  2863,  1759,  2962,  2963,  2964,
    2094,  3654,  3788,  3655,  3431,    23,  3302,  3488,  2182,  3490,
     961,  3059,  3660,  3661,   556,  3941,   861,  1137,  2394,   962,
    2010,  3454,  1103,  1117,  2011,  2012,  3763,  3764,  2013,  2014,
    2015, -2213, -2213,  3918,  1799,  1096,  1947,  2852,  2281,  1235,
    3030,  3416,   107,  2953,  1452,  1261,  1905,  1452,  1452,  2260,
    3697,   115,  2242,  3869,  1834,  1835,   958,  2997,  2636,  2731,
    1104,  1959,  -980,  1710,  1661,  1267,  2952,  3039,  2954,  1556,
    3604,     3,     4,  2757,  3390,  2261,  1543,  3146,  1453,  3029,
    1671,  3423,  3583,  1838,  1881,  2491,  2758,  1106,  3952,  3060,
     962,  3590,  3435,   108,  3040,  1763,  2784,  3427,   843,  3918,
    1635,  2125,  1597,  3424,  -704,  -708,  3417,  2410,  1882,  3373,
    2131,  2204,  3012,  3368,  3698,  2998,  2519,  3378,  1098,  1390,
     862,  3832,  1557,  2282,  1885,  1760,  2654,  2655,  1847,   811,
    2911,  3923,  1229,  3817,  1722,  3883,  3820,  1710,  3371,   116,
    2205,  1711,  1712,  3183,  1269,  1800,  3749,  2340,   111,  1262,
    3428,  3714,  -861,  3176,    27,    28,    29,  3662,  3718,   112,
    1416,  1863,  1710,  3862,  3720,  3884,  1711,  1712,  1679,  3953,
    1927,  2728,  1643,  2728,  1720,  3061,  2529,  1904,  -704,  -708,
    1860,   879,  1977,  1979,  3942,  3452,  1673,   879,  2395,  1070,
     879,  2320,  3633,  3911,  3656,  2853,   113,  2732,   576,  1720,
    -980,  1006,  3432,  2402,  3690,  1863,  2243,  3716,  1722,  2656,
    1230,  1236,  2657,  1237,  2016,  1650,  3553,   874,  1836,  3284,
    1110,  1424,    34,  1132,  2880,  2156,  2269,  3181,  2881,  1860,
    1424,  2560,  2932,  1722,    36,  3565,  3179,  2017,  2127,  1544,
     885,  3402,  1033,  2331,  3864,  3357,  1837,   963,   114,  3575,
    2658,  1848,  2091,  2196,  3167,  2627,  3511,    38,  2393,  2206,
    3678,    39,  3954,  1643,  2399,  1785,   989,  2663,  2850,  2208,
     990,  1424,  1773,  1860,  1786,  3279,  1890,  3916, -1297,  1635,
    1699,  1417,  2234, -1318,  3912,  3198,  2705,  3846,  3189,  1887,
    1967,  2764,  1029,  2659,  2306,    41,  2486,  2700,  2266,  1042,
     553,  -704,  -708,  3276,  1966,   959,    44,  3594,  2492,  2018,
    1970,  2057,  2965,  3913,  1674,  1652,  2010,  2648,  2459,  2809,
    2011,  2012,  2042,  2027,    45,  2895,  2828,  2077,  2465,  3798,
    2248,  1674,  1056, -1520,  2694,   989,  1675, -1439,  2520,   990,
    -704,  -708,  -704,  -708, -2088,  2525,  1658, -2088,    46, -1459,
    1676,  1666,  3147,  1675,  1666,  3818, -2079,  2800,  3126,  3585,
    3122, -2096,   874, -1460,   951,  3499, -1462,  1678, -1043,  1085,
    1635,   557,  1335,  2176,  1335,  2411, -1048,  3347,  3819,  1705,
    1881,  2557, -1459,  2874, -2079,  2557, -2096, -1460, -1462,  1659,
    1664,  1040,   576,   576, -1038,  1755,  1425,  3870,  2250,  1656,
    1657,  1443,  1444,  2132,  1882,  1443,  1444,  3380,  3381,  -232,
    -232,  1088,  3928,  2578,    94,  2162,   951,  2163,  2789,  3846,
    3556,  3500,  3292,  3955,  1669,  3557,  2499,   809,  2209,  1058,
    3412,  3474,  1064,   550,   844,  3559,  1743,  1428,   807,  2210,
     537,  1787,   879,  2178,  3975,  2393,  1060,  2312,  2124,  1687,
    3980,   830,  1974,  3322,  3569,  1093,  1093,  2653,  1687,  2530,
    1093,  1116,   951,  3193,  2024,  2025,  2026,  2027,  1437,  3799,
    2336,  1438,  2159,  3033,   856,   856,   856,  2526,  2048,  1087,
    3618,   969,  3837,   839,  1643,  2138,  2139,  2667,   856,   856,
    3619,   856,  2668,  3302,   839,   543,  3353,   970,  2669,  3715,
    2670,  2177,  2336,  1661,  3365,   879,   543,   841,   842,  1267,
    3338,   576,  2785,  2786,  2526,  2366,  2531,  1238,   841,  3329,
    2364,  1291,  1674,  1671,  2449,  2369,   881,  1292,  2372,  2019,
    2020,  2021,  2337,  2022,  2023,  2024,  2025,  2026,  2027,  1283,
    3248,  1876,  3232,  3397,  1675,  3234,  3009,  3236,  3292,  3340,
    1291,  2305,  2305,  3293,  3733,  1239,  1292,  3926,  3330,  3800,
    2116,  3734,   887,  1234,  2725,  3034,   845,   845,  2313,  1067,
    2389,  2390,  2391,  1247,  2500,  3354,  3929,  1710,  1643,   879,
     953,  2736,   879,  3366,  2501,  3300,   872,   872,  1269,   872,
    2637,  1635,  2599,    94,  3140,    61,  3141,    66,    87,    77,
    3406,  2198,  2535,  1976,  2156,   954,   106,  1699,  1138,  2739,
      60,  2458,  1452,  2425,  1720,  2460,  3010,   103,  2462,  3302,
    3966,    69,  1452,  2469,  1796,  1452,    78,   879,  1384,  2541,
    2542,  2543,  3035,    98,  1293,  3036,   879,  2773,  1270,  3072,
    1234,   971,  3838,   879,   879,   879,   879,  1407,  1722,  2774,
    1738,  1739,  1740,  1741,  1742,  1743,  2967,   955,   988,   879,
    3828,  1419,  3620,  1293,  2532,  3153,  2968,  2033,  1862,  1291,
    1435,  3482,  3839,   987,  2471,  1292,  2923,  1740,  1741,  1742,
    1743,  1539,   949,  3483,  1291,  1635,    51,  1017,  1549, -2088,
    1292,  1877,    52,    53,  2737,    57,    58,  1093,  1116,    62,
     879,  1878,    94,  1511,    63,  3562,    64,    67,    68,  1093,
    1093,    70,  3623,  1887,    72,   576,    80,  1643,  1862,    84,
    1452,   830,    85,    86,  2649,  1391,   807,  2650,   830,    97,
    2340,   100,   101,   102,  2328,  1978,  2480,  3292,   576,    23,
    1138,  2481,  3293,  2711,  1019,  1566,  2778,  1862,   843,   833,
    3528,  3424,  2654,  2655,   993,  1648,   833,  3126,  2367,  3122,
    1012,  2365,  1018,  2370,   839,  3258,  1123,   951,  1853,  2700,
    1771,   839,  1291,  1772,  3300,  3549,   543,  1124,  1292,  1854,
    1267,  2375,  1293,   543,  1020,  1268,  2382,  1545,   841,  1008,
    3512,  1009,  2765,  1552,  1536,   841,  1294,  1293,  -785,  1853,
    1892,  3446,  2482,  -785,   576,  1920,  1971,  3516,  3302,  1972,
    1856,  1691,  1560,  2617,  1862,  1137,  1564,  2090,  2010,  2216,
    2091,  2802,  2011,  2012,  1635,  1294, -2241, -2241, -2241,  2022,
    2023,  2024,  2025,  2026,  2027,  1005,  3576,  3949,  2657,  2573,
    1291,  3605,  2618,  1965,  2524,  1921,  1292,  1862,  2114,  2814,
    1895,  2115,  1477,  1478,  1768,  2822,  1294,  1770,  1295,  1269,
    1013,  1780,  1296,  1697,  1019,  2890,  1643,  1790,  1791,   559,
    1797,   576,   576,  1022,  -213,  1056,  2658,  -785,  1643,  2762,
     879,  1863,  3419,   970,   970,  1293,   970,  1321,    27,    28,
      29,  1296,  3710,  2967,  1297,  3529,  3292,  3606,  1024,  1965,
    3530,  1291,  1511,  3275,  1020,  1025,  3607,  1292,  1643,  1270,
    1839,  2703,  3693,   879,  1849,  1643,  1138,  2645,  -717,  2659,
    1479,  1480,  2738,  1322,  2739,  2581,   879,  -785,  1802,  3669,
    3608,  1863,  -717,  3300,  1923,   560,   989,  -717,  1234,  3531,
     990,  1021,  1030,   879,  1294,  2217,  2766,   879,  1010,  1860,
    1011,  1643,  1897,  1293,  2740,  1643,    34,  2051,  3670,  1294,
    1863,  1643,  2052,  1031,  2218,  3897,  2619,  3302,  1298,  2219,
    3898,  2620,  1034,  1635,  1803,  1481,  1482,  2407,  2875,  2770,
    2408,  2882,  1674,  1643,  -717,  1635,  2439,   989,  2440,  2647,
    -717,  1698,  2747,  1022,  2749,    39,  1036,  1298,  -717,  1860,
    2615,  1888,  3194,  -717,  1675,  1035,  1325,  3609,  2220,  1913,
    1296,  -717,   879,  1017,  1293,  1635,  1037,  3679,  1676,   879,
    3610,  2327,  1635,  2156,  2536,  1296,  2537,  1863,  1860,    41,
    2704,  2704,  3681,  1955,   989,  1931, -1439,  1933,   990,  1934,
      44,  1542,  1326,  1040,  1048,  1804,  1935,  1294,  1040,  1038,
     576,   576,  2796,   576,  1040,  3124,  -717,  1297,  1635,  1068,
    1863,  -717,  1635,  3319,  3320,  3321,  3322,  1069,  1635,  2236,
    -717,  1389,  1070,  2237,  1802,  1550,    94,  -717,  1071,  1555,
    3768,  1566,  3671,  2979,  3769,  2980,  1072,  3672,  1018,  3070,
    1635,  1958,  1667,  1668,  2714,  1860,   874,  1805,  2981,  2982,
     807,  3532,  1076,  2864,  2865,  2866,  2867,  2018,  1060,  2373,
    3063, -2210, -2210,  1296,  2479,  1294,  1298,  1079,  2483,  3139,
    1803,  2485,  2204,   565,  3027,  1051,  2069,  -717,  1860,  2071,
    2621,  1298,  1511,  1511,  2075,  1981,  -717,  2078,  1511,  1080,
     537,  2622,  2082,  2912,  2913,  2374, -2211, -2211,  3062,  1674,
    3071,  2205,   569,  1093,  2474,   576,  2053,  2475,  2512,  3149,
     118,  2513,  1806,   879,   554,  2538,   830,  2539,  1691,   830,
    2221,  1675,   771,  1081,   830,  2558,  1294,   830,  2559,  1082,
    1103,  1296,   830,   839,   576,  1678,   576,   860,  1090,  2561,
    1920,   873,  2559,  1083,   833,   543,  2041,   833,  2043,  2044,
    1223,  1224,   833,  1226,  2899,   833,  2898,   841,  2753,   839,
     833,  2754,   839,  1297,  2901,  2903,  2904,   839,  1104,  1298,
     839,   543,  2900,  2902,   543,   839,  2999,  -717,  3611,   543,
    1921,  3612,   543,   841,  1551,  1084,   841,   543,  2380, -2212,
   -2212,   841,  1296,  1805,   841,  1106,  3673, -2215, -2215,   841,
    3317,  3318,  3319,  3320,  3321,  3322,  2759,  3674,  2825,  2760,
     994,  2091,  3939, -2216, -2216,  1137,  1687,  1922,  2010,  2750,
    2206,  2752,  2011,  2012,  2381,  2207,  2013,  2014,  2015,  3272,
    2208,  1085,  3273,    23,  3778,    94,   995,  1298,  3886,  2887,
    2121,  2888,  2559,  -717,  2115,  2155,  3924,   989,  3925,  1119,
    1643,   990,  2117,  3650,  2891,  3651,  2165,  2892,  1806,  2123,
    2894,  2896,  3026,  2118,  3028,  3043,  1122,  1100,  2119,  1923,
    3907, -2217, -2217,  1101,   577,  2122,  1125, -2241, -2241, -2241,
     577,  2022,  2023,  2024,  2025,  2026,  2027,   559,  2893,  1130,
    2833,  2892,   577,  3004,  1131,  1040,  3005,  1264,  1298,  1266,
    1065,  1132,   845,  1133,   996,  1227,   577,   577,  3046,  1469,
    1470,  3965,  1056,   989, -1506,  2176,  1252,   990,  3166,  2957,
    1242,  2408,  3384,  2959,  2960,  2961,  3182,  3187,  1110,  2475,
    3188,  3195,  1102,  1121,  3196,   997,  3850,  3249,  3447,  1248,
    2115,  2115,  2252,  1231,   879,  1249,   879,  1544,  3956,  2192,
   -2218, -2218,  2288,   560,  2700, -2220, -2220,  1635,  1225,  3964,
    3448,   879,  2276,  2559,  3477, -2221, -2221,  2115,   970,  3000,
     559,  3070,   577,  3484,  1511,  3348,  2091, -2222, -2222,   998,
    1477,  1478,    27,    28,    29,  1643,  1251,  3550,  3584,  2209,
    3551,  2408,  1239,  3588,    11,  3630,  2475,  3145,  2115,   879,
    2210,   576,  2140,  1252,  3177,  1253,  1103,  1254,  2424,  2141,
    2142,  1257,  2321,  2143,  2144,  2145,  1849,   576,  3740, -2223,
   -2223,  2475,    14,    15,  1258,  2245,  1265,   576,  2342,   576,
    2346,  3186,   576,  1284,  3161,  2017,   560,  1285,   576,  3020,
     576,  1643,  2094,  1288,  1104,  1287,  1452,  3401,  3745,  1289,
      34,  3746,  1040,   576,  1127,  1128,  1129,  1040,   576,  1304,
    1105,  1290,   576,   576,   576,   576,  1302,   576,   576,  3260,
      23,  1106,  3567,  3792,  1303,  3812,  3793,  3050,  3813,  1305,
    3517,  1320,  3851,  3473,  2404,  2115,  1324,   960,  2352,    39,
    2356,   879,  1635,  1328,   879,   879,   879,   879,  1407, -2224,
   -2224,  -786,   879,  1481,  1482,  1107,  -786,  2018,  3860,  3518,
     999,  3746,  3902,  1329,  3922,  2115,  2432,  3746,  1382,  3947,
    1385,  1000,  3948,    41,  1137,  1306,  3962,  2010,  3051,  3813,
    1386,  2011,  2012,  2456,    44,  2013,  2014,  2015,  1393,  2443,
    3502,   565,  3976,  1051,  1395,  1428,  3052,  3629,  1635, -2225,
   -2225,    23,    45,  1447,  1108, -2226, -2226,  1396,  1001,   961,
    1409,  1109,  1487, -2227, -2227, -2229, -2229,   568, -2230, -2230,
     569, -2231, -2231, -2232, -2232,  1643,    46,  1411,  3233,  1412,
    -786,   559,  1002,  1420,  1511,  1511,  1511,  1511,  1511,  1511,
    3001,  1421,  1511,  1511,  1511,  1511,  1511,  1511,  1511,  1511,
    1511,  1511,  1427,  2548,  1110, -2233, -2233, -2234, -2234,  2551,
    1003, -2236, -2236,  1567, -2238, -2238, -2240, -2240,  1430,    27,
      28,    29,   576,  1111,   565,  1307,  1051,  1454,  3519,  1431,
    -786,  1907,  1908,  3520,   879,  3841,  2307,  2308,  3521,   962,
    3124,  -836,  -836,   830,  -840,  -840,  1436,   560,  1455,   830,
    1458,  3053,  1461,   569,   576,  3376,  -839,  -839,  1517,   576,
    3054,  3885,  1481,  1482,  1532,  3887,  3344,  3345,  2567,  2567,
    1984,   833,  1643,  3385,  3386,  1308,  1530,   833,  1533,  1703,
    2654,  2655,  1635,  3894,  3895,  1309,   839,    34,  1540,  1706,
    3934,  3935,   839,  1547,  2699,  1112,  1546,  1310,   543,    36,
      27,    28,    29,  1137,   543,  1553,  3292,  1766,  1767,  1756,
     841,  3293,  1554,  3231,  1559,  1563,   841,  1985,  1762,  1565,
    1646,  1647,    38,   562,  3581,  1691,    39,  2019,  2020,  2021,
    1311,  2022,  2023,  2024,  2025,  2026,  2027,   576,  1986,   951,
   -1014,  2603,  1649,  3300,  2017,  1388,   576,    40, -1021,  1643,
   -2241,  1658,  1452,  2700,  1662,   874,  -861,  1452,  3950,  1987,
      41,  -862, -1011,  1988, -1012,  1672, -1015,  1673,    34,  1511,
    1511,    44, -1013,  1683,  1696,  1702, -1971,  3302,  1704,  1635,
    1749,  1765,  1751,  1389,  1753,  1989,  2155,  1313,  1990,    45,
    -212,  1774,  1779,  1775,  3629,  1788,   963,  3522,  1789,  1268,
    1270,  1824,  1826,  1828,  1977,  1979,  1991,    39,  3523,  1840,
    1859,   559,  1314,    46,  1858,  1860,  2018,  1865,  1867,   830,
    1866,  1872,  1880,  1879,  1884,  1894,   115,   874,  1910,  1780,
    1900,   576,  1911,  1316,  1912,   565,   577,   566, -1506,  1916,
    1304,    41,  1918,  1925,   830,  3645,  1929,   833,  2276,  1930,
    3629,  1939,    44,  1942,  1943,  1945,  1635,  1946,  1948,  1949,
    1305,  1951,   839,  1952,   569,  1960,  1961,  1965,  1973,  2002,
    2038,  2049,   833,  3362,   543,  1999, -2241,   560, -1971,  3712,
    2001,  2004,  2007,  2030,  2039,  2046,   841,   839,   576,  1637,
    2070,  1511,  1643,  2067,   576, -2241,  1100,  2076,  2079,   543,
   -2241,  1992,  1101,  2081,  2080,  2086,  1306,  1652,   874,  1993,
    1913,   841,  2092,  2089,  2146,  2147,  2148,  1659,  2149,  2150,
    2151,  2152,  2153,  2154,  1664,  2093,  1643,  3629, -1971,  2095,
    2096,  1994,  1050,  2098,  2127,  2097,  2126,  1138,  2160, -2241,
    2161,  1710, -1971,  2166,  2169,  1980,  2171, -1971,  2172,  1567,
    2173,  3866, -1971,  3570,  2194,  2201,  2174,  2212,  2213,  2215,
    2239,  1102,  1995, -1971,   951,  2246,  2240,  2258, -1971,  2259,
    2263,  2271,   961,  2284,  2287,  2296,  2298,  2352,  2352,  2352,
    2297,  1913,  2322,  2299,  2300,  2326,  2301,  2318,   879,  2323,
    2329,   962,  2334,  2405,  2409,  2018,  2422,  2415,  2333,  1635,
   -1971,  1913,   879,   879,   879,  1931,  1307,  1933,  2335,  1934,
    1643,  2429,  2426,   564,  2430,   576,  1935,   879,  2428,  2444,
     879, -1971,  2445,  2447,  1407,  2450,  2451,  2452,   879,  2455,
     577,   577,  1056,  1635,  1040,  1103,  2019,  2020,  2021,  3124,
    2022,  2023,  2024,  2025,  2026,  2027,  2457,  2453,  2476,  3544,
    2461,  2454,  2484,  1643,  1913,  1913,  1308,  1913,  2035,  2010,
    2514,  2034,  2521,  2522,  2523,   565,  1309,  1051,  1637,  1977,
    1979, -1971,  2527,  1104, -1971,  2545,  2533,  2534,  1310,  2550,
   -1971,  1452,  2552,  1981,  2563,   567,   537,  2565,  2570,  1105,
    2571,   568,  2572,  1887,   569,  2574,  2575,  2576,  2577,  2579,
    1106, -2241,  2616,  2580,  2590,  1981,  2861,  2587,  1638,  2595,
    1643,  1311,  2596,  2588,   879,   879,   879,  1635,  2592,  2593,
    2594,  2591,  2597,   576, -1971,  1511,   576,  2611,  2623,   839,
    2632,  3513,   576,  2598,  1107,  2640,  2608,  2633,   951,  2609,
    2638,   543,  2639,  2651,  2665,  2652,  2687,  2682, -1971,   577,
    2688,    14,    15,   841,  2685,  2695,  2072,  2696,  2946,  1637,
    1635,  2693,  -842,  2706,  2707,  2155,  1137,  2710,  1313,  2010,
    2713,   951,  2176,  2011,  2012,  2709,  2717,  2013,  2014,  2015,
    2718,  2719,  2721,  1108,  2724,  2727,  2746,  2748,  2761,  3644,
    1109,  2779,  2780,  1314,  2795,  2925,  2723,  2767,  2768,    23,
    1511,  1511,  3634,  2782,  3636,  2781,  2801,  2794,   881,  2799,
    1643,  2815, -2241,  2769,  1316,  2811,  2812,  1635,  2816,  3317,
    3318,  3319,  3320,  3321,  3322,  2819,  2823,  2830,  2840,  1780,
    2971,  2848,  3646,  1110,  3648,  2851,  2971, -1971,  2854,  2857,
    2871,    94,  2872,  2883,  2858,  2859,  2121, -1971,  2860,  2884,
    2889,  2897,  1111,  3019,  2251,  1511,  2908,  2905,  2117,  2914,
    2996,  2920,  2928,  2930,  2943,  2123,  2276,  2931, -1971,  2118,
   -1971, -1971,  3762,  2934,  2119,  3790,  2949,  2951,  2944,  3836,
    2991,  2122,   879,  3003,  2994,  2955,   576,  1638,  3013,  3011,
     576,   576,   576,  2976,  3017,  3025,  1913,  1849,  1913,  3038,
    1955,  3058,  3074,  3794,  3015,  3151,  3032, -1971,  3031,  3142,
   -1971, -1971, -1971,  3143,  3144,  3152,  3148,  1635,  3156,   576,
    3157,  3076,  3164,  3165,  1112,  3043,  3168,  3169,  3173,  2073,
    3184,  3044,  3191,  2408,   576,   576,   576,   576,   576,   576,
     576,   576,   576,   576,  3045,  3192,  3217,  3223,    27,    28,
      29,  3197,  3219,  1531,  3227,  3237,  3238,  3283,  3240,  3241,
    3261,  3268,  3277,  3271,  3285,  3282,  3286,  2432,  3046,  3325,
    3047,  3757,   879,  3324,  3328,   879,  1562,  3326,  1638,  3341,
    1637,  3335,  3337,  3342,  2352,  1849,  2017,  2385,  3127,  3154,
    2356,  1931,  3355,  1933,  3359,  1934,  3360,  3369,  3351,  3343,
    2401,  2401,  1935,  1955,  3349,  3350,  3361,  3372,  3374, -2209,
    3375,  3379, -2210,  1913,   951, -2211,    34,  3178, -2212, -2213,
    3180,  3393, -2214,  1137,  1511,  3394,  3292,  3392,    36, -2215,
     576,  3293,  3395, -2216,  3296,  3297,  3298,   879,   879,   879,
     879, -2217,  1692, -2218, -2220, -2221,  3396,  3409, -2222,  1511,
    3405,    38,  1511, -2223, -2224,    39,   576,  1040,  2018, -2225,
   -2226,  3398,  3048,  3300, -2227,  3235, -2229, -2230, -2231, -2232,
    3301, -2233,  1447, -2234,  1637,  3413, -2235, -2236,  2478, -2237,
    1452, -2238, -2239,    23,  1539, -2240, -1456, -1458,  1100,    41,
    3399,  3407,  3242,  1643,  1101,  3414,  3420,  3302,  3421,  3434,
      44,  3438,  3436,  3439,  3440,  3443,  3449,  3453,  3450,   577,
     577,  3455,  3461,  3467,  3469,  3292,  3457,  3463,    45,  3464,
    3468,  3476,  3265,  3525,   830,  3472,  3498,  3501,  3510,  3547,
    3548,  3552,  3049,  3555,  3527,  3558,  3560,  3050,  3572,   951,
    3573,  3592,    46, -1455,  3580,  3582,  3591,  3597,  3600,  3601,
    3602,  3615,   833,  1102,  3616,  3617,   874,  1511,  1511,  1511,
    1511,  3638,  3631,  3639,  3632,  3635,  3641,   839,  3647,  3652,
    3657,  3664,  3825,  2967,  3332,  3668,  3683,  3675,  2276,   543,
    3368,  3684,  3701,  3705,  2155,  3707,  3711,  3708,  3051,  3726,
    3728,   841,  3736,  3730,  3737,  1643,  3303,  3738,  1849,  1638,
    1635,  3748,  3743,  3750,  1913,  3752,  3052,  3264,  3755,  1643,
    3756,  3759,  3760,  1637,  3761,  3304,  3767,  1040,   576,  1511,
    3305,  3776,  3787,  3789,  3777,   879,  3796,  1103,  3791,  3770,
     551,  3801,    27,    28,    29,   551,  3807,  1278,   739,  3808,
    3809,   551,  3383,  3306,  3307,  3810,  3811,   551,   551,  3814,
    3816,  3821,   551,   551,   551,  3868,  3822,   551,  3823,  3308,
     551,   551,  3831,  3833,   551,  1104,  3858,   551,   551,   947,
    3835,  3871,   991,  3873,  3877,  3880,  3901,  3882,  2019,  2020,
    2021,  1105,  2022,  2023,  2024,  2025,  2026,  2027,   577,   577,
    3908,   577,  1106,  1638,  3896,  3900,  3869,  3870,  3309,  3919,
      34,  3310,  1635,  3927,  3932,  3940,  3943,  3945,  3951,  3958,
    3959,  3053,  3968,  3967,  3977,  2018,  1635,  3972,  3970,  3382,
    3054,  3400,  2360,  3073,  2744,  1913,  1107,   551,  3077,  2255,
    1896,  1255,   551,   551,   551,   551,   551,  2771,  2403,    39,
    2837,  2432,  2790,  3444,  1640,   951,  3150,  1066,  1279,  3805,
    3915,  3568,  3867,  3874,  3909,  1850,  3614,  3441,  2726,  2751,
    3172,  3865,  1637,  3426,  1511,  3042,  3872,  1641,  3128,  2722,
    3863,  3007,  1924,    41,  1637,  1108,  1963,  2832,  2463,  3741,
    3688,  1975,  1109,  3974,    44,  3006,  1304,  1981,  3786,  3829,
    3458,  3938,  1997,   577,  3875,  3982,   576,  2791,  1642,  3978,
    3957,  3983,    45,   576,  1637,  3969,  1305,  3879,   559,  3946,
    3981,  1637,  1073,  2969,  2680,  3663,  2681,  3765,  3491,  3936,
    2956,  3312,  2083,  3937,  2087,  1110,    46,  2978,  2712,  1776,
    1537,  2325,  1638,  1538,  2698, -1506,  1820,  3486,  1512,  2862,
     874,  3834,  2708,  3751,  1111,  2755,  2293,  1637,  3637,  1821,
    2324,  1637,  1306,  3064,   834,  2684,  3226,  1637,  2555,  1825,
    1504,  1089,  3471,  3065,  2856,  2855,  1511,  1511,  1511,  1511,
    1511,  1511,  1511, -1973,   560,  1040,  1511,  1511,  1075,  1637,
    3574,  1511,  2886,  2569,  1511,  1488,  1490,  1511,  1511,  1511,
    1511,  1511,  1511,  1511,  1511,  1511,  1511,  2787,  2472,   879,
    2473,  3754,  3753,  2910,  2606,  1494,  1495,  2701,  2442,  1496,
    1497,  2584,  1498,  1499,   576,  3327,  1112,  2803,  2058,   576,
    2607,  1280,  2922,  1640,  3066,  2254,  2562,   977,    23,   561,
       0,     0,  3313,     0,     0,  3314,  3315,  3316,     0,  3317,
    3318,  3319,  3320,  3321,  3322,   576,  1641,     0,     0,     0,
     562,     0,  1307,     0,     0,     0,     0,     0,     0,  1447,
       0,     0,     0,     0,     0,     0,   576,   576,  2838,     0,
    2839,     0,   563,  3589,  2844, -1973,  2847,  1642,   879,     0,
       0,  1638,     0,     0,     0,     0,     0,   879,     0,     0,
       0,     0,   879,  1638,  1849,     0,     0,     0,   576,     0,
       0,     0,  1308,  3586,  3587,     0,     0,     0,     0,     0,
     564,     0,  1309,   879,  1640,     0,  3626,  -212,     0,     0,
       0,     0,  3425,  1638,  1310, -1973,     0,  3067,     0,     0,
    1638,     0,     0,     0,     0,     0,  1511,  1641,     0, -1973,
     576,  1093,    23,  1093, -1973,     0,     0,  1709,     0, -1973,
    1710,     0,     0,     0,  1711,  1712,     0,  1311,     0,   839,
   -1973,     0,   565,     0,   566, -1973,  1638,     0,  1642,  1981,
    1638,   543,     0,     0,     0,     0,  1638,    27,    28,    29,
       0,     0,   567,   841,  1511,  1511,     0,  1720,   568,   577,
       0,   569,     0,     0, -2241,     0,     0, -1973,  1638,     0,
    1511,     0,  1511,     0,  1511,   577,     0,     0,     0,     0,
       0,     0,     0,     0,  1313,   577,     0,   577, -1973,     0,
     577,  1722,     0,     0,  3332,     0,   577,     0,   577,     0,
       0,   879,     0,     0,     0,     0,     0,     0,     0,  1314,
       0,   577,  3685,     0,  3687,    34,   577,     0,     0,     0,
     577,   577,   577,   577,  3723,   577,   577,  3727,     0,     0,
    1316,     0,  3068,     0,     0,  3069,     0,     0, -1973,     0,
       0, -1973,     0,   879,     0,     0,     0, -1973,     0,     0,
     551,     0,     0,     0,    39,     0,   551,     0,     0,   551,
    3694,    27,    28,    29,     0,  3732,  1637,   551,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  3735,  3458,     0,     0,  3739,     0,     0,    41,     0,
   -2241, -1973,     0,     0,     0,     0,     0,     0,     0,    44,
    1511,     0,     0,     0,   739,  1640,     0,  1511,     0, -2241,
    1511,  1511,     0,     0, -2241, -1973,  1304,    45,  3118,  1511,
       0,  1511,  1511,     0,     0,     0,  1511,     0,  1641,    34,
       0,     0,     0,  3626,     0,     0,  1305,  2008,  2009,     0,
       0,    46,     0,  2029,     0,     0,     0,  1860,     0,  1137,
       0,  2787,  2010, -2241,     0,   874,  2011,  2012,     0,  1642,
    2013,  2014,  2015,     0,     0,     0,     0,     0,    39,     0,
       0,   879,     0,  1849,     0,   881,   839,     0,  2926,     0,
     577,     0,  1306,     0,     0,     0,  1040,  1040,   543,  3626,
    1040,     0,     0,     0,     0,     0,     0,     0,  2053,  1640,
     841,  1637,    41,     0, -1973,     0,     0,     0,     0,  1731,
       0,     0,  2554,    44, -1973,  1511,  1511,  2087,     0,  1511,
       0,     0,  1641,  1511,     0,     0,  1511,  1511,     0,     0,
     576,    45,   839,     0,     0, -1973,     0, -1973, -1973,     0,
       0,  3878,     0,  3723,   543,     0,     0,     0,     0,     0,
       0,     0,     0,  1642,  3066,    46,   841,  1637,     0,  1849,
     551,   551,   551,     0,     0,     0,  3626,     0,  1055,   874,
       0,     0,     0,  3876, -1973,     0,     0, -1973, -1973, -1973,
       0,     0,  1307,     0,     0,  1638,     0,     0,     0,     0,
       0,     0,     0,  3694,     0,   577,  1511,  1511,     0,     0,
    1511,   551,   551,   551,  1692,     0,     0,     0,     0,   839,
       0,   551,  3920,     0,     0, -2241,  3270,     0,     0,     0,
     879,   543,  3906,     0,   551,   551,     0,  1040,     0,   551,
     551,     0,  1308,   841,     0,     0,     0,     0,  1640,     0,
       0,     0,  1309,   551,   551,   551,     0,     0,     0,  3723,
       0,  2276,     0,     0,  1310,     0,     0,   551,   551,     0,
     551,  1641,     0,     0,     0,     0,     0,     0,     0,  2017,
       0,     0,     0,     0,   551,     0,     0,     0,  3963,     0,
     551,     0,     0,     0,     0,     0,   879,  1311,     0,   577,
       0,  1637,  1642,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   879,     0,     0,     0,     0,     0,
       0,     0,     0,   576,     0,     0,     0,     0,     0,  1100,
    1638,   879,     0,     0,     0,  1101, -2241,     0,     0,     0,
       0,     0,     0,  1738,  1739,  1740,  1741,  1742,  1743,     0,
       0,  2018,     0,     0,  1313,     0,   577,     0,   551,     0,
       0,   551,  2716,     0,     0,     0,     0,     0,     0,     0,
    1137,     0,     0,  2010,     0,     0,     0,  2011,  2012,  1314,
       0,  2013,  2014,  2015,     0,     0,  1638,     0,     0,     0,
       0,     0,   739,     0,  1102,  1373,     0,  1640,  1637,  3251,
    1316,     0,     0,     0,     0,     0,   551,   551,     0,  1640,
       0,     0,     0,     0,     0,   551,     0,     0,     0,     0,
    1641,     0,   551,   551,   551,   551,   551,     0,     0,     0,
       0,     0,  1641,     0,     0,     0,  3422,     0,   551,  1640,
     551,     0,     0,     0,     0,     0,  1640,     0,     0,     0,
    1373,  1642,     0,     0,     0,     0,     0,     0,     0,  1447,
       0,     0,  1641,  1642,  1055,     0,     0,     0,  1103,  1641,
       0,     0,     0,     0,   947,  1637,   551,   551,     0,   551,
       0,     0,  1640,   577,     0,     0,  1640,     0,   551,   551,
       0,     0,  1640,  1642,   551,    23,     0,     0,     0,     0,
    1642,     0,     0,     0,     0,  1641,  1104,     0,     0,  1641,
       0,     0,     0,     0,  1640,  1641,     0,   551,     0,     0,
    1638,     0,  1105,     0,   551,     0,  1373,  1627,     0,     0,
       0,     0,     0,  1106,   551,     0,  1642,  1641,     0,  3489,
    1642,     0,     0,     0,     0,     0,  1642,     0,     0,  2493,
    2494,  2495,  2496,  2497,  2498,     0,     0,  2502,  2503,  2504,
    2505,  2506,  2507,  2508,  2509,  2510,  2511,  1107,  1642,     0,
       0,  2019,  2020,  2021,     0,  2022,  2023,  2024,  2025,  2026,
    2027,     0,     0,   551,     0,   739,     0,     0,     0,  1281,
    2017,   577,     0,     0,   577,     0,     0,     0,     0,     0,
    2083,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1108,  1638,  1637,     0,
       0,     0,     0,  1109,     0,     0,     0,     0,     0,     0,
       0,  3686,     0,   551,     0,     0,   551,     0,     0,     0,
       0,     0,     0,     0,    27,    28,    29,     0,     0,     0,
     551,   551,  1637,   947,     0,     0,     0,     0,     0,   551,
       0,     0,  2018,  3118,     0,     0,  1110,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1111,     0,     0,     0,   551,
       0,     0,   551,   551,  1638,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   551,  1627,     0,     0,     0,
       0,     0,    34,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   551,     0,     0,     0,   551,     0,     0,     0,
       0,   551,     0,     0,  2612,  2613,  1637,     0,     0,  1373,
       0,     0,     0,     0,     0,     0,     0,     0,  1373,     0,
       0,    39,     0,     0,   577,     0,     0,  1112,   577,   577,
     577,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1373,     0,     0,     0,     0,     0,     0,  1637,
       0,     0,     0,     0,     0,    41,     0,   577,   551,     0,
       0,   551,     0,     0,     0,     0,    44,  1627,   551,     0,
       0,     0,   577,   577,   577,   577,   577,   577,   577,   577,
     577,   577,   551,   739,    45,     0,     0,     0,     0,     0,
       0,     0,   551,   739,     0,     0,     0,   551,     0,   551,
     551,  1640,   551,   551,     0,     0,  1637,  1638,    46,     0,
    1055,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   874,  3713,  1641,     0,     0,   739,     0,     0,
     551,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1638,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  2019,  2020,  2021,  1642,  2022,  2023,  2024,  2025,
    2026,  2027,     0,     0,     0,     0,     0,     0,  2083,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1709,     0,     0,  1710,     0,     0,     0,  1711,  1712,  1713,
    1714,  1715,  1716,  1717,  2554,     0,     0,     0,     0,     0,
       0,     0,   551,     0,   551,   551,  1637,     0,     0,  1718,
       0,  1709,   551,     0,  1710,     0,     0,     0,  1711,  1712,
    1720,     0, -2241, -2241, -2241,  1638,     0,  1721,     0,     0,
       0,     0,     0,   551,     0,   551,  1640,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1720,     0,     0,  1722,     0,     0,     0,  1721,  1641,
       0,     0,     0,     0,     0,     0,     0,     0,  1638,     0,
       0,     0,     0,  1709,     0,     0,  1710,     0,     0,     0,
    1711,  1712,     0,     0,     0,  1722,     0,     0,  1627,     0,
    1642,     0,  1640,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1720,     0,  1641,     0,     0,     0,     0,
   -2241,     0,     0,     0,     0,  1638,     0,     0,     0,     0,
    1137,     0,  3118,  2010,     0,     0,     0,  2011,  2012,     0,
       0,  2013,  2014,  2015,   551,     0,  1642,  1722,     0,     0,
       0,     0,     0,  1723,  1137,   551,   577,  2010,     0,  3252,
       0,  2011,  2012,     0,     0,  2013,  2014,  2015,     0,     0,
     739,     0,  1724,     0,     0,     0,     0,  1725,     0,     0,
       0,     0,  1627,  3772,  1723,     0,     0,     0,     0,     0,
       0,   739,     0,     0,   551,     0,     0,     0,     0,     0,
    1726,  1727,     0,  1724,     0,     0,     0,     0,  1725,     0,
       0,     0,     0,     0,     0,  2614,  1728,     0,     0,     0,
       0,     0,     0,     0,     0,  1638,  1640,  1373,     0,     0,
       0,     0,     0,     0,     0,  2936,  2937,     0,     0,     0,
       0,   551,     0,   551,     0,   551, -2241,  1728,     0,  1641,
       0,     0,     0,     0,     0,  1729,     0,     0,  1730,     0,
     551,   551,     0,     0,     0, -2241,     0,     0,     0,     0,
   -2241,     0,  1731,     0,     0,  1732,     0,     0,     0,     0,
    1642,     0,     0,     0,     0,     0,     0,     0,     0,  1637,
       0,     0,     0,     0,     0,     0,     0,     0,   551,     0,
     551,     0,     0,  1731,     0,     0,     0,     0,     0, -2241,
       0,     0,     0,     0,     0,   551,   551,     0,     0,     0,
       0,  1627,     0,  1640,     0,     0,   551,   551,   551,   551,
     739,   551,   739,     0,  3466,     0,     0,   551,     0,   551,
       0,  2554,     0,     0,     0,     0,  1641,     0,     0,     0,
    2017,   551,   551,     0,     0,     0,   551,   551,     0,     0,
       0,   551,   551,   551,   551,  1731,   551,   551,     0,     0,
       0,     0,     0,     0,  2017,     0,  1373,  1642,  1733,     0,
       0,     0,     0,   551,     0,     0,     0,     0,     0,     0,
     551,  1637,     0,   551,   551,   551,   551,   551,     0,     0,
    1640,   551,     0,     0,     0,  1637,     0,     0,     0,  1733,
       0,     0,     0,     0,     0,   551,     0,     0,     0,     0,
       0,  1373,  2018,  1641,     0,     0,     0,     0,     0,     0,
       0,     0,   551,     0,     0,     0,     0,   739,     0,     0,
       0,     0,     0,     0,  1373,     0,  2018,     0,     0,     0,
       0,     0,   577,  1055,  1642,     0,     0,   577,     0,  3190,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1627, -2241,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1627,   577,     0,     0,     0,     0,     0,  1734,
       0,     0,  1735,  1736,  1737,     0,  1738,  1739,  1740,  1741,
    1742,  1743,     0,     0,   577,   577,     0,     0,  1638,     0,
       0,     0,  1627,     0,     0,     0,  2589,     0,     0,  1627,
    1734,   551,     0, -2241, -2241, -2241,     0,  1738,  1739,  1740,
    1741,  1742,  1743,   551,     0,     0,   577,     0,     0,  1709,
       0,     0,  1710,  1640,     0,     0,  1711,  1712,     0,     0,
    1715,  1716,  1717,   551,     0,  1627,     0,     0,   551,  1627,
       0,     0,     0,  1373,     0,  1627,  1641,   551,   551,     0,
       0,     0,     0,     0,     0,     0,     0,  1640,   577,  1720,
       0,     0, -2241,     0,     0,     0,  1721,  1627,     0,  1738,
    1739,  1740,  1741,  1742,  1743,     0,     0,  1642,     0,     0,
    1641,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1638,     0,     0,  1722,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1638,     0,     0,     0,     0,     0,
       0,  1642,     0,     0,     0,     0,   551,     0,     0,     0,
     551,     0,  2019,  2020,  2021,   551,  2022,  2023,  2024,  2025,
    2026,  2027,  1709,     0,  3364,  1710,     0,     0,     0,  1711,
    1712,  1640,  3288,  3289,  3290,  3291,  2019,  2020,  2021,     0,
    2022,  2023,  2024,  2025,  2026,  2027,     0,     0,     0,     0,
       0,     0,     0,     0,  1641,   551,     0,     0,     0,     0,
       0,     0,  1720,     0,     0,     0,     0,     0,     0, -2241,
       0,     0,     0,     0,  1640,     0,     0,     0,     0,   739,
       0,     0,  1723,     0,     0,  1642,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1722,  1641,     0,     0,
     551,  1724,     0,     0,  1137,     0,  1725,  3292,     0,     0,
       0,   947,  3293,     0,     0,     0,     0,   551,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1642,  1726,
    1727,  1640,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  3300,  1728,     0,     0,     0,     0,
       0, -2241,     0,     0,  1641,     0,     0,   551,     0,     0,
       0,     0,     0,   551,  2624,     0,     0,     0,     0,  3445,
       0,     0,     0,     0,     0,     0,     0,     0,  3302,   551,
       0,     0,     0,     0,  1729,  1642,     0,  1730,     0,   739,
     739,   739,     0,     0,     0, -2241,     0,     0,     0,     0,
       0,  1731,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0, -2241,     0,     0,     0,     0, -2241,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1640,     0,     0,  1373,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  3667,     0,     0,     0,
     551,     0,     0,     0,  1641,     0,     0,   551, -2241,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   577,     0,
     551,   551,   551,   551,  1627,     0,     0, -2241,     0,     0,
       0,     0,     0,     0,   551,  1642,   551,     0,     0,   551,
       0,     0,     0,   551,     0,   739, -2241,   551,     0,     0,
       0, -2241,     0,   551,     0,     0,     0,  1733,     0,     0,
    1055,     0,     0,     0,  1731,     0,     0,   739,     0,     0,
       0,     0,     0,   551,   551,     0,   551,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   -2241,  3503,  3504,  3505,  3506,  3507,  3508,  3509,     0,     0,
       0,  3514,  3515,     0,     0,     0,  3524,     0,     0,  3526,
       0,     0,  3533,  3534,  3535,  3536,  3537,  3538,  3539,  3540,
    3541,  3542,     0,     0,     0,   551,     0,     0,     0,     0,
       0,     0,     0,   551,   551,   551,     0,     0,     0,     0,
       0,     0,   551,     0,     0,   551,  2018,     0,     0,     0,
       0,   551,     0,     0,     0,     0,     0,     0,     0,  1627,
       0,     0,     0,     0,     0,     0,     0,     0,  1734,     0,
   -2241,  1735,  1736,  1737,     0,  1738,  1739,  1740,  1741,  1742,
    1743,     0,     0,     0,   551,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   577,     0,     0,     0,     0,     0,     0,  1137,     0,
       0,  3292,     0,     0,     0,  1627,  3293,  3294,  3295,  3296,
    3297,  3298,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  3299,     0,  3665,
    3666,     0,     0,     0,     0,     0,     0,     0,  3300,     0,
       0,     0, -2241,     0,     0,  3301,     0,     0,     0,     0,
       0,   947,   947,     0,  1640,     0,     0,     0,   947,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   551,
     578, -2241,  3302,     0,     0,   551,   772,  1641,  1738,  1739,
    1740,  1741,  1742,  1743,     0,     0,     0,     0,   849,     0,
       0,   551,     0,     0,     0,   551,     0,     0,     0,   551,
     551,   551,   891,   891,     0,   551,   551,   551,  1642,   551,
       0,     0,     0,     0,     0,  3677,     0,  3680,     0,  3682,
       0,     0,     0,     0,     0,     0,     0,     0,   551,     0,
     551,     0,     0, -1988,     0,     0,   739,     0,     0,  3121,
     739,     0,   739,   551,   551,   551,   551,   551,   551,   551,
     551,   551,   551, -2241,     0,     0,  1640,     0,  1463,  1464,
    3317,  3318,  3319,  3320,  3321,  3322,     0,     0,   980,     0,
    1640,  3303,     0,     0,     0,  3766,   551,     0,     0,  1641,
       0,   551,     0,     0,   551,     0,     0,     0,     0,     0,
    3304,     0,     0,  1641,   551,  3305,  3781,  3782,     0,  1465,
    1466,     0,     0,  1467,  1468,     0,     0,     0,     0,     0,
    1642,     0,   551,     0,     0,     0,     0,     0,  3306,  3307,
       0,     0,   551,     0,  1642,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  3308, -1988,  1627,     0,     0,   551,
       0,     0,     0,     0,     0,     0,   551,   551,   551,   551,
       0,     0,  3771,     0,     0,  3774,  3775,     0,     0,     0,
       0,     0,     0,     0,  3779,   551,   551,     0,     0,     0,
       0,  3785,     0,  3309,   551,     0,  3310,     0,     0,     0,
       0,     0,     0,  1469,  1470, -1988,     0,     0,     0,     0,
    2018,     0,     0,  3311,     0,     0,     0,     0,     0, -1988,
       0,   551,     0,     0, -1988,     0,     0,     0,     0, -1988,
       0,     0,     0,  1627,     0,     0,     0,     0,     0,     0,
   -1988,     0,     0,     0,     0, -1988,  1373,     0,     0,     0,
       0,   551,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1471,  1472,
    1473,  1474,  1475,  1476,  1477,  1478,     0, -1988,  1479,  1480,
    3847,  3848,     0,     0,  3849,     0,     0,     0,  3852,     0,
       0,  3855,  3856,     0,     0,     0,     0,     0, -1988,     0,
       0,     0,     0,   551,     0,     0,     0,   551,     0,     0,
       0,     0,     0,   551,     0,     0,  3312,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   551,     0,     0,
       0,     0,     0,   551,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   551,   551, -1988,     0,
       0, -1988,     0,     0,   551,     0,     0, -1988,     0,     0,
       0,  3903,  3904,     0,     0,  3905,     0,     0,     0,   552,
       0,   551,     0,     0,   552,     0,  1627,   742,     0,     0,
     552,     0,     0,     0,     0,     0,   552,   552,     0,     0,
       0,   552,   552,   552,     0,     0,   552,  1481,  1482,   552,
     552, -1988,     0,   552,     0,     0,   552,   552,     0,     0,
    3121,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0, -1988,     0,  3313,     0,     0,
    3314,  3315,  3316,     0,  3317,  3318,  3319,  3320,  3321,  3322,
       0,     0,     0,     0,  1137,     0,     0,  2010,     0,     0,
     551,  2011,  2012,     0,   551,  2013,  2014,  2015,     0,   739,
       0,     0,     0,     0,     0,     0,   552,     0,     0,     0,
     551,   552,   552,   552,   552,   552,     0,   -48,     0,     0,
       0,     0,     0,     0,     0,   881,   551,     0,     0,     0,
    1055,     0,     0,     0,  1627,     0,     0,  1483,  1484,     1,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       2,     0,     3,     4, -1988,     0,     0,     0,     0,   551,
       0,  1485,  1486,     0, -1988,   551,     5,     0,     0,     0,
       0,     6,   551,     0,     0,     0,     0,  1627,     0,     0,
       7,  2100,     0,     0,     0, -1988,     0, -1988, -1988,     0,
       0,     0,  1027,     0,     8,     0,     0,     0,     0,     0,
       0,     0,     0,     9,     0,    10,   551,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    11,     0,    12,
       0,     0,     0,   947, -1988,     0,     0, -1988, -1988, -1988,
      13,     0,     0,     0,  1627,     0,     0,     0,     0,     0,
       0,     0,     0,   883,   551,    14,    15,     0,    16,     0,
       0,     0,     0,     0,     0,     0,     0,    17,     0,     0,
       0,     0,     0,     0,     0,    18,     0,     0,   551,     0,
       0,     0,     0,    19,     0,    20,    21,     0,     0,  1137,
       0,     0,  3292,   551,     0,     0,     0,  3293,   551,    22,
   -2241, -2241, -2241,    23,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  2017,     0,     0,     0,     0,     0,
       0,   979,     0,   982,   551,   986,     0,     0,     0,  3300,
       0,    24,     0,     0,     0,     0,  3301,     0,     0,     0,
       0,     0,     0,     0,  3121,   551,   551,    25,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   551,     0,     0,
       0,     0,     0,  3302,     0,   947,   551,     0,     0,     0,
       0,   551,     0,   551,    26,     0,     0,   551,     0,     0,
       0,     0,     0,     0,     0,     0,  2018,     0,     0,     0,
       0,   739,   551,     0,     0,     0,     0,  1047,  1709,     0,
       0,  1710,     0,     0,     0,  1711,  1712,  1713,  1714,  1715,
    1716,  1717,     0,     0,     0,     0,     0,     0,     0,   551,
     551,     0,   551,     0,     0,     0,     0,  1718,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1720,     0,
       0,     0,     0,     0,     0,  1721,   947,   947,     0,     0,
       0,     0,    27,    28,    29,     0,     0,     0,     0,     0,
      30,     0,  3303,    31,     0,     0,     0,     0,     0,     0,
       0,     0,  1722,     0,  1137,     0,     0,  3292,     0,     0,
       0,  3304,  3293,     0,     0,     0,  3305,     0,     0,     0,
       0,  1709,     0,     0,  1710,    32,     0,     0,  1711,  1712,
       0,     0,     0,   551,    33,     0,     0,     0,     0,     0,
     551,     0,   739,     0,  3300,   891,     0,     0,     0,     0,
      34, -2241,     0,     0,     0,  3308,     0,    35,     0,     0,
       0,  1720,    36,     0,     0,     0,     0,     0, -2241,     0,
       0,     0,     0,    37,     0,     0,   947,     0,  3302,   947,
       0,     0,   551,     0,     0,    38,     0,     0,     0,    39,
       0,     0,     0,     0,     0,  1722,     0,     0,     0,   552,
       0,  1723,     0,     0,     0,   552,     0,     0,   552,     0,
      40,  2018,     0,     0,     0,     0,   552,     0,     0,     0,
    1724,   551,     0,    41,     0,  1725,    42,     0,     0,    43,
       0,     0,     0,     0,    44,     0,  2019,  2020,  2021,     0,
    2022,  2023,  2024,  2025,  2026,  2027,  3676,     0,  1726,  1727,
       0,     0,    45,   742,     0,     0,     0,  1627,     0,     0,
       0,     0,     0,  2935,  1728,     0,     0,     0,     0,     0,
    1708,     0,     0,     0,     0,  1709,    46, -2241,  1710,     0,
       0,     0,  1711,  1712,  1713,  1714,  1715,  1716,  1717,     0,
      47,     0,  1709,   -48, -2241,  1710, -2241,     0,     0,  1711,
    1712, -2241,     0,  1729,  1718,     0,  1730,     0,     0,  1719,
     551,     0,   551, -2241,     0,  1720,     0,  3312, -2241,     0,
    1731,     0,  1721,  1732,     0,   551,   551,     0,     0,   551,
       0,     0,  1720,     0,     0,     0,     0,   551,     0, -2241,
   -2241,     0,     0,     0,     0,     0,     0,     0,     0,  1722,
     947,   947,     0,     0,     0,     0,     0, -2241,     0,  1627,
       0,     0,     0,     0,     0,     0,  1722,     0,     0,   551,
       0,     0,     0,  3121,     0,   739,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   947,     0,   947,  2018,     0,   551,  1007,
       0,     0,     0,     0,     0,  1015,     0,     0,  1016,   552,
     552,   552,     0,  1731,     0,     0,     0,  1057,     0,     0,
       0,     0,     0,     0,     0,     0,  1733,     0,  3313,     0,
       0, -2241, -2241, -2241,  2938,  3317,  3318,  3319,  3320,  3321,
    3322,     0,     0,     0,     0,     0,     0,     0,  1723,     0,
     552,   552,   552,     0,     0,     0,     0,     0,     0,   551,
     552,     0,     0,     0,   947, -2241,   551,  1724,     0,     0,
       0,     0,  1725,   552,   552,     0,     0,     0,   552,   552,
       0,     0,   947,   947, -2241,     0,     0,     0,     0, -2241,
     551,     0,   552,   552,   552,  1726,  1727,     0,     0,     0,
       0,   947, -2241,     0,     0,   891,   552,   552,     0,   552,
       0,  1728,     0,     0,     0,     0,     0,     0,     0, -2241,
       0,     0,     0,   552,     0,   551,     0,     0, -2241,   552,
     947,     0,     0,     0,     0,     0,     0,  1734,     0,     0,
    1735,  1736,  1737,   551,  1738,  1739,  1740,  1741,  1742,  1743,
    1729,     0,   551,  1730,     0,     0,     0,  2003,     0,     0,
     551,     0,     0,     0,     0,     0,     0,  1731,     0,     0,
    1732,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1731,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   552,     0,     0,
     552,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0, -2241,     0,     0,     0,     0,     0,     0,
    3317,  3318,  3319,  3320,  3321,  3322,     0,     0,     0,     0,
   -2241,   742,     0,     0,  1375,     0,     0,  1738,  1739,  1740,
    1741,  1742,  1743,     0,     0,   552,   552,     0,     0,     0,
       0,     0,     0,     0,   552,     0,     0,     0,     0,     0,
    1078,   552,   552,   552,   552,   552,     0,     0,     0,     0,
       0,     0,     0,  1733,     0,     0,     0,   552,     0,   552,
       0,     0,     0,     0,     0,  1968,     0,  1969,     0,  1375,
   -2241,     0,     0,     0,  1709,     0,     0,  1710,     0,     0,
       0,  1711,  1712,  1057,     0,  1715,  1716,  1717,     0,     0,
       0,     0,     0,     0,     0,   552,   552,     0,   552,     0,
       0,     0,     0,  1718,     0,     0,     0,   552,   552,     0,
       0,     0,     0,   552,  1720,     0,     0,     0,     0,     0,
       0,  1721,     0,  1709,     0,     0,  1710,     0,     0,     0,
    1711,  1712,     0,     0,     0,     0,   552,     0,     0,     0,
       0,     0,     0,   552,     0,  1375,  1629,     0,  1722,     0,
       0,     0,     0,   552,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1720,  1734,     0,     0,  1735,  1736,  1737,
   -2241,  1738,  1739,  1740,  1741,  1742,  1743,  1256,     0,     0,
       0, -2241,     0,     0,     0,     0,     0,     0,  1738,  1739,
    1740,  1741,  1742,  1743,     0,     0,     0,  1722,     0,     0,
       0,     0,   552,     0,   742,     0,     0,     0,     0,  1709,
       0,     0,  1710,     0,     0,     0,  1711,  1712,     0,     0,
    1715,  1716,  1717,     0,     0,  1383,     0,     0,     0,     0,
       0,     0,     0,     0,  1392,     0,     0,     0,  1718,     0,
       0,  1398,  1400,  1403,  1405,     0,     0,  1723,     0,  1720,
       0,  1137,   552,     0,  2010,   552,  1721,  1413,  2011,  2012,
       0,     0,  2013,  2014,  2015,  2939,  1724,     0,     0,   552,
     552,  1725,     0,     0,     0,     0,     0,     0,   552,     0,
    3773,    88,     0,  1722,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1726,  1727, -2241,  1137,  1506,     0,
    3292,    88,     0,     0,   832,  3293,     0,     0,   552,     0,
    1728,   552,   552,  1137,     0, -2241,  3292,     0,     0,    88,
   -2241,  3293,     0,     0,   552,  1629,     0,     0,   950,     0,
       0,     0,     0,     0,     0,     0,     0,  3300,     0,     0,
       0,   552,     0,     0, -2241,   552,     0,     0,     0,  1729,
     552,     0,  1730,  3300,     0,     0,     0,     0,  1375, -2241,
   -2241,     0,     0,     0,     0,     0,  1731,  1375,     0,  1732,
       0,  3302,     0,   832,   832,   968,     0,     0,     0,     0,
       0,     0,  1723,     0,     0,     0,    88,  3302,     0,     0,
       0,  1375,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1724,     0,     0,     0,     0,  1725,   552,     0,     0,
     552,     0,     0,     0,     0,  1731,  1629,   552,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1726,
    1727,   552,   742,     0,     0,     0,     0,     0,     0,  3780,
       0,   552,   742,     0,     0,  1728,   552,     0,   552,   552,
       0,   552,   552,     0,     0,  3783,     0,     0,     0,  1057,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   -2241,  2017,  1733,     0,     0,     0,   742,     0,     0,   552,
       0,  2332,     0,     0,  1729,     0, -2241,  1730,     0, -2241,
       0,  2341,     0,  2344, -2241,     0,  2355,     0,     0,     0,
       0,  1731,  2359,     0,  2361, -2241,     0,     0,     0,     0,
   -2241,  1841,     0,     0,     0,     0,     0,  2368,     0,     0,
       0, -2241,  2371,     0,  1868,     0,  2376,  2377,  2378,  2379,
       0,  2383,  2384, -2241,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  2018,     0,  1893,     0,     0,     0, -2241,
       0,   552,     0,   552,   552,     0,     0,     0,     0,     0,
       0,   552,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   552,  1734,   552,     0,  1735,  1736,  1737,  2018,
    1738,  1739,  1740,  1741,  1742,  1743,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  2018,     0,  1733,     0,     0,
    1919,     0,     0,     0,     0,     0,     0,  1938,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0, -2241,     0,     0,     0,     0,  1629,     0,  1738,
    1739,  1740,  1741,  1742,  1743,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1709,     0,     0,  1710,     0,     0,     0,  1711,
    1712,  1713,  1714,  1715,  1716,  1717,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1718,     0,   552,     0, -2241,  2919,     0,     0,     0,
       0,     0,  1720,     0,   552,     0,     0,     0,     0,  1721,
       0, -2241,     0,     0,     0,     0,     0,     0,  1734,   742,
       0,  1735,  1736,  1737,     0,  1738,  1739,  1740,  1741,  1742,
    1743,  1629,     0,     0,     0,     0,  1722,     0,     0,     0,
     742,     0,     0,   552,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  2065,     0,  2019,  2020,  2021,     0,  2022,  2023,  2024,
    2025,  2026,  2027,     0,     0,     0,  1375,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     552,     0,   552,     0,   552,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0, -2241,     0,     0,   552,
     552,     0,     0,  3317,  3318,  3319,  3320,  3321,  3322,     0,
       0,     0, -2241,     0,     0,     0,     0,     0,     0,  3317,
    3318,  3319,  3320,  3321,  3322,  1723,     0,     0,    88,     0,
       0,     0,     0,     0,     0,     0,     0,   552,     0,   552,
       0,     0,     0,     0,  1724,     0,     0,     0,     0,  1725,
       0,     0,     0,     0,   552,   552,     0,     0,     0,     0,
    1629,     0,     0,     0,     0,   552,   552,   552,   552,   742,
     552,   742,  1726,  1727,     0,     0,   552,     0,   552,     0,
       0,     0,     0,     0,     0,  1968,     0,     0,  1728,     0,
     552,   552,     0,     0,     0,   552,   552,     0,     0,     0,
     552,   552,   552,   552,     0,   552,   552,     0,     0,     0,
       0,  1709,     0,     0,  1710,  1375,     0,     0,  1711,  1712,
       0,     0,   552,     0,     0,     0,     0,  1729,     0,   552,
    1730,     0,   552,   552,   552,   552,   552,     0,     0,     0,
     552,     0,     0,     0,  1731,     0,     0,  1732,     0,     0,
       0,  1720,     0,     0,   552,     0,     0,     0, -2241,     0,
    1375,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   552,     0,     0,     0,     0,   742,     0,     0,     0,
       0,     0,  2253,  1375,  2256,  1722,     0,     0,     0,     0,
       0,     0,  1057,     0,     0,  1137,     0,     0,  2010,  2273,
       0,     0,  2011,  2012,     0,     0,  2013,  2014,  2015,  1629,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1629,     0,     0,  3853,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  2310,     0,     0,
       0,     0,     0,     0,     0,     0,    88,   950,     0,     0,
    1733,  1629,     0,  3255,     0,     0,     0,     0,  1629,     0,
     552,     0,     0,     0,     0,  1137,     0,     0,  3292,  2818,
       0,     0,   552,  3293,     0,     0,     0,     0,  1709,     0,
       0,  1710,     0,     0, -2241,  1711,  1712,     0,  1074,  1715,
    1716,  1717,   552,     0,  1629,     0,     0,   552,  1629,  1086,
       0,     0,  1375, -2241,  1629,  3300,   552,   552, -2241,     0,
       0,     0, -2241,     0,     0,     0,     0,     0,  1720,     0,
       0,     0,     0,     0,     0,  1721,  1629,     0,     0,  2413,
       0,     0,  2416,  2417,  2419,  2420,     0,     0,     0,  3302,
    2423,     0,     0,  1137,     0,   950,  3292, -2241,   968,     0,
       0,  3293,  1722,     0,     0,     0,     0,     0,     0,     0,
       0,  1734,     0,     0,  1735,  1736,  1737,     0,  1738,  1739,
    1740,  1741,  1742,  1743,     0,   552,     0,     0,  2170,   552,
       0,     0,     0,  3300,   552,     0,     0,     0,     0,     0,
   -2241,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1731,     0,     0,     0,  3784,     0,     0,
       0,     0,     0,     0,     0,  2017,     0,  3302,     0,     0,
       0,     0,     0,     0,   552,    88,     0,     0,     0,  1137,
       0,     0,  2010,     0,     0,     0,  2011,  2012, -2241,     0,
    2013,  2014,  2015,     0,     0,     0,     0,     0,   742,     0,
       0,  1723,     0,     0,     0,     0,     0, -2241,  3854,     0,
       0,     0, -2241,     0,     0,     0,     0,     0,     0,   552,
    1724,     0,  2540,     0,     0,  1725,     0,     0,     0,     0,
       0,  1709,     0,     0,  1710,  3857,   552,  2018,  1711,  1712,
    1713,  1714,  1715,  1716,  1717,     0,     0,     0, -2241, -2241,
       0, -2241,     0,     0,     0,     0,     0,     0,     0, -2241,
    1718,     0,     0,     0,  1728,     0, -2241,     0,     0,     0,
       0,  1720,     0,     0,     0,     0,   552,     0,  1721,     0,
       0,     0,   552,     0,    88, -2241,     0,     0,     0,     0,
   -2241,     0,     0,     0,     0,  3022,  3023,     0,   552,     0,
       0,     0,     0,     0,     0,  1722, -2241,  2018,   742,   742,
     742,     0,     0,     0,     0,     0,     0,     0,     0,   832,
    1731,     0,     0,  3075,     0,     0,   832,     0,     0, -2241,
       0,     0,     0,     0,     0,     0,     0,     0,  3129,  3130,
    3131,  3132,  3133,  3134,  3135,  3136,  3137,  3138,     0,     0,
       0,     0,     0,  1375,     0,     0,     0,     0,     0,     0,
       0,  1651,     0,     0,     0,     0,     0,     0,     0,   552,
   -2241,     0,     0,  1663,     0,     0,   552,  1738,  1739,  1740,
    1741,  1742,  1743,     0,     0,  2018,     0,     0,     0,   552,
     552,   552,   552,  1629,     0,     0,     0,     0,     0,  2017,
    1689,     0,     0,   552,  1723,   552,     0,     0,   552,     0,
       0,     0,   552, -2241,   742,     0,   552,     0,     0,     0,
       0,     0,   552,  1724,     0,     0,  1733,     0,  1725,  1057,
       0,     0,     0,     0,     0,     0,   742,     0,     0,     0,
       0,     0,   552,   552,     0,   552,     0,     0,     0,     0,
       0,  1726,  1727,     0,     0,     0,     0,  2019,  2020,  2021,
       0,  2022,  2023,  2024,  2025,  2026,  2027,  1728,     0,     0,
       0,  2018,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   968,   968,     0,   968,     0,     0,
       0, -2241,     0,     0,   552,     0,     0,     0,     0,     0,
       0,     0,   552,   552,   552,     0,  1729,     0,     0,  1730,
       0,   552,     0,     0,   552,     0,     0,     0,     0,     0,
     552,     0,     0,  1731, -2241,     0,  1732,     0,  1629,     0,
       0,  3317,  3318,  3319,  3320,  3321,  3322,  1734,     0,     0,
    1735,  1736,  1737,     0,  1738,  1739,  1740,  1741,  1742,  1743,
       0,     0,     0,   552,  1137,     0,     0,  2010,     0,     0,
       0,  2011,  2012,     0,     0,  2013,  2014,  2015,     0,     0,
       0,     0,     0,     0,     0,     0,  2792,     0,     0,     0,
       0,     0,     0,     0,  1629,     0,  1709,     0,     0,  1710,
    2807,  2808,  2810,  1711,  1712,  1713,  1714,  1715,  1716,  1717,
       0,     0, -2241,     0,     0,  2821,     0,     0,  2824,  3317,
    3318,  3319,  3320,  3321,  3322,  1718,  2831,     0,     0,     0,
       0,     0,  3363,     0,     0,     0,  1720,     0,     0,  1733,
       0,     0,     0,  1721,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   552,     0,
       0,     0,     0,     0,   552,     0,     0,     0,    88,     0,
    1722,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     552,     0,     0,     0,   552,     0,     0,     0,   552,   552,
     552,     0,     0,     0,   552,   552,   552,     0,   552,     0,
       0,  2019,  2020,  2021,     0,  2022,  2023,  2024,  2025,  2026,
    2027,     0,  2868,  2869,  2870,     0,     0,   552,     0,   552,
       0,     0,     0,     0,     0,   742,     0,     0,  3123,   742,
       0,   742,   552,   552,   552,   552,   552,   552,   552,   552,
     552,   552,     0,     0,     0,     0,     0,     0,     0,     0,
    1734,     0,     0,  1735,  1736,  1737,     0,  1738,  1739,  1740,
    1741,  1742,  1743,     0,     0,   552,     0,  2170,  1137,  1723,
     552,  3292,     0,   552,   832,     0,  3293,   832,     0,  3296,
    3297,  3298,   832,   552, -2241,   832,     0,     0,  1724,     0,
     832,     0,     0,  1725,     0,     0,     0,  3299,     0,     0,
       0,   552,     0,     0,     0,     0,     0,     0,  3300,     0,
       0,   552,     0,     0,     0,  3301,  1726,  1727,     0,     0,
       0,     0,     0,     0,     0,  1629,     0,     0,   552,     0,
       0,     0,  1728,     0,     0,   552,   552,   552,   552,     0,
       0,     0,  3302,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   552,   552,  2018,     0,     0,     0,
       0,     0,     0,   552,     0,     0,     0,     0,     0,     0,
       0,  1729,     0,     0,  1730,     0,     0,    88,     0,     0,
    3014,     0,     0,     0,     0,     0,     0,     0,  1731,     0,
     552,  1732,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1629,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1375,     0,     0,     0,     0,
     552,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  3303,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  2202,     0,     0,  3571,
    3304,     0,     0,     0,     0,  3305,     0,     0,     0,     0,
    3158,     0,   552,  3163,     0,     0,   552,     0,     0,     0,
    3578,  3579,   552,     0,     0,  1462,     0,   843,  3306,  3307,
       0,     0,     0,     0,  1733,     0,   552,     0,     0,     0,
       0,     0,   552,     0,  3308,     0,     0,     0,     0,     0,
       0,     0,  3603,     0,     0,   552,   552,     0,     0,     0,
       0,     0,     0,   552,     0,     0,     0,     0,     0,   968,
       0,     0,     0,     0,     0,  3199,  3200,  3201,  3202,     0,
     552,     0,     0,  3309,     0,  1629,  3310,     0,     0,     0,
       0,     0,  1463,  1464,     0,     0,     0,     0,     0,     0,
    2018,     0,     0,  3311,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  2019,  2020,  2021,  3123,
    2022,  2023,  2024,  2025,  2026,  2027,     0,     0,     0,     0,
       0,     0,     0,  1465,  1466,     0,     0,  1467,  1468,     0,
       0,     0,     0,     0,     0,  1734,     0,     0,  1735,  1736,
    1737,     0,  1738,  1739,  1740,  1741,  1742,  1743,     0,   552,
       0,  1137,  2487,   552,  3292,     0,     0,     0,   742,  3293,
       0,     0,  3296,  3297,  3298,     0,     0,     0,     0,   552,
    1199,  1199,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   552,     0,     0,     0,  1057,
       0,  3300,     0,  1629,     0,     0,  3312,  2427,  3301,     0,
       0,     0,     0,     0,     0,     0,    88,  1469,  1470,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   552,     0,
       0,     0,     0,     0,   552,  3302,     0,     0,     0,     0,
       0,   552,     0,     0,     0,     0,  1629,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  3370,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   552,     0,     0,     0,     0,
       0,     0,  1471,  1472,  1473,  1474,  1475,  1476,  1477,  1478,
       0,     0,  1479,  1480,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1629,     0,     0,  1331,     0,     0,     0,
    1376,  1381,     0,   552,     0,     0,     0,  3313,     0,     0,
    3314,  3315,  3316,     0,  3317,  3318,  3319,  3320,  3321,  3322,
       0,     0,     0,     0,  3303,     0,     0,   552,     0,     0,
       0,   832,     0,     0,     0,     0,     0,   832,     0,     0,
       0,     0,   552,  3304,     0,     0,     0,   552,  3305,     0,
       0,     0,     0,     0,     0,  1434,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0, -2241, -2241,   552,     0,  1459,     0,     0,     0,     0,
       0,     0,     0,  1505,     0,     0,  1507,  3308,     0,  1518,
    1521,  1526,  1529,  3123,   552,   552,     0,     0,     0,     0,
       0,  1481,  1482,     0,  3859,     0,   552,     0,     0,     0,
       0,     0,     0,     0,     0,   552,     0,     0,     0,     0,
     552,     0,   552,     0,     0,     0,   552,     0,     0, -2241,
    1569,  1376,     0,     0,     0,     0,     0,     0,     0,     0,
     742,   552,     0,  2018,     0,     0,     0,     0,     0,     0,
       0,  1654,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1689,     0,     0,     0,     0,     0,   552,   552,
    1670,   552,     0,     0,     0,     0,   743,     0,     0,     0,
    2202,  1680,  1681,  1682,     0,  1686,  1690,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  2634,     0,     0,     0,
       0,  1483,  1484,     0,     0,     0,     0,   832,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1752,
       0,     0,     0,     0,     0,  1485,  1486,  3545,     0,     0,
       0,     0,   832,     0,     0,   744,  1569,  1569,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  3312,
       0,   745,   552,     0,     0,     0,     0,     0,     0,   552,
       0,   742,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1795,     0,     0,     0,  1811,  1816,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1199,  1199,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   552,     0,   746,     0,     0,  3158,     0,     0,     0,
       0,     0,     0,   747,     0,  3158,     0,     0,     0,     0,
    3599,     0,     0,     0,     0,   748,     0,     0,     0,     0,
     749,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     552,  3624,     0,     0,  1376,     0,     0,     0,     0,     0,
       0,     0,     0,  1376,     0,     0,     0,     0,     0,     0,
    3313,   750,     0,  3314,  3315,  3316,     0,  3317,  3318,  3319,
    3320,  3321,  3322,     0,     0,     0,  1629,  1376,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   950,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   751,     0,  1709,     0,   752,
    1710,     0,     0,     0,  1711,  1712,  1713,  1714,  1715,  1716,
    1717,     0,     0,     0,     0,     0,     0,     0,     0,   552,
       0,   552,     0,     0,     0,     0,  1718,     0,     0,     0,
       0,     0,     0,     0,   552,   552,     0,  1720,   552,     0,
       0,     0,     0,     0,  1721,     0,   552,     0,     0,  3692,
       0,     0,     0,     0,     0,     0,     0,     0,  2000,     0,
       0,     0,     0,     0,     0,     0,   562,     0,  1629,     0,
       0,  1722,   753,     0,     0,     0,     0,     0,   552,     0,
       0,     0,  3123,     0,   742,     0,     0,     0,   754,   755,
       0,  3731,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   552,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1526,
       0,  1526,  1526,   756,     0,     0,   757,     0,     0,     0,
       0,     0,     0,     0,  1199,  1199,     0,   758,     0,     0,
     759,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1199,  1689,     0,     0,     0,     0,     0,     0,     0,     0,
     760,     0,     0,     0,     0,     0,     0,     0,   552,     0,
    1723,     0,     0,     0,   761,   552,     0,     0,     0,     0,
     762,   763,     0,     0,  1689,     0,     0,     0,     0,  1724,
       0,     0,   764,     0,  1725,     0,     0,     0,   765,   552,
       0,     0,     0,    88,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1726,  1727,  3815,
       0,     0,     0,     0,     0,     0,   766,     0,     0,     0,
       0,     0,     0,  1728,   552,     0,     0,     0,     0,     0,
      88,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   552,     0,     0,  2130,     0,     0,     0,     0,
       0,   552,     0,  2133,     0,     0,  3018,     0,     0,   552,
       0,     0,  1729,     0,     0,  1730,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1731,
       0,     0,  1732,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  2179,     0,     0,     0,     0,     0,  2183,  2184,
    2185,  2186,  2187,  2188,  2189,  2190,     0,     0,     0,     0,
    2199,  2200,     0,     0,     0,  2211,     0,     0,     0,  2214,
       0,     0,  2222,  2223,  2224,  2225,  2226,  2227,  2228,  2229,
    2230,     0,     0,  2231,     0,     0,    88,     0,     0,     0,
    1199,  1709,  1376,     0,  1710,     0,     0,     0,  1711,  1712,
    1713,  1714,  1715,  1716,  1717,     0,     0,     0,  3158,     0,
       0,  2257,     0,     0,    88,     0,     0,    88,     0,     0,
    1718,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1720,     0,     0,     0,  1733,     0,     0,  1721,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1681,
    1682,     0,     0,     0,     0,  1463,  1464,     0,     0,     0,
       0,     0,     0,     0,     0,  1722,     0,  1689,     0,     0,
       0,     0,     0,     0,  3158,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  3973,     0,     0,     0,  1465,  1466,     0,  1515,
    1467,  1468,     0,     0,     0,     0,     0,     0,     0,  3979,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  2387,     0,     0,
       0,  1376,   832,     0,  2397,  2398,  1734,     0,     0,  1735,
    1736,  1737,     0,  1738,  1739,  1740,  1741,  1742,  1743,     0,
       0,     0,     0,  2586,  1723,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1469,  1470,     0,  1724,     0,     0,  1376,     0,  1725,     0,
       0,     0,   950,     0,  1709,     0,     0,  1710,     0,     0,
       0,  1711,  1712,  1713,  1714,  1715,  1716,  1717,     0,  1434,
    2464,  1726,  1727,     0,     0,     0,     0,     0,  1746,     0,
       0,     0,     0,  1718,     0,     0,     0,  1728,     0,     0,
       0,     0,     0,     0,  1720,     0,     0,     0,     0,  2488,
    2489,  1721,  2490,     0,     0,  1471,  1472,  1473,  1474,  1475,
    1476,  1477,  1478,     0,     0,  1479,  1480,     0,     0,     0,
       0,     0,     0,  1746,     0,     0,  1729,     0,  1722,  1730,
       0,  2516,  2517,     0,     0,  2257,     0,     0,     0,     0,
       0,     0,     0,  1731,     0,     0,  1732,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1515,     0,
       0,     0,     0,     0,  2544,     0,     0,     0,     0,  2549,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1569,     0,  1376,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1746,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      88,     0,     0,     0,  2582,     0,     0,  1723,     0,     0,
    1709,     0,     0,  1710,  1481,  1482,     0,  1711,  1712,  1713,
    1714,  1715,  1716,  1717,     0,     0,  1724,     0,     0,  1733,
       0,  1725,     0,     0,     0,  1746,     0,     0,  1689,  1718,
    1746,     0,     0,  2601,     0,     0,     0,     0,  2604,  2605,
    1720,     0,     0,     0,  1726,  1727,     0,  1721,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1728,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1722,     0,     0,     0,     0,     0,
       0,     0,  2626,  1746,     0,  2629,     0,  2631,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1729,
       0,     0,  1730,  2635,  1483,  1484,     0,     0,  1746,     0,
       0,     0,     0,     0,     0,     0,  1731,     0,     0,  1732,
       0,     0,     0,     0,     0,     0,  2202,     0,  1485,  1486,
    1734,     0,     0,  1735,  1736,  1737,     0,  1738,  1739,  1740,
    1741,  1742,  1743,     0,     0,     0,     0,  2610,     0,     0,
       0,  1795,     0,     0,  1746,     0,  1746,     0,  1515,  1515,
       0,  2028,     0,     0,  1515,     0,     0,  1746,  1816,  2229,
    1746,     0,     0,  1723,     0,  1746,     0,     0,  1746,     0,
       0,     0,     0,     0,     0,     0,     0,  1199,     0,     0,
       0,     0,  1724,     0,     0,  1709,  2720,  1725,  1710,     0,
       0,     0,  1711,  1712,  1713,  1714,  1715,  1716,  1717,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1746,     0,
    1726,  1727,  1733,     0,  1718,     0,     0,     0,     0,     0,
      88,    88,     0,     0,     0,  1720,  1728,     0,     0,     0,
       0,     0,  1721,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1682,     0,     0,     0,     0,     0,  1376,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1722,
       0,     0,     0,     0,     0,  1729,     0,     0,  1730,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1731,     0,     0,  1732,     0,     0,     0,     0,
       0,     0,     0,  1746,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  2827,     0,  1746,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1746,
    1746,  1746,     0,  1734,     0,  1746,  1735,  1736,  1737,  1746,
    1738,  1739,  1740,  1741,  1742,  1743,     0,     0,     0,     0,
    2849,  2202,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1723,    88,
       0,    88,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1724,     0,     0,
       0,     0,  1725,     0,     0,     0,     0,     0,  1733,     0,
       0,  1746,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1726,  1727,     0,     0,     0,
       0,     0,    88,     0,     0,     0,     0,     0,     0,     0,
       0,  1728,     0,     0,     0,     0,     0,     0,    88,     0,
       0,     0,    88,     0,  1746,     0,     0,     0,     0,     0,
    2907,     0,  1513,     0,     0,     0,  2909,  2133,     0,     0,
    1746,     0,     0,     0,     0,  1746,     0,  2915,     0,     0,
    1729,     0,     0,  1730,     0,     0,     0,     0,  2924,     0,
       0,  2927,  2028,  2929,     0,     0,     0,  1731,     0,     0,
    1732,  2933,     0,     0,     0,     0,     0,     0,     0,  2940,
    2941,     0,     0,     0,  1514,     0,  2948,     0,     0,  1734,
       0,     0,  1735,  1736,  1737,     0,  1738,  1739,  1740,  1741,
    1742,  1743,     0,     0,     0,     0,  2921,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  2993,     0,  1291,     0,     0,     0,     0,     0,
    1292,     0,  3008,     0,     0,     0,     0,     0,     0,  1304,
       0,     0,  1291,     0,     0,     0,     0,     0,  1292,     0,
       0,     0,  1199,     0,     0,     0,     0,  1304,     0,  1305,
       0,     0,     0,  1733,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1305,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      88,     0,     0,     0,     0,  1306,     0,     0,     0,  2387,
       0,  2387,  1817,     0,     0,     0,     0,     0,     0,  1746,
       0,  1513,     0,  1306,     0,     0,     0,  2028,  2028,     0,
    1515,  1515,  1515,  1515,  1515,  1515,     0,  1293,  1515,  1515,
    1515,  1515,  1515,  1515,  1515,  1515,  1515,  1515,  2028,    88,
       0,     0,     0,     0,     0,  1293,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1514,  1734,     0,     0,  1735,  1736,  1737,
       0,  1738,  1739,  1740,  1741,  1742,  1743,     0,     0,     0,
       0,  3024,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1307,     0,     0,  3215,  3216,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1307,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  3239,     0,     0,     0,     0,     0,  1746,
       0,     0,  1746,     0,     0,  1308,     0,  3243,     0,     0,
       0,     0,  3245,  3246,     0,  1309,     0,  3247,     0,     0,
       0,     0,  3250,  1308,     0,  3253,  3254,  1310,     0,     0,
    2387,  1376,     0,  1309,  3262,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1310,     0,     0,  1746,  1294,
       0,     0,  1746,  1746,  1746,  1746,  1746,  1746,  1746,  1746,
    1311,     0,     0,     0,     0,  1515,  1515,  1294,  1746,  1746,
       0,     0,     0,     0,     0,   743,     0,     0,  1311,     0,
    1746,  1199,     0,  1746,     0,     0,     0,     0,     0,     0,
       0,  1746,  1746,  1746,  1746,  1746,  1746,  1746,  1746,  1746,
    1746,  1513,  1513,     0,     0,     0,     0,  1513,     0,     0,
       0,  1312,     0,     0,     0,  1296,     0,  1313,     0,     0,
       0,     0,     0,     0,     0,  3358,  1746,     0,     0,  2362,
       0,     0,     0,  1296,   744,  1313,     0,     0,     0,     0,
       0,     0,  1314,     0,     0,     0,     0,  1315,     0,     0,
     745,     0,  3377,  1514,  1514,     0,     0,     0,     0,  1514,
    1314,     0,     0,  1316,     0,  2363,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1316,     0,     0,     0,     0,     0,  1515,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   746,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   747,     0,     0,     0,     0,     0,     0,     0,
       0,  1298,     0,     0,   748,     0,     0,     0,     0,   749,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1298,
       0,  1709,     0,  3411,  1710,     0,     0,     0,  1711,  1712,
    1713,  1714,  1715,  1716,  1717,     0,  1746,     0,     0,     0,
     750,     0,     0,     0,     0,     0,  1746,  1746,     0,     0,
    1718,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1720,     0,     0,     0,     0,     0,     0,  1721,     0,
       0,     0,     0,     0,  1690,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   751,     0,     0,     0,   752,     0,
       0,     0,     0,     0,     0,  1722,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  2601,     0,     0,
       0,     0,     0,  1746,     0,     0,     0,     0,  3478,  3479,
       0,     0,  3480,     0,  1682,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1746,  1746,  1746,
       0,     0,  2028,  2028,  2028,  2028,  2028,  2028,     0,     0,
       0,  2028,  2028,  2028,  2028,  2028,  2028,  2028,  2028,  2028,
    2028,   753,     0,     0,     0,  1746,  1746,     0,     0,     0,
       0,     0,     0,  2295,     0,  2244,     0,     0,   755,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1199,  1746,  1723,     0,     0,     0,  1746,     0,
       0,     0,     0,     0,  3554,     0,     0,     0,     0,     0,
       0,     0,   756,  1724,     0,   757,     0,     0,  1725,     0,
       0,     0,     0,     0,     0,  1514,   758,     0,  3566,   759,
       0,  1746,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1726,  1727,     0,     0,     0,     0,     0,     0,   760,
    1746,     0,     0,  1746,  1746,     0,     0,  1728,     0,     0,
       0,  2028,  2028,   761,     0,     0,     0,     0,     0,     0,
     763,     0,     0,     0,     0,  1746,  1515,  1515,  1746,     0,
    1746,   764,     0,     0,  1746,     0,     0,   765,     0,     0,
       0,     0,     0,     0,     0,     0,  1729,     0,     0,  1730,
       0,     0,     0,     0,     0,  3622,     0,     0,     0,     0,
       0,     0,     0,  1731,     0,   766,  1732,     0,     0,     0,
       0,     0,     0,     0,  3215,     0,     0,     0,  3640,     0,
       0,     0,  1199,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  3649,     0,     0,     0,     0,  2387,     0,
    2387,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1746,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1513,  1513,  1513,  1513,  1513,  1513,     0,
       0,  1513,  1513,  1513,  1513,  1513,  1513,  1513,  1513,  1513,
    1513,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1199,     0,     0,     0,     0,  1733,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  3703,     0,     0,  1514,  1514,  1514,  1514,  1514,
    1514,     0,     0,  1514,  1514,  1514,  1514,  1514,  1514,  1514,
    1514,  1514,  1514,     0,     0,     0,     0,  1709,     0,     0,
    1710,     0,     0,     0,  1711,  1712,  1713,  1714,  1715,  1716,
    1717,     0,     0,     0,     0,     0,  1746,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1718,     0,     0,     0,
       0,     0,  3742,     0,     0,     0,     0,  1720,     0,     0,
    1515,     0,  3215,     0,  1721,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1199,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1734,  1722,     0,  1735,  1736,  1737,     0,  1738,  1739,  1740,
    1741,  1742,  1743,     0,     0,     0,     0,  3256,     0,     0,
       0,     0,     0,     0,  1137,     0,  1746,  3292,  1746,     0,
       0,     0,  3293,     0,  1746,  3296,  3297,  3298,  1513,  1513,
       0,     0,     0,  1746,     0,  3806,  1746,     0,  1746,     0,
       0,     0,  1746,  3299,     0,  2028,  2028,     0,     0,  1746,
    1746,     0,     0,     0,  3300,     0,     0,  1746,     0,     0,
       0,  3301,     0,     0,     0,  1709,     0,     0,  1710,     0,
       0,     0,  1711,  1712,  1713,  1714,  1715,  1716,  1717,     0,
    1514,  1514,     0,     0,     0,     0,     0,     0,  3302,     0,
    1723,     0,     0,     0,  1718,     0,     0,  3323,     0,     0,
       0,     0,  1746,     0,     0,  1720,     0,     0,     0,  1724,
       0,     0,  1721,     0,  1725,     0,     0,  1746,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1726,  1727,  1722,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1513,     0,     0,  1728,     0,  1515,     0,     0,     0,     0,
       0,     0,     0,     0,  3891,  3891,  3891,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  3303,     0,     0,
       0,     0,  1729,     0,     0,  1730,     0,     0,     0,     0,
       0,     0,  1514,     0,     0,     0,  3304,     0,     0,  1731,
       0,  3305,  1732,     0,     0,  3891,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  3306,  3307,     0,     0,  1723,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    3308,     0,     0,     0,     0,     0,     0,  1724,     0,     0,
       0,     0,  1725,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  3891,     0,
       0,     0,     0,     0,     0,  1726,  1727,     0,     0,  3309,
       0,     0,  3310,     0,     0,     0,     0,     0,     0,  2028,
    1515,  1728,     0,     0,     0,     0,  2018,     0,     0,     0,
       0,     0,     0,     0,     0,  1733,     0,     0,     0,     0,
       0,     0,     0,     0,  1746,  1746,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1729,     0,     0,  1730,     0,     0,     0,     0,  1746,     0,
       0,     0,  1746,     0,  1746,  1746,  1746,  1731,     0,  1746,
    1732,     0,  1746,  1746,     0,     0,     0,     0,     0,     0,
       0,  1746,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  3323,  3323,  3323,
    3323,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  3312,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1734,     0,     0,  1735,
    1736,  1737,     0,  1738,  1739,  1740,  1741,  1742,  1743,     0,
       0,     0,     0,  3263,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1513,
    1513,     0,     0,  1733,     0,     0,     0,  1746,     0,     0,
       0,     0,     0,  2028,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1746,     0,     0,  1709,
       0,     0,  1710,     0,     0,     0,  1711,  1712,  1713,  1714,
    1715,  1716,  1717,     0,     0,     0,     0,     0,     0,     0,
       0,  1514,  1514,     0,  2989,     0,     0,     0,  1718,     0,
    1746,     0,     0,  3313,     0,     0,  3314,  3315,  3316,  1720,
    3317,  3318,  3319,  3320,  3321,  3322,  1721,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  2028,     0,     0,     0,     0,     0,
       0,     0,     0,  1722,     0,     0,  2990,     0,     0,     0,
       0,     0,     0,     0,  1734,     0,     0,  1735,  1736,  1737,
       0,  1738,  1739,  1740,  1741,  1742,  1743,  1746,  1746,  1746,
       0,  3485,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  3323,  3323,  3323,  3323,  3323,  3323,  3323,     0,
    1515,  1515,     0,  3323,  3323,     0,     0,     0,     0,     0,
       0,     0,     0,  3323,     0,  3323,     0,     0,     0,     0,
       0,     0,  3323,  3323,  3323,  3323,  3323,  3323,  3323,  3323,
    3323,  3323,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1723,  1746,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1746,     0,     0,     0,     0,
       0,  1724,     0,  1513,     0,     0,  1725,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1709,     0,     0,  1710,  3220,  1726,
    1727,  1711,  1712,  1713,  1714,  1715,  1716,  1717,     0,     0,
       0,     0,     0,     0,     0,  1728,     0,     0,     0,     0,
       0,  1746,     0,  1718,     0,  1514,     0,     0,     0,     0,
       0,     0,     0,     0,  1720,     0,     0,     0,     0,  1746,
       0,  1721,  3244,     0,     0,     0,     0,     0,  1746,     0,
    1514,     0,     0,     0,  1729,     0,  1515,  1730,     0,     0,
       0,     0,     0,     0,  2028,  2028,     0,     0,  1722,     0,
       0,  1731,     0,     0,  1732,     0,  3323,  1515,  1515,  3323,
       0,  3323,     0,     0,     0,     0,     0,     0,  1709,     0,
       0,  1710,     0,     0,     0,  1711,  1712,  1713,  1714,  1715,
    1716,  1717,  1746,     0,     0,     0,  2989,  2989,  2989,  2989,
       0,     0,     0,     0,     0,     0,     0,  1718,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1720,     0,
       0,     0,     0,     0,     0,  1721,     0,     0,     0,     0,
       0,  1746,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  2990,  2990,
    2990,  2990,  1722,     0,     0,  2028,     0,  1723,  1513,     0,
    3323,     0,     0,  3323,  3323,     0,     0,  1733,  3323,     0,
    2028,  2028,     0,     0,  3323,     0,  1724,     0,     0,     0,
       0,  1725,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1746,     0,     0,     0,     0,
       0,     0,     0,     0,  1726,  1727,     0,     0,     0,     0,
    1514,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1728,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  3323,  3323,  3323,     0,
       0,  3323,     0,     0,  3323,  3323,     0,     0,     0,     0,
       0,  1723,     0,     0,     0,     0,     0,     0,     0,  1729,
       0,     0,  1730,     0,     0,     0,     0,     0,     0,     0,
    1724,     0,     0,     0,     0,  1725,  1731,     0,  1734,  1732,
    1746,  1735,  1736,  1737,     0,  1738,  1739,  1740,  1741,  1742,
    1743,     0,  3323,  3323,  3323,  3563,     0,     0,  1726,  1727,
       0,     0,     0,  1513,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1728,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1729,     0,  1514,  1730,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1731,     0,     0,  1732,     0,     0,     0,     0,     0,     0,
       0,     0,  1733,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  2989,  2989,  2989,  2989,  2989,
    2989,  2989,     0,     0,     0,  2989,  2989,     0,     0,     0,
    2989,     0,     0,  2989,     0,     0,  2989,  2989,  2989,  2989,
    2989,  2989,  2989,  2989,  2989,  2989,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  2990,  2990,  2990,
    2990,  2990,  2990,  2990,     0,     0,     0,  2990,  2990,     0,
       0,     0,  2990,     0,     0,  2990,  1733,     0,  2990,  2990,
    2990,  2990,  2990,  2990,  2990,  2990,  2990,  2990,  3543,     0,
       0,     0,     0,  1734,     0,     0,  1735,  1736,  1737,     0,
    1738,  1739,  1740,  1741,  1742,  1743,     0,     0,     0,     0,
    3704,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  3643,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1734,     0,     0,
    1735,  1736,  1737,     0,  1738,  1739,  1740,  1741,  1742,  1743,
       0,     0,     0,     0,  3795,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1513,  1513,     0,     0,  1514,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  2989,
       0,  2989,     0,  2989,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1514,  1514,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  2990,     0,  2990,     0,  2990,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1513,
       0,     0,     0,     0,     0,     0,  2989,     0,     0,  2989,
    2989,     0,     0,     0,     0,     0,     0,     0,  2989,     0,
    1513,  1513,     0,     0,     0,  2989,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1514,     0,     0,     0,     0,     0,     0,  2990,     0,
       0,  2990,  2990,     0,     0,     0,     0,     0,     0,     0,
    2990,     0,  1514,  1514,     0,     0,     0,  2990,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  2989,  2989,     0,     0,  2989,     0,
       0,     0,  2989,     0,     0,  2989,  2989,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  2990,  2990,     0,     0,
    2990,     0,     0,     0,  2990,     0,     0,  2990,  2990,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  2989,  2989,     0,     0,  2989,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   119,  1134,   843,  1135,  1136,  1137,  1138,  1139,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   120,   121,   122,   123,   124,   125,   126,   127,   128,
       0,   129,   130,   131,     0,     0,     0,  2990,  2990,   132,
    1140,  2990,     0,   133,   134,   135,     0,   136,   137,   138,
     139,   140,   141,   142,   143,  1141,   145,  1142,  1143,     0,
     148,   149,   150,   151,   152,   153,  1144,   812,   154,   155,
     156,   157,  1145,  1146,   160,     0,   161,   162,   163,   164,
     813,     0,   814,     0,  1147,   168,   169,   170,   171,   172,
     173,   174,   175,   176,     0,   177,   178,   179,   180,   181,
     182,     0,   183,   184,   185,   186,   187,   188,   189,   190,
     191,   192,   193,  1148,   195,   196,  1149,   198,  1150,   199,
       0,   200,   201,   202,   203,   204,   205,    14,    15,   206,
     207,   208,   209,   210,     0,     0,   211,   212,  1151,   214,
     215,   216,   217,     0,   218,   219,   220,     0,   221,   222,
     223,     0,   224,   225,   226,   227,  1152,   229,   230,   231,
     232,   233,   815,  1153,   235,     0,   236,   237,  1154,   239,
       0,   240,     0,   241,   242,    23,   243,   244,   245,   246,
     247,   248,     0,   249,   250,     0,     0,  1155,  1156,   253,
     254,     0,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,     0,   267,   268,   269,   270,   271,
     272,   273,     0,   274,   275,   276,   277,   278,   279,   280,
     281,  1157,  1158,     0,  1159,     0,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,     0,     0,
     297,   298,   299,   300,     0,   301,   302,   303,   304,   305,
     306,   307,   308,  1160,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
     326,   327,   328,   329,  1161,   331,  1162,   333,   334,   335,
     336,   337,  1163,   338,   339,   340,   341,  1164,   818,   343,
    1165,   345,   346,   347,     0,   348,   349,     0,     0,  1166,
     351,   352,     0,     0,   353,   354,   355,   356,   357,   358,
     820,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,    27,    28,    29,     0,   373,   374,
     821,   376,   377,   378,   379,   380,   381,   382,     0,   383,
     384,   385,   386,   387,   388,   389,   390,     0,   391,   392,
     393,  1167,   395,   396,   397,   398,     0,   399,   400,   401,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,     0,   413,   414,   415,   416,   417,   418,  1168,   420,
     421,   422,   423,   424,   425,   426,   427,   428,   429,   430,
     431,   432,    34,     0,   433,   434,   435,   436,   437,   438,
     439,   440,   441,   442,    36,   443,   444,   445,  1169,   447,
       0,   448,   449,   450,   451,   452,   453,   454,   455,   456,
     457,   458,   459,   460,   461,   462,   823,    38,     0,   464,
     465,    39,   466,   467,   468,   469,   470,   471,   472,     0,
     473,  1170,  1171,     0,   476,     0,   477,   478,   824,   480,
     825,  1172,   482,   483,   826,   485,   486,   487,   488,   489,
       0,     0,   490,   491,   492,    41,   493,   494,   495,   496,
       0,   497,   498,   499,   500,   501,   827,  1173,     0,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
       0,     0,   515,     0,    45,   516,   517,   518,   519,   520,
     521,   522,   523,   524,   525,   526,   527,   528,   529,   530,
     531,   532,   533,   534,   535,   536,  1174,     0,    46,     0,
       0,     0,     0,  1175,  1176,  1177,     0,     0,     0,     0,
    1178,     0,  1179,  3456,     0,     0,     0,     0,  1180,  1181,
       0,     0,     0,     0,  1182,  1183,   119,  1134,   843,  1135,
    1136,  1137,  1138,  1139,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   120,   121,   122,   123,   124,
     125,   126,   127,   128,     0,   129,   130,   131,     0,     0,
       0,     0,     0,   132,  1140,     0,     0,   133,   134,   135,
       0,   136,   137,   138,   139,   140,   141,   142,   143,  1141,
     145,  1142,  1143,     0,   148,   149,   150,   151,   152,   153,
    1144,   812,   154,   155,   156,   157,  1145,  1146,   160,     0,
     161,   162,   163,   164,   813,     0,   814,     0,  1147,   168,
     169,   170,   171,   172,   173,   174,   175,   176,     0,   177,
     178,   179,   180,   181,   182,     0,   183,   184,   185,   186,
     187,   188,   189,   190,   191,   192,   193,  1148,   195,   196,
    1149,   198,  1150,   199,     0,   200,   201,   202,   203,   204,
     205,    14,    15,   206,   207,   208,   209,   210,     0,     0,
     211,   212,  1151,   214,   215,   216,   217,     0,   218,   219,
     220,     0,   221,   222,   223,     0,   224,   225,   226,   227,
    1152,   229,   230,   231,   232,   233,   815,  1153,   235,     0,
     236,   237,  1154,   239,     0,   240,     0,   241,   242,    23,
     243,   244,   245,   246,   247,   248,     0,   249,   250,     0,
       0,  1155,  1156,   253,   254,     0,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,     0,   267,
     268,   269,   270,   271,   272,   273,     0,   274,   275,   276,
     277,   278,   279,   280,   281,  1157,  1158,     0,  1159,     0,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,     0,     0,   297,   298,   299,   300,     0,   301,
     302,   303,   304,   305,   306,   307,   308,  1160,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,   323,   324,   325,   326,   327,   328,   329,  1161,   331,
    1162,   333,   334,   335,   336,   337,  1163,   338,   339,   340,
     341,  1164,   818,   343,  1165,   345,   346,   347,     0,   348,
     349,     0,     0,  1166,   351,   352,     0,     0,   353,   354,
     355,   356,   357,   358,   820,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,    27,    28,
      29,     0,   373,   374,   821,   376,   377,   378,   379,   380,
     381,   382,     0,   383,   384,   385,   386,   387,   388,   389,
     390,     0,   391,   392,   393,  1167,   395,   396,   397,   398,
       0,   399,   400,   401,   402,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,     0,   413,   414,   415,   416,
     417,   418,  1168,   420,   421,   422,   423,   424,   425,   426,
     427,   428,   429,   430,   431,   432,    34,     0,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,    36,   443,
     444,   445,  1169,   447,     0,   448,   449,   450,   451,   452,
     453,   454,   455,   456,   457,   458,   459,   460,   461,   462,
     823,    38,     0,   464,   465,    39,   466,   467,   468,   469,
     470,   471,   472,     0,   473,  1170,  1171,     0,   476,     0,
     477,   478,   824,   480,   825,  1172,   482,   483,   826,   485,
     486,   487,   488,   489,     0,     0,   490,   491,   492,    41,
     493,   494,   495,   496,     0,   497,   498,   499,   500,   501,
     827,  1173,     0,   504,   505,   506,   507,   508,   509,   510,
     511,   512,   513,   514,     0,     0,   515,     0,    45,   516,
     517,   518,   519,   520,   521,   522,   523,   524,   525,   526,
     527,   528,   529,   530,   531,   532,   533,   534,   535,   536,
    1174,     0,    46,     0,     0,     0,     0,  1175,  1176,  1177,
       0,     0,     0,     0,  1178,     0,  1179,     0,     0,     0,
       0,     0,  1180,  1181,     0,     0,     0,     0,  1182,  1183,
     119,  1134,   843,  1135,  1136,  1137,  1138,  1139,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   120,
     121,   122,   123,   124,   125,   126,   127,   128,     0,   129,
     130,   131,     0,     0,     0,     0,     0,   132,  1140,     0,
       0,   133,   134,   135,     0,   136,   137,   138,   139,   140,
     141,   142,   143,  1141,   145,  1142,  1143,     0,   148,   149,
     150,   151,   152,   153,  1144,   812,   154,   155,   156,   157,
    1145,  1146,   160,     0,   161,   162,   163,   164,   813,     0,
     814,     0,  1147,   168,   169,   170,   171,   172,   173,   174,
     175,   176,     0,   177,   178,   179,   180,   181,   182,     0,
     183,   184,   185,   186,   187,   188,   189,   190,   191,   192,
     193,  1148,   195,   196,  1149,   198,  1150,   199,     0,   200,
     201,   202,   203,   204,   205,     0,     0,   206,   207,   208,
     209,   210,     0,     0,   211,   212,  1151,   214,   215,   216,
     217,     0,   218,   219,   220,     0,   221,   222,   223,     0,
     224,   225,   226,   227,  1152,   229,   230,   231,   232,   233,
     815,  1153,   235,     0,   236,   237,  1154,   239,     0,   240,
       0,   241,   242,    23,   243,   244,   245,   246,   247,   248,
       0,   249,   250,     0,     0,  1155,  1156,   253,   254,     0,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,     0,   267,   268,   269,   270,   271,   272,   273,
       0,   274,   275,   276,   277,   278,   279,   280,   281,  1157,
    1158,     0,  1159,     0,   285,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,     0,     0,   297,   298,
     299,   300,     0,   301,   302,   303,   304,   305,   306,   307,
     308,  1160,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323,   324,   325,   326,   327,
     328,   329,  1161,   331,  1162,   333,   334,   335,   336,   337,
    1163,   338,   339,   340,   341,  1164,   818,   343,  1165,   345,
     346,   347,     0,   348,   349,     0,     0,  1166,   351,   352,
       0,     0,   353,   354,   355,   356,   357,   358,   820,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,    27,    28,    29,     0,   373,   374,   821,   376,
     377,   378,   379,   380,   381,   382,     0,   383,   384,   385,
     386,   387,   388,   389,   390,     0,   391,   392,   393,  1167,
     395,   396,   397,   398,     0,   399,   400,   401,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,     0,
     413,   414,   415,   416,   417,   418,  1168,   420,   421,   422,
     423,   424,   425,   426,   427,   428,   429,   430,   431,   432,
      34,     0,   433,   434,   435,   436,   437,   438,   439,   440,
     441,   442,     0,   443,   444,   445,  1169,   447,     0,   448,
     449,   450,   451,   452,   453,   454,   455,   456,   457,   458,
     459,   460,   461,   462,   823,     0,     0,   464,   465,    39,
     466,   467,   468,   469,   470,   471,   472,     0,   473,  1170,
    1171,     0,   476,     0,   477,   478,   824,   480,   825,  1172,
     482,   483,   826,   485,   486,   487,   488,   489,     0,     0,
     490,   491,   492,    41,   493,   494,   495,   496,     0,   497,
     498,   499,   500,   501,   827,  1173,     0,   504,   505,   506,
     507,   508,   509,   510,   511,   512,   513,   514,     0,     0,
     515,     0,    45,   516,   517,   518,   519,   520,   521,   522,
     523,   524,   525,   526,   527,   528,   529,   530,   531,   532,
     533,   534,   535,   536,  1174,     0,    46,     0,     0,     0,
       0,  1175,  1176,  1177,     0,     0,     0,     0,  1178,     0,
    1179,     0,     0,     0,     0,     0,  1180,  1181,     0,     0,
       0,     0,  1182,  1183,  1336,  1134,   843,  1135,  1136,  1137,
    1138,  1139,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   120,   121,   122,   123,   124,   125,   126,
     127,   128,  1337,   129,   130,   131,     0,     0,     0,  1338,
       0,   132,  1140,     0,     0,  1339,   134,   135,     0,   136,
     137,   138,  1340,   140,   141,   142,   143,  1141,  1341,  1142,
    1143,     0,   148,   149,   150,   151,   152,   153,  1144,   812,
     154,   155,   156,   157,  1145,  1146,   160,     0,   161,   162,
     163,   164,   813,     0,  1342,     0,  1343,   168,   169,   170,
     171,   172,  1344,   174,   175,   176,     0,   177,   178,   179,
     180,   181,   182,     0,  1345,   184,   185,   186,   187,   188,
     189,   190,   191,   192,   193,  1148,   195,   196,  1149,   198,
    1150,   199,     0,   200,   201,   202,   203,   204,   205,     0,
       0,   206,   207,   208,   209,   210,  1346,     0,   211,   212,
    1151,   214,   215,   216,   217,     0,   218,   219,   220,     0,
     221,   222,   223,     0,   224,   225,   226,   227,  1152,   229,
     230,   231,   232,   233,   815,  1153,   235,     0,   236,   237,
    1154,   239,     0,   240,     0,   241,  1347,     0,  1348,   244,
     245,  1349,  1350,   248,     0,   249,   250,     0,     0,  1155,
    1156,   253,   254,     0,   255,   256,   257,   258,   259,   260,
     261,  1351,   263,   264,   265,   266,     0,   267,   268,   269,
     270,   271,   272,   273,     0,   274,  1352,   276,   277,   278,
     279,   280,   281,  1157,  1158,     0,  1159,     0,   285,  1353,
    1354,   288,  1355,   290,   291,   292,   293,   294,   295,   296,
       0,     0,   297,  1356,   299,  1357,     0,   301,   302,   303,
     304,   305,   306,   307,   308,  1358,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,   329,  1161,  1359,  1162,   333,
     334,   335,   336,   337,  1163,   338,   339,  1360,   341,  1164,
     818,   343,  1165,   345,   346,   347,     0,   348,   349,     0,
       0,  1166,   351,   352,     0,     0,   353,   354,   355,  1361,
     357,  1362,   820,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,     0,     0,     0,     0,
     373,   374,   821,  1363,   377,   378,   379,   380,   381,   382,
       0,   383,   384,   385,   386,   387,   388,   389,   390,     0,
     391,   392,   393,  1167,   395,   396,   397,   398,     0,   399,
     400,   401,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,     0,   413,   414,  1364,   416,   417,   418,
    1168,   420,   421,   422,   423,   424,   425,   426,   427,   428,
     429,   430,   431,   432,     0,  1365,   433,   434,   435,   436,
     437,   438,   439,   440,   441,   442,     0,  1366,   444,   445,
    1169,   447,     0,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,  1367,   462,   823,     0,
       0,   464,   465,     0,   466,  1368,   468,   469,   470,   471,
     472,     0,   473,  1170,  1171,     0,   476,     0,   477,   478,
     824,   480,   825,  1172,   482,   483,  1369,   485,   486,   487,
     488,   489,     0,     0,   490,   491,   492,     0,   493,   494,
     495,   496,     0,   497,   498,   499,   500,   501,   502,  1173,
    1370,   504,  1371,   506,   507,   508,   509,   510,   511,   512,
     513,   514,     0,     0,   515,     0,     0,   516,   517,   518,
     519,   520,   521,   522,   523,   524,   525,   526,   527,   528,
     529,   530,   531,   532,   533,   534,   535,   536,  1174,     0,
       0,     0,     0,     0,     0,  1175,  1176,  1177,     0,     0,
       0,     0,  1178,     0,  1179,  1372,     0,     0,     0,     0,
    1180,  1181,     0,     0,     0,     0,  1182,  1183,   119,  1134,
     843,  1135,  1136,     0,  1138,  1139,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   120,   121,   122,
     123,   124,   125,   126,   127,   128,     0,   129,   130,   131,
       0,     0,     0,     0,     0,   132,  1140,     0,     0,   133,
     134,   135,     0,   136,   137,   138,   139,   140,   141,   142,
     143,  1141,   145,  1142,  1143,     0,   148,   149,   150,   151,
     152,   153,  1144,   812,   154,   155,   156,   157,  1145,  1146,
     160,     0,   161,   162,   163,   164,   813,     0,   814,     0,
     167,   168,   169,   170,   171,   172,   173,   174,   175,   176,
       0,   177,   178,   179,   180,   181,   182,     0,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,  1148,
     195,   196,  1149,   198,     0,   199,     0,   200,   201,   202,
     203,   204,   205,    14,    15,   206,   207,   208,   209,   210,
       0,     0,   211,   212,  1151,   214,   215,   216,   217,     0,
     218,   219,   220,     0,   221,   222,   223,     0,   224,   225,
     226,   227,  1152,   229,   230,   231,   232,   233,   815,  1153,
     235,     0,   236,   237,  1154,   239,     0,   240,     0,   241,
     242,    23,   243,   244,   245,   246,   247,   248,     0,   249,
     250,     0,     0,  1155,  1156,   253,   254,     0,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
       0,   267,   268,   269,   270,   271,   272,   273,     0,   274,
     275,   276,   277,   278,   279,   280,   281,  1157,  1158,     0,
    1159,     0,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,     0,     0,   297,   298,   299,   300,
       0,   301,   302,   303,   304,   305,   306,   307,   308,  1160,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,   323,   324,   325,   326,   327,   328,   329,
    1161,   331,  1162,   333,   334,   335,   336,   337,     0,   338,
     339,   340,   341,  1164,   818,   343,  1165,   345,   346,   347,
       0,   348,   349,     0,     0,   350,   351,   352,     0,     0,
     353,   354,   355,   356,   357,   358,   820,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
      27,    28,    29,     0,   373,   374,   821,   376,   377,   378,
     379,   380,   381,   382,     0,   383,   384,   385,   386,   387,
     388,   389,   390,     0,   391,   392,   393,  1167,   395,   396,
     397,   398,     0,   399,   400,   401,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,     0,   413,   414,
     415,   416,   417,   418,  1168,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,    34,     0,
     433,   434,   435,   436,   437,   438,   439,   440,   441,   442,
      36,   443,   444,   445,  1169,   447,     0,   448,   449,   450,
     451,   452,   453,   454,   455,   456,   457,   458,   459,   460,
     461,   462,   823,    38,     0,   464,   465,    39,   466,   467,
     468,   469,   470,   471,   472,     0,   473,  1170,  1171,     0,
     476,     0,   477,   478,   824,   480,   825,  1172,   482,   483,
     826,   485,   486,   487,   488,   489,     0,     0,   490,   491,
     492,    41,   493,   494,   495,   496,     0,   497,   498,   499,
     500,   501,   827,  1173,     0,   504,   505,   506,   507,   508,
     509,   510,   511,   512,   513,   514,     0,     0,   515,     0,
      45,   516,   517,   518,   519,   520,   521,   522,   523,   524,
     525,   526,   527,   528,   529,   530,   531,   532,   533,   534,
     535,   536,     0,     0,    46,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1178,     0,  1179,     0,
       0,     0,     0,     0,  1180,  1181,     0,     0,     0,     0,
    1182,  1183,   119,  1134,   843,  1135,  1136,  1137,  1138,  1139,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   120,   121,   122,   123,   124,   125,   126,   127,   128,
       0,   129,   130,   131,     0,     0,     0,     0,     0,   132,
    1140,     0,     0,   133,   134,   135,     0,   136,   137,   138,
     139,   140,   141,   142,   143,  1141,   145,  1142,  1143,  1522,
     148,   149,   150,   151,   152,   153,  1144,   812,   154,   155,
     156,   157,  1145,  1146,   160,     0,   161,   162,   163,   164,
     813,     0,   814,     0,  1147,   168,   169,   170,   171,   172,
     173,   174,   175,   176,     0,   177,   178,   179,   180,   181,
     182,     0,   183,   184,   185,   186,   187,   188,   189,   190,
     191,   192,   193,  1148,   195,   196,  1149,   198,  1150,   199,
       0,   200,   201,   202,   203,   204,   205,     0,     0,   206,
     207,   208,   209,   210,     0,     0,   211,   212,  1151,   214,
     215,   216,   217,     0,   218,   219,   220,     0,   221,   222,
     223,     0,   224,   225,   226,   227,  1152,   229,   230,   231,
     232,   233,   815,  1153,   235,     0,   236,   237,  1154,   239,
       0,   240,     0,   241,   242,  1523,   243,   244,   245,   246,
     247,   248,     0,   249,   250,     0,     0,  1155,  1156,   253,
     254,     0,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,     0,   267,   268,   269,   270,   271,
     272,   273,     0,   274,   275,   276,   277,   278,   279,   280,
     281,  1157,  1158,     0,  1159,     0,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,     0,  1524,
     297,   298,   299,   300,     0,   301,   302,   303,   304,   305,
     306,   307,   308,  1160,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
     326,   327,   328,   329,  1161,   331,  1162,   333,   334,   335,
     336,   337,  1163,   338,   339,   340,   341,  1164,   818,   343,
    1165,   345,   346,   347,     0,   348,   349,     0,     0,  1166,
     351,   352,     0,     0,   353,   354,   355,   356,   357,   358,
     820,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,     0,     0,     0,     0,   373,   374,
     821,   376,   377,   378,   379,   380,   381,   382,     0,   383,
     384,   385,   386,   387,   388,   389,   390,     0,   391,   392,
     393,  1167,   395,   396,   397,   398,     0,   399,   400,   401,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,     0,   413,   414,   415,   416,   417,   418,  1168,   420,
     421,   422,   423,   424,   425,   426,   427,   428,   429,   430,
     431,   432,     0,     0,   433,   434,   435,   436,   437,   438,
     439,   440,   441,   442,     0,   443,   444,   445,  1169,   447,
       0,   448,   449,   450,   451,   452,   453,   454,   455,   456,
     457,   458,   459,   460,   461,   462,   823,     0,     0,   464,
     465,     0,   466,   467,   468,   469,   470,   471,   472,     0,
     473,  1170,  1171,     0,   476,  1525,   477,   478,   824,   480,
     825,  1172,   482,   483,   826,   485,   486,   487,   488,   489,
       0,     0,   490,   491,   492,     0,   493,   494,   495,   496,
       0,   497,   498,   499,   500,   501,   502,  1173,     0,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
       0,     0,   515,     0,     0,   516,   517,   518,   519,   520,
     521,   522,   523,   524,   525,   526,   527,   528,   529,   530,
     531,   532,   533,   534,   535,   536,  1174,     0,     0,     0,
       0,     0,     0,  1175,  1176,  1177,     0,     0,     0,     0,
    1178,     0,  1179,     0,     0,     0,     0,     0,  1180,  1181,
       0,     0,     0,     0,  1182,  1183,  1336,  1134,   843,  1135,
    1136,  1137,  1138,  1139,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   120,   121,   122,   123,   124,
     125,   126,   127,   128,     0,   129,   130,   131,     0,     0,
       0,  1338,     0,   132,  1140,     0,     0,  1339,   134,   135,
       0,   136,   137,   138,  1340,   140,   141,   142,   143,  1141,
    1341,  1142,  1143,     0,   148,   149,   150,   151,   152,   153,
    1144,   812,   154,   155,   156,   157,  1145,  1146,   160,     0,
     161,   162,   163,   164,   813,     0,  1342,     0,  1343,   168,
     169,   170,   171,   172,  1344,   174,   175,   176,     0,   177,
     178,   179,   180,   181,   182,     0,  1345,   184,   185,   186,
     187,   188,   189,   190,   191,   192,   193,  1148,   195,   196,
    1149,   198,  1150,   199,     0,   200,   201,   202,   203,   204,
     205,     0,     0,   206,   207,   208,   209,   210,     0,     0,
     211,   212,  1151,   214,   215,   216,   217,     0,   218,   219,
     220,     0,   221,   222,   223,     0,   224,   225,   226,   227,
    1152,   229,   230,   231,   232,   233,   815,  1153,   235,     0,
     236,   237,  1154,   239,     0,   240,     0,   241,  1347,     0,
    1348,   244,   245,  1349,  1350,   248,     0,   249,   250,     0,
       0,  1155,  1156,   253,   254,     0,   255,   256,   257,   258,
     259,   260,   261,  1351,   263,   264,   265,   266,     0,   267,
     268,   269,   270,   271,   272,   273,     0,   274,  1352,   276,
     277,   278,   279,   280,   281,  1157,  1158,     0,  1159,     0,
     285,  1353,  1354,   288,  1355,   290,   291,   292,   293,   294,
     295,   296,     0,     0,   297,  1356,   299,  1357,     0,   301,
     302,   303,   304,   305,   306,   307,   308,  1358,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,   323,   324,   325,   326,   327,   328,   329,  1161,  1359,
    1162,   333,   334,   335,   336,   337,  1163,   338,   339,  1360,
     341,  1164,   818,   343,  1165,   345,   346,   347,     0,   348,
     349,     0,     0,  1166,   351,   352,     0,     0,   353,   354,
     355,  1361,   357,  1362,   820,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,     0,     0,
       0,     0,   373,   374,   821,  1363,   377,   378,   379,   380,
     381,   382,     0,   383,   384,   385,   386,   387,   388,   389,
     390,     0,   391,   392,   393,  1167,   395,   396,   397,   398,
       0,   399,   400,   401,   402,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,     0,   413,   414,  1364,   416,
     417,   418,  1168,   420,   421,   422,   423,   424,   425,   426,
     427,   428,   429,   430,   431,   432,     0,  1365,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,     0,  1366,
     444,   445,  1169,   447,     0,   448,   449,   450,   451,   452,
     453,   454,   455,   456,   457,   458,   459,   460,  1367,   462,
     823,     0,     0,   464,   465,     0,   466,  1368,   468,   469,
     470,   471,   472,     0,   473,  1170,  1171,     0,   476,     0,
     477,   478,   824,   480,   825,  1172,   482,   483,  1369,   485,
     486,   487,   488,   489,     0,     0,   490,   491,   492,     0,
     493,   494,   495,   496,     0,   497,   498,   499,   500,   501,
     502,  1173,  2392,   504,  1371,   506,   507,   508,   509,   510,
     511,   512,   513,   514,     0,     0,   515,     0,     0,   516,
     517,   518,   519,   520,   521,   522,   523,   524,   525,   526,
     527,   528,   529,   530,   531,   532,   533,   534,   535,   536,
    1174,     0,     0,     0,     0,     0,     0,  1175,  1176,  1177,
       0,     0,     0,     0,  1178,     0,  1179,     0,     0,     0,
       0,     0,  1180,  1181,     0,     0,     0,     0,  1182,  1183,
    1336,  1134,   843,  1135,  1136,  1137,  1138,  1139,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   120,
     121,   122,   123,   124,   125,   126,   127,   128,     0,   129,
     130,   131,     0,     0,     0,  1338,     0,   132,  1140,     0,
       0,  1339,   134,   135,     0,   136,   137,   138,  1340,   140,
     141,   142,   143,  1141,  1341,  1142,  1143,     0,   148,   149,
     150,   151,   152,   153,  1144,   812,   154,   155,   156,   157,
    1145,  1146,   160,     0,   161,   162,   163,   164,   813,     0,
    1342,     0,  1343,   168,   169,   170,   171,   172,  1344,   174,
     175,   176,     0,   177,   178,   179,   180,   181,   182,     0,
    1345,   184,   185,   186,   187,   188,   189,   190,   191,   192,
     193,  1148,   195,   196,  1149,   198,  1150,   199,     0,   200,
     201,   202,   203,   204,   205,     0,     0,   206,   207,   208,
     209,   210,     0,     0,   211,   212,  1151,   214,   215,   216,
     217,     0,   218,   219,   220,     0,   221,   222,   223,     0,
     224,   225,   226,   227,  1152,   229,   230,   231,   232,   233,
     815,  1153,   235,     0,   236,   237,  1154,   239,     0,   240,
       0,   241,  1347,     0,  1348,   244,   245,  1349,  1350,   248,
       0,   249,   250,     0,     0,  1155,  1156,   253,   254,     0,
     255,   256,   257,   258,   259,   260,   261,  1351,   263,   264,
     265,   266,     0,   267,   268,   269,   270,   271,   272,   273,
       0,   274,  1352,   276,   277,   278,   279,   280,   281,  1157,
    1158,     0,  1159,     0,   285,  1353,  1354,   288,  1355,   290,
     291,   292,   293,   294,   295,   296,     0,     0,   297,  1356,
     299,  1357,     0,   301,   302,   303,   304,   305,   306,   307,
     308,  1358,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323,   324,   325,   326,   327,
     328,   329,  1161,  1359,  1162,   333,   334,   335,   336,   337,
    1163,   338,   339,  1360,   341,  1164,   818,   343,  1165,   345,
     346,   347,     0,   348,   349,     0,     0,  1166,   351,   352,
       0,     0,   353,   354,   355,  1361,   357,  1362,   820,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,     0,     0,     0,     0,   373,   374,   821,  1363,
     377,   378,   379,   380,   381,   382,     0,   383,   384,   385,
     386,   387,   388,   389,   390,     0,   391,   392,   393,  1167,
     395,   396,   397,   398,     0,   399,   400,   401,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,     0,
     413,   414,  1364,   416,   417,   418,  1168,   420,   421,   422,
     423,   424,   425,   426,   427,   428,   429,   430,   431,   432,
       0,  1365,   433,   434,   435,   436,   437,   438,   439,   440,
     441,   442,     0,  1366,   444,   445,  1169,   447,     0,   448,
     449,   450,   451,   452,   453,   454,   455,   456,   457,   458,
     459,   460,  1367,   462,   823,     0,     0,   464,   465,     0,
     466,  1368,   468,   469,   470,   471,   472,     0,   473,  1170,
    1171,     0,   476,     0,   477,   478,   824,   480,   825,  1172,
     482,   483,  1369,   485,   486,   487,   488,   489,     0,     0,
     490,   491,   492,     0,   493,   494,   495,   496,     0,   497,
     498,   499,   500,   501,   502,  1173,     0,   504,  1371,   506,
     507,   508,   509,   510,   511,   512,   513,   514,     0,     0,
     515,     0,     0,   516,   517,   518,   519,   520,   521,   522,
     523,   524,   525,   526,   527,   528,   529,   530,   531,   532,
     533,   534,   535,   536,  1174,     0,     0,     0,     0,     0,
       0,  1175,  1176,  1177,     0,     0,     0,     0,  1178,     0,
    1179,  2448,     0,     0,     0,     0,  1180,  1181,     0,     0,
       0,     0,  1182,  1183,   119,  1134,   843,  1135,  1136,  1137,
    1138,  1139,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   120,   121,   122,   123,   124,   125,   126,
     127,   128, -1304,   129,   130,   131,     0,     0,     0,     0,
   -1304,   132,  1140,     0,     0,   133,   134,   135,     0,   136,
     137,   138,   139,   140,   141,   142,   143,  1141,   145,  1142,
    1143,     0,   148,   149,   150,   151,   152,   153,  1144,   812,
     154,   155,   156,   157,  1145,  1146,   160,     0,   161,   162,
     163,   164,   813,     0,   814,     0,  1147,   168,   169,   170,
     171,   172,   173,   174,   175,   176,     0,   177,   178,   179,
     180,   181,   182,     0,   183,   184,   185,   186,   187,   188,
     189,   190,   191,   192,   193,  1148,   195,   196,  1149,   198,
    1150,   199,     0,   200,   201,   202,   203,   204,   205,     0,
       0,   206,   207,   208,   209,   210,     0,     0,   211,   212,
    1151,   214,   215,   216,   217,     0,   218,   219,   220,     0,
     221,   222,   223,     0,   224,   225,   226,   227,  1152,   229,
     230,   231,   232,   233,   815,  1153,   235,     0,   236,   237,
    1154,   239,     0,   240,     0,   241,   242,     0,   243,   244,
     245,   246,   247,   248,     0,   249,   250,     0,     0,  1155,
    1156,   253,   254,     0,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,     0,   267,   268,   269,
     270,   271,   272,   273,     0,   274,   275,   276,   277,   278,
     279,   280,   281,  1157,  1158,     0,  1159,     0,   285,   286,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
       0,     0,   297,   298,   299,   300,     0,   301,   302,   303,
     304,   305,   306,   307,   308,  1160,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,   329,  1161,   331,  1162,   333,
     334,   335,   336,   337,  1163,   338,   339,   340,   341,  1164,
     818,   343,  1165,   345,   346,   347,     0,   348,   349,     0,
       0,  1166,   351,   352,     0,     0,   353,   354,   355,   356,
     357,   358,   820,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,     0,     0,     0,     0,
     373,   374,   821,   376,   377,   378,   379,   380,   381,   382,
       0,   383,   384,   385,   386,   387,   388,   389,   390,     0,
     391,   392,   393,  1167,   395,   396,   397,   398,     0,   399,
     400,   401,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,     0,   413,   414,   415,   416,   417,   418,
    1168,   420,   421,   422,   423,   424,   425,   426,   427,   428,
     429,   430,   431,   432,     0,     0,   433,   434,   435,   436,
     437,   438,   439,   440,   441,   442,     0,   443,   444,   445,
    1169,   447, -1304,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   823,     0,
       0,   464,   465,     0,   466,   467,   468,   469,   470,   471,
     472,     0,   473,  1170,  1171,     0,   476,     0,   477,   478,
     824,   480,   825,  1172,   482,   483,   826,   485,   486,   487,
     488,   489,     0,     0,   490,   491,   492,     0,   493,   494,
     495,   496,     0,   497,   498,   499,   500,   501,   502,  1173,
       0,   504,   505,   506,   507,   508,   509,   510,   511,   512,
     513,   514,     0,     0,   515,     0,     0,   516,   517,   518,
     519,   520,   521,   522,   523,   524,   525,   526,   527,   528,
     529,   530,   531,   532,   533,   534,   535,   536,  1174,     0,
       0,     0,     0,     0,     0,  1175,  1176,  1177,     0,     0,
       0,     0,  1178,     0,  1179,     0,     0,     0,     0,     0,
    1180,  1181,     0,     0,     0,     0,  1182,  1183,  1336,  1134,
     843,  1135,  1136,  1137,  1138,  1139,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   120,   121,   122,
     123,   124,   125,   126,   127,   128,     0,   129,   130,   131,
       0,     0,     0,  1338,     0,   132,  1140,     0,     0,  1339,
     134,   135,     0,   136,   137,   138,  1340,   140,   141,   142,
     143,  1141,  1341,  1142,  1143,     0,   148,   149,   150,   151,
     152,   153,  1144,   812,   154,   155,   156,   157,  1145,  1146,
     160,     0,   161,   162,   163,   164,   813,     0,  1342,     0,
    1343,   168,   169,   170,   171,   172,  1344,   174,   175,   176,
       0,   177,   178,   179,   180,   181,   182,     0,  1345,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,  1148,
     195,   196,  1149,   198,  1150,   199,     0,   200,   201,   202,
     203,   204,   205,     0,     0,   206,   207,   208,   209,   210,
       0,     0,   211,   212,  1151,   214,   215,   216,   217,     0,
     218,   219,   220,     0,   221,   222,   223,     0,   224,   225,
     226,   227,  1152,   229,   230,   231,   232,   233,   815,  1153,
     235,     0,   236,   237,  1154,   239,     0,   240,     0,   241,
    1347,     0,  1348,   244,   245,  1349,  1350,   248,     0,   249,
     250,     0,     0,  1155,  1156,   253,   254,     0,   255,   256,
     257,   258,   259,   260,   261,  1351,   263,   264,   265,   266,
       0,   267,   268,   269,   270,   271,   272,   273,     0,   274,
    1352,   276,   277,   278,   279,   280,   281,  1157,  1158,     0,
    1159,     0,   285,  1353,  1354,   288,  1355,   290,   291,   292,
     293,   294,   295,   296,     0,     0,   297,  1356,   299,  1357,
       0,   301,   302,   303,   304,   305,   306,   307,   308,  1358,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,   323,   324,   325,   326,   327,   328,   329,
    1161,  1359,  1162,   333,   334,   335,   336,   337,  1163,   338,
     339,  1360,   341,  1164,   818,   343,  1165,   345,   346,   347,
       0,   348,   349,     0,     0,  1166,   351,   352,     0,     0,
     353,   354,   355,  1361,   357,  1362,   820,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
       0,     0,     0,     0,   373,   374,   821,  1363,   377,   378,
     379,   380,   381,   382,     0,   383,   384,   385,   386,   387,
     388,   389,   390,     0,   391,   392,   393,  1167,   395,   396,
     397,   398,     0,   399,   400,   401,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,     0,   413,   414,
    1364,   416,   417,   418,  1168,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,     0,  1365,
     433,   434,   435,   436,   437,   438,   439,   440,   441,   442,
       0,  1366,   444,   445,  1169,   447,     0,   448,   449,   450,
     451,   452,   453,   454,   455,   456,   457,   458,   459,   460,
    1367,   462,   823,     0,     0,   464,   465,     0,   466,  1368,
     468,   469,   470,   471,   472,     0,   473,  1170,  1171,     0,
     476,     0,   477,   478,   824,   480,   825,  1172,   482,   483,
    1369,   485,   486,   487,   488,   489,     0,     0,   490,   491,
     492,     0,   493,   494,   495,   496,     0,   497,   498,   499,
     500,   501,   502,  1173,     0,   504,  1371,   506,   507,   508,
     509,   510,   511,   512,   513,   514,     0,     0,   515,     0,
       0,   516,   517,   518,   519,   520,   521,   522,   523,   524,
     525,   526,   527,   528,   529,   530,   531,   532,   533,   534,
     535,   536,  1174,     0,     0,     0,     0,     0,     0,  1175,
    1176,  1177,     0,     0,     0,     0,  1178,     0,  1179,  3259,
       0,     0,     0,     0,  1180,  1181,     0,     0,     0,     0,
    1182,  1183,  1336,  1134,   843,  1135,  1136,  1137,  1138,  1139,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   120,   121,   122,   123,   124,   125,   126,   127,   128,
       0,   129,   130,   131,     0,     0,     0,  1338,     0,   132,
    1140,     0,     0,  1339,   134,   135,     0,   136,   137,   138,
    1340,   140,   141,   142,   143,  1141,  1341,  1142,  1143,     0,
     148,   149,   150,   151,   152,   153,  1144,   812,   154,   155,
     156,   157,  1145,  1146,   160,     0,   161,   162,   163,   164,
     813,     0,  1342,     0,  1343,   168,   169,   170,   171,   172,
    1344,   174,   175,   176,     0,   177,   178,   179,   180,   181,
     182,     0,  1345,   184,   185,   186,   187,   188,   189,   190,
     191,   192,   193,  1148,   195,   196,  1149,   198,  1150,   199,
       0,   200,   201,   202,   203,   204,   205,     0,     0,   206,
     207,   208,   209,   210,     0,     0,   211,   212,  1151,   214,
     215,   216,   217,     0,   218,   219,   220,     0,   221,   222,
     223,     0,   224,   225,   226,   227,  1152,   229,   230,   231,
     232,   233,   815,  1153,   235,     0,   236,   237,  1154,   239,
       0,   240,     0,   241,  1347,     0,  1348,   244,   245,  1349,
    1350,   248,     0,   249,   250,     0,     0,  1155,  1156,   253,
     254,     0,   255,   256,   257,   258,   259,   260,   261,  1351,
     263,   264,   265,   266,     0,   267,   268,   269,   270,   271,
     272,   273,     0,   274,  1352,   276,   277,   278,   279,   280,
     281,  1157,  1158,     0,  1159,     0,   285,  1353,  1354,   288,
    1355,   290,   291,   292,   293,   294,   295,   296,     0,     0,
     297,  1356,   299,  1357,     0,   301,   302,   303,   304,   305,
     306,   307,   308,  1358,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
     326,   327,   328,   329,  1161,  1359,  1162,   333,   334,   335,
     336,   337,  1163,   338,   339,  1360,   341,  1164,   818,   343,
    1165,   345,   346,   347,     0,   348,   349,     0,     0,  1166,
     351,   352,     0,     0,   353,   354,   355,  1361,   357,  1362,
     820,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,     0,     0,     0,     0,   373,   374,
     821,  1363,   377,   378,   379,   380,   381,   382,     0,   383,
     384,   385,   386,   387,   388,   389,   390,     0,   391,   392,
     393,  1167,   395,   396,   397,   398,     0,   399,   400,   401,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,     0,   413,   414,  1364,   416,   417,   418,  1168,   420,
     421,   422,   423,   424,   425,   426,   427,   428,   429,   430,
     431,   432,     0,  1365,   433,   434,   435,   436,   437,   438,
     439,   440,   441,   442,     0,  1366,   444,   445,  1169,   447,
       0,   448,   449,   450,   451,   452,   453,   454,   455,   456,
     457,   458,   459,   460,  1367,   462,   823,     0,     0,   464,
     465,     0,   466,  1368,   468,   469,   470,   471,   472,     0,
     473,  1170,  1171,     0,   476,     0,   477,   478,   824,   480,
     825,  1172,   482,   483,  1369,   485,   486,   487,   488,   489,
       0,     0,   490,   491,   492,     0,   493,   494,   495,   496,
       0,   497,   498,   499,   500,   501,   502,  1173,     0,   504,
    1371,   506,   507,   508,   509,   510,   511,   512,   513,   514,
       0,     0,   515,     0,     0,   516,   517,   518,   519,   520,
     521,   522,   523,   524,   525,   526,   527,   528,   529,   530,
     531,   532,   533,   534,   535,   536,  1174,     0,     0,     0,
       0,     0,     0,  1175,  1176,  1177,     0,     0,     0,     0,
    1178,     0,  1179,     0,     0,     0,     0,     0,  1180,  1181,
       0,     0,     0,     0,  1182,  1183,   119,  1134,   843,  1135,
    1136,  1137,  1138,  1139,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   120,   121,   122,   123,   124,
     125,   126,   127,   128,  1792,   129,   130,   131,     0,     0,
       0,     0,     0,   132,  1140,     0,     0,   133,   134,   135,
       0,   136,   137,   138,   139,   140,   141,   142,   143,  1141,
     145,  1142,  1143,     0,   148,   149,   150,   151,   152,   153,
    1144,   812,   154,   155,   156,   157,  1145,  1146,   160,     0,
     161,   162,   163,   164,   813,     0,   814,     0,  1147,   168,
     169,   170,   171,   172,   173,   174,   175,   176,     0,   177,
     178,   179,   180,   181,   182,     0,   183,   184,   185,   186,
     187,   188,   189,   190,   191,   192,   193,  1148,   195,   196,
    1149,   198,  1150,   199,     0,   200,   201,   202,   203,   204,
     205,     0,     0,   206,   207,   208,   209,   210,     0,     0,
     211,   212,  1151,   214,   215,   216,   217,     0,   218,   219,
     220,     0,   221,   222,   223,     0,   224,   225,   226,   227,
    1152,   229,   230,   231,   232,   233,   815,  1153,   235,     0,
     236,   237,  1154,   239,     0,   240,     0,   241,   242,     0,
     243,   244,   245,   246,   247,   248,     0,   249,   250,     0,
       0,  1155,  1156,   253,   254,     0,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,     0,   267,
     268,   269,   270,   271,   272,   273,     0,   274,   275,   276,
     277,   278,   279,   280,   281,  1157,  1158,     0,  1159,     0,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,     0,     0,   297,   298,   299,   300,     0,   301,
     302,   303,   304,   305,   306,   307,   308,  1160,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,   323,   324,   325,   326,   327,   328,   329,  1161,   331,
    1162,   333,   334,   335,   336,   337,  1163,   338,   339,   340,
     341,  1164,   818,   343,  1165,   345,   346,   347,     0,   348,
     349,     0,     0,  1166,   351,   352,     0,     0,   353,   354,
     355,   356,   357,   358,   820,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,     0,     0,
       0,     0,   373,   374,   821,   376,   377,   378,   379,   380,
     381,   382,     0,   383,   384,   385,   386,   387,   388,   389,
     390,     0,   391,   392,   393,  1167,   395,   396,   397,   398,
       0,   399,   400,   401,   402,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,     0,   413,   414,   415,   416,
     417,   418,  1168,   420,   421,   422,   423,   424,   425,   426,
     427,   428,   429,   430,   431,   432,     0,     0,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,     0,   443,
     444,   445,  1169,   447,     0,   448,   449,   450,   451,   452,
     453,   454,   455,   456,   457,   458,   459,   460,   461,   462,
     823,     0,     0,   464,   465,     0,   466,   467,   468,   469,
     470,   471,   472,     0,   473,  1170,  1171,     0,   476,     0,
     477,   478,   824,   480,   825,  1172,   482,   483,   826,   485,
     486,   487,   488,   489,     0,     0,   490,   491,   492,     0,
     493,   494,   495,   496,     0,   497,   498,   499,   500,   501,
     502,  1173,     0,   504,   505,   506,   507,   508,   509,   510,
     511,   512,   513,   514,     0,     0,   515,     0,     0,   516,
     517,   518,   519,   520,   521,   522,   523,   524,   525,   526,
     527,   528,   529,   530,   531,   532,   533,   534,   535,   536,
    1174,     0,     0,     0,     0,     0,     0,  1175,  1176,  1177,
       0,     0,     0,     0,  1178,     0,  1179,     0,     0,     0,
       0,     0,  1180,  1181,     0,     0,     0,     0,  1182,  1183,
     119,  1807,   843,  1135,  1136,  1137,  1808,  1139,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   120,
     121,   122,   123,   124,   125,   126,   127,   128,  1809,   129,
     130,   131,     0,     0,     0,     0,     0,   132,  1140,     0,
       0,   133,   134,   135,     0,   136,   137,   138,   139,   140,
     141,   142,   143,  1141,   145,  1142,  1143,     0,   148,   149,
     150,   151,   152,   153,  1144,   812,   154,   155,   156,   157,
    1145,  1146,   160,     0,   161,   162,   163,   164,   813,     0,
     814,     0,  1147,   168,   169,   170,   171,   172,   173,   174,
     175,   176,     0,   177,   178,   179,   180,   181,   182,     0,
     183,   184,   185,   186,   187,   188,   189,   190,   191,   192,
     193,  1148,   195,   196,  1149,   198,  1150,   199,     0,   200,
     201,   202,   203,   204,   205,     0,     0,   206,   207,   208,
     209,   210,     0,     0,   211,   212,  1151,   214,   215,   216,
     217,     0,   218,   219,   220,     0,   221,   222,   223,     0,
     224,   225,   226,   227,  1152,   229,   230,   231,   232,   233,
     815,  1153,   235,     0,   236,   237,  1154,   239,     0,   240,
       0,   241,   242,     0,   243,   244,   245,   246,   247,   248,
       0,   249,   250,     0,     0,  1155,  1156,   253,   254,     0,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,     0,   267,   268,   269,   270,   271,   272,   273,
       0,   274,   275,   276,   277,   278,   279,   280,   281,  1157,
    1158,     0,  1159,     0,   285,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,     0,     0,   297,   298,
     299,   300,     0,   301,   302,   303,   304,   305,   306,   307,
     308,  1160,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323,   324,   325,   326,   327,
     328,   329,  1161,   331,  1162,   333,   334,   335,   336,   337,
    1163,   338,   339,   340,   341,  1164,   818,   343,  1165,   345,
     346,   347,     0,   348,   349,     0,     0,  1166,   351,   352,
       0,     0,   353,   354,   355,   356,   357,   358,   820,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,     0,     0,     0,     0,   373,   374,   821,   376,
     377,   378,   379,   380,   381,   382,     0,   383,   384,   385,
     386,   387,   388,   389,   390,     0,   391,   392,   393,  1167,
     395,   396,   397,   398,     0,   399,   400,   401,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,     0,
     413,   414,   415,   416,   417,   418,  1168,   420,   421,   422,
     423,   424,   425,   426,   427,   428,   429,   430,   431,   432,
       0,     0,   433,   434,   435,   436,   437,   438,   439,   440,
     441,   442,     0,   443,   444,   445,  1169,   447,     0,   448,
     449,   450,   451,   452,   453,   454,   455,   456,   457,   458,
     459,   460,   461,   462,   823,     0,     0,   464,   465,     0,
     466,   467,   468,   469,   470,   471,   472,     0,   473,  1170,
    1171,     0,   476,     0,   477,   478,   824,   480,   825,  1172,
     482,   483,   826,   485,   486,   487,   488,   489,     0,     0,
     490,   491,   492,     0,   493,   494,   495,   496,     0,   497,
     498,   499,   500,   501,   502,  1173,     0,   504,   505,   506,
     507,   508,   509,   510,   511,   512,   513,   514,     0,     0,
     515,     0,     0,   516,   517,   518,   519,   520,   521,   522,
     523,   524,   525,   526,   527,   528,   529,   530,   531,   532,
     533,   534,   535,   536,  1174,     0,     0,     0,     0,     0,
       0,  1175,  1176,  1177,     0,     0,     0,     0,  1178,     0,
    1179,     0,     0,     0,     0,     0,  1180,  1181,     0,     0,
       0,     0,  1182,  1183,   119,  1134,   843,  1135,  1136,  1137,
    1138,  1139,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   120,   121,   122,   123,   124,   125,   126,
     127,   128,     0,   129,   130,   131,     0,     0,     0,     0,
       0,   132,  1140,     0,     0,   133,   134,   135,     0,   136,
     137,   138,   139,   140,   141,   142,   143,  1141,   145,  1142,
    1143,     0,   148,   149,   150,   151,   152,   153,  1144,   812,
     154,   155,   156,   157,  1145,  1146,   160,     0,   161,   162,
     163,   164,   813,     0,   814,     0,  1147,   168,   169,   170,
     171,   172,   173,   174,   175,   176,     0,   177,   178,   179,
     180,   181,   182,     0,   183,   184,   185,   186,   187,   188,
     189,   190,   191,   192,   193,  1148,   195,   196,  1149,   198,
    1150,   199,     0,   200,   201,   202,   203,   204,   205,     0,
       0,   206,   207,   208,   209,   210,     0,     0,   211,   212,
    1151,   214,   215,   216,   217,     0,   218,   219,   220,     0,
     221,   222,   223,     0,   224,   225,   226,   227,  1152,   229,
     230,   231,   232,   233,   815,  1153,   235,     0,   236,   237,
    1154,   239,     0,   240,     0,   241,   242,  1523,   243,   244,
     245,   246,   247,   248,     0,   249,   250,     0,     0,  1155,
    1156,   253,   254,     0,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,     0,   267,   268,   269,
     270,   271,   272,   273,     0,   274,   275,   276,   277,   278,
     279,   280,   281,  1157,  1158,     0,  1159,     0,   285,   286,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
       0,     0,   297,   298,   299,   300,     0,   301,   302,   303,
     304,   305,   306,   307,   308,  1160,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,   329,  1161,   331,  1162,   333,
     334,   335,   336,   337,  1163,   338,   339,   340,   341,  1164,
     818,   343,  1165,   345,   346,   347,     0,   348,   349,     0,
       0,  1166,   351,   352,     0,     0,   353,   354,   355,   356,
     357,   358,   820,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,     0,     0,     0,     0,
     373,   374,   821,   376,   377,   378,   379,   380,   381,   382,
       0,   383,   384,   385,   386,   387,   388,   389,   390,     0,
     391,   392,   393,  1167,   395,   396,   397,   398,     0,   399,
     400,   401,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,     0,   413,   414,   415,   416,   417,   418,
    1168,   420,   421,   422,   423,   424,   425,   426,   427,   428,
     429,   430,   431,   432,     0,     0,   433,   434,   435,   436,
     437,   438,   439,   440,   441,   442,     0,   443,   444,   445,
    1169,   447,     0,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   823,     0,
       0,   464,   465,     0,   466,   467,   468,   469,   470,   471,
     472,     0,   473,  1170,  1171,     0,   476,     0,   477,   478,
     824,   480,   825,  1172,   482,   483,   826,   485,   486,   487,
     488,   489,     0,     0,   490,   491,   492,     0,   493,   494,
     495,   496,     0,   497,   498,   499,   500,   501,   502,  1173,
       0,   504,   505,   506,   507,   508,   509,   510,   511,   512,
     513,   514,     0,     0,   515,     0,     0,   516,   517,   518,
     519,   520,   521,   522,   523,   524,   525,   526,   527,   528,
     529,   530,   531,   532,   533,   534,   535,   536,  1174,     0,
       0,     0,     0,     0,     0,  1175,  1176,  1177,     0,     0,
       0,     0,  1178,     0,  1179,     0,     0,     0,     0,     0,
    1180,  1181,     0,     0,     0,     0,  1182,  1183,   119,  1134,
     843,  1135,  1136,  1137,  1138,  1139,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   120,   121,   122,
     123,   124,   125,   126,   127,   128,     0,   129,   130,   131,
       0,     0,     0,     0,     0,   132,  1140,     0,     0,   133,
     134,   135,     0,   136,   137,   138,   139,   140,   141,   142,
     143,  1141,   145,  1142,  1143,     0,   148,   149,   150,   151,
     152,   153,  1144,   812,   154,   155,   156,   157,  1145,  1146,
     160,     0,   161,   162,   163,   164,   813,     0,   814,     0,
    1147,   168,   169,   170,   171,   172,   173,   174,   175,   176,
       0,   177,   178,   179,   180,   181,   182,     0,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,  1148,
     195,   196,  1149,   198,  1150,   199,     0,   200,   201,   202,
     203,   204,   205,     0,     0,   206,   207,   208,   209,   210,
       0,     0,   211,   212,  1151,   214,   215,   216,   217,     0,
     218,   219,   220,     0,   221,   222,   223,     0,   224,   225,
     226,   227,  1152,   229,   230,   231,   232,   233,   815,  1153,
     235,     0,   236,   237,  1154,   239,     0,   240,     0,   241,
     242,     0,   243,   244,   245,   246,   247,   248,     0,   249,
     250,     0,     0,  1155,  1156,   253,   254,     0,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
       0,   267,   268,   269,   270,   271,   272,   273,     0,   274,
     275,   276,   277,   278,   279,   280,   281,  1157,  1158,     0,
    1159,     0,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,     0,     0,   297,   298,   299,   300,
       0,   301,   302,   303,   304,   305,   306,   307,   308,  1160,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,   323,   324,   325,   326,   327,   328,   329,
    1161,   331,  1162,   333,   334,   335,   336,   337,  1163,   338,
     339,   340,   341,  1164,   818,   343,  1165,   345,   346,   347,
       0,   348,   349,     0,     0,  1166,   351,   352,     0,     0,
     353,   354,   355,   356,   357,   358,   820,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
       0,     0,     0,     0,   373,   374,   821,   376,   377,   378,
     379,   380,   381,   382,     0,   383,   384,   385,   386,   387,
     388,   389,   390,     0,   391,   392,   393,  1167,   395,   396,
     397,   398,     0,   399,   400,   401,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,     0,   413,   414,
     415,   416,   417,   418,  1168,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,     0,     0,
     433,   434,   435,   436,   437,   438,   439,   440,   441,   442,
       0,   443,   444,   445,  1169,   447,     0,   448,   449,   450,
     451,   452,   453,   454,   455,   456,   457,   458,   459,   460,
     461,   462,   823,     0,     0,   464,   465,     0,   466,   467,
     468,   469,   470,   471,   472,     0,   473,  1170,  1171,     0,
     476,     0,   477,   478,   824,   480,   825,  1172,   482,   483,
     826,   485,   486,   487,   488,   489,     0,     0,   490,   491,
     492,     0,   493,   494,   495,   496,     0,   497,   498,   499,
     500,   501,   502,  1173,     0,   504,   505,   506,   507,   508,
     509,   510,   511,   512,   513,   514,     0,     0,   515,     0,
       0,   516,   517,   518,   519,   520,   521,   522,   523,   524,
     525,   526,   527,   528,   529,   530,   531,   532,   533,   534,
     535,   536,  1174,     0,     0,     0,     0,     0,     0,  1175,
    1176,  1177,     0,     0,     0,     0,  1178,     0,  1179,  2158,
       0,     0,     0,     0,  1180,  1181,     0,     0,     0,     0,
    1182,  1183,   119,  1134,   843,  1135,  1136,  1137,  1138,  1139,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   120,   121,   122,   123,   124,   125,   126,   127,   128,
       0,   129,   130,   131,     0,     0,     0,     0,     0,   132,
    1140,     0,     0,   133,   134,   135,     0,   136,   137,   138,
     139,   140,   141,   142,   143,  1141,   145,  1142,  1143,     0,
     148,   149,   150,   151,   152,   153,  1144,   812,   154,   155,
     156,   157,  1145,  1146,   160,     0,   161,   162,   163,   164,
     813,     0,   814,     0,  1147,   168,   169,   170,   171,   172,
     173,   174,   175,   176,     0,   177,   178,   179,   180,   181,
     182,     0,   183,   184,   185,   186,   187,   188,   189,   190,
     191,   192,   193,  1148,   195,   196,  1149,   198,  1150,   199,
       0,   200,   201,   202,   203,   204,   205,     0,     0,   206,
     207,   208,   209,   210,     0,     0,   211,   212,  1151,   214,
     215,   216,   217,     0,   218,   219,   220,     0,   221,   222,
     223,     0,   224,   225,   226,   227,  1152,   229,   230,   231,
     232,   233,   815,  1153,   235,     0,   236,   237,  1154,   239,
       0,   240,     0,   241,   242,     0,   243,   244,   245,   246,
     247,   248,     0,   249,   250,     0,     0,  1155,  1156,   253,
     254,     0,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,     0,   267,   268,   269,   270,   271,
     272,   273,     0,   274,   275,   276,   277,   278,   279,   280,
     281,  1157,  1158,     0,  1159,     0,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,     0,     0,
     297,   298,   299,   300,     0,   301,   302,   303,   304,   305,
     306,   307,   308,  1160,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
     326,   327,   328,   329,  1161,   331,  1162,   333,   334,   335,
     336,   337,  1163,   338,   339,   340,   341,  1164,   818,   343,
    1165,   345,   346,   347,     0,   348,   349,     0,     0,  1166,
     351,   352,     0,     0,   353,   354,   355,   356,   357,   358,
     820,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,     0,     0,     0,     0,   373,   374,
     821,   376,   377,   378,   379,   380,   381,   382,     0,   383,
     384,   385,   386,   387,   388,   389,   390,     0,   391,   392,
     393,  1167,   395,   396,   397,   398,     0,   399,   400,   401,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,     0,   413,   414,   415,   416,   417,   418,  1168,   420,
     421,   422,   423,   424,   425,   426,   427,   428,   429,   430,
     431,   432,     0,     0,   433,   434,   435,   436,   437,   438,
     439,   440,   441,   442,     0,   443,   444,   445,  1169,   447,
       0,   448,   449,   450,   451,   452,   453,   454,   455,   456,
     457,   458,   459,   460,   461,   462,   823,     0,     0,   464,
     465,     0,   466,   467,   468,   469,   470,   471,   472,     0,
     473,  1170,  1171,     0,   476,     0,   477,   478,   824,   480,
     825,  1172,   482,   483,   826,   485,   486,   487,   488,   489,
       0,     0,   490,   491,   492,     0,   493,   494,   495,   496,
       0,   497,   498,   499,   500,   501,   502,  1173,     0,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
       0,     0,   515,     0,     0,   516,   517,   518,   519,   520,
     521,   522,   523,   524,   525,   526,   527,   528,   529,   530,
     531,   532,   533,   534,   535,   536,  1174,     0,     0,     0,
       0,     0,     0,  1175,  1176,  1177,     0,     0,     0,     0,
    1178,     0,  1179,     0,     0,     0,     0,     0,  1180,  1181,
       0,     0,     0,  2772,  1182,  1183,   119,  1134,   843,  1135,
    1136,  1137,  1138,  1139,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   120,   121,   122,   123,   124,
     125,   126,   127,   128,     0,   129,   130,   131,     0,     0,
       0,     0,     0,   132,  1140,     0,     0,   133,   134,   135,
       0,   136,   137,   138,   139,   140,   141,   142,   143,  1141,
     145,  1142,  1143,     0,   148,   149,   150,   151,   152,   153,
    1144,   812,   154,   155,   156,   157,  1145,  1146,   160,     0,
     161,   162,   163,   164,   813,     0,   814,     0,  1147,   168,
     169,   170,   171,   172,   173,   174,   175,   176,     0,   177,
     178,   179,   180,   181,   182,     0,   183,   184,   185,   186,
     187,   188,   189,   190,   191,   192,   193,  1148,   195,   196,
    1149,   198,  1150,   199,     0,   200,   201,   202,   203,   204,
     205,     0,     0,   206,   207,   208,   209,   210,     0,     0,
     211,   212,  1151,   214,   215,   216,   217,     0,   218,   219,
     220,     0,   221,   222,   223,     0,   224,   225,   226,   227,
    1152,   229,   230,   231,   232,   233,   815,  1153,   235,     0,
     236,   237,  1154,   239,     0,   240,     0,   241,   242,     0,
     243,   244,   245,   246,   247,   248,     0,   249,   250,     0,
       0,  1155,  1156,   253,   254,     0,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,     0,   267,
     268,   269,   270,   271,   272,   273,     0,   274,   275,   276,
     277,   278,   279,   280,   281,  1157,  1158,     0,  1159,     0,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,     0,     0,   297,   298,   299,   300,     0,   301,
     302,   303,   304,   305,   306,   307,   308,  1160,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,   323,   324,   325,   326,   327,   328,   329,  1161,   331,
    1162,   333,   334,   335,   336,   337,  1163,   338,   339,   340,
     341,  1164,   818,   343,  1165,   345,   346,   347,     0,   348,
     349,     0,     0,  1166,   351,   352,     0,     0,   353,   354,
     355,   356,   357,   358,   820,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,     0,     0,
       0,     0,   373,   374,   821,   376,   377,   378,   379,   380,
     381,   382,     0,   383,   384,   385,   386,   387,   388,   389,
     390,     0,   391,   392,   393,  1167,   395,   396,   397,   398,
       0,   399,   400,   401,   402,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,     0,   413,   414,   415,   416,
     417,   418,  1168,   420,   421,   422,   423,   424,   425,   426,
     427,   428,   429,   430,   431,   432,     0,     0,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,     0,   443,
     444,   445,  1169,   447,     0,   448,   449,   450,   451,   452,
     453,   454,   455,   456,   457,   458,   459,   460,   461,   462,
     823,     0,     0,   464,   465,  2826,   466,   467,   468,   469,
     470,   471,   472,     0,   473,  1170,  1171,     0,   476,     0,
     477,   478,   824,   480,   825,  1172,   482,   483,   826,   485,
     486,   487,   488,   489,     0,     0,   490,   491,   492,     0,
     493,   494,   495,   496,     0,   497,   498,   499,   500,   501,
     502,  1173,     0,   504,   505,   506,   507,   508,   509,   510,
     511,   512,   513,   514,     0,     0,   515,     0,     0,   516,
     517,   518,   519,   520,   521,   522,   523,   524,   525,   526,
     527,   528,   529,   530,   531,   532,   533,   534,   535,   536,
    1174,     0,     0,     0,     0,     0,     0,  1175,  1176,  1177,
       0,     0,     0,     0,  1178,     0,  1179,     0,     0,     0,
       0,     0,  1180,  1181,     0,     0,     0,     0,  1182,  1183,
     119,  1134,   843,  1135,  1136,  1137,  1138,  1139,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   120,
     121,   122,   123,   124,   125,   126,   127,   128,     0,   129,
     130,   131,     0,     0,     0,     0,     0,   132,  1140,     0,
       0,   133,   134,   135,     0,   136,   137,   138,   139,   140,
     141,   142,   143,  1141,   145,  1142,  1143,     0,   148,   149,
     150,   151,   152,   153,  1144,   812,   154,   155,   156,   157,
    1145,  1146,   160,     0,   161,   162,   163,   164,   813,     0,
     814,     0,  1147,   168,   169,   170,   171,   172,   173,   174,
     175,   176,     0,   177,   178,   179,   180,   181,   182,     0,
     183,   184,   185,   186,   187,   188,   189,   190,   191,   192,
     193,  1148,   195,   196,  1149,   198,  1150,   199,     0,   200,
     201,   202,   203,   204,   205,     0,     0,   206,   207,   208,
     209,   210,     0,     0,   211,   212,  1151,   214,   215,   216,
     217,     0,   218,   219,   220,     0,   221,   222,   223,     0,
     224,   225,   226,   227,  1152,   229,   230,   231,   232,   233,
     815,  1153,   235,     0,   236,   237,  1154,   239,     0,   240,
       0,   241,   242,     0,   243,   244,   245,   246,   247,   248,
       0,   249,   250,     0,     0,  1155,  1156,   253,   254,     0,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,     0,   267,   268,   269,   270,   271,   272,   273,
       0,   274,   275,   276,   277,   278,   279,   280,   281,  1157,
    1158,     0,  1159,     0,   285,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,     0,     0,   297,   298,
     299,   300,     0,   301,   302,   303,   304,   305,   306,   307,
     308,  1160,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323,   324,   325,   326,   327,
     328,   329,  1161,   331,  1162,   333,   334,   335,   336,   337,
    1163,   338,   339,   340,   341,  1164,   818,   343,  1165,   345,
     346,   347,     0,   348,   349,     0,     0,  1166,   351,   352,
       0,     0,   353,   354,   355,   356,   357,   358,   820,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,     0,     0,     0,     0,   373,   374,   821,   376,
     377,   378,   379,   380,   381,   382,     0,   383,   384,   385,
     386,   387,   388,   389,   390,     0,   391,   392,   393,  1167,
     395,   396,   397,   398,     0,   399,   400,   401,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,     0,
     413,   414,   415,   416,   417,   418,  1168,   420,   421,   422,
     423,   424,   425,   426,   427,   428,   429,   430,   431,   432,
       0,     0,   433,   434,   435,   436,   437,   438,   439,   440,
     441,   442,     0,   443,   444,   445,  1169,   447,     0,   448,
     449,   450,   451,   452,   453,   454,   455,   456,   457,   458,
     459,   460,   461,   462,   823,     0,     0,   464,   465,     0,
     466,   467,   468,   469,   470,   471,   472,     0,   473,  1170,
    1171,     0,   476,     0,   477,   478,   824,   480,   825,  1172,
     482,   483,   826,   485,   486,   487,   488,   489,     0,     0,
     490,   491,   492,     0,   493,   494,   495,   496,     0,   497,
     498,   499,   500,   501,   502,  1173,     0,   504,   505,   506,
     507,   508,   509,   510,   511,   512,   513,   514,     0,  2947,
     515,     0,     0,   516,   517,   518,   519,   520,   521,   522,
     523,   524,   525,   526,   527,   528,   529,   530,   531,   532,
     533,   534,   535,   536,  1174,     0,     0,     0,     0,     0,
       0,  1175,  1176,  1177,     0,     0,     0,     0,  1178,     0,
    1179,     0,     0,     0,     0,     0,  1180,  1181,     0,     0,
       0,     0,  1182,  1183,   119,  1134,   843,  1135,  1136,  1137,
    1138,  1139,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   120,   121,   122,   123,   124,   125,   126,
     127,   128,  3203,   129,   130,   131,     0,     0,     0,     0,
       0,   132,  1140,     0,     0,   133,   134,   135,     0,   136,
     137,   138,   139,   140,   141,   142,   143,  1141,   145,  1142,
    1143,     0,   148,   149,   150,   151,   152,   153,  1144,   812,
     154,   155,   156,   157,  1145,  1146,   160,     0,   161,   162,
     163,   164,   813,     0,   814,     0,  1147,   168,   169,   170,
     171,   172,   173,   174,   175,   176,     0,   177,   178,   179,
     180,   181,   182,     0,   183,   184,  3204,   186,   187,   188,
     189,   190,   191,   192,   193,  1148,   195,   196,  1149,   198,
    1150,   199,     0,   200,   201,   202,   203,   204,   205,     0,
       0,   206,   207,   208,   209,   210,     0,     0,   211,   212,
    1151,   214,   215,   216,   217,     0,   218,   219,   220,     0,
     221,   222,   223,     0,   224,   225,   226,   227,  1152,   229,
     230,   231,   232,   233,   815,  1153,   235,     0,   236,   237,
    1154,   239,     0,   240,     0,   241,   242,     0,   243,   244,
     245,   246,   247,   248,     0,   249,   250,     0,     0,  3205,
    1156,   253,   254,     0,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,     0,   267,   268,   269,
     270,   271,   272,   273,     0,   274,   275,   276,   277,   278,
     279,   280,   281,  1157,  1158,     0,  1159,     0,   285,   286,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
       0,     0,   297,   298,   299,   300,     0,   301,   302,   303,
     304,   305,   306,   307,   308,  1160,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,   329,  1161,   331,  1162,   333,
     334,   335,   336,   337,  1163,   338,   339,   340,   341,  1164,
     818,   343,  1165,   345,   346,   347,     0,   348,   349,     0,
       0,  1166,   351,   352,     0,     0,   353,   354,   355,   356,
     357,   358,   820,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,     0,     0,     0,     0,
     373,   374,   821,   376,   377,   378,   379,   380,   381,   382,
       0,   383,   384,   385,   386,   387,   388,   389,   390,     0,
     391,   392,   393,  1167,   395,   396,   397,   398,     0,   399,
     400,   401,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,     0,   413,   414,   415,   416,   417,  3206,
    1168,   420,   421,   422,   423,   424,   425,   426,   427,   428,
     429,   430,   431,   432,     0,     0,   433,   434,   435,   436,
     437,   438,   439,   440,   441,   442,     0,   443,   444,   445,
    1169,   447,     0,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   823,     0,
       0,   464,   465,     0,   466,   467,   468,   469,   470,   471,
     472,     0,   473,  1170,  1171,     0,   476,     0,   477,   478,
     824,   480,   825,  1172,   482,   483,   826,   485,   486,   487,
     488,   489,     0,     0,   490,   491,   492,     0,   493,   494,
     495,   496,     0,   497,   498,   499,   500,   501,   502,  1173,
       0,   504,   505,   506,   507,   508,   509,   510,   511,   512,
     513,   514,     0,     0,   515,     0,     0,   516,   517,   518,
     519,   520,   521,   522,   523,   524,   525,   526,   527,   528,
     529,   530,   531,   532,   533,   534,   535,   536,  1174,     0,
       0,     0,     0,     0,     0,  1175,  1176,  1177,     0,     0,
       0,     0,  1178,     0,  3207,     0,     0,     0,     0,     0,
    1180,  1181,     0,     0,     0,     0,  1182,  1183,   119,  1134,
     843,  1135,  1136,  1137,  1138,  1139,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   120,   121,   122,
     123,   124,   125,   126,   127,   128,     0,   129,   130,   131,
       0,     0,     0,     0,     0,   132,  1140,     0,     0,   133,
     134,   135,     0,   136,   137,   138,   139,   140,   141,   142,
     143,  1141,   145,  1142,  1143,     0,   148,   149,   150,   151,
     152,   153,  1144,   812,   154,   155,   156,   157,  1145,  1146,
     160,     0,   161,   162,   163,   164,   813,     0,   814,     0,
    1147,   168,   169,   170,   171,   172,   173,   174,   175,   176,
       0,   177,   178,   179,   180,   181,   182,     0,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,  1148,
     195,   196,  1149,   198,  1150,   199,     0,   200,   201,   202,
     203,   204,   205,     0,     0,   206,   207,   208,   209,   210,
       0,     0,   211,   212,  1151,   214,   215,   216,   217,     0,
     218,   219,   220,     0,   221,   222,   223,     0,   224,   225,
     226,   227,  1152,   229,   230,   231,   232,   233,   815,  1153,
     235,     0,   236,   237,  1154,   239,     0,   240,     0,   241,
     242,     0,   243,   244,   245,   246,   247,   248,     0,   249,
     250,     0,     0,  1155,  1156,   253,   254,     0,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
       0,   267,   268,   269,   270,   271,   272,   273,     0,   274,
     275,   276,   277,   278,   279,   280,   281,  1157,  1158,     0,
    1159,     0,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,     0,     0,   297,   298,   299,   300,
       0,   301,   302,   303,   304,   305,   306,   307,   308,  1160,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,   323,   324,   325,   326,   327,   328,   329,
    1161,   331,  1162,   333,   334,   335,   336,   337,  1163,   338,
     339,   340,   341,  1164,   818,   343,  1165,   345,   346,   347,
       0,   348,   349,     0,     0,  1166,   351,   352,     0,     0,
     353,   354,   355,   356,   357,   358,   820,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
       0,     0,     0,     0,   373,   374,   821,   376,   377,   378,
     379,   380,   381,   382,     0,   383,   384,   385,   386,   387,
     388,   389,   390,     0,   391,   392,   393,  1167,   395,   396,
     397,   398,     0,   399,   400,   401,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,     0,   413,   414,
     415,   416,   417,   418,  1168,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,     0,     0,
     433,   434,   435,   436,   437,   438,   439,   440,   441,   442,
       0,   443,   444,   445,  1169,   447,     0,   448,   449,   450,
     451,   452,   453,   454,   455,   456,   457,   458,   459,   460,
     461,   462,   823,     0,     0,   464,   465,  3410,   466,   467,
     468,   469,   470,   471,   472,     0,   473,  1170,  1171,     0,
     476,     0,   477,   478,   824,   480,   825,  1172,   482,   483,
     826,   485,   486,   487,   488,   489,     0,     0,   490,   491,
     492,     0,   493,   494,   495,   496,     0,   497,   498,   499,
     500,   501,   502,  1173,     0,   504,   505,   506,   507,   508,
     509,   510,   511,   512,   513,   514,     0,     0,   515,     0,
       0,   516,   517,   518,   519,   520,   521,   522,   523,   524,
     525,   526,   527,   528,   529,   530,   531,   532,   533,   534,
     535,   536,  1174,     0,     0,     0,     0,     0,     0,  1175,
    1176,  1177,     0,     0,     0,     0,  1178,     0,  1179,     0,
       0,     0,     0,     0,  1180,  1181,     0,     0,     0,     0,
    1182,  1183,   119,  1134,   843,  1135,  1136,  1137,  1138,  1139,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   120,   121,   122,   123,   124,   125,   126,   127,   128,
       0,   129,   130,   131,     0,     0,     0,     0,     0,   132,
    1140,     0,     0,   133,   134,   135,     0,   136,   137,   138,
     139,   140,   141,   142,   143,  1141,   145,  1142,  1143,     0,
     148,   149,   150,   151,   152,   153,  1144,   812,   154,   155,
     156,   157,  1145,  1146,   160,     0,   161,   162,   163,   164,
     813,     0,   814,     0,  1147,   168,   169,   170,   171,   172,
     173,   174,   175,   176,     0,   177,   178,   179,   180,   181,
     182,     0,   183,   184,   185,   186,   187,   188,   189,   190,
     191,   192,   193,  1148,   195,   196,  1149,   198,  1150,   199,
       0,   200,   201,   202,   203,   204,   205,     0,     0,   206,
     207,   208,   209,   210,     0,     0,   211,   212,  1151,   214,
     215,   216,   217,     0,   218,   219,   220,     0,   221,   222,
     223,     0,   224,   225,   226,   227,  1152,   229,   230,   231,
     232,   233,   815,  1153,   235,     0,   236,   237,  1154,   239,
       0,   240,     0,   241,   242,     0,   243,   244,   245,   246,
     247,   248,     0,   249,   250,     0,     0,  1155,  1156,   253,
     254,     0,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,     0,   267,   268,   269,   270,   271,
     272,   273,     0,   274,   275,   276,   277,   278,   279,   280,
     281,  1157,  1158,     0,  1159,     0,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,     0,     0,
     297,   298,   299,   300,     0,   301,   302,   303,   304,   305,
     306,   307,   308,  1160,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
     326,   327,   328,   329,  1161,   331,  1162,   333,   334,   335,
     336,   337,  1163,   338,   339,   340,   341,  1164,   818,   343,
    1165,   345,   346,   347,     0,   348,   349,     0,     0,  1166,
     351,   352,     0,     0,   353,   354,   355,   356,   357,   358,
     820,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,     0,     0,     0,     0,   373,   374,
     821,   376,   377,   378,   379,   380,   381,   382,     0,   383,
     384,   385,   386,   387,   388,   389,   390,     0,   391,   392,
     393,  1167,   395,   396,   397,   398,     0,   399,   400,   401,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,     0,   413,   414,   415,   416,   417,   418,  1168,   420,
     421,   422,   423,   424,   425,   426,   427,   428,   429,   430,
     431,   432,     0,     0,   433,   434,   435,   436,   437,   438,
     439,   440,   441,   442,     0,   443,   444,   445,  1169,   447,
       0,   448,   449,   450,   451,   452,   453,   454,   455,   456,
     457,   458,   459,   460,   461,   462,   823,     0,     0,   464,
     465,     0,   466,   467,   468,   469,   470,   471,   472,     0,
     473,  1170,  1171,     0,   476,     0,   477,   478,   824,   480,
     825,  1172,   482,   483,   826,   485,   486,   487,   488,   489,
       0,     0,   490,   491,   492,     0,   493,   494,   495,   496,
       0,   497,   498,   499,   500,   501,   502,  1173,     0,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
       0,     0,   515,     0,     0,   516,   517,   518,   519,   520,
     521,   522,   523,   524,   525,   526,   527,   528,   529,   530,
     531,   532,   533,   534,   535,   536,  1174,     0,     0,     0,
       0,     0,     0,  1175,  1176,  1177,     0,     0,     0,     0,
    1178,     0,  1179,     0,     0,     0,     0,     0,  1180,  1181,
       0,     0,     0,  3481,  1182,  1183,   119,  1134,   843,  1135,
    1136,  1137,  1138,  1139,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   120,   121,   122,   123,   124,
     125,   126,   127,   128,     0,   129,   130,   131,     0,     0,
       0,     0,     0,   132,  1140,     0,     0,   133,   134,   135,
       0,   136,   137,   138,   139,   140,   141,   142,   143,  1141,
     145,  1142,  1143,     0,   148,   149,   150,   151,   152,   153,
    1144,   812,   154,   155,   156,   157,  1145,  1146,   160,     0,
     161,   162,   163,   164,   813,     0,   814,     0,  1147,   168,
     169,   170,   171,   172,   173,   174,   175,   176,     0,   177,
     178,   179,   180,   181,   182,     0,   183,   184,   185,   186,
     187,   188,   189,   190,   191,   192,   193,  1148,   195,   196,
    1149,   198,  1150,   199,     0,   200,   201,   202,   203,   204,
     205,     0,     0,   206,   207,   208,   209,   210,     0,     0,
     211,   212,  1151,   214,   215,   216,   217,     0,   218,   219,
     220,     0,   221,   222,   223,     0,   224,   225,   226,   227,
    1152,   229,   230,   231,   232,   233,   815,  1153,   235,     0,
     236,   237,  1154,   239,     0,   240,     0,   241,   242,     0,
     243,   244,   245,   246,   247,   248,     0,   249,   250,     0,
       0,  1155,  1156,   253,   254,     0,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,     0,   267,
     268,   269,   270,   271,   272,   273,     0,   274,   275,   276,
     277,   278,   279,   280,   281,  1157,  1158,     0,  1159,     0,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,     0,     0,   297,   298,   299,   300,     0,   301,
     302,   303,   304,   305,   306,   307,   308,  1160,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,   323,   324,   325,   326,   327,   328,   329,  1161,   331,
    1162,   333,   334,   335,   336,   337,  1163,   338,   339,   340,
     341,  1164,   818,   343,  1165,   345,   346,   347,     0,   348,
     349,     0,     0,  1166,   351,   352,     0,     0,   353,   354,
     355,   356,   357,   358,   820,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,     0,     0,
       0,     0,   373,   374,   821,   376,   377,   378,   379,   380,
     381,   382,     0,   383,   384,   385,   386,   387,   388,   389,
     390,     0,   391,   392,   393,  1167,   395,   396,   397,   398,
       0,   399,   400,   401,   402,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,     0,   413,   414,   415,   416,
     417,   418,  1168,   420,   421,   422,   423,   424,   425,   426,
     427,   428,   429,   430,   431,   432,     0,     0,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,     0,   443,
     444,   445,  1169,   447,     0,   448,   449,   450,   451,   452,
     453,   454,   455,   456,   457,   458,   459,   460,   461,   462,
     823,     0,     0,   464,   465,  3621,   466,   467,   468,   469,
     470,   471,   472,     0,   473,  1170,  1171,     0,   476,     0,
     477,   478,   824,   480,   825,  1172,   482,   483,   826,   485,
     486,   487,   488,   489,     0,     0,   490,   491,   492,     0,
     493,   494,   495,   496,     0,   497,   498,   499,   500,   501,
     502,  1173,     0,   504,   505,   506,   507,   508,   509,   510,
     511,   512,   513,   514,     0,     0,   515,     0,     0,   516,
     517,   518,   519,   520,   521,   522,   523,   524,   525,   526,
     527,   528,   529,   530,   531,   532,   533,   534,   535,   536,
    1174,     0,     0,     0,     0,     0,     0,  1175,  1176,  1177,
       0,     0,     0,     0,  1178,     0,  1179,     0,     0,     0,
       0,     0,  1180,  1181,     0,     0,     0,     0,  1182,  1183,
     119,  1134,   843,  1135,  1136,  1137,  1138,  1139,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   120,
     121,   122,   123,   124,   125,   126,   127,   128,     0,   129,
     130,   131,     0,     0,     0,     0,     0,   132,  1140,     0,
       0,   133,   134,   135,     0,   136,   137,   138,   139,   140,
     141,   142,   143,  1141,   145,  1142,  1143,     0,   148,   149,
     150,   151,   152,   153,  1144,   812,   154,   155,   156,   157,
    1145,  1146,   160,     0,   161,   162,   163,   164,   813,     0,
     814,     0,  1147,   168,   169,   170,   171,   172,   173,   174,
     175,   176,     0,   177,   178,   179,   180,   181,   182,     0,
     183,   184,   185,   186,   187,   188,   189,   190,   191,   192,
     193,  1148,   195,   196,  1149,   198,  1150,   199,     0,   200,
     201,   202,   203,   204,   205,     0,     0,   206,   207,   208,
     209,   210,     0,     0,   211,   212,  1151,   214,   215,   216,
     217,     0,   218,   219,   220,     0,   221,   222,   223,     0,
     224,   225,   226,   227,  1152,   229,   230,   231,   232,   233,
     815,  1153,   235,     0,   236,   237,  1154,   239,     0,   240,
       0,   241,   242,     0,   243,   244,   245,   246,   247,   248,
       0,   249,   250,     0,     0,  1155,  1156,   253,   254,     0,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,     0,   267,   268,   269,   270,   271,   272,   273,
       0,   274,   275,   276,   277,   278,   279,   280,   281,  1157,
    1158,     0,  1159,     0,   285,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,     0,     0,   297,   298,
     299,   300,     0,   301,   302,   303,   304,   305,   306,   307,
     308,  1160,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323,   324,   325,   326,   327,
     328,   329,  1161,   331,  1162,   333,   334,   335,   336,   337,
    1163,   338,   339,   340,   341,  1164,   818,   343,  1165,   345,
     346,   347,     0,   348,   349,     0,     0,  1166,   351,   352,
       0,     0,   353,   354,   355,   356,   357,   358,   820,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,     0,     0,     0,     0,   373,   374,   821,   376,
     377,   378,   379,   380,   381,   382,     0,   383,   384,   385,
     386,   387,   388,   389,   390,     0,   391,   392,   393,  1167,
     395,   396,   397,   398,     0,   399,   400,   401,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,     0,
     413,   414,   415,   416,   417,   418,  1168,   420,   421,   422,
     423,   424,   425,   426,   427,   428,   429,   430,   431,   432,
       0,     0,   433,   434,   435,   436,   437,   438,   439,   440,
     441,   442,     0,   443,   444,   445,  1169,   447,     0,   448,
     449,   450,   451,   452,   453,   454,   455,   456,   457,   458,
     459,   460,   461,   462,   823,     0,     0,   464,   465,     0,
     466,   467,   468,   469,   470,   471,   472,     0,   473,  1170,
    1171,     0,   476,     0,   477,   478,   824,   480,   825,  1172,
     482,   483,   826,   485,   486,   487,   488,   489,     0,     0,
     490,   491,   492,     0,   493,   494,   495,   496,     0,   497,
     498,   499,   500,   501,   502,  1173,     0,   504,   505,   506,
     507,   508,   509,   510,   511,   512,   513,   514,     0,     0,
     515,     0,     0,   516,   517,   518,   519,   520,   521,   522,
     523,   524,   525,   526,   527,   528,   529,   530,   531,   532,
     533,   534,   535,   536,  1174,     0,     0,     0,     0,     0,
       0,  1175,  1176,  1177,     0,     0,     0,     0,  1178,     0,
    1179,     0,     0,     0,     0,     0,  1180,  1181,     0,     0,
       0,     0,  1182,  1183,   119,  1134,   843,  1135,  1136,  1137,
    1138,  1139,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   120,   121,   122,   123,   124,   125,   126,
     127,   128,     0,   129,   130,   131,     0,     0,     0,     0,
       0,   132,  1140,     0,     0,   133,   134,   135,     0,   136,
     137,   138,   139,   140,   141,   142,   143,  1141,   145,  1142,
    1143,     0,   148,   149,   150,   151,   152,   153,  1144,   812,
     154,   155,   156,   157,  1145,  1146,   160,     0,   161,   162,
     163,   164,   813,     0,   814,     0,  1147,   168,   169,   170,
     171,   172,   173,   174,   175,   176,     0,   177,   178,   179,
     180,   181,   182,     0,   183,   184,   185,   186,   187,   188,
     189,   190,   191,   192,   193,  1148,   195,   196,  1149,   198,
    1150,   199,     0,   200,   201,   202,   203,   204,   205,     0,
       0,   206,   207,   208,   209,   210,     0,     0,   211,   212,
    1151,   214,   215,   216,   217,     0,   218,   219,   220,     0,
     221,   222,   223,     0,   224,   225,   226,   227,  1152,   229,
     230,   231,   232,   233,   815,  1153,   235,     0,   236,   237,
    1154,   239,     0,   240,     0,   241,   242,     0,   243,   244,
     245,   246,   247,   248,     0,   249,   250,     0,     0,  1155,
    1156,   253,   254,     0,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,     0,   267,   268,   269,
     270,   271,   272,   273,     0,   274,   275,   276,   277,   278,
     279,   280,   281,  1157,  1158,     0,  1159,     0,   285,   286,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
       0,     0,   297,   298,   299,   300,     0,   301,   302,   303,
     304,   305,   306,   307,   308,  1160,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,   329,  1161,   331,  1162,   333,
     334,   335,   336,   337,  1163,   338,   339,   340,   341,  1164,
     818,   343,  1165,   345,   346,   347,     0,   348,   349,     0,
       0,  1166,   351,   352,     0,     0,   353,   354,   355,   356,
     357,   358,   820,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,     0,     0,     0,     0,
     373,   374,   821,   376,   377,   378,   379,   380,   381,   382,
       0,   383,   384,   385,   386,   387,   388,   389,   390,     0,
     391,   392,   393,  1167,   395,   396,   397,   398,     0,   399,
     400,   401,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,     0,   413,   414,   415,   416,   417,   418,
    1168,   420,   421,   422,   423,   424,   425,   426,   427,   428,
     429,   430,   431,   432,     0,     0,   433,   434,   435,   436,
     437,   438,   439,   440,   441,   442,     0,   443,   444,   445,
    1169,   447,     0,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   823,     0,
       0,   464,   465,     0,   466,   467,   468,   469,   470,   471,
     472,     0,   473,  1170,  1171,     0,   476,     0,   477,   478,
     824,   480,   825,  1172,   482,   483,   826,   485,   486,   487,
     488,   489,     0,     0,   490,   491,   492,     0,   493,   494,
     495,   496,     0,   497,   498,   499,   500,   501,   502,  1173,
       0,   504,   505,   506,   507,   508,   509,   510,   511,   512,
     513,   514,     0,     0,   515,     0,     0,   516,   517,   518,
     519,   520,   521,   522,   523,   524,   525,   526,   527,   528,
     529,   530,   531,   532,   533,   534,   535,   536,  1174,     0,
       0,     0,     0,     0,     0,  1812,  1813,  1177,     0,     0,
       0,     0,  1178,     0,  1179,     0,     0,     0,     0,     0,
    1180,  1181,     0,     0,     0,     0,  1182,  1183,   119,  2303,
     843,  1135,  1136,  1137,  1138,  1139,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   120,   121,   122,
     123,   124,   125,   126,   127,   128,     0,   129,   130,   131,
       0,     0,     0,     0,     0,   132,  1140,     0,     0,   133,
     134,   135,     0,   136,   137,   138,   139,   140,   141,   142,
     143,  1141,   145,  1142,  1143,     0,   148,   149,   150,   151,
     152,   153,  1144,   812,   154,   155,   156,   157,  1145,  1146,
     160,     0,   161,   162,   163,   164,   813,     0,   814,     0,
    1147,   168,   169,   170,   171,   172,   173,   174,   175,   176,
       0,   177,   178,   179,   180,   181,   182,     0,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,  1148,
     195,   196,  1149,   198,  1150,   199,     0,   200,   201,   202,
     203,   204,   205,     0,     0,   206,   207,   208,   209,   210,
       0,     0,   211,   212,  1151,   214,   215,   216,   217,     0,
     218,   219,   220,     0,   221,   222,   223,     0,   224,   225,
     226,   227,  1152,   229,   230,   231,   232,   233,   815,  1153,
     235,     0,   236,   237,  1154,   239,     0,   240,     0,   241,
     242,     0,   243,   244,   245,   246,   247,   248,     0,   249,
     250,     0,     0,  1155,  1156,   253,   254,     0,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
       0,   267,   268,   269,   270,   271,   272,   273,     0,   274,
     275,   276,   277,   278,   279,   280,   281,  1157,  1158,     0,
    1159,     0,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,     0,     0,   297,   298,   299,   300,
       0,   301,   302,   303,   304,   305,   306,   307,   308,  1160,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,   323,   324,   325,   326,   327,   328,   329,
    1161,   331,  1162,   333,   334,   335,   336,   337,  1163,   338,
     339,   340,   341,  1164,   818,   343,  1165,   345,   346,   347,
       0,   348,   349,     0,     0,  1166,   351,   352,     0,     0,
     353,   354,   355,   356,   357,   358,   820,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
       0,     0,     0,     0,   373,   374,   821,   376,   377,   378,
     379,   380,   381,   382,     0,   383,   384,   385,   386,   387,
     388,   389,   390,     0,   391,   392,   393,  1167,   395,   396,
     397,   398,     0,   399,   400,   401,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,     0,   413,   414,
     415,   416,   417,   418,  1168,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,     0,     0,
     433,   434,   435,   436,   437,   438,   439,   440,   441,   442,
       0,   443,   444,   445,  1169,   447,     0,   448,   449,   450,
     451,   452,   453,   454,   455,   456,   457,   458,   459,   460,
     461,   462,   823,     0,     0,   464,   465,     0,   466,   467,
     468,   469,   470,   471,   472,     0,   473,  1170,  1171,     0,
     476,     0,   477,   478,   824,   480,   825,  1172,   482,   483,
     826,   485,   486,   487,   488,   489,     0,     0,   490,   491,
     492,     0,   493,   494,   495,   496,     0,   497,   498,   499,
     500,   501,   502,  1173,     0,   504,   505,   506,   507,   508,
     509,   510,   511,   512,   513,   514,     0,     0,   515,     0,
       0,   516,   517,   518,   519,   520,   521,   522,   523,   524,
     525,   526,   527,   528,   529,   530,   531,   532,   533,   534,
     535,   536,  1174,     0,     0,     0,     0,     0,     0,  1175,
    1176,  1177,     0,     0,     0,     0,  1178,     0,  1179,     0,
       0,     0,     0,     0,  1180,  1181,     0,     0,     0,     0,
    1182,  1183,   119,  1134,   843,  1135,  1136,  1137,  1138,  1139,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   120,   121,   122,   123,   124,   125,   126,   127,   128,
       0,   129,   130,   131,     0,     0,     0,     0,     0,   132,
    1140,     0,     0,   133,   134,   135,     0,   136,   137,   138,
     139,   140,   141,   142,   143,  1141,   145,  1142,  1143,     0,
     148,   149,   150,   151,   152,   153,  1144,   812,   154,   155,
     156,   157,  1145,  1146,   160,     0,   161,   162,   163,   164,
     813,     0,   814,     0,  1147,   168,   169,   170,   171,   172,
     173,   174,   175,   176,     0,   177,   178,   179,   180,   181,
     182,     0,   183,   184,   185,   186,   187,   188,   189,   190,
     191,   192,   193,  1148,   195,   196,  1149,   198,  1150,   199,
       0,   200,   201,   202,   203,   204,   205,     0,     0,   206,
     207,   208,   209,   210,     0,     0,   211,   212,  1151,   214,
     215,   216,   217,     0,   218,   219,   220,     0,   221,   222,
     223,     0,   224,   225,   226,   227,  1152,   229,   230,   231,
     232,   233,   815,  1153,   235,     0,   236,   237,  1154,   239,
       0,   240,     0,   241,   242,     0,   243,   244,   245,   246,
     247,   248,     0,   249,   250,     0,     0,  1155,  1156,   253,
     254,     0,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,     0,   267,   268,   269,   270,   271,
     272,   273,     0,   274,   275,   276,   277,   278,   279,   280,
     281,  1157,  1158,     0,  1159,     0,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,     0,     0,
     297,   298,   299,   300,     0,   301,   302,   303,   304,   305,
     306,   307,   308,  1160,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
     326,   327,   328,   329,  1161,   331,  1162,   333,   334,   335,
     336,   337,  1163,   338,   339,   340,   341,  1164,   818,   343,
    1165,   345,   346,   347,     0,   348,   349,     0,     0,  1166,
     351,   352,     0,     0,   353,   354,   355,   356,   357,   358,
     820,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,     0,     0,     0,     0,   373,   374,
     821,   376,   377,   378,   379,   380,   381,   382,     0,   383,
     384,   385,   386,   387,   388,   389,   390,     0,   391,   392,
     393,  1167,   395,   396,   397,   398,     0,   399,   400,   401,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,     0,   413,   414,   415,   416,   417,   418,  1168,   420,
     421,   422,   423,   424,   425,   426,   427,   428,   429,   430,
     431,   432,     0,     0,   433,   434,   435,   436,   437,   438,
     439,   440,   441,   442,     0,   443,   444,   445,  1169,   447,
       0,   448,   449,   450,   451,   452,   453,   454,   455,   456,
     457,   458,   459,   460,   461,   462,   823,     0,     0,   464,
     465,     0,   466,   467,   468,   469,   470,   471,   472,     0,
     473,  1170,  1171,     0,   476,     0,   477,   478,   824,   480,
     825,  1172,   482,   483,   826,   485,   486,   487,   488,   489,
       0,     0,   490,   491,   492,     0,   493,   494,   495,   496,
       0,   497,   498,   499,   500,   501,   502,  1173,     0,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
       0,     0,   515,     0,     0,   516,   517,   518,   519,   520,
     521,   522,   523,   524,   525,   526,   527,   528,   529,   530,
     531,   532,   533,   534,   535,   536,  1174,     0,     0,     0,
       0,     0,     0,  1175,  2386,  1177,     0,     0,     0,     0,
    1178,     0,  1179,     0,     0,     0,     0,     0,  1180,  1181,
       0,     0,     0,     0,  1182,  1183,   119,  1134,   843,  1135,
    1136,  1137,  1138,  1139,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   120,   121,   122,   123,   124,
     125,   126,   127,   128,     0,   129,   130,   131,     0,     0,
       0,     0,     0,   132,  1140,     0,     0,   133,   134,   135,
       0,   136,   137,   138,   139,   140,   141,   142,   143,  1141,
     145,  1142,  1143,     0,   148,   149,   150,   151,   152,   153,
    1144,   812,   154,   155,   156,   157,  1145,  1146,   160,     0,
     161,   162,   163,   164,   813,     0,   814,     0,  1147,   168,
     169,   170,   171,   172,   173,   174,   175,   176,     0,   177,
     178,   179,   180,   181,   182,     0,   183,   184,   185,   186,
     187,   188,   189,   190,   191,   192,   193,  1148,   195,   196,
    1149,   198,  1150,   199,     0,   200,   201,   202,   203,   204,
     205,     0,     0,   206,   207,   208,   209,   210,     0,     0,
     211,   212,  1151,   214,   215,   216,   217,     0,   218,   219,
     220,     0,   221,   222,   223,     0,   224,   225,   226,   227,
    1152,   229,   230,   231,   232,   233,   815,  1153,   235,     0,
     236,   237,  1154,   239,     0,   240,     0,   241,   242,     0,
     243,   244,   245,   246,   247,   248,     0,   249,   250,     0,
       0,  1155,  1156,   253,   254,     0,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,     0,   267,
     268,   269,   270,   271,   272,   273,     0,   274,   275,   276,
     277,   278,   279,   280,   281,  1157,  1158,     0,  1159,     0,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,     0,     0,   297,   298,   299,   300,     0,   301,
     302,   303,   304,   305,   306,   307,   308,  1160,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,   323,   324,   325,   326,   327,   328,   329,  1161,   331,
    1162,   333,   334,   335,   336,   337,  1163,   338,   339,   340,
     341,  1164,   818,   343,  1165,   345,   346,   347,     0,   348,
     349,     0,     0,  1166,   351,   352,     0,     0,   353,   354,
     355,   356,   357,   358,   820,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,     0,     0,
       0,     0,   373,   374,   821,   376,   377,   378,   379,   380,
     381,   382,     0,   383,   384,   385,   386,   387,   388,   389,
     390,     0,   391,   392,   393,  1167,   395,   396,   397,   398,
       0,   399,   400,   401,   402,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,     0,   413,   414,   415,   416,
     417,   418,  1168,   420,   421,   422,   423,   424,   425,   426,
     427,   428,   429,   430,   431,   432,     0,     0,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,     0,   443,
     444,   445,  1169,   447,     0,   448,   449,   450,   451,   452,
     453,   454,   455,   456,   457,   458,   459,   460,   461,   462,
     823,     0,     0,   464,   465,     0,   466,   467,   468,   469,
     470,   471,   472,     0,   473,  1170,  1171,     0,   476,     0,
     477,   478,   824,   480,   825,  1172,   482,   483,   826,   485,
     486,   487,   488,   489,     0,     0,   490,   491,   492,     0,
     493,   494,   495,   496,     0,   497,   498,   499,   500,   501,
     502,  1173,     0,   504,   505,   506,   507,   508,   509,   510,
     511,   512,   513,   514,     0,     0,   515,     0,     0,   516,
     517,   518,   519,   520,   521,   522,   523,   524,   525,   526,
     527,   528,   529,   530,   531,   532,   533,   534,   535,   536,
    1174,     0,     0,     0,     0,     0,     0,  1175,  1176,  1177,
       0,     0,     0,     0,  1178,     0,  2600,     0,     0,     0,
       0,     0,  1180,  1181,     0,     0,     0,     0,  1182,  1183,
     119,  1134,   843,  1135,  1136,  1137,  1138,  1139,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   120,
     121,   122,   123,   124,   125,   126,   127,   128,     0,   129,
     130,   131,     0,     0,     0,     0,     0,   132,  1140,     0,
       0,   133,   134,   135,     0,   136,   137,   138,   139,   140,
     141,   142,   143,  1141,   145,  1142,  1143,     0,   148,   149,
     150,   151,   152,   153,  1144,   812,   154,   155,   156,   157,
    1145,  1146,   160,     0,   161,   162,   163,   164,   813,     0,
     814,     0,  1147,   168,   169,   170,   171,   172,   173,   174,
     175,   176,     0,   177,   178,   179,   180,   181,   182,     0,
     183,   184,   185,   186,   187,   188,   189,   190,   191,   192,
     193,  1148,   195,   196,  1149,   198,  1150,   199,     0,   200,
     201,   202,   203,   204,   205,     0,     0,   206,   207,   208,
     209,   210,     0,     0,   211,   212,  1151,   214,   215,   216,
     217,     0,   218,   219,   220,     0,   221,   222,   223,     0,
     224,   225,   226,   227,  1152,   229,   230,   231,   232,   233,
     815,  1153,   235,     0,   236,   237,  1154,   239,     0,   240,
       0,   241,   242,     0,   243,   244,   245,   246,   247,   248,
       0,   249,   250,     0,     0,  1155,  1156,   253,   254,     0,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,     0,   267,   268,   269,   270,   271,   272,   273,
       0,   274,   275,   276,   277,   278,   279,   280,   281,  1157,
    1158,     0,  1159,     0,   285,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,     0,     0,   297,   298,
     299,   300,     0,   301,   302,   303,   304,   305,   306,   307,
     308,  1160,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323,   324,   325,   326,   327,
     328,   329,  1161,   331,  1162,   333,   334,   335,   336,   337,
    1163,   338,   339,   340,   341,  1164,   818,   343,  1165,   345,
     346,   347,     0,   348,   349,     0,     0,  1166,   351,   352,
       0,     0,   353,   354,   355,   356,   357,   358,   820,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,     0,     0,     0,     0,   373,   374,   821,   376,
     377,   378,   379,   380,   381,   382,     0,   383,   384,   385,
     386,   387,   388,   389,   390,     0,   391,   392,   393,  1167,
     395,   396,   397,   398,     0,   399,   400,   401,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,     0,
     413,   414,   415,   416,   417,   418,  1168,   420,   421,   422,
     423,   424,   425,   426,   427,   428,   429,   430,   431,   432,
       0,     0,   433,   434,   435,   436,   437,   438,   439,   440,
     441,   442,     0,   443,   444,   445,  1169,   447,     0,   448,
     449,   450,   451,   452,   453,   454,   455,   456,   457,   458,
     459,   460,   461,   462,   823,     0,     0,   464,   465,     0,
     466,   467,   468,   469,   470,   471,   472,     0,   473,  1170,
    1171,     0,   476,     0,   477,   478,   824,   480,   825,  1172,
     482,   483,   826,   485,   486,   487,   488,   489,     0,     0,
     490,   491,   492,     0,   493,   494,   495,   496,     0,   497,
     498,   499,   500,   501,   502,  1173,     0,   504,   505,   506,
     507,   508,   509,   510,   511,   512,   513,   514,     0,     0,
     515,     0,     0,   516,   517,   518,   519,   520,   521,   522,
     523,   524,   525,   526,   527,   528,   529,   530,   531,   532,
     533,   534,   535,   536,  1174,     0,     0,     0,     0,     0,
       0,  1175,  3257,  1177,     0,     0,     0,     0,  1178,     0,
    1179,     0,     0,     0,     0,     0,  1180,  1181,     0,     0,
       0,     0,  1182,  1183,   119,  1134,   843,  1135,  1136,  1137,
    1138,  1139,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   120,   121,   122,   123,   124,   125,   126,
     127,   128,     0,   129,   130,   131,     0,     0,     0,     0,
       0,   132,  1140,     0,     0,   133,   134,   135,     0,   136,
     137,   138,   139,   140,   141,   142,   143,  1141,   145,  1142,
    1143,     0,   148,   149,   150,   151,   152,   153,  1144,   812,
     154,   155,   156,   157,  1145,  1146,   160,     0,   161,   162,
     163,   164,   813,     0,   814,     0,  1147,   168,   169,   170,
     171,   172,   173,   174,   175,   176,     0,   177,   178,   179,
     180,   181,   182,     0,   183,   184,  3204,   186,   187,   188,
     189,   190,   191,   192,   193,  1148,   195,   196,  1149,   198,
    1150,   199,     0,   200,   201,   202,   203,   204,   205,     0,
       0,   206,   207,   208,   209,   210,     0,     0,   211,   212,
    1151,   214,   215,   216,   217,     0,   218,   219,   220,     0,
     221,   222,   223,     0,   224,   225,   226,   227,  1152,   229,
     230,   231,   232,   233,   815,  1153,   235,     0,   236,   237,
    1154,   239,     0,   240,     0,   241,   242,     0,   243,   244,
     245,   246,   247,   248,     0,   249,   250,     0,     0,  3205,
    1156,   253,   254,     0,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,     0,   267,   268,   269,
     270,   271,   272,   273,     0,   274,   275,   276,   277,   278,
     279,   280,   281,  1157,  1158,     0,  1159,     0,   285,   286,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
       0,     0,   297,   298,   299,   300,     0,   301,   302,   303,
     304,   305,   306,   307,   308,  1160,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,   329,  1161,   331,  1162,   333,
     334,   335,   336,   337,  1163,   338,   339,   340,   341,  1164,
     818,   343,  1165,   345,   346,   347,     0,   348,   349,     0,
       0,  1166,   351,   352,     0,     0,   353,   354,   355,   356,
     357,   358,   820,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,     0,     0,     0,     0,
     373,   374,   821,   376,   377,   378,   379,   380,   381,   382,
       0,   383,   384,   385,   386,   387,   388,   389,   390,     0,
     391,   392,   393,  1167,   395,   396,   397,   398,     0,   399,
     400,   401,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,     0,   413,   414,   415,   416,   417,  3206,
    1168,   420,   421,   422,   423,   424,   425,   426,   427,   428,
     429,   430,   431,   432,     0,     0,   433,   434,   435,   436,
     437,   438,   439,   440,   441,   442,     0,   443,   444,   445,
    1169,   447,     0,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   823,     0,
       0,   464,   465,     0,   466,   467,   468,   469,   470,   471,
     472,     0,   473,  1170,  1171,     0,   476,     0,   477,   478,
     824,   480,   825,  1172,   482,   483,   826,   485,   486,   487,
     488,   489,     0,     0,   490,   491,   492,     0,   493,   494,
     495,   496,     0,   497,   498,   499,   500,   501,   502,  1173,
       0,   504,   505,   506,   507,   508,   509,   510,   511,   512,
     513,   514,     0,     0,   515,     0,     0,   516,   517,   518,
     519,   520,   521,   522,   523,   524,   525,   526,   527,   528,
     529,   530,   531,   532,   533,   534,   535,   536,  1174,     0,
       0,     0,     0,     0,     0,  1175,  1176,  1177,     0,     0,
       0,     0,  1178,     0,  3207,     0,     0,     0,     0,     0,
    1180,  1181,     0,     0,     0,     0,  1182,  1183,   119,  1134,
     843,  1135,  1136,  1137,  1138,  1139,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   120,   121,   122,
     123,   124,   125,   126,   127,   128,     0,   129,   130,   131,
       0,     0,     0,     0,     0,   132,  1140,     0,     0,   133,
     134,   135,     0,   136,   137,   138,   139,   140,   141,   142,
    3888,  1141,   145,  1142,  1143,     0,   148,   149,   150,   151,
     152,   153,  1144,   812,   154,   155,   156,   157,  1145,  1146,
     160,     0,   161,   162,   163,   164,   813,     0,   814,     0,
    1147,   168,   169,   170,   171,   172,   173,   174,   175,   176,
       0,   177,   178,   179,   180,   181,   182,     0,   183,   184,
     185,  3889,   187,   188,   189,   190,   191,   192,   193,  1148,
     195,   196,  1149,   198,  1150,   199,     0,   200,   201,   202,
     203,   204,   205,     0,     0,   206,   207,   208,   209,   210,
       0,     0,   211,   212,  1151,   214,   215,   216,   217,     0,
     218,   219,   220,     0,   221,   222,   223,     0,   224,   225,
     226,   227,  1152,   229,   230,   231,   232,   233,   815,  1153,
     235,     0,   236,   237,  1154,   239,     0,   240,     0,   241,
     242,     0,   243,   244,   245,   246,   247,   248,     0,   249,
     250,     0,     0,  1155,  1156,   253,   254,     0,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
       0,   267,   268,   269,   270,   271,   272,   273,     0,   274,
     275,   276,   277,   278,   279,   280,   281,  1157,  1158,     0,
    1159,     0,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,     0,     0,   297,   298,   299,   300,
       0,   301,   302,   303,   304,   305,   306,   307,   308,  1160,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,   323,   324,   325,   326,   327,   328,   329,
    1161,   331,  1162,   333,   334,   335,   336,   337,  1163,   338,
     339,   340,   341,  1164,   818,   343,  1165,   345,   346,   347,
       0,   348,   349,     0,     0,  1166,   351,   352,     0,     0,
     353,   354,   355,   356,   357,   358,   820,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
       0,     0,     0,     0,   373,   374,   821,   376,   377,   378,
     379,   380,   381,   382,     0,   383,   384,   385,   386,   387,
     388,   389,   390,     0,   391,   392,   393,  1167,   395,   396,
     397,   398,     0,   399,   400,   401,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,     0,   413,   414,
     415,   416,   417,   418,  1168,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,     0,     0,
     433,   434,   435,   436,   437,   438,   439,   440,   441,   442,
       0,   443,   444,   445,  1169,   447,     0,   448,   449,   450,
     451,   452,   453,   454,   455,   456,   457,   458,   459,   460,
     461,   462,   823,     0,     0,   464,   465,     0,   466,   467,
     468,   469,   470,   471,   472,     0,   473,  1170,  1171,     0,
     476,     0,   477,   478,   824,   480,   825,  1172,   482,   483,
     826,   485,   486,  3890,   488,   489,     0,     0,   490,   491,
     492,     0,   493,   494,   495,   496,     0,   497,   498,   499,
     500,   501,   502,  1173,     0,   504,   505,   506,   507,   508,
     509,   510,   511,   512,   513,   514,     0,     0,   515,     0,
       0,   516,   517,   518,   519,   520,   521,   522,   523,   524,
     525,   526,   527,   528,   529,   530,   531,   532,   533,   534,
     535,   536,  1174,     0,     0,     0,     0,     0,     0,  1175,
    1176,  1177,     0,     0,     0,     0,  1178,     0,  1179,     0,
       0,     0,     0,     0,  1180,  1181,     0,     0,     0,     0,
    1182,  1183,   119,  1134,   843,  1135,  1136,  1137,  1138,  1139,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   120,   121,   122,   123,   124,   125,   126,   127,   128,
       0,   129,   130,   131,     0,     0,     0,     0,     0,   132,
    1140,     0,     0,   133,   134,   135,     0,   136,   137,   138,
     139,   140,   141,   142,   143,  1141,   145,  1142,  1143,     0,
     148,   149,   150,   151,   152,   153,  1144,   812,   154,   155,
     156,   157,  1145,  1146,   160,     0,   161,   162,   163,   164,
     813,     0,   814,     0,  1147,   168,   169,   170,   171,   172,
     173,   174,   175,   176,     0,   177,   178,   179,   180,   181,
     182,     0,   183,   184,   185,  3889,   187,   188,   189,   190,
     191,   192,   193,  1148,   195,   196,  1149,   198,  1150,   199,
       0,   200,   201,   202,   203,   204,   205,     0,     0,   206,
     207,   208,   209,   210,     0,     0,   211,   212,  1151,   214,
     215,   216,   217,     0,   218,   219,   220,     0,   221,   222,
     223,     0,   224,   225,   226,   227,  1152,   229,   230,   231,
     232,   233,   815,  1153,   235,     0,   236,   237,  1154,   239,
       0,   240,     0,   241,   242,     0,   243,   244,   245,   246,
     247,   248,     0,   249,   250,     0,     0,  1155,  1156,   253,
     254,     0,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,     0,   267,   268,   269,   270,   271,
     272,   273,     0,   274,   275,   276,   277,   278,   279,   280,
     281,  1157,  1158,     0,  1159,     0,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,     0,     0,
     297,   298,   299,   300,     0,   301,   302,   303,   304,   305,
     306,   307,   308,  1160,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
     326,   327,   328,   329,  1161,   331,  1162,   333,   334,   335,
     336,   337,  1163,   338,   339,   340,   341,  1164,   818,   343,
    1165,   345,   346,   347,     0,   348,   349,     0,     0,  1166,
     351,   352,     0,     0,   353,   354,   355,   356,   357,   358,
     820,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,     0,     0,     0,     0,   373,   374,
     821,   376,   377,   378,   379,   380,   381,   382,     0,   383,
     384,   385,   386,   387,   388,   389,   390,     0,   391,   392,
     393,  1167,   395,   396,   397,   398,     0,   399,   400,   401,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,     0,   413,   414,   415,   416,   417,   418,  1168,   420,
     421,   422,   423,   424,   425,   426,   427,   428,   429,   430,
     431,   432,     0,     0,   433,   434,   435,   436,   437,   438,
     439,   440,   441,   442,     0,   443,   444,   445,  1169,   447,
       0,   448,   449,   450,   451,   452,   453,   454,   455,   456,
     457,   458,   459,   460,   461,   462,   823,     0,     0,   464,
     465,     0,   466,   467,   468,   469,   470,   471,   472,     0,
     473,  1170,  1171,     0,   476,     0,   477,   478,   824,   480,
     825,  1172,   482,   483,   826,   485,   486,  3890,   488,   489,
       0,     0,   490,   491,   492,     0,   493,   494,   495,   496,
       0,   497,   498,   499,   500,   501,   502,  1173,     0,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
       0,     0,   515,     0,     0,   516,   517,   518,   519,   520,
     521,   522,   523,   524,   525,   526,   527,   528,   529,   530,
     531,   532,   533,   534,   535,   536,  1174,     0,     0,     0,
       0,     0,     0,  1175,  1176,  1177,     0,     0,     0,     0,
    1178,     0,  1179,     0,     0,     0,     0,     0,  1180,  1181,
       0,     0,     0,     0,  1182,  1183,   119,  1134,   843,  1135,
    1136,     0,  1138,  1139,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   120,   121,   122,   123,   124,
     125,   126,   127,   128,     0,   129,   130,   131,     0,     0,
       0,     0,     0,   132,  1140,     0,     0,   133,   134,   135,
       0,   136,   137,   138,   139,   140,   141,   142,   143,  1141,
     145,  1142,  1143,     0,   148,   149,   150,   151,   152,   153,
    1144,   812,   154,   155,   156,   157,  1145,  1146,   160,     0,
     161,   162,   163,   164,   813,     0,   814,     0,   167,   168,
     169,   170,   171,   172,   173,   174,   175,   176,     0,   177,
     178,   179,   180,   181,   182,     0,   183,   184,   185,   186,
     187,   188,   189,   190,   191,   192,   193,  1148,   195,   196,
    1149,   198,     0,   199,     0,   200,   201,   202,   203,   204,
     205,     0,     0,   206,   207,   208,   209,   210,     0,     0,
     211,   212,  1151,   214,   215,   216,   217,     0,   218,   219,
     220,     0,   221,   222,   223,     0,   224,   225,   226,   227,
    1152,   229,   230,   231,   232,   233,   815,  1153,   235,     0,
     236,   237,  1154,   239,     0,   240,     0,   241,   242,     0,
     243,   244,   245,   246,   247,   248,     0,   249,   250,     0,
       0,  1155,  1156,   253,   254,     0,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,     0,   267,
     268,   269,   270,   271,   272,   273,     0,   274,   275,   276,
     277,   278,   279,   280,   281,  1157,  1158,     0,  1159,     0,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,     0,     0,   297,   298,   299,   300,     0,   301,
     302,   303,   304,   305,   306,   307,   308,  1160,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,   323,   324,   325,   326,   327,   328,   329,  1161,   331,
    1162,   333,   334,   335,   336,   337,  2984,   338,   339,   340,
     341,  1164,   818,   343,  1165,   345,   346,   347,     0,   348,
     349,     0,     0,   350,   351,   352,     0,     0,   353,   354,
     355,   356,   357,   358,   820,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,     0,     0,
       0,     0,   373,   374,   821,   376,   377,   378,   379,   380,
     381,   382,     0,   383,   384,   385,   386,   387,   388,   389,
     390,     0,   391,   392,   393,  1167,   395,   396,   397,   398,
       0,   399,   400,   401,   402,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,     0,   413,   414,   415,   416,
     417,   418,  1168,   420,   421,   422,   423,   424,   425,   426,
     427,   428,   429,   430,   431,   432,     0,     0,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,     0,   443,
     444,   445,  1169,   447,     0,   448,   449,   450,   451,   452,
     453,   454,   455,   456,   457,   458,   459,   460,   461,   462,
     823,     0,     0,   464,   465,     0,   466,   467,   468,   469,
     470,   471,   472,     0,   473,  1170,  1171,     0,   476,     0,
     477,   478,   824,   480,   825,  1172,   482,   483,   826,   485,
     486,   487,   488,   489,     0,     0,   490,   491,   492,     0,
     493,   494,   495,   496,     0,   497,   498,   499,   500,   501,
     502,  1173,     0,   504,   505,   506,   507,   508,   509,   510,
     511,   512,   513,   514,     0,     0,   515,     0,     0,   516,
     517,   518,   519,   520,   521,   522,   523,   524,   525,   526,
     527,   528,   529,   530,   531,   532,   533,   534,   535,   536,
    2985,     0,     0,     0,     0,     0,     0,  2986,  2987,     0,
       0,     0,     0,     0,  1178,     0,  1179,     0,     0,     0,
       0,     0,  1180,  1181,     0,     0,     0,     0,  1182,  1183,
     119,  1134,   843,  1135,  1136,  1137,  1138,  1139,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   120,
     121,   122,   123,   124,   125,   126,   127,   128,     0,   129,
     130,   131,     0,     0,     0,     0,     0,   132,  1140,     0,
       0,   133,   134,   135,     0,   136,   137,   138,   139,   140,
     141,   142,   143,  1141,   145,  1142,  1143,     0,   148,   149,
     150,   151,   152,   153,  1144,   812,   154,   155,   156,   157,
    1145,  1146,   160,     0,   161,   162,   163,   164,   813,     0,
     814,     0,   167,   168,   169,   170,   171,   172,   173,   174,
     175,   176,     0,   177,   178,   179,   180,   181,   182,     0,
     183,   184,   185,   186,   187,   188,   189,   190,   191,   192,
     193,  1148,   195,   196,  1149,   198,     0,   199,     0,   200,
     201,   202,   203,   204,   205,     0,     0,   206,   207,   208,
     209,   210,     0,     0,   211,   212,  1151,   214,   215,   216,
     217,     0,   218,   219,   220,     0,   221,   222,   223,     0,
     224,   225,   226,   227,  1152,   229,   230,   231,   232,   233,
     815,  1153,   235,     0,   236,   237,  1154,   239,     0,   240,
       0,   241,   242,     0,   243,   244,   245,   246,   247,   248,
       0,   249,   250,     0,     0,  1155,  1156,   253,   254,     0,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,     0,   267,   268,   269,   270,   271,   272,   273,
       0,   274,   275,   276,   277,   278,   279,   280,   281,  1157,
    1158,     0,  1159,     0,   285,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,     0,     0,   297,   298,
     299,   300,     0,   301,   302,   303,   304,   305,   306,   307,
     308,  1160,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323,   324,   325,   326,   327,
     328,   329,  1161,   331,  1162,   333,   334,   335,   336,   337,
       0,   338,   339,   340,   341,  1164,   818,   343,  1165,   345,
     346,   347,     0,   348,   349,     0,     0,  1166,   351,   352,
       0,     0,   353,   354,   355,   356,   357,   358,   820,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,     0,     0,     0,     0,   373,   374,   821,   376,
     377,   378,   379,   380,   381,   382,     0,   383,   384,   385,
     386,   387,   388,   389,   390,     0,   391,   392,   393,  1167,
     395,   396,   397,   398,     0,   399,   400,   401,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,     0,
     413,   414,   415,   416,   417,   418,  1168,   420,   421,   422,
     423,   424,   425,   426,   427,   428,   429,   430,   431,   432,
       0,     0,   433,   434,   435,   436,   437,   438,   439,   440,
     441,   442,     0,   443,   444,   445,  1169,   447,     0,   448,
     449,   450,   451,   452,   453,   454,   455,   456,   457,   458,
     459,   460,   461,   462,   823,     0,     0,   464,   465,     0,
     466,   467,   468,   469,   470,   471,   472,     0,   473,  1170,
    1171,     0,   476,     0,   477,   478,   824,   480,   825,  1172,
     482,   483,   826,   485,   486,   487,   488,   489,     0,     0,
     490,   491,   492,     0,   493,   494,   495,   496,     0,   497,
     498,   499,   500,   501,   502,  1173,     0,   504,   505,   506,
     507,   508,   509,   510,   511,   512,   513,   514,     0,     0,
     515,     0,     0,   516,   517,   518,   519,   520,   521,   522,
     523,   524,   525,   526,   527,   528,   529,   530,   531,   532,
     533,   534,   535,   536,     0,     0,     0,     0,     0,     0,
       0,  1509,  1510,     0,     0,     0,     0,     0,  1178,     0,
    1179,     0,     0,     0,     0,     0,  1180,  1181,     0,     0,
       0,     0,  1182,  1183,   119,  1134,   843,  1135,  1136,  1137,
    1138,  1139,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   120,   121,   122,   123,   124,   125,   126,
     127,   128,     0,   129,   130,   131,     0,     0,     0,     0,
       0,   132,  1140,     0,     0,   133,   134,   135,     0,   136,
     137,   138,   139,   140,   141,   142, -2241,  1141,   145,  1142,
    1143,     0,   148,   149,   150,   151,   152,   153,  1144,   812,
     154,   155,   156,   157,  1145,  1146,   160,     0,   161,   162,
     163,   164,   813,     0,   814,     0,  1147,   168,   169,   170,
     171,   172,   173,   174,   175,   176,     0,   177,   178,   179,
     180,   181,   182,     0,   183,   184,   185,  3889,   187,   188,
     189,   190,   191,   192,   193,  1148,   195,   196,  1149,   198,
    1150,   199,     0,   200,   201,   202,   203,   204,   205,     0,
       0,   206,   207,   208,   209,   210,     0,     0,   211,   212,
    1151,   214,   215,   216,   217,     0,   218,   219,   220,     0,
     221,   222,   223,     0,   224,   225,   226,   227,  1152,   229,
     230,   231,   232,   233,   815,  1153,   235,     0,   236,   237,
    1154,   239,     0,   240,     0,   241,   242,     0,   243,   244,
     245,   246, -2241,   248,     0,   249,   250,     0,     0,  1155,
    1156,   253,   254,     0,   255,   256,   257,   258,   259,   260,
     261, -2241,   263,   264,   265,   266,     0,   267,   268,   269,
     270,   271,   272,   273,     0,   274,   275,   276,   277,   278,
     279,   280,   281,  1157,  1158,     0,  1159,     0,   285,     0,
       0,   288,   289,   290,   291,   292,   293,   294,   295,   296,
       0,     0,   297,   298,   299, -2241,     0,   301,   302,   303,
     304,   305,   306,   307,   308,  1160,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,   329,  1161,   331,  1162,   333,
     334,   335,   336,   337,     0,   338,   339,     0,   341,  1164,
     818,   343,  1165,   345,   346,   347,     0,   348,   349,     0,
       0,  1166,   351,   352,     0,     0,   353,   354,   355,   356,
     357,   358,   820,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,     0,     0,     0,     0,
     373,   374,   821,   376,   377,   378,   379,   380,   381,   382,
       0,   383,   384,   385,   386,   387,   388,   389,   390,     0,
     391,   392,   393,  1167,   395,   396,   397,   398,     0,   399,
     400,   401,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,     0,   413,   414,   415,   416,   417,   418,
    1168,   420,   421,   422,   423,   424,   425,   426,   427,   428,
     429,   430,   431,   432,     0,     0,   433,   434,   435,   436,
     437,   438,   439,   440,   441,   442,     0, -2241,   444,   445,
    1169,   447,     0,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   823,     0,
       0,   464,   465,     0,   466,   467,   468,   469,   470,   471,
     472,     0,   473,  1170,  1171,     0,   476,     0,   477,   478,
     824,   480,   825,  1172,   482,   483,   826,   485,   486,  3890,
     488,   489,     0,     0,   490,   491,   492,     0,   493,   494,
     495,   496,     0,   497,   498,   499,   500,   501,   502,  1173,
       0,   504,   505,   506,   507,   508,   509,   510,   511,   512,
     513,   514,     0,     0,   515,     0,     0,   516,   517,   518,
     519,   520,   521,   522,   523,   524,   525,   526,   527,   528,
     529,   530,   531,   532,   533,   534,   535,   536, -2241,     0,
       0,     0,     0,     0,     0,  1175,  1176,  1177,     0,     0,
       0,     0,  1178,     0,  1179,     0,     0,     0,     0,     0,
    1180,  1181,     0,     0,     0,     0,  1182,  1183,   119,  1134,
     843,  1135,  1136,     0,  1138,  1139,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   120,   121,   122,
     123,   124,   125,   126,   127,   128,     0,   129,   130,   131,
       0,     0,     0,     0,     0,   132,  1140,     0,     0,   133,
     134,   135,     0,   136,   137,   138,   139,   140,   141,   142,
     143,  1141,   145,  1142,  1143,     0,   148,   149,   150,   151,
     152,   153,  1144,   812,   154,   155,   156,   157,  1145,  1146,
     160,     0,   161,   162,   163,   164,   813,     0,   814,     0,
     167,   168,   169,   170,   171,   172,   173,   174,   175,   176,
       0,   177,   178,   179,   180,   181,   182,     0,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,  1148,
     195,   196,  1149,   198,     0,   199,     0,   200,   201,   202,
     203,   204,   205,     0,     0,   206,   207,   208,   209,   210,
       0,     0,   211,   212,  1151,   214,   215,   216,   217,     0,
     218,   219,   220,     0,   221,   222,   223,     0,   224,   225,
     226,   227,  1152,   229,   230,   231,   232,   233,   815,  1153,
     235,     0,   236,   237,  1154,   239,     0,   240,     0,   241,
     242,     0,   243,   244,   245,   246,   247,   248,     0,   249,
     250,     0,     0,  1155,  1156,   253,   254,     0,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
       0,   267,   268,   269,   270,   271,   272,   273,     0,   274,
     275,   276,   277,   278,   279,   280,   281,  1157,  1158,     0,
    1159,     0,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,     0,     0,   297,   298,   299,   300,
       0,   301,   302,   303,   304,   305,   306,   307,   308,  1160,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,   323,   324,   325,   326,   327,   328,   329,
    1161,   331,  1162,   333,   334,   335,   336,   337,     0,   338,
     339,   340,   341,  1164,   818,   343,  1165,   345,   346,   347,
       0,   348,   349,     0,     0,   350,   351,   352,     0,     0,
     353,   354,   355,   356,   357,   358,   820,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
       0,     0,     0,     0,   373,   374,   821,   376,   377,   378,
     379,   380,   381,   382,     0,   383,   384,   385,   386,   387,
     388,   389,   390,     0,   391,   392,   393,  1167,   395,   396,
     397,   398,     0,   399,   400,   401,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,     0,   413,   414,
     415,   416,   417,   418,  2289,  2290,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,     0,     0,
     433,   434,   435,   436,   437,   438,   439,   440,   441,   442,
       0,   443,   444,   445,  1169,   447,     0,   448,   449,   450,
     451,   452,   453,   454,   455,   456,   457,   458,   459,   460,
     461,   462,   823,     0,     0,   464,   465,     0,   466,   467,
     468,   469,   470,   471,   472,     0,   473,  1170,  1171,     0,
     476,     0,   477,   478,   824,   480,   825,  1172,   482,   483,
     826,   485,   486,   487,   488,   489,     0,     0,   490,   491,
     492,     0,   493,   494,   495,   496,     0,   497,   498,   499,
     500,   501,   502,  1173,     0,   504,   505,   506,   507,   508,
     509,   510,   511,   512,   513,   514,     0,     0,   515,     0,
       0,   516,   517,   518,   519,   520,   521,   522,   523,   524,
     525,   526,   527,   528,   529,   530,   531,   532,   533,   534,
     535,   536,     0,     0,     0,     0,     0,     0,     0,  2291,
    2292,     0,     0,     0,     0,     0,  1178,     0,  1179,     0,
       0,     0,     0,     0,  1180,  1181,     0,     0,     0,     0,
    1182,  1183,   119,  1134,   843,  1135,  1136,  1137,  1138,  1139,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   120,   121,   122,   123,   124,   125,   126,   127,   128,
       0,   129,   130,   131,     0,     0,     0,     0,     0,   132,
    1140,     0,     0,   133,   134,   135,     0,   136,   137,   138,
     139,   140,   141,   142,   143,  1141,   145,  1142,  1143,     0,
     148,   149,   150,   151,   152,   153,  1144,   812,   154,   155,
     156,   157,  1145,  1146,   160,     0,   161,   162,   163,   164,
     813,     0,   814,     0,   167,   168,   169,   170,   171,   172,
     173,   174,   175,   176,     0,   177,   178,   179,   180,   181,
     182,     0,   183,   184,   185,   186,   187,   188,   189,   190,
     191,   192,   193,  1148,   195,   196,  1149,   198,     0,   199,
       0,   200,   201,   202,   203,   204,   205,     0,     0,   206,
     207,   208,   209,   210,     0,     0,   211,   212,  1151,   214,
     215,   216,   217,     0,   218,   219,   220,     0,   221,   222,
     223,     0,   224,   225,   226,   227,  1152,   229,   230,   231,
     232,   233,   815,  1153,   235,     0,   236,   237,  1154,   239,
       0,   240,     0,   241,   242,     0,   243,   244,   245,   246,
     247,   248,     0,   249,   250,     0,     0,  1155,  1156,   253,
     254,     0,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,     0,   267,   268,   269,   270,   271,
     272,   273,     0,   274,   275,   276,   277,   278,   279,   280,
     281,  1157,  1158,     0,  1159,     0,   285,     0,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,     0,     0,
     297,   298,   299,   300,     0,   301,   302,   303,   304,   305,
     306,   307,   308,  1160,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
     326,   327,   328,   329,  1161,   331,  1162,   333,   334,   335,
     336,   337,     0,   338,   339,   340,   341,  1164,   818,   343,
    1165,   345,   346,   347,     0,   348,   349,     0,     0,  1166,
     351,   352,     0,     0,   353,   354,   355,   356,   357,   358,
     820,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,     0,     0,     0,     0,   373,   374,
     821,   376,   377,   378,   379,   380,   381,   382,     0,   383,
     384,   385,   386,   387,   388,   389,   390,     0,   391,   392,
     393,  1167,   395,   396,   397,   398,     0,   399,   400,   401,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,     0,   413,   414,   415,   416,   417,   418,  1168,   420,
     421,   422,   423,   424,   425,   426,   427,   428,   429,   430,
     431,   432,     0,     0,   433,   434,   435,   436,   437,   438,
     439,   440,   441,   442,     0,   443,   444,   445,  1169,   447,
       0,   448,   449,   450,   451,   452,   453,   454,   455,   456,
     457,   458,   459,   460,   461,   462,   823,     0,     0,   464,
     465,     0,   466,   467,   468,   469,   470,   471,   472,     0,
     473,  1170,  1171,     0,   476,     0,   477,   478,   824,   480,
     825,  1172,   482,   483,   826,   485,   486,   487,   488,   489,
       0,     0,   490,   491,   492,     0,   493,   494,   495,   496,
       0,   497,   498,   499,   500,   501,   502,  1173,     0,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
       0,     0,   515,     0,     0,   516,   517,   518,   519,   520,
     521,   522,   523,   524,   525,   526,   527,   528,   529,   530,
     531,   532,   533,   534,   535,   536,     0,     0,     0,     0,
       0,     0,     0,  1509,  1510,     0,     0,     0,     0,     0,
    1178,     0,  1179,     0,     0,     0,     0,     0,  1180,  1181,
       0,     0,     0,     0,  1182,  1183,   119,  1134,   843,  1135,
    1136,     0,  1138,  1139,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   120,   121,   122,   123,   124,
     125,   126,   127,   128,     0,   129,   130,   131,     0,     0,
       0,     0,     0,   132,  1140,     0,     0,   133,   134,   135,
       0,   136,   137,   138,   139,   140,   141,   142,   143,  1141,
     145,  1142,  1143,     0,   148,   149,   150,   151,   152,   153,
    1144,   812,   154,   155,   156,   157,  1145,  1146,   160,     0,
     161,   162,   163,   164,   813,     0,   814,     0,   167,   168,
     169,   170,   171,   172,   173,   174,   175,   176,     0,   177,
     178,   179,   180,   181,   182,     0,   183,   184,   185,   186,
     187,   188,   189,   190,   191,   192,   193,  1148,   195,   196,
    1149,   198,     0,   199,     0,   200,   201,   202,   203,   204,
     205,     0,     0,   206,   207,   208,   209,   210,     0,     0,
     211,   212,  1151,   214,   215,   216,   217,     0,   218,   219,
     220,     0,   221,   222,   223,     0,   224,   225,   226,   227,
    1152,   229,   230,   231,   232,   233,   815,  1153,   235,     0,
     236,   237,  1154,   239,     0,   240,     0,   241,   242,     0,
     243,   244,   245,   246,   247,   248,     0,   249,   250,     0,
    3224,  1155,  1156,   253,   254,     0,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,  -911,   267,
     268,   269,   270,   271,   272,   273,     0,   274,   275,   276,
     277,   278,   279,   280,   281,  1157,  1158,     0,  1159,     0,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,     0,     0,   297,   298,   299,   300,     0,   301,
     302,   303,   304,   305,   306,   307,   308,  1160,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,   323,   324,   325,   326,   327,   328,   329,  1161,   331,
    1162,   333,   334,   335,   336,   337,     0,   338,   339,   340,
     341,  1164,   818,   343,  1165,   345,   346,   347,     0,   348,
     349,     0,     0,   350,   351,   352,     0,     0,   353,   354,
     355,   356,   357,   358,   820,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,     0,     0,
       0,     0,   373,   374,   821,   376,   377,   378,   379,   380,
     381,   382,     0,   383,   384,   385,   386,   387,   388,   389,
     390,     0,   391,   392,   393,  1167,   395,   396,   397,   398,
       0,   399,   400,   401,   402,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,     0,   413,   414,   415,   416,
     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
     427,   428,   429,   430,   431,   432,     0,     0,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,     0,   443,
     444,   445,  1169,   447,     0,   448,   449,   450,   451,   452,
     453,   454,   455,   456,   457,   458,   459,   460,   461,   462,
     823,     0,     0,   464,   465,     0,   466,   467,   468,   469,
     470,   471,   472,     0,   473,  1170,  1171,     0,   476,     0,
     477,   478,   824,   480,   825,  1172,   482,   483,   826,   485,
     486,   487,   488,   489,     0,     0,   490,   491,   492,     0,
     493,   494,   495,   496,     0,   497,   498,   499,   500,   501,
     502,  1173,     0,   504,   505,   506,   507,   508,   509,   510,
     511,   512,   513,   514,     0,     0,   515,     0,     0,   516,
     517,   518,   519,   520,   521,   522,   523,   524,   525,   526,
     527,   528,   529,   530,   531,   532,   533,   534,   535,   536,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1178,     0,  2876,     0,     0,     0,
       0,     0,  1180,  1181,     0,     0,     0,     0,  1182,  1183,
     119,  1134,   843,  1135,  1136,     0,  1138,  1139,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   120,
     121,   122,   123,   124,   125,   126,   127,   128,     0,   129,
     130,   131,     0,     0,     0,     0,     0,   132,  1140,     0,
       0,   133,   134,   135,     0,   136,   137,   138,   139,   140,
     141,   142,   143,  1141,   145,  1142,  1143,     0,   148,   149,
     150,   151,   152,   153,  1144,   812,   154,   155,   156,   157,
    1145,  1146,   160,     0,   161,   162,   163,   164,   813,     0,
     814,     0,   167,   168,   169,   170,   171,   172,   173,   174,
     175,   176,     0,   177,   178,   179,   180,   181,   182,     0,
     183,   184,   185,   186,   187,   188,   189,   190,   191,   192,
     193,  1148,   195,   196,  1149,   198,     0,   199,     0,   200,
     201,   202,   203,   204,   205,     0,     0,   206,   207,   208,
     209,   210,     0,     0,   211,   212,  1151,   214,   215,   216,
     217,     0,   218,   219,   220,     0,   221,   222,   223,     0,
     224,   225,   226,   227,  1152,   229,   230,   231,   232,   233,
     815,  1153,   235,     0,   236,   237,  1154,   239,     0,   240,
       0,   241,   242,     0,   243,   244,   245,   246,   247,   248,
       0,   249,   250,     0,     0,  1155,  1156,   253,   254,     0,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,     0,   267,   268,   269,   270,   271,   272,   273,
       0,   274,   275,   276,   277,   278,   279,   280,   281,  1157,
    1158,     0,  1159,     0,   285,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,     0,     0,   297,   298,
     299,   300,     0,   301,   302,   303,   304,   305,   306,   307,
     308,  1160,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323,   324,   325,   326,   327,
     328,   329,  1161,   331,  1162,   333,   334,   335,   336,   337,
       0,   338,   339,   340,   341,  1164,   818,   343,  1165,   345,
     346,   347,     0,   348,   349,     0,     0,   350,   351,   352,
       0,     0,   353,   354,   355,   356,   357,   358,   820,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,     0,     0,     0,     0,   373,   374,   821,   376,
     377,   378,   379,   380,   381,   382,     0,   383,   384,   385,
     386,   387,   388,   389,   390,     0,   391,   392,   393,  1167,
     395,   396,   397,   398,     0,   399,   400,   401,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,     0,
     413,   414,   415,   416,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,   427,   428,   429,   430,   431,   432,
       0,     0,   433,   434,   435,   436,   437,   438,   439,   440,
     441,   442,     0,   443,   444,   445,  1169,   447,     0,   448,
     449,   450,   451,   452,   453,   454,   455,   456,   457,   458,
     459,   460,   461,   462,   823,     0,     0,   464,   465,     0,
     466,   467,   468,   469,   470,   471,   472,     0,   473,  1170,
    1171,     0,   476,     0,   477,   478,   824,   480,   825,  1172,
     482,   483,   826,   485,   486,   487,   488,   489,     0,     0,
     490,   491,   492,     0,   493,   494,   495,   496,     0,   497,
     498,   499,   500,   501,   502,  1173,     0,   504,   505,   506,
     507,   508,   509,   510,   511,   512,   513,   514,     0,     0,
     515,     0,     0,   516,   517,   518,   519,   520,   521,   522,
     523,   524,   525,   526,   527,   528,   529,   530,   531,   532,
     533,   534,   535,   536,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1178,     0,
    2876,     0,     0,     0,     0,     0,  1180,  1181,     0,     0,
       0,     0,  1182,  1183,   119,  1134,   843,  1135,  1136,     0,
    1138,  1139,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   120,   121,   122,   123,   124,   125,   126,
     127,   128,     0,   129,   130,   131,     0,     0,     0,     0,
       0,   132,  1140,     0,     0,   133,   134,   135,     0,   136,
     137,   138,   139,   140,   141,   142,   143,  1141,   145,  1142,
    1143,     0,   148,   149,   150,   151,   152,   153,  1144,   812,
     154,   155,   156,   157,  1145,  1146,   160,     0,   161,   162,
     163,   164,   813,     0,   814,     0,   167,   168,   169,   170,
     171,   172,   173,   174,   175,   176,     0,   177,   178,   179,
     180,   181,   182,     0,   183,   184,   185,   186,   187,   188,
     189,   190,   191,   192,   193,  1148,   195,   196,  1149,   198,
       0,   199,     0,   200,   201,   202,   203,   204,   205,     0,
       0,   206,   207,   208,   209,   210,     0,     0,   211,   212,
    1151,   214,   215,   216,   217,     0,   218,   219,   220,     0,
     221,   222,   223,     0,   224,   225,   226,   227,  1152,   229,
     230,   231,   232,   233,   815,  1153,   235,     0,   236,   237,
    1154,   239,     0,   240,     0,   241,   242,     0,   243,   244,
     245,   246,   247,   248,     0,   249,   250,     0,     0,  1155,
    1156,   253,   254,     0,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,     0,   267,   268,   269,
     270,   271,   272,   273,     0,   274,   275,   276,   277,   278,
     279,   280,   281,  1157,  1158,     0,  1159,     0,   285,   286,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
       0,     0,   297,   298,   299,   300,     0,   301,   302,   303,
     304,   305,   306,   307,   308,  1160,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,   329,  1161,   331,  1162,   333,
     334,   335,   336,   337,     0,   338,   339,   340,   341,  1164,
     818,   343,  1165,   345,   346,   347,     0,   348,   349,     0,
       0,   350,   351,   352,     0,     0,   353,   354,   355,   356,
     357,   358,   820,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,     0,     0,     0,     0,
     373,   374,   821,   376,   377,   378,   379,   380,   381,   382,
       0,   383,   384,   385,   386,   387,   388,   389,   390,     0,
     391,   392,   393,  1167,   395,   396,   397,   398,     0,   399,
     400,   401,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,     0,   413,   414,   415,   416,   417,   418,
    1168,   420,   421,   422,   423,   424,   425,   426,   427,   428,
     429,   430,   431,   432,     0,     0,   433,   434,   435,   436,
     437,   438,   439,   440,   441,   442,     0,   443,   444,   445,
    1169,   447,     0,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   823,     0,
       0,   464,   465,     0,   466,   467,   468,   469,   470,   471,
     472,     0,   473,  1170,  1171,     0,   476,     0,   477,   478,
     824,   480,   825,  1172,   482,   483,   826,   485,   486,   487,
     488,   489,     0,     0,   490,   491,   492,     0,   493,   494,
     495,   496,     0,   497,   498,   499,   500,   501,   502,  1173,
       0,   504,   505,   506,   507,   508,   509,   510,   511,   512,
     513,   514,     0,     0,   515,     0,     0,   516,   517,   518,
     519,   520,   521,   522,   523,   524,   525,   526,   527,   528,
     529,   530,   531,   532,   533,   534,   535,   536,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1178,     0,  1179,     0,     0,     0,     0,     0,
    1180,  1181,     0,     0,     0,     0,  1182,  1183,   119,  1134,
     843,  1135,  1136,  1137,  1138,  1139,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   120,   121,   122,
     123,   124,   125,   126,   127,   128,     0,   129,   130,   131,
       0,     0,     0,     0,     0,   132,  1140,     0,     0,   133,
     134,   135,     0,   136,   137,   138,   139,   140,   141,   142,
       0,  1141,   145,  1142,  1143,     0,   148,   149,   150,   151,
     152,   153,  1144,   812,   154,   155,   156,   157,  1145,  1146,
     160,     0,   161,   162,   163,   164,   813,     0,   814,     0,
    1147,   168,   169,   170,   171,   172,   173,   174,   175,   176,
       0,   177,   178,   179,   180,   181,   182,     0,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,  1148,
     195,   196,  1149,   198,  1150,   199,     0,   200,   201,   202,
     203,   204,   205,     0,     0,   206,   207,   208,   209,   210,
       0,     0,   211,   212,  1151,   214,   215,   216,   217,     0,
     218,   219,   220,     0,   221,     0,   223,     0,   224,   225,
     226,   227,  1152,   229,   230,   231,   232,   233,   815,  1153,
     235,     0,   236,   237,  1154,   239,     0,   240,     0,   241,
     242,     0,   243,   244,   245,   246,     0,   248,     0,   249,
     250,     0,     0,  1155,  1156,   253,   254,     0,   255,   256,
     257,   258,   259,   260,   261,     0,   263,   264,   265,   266,
       0,   267,   268,   269,   270,   271,   272,   273,     0,   274,
     275,   276,   277,   278,   279,   280,   281,  1157,  1158,     0,
    1159,     0,   285,     0,     0,   288,   289,   290,   291,   292,
     293,   294,   295,   296,     0,     0,   297,   298,   299,     0,
       0,   301,   302,   303,   304,   305,   306,   307,   308,  1160,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,   323,   324,   325,   326,   327,   328,   329,
    1161,   331,  1162,   333,   334,   335,   336,   337,     0,   338,
     339,     0,   341,  1164,   818,   343,  1165,   345,   346,   347,
       0,   348,   349,     0,     0,  1166,   351,   352,     0,     0,
     353,   354,   355,   356,   357,   358,   820,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
       0,     0,     0,     0,   373,   374,   821,   376,   377,   378,
     379,   380,   381,   382,     0,   383,   384,   385,   386,   387,
     388,   389,   390,     0,   391,   392,   393,  1167,   395,   396,
     397,   398,     0,   399,   400,   401,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,     0,   413,   414,
     415,   416,   417,   418,  1168,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,     0,     0,
     433,   434,   435,   436,   437,   438,   439,   440,   441,   442,
       0,     0,   444,   445,  1169,   447,     0,   448,   449,   450,
     451,   452,   453,   454,   455,   456,   457,   458,   459,   460,
     461,   462,   823,     0,     0,   464,   465,     0,   466,   467,
     468,   469,   470,   471,   472,     0,   473,  1170,  1171,     0,
     476,     0,   477,   478,   824,   480,   825,  1172,   482,   483,
     826,   485,   486,   487,   488,   489,     0,     0,   490,   491,
     492,     0,   493,   494,   495,   496,     0,   497,   498,   499,
     500,   501,   502,  1173,     0,   504,   505,   506,   507,   508,
     509,   510,   511,   512,   513,   514,     0,     0,   515,     0,
       0,   516,   517,   518,   519,   520,   521,   522,   523,   524,
     525,   526,   527,   528,   529,   530,   531,   532,   533,   534,
     535,   536,     0,     0,     0,     0,     0,     0,     0,  1175,
    1176,  1177,     0,   893,     0,     0,  1178,     0,  1179,     0,
       0,     0,     0,     0,  1180,  1181,     0,     0,     0,     0,
    1182,  1183,   120,   121,   122,   123,     0,   125,   126,   127,
     128,     0,   129,   130,   131,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   134,   135,     0,   136,   137,
     138,     0,   140,   141,   142,   894,   895,     0,   896,   897,
       0,   148,   149,   150,   151,   152,   153,     0,     0,   154,
     155,   156,   157,   898,   899,   160,     0,   161,   162,   163,
     164,   900,     0,     0,     0,     0,   168,   169,   170,   171,
     172,     0,   174,   175,   176,     0,   177,   178,   179,   180,
     181,     0,     0,     0,   184,   185,   186,   187,   188,   189,
     190,   191,   192,   193,   901,   195,   196,   902,   198,     0,
     199,     0,   200,   201,   202,   203,   204,   205,     0,     0,
       0,   207,   208,   209,   210,     0,     0,   211,   212,   213,
     214,   215,     0,     0,     0,   218,   219,   220,     0,   221,
     222,   223,     0,   224,   225,   226,   227,   903,   229,   230,
     231,   232,   233,   904,     0,   235,     0,   236,   237,   905,
     239,     0,   240,     0,   241,     0,     0,     0,   244,   245,
     906,     0,   248,     0,   249,     0,     0,     0,   907,   908,
       0,   254,     0,   255,   256,   257,   258,   259,   260,   261,
       0,   263,   264,   265,   266,     0,   267,   268,   269,   270,
     271,   272,   273,     0,   274,     0,   909,   277,   278,   279,
     280,   281,   910,   911,     0,   912,     0,   285,     0,     0,
     288,     0,   290,     0,   292,   293,   294,   295,   296,     0,
       0,   297,     0,   299,     0,     0,   301,   302,   303,   304,
     305,   306,   307,   308,   913,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   914,     0,   915,   333,   334,
     335,     0,   916,     0,   338,   339,     0,   341,     0,   917,
     343,   918,   345,   346,   347,     0,   348,   349,     0,     0,
     350,   351,   352,     0,     0,   353,   354,   919,     0,   357,
       0,   920,   360,   361,   362,   363,   364,   365,   366,   367,
     368,     0,     0,   371,   372,     0,     0,     0,     0,   373,
     374,   921,     0,   377,   378,   922,   380,   381,   382,     0,
     383,   384,   385,   386,   387,     0,     0,   390,     0,   391,
     392,   393,   923,   395,   396,   397,   398,     0,   399,   400,
     401,     0,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,     0,   413,   414,     0,   416,   417,   418,   924,
     420,   421,   422,   423,   424,   425,   426,   427,   428,   429,
     430,   431,   432,     0,     0,   433,   434,   435,   436,   437,
     438,   925,   440,   441,     0,     0,     0,     0,   445,   926,
     447,     0,     0,   449,   450,   451,   452,   453,   454,   455,
     456,   457,   458,   459,   460,   927,   462,   928,     0,     0,
     464,   465,     0,   466,     0,   468,   469,   470,   471,   472,
       0,   473,   929,   930,     0,     0,     0,   477,   478,   931,
     480,   932,     0,   482,   483,   933,   485,   486,   487,   488,
     489,     0,     0,   490,   491,   492,     0,   493,   494,   495,
     496,     0,   497,   498,   499,   500,   501,  1502,   935,     0,
     504,     0,   506,     0,   508,   509,   510,   511,     0,   513,
     514,     0,     0,   515,     0,     0,   516,   517,   518,   519,
     520,   521,   936,   937,   938,   939,   940,   941,   942,   943,
     944,   945,   946,   533,   534,   535,   536,     0,     0,     0,
       0,     0,     0,     0,     0,  1053,  1439,   843,     0,     0,
       0,  1138,     0,  3494,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  3495,   120,   121,   122,   123,   124,   125,
     126,   127,   128,     0,   129,   130,   131,     0,     0,     0,
     584,     0,   132,     0,     0,     0,   589,   134,   135,     0,
     136,   137,   138,   591,   140,   141,   142,   592,   593,   594,
     595,   596,     0,   148,   149,   150,   151,   152,   153,     0,
       0,   154,   155,   156,   157,   600,   601,   160,     0,   161,
     162,   163,   164,   603,     0,   605,     0,   607,   168,   169,
     170,   171,   172,   608,   174,   175,   176,     0,   177,   178,
     179,   180,   181,   182,     0,   611,   184,   185,   186,   187,
     188,   189,   190,   191,   192,   193,   613,   195,   196,   614,
     198,     0,   199,     0,   200,   201,   202,   203,   204,   205,
       0,     0,   206,   207,   208,   209,   210,     0,     0,   211,
     212,   213,   214,   215,   216,   217,     0,   218,   219,   220,
       0,   221,   222,   223,     0,   224,   225,   226,   227,   624,
     229,   230,   231,   232,   233,   625,  1440,   235,     0,   236,
     237,   628,   239,     0,   240,     0,   241,   631,     0,   633,
     244,   245,   634,   635,   248,     0,   249,   250,     0,     0,
     639,   640,   253,   254,     0,   255,   256,   257,   258,   259,
     260,   261,   642,   263,   264,   265,   266,     0,   267,   268,
     269,   270,   271,   272,   273,     0,   274,   645,   646,   277,
     278,   279,   280,   281,   647,   648,     0,   650,     0,   285,
     652,   653,   288,   654,   290,   291,   292,   293,   294,   295,
     296,     0,     0,   297,   657,   299,   658,     0,   301,   302,
     303,   304,   305,   306,   307,   308,   660,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
     323,   324,   325,   326,   327,   328,   329,   661,   662,   663,
     333,   334,   335,   336,   664,     0,   338,   339,   666,   341,
       0,   668,   343,   669,   345,   346,   347,     0,   348,   349,
    1441,     0,   350,   351,   352,     0,     0,   353,   354,   675,
     676,   357,   677,   678,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,     0,     0,     0,
       0,   373,   374,   683,   684,   377,   378,   685,   380,   381,
     382,     0,   383,   384,   385,   386,   387,   388,   389,   390,
       0,   391,   392,   393,   688,   395,   396,   397,   398,     0,
     399,   400,   401,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,     0,   413,   414,   691,   416,   417,
     418,   692,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   429,   430,   431,   432,     0,   694,   433,   434,   435,
     436,   437,   438,   695,   440,   441,   442,     0,   697,   444,
     445,   698,   447,     0,   448,   449,   450,   451,   452,   453,
     454,   455,   456,   457,   458,   459,   460,   700,   462,   701,
       0,     0,   464,   465,     0,   466,   705,   468,   469,   470,
     471,   472,     0,   473,   707,   708,     0,   476,     0,   477,
     478,   711,   480,   712,  1442,   482,   483,   714,   485,   486,
     487,   488,   489,     0,     0,   490,   491,   492,     0,   493,
     494,   495,   496,     0,   497,   498,   499,   500,   501,   719,
     720,     0,   504,   722,   506,   507,   508,   509,   510,   511,
     512,   513,   514,     0,     0,   515,     0,     0,   516,   517,
     518,   519,   520,   521,   727,   728,   729,   730,   731,   732,
     733,   734,   735,   736,   737,   533,   534,   535,   536,     0,
       0,     0,     0,     0,   545,     0,  1443,  1444,  2466,     0,
       0,     0,     0,  2467,     0,  2468,     0,     0,     0,     0,
       0,     0,  1181,   120,   121,   122,   123,   124,   125,   126,
     127,   128,     0,   129,   130,   131,     0,     0,     0,     0,
       0,   132,     0,  1092,     0,     0,   134,   135,     0,   136,
     137,   138,     0,   140,   141,   142,   143,   144,     0,   146,
     147,     0,   148,   149,   150,   151,   152,   153,     0,     0,
     154,   155,   156,   157,   158,   159,   160,     0,   161,   162,
     163,   164,   165,     0,     0,     0,   167,   168,   169,   170,
     171,   172,     0,   174,   175,   176,     0,   177,   178,   179,
     180,   181,   182,     0,     0,   184,   185,   186,   187,   188,
     189,   190,   191,   192,   193,   194,   195,   196,   197,   198,
       0,   199,     0,   200,   201,   202,   203,   204,   205,     0,
       0,   206,   207,   208,   209,   210,     0,     0,   211,   212,
     213,   214,   215,   216,   217,     0,   218,   219,   220,     0,
     221,   222,   223,  -717,   224,   225,   226,   227,   228,   229,
     230,   231,   232,   233,   234,     0,   235,  -717,   236,   237,
     238,   239,  -717,   240,     0,   241,     0,     0,     0,   244,
     245,   546,     0,   248,     0,   249,   250,     0,     0,   251,
     252,   253,   254,     0,   255,   256,   257,   258,   259,   260,
     261,     0,   263,   264,   265,   266,     0,   267,   268,   269,
     270,   271,   272,   273,     0,   274,     0,   276,   277,   278,
     279,   280,   281,   282,   283,  -717,   284,     0,   285,     0,
       0,   288,     0,   290,   291,   292,   293,   294,   295,   296,
       0,     0,   297,     0,   299,     0,  -717,   301,   302,   303,
     304,   305,   306,   307,   308,   547,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,   329,   330,     0,   332,   333,
     334,   335,   336,   337,     0,   338,   339,     0,   341,     0,
     342,   343,   344,   345,   346,   347,  -717,   348,   349,     0,
       0,   350,   351,   352,     0,  -717,   353,   354,   355,     0,
     357,     0,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,     0,     0,     0,     0,
     373,   374,   375,     0,   377,   378,   379,   380,   381,   382,
       0,   383,   384,   385,   386,   387,   388,   389,   390,     0,
     391,   392,   393,   394,   395,   396,   397,   398,     0,   399,
     400,   401,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,     0,   413,   414,     0,   416,   417,   418,
     419,   420,   421,   422,   423,   424,   425,   426,   427,   428,
     429,   430,   431,   432,     0,     0,   433,   434,   435,   436,
     437,   438,   439,   440,   441,   442,     0,     0,   444,   445,
     446,   447,     0,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   548,   462,   463,     0,
       0,   464,   465,     0,   466,     0,   468,   469,   470,   471,
     472,     0,   473,   474,   475,     0,   476,     0,   477,   478,
     479,   480,   481,     0,   482,   483,   484,   485,   486,   487,
     488,   489,  -717,     0,   490,   491,   492,     0,   493,   494,
     495,   496,     0,   497,   498,   499,   500,   501,   502,   503,
       0,   504,     0,   506,   507,   508,   509,   510,   511,   512,
     513,   514,     0,     0,   515,     0,     0,   516,   517,   518,
     519,   520,   521,   522,   523,   524,   525,   526,   527,   528,
     529,   530,   531,   532,   533,   534,   535,   536,   545,     0,
     573,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1252,     0,   120,   121,   122,
     123,   124,   125,   126,   127,   128,     0,   129,   130,   131,
       0,     0,     0,     0,     0,   132,     0,     0,     0,     0,
     134,   135,     0,   136,   137,   138,     0,   140,   141,   142,
     143,   144,     0,   146,   147,     0,   148,   149,   150,   151,
     152,   153,     0,     0,   154,   155,   156,   157,   158,   159,
     160,     0,   161,   162,   163,   164,   165,     0,     0,     0,
     167,   168,   169,   170,   171,   172,     0,   174,   175,   176,
       0,   177,   178,   179,   180,   181,   182,     0,     0,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,   196,   197,   198,     0,   199,     0,   200,   201,   202,
     203,   204,   205,     0,     0,   206,   207,   208,   209,   210,
       0,     0,   211,   212,   213,   214,   215,   216,   217,     0,
     218,   219,   220,     0,   221,   222,   223,     0,   224,   225,
     226,   227,   228,   229,   230,   231,   232,   233,   234,     0,
     235,     0,   236,   237,   238,   239,     0,   240,     0,   241,
       0,     0,     0,   244,   245,   546,     0,   248,     0,   249,
     250,     0,     0,   251,   252,   253,   254,     0,   255,   256,
     257,   258,   259,   260,   261,     0,   263,   264,   265,   266,
       0,   267,   268,   269,   270,   271,   272,   273,     0,   274,
       0,   276,   277,   278,   279,   280,   281,   282,   283,     0,
     284,     0,   285,     0,     0,   288,     0,   290,   291,   292,
     293,   294,   295,   296,     0,     0,   297,     0,   299,     0,
       0,   301,   302,   303,   304,   305,   306,   307,   308,   547,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,   323,   324,   325,   326,   327,   328,   329,
     330,     0,   332,   333,   334,   335,   336,   337,     0,   338,
     339,     0,   341,     0,   342,   343,   344,   345,   346,   347,
       0,   348,   349,     0,     0,   350,   351,   352,     0,     0,
     353,   354,   355,     0,   357,     0,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
       0,     0,     0,     0,   373,   374,   375,     0,   377,   378,
     379,   380,   381,   382,     0,   383,   384,   385,   386,   387,
     388,   389,   390,     0,   391,   392,   393,   394,   395,   396,
     397,   398,     0,   399,   400,   401,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,     0,   413,   414,
       0,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,     0,     0,
     433,   434,   435,   436,   437,   438,   439,   440,   441,   442,
       0,     0,   444,   445,   446,   447,     0,   448,   449,   450,
     451,   452,   453,   454,   455,   456,   457,   458,   459,   460,
     548,   462,   463,     0,     0,   464,   465,     0,   466,     0,
     468,   469,   470,   471,   472,     0,   473,   474,   475,     0,
     476,     0,   477,   478,   479,   480,   481,     0,   482,   483,
     484,   485,   486,   487,   488,   489,     0,     0,   490,   491,
     492,     0,   493,   494,   495,   496,     0,   497,   498,   499,
     500,   501,   502,   503,     0,   504,     0,   506,   507,   508,
     509,   510,   511,   512,   513,   514,     0,     0,   515,     0,
       0,   516,   517,   518,   519,   520,   521,   522,   523,   524,
     525,   526,   527,   528,   529,   530,   531,   532,   533,   534,
     535,   536,   119,     0,   573,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  2553,  3470,
       0,   120,   121,   122,   123,   124,   125,   126,   127,   128,
       0,   129,   130,   131,     0,     0,     0,     0,     0,   132,
       0,     0,     0,   133,   134,   135,     0,   136,   137,   138,
     139,   140,   141,   142,   143,   144,   145,   146,   147,     0,
     148,   149,   150,   151,   152,   153,     0,   812,   154,   155,
     156,   157,   158,   159,   160,     0,   161,   162,   163,   164,
     813,     0,   814,     0,   167,   168,   169,   170,   171,   172,
     173,   174,   175,   176,     0,   177,   178,   179,   180,   181,
     182,     0,   183,   184,   185,   186,   187,   188,   189,   190,
     191,   192,   193,   194,   195,   196,   197,   198,     0,   199,
       0,   200,   201,   202,   203,   204,   205,    14,    15,   206,
     207,   208,   209,   210,     0,     0,   211,   212,   213,   214,
     215,   216,   217,     0,   218,   219,   220,     0,   221,   222,
     223,     0,   224,   225,   226,   227,   228,   229,   230,   231,
     232,   233,   815,     0,   235,     0,   236,   237,   238,   239,
       0,   240,     0,   241,   242,    23,   243,   244,   245,   246,
     247,   248,     0,   249,   250,   816,     0,   251,   252,   253,
     254,     0,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,     0,   267,   268,   269,   270,   271,
     272,   273,     0,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,     0,   284,     0,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   817,     0,
     297,   298,   299,   300,     0,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
     326,   327,   328,   329,   330,   331,   332,   333,   334,   335,
     336,   337,     0,   338,   339,   340,   341,     0,   818,   343,
     344,   345,   346,   347,     0,   348,   349,     0,   819,   350,
     351,   352,     0,     0,   353,   354,   355,   356,   357,   358,
     820,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,    27,    28,    29,     0,   373,   374,
     821,   376,   377,   378,   379,   380,   381,   382,     0,   383,
     384,   385,   386,   387,   388,   389,   390,     0,   391,   392,
     393,   394,   395,   396,   397,   398,     0,   399,   400,   401,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,     0,   413,   414,   415,   416,   417,   418,   419,   822,
     421,   422,   423,   424,   425,   426,   427,   428,   429,   430,
     431,   432,    34,     0,   433,   434,   435,   436,   437,   438,
     439,   440,   441,   442,    36,   443,   444,   445,   446,   447,
       0,   448,   449,   450,   451,   452,   453,   454,   455,   456,
     457,   458,   459,   460,   461,   462,   823,    38,     0,   464,
     465,    39,   466,   467,   468,   469,   470,   471,   472,     0,
     473,   474,   475,     0,   476,     0,   477,   478,   824,   480,
     825,     0,   482,   483,   826,   485,   486,   487,   488,   489,
       0,     0,   490,   491,   492,    41,   493,   494,   495,   496,
       0,   497,   498,   499,   500,   501,   827,   503,     0,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
       0,     0,   515,     0,    45,   516,   517,   518,   519,   520,
     521,   522,   523,   524,   525,   526,   527,   528,   529,   530,
     531,   532,   533,   534,   535,   536,  1053,     0,    46,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   828,     0,     0,   120,   121,   122,   123,   124,
     125,   126,   127,   128,     0,   129,   130,   131,     3,     4,
       0,   584,     0,   132,     0,     0,     0,   589,   134,   135,
       0,   136,   137,   138,   591,   140,   141,   142,   592,   593,
     594,   595,   596,     0,   148,   149,   150,   151,   152,   153,
       0,     0,   154,   155,   156,   157,   600,   601,   160,     0,
     161,   162,   163,   164,   603,     0,   605,     0,   607,   168,
     169,   170,   171,   172,   608,   174,   175,   176,     0,   177,
     178,   179,   180,   181,   182,     0,   611,   184,   185,   186,
     187,   188,   189,   190,   191,   192,   193,   613,   195,   196,
     614,   198,     0,   199,     0,   200,   201,   202,   203,   204,
     205,    14,    15,   206,   207,   208,   209,   210,     0,     0,
     211,   212,   213,   214,   215,   216,   217,     0,   218,   219,
     220,     0,   221,   222,   223,     0,   224,   225,   226,   227,
     624,   229,   230,   231,   232,   233,   625,     0,   235,     0,
     236,   237,   628,   239,     0,   240,     0,   241,   631,    23,
     633,   244,   245,   634,   635,   248,     0,   249,   250,     0,
       0,   639,   640,   253,   254,     0,   255,   256,   257,   258,
     259,   260,   261,   642,   263,   264,   265,   266,     0,   267,
     268,   269,   270,   271,   272,   273,     0,   274,   645,   646,
     277,   278,   279,   280,   281,   647,   648,     0,   650,     0,
     285,   652,   653,   288,   654,   290,   291,   292,   293,   294,
     295,   296,     0,     0,   297,   657,   299,   658,     0,   301,
     302,   303,   304,   305,   306,   307,   308,   660,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,   323,   324,   325,   326,   327,   328,   329,   661,   662,
     663,   333,   334,   335,   336,   664,     0,   338,   339,   666,
     341,     0,   668,   343,   669,   345,   346,   347,     0,   348,
     349,     0,     0,   350,   351,   352,     0,     0,   353,   354,
     675,   676,   357,   677,   678,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,    27,    28,
      29,     0,   373,   374,   683,   684,   377,   378,   685,   380,
     381,   382,     0,   383,   384,   385,   386,   387,   388,   389,
     390,     0,   391,   392,   393,   688,   395,   396,   397,   398,
       0,   399,   400,   401,   402,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,     0,   413,   414,   691,   416,
     417,   418,   692,   420,   421,   422,   423,   424,   425,   426,
     427,   428,   429,   430,   431,   432,    34,   694,   433,   434,
     435,   436,   437,   438,   695,   440,   441,   442,    36,   697,
     444,   445,   698,   447,     0,   448,   449,   450,   451,   452,
     453,   454,   455,   456,   457,   458,   459,   460,   700,   462,
     701,    38,     0,   464,   465,    39,   466,   705,   468,   469,
     470,   471,   472,     0,   473,   707,   708,     0,   476,     0,
     477,   478,   711,   480,   712,     0,   482,   483,   714,   485,
     486,   487,   488,   489,     0,     0,   490,   491,   492,    41,
     493,   494,   495,   496,     0,   497,   498,   499,   500,   501,
    1054,   720,     0,   504,   722,   506,   507,   508,   509,   510,
     511,   512,   513,   514,     0,     0,   515,     0,    45,   516,
     517,   518,   519,   520,   521,   727,   728,   729,   730,   731,
     732,   733,   734,   735,   736,   737,   533,   534,   535,   536,
       0,   119,    46,   573,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   874,     0,     0,     0,
     120,   121,   122,   123,   124,   125,   126,   127,   128,     0,
     129,   130,   131,     0,     0,     0,     0,     0,   132,     0,
       0,     0,   133,   134,   135,     0,   136,   137,   138,   139,
     140,   141,   142,   143,   144,   145,   146,   147,     0,   148,
     149,   150,   151,   152,   153,     0,   812,   154,   155,   156,
     157,   158,   159,   160,     0,   161,   162,   163,   164,   813,
       0,   814,     0,   167,   168,   169,   170,   171,   172,   173,
     174,   175,   176,     0,   177,   178,   179,   180,   181,   182,
       0,   183,   184,   185,   186,   187,   188,   189,   190,   191,
     192,   193,   194,   195,   196,   197,   198,     0,   199,     0,
     200,   201,   202,   203,   204,   205,     0,     0,   206,   207,
     208,   209,   210,     0,     0,   211,   212,   213,   214,   215,
     216,   217,     0,   218,   219,   220,     0,   221,   222,   223,
       0,   224,   225,   226,   227,   228,   229,   230,   231,   232,
     233,   815,     0,   235,     0,   236,   237,   238,   239,     0,
     240,     0,   241,   242,     0,   243,   244,   245,   246,   247,
     248,     0,   249,   250,   816,     0,   251,   252,   253,   254,
       0,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,     0,   267,   268,   269,   270,   271,   272,
     273,     0,   274,   275,   276,   277,   278,   279,   280,   281,
     282,   283,     0,   284,     0,   285,   286,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   817,     0,   297,
     298,   299,   300,     0,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,   323,   324,   325,   326,
     327,   328,   329,   330,   331,   332,   333,   334,   335,   336,
     337,     0,   338,   339,   340,   341,     0,   818,   343,   344,
     345,   346,   347,     0,   348,   349,     0,   819,   350,   351,
     352,     0,     0,   353,   354,   355,   356,   357,   358,   820,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
     370,   371,   372,     0,     0,     0,     0,   373,   374,   821,
     376,   377,   378,   379,   380,   381,   382,     0,   383,   384,
     385,   386,   387,   388,   389,   390,     0,   391,   392,   393,
     394,   395,   396,   397,   398,     0,   399,   400,   401,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
       0,   413,   414,   415,   416,   417,   418,   419,   822,   421,
     422,   423,   424,   425,   426,   427,   428,   429,   430,   431,
     432,     0,     0,   433,   434,   435,   436,   437,   438,   439,
     440,   441,   442,     0,   443,   444,   445,   446,   447,     0,
     448,   449,   450,   451,   452,   453,   454,   455,   456,   457,
     458,   459,   460,   461,   462,   823,     0,     0,   464,   465,
       0,   466,   467,   468,   469,   470,   471,   472,     0,   473,
     474,   475,     0,   476,     0,   477,   478,   824,   480,   825,
       0,   482,   483,   826,   485,   486,   487,   488,   489,     0,
       0,   490,   491,   492,     0,   493,   494,   495,   496,     0,
     497,   498,   499,   500,   501,   827,   503,     0,   504,   505,
     506,   507,   508,   509,   510,   511,   512,   513,   514,     0,
       0,   515,     0,     0,   516,   517,   518,   519,   520,   521,
     522,   523,   524,   525,   526,   527,   528,   529,   530,   531,
     532,   533,   534,   535,   536,   119,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   828,     0,     0,   120,   121,   122,   123,   124,   125,
     126,   127,   128,     0,   129,   130,   131,     0,     0,     0,
       0,     0,   132,     0,     0,     0,   133,   134,   135,     0,
     136,   137,   138,   139,   140,   141,   142,   143,   144,   145,
     146,   147,     0,   148,   149,   150,   151,   152,   153,     0,
     812,   154,   155,   156,   157,   158,   159,   160,     0,   161,
     162,   163,   164,   813,     0,   814,     0,   167,   168,   169,
     170,   171,   172,   173,   174,   175,   176,     0,   177,   178,
     179,   180,   181,   182,     0,   183,   184,   185,   186,   187,
     188,   189,   190,   191,   192,   193,   194,   195,   196,   197,
     198,     0,   199,     0,   200,   201,   202,   203,   204,   205,
       0,     0,   206,   207,   208,   209,   210,     0,     0,   211,
     212,   213,   214,   215,   216,   217,     0,   218,   219,   220,
       0,   221,   222,   223,     0,   224,   225,   226,   227,   228,
     229,   230,   231,   232,   233,   815,     0,   235,     0,   236,
     237,   238,   239,     0,   240,     0,   241,   242,     0,   243,
     244,   245,   246,   247,   248,     0,   249,   250,     0,     0,
     251,   252,   253,   254,     0,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,     0,   267,   268,
     269,   270,   271,   272,   273,     0,   274,   275,   276,   277,
     278,   279,   280,   281,   282,   283,     0,   284,     0,   285,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,     0,     0,   297,   298,   299,   300,     0,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
     323,   324,   325,   326,   327,   328,   329,   330,   331,   332,
     333,   334,   335,   336,   337,     0,   338,   339,   340,   341,
       0,   818,   343,   344,   345,   346,   347,     0,   348,   349,
       0,     0,   350,   351,   352,     0,     0,   353,   354,   355,
     356,   357,   358,   820,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,     0,     0,     0,
       0,   373,   374,   821,   376,   377,   378,   379,   380,   381,
     382,     0,   383,   384,   385,   386,   387,   388,   389,   390,
       0,   391,   392,   393,   394,   395,   396,   397,   398,     0,
     399,   400,   401,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,     0,   413,   414,   415,   416,   417,
     418,   419,   822,   421,   422,   423,   424,   425,   426,   427,
     428,   429,   430,   431,   432,     0,     0,   433,   434,   435,
     436,   437,   438,   439,   440,   441,   442,     0,   443,   444,
     445,   446,   447,     0,   448,   449,   450,   451,   452,   453,
     454,   455,   456,   457,   458,   459,   460,   461,   462,   823,
       0,     0,   464,   465,     0,   466,   467,   468,   469,   470,
     471,   472,     0,   473,   474,   475,     0,   476,     0,   477,
     478,   824,   480,   825,     0,   482,   483,   826,   485,   486,
     487,   488,   489,     0,     0,   490,   491,   492,     0,   493,
     494,   495,   496,     0,   497,   498,   499,   500,   501,   502,
     503,     0,   504,   505,   506,   507,   508,   509,   510,   511,
     512,   513,   514,     0,     0,   515,     0,     0,   516,   517,
     518,   519,   520,   521,   522,   523,   524,   525,   526,   527,
     528,   529,   530,   531,   532,   533,   534,   535,   536,   119,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   874,     0,     0,   120,   121,
     122,   123,   124,   125,   126,   127,   128,     0,   129,   130,
     131,     0,     0,     0,     0,     0,   132,     0,     0,     0,
     133,   134,   135,     0,   136,   137,   138,   139,   140,   141,
     142,   143,   144,   145,   146,   147,     0,   148,   149,   150,
     151,   152,   153,     0,   812,   154,   155,   156,   157,   158,
     159,   160,     0,   161,   162,   163,   164,   813,     0,   814,
       0,   167,   168,   169,   170,   171,   172,   173,   174,   175,
     176,     0,   177,   178,   179,   180,   181,   182,     0,   183,
     184,   185,   186,   187,   188,   189,   190,   191,   192,   193,
     194,   195,   196,   197,   198,     0,   199,     0,   200,   201,
     202,   203,   204,   205,     0,     0,   206,   207,   208,   209,
     210,     0,     0,   211,   212,   213,   214,   215,   216,   217,
       0,   218,   219,   220,     0,   221,   222,   223,     0,   224,
     225,   226,   227,   228,   229,   230,   231,   232,   233,   815,
       0,   235,     0,   236,   237,   238,   239,     0,   240,     0,
     241,   242,     0,   243,   244,   245,   246,   247,   248,     0,
     249,   250,     0,     0,   251,   252,   253,   254,     0,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,     0,   267,   268,   269,   270,   271,   272,   273,     0,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
       0,   284,     0,   285,   286,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,     0,     0,   297,   298,   299,
     300,     0,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     329,   330,   331,   332,   333,   334,   335,   336,   337,     0,
     338,   339,   340,   341,     0,   818,   343,   344,   345,   346,
     347,     0,   348,   349,     0,     0,   350,   351,   352,     0,
       0,   353,   354,   355,   356,   357,   358,   820,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,     0,     0,     0,     0,   373,   374,   821,   376,   377,
     378,   379,   380,   381,   382,     0,   383,   384,   385,   386,
     387,   388,   389,   390,     0,   391,   392,   393,   394,   395,
     396,   397,   398,     0,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,     0,   413,
     414,   415,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,   428,   429,   430,   431,   432,     0,
       0,   433,   434,   435,   436,   437,   438,   439,   440,   441,
     442,     0,   443,   444,   445,   446,   447,     0,   448,   449,
     450,   451,   452,   453,   454,   455,   456,   457,   458,   459,
     460,   461,   462,   823,     0,     0,   464,   465,     0,   466,
     467,   468,   469,   470,   471,   472,     0,   473,   474,   475,
       0,   476,     0,   477,   478,   824,   480,   825,     0,   482,
     483,   826,   485,   486,   487,   488,   489,     0,     0,   490,
     491,   492,     0,   493,   494,   495,   496,     0,   497,   498,
     499,   500,   501,   502,   503,     0,   504,   505,   506,   507,
     508,   509,   510,   511,   512,   513,   514,     0,     0,   515,
       0,     0,   516,   517,   518,   519,   520,   521,   522,   523,
     524,   525,   526,   527,   528,   529,   530,   531,   532,   533,
     534,   535,   536,   545,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  3625,
       0,     0,   120,   121,   122,   123,   124,   125,   126,   127,
     128,     0,   129,   130,   131,     0,     0,     0,     0,     0,
     132,     0,     0,     0,     0,   134,   135,     0,   136,   137,
     138,     0,   140,   141,   142,   143,   144,     0,   146,   147,
       0,   148,   149,   150,   151,   152,   153,     0,     0,   154,
     155,   156,   157,   158,   159,   160,     0,   161,   162,   163,
     164,   165,     0,     0,     0,   167,   168,   169,   170,   171,
     172,     0,   174,   175,   176,     0,   177,   178,   179,   180,
     181,   182,     0,     0,   184,   185,   186,   187,   188,   189,
     190,   191,   192,   193,   194,   195,   196,   197,   198,     0,
     199,     0,   200,   201,   202,   203,   204,   205,    14,    15,
     206,   207,   208,   209,   210,     0,     0,   211,   212,   213,
     214,   215,   216,   217,     0,   218,   219,   220,     0,   221,
     222,   223,     0,   224,   225,   226,   227,   228,   229,   230,
     231,   232,   233,   234,     0,   235,     0,   236,   237,   238,
     239,     0,   240,     0,   241,     0,    23,     0,   244,   245,
     546,     0,   248,     0,   249,   250,     0,     0,   251,   252,
     253,   254,     0,   255,   256,   257,   258,   259,   260,   261,
       0,   263,   264,   265,   266,     0,   267,   268,   269,   270,
     271,   272,   273,     0,   274,     0,   276,   277,   278,   279,
     280,   281,   282,   283,     0,   284,     0,   285,     0,     0,
     288,     0,   290,   291,   292,   293,   294,   295,   296,     0,
       0,   297,     0,   299,     0,     0,   301,   302,   303,   304,
     305,   306,   307,   308,   547,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,     0,   332,   333,   334,
     335,   336,   337,     0,   338,   339,     0,   341,     0,   342,
     343,   344,   345,   346,   347,     0,   348,   349,     0,     0,
     350,   351,   352,     0,     0,   353,   354,   355,     0,   357,
       0,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,   371,   372,    27,    28,    29,     0,   373,
     374,   375,     0,   377,   378,   379,   380,   381,   382,     0,
     383,   384,   385,   386,   387,   388,   389,   390,     0,   391,
     392,   393,   394,   395,   396,   397,   398,     0,   399,   400,
     401,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,     0,   413,   414,     0,   416,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,   428,   429,
     430,   431,   432,    34,     0,   433,   434,   435,   436,   437,
     438,   439,   440,   441,   442,    36,     0,   444,   445,   446,
     447,     0,   448,   449,   450,   451,   452,   453,   454,   455,
     456,   457,   458,   459,   460,   548,   462,   463,    38,     0,
     464,   465,    39,   466,     0,   468,   469,   470,   471,   472,
       0,   473,   474,   475,     0,   476,     0,   477,   478,   479,
     480,   481,     0,   482,   483,   484,   485,   486,   487,   488,
     489,     0,     0,   490,   491,   492,    41,   493,   494,   495,
     496,     0,   497,   498,   499,   500,   501,   827,   503,     0,
     504,     0,   506,   507,   508,   509,   510,   511,   512,   513,
     514,     0,     0,   515,     0,    45,   516,   517,   518,   519,
     520,   521,   522,   523,   524,   525,   526,   527,   528,   529,
     530,   531,   532,   533,   534,   535,   536,   545,     0,    46,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   874,     0,     0,   120,   121,   122,   123,
     124,   125,   126,   127,   128,   972,   129,   130,   131,     0,
       0,     0,     0,     0,   132,     0,     0,     0,     0,   134,
     135,     0,   136,   137,   138,     0,   140,   141,   142,   143,
     144,     0,   146,   147,     0,   148,   149,   150,   151,   152,
     153,     0,     0,   154,   155,   156,   157,   158,   159,   160,
       0,   161,   162,   163,   164,   165,     0,     0,     0,   167,
     168,   169,   170,   171,   172,     0,   174,   175,   176,     0,
     177,   178,   179,   180,   181,   182,     0,     0,   184,   185,
     186,   187,   188,   189,   190,   191,   192,   193,   194,   195,
     196,   197,   198,     0,   199,     0,   200,   201,   202,   203,
     204,   205,     0,     0,   206,   207,   208,   209,   210,     0,
       0,   211,   212,   213,   214,   215,   216,   217,     0,   218,
     219,   220,     0,   221,   222,   223,     0,   224,   225,   226,
     227,   228,   229,   230,   231,   232,   233,   234,     0,   235,
       0,   236,   237,   238,   239,     0,   240,     0,   241,     0,
      23,     0,   244,   245,   546,     0,   248,     0,   249,   250,
       0,     0,   251,   252,   253,   254,     0,   255,   256,   257,
     258,   259,   260,   261,     0,   263,   264,   265,   266,     0,
     267,   268,   269,   270,   271,   272,   273,     0,   274,     0,
     276,   277,   278,   279,   280,   281,   282,   283,     0,   284,
       0,   285,     0,     0,   288,     0,   290,   291,   292,   293,
     294,   295,   296,     0,     0,   297,     0,   299,     0,     0,
     301,   302,   303,   304,   305,   306,   307,   308,   547,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,   322,   323,   324,   325,   326,   327,   328,   329,   330,
       0,   332,   333,   334,   335,   336,   337,     0,   338,   339,
       0,   341,     0,   342,   343,   344,   345,   346,   347,     0,
     348,   349,     0,     0,   350,   351,   352,     0,     0,   353,
     354,   355,     0,   357,     0,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,   371,   372,    27,
      28,    29,     0,   373,   374,   375,     0,   377,   378,   379,
     380,   381,   382,     0,   383,   384,   385,   386,   387,   388,
     973,   390,     0,   391,   392,   393,   394,   395,   396,   397,
     398,     0,   399,   400,   401,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,     0,   413,   414,     0,
     416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,   428,   429,   430,   431,   432,    34,     0,   433,
     434,   435,   436,   437,   438,   439,   440,   441,   442,     0,
       0,   444,   445,   446,   447,     0,   448,   449,   450,   451,
     452,   453,   454,   455,   456,   457,   458,   459,   460,   548,
     462,   463,     0,     0,   464,   465,    39,   466,     0,   468,
     469,   470,   471,   472,     0,   473,   974,   475,     0,   476,
       0,   975,   478,   479,   480,   481,     0,   482,   483,   484,
     485,   486,   487,   488,   489,     0,     0,   490,   491,   492,
      41,   493,   494,   495,   496,     0,   497,   498,   499,   500,
     501,   827,   503,     0,   504,     0,   506,   507,   508,   509,
     510,   511,   512,   513,   514,     0,     0,   515,     0,    45,
     516,   517,   518,   519,   520,   521,   522,   523,   524,   525,
     526,   527,   528,   529,   530,   531,   532,   533,   534,   535,
     536,   545,     0,    46,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   874,     0,     0,
     120,   121,   122,   123,   124,   125,   126,   127,   128,     0,
     129,   130,   131,     0,     0,     0,     0,     0,   132,     0,
       0,     0,     0,   134,   135,     0,   136,   137,   138,     0,
     140,   141,   142,   143,   144,     0,   146,   147,     0,   148,
     149,   150,   151,   152,   153,     0,     0,   154,   155,   156,
     157,   158,   159,   160,     0,   161,   162,   163,   164,   165,
       0,     0,     0,   167,   168,   169,   170,   171,   172,     0,
     174,   175,   176,     0,   177,   178,   179,   180,   181,   182,
       0,     0,   184,   185,   186,   187,   188,   189,   190,   191,
     192,   193,   194,   195,   196,   197,   198,     0,   199,     0,
     200,   201,   202,   203,   204,   205,     0,     0,   206,   207,
     208,   209,   210,     0,     0,   211,   212,   213,   214,   215,
     216,   217,     0,   218,   219,   220,     0,   221,   222,   223,
       0,   224,   225,   226,   227,   228,   229,   230,   231,   232,
     233,   234,     0,   235,     0,   236,   237,   238,   239,     0,
     240,     0,   241,     0,    23,     0,   244,   245,   546,     0,
     248,     0,   249,   250,     0,     0,   251,   252,   253,   254,
       0,   255,   256,   257,   258,   259,   260,   261,     0,   263,
     264,   265,   266,     0,   267,   268,   269,   270,   271,   272,
     273,     0,   274,     0,   276,   277,   278,   279,   280,   281,
     282,   283,     0,   284,     0,   285,     0,     0,   288,     0,
     290,   291,   292,   293,   294,   295,   296,     0,     0,   297,
       0,   299,     0,     0,   301,   302,   303,   304,   305,   306,
     307,   308,   547,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,   323,   324,   325,   326,
     327,   328,   329,   330,     0,   332,   333,   334,   335,   336,
     337,     0,   338,   339,     0,   341,     0,   342,   343,   344,
     345,   346,   347,     0,   348,   349,     0,     0,   350,   351,
     352,     0,     0,   353,   354,   355,     0,   357,     0,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
     370,   371,   372,    27,    28,    29,     0,   373,   374,   375,
       0,   377,   378,   379,   380,   381,   382,     0,   383,   384,
     385,   386,   387,   388,   389,   390,     0,   391,   392,   393,
     394,   395,   396,   397,   398,     0,   399,   400,   401,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
       0,   413,   414,     0,   416,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,   428,   429,   430,   431,
     432,    34,     0,   433,   434,   435,   436,   437,   438,   439,
     440,   441,   442,     0,     0,   444,   445,   446,   447,     0,
     448,   449,   450,   451,   452,   453,   454,   455,   456,   457,
     458,   459,   460,   548,   462,   463,     0,     0,   464,   465,
      39,   466,     0,   468,   469,   470,   471,   472,     0,   473,
     474,   475,     0,   476,     0,   477,   478,   479,   480,   481,
       0,   482,   483,   484,   485,   486,   487,   488,   489,     0,
       0,   490,   491,   492,    41,   493,   494,   495,   496,     0,
     497,   498,   499,   500,   501,   827,   503,     0,   504,     0,
     506,   507,   508,   509,   510,   511,   512,   513,   514,     0,
       0,   515,     0,    45,   516,   517,   518,   519,   520,   521,
     522,   523,   524,   525,   526,   527,   528,   529,   530,   531,
     532,   533,   534,   535,   536,     0,   545,    46,   573,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   874,     0,     0,     0,   120,   121,   122,   123,   124,
     125,   126,   127,   128,     0,   129,   130,   131,     0,     0,
       0,     0,     0,   132,     0,     0,     0,     0,   134,   135,
       0,   136,   137,   138,     0,   140,   141,   142,   143,   144,
       0,   146,   147,     0,   148,   149,   150,   151,   152,   153,
       0,     0,   154,   155,   156,   157,   158,   159,   160,     0,
     161,   162,   163,   164,   165,     0,     0,     0,   167,   168,
     169,   170,   171,   172,     0,   174,   175,   176,     0,   177,
     178,   179,   180,   181,   182,     0,     0,   184,   185,   186,
     187,   188,   189,   190,   191,   192,   193,   194,   195,   196,
     197,   198,     0,   199,     0,   200,   201,   202,   203,   204,
     205,     0,     0,   206,   207,   208,   209,   210,     0,     0,
     211,   212,   213,   214,   215,   216,   217,     0,   218,   219,
     220,     0,   221,   222,   223,     0,   224,   225,   226,   227,
     228,   229,   230,   231,   232,   233,   234,     0,   235,     0,
     236,   237,   238,   239,     0,   240,     0,   241,     0,     0,
       0,   244,   245,   546,     0,   248,     0,   249,   250,     0,
       0,   251,   252,   253,   254,     0,   255,   256,   257,   258,
     259,   260,   261,     0,   263,   264,   265,   266,     0,   267,
     268,   269,   270,   271,   272,   273,     0,   274,     0,   276,
     277,   278,   279,   280,   281,   282,   283,     0,   284,     0,
     285,     0,     0,   288,     0,   290,   291,   292,   293,   294,
     295,   296,     0,     0,   297,     0,   299,     0,     0,   301,
     302,   303,   304,   305,   306,   307,   308,   547,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,   323,   324,   325,   326,   327,   328,   329,   330,     0,
     332,   333,   334,   335,   336,   337,     0,   338,   339,     0,
     341,     0,   342,   343,   344,   345,   346,   347,     0,   348,
     349,     0,     0,   350,   351,   352,     0,     0,   353,   354,
     355,     0,   357,     0,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,     0,     0,
       0,     0,   373,   374,   375,     0,   377,   378,   379,   380,
     381,   382,     0,   383,   384,   385,   386,   387,   388,   389,
     390,     0,   391,   392,   393,   394,   395,   396,   397,   398,
       0,   399,   400,   401,   402,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,     0,   413,   414,     0,   416,
     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
     427,   428,   429,   430,   431,   432,     0,     0,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,     0,     0,
     444,   445,   446,   447,     0,   448,   449,   450,   451,   452,
     453,   454,   455,   456,   457,   458,   459,   460,   548,   462,
     463,     0,     0,   464,   465,     0,   466,     0,   468,   469,
     470,   471,   472,     0,   473,   474,   475,     0,   476,     0,
     477,   478,   479,   480,   481,     0,   482,   483,   484,   485,
     486,   487,   488,   489,     0,     0,   490,   491,   492,     0,
     493,   494,   495,   496,     0,   497,   498,   499,   500,   501,
     502,   503,     0,   504,     0,   506,   507,   508,   509,   510,
     511,   512,   513,   514,     0,     0,   515,     0,     0,   516,
     517,   518,   519,   520,   521,   522,   523,   524,   525,   526,
     527,   528,   529,   530,   531,   532,   533,   534,   535,   536,
     545,     0,   573,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1077,     0,     0,   120,
     121,   122,   123,   124,   125,   126,   127,   128,     0,   129,
     130,   131,     0,     0,     0,     0,     0,   132,     0,     0,
       0,     0,   134,   135,     0,   136,   137,   138,     0,   140,
     141,   142,   143,   144,     0,   146,   147,     0,   148,   149,
     150,   151,   152,   153,     0,     0,   154,   155,   156,   157,
     158,   159,   160,     0,   161,   162,   163,   164,   165,     0,
       0,     0,   167,   168,   169,   170,   171,   172,     0,   174,
     175,   176,     0,   177,   178,   179,   180,   181,   182,     0,
       0,   184,   185,   186,   187,   188,   189,   190,   191,   192,
     193,   194,   195,   196,   197,   198,     0,   199,     0,   200,
     201,   202,   203,   204,   205,     0,     0,   206,   207,   208,
     209,   210,     0,     0,   211,   212,   213,   214,   215,   216,
     217,     0,   218,   219,   220,     0,   221,   222,   223,     0,
     224,   225,   226,   227,   228,   229,   230,   231,   232,   233,
     234,     0,   235,     0,   236,   237,   238,   239,     0,   240,
       0,   241,     0,     0,     0,   244,   245,   546,     0,   248,
       0,   249,   250,     0,     0,   251,   252,   253,   254,     0,
     255,   256,   257,   258,   259,   260,   261,     0,   263,   264,
     265,   266,     0,   267,   268,   269,   270,   271,   272,   273,
       0,   274,     0,   276,   277,   278,   279,   280,   281,   282,
     283,     0,   284,     0,   285,     0,     0,   288,     0,   290,
     291,   292,   293,   294,   295,   296,     0,     0,   297,     0,
     299,     0,     0,   301,   302,   303,   304,   305,   306,   307,
     308,   547,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323,   324,   325,   326,   327,
     328,   329,   330,     0,   332,   333,   334,   335,   336,   337,
       0,   338,   339,     0,   341,     0,   342,   343,   344,   345,
     346,   347,     0,   348,   349,     0,     0,   350,   351,   352,
       0,     0,   353,   354,   355,     0,   357,     0,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,     0,     0,     0,     0,   373,   374,   375,     0,
     377,   378,   379,   380,   381,   382,     0,   383,   384,   385,
     386,   387,   388,   389,   390,     0,   391,   392,   393,   394,
     395,   396,   397,   398,     0,   399,   400,   401,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,     0,
     413,   414,     0,   416,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,   427,   428,   429,   430,   431,   432,
       0,     0,   433,   434,   435,   436,   437,   438,   439,   440,
     441,   442,     0,     0,   444,   445,   446,   447,     0,   448,
     449,   450,   451,   452,   453,   454,   455,   456,   457,   458,
     459,   460,   548,   462,   463,     0,     0,   464,   465,     0,
     466,     0,   468,   469,   470,   471,   472,     0,   473,   474,
     475,     0,   476,     0,   477,   478,   479,   480,   481,     0,
     482,   483,   484,   485,   486,   487,   488,   489,     0,     0,
     490,   491,   492,     0,   493,   494,   495,   496,     0,   497,
     498,   499,   500,   501,   502,   503,     0,   504,     0,   506,
     507,   508,   509,   510,   511,   512,   513,   514,     0,     0,
     515,     0,     0,   516,   517,   518,   519,   520,   521,   522,
     523,   524,   525,   526,   527,   528,   529,   530,   531,   532,
     533,   534,   535,   536,   545,     0,   573,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1561,     0,     0,   120,   121,   122,   123,   124,   125,   126,
     127,   128,     0,   129,   130,   131,     0,     0,     0,     0,
       0,   132,     0,     0,     0,     0,   134,   135,     0,   136,
     137,   138,     0,   140,   141,   142,   143,   144,     0,   146,
     147,     0,   148,   149,   150,   151,   152,   153,     0,     0,
     154,   155,   156,   157,   158,   159,   160,     0,   161,   162,
     163,   164,   165,     0,     0,     0,   167,   168,   169,   170,
     171,   172,     0,   174,   175,   176,     0,   177,   178,   179,
     180,   181,   182,     0,     0,   184,   185,   186,   187,   188,
     189,   190,   191,   192,   193,   194,   195,   196,   197,   198,
       0,   199,     0,   200,   201,   202,   203,   204,   205,     0,
       0,   206,   207,   208,   209,   210,     0,     0,   211,   212,
     213,   214,   215,   216,   217,     0,   218,   219,   220,     0,
     221,   222,   223,     0,   224,   225,   226,   227,   228,   229,
     230,   231,   232,   233,   234,     0,   235,     0,   236,   237,
     238,   239,     0,   240,     0,   241,     0,     0,     0,   244,
     245,   546,     0,   248,     0,   249,   250,     0,     0,   251,
     252,   253,   254,     0,   255,   256,   257,   258,   259,   260,
     261,     0,   263,   264,   265,   266,     0,   267,   268,   269,
     270,   271,   272,   273,     0,   274,     0,   276,   277,   278,
     279,   280,   281,   282,   283,     0,   284,     0,   285,     0,
       0,   288,     0,   290,   291,   292,   293,   294,   295,   296,
       0,     0,   297,     0,   299,     0,     0,   301,   302,   303,
     304,   305,   306,   307,   308,   547,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,   329,   330,     0,   332,   333,
     334,   335,   336,   337,     0,   338,   339,     0,   341,     0,
     342,   343,   344,   345,   346,   347,     0,   348,   349,     0,
       0,   350,   351,   352,     0,     0,   353,   354,   355,     0,
     357,     0,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,     0,     0,     0,     0,
     373,   374,   375,     0,   377,   378,   379,   380,   381,   382,
       0,   383,   384,   385,   386,   387,   388,   389,   390,     0,
     391,   392,   393,   394,   395,   396,   397,   398,     0,   399,
     400,   401,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,     0,   413,   414,     0,   416,   417,   418,
     419,   420,   421,   422,   423,   424,   425,   426,   427,   428,
     429,   430,   431,   432,     0,     0,   433,   434,   435,   436,
     437,   438,   439,   440,   441,   442,     0,     0,   444,   445,
     446,   447,     0,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   548,   462,   463,     0,
       0,   464,   465,     0,   466,     0,   468,   469,   470,   471,
     472,     0,   473,   474,   475,     0,   476,     0,   477,   478,
     479,   480,   481,     0,   482,   483,   484,   485,   486,   487,
     488,   489,     0,     0,   490,   491,   492,     0,   493,   494,
     495,   496,     0,   497,   498,   499,   500,   501,   502,   503,
       0,   504,     0,   506,   507,   508,   509,   510,   511,   512,
     513,   514,     0,     0,   515,     0,     0,   516,   517,   518,
     519,   520,   521,   522,   523,   524,   525,   526,   527,   528,
     529,   530,   531,   532,   533,   534,   535,   536,   545,     0,
     573,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  2315,     0,     0,   120,   121,   122,
     123,   124,   125,   126,   127,   128,     0,   129,   130,   131,
       0,     0,     0,     0,     0,   132,     0,     0,     0,     0,
     134,   135,     0,   136,   137,   138,     0,   140,   141,   142,
     143,   144,     0,   146,   147,     0,   148,   149,   150,   151,
     152,   153,     0,     0,   154,   155,   156,   157,   158,   159,
     160,     0,   161,   162,   163,   164,   165,     0,     0,     0,
     167,   168,   169,   170,   171,   172,     0,   174,   175,   176,
       0,   177,   178,   179,   180,   181,   182,     0,     0,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,   196,   197,   198,     0,   199,     0,   200,   201,   202,
     203,   204,   205,     0,     0,   206,   207,   208,   209,   210,
       0,     0,   211,   212,   213,   214,   215,   216,   217,     0,
     218,   219,   220,     0,   221,   222,   223,     0,   224,   225,
     226,   227,   228,   229,   230,   231,   232,   233,   234,     0,
     235,     0,   236,   237,   238,   239,     0,   240,     0,   241,
       0,     0,     0,   244,   245,   546,     0,   248,     0,   249,
     250,     0,     0,   251,   252,   253,   254,     0,   255,   256,
     257,   258,   259,   260,   261,     0,   263,   264,   265,   266,
       0,   267,   268,   269,   270,   271,   272,   273,     0,   274,
       0,   276,   277,   278,   279,   280,   281,   282,   283,     0,
     284,     0,   285,     0,     0,   288,     0,   290,   291,   292,
     293,   294,   295,   296,     0,     0,   297,     0,   299,     0,
       0,   301,   302,   303,   304,   305,   306,   307,   308,   547,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,   323,   324,   325,   326,   327,   328,   329,
     330,     0,   332,   333,   334,   335,   336,   337,     0,   338,
     339,     0,   341,     0,   342,   343,   344,   345,   346,   347,
       0,   348,   349,     0,     0,   350,   351,   352,     0,     0,
     353,   354,   355,     0,   357,     0,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
       0,     0,     0,     0,   373,   374,   375,     0,   377,   378,
     379,   380,   381,   382,     0,   383,   384,   385,   386,   387,
     388,   389,   390,     0,   391,   392,   393,   394,   395,   396,
     397,   398,     0,   399,   400,   401,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,     0,   413,   414,
       0,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,     0,     0,
     433,   434,   435,   436,   437,   438,   439,   440,   441,   442,
       0,     0,   444,   445,   446,   447,     0,   448,   449,   450,
     451,   452,   453,   454,   455,   456,   457,   458,   459,   460,
     548,   462,   463,     0,     0,   464,   465,     0,   466,     0,
     468,   469,   470,   471,   472,     0,   473,   474,   475,     0,
     476,     0,   477,   478,   479,   480,   481,     0,   482,   483,
     484,   485,   486,   487,   488,   489,     0,     0,   490,   491,
     492,     0,   493,   494,   495,   496,     0,   497,   498,   499,
     500,   501,   502,   503,     0,   504,     0,   506,   507,   508,
     509,   510,   511,   512,   513,   514,     0,     0,   515,     0,
       0,   516,   517,   518,   519,   520,   521,   522,   523,   524,
     525,   526,   527,   528,   529,   530,   531,   532,   533,   534,
     535,   536,   545,     0,   573,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  2553,     0,
       0,   120,   121,   122,   123,   124,   125,   126,   127,   128,
       0,   129,   130,   131,     0,     0,     0,     0,     0,   132,
       0,     0,     0,     0,   134,   135,     0,   136,   137,   138,
       0,   140,   141,   142,   143,   144,     0,   146,   147,     0,
     148,   149,   150,   151,   152,   153,     0,     0,   154,   155,
     156,   157,   158,   159,   160,     0,   161,   162,   163,   164,
     165,     0,     0,     0,   167,   168,   169,   170,   171,   172,
       0,   174,   175,   176,     0,   177,   178,   179,   180,   181,
     182,     0,     0,   184,   185,   186,   187,   188,   189,   190,
     191,   192,   193,   194,   195,   196,   197,   198,     0,   199,
       0,   200,   201,   202,   203,   204,   205,     0,     0,   206,
     207,   208,   209,   210,     0,     0,   211,   212,   213,   214,
     215,   216,   217,     0,   218,   219,   220,     0,   221,   222,
     223,     0,   224,   225,   226,   227,   228,   229,   230,   231,
     232,   233,   234,     0,   235,     0,   236,   237,   238,   239,
       0,   240,     0,   241,     0,     0,     0,   244,   245,   546,
       0,   248,     0,   249,   250,     0,     0,   251,   252,   253,
     254,     0,   255,   256,   257,   258,   259,   260,   261,     0,
     263,   264,   265,   266,     0,   267,   268,   269,   270,   271,
     272,   273,     0,   274,     0,   276,   277,   278,   279,   280,
     281,   282,   283,     0,   284,     0,   285,     0,     0,   288,
       0,   290,   291,   292,   293,   294,   295,   296,     0,     0,
     297,     0,   299,     0,     0,   301,   302,   303,   304,   305,
     306,   307,   308,   547,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
     326,   327,   328,   329,   330,     0,   332,   333,   334,   335,
     336,   337,     0,   338,   339,     0,   341,     0,   342,   343,
     344,   345,   346,   347,     0,   348,   349,     0,     0,   350,
     351,   352,     0,     0,   353,   354,   355,     0,   357,     0,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,     0,     0,     0,     0,   373,   374,
     375,     0,   377,   378,   379,   380,   381,   382,     0,   383,
     384,   385,   386,   387,   388,   389,   390,     0,   391,   392,
     393,   394,   395,   396,   397,   398,     0,   399,   400,   401,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,     0,   413,   414,     0,   416,   417,   418,   419,   420,
     421,   422,   423,   424,   425,   426,   427,   428,   429,   430,
     431,   432,     0,     0,   433,   434,   435,   436,   437,   438,
     439,   440,   441,   442,     0,     0,   444,   445,   446,   447,
       0,   448,   449,   450,   451,   452,   453,   454,   455,   456,
     457,   458,   459,   460,   548,   462,   463,     0,     0,   464,
     465,     0,   466,     0,   468,   469,   470,   471,   472,     0,
     473,   474,   475,     0,   476,     0,   477,   478,   479,   480,
     481,     0,   482,   483,   484,   485,   486,   487,   488,   489,
       0,     0,   490,   491,   492,     0,   493,   494,   495,   496,
       0,   497,   498,   499,   500,   501,   502,   503,     0,   504,
       0,   506,   507,   508,   509,   510,   511,   512,   513,   514,
       0,     0,   515,     0,     0,   516,   517,   518,   519,   520,
     521,   522,   523,   524,   525,   526,   527,   528,   529,   530,
     531,   532,   533,   534,   535,   536,   545,     0,   573,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  2715,     0,     0,   120,   121,   122,   123,   124,
     125,   126,   127,   128,     0,   129,   130,   131,     0,     0,
       0,     0,     0,   132,     0,     0,     0,     0,   134,   135,
       0,   136,   137,   138,     0,   140,   141,   142,   143,   144,
       0,   146,   147,     0,   148,   149,   150,   151,   152,   153,
       0,     0,   154,   155,   156,   157,   158,   159,   160,     0,
     161,   162,   163,   164,   165,     0,     0,     0,   167,   168,
     169,   170,   171,   172,     0,   174,   175,   176,     0,   177,
     178,   179,   180,   181,   182,     0,     0,   184,   185,   186,
     187,   188,   189,   190,   191,   192,   193,   194,   195,   196,
     197,   198,     0,   199,     0,   200,   201,   202,   203,   204,
     205,     0,     0,   206,   207,   208,   209,   210,     0,     0,
     211,   212,   213,   214,   215,   216,   217,     0,   218,   219,
     220,     0,   221,   222,   223,     0,   224,   225,   226,   227,
     228,   229,   230,   231,   232,   233,   234,     0,   235,     0,
     236,   237,   238,   239,     0,   240,     0,   241,     0,     0,
       0,   244,   245,   546,     0,   248,     0,   249,   250,     0,
       0,   251,   252,   253,   254,     0,   255,   256,   257,   258,
     259,   260,   261,     0,   263,   264,   265,   266,     0,   267,
     268,   269,   270,   271,   272,   273,     0,   274,     0,   276,
     277,   278,   279,   280,   281,   282,   283,     0,   284,     0,
     285,     0,     0,   288,     0,   290,   291,   292,   293,   294,
     295,   296,     0,     0,   297,     0,   299,     0,     0,   301,
     302,   303,   304,   305,   306,   307,   308,   547,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,   323,   324,   325,   326,   327,   328,   329,   330,     0,
     332,   333,   334,   335,   336,   337,     0,   338,   339,     0,
     341,     0,   342,   343,   344,   345,   346,   347,     0,   348,
     349,     0,     0,   350,   351,   352,     0,     0,   353,   354,
     355,     0,   357,     0,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,     0,     0,
       0,     0,   373,   374,   375,     0,   377,   378,   379,   380,
     381,   382,     0,   383,   384,   385,   386,   387,   388,   389,
     390,     0,   391,   392,   393,   394,   395,   396,   397,   398,
       0,   399,   400,   401,   402,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,     0,   413,   414,     0,   416,
     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
     427,   428,   429,   430,   431,   432,     0,     0,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,     0,     0,
     444,   445,   446,   447,     0,   448,   449,   450,   451,   452,
     453,   454,   455,   456,   457,   458,   459,   460,   548,   462,
     463,     0,     0,   464,   465,     0,   466,     0,   468,   469,
     470,   471,   472,     0,   473,   474,   475,     0,   476,     0,
     477,   478,   479,   480,   481,     0,   482,   483,   484,   485,
     486,   487,   488,   489,     0,     0,   490,   491,   492,     0,
     493,   494,   495,   496,     0,   497,   498,   499,   500,   501,
     502,   503,     0,   504,     0,   506,   507,   508,   509,   510,
     511,   512,   513,   514,     0,     0,   515,     0,     0,   516,
     517,   518,   519,   520,   521,   522,   523,   524,   525,   526,
     527,   528,   529,   530,   531,   532,   533,   534,   535,   536,
     545,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  3465,     0,     0,   120,
     121,   122,   123,   124,   125,   126,   127,   128,     0,   129,
     130,   131,     0,     0,     0,     0,     0,   132,     0,     0,
       0,     0,   134,   135,     0,   136,   137,   138,     0,   140,
     141,   142,   143,   144,     0,   146,   147,     0,   148,   149,
     150,   151,   152,   153,     0,     0,   154,   155,   156,   157,
     158,   159,   160,     0,   161,   162,   163,   164,   165,     0,
       0,     0,   167,   168,   169,   170,   171,   172,     0,   174,
     175,   176,     0,   177,   178,   179,   180,   181,   182,     0,
       0,   184,   185,   186,   187,   188,   189,   190,   191,   192,
     193,   194,   195,   196,   197,   198,     0,   199,     0,   200,
     201,   202,   203,   204,   205,     0,     0,   206,   207,   208,
     209,   210,     0,     0,   211,   212,   213,   214,   215,   216,
     217,     0,   218,   219,   220,     0,   221,   222,   223,     0,
     224,   225,   226,   227,   228,   229,   230,   231,   232,   233,
     234,     0,   235,     0,   236,   237,   238,   239,     0,   240,
       0,   241,     0,     0,     0,   244,   245,   546,     0,   248,
       0,   249,   250,     0,     0,   251,   252,   253,   254,     0,
     255,   256,   257,   258,   259,   260,   261,     0,   263,   264,
     265,   266,     0,   267,   268,   269,   270,   271,   272,   273,
       0,   274,     0,   276,   277,   278,   279,   280,   281,   282,
     283,     0,   284,     0,   285,     0,     0,   288,     0,   290,
     291,   292,   293,   294,   295,   296,     0,     0,   297,     0,
     299,     0,     0,   301,   302,   303,   304,   305,   306,   307,
     308,   547,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323,   324,   325,   326,   327,
     328,   329,   330,     0,   332,   333,   334,   335,   336,   337,
       0,   338,   339,     0,   341,     0,   342,   343,   344,   345,
     346,   347,     0,   348,   349,     0,     0,   350,   351,   352,
       0,     0,   353,   354,   355,     0,   357,     0,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,     0,     0,     0,     0,   373,   374,   375,     0,
     377,   378,   379,   380,   381,   382,     0,   383,   384,   385,
     386,   387,   388,   389,   390,     0,   391,   392,   393,   394,
     395,   396,   397,   398,     0,   399,   400,   401,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,     0,
     413,   414,     0,   416,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,   427,   428,   429,   430,   431,   432,
       0,     0,   433,   434,   435,   436,   437,   438,   439,   440,
     441,   442,     0,     0,   444,   445,   446,   447,     0,   448,
     449,   450,   451,   452,   453,   454,   455,   456,   457,   458,
     459,   460,   548,   462,   463,     0,     0,   464,   465,     0,
     466,     0,   468,   469,   470,   471,   472,     0,   473,   474,
     475,     0,   476,     0,   477,   478,   479,   480,   481,     0,
     482,   483,   484,   485,   486,   487,   488,   489,     0,     0,
     490,   491,   492,     0,   493,   494,   495,   496,     0,   497,
     498,   499,   500,   501,   502,   503,     0,   504,     0,   506,
     507,   508,   509,   510,   511,   512,   513,   514,     0,     0,
     515,     0,     0,   516,   517,   518,   519,   520,   521,   522,
     523,   524,   525,   526,   527,   528,   529,   530,   531,   532,
     533,   534,   535,   536,   545,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    2164,     0,     0,   120,   121,   122,   123,   124,   125,   126,
     127,   128,     0,   129,   130,   131,     0,     0,     0,     0,
       0,   132,     0,     0,     0,     0,   134,   135,     0,   136,
     137,   138,     0,   140,   141,   142,   143,   144,     0,   146,
     147,     0,   148,   149,   150,   151,   152,   153,     0,     0,
     154,   155,   156,   157,   158,   159,   160,     0,   161,   162,
     163,   164,   165,     0,     0,     0,   167,   168,   169,   170,
     171,   172,     0,   174,   175,   176,     0,   177,   178,   179,
     180,   181,   182,     0,     0,   184,   185,   186,   187,   188,
     189,   190,   191,   192,   193,   194,   195,   196,   197,   198,
       0,   199,     0,   200,   201,   202,   203,   204,   205,     0,
       0,   206,   207,   208,   209,   210,     0,     0,   211,   212,
     213,   214,   215,   216,   217,     0,   218,   219,   220,     0,
     221,   222,   223,     0,   224,   225,   226,   227,   228,   229,
     230,   231,   232,   233,   234,     0,   235,     0,   236,   237,
     238,   239,     0,   240,     0,   241,     0,     0,     0,   244,
     245,   546,     0,   248,     0,   249,   250,     0,     0,   251,
     252,   253,   254,     0,   255,   256,   257,   258,   259,   260,
     261,     0,   263,   264,   265,   266,     0,   267,   268,   269,
     270,   271,   272,   273,     0,   274,     0,   276,   277,   278,
     279,   280,   281,   282,   283,     0,   284,     0,   285,     0,
       0,   288,     0,   290,   291,   292,   293,   294,   295,   296,
       0,     0,   297,     0,   299,     0,     0,   301,   302,   303,
     304,   305,   306,   307,   308,   547,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,   329,   330,     0,   332,   333,
     334,   335,   336,   337,     0,   338,   339,     0,   341,     0,
     342,   343,   344,   345,   346,   347,     0,   348,   349,     0,
       0,   350,   351,   352,     0,     0,   353,   354,   355,     0,
     357,     0,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,     0,     0,     0,     0,
     373,   374,   375,     0,   377,   378,   379,   380,   381,   382,
       0,   383,   384,   385,   386,   387,   388,   389,   390,     0,
     391,   392,   393,   394,   395,   396,   397,   398,     0,   399,
     400,   401,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,     0,   413,   414,     0,   416,   417,   418,
     419,   420,   421,   422,   423,   424,   425,   426,   427,   428,
     429,   430,   431,   432,     0,     0,   433,   434,   435,   436,
     437,   438,   439,   440,   441,   442,     0,     0,   444,   445,
     446,   447,     0,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   548,   462,   463,     0,
       0,   464,   465,     0,   466,     0,   468,   469,   470,   471,
     472,     0,   473,   474,   475,     0,   476,     0,   477,   478,
     479,   480,   481,     0,   482,   483,   484,   485,   486,   487,
     488,   489,     0,     0,   490,   491,   492,     0,   493,   494,
     495,   496,     0,   497,   498,   499,   500,   501,   502,   503,
       0,   504,     0,   506,   507,   508,   509,   510,   511,   512,
     513,   514,     0,     0,   515,     0,     0,   516,   517,   518,
     519,   520,   521,   522,   523,   524,   525,   526,   527,   528,
     529,   530,   531,   532,   533,   534,   535,   536,   545,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  2275,     0,     0,   120,   121,   122,
     123,   124,   125,   126,   127,   128,     0,   129,   130,   131,
       0,     0,     0,     0,     0,   132,     0,     0,     0,     0,
     134,   135,     0,   136,   137,   138,     0,   140,   141,   142,
     143,   144,     0,   146,   147,     0,   148,   149,   150,   151,
     152,   153,     0,     0,   154,   155,   156,   157,   158,   159,
     160,     0,   161,   162,   163,   164,   165,     0,     0,     0,
     167,   168,   169,   170,   171,   172,     0,   174,   175,   176,
       0,   177,   178,   179,   180,   181,   182,     0,     0,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,   196,   197,   198,     0,   199,     0,   200,   201,   202,
     203,   204,   205,     0,     0,   206,   207,   208,   209,   210,
       0,     0,   211,   212,   213,   214,   215,   216,   217,     0,
     218,   219,   220,     0,   221,   222,   223,     0,   224,   225,
     226,   227,   228,   229,   230,   231,   232,   233,   234,     0,
     235,     0,   236,   237,   238,   239,     0,   240,     0,   241,
       0,     0,     0,   244,   245,   546,     0,   248,     0,   249,
     250,     0,     0,   251,   252,   253,   254,     0,   255,   256,
     257,   258,   259,   260,   261,     0,   263,   264,   265,   266,
       0,   267,   268,   269,   270,   271,   272,   273,     0,   274,
       0,   276,   277,   278,   279,   280,   281,   282,   283,     0,
     284,     0,   285,     0,     0,   288,     0,   290,   291,   292,
     293,   294,   295,   296,     0,     0,   297,     0,   299,     0,
       0,   301,   302,   303,   304,   305,   306,   307,   308,   547,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,   323,   324,   325,   326,   327,   328,   329,
     330,     0,   332,   333,   334,   335,   336,   337,     0,   338,
     339,     0,   341,     0,   342,   343,   344,   345,   346,   347,
       0,   348,   349,     0,     0,   350,   351,   352,     0,     0,
     353,   354,   355,     0,   357,     0,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
       0,     0,     0,     0,   373,   374,   375,     0,   377,   378,
     379,   380,   381,   382,     0,   383,   384,   385,   386,   387,
     388,   389,   390,     0,   391,   392,   393,   394,   395,   396,
     397,   398,     0,   399,   400,   401,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,     0,   413,   414,
       0,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,     0,     0,
     433,   434,   435,   436,   437,   438,   439,   440,   441,   442,
       0,     0,   444,   445,   446,   447,     0,   448,   449,   450,
     451,   452,   453,   454,   455,   456,   457,   458,   459,   460,
     548,   462,   463,     0,     0,   464,   465,     0,   466,     0,
     468,   469,   470,   471,   472,     0,   473,   474,   475,     0,
     476,     0,   477,   478,   479,   480,   481,     0,   482,   483,
     484,   485,   486,   487,   488,   489,     0,     0,   490,   491,
     492,     0,   493,   494,   495,   496,     0,   497,   498,   499,
     500,   501,   502,   503,     0,   504,     0,   506,   507,   508,
     509,   510,   511,   512,   513,   514,     0,     0,   515,     0,
       0,   516,   517,   518,   519,   520,   521,   522,   523,   524,
     525,   526,   527,   528,   529,   530,   531,   532,   533,   534,
     535,   536,   893,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  3264,     0,
       0,   120,   121,   122,   123,     0,   125,   126,   127,   128,
       0,   129,   130,   131,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   134,   135,     0,   136,   137,   138,
       0,   140,   141,   142,   894,   895,     0,   896,   897,     0,
     148,   149,   150,   151,   152,   153,     0,     0,   154,   155,
     156,   157,   898,   899,   160,     0,   161,   162,   163,   164,
     900,     0,     0,     0,     0,   168,   169,   170,   171,   172,
       0,   174,   175,   176,     0,   177,   178,   179,   180,   181,
       0,     0,     0,   184,   185,   186,   187,   188,   189,   190,
     191,   192,   193,   901,   195,   196,   902,   198,     0,   199,
       0,   200,   201,   202,   203,   204,   205,    14,    15,     0,
     207,   208,   209,   210,     0,     0,   211,   212,   213,   214,
     215,     0,     0,     0,   218,   219,   220,     0,   221,   222,
     223,     0,   224,   225,   226,   227,   903,   229,   230,   231,
     232,   233,   904,     0,   235,     0,   236,   237,   905,   239,
       0,   240,     0,   241,     0,    23,     0,   244,   245,   906,
       0,   248,     0,   249,     0,     0,     0,   907,   908,     0,
     254,     0,   255,   256,   257,   258,   259,   260,   261,     0,
     263,   264,   265,   266,     0,   267,   268,   269,   270,   271,
     272,   273,     0,   274,     0,   909,   277,   278,   279,   280,
     281,   910,   911,     0,   912,     0,   285,     0,     0,   288,
       0,   290,     0,   292,   293,   294,   295,   296,     0,     0,
     297,     0,   299,     0,     0,   301,   302,   303,   304,   305,
     306,   307,   308,   913,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
     326,   327,   328,   329,   914,     0,   915,   333,   334,   335,
       0,   916,     0,   338,   339,     0,   341,     0,   917,   343,
     918,   345,   346,   347,     0,   348,   349,     0,     0,   350,
     351,   352,     0,     0,   353,   354,   919,     0,   357,     0,
     920,   360,   361,   362,   363,   364,   365,   366,   367,   368,
       0,     0,   371,   372,    27,    28,    29,     0,   373,   374,
     921,     0,   377,   378,   922,   380,   381,   382,     0,   383,
     384,   385,   386,   387,     0,     0,   390,     0,   391,   392,
     393,   923,   395,   396,   397,   398,     0,   399,   400,   401,
       0,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,     0,   413,   414,     0,   416,   417,   418,   924,   420,
     421,   422,   423,   424,   425,   426,   427,   428,   429,   430,
     431,   432,    34,     0,   433,   434,   435,   436,   437,   438,
     925,   440,   441,     0,    36,     0,     0,   445,   926,   447,
       0,     0,   449,   450,   451,   452,   453,   454,   455,   456,
     457,   458,   459,   460,   927,   462,   928,    38,     0,   464,
     465,    39,   466,     0,   468,   469,   470,   471,   472,     0,
     473,   929,   930,     0,     0,     0,   477,   478,   931,   480,
     932,     0,   482,   483,   933,   485,   486,   487,   488,   489,
       0,     0,   490,   491,   492,    41,   493,   494,   495,   496,
       0,   497,   498,   499,   500,   501,   934,   935,     0,   504,
       0,   506,     0,   508,   509,   510,   511,     0,   513,   514,
       0,     0,   515,     0,    45,   516,   517,   518,   519,   520,
     521,   936,   937,   938,   939,   940,   941,   942,   943,   944,
     945,   946,   533,   534,   535,   536,     0,     0,    46,     0,
       0,  3078,  1439,   843,     0,     0,  2140,  1138,     0,     0,
       0,     0,   874,  2141,  2142,     0,     0,  2143,  2144,  2145,
     120,   121,   122,   123,   124,   125,   126,   127,   128,   580,
     129,   130,   131,   581,   582,   583,  3079,   585,   132,   586,
     587,   588,  3080,   134,   135,   590,   136,   137,   138,  3081,
     140,   141,   142,     0,  1577,  3082,  1579,  1580,   597,   148,
     149,   150,   151,   152,   153,   598,   599,   154,   155,   156,
     157,  1581,  1582,   160,   602,   161,   162,   163,   164,     0,
     604,  3083,   606,  3084,   168,   169,   170,   171,   172,  3085,
     174,   175,   176,   609,   177,   178,   179,   180,   181,   182,
     610,  3086,   184,   185,   186,   187,   188,   189,   190,   191,
     192,   193,  1587,   195,   196,  1588,   198,   615,   199,   616,
     200,   201,   202,   203,   204,   205,   617,   618,   206,   207,
     208,   209,   210,   619,   620,   211,   212,  1151,   214,   215,
     216,   217,   621,   218,   219,   220,   622,   221,   222,   223,
     623,   224,   225,   226,   227,     0,   229,   230,   231,   232,
     233,     0,   626,   235,   627,   236,   237,  1589,   239,   629,
     240,   630,   241,  3087,   632,  3088,   244,   245,  3089,  3090,
     248,   636,   249,   250,   637,   638,     0,     0,   253,   254,
     641,   255,   256,   257,   258,   259,   260,   261,  3091,   263,
     264,   265,   266,   643,   267,   268,   269,   270,   271,   272,
     273,   644,   274,  3092,     0,   277,   278,   279,   280,   281,
    1595,  1596,   649,  1597,   651,   285,  3093,  3094,   288,  3095,
     290,   291,   292,   293,   294,   295,   296,   655,   656,   297,
    3096,   299,  3097,   659,   301,   302,   303,   304,   305,   306,
     307,   308,  3098,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,   323,   324,   325,   326,
     327,   328,   329,  1604,  3099,  1606,   333,   334,   335,   336,
    3100,   665,   338,   339,  3101,   341,   667,     0,   343,  1608,
     345,   346,   347,   670,   348,   349,   671,   672,  3102,   351,
     352,   673,   674,   353,   354,     0,  3103,   357,  3104,     0,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
     370,   371,   372,   679,   680,   681,   682,   373,   374,     0,
    3105,   377,   378,     0,   380,   381,   382,   686,   383,   384,
     385,   386,   387,   388,   389,   390,   687,   391,   392,   393,
    1612,   395,   396,   397,   398,   689,   399,   400,   401,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     690,   413,   414,  3106,   416,   417,   418,  1614,   420,   421,
     422,   423,   424,   425,   426,   427,   428,   429,   430,   431,
     432,   693,  3107,   433,   434,   435,   436,   437,   438,  3108,
     440,   441,   442,   696,  3109,   444,   445,  1618,   447,   699,
     448,   449,   450,   451,   452,   453,   454,   455,   456,   457,
     458,   459,   460,  3110,   462,     0,   702,   703,   464,   465,
     704,   466,  3111,   468,   469,   470,   471,   472,   706,   473,
    1621,  1622,   709,   476,   710,   477,   478,     0,   480,     0,
     713,   482,   483,  3112,   485,   486,   487,   488,   489,  3113,
     716,   490,   491,   492,   717,   493,   494,   495,   496,   718,
     497,   498,   499,   500,   501,     0,  1625,   721,   504,  3114,
     506,   507,   508,   509,   510,   511,   512,   513,   514,   723,
     724,   515,   725,   726,   516,   517,   518,   519,   520,   521,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   533,   534,   535,   536,     0,   545,     0,  2146,  2147,
    2148,  2140,  3115,  3116,  2151,  2152,  2153,  2154,  2141,  2142,
       0,     0,  2143,  2144,  2145,   120,   121,   122,   123,   124,
     125,   126,   127,   128,     0,   129,   130,   131,     0,     0,
       0,     0,     0,   132,     0,     0,     0,     0,   134,   135,
       0,   136,   137,   138,     0,   140,   141,   142,   143,   144,
       0,   146,   147,     0,   148,   149,   150,   151,   152,   153,
       0,     0,   154,   155,   156,   157,   158,   159,   160,     0,
     161,   162,   163,   164,   165,     0,     0,     0,   167,   168,
     169,   170,   171,   172,     0,   174,   175,   176,     0,   177,
     178,   179,   180,   181,   182,     0,     0,   184,   185,   186,
     187,   188,   189,   190,   191,   192,   193,   194,   195,   196,
     197,   198,     0,   199,     0,   200,   201,   202,   203,   204,
     205,     0,     0,   206,   207,   208,   209,   210,     0,     0,
     211,   212,   213,   214,   215,   216,   217,     0,   218,   219,
     220,     0,   221,   222,   223,     0,   224,   225,   226,   227,
     228,   229,   230,   231,   232,   233,   234,     0,   235,     0,
     236,   237,   238,   239,     0,   240,     0,   241,     0,     0,
       0,   244,   245,   546,     0,   248,     0,   249,   250,     0,
       0,   251,   252,   253,   254,     0,   255,   256,   257,   258,
     259,   260,   261,     0,   263,   264,   265,   266,     0,   267,
     268,   269,   270,   271,   272,   273,     0,   274,     0,   276,
     277,   278,   279,   280,   281,   282,   283,     0,   284,     0,
     285,     0,     0,   288,     0,   290,   291,   292,   293,   294,
     295,   296,     0,     0,   297,     0,   299,     0,     0,   301,
     302,   303,   304,   305,   306,   307,   308,   547,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,   323,   324,   325,   326,   327,   328,   329,   330,     0,
     332,   333,   334,   335,   336,   337,     0,   338,   339,     0,
     341,     0,   342,   343,   344,   345,   346,   347,     0,   348,
     349,     0,     0,   350,   351,   352,     0,     0,   353,   354,
     355,     0,   357,     0,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,     0,     0,
       0,     0,   373,   374,   375,     0,   377,   378,   379,   380,
     381,   382,     0,   383,   384,   385,   386,   387,   388,   389,
     390,     0,   391,   392,   393,   394,   395,   396,   397,   398,
       0,   399,   400,   401,   402,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,     0,   413,   414,     0,   416,
     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
     427,   428,   429,   430,   431,   432,     0,     0,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,     0,     0,
     444,   445,   446,   447,     0,   448,   449,   450,   451,   452,
     453,   454,   455,   456,   457,   458,   459,   460,   548,   462,
     463,     0,     0,   464,   465,     0,   466,     0,   468,   469,
     470,   471,   472,     0,   473,   474,   475,     0,   476,     0,
     477,   478,   479,   480,   481,     0,   482,   483,   484,   485,
     486,   487,   488,   489,     0,     0,   490,   491,   492,     0,
     493,   494,   495,   496,     0,   497,   498,   499,   500,   501,
     502,   503,     0,   504,     0,   506,   507,   508,   509,   510,
     511,   512,   513,   514,     0,     0,   515,     0,     0,   516,
     517,   518,   519,   520,   521,   522,   523,   524,   525,   526,
     527,   528,   529,   530,   531,   532,   533,   534,   535,   536,
       0,     0,     0,  2146,  2147,  2148,     0,  2149,  2150,  2151,
    2152,  2153,  2154,  1709,     0,     0,  1710,     0,     0,     0,
    1711,  1712,  1713,  1714,  1715,  1716,  1717,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1709,     0,
       0,  1710,  1718,     0,     0,  1711,  1712,  1713,  1714,  1715,
    1716,  1717,     0,  1720,     0,     0,     0,     0,     0,     0,
    1721,     0,     0,  1709,     0,     0,  1710,  1718,     0,     0,
    1711,  1712,  1713,  1714,  1715,  1716,  1717,     0,  1720,     0,
       0,     0,     0,     0,     0,  1721,     0,  1722,     0,     0,
       0,     0,  1718,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1720,     0,     0,  1709,     0,     0,  1710,
    1721,     0,  1722,  1711,  1712,  1713,  1714,  1715,  1716,  1717,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1718,     0,  1722,     0,     0,
       0,     0,     0,     0,     0,     0,  1720,  1709,     0,     0,
    1710,     0,     0,  1721,  1711,  1712,  1713,  1714,  1715,  1716,
    1717,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1718,     0,     0,     0,
    1722,     0,     0,     0,     0,     0,  1723,  1720,     0,     0,
       0,     0,     0,     0,  1721,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1724,     0,     0,     0,     0,
    1725,  1723,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1722,     0,     0,     0,     0,     0,     0,     0,     0,
    1724,     0,     0,  1726,  1727,  1725,  1723,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1728,
       0,     0,     0,     0,     0,  1724,     0,     0,  1726,  1727,
    1725,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1728,     0,     0,     0,     0,  1723,
       0,     0,     0,  1726,  1727,     0,     0,     0,  1729,     0,
       0,  1730,     0,     0,     0,     0,     0,     0,  1724,  1728,
       0,     0,     0,  1725,     0,  1731,     0,     0,  1732,     0,
       0,     0,     0,  1729,     0,     0,  1730,     0,     0,     0,
    1723,     0,     0,     0,     0,     0,  1726,  1727,     0,     0,
    1731,     0,     0,  1732,     0,     0,     0,     0,  1729,  1724,
       0,  1730,  1728,     0,  1725,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1731,     0,     0,  1732,     0,
       0,     0,     0,     0,     0,     0,     0,  1726,  1727,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1729,     0,  1728,  1730,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1731,     0,
       0,  1732,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1733,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1729,     0,     0,  1730,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1733,     0,     0,  1731,
       0,     0,  1732,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1733,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1733,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1734,     0,     0,  1735,  1736,  1737,     0,  1738,
    1739,  1740,  1741,  1742,  1743,     0,     0,     0,     0,  3824,
       0,     0,     0,     0,     0,  1733,     0,  1734,     0,     0,
    1735,  1736,  1737,     0,  1738,  1739,  1740,  1741,  1742,  1743,
       0,     0,  1899,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1734,     0,     0,  1735,  1736,  1737,     0,  1738,
    1739,  1740,  1741,  1742,  1743,     0,     0,  2942,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1734,     0,     0,  1735,  1736,
    1737,     0,  1738,  1739,  1740,  1741,  1742,  1743,     0,     0,
    3475,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   579,     0,     0,  1734,     0,     0,  1735,
    1736,  1737,     0,  1738,  1739,  1740,  1741,  1742,  1743,     0,
       0,  3758,   120,   121,   122,   123,   124,   125,   126,   127,
     128,   580,   129,   130,   131,   581,   582,   583,   584,   585,
     132,   586,   587,   588,   589,   134,   135,   590,   136,   137,
     138,   591,   140,   141,   142,   592,   593,   594,   595,   596,
     597,   148,   149,   150,   151,   152,   153,   598,   599,   154,
     155,   156,   157,   600,   601,   160,   602,   161,   162,   163,
     164,   603,   604,   605,   606,   607,   168,   169,   170,   171,
     172,   608,   174,   175,   176,   609,   177,   178,   179,   180,
     181,   182,   610,   611,   184,   185,   186,   187,   188,   189,
     190,   191,   192,   193,   613,   195,   196,   614,   198,   615,
     199,   616,   200,   201,   202,   203,   204,   205,   617,   618,
     206,   207,   208,   209,   210,   619,   620,   211,   212,   213,
     214,   215,   216,   217,   621,   218,   219,   220,   622,   221,
     222,   223,   623,   224,   225,   226,   227,   624,   229,   230,
     231,   232,   233,   625,   626,   235,   627,   236,   237,   628,
     239,   629,   240,   630,   241,   631,   632,   633,   244,   245,
     634,   635,   248,   636,   249,   250,   637,   638,   639,   640,
     253,   254,   641,   255,   256,   257,   258,   259,   260,   261,
     642,   263,   264,   265,   266,   643,   267,   268,   269,   270,
     271,   272,   273,   644,   274,   645,   646,   277,   278,   279,
     280,   281,   647,   648,   649,   650,   651,   285,   652,   653,
     288,   654,   290,   291,   292,   293,   294,   295,   296,   655,
     656,   297,   657,   299,   658,   659,   301,   302,   303,   304,
     305,   306,   307,   308,   660,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   661,   662,   663,   333,   334,
     335,   336,   664,   665,   338,   339,   666,   341,   667,   668,
     343,   669,   345,   346,   347,   670,   348,   349,   671,   672,
     350,   351,   352,   673,   674,   353,   354,   675,   676,   357,
     677,   678,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,   371,   372,   679,   680,   681,   682,   373,
     374,   683,   684,   377,   378,   685,   380,   381,   382,   686,
     383,   384,   385,   386,   387,   388,   389,   390,   687,   391,
     392,   393,   688,   395,   396,   397,   398,   689,   399,   400,
     401,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,   690,   413,   414,   691,   416,   417,   418,   692,
     420,   421,   422,   423,   424,   425,   426,   427,   428,   429,
     430,   431,   432,   693,   694,   433,   434,   435,   436,   437,
     438,   695,   440,   441,   442,   696,   697,   444,   445,   698,
     447,   699,   448,   449,   450,   451,   452,   453,   454,   455,
     456,   457,   458,   459,   460,   700,   462,   701,   702,   703,
     464,   465,   704,   466,   705,   468,   469,   470,   471,   472,
     706,   473,   707,   708,   709,   476,   710,   477,   478,   711,
     480,   712,   713,   482,   483,   714,   485,   486,   487,   488,
     489,   715,   716,   490,   491,   492,   717,   493,   494,   495,
     496,   718,   497,   498,   499,   500,   501,   719,   720,   721,
     504,   722,   506,   507,   508,   509,   510,   511,   512,   513,
     514,   723,   724,   515,   725,   726,   516,   517,   518,   519,
     520,   521,   727,   728,   729,   730,   731,   732,   733,   734,
     735,   736,   737,   533,   534,   535,   536,   545,     0,     0,
       0,     0,     0,     0,     0,     0,  2175,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   120,   121,   122,   123,
     124,   125,   126,   127,   128,     0,   129,   130,   131,     0,
       0,     0,     0,     0,   132,     0,     0,     0,     0,   134,
     135,     0,   136,   137,   138,     0,   140,   141,   142,   143,
     144,     0,   146,   147,     0,   148,   149,   150,   151,   152,
     153,     0,     0,   154,   155,   156,   157,   158,   159,   160,
       0,   161,   162,   163,   164,   165,     0,     0,     0,   167,
     168,   169,   170,   171,   172,     0,   174,   175,   176,     0,
     177,   178,   179,   180,   181,   182,     0,     0,   184,   185,
     186,   187,   188,   189,   190,   191,   192,   193,   194,   195,
     196,   197,   198,     0,   199,     0,   200,   201,   202,   203,
     204,   205,     0,     0,   206,   207,   208,   209,   210,     0,
       0,   211,   212,   213,   214,   215,   216,   217,     0,   218,
     219,   220,     0,   221,   222,   223,     0,   224,   225,   226,
     227,   228,   229,   230,   231,   232,   233,   234,     0,   235,
       0,   236,   237,   238,   239,     0,   240,     0,   241,     0,
       0,     0,   244,   245,   546,     0,   248,     0,   249,   250,
       0,     0,   251,   252,   253,   254,     0,   255,   256,   257,
     258,   259,   260,   261,     0,   263,   264,   265,   266,     0,
     267,   268,   269,   270,   271,   272,   273,     0,   274,     0,
     276,   277,   278,   279,   280,   281,   282,   283,     0,   284,
       0,   285,     0,     0,   288,     0,   290,   291,   292,   293,
     294,   295,   296,     0,     0,   297,     0,   299,     0,     0,
     301,   302,   303,   304,   305,   306,   307,   308,   547,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,   322,   323,   324,   325,   326,   327,   328,   329,   330,
       0,   332,   333,   334,   335,   336,   337,     0,   338,   339,
       0,   341,     0,   342,   343,   344,   345,   346,   347,     0,
     348,   349,     0,     0,   350,   351,   352,     0,     0,   353,
     354,   355,     0,   357,     0,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,   371,   372,     0,
       0,     0,     0,   373,   374,   375,     0,   377,   378,   379,
     380,   381,   382,     0,   383,   384,   385,   386,   387,   388,
     389,   390,     0,   391,   392,   393,   394,   395,   396,   397,
     398,     0,   399,   400,   401,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,     0,   413,   414,     0,
     416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,   428,   429,   430,   431,   432,     0,     0,   433,
     434,   435,   436,   437,   438,   439,   440,   441,   442,     0,
       0,   444,   445,   446,   447,     0,   448,   449,   450,   451,
     452,   453,   454,   455,   456,   457,   458,   459,   460,   548,
     462,   463,     0,     0,   464,   465,     0,   466,     0,   468,
     469,   470,   471,   472,     0,   473,   474,   475,     0,   476,
       0,   477,   478,   479,   480,   481,     0,   482,   483,   484,
     485,   486,   487,   488,   489,     0,     0,   490,   491,   492,
       0,   493,   494,   495,   496,     0,   497,   498,   499,   500,
     501,   502,   503,     0,   504,     0,   506,   507,   508,   509,
     510,   511,   512,   513,   514,     0,     0,   515,     0,     0,
     516,   517,   518,   519,   520,   521,   522,   523,   524,   525,
     526,   527,   528,   529,   530,   531,   532,   533,   534,   535,
     536,   545,     0,     0,     0,     0,     0,     0,     0,     0,
    2842,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     120,   121,   122,   123,   124,   125,   126,   127,   128,     0,
     129,   130,   131,     0,     0,     0,     0,     0,   132,     0,
       0,     0,     0,   134,   135,     0,   136,   137,   138,     0,
     140,   141,   142,   143,   144,     0,   146,   147,     0,   148,
     149,   150,   151,   152,   153,     0,     0,   154,   155,   156,
     157,   158,   159,   160,     0,   161,   162,   163,   164,   165,
       0,     0,     0,   167,   168,   169,   170,   171,   172,     0,
     174,   175,   176,     0,   177,   178,   179,   180,   181,   182,
       0,     0,   184,   185,   186,   187,   188,   189,   190,   191,
     192,   193,   194,   195,   196,   197,   198,     0,   199,     0,
     200,   201,   202,   203,   204,   205,     0,     0,   206,   207,
     208,   209,   210,     0,     0,   211,   212,   213,   214,   215,
     216,   217,     0,   218,   219,   220,     0,   221,   222,   223,
       0,   224,   225,   226,   227,   228,   229,   230,   231,   232,
     233,   234,     0,   235,     0,   236,   237,   238,   239,     0,
     240,     0,   241,     0,     0,     0,   244,   245,   546,     0,
     248,     0,   249,   250,     0,     0,   251,   252,   253,   254,
       0,   255,   256,   257,   258,   259,   260,   261,     0,   263,
     264,   265,   266,     0,   267,   268,   269,   270,   271,   272,
     273,     0,   274,     0,   276,   277,   278,   279,   280,   281,
     282,   283,     0,   284,     0,   285,     0,     0,   288,     0,
     290,   291,   292,   293,   294,   295,   296,     0,     0,   297,
       0,   299,     0,     0,   301,   302,   303,   304,   305,   306,
     307,   308,   547,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,   323,   324,   325,   326,
     327,   328,   329,   330,     0,   332,   333,   334,   335,   336,
     337,     0,   338,   339,     0,   341,     0,   342,   343,   344,
     345,   346,   347,     0,   348,   349,     0,     0,   350,   351,
     352,     0,     0,   353,   354,   355,     0,   357,     0,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
     370,   371,   372,     0,     0,     0,     0,   373,   374,   375,
       0,   377,   378,   379,   380,   381,   382,     0,   383,   384,
     385,   386,   387,   388,   389,   390,     0,   391,   392,   393,
     394,   395,   396,   397,   398,     0,   399,   400,   401,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
       0,   413,   414,     0,   416,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,   428,   429,   430,   431,
     432,     0,     0,   433,   434,   435,   436,   437,   438,   439,
     440,   441,   442,     0,     0,   444,   445,   446,   447,     0,
     448,   449,   450,   451,   452,   453,   454,   455,   456,   457,
     458,   459,   460,   548,   462,   463,     0,     0,   464,   465,
       0,   466,     0,   468,   469,   470,   471,   472,     0,   473,
     474,   475,     0,   476,     0,   477,   478,   479,   480,   481,
       0,   482,   483,   484,   485,   486,   487,   488,   489,     0,
       0,   490,   491,   492,     0,   493,   494,   495,   496,     0,
     497,   498,   499,   500,   501,   502,   503,     0,   504,     0,
     506,   507,   508,   509,   510,   511,   512,   513,   514,     0,
       0,   515,     0,     0,   516,   517,   518,   519,   520,   521,
     522,   523,   524,   525,   526,   527,   528,   529,   530,   531,
     532,   533,   534,   535,   536,  1053,  1439,   843,     0,     0,
       0,  1138,     0,     0,  2845,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   120,   121,   122,   123,   124,   125,
     126,   127,   128,     0,   129,   130,   131,     0,     0,     0,
     584,     0,   132,     0,     0,     0,   589,   134,   135,     0,
     136,   137,   138,   591,   140,   141,   142,   592,   593,   594,
     595,   596,     0,   148,   149,   150,   151,   152,   153,     0,
       0,   154,   155,   156,   157,   600,   601,   160,     0,   161,
     162,   163,   164,   603,     0,   605,     0,   607,   168,   169,
     170,   171,   172,   608,   174,   175,   176,     0,   177,   178,
     179,   180,   181,   182,     0,   611,   184,   185,   186,   187,
     188,   189,   190,   191,   192,   193,   613,   195,   196,   614,
     198,     0,   199,     0,   200,   201,   202,   203,   204,   205,
       0,     0,   206,   207,   208,   209,   210,     0,     0,   211,
     212,   213,   214,   215,   216,   217,     0,   218,   219,   220,
       0,   221,   222,   223,     0,   224,   225,   226,   227,   624,
     229,   230,   231,   232,   233,   625,  1440,   235,     0,   236,
     237,   628,   239,     0,   240,     0,   241,   631,     0,   633,
     244,   245,   634,   635,   248,     0,   249,   250,     0,     0,
     639,   640,   253,   254,     0,   255,   256,   257,   258,   259,
     260,   261,   642,   263,   264,   265,   266,     0,   267,   268,
     269,   270,   271,   272,   273,     0,   274,   645,   646,   277,
     278,   279,   280,   281,   647,   648,     0,   650,     0,   285,
     652,   653,   288,   654,   290,   291,   292,   293,   294,   295,
     296,     0,     0,   297,   657,   299,   658,     0,   301,   302,
     303,   304,   305,   306,   307,   308,   660,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
     323,   324,   325,   326,   327,   328,   329,   661,   662,   663,
     333,   334,   335,   336,   664,     0,   338,   339,   666,   341,
       0,   668,   343,   669,   345,   346,   347,     0,   348,   349,
    1441,     0,   350,   351,   352,     0,     0,   353,   354,   675,
     676,   357,   677,   678,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,     0,     0,     0,
       0,   373,   374,   683,   684,   377,   378,   685,   380,   381,
     382,     0,   383,   384,   385,   386,   387,   388,   389,   390,
       0,   391,   392,   393,   688,   395,   396,   397,   398,     0,
     399,   400,   401,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,     0,   413,   414,   691,   416,   417,
     418,   692,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   429,   430,   431,   432,     0,   694,   433,   434,   435,
     436,   437,   438,   695,   440,   441,   442,     0,   697,   444,
     445,   698,   447,     0,   448,   449,   450,   451,   452,   453,
     454,   455,   456,   457,   458,   459,   460,   700,   462,   701,
       0,     0,   464,   465,     0,   466,   705,   468,   469,   470,
     471,   472,     0,   473,   707,   708,     0,   476,     0,   477,
     478,   711,   480,   712,  1442,   482,   483,   714,   485,   486,
     487,   488,   489,     0,     0,   490,   491,   492,     0,   493,
     494,   495,   496,     0,   497,   498,   499,   500,   501,   719,
     720,     0,   504,   722,   506,   507,   508,   509,   510,   511,
     512,   513,   514,     0,     0,   515,     0,     0,   516,   517,
     518,   519,   520,   521,   727,   728,   729,   730,   731,   732,
     733,   734,   735,   736,   737,   533,   534,   535,   536,     0,
       0,  1709,     0,     0,  1710,     0,  1443,  1444,  1711,  1712,
    1713,  1714,  1715,  1716,  1717,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1718,     0,     0,     0,     0,     0,  2281,     0,     0,     0,
       0,  1720,  1709,     0,     0,  1710,     0,     0,  1721,  1711,
    1712,  1713,  1714,  1715,  1716,  1717,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1718,     0,     0,     0,  1722,     0,     0,     0,     0,
       0,     0,  1720,  1709,     0,     0,  1710,     0,     0,  1721,
    1711,  1712,  1713,  1714,  1715,  1716,  1717,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1718,     0,     0,     0,  1722,     0,     0,     0,
       0,  2282,     0,  1720,     0,     0,  1709,     0,     0,  1710,
    1721,     0,     0,  1711,  1712,  1713,  1714,  1715,  1716,  1717,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1718,     0,  1722,     0,     0,
    1998,     0,     0,     0,     0,     0,  1720,     0,     0,     0,
       0,     0,     0,  1721,  1723,     0,     0,  1709,     0,     0,
    1710,     0,     0,     0,  1711,  1712,  1713,  1714,  1715,  1716,
    1717,     0,     0,  1724,     0,     0,     0,     0,  1725,     0,
    1722,     0,     0,     0,     0,  2034,  1718,     0,     0,     0,
    2035,     0,     0,     0,     0,  1723,     0,  1720,     0,     0,
       0,  1726,  1727,     0,  1721,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1724,     0,     0,  1728,     0,  1725,
       0,     0,     0,     0,     0,  3930,     0,     0,     0,     0,
       0,  1722,     0,     0,     0,     0,  1723,     0,     0,     0,
       0,     0,  1726,  1727,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1724,  1729,     0,  1728,  1730,
    1725,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1731,     0,     0,  1732,     0,     0,  1723,
       0,     0,     0,  1726,  1727,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1729,  1724,  1728,
    1730,     0,     0,  1725,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1731,     0,     0,  1732,     0,     0,
       0,     0,     0,     0,     0,     0,  1726,  1727,     0,     0,
    1723,     0,     0,     0,     0,     0,     0,     0,  1729,     0,
       0,  1730,  1728,     0,     0,     0,     0,     0,     0,  1724,
       0,     0,     0,     0,  1725,  1731,     0,     0,  1732,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1726,  1727,  1733,
       0,  1729,     0,     0,  1730,     0,     0,     0,     0,  3931,
       0,     0,     0,  1728,     0,     0,     0,     0,  1731,     0,
       0,  1732,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1733,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1729,     0,     0,  1730,     0,     0,     0,     0,
       0,     0,     0,     0,  2285,     0,     0,     0,     0,  1731,
       0,     0,  1732,     0,     0,     0,     0,     0,     0,     0,
       0,  1733,     0,  1709,     0,     0,  1710,     0,     0,     0,
    1711,  1712,  1713,  1714,  1715,  1716,  1717,  2005,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1734,     0,  1718,  1735,  1736,  1737,     0,  1738,  1739,  1740,
    1741,  1742,  1743,  1720,  1733,     0,     0,     0,     0,     0,
    1721,     0,     0,     0,     0,     0,  1709,     0,     0,  1710,
       0,     0,     0,  1711,  1712,  1713,  1714,  1715,  1716,  1717,
       0,  1734,     0,     0,  1735,  1736,  1737,  1722,  1738,  1739,
    1740,  1741,  1742,  1743,     0,  1718,     0,     0,     0,     0,
    2040,     0,     0,     0,     0,  1733,  1720,     0,     0,     0,
       0,     0,     0,  1721,     0,     0,     0,     0,     0,     0,
       0,     0,  1734,     0,     0,  1735,  1736,  1737,     0,  1738,
    1739,  1740,  1741,  1742,  1743,     0,     0,     0,     0,     0,
    1722,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1734,     0,     0,  1735,  1736,
    1737,     0,  1738,  1739,  1740,  1741,  1742,  1743,     0,     0,
       0,  2045,     0,     0,     0,     0,  1723,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1724,     0,     0,     0,     0,
    1725,     0,     0,     0,     0,     0,  1734,     0,     0,  1735,
    1736,  1737,     0,  1738,  1739,  1740,  1741,  1742,  1743,     0,
       0,     0,     0,  1726,  1727,     0,     0,     0,     0,  1723,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1728,
       0,     0,     0,     0,     0,     0,     0,     0,  1724,     0,
       0,     0,     0,  1725,  1709,     0,     0,  1710,     0,     0,
       0,  1711,  1712,  1713,  1714,  1715,  1716,  1717,     0,     0,
       0,     0,     0,     0,     0,     0,  1726,  1727,  1729,     0,
       0,  1730,     0,  1718,     0,     0,     0,     0,  2047,     0,
       0,     0,  1728,     0,  1720,  1731,     0,     0,  1732,     0,
       0,  1721,     0,     0,     0,     0,  1709,     0,     0,  1710,
       0,     0,     0,  1711,  1712,  1713,  1714,  1715,  1716,  1717,
       0,     0,     0,     0,     0,     0,     0,     0,  1722,     0,
       0,  1729,     0,     0,  1730,  1718,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1720,     0,  1731,     0,
       0,  1732,     0,  1721,     0,     0,     0,     0,  1709,     0,
       0,  1710,     0,     0,     0,  1711,  1712,  1713,  1714,  1715,
    1716,  1717,     0,     0,     0,     0,     0,     0,     0,     0,
    1722,     0,     0,     0,     0,     0,     0,  1718,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1720,     0,
       0,  1733,     0,     0,     0,  1721,     0,     0,     0,     0,
    1709,     0,     0,  1710,     0,     0,     0,  1711,  1712,  1713,
    1714,  1715,  1716,  1717,     0,     0,     0,  1723,     0,     0,
       0,     0,  1722,     0,     0,     0,     0,     0,     0,  1718,
       0,     0,     0,     0,  2919,     0,  1724,     0,     0,     0,
    1720,  1725,     0,     0,  1733,     0,     0,  1721,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  2168,
       0,     0,     0,     0,  1726,  1727,     0,     0,     0,  1723,
       0,     0,     0,     0,  1722,     0,     0,     0,     0,     0,
    1728,     0,     0,     0,     0,     0,     0,     0,  1724,     0,
       0,     0,     0,  1725,     0,     0,     0,     0,     0,     0,
       0,     0,  1734,     0,     0,  1735,  1736,  1737,     0,  1738,
    1739,  1740,  1741,  1742,  1743,     0,  1726,  1727,     0,  1729,
       0,  1723,  1730,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1728,     0,     0,     0,  1731,     0,     0,  1732,
    1724,     0,     0,     0,     0,  1725,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1734,     0,     0,  1735,  1736,
    1737,     0,  1738,  1739,  1740,  1741,  1742,  1743,  1726,  1727,
       0,  1729,     0,  1723,  1730,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1728,     0,     0,     0,  1731,     0,
       0,  1732,  1724,     0,     0,     0,     0,  1725,  1709,     0,
       0,  1710,     0,     0,     0,  1711,  1712,  1713,  1714,  1715,
    1716,  1717,     0,     0,     0,     0,     0,     0,     0,     0,
    1726,  1727,     0,  1729,     0,     0,  1730,  1718,     0,     0,
       0,     0,     0,     0,     0,     0,  1728,     0,  1720,     0,
    1731,     0,  1733,  1732,     0,  1721,     0,     0,     0,     0,
    1709,     0,     0,  1710,     0,     0,     0,  1711,  1712,  1713,
    1714,  1715,  1716,  1717,     0,     0,     0,     0,     0,     0,
       0,     0,  1722,     0,     0,  1729,     0,     0,  1730,  1718,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1720,     0,  1731,     0,  1733,  1732,     0,  1721,     0,     0,
       0,     0,  1709,     0,     0,  1710,     0,     0,     0,  1711,
    1712,  1713,  1714,  1715,  1716,  1717,     0,     0,     0,     0,
       0,     0,     0,     0,  1722,     0,     0,     0,     0,     0,
       0,  1718,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1720,     0,     0,     0,  1733,     0,     0,  1721,
       0,     0,     0,  1734,     0,     0,  1735,  1736,  1737,     0,
    1738,  1739,  1740,  1741,  1742,  1743,     0,     0,     0,     0,
       0,  1723,     0,     0,     0,     0,  1722,     0,     0,     0,
    2906,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1724,     0,     0,     0,     0,  1725,     0,     0,  1733,     0,
       0,     0,     0,     0,     0,  1734,     0,     0,  1735,  1736,
    1737,     0,  1738,  1739,  1740,  1741,  1742,  1743,  1726,  1727,
       0,     0,     0,  1723,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1728,     0,     0,     0,     0,     0,
       0,     0,  1724,     0,     0,     0,     0,  1725,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1734,     0,     0,
    1735,  1736,  1737,     0,  1738,  1739,  1740,  1741,  1742,  1743,
    1909,  1727,     0,  1729,     0,  1723,  1730,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1728,     0,     0,     0,
    1731,     0,     0,  1732,  1724,     0,     0,     0,     0,  1725,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1734,
       0,     0,  1735,  1736,  1737,     0,  1738,  1739,  1740,  1741,
    1742,  1743,  1726,  1727,     0,  1729,     0,     0,  1730,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1728,     0,
       0,     0,  1731,     0,     0,  1732,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1729,     0,     0,
    1730,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1731,     0,  1733,  1732,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1733,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1733,     0,     0,     0,     0,     0,     0,  1734,     0,     0,
    1735,  1736,  1737,     0,  1738,  1739,  1740,  1741,  1742,  1743,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1734,
       0,     0,  1735,  1736,  1737,     0,  1738,  1739,  1740,  1741,
    1742,  1743,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   579,     0,  2191,     0,     0,
       0,  1734,     0,     0,  1735,  1736,  1737,     0,  1738,  1739,
    1740,  1741,  2302,  1743,   120,   121,   122,   123,   124,   125,
     126,   127,   128,   580,   129,   130,   131,   581,   582,   583,
     584,   585,   132,   586,   587,   588,   589,   134,   135,   590,
     136,   137,   138,   591,   140,   141,   142,   592,   593,   594,
     595,   596,   597,   148,   149,   150,   151,   152,   153,   598,
     599,   154,   155,   156,   157,   600,   601,   160,   602,   161,
     162,   163,   164,   603,   604,   605,   606,   607,   168,   169,
     170,   171,   172,   608,   174,   175,   176,   609,   177,   178,
     179,   180,   181,   182,   610,   611,   184,   185,   186,   187,
     188,   189,   190,   191,   192,   193,   613,   195,   196,   614,
     198,   615,   199,   616,   200,   201,   202,   203,   204,   205,
     617,   618,   206,   207,   208,   209,   210,   619,   620,   211,
     212,   213,   214,   215,   216,   217,   621,   218,   219,   220,
     622,   221,   222,   223,   623,   224,   225,   226,   227,   624,
     229,   230,   231,   232,   233,   625,   626,   235,   627,   236,
     237,   628,   239,   629,   240,   630,   241,   631,   632,   633,
     244,   245,   634,   635,   248,   636,   249,   250,   637,   638,
     639,   640,   253,   254,   641,   255,   256,   257,   258,   259,
     260,   261,   642,   263,   264,   265,   266,   643,   267,   268,
     269,   270,   271,   272,   273,   644,   274,   645,   646,   277,
     278,   279,   280,   281,   647,   648,   649,   650,   651,   285,
     652,   653,   288,   654,   290,   291,   292,   293,   294,   295,
     296,   655,   656,   297,   657,   299,   658,   659,   301,   302,
     303,   304,   305,   306,   307,   308,   660,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
     323,   324,   325,   326,   327,   328,   329,   661,   662,   663,
     333,   334,   335,   336,   664,   665,   338,   339,   666,   341,
     667,   668,   343,   669,   345,   346,   347,   670,   348,   349,
     671,   672,   350,   351,   352,   673,   674,   353,   354,   675,
     676,   357,   677,   678,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,   679,   680,   681,
     682,   373,   374,   683,   684,   377,   378,   685,   380,   381,
     382,   686,   383,   384,   385,   386,   387,   388,   389,   390,
     687,   391,   392,   393,   688,   395,   396,   397,   398,   689,
     399,   400,   401,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   690,   413,   414,   691,   416,   417,
     418,   692,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   429,   430,   431,   432,   693,   694,   433,   434,   435,
     436,   437,   438,   695,   440,   441,   442,   696,   697,   444,
     445,   698,   447,   699,   448,   449,   450,   451,   452,   453,
     454,   455,   456,   457,   458,   459,   460,   700,   462,   701,
     702,   703,   464,   465,   704,   466,   705,   468,   469,   470,
     471,   472,   706,   473,   707,   708,   709,   476,   710,   477,
     478,   711,   480,   712,   713,   482,   483,   714,   485,   486,
     487,   488,   489,   715,   716,   490,   491,   492,   717,   493,
     494,   495,   496,   718,   497,   498,   499,   500,   501,   719,
     720,   721,   504,   722,   506,   507,   508,   509,   510,   511,
     512,   513,   514,   723,   724,   515,   725,   726,   516,   517,
     518,   519,   520,   521,   727,   728,   729,   730,   731,   732,
     733,   734,   735,   736,   737,   533,   534,   535,   536,   579,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   120,   121,
     122,   123,   124,   125,   126,   127,   128,   580,   129,   130,
     131,   581,   582,   583,   584,   585,   132,   586,   587,   588,
     589,   134,   135,   590,   136,   137,   138,   591,   140,   141,
     142,   592,   593,   594,   595,   596,   597,   148,   149,   150,
     151,   152,   153,   598,   599,   154,   155,   156,   157,   600,
     601,   160,   602,   161,   162,   163,   164,   603,   604,   605,
     606,   607,   168,   169,   170,   171,   172,   608,   174,   175,
     176,   609,   177,   178,   179,   180,   181,   182,   610,   611,
     184,   185,   186,   187,   188,   189,   612,   191,   192,   193,
     613,   195,   196,   614,   198,   615,   199,   616,   200,   201,
     202,   203,   204,   205,   617,   618,   206,   207,   208,   209,
     210,   619,   620,   211,   212,   213,   214,   215,   216,   217,
     621,   218,   219,   220,   622,   221,   222,   223,   623,   224,
     225,   226,   227,   624,   229,   230,   231,   232,   233,   625,
     626,   235,   627,   236,   237,   628,   239,   629,   240,   630,
     241,   631,   632,   633,   244,   245,   634,   635,   248,   636,
     249,   250,   637,   638,   639,   640,   253,   254,   641,   255,
     256,   257,   258,   259,   260,   261,   642,   263,   264,   265,
     266,   643,   267,   268,   269,   270,   271,   272,   273,   644,
     274,   645,   646,   277,   278,   279,   280,   281,   647,   648,
     649,   650,   651,   285,   652,   653,   288,   654,   290,   291,
     292,   293,   294,   295,   296,   655,   656,   297,   657,   299,
     658,   659,   301,   302,   303,   304,   305,   306,   307,   308,
     660,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     329,   661,   662,   663,   333,   334,   335,   336,   664,   665,
     338,   339,   666,   341,   667,   668,   343,   669,   345,   346,
     347,   670,   348,   349,   671,   672,   350,   351,   352,   673,
     674,   353,   354,   675,   676,   357,   677,   678,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,   679,   680,   681,   682,   373,   374,   683,   684,   377,
     378,   685,   380,   381,   382,   686,   383,   384,   385,   386,
     387,   388,   389,   390,   687,   391,   392,   393,   688,   395,
     396,   397,   398,   689,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   690,   413,
     414,   691,   416,   417,   418,   692,   420,   421,   422,   423,
     424,   425,   426,   427,   428,   429,   430,   431,   432,   693,
     694,   433,   434,   435,   436,   437,   438,   695,   440,   441,
     442,   696,   697,   444,   445,   698,   447,   699,   448,   449,
     450,   451,   452,   453,   454,   455,   456,   457,   458,   459,
     460,   700,   462,   701,   702,   703,   464,   465,   704,   466,
     705,   468,   469,   470,   471,   472,   706,   473,   707,   708,
     709,   476,   710,   477,   478,   711,   480,   712,   713,   482,
     483,   714,   485,   486,   487,   488,   489,   715,   716,   490,
     491,   492,   717,   493,   494,   495,   496,   718,   497,   498,
     499,   500,   501,   719,   720,   721,   504,   722,   506,   507,
     508,   509,   510,   511,   512,   513,   514,   723,   724,   515,
     725,   726,   516,   517,   518,   519,   520,   521,   727,   728,
     729,   730,   731,   732,   733,   734,   735,   736,   737,   533,
     534,   535,   536,   579,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   120,   121,   122,   123,   124,   125,   126,   127,
     128,   580,   129,   130,   131,   581,   582,   583,   584,   585,
     132,   586,   587,   588,   589,   134,   135,   590,   136,   137,
     138,   591,   140,   141,   142,   592,   593,   594,   595,   596,
     597,   148,   149,   150,   151,   152,   153,   598,   599,   154,
     155,   156,   157,   600,   601,   160,   602,   161,   162,   163,
     164,   603,   604,   605,   606,   607,   168,   169,   170,   171,
     172,   608,   174,   175,   176,   609,   177,   178,   179,   180,
     181,   182,   610,   611,   184,   185,   186,   187,   188,   189,
     190,   191,   192,   193,   613,   195,   196,   614,   198,   615,
     199,   616,   200,   201,   202,   203,   204,   205,   617,   618,
     206,   207,   208,   209,   210,   619,   620,   211,   212,   213,
     214,   215,   216,   217,   621,   218,   219,   220,   622,   221,
     222,   223,   623,   224,   225,   226,   227,   624,   229,   230,
     231,   232,   233,   625,   626,   235,   627,   236,   237,   628,
     239,   629,   240,   630,   241,   631,   632,   633,   244,   245,
     634,   635,   248,   636,   249,   250,   637,   638,   639,   640,
     253,   254,   641,   255,   256,   257,   258,   259,  1028,   261,
     642,   263,   264,   265,   266,   643,   267,   268,   269,   270,
     271,   272,   273,   644,   274,   645,   646,   277,   278,   279,
     280,   281,   647,   648,   649,   650,   651,   285,   652,   653,
     288,   654,   290,   291,   292,   293,   294,   295,   296,   655,
     656,   297,   657,   299,   658,   659,   301,   302,   303,   304,
     305,   306,   307,   308,   660,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   661,   662,   663,   333,   334,
     335,   336,   664,   665,   338,   339,   666,   341,   667,   668,
     343,   669,   345,   346,   347,   670,   348,   349,   671,   672,
     350,   351,   352,   673,   674,   353,   354,   675,   676,   357,
     677,   678,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,   371,   372,   679,   680,   681,   682,   373,
     374,   683,   684,   377,   378,   685,   380,   381,   382,   686,
     383,   384,   385,   386,   387,   388,   389,   390,   687,   391,
     392,   393,   688,   395,   396,   397,   398,   689,   399,   400,
     401,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,   690,   413,   414,   691,   416,   417,   418,   692,
     420,   421,   422,   423,   424,   425,   426,   427,   428,   429,
     430,   431,   432,   693,   694,   433,   434,   435,   436,   437,
     438,   695,   440,   441,   442,   696,   697,   444,   445,   698,
     447,   699,   448,   449,   450,   451,   452,   453,   454,   455,
     456,   457,   458,   459,   460,   700,   462,   701,   702,   703,
     464,   465,   704,   466,   705,   468,   469,   470,   471,   472,
     706,   473,   707,   708,   709,   476,   710,   477,   478,   711,
     480,   712,   713,   482,   483,   714,   485,   486,   487,   488,
     489,   715,   716,   490,   491,   492,   717,   493,   494,   495,
     496,   718,   497,   498,   499,   500,   501,   719,   720,   721,
     504,   722,   506,   507,   508,   509,   510,   511,   512,   513,
     514,   723,   724,   515,   725,   726,   516,   517,   518,   519,
     520,   521,   727,   728,   729,   730,   731,   732,   733,   734,
     735,   736,   737,   533,   534,   535,   536,   579,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   120,   121,   122,   123,
     124,   125,   126,   127,   128,   580,   129,   130,   131,   581,
     582,   583,   584,   585,   132,   586,   587,   588,   589,   134,
     135,   590,   136,   137,   138,   591,   140,   141,   142,   592,
     593,   594,   595,   596,   597,   148,   149,   150,   151,   152,
     153,   598,   599,   154,   155,   156,   157,   600,   601,   160,
     602,   161,   162,   163,   164,   603,   604,   605,   606,   607,
     168,   169,   170,   171,   172,   608,   174,   175,   176,   609,
     177,   178,   179,   180,   181,   182,   610,   611,   184,   185,
     186,   187,   188,   189,   190,   191,   192,   193,   613,   195,
     196,   614,   198,   615,   199,   616,   200,   201,   202,   203,
     204,   205,   617,   618,   206,   207,   208,   209,   210,   619,
     620,   211,   212,   213,   214,   215,   216,   217,   621,   218,
     219,   220,   622,   221,   222,   223,   623,   224,   225,   226,
     227,   624,   229,   230,   231,   232,   233,   625,   626,   235,
     627,   236,   237,   628,   239,   629,   240,   630,   241,   631,
     632,   633,   244,   245,   634,   635,   248,   636,   249,   250,
     637,   638,   639,   640,   253,   254,   641,   255,   256,   257,
     258,   259,   260,   261,   642,   263,   264,   265,   266,   643,
     267,   268,   269,   270,   271,   272,   273,   644,   274,   645,
     646,   277,   278,   279,   280,   281,   647,   648,   649,   650,
     651,   285,   652,   653,   288,   654,   290,   291,   292,   293,
     294,   295,   296,   655,   656,   297,   657,   299,   658,   659,
     301,   302,   303,   304,   305,   306,   307,   308,   660,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,   322,   323,   324,   325,   326,   327,   328,   329,   661,
     662,   663,   333,   334,   335,   336,   664,   665,   338,   339,
     666,   341,   667,   668,   343,   669,   345,   346,   347,   670,
     348,   349,   671,   672,   350,   351,   352,   673,   674,   353,
     354,   675,   676,   357,   677,   678,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,   371,   372,   679,
     680,   681,   682,   373,   374,   683,   684,   377,   378,   685,
     380,   381,   382,   686,   383,   384,   385,   386,   387,   388,
     389,   390,   687,   391,   392,   393,   688,   395,   396,   397,
     398,   689,   399,   400,   401,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   690,   413,   414,   691,
     416,   417,   418,   692,   420,   421,   422,   423,   424,   425,
     426,   427,   428,   429,   430,   431,   432,   693,   694,   433,
     434,   435,   436,   437,   438,   695,   440,   441,   442,   696,
     697,   444,   445,   698,   447,   699,   448,   449,   450,   451,
     452,   453,   454,   455,   456,   457,   458,   459,   460,   700,
     462,   701,   702,   703,   464,   465,   704,   466,   705,   468,
     469,   470,   471,   472,   706,   473,   707,   708,   709,   476,
     710,   477,   478,   711,   480,   712,   713,   482,   483,   714,
     485,   486,   487,   488,   489,   715,   716,   490,   491,   492,
     717,   493,   494,   495,   496,   718,   497,   498,   499,   500,
     501,   719,   720,   721,   504,   722,   506,   507,   508,   509,
     510,   511,   512,   513,   514,   723,   724,   515,   725,   726,
     516,   517,   518,   519,   520,   521,   727,   728,   729,   730,
     731,   732,   733,   734,   735,   736,   737,   533,   534,   535,
     536,   579,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     120,   121,   122,   123,   124,  2347,   126,   127,   128,   580,
     129,   130,   131,   581,   582,   583,   584,   585,   132,   586,
     587,   588,   589,   134,   135,   590,   136,   137,   138,   591,
     140,   141,   142,   592,   593,   594,   595,   596,   597,   148,
     149,   150,   151,   152,   153,   598,   599,   154,   155,   156,
     157,   600,   601,   160,   602,   161,   162,   163,   164,   603,
     604,   605,   606,   607,   168,   169,   170,   171,   172,   608,
     174,   175,   176,   609,   177,   178,   179,   180,   181,   182,
     610,   611,   184,   185,   186,   187,   188,   189,   190,   191,
     192,   193,   613,   195,   196,   614,   198,   615,   199,   616,
     200,   201,   202,   203,   204,   205,   617,   618,   206,   207,
     208,   209,   210,   619,   620,   211,   212,   213,  2348,   215,
     216,   217,   621,   218,   219,   220,   622,   221,   222,   223,
     623,   224,   225,   226,   227,   624,   229,   230,   231,   232,
     233,   625,   626,   235,   627,   236,   237,   628,   239,   629,
     240,   630,   241,   631,   632,   633,   244,   245,   634,   635,
     248,   636,   249,   250,   637,   638,   639,   640,   253,   254,
     641,   255,   256,   257,   258,   259,   260,   261,   642,   263,
     264,   265,   266,   643,   267,   268,   269,   270,   271,   272,
     273,   644,   274,   645,   646,   277,   278,   279,   280,   281,
     647,   648,   649,   650,   651,   285,   652,   653,   288,   654,
     290,   291,   292,   293,   294,   295,   296,   655,   656,   297,
     657,   299,   658,   659,   301,   302,   303,   304,   305,   306,
     307,   308,   660,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,   323,   324,   325,   326,
     327,   328,   329,   661,   662,   663,   333,   334,   335,   336,
     664,   665,   338,   339,   666,   341,   667,   668,   343,   669,
     345,   346,   347,   670,   348,   349,   671,   672,   350,   351,
     352,   673,   674,   353,   354,   675,   676,   357,   677,   678,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
     370,   371,   372,   679,   680,   681,   682,   373,   374,   683,
     684,   377,   378,   685,   380,   381,   382,   686,   383,   384,
     385,   386,   387,   388,   389,   390,   687,   391,   392,   393,
     688,   395,   396,   397,   398,   689,   399,   400,   401,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     690,   413,   414,   691,   416,   417,   418,   692,   420,   421,
     422,   423,   424,   425,   426,   427,   428,   429,   430,   431,
     432,   693,   694,   433,   434,   435,   436,   437,  2349,   695,
     440,   441,   442,   696,   697,   444,   445,   698,   447,   699,
     448,   449,   450,   451,   452,   453,   454,   455,   456,   457,
     458,   459,   460,   700,   462,   701,   702,   703,   464,   465,
     704,   466,   705,   468,   469,   470,   471,   472,   706,   473,
     707,   708,   709,   476,   710,   477,   478,   711,   480,   712,
     713,   482,   483,   714,   485,   486,   487,   488,   489,   715,
     716,   490,   491,   492,   717,   493,   494,   495,   496,   718,
     497,   498,   499,   500,   501,   719,   720,   721,   504,   722,
     506,   507,   508,   509,   510,   511,   512,   513,   514,   723,
     724,   515,   725,   726,   516,   517,   518,   519,   520,   521,
     727,   728,   729,   730,   731,   732,   733,   734,   735,   736,
     737,   533,   534,   535,   536,  1053,     0,   843,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   120,   121,   122,   123,   124,   125,
     126,   127,   128,     0,   129,   130,   131,     0,     0,     0,
     584,     0,   132,     0,     0,     0,   589,   134,   135,     0,
     136,   137,   138,   591,   140,   141,   142,   592,   593,   594,
     595,   596,     0,   148,   149,   150,   151,   152,   153,     0,
       0,   154,   155,   156,   157,   600,   601,   160,     0,   161,
     162,   163,   164,   603,     0,   605,     0,   607,   168,   169,
     170,   171,   172,   608,   174,   175,   176,     0,   177,   178,
     179,   180,   181,   182,     0,   611,   184,   185,   186,   187,
     188,   189,   190,   191,   192,   193,   613,   195,   196,   614,
     198,     0,   199,     0,   200,   201,   202,   203,   204,   205,
       0,     0,   206,   207,   208,   209,   210,     0,     0,   211,
     212,   213,   214,   215,   216,   217,     0,   218,   219,   220,
       0,   221,   222,   223,     0,   224,   225,   226,   227,   624,
     229,   230,   231,   232,   233,   625,  1440,   235,     0,   236,
     237,   628,   239,     0,   240,     0,   241,   631,     0,   633,
     244,   245,   634,   635,   248,     0,   249,   250,     0,     0,
     639,   640,   253,   254,     0,   255,   256,   257,   258,   259,
     260,   261,   642,   263,   264,   265,   266,     0,   267,   268,
     269,   270,   271,   272,   273,     0,   274,   645,   646,   277,
     278,   279,   280,   281,   647,   648,     0,   650,     0,   285,
     652,   653,   288,   654,   290,   291,   292,   293,   294,   295,
     296,     0,     0,   297,   657,   299,   658,     0,   301,   302,
     303,   304,   305,   306,   307,   308,   660,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
     323,   324,   325,   326,   327,   328,   329,   661,   662,   663,
     333,   334,   335,   336,   664,     0,   338,   339,   666,   341,
       0,   668,   343,   669,   345,   346,   347,     0,   348,   349,
    1441,     0,   350,   351,   352,     0,     0,   353,   354,   675,
     676,   357,   677,   678,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,     0,     0,     0,
       0,   373,   374,   683,   684,   377,   378,   685,   380,   381,
     382,     0,   383,   384,   385,   386,   387,   388,   389,   390,
       0,   391,   392,   393,   688,   395,   396,   397,   398,     0,
     399,   400,   401,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,     0,   413,   414,   691,   416,   417,
     418,   692,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   429,   430,   431,   432,     0,   694,   433,   434,   435,
     436,   437,   438,   695,   440,   441,   442,     0,   697,   444,
     445,   698,   447,     0,   448,   449,   450,   451,   452,   453,
     454,   455,   456,   457,   458,   459,   460,   700,   462,   701,
       0,     0,   464,   465,     0,   466,   705,   468,   469,   470,
     471,   472,     0,   473,   707,   708,     0,   476,     0,   477,
     478,   711,   480,   712,  1442,   482,   483,   714,   485,   486,
     487,   488,   489,     0,     0,   490,   491,   492,     0,   493,
     494,   495,   496,     0,   497,   498,   499,   500,   501,   719,
     720,     0,   504,   722,   506,   507,   508,   509,   510,   511,
     512,   513,   514,     0,     0,   515,     0,     0,   516,   517,
     518,   519,   520,   521,   727,   728,   729,   730,   731,   732,
     733,   734,   735,   736,   737,   533,   534,   535,   536,  1053,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   120,   121,
     122,   123,   124,   125,   126,   127,   128,     0,   129,   130,
     131,     3,     4,     0,   584,     0,   132,     0,     0,     0,
     589,   134,   135,     0,   136,   137,   138,   591,   140,   141,
     142,   592,   593,   594,   595,   596,     0,   148,   149,   150,
     151,   152,   153,     0,     0,   154,   155,   156,   157,   600,
     601,   160,     0,   161,   162,   163,   164,   603,     0,   605,
       0,   607,   168,   169,   170,   171,   172,   608,   174,   175,
     176,     0,   177,   178,   179,   180,   181,   182,     0,   611,
     184,   185,   186,   187,   188,   189,   190,   191,   192,   193,
     613,   195,   196,   614,   198,     0,   199,     0,   200,   201,
     202,   203,   204,   205,     0,     0,   206,   207,   208,   209,
     210,     0,     0,   211,   212,   213,   214,   215,   216,   217,
       0,   218,   219,   220,     0,   221,   222,   223,     0,   224,
     225,   226,   227,   624,   229,   230,   231,   232,   233,   625,
       0,   235,     0,   236,   237,   628,   239,     0,   240,     0,
     241,   631,     0,   633,   244,   245,   634,   635,   248,     0,
     249,   250,     0,     0,   639,   640,   253,   254,     0,   255,
     256,   257,   258,   259,   260,   261,   642,   263,   264,   265,
     266,     0,   267,   268,   269,   270,   271,   272,   273,     0,
     274,   645,   646,   277,   278,   279,   280,   281,   647,   648,
       0,   650,     0,   285,   652,   653,   288,   654,   290,   291,
     292,   293,   294,   295,   296,     0,     0,   297,   657,   299,
     658,     0,   301,   302,   303,   304,   305,   306,   307,   308,
     660,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     329,   661,   662,   663,   333,   334,   335,   336,   664,     0,
     338,   339,   666,   341,     0,   668,   343,   669,   345,   346,
     347,     0,   348,   349,     0,     0,   350,   351,   352,     0,
       0,   353,   354,   675,   676,   357,   677,   678,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,     0,     0,     0,     0,   373,   374,   683,   684,   377,
     378,   685,   380,   381,   382,     0,   383,   384,   385,   386,
     387,   388,   389,   390,     0,   391,   392,   393,   688,   395,
     396,   397,   398,     0,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,     0,   413,
     414,   691,   416,   417,   418,   692,   420,   421,   422,   423,
     424,   425,   426,   427,   428,   429,   430,   431,   432,     0,
     694,   433,   434,   435,   436,   437,   438,   695,   440,   441,
     442,     0,   697,   444,   445,   698,   447,     0,   448,   449,
     450,   451,   452,   453,   454,   455,   456,   457,   458,   459,
     460,   700,   462,   701,     0,     0,   464,   465,     0,   466,
     705,   468,   469,   470,   471,   472,     0,   473,   707,   708,
       0,   476,     0,   477,   478,   711,   480,   712,     0,   482,
     483,   714,   485,   486,   487,   488,   489,     0,     0,   490,
     491,   492,     0,   493,   494,   495,   496,     0,   497,   498,
     499,   500,   501,   719,   720,     0,   504,   722,   506,   507,
     508,   509,   510,   511,   512,   513,   514,     0,     0,   515,
       0,     0,   516,   517,   518,   519,   520,   521,   727,   728,
     729,   730,   731,   732,   733,   734,   735,   736,   737,   533,
     534,   535,   536,   119,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   120,   121,   122,   123,   124,   125,   126,   127,
     128,     0,   129,   130,   131,     0,     0,     0,     0,     0,
     132,     0,     0,     0,   133,   134,   135,     0,   136,   137,
     138,   139,   140,   141,   142,   143,   144,   145,   146,   147,
       0,   148,   149,   150,   151,   152,   153,     0,   812,   154,
     155,   156,   157,   158,   159,   160,     0,   161,   162,   163,
     164,   813,     0,   814,     0,   167,   168,   169,   170,   171,
     172,   173,   174,   175,   176,     0,   177,   178,   179,   180,
     181,   182,     0,   183,   184,   185,   186,   187,   188,   189,
     190,   191,   192,   193,   194,   195,   196,   197,   198,     0,
     199,     0,   200,   201,   202,   203,   204,   205,     0,     0,
     206,   207,   208,   209,   210,     0,     0,   211,   212,   213,
     214,   215,   216,   217,     0,   218,   219,   220,     0,   221,
     222,   223,     0,   224,   225,   226,   227,   228,   229,   230,
     231,   232,   233,   815,     0,   235,     0,   236,   237,   238,
     239,     0,   240,     0,   241,   242,     0,   243,   244,   245,
     246,   247,   248,     0,   249,   250,     0,     0,   251,   252,
     253,   254,     0,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,     0,   267,   268,   269,   270,
     271,   272,   273,     0,   274,   275,   276,   277,   278,   279,
     280,   281,   282,   283,     0,   284,     0,   285,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,     0,
       0,   297,   298,   299,   300,     0,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,     0,   338,   339,   340,   341,     0,   818,
     343,   344,   345,   346,   347,     0,   348,   349,     0,     0,
     350,   351,   352,     0,     0,   353,   354,   355,   356,   357,
     358,   820,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,   371,   372,     0,     0,     0,     0,   373,
     374,   821,   376,   377,   378,   379,   380,   381,   382,     0,
     383,   384,   385,   386,   387,   388,   389,   390,     0,   391,
     392,   393,   394,   395,   396,   397,   398,     0,   399,   400,
     401,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,     0,   413,   414,   415,   416,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,   428,   429,
     430,   431,   432,     0,     0,   433,   434,   435,   436,   437,
     438,   439,   440,   441,   442,     0,   443,   444,   445,   446,
     447,     0,   448,   449,   450,   451,   452,   453,   454,   455,
     456,   457,   458,   459,   460,   461,   462,   823,     0,     0,
     464,   465,     0,   466,   467,   468,   469,   470,   471,   472,
       0,   473,   474,   475,     0,   476,     0,   477,   478,   824,
     480,   825,     0,   482,   483,   826,   485,   486,   487,   488,
     489,     0,     0,   490,   491,   492,     0,   493,   494,   495,
     496,     0,   497,   498,   499,   500,   501,   502,   503,     0,
     504,   505,   506,   507,   508,   509,   510,   511,   512,   513,
     514,     0,     0,   515,     0,     0,   516,   517,   518,   519,
     520,   521,   522,   523,   524,   525,   526,   527,   528,   529,
     530,   531,   532,   533,   534,   535,   536,   119,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   120,   121,   122,   123,
     124,   125,   126,   127,   128,     0,   129,   130,   131,     0,
       0,     0,     0,     0,   132,     0,     0,     0,   133,   134,
     135,     0,   136,   137,   138,   139,   140,   141,   142,   143,
     144,   145,   146,   147,     0,   148,   149,   150,   151,   152,
     153,     0,     0,   154,   155,   156,   157,   158,   159,   160,
       0,   161,   162,   163,   164,   165,     0,   166,     0,   167,
     168,   169,   170,   171,   172,   173,   174,   175,   176,     0,
     177,   178,   179,   180,   181,   182,     0,   183,   184,   185,
     186,   187,   188,   189,   190,   191,   192,   193,   194,   195,
     196,   197,   198,     0,   199,     0,   200,   201,   202,   203,
     204,   205,     0,     0,   206,   207,   208,   209,   210,     0,
       0,   211,   212,   213,   214,   215,   216,   217,     0,   218,
     219,   220,     0,   221,   222,   223,     0,   224,   225,   226,
     227,   228,   229,   230,   231,   232,   233,   234,     0,   235,
       0,   236,   237,   238,   239,     0,   240,     0,   241,   242,
       0,   243,   244,   245,   246,   247,   248,     0,   249,   250,
       0,     0,   251,   252,   253,   254,     0,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,     0,
     267,   268,   269,   270,   271,   272,   273,     0,   274,   275,
     276,   277,   278,   279,   280,   281,   282,   283,     0,   284,
       0,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,     0,     0,   297,   298,   299,   300,     0,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,   322,   323,   324,   325,   326,   327,   328,   329,   330,
     331,   332,   333,   334,   335,   336,   337,     0,   338,   339,
     340,   341,     0,   342,   343,   344,   345,   346,   347,     0,
     348,   349,     0,     0,   350,   351,   352,     0,     0,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,   371,   372,     0,
       0,     0,     0,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,     0,   383,   384,   385,   386,   387,   388,
     389,   390,     0,   391,   392,   393,   394,   395,   396,   397,
     398,     0,   399,   400,   401,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,     0,   413,   414,   415,
     416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,   428,   429,   430,   431,   432,     0,     0,   433,
     434,   435,   436,   437,   438,   439,   440,   441,   442,     0,
     443,   444,   445,   446,   447,     0,   448,   449,   450,   451,
     452,   453,   454,   455,   456,   457,   458,   459,   460,   461,
     462,   463,     0,     0,   464,   465,     0,   466,   467,   468,
     469,   470,   471,   472,     0,   473,   474,   475,     0,   476,
       0,   477,   478,   479,   480,   481,     0,   482,   483,   484,
     485,   486,   487,   488,   489,     0,     0,   490,   491,   492,
       0,   493,   494,   495,   496,     0,   497,   498,   499,   500,
     501,   502,   503,     0,   504,   505,   506,   507,   508,   509,
     510,   511,   512,   513,   514,     0,     0,   515,     0,     0,
     516,   517,   518,   519,   520,   521,   522,   523,   524,   525,
     526,   527,   528,   529,   530,   531,   532,   533,   534,   535,
     536,   545,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     120,   121,   122,   123,   124,   125,   126,   127,   128,     0,
     129,   130,   131,     0,     0,     0,     0,     0,   132,     0,
       0,     0,     0,   134,   135,     0,   136,   137,   138,     0,
     140,   141,   142,   143,   144,     0,   146,   147,     0,   148,
     149,   150,   151,   152,   153,     0,     0,   154,   155,   156,
     157,   158,   159,   160,  1842,   161,   162,   163,   164,   165,
       0,     0,  1843,   167,   168,   169,   170,   171,   172,     0,
     174,   175,   176,  1844,   177,   178,   179,   180,   181,   182,
       0,     0,   184,   185,   186,   187,   188,   189,   190,   191,
     192,   193,   194,   195,   196,   197,   198,     0,   199,     0,
     200,   201,   202,   203,   204,   205,     0,     0,   206,   207,
     208,   209,   210,     0,     0,   211,   212,   213,   214,   215,
     216,   217,     0,   218,   219,   220,     0,   221,   222,   223,
       0,   224,   225,   226,   227,   228,   229,   230,   231,   232,
     233,   234,     0,   235,     0,   236,   237,   238,   239,     0,
     240,  1845,   241,     0,     0,     0,   244,   245,   546,     0,
     248,     0,   249,   250,     0,     0,   251,   252,   253,   254,
       0,   255,   256,   257,   258,   259,  1846,   261,     0,   263,
     264,   265,   266,     0,   267,   268,   269,   270,   271,   272,
     273,     0,   274,     0,   276,   277,   278,   279,   280,   281,
     282,   283,     0,   284,     0,   285,     0,     0,   288,     0,
     290,   291,   292,   293,   294,   295,   296,     0,     0,   297,
       0,   299,     0,     0,   301,   302,   303,   304,   305,   306,
     307,   308,   547,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,   323,   324,   325,   326,
     327,   328,   329,   330,     0,   332,   333,   334,   335,   336,
     337,     0,   338,   339,     0,   341,     0,   342,   343,   344,
     345,   346,   347,     0,   348,   349,     0,     0,   350,   351,
     352,     0,     0,   353,   354,   355,     0,   357,     0,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
     370,   371,   372,     0,     0,     0,     0,   373,   374,   375,
       0,   377,   378,   379,   380,   381,   382,  1847,   383,   384,
     385,   386,   387,   388,   389,   390,     0,   391,   392,   393,
     394,   395,   396,   397,   398,     0,   399,   400,   401,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
       0,   413,   414,     0,   416,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,   428,   429,   430,   431,
     432,     0,     0,   433,   434,   435,   436,   437,   438,   439,
     440,   441,   442,     0,     0,   444,   445,   446,   447,     0,
     448,   449,   450,   451,   452,   453,   454,   455,   456,   457,
     458,   459,   460,   548,   462,   463,     0,     0,   464,   465,
       0,   466,     0,   468,   469,   470,   471,   472,     0,   473,
     474,   475,     0,   476,     0,   477,   478,   479,   480,   481,
       0,   482,   483,   484,   485,   486,   487,   488,   489,     0,
    1848,   490,   491,   492,     0,   493,   494,   495,   496,     0,
     497,   498,   499,   500,   501,   502,   503,     0,   504,     0,
     506,   507,   508,   509,   510,   511,   512,   513,   514,     0,
       0,   515,     0,     0,   516,   517,   518,   519,   520,   521,
     522,   523,   524,   525,   526,   527,   528,   529,   530,   531,
     532,   533,   534,   535,   536,   545,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   120,   121,   122,   123,   124,   125,
     126,   127,   128,     0,   129,   130,   131,     0,     0,     0,
       0,     0,   132,     0,     0,     0,     0,   134,   135,     0,
     136,   137,   138,     0,   140,   141,   142,   143,   144,     0,
     146,   147,     0,   148,   149,   150,   151,   152,   153,     0,
       0,   154,   155,   156,   157,   158,   159,   160,  1842,   161,
     162,   163,   164,   165,     0,     0,     0,   167,   168,   169,
     170,   171,   172,     0,   174,   175,   176,  1844,   177,   178,
     179,   180,   181,   182,     0,     0,   184,   185,   186,   187,
     188,   189,   190,   191,   192,   193,   194,   195,   196,   197,
     198,     0,   199,     0,   200,   201,   202,   203,   204,   205,
       0,     0,   206,   207,   208,   209,   210,     0,     0,   211,
     212,   213,   214,   215,   216,   217,     0,   218,   219,   220,
       0,   221,   222,   223,     0,   224,   225,   226,   227,   228,
     229,   230,   231,   232,   233,   234,     0,   235,     0,   236,
     237,   238,   239,     0,   240,  1845,   241,     0,     0,     0,
     244,   245,   546,     0,   248,     0,   249,   250,     0,     0,
     251,   252,   253,   254,     0,   255,   256,   257,   258,   259,
     260,   261,     0,   263,   264,   265,   266,     0,   267,   268,
     269,   270,   271,   272,   273,     0,   274,     0,   276,   277,
     278,   279,   280,   281,   282,   283,     0,   284,     0,   285,
       0,     0,   288,     0,   290,   291,   292,   293,   294,   295,
     296,     0,     0,   297,     0,   299,  2431,     0,   301,   302,
     303,   304,   305,   306,   307,   308,   547,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
     323,   324,   325,   326,   327,   328,   329,   330,     0,   332,
     333,   334,   335,   336,   337,     0,   338,   339,     0,   341,
       0,   342,   343,   344,   345,   346,   347,     0,   348,   349,
       0,     0,   350,   351,   352,     0,     0,   353,   354,   355,
       0,   357,     0,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,     0,     0,     0,
       0,   373,   374,   375,     0,   377,   378,   379,   380,   381,
     382,  1847,   383,   384,   385,   386,   387,   388,   389,   390,
       0,   391,   392,   393,   394,   395,   396,   397,   398,     0,
     399,   400,   401,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,     0,   413,   414,     0,   416,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   429,   430,   431,   432,     0,     0,   433,   434,   435,
     436,   437,   438,   439,   440,   441,   442,     0,     0,   444,
     445,   446,   447,     0,   448,   449,   450,   451,   452,   453,
     454,   455,   456,   457,   458,   459,   460,   548,   462,   463,
       0,     0,   464,   465,     0,   466,     0,   468,   469,   470,
     471,   472,     0,   473,   474,   475,     0,   476,     0,   477,
     478,   479,   480,   481,     0,   482,   483,   484,   485,   486,
     487,   488,   489,     0,  1848,   490,   491,   492,     0,   493,
     494,   495,   496,     0,   497,   498,   499,   500,   501,   502,
     503,     0,   504,     0,   506,   507,   508,   509,   510,   511,
     512,   513,   514,     0,     0,   515,     0,     0,   516,   517,
     518,   519,   520,   521,   522,   523,   524,   525,   526,   527,
     528,   529,   530,   531,   532,   533,   534,   535,   536,   545,
       0,   573,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   120,   121,
     122,   123,   124,   125,   126,   127,   128,     0,   129,   130,
     131,     3,     4,     0,     0,     0,   132,     0,     0,     0,
       0,   134,   135,     0,   136,   137,   138,     0,   140,   141,
     142,   143,   144,     0,   146,   147,     0,   148,   149,   150,
     151,   152,   153,     0,     0,   154,   155,   156,   157,   158,
     159,   160,     0,   161,   162,   163,   164,   165,     0,     0,
       0,   167,   168,   169,   170,   171,   172,     0,   174,   175,
     176,     0,   177,   178,   179,   180,   181,   182,     0,     0,
     184,   185,   186,   187,   188,   189,   190,   191,   192,   193,
     194,   195,   196,   197,   198,     0,   199,     0,   200,   201,
     202,   203,   204,   205,     0,     0,   206,   207,   208,   209,
     210,     0,     0,   211,   212,   213,   214,   215,   216,   217,
       0,   218,   219,   220,     0,   221,   222,   223,     0,   224,
     225,   226,   227,   228,   229,   230,   231,   232,   233,   234,
       0,   235,     0,   236,   237,   238,   239,     0,   240,     0,
     241,     0,     0,     0,   244,   245,   546,     0,   248,     0,
     249,   250,     0,     0,   251,   252,   253,   254,     0,   255,
     256,   257,   258,   259,   260,   261,     0,   263,   264,   265,
     266,     0,   267,   268,   269,   270,   271,   272,   273,     0,
     274,     0,   276,   277,   278,   279,   280,   281,   282,   283,
       0,   284,     0,   285,     0,     0,   288,     0,   290,   291,
     292,   293,   294,   295,   296,     0,     0,   297,     0,   299,
       0,     0,   301,   302,   303,   304,   305,   306,   307,   308,
     547,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     329,   330,     0,   332,   333,   334,   335,   336,   337,     0,
     338,   339,     0,   341,     0,   342,   343,   344,   345,   346,
     347,     0,   348,   349,     0,     0,   350,   351,   352,     0,
       0,   353,   354,   355,     0,   357,     0,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,     0,     0,     0,     0,   373,   374,   375,     0,   377,
     378,   379,   380,   381,   382,     0,   383,   384,   385,   386,
     387,   388,   389,   390,     0,   391,   392,   393,   394,   395,
     396,   397,   398,     0,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,     0,   413,
     414,     0,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,   428,   429,   430,   431,   432,     0,
       0,   433,   434,   435,   436,   437,   438,   439,   440,   441,
     442,     0,     0,   444,   445,   446,   447,     0,   448,   449,
     450,   451,   452,   453,   454,   455,   456,   457,   458,   459,
     460,   548,   462,   463,     0,     0,   464,   465,     0,   466,
       0,   468,   469,   470,   471,   472,     0,   473,   474,   475,
       0,   476,     0,   477,   478,   479,   480,   481,     0,   482,
     483,   484,   485,   486,   487,   488,   489,     0,     0,   490,
     491,   492,     0,   493,   494,   495,   496,     0,   497,   498,
     499,   500,   501,   502,   503,     0,   504,     0,   506,   507,
     508,   509,   510,   511,   512,   513,   514,     0,     0,   515,
       0,     0,   516,   517,   518,   519,   520,   521,   522,   523,
     524,   525,   526,   527,   528,   529,   530,   531,   532,   533,
     534,   535,   536,   545,     0,   573,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   120,   121,   122,   123,   124,   125,   126,   127,
     128,   574,   129,   130,   131,     0,     0,     0,     0,     0,
     132,     0,     0,     0,     0,   134,   135,     0,   136,   137,
     138,     0,   140,   141,   142,   143,   144,     0,   146,   147,
       0,   148,   149,   150,   151,   152,   153,     0,     0,   154,
     155,   156,   157,   158,   159,   160,     0,   161,   162,   163,
     164,   165,     0,     0,     0,   167,   168,   169,   170,   171,
     172,     0,   174,   175,   176,     0,   177,   178,   179,   180,
     181,   182,     0,     0,   184,   185,   186,   187,   188,   189,
     190,   191,   192,   193,   194,   195,   196,   197,   198,     0,
     199,     0,   200,   201,   202,   203,   204,   205,     0,     0,
     206,   207,   208,   209,   210,     0,     0,   211,   212,   213,
     214,   215,   216,   217,     0,   218,   219,   220,     0,   221,
     222,   223,     0,   224,   225,   226,   227,   228,   229,   230,
     231,   232,   233,   234,     0,   235,     0,   236,   237,   238,
     239,     0,   240,     0,   241,     0,     0,     0,   244,   245,
     546,     0,   248,     0,   249,   250,     0,     0,   251,   252,
     253,   254,     0,   255,   256,   257,   258,   259,   260,   261,
       0,   263,   264,   265,   266,     0,   267,   268,   269,   270,
     271,   272,   273,     0,   274,     0,   276,   277,   278,   279,
     280,   281,   282,   283,     0,   284,     0,   285,     0,     0,
     288,     0,   290,   291,   292,   293,   294,   295,   296,     0,
       0,   297,     0,   299,     0,     0,   301,   302,   303,   304,
     305,   306,   307,   308,   547,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,     0,   332,   333,   334,
     335,   336,   337,     0,   338,   339,     0,   341,     0,   342,
     343,   344,   345,   346,   347,     0,   348,   349,     0,     0,
     350,   351,   352,     0,     0,   353,   354,   355,     0,   357,
       0,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,   371,   372,     0,     0,     0,     0,   373,
     374,   375,     0,   377,   378,   379,   575,   381,   382,     0,
     383,   384,   385,   386,   387,   388,   389,   390,     0,   391,
     392,   393,   394,   395,   396,   397,   398,     0,   399,   400,
     401,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,     0,   413,   414,     0,   416,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,   428,   429,
     430,   431,   432,     0,     0,   433,   434,   435,   436,   437,
     438,   439,   440,   441,   442,     0,     0,   444,   445,   446,
     447,     0,   448,   449,   450,   451,   452,   453,   454,   455,
     456,   457,   458,   459,   460,   548,   462,   463,     0,     0,
     464,   465,     0,   466,     0,   468,   469,   470,   471,   472,
       0,   473,   474,   475,     0,   476,     0,   477,   478,   479,
     480,   481,     0,   482,   483,   484,   485,   486,   487,   488,
     489,     0,     0,   490,   491,   492,     0,   493,   494,   495,
     496,     0,   497,   498,   499,   500,   501,   502,   503,     0,
     504,     0,   506,   507,   508,   509,   510,   511,   512,   513,
     514,     0,     0,   515,     0,     0,   516,   517,   518,   519,
     520,   521,   522,   523,   524,   525,   526,   527,   528,   529,
     530,   531,   532,   533,   534,   535,   536,   545,     0,   573,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   120,   121,   122,   123,
     124,   125,   126,   127,   128,     0,   129,   130,   131,     0,
       0,     0,     0,     0,   132,     0,     0,     0,     0,   134,
     135,     0,   136,   137,   138,     0,   140,   141,   142,   143,
     144,     0,   146,   147,     0,   148,   149,   150,   151,   152,
     153,     0,     0,   154,   155,   156,   157,   158,   159,   160,
       0,   161,   162,   163,   164,   165,     0,     0,     0,   167,
     168,   169,   170,   171,   172,     0,   174,   175,   176,     0,
     177,   178,   179,   180,   181,   182,     0,     0,   184,   185,
     186,   187,   188,   189,   190,   191,   192,   193,   194,   195,
     196,   197,   198,     0,   199,     0,   200,   201,   202,   203,
     204,   205,     0,     0,   206,   207,   208,   209,   210,     0,
       0,   211,   212,   213,   214,   215,   216,   217,     0,   218,
     219,   220,     0,   221,   222,   223,     0,   224,   225,   226,
     227,   228,   229,   230,   231,   232,   233,   234,     0,   235,
       0,   236,   237,   238,   239,     0,   240,     0,   241,     0,
       0,     0,   244,   245,   546,     0,   248,     0,   249,   250,
       0,     0,   251,   252,   253,   254,     0,   255,   256,   257,
     258,   259,   260,   261,     0,   263,   264,   265,   266,     0,
     267,   268,   269,   270,   271,   272,   273,     0,   274,     0,
     276,   277,   278,   279,   280,   281,   282,   283,     0,   284,
       0,   285,     0,     0,   288,     0,   290,   291,   292,   293,
     294,   295,   296,     0,     0,   297,     0,   299,     0,     0,
     301,   302,   303,   304,   305,   306,   307,   308,   547,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,   322,   323,   324,   325,   326,   327,   328,   329,   330,
       0,   332,   333,   334,   335,   336,   337,     0,   338,   339,
       0,   341,     0,   342,   343,   344,   345,   346,   347,     0,
     348,   349,     0,   819,   350,   351,   352,     0,     0,   353,
     354,   355,     0,   357,     0,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,   371,   372,     0,
       0,     0,     0,   373,   374,   375,     0,   377,   378,   379,
     380,   381,   382,     0,   383,   384,   385,   386,   387,   388,
     389,   390,     0,   391,   392,   393,   394,   395,   396,   397,
     398,     0,   399,   400,   401,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,     0,   413,   414,     0,
     416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,   428,   429,   430,   431,   432,     0,     0,   433,
     434,   435,   436,   437,   438,   439,   440,   441,   442,     0,
       0,   444,   445,   446,   447,     0,   448,   449,   450,   451,
     452,   453,   454,   455,   456,   457,   458,   459,   460,   548,
     462,   463,     0,     0,   464,   465,     0,   466,     0,   468,
     469,   470,   471,   472,     0,   473,   474,   475,     0,   476,
       0,   477,   478,   479,   480,   481,     0,   482,   483,   484,
     485,   486,   487,   488,   489,     0,     0,   490,   491,   492,
       0,   493,   494,   495,   496,     0,   497,   498,   499,   500,
     501,   502,   503,     0,   504,     0,   506,   507,   508,   509,
     510,   511,   512,   513,   514,     0,     0,   515,     0,     0,
     516,   517,   518,   519,   520,   521,   522,   523,   524,   525,
     526,   527,   528,   529,   530,   531,   532,   533,   534,   535,
     536,   545,     0,   573,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     120,   121,   122,   123,   124,   125,   126,   127,   128,     0,
     129,   130,   131,     0,     0,     0,     0,     0,   132,     0,
       0,     0,     0,   134,   135,     0,   136,   137,   138,     0,
     140,   141,   142,   143,   144,     0,   146,   147,     0,   148,
     149,   150,   151,   152,   153,     0,     0,   154,   155,   156,
     157,   158,   159,   160,     0,   161,   162,   163,   164,   165,
       0,     0,     0,   167,   168,   169,   170,   171,   172,     0,
     174,   175,   176,     0,   177,   178,   179,   180,   181,   182,
       0,     0,   184,   185,   186,   187,   188,   189,   190,   191,
     192,   193,   194,   195,   196,   197,   198,     0,   199,     0,
     200,   201,   202,   203,   204,   205,     0,     0,   206,   207,
     208,   209,   210,     0,     0,   211,   212,   213,   214,   215,
     216,   217,     0,   218,   219,   220,     0,   221,   222,   223,
       0,   224,   225,   226,   227,   228,   229,   230,   231,   232,
     233,   234,     0,   235,     0,   236,   237,   238,   239,     0,
     240,     0,   241,     0,     0,     0,   244,   245,   546,     0,
     248,     0,   249,   250,     0,     0,   251,   252,   253,   254,
       0,   255,   256,   257,   258,   259,   983,   261,     0,   263,
     264,   265,   266,     0,   267,   268,   269,   270,   271,   272,
     273,     0,   274,     0,   276,   277,   278,   279,   280,   281,
     282,   283,     0,   284,     0,   285,     0,     0,   288,     0,
     290,   291,   292,   293,   294,   295,   296,     0,     0,   297,
       0,   299,     0,     0,   301,   302,   303,   304,   305,   306,
     307,   308,   547,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,   323,   324,   325,   326,
     327,   328,   329,   330,     0,   332,   333,   334,   335,   336,
     337,     0,   338,   339,     0,   341,     0,   342,   343,   344,
     345,   346,   347,     0,   348,   349,     0,   819,   350,   351,
     352,     0,     0,   353,   354,   355,     0,   357,     0,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
     370,   371,   372,     0,     0,     0,     0,   373,   374,   375,
       0,   377,   378,   379,   380,   381,   382,     0,   383,   384,
     385,   386,   387,   388,   389,   390,     0,   391,   392,   393,
     394,   395,   396,   397,   398,     0,   399,   400,   401,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
       0,   413,   414,     0,   416,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,   428,   429,   430,   431,
     432,     0,     0,   433,   434,   435,   436,   437,   438,   439,
     440,   441,   442,     0,     0,   444,   445,   446,   447,     0,
     448,   449,   450,   451,   452,   453,   454,   455,   456,   457,
     458,   459,   460,   548,   462,   463,     0,     0,   464,   465,
       0,   466,     0,   468,   469,   470,   471,   472,     0,   473,
     474,   475,     0,   476,     0,   477,   478,   479,   480,   481,
       0,   482,   483,   484,   485,   486,   487,   488,   489,     0,
       0,   490,   491,   492,     0,   493,   494,   495,   496,     0,
     497,   498,   499,   500,   501,   502,   503,     0,   504,     0,
     506,   507,   508,   509,   510,   511,   512,   513,   514,     0,
       0,   515,     0,     0,   516,   517,   518,   519,   520,   521,
     522,   523,   524,   525,   526,   527,   528,   529,   530,   531,
     532,   533,   534,   535,   536,   545,     0,   573,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   120,   121,   122,   123,   124,   125,
     126,   127,   128,  1026,   129,   130,   131,     0,     0,     0,
       0,     0,   132,     0,     0,     0,     0,   134,   135,     0,
     136,   137,   138,     0,   140,   141,   142,   143,   144,     0,
     146,   147,     0,   148,   149,   150,   151,   152,   153,     0,
       0,   154,   155,   156,   157,   158,   159,   160,     0,   161,
     162,   163,   164,   165,     0,     0,     0,   167,   168,   169,
     170,   171,   172,     0,   174,   175,   176,     0,   177,   178,
     179,   180,   181,   182,     0,     0,   184,   185,   186,   187,
     188,   189,   190,   191,   192,   193,   194,   195,   196,   197,
     198,     0,   199,     0,   200,   201,   202,   203,   204,   205,
       0,     0,   206,   207,   208,   209,   210,     0,     0,   211,
     212,   213,   214,   215,   216,   217,     0,   218,   219,   220,
       0,   221,   222,   223,     0,   224,   225,   226,   227,   228,
     229,   230,   231,   232,   233,   234,     0,   235,     0,   236,
     237,   238,   239,     0,   240,     0,   241,     0,     0,     0,
     244,   245,   546,     0,   248,     0,   249,   250,     0,     0,
     251,   252,   253,   254,     0,   255,   256,   257,   258,   259,
     260,   261,     0,   263,   264,   265,   266,     0,   267,   268,
     269,   270,   271,   272,   273,     0,   274,     0,   276,   277,
     278,   279,   280,   281,   282,   283,     0,   284,     0,   285,
       0,     0,   288,     0,   290,   291,   292,   293,   294,   295,
     296,     0,     0,   297,     0,   299,     0,     0,   301,   302,
     303,   304,   305,   306,   307,   308,   547,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
     323,   324,   325,   326,   327,   328,   329,   330,     0,   332,
     333,   334,   335,   336,   337,     0,   338,   339,     0,   341,
       0,   342,   343,   344,   345,   346,   347,     0,   348,   349,
       0,     0,   350,   351,   352,     0,     0,   353,   354,   355,
       0,   357,     0,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,     0,     0,     0,
       0,   373,   374,   375,     0,   377,   378,   379,   380,   381,
     382,     0,   383,   384,   385,   386,   387,   388,   389,   390,
       0,   391,   392,   393,   394,   395,   396,   397,   398,     0,
     399,   400,   401,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,     0,   413,   414,     0,   416,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   429,   430,   431,   432,     0,     0,   433,   434,   435,
     436,   437,   438,   439,   440,   441,   442,     0,     0,   444,
     445,   446,   447,     0,   448,   449,   450,   451,   452,   453,
     454,   455,   456,   457,   458,   459,   460,   548,   462,   463,
       0,     0,   464,   465,     0,   466,     0,   468,   469,   470,
     471,   472,     0,   473,   474,   475,     0,   476,     0,   477,
     478,   479,   480,   481,     0,   482,   483,   484,   485,   486,
     487,   488,   489,     0,     0,   490,   491,   492,     0,   493,
     494,   495,   496,     0,   497,   498,   499,   500,   501,   502,
     503,     0,   504,     0,   506,   507,   508,   509,   510,   511,
     512,   513,   514,     0,     0,   515,     0,     0,   516,   517,
     518,   519,   520,   521,   522,   523,   524,   525,   526,   527,
     528,   529,   530,   531,   532,   533,   534,   535,   536,   545,
    2051,     0,     0,     0,     0,  2052,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   120,   121,
     122,   123,   124,   125,   126,   127,   128,     0,   129,   130,
     131,     0,     0,     0,     0,     0,   132,     0,     0,     0,
       0,   134,   135,     0,   136,   137,   138,     0,   140,   141,
     142,   143,   144,     0,   146,   147,     0,   148,   149,   150,
     151,   152,   153,     0,     0,   154,   155,   156,   157,   158,
     159,   160,     0,   161,   162,   163,   164,   165,     0,     0,
       0,   167,   168,   169,   170,   171,   172,     0,   174,   175,
     176,     0,   177,   178,   179,   180,   181,   182,     0,     0,
     184,   185,   186,   187,   188,   189,   190,   191,   192,   193,
     194,   195,   196,   197,   198,     0,   199,     0,   200,   201,
     202,   203,   204,   205,     0,     0,   206,   207,   208,   209,
     210,     0,     0,   211,   212,   213,   214,   215,   216,   217,
       0,   218,   219,   220,     0,   221,   222,   223,     0,   224,
     225,   226,   227,   228,   229,   230,   231,   232,   233,   234,
       0,   235,     0,   236,   237,   238,   239,     0,   240,     0,
     241,     0,     0,     0,   244,   245,   546,     0,   248,     0,
     249,   250,     0,     0,   251,   252,   253,   254,     0,   255,
     256,   257,   258,   259,   260,   261,     0,   263,   264,   265,
     266,     0,   267,   268,   269,   270,   271,   272,   273,     0,
     274,     0,   276,   277,   278,   279,   280,   281,   282,   283,
       0,   284,     0,   285,     0,     0,   288,     0,   290,   291,
     292,   293,   294,   295,   296,     0,     0,   297,     0,   299,
       0,     0,   301,   302,   303,   304,   305,   306,   307,   308,
     547,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     329,   330,     0,   332,   333,   334,   335,   336,   337,     0,
     338,   339,     0,   341,     0,   342,   343,   344,   345,   346,
     347,     0,   348,   349,     0,     0,   350,   351,   352,     0,
       0,   353,   354,   355,     0,   357,     0,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,     0,     0,     0,     0,   373,   374,   375,     0,   377,
     378,   379,   380,   381,   382,     0,   383,   384,   385,   386,
     387,   388,   389,   390,     0,   391,   392,   393,   394,   395,
     396,   397,   398,     0,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,     0,   413,
     414,     0,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,   428,   429,   430,   431,   432,     0,
       0,   433,   434,   435,   436,   437,   438,   439,   440,   441,
     442,     0,     0,   444,   445,   446,   447,     0,   448,   449,
     450,   451,   452,   453,   454,   455,   456,   457,   458,   459,
     460,   548,   462,   463,     0,     0,   464,   465,     0,   466,
       0,   468,   469,   470,   471,   472,     0,   473,   474,   475,
       0,   476,     0,   477,   478,   479,   480,   481,     0,   482,
     483,   484,   485,   486,   487,   488,   489,     0,     0,   490,
     491,   492,     0,   493,   494,   495,   496,     0,   497,   498,
     499,   500,   501,   502,   503,     0,   504,     0,   506,   507,
     508,   509,   510,   511,   512,   513,   514,     0,     0,   515,
       0,     0,   516,   517,   518,   519,   520,   521,   522,   523,
     524,   525,   526,   527,   528,   529,   530,   531,   532,   533,
     534,   535,   536,   545,     0,   573,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   120,   121,   122,   123,   124,   125,   126,   127,
     128,     0,   129,   130,   131,     0,     0,     0,     0,     0,
     132,     0,     0,     0,     0,   134,   135,     0,   136,   137,
     138,     0,   140,   141,   142,   143,   144,     0,   146,   147,
       0,   148,   149,   150,   151,   152,   153,     0,     0,   154,
     155,   156,   157,   158,   159,   160,     0,   161,   162,   163,
     164,   165,     0,     0,     0,   167,   168,   169,   170,   171,
     172,     0,   174,   175,   176,     0,   177,   178,   179,   180,
     181,   182,     0,     0,   184,   185,   186,   187,   188,   189,
     190,   191,   192,   193,   194,   195,   196,   197,   198,     0,
     199,     0,   200,   201,   202,   203,   204,   205,     0,     0,
     206,   207,   208,   209,   210,     0,     0,   211,   212,   213,
     214,   215,   216,   217,     0,   218,   219,   220,     0,   221,
     222,   223,     0,   224,   225,   226,   227,   228,   229,   230,
     231,   232,   233,   234,     0,   235,     0,   236,   237,   238,
     239,     0,   240,     0,   241,     0,     0,     0,   244,   245,
     546,     0,  2059,     0,   249,   250,     0,     0,   251,   252,
     253,   254,     0,   255,   256,   257,   258,   259,   260,   261,
       0,   263,   264,   265,   266,     0,   267,   268,   269,   270,
     271,   272,   273,     0,   274,     0,   276,   277,   278,   279,
     280,   281,   282,   283,     0,   284,     0,   285,     0,     0,
     288,     0,   290,   291,   292,   293,   294,   295,   296,     0,
       0,   297,     0,   299,     0,     0,   301,   302,  2060,   304,
     305,   306,   307,   308,   547,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,     0,   332,   333,   334,
     335,   336,   337,     0,   338,   339,     0,   341,     0,   342,
     343,   344,   345,   346,   347,     0,   348,   349,     0,     0,
     350,   351,   352,     0,     0,   353,   354,   355,     0,   357,
       0,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,   371,   372,     0,     0,     0,     0,   373,
     374,   375,     0,   377,   378,   379,   380,   381,   382,     0,
     383,   384,   385,   386,   387,   388,   389,   390,     0,   391,
     392,   393,   394,   395,   396,   397,   398,     0,   399,   400,
     401,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,     0,   413,   414,     0,   416,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,   428,   429,
     430,   431,   432,     0,     0,   433,   434,   435,   436,   437,
     438,   439,   440,   441,   442,     0,     0,   444,   445,   446,
     447,     0,   448,   449,   450,   451,   452,   453,   454,   455,
     456,   457,   458,   459,   460,   548,   462,   463,     0,     0,
     464,   465,  2061,   466,     0,   468,  2062,   470,  2063,   472,
       0,   473,   474,   475,     0,   476,     0,   477,   478,   479,
     480,   481,     0,   482,   483,   484,   485,   486,   487,   488,
     489,     0,     0,   490,   491,  2064,     0,   493,   494,   495,
     496,     0,   497,   498,   499,   500,   501,   502,   503,     0,
     504,     0,   506,   507,   508,   509,   510,   511,   512,   513,
     514,     0,     0,   515,     0,     0,   516,   517,   518,   519,
     520,   521,   522,   523,   524,   525,   526,   527,   528,   529,
     530,   531,   532,   533,   534,   535,   536,   545,     0,   573,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   120,   121,   122,   123,
     124,   125,   126,   127,   128,     0,   129,   130,   131,     0,
       0,     0,     0,     0,   132,     0,     0,     0,     0,   134,
     135,     0,   136,   137,   138,     0,   140,   141,   142,   143,
     144,     0,   146,   147,     0,   148,   149,   150,   151,   152,
     153,     0,     0,   154,   155,   156,   157,   158,   159,   160,
       0,   161,   162,   163,   164,   165,     0,     0,     0,   167,
     168,   169,   170,   171,   172,     0,   174,   175,   176,     0,
     177,   178,   179,   180,   181,   182,     0,     0,   184,   185,
     186,   187,   188,   189,   190,   191,   192,   193,   194,   195,
     196,   197,   198,     0,   199,     0,   200,   201,   202,   203,
     204,   205,     0,     0,   206,   207,   208,   209,   210,     0,
       0,   211,   212,   213,   214,   215,   216,   217,     0,   218,
     219,   220,     0,   221,   222,   223,     0,   224,   225,   226,
     227,   228,   229,   230,   231,   232,   233,   234,     0,   235,
       0,   236,   237,   238,   239,     0,   240,     0,   241,     0,
       0,     0,   244,   245,   546,     0,   248,     0,   249,   250,
       0,     0,   251,   252,   253,   254,     0,   255,   256,   257,
     258,   259,   260,   261,     0,   263,   264,   265,   266,     0,
     267,   268,   269,   270,   271,   272,   273,     0,   274,     0,
     276,   277,   278,   279,   280,   281,   282,   283,     0,   284,
       0,   285,     0,     0,   288,     0,   290,   291,   292,   293,
     294,   295,   296,     0,     0,   297,     0,   299,     0,     0,
     301,   302,   303,   304,   305,   306,   307,   308,   547,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,   322,   323,   324,   325,   326,   327,   328,   329,   330,
       0,   332,   333,   334,   335,   336,   337,     0,   338,   339,
       0,   341,     0,   342,   343,   344,   345,   346,   347,     0,
     348,   349,     0,     0,   350,   351,   352,     0,     0,   353,
     354,   355,     0,   357,     0,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,   371,   372,     0,
       0,     0,     0,   373,   374,   375,     0,   377,   378,   379,
     380,   381,   382,     0,   383,   384,   385,   386,   387,   388,
     389,   390,     0,   391,   392,   393,   394,   395,   396,   397,
     398,     0,   399,   400,   401,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,     0,   413,   414,     0,
     416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,   428,   429,   430,   431,   432,     0,     0,   433,
     434,   435,   436,   437,   438,   439,   440,   441,   442,     0,
       0,   444,   445,   446,   447,     0,   448,   449,   450,   451,
     452,   453,   454,   455,   456,   457,   458,   459,   460,   548,
     462,   463,     0,     0,   464,   465,     0,   466,     0,   468,
     469,   470,   471,   472,     0,   473,   474,   475,     0,   476,
       0,   477,   478,   479,   480,   481,     0,   482,   483,   484,
     485,   486,   487,   488,   489,     0,     0,   490,   491,   492,
       0,   493,   494,   495,   496,     0,   497,   498,   499,   500,
     501,   502,   503,     0,   504,     0,   506,   507,   508,   509,
     510,   511,   512,   513,   514,     0,     0,   515,     0,     0,
     516,   517,   518,   519,   520,   521,   522,   523,   524,   525,
     526,   527,   528,   529,   530,   531,   532,   533,   534,   535,
     536,   545,     0,   843,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     120,   121,   122,   123,   124,   125,   126,   127,   128,     0,
     129,   130,   131,     0,     0,     0,     0,     0,   132,     0,
       0,     0,     0,   134,   135,     0,   136,   137,   138,     0,
     140,   141,   142,   143,   144,     0,   146,   147,     0,   148,
     149,   150,   151,   152,   153,     0,     0,   154,   155,   156,
     157,   158,   159,   160,     0,   161,   162,   163,   164,   165,
       0,     0,     0,   167,   168,   169,   170,   171,   172,     0,
     174,   175,   176,     0,   177,   178,   179,   180,   181,   182,
       0,     0,   184,   185,   186,   187,   188,   189,   190,   191,
     192,   193,   194,   195,   196,   197,   198,     0,   199,     0,
     200,   201,   202,   203,   204,   205,     0,     0,   206,   207,
     208,   209,   210,     0,     0,   211,   212,   213,   214,   215,
     216,   217,     0,   218,   219,   220,     0,   221,   222,   223,
       0,   224,   225,   226,   227,   228,   229,   230,   231,   232,
     233,   234,     0,   235,     0,   236,   237,   238,   239,     0,
     240,     0,   241,     0,     0,     0,   244,   245,   546,     0,
     248,     0,   249,   250,     0,     0,   251,   252,   253,   254,
       0,   255,   256,   257,   258,   259,   260,   261,     0,   263,
     264,   265,   266,     0,   267,   268,   269,   270,   271,   272,
     273,     0,   274,     0,   276,   277,   278,   279,   280,   281,
     282,   283,     0,   284,     0,   285,     0,     0,   288,     0,
     290,   291,   292,   293,   294,   295,   296,     0,     0,   297,
       0,   299,     0,     0,   301,   302,   303,   304,   305,   306,
     307,   308,   547,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,   323,   324,   325,   326,
     327,   328,   329,   330,     0,   332,   333,   334,   335,   336,
     337,     0,   338,   339,     0,   341,     0,   342,   343,   344,
     345,   346,   347,     0,   348,   349,     0,     0,   350,   351,
     352,     0,     0,   353,   354,   355,     0,   357,     0,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
     370,   371,   372,     0,     0,     0,     0,   373,   374,   375,
       0,   377,   378,   379,   380,   381,   382,     0,   383,   384,
     385,   386,   387,   388,   389,   390,     0,   391,   392,   393,
     394,   395,   396,   397,   398,     0,   399,   400,   401,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
       0,   413,   414,     0,   416,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,   428,   429,   430,   431,
     432,     0,     0,   433,   434,   435,   436,   437,   438,   439,
     440,   441,   442,     0,     0,   444,   445,   446,   447,     0,
     448,   449,   450,   451,   452,   453,   454,   455,   456,   457,
     458,   459,   460,   548,   462,   463,     0,     0,   464,   465,
       0,   466,     0,   468,   469,   470,   471,   472,     0,   473,
     474,   475,     0,   476,     0,   477,   478,   479,   480,   481,
       0,   482,   483,   484,   485,   486,   487,   488,   489,     0,
       0,   490,   491,   492,     0,   493,   494,   495,   496,     0,
     497,   498,   499,   500,   501,   502,   503,     0,   504,     0,
     506,   507,   508,   509,   510,   511,   512,   513,   514,     0,
       0,   515,     0,     0,   516,   517,   518,   519,   520,   521,
     522,   523,   524,   525,   526,   527,   528,   529,   530,   531,
     532,   533,   534,   535,   536,   545,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   120,   121,   122,   123,   124,   125,
     126,   127,   128,   850,   129,   130,   131,     0,     0,     0,
       0,     0,   132,     0,     0,     0,     0,   134,   135,     0,
     136,   137,   138,     0,   140,   141,   142,   143,   144,     0,
     146,   147,     0,   148,   149,   150,   151,   152,   153,     0,
       0,   154,   155,   156,   157,   158,   159,   160,     0,   161,
     162,   163,   164,   165,     0,     0,     0,   167,   168,   169,
     170,   171,   172,     0,   174,   175,   176,     0,   177,   178,
     179,   180,   181,   182,     0,     0,   184,   185,   186,   187,
     188,   189,   190,   191,   192,   193,   194,   195,   196,   197,
     198,     0,   199,     0,   200,   201,   202,   203,   204,   205,
       0,     0,   206,   207,   208,   209,   210,     0,     0,   211,
     212,   213,   214,   215,   216,   217,     0,   218,   219,   220,
       0,   221,   222,   223,     0,   224,   225,   226,   227,   228,
     229,   230,   231,   232,   233,   234,     0,   235,     0,   236,
     237,   238,   239,     0,   240,     0,   241,     0,     0,     0,
     244,   245,   546,     0,   851,     0,   249,   250,     0,     0,
     251,   252,   253,   254,     0,   255,   256,   257,   258,   259,
     260,   261,     0,   263,   264,   265,   266,     0,   267,   268,
     269,   270,   271,   272,   273,     0,   274,     0,   276,   277,
     278,   279,   280,   281,   282,   283,     0,   284,     0,   285,
       0,     0,   288,     0,   290,   291,   292,   293,   294,   295,
     296,     0,     0,   297,     0,   299,     0,     0,   301,   302,
     852,   304,   305,   306,   307,   308,   547,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
     323,   324,   325,   326,   327,   328,   329,   330,     0,   332,
     333,   334,   335,   336,   337,     0,   338,   339,     0,   341,
       0,   342,   343,   344,   345,   346,   347,     0,   348,   349,
       0,     0,   350,   351,   352,     0,     0,   353,   354,   355,
       0,   357,     0,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,     0,     0,     0,
       0,   373,   374,   375,     0,   377,   378,   379,   380,   381,
     382,     0,   383,   384,   385,   386,   387,   388,   389,   390,
       0,   391,   392,   393,   394,   395,   396,   397,   398,     0,
     399,   400,   401,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,     0,   413,   414,     0,   416,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   429,   430,   431,   432,     0,     0,   433,   434,   435,
     436,   853,   438,   439,   440,   441,   442,     0,     0,   444,
     445,   446,   447,     0,   448,   449,   450,   451,   452,   453,
     454,   455,   456,   457,   458,   459,   460,   548,   462,   463,
       0,     0,   464,   465,     0,   466,     0,   468,   469,   470,
     471,   472,     0,   473,   854,   475,     0,   476,     0,   855,
     478,   479,   480,   481,     0,   482,   483,   484,   485,   486,
     487,   488,   489,     0,     0,   490,   491,   492,     0,   493,
     494,   495,   496,     0,   497,   498,   499,   500,   501,   502,
     503,     0,   504,     0,   506,   507,   508,   509,   510,   511,
     512,   513,   514,     0,     0,   515,     0,     0,   516,   517,
     518,   519,   520,   521,   522,   523,   524,   525,   526,   527,
     528,   529,   530,   531,   532,   533,   534,   535,   536,   545,
       0,   573,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   120,   121,
     122,   123,   124,   125,   126,   127,   128,     0,   129,   130,
     131,     0,     0,     0,     0,     0,   132,     0,     0,     0,
       0,   134,   135,     0,   136,   137,   138,     0,   140,   141,
     142,   143,   144,     0,   146,   147,     0,   148,   149,   150,
     151,   152,   153,     0,     0,   154,   155,   156,   157,   158,
     159,   160,     0,   161,   162,   163,   164,   165,     0,     0,
       0,   167,   168,   169,   170,   171,   172,     0,   174,   175,
     176,     0,   177,   178,   179,   180,   181,   182,     0,     0,
     184,   185,   186,   187,   188,   189,   190,   191,   192,   193,
     194,   195,   196,   197,   198,     0,   199,     0,   200,   201,
     202,   203,   204,   205,     0,     0,   206,   207,   208,   209,
     210,     0,     0,   211,   212,   213,   214,   215,   216,   217,
       0,   218,   219,   220,     0,   221,   222,   223,     0,   224,
     225,   226,   227,   228,   229,   230,   231,   232,   233,   234,
       0,   235,     0,   236,   237,   238,   239,     0,   240,     0,
     241,     0,     0,     0,   244,   245,   546,     0,   248,     0,
     249,   250,     0,     0,   251,   252,   253,   254,     0,   255,
     256,   257,   258,   259,   260,   261,     0,   263,   264,   265,
     266,     0,   267,   268,   269,   270,   271,   272,   273,     0,
     274,     0,   276,   277,   278,   279,   280,   281,   282,   283,
       0,   284,     0,   285,     0,     0,   288,     0,   290,   291,
     292,   293,   294,   295,   296,     0,     0,   297,     0,   299,
       0,     0,   301,   302,   303,   304,   305,   306,   307,   308,
     547,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     329,   330,     0,   332,   333,   334,   335,   336,   337,     0,
     338,   339,     0,   341,     0,   342,   343,   344,   345,   346,
     347,     0,   348,   349,     0,     0,   350,   351,   352,     0,
       0,   353,   354,   355,     0,   357,     0,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,     0,     0,     0,     0,   373,   374,   375,     0,   377,
     378,   379,   380,   381,   382,     0,   383,   384,   385,   386,
     387,   388,   389,   390,     0,   391,   392,   393,   394,   395,
     396,   888,   398,     0,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,     0,   413,
     414,     0,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,   428,   429,   430,   431,   432,     0,
       0,   433,   434,   435,   436,   437,   438,   439,   440,   441,
     442,     0,     0,   444,   445,   446,   447,     0,   448,   449,
     450,   451,   452,   453,   454,   455,   456,   457,   458,   459,
     460,   548,   462,   463,     0,     0,   464,   465,     0,   466,
       0,   468,   469,   470,   471,   472,     0,   473,   474,   475,
       0,   476,     0,   477,   478,   479,   480,   481,     0,   482,
     483,   484,   485,   486,   487,   488,   489,     0,     0,   490,
     491,   492,     0,   493,   494,   495,   496,     0,   497,   498,
     499,   500,   501,   502,   503,     0,   504,     0,   506,   507,
     508,   509,   510,   511,   512,   513,   514,     0,     0,   515,
       0,     0,   516,   517,   518,   519,   520,   521,   522,   523,
     524,   525,   526,   527,   528,   529,   530,   531,   532,   533,
     534,   535,   536,   545,     0,   573,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   120,   121,   122,   123,   124,   125,   126,   127,
     128,     0,   129,   130,   131,     0,     0,     0,     0,     0,
     132,     0,     0,     0,     0,   134,   135,     0,   136,   137,
     138,     0,   140,   141,   142,   143,   144,     0,   146,   147,
       0,   148,   149,   150,   151,   152,   153,     0,     0,   154,
     155,   156,   157,   158,   159,   160,     0,   161,   162,   163,
     164,   165,     0,     0,     0,   167,   168,   169,   170,   171,
     172,     0,   174,   175,   176,     0,   177,   178,   179,   180,
     181,   182,     0,     0,   184,   185,   186,   187,   188,   189,
     190,   191,   192,   193,   194,   195,   196,   197,   198,     0,
     199,     0,   200,   201,   202,   203,   204,   205,     0,     0,
     206,   207,   208,   209,   210,     0,     0,   211,   212,   213,
     214,   215,   216,   217,     0,   218,   219,   220,     0,   221,
     222,   223,     0,   224,   225,   226,   227,   228,   229,   230,
     231,   232,   233,   234,     0,   235,     0,   236,   237,   238,
     239,     0,   240,     0,   241,     0,     0,     0,   244,   245,
     546,     0,   248,     0,   249,   250,     0,     0,   251,   252,
     253,   254,     0,   255,   256,   257,   258,   259,   978,   261,
       0,   263,   264,   265,   266,     0,   267,   268,   269,   270,
     271,   272,   273,     0,   274,     0,   276,   277,   278,   279,
     280,   281,   282,   283,     0,   284,     0,   285,     0,     0,
     288,     0,   290,   291,   292,   293,   294,   295,   296,     0,
       0,   297,     0,   299,     0,     0,   301,   302,   303,   304,
     305,   306,   307,   308,   547,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,     0,   332,   333,   334,
     335,   336,   337,     0,   338,   339,     0,   341,     0,   342,
     343,   344,   345,   346,   347,     0,   348,   349,     0,     0,
     350,   351,   352,     0,     0,   353,   354,   355,     0,   357,
       0,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,   371,   372,     0,     0,     0,     0,   373,
     374,   375,     0,   377,   378,   379,   380,   381,   382,     0,
     383,   384,   385,   386,   387,   388,   389,   390,     0,   391,
     392,   393,   394,   395,   396,   397,   398,     0,   399,   400,
     401,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,     0,   413,   414,     0,   416,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,   428,   429,
     430,   431,   432,     0,     0,   433,   434,   435,   436,   437,
     438,   439,   440,   441,   442,     0,     0,   444,   445,   446,
     447,     0,   448,   449,   450,   451,   452,   453,   454,   455,
     456,   457,   458,   459,   460,   548,   462,   463,     0,     0,
     464,   465,     0,   466,     0,   468,   469,   470,   471,   472,
       0,   473,   474,   475,     0,   476,     0,   477,   478,   479,
     480,   481,     0,   482,   483,   484,   485,   486,   487,   488,
     489,     0,     0,   490,   491,   492,     0,   493,   494,   495,
     496,     0,   497,   498,   499,   500,   501,   502,   503,     0,
     504,     0,   506,   507,   508,   509,   510,   511,   512,   513,
     514,     0,     0,   515,     0,     0,   516,   517,   518,   519,
     520,   521,   522,   523,   524,   525,   526,   527,   528,   529,
     530,   531,   532,   533,   534,   535,   536,   545,     0,   573,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   120,   121,   122,   123,
     124,   125,   126,   127,   128,     0,   129,   130,   131,     0,
       0,     0,     0,     0,   132,     0,     0,     0,     0,   134,
     135,     0,   136,   137,   138,     0,   140,   141,   142,   143,
     144,     0,   146,   147,     0,   148,   149,   150,   151,   152,
     153,     0,     0,   154,   155,   156,   157,   158,   159,   160,
       0,   161,   162,   163,   164,   165,     0,     0,     0,   167,
     168,   169,   170,   171,   172,     0,   174,   175,   176,     0,
     177,   178,   179,   180,   181,   182,     0,     0,   184,   185,
     186,   187,   188,   189,   190,   191,   192,   193,   194,   195,
     196,   197,   198,     0,   199,     0,   200,   201,   202,   203,
     204,   205,     0,     0,   206,   207,   208,   209,   210,     0,
       0,   211,   212,   213,   214,   215,   216,   217,     0,   218,
     219,   220,     0,   221,   222,   223,     0,   224,   225,   226,
     227,   228,   229,   230,   231,   232,   233,   234,     0,   235,
       0,   236,   237,   238,   239,     0,   240,     0,   241,     0,
       0,     0,   244,   245,   546,     0,   248,     0,   249,   250,
       0,     0,   251,   252,   253,   254,     0,   255,   256,   257,
     258,   259,   981,   261,     0,   263,   264,   265,   266,     0,
     267,   268,   269,   270,   271,   272,   273,     0,   274,     0,
     276,   277,   278,   279,   280,   281,   282,   283,     0,   284,
       0,   285,     0,     0,   288,     0,   290,   291,   292,   293,
     294,   295,   296,     0,     0,   297,     0,   299,     0,     0,
     301,   302,   303,   304,   305,   306,   307,   308,   547,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,   322,   323,   324,   325,   326,   327,   328,   329,   330,
       0,   332,   333,   334,   335,   336,   337,     0,   338,   339,
       0,   341,     0,   342,   343,   344,   345,   346,   347,     0,
     348,   349,     0,     0,   350,   351,   352,     0,     0,   353,
     354,   355,     0,   357,     0,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,   371,   372,     0,
       0,     0,     0,   373,   374,   375,     0,   377,   378,   379,
     380,   381,   382,     0,   383,   384,   385,   386,   387,   388,
     389,   390,     0,   391,   392,   393,   394,   395,   396,   397,
     398,     0,   399,   400,   401,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,     0,   413,   414,     0,
     416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,   428,   429,   430,   431,   432,     0,     0,   433,
     434,   435,   436,   437,   438,   439,   440,   441,   442,     0,
       0,   444,   445,   446,   447,     0,   448,   449,   450,   451,
     452,   453,   454,   455,   456,   457,   458,   459,   460,   548,
     462,   463,     0,     0,   464,   465,     0,   466,     0,   468,
     469,   470,   471,   472,     0,   473,   474,   475,     0,   476,
       0,   477,   478,   479,   480,   481,     0,   482,   483,   484,
     485,   486,   487,   488,   489,     0,     0,   490,   491,   492,
       0,   493,   494,   495,   496,     0,   497,   498,   499,   500,
     501,   502,   503,     0,   504,     0,   506,   507,   508,   509,
     510,   511,   512,   513,   514,     0,     0,   515,     0,     0,
     516,   517,   518,   519,   520,   521,   522,   523,   524,   525,
     526,   527,   528,   529,   530,   531,   532,   533,   534,   535,
     536,   545,     0,   573,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     120,   121,   122,   123,   124,   125,   126,   127,   128,     0,
     129,   130,   131,     0,     0,     0,     0,     0,   132,     0,
       0,     0,     0,   134,   135,     0,   136,   137,   138,     0,
     140,   141,   142,   143,   144,     0,   146,   147,     0,   148,
     149,   150,   151,   152,   153,     0,     0,   154,   155,   156,
     157,   158,   159,   160,     0,   161,   162,   163,   164,   165,
       0,     0,     0,   167,   168,   169,   170,   171,   172,     0,
     174,   175,   176,     0,   177,   178,   179,   180,   181,   182,
       0,     0,   184,   185,   186,   187,   188,   189,   190,   191,
     192,   193,   194,   195,   196,   197,   198,     0,   199,     0,
     200,   201,   202,   203,   204,   205,     0,     0,   206,   207,
     208,   209,   210,     0,     0,   211,   212,   213,   214,   215,
     216,   217,     0,   218,   219,   220,     0,   221,   222,   223,
       0,   224,   225,   226,   227,   228,   229,   230,   231,   232,
     233,   234,     0,   235,     0,   236,   237,   238,   239,     0,
     240,     0,   241,     0,     0,     0,   244,   245,   546,     0,
     248,     0,   249,   250,     0,     0,   251,   252,   253,   254,
       0,   255,   256,   257,   258,   259,   985,   261,     0,   263,
     264,   265,   266,     0,   267,   268,   269,   270,   271,   272,
     273,     0,   274,     0,   276,   277,   278,   279,   280,   281,
     282,   283,     0,   284,     0,   285,     0,     0,   288,     0,
     290,   291,   292,   293,   294,   295,   296,     0,     0,   297,
       0,   299,     0,     0,   301,   302,   303,   304,   305,   306,
     307,   308,   547,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,   323,   324,   325,   326,
     327,   328,   329,   330,     0,   332,   333,   334,   335,   336,
     337,     0,   338,   339,     0,   341,     0,   342,   343,   344,
     345,   346,   347,     0,   348,   349,     0,     0,   350,   351,
     352,     0,     0,   353,   354,   355,     0,   357,     0,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
     370,   371,   372,     0,     0,     0,     0,   373,   374,   375,
       0,   377,   378,   379,   380,   381,   382,     0,   383,   384,
     385,   386,   387,   388,   389,   390,     0,   391,   392,   393,
     394,   395,   396,   397,   398,     0,   399,   400,   401,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
       0,   413,   414,     0,   416,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,   428,   429,   430,   431,
     432,     0,     0,   433,   434,   435,   436,   437,   438,   439,
     440,   441,   442,     0,     0,   444,   445,   446,   447,     0,
     448,   449,   450,   451,   452,   453,   454,   455,   456,   457,
     458,   459,   460,   548,   462,   463,     0,     0,   464,   465,
       0,   466,     0,   468,   469,   470,   471,   472,     0,   473,
     474,   475,     0,   476,     0,   477,   478,   479,   480,   481,
       0,   482,   483,   484,   485,   486,   487,   488,   489,     0,
       0,   490,   491,   492,     0,   493,   494,   495,   496,     0,
     497,   498,   499,   500,   501,   502,   503,     0,   504,     0,
     506,   507,   508,   509,   510,   511,   512,   513,   514,     0,
       0,   515,     0,     0,   516,   517,   518,   519,   520,   521,
     522,   523,   524,   525,   526,   527,   528,   529,   530,   531,
     532,   533,   534,   535,   536,   545,     0,   573,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   120,   121,   122,   123,   124,   125,
     126,   127,   128,     0,   129,   130,   131,     0,     0,     0,
       0,     0,   132,     0,     0,     0,     0,   134,   135,     0,
     136,   137,   138,     0,   140,   141,   142,   143,   144,     0,
     146,   147,     0,   148,   149,   150,   151,   152,   153,     0,
       0,   154,   155,   156,   157,   158,   159,   160,     0,   161,
     162,   163,   164,   165,     0,     0,     0,   167,   168,   169,
     170,   171,   172,     0,   174,   175,   176,     0,   177,   178,
     179,   180,   181,   182,     0,     0,   184,   185,   186,   187,
     188,   189,   190,   191,   192,   193,   194,   195,   196,   197,
     198,     0,   199,     0,   200,   201,   202,   203,   204,   205,
       0,     0,   206,   207,   208,   209,   210,     0,     0,   211,
     212,   213,   214,   215,   216,   217,     0,   218,   219,   220,
       0,   221,   222,   223,     0,   224,   225,   226,   227,   228,
     229,   230,   231,   232,   233,   234,     0,   235,     0,   236,
     237,   238,   239,     0,   240,     0,   241,     0,     0,     0,
     244,   245,   546,     0,   248,     0,   249,   250,     0,     0,
     251,   252,   253,   254,     0,   255,   256,   257,   258,   259,
    1014,   261,     0,   263,   264,   265,   266,     0,   267,   268,
     269,   270,   271,   272,   273,     0,   274,     0,   276,   277,
     278,   279,   280,   281,   282,   283,     0,   284,     0,   285,
       0,     0,   288,     0,   290,   291,   292,   293,   294,   295,
     296,     0,     0,   297,     0,   299,     0,     0,   301,   302,
     303,   304,   305,   306,   307,   308,   547,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
     323,   324,   325,   326,   327,   328,   329,   330,     0,   332,
     333,   334,   335,   336,   337,     0,   338,   339,     0,   341,
       0,   342,   343,   344,   345,   346,   347,     0,   348,   349,
       0,     0,   350,   351,   352,     0,     0,   353,   354,   355,
       0,   357,     0,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,     0,     0,     0,
       0,   373,   374,   375,     0,   377,   378,   379,   380,   381,
     382,     0,   383,   384,   385,   386,   387,   388,   389,   390,
       0,   391,   392,   393,   394,   395,   396,   397,   398,     0,
     399,   400,   401,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,     0,   413,   414,     0,   416,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   429,   430,   431,   432,     0,     0,   433,   434,   435,
     436,   437,   438,   439,   440,   441,   442,     0,     0,   444,
     445,   446,   447,     0,   448,   449,   450,   451,   452,   453,
     454,   455,   456,   457,   458,   459,   460,   548,   462,   463,
       0,     0,   464,   465,     0,   466,     0,   468,   469,   470,
     471,   472,     0,   473,   474,   475,     0,   476,     0,   477,
     478,   479,   480,   481,     0,   482,   483,   484,   485,   486,
     487,   488,   489,     0,     0,   490,   491,   492,     0,   493,
     494,   495,   496,     0,   497,   498,   499,   500,   501,   502,
     503,     0,   504,     0,   506,   507,   508,   509,   510,   511,
     512,   513,   514,     0,     0,   515,     0,     0,   516,   517,
     518,   519,   520,   521,   522,   523,   524,   525,   526,   527,
     528,   529,   530,   531,   532,   533,   534,   535,   536,   545,
       0,   573,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   120,   121,
     122,   123,   124,   125,   126,   127,   128,     0,   129,   130,
     131,     0,     0,     0,     0,     0,   132,     0,     0,     0,
       0,   134,   135,     0,   136,   137,   138,     0,   140,   141,
     142,   143,   144,     0,   146,   147,     0,   148,   149,   150,
     151,   152,   153,     0,     0,   154,   155,   156,   157,   158,
     159,   160,     0,   161,   162,   163,   164,   165,     0,     0,
       0,   167,   168,   169,   170,   171,   172,     0,   174,   175,
     176,     0,   177,   178,   179,   180,   181,   182,     0,     0,
     184,   185,   186,   187,   188,   189,   190,   191,   192,   193,
     194,   195,   196,   197,   198,     0,   199,     0,   200,   201,
     202,   203,   204,   205,     0,     0,   206,   207,   208,   209,
     210,     0,     0,   211,   212,   213,   214,   215,   216,   217,
       0,   218,   219,   220,     0,   221,   222,   223,     0,   224,
     225,   226,   227,   228,   229,   230,   231,   232,   233,   234,
       0,   235,     0,   236,   237,   238,   239,     0,   240,     0,
     241,     0,     0,     0,   244,   245,   546,     0,   248,     0,
     249,   250,     0,     0,   251,   252,   253,   254,     0,   255,
     256,   257,   258,   259,  1043,   261,     0,   263,   264,   265,
     266,     0,   267,   268,   269,   270,   271,   272,   273,     0,
     274,     0,   276,   277,   278,   279,   280,   281,   282,   283,
       0,   284,     0,   285,     0,     0,   288,     0,   290,   291,
     292,   293,   294,   295,   296,     0,     0,   297,     0,   299,
       0,     0,   301,   302,   303,   304,   305,   306,   307,   308,
     547,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     329,   330,     0,   332,   333,   334,   335,   336,   337,     0,
     338,   339,     0,   341,     0,   342,   343,   344,   345,   346,
     347,     0,   348,   349,     0,     0,   350,   351,   352,     0,
       0,   353,   354,   355,     0,   357,     0,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,     0,     0,     0,     0,   373,   374,   375,     0,   377,
     378,   379,   380,   381,   382,     0,   383,   384,   385,   386,
     387,   388,   389,   390,     0,   391,   392,   393,   394,   395,
     396,   397,   398,     0,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,     0,   413,
     414,     0,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,   428,   429,   430,   431,   432,     0,
       0,   433,   434,   435,   436,   437,   438,   439,   440,   441,
     442,     0,     0,   444,   445,   446,   447,     0,   448,   449,
     450,   451,   452,   453,   454,   455,   456,   457,   458,   459,
     460,   548,   462,   463,     0,     0,   464,   465,     0,   466,
       0,   468,   469,   470,   471,   472,     0,   473,   474,   475,
       0,   476,     0,   477,   478,   479,   480,   481,     0,   482,
     483,   484,   485,   486,   487,   488,   489,     0,     0,   490,
     491,   492,     0,   493,   494,   495,   496,     0,   497,   498,
     499,   500,   501,   502,   503,     0,   504,     0,   506,   507,
     508,   509,   510,   511,   512,   513,   514,     0,     0,   515,
       0,     0,   516,   517,   518,   519,   520,   521,   522,   523,
     524,   525,   526,   527,   528,   529,   530,   531,   532,   533,
     534,   535,   536,   545,     0,   573,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   120,   121,   122,   123,   124,   125,   126,   127,
     128,     0,   129,   130,   131,     0,     0,     0,     0,     0,
     132,     0,     0,     0,     0,   134,   135,     0,   136,   137,
     138,     0,   140,   141,   142,   143,   144,     0,   146,   147,
       0,   148,   149,   150,   151,   152,   153,     0,     0,   154,
     155,   156,   157,   158,   159,   160,     0,   161,   162,   163,
     164,   165,     0,     0,     0,   167,   168,   169,   170,   171,
     172,     0,   174,   175,   176,     0,   177,   178,   179,   180,
     181,   182,     0,     0,   184,   185,   186,   187,   188,   189,
     190,   191,   192,   193,   194,   195,   196,   197,   198,     0,
     199,     0,   200,   201,   202,   203,   204,   205,     0,     0,
     206,   207,   208,   209,   210,     0,     0,   211,   212,   213,
     214,   215,   216,   217,     0,   218,   219,   220,     0,   221,
     222,   223,     0,   224,   225,   226,   227,   228,   229,   230,
     231,   232,   233,   234,     0,   235,     0,   236,   237,   238,
     239,     0,   240,     0,   241,     0,     0,     0,   244,   245,
     546,     0,   248,     0,   249,   250,     0,     0,   251,   252,
     253,   254,     0,   255,   256,   257,   258,   259,  1046,   261,
       0,   263,   264,   265,   266,     0,   267,   268,   269,   270,
     271,   272,   273,     0,   274,     0,   276,   277,   278,   279,
     280,   281,   282,   283,     0,   284,     0,   285,     0,     0,
     288,     0,   290,   291,   292,   293,   294,   295,   296,     0,
       0,   297,     0,   299,     0,     0,   301,   302,   303,   304,
     305,   306,   307,   308,   547,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,     0,   332,   333,   334,
     335,   336,   337,     0,   338,   339,     0,   341,     0,   342,
     343,   344,   345,   346,   347,     0,   348,   349,     0,     0,
     350,   351,   352,     0,     0,   353,   354,   355,     0,   357,
       0,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,   371,   372,     0,     0,     0,     0,   373,
     374,   375,     0,   377,   378,   379,   380,   381,   382,     0,
     383,   384,   385,   386,   387,   388,   389,   390,     0,   391,
     392,   393,   394,   395,   396,   397,   398,     0,   399,   400,
     401,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,     0,   413,   414,     0,   416,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,   428,   429,
     430,   431,   432,     0,     0,   433,   434,   435,   436,   437,
     438,   439,   440,   441,   442,     0,     0,   444,   445,   446,
     447,     0,   448,   449,   450,   451,   452,   453,   454,   455,
     456,   457,   458,   459,   460,   548,   462,   463,     0,     0,
     464,   465,     0,   466,     0,   468,   469,   470,   471,   472,
       0,   473,   474,   475,     0,   476,     0,   477,   478,   479,
     480,   481,     0,   482,   483,   484,   485,   486,   487,   488,
     489,     0,     0,   490,   491,   492,     0,   493,   494,   495,
     496,     0,   497,   498,   499,   500,   501,   502,   503,     0,
     504,     0,   506,   507,   508,   509,   510,   511,   512,   513,
     514,     0,     0,   515,     0,     0,   516,   517,   518,   519,
     520,   521,   522,   523,   524,   525,   526,   527,   528,   529,
     530,   531,   532,   533,   534,   535,   536,   545,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   120,   121,   122,   123,
     124,   125,   126,   127,   128,     0,   129,   130,   131,     0,
       0,     0,     0,     0,   132,     0,  1092,     0,     0,   134,
     135,     0,   136,   137,   138,     0,   140,   141,   142,   143,
     144,     0,   146,   147,     0,   148,   149,   150,   151,   152,
     153,     0,     0,   154,   155,   156,   157,   158,   159,   160,
       0,   161,   162,   163,   164,   165,     0,     0,     0,   167,
     168,   169,   170,   171,   172,     0,   174,   175,   176,     0,
     177,   178,   179,   180,   181,   182,     0,     0,   184,   185,
     186,   187,   188,   189,   190,   191,   192,   193,   194,   195,
     196,   197,   198,     0,   199,     0,   200,   201,   202,   203,
     204,   205,     0,     0,   206,   207,   208,   209,   210,     0,
       0,   211,   212,   213,   214,   215,   216,   217,     0,   218,
     219,   220,     0,   221,   222,   223,     0,   224,   225,   226,
     227,   228,   229,   230,   231,   232,   233,   234,     0,   235,
       0,   236,   237,   238,   239,     0,   240,     0,   241,     0,
       0,     0,   244,   245,   546,     0,   248,     0,   249,   250,
       0,     0,   251,   252,   253,   254,     0,   255,   256,   257,
     258,   259,   260,   261,     0,   263,   264,   265,   266,     0,
     267,   268,   269,   270,   271,   272,   273,     0,   274,     0,
     276,   277,   278,   279,   280,   281,   282,   283,     0,   284,
       0,   285,     0,     0,   288,     0,   290,   291,   292,   293,
     294,   295,   296,     0,     0,   297,     0,   299,     0,     0,
     301,   302,   303,   304,   305,   306,   307,   308,   547,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,   322,   323,   324,   325,   326,   327,   328,   329,   330,
       0,   332,   333,   334,   335,   336,   337,     0,   338,   339,
       0,   341,     0,   342,   343,   344,   345,   346,   347,     0,
     348,   349,     0,     0,   350,   351,   352,     0,     0,   353,
     354,   355,     0,   357,     0,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,   371,   372,     0,
       0,     0,     0,   373,   374,   375,     0,   377,   378,   379,
     380,   381,   382,     0,   383,   384,   385,   386,   387,   388,
     389,   390,     0,   391,   392,   393,   394,   395,   396,   397,
     398,     0,   399,   400,   401,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,     0,   413,   414,     0,
     416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,   428,   429,   430,   431,   432,     0,     0,   433,
     434,   435,   436,   437,   438,   439,   440,   441,   442,     0,
       0,   444,   445,   446,   447,     0,   448,   449,   450,   451,
     452,   453,   454,   455,   456,   457,   458,   459,   460,   548,
     462,   463,     0,     0,   464,   465,     0,   466,     0,   468,
     469,   470,   471,   472,     0,   473,   474,   475,     0,   476,
       0,   477,   478,   479,   480,   481,     0,   482,   483,   484,
     485,   486,   487,   488,   489,     0,     0,   490,   491,   492,
       0,   493,   494,   495,   496,     0,   497,   498,   499,   500,
     501,   502,   503,     0,   504,     0,   506,   507,   508,   509,
     510,   511,   512,   513,   514,     0,     0,   515,     0,     0,
     516,   517,   518,   519,   520,   521,   522,   523,   524,   525,
     526,   527,   528,   529,   530,   531,   532,   533,   534,   535,
     536,   545,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     120,   121,   122,   123,   124,   125,   126,   127,   128,     0,
     129,   130,   131,     0,     0,     0,     0,     0,   132,     0,
    1115,     0,     0,   134,   135,     0,   136,   137,   138,     0,
     140,   141,   142,   143,   144,     0,   146,   147,     0,   148,
     149,   150,   151,   152,   153,     0,     0,   154,   155,   156,
     157,   158,   159,   160,     0,   161,   162,   163,   164,   165,
       0,     0,     0,   167,   168,   169,   170,   171,   172,     0,
     174,   175,   176,     0,   177,   178,   179,   180,   181,   182,
       0,     0,   184,   185,   186,   187,   188,   189,   190,   191,
     192,   193,   194,   195,   196,   197,   198,     0,   199,     0,
     200,   201,   202,   203,   204,   205,     0,     0,   206,   207,
     208,   209,   210,     0,     0,   211,   212,   213,   214,   215,
     216,   217,     0,   218,   219,   220,     0,   221,   222,   223,
       0,   224,   225,   226,   227,   228,   229,   230,   231,   232,
     233,   234,     0,   235,     0,   236,   237,   238,   239,     0,
     240,     0,   241,     0,     0,     0,   244,   245,   546,     0,
     248,     0,   249,   250,     0,     0,   251,   252,   253,   254,
       0,   255,   256,   257,   258,   259,   260,   261,     0,   263,
     264,   265,   266,     0,   267,   268,   269,   270,   271,   272,
     273,     0,   274,     0,   276,   277,   278,   279,   280,   281,
     282,   283,     0,   284,     0,   285,     0,     0,   288,     0,
     290,   291,   292,   293,   294,   295,   296,     0,     0,   297,
       0,   299,     0,     0,   301,   302,   303,   304,   305,   306,
     307,   308,   547,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,   323,   324,   325,   326,
     327,   328,   329,   330,     0,   332,   333,   334,   335,   336,
     337,     0,   338,   339,     0,   341,     0,   342,   343,   344,
     345,   346,   347,     0,   348,   349,     0,     0,   350,   351,
     352,     0,     0,   353,   354,   355,     0,   357,     0,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
     370,   371,   372,     0,     0,     0,     0,   373,   374,   375,
       0,   377,   378,   379,   380,   381,   382,     0,   383,   384,
     385,   386,   387,   388,   389,   390,     0,   391,   392,   393,
     394,   395,   396,   397,   398,     0,   399,   400,   401,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
       0,   413,   414,     0,   416,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,   428,   429,   430,   431,
     432,     0,     0,   433,   434,   435,   436,   437,   438,   439,
     440,   441,   442,     0,     0,   444,   445,   446,   447,     0,
     448,   449,   450,   451,   452,   453,   454,   455,   456,   457,
     458,   459,   460,   548,   462,   463,     0,     0,   464,   465,
       0,   466,     0,   468,   469,   470,   471,   472,     0,   473,
     474,   475,     0,   476,     0,   477,   478,   479,   480,   481,
       0,   482,   483,   484,   485,   486,   487,   488,   489,     0,
       0,   490,   491,   492,     0,   493,   494,   495,   496,     0,
     497,   498,   499,   500,   501,   502,   503,     0,   504,     0,
     506,   507,   508,   509,   510,   511,   512,   513,   514,     0,
       0,   515,     0,     0,   516,   517,   518,   519,   520,   521,
     522,   523,   524,   525,   526,   527,   528,   529,   530,   531,
     532,   533,   534,   535,   536,   545,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   120,   121,   122,   123,   124,   125,
     126,   127,   128,   850,   129,   130,   131,     0,     0,     0,
       0,     0,   132,     0,     0,     0,     0,   134,   135,     0,
     136,   137,   138,     0,   140,   141,   142,   143,   144,     0,
     146,   147,     0,   148,   149,   150,   151,   152,   153,     0,
       0,   154,   155,   156,   157,   158,   159,   160,     0,   161,
     162,   163,   164,   165,     0,     0,     0,   167,   168,   169,
     170,   171,   172,     0,   174,   175,   176,     0,   177,   178,
     179,   180,   181,   182,     0,     0,   184,   185,   186,   187,
     188,   189,   190,   191,   192,   193,   194,   195,   196,   197,
     198,     0,   199,     0,   200,   201,   202,   203,   204,   205,
       0,     0,   206,   207,   208,   209,   210,     0,     0,   211,
     212,   213,   214,   215,   216,   217,     0,   218,   219,   220,
       0,   221,   222,   223,     0,   224,   225,   226,   227,   228,
     229,   230,   231,   232,   233,   234,     0,   235,     0,   236,
     237,   238,   239,     0,   240,     0,   241,     0,     0,     0,
     244,   245,   546,     0,   248,     0,   249,   250,     0,     0,
     251,   252,   253,   254,     0,   255,   256,   257,   258,   259,
     260,   261,     0,   263,   264,   265,   266,     0,   267,   268,
     269,   270,   271,   272,   273,     0,   274,     0,   276,   277,
     278,   279,   280,   281,   282,   283,     0,   284,     0,   285,
       0,     0,   288,     0,   290,   291,   292,   293,   294,   295,
     296,     0,     0,   297,     0,   299,     0,     0,   301,   302,
     303,   304,   305,   306,   307,   308,   547,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
     323,   324,   325,   326,   327,   328,   329,   330,     0,   332,
     333,   334,   335,   336,   337,     0,   338,   339,     0,   341,
       0,   342,   343,   344,   345,   346,   347,     0,   348,   349,
       0,     0,   350,   351,   352,     0,     0,   353,   354,   355,
       0,   357,     0,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,     0,     0,     0,
       0,   373,   374,   375,     0,   377,   378,   379,   380,   381,
     382,     0,   383,   384,   385,   386,   387,   388,   389,   390,
       0,   391,   392,   393,   394,   395,   396,   397,   398,     0,
     399,   400,   401,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,     0,   413,   414,     0,   416,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   429,   430,   431,   432,     0,     0,   433,   434,   435,
     436,   437,   438,   439,   440,   441,   442,     0,     0,   444,
     445,   446,   447,     0,   448,   449,   450,   451,   452,   453,
     454,   455,   456,   457,   458,   459,   460,   548,   462,   463,
       0,     0,   464,   465,     0,   466,     0,   468,   469,   470,
     471,   472,     0,   473,   854,   475,     0,   476,     0,   855,
     478,   479,   480,   481,     0,   482,   483,   484,   485,   486,
     487,   488,   489,     0,     0,   490,   491,   492,     0,   493,
     494,   495,   496,     0,   497,   498,   499,   500,   501,   502,
     503,     0,   504,     0,   506,   507,   508,   509,   510,   511,
     512,   513,   514,     0,     0,   515,     0,     0,   516,   517,
     518,   519,   520,   521,   522,   523,   524,   525,   526,   527,
     528,   529,   530,   531,   532,   533,   534,   535,   536,   545,
       0,   573,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   120,   121,
     122,   123,   124,   125,   126,   127,   128,     0,   129,   130,
     131,     0,     0,     0,     0,     0,   132,     0,     0,     0,
       0,   134,   135,     0,   136,   137,   138,     0,   140,   141,
     142,   143,   144,     0,   146,   147,     0,   148,   149,   150,
     151,   152,   153,     0,     0,   154,   155,   156,   157,   158,
     159,   160,     0,   161,   162,   163,   164,   165,     0,     0,
       0,   167,   168,   169,   170,   171,   172,     0,   174,   175,
     176,     0,   177,   178,   179,   180,   181,   182,     0,     0,
     184,   185,   186,   187,   188,   189,   190,   191,   192,   193,
     194,   195,   196,   197,   198,     0,   199,     0,   200,   201,
     202,   203,   204,   205,     0,     0,   206,   207,   208,   209,
     210,     0,     0,   211,   212,   213,   214,   215,   216,   217,
       0,   218,   219,   220,     0,   221,   222,   223,     0,   224,
     225,   226,   227,   228,   229,   230,   231,   232,   233,   234,
       0,   235,     0,   236,   237,   238,   239,     0,   240,     0,
     241,     0,     0,     0,   244,   245,   546,     0,   248,     0,
     249,   250,     0,     0,   251,   252,   253,   254,     0,   255,
     256,   257,   258,   259,  1397,   261,     0,   263,   264,   265,
     266,     0,   267,   268,   269,   270,   271,   272,   273,     0,
     274,     0,   276,   277,   278,   279,   280,   281,   282,   283,
       0,   284,     0,   285,     0,     0,   288,     0,   290,   291,
     292,   293,   294,   295,   296,     0,     0,   297,     0,   299,
       0,     0,   301,   302,   303,   304,   305,   306,   307,   308,
     547,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     329,   330,     0,   332,   333,   334,   335,   336,   337,     0,
     338,   339,     0,   341,     0,   342,   343,   344,   345,   346,
     347,     0,   348,   349,     0,     0,   350,   351,   352,     0,
       0,   353,   354,   355,     0,   357,     0,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,     0,     0,     0,     0,   373,   374,   375,     0,   377,
     378,   379,   380,   381,   382,     0,   383,   384,   385,   386,
     387,   388,   389,   390,     0,   391,   392,   393,   394,   395,
     396,   397,   398,     0,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,     0,   413,
     414,     0,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,   428,   429,   430,   431,   432,     0,
       0,   433,   434,   435,   436,   437,   438,   439,   440,   441,
     442,     0,     0,   444,   445,   446,   447,     0,   448,   449,
     450,   451,   452,   453,   454,   455,   456,   457,   458,   459,
     460,   548,   462,   463,     0,     0,   464,   465,     0,   466,
       0,   468,   469,   470,   471,   472,     0,   473,   474,   475,
       0,   476,     0,   477,   478,   479,   480,   481,     0,   482,
     483,   484,   485,   486,   487,   488,   489,     0,     0,   490,
     491,   492,     0,   493,   494,   495,   496,     0,   497,   498,
     499,   500,   501,   502,   503,     0,   504,     0,   506,   507,
     508,   509,   510,   511,   512,   513,   514,     0,     0,   515,
       0,     0,   516,   517,   518,   519,   520,   521,   522,   523,
     524,   525,   526,   527,   528,   529,   530,   531,   532,   533,
     534,   535,   536,   545,     0,   573,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   120,   121,   122,   123,   124,   125,   126,   127,
     128,     0,   129,   130,   131,     0,     0,     0,     0,     0,
     132,     0,     0,     0,     0,   134,   135,     0,   136,   137,
     138,     0,   140,   141,   142,   143,   144,     0,   146,   147,
       0,   148,   149,   150,   151,   152,   153,     0,     0,   154,
     155,   156,   157,   158,   159,   160,     0,   161,   162,   163,
     164,   165,     0,     0,     0,   167,   168,   169,   170,   171,
     172,     0,   174,   175,   176,     0,   177,   178,   179,   180,
     181,   182,     0,     0,   184,   185,   186,   187,   188,   189,
     190,   191,   192,   193,   194,   195,   196,   197,   198,     0,
     199,     0,   200,   201,   202,   203,   204,   205,     0,     0,
     206,   207,   208,   209,   210,     0,     0,   211,   212,   213,
     214,   215,   216,   217,     0,   218,   219,   220,     0,   221,
     222,   223,     0,   224,   225,   226,   227,   228,   229,   230,
     231,   232,   233,   234,     0,   235,     0,   236,   237,   238,
     239,     0,   240,     0,   241,     0,     0,     0,   244,   245,
     546,     0,   248,     0,   249,   250,     0,     0,   251,   252,
     253,   254,     0,   255,   256,   257,   258,   259,  1399,   261,
       0,   263,   264,   265,   266,     0,   267,   268,   269,   270,
     271,   272,   273,     0,   274,     0,   276,   277,   278,   279,
     280,   281,   282,   283,     0,   284,     0,   285,     0,     0,
     288,     0,   290,   291,   292,   293,   294,   295,   296,     0,
       0,   297,     0,   299,     0,     0,   301,   302,   303,   304,
     305,   306,   307,   308,   547,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,     0,   332,   333,   334,
     335,   336,   337,     0,   338,   339,     0,   341,     0,   342,
     343,   344,   345,   346,   347,     0,   348,   349,     0,     0,
     350,   351,   352,     0,     0,   353,   354,   355,     0,   357,
       0,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,   371,   372,     0,     0,     0,     0,   373,
     374,   375,     0,   377,   378,   379,   380,   381,   382,     0,
     383,   384,   385,   386,   387,   388,   389,   390,     0,   391,
     392,   393,   394,   395,   396,   397,   398,     0,   399,   400,
     401,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,     0,   413,   414,     0,   416,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,   428,   429,
     430,   431,   432,     0,     0,   433,   434,   435,   436,   437,
     438,   439,   440,   441,   442,     0,     0,   444,   445,   446,
     447,     0,   448,   449,   450,   451,   452,   453,   454,   455,
     456,   457,   458,   459,   460,   548,   462,   463,     0,     0,
     464,   465,     0,   466,     0,   468,   469,   470,   471,   472,
       0,   473,   474,   475,     0,   476,     0,   477,   478,   479,
     480,   481,     0,   482,   483,   484,   485,   486,   487,   488,
     489,     0,     0,   490,   491,   492,     0,   493,   494,   495,
     496,     0,   497,   498,   499,   500,   501,   502,   503,     0,
     504,     0,   506,   507,   508,   509,   510,   511,   512,   513,
     514,     0,     0,   515,     0,     0,   516,   517,   518,   519,
     520,   521,   522,   523,   524,   525,   526,   527,   528,   529,
     530,   531,   532,   533,   534,   535,   536,   545,     0,   573,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   120,   121,   122,   123,
     124,   125,   126,   127,   128,     0,   129,   130,   131,     0,
       0,     0,     0,     0,   132,     0,     0,     0,     0,   134,
     135,     0,   136,   137,   138,     0,   140,   141,   142,   143,
     144,     0,   146,   147,     0,   148,   149,   150,   151,   152,
     153,     0,     0,   154,   155,   156,   157,   158,   159,   160,
       0,   161,   162,   163,   164,   165,     0,     0,     0,   167,
     168,   169,   170,   171,   172,     0,   174,   175,   176,     0,
     177,   178,   179,   180,   181,   182,     0,     0,   184,   185,
     186,   187,   188,   189,   190,   191,   192,   193,   194,   195,
     196,   197,   198,     0,   199,     0,   200,   201,   202,   203,
     204,   205,     0,     0,   206,   207,   208,   209,   210,     0,
       0,   211,   212,   213,   214,   215,   216,   217,     0,   218,
     219,   220,     0,   221,   222,   223,     0,   224,   225,   226,
     227,   228,   229,   230,   231,   232,   233,   234,     0,   235,
       0,   236,   237,   238,   239,     0,   240,     0,   241,     0,
       0,     0,   244,   245,   546,     0,   248,     0,   249,   250,
       0,     0,   251,   252,   253,   254,     0,   255,   256,   257,
     258,   259,  1402,   261,     0,   263,   264,   265,   266,     0,
     267,   268,   269,   270,   271,   272,   273,     0,   274,     0,
     276,   277,   278,   279,   280,   281,   282,   283,     0,   284,
       0,   285,     0,     0,   288,     0,   290,   291,   292,   293,
     294,   295,   296,     0,     0,   297,     0,   299,     0,     0,
     301,   302,   303,   304,   305,   306,   307,   308,   547,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,   322,   323,   324,   325,   326,   327,   328,   329,   330,
       0,   332,   333,   334,   335,   336,   337,     0,   338,   339,
       0,   341,     0,   342,   343,   344,   345,   346,   347,     0,
     348,   349,     0,     0,   350,   351,   352,     0,     0,   353,
     354,   355,     0,   357,     0,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,   371,   372,     0,
       0,     0,     0,   373,   374,   375,     0,   377,   378,   379,
     380,   381,   382,     0,   383,   384,   385,   386,   387,   388,
     389,   390,     0,   391,   392,   393,   394,   395,   396,   397,
     398,     0,   399,   400,   401,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,     0,   413,   414,     0,
     416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,   428,   429,   430,   431,   432,     0,     0,   433,
     434,   435,   436,   437,   438,   439,   440,   441,   442,     0,
       0,   444,   445,   446,   447,     0,   448,   449,   450,   451,
     452,   453,   454,   455,   456,   457,   458,   459,   460,   548,
     462,   463,     0,     0,   464,   465,     0,   466,     0,   468,
     469,   470,   471,   472,     0,   473,   474,   475,     0,   476,
       0,   477,   478,   479,   480,   481,     0,   482,   483,   484,
     485,   486,   487,   488,   489,     0,     0,   490,   491,   492,
       0,   493,   494,   495,   496,     0,   497,   498,   499,   500,
     501,   502,   503,     0,   504,     0,   506,   507,   508,   509,
     510,   511,   512,   513,   514,     0,     0,   515,     0,     0,
     516,   517,   518,   519,   520,   521,   522,   523,   524,   525,
     526,   527,   528,   529,   530,   531,   532,   533,   534,   535,
     536,   545,     0,   573,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     120,   121,   122,   123,   124,   125,   126,   127,   128,     0,
     129,   130,   131,     0,     0,     0,     0,     0,   132,     0,
       0,     0,     0,   134,   135,     0,   136,   137,   138,     0,
     140,   141,   142,   143,   144,     0,   146,   147,     0,   148,
     149,   150,   151,   152,   153,     0,     0,   154,   155,   156,
     157,   158,   159,   160,     0,   161,   162,   163,   164,   165,
       0,     0,     0,   167,   168,   169,   170,   171,   172,     0,
     174,   175,   176,     0,   177,   178,   179,   180,   181,   182,
       0,     0,   184,   185,   186,   187,   188,   189,   190,   191,
     192,   193,   194,   195,   196,   197,   198,     0,   199,     0,
     200,   201,   202,   203,   204,   205,     0,     0,   206,   207,
     208,   209,   210,     0,     0,   211,   212,   213,   214,   215,
     216,   217,     0,   218,   219,   220,     0,   221,   222,   223,
       0,   224,   225,   226,   227,   228,   229,   230,   231,   232,
     233,   234,     0,   235,     0,   236,   237,   238,   239,     0,
     240,     0,   241,     0,     0,     0,   244,   245,   546,     0,
     248,     0,   249,   250,     0,     0,   251,   252,   253,   254,
       0,   255,   256,   257,   258,   259,  1404,   261,     0,   263,
     264,   265,   266,     0,   267,   268,   269,   270,   271,   272,
     273,     0,   274,     0,   276,   277,   278,   279,   280,   281,
     282,   283,     0,   284,     0,   285,     0,     0,   288,     0,
     290,   291,   292,   293,   294,   295,   296,     0,     0,   297,
       0,   299,     0,     0,   301,   302,   303,   304,   305,   306,
     307,   308,   547,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,   323,   324,   325,   326,
     327,   328,   329,   330,     0,   332,   333,   334,   335,   336,
     337,     0,   338,   339,     0,   341,     0,   342,   343,   344,
     345,   346,   347,     0,   348,   349,     0,     0,   350,   351,
     352,     0,     0,   353,   354,   355,     0,   357,     0,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
     370,   371,   372,     0,     0,     0,     0,   373,   374,   375,
       0,   377,   378,   379,   380,   381,   382,     0,   383,   384,
     385,   386,   387,   388,   389,   390,     0,   391,   392,   393,
     394,   395,   396,   397,   398,     0,   399,   400,   401,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
       0,   413,   414,     0,   416,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,   428,   429,   430,   431,
     432,     0,     0,   433,   434,   435,   436,   437,   438,   439,
     440,   441,   442,     0,     0,   444,   445,   446,   447,     0,
     448,   449,   450,   451,   452,   453,   454,   455,   456,   457,
     458,   459,   460,   548,   462,   463,     0,     0,   464,   465,
       0,   466,     0,   468,   469,   470,   471,   472,     0,   473,
     474,   475,     0,   476,     0,   477,   478,   479,   480,   481,
       0,   482,   483,   484,   485,   486,   487,   488,   489,     0,
       0,   490,   491,   492,     0,   493,   494,   495,   496,     0,
     497,   498,   499,   500,   501,   502,   503,     0,   504,     0,
     506,   507,   508,   509,   510,   511,   512,   513,   514,     0,
       0,   515,     0,     0,   516,   517,   518,   519,   520,   521,
     522,   523,   524,   525,   526,   527,   528,   529,   530,   531,
     532,   533,   534,   535,   536,   545,     0,   573,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   120,   121,   122,   123,   124,   125,
     126,   127,   128,     0,   129,   130,   131,     0,     0,     0,
       0,     0,   132,     0,     0,     0,     0,   134,   135,     0,
     136,   137,   138,     0,   140,   141,   142,   143,   144,     0,
     146,   147,     0,   148,   149,   150,   151,   152,   153,     0,
       0,   154,   155,   156,   157,   158,   159,   160,     0,   161,
     162,   163,   164,   165,     0,     0,     0,   167,   168,   169,
     170,   171,   172,     0,   174,   175,   176,     0,   177,   178,
     179,   180,   181,   182,     0,     0,   184,   185,   186,   187,
     188,   189,   190,   191,   192,   193,   194,   195,   196,   197,
     198,     0,   199,     0,   200,   201,   202,   203,   204,   205,
       0,     0,   206,   207,   208,   209,   210,     0,     0,   211,
     212,   213,   214,   215,   216,   217,     0,   218,   219,   220,
       0,   221,   222,   223,     0,   224,   225,   226,   227,   228,
     229,   230,   231,   232,   233,   234,     0,   235,     0,   236,
     237,   238,   239,     0,   240,     0,   241,     0,     0,     0,
     244,   245,   546,     0,   248,     0,   249,   250,     0,     0,
     251,   252,   253,   254,     0,   255,   256,   257,   258,   259,
    2343,   261,     0,   263,   264,   265,   266,     0,   267,   268,
     269,   270,   271,   272,   273,     0,   274,     0,   276,   277,
     278,   279,   280,   281,   282,   283,     0,   284,     0,   285,
       0,     0,   288,     0,   290,   291,   292,   293,   294,   295,
     296,     0,     0,   297,     0,   299,     0,     0,   301,   302,
     303,   304,   305,   306,   307,   308,   547,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
     323,   324,   325,   326,   327,   328,   329,   330,     0,   332,
     333,   334,   335,   336,   337,     0,   338,   339,     0,   341,
       0,   342,   343,   344,   345,   346,   347,     0,   348,   349,
       0,     0,   350,   351,   352,     0,     0,   353,   354,   355,
       0,   357,     0,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,     0,     0,     0,
       0,   373,   374,   375,     0,   377,   378,   379,   380,   381,
     382,     0,   383,   384,   385,   386,   387,   388,   389,   390,
       0,   391,   392,   393,   394,   395,   396,   397,   398,     0,
     399,   400,   401,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,     0,   413,   414,     0,   416,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   429,   430,   431,   432,     0,     0,   433,   434,   435,
     436,   437,   438,   439,   440,   441,   442,     0,     0,   444,
     445,   446,   447,     0,   448,   449,   450,   451,   452,   453,
     454,   455,   456,   457,   458,   459,   460,   548,   462,   463,
       0,     0,   464,   465,     0,   466,     0,   468,   469,   470,
     471,   472,     0,   473,   474,   475,     0,   476,     0,   477,
     478,   479,   480,   481,     0,   482,   483,   484,   485,   486,
     487,   488,   489,     0,     0,   490,   491,   492,     0,   493,
     494,   495,   496,     0,   497,   498,   499,   500,   501,   502,
     503,     0,   504,     0,   506,   507,   508,   509,   510,   511,
     512,   513,   514,     0,     0,   515,     0,     0,   516,   517,
     518,   519,   520,   521,   522,   523,   524,   525,   526,   527,
     528,   529,   530,   531,   532,   533,   534,   535,   536,  1573,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   120,   121,
     122,   123,   124,   125,   126,   127,   128,     0,   129,   130,
     131,     0,     0,     0,  1574,     0,   132,     0,  -981,     0,
    1575,   134,   135,     0,   136,   137,   138,  1576,   140,   141,
     142,     0,  1577,  1578,  1579,  1580,     0,   148,   149,   150,
     151,   152,   153,     0,     0,   154,   155,   156,   157,  1581,
    1582,   160,     0,   161,   162,   163,   164,     0,     0,  1583,
       0,  1584,   168,   169,   170,   171,   172,  1585,   174,   175,
     176,     0,   177,   178,   179,   180,   181,   182,     0,  1586,
     184,   185,   186,   187,   188,   189,   190,   191,   192,   193,
    1587,   195,   196,  1588,   198,     0,   199,     0,   200,   201,
     202,   203,   204,   205,     0,     0,   206,   207,   208,   209,
     210,     0,     0,   211,   212,  1151,   214,   215,   216,   217,
       0,   218,   219,   220,     0,   221,   222,   223,     0,   224,
     225,   226,   227,     0,   229,   230,   231,   232,   233,     0,
       0,   235,     0,   236,   237,  1589,   239,     0,   240,     0,
     241,  1590,     0,  1591,   244,   245,  -981,  1592,   248,     0,
     249,   250,     0,     0,     0,     0,   253,   254,     0,   255,
     256,   257,   258,   259,   260,   261,  1593,   263,   264,   265,
     266,     0,   267,   268,   269,   270,   271,   272,   273,     0,
     274,  1594,     0,   277,   278,   279,   280,   281,  1595,  1596,
       0,  1597,     0,   285,  1598,  1599,   288,  1600,   290,   291,
     292,   293,   294,   295,   296,     0,     0,   297,  1601,   299,
    1602,     0,   301,   302,   303,   304,   305,   306,   307,   308,
    1603,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     329,  1604,  1605,  1606,   333,   334,   335,   336,     0,     0,
     338,   339,  1607,   341,     0,     0,   343,  1608,   345,   346,
     347,     0,   348,   349,     0,     0,   350,   351,   352,     0,
       0,   353,   354,     0,  1609,   357,  1610,     0,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,     0,     0,     0,     0,   373,   374,     0,  1611,   377,
     378,     0,   380,   381,   382,     0,   383,   384,   385,   386,
     387,   388,   389,   390,     0,   391,   392,   393,  1612,   395,
     396,   397,   398,     0,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,     0,   413,
     414,  1613,   416,   417,   418,  1614,   420,   421,   422,   423,
     424,   425,   426,   427,   428,   429,   430,   431,   432,     0,
    1615,   433,   434,   435,   436,   437,   438,  1616,   440,   441,
     442,     0,  1617,   444,   445,  1618,   447,     0,   448,   449,
     450,   451,   452,   453,   454,   455,   456,   457,   458,   459,
     460,  1619,   462,     0,     0,     0,   464,   465,     0,   466,
    1620,   468,   469,   470,   471,   472,     0,   473,  1621,  1622,
       0,   476,     0,   477,   478,     0,   480,     0,     0,   482,
     483,  1623,   485,   486,   487,   488,   489,  1624,     0,   490,
     491,   492,     0,   493,   494,   495,   496,     0,   497,   498,
     499,   500,   501,     0,  1625,     0,   504,  1626,   506,   507,
     508,   509,   510,   511,   512,   513,   514,     0,     0,   515,
       0,     0,   516,   517,   518,   519,   520,   521,   545,     0,
     573,     0,     0,     0,     0,     0,     0,     0,     0,   533,
     534,   535,   536,     0,     0,     0,     0,   120,   121,   122,
     123,   124,   125,   126,   127,   128,     0,   129,   130,   131,
       0,     0,     0,     0,     0,   132,     0,     0,     0,     0,
     134,   135,     0,   136,   137,   138,     0,   140,   141,   142,
     143,   144,     0,   146,   147,     0,   148,   149,   150,   151,
     152,   153,     0,     0,   154,   155,   156,   157,   158,   159,
     160,     0,   161,   162,   163,   164,   165,     0,     0,     0,
     167,   168,   169,   170,   171,   172,     0,   174,   175,   176,
       0,   177,   178,   179,   180,   181,   182,     0,     0,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,   196,   197,   198,     0,   199,     0,   200,   201,   202,
     203,   204,   205,     0,     0,   206,   207,   208,   209,   210,
       0,     0,   211,   212,   213,   214,   215,   216,   217,     0,
     218,   219,   220,     0,   221,   222,   223,     0,   224,   225,
     226,   227,   228,   229,   230,   231,   232,   233,   234,     0,
     235,     0,   236,   237,   238,   239,     0,   240,     0,   241,
       0,     0,     0,   244,   245,   546,     0,   248,     0,   249,
     250,     0,     0,   251,   252,   253,   254,     0,   255,   256,
     257,   258,   259,  3162,   261,     0,   263,   264,   265,   266,
       0,   267,   268,   269,   270,   271,   272,   273,     0,   274,
       0,   276,   277,   278,   279,   280,   281,   282,   283,     0,
     284,     0,   285,     0,     0,   288,     0,   290,   291,   292,
     293,   294,   295,   296,     0,     0,   297,     0,   299,     0,
       0,   301,   302,   303,   304,   305,   306,   307,   308,   547,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,   323,   324,   325,   326,   327,   328,   329,
     330,     0,   332,   333,   334,   335,   336,   337,     0,   338,
     339,     0,   341,     0,   342,   343,   344,   345,   346,   347,
       0,   348,   349,     0,     0,   350,   351,   352,     0,     0,
     353,   354,   355,     0,   357,     0,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
       0,     0,     0,     0,   373,   374,   375,     0,   377,   378,
     379,   380,   381,   382,     0,   383,   384,   385,   386,   387,
     388,   389,   390,     0,   391,   392,   393,   394,   395,   396,
     397,   398,     0,   399,   400,   401,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,     0,   413,   414,
       0,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,     0,     0,
     433,   434,   435,   436,   437,   438,   439,   440,   441,   442,
       0,     0,   444,   445,   446,   447,     0,   448,   449,   450,
     451,   452,   453,   454,   455,   456,   457,   458,   459,   460,
     548,   462,   463,     0,     0,   464,   465,     0,   466,     0,
     468,   469,   470,   471,   472,     0,   473,   474,   475,     0,
     476,     0,   477,   478,   479,   480,   481,     0,   482,   483,
     484,   485,   486,   487,   488,   489,     0,     0,   490,   491,
     492,     0,   493,   494,   495,   496,     0,   497,   498,   499,
     500,   501,   502,   503,     0,   504,     0,   506,   507,   508,
     509,   510,   511,   512,   513,   514,     0,     0,   515,     0,
       0,   516,   517,   518,   519,   520,   521,   522,   523,   524,
     525,   526,   527,   528,   529,   530,   531,   532,   533,   534,
     535,   536,   545,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   120,   121,   122,   123,   124,   125,   126,   127,   128,
       0,   129,   130,   131,     0,     0,     0,     0,     0,   132,
       0,     0,     0,     0,   134,   135,     0,   136,   137,   138,
       0,   140,   141,   142,   143,   144,     0,   146,   147,     0,
     148,   149,   150,   151,   152,   153,     0,     0,   154,   155,
     156,   157,   158,   159,   160,     0,   161,   162,   163,   164,
     165,     0,     0,     0,   167,   168,   169,   170,   171,   172,
       0,   174,   175,   176,     0,   177,   178,   179,   180,   181,
     182,     0,     0,   184,   185,   186,   187,   188,   189,   190,
     191,   192,   193,   194,   195,   196,   197,   198,     0,   199,
       0,   200,   201,   202,   203,   204,   205,     0,     0,   206,
     207,   208,   209,   210,     0,     0,   211,   212,   213,   214,
     215,   216,   217,     0,   218,   219,   220,     0,   221,   222,
     223,     0,   224,   225,   226,   227,   228,   229,   230,   231,
     232,   233,   234,     0,   235,     0,   236,   237,   238,   239,
       0,   240,     0,   241,     0,     0,     0,   244,   245,   546,
       0,   248,     0,   249,   250,     0,     0,   251,   252,   253,
     254,     0,   255,   256,   257,   258,   259,   260,   261,     0,
     263,   264,   265,   266,     0,   267,   268,   269,   270,   271,
     272,   273,     0,   274,     0,   276,   277,   278,   279,   280,
     281,   282,   283,     0,   284,     0,   285,     0,     0,   288,
       0,   290,   291,   292,   293,   294,   295,   296,     0,     0,
     297,     0,   299,     0,     0,   301,   302,   303,   304,   305,
     306,   307,   308,   547,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
     326,   327,   328,   329,   330,     0,   332,   333,   334,   335,
     336,   337,     0,   338,   339,     0,   341,     0,   342,   343,
     344,   345,   346,   347,     0,   348,   349,     0,     0,   350,
     351,   352,     0,     0,   353,   354,   355,     0,   357,     0,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,     0,     0,     0,     0,   373,   374,
     375,     0,   377,   378,   379,   380,   381,   382,     0,   383,
     384,   385,   386,   387,   388,   389,   390,     0,   391,   392,
     393,   394,   395,   396,   397,   398,     0,   399,   400,   401,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,     0,   413,   414,     0,   416,   417,   418,   419,   420,
     421,   422,   423,   424,   425,   426,   427,   428,   429,   430,
     431,   432,     0,     0,   433,   434,   435,   436,   437,   438,
     439,   440,   441,   442,     0,     0,   444,   445,   446,   447,
       0,   448,   449,   450,   451,   452,   453,   454,   455,   456,
     457,   458,   459,   460,   548,   462,   463,     0,     0,   464,
     465,     0,   466,     0,   468,   469,   470,   471,   472,     0,
     473,   474,   475,     0,   476,     0,   477,   478,   479,   480,
     481,     0,   482,   483,   484,   485,   486,   487,   488,   489,
       0,     0,   490,   491,   492,     0,   493,   494,   495,   496,
       0,   497,   498,   499,   500,   501,   502,   503,     0,   504,
       0,   506,   507,   508,   509,   510,   511,   512,   513,   514,
       0,     0,   515,     0,     0,   516,   517,   518,   519,   520,
     521,   522,   523,   524,   525,   526,   527,   528,   529,   530,
     531,   532,   533,   534,   535,   536,   545,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   120,   121,   122,   123,   124,
     125,   126,   127,   128,     0,   129,   130,   131,     0,     0,
       0,     0,     0,   132,     0,     0,     0,     0,   134,   135,
       0,   136,   137,   138,     0,   140,   141,   142,   143,   144,
       0,   146,   147,     0,   148,   149,   150,   151,   152,   153,
       0,     0,   154,   155,   156,   157,   158,   159,   160,     0,
     161,   162,   163,   164,   165,     0,     0,     0,   167,   168,
     169,   170,   171,   172,     0,   174,   175,   176,     0,   177,
     178,   179,   180,   181,   182,     0,     0,   184,   185,   186,
     187,   188,   189,   190,   191,   192,   193,   194,   195,   196,
     197,   198,     0,   199,     0,   200,   201,   202,   203,   204,
     205,     0,     0,   206,   207,   208,   209,   210,     0,     0,
     211,   212,   213,   214,   215,   216,   217,     0,   218,   219,
     220,     0,   221,   222,   223,     0,   224,   225,   226,   227,
     228,   229,   230,   231,   232,   233,   234,     0,   235,     0,
     236,   237,   238,   239,     0,   240,     0,   241,     0,     0,
       0,   244,   245,   546,     0,   865,     0,   249,   250,     0,
       0,   251,   252,   253,   254,     0,   255,   256,   257,   258,
     259,   260,   261,     0,   263,   264,   265,   266,     0,   267,
     268,   269,   270,   271,   272,   273,     0,   274,     0,   276,
     277,   278,   279,   280,   281,   282,   283,     0,   284,     0,
     285,     0,     0,   288,     0,   290,   291,   292,   293,   294,
     295,   296,     0,     0,   297,     0,   299,     0,     0,   301,
     302,   866,   304,   305,   306,   307,   308,   547,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,   323,   324,   325,   326,   327,   328,   329,   330,     0,
     332,   333,   334,   335,   336,   337,     0,   338,   339,     0,
     341,     0,   342,   343,   344,   345,   346,   347,     0,   348,
     349,     0,     0,   350,   351,   352,     0,     0,   353,   354,
     355,     0,   357,     0,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,     0,     0,
       0,     0,   373,   374,   375,     0,   377,   378,   379,   380,
     381,   382,     0,   383,   384,   385,   386,   387,   388,   389,
     390,     0,   391,   392,   393,   394,   395,   396,   397,   398,
       0,   399,   400,   401,   402,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,     0,   413,   414,     0,   416,
     417,   418,   419,   420,   421,   422,   423,   867,   425,   426,
     427,   428,   429,   430,   431,   432,     0,     0,   433,   434,
     435,   436,   868,   438,   439,   440,   441,   442,     0,     0,
     444,   445,   446,   447,     0,   448,   449,   450,   451,   452,
     453,   454,   455,   456,   457,   458,   459,   460,   548,   462,
     463,     0,     0,   464,   465,     0,   466,     0,   468,   469,
     470,   471,   472,     0,   473,   869,   475,     0,   476,     0,
     477,   478,   479,   480,   481,     0,   482,   483,   484,   485,
     486,   487,   488,   489,     0,     0,   490,   491,   492,     0,
     493,   494,   495,   496,     0,   497,   498,   499,   500,   501,
     502,   503,     0,   504,     0,   506,   507,   508,   509,   510,
     511,   512,   513,   514,     0,     0,   515,     0,     0,   516,
     517,   518,   519,   520,   521,   522,   523,   524,   525,   526,
     527,   528,   529,   530,   531,   532,   533,   534,   535,   536,
     545,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   120,
     121,   122,   123,   124,   125,   126,   127,   128,     0,   129,
     130,   131,     0,     0,     0,     0,     0,   132,     0,     0,
       0,     0,   134,   135,     0,   136,   137,   138,     0,   140,
     141,   142,   143,   144,     0,   146,   147,     0,   148,   149,
     150,   151,   152,   153,     0,     0,   154,   155,   156,   157,
     158,   159,   160,     0,   161,   162,   163,   164,   165,     0,
       0,     0,   167,   168,   169,   170,   171,   172,     0,   174,
     175,   176,     0,   177,   178,   179,   180,   181,   182,     0,
       0,   184,   185,   186,   187,   188,   189,   190,   191,   192,
     193,   194,   195,   196,   197,   198,     0,   199,     0,   200,
     201,   202,   203,   204,   205,     0,     0,   206,   207,   208,
     209,   210,     0,     0,   211,   212,   213,   214,   215,   216,
     217,     0,   218,   219,   220,     0,   221,   222,   223,     0,
     224,   225,   226,   227,   228,   229,   230,   231,   232,   233,
     234,     0,   235,     0,   236,   237,   238,   239,     0,   240,
       0,   241,     0,     0,     0,   244,   245,   546,     0,   248,
       0,   249,   250,     0,     0,   251,   252,   253,   254,     0,
     255,   256,   257,   258,   259,  1039,   261,     0,   263,   264,
     265,   266,     0,   267,   268,   269,   270,   271,   272,   273,
       0,   274,     0,   276,   277,   278,   279,   280,   281,   282,
     283,     0,   284,     0,   285,     0,     0,   288,     0,   290,
     291,   292,   293,   294,   295,   296,     0,     0,   297,     0,
     299,     0,     0,   301,   302,   303,   304,   305,   306,   307,
     308,   547,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323,   324,   325,   326,   327,
     328,   329,   330,     0,   332,   333,   334,   335,   336,   337,
       0,   338,   339,     0,   341,     0,   342,   343,   344,   345,
     346,   347,     0,   348,   349,     0,     0,   350,   351,   352,
       0,     0,   353,   354,   355,     0,   357,     0,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,     0,     0,     0,     0,   373,   374,   375,     0,
     377,   378,   379,   380,   381,   382,     0,   383,   384,   385,
     386,   387,   388,   389,   390,     0,   391,   392,   393,   394,
     395,   396,   397,   398,     0,   399,   400,   401,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,     0,
     413,   414,     0,   416,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,   427,   428,   429,   430,   431,   432,
       0,     0,   433,   434,   435,   436,   437,   438,   439,   440,
     441,   442,     0,     0,   444,   445,   446,   447,     0,   448,
     449,   450,   451,   452,   453,   454,   455,   456,   457,   458,
     459,   460,   548,   462,   463,     0,     0,   464,   465,     0,
     466,     0,   468,   469,   470,   471,   472,     0,   473,   474,
     475,     0,   476,     0,   477,   478,   479,   480,   481,     0,
     482,   483,   484,   485,   486,   487,   488,   489,     0,     0,
     490,   491,   492,     0,   493,   494,   495,   496,     0,   497,
     498,   499,   500,   501,   502,   503,     0,   504,     0,   506,
     507,   508,   509,   510,   511,   512,   513,   514,     0,     0,
     515,     0,     0,   516,   517,   518,   519,   520,   521,   522,
     523,   524,   525,   526,   527,   528,   529,   530,   531,   532,
     533,   534,   535,   536,   545,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   120,   121,   122,   123,   124,   125,   126,
     127,   128,     0,   129,   130,   131,     0,     0,     0,     0,
       0,   132,     0,     0,     0,     0,   134,   135,     0,   136,
     137,   138,     0,   140,   141,   142,   143,   144,     0,   146,
     147,     0,   148,   149,   150,   151,   152,   153,     0,     0,
     154,   155,   156,   157,   158,   159,   160,     0,   161,   162,
     163,   164,   165,     0,     0,     0,   167,   168,   169,   170,
     171,   172,     0,   174,   175,   176,     0,   177,   178,   179,
     180,   181,   182,     0,     0,   184,   185,   186,   187,   188,
     189,   190,   191,   192,   193,   194,   195,   196,   197,   198,
       0,   199,     0,   200,   201,   202,   203,   204,   205,     0,
       0,   206,   207,   208,   209,   210,     0,     0,   211,   212,
     213,   214,   215,   216,   217,     0,   218,   219,   220,     0,
     221,   222,   223,     0,   224,   225,   226,   227,   228,   229,
     230,   231,   232,   233,   234,     0,   235,     0,   236,   237,
     238,   239,     0,   240,     0,   241,     0,     0,     0,   244,
     245,   546,     0,   248,     0,   249,   250,     0,     0,   251,
     252,   253,   254,     0,   255,   256,   257,   258,   259,   260,
     261,     0,   263,   264,   265,   266,     0,   267,   268,   269,
     270,   271,   272,   273,     0,   274,     0,   276,   277,   278,
     279,   280,   281,   282,   283,     0,   284,     0,   285,     0,
       0,   288,     0,   290,   291,   292,   293,   294,   295,   296,
       0,     0,   297,     0,   299,     0,     0,   301,   302,   303,
     304,   305,   306,   307,   308,   547,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,   329,   330,     0,   332,   333,
     334,   335,   336,   337,     0,   338,   339,     0,   341,     0,
     342,   343,   344,   345,   346,   347,     0,   348,   349,     0,
       0,   350,   351,   352,     0,     0,   353,   354,   355,     0,
     357,     0,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,     0,     0,     0,     0,
     373,   374,   375,     0,   377,   378,   379,   380,   381,   382,
       0,   383,   384,   385,   386,   387,   388,   389,   390,     0,
     391,   392,   393,   394,   395,   396,   397,   398,     0,   399,
     400,   401,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,     0,   413,   414,     0,   416,   417,   418,
     419,   420,   421,   422,   423,   867,   425,   426,   427,   428,
     429,   430,   431,   432,     0,     0,   433,   434,   435,   436,
     437,   438,   439,   440,   441,   442,     0,     0,   444,   445,
     446,   447,     0,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   548,   462,   463,     0,
       0,   464,   465,     0,   466,     0,   468,   469,   470,   471,
     472,     0,   473,   869,   475,     0,   476,     0,   477,   478,
     479,   480,   481,     0,   482,   483,   484,   485,   486,   487,
     488,   489,     0,     0,   490,   491,   492,     0,   493,   494,
     495,   496,     0,   497,   498,   499,   500,   501,   502,   503,
       0,   504,     0,   506,   507,   508,   509,   510,   511,   512,
     513,   514,     0,     0,   515,     0,     0,   516,   517,   518,
     519,   520,   521,   522,   523,   524,   525,   526,   527,   528,
     529,   530,   531,   532,   533,   534,   535,   536,   545,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   120,   121,   122,
     123,   124,   125,   126,   127,   128,     0,   129,   130,   131,
       0,     0,     0,     0,     0,   132,     0,     0,     0,     0,
     134,   135,     0,   136,   137,   138,     0,   140,   141,   142,
     143,   144,     0,   146,   147,     0,   148,   149,   150,   151,
     152,   153,     0,     0,   154,   155,   156,   157,   158,   159,
     160,     0,   161,   162,   163,   164,   165,     0,     0,     0,
     167,   168,   169,   170,   171,   172,     0,   174,   175,   176,
       0,   177,   178,   179,   180,   181,   182,     0,     0,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,   196,   197,   198,     0,   199,     0,   200,   201,   202,
     203,   204,   205,     0,     0,   206,   207,   208,   209,   210,
       0,     0,   211,   212,   213,   214,   215,   216,   217,     0,
     218,   219,   220,     0,   221,   222,   223,     0,   224,   225,
     226,   227,   228,   229,   230,   231,   232,   233,   234,     0,
     235,     0,   236,   237,   238,   239,     0,   240,     0,   241,
       0,     0,     0,   244,   245,   546,     0,   248,     0,   249,
     250,     0,     0,   251,   252,   253,   254,     0,   255,   256,
     257,   258,   259,  1406,   261,     0,   263,   264,   265,   266,
       0,   267,   268,   269,   270,   271,   272,   273,     0,   274,
       0,   276,   277,   278,   279,   280,   281,   282,   283,     0,
     284,     0,   285,     0,     0,   288,     0,   290,   291,   292,
     293,   294,   295,   296,     0,     0,   297,     0,   299,     0,
       0,   301,   302,   303,   304,   305,   306,   307,   308,   547,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,   323,   324,   325,   326,   327,   328,   329,
     330,     0,   332,   333,   334,   335,   336,   337,     0,   338,
     339,     0,   341,     0,   342,   343,   344,   345,   346,   347,
       0,   348,   349,     0,     0,   350,   351,   352,     0,     0,
     353,   354,   355,     0,   357,     0,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
       0,     0,     0,     0,   373,   374,   375,     0,   377,   378,
     379,   380,   381,   382,     0,   383,   384,   385,   386,   387,
     388,   389,   390,     0,   391,   392,   393,   394,   395,   396,
     397,   398,     0,   399,   400,   401,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,     0,   413,   414,
       0,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,     0,     0,
     433,   434,   435,   436,   437,   438,   439,   440,   441,   442,
       0,     0,   444,   445,   446,   447,     0,   448,   449,   450,
     451,   452,   453,   454,   455,   456,   457,   458,   459,   460,
     548,   462,   463,     0,     0,   464,   465,     0,   466,     0,
     468,   469,   470,   471,   472,     0,   473,   474,   475,     0,
     476,     0,   477,   478,   479,   480,   481,     0,   482,   483,
     484,   485,   486,   487,   488,   489,     0,     0,   490,   491,
     492,     0,   493,   494,   495,   496,     0,   497,   498,   499,
     500,   501,   502,   503,     0,   504,     0,   506,   507,   508,
     509,   510,   511,   512,   513,   514,     0,     0,   515,     0,
       0,   516,   517,   518,   519,   520,   521,   522,   523,   524,
     525,   526,   527,   528,   529,   530,   531,   532,   533,   534,
     535,   536,   545,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   120,   121,   122,   123,   124,   125,   126,   127,   128,
       0,   129,   130,   131,     0,     0,     0,     0,     0,   132,
       0,     0,     0,     0,   134,   135,     0,   136,   137,   138,
       0,   140,   141,   142,   143,   144,     0,   146,   147,     0,
     148,   149,   150,   151,   152,   153,     0,     0,   154,   155,
     156,   157,   158,   159,   160,     0,   161,   162,   163,   164,
     165,     0,     0,     0,   167,   168,   169,   170,   171,   172,
       0,   174,   175,   176,     0,   177,   178,   179,   180,   181,
     182,     0,     0,   184,   185,   186,   187,   188,   189,   190,
     191,   192,   193,   194,   195,   196,   197,   198,     0,   199,
       0,   200,   201,   202,   203,   204,   205,     0,     0,   206,
     207,   208,   209,   210,     0,     0,   211,   212,   213,   214,
     215,   216,   217,     0,   218,   219,   220,     0,   221,   222,
     223,     0,   224,   225,   226,   227,   228,   229,   230,   231,
     232,   233,   234,     0,   235,     0,   236,   237,   238,   239,
       0,   240,     0,   241,     0,     0,     0,   244,   245,   546,
       0,   248,     0,   249,   250,     0,     0,   251,   252,   253,
     254,     0,   255,   256,   257,   258,   259,  1418,   261,     0,
     263,   264,   265,   266,     0,   267,   268,   269,   270,   271,
     272,   273,     0,   274,     0,   276,   277,   278,   279,   280,
     281,   282,   283,     0,   284,     0,   285,     0,     0,   288,
       0,   290,   291,   292,   293,   294,   295,   296,     0,     0,
     297,     0,   299,     0,     0,   301,   302,   303,   304,   305,
     306,   307,   308,   547,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
     326,   327,   328,   329,   330,     0,   332,   333,   334,   335,
     336,   337,     0,   338,   339,     0,   341,     0,   342,   343,
     344,   345,   346,   347,     0,   348,   349,     0,     0,   350,
     351,   352,     0,     0,   353,   354,   355,     0,   357,     0,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,     0,     0,     0,     0,   373,   374,
     375,     0,   377,   378,   379,   380,   381,   382,     0,   383,
     384,   385,   386,   387,   388,   389,   390,     0,   391,   392,
     393,   394,   395,   396,   397,   398,     0,   399,   400,   401,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,     0,   413,   414,     0,   416,   417,   418,   419,   420,
     421,   422,   423,   424,   425,   426,   427,   428,   429,   430,
     431,   432,     0,     0,   433,   434,   435,   436,   437,   438,
     439,   440,   441,   442,     0,     0,   444,   445,   446,   447,
       0,   448,   449,   450,   451,   452,   453,   454,   455,   456,
     457,   458,   459,   460,   548,   462,   463,     0,     0,   464,
     465,     0,   466,     0,   468,   469,   470,   471,   472,     0,
     473,   474,   475,     0,   476,     0,   477,   478,   479,   480,
     481,     0,   482,   483,   484,   485,   486,   487,   488,   489,
       0,     0,   490,   491,   492,     0,   493,   494,   495,   496,
       0,   497,   498,   499,   500,   501,   502,   503,     0,   504,
       0,   506,   507,   508,   509,   510,   511,   512,   513,   514,
       0,     0,   515,     0,     0,   516,   517,   518,   519,   520,
     521,   522,   523,   524,   525,   526,   527,   528,   529,   530,
     531,   532,   533,   534,   535,   536,   545,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   120,   121,   122,   123,   124,
     125,   126,   127,   128,     0,   129,   130,   131,     0,     0,
       0,     0,     0,   132,     0,  1769,     0,     0,   134,   135,
       0,   136,   137,   138,     0,   140,   141,   142,   143,   144,
       0,   146,   147,     0,   148,   149,   150,   151,   152,   153,
       0,     0,   154,   155,   156,   157,   158,   159,   160,     0,
     161,   162,   163,   164,   165,     0,     0,     0,   167,   168,
     169,   170,   171,   172,     0,   174,   175,   176,     0,   177,
     178,   179,   180,   181,   182,     0,     0,   184,   185,   186,
     187,   188,   189,   190,   191,   192,   193,   194,   195,   196,
     197,   198,     0,   199,     0,   200,   201,   202,   203,   204,
     205,     0,     0,   206,   207,   208,   209,   210,     0,     0,
     211,   212,   213,   214,   215,   216,   217,     0,   218,   219,
     220,     0,   221,   222,   223,     0,   224,   225,   226,   227,
     228,   229,   230,   231,   232,   233,   234,     0,   235,     0,
     236,   237,   238,   239,     0,   240,     0,   241,     0,     0,
       0,   244,   245,   546,     0,   248,     0,   249,   250,     0,
       0,   251,   252,   253,   254,     0,   255,   256,   257,   258,
     259,   260,   261,     0,   263,   264,   265,   266,     0,   267,
     268,   269,   270,   271,   272,   273,     0,   274,     0,   276,
     277,   278,   279,   280,   281,   282,   283,     0,   284,     0,
     285,     0,     0,   288,     0,   290,   291,   292,   293,   294,
     295,   296,     0,     0,   297,     0,   299,     0,     0,   301,
     302,   303,   304,   305,   306,   307,   308,   547,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,   323,   324,   325,   326,   327,   328,   329,   330,     0,
     332,   333,   334,   335,   336,   337,     0,   338,   339,     0,
     341,     0,   342,   343,   344,   345,   346,   347,     0,   348,
     349,     0,     0,   350,   351,   352,     0,     0,   353,   354,
     355,     0,   357,     0,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,     0,     0,
       0,     0,   373,   374,   375,     0,   377,   378,   379,   380,
     381,   382,     0,   383,   384,   385,   386,   387,   388,   389,
     390,     0,   391,   392,   393,   394,   395,   396,   397,   398,
       0,   399,   400,   401,   402,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,     0,   413,   414,     0,   416,
     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
     427,   428,   429,   430,   431,   432,     0,     0,   433,   434,
     435,   436,   437,     0,   439,   440,   441,   442,     0,     0,
     444,   445,   446,   447,     0,   448,   449,   450,   451,   452,
     453,   454,   455,   456,   457,   458,   459,   460,   548,   462,
     463,     0,     0,   464,   465,     0,   466,     0,   468,   469,
     470,   471,   472,     0,   473,   474,   475,     0,   476,     0,
     477,   478,   479,   480,   481,     0,   482,   483,   484,   485,
     486,   487,   488,   489,     0,     0,   490,   491,   492,     0,
     493,   494,   495,   496,     0,   497,   498,   499,   500,   501,
     502,   503,     0,   504,     0,   506,   507,   508,   509,   510,
     511,   512,   513,   514,     0,     0,   515,     0,     0,   516,
     517,   518,   519,   520,   521,   522,   523,   524,   525,   526,
     527,   528,   529,   530,   531,   532,   533,   534,   535,   536,
     545,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   120,
     121,   122,   123,   124,   125,   126,   127,   128,     0,   129,
     130,   131,     0,     0,     0,     0,     0,   132,     0,     0,
       0,     0,   134,   135,     0,   136,   137,   138,     0,   140,
     141,   142,   143,   144,     0,   146,   147,     0,   148,   149,
     150,   151,   152,   153,     0,     0,   154,   155,   156,   157,
     158,   159,   160,     0,   161,   162,   163,   164,   165,     0,
       0,     0,   167,   168,   169,   170,   171,   172,     0,   174,
     175,   176,     0,   177,   178,   179,   180,   181,   182,     0,
       0,   184,   185,   186,   187,   188,   189,   190,   191,   192,
     193,   194,   195,   196,   197,   198,     0,   199,     0,   200,
     201,   202,   203,   204,   205,     0,     0,   206,   207,   208,
     209,   210,     0,     0,   211,   212,   213,   214,   215,   216,
     217,     0,   218,   219,   220,     0,   221,   222,   223,     0,
     224,   225,   226,   227,   228,   229,   230,   231,   232,   233,
     234,     0,   235,     0,   236,   237,   238,   239,     0,   240,
       0,   241,     0,     0,     0,   244,   245,   546,     0,   248,
       0,   249,   250,     0,     0,   251,   252,   253,   254,     0,
     255,   256,   257,   258,   259,  1954,   261,     0,   263,   264,
     265,   266,     0,   267,   268,   269,   270,   271,   272,   273,
       0,   274,     0,   276,   277,   278,   279,   280,   281,   282,
     283,     0,   284,     0,   285,     0,     0,   288,     0,   290,
     291,   292,   293,   294,   295,   296,     0,     0,   297,     0,
     299,     0,     0,   301,   302,   303,   304,   305,   306,   307,
     308,   547,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323,   324,   325,   326,   327,
     328,   329,   330,     0,   332,   333,   334,   335,   336,   337,
       0,   338,   339,     0,   341,     0,   342,   343,   344,   345,
     346,   347,     0,   348,   349,     0,     0,   350,   351,   352,
       0,     0,   353,   354,   355,     0,   357,     0,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,     0,     0,     0,     0,   373,   374,   375,     0,
     377,   378,   379,   380,   381,   382,     0,   383,   384,   385,
     386,   387,   388,   389,   390,     0,   391,   392,   393,   394,
     395,   396,   397,   398,     0,   399,   400,   401,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,     0,
     413,   414,     0,   416,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,   427,   428,   429,   430,   431,   432,
       0,     0,   433,   434,   435,   436,   437,   438,   439,   440,
     441,   442,     0,     0,   444,   445,   446,   447,     0,   448,
     449,   450,   451,   452,   453,   454,   455,   456,   457,   458,
     459,   460,   548,   462,   463,     0,     0,   464,   465,     0,
     466,     0,   468,   469,   470,   471,   472,     0,   473,   474,
     475,     0,   476,     0,   477,   478,   479,   480,   481,     0,
     482,   483,   484,   485,   486,   487,   488,   489,     0,     0,
     490,   491,   492,     0,   493,   494,   495,   496,     0,   497,
     498,   499,   500,   501,   502,   503,     0,   504,     0,   506,
     507,   508,   509,   510,   511,   512,   513,   514,     0,     0,
     515,     0,     0,   516,   517,   518,   519,   520,   521,   522,
     523,   524,   525,   526,   527,   528,   529,   530,   531,   532,
     533,   534,   535,   536,   545,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   120,   121,   122,   123,   124,   125,   126,
     127,   128,     0,   129,   130,   131,     0,     0,     0,     0,
       0,   132,     0,     0,     0,     0,   134,   135,     0,   136,
     137,   138,     0,   140,   141,   142,   143,   144,     0,   146,
     147,     0,   148,   149,   150,   151,   152,   153,     0,     0,
     154,   155,   156,   157,   158,   159,   160,     0,   161,   162,
     163,   164,   165,     0,     0,     0,   167,   168,   169,   170,
     171,   172,     0,   174,   175,   176,     0,   177,   178,   179,
     180,   181,   182,     0,     0,   184,   185,   186,   187,   188,
     189,   190,   191,   192,   193,   194,   195,   196,   197,   198,
       0,   199,     0,   200,   201,   202,   203,   204,   205,     0,
       0,   206,   207,   208,   209,   210,     0,     0,   211,   212,
     213,   214,   215,   216,   217,     0,   218,   219,   220,     0,
     221,   222,   223,     0,   224,   225,   226,   227,   228,   229,
     230,   231,   232,   233,   234,     0,   235,     0,   236,   237,
     238,   239,     0,   240,     0,   241,     0,     0,     0,   244,
     245,   546,     0,   248,     0,   249,   250,     0,     0,   251,
     252,   253,   254,     0,   255,   256,   257,   258,   259,  2330,
     261,     0,   263,   264,   265,   266,     0,   267,   268,   269,
     270,   271,   272,   273,     0,   274,     0,   276,   277,   278,
     279,   280,   281,   282,   283,     0,   284,     0,   285,     0,
       0,   288,     0,   290,   291,   292,   293,   294,   295,   296,
       0,     0,   297,     0,   299,     0,     0,   301,   302,   303,
     304,   305,   306,   307,   308,   547,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,   329,   330,     0,   332,   333,
     334,   335,   336,   337,     0,   338,   339,     0,   341,     0,
     342,   343,   344,   345,   346,   347,     0,   348,   349,     0,
       0,   350,   351,   352,     0,     0,   353,   354,   355,     0,
     357,     0,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,     0,     0,     0,     0,
     373,   374,   375,     0,   377,   378,   379,   380,   381,   382,
       0,   383,   384,   385,   386,   387,   388,   389,   390,     0,
     391,   392,   393,   394,   395,   396,   397,   398,     0,   399,
     400,   401,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,     0,   413,   414,     0,   416,   417,   418,
     419,   420,   421,   422,   423,   424,   425,   426,   427,   428,
     429,   430,   431,   432,     0,     0,   433,   434,   435,   436,
     437,   438,   439,   440,   441,   442,     0,     0,   444,   445,
     446,   447,     0,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   548,   462,   463,     0,
       0,   464,   465,     0,   466,     0,   468,   469,   470,   471,
     472,     0,   473,   474,   475,     0,   476,     0,   477,   478,
     479,   480,   481,     0,   482,   483,   484,   485,   486,   487,
     488,   489,     0,     0,   490,   491,   492,     0,   493,   494,
     495,   496,     0,   497,   498,   499,   500,   501,   502,   503,
       0,   504,     0,   506,   507,   508,   509,   510,   511,   512,
     513,   514,     0,     0,   515,     0,     0,   516,   517,   518,
     519,   520,   521,   522,   523,   524,   525,   526,   527,   528,
     529,   530,   531,   532,   533,   534,   535,   536,   545,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   120,   121,   122,
     123,   124,   125,   126,   127,   128,     0,   129,   130,   131,
       0,     0,     0,     0,     0,   132,     0,     0,     0,     0,
     134,   135,     0,   136,   137,   138,     0,   140,   141,   142,
     143,   144,     0,   146,   147,     0,   148,   149,   150,   151,
     152,   153,     0,     0,   154,   155,   156,   157,   158,   159,
     160,     0,   161,   162,   163,   164,   165,     0,     0,     0,
     167,   168,   169,   170,   171,   172,     0,   174,   175,   176,
       0,   177,   178,   179,   180,   181,   182,     0,     0,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,   196,   197,   198,     0,   199,     0,   200,   201,   202,
     203,   204,   205,     0,     0,   206,   207,   208,   209,   210,
       0,     0,   211,   212,   213,   214,   215,   216,   217,     0,
     218,   219,   220,     0,   221,   222,   223,     0,   224,   225,
     226,   227,   228,   229,   230,   231,   232,   233,   234,     0,
     235,     0,   236,   237,   238,   239,     0,   240,     0,   241,
       0,     0,     0,   244,   245,   546,     0,   248,     0,   249,
     250,     0,     0,   251,   252,   253,   254,     0,   255,   256,
     257,   258,   259,  2345,   261,     0,   263,   264,   265,   266,
       0,   267,   268,   269,   270,   271,   272,   273,     0,   274,
       0,   276,   277,   278,   279,   280,   281,   282,   283,     0,
     284,     0,   285,     0,     0,   288,     0,   290,   291,   292,
     293,   294,   295,   296,     0,     0,   297,     0,   299,     0,
       0,   301,   302,   303,   304,   305,   306,   307,   308,   547,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,   323,   324,   325,   326,   327,   328,   329,
     330,     0,   332,   333,   334,   335,   336,   337,     0,   338,
     339,     0,   341,     0,   342,   343,   344,   345,   346,   347,
       0,   348,   349,     0,     0,   350,   351,   352,     0,     0,
     353,   354,   355,     0,   357,     0,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
       0,     0,     0,     0,   373,   374,   375,     0,   377,   378,
     379,   380,   381,   382,     0,   383,   384,   385,   386,   387,
     388,   389,   390,     0,   391,   392,   393,   394,   395,   396,
     397,   398,     0,   399,   400,   401,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,     0,   413,   414,
       0,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,     0,     0,
     433,   434,   435,   436,   437,   438,   439,   440,   441,   442,
       0,     0,   444,   445,   446,   447,     0,   448,   449,   450,
     451,   452,   453,   454,   455,   456,   457,   458,   459,   460,
     548,   462,   463,     0,     0,   464,   465,     0,   466,     0,
     468,   469,   470,   471,   472,     0,   473,   474,   475,     0,
     476,     0,   477,   478,   479,   480,   481,     0,   482,   483,
     484,   485,   486,   487,   488,   489,     0,     0,   490,   491,
     492,     0,   493,   494,   495,   496,     0,   497,   498,   499,
     500,   501,   502,   503,     0,   504,     0,   506,   507,   508,
     509,   510,   511,   512,   513,   514,     0,     0,   515,     0,
       0,   516,   517,   518,   519,   520,   521,   522,   523,   524,
     525,   526,   527,   528,   529,   530,   531,   532,   533,   534,
     535,   536,  1573,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   120,   121,   122,   123,   124,   125,   126,   127,   128,
       0,   129,   130,   131,     0,     0,     0,  1574,     0,   132,
       0,     0,     0,  1575,   134,   135,     0,   136,   137,   138,
    1576,   140,   141,   142,     0,  1577,  1578,  1579,  1580,     0,
     148,   149,   150,   151,   152,   153,     0,     0,   154,   155,
     156,   157,  1581,  1582,   160,     0,   161,   162,   163,   164,
       0,     0,  1583,     0,  1584,   168,   169,   170,   171,   172,
    1585,   174,   175,   176,     0,   177,   178,   179,   180,   181,
     182,     0,  1586,   184,   185,   186,   187,   188,   189,   190,
     191,   192,   193,  1587,   195,   196,  1588,   198,     0,   199,
       0,   200,   201,   202,   203,   204,   205,     0,     0,   206,
     207,   208,   209,   210,     0,     0,   211,   212,  1151,   214,
     215,   216,   217,     0,   218,   219,   220,     0,   221,   222,
     223,     0,   224,   225,   226,   227,     0,   229,   230,   231,
     232,   233,     0,     0,   235,     0,   236,   237,  1589,   239,
       0,   240,     0,   241,  1590,     0,  1591,   244,   245,     0,
    1592,   248,     0,   249,   250,     0,     0,     0,     0,   253,
     254,     0,   255,   256,   257,   258,   259,   260,   261,  1593,
     263,   264,   265,   266,     0,   267,   268,   269,   270,   271,
     272,   273,     0,   274,  1594,     0,   277,   278,   279,   280,
     281,  1595,  1596,     0,  1597,     0,   285,  1598,  1599,   288,
    1600,   290,   291,   292,   293,   294,   295,   296,     0,     0,
     297,  1601,   299,  1602,     0,   301,   302,   303,   304,   305,
     306,   307,   308,  1603,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
     326,   327,   328,   329,  1604,  1605,  1606,   333,   334,   335,
     336,     0,     0,   338,   339,  1607,   341,     0,     0,   343,
    1608,   345,   346,   347,     0,   348,   349,     0,     0,   350,
     351,   352,     0,     0,   353,   354,     0,  1609,   357,  1610,
       0,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,     0,     0,     0,     0,   373,   374,
       0,  1611,   377,   378,     0,   380,   381,   382,     0,   383,
     384,   385,   386,   387,   388,   389,   390,     0,   391,   392,
     393,  1612,   395,   396,   397,   398,     0,   399,   400,   401,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,     0,   413,   414,  1613,   416,   417,   418,  1614,   420,
     421,   422,   423,   424,   425,   426,   427,   428,   429,   430,
     431,   432,     0,  1615,   433,   434,   435,   436,   437,   438,
    1616,   440,   441,   442,     0,  1617,   444,   445,  1618,   447,
       0,   448,   449,   450,   451,   452,   453,   454,   455,   456,
     457,   458,   459,   460,  1619,   462,     0,     0,     0,   464,
     465,     0,   466,  1620,   468,   469,   470,   471,   472,     0,
     473,  1621,  1622,     0,   476,     0,   477,   478,     0,   480,
       0,     0,   482,   483,  1623,   485,   486,   487,   488,   489,
    1624,     0,   490,   491,   492,     0,   493,   494,   495,   496,
       0,   497,   498,   499,   500,   501,     0,  1625,     0,   504,
    1626,   506,   507,   508,   509,   510,   511,   512,   513,   514,
       0,     0,   515,     0,     0,   516,   517,   518,   519,   520,
     521,  1573,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   533,   534,   535,   536,     0,     0,     0,     0,
     120,   121,   122,   123,   124,   125,   126,   127,   128,     0,
     129,   130,   131,     0,     0,     0,  1574,     0,   132,     0,
       0,     0,  1575,   134,   135,     0,   136,   137,   138,  1576,
     140,   141,   142,     0,  1577,  1578,  1579,  1580,     0,   148,
     149,   150,   151,   152,   153,     0,     0,   154,   155,   156,
     157,  1581,  1582,   160,     0,   161,   162,   163,   164,     0,
       0,  1583,     0,  1584,   168,   169,   170,   171,   172,  1585,
     174,   175,   176,     0,   177,   178,   179,   180,   181,   182,
       0,  1586,   184,   185,   186,   187,   188,   189,   190,   191,
     192,   193,  1587,   195,   196,  1588,   198,     0,   199,     0,
     200,   201,   202,   203,   204,   205,     0,     0,   206,   207,
     208,   209,   210,     0,     0,   211,   212,  1151,   214,   215,
     216,   217,     0,   218,   219,   220,     0,  1936,   222,   223,
       0,   224,   225,   226,   227,     0,   229,   230,   231,   232,
     233,     0,     0,   235,     0,   236,   237,  1589,   239,     0,
     240,     0,   241,  1590,     0,  1591,   244,   245,     0,  1592,
     248,     0,   249,   250,     0,     0,     0,     0,   253,   254,
       0,   255,   256,   257,   258,   259,   260,   261,  1593,   263,
     264,   265,   266,     0,   267,   268,   269,   270,   271,   272,
     273,     0,   274,  1594,     0,   277,   278,   279,   280,   281,
    1595,  1596,     0,  1597,     0,   285,  1598,  1599,   288,  1600,
     290,   291,   292,   293,   294,   295,   296,     0,     0,   297,
    1601,   299,  1602,     0,   301,   302,   303,   304,   305,   306,
     307,   308,  1603,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,   323,   324,   325,   326,
     327,   328,   329,  1604,  1605,  1606,   333,   334,   335,   336,
       0,     0,   338,   339,  1607,   341,     0,     0,   343,  1608,
     345,   346,   347,     0,   348,   349,     0,     0,   350,   351,
     352,     0,     0,   353,   354,     0,  1609,   357,  1610,     0,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
     370,   371,   372,     0,     0,     0,     0,   373,   374,     0,
    1611,   377,   378,     0,   380,   381,   382,     0,   383,   384,
     385,   386,   387,   388,   389,   390,     0,   391,   392,   393,
    1612,   395,   396,   397,   398,     0,   399,   400,   401,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
       0,   413,   414,  1613,   416,   417,   418,  1614,   420,   421,
     422,   423,   424,   425,   426,   427,   428,   429,   430,   431,
     432,     0,  1615,   433,   434,   435,   436,   437,   438,  1616,
     440,   441,   442,     0,  1617,   444,   445,  1618,   447,     0,
     448,   449,   450,   451,   452,   453,   454,   455,   456,   457,
     458,   459,   460,  1619,   462,     0,     0,     0,   464,   465,
       0,   466,  1620,   468,   469,   470,   471,   472,     0,   473,
    1621,  1622,     0,   476,     0,   477,   478,     0,   480,     0,
       0,   482,   483,  1623,   485,   486,   487,   488,   489,  1624,
       0,   490,   491,   492,     0,   493,   494,   495,   496,     0,
     497,   498,   499,   500,   501,     0,  1625,     0,   504,  1626,
     506,   507,   508,   509,   510,   511,   512,   513,   514,     0,
       0,   515,     0,     0,   516,   517,   518,   519,   520,   521,
    3387,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   533,   534,   535,   536,     0,     0,     0,     0,   120,
     121,   122,   123,   124,   125,   126,   127,   128,     0,   129,
     130,   131,     0,     0,     0,  3079,     0,   132,     0,     0,
       0,  3080,   134,   135,     0,   136,   137,   138,  3081,   140,
     141,   142,     0,  1577,  3082,  1579,  1580,     0,   148,   149,
     150,   151,   152,   153,     0,     0,   154,   155,   156,   157,
    1581,  1582,   160,     0,   161,   162,   163,   164,     0,     0,
    3083,     0,  3084,   168,   169,   170,   171,   172,  3085,   174,
     175,   176,     0,   177,   178,   179,   180,   181,   182,     0,
    3086,   184,   185,   186,   187,   188,   189,   190,   191,   192,
     193,  1587,   195,   196,  1588,   198,     0,   199,     0,   200,
     201,   202,   203,   204,   205,     0,     0,   206,   207,   208,
     209,   210,     0,     0,   211,   212,  1151,   214,   215,   216,
     217,     0,   218,   219,   220,     0,   221,   222,   223,     0,
     224,   225,   226,   227,     0,   229,   230,   231,   232,   233,
       0,     0,   235,     0,   236,   237,  1589,   239,     0,   240,
       0,   241,  3087,     0,  3088,   244,   245,  3089,  3090,   248,
       0,   249,   250,     0,     0,     0,     0,   253,   254,     0,
     255,   256,   257,   258,   259,   260,   261,  3091,   263,   264,
     265,   266,     0,   267,   268,   269,   270,   271,   272,   273,
       0,   274,  3092,     0,   277,   278,   279,   280,   281,  1595,
    1596,     0,  1597,     0,   285,  3093,  3094,   288,  3095,   290,
     291,   292,   293,   294,   295,   296,     0,     0,   297,  3096,
     299,  3097,     0,   301,   302,   303,   304,   305,   306,   307,
     308,  3388,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323,   324,   325,   326,   327,
     328,   329,  1604,  3099,  1606,   333,   334,   335,   336,     0,
       0,   338,   339,  3101,   341,     0,     0,   343,  1608,   345,
     346,   347,     0,   348,   349,     0,     0,   350,   351,   352,
       0,     0,   353,   354,     0,  3103,   357,  3104,     0,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,     0,     0,     0,     0,   373,   374,     0,  3105,
     377,   378,     0,   380,   381,   382,     0,   383,   384,   385,
     386,   387,   388,   389,   390,     0,   391,   392,   393,  1612,
     395,   396,   397,   398,     0,   399,   400,   401,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,     0,
     413,   414,  3106,   416,   417,   418,     0,   420,   421,   422,
     423,   424,   425,   426,   427,   428,   429,   430,   431,   432,
       0,  3107,   433,   434,   435,   436,   437,   438,     0,   440,
     441,   442,     0,  3109,   444,   445,  1618,   447,     0,   448,
     449,   450,   451,   452,   453,   454,   455,   456,   457,   458,
     459,   460,  3389,   462,     0,     0,     0,   464,   465,     0,
     466,  3111,   468,   469,   470,   471,   472,     0,   473,  1621,
    1622,     0,   476,     0,   477,   478,     0,   480,     0,     0,
     482,   483,  3112,   485,   486,   487,   488,   489,     0,     0,
     490,   491,   492,     0,   493,   494,   495,   496,     0,   497,
     498,   499,   500,   501,     0,  1625,     0,   504,  3114,   506,
     507,   508,   509,   510,   511,   512,   513,   514,     0,     0,
     515,     0,     0,   516,   517,   518,   519,   520,   521,   545,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     533,   534,   535,   536,     0,     0,     0,     0,   120,   121,
     122,   123,   124,   125,   126,   127,   128,     0,   129,   130,
     131,     0,     0,     0,     0,     0,   132,     0,     0,     0,
       0,   134,   135,     0,   136,   137,   138,     0,   140,   141,
     142,   143,   144,     0,   146,   147,     0,   148,   149,   150,
     151,   152,   153,     0,     0,   154,   155,   156,   157,   158,
     159,   160,     0,   161,   162,   163,   164,   165,     0,     0,
       0,   167,   168,   169,   170,   171,   172,     0,   174,   175,
     176,     0,   177,   178,   179,   180,   181,   182,     0,     0,
     184,   185,   186,   187,   188,   189,   190,   191,   192,   193,
     194,   195,   196,   197,   198,     0,   199,     0,   200,   201,
     202,   203,   204,   205,     0,     0,   206,   207,   208,   209,
     210,     0,     0,   211,   212,   213,   214,   215,   216,   217,
       0,   218,   219,   220,     0,   221,   222,   223,     0,   224,
     225,   226,   227,   228,   229,   230,   231,   232,   233,   234,
       0,   235,     0,   236,   237,   238,   239,     0,   240,     0,
     241,     0,     0,     0,   244,   245,   546,     0,   248,     0,
     249,   250,     0,     0,   251,   252,     0,   254,     0,   255,
     256,   257,   258,   259,   260,   261,     0,   263,   264,   265,
     266,     0,   267,   268,   269,   270,   271,   272,   273,     0,
     274,     0,   276,   277,   278,   279,   280,   281,   282,   283,
       0,   284,     0,   285,     0,     0,   288,     0,   290,   291,
     292,   293,   294,   295,   296,     0,     0,   297,     0,   299,
       0,     0,   301,   302,   303,   304,   305,   306,   307,   308,
     547,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     329,   330,     0,   332,   333,   334,   335,   336,   337,     0,
     338,   339,     0,   341,     0,   342,   343,   344,   345,   346,
     347,     0,   348,   349,     0,     0,   350,   351,   352,     0,
       0,   353,   354,   355,     0,   357,     0,   359,   360,   361,
     362,   363,   364,   365,     0,   367,   368,   369,   370,   371,
     372,     0,     0,     0,     0,   373,   374,   375,     0,   377,
     378,   379,   380,   381,   382,     0,   383,   384,   385,   386,
     387,   388,   389,   390,     0,   391,     0,   393,   394,   395,
     396,   397,   398,     0,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,     0,   413,
     414,     0,   416,   417,   418,   419,     0,   421,   422,   423,
     424,   425,   426,   427,   428,   429,   430,   431,   432,     0,
       0,   433,   434,   435,   436,   437,   438,   439,   440,   441,
     442,     0,     0,   444,   445,   446,   447,     0,   448,   449,
     450,   451,   452,   453,   454,   455,   456,   457,   458,   459,
     460,   548,   462,   463,     0,     0,   464,   465,     0,   466,
       0,   468,   469,   470,   471,   472,     0,   473,   474,   475,
       0,   476,     0,   477,   478,   479,   480,   481,     0,   482,
     483,   484,   485,   486,   487,   488,   489,     0,     0,   490,
     491,   492,     0,   493,   494,   495,   496,     0,   497,   498,
     499,   500,   501,   502,   503,     0,   504,     0,   506,   507,
     508,   509,   510,   511,   512,   513,   514,     0,     0,   515,
       0,     0,   516,   517,   518,   519,   520,   521,   522,   523,
     524,   525,   526,   527,   528,   529,   530,   531,   532,   533,
     534,   535,   536,  1869,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   120,   121,   122,   123,   124,   125,   126,   127,
     128,     0,   129,   130,   131,     0,     0,     0,  1574,     0,
     132,     0,     0,     0,  1575,   134,   135,     0,   136,   137,
     138,  1576,   140,   141,   142,     0,  1577,  1578,  1579,  1580,
       0,   148,   149,   150,   151,   152,   153,     0,     0,   154,
     155,   156,   157,  1581,  1582,   160,     0,   161,   162,   163,
     164,     0,     0,  1583,     0,  1584,   168,   169,   170,   171,
     172,  1585,   174,   175,   176,     0,   177,   178,   179,   180,
     181,   182,     0,  1586,   184,   185,   186,   187,   188,   189,
     190,   191,   192,   193,  1587,   195,   196,  1588,   198,     0,
     199,     0,   200,   201,   202,   203,   204,   205,     0,     0,
     206,   207,   208,   209,   210,     0,     0,   211,   212,  1151,
     214,   215,   216,   217,     0,   218,   219,   220,     0,   221,
     222,   223,     0,   224,   225,   226,   227,     0,   229,   230,
     231,   232,   233,     0,     0,   235,     0,   236,   237,  1589,
     239,     0,   240,     0,   241,  1590,     0,  1591,   244,   245,
       0,  1592,   248,     0,   249,   250,     0,     0,     0,     0,
     253,   254,     0,   255,   256,   257,   258,   259,   260,   261,
    1593,   263,   264,   265,   266,     0,   267,   268,   269,   270,
     271,   272,   273,     0,   274,  1594,     0,   277,   278,   279,
     280,   281,  1595,  1596,     0,  1597,     0,   285,  1598,  1599,
     288,  1600,   290,   291,   292,   293,   294,   295,   296,     0,
       0,   297,  1601,   299,  1602,     0,   301,   302,   303,   304,
     305,   306,   307,   308,     0,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,  1604,  1605,  1606,   333,   334,
     335,   336,     0,     0,   338,   339,  1607,   341,     0,     0,
     343,  1608,   345,   346,   347,     0,   348,   349,     0,     0,
     350,   351,   352,     0,     0,   353,   354,     0,  1609,   357,
    1610,     0,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,   371,   372,     0,     0,     0,     0,   373,
     374,     0,  1611,   377,   378,     0,   380,   381,   382,     0,
     383,   384,   385,   386,   387,   388,   389,   390,     0,   391,
     392,   393,  1612,   395,   396,   397,   398,     0,   399,   400,
     401,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,     0,   413,   414,  1613,   416,   417,   418,     0,
     420,   421,   422,   423,   424,   425,   426,   427,   428,   429,
     430,   431,   432,     0,  1615,   433,   434,   435,   436,   437,
     438,     0,   440,   441,   442,     0,  1617,   444,   445,  1618,
     447,     0,   448,   449,   450,   451,   452,   453,   454,   455,
     456,   457,   458,   459,   460,     0,   462,     0,     0,     0,
     464,   465,     0,   466,  1620,   468,   469,   470,   471,   472,
       0,   473,  1621,  1622,     0,   476,     0,   477,   478,     0,
     480,     0,     0,   482,   483,  1623,   485,   486,   487,   488,
     489,     0,     0,   490,   491,   492,     0,   493,   494,   495,
     496,     0,   497,   498,   499,   500,   501,     0,  1625,     0,
     504,  1626,   506,   507,   508,   509,   510,   511,   512,   513,
     514,     0,     0,   515,     0,     0,   516,   517,   518,   519,
     520,   521,   893,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   533,   534,   535,   536,     0,     0,     0,
       0,   120,   121,   122,   123,     0,   125,   126,   127,   128,
       0,   129,   130,   131,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   134,   135,     0,   136,   137,   138,
       0,   140,   141,   142,   894,   895,     0,   896,   897,     0,
     148,   149,   150,   151,   152,   153,     0,     0,   154,   155,
     156,   157,   898,   899,   160,     0,   161,   162,   163,   164,
     900,     0,     0,     0,     0,   168,   169,   170,   171,   172,
       0,   174,   175,   176,     0,   177,   178,   179,   180,   181,
       0,     0,     0,   184,   185,   186,   187,   188,   189,   190,
     191,   192,   193,   901,   195,   196,   902,   198,     0,   199,
       0,   200,   201,   202,   203,   204,   205,     0,     0,     0,
     207,   208,   209,   210,     0,     0,   211,   212,   213,   214,
     215,     0,     0,     0,   218,   219,   220,     0,   221,   222,
     223,     0,   224,   225,   226,   227,   903,   229,   230,   231,
     232,   233,   904,     0,   235,     0,   236,   237,   905,   239,
       0,   240,     0,   241,     0,     0,     0,   244,   245,   906,
       0,   248,     0,   249,     0,     0,     0,   907,   908,     0,
     254,     0,   255,   256,   257,   258,   259,   260,   261,     0,
     263,   264,   265,   266,     0,   267,   268,   269,   270,   271,
     272,   273,     0,   274,     0,   909,   277,   278,   279,   280,
     281,   910,   911,     0,   912,     0,   285,     0,     0,   288,
       0,   290,     0,   292,   293,   294,   295,   296,     0,     0,
     297,     0,   299,     0,     0,   301,   302,   303,   304,   305,
     306,   307,   308,   913,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
     326,   327,   328,   329,   914,     0,   915,   333,   334,   335,
       0,   916,     0,   338,   339,     0,   341,     0,   917,   343,
     918,   345,   346,   347,     0,   348,   349,     0,     0,   350,
     351,   352,     0,     0,   353,   354,   919,     0,   357,     0,
     920,   360,   361,   362,   363,   364,   365,   366,   367,   368,
       0,     0,   371,   372,     0,     0,     0,     0,   373,   374,
     921,     0,   377,   378,   922,   380,   381,   382,     0,   383,
     384,   385,   386,   387,     0,     0,   390,     0,   391,   392,
     393,   923,   395,   396,   397,   398,     0,   399,   400,   401,
       0,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,     0,   413,   414,     0,   416,   417,   418,   924,   420,
     421,   422,   423,   424,   425,   426,   427,   428,   429,   430,
     431,   432,     0,     0,   433,   434,   435,   436,   437,   438,
     925,   440,   441,     0,     0,     0,     0,   445,   926,   447,
       0,     0,   449,   450,   451,   452,   453,   454,   455,   456,
     457,   458,   459,   460,   927,   462,   928,     0,     0,   464,
     465,     0,   466,     0,   468,   469,   470,   471,   472,     0,
     473,   929,   930,     0,     0,     0,   477,   478,   931,   480,
     932,     0,   482,   483,   933,   485,   486,   487,   488,   489,
       0,     0,   490,   491,   492,     0,   493,   494,   495,   496,
       0,   497,   498,   499,   500,   501,  1502,   935,     0,   504,
       0,   506,     0,   508,   509,   510,   511,     0,   513,   514,
       0,     0,   515,     0,     0,   516,   517,   518,   519,   520,
     521,   936,   937,   938,   939,   940,   941,   942,   943,   944,
     945,   946,   533,   534,   535,   536,     1,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     2,     0,     3,
       4,     0,     0,     1,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     2,     0,     0,     0,     6,     0,
       0,     0,     0,     0,     0,     0,     0,     7,     0,     0,
       0,     0,     0,     0,     0,     6,     0,     0,     0,     0,
       0,     8,     0,     0,     7,     0,     0,     0,     0,     0,
       0,     0,    10,     0,     0,     0,     0,     0,     8,     0,
       0,     0,     0,     0,    11,     0,   773,     0,     0,    10,
       0,     0,     0,     0,     0,     0,     0,    13,     0,     0,
       0,    11,     0,   773,     0,     0,     0,     0,     0,     0,
       0,     0,    14,    15,    13,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   774,     0,     0,     0,     0,    14,
      15,     0,    18,     0,     0,     0,     0,     0,     0,     0,
      19,   774,     0,     0,     0,     0,     0,     0,     0,    18,
       0,     0,     0,     0,     0,     0,    22,    19,     0,     0,
      23,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    22,     0,     0,     0,    23,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    25,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    25,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    26,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    26,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    27,
      28,    29,     0,     0,     0,     0,     0,    30,     0,     0,
      31,     0,     0,     0,     0,     0,    27,    28,    29,     0,
       0,     0,     0,     0,    30,     0,     0,    31,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    32,     0,     0,     0,     0,     0,     0,     0,
       0,    33,     0,     0,     0,     0,     0,     0,     0,    32,
       0,     0,     0,     0,     0,     0,     0,    34,    33,     0,
       0,     0,     0,     0,    35,     0,     0,     0,     0,    36,
       0,     0,     0,     0,    34,     0,     0,     0,     0,     0,
      37,    35,     0,     0,     0,     0,    36,     0,     0,     0,
       0,     0,    38,     0,     0,     0,    39,    37,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    38,
       0,     0,     0,    39,     0,     0,     0,    40,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      41,     0,     0,     0,    40,     0,    43,     0,     0,     0,
       0,    44,     0,     0,     0,   775,     0,    41,     0,     0,
       0,     0,     0,    43,     0,     0,     0,     0,    44,    45,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    45,     0,     0,     0,
       0,     0,     0,    46,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   776,     0,     0,
      46,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   874
};

static const yytype_int16 yycheck[] =
{
       7,     8,   769,   537,   982,    47,    13,   863,   969,     0,
    1007,     0,    19,     0,     0,     0,    23,   768,    25,    26,
    1082,   837,     0,    30,    31,    32,     0,    47,    35,    20,
      90,    38,    39,     0,   991,    42,  1317,     0,    45,    46,
     776,  1517,     0,     7,    23,    92,    93,  1249,  1330,     0,
    1795,  1753,    38,    20,  1672,     7,   887,  1316,  1304,    23,
      20,  1291,  1044,  1395,  2341,  1012,    16,  2286,    94,  1124,
    1071,    23,  2093,  1071,  1062,  2216,  1296,  2247,  1563,  2249,
    1071,  2796,  1293,    23,    94,    92,    93,  1171,  1071,  2276,
      39,  2219,  1900,  2757,  1370,  2757,  2453,  1256,   105,  2794,
      17,    46,     0,   110,   111,   112,   113,   114,     0,     0,
    1321,     0,     0,    92,    93,     0,  1048,  1179,  2094,   105,
       0,  2213,     0,     0,     0,  1062,    35,     0,    92,    93,
       0,  1216,     0,  2811,  1091,     0,  1221,   776,     0,     0,
      92,    93,  1706,  1707,  1421,     0,  2818,     0,     0,     0,
    2275,   833,    92,    93,    26,  2337,   838,  2389,  2390,  2391,
     775,  2600,  2713,  3171,   113,  2408,  2717,     0,  3154,  3281,
    1925,  1062,     9,  2667,    17,    11,     0,     0,  1815,     5,
      16,  1922,  1757,  2036,    40,  1813,     5,    82,  3174,     5,
    2421,     5,     5,   794,    13,    14,    13,    14,     5,    13,
      14,    26,  2420,     5,     5,     5,    13,    14,     5,     5,
       5,    13,    14,    13,    14,  3392,    13,    14,     5,    13,
      14,     5,     9,  1919,     5,     9,     5,    17,     5,     5,
       5,     5,     5,  2416,   176,    76,     5,     5,  1069,  1227,
       5,    47,     9,    47,    47,   982,  2428,   984,    47,   986,
       3,     4,     5,    38,   177,     4,     9,  3007,  1074,     4,
       9,   144,     9,   121,     9,    57,   126,  2552,    31,   197,
     964,  2552,    31,    31,  2069,  1232,    39,   187,   102,   102,
      39,    39,  1337,  2671,  2672,    65,    84,  2082,    11,   109,
       5,  1346,   233,    16,    65,    31,   830,    95,   964,  2481,
    2482,    84,  2484,    39,  3277,    11,    92,  1198,   152,  2952,
      16,  2954,    95,   296,   304,   142,   121,  1305,   252,    11,
    1308,  1309,   299,    15,    16,    48,  1062,   128,   129,   228,
    1532,   124,   173,  1145,  1146,    65,  1227,   959,   281,   298,
    3629,   323,    48,   209,   393,   879,   132,  1178,    65,   284,
    1162,     5,   109,  3280,    17,  3126,    77,  3586,   124,    82,
    2656,  1563,   252,  1125,  3747,  2535,   119,  2663,  2664,  2665,
    1616,  3488,  3690,  3490,   140,   176,    82,  3267,  1710,  3269,
     224,   119,  3494,  3495,   176,   119,    31,     8,   199,   304,
      11,   402,   177,  1075,    15,    16,  3654,  3655,    19,    20,
      21,    13,    14,  3877,   168,  1087,  1403,   135,    43,     3,
    2727,   280,   447,  2645,  1305,    31,  1377,  1308,  1309,   257,
     422,   110,   379,   124,  1280,  1281,   219,   273,  2236,    42,
     215,  1413,    42,    11,  1149,   166,  2644,    34,  2646,   153,
    3426,    35,    36,   522,  3108,   283,   231,   109,  1063,  2726,
    1165,  3166,  3405,  1284,   495,  2006,   535,   242,   106,   197,
     304,  3414,  3177,   498,    61,  1227,     3,   154,     5,  3943,
    1125,  1650,   225,  3168,   298,   298,   345,   176,   519,  3058,
    1659,   135,  2701,   288,   486,   331,  2037,  3066,   537,  1436,
     135,  3749,   206,   128,   384,   248,   321,   322,   339,   220,
    2592,  3884,   444,  3732,    82,  3823,  3735,    11,  3053,   198,
     164,    15,    16,  2830,   245,   279,  3633,  1849,   384,   135,
     207,  3583,   533,   280,   325,   326,   327,  3500,  3590,   395,
     316,   465,    11,   468,   361,  3824,    15,    16,  1622,   187,
     483,  2723,  1304,  2725,    48,   283,   528,   537,   372,   372,
     533,   558,  1443,  1444,   288,  3198,   533,   564,   369,   171,
     567,   471,  3452,   280,  3491,   293,   432,   180,   575,    48,
     180,   557,   338,   288,   533,   465,   533,  3585,    82,   404,
     522,   175,   407,   177,   205,   531,  3336,   533,  1282,  2977,
     375,   371,   393,   535,  2879,  2213,   537,  2828,  2879,   533,
     371,  2086,  2623,    82,   405,   533,  2824,   228,   491,   394,
     533,   471,   432,  1843,  3791,   473,  1282,   461,   484,  3390,
     445,   462,   537,   429,  2807,   429,   429,   428,  1904,   283,
     429,   432,   280,  1395,   288,  1257,   531,   404,  2491,   293,
     535,   371,  1243,   533,   199,   544,   444,  3876,   411,  1304,
    1184,   437,   411,   411,   371,  2863,  2293,  3769,  2840,  1940,
    1427,   444,   612,   488,  2292,   466,  1998,  2285,   404,  1420,
     298,   495,   495,  2969,  1425,   468,   477,   533,  2010,   300,
    1431,  1537,   525,   400,   497,   480,    11,  2251,  1965,  2430,
      15,    16,  1523,   529,   495,   532,  2451,  1553,  1980,   177,
    1755,   497,  1438,   536,  2279,   531,   519,   533,  2040,   535,
     534,   534,   536,   536,   533,  2047,   533,   533,   519,   533,
     533,   540,   384,   519,   540,  3733,   533,  2423,  3392,  3407,
    3392,   533,   533,   533,   776,   525,   533,   533,   533,   533,
    1395,   533,  1699,  1700,  1701,   444,   533,  3024,  3734,   533,
     495,  2083,   533,  2548,   533,  2087,   533,   533,   533,   533,
     533,   768,   769,   770,   533,   533,   537,   468,   533,  1581,
    1582,   524,   525,  1664,   519,   524,   525,   524,   525,   524,
     525,   828,   170,  2115,   775,  1676,   828,  1678,  3031,  3901,
    3341,  3285,    11,   441,  1606,  3346,   135,   110,   452,  1438,
    3157,  3240,   809,   810,   811,  3350,   529,   537,   775,   463,
     817,   366,   819,  1704,  3973,  2091,   776,   287,  1649,  1650,
    3979,   828,  1437,   529,  3369,   832,   833,    26,  1659,   323,
     837,   838,   874,  2854,   526,   527,   528,   529,   534,   317,
     471,   537,  1673,   121,   851,   852,   853,  2049,  1530,   828,
      66,   877,   190,   817,  1616,  1667,  1668,   520,   865,   866,
      76,   868,   525,    82,   828,   817,   122,   877,   531,  3584,
     533,  1702,   471,  1588,   122,   882,   828,   817,   110,   166,
    3005,   888,   419,   420,  2086,  1873,   380,   481,   828,   431,
    1868,    27,   497,  1608,  1949,  1883,   432,    33,  1886,   520,
     521,   522,   533,   524,   525,   526,   527,   528,   529,   969,
    2931,   108,  2888,  3145,   519,  2891,   168,  2893,    11,  3011,
      27,  1812,  1813,    16,  3602,   885,    33,  3888,   470,   407,
    1645,  3603,   533,   882,   533,   213,    25,    26,   408,   811,
    1901,  1902,  1903,   888,   283,   201,   334,    11,  1710,   956,
       0,    27,   959,   201,   293,    48,   865,   866,   245,   868,
    2237,  1616,  2164,   954,  2772,   954,  2774,   954,   954,   954,
    3152,  1722,  2057,     4,  2592,   536,   954,  1511,     9,   370,
     954,  1963,  1873,  1930,    48,  1967,   238,   954,  1970,    82,
    3951,   954,  1883,  1981,    61,  1886,   954,  1004,  1005,  2062,
    2063,  2064,   280,   954,   140,   283,  1013,   532,   295,   400,
     959,   537,   350,  1020,  1021,  1022,  1023,  1024,    82,   544,
     524,   525,   526,   527,   528,   529,   521,   481,   117,  1036,
    3745,  1038,   248,   140,   528,  3730,   531,  2513,   252,    27,
    1972,   532,   380,   283,  1981,    33,  2610,   526,   527,   528,
     529,  1098,  1072,   544,    27,  1710,   954,   178,  1105,   533,
      33,   258,   954,   954,   140,   954,   954,  1074,  1075,   954,
    1077,   268,  1063,  1080,   954,  3352,   954,   954,   954,  1086,
    1087,   954,  3439,  2364,   954,  1092,   954,  1849,   252,   954,
    1981,  1098,   954,   954,  2253,  1012,  1063,  2256,  1105,   954,
    2432,   954,   954,   954,  1841,     4,   283,    11,  1115,   176,
       9,   288,    16,  2315,   355,  1122,  2392,   252,     5,  1098,
      55,  3816,   321,   322,   533,  1132,  1105,  3791,  1879,  3791,
     366,  1868,   253,  1884,  1098,  2943,   522,  1179,    84,  2757,
     534,  1105,    27,   537,    48,  3332,  1098,   533,    33,    95,
     166,  1888,   140,  1105,   395,   171,  1893,  1101,  1098,   436,
    3301,   438,  2373,  1107,  1096,  1105,   302,   140,   166,    84,
     384,  3192,   349,   171,  1181,   355,   534,  3305,    82,   537,
      95,  2243,  1114,   135,   252,     8,  1118,   534,    11,    55,
     537,   432,    15,    16,  1849,   302,    19,    20,    21,   524,
     525,   526,   527,   528,   529,   110,   528,  3922,   407,  2100,
      27,    31,   164,   535,  2045,   395,    33,   252,   534,  2439,
     384,   537,   266,   267,  1231,  2445,   302,  1234,   364,   245,
     185,  1251,   368,  1183,   355,  2567,  1998,  1263,  1264,   182,
    1266,  1248,  1249,   484,   391,  1981,   445,   245,  2010,   384,
    1257,   465,   432,  1263,  1264,   140,  1266,   364,   325,   326,
     327,   368,   528,   521,   400,   200,    11,    87,   391,   535,
     205,    27,  1279,   531,   395,   209,    96,    33,  2040,   295,
    1287,     4,  3559,  1290,  1291,  2047,     9,  2248,   152,   488,
     270,   271,   368,   400,   370,  2126,  1303,   295,   234,   135,
     120,   465,   166,    48,   484,   248,   531,   171,  1257,   244,
     535,   432,   259,  1320,   302,   181,   384,  1324,   436,   533,
     438,  2083,  1329,   140,   400,  2087,   393,     4,   164,   302,
     465,  2093,     9,   450,   200,     4,   288,    82,   474,   205,
       9,   293,   432,  1998,   280,   389,   390,   534,  2550,   384,
     537,  2553,   497,  2115,   152,  2010,   495,   531,   497,  2250,
     224,   535,  2344,   484,  2346,   432,   185,   474,   166,   533,
    2201,  1320,  2857,   171,   519,   484,   364,   197,   244,  1386,
     368,   245,  1389,   178,   140,  2040,   388,  3528,   533,  1396,
     210,   364,  2047,  3011,   436,   368,   438,   465,   533,   466,
    2291,  2292,  3530,  1410,   531,  1394,   533,  1394,   535,  1394,
     477,    38,   400,  1420,   533,   351,  1394,   302,  1425,   391,
    1427,  1428,  2419,  1430,  1431,  2757,   224,   400,  2083,   533,
     465,   295,  2087,   526,   527,   528,   529,   533,  2093,   531,
     304,   384,   171,   535,   234,  1106,  1437,   245,   533,  1110,
     538,  1458,   288,   524,   542,   526,   533,   293,   253,  2740,
    2115,  1411,    73,    74,  2320,   533,   533,   403,   539,   540,
    1437,   406,   533,  2536,  2537,  2538,  2539,   300,  1438,   364,
    2739,    13,    14,   368,  1988,   302,   474,   533,  1992,  2771,
     280,  1995,   135,   436,  2724,   438,  1543,   295,   533,  1546,
     452,   474,  1509,  1510,  1551,  1455,   304,  1554,  1515,   533,
    1517,   463,  1559,  2597,  2598,   400,    13,    14,  2738,   497,
    2740,   164,   465,  1530,   534,  1532,  1533,   537,   534,  2788,
       6,   537,   468,  1540,    10,   436,  1543,   438,  2600,  1546,
     406,   519,    18,   176,  1551,   534,   302,  1554,   537,   533,
     177,   368,  1559,  1517,  1561,   533,  1563,    33,   526,   534,
     355,    37,   537,   533,  1543,  1517,  1522,  1546,  1524,  1525,
     865,   866,  1551,   868,  2575,  1554,  2574,  1517,   534,  1543,
    1559,   537,  1546,   400,  2575,  2576,  2577,  1551,   215,   474,
    1554,  1543,  2575,  2576,  1546,  1559,   119,   461,   418,  1551,
     395,   421,  1554,  1543,   231,   533,  1546,  1559,   364,    13,
      14,  1551,   368,   403,  1554,   242,   452,    13,    14,  1559,
     524,   525,   526,   527,   528,   529,   534,   463,   534,   537,
      84,   537,  3909,    13,    14,     8,  2467,   432,    11,  2347,
     283,  2349,    15,    16,   400,   288,    19,    20,    21,   187,
     293,   533,   190,   176,  3675,  1646,   110,   474,  3828,   534,
    1646,   534,   537,   461,   537,  1672,  3885,   531,  3887,   519,
    2432,   535,  1646,  3481,   534,  3483,  1683,   537,   468,  1646,
    2571,  2572,  2723,  1646,  2725,    76,   176,    38,  1646,   484,
    3860,    13,    14,    44,    13,  1646,   533,   520,   521,   522,
      19,   524,   525,   526,   527,   528,   529,   182,   534,   516,
    2461,   537,    31,   534,   230,  1722,   537,   961,   474,   963,
     809,   535,   811,   298,   178,   516,    45,    46,   119,   195,
     196,  3950,  2468,   531,   209,  2692,   534,   535,   534,  2653,
     175,   537,  3074,  2657,  2658,  2659,   534,   534,   375,   537,
     537,   534,   103,   842,   537,   209,  3777,   534,   534,   537,
     537,   537,  1769,   535,  1771,   533,  1773,   394,  3938,  1719,
      13,    14,  1798,   248,  3392,    13,    14,  2432,   867,  3949,
     534,  1788,  1789,   537,   534,    13,    14,   537,  1798,   312,
     182,  3072,   111,   534,  1801,  3025,   537,    13,    14,   253,
     266,   267,   325,   326,   327,  2567,   256,   534,   534,   452,
     537,   537,  1772,   534,   100,   534,   537,  2778,   537,  1826,
     463,  1828,     8,   534,  2821,   534,   177,   534,   303,    15,
      16,   176,   205,    19,    20,    21,  1843,  1844,   534,    13,
      14,   537,   128,   129,   303,  3547,    61,  1854,  1855,  1856,
    1857,  2833,  1859,   533,  2801,   228,   248,   433,  1865,  2715,
    1867,  2623,  3108,   516,   215,   185,  2757,  3149,   534,   230,
     393,   537,  1879,  1880,   851,   852,   853,  1884,  1885,    42,
     231,   157,  1889,  1890,  1891,  1892,   364,  1894,  1895,  2944,
     176,   242,   283,   534,   157,   534,   537,   288,   537,    62,
     135,   157,   534,  3235,  1911,   537,   157,   152,  1858,   432,
    1860,  1918,  2567,   157,  1921,  1922,  1923,  1924,  1925,    13,
      14,   166,  1929,   389,   390,   276,   171,   300,   534,   164,
     384,   537,   534,    42,   534,   537,  1943,   537,   432,   534,
     534,   395,   537,   466,     8,   108,   534,    11,   339,   537,
     533,    15,    16,  1960,   477,    19,    20,    21,   283,  1945,
    3292,   436,   534,   438,    42,   537,   357,  3443,  2623,    13,
      14,   176,   495,  1062,   325,    13,    14,   484,   432,   224,
      91,   332,  1071,    13,    14,    13,    14,   462,    13,    14,
     465,    13,    14,    13,    14,  2757,   519,   157,  2889,   499,
     245,   182,   456,   157,  2011,  2012,  2013,  2014,  2015,  2016,
     533,   535,  2019,  2020,  2021,  2022,  2023,  2024,  2025,  2026,
    2027,  2028,   157,  2070,   375,    13,    14,    13,    14,  2076,
     484,    13,    14,  1122,    13,    14,    13,    14,   157,   325,
     326,   327,  2049,   394,   436,   208,   438,   444,   283,   298,
     295,    13,    14,   288,  2061,   119,   379,   380,   293,   304,
    3392,   379,   380,  2070,   379,   380,   366,   248,   533,  2076,
     176,   462,   533,   465,  2081,  3063,   379,   380,   533,  2086,
     471,  3826,   389,   390,   533,  3830,   476,   477,  2095,  2096,
      57,  2070,  2854,  3075,  3076,   258,   534,  2076,   434,  1188,
     321,   322,  2757,  3838,  3839,   268,  2070,   393,   226,  1198,
    3894,  3895,  2076,   308,   300,   466,   231,   280,  2070,   405,
     325,   326,   327,     8,  2076,   533,    11,  1229,  1230,  1218,
    2070,    16,   231,  2884,   231,   533,  2076,   104,  1227,   305,
      42,   243,   428,   324,  3403,  3207,   432,   520,   521,   522,
     313,   524,   525,   526,   527,   528,   529,  2164,   125,  2201,
       5,  2168,   533,    48,   228,   346,  2173,   453,     5,  2931,
      55,   533,  3063,  3791,   335,   533,   533,  3068,  3923,   146,
     466,   533,     5,   150,     5,   533,     5,   533,   393,  2196,
    2197,   477,     5,   153,     9,   533,     0,    82,   533,  2854,
     496,   106,   310,   384,   537,   172,  2213,   370,   175,   495,
     391,   537,    42,   534,  3690,   226,   461,   452,   400,   171,
     295,   171,   293,    61,  3115,  3116,   193,   432,   463,   243,
     444,   182,   395,   519,   533,   533,   300,    95,   444,  2246,
     537,    61,   444,    61,   273,   444,   110,   533,   228,  2269,
     544,  2258,   444,   416,   444,   436,   575,   438,   209,   495,
      42,   466,   185,   391,  2271,  3467,   157,  2246,  2275,   102,
    3746,   283,   477,   283,   533,    42,  2931,   283,   283,   533,
      62,   283,  2246,   205,   465,   157,   176,   535,    13,   176,
     537,   533,  2271,  3044,  2246,   534,   181,   248,   102,  3581,
     534,   534,   534,   534,   534,   534,  2246,  2271,  2315,  1125,
     231,  2318,  3074,   492,  2321,   200,    38,   231,   290,  2271,
     205,   288,    44,   533,   290,   533,   108,   480,   533,   296,
    2337,  2271,   535,   537,   520,   521,   522,   533,   524,   525,
     526,   527,   528,   529,   533,   533,  3108,  3823,   152,   533,
     533,   318,   303,    41,   491,   535,   533,     9,   442,   244,
     442,    11,   166,   366,   532,  1454,   537,   171,   544,  1458,
     537,   534,   176,  3370,   442,   533,   541,   288,   533,   444,
     187,   103,   349,   187,  2426,   176,   167,   537,   192,   534,
     522,   471,   224,   537,   273,   403,   299,  2347,  2348,  2349,
     234,  2408,   187,   323,   323,   534,   537,   537,  2415,   226,
     533,   304,   283,   344,   296,   300,   433,   484,   234,  3074,
     224,  2428,  2429,  2430,  2431,  2414,   208,  2414,   234,  2414,
    3192,   157,   533,   384,   157,  2442,  2414,  2444,   533,   157,
    2447,   245,   495,   157,  2451,    42,   157,     3,  2455,   298,
     769,   770,  3188,  3108,  2461,   177,   520,   521,   522,  3791,
     524,   525,   526,   527,   528,   529,     3,   533,    42,  3325,
     298,   283,    61,  3235,  2481,  2482,   258,  2484,   176,    11,
      42,   171,   534,   534,   534,   436,   268,   438,  1304,  3380,
    3381,   295,   534,   215,   298,   187,   533,   533,   280,   533,
     304,  3392,   171,  2453,     3,   456,  2513,    41,     3,   231,
     531,   462,   531,  3794,   465,   444,   444,   444,   444,   534,
     242,   406,   176,   532,   537,  2475,  2533,   534,  1125,   516,
    3292,   313,   516,   534,  2541,  2542,  2543,  3192,   535,   534,
     534,   541,   534,  2550,   348,  2552,  2553,   516,   533,  2513,
     444,  3302,  2559,   534,   276,   160,   534,   533,  2600,   534,
     533,  2513,   533,   257,     9,   533,    42,   492,   372,   888,
      61,   128,   129,  2513,   492,   522,   298,   518,  2638,  1395,
    3235,   537,   299,   299,   468,  2592,     8,   251,   370,    11,
      61,  2633,  3549,    15,    16,   537,    61,    19,    20,    21,
     273,   444,   283,   325,   157,   209,   157,   157,   444,  3465,
     332,   290,   290,   395,    42,    37,   533,   444,   444,   176,
    2627,  2628,  3453,   533,  3455,   534,   366,   533,   432,   533,
    3392,   296,   517,   444,   416,   534,   537,  3292,   298,   524,
     525,   526,   527,   528,   529,   495,    42,   157,   288,  2669,
    2670,   534,  3468,   375,  3470,   176,  2676,   461,   533,   533,
      61,  2652,   192,   171,   534,   534,  2652,   471,   534,    82,
     531,   534,   394,  2715,  1763,  2682,   148,   534,  2652,   534,
    2687,   205,   534,   176,   544,  2652,  2693,   533,   492,  2652,
     494,   495,  3653,   534,  2652,  3692,   309,   537,   533,  3761,
      85,  2652,  2709,  2689,   372,   534,  2713,  1304,   299,   533,
    2717,  2718,  2719,   538,   187,   157,  2723,  2724,  2725,   533,
    2727,   180,   456,  3701,   534,   433,   534,   531,   537,   534,
     534,   535,   536,   534,   534,   533,   535,  3392,    42,  2746,
     533,  2748,   534,   537,   466,    76,   533,    42,    88,   471,
     471,    82,   176,   537,  2761,  2762,  2763,  2764,  2765,  2766,
    2767,  2768,  2769,  2770,    95,   533,   494,   205,   325,   326,
     327,   534,   534,  1092,   534,   532,   532,   524,   537,   534,
     534,   534,   532,   534,   532,   534,     9,  2794,   119,   533,
     121,  3647,  2799,   310,   477,  2802,  1115,   534,  1395,    61,
    1616,   298,   522,   534,  2754,  2812,   228,  1896,  2758,  2795,
    2760,  2800,   211,  2800,   119,  2800,    42,   234,   495,   534,
    1909,  1910,  2800,  2830,   534,   534,   533,    90,   198,   535,
     288,   288,   535,  2840,  2876,   535,   393,  2823,   535,   535,
    2826,   444,   535,     8,  2851,   444,    11,   522,   405,   535,
    2857,    16,   532,   535,    19,    20,    21,  2864,  2865,  2866,
    2867,   535,  1181,   535,   535,   535,   532,    42,   535,  2876,
     533,   428,  2879,   535,   535,   432,  2883,  2884,   300,   535,
     535,   534,   213,    48,   535,  2892,   535,   535,   535,   535,
      55,   535,  1981,   535,  1710,    42,   535,   535,  1987,   535,
    3791,   535,   535,   176,  2951,   535,   535,   535,    38,   466,
     534,   534,  2919,  3675,    44,   537,   283,    82,   533,   109,
     477,    42,   495,   533,   298,   533,     9,   533,   365,  1248,
    1249,   533,   348,    61,   205,    11,   537,   537,   495,   534,
     534,   198,  2949,   288,  2951,   532,   538,   537,   442,   537,
     476,    93,   283,   534,   444,   357,   533,   288,    42,  3001,
     157,   345,   519,   535,   534,   126,   534,   235,   157,    42,
     534,   380,  2951,   103,   380,    42,   533,  2984,  2985,  2986,
    2987,    42,   534,   537,   533,   533,   471,  2951,   533,   318,
     101,   516,  3743,   521,  3001,   176,   444,   533,  3005,  2951,
     288,   534,   533,   256,  3011,   197,   456,   471,   339,    31,
     205,  2951,    76,   533,   301,  3777,   181,    76,  3025,  1616,
    3675,     9,    82,   534,  3031,   534,   357,   533,   382,  3791,
     534,   532,   532,  1849,    61,   200,   534,  3044,  3045,  3046,
     205,   176,    95,   136,   533,  3052,   280,   177,   522,   541,
       8,   298,   325,   326,   327,    13,   456,   187,    16,   534,
      42,    19,  3069,   228,   229,   433,    42,    25,    26,    85,
     533,   301,    30,    31,    32,   211,   301,    35,   533,   244,
      38,    39,   534,   534,    42,   215,   476,    45,    46,    47,
     534,   298,  3626,   298,   533,   152,   542,   533,   520,   521,
     522,   231,   524,   525,   526,   527,   528,   529,  1427,  1428,
     400,  1430,   242,  1710,   534,   538,   124,   468,   283,   533,
     393,   286,  3777,   379,   153,    25,   537,   412,    37,   534,
     234,   462,   306,   379,   130,   300,  3791,   357,   533,  3068,
     471,  3148,  1866,  2741,  2342,  3152,   276,   105,  2754,  1773,
    1328,   954,   110,   111,   112,   113,   114,  2385,  1910,   432,
    2475,  3168,  2412,  3188,  1125,  3207,  2790,   810,   298,  3707,
    3870,  3363,  3795,  3804,  3863,  1291,  3428,  3184,  2335,  2348,
    2812,  3793,  1998,  3169,  3191,  2733,  3802,  1125,  2760,  2332,
    3790,  2694,  1390,   466,  2010,   325,  1420,  2456,  1972,  3624,
    3551,  1438,   332,  3970,   477,  2693,    42,  3157,  3686,  3746,
    3217,  3908,  1458,  1532,  3808,  3981,  3223,  2413,  1125,  3977,
    3943,  3982,   495,  3230,  2040,  3957,    62,  3813,   182,  3919,
    3980,  2047,   816,  2669,  2268,  3501,  2269,  3656,  3276,  3900,
    2652,   406,  1561,  3901,  1563,   375,   519,  2676,  2318,  1248,
    1097,  1837,  1849,  1097,  2284,   209,  1272,  3264,  1080,  2534,
     533,  3755,  2301,  3635,   394,  2354,  1801,  2083,  3457,  1273,
    1836,  2087,   108,   109,    23,  2271,  2879,  2093,  2081,  1275,
    1075,   828,  3230,   119,  2513,  2512,  3293,  3294,  3295,  3296,
    3297,  3298,  3299,     0,   248,  3302,  3303,  3304,   817,  2115,
    3384,  3308,  2559,  2096,  3311,  1071,  1071,  3314,  3315,  3316,
    3317,  3318,  3319,  3320,  3321,  3322,  3323,  2406,  1981,  3326,
    1981,  3639,  3638,  2590,  2173,  1071,  1071,  2285,   156,  1071,
    1071,  2128,  1071,  1071,  3341,  2994,   466,  2426,  1538,  3346,
    2175,   471,  2607,  1304,   180,  1772,  2089,   105,   176,   303,
      -1,    -1,   517,    -1,    -1,   520,   521,   522,    -1,   524,
     525,   526,   527,   528,   529,  3372,  1304,    -1,    -1,    -1,
     324,    -1,   208,    -1,    -1,    -1,    -1,    -1,    -1,  2468,
      -1,    -1,    -1,    -1,    -1,    -1,  3393,  3394,  2477,    -1,
    2479,    -1,   346,  3413,  2483,   102,  2485,  1304,  3405,    -1,
      -1,  1998,    -1,    -1,    -1,    -1,    -1,  3414,    -1,    -1,
      -1,    -1,  3419,  2010,  3421,    -1,    -1,    -1,  3425,    -1,
      -1,    -1,   258,  3409,  3410,    -1,    -1,    -1,    -1,    -1,
     384,    -1,   268,  3440,  1395,    -1,  3443,   391,    -1,    -1,
      -1,    -1,   156,  2040,   280,   152,    -1,   283,    -1,    -1,
    2047,    -1,    -1,    -1,    -1,    -1,  3463,  1395,    -1,   166,
    3467,  3468,   176,  3470,   171,    -1,    -1,     8,    -1,   176,
      11,    -1,    -1,    -1,    15,    16,    -1,   313,    -1,  3443,
     187,    -1,   436,    -1,   438,   192,  2083,    -1,  1395,  3439,
    2087,  3443,    -1,    -1,    -1,    -1,  2093,   325,   326,   327,
      -1,    -1,   456,  3443,  3511,  3512,    -1,    48,   462,  1828,
      -1,   465,    -1,    -1,    55,    -1,    -1,   224,  2115,    -1,
    3527,    -1,  3529,    -1,  3531,  1844,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   370,  1854,    -1,  1856,   245,    -1,
    1859,    82,    -1,    -1,  3551,    -1,  1865,    -1,  1867,    -1,
      -1,  3558,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   395,
      -1,  1880,  3548,    -1,  3550,   393,  1885,    -1,    -1,    -1,
    1889,  1890,  1891,  1892,  3594,  1894,  1895,  3597,    -1,    -1,
     416,    -1,   418,    -1,    -1,   421,    -1,    -1,   295,    -1,
      -1,   298,    -1,  3600,    -1,    -1,    -1,   304,    -1,    -1,
     558,    -1,    -1,    -1,   432,    -1,   564,    -1,    -1,   567,
    3560,   325,   326,   327,    -1,  3601,  2432,   575,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  3617,  3639,    -1,    -1,  3621,    -1,    -1,   466,    -1,
     181,   348,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   477,
    3657,    -1,    -1,    -1,   612,  1616,    -1,  3664,    -1,   200,
    3667,  3668,    -1,    -1,   205,   372,    42,   495,  2757,  3676,
      -1,  3678,  3679,    -1,    -1,    -1,  3683,    -1,  1616,   393,
      -1,    -1,    -1,  3690,    -1,    -1,    62,  1509,  1510,    -1,
      -1,   519,    -1,  1515,    -1,    -1,    -1,   533,    -1,     8,
      -1,  2790,    11,   244,    -1,   533,    15,    16,    -1,  1616,
      19,    20,    21,    -1,    -1,    -1,    -1,    -1,   432,    -1,
      -1,  3728,    -1,  3730,    -1,   432,  3690,    -1,    37,    -1,
    2049,    -1,   108,    -1,    -1,    -1,  3743,  3744,  3690,  3746,
    3747,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3755,  1710,
    3690,  2567,   466,    -1,   461,    -1,    -1,    -1,    -1,   300,
      -1,    -1,  2081,   477,   471,  3772,  3773,  2086,    -1,  3776,
      -1,    -1,  1710,  3780,    -1,    -1,  3783,  3784,    -1,    -1,
    3787,   495,  3746,    -1,    -1,   492,    -1,   494,   495,    -1,
      -1,  3811,    -1,  3813,  3746,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1710,   180,   519,  3746,  2623,    -1,  3816,
     768,   769,   770,    -1,    -1,    -1,  3823,    -1,   776,   533,
      -1,    -1,    -1,  3809,   531,    -1,    -1,   534,   535,   536,
      -1,    -1,   208,    -1,    -1,  2432,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  3793,    -1,  2164,  3853,  3854,    -1,    -1,
    3857,   809,   810,   811,  2173,    -1,    -1,    -1,    -1,  3823,
      -1,   819,  3882,    -1,    -1,   406,  2955,    -1,    -1,    -1,
    3877,  3823,  3858,    -1,   832,   833,    -1,  3884,    -1,   837,
     838,    -1,   258,  3823,    -1,    -1,    -1,    -1,  1849,    -1,
      -1,    -1,   268,   851,   852,   853,    -1,    -1,    -1,  3919,
      -1,  3908,    -1,    -1,   280,    -1,    -1,   865,   866,    -1,
     868,  1849,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   228,
      -1,    -1,    -1,    -1,   882,    -1,    -1,    -1,  3948,    -1,
     888,    -1,    -1,    -1,    -1,    -1,  3943,   313,    -1,  2258,
      -1,  2757,  1849,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  3961,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  3970,    -1,    -1,    -1,    -1,    -1,    38,
    2567,  3978,    -1,    -1,    -1,    44,   517,    -1,    -1,    -1,
      -1,    -1,    -1,   524,   525,   526,   527,   528,   529,    -1,
      -1,   300,    -1,    -1,   370,    -1,  2315,    -1,   956,    -1,
      -1,   959,  2321,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
       8,    -1,    -1,    11,    -1,    -1,    -1,    15,    16,   395,
      -1,    19,    20,    21,    -1,    -1,  2623,    -1,    -1,    -1,
      -1,    -1,   990,    -1,   103,   993,    -1,  1998,  2854,    37,
     416,    -1,    -1,    -1,    -1,    -1,  1004,  1005,    -1,  2010,
      -1,    -1,    -1,    -1,    -1,  1013,    -1,    -1,    -1,    -1,
    1998,    -1,  1020,  1021,  1022,  1023,  1024,    -1,    -1,    -1,
      -1,    -1,  2010,    -1,    -1,    -1,  3165,    -1,  1036,  2040,
    1038,    -1,    -1,    -1,    -1,    -1,  2047,    -1,    -1,    -1,
    1048,  1998,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3188,
      -1,    -1,  2040,  2010,  1062,    -1,    -1,    -1,   177,  2047,
      -1,    -1,    -1,    -1,  1072,  2931,  1074,  1075,    -1,  1077,
      -1,    -1,  2083,  2442,    -1,    -1,  2087,    -1,  1086,  1087,
      -1,    -1,  2093,  2040,  1092,   176,    -1,    -1,    -1,    -1,
    2047,    -1,    -1,    -1,    -1,  2083,   215,    -1,    -1,  2087,
      -1,    -1,    -1,    -1,  2115,  2093,    -1,  1115,    -1,    -1,
    2757,    -1,   231,    -1,  1122,    -1,  1124,  1125,    -1,    -1,
      -1,    -1,    -1,   242,  1132,    -1,  2083,  2115,    -1,  3268,
    2087,    -1,    -1,    -1,    -1,    -1,  2093,    -1,    -1,  2011,
    2012,  2013,  2014,  2015,  2016,    -1,    -1,  2019,  2020,  2021,
    2022,  2023,  2024,  2025,  2026,  2027,  2028,   276,  2115,    -1,
      -1,   520,   521,   522,    -1,   524,   525,   526,   527,   528,
     529,    -1,    -1,  1181,    -1,  1183,    -1,    -1,    -1,   298,
     228,  2550,    -1,    -1,  2553,    -1,    -1,    -1,    -1,    -1,
    2559,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   325,  2854,  3074,    -1,
      -1,    -1,    -1,   332,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   312,    -1,  1231,    -1,    -1,  1234,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   325,   326,   327,    -1,    -1,    -1,
    1248,  1249,  3108,  1251,    -1,    -1,    -1,    -1,    -1,  1257,
      -1,    -1,   300,  3392,    -1,    -1,   375,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   394,    -1,    -1,    -1,  1287,
      -1,    -1,  1290,  1291,  2931,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1303,  1304,    -1,    -1,    -1,
      -1,    -1,   393,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1320,    -1,    -1,    -1,  1324,    -1,    -1,    -1,
      -1,  1329,    -1,    -1,  2196,  2197,  3192,    -1,    -1,  1337,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1346,    -1,
      -1,   432,    -1,    -1,  2713,    -1,    -1,   466,  2717,  2718,
    2719,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1370,    -1,    -1,    -1,    -1,    -1,    -1,  3235,
      -1,    -1,    -1,    -1,    -1,   466,    -1,  2746,  1386,    -1,
      -1,  1389,    -1,    -1,    -1,    -1,   477,  1395,  1396,    -1,
      -1,    -1,  2761,  2762,  2763,  2764,  2765,  2766,  2767,  2768,
    2769,  2770,  1410,  1411,   495,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1420,  1421,    -1,    -1,    -1,  1425,    -1,  1427,
    1428,  2432,  1430,  1431,    -1,    -1,  3292,  3074,   519,    -1,
    1438,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   533,  3582,  2432,    -1,    -1,  1455,    -1,    -1,
    1458,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  3108,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   520,   521,   522,  2432,   524,   525,   526,   527,
     528,   529,    -1,    -1,    -1,    -1,    -1,    -1,  2857,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
       8,    -1,    -1,    11,    -1,    -1,    -1,    15,    16,    17,
      18,    19,    20,    21,  2883,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1530,    -1,  1532,  1533,  3392,    -1,    -1,    37,
      -1,     8,  1540,    -1,    11,    -1,    -1,    -1,    15,    16,
      48,    -1,    19,    20,    21,  3192,    -1,    55,    -1,    -1,
      -1,    -1,    -1,  1561,    -1,  1563,  2567,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    48,    -1,    -1,    82,    -1,    -1,    -1,    55,  2567,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3235,    -1,
      -1,    -1,    -1,     8,    -1,    -1,    11,    -1,    -1,    -1,
      15,    16,    -1,    -1,    -1,    82,    -1,    -1,  1616,    -1,
    2567,    -1,  2623,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    48,    -1,  2623,    -1,    -1,    -1,    -1,
      55,    -1,    -1,    -1,    -1,  3292,    -1,    -1,    -1,    -1,
       8,    -1,  3791,    11,    -1,    -1,    -1,    15,    16,    -1,
      -1,    19,    20,    21,  1672,    -1,  2623,    82,    -1,    -1,
      -1,    -1,    -1,   181,     8,  1683,  3045,    11,    -1,    37,
      -1,    15,    16,    -1,    -1,    19,    20,    21,    -1,    -1,
    1698,    -1,   200,    -1,    -1,    -1,    -1,   205,    -1,    -1,
      -1,    -1,  1710,    37,   181,    -1,    -1,    -1,    -1,    -1,
      -1,  1719,    -1,    -1,  1722,    -1,    -1,    -1,    -1,    -1,
     228,   229,    -1,   200,    -1,    -1,    -1,    -1,   205,    -1,
      -1,    -1,    -1,    -1,    -1,   150,   244,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  3392,  2757,  1755,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2627,  2628,    -1,    -1,    -1,
      -1,  1769,    -1,  1771,    -1,  1773,   181,   244,    -1,  2757,
      -1,    -1,    -1,    -1,    -1,   283,    -1,    -1,   286,    -1,
    1788,  1789,    -1,    -1,    -1,   200,    -1,    -1,    -1,    -1,
     205,    -1,   300,    -1,    -1,   303,    -1,    -1,    -1,    -1,
    2757,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3675,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1826,    -1,
    1828,    -1,    -1,   300,    -1,    -1,    -1,    -1,    -1,   244,
      -1,    -1,    -1,    -1,    -1,  1843,  1844,    -1,    -1,    -1,
      -1,  1849,    -1,  2854,    -1,    -1,  1854,  1855,  1856,  1857,
    1858,  1859,  1860,    -1,  3223,    -1,    -1,  1865,    -1,  1867,
      -1,  3230,    -1,    -1,    -1,    -1,  2854,    -1,    -1,    -1,
     228,  1879,  1880,    -1,    -1,    -1,  1884,  1885,    -1,    -1,
      -1,  1889,  1890,  1891,  1892,   300,  1894,  1895,    -1,    -1,
      -1,    -1,    -1,    -1,   228,    -1,  1904,  2854,   406,    -1,
      -1,    -1,    -1,  1911,    -1,    -1,    -1,    -1,    -1,    -1,
    1918,  3777,    -1,  1921,  1922,  1923,  1924,  1925,    -1,    -1,
    2931,  1929,    -1,    -1,    -1,  3791,    -1,    -1,    -1,   406,
      -1,    -1,    -1,    -1,    -1,  1943,    -1,    -1,    -1,    -1,
      -1,  1949,   300,  2931,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1960,    -1,    -1,    -1,    -1,  1965,    -1,    -1,
      -1,    -1,    -1,    -1,  1972,    -1,   300,    -1,    -1,    -1,
      -1,    -1,  3341,  1981,  2931,    -1,    -1,  3346,    -1,  2851,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1998,   406,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2010,  3372,    -1,    -1,    -1,    -1,    -1,   517,
      -1,    -1,   520,   521,   522,    -1,   524,   525,   526,   527,
     528,   529,    -1,    -1,  3393,  3394,    -1,    -1,  3675,    -1,
      -1,    -1,  2040,    -1,    -1,    -1,   544,    -1,    -1,  2047,
     517,  2049,    -1,   520,   521,   522,    -1,   524,   525,   526,
     527,   528,   529,  2061,    -1,    -1,  3425,    -1,    -1,     8,
      -1,    -1,    11,  3074,    -1,    -1,    15,    16,    -1,    -1,
      19,    20,    21,  2081,    -1,  2083,    -1,    -1,  2086,  2087,
      -1,    -1,    -1,  2091,    -1,  2093,  3074,  2095,  2096,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  3108,  3467,    48,
      -1,    -1,   517,    -1,    -1,    -1,    55,  2115,    -1,   524,
     525,   526,   527,   528,   529,    -1,    -1,  3074,    -1,    -1,
    3108,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    3777,    -1,    -1,    82,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  3791,    -1,    -1,    -1,    -1,    -1,
      -1,  3108,    -1,    -1,    -1,    -1,  2164,    -1,    -1,    -1,
    2168,    -1,   520,   521,   522,  2173,   524,   525,   526,   527,
     528,   529,     8,    -1,  3046,    11,    -1,    -1,    -1,    15,
      16,  3192,  2984,  2985,  2986,  2987,   520,   521,   522,    -1,
     524,   525,   526,   527,   528,   529,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  3192,  2213,    -1,    -1,    -1,    -1,
      -1,    -1,    48,    -1,    -1,    -1,    -1,    -1,    -1,    55,
      -1,    -1,    -1,    -1,  3235,    -1,    -1,    -1,    -1,  2237,
      -1,    -1,   181,    -1,    -1,  3192,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    82,  3235,    -1,    -1,
    2258,   200,    -1,    -1,     8,    -1,   205,    11,    -1,    -1,
      -1,  2269,    16,    -1,    -1,    -1,    -1,  2275,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3235,   228,
     229,  3292,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    48,   244,    -1,    -1,    -1,    -1,
      -1,    55,    -1,    -1,  3292,    -1,    -1,  2315,    -1,    -1,
      -1,    -1,    -1,  2321,   150,    -1,    -1,    -1,    -1,  3191,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    82,  2337,
      -1,    -1,    -1,    -1,   283,  3292,    -1,   286,    -1,  2347,
    2348,  2349,    -1,    -1,    -1,   181,    -1,    -1,    -1,    -1,
      -1,   300,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   200,    -1,    -1,    -1,    -1,   205,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  3392,    -1,    -1,  2392,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   150,    -1,    -1,    -1,
    2408,    -1,    -1,    -1,  3392,    -1,    -1,  2415,   244,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3787,    -1,
    2428,  2429,  2430,  2431,  2432,    -1,    -1,   181,    -1,    -1,
      -1,    -1,    -1,    -1,  2442,  3392,  2444,    -1,    -1,  2447,
      -1,    -1,    -1,  2451,    -1,  2453,   200,  2455,    -1,    -1,
      -1,   205,    -1,  2461,    -1,    -1,    -1,   406,    -1,    -1,
    2468,    -1,    -1,    -1,   300,    -1,    -1,  2475,    -1,    -1,
      -1,    -1,    -1,  2481,  2482,    -1,  2484,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     244,  3293,  3294,  3295,  3296,  3297,  3298,  3299,    -1,    -1,
      -1,  3303,  3304,    -1,    -1,    -1,  3308,    -1,    -1,  3311,
      -1,    -1,  3314,  3315,  3316,  3317,  3318,  3319,  3320,  3321,
    3322,  3323,    -1,    -1,    -1,  2533,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  2541,  2542,  2543,    -1,    -1,    -1,    -1,
      -1,    -1,  2550,    -1,    -1,  2553,   300,    -1,    -1,    -1,
      -1,  2559,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2567,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   517,    -1,
     406,   520,   521,   522,    -1,   524,   525,   526,   527,   528,
     529,    -1,    -1,    -1,  2592,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  3970,    -1,    -1,    -1,    -1,    -1,    -1,     8,    -1,
      -1,    11,    -1,    -1,    -1,  2623,    16,    17,    18,    19,
      20,    21,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    37,    -1,  3511,
    3512,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    48,    -1,
      -1,    -1,   406,    -1,    -1,    55,    -1,    -1,    -1,    -1,
      -1,  2669,  2670,    -1,  3675,    -1,    -1,    -1,  2676,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2687,
      13,   517,    82,    -1,    -1,  2693,    19,  3675,   524,   525,
     526,   527,   528,   529,    -1,    -1,    -1,    -1,    31,    -1,
      -1,  2709,    -1,    -1,    -1,  2713,    -1,    -1,    -1,  2717,
    2718,  2719,    45,    46,    -1,  2723,  2724,  2725,  3675,  2727,
      -1,    -1,    -1,    -1,    -1,  3527,    -1,  3529,    -1,  3531,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2746,    -1,
    2748,    -1,    -1,     0,    -1,    -1,  2754,    -1,    -1,  2757,
    2758,    -1,  2760,  2761,  2762,  2763,  2764,  2765,  2766,  2767,
    2768,  2769,  2770,   517,    -1,    -1,  3777,    -1,    70,    71,
     524,   525,   526,   527,   528,   529,    -1,    -1,   111,    -1,
    3791,   181,    -1,    -1,    -1,  3657,  2794,    -1,    -1,  3777,
      -1,  2799,    -1,    -1,  2802,    -1,    -1,    -1,    -1,    -1,
     200,    -1,    -1,  3791,  2812,   205,  3678,  3679,    -1,   111,
     112,    -1,    -1,   115,   116,    -1,    -1,    -1,    -1,    -1,
    3777,    -1,  2830,    -1,    -1,    -1,    -1,    -1,   228,   229,
      -1,    -1,  2840,    -1,  3791,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   244,   102,  2854,    -1,    -1,  2857,
      -1,    -1,    -1,    -1,    -1,    -1,  2864,  2865,  2866,  2867,
      -1,    -1,  3664,    -1,    -1,  3667,  3668,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  3676,  2883,  2884,    -1,    -1,    -1,
      -1,  3683,    -1,   283,  2892,    -1,   286,    -1,    -1,    -1,
      -1,    -1,    -1,   195,   196,   152,    -1,    -1,    -1,    -1,
     300,    -1,    -1,   303,    -1,    -1,    -1,    -1,    -1,   166,
      -1,  2919,    -1,    -1,   171,    -1,    -1,    -1,    -1,   176,
      -1,    -1,    -1,  2931,    -1,    -1,    -1,    -1,    -1,    -1,
     187,    -1,    -1,    -1,    -1,   192,  2944,    -1,    -1,    -1,
      -1,  2949,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   260,   261,
     262,   263,   264,   265,   266,   267,    -1,   224,   270,   271,
    3772,  3773,    -1,    -1,  3776,    -1,    -1,    -1,  3780,    -1,
      -1,  3783,  3784,    -1,    -1,    -1,    -1,    -1,   245,    -1,
      -1,    -1,    -1,  3001,    -1,    -1,    -1,  3005,    -1,    -1,
      -1,    -1,    -1,  3011,    -1,    -1,   406,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  3025,    -1,    -1,
      -1,    -1,    -1,  3031,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  3044,  3045,   295,    -1,
      -1,   298,    -1,    -1,  3052,    -1,    -1,   304,    -1,    -1,
      -1,  3853,  3854,    -1,    -1,  3857,    -1,    -1,    -1,     8,
      -1,  3069,    -1,    -1,    13,    -1,  3074,    16,    -1,    -1,
      19,    -1,    -1,    -1,    -1,    -1,    25,    26,    -1,    -1,
      -1,    30,    31,    32,    -1,    -1,    35,   389,   390,    38,
      39,   348,    -1,    42,    -1,    -1,    45,    46,    -1,    -1,
    3108,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   372,    -1,   517,    -1,    -1,
     520,   521,   522,    -1,   524,   525,   526,   527,   528,   529,
      -1,    -1,    -1,    -1,     8,    -1,    -1,    11,    -1,    -1,
    3148,    15,    16,    -1,  3152,    19,    20,    21,    -1,  3157,
      -1,    -1,    -1,    -1,    -1,    -1,   105,    -1,    -1,    -1,
    3168,   110,   111,   112,   113,   114,    -1,     0,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   432,  3184,    -1,    -1,    -1,
    3188,    -1,    -1,    -1,  3192,    -1,    -1,   489,   490,    22,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      33,    -1,    35,    36,   461,    -1,    -1,    -1,    -1,  3217,
      -1,   513,   514,    -1,   471,  3223,    49,    -1,    -1,    -1,
      -1,    54,  3230,    -1,    -1,    -1,    -1,  3235,    -1,    -1,
      63,   533,    -1,    -1,    -1,   492,    -1,   494,   495,    -1,
      -1,    -1,   575,    -1,    77,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    86,    -1,    88,  3264,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   100,    -1,   102,
      -1,    -1,    -1,  3281,   531,    -1,    -1,   534,   535,   536,
     113,    -1,    -1,    -1,  3292,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    42,  3302,   128,   129,    -1,   131,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   140,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   148,    -1,    -1,  3326,    -1,
      -1,    -1,    -1,   156,    -1,   158,   159,    -1,    -1,     8,
      -1,    -1,    11,  3341,    -1,    -1,    -1,    16,  3346,   172,
      19,    20,    21,   176,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   228,    -1,    -1,    -1,    -1,    -1,
      -1,   110,    -1,   112,  3372,   114,    -1,    -1,    -1,    48,
      -1,   204,    -1,    -1,    -1,    -1,    55,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  3392,  3393,  3394,   220,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  3405,    -1,    -1,
      -1,    -1,    -1,    82,    -1,  3413,  3414,    -1,    -1,    -1,
      -1,  3419,    -1,  3421,   247,    -1,    -1,  3425,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   300,    -1,    -1,    -1,
      -1,  3439,  3440,    -1,    -1,    -1,    -1,   770,     8,    -1,
      -1,    11,    -1,    -1,    -1,    15,    16,    17,    18,    19,
      20,    21,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3467,
    3468,    -1,  3470,    -1,    -1,    -1,    -1,    37,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    48,    -1,
      -1,    -1,    -1,    -1,    -1,    55,  3494,  3495,    -1,    -1,
      -1,    -1,   325,   326,   327,    -1,    -1,    -1,    -1,    -1,
     333,    -1,   181,   336,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    82,    -1,     8,    -1,    -1,    11,    -1,    -1,
      -1,   200,    16,    -1,    -1,    -1,   205,    -1,    -1,    -1,
      -1,     8,    -1,    -1,    11,   368,    -1,    -1,    15,    16,
      -1,    -1,    -1,  3551,   377,    -1,    -1,    -1,    -1,    -1,
    3558,    -1,  3560,    -1,    48,   888,    -1,    -1,    -1,    -1,
     393,    55,    -1,    -1,    -1,   244,    -1,   400,    -1,    -1,
      -1,    48,   405,    -1,    -1,    -1,    -1,    -1,    55,    -1,
      -1,    -1,    -1,   416,    -1,    -1,  3594,    -1,    82,  3597,
      -1,    -1,  3600,    -1,    -1,   428,    -1,    -1,    -1,   432,
      -1,    -1,    -1,    -1,    -1,    82,    -1,    -1,    -1,   558,
      -1,   181,    -1,    -1,    -1,   564,    -1,    -1,   567,    -1,
     453,   300,    -1,    -1,    -1,    -1,   575,    -1,    -1,    -1,
     200,  3639,    -1,   466,    -1,   205,   469,    -1,    -1,   472,
      -1,    -1,    -1,    -1,   477,    -1,   520,   521,   522,    -1,
     524,   525,   526,   527,   528,   529,   150,    -1,   228,   229,
      -1,    -1,   495,   612,    -1,    -1,    -1,  3675,    -1,    -1,
      -1,    -1,    -1,   150,   244,    -1,    -1,    -1,    -1,    -1,
       3,    -1,    -1,    -1,    -1,     8,   519,   181,    11,    -1,
      -1,    -1,    15,    16,    17,    18,    19,    20,    21,    -1,
     533,    -1,     8,   536,   181,    11,   200,    -1,    -1,    15,
      16,   205,    -1,   283,    37,    -1,   286,    -1,    -1,    42,
    3728,    -1,  3730,   200,    -1,    48,    -1,   406,   205,    -1,
     300,    -1,    55,   303,    -1,  3743,  3744,    -1,    -1,  3747,
      -1,    -1,    48,    -1,    -1,    -1,    -1,  3755,    -1,    55,
     244,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    82,
    3768,  3769,    -1,    -1,    -1,    -1,    -1,   244,    -1,  3777,
      -1,    -1,    -1,    -1,    -1,    -1,    82,    -1,    -1,  3787,
      -1,    -1,    -1,  3791,    -1,  3793,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  3811,    -1,  3813,   300,    -1,  3816,   558,
      -1,    -1,    -1,    -1,    -1,   564,    -1,    -1,   567,   768,
     769,   770,    -1,   300,    -1,    -1,    -1,   776,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   406,    -1,   517,    -1,
      -1,   520,   521,   522,   150,   524,   525,   526,   527,   528,
     529,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   181,    -1,
     809,   810,   811,    -1,    -1,    -1,    -1,    -1,    -1,  3877,
     819,    -1,    -1,    -1,  3882,   181,  3884,   200,    -1,    -1,
      -1,    -1,   205,   832,   833,    -1,    -1,    -1,   837,   838,
      -1,    -1,  3900,  3901,   200,    -1,    -1,    -1,    -1,   205,
    3908,    -1,   851,   852,   853,   228,   229,    -1,    -1,    -1,
      -1,  3919,   406,    -1,    -1,  1248,   865,   866,    -1,   868,
      -1,   244,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   406,
      -1,    -1,    -1,   882,    -1,  3943,    -1,    -1,   244,   888,
    3948,    -1,    -1,    -1,    -1,    -1,    -1,   517,    -1,    -1,
     520,   521,   522,  3961,   524,   525,   526,   527,   528,   529,
     283,    -1,  3970,   286,    -1,    -1,    -1,   537,    -1,    -1,
    3978,    -1,    -1,    -1,    -1,    -1,    -1,   300,    -1,    -1,
     303,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   300,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   956,    -1,    -1,
     959,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   517,    -1,    -1,    -1,    -1,    -1,    -1,
     524,   525,   526,   527,   528,   529,    -1,    -1,    -1,    -1,
     517,   990,    -1,    -1,   993,    -1,    -1,   524,   525,   526,
     527,   528,   529,    -1,    -1,  1004,  1005,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1013,    -1,    -1,    -1,    -1,    -1,
     819,  1020,  1021,  1022,  1023,  1024,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   406,    -1,    -1,    -1,  1036,    -1,  1038,
      -1,    -1,    -1,    -1,    -1,  1428,    -1,  1430,    -1,  1048,
     406,    -1,    -1,    -1,     8,    -1,    -1,    11,    -1,    -1,
      -1,    15,    16,  1062,    -1,    19,    20,    21,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1074,  1075,    -1,  1077,    -1,
      -1,    -1,    -1,    37,    -1,    -1,    -1,  1086,  1087,    -1,
      -1,    -1,    -1,  1092,    48,    -1,    -1,    -1,    -1,    -1,
      -1,    55,    -1,     8,    -1,    -1,    11,    -1,    -1,    -1,
      15,    16,    -1,    -1,    -1,    -1,  1115,    -1,    -1,    -1,
      -1,    -1,    -1,  1122,    -1,  1124,  1125,    -1,    82,    -1,
      -1,    -1,    -1,  1132,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    48,   517,    -1,    -1,   520,   521,   522,
      55,   524,   525,   526,   527,   528,   529,   956,    -1,    -1,
      -1,   517,    -1,    -1,    -1,    -1,    -1,    -1,   524,   525,
     526,   527,   528,   529,    -1,    -1,    -1,    82,    -1,    -1,
      -1,    -1,  1181,    -1,  1183,    -1,    -1,    -1,    -1,     8,
      -1,    -1,    11,    -1,    -1,    -1,    15,    16,    -1,    -1,
      19,    20,    21,    -1,    -1,  1004,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1013,    -1,    -1,    -1,    37,    -1,
      -1,  1020,  1021,  1022,  1023,    -1,    -1,   181,    -1,    48,
      -1,     8,  1231,    -1,    11,  1234,    55,  1036,    15,    16,
      -1,    -1,    19,    20,    21,   150,   200,    -1,    -1,  1248,
    1249,   205,    -1,    -1,    -1,    -1,    -1,    -1,  1257,    -1,
      37,     0,    -1,    82,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   228,   229,   181,     8,  1077,    -1,
      11,    20,    -1,    -1,    23,    16,    -1,    -1,  1287,    -1,
     244,  1290,  1291,     8,    -1,   200,    11,    -1,    -1,    38,
     205,    16,    -1,    -1,  1303,  1304,    -1,    -1,    47,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    48,    -1,    -1,
      -1,  1320,    -1,    -1,    55,  1324,    -1,    -1,    -1,   283,
    1329,    -1,   286,    48,    -1,    -1,    -1,    -1,  1337,   244,
      55,    -1,    -1,    -1,    -1,    -1,   300,  1346,    -1,   303,
      -1,    82,    -1,    92,    93,    94,    -1,    -1,    -1,    -1,
      -1,    -1,   181,    -1,    -1,    -1,   105,    82,    -1,    -1,
      -1,  1370,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   200,    -1,    -1,    -1,    -1,   205,  1386,    -1,    -1,
    1389,    -1,    -1,    -1,    -1,   300,  1395,  1396,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   228,
     229,  1410,  1411,    -1,    -1,    -1,    -1,    -1,    -1,   150,
      -1,  1420,  1421,    -1,    -1,   244,  1425,    -1,  1427,  1428,
      -1,  1430,  1431,    -1,    -1,   150,    -1,    -1,    -1,  1438,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     181,   228,   406,    -1,    -1,    -1,  1455,    -1,    -1,  1458,
      -1,  1844,    -1,    -1,   283,    -1,   181,   286,    -1,   200,
      -1,  1854,    -1,  1856,   205,    -1,  1859,    -1,    -1,    -1,
      -1,   300,  1865,    -1,  1867,   200,    -1,    -1,    -1,    -1,
     205,  1290,    -1,    -1,    -1,    -1,    -1,  1880,    -1,    -1,
      -1,   406,  1885,    -1,  1303,    -1,  1889,  1890,  1891,  1892,
      -1,  1894,  1895,   244,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   300,    -1,  1324,    -1,    -1,    -1,   244,
      -1,  1530,    -1,  1532,  1533,    -1,    -1,    -1,    -1,    -1,
      -1,  1540,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1561,   517,  1563,    -1,   520,   521,   522,   300,
     524,   525,   526,   527,   528,   529,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   300,    -1,   406,    -1,    -1,
    1389,    -1,    -1,    -1,    -1,    -1,    -1,  1396,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   517,    -1,    -1,    -1,    -1,  1616,    -1,   524,
     525,   526,   527,   528,   529,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,     8,    -1,    -1,    11,    -1,    -1,    -1,    15,
      16,    17,    18,    19,    20,    21,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    37,    -1,  1672,    -1,   406,    42,    -1,    -1,    -1,
      -1,    -1,    48,    -1,  1683,    -1,    -1,    -1,    -1,    55,
      -1,   406,    -1,    -1,    -1,    -1,    -1,    -1,   517,  1698,
      -1,   520,   521,   522,    -1,   524,   525,   526,   527,   528,
     529,  1710,    -1,    -1,    -1,    -1,    82,    -1,    -1,    -1,
    1719,    -1,    -1,  1722,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1540,    -1,   520,   521,   522,    -1,   524,   525,   526,
     527,   528,   529,    -1,    -1,    -1,  1755,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1769,    -1,  1771,    -1,  1773,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   517,    -1,    -1,  1788,
    1789,    -1,    -1,   524,   525,   526,   527,   528,   529,    -1,
      -1,    -1,   517,    -1,    -1,    -1,    -1,    -1,    -1,   524,
     525,   526,   527,   528,   529,   181,    -1,    -1,   557,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1826,    -1,  1828,
      -1,    -1,    -1,    -1,   200,    -1,    -1,    -1,    -1,   205,
      -1,    -1,    -1,    -1,  1843,  1844,    -1,    -1,    -1,    -1,
    1849,    -1,    -1,    -1,    -1,  1854,  1855,  1856,  1857,  1858,
    1859,  1860,   228,   229,    -1,    -1,  1865,    -1,  1867,    -1,
      -1,    -1,    -1,    -1,    -1,  2258,    -1,    -1,   244,    -1,
    1879,  1880,    -1,    -1,    -1,  1884,  1885,    -1,    -1,    -1,
    1889,  1890,  1891,  1892,    -1,  1894,  1895,    -1,    -1,    -1,
      -1,     8,    -1,    -1,    11,  1904,    -1,    -1,    15,    16,
      -1,    -1,  1911,    -1,    -1,    -1,    -1,   283,    -1,  1918,
     286,    -1,  1921,  1922,  1923,  1924,  1925,    -1,    -1,    -1,
    1929,    -1,    -1,    -1,   300,    -1,    -1,   303,    -1,    -1,
      -1,    48,    -1,    -1,  1943,    -1,    -1,    -1,    55,    -1,
    1949,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1960,    -1,    -1,    -1,    -1,  1965,    -1,    -1,    -1,
      -1,    -1,  1771,  1972,  1773,    82,    -1,    -1,    -1,    -1,
      -1,    -1,  1981,    -1,    -1,     8,    -1,    -1,    11,  1788,
      -1,    -1,    15,    16,    -1,    -1,    19,    20,    21,  1998,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2010,    -1,    -1,    37,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1826,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   775,   776,    -1,    -1,
     406,  2040,    -1,   150,    -1,    -1,    -1,    -1,  2047,    -1,
    2049,    -1,    -1,    -1,    -1,     8,    -1,    -1,    11,  2442,
      -1,    -1,  2061,    16,    -1,    -1,    -1,    -1,     8,    -1,
      -1,    11,    -1,    -1,   181,    15,    16,    -1,   817,    19,
      20,    21,  2081,    -1,  2083,    -1,    -1,  2086,  2087,   828,
      -1,    -1,  2091,   200,  2093,    48,  2095,  2096,   205,    -1,
      -1,    -1,    55,    -1,    -1,    -1,    -1,    -1,    48,    -1,
      -1,    -1,    -1,    -1,    -1,    55,  2115,    -1,    -1,  1918,
      -1,    -1,  1921,  1922,  1923,  1924,    -1,    -1,    -1,    82,
    1929,    -1,    -1,     8,    -1,   874,    11,   244,   877,    -1,
      -1,    16,    82,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   517,    -1,    -1,   520,   521,   522,    -1,   524,   525,
     526,   527,   528,   529,    -1,  2164,    -1,    -1,   534,  2168,
      -1,    -1,    -1,    48,  2173,    -1,    -1,    -1,    -1,    -1,
      55,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   300,    -1,    -1,    -1,   150,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   228,    -1,    82,    -1,    -1,
      -1,    -1,    -1,    -1,  2213,   954,    -1,    -1,    -1,     8,
      -1,    -1,    11,    -1,    -1,    -1,    15,    16,   181,    -1,
      19,    20,    21,    -1,    -1,    -1,    -1,    -1,  2237,    -1,
      -1,   181,    -1,    -1,    -1,    -1,    -1,   200,    37,    -1,
      -1,    -1,   205,    -1,    -1,    -1,    -1,    -1,    -1,  2258,
     200,    -1,  2061,    -1,    -1,   205,    -1,    -1,    -1,    -1,
      -1,     8,    -1,    -1,    11,   150,  2275,   300,    15,    16,
      17,    18,    19,    20,    21,    -1,    -1,    -1,   228,   229,
      -1,   244,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   406,
      37,    -1,    -1,    -1,   244,    -1,   181,    -1,    -1,    -1,
      -1,    48,    -1,    -1,    -1,    -1,  2315,    -1,    55,    -1,
      -1,    -1,  2321,    -1,  1063,   200,    -1,    -1,    -1,    -1,
     205,    -1,    -1,    -1,    -1,  2718,  2719,    -1,  2337,    -1,
      -1,    -1,    -1,    -1,    -1,    82,   286,   300,  2347,  2348,
    2349,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1098,
     300,    -1,    -1,  2746,    -1,    -1,  1105,    -1,    -1,   244,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2761,  2762,
    2763,  2764,  2765,  2766,  2767,  2768,  2769,  2770,    -1,    -1,
      -1,    -1,    -1,  2392,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1140,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2408,
     517,    -1,    -1,  1152,    -1,    -1,  2415,   524,   525,   526,
     527,   528,   529,    -1,    -1,   300,    -1,    -1,    -1,  2428,
    2429,  2430,  2431,  2432,    -1,    -1,    -1,    -1,    -1,   228,
    1179,    -1,    -1,  2442,   181,  2444,    -1,    -1,  2447,    -1,
      -1,    -1,  2451,   406,  2453,    -1,  2455,    -1,    -1,    -1,
      -1,    -1,  2461,   200,    -1,    -1,   406,    -1,   205,  2468,
      -1,    -1,    -1,    -1,    -1,    -1,  2475,    -1,    -1,    -1,
      -1,    -1,  2481,  2482,    -1,  2484,    -1,    -1,    -1,    -1,
      -1,   228,   229,    -1,    -1,    -1,    -1,   520,   521,   522,
      -1,   524,   525,   526,   527,   528,   529,   244,    -1,    -1,
      -1,   300,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1263,  1264,    -1,  1266,    -1,    -1,
      -1,   406,    -1,    -1,  2533,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2541,  2542,  2543,    -1,   283,    -1,    -1,   286,
      -1,  2550,    -1,    -1,  2553,    -1,    -1,    -1,    -1,    -1,
    2559,    -1,    -1,   300,   517,    -1,   303,    -1,  2567,    -1,
      -1,   524,   525,   526,   527,   528,   529,   517,    -1,    -1,
     520,   521,   522,    -1,   524,   525,   526,   527,   528,   529,
      -1,    -1,    -1,  2592,     8,    -1,    -1,    11,    -1,    -1,
      -1,    15,    16,    -1,    -1,    19,    20,    21,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2415,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2623,    -1,     8,    -1,    -1,    11,
    2429,  2430,  2431,    15,    16,    17,    18,    19,    20,    21,
      -1,    -1,   517,    -1,    -1,  2444,    -1,    -1,  2447,   524,
     525,   526,   527,   528,   529,    37,  2455,    -1,    -1,    -1,
      -1,    -1,  3045,    -1,    -1,    -1,    48,    -1,    -1,   406,
      -1,    -1,    -1,    55,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2687,    -1,
      -1,    -1,    -1,    -1,  2693,    -1,    -1,    -1,  1437,    -1,
      82,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2709,    -1,    -1,    -1,  2713,    -1,    -1,    -1,  2717,  2718,
    2719,    -1,    -1,    -1,  2723,  2724,  2725,    -1,  2727,    -1,
      -1,   520,   521,   522,    -1,   524,   525,   526,   527,   528,
     529,    -1,  2541,  2542,  2543,    -1,    -1,  2746,    -1,  2748,
      -1,    -1,    -1,    -1,    -1,  2754,    -1,    -1,  2757,  2758,
      -1,  2760,  2761,  2762,  2763,  2764,  2765,  2766,  2767,  2768,
    2769,  2770,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     517,    -1,    -1,   520,   521,   522,    -1,   524,   525,   526,
     527,   528,   529,    -1,    -1,  2794,    -1,   534,     8,   181,
    2799,    11,    -1,  2802,  1543,    -1,    16,  1546,    -1,    19,
      20,    21,  1551,  2812,   228,  1554,    -1,    -1,   200,    -1,
    1559,    -1,    -1,   205,    -1,    -1,    -1,    37,    -1,    -1,
      -1,  2830,    -1,    -1,    -1,    -1,    -1,    -1,    48,    -1,
      -1,  2840,    -1,    -1,    -1,    55,   228,   229,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2854,    -1,    -1,  2857,    -1,
      -1,    -1,   244,    -1,    -1,  2864,  2865,  2866,  2867,    -1,
      -1,    -1,    82,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2883,  2884,   300,    -1,    -1,    -1,
      -1,    -1,    -1,  2892,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   283,    -1,    -1,   286,    -1,    -1,  1646,    -1,    -1,
    2709,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   300,    -1,
    2919,   303,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2931,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2944,    -1,    -1,    -1,    -1,
    2949,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   181,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1725,    -1,    -1,  3372,
     200,    -1,    -1,    -1,    -1,   205,    -1,    -1,    -1,    -1,
    2799,    -1,  3001,  2802,    -1,    -1,  3005,    -1,    -1,    -1,
    3393,  3394,  3011,    -1,    -1,     3,    -1,     5,   228,   229,
      -1,    -1,    -1,    -1,   406,    -1,  3025,    -1,    -1,    -1,
      -1,    -1,  3031,    -1,   244,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  3425,    -1,    -1,  3044,  3045,    -1,    -1,    -1,
      -1,    -1,    -1,  3052,    -1,    -1,    -1,    -1,    -1,  1798,
      -1,    -1,    -1,    -1,    -1,  2864,  2865,  2866,  2867,    -1,
    3069,    -1,    -1,   283,    -1,  3074,   286,    -1,    -1,    -1,
      -1,    -1,    70,    71,    -1,    -1,    -1,    -1,    -1,    -1,
     300,    -1,    -1,   303,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   520,   521,   522,  3108,
     524,   525,   526,   527,   528,   529,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   111,   112,    -1,    -1,   115,   116,    -1,
      -1,    -1,    -1,    -1,    -1,   517,    -1,    -1,   520,   521,
     522,    -1,   524,   525,   526,   527,   528,   529,    -1,  3148,
      -1,     8,   534,  3152,    11,    -1,    -1,    -1,  3157,    16,
      -1,    -1,    19,    20,    21,    -1,    -1,    -1,    -1,  3168,
     863,   864,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  3184,    -1,    -1,    -1,  3188,
      -1,    48,    -1,  3192,    -1,    -1,   406,  1936,    55,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1945,   195,   196,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3217,    -1,
      -1,    -1,    -1,    -1,  3223,    82,    -1,    -1,    -1,    -1,
      -1,  3230,    -1,    -1,    -1,    -1,  3235,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  3052,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  3264,    -1,    -1,    -1,    -1,
      -1,    -1,   260,   261,   262,   263,   264,   265,   266,   267,
      -1,    -1,   270,   271,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  3292,    -1,    -1,   989,    -1,    -1,    -1,
     993,   994,    -1,  3302,    -1,    -1,    -1,   517,    -1,    -1,
     520,   521,   522,    -1,   524,   525,   526,   527,   528,   529,
      -1,    -1,    -1,    -1,   181,    -1,    -1,  3326,    -1,    -1,
      -1,  2070,    -1,    -1,    -1,    -1,    -1,  2076,    -1,    -1,
      -1,    -1,  3341,   200,    -1,    -1,    -1,  3346,   205,    -1,
      -1,    -1,    -1,    -1,    -1,  1048,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   228,   229,  3372,    -1,  1068,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1076,    -1,    -1,  1079,   244,    -1,  1082,
    1083,  1084,  1085,  3392,  3393,  3394,    -1,    -1,    -1,    -1,
      -1,   389,   390,    -1,  3787,    -1,  3405,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  3414,    -1,    -1,    -1,    -1,
    3419,    -1,  3421,    -1,    -1,    -1,  3425,    -1,    -1,   286,
    1123,  1124,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    3439,  3440,    -1,   300,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1144,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2201,    -1,    -1,    -1,    -1,    -1,  3467,  3468,
    1163,  3470,    -1,    -1,    -1,    -1,    24,    -1,    -1,    -1,
    2219,  1174,  1175,  1176,    -1,  1178,  1179,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2235,    -1,    -1,    -1,
      -1,   489,   490,    -1,    -1,    -1,    -1,  2246,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1212,
      -1,    -1,    -1,    -1,    -1,   513,   514,  3326,    -1,    -1,
      -1,    -1,  2271,    -1,    -1,    83,  1229,  1230,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   406,
      -1,    99,  3551,    -1,    -1,    -1,    -1,    -1,    -1,  3558,
      -1,  3560,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1265,    -1,    -1,    -1,  1269,  1270,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1280,  1281,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  3600,    -1,   151,    -1,    -1,  3405,    -1,    -1,    -1,
      -1,    -1,    -1,   161,    -1,  3414,    -1,    -1,    -1,    -1,
    3419,    -1,    -1,    -1,    -1,   173,    -1,    -1,    -1,    -1,
     178,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    3639,  3440,    -1,    -1,  1337,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1346,    -1,    -1,    -1,    -1,    -1,    -1,
     517,   209,    -1,   520,   521,   522,    -1,   524,   525,   526,
     527,   528,   529,    -1,    -1,    -1,  3675,  1370,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2426,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   253,    -1,     8,    -1,   257,
      11,    -1,    -1,    -1,    15,    16,    17,    18,    19,    20,
      21,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3728,
      -1,  3730,    -1,    -1,    -1,    -1,    37,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  3743,  3744,    -1,    48,  3747,    -1,
      -1,    -1,    -1,    -1,    55,    -1,  3755,    -1,    -1,  3558,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1461,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   324,    -1,  3777,    -1,
      -1,    82,   330,    -1,    -1,    -1,    -1,    -1,  3787,    -1,
      -1,    -1,  3791,    -1,  3793,    -1,    -1,    -1,   346,   347,
      -1,  3600,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  3816,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1522,
      -1,  1524,  1525,   381,    -1,    -1,   384,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1537,  1538,    -1,   395,    -1,    -1,
     398,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1553,  2600,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     418,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3877,    -1,
     181,    -1,    -1,    -1,   432,  3884,    -1,    -1,    -1,    -1,
     438,   439,    -1,    -1,  2633,    -1,    -1,    -1,    -1,   200,
      -1,    -1,   450,    -1,   205,    -1,    -1,    -1,   456,  3908,
      -1,    -1,    -1,  2652,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   228,   229,  3728,
      -1,    -1,    -1,    -1,    -1,    -1,   484,    -1,    -1,    -1,
      -1,    -1,    -1,   244,  3943,    -1,    -1,    -1,    -1,    -1,
    2689,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  3961,    -1,    -1,  1658,    -1,    -1,    -1,    -1,
      -1,  3970,    -1,  1666,    -1,    -1,  2715,    -1,    -1,  3978,
      -1,    -1,   283,    -1,    -1,   286,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   300,
      -1,    -1,   303,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1705,    -1,    -1,    -1,    -1,    -1,  1711,  1712,
    1713,  1714,  1715,  1716,  1717,  1718,    -1,    -1,    -1,    -1,
    1723,  1724,    -1,    -1,    -1,  1728,    -1,    -1,    -1,  1732,
      -1,    -1,  1735,  1736,  1737,  1738,  1739,  1740,  1741,  1742,
    1743,    -1,    -1,  1746,    -1,    -1,  2795,    -1,    -1,    -1,
    1753,     8,  1755,    -1,    11,    -1,    -1,    -1,    15,    16,
      17,    18,    19,    20,    21,    -1,    -1,    -1,  3877,    -1,
      -1,  1774,    -1,    -1,  2823,    -1,    -1,  2826,    -1,    -1,
      37,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    48,    -1,    -1,    -1,   406,    -1,    -1,    55,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1812,
    1813,    -1,    -1,    -1,    -1,    70,    71,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    82,    -1,  2876,    -1,    -1,
      -1,    -1,    -1,    -1,  3943,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  3961,    -1,    -1,    -1,   111,   112,    -1,  1080,
     115,   116,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3978,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1900,    -1,    -1,
      -1,  1904,  2951,    -1,  1907,  1908,   517,    -1,    -1,   520,
     521,   522,    -1,   524,   525,   526,   527,   528,   529,    -1,
      -1,    -1,    -1,   534,   181,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     195,   196,    -1,   200,    -1,    -1,  1949,    -1,   205,    -1,
      -1,    -1,  3001,    -1,     8,    -1,    -1,    11,    -1,    -1,
      -1,    15,    16,    17,    18,    19,    20,    21,    -1,  1972,
    1973,   228,   229,    -1,    -1,    -1,    -1,    -1,  1199,    -1,
      -1,    -1,    -1,    37,    -1,    -1,    -1,   244,    -1,    -1,
      -1,    -1,    -1,    -1,    48,    -1,    -1,    -1,    -1,  2002,
    2003,    55,  2005,    -1,    -1,   260,   261,   262,   263,   264,
     265,   266,   267,    -1,    -1,   270,   271,    -1,    -1,    -1,
      -1,    -1,    -1,  1244,    -1,    -1,   283,    -1,    82,   286,
      -1,  2034,  2035,    -1,    -1,  2038,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   300,    -1,    -1,   303,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1279,    -1,
      -1,    -1,    -1,    -1,  2067,    -1,    -1,    -1,    -1,  2072,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2089,    -1,  2091,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1331,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    3169,    -1,    -1,    -1,  2127,    -1,    -1,   181,    -1,    -1,
       8,    -1,    -1,    11,   389,   390,    -1,    15,    16,    17,
      18,    19,    20,    21,    -1,    -1,   200,    -1,    -1,   406,
      -1,   205,    -1,    -1,    -1,  1376,    -1,    -1,  3207,    37,
    1381,    -1,    -1,  2166,    -1,    -1,    -1,    -1,  2171,  2172,
      48,    -1,    -1,    -1,   228,   229,    -1,    55,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     244,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    82,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2215,  1434,    -1,  2218,    -1,  2220,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   283,
      -1,    -1,   286,  2236,   489,   490,    -1,    -1,  1459,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   300,    -1,    -1,   303,
      -1,    -1,    -1,    -1,    -1,    -1,  3305,    -1,   513,   514,
     517,    -1,    -1,   520,   521,   522,    -1,   524,   525,   526,
     527,   528,   529,    -1,    -1,    -1,    -1,   534,    -1,    -1,
      -1,  2284,    -1,    -1,  1505,    -1,  1507,    -1,  1509,  1510,
      -1,  1512,    -1,    -1,  1515,    -1,    -1,  1518,  2301,  2302,
    1521,    -1,    -1,   181,    -1,  1526,    -1,    -1,  1529,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2320,    -1,    -1,
      -1,    -1,   200,    -1,    -1,     8,  2329,   205,    11,    -1,
      -1,    -1,    15,    16,    17,    18,    19,    20,    21,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1569,    -1,
     228,   229,   406,    -1,    37,    -1,    -1,    -1,    -1,    -1,
    3409,  3410,    -1,    -1,    -1,    48,   244,    -1,    -1,    -1,
      -1,    -1,    55,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  2386,    -1,    -1,    -1,    -1,    -1,  2392,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    82,
      -1,    -1,    -1,    -1,    -1,   283,    -1,    -1,   286,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   300,    -1,    -1,   303,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1654,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2450,    -1,  1670,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1680,
    1681,  1682,    -1,   517,    -1,  1686,   520,   521,   522,  1690,
     524,   525,   526,   527,   528,   529,    -1,    -1,    -1,    -1,
     534,  3530,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   181,  3548,
      -1,  3550,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   200,    -1,    -1,
      -1,    -1,   205,    -1,    -1,    -1,    -1,    -1,   406,    -1,
      -1,  1752,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   228,   229,    -1,    -1,    -1,
      -1,    -1,  3601,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   244,    -1,    -1,    -1,    -1,    -1,    -1,  3617,    -1,
      -1,    -1,  3621,    -1,  1795,    -1,    -1,    -1,    -1,    -1,
    2583,    -1,  1080,    -1,    -1,    -1,  2589,  2590,    -1,    -1,
    1811,    -1,    -1,    -1,    -1,  1816,    -1,  2600,    -1,    -1,
     283,    -1,    -1,   286,    -1,    -1,    -1,    -1,  2611,    -1,
      -1,  2614,  1833,  2616,    -1,    -1,    -1,   300,    -1,    -1,
     303,  2624,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2632,
    2633,    -1,    -1,    -1,  1080,    -1,  2639,    -1,    -1,   517,
      -1,    -1,   520,   521,   522,    -1,   524,   525,   526,   527,
     528,   529,    -1,    -1,    -1,    -1,   534,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2685,    -1,    27,    -1,    -1,    -1,    -1,    -1,
      33,    -1,  2695,    -1,    -1,    -1,    -1,    -1,    -1,    42,
      -1,    -1,    27,    -1,    -1,    -1,    -1,    -1,    33,    -1,
      -1,    -1,  2715,    -1,    -1,    -1,    -1,    42,    -1,    62,
      -1,    -1,    -1,   406,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    62,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    3809,    -1,    -1,    -1,    -1,   108,    -1,    -1,    -1,  2772,
      -1,  2774,  1270,    -1,    -1,    -1,    -1,    -1,    -1,  2000,
      -1,  1279,    -1,   108,    -1,    -1,    -1,  2008,  2009,    -1,
    2011,  2012,  2013,  2014,  2015,  2016,    -1,   140,  2019,  2020,
    2021,  2022,  2023,  2024,  2025,  2026,  2027,  2028,  2029,  3858,
      -1,    -1,    -1,    -1,    -1,   140,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1279,   517,    -1,    -1,   520,   521,   522,
      -1,   524,   525,   526,   527,   528,   529,    -1,    -1,    -1,
      -1,   534,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   208,    -1,    -1,  2871,  2872,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   208,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  2906,    -1,    -1,    -1,    -1,    -1,  2130,
      -1,    -1,  2133,    -1,    -1,   258,    -1,  2920,    -1,    -1,
      -1,    -1,  2925,  2926,    -1,   268,    -1,  2930,    -1,    -1,
      -1,    -1,  2935,   258,    -1,  2938,  2939,   280,    -1,    -1,
    2943,  2944,    -1,   268,  2947,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   280,    -1,    -1,  2179,   302,
      -1,    -1,  2183,  2184,  2185,  2186,  2187,  2188,  2189,  2190,
     313,    -1,    -1,    -1,    -1,  2196,  2197,   302,  2199,  2200,
      -1,    -1,    -1,    -1,    -1,    24,    -1,    -1,   313,    -1,
    2211,  2994,    -1,  2214,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2222,  2223,  2224,  2225,  2226,  2227,  2228,  2229,  2230,
    2231,  1509,  1510,    -1,    -1,    -1,    -1,  1515,    -1,    -1,
      -1,   364,    -1,    -1,    -1,   368,    -1,   370,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  3038,  2257,    -1,    -1,   364,
      -1,    -1,    -1,   368,    83,   370,    -1,    -1,    -1,    -1,
      -1,    -1,   395,    -1,    -1,    -1,    -1,   400,    -1,    -1,
      99,    -1,  3065,  1509,  1510,    -1,    -1,    -1,    -1,  1515,
     395,    -1,    -1,   416,    -1,   400,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   416,    -1,    -1,    -1,    -1,    -1,  2318,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   151,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   161,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   474,    -1,    -1,   173,    -1,    -1,    -1,    -1,   178,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   474,
      -1,     8,    -1,  3156,    11,    -1,    -1,    -1,    15,    16,
      17,    18,    19,    20,    21,    -1,  2387,    -1,    -1,    -1,
     209,    -1,    -1,    -1,    -1,    -1,  2397,  2398,    -1,    -1,
      37,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    48,    -1,    -1,    -1,    -1,    -1,    -1,    55,    -1,
      -1,    -1,    -1,    -1,  3207,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   253,    -1,    -1,    -1,   257,    -1,
      -1,    -1,    -1,    -1,    -1,    82,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  3240,    -1,    -1,
      -1,    -1,    -1,  2464,    -1,    -1,    -1,    -1,  3251,  3252,
      -1,    -1,  3255,    -1,  3257,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2488,  2489,  2490,
      -1,    -1,  2493,  2494,  2495,  2496,  2497,  2498,    -1,    -1,
      -1,  2502,  2503,  2504,  2505,  2506,  2507,  2508,  2509,  2510,
    2511,   330,    -1,    -1,    -1,  2516,  2517,    -1,    -1,    -1,
      -1,    -1,    -1,  1801,    -1,  1751,    -1,    -1,   347,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  3325,  2544,   181,    -1,    -1,    -1,  2549,    -1,
      -1,    -1,    -1,    -1,  3337,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   381,   200,    -1,   384,    -1,    -1,   205,    -1,
      -1,    -1,    -1,    -1,    -1,  1801,   395,    -1,  3361,   398,
      -1,  2582,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   228,   229,    -1,    -1,    -1,    -1,    -1,    -1,   418,
    2601,    -1,    -1,  2604,  2605,    -1,    -1,   244,    -1,    -1,
      -1,  2612,  2613,   432,    -1,    -1,    -1,    -1,    -1,    -1,
     439,    -1,    -1,    -1,    -1,  2626,  2627,  2628,  2629,    -1,
    2631,   450,    -1,    -1,  2635,    -1,    -1,   456,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   283,    -1,    -1,   286,
      -1,    -1,    -1,    -1,    -1,  3438,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   300,    -1,   484,   303,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  3457,    -1,    -1,    -1,  3461,    -1,
      -1,    -1,  3465,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  3476,    -1,    -1,    -1,    -1,  3481,    -1,
    3483,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2720,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  2011,  2012,  2013,  2014,  2015,  2016,    -1,
      -1,  2019,  2020,  2021,  2022,  2023,  2024,  2025,  2026,  2027,
    2028,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  3547,    -1,    -1,    -1,    -1,   406,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  3565,    -1,    -1,  2011,  2012,  2013,  2014,  2015,
    2016,    -1,    -1,  2019,  2020,  2021,  2022,  2023,  2024,  2025,
    2026,  2027,  2028,    -1,    -1,    -1,    -1,     8,    -1,    -1,
      11,    -1,    -1,    -1,    15,    16,    17,    18,    19,    20,
      21,    -1,    -1,    -1,    -1,    -1,  2827,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    37,    -1,    -1,    -1,
      -1,    -1,  3625,    -1,    -1,    -1,    -1,    48,    -1,    -1,
    2851,    -1,  3635,    -1,    55,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  3647,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     517,    82,    -1,   520,   521,   522,    -1,   524,   525,   526,
     527,   528,   529,    -1,    -1,    -1,    -1,   534,    -1,    -1,
      -1,    -1,    -1,    -1,     8,    -1,  2907,    11,  2909,    -1,
      -1,    -1,    16,    -1,  2915,    19,    20,    21,  2196,  2197,
      -1,    -1,    -1,  2924,    -1,  3708,  2927,    -1,  2929,    -1,
      -1,    -1,  2933,    37,    -1,  2936,  2937,    -1,    -1,  2940,
    2941,    -1,    -1,    -1,    48,    -1,    -1,  2948,    -1,    -1,
      -1,    55,    -1,    -1,    -1,     8,    -1,    -1,    11,    -1,
      -1,    -1,    15,    16,    17,    18,    19,    20,    21,    -1,
    2196,  2197,    -1,    -1,    -1,    -1,    -1,    -1,    82,    -1,
     181,    -1,    -1,    -1,    37,    -1,    -1,  2988,    -1,    -1,
      -1,    -1,  2993,    -1,    -1,    48,    -1,    -1,    -1,   200,
      -1,    -1,    55,    -1,   205,    -1,    -1,  3008,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   228,   229,    82,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2318,    -1,    -1,   244,    -1,  3046,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  3837,  3838,  3839,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   181,    -1,    -1,
      -1,    -1,   283,    -1,    -1,   286,    -1,    -1,    -1,    -1,
      -1,    -1,  2318,    -1,    -1,    -1,   200,    -1,    -1,   300,
      -1,   205,   303,    -1,    -1,  3888,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   228,   229,    -1,    -1,   181,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     244,    -1,    -1,    -1,    -1,    -1,    -1,   200,    -1,    -1,
      -1,    -1,   205,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3951,    -1,
      -1,    -1,    -1,    -1,    -1,   228,   229,    -1,    -1,   283,
      -1,    -1,   286,    -1,    -1,    -1,    -1,    -1,    -1,  3190,
    3191,   244,    -1,    -1,    -1,    -1,   300,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   406,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  3215,  3216,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     283,    -1,    -1,   286,    -1,    -1,    -1,    -1,  3239,    -1,
      -1,    -1,  3243,    -1,  3245,  3246,  3247,   300,    -1,  3250,
     303,    -1,  3253,  3254,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  3262,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  3288,  3289,  3290,
    3291,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   406,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   517,    -1,    -1,   520,
     521,   522,    -1,   524,   525,   526,   527,   528,   529,    -1,
      -1,    -1,    -1,   534,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2627,
    2628,    -1,    -1,   406,    -1,    -1,    -1,  3358,    -1,    -1,
      -1,    -1,    -1,  3364,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  3377,    -1,    -1,     8,
      -1,    -1,    11,    -1,    -1,    -1,    15,    16,    17,    18,
      19,    20,    21,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2627,  2628,    -1,  2682,    -1,    -1,    -1,    37,    -1,
    3411,    -1,    -1,   517,    -1,    -1,   520,   521,   522,    48,
     524,   525,   526,   527,   528,   529,    55,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  3445,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    82,    -1,    -1,  2682,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   517,    -1,    -1,   520,   521,   522,
      -1,   524,   525,   526,   527,   528,   529,  3478,  3479,  3480,
      -1,   534,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  3503,  3504,  3505,  3506,  3507,  3508,  3509,    -1,
    3511,  3512,    -1,  3514,  3515,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  3524,    -1,  3526,    -1,    -1,    -1,    -1,
      -1,    -1,  3533,  3534,  3535,  3536,  3537,  3538,  3539,  3540,
    3541,  3542,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   181,  3554,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  3566,    -1,    -1,    -1,    -1,
      -1,   200,    -1,  2851,    -1,    -1,   205,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,     8,    -1,    -1,    11,  2876,   228,
     229,    15,    16,    17,    18,    19,    20,    21,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   244,    -1,    -1,    -1,    -1,
      -1,  3622,    -1,    37,    -1,  2851,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    48,    -1,    -1,    -1,    -1,  3640,
      -1,    55,  2920,    -1,    -1,    -1,    -1,    -1,  3649,    -1,
    2876,    -1,    -1,    -1,   283,    -1,  3657,   286,    -1,    -1,
      -1,    -1,    -1,    -1,  3665,  3666,    -1,    -1,    82,    -1,
      -1,   300,    -1,    -1,   303,    -1,  3677,  3678,  3679,  3680,
      -1,  3682,    -1,    -1,    -1,    -1,    -1,    -1,     8,    -1,
      -1,    11,    -1,    -1,    -1,    15,    16,    17,    18,    19,
      20,    21,  3703,    -1,    -1,    -1,  2984,  2985,  2986,  2987,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    37,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    48,    -1,
      -1,    -1,    -1,    -1,    -1,    55,    -1,    -1,    -1,    -1,
      -1,  3742,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2984,  2985,
    2986,  2987,    82,    -1,    -1,  3766,    -1,   181,  3046,    -1,
    3771,    -1,    -1,  3774,  3775,    -1,    -1,   406,  3779,    -1,
    3781,  3782,    -1,    -1,  3785,    -1,   200,    -1,    -1,    -1,
      -1,   205,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  3806,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   228,   229,    -1,    -1,    -1,    -1,
    3046,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     244,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  3847,  3848,  3849,    -1,
      -1,  3852,    -1,    -1,  3855,  3856,    -1,    -1,    -1,    -1,
      -1,   181,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   283,
      -1,    -1,   286,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     200,    -1,    -1,    -1,    -1,   205,   300,    -1,   517,   303,
    3891,   520,   521,   522,    -1,   524,   525,   526,   527,   528,
     529,    -1,  3903,  3904,  3905,   534,    -1,    -1,   228,   229,
      -1,    -1,    -1,  3191,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   244,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   283,    -1,  3191,   286,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     300,    -1,    -1,   303,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   406,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  3293,  3294,  3295,  3296,  3297,
    3298,  3299,    -1,    -1,    -1,  3303,  3304,    -1,    -1,    -1,
    3308,    -1,    -1,  3311,    -1,    -1,  3314,  3315,  3316,  3317,
    3318,  3319,  3320,  3321,  3322,  3323,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  3293,  3294,  3295,
    3296,  3297,  3298,  3299,    -1,    -1,    -1,  3303,  3304,    -1,
      -1,    -1,  3308,    -1,    -1,  3311,   406,    -1,  3314,  3315,
    3316,  3317,  3318,  3319,  3320,  3321,  3322,  3323,  3324,    -1,
      -1,    -1,    -1,   517,    -1,    -1,   520,   521,   522,    -1,
     524,   525,   526,   527,   528,   529,    -1,    -1,    -1,    -1,
     534,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  3463,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   517,    -1,    -1,
     520,   521,   522,    -1,   524,   525,   526,   527,   528,   529,
      -1,    -1,    -1,    -1,   534,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  3511,  3512,    -1,    -1,  3463,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3527,
      -1,  3529,    -1,  3531,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  3511,  3512,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  3527,    -1,  3529,    -1,  3531,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3657,
      -1,    -1,    -1,    -1,    -1,    -1,  3664,    -1,    -1,  3667,
    3668,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3676,    -1,
    3678,  3679,    -1,    -1,    -1,  3683,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  3657,    -1,    -1,    -1,    -1,    -1,    -1,  3664,    -1,
      -1,  3667,  3668,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    3676,    -1,  3678,  3679,    -1,    -1,    -1,  3683,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  3772,  3773,    -1,    -1,  3776,    -1,
      -1,    -1,  3780,    -1,    -1,  3783,  3784,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  3772,  3773,    -1,    -1,
    3776,    -1,    -1,    -1,  3780,    -1,    -1,  3783,  3784,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  3853,  3854,    -1,    -1,  3857,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,     3,     4,     5,     6,     7,     8,     9,    10,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    30,
      -1,    32,    33,    34,    -1,    -1,    -1,  3853,  3854,    40,
      41,  3857,    -1,    44,    45,    46,    -1,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    58,    59,    -1,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    72,    73,    74,    75,    -1,    77,    78,    79,    80,
      81,    -1,    83,    -1,    85,    86,    87,    88,    89,    90,
      91,    92,    93,    94,    -1,    96,    97,    98,    99,   100,
     101,    -1,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
      -1,   122,   123,   124,   125,   126,   127,   128,   129,   130,
     131,   132,   133,   134,    -1,    -1,   137,   138,   139,   140,
     141,   142,   143,    -1,   145,   146,   147,    -1,   149,   150,
     151,    -1,   153,   154,   155,   156,   157,   158,   159,   160,
     161,   162,   163,   164,   165,    -1,   167,   168,   169,   170,
      -1,   172,    -1,   174,   175,   176,   177,   178,   179,   180,
     181,   182,    -1,   184,   185,    -1,    -1,   188,   189,   190,
     191,    -1,   193,   194,   195,   196,   197,   198,   199,   200,
     201,   202,   203,   204,    -1,   206,   207,   208,   209,   210,
     211,   212,    -1,   214,   215,   216,   217,   218,   219,   220,
     221,   222,   223,    -1,   225,    -1,   227,   228,   229,   230,
     231,   232,   233,   234,   235,   236,   237,   238,    -1,    -1,
     241,   242,   243,   244,    -1,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,   287,   288,   289,   290,
     291,   292,   293,   294,    -1,   296,   297,    -1,    -1,   300,
     301,   302,    -1,    -1,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,   322,   323,   324,   325,   326,   327,    -1,   329,   330,
     331,   332,   333,   334,   335,   336,   337,   338,    -1,   340,
     341,   342,   343,   344,   345,   346,   347,    -1,   349,   350,
     351,   352,   353,   354,   355,   356,    -1,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,    -1,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,   385,   386,   387,   388,   389,   390,
     391,   392,   393,    -1,   395,   396,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,   407,   408,   409,   410,
      -1,   412,   413,   414,   415,   416,   417,   418,   419,   420,
     421,   422,   423,   424,   425,   426,   427,   428,    -1,   430,
     431,   432,   433,   434,   435,   436,   437,   438,   439,    -1,
     441,   442,   443,    -1,   445,    -1,   447,   448,   449,   450,
     451,   452,   453,   454,   455,   456,   457,   458,   459,   460,
      -1,    -1,   463,   464,   465,   466,   467,   468,   469,   470,
      -1,   472,   473,   474,   475,   476,   477,   478,    -1,   480,
     481,   482,   483,   484,   485,   486,   487,   488,   489,   490,
      -1,    -1,   493,    -1,   495,   496,   497,   498,   499,   500,
     501,   502,   503,   504,   505,   506,   507,   508,   509,   510,
     511,   512,   513,   514,   515,   516,   517,    -1,   519,    -1,
      -1,    -1,    -1,   524,   525,   526,    -1,    -1,    -1,    -1,
     531,    -1,   533,   534,    -1,    -1,    -1,    -1,   539,   540,
      -1,    -1,    -1,    -1,   545,   546,     3,     4,     5,     6,
       7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    -1,    32,    33,    34,    -1,    -1,
      -1,    -1,    -1,    40,    41,    -1,    -1,    44,    45,    46,
      -1,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    58,    59,    -1,    61,    62,    63,    64,    65,    66,
      67,    68,    69,    70,    71,    72,    73,    74,    75,    -1,
      77,    78,    79,    80,    81,    -1,    83,    -1,    85,    86,
      87,    88,    89,    90,    91,    92,    93,    94,    -1,    96,
      97,    98,    99,   100,   101,    -1,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,   118,   119,   120,    -1,   122,   123,   124,   125,   126,
     127,   128,   129,   130,   131,   132,   133,   134,    -1,    -1,
     137,   138,   139,   140,   141,   142,   143,    -1,   145,   146,
     147,    -1,   149,   150,   151,    -1,   153,   154,   155,   156,
     157,   158,   159,   160,   161,   162,   163,   164,   165,    -1,
     167,   168,   169,   170,    -1,   172,    -1,   174,   175,   176,
     177,   178,   179,   180,   181,   182,    -1,   184,   185,    -1,
      -1,   188,   189,   190,   191,    -1,   193,   194,   195,   196,
     197,   198,   199,   200,   201,   202,   203,   204,    -1,   206,
     207,   208,   209,   210,   211,   212,    -1,   214,   215,   216,
     217,   218,   219,   220,   221,   222,   223,    -1,   225,    -1,
     227,   228,   229,   230,   231,   232,   233,   234,   235,   236,
     237,   238,    -1,    -1,   241,   242,   243,   244,    -1,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     287,   288,   289,   290,   291,   292,   293,   294,    -1,   296,
     297,    -1,    -1,   300,   301,   302,    -1,    -1,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,   323,   324,   325,   326,
     327,    -1,   329,   330,   331,   332,   333,   334,   335,   336,
     337,   338,    -1,   340,   341,   342,   343,   344,   345,   346,
     347,    -1,   349,   350,   351,   352,   353,   354,   355,   356,
      -1,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,   370,   371,    -1,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,   386,
     387,   388,   389,   390,   391,   392,   393,    -1,   395,   396,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
     407,   408,   409,   410,    -1,   412,   413,   414,   415,   416,
     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
     427,   428,    -1,   430,   431,   432,   433,   434,   435,   436,
     437,   438,   439,    -1,   441,   442,   443,    -1,   445,    -1,
     447,   448,   449,   450,   451,   452,   453,   454,   455,   456,
     457,   458,   459,   460,    -1,    -1,   463,   464,   465,   466,
     467,   468,   469,   470,    -1,   472,   473,   474,   475,   476,
     477,   478,    -1,   480,   481,   482,   483,   484,   485,   486,
     487,   488,   489,   490,    -1,    -1,   493,    -1,   495,   496,
     497,   498,   499,   500,   501,   502,   503,   504,   505,   506,
     507,   508,   509,   510,   511,   512,   513,   514,   515,   516,
     517,    -1,   519,    -1,    -1,    -1,    -1,   524,   525,   526,
      -1,    -1,    -1,    -1,   531,    -1,   533,    -1,    -1,    -1,
      -1,    -1,   539,   540,    -1,    -1,    -1,    -1,   545,   546,
       3,     4,     5,     6,     7,     8,     9,    10,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,
      23,    24,    25,    26,    27,    28,    29,    30,    -1,    32,
      33,    34,    -1,    -1,    -1,    -1,    -1,    40,    41,    -1,
      -1,    44,    45,    46,    -1,    48,    49,    50,    51,    52,
      53,    54,    55,    56,    57,    58,    59,    -1,    61,    62,
      63,    64,    65,    66,    67,    68,    69,    70,    71,    72,
      73,    74,    75,    -1,    77,    78,    79,    80,    81,    -1,
      83,    -1,    85,    86,    87,    88,    89,    90,    91,    92,
      93,    94,    -1,    96,    97,    98,    99,   100,   101,    -1,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,   117,   118,   119,   120,    -1,   122,
     123,   124,   125,   126,   127,    -1,    -1,   130,   131,   132,
     133,   134,    -1,    -1,   137,   138,   139,   140,   141,   142,
     143,    -1,   145,   146,   147,    -1,   149,   150,   151,    -1,
     153,   154,   155,   156,   157,   158,   159,   160,   161,   162,
     163,   164,   165,    -1,   167,   168,   169,   170,    -1,   172,
      -1,   174,   175,   176,   177,   178,   179,   180,   181,   182,
      -1,   184,   185,    -1,    -1,   188,   189,   190,   191,    -1,
     193,   194,   195,   196,   197,   198,   199,   200,   201,   202,
     203,   204,    -1,   206,   207,   208,   209,   210,   211,   212,
      -1,   214,   215,   216,   217,   218,   219,   220,   221,   222,
     223,    -1,   225,    -1,   227,   228,   229,   230,   231,   232,
     233,   234,   235,   236,   237,   238,    -1,    -1,   241,   242,
     243,   244,    -1,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   294,    -1,   296,   297,    -1,    -1,   300,   301,   302,
      -1,    -1,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
     323,   324,   325,   326,   327,    -1,   329,   330,   331,   332,
     333,   334,   335,   336,   337,   338,    -1,   340,   341,   342,
     343,   344,   345,   346,   347,    -1,   349,   350,   351,   352,
     353,   354,   355,   356,    -1,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,   371,    -1,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,   385,   386,   387,   388,   389,   390,   391,   392,
     393,    -1,   395,   396,   397,   398,   399,   400,   401,   402,
     403,   404,    -1,   406,   407,   408,   409,   410,    -1,   412,
     413,   414,   415,   416,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,   427,    -1,    -1,   430,   431,   432,
     433,   434,   435,   436,   437,   438,   439,    -1,   441,   442,
     443,    -1,   445,    -1,   447,   448,   449,   450,   451,   452,
     453,   454,   455,   456,   457,   458,   459,   460,    -1,    -1,
     463,   464,   465,   466,   467,   468,   469,   470,    -1,   472,
     473,   474,   475,   476,   477,   478,    -1,   480,   481,   482,
     483,   484,   485,   486,   487,   488,   489,   490,    -1,    -1,
     493,    -1,   495,   496,   497,   498,   499,   500,   501,   502,
     503,   504,   505,   506,   507,   508,   509,   510,   511,   512,
     513,   514,   515,   516,   517,    -1,   519,    -1,    -1,    -1,
      -1,   524,   525,   526,    -1,    -1,    -1,    -1,   531,    -1,
     533,    -1,    -1,    -1,    -1,    -1,   539,   540,    -1,    -1,
      -1,    -1,   545,   546,     3,     4,     5,     6,     7,     8,
       9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    22,    23,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    33,    34,    -1,    -1,    -1,    38,
      -1,    40,    41,    -1,    -1,    44,    45,    46,    -1,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    58,
      59,    -1,    61,    62,    63,    64,    65,    66,    67,    68,
      69,    70,    71,    72,    73,    74,    75,    -1,    77,    78,
      79,    80,    81,    -1,    83,    -1,    85,    86,    87,    88,
      89,    90,    91,    92,    93,    94,    -1,    96,    97,    98,
      99,   100,   101,    -1,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
     119,   120,    -1,   122,   123,   124,   125,   126,   127,    -1,
      -1,   130,   131,   132,   133,   134,   135,    -1,   137,   138,
     139,   140,   141,   142,   143,    -1,   145,   146,   147,    -1,
     149,   150,   151,    -1,   153,   154,   155,   156,   157,   158,
     159,   160,   161,   162,   163,   164,   165,    -1,   167,   168,
     169,   170,    -1,   172,    -1,   174,   175,    -1,   177,   178,
     179,   180,   181,   182,    -1,   184,   185,    -1,    -1,   188,
     189,   190,   191,    -1,   193,   194,   195,   196,   197,   198,
     199,   200,   201,   202,   203,   204,    -1,   206,   207,   208,
     209,   210,   211,   212,    -1,   214,   215,   216,   217,   218,
     219,   220,   221,   222,   223,    -1,   225,    -1,   227,   228,
     229,   230,   231,   232,   233,   234,   235,   236,   237,   238,
      -1,    -1,   241,   242,   243,   244,    -1,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   294,    -1,   296,   297,    -1,
      -1,   300,   301,   302,    -1,    -1,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,    -1,    -1,    -1,    -1,
     329,   330,   331,   332,   333,   334,   335,   336,   337,   338,
      -1,   340,   341,   342,   343,   344,   345,   346,   347,    -1,
     349,   350,   351,   352,   353,   354,   355,   356,    -1,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,   371,    -1,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,   385,   386,   387,   388,
     389,   390,   391,   392,    -1,   394,   395,   396,   397,   398,
     399,   400,   401,   402,   403,   404,    -1,   406,   407,   408,
     409,   410,    -1,   412,   413,   414,   415,   416,   417,   418,
     419,   420,   421,   422,   423,   424,   425,   426,   427,    -1,
      -1,   430,   431,    -1,   433,   434,   435,   436,   437,   438,
     439,    -1,   441,   442,   443,    -1,   445,    -1,   447,   448,
     449,   450,   451,   452,   453,   454,   455,   456,   457,   458,
     459,   460,    -1,    -1,   463,   464,   465,    -1,   467,   468,
     469,   470,    -1,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,   483,   484,   485,   486,   487,   488,
     489,   490,    -1,    -1,   493,    -1,    -1,   496,   497,   498,
     499,   500,   501,   502,   503,   504,   505,   506,   507,   508,
     509,   510,   511,   512,   513,   514,   515,   516,   517,    -1,
      -1,    -1,    -1,    -1,    -1,   524,   525,   526,    -1,    -1,
      -1,    -1,   531,    -1,   533,   534,    -1,    -1,    -1,    -1,
     539,   540,    -1,    -1,    -1,    -1,   545,   546,     3,     4,
       5,     6,     7,    -1,     9,    10,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    -1,    32,    33,    34,
      -1,    -1,    -1,    -1,    -1,    40,    41,    -1,    -1,    44,
      45,    46,    -1,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    -1,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    -1,    77,    78,    79,    80,    81,    -1,    83,    -1,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      -1,    96,    97,    98,    99,   100,   101,    -1,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,    -1,   120,    -1,   122,   123,   124,
     125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
      -1,    -1,   137,   138,   139,   140,   141,   142,   143,    -1,
     145,   146,   147,    -1,   149,   150,   151,    -1,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,   163,   164,
     165,    -1,   167,   168,   169,   170,    -1,   172,    -1,   174,
     175,   176,   177,   178,   179,   180,   181,   182,    -1,   184,
     185,    -1,    -1,   188,   189,   190,   191,    -1,   193,   194,
     195,   196,   197,   198,   199,   200,   201,   202,   203,   204,
      -1,   206,   207,   208,   209,   210,   211,   212,    -1,   214,
     215,   216,   217,   218,   219,   220,   221,   222,   223,    -1,
     225,    -1,   227,   228,   229,   230,   231,   232,   233,   234,
     235,   236,   237,   238,    -1,    -1,   241,   242,   243,   244,
      -1,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,    -1,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
      -1,   296,   297,    -1,    -1,   300,   301,   302,    -1,    -1,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,    -1,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,    -1,   340,   341,   342,   343,   344,
     345,   346,   347,    -1,   349,   350,   351,   352,   353,   354,
     355,   356,    -1,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,    -1,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,    -1,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,    -1,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,    -1,   430,   431,   432,   433,   434,
     435,   436,   437,   438,   439,    -1,   441,   442,   443,    -1,
     445,    -1,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,    -1,    -1,   463,   464,
     465,   466,   467,   468,   469,   470,    -1,   472,   473,   474,
     475,   476,   477,   478,    -1,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,    -1,    -1,   493,    -1,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,    -1,    -1,   519,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   531,    -1,   533,    -1,
      -1,    -1,    -1,    -1,   539,   540,    -1,    -1,    -1,    -1,
     545,   546,     3,     4,     5,     6,     7,     8,     9,    10,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    30,
      -1,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,    40,
      41,    -1,    -1,    44,    45,    46,    -1,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    58,    59,    60,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    72,    73,    74,    75,    -1,    77,    78,    79,    80,
      81,    -1,    83,    -1,    85,    86,    87,    88,    89,    90,
      91,    92,    93,    94,    -1,    96,    97,    98,    99,   100,
     101,    -1,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
      -1,   122,   123,   124,   125,   126,   127,    -1,    -1,   130,
     131,   132,   133,   134,    -1,    -1,   137,   138,   139,   140,
     141,   142,   143,    -1,   145,   146,   147,    -1,   149,   150,
     151,    -1,   153,   154,   155,   156,   157,   158,   159,   160,
     161,   162,   163,   164,   165,    -1,   167,   168,   169,   170,
      -1,   172,    -1,   174,   175,   176,   177,   178,   179,   180,
     181,   182,    -1,   184,   185,    -1,    -1,   188,   189,   190,
     191,    -1,   193,   194,   195,   196,   197,   198,   199,   200,
     201,   202,   203,   204,    -1,   206,   207,   208,   209,   210,
     211,   212,    -1,   214,   215,   216,   217,   218,   219,   220,
     221,   222,   223,    -1,   225,    -1,   227,   228,   229,   230,
     231,   232,   233,   234,   235,   236,   237,   238,    -1,   240,
     241,   242,   243,   244,    -1,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,   287,   288,   289,   290,
     291,   292,   293,   294,    -1,   296,   297,    -1,    -1,   300,
     301,   302,    -1,    -1,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,   322,   323,   324,    -1,    -1,    -1,    -1,   329,   330,
     331,   332,   333,   334,   335,   336,   337,   338,    -1,   340,
     341,   342,   343,   344,   345,   346,   347,    -1,   349,   350,
     351,   352,   353,   354,   355,   356,    -1,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,    -1,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,   385,   386,   387,   388,   389,   390,
     391,   392,    -1,    -1,   395,   396,   397,   398,   399,   400,
     401,   402,   403,   404,    -1,   406,   407,   408,   409,   410,
      -1,   412,   413,   414,   415,   416,   417,   418,   419,   420,
     421,   422,   423,   424,   425,   426,   427,    -1,    -1,   430,
     431,    -1,   433,   434,   435,   436,   437,   438,   439,    -1,
     441,   442,   443,    -1,   445,   446,   447,   448,   449,   450,
     451,   452,   453,   454,   455,   456,   457,   458,   459,   460,
      -1,    -1,   463,   464,   465,    -1,   467,   468,   469,   470,
      -1,   472,   473,   474,   475,   476,   477,   478,    -1,   480,
     481,   482,   483,   484,   485,   486,   487,   488,   489,   490,
      -1,    -1,   493,    -1,    -1,   496,   497,   498,   499,   500,
     501,   502,   503,   504,   505,   506,   507,   508,   509,   510,
     511,   512,   513,   514,   515,   516,   517,    -1,    -1,    -1,
      -1,    -1,    -1,   524,   525,   526,    -1,    -1,    -1,    -1,
     531,    -1,   533,    -1,    -1,    -1,    -1,    -1,   539,   540,
      -1,    -1,    -1,    -1,   545,   546,     3,     4,     5,     6,
       7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    -1,    32,    33,    34,    -1,    -1,
      -1,    38,    -1,    40,    41,    -1,    -1,    44,    45,    46,
      -1,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    58,    59,    -1,    61,    62,    63,    64,    65,    66,
      67,    68,    69,    70,    71,    72,    73,    74,    75,    -1,
      77,    78,    79,    80,    81,    -1,    83,    -1,    85,    86,
      87,    88,    89,    90,    91,    92,    93,    94,    -1,    96,
      97,    98,    99,   100,   101,    -1,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,   118,   119,   120,    -1,   122,   123,   124,   125,   126,
     127,    -1,    -1,   130,   131,   132,   133,   134,    -1,    -1,
     137,   138,   139,   140,   141,   142,   143,    -1,   145,   146,
     147,    -1,   149,   150,   151,    -1,   153,   154,   155,   156,
     157,   158,   159,   160,   161,   162,   163,   164,   165,    -1,
     167,   168,   169,   170,    -1,   172,    -1,   174,   175,    -1,
     177,   178,   179,   180,   181,   182,    -1,   184,   185,    -1,
      -1,   188,   189,   190,   191,    -1,   193,   194,   195,   196,
     197,   198,   199,   200,   201,   202,   203,   204,    -1,   206,
     207,   208,   209,   210,   211,   212,    -1,   214,   215,   216,
     217,   218,   219,   220,   221,   222,   223,    -1,   225,    -1,
     227,   228,   229,   230,   231,   232,   233,   234,   235,   236,
     237,   238,    -1,    -1,   241,   242,   243,   244,    -1,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     287,   288,   289,   290,   291,   292,   293,   294,    -1,   296,
     297,    -1,    -1,   300,   301,   302,    -1,    -1,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,   323,   324,    -1,    -1,
      -1,    -1,   329,   330,   331,   332,   333,   334,   335,   336,
     337,   338,    -1,   340,   341,   342,   343,   344,   345,   346,
     347,    -1,   349,   350,   351,   352,   353,   354,   355,   356,
      -1,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,   370,   371,    -1,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,   386,
     387,   388,   389,   390,   391,   392,    -1,   394,   395,   396,
     397,   398,   399,   400,   401,   402,   403,   404,    -1,   406,
     407,   408,   409,   410,    -1,   412,   413,   414,   415,   416,
     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
     427,    -1,    -1,   430,   431,    -1,   433,   434,   435,   436,
     437,   438,   439,    -1,   441,   442,   443,    -1,   445,    -1,
     447,   448,   449,   450,   451,   452,   453,   454,   455,   456,
     457,   458,   459,   460,    -1,    -1,   463,   464,   465,    -1,
     467,   468,   469,   470,    -1,   472,   473,   474,   475,   476,
     477,   478,   479,   480,   481,   482,   483,   484,   485,   486,
     487,   488,   489,   490,    -1,    -1,   493,    -1,    -1,   496,
     497,   498,   499,   500,   501,   502,   503,   504,   505,   506,
     507,   508,   509,   510,   511,   512,   513,   514,   515,   516,
     517,    -1,    -1,    -1,    -1,    -1,    -1,   524,   525,   526,
      -1,    -1,    -1,    -1,   531,    -1,   533,    -1,    -1,    -1,
      -1,    -1,   539,   540,    -1,    -1,    -1,    -1,   545,   546,
       3,     4,     5,     6,     7,     8,     9,    10,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,
      23,    24,    25,    26,    27,    28,    29,    30,    -1,    32,
      33,    34,    -1,    -1,    -1,    38,    -1,    40,    41,    -1,
      -1,    44,    45,    46,    -1,    48,    49,    50,    51,    52,
      53,    54,    55,    56,    57,    58,    59,    -1,    61,    62,
      63,    64,    65,    66,    67,    68,    69,    70,    71,    72,
      73,    74,    75,    -1,    77,    78,    79,    80,    81,    -1,
      83,    -1,    85,    86,    87,    88,    89,    90,    91,    92,
      93,    94,    -1,    96,    97,    98,    99,   100,   101,    -1,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,   117,   118,   119,   120,    -1,   122,
     123,   124,   125,   126,   127,    -1,    -1,   130,   131,   132,
     133,   134,    -1,    -1,   137,   138,   139,   140,   141,   142,
     143,    -1,   145,   146,   147,    -1,   149,   150,   151,    -1,
     153,   154,   155,   156,   157,   158,   159,   160,   161,   162,
     163,   164,   165,    -1,   167,   168,   169,   170,    -1,   172,
      -1,   174,   175,    -1,   177,   178,   179,   180,   181,   182,
      -1,   184,   185,    -1,    -1,   188,   189,   190,   191,    -1,
     193,   194,   195,   196,   197,   198,   199,   200,   201,   202,
     203,   204,    -1,   206,   207,   208,   209,   210,   211,   212,
      -1,   214,   215,   216,   217,   218,   219,   220,   221,   222,
     223,    -1,   225,    -1,   227,   228,   229,   230,   231,   232,
     233,   234,   235,   236,   237,   238,    -1,    -1,   241,   242,
     243,   244,    -1,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   294,    -1,   296,   297,    -1,    -1,   300,   301,   302,
      -1,    -1,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
     323,   324,    -1,    -1,    -1,    -1,   329,   330,   331,   332,
     333,   334,   335,   336,   337,   338,    -1,   340,   341,   342,
     343,   344,   345,   346,   347,    -1,   349,   350,   351,   352,
     353,   354,   355,   356,    -1,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,   371,    -1,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,   385,   386,   387,   388,   389,   390,   391,   392,
      -1,   394,   395,   396,   397,   398,   399,   400,   401,   402,
     403,   404,    -1,   406,   407,   408,   409,   410,    -1,   412,
     413,   414,   415,   416,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,   427,    -1,    -1,   430,   431,    -1,
     433,   434,   435,   436,   437,   438,   439,    -1,   441,   442,
     443,    -1,   445,    -1,   447,   448,   449,   450,   451,   452,
     453,   454,   455,   456,   457,   458,   459,   460,    -1,    -1,
     463,   464,   465,    -1,   467,   468,   469,   470,    -1,   472,
     473,   474,   475,   476,   477,   478,    -1,   480,   481,   482,
     483,   484,   485,   486,   487,   488,   489,   490,    -1,    -1,
     493,    -1,    -1,   496,   497,   498,   499,   500,   501,   502,
     503,   504,   505,   506,   507,   508,   509,   510,   511,   512,
     513,   514,   515,   516,   517,    -1,    -1,    -1,    -1,    -1,
      -1,   524,   525,   526,    -1,    -1,    -1,    -1,   531,    -1,
     533,   534,    -1,    -1,    -1,    -1,   539,   540,    -1,    -1,
      -1,    -1,   545,   546,     3,     4,     5,     6,     7,     8,
       9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    22,    23,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    33,    34,    -1,    -1,    -1,    -1,
      39,    40,    41,    -1,    -1,    44,    45,    46,    -1,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    58,
      59,    -1,    61,    62,    63,    64,    65,    66,    67,    68,
      69,    70,    71,    72,    73,    74,    75,    -1,    77,    78,
      79,    80,    81,    -1,    83,    -1,    85,    86,    87,    88,
      89,    90,    91,    92,    93,    94,    -1,    96,    97,    98,
      99,   100,   101,    -1,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
     119,   120,    -1,   122,   123,   124,   125,   126,   127,    -1,
      -1,   130,   131,   132,   133,   134,    -1,    -1,   137,   138,
     139,   140,   141,   142,   143,    -1,   145,   146,   147,    -1,
     149,   150,   151,    -1,   153,   154,   155,   156,   157,   158,
     159,   160,   161,   162,   163,   164,   165,    -1,   167,   168,
     169,   170,    -1,   172,    -1,   174,   175,    -1,   177,   178,
     179,   180,   181,   182,    -1,   184,   185,    -1,    -1,   188,
     189,   190,   191,    -1,   193,   194,   195,   196,   197,   198,
     199,   200,   201,   202,   203,   204,    -1,   206,   207,   208,
     209,   210,   211,   212,    -1,   214,   215,   216,   217,   218,
     219,   220,   221,   222,   223,    -1,   225,    -1,   227,   228,
     229,   230,   231,   232,   233,   234,   235,   236,   237,   238,
      -1,    -1,   241,   242,   243,   244,    -1,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   294,    -1,   296,   297,    -1,
      -1,   300,   301,   302,    -1,    -1,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,    -1,    -1,    -1,    -1,
     329,   330,   331,   332,   333,   334,   335,   336,   337,   338,
      -1,   340,   341,   342,   343,   344,   345,   346,   347,    -1,
     349,   350,   351,   352,   353,   354,   355,   356,    -1,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,   371,    -1,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,   385,   386,   387,   388,
     389,   390,   391,   392,    -1,    -1,   395,   396,   397,   398,
     399,   400,   401,   402,   403,   404,    -1,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,   417,   418,
     419,   420,   421,   422,   423,   424,   425,   426,   427,    -1,
      -1,   430,   431,    -1,   433,   434,   435,   436,   437,   438,
     439,    -1,   441,   442,   443,    -1,   445,    -1,   447,   448,
     449,   450,   451,   452,   453,   454,   455,   456,   457,   458,
     459,   460,    -1,    -1,   463,   464,   465,    -1,   467,   468,
     469,   470,    -1,   472,   473,   474,   475,   476,   477,   478,
      -1,   480,   481,   482,   483,   484,   485,   486,   487,   488,
     489,   490,    -1,    -1,   493,    -1,    -1,   496,   497,   498,
     499,   500,   501,   502,   503,   504,   505,   506,   507,   508,
     509,   510,   511,   512,   513,   514,   515,   516,   517,    -1,
      -1,    -1,    -1,    -1,    -1,   524,   525,   526,    -1,    -1,
      -1,    -1,   531,    -1,   533,    -1,    -1,    -1,    -1,    -1,
     539,   540,    -1,    -1,    -1,    -1,   545,   546,     3,     4,
       5,     6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    -1,    32,    33,    34,
      -1,    -1,    -1,    38,    -1,    40,    41,    -1,    -1,    44,
      45,    46,    -1,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    -1,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    -1,    77,    78,    79,    80,    81,    -1,    83,    -1,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      -1,    96,    97,    98,    99,   100,   101,    -1,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,    -1,   122,   123,   124,
     125,   126,   127,    -1,    -1,   130,   131,   132,   133,   134,
      -1,    -1,   137,   138,   139,   140,   141,   142,   143,    -1,
     145,   146,   147,    -1,   149,   150,   151,    -1,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,   163,   164,
     165,    -1,   167,   168,   169,   170,    -1,   172,    -1,   174,
     175,    -1,   177,   178,   179,   180,   181,   182,    -1,   184,
     185,    -1,    -1,   188,   189,   190,   191,    -1,   193,   194,
     195,   196,   197,   198,   199,   200,   201,   202,   203,   204,
      -1,   206,   207,   208,   209,   210,   211,   212,    -1,   214,
     215,   216,   217,   218,   219,   220,   221,   222,   223,    -1,
     225,    -1,   227,   228,   229,   230,   231,   232,   233,   234,
     235,   236,   237,   238,    -1,    -1,   241,   242,   243,   244,
      -1,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
      -1,   296,   297,    -1,    -1,   300,   301,   302,    -1,    -1,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
      -1,    -1,    -1,    -1,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,    -1,   340,   341,   342,   343,   344,
     345,   346,   347,    -1,   349,   350,   351,   352,   353,   354,
     355,   356,    -1,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,    -1,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,    -1,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
      -1,   406,   407,   408,   409,   410,    -1,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,    -1,    -1,   430,   431,    -1,   433,   434,
     435,   436,   437,   438,   439,    -1,   441,   442,   443,    -1,
     445,    -1,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,    -1,    -1,   463,   464,
     465,    -1,   467,   468,   469,   470,    -1,   472,   473,   474,
     475,   476,   477,   478,    -1,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,    -1,    -1,   493,    -1,
      -1,   496,   497,   498,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,   517,    -1,    -1,    -1,    -1,    -1,    -1,   524,
     525,   526,    -1,    -1,    -1,    -1,   531,    -1,   533,   534,
      -1,    -1,    -1,    -1,   539,   540,    -1,    -1,    -1,    -1,
     545,   546,     3,     4,     5,     6,     7,     8,     9,    10,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    30,
      -1,    32,    33,    34,    -1,    -1,    -1,    38,    -1,    40,
      41,    -1,    -1,    44,    45,    46,    -1,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    58,    59,    -1,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    72,    73,    74,    75,    -1,    77,    78,    79,    80,
      81,    -1,    83,    -1,    85,    86,    87,    88,    89,    90,
      91,    92,    93,    94,    -1,    96,    97,    98,    99,   100,
     101,    -1,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
      -1,   122,   123,   124,   125,   126,   127,    -1,    -1,   130,
     131,   132,   133,   134,    -1,    -1,   137,   138,   139,   140,
     141,   142,   143,    -1,   145,   146,   147,    -1,   149,   150,
     151,    -1,   153,   154,   155,   156,   157,   158,   159,   160,
     161,   162,   163,   164,   165,    -1,   167,   168,   169,   170,
      -1,   172,    -1,   174,   175,    -1,   177,   178,   179,   180,
     181,   182,    -1,   184,   185,    -1,    -1,   188,   189,   190,
     191,    -1,   193,   194,   195,   196,   197,   198,   199,   200,
     201,   202,   203,   204,    -1,   206,   207,   208,   209,   210,
     211,   212,    -1,   214,   215,   216,   217,   218,   219,   220,
     221,   222,   223,    -1,   225,    -1,   227,   228,   229,   230,
     231,   232,   233,   234,   235,   236,   237,   238,    -1,    -1,
     241,   242,   243,   244,    -1,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,   287,   288,   289,   290,
     291,   292,   293,   294,    -1,   296,   297,    -1,    -1,   300,
     301,   302,    -1,    -1,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,   322,   323,   324,    -1,    -1,    -1,    -1,   329,   330,
     331,   332,   333,   334,   335,   336,   337,   338,    -1,   340,
     341,   342,   343,   344,   345,   346,   347,    -1,   349,   350,
     351,   352,   353,   354,   355,   356,    -1,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,    -1,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,   385,   386,   387,   388,   389,   390,
     391,   392,    -1,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,   404,    -1,   406,   407,   408,   409,   410,
      -1,   412,   413,   414,   415,   416,   417,   418,   419,   420,
     421,   422,   423,   424,   425,   426,   427,    -1,    -1,   430,
     431,    -1,   433,   434,   435,   436,   437,   438,   439,    -1,
     441,   442,   443,    -1,   445,    -1,   447,   448,   449,   450,
     451,   452,   453,   454,   455,   456,   457,   458,   459,   460,
      -1,    -1,   463,   464,   465,    -1,   467,   468,   469,   470,
      -1,   472,   473,   474,   475,   476,   477,   478,    -1,   480,
     481,   482,   483,   484,   485,   486,   487,   488,   489,   490,
      -1,    -1,   493,    -1,    -1,   496,   497,   498,   499,   500,
     501,   502,   503,   504,   505,   506,   507,   508,   509,   510,
     511,   512,   513,   514,   515,   516,   517,    -1,    -1,    -1,
      -1,    -1,    -1,   524,   525,   526,    -1,    -1,    -1,    -1,
     531,    -1,   533,    -1,    -1,    -1,    -1,    -1,   539,   540,
      -1,    -1,    -1,    -1,   545,   546,     3,     4,     5,     6,
       7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    33,    34,    -1,    -1,
      -1,    -1,    -1,    40,    41,    -1,    -1,    44,    45,    46,
      -1,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    58,    59,    -1,    61,    62,    63,    64,    65,    66,
      67,    68,    69,    70,    71,    72,    73,    74,    75,    -1,
      77,    78,    79,    80,    81,    -1,    83,    -1,    85,    86,
      87,    88,    89,    90,    91,    92,    93,    94,    -1,    96,
      97,    98,    99,   100,   101,    -1,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,   118,   119,   120,    -1,   122,   123,   124,   125,   126,
     127,    -1,    -1,   130,   131,   132,   133,   134,    -1,    -1,
     137,   138,   139,   140,   141,   142,   143,    -1,   145,   146,
     147,    -1,   149,   150,   151,    -1,   153,   154,   155,   156,
     157,   158,   159,   160,   161,   162,   163,   164,   165,    -1,
     167,   168,   169,   170,    -1,   172,    -1,   174,   175,    -1,
     177,   178,   179,   180,   181,   182,    -1,   184,   185,    -1,
      -1,   188,   189,   190,   191,    -1,   193,   194,   195,   196,
     197,   198,   199,   200,   201,   202,   203,   204,    -1,   206,
     207,   208,   209,   210,   211,   212,    -1,   214,   215,   216,
     217,   218,   219,   220,   221,   222,   223,    -1,   225,    -1,
     227,   228,   229,   230,   231,   232,   233,   234,   235,   236,
     237,   238,    -1,    -1,   241,   242,   243,   244,    -1,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     287,   288,   289,   290,   291,   292,   293,   294,    -1,   296,
     297,    -1,    -1,   300,   301,   302,    -1,    -1,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,   323,   324,    -1,    -1,
      -1,    -1,   329,   330,   331,   332,   333,   334,   335,   336,
     337,   338,    -1,   340,   341,   342,   343,   344,   345,   346,
     347,    -1,   349,   350,   351,   352,   353,   354,   355,   356,
      -1,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,   370,   371,    -1,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,   386,
     387,   388,   389,   390,   391,   392,    -1,    -1,   395,   396,
     397,   398,   399,   400,   401,   402,   403,   404,    -1,   406,
     407,   408,   409,   410,    -1,   412,   413,   414,   415,   416,
     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
     427,    -1,    -1,   430,   431,    -1,   433,   434,   435,   436,
     437,   438,   439,    -1,   441,   442,   443,    -1,   445,    -1,
     447,   448,   449,   450,   451,   452,   453,   454,   455,   456,
     457,   458,   459,   460,    -1,    -1,   463,   464,   465,    -1,
     467,   468,   469,   470,    -1,   472,   473,   474,   475,   476,
     477,   478,    -1,   480,   481,   482,   483,   484,   485,   486,
     487,   488,   489,   490,    -1,    -1,   493,    -1,    -1,   496,
     497,   498,   499,   500,   501,   502,   503,   504,   505,   506,
     507,   508,   509,   510,   511,   512,   513,   514,   515,   516,
     517,    -1,    -1,    -1,    -1,    -1,    -1,   524,   525,   526,
      -1,    -1,    -1,    -1,   531,    -1,   533,    -1,    -1,    -1,
      -1,    -1,   539,   540,    -1,    -1,    -1,    -1,   545,   546,
       3,     4,     5,     6,     7,     8,     9,    10,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,
      23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
      33,    34,    -1,    -1,    -1,    -1,    -1,    40,    41,    -1,
      -1,    44,    45,    46,    -1,    48,    49,    50,    51,    52,
      53,    54,    55,    56,    57,    58,    59,    -1,    61,    62,
      63,    64,    65,    66,    67,    68,    69,    70,    71,    72,
      73,    74,    75,    -1,    77,    78,    79,    80,    81,    -1,
      83,    -1,    85,    86,    87,    88,    89,    90,    91,    92,
      93,    94,    -1,    96,    97,    98,    99,   100,   101,    -1,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,   117,   118,   119,   120,    -1,   122,
     123,   124,   125,   126,   127,    -1,    -1,   130,   131,   132,
     133,   134,    -1,    -1,   137,   138,   139,   140,   141,   142,
     143,    -1,   145,   146,   147,    -1,   149,   150,   151,    -1,
     153,   154,   155,   156,   157,   158,   159,   160,   161,   162,
     163,   164,   165,    -1,   167,   168,   169,   170,    -1,   172,
      -1,   174,   175,    -1,   177,   178,   179,   180,   181,   182,
      -1,   184,   185,    -1,    -1,   188,   189,   190,   191,    -1,
     193,   194,   195,   196,   197,   198,   199,   200,   201,   202,
     203,   204,    -1,   206,   207,   208,   209,   210,   211,   212,
      -1,   214,   215,   216,   217,   218,   219,   220,   221,   222,
     223,    -1,   225,    -1,   227,   228,   229,   230,   231,   232,
     233,   234,   235,   236,   237,   238,    -1,    -1,   241,   242,
     243,   244,    -1,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   294,    -1,   296,   297,    -1,    -1,   300,   301,   302,
      -1,    -1,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
     323,   324,    -1,    -1,    -1,    -1,   329,   330,   331,   332,
     333,   334,   335,   336,   337,   338,    -1,   340,   341,   342,
     343,   344,   345,   346,   347,    -1,   349,   350,   351,   352,
     353,   354,   355,   356,    -1,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,   371,    -1,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,   385,   386,   387,   388,   389,   390,   391,   392,
      -1,    -1,   395,   396,   397,   398,   399,   400,   401,   402,
     403,   404,    -1,   406,   407,   408,   409,   410,    -1,   412,
     413,   414,   415,   416,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,   427,    -1,    -1,   430,   431,    -1,
     433,   434,   435,   436,   437,   438,   439,    -1,   441,   442,
     443,    -1,   445,    -1,   447,   448,   449,   450,   451,   452,
     453,   454,   455,   456,   457,   458,   459,   460,    -1,    -1,
     463,   464,   465,    -1,   467,   468,   469,   470,    -1,   472,
     473,   474,   475,   476,   477,   478,    -1,   480,   481,   482,
     483,   484,   485,   486,   487,   488,   489,   490,    -1,    -1,
     493,    -1,    -1,   496,   497,   498,   499,   500,   501,   502,
     503,   504,   505,   506,   507,   508,   509,   510,   511,   512,
     513,   514,   515,   516,   517,    -1,    -1,    -1,    -1,    -1,
      -1,   524,   525,   526,    -1,    -1,    -1,    -1,   531,    -1,
     533,    -1,    -1,    -1,    -1,    -1,   539,   540,    -1,    -1,
      -1,    -1,   545,   546,     3,     4,     5,     6,     7,     8,
       9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    22,    23,    24,    25,    26,    27,    28,
      29,    30,    -1,    32,    33,    34,    -1,    -1,    -1,    -1,
      -1,    40,    41,    -1,    -1,    44,    45,    46,    -1,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    58,
      59,    -1,    61,    62,    63,    64,    65,    66,    67,    68,
      69,    70,    71,    72,    73,    74,    75,    -1,    77,    78,
      79,    80,    81,    -1,    83,    -1,    85,    86,    87,    88,
      89,    90,    91,    92,    93,    94,    -1,    96,    97,    98,
      99,   100,   101,    -1,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
     119,   120,    -1,   122,   123,   124,   125,   126,   127,    -1,
      -1,   130,   131,   132,   133,   134,    -1,    -1,   137,   138,
     139,   140,   141,   142,   143,    -1,   145,   146,   147,    -1,
     149,   150,   151,    -1,   153,   154,   155,   156,   157,   158,
     159,   160,   161,   162,   163,   164,   165,    -1,   167,   168,
     169,   170,    -1,   172,    -1,   174,   175,   176,   177,   178,
     179,   180,   181,   182,    -1,   184,   185,    -1,    -1,   188,
     189,   190,   191,    -1,   193,   194,   195,   196,   197,   198,
     199,   200,   201,   202,   203,   204,    -1,   206,   207,   208,
     209,   210,   211,   212,    -1,   214,   215,   216,   217,   218,
     219,   220,   221,   222,   223,    -1,   225,    -1,   227,   228,
     229,   230,   231,   232,   233,   234,   235,   236,   237,   238,
      -1,    -1,   241,   242,   243,   244,    -1,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   294,    -1,   296,   297,    -1,
      -1,   300,   301,   302,    -1,    -1,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,    -1,    -1,    -1,    -1,
     329,   330,   331,   332,   333,   334,   335,   336,   337,   338,
      -1,   340,   341,   342,   343,   344,   345,   346,   347,    -1,
     349,   350,   351,   352,   353,   354,   355,   356,    -1,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,   371,    -1,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,   385,   386,   387,   388,
     389,   390,   391,   392,    -1,    -1,   395,   396,   397,   398,
     399,   400,   401,   402,   403,   404,    -1,   406,   407,   408,
     409,   410,    -1,   412,   413,   414,   415,   416,   417,   418,
     419,   420,   421,   422,   423,   424,   425,   426,   427,    -1,
      -1,   430,   431,    -1,   433,   434,   435,   436,   437,   438,
     439,    -1,   441,   442,   443,    -1,   445,    -1,   447,   448,
     449,   450,   451,   452,   453,   454,   455,   456,   457,   458,
     459,   460,    -1,    -1,   463,   464,   465,    -1,   467,   468,
     469,   470,    -1,   472,   473,   474,   475,   476,   477,   478,
      -1,   480,   481,   482,   483,   484,   485,   486,   487,   488,
     489,   490,    -1,    -1,   493,    -1,    -1,   496,   497,   498,
     499,   500,   501,   502,   503,   504,   505,   506,   507,   508,
     509,   510,   511,   512,   513,   514,   515,   516,   517,    -1,
      -1,    -1,    -1,    -1,    -1,   524,   525,   526,    -1,    -1,
      -1,    -1,   531,    -1,   533,    -1,    -1,    -1,    -1,    -1,
     539,   540,    -1,    -1,    -1,    -1,   545,   546,     3,     4,
       5,     6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    -1,    32,    33,    34,
      -1,    -1,    -1,    -1,    -1,    40,    41,    -1,    -1,    44,
      45,    46,    -1,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    -1,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    -1,    77,    78,    79,    80,    81,    -1,    83,    -1,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      -1,    96,    97,    98,    99,   100,   101,    -1,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,    -1,   122,   123,   124,
     125,   126,   127,    -1,    -1,   130,   131,   132,   133,   134,
      -1,    -1,   137,   138,   139,   140,   141,   142,   143,    -1,
     145,   146,   147,    -1,   149,   150,   151,    -1,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,   163,   164,
     165,    -1,   167,   168,   169,   170,    -1,   172,    -1,   174,
     175,    -1,   177,   178,   179,   180,   181,   182,    -1,   184,
     185,    -1,    -1,   188,   189,   190,   191,    -1,   193,   194,
     195,   196,   197,   198,   199,   200,   201,   202,   203,   204,
      -1,   206,   207,   208,   209,   210,   211,   212,    -1,   214,
     215,   216,   217,   218,   219,   220,   221,   222,   223,    -1,
     225,    -1,   227,   228,   229,   230,   231,   232,   233,   234,
     235,   236,   237,   238,    -1,    -1,   241,   242,   243,   244,
      -1,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
      -1,   296,   297,    -1,    -1,   300,   301,   302,    -1,    -1,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
      -1,    -1,    -1,    -1,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,    -1,   340,   341,   342,   343,   344,
     345,   346,   347,    -1,   349,   350,   351,   352,   353,   354,
     355,   356,    -1,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,    -1,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,    -1,    -1,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
      -1,   406,   407,   408,   409,   410,    -1,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,    -1,    -1,   430,   431,    -1,   433,   434,
     435,   436,   437,   438,   439,    -1,   441,   442,   443,    -1,
     445,    -1,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,    -1,    -1,   463,   464,
     465,    -1,   467,   468,   469,   470,    -1,   472,   473,   474,
     475,   476,   477,   478,    -1,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,    -1,    -1,   493,    -1,
      -1,   496,   497,   498,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,   517,    -1,    -1,    -1,    -1,    -1,    -1,   524,
     525,   526,    -1,    -1,    -1,    -1,   531,    -1,   533,   534,
      -1,    -1,    -1,    -1,   539,   540,    -1,    -1,    -1,    -1,
     545,   546,     3,     4,     5,     6,     7,     8,     9,    10,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    30,
      -1,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,    40,
      41,    -1,    -1,    44,    45,    46,    -1,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    58,    59,    -1,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    72,    73,    74,    75,    -1,    77,    78,    79,    80,
      81,    -1,    83,    -1,    85,    86,    87,    88,    89,    90,
      91,    92,    93,    94,    -1,    96,    97,    98,    99,   100,
     101,    -1,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
      -1,   122,   123,   124,   125,   126,   127,    -1,    -1,   130,
     131,   132,   133,   134,    -1,    -1,   137,   138,   139,   140,
     141,   142,   143,    -1,   145,   146,   147,    -1,   149,   150,
     151,    -1,   153,   154,   155,   156,   157,   158,   159,   160,
     161,   162,   163,   164,   165,    -1,   167,   168,   169,   170,
      -1,   172,    -1,   174,   175,    -1,   177,   178,   179,   180,
     181,   182,    -1,   184,   185,    -1,    -1,   188,   189,   190,
     191,    -1,   193,   194,   195,   196,   197,   198,   199,   200,
     201,   202,   203,   204,    -1,   206,   207,   208,   209,   210,
     211,   212,    -1,   214,   215,   216,   217,   218,   219,   220,
     221,   222,   223,    -1,   225,    -1,   227,   228,   229,   230,
     231,   232,   233,   234,   235,   236,   237,   238,    -1,    -1,
     241,   242,   243,   244,    -1,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,   287,   288,   289,   290,
     291,   292,   293,   294,    -1,   296,   297,    -1,    -1,   300,
     301,   302,    -1,    -1,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,   322,   323,   324,    -1,    -1,    -1,    -1,   329,   330,
     331,   332,   333,   334,   335,   336,   337,   338,    -1,   340,
     341,   342,   343,   344,   345,   346,   347,    -1,   349,   350,
     351,   352,   353,   354,   355,   356,    -1,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,    -1,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,   385,   386,   387,   388,   389,   390,
     391,   392,    -1,    -1,   395,   396,   397,   398,   399,   400,
     401,   402,   403,   404,    -1,   406,   407,   408,   409,   410,
      -1,   412,   413,   414,   415,   416,   417,   418,   419,   420,
     421,   422,   423,   424,   425,   426,   427,    -1,    -1,   430,
     431,    -1,   433,   434,   435,   436,   437,   438,   439,    -1,
     441,   442,   443,    -1,   445,    -1,   447,   448,   449,   450,
     451,   452,   453,   454,   455,   456,   457,   458,   459,   460,
      -1,    -1,   463,   464,   465,    -1,   467,   468,   469,   470,
      -1,   472,   473,   474,   475,   476,   477,   478,    -1,   480,
     481,   482,   483,   484,   485,   486,   487,   488,   489,   490,
      -1,    -1,   493,    -1,    -1,   496,   497,   498,   499,   500,
     501,   502,   503,   504,   505,   506,   507,   508,   509,   510,
     511,   512,   513,   514,   515,   516,   517,    -1,    -1,    -1,
      -1,    -1,    -1,   524,   525,   526,    -1,    -1,    -1,    -1,
     531,    -1,   533,    -1,    -1,    -1,    -1,    -1,   539,   540,
      -1,    -1,    -1,   544,   545,   546,     3,     4,     5,     6,
       7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    -1,    32,    33,    34,    -1,    -1,
      -1,    -1,    -1,    40,    41,    -1,    -1,    44,    45,    46,
      -1,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    58,    59,    -1,    61,    62,    63,    64,    65,    66,
      67,    68,    69,    70,    71,    72,    73,    74,    75,    -1,
      77,    78,    79,    80,    81,    -1,    83,    -1,    85,    86,
      87,    88,    89,    90,    91,    92,    93,    94,    -1,    96,
      97,    98,    99,   100,   101,    -1,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,   118,   119,   120,    -1,   122,   123,   124,   125,   126,
     127,    -1,    -1,   130,   131,   132,   133,   134,    -1,    -1,
     137,   138,   139,   140,   141,   142,   143,    -1,   145,   146,
     147,    -1,   149,   150,   151,    -1,   153,   154,   155,   156,
     157,   158,   159,   160,   161,   162,   163,   164,   165,    -1,
     167,   168,   169,   170,    -1,   172,    -1,   174,   175,    -1,
     177,   178,   179,   180,   181,   182,    -1,   184,   185,    -1,
      -1,   188,   189,   190,   191,    -1,   193,   194,   195,   196,
     197,   198,   199,   200,   201,   202,   203,   204,    -1,   206,
     207,   208,   209,   210,   211,   212,    -1,   214,   215,   216,
     217,   218,   219,   220,   221,   222,   223,    -1,   225,    -1,
     227,   228,   229,   230,   231,   232,   233,   234,   235,   236,
     237,   238,    -1,    -1,   241,   242,   243,   244,    -1,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     287,   288,   289,   290,   291,   292,   293,   294,    -1,   296,
     297,    -1,    -1,   300,   301,   302,    -1,    -1,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,   323,   324,    -1,    -1,
      -1,    -1,   329,   330,   331,   332,   333,   334,   335,   336,
     337,   338,    -1,   340,   341,   342,   343,   344,   345,   346,
     347,    -1,   349,   350,   351,   352,   353,   354,   355,   356,
      -1,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,   370,   371,    -1,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,   386,
     387,   388,   389,   390,   391,   392,    -1,    -1,   395,   396,
     397,   398,   399,   400,   401,   402,   403,   404,    -1,   406,
     407,   408,   409,   410,    -1,   412,   413,   414,   415,   416,
     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
     427,    -1,    -1,   430,   431,   432,   433,   434,   435,   436,
     437,   438,   439,    -1,   441,   442,   443,    -1,   445,    -1,
     447,   448,   449,   450,   451,   452,   453,   454,   455,   456,
     457,   458,   459,   460,    -1,    -1,   463,   464,   465,    -1,
     467,   468,   469,   470,    -1,   472,   473,   474,   475,   476,
     477,   478,    -1,   480,   481,   482,   483,   484,   485,   486,
     487,   488,   489,   490,    -1,    -1,   493,    -1,    -1,   496,
     497,   498,   499,   500,   501,   502,   503,   504,   505,   506,
     507,   508,   509,   510,   511,   512,   513,   514,   515,   516,
     517,    -1,    -1,    -1,    -1,    -1,    -1,   524,   525,   526,
      -1,    -1,    -1,    -1,   531,    -1,   533,    -1,    -1,    -1,
      -1,    -1,   539,   540,    -1,    -1,    -1,    -1,   545,   546,
       3,     4,     5,     6,     7,     8,     9,    10,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,
      23,    24,    25,    26,    27,    28,    29,    30,    -1,    32,
      33,    34,    -1,    -1,    -1,    -1,    -1,    40,    41,    -1,
      -1,    44,    45,    46,    -1,    48,    49,    50,    51,    52,
      53,    54,    55,    56,    57,    58,    59,    -1,    61,    62,
      63,    64,    65,    66,    67,    68,    69,    70,    71,    72,
      73,    74,    75,    -1,    77,    78,    79,    80,    81,    -1,
      83,    -1,    85,    86,    87,    88,    89,    90,    91,    92,
      93,    94,    -1,    96,    97,    98,    99,   100,   101,    -1,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,   117,   118,   119,   120,    -1,   122,
     123,   124,   125,   126,   127,    -1,    -1,   130,   131,   132,
     133,   134,    -1,    -1,   137,   138,   139,   140,   141,   142,
     143,    -1,   145,   146,   147,    -1,   149,   150,   151,    -1,
     153,   154,   155,   156,   157,   158,   159,   160,   161,   162,
     163,   164,   165,    -1,   167,   168,   169,   170,    -1,   172,
      -1,   174,   175,    -1,   177,   178,   179,   180,   181,   182,
      -1,   184,   185,    -1,    -1,   188,   189,   190,   191,    -1,
     193,   194,   195,   196,   197,   198,   199,   200,   201,   202,
     203,   204,    -1,   206,   207,   208,   209,   210,   211,   212,
      -1,   214,   215,   216,   217,   218,   219,   220,   221,   222,
     223,    -1,   225,    -1,   227,   228,   229,   230,   231,   232,
     233,   234,   235,   236,   237,   238,    -1,    -1,   241,   242,
     243,   244,    -1,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   294,    -1,   296,   297,    -1,    -1,   300,   301,   302,
      -1,    -1,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
     323,   324,    -1,    -1,    -1,    -1,   329,   330,   331,   332,
     333,   334,   335,   336,   337,   338,    -1,   340,   341,   342,
     343,   344,   345,   346,   347,    -1,   349,   350,   351,   352,
     353,   354,   355,   356,    -1,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,   371,    -1,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,   385,   386,   387,   388,   389,   390,   391,   392,
      -1,    -1,   395,   396,   397,   398,   399,   400,   401,   402,
     403,   404,    -1,   406,   407,   408,   409,   410,    -1,   412,
     413,   414,   415,   416,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,   427,    -1,    -1,   430,   431,    -1,
     433,   434,   435,   436,   437,   438,   439,    -1,   441,   442,
     443,    -1,   445,    -1,   447,   448,   449,   450,   451,   452,
     453,   454,   455,   456,   457,   458,   459,   460,    -1,    -1,
     463,   464,   465,    -1,   467,   468,   469,   470,    -1,   472,
     473,   474,   475,   476,   477,   478,    -1,   480,   481,   482,
     483,   484,   485,   486,   487,   488,   489,   490,    -1,   492,
     493,    -1,    -1,   496,   497,   498,   499,   500,   501,   502,
     503,   504,   505,   506,   507,   508,   509,   510,   511,   512,
     513,   514,   515,   516,   517,    -1,    -1,    -1,    -1,    -1,
      -1,   524,   525,   526,    -1,    -1,    -1,    -1,   531,    -1,
     533,    -1,    -1,    -1,    -1,    -1,   539,   540,    -1,    -1,
      -1,    -1,   545,   546,     3,     4,     5,     6,     7,     8,
       9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    22,    23,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    33,    34,    -1,    -1,    -1,    -1,
      -1,    40,    41,    -1,    -1,    44,    45,    46,    -1,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    58,
      59,    -1,    61,    62,    63,    64,    65,    66,    67,    68,
      69,    70,    71,    72,    73,    74,    75,    -1,    77,    78,
      79,    80,    81,    -1,    83,    -1,    85,    86,    87,    88,
      89,    90,    91,    92,    93,    94,    -1,    96,    97,    98,
      99,   100,   101,    -1,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
     119,   120,    -1,   122,   123,   124,   125,   126,   127,    -1,
      -1,   130,   131,   132,   133,   134,    -1,    -1,   137,   138,
     139,   140,   141,   142,   143,    -1,   145,   146,   147,    -1,
     149,   150,   151,    -1,   153,   154,   155,   156,   157,   158,
     159,   160,   161,   162,   163,   164,   165,    -1,   167,   168,
     169,   170,    -1,   172,    -1,   174,   175,    -1,   177,   178,
     179,   180,   181,   182,    -1,   184,   185,    -1,    -1,   188,
     189,   190,   191,    -1,   193,   194,   195,   196,   197,   198,
     199,   200,   201,   202,   203,   204,    -1,   206,   207,   208,
     209,   210,   211,   212,    -1,   214,   215,   216,   217,   218,
     219,   220,   221,   222,   223,    -1,   225,    -1,   227,   228,
     229,   230,   231,   232,   233,   234,   235,   236,   237,   238,
      -1,    -1,   241,   242,   243,   244,    -1,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   294,    -1,   296,   297,    -1,
      -1,   300,   301,   302,    -1,    -1,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,    -1,    -1,    -1,    -1,
     329,   330,   331,   332,   333,   334,   335,   336,   337,   338,
      -1,   340,   341,   342,   343,   344,   345,   346,   347,    -1,
     349,   350,   351,   352,   353,   354,   355,   356,    -1,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,   371,    -1,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,   385,   386,   387,   388,
     389,   390,   391,   392,    -1,    -1,   395,   396,   397,   398,
     399,   400,   401,   402,   403,   404,    -1,   406,   407,   408,
     409,   410,    -1,   412,   413,   414,   415,   416,   417,   418,
     419,   420,   421,   422,   423,   424,   425,   426,   427,    -1,
      -1,   430,   431,    -1,   433,   434,   435,   436,   437,   438,
     439,    -1,   441,   442,   443,    -1,   445,    -1,   447,   448,
     449,   450,   451,   452,   453,   454,   455,   456,   457,   458,
     459,   460,    -1,    -1,   463,   464,   465,    -1,   467,   468,
     469,   470,    -1,   472,   473,   474,   475,   476,   477,   478,
      -1,   480,   481,   482,   483,   484,   485,   486,   487,   488,
     489,   490,    -1,    -1,   493,    -1,    -1,   496,   497,   498,
     499,   500,   501,   502,   503,   504,   505,   506,   507,   508,
     509,   510,   511,   512,   513,   514,   515,   516,   517,    -1,
      -1,    -1,    -1,    -1,    -1,   524,   525,   526,    -1,    -1,
      -1,    -1,   531,    -1,   533,    -1,    -1,    -1,    -1,    -1,
     539,   540,    -1,    -1,    -1,    -1,   545,   546,     3,     4,
       5,     6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    -1,    32,    33,    34,
      -1,    -1,    -1,    -1,    -1,    40,    41,    -1,    -1,    44,
      45,    46,    -1,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    -1,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    -1,    77,    78,    79,    80,    81,    -1,    83,    -1,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      -1,    96,    97,    98,    99,   100,   101,    -1,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,    -1,   122,   123,   124,
     125,   126,   127,    -1,    -1,   130,   131,   132,   133,   134,
      -1,    -1,   137,   138,   139,   140,   141,   142,   143,    -1,
     145,   146,   147,    -1,   149,   150,   151,    -1,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,   163,   164,
     165,    -1,   167,   168,   169,   170,    -1,   172,    -1,   174,
     175,    -1,   177,   178,   179,   180,   181,   182,    -1,   184,
     185,    -1,    -1,   188,   189,   190,   191,    -1,   193,   194,
     195,   196,   197,   198,   199,   200,   201,   202,   203,   204,
      -1,   206,   207,   208,   209,   210,   211,   212,    -1,   214,
     215,   216,   217,   218,   219,   220,   221,   222,   223,    -1,
     225,    -1,   227,   228,   229,   230,   231,   232,   233,   234,
     235,   236,   237,   238,    -1,    -1,   241,   242,   243,   244,
      -1,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
      -1,   296,   297,    -1,    -1,   300,   301,   302,    -1,    -1,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
      -1,    -1,    -1,    -1,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,    -1,   340,   341,   342,   343,   344,
     345,   346,   347,    -1,   349,   350,   351,   352,   353,   354,
     355,   356,    -1,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,    -1,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,    -1,    -1,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
      -1,   406,   407,   408,   409,   410,    -1,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,    -1,    -1,   430,   431,   432,   433,   434,
     435,   436,   437,   438,   439,    -1,   441,   442,   443,    -1,
     445,    -1,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,    -1,    -1,   463,   464,
     465,    -1,   467,   468,   469,   470,    -1,   472,   473,   474,
     475,   476,   477,   478,    -1,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,    -1,    -1,   493,    -1,
      -1,   496,   497,   498,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,   517,    -1,    -1,    -1,    -1,    -1,    -1,   524,
     525,   526,    -1,    -1,    -1,    -1,   531,    -1,   533,    -1,
      -1,    -1,    -1,    -1,   539,   540,    -1,    -1,    -1,    -1,
     545,   546,     3,     4,     5,     6,     7,     8,     9,    10,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    30,
      -1,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,    40,
      41,    -1,    -1,    44,    45,    46,    -1,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    58,    59,    -1,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    72,    73,    74,    75,    -1,    77,    78,    79,    80,
      81,    -1,    83,    -1,    85,    86,    87,    88,    89,    90,
      91,    92,    93,    94,    -1,    96,    97,    98,    99,   100,
     101,    -1,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
      -1,   122,   123,   124,   125,   126,   127,    -1,    -1,   130,
     131,   132,   133,   134,    -1,    -1,   137,   138,   139,   140,
     141,   142,   143,    -1,   145,   146,   147,    -1,   149,   150,
     151,    -1,   153,   154,   155,   156,   157,   158,   159,   160,
     161,   162,   163,   164,   165,    -1,   167,   168,   169,   170,
      -1,   172,    -1,   174,   175,    -1,   177,   178,   179,   180,
     181,   182,    -1,   184,   185,    -1,    -1,   188,   189,   190,
     191,    -1,   193,   194,   195,   196,   197,   198,   199,   200,
     201,   202,   203,   204,    -1,   206,   207,   208,   209,   210,
     211,   212,    -1,   214,   215,   216,   217,   218,   219,   220,
     221,   222,   223,    -1,   225,    -1,   227,   228,   229,   230,
     231,   232,   233,   234,   235,   236,   237,   238,    -1,    -1,
     241,   242,   243,   244,    -1,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,   287,   288,   289,   290,
     291,   292,   293,   294,    -1,   296,   297,    -1,    -1,   300,
     301,   302,    -1,    -1,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,   322,   323,   324,    -1,    -1,    -1,    -1,   329,   330,
     331,   332,   333,   334,   335,   336,   337,   338,    -1,   340,
     341,   342,   343,   344,   345,   346,   347,    -1,   349,   350,
     351,   352,   353,   354,   355,   356,    -1,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,    -1,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,   385,   386,   387,   388,   389,   390,
     391,   392,    -1,    -1,   395,   396,   397,   398,   399,   400,
     401,   402,   403,   404,    -1,   406,   407,   408,   409,   410,
      -1,   412,   413,   414,   415,   416,   417,   418,   419,   420,
     421,   422,   423,   424,   425,   426,   427,    -1,    -1,   430,
     431,    -1,   433,   434,   435,   436,   437,   438,   439,    -1,
     441,   442,   443,    -1,   445,    -1,   447,   448,   449,   450,
     451,   452,   453,   454,   455,   456,   457,   458,   459,   460,
      -1,    -1,   463,   464,   465,    -1,   467,   468,   469,   470,
      -1,   472,   473,   474,   475,   476,   477,   478,    -1,   480,
     481,   482,   483,   484,   485,   486,   487,   488,   489,   490,
      -1,    -1,   493,    -1,    -1,   496,   497,   498,   499,   500,
     501,   502,   503,   504,   505,   506,   507,   508,   509,   510,
     511,   512,   513,   514,   515,   516,   517,    -1,    -1,    -1,
      -1,    -1,    -1,   524,   525,   526,    -1,    -1,    -1,    -1,
     531,    -1,   533,    -1,    -1,    -1,    -1,    -1,   539,   540,
      -1,    -1,    -1,   544,   545,   546,     3,     4,     5,     6,
       7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    -1,    32,    33,    34,    -1,    -1,
      -1,    -1,    -1,    40,    41,    -1,    -1,    44,    45,    46,
      -1,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    58,    59,    -1,    61,    62,    63,    64,    65,    66,
      67,    68,    69,    70,    71,    72,    73,    74,    75,    -1,
      77,    78,    79,    80,    81,    -1,    83,    -1,    85,    86,
      87,    88,    89,    90,    91,    92,    93,    94,    -1,    96,
      97,    98,    99,   100,   101,    -1,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,   118,   119,   120,    -1,   122,   123,   124,   125,   126,
     127,    -1,    -1,   130,   131,   132,   133,   134,    -1,    -1,
     137,   138,   139,   140,   141,   142,   143,    -1,   145,   146,
     147,    -1,   149,   150,   151,    -1,   153,   154,   155,   156,
     157,   158,   159,   160,   161,   162,   163,   164,   165,    -1,
     167,   168,   169,   170,    -1,   172,    -1,   174,   175,    -1,
     177,   178,   179,   180,   181,   182,    -1,   184,   185,    -1,
      -1,   188,   189,   190,   191,    -1,   193,   194,   195,   196,
     197,   198,   199,   200,   201,   202,   203,   204,    -1,   206,
     207,   208,   209,   210,   211,   212,    -1,   214,   215,   216,
     217,   218,   219,   220,   221,   222,   223,    -1,   225,    -1,
     227,   228,   229,   230,   231,   232,   233,   234,   235,   236,
     237,   238,    -1,    -1,   241,   242,   243,   244,    -1,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     287,   288,   289,   290,   291,   292,   293,   294,    -1,   296,
     297,    -1,    -1,   300,   301,   302,    -1,    -1,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,   323,   324,    -1,    -1,
      -1,    -1,   329,   330,   331,   332,   333,   334,   335,   336,
     337,   338,    -1,   340,   341,   342,   343,   344,   345,   346,
     347,    -1,   349,   350,   351,   352,   353,   354,   355,   356,
      -1,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,   370,   371,    -1,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,   386,
     387,   388,   389,   390,   391,   392,    -1,    -1,   395,   396,
     397,   398,   399,   400,   401,   402,   403,   404,    -1,   406,
     407,   408,   409,   410,    -1,   412,   413,   414,   415,   416,
     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
     427,    -1,    -1,   430,   431,   432,   433,   434,   435,   436,
     437,   438,   439,    -1,   441,   442,   443,    -1,   445,    -1,
     447,   448,   449,   450,   451,   452,   453,   454,   455,   456,
     457,   458,   459,   460,    -1,    -1,   463,   464,   465,    -1,
     467,   468,   469,   470,    -1,   472,   473,   474,   475,   476,
     477,   478,    -1,   480,   481,   482,   483,   484,   485,   486,
     487,   488,   489,   490,    -1,    -1,   493,    -1,    -1,   496,
     497,   498,   499,   500,   501,   502,   503,   504,   505,   506,
     507,   508,   509,   510,   511,   512,   513,   514,   515,   516,
     517,    -1,    -1,    -1,    -1,    -1,    -1,   524,   525,   526,
      -1,    -1,    -1,    -1,   531,    -1,   533,    -1,    -1,    -1,
      -1,    -1,   539,   540,    -1,    -1,    -1,    -1,   545,   546,
       3,     4,     5,     6,     7,     8,     9,    10,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,
      23,    24,    25,    26,    27,    28,    29,    30,    -1,    32,
      33,    34,    -1,    -1,    -1,    -1,    -1,    40,    41,    -1,
      -1,    44,    45,    46,    -1,    48,    49,    50,    51,    52,
      53,    54,    55,    56,    57,    58,    59,    -1,    61,    62,
      63,    64,    65,    66,    67,    68,    69,    70,    71,    72,
      73,    74,    75,    -1,    77,    78,    79,    80,    81,    -1,
      83,    -1,    85,    86,    87,    88,    89,    90,    91,    92,
      93,    94,    -1,    96,    97,    98,    99,   100,   101,    -1,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,   117,   118,   119,   120,    -1,   122,
     123,   124,   125,   126,   127,    -1,    -1,   130,   131,   132,
     133,   134,    -1,    -1,   137,   138,   139,   140,   141,   142,
     143,    -1,   145,   146,   147,    -1,   149,   150,   151,    -1,
     153,   154,   155,   156,   157,   158,   159,   160,   161,   162,
     163,   164,   165,    -1,   167,   168,   169,   170,    -1,   172,
      -1,   174,   175,    -1,   177,   178,   179,   180,   181,   182,
      -1,   184,   185,    -1,    -1,   188,   189,   190,   191,    -1,
     193,   194,   195,   196,   197,   198,   199,   200,   201,   202,
     203,   204,    -1,   206,   207,   208,   209,   210,   211,   212,
      -1,   214,   215,   216,   217,   218,   219,   220,   221,   222,
     223,    -1,   225,    -1,   227,   228,   229,   230,   231,   232,
     233,   234,   235,   236,   237,   238,    -1,    -1,   241,   242,
     243,   244,    -1,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   294,    -1,   296,   297,    -1,    -1,   300,   301,   302,
      -1,    -1,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
     323,   324,    -1,    -1,    -1,    -1,   329,   330,   331,   332,
     333,   334,   335,   336,   337,   338,    -1,   340,   341,   342,
     343,   344,   345,   346,   347,    -1,   349,   350,   351,   352,
     353,   354,   355,   356,    -1,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,   371,    -1,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,   385,   386,   387,   388,   389,   390,   391,   392,
      -1,    -1,   395,   396,   397,   398,   399,   400,   401,   402,
     403,   404,    -1,   406,   407,   408,   409,   410,    -1,   412,
     413,   414,   415,   416,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,   427,    -1,    -1,   430,   431,    -1,
     433,   434,   435,   436,   437,   438,   439,    -1,   441,   442,
     443,    -1,   445,    -1,   447,   448,   449,   450,   451,   452,
     453,   454,   455,   456,   457,   458,   459,   460,    -1,    -1,
     463,   464,   465,    -1,   467,   468,   469,   470,    -1,   472,
     473,   474,   475,   476,   477,   478,    -1,   480,   481,   482,
     483,   484,   485,   486,   487,   488,   489,   490,    -1,    -1,
     493,    -1,    -1,   496,   497,   498,   499,   500,   501,   502,
     503,   504,   505,   506,   507,   508,   509,   510,   511,   512,
     513,   514,   515,   516,   517,    -1,    -1,    -1,    -1,    -1,
      -1,   524,   525,   526,    -1,    -1,    -1,    -1,   531,    -1,
     533,    -1,    -1,    -1,    -1,    -1,   539,   540,    -1,    -1,
      -1,    -1,   545,   546,     3,     4,     5,     6,     7,     8,
       9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    22,    23,    24,    25,    26,    27,    28,
      29,    30,    -1,    32,    33,    34,    -1,    -1,    -1,    -1,
      -1,    40,    41,    -1,    -1,    44,    45,    46,    -1,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    58,
      59,    -1,    61,    62,    63,    64,    65,    66,    67,    68,
      69,    70,    71,    72,    73,    74,    75,    -1,    77,    78,
      79,    80,    81,    -1,    83,    -1,    85,    86,    87,    88,
      89,    90,    91,    92,    93,    94,    -1,    96,    97,    98,
      99,   100,   101,    -1,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
     119,   120,    -1,   122,   123,   124,   125,   126,   127,    -1,
      -1,   130,   131,   132,   133,   134,    -1,    -1,   137,   138,
     139,   140,   141,   142,   143,    -1,   145,   146,   147,    -1,
     149,   150,   151,    -1,   153,   154,   155,   156,   157,   158,
     159,   160,   161,   162,   163,   164,   165,    -1,   167,   168,
     169,   170,    -1,   172,    -1,   174,   175,    -1,   177,   178,
     179,   180,   181,   182,    -1,   184,   185,    -1,    -1,   188,
     189,   190,   191,    -1,   193,   194,   195,   196,   197,   198,
     199,   200,   201,   202,   203,   204,    -1,   206,   207,   208,
     209,   210,   211,   212,    -1,   214,   215,   216,   217,   218,
     219,   220,   221,   222,   223,    -1,   225,    -1,   227,   228,
     229,   230,   231,   232,   233,   234,   235,   236,   237,   238,
      -1,    -1,   241,   242,   243,   244,    -1,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   294,    -1,   296,   297,    -1,
      -1,   300,   301,   302,    -1,    -1,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,    -1,    -1,    -1,    -1,
     329,   330,   331,   332,   333,   334,   335,   336,   337,   338,
      -1,   340,   341,   342,   343,   344,   345,   346,   347,    -1,
     349,   350,   351,   352,   353,   354,   355,   356,    -1,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,   371,    -1,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,   385,   386,   387,   388,
     389,   390,   391,   392,    -1,    -1,   395,   396,   397,   398,
     399,   400,   401,   402,   403,   404,    -1,   406,   407,   408,
     409,   410,    -1,   412,   413,   414,   415,   416,   417,   418,
     419,   420,   421,   422,   423,   424,   425,   426,   427,    -1,
      -1,   430,   431,    -1,   433,   434,   435,   436,   437,   438,
     439,    -1,   441,   442,   443,    -1,   445,    -1,   447,   448,
     449,   450,   451,   452,   453,   454,   455,   456,   457,   458,
     459,   460,    -1,    -1,   463,   464,   465,    -1,   467,   468,
     469,   470,    -1,   472,   473,   474,   475,   476,   477,   478,
      -1,   480,   481,   482,   483,   484,   485,   486,   487,   488,
     489,   490,    -1,    -1,   493,    -1,    -1,   496,   497,   498,
     499,   500,   501,   502,   503,   504,   505,   506,   507,   508,
     509,   510,   511,   512,   513,   514,   515,   516,   517,    -1,
      -1,    -1,    -1,    -1,    -1,   524,   525,   526,    -1,    -1,
      -1,    -1,   531,    -1,   533,    -1,    -1,    -1,    -1,    -1,
     539,   540,    -1,    -1,    -1,    -1,   545,   546,     3,     4,
       5,     6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    -1,    32,    33,    34,
      -1,    -1,    -1,    -1,    -1,    40,    41,    -1,    -1,    44,
      45,    46,    -1,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    -1,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    -1,    77,    78,    79,    80,    81,    -1,    83,    -1,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      -1,    96,    97,    98,    99,   100,   101,    -1,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,    -1,   122,   123,   124,
     125,   126,   127,    -1,    -1,   130,   131,   132,   133,   134,
      -1,    -1,   137,   138,   139,   140,   141,   142,   143,    -1,
     145,   146,   147,    -1,   149,   150,   151,    -1,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,   163,   164,
     165,    -1,   167,   168,   169,   170,    -1,   172,    -1,   174,
     175,    -1,   177,   178,   179,   180,   181,   182,    -1,   184,
     185,    -1,    -1,   188,   189,   190,   191,    -1,   193,   194,
     195,   196,   197,   198,   199,   200,   201,   202,   203,   204,
      -1,   206,   207,   208,   209,   210,   211,   212,    -1,   214,
     215,   216,   217,   218,   219,   220,   221,   222,   223,    -1,
     225,    -1,   227,   228,   229,   230,   231,   232,   233,   234,
     235,   236,   237,   238,    -1,    -1,   241,   242,   243,   244,
      -1,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
      -1,   296,   297,    -1,    -1,   300,   301,   302,    -1,    -1,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
      -1,    -1,    -1,    -1,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,    -1,   340,   341,   342,   343,   344,
     345,   346,   347,    -1,   349,   350,   351,   352,   353,   354,
     355,   356,    -1,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,    -1,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,    -1,    -1,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
      -1,   406,   407,   408,   409,   410,    -1,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,    -1,    -1,   430,   431,    -1,   433,   434,
     435,   436,   437,   438,   439,    -1,   441,   442,   443,    -1,
     445,    -1,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,    -1,    -1,   463,   464,
     465,    -1,   467,   468,   469,   470,    -1,   472,   473,   474,
     475,   476,   477,   478,    -1,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,    -1,    -1,   493,    -1,
      -1,   496,   497,   498,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,   517,    -1,    -1,    -1,    -1,    -1,    -1,   524,
     525,   526,    -1,    -1,    -1,    -1,   531,    -1,   533,    -1,
      -1,    -1,    -1,    -1,   539,   540,    -1,    -1,    -1,    -1,
     545,   546,     3,     4,     5,     6,     7,     8,     9,    10,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    30,
      -1,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,    40,
      41,    -1,    -1,    44,    45,    46,    -1,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    58,    59,    -1,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    72,    73,    74,    75,    -1,    77,    78,    79,    80,
      81,    -1,    83,    -1,    85,    86,    87,    88,    89,    90,
      91,    92,    93,    94,    -1,    96,    97,    98,    99,   100,
     101,    -1,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
      -1,   122,   123,   124,   125,   126,   127,    -1,    -1,   130,
     131,   132,   133,   134,    -1,    -1,   137,   138,   139,   140,
     141,   142,   143,    -1,   145,   146,   147,    -1,   149,   150,
     151,    -1,   153,   154,   155,   156,   157,   158,   159,   160,
     161,   162,   163,   164,   165,    -1,   167,   168,   169,   170,
      -1,   172,    -1,   174,   175,    -1,   177,   178,   179,   180,
     181,   182,    -1,   184,   185,    -1,    -1,   188,   189,   190,
     191,    -1,   193,   194,   195,   196,   197,   198,   199,   200,
     201,   202,   203,   204,    -1,   206,   207,   208,   209,   210,
     211,   212,    -1,   214,   215,   216,   217,   218,   219,   220,
     221,   222,   223,    -1,   225,    -1,   227,   228,   229,   230,
     231,   232,   233,   234,   235,   236,   237,   238,    -1,    -1,
     241,   242,   243,   244,    -1,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,   287,   288,   289,   290,
     291,   292,   293,   294,    -1,   296,   297,    -1,    -1,   300,
     301,   302,    -1,    -1,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,   322,   323,   324,    -1,    -1,    -1,    -1,   329,   330,
     331,   332,   333,   334,   335,   336,   337,   338,    -1,   340,
     341,   342,   343,   344,   345,   346,   347,    -1,   349,   350,
     351,   352,   353,   354,   355,   356,    -1,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,    -1,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,   385,   386,   387,   388,   389,   390,
     391,   392,    -1,    -1,   395,   396,   397,   398,   399,   400,
     401,   402,   403,   404,    -1,   406,   407,   408,   409,   410,
      -1,   412,   413,   414,   415,   416,   417,   418,   419,   420,
     421,   422,   423,   424,   425,   426,   427,    -1,    -1,   430,
     431,    -1,   433,   434,   435,   436,   437,   438,   439,    -1,
     441,   442,   443,    -1,   445,    -1,   447,   448,   449,   450,
     451,   452,   453,   454,   455,   456,   457,   458,   459,   460,
      -1,    -1,   463,   464,   465,    -1,   467,   468,   469,   470,
      -1,   472,   473,   474,   475,   476,   477,   478,    -1,   480,
     481,   482,   483,   484,   485,   486,   487,   488,   489,   490,
      -1,    -1,   493,    -1,    -1,   496,   497,   498,   499,   500,
     501,   502,   503,   504,   505,   506,   507,   508,   509,   510,
     511,   512,   513,   514,   515,   516,   517,    -1,    -1,    -1,
      -1,    -1,    -1,   524,   525,   526,    -1,    -1,    -1,    -1,
     531,    -1,   533,    -1,    -1,    -1,    -1,    -1,   539,   540,
      -1,    -1,    -1,    -1,   545,   546,     3,     4,     5,     6,
       7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    -1,    32,    33,    34,    -1,    -1,
      -1,    -1,    -1,    40,    41,    -1,    -1,    44,    45,    46,
      -1,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    58,    59,    -1,    61,    62,    63,    64,    65,    66,
      67,    68,    69,    70,    71,    72,    73,    74,    75,    -1,
      77,    78,    79,    80,    81,    -1,    83,    -1,    85,    86,
      87,    88,    89,    90,    91,    92,    93,    94,    -1,    96,
      97,    98,    99,   100,   101,    -1,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,   118,   119,   120,    -1,   122,   123,   124,   125,   126,
     127,    -1,    -1,   130,   131,   132,   133,   134,    -1,    -1,
     137,   138,   139,   140,   141,   142,   143,    -1,   145,   146,
     147,    -1,   149,   150,   151,    -1,   153,   154,   155,   156,
     157,   158,   159,   160,   161,   162,   163,   164,   165,    -1,
     167,   168,   169,   170,    -1,   172,    -1,   174,   175,    -1,
     177,   178,   179,   180,   181,   182,    -1,   184,   185,    -1,
      -1,   188,   189,   190,   191,    -1,   193,   194,   195,   196,
     197,   198,   199,   200,   201,   202,   203,   204,    -1,   206,
     207,   208,   209,   210,   211,   212,    -1,   214,   215,   216,
     217,   218,   219,   220,   221,   222,   223,    -1,   225,    -1,
     227,   228,   229,   230,   231,   232,   233,   234,   235,   236,
     237,   238,    -1,    -1,   241,   242,   243,   244,    -1,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     287,   288,   289,   290,   291,   292,   293,   294,    -1,   296,
     297,    -1,    -1,   300,   301,   302,    -1,    -1,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,   323,   324,    -1,    -1,
      -1,    -1,   329,   330,   331,   332,   333,   334,   335,   336,
     337,   338,    -1,   340,   341,   342,   343,   344,   345,   346,
     347,    -1,   349,   350,   351,   352,   353,   354,   355,   356,
      -1,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,   370,   371,    -1,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,   386,
     387,   388,   389,   390,   391,   392,    -1,    -1,   395,   396,
     397,   398,   399,   400,   401,   402,   403,   404,    -1,   406,
     407,   408,   409,   410,    -1,   412,   413,   414,   415,   416,
     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
     427,    -1,    -1,   430,   431,    -1,   433,   434,   435,   436,
     437,   438,   439,    -1,   441,   442,   443,    -1,   445,    -1,
     447,   448,   449,   450,   451,   452,   453,   454,   455,   456,
     457,   458,   459,   460,    -1,    -1,   463,   464,   465,    -1,
     467,   468,   469,   470,    -1,   472,   473,   474,   475,   476,
     477,   478,    -1,   480,   481,   482,   483,   484,   485,   486,
     487,   488,   489,   490,    -1,    -1,   493,    -1,    -1,   496,
     497,   498,   499,   500,   501,   502,   503,   504,   505,   506,
     507,   508,   509,   510,   511,   512,   513,   514,   515,   516,
     517,    -1,    -1,    -1,    -1,    -1,    -1,   524,   525,   526,
      -1,    -1,    -1,    -1,   531,    -1,   533,    -1,    -1,    -1,
      -1,    -1,   539,   540,    -1,    -1,    -1,    -1,   545,   546,
       3,     4,     5,     6,     7,     8,     9,    10,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,
      23,    24,    25,    26,    27,    28,    29,    30,    -1,    32,
      33,    34,    -1,    -1,    -1,    -1,    -1,    40,    41,    -1,
      -1,    44,    45,    46,    -1,    48,    49,    50,    51,    52,
      53,    54,    55,    56,    57,    58,    59,    -1,    61,    62,
      63,    64,    65,    66,    67,    68,    69,    70,    71,    72,
      73,    74,    75,    -1,    77,    78,    79,    80,    81,    -1,
      83,    -1,    85,    86,    87,    88,    89,    90,    91,    92,
      93,    94,    -1,    96,    97,    98,    99,   100,   101,    -1,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,   117,   118,   119,   120,    -1,   122,
     123,   124,   125,   126,   127,    -1,    -1,   130,   131,   132,
     133,   134,    -1,    -1,   137,   138,   139,   140,   141,   142,
     143,    -1,   145,   146,   147,    -1,   149,   150,   151,    -1,
     153,   154,   155,   156,   157,   158,   159,   160,   161,   162,
     163,   164,   165,    -1,   167,   168,   169,   170,    -1,   172,
      -1,   174,   175,    -1,   177,   178,   179,   180,   181,   182,
      -1,   184,   185,    -1,    -1,   188,   189,   190,   191,    -1,
     193,   194,   195,   196,   197,   198,   199,   200,   201,   202,
     203,   204,    -1,   206,   207,   208,   209,   210,   211,   212,
      -1,   214,   215,   216,   217,   218,   219,   220,   221,   222,
     223,    -1,   225,    -1,   227,   228,   229,   230,   231,   232,
     233,   234,   235,   236,   237,   238,    -1,    -1,   241,   242,
     243,   244,    -1,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   294,    -1,   296,   297,    -1,    -1,   300,   301,   302,
      -1,    -1,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
     323,   324,    -1,    -1,    -1,    -1,   329,   330,   331,   332,
     333,   334,   335,   336,   337,   338,    -1,   340,   341,   342,
     343,   344,   345,   346,   347,    -1,   349,   350,   351,   352,
     353,   354,   355,   356,    -1,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,   371,    -1,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,   385,   386,   387,   388,   389,   390,   391,   392,
      -1,    -1,   395,   396,   397,   398,   399,   400,   401,   402,
     403,   404,    -1,   406,   407,   408,   409,   410,    -1,   412,
     413,   414,   415,   416,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,   427,    -1,    -1,   430,   431,    -1,
     433,   434,   435,   436,   437,   438,   439,    -1,   441,   442,
     443,    -1,   445,    -1,   447,   448,   449,   450,   451,   452,
     453,   454,   455,   456,   457,   458,   459,   460,    -1,    -1,
     463,   464,   465,    -1,   467,   468,   469,   470,    -1,   472,
     473,   474,   475,   476,   477,   478,    -1,   480,   481,   482,
     483,   484,   485,   486,   487,   488,   489,   490,    -1,    -1,
     493,    -1,    -1,   496,   497,   498,   499,   500,   501,   502,
     503,   504,   505,   506,   507,   508,   509,   510,   511,   512,
     513,   514,   515,   516,   517,    -1,    -1,    -1,    -1,    -1,
      -1,   524,   525,   526,    -1,    -1,    -1,    -1,   531,    -1,
     533,    -1,    -1,    -1,    -1,    -1,   539,   540,    -1,    -1,
      -1,    -1,   545,   546,     3,     4,     5,     6,     7,     8,
       9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    22,    23,    24,    25,    26,    27,    28,
      29,    30,    -1,    32,    33,    34,    -1,    -1,    -1,    -1,
      -1,    40,    41,    -1,    -1,    44,    45,    46,    -1,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    58,
      59,    -1,    61,    62,    63,    64,    65,    66,    67,    68,
      69,    70,    71,    72,    73,    74,    75,    -1,    77,    78,
      79,    80,    81,    -1,    83,    -1,    85,    86,    87,    88,
      89,    90,    91,    92,    93,    94,    -1,    96,    97,    98,
      99,   100,   101,    -1,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
     119,   120,    -1,   122,   123,   124,   125,   126,   127,    -1,
      -1,   130,   131,   132,   133,   134,    -1,    -1,   137,   138,
     139,   140,   141,   142,   143,    -1,   145,   146,   147,    -1,
     149,   150,   151,    -1,   153,   154,   155,   156,   157,   158,
     159,   160,   161,   162,   163,   164,   165,    -1,   167,   168,
     169,   170,    -1,   172,    -1,   174,   175,    -1,   177,   178,
     179,   180,   181,   182,    -1,   184,   185,    -1,    -1,   188,
     189,   190,   191,    -1,   193,   194,   195,   196,   197,   198,
     199,   200,   201,   202,   203,   204,    -1,   206,   207,   208,
     209,   210,   211,   212,    -1,   214,   215,   216,   217,   218,
     219,   220,   221,   222,   223,    -1,   225,    -1,   227,   228,
     229,   230,   231,   232,   233,   234,   235,   236,   237,   238,
      -1,    -1,   241,   242,   243,   244,    -1,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   294,    -1,   296,   297,    -1,
      -1,   300,   301,   302,    -1,    -1,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,    -1,    -1,    -1,    -1,
     329,   330,   331,   332,   333,   334,   335,   336,   337,   338,
      -1,   340,   341,   342,   343,   344,   345,   346,   347,    -1,
     349,   350,   351,   352,   353,   354,   355,   356,    -1,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,   371,    -1,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,   385,   386,   387,   388,
     389,   390,   391,   392,    -1,    -1,   395,   396,   397,   398,
     399,   400,   401,   402,   403,   404,    -1,   406,   407,   408,
     409,   410,    -1,   412,   413,   414,   415,   416,   417,   418,
     419,   420,   421,   422,   423,   424,   425,   426,   427,    -1,
      -1,   430,   431,    -1,   433,   434,   435,   436,   437,   438,
     439,    -1,   441,   442,   443,    -1,   445,    -1,   447,   448,
     449,   450,   451,   452,   453,   454,   455,   456,   457,   458,
     459,   460,    -1,    -1,   463,   464,   465,    -1,   467,   468,
     469,   470,    -1,   472,   473,   474,   475,   476,   477,   478,
      -1,   480,   481,   482,   483,   484,   485,   486,   487,   488,
     489,   490,    -1,    -1,   493,    -1,    -1,   496,   497,   498,
     499,   500,   501,   502,   503,   504,   505,   506,   507,   508,
     509,   510,   511,   512,   513,   514,   515,   516,   517,    -1,
      -1,    -1,    -1,    -1,    -1,   524,   525,   526,    -1,    -1,
      -1,    -1,   531,    -1,   533,    -1,    -1,    -1,    -1,    -1,
     539,   540,    -1,    -1,    -1,    -1,   545,   546,     3,     4,
       5,     6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    -1,    32,    33,    34,
      -1,    -1,    -1,    -1,    -1,    40,    41,    -1,    -1,    44,
      45,    46,    -1,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    -1,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    -1,    77,    78,    79,    80,    81,    -1,    83,    -1,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      -1,    96,    97,    98,    99,   100,   101,    -1,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,    -1,   122,   123,   124,
     125,   126,   127,    -1,    -1,   130,   131,   132,   133,   134,
      -1,    -1,   137,   138,   139,   140,   141,   142,   143,    -1,
     145,   146,   147,    -1,   149,   150,   151,    -1,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,   163,   164,
     165,    -1,   167,   168,   169,   170,    -1,   172,    -1,   174,
     175,    -1,   177,   178,   179,   180,   181,   182,    -1,   184,
     185,    -1,    -1,   188,   189,   190,   191,    -1,   193,   194,
     195,   196,   197,   198,   199,   200,   201,   202,   203,   204,
      -1,   206,   207,   208,   209,   210,   211,   212,    -1,   214,
     215,   216,   217,   218,   219,   220,   221,   222,   223,    -1,
     225,    -1,   227,   228,   229,   230,   231,   232,   233,   234,
     235,   236,   237,   238,    -1,    -1,   241,   242,   243,   244,
      -1,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
      -1,   296,   297,    -1,    -1,   300,   301,   302,    -1,    -1,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
      -1,    -1,    -1,    -1,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,    -1,   340,   341,   342,   343,   344,
     345,   346,   347,    -1,   349,   350,   351,   352,   353,   354,
     355,   356,    -1,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,    -1,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,    -1,    -1,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
      -1,   406,   407,   408,   409,   410,    -1,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,    -1,    -1,   430,   431,    -1,   433,   434,
     435,   436,   437,   438,   439,    -1,   441,   442,   443,    -1,
     445,    -1,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,    -1,    -1,   463,   464,
     465,    -1,   467,   468,   469,   470,    -1,   472,   473,   474,
     475,   476,   477,   478,    -1,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,    -1,    -1,   493,    -1,
      -1,   496,   497,   498,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,   517,    -1,    -1,    -1,    -1,    -1,    -1,   524,
     525,   526,    -1,    -1,    -1,    -1,   531,    -1,   533,    -1,
      -1,    -1,    -1,    -1,   539,   540,    -1,    -1,    -1,    -1,
     545,   546,     3,     4,     5,     6,     7,     8,     9,    10,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    30,
      -1,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,    40,
      41,    -1,    -1,    44,    45,    46,    -1,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    58,    59,    -1,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    72,    73,    74,    75,    -1,    77,    78,    79,    80,
      81,    -1,    83,    -1,    85,    86,    87,    88,    89,    90,
      91,    92,    93,    94,    -1,    96,    97,    98,    99,   100,
     101,    -1,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
      -1,   122,   123,   124,   125,   126,   127,    -1,    -1,   130,
     131,   132,   133,   134,    -1,    -1,   137,   138,   139,   140,
     141,   142,   143,    -1,   145,   146,   147,    -1,   149,   150,
     151,    -1,   153,   154,   155,   156,   157,   158,   159,   160,
     161,   162,   163,   164,   165,    -1,   167,   168,   169,   170,
      -1,   172,    -1,   174,   175,    -1,   177,   178,   179,   180,
     181,   182,    -1,   184,   185,    -1,    -1,   188,   189,   190,
     191,    -1,   193,   194,   195,   196,   197,   198,   199,   200,
     201,   202,   203,   204,    -1,   206,   207,   208,   209,   210,
     211,   212,    -1,   214,   215,   216,   217,   218,   219,   220,
     221,   222,   223,    -1,   225,    -1,   227,   228,   229,   230,
     231,   232,   233,   234,   235,   236,   237,   238,    -1,    -1,
     241,   242,   243,   244,    -1,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,   287,   288,   289,   290,
     291,   292,   293,   294,    -1,   296,   297,    -1,    -1,   300,
     301,   302,    -1,    -1,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,   322,   323,   324,    -1,    -1,    -1,    -1,   329,   330,
     331,   332,   333,   334,   335,   336,   337,   338,    -1,   340,
     341,   342,   343,   344,   345,   346,   347,    -1,   349,   350,
     351,   352,   353,   354,   355,   356,    -1,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,    -1,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,   385,   386,   387,   388,   389,   390,
     391,   392,    -1,    -1,   395,   396,   397,   398,   399,   400,
     401,   402,   403,   404,    -1,   406,   407,   408,   409,   410,
      -1,   412,   413,   414,   415,   416,   417,   418,   419,   420,
     421,   422,   423,   424,   425,   426,   427,    -1,    -1,   430,
     431,    -1,   433,   434,   435,   436,   437,   438,   439,    -1,
     441,   442,   443,    -1,   445,    -1,   447,   448,   449,   450,
     451,   452,   453,   454,   455,   456,   457,   458,   459,   460,
      -1,    -1,   463,   464,   465,    -1,   467,   468,   469,   470,
      -1,   472,   473,   474,   475,   476,   477,   478,    -1,   480,
     481,   482,   483,   484,   485,   486,   487,   488,   489,   490,
      -1,    -1,   493,    -1,    -1,   496,   497,   498,   499,   500,
     501,   502,   503,   504,   505,   506,   507,   508,   509,   510,
     511,   512,   513,   514,   515,   516,   517,    -1,    -1,    -1,
      -1,    -1,    -1,   524,   525,   526,    -1,    -1,    -1,    -1,
     531,    -1,   533,    -1,    -1,    -1,    -1,    -1,   539,   540,
      -1,    -1,    -1,    -1,   545,   546,     3,     4,     5,     6,
       7,    -1,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    -1,    32,    33,    34,    -1,    -1,
      -1,    -1,    -1,    40,    41,    -1,    -1,    44,    45,    46,
      -1,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    58,    59,    -1,    61,    62,    63,    64,    65,    66,
      67,    68,    69,    70,    71,    72,    73,    74,    75,    -1,
      77,    78,    79,    80,    81,    -1,    83,    -1,    85,    86,
      87,    88,    89,    90,    91,    92,    93,    94,    -1,    96,
      97,    98,    99,   100,   101,    -1,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,   118,    -1,   120,    -1,   122,   123,   124,   125,   126,
     127,    -1,    -1,   130,   131,   132,   133,   134,    -1,    -1,
     137,   138,   139,   140,   141,   142,   143,    -1,   145,   146,
     147,    -1,   149,   150,   151,    -1,   153,   154,   155,   156,
     157,   158,   159,   160,   161,   162,   163,   164,   165,    -1,
     167,   168,   169,   170,    -1,   172,    -1,   174,   175,    -1,
     177,   178,   179,   180,   181,   182,    -1,   184,   185,    -1,
      -1,   188,   189,   190,   191,    -1,   193,   194,   195,   196,
     197,   198,   199,   200,   201,   202,   203,   204,    -1,   206,
     207,   208,   209,   210,   211,   212,    -1,   214,   215,   216,
     217,   218,   219,   220,   221,   222,   223,    -1,   225,    -1,
     227,   228,   229,   230,   231,   232,   233,   234,   235,   236,
     237,   238,    -1,    -1,   241,   242,   243,   244,    -1,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     287,   288,   289,   290,   291,   292,   293,   294,    -1,   296,
     297,    -1,    -1,   300,   301,   302,    -1,    -1,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,   323,   324,    -1,    -1,
      -1,    -1,   329,   330,   331,   332,   333,   334,   335,   336,
     337,   338,    -1,   340,   341,   342,   343,   344,   345,   346,
     347,    -1,   349,   350,   351,   352,   353,   354,   355,   356,
      -1,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,   370,   371,    -1,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,   386,
     387,   388,   389,   390,   391,   392,    -1,    -1,   395,   396,
     397,   398,   399,   400,   401,   402,   403,   404,    -1,   406,
     407,   408,   409,   410,    -1,   412,   413,   414,   415,   416,
     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
     427,    -1,    -1,   430,   431,    -1,   433,   434,   435,   436,
     437,   438,   439,    -1,   441,   442,   443,    -1,   445,    -1,
     447,   448,   449,   450,   451,   452,   453,   454,   455,   456,
     457,   458,   459,   460,    -1,    -1,   463,   464,   465,    -1,
     467,   468,   469,   470,    -1,   472,   473,   474,   475,   476,
     477,   478,    -1,   480,   481,   482,   483,   484,   485,   486,
     487,   488,   489,   490,    -1,    -1,   493,    -1,    -1,   496,
     497,   498,   499,   500,   501,   502,   503,   504,   505,   506,
     507,   508,   509,   510,   511,   512,   513,   514,   515,   516,
     517,    -1,    -1,    -1,    -1,    -1,    -1,   524,   525,    -1,
      -1,    -1,    -1,    -1,   531,    -1,   533,    -1,    -1,    -1,
      -1,    -1,   539,   540,    -1,    -1,    -1,    -1,   545,   546,
       3,     4,     5,     6,     7,     8,     9,    10,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,
      23,    24,    25,    26,    27,    28,    29,    30,    -1,    32,
      33,    34,    -1,    -1,    -1,    -1,    -1,    40,    41,    -1,
      -1,    44,    45,    46,    -1,    48,    49,    50,    51,    52,
      53,    54,    55,    56,    57,    58,    59,    -1,    61,    62,
      63,    64,    65,    66,    67,    68,    69,    70,    71,    72,
      73,    74,    75,    -1,    77,    78,    79,    80,    81,    -1,
      83,    -1,    85,    86,    87,    88,    89,    90,    91,    92,
      93,    94,    -1,    96,    97,    98,    99,   100,   101,    -1,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,   117,   118,    -1,   120,    -1,   122,
     123,   124,   125,   126,   127,    -1,    -1,   130,   131,   132,
     133,   134,    -1,    -1,   137,   138,   139,   140,   141,   142,
     143,    -1,   145,   146,   147,    -1,   149,   150,   151,    -1,
     153,   154,   155,   156,   157,   158,   159,   160,   161,   162,
     163,   164,   165,    -1,   167,   168,   169,   170,    -1,   172,
      -1,   174,   175,    -1,   177,   178,   179,   180,   181,   182,
      -1,   184,   185,    -1,    -1,   188,   189,   190,   191,    -1,
     193,   194,   195,   196,   197,   198,   199,   200,   201,   202,
     203,   204,    -1,   206,   207,   208,   209,   210,   211,   212,
      -1,   214,   215,   216,   217,   218,   219,   220,   221,   222,
     223,    -1,   225,    -1,   227,   228,   229,   230,   231,   232,
     233,   234,   235,   236,   237,   238,    -1,    -1,   241,   242,
     243,   244,    -1,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
      -1,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   294,    -1,   296,   297,    -1,    -1,   300,   301,   302,
      -1,    -1,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
     323,   324,    -1,    -1,    -1,    -1,   329,   330,   331,   332,
     333,   334,   335,   336,   337,   338,    -1,   340,   341,   342,
     343,   344,   345,   346,   347,    -1,   349,   350,   351,   352,
     353,   354,   355,   356,    -1,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,   371,    -1,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,   385,   386,   387,   388,   389,   390,   391,   392,
      -1,    -1,   395,   396,   397,   398,   399,   400,   401,   402,
     403,   404,    -1,   406,   407,   408,   409,   410,    -1,   412,
     413,   414,   415,   416,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,   427,    -1,    -1,   430,   431,    -1,
     433,   434,   435,   436,   437,   438,   439,    -1,   441,   442,
     443,    -1,   445,    -1,   447,   448,   449,   450,   451,   452,
     453,   454,   455,   456,   457,   458,   459,   460,    -1,    -1,
     463,   464,   465,    -1,   467,   468,   469,   470,    -1,   472,
     473,   474,   475,   476,   477,   478,    -1,   480,   481,   482,
     483,   484,   485,   486,   487,   488,   489,   490,    -1,    -1,
     493,    -1,    -1,   496,   497,   498,   499,   500,   501,   502,
     503,   504,   505,   506,   507,   508,   509,   510,   511,   512,
     513,   514,   515,   516,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   524,   525,    -1,    -1,    -1,    -1,    -1,   531,    -1,
     533,    -1,    -1,    -1,    -1,    -1,   539,   540,    -1,    -1,
      -1,    -1,   545,   546,     3,     4,     5,     6,     7,     8,
       9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    22,    23,    24,    25,    26,    27,    28,
      29,    30,    -1,    32,    33,    34,    -1,    -1,    -1,    -1,
      -1,    40,    41,    -1,    -1,    44,    45,    46,    -1,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    58,
      59,    -1,    61,    62,    63,    64,    65,    66,    67,    68,
      69,    70,    71,    72,    73,    74,    75,    -1,    77,    78,
      79,    80,    81,    -1,    83,    -1,    85,    86,    87,    88,
      89,    90,    91,    92,    93,    94,    -1,    96,    97,    98,
      99,   100,   101,    -1,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
     119,   120,    -1,   122,   123,   124,   125,   126,   127,    -1,
      -1,   130,   131,   132,   133,   134,    -1,    -1,   137,   138,
     139,   140,   141,   142,   143,    -1,   145,   146,   147,    -1,
     149,   150,   151,    -1,   153,   154,   155,   156,   157,   158,
     159,   160,   161,   162,   163,   164,   165,    -1,   167,   168,
     169,   170,    -1,   172,    -1,   174,   175,    -1,   177,   178,
     179,   180,   181,   182,    -1,   184,   185,    -1,    -1,   188,
     189,   190,   191,    -1,   193,   194,   195,   196,   197,   198,
     199,   200,   201,   202,   203,   204,    -1,   206,   207,   208,
     209,   210,   211,   212,    -1,   214,   215,   216,   217,   218,
     219,   220,   221,   222,   223,    -1,   225,    -1,   227,    -1,
      -1,   230,   231,   232,   233,   234,   235,   236,   237,   238,
      -1,    -1,   241,   242,   243,   244,    -1,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,    -1,   284,   285,    -1,   287,   288,
     289,   290,   291,   292,   293,   294,    -1,   296,   297,    -1,
      -1,   300,   301,   302,    -1,    -1,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,    -1,    -1,    -1,    -1,
     329,   330,   331,   332,   333,   334,   335,   336,   337,   338,
      -1,   340,   341,   342,   343,   344,   345,   346,   347,    -1,
     349,   350,   351,   352,   353,   354,   355,   356,    -1,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,   371,    -1,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,   385,   386,   387,   388,
     389,   390,   391,   392,    -1,    -1,   395,   396,   397,   398,
     399,   400,   401,   402,   403,   404,    -1,   406,   407,   408,
     409,   410,    -1,   412,   413,   414,   415,   416,   417,   418,
     419,   420,   421,   422,   423,   424,   425,   426,   427,    -1,
      -1,   430,   431,    -1,   433,   434,   435,   436,   437,   438,
     439,    -1,   441,   442,   443,    -1,   445,    -1,   447,   448,
     449,   450,   451,   452,   453,   454,   455,   456,   457,   458,
     459,   460,    -1,    -1,   463,   464,   465,    -1,   467,   468,
     469,   470,    -1,   472,   473,   474,   475,   476,   477,   478,
      -1,   480,   481,   482,   483,   484,   485,   486,   487,   488,
     489,   490,    -1,    -1,   493,    -1,    -1,   496,   497,   498,
     499,   500,   501,   502,   503,   504,   505,   506,   507,   508,
     509,   510,   511,   512,   513,   514,   515,   516,   517,    -1,
      -1,    -1,    -1,    -1,    -1,   524,   525,   526,    -1,    -1,
      -1,    -1,   531,    -1,   533,    -1,    -1,    -1,    -1,    -1,
     539,   540,    -1,    -1,    -1,    -1,   545,   546,     3,     4,
       5,     6,     7,    -1,     9,    10,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    -1,    32,    33,    34,
      -1,    -1,    -1,    -1,    -1,    40,    41,    -1,    -1,    44,
      45,    46,    -1,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    -1,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    -1,    77,    78,    79,    80,    81,    -1,    83,    -1,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      -1,    96,    97,    98,    99,   100,   101,    -1,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,    -1,   120,    -1,   122,   123,   124,
     125,   126,   127,    -1,    -1,   130,   131,   132,   133,   134,
      -1,    -1,   137,   138,   139,   140,   141,   142,   143,    -1,
     145,   146,   147,    -1,   149,   150,   151,    -1,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,   163,   164,
     165,    -1,   167,   168,   169,   170,    -1,   172,    -1,   174,
     175,    -1,   177,   178,   179,   180,   181,   182,    -1,   184,
     185,    -1,    -1,   188,   189,   190,   191,    -1,   193,   194,
     195,   196,   197,   198,   199,   200,   201,   202,   203,   204,
      -1,   206,   207,   208,   209,   210,   211,   212,    -1,   214,
     215,   216,   217,   218,   219,   220,   221,   222,   223,    -1,
     225,    -1,   227,   228,   229,   230,   231,   232,   233,   234,
     235,   236,   237,   238,    -1,    -1,   241,   242,   243,   244,
      -1,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,    -1,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
      -1,   296,   297,    -1,    -1,   300,   301,   302,    -1,    -1,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
      -1,    -1,    -1,    -1,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,    -1,   340,   341,   342,   343,   344,
     345,   346,   347,    -1,   349,   350,   351,   352,   353,   354,
     355,   356,    -1,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,    -1,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,    -1,    -1,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
      -1,   406,   407,   408,   409,   410,    -1,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,    -1,    -1,   430,   431,    -1,   433,   434,
     435,   436,   437,   438,   439,    -1,   441,   442,   443,    -1,
     445,    -1,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,    -1,    -1,   463,   464,
     465,    -1,   467,   468,   469,   470,    -1,   472,   473,   474,
     475,   476,   477,   478,    -1,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,    -1,    -1,   493,    -1,
      -1,   496,   497,   498,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   524,
     525,    -1,    -1,    -1,    -1,    -1,   531,    -1,   533,    -1,
      -1,    -1,    -1,    -1,   539,   540,    -1,    -1,    -1,    -1,
     545,   546,     3,     4,     5,     6,     7,     8,     9,    10,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    30,
      -1,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,    40,
      41,    -1,    -1,    44,    45,    46,    -1,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    58,    59,    -1,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    72,    73,    74,    75,    -1,    77,    78,    79,    80,
      81,    -1,    83,    -1,    85,    86,    87,    88,    89,    90,
      91,    92,    93,    94,    -1,    96,    97,    98,    99,   100,
     101,    -1,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,    -1,   120,
      -1,   122,   123,   124,   125,   126,   127,    -1,    -1,   130,
     131,   132,   133,   134,    -1,    -1,   137,   138,   139,   140,
     141,   142,   143,    -1,   145,   146,   147,    -1,   149,   150,
     151,    -1,   153,   154,   155,   156,   157,   158,   159,   160,
     161,   162,   163,   164,   165,    -1,   167,   168,   169,   170,
      -1,   172,    -1,   174,   175,    -1,   177,   178,   179,   180,
     181,   182,    -1,   184,   185,    -1,    -1,   188,   189,   190,
     191,    -1,   193,   194,   195,   196,   197,   198,   199,   200,
     201,   202,   203,   204,    -1,   206,   207,   208,   209,   210,
     211,   212,    -1,   214,   215,   216,   217,   218,   219,   220,
     221,   222,   223,    -1,   225,    -1,   227,    -1,   229,   230,
     231,   232,   233,   234,   235,   236,   237,   238,    -1,    -1,
     241,   242,   243,   244,    -1,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,    -1,   284,   285,   286,   287,   288,   289,   290,
     291,   292,   293,   294,    -1,   296,   297,    -1,    -1,   300,
     301,   302,    -1,    -1,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,   322,   323,   324,    -1,    -1,    -1,    -1,   329,   330,
     331,   332,   333,   334,   335,   336,   337,   338,    -1,   340,
     341,   342,   343,   344,   345,   346,   347,    -1,   349,   350,
     351,   352,   353,   354,   355,   356,    -1,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,    -1,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,   385,   386,   387,   388,   389,   390,
     391,   392,    -1,    -1,   395,   396,   397,   398,   399,   400,
     401,   402,   403,   404,    -1,   406,   407,   408,   409,   410,
      -1,   412,   413,   414,   415,   416,   417,   418,   419,   420,
     421,   422,   423,   424,   425,   426,   427,    -1,    -1,   430,
     431,    -1,   433,   434,   435,   436,   437,   438,   439,    -1,
     441,   442,   443,    -1,   445,    -1,   447,   448,   449,   450,
     451,   452,   453,   454,   455,   456,   457,   458,   459,   460,
      -1,    -1,   463,   464,   465,    -1,   467,   468,   469,   470,
      -1,   472,   473,   474,   475,   476,   477,   478,    -1,   480,
     481,   482,   483,   484,   485,   486,   487,   488,   489,   490,
      -1,    -1,   493,    -1,    -1,   496,   497,   498,   499,   500,
     501,   502,   503,   504,   505,   506,   507,   508,   509,   510,
     511,   512,   513,   514,   515,   516,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   524,   525,    -1,    -1,    -1,    -1,    -1,
     531,    -1,   533,    -1,    -1,    -1,    -1,    -1,   539,   540,
      -1,    -1,    -1,    -1,   545,   546,     3,     4,     5,     6,
       7,    -1,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    -1,    32,    33,    34,    -1,    -1,
      -1,    -1,    -1,    40,    41,    -1,    -1,    44,    45,    46,
      -1,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    58,    59,    -1,    61,    62,    63,    64,    65,    66,
      67,    68,    69,    70,    71,    72,    73,    74,    75,    -1,
      77,    78,    79,    80,    81,    -1,    83,    -1,    85,    86,
      87,    88,    89,    90,    91,    92,    93,    94,    -1,    96,
      97,    98,    99,   100,   101,    -1,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,   118,    -1,   120,    -1,   122,   123,   124,   125,   126,
     127,    -1,    -1,   130,   131,   132,   133,   134,    -1,    -1,
     137,   138,   139,   140,   141,   142,   143,    -1,   145,   146,
     147,    -1,   149,   150,   151,    -1,   153,   154,   155,   156,
     157,   158,   159,   160,   161,   162,   163,   164,   165,    -1,
     167,   168,   169,   170,    -1,   172,    -1,   174,   175,    -1,
     177,   178,   179,   180,   181,   182,    -1,   184,   185,    -1,
     187,   188,   189,   190,   191,    -1,   193,   194,   195,   196,
     197,   198,   199,   200,   201,   202,   203,   204,   205,   206,
     207,   208,   209,   210,   211,   212,    -1,   214,   215,   216,
     217,   218,   219,   220,   221,   222,   223,    -1,   225,    -1,
     227,   228,   229,   230,   231,   232,   233,   234,   235,   236,
     237,   238,    -1,    -1,   241,   242,   243,   244,    -1,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,    -1,   284,   285,   286,
     287,   288,   289,   290,   291,   292,   293,   294,    -1,   296,
     297,    -1,    -1,   300,   301,   302,    -1,    -1,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,   323,   324,    -1,    -1,
      -1,    -1,   329,   330,   331,   332,   333,   334,   335,   336,
     337,   338,    -1,   340,   341,   342,   343,   344,   345,   346,
     347,    -1,   349,   350,   351,   352,   353,   354,   355,   356,
      -1,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,   370,   371,    -1,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,   386,
     387,   388,   389,   390,   391,   392,    -1,    -1,   395,   396,
     397,   398,   399,   400,   401,   402,   403,   404,    -1,   406,
     407,   408,   409,   410,    -1,   412,   413,   414,   415,   416,
     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
     427,    -1,    -1,   430,   431,    -1,   433,   434,   435,   436,
     437,   438,   439,    -1,   441,   442,   443,    -1,   445,    -1,
     447,   448,   449,   450,   451,   452,   453,   454,   455,   456,
     457,   458,   459,   460,    -1,    -1,   463,   464,   465,    -1,
     467,   468,   469,   470,    -1,   472,   473,   474,   475,   476,
     477,   478,    -1,   480,   481,   482,   483,   484,   485,   486,
     487,   488,   489,   490,    -1,    -1,   493,    -1,    -1,   496,
     497,   498,   499,   500,   501,   502,   503,   504,   505,   506,
     507,   508,   509,   510,   511,   512,   513,   514,   515,   516,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   531,    -1,   533,    -1,    -1,    -1,
      -1,    -1,   539,   540,    -1,    -1,    -1,    -1,   545,   546,
       3,     4,     5,     6,     7,    -1,     9,    10,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,
      23,    24,    25,    26,    27,    28,    29,    30,    -1,    32,
      33,    34,    -1,    -1,    -1,    -1,    -1,    40,    41,    -1,
      -1,    44,    45,    46,    -1,    48,    49,    50,    51,    52,
      53,    54,    55,    56,    57,    58,    59,    -1,    61,    62,
      63,    64,    65,    66,    67,    68,    69,    70,    71,    72,
      73,    74,    75,    -1,    77,    78,    79,    80,    81,    -1,
      83,    -1,    85,    86,    87,    88,    89,    90,    91,    92,
      93,    94,    -1,    96,    97,    98,    99,   100,   101,    -1,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,   117,   118,    -1,   120,    -1,   122,
     123,   124,   125,   126,   127,    -1,    -1,   130,   131,   132,
     133,   134,    -1,    -1,   137,   138,   139,   140,   141,   142,
     143,    -1,   145,   146,   147,    -1,   149,   150,   151,    -1,
     153,   154,   155,   156,   157,   158,   159,   160,   161,   162,
     163,   164,   165,    -1,   167,   168,   169,   170,    -1,   172,
      -1,   174,   175,    -1,   177,   178,   179,   180,   181,   182,
      -1,   184,   185,    -1,    -1,   188,   189,   190,   191,    -1,
     193,   194,   195,   196,   197,   198,   199,   200,   201,   202,
     203,   204,    -1,   206,   207,   208,   209,   210,   211,   212,
      -1,   214,   215,   216,   217,   218,   219,   220,   221,   222,
     223,    -1,   225,    -1,   227,   228,   229,   230,   231,   232,
     233,   234,   235,   236,   237,   238,    -1,    -1,   241,   242,
     243,   244,    -1,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
      -1,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   294,    -1,   296,   297,    -1,    -1,   300,   301,   302,
      -1,    -1,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
     323,   324,    -1,    -1,    -1,    -1,   329,   330,   331,   332,
     333,   334,   335,   336,   337,   338,    -1,   340,   341,   342,
     343,   344,   345,   346,   347,    -1,   349,   350,   351,   352,
     353,   354,   355,   356,    -1,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,   371,    -1,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,   385,   386,   387,   388,   389,   390,   391,   392,
      -1,    -1,   395,   396,   397,   398,   399,   400,   401,   402,
     403,   404,    -1,   406,   407,   408,   409,   410,    -1,   412,
     413,   414,   415,   416,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,   427,    -1,    -1,   430,   431,    -1,
     433,   434,   435,   436,   437,   438,   439,    -1,   441,   442,
     443,    -1,   445,    -1,   447,   448,   449,   450,   451,   452,
     453,   454,   455,   456,   457,   458,   459,   460,    -1,    -1,
     463,   464,   465,    -1,   467,   468,   469,   470,    -1,   472,
     473,   474,   475,   476,   477,   478,    -1,   480,   481,   482,
     483,   484,   485,   486,   487,   488,   489,   490,    -1,    -1,
     493,    -1,    -1,   496,   497,   498,   499,   500,   501,   502,
     503,   504,   505,   506,   507,   508,   509,   510,   511,   512,
     513,   514,   515,   516,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   531,    -1,
     533,    -1,    -1,    -1,    -1,    -1,   539,   540,    -1,    -1,
      -1,    -1,   545,   546,     3,     4,     5,     6,     7,    -1,
       9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    22,    23,    24,    25,    26,    27,    28,
      29,    30,    -1,    32,    33,    34,    -1,    -1,    -1,    -1,
      -1,    40,    41,    -1,    -1,    44,    45,    46,    -1,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    58,
      59,    -1,    61,    62,    63,    64,    65,    66,    67,    68,
      69,    70,    71,    72,    73,    74,    75,    -1,    77,    78,
      79,    80,    81,    -1,    83,    -1,    85,    86,    87,    88,
      89,    90,    91,    92,    93,    94,    -1,    96,    97,    98,
      99,   100,   101,    -1,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
      -1,   120,    -1,   122,   123,   124,   125,   126,   127,    -1,
      -1,   130,   131,   132,   133,   134,    -1,    -1,   137,   138,
     139,   140,   141,   142,   143,    -1,   145,   146,   147,    -1,
     149,   150,   151,    -1,   153,   154,   155,   156,   157,   158,
     159,   160,   161,   162,   163,   164,   165,    -1,   167,   168,
     169,   170,    -1,   172,    -1,   174,   175,    -1,   177,   178,
     179,   180,   181,   182,    -1,   184,   185,    -1,    -1,   188,
     189,   190,   191,    -1,   193,   194,   195,   196,   197,   198,
     199,   200,   201,   202,   203,   204,    -1,   206,   207,   208,
     209,   210,   211,   212,    -1,   214,   215,   216,   217,   218,
     219,   220,   221,   222,   223,    -1,   225,    -1,   227,   228,
     229,   230,   231,   232,   233,   234,   235,   236,   237,   238,
      -1,    -1,   241,   242,   243,   244,    -1,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,    -1,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   294,    -1,   296,   297,    -1,
      -1,   300,   301,   302,    -1,    -1,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,    -1,    -1,    -1,    -1,
     329,   330,   331,   332,   333,   334,   335,   336,   337,   338,
      -1,   340,   341,   342,   343,   344,   345,   346,   347,    -1,
     349,   350,   351,   352,   353,   354,   355,   356,    -1,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,   371,    -1,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,   385,   386,   387,   388,
     389,   390,   391,   392,    -1,    -1,   395,   396,   397,   398,
     399,   400,   401,   402,   403,   404,    -1,   406,   407,   408,
     409,   410,    -1,   412,   413,   414,   415,   416,   417,   418,
     419,   420,   421,   422,   423,   424,   425,   426,   427,    -1,
      -1,   430,   431,    -1,   433,   434,   435,   436,   437,   438,
     439,    -1,   441,   442,   443,    -1,   445,    -1,   447,   448,
     449,   450,   451,   452,   453,   454,   455,   456,   457,   458,
     459,   460,    -1,    -1,   463,   464,   465,    -1,   467,   468,
     469,   470,    -1,   472,   473,   474,   475,   476,   477,   478,
      -1,   480,   481,   482,   483,   484,   485,   486,   487,   488,
     489,   490,    -1,    -1,   493,    -1,    -1,   496,   497,   498,
     499,   500,   501,   502,   503,   504,   505,   506,   507,   508,
     509,   510,   511,   512,   513,   514,   515,   516,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   531,    -1,   533,    -1,    -1,    -1,    -1,    -1,
     539,   540,    -1,    -1,    -1,    -1,   545,   546,     3,     4,
       5,     6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    -1,    32,    33,    34,
      -1,    -1,    -1,    -1,    -1,    40,    41,    -1,    -1,    44,
      45,    46,    -1,    48,    49,    50,    51,    52,    53,    54,
      -1,    56,    57,    58,    59,    -1,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    -1,    77,    78,    79,    80,    81,    -1,    83,    -1,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      -1,    96,    97,    98,    99,   100,   101,    -1,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,    -1,   122,   123,   124,
     125,   126,   127,    -1,    -1,   130,   131,   132,   133,   134,
      -1,    -1,   137,   138,   139,   140,   141,   142,   143,    -1,
     145,   146,   147,    -1,   149,    -1,   151,    -1,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,   163,   164,
     165,    -1,   167,   168,   169,   170,    -1,   172,    -1,   174,
     175,    -1,   177,   178,   179,   180,    -1,   182,    -1,   184,
     185,    -1,    -1,   188,   189,   190,   191,    -1,   193,   194,
     195,   196,   197,   198,   199,    -1,   201,   202,   203,   204,
      -1,   206,   207,   208,   209,   210,   211,   212,    -1,   214,
     215,   216,   217,   218,   219,   220,   221,   222,   223,    -1,
     225,    -1,   227,    -1,    -1,   230,   231,   232,   233,   234,
     235,   236,   237,   238,    -1,    -1,   241,   242,   243,    -1,
      -1,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,    -1,   284,
     285,    -1,   287,   288,   289,   290,   291,   292,   293,   294,
      -1,   296,   297,    -1,    -1,   300,   301,   302,    -1,    -1,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
      -1,    -1,    -1,    -1,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,    -1,   340,   341,   342,   343,   344,
     345,   346,   347,    -1,   349,   350,   351,   352,   353,   354,
     355,   356,    -1,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,    -1,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,    -1,    -1,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
      -1,    -1,   407,   408,   409,   410,    -1,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,    -1,    -1,   430,   431,    -1,   433,   434,
     435,   436,   437,   438,   439,    -1,   441,   442,   443,    -1,
     445,    -1,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,    -1,    -1,   463,   464,
     465,    -1,   467,   468,   469,   470,    -1,   472,   473,   474,
     475,   476,   477,   478,    -1,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,    -1,    -1,   493,    -1,
      -1,   496,   497,   498,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   524,
     525,   526,    -1,     3,    -1,    -1,   531,    -1,   533,    -1,
      -1,    -1,    -1,    -1,   539,   540,    -1,    -1,    -1,    -1,
     545,   546,    22,    23,    24,    25,    -1,    27,    28,    29,
      30,    -1,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    45,    46,    -1,    48,    49,
      50,    -1,    52,    53,    54,    55,    56,    -1,    58,    59,
      -1,    61,    62,    63,    64,    65,    66,    -1,    -1,    69,
      70,    71,    72,    73,    74,    75,    -1,    77,    78,    79,
      80,    81,    -1,    -1,    -1,    -1,    86,    87,    88,    89,
      90,    -1,    92,    93,    94,    -1,    96,    97,    98,    99,
     100,    -1,    -1,    -1,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,    -1,
     120,    -1,   122,   123,   124,   125,   126,   127,    -1,    -1,
      -1,   131,   132,   133,   134,    -1,    -1,   137,   138,   139,
     140,   141,    -1,    -1,    -1,   145,   146,   147,    -1,   149,
     150,   151,    -1,   153,   154,   155,   156,   157,   158,   159,
     160,   161,   162,   163,    -1,   165,    -1,   167,   168,   169,
     170,    -1,   172,    -1,   174,    -1,    -1,    -1,   178,   179,
     180,    -1,   182,    -1,   184,    -1,    -1,    -1,   188,   189,
      -1,   191,    -1,   193,   194,   195,   196,   197,   198,   199,
      -1,   201,   202,   203,   204,    -1,   206,   207,   208,   209,
     210,   211,   212,    -1,   214,    -1,   216,   217,   218,   219,
     220,   221,   222,   223,    -1,   225,    -1,   227,    -1,    -1,
     230,    -1,   232,    -1,   234,   235,   236,   237,   238,    -1,
      -1,   241,    -1,   243,    -1,    -1,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,    -1,   277,   278,   279,
     280,    -1,   282,    -1,   284,   285,    -1,   287,    -1,   289,
     290,   291,   292,   293,   294,    -1,   296,   297,    -1,    -1,
     300,   301,   302,    -1,    -1,   305,   306,   307,    -1,   309,
      -1,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,    -1,    -1,   323,   324,    -1,    -1,    -1,    -1,   329,
     330,   331,    -1,   333,   334,   335,   336,   337,   338,    -1,
     340,   341,   342,   343,   344,    -1,    -1,   347,    -1,   349,
     350,   351,   352,   353,   354,   355,   356,    -1,   358,   359,
     360,    -1,   362,   363,   364,   365,   366,   367,   368,   369,
     370,   371,    -1,   373,   374,    -1,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,   386,   387,   388,   389,
     390,   391,   392,    -1,    -1,   395,   396,   397,   398,   399,
     400,   401,   402,   403,    -1,    -1,    -1,    -1,   408,   409,
     410,    -1,    -1,   413,   414,   415,   416,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,    -1,    -1,
     430,   431,    -1,   433,    -1,   435,   436,   437,   438,   439,
      -1,   441,   442,   443,    -1,    -1,    -1,   447,   448,   449,
     450,   451,    -1,   453,   454,   455,   456,   457,   458,   459,
     460,    -1,    -1,   463,   464,   465,    -1,   467,   468,   469,
     470,    -1,   472,   473,   474,   475,   476,   477,   478,    -1,
     480,    -1,   482,    -1,   484,   485,   486,   487,    -1,   489,
     490,    -1,    -1,   493,    -1,    -1,   496,   497,   498,   499,
     500,   501,   502,   503,   504,   505,   506,   507,   508,   509,
     510,   511,   512,   513,   514,   515,   516,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,     3,     4,     5,    -1,    -1,
      -1,     9,    -1,   533,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   543,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    -1,    32,    33,    34,    -1,    -1,    -1,
      38,    -1,    40,    -1,    -1,    -1,    44,    45,    46,    -1,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      58,    59,    -1,    61,    62,    63,    64,    65,    66,    -1,
      -1,    69,    70,    71,    72,    73,    74,    75,    -1,    77,
      78,    79,    80,    81,    -1,    83,    -1,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    -1,    96,    97,
      98,    99,   100,   101,    -1,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,    -1,   120,    -1,   122,   123,   124,   125,   126,   127,
      -1,    -1,   130,   131,   132,   133,   134,    -1,    -1,   137,
     138,   139,   140,   141,   142,   143,    -1,   145,   146,   147,
      -1,   149,   150,   151,    -1,   153,   154,   155,   156,   157,
     158,   159,   160,   161,   162,   163,   164,   165,    -1,   167,
     168,   169,   170,    -1,   172,    -1,   174,   175,    -1,   177,
     178,   179,   180,   181,   182,    -1,   184,   185,    -1,    -1,
     188,   189,   190,   191,    -1,   193,   194,   195,   196,   197,
     198,   199,   200,   201,   202,   203,   204,    -1,   206,   207,
     208,   209,   210,   211,   212,    -1,   214,   215,   216,   217,
     218,   219,   220,   221,   222,   223,    -1,   225,    -1,   227,
     228,   229,   230,   231,   232,   233,   234,   235,   236,   237,
     238,    -1,    -1,   241,   242,   243,   244,    -1,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,   280,   281,   282,    -1,   284,   285,   286,   287,
      -1,   289,   290,   291,   292,   293,   294,    -1,   296,   297,
     298,    -1,   300,   301,   302,    -1,    -1,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323,   324,    -1,    -1,    -1,
      -1,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     338,    -1,   340,   341,   342,   343,   344,   345,   346,   347,
      -1,   349,   350,   351,   352,   353,   354,   355,   356,    -1,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,   371,    -1,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,   386,   387,
     388,   389,   390,   391,   392,    -1,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,    -1,   406,   407,
     408,   409,   410,    -1,   412,   413,   414,   415,   416,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
      -1,    -1,   430,   431,    -1,   433,   434,   435,   436,   437,
     438,   439,    -1,   441,   442,   443,    -1,   445,    -1,   447,
     448,   449,   450,   451,   452,   453,   454,   455,   456,   457,
     458,   459,   460,    -1,    -1,   463,   464,   465,    -1,   467,
     468,   469,   470,    -1,   472,   473,   474,   475,   476,   477,
     478,    -1,   480,   481,   482,   483,   484,   485,   486,   487,
     488,   489,   490,    -1,    -1,   493,    -1,    -1,   496,   497,
     498,   499,   500,   501,   502,   503,   504,   505,   506,   507,
     508,   509,   510,   511,   512,   513,   514,   515,   516,    -1,
      -1,    -1,    -1,    -1,     3,    -1,   524,   525,   526,    -1,
      -1,    -1,    -1,   531,    -1,   533,    -1,    -1,    -1,    -1,
      -1,    -1,   540,    22,    23,    24,    25,    26,    27,    28,
      29,    30,    -1,    32,    33,    34,    -1,    -1,    -1,    -1,
      -1,    40,    -1,    42,    -1,    -1,    45,    46,    -1,    48,
      49,    50,    -1,    52,    53,    54,    55,    56,    -1,    58,
      59,    -1,    61,    62,    63,    64,    65,    66,    -1,    -1,
      69,    70,    71,    72,    73,    74,    75,    -1,    77,    78,
      79,    80,    81,    -1,    -1,    -1,    85,    86,    87,    88,
      89,    90,    -1,    92,    93,    94,    -1,    96,    97,    98,
      99,   100,   101,    -1,    -1,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
      -1,   120,    -1,   122,   123,   124,   125,   126,   127,    -1,
      -1,   130,   131,   132,   133,   134,    -1,    -1,   137,   138,
     139,   140,   141,   142,   143,    -1,   145,   146,   147,    -1,
     149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
     159,   160,   161,   162,   163,    -1,   165,   166,   167,   168,
     169,   170,   171,   172,    -1,   174,    -1,    -1,    -1,   178,
     179,   180,    -1,   182,    -1,   184,   185,    -1,    -1,   188,
     189,   190,   191,    -1,   193,   194,   195,   196,   197,   198,
     199,    -1,   201,   202,   203,   204,    -1,   206,   207,   208,
     209,   210,   211,   212,    -1,   214,    -1,   216,   217,   218,
     219,   220,   221,   222,   223,   224,   225,    -1,   227,    -1,
      -1,   230,    -1,   232,   233,   234,   235,   236,   237,   238,
      -1,    -1,   241,    -1,   243,    -1,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,    -1,   277,   278,
     279,   280,   281,   282,    -1,   284,   285,    -1,   287,    -1,
     289,   290,   291,   292,   293,   294,   295,   296,   297,    -1,
      -1,   300,   301,   302,    -1,   304,   305,   306,   307,    -1,
     309,    -1,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,    -1,    -1,    -1,    -1,
     329,   330,   331,    -1,   333,   334,   335,   336,   337,   338,
      -1,   340,   341,   342,   343,   344,   345,   346,   347,    -1,
     349,   350,   351,   352,   353,   354,   355,   356,    -1,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,   371,    -1,   373,   374,    -1,   376,   377,   378,
     379,   380,   381,   382,   383,   384,   385,   386,   387,   388,
     389,   390,   391,   392,    -1,    -1,   395,   396,   397,   398,
     399,   400,   401,   402,   403,   404,    -1,    -1,   407,   408,
     409,   410,    -1,   412,   413,   414,   415,   416,   417,   418,
     419,   420,   421,   422,   423,   424,   425,   426,   427,    -1,
      -1,   430,   431,    -1,   433,    -1,   435,   436,   437,   438,
     439,    -1,   441,   442,   443,    -1,   445,    -1,   447,   448,
     449,   450,   451,    -1,   453,   454,   455,   456,   457,   458,
     459,   460,   461,    -1,   463,   464,   465,    -1,   467,   468,
     469,   470,    -1,   472,   473,   474,   475,   476,   477,   478,
      -1,   480,    -1,   482,   483,   484,   485,   486,   487,   488,
     489,   490,    -1,    -1,   493,    -1,    -1,   496,   497,   498,
     499,   500,   501,   502,   503,   504,   505,   506,   507,   508,
     509,   510,   511,   512,   513,   514,   515,   516,     3,    -1,
       5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   534,    -1,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    -1,    32,    33,    34,
      -1,    -1,    -1,    -1,    -1,    40,    -1,    -1,    -1,    -1,
      45,    46,    -1,    48,    49,    50,    -1,    52,    53,    54,
      55,    56,    -1,    58,    59,    -1,    61,    62,    63,    64,
      65,    66,    -1,    -1,    69,    70,    71,    72,    73,    74,
      75,    -1,    77,    78,    79,    80,    81,    -1,    -1,    -1,
      85,    86,    87,    88,    89,    90,    -1,    92,    93,    94,
      -1,    96,    97,    98,    99,   100,   101,    -1,    -1,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,    -1,   120,    -1,   122,   123,   124,
     125,   126,   127,    -1,    -1,   130,   131,   132,   133,   134,
      -1,    -1,   137,   138,   139,   140,   141,   142,   143,    -1,
     145,   146,   147,    -1,   149,   150,   151,    -1,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,   163,    -1,
     165,    -1,   167,   168,   169,   170,    -1,   172,    -1,   174,
      -1,    -1,    -1,   178,   179,   180,    -1,   182,    -1,   184,
     185,    -1,    -1,   188,   189,   190,   191,    -1,   193,   194,
     195,   196,   197,   198,   199,    -1,   201,   202,   203,   204,
      -1,   206,   207,   208,   209,   210,   211,   212,    -1,   214,
      -1,   216,   217,   218,   219,   220,   221,   222,   223,    -1,
     225,    -1,   227,    -1,    -1,   230,    -1,   232,   233,   234,
     235,   236,   237,   238,    -1,    -1,   241,    -1,   243,    -1,
      -1,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,    -1,   277,   278,   279,   280,   281,   282,    -1,   284,
     285,    -1,   287,    -1,   289,   290,   291,   292,   293,   294,
      -1,   296,   297,    -1,    -1,   300,   301,   302,    -1,    -1,
     305,   306,   307,    -1,   309,    -1,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
      -1,    -1,    -1,    -1,   329,   330,   331,    -1,   333,   334,
     335,   336,   337,   338,    -1,   340,   341,   342,   343,   344,
     345,   346,   347,    -1,   349,   350,   351,   352,   353,   354,
     355,   356,    -1,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,    -1,   373,   374,
      -1,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,    -1,    -1,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
      -1,    -1,   407,   408,   409,   410,    -1,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,    -1,    -1,   430,   431,    -1,   433,    -1,
     435,   436,   437,   438,   439,    -1,   441,   442,   443,    -1,
     445,    -1,   447,   448,   449,   450,   451,    -1,   453,   454,
     455,   456,   457,   458,   459,   460,    -1,    -1,   463,   464,
     465,    -1,   467,   468,   469,   470,    -1,   472,   473,   474,
     475,   476,   477,   478,    -1,   480,    -1,   482,   483,   484,
     485,   486,   487,   488,   489,   490,    -1,    -1,   493,    -1,
      -1,   496,   497,   498,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,     3,    -1,     5,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   533,   534,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    30,
      -1,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,    40,
      -1,    -1,    -1,    44,    45,    46,    -1,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    58,    59,    -1,
      61,    62,    63,    64,    65,    66,    -1,    68,    69,    70,
      71,    72,    73,    74,    75,    -1,    77,    78,    79,    80,
      81,    -1,    83,    -1,    85,    86,    87,    88,    89,    90,
      91,    92,    93,    94,    -1,    96,    97,    98,    99,   100,
     101,    -1,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,    -1,   120,
      -1,   122,   123,   124,   125,   126,   127,   128,   129,   130,
     131,   132,   133,   134,    -1,    -1,   137,   138,   139,   140,
     141,   142,   143,    -1,   145,   146,   147,    -1,   149,   150,
     151,    -1,   153,   154,   155,   156,   157,   158,   159,   160,
     161,   162,   163,    -1,   165,    -1,   167,   168,   169,   170,
      -1,   172,    -1,   174,   175,   176,   177,   178,   179,   180,
     181,   182,    -1,   184,   185,   186,    -1,   188,   189,   190,
     191,    -1,   193,   194,   195,   196,   197,   198,   199,   200,
     201,   202,   203,   204,    -1,   206,   207,   208,   209,   210,
     211,   212,    -1,   214,   215,   216,   217,   218,   219,   220,
     221,   222,   223,    -1,   225,    -1,   227,   228,   229,   230,
     231,   232,   233,   234,   235,   236,   237,   238,   239,    -1,
     241,   242,   243,   244,    -1,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,    -1,   284,   285,   286,   287,    -1,   289,   290,
     291,   292,   293,   294,    -1,   296,   297,    -1,   299,   300,
     301,   302,    -1,    -1,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,   322,   323,   324,   325,   326,   327,    -1,   329,   330,
     331,   332,   333,   334,   335,   336,   337,   338,    -1,   340,
     341,   342,   343,   344,   345,   346,   347,    -1,   349,   350,
     351,   352,   353,   354,   355,   356,    -1,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,    -1,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,   385,   386,   387,   388,   389,   390,
     391,   392,   393,    -1,   395,   396,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,   407,   408,   409,   410,
      -1,   412,   413,   414,   415,   416,   417,   418,   419,   420,
     421,   422,   423,   424,   425,   426,   427,   428,    -1,   430,
     431,   432,   433,   434,   435,   436,   437,   438,   439,    -1,
     441,   442,   443,    -1,   445,    -1,   447,   448,   449,   450,
     451,    -1,   453,   454,   455,   456,   457,   458,   459,   460,
      -1,    -1,   463,   464,   465,   466,   467,   468,   469,   470,
      -1,   472,   473,   474,   475,   476,   477,   478,    -1,   480,
     481,   482,   483,   484,   485,   486,   487,   488,   489,   490,
      -1,    -1,   493,    -1,   495,   496,   497,   498,   499,   500,
     501,   502,   503,   504,   505,   506,   507,   508,   509,   510,
     511,   512,   513,   514,   515,   516,     3,    -1,   519,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   533,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    -1,    32,    33,    34,    35,    36,
      -1,    38,    -1,    40,    -1,    -1,    -1,    44,    45,    46,
      -1,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    58,    59,    -1,    61,    62,    63,    64,    65,    66,
      -1,    -1,    69,    70,    71,    72,    73,    74,    75,    -1,
      77,    78,    79,    80,    81,    -1,    83,    -1,    85,    86,
      87,    88,    89,    90,    91,    92,    93,    94,    -1,    96,
      97,    98,    99,   100,   101,    -1,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,   118,    -1,   120,    -1,   122,   123,   124,   125,   126,
     127,   128,   129,   130,   131,   132,   133,   134,    -1,    -1,
     137,   138,   139,   140,   141,   142,   143,    -1,   145,   146,
     147,    -1,   149,   150,   151,    -1,   153,   154,   155,   156,
     157,   158,   159,   160,   161,   162,   163,    -1,   165,    -1,
     167,   168,   169,   170,    -1,   172,    -1,   174,   175,   176,
     177,   178,   179,   180,   181,   182,    -1,   184,   185,    -1,
      -1,   188,   189,   190,   191,    -1,   193,   194,   195,   196,
     197,   198,   199,   200,   201,   202,   203,   204,    -1,   206,
     207,   208,   209,   210,   211,   212,    -1,   214,   215,   216,
     217,   218,   219,   220,   221,   222,   223,    -1,   225,    -1,
     227,   228,   229,   230,   231,   232,   233,   234,   235,   236,
     237,   238,    -1,    -1,   241,   242,   243,   244,    -1,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,    -1,   284,   285,   286,
     287,    -1,   289,   290,   291,   292,   293,   294,    -1,   296,
     297,    -1,    -1,   300,   301,   302,    -1,    -1,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,   323,   324,   325,   326,
     327,    -1,   329,   330,   331,   332,   333,   334,   335,   336,
     337,   338,    -1,   340,   341,   342,   343,   344,   345,   346,
     347,    -1,   349,   350,   351,   352,   353,   354,   355,   356,
      -1,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,   370,   371,    -1,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
     407,   408,   409,   410,    -1,   412,   413,   414,   415,   416,
     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
     427,   428,    -1,   430,   431,   432,   433,   434,   435,   436,
     437,   438,   439,    -1,   441,   442,   443,    -1,   445,    -1,
     447,   448,   449,   450,   451,    -1,   453,   454,   455,   456,
     457,   458,   459,   460,    -1,    -1,   463,   464,   465,   466,
     467,   468,   469,   470,    -1,   472,   473,   474,   475,   476,
     477,   478,    -1,   480,   481,   482,   483,   484,   485,   486,
     487,   488,   489,   490,    -1,    -1,   493,    -1,   495,   496,
     497,   498,   499,   500,   501,   502,   503,   504,   505,   506,
     507,   508,   509,   510,   511,   512,   513,   514,   515,   516,
      -1,     3,   519,     5,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   533,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    -1,
      32,    33,    34,    -1,    -1,    -1,    -1,    -1,    40,    -1,
      -1,    -1,    44,    45,    46,    -1,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    58,    59,    -1,    61,
      62,    63,    64,    65,    66,    -1,    68,    69,    70,    71,
      72,    73,    74,    75,    -1,    77,    78,    79,    80,    81,
      -1,    83,    -1,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    -1,    96,    97,    98,    99,   100,   101,
      -1,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,    -1,   120,    -1,
     122,   123,   124,   125,   126,   127,    -1,    -1,   130,   131,
     132,   133,   134,    -1,    -1,   137,   138,   139,   140,   141,
     142,   143,    -1,   145,   146,   147,    -1,   149,   150,   151,
      -1,   153,   154,   155,   156,   157,   158,   159,   160,   161,
     162,   163,    -1,   165,    -1,   167,   168,   169,   170,    -1,
     172,    -1,   174,   175,    -1,   177,   178,   179,   180,   181,
     182,    -1,   184,   185,   186,    -1,   188,   189,   190,   191,
      -1,   193,   194,   195,   196,   197,   198,   199,   200,   201,
     202,   203,   204,    -1,   206,   207,   208,   209,   210,   211,
     212,    -1,   214,   215,   216,   217,   218,   219,   220,   221,
     222,   223,    -1,   225,    -1,   227,   228,   229,   230,   231,
     232,   233,   234,   235,   236,   237,   238,   239,    -1,   241,
     242,   243,   244,    -1,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     282,    -1,   284,   285,   286,   287,    -1,   289,   290,   291,
     292,   293,   294,    -1,   296,   297,    -1,   299,   300,   301,
     302,    -1,    -1,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,   323,   324,    -1,    -1,    -1,    -1,   329,   330,   331,
     332,   333,   334,   335,   336,   337,   338,    -1,   340,   341,
     342,   343,   344,   345,   346,   347,    -1,   349,   350,   351,
     352,   353,   354,   355,   356,    -1,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
      -1,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,   386,   387,   388,   389,   390,   391,
     392,    -1,    -1,   395,   396,   397,   398,   399,   400,   401,
     402,   403,   404,    -1,   406,   407,   408,   409,   410,    -1,
     412,   413,   414,   415,   416,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,    -1,    -1,   430,   431,
      -1,   433,   434,   435,   436,   437,   438,   439,    -1,   441,
     442,   443,    -1,   445,    -1,   447,   448,   449,   450,   451,
      -1,   453,   454,   455,   456,   457,   458,   459,   460,    -1,
      -1,   463,   464,   465,    -1,   467,   468,   469,   470,    -1,
     472,   473,   474,   475,   476,   477,   478,    -1,   480,   481,
     482,   483,   484,   485,   486,   487,   488,   489,   490,    -1,
      -1,   493,    -1,    -1,   496,   497,   498,   499,   500,   501,
     502,   503,   504,   505,   506,   507,   508,   509,   510,   511,
     512,   513,   514,   515,   516,     3,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   533,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    -1,    32,    33,    34,    -1,    -1,    -1,
      -1,    -1,    40,    -1,    -1,    -1,    44,    45,    46,    -1,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      58,    59,    -1,    61,    62,    63,    64,    65,    66,    -1,
      68,    69,    70,    71,    72,    73,    74,    75,    -1,    77,
      78,    79,    80,    81,    -1,    83,    -1,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    -1,    96,    97,
      98,    99,   100,   101,    -1,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,    -1,   120,    -1,   122,   123,   124,   125,   126,   127,
      -1,    -1,   130,   131,   132,   133,   134,    -1,    -1,   137,
     138,   139,   140,   141,   142,   143,    -1,   145,   146,   147,
      -1,   149,   150,   151,    -1,   153,   154,   155,   156,   157,
     158,   159,   160,   161,   162,   163,    -1,   165,    -1,   167,
     168,   169,   170,    -1,   172,    -1,   174,   175,    -1,   177,
     178,   179,   180,   181,   182,    -1,   184,   185,    -1,    -1,
     188,   189,   190,   191,    -1,   193,   194,   195,   196,   197,
     198,   199,   200,   201,   202,   203,   204,    -1,   206,   207,
     208,   209,   210,   211,   212,    -1,   214,   215,   216,   217,
     218,   219,   220,   221,   222,   223,    -1,   225,    -1,   227,
     228,   229,   230,   231,   232,   233,   234,   235,   236,   237,
     238,    -1,    -1,   241,   242,   243,   244,    -1,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,   280,   281,   282,    -1,   284,   285,   286,   287,
      -1,   289,   290,   291,   292,   293,   294,    -1,   296,   297,
      -1,    -1,   300,   301,   302,    -1,    -1,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323,   324,    -1,    -1,    -1,
      -1,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     338,    -1,   340,   341,   342,   343,   344,   345,   346,   347,
      -1,   349,   350,   351,   352,   353,   354,   355,   356,    -1,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,   371,    -1,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,   386,   387,
     388,   389,   390,   391,   392,    -1,    -1,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,    -1,   406,   407,
     408,   409,   410,    -1,   412,   413,   414,   415,   416,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
      -1,    -1,   430,   431,    -1,   433,   434,   435,   436,   437,
     438,   439,    -1,   441,   442,   443,    -1,   445,    -1,   447,
     448,   449,   450,   451,    -1,   453,   454,   455,   456,   457,
     458,   459,   460,    -1,    -1,   463,   464,   465,    -1,   467,
     468,   469,   470,    -1,   472,   473,   474,   475,   476,   477,
     478,    -1,   480,   481,   482,   483,   484,   485,   486,   487,
     488,   489,   490,    -1,    -1,   493,    -1,    -1,   496,   497,
     498,   499,   500,   501,   502,   503,   504,   505,   506,   507,
     508,   509,   510,   511,   512,   513,   514,   515,   516,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   533,    -1,    -1,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    -1,    32,    33,
      34,    -1,    -1,    -1,    -1,    -1,    40,    -1,    -1,    -1,
      44,    45,    46,    -1,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    58,    59,    -1,    61,    62,    63,
      64,    65,    66,    -1,    68,    69,    70,    71,    72,    73,
      74,    75,    -1,    77,    78,    79,    80,    81,    -1,    83,
      -1,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    -1,    96,    97,    98,    99,   100,   101,    -1,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,    -1,   120,    -1,   122,   123,
     124,   125,   126,   127,    -1,    -1,   130,   131,   132,   133,
     134,    -1,    -1,   137,   138,   139,   140,   141,   142,   143,
      -1,   145,   146,   147,    -1,   149,   150,   151,    -1,   153,
     154,   155,   156,   157,   158,   159,   160,   161,   162,   163,
      -1,   165,    -1,   167,   168,   169,   170,    -1,   172,    -1,
     174,   175,    -1,   177,   178,   179,   180,   181,   182,    -1,
     184,   185,    -1,    -1,   188,   189,   190,   191,    -1,   193,
     194,   195,   196,   197,   198,   199,   200,   201,   202,   203,
     204,    -1,   206,   207,   208,   209,   210,   211,   212,    -1,
     214,   215,   216,   217,   218,   219,   220,   221,   222,   223,
      -1,   225,    -1,   227,   228,   229,   230,   231,   232,   233,
     234,   235,   236,   237,   238,    -1,    -1,   241,   242,   243,
     244,    -1,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,    -1,
     284,   285,   286,   287,    -1,   289,   290,   291,   292,   293,
     294,    -1,   296,   297,    -1,    -1,   300,   301,   302,    -1,
      -1,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,    -1,    -1,    -1,    -1,   329,   330,   331,   332,   333,
     334,   335,   336,   337,   338,    -1,   340,   341,   342,   343,
     344,   345,   346,   347,    -1,   349,   350,   351,   352,   353,
     354,   355,   356,    -1,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,   371,    -1,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,   385,   386,   387,   388,   389,   390,   391,   392,    -1,
      -1,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,    -1,   406,   407,   408,   409,   410,    -1,   412,   413,
     414,   415,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,    -1,    -1,   430,   431,    -1,   433,
     434,   435,   436,   437,   438,   439,    -1,   441,   442,   443,
      -1,   445,    -1,   447,   448,   449,   450,   451,    -1,   453,
     454,   455,   456,   457,   458,   459,   460,    -1,    -1,   463,
     464,   465,    -1,   467,   468,   469,   470,    -1,   472,   473,
     474,   475,   476,   477,   478,    -1,   480,   481,   482,   483,
     484,   485,   486,   487,   488,   489,   490,    -1,    -1,   493,
      -1,    -1,   496,   497,   498,   499,   500,   501,   502,   503,
     504,   505,   506,   507,   508,   509,   510,   511,   512,   513,
     514,   515,   516,     3,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   533,
      -1,    -1,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    -1,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,
      40,    -1,    -1,    -1,    -1,    45,    46,    -1,    48,    49,
      50,    -1,    52,    53,    54,    55,    56,    -1,    58,    59,
      -1,    61,    62,    63,    64,    65,    66,    -1,    -1,    69,
      70,    71,    72,    73,    74,    75,    -1,    77,    78,    79,
      80,    81,    -1,    -1,    -1,    85,    86,    87,    88,    89,
      90,    -1,    92,    93,    94,    -1,    96,    97,    98,    99,
     100,   101,    -1,    -1,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,    -1,
     120,    -1,   122,   123,   124,   125,   126,   127,   128,   129,
     130,   131,   132,   133,   134,    -1,    -1,   137,   138,   139,
     140,   141,   142,   143,    -1,   145,   146,   147,    -1,   149,
     150,   151,    -1,   153,   154,   155,   156,   157,   158,   159,
     160,   161,   162,   163,    -1,   165,    -1,   167,   168,   169,
     170,    -1,   172,    -1,   174,    -1,   176,    -1,   178,   179,
     180,    -1,   182,    -1,   184,   185,    -1,    -1,   188,   189,
     190,   191,    -1,   193,   194,   195,   196,   197,   198,   199,
      -1,   201,   202,   203,   204,    -1,   206,   207,   208,   209,
     210,   211,   212,    -1,   214,    -1,   216,   217,   218,   219,
     220,   221,   222,   223,    -1,   225,    -1,   227,    -1,    -1,
     230,    -1,   232,   233,   234,   235,   236,   237,   238,    -1,
      -1,   241,    -1,   243,    -1,    -1,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,    -1,   277,   278,   279,
     280,   281,   282,    -1,   284,   285,    -1,   287,    -1,   289,
     290,   291,   292,   293,   294,    -1,   296,   297,    -1,    -1,
     300,   301,   302,    -1,    -1,   305,   306,   307,    -1,   309,
      -1,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,   323,   324,   325,   326,   327,    -1,   329,
     330,   331,    -1,   333,   334,   335,   336,   337,   338,    -1,
     340,   341,   342,   343,   344,   345,   346,   347,    -1,   349,
     350,   351,   352,   353,   354,   355,   356,    -1,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
     370,   371,    -1,   373,   374,    -1,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,   386,   387,   388,   389,
     390,   391,   392,   393,    -1,   395,   396,   397,   398,   399,
     400,   401,   402,   403,   404,   405,    -1,   407,   408,   409,
     410,    -1,   412,   413,   414,   415,   416,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,   428,    -1,
     430,   431,   432,   433,    -1,   435,   436,   437,   438,   439,
      -1,   441,   442,   443,    -1,   445,    -1,   447,   448,   449,
     450,   451,    -1,   453,   454,   455,   456,   457,   458,   459,
     460,    -1,    -1,   463,   464,   465,   466,   467,   468,   469,
     470,    -1,   472,   473,   474,   475,   476,   477,   478,    -1,
     480,    -1,   482,   483,   484,   485,   486,   487,   488,   489,
     490,    -1,    -1,   493,    -1,   495,   496,   497,   498,   499,
     500,   501,   502,   503,   504,   505,   506,   507,   508,   509,
     510,   511,   512,   513,   514,   515,   516,     3,    -1,   519,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   533,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    34,    -1,
      -1,    -1,    -1,    -1,    40,    -1,    -1,    -1,    -1,    45,
      46,    -1,    48,    49,    50,    -1,    52,    53,    54,    55,
      56,    -1,    58,    59,    -1,    61,    62,    63,    64,    65,
      66,    -1,    -1,    69,    70,    71,    72,    73,    74,    75,
      -1,    77,    78,    79,    80,    81,    -1,    -1,    -1,    85,
      86,    87,    88,    89,    90,    -1,    92,    93,    94,    -1,
      96,    97,    98,    99,   100,   101,    -1,    -1,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,    -1,   120,    -1,   122,   123,   124,   125,
     126,   127,    -1,    -1,   130,   131,   132,   133,   134,    -1,
      -1,   137,   138,   139,   140,   141,   142,   143,    -1,   145,
     146,   147,    -1,   149,   150,   151,    -1,   153,   154,   155,
     156,   157,   158,   159,   160,   161,   162,   163,    -1,   165,
      -1,   167,   168,   169,   170,    -1,   172,    -1,   174,    -1,
     176,    -1,   178,   179,   180,    -1,   182,    -1,   184,   185,
      -1,    -1,   188,   189,   190,   191,    -1,   193,   194,   195,
     196,   197,   198,   199,    -1,   201,   202,   203,   204,    -1,
     206,   207,   208,   209,   210,   211,   212,    -1,   214,    -1,
     216,   217,   218,   219,   220,   221,   222,   223,    -1,   225,
      -1,   227,    -1,    -1,   230,    -1,   232,   233,   234,   235,
     236,   237,   238,    -1,    -1,   241,    -1,   243,    -1,    -1,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
      -1,   277,   278,   279,   280,   281,   282,    -1,   284,   285,
      -1,   287,    -1,   289,   290,   291,   292,   293,   294,    -1,
     296,   297,    -1,    -1,   300,   301,   302,    -1,    -1,   305,
     306,   307,    -1,   309,    -1,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
     326,   327,    -1,   329,   330,   331,    -1,   333,   334,   335,
     336,   337,   338,    -1,   340,   341,   342,   343,   344,   345,
     346,   347,    -1,   349,   350,   351,   352,   353,   354,   355,
     356,    -1,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,    -1,   373,   374,    -1,
     376,   377,   378,   379,   380,   381,   382,   383,   384,   385,
     386,   387,   388,   389,   390,   391,   392,   393,    -1,   395,
     396,   397,   398,   399,   400,   401,   402,   403,   404,    -1,
      -1,   407,   408,   409,   410,    -1,   412,   413,   414,   415,
     416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,    -1,    -1,   430,   431,   432,   433,    -1,   435,
     436,   437,   438,   439,    -1,   441,   442,   443,    -1,   445,
      -1,   447,   448,   449,   450,   451,    -1,   453,   454,   455,
     456,   457,   458,   459,   460,    -1,    -1,   463,   464,   465,
     466,   467,   468,   469,   470,    -1,   472,   473,   474,   475,
     476,   477,   478,    -1,   480,    -1,   482,   483,   484,   485,
     486,   487,   488,   489,   490,    -1,    -1,   493,    -1,   495,
     496,   497,   498,   499,   500,   501,   502,   503,   504,   505,
     506,   507,   508,   509,   510,   511,   512,   513,   514,   515,
     516,     3,    -1,   519,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   533,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    -1,
      32,    33,    34,    -1,    -1,    -1,    -1,    -1,    40,    -1,
      -1,    -1,    -1,    45,    46,    -1,    48,    49,    50,    -1,
      52,    53,    54,    55,    56,    -1,    58,    59,    -1,    61,
      62,    63,    64,    65,    66,    -1,    -1,    69,    70,    71,
      72,    73,    74,    75,    -1,    77,    78,    79,    80,    81,
      -1,    -1,    -1,    85,    86,    87,    88,    89,    90,    -1,
      92,    93,    94,    -1,    96,    97,    98,    99,   100,   101,
      -1,    -1,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,    -1,   120,    -1,
     122,   123,   124,   125,   126,   127,    -1,    -1,   130,   131,
     132,   133,   134,    -1,    -1,   137,   138,   139,   140,   141,
     142,   143,    -1,   145,   146,   147,    -1,   149,   150,   151,
      -1,   153,   154,   155,   156,   157,   158,   159,   160,   161,
     162,   163,    -1,   165,    -1,   167,   168,   169,   170,    -1,
     172,    -1,   174,    -1,   176,    -1,   178,   179,   180,    -1,
     182,    -1,   184,   185,    -1,    -1,   188,   189,   190,   191,
      -1,   193,   194,   195,   196,   197,   198,   199,    -1,   201,
     202,   203,   204,    -1,   206,   207,   208,   209,   210,   211,
     212,    -1,   214,    -1,   216,   217,   218,   219,   220,   221,
     222,   223,    -1,   225,    -1,   227,    -1,    -1,   230,    -1,
     232,   233,   234,   235,   236,   237,   238,    -1,    -1,   241,
      -1,   243,    -1,    -1,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,    -1,   277,   278,   279,   280,   281,
     282,    -1,   284,   285,    -1,   287,    -1,   289,   290,   291,
     292,   293,   294,    -1,   296,   297,    -1,    -1,   300,   301,
     302,    -1,    -1,   305,   306,   307,    -1,   309,    -1,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,   323,   324,   325,   326,   327,    -1,   329,   330,   331,
      -1,   333,   334,   335,   336,   337,   338,    -1,   340,   341,
     342,   343,   344,   345,   346,   347,    -1,   349,   350,   351,
     352,   353,   354,   355,   356,    -1,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
      -1,   373,   374,    -1,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,   386,   387,   388,   389,   390,   391,
     392,   393,    -1,   395,   396,   397,   398,   399,   400,   401,
     402,   403,   404,    -1,    -1,   407,   408,   409,   410,    -1,
     412,   413,   414,   415,   416,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,    -1,    -1,   430,   431,
     432,   433,    -1,   435,   436,   437,   438,   439,    -1,   441,
     442,   443,    -1,   445,    -1,   447,   448,   449,   450,   451,
      -1,   453,   454,   455,   456,   457,   458,   459,   460,    -1,
      -1,   463,   464,   465,   466,   467,   468,   469,   470,    -1,
     472,   473,   474,   475,   476,   477,   478,    -1,   480,    -1,
     482,   483,   484,   485,   486,   487,   488,   489,   490,    -1,
      -1,   493,    -1,   495,   496,   497,   498,   499,   500,   501,
     502,   503,   504,   505,   506,   507,   508,   509,   510,   511,
     512,   513,   514,   515,   516,    -1,     3,   519,     5,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   533,    -1,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    -1,    32,    33,    34,    -1,    -1,
      -1,    -1,    -1,    40,    -1,    -1,    -1,    -1,    45,    46,
      -1,    48,    49,    50,    -1,    52,    53,    54,    55,    56,
      -1,    58,    59,    -1,    61,    62,    63,    64,    65,    66,
      -1,    -1,    69,    70,    71,    72,    73,    74,    75,    -1,
      77,    78,    79,    80,    81,    -1,    -1,    -1,    85,    86,
      87,    88,    89,    90,    -1,    92,    93,    94,    -1,    96,
      97,    98,    99,   100,   101,    -1,    -1,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,   118,    -1,   120,    -1,   122,   123,   124,   125,   126,
     127,    -1,    -1,   130,   131,   132,   133,   134,    -1,    -1,
     137,   138,   139,   140,   141,   142,   143,    -1,   145,   146,
     147,    -1,   149,   150,   151,    -1,   153,   154,   155,   156,
     157,   158,   159,   160,   161,   162,   163,    -1,   165,    -1,
     167,   168,   169,   170,    -1,   172,    -1,   174,    -1,    -1,
      -1,   178,   179,   180,    -1,   182,    -1,   184,   185,    -1,
      -1,   188,   189,   190,   191,    -1,   193,   194,   195,   196,
     197,   198,   199,    -1,   201,   202,   203,   204,    -1,   206,
     207,   208,   209,   210,   211,   212,    -1,   214,    -1,   216,
     217,   218,   219,   220,   221,   222,   223,    -1,   225,    -1,
     227,    -1,    -1,   230,    -1,   232,   233,   234,   235,   236,
     237,   238,    -1,    -1,   241,    -1,   243,    -1,    -1,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,    -1,
     277,   278,   279,   280,   281,   282,    -1,   284,   285,    -1,
     287,    -1,   289,   290,   291,   292,   293,   294,    -1,   296,
     297,    -1,    -1,   300,   301,   302,    -1,    -1,   305,   306,
     307,    -1,   309,    -1,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,   323,   324,    -1,    -1,
      -1,    -1,   329,   330,   331,    -1,   333,   334,   335,   336,
     337,   338,    -1,   340,   341,   342,   343,   344,   345,   346,
     347,    -1,   349,   350,   351,   352,   353,   354,   355,   356,
      -1,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,   370,   371,    -1,   373,   374,    -1,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,   386,
     387,   388,   389,   390,   391,   392,    -1,    -1,   395,   396,
     397,   398,   399,   400,   401,   402,   403,   404,    -1,    -1,
     407,   408,   409,   410,    -1,   412,   413,   414,   415,   416,
     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
     427,    -1,    -1,   430,   431,    -1,   433,    -1,   435,   436,
     437,   438,   439,    -1,   441,   442,   443,    -1,   445,    -1,
     447,   448,   449,   450,   451,    -1,   453,   454,   455,   456,
     457,   458,   459,   460,    -1,    -1,   463,   464,   465,    -1,
     467,   468,   469,   470,    -1,   472,   473,   474,   475,   476,
     477,   478,    -1,   480,    -1,   482,   483,   484,   485,   486,
     487,   488,   489,   490,    -1,    -1,   493,    -1,    -1,   496,
     497,   498,   499,   500,   501,   502,   503,   504,   505,   506,
     507,   508,   509,   510,   511,   512,   513,   514,   515,   516,
       3,    -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   533,    -1,    -1,    22,
      23,    24,    25,    26,    27,    28,    29,    30,    -1,    32,
      33,    34,    -1,    -1,    -1,    -1,    -1,    40,    -1,    -1,
      -1,    -1,    45,    46,    -1,    48,    49,    50,    -1,    52,
      53,    54,    55,    56,    -1,    58,    59,    -1,    61,    62,
      63,    64,    65,    66,    -1,    -1,    69,    70,    71,    72,
      73,    74,    75,    -1,    77,    78,    79,    80,    81,    -1,
      -1,    -1,    85,    86,    87,    88,    89,    90,    -1,    92,
      93,    94,    -1,    96,    97,    98,    99,   100,   101,    -1,
      -1,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,   117,   118,    -1,   120,    -1,   122,
     123,   124,   125,   126,   127,    -1,    -1,   130,   131,   132,
     133,   134,    -1,    -1,   137,   138,   139,   140,   141,   142,
     143,    -1,   145,   146,   147,    -1,   149,   150,   151,    -1,
     153,   154,   155,   156,   157,   158,   159,   160,   161,   162,
     163,    -1,   165,    -1,   167,   168,   169,   170,    -1,   172,
      -1,   174,    -1,    -1,    -1,   178,   179,   180,    -1,   182,
      -1,   184,   185,    -1,    -1,   188,   189,   190,   191,    -1,
     193,   194,   195,   196,   197,   198,   199,    -1,   201,   202,
     203,   204,    -1,   206,   207,   208,   209,   210,   211,   212,
      -1,   214,    -1,   216,   217,   218,   219,   220,   221,   222,
     223,    -1,   225,    -1,   227,    -1,    -1,   230,    -1,   232,
     233,   234,   235,   236,   237,   238,    -1,    -1,   241,    -1,
     243,    -1,    -1,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,    -1,   277,   278,   279,   280,   281,   282,
      -1,   284,   285,    -1,   287,    -1,   289,   290,   291,   292,
     293,   294,    -1,   296,   297,    -1,    -1,   300,   301,   302,
      -1,    -1,   305,   306,   307,    -1,   309,    -1,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
     323,   324,    -1,    -1,    -1,    -1,   329,   330,   331,    -1,
     333,   334,   335,   336,   337,   338,    -1,   340,   341,   342,
     343,   344,   345,   346,   347,    -1,   349,   350,   351,   352,
     353,   354,   355,   356,    -1,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,   371,    -1,
     373,   374,    -1,   376,   377,   378,   379,   380,   381,   382,
     383,   384,   385,   386,   387,   388,   389,   390,   391,   392,
      -1,    -1,   395,   396,   397,   398,   399,   400,   401,   402,
     403,   404,    -1,    -1,   407,   408,   409,   410,    -1,   412,
     413,   414,   415,   416,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,   427,    -1,    -1,   430,   431,    -1,
     433,    -1,   435,   436,   437,   438,   439,    -1,   441,   442,
     443,    -1,   445,    -1,   447,   448,   449,   450,   451,    -1,
     453,   454,   455,   456,   457,   458,   459,   460,    -1,    -1,
     463,   464,   465,    -1,   467,   468,   469,   470,    -1,   472,
     473,   474,   475,   476,   477,   478,    -1,   480,    -1,   482,
     483,   484,   485,   486,   487,   488,   489,   490,    -1,    -1,
     493,    -1,    -1,   496,   497,   498,   499,   500,   501,   502,
     503,   504,   505,   506,   507,   508,   509,   510,   511,   512,
     513,   514,   515,   516,     3,    -1,     5,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     533,    -1,    -1,    22,    23,    24,    25,    26,    27,    28,
      29,    30,    -1,    32,    33,    34,    -1,    -1,    -1,    -1,
      -1,    40,    -1,    -1,    -1,    -1,    45,    46,    -1,    48,
      49,    50,    -1,    52,    53,    54,    55,    56,    -1,    58,
      59,    -1,    61,    62,    63,    64,    65,    66,    -1,    -1,
      69,    70,    71,    72,    73,    74,    75,    -1,    77,    78,
      79,    80,    81,    -1,    -1,    -1,    85,    86,    87,    88,
      89,    90,    -1,    92,    93,    94,    -1,    96,    97,    98,
      99,   100,   101,    -1,    -1,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
      -1,   120,    -1,   122,   123,   124,   125,   126,   127,    -1,
      -1,   130,   131,   132,   133,   134,    -1,    -1,   137,   138,
     139,   140,   141,   142,   143,    -1,   145,   146,   147,    -1,
     149,   150,   151,    -1,   153,   154,   155,   156,   157,   158,
     159,   160,   161,   162,   163,    -1,   165,    -1,   167,   168,
     169,   170,    -1,   172,    -1,   174,    -1,    -1,    -1,   178,
     179,   180,    -1,   182,    -1,   184,   185,    -1,    -1,   188,
     189,   190,   191,    -1,   193,   194,   195,   196,   197,   198,
     199,    -1,   201,   202,   203,   204,    -1,   206,   207,   208,
     209,   210,   211,   212,    -1,   214,    -1,   216,   217,   218,
     219,   220,   221,   222,   223,    -1,   225,    -1,   227,    -1,
      -1,   230,    -1,   232,   233,   234,   235,   236,   237,   238,
      -1,    -1,   241,    -1,   243,    -1,    -1,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,    -1,   277,   278,
     279,   280,   281,   282,    -1,   284,   285,    -1,   287,    -1,
     289,   290,   291,   292,   293,   294,    -1,   296,   297,    -1,
      -1,   300,   301,   302,    -1,    -1,   305,   306,   307,    -1,
     309,    -1,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,    -1,    -1,    -1,    -1,
     329,   330,   331,    -1,   333,   334,   335,   336,   337,   338,
      -1,   340,   341,   342,   343,   344,   345,   346,   347,    -1,
     349,   350,   351,   352,   353,   354,   355,   356,    -1,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,   371,    -1,   373,   374,    -1,   376,   377,   378,
     379,   380,   381,   382,   383,   384,   385,   386,   387,   388,
     389,   390,   391,   392,    -1,    -1,   395,   396,   397,   398,
     399,   400,   401,   402,   403,   404,    -1,    -1,   407,   408,
     409,   410,    -1,   412,   413,   414,   415,   416,   417,   418,
     419,   420,   421,   422,   423,   424,   425,   426,   427,    -1,
      -1,   430,   431,    -1,   433,    -1,   435,   436,   437,   438,
     439,    -1,   441,   442,   443,    -1,   445,    -1,   447,   448,
     449,   450,   451,    -1,   453,   454,   455,   456,   457,   458,
     459,   460,    -1,    -1,   463,   464,   465,    -1,   467,   468,
     469,   470,    -1,   472,   473,   474,   475,   476,   477,   478,
      -1,   480,    -1,   482,   483,   484,   485,   486,   487,   488,
     489,   490,    -1,    -1,   493,    -1,    -1,   496,   497,   498,
     499,   500,   501,   502,   503,   504,   505,   506,   507,   508,
     509,   510,   511,   512,   513,   514,   515,   516,     3,    -1,
       5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   533,    -1,    -1,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    -1,    32,    33,    34,
      -1,    -1,    -1,    -1,    -1,    40,    -1,    -1,    -1,    -1,
      45,    46,    -1,    48,    49,    50,    -1,    52,    53,    54,
      55,    56,    -1,    58,    59,    -1,    61,    62,    63,    64,
      65,    66,    -1,    -1,    69,    70,    71,    72,    73,    74,
      75,    -1,    77,    78,    79,    80,    81,    -1,    -1,    -1,
      85,    86,    87,    88,    89,    90,    -1,    92,    93,    94,
      -1,    96,    97,    98,    99,   100,   101,    -1,    -1,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,    -1,   120,    -1,   122,   123,   124,
     125,   126,   127,    -1,    -1,   130,   131,   132,   133,   134,
      -1,    -1,   137,   138,   139,   140,   141,   142,   143,    -1,
     145,   146,   147,    -1,   149,   150,   151,    -1,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,   163,    -1,
     165,    -1,   167,   168,   169,   170,    -1,   172,    -1,   174,
      -1,    -1,    -1,   178,   179,   180,    -1,   182,    -1,   184,
     185,    -1,    -1,   188,   189,   190,   191,    -1,   193,   194,
     195,   196,   197,   198,   199,    -1,   201,   202,   203,   204,
      -1,   206,   207,   208,   209,   210,   211,   212,    -1,   214,
      -1,   216,   217,   218,   219,   220,   221,   222,   223,    -1,
     225,    -1,   227,    -1,    -1,   230,    -1,   232,   233,   234,
     235,   236,   237,   238,    -1,    -1,   241,    -1,   243,    -1,
      -1,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,    -1,   277,   278,   279,   280,   281,   282,    -1,   284,
     285,    -1,   287,    -1,   289,   290,   291,   292,   293,   294,
      -1,   296,   297,    -1,    -1,   300,   301,   302,    -1,    -1,
     305,   306,   307,    -1,   309,    -1,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
      -1,    -1,    -1,    -1,   329,   330,   331,    -1,   333,   334,
     335,   336,   337,   338,    -1,   340,   341,   342,   343,   344,
     345,   346,   347,    -1,   349,   350,   351,   352,   353,   354,
     355,   356,    -1,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,    -1,   373,   374,
      -1,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,    -1,    -1,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
      -1,    -1,   407,   408,   409,   410,    -1,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,    -1,    -1,   430,   431,    -1,   433,    -1,
     435,   436,   437,   438,   439,    -1,   441,   442,   443,    -1,
     445,    -1,   447,   448,   449,   450,   451,    -1,   453,   454,
     455,   456,   457,   458,   459,   460,    -1,    -1,   463,   464,
     465,    -1,   467,   468,   469,   470,    -1,   472,   473,   474,
     475,   476,   477,   478,    -1,   480,    -1,   482,   483,   484,
     485,   486,   487,   488,   489,   490,    -1,    -1,   493,    -1,
      -1,   496,   497,   498,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,     3,    -1,     5,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   533,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    30,
      -1,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,    40,
      -1,    -1,    -1,    -1,    45,    46,    -1,    48,    49,    50,
      -1,    52,    53,    54,    55,    56,    -1,    58,    59,    -1,
      61,    62,    63,    64,    65,    66,    -1,    -1,    69,    70,
      71,    72,    73,    74,    75,    -1,    77,    78,    79,    80,
      81,    -1,    -1,    -1,    85,    86,    87,    88,    89,    90,
      -1,    92,    93,    94,    -1,    96,    97,    98,    99,   100,
     101,    -1,    -1,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,    -1,   120,
      -1,   122,   123,   124,   125,   126,   127,    -1,    -1,   130,
     131,   132,   133,   134,    -1,    -1,   137,   138,   139,   140,
     141,   142,   143,    -1,   145,   146,   147,    -1,   149,   150,
     151,    -1,   153,   154,   155,   156,   157,   158,   159,   160,
     161,   162,   163,    -1,   165,    -1,   167,   168,   169,   170,
      -1,   172,    -1,   174,    -1,    -1,    -1,   178,   179,   180,
      -1,   182,    -1,   184,   185,    -1,    -1,   188,   189,   190,
     191,    -1,   193,   194,   195,   196,   197,   198,   199,    -1,
     201,   202,   203,   204,    -1,   206,   207,   208,   209,   210,
     211,   212,    -1,   214,    -1,   216,   217,   218,   219,   220,
     221,   222,   223,    -1,   225,    -1,   227,    -1,    -1,   230,
      -1,   232,   233,   234,   235,   236,   237,   238,    -1,    -1,
     241,    -1,   243,    -1,    -1,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,    -1,   277,   278,   279,   280,
     281,   282,    -1,   284,   285,    -1,   287,    -1,   289,   290,
     291,   292,   293,   294,    -1,   296,   297,    -1,    -1,   300,
     301,   302,    -1,    -1,   305,   306,   307,    -1,   309,    -1,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,   322,   323,   324,    -1,    -1,    -1,    -1,   329,   330,
     331,    -1,   333,   334,   335,   336,   337,   338,    -1,   340,
     341,   342,   343,   344,   345,   346,   347,    -1,   349,   350,
     351,   352,   353,   354,   355,   356,    -1,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,    -1,   373,   374,    -1,   376,   377,   378,   379,   380,
     381,   382,   383,   384,   385,   386,   387,   388,   389,   390,
     391,   392,    -1,    -1,   395,   396,   397,   398,   399,   400,
     401,   402,   403,   404,    -1,    -1,   407,   408,   409,   410,
      -1,   412,   413,   414,   415,   416,   417,   418,   419,   420,
     421,   422,   423,   424,   425,   426,   427,    -1,    -1,   430,
     431,    -1,   433,    -1,   435,   436,   437,   438,   439,    -1,
     441,   442,   443,    -1,   445,    -1,   447,   448,   449,   450,
     451,    -1,   453,   454,   455,   456,   457,   458,   459,   460,
      -1,    -1,   463,   464,   465,    -1,   467,   468,   469,   470,
      -1,   472,   473,   474,   475,   476,   477,   478,    -1,   480,
      -1,   482,   483,   484,   485,   486,   487,   488,   489,   490,
      -1,    -1,   493,    -1,    -1,   496,   497,   498,   499,   500,
     501,   502,   503,   504,   505,   506,   507,   508,   509,   510,
     511,   512,   513,   514,   515,   516,     3,    -1,     5,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   533,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    -1,    32,    33,    34,    -1,    -1,
      -1,    -1,    -1,    40,    -1,    -1,    -1,    -1,    45,    46,
      -1,    48,    49,    50,    -1,    52,    53,    54,    55,    56,
      -1,    58,    59,    -1,    61,    62,    63,    64,    65,    66,
      -1,    -1,    69,    70,    71,    72,    73,    74,    75,    -1,
      77,    78,    79,    80,    81,    -1,    -1,    -1,    85,    86,
      87,    88,    89,    90,    -1,    92,    93,    94,    -1,    96,
      97,    98,    99,   100,   101,    -1,    -1,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,   118,    -1,   120,    -1,   122,   123,   124,   125,   126,
     127,    -1,    -1,   130,   131,   132,   133,   134,    -1,    -1,
     137,   138,   139,   140,   141,   142,   143,    -1,   145,   146,
     147,    -1,   149,   150,   151,    -1,   153,   154,   155,   156,
     157,   158,   159,   160,   161,   162,   163,    -1,   165,    -1,
     167,   168,   169,   170,    -1,   172,    -1,   174,    -1,    -1,
      -1,   178,   179,   180,    -1,   182,    -1,   184,   185,    -1,
      -1,   188,   189,   190,   191,    -1,   193,   194,   195,   196,
     197,   198,   199,    -1,   201,   202,   203,   204,    -1,   206,
     207,   208,   209,   210,   211,   212,    -1,   214,    -1,   216,
     217,   218,   219,   220,   221,   222,   223,    -1,   225,    -1,
     227,    -1,    -1,   230,    -1,   232,   233,   234,   235,   236,
     237,   238,    -1,    -1,   241,    -1,   243,    -1,    -1,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,    -1,
     277,   278,   279,   280,   281,   282,    -1,   284,   285,    -1,
     287,    -1,   289,   290,   291,   292,   293,   294,    -1,   296,
     297,    -1,    -1,   300,   301,   302,    -1,    -1,   305,   306,
     307,    -1,   309,    -1,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,   323,   324,    -1,    -1,
      -1,    -1,   329,   330,   331,    -1,   333,   334,   335,   336,
     337,   338,    -1,   340,   341,   342,   343,   344,   345,   346,
     347,    -1,   349,   350,   351,   352,   353,   354,   355,   356,
      -1,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,   370,   371,    -1,   373,   374,    -1,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,   386,
     387,   388,   389,   390,   391,   392,    -1,    -1,   395,   396,
     397,   398,   399,   400,   401,   402,   403,   404,    -1,    -1,
     407,   408,   409,   410,    -1,   412,   413,   414,   415,   416,
     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
     427,    -1,    -1,   430,   431,    -1,   433,    -1,   435,   436,
     437,   438,   439,    -1,   441,   442,   443,    -1,   445,    -1,
     447,   448,   449,   450,   451,    -1,   453,   454,   455,   456,
     457,   458,   459,   460,    -1,    -1,   463,   464,   465,    -1,
     467,   468,   469,   470,    -1,   472,   473,   474,   475,   476,
     477,   478,    -1,   480,    -1,   482,   483,   484,   485,   486,
     487,   488,   489,   490,    -1,    -1,   493,    -1,    -1,   496,
     497,   498,   499,   500,   501,   502,   503,   504,   505,   506,
     507,   508,   509,   510,   511,   512,   513,   514,   515,   516,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   533,    -1,    -1,    22,
      23,    24,    25,    26,    27,    28,    29,    30,    -1,    32,
      33,    34,    -1,    -1,    -1,    -1,    -1,    40,    -1,    -1,
      -1,    -1,    45,    46,    -1,    48,    49,    50,    -1,    52,
      53,    54,    55,    56,    -1,    58,    59,    -1,    61,    62,
      63,    64,    65,    66,    -1,    -1,    69,    70,    71,    72,
      73,    74,    75,    -1,    77,    78,    79,    80,    81,    -1,
      -1,    -1,    85,    86,    87,    88,    89,    90,    -1,    92,
      93,    94,    -1,    96,    97,    98,    99,   100,   101,    -1,
      -1,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,   117,   118,    -1,   120,    -1,   122,
     123,   124,   125,   126,   127,    -1,    -1,   130,   131,   132,
     133,   134,    -1,    -1,   137,   138,   139,   140,   141,   142,
     143,    -1,   145,   146,   147,    -1,   149,   150,   151,    -1,
     153,   154,   155,   156,   157,   158,   159,   160,   161,   162,
     163,    -1,   165,    -1,   167,   168,   169,   170,    -1,   172,
      -1,   174,    -1,    -1,    -1,   178,   179,   180,    -1,   182,
      -1,   184,   185,    -1,    -1,   188,   189,   190,   191,    -1,
     193,   194,   195,   196,   197,   198,   199,    -1,   201,   202,
     203,   204,    -1,   206,   207,   208,   209,   210,   211,   212,
      -1,   214,    -1,   216,   217,   218,   219,   220,   221,   222,
     223,    -1,   225,    -1,   227,    -1,    -1,   230,    -1,   232,
     233,   234,   235,   236,   237,   238,    -1,    -1,   241,    -1,
     243,    -1,    -1,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,    -1,   277,   278,   279,   280,   281,   282,
      -1,   284,   285,    -1,   287,    -1,   289,   290,   291,   292,
     293,   294,    -1,   296,   297,    -1,    -1,   300,   301,   302,
      -1,    -1,   305,   306,   307,    -1,   309,    -1,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
     323,   324,    -1,    -1,    -1,    -1,   329,   330,   331,    -1,
     333,   334,   335,   336,   337,   338,    -1,   340,   341,   342,
     343,   344,   345,   346,   347,    -1,   349,   350,   351,   352,
     353,   354,   355,   356,    -1,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,   371,    -1,
     373,   374,    -1,   376,   377,   378,   379,   380,   381,   382,
     383,   384,   385,   386,   387,   388,   389,   390,   391,   392,
      -1,    -1,   395,   396,   397,   398,   399,   400,   401,   402,
     403,   404,    -1,    -1,   407,   408,   409,   410,    -1,   412,
     413,   414,   415,   416,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,   427,    -1,    -1,   430,   431,    -1,
     433,    -1,   435,   436,   437,   438,   439,    -1,   441,   442,
     443,    -1,   445,    -1,   447,   448,   449,   450,   451,    -1,
     453,   454,   455,   456,   457,   458,   459,   460,    -1,    -1,
     463,   464,   465,    -1,   467,   468,   469,   470,    -1,   472,
     473,   474,   475,   476,   477,   478,    -1,   480,    -1,   482,
     483,   484,   485,   486,   487,   488,   489,   490,    -1,    -1,
     493,    -1,    -1,   496,   497,   498,   499,   500,   501,   502,
     503,   504,   505,   506,   507,   508,   509,   510,   511,   512,
     513,   514,   515,   516,     3,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     533,    -1,    -1,    22,    23,    24,    25,    26,    27,    28,
      29,    30,    -1,    32,    33,    34,    -1,    -1,    -1,    -1,
      -1,    40,    -1,    -1,    -1,    -1,    45,    46,    -1,    48,
      49,    50,    -1,    52,    53,    54,    55,    56,    -1,    58,
      59,    -1,    61,    62,    63,    64,    65,    66,    -1,    -1,
      69,    70,    71,    72,    73,    74,    75,    -1,    77,    78,
      79,    80,    81,    -1,    -1,    -1,    85,    86,    87,    88,
      89,    90,    -1,    92,    93,    94,    -1,    96,    97,    98,
      99,   100,   101,    -1,    -1,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
      -1,   120,    -1,   122,   123,   124,   125,   126,   127,    -1,
      -1,   130,   131,   132,   133,   134,    -1,    -1,   137,   138,
     139,   140,   141,   142,   143,    -1,   145,   146,   147,    -1,
     149,   150,   151,    -1,   153,   154,   155,   156,   157,   158,
     159,   160,   161,   162,   163,    -1,   165,    -1,   167,   168,
     169,   170,    -1,   172,    -1,   174,    -1,    -1,    -1,   178,
     179,   180,    -1,   182,    -1,   184,   185,    -1,    -1,   188,
     189,   190,   191,    -1,   193,   194,   195,   196,   197,   198,
     199,    -1,   201,   202,   203,   204,    -1,   206,   207,   208,
     209,   210,   211,   212,    -1,   214,    -1,   216,   217,   218,
     219,   220,   221,   222,   223,    -1,   225,    -1,   227,    -1,
      -1,   230,    -1,   232,   233,   234,   235,   236,   237,   238,
      -1,    -1,   241,    -1,   243,    -1,    -1,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,    -1,   277,   278,
     279,   280,   281,   282,    -1,   284,   285,    -1,   287,    -1,
     289,   290,   291,   292,   293,   294,    -1,   296,   297,    -1,
      -1,   300,   301,   302,    -1,    -1,   305,   306,   307,    -1,
     309,    -1,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,    -1,    -1,    -1,    -1,
     329,   330,   331,    -1,   333,   334,   335,   336,   337,   338,
      -1,   340,   341,   342,   343,   344,   345,   346,   347,    -1,
     349,   350,   351,   352,   353,   354,   355,   356,    -1,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,   371,    -1,   373,   374,    -1,   376,   377,   378,
     379,   380,   381,   382,   383,   384,   385,   386,   387,   388,
     389,   390,   391,   392,    -1,    -1,   395,   396,   397,   398,
     399,   400,   401,   402,   403,   404,    -1,    -1,   407,   408,
     409,   410,    -1,   412,   413,   414,   415,   416,   417,   418,
     419,   420,   421,   422,   423,   424,   425,   426,   427,    -1,
      -1,   430,   431,    -1,   433,    -1,   435,   436,   437,   438,
     439,    -1,   441,   442,   443,    -1,   445,    -1,   447,   448,
     449,   450,   451,    -1,   453,   454,   455,   456,   457,   458,
     459,   460,    -1,    -1,   463,   464,   465,    -1,   467,   468,
     469,   470,    -1,   472,   473,   474,   475,   476,   477,   478,
      -1,   480,    -1,   482,   483,   484,   485,   486,   487,   488,
     489,   490,    -1,    -1,   493,    -1,    -1,   496,   497,   498,
     499,   500,   501,   502,   503,   504,   505,   506,   507,   508,
     509,   510,   511,   512,   513,   514,   515,   516,     3,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   533,    -1,    -1,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    -1,    32,    33,    34,
      -1,    -1,    -1,    -1,    -1,    40,    -1,    -1,    -1,    -1,
      45,    46,    -1,    48,    49,    50,    -1,    52,    53,    54,
      55,    56,    -1,    58,    59,    -1,    61,    62,    63,    64,
      65,    66,    -1,    -1,    69,    70,    71,    72,    73,    74,
      75,    -1,    77,    78,    79,    80,    81,    -1,    -1,    -1,
      85,    86,    87,    88,    89,    90,    -1,    92,    93,    94,
      -1,    96,    97,    98,    99,   100,   101,    -1,    -1,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,    -1,   120,    -1,   122,   123,   124,
     125,   126,   127,    -1,    -1,   130,   131,   132,   133,   134,
      -1,    -1,   137,   138,   139,   140,   141,   142,   143,    -1,
     145,   146,   147,    -1,   149,   150,   151,    -1,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,   163,    -1,
     165,    -1,   167,   168,   169,   170,    -1,   172,    -1,   174,
      -1,    -1,    -1,   178,   179,   180,    -1,   182,    -1,   184,
     185,    -1,    -1,   188,   189,   190,   191,    -1,   193,   194,
     195,   196,   197,   198,   199,    -1,   201,   202,   203,   204,
      -1,   206,   207,   208,   209,   210,   211,   212,    -1,   214,
      -1,   216,   217,   218,   219,   220,   221,   222,   223,    -1,
     225,    -1,   227,    -1,    -1,   230,    -1,   232,   233,   234,
     235,   236,   237,   238,    -1,    -1,   241,    -1,   243,    -1,
      -1,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,    -1,   277,   278,   279,   280,   281,   282,    -1,   284,
     285,    -1,   287,    -1,   289,   290,   291,   292,   293,   294,
      -1,   296,   297,    -1,    -1,   300,   301,   302,    -1,    -1,
     305,   306,   307,    -1,   309,    -1,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
      -1,    -1,    -1,    -1,   329,   330,   331,    -1,   333,   334,
     335,   336,   337,   338,    -1,   340,   341,   342,   343,   344,
     345,   346,   347,    -1,   349,   350,   351,   352,   353,   354,
     355,   356,    -1,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,    -1,   373,   374,
      -1,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,    -1,    -1,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
      -1,    -1,   407,   408,   409,   410,    -1,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,    -1,    -1,   430,   431,    -1,   433,    -1,
     435,   436,   437,   438,   439,    -1,   441,   442,   443,    -1,
     445,    -1,   447,   448,   449,   450,   451,    -1,   453,   454,
     455,   456,   457,   458,   459,   460,    -1,    -1,   463,   464,
     465,    -1,   467,   468,   469,   470,    -1,   472,   473,   474,
     475,   476,   477,   478,    -1,   480,    -1,   482,   483,   484,
     485,   486,   487,   488,   489,   490,    -1,    -1,   493,    -1,
      -1,   496,   497,   498,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   533,    -1,
      -1,    22,    23,    24,    25,    -1,    27,    28,    29,    30,
      -1,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    45,    46,    -1,    48,    49,    50,
      -1,    52,    53,    54,    55,    56,    -1,    58,    59,    -1,
      61,    62,    63,    64,    65,    66,    -1,    -1,    69,    70,
      71,    72,    73,    74,    75,    -1,    77,    78,    79,    80,
      81,    -1,    -1,    -1,    -1,    86,    87,    88,    89,    90,
      -1,    92,    93,    94,    -1,    96,    97,    98,    99,   100,
      -1,    -1,    -1,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,    -1,   120,
      -1,   122,   123,   124,   125,   126,   127,   128,   129,    -1,
     131,   132,   133,   134,    -1,    -1,   137,   138,   139,   140,
     141,    -1,    -1,    -1,   145,   146,   147,    -1,   149,   150,
     151,    -1,   153,   154,   155,   156,   157,   158,   159,   160,
     161,   162,   163,    -1,   165,    -1,   167,   168,   169,   170,
      -1,   172,    -1,   174,    -1,   176,    -1,   178,   179,   180,
      -1,   182,    -1,   184,    -1,    -1,    -1,   188,   189,    -1,
     191,    -1,   193,   194,   195,   196,   197,   198,   199,    -1,
     201,   202,   203,   204,    -1,   206,   207,   208,   209,   210,
     211,   212,    -1,   214,    -1,   216,   217,   218,   219,   220,
     221,   222,   223,    -1,   225,    -1,   227,    -1,    -1,   230,
      -1,   232,    -1,   234,   235,   236,   237,   238,    -1,    -1,
     241,    -1,   243,    -1,    -1,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,    -1,   277,   278,   279,   280,
      -1,   282,    -1,   284,   285,    -1,   287,    -1,   289,   290,
     291,   292,   293,   294,    -1,   296,   297,    -1,    -1,   300,
     301,   302,    -1,    -1,   305,   306,   307,    -1,   309,    -1,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
      -1,    -1,   323,   324,   325,   326,   327,    -1,   329,   330,
     331,    -1,   333,   334,   335,   336,   337,   338,    -1,   340,
     341,   342,   343,   344,    -1,    -1,   347,    -1,   349,   350,
     351,   352,   353,   354,   355,   356,    -1,   358,   359,   360,
      -1,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,    -1,   373,   374,    -1,   376,   377,   378,   379,   380,
     381,   382,   383,   384,   385,   386,   387,   388,   389,   390,
     391,   392,   393,    -1,   395,   396,   397,   398,   399,   400,
     401,   402,   403,    -1,   405,    -1,    -1,   408,   409,   410,
      -1,    -1,   413,   414,   415,   416,   417,   418,   419,   420,
     421,   422,   423,   424,   425,   426,   427,   428,    -1,   430,
     431,   432,   433,    -1,   435,   436,   437,   438,   439,    -1,
     441,   442,   443,    -1,    -1,    -1,   447,   448,   449,   450,
     451,    -1,   453,   454,   455,   456,   457,   458,   459,   460,
      -1,    -1,   463,   464,   465,   466,   467,   468,   469,   470,
      -1,   472,   473,   474,   475,   476,   477,   478,    -1,   480,
      -1,   482,    -1,   484,   485,   486,   487,    -1,   489,   490,
      -1,    -1,   493,    -1,   495,   496,   497,   498,   499,   500,
     501,   502,   503,   504,   505,   506,   507,   508,   509,   510,
     511,   512,   513,   514,   515,   516,    -1,    -1,   519,    -1,
      -1,     3,     4,     5,    -1,    -1,     8,     9,    -1,    -1,
      -1,    -1,   533,    15,    16,    -1,    -1,    19,    20,    21,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    -1,    56,    57,    58,    59,    60,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
      72,    73,    74,    75,    76,    77,    78,    79,    80,    -1,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    95,    96,    97,    98,    99,   100,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
     122,   123,   124,   125,   126,   127,   128,   129,   130,   131,
     132,   133,   134,   135,   136,   137,   138,   139,   140,   141,
     142,   143,   144,   145,   146,   147,   148,   149,   150,   151,
     152,   153,   154,   155,   156,    -1,   158,   159,   160,   161,
     162,    -1,   164,   165,   166,   167,   168,   169,   170,   171,
     172,   173,   174,   175,   176,   177,   178,   179,   180,   181,
     182,   183,   184,   185,   186,   187,    -1,    -1,   190,   191,
     192,   193,   194,   195,   196,   197,   198,   199,   200,   201,
     202,   203,   204,   205,   206,   207,   208,   209,   210,   211,
     212,   213,   214,   215,    -1,   217,   218,   219,   220,   221,
     222,   223,   224,   225,   226,   227,   228,   229,   230,   231,
     232,   233,   234,   235,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     282,   283,   284,   285,   286,   287,   288,    -1,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,    -1,   308,   309,   310,    -1,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,   323,   324,   325,   326,   327,   328,   329,   330,    -1,
     332,   333,   334,    -1,   336,   337,   338,   339,   340,   341,
     342,   343,   344,   345,   346,   347,   348,   349,   350,   351,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,    -1,   428,   429,   430,   431,
     432,   433,   434,   435,   436,   437,   438,   439,   440,   441,
     442,   443,   444,   445,   446,   447,   448,    -1,   450,    -1,
     452,   453,   454,   455,   456,   457,   458,   459,   460,   461,
     462,   463,   464,   465,   466,   467,   468,   469,   470,   471,
     472,   473,   474,   475,   476,    -1,   478,   479,   480,   481,
     482,   483,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,   498,   499,   500,   501,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   513,   514,   515,   516,    -1,     3,    -1,   520,   521,
     522,     8,   524,   525,   526,   527,   528,   529,    15,    16,
      -1,    -1,    19,    20,    21,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    -1,    32,    33,    34,    -1,    -1,
      -1,    -1,    -1,    40,    -1,    -1,    -1,    -1,    45,    46,
      -1,    48,    49,    50,    -1,    52,    53,    54,    55,    56,
      -1,    58,    59,    -1,    61,    62,    63,    64,    65,    66,
      -1,    -1,    69,    70,    71,    72,    73,    74,    75,    -1,
      77,    78,    79,    80,    81,    -1,    -1,    -1,    85,    86,
      87,    88,    89,    90,    -1,    92,    93,    94,    -1,    96,
      97,    98,    99,   100,   101,    -1,    -1,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,   118,    -1,   120,    -1,   122,   123,   124,   125,   126,
     127,    -1,    -1,   130,   131,   132,   133,   134,    -1,    -1,
     137,   138,   139,   140,   141,   142,   143,    -1,   145,   146,
     147,    -1,   149,   150,   151,    -1,   153,   154,   155,   156,
     157,   158,   159,   160,   161,   162,   163,    -1,   165,    -1,
     167,   168,   169,   170,    -1,   172,    -1,   174,    -1,    -1,
      -1,   178,   179,   180,    -1,   182,    -1,   184,   185,    -1,
      -1,   188,   189,   190,   191,    -1,   193,   194,   195,   196,
     197,   198,   199,    -1,   201,   202,   203,   204,    -1,   206,
     207,   208,   209,   210,   211,   212,    -1,   214,    -1,   216,
     217,   218,   219,   220,   221,   222,   223,    -1,   225,    -1,
     227,    -1,    -1,   230,    -1,   232,   233,   234,   235,   236,
     237,   238,    -1,    -1,   241,    -1,   243,    -1,    -1,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,    -1,
     277,   278,   279,   280,   281,   282,    -1,   284,   285,    -1,
     287,    -1,   289,   290,   291,   292,   293,   294,    -1,   296,
     297,    -1,    -1,   300,   301,   302,    -1,    -1,   305,   306,
     307,    -1,   309,    -1,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,   323,   324,    -1,    -1,
      -1,    -1,   329,   330,   331,    -1,   333,   334,   335,   336,
     337,   338,    -1,   340,   341,   342,   343,   344,   345,   346,
     347,    -1,   349,   350,   351,   352,   353,   354,   355,   356,
      -1,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,   370,   371,    -1,   373,   374,    -1,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,   386,
     387,   388,   389,   390,   391,   392,    -1,    -1,   395,   396,
     397,   398,   399,   400,   401,   402,   403,   404,    -1,    -1,
     407,   408,   409,   410,    -1,   412,   413,   414,   415,   416,
     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
     427,    -1,    -1,   430,   431,    -1,   433,    -1,   435,   436,
     437,   438,   439,    -1,   441,   442,   443,    -1,   445,    -1,
     447,   448,   449,   450,   451,    -1,   453,   454,   455,   456,
     457,   458,   459,   460,    -1,    -1,   463,   464,   465,    -1,
     467,   468,   469,   470,    -1,   472,   473,   474,   475,   476,
     477,   478,    -1,   480,    -1,   482,   483,   484,   485,   486,
     487,   488,   489,   490,    -1,    -1,   493,    -1,    -1,   496,
     497,   498,   499,   500,   501,   502,   503,   504,   505,   506,
     507,   508,   509,   510,   511,   512,   513,   514,   515,   516,
      -1,    -1,    -1,   520,   521,   522,    -1,   524,   525,   526,
     527,   528,   529,     8,    -1,    -1,    11,    -1,    -1,    -1,
      15,    16,    17,    18,    19,    20,    21,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     8,    -1,
      -1,    11,    37,    -1,    -1,    15,    16,    17,    18,    19,
      20,    21,    -1,    48,    -1,    -1,    -1,    -1,    -1,    -1,
      55,    -1,    -1,     8,    -1,    -1,    11,    37,    -1,    -1,
      15,    16,    17,    18,    19,    20,    21,    -1,    48,    -1,
      -1,    -1,    -1,    -1,    -1,    55,    -1,    82,    -1,    -1,
      -1,    -1,    37,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    48,    -1,    -1,     8,    -1,    -1,    11,
      55,    -1,    82,    15,    16,    17,    18,    19,    20,    21,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    37,    -1,    82,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    48,     8,    -1,    -1,
      11,    -1,    -1,    55,    15,    16,    17,    18,    19,    20,
      21,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    37,    -1,    -1,    -1,
      82,    -1,    -1,    -1,    -1,    -1,   181,    48,    -1,    -1,
      -1,    -1,    -1,    -1,    55,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   200,    -1,    -1,    -1,    -1,
     205,   181,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    82,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     200,    -1,    -1,   228,   229,   205,   181,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   244,
      -1,    -1,    -1,    -1,    -1,   200,    -1,    -1,   228,   229,
     205,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   244,    -1,    -1,    -1,    -1,   181,
      -1,    -1,    -1,   228,   229,    -1,    -1,    -1,   283,    -1,
      -1,   286,    -1,    -1,    -1,    -1,    -1,    -1,   200,   244,
      -1,    -1,    -1,   205,    -1,   300,    -1,    -1,   303,    -1,
      -1,    -1,    -1,   283,    -1,    -1,   286,    -1,    -1,    -1,
     181,    -1,    -1,    -1,    -1,    -1,   228,   229,    -1,    -1,
     300,    -1,    -1,   303,    -1,    -1,    -1,    -1,   283,   200,
      -1,   286,   244,    -1,   205,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   300,    -1,    -1,   303,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   228,   229,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   283,    -1,   244,   286,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   300,    -1,
      -1,   303,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   406,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   283,    -1,    -1,   286,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   406,    -1,    -1,   300,
      -1,    -1,   303,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   406,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   406,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   517,    -1,    -1,   520,   521,   522,    -1,   524,
     525,   526,   527,   528,   529,    -1,    -1,    -1,    -1,   534,
      -1,    -1,    -1,    -1,    -1,   406,    -1,   517,    -1,    -1,
     520,   521,   522,    -1,   524,   525,   526,   527,   528,   529,
      -1,    -1,   532,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   517,    -1,    -1,   520,   521,   522,    -1,   524,
     525,   526,   527,   528,   529,    -1,    -1,   532,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   517,    -1,    -1,   520,   521,
     522,    -1,   524,   525,   526,   527,   528,   529,    -1,    -1,
     532,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,     3,    -1,    -1,   517,    -1,    -1,   520,
     521,   522,    -1,   524,   525,   526,   527,   528,   529,    -1,
      -1,   532,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
      70,    71,    72,    73,    74,    75,    76,    77,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    95,    96,    97,    98,    99,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
     120,   121,   122,   123,   124,   125,   126,   127,   128,   129,
     130,   131,   132,   133,   134,   135,   136,   137,   138,   139,
     140,   141,   142,   143,   144,   145,   146,   147,   148,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
     160,   161,   162,   163,   164,   165,   166,   167,   168,   169,
     170,   171,   172,   173,   174,   175,   176,   177,   178,   179,
     180,   181,   182,   183,   184,   185,   186,   187,   188,   189,
     190,   191,   192,   193,   194,   195,   196,   197,   198,   199,
     200,   201,   202,   203,   204,   205,   206,   207,   208,   209,
     210,   211,   212,   213,   214,   215,   216,   217,   218,   219,
     220,   221,   222,   223,   224,   225,   226,   227,   228,   229,
     230,   231,   232,   233,   234,   235,   236,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
     280,   281,   282,   283,   284,   285,   286,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,   323,   324,   325,   326,   327,   328,   329,
     330,   331,   332,   333,   334,   335,   336,   337,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   347,   348,   349,
     350,   351,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,   428,   429,
     430,   431,   432,   433,   434,   435,   436,   437,   438,   439,
     440,   441,   442,   443,   444,   445,   446,   447,   448,   449,
     450,   451,   452,   453,   454,   455,   456,   457,   458,   459,
     460,   461,   462,   463,   464,   465,   466,   467,   468,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,   482,   483,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,   498,   499,
     500,   501,   502,   503,   504,   505,   506,   507,   508,   509,
     510,   511,   512,   513,   514,   515,   516,     3,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   526,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    -1,    32,    33,    34,    -1,
      -1,    -1,    -1,    -1,    40,    -1,    -1,    -1,    -1,    45,
      46,    -1,    48,    49,    50,    -1,    52,    53,    54,    55,
      56,    -1,    58,    59,    -1,    61,    62,    63,    64,    65,
      66,    -1,    -1,    69,    70,    71,    72,    73,    74,    75,
      -1,    77,    78,    79,    80,    81,    -1,    -1,    -1,    85,
      86,    87,    88,    89,    90,    -1,    92,    93,    94,    -1,
      96,    97,    98,    99,   100,   101,    -1,    -1,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,    -1,   120,    -1,   122,   123,   124,   125,
     126,   127,    -1,    -1,   130,   131,   132,   133,   134,    -1,
      -1,   137,   138,   139,   140,   141,   142,   143,    -1,   145,
     146,   147,    -1,   149,   150,   151,    -1,   153,   154,   155,
     156,   157,   158,   159,   160,   161,   162,   163,    -1,   165,
      -1,   167,   168,   169,   170,    -1,   172,    -1,   174,    -1,
      -1,    -1,   178,   179,   180,    -1,   182,    -1,   184,   185,
      -1,    -1,   188,   189,   190,   191,    -1,   193,   194,   195,
     196,   197,   198,   199,    -1,   201,   202,   203,   204,    -1,
     206,   207,   208,   209,   210,   211,   212,    -1,   214,    -1,
     216,   217,   218,   219,   220,   221,   222,   223,    -1,   225,
      -1,   227,    -1,    -1,   230,    -1,   232,   233,   234,   235,
     236,   237,   238,    -1,    -1,   241,    -1,   243,    -1,    -1,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
      -1,   277,   278,   279,   280,   281,   282,    -1,   284,   285,
      -1,   287,    -1,   289,   290,   291,   292,   293,   294,    -1,
     296,   297,    -1,    -1,   300,   301,   302,    -1,    -1,   305,
     306,   307,    -1,   309,    -1,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,   323,   324,    -1,
      -1,    -1,    -1,   329,   330,   331,    -1,   333,   334,   335,
     336,   337,   338,    -1,   340,   341,   342,   343,   344,   345,
     346,   347,    -1,   349,   350,   351,   352,   353,   354,   355,
     356,    -1,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,    -1,   373,   374,    -1,
     376,   377,   378,   379,   380,   381,   382,   383,   384,   385,
     386,   387,   388,   389,   390,   391,   392,    -1,    -1,   395,
     396,   397,   398,   399,   400,   401,   402,   403,   404,    -1,
      -1,   407,   408,   409,   410,    -1,   412,   413,   414,   415,
     416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,    -1,    -1,   430,   431,    -1,   433,    -1,   435,
     436,   437,   438,   439,    -1,   441,   442,   443,    -1,   445,
      -1,   447,   448,   449,   450,   451,    -1,   453,   454,   455,
     456,   457,   458,   459,   460,    -1,    -1,   463,   464,   465,
      -1,   467,   468,   469,   470,    -1,   472,   473,   474,   475,
     476,   477,   478,    -1,   480,    -1,   482,   483,   484,   485,
     486,   487,   488,   489,   490,    -1,    -1,   493,    -1,    -1,
     496,   497,   498,   499,   500,   501,   502,   503,   504,   505,
     506,   507,   508,   509,   510,   511,   512,   513,   514,   515,
     516,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     526,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    -1,
      32,    33,    34,    -1,    -1,    -1,    -1,    -1,    40,    -1,
      -1,    -1,    -1,    45,    46,    -1,    48,    49,    50,    -1,
      52,    53,    54,    55,    56,    -1,    58,    59,    -1,    61,
      62,    63,    64,    65,    66,    -1,    -1,    69,    70,    71,
      72,    73,    74,    75,    -1,    77,    78,    79,    80,    81,
      -1,    -1,    -1,    85,    86,    87,    88,    89,    90,    -1,
      92,    93,    94,    -1,    96,    97,    98,    99,   100,   101,
      -1,    -1,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,    -1,   120,    -1,
     122,   123,   124,   125,   126,   127,    -1,    -1,   130,   131,
     132,   133,   134,    -1,    -1,   137,   138,   139,   140,   141,
     142,   143,    -1,   145,   146,   147,    -1,   149,   150,   151,
      -1,   153,   154,   155,   156,   157,   158,   159,   160,   161,
     162,   163,    -1,   165,    -1,   167,   168,   169,   170,    -1,
     172,    -1,   174,    -1,    -1,    -1,   178,   179,   180,    -1,
     182,    -1,   184,   185,    -1,    -1,   188,   189,   190,   191,
      -1,   193,   194,   195,   196,   197,   198,   199,    -1,   201,
     202,   203,   204,    -1,   206,   207,   208,   209,   210,   211,
     212,    -1,   214,    -1,   216,   217,   218,   219,   220,   221,
     222,   223,    -1,   225,    -1,   227,    -1,    -1,   230,    -1,
     232,   233,   234,   235,   236,   237,   238,    -1,    -1,   241,
      -1,   243,    -1,    -1,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,    -1,   277,   278,   279,   280,   281,
     282,    -1,   284,   285,    -1,   287,    -1,   289,   290,   291,
     292,   293,   294,    -1,   296,   297,    -1,    -1,   300,   301,
     302,    -1,    -1,   305,   306,   307,    -1,   309,    -1,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,   323,   324,    -1,    -1,    -1,    -1,   329,   330,   331,
      -1,   333,   334,   335,   336,   337,   338,    -1,   340,   341,
     342,   343,   344,   345,   346,   347,    -1,   349,   350,   351,
     352,   353,   354,   355,   356,    -1,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
      -1,   373,   374,    -1,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,   386,   387,   388,   389,   390,   391,
     392,    -1,    -1,   395,   396,   397,   398,   399,   400,   401,
     402,   403,   404,    -1,    -1,   407,   408,   409,   410,    -1,
     412,   413,   414,   415,   416,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,    -1,    -1,   430,   431,
      -1,   433,    -1,   435,   436,   437,   438,   439,    -1,   441,
     442,   443,    -1,   445,    -1,   447,   448,   449,   450,   451,
      -1,   453,   454,   455,   456,   457,   458,   459,   460,    -1,
      -1,   463,   464,   465,    -1,   467,   468,   469,   470,    -1,
     472,   473,   474,   475,   476,   477,   478,    -1,   480,    -1,
     482,   483,   484,   485,   486,   487,   488,   489,   490,    -1,
      -1,   493,    -1,    -1,   496,   497,   498,   499,   500,   501,
     502,   503,   504,   505,   506,   507,   508,   509,   510,   511,
     512,   513,   514,   515,   516,     3,     4,     5,    -1,    -1,
      -1,     9,    -1,    -1,   526,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    -1,    32,    33,    34,    -1,    -1,    -1,
      38,    -1,    40,    -1,    -1,    -1,    44,    45,    46,    -1,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      58,    59,    -1,    61,    62,    63,    64,    65,    66,    -1,
      -1,    69,    70,    71,    72,    73,    74,    75,    -1,    77,
      78,    79,    80,    81,    -1,    83,    -1,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    -1,    96,    97,
      98,    99,   100,   101,    -1,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,    -1,   120,    -1,   122,   123,   124,   125,   126,   127,
      -1,    -1,   130,   131,   132,   133,   134,    -1,    -1,   137,
     138,   139,   140,   141,   142,   143,    -1,   145,   146,   147,
      -1,   149,   150,   151,    -1,   153,   154,   155,   156,   157,
     158,   159,   160,   161,   162,   163,   164,   165,    -1,   167,
     168,   169,   170,    -1,   172,    -1,   174,   175,    -1,   177,
     178,   179,   180,   181,   182,    -1,   184,   185,    -1,    -1,
     188,   189,   190,   191,    -1,   193,   194,   195,   196,   197,
     198,   199,   200,   201,   202,   203,   204,    -1,   206,   207,
     208,   209,   210,   211,   212,    -1,   214,   215,   216,   217,
     218,   219,   220,   221,   222,   223,    -1,   225,    -1,   227,
     228,   229,   230,   231,   232,   233,   234,   235,   236,   237,
     238,    -1,    -1,   241,   242,   243,   244,    -1,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,   280,   281,   282,    -1,   284,   285,   286,   287,
      -1,   289,   290,   291,   292,   293,   294,    -1,   296,   297,
     298,    -1,   300,   301,   302,    -1,    -1,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323,   324,    -1,    -1,    -1,
      -1,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     338,    -1,   340,   341,   342,   343,   344,   345,   346,   347,
      -1,   349,   350,   351,   352,   353,   354,   355,   356,    -1,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,   371,    -1,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,   386,   387,
     388,   389,   390,   391,   392,    -1,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,    -1,   406,   407,
     408,   409,   410,    -1,   412,   413,   414,   415,   416,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
      -1,    -1,   430,   431,    -1,   433,   434,   435,   436,   437,
     438,   439,    -1,   441,   442,   443,    -1,   445,    -1,   447,
     448,   449,   450,   451,   452,   453,   454,   455,   456,   457,
     458,   459,   460,    -1,    -1,   463,   464,   465,    -1,   467,
     468,   469,   470,    -1,   472,   473,   474,   475,   476,   477,
     478,    -1,   480,   481,   482,   483,   484,   485,   486,   487,
     488,   489,   490,    -1,    -1,   493,    -1,    -1,   496,   497,
     498,   499,   500,   501,   502,   503,   504,   505,   506,   507,
     508,   509,   510,   511,   512,   513,   514,   515,   516,    -1,
      -1,     8,    -1,    -1,    11,    -1,   524,   525,    15,    16,
      17,    18,    19,    20,    21,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      37,    -1,    -1,    -1,    -1,    -1,    43,    -1,    -1,    -1,
      -1,    48,     8,    -1,    -1,    11,    -1,    -1,    55,    15,
      16,    17,    18,    19,    20,    21,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    37,    -1,    -1,    -1,    82,    -1,    -1,    -1,    -1,
      -1,    -1,    48,     8,    -1,    -1,    11,    -1,    -1,    55,
      15,    16,    17,    18,    19,    20,    21,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    37,    -1,    -1,    -1,    82,    -1,    -1,    -1,
      -1,   128,    -1,    48,    -1,    -1,     8,    -1,    -1,    11,
      55,    -1,    -1,    15,    16,    17,    18,    19,    20,    21,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    37,    -1,    82,    -1,    -1,
      42,    -1,    -1,    -1,    -1,    -1,    48,    -1,    -1,    -1,
      -1,    -1,    -1,    55,   181,    -1,    -1,     8,    -1,    -1,
      11,    -1,    -1,    -1,    15,    16,    17,    18,    19,    20,
      21,    -1,    -1,   200,    -1,    -1,    -1,    -1,   205,    -1,
      82,    -1,    -1,    -1,    -1,   171,    37,    -1,    -1,    -1,
     176,    -1,    -1,    -1,    -1,   181,    -1,    48,    -1,    -1,
      -1,   228,   229,    -1,    55,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   200,    -1,    -1,   244,    -1,   205,
      -1,    -1,    -1,    -1,    -1,   170,    -1,    -1,    -1,    -1,
      -1,    82,    -1,    -1,    -1,    -1,   181,    -1,    -1,    -1,
      -1,    -1,   228,   229,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   200,   283,    -1,   244,   286,
     205,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   300,    -1,    -1,   303,    -1,    -1,   181,
      -1,    -1,    -1,   228,   229,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   283,   200,   244,
     286,    -1,    -1,   205,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   300,    -1,    -1,   303,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   228,   229,    -1,    -1,
     181,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   283,    -1,
      -1,   286,   244,    -1,    -1,    -1,    -1,    -1,    -1,   200,
      -1,    -1,    -1,    -1,   205,   300,    -1,    -1,   303,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   228,   229,   406,
      -1,   283,    -1,    -1,   286,    -1,    -1,    -1,    -1,   334,
      -1,    -1,    -1,   244,    -1,    -1,    -1,    -1,   300,    -1,
      -1,   303,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     406,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   283,    -1,    -1,   286,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   471,    -1,    -1,    -1,    -1,   300,
      -1,    -1,   303,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   406,    -1,     8,    -1,    -1,    11,    -1,    -1,    -1,
      15,    16,    17,    18,    19,    20,    21,   328,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     517,    -1,    37,   520,   521,   522,    -1,   524,   525,   526,
     527,   528,   529,    48,   406,    -1,    -1,    -1,    -1,    -1,
      55,    -1,    -1,    -1,    -1,    -1,     8,    -1,    -1,    11,
      -1,    -1,    -1,    15,    16,    17,    18,    19,    20,    21,
      -1,   517,    -1,    -1,   520,   521,   522,    82,   524,   525,
     526,   527,   528,   529,    -1,    37,    -1,    -1,    -1,    -1,
      42,    -1,    -1,    -1,    -1,   406,    48,    -1,    -1,    -1,
      -1,    -1,    -1,    55,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   517,    -1,    -1,   520,   521,   522,    -1,   524,
     525,   526,   527,   528,   529,    -1,    -1,    -1,    -1,    -1,
      82,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   517,    -1,    -1,   520,   521,
     522,    -1,   524,   525,   526,   527,   528,   529,    -1,    -1,
      -1,   176,    -1,    -1,    -1,    -1,   181,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   200,    -1,    -1,    -1,    -1,
     205,    -1,    -1,    -1,    -1,    -1,   517,    -1,    -1,   520,
     521,   522,    -1,   524,   525,   526,   527,   528,   529,    -1,
      -1,    -1,    -1,   228,   229,    -1,    -1,    -1,    -1,   181,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   244,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   200,    -1,
      -1,    -1,    -1,   205,     8,    -1,    -1,    11,    -1,    -1,
      -1,    15,    16,    17,    18,    19,    20,    21,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   228,   229,   283,    -1,
      -1,   286,    -1,    37,    -1,    -1,    -1,    -1,    42,    -1,
      -1,    -1,   244,    -1,    48,   300,    -1,    -1,   303,    -1,
      -1,    55,    -1,    -1,    -1,    -1,     8,    -1,    -1,    11,
      -1,    -1,    -1,    15,    16,    17,    18,    19,    20,    21,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    82,    -1,
      -1,   283,    -1,    -1,   286,    37,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    48,    -1,   300,    -1,
      -1,   303,    -1,    55,    -1,    -1,    -1,    -1,     8,    -1,
      -1,    11,    -1,    -1,    -1,    15,    16,    17,    18,    19,
      20,    21,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      82,    -1,    -1,    -1,    -1,    -1,    -1,    37,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    48,    -1,
      -1,   406,    -1,    -1,    -1,    55,    -1,    -1,    -1,    -1,
       8,    -1,    -1,    11,    -1,    -1,    -1,    15,    16,    17,
      18,    19,    20,    21,    -1,    -1,    -1,   181,    -1,    -1,
      -1,    -1,    82,    -1,    -1,    -1,    -1,    -1,    -1,    37,
      -1,    -1,    -1,    -1,    42,    -1,   200,    -1,    -1,    -1,
      48,   205,    -1,    -1,   406,    -1,    -1,    55,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   171,
      -1,    -1,    -1,    -1,   228,   229,    -1,    -1,    -1,   181,
      -1,    -1,    -1,    -1,    82,    -1,    -1,    -1,    -1,    -1,
     244,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   200,    -1,
      -1,    -1,    -1,   205,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   517,    -1,    -1,   520,   521,   522,    -1,   524,
     525,   526,   527,   528,   529,    -1,   228,   229,    -1,   283,
      -1,   181,   286,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   244,    -1,    -1,    -1,   300,    -1,    -1,   303,
     200,    -1,    -1,    -1,    -1,   205,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   517,    -1,    -1,   520,   521,
     522,    -1,   524,   525,   526,   527,   528,   529,   228,   229,
      -1,   283,    -1,   181,   286,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   244,    -1,    -1,    -1,   300,    -1,
      -1,   303,   200,    -1,    -1,    -1,    -1,   205,     8,    -1,
      -1,    11,    -1,    -1,    -1,    15,    16,    17,    18,    19,
      20,    21,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     228,   229,    -1,   283,    -1,    -1,   286,    37,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   244,    -1,    48,    -1,
     300,    -1,   406,   303,    -1,    55,    -1,    -1,    -1,    -1,
       8,    -1,    -1,    11,    -1,    -1,    -1,    15,    16,    17,
      18,    19,    20,    21,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    82,    -1,    -1,   283,    -1,    -1,   286,    37,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      48,    -1,   300,    -1,   406,   303,    -1,    55,    -1,    -1,
      -1,    -1,     8,    -1,    -1,    11,    -1,    -1,    -1,    15,
      16,    17,    18,    19,    20,    21,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    82,    -1,    -1,    -1,    -1,    -1,
      -1,    37,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    48,    -1,    -1,    -1,   406,    -1,    -1,    55,
      -1,    -1,    -1,   517,    -1,    -1,   520,   521,   522,    -1,
     524,   525,   526,   527,   528,   529,    -1,    -1,    -1,    -1,
      -1,   181,    -1,    -1,    -1,    -1,    82,    -1,    -1,    -1,
     440,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     200,    -1,    -1,    -1,    -1,   205,    -1,    -1,   406,    -1,
      -1,    -1,    -1,    -1,    -1,   517,    -1,    -1,   520,   521,
     522,    -1,   524,   525,   526,   527,   528,   529,   228,   229,
      -1,    -1,    -1,   181,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   244,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   200,    -1,    -1,    -1,    -1,   205,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   517,    -1,    -1,
     520,   521,   522,    -1,   524,   525,   526,   527,   528,   529,
     228,   229,    -1,   283,    -1,   181,   286,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   244,    -1,    -1,    -1,
     300,    -1,    -1,   303,   200,    -1,    -1,    -1,    -1,   205,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   517,
      -1,    -1,   520,   521,   522,    -1,   524,   525,   526,   527,
     528,   529,   228,   229,    -1,   283,    -1,    -1,   286,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   244,    -1,
      -1,    -1,   300,    -1,    -1,   303,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   283,    -1,    -1,
     286,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   300,    -1,   406,   303,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   406,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     406,    -1,    -1,    -1,    -1,    -1,    -1,   517,    -1,    -1,
     520,   521,   522,    -1,   524,   525,   526,   527,   528,   529,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   517,
      -1,    -1,   520,   521,   522,    -1,   524,   525,   526,   527,
     528,   529,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,     3,    -1,     5,    -1,    -1,
      -1,   517,    -1,    -1,   520,   521,   522,    -1,   524,   525,
     526,   527,   528,   529,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    72,    73,    74,    75,    76,    77,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    95,    96,    97,
      98,    99,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,   119,   120,   121,   122,   123,   124,   125,   126,   127,
     128,   129,   130,   131,   132,   133,   134,   135,   136,   137,
     138,   139,   140,   141,   142,   143,   144,   145,   146,   147,
     148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,   159,   160,   161,   162,   163,   164,   165,   166,   167,
     168,   169,   170,   171,   172,   173,   174,   175,   176,   177,
     178,   179,   180,   181,   182,   183,   184,   185,   186,   187,
     188,   189,   190,   191,   192,   193,   194,   195,   196,   197,
     198,   199,   200,   201,   202,   203,   204,   205,   206,   207,
     208,   209,   210,   211,   212,   213,   214,   215,   216,   217,
     218,   219,   220,   221,   222,   223,   224,   225,   226,   227,
     228,   229,   230,   231,   232,   233,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323,   324,   325,   326,   327,
     328,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,   351,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   429,   430,   431,   432,   433,   434,   435,   436,   437,
     438,   439,   440,   441,   442,   443,   444,   445,   446,   447,
     448,   449,   450,   451,   452,   453,   454,   455,   456,   457,
     458,   459,   460,   461,   462,   463,   464,   465,   466,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,   483,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,   499,   500,   501,   502,   503,   504,   505,   506,   507,
     508,   509,   510,   511,   512,   513,   514,   515,   516,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
      74,    75,    76,    77,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    95,    96,    97,    98,    99,   100,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
     124,   125,   126,   127,   128,   129,   130,   131,   132,   133,
     134,   135,   136,   137,   138,   139,   140,   141,   142,   143,
     144,   145,   146,   147,   148,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,   159,   160,   161,   162,   163,
     164,   165,   166,   167,   168,   169,   170,   171,   172,   173,
     174,   175,   176,   177,   178,   179,   180,   181,   182,   183,
     184,   185,   186,   187,   188,   189,   190,   191,   192,   193,
     194,   195,   196,   197,   198,   199,   200,   201,   202,   203,
     204,   205,   206,   207,   208,   209,   210,   211,   212,   213,
     214,   215,   216,   217,   218,   219,   220,   221,   222,   223,
     224,   225,   226,   227,   228,   229,   230,   231,   232,   233,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,   329,   330,   331,   332,   333,
     334,   335,   336,   337,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,   348,   349,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,   428,   429,   430,   431,   432,   433,
     434,   435,   436,   437,   438,   439,   440,   441,   442,   443,
     444,   445,   446,   447,   448,   449,   450,   451,   452,   453,
     454,   455,   456,   457,   458,   459,   460,   461,   462,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,   483,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,   499,   500,   501,   502,   503,
     504,   505,   506,   507,   508,   509,   510,   511,   512,   513,
     514,   515,   516,     3,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
      70,    71,    72,    73,    74,    75,    76,    77,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    95,    96,    97,    98,    99,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
     120,   121,   122,   123,   124,   125,   126,   127,   128,   129,
     130,   131,   132,   133,   134,   135,   136,   137,   138,   139,
     140,   141,   142,   143,   144,   145,   146,   147,   148,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
     160,   161,   162,   163,   164,   165,   166,   167,   168,   169,
     170,   171,   172,   173,   174,   175,   176,   177,   178,   179,
     180,   181,   182,   183,   184,   185,   186,   187,   188,   189,
     190,   191,   192,   193,   194,   195,   196,   197,   198,   199,
     200,   201,   202,   203,   204,   205,   206,   207,   208,   209,
     210,   211,   212,   213,   214,   215,   216,   217,   218,   219,
     220,   221,   222,   223,   224,   225,   226,   227,   228,   229,
     230,   231,   232,   233,   234,   235,   236,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
     280,   281,   282,   283,   284,   285,   286,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,   323,   324,   325,   326,   327,   328,   329,
     330,   331,   332,   333,   334,   335,   336,   337,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   347,   348,   349,
     350,   351,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,   428,   429,
     430,   431,   432,   433,   434,   435,   436,   437,   438,   439,
     440,   441,   442,   443,   444,   445,   446,   447,   448,   449,
     450,   451,   452,   453,   454,   455,   456,   457,   458,   459,
     460,   461,   462,   463,   464,   465,   466,   467,   468,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,   482,   483,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,   498,   499,
     500,   501,   502,   503,   504,   505,   506,   507,   508,   509,
     510,   511,   512,   513,   514,   515,   516,     3,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
      96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
     126,   127,   128,   129,   130,   131,   132,   133,   134,   135,
     136,   137,   138,   139,   140,   141,   142,   143,   144,   145,
     146,   147,   148,   149,   150,   151,   152,   153,   154,   155,
     156,   157,   158,   159,   160,   161,   162,   163,   164,   165,
     166,   167,   168,   169,   170,   171,   172,   173,   174,   175,
     176,   177,   178,   179,   180,   181,   182,   183,   184,   185,
     186,   187,   188,   189,   190,   191,   192,   193,   194,   195,
     196,   197,   198,   199,   200,   201,   202,   203,   204,   205,
     206,   207,   208,   209,   210,   211,   212,   213,   214,   215,
     216,   217,   218,   219,   220,   221,   222,   223,   224,   225,
     226,   227,   228,   229,   230,   231,   232,   233,   234,   235,
     236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
     326,   327,   328,   329,   330,   331,   332,   333,   334,   335,
     336,   337,   338,   339,   340,   341,   342,   343,   344,   345,
     346,   347,   348,   349,   350,   351,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,   385,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,   428,   429,   430,   431,   432,   433,   434,   435,
     436,   437,   438,   439,   440,   441,   442,   443,   444,   445,
     446,   447,   448,   449,   450,   451,   452,   453,   454,   455,
     456,   457,   458,   459,   460,   461,   462,   463,   464,   465,
     466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   482,   483,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,   498,   499,   500,   501,   502,   503,   504,   505,
     506,   507,   508,   509,   510,   511,   512,   513,   514,   515,
     516,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
      72,    73,    74,    75,    76,    77,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    95,    96,    97,    98,    99,   100,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
     122,   123,   124,   125,   126,   127,   128,   129,   130,   131,
     132,   133,   134,   135,   136,   137,   138,   139,   140,   141,
     142,   143,   144,   145,   146,   147,   148,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,   160,   161,
     162,   163,   164,   165,   166,   167,   168,   169,   170,   171,
     172,   173,   174,   175,   176,   177,   178,   179,   180,   181,
     182,   183,   184,   185,   186,   187,   188,   189,   190,   191,
     192,   193,   194,   195,   196,   197,   198,   199,   200,   201,
     202,   203,   204,   205,   206,   207,   208,   209,   210,   211,
     212,   213,   214,   215,   216,   217,   218,   219,   220,   221,
     222,   223,   224,   225,   226,   227,   228,   229,   230,   231,
     232,   233,   234,   235,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     282,   283,   284,   285,   286,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,   323,   324,   325,   326,   327,   328,   329,   330,   331,
     332,   333,   334,   335,   336,   337,   338,   339,   340,   341,
     342,   343,   344,   345,   346,   347,   348,   349,   350,   351,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,   428,   429,   430,   431,
     432,   433,   434,   435,   436,   437,   438,   439,   440,   441,
     442,   443,   444,   445,   446,   447,   448,   449,   450,   451,
     452,   453,   454,   455,   456,   457,   458,   459,   460,   461,
     462,   463,   464,   465,   466,   467,   468,   469,   470,   471,
     472,   473,   474,   475,   476,   477,   478,   479,   480,   481,
     482,   483,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,   498,   499,   500,   501,
     502,   503,   504,   505,   506,   507,   508,   509,   510,   511,
     512,   513,   514,   515,   516,     3,    -1,     5,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    -1,    32,    33,    34,    -1,    -1,    -1,
      38,    -1,    40,    -1,    -1,    -1,    44,    45,    46,    -1,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      58,    59,    -1,    61,    62,    63,    64,    65,    66,    -1,
      -1,    69,    70,    71,    72,    73,    74,    75,    -1,    77,
      78,    79,    80,    81,    -1,    83,    -1,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    -1,    96,    97,
      98,    99,   100,   101,    -1,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,    -1,   120,    -1,   122,   123,   124,   125,   126,   127,
      -1,    -1,   130,   131,   132,   133,   134,    -1,    -1,   137,
     138,   139,   140,   141,   142,   143,    -1,   145,   146,   147,
      -1,   149,   150,   151,    -1,   153,   154,   155,   156,   157,
     158,   159,   160,   161,   162,   163,   164,   165,    -1,   167,
     168,   169,   170,    -1,   172,    -1,   174,   175,    -1,   177,
     178,   179,   180,   181,   182,    -1,   184,   185,    -1,    -1,
     188,   189,   190,   191,    -1,   193,   194,   195,   196,   197,
     198,   199,   200,   201,   202,   203,   204,    -1,   206,   207,
     208,   209,   210,   211,   212,    -1,   214,   215,   216,   217,
     218,   219,   220,   221,   222,   223,    -1,   225,    -1,   227,
     228,   229,   230,   231,   232,   233,   234,   235,   236,   237,
     238,    -1,    -1,   241,   242,   243,   244,    -1,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,   280,   281,   282,    -1,   284,   285,   286,   287,
      -1,   289,   290,   291,   292,   293,   294,    -1,   296,   297,
     298,    -1,   300,   301,   302,    -1,    -1,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323,   324,    -1,    -1,    -1,
      -1,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     338,    -1,   340,   341,   342,   343,   344,   345,   346,   347,
      -1,   349,   350,   351,   352,   353,   354,   355,   356,    -1,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,   371,    -1,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,   386,   387,
     388,   389,   390,   391,   392,    -1,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,    -1,   406,   407,
     408,   409,   410,    -1,   412,   413,   414,   415,   416,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
      -1,    -1,   430,   431,    -1,   433,   434,   435,   436,   437,
     438,   439,    -1,   441,   442,   443,    -1,   445,    -1,   447,
     448,   449,   450,   451,   452,   453,   454,   455,   456,   457,
     458,   459,   460,    -1,    -1,   463,   464,   465,    -1,   467,
     468,   469,   470,    -1,   472,   473,   474,   475,   476,   477,
     478,    -1,   480,   481,   482,   483,   484,   485,   486,   487,
     488,   489,   490,    -1,    -1,   493,    -1,    -1,   496,   497,
     498,   499,   500,   501,   502,   503,   504,   505,   506,   507,
     508,   509,   510,   511,   512,   513,   514,   515,   516,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    -1,    32,    33,
      34,    35,    36,    -1,    38,    -1,    40,    -1,    -1,    -1,
      44,    45,    46,    -1,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    58,    59,    -1,    61,    62,    63,
      64,    65,    66,    -1,    -1,    69,    70,    71,    72,    73,
      74,    75,    -1,    77,    78,    79,    80,    81,    -1,    83,
      -1,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    -1,    96,    97,    98,    99,   100,   101,    -1,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,    -1,   120,    -1,   122,   123,
     124,   125,   126,   127,    -1,    -1,   130,   131,   132,   133,
     134,    -1,    -1,   137,   138,   139,   140,   141,   142,   143,
      -1,   145,   146,   147,    -1,   149,   150,   151,    -1,   153,
     154,   155,   156,   157,   158,   159,   160,   161,   162,   163,
      -1,   165,    -1,   167,   168,   169,   170,    -1,   172,    -1,
     174,   175,    -1,   177,   178,   179,   180,   181,   182,    -1,
     184,   185,    -1,    -1,   188,   189,   190,   191,    -1,   193,
     194,   195,   196,   197,   198,   199,   200,   201,   202,   203,
     204,    -1,   206,   207,   208,   209,   210,   211,   212,    -1,
     214,   215,   216,   217,   218,   219,   220,   221,   222,   223,
      -1,   225,    -1,   227,   228,   229,   230,   231,   232,   233,
     234,   235,   236,   237,   238,    -1,    -1,   241,   242,   243,
     244,    -1,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,    -1,
     284,   285,   286,   287,    -1,   289,   290,   291,   292,   293,
     294,    -1,   296,   297,    -1,    -1,   300,   301,   302,    -1,
      -1,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,    -1,    -1,    -1,    -1,   329,   330,   331,   332,   333,
     334,   335,   336,   337,   338,    -1,   340,   341,   342,   343,
     344,   345,   346,   347,    -1,   349,   350,   351,   352,   353,
     354,   355,   356,    -1,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,   371,    -1,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,   385,   386,   387,   388,   389,   390,   391,   392,    -1,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,    -1,   406,   407,   408,   409,   410,    -1,   412,   413,
     414,   415,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,    -1,    -1,   430,   431,    -1,   433,
     434,   435,   436,   437,   438,   439,    -1,   441,   442,   443,
      -1,   445,    -1,   447,   448,   449,   450,   451,    -1,   453,
     454,   455,   456,   457,   458,   459,   460,    -1,    -1,   463,
     464,   465,    -1,   467,   468,   469,   470,    -1,   472,   473,
     474,   475,   476,   477,   478,    -1,   480,   481,   482,   483,
     484,   485,   486,   487,   488,   489,   490,    -1,    -1,   493,
      -1,    -1,   496,   497,   498,   499,   500,   501,   502,   503,
     504,   505,   506,   507,   508,   509,   510,   511,   512,   513,
     514,   515,   516,     3,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    -1,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,
      40,    -1,    -1,    -1,    44,    45,    46,    -1,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
      -1,    61,    62,    63,    64,    65,    66,    -1,    68,    69,
      70,    71,    72,    73,    74,    75,    -1,    77,    78,    79,
      80,    81,    -1,    83,    -1,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    -1,    96,    97,    98,    99,
     100,   101,    -1,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,    -1,
     120,    -1,   122,   123,   124,   125,   126,   127,    -1,    -1,
     130,   131,   132,   133,   134,    -1,    -1,   137,   138,   139,
     140,   141,   142,   143,    -1,   145,   146,   147,    -1,   149,
     150,   151,    -1,   153,   154,   155,   156,   157,   158,   159,
     160,   161,   162,   163,    -1,   165,    -1,   167,   168,   169,
     170,    -1,   172,    -1,   174,   175,    -1,   177,   178,   179,
     180,   181,   182,    -1,   184,   185,    -1,    -1,   188,   189,
     190,   191,    -1,   193,   194,   195,   196,   197,   198,   199,
     200,   201,   202,   203,   204,    -1,   206,   207,   208,   209,
     210,   211,   212,    -1,   214,   215,   216,   217,   218,   219,
     220,   221,   222,   223,    -1,   225,    -1,   227,   228,   229,
     230,   231,   232,   233,   234,   235,   236,   237,   238,    -1,
      -1,   241,   242,   243,   244,    -1,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
     280,   281,   282,    -1,   284,   285,   286,   287,    -1,   289,
     290,   291,   292,   293,   294,    -1,   296,   297,    -1,    -1,
     300,   301,   302,    -1,    -1,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,   323,   324,    -1,    -1,    -1,    -1,   329,
     330,   331,   332,   333,   334,   335,   336,   337,   338,    -1,
     340,   341,   342,   343,   344,   345,   346,   347,    -1,   349,
     350,   351,   352,   353,   354,   355,   356,    -1,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
     370,   371,    -1,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,   386,   387,   388,   389,
     390,   391,   392,    -1,    -1,   395,   396,   397,   398,   399,
     400,   401,   402,   403,   404,    -1,   406,   407,   408,   409,
     410,    -1,   412,   413,   414,   415,   416,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,    -1,    -1,
     430,   431,    -1,   433,   434,   435,   436,   437,   438,   439,
      -1,   441,   442,   443,    -1,   445,    -1,   447,   448,   449,
     450,   451,    -1,   453,   454,   455,   456,   457,   458,   459,
     460,    -1,    -1,   463,   464,   465,    -1,   467,   468,   469,
     470,    -1,   472,   473,   474,   475,   476,   477,   478,    -1,
     480,   481,   482,   483,   484,   485,   486,   487,   488,   489,
     490,    -1,    -1,   493,    -1,    -1,   496,   497,   498,   499,
     500,   501,   502,   503,   504,   505,   506,   507,   508,   509,
     510,   511,   512,   513,   514,   515,   516,     3,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    -1,    32,    33,    34,    -1,
      -1,    -1,    -1,    -1,    40,    -1,    -1,    -1,    44,    45,
      46,    -1,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    -1,    61,    62,    63,    64,    65,
      66,    -1,    -1,    69,    70,    71,    72,    73,    74,    75,
      -1,    77,    78,    79,    80,    81,    -1,    83,    -1,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    -1,
      96,    97,    98,    99,   100,   101,    -1,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,    -1,   120,    -1,   122,   123,   124,   125,
     126,   127,    -1,    -1,   130,   131,   132,   133,   134,    -1,
      -1,   137,   138,   139,   140,   141,   142,   143,    -1,   145,
     146,   147,    -1,   149,   150,   151,    -1,   153,   154,   155,
     156,   157,   158,   159,   160,   161,   162,   163,    -1,   165,
      -1,   167,   168,   169,   170,    -1,   172,    -1,   174,   175,
      -1,   177,   178,   179,   180,   181,   182,    -1,   184,   185,
      -1,    -1,   188,   189,   190,   191,    -1,   193,   194,   195,
     196,   197,   198,   199,   200,   201,   202,   203,   204,    -1,
     206,   207,   208,   209,   210,   211,   212,    -1,   214,   215,
     216,   217,   218,   219,   220,   221,   222,   223,    -1,   225,
      -1,   227,   228,   229,   230,   231,   232,   233,   234,   235,
     236,   237,   238,    -1,    -1,   241,   242,   243,   244,    -1,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,   280,   281,   282,    -1,   284,   285,
     286,   287,    -1,   289,   290,   291,   292,   293,   294,    -1,
     296,   297,    -1,    -1,   300,   301,   302,    -1,    -1,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,   323,   324,    -1,
      -1,    -1,    -1,   329,   330,   331,   332,   333,   334,   335,
     336,   337,   338,    -1,   340,   341,   342,   343,   344,   345,
     346,   347,    -1,   349,   350,   351,   352,   353,   354,   355,
     356,    -1,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,    -1,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,   385,
     386,   387,   388,   389,   390,   391,   392,    -1,    -1,   395,
     396,   397,   398,   399,   400,   401,   402,   403,   404,    -1,
     406,   407,   408,   409,   410,    -1,   412,   413,   414,   415,
     416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,    -1,    -1,   430,   431,    -1,   433,   434,   435,
     436,   437,   438,   439,    -1,   441,   442,   443,    -1,   445,
      -1,   447,   448,   449,   450,   451,    -1,   453,   454,   455,
     456,   457,   458,   459,   460,    -1,    -1,   463,   464,   465,
      -1,   467,   468,   469,   470,    -1,   472,   473,   474,   475,
     476,   477,   478,    -1,   480,   481,   482,   483,   484,   485,
     486,   487,   488,   489,   490,    -1,    -1,   493,    -1,    -1,
     496,   497,   498,   499,   500,   501,   502,   503,   504,   505,
     506,   507,   508,   509,   510,   511,   512,   513,   514,   515,
     516,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    -1,
      32,    33,    34,    -1,    -1,    -1,    -1,    -1,    40,    -1,
      -1,    -1,    -1,    45,    46,    -1,    48,    49,    50,    -1,
      52,    53,    54,    55,    56,    -1,    58,    59,    -1,    61,
      62,    63,    64,    65,    66,    -1,    -1,    69,    70,    71,
      72,    73,    74,    75,    76,    77,    78,    79,    80,    81,
      -1,    -1,    84,    85,    86,    87,    88,    89,    90,    -1,
      92,    93,    94,    95,    96,    97,    98,    99,   100,   101,
      -1,    -1,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,    -1,   120,    -1,
     122,   123,   124,   125,   126,   127,    -1,    -1,   130,   131,
     132,   133,   134,    -1,    -1,   137,   138,   139,   140,   141,
     142,   143,    -1,   145,   146,   147,    -1,   149,   150,   151,
      -1,   153,   154,   155,   156,   157,   158,   159,   160,   161,
     162,   163,    -1,   165,    -1,   167,   168,   169,   170,    -1,
     172,   173,   174,    -1,    -1,    -1,   178,   179,   180,    -1,
     182,    -1,   184,   185,    -1,    -1,   188,   189,   190,   191,
      -1,   193,   194,   195,   196,   197,   198,   199,    -1,   201,
     202,   203,   204,    -1,   206,   207,   208,   209,   210,   211,
     212,    -1,   214,    -1,   216,   217,   218,   219,   220,   221,
     222,   223,    -1,   225,    -1,   227,    -1,    -1,   230,    -1,
     232,   233,   234,   235,   236,   237,   238,    -1,    -1,   241,
      -1,   243,    -1,    -1,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,    -1,   277,   278,   279,   280,   281,
     282,    -1,   284,   285,    -1,   287,    -1,   289,   290,   291,
     292,   293,   294,    -1,   296,   297,    -1,    -1,   300,   301,
     302,    -1,    -1,   305,   306,   307,    -1,   309,    -1,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,   323,   324,    -1,    -1,    -1,    -1,   329,   330,   331,
      -1,   333,   334,   335,   336,   337,   338,   339,   340,   341,
     342,   343,   344,   345,   346,   347,    -1,   349,   350,   351,
     352,   353,   354,   355,   356,    -1,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
      -1,   373,   374,    -1,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,   386,   387,   388,   389,   390,   391,
     392,    -1,    -1,   395,   396,   397,   398,   399,   400,   401,
     402,   403,   404,    -1,    -1,   407,   408,   409,   410,    -1,
     412,   413,   414,   415,   416,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,    -1,    -1,   430,   431,
      -1,   433,    -1,   435,   436,   437,   438,   439,    -1,   441,
     442,   443,    -1,   445,    -1,   447,   448,   449,   450,   451,
      -1,   453,   454,   455,   456,   457,   458,   459,   460,    -1,
     462,   463,   464,   465,    -1,   467,   468,   469,   470,    -1,
     472,   473,   474,   475,   476,   477,   478,    -1,   480,    -1,
     482,   483,   484,   485,   486,   487,   488,   489,   490,    -1,
      -1,   493,    -1,    -1,   496,   497,   498,   499,   500,   501,
     502,   503,   504,   505,   506,   507,   508,   509,   510,   511,
     512,   513,   514,   515,   516,     3,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    -1,    32,    33,    34,    -1,    -1,    -1,
      -1,    -1,    40,    -1,    -1,    -1,    -1,    45,    46,    -1,
      48,    49,    50,    -1,    52,    53,    54,    55,    56,    -1,
      58,    59,    -1,    61,    62,    63,    64,    65,    66,    -1,
      -1,    69,    70,    71,    72,    73,    74,    75,    76,    77,
      78,    79,    80,    81,    -1,    -1,    -1,    85,    86,    87,
      88,    89,    90,    -1,    92,    93,    94,    95,    96,    97,
      98,    99,   100,   101,    -1,    -1,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,    -1,   120,    -1,   122,   123,   124,   125,   126,   127,
      -1,    -1,   130,   131,   132,   133,   134,    -1,    -1,   137,
     138,   139,   140,   141,   142,   143,    -1,   145,   146,   147,
      -1,   149,   150,   151,    -1,   153,   154,   155,   156,   157,
     158,   159,   160,   161,   162,   163,    -1,   165,    -1,   167,
     168,   169,   170,    -1,   172,   173,   174,    -1,    -1,    -1,
     178,   179,   180,    -1,   182,    -1,   184,   185,    -1,    -1,
     188,   189,   190,   191,    -1,   193,   194,   195,   196,   197,
     198,   199,    -1,   201,   202,   203,   204,    -1,   206,   207,
     208,   209,   210,   211,   212,    -1,   214,    -1,   216,   217,
     218,   219,   220,   221,   222,   223,    -1,   225,    -1,   227,
      -1,    -1,   230,    -1,   232,   233,   234,   235,   236,   237,
     238,    -1,    -1,   241,    -1,   243,   244,    -1,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,    -1,   277,
     278,   279,   280,   281,   282,    -1,   284,   285,    -1,   287,
      -1,   289,   290,   291,   292,   293,   294,    -1,   296,   297,
      -1,    -1,   300,   301,   302,    -1,    -1,   305,   306,   307,
      -1,   309,    -1,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323,   324,    -1,    -1,    -1,
      -1,   329,   330,   331,    -1,   333,   334,   335,   336,   337,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
      -1,   349,   350,   351,   352,   353,   354,   355,   356,    -1,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,   371,    -1,   373,   374,    -1,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,   386,   387,
     388,   389,   390,   391,   392,    -1,    -1,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,    -1,    -1,   407,
     408,   409,   410,    -1,   412,   413,   414,   415,   416,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
      -1,    -1,   430,   431,    -1,   433,    -1,   435,   436,   437,
     438,   439,    -1,   441,   442,   443,    -1,   445,    -1,   447,
     448,   449,   450,   451,    -1,   453,   454,   455,   456,   457,
     458,   459,   460,    -1,   462,   463,   464,   465,    -1,   467,
     468,   469,   470,    -1,   472,   473,   474,   475,   476,   477,
     478,    -1,   480,    -1,   482,   483,   484,   485,   486,   487,
     488,   489,   490,    -1,    -1,   493,    -1,    -1,   496,   497,
     498,   499,   500,   501,   502,   503,   504,   505,   506,   507,
     508,   509,   510,   511,   512,   513,   514,   515,   516,     3,
      -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    -1,    32,    33,
      34,    35,    36,    -1,    -1,    -1,    40,    -1,    -1,    -1,
      -1,    45,    46,    -1,    48,    49,    50,    -1,    52,    53,
      54,    55,    56,    -1,    58,    59,    -1,    61,    62,    63,
      64,    65,    66,    -1,    -1,    69,    70,    71,    72,    73,
      74,    75,    -1,    77,    78,    79,    80,    81,    -1,    -1,
      -1,    85,    86,    87,    88,    89,    90,    -1,    92,    93,
      94,    -1,    96,    97,    98,    99,   100,   101,    -1,    -1,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,    -1,   120,    -1,   122,   123,
     124,   125,   126,   127,    -1,    -1,   130,   131,   132,   133,
     134,    -1,    -1,   137,   138,   139,   140,   141,   142,   143,
      -1,   145,   146,   147,    -1,   149,   150,   151,    -1,   153,
     154,   155,   156,   157,   158,   159,   160,   161,   162,   163,
      -1,   165,    -1,   167,   168,   169,   170,    -1,   172,    -1,
     174,    -1,    -1,    -1,   178,   179,   180,    -1,   182,    -1,
     184,   185,    -1,    -1,   188,   189,   190,   191,    -1,   193,
     194,   195,   196,   197,   198,   199,    -1,   201,   202,   203,
     204,    -1,   206,   207,   208,   209,   210,   211,   212,    -1,
     214,    -1,   216,   217,   218,   219,   220,   221,   222,   223,
      -1,   225,    -1,   227,    -1,    -1,   230,    -1,   232,   233,
     234,   235,   236,   237,   238,    -1,    -1,   241,    -1,   243,
      -1,    -1,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,    -1,   277,   278,   279,   280,   281,   282,    -1,
     284,   285,    -1,   287,    -1,   289,   290,   291,   292,   293,
     294,    -1,   296,   297,    -1,    -1,   300,   301,   302,    -1,
      -1,   305,   306,   307,    -1,   309,    -1,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,    -1,    -1,    -1,    -1,   329,   330,   331,    -1,   333,
     334,   335,   336,   337,   338,    -1,   340,   341,   342,   343,
     344,   345,   346,   347,    -1,   349,   350,   351,   352,   353,
     354,   355,   356,    -1,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,   371,    -1,   373,
     374,    -1,   376,   377,   378,   379,   380,   381,   382,   383,
     384,   385,   386,   387,   388,   389,   390,   391,   392,    -1,
      -1,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,    -1,    -1,   407,   408,   409,   410,    -1,   412,   413,
     414,   415,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,    -1,    -1,   430,   431,    -1,   433,
      -1,   435,   436,   437,   438,   439,    -1,   441,   442,   443,
      -1,   445,    -1,   447,   448,   449,   450,   451,    -1,   453,
     454,   455,   456,   457,   458,   459,   460,    -1,    -1,   463,
     464,   465,    -1,   467,   468,   469,   470,    -1,   472,   473,
     474,   475,   476,   477,   478,    -1,   480,    -1,   482,   483,
     484,   485,   486,   487,   488,   489,   490,    -1,    -1,   493,
      -1,    -1,   496,   497,   498,   499,   500,   501,   502,   503,
     504,   505,   506,   507,   508,   509,   510,   511,   512,   513,
     514,   515,   516,     3,    -1,     5,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,
      40,    -1,    -1,    -1,    -1,    45,    46,    -1,    48,    49,
      50,    -1,    52,    53,    54,    55,    56,    -1,    58,    59,
      -1,    61,    62,    63,    64,    65,    66,    -1,    -1,    69,
      70,    71,    72,    73,    74,    75,    -1,    77,    78,    79,
      80,    81,    -1,    -1,    -1,    85,    86,    87,    88,    89,
      90,    -1,    92,    93,    94,    -1,    96,    97,    98,    99,
     100,   101,    -1,    -1,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,    -1,
     120,    -1,   122,   123,   124,   125,   126,   127,    -1,    -1,
     130,   131,   132,   133,   134,    -1,    -1,   137,   138,   139,
     140,   141,   142,   143,    -1,   145,   146,   147,    -1,   149,
     150,   151,    -1,   153,   154,   155,   156,   157,   158,   159,
     160,   161,   162,   163,    -1,   165,    -1,   167,   168,   169,
     170,    -1,   172,    -1,   174,    -1,    -1,    -1,   178,   179,
     180,    -1,   182,    -1,   184,   185,    -1,    -1,   188,   189,
     190,   191,    -1,   193,   194,   195,   196,   197,   198,   199,
      -1,   201,   202,   203,   204,    -1,   206,   207,   208,   209,
     210,   211,   212,    -1,   214,    -1,   216,   217,   218,   219,
     220,   221,   222,   223,    -1,   225,    -1,   227,    -1,    -1,
     230,    -1,   232,   233,   234,   235,   236,   237,   238,    -1,
      -1,   241,    -1,   243,    -1,    -1,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,    -1,   277,   278,   279,
     280,   281,   282,    -1,   284,   285,    -1,   287,    -1,   289,
     290,   291,   292,   293,   294,    -1,   296,   297,    -1,    -1,
     300,   301,   302,    -1,    -1,   305,   306,   307,    -1,   309,
      -1,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,   323,   324,    -1,    -1,    -1,    -1,   329,
     330,   331,    -1,   333,   334,   335,   336,   337,   338,    -1,
     340,   341,   342,   343,   344,   345,   346,   347,    -1,   349,
     350,   351,   352,   353,   354,   355,   356,    -1,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
     370,   371,    -1,   373,   374,    -1,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,   386,   387,   388,   389,
     390,   391,   392,    -1,    -1,   395,   396,   397,   398,   399,
     400,   401,   402,   403,   404,    -1,    -1,   407,   408,   409,
     410,    -1,   412,   413,   414,   415,   416,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,    -1,    -1,
     430,   431,    -1,   433,    -1,   435,   436,   437,   438,   439,
      -1,   441,   442,   443,    -1,   445,    -1,   447,   448,   449,
     450,   451,    -1,   453,   454,   455,   456,   457,   458,   459,
     460,    -1,    -1,   463,   464,   465,    -1,   467,   468,   469,
     470,    -1,   472,   473,   474,   475,   476,   477,   478,    -1,
     480,    -1,   482,   483,   484,   485,   486,   487,   488,   489,
     490,    -1,    -1,   493,    -1,    -1,   496,   497,   498,   499,
     500,   501,   502,   503,   504,   505,   506,   507,   508,   509,
     510,   511,   512,   513,   514,   515,   516,     3,    -1,     5,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    -1,    32,    33,    34,    -1,
      -1,    -1,    -1,    -1,    40,    -1,    -1,    -1,    -1,    45,
      46,    -1,    48,    49,    50,    -1,    52,    53,    54,    55,
      56,    -1,    58,    59,    -1,    61,    62,    63,    64,    65,
      66,    -1,    -1,    69,    70,    71,    72,    73,    74,    75,
      -1,    77,    78,    79,    80,    81,    -1,    -1,    -1,    85,
      86,    87,    88,    89,    90,    -1,    92,    93,    94,    -1,
      96,    97,    98,    99,   100,   101,    -1,    -1,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,    -1,   120,    -1,   122,   123,   124,   125,
     126,   127,    -1,    -1,   130,   131,   132,   133,   134,    -1,
      -1,   137,   138,   139,   140,   141,   142,   143,    -1,   145,
     146,   147,    -1,   149,   150,   151,    -1,   153,   154,   155,
     156,   157,   158,   159,   160,   161,   162,   163,    -1,   165,
      -1,   167,   168,   169,   170,    -1,   172,    -1,   174,    -1,
      -1,    -1,   178,   179,   180,    -1,   182,    -1,   184,   185,
      -1,    -1,   188,   189,   190,   191,    -1,   193,   194,   195,
     196,   197,   198,   199,    -1,   201,   202,   203,   204,    -1,
     206,   207,   208,   209,   210,   211,   212,    -1,   214,    -1,
     216,   217,   218,   219,   220,   221,   222,   223,    -1,   225,
      -1,   227,    -1,    -1,   230,    -1,   232,   233,   234,   235,
     236,   237,   238,    -1,    -1,   241,    -1,   243,    -1,    -1,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
      -1,   277,   278,   279,   280,   281,   282,    -1,   284,   285,
      -1,   287,    -1,   289,   290,   291,   292,   293,   294,    -1,
     296,   297,    -1,   299,   300,   301,   302,    -1,    -1,   305,
     306,   307,    -1,   309,    -1,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,   323,   324,    -1,
      -1,    -1,    -1,   329,   330,   331,    -1,   333,   334,   335,
     336,   337,   338,    -1,   340,   341,   342,   343,   344,   345,
     346,   347,    -1,   349,   350,   351,   352,   353,   354,   355,
     356,    -1,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,    -1,   373,   374,    -1,
     376,   377,   378,   379,   380,   381,   382,   383,   384,   385,
     386,   387,   388,   389,   390,   391,   392,    -1,    -1,   395,
     396,   397,   398,   399,   400,   401,   402,   403,   404,    -1,
      -1,   407,   408,   409,   410,    -1,   412,   413,   414,   415,
     416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,    -1,    -1,   430,   431,    -1,   433,    -1,   435,
     436,   437,   438,   439,    -1,   441,   442,   443,    -1,   445,
      -1,   447,   448,   449,   450,   451,    -1,   453,   454,   455,
     456,   457,   458,   459,   460,    -1,    -1,   463,   464,   465,
      -1,   467,   468,   469,   470,    -1,   472,   473,   474,   475,
     476,   477,   478,    -1,   480,    -1,   482,   483,   484,   485,
     486,   487,   488,   489,   490,    -1,    -1,   493,    -1,    -1,
     496,   497,   498,   499,   500,   501,   502,   503,   504,   505,
     506,   507,   508,   509,   510,   511,   512,   513,   514,   515,
     516,     3,    -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    -1,
      32,    33,    34,    -1,    -1,    -1,    -1,    -1,    40,    -1,
      -1,    -1,    -1,    45,    46,    -1,    48,    49,    50,    -1,
      52,    53,    54,    55,    56,    -1,    58,    59,    -1,    61,
      62,    63,    64,    65,    66,    -1,    -1,    69,    70,    71,
      72,    73,    74,    75,    -1,    77,    78,    79,    80,    81,
      -1,    -1,    -1,    85,    86,    87,    88,    89,    90,    -1,
      92,    93,    94,    -1,    96,    97,    98,    99,   100,   101,
      -1,    -1,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,    -1,   120,    -1,
     122,   123,   124,   125,   126,   127,    -1,    -1,   130,   131,
     132,   133,   134,    -1,    -1,   137,   138,   139,   140,   141,
     142,   143,    -1,   145,   146,   147,    -1,   149,   150,   151,
      -1,   153,   154,   155,   156,   157,   158,   159,   160,   161,
     162,   163,    -1,   165,    -1,   167,   168,   169,   170,    -1,
     172,    -1,   174,    -1,    -1,    -1,   178,   179,   180,    -1,
     182,    -1,   184,   185,    -1,    -1,   188,   189,   190,   191,
      -1,   193,   194,   195,   196,   197,   198,   199,    -1,   201,
     202,   203,   204,    -1,   206,   207,   208,   209,   210,   211,
     212,    -1,   214,    -1,   216,   217,   218,   219,   220,   221,
     222,   223,    -1,   225,    -1,   227,    -1,    -1,   230,    -1,
     232,   233,   234,   235,   236,   237,   238,    -1,    -1,   241,
      -1,   243,    -1,    -1,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,    -1,   277,   278,   279,   280,   281,
     282,    -1,   284,   285,    -1,   287,    -1,   289,   290,   291,
     292,   293,   294,    -1,   296,   297,    -1,   299,   300,   301,
     302,    -1,    -1,   305,   306,   307,    -1,   309,    -1,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,   323,   324,    -1,    -1,    -1,    -1,   329,   330,   331,
      -1,   333,   334,   335,   336,   337,   338,    -1,   340,   341,
     342,   343,   344,   345,   346,   347,    -1,   349,   350,   351,
     352,   353,   354,   355,   356,    -1,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
      -1,   373,   374,    -1,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,   386,   387,   388,   389,   390,   391,
     392,    -1,    -1,   395,   396,   397,   398,   399,   400,   401,
     402,   403,   404,    -1,    -1,   407,   408,   409,   410,    -1,
     412,   413,   414,   415,   416,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,    -1,    -1,   430,   431,
      -1,   433,    -1,   435,   436,   437,   438,   439,    -1,   441,
     442,   443,    -1,   445,    -1,   447,   448,   449,   450,   451,
      -1,   453,   454,   455,   456,   457,   458,   459,   460,    -1,
      -1,   463,   464,   465,    -1,   467,   468,   469,   470,    -1,
     472,   473,   474,   475,   476,   477,   478,    -1,   480,    -1,
     482,   483,   484,   485,   486,   487,   488,   489,   490,    -1,
      -1,   493,    -1,    -1,   496,   497,   498,   499,   500,   501,
     502,   503,   504,   505,   506,   507,   508,   509,   510,   511,
     512,   513,   514,   515,   516,     3,    -1,     5,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    33,    34,    -1,    -1,    -1,
      -1,    -1,    40,    -1,    -1,    -1,    -1,    45,    46,    -1,
      48,    49,    50,    -1,    52,    53,    54,    55,    56,    -1,
      58,    59,    -1,    61,    62,    63,    64,    65,    66,    -1,
      -1,    69,    70,    71,    72,    73,    74,    75,    -1,    77,
      78,    79,    80,    81,    -1,    -1,    -1,    85,    86,    87,
      88,    89,    90,    -1,    92,    93,    94,    -1,    96,    97,
      98,    99,   100,   101,    -1,    -1,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,    -1,   120,    -1,   122,   123,   124,   125,   126,   127,
      -1,    -1,   130,   131,   132,   133,   134,    -1,    -1,   137,
     138,   139,   140,   141,   142,   143,    -1,   145,   146,   147,
      -1,   149,   150,   151,    -1,   153,   154,   155,   156,   157,
     158,   159,   160,   161,   162,   163,    -1,   165,    -1,   167,
     168,   169,   170,    -1,   172,    -1,   174,    -1,    -1,    -1,
     178,   179,   180,    -1,   182,    -1,   184,   185,    -1,    -1,
     188,   189,   190,   191,    -1,   193,   194,   195,   196,   197,
     198,   199,    -1,   201,   202,   203,   204,    -1,   206,   207,
     208,   209,   210,   211,   212,    -1,   214,    -1,   216,   217,
     218,   219,   220,   221,   222,   223,    -1,   225,    -1,   227,
      -1,    -1,   230,    -1,   232,   233,   234,   235,   236,   237,
     238,    -1,    -1,   241,    -1,   243,    -1,    -1,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,    -1,   277,
     278,   279,   280,   281,   282,    -1,   284,   285,    -1,   287,
      -1,   289,   290,   291,   292,   293,   294,    -1,   296,   297,
      -1,    -1,   300,   301,   302,    -1,    -1,   305,   306,   307,
      -1,   309,    -1,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323,   324,    -1,    -1,    -1,
      -1,   329,   330,   331,    -1,   333,   334,   335,   336,   337,
     338,    -1,   340,   341,   342,   343,   344,   345,   346,   347,
      -1,   349,   350,   351,   352,   353,   354,   355,   356,    -1,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,   371,    -1,   373,   374,    -1,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,   386,   387,
     388,   389,   390,   391,   392,    -1,    -1,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,    -1,    -1,   407,
     408,   409,   410,    -1,   412,   413,   414,   415,   416,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
      -1,    -1,   430,   431,    -1,   433,    -1,   435,   436,   437,
     438,   439,    -1,   441,   442,   443,    -1,   445,    -1,   447,
     448,   449,   450,   451,    -1,   453,   454,   455,   456,   457,
     458,   459,   460,    -1,    -1,   463,   464,   465,    -1,   467,
     468,   469,   470,    -1,   472,   473,   474,   475,   476,   477,
     478,    -1,   480,    -1,   482,   483,   484,   485,   486,   487,
     488,   489,   490,    -1,    -1,   493,    -1,    -1,   496,   497,
     498,   499,   500,   501,   502,   503,   504,   505,   506,   507,
     508,   509,   510,   511,   512,   513,   514,   515,   516,     3,
       4,    -1,    -1,    -1,    -1,     9,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    -1,    32,    33,
      34,    -1,    -1,    -1,    -1,    -1,    40,    -1,    -1,    -1,
      -1,    45,    46,    -1,    48,    49,    50,    -1,    52,    53,
      54,    55,    56,    -1,    58,    59,    -1,    61,    62,    63,
      64,    65,    66,    -1,    -1,    69,    70,    71,    72,    73,
      74,    75,    -1,    77,    78,    79,    80,    81,    -1,    -1,
      -1,    85,    86,    87,    88,    89,    90,    -1,    92,    93,
      94,    -1,    96,    97,    98,    99,   100,   101,    -1,    -1,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,    -1,   120,    -1,   122,   123,
     124,   125,   126,   127,    -1,    -1,   130,   131,   132,   133,
     134,    -1,    -1,   137,   138,   139,   140,   141,   142,   143,
      -1,   145,   146,   147,    -1,   149,   150,   151,    -1,   153,
     154,   155,   156,   157,   158,   159,   160,   161,   162,   163,
      -1,   165,    -1,   167,   168,   169,   170,    -1,   172,    -1,
     174,    -1,    -1,    -1,   178,   179,   180,    -1,   182,    -1,
     184,   185,    -1,    -1,   188,   189,   190,   191,    -1,   193,
     194,   195,   196,   197,   198,   199,    -1,   201,   202,   203,
     204,    -1,   206,   207,   208,   209,   210,   211,   212,    -1,
     214,    -1,   216,   217,   218,   219,   220,   221,   222,   223,
      -1,   225,    -1,   227,    -1,    -1,   230,    -1,   232,   233,
     234,   235,   236,   237,   238,    -1,    -1,   241,    -1,   243,
      -1,    -1,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,    -1,   277,   278,   279,   280,   281,   282,    -1,
     284,   285,    -1,   287,    -1,   289,   290,   291,   292,   293,
     294,    -1,   296,   297,    -1,    -1,   300,   301,   302,    -1,
      -1,   305,   306,   307,    -1,   309,    -1,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,    -1,    -1,    -1,    -1,   329,   330,   331,    -1,   333,
     334,   335,   336,   337,   338,    -1,   340,   341,   342,   343,
     344,   345,   346,   347,    -1,   349,   350,   351,   352,   353,
     354,   355,   356,    -1,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,   371,    -1,   373,
     374,    -1,   376,   377,   378,   379,   380,   381,   382,   383,
     384,   385,   386,   387,   388,   389,   390,   391,   392,    -1,
      -1,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,    -1,    -1,   407,   408,   409,   410,    -1,   412,   413,
     414,   415,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,    -1,    -1,   430,   431,    -1,   433,
      -1,   435,   436,   437,   438,   439,    -1,   441,   442,   443,
      -1,   445,    -1,   447,   448,   449,   450,   451,    -1,   453,
     454,   455,   456,   457,   458,   459,   460,    -1,    -1,   463,
     464,   465,    -1,   467,   468,   469,   470,    -1,   472,   473,
     474,   475,   476,   477,   478,    -1,   480,    -1,   482,   483,
     484,   485,   486,   487,   488,   489,   490,    -1,    -1,   493,
      -1,    -1,   496,   497,   498,   499,   500,   501,   502,   503,
     504,   505,   506,   507,   508,   509,   510,   511,   512,   513,
     514,   515,   516,     3,    -1,     5,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    -1,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,
      40,    -1,    -1,    -1,    -1,    45,    46,    -1,    48,    49,
      50,    -1,    52,    53,    54,    55,    56,    -1,    58,    59,
      -1,    61,    62,    63,    64,    65,    66,    -1,    -1,    69,
      70,    71,    72,    73,    74,    75,    -1,    77,    78,    79,
      80,    81,    -1,    -1,    -1,    85,    86,    87,    88,    89,
      90,    -1,    92,    93,    94,    -1,    96,    97,    98,    99,
     100,   101,    -1,    -1,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,    -1,
     120,    -1,   122,   123,   124,   125,   126,   127,    -1,    -1,
     130,   131,   132,   133,   134,    -1,    -1,   137,   138,   139,
     140,   141,   142,   143,    -1,   145,   146,   147,    -1,   149,
     150,   151,    -1,   153,   154,   155,   156,   157,   158,   159,
     160,   161,   162,   163,    -1,   165,    -1,   167,   168,   169,
     170,    -1,   172,    -1,   174,    -1,    -1,    -1,   178,   179,
     180,    -1,   182,    -1,   184,   185,    -1,    -1,   188,   189,
     190,   191,    -1,   193,   194,   195,   196,   197,   198,   199,
      -1,   201,   202,   203,   204,    -1,   206,   207,   208,   209,
     210,   211,   212,    -1,   214,    -1,   216,   217,   218,   219,
     220,   221,   222,   223,    -1,   225,    -1,   227,    -1,    -1,
     230,    -1,   232,   233,   234,   235,   236,   237,   238,    -1,
      -1,   241,    -1,   243,    -1,    -1,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,    -1,   277,   278,   279,
     280,   281,   282,    -1,   284,   285,    -1,   287,    -1,   289,
     290,   291,   292,   293,   294,    -1,   296,   297,    -1,    -1,
     300,   301,   302,    -1,    -1,   305,   306,   307,    -1,   309,
      -1,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,   323,   324,    -1,    -1,    -1,    -1,   329,
     330,   331,    -1,   333,   334,   335,   336,   337,   338,    -1,
     340,   341,   342,   343,   344,   345,   346,   347,    -1,   349,
     350,   351,   352,   353,   354,   355,   356,    -1,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
     370,   371,    -1,   373,   374,    -1,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,   386,   387,   388,   389,
     390,   391,   392,    -1,    -1,   395,   396,   397,   398,   399,
     400,   401,   402,   403,   404,    -1,    -1,   407,   408,   409,
     410,    -1,   412,   413,   414,   415,   416,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,    -1,    -1,
     430,   431,   432,   433,    -1,   435,   436,   437,   438,   439,
      -1,   441,   442,   443,    -1,   445,    -1,   447,   448,   449,
     450,   451,    -1,   453,   454,   455,   456,   457,   458,   459,
     460,    -1,    -1,   463,   464,   465,    -1,   467,   468,   469,
     470,    -1,   472,   473,   474,   475,   476,   477,   478,    -1,
     480,    -1,   482,   483,   484,   485,   486,   487,   488,   489,
     490,    -1,    -1,   493,    -1,    -1,   496,   497,   498,   499,
     500,   501,   502,   503,   504,   505,   506,   507,   508,   509,
     510,   511,   512,   513,   514,   515,   516,     3,    -1,     5,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    -1,    32,    33,    34,    -1,
      -1,    -1,    -1,    -1,    40,    -1,    -1,    -1,    -1,    45,
      46,    -1,    48,    49,    50,    -1,    52,    53,    54,    55,
      56,    -1,    58,    59,    -1,    61,    62,    63,    64,    65,
      66,    -1,    -1,    69,    70,    71,    72,    73,    74,    75,
      -1,    77,    78,    79,    80,    81,    -1,    -1,    -1,    85,
      86,    87,    88,    89,    90,    -1,    92,    93,    94,    -1,
      96,    97,    98,    99,   100,   101,    -1,    -1,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,    -1,   120,    -1,   122,   123,   124,   125,
     126,   127,    -1,    -1,   130,   131,   132,   133,   134,    -1,
      -1,   137,   138,   139,   140,   141,   142,   143,    -1,   145,
     146,   147,    -1,   149,   150,   151,    -1,   153,   154,   155,
     156,   157,   158,   159,   160,   161,   162,   163,    -1,   165,
      -1,   167,   168,   169,   170,    -1,   172,    -1,   174,    -1,
      -1,    -1,   178,   179,   180,    -1,   182,    -1,   184,   185,
      -1,    -1,   188,   189,   190,   191,    -1,   193,   194,   195,
     196,   197,   198,   199,    -1,   201,   202,   203,   204,    -1,
     206,   207,   208,   209,   210,   211,   212,    -1,   214,    -1,
     216,   217,   218,   219,   220,   221,   222,   223,    -1,   225,
      -1,   227,    -1,    -1,   230,    -1,   232,   233,   234,   235,
     236,   237,   238,    -1,    -1,   241,    -1,   243,    -1,    -1,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
      -1,   277,   278,   279,   280,   281,   282,    -1,   284,   285,
      -1,   287,    -1,   289,   290,   291,   292,   293,   294,    -1,
     296,   297,    -1,    -1,   300,   301,   302,    -1,    -1,   305,
     306,   307,    -1,   309,    -1,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,   323,   324,    -1,
      -1,    -1,    -1,   329,   330,   331,    -1,   333,   334,   335,
     336,   337,   338,    -1,   340,   341,   342,   343,   344,   345,
     346,   347,    -1,   349,   350,   351,   352,   353,   354,   355,
     356,    -1,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,    -1,   373,   374,    -1,
     376,   377,   378,   379,   380,   381,   382,   383,   384,   385,
     386,   387,   388,   389,   390,   391,   392,    -1,    -1,   395,
     396,   397,   398,   399,   400,   401,   402,   403,   404,    -1,
      -1,   407,   408,   409,   410,    -1,   412,   413,   414,   415,
     416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,    -1,    -1,   430,   431,    -1,   433,    -1,   435,
     436,   437,   438,   439,    -1,   441,   442,   443,    -1,   445,
      -1,   447,   448,   449,   450,   451,    -1,   453,   454,   455,
     456,   457,   458,   459,   460,    -1,    -1,   463,   464,   465,
      -1,   467,   468,   469,   470,    -1,   472,   473,   474,   475,
     476,   477,   478,    -1,   480,    -1,   482,   483,   484,   485,
     486,   487,   488,   489,   490,    -1,    -1,   493,    -1,    -1,
     496,   497,   498,   499,   500,   501,   502,   503,   504,   505,
     506,   507,   508,   509,   510,   511,   512,   513,   514,   515,
     516,     3,    -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    -1,
      32,    33,    34,    -1,    -1,    -1,    -1,    -1,    40,    -1,
      -1,    -1,    -1,    45,    46,    -1,    48,    49,    50,    -1,
      52,    53,    54,    55,    56,    -1,    58,    59,    -1,    61,
      62,    63,    64,    65,    66,    -1,    -1,    69,    70,    71,
      72,    73,    74,    75,    -1,    77,    78,    79,    80,    81,
      -1,    -1,    -1,    85,    86,    87,    88,    89,    90,    -1,
      92,    93,    94,    -1,    96,    97,    98,    99,   100,   101,
      -1,    -1,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,    -1,   120,    -1,
     122,   123,   124,   125,   126,   127,    -1,    -1,   130,   131,
     132,   133,   134,    -1,    -1,   137,   138,   139,   140,   141,
     142,   143,    -1,   145,   146,   147,    -1,   149,   150,   151,
      -1,   153,   154,   155,   156,   157,   158,   159,   160,   161,
     162,   163,    -1,   165,    -1,   167,   168,   169,   170,    -1,
     172,    -1,   174,    -1,    -1,    -1,   178,   179,   180,    -1,
     182,    -1,   184,   185,    -1,    -1,   188,   189,   190,   191,
      -1,   193,   194,   195,   196,   197,   198,   199,    -1,   201,
     202,   203,   204,    -1,   206,   207,   208,   209,   210,   211,
     212,    -1,   214,    -1,   216,   217,   218,   219,   220,   221,
     222,   223,    -1,   225,    -1,   227,    -1,    -1,   230,    -1,
     232,   233,   234,   235,   236,   237,   238,    -1,    -1,   241,
      -1,   243,    -1,    -1,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,    -1,   277,   278,   279,   280,   281,
     282,    -1,   284,   285,    -1,   287,    -1,   289,   290,   291,
     292,   293,   294,    -1,   296,   297,    -1,    -1,   300,   301,
     302,    -1,    -1,   305,   306,   307,    -1,   309,    -1,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,   323,   324,    -1,    -1,    -1,    -1,   329,   330,   331,
      -1,   333,   334,   335,   336,   337,   338,    -1,   340,   341,
     342,   343,   344,   345,   346,   347,    -1,   349,   350,   351,
     352,   353,   354,   355,   356,    -1,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
      -1,   373,   374,    -1,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,   386,   387,   388,   389,   390,   391,
     392,    -1,    -1,   395,   396,   397,   398,   399,   400,   401,
     402,   403,   404,    -1,    -1,   407,   408,   409,   410,    -1,
     412,   413,   414,   415,   416,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,    -1,    -1,   430,   431,
      -1,   433,    -1,   435,   436,   437,   438,   439,    -1,   441,
     442,   443,    -1,   445,    -1,   447,   448,   449,   450,   451,
      -1,   453,   454,   455,   456,   457,   458,   459,   460,    -1,
      -1,   463,   464,   465,    -1,   467,   468,   469,   470,    -1,
     472,   473,   474,   475,   476,   477,   478,    -1,   480,    -1,
     482,   483,   484,   485,   486,   487,   488,   489,   490,    -1,
      -1,   493,    -1,    -1,   496,   497,   498,   499,   500,   501,
     502,   503,   504,   505,   506,   507,   508,   509,   510,   511,
     512,   513,   514,   515,   516,     3,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    33,    34,    -1,    -1,    -1,
      -1,    -1,    40,    -1,    -1,    -1,    -1,    45,    46,    -1,
      48,    49,    50,    -1,    52,    53,    54,    55,    56,    -1,
      58,    59,    -1,    61,    62,    63,    64,    65,    66,    -1,
      -1,    69,    70,    71,    72,    73,    74,    75,    -1,    77,
      78,    79,    80,    81,    -1,    -1,    -1,    85,    86,    87,
      88,    89,    90,    -1,    92,    93,    94,    -1,    96,    97,
      98,    99,   100,   101,    -1,    -1,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,    -1,   120,    -1,   122,   123,   124,   125,   126,   127,
      -1,    -1,   130,   131,   132,   133,   134,    -1,    -1,   137,
     138,   139,   140,   141,   142,   143,    -1,   145,   146,   147,
      -1,   149,   150,   151,    -1,   153,   154,   155,   156,   157,
     158,   159,   160,   161,   162,   163,    -1,   165,    -1,   167,
     168,   169,   170,    -1,   172,    -1,   174,    -1,    -1,    -1,
     178,   179,   180,    -1,   182,    -1,   184,   185,    -1,    -1,
     188,   189,   190,   191,    -1,   193,   194,   195,   196,   197,
     198,   199,    -1,   201,   202,   203,   204,    -1,   206,   207,
     208,   209,   210,   211,   212,    -1,   214,    -1,   216,   217,
     218,   219,   220,   221,   222,   223,    -1,   225,    -1,   227,
      -1,    -1,   230,    -1,   232,   233,   234,   235,   236,   237,
     238,    -1,    -1,   241,    -1,   243,    -1,    -1,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,    -1,   277,
     278,   279,   280,   281,   282,    -1,   284,   285,    -1,   287,
      -1,   289,   290,   291,   292,   293,   294,    -1,   296,   297,
      -1,    -1,   300,   301,   302,    -1,    -1,   305,   306,   307,
      -1,   309,    -1,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323,   324,    -1,    -1,    -1,
      -1,   329,   330,   331,    -1,   333,   334,   335,   336,   337,
     338,    -1,   340,   341,   342,   343,   344,   345,   346,   347,
      -1,   349,   350,   351,   352,   353,   354,   355,   356,    -1,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,   371,    -1,   373,   374,    -1,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,   386,   387,
     388,   389,   390,   391,   392,    -1,    -1,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,    -1,    -1,   407,
     408,   409,   410,    -1,   412,   413,   414,   415,   416,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
      -1,    -1,   430,   431,    -1,   433,    -1,   435,   436,   437,
     438,   439,    -1,   441,   442,   443,    -1,   445,    -1,   447,
     448,   449,   450,   451,    -1,   453,   454,   455,   456,   457,
     458,   459,   460,    -1,    -1,   463,   464,   465,    -1,   467,
     468,   469,   470,    -1,   472,   473,   474,   475,   476,   477,
     478,    -1,   480,    -1,   482,   483,   484,   485,   486,   487,
     488,   489,   490,    -1,    -1,   493,    -1,    -1,   496,   497,
     498,   499,   500,   501,   502,   503,   504,   505,   506,   507,
     508,   509,   510,   511,   512,   513,   514,   515,   516,     3,
      -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    -1,    32,    33,
      34,    -1,    -1,    -1,    -1,    -1,    40,    -1,    -1,    -1,
      -1,    45,    46,    -1,    48,    49,    50,    -1,    52,    53,
      54,    55,    56,    -1,    58,    59,    -1,    61,    62,    63,
      64,    65,    66,    -1,    -1,    69,    70,    71,    72,    73,
      74,    75,    -1,    77,    78,    79,    80,    81,    -1,    -1,
      -1,    85,    86,    87,    88,    89,    90,    -1,    92,    93,
      94,    -1,    96,    97,    98,    99,   100,   101,    -1,    -1,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,    -1,   120,    -1,   122,   123,
     124,   125,   126,   127,    -1,    -1,   130,   131,   132,   133,
     134,    -1,    -1,   137,   138,   139,   140,   141,   142,   143,
      -1,   145,   146,   147,    -1,   149,   150,   151,    -1,   153,
     154,   155,   156,   157,   158,   159,   160,   161,   162,   163,
      -1,   165,    -1,   167,   168,   169,   170,    -1,   172,    -1,
     174,    -1,    -1,    -1,   178,   179,   180,    -1,   182,    -1,
     184,   185,    -1,    -1,   188,   189,   190,   191,    -1,   193,
     194,   195,   196,   197,   198,   199,    -1,   201,   202,   203,
     204,    -1,   206,   207,   208,   209,   210,   211,   212,    -1,
     214,    -1,   216,   217,   218,   219,   220,   221,   222,   223,
      -1,   225,    -1,   227,    -1,    -1,   230,    -1,   232,   233,
     234,   235,   236,   237,   238,    -1,    -1,   241,    -1,   243,
      -1,    -1,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,    -1,   277,   278,   279,   280,   281,   282,    -1,
     284,   285,    -1,   287,    -1,   289,   290,   291,   292,   293,
     294,    -1,   296,   297,    -1,    -1,   300,   301,   302,    -1,
      -1,   305,   306,   307,    -1,   309,    -1,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,    -1,    -1,    -1,    -1,   329,   330,   331,    -1,   333,
     334,   335,   336,   337,   338,    -1,   340,   341,   342,   343,
     344,   345,   346,   347,    -1,   349,   350,   351,   352,   353,
     354,   355,   356,    -1,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,   371,    -1,   373,
     374,    -1,   376,   377,   378,   379,   380,   381,   382,   383,
     384,   385,   386,   387,   388,   389,   390,   391,   392,    -1,
      -1,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,    -1,    -1,   407,   408,   409,   410,    -1,   412,   413,
     414,   415,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,    -1,    -1,   430,   431,    -1,   433,
      -1,   435,   436,   437,   438,   439,    -1,   441,   442,   443,
      -1,   445,    -1,   447,   448,   449,   450,   451,    -1,   453,
     454,   455,   456,   457,   458,   459,   460,    -1,    -1,   463,
     464,   465,    -1,   467,   468,   469,   470,    -1,   472,   473,
     474,   475,   476,   477,   478,    -1,   480,    -1,   482,   483,
     484,   485,   486,   487,   488,   489,   490,    -1,    -1,   493,
      -1,    -1,   496,   497,   498,   499,   500,   501,   502,   503,
     504,   505,   506,   507,   508,   509,   510,   511,   512,   513,
     514,   515,   516,     3,    -1,     5,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    -1,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,
      40,    -1,    -1,    -1,    -1,    45,    46,    -1,    48,    49,
      50,    -1,    52,    53,    54,    55,    56,    -1,    58,    59,
      -1,    61,    62,    63,    64,    65,    66,    -1,    -1,    69,
      70,    71,    72,    73,    74,    75,    -1,    77,    78,    79,
      80,    81,    -1,    -1,    -1,    85,    86,    87,    88,    89,
      90,    -1,    92,    93,    94,    -1,    96,    97,    98,    99,
     100,   101,    -1,    -1,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,    -1,
     120,    -1,   122,   123,   124,   125,   126,   127,    -1,    -1,
     130,   131,   132,   133,   134,    -1,    -1,   137,   138,   139,
     140,   141,   142,   143,    -1,   145,   146,   147,    -1,   149,
     150,   151,    -1,   153,   154,   155,   156,   157,   158,   159,
     160,   161,   162,   163,    -1,   165,    -1,   167,   168,   169,
     170,    -1,   172,    -1,   174,    -1,    -1,    -1,   178,   179,
     180,    -1,   182,    -1,   184,   185,    -1,    -1,   188,   189,
     190,   191,    -1,   193,   194,   195,   196,   197,   198,   199,
      -1,   201,   202,   203,   204,    -1,   206,   207,   208,   209,
     210,   211,   212,    -1,   214,    -1,   216,   217,   218,   219,
     220,   221,   222,   223,    -1,   225,    -1,   227,    -1,    -1,
     230,    -1,   232,   233,   234,   235,   236,   237,   238,    -1,
      -1,   241,    -1,   243,    -1,    -1,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,    -1,   277,   278,   279,
     280,   281,   282,    -1,   284,   285,    -1,   287,    -1,   289,
     290,   291,   292,   293,   294,    -1,   296,   297,    -1,    -1,
     300,   301,   302,    -1,    -1,   305,   306,   307,    -1,   309,
      -1,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,   323,   324,    -1,    -1,    -1,    -1,   329,
     330,   331,    -1,   333,   334,   335,   336,   337,   338,    -1,
     340,   341,   342,   343,   344,   345,   346,   347,    -1,   349,
     350,   351,   352,   353,   354,   355,   356,    -1,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
     370,   371,    -1,   373,   374,    -1,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,   386,   387,   388,   389,
     390,   391,   392,    -1,    -1,   395,   396,   397,   398,   399,
     400,   401,   402,   403,   404,    -1,    -1,   407,   408,   409,
     410,    -1,   412,   413,   414,   415,   416,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,    -1,    -1,
     430,   431,    -1,   433,    -1,   435,   436,   437,   438,   439,
      -1,   441,   442,   443,    -1,   445,    -1,   447,   448,   449,
     450,   451,    -1,   453,   454,   455,   456,   457,   458,   459,
     460,    -1,    -1,   463,   464,   465,    -1,   467,   468,   469,
     470,    -1,   472,   473,   474,   475,   476,   477,   478,    -1,
     480,    -1,   482,   483,   484,   485,   486,   487,   488,   489,
     490,    -1,    -1,   493,    -1,    -1,   496,   497,   498,   499,
     500,   501,   502,   503,   504,   505,   506,   507,   508,   509,
     510,   511,   512,   513,   514,   515,   516,     3,    -1,     5,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    -1,    32,    33,    34,    -1,
      -1,    -1,    -1,    -1,    40,    -1,    -1,    -1,    -1,    45,
      46,    -1,    48,    49,    50,    -1,    52,    53,    54,    55,
      56,    -1,    58,    59,    -1,    61,    62,    63,    64,    65,
      66,    -1,    -1,    69,    70,    71,    72,    73,    74,    75,
      -1,    77,    78,    79,    80,    81,    -1,    -1,    -1,    85,
      86,    87,    88,    89,    90,    -1,    92,    93,    94,    -1,
      96,    97,    98,    99,   100,   101,    -1,    -1,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,    -1,   120,    -1,   122,   123,   124,   125,
     126,   127,    -1,    -1,   130,   131,   132,   133,   134,    -1,
      -1,   137,   138,   139,   140,   141,   142,   143,    -1,   145,
     146,   147,    -1,   149,   150,   151,    -1,   153,   154,   155,
     156,   157,   158,   159,   160,   161,   162,   163,    -1,   165,
      -1,   167,   168,   169,   170,    -1,   172,    -1,   174,    -1,
      -1,    -1,   178,   179,   180,    -1,   182,    -1,   184,   185,
      -1,    -1,   188,   189,   190,   191,    -1,   193,   194,   195,
     196,   197,   198,   199,    -1,   201,   202,   203,   204,    -1,
     206,   207,   208,   209,   210,   211,   212,    -1,   214,    -1,
     216,   217,   218,   219,   220,   221,   222,   223,    -1,   225,
      -1,   227,    -1,    -1,   230,    -1,   232,   233,   234,   235,
     236,   237,   238,    -1,    -1,   241,    -1,   243,    -1,    -1,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
      -1,   277,   278,   279,   280,   281,   282,    -1,   284,   285,
      -1,   287,    -1,   289,   290,   291,   292,   293,   294,    -1,
     296,   297,    -1,    -1,   300,   301,   302,    -1,    -1,   305,
     306,   307,    -1,   309,    -1,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,   323,   324,    -1,
      -1,    -1,    -1,   329,   330,   331,    -1,   333,   334,   335,
     336,   337,   338,    -1,   340,   341,   342,   343,   344,   345,
     346,   347,    -1,   349,   350,   351,   352,   353,   354,   355,
     356,    -1,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,    -1,   373,   374,    -1,
     376,   377,   378,   379,   380,   381,   382,   383,   384,   385,
     386,   387,   388,   389,   390,   391,   392,    -1,    -1,   395,
     396,   397,   398,   399,   400,   401,   402,   403,   404,    -1,
      -1,   407,   408,   409,   410,    -1,   412,   413,   414,   415,
     416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,    -1,    -1,   430,   431,    -1,   433,    -1,   435,
     436,   437,   438,   439,    -1,   441,   442,   443,    -1,   445,
      -1,   447,   448,   449,   450,   451,    -1,   453,   454,   455,
     456,   457,   458,   459,   460,    -1,    -1,   463,   464,   465,
      -1,   467,   468,   469,   470,    -1,   472,   473,   474,   475,
     476,   477,   478,    -1,   480,    -1,   482,   483,   484,   485,
     486,   487,   488,   489,   490,    -1,    -1,   493,    -1,    -1,
     496,   497,   498,   499,   500,   501,   502,   503,   504,   505,
     506,   507,   508,   509,   510,   511,   512,   513,   514,   515,
     516,     3,    -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    -1,
      32,    33,    34,    -1,    -1,    -1,    -1,    -1,    40,    -1,
      -1,    -1,    -1,    45,    46,    -1,    48,    49,    50,    -1,
      52,    53,    54,    55,    56,    -1,    58,    59,    -1,    61,
      62,    63,    64,    65,    66,    -1,    -1,    69,    70,    71,
      72,    73,    74,    75,    -1,    77,    78,    79,    80,    81,
      -1,    -1,    -1,    85,    86,    87,    88,    89,    90,    -1,
      92,    93,    94,    -1,    96,    97,    98,    99,   100,   101,
      -1,    -1,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,    -1,   120,    -1,
     122,   123,   124,   125,   126,   127,    -1,    -1,   130,   131,
     132,   133,   134,    -1,    -1,   137,   138,   139,   140,   141,
     142,   143,    -1,   145,   146,   147,    -1,   149,   150,   151,
      -1,   153,   154,   155,   156,   157,   158,   159,   160,   161,
     162,   163,    -1,   165,    -1,   167,   168,   169,   170,    -1,
     172,    -1,   174,    -1,    -1,    -1,   178,   179,   180,    -1,
     182,    -1,   184,   185,    -1,    -1,   188,   189,   190,   191,
      -1,   193,   194,   195,   196,   197,   198,   199,    -1,   201,
     202,   203,   204,    -1,   206,   207,   208,   209,   210,   211,
     212,    -1,   214,    -1,   216,   217,   218,   219,   220,   221,
     222,   223,    -1,   225,    -1,   227,    -1,    -1,   230,    -1,
     232,   233,   234,   235,   236,   237,   238,    -1,    -1,   241,
      -1,   243,    -1,    -1,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,    -1,   277,   278,   279,   280,   281,
     282,    -1,   284,   285,    -1,   287,    -1,   289,   290,   291,
     292,   293,   294,    -1,   296,   297,    -1,    -1,   300,   301,
     302,    -1,    -1,   305,   306,   307,    -1,   309,    -1,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,   323,   324,    -1,    -1,    -1,    -1,   329,   330,   331,
      -1,   333,   334,   335,   336,   337,   338,    -1,   340,   341,
     342,   343,   344,   345,   346,   347,    -1,   349,   350,   351,
     352,   353,   354,   355,   356,    -1,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
      -1,   373,   374,    -1,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,   386,   387,   388,   389,   390,   391,
     392,    -1,    -1,   395,   396,   397,   398,   399,   400,   401,
     402,   403,   404,    -1,    -1,   407,   408,   409,   410,    -1,
     412,   413,   414,   415,   416,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,    -1,    -1,   430,   431,
      -1,   433,    -1,   435,   436,   437,   438,   439,    -1,   441,
     442,   443,    -1,   445,    -1,   447,   448,   449,   450,   451,
      -1,   453,   454,   455,   456,   457,   458,   459,   460,    -1,
      -1,   463,   464,   465,    -1,   467,   468,   469,   470,    -1,
     472,   473,   474,   475,   476,   477,   478,    -1,   480,    -1,
     482,   483,   484,   485,   486,   487,   488,   489,   490,    -1,
      -1,   493,    -1,    -1,   496,   497,   498,   499,   500,   501,
     502,   503,   504,   505,   506,   507,   508,   509,   510,   511,
     512,   513,   514,   515,   516,     3,    -1,     5,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    -1,    32,    33,    34,    -1,    -1,    -1,
      -1,    -1,    40,    -1,    -1,    -1,    -1,    45,    46,    -1,
      48,    49,    50,    -1,    52,    53,    54,    55,    56,    -1,
      58,    59,    -1,    61,    62,    63,    64,    65,    66,    -1,
      -1,    69,    70,    71,    72,    73,    74,    75,    -1,    77,
      78,    79,    80,    81,    -1,    -1,    -1,    85,    86,    87,
      88,    89,    90,    -1,    92,    93,    94,    -1,    96,    97,
      98,    99,   100,   101,    -1,    -1,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,    -1,   120,    -1,   122,   123,   124,   125,   126,   127,
      -1,    -1,   130,   131,   132,   133,   134,    -1,    -1,   137,
     138,   139,   140,   141,   142,   143,    -1,   145,   146,   147,
      -1,   149,   150,   151,    -1,   153,   154,   155,   156,   157,
     158,   159,   160,   161,   162,   163,    -1,   165,    -1,   167,
     168,   169,   170,    -1,   172,    -1,   174,    -1,    -1,    -1,
     178,   179,   180,    -1,   182,    -1,   184,   185,    -1,    -1,
     188,   189,   190,   191,    -1,   193,   194,   195,   196,   197,
     198,   199,    -1,   201,   202,   203,   204,    -1,   206,   207,
     208,   209,   210,   211,   212,    -1,   214,    -1,   216,   217,
     218,   219,   220,   221,   222,   223,    -1,   225,    -1,   227,
      -1,    -1,   230,    -1,   232,   233,   234,   235,   236,   237,
     238,    -1,    -1,   241,    -1,   243,    -1,    -1,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,    -1,   277,
     278,   279,   280,   281,   282,    -1,   284,   285,    -1,   287,
      -1,   289,   290,   291,   292,   293,   294,    -1,   296,   297,
      -1,    -1,   300,   301,   302,    -1,    -1,   305,   306,   307,
      -1,   309,    -1,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323,   324,    -1,    -1,    -1,
      -1,   329,   330,   331,    -1,   333,   334,   335,   336,   337,
     338,    -1,   340,   341,   342,   343,   344,   345,   346,   347,
      -1,   349,   350,   351,   352,   353,   354,   355,   356,    -1,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,   371,    -1,   373,   374,    -1,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,   386,   387,
     388,   389,   390,   391,   392,    -1,    -1,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,    -1,    -1,   407,
     408,   409,   410,    -1,   412,   413,   414,   415,   416,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
      -1,    -1,   430,   431,    -1,   433,    -1,   435,   436,   437,
     438,   439,    -1,   441,   442,   443,    -1,   445,    -1,   447,
     448,   449,   450,   451,    -1,   453,   454,   455,   456,   457,
     458,   459,   460,    -1,    -1,   463,   464,   465,    -1,   467,
     468,   469,   470,    -1,   472,   473,   474,   475,   476,   477,
     478,    -1,   480,    -1,   482,   483,   484,   485,   486,   487,
     488,   489,   490,    -1,    -1,   493,    -1,    -1,   496,   497,
     498,   499,   500,   501,   502,   503,   504,   505,   506,   507,
     508,   509,   510,   511,   512,   513,   514,   515,   516,     3,
      -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    -1,    32,    33,
      34,    -1,    -1,    -1,    -1,    -1,    40,    -1,    -1,    -1,
      -1,    45,    46,    -1,    48,    49,    50,    -1,    52,    53,
      54,    55,    56,    -1,    58,    59,    -1,    61,    62,    63,
      64,    65,    66,    -1,    -1,    69,    70,    71,    72,    73,
      74,    75,    -1,    77,    78,    79,    80,    81,    -1,    -1,
      -1,    85,    86,    87,    88,    89,    90,    -1,    92,    93,
      94,    -1,    96,    97,    98,    99,   100,   101,    -1,    -1,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,    -1,   120,    -1,   122,   123,
     124,   125,   126,   127,    -1,    -1,   130,   131,   132,   133,
     134,    -1,    -1,   137,   138,   139,   140,   141,   142,   143,
      -1,   145,   146,   147,    -1,   149,   150,   151,    -1,   153,
     154,   155,   156,   157,   158,   159,   160,   161,   162,   163,
      -1,   165,    -1,   167,   168,   169,   170,    -1,   172,    -1,
     174,    -1,    -1,    -1,   178,   179,   180,    -1,   182,    -1,
     184,   185,    -1,    -1,   188,   189,   190,   191,    -1,   193,
     194,   195,   196,   197,   198,   199,    -1,   201,   202,   203,
     204,    -1,   206,   207,   208,   209,   210,   211,   212,    -1,
     214,    -1,   216,   217,   218,   219,   220,   221,   222,   223,
      -1,   225,    -1,   227,    -1,    -1,   230,    -1,   232,   233,
     234,   235,   236,   237,   238,    -1,    -1,   241,    -1,   243,
      -1,    -1,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,    -1,   277,   278,   279,   280,   281,   282,    -1,
     284,   285,    -1,   287,    -1,   289,   290,   291,   292,   293,
     294,    -1,   296,   297,    -1,    -1,   300,   301,   302,    -1,
      -1,   305,   306,   307,    -1,   309,    -1,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,    -1,    -1,    -1,    -1,   329,   330,   331,    -1,   333,
     334,   335,   336,   337,   338,    -1,   340,   341,   342,   343,
     344,   345,   346,   347,    -1,   349,   350,   351,   352,   353,
     354,   355,   356,    -1,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,   371,    -1,   373,
     374,    -1,   376,   377,   378,   379,   380,   381,   382,   383,
     384,   385,   386,   387,   388,   389,   390,   391,   392,    -1,
      -1,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,    -1,    -1,   407,   408,   409,   410,    -1,   412,   413,
     414,   415,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,    -1,    -1,   430,   431,    -1,   433,
      -1,   435,   436,   437,   438,   439,    -1,   441,   442,   443,
      -1,   445,    -1,   447,   448,   449,   450,   451,    -1,   453,
     454,   455,   456,   457,   458,   459,   460,    -1,    -1,   463,
     464,   465,    -1,   467,   468,   469,   470,    -1,   472,   473,
     474,   475,   476,   477,   478,    -1,   480,    -1,   482,   483,
     484,   485,   486,   487,   488,   489,   490,    -1,    -1,   493,
      -1,    -1,   496,   497,   498,   499,   500,   501,   502,   503,
     504,   505,   506,   507,   508,   509,   510,   511,   512,   513,
     514,   515,   516,     3,    -1,     5,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    -1,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,
      40,    -1,    -1,    -1,    -1,    45,    46,    -1,    48,    49,
      50,    -1,    52,    53,    54,    55,    56,    -1,    58,    59,
      -1,    61,    62,    63,    64,    65,    66,    -1,    -1,    69,
      70,    71,    72,    73,    74,    75,    -1,    77,    78,    79,
      80,    81,    -1,    -1,    -1,    85,    86,    87,    88,    89,
      90,    -1,    92,    93,    94,    -1,    96,    97,    98,    99,
     100,   101,    -1,    -1,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,    -1,
     120,    -1,   122,   123,   124,   125,   126,   127,    -1,    -1,
     130,   131,   132,   133,   134,    -1,    -1,   137,   138,   139,
     140,   141,   142,   143,    -1,   145,   146,   147,    -1,   149,
     150,   151,    -1,   153,   154,   155,   156,   157,   158,   159,
     160,   161,   162,   163,    -1,   165,    -1,   167,   168,   169,
     170,    -1,   172,    -1,   174,    -1,    -1,    -1,   178,   179,
     180,    -1,   182,    -1,   184,   185,    -1,    -1,   188,   189,
     190,   191,    -1,   193,   194,   195,   196,   197,   198,   199,
      -1,   201,   202,   203,   204,    -1,   206,   207,   208,   209,
     210,   211,   212,    -1,   214,    -1,   216,   217,   218,   219,
     220,   221,   222,   223,    -1,   225,    -1,   227,    -1,    -1,
     230,    -1,   232,   233,   234,   235,   236,   237,   238,    -1,
      -1,   241,    -1,   243,    -1,    -1,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,    -1,   277,   278,   279,
     280,   281,   282,    -1,   284,   285,    -1,   287,    -1,   289,
     290,   291,   292,   293,   294,    -1,   296,   297,    -1,    -1,
     300,   301,   302,    -1,    -1,   305,   306,   307,    -1,   309,
      -1,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,   323,   324,    -1,    -1,    -1,    -1,   329,
     330,   331,    -1,   333,   334,   335,   336,   337,   338,    -1,
     340,   341,   342,   343,   344,   345,   346,   347,    -1,   349,
     350,   351,   352,   353,   354,   355,   356,    -1,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
     370,   371,    -1,   373,   374,    -1,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,   386,   387,   388,   389,
     390,   391,   392,    -1,    -1,   395,   396,   397,   398,   399,
     400,   401,   402,   403,   404,    -1,    -1,   407,   408,   409,
     410,    -1,   412,   413,   414,   415,   416,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,    -1,    -1,
     430,   431,    -1,   433,    -1,   435,   436,   437,   438,   439,
      -1,   441,   442,   443,    -1,   445,    -1,   447,   448,   449,
     450,   451,    -1,   453,   454,   455,   456,   457,   458,   459,
     460,    -1,    -1,   463,   464,   465,    -1,   467,   468,   469,
     470,    -1,   472,   473,   474,   475,   476,   477,   478,    -1,
     480,    -1,   482,   483,   484,   485,   486,   487,   488,   489,
     490,    -1,    -1,   493,    -1,    -1,   496,   497,   498,   499,
     500,   501,   502,   503,   504,   505,   506,   507,   508,   509,
     510,   511,   512,   513,   514,   515,   516,     3,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    -1,    32,    33,    34,    -1,
      -1,    -1,    -1,    -1,    40,    -1,    42,    -1,    -1,    45,
      46,    -1,    48,    49,    50,    -1,    52,    53,    54,    55,
      56,    -1,    58,    59,    -1,    61,    62,    63,    64,    65,
      66,    -1,    -1,    69,    70,    71,    72,    73,    74,    75,
      -1,    77,    78,    79,    80,    81,    -1,    -1,    -1,    85,
      86,    87,    88,    89,    90,    -1,    92,    93,    94,    -1,
      96,    97,    98,    99,   100,   101,    -1,    -1,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,    -1,   120,    -1,   122,   123,   124,   125,
     126,   127,    -1,    -1,   130,   131,   132,   133,   134,    -1,
      -1,   137,   138,   139,   140,   141,   142,   143,    -1,   145,
     146,   147,    -1,   149,   150,   151,    -1,   153,   154,   155,
     156,   157,   158,   159,   160,   161,   162,   163,    -1,   165,
      -1,   167,   168,   169,   170,    -1,   172,    -1,   174,    -1,
      -1,    -1,   178,   179,   180,    -1,   182,    -1,   184,   185,
      -1,    -1,   188,   189,   190,   191,    -1,   193,   194,   195,
     196,   197,   198,   199,    -1,   201,   202,   203,   204,    -1,
     206,   207,   208,   209,   210,   211,   212,    -1,   214,    -1,
     216,   217,   218,   219,   220,   221,   222,   223,    -1,   225,
      -1,   227,    -1,    -1,   230,    -1,   232,   233,   234,   235,
     236,   237,   238,    -1,    -1,   241,    -1,   243,    -1,    -1,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
      -1,   277,   278,   279,   280,   281,   282,    -1,   284,   285,
      -1,   287,    -1,   289,   290,   291,   292,   293,   294,    -1,
     296,   297,    -1,    -1,   300,   301,   302,    -1,    -1,   305,
     306,   307,    -1,   309,    -1,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,   323,   324,    -1,
      -1,    -1,    -1,   329,   330,   331,    -1,   333,   334,   335,
     336,   337,   338,    -1,   340,   341,   342,   343,   344,   345,
     346,   347,    -1,   349,   350,   351,   352,   353,   354,   355,
     356,    -1,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,    -1,   373,   374,    -1,
     376,   377,   378,   379,   380,   381,   382,   383,   384,   385,
     386,   387,   388,   389,   390,   391,   392,    -1,    -1,   395,
     396,   397,   398,   399,   400,   401,   402,   403,   404,    -1,
      -1,   407,   408,   409,   410,    -1,   412,   413,   414,   415,
     416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,    -1,    -1,   430,   431,    -1,   433,    -1,   435,
     436,   437,   438,   439,    -1,   441,   442,   443,    -1,   445,
      -1,   447,   448,   449,   450,   451,    -1,   453,   454,   455,
     456,   457,   458,   459,   460,    -1,    -1,   463,   464,   465,
      -1,   467,   468,   469,   470,    -1,   472,   473,   474,   475,
     476,   477,   478,    -1,   480,    -1,   482,   483,   484,   485,
     486,   487,   488,   489,   490,    -1,    -1,   493,    -1,    -1,
     496,   497,   498,   499,   500,   501,   502,   503,   504,   505,
     506,   507,   508,   509,   510,   511,   512,   513,   514,   515,
     516,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    -1,
      32,    33,    34,    -1,    -1,    -1,    -1,    -1,    40,    -1,
      42,    -1,    -1,    45,    46,    -1,    48,    49,    50,    -1,
      52,    53,    54,    55,    56,    -1,    58,    59,    -1,    61,
      62,    63,    64,    65,    66,    -1,    -1,    69,    70,    71,
      72,    73,    74,    75,    -1,    77,    78,    79,    80,    81,
      -1,    -1,    -1,    85,    86,    87,    88,    89,    90,    -1,
      92,    93,    94,    -1,    96,    97,    98,    99,   100,   101,
      -1,    -1,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,    -1,   120,    -1,
     122,   123,   124,   125,   126,   127,    -1,    -1,   130,   131,
     132,   133,   134,    -1,    -1,   137,   138,   139,   140,   141,
     142,   143,    -1,   145,   146,   147,    -1,   149,   150,   151,
      -1,   153,   154,   155,   156,   157,   158,   159,   160,   161,
     162,   163,    -1,   165,    -1,   167,   168,   169,   170,    -1,
     172,    -1,   174,    -1,    -1,    -1,   178,   179,   180,    -1,
     182,    -1,   184,   185,    -1,    -1,   188,   189,   190,   191,
      -1,   193,   194,   195,   196,   197,   198,   199,    -1,   201,
     202,   203,   204,    -1,   206,   207,   208,   209,   210,   211,
     212,    -1,   214,    -1,   216,   217,   218,   219,   220,   221,
     222,   223,    -1,   225,    -1,   227,    -1,    -1,   230,    -1,
     232,   233,   234,   235,   236,   237,   238,    -1,    -1,   241,
      -1,   243,    -1,    -1,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,    -1,   277,   278,   279,   280,   281,
     282,    -1,   284,   285,    -1,   287,    -1,   289,   290,   291,
     292,   293,   294,    -1,   296,   297,    -1,    -1,   300,   301,
     302,    -1,    -1,   305,   306,   307,    -1,   309,    -1,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,   323,   324,    -1,    -1,    -1,    -1,   329,   330,   331,
      -1,   333,   334,   335,   336,   337,   338,    -1,   340,   341,
     342,   343,   344,   345,   346,   347,    -1,   349,   350,   351,
     352,   353,   354,   355,   356,    -1,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
      -1,   373,   374,    -1,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,   386,   387,   388,   389,   390,   391,
     392,    -1,    -1,   395,   396,   397,   398,   399,   400,   401,
     402,   403,   404,    -1,    -1,   407,   408,   409,   410,    -1,
     412,   413,   414,   415,   416,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,    -1,    -1,   430,   431,
      -1,   433,    -1,   435,   436,   437,   438,   439,    -1,   441,
     442,   443,    -1,   445,    -1,   447,   448,   449,   450,   451,
      -1,   453,   454,   455,   456,   457,   458,   459,   460,    -1,
      -1,   463,   464,   465,    -1,   467,   468,   469,   470,    -1,
     472,   473,   474,   475,   476,   477,   478,    -1,   480,    -1,
     482,   483,   484,   485,   486,   487,   488,   489,   490,    -1,
      -1,   493,    -1,    -1,   496,   497,   498,   499,   500,   501,
     502,   503,   504,   505,   506,   507,   508,   509,   510,   511,
     512,   513,   514,   515,   516,     3,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    33,    34,    -1,    -1,    -1,
      -1,    -1,    40,    -1,    -1,    -1,    -1,    45,    46,    -1,
      48,    49,    50,    -1,    52,    53,    54,    55,    56,    -1,
      58,    59,    -1,    61,    62,    63,    64,    65,    66,    -1,
      -1,    69,    70,    71,    72,    73,    74,    75,    -1,    77,
      78,    79,    80,    81,    -1,    -1,    -1,    85,    86,    87,
      88,    89,    90,    -1,    92,    93,    94,    -1,    96,    97,
      98,    99,   100,   101,    -1,    -1,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,    -1,   120,    -1,   122,   123,   124,   125,   126,   127,
      -1,    -1,   130,   131,   132,   133,   134,    -1,    -1,   137,
     138,   139,   140,   141,   142,   143,    -1,   145,   146,   147,
      -1,   149,   150,   151,    -1,   153,   154,   155,   156,   157,
     158,   159,   160,   161,   162,   163,    -1,   165,    -1,   167,
     168,   169,   170,    -1,   172,    -1,   174,    -1,    -1,    -1,
     178,   179,   180,    -1,   182,    -1,   184,   185,    -1,    -1,
     188,   189,   190,   191,    -1,   193,   194,   195,   196,   197,
     198,   199,    -1,   201,   202,   203,   204,    -1,   206,   207,
     208,   209,   210,   211,   212,    -1,   214,    -1,   216,   217,
     218,   219,   220,   221,   222,   223,    -1,   225,    -1,   227,
      -1,    -1,   230,    -1,   232,   233,   234,   235,   236,   237,
     238,    -1,    -1,   241,    -1,   243,    -1,    -1,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,    -1,   277,
     278,   279,   280,   281,   282,    -1,   284,   285,    -1,   287,
      -1,   289,   290,   291,   292,   293,   294,    -1,   296,   297,
      -1,    -1,   300,   301,   302,    -1,    -1,   305,   306,   307,
      -1,   309,    -1,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323,   324,    -1,    -1,    -1,
      -1,   329,   330,   331,    -1,   333,   334,   335,   336,   337,
     338,    -1,   340,   341,   342,   343,   344,   345,   346,   347,
      -1,   349,   350,   351,   352,   353,   354,   355,   356,    -1,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,   371,    -1,   373,   374,    -1,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,   386,   387,
     388,   389,   390,   391,   392,    -1,    -1,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,    -1,    -1,   407,
     408,   409,   410,    -1,   412,   413,   414,   415,   416,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
      -1,    -1,   430,   431,    -1,   433,    -1,   435,   436,   437,
     438,   439,    -1,   441,   442,   443,    -1,   445,    -1,   447,
     448,   449,   450,   451,    -1,   453,   454,   455,   456,   457,
     458,   459,   460,    -1,    -1,   463,   464,   465,    -1,   467,
     468,   469,   470,    -1,   472,   473,   474,   475,   476,   477,
     478,    -1,   480,    -1,   482,   483,   484,   485,   486,   487,
     488,   489,   490,    -1,    -1,   493,    -1,    -1,   496,   497,
     498,   499,   500,   501,   502,   503,   504,   505,   506,   507,
     508,   509,   510,   511,   512,   513,   514,   515,   516,     3,
      -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    -1,    32,    33,
      34,    -1,    -1,    -1,    -1,    -1,    40,    -1,    -1,    -1,
      -1,    45,    46,    -1,    48,    49,    50,    -1,    52,    53,
      54,    55,    56,    -1,    58,    59,    -1,    61,    62,    63,
      64,    65,    66,    -1,    -1,    69,    70,    71,    72,    73,
      74,    75,    -1,    77,    78,    79,    80,    81,    -1,    -1,
      -1,    85,    86,    87,    88,    89,    90,    -1,    92,    93,
      94,    -1,    96,    97,    98,    99,   100,   101,    -1,    -1,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,    -1,   120,    -1,   122,   123,
     124,   125,   126,   127,    -1,    -1,   130,   131,   132,   133,
     134,    -1,    -1,   137,   138,   139,   140,   141,   142,   143,
      -1,   145,   146,   147,    -1,   149,   150,   151,    -1,   153,
     154,   155,   156,   157,   158,   159,   160,   161,   162,   163,
      -1,   165,    -1,   167,   168,   169,   170,    -1,   172,    -1,
     174,    -1,    -1,    -1,   178,   179,   180,    -1,   182,    -1,
     184,   185,    -1,    -1,   188,   189,   190,   191,    -1,   193,
     194,   195,   196,   197,   198,   199,    -1,   201,   202,   203,
     204,    -1,   206,   207,   208,   209,   210,   211,   212,    -1,
     214,    -1,   216,   217,   218,   219,   220,   221,   222,   223,
      -1,   225,    -1,   227,    -1,    -1,   230,    -1,   232,   233,
     234,   235,   236,   237,   238,    -1,    -1,   241,    -1,   243,
      -1,    -1,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,    -1,   277,   278,   279,   280,   281,   282,    -1,
     284,   285,    -1,   287,    -1,   289,   290,   291,   292,   293,
     294,    -1,   296,   297,    -1,    -1,   300,   301,   302,    -1,
      -1,   305,   306,   307,    -1,   309,    -1,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,    -1,    -1,    -1,    -1,   329,   330,   331,    -1,   333,
     334,   335,   336,   337,   338,    -1,   340,   341,   342,   343,
     344,   345,   346,   347,    -1,   349,   350,   351,   352,   353,
     354,   355,   356,    -1,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,   371,    -1,   373,
     374,    -1,   376,   377,   378,   379,   380,   381,   382,   383,
     384,   385,   386,   387,   388,   389,   390,   391,   392,    -1,
      -1,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,    -1,    -1,   407,   408,   409,   410,    -1,   412,   413,
     414,   415,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,    -1,    -1,   430,   431,    -1,   433,
      -1,   435,   436,   437,   438,   439,    -1,   441,   442,   443,
      -1,   445,    -1,   447,   448,   449,   450,   451,    -1,   453,
     454,   455,   456,   457,   458,   459,   460,    -1,    -1,   463,
     464,   465,    -1,   467,   468,   469,   470,    -1,   472,   473,
     474,   475,   476,   477,   478,    -1,   480,    -1,   482,   483,
     484,   485,   486,   487,   488,   489,   490,    -1,    -1,   493,
      -1,    -1,   496,   497,   498,   499,   500,   501,   502,   503,
     504,   505,   506,   507,   508,   509,   510,   511,   512,   513,
     514,   515,   516,     3,    -1,     5,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    -1,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,
      40,    -1,    -1,    -1,    -1,    45,    46,    -1,    48,    49,
      50,    -1,    52,    53,    54,    55,    56,    -1,    58,    59,
      -1,    61,    62,    63,    64,    65,    66,    -1,    -1,    69,
      70,    71,    72,    73,    74,    75,    -1,    77,    78,    79,
      80,    81,    -1,    -1,    -1,    85,    86,    87,    88,    89,
      90,    -1,    92,    93,    94,    -1,    96,    97,    98,    99,
     100,   101,    -1,    -1,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,    -1,
     120,    -1,   122,   123,   124,   125,   126,   127,    -1,    -1,
     130,   131,   132,   133,   134,    -1,    -1,   137,   138,   139,
     140,   141,   142,   143,    -1,   145,   146,   147,    -1,   149,
     150,   151,    -1,   153,   154,   155,   156,   157,   158,   159,
     160,   161,   162,   163,    -1,   165,    -1,   167,   168,   169,
     170,    -1,   172,    -1,   174,    -1,    -1,    -1,   178,   179,
     180,    -1,   182,    -1,   184,   185,    -1,    -1,   188,   189,
     190,   191,    -1,   193,   194,   195,   196,   197,   198,   199,
      -1,   201,   202,   203,   204,    -1,   206,   207,   208,   209,
     210,   211,   212,    -1,   214,    -1,   216,   217,   218,   219,
     220,   221,   222,   223,    -1,   225,    -1,   227,    -1,    -1,
     230,    -1,   232,   233,   234,   235,   236,   237,   238,    -1,
      -1,   241,    -1,   243,    -1,    -1,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,    -1,   277,   278,   279,
     280,   281,   282,    -1,   284,   285,    -1,   287,    -1,   289,
     290,   291,   292,   293,   294,    -1,   296,   297,    -1,    -1,
     300,   301,   302,    -1,    -1,   305,   306,   307,    -1,   309,
      -1,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,   323,   324,    -1,    -1,    -1,    -1,   329,
     330,   331,    -1,   333,   334,   335,   336,   337,   338,    -1,
     340,   341,   342,   343,   344,   345,   346,   347,    -1,   349,
     350,   351,   352,   353,   354,   355,   356,    -1,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
     370,   371,    -1,   373,   374,    -1,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,   386,   387,   388,   389,
     390,   391,   392,    -1,    -1,   395,   396,   397,   398,   399,
     400,   401,   402,   403,   404,    -1,    -1,   407,   408,   409,
     410,    -1,   412,   413,   414,   415,   416,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,    -1,    -1,
     430,   431,    -1,   433,    -1,   435,   436,   437,   438,   439,
      -1,   441,   442,   443,    -1,   445,    -1,   447,   448,   449,
     450,   451,    -1,   453,   454,   455,   456,   457,   458,   459,
     460,    -1,    -1,   463,   464,   465,    -1,   467,   468,   469,
     470,    -1,   472,   473,   474,   475,   476,   477,   478,    -1,
     480,    -1,   482,   483,   484,   485,   486,   487,   488,   489,
     490,    -1,    -1,   493,    -1,    -1,   496,   497,   498,   499,
     500,   501,   502,   503,   504,   505,   506,   507,   508,   509,
     510,   511,   512,   513,   514,   515,   516,     3,    -1,     5,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    -1,    32,    33,    34,    -1,
      -1,    -1,    -1,    -1,    40,    -1,    -1,    -1,    -1,    45,
      46,    -1,    48,    49,    50,    -1,    52,    53,    54,    55,
      56,    -1,    58,    59,    -1,    61,    62,    63,    64,    65,
      66,    -1,    -1,    69,    70,    71,    72,    73,    74,    75,
      -1,    77,    78,    79,    80,    81,    -1,    -1,    -1,    85,
      86,    87,    88,    89,    90,    -1,    92,    93,    94,    -1,
      96,    97,    98,    99,   100,   101,    -1,    -1,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,    -1,   120,    -1,   122,   123,   124,   125,
     126,   127,    -1,    -1,   130,   131,   132,   133,   134,    -1,
      -1,   137,   138,   139,   140,   141,   142,   143,    -1,   145,
     146,   147,    -1,   149,   150,   151,    -1,   153,   154,   155,
     156,   157,   158,   159,   160,   161,   162,   163,    -1,   165,
      -1,   167,   168,   169,   170,    -1,   172,    -1,   174,    -1,
      -1,    -1,   178,   179,   180,    -1,   182,    -1,   184,   185,
      -1,    -1,   188,   189,   190,   191,    -1,   193,   194,   195,
     196,   197,   198,   199,    -1,   201,   202,   203,   204,    -1,
     206,   207,   208,   209,   210,   211,   212,    -1,   214,    -1,
     216,   217,   218,   219,   220,   221,   222,   223,    -1,   225,
      -1,   227,    -1,    -1,   230,    -1,   232,   233,   234,   235,
     236,   237,   238,    -1,    -1,   241,    -1,   243,    -1,    -1,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
      -1,   277,   278,   279,   280,   281,   282,    -1,   284,   285,
      -1,   287,    -1,   289,   290,   291,   292,   293,   294,    -1,
     296,   297,    -1,    -1,   300,   301,   302,    -1,    -1,   305,
     306,   307,    -1,   309,    -1,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,   323,   324,    -1,
      -1,    -1,    -1,   329,   330,   331,    -1,   333,   334,   335,
     336,   337,   338,    -1,   340,   341,   342,   343,   344,   345,
     346,   347,    -1,   349,   350,   351,   352,   353,   354,   355,
     356,    -1,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,    -1,   373,   374,    -1,
     376,   377,   378,   379,   380,   381,   382,   383,   384,   385,
     386,   387,   388,   389,   390,   391,   392,    -1,    -1,   395,
     396,   397,   398,   399,   400,   401,   402,   403,   404,    -1,
      -1,   407,   408,   409,   410,    -1,   412,   413,   414,   415,
     416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,    -1,    -1,   430,   431,    -1,   433,    -1,   435,
     436,   437,   438,   439,    -1,   441,   442,   443,    -1,   445,
      -1,   447,   448,   449,   450,   451,    -1,   453,   454,   455,
     456,   457,   458,   459,   460,    -1,    -1,   463,   464,   465,
      -1,   467,   468,   469,   470,    -1,   472,   473,   474,   475,
     476,   477,   478,    -1,   480,    -1,   482,   483,   484,   485,
     486,   487,   488,   489,   490,    -1,    -1,   493,    -1,    -1,
     496,   497,   498,   499,   500,   501,   502,   503,   504,   505,
     506,   507,   508,   509,   510,   511,   512,   513,   514,   515,
     516,     3,    -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    -1,
      32,    33,    34,    -1,    -1,    -1,    -1,    -1,    40,    -1,
      -1,    -1,    -1,    45,    46,    -1,    48,    49,    50,    -1,
      52,    53,    54,    55,    56,    -1,    58,    59,    -1,    61,
      62,    63,    64,    65,    66,    -1,    -1,    69,    70,    71,
      72,    73,    74,    75,    -1,    77,    78,    79,    80,    81,
      -1,    -1,    -1,    85,    86,    87,    88,    89,    90,    -1,
      92,    93,    94,    -1,    96,    97,    98,    99,   100,   101,
      -1,    -1,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,    -1,   120,    -1,
     122,   123,   124,   125,   126,   127,    -1,    -1,   130,   131,
     132,   133,   134,    -1,    -1,   137,   138,   139,   140,   141,
     142,   143,    -1,   145,   146,   147,    -1,   149,   150,   151,
      -1,   153,   154,   155,   156,   157,   158,   159,   160,   161,
     162,   163,    -1,   165,    -1,   167,   168,   169,   170,    -1,
     172,    -1,   174,    -1,    -1,    -1,   178,   179,   180,    -1,
     182,    -1,   184,   185,    -1,    -1,   188,   189,   190,   191,
      -1,   193,   194,   195,   196,   197,   198,   199,    -1,   201,
     202,   203,   204,    -1,   206,   207,   208,   209,   210,   211,
     212,    -1,   214,    -1,   216,   217,   218,   219,   220,   221,
     222,   223,    -1,   225,    -1,   227,    -1,    -1,   230,    -1,
     232,   233,   234,   235,   236,   237,   238,    -1,    -1,   241,
      -1,   243,    -1,    -1,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,    -1,   277,   278,   279,   280,   281,
     282,    -1,   284,   285,    -1,   287,    -1,   289,   290,   291,
     292,   293,   294,    -1,   296,   297,    -1,    -1,   300,   301,
     302,    -1,    -1,   305,   306,   307,    -1,   309,    -1,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,   323,   324,    -1,    -1,    -1,    -1,   329,   330,   331,
      -1,   333,   334,   335,   336,   337,   338,    -1,   340,   341,
     342,   343,   344,   345,   346,   347,    -1,   349,   350,   351,
     352,   353,   354,   355,   356,    -1,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
      -1,   373,   374,    -1,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,   386,   387,   388,   389,   390,   391,
     392,    -1,    -1,   395,   396,   397,   398,   399,   400,   401,
     402,   403,   404,    -1,    -1,   407,   408,   409,   410,    -1,
     412,   413,   414,   415,   416,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,    -1,    -1,   430,   431,
      -1,   433,    -1,   435,   436,   437,   438,   439,    -1,   441,
     442,   443,    -1,   445,    -1,   447,   448,   449,   450,   451,
      -1,   453,   454,   455,   456,   457,   458,   459,   460,    -1,
      -1,   463,   464,   465,    -1,   467,   468,   469,   470,    -1,
     472,   473,   474,   475,   476,   477,   478,    -1,   480,    -1,
     482,   483,   484,   485,   486,   487,   488,   489,   490,    -1,
      -1,   493,    -1,    -1,   496,   497,   498,   499,   500,   501,
     502,   503,   504,   505,   506,   507,   508,   509,   510,   511,
     512,   513,   514,   515,   516,     3,    -1,     5,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    -1,    32,    33,    34,    -1,    -1,    -1,
      -1,    -1,    40,    -1,    -1,    -1,    -1,    45,    46,    -1,
      48,    49,    50,    -1,    52,    53,    54,    55,    56,    -1,
      58,    59,    -1,    61,    62,    63,    64,    65,    66,    -1,
      -1,    69,    70,    71,    72,    73,    74,    75,    -1,    77,
      78,    79,    80,    81,    -1,    -1,    -1,    85,    86,    87,
      88,    89,    90,    -1,    92,    93,    94,    -1,    96,    97,
      98,    99,   100,   101,    -1,    -1,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,    -1,   120,    -1,   122,   123,   124,   125,   126,   127,
      -1,    -1,   130,   131,   132,   133,   134,    -1,    -1,   137,
     138,   139,   140,   141,   142,   143,    -1,   145,   146,   147,
      -1,   149,   150,   151,    -1,   153,   154,   155,   156,   157,
     158,   159,   160,   161,   162,   163,    -1,   165,    -1,   167,
     168,   169,   170,    -1,   172,    -1,   174,    -1,    -1,    -1,
     178,   179,   180,    -1,   182,    -1,   184,   185,    -1,    -1,
     188,   189,   190,   191,    -1,   193,   194,   195,   196,   197,
     198,   199,    -1,   201,   202,   203,   204,    -1,   206,   207,
     208,   209,   210,   211,   212,    -1,   214,    -1,   216,   217,
     218,   219,   220,   221,   222,   223,    -1,   225,    -1,   227,
      -1,    -1,   230,    -1,   232,   233,   234,   235,   236,   237,
     238,    -1,    -1,   241,    -1,   243,    -1,    -1,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,    -1,   277,
     278,   279,   280,   281,   282,    -1,   284,   285,    -1,   287,
      -1,   289,   290,   291,   292,   293,   294,    -1,   296,   297,
      -1,    -1,   300,   301,   302,    -1,    -1,   305,   306,   307,
      -1,   309,    -1,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323,   324,    -1,    -1,    -1,
      -1,   329,   330,   331,    -1,   333,   334,   335,   336,   337,
     338,    -1,   340,   341,   342,   343,   344,   345,   346,   347,
      -1,   349,   350,   351,   352,   353,   354,   355,   356,    -1,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,   371,    -1,   373,   374,    -1,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,   386,   387,
     388,   389,   390,   391,   392,    -1,    -1,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,    -1,    -1,   407,
     408,   409,   410,    -1,   412,   413,   414,   415,   416,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
      -1,    -1,   430,   431,    -1,   433,    -1,   435,   436,   437,
     438,   439,    -1,   441,   442,   443,    -1,   445,    -1,   447,
     448,   449,   450,   451,    -1,   453,   454,   455,   456,   457,
     458,   459,   460,    -1,    -1,   463,   464,   465,    -1,   467,
     468,   469,   470,    -1,   472,   473,   474,   475,   476,   477,
     478,    -1,   480,    -1,   482,   483,   484,   485,   486,   487,
     488,   489,   490,    -1,    -1,   493,    -1,    -1,   496,   497,
     498,   499,   500,   501,   502,   503,   504,   505,   506,   507,
     508,   509,   510,   511,   512,   513,   514,   515,   516,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    -1,    32,    33,
      34,    -1,    -1,    -1,    38,    -1,    40,    -1,    42,    -1,
      44,    45,    46,    -1,    48,    49,    50,    51,    52,    53,
      54,    -1,    56,    57,    58,    59,    -1,    61,    62,    63,
      64,    65,    66,    -1,    -1,    69,    70,    71,    72,    73,
      74,    75,    -1,    77,    78,    79,    80,    -1,    -1,    83,
      -1,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    -1,    96,    97,    98,    99,   100,   101,    -1,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,    -1,   120,    -1,   122,   123,
     124,   125,   126,   127,    -1,    -1,   130,   131,   132,   133,
     134,    -1,    -1,   137,   138,   139,   140,   141,   142,   143,
      -1,   145,   146,   147,    -1,   149,   150,   151,    -1,   153,
     154,   155,   156,    -1,   158,   159,   160,   161,   162,    -1,
      -1,   165,    -1,   167,   168,   169,   170,    -1,   172,    -1,
     174,   175,    -1,   177,   178,   179,   180,   181,   182,    -1,
     184,   185,    -1,    -1,    -1,    -1,   190,   191,    -1,   193,
     194,   195,   196,   197,   198,   199,   200,   201,   202,   203,
     204,    -1,   206,   207,   208,   209,   210,   211,   212,    -1,
     214,   215,    -1,   217,   218,   219,   220,   221,   222,   223,
      -1,   225,    -1,   227,   228,   229,   230,   231,   232,   233,
     234,   235,   236,   237,   238,    -1,    -1,   241,   242,   243,
     244,    -1,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,    -1,    -1,
     284,   285,   286,   287,    -1,    -1,   290,   291,   292,   293,
     294,    -1,   296,   297,    -1,    -1,   300,   301,   302,    -1,
      -1,   305,   306,    -1,   308,   309,   310,    -1,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,    -1,    -1,    -1,    -1,   329,   330,    -1,   332,   333,
     334,    -1,   336,   337,   338,    -1,   340,   341,   342,   343,
     344,   345,   346,   347,    -1,   349,   350,   351,   352,   353,
     354,   355,   356,    -1,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,   371,    -1,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,   385,   386,   387,   388,   389,   390,   391,   392,    -1,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,    -1,   406,   407,   408,   409,   410,    -1,   412,   413,
     414,   415,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,    -1,    -1,    -1,   430,   431,    -1,   433,
     434,   435,   436,   437,   438,   439,    -1,   441,   442,   443,
      -1,   445,    -1,   447,   448,    -1,   450,    -1,    -1,   453,
     454,   455,   456,   457,   458,   459,   460,   461,    -1,   463,
     464,   465,    -1,   467,   468,   469,   470,    -1,   472,   473,
     474,   475,   476,    -1,   478,    -1,   480,   481,   482,   483,
     484,   485,   486,   487,   488,   489,   490,    -1,    -1,   493,
      -1,    -1,   496,   497,   498,   499,   500,   501,     3,    -1,
       5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   513,
     514,   515,   516,    -1,    -1,    -1,    -1,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    -1,    32,    33,    34,
      -1,    -1,    -1,    -1,    -1,    40,    -1,    -1,    -1,    -1,
      45,    46,    -1,    48,    49,    50,    -1,    52,    53,    54,
      55,    56,    -1,    58,    59,    -1,    61,    62,    63,    64,
      65,    66,    -1,    -1,    69,    70,    71,    72,    73,    74,
      75,    -1,    77,    78,    79,    80,    81,    -1,    -1,    -1,
      85,    86,    87,    88,    89,    90,    -1,    92,    93,    94,
      -1,    96,    97,    98,    99,   100,   101,    -1,    -1,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,    -1,   120,    -1,   122,   123,   124,
     125,   126,   127,    -1,    -1,   130,   131,   132,   133,   134,
      -1,    -1,   137,   138,   139,   140,   141,   142,   143,    -1,
     145,   146,   147,    -1,   149,   150,   151,    -1,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,   163,    -1,
     165,    -1,   167,   168,   169,   170,    -1,   172,    -1,   174,
      -1,    -1,    -1,   178,   179,   180,    -1,   182,    -1,   184,
     185,    -1,    -1,   188,   189,   190,   191,    -1,   193,   194,
     195,   196,   197,   198,   199,    -1,   201,   202,   203,   204,
      -1,   206,   207,   208,   209,   210,   211,   212,    -1,   214,
      -1,   216,   217,   218,   219,   220,   221,   222,   223,    -1,
     225,    -1,   227,    -1,    -1,   230,    -1,   232,   233,   234,
     235,   236,   237,   238,    -1,    -1,   241,    -1,   243,    -1,
      -1,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,    -1,   277,   278,   279,   280,   281,   282,    -1,   284,
     285,    -1,   287,    -1,   289,   290,   291,   292,   293,   294,
      -1,   296,   297,    -1,    -1,   300,   301,   302,    -1,    -1,
     305,   306,   307,    -1,   309,    -1,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
      -1,    -1,    -1,    -1,   329,   330,   331,    -1,   333,   334,
     335,   336,   337,   338,    -1,   340,   341,   342,   343,   344,
     345,   346,   347,    -1,   349,   350,   351,   352,   353,   354,
     355,   356,    -1,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,    -1,   373,   374,
      -1,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,    -1,    -1,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
      -1,    -1,   407,   408,   409,   410,    -1,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,    -1,    -1,   430,   431,    -1,   433,    -1,
     435,   436,   437,   438,   439,    -1,   441,   442,   443,    -1,
     445,    -1,   447,   448,   449,   450,   451,    -1,   453,   454,
     455,   456,   457,   458,   459,   460,    -1,    -1,   463,   464,
     465,    -1,   467,   468,   469,   470,    -1,   472,   473,   474,
     475,   476,   477,   478,    -1,   480,    -1,   482,   483,   484,
     485,   486,   487,   488,   489,   490,    -1,    -1,   493,    -1,
      -1,   496,   497,   498,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    30,
      -1,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,    40,
      -1,    -1,    -1,    -1,    45,    46,    -1,    48,    49,    50,
      -1,    52,    53,    54,    55,    56,    -1,    58,    59,    -1,
      61,    62,    63,    64,    65,    66,    -1,    -1,    69,    70,
      71,    72,    73,    74,    75,    -1,    77,    78,    79,    80,
      81,    -1,    -1,    -1,    85,    86,    87,    88,    89,    90,
      -1,    92,    93,    94,    -1,    96,    97,    98,    99,   100,
     101,    -1,    -1,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,    -1,   120,
      -1,   122,   123,   124,   125,   126,   127,    -1,    -1,   130,
     131,   132,   133,   134,    -1,    -1,   137,   138,   139,   140,
     141,   142,   143,    -1,   145,   146,   147,    -1,   149,   150,
     151,    -1,   153,   154,   155,   156,   157,   158,   159,   160,
     161,   162,   163,    -1,   165,    -1,   167,   168,   169,   170,
      -1,   172,    -1,   174,    -1,    -1,    -1,   178,   179,   180,
      -1,   182,    -1,   184,   185,    -1,    -1,   188,   189,   190,
     191,    -1,   193,   194,   195,   196,   197,   198,   199,    -1,
     201,   202,   203,   204,    -1,   206,   207,   208,   209,   210,
     211,   212,    -1,   214,    -1,   216,   217,   218,   219,   220,
     221,   222,   223,    -1,   225,    -1,   227,    -1,    -1,   230,
      -1,   232,   233,   234,   235,   236,   237,   238,    -1,    -1,
     241,    -1,   243,    -1,    -1,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,    -1,   277,   278,   279,   280,
     281,   282,    -1,   284,   285,    -1,   287,    -1,   289,   290,
     291,   292,   293,   294,    -1,   296,   297,    -1,    -1,   300,
     301,   302,    -1,    -1,   305,   306,   307,    -1,   309,    -1,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,   322,   323,   324,    -1,    -1,    -1,    -1,   329,   330,
     331,    -1,   333,   334,   335,   336,   337,   338,    -1,   340,
     341,   342,   343,   344,   345,   346,   347,    -1,   349,   350,
     351,   352,   353,   354,   355,   356,    -1,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,    -1,   373,   374,    -1,   376,   377,   378,   379,   380,
     381,   382,   383,   384,   385,   386,   387,   388,   389,   390,
     391,   392,    -1,    -1,   395,   396,   397,   398,   399,   400,
     401,   402,   403,   404,    -1,    -1,   407,   408,   409,   410,
      -1,   412,   413,   414,   415,   416,   417,   418,   419,   420,
     421,   422,   423,   424,   425,   426,   427,    -1,    -1,   430,
     431,    -1,   433,    -1,   435,   436,   437,   438,   439,    -1,
     441,   442,   443,    -1,   445,    -1,   447,   448,   449,   450,
     451,    -1,   453,   454,   455,   456,   457,   458,   459,   460,
      -1,    -1,   463,   464,   465,    -1,   467,   468,   469,   470,
      -1,   472,   473,   474,   475,   476,   477,   478,    -1,   480,
      -1,   482,   483,   484,   485,   486,   487,   488,   489,   490,
      -1,    -1,   493,    -1,    -1,   496,   497,   498,   499,   500,
     501,   502,   503,   504,   505,   506,   507,   508,   509,   510,
     511,   512,   513,   514,   515,   516,     3,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    -1,    32,    33,    34,    -1,    -1,
      -1,    -1,    -1,    40,    -1,    -1,    -1,    -1,    45,    46,
      -1,    48,    49,    50,    -1,    52,    53,    54,    55,    56,
      -1,    58,    59,    -1,    61,    62,    63,    64,    65,    66,
      -1,    -1,    69,    70,    71,    72,    73,    74,    75,    -1,
      77,    78,    79,    80,    81,    -1,    -1,    -1,    85,    86,
      87,    88,    89,    90,    -1,    92,    93,    94,    -1,    96,
      97,    98,    99,   100,   101,    -1,    -1,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,   118,    -1,   120,    -1,   122,   123,   124,   125,   126,
     127,    -1,    -1,   130,   131,   132,   133,   134,    -1,    -1,
     137,   138,   139,   140,   141,   142,   143,    -1,   145,   146,
     147,    -1,   149,   150,   151,    -1,   153,   154,   155,   156,
     157,   158,   159,   160,   161,   162,   163,    -1,   165,    -1,
     167,   168,   169,   170,    -1,   172,    -1,   174,    -1,    -1,
      -1,   178,   179,   180,    -1,   182,    -1,   184,   185,    -1,
      -1,   188,   189,   190,   191,    -1,   193,   194,   195,   196,
     197,   198,   199,    -1,   201,   202,   203,   204,    -1,   206,
     207,   208,   209,   210,   211,   212,    -1,   214,    -1,   216,
     217,   218,   219,   220,   221,   222,   223,    -1,   225,    -1,
     227,    -1,    -1,   230,    -1,   232,   233,   234,   235,   236,
     237,   238,    -1,    -1,   241,    -1,   243,    -1,    -1,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,    -1,
     277,   278,   279,   280,   281,   282,    -1,   284,   285,    -1,
     287,    -1,   289,   290,   291,   292,   293,   294,    -1,   296,
     297,    -1,    -1,   300,   301,   302,    -1,    -1,   305,   306,
     307,    -1,   309,    -1,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,   323,   324,    -1,    -1,
      -1,    -1,   329,   330,   331,    -1,   333,   334,   335,   336,
     337,   338,    -1,   340,   341,   342,   343,   344,   345,   346,
     347,    -1,   349,   350,   351,   352,   353,   354,   355,   356,
      -1,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,   370,   371,    -1,   373,   374,    -1,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,   386,
     387,   388,   389,   390,   391,   392,    -1,    -1,   395,   396,
     397,   398,   399,   400,   401,   402,   403,   404,    -1,    -1,
     407,   408,   409,   410,    -1,   412,   413,   414,   415,   416,
     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
     427,    -1,    -1,   430,   431,    -1,   433,    -1,   435,   436,
     437,   438,   439,    -1,   441,   442,   443,    -1,   445,    -1,
     447,   448,   449,   450,   451,    -1,   453,   454,   455,   456,
     457,   458,   459,   460,    -1,    -1,   463,   464,   465,    -1,
     467,   468,   469,   470,    -1,   472,   473,   474,   475,   476,
     477,   478,    -1,   480,    -1,   482,   483,   484,   485,   486,
     487,   488,   489,   490,    -1,    -1,   493,    -1,    -1,   496,
     497,   498,   499,   500,   501,   502,   503,   504,   505,   506,
     507,   508,   509,   510,   511,   512,   513,   514,   515,   516,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,
      23,    24,    25,    26,    27,    28,    29,    30,    -1,    32,
      33,    34,    -1,    -1,    -1,    -1,    -1,    40,    -1,    -1,
      -1,    -1,    45,    46,    -1,    48,    49,    50,    -1,    52,
      53,    54,    55,    56,    -1,    58,    59,    -1,    61,    62,
      63,    64,    65,    66,    -1,    -1,    69,    70,    71,    72,
      73,    74,    75,    -1,    77,    78,    79,    80,    81,    -1,
      -1,    -1,    85,    86,    87,    88,    89,    90,    -1,    92,
      93,    94,    -1,    96,    97,    98,    99,   100,   101,    -1,
      -1,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,   117,   118,    -1,   120,    -1,   122,
     123,   124,   125,   126,   127,    -1,    -1,   130,   131,   132,
     133,   134,    -1,    -1,   137,   138,   139,   140,   141,   142,
     143,    -1,   145,   146,   147,    -1,   149,   150,   151,    -1,
     153,   154,   155,   156,   157,   158,   159,   160,   161,   162,
     163,    -1,   165,    -1,   167,   168,   169,   170,    -1,   172,
      -1,   174,    -1,    -1,    -1,   178,   179,   180,    -1,   182,
      -1,   184,   185,    -1,    -1,   188,   189,   190,   191,    -1,
     193,   194,   195,   196,   197,   198,   199,    -1,   201,   202,
     203,   204,    -1,   206,   207,   208,   209,   210,   211,   212,
      -1,   214,    -1,   216,   217,   218,   219,   220,   221,   222,
     223,    -1,   225,    -1,   227,    -1,    -1,   230,    -1,   232,
     233,   234,   235,   236,   237,   238,    -1,    -1,   241,    -1,
     243,    -1,    -1,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,    -1,   277,   278,   279,   280,   281,   282,
      -1,   284,   285,    -1,   287,    -1,   289,   290,   291,   292,
     293,   294,    -1,   296,   297,    -1,    -1,   300,   301,   302,
      -1,    -1,   305,   306,   307,    -1,   309,    -1,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
     323,   324,    -1,    -1,    -1,    -1,   329,   330,   331,    -1,
     333,   334,   335,   336,   337,   338,    -1,   340,   341,   342,
     343,   344,   345,   346,   347,    -1,   349,   350,   351,   352,
     353,   354,   355,   356,    -1,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,   371,    -1,
     373,   374,    -1,   376,   377,   378,   379,   380,   381,   382,
     383,   384,   385,   386,   387,   388,   389,   390,   391,   392,
      -1,    -1,   395,   396,   397,   398,   399,   400,   401,   402,
     403,   404,    -1,    -1,   407,   408,   409,   410,    -1,   412,
     413,   414,   415,   416,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,   427,    -1,    -1,   430,   431,    -1,
     433,    -1,   435,   436,   437,   438,   439,    -1,   441,   442,
     443,    -1,   445,    -1,   447,   448,   449,   450,   451,    -1,
     453,   454,   455,   456,   457,   458,   459,   460,    -1,    -1,
     463,   464,   465,    -1,   467,   468,   469,   470,    -1,   472,
     473,   474,   475,   476,   477,   478,    -1,   480,    -1,   482,
     483,   484,   485,   486,   487,   488,   489,   490,    -1,    -1,
     493,    -1,    -1,   496,   497,   498,   499,   500,   501,   502,
     503,   504,   505,   506,   507,   508,   509,   510,   511,   512,
     513,   514,   515,   516,     3,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    22,    23,    24,    25,    26,    27,    28,
      29,    30,    -1,    32,    33,    34,    -1,    -1,    -1,    -1,
      -1,    40,    -1,    -1,    -1,    -1,    45,    46,    -1,    48,
      49,    50,    -1,    52,    53,    54,    55,    56,    -1,    58,
      59,    -1,    61,    62,    63,    64,    65,    66,    -1,    -1,
      69,    70,    71,    72,    73,    74,    75,    -1,    77,    78,
      79,    80,    81,    -1,    -1,    -1,    85,    86,    87,    88,
      89,    90,    -1,    92,    93,    94,    -1,    96,    97,    98,
      99,   100,   101,    -1,    -1,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
      -1,   120,    -1,   122,   123,   124,   125,   126,   127,    -1,
      -1,   130,   131,   132,   133,   134,    -1,    -1,   137,   138,
     139,   140,   141,   142,   143,    -1,   145,   146,   147,    -1,
     149,   150,   151,    -1,   153,   154,   155,   156,   157,   158,
     159,   160,   161,   162,   163,    -1,   165,    -1,   167,   168,
     169,   170,    -1,   172,    -1,   174,    -1,    -1,    -1,   178,
     179,   180,    -1,   182,    -1,   184,   185,    -1,    -1,   188,
     189,   190,   191,    -1,   193,   194,   195,   196,   197,   198,
     199,    -1,   201,   202,   203,   204,    -1,   206,   207,   208,
     209,   210,   211,   212,    -1,   214,    -1,   216,   217,   218,
     219,   220,   221,   222,   223,    -1,   225,    -1,   227,    -1,
      -1,   230,    -1,   232,   233,   234,   235,   236,   237,   238,
      -1,    -1,   241,    -1,   243,    -1,    -1,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,    -1,   277,   278,
     279,   280,   281,   282,    -1,   284,   285,    -1,   287,    -1,
     289,   290,   291,   292,   293,   294,    -1,   296,   297,    -1,
      -1,   300,   301,   302,    -1,    -1,   305,   306,   307,    -1,
     309,    -1,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,    -1,    -1,    -1,    -1,
     329,   330,   331,    -1,   333,   334,   335,   336,   337,   338,
      -1,   340,   341,   342,   343,   344,   345,   346,   347,    -1,
     349,   350,   351,   352,   353,   354,   355,   356,    -1,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,   371,    -1,   373,   374,    -1,   376,   377,   378,
     379,   380,   381,   382,   383,   384,   385,   386,   387,   388,
     389,   390,   391,   392,    -1,    -1,   395,   396,   397,   398,
     399,   400,   401,   402,   403,   404,    -1,    -1,   407,   408,
     409,   410,    -1,   412,   413,   414,   415,   416,   417,   418,
     419,   420,   421,   422,   423,   424,   425,   426,   427,    -1,
      -1,   430,   431,    -1,   433,    -1,   435,   436,   437,   438,
     439,    -1,   441,   442,   443,    -1,   445,    -1,   447,   448,
     449,   450,   451,    -1,   453,   454,   455,   456,   457,   458,
     459,   460,    -1,    -1,   463,   464,   465,    -1,   467,   468,
     469,   470,    -1,   472,   473,   474,   475,   476,   477,   478,
      -1,   480,    -1,   482,   483,   484,   485,   486,   487,   488,
     489,   490,    -1,    -1,   493,    -1,    -1,   496,   497,   498,
     499,   500,   501,   502,   503,   504,   505,   506,   507,   508,
     509,   510,   511,   512,   513,   514,   515,   516,     3,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    -1,    32,    33,    34,
      -1,    -1,    -1,    -1,    -1,    40,    -1,    -1,    -1,    -1,
      45,    46,    -1,    48,    49,    50,    -1,    52,    53,    54,
      55,    56,    -1,    58,    59,    -1,    61,    62,    63,    64,
      65,    66,    -1,    -1,    69,    70,    71,    72,    73,    74,
      75,    -1,    77,    78,    79,    80,    81,    -1,    -1,    -1,
      85,    86,    87,    88,    89,    90,    -1,    92,    93,    94,
      -1,    96,    97,    98,    99,   100,   101,    -1,    -1,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,    -1,   120,    -1,   122,   123,   124,
     125,   126,   127,    -1,    -1,   130,   131,   132,   133,   134,
      -1,    -1,   137,   138,   139,   140,   141,   142,   143,    -1,
     145,   146,   147,    -1,   149,   150,   151,    -1,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,   163,    -1,
     165,    -1,   167,   168,   169,   170,    -1,   172,    -1,   174,
      -1,    -1,    -1,   178,   179,   180,    -1,   182,    -1,   184,
     185,    -1,    -1,   188,   189,   190,   191,    -1,   193,   194,
     195,   196,   197,   198,   199,    -1,   201,   202,   203,   204,
      -1,   206,   207,   208,   209,   210,   211,   212,    -1,   214,
      -1,   216,   217,   218,   219,   220,   221,   222,   223,    -1,
     225,    -1,   227,    -1,    -1,   230,    -1,   232,   233,   234,
     235,   236,   237,   238,    -1,    -1,   241,    -1,   243,    -1,
      -1,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,    -1,   277,   278,   279,   280,   281,   282,    -1,   284,
     285,    -1,   287,    -1,   289,   290,   291,   292,   293,   294,
      -1,   296,   297,    -1,    -1,   300,   301,   302,    -1,    -1,
     305,   306,   307,    -1,   309,    -1,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
      -1,    -1,    -1,    -1,   329,   330,   331,    -1,   333,   334,
     335,   336,   337,   338,    -1,   340,   341,   342,   343,   344,
     345,   346,   347,    -1,   349,   350,   351,   352,   353,   354,
     355,   356,    -1,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,    -1,   373,   374,
      -1,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,    -1,    -1,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
      -1,    -1,   407,   408,   409,   410,    -1,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,    -1,    -1,   430,   431,    -1,   433,    -1,
     435,   436,   437,   438,   439,    -1,   441,   442,   443,    -1,
     445,    -1,   447,   448,   449,   450,   451,    -1,   453,   454,
     455,   456,   457,   458,   459,   460,    -1,    -1,   463,   464,
     465,    -1,   467,   468,   469,   470,    -1,   472,   473,   474,
     475,   476,   477,   478,    -1,   480,    -1,   482,   483,   484,
     485,   486,   487,   488,   489,   490,    -1,    -1,   493,    -1,
      -1,   496,   497,   498,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    30,
      -1,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,    40,
      -1,    -1,    -1,    -1,    45,    46,    -1,    48,    49,    50,
      -1,    52,    53,    54,    55,    56,    -1,    58,    59,    -1,
      61,    62,    63,    64,    65,    66,    -1,    -1,    69,    70,
      71,    72,    73,    74,    75,    -1,    77,    78,    79,    80,
      81,    -1,    -1,    -1,    85,    86,    87,    88,    89,    90,
      -1,    92,    93,    94,    -1,    96,    97,    98,    99,   100,
     101,    -1,    -1,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,    -1,   120,
      -1,   122,   123,   124,   125,   126,   127,    -1,    -1,   130,
     131,   132,   133,   134,    -1,    -1,   137,   138,   139,   140,
     141,   142,   143,    -1,   145,   146,   147,    -1,   149,   150,
     151,    -1,   153,   154,   155,   156,   157,   158,   159,   160,
     161,   162,   163,    -1,   165,    -1,   167,   168,   169,   170,
      -1,   172,    -1,   174,    -1,    -1,    -1,   178,   179,   180,
      -1,   182,    -1,   184,   185,    -1,    -1,   188,   189,   190,
     191,    -1,   193,   194,   195,   196,   197,   198,   199,    -1,
     201,   202,   203,   204,    -1,   206,   207,   208,   209,   210,
     211,   212,    -1,   214,    -1,   216,   217,   218,   219,   220,
     221,   222,   223,    -1,   225,    -1,   227,    -1,    -1,   230,
      -1,   232,   233,   234,   235,   236,   237,   238,    -1,    -1,
     241,    -1,   243,    -1,    -1,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,    -1,   277,   278,   279,   280,
     281,   282,    -1,   284,   285,    -1,   287,    -1,   289,   290,
     291,   292,   293,   294,    -1,   296,   297,    -1,    -1,   300,
     301,   302,    -1,    -1,   305,   306,   307,    -1,   309,    -1,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,   322,   323,   324,    -1,    -1,    -1,    -1,   329,   330,
     331,    -1,   333,   334,   335,   336,   337,   338,    -1,   340,
     341,   342,   343,   344,   345,   346,   347,    -1,   349,   350,
     351,   352,   353,   354,   355,   356,    -1,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,    -1,   373,   374,    -1,   376,   377,   378,   379,   380,
     381,   382,   383,   384,   385,   386,   387,   388,   389,   390,
     391,   392,    -1,    -1,   395,   396,   397,   398,   399,   400,
     401,   402,   403,   404,    -1,    -1,   407,   408,   409,   410,
      -1,   412,   413,   414,   415,   416,   417,   418,   419,   420,
     421,   422,   423,   424,   425,   426,   427,    -1,    -1,   430,
     431,    -1,   433,    -1,   435,   436,   437,   438,   439,    -1,
     441,   442,   443,    -1,   445,    -1,   447,   448,   449,   450,
     451,    -1,   453,   454,   455,   456,   457,   458,   459,   460,
      -1,    -1,   463,   464,   465,    -1,   467,   468,   469,   470,
      -1,   472,   473,   474,   475,   476,   477,   478,    -1,   480,
      -1,   482,   483,   484,   485,   486,   487,   488,   489,   490,
      -1,    -1,   493,    -1,    -1,   496,   497,   498,   499,   500,
     501,   502,   503,   504,   505,   506,   507,   508,   509,   510,
     511,   512,   513,   514,   515,   516,     3,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    -1,    32,    33,    34,    -1,    -1,
      -1,    -1,    -1,    40,    -1,    42,    -1,    -1,    45,    46,
      -1,    48,    49,    50,    -1,    52,    53,    54,    55,    56,
      -1,    58,    59,    -1,    61,    62,    63,    64,    65,    66,
      -1,    -1,    69,    70,    71,    72,    73,    74,    75,    -1,
      77,    78,    79,    80,    81,    -1,    -1,    -1,    85,    86,
      87,    88,    89,    90,    -1,    92,    93,    94,    -1,    96,
      97,    98,    99,   100,   101,    -1,    -1,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,   118,    -1,   120,    -1,   122,   123,   124,   125,   126,
     127,    -1,    -1,   130,   131,   132,   133,   134,    -1,    -1,
     137,   138,   139,   140,   141,   142,   143,    -1,   145,   146,
     147,    -1,   149,   150,   151,    -1,   153,   154,   155,   156,
     157,   158,   159,   160,   161,   162,   163,    -1,   165,    -1,
     167,   168,   169,   170,    -1,   172,    -1,   174,    -1,    -1,
      -1,   178,   179,   180,    -1,   182,    -1,   184,   185,    -1,
      -1,   188,   189,   190,   191,    -1,   193,   194,   195,   196,
     197,   198,   199,    -1,   201,   202,   203,   204,    -1,   206,
     207,   208,   209,   210,   211,   212,    -1,   214,    -1,   216,
     217,   218,   219,   220,   221,   222,   223,    -1,   225,    -1,
     227,    -1,    -1,   230,    -1,   232,   233,   234,   235,   236,
     237,   238,    -1,    -1,   241,    -1,   243,    -1,    -1,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,    -1,
     277,   278,   279,   280,   281,   282,    -1,   284,   285,    -1,
     287,    -1,   289,   290,   291,   292,   293,   294,    -1,   296,
     297,    -1,    -1,   300,   301,   302,    -1,    -1,   305,   306,
     307,    -1,   309,    -1,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,   323,   324,    -1,    -1,
      -1,    -1,   329,   330,   331,    -1,   333,   334,   335,   336,
     337,   338,    -1,   340,   341,   342,   343,   344,   345,   346,
     347,    -1,   349,   350,   351,   352,   353,   354,   355,   356,
      -1,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,   370,   371,    -1,   373,   374,    -1,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,   386,
     387,   388,   389,   390,   391,   392,    -1,    -1,   395,   396,
     397,   398,   399,    -1,   401,   402,   403,   404,    -1,    -1,
     407,   408,   409,   410,    -1,   412,   413,   414,   415,   416,
     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
     427,    -1,    -1,   430,   431,    -1,   433,    -1,   435,   436,
     437,   438,   439,    -1,   441,   442,   443,    -1,   445,    -1,
     447,   448,   449,   450,   451,    -1,   453,   454,   455,   456,
     457,   458,   459,   460,    -1,    -1,   463,   464,   465,    -1,
     467,   468,   469,   470,    -1,   472,   473,   474,   475,   476,
     477,   478,    -1,   480,    -1,   482,   483,   484,   485,   486,
     487,   488,   489,   490,    -1,    -1,   493,    -1,    -1,   496,
     497,   498,   499,   500,   501,   502,   503,   504,   505,   506,
     507,   508,   509,   510,   511,   512,   513,   514,   515,   516,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,
      23,    24,    25,    26,    27,    28,    29,    30,    -1,    32,
      33,    34,    -1,    -1,    -1,    -1,    -1,    40,    -1,    -1,
      -1,    -1,    45,    46,    -1,    48,    49,    50,    -1,    52,
      53,    54,    55,    56,    -1,    58,    59,    -1,    61,    62,
      63,    64,    65,    66,    -1,    -1,    69,    70,    71,    72,
      73,    74,    75,    -1,    77,    78,    79,    80,    81,    -1,
      -1,    -1,    85,    86,    87,    88,    89,    90,    -1,    92,
      93,    94,    -1,    96,    97,    98,    99,   100,   101,    -1,
      -1,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,   117,   118,    -1,   120,    -1,   122,
     123,   124,   125,   126,   127,    -1,    -1,   130,   131,   132,
     133,   134,    -1,    -1,   137,   138,   139,   140,   141,   142,
     143,    -1,   145,   146,   147,    -1,   149,   150,   151,    -1,
     153,   154,   155,   156,   157,   158,   159,   160,   161,   162,
     163,    -1,   165,    -1,   167,   168,   169,   170,    -1,   172,
      -1,   174,    -1,    -1,    -1,   178,   179,   180,    -1,   182,
      -1,   184,   185,    -1,    -1,   188,   189,   190,   191,    -1,
     193,   194,   195,   196,   197,   198,   199,    -1,   201,   202,
     203,   204,    -1,   206,   207,   208,   209,   210,   211,   212,
      -1,   214,    -1,   216,   217,   218,   219,   220,   221,   222,
     223,    -1,   225,    -1,   227,    -1,    -1,   230,    -1,   232,
     233,   234,   235,   236,   237,   238,    -1,    -1,   241,    -1,
     243,    -1,    -1,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,    -1,   277,   278,   279,   280,   281,   282,
      -1,   284,   285,    -1,   287,    -1,   289,   290,   291,   292,
     293,   294,    -1,   296,   297,    -1,    -1,   300,   301,   302,
      -1,    -1,   305,   306,   307,    -1,   309,    -1,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
     323,   324,    -1,    -1,    -1,    -1,   329,   330,   331,    -1,
     333,   334,   335,   336,   337,   338,    -1,   340,   341,   342,
     343,   344,   345,   346,   347,    -1,   349,   350,   351,   352,
     353,   354,   355,   356,    -1,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,   371,    -1,
     373,   374,    -1,   376,   377,   378,   379,   380,   381,   382,
     383,   384,   385,   386,   387,   388,   389,   390,   391,   392,
      -1,    -1,   395,   396,   397,   398,   399,   400,   401,   402,
     403,   404,    -1,    -1,   407,   408,   409,   410,    -1,   412,
     413,   414,   415,   416,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,   427,    -1,    -1,   430,   431,    -1,
     433,    -1,   435,   436,   437,   438,   439,    -1,   441,   442,
     443,    -1,   445,    -1,   447,   448,   449,   450,   451,    -1,
     453,   454,   455,   456,   457,   458,   459,   460,    -1,    -1,
     463,   464,   465,    -1,   467,   468,   469,   470,    -1,   472,
     473,   474,   475,   476,   477,   478,    -1,   480,    -1,   482,
     483,   484,   485,   486,   487,   488,   489,   490,    -1,    -1,
     493,    -1,    -1,   496,   497,   498,   499,   500,   501,   502,
     503,   504,   505,   506,   507,   508,   509,   510,   511,   512,
     513,   514,   515,   516,     3,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    22,    23,    24,    25,    26,    27,    28,
      29,    30,    -1,    32,    33,    34,    -1,    -1,    -1,    -1,
      -1,    40,    -1,    -1,    -1,    -1,    45,    46,    -1,    48,
      49,    50,    -1,    52,    53,    54,    55,    56,    -1,    58,
      59,    -1,    61,    62,    63,    64,    65,    66,    -1,    -1,
      69,    70,    71,    72,    73,    74,    75,    -1,    77,    78,
      79,    80,    81,    -1,    -1,    -1,    85,    86,    87,    88,
      89,    90,    -1,    92,    93,    94,    -1,    96,    97,    98,
      99,   100,   101,    -1,    -1,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
      -1,   120,    -1,   122,   123,   124,   125,   126,   127,    -1,
      -1,   130,   131,   132,   133,   134,    -1,    -1,   137,   138,
     139,   140,   141,   142,   143,    -1,   145,   146,   147,    -1,
     149,   150,   151,    -1,   153,   154,   155,   156,   157,   158,
     159,   160,   161,   162,   163,    -1,   165,    -1,   167,   168,
     169,   170,    -1,   172,    -1,   174,    -1,    -1,    -1,   178,
     179,   180,    -1,   182,    -1,   184,   185,    -1,    -1,   188,
     189,   190,   191,    -1,   193,   194,   195,   196,   197,   198,
     199,    -1,   201,   202,   203,   204,    -1,   206,   207,   208,
     209,   210,   211,   212,    -1,   214,    -1,   216,   217,   218,
     219,   220,   221,   222,   223,    -1,   225,    -1,   227,    -1,
      -1,   230,    -1,   232,   233,   234,   235,   236,   237,   238,
      -1,    -1,   241,    -1,   243,    -1,    -1,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,    -1,   277,   278,
     279,   280,   281,   282,    -1,   284,   285,    -1,   287,    -1,
     289,   290,   291,   292,   293,   294,    -1,   296,   297,    -1,
      -1,   300,   301,   302,    -1,    -1,   305,   306,   307,    -1,
     309,    -1,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,    -1,    -1,    -1,    -1,
     329,   330,   331,    -1,   333,   334,   335,   336,   337,   338,
      -1,   340,   341,   342,   343,   344,   345,   346,   347,    -1,
     349,   350,   351,   352,   353,   354,   355,   356,    -1,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,   371,    -1,   373,   374,    -1,   376,   377,   378,
     379,   380,   381,   382,   383,   384,   385,   386,   387,   388,
     389,   390,   391,   392,    -1,    -1,   395,   396,   397,   398,
     399,   400,   401,   402,   403,   404,    -1,    -1,   407,   408,
     409,   410,    -1,   412,   413,   414,   415,   416,   417,   418,
     419,   420,   421,   422,   423,   424,   425,   426,   427,    -1,
      -1,   430,   431,    -1,   433,    -1,   435,   436,   437,   438,
     439,    -1,   441,   442,   443,    -1,   445,    -1,   447,   448,
     449,   450,   451,    -1,   453,   454,   455,   456,   457,   458,
     459,   460,    -1,    -1,   463,   464,   465,    -1,   467,   468,
     469,   470,    -1,   472,   473,   474,   475,   476,   477,   478,
      -1,   480,    -1,   482,   483,   484,   485,   486,   487,   488,
     489,   490,    -1,    -1,   493,    -1,    -1,   496,   497,   498,
     499,   500,   501,   502,   503,   504,   505,   506,   507,   508,
     509,   510,   511,   512,   513,   514,   515,   516,     3,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    -1,    32,    33,    34,
      -1,    -1,    -1,    -1,    -1,    40,    -1,    -1,    -1,    -1,
      45,    46,    -1,    48,    49,    50,    -1,    52,    53,    54,
      55,    56,    -1,    58,    59,    -1,    61,    62,    63,    64,
      65,    66,    -1,    -1,    69,    70,    71,    72,    73,    74,
      75,    -1,    77,    78,    79,    80,    81,    -1,    -1,    -1,
      85,    86,    87,    88,    89,    90,    -1,    92,    93,    94,
      -1,    96,    97,    98,    99,   100,   101,    -1,    -1,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,    -1,   120,    -1,   122,   123,   124,
     125,   126,   127,    -1,    -1,   130,   131,   132,   133,   134,
      -1,    -1,   137,   138,   139,   140,   141,   142,   143,    -1,
     145,   146,   147,    -1,   149,   150,   151,    -1,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,   163,    -1,
     165,    -1,   167,   168,   169,   170,    -1,   172,    -1,   174,
      -1,    -1,    -1,   178,   179,   180,    -1,   182,    -1,   184,
     185,    -1,    -1,   188,   189,   190,   191,    -1,   193,   194,
     195,   196,   197,   198,   199,    -1,   201,   202,   203,   204,
      -1,   206,   207,   208,   209,   210,   211,   212,    -1,   214,
      -1,   216,   217,   218,   219,   220,   221,   222,   223,    -1,
     225,    -1,   227,    -1,    -1,   230,    -1,   232,   233,   234,
     235,   236,   237,   238,    -1,    -1,   241,    -1,   243,    -1,
      -1,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,    -1,   277,   278,   279,   280,   281,   282,    -1,   284,
     285,    -1,   287,    -1,   289,   290,   291,   292,   293,   294,
      -1,   296,   297,    -1,    -1,   300,   301,   302,    -1,    -1,
     305,   306,   307,    -1,   309,    -1,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
      -1,    -1,    -1,    -1,   329,   330,   331,    -1,   333,   334,
     335,   336,   337,   338,    -1,   340,   341,   342,   343,   344,
     345,   346,   347,    -1,   349,   350,   351,   352,   353,   354,
     355,   356,    -1,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,    -1,   373,   374,
      -1,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,    -1,    -1,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
      -1,    -1,   407,   408,   409,   410,    -1,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,    -1,    -1,   430,   431,    -1,   433,    -1,
     435,   436,   437,   438,   439,    -1,   441,   442,   443,    -1,
     445,    -1,   447,   448,   449,   450,   451,    -1,   453,   454,
     455,   456,   457,   458,   459,   460,    -1,    -1,   463,   464,
     465,    -1,   467,   468,   469,   470,    -1,   472,   473,   474,
     475,   476,   477,   478,    -1,   480,    -1,   482,   483,   484,
     485,   486,   487,   488,   489,   490,    -1,    -1,   493,    -1,
      -1,   496,   497,   498,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    30,
      -1,    32,    33,    34,    -1,    -1,    -1,    38,    -1,    40,
      -1,    -1,    -1,    44,    45,    46,    -1,    48,    49,    50,
      51,    52,    53,    54,    -1,    56,    57,    58,    59,    -1,
      61,    62,    63,    64,    65,    66,    -1,    -1,    69,    70,
      71,    72,    73,    74,    75,    -1,    77,    78,    79,    80,
      -1,    -1,    83,    -1,    85,    86,    87,    88,    89,    90,
      91,    92,    93,    94,    -1,    96,    97,    98,    99,   100,
     101,    -1,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,    -1,   120,
      -1,   122,   123,   124,   125,   126,   127,    -1,    -1,   130,
     131,   132,   133,   134,    -1,    -1,   137,   138,   139,   140,
     141,   142,   143,    -1,   145,   146,   147,    -1,   149,   150,
     151,    -1,   153,   154,   155,   156,    -1,   158,   159,   160,
     161,   162,    -1,    -1,   165,    -1,   167,   168,   169,   170,
      -1,   172,    -1,   174,   175,    -1,   177,   178,   179,    -1,
     181,   182,    -1,   184,   185,    -1,    -1,    -1,    -1,   190,
     191,    -1,   193,   194,   195,   196,   197,   198,   199,   200,
     201,   202,   203,   204,    -1,   206,   207,   208,   209,   210,
     211,   212,    -1,   214,   215,    -1,   217,   218,   219,   220,
     221,   222,   223,    -1,   225,    -1,   227,   228,   229,   230,
     231,   232,   233,   234,   235,   236,   237,   238,    -1,    -1,
     241,   242,   243,   244,    -1,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     281,    -1,    -1,   284,   285,   286,   287,    -1,    -1,   290,
     291,   292,   293,   294,    -1,   296,   297,    -1,    -1,   300,
     301,   302,    -1,    -1,   305,   306,    -1,   308,   309,   310,
      -1,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,   322,   323,   324,    -1,    -1,    -1,    -1,   329,   330,
      -1,   332,   333,   334,    -1,   336,   337,   338,    -1,   340,
     341,   342,   343,   344,   345,   346,   347,    -1,   349,   350,
     351,   352,   353,   354,   355,   356,    -1,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,    -1,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,   385,   386,   387,   388,   389,   390,
     391,   392,    -1,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,   404,    -1,   406,   407,   408,   409,   410,
      -1,   412,   413,   414,   415,   416,   417,   418,   419,   420,
     421,   422,   423,   424,   425,   426,    -1,    -1,    -1,   430,
     431,    -1,   433,   434,   435,   436,   437,   438,   439,    -1,
     441,   442,   443,    -1,   445,    -1,   447,   448,    -1,   450,
      -1,    -1,   453,   454,   455,   456,   457,   458,   459,   460,
     461,    -1,   463,   464,   465,    -1,   467,   468,   469,   470,
      -1,   472,   473,   474,   475,   476,    -1,   478,    -1,   480,
     481,   482,   483,   484,   485,   486,   487,   488,   489,   490,
      -1,    -1,   493,    -1,    -1,   496,   497,   498,   499,   500,
     501,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   513,   514,   515,   516,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    -1,
      32,    33,    34,    -1,    -1,    -1,    38,    -1,    40,    -1,
      -1,    -1,    44,    45,    46,    -1,    48,    49,    50,    51,
      52,    53,    54,    -1,    56,    57,    58,    59,    -1,    61,
      62,    63,    64,    65,    66,    -1,    -1,    69,    70,    71,
      72,    73,    74,    75,    -1,    77,    78,    79,    80,    -1,
      -1,    83,    -1,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    -1,    96,    97,    98,    99,   100,   101,
      -1,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,    -1,   120,    -1,
     122,   123,   124,   125,   126,   127,    -1,    -1,   130,   131,
     132,   133,   134,    -1,    -1,   137,   138,   139,   140,   141,
     142,   143,    -1,   145,   146,   147,    -1,   149,   150,   151,
      -1,   153,   154,   155,   156,    -1,   158,   159,   160,   161,
     162,    -1,    -1,   165,    -1,   167,   168,   169,   170,    -1,
     172,    -1,   174,   175,    -1,   177,   178,   179,    -1,   181,
     182,    -1,   184,   185,    -1,    -1,    -1,    -1,   190,   191,
      -1,   193,   194,   195,   196,   197,   198,   199,   200,   201,
     202,   203,   204,    -1,   206,   207,   208,   209,   210,   211,
     212,    -1,   214,   215,    -1,   217,   218,   219,   220,   221,
     222,   223,    -1,   225,    -1,   227,   228,   229,   230,   231,
     232,   233,   234,   235,   236,   237,   238,    -1,    -1,   241,
     242,   243,   244,    -1,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
      -1,    -1,   284,   285,   286,   287,    -1,    -1,   290,   291,
     292,   293,   294,    -1,   296,   297,    -1,    -1,   300,   301,
     302,    -1,    -1,   305,   306,    -1,   308,   309,   310,    -1,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,   323,   324,    -1,    -1,    -1,    -1,   329,   330,    -1,
     332,   333,   334,    -1,   336,   337,   338,    -1,   340,   341,
     342,   343,   344,   345,   346,   347,    -1,   349,   350,   351,
     352,   353,   354,   355,   356,    -1,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
      -1,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,   386,   387,   388,   389,   390,   391,
     392,    -1,   394,   395,   396,   397,   398,   399,   400,   401,
     402,   403,   404,    -1,   406,   407,   408,   409,   410,    -1,
     412,   413,   414,   415,   416,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,    -1,    -1,    -1,   430,   431,
      -1,   433,   434,   435,   436,   437,   438,   439,    -1,   441,
     442,   443,    -1,   445,    -1,   447,   448,    -1,   450,    -1,
      -1,   453,   454,   455,   456,   457,   458,   459,   460,   461,
      -1,   463,   464,   465,    -1,   467,   468,   469,   470,    -1,
     472,   473,   474,   475,   476,    -1,   478,    -1,   480,   481,
     482,   483,   484,   485,   486,   487,   488,   489,   490,    -1,
      -1,   493,    -1,    -1,   496,   497,   498,   499,   500,   501,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   513,   514,   515,   516,    -1,    -1,    -1,    -1,    22,
      23,    24,    25,    26,    27,    28,    29,    30,    -1,    32,
      33,    34,    -1,    -1,    -1,    38,    -1,    40,    -1,    -1,
      -1,    44,    45,    46,    -1,    48,    49,    50,    51,    52,
      53,    54,    -1,    56,    57,    58,    59,    -1,    61,    62,
      63,    64,    65,    66,    -1,    -1,    69,    70,    71,    72,
      73,    74,    75,    -1,    77,    78,    79,    80,    -1,    -1,
      83,    -1,    85,    86,    87,    88,    89,    90,    91,    92,
      93,    94,    -1,    96,    97,    98,    99,   100,   101,    -1,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,   117,   118,    -1,   120,    -1,   122,
     123,   124,   125,   126,   127,    -1,    -1,   130,   131,   132,
     133,   134,    -1,    -1,   137,   138,   139,   140,   141,   142,
     143,    -1,   145,   146,   147,    -1,   149,   150,   151,    -1,
     153,   154,   155,   156,    -1,   158,   159,   160,   161,   162,
      -1,    -1,   165,    -1,   167,   168,   169,   170,    -1,   172,
      -1,   174,   175,    -1,   177,   178,   179,   180,   181,   182,
      -1,   184,   185,    -1,    -1,    -1,    -1,   190,   191,    -1,
     193,   194,   195,   196,   197,   198,   199,   200,   201,   202,
     203,   204,    -1,   206,   207,   208,   209,   210,   211,   212,
      -1,   214,   215,    -1,   217,   218,   219,   220,   221,   222,
     223,    -1,   225,    -1,   227,   228,   229,   230,   231,   232,
     233,   234,   235,   236,   237,   238,    -1,    -1,   241,   242,
     243,   244,    -1,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,   280,   281,    -1,
      -1,   284,   285,   286,   287,    -1,    -1,   290,   291,   292,
     293,   294,    -1,   296,   297,    -1,    -1,   300,   301,   302,
      -1,    -1,   305,   306,    -1,   308,   309,   310,    -1,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
     323,   324,    -1,    -1,    -1,    -1,   329,   330,    -1,   332,
     333,   334,    -1,   336,   337,   338,    -1,   340,   341,   342,
     343,   344,   345,   346,   347,    -1,   349,   350,   351,   352,
     353,   354,   355,   356,    -1,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,   371,    -1,
     373,   374,   375,   376,   377,   378,    -1,   380,   381,   382,
     383,   384,   385,   386,   387,   388,   389,   390,   391,   392,
      -1,   394,   395,   396,   397,   398,   399,   400,    -1,   402,
     403,   404,    -1,   406,   407,   408,   409,   410,    -1,   412,
     413,   414,   415,   416,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,    -1,    -1,    -1,   430,   431,    -1,
     433,   434,   435,   436,   437,   438,   439,    -1,   441,   442,
     443,    -1,   445,    -1,   447,   448,    -1,   450,    -1,    -1,
     453,   454,   455,   456,   457,   458,   459,   460,    -1,    -1,
     463,   464,   465,    -1,   467,   468,   469,   470,    -1,   472,
     473,   474,   475,   476,    -1,   478,    -1,   480,   481,   482,
     483,   484,   485,   486,   487,   488,   489,   490,    -1,    -1,
     493,    -1,    -1,   496,   497,   498,   499,   500,   501,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     513,   514,   515,   516,    -1,    -1,    -1,    -1,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    -1,    32,    33,
      34,    -1,    -1,    -1,    -1,    -1,    40,    -1,    -1,    -1,
      -1,    45,    46,    -1,    48,    49,    50,    -1,    52,    53,
      54,    55,    56,    -1,    58,    59,    -1,    61,    62,    63,
      64,    65,    66,    -1,    -1,    69,    70,    71,    72,    73,
      74,    75,    -1,    77,    78,    79,    80,    81,    -1,    -1,
      -1,    85,    86,    87,    88,    89,    90,    -1,    92,    93,
      94,    -1,    96,    97,    98,    99,   100,   101,    -1,    -1,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,    -1,   120,    -1,   122,   123,
     124,   125,   126,   127,    -1,    -1,   130,   131,   132,   133,
     134,    -1,    -1,   137,   138,   139,   140,   141,   142,   143,
      -1,   145,   146,   147,    -1,   149,   150,   151,    -1,   153,
     154,   155,   156,   157,   158,   159,   160,   161,   162,   163,
      -1,   165,    -1,   167,   168,   169,   170,    -1,   172,    -1,
     174,    -1,    -1,    -1,   178,   179,   180,    -1,   182,    -1,
     184,   185,    -1,    -1,   188,   189,    -1,   191,    -1,   193,
     194,   195,   196,   197,   198,   199,    -1,   201,   202,   203,
     204,    -1,   206,   207,   208,   209,   210,   211,   212,    -1,
     214,    -1,   216,   217,   218,   219,   220,   221,   222,   223,
      -1,   225,    -1,   227,    -1,    -1,   230,    -1,   232,   233,
     234,   235,   236,   237,   238,    -1,    -1,   241,    -1,   243,
      -1,    -1,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,    -1,   277,   278,   279,   280,   281,   282,    -1,
     284,   285,    -1,   287,    -1,   289,   290,   291,   292,   293,
     294,    -1,   296,   297,    -1,    -1,   300,   301,   302,    -1,
      -1,   305,   306,   307,    -1,   309,    -1,   311,   312,   313,
     314,   315,   316,   317,    -1,   319,   320,   321,   322,   323,
     324,    -1,    -1,    -1,    -1,   329,   330,   331,    -1,   333,
     334,   335,   336,   337,   338,    -1,   340,   341,   342,   343,
     344,   345,   346,   347,    -1,   349,    -1,   351,   352,   353,
     354,   355,   356,    -1,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,   371,    -1,   373,
     374,    -1,   376,   377,   378,   379,    -1,   381,   382,   383,
     384,   385,   386,   387,   388,   389,   390,   391,   392,    -1,
      -1,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,    -1,    -1,   407,   408,   409,   410,    -1,   412,   413,
     414,   415,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,    -1,    -1,   430,   431,    -1,   433,
      -1,   435,   436,   437,   438,   439,    -1,   441,   442,   443,
      -1,   445,    -1,   447,   448,   449,   450,   451,    -1,   453,
     454,   455,   456,   457,   458,   459,   460,    -1,    -1,   463,
     464,   465,    -1,   467,   468,   469,   470,    -1,   472,   473,
     474,   475,   476,   477,   478,    -1,   480,    -1,   482,   483,
     484,   485,   486,   487,   488,   489,   490,    -1,    -1,   493,
      -1,    -1,   496,   497,   498,   499,   500,   501,   502,   503,
     504,   505,   506,   507,   508,   509,   510,   511,   512,   513,
     514,   515,   516,     3,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    -1,    32,    33,    34,    -1,    -1,    -1,    38,    -1,
      40,    -1,    -1,    -1,    44,    45,    46,    -1,    48,    49,
      50,    51,    52,    53,    54,    -1,    56,    57,    58,    59,
      -1,    61,    62,    63,    64,    65,    66,    -1,    -1,    69,
      70,    71,    72,    73,    74,    75,    -1,    77,    78,    79,
      80,    -1,    -1,    83,    -1,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    -1,    96,    97,    98,    99,
     100,   101,    -1,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,    -1,
     120,    -1,   122,   123,   124,   125,   126,   127,    -1,    -1,
     130,   131,   132,   133,   134,    -1,    -1,   137,   138,   139,
     140,   141,   142,   143,    -1,   145,   146,   147,    -1,   149,
     150,   151,    -1,   153,   154,   155,   156,    -1,   158,   159,
     160,   161,   162,    -1,    -1,   165,    -1,   167,   168,   169,
     170,    -1,   172,    -1,   174,   175,    -1,   177,   178,   179,
      -1,   181,   182,    -1,   184,   185,    -1,    -1,    -1,    -1,
     190,   191,    -1,   193,   194,   195,   196,   197,   198,   199,
     200,   201,   202,   203,   204,    -1,   206,   207,   208,   209,
     210,   211,   212,    -1,   214,   215,    -1,   217,   218,   219,
     220,   221,   222,   223,    -1,   225,    -1,   227,   228,   229,
     230,   231,   232,   233,   234,   235,   236,   237,   238,    -1,
      -1,   241,   242,   243,   244,    -1,   246,   247,   248,   249,
     250,   251,   252,   253,    -1,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
     280,   281,    -1,    -1,   284,   285,   286,   287,    -1,    -1,
     290,   291,   292,   293,   294,    -1,   296,   297,    -1,    -1,
     300,   301,   302,    -1,    -1,   305,   306,    -1,   308,   309,
     310,    -1,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,   323,   324,    -1,    -1,    -1,    -1,   329,
     330,    -1,   332,   333,   334,    -1,   336,   337,   338,    -1,
     340,   341,   342,   343,   344,   345,   346,   347,    -1,   349,
     350,   351,   352,   353,   354,   355,   356,    -1,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
     370,   371,    -1,   373,   374,   375,   376,   377,   378,    -1,
     380,   381,   382,   383,   384,   385,   386,   387,   388,   389,
     390,   391,   392,    -1,   394,   395,   396,   397,   398,   399,
     400,    -1,   402,   403,   404,    -1,   406,   407,   408,   409,
     410,    -1,   412,   413,   414,   415,   416,   417,   418,   419,
     420,   421,   422,   423,   424,    -1,   426,    -1,    -1,    -1,
     430,   431,    -1,   433,   434,   435,   436,   437,   438,   439,
      -1,   441,   442,   443,    -1,   445,    -1,   447,   448,    -1,
     450,    -1,    -1,   453,   454,   455,   456,   457,   458,   459,
     460,    -1,    -1,   463,   464,   465,    -1,   467,   468,   469,
     470,    -1,   472,   473,   474,   475,   476,    -1,   478,    -1,
     480,   481,   482,   483,   484,   485,   486,   487,   488,   489,
     490,    -1,    -1,   493,    -1,    -1,   496,   497,   498,   499,
     500,   501,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   513,   514,   515,   516,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    -1,    27,    28,    29,    30,
      -1,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    45,    46,    -1,    48,    49,    50,
      -1,    52,    53,    54,    55,    56,    -1,    58,    59,    -1,
      61,    62,    63,    64,    65,    66,    -1,    -1,    69,    70,
      71,    72,    73,    74,    75,    -1,    77,    78,    79,    80,
      81,    -1,    -1,    -1,    -1,    86,    87,    88,    89,    90,
      -1,    92,    93,    94,    -1,    96,    97,    98,    99,   100,
      -1,    -1,    -1,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,    -1,   120,
      -1,   122,   123,   124,   125,   126,   127,    -1,    -1,    -1,
     131,   132,   133,   134,    -1,    -1,   137,   138,   139,   140,
     141,    -1,    -1,    -1,   145,   146,   147,    -1,   149,   150,
     151,    -1,   153,   154,   155,   156,   157,   158,   159,   160,
     161,   162,   163,    -1,   165,    -1,   167,   168,   169,   170,
      -1,   172,    -1,   174,    -1,    -1,    -1,   178,   179,   180,
      -1,   182,    -1,   184,    -1,    -1,    -1,   188,   189,    -1,
     191,    -1,   193,   194,   195,   196,   197,   198,   199,    -1,
     201,   202,   203,   204,    -1,   206,   207,   208,   209,   210,
     211,   212,    -1,   214,    -1,   216,   217,   218,   219,   220,
     221,   222,   223,    -1,   225,    -1,   227,    -1,    -1,   230,
      -1,   232,    -1,   234,   235,   236,   237,   238,    -1,    -1,
     241,    -1,   243,    -1,    -1,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,    -1,   277,   278,   279,   280,
      -1,   282,    -1,   284,   285,    -1,   287,    -1,   289,   290,
     291,   292,   293,   294,    -1,   296,   297,    -1,    -1,   300,
     301,   302,    -1,    -1,   305,   306,   307,    -1,   309,    -1,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
      -1,    -1,   323,   324,    -1,    -1,    -1,    -1,   329,   330,
     331,    -1,   333,   334,   335,   336,   337,   338,    -1,   340,
     341,   342,   343,   344,    -1,    -1,   347,    -1,   349,   350,
     351,   352,   353,   354,   355,   356,    -1,   358,   359,   360,
      -1,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,    -1,   373,   374,    -1,   376,   377,   378,   379,   380,
     381,   382,   383,   384,   385,   386,   387,   388,   389,   390,
     391,   392,    -1,    -1,   395,   396,   397,   398,   399,   400,
     401,   402,   403,    -1,    -1,    -1,    -1,   408,   409,   410,
      -1,    -1,   413,   414,   415,   416,   417,   418,   419,   420,
     421,   422,   423,   424,   425,   426,   427,    -1,    -1,   430,
     431,    -1,   433,    -1,   435,   436,   437,   438,   439,    -1,
     441,   442,   443,    -1,    -1,    -1,   447,   448,   449,   450,
     451,    -1,   453,   454,   455,   456,   457,   458,   459,   460,
      -1,    -1,   463,   464,   465,    -1,   467,   468,   469,   470,
      -1,   472,   473,   474,   475,   476,   477,   478,    -1,   480,
      -1,   482,    -1,   484,   485,   486,   487,    -1,   489,   490,
      -1,    -1,   493,    -1,    -1,   496,   497,   498,   499,   500,
     501,   502,   503,   504,   505,   506,   507,   508,   509,   510,
     511,   512,   513,   514,   515,   516,    22,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    33,    -1,    35,
      36,    -1,    -1,    22,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    33,    -1,    -1,    -1,    54,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    63,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    54,    -1,    -1,    -1,    -1,
      -1,    77,    -1,    -1,    63,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    88,    -1,    -1,    -1,    -1,    -1,    77,    -1,
      -1,    -1,    -1,    -1,   100,    -1,   102,    -1,    -1,    88,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   113,    -1,    -1,
      -1,   100,    -1,   102,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   128,   129,   113,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   140,    -1,    -1,    -1,    -1,   128,
     129,    -1,   148,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     156,   140,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   148,
      -1,    -1,    -1,    -1,    -1,    -1,   172,   156,    -1,    -1,
     176,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   172,    -1,    -1,    -1,   176,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   220,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   220,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   247,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   247,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   325,
     326,   327,    -1,    -1,    -1,    -1,    -1,   333,    -1,    -1,
     336,    -1,    -1,    -1,    -1,    -1,   325,   326,   327,    -1,
      -1,    -1,    -1,    -1,   333,    -1,    -1,   336,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   368,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   377,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   368,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   393,   377,    -1,
      -1,    -1,    -1,    -1,   400,    -1,    -1,    -1,    -1,   405,
      -1,    -1,    -1,    -1,   393,    -1,    -1,    -1,    -1,    -1,
     416,   400,    -1,    -1,    -1,    -1,   405,    -1,    -1,    -1,
      -1,    -1,   428,    -1,    -1,    -1,   432,   416,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   428,
      -1,    -1,    -1,   432,    -1,    -1,    -1,   453,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     466,    -1,    -1,    -1,   453,    -1,   472,    -1,    -1,    -1,
      -1,   477,    -1,    -1,    -1,   481,    -1,   466,    -1,    -1,
      -1,    -1,    -1,   472,    -1,    -1,    -1,    -1,   477,   495,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   495,    -1,    -1,    -1,
      -1,    -1,    -1,   519,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   533,    -1,    -1,
     519,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   533
};

/* YYSTOS[STATE-NUM] -- The symbol kind of the accessing symbol of
   state STATE-NUM.  */
static const yytype_int16 yystos[] =
{
       0,    22,    33,    35,    36,    49,    54,    63,    77,    86,
      88,   100,   102,   113,   128,   129,   131,   140,   148,   156,
     158,   159,   172,   176,   204,   220,   247,   325,   326,   327,
     333,   336,   368,   377,   393,   400,   405,   416,   428,   432,
     453,   466,   469,   472,   477,   495,   519,   533,   548,   549,
     550,   551,   552,   559,   570,   571,   572,   575,   576,   578,
     589,   607,   655,   667,   670,   673,   677,   679,   682,   683,
     687,   693,   695,   699,   706,   710,   711,   712,   719,   724,
     740,   744,   748,   769,   804,   805,   808,   810,   811,   812,
     813,   815,   817,   818,   822,   875,   876,  1044,  1046,  1047,
    1048,  1053,  1056,  1062,  1063,  1064,  1068,   447,   498,  1045,
     209,   384,   395,   432,   484,   110,   198,   573,  1045,     3,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    32,
      33,    34,    40,    44,    45,    46,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    58,    59,    61,    62,
      63,    64,    65,    66,    69,    70,    71,    72,    73,    74,
      75,    77,    78,    79,    80,    81,    83,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    96,    97,    98,
      99,   100,   101,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,   120,
     122,   123,   124,   125,   126,   127,   130,   131,   132,   133,
     134,   137,   138,   139,   140,   141,   142,   143,   145,   146,
     147,   149,   150,   151,   153,   154,   155,   156,   157,   158,
     159,   160,   161,   162,   163,   165,   167,   168,   169,   170,
     172,   174,   175,   177,   178,   179,   180,   181,   182,   184,
     185,   188,   189,   190,   191,   193,   194,   195,   196,   197,
     198,   199,   200,   201,   202,   203,   204,   206,   207,   208,
     209,   210,   211,   212,   214,   215,   216,   217,   218,   219,
     220,   221,   222,   223,   225,   227,   228,   229,   230,   231,
     232,   233,   234,   235,   236,   237,   238,   241,   242,   243,
     244,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   284,   285,
     286,   287,   289,   290,   291,   292,   293,   294,   296,   297,
     300,   301,   302,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,   323,   324,   329,   330,   331,   332,   333,   334,   335,
     336,   337,   338,   340,   341,   342,   343,   344,   345,   346,
     347,   349,   350,   351,   352,   353,   354,   355,   356,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,   386,   387,   388,   389,
     390,   391,   392,   395,   396,   397,   398,   399,   400,   401,
     402,   403,   404,   406,   407,   408,   409,   410,   412,   413,
     414,   415,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,   430,   431,   433,   434,   435,   436,
     437,   438,   439,   441,   442,   443,   445,   447,   448,   449,
     450,   451,   453,   454,   455,   456,   457,   458,   459,   460,
     463,   464,   465,   467,   468,   469,   470,   472,   473,   474,
     475,   476,   477,   478,   480,   481,   482,   483,   484,   485,
     486,   487,   488,   489,   490,   493,   496,   497,   498,   499,
     500,   501,   502,   503,   504,   505,   506,   507,   508,   509,
     510,   511,   512,   513,   514,   515,   516,   582,   658,   659,
     660,   665,   953,  1033,  1037,     3,   180,   254,   425,   577,
     582,   658,   665,   298,  1045,    57,   176,   533,   602,   182,
     248,   303,   324,   346,   384,   436,   438,   456,   462,   465,
     653,   675,   718,     5,    31,   336,   582,   583,  1032,     3,
      31,    35,    36,    37,    38,    39,    41,    42,    43,    44,
      47,    51,    55,    56,    57,    58,    59,    60,    67,    68,
      73,    74,    76,    81,    82,    83,    84,    85,    91,    95,
     102,   103,   110,   114,   117,   119,   121,   128,   129,   135,
     136,   144,   148,   152,   157,   163,   164,   166,   169,   171,
     173,   175,   176,   177,   180,   181,   183,   186,   187,   188,
     189,   192,   200,   205,   213,   215,   216,   222,   223,   224,
     225,   226,   228,   229,   231,   239,   240,   242,   244,   245,
     254,   275,   276,   277,   282,   283,   286,   288,   289,   291,
     295,   298,   299,   303,   304,   307,   308,   310,   311,   325,
     326,   327,   328,   331,   332,   335,   339,   348,   352,   357,
     372,   375,   379,   393,   394,   401,   405,   406,   409,   411,
     425,   427,   428,   429,   432,   434,   440,   442,   443,   444,
     446,   449,   451,   452,   455,   461,   462,   466,   471,   477,
     478,   479,   481,   491,   492,   494,   495,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   588,   658,
     662,   664,   665,    24,    83,    99,   151,   161,   173,   178,
     209,   253,   257,   330,   346,   347,   381,   384,   395,   398,
     418,   432,   438,   439,   450,   456,   484,   675,   688,   689,
     692,  1045,  1032,   102,   140,   481,   533,   551,   552,   559,
     575,   576,   589,   607,   655,   667,   670,   677,   679,   682,
     683,   687,   695,   702,   706,   712,   719,   740,   804,   805,
     808,   810,  1044,  1046,  1048,  1053,  1056,  1062,  1068,   110,
      77,   220,    68,    81,    83,   163,   186,   239,   289,   299,
     311,   331,   380,   427,   449,   451,   455,   477,   533,   581,
     582,   583,   811,   876,   878,   880,   890,   897,   898,   953,
     955,   956,   110,     5,   582,   584,   741,   741,   582,  1032,
      31,   182,   248,   399,   442,   447,   582,  1054,  1055,  1066,
    1045,    31,   135,   831,   832,   182,   248,   384,   399,   442,
    1057,  1058,  1066,  1045,   533,   582,   810,   822,  1067,   582,
     897,   432,   828,   581,   177,   533,  1050,   533,   355,   823,
     824,  1032,   823,     3,    55,    56,    58,    59,    73,    74,
      81,   114,   117,   157,   163,   169,   180,   188,   189,   216,
     222,   223,   225,   254,   275,   277,   282,   289,   291,   307,
     311,   331,   335,   352,   379,   401,   409,   425,   427,   442,
     443,   449,   451,   455,   477,   478,   502,   503,   504,   505,
     506,   507,   508,   509,   510,   511,   512,   658,   666,   743,
     811,   812,  1062,     0,   536,   481,   700,   124,   219,   468,
     152,   224,   304,   461,   834,   835,   880,   880,   811,   813,
     815,   537,    31,   346,   442,   447,   810,  1067,   198,   581,
    1032,   198,   581,   198,   897,   198,   581,   283,   584,   531,
     535,   585,   586,   533,    84,   110,   178,   209,   253,   384,
     395,   432,   456,   484,   580,   110,   810,   581,   436,   438,
     436,   438,   366,   185,   198,   581,   581,   178,   253,   355,
     395,   432,   484,   668,   391,   209,    31,  1032,   198,   588,
     259,   450,   109,   432,   432,   484,   185,   388,   391,   198,
     582,   690,  1039,   198,  1029,  1032,   198,  1032,   533,   698,
     303,   438,   702,     3,   477,   658,   662,   665,   703,   705,
     706,   708,   709,   700,   582,   584,   577,   741,   533,   533,
     171,   533,   533,   769,   811,   898,   533,   533,   581,   533,
     533,   176,   533,   533,   533,   533,   811,   876,   880,   890,
     526,   585,    42,   582,   891,   892,   891,   393,   537,   814,
      38,    44,   103,   177,   215,   231,   242,   276,   325,   332,
     375,   394,   466,   894,   892,    42,   582,   891,   893,   519,
     902,   584,   176,   522,   533,   533,   806,  1055,  1055,  1055,
     516,   230,   535,   298,     4,     6,     7,     8,     9,    10,
      41,    56,    58,    59,    67,    73,    74,    85,   114,   117,
     119,   139,   157,   164,   169,   188,   189,   222,   223,   225,
     254,   275,   277,   283,   288,   291,   300,   352,   379,   409,
     442,   443,   452,   478,   517,   524,   525,   526,   531,   533,
     539,   540,   545,   546,   582,   584,   811,   865,   914,   917,
     920,   921,   922,   924,   925,   926,   927,   929,   930,   945,
     947,   948,   949,   950,   951,   952,   953,   954,   956,   957,
     972,   973,   984,  1006,  1011,  1019,  1020,  1021,  1033,  1034,
    1035,  1018,  1020,  1057,  1057,   584,  1057,   516,   176,   444,
     522,   535,   585,   684,   897,     3,   175,   177,   481,   706,
    1049,  1051,   175,  1052,   945,   990,   991,   823,   537,   533,
    1041,   256,   534,   534,   534,   550,   581,   176,   303,   727,
     684,    31,   135,   829,   829,    61,   829,   166,   171,   245,
     295,   840,   842,   843,   868,   870,   871,   872,   187,   298,
     471,   298,   834,   835,   533,   433,  1065,   185,   516,   230,
     157,    27,    33,   140,   302,   364,   368,   400,   474,   564,
     567,   568,   364,   157,    42,    62,   108,   208,   258,   268,
     280,   313,   364,   370,   395,   400,   416,   553,   556,   567,
     157,   364,   400,   567,   157,   364,   400,   567,   157,    42,
     574,   945,  1012,   587,   588,   586,     3,    31,    38,    44,
      51,    57,    83,    85,    91,   103,   135,   175,   177,   180,
     181,   200,   215,   228,   229,   231,   242,   244,   254,   276,
     286,   308,   310,   332,   375,   394,   406,   425,   434,   455,
     479,   481,   534,   658,   663,   665,   945,   993,   994,  1036,
    1042,   945,   432,   581,   582,   534,   533,   642,   346,   384,
     653,   675,   581,   283,   671,    42,   484,   198,   581,   198,
     581,   657,   198,   581,   198,   581,   198,   582,   674,    91,
     715,   157,   499,   581,    92,   132,   316,   437,   198,   582,
     157,   535,  1040,    65,   371,   537,   691,   157,   537,   691,
     157,   298,   696,   697,   945,  1042,   366,   534,   537,     4,
     164,   298,   452,   524,   525,   555,   558,   584,   701,   703,
     704,   707,  1035,   702,   444,   533,   597,   601,   176,   945,
     991,   533,     3,    70,    71,   111,   112,   115,   116,   195,
     196,   260,   261,   262,   263,   264,   265,   266,   267,   270,
     271,   389,   390,   489,   490,   513,   514,   584,   932,   933,
     934,   935,   936,   937,   938,   939,   940,   941,   942,   943,
     996,   997,   477,   892,   893,   945,   581,   945,   998,   524,
     525,   582,   946,   947,   973,   984,  1000,   533,   945,   990,
    1001,   945,    60,   176,   240,   446,   945,   991,  1004,   945,
     534,   583,   533,   434,   848,   849,   849,   831,   832,   880,
     226,   826,    38,   231,   394,   894,   231,   308,   895,   880,
     895,   231,   894,   533,   231,   895,   153,   206,   882,   231,
     849,   533,   583,   533,   849,   305,   582,   584,   742,   945,
    1059,  1061,   993,     3,    38,    44,    51,    56,    57,    58,
      59,    73,    74,    83,    85,    91,   103,   114,   117,   169,
     175,   177,   181,   200,   215,   222,   223,   225,   228,   229,
     231,   242,   244,   254,   275,   276,   277,   286,   291,   308,
     310,   332,   352,   375,   379,   394,   401,   406,   409,   425,
     434,   442,   443,   455,   461,   478,   481,   658,   661,   665,
     908,   910,   911,   913,   915,   917,   919,   921,   922,   923,
     925,   926,   929,   930,   995,  1038,    42,   243,   582,   533,
     531,   811,   480,   928,   945,  1010,   928,   928,   533,   533,
     916,   916,   335,   811,   533,   918,   540,    73,    74,   928,
     945,   916,   533,   533,   497,   519,   533,   931,   533,   931,
     945,   945,   945,   153,  1022,  1023,   945,   991,   992,   811,
     945,   990,   583,   974,   975,   976,     9,   588,   535,   585,
    1013,   585,   533,   584,   533,   533,   584,  1035,     3,     8,
      11,    15,    16,    17,    18,    19,    20,    21,    37,    42,
      48,    55,    82,   181,   200,   205,   228,   229,   244,   283,
     286,   300,   303,   406,   517,   520,   521,   522,   524,   525,
     526,   527,   528,   529,   982,   983,   984,   986,  1016,   496,
     958,   310,   945,   537,   826,   533,   584,   826,     3,   119,
     248,   555,   584,   930,  1060,   106,  1061,  1061,   582,    42,
     582,   534,   537,   700,   537,   534,   824,  1029,  1030,    42,
     743,   773,   777,   778,  1041,   684,   199,   366,   226,   400,
     813,   813,    31,   836,   837,   945,    61,   813,   830,   168,
     279,   856,   234,   280,   351,   403,   468,     4,     9,    31,
     851,   945,   524,   525,   852,   853,   945,   947,   868,   869,
     843,   842,   840,   841,   171,   871,   293,   873,    61,   819,
     820,   821,   883,   946,  1020,  1020,   840,   868,   991,   582,
     243,   581,    76,    84,    95,   173,   198,   339,   462,   582,
     624,   634,   649,    84,    95,   809,    95,   809,   533,   444,
     533,   622,   252,   465,   622,    95,   537,   444,   581,     3,
     913,   555,    61,   557,   555,   555,   108,   258,   268,    61,
     444,   495,   519,   554,   273,   384,   554,   556,   897,    95,
     444,   809,   384,   581,   444,   384,   573,   582,   597,   532,
     544,   993,   993,   994,   537,   834,   835,    13,    14,   228,
     228,   444,   444,   582,   641,   646,   495,   600,   185,   581,
     355,   395,   432,   484,   668,   391,   281,   483,   745,   157,
     102,   607,   672,   677,   712,  1068,   149,   910,   581,   283,
     553,   678,   283,   533,   642,    42,   283,   642,   283,   533,
     669,   283,   205,   676,   198,   582,   636,   716,   588,   691,
     157,   176,   694,   690,   587,   535,  1039,  1029,  1032,  1032,
    1039,   534,   537,    13,   702,   708,     4,  1035,     4,  1035,
     584,   588,   599,   606,    57,   104,   125,   146,   150,   172,
     175,   193,   288,   296,   318,   349,   603,   742,    42,   534,
     945,   534,   176,   537,   534,   328,   999,   534,   946,   946,
      11,    15,    16,    19,    20,    21,   205,   228,   300,   520,
     521,   522,   524,   525,   526,   527,   528,   529,   984,   946,
     534,   899,   900,   955,   171,   176,  1002,  1003,   537,   534,
      42,  1004,   991,  1004,  1004,   176,   534,    42,   891,   533,
    1030,     4,     9,   582,   844,   846,   847,  1020,  1018,   182,
     248,   432,   436,   438,   465,   581,   827,   492,   903,   880,
     231,   880,   298,   471,   896,   880,   231,  1020,   880,   290,
     290,   533,   880,   583,   904,   905,   533,   583,   904,   537,
     534,   537,   535,   533,   913,   533,   533,   535,    41,   912,
     533,   932,   933,   934,   935,   936,   937,   938,   939,   940,
     941,   942,   943,   944,   534,   537,   916,   589,   683,   719,
     807,   810,  1046,  1062,   991,   992,   533,   491,  1007,  1008,
     945,   992,  1035,   945,   977,   978,   979,   980,   928,   928,
       8,    15,    16,    19,    20,    21,   520,   521,   522,   524,
     525,   526,   527,   528,   529,   582,   982,   987,   534,   991,
     442,   442,  1035,  1035,   533,   582,   366,  1027,   171,   532,
     534,   537,   544,   537,   541,   526,   586,   991,  1035,   945,
     944,   944,   910,   945,   945,   945,   945,   945,   945,   945,
     945,     5,   588,  1043,   442,    47,   429,  1017,  1039,   945,
     945,   533,   811,  1005,   135,   164,   283,   288,   293,   452,
     463,   945,   288,   533,   945,   444,    55,   181,   200,   205,
     244,   406,   945,   945,   945,   945,   945,   945,   945,   945,
     945,   945,    31,    39,   411,   981,   531,   535,  1015,   187,
     167,   959,   379,   533,   973,  1021,   176,   877,   993,   877,
     533,   584,   582,   581,  1049,   570,   581,   945,   537,   534,
     257,   283,   825,   522,    31,    39,   404,   776,   233,   537,
     770,   471,   686,   581,   721,   533,   582,   726,   736,   737,
     739,    43,   128,   838,   537,   471,   838,   273,   813,   379,
     380,   524,   525,   853,   855,   947,   403,   234,   299,   323,
     323,   537,   528,     4,   854,  1035,   854,   379,   380,   855,
     581,  1028,   287,   408,   874,   533,  1030,  1031,   537,   187,
     471,   205,   187,   226,   869,   841,   534,   364,   567,   533,
     198,   634,  1032,   234,   283,   234,   471,   533,   627,   909,
     910,  1032,   582,   198,  1032,   198,   582,    27,   140,   400,
     563,   566,   588,   618,   632,  1032,   588,   626,   645,  1032,
     564,  1032,   364,   400,   553,   567,   555,  1039,  1032,   555,
    1039,  1032,   555,   364,   400,   567,  1032,  1032,  1032,  1032,
     364,   400,   567,  1032,  1032,   584,   525,   945,  1012,   834,
     834,   834,   479,   994,   199,   369,   833,   945,   945,   288,
     579,   584,   288,   579,   582,   344,   596,   534,   537,   296,
     176,   444,   591,   581,   671,   484,   581,   581,   657,   581,
     581,   674,   433,   581,   303,   653,   533,   811,   533,   157,
     157,   244,   582,   624,   634,   637,   640,   650,   652,   495,
     497,   629,   156,   810,   157,   495,   717,   157,   534,   993,
      42,   157,     3,   533,   283,   298,   582,     3,   691,   587,
     691,   298,   691,   696,   945,   597,   526,   531,   533,   555,
     598,   707,   951,   952,   534,   537,    42,   595,   584,   595,
     283,   288,   349,   595,    61,   595,   910,   534,   945,   945,
     945,  1002,   910,   946,   946,   946,   946,   946,   946,   135,
     283,   293,   946,   946,   946,   946,   946,   946,   946,   946,
     946,   946,   534,   537,    42,   901,   945,   945,  1003,  1002,
     910,   534,   534,   534,   991,   910,  1030,   534,   323,   528,
     323,   380,   528,   533,   533,   826,   436,   438,   436,   438,
     581,   828,   828,   828,   945,   187,   857,   896,   880,   945,
     533,   880,   171,   533,   583,   887,   896,   910,   534,   537,
     904,   534,  1059,     3,   995,    41,   912,   582,   907,   907,
       3,   531,   531,  1035,   444,   444,   444,   444,   910,   534,
     532,   991,   945,   144,  1008,  1009,   534,   534,   534,   544,
     537,   541,   535,   534,   534,   516,   516,   534,   534,  1030,
     533,   945,  1024,   582,   945,   945,   974,  1023,   534,   534,
     534,   516,   946,   946,   150,   991,   176,   135,   164,   288,
     293,   452,   463,   533,   150,   987,   945,   429,  1017,   945,
    1005,   945,   444,   533,   811,   945,  1012,   587,   533,   533,
     160,   960,   878,   879,   903,   834,   903,  1035,   944,  1041,
    1041,   257,   533,    26,   321,   322,   404,   407,   445,   488,
     771,   774,     9,   404,   775,     9,    17,   520,   525,   531,
     533,   786,   787,   788,   789,   796,   797,   798,   801,   802,
     776,   778,   492,   766,   879,   492,   685,    42,    61,   722,
     732,   739,  1013,   537,   877,   522,   518,   839,   837,   300,
     982,   985,   839,     4,  1035,   855,   299,   468,   852,   537,
     251,  1030,   819,    61,  1020,   533,   583,    61,   273,   444,
     945,   283,   649,   533,   157,   533,   627,   209,   646,   647,
     608,    42,   180,   617,   643,   608,    27,   140,   368,   370,
     400,   560,   561,   562,   568,   569,   157,   691,   157,   691,
     618,   632,   618,   534,   537,   584,   611,   522,   535,   534,
     537,   444,   384,    95,   444,   809,   384,   444,   444,   444,
     384,   574,   544,   532,   544,   833,   833,   833,   994,   290,
     290,   534,   533,   590,     3,   419,   420,   584,   605,   641,
     596,   745,   581,   678,   533,    42,   642,   669,   676,   533,
     671,   366,   432,   584,   680,   681,   646,   581,   581,   657,
     581,   534,   537,   296,   622,   296,   298,   621,  1032,   495,
     656,   581,   622,    42,   581,   534,   432,   945,   674,   606,
     157,   581,   694,  1039,   593,   604,   707,   599,   584,   584,
     288,   646,   526,   646,   584,   526,   646,   584,   534,   534,
    1003,   176,   135,   293,   533,   902,   899,   533,   534,   534,
     534,   582,   844,   903,   828,   828,   828,   828,   581,   581,
     581,    61,   192,   866,   896,  1030,   533,   884,   885,   886,
     948,   950,  1030,   171,    82,   906,   905,   534,   534,   531,
     910,   534,   537,   534,  1035,   532,  1035,   534,   933,   935,
     936,   937,   936,   937,   937,   534,   440,   945,   148,   945,
     977,   987,   931,   931,   534,   945,  1024,  1025,  1026,    42,
     205,   534,  1027,   944,   945,    37,    37,   945,   534,   945,
     176,   533,   995,   945,   534,   150,   946,   946,   150,   150,
     945,   945,   532,   544,   533,  1014,   835,   492,   945,   309,
     964,   537,   857,   833,   857,   534,   807,   771,   774,   771,
     771,   771,   774,   774,   774,   525,   796,   521,   531,   773,
     785,   743,   799,   800,   788,   788,   538,   779,   800,   524,
     526,   539,   540,   781,   283,   517,   524,   525,   803,   947,
     973,    85,   768,   945,   372,   730,   582,   273,   331,   119,
     312,   533,   720,   810,   534,   537,   726,   685,   945,   168,
     238,   533,   839,   299,   581,   534,  1031,   187,   811,   812,
    1020,  1031,  1032,  1032,   534,   157,   647,   634,   647,   608,
     636,   537,   534,   121,   213,   280,   283,   633,   533,    34,
      61,   654,   643,    76,    82,    95,   119,   121,   213,   283,
     288,   339,   357,   462,   471,   613,   614,   628,   180,   119,
     197,   283,   622,   554,   109,   119,   180,   283,   418,   421,
     556,   622,   400,   562,   456,  1032,   582,   566,     3,    38,
      44,    51,    57,    83,    85,    91,   103,   175,   177,   180,
     181,   200,   215,   228,   229,   231,   242,   244,   254,   276,
     282,   286,   300,   308,   310,   332,   375,   394,   401,   406,
     425,   434,   455,   461,   481,   524,   525,   555,   584,   609,
     648,   658,   664,   665,   910,   985,  1036,   588,   645,  1032,
    1032,  1032,  1032,  1032,  1032,  1032,  1032,  1032,  1032,   597,
    1012,  1012,   534,   534,   534,   834,   109,   384,   535,   554,
     605,   433,   533,   640,   810,   717,    42,   533,   581,   756,
     761,   653,   198,   581,   534,   537,   534,   678,   533,    42,
     631,   629,   637,    88,   698,   109,   280,   642,   810,   669,
     810,   676,   534,   636,   471,   714,   691,   534,   537,   646,
     946,   176,   533,   995,   904,   534,   537,   534,   857,   581,
     581,   581,   581,    31,   105,   188,   378,   533,   858,   859,
     860,   861,   862,   863,   864,   945,   945,   494,   961,   534,
     947,   988,   989,   205,   187,   881,   885,   534,   887,   888,
     889,  1039,   912,  1035,   912,   582,   912,   532,   532,   945,
     537,   534,   582,   945,   947,   945,   945,   945,   995,   534,
     945,    37,    37,   945,   945,   150,   534,   525,  1012,   534,
     993,   534,   945,   534,   533,   582,   965,   866,   534,   866,
     584,   534,   187,   190,   772,   531,   774,   532,   228,   544,
     794,   795,   534,   524,   788,   532,     9,   780,   803,   803,
     803,   803,    11,    16,    17,    18,    19,    20,    21,    37,
      48,    55,    82,   181,   200,   205,   228,   229,   244,   283,
     286,   303,   406,   517,   520,   521,   522,   524,   525,   526,
     527,   528,   529,   984,   310,   533,   534,  1019,   477,   431,
     470,   731,   582,   725,   735,   298,   728,   522,   739,   730,
     987,    61,   534,   534,   476,   477,   816,   608,   634,   534,
     534,   495,   639,   122,   201,   211,   121,   473,   945,   119,
      42,   533,  1039,  1032,   946,   122,   201,   121,   288,   234,
     581,   639,    90,   654,   198,   288,   555,   945,   654,   288,
     524,   525,   558,   582,   910,   691,   691,     3,   254,   425,
    1036,  1040,   522,   444,   444,   532,   532,   833,   534,   534,
     582,   597,   471,   592,   594,   533,   646,   534,   656,    42,
     432,   945,   606,    42,   537,   749,   280,   345,   765,   432,
     283,   533,   584,   717,   640,   156,   810,   154,   207,   621,
     124,   140,   338,   656,   109,   717,   495,  1069,    42,   533,
     298,   582,   713,   533,   604,   946,   995,   534,   534,     9,
     365,   850,   866,   533,   402,   533,   534,   537,   582,   962,
     963,   348,   867,   537,   534,   533,   583,    61,   534,   205,
     534,   888,   532,   910,  1024,   532,   198,   534,   945,   945,
     945,   544,   532,   544,   534,   534,   582,   966,   961,   584,
     961,   789,   781,   766,   533,   543,   743,   793,   538,   525,
     796,   537,   910,   803,   803,   803,   803,   803,   803,   803,
     442,   429,  1017,  1039,   803,   803,  1005,   135,   164,   283,
     288,   293,   452,   463,   803,   288,   803,   444,    55,   200,
     205,   244,   406,   803,   803,   803,   803,   803,   803,   803,
     803,   803,   803,   973,  1020,   581,   767,   537,   476,  1013,
     534,   537,    93,   730,   945,   534,  1031,  1031,   357,   639,
     533,   630,   608,   534,   197,   533,   945,   283,   614,   639,
     642,  1032,    42,   157,   906,  1040,   528,   609,  1032,  1032,
     534,   554,   126,   756,   534,   629,   810,   810,   534,   743,
     756,   534,   345,    40,   533,   759,   764,   235,   754,   581,
     157,    42,   534,  1032,   656,    31,    87,    96,   120,   197,
     210,   418,   421,   625,   625,   380,   380,    42,    66,    76,
     248,   432,   945,   606,   581,   533,   582,   729,   738,   955,
     534,   534,   533,   961,   991,   533,   991,   860,    42,   537,
     945,   471,   845,   947,  1020,  1030,   892,   533,   892,   945,
    1012,  1012,   318,   967,   867,   867,   766,   101,   784,   792,
     793,   793,   781,   780,   516,   946,   946,   150,   176,   135,
     164,   288,   293,   452,   463,   533,   150,   803,   429,  1017,
     803,  1005,   803,   444,   534,   810,   312,   810,   725,   298,
     533,   723,   581,   608,   588,   635,   638,   422,   486,   615,
     616,   533,   610,   945,   534,   256,   651,   197,   471,   565,
     528,   456,   597,   584,   749,   717,   621,  1069,   749,   142,
     361,   746,   747,   743,   760,   762,    31,   743,   205,   755,
     533,   581,   810,   629,   698,   810,    76,   301,    76,   810,
     534,   714,   945,    82,   733,   534,   537,   733,     9,   867,
     534,   859,   534,   965,   963,   382,   534,  1020,   532,   532,
     532,    61,   834,   845,   845,   784,   946,   534,   538,   542,
     541,   803,    37,    37,   803,   803,   176,   533,   995,   803,
     150,   946,   946,   150,   150,   803,   731,    95,   738,   136,
     642,   522,   534,   537,   553,   534,   280,   623,   177,   317,
     407,   298,   619,   620,   644,   610,   945,   456,   534,    42,
     433,    42,   534,   537,    85,   581,   533,  1069,   621,   656,
    1069,   301,   301,   533,   534,  1039,   734,  1039,   717,   729,
     734,   534,   845,   534,   847,   534,   990,   190,   350,   380,
     968,   119,   783,   790,   793,   791,   793,   803,   803,   803,
     995,   534,   803,    37,    37,   803,   803,   150,   476,  1032,
     534,   284,   468,   651,   609,   638,   534,   616,   211,   124,
     468,   298,   644,   298,   619,   747,   810,   533,   743,   760,
     152,   763,   533,   738,   733,   838,   903,   838,    55,   106,
     458,   945,   969,   970,   969,   969,   534,     4,     9,   782,
     538,   542,   534,   803,   803,   803,   810,   903,   400,   620,
      65,   280,   371,   400,   612,   612,  1069,   758,   761,   533,
     743,   753,   534,   734,   839,   839,   970,   379,   170,   334,
     170,   334,   153,   971,   971,   971,   790,   791,   737,   608,
      25,   119,   288,   537,   757,   412,   762,   534,   537,   717,
     838,    37,   106,   187,   280,   441,   903,   758,   534,   234,
     751,   752,   534,   743,   903,   839,   970,   379,   306,   757,
     533,   750,   357,   581,  1029,   750,   534,   130,   752,   581,
     750,   765,   754,   755
};

/* YYR1[RULE-NUM] -- Symbol kind of the left-hand side of rule RULE-NUM.  */
static const yytype_int16 yyr1[] =
{
       0,   547,   548,   549,   549,   550,   550,   550,   550,   550,
     550,   550,   550,   550,   550,   550,   550,   550,   550,   550,
     550,   550,   550,   550,   550,   550,   550,   550,   550,   550,
     550,   550,   550,   550,   550,   550,   550,   550,   550,   550,
     550,   550,   550,   550,   550,   550,   550,   550,   550,   559,
     559,   559,   559,   559,   559,   559,   559,   560,   560,   561,
     561,   562,   562,   562,   562,   563,   563,   564,   564,   564,
     564,   564,   564,   564,   564,   564,   564,   564,   564,   564,
     564,   564,   564,   564,   564,   564,   564,   564,   564,   564,
     564,   564,   564,   564,   564,   564,   565,   565,   566,   566,
     566,   566,   567,   567,   568,   569,   569,   569,   682,   682,
     682,   682,   581,   581,   582,   582,   582,   582,   583,   583,
     584,   585,   585,   586,   587,   588,   588,   588,   588,   588,
     808,   808,   808,   808,   808,   808,   808,   808,   808,   808,
     808,   808,   808,   809,   809,   719,   720,   720,   720,   720,
     720,   721,   721,   722,   722,   722,   723,   723,   723,   724,
     724,   725,   726,   726,   727,   727,   727,   728,   728,   728,
     729,   729,   729,   730,   730,   731,   731,   732,   732,   733,
     733,   734,   734,   735,   735,   736,   736,   737,   737,   738,
     738,   739,   679,   679,   679,   680,   680,   681,   681,   804,
     804,   804,   677,   677,   677,   678,   678,   673,   673,   673,
     674,   674,   675,   675,   675,   676,   676,   695,   695,   695,
     696,   696,   697,   697,   698,   698,   552,   552,   553,   553,
     554,   554,   554,   555,   555,   555,   555,   556,   556,   556,
     556,   556,   556,   556,   556,   556,   556,   556,   556,   556,
     556,   557,   557,   558,   558,   558,   693,   693,   694,   694,
    1044,  1044,  1044,  1044,  1044,  1044,  1045,  1045,  1045,  1047,
     743,   743,   743,   744,   745,   745,   746,   746,   747,   747,
     748,   748,   749,   749,   750,   751,   752,   753,   753,   754,
     754,   755,   755,   756,   757,   757,   758,   759,   759,   760,
     760,   761,   761,   762,   762,   763,   763,   764,   764,   765,
     765,   765,   766,   766,   767,   767,   768,   768,   769,   770,
     770,   771,   771,   771,   772,   772,   772,   773,   773,   774,
     774,   774,   774,   774,   775,   775,   776,   776,   776,   776,
     776,   776,   777,   777,   778,   779,   779,   780,   780,   781,
     781,   781,   781,   781,   782,   782,   783,   783,   784,   784,
     785,   786,   787,   787,   788,   788,   788,   789,   789,   790,
     790,   791,   791,   792,   792,   792,   793,   793,   793,   794,
     794,   795,   795,   796,   796,   796,   797,   797,   798,   798,
     799,   799,   800,   801,   801,   802,   803,   803,   803,   803,
     803,   803,   803,   803,   803,   803,   803,   803,   803,   803,
     803,   803,   803,   803,   803,   803,   803,   803,   803,   803,
     803,   803,   803,   803,   803,   803,   803,   803,   803,   803,
     803,   803,   803,   803,   803,   803,   803,   803,   803,   803,
     803,   803,   803,   803,   803,   803,   803,   803,   803,   803,
     803,   803,   803,   803,   803,   803,   803,   607,   607,   607,
     608,   608,   609,   609,   609,   609,   609,   609,   610,   610,
     611,   612,   612,   612,   612,   612,   613,   613,   613,   613,
     614,   614,   614,   614,   614,   614,   614,   614,   615,   615,
     616,   616,   617,   617,   617,   618,   619,   620,   620,   620,
     620,   620,   621,   621,   621,   621,   622,   623,   623,   624,
     624,   625,   625,   625,   625,   625,   625,   625,   625,   626,
     626,   627,   628,   628,   628,   628,   629,   629,   629,   629,
     630,   631,   631,   631,   632,   633,   633,   633,   633,   633,
     633,   634,   634,   635,   635,   636,   637,   637,   637,   638,
     638,   639,   639,   640,   640,   640,   641,   642,   642,   643,
     643,   644,   645,   645,   645,   645,   646,   646,   647,   647,
     648,   648,   648,   649,   649,   649,   649,   649,   649,   650,
     650,   651,   651,   651,   651,   652,   653,   653,   653,   653,
     653,   653,   653,   653,   654,   654,   687,   687,   687,   687,
     687,   687,   688,   688,   688,   688,   688,   688,   688,   688,
     688,   688,   688,   688,   688,   688,   688,   688,   688,   688,
     689,   689,   689,   689,   689,   689,   690,   690,   691,   691,
     691,   692,   692,   692,   667,   667,   667,   667,   667,   667,
     668,   668,   669,   669,  1046,   589,   589,   589,   590,   590,
     590,   591,   591,   592,   592,   593,   593,   594,   594,   595,
     595,   596,   596,   597,   597,   598,   598,   598,   598,   598,
     598,   598,   599,   600,   600,   601,   601,   602,   602,   603,
     603,   603,   603,   603,   603,   603,   603,   603,   603,   603,
     603,   603,   603,   603,   603,   604,   605,   605,   605,   605,
     605,   606,   606,   810,   810,   811,   811,   811,   812,   812,
     812,   812,   812,   812,   812,   812,   813,   813,   814,   814,
     815,   815,   815,   815,   815,   815,   815,   815,   815,   815,
     815,   815,   815,   815,   815,   815,   815,   815,   815,   816,
     816,   817,   817,   818,   818,   819,   819,   819,   820,   820,
     821,   821,   822,   822,   822,   823,   823,   824,   825,   825,
     825,   826,   826,   827,   827,   827,   827,   827,   827,   827,
     827,   827,   828,   828,   829,   829,   829,   830,   831,   831,
     832,   832,   833,   833,   833,   834,   834,   835,   835,   836,
     836,   837,   837,   838,   838,   838,   839,   839,   839,   840,
     840,   840,   840,   841,   841,   842,   842,   842,   842,   843,
     843,   844,   844,   844,   844,   844,   844,   845,   845,   846,
     846,   847,   847,   847,   847,   848,   849,   849,   850,   850,
     851,   851,   851,   851,   851,   852,   853,   853,   853,   854,
     854,   855,   855,   856,   856,   857,   857,   857,   858,   858,
     859,   859,   860,   860,   860,   860,   860,   861,   862,   863,
     864,   865,   865,   866,   866,   867,   867,   868,   868,   869,
     869,   870,   870,   871,   872,   872,   872,   872,   873,   873,
     874,   874,   874,   875,   875,   876,   876,   877,   877,   878,
     878,   879,   879,   880,   880,   880,   880,   880,   880,   880,
     880,   880,   880,   880,   881,   881,   882,   882,   882,   883,
     883,   884,   884,   884,   884,   885,   885,   886,   886,   887,
     887,   888,   889,   889,   890,   890,   890,   890,   890,   890,
     890,   890,   890,   890,   890,   891,   891,   891,   891,   892,
     892,   893,   893,   893,   893,   893,   894,   894,   894,   894,
     894,   894,   895,   895,   896,   896,   897,   897,   897,   897,
     898,   898,   899,   900,   900,   901,   901,   902,   902,   903,
     903,   904,   904,   905,   906,   906,   907,   907,   908,   908,
     909,   909,   910,   910,   910,   910,   910,   910,   910,   910,
     910,   910,   911,   911,   912,   912,   912,   913,   913,   913,
     913,   913,   913,   913,   914,   914,   914,   914,   915,   916,
     916,   917,   917,   917,   917,   917,   917,   917,   917,   917,
     917,   917,   918,   918,   919,   919,   920,   920,   921,   922,
     923,   923,   924,   924,   925,   926,   927,   927,   927,   927,
     927,   927,   928,   928,   929,   929,   929,   929,   930,   931,
     931,   931,   932,   932,   933,   933,   934,   934,   935,   935,
     936,   936,   937,   937,   938,   938,   939,   939,   940,   940,
     941,   941,   942,   942,   943,   943,   944,   944,   944,   944,
     944,   944,   944,   944,   944,   944,   944,   944,   944,   944,
     944,   944,   944,   944,   944,   944,   945,   945,   945,   945,
     945,   945,   945,   945,   945,   945,   945,   945,   945,   945,
     945,   945,   945,   945,   945,   945,   945,   945,   945,   945,
     945,   945,   945,   945,   945,   945,   945,   945,   945,   945,
     945,   945,   945,   945,   945,   945,   945,   945,   945,   945,
     945,   945,   945,   945,   945,   945,   945,   945,   945,   945,
     945,   945,   945,   945,   945,   945,   945,   945,   945,   945,
     945,   945,   945,   945,   945,   945,   946,   946,   946,   946,
     946,   946,   946,   946,   946,   946,   946,   946,   946,   946,
     946,   946,   946,   946,   946,   946,   946,   946,   946,   946,
     946,   947,   947,   948,   948,   948,   948,   948,   948,   949,
     949,   949,   950,   950,   950,   950,   950,   950,   950,   950,
     950,   950,   950,   950,   951,   952,   953,   953,   953,   953,
     953,   953,   954,   954,   955,   955,   956,   956,   956,   956,
     956,   956,   956,   956,   956,   956,   956,   956,   956,   956,
     957,   957,   958,   958,   959,   959,   959,   960,   960,   961,
     961,   962,   962,   963,   964,   964,   964,   965,   966,   966,
     967,   967,   968,   968,   968,   968,   969,   969,   970,   970,
     970,   970,   970,   971,   971,   971,   971,   971,   972,   972,
     973,   973,   974,   975,   975,   976,   976,   977,   978,   978,
     979,   979,   980,   980,   981,   981,   981,   982,   982,   983,
     983,   983,   983,   983,   983,   983,   983,   983,   983,   983,
     983,   983,   983,   984,   984,   985,   985,   986,   986,   986,
     986,   986,   986,   986,   986,   987,   987,   988,   988,   989,
     989,   990,   990,   991,   991,   992,   992,   993,   993,   994,
     994,   994,   995,   995,   996,   996,   997,   997,   997,   997,
     997,   997,   997,   997,   997,   997,   997,   997,   997,   997,
     998,   998,   999,  1000,  1000,  1001,  1001,  1001,  1001,  1001,
    1001,  1002,  1003,  1004,  1004,  1004,  1005,  1005,  1006,  1007,
    1007,  1008,  1009,  1009,  1010,  1010,  1011,  1011,   586,   586,
     586,   586,  1012,  1012,  1013,  1013,  1014,  1014,  1014,  1015,
    1015,  1015,  1015,  1015,  1016,  1016,  1017,  1017,  1018,  1018,
    1019,  1019,  1020,  1020,  1021,  1021,  1021,  1022,  1022,  1023,
    1023,  1024,  1025,  1025,  1026,  1026,  1027,  1027,  1027,  1028,
    1028,  1029,  1029,  1030,  1030,  1031,  1031,  1032,  1033,  1033,
    1034,  1034,  1034,  1034,  1034,  1034,  1034,  1034,  1034,  1034,
    1034,  1034,  1034,  1034,  1035,  1036,  1036,  1036,  1036,  1037,
    1037,  1037,  1037,  1038,  1038,  1038,  1038,  1039,  1039,  1040,
    1040,  1041,  1041,  1042,  1043,  1043,   805,   806,   806,   807,
     807,   807,   807,   807,   807,   670,   670,   670,   671,   671,
     672,   672,   672,   672,   712,   712,   713,   714,   714,   715,
     715,   716,   716,   717,   717,   718,   718,   551,   551,   551,
     551,   551,   551,   576,   576,   577,   577,   578,   578,   579,
     579,   580,   580,   580,   580,   580,   580,   580,   580,   580,
     580,   710,   710,   711,   699,   699,   699,   699,   700,   700,
     701,   701,   701,   702,   702,   702,   702,   702,   702,   702,
     702,   702,   702,   702,   702,   702,   702,   702,   702,   702,
     702,   702,   702,   702,   702,   702,   702,   702,   702,   702,
     702,   702,   702,   703,   703,   703,   703,   704,   704,   705,
     705,   706,   706,   707,   707,   707,   707,   708,   709,   709,
    1056,  1056,  1056,  1056,  1057,  1057,  1057,  1057,  1058,  1058,
    1059,  1060,  1060,  1060,  1060,  1060,  1060,  1060,  1061,  1061,
     740,   740,   740,   740,   740,   741,   741,   742,   742,  1048,
    1048,  1048,  1048,  1048,  1049,  1049,  1049,  1049,  1049,  1050,
    1050,  1051,  1051,  1052,  1052,   683,   683,   684,   684,   684,
     685,   685,   686,   686,   570,   570,   571,   571,   572,   572,
     572,   573,   573,   574,   574,  1053,  1053,  1053,  1053,  1054,
    1054,  1055,  1055,  1055,  1062,  1062,  1062,  1062,  1062,  1062,
    1062,  1062,  1062,  1063,  1063,  1064,  1064,  1065,  1065,  1066,
    1066,  1067,  1067,   575,  1068,  1068,  1068,  1068,  1068,  1069,
    1069,  1069,  1069,   655,   655,   655,   656,   656,   656,   657,
     658,   658,   658,   658,   658,   658,   658,   658,   658,   658,
     658,   658,   658,   658,   658,   658,   658,   658,   658,   658,
     658,   658,   658,   658,   658,   658,   658,   658,   658,   658,
     658,   658,   658,   658,   658,   658,   658,   658,   658,   658,
     658,   658,   658,   658,   658,   658,   658,   658,   658,   658,
     658,   658,   658,   658,   658,   658,   658,   658,   658,   658,
     658,   658,   658,   658,   658,   658,   658,   658,   658,   658,
     658,   658,   658,   658,   658,   658,   658,   658,   658,   658,
     658,   658,   658,   658,   658,   658,   658,   658,   658,   658,
     658,   658,   658,   658,   658,   658,   658,   658,   658,   658,
     658,   658,   658,   658,   658,   658,   658,   658,   658,   658,
     658,   658,   658,   658,   658,   658,   658,   658,   658,   658,
     658,   658,   658,   658,   658,   658,   658,   658,   658,   658,
     658,   658,   658,   658,   658,   658,   658,   658,   658,   658,
     658,   658,   658,   658,   658,   658,   658,   658,   658,   658,
     658,   658,   658,   658,   658,   658,   658,   658,   658,   658,
     658,   658,   658,   658,   658,   658,   658,   658,   658,   658,
     658,   658,   658,   658,   658,   658,   658,   658,   658,   658,
     658,   658,   658,   658,   658,   658,   658,   658,   658,   658,
     658,   658,   658,   658,   658,   658,   658,   658,   658,   658,
     658,   658,   658,   658,   658,   658,   658,   658,   658,   658,
     658,   658,   658,   658,   658,   658,   658,   658,   658,   658,
     658,   658,   658,   658,   658,   658,   658,   658,   658,   658,
     658,   658,   658,   658,   658,   658,   658,   658,   658,   658,
     658,   658,   658,   658,   658,   658,   658,   658,   658,   658,
     658,   658,   658,   658,   658,   658,   658,   658,   658,   658,
     658,   658,   658,   658,   658,   658,   658,   658,   658,   658,
     658,   658,   658,   658,   658,   658,   658,   658,   658,   658,
     658,   658,   658,   658,   658,   658,   658,   658,   658,   658,
     658,   658,   658,   658,   658,   658,   658,   658,   658,   658,
     658,   658,   658,   658,   658,   658,   658,   658,   658,   658,
     658,   658,   658,   658,   658,   658,   658,   659,   659,   659,
     659,   659,   659,   659,   659,   659,   659,   659,   659,   659,
     659,   659,   659,   659,   659,   659,   659,   659,   659,   659,
     659,   659,   659,   659,   659,   659,   659,   659,   659,   659,
     659,   659,   659,   659,   659,   659,   659,   659,   659,   659,
     659,   659,   659,   659,   659,   659,   659,   659,   659,   659,
     659,   660,   660,   660,   660,   660,   660,   660,   660,   660,
     660,   660,   660,   660,   660,   660,   660,   660,   660,   660,
     660,   660,   660,   660,   660,   660,   660,   660,   660,   661,
     661,   661,   661,   661,   661,   661,   661,   661,   661,   661,
     661,   661,   661,   661,   661,   661,   661,   661,   661,   661,
     661,   661,   661,   661,   661,   661,   661,   661,   662,   662,
     662,   662,   662,   662,   662,   662,   662,   662,   662,   662,
     662,   662,   662,   662,   662,   662,   662,   662,   662,   662,
     662,   662,   662,   662,   662,   662,   662,   662,   662,   662,
     662,   662,   662,   662,   662,   662,   662,   662,   662,   662,
     662,   662,   662,   662,   662,   662,   662,   662,   662,   662,
     662,   662,   662,   662,   662,   662,   662,   662,   662,   662,
     662,   662,   662,   662,   662,   662,   662,   662,   662,   662,
     662,   662,   662,   662,   662,   662,   662,   662,   662,   663,
     663,   663,   663,   663,   663,   663,   663,   663,   663,   663,
     663,   663,   663,   663,   663,   663,   663,   663,   663,   663,
     663,   663,   663,   663,   663,   663,   663,   663,   663,   663,
     663,   664,   664,   664,   664,   664,   664,   664,   664,   664,
     664,   664,   664,   664,   664,   664,   664,   664,   664,   664,
     664,   664,   664,   664,   664,   664,   664,   664,   664,   664,
     664,   664,   664,   664,   664,   664,   664,   664,   664,   664,
     664,   664,   664,   664,   664,   664,   664,   664,   664,   664,
     664,   664,   664,   664,   664,   664,   664,   664,   664,   664,
     664,   664,   664,   664,   664,   664,   664,   664,   664,   664,
     664,   664,   664,   664,   664,   664,   664,   665,   665,   665,
     665,   665,   665,   665,   665,   665,   665,   665,   665,   665,
     665,   665,   665,   665,   665,   665,   665,   665,   666,   666,
     666,   666,   666,   666,   666,   666,   666,   666,   666,   666,
     666,   666,   666,   666,   666,   666,   666,   666,   666,   666,
     666,   666,   666,   666,   666,   666,   666,   666,   666,   666,
     666,   666,   666,   666,   666,   666,   666,   666,   666,   666,
     666,   666,   666,   666,   666,   666,   666,   666,   666,   666,
     666
};

/* YYR2[RULE-NUM] -- Number of symbols on the right-hand side of rule RULE-NUM.  */
static const yytype_int8 yyr2[] =
{
       0,     2,     1,     3,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     0,     4,
       6,     4,     6,     4,     6,     4,     6,     1,     2,     3,
       2,     1,     3,     2,     3,     1,     3,     2,     5,     3,
       6,     4,     6,     6,     6,     5,     5,     6,     9,     4,
       5,     7,     6,     4,     8,     4,     2,     4,     3,     6,
       4,     2,     2,     2,     2,     1,     2,     0,     1,     2,
       2,     2,     1,     3,     4,     2,     1,     0,     2,     3,
       2,     3,     1,     2,     1,     1,     1,     1,     1,     1,
       1,     1,     2,     2,     1,     1,     1,     1,     1,     1,
       6,     6,     8,     6,     8,     6,     8,     6,     8,     8,
      10,     8,    10,     1,     0,     9,     1,     4,     4,     7,
       2,     1,     3,     2,     2,     0,     4,     3,     0,     1,
       0,     2,     3,     5,     2,     2,     0,     8,     5,     0,
       5,     5,     7,     2,     0,     1,     1,     1,     3,     2,
       0,     1,     0,     1,     3,     1,     3,     1,     2,     1,
       3,     2,     6,     8,     5,     1,     0,     1,     3,     2,
       4,     5,     5,     8,     7,     1,     0,     8,    11,    10,
       0,     1,     0,     1,     1,     0,     2,     3,     9,    12,
       1,     3,     1,     3,     3,     0,     4,     6,     1,     2,
       1,     1,     0,     1,     2,     2,     1,     2,     2,     1,
       2,     3,     2,     2,     2,     2,     3,     3,     3,     1,
       3,     1,     0,     1,     2,     2,     5,     7,     0,     2,
       2,     2,     2,     2,     2,     2,     1,     1,     0,     2,
       1,     1,     1,     5,     1,     1,     1,     1,     6,     0,
      11,    13,     3,     0,     3,     2,     2,     1,     3,     2,
       0,     5,     0,     4,     3,     0,    12,     1,     0,     1,
       3,     1,     3,     1,     3,     4,     0,     4,     3,     2,
       2,     0,     2,     0,     1,     0,     4,     0,     9,     2,
       0,     1,     1,     0,     1,     1,     0,     2,     0,     2,
       2,     2,     2,     1,     1,     0,     3,     4,     3,     2,
       3,     0,     1,     3,     3,     1,     3,     1,     0,     1,
       1,     1,     5,     0,     1,     1,     2,     0,     3,     0,
       5,     4,     1,     1,     2,     2,     0,     1,     3,     1,
       3,     1,     3,     1,     3,     3,     1,     2,     3,     2,
       0,     1,     1,     1,     2,     1,     2,     3,     2,     1,
       1,     0,     4,     2,     5,     3,     1,     3,     3,     5,
       2,     2,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     2,     2,
       3,     3,     5,     4,     6,     3,     5,     4,     6,     4,
       6,     5,     7,     3,     2,     4,     3,     2,     3,     3,
       3,     3,     4,     3,     4,     3,     4,     5,     6,     6,
       7,     6,     7,     6,     7,     3,     4,     9,    12,    11,
       0,     2,     1,     1,     1,     1,     1,     1,     3,     0,
       1,     2,     1,     1,     2,     2,     3,     1,     1,     2,
       2,     1,     2,     3,     5,     3,     2,     5,     1,     1,
       1,     0,     5,     7,     5,     2,     3,     1,     1,     2,
       2,     0,     3,     4,     4,     0,     3,     2,     0,     3,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       3,     3,     1,     2,     2,     2,     2,     2,     2,     0,
       3,     3,     3,     0,     1,     2,     1,     2,     2,     2,
       2,     3,     4,     1,     3,     1,     1,     1,     1,     3,
       1,     2,     0,     1,     2,     0,     1,     3,     0,     2,
       0,     3,     3,     1,     5,     3,     1,     3,     1,     2,
       1,     4,     5,     5,     6,     3,     7,     4,    11,     1,
       3,     2,     2,     2,     0,     3,     1,     1,     2,     2,
       2,     2,     1,     0,     1,     2,     6,     4,     6,     4,
       6,     8,     1,     1,     1,     1,     2,     1,     2,     1,
       2,     1,     1,     1,     1,     3,     3,     3,     3,     1,
       2,     2,     1,     3,     1,     1,     1,     3,     1,     1,
       0,     1,     1,     1,     8,    11,    10,     7,    10,     9,
       1,     1,     2,     3,     8,    11,     9,     7,     0,     3,
       3,     1,     1,     3,     0,     1,     3,     1,     0,     1,
       0,     1,     0,     1,     3,     1,     1,     1,     1,     3,
       1,     0,     2,     2,     0,     2,     0,     1,     0,     1,
       1,     1,     3,     3,     1,     1,     3,     3,     3,     3,
       3,     3,     4,     3,     2,     1,     1,     1,     1,     3,
       1,     1,     3,     1,     1,     3,     3,     3,     1,     2,
       4,     4,     2,     3,     5,     5,     1,     1,     3,     0,
      11,    11,    10,    12,     1,     2,     5,     4,     4,     4,
       4,     7,     5,     4,     7,     6,     9,     9,     4,     1,
       1,     1,     1,     1,     1,     1,     5,     1,     1,     3,
       1,     2,     2,     2,     3,     1,     3,     7,     1,     2,
       0,     2,     0,     3,     3,     4,     4,     4,     4,     3,
       2,     1,     1,     0,     1,     1,     0,     2,     1,     5,
       1,     0,     2,     2,     0,     1,     0,     3,     5,     1,
       3,     4,     3,     1,     1,     0,     2,     2,     0,     2,
       2,     1,     1,     1,     0,     2,     4,     5,     4,     2,
       3,     2,     2,     2,     2,     1,     2,     3,     0,     1,
       0,     5,     1,     4,     6,     2,     1,     0,     4,     0,
       1,     1,     2,     2,     2,     1,     1,     2,     2,     1,
       1,     1,     1,     1,     1,     3,     3,     0,     1,     3,
       1,     2,     1,     1,     1,     1,     1,     2,     4,     4,
       5,     1,     1,     2,     0,     2,     0,     1,     3,     1,
       0,     1,     2,     3,     2,     4,     2,     3,     2,     0,
       1,     2,     0,     4,     5,     1,     2,     2,     0,     1,
       3,     1,     2,     3,     3,     3,     3,     3,     3,     1,
       4,     2,     9,     9,     3,     0,     2,     2,     0,     5,
       3,     0,     1,     1,     3,     5,     3,     1,     2,     1,
       3,     5,     1,     2,     3,     4,     5,     4,     5,     4,
       6,     5,     4,     5,     5,     5,     2,     4,     1,     1,
       0,     1,     4,     5,     4,     0,     2,     2,     2,     1,
       1,     1,     1,     0,     4,     2,     1,     2,     2,     4,
       2,     6,     2,     1,     3,     4,     0,     2,     0,     2,
       0,     1,     3,     3,     2,     0,     2,     4,     1,     1,
       1,     0,     2,     3,     5,     6,     2,     3,     1,     5,
       5,     5,     3,     3,     3,     4,     0,     1,     1,     1,
       1,     1,     2,     4,     1,     1,     1,     1,     2,     3,
       0,     1,     1,     1,     1,     1,     2,     2,     2,     2,
       2,     1,     3,     0,     1,     1,     1,     1,     5,     2,
       1,     1,     1,     1,     4,     1,     2,     2,     1,     3,
       3,     2,     1,     0,     5,     2,     5,     2,     1,     3,
       3,     0,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     3,     3,
       3,     3,     3,     3,     3,     0,     1,     3,     3,     5,
       2,     2,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     2,     2,     3,
       3,     2,     2,     3,     3,     5,     4,     6,     3,     5,
       4,     6,     4,     6,     5,     7,     3,     2,     4,     3,
       2,     3,     3,     3,     3,     4,     3,     4,     3,     4,
       5,     6,     6,     7,     6,     7,     6,     7,     3,     4,
       4,     6,     1,     4,     3,     5,     1,     3,     2,     2,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     2,     2,     5,     6,     6,
       7,     1,     2,     1,     1,     1,     2,     2,     4,     3,
       1,     1,     1,     1,     1,     4,     1,     1,     1,     1,
       2,     4,     2,     2,     3,     3,     3,     6,     7,     9,
       7,     7,     5,     1,     1,     1,     5,     6,     6,     4,
       4,     4,     4,     6,     5,     5,     5,     4,     6,     4,
       7,     9,     5,     0,     5,     4,     0,     1,     0,     2,
       0,     1,     3,     3,     2,     2,     0,     6,     1,     0,
       3,     0,     3,     3,     3,     0,     1,     4,     2,     2,
       2,     2,     2,     3,     2,     2,     3,     0,     4,     3,
       1,     5,     3,     1,     3,     1,     2,     3,     1,     3,
       1,     2,     1,     0,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     4,     1,     4,     1,     4,     1,
       2,     1,     2,     1,     2,     1,     3,     1,     3,     1,
       2,     1,     3,     1,     2,     1,     0,     1,     3,     1,
       3,     3,     1,     3,     3,     0,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       4,     3,     2,     3,     0,     3,     3,     2,     2,     1,
       0,     2,     2,     3,     2,     1,     1,     3,     5,     1,
       2,     4,     2,     0,     1,     0,     1,     2,     3,     5,
       7,     7,     1,     0,     0,     2,     0,     2,     3,     3,
       3,     5,     7,     7,     0,     2,     1,     0,     1,     0,
       1,     3,     1,     2,     3,     2,     1,     4,     2,     1,
       0,     3,     1,     3,     1,     2,     4,     2,     0,     1,
       3,     1,     3,     1,     2,     1,     3,     1,     1,     2,
       1,     1,     2,     1,     1,     2,     7,     2,     5,     3,
       3,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     2,     2,
       3,     3,     0,     1,     1,     1,     5,     3,     0,     1,
       1,     1,     1,     1,     1,     4,     7,     6,     2,     0,
       1,     1,     1,     1,    13,    16,     1,     2,     0,     1,
       0,     1,     0,     2,     0,     1,     0,     6,     8,     6,
       8,     6,     8,     3,     2,     1,     0,     6,     6,     1,
       1,     1,     1,     1,     1,     2,     1,     1,     1,     1,
       1,     4,     6,     3,     2,     4,     3,     5,     1,     0,
       1,     1,     0,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       3,     1,     1,     1,     1,     1,     1,     2,     1,     1,
       2,     3,     3,     3,     1,     3,     3,     2,     3,     3,
       1,     1,     1,     3,     5,     1,     1,     1,     1,     3,
       2,     2,     3,     4,     5,     1,     1,     1,     1,     4,
       6,     5,     4,     6,     1,     1,     1,     1,     1,     1,
       0,     1,     3,     1,     0,     7,     3,     1,     2,     3,
       2,     0,     2,     0,     2,     4,     5,     8,     2,     3,
       5,     1,     0,     2,     0,     2,     3,     3,     3,     1,
       1,     1,     2,     3,     2,     2,     2,     2,     3,     4,
       3,     1,     4,     1,     1,     1,     1,     1,     0,     1,
       3,     1,     3,     2,     9,    12,    11,    12,    14,     3,
       4,     4,     0,     7,    10,     9,     2,     3,     0,     4,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1
};


enum { YYENOMEM = -2 };

#define yyerrok         (yyerrstatus = 0)
#define yyclearin       (yychar = YYEMPTY)

#define YYACCEPT        goto yyacceptlab
#define YYABORT         goto yyabortlab
#define YYERROR         goto yyerrorlab
#define YYNOMEM         goto yyexhaustedlab


#define YYRECOVERING()  (!!yyerrstatus)

#define YYBACKUP(Token, Value)                                    \
  do                                                              \
    if (yychar == YYEMPTY)                                        \
      {                                                           \
        yychar = (Token);                                         \
        yylval = (Value);                                         \
        YYPOPSTACK (yylen);                                       \
        yystate = *yyssp;                                         \
        goto yybackup;                                            \
      }                                                           \
    else                                                          \
      {                                                           \
        yyerror (&yylloc, yyscanner, YY_("syntax error: cannot back up")); \
        YYERROR;                                                  \
      }                                                           \
  while (0)

/* Backward compatibility with an undocumented macro.
   Use YYerror or YYUNDEF. */
#define YYERRCODE YYUNDEF

/* YYLLOC_DEFAULT -- Set CURRENT to span from RHS[1] to RHS[N].
   If N is 0, then set CURRENT to the empty location which ends
   the previous symbol: RHS[0] (always defined).  */

#ifndef YYLLOC_DEFAULT
# define YYLLOC_DEFAULT(Current, Rhs, N)                                \
    do                                                                  \
      if (N)                                                            \
        {                                                               \
          (Current).first_line   = YYRHSLOC (Rhs, 1).first_line;        \
          (Current).first_column = YYRHSLOC (Rhs, 1).first_column;      \
          (Current).last_line    = YYRHSLOC (Rhs, N).last_line;         \
          (Current).last_column  = YYRHSLOC (Rhs, N).last_column;       \
        }                                                               \
      else                                                              \
        {                                                               \
          (Current).first_line   = (Current).last_line   =              \
            YYRHSLOC (Rhs, 0).last_line;                                \
          (Current).first_column = (Current).last_column =              \
            YYRHSLOC (Rhs, 0).last_column;                              \
        }                                                               \
    while (0)
#endif

#define YYRHSLOC(Rhs, K) ((Rhs)[K])


/* Enable debugging if requested.  */
#if YYDEBUG

# ifndef YYFPRINTF
#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#  define YYFPRINTF fprintf
# endif

# define YYDPRINTF(Args)                        \
do {                                            \
  if (yydebug)                                  \
    YYFPRINTF Args;                             \
} while (0)


/* YYLOCATION_PRINT -- Print the location on the stream.
   This macro was not mandated originally: define only if we know
   we won't break user code: when these are the locations we know.  */

# ifndef YYLOCATION_PRINT

#  if defined YY_LOCATION_PRINT

   /* Temporary convenience wrapper in case some people defined the
      undocumented and private YY_LOCATION_PRINT macros.  */
#   define YYLOCATION_PRINT(File, Loc)  YY_LOCATION_PRINT(File, *(Loc))

#  elif defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL

/* Print *YYLOCP on YYO.  Private, do not rely on its existence. */

YY_ATTRIBUTE_UNUSED
static int
yy_location_print_ (FILE *yyo, YYLTYPE const * const yylocp)
{
  int res = 0;
  int end_col = 0 != yylocp->last_column ? yylocp->last_column - 1 : 0;
  if (0 <= yylocp->first_line)
    {
      res += YYFPRINTF (yyo, "%d", yylocp->first_line);
      if (0 <= yylocp->first_column)
        res += YYFPRINTF (yyo, ".%d", yylocp->first_column);
    }
  if (0 <= yylocp->last_line)
    {
      if (yylocp->first_line < yylocp->last_line)
        {
          res += YYFPRINTF (yyo, "-%d", yylocp->last_line);
          if (0 <= end_col)
            res += YYFPRINTF (yyo, ".%d", end_col);
        }
      else if (0 <= end_col && yylocp->first_column < end_col)
        res += YYFPRINTF (yyo, "-%d", end_col);
    }
  return res;
}

#   define YYLOCATION_PRINT  yy_location_print_

    /* Temporary convenience wrapper in case some people defined the
       undocumented and private YY_LOCATION_PRINT macros.  */
#   define YY_LOCATION_PRINT(File, Loc)  YYLOCATION_PRINT(File, &(Loc))

#  else

#   define YYLOCATION_PRINT(File, Loc) ((void) 0)
    /* Temporary convenience wrapper in case some people defined the
       undocumented and private YY_LOCATION_PRINT macros.  */
#   define YY_LOCATION_PRINT  YYLOCATION_PRINT

#  endif
# endif /* !defined YYLOCATION_PRINT */


# define YY_SYMBOL_PRINT(Title, Kind, Value, Location)                    \
do {                                                                      \
  if (yydebug)                                                            \
    {                                                                     \
      YYFPRINTF (stderr, "%s ", Title);                                   \
      yy_symbol_print (stderr,                                            \
                  Kind, Value, Location, yyscanner); \
      YYFPRINTF (stderr, "\n");                                           \
    }                                                                     \
} while (0)


/*-----------------------------------.
| Print this symbol's value on YYO.  |
`-----------------------------------*/

static void
yy_symbol_value_print (FILE *yyo,
                       yysymbol_kind_t yykind, YYSTYPE const * const yyvaluep, YYLTYPE const * const yylocationp, core_yyscan_t yyscanner)
{
  FILE *yyoutput = yyo;
  YY_USE (yyoutput);
  YY_USE (yylocationp);
  YY_USE (yyscanner);
  if (!yyvaluep)
    return;
  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  YY_USE (yykind);
  YY_IGNORE_MAYBE_UNINITIALIZED_END
}


/*---------------------------.
| Print this symbol on YYO.  |
`---------------------------*/

static void
yy_symbol_print (FILE *yyo,
                 yysymbol_kind_t yykind, YYSTYPE const * const yyvaluep, YYLTYPE const * const yylocationp, core_yyscan_t yyscanner)
{
  YYFPRINTF (yyo, "%s %s (",
             yykind < YYNTOKENS ? "token" : "nterm", yysymbol_name (yykind));

  YYLOCATION_PRINT (yyo, yylocationp);
  YYFPRINTF (yyo, ": ");
  yy_symbol_value_print (yyo, yykind, yyvaluep, yylocationp, yyscanner);
  YYFPRINTF (yyo, ")");
}

/*------------------------------------------------------------------.
| yy_stack_print -- Print the state stack from its BOTTOM up to its |
| TOP (included).                                                   |
`------------------------------------------------------------------*/

static void
yy_stack_print (yy_state_t *yybottom, yy_state_t *yytop)
{
  YYFPRINTF (stderr, "Stack now");
  for (; yybottom <= yytop; yybottom++)
    {
      int yybot = *yybottom;
      YYFPRINTF (stderr, " %d", yybot);
    }
  YYFPRINTF (stderr, "\n");
}

# define YY_STACK_PRINT(Bottom, Top)                            \
do {                                                            \
  if (yydebug)                                                  \
    yy_stack_print ((Bottom), (Top));                           \
} while (0)


/*------------------------------------------------.
| Report that the YYRULE is going to be reduced.  |
`------------------------------------------------*/

static void
yy_reduce_print (yy_state_t *yyssp, YYSTYPE *yyvsp, YYLTYPE *yylsp,
                 int yyrule, core_yyscan_t yyscanner)
{
  int yylno = yyrline[yyrule];
  int yynrhs = yyr2[yyrule];
  int yyi;
  YYFPRINTF (stderr, "Reducing stack by rule %d (line %d):\n",
             yyrule - 1, yylno);
  /* The symbols being reduced.  */
  for (yyi = 0; yyi < yynrhs; yyi++)
    {
      YYFPRINTF (stderr, "   $%d = ", yyi + 1);
      yy_symbol_print (stderr,
                       YY_ACCESSING_SYMBOL (+yyssp[yyi + 1 - yynrhs]),
                       &yyvsp[(yyi + 1) - (yynrhs)],
                       &(yylsp[(yyi + 1) - (yynrhs)]), yyscanner);
      YYFPRINTF (stderr, "\n");
    }
}

# define YY_REDUCE_PRINT(Rule)          \
do {                                    \
  if (yydebug)                          \
    yy_reduce_print (yyssp, yyvsp, yylsp, Rule, yyscanner); \
} while (0)

/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
int yydebug;
#else /* !YYDEBUG */
# define YYDPRINTF(Args) ((void) 0)
# define YY_SYMBOL_PRINT(Title, Kind, Value, Location)
# define YY_STACK_PRINT(Bottom, Top)
# define YY_REDUCE_PRINT(Rule)
#endif /* !YYDEBUG */


/* YYINITDEPTH -- initial size of the parser's stacks.  */
#ifndef YYINITDEPTH
# define YYINITDEPTH 200
#endif

/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   YYSTACK_ALLOC_MAXIMUM < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.  */

#ifndef YYMAXDEPTH
# define YYMAXDEPTH 10000
#endif






/*-----------------------------------------------.
| Release the memory associated to this symbol.  |
`-----------------------------------------------*/

static void
yydestruct (const char *yymsg,
            yysymbol_kind_t yykind, YYSTYPE *yyvaluep, YYLTYPE *yylocationp, core_yyscan_t yyscanner)
{
  YY_USE (yyvaluep);
  YY_USE (yylocationp);
  YY_USE (yyscanner);
  if (!yymsg)
    yymsg = "Deleting";
  YY_SYMBOL_PRINT (yymsg, yykind, yyvaluep, yylocationp);

  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  YY_USE (yykind);
  YY_IGNORE_MAYBE_UNINITIALIZED_END
}






/*----------.
| yyparse.  |
`----------*/

int
yyparse (core_yyscan_t yyscanner)
{
/* Lookahead token kind.  */
int yychar;


/* The semantic value of the lookahead symbol.  */
/* Default value used for initialization, for pacifying older GCCs
   or non-GCC compilers.  */
YY_INITIAL_VALUE (static YYSTYPE yyval_default;)
YYSTYPE yylval YY_INITIAL_VALUE (= yyval_default);

/* Location data for the lookahead symbol.  */
static YYLTYPE yyloc_default
# if defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL
  = { 1, 1, 1, 1 }
# endif
;
YYLTYPE yylloc = yyloc_default;

    /* Number of syntax errors so far.  */
    int yynerrs = 0; (void)yynerrs;

    yy_state_fast_t yystate = 0;
    /* Number of tokens to shift before error messages enabled.  */
    int yyerrstatus = 0;

    /* Refer to the stacks through separate pointers, to allow yyoverflow
       to reallocate them elsewhere.  */

    /* Their size.  */
    YYPTRDIFF_T yystacksize = YYINITDEPTH;

    /* The state stack: array, bottom, top.  */
    yy_state_t yyssa[YYINITDEPTH];
    yy_state_t *yyss = yyssa;
    yy_state_t *yyssp = yyss;

    /* The semantic value stack: array, bottom, top.  */
    YYSTYPE yyvsa[YYINITDEPTH];
    YYSTYPE *yyvs = yyvsa;
    YYSTYPE *yyvsp = yyvs;

    /* The location stack: array, bottom, top.  */
    YYLTYPE yylsa[YYINITDEPTH];
    YYLTYPE *yyls = yylsa;
    YYLTYPE *yylsp = yyls;

  int yyn;
  /* The return value of yyparse.  */
  int yyresult;
  /* Lookahead symbol kind.  */
  yysymbol_kind_t yytoken = YYSYMBOL_YYEMPTY;
  /* The variables used to return semantic value and location from the
     action routines.  */
  YYSTYPE yyval;
  YYLTYPE yyloc;

  /* The locations where the error started and ended.  */
  YYLTYPE yyerror_range[3];



#define YYPOPSTACK(N)   (yyvsp -= (N), yyssp -= (N), yylsp -= (N))

  /* The number of symbols on the RHS of the reduced rule.
     Keep to zero when no symbol should be popped.  */
  int yylen = 0;

  YYDPRINTF ((stderr, "Starting parse\n"));

  yychar = YYEMPTY; /* Cause a token to be read.  */

  yylsp[0] = yylloc;
  goto yysetstate;


/*------------------------------------------------------------.
| yynewstate -- push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
yynewstate:
  /* In all cases, when you get here, the value and location stacks
     have just been pushed.  So pushing a state here evens the stacks.  */
  yyssp++;


/*--------------------------------------------------------------------.
| yysetstate -- set current state (the top of the stack) to yystate.  |
`--------------------------------------------------------------------*/
yysetstate:
  YYDPRINTF ((stderr, "Entering state %d\n", yystate));
  YY_ASSERT (0 <= yystate && yystate < YYNSTATES);
  YY_IGNORE_USELESS_CAST_BEGIN
  *yyssp = YY_CAST (yy_state_t, yystate);
  YY_IGNORE_USELESS_CAST_END
  YY_STACK_PRINT (yyss, yyssp);

  if (yyss + yystacksize - 1 <= yyssp)
#if !defined yyoverflow && !defined YYSTACK_RELOCATE
    YYNOMEM;
#else
    {
      /* Get the current used size of the three stacks, in elements.  */
      YYPTRDIFF_T yysize = yyssp - yyss + 1;

# if defined yyoverflow
      {
        /* Give user a chance to reallocate the stack.  Use copies of
           these so that the &'s don't force the real ones into
           memory.  */
        yy_state_t *yyss1 = yyss;
        YYSTYPE *yyvs1 = yyvs;
        YYLTYPE *yyls1 = yyls;

        /* Each stack pointer address is followed by the size of the
           data in use in that stack, in bytes.  This used to be a
           conditional around just the two extra args, but that might
           be undefined if yyoverflow is a macro.  */
        yyoverflow (YY_("memory exhausted"),
                    &yyss1, yysize * YYSIZEOF (*yyssp),
                    &yyvs1, yysize * YYSIZEOF (*yyvsp),
                    &yyls1, yysize * YYSIZEOF (*yylsp),
                    &yystacksize);
        yyss = yyss1;
        yyvs = yyvs1;
        yyls = yyls1;
      }
# else /* defined YYSTACK_RELOCATE */
      /* Extend the stack our own way.  */
      if (YYMAXDEPTH <= yystacksize)
        YYNOMEM;
      yystacksize *= 2;
      if (YYMAXDEPTH < yystacksize)
        yystacksize = YYMAXDEPTH;

      {
        yy_state_t *yyss1 = yyss;
        union yyalloc *yyptr =
          YY_CAST (union yyalloc *,
                   YYSTACK_ALLOC (YY_CAST (YYSIZE_T, YYSTACK_BYTES (yystacksize))));
        if (! yyptr)
          YYNOMEM;
        YYSTACK_RELOCATE (yyss_alloc, yyss);
        YYSTACK_RELOCATE (yyvs_alloc, yyvs);
        YYSTACK_RELOCATE (yyls_alloc, yyls);
#  undef YYSTACK_RELOCATE
        if (yyss1 != yyssa)
          YYSTACK_FREE (yyss1);
      }
# endif

      yyssp = yyss + yysize - 1;
      yyvsp = yyvs + yysize - 1;
      yylsp = yyls + yysize - 1;

      YY_IGNORE_USELESS_CAST_BEGIN
      YYDPRINTF ((stderr, "Stack size increased to %ld\n",
                  YY_CAST (long, yystacksize)));
      YY_IGNORE_USELESS_CAST_END

      if (yyss + yystacksize - 1 <= yyssp)
        YYABORT;
    }
#endif /* !defined yyoverflow && !defined YYSTACK_RELOCATE */


  if (yystate == YYFINAL)
    YYACCEPT;

  goto yybackup;


/*-----------.
| yybackup.  |
`-----------*/
yybackup:
  /* Do appropriate processing given the current state.  Read a
     lookahead token if we need one and don't already have one.  */

  /* First try to decide what to do without reference to lookahead token.  */
  yyn = yypact[yystate];
  if (yypact_value_is_default (yyn))
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* YYCHAR is either empty, or end-of-input, or a valid lookahead.  */
  if (yychar == YYEMPTY)
    {
      YYDPRINTF ((stderr, "Reading a token\n"));
      yychar = yylex (&yylval, &yylloc, yyscanner);
    }

  if (yychar <= YYEOF)
    {
      yychar = YYEOF;
      yytoken = YYSYMBOL_YYEOF;
      YYDPRINTF ((stderr, "Now at end of input.\n"));
    }
  else if (yychar == YYerror)
    {
      /* The scanner already issued an error message, process directly
         to error recovery.  But do not keep the error token as
         lookahead, it is too special and may lead us to an endless
         loop in error recovery. */
      yychar = YYUNDEF;
      yytoken = YYSYMBOL_YYerror;
      yyerror_range[1] = yylloc;
      goto yyerrlab1;
    }
  else
    {
      yytoken = YYTRANSLATE (yychar);
      YY_SYMBOL_PRINT ("Next token is", yytoken, &yylval, &yylloc);
    }

  /* If the proper action on seeing token YYTOKEN is to reduce or to
     detect an error, take that action.  */
  yyn += yytoken;
  if (yyn < 0 || YYLAST < yyn || yycheck[yyn] != yytoken)
    goto yydefault;
  yyn = yytable[yyn];
  if (yyn <= 0)
    {
      if (yytable_value_is_error (yyn))
        goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }

  /* Count tokens shifted since error; after three, turn off error
     status.  */
  if (yyerrstatus)
    yyerrstatus--;

  /* Shift the lookahead token.  */
  YY_SYMBOL_PRINT ("Shifting", yytoken, &yylval, &yylloc);
  yystate = yyn;
  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  *++yyvsp = yylval;
  YY_IGNORE_MAYBE_UNINITIALIZED_END
  *++yylsp = yylloc;

  /* Discard the shifted token.  */
  yychar = YYEMPTY;
  goto yynewstate;


/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
yydefault:
  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;
  goto yyreduce;


/*-----------------------------.
| yyreduce -- do a reduction.  |
`-----------------------------*/
yyreduce:
  /* yyn is the number of a rule to reduce with.  */
  yylen = yyr2[yyn];

  /* If YYLEN is nonzero, implement the default value of the action:
     '$$ = $1'.

     Otherwise, the following line sets YYVAL to garbage.
     This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */
  yyval = yyvsp[1-yylen];

  /* Default location. */
  YYLLOC_DEFAULT (yyloc, (yylsp - yylen), yylen);
  yyerror_range[1] = yyloc;
  YY_REDUCE_PRINT (yyn);
  switch (yyn)
    {
  case 2: /* stmtblock: stmtmulti  */
#line 565 "third_party/libpg_query/grammar/grammar.y"
                        {
				pg_yyget_extra(yyscanner)->parsetree = (yyvsp[0].list);
			}
#line 20807 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 3: /* stmtmulti: stmtmulti ';' stmt  */
#line 581 "third_party/libpg_query/grammar/grammar.y"
                                {
					if ((yyvsp[-2].list) != NIL)
					{
						/* update length of previous stmt */
						updateRawStmtEnd(llast_node(PGRawStmt, (yyvsp[-2].list)), (yylsp[-1]));
					}
					if ((yyvsp[0].node) != NULL)
						(yyval.list) = lappend((yyvsp[-2].list), makeRawStmt((yyvsp[0].node), (yylsp[-1]) + 1));
					else
						(yyval.list) = (yyvsp[-2].list);
				}
#line 20823 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 4: /* stmtmulti: stmt  */
#line 593 "third_party/libpg_query/grammar/grammar.y"
                                {
					if ((yyvsp[0].node) != NULL)
						(yyval.list) = list_make1(makeRawStmt((yyvsp[0].node), 0));
					else
						(yyval.list) = NIL;
				}
#line 20834 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 48: /* stmt: %empty  */
#line 645 "third_party/libpg_query/grammar/grammar.y"
        { (yyval.node) = NULL; }
#line 20840 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 49: /* AlterTableStmt: ALTER TABLE relation_expr alter_table_cmds  */
#line 10 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_TABLE;
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 20853 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 50: /* AlterTableStmt: ALTER TABLE IF_P EXISTS relation_expr alter_table_cmds  */
#line 19 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_TABLE;
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 20866 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 51: /* AlterTableStmt: ALTER INDEX qualified_name alter_table_cmds  */
#line 28 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_INDEX;
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 20879 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 52: /* AlterTableStmt: ALTER INDEX IF_P EXISTS qualified_name alter_table_cmds  */
#line 37 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_INDEX;
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 20892 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 53: /* AlterTableStmt: ALTER SEQUENCE qualified_name alter_table_cmds  */
#line 46 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_SEQUENCE;
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 20905 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 54: /* AlterTableStmt: ALTER SEQUENCE IF_P EXISTS qualified_name alter_table_cmds  */
#line 55 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_SEQUENCE;
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 20918 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 55: /* AlterTableStmt: ALTER VIEW qualified_name alter_table_cmds  */
#line 64 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_VIEW;
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 20931 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 56: /* AlterTableStmt: ALTER VIEW IF_P EXISTS qualified_name alter_table_cmds  */
#line 73 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_VIEW;
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 20944 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 57: /* alter_identity_column_option_list: alter_identity_column_option  */
#line 86 "third_party/libpg_query/grammar/statements/alter_table.y"
                                { (yyval.list) = list_make1((yyvsp[0].defelt)); }
#line 20950 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 58: /* alter_identity_column_option_list: alter_identity_column_option_list alter_identity_column_option  */
#line 88 "third_party/libpg_query/grammar/statements/alter_table.y"
                                { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].defelt)); }
#line 20956 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 59: /* alter_column_default: SET DEFAULT a_expr  */
#line 93 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                { (yyval.node) = (yyvsp[0].node); }
#line 20962 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 60: /* alter_column_default: DROP DEFAULT  */
#line 94 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                { (yyval.node) = NULL; }
#line 20968 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 61: /* alter_identity_column_option: RESTART  */
#line 100 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = makeDefElem("restart", NULL, (yylsp[0]));
				}
#line 20976 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 62: /* alter_identity_column_option: RESTART opt_with NumericOnly  */
#line 104 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = makeDefElem("restart", (PGNode *)(yyvsp[0].value), (yylsp[-2]));
				}
#line 20984 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 63: /* alter_identity_column_option: SET SeqOptElem  */
#line 108 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					if (strcmp((yyvsp[0].defelt)->defname, "as") == 0 ||
						strcmp((yyvsp[0].defelt)->defname, "restart") == 0 ||
						strcmp((yyvsp[0].defelt)->defname, "owned_by") == 0)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("sequence option \"%s\" not supported here", (yyvsp[0].defelt)->defname),
								 parser_errposition((yylsp[0]))));
					(yyval.defelt) = (yyvsp[0].defelt);
				}
#line 20999 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 64: /* alter_identity_column_option: SET GENERATED generated_when  */
#line 119 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = makeDefElem("generated", (PGNode *) makeInteger((yyvsp[0].ival)), (yylsp[-2]));
				}
#line 21007 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 65: /* alter_generic_option_list: alter_generic_option_elem  */
#line 127 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].defelt));
				}
#line 21015 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 66: /* alter_generic_option_list: alter_generic_option_list ',' alter_generic_option_elem  */
#line 131 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt));
				}
#line 21023 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 67: /* alter_table_cmd: ADD_P columnDef  */
#line 140 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AddColumn;
					n->def = (yyvsp[0].node);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 21035 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 68: /* alter_table_cmd: ADD_P IF_P NOT EXISTS columnDef  */
#line 149 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AddColumn;
					n->def = (yyvsp[0].node);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 21047 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 69: /* alter_table_cmd: ADD_P COLUMN columnDef  */
#line 158 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AddColumn;
					n->def = (yyvsp[0].node);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 21059 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 70: /* alter_table_cmd: ADD_P COLUMN IF_P NOT EXISTS columnDef  */
#line 167 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AddColumn;
					n->def = (yyvsp[0].node);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 21071 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 71: /* alter_table_cmd: ALTER opt_column ColId alter_column_default  */
#line 176 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_ColumnDefault;
					n->name = (yyvsp[-1].str);
					n->def = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 21083 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 72: /* alter_table_cmd: ALTER opt_column ColId DROP NOT NULL_P  */
#line 185 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_DropNotNull;
					n->name = (yyvsp[-3].str);
					(yyval.node) = (PGNode *)n;
				}
#line 21094 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 73: /* alter_table_cmd: ALTER opt_column ColId SET NOT NULL_P  */
#line 193 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetNotNull;
					n->name = (yyvsp[-3].str);
					(yyval.node) = (PGNode *)n;
				}
#line 21105 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 74: /* alter_table_cmd: ALTER opt_column ColId SET STATISTICS SignedIconst  */
#line 201 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetStatistics;
					n->name = (yyvsp[-3].str);
					n->def = (PGNode *) makeInteger((yyvsp[0].ival));
					(yyval.node) = (PGNode *)n;
				}
#line 21117 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 75: /* alter_table_cmd: ALTER opt_column ColId SET reloptions  */
#line 210 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetOptions;
					n->name = (yyvsp[-2].str);
					n->def = (PGNode *) (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 21129 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 76: /* alter_table_cmd: ALTER opt_column ColId RESET reloptions  */
#line 219 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_ResetOptions;
					n->name = (yyvsp[-2].str);
					n->def = (PGNode *) (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 21141 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 77: /* alter_table_cmd: ALTER opt_column ColId SET STORAGE ColId  */
#line 228 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetStorage;
					n->name = (yyvsp[-3].str);
					n->def = (PGNode *) makeString((yyvsp[0].str));
					(yyval.node) = (PGNode *)n;
				}
#line 21153 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 78: /* alter_table_cmd: ALTER opt_column ColId ADD_P GENERATED generated_when AS IDENTITY_P OptParenthesizedSeqOptList  */
#line 237 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					PGConstraint *c = makeNode(PGConstraint);

					c->contype = PG_CONSTR_IDENTITY;
					c->generated_when = (yyvsp[-3].ival);
					c->options = (yyvsp[0].list);
					c->location = (yylsp[-4]);

					n->subtype = PG_AT_AddIdentity;
					n->name = (yyvsp[-6].str);
					n->def = (PGNode *) c;

					(yyval.node) = (PGNode *)n;
				}
#line 21173 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 79: /* alter_table_cmd: ALTER opt_column ColId alter_identity_column_option_list  */
#line 254 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetIdentity;
					n->name = (yyvsp[-1].str);
					n->def = (PGNode *) (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 21185 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 80: /* alter_table_cmd: ALTER opt_column ColId DROP IDENTITY_P  */
#line 263 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = AT_DropIdentity;
					n->name = (yyvsp[-2].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 21197 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 81: /* alter_table_cmd: ALTER opt_column ColId DROP IDENTITY_P IF_P EXISTS  */
#line 272 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = AT_DropIdentity;
					n->name = (yyvsp[-4].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 21209 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 82: /* alter_table_cmd: DROP opt_column IF_P EXISTS ColId opt_drop_behavior  */
#line 281 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_DropColumn;
					n->name = (yyvsp[-1].str);
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 21222 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 83: /* alter_table_cmd: DROP opt_column ColId opt_drop_behavior  */
#line 291 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_DropColumn;
					n->name = (yyvsp[-1].str);
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 21235 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 84: /* alter_table_cmd: ALTER opt_column ColId opt_set_data TYPE_P Typename opt_collate_clause alter_using  */
#line 304 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					PGColumnDef *def = makeNode(PGColumnDef);
					n->subtype = PG_AT_AlterColumnType;
					n->name = (yyvsp[-5].str);
					n->def = (PGNode *) def;
					/* We only use these fields of the PGColumnDef node */
					def->typeName = (yyvsp[-2].typnam);
					def->collClause = (PGCollateClause *) (yyvsp[-1].node);
					def->raw_default = (yyvsp[0].node);
					def->location = (yylsp[-5]);
					(yyval.node) = (PGNode *)n;
				}
#line 21253 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 85: /* alter_table_cmd: ALTER opt_column ColId alter_generic_options  */
#line 319 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AlterColumnGenericOptions;
					n->name = (yyvsp[-1].str);
					n->def = (PGNode *) (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 21265 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 86: /* alter_table_cmd: ADD_P TableConstraint  */
#line 328 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AddConstraint;
					n->def = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 21276 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 87: /* alter_table_cmd: ALTER CONSTRAINT name ConstraintAttributeSpec  */
#line 336 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					PGConstraint *c = makeNode(PGConstraint);
					n->subtype = PG_AT_AlterConstraint;
					n->def = (PGNode *) c;
					c->contype = PG_CONSTR_FOREIGN; /* others not supported, yet */
					c->conname = (yyvsp[-1].str);
					processCASbits((yyvsp[0].ival), (yylsp[0]), "ALTER CONSTRAINT statement",
									&c->deferrable,
									&c->initdeferred,
									NULL, NULL, yyscanner);
					(yyval.node) = (PGNode *)n;
				}
#line 21294 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 88: /* alter_table_cmd: VALIDATE CONSTRAINT name  */
#line 351 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_ValidateConstraint;
					n->name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 21305 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 89: /* alter_table_cmd: DROP CONSTRAINT IF_P EXISTS name opt_drop_behavior  */
#line 359 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_DropConstraint;
					n->name = (yyvsp[-1].str);
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 21318 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 90: /* alter_table_cmd: DROP CONSTRAINT name opt_drop_behavior  */
#line 369 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_DropConstraint;
					n->name = (yyvsp[-1].str);
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 21331 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 91: /* alter_table_cmd: SET LOGGED  */
#line 379 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetLogged;
					(yyval.node) = (PGNode *)n;
				}
#line 21341 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 92: /* alter_table_cmd: SET UNLOGGED  */
#line 386 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetUnLogged;
					(yyval.node) = (PGNode *)n;
				}
#line 21351 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 93: /* alter_table_cmd: SET reloptions  */
#line 393 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetRelOptions;
					n->def = (PGNode *)(yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 21362 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 94: /* alter_table_cmd: RESET reloptions  */
#line 401 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_ResetRelOptions;
					n->def = (PGNode *)(yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 21373 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 95: /* alter_table_cmd: alter_generic_options  */
#line 408 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_GenericOptions;
					n->def = (PGNode *)(yyvsp[0].list);
					(yyval.node) = (PGNode *) n;
				}
#line 21384 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 96: /* alter_using: USING a_expr  */
#line 418 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                { (yyval.node) = (yyvsp[0].node); }
#line 21390 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 97: /* alter_using: %empty  */
#line 419 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                { (yyval.node) = NULL; }
#line 21396 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 98: /* alter_generic_option_elem: generic_option_elem  */
#line 425 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = (yyvsp[0].defelt);
				}
#line 21404 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 99: /* alter_generic_option_elem: SET generic_option_elem  */
#line 429 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = (yyvsp[0].defelt);
					(yyval.defelt)->defaction = PG_DEFELEM_SET;
				}
#line 21413 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 100: /* alter_generic_option_elem: ADD_P generic_option_elem  */
#line 434 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = (yyvsp[0].defelt);
					(yyval.defelt)->defaction = PG_DEFELEM_ADD;
				}
#line 21422 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 101: /* alter_generic_option_elem: DROP generic_option_name  */
#line 439 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = makeDefElemExtended(NULL, (yyvsp[0].str), NULL, DEFELEM_DROP, (yylsp[0]));
				}
#line 21430 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 102: /* alter_table_cmds: alter_table_cmd  */
#line 446 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 21436 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 103: /* alter_table_cmds: alter_table_cmds ',' alter_table_cmd  */
#line 447 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 21442 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 104: /* alter_generic_options: OPTIONS '(' alter_generic_option_list ')'  */
#line 452 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 21448 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 105: /* opt_set_data: SET DATA_P  */
#line 456 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                                { (yyval.ival) = 1; }
#line 21454 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 106: /* opt_set_data: SET  */
#line 457 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                                                { (yyval.ival) = 0; }
#line 21460 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 107: /* opt_set_data: %empty  */
#line 458 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                                                { (yyval.ival) = 0; }
#line 21466 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 108: /* DeallocateStmt: DEALLOCATE name  */
#line 8 "third_party/libpg_query/grammar/statements/deallocate.y"
                                        {
						PGDeallocateStmt *n = makeNode(PGDeallocateStmt);
						n->name = (yyvsp[0].str);
						(yyval.node) = (PGNode *) n;
					}
#line 21476 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 109: /* DeallocateStmt: DEALLOCATE PREPARE name  */
#line 14 "third_party/libpg_query/grammar/statements/deallocate.y"
                                        {
						PGDeallocateStmt *n = makeNode(PGDeallocateStmt);
						n->name = (yyvsp[0].str);
						(yyval.node) = (PGNode *) n;
					}
#line 21486 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 110: /* DeallocateStmt: DEALLOCATE ALL  */
#line 20 "third_party/libpg_query/grammar/statements/deallocate.y"
                                        {
						PGDeallocateStmt *n = makeNode(PGDeallocateStmt);
						n->name = NULL;
						(yyval.node) = (PGNode *) n;
					}
#line 21496 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 111: /* DeallocateStmt: DEALLOCATE PREPARE ALL  */
#line 26 "third_party/libpg_query/grammar/statements/deallocate.y"
                                        {
						PGDeallocateStmt *n = makeNode(PGDeallocateStmt);
						n->name = NULL;
						(yyval.node) = (PGNode *) n;
					}
#line 21506 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 112: /* qualified_name: ColIdOrString  */
#line 10 "third_party/libpg_query/grammar/statements/common.y"
                                {
					(yyval.range) = makeRangeVar(NULL, (yyvsp[0].str), (yylsp[0]));
				}
#line 21514 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 113: /* qualified_name: ColId indirection  */
#line 14 "third_party/libpg_query/grammar/statements/common.y"
                                {
					check_qualified_name((yyvsp[0].list), yyscanner);
					(yyval.range) = makeRangeVar(NULL, NULL, (yylsp[-1]));
					switch (list_length((yyvsp[0].list)))
					{
						case 1:
							(yyval.range)->catalogname = NULL;
							(yyval.range)->schemaname = (yyvsp[-1].str);
							(yyval.range)->relname = strVal(linitial((yyvsp[0].list)));
							break;
						case 2:
							(yyval.range)->catalogname = (yyvsp[-1].str);
							(yyval.range)->schemaname = strVal(linitial((yyvsp[0].list)));
							(yyval.range)->relname = strVal(lsecond((yyvsp[0].list)));
							break;
						case 3:
						default:
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("improper qualified name (too many dotted names): %s",
											NameListToString(lcons(makeString((yyvsp[-1].str)), (yyvsp[0].list)))),
									 parser_errposition((yylsp[-1]))));
							break;
					}
				}
#line 21544 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 114: /* ColId: IDENT  */
#line 44 "third_party/libpg_query/grammar/statements/common.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 21550 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 115: /* ColId: unreserved_keyword  */
#line 45 "third_party/libpg_query/grammar/statements/common.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 21556 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 116: /* ColId: col_name_keyword  */
#line 46 "third_party/libpg_query/grammar/statements/common.y"
                                                                                        { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 21562 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 117: /* ColId: pgq_unreserved_keyword  */
#line 47 "third_party/libpg_query/grammar/statements/common.y"
                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 21568 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 118: /* ColIdOrString: ColId  */
#line 51 "third_party/libpg_query/grammar/statements/common.y"
                                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 21574 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 119: /* ColIdOrString: SCONST  */
#line 52 "third_party/libpg_query/grammar/statements/common.y"
                                                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 21580 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 120: /* Sconst: SCONST  */
#line 56 "third_party/libpg_query/grammar/statements/common.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 21586 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 121: /* indirection: indirection_el  */
#line 60 "third_party/libpg_query/grammar/statements/common.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 21592 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 122: /* indirection: indirection indirection_el  */
#line 61 "third_party/libpg_query/grammar/statements/common.y"
                                                                        { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 21598 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 123: /* indirection_el: '.' attr_name  */
#line 66 "third_party/libpg_query/grammar/statements/common.y"
                                {
					(yyval.node) = (PGNode *) makeString((yyvsp[0].str));
				}
#line 21606 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 124: /* attr_name: ColLabel  */
#line 71 "third_party/libpg_query/grammar/statements/common.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 21612 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 125: /* ColLabel: IDENT  */
#line 76 "third_party/libpg_query/grammar/statements/common.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 21618 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 126: /* ColLabel: other_keyword  */
#line 77 "third_party/libpg_query/grammar/statements/common.y"
                                                                                        { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 21624 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 127: /* ColLabel: unreserved_keyword  */
#line 78 "third_party/libpg_query/grammar/statements/common.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 21630 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 128: /* ColLabel: reserved_keyword  */
#line 79 "third_party/libpg_query/grammar/statements/common.y"
                                                                                        { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 21636 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 129: /* ColLabel: pgq_unreserved_keyword  */
#line 80 "third_party/libpg_query/grammar/statements/common.y"
                                                    { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 21642 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 130: /* RenameStmt: ALTER SCHEMA name RENAME TO name  */
#line 7 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_SCHEMA;
					n->subname = (yyvsp[-3].str);
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 21655 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 131: /* RenameStmt: ALTER TABLE relation_expr RENAME TO name  */
#line 16 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 21669 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 132: /* RenameStmt: ALTER TABLE IF_P EXISTS relation_expr RENAME TO name  */
#line 26 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 21683 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 133: /* RenameStmt: ALTER SEQUENCE qualified_name RENAME TO name  */
#line 36 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_SEQUENCE;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 21697 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 134: /* RenameStmt: ALTER SEQUENCE IF_P EXISTS qualified_name RENAME TO name  */
#line 46 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_SEQUENCE;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 21711 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 135: /* RenameStmt: ALTER VIEW qualified_name RENAME TO name  */
#line 56 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_VIEW;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 21725 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 136: /* RenameStmt: ALTER VIEW IF_P EXISTS qualified_name RENAME TO name  */
#line 66 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_VIEW;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 21739 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 137: /* RenameStmt: ALTER INDEX qualified_name RENAME TO name  */
#line 76 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_INDEX;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 21753 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 138: /* RenameStmt: ALTER INDEX IF_P EXISTS qualified_name RENAME TO name  */
#line 86 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_INDEX;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 21767 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 139: /* RenameStmt: ALTER TABLE relation_expr RENAME opt_column name TO name  */
#line 96 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_COLUMN;
					n->relationType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-5].range);
					n->subname = (yyvsp[-2].str);
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 21782 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 140: /* RenameStmt: ALTER TABLE IF_P EXISTS relation_expr RENAME opt_column name TO name  */
#line 107 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_COLUMN;
					n->relationType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-5].range);
					n->subname = (yyvsp[-2].str);
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 21797 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 141: /* RenameStmt: ALTER TABLE relation_expr RENAME CONSTRAINT name TO name  */
#line 118 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_TABCONSTRAINT;
					n->relation = (yyvsp[-5].range);
					n->subname = (yyvsp[-2].str);
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 21811 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 142: /* RenameStmt: ALTER TABLE IF_P EXISTS relation_expr RENAME CONSTRAINT name TO name  */
#line 128 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_TABCONSTRAINT;
					n->relation = (yyvsp[-5].range);
					n->subname = (yyvsp[-2].str);
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 21825 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 143: /* opt_column: COLUMN  */
#line 140 "third_party/libpg_query/grammar/statements/rename.y"
                                                                                        { (yyval.ival) = COLUMN; }
#line 21831 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 144: /* opt_column: %empty  */
#line 141 "third_party/libpg_query/grammar/statements/rename.y"
                                                                                                { (yyval.ival) = 0; }
#line 21837 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 145: /* InsertStmt: opt_with_clause INSERT opt_or_action INTO insert_target opt_by_name_or_position insert_rest opt_on_conflict returning_clause  */
#line 11 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyvsp[-2].istmt)->relation = (yyvsp[-4].range);
					(yyvsp[-2].istmt)->onConflictAlias = (yyvsp[-6].onconflictshorthand);
					(yyvsp[-2].istmt)->onConflictClause = (yyvsp[-1].onconflict);
					(yyvsp[-2].istmt)->returningList = (yyvsp[0].list);
					(yyvsp[-2].istmt)->withClause = (yyvsp[-8].with);
					(yyvsp[-2].istmt)->insert_column_order = (yyvsp[-3].bynameorposition);
					(yyval.node) = (PGNode *) (yyvsp[-2].istmt);
				}
#line 21851 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 146: /* insert_rest: SelectStmt  */
#line 24 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.istmt) = makeNode(PGInsertStmt);
					(yyval.istmt)->cols = NIL;
					(yyval.istmt)->selectStmt = (yyvsp[0].node);
				}
#line 21861 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 147: /* insert_rest: OVERRIDING override_kind VALUE_P SelectStmt  */
#line 30 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.istmt) = makeNode(PGInsertStmt);
					(yyval.istmt)->cols = NIL;
					(yyval.istmt)->override = (yyvsp[-2].override);
					(yyval.istmt)->selectStmt = (yyvsp[0].node);
				}
#line 21872 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 148: /* insert_rest: '(' insert_column_list ')' SelectStmt  */
#line 37 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.istmt) = makeNode(PGInsertStmt);
					(yyval.istmt)->cols = (yyvsp[-2].list);
					(yyval.istmt)->selectStmt = (yyvsp[0].node);
				}
#line 21882 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 149: /* insert_rest: '(' insert_column_list ')' OVERRIDING override_kind VALUE_P SelectStmt  */
#line 43 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.istmt) = makeNode(PGInsertStmt);
					(yyval.istmt)->cols = (yyvsp[-5].list);
					(yyval.istmt)->override = (yyvsp[-2].override);
					(yyval.istmt)->selectStmt = (yyvsp[0].node);
				}
#line 21893 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 150: /* insert_rest: DEFAULT VALUES  */
#line 50 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.istmt) = makeNode(PGInsertStmt);
					(yyval.istmt)->cols = NIL;
					(yyval.istmt)->selectStmt = NULL;
				}
#line 21903 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 151: /* insert_target: qualified_name  */
#line 60 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.range) = (yyvsp[0].range);
				}
#line 21911 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 152: /* insert_target: qualified_name AS ColId  */
#line 64 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyvsp[-2].range)->alias = makeAlias((yyvsp[0].str), NIL);
					(yyval.range) = (yyvsp[-2].range);
				}
#line 21920 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 153: /* opt_by_name_or_position: BY NAME_P  */
#line 71 "third_party/libpg_query/grammar/statements/insert.y"
                                                        { (yyval.bynameorposition) = PG_INSERT_BY_NAME; }
#line 21926 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 154: /* opt_by_name_or_position: BY POSITION  */
#line 72 "third_party/libpg_query/grammar/statements/insert.y"
                                                { (yyval.bynameorposition) = PG_INSERT_BY_POSITION; }
#line 21932 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 155: /* opt_by_name_or_position: %empty  */
#line 73 "third_party/libpg_query/grammar/statements/insert.y"
                                                { (yyval.bynameorposition) = PG_INSERT_BY_POSITION; }
#line 21938 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 156: /* opt_conf_expr: '(' index_params ')' where_clause  */
#line 78 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.infer) = makeNode(PGInferClause);
					(yyval.infer)->indexElems = (yyvsp[-2].list);
					(yyval.infer)->whereClause = (yyvsp[0].node);
					(yyval.infer)->conname = NULL;
					(yyval.infer)->location = (yylsp[-3]);
				}
#line 21950 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 157: /* opt_conf_expr: ON CONSTRAINT name  */
#line 87 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.infer) = makeNode(PGInferClause);
					(yyval.infer)->indexElems = NIL;
					(yyval.infer)->whereClause = NULL;
					(yyval.infer)->conname = (yyvsp[0].str);
					(yyval.infer)->location = (yylsp[-2]);
				}
#line 21962 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 158: /* opt_conf_expr: %empty  */
#line 95 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.infer) = NULL;
				}
#line 21970 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 159: /* opt_with_clause: with_clause  */
#line 102 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                        { (yyval.with) = (yyvsp[0].with); }
#line 21976 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 160: /* opt_with_clause: %empty  */
#line 103 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                        { (yyval.with) = NULL; }
#line 21982 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 161: /* insert_column_item: ColId opt_indirection  */
#line 109 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = (yyvsp[-1].str);
					(yyval.target)->indirection = check_indirection((yyvsp[0].list), yyscanner);
					(yyval.target)->val = NULL;
					(yyval.target)->location = (yylsp[-1]);
				}
#line 21994 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 162: /* set_clause: set_target '=' a_expr  */
#line 121 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyvsp[-2].target)->val = (PGNode *) (yyvsp[0].node);
					(yyval.list) = list_make1((yyvsp[-2].target));
				}
#line 22003 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 163: /* set_clause: '(' set_target_list ')' '=' a_expr  */
#line 126 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					int ncolumns = list_length((yyvsp[-3].list));
					int i = 1;
					PGListCell *col_cell;

					/* Create a PGMultiAssignRef source for each target */
					foreach(col_cell, (yyvsp[-3].list))
					{
						PGResTarget *res_col = (PGResTarget *) lfirst(col_cell);
						PGMultiAssignRef *r = makeNode(PGMultiAssignRef);

						r->source = (PGNode *) (yyvsp[0].node);
						r->colno = i;
						r->ncolumns = ncolumns;
						res_col->val = (PGNode *) r;
						i++;
					}

					(yyval.list) = (yyvsp[-3].list);
				}
#line 22028 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 164: /* opt_or_action: OR REPLACE  */
#line 151 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.onconflictshorthand) = PG_ONCONFLICT_ALIAS_REPLACE;
				}
#line 22036 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 165: /* opt_or_action: OR IGNORE_P  */
#line 156 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.onconflictshorthand) = PG_ONCONFLICT_ALIAS_IGNORE;
				}
#line 22044 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 166: /* opt_or_action: %empty  */
#line 160 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.onconflictshorthand) = PG_ONCONFLICT_ALIAS_NONE;
				}
#line 22052 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 167: /* opt_on_conflict: ON CONFLICT opt_conf_expr DO UPDATE SET set_clause_list_opt_comma where_clause  */
#line 167 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.onconflict) = makeNode(PGOnConflictClause);
					(yyval.onconflict)->action = PG_ONCONFLICT_UPDATE;
					(yyval.onconflict)->infer = (yyvsp[-5].infer);
					(yyval.onconflict)->targetList = (yyvsp[-1].list);
					(yyval.onconflict)->whereClause = (yyvsp[0].node);
					(yyval.onconflict)->location = (yylsp[-7]);
				}
#line 22065 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 168: /* opt_on_conflict: ON CONFLICT opt_conf_expr DO NOTHING  */
#line 177 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.onconflict) = makeNode(PGOnConflictClause);
					(yyval.onconflict)->action = PG_ONCONFLICT_NOTHING;
					(yyval.onconflict)->infer = (yyvsp[-2].infer);
					(yyval.onconflict)->targetList = NIL;
					(yyval.onconflict)->whereClause = NULL;
					(yyval.onconflict)->location = (yylsp[-4]);
				}
#line 22078 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 169: /* opt_on_conflict: %empty  */
#line 186 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.onconflict) = NULL;
				}
#line 22086 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 170: /* index_elem: ColId opt_collate opt_class opt_asc_desc opt_nulls_order  */
#line 193 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.ielem) = makeNode(PGIndexElem);
					(yyval.ielem)->name = (yyvsp[-4].str);
					(yyval.ielem)->expr = NULL;
					(yyval.ielem)->indexcolname = NULL;
					(yyval.ielem)->collation = (yyvsp[-3].list);
					(yyval.ielem)->opclass = (yyvsp[-2].list);
					(yyval.ielem)->ordering = (yyvsp[-1].sortorder);
					(yyval.ielem)->nulls_ordering = (yyvsp[0].nullorder);
				}
#line 22101 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 171: /* index_elem: func_expr_windowless opt_collate opt_class opt_asc_desc opt_nulls_order  */
#line 204 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.ielem) = makeNode(PGIndexElem);
					(yyval.ielem)->name = NULL;
					(yyval.ielem)->expr = (yyvsp[-4].node);
					(yyval.ielem)->indexcolname = NULL;
					(yyval.ielem)->collation = (yyvsp[-3].list);
					(yyval.ielem)->opclass = (yyvsp[-2].list);
					(yyval.ielem)->ordering = (yyvsp[-1].sortorder);
					(yyval.ielem)->nulls_ordering = (yyvsp[0].nullorder);
				}
#line 22116 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 172: /* index_elem: '(' a_expr ')' opt_collate opt_class opt_asc_desc opt_nulls_order  */
#line 215 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.ielem) = makeNode(PGIndexElem);
					(yyval.ielem)->name = NULL;
					(yyval.ielem)->expr = (yyvsp[-5].node);
					(yyval.ielem)->indexcolname = NULL;
					(yyval.ielem)->collation = (yyvsp[-3].list);
					(yyval.ielem)->opclass = (yyvsp[-2].list);
					(yyval.ielem)->ordering = (yyvsp[-1].sortorder);
					(yyval.ielem)->nulls_ordering = (yyvsp[0].nullorder);
				}
#line 22131 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 173: /* returning_clause: RETURNING target_list  */
#line 229 "third_party/libpg_query/grammar/statements/insert.y"
                                                        { (yyval.list) = (yyvsp[0].list); }
#line 22137 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 174: /* returning_clause: %empty  */
#line 230 "third_party/libpg_query/grammar/statements/insert.y"
                                                                { (yyval.list) = NIL; }
#line 22143 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 175: /* override_kind: USER  */
#line 236 "third_party/libpg_query/grammar/statements/insert.y"
                                        { (yyval.override) = PG_OVERRIDING_USER_VALUE; }
#line 22149 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 176: /* override_kind: SYSTEM_P  */
#line 237 "third_party/libpg_query/grammar/statements/insert.y"
                                        { (yyval.override) = OVERRIDING_SYSTEM_VALUE; }
#line 22155 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 177: /* set_target_list: set_target  */
#line 242 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].target)); }
#line 22161 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 178: /* set_target_list: set_target_list ',' set_target  */
#line 243 "third_party/libpg_query/grammar/statements/insert.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list),(yyvsp[0].target)); }
#line 22167 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 179: /* opt_collate: COLLATE any_name  */
#line 249 "third_party/libpg_query/grammar/statements/insert.y"
                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 22173 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 180: /* opt_collate: %empty  */
#line 250 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                                { (yyval.list) = NIL; }
#line 22179 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 181: /* opt_class: any_name  */
#line 254 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 22185 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 182: /* opt_class: %empty  */
#line 255 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                                { (yyval.list) = NIL; }
#line 22191 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 183: /* insert_column_list: insert_column_item  */
#line 261 "third_party/libpg_query/grammar/statements/insert.y"
                                        { (yyval.list) = list_make1((yyvsp[0].target)); }
#line 22197 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 184: /* insert_column_list: insert_column_list ',' insert_column_item  */
#line 263 "third_party/libpg_query/grammar/statements/insert.y"
                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].target)); }
#line 22203 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 185: /* set_clause_list: set_clause  */
#line 268 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 22209 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 186: /* set_clause_list: set_clause_list ',' set_clause  */
#line 269 "third_party/libpg_query/grammar/statements/insert.y"
                                                                { (yyval.list) = list_concat((yyvsp[-2].list),(yyvsp[0].list)); }
#line 22215 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 187: /* set_clause_list_opt_comma: set_clause_list  */
#line 273 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 22221 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 188: /* set_clause_list_opt_comma: set_clause_list ','  */
#line 274 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 22227 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 189: /* index_params: index_elem  */
#line 277 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                { (yyval.list) = list_make1((yyvsp[0].ielem)); }
#line 22233 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 190: /* index_params: index_params ',' index_elem  */
#line 278 "third_party/libpg_query/grammar/statements/insert.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].ielem)); }
#line 22239 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 191: /* set_target: ColId opt_indirection  */
#line 284 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = (yyvsp[-1].str);
					(yyval.target)->indirection = check_indirection((yyvsp[0].list), yyscanner);
					(yyval.target)->val = NULL;	/* upper production sets this */
					(yyval.target)->location = (yylsp[-1]);
				}
#line 22251 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 192: /* CreateTypeStmt: CREATE_P TYPE_P qualified_name AS ENUM_P select_with_parens  */
#line 8 "third_party/libpg_query/grammar/statements/create_type.y"
                                {
					PGCreateTypeStmt *n = makeNode(PGCreateTypeStmt);
					n->typeName = (yyvsp[-3].range);
					n->kind = PG_NEWTYPE_ENUM;
					n->query = (yyvsp[0].node);
					n->vals = NULL;
					(yyval.node) = (PGNode *)n;
				}
#line 22264 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 193: /* CreateTypeStmt: CREATE_P TYPE_P qualified_name AS ENUM_P '(' opt_enum_val_list ')'  */
#line 17 "third_party/libpg_query/grammar/statements/create_type.y"
                                {
					PGCreateTypeStmt *n = makeNode(PGCreateTypeStmt);
					n->typeName = (yyvsp[-5].range);
					n->kind = PG_NEWTYPE_ENUM;
					n->vals = (yyvsp[-1].list);
					n->query = NULL;
					(yyval.node) = (PGNode *)n;
				}
#line 22277 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 194: /* CreateTypeStmt: CREATE_P TYPE_P qualified_name AS Typename  */
#line 26 "third_party/libpg_query/grammar/statements/create_type.y"
                                {
					PGCreateTypeStmt *n = makeNode(PGCreateTypeStmt);
					n->typeName = (yyvsp[-2].range);
					n->query = NULL;
					auto name = std::string(reinterpret_cast<PGValue *>((yyvsp[0].typnam)->names->tail->data.ptr_value)->val.str);
					if (name == "enum") {
						n->kind = PG_NEWTYPE_ENUM;
						n->vals = (yyvsp[0].typnam)->typmods;
					} else {
						n->kind = PG_NEWTYPE_ALIAS;
						n->ofType = (yyvsp[0].typnam);
					}
					(yyval.node) = (PGNode *)n;
				}
#line 22296 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 195: /* opt_enum_val_list: enum_val_list  */
#line 46 "third_party/libpg_query/grammar/statements/create_type.y"
                                      { (yyval.list) = (yyvsp[0].list);}
#line 22302 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 196: /* opt_enum_val_list: %empty  */
#line 47 "third_party/libpg_query/grammar/statements/create_type.y"
                                                        {(yyval.list) = NIL;}
#line 22308 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 197: /* enum_val_list: Sconst  */
#line 51 "third_party/libpg_query/grammar/statements/create_type.y"
                                {
					(yyval.list) = list_make1(makeStringConst((yyvsp[0].str), (yylsp[0])));
				}
#line 22316 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 198: /* enum_val_list: enum_val_list ',' Sconst  */
#line 55 "third_party/libpg_query/grammar/statements/create_type.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), makeStringConst((yyvsp[0].str), (yylsp[0])));
				}
#line 22324 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 199: /* PragmaStmt: PRAGMA_P ColId  */
#line 8 "third_party/libpg_query/grammar/statements/pragma.y"
                                {
					PGPragmaStmt *n = makeNode(PGPragmaStmt);
					n->kind = PG_PRAGMA_TYPE_NOTHING;
					n->name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 22335 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 200: /* PragmaStmt: PRAGMA_P ColId '=' var_list  */
#line 15 "third_party/libpg_query/grammar/statements/pragma.y"
                                {
					PGPragmaStmt *n = makeNode(PGPragmaStmt);
					n->kind = PG_PRAGMA_TYPE_ASSIGNMENT;
					n->name = (yyvsp[-2].str);
					n->args = (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 22347 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 201: /* PragmaStmt: PRAGMA_P ColId '(' func_arg_list ')'  */
#line 23 "third_party/libpg_query/grammar/statements/pragma.y"
                                {
					PGPragmaStmt *n = makeNode(PGPragmaStmt);
					n->kind = PG_PRAGMA_TYPE_CALL;
					n->name = (yyvsp[-3].str);
					n->args = (yyvsp[-1].list);
					(yyval.node) = (PGNode *)n;
				}
#line 22359 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 202: /* CreateSeqStmt: CREATE_P OptTemp SEQUENCE qualified_name OptSeqOptList  */
#line 10 "third_party/libpg_query/grammar/statements/create_sequence.y"
                                {
					PGCreateSeqStmt *n = makeNode(PGCreateSeqStmt);
					(yyvsp[-1].range)->relpersistence = (yyvsp[-3].ival);
					n->sequence = (yyvsp[-1].range);
					n->options = (yyvsp[0].list);
					n->ownerId = InvalidOid;
					n->onconflict = PG_ERROR_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 22373 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 203: /* CreateSeqStmt: CREATE_P OptTemp SEQUENCE IF_P NOT EXISTS qualified_name OptSeqOptList  */
#line 20 "third_party/libpg_query/grammar/statements/create_sequence.y"
                                {
					PGCreateSeqStmt *n = makeNode(PGCreateSeqStmt);
					(yyvsp[-1].range)->relpersistence = (yyvsp[-6].ival);
					n->sequence = (yyvsp[-1].range);
					n->options = (yyvsp[0].list);
					n->ownerId = InvalidOid;
					n->onconflict = PG_IGNORE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 22387 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 204: /* CreateSeqStmt: CREATE_P OR REPLACE OptTemp SEQUENCE qualified_name OptSeqOptList  */
#line 30 "third_party/libpg_query/grammar/statements/create_sequence.y"
                                {
					PGCreateSeqStmt *n = makeNode(PGCreateSeqStmt);
					(yyvsp[-1].range)->relpersistence = (yyvsp[-3].ival);
					n->sequence = (yyvsp[-1].range);
					n->options = (yyvsp[0].list);
					n->ownerId = InvalidOid;
					n->onconflict = PG_REPLACE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 22401 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 205: /* OptSeqOptList: SeqOptList  */
#line 42 "third_party/libpg_query/grammar/statements/create_sequence.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 22407 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 206: /* OptSeqOptList: %empty  */
#line 43 "third_party/libpg_query/grammar/statements/create_sequence.y"
                                                                                                { (yyval.list) = NIL; }
#line 22413 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 207: /* CreateSecretStmt: CREATE_P opt_persist SECRET opt_secret_name opt_storage_specifier '(' copy_generic_opt_list ')'  */
#line 8 "third_party/libpg_query/grammar/statements/create_secret.y"
                                {
					PGCreateSecretStmt *n = makeNode(PGCreateSecretStmt);
					n->persist_type = (yyvsp[-6].str);
					n->secret_name = (yyvsp[-4].str);
					n->secret_storage = (yyvsp[-3].str);
					n->options = (yyvsp[-1].list);
					n->onconflict = PG_ERROR_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 22427 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 208: /* CreateSecretStmt: CREATE_P opt_persist SECRET IF_P NOT EXISTS opt_secret_name opt_storage_specifier '(' copy_generic_opt_list ')'  */
#line 18 "third_party/libpg_query/grammar/statements/create_secret.y"
                                {
					PGCreateSecretStmt *n = makeNode(PGCreateSecretStmt);
					n->persist_type = (yyvsp[-9].str);
					n->secret_name = (yyvsp[-4].str);
					n->secret_storage = (yyvsp[-3].str);
					n->options = (yyvsp[-1].list);
					n->onconflict = PG_IGNORE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 22441 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 209: /* CreateSecretStmt: CREATE_P OR REPLACE opt_persist SECRET opt_secret_name opt_storage_specifier '(' copy_generic_opt_list ')'  */
#line 28 "third_party/libpg_query/grammar/statements/create_secret.y"
                                {
					PGCreateSecretStmt *n = makeNode(PGCreateSecretStmt);
					n->persist_type = (yyvsp[-6].str);
					n->secret_name = (yyvsp[-4].str);
					n->secret_storage = (yyvsp[-3].str);
					n->options = (yyvsp[-1].list);
					n->onconflict = PG_REPLACE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 22455 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 210: /* opt_secret_name: %empty  */
#line 40 "third_party/libpg_query/grammar/statements/create_secret.y"
                    { (yyval.str) = NULL; }
#line 22461 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 211: /* opt_secret_name: ColId  */
#line 41 "third_party/libpg_query/grammar/statements/create_secret.y"
                { (yyval.str) = (yyvsp[0].str); }
#line 22467 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 212: /* opt_persist: %empty  */
#line 45 "third_party/libpg_query/grammar/statements/create_secret.y"
                                                    { (yyval.str) = pstrdup("default"); }
#line 22473 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 213: /* opt_persist: TEMPORARY  */
#line 46 "third_party/libpg_query/grammar/statements/create_secret.y"
                                                    { (yyval.str) = pstrdup("temporary"); }
#line 22479 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 214: /* opt_persist: PERSISTENT  */
#line 47 "third_party/libpg_query/grammar/statements/create_secret.y"
                                                    { (yyval.str) = pstrdup("persistent"); }
#line 22485 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 215: /* opt_storage_specifier: %empty  */
#line 51 "third_party/libpg_query/grammar/statements/create_secret.y"
                                                    { (yyval.str) = pstrdup(""); }
#line 22491 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 216: /* opt_storage_specifier: IN_P IDENT  */
#line 52 "third_party/libpg_query/grammar/statements/create_secret.y"
                                                    { (yyval.str) = (yyvsp[0].str); }
#line 22497 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 217: /* ExecuteStmt: EXECUTE name execute_param_clause  */
#line 8 "third_party/libpg_query/grammar/statements/execute.y"
                                {
					PGExecuteStmt *n = makeNode(PGExecuteStmt);
					n->name = (yyvsp[-1].str);
					n->params = (yyvsp[0].list);
					(yyval.node) = (PGNode *) n;
				}
#line 22508 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 218: /* ExecuteStmt: CREATE_P OptTemp TABLE create_as_target AS EXECUTE name execute_param_clause opt_with_data  */
#line 16 "third_party/libpg_query/grammar/statements/execute.y"
                                {
					PGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);
					PGExecuteStmt *n = makeNode(PGExecuteStmt);
					n->name = (yyvsp[-2].str);
					n->params = (yyvsp[-1].list);
					ctas->query = (PGNode *) n;
					ctas->into = (yyvsp[-5].into);
					ctas->relkind = PG_OBJECT_TABLE;
					ctas->is_select_into = false;
					ctas->onconflict = PG_ERROR_ON_CONFLICT;
					/* cram additional flags into the PGIntoClause */
					(yyvsp[-5].into)->rel->relpersistence = (yyvsp[-7].ival);
					(yyvsp[-5].into)->skipData = !((yyvsp[0].boolean));
					(yyval.node) = (PGNode *) ctas;
				}
#line 22528 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 219: /* ExecuteStmt: CREATE_P OptTemp TABLE IF_P NOT EXISTS create_as_target AS EXECUTE name execute_param_clause opt_with_data  */
#line 33 "third_party/libpg_query/grammar/statements/execute.y"
                                {
					PGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);
					PGExecuteStmt *n = makeNode(PGExecuteStmt);
					n->name = (yyvsp[-2].str);
					n->params = (yyvsp[-1].list);
					ctas->query = (PGNode *) n;
					ctas->into = (yyvsp[-5].into);
					ctas->relkind = PG_OBJECT_TABLE;
					ctas->is_select_into = false;
					ctas->onconflict = PG_IGNORE_ON_CONFLICT;
					/* cram additional flags into the PGIntoClause */
					(yyvsp[-5].into)->rel->relpersistence = (yyvsp[-10].ival);
					(yyvsp[-5].into)->skipData = !((yyvsp[0].boolean));
					(yyval.node) = (PGNode *) ctas;
				}
#line 22548 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 220: /* execute_param_expr: a_expr  */
#line 52 "third_party/libpg_query/grammar/statements/execute.y"
                                {
					(yyval.node) = (yyvsp[0].node);
				}
#line 22556 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 221: /* execute_param_expr: param_name COLON_EQUALS a_expr  */
#line 56 "third_party/libpg_query/grammar/statements/execute.y"
                                {
					PGNamedArgExpr *na = makeNode(PGNamedArgExpr);
					na->name = (yyvsp[-2].str);
					na->arg = (PGExpr *) (yyvsp[0].node);
					na->argnumber = -1;		/* until determined */
					na->location = (yylsp[-2]);
					(yyval.node) = (PGNode *) na;
				}
#line 22569 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 222: /* execute_param_list: execute_param_expr  */
#line 66 "third_party/libpg_query/grammar/statements/execute.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 22577 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 223: /* execute_param_list: execute_param_list ',' execute_param_expr  */
#line 70 "third_party/libpg_query/grammar/statements/execute.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 22585 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 224: /* execute_param_clause: '(' execute_param_list ')'  */
#line 75 "third_party/libpg_query/grammar/statements/execute.y"
                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 22591 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 225: /* execute_param_clause: %empty  */
#line 76 "third_party/libpg_query/grammar/statements/execute.y"
                                                                                        { (yyval.list) = NIL; }
#line 22597 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 226: /* AlterSeqStmt: ALTER SEQUENCE qualified_name SeqOptList  */
#line 10 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					PGAlterSeqStmt *n = makeNode(PGAlterSeqStmt);
					n->sequence = (yyvsp[-1].range);
					n->options = (yyvsp[0].list);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 22609 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 227: /* AlterSeqStmt: ALTER SEQUENCE IF_P EXISTS qualified_name SeqOptList  */
#line 18 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					PGAlterSeqStmt *n = makeNode(PGAlterSeqStmt);
					n->sequence = (yyvsp[-1].range);
					n->options = (yyvsp[0].list);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 22621 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 228: /* SeqOptList: SeqOptElem  */
#line 29 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                { (yyval.list) = list_make1((yyvsp[0].defelt)); }
#line 22627 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 229: /* SeqOptList: SeqOptList SeqOptElem  */
#line 30 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].defelt)); }
#line 22633 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 230: /* opt_with: WITH  */
#line 34 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                        {}
#line 22639 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 231: /* opt_with: WITH_LA  */
#line 35 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                                {}
#line 22645 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 232: /* opt_with: %empty  */
#line 36 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                                {}
#line 22651 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 233: /* NumericOnly: FCONST  */
#line 41 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                        { (yyval.value) = makeFloat((yyvsp[0].str)); }
#line 22657 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 234: /* NumericOnly: '+' FCONST  */
#line 42 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                { (yyval.value) = makeFloat((yyvsp[0].str)); }
#line 22663 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 235: /* NumericOnly: '-' FCONST  */
#line 44 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.value) = makeFloat((yyvsp[0].str));
					doNegateFloat((yyval.value));
				}
#line 22672 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 236: /* NumericOnly: SignedIconst  */
#line 48 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                { (yyval.value) = makeInteger((yyvsp[0].ival)); }
#line 22678 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 237: /* SeqOptElem: AS SimpleTypename  */
#line 53 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("as", (PGNode *)(yyvsp[0].typnam), (yylsp[-1]));
				}
#line 22686 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 238: /* SeqOptElem: CACHE NumericOnly  */
#line 57 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("cache", (PGNode *)(yyvsp[0].value), (yylsp[-1]));
				}
#line 22694 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 239: /* SeqOptElem: CYCLE  */
#line 61 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("cycle", (PGNode *)makeInteger(true), (yylsp[0]));
				}
#line 22702 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 240: /* SeqOptElem: NO CYCLE  */
#line 65 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("cycle", (PGNode *)makeInteger(false), (yylsp[-1]));
				}
#line 22710 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 241: /* SeqOptElem: INCREMENT opt_by NumericOnly  */
#line 69 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("increment", (PGNode *)(yyvsp[0].value), (yylsp[-2]));
				}
#line 22718 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 242: /* SeqOptElem: MAXVALUE NumericOnly  */
#line 73 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("maxvalue", (PGNode *)(yyvsp[0].value), (yylsp[-1]));
				}
#line 22726 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 243: /* SeqOptElem: MINVALUE NumericOnly  */
#line 77 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("minvalue", (PGNode *)(yyvsp[0].value), (yylsp[-1]));
				}
#line 22734 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 244: /* SeqOptElem: NO MAXVALUE  */
#line 81 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("maxvalue", NULL, (yylsp[-1]));
				}
#line 22742 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 245: /* SeqOptElem: NO MINVALUE  */
#line 85 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("minvalue", NULL, (yylsp[-1]));
				}
#line 22750 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 246: /* SeqOptElem: OWNED BY any_name  */
#line 89 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("owned_by", (PGNode *)(yyvsp[0].list), (yylsp[-2]));
				}
#line 22758 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 247: /* SeqOptElem: SEQUENCE NAME_P any_name  */
#line 93 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					/* not documented, only used by pg_dump */
					(yyval.defelt) = makeDefElem("sequence_name", (PGNode *)(yyvsp[0].list), (yylsp[-2]));
				}
#line 22767 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 248: /* SeqOptElem: START opt_with NumericOnly  */
#line 98 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("start", (PGNode *)(yyvsp[0].value), (yylsp[-2]));
				}
#line 22775 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 249: /* SeqOptElem: RESTART  */
#line 102 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("restart", NULL, (yylsp[0]));
				}
#line 22783 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 250: /* SeqOptElem: RESTART opt_with NumericOnly  */
#line 106 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("restart", (PGNode *)(yyvsp[0].value), (yylsp[-2]));
				}
#line 22791 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 251: /* opt_by: BY  */
#line 112 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                {}
#line 22797 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 252: /* opt_by: %empty  */
#line 113 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                        {}
#line 22803 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 253: /* SignedIconst: Iconst  */
#line 117 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                { (yyval.ival) = (yyvsp[0].ival); }
#line 22809 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 254: /* SignedIconst: '+' Iconst  */
#line 118 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                        { (yyval.ival) = + (yyvsp[0].ival); }
#line 22815 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 255: /* SignedIconst: '-' Iconst  */
#line 119 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                        { (yyval.ival) = - (yyvsp[0].ival); }
#line 22821 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 256: /* DropSecretStmt: DROP opt_persist SECRET ColId opt_storage_drop_specifier  */
#line 8 "third_party/libpg_query/grammar/statements/drop_secret.y"
                                {
					PGDropSecretStmt *n = makeNode(PGDropSecretStmt);
					n->persist_type = (yyvsp[-3].str);
					n->secret_name = (yyvsp[-1].str);
					n->secret_storage = (yyvsp[0].str);
					n->missing_ok  = false;
					(yyval.node) = (PGNode *)n;
				}
#line 22834 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 257: /* DropSecretStmt: DROP opt_persist SECRET IF_P EXISTS ColId opt_storage_drop_specifier  */
#line 17 "third_party/libpg_query/grammar/statements/drop_secret.y"
                {
                    PGDropSecretStmt *n = makeNode(PGDropSecretStmt);
                    n->persist_type = (yyvsp[-5].str);
                    n->secret_name = (yyvsp[-1].str);
                    n->secret_storage = (yyvsp[0].str);
                    n->missing_ok  = true;
                    (yyval.node) = (PGNode *)n;
                }
#line 22847 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 258: /* opt_storage_drop_specifier: %empty  */
#line 28 "third_party/libpg_query/grammar/statements/drop_secret.y"
                                                    { (yyval.str) = pstrdup(""); }
#line 22853 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 259: /* opt_storage_drop_specifier: FROM IDENT  */
#line 29 "third_party/libpg_query/grammar/statements/drop_secret.y"
                                                    { (yyval.str) = (yyvsp[0].str); }
#line 22859 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 260: /* TransactionStmt: ABORT_P opt_transaction  */
#line 3 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_ROLLBACK;
					n->options = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 22870 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 261: /* TransactionStmt: BEGIN_P opt_transaction  */
#line 10 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_BEGIN;
					(yyval.node) = (PGNode *)n;
				}
#line 22880 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 262: /* TransactionStmt: START opt_transaction  */
#line 16 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_START;
					(yyval.node) = (PGNode *)n;
				}
#line 22890 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 263: /* TransactionStmt: COMMIT opt_transaction  */
#line 22 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_COMMIT;
					n->options = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 22901 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 264: /* TransactionStmt: END_P opt_transaction  */
#line 29 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_COMMIT;
					n->options = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 22912 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 265: /* TransactionStmt: ROLLBACK opt_transaction  */
#line 36 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_ROLLBACK;
					n->options = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 22923 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 266: /* opt_transaction: WORK  */
#line 45 "third_party/libpg_query/grammar/statements/transaction.y"
                                                                                {}
#line 22929 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 267: /* opt_transaction: TRANSACTION  */
#line 46 "third_party/libpg_query/grammar/statements/transaction.y"
                                                                                        {}
#line 22935 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 268: /* opt_transaction: %empty  */
#line 47 "third_party/libpg_query/grammar/statements/transaction.y"
                                                                                                {}
#line 22941 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 269: /* UseStmt: USE_P qualified_name  */
#line 3 "third_party/libpg_query/grammar/statements/use.y"
                                {
					PGUseStmt *n = makeNode(PGUseStmt);
					n->name = (yyvsp[0].range);
					(yyval.node) = (PGNode *) n;
				}
#line 22951 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 270: /* PGQ_IDENT: IDENT  */
#line 40 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 22957 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 271: /* PGQ_IDENT: unreserved_keyword  */
#line 41 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 22963 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 272: /* PGQ_IDENT: pgq_col_name_keyword  */
#line 42 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                                        { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 22969 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 273: /* DropPropertyGraphStmt: DROP PROPERTY GRAPH qualified_name opt_drop_behavior  */
#line 51 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGDropPropertyGraphStmt *n = makeNode(PGDropPropertyGraphStmt);
				n->name = (yyvsp[-1].range);
				n->behavior = (yyvsp[0].dbehavior);
				(yyval.node) = (PGNode *)n;
			}
#line 22980 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 278: /* EdgeTablesClauseOptional: EdgeOrRelationship TABLES '(' EdgeTableDefinition EdgeTableDefinitionList ')'  */
#line 76 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                                    { (yyval.list) = (yyvsp[-1].list)?lappend((yyvsp[-1].list),(yyvsp[-2].node)):list_make1((yyvsp[-2].node)); }
#line 22986 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 279: /* EdgeTablesClauseOptional: %empty  */
#line 78 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                                    { (yyval.list) = NULL; }
#line 22992 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 280: /* CreatePropertyGraphStmt: CREATE_P PROPERTY GRAPH qualified_name VertexOrNode TABLES '(' VertexTableDefinition VertexTableDefinitionList ')' EdgeTablesClauseOptional  */
#line 85 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGCreatePropertyGraphStmt *n = makeNode(PGCreatePropertyGraphStmt);
				n->name = (yyvsp[-7].range);
				n->vertex_tables = (yyvsp[-2].list)?lappend((yyvsp[-2].list),(yyvsp[-3].node)):list_make1((yyvsp[-3].node));
				n->edge_tables = (yyvsp[0].list);
				n->onconflict = PG_ERROR_ON_CONFLICT;
				(yyval.node) = (PGNode *)n;
			}
#line 23005 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 281: /* CreatePropertyGraphStmt: CREATE_P OR REPLACE PROPERTY GRAPH qualified_name VertexOrNode TABLES '(' VertexTableDefinition VertexTableDefinitionList ')' EdgeTablesClauseOptional  */
#line 98 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
        				PGCreatePropertyGraphStmt *n = makeNode(PGCreatePropertyGraphStmt);
        				n->name = (yyvsp[-7].range);
        				n->vertex_tables = (yyvsp[-2].list)?lappend((yyvsp[-2].list),(yyvsp[-3].node)):list_make1((yyvsp[-3].node));
        				n->edge_tables = (yyvsp[0].list);
        				n->onconflict = PG_REPLACE_ON_CONFLICT;
        				(yyval.node) = (PGNode *)n;
        			}
#line 23018 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 282: /* VertexTableDefinitionList: ',' VertexTableDefinition VertexTableDefinitionList  */
#line 111 "third_party/libpg_query/grammar/statements/pgq.y"
                                                { (yyval.list) = (yyvsp[0].list)?lappend((yyvsp[0].list),(yyvsp[-1].node)):list_make1((yyvsp[-1].node)); }
#line 23024 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 283: /* VertexTableDefinitionList: %empty  */
#line 113 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.list) = NULL; }
#line 23030 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 284: /* KeySpecification: '(' name_list ')'  */
#line 117 "third_party/libpg_query/grammar/statements/pgq.y"
                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 23036 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 285: /* KeyDefinition: KEY KeySpecification  */
#line 121 "third_party/libpg_query/grammar/statements/pgq.y"
                                                { (yyval.list) = (yyvsp[0].list); }
#line 23042 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 286: /* KeyReference: KeyDefinition REFERENCES  */
#line 125 "third_party/libpg_query/grammar/statements/pgq.y"
                                                { (yyval.list) = (yyvsp[-1].list); }
#line 23048 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 287: /* LabelList: PGQ_IDENT  */
#line 129 "third_party/libpg_query/grammar/statements/pgq.y"
                                    { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 23054 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 288: /* LabelList: LabelList ',' PGQ_IDENT  */
#line 130 "third_party/libpg_query/grammar/statements/pgq.y"
                                    { (yyval.list) = lappend((yyvsp[-2].list), makeString((yyvsp[0].str))); }
#line 23060 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 289: /* LabelOptional: LABEL PGQ_IDENT  */
#line 134 "third_party/libpg_query/grammar/statements/pgq.y"
                    { (yyval.str) = (yyvsp[0].str); }
#line 23066 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 290: /* LabelOptional: %empty  */
#line 135 "third_party/libpg_query/grammar/statements/pgq.y"
                    { (yyval.str) = NULL; }
#line 23072 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 291: /* Discriminator: IN_P qualified_name '(' LabelList ')'  */
#line 140 "third_party/libpg_query/grammar/statements/pgq.y"
                        { 
				PGPropertyGraphTable *n = makeNode(PGPropertyGraphTable);
				n->discriminator = (yyvsp[-3].range); /* a BIGINT column with 64 bits to set detailed label membership */
				n->labels = (yyvsp[-1].list); /* there is a list of up to 64 labels */
				(yyval.node) = (PGNode*) n;
			}
#line 23083 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 292: /* Discriminator: %empty  */
#line 148 "third_party/libpg_query/grammar/statements/pgq.y"
                        { 
				PGPropertyGraphTable *n = makeNode(PGPropertyGraphTable);
				n->discriminator = NULL; /* no discriminator */
				n->labels = NULL; /* no list, just the single staring PGQ_IDENT */
				(yyval.node) = (PGNode*) n;
			}
#line 23094 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 293: /* VertexTableDefinition: QualifiednameOptionalAs PropertiesClause LabelOptional Discriminator  */
#line 159 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGPropertyGraphTable *n = (PGPropertyGraphTable*) (yyvsp[0].node);
				n->table = (yyvsp[-3].list);
				n->properties = (yyvsp[-2].list);
				/* Xth label in list is set iff discriminator Xth-bit==1 */
				if (n->labels) n->labels = lappend(n->labels,makeString((yyvsp[-1].str)));
				else n->labels = list_make1(makeString((yyvsp[-1].str)));
				n->is_vertex_table = true;
				(yyval.node) = (PGNode *) n;
			}
#line 23109 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 294: /* EdgeTableDefinitionList: ',' EdgeTableDefinition EdgeTableDefinitionList  */
#line 173 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                        { (yyval.list) = (yyvsp[0].list)?lappend((yyvsp[0].list),(yyvsp[-1].node)):list_make1((yyvsp[-1].node)); }
#line 23115 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 295: /* EdgeTableDefinitionList: %empty  */
#line 175 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.list) = NULL; }
#line 23121 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 296: /* EdgeTableDefinition: QualifiednameOptionalAs SOURCE KeyReference qualified_name KeySpecification DESTINATION KeyReference qualified_name KeySpecification PropertiesClause LabelOptional Discriminator  */
#line 183 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGPropertyGraphTable *n = (PGPropertyGraphTable*) (yyvsp[0].node);
				n->table = (yyvsp[-11].list);
				n->is_vertex_table = false;
				n->src_fk = (yyvsp[-9].list);
				n->src_name = (yyvsp[-8].range);
				n->src_pk = (yyvsp[-7].list);
				n->dst_fk = (yyvsp[-5].list);
				n->dst_name = (yyvsp[-4].range);
				n->dst_pk = (yyvsp[-3].list);
				n->properties = (yyvsp[-2].list);
				/* Xth label in list is set iff discriminator Xth-bit==1 */
				if (n->labels) n->labels = lappend(n->labels,makeString((yyvsp[-1].str)));
				else n->labels = list_make1(makeString((yyvsp[-1].str)));
				(yyval.node) = (PGNode *) n;
			}
#line 23142 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 299: /* IdentOptionalAs: PGQ_IDENT  */
#line 208 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                    { (yyval.list) = list_make2(makeString((yyvsp[0].str)), makeString((yyvsp[0].str))); }
#line 23148 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 300: /* IdentOptionalAs: PGQ_IDENT AS PGQ_IDENT  */
#line 210 "third_party/libpg_query/grammar/statements/pgq.y"
                                                        { (yyval.list) = list_make2(makeString((yyvsp[-2].str)), makeString((yyvsp[0].str))); }
#line 23154 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 301: /* QualifiednameOptionalAs: qualified_name  */
#line 214 "third_party/libpg_query/grammar/statements/pgq.y"
                                        { (yyval.list) = list_make2((yyvsp[0].range), makeString("")); }
#line 23160 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 302: /* QualifiednameOptionalAs: qualified_name AS PGQ_IDENT  */
#line 216 "third_party/libpg_query/grammar/statements/pgq.y"
                                        { (yyval.list) = list_make2((yyvsp[-2].range), makeString((yyvsp[0].str))); }
#line 23166 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 303: /* PropertiesList: IdentOptionalAs  */
#line 220 "third_party/libpg_query/grammar/statements/pgq.y"
                                                { (yyval.list) = list_make1((yyvsp[0].list)); }
#line 23172 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 304: /* PropertiesList: PropertiesList ',' IdentOptionalAs  */
#line 223 "third_party/libpg_query/grammar/statements/pgq.y"
                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].list)); }
#line 23178 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 305: /* ExceptOptional: EXCEPT '(' PropertiesList ')'  */
#line 228 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 23184 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 306: /* ExceptOptional: %empty  */
#line 230 "third_party/libpg_query/grammar/statements/pgq.y"
                                                        { (yyval.list) = NULL; }
#line 23190 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 307: /* PropertiesSpec: AreOptional ALL COLUMNS ExceptOptional  */
#line 235 "third_party/libpg_query/grammar/statements/pgq.y"
                        { 
				(yyval.list) = list_make1(list_make2(makeString("*"), makeString("*")));
				if ((yyvsp[0].list)) (yyval.list) = list_concat((yyval.list),(yyvsp[0].list)); 
			}
#line 23199 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 308: /* PropertiesSpec: '(' PropertiesList ')'  */
#line 240 "third_party/libpg_query/grammar/statements/pgq.y"
                                        { (yyval.list) = (yyvsp[-1].list); }
#line 23205 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 309: /* PropertiesClause: NO PROPERTIES  */
#line 244 "third_party/libpg_query/grammar/statements/pgq.y"
                                                { (yyval.list) = NULL; }
#line 23211 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 310: /* PropertiesClause: PROPERTIES PropertiesSpec  */
#line 247 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.list) = (yyvsp[0].list); }
#line 23217 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 311: /* PropertiesClause: %empty  */
#line 249 "third_party/libpg_query/grammar/statements/pgq.y"
                                                        { (yyval.list) = list_make1(list_make2(makeString("*"), makeString("*"))); }
#line 23223 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 312: /* GraphTableWhereOptional: WHERE pgq_expr  */
#line 258 "third_party/libpg_query/grammar/statements/pgq.y"
                                                { (yyval.node) = (yyvsp[0].node); }
#line 23229 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 313: /* GraphTableWhereOptional: %empty  */
#line 260 "third_party/libpg_query/grammar/statements/pgq.y"
                                                        { (yyval.node) = NULL; }
#line 23235 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 314: /* GraphTableNameOptional: qualified_name  */
#line 264 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.range) = (yyvsp[0].range); }
#line 23241 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 315: /* GraphTableNameOptional: %empty  */
#line 266 "third_party/libpg_query/grammar/statements/pgq.y"
                                                { (yyval.range) = NULL; }
#line 23247 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 316: /* ColumnsOptional: COLUMNS '(' target_list_opt_comma ')'  */
#line 270 "third_party/libpg_query/grammar/statements/pgq.y"
                                              { (yyval.list) = (yyvsp[-1].list); }
#line 23253 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 317: /* ColumnsOptional: %empty  */
#line 273 "third_party/libpg_query/grammar/statements/pgq.y"
            {
                PGAStar *star = makeNode(PGAStar);
                (yyval.list) = list_make1(star);
            }
#line 23262 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 318: /* GraphTableStmt: '(' PGQ_IDENT MATCH PathPatternList KeepOptional GraphTableWhereOptional ColumnsOptional ')' GraphTableNameOptional  */
#line 283 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGMatchClause *n = makeNode(PGMatchClause);
				n->pg_name = (yyvsp[-7].str);
				n->paths = (yyvsp[-5].list);
				if ((yyvsp[-4].node)) {
					/* we massage away 'keep' functionality immediately */
					PGPathPattern *keep = (PGPathPattern*) (yyvsp[-4].node);
					PGListCell *list = list_head(n->paths);
					while(list) {
						PGPathPattern *p = (PGPathPattern*) lfirst(list);
						PGList *backup = p->path;
						*p = *keep; /* copy path spec into all paths */
						p->path = backup; /* restore */
						list = lnext(list);
					}
				}
				n->where_clause = (yyvsp[-3].node);
				n->columns = (yyvsp[-2].list);
				n->graph_table = (yyvsp[0].range);
				(yyval.node) = (PGNode *) n;
			}
#line 23288 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 319: /* KeepOptional: KEEP PathPrefix  */
#line 318 "third_party/libpg_query/grammar/statements/pgq.y"
                                                        { (yyval.node) = (yyvsp[0].node); }
#line 23294 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 320: /* KeepOptional: %empty  */
#line 320 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.node) = NULL; }
#line 23300 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 324: /* GroupOrGroupsOptional: GROUP_P  */
#line 328 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.ival) = 1; }
#line 23306 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 325: /* GroupOrGroupsOptional: GROUPS  */
#line 330 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.ival) = 1; }
#line 23312 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 326: /* GroupOrGroupsOptional: %empty  */
#line 332 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.ival) = 0; }
#line 23318 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 327: /* PathVariableOptional: PGQ_IDENT '='  */
#line 336 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.keyword) = (yyvsp[-1].str); }
#line 23324 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 328: /* PathVariableOptional: %empty  */
#line 338 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.keyword) = NULL;}
#line 23330 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 329: /* PathModeOptional: WALK PathOrPathsOptional  */
#line 342 "third_party/libpg_query/grammar/statements/pgq.y"
                                                { (yyval.ival) = PG_PATHMODE_WALK; }
#line 23336 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 330: /* PathModeOptional: TRAIL PathOrPathsOptional  */
#line 344 "third_party/libpg_query/grammar/statements/pgq.y"
                                                { (yyval.ival) = PG_PATHMODE_TRAIL; }
#line 23342 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 331: /* PathModeOptional: SIMPLE PathOrPathsOptional  */
#line 346 "third_party/libpg_query/grammar/statements/pgq.y"
                                                { (yyval.ival) = PG_PATHMODE_SIMPLE; }
#line 23348 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 332: /* PathModeOptional: ACYCLIC PathOrPathsOptional  */
#line 348 "third_party/libpg_query/grammar/statements/pgq.y"
                                                { (yyval.ival) = PG_PATHMODE_ACYCLIC; }
#line 23354 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 333: /* PathModeOptional: PathOrPathsOptional  */
#line 350 "third_party/libpg_query/grammar/statements/pgq.y"
                                                        { (yyval.ival) = PG_PATHMODE_WALK; }
#line 23360 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 334: /* TopKOptional: ICONST  */
#line 354 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.ival) = (yyvsp[0].ival); }
#line 23366 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 335: /* TopKOptional: %empty  */
#line 356 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.ival) = 0; }
#line 23372 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 336: /* PathPrefix: ANY SHORTEST PathModeOptional  */
#line 361 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGPathPattern *n = makeNode(PGPathPattern);
				n->path = NULL;
				n->all = false;
				n->group = false;
				n->shortest = true;
				n->mode = (PGPathMode) (yyvsp[0].ival);
				n->topk = 1;
				(yyval.node) = (PGNode*) n;
			}
#line 23387 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 337: /* PathPrefix: SHORTEST ICONST PathModeOptional GroupOrGroupsOptional  */
#line 373 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGPathPattern *n = makeNode(PGPathPattern);
				n->path = NULL;
				n->all = false;
				n->group = (yyvsp[0].ival);
				n->shortest = true;
				n->mode = (PGPathMode) (yyvsp[-1].ival);
				n->topk = (yyvsp[-2].ival);
				(yyval.node) = (PGNode*) n;
			}
#line 23402 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 338: /* PathPrefix: ALL SHORTEST PathModeOptional  */
#line 385 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGPathPattern *n = makeNode(PGPathPattern);
				n->path = NULL;
				n->all = true;
				n->group = false;
				n->shortest = true;
				n->mode = (PGPathMode) (yyvsp[0].ival);
				n->topk = 0;
				(yyval.node) = (PGNode*) n;
			}
#line 23417 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 339: /* PathPrefix: ALL PathModeOptional  */
#line 397 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGPathPattern *n = makeNode(PGPathPattern);
				n->path = NULL;
				n->all = true;
				n->group = false;
				n->shortest = false;
				n->mode = (PGPathMode) (yyvsp[0].ival);
				n->topk = 0;
				(yyval.node) = (PGNode*) n;
			}
#line 23432 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 340: /* PathPrefix: ANY TopKOptional PathModeOptional  */
#line 409 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGPathPattern *n = makeNode(PGPathPattern);
				n->path = NULL;
				n->all = false;
				n->group = false;
				n->shortest = false;
				n->mode = (PGPathMode) (yyvsp[0].ival);
				n->topk = (yyvsp[-1].ival);
				(yyval.node) = (PGNode*) n;
			}
#line 23447 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 341: /* PathPrefix: %empty  */
#line 421 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGPathPattern *n = makeNode(PGPathPattern);
				n->path = NULL;
				n->all = true;
				n->group = false;
				n->shortest = false;
				n->mode = PG_PATHMODE_WALK;
				n->topk = 0;
				(yyval.node) = (PGNode*) n;
			}
#line 23462 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 342: /* PathPatternList: PathPattern  */
#line 435 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 23468 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 343: /* PathPatternList: PathPatternList ',' PathPattern  */
#line 438 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 23474 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 344: /* PathPattern: PathVariableOptional PathPrefix PathConcatenation  */
#line 443 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGPathPattern *n = (PGPathPattern*) (yyvsp[-1].node);
				PGList *l = (PGList *) (yyvsp[0].list);
				PGSubPath *p = (PGSubPath *) lfirst(list_head(l));

				(yyval.node) = (PGNode*) n;
				if ((yyvsp[-2].keyword) == NULL) {
					n->path = (yyvsp[0].list);
				} else if (list_length(l)==1 && p->type==T_PGSubPath && !p->path_var)  {
					p->path_var = (yyvsp[-2].keyword);
					(yyval.node) = (PGNode*) p;
				} else {
					/* generate a named subpath because of the variable */
					p = makeNode(PGSubPath);
					p->mode = n->mode;
					p->lower = p->upper = p->single_bind = 1;
					p->path_var = (yyvsp[-2].keyword);
					p->path = (yyvsp[0].list);
					n->path = list_make1(p);
				}
			}
#line 23500 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 345: /* PatternUnion: '|'  */
#line 467 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                        { (yyval.ival) = 0; }
#line 23506 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 346: /* PatternUnion: '|' '+' '|'  */
#line 469 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.ival) = 1; }
#line 23512 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 347: /* KleeneQuantifierOptional: ICONST  */
#line 473 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.ival) = (yyvsp[0].ival); }
#line 23518 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 348: /* KleeneQuantifierOptional: %empty  */
#line 475 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.ival) = -1; }
#line 23524 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 349: /* KleeneOptional: '*'  */
#line 481 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGSubPath *n = makeNode(PGSubPath);
				n->single_bind = 0;
				n->lower = 0;
				n->upper = (1<<30);
				(yyval.node) = (PGNode*) n;
			}
#line 23536 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 350: /* KleeneOptional: '+'  */
#line 490 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGSubPath *n = makeNode(PGSubPath);
				n->single_bind = 0;
				n->lower = 1;
				n->upper = (1<<30);
				(yyval.node) = (PGNode*) n;
			}
#line 23548 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 351: /* KleeneOptional: '?'  */
#line 499 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGSubPath *n = makeNode(PGSubPath);
				n->single_bind = 1;
				n->lower = 0;
				n->upper = 1;
				(yyval.node) = (PGNode*) n;
			}
#line 23560 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 352: /* KleeneOptional: '{' KleeneQuantifierOptional ',' KleeneQuantifierOptional '}'  */
#line 508 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGSubPath *n = makeNode(PGSubPath);
				n->single_bind = 0;
				n->lower = ((yyvsp[-3].ival)>=0)?(yyvsp[-3].ival):0;
				n->upper = ((yyvsp[-1].ival)>=0)?(yyvsp[-1].ival):(1<<30);
				(yyval.node) = (PGNode*) n;
			}
#line 23572 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 353: /* KleeneOptional: %empty  */
#line 517 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGSubPath *n = makeNode(PGSubPath);
				n->single_bind = 1;
				n->lower = 1;
				n->upper = 1;
				(yyval.node) = (PGNode*) n;
			}
#line 23584 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 354: /* CostNum: ICONST  */
#line 527 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.ival) = (yyvsp[0].ival); }
#line 23590 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 355: /* CostNum: FCONST  */
#line 529 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.ival) = atof((yyvsp[0].str)); }
#line 23596 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 356: /* CostDefault: DEFAULT CostNum  */
#line 533 "third_party/libpg_query/grammar/statements/pgq.y"
                                                        { (yyval.ival) = (yyvsp[0].ival); }
#line 23602 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 357: /* CostDefault: %empty  */
#line 535 "third_party/libpg_query/grammar/statements/pgq.y"
                                                        { (yyval.ival) = NULL; }
#line 23608 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 358: /* CostOptional: COST b_expr CostDefault  */
#line 540 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGPathInfo *n = makeNode(PGPathInfo);
				PGAConst *d = (PGAConst*) (yyvsp[0].ival);
				n->cost_expr = (yyvsp[-1].node);
				n->default_value = d?((d->val.type == T_PGInteger)?
					((double) d->val.val.ival):strtod(d->val.val.str,NULL)):1;
				(yyval.node) = (PGNode*) n;
			}
#line 23621 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 359: /* CostOptional: %empty  */
#line 550 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGPathInfo *n = makeNode(PGPathInfo);
				n->cost_expr = NULL;
				n->default_value = 1;
				(yyval.node) = (PGNode*) n;
			}
#line 23632 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 360: /* SubPath: PathVariableOptional PathModeOptional PathConcatenation GraphTableWhereOptional CostOptional  */
#line 560 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGPathInfo *n = (PGPathInfo*) (yyvsp[0].node);
				n->var_name = (yyvsp[-4].keyword);
				n->mode = (PGPathMode) (yyvsp[-3].ival);
				n->path = (yyvsp[-2].list);
				n->where_clause = (yyvsp[-1].node);
				(yyval.node) = (PGNode*) n;
			}
#line 23645 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 361: /* EnclosedSubPath: '[' SubPath ']' KleeneOptional  */
#line 572 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGSubPath *p = (PGSubPath*) (yyvsp[0].node);
				p->path = list_make1((yyvsp[-2].node));
				(yyval.node) = (PGNode*) p;
			}
#line 23655 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 362: /* PathElement: VertexPattern  */
#line 580 "third_party/libpg_query/grammar/statements/pgq.y"
                                                        { (yyval.list) = (yyvsp[0].list); }
#line 23661 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 363: /* PathElement: EdgePattern  */
#line 582 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.list) = (yyvsp[0].list); }
#line 23667 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 364: /* PathSequence: EnclosedSubPath PathSequence  */
#line 587 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGSubPath *n = (PGSubPath*) (yyvsp[-1].node);
				PGPathInfo *i = (PGPathInfo*) n->path;
				PGList* p = (PGList*) i->path;

				if (i->var_name == NULL && i->mode <= PG_PATHMODE_WALK &&
					i->where_clause == NULL && i->cost_expr == NULL)
				{
					/* there is no need for a SubPath */
					(yyval.list) = (yyvsp[0].list)?list_concat(p,(yyvsp[0].list)):p;
				} else {
        			n->path_var = i->var_name;
					n->mode = i->mode;
					n->path = p;
					n->where_clause = i->where_clause;
					n->cost_expr = i->cost_expr;
					n->default_value = i->default_value;
					(yyval.list) = list_make1(n);
					if ((yyvsp[0].list)) (yyval.list) = list_concat((yyval.list),(yyvsp[0].list));
				}
			}
#line 23693 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 365: /* PathSequence: PathElement PathSequence  */
#line 609 "third_party/libpg_query/grammar/statements/pgq.y"
                                                { (yyval.list) = (yyvsp[-1].list)?list_concat((yyvsp[-1].list),(yyvsp[0].list)):(yyvsp[0].list); }
#line 23699 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 366: /* PathSequence: %empty  */
#line 611 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.list) = NULL; }
#line 23705 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 367: /* PathConcatenation: PathSequence  */
#line 615 "third_party/libpg_query/grammar/statements/pgq.y"
                                                        { (yyval.list) = (yyvsp[0].list); }
#line 23711 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 368: /* PathConcatenation: PathSequence PatternUnion PathSequence  */
#line 618 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGPathUnion *n = makeNode(PGPathUnion);
				n->multiset = (yyvsp[-1].ival);
				n->path1 = (yyvsp[-2].list);
				n->path2 = (yyvsp[0].list);
				(yyval.list) = list_make1(n);
			}
#line 23723 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 369: /* OrLabelExpression: LabelExpression  */
#line 628 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 23729 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 370: /* OrLabelExpression: LabelExpression '|' OrLabelExpression  */
#line 631 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGLabelTest *n = makeNode(PGLabelTest);
				n->name = "|";
				n->left = (PGLabelTest*) (yyvsp[-2].node);
				n->right = (PGLabelTest*) (yyvsp[0].node);
				(yyval.node) = (PGNode*) n;
			}
#line 23741 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 371: /* AndLabelExpression: LabelExpression  */
#line 641 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 23747 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 372: /* AndLabelExpression: LabelExpression '&' AndLabelExpression  */
#line 644 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGLabelTest *n = makeNode(PGLabelTest);
				n->name = "|";
				n->left = (PGLabelTest*) (yyvsp[-2].node);
				n->right = (PGLabelTest*) (yyvsp[0].node);
				(yyval.node) = (PGNode*) n;
			}
#line 23759 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 373: /* ComposedLabelExpression: LabelExpression  */
#line 654 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 23765 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 374: /* ComposedLabelExpression: LabelExpression '|' OrLabelExpression  */
#line 657 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGLabelTest *n = makeNode(PGLabelTest);
				n->name = "|";
				n->left = (PGLabelTest*) (yyvsp[-2].node);
				n->right = (PGLabelTest*) (yyvsp[0].node);
				(yyval.node) = (PGNode*) n;
			}
#line 23777 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 375: /* ComposedLabelExpression: LabelExpression '&' AndLabelExpression  */
#line 666 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGLabelTest *n = makeNode(PGLabelTest);
				n->name = "&";
				n->left = (PGLabelTest*) (yyvsp[-2].node);
				n->right = (PGLabelTest*) (yyvsp[0].node);
				(yyval.node) = (PGNode*) n;
			}
#line 23789 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 376: /* LabelExpression: PGQ_IDENT  */
#line 677 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGLabelTest *n = makeNode(PGLabelTest);
				n->name = (yyvsp[0].str);
				n->left = n->right = NULL;
				(yyval.node) = (PGNode*) n;
			}
#line 23800 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 377: /* LabelExpression: '!' LabelExpression  */
#line 685 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGLabelTest *n = makeNode(PGLabelTest);
				n->name = "!";
				n->left = (PGLabelTest*) (yyvsp[0].node);
				n->right = NULL;
				(yyval.node) = (PGNode*) n;
			}
#line 23812 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 378: /* LabelExpression: '(' ComposedLabelExpression ')'  */
#line 693 "third_party/libpg_query/grammar/statements/pgq.y"
                                                { (yyval.node) = (yyvsp[-1].node); }
#line 23818 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 379: /* LabelExpressionOptional: IsOrColon LabelExpression  */
#line 697 "third_party/libpg_query/grammar/statements/pgq.y"
                                                { (yyval.node) = (yyvsp[0].node); }
#line 23824 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 380: /* LabelExpressionOptional: %empty  */
#line 699 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.node) = NULL; }
#line 23830 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 383: /* ArrowRight: '-'  */
#line 711 "third_party/libpg_query/grammar/statements/pgq.y"
                                                { (yyval.str) = "-"; }
#line 23836 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 384: /* ArrowRight: '-' '>'  */
#line 713 "third_party/libpg_query/grammar/statements/pgq.y"
                                                { (yyval.str) = "->"; }
#line 23842 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 385: /* ArrowRight: LAMBDA_ARROW  */
#line 715 "third_party/libpg_query/grammar/statements/pgq.y"
                                                        { (yyval.str) = "->"; }
#line 23848 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 386: /* ArrowLeftBracket: '-' '['  */
#line 719 "third_party/libpg_query/grammar/statements/pgq.y"
                                                { (yyval.str) = "-"; }
#line 23854 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 387: /* ArrowLeftBracket: '<' '-' '['  */
#line 721 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.str) = "<-"; }
#line 23860 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 388: /* AbbreviatedEdge: '<' ArrowRight  */
#line 726 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				char* dir = (yyvsp[0].str);
				(yyval.ival) = (dir[1] == '>')?PG_MATCH_EDGE_LEFT_RIGHT:PG_MATCH_EDGE_LEFT;
			}
#line 23869 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 389: /* AbbreviatedEdge: ArrowRight  */
#line 732 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				char* dir = (yyvsp[0].str);
				(yyval.ival) = (dir[1] == '>')?PG_MATCH_EDGE_RIGHT:PG_MATCH_EDGE_ANY;
			}
#line 23878 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 390: /* VariableOptional: PGQ_IDENT  */
#line 739 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 23884 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 391: /* VariableOptional: %empty  */
#line 741 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.str) = NULL;}
#line 23890 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 392: /* FullElementSpec: VariableOptional LabelExpressionOptional GraphTableWhereOptional CostOptional  */
#line 746 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGPathInfo *n = (PGPathInfo*) (yyvsp[0].node);
				n->var_name = (yyvsp[-3].str);
				n->where_clause = (yyvsp[-1].node);
				n->label_expr = (PGLabelTest*) (yyvsp[-2].node);
				(yyval.node) = (PGNode*) n;
			}
#line 23902 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 393: /* EdgePattern: AbbreviatedEdge KleeneOptional  */
#line 757 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGSubPath *p = (PGSubPath*) (yyvsp[0].node);
				PGPathElement *n = makeNode(PGPathElement);
				n->label_expr = NULL;
				n->element_var = NULL;
				n->match_type = (PGMatchType) (yyvsp[-1].ival);
				(yyval.list) = list_make1(n);
				if (p->lower != 1 || !p->single_bind) {
					/* return a subpath consisting of one edge (element) */
					p->path = (yyval.list);
					p->path_var = NULL;
					(yyval.list) = list_make1(p);
				}
			}
#line 23921 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 394: /* EdgePattern: ArrowLeftBracket FullElementSpec ']' ArrowRight KleeneOptional  */
#line 773 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				char *left = (yyvsp[-4].str), *right = (yyvsp[-1].str);
				PGPathInfo* i = (PGPathInfo*) (yyvsp[-3].node);
				PGSubPath *p = (PGSubPath*) (yyvsp[0].node);
				PGPathElement *n = makeNode(PGPathElement);

				n->match_type =
					(right[1] == '>')?
						((left[0] == '<')?PG_MATCH_EDGE_LEFT_RIGHT:PG_MATCH_EDGE_RIGHT):
						((left[0] == '<')?PG_MATCH_EDGE_LEFT:PG_MATCH_EDGE_ANY);
				n->element_var = i->var_name;
				n->label_expr = i->label_expr;
				(yyval.list) = list_make1(n);
				if (i->where_clause || i->cost_expr || p->lower != 1 || !p->single_bind) {
					/* return a subpath consisting of one edge (element) */
					p->where_clause = i->where_clause;
					p->cost_expr = i->cost_expr;
					p->default_value = i->default_value;
					p->path = (yyval.list);
					p->path_var = NULL;
					(yyval.list) = list_make1(p);
				}
			}
#line 23949 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 395: /* VertexPattern: '(' FullElementSpec ')'  */
#line 800 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGPathElement *n = makeNode(PGPathElement);
				PGPathInfo* i = (PGPathInfo*) (yyvsp[-1].node);

				n->element_var = i->var_name;
				n->label_expr = i->label_expr;
				n->match_type = PG_MATCH_VERTEX;
				(yyval.list) = list_make1(n);
				if (i->where_clause || i->cost_expr) {
					PGSubPath *p = makeNode(PGSubPath);
					p->mode = PG_PATHMODE_NONE;
					p->lower = p->upper = p->single_bind = 1;
					p->where_clause = i->where_clause;
					p->cost_expr = i->cost_expr;
					p->default_value = i->default_value;
					p->path = (yyval.list);
					p->path_var = NULL;
					(yyval.list) = list_make1(p);
				}
			}
#line 23974 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 396: /* pgq_expr: c_expr  */
#line 832 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 23980 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 397: /* pgq_expr: pgq_expr TYPECAST Typename  */
#line 834 "third_party/libpg_query/grammar/statements/pgq.y"
                                        { (yyval.node) = makeTypeCast((yyvsp[-2].node), (yyvsp[0].typnam), 0, (yylsp[-1])); }
#line 23986 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 398: /* pgq_expr: pgq_expr COLLATE any_name  */
#line 836 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					PGCollateClause *n = makeNode(PGCollateClause);
					n->arg = (yyvsp[-2].node);
					n->collname = (yyvsp[0].list);
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *) n;
				}
#line 23998 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 399: /* pgq_expr: pgq_expr AT TIME ZONE pgq_expr  */
#line 844 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("timezone"),
											   list_make2((yyvsp[0].node), (yyvsp[-4].node)),
											   (yylsp[-3]));
				}
#line 24008 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 400: /* pgq_expr: '+' pgq_expr  */
#line 859 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", NULL, (yyvsp[0].node), (yylsp[-1])); }
#line 24014 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 401: /* pgq_expr: '-' pgq_expr  */
#line 861 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = doNegate((yyvsp[0].node), (yylsp[-1])); }
#line 24020 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 402: /* pgq_expr: pgq_expr '+' pgq_expr  */
#line 863 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 24026 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 403: /* pgq_expr: pgq_expr '-' pgq_expr  */
#line 865 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "-", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 24032 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 404: /* pgq_expr: pgq_expr '*' pgq_expr  */
#line 867 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "*", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 24038 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 405: /* pgq_expr: pgq_expr '/' pgq_expr  */
#line 869 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "/", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 24044 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 406: /* pgq_expr: pgq_expr '%' pgq_expr  */
#line 871 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "%", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 24050 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 407: /* pgq_expr: pgq_expr '^' pgq_expr  */
#line 873 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "^", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 24056 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 408: /* pgq_expr: pgq_expr POWER_OF pgq_expr  */
#line 875 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "**", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 24062 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 409: /* pgq_expr: pgq_expr '<' pgq_expr  */
#line 877 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 24068 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 410: /* pgq_expr: pgq_expr '>' pgq_expr  */
#line 879 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, ">", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 24074 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 411: /* pgq_expr: pgq_expr '=' pgq_expr  */
#line 881 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 24080 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 412: /* pgq_expr: pgq_expr LESS_EQUALS pgq_expr  */
#line 883 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 24086 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 413: /* pgq_expr: pgq_expr GREATER_EQUALS pgq_expr  */
#line 885 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, ">=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 24092 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 414: /* pgq_expr: pgq_expr NOT_EQUALS pgq_expr  */
#line 887 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<>", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 24098 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 415: /* pgq_expr: pgq_expr qual_Op pgq_expr  */
#line 890 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[-1].list), (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 24104 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 416: /* pgq_expr: pgq_expr AND pgq_expr  */
#line 892 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = makeAndExpr((yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 24110 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 417: /* pgq_expr: pgq_expr OR pgq_expr  */
#line 894 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = makeOrExpr((yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 24116 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 418: /* pgq_expr: NOT pgq_expr  */
#line 896 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = makeNotExpr((yyvsp[0].node), (yylsp[-1])); }
#line 24122 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 419: /* pgq_expr: NOT_LA pgq_expr  */
#line 898 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = makeNotExpr((yyvsp[0].node), (yylsp[-1])); }
#line 24128 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 420: /* pgq_expr: pgq_expr GLOB pgq_expr  */
#line 900 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_GLOB, "~~~",
												   (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
				}
#line 24137 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 421: /* pgq_expr: pgq_expr LIKE pgq_expr  */
#line 905 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_LIKE, "~~",
												   (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
				}
#line 24146 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 422: /* pgq_expr: pgq_expr LIKE pgq_expr ESCAPE pgq_expr  */
#line 910 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("like_escape"),
											   list_make3((yyvsp[-4].node), (yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-3]));
					(yyval.node) = (PGNode *) n;
				}
#line 24157 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 423: /* pgq_expr: pgq_expr NOT_LA LIKE pgq_expr  */
#line 917 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_LIKE, "!~~",
												   (yyvsp[-3].node), (yyvsp[0].node), (yylsp[-2]));
				}
#line 24166 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 424: /* pgq_expr: pgq_expr NOT_LA LIKE pgq_expr ESCAPE pgq_expr  */
#line 922 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("not_like_escape"),
											   list_make3((yyvsp[-5].node), (yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-4]));
					(yyval.node) = (PGNode *) n;
				}
#line 24177 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 425: /* pgq_expr: pgq_expr ILIKE pgq_expr  */
#line 929 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_ILIKE, "~~*",
												   (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
				}
#line 24186 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 426: /* pgq_expr: pgq_expr ILIKE pgq_expr ESCAPE pgq_expr  */
#line 934 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("ilike_escape"),
											   list_make3((yyvsp[-4].node), (yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-3]));
					(yyval.node) = (PGNode *) n;
				}
#line 24197 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 427: /* pgq_expr: pgq_expr NOT_LA ILIKE pgq_expr  */
#line 941 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_ILIKE, "!~~*",
												   (yyvsp[-3].node), (yyvsp[0].node), (yylsp[-2]));
				}
#line 24206 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 428: /* pgq_expr: pgq_expr NOT_LA ILIKE pgq_expr ESCAPE pgq_expr  */
#line 946 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("not_ilike_escape"),
											   list_make3((yyvsp[-5].node), (yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-4]));
					(yyval.node) = (PGNode *) n;
				}
#line 24217 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 429: /* pgq_expr: pgq_expr SIMILAR TO pgq_expr  */
#line 954 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
											   list_make2((yyvsp[0].node), makeNullAConst(-1)),
											   (yylsp[-2]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "~",
												   (yyvsp[-3].node), (PGNode *) n, (yylsp[-2]));
				}
#line 24229 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 430: /* pgq_expr: pgq_expr SIMILAR TO pgq_expr ESCAPE pgq_expr  */
#line 962 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
											   list_make2((yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-4]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "~",
												   (yyvsp[-5].node), (PGNode *) n, (yylsp[-4]));
				}
#line 24241 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 431: /* pgq_expr: pgq_expr NOT_LA SIMILAR TO pgq_expr  */
#line 970 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
											   list_make2((yyvsp[0].node), makeNullAConst(-1)),
											   (yylsp[-3]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "!~",
												   (yyvsp[-4].node), (PGNode *) n, (yylsp[-3]));
				}
#line 24253 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 432: /* pgq_expr: pgq_expr NOT_LA SIMILAR TO pgq_expr ESCAPE pgq_expr  */
#line 978 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
											   list_make2((yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-5]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "!~",
												   (yyvsp[-6].node), (PGNode *) n, (yylsp[-5]));
				}
#line 24265 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 433: /* pgq_expr: pgq_expr IS NULL_P  */
#line 996 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-2].node);
					n->nulltesttype = PG_IS_NULL;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 24277 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 434: /* pgq_expr: pgq_expr ISNULL  */
#line 1004 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-1].node);
					n->nulltesttype = PG_IS_NULL;
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 24289 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 435: /* pgq_expr: pgq_expr IS NOT NULL_P  */
#line 1012 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-3].node);
					n->nulltesttype = IS_NOT_NULL;
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)n;
				}
#line 24301 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 436: /* pgq_expr: pgq_expr NOT NULL_P  */
#line 1020 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-2].node);
					n->nulltesttype = IS_NOT_NULL;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 24313 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 437: /* pgq_expr: pgq_expr NOTNULL  */
#line 1028 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-1].node);
					n->nulltesttype = IS_NOT_NULL;
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 24325 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 438: /* pgq_expr: pgq_expr LAMBDA_ARROW pgq_expr  */
#line 1036 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGLambdaFunction *n = makeNode(PGLambdaFunction);
				n->lhs = (yyvsp[-2].node);
				n->rhs = (yyvsp[0].node);
				n->location = (yylsp[-1]);
				(yyval.node) = (PGNode *) n;
			}
#line 24337 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 439: /* pgq_expr: pgq_expr DOUBLE_ARROW pgq_expr  */
#line 1044 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
							(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "->>", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
			}
#line 24345 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 440: /* pgq_expr: row OVERLAPS row  */
#line 1048 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					if (list_length((yyvsp[-2].list)) != 2)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("wrong number of parameters on left side of OVERLAPS expression"),
								 parser_errposition((yylsp[-2]))));
					if (list_length((yyvsp[0].list)) != 2)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("wrong number of parameters on right side of OVERLAPS expression"),
								 parser_errposition((yylsp[0]))));
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("overlaps"),
											   list_concat((yyvsp[-2].list), (yyvsp[0].list)),
											   (yylsp[-1]));
				}
#line 24365 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 441: /* pgq_expr: pgq_expr IS TRUE_P  */
#line 1064 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-2].node);
					b->booltesttype = PG_IS_TRUE;
					b->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)b;
				}
#line 24377 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 442: /* pgq_expr: pgq_expr IS NOT TRUE_P  */
#line 1072 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-3].node);
					b->booltesttype = IS_NOT_TRUE;
					b->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)b;
				}
#line 24389 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 443: /* pgq_expr: pgq_expr IS FALSE_P  */
#line 1080 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-2].node);
					b->booltesttype = IS_FALSE;
					b->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)b;
				}
#line 24401 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 444: /* pgq_expr: pgq_expr IS NOT FALSE_P  */
#line 1088 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-3].node);
					b->booltesttype = IS_NOT_FALSE;
					b->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)b;
				}
#line 24413 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 445: /* pgq_expr: pgq_expr IS UNKNOWN  */
#line 1096 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-2].node);
					b->booltesttype = IS_UNKNOWN;
					b->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)b;
				}
#line 24425 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 446: /* pgq_expr: pgq_expr IS NOT UNKNOWN  */
#line 1104 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-3].node);
					b->booltesttype = IS_NOT_UNKNOWN;
					b->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)b;
				}
#line 24437 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 447: /* pgq_expr: pgq_expr IS DISTINCT FROM pgq_expr  */
#line 1112 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_DISTINCT, "=", (yyvsp[-4].node), (yyvsp[0].node), (yylsp[-3]));
				}
#line 24445 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 448: /* pgq_expr: pgq_expr IS NOT DISTINCT FROM pgq_expr  */
#line 1116 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_DISTINCT, "=", (yyvsp[-5].node), (yyvsp[0].node), (yylsp[-4]));
				}
#line 24453 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 449: /* pgq_expr: pgq_expr IS OF '(' type_list ')'  */
#line 1120 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OF, "=", (yyvsp[-5].node), (PGNode *) (yyvsp[-1].list), (yylsp[-4]));
				}
#line 24461 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 450: /* pgq_expr: pgq_expr IS NOT OF '(' type_list ')'  */
#line 1124 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OF, "<>", (yyvsp[-6].node), (PGNode *) (yyvsp[-1].list), (yylsp[-5]));
				}
#line 24469 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 451: /* pgq_expr: pgq_expr BETWEEN opt_asymmetric b_expr AND pgq_expr  */
#line 1128 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_BETWEEN,
												   "BETWEEN",
												   (yyvsp[-5].node),
												   (PGNode *) list_make2((yyvsp[-2].node), (yyvsp[0].node)),
												   (yylsp[-4]));
				}
#line 24481 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 452: /* pgq_expr: pgq_expr NOT_LA BETWEEN opt_asymmetric b_expr AND pgq_expr  */
#line 1136 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_BETWEEN,
												   "NOT BETWEEN",
												   (yyvsp[-6].node),
												   (PGNode *) list_make2((yyvsp[-2].node), (yyvsp[0].node)),
												   (yylsp[-5]));
				}
#line 24493 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 453: /* pgq_expr: pgq_expr BETWEEN SYMMETRIC b_expr AND pgq_expr  */
#line 1144 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_BETWEEN_SYM,
												   "BETWEEN SYMMETRIC",
												   (yyvsp[-5].node),
												   (PGNode *) list_make2((yyvsp[-2].node), (yyvsp[0].node)),
												   (yylsp[-4]));
				}
#line 24505 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 454: /* pgq_expr: pgq_expr NOT_LA BETWEEN SYMMETRIC b_expr AND pgq_expr  */
#line 1152 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_BETWEEN_SYM,
												   "NOT BETWEEN SYMMETRIC",
												   (yyvsp[-6].node),
												   (PGNode *) list_make2((yyvsp[-2].node), (yyvsp[0].node)),
												   (yylsp[-5]));
				}
#line 24517 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 455: /* pgq_expr: pgq_expr IN_P in_expr  */
#line 1160 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					/* in_expr returns a PGSubLink or a list of pgq_exprs */
					if (IsA((yyvsp[0].node), PGSubLink))
					{
						/* generate foo = ANY (subquery) */
						PGSubLink *n = (PGSubLink *) (yyvsp[0].node);
						n->subLinkType = PG_ANY_SUBLINK;
						n->subLinkId = 0;
						n->testexpr = (yyvsp[-2].node);
						n->operName = NIL;		/* show it's IN not = ANY */
						n->location = (yylsp[-1]);
						(yyval.node) = (PGNode *)n;
					}
					else
					{
						/* generate scalar IN expression */
						(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_IN, "=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
					}
				}
#line 24541 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 456: /* pgq_expr: pgq_expr NOT_LA IN_P in_expr  */
#line 1180 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					/* in_expr returns a PGSubLink or a list of pgq_exprs */
					if (IsA((yyvsp[0].node), PGSubLink))
					{
						/* generate NOT (foo = ANY (subquery)) */
						/* Make an = ANY node */
						PGSubLink *n = (PGSubLink *) (yyvsp[0].node);
						n->subLinkType = PG_ANY_SUBLINK;
						n->subLinkId = 0;
						n->testexpr = (yyvsp[-3].node);
						n->operName = NIL;		/* show it's IN not = ANY */
						n->location = (yylsp[-2]);
						/* Stick a NOT on top; must have same parse location */
						(yyval.node) = makeNotExpr((PGNode *) n, (yylsp[-2]));
					}
					else
					{
						/* generate scalar NOT IN expression */
						(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_IN, "<>", (yyvsp[-3].node), (yyvsp[0].node), (yylsp[-2]));
					}
				}
#line 24567 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 457: /* CreateStmt: CREATE_P OptTemp TABLE qualified_name '(' OptTableElementList ')' OptWith OnCommitOption  */
#line 9 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGCreateStmt *n = makeNode(PGCreateStmt);
					(yyvsp[-5].range)->relpersistence = (yyvsp[-7].ival);
					n->relation = (yyvsp[-5].range);
					n->tableElts = (yyvsp[-3].list);
					n->ofTypename = NULL;
					n->constraints = NIL;
					n->options = (yyvsp[-1].list);
					n->oncommit = (yyvsp[0].oncommit);
					n->onconflict = PG_ERROR_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 24584 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 458: /* CreateStmt: CREATE_P OptTemp TABLE IF_P NOT EXISTS qualified_name '(' OptTableElementList ')' OptWith OnCommitOption  */
#line 24 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGCreateStmt *n = makeNode(PGCreateStmt);
					(yyvsp[-5].range)->relpersistence = (yyvsp[-10].ival);
					n->relation = (yyvsp[-5].range);
					n->tableElts = (yyvsp[-3].list);
					n->ofTypename = NULL;
					n->constraints = NIL;
					n->options = (yyvsp[-1].list);
					n->oncommit = (yyvsp[0].oncommit);
					n->onconflict = PG_IGNORE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 24601 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 459: /* CreateStmt: CREATE_P OR REPLACE OptTemp TABLE qualified_name '(' OptTableElementList ')' OptWith OnCommitOption  */
#line 39 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGCreateStmt *n = makeNode(PGCreateStmt);
					(yyvsp[-5].range)->relpersistence = (yyvsp[-7].ival);
					n->relation = (yyvsp[-5].range);
					n->tableElts = (yyvsp[-3].list);
					n->ofTypename = NULL;
					n->constraints = NIL;
					n->options = (yyvsp[-1].list);
					n->oncommit = (yyvsp[0].oncommit);
					n->onconflict = PG_REPLACE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 24618 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 460: /* ConstraintAttributeSpec: %empty  */
#line 56 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = 0; }
#line 24624 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 461: /* ConstraintAttributeSpec: ConstraintAttributeSpec ConstraintAttributeElem  */
#line 58 "third_party/libpg_query/grammar/statements/create.y"
                                {
					/*
					 * We must complain about conflicting options.
					 * We could, but choose not to, complain about redundant
					 * options (ie, where $2's bit is already set in $1).
					 */
					int		newspec = (yyvsp[-1].ival) | (yyvsp[0].ival);

					/* special message for this case */
					if ((newspec & (CAS_NOT_DEFERRABLE | CAS_INITIALLY_DEFERRED)) == (CAS_NOT_DEFERRABLE | CAS_INITIALLY_DEFERRED))
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("constraint declared INITIALLY DEFERRED must be DEFERRABLE"),
								 parser_errposition((yylsp[0]))));
					/* generic message for other conflicts */
					if ((newspec & (CAS_NOT_DEFERRABLE | CAS_DEFERRABLE)) == (CAS_NOT_DEFERRABLE | CAS_DEFERRABLE) ||
						(newspec & (CAS_INITIALLY_IMMEDIATE | CAS_INITIALLY_DEFERRED)) == (CAS_INITIALLY_IMMEDIATE | CAS_INITIALLY_DEFERRED))
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("conflicting constraint properties"),
								 parser_errposition((yylsp[0]))));
					(yyval.ival) = newspec;
				}
#line 24652 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 462: /* def_arg: func_type  */
#line 84 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.node) = (PGNode *)(yyvsp[0].typnam); }
#line 24658 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 463: /* def_arg: reserved_keyword  */
#line 85 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.node) = (PGNode *)makeString(pstrdup((yyvsp[0].keyword))); }
#line 24664 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 464: /* def_arg: qual_all_Op  */
#line 86 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.node) = (PGNode *)(yyvsp[0].list); }
#line 24670 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 465: /* def_arg: NumericOnly  */
#line 87 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.node) = (PGNode *)(yyvsp[0].value); }
#line 24676 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 466: /* def_arg: Sconst  */
#line 88 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.node) = (PGNode *)makeString((yyvsp[0].str)); }
#line 24682 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 467: /* def_arg: NONE  */
#line 89 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.node) = (PGNode *)makeString(pstrdup((yyvsp[0].keyword))); }
#line 24688 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 468: /* OptParenthesizedSeqOptList: '(' SeqOptList ')'  */
#line 93 "third_party/libpg_query/grammar/statements/create.y"
                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 24694 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 469: /* OptParenthesizedSeqOptList: %empty  */
#line 94 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                { (yyval.list) = NIL; }
#line 24700 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 470: /* generic_option_arg: Sconst  */
#line 99 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.node) = (PGNode *) makeString((yyvsp[0].str)); }
#line 24706 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 471: /* key_action: NO ACTION  */
#line 104 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = PG_FKCONSTR_ACTION_NOACTION; }
#line 24712 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 472: /* key_action: RESTRICT  */
#line 105 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = PG_FKCONSTR_ACTION_RESTRICT; }
#line 24718 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 473: /* key_action: CASCADE  */
#line 106 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = PG_FKCONSTR_ACTION_CASCADE; }
#line 24724 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 474: /* key_action: SET NULL_P  */
#line 107 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_FKCONSTR_ACTION_SETNULL; }
#line 24730 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 475: /* key_action: SET DEFAULT  */
#line 108 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_FKCONSTR_ACTION_SETDEFAULT; }
#line 24736 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 476: /* ColConstraint: CONSTRAINT name ColConstraintElem  */
#line 114 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = castNode(PGConstraint, (yyvsp[0].node));
					n->conname = (yyvsp[-1].str);
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *) n;
				}
#line 24747 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 477: /* ColConstraint: ColConstraintElem  */
#line 120 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 24753 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 478: /* ColConstraint: ConstraintAttr  */
#line 121 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 24759 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 479: /* ColConstraint: COLLATE any_name  */
#line 123 "third_party/libpg_query/grammar/statements/create.y"
                                {
					/*
					 * Note: the PGCollateClause is momentarily included in
					 * the list built by ColQualList, but we split it out
					 * again in SplitColQualList.
					 */
					PGCollateClause *n = makeNode(PGCollateClause);
					n->arg = NULL;
					n->collname = (yyvsp[0].list);
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *) n;
				}
#line 24776 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 480: /* ColConstraintElem: NOT NULL_P  */
#line 140 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_NOTNULL;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 24787 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 481: /* ColConstraintElem: NULL_P  */
#line 147 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_NULL;
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 24798 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 482: /* ColConstraintElem: UNIQUE opt_definition  */
#line 154 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_UNIQUE;
					n->location = (yylsp[-1]);
					n->keys = NULL;
					n->options = (yyvsp[0].list);
					n->indexname = NULL;
					(yyval.node) = (PGNode *)n;
				}
#line 24812 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 483: /* ColConstraintElem: PRIMARY KEY opt_definition  */
#line 164 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_PRIMARY;
					n->location = (yylsp[-2]);
					n->keys = NULL;
					n->options = (yyvsp[0].list);
					n->indexname = NULL;
					(yyval.node) = (PGNode *)n;
				}
#line 24826 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 484: /* ColConstraintElem: CHECK_P '(' a_expr ')' opt_no_inherit  */
#line 174 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_CHECK;
					n->location = (yylsp[-4]);
					n->is_no_inherit = (yyvsp[0].boolean);
					n->raw_expr = (yyvsp[-2].node);
					n->cooked_expr = NULL;
					n->skip_validation = false;
					n->initially_valid = true;
					(yyval.node) = (PGNode *)n;
				}
#line 24842 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 485: /* ColConstraintElem: USING COMPRESSION name  */
#line 186 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_COMPRESSION;
					n->location = (yylsp[-2]);
					n->compression_name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 24854 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 486: /* ColConstraintElem: DEFAULT b_expr  */
#line 194 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_DEFAULT;
					n->location = (yylsp[-1]);
					n->raw_expr = (yyvsp[0].node);
					n->cooked_expr = NULL;
					(yyval.node) = (PGNode *)n;
				}
#line 24867 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 487: /* ColConstraintElem: REFERENCES qualified_name opt_column_list key_match key_actions  */
#line 203 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_FOREIGN;
					n->location = (yylsp[-4]);
					n->pktable			= (yyvsp[-3].range);
					n->fk_attrs			= NIL;
					n->pk_attrs			= (yyvsp[-2].list);
					n->fk_matchtype		= (yyvsp[-1].ival);
					n->fk_upd_action	= (char) ((yyvsp[0].ival) >> 8);
					n->fk_del_action	= (char) ((yyvsp[0].ival) & 0xFF);
					n->skip_validation  = false;
					n->initially_valid  = true;
					(yyval.node) = (PGNode *)n;
				}
#line 24886 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 488: /* GeneratedColumnType: VIRTUAL  */
#line 220 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.constr) = PG_CONSTR_GENERATED_VIRTUAL; }
#line 24892 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 489: /* GeneratedColumnType: STORED  */
#line 221 "third_party/libpg_query/grammar/statements/create.y"
                                 { (yyval.constr) = PG_CONSTR_GENERATED_STORED; }
#line 24898 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 490: /* opt_GeneratedColumnType: GeneratedColumnType  */
#line 225 "third_party/libpg_query/grammar/statements/create.y"
                                            { (yyval.constr) = (yyvsp[0].constr); }
#line 24904 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 491: /* opt_GeneratedColumnType: %empty  */
#line 226 "third_party/libpg_query/grammar/statements/create.y"
                                      { (yyval.constr) = PG_CONSTR_GENERATED_VIRTUAL; }
#line 24910 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 492: /* GeneratedConstraintElem: GENERATED generated_when AS IDENTITY_P OptParenthesizedSeqOptList  */
#line 231 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_IDENTITY;
					n->generated_when = (yyvsp[-3].ival);
					n->options = (yyvsp[0].list);
					n->location = (yylsp[-4]);
					(yyval.node) = (PGNode *)n;
				}
#line 24923 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 493: /* GeneratedConstraintElem: GENERATED generated_when AS '(' a_expr ')' opt_GeneratedColumnType  */
#line 240 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = (yyvsp[0].constr);
					n->generated_when = (yyvsp[-5].ival);
					n->raw_expr = (yyvsp[-2].node);
					n->cooked_expr = NULL;
					n->location = (yylsp[-6]);

					/*
					 * Can't do this in the grammar because of shift/reduce
					 * conflicts.  (IDENTITY allows both ALWAYS and BY
					 * DEFAULT, but generated columns only allow ALWAYS.)  We
					 * can also give a more useful error message and location.
					 */
					if ((yyvsp[-5].ival) != PG_ATTRIBUTE_IDENTITY_ALWAYS)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("for a generated column, GENERATED ALWAYS must be specified"),
								 parser_errposition((yylsp[-5]))));

					(yyval.node) = (PGNode *)n;
				}
#line 24950 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 494: /* GeneratedConstraintElem: AS '(' a_expr ')' opt_GeneratedColumnType  */
#line 263 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = (yyvsp[0].constr);
					n->generated_when = PG_ATTRIBUTE_IDENTITY_ALWAYS;
					n->raw_expr = (yyvsp[-2].node);
					n->cooked_expr = NULL;
					n->location = (yylsp[-4]);
					(yyval.node) = (PGNode *)n;
				}
#line 24964 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 495: /* generic_option_elem: generic_option_name generic_option_arg  */
#line 277 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[-1].str), (yyvsp[0].node), (yylsp[-1]));
				}
#line 24972 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 496: /* key_update: ON UPDATE key_action  */
#line 283 "third_party/libpg_query/grammar/statements/create.y"
                                                { (yyval.ival) = (yyvsp[0].ival); }
#line 24978 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 497: /* key_actions: key_update  */
#line 289 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = ((yyvsp[0].ival) << 8) | (PG_FKCONSTR_ACTION_NOACTION & 0xFF); }
#line 24984 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 498: /* key_actions: key_delete  */
#line 291 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = (PG_FKCONSTR_ACTION_NOACTION << 8) | ((yyvsp[0].ival) & 0xFF); }
#line 24990 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 499: /* key_actions: key_update key_delete  */
#line 293 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = ((yyvsp[-1].ival) << 8) | ((yyvsp[0].ival) & 0xFF); }
#line 24996 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 500: /* key_actions: key_delete key_update  */
#line 295 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = ((yyvsp[0].ival) << 8) | ((yyvsp[-1].ival) & 0xFF); }
#line 25002 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 501: /* key_actions: %empty  */
#line 297 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = (PG_FKCONSTR_ACTION_NOACTION << 8) | (PG_FKCONSTR_ACTION_NOACTION & 0xFF); }
#line 25008 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 502: /* OnCommitOption: ON COMMIT DROP  */
#line 300 "third_party/libpg_query/grammar/statements/create.y"
                                                        { (yyval.oncommit) = ONCOMMIT_DROP; }
#line 25014 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 503: /* OnCommitOption: ON COMMIT DELETE_P ROWS  */
#line 301 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.oncommit) = PG_ONCOMMIT_DELETE_ROWS; }
#line 25020 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 504: /* OnCommitOption: ON COMMIT PRESERVE ROWS  */
#line 302 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.oncommit) = PG_ONCOMMIT_PRESERVE_ROWS; }
#line 25026 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 505: /* OnCommitOption: %empty  */
#line 303 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.oncommit) = PG_ONCOMMIT_NOOP; }
#line 25032 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 506: /* reloptions: '(' reloption_list ')'  */
#line 308 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 25038 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 507: /* opt_no_inherit: NO INHERIT  */
#line 312 "third_party/libpg_query/grammar/statements/create.y"
                                                                                {  (yyval.boolean) = true; }
#line 25044 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 508: /* opt_no_inherit: %empty  */
#line 313 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        {  (yyval.boolean) = false; }
#line 25050 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 509: /* TableConstraint: CONSTRAINT name ConstraintElem  */
#line 319 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = castNode(PGConstraint, (yyvsp[0].node));
					n->conname = (yyvsp[-1].str);
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *) n;
				}
#line 25061 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 510: /* TableConstraint: ConstraintElem  */
#line 325 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 25067 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 511: /* TableLikeOption: COMMENTS  */
#line 330 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_CREATE_TABLE_LIKE_COMMENTS; }
#line 25073 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 512: /* TableLikeOption: CONSTRAINTS  */
#line 331 "third_party/libpg_query/grammar/statements/create.y"
                                                        { (yyval.ival) = PG_CREATE_TABLE_LIKE_CONSTRAINTS; }
#line 25079 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 513: /* TableLikeOption: DEFAULTS  */
#line 332 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_CREATE_TABLE_LIKE_DEFAULTS; }
#line 25085 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 514: /* TableLikeOption: IDENTITY_P  */
#line 333 "third_party/libpg_query/grammar/statements/create.y"
                                                        { (yyval.ival) = PG_CREATE_TABLE_LIKE_IDENTITY; }
#line 25091 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 515: /* TableLikeOption: INDEXES  */
#line 334 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_CREATE_TABLE_LIKE_INDEXES; }
#line 25097 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 516: /* TableLikeOption: STATISTICS  */
#line 335 "third_party/libpg_query/grammar/statements/create.y"
                                                        { (yyval.ival) = PG_CREATE_TABLE_LIKE_STATISTICS; }
#line 25103 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 517: /* TableLikeOption: STORAGE  */
#line 336 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_CREATE_TABLE_LIKE_STORAGE; }
#line 25109 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 518: /* TableLikeOption: ALL  */
#line 337 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_CREATE_TABLE_LIKE_ALL; }
#line 25115 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 519: /* reloption_list: reloption_elem  */
#line 343 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].defelt)); }
#line 25121 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 520: /* reloption_list: reloption_list ',' reloption_elem  */
#line 344 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt)); }
#line 25127 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 521: /* ExistingIndex: USING INDEX index_name  */
#line 348 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.str) = (yyvsp[0].str); }
#line 25133 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 522: /* ConstraintAttr: DEFERRABLE  */
#line 354 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_ATTR_DEFERRABLE;
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 25144 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 523: /* ConstraintAttr: NOT DEFERRABLE  */
#line 361 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_ATTR_NOT_DEFERRABLE;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 25155 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 524: /* ConstraintAttr: INITIALLY DEFERRED  */
#line 368 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_ATTR_DEFERRED;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 25166 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 525: /* ConstraintAttr: INITIALLY IMMEDIATE  */
#line 375 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_ATTR_IMMEDIATE;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 25177 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 526: /* OptWith: WITH reloptions  */
#line 386 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.list) = (yyvsp[0].list); }
#line 25183 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 527: /* OptWith: WITH OIDS  */
#line 387 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.list) = list_make1(makeDefElem("oids", (PGNode *) makeInteger(true), (yylsp[-1]))); }
#line 25189 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 528: /* OptWith: WITHOUT OIDS  */
#line 388 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.list) = list_make1(makeDefElem("oids", (PGNode *) makeInteger(false), (yylsp[-1]))); }
#line 25195 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 529: /* OptWith: %empty  */
#line 389 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.list) = NIL; }
#line 25201 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 530: /* definition: '(' def_list ')'  */
#line 393 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 25207 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 531: /* TableLikeOptionList: TableLikeOptionList INCLUDING TableLikeOption  */
#line 398 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.ival) = (yyvsp[-2].ival) | (yyvsp[0].ival); }
#line 25213 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 532: /* TableLikeOptionList: TableLikeOptionList EXCLUDING TableLikeOption  */
#line 399 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.ival) = (yyvsp[-2].ival) & ~(yyvsp[0].ival); }
#line 25219 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 533: /* TableLikeOptionList: %empty  */
#line 400 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.ival) = 0; }
#line 25225 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 534: /* generic_option_name: ColLabel  */
#line 405 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.str) = (yyvsp[0].str); }
#line 25231 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 535: /* ConstraintAttributeElem: NOT DEFERRABLE  */
#line 410 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = CAS_NOT_DEFERRABLE; }
#line 25237 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 536: /* ConstraintAttributeElem: DEFERRABLE  */
#line 411 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = CAS_DEFERRABLE; }
#line 25243 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 537: /* ConstraintAttributeElem: INITIALLY IMMEDIATE  */
#line 412 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = CAS_INITIALLY_IMMEDIATE; }
#line 25249 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 538: /* ConstraintAttributeElem: INITIALLY DEFERRED  */
#line 413 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = CAS_INITIALLY_DEFERRED; }
#line 25255 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 539: /* ConstraintAttributeElem: NOT VALID  */
#line 414 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.ival) = CAS_NOT_VALID; }
#line 25261 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 540: /* ConstraintAttributeElem: NO INHERIT  */
#line 415 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = CAS_NO_INHERIT; }
#line 25267 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 541: /* columnDef: ColId Typename ColQualList  */
#line 421 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGColumnDef *n = makeNode(PGColumnDef);
					n->category = COL_STANDARD;
					n->colname = (yyvsp[-2].str);
					n->typeName = (yyvsp[-1].typnam);
					n->inhcount = 0;
					n->is_local = true;
					n->is_not_null = false;
					n->is_from_type = false;
					n->storage = 0;
					n->raw_default = NULL;
					n->cooked_default = NULL;
					n->collOid = InvalidOid;
					SplitColQualList((yyvsp[0].list), &n->constraints, &n->collClause,
									 yyscanner);
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)n;
			}
#line 25290 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 542: /* columnDef: ColId opt_Typename GeneratedConstraintElem ColQualList  */
#line 441 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGColumnDef *n = makeNode(PGColumnDef);
					n->category = COL_GENERATED;
					n->colname = (yyvsp[-3].str);
					n->typeName = (yyvsp[-2].typnam);
					n->inhcount = 0;
					n->is_local = true;
					n->is_not_null = false;
					n->is_from_type = false;
					n->storage = 0;
					n->raw_default = NULL;
					n->cooked_default = NULL;
					n->collOid = InvalidOid;
					// merge the constraints with the generated column constraint
					auto constraints = (yyvsp[0].list);
					if (constraints) {
					    constraints = lappend(constraints, (yyvsp[-1].node));
					} else {
					    constraints = list_make1((yyvsp[-1].node));
					}
					SplitColQualList(constraints, &n->constraints, &n->collClause,
									 yyscanner);
					n->location = (yylsp[-3]);
					(yyval.node) = (PGNode *)n;
			}
#line 25320 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 543: /* def_list: def_elem  */
#line 469 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].defelt)); }
#line 25326 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 544: /* def_list: def_list ',' def_elem  */
#line 470 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt)); }
#line 25332 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 545: /* index_name: ColId  */
#line 474 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 25338 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 546: /* TableElement: columnDef  */
#line 478 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 25344 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 547: /* TableElement: TableLikeClause  */
#line 479 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 25350 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 548: /* TableElement: TableConstraint  */
#line 480 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 25356 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 549: /* def_elem: ColLabel '=' def_arg  */
#line 485 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[-2].str), (PGNode *) (yyvsp[0].node), (yylsp[-2]));
				}
#line 25364 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 550: /* def_elem: ColLabel  */
#line 489 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[0].str), NULL, (yylsp[0]));
				}
#line 25372 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 551: /* opt_definition: WITH definition  */
#line 496 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 25378 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 552: /* opt_definition: %empty  */
#line 497 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                { (yyval.list) = NIL; }
#line 25384 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 553: /* OptTableElementList: TableElementList  */
#line 502 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 25390 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 554: /* OptTableElementList: TableElementList ','  */
#line 503 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 25396 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 555: /* OptTableElementList: %empty  */
#line 504 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.list) = NIL; }
#line 25402 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 556: /* columnElem: ColId  */
#line 509 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.node) = (PGNode *) makeString((yyvsp[0].str));
				}
#line 25410 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 557: /* opt_column_list: '(' columnList ')'  */
#line 516 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 25416 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 558: /* opt_column_list: %empty  */
#line 517 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                { (yyval.list) = NIL; }
#line 25422 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 559: /* ColQualList: ColQualList ColConstraint  */
#line 522 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 25428 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 560: /* ColQualList: %empty  */
#line 523 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                { (yyval.list) = NIL; }
#line 25434 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 561: /* key_delete: ON DELETE_P key_action  */
#line 527 "third_party/libpg_query/grammar/statements/create.y"
                                                { (yyval.ival) = (yyvsp[0].ival); }
#line 25440 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 562: /* reloption_elem: ColLabel '=' def_arg  */
#line 533 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[-2].str), (PGNode *) (yyvsp[0].node), (yylsp[-2]));
				}
#line 25448 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 563: /* reloption_elem: ColLabel  */
#line 537 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[0].str), NULL, (yylsp[0]));
				}
#line 25456 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 564: /* reloption_elem: ColLabel '.' ColLabel '=' def_arg  */
#line 541 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElemExtended((yyvsp[-4].str), (yyvsp[-2].str), (PGNode *) (yyvsp[0].node),
											 PG_DEFELEM_UNSPEC, (yylsp[-4]));
				}
#line 25465 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 565: /* reloption_elem: ColLabel '.' ColLabel  */
#line 546 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElemExtended((yyvsp[-2].str), (yyvsp[0].str), NULL, PG_DEFELEM_UNSPEC, (yylsp[-2]));
				}
#line 25473 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 566: /* columnList: columnElem  */
#line 553 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 25479 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 567: /* columnList: columnList ',' columnElem  */
#line 554 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 25485 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 568: /* columnList_opt_comma: columnList  */
#line 558 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 25491 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 569: /* columnList_opt_comma: columnList ','  */
#line 559 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 25497 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 570: /* func_type: Typename  */
#line 563 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.typnam) = (yyvsp[0].typnam); }
#line 25503 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 571: /* func_type: type_function_name attrs '%' TYPE_P  */
#line 565 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.typnam) = makeTypeNameFromNameList(lcons(makeString((yyvsp[-3].str)), (yyvsp[-2].list)));
					(yyval.typnam)->pct_type = true;
					(yyval.typnam)->location = (yylsp[-3]);
				}
#line 25513 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 572: /* func_type: SETOF type_function_name attrs '%' TYPE_P  */
#line 571 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.typnam) = makeTypeNameFromNameList(lcons(makeString((yyvsp[-3].str)), (yyvsp[-2].list)));
					(yyval.typnam)->pct_type = true;
					(yyval.typnam)->setof = true;
					(yyval.typnam)->location = (yylsp[-3]);
				}
#line 25524 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 573: /* ConstraintElem: CHECK_P '(' a_expr ')' ConstraintAttributeSpec  */
#line 582 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_CHECK;
					n->location = (yylsp[-4]);
					n->raw_expr = (yyvsp[-2].node);
					n->cooked_expr = NULL;
					processCASbits((yyvsp[0].ival), (yylsp[0]), "CHECK",
								   NULL, NULL, &n->skip_validation,
								   &n->is_no_inherit, yyscanner);
					n->initially_valid = !n->skip_validation;
					(yyval.node) = (PGNode *)n;
				}
#line 25541 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 574: /* ConstraintElem: UNIQUE '(' columnList_opt_comma ')' opt_definition ConstraintAttributeSpec  */
#line 596 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_UNIQUE;
					n->location = (yylsp[-5]);
					n->keys = (yyvsp[-3].list);
					n->options = (yyvsp[-1].list);
					n->indexname = NULL;
					processCASbits((yyvsp[0].ival), (yylsp[0]), "UNIQUE",
								   &n->deferrable, &n->initdeferred, NULL,
								   NULL, yyscanner);
					(yyval.node) = (PGNode *)n;
				}
#line 25558 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 575: /* ConstraintElem: UNIQUE ExistingIndex ConstraintAttributeSpec  */
#line 609 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_UNIQUE;
					n->location = (yylsp[-2]);
					n->keys = NIL;
					n->options = NIL;
					n->indexname = (yyvsp[-1].str);
					n->indexspace = NULL;
					processCASbits((yyvsp[0].ival), (yylsp[0]), "UNIQUE",
								   &n->deferrable, &n->initdeferred, NULL,
								   NULL, yyscanner);
					(yyval.node) = (PGNode *)n;
				}
#line 25576 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 576: /* ConstraintElem: PRIMARY KEY '(' columnList_opt_comma ')' opt_definition ConstraintAttributeSpec  */
#line 624 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_PRIMARY;
					n->location = (yylsp[-6]);
					n->keys = (yyvsp[-3].list);
					n->options = (yyvsp[-1].list);
					n->indexname = NULL;
					processCASbits((yyvsp[0].ival), (yylsp[0]), "PRIMARY KEY",
								   &n->deferrable, &n->initdeferred, NULL,
								   NULL, yyscanner);
					(yyval.node) = (PGNode *)n;
				}
#line 25593 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 577: /* ConstraintElem: PRIMARY KEY ExistingIndex ConstraintAttributeSpec  */
#line 637 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_PRIMARY;
					n->location = (yylsp[-3]);
					n->keys = NIL;
					n->options = NIL;
					n->indexname = (yyvsp[-1].str);
					n->indexspace = NULL;
					processCASbits((yyvsp[0].ival), (yylsp[0]), "PRIMARY KEY",
								   &n->deferrable, &n->initdeferred, NULL,
								   NULL, yyscanner);
					(yyval.node) = (PGNode *)n;
				}
#line 25611 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 578: /* ConstraintElem: FOREIGN KEY '(' columnList_opt_comma ')' REFERENCES qualified_name opt_column_list key_match key_actions ConstraintAttributeSpec  */
#line 652 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_FOREIGN;
					n->location = (yylsp[-10]);
					n->pktable			= (yyvsp[-4].range);
					n->fk_attrs			= (yyvsp[-7].list);
					n->pk_attrs			= (yyvsp[-3].list);
					n->fk_matchtype		= (yyvsp[-2].ival);
					n->fk_upd_action	= (char) ((yyvsp[-1].ival) >> 8);
					n->fk_del_action	= (char) ((yyvsp[-1].ival) & 0xFF);
					processCASbits((yyvsp[0].ival), (yylsp[0]), "FOREIGN KEY",
								   &n->deferrable, &n->initdeferred,
								   &n->skip_validation, NULL,
								   yyscanner);
					n->initially_valid = !n->skip_validation;
					(yyval.node) = (PGNode *)n;
				}
#line 25633 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 579: /* TableElementList: TableElement  */
#line 674 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 25641 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 580: /* TableElementList: TableElementList ',' TableElement  */
#line 678 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 25649 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 581: /* key_match: MATCH FULL  */
#line 685 "third_party/libpg_query/grammar/statements/create.y"
                        {
				(yyval.ival) = PG_FKCONSTR_MATCH_FULL;
			}
#line 25657 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 582: /* key_match: MATCH PARTIAL  */
#line 689 "third_party/libpg_query/grammar/statements/create.y"
                        {
				ereport(ERROR,
						(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
						 errmsg("MATCH PARTIAL not yet implemented"),
						 parser_errposition((yylsp[-1]))));
				(yyval.ival) = PG_FKCONSTR_MATCH_PARTIAL;
			}
#line 25669 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 583: /* key_match: MATCH SIMPLE  */
#line 697 "third_party/libpg_query/grammar/statements/create.y"
                        {
				(yyval.ival) = PG_FKCONSTR_MATCH_SIMPLE;
			}
#line 25677 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 584: /* key_match: %empty  */
#line 701 "third_party/libpg_query/grammar/statements/create.y"
                        {
				(yyval.ival) = PG_FKCONSTR_MATCH_SIMPLE;
			}
#line 25685 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 585: /* TableLikeClause: LIKE qualified_name TableLikeOptionList  */
#line 709 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGTableLikeClause *n = makeNode(PGTableLikeClause);
					n->relation = (yyvsp[-1].range);
					n->options = (yyvsp[0].ival);
					(yyval.node) = (PGNode *)n;
				}
#line 25696 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 586: /* OptTemp: TEMPORARY  */
#line 718 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_RELPERSISTENCE_TEMP; }
#line 25702 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 587: /* OptTemp: TEMP  */
#line 719 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = PG_RELPERSISTENCE_TEMP; }
#line 25708 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 588: /* OptTemp: LOCAL TEMPORARY  */
#line 720 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_RELPERSISTENCE_TEMP; }
#line 25714 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 589: /* OptTemp: LOCAL TEMP  */
#line 721 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_RELPERSISTENCE_TEMP; }
#line 25720 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 590: /* OptTemp: GLOBAL TEMPORARY  */
#line 723 "third_party/libpg_query/grammar/statements/create.y"
                                {
					ereport(PGWARNING,
							(errmsg("GLOBAL is deprecated in temporary table creation"),
							 parser_errposition((yylsp[-1]))));
					(yyval.ival) = PG_RELPERSISTENCE_TEMP;
				}
#line 25731 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 591: /* OptTemp: GLOBAL TEMP  */
#line 730 "third_party/libpg_query/grammar/statements/create.y"
                                {
					ereport(PGWARNING,
							(errmsg("GLOBAL is deprecated in temporary table creation"),
							 parser_errposition((yylsp[-1]))));
					(yyval.ival) = PG_RELPERSISTENCE_TEMP;
				}
#line 25742 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 592: /* OptTemp: UNLOGGED  */
#line 736 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = PG_RELPERSISTENCE_UNLOGGED; }
#line 25748 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 593: /* OptTemp: %empty  */
#line 737 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = RELPERSISTENCE_PERMANENT; }
#line 25754 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 594: /* generated_when: ALWAYS  */
#line 742 "third_party/libpg_query/grammar/statements/create.y"
                                                { (yyval.ival) = PG_ATTRIBUTE_IDENTITY_ALWAYS; }
#line 25760 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 595: /* generated_when: BY DEFAULT  */
#line 743 "third_party/libpg_query/grammar/statements/create.y"
                                        { (yyval.ival) = ATTRIBUTE_IDENTITY_BY_DEFAULT; }
#line 25766 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 596: /* DropStmt: DROP drop_type_any_name IF_P EXISTS any_name_list opt_drop_behavior  */
#line 10 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-4].objtype);
					n->missing_ok = true;
					n->objects = (yyvsp[-1].list);
					n->behavior = (yyvsp[0].dbehavior);
					n->concurrent = false;
					(yyval.node) = (PGNode *)n;
				}
#line 25780 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 597: /* DropStmt: DROP drop_type_any_name any_name_list opt_drop_behavior  */
#line 20 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-2].objtype);
					n->missing_ok = false;
					n->objects = (yyvsp[-1].list);
					n->behavior = (yyvsp[0].dbehavior);
					n->concurrent = false;
					(yyval.node) = (PGNode *)n;
				}
#line 25794 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 598: /* DropStmt: DROP drop_type_name IF_P EXISTS name_list opt_drop_behavior  */
#line 30 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-4].objtype);
					n->missing_ok = true;
					n->objects = (yyvsp[-1].list);
					n->behavior = (yyvsp[0].dbehavior);
					n->concurrent = false;
					(yyval.node) = (PGNode *)n;
				}
#line 25808 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 599: /* DropStmt: DROP drop_type_name name_list opt_drop_behavior  */
#line 40 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-2].objtype);
					n->missing_ok = false;
					n->objects = (yyvsp[-1].list);
					n->behavior = (yyvsp[0].dbehavior);
					n->concurrent = false;
					(yyval.node) = (PGNode *)n;
				}
#line 25822 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 600: /* DropStmt: DROP drop_type_name_on_any_name name ON any_name opt_drop_behavior  */
#line 50 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-4].objtype);
					n->objects = list_make1(lappend((yyvsp[-1].list), makeString((yyvsp[-3].str))));
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = false;
					n->concurrent = false;
					(yyval.node) = (PGNode *) n;
				}
#line 25836 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 601: /* DropStmt: DROP drop_type_name_on_any_name IF_P EXISTS name ON any_name opt_drop_behavior  */
#line 60 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-6].objtype);
					n->objects = list_make1(lappend((yyvsp[-1].list), makeString((yyvsp[-3].str))));
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = true;
					n->concurrent = false;
					(yyval.node) = (PGNode *) n;
				}
#line 25850 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 602: /* drop_type_any_name: TABLE  */
#line 73 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_TABLE; }
#line 25856 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 603: /* drop_type_any_name: SEQUENCE  */
#line 74 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_SEQUENCE; }
#line 25862 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 604: /* drop_type_any_name: FUNCTION  */
#line 75 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_FUNCTION; }
#line 25868 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 605: /* drop_type_any_name: MACRO  */
#line 76 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_FUNCTION; }
#line 25874 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 606: /* drop_type_any_name: MACRO TABLE  */
#line 77 "third_party/libpg_query/grammar/statements/drop.y"
                                                                { (yyval.objtype) = PG_OBJECT_TABLE_MACRO; }
#line 25880 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 607: /* drop_type_any_name: VIEW  */
#line 78 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_VIEW; }
#line 25886 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 608: /* drop_type_any_name: MATERIALIZED VIEW  */
#line 79 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_MATVIEW; }
#line 25892 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 609: /* drop_type_any_name: INDEX  */
#line 80 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_INDEX; }
#line 25898 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 610: /* drop_type_any_name: FOREIGN TABLE  */
#line 81 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_FOREIGN_TABLE; }
#line 25904 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 611: /* drop_type_any_name: COLLATION  */
#line 82 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_COLLATION; }
#line 25910 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 612: /* drop_type_any_name: CONVERSION_P  */
#line 83 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_CONVERSION; }
#line 25916 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 613: /* drop_type_any_name: SCHEMA  */
#line 84 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_SCHEMA; }
#line 25922 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 614: /* drop_type_any_name: STATISTICS  */
#line 85 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_STATISTIC_EXT; }
#line 25928 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 615: /* drop_type_any_name: TEXT_P SEARCH PARSER  */
#line 86 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                { (yyval.objtype) = PG_OBJECT_TSPARSER; }
#line 25934 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 616: /* drop_type_any_name: TEXT_P SEARCH DICTIONARY  */
#line 87 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                { (yyval.objtype) = PG_OBJECT_TSDICTIONARY; }
#line 25940 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 617: /* drop_type_any_name: TEXT_P SEARCH TEMPLATE  */
#line 88 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                { (yyval.objtype) = PG_OBJECT_TSTEMPLATE; }
#line 25946 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 618: /* drop_type_any_name: TEXT_P SEARCH CONFIGURATION  */
#line 89 "third_party/libpg_query/grammar/statements/drop.y"
                                                                        { (yyval.objtype) = PG_OBJECT_TSCONFIGURATION; }
#line 25952 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 619: /* drop_type_any_name: TYPE_P  */
#line 90 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_TYPE; }
#line 25958 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 620: /* drop_type_name: ACCESS METHOD  */
#line 95 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_ACCESS_METHOD; }
#line 25964 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 621: /* drop_type_name: EVENT TRIGGER  */
#line 96 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_EVENT_TRIGGER; }
#line 25970 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 622: /* drop_type_name: EXTENSION  */
#line 97 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_EXTENSION; }
#line 25976 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 623: /* drop_type_name: FOREIGN DATA_P WRAPPER  */
#line 98 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                { (yyval.objtype) = PG_OBJECT_FDW; }
#line 25982 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 624: /* drop_type_name: PUBLICATION  */
#line 99 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_PUBLICATION; }
#line 25988 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 625: /* drop_type_name: SERVER  */
#line 100 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_FOREIGN_SERVER; }
#line 25994 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 626: /* any_name_list: any_name  */
#line 105 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].list)); }
#line 26000 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 627: /* any_name_list: any_name_list ',' any_name  */
#line 106 "third_party/libpg_query/grammar/statements/drop.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].list)); }
#line 26006 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 628: /* opt_drop_behavior: CASCADE  */
#line 111 "third_party/libpg_query/grammar/statements/drop.y"
                                                                        { (yyval.dbehavior) = PG_DROP_CASCADE; }
#line 26012 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 629: /* opt_drop_behavior: RESTRICT  */
#line 112 "third_party/libpg_query/grammar/statements/drop.y"
                                                                        { (yyval.dbehavior) = PG_DROP_RESTRICT; }
#line 26018 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 630: /* opt_drop_behavior: %empty  */
#line 113 "third_party/libpg_query/grammar/statements/drop.y"
                                                                { (yyval.dbehavior) = PG_DROP_RESTRICT; /* default */ }
#line 26024 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 631: /* drop_type_name_on_any_name: POLICY  */
#line 118 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_POLICY; }
#line 26030 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 632: /* drop_type_name_on_any_name: RULE  */
#line 119 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_RULE; }
#line 26036 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 633: /* drop_type_name_on_any_name: TRIGGER  */
#line 120 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_TRIGGER; }
#line 26042 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 634: /* CreateFunctionStmt: CREATE_P OptTemp macro_alias qualified_name param_list AS TABLE SelectStmt  */
#line 9 "third_party/libpg_query/grammar/statements/create_function.y"
                        {
				PGCreateFunctionStmt *n = makeNode(PGCreateFunctionStmt);
				(yyvsp[-4].range)->relpersistence = (yyvsp[-6].ival);
				n->name = (yyvsp[-4].range);
				n->params = (yyvsp[-3].list);
				n->function = NULL;
				n->query = (yyvsp[0].node);
				n->onconflict = PG_ERROR_ON_CONFLICT;
				(yyval.node) = (PGNode *)n;
			}
#line 26057 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 635: /* CreateFunctionStmt: CREATE_P OptTemp macro_alias IF_P NOT EXISTS qualified_name param_list AS TABLE SelectStmt  */
#line 21 "third_party/libpg_query/grammar/statements/create_function.y"
                        {
				PGCreateFunctionStmt *n = makeNode(PGCreateFunctionStmt);
				(yyvsp[-4].range)->relpersistence = (yyvsp[-9].ival);
				n->name = (yyvsp[-4].range);
				n->params = (yyvsp[-3].list);
				n->function = NULL;
				n->query = (yyvsp[0].node);
				n->onconflict = PG_IGNORE_ON_CONFLICT;
				(yyval.node) = (PGNode *)n;

			}
#line 26073 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 636: /* CreateFunctionStmt: CREATE_P OR REPLACE OptTemp macro_alias qualified_name param_list AS TABLE SelectStmt  */
#line 34 "third_party/libpg_query/grammar/statements/create_function.y"
                        {
				PGCreateFunctionStmt *n = makeNode(PGCreateFunctionStmt);
				(yyvsp[-4].range)->relpersistence = (yyvsp[-6].ival);
				n->name = (yyvsp[-4].range);
				n->params = (yyvsp[-3].list);
				n->function = NULL;
				n->query = (yyvsp[0].node);
				n->onconflict = PG_REPLACE_ON_CONFLICT;
				(yyval.node) = (PGNode *)n;

			}
#line 26089 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 637: /* CreateFunctionStmt: CREATE_P OptTemp macro_alias qualified_name param_list AS a_expr  */
#line 47 "third_party/libpg_query/grammar/statements/create_function.y"
                         {
				PGCreateFunctionStmt *n = makeNode(PGCreateFunctionStmt);
				(yyvsp[-3].range)->relpersistence = (yyvsp[-5].ival);
				n->name = (yyvsp[-3].range);
				n->params = (yyvsp[-2].list);
				n->function = (yyvsp[0].node);
				n->query = NULL;
				n->onconflict = PG_ERROR_ON_CONFLICT;
				(yyval.node) = (PGNode *)n;
                         }
#line 26104 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 638: /* CreateFunctionStmt: CREATE_P OptTemp macro_alias IF_P NOT EXISTS qualified_name param_list AS a_expr  */
#line 59 "third_party/libpg_query/grammar/statements/create_function.y"
                         {
				PGCreateFunctionStmt *n = makeNode(PGCreateFunctionStmt);
				(yyvsp[-3].range)->relpersistence = (yyvsp[-8].ival);
				n->name = (yyvsp[-3].range);
				n->params = (yyvsp[-2].list);
				n->function = (yyvsp[0].node);
				n->query = NULL;
				n->onconflict = PG_IGNORE_ON_CONFLICT;
				(yyval.node) = (PGNode *)n;
			 }
#line 26119 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 639: /* CreateFunctionStmt: CREATE_P OR REPLACE OptTemp macro_alias qualified_name param_list AS a_expr  */
#line 71 "third_party/libpg_query/grammar/statements/create_function.y"
                         {
				PGCreateFunctionStmt *n = makeNode(PGCreateFunctionStmt);
				(yyvsp[-3].range)->relpersistence = (yyvsp[-5].ival);
				n->name = (yyvsp[-3].range);
				n->params = (yyvsp[-2].list);
				n->function = (yyvsp[0].node);
				n->query = NULL;
				n->onconflict = PG_REPLACE_ON_CONFLICT;
				(yyval.node) = (PGNode *)n;
			 }
#line 26134 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 642: /* param_list: '(' ')'  */
#line 92 "third_party/libpg_query/grammar/statements/create_function.y"
                        {
				(yyval.list) = NIL;
			}
#line 26142 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 643: /* param_list: '(' func_arg_list ')'  */
#line 96 "third_party/libpg_query/grammar/statements/create_function.y"
                        {
				(yyval.list) = (yyvsp[-1].list);
			}
#line 26150 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 644: /* UpdateStmt: opt_with_clause UPDATE relation_expr_opt_alias SET set_clause_list_opt_comma from_clause where_or_current_clause returning_clause  */
#line 12 "third_party/libpg_query/grammar/statements/update.y"
                                {
					PGUpdateStmt *n = makeNode(PGUpdateStmt);
					n->relation = (yyvsp[-5].range);
					n->targetList = (yyvsp[-3].list);
					n->fromClause = (yyvsp[-2].list);
					n->whereClause = (yyvsp[-1].node);
					n->returningList = (yyvsp[0].list);
					n->withClause = (yyvsp[-7].with);
					(yyval.node) = (PGNode *)n;
				}
#line 26165 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 645: /* CopyStmt: COPY opt_binary qualified_name opt_column_list opt_oids copy_from opt_program copy_file_name copy_delimiter opt_with copy_options  */
#line 3 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					PGCopyStmt *n = makeNode(PGCopyStmt);
					n->relation = (yyvsp[-8].range);
					n->query = NULL;
					n->attlist = (yyvsp[-7].list);
					n->is_from = (yyvsp[-5].boolean);
					n->is_program = (yyvsp[-4].boolean);
					n->filename = (yyvsp[-3].str);

					if (n->is_program && n->filename == NULL)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("STDIN/STDOUT not allowed with PROGRAM"),
								 parser_errposition((yylsp[-3]))));

					n->options = NIL;
					/* Concatenate user-supplied flags */
					if ((yyvsp[-9].defelt))
						n->options = lappend(n->options, (yyvsp[-9].defelt));
					if ((yyvsp[-6].defelt))
						n->options = lappend(n->options, (yyvsp[-6].defelt));
					if ((yyvsp[-2].defelt))
						n->options = lappend(n->options, (yyvsp[-2].defelt));
					if ((yyvsp[0].list))
						n->options = list_concat(n->options, (yyvsp[0].list));
					(yyval.node) = (PGNode *)n;
				}
#line 26197 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 646: /* CopyStmt: COPY '(' SelectStmt ')' TO opt_program copy_file_name opt_with copy_options  */
#line 31 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					PGCopyStmt *n = makeNode(PGCopyStmt);
					n->relation = NULL;
					n->query = (yyvsp[-6].node);
					n->attlist = NIL;
					n->is_from = false;
					n->is_program = (yyvsp[-3].boolean);
					n->filename = (yyvsp[-2].str);
					n->options = (yyvsp[0].list);

					if (n->is_program && n->filename == NULL)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("STDIN/STDOUT not allowed with PROGRAM"),
								 parser_errposition((yylsp[-4]))));

					(yyval.node) = (PGNode *)n;
				}
#line 26220 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 647: /* CopyStmt: COPY FROM DATABASE ColId TO ColId copy_database_flag  */
#line 50 "third_party/libpg_query/grammar/statements/copy.y"
                {
				PGCopyDatabaseStmt *n = makeNode(PGCopyDatabaseStmt);
				n->from_database = (yyvsp[-3].str);
				n->to_database = (yyvsp[-1].str);
				n->copy_database_flag = (yyvsp[0].conststr);
				(yyval.node) = (PGNode *)n;
			}
#line 26232 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 648: /* copy_database_flag: %empty  */
#line 61 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                        { (yyval.conststr) = NULL; }
#line 26238 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 649: /* copy_database_flag: '(' SCHEMA ')'  */
#line 62 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.conststr) = "schema"; }
#line 26244 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 650: /* copy_database_flag: '(' DATA_P ')'  */
#line 63 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.conststr) = "data"; }
#line 26250 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 651: /* copy_from: FROM  */
#line 67 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.boolean) = true; }
#line 26256 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 652: /* copy_from: TO  */
#line 68 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.boolean) = false; }
#line 26262 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 653: /* copy_delimiter: opt_using DELIMITERS Sconst  */
#line 74 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("delimiter", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-1]));
				}
#line 26270 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 654: /* copy_delimiter: %empty  */
#line 77 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.defelt) = NULL; }
#line 26276 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 655: /* copy_generic_opt_arg_list: copy_generic_opt_arg_list_item  */
#line 83 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 26284 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 656: /* copy_generic_opt_arg_list: copy_generic_opt_arg_list ',' copy_generic_opt_arg_list_item  */
#line 87 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 26292 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 657: /* opt_using: USING  */
#line 94 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                {}
#line 26298 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 658: /* opt_using: %empty  */
#line 95 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                {}
#line 26304 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 659: /* opt_as: AS  */
#line 99 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                {}
#line 26310 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 660: /* opt_as: %empty  */
#line 100 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                        {}
#line 26316 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 661: /* opt_program: PROGRAM  */
#line 105 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.boolean) = true; }
#line 26322 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 662: /* opt_program: %empty  */
#line 106 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                        { (yyval.boolean) = false; }
#line 26328 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 663: /* copy_options: copy_opt_list  */
#line 110 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 26334 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 664: /* copy_options: '(' copy_generic_opt_list ')'  */
#line 111 "third_party/libpg_query/grammar/statements/copy.y"
                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 26340 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 665: /* copy_generic_opt_arg: opt_boolean_or_string  */
#line 116 "third_party/libpg_query/grammar/statements/copy.y"
                                                                { (yyval.node) = (PGNode *) makeString((yyvsp[0].str)); }
#line 26346 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 666: /* copy_generic_opt_arg: NumericOnly  */
#line 117 "third_party/libpg_query/grammar/statements/copy.y"
                                                                        { (yyval.node) = (PGNode *) (yyvsp[0].value); }
#line 26352 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 667: /* copy_generic_opt_arg: list_expr  */
#line 118 "third_party/libpg_query/grammar/statements/copy.y"
                                                        { (yyval.node) = (PGNode *) (yyvsp[0].node); }
#line 26358 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 668: /* copy_generic_opt_arg: '*'  */
#line 119 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                { (yyval.node) = (PGNode *) makeNode(PGAStar); }
#line 26364 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 669: /* copy_generic_opt_arg: '(' copy_generic_opt_arg_list ')'  */
#line 120 "third_party/libpg_query/grammar/statements/copy.y"
                                                                        { (yyval.node) = (PGNode *) (yyvsp[-1].list); }
#line 26370 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 670: /* copy_generic_opt_arg: struct_expr  */
#line 121 "third_party/libpg_query/grammar/statements/copy.y"
                                                                        { (yyval.node) = (PGNode *) (yyvsp[0].node); }
#line 26376 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 671: /* copy_generic_opt_arg: %empty  */
#line 122 "third_party/libpg_query/grammar/statements/copy.y"
                                                                        { (yyval.node) = NULL; }
#line 26382 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 672: /* copy_generic_opt_elem: ColLabel copy_generic_opt_arg  */
#line 128 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[-1].str), (yyvsp[0].node), (yylsp[-1]));
				}
#line 26390 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 673: /* opt_oids: WITH OIDS  */
#line 136 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("oids", (PGNode *)makeInteger(true), (yylsp[-1]));
				}
#line 26398 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 674: /* opt_oids: %empty  */
#line 139 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.defelt) = NULL; }
#line 26404 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 675: /* copy_opt_list: copy_opt_list copy_opt_item  */
#line 144 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].defelt)); }
#line 26410 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 676: /* copy_opt_list: %empty  */
#line 145 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                        { (yyval.list) = NIL; }
#line 26416 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 677: /* opt_binary: BINARY  */
#line 151 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("format", (PGNode *)makeString("binary"), (yylsp[0]));
				}
#line 26424 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 678: /* opt_binary: %empty  */
#line 154 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.defelt) = NULL; }
#line 26430 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 679: /* copy_opt_item: BINARY  */
#line 160 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("format", (PGNode *)makeString("binary"), (yylsp[0]));
				}
#line 26438 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 680: /* copy_opt_item: OIDS  */
#line 164 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("oids", (PGNode *)makeInteger(true), (yylsp[0]));
				}
#line 26446 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 681: /* copy_opt_item: FREEZE  */
#line 168 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("freeze", (PGNode *)makeInteger(true), (yylsp[0]));
				}
#line 26454 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 682: /* copy_opt_item: DELIMITER opt_as Sconst  */
#line 172 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("delimiter", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-2]));
				}
#line 26462 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 683: /* copy_opt_item: NULL_P opt_as Sconst  */
#line 176 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("null", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-2]));
				}
#line 26470 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 684: /* copy_opt_item: CSV  */
#line 180 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("format", (PGNode *)makeString("csv"), (yylsp[0]));
				}
#line 26478 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 685: /* copy_opt_item: HEADER_P  */
#line 184 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("header", (PGNode *)makeInteger(true), (yylsp[0]));
				}
#line 26486 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 686: /* copy_opt_item: QUOTE opt_as Sconst  */
#line 188 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("quote", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-2]));
				}
#line 26494 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 687: /* copy_opt_item: ESCAPE opt_as Sconst  */
#line 192 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("escape", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-2]));
				}
#line 26502 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 688: /* copy_opt_item: FORCE QUOTE columnList  */
#line 196 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("force_quote", (PGNode *)(yyvsp[0].list), (yylsp[-2]));
				}
#line 26510 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 689: /* copy_opt_item: FORCE QUOTE '*'  */
#line 200 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("force_quote", (PGNode *)makeNode(PGAStar), (yylsp[-2]));
				}
#line 26518 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 690: /* copy_opt_item: PARTITION BY columnList  */
#line 204 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("partition_by", (PGNode *)(yyvsp[0].list), (yylsp[-2]));
				}
#line 26526 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 691: /* copy_opt_item: PARTITION BY '*'  */
#line 208 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("partition_by", (PGNode *)makeNode(PGAStar), (yylsp[-2]));
				}
#line 26534 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 692: /* copy_opt_item: FORCE NOT NULL_P columnList  */
#line 212 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("force_not_null", (PGNode *)(yyvsp[0].list), (yylsp[-3]));
				}
#line 26542 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 693: /* copy_opt_item: FORCE NULL_P columnList  */
#line 216 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("force_null", (PGNode *)(yyvsp[0].list), (yylsp[-2]));
				}
#line 26550 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 694: /* copy_opt_item: ENCODING Sconst  */
#line 220 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("encoding", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-1]));
				}
#line 26558 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 695: /* copy_generic_opt_arg_list_item: opt_boolean_or_string  */
#line 227 "third_party/libpg_query/grammar/statements/copy.y"
                                                { (yyval.node) = (PGNode *) makeString((yyvsp[0].str)); }
#line 26564 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 696: /* copy_file_name: Sconst  */
#line 232 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 26570 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 697: /* copy_file_name: STDIN  */
#line 233 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.str) = NULL; }
#line 26576 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 698: /* copy_file_name: STDOUT  */
#line 234 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.str) = NULL; }
#line 26582 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 699: /* copy_file_name: IDENT '.' ColId  */
#line 235 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                        { (yyval.str) = psprintf("%s.%s", (yyvsp[-2].str), (yyvsp[0].str)); }
#line 26588 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 700: /* copy_file_name: IDENT  */
#line 236 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 26594 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 701: /* copy_generic_opt_list: copy_generic_opt_elem  */
#line 243 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].defelt));
				}
#line 26602 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 702: /* copy_generic_opt_list: copy_generic_opt_list ',' copy_generic_opt_elem  */
#line 247 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt));
				}
#line 26610 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 705: /* select_with_parens: '(' select_no_parens ')'  */
#line 52 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[-1].node); }
#line 26616 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 706: /* select_with_parens: '(' select_with_parens ')'  */
#line 53 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.node) = (yyvsp[-1].node); }
#line 26622 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 707: /* select_with_parens: '(' VariableShowStmt ')'  */
#line 55 "third_party/libpg_query/grammar/statements/select.y"
                    {
		    	(yyval.node) = (yyvsp[-1].node);
			}
#line 26630 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 708: /* select_no_parens: simple_select  */
#line 72 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 26636 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 709: /* select_no_parens: select_clause sort_clause  */
#line 74 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-1].node), (yyvsp[0].list), NIL,
										NULL, NULL, NULL,
										yyscanner);
					(yyval.node) = (yyvsp[-1].node);
				}
#line 26647 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 710: /* select_no_parens: select_clause opt_sort_clause for_locking_clause opt_select_limit  */
#line 81 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-3].node), (yyvsp[-2].list), (yyvsp[-1].list),
										(PGNode*) list_nth((yyvsp[0].list), 0), (PGNode*) list_nth((yyvsp[0].list), 1),
										NULL,
										yyscanner);
					(yyval.node) = (yyvsp[-3].node);
				}
#line 26659 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 711: /* select_no_parens: select_clause opt_sort_clause select_limit opt_for_locking_clause  */
#line 89 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-3].node), (yyvsp[-2].list), (yyvsp[0].list),
										(PGNode*) list_nth((yyvsp[-1].list), 0), (PGNode*) list_nth((yyvsp[-1].list), 1),
										NULL,
										yyscanner);
					(yyval.node) = (yyvsp[-3].node);
				}
#line 26671 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 712: /* select_no_parens: with_clause select_clause  */
#line 97 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[0].node), NULL, NIL,
										NULL, NULL,
										(yyvsp[-1].with),
										yyscanner);
					(yyval.node) = (yyvsp[0].node);
				}
#line 26683 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 713: /* select_no_parens: with_clause select_clause sort_clause  */
#line 105 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-1].node), (yyvsp[0].list), NIL,
										NULL, NULL,
										(yyvsp[-2].with),
										yyscanner);
					(yyval.node) = (yyvsp[-1].node);
				}
#line 26695 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 714: /* select_no_parens: with_clause select_clause opt_sort_clause for_locking_clause opt_select_limit  */
#line 113 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-3].node), (yyvsp[-2].list), (yyvsp[-1].list),
										(PGNode*) list_nth((yyvsp[0].list), 0), (PGNode*) list_nth((yyvsp[0].list), 1),
										(yyvsp[-4].with),
										yyscanner);
					(yyval.node) = (yyvsp[-3].node);
				}
#line 26707 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 715: /* select_no_parens: with_clause select_clause opt_sort_clause select_limit opt_for_locking_clause  */
#line 121 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-3].node), (yyvsp[-2].list), (yyvsp[0].list),
										(PGNode*) list_nth((yyvsp[-1].list), 0), (PGNode*) list_nth((yyvsp[-1].list), 1),
										(yyvsp[-4].with),
										yyscanner);
					(yyval.node) = (yyvsp[-3].node);
				}
#line 26719 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 716: /* select_clause: simple_select  */
#line 131 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 26725 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 717: /* select_clause: select_with_parens  */
#line 132 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 26731 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 718: /* opt_select: SELECT opt_all_clause opt_target_list_opt_comma  */
#line 160 "third_party/libpg_query/grammar/statements/select.y"
                        {
				(yyval.list) = (yyvsp[0].list);
			}
#line 26739 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 719: /* opt_select: %empty  */
#line 164 "third_party/libpg_query/grammar/statements/select.y"
                        {
				PGAStar *star = makeNode(PGAStar);
				(yyval.list) = list_make1(star);
			}
#line 26748 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 720: /* simple_select: SELECT opt_all_clause opt_target_list_opt_comma into_clause from_clause where_clause group_clause having_clause window_clause qualify_clause sample_clause  */
#line 175 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *n = makeNode(PGSelectStmt);
					n->targetList = (yyvsp[-8].list);
					n->intoClause = (yyvsp[-7].into);
					n->fromClause = (yyvsp[-6].list);
					n->whereClause = (yyvsp[-5].node);
					n->groupClause = (yyvsp[-4].list);
					n->havingClause = (yyvsp[-3].node);
					n->windowClause = (yyvsp[-2].list);
					n->qualifyClause = (yyvsp[-1].node);
					n->sampleOptions = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 26766 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 721: /* simple_select: SELECT distinct_clause target_list_opt_comma into_clause from_clause where_clause group_clause having_clause window_clause qualify_clause sample_clause  */
#line 191 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *n = makeNode(PGSelectStmt);
					n->distinctClause = (yyvsp[-9].list);
					n->targetList = (yyvsp[-8].list);
					n->intoClause = (yyvsp[-7].into);
					n->fromClause = (yyvsp[-6].list);
					n->whereClause = (yyvsp[-5].node);
					n->groupClause = (yyvsp[-4].list);
					n->havingClause = (yyvsp[-3].node);
					n->windowClause = (yyvsp[-2].list);
					n->qualifyClause = (yyvsp[-1].node);
					n->sampleOptions = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 26785 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 722: /* simple_select: FROM from_list opt_select into_clause where_clause group_clause having_clause window_clause qualify_clause sample_clause  */
#line 208 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *n = makeNode(PGSelectStmt);
					n->targetList = (yyvsp[-7].list);
					n->fromClause = (yyvsp[-8].list);
					n->intoClause = (yyvsp[-6].into);
					n->whereClause = (yyvsp[-5].node);
					n->groupClause = (yyvsp[-4].list);
					n->havingClause = (yyvsp[-3].node);
					n->windowClause = (yyvsp[-2].list);
					n->qualifyClause = (yyvsp[-1].node);
					n->sampleOptions = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 26803 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 723: /* simple_select: FROM from_list SELECT distinct_clause target_list_opt_comma into_clause where_clause group_clause having_clause window_clause qualify_clause sample_clause  */
#line 225 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *n = makeNode(PGSelectStmt);
					n->targetList = (yyvsp[-7].list);
					n->distinctClause = (yyvsp[-8].list);
					n->fromClause = (yyvsp[-10].list);
					n->intoClause = (yyvsp[-6].into);
					n->whereClause = (yyvsp[-5].node);
					n->groupClause = (yyvsp[-4].list);
					n->havingClause = (yyvsp[-3].node);
					n->windowClause = (yyvsp[-2].list);
					n->qualifyClause = (yyvsp[-1].node);
					n->sampleOptions = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 26822 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 724: /* simple_select: values_clause_opt_comma  */
#line 239 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 26828 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 725: /* simple_select: TABLE relation_expr  */
#line 241 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* same as SELECT * FROM relation_expr */
					PGColumnRef *cr = makeNode(PGColumnRef);
					PGResTarget *rt = makeNode(PGResTarget);
					PGSelectStmt *n = makeNode(PGSelectStmt);

					cr->fields = list_make1(makeNode(PGAStar));
					cr->location = -1;

					rt->name = NULL;
					rt->indirection = NIL;
					rt->val = (PGNode *)cr;
					rt->location = -1;

					n->targetList = list_make1(rt);
					n->fromClause = list_make1((yyvsp[0].range));
					(yyval.node) = (PGNode *)n;
				}
#line 26851 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 726: /* simple_select: select_clause UNION all_or_distinct by_name select_clause  */
#line 260 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSetOp(PG_SETOP_UNION_BY_NAME, (yyvsp[-2].boolean), (yyvsp[-4].node), (yyvsp[0].node));
				}
#line 26859 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 727: /* simple_select: select_clause UNION all_or_distinct select_clause  */
#line 264 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSetOp(PG_SETOP_UNION, (yyvsp[-1].boolean), (yyvsp[-3].node), (yyvsp[0].node));
				}
#line 26867 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 728: /* simple_select: select_clause INTERSECT all_or_distinct select_clause  */
#line 268 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSetOp(PG_SETOP_INTERSECT, (yyvsp[-1].boolean), (yyvsp[-3].node), (yyvsp[0].node));
				}
#line 26875 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 729: /* simple_select: select_clause EXCEPT all_or_distinct select_clause  */
#line 272 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSetOp(PG_SETOP_EXCEPT, (yyvsp[-1].boolean), (yyvsp[-3].node), (yyvsp[0].node));
				}
#line 26883 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 730: /* simple_select: pivot_keyword table_ref USING target_list_opt_comma  */
#line 276 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *res = makeNode(PGSelectStmt);
					PGPivotStmt *n = makeNode(PGPivotStmt);
					n->source = (yyvsp[-2].node);
					n->aggrs = (yyvsp[0].list);
					n->location = (yylsp[-3]);
					res->pivot = n;
					(yyval.node) = (PGNode *)res;
				}
#line 26897 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 731: /* simple_select: pivot_keyword table_ref USING target_list_opt_comma GROUP_P BY name_list_opt_comma_opt_bracket  */
#line 286 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *res = makeNode(PGSelectStmt);
					PGPivotStmt *n = makeNode(PGPivotStmt);
					n->source = (yyvsp[-5].node);
					n->aggrs = (yyvsp[-3].list);
					n->groups = (yyvsp[0].list);
					n->location = (yylsp[-6]);
					res->pivot = n;
					(yyval.node) = (PGNode *)res;
				}
#line 26912 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 732: /* simple_select: pivot_keyword table_ref GROUP_P BY name_list_opt_comma_opt_bracket  */
#line 297 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *res = makeNode(PGSelectStmt);
					PGPivotStmt *n = makeNode(PGPivotStmt);
					n->source = (yyvsp[-3].node);
					n->groups = (yyvsp[0].list);
					n->location = (yylsp[-4]);
					res->pivot = n;
					(yyval.node) = (PGNode *)res;
				}
#line 26926 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 733: /* simple_select: pivot_keyword table_ref ON pivot_column_list  */
#line 307 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *res = makeNode(PGSelectStmt);
					PGPivotStmt *n = makeNode(PGPivotStmt);
					n->source = (yyvsp[-2].node);
					n->columns = (yyvsp[0].list);
					res->pivot = n;
					(yyval.node) = (PGNode *)res;
				}
#line 26939 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 734: /* simple_select: pivot_keyword table_ref ON pivot_column_list GROUP_P BY name_list_opt_comma_opt_bracket  */
#line 316 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *res = makeNode(PGSelectStmt);
					PGPivotStmt *n = makeNode(PGPivotStmt);
					n->source = (yyvsp[-5].node);
					n->columns = (yyvsp[-3].list);
					n->groups = (yyvsp[0].list);
					n->location = (yylsp[-6]);
					res->pivot = n;
					(yyval.node) = (PGNode *)res;
				}
#line 26954 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 735: /* simple_select: pivot_keyword table_ref ON pivot_column_list USING target_list_opt_comma  */
#line 327 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *res = makeNode(PGSelectStmt);
					PGPivotStmt *n = makeNode(PGPivotStmt);
					n->source = (yyvsp[-4].node);
					n->columns = (yyvsp[-2].list);
					n->aggrs = (yyvsp[0].list);
					n->location = (yylsp[-5]);
					res->pivot = n;
					(yyval.node) = (PGNode *)res;
				}
#line 26969 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 736: /* simple_select: pivot_keyword table_ref ON pivot_column_list USING target_list_opt_comma GROUP_P BY name_list_opt_comma_opt_bracket  */
#line 338 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *res = makeNode(PGSelectStmt);
					PGPivotStmt *n = makeNode(PGPivotStmt);
					n->source = (yyvsp[-7].node);
					n->columns = (yyvsp[-5].list);
					n->aggrs = (yyvsp[-3].list);
					n->groups = (yyvsp[0].list);
					n->location = (yylsp[-8]);
					res->pivot = n;
					(yyval.node) = (PGNode *)res;
				}
#line 26985 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 737: /* simple_select: unpivot_keyword table_ref ON target_list_opt_comma INTO NAME_P name value_or_values name_list_opt_comma_opt_bracket  */
#line 350 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *res = makeNode(PGSelectStmt);
					PGPivotStmt *n = makeNode(PGPivotStmt);
					n->source = (yyvsp[-7].node);
					n->unpivots = (yyvsp[0].list);
					n->location = (yylsp[-8]);
					PGPivot *piv = makeNode(PGPivot);
					piv->unpivot_columns = list_make1(makeString((yyvsp[-2].str)));
					piv->pivot_value = (yyvsp[-5].list);
					n->columns = list_make1(piv);

					res->pivot = n;
					(yyval.node) = (PGNode *)res;
				}
#line 27004 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 738: /* simple_select: unpivot_keyword table_ref ON target_list_opt_comma  */
#line 365 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *res = makeNode(PGSelectStmt);
					PGPivotStmt *n = makeNode(PGPivotStmt);
					n->source = (yyvsp[-2].node);
					n->unpivots = list_make1(makeString("value"));
					n->location = (yylsp[-3]);
					PGPivot *piv = makeNode(PGPivot);
					piv->unpivot_columns = list_make1(makeString("name"));
					piv->pivot_value = (yyvsp[0].list);
					n->columns = list_make1(piv);

					res->pivot = n;
					(yyval.node) = (PGNode *)res;
				}
#line 27023 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 745: /* pivot_column_entry: b_expr  */
#line 395 "third_party/libpg_query/grammar/statements/select.y"
                        {
				PGPivot *n = makeNode(PGPivot);
				n->pivot_columns = list_make1((yyvsp[0].node));
				(yyval.node) = (PGNode *) n;
			}
#line 27033 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 746: /* pivot_column_entry: b_expr IN_P '(' select_no_parens ')'  */
#line 401 "third_party/libpg_query/grammar/statements/select.y"
                        {
				PGPivot *n = makeNode(PGPivot);
				n->pivot_columns = list_make1((yyvsp[-4].node));
				n->subquery = (yyvsp[-1].node);
				(yyval.node) = (PGNode *) n;
			}
#line 27044 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 747: /* pivot_column_entry: single_pivot_value  */
#line 407 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 27050 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 748: /* pivot_column_list_internal: pivot_column_entry  */
#line 411 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 27056 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 749: /* pivot_column_list_internal: pivot_column_list_internal ',' pivot_column_entry  */
#line 412 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 27062 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 750: /* pivot_column_list: pivot_column_list_internal  */
#line 416 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 27068 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 751: /* pivot_column_list: pivot_column_list_internal ','  */
#line 417 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 27074 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 752: /* with_clause: WITH cte_list  */
#line 432 "third_party/libpg_query/grammar/statements/select.y"
                        {
				(yyval.with) = makeNode(PGWithClause);
				(yyval.with)->ctes = (yyvsp[0].list);
				(yyval.with)->recursive = false;
				(yyval.with)->location = (yylsp[-1]);
			}
#line 27085 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 753: /* with_clause: WITH_LA cte_list  */
#line 439 "third_party/libpg_query/grammar/statements/select.y"
                        {
				(yyval.with) = makeNode(PGWithClause);
				(yyval.with)->ctes = (yyvsp[0].list);
				(yyval.with)->recursive = false;
				(yyval.with)->location = (yylsp[-1]);
			}
#line 27096 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 754: /* with_clause: WITH RECURSIVE cte_list  */
#line 446 "third_party/libpg_query/grammar/statements/select.y"
                        {
				(yyval.with) = makeNode(PGWithClause);
				(yyval.with)->ctes = (yyvsp[0].list);
				(yyval.with)->recursive = true;
				(yyval.with)->location = (yylsp[-2]);
			}
#line 27107 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 755: /* cte_list: common_table_expr  */
#line 455 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 27113 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 756: /* cte_list: cte_list ',' common_table_expr  */
#line 456 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 27119 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 757: /* common_table_expr: name opt_name_list AS opt_materialized '(' PreparableStmt ')'  */
#line 460 "third_party/libpg_query/grammar/statements/select.y"
                        {
				PGCommonTableExpr *n = makeNode(PGCommonTableExpr);
				n->ctename = (yyvsp[-6].str);
				n->aliascolnames = (yyvsp[-5].list);
				n->ctematerialized = (yyvsp[-3].ctematerialize);
				n->ctequery = (yyvsp[-1].node);
				n->location = (yylsp[-6]);
				(yyval.node) = (PGNode *) n;
			}
#line 27133 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 758: /* opt_materialized: MATERIALIZED  */
#line 472 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.ctematerialize) = PGCTEMaterializeAlways; }
#line 27139 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 759: /* opt_materialized: NOT MATERIALIZED  */
#line 473 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.ctematerialize) = PGCTEMaterializeNever; }
#line 27145 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 760: /* opt_materialized: %empty  */
#line 474 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.ctematerialize) = PGCTEMaterializeDefault; }
#line 27151 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 761: /* into_clause: INTO OptTempTableName  */
#line 479 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.into) = makeNode(PGIntoClause);
					(yyval.into)->rel = (yyvsp[0].range);
					(yyval.into)->colNames = NIL;
					(yyval.into)->options = NIL;
					(yyval.into)->onCommit = PG_ONCOMMIT_NOOP;
					(yyval.into)->viewQuery = NULL;
					(yyval.into)->skipData = false;
				}
#line 27165 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 762: /* into_clause: %empty  */
#line 489 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.into) = NULL; }
#line 27171 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 763: /* OptTempTableName: TEMPORARY opt_table qualified_name  */
#line 498 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 27180 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 764: /* OptTempTableName: TEMP opt_table qualified_name  */
#line 503 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 27189 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 765: /* OptTempTableName: LOCAL TEMPORARY opt_table qualified_name  */
#line 508 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 27198 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 766: /* OptTempTableName: LOCAL TEMP opt_table qualified_name  */
#line 513 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 27207 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 767: /* OptTempTableName: GLOBAL TEMPORARY opt_table qualified_name  */
#line 518 "third_party/libpg_query/grammar/statements/select.y"
                                {
					ereport(PGWARNING,
							(errmsg("GLOBAL is deprecated in temporary table creation"),
							 parser_errposition((yylsp[-3]))));
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 27219 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 768: /* OptTempTableName: GLOBAL TEMP opt_table qualified_name  */
#line 526 "third_party/libpg_query/grammar/statements/select.y"
                                {
					ereport(PGWARNING,
							(errmsg("GLOBAL is deprecated in temporary table creation"),
							 parser_errposition((yylsp[-3]))));
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 27231 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 769: /* OptTempTableName: UNLOGGED opt_table qualified_name  */
#line 534 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_UNLOGGED;
				}
#line 27240 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 770: /* OptTempTableName: TABLE qualified_name  */
#line 539 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = RELPERSISTENCE_PERMANENT;
				}
#line 27249 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 771: /* OptTempTableName: qualified_name  */
#line 544 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = RELPERSISTENCE_PERMANENT;
				}
#line 27258 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 772: /* opt_table: TABLE  */
#line 550 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        {}
#line 27264 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 773: /* opt_table: %empty  */
#line 551 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                {}
#line 27270 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 774: /* all_or_distinct: ALL  */
#line 555 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.boolean) = true; }
#line 27276 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 775: /* all_or_distinct: DISTINCT  */
#line 556 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 27282 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 776: /* all_or_distinct: %empty  */
#line 557 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 27288 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 777: /* by_name: BY NAME_P  */
#line 561 "third_party/libpg_query/grammar/statements/select.y"
                                                          { }
#line 27294 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 778: /* distinct_clause: DISTINCT  */
#line 568 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1(NIL); }
#line 27300 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 779: /* distinct_clause: DISTINCT ON '(' expr_list_opt_comma ')'  */
#line 569 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 27306 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 780: /* opt_all_clause: ALL  */
#line 573 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.list) = NIL;}
#line 27312 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 781: /* opt_all_clause: %empty  */
#line 574 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 27318 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 782: /* opt_ignore_nulls: IGNORE_P NULLS_P  */
#line 578 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.ignorenulls) = PG_IGNORE_NULLS;}
#line 27324 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 783: /* opt_ignore_nulls: RESPECT_P NULLS_P  */
#line 579 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.ignorenulls) = PG_RESPECT_NULLS;}
#line 27330 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 784: /* opt_ignore_nulls: %empty  */
#line 580 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.ignorenulls) = PG_DEFAULT_NULLS; }
#line 27336 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 785: /* opt_sort_clause: sort_clause  */
#line 584 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list);}
#line 27342 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 786: /* opt_sort_clause: %empty  */
#line 585 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 27348 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 787: /* sort_clause: ORDER BY sortby_list  */
#line 589 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 27354 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 788: /* sort_clause: ORDER BY ALL opt_asc_desc opt_nulls_order  */
#line 591 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSortBy *sort = makeNode(PGSortBy);
					PGAStar *star = makeNode(PGAStar);
					star->columns = true;
					star->location = (yylsp[-2]);
					sort->node = (PGNode *) star;
					sort->sortby_dir = (yyvsp[-1].sortorder);
					sort->sortby_nulls = (yyvsp[0].nullorder);
					sort->useOp = NIL;
					sort->location = -1;		/* no operator */
					(yyval.list) = list_make1(sort);
				}
#line 27371 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 789: /* sortby_list: sortby  */
#line 606 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].sortby)); }
#line 27377 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 790: /* sortby_list: sortby_list ',' sortby  */
#line 607 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].sortby)); }
#line 27383 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 791: /* sortby: a_expr USING qual_all_Op opt_nulls_order  */
#line 611 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.sortby) = makeNode(PGSortBy);
					(yyval.sortby)->node = (yyvsp[-3].node);
					(yyval.sortby)->sortby_dir = SORTBY_USING;
					(yyval.sortby)->sortby_nulls = (yyvsp[0].nullorder);
					(yyval.sortby)->useOp = (yyvsp[-1].list);
					(yyval.sortby)->location = (yylsp[-1]);
				}
#line 27396 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 792: /* sortby: a_expr opt_asc_desc opt_nulls_order  */
#line 620 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.sortby) = makeNode(PGSortBy);
					(yyval.sortby)->node = (yyvsp[-2].node);
					(yyval.sortby)->sortby_dir = (yyvsp[-1].sortorder);
					(yyval.sortby)->sortby_nulls = (yyvsp[0].nullorder);
					(yyval.sortby)->useOp = NIL;
					(yyval.sortby)->location = -1;		/* no operator */
				}
#line 27409 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 793: /* opt_asc_desc: ASC_P  */
#line 630 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.sortorder) = PG_SORTBY_ASC; }
#line 27415 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 794: /* opt_asc_desc: DESC_P  */
#line 631 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.sortorder) = PG_SORTBY_DESC; }
#line 27421 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 795: /* opt_asc_desc: %empty  */
#line 632 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.sortorder) = PG_SORTBY_DEFAULT; }
#line 27427 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 796: /* opt_nulls_order: NULLS_LA FIRST_P  */
#line 635 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.nullorder) = PG_SORTBY_NULLS_FIRST; }
#line 27433 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 797: /* opt_nulls_order: NULLS_LA LAST_P  */
#line 636 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.nullorder) = PG_SORTBY_NULLS_LAST; }
#line 27439 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 798: /* opt_nulls_order: %empty  */
#line 637 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.nullorder) = PG_SORTBY_NULLS_DEFAULT; }
#line 27445 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 799: /* select_limit: limit_clause offset_clause  */
#line 641 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = list_make2((yyvsp[0].node), (yyvsp[-1].node)); }
#line 27451 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 800: /* select_limit: offset_clause limit_clause  */
#line 642 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = list_make2((yyvsp[-1].node), (yyvsp[0].node)); }
#line 27457 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 801: /* select_limit: limit_clause  */
#line 643 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = list_make2(NULL, (yyvsp[0].node)); }
#line 27463 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 802: /* select_limit: offset_clause  */
#line 644 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = list_make2((yyvsp[0].node), NULL); }
#line 27469 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 803: /* opt_select_limit: select_limit  */
#line 648 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 27475 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 804: /* opt_select_limit: %empty  */
#line 649 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = list_make2(NULL,NULL); }
#line 27481 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 805: /* limit_clause: LIMIT select_limit_value  */
#line 654 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 27487 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 806: /* limit_clause: LIMIT select_limit_value ',' select_offset_value  */
#line 656 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* Disabled because it was too confusing, bjm 2002-02-18 */
					ereport(ERROR,
							(errcode(PG_ERRCODE_SYNTAX_ERROR),
							 errmsg("LIMIT #,# syntax is not supported"),
							 errhint("Use separate LIMIT and OFFSET clauses."),
							 parser_errposition((yylsp[-3]))));
				}
#line 27500 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 807: /* limit_clause: FETCH first_or_next select_fetch_first_value row_or_rows ONLY  */
#line 672 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[-2].node); }
#line 27506 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 808: /* limit_clause: FETCH first_or_next row_or_rows ONLY  */
#line 674 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeIntConst(1, -1); }
#line 27512 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 809: /* offset_clause: OFFSET select_offset_value  */
#line 679 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 27518 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 810: /* offset_clause: OFFSET select_fetch_first_value row_or_rows  */
#line 682 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[-1].node); }
#line 27524 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 811: /* sample_count: FCONST '%'  */
#line 690 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleSize(makeFloat((yyvsp[-1].str)), true);
		}
#line 27532 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 812: /* sample_count: ICONST '%'  */
#line 694 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleSize(makeInteger((yyvsp[-1].ival)), true);
		}
#line 27540 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 813: /* sample_count: FCONST PERCENT  */
#line 698 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleSize(makeFloat((yyvsp[-1].str)), true);
		}
#line 27548 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 814: /* sample_count: ICONST PERCENT  */
#line 702 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleSize(makeInteger((yyvsp[-1].ival)), true);
		}
#line 27556 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 815: /* sample_count: ICONST  */
#line 706 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleSize(makeInteger((yyvsp[0].ival)), false);
		}
#line 27564 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 816: /* sample_count: ICONST ROWS  */
#line 710 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleSize(makeInteger((yyvsp[-1].ival)), false);
		}
#line 27572 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 817: /* sample_clause: USING SAMPLE tablesample_entry  */
#line 717 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (yyvsp[0].node);
				}
#line 27580 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 818: /* sample_clause: %empty  */
#line 721 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = NULL; }
#line 27586 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 819: /* opt_sample_func: ColId  */
#line 728 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.str) = (yyvsp[0].str); }
#line 27592 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 820: /* opt_sample_func: %empty  */
#line 729 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.str) = NULL; }
#line 27598 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 821: /* tablesample_entry: opt_sample_func '(' sample_count ')' opt_repeatable_clause  */
#line 734 "third_party/libpg_query/grammar/statements/select.y"
                                {
					int seed = (yyvsp[0].ival);
					(yyval.node) = makeSampleOptions((yyvsp[-2].node), (yyvsp[-4].str), &seed, (yylsp[-4]));
				}
#line 27607 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 822: /* tablesample_entry: sample_count  */
#line 739 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleOptions((yyvsp[0].node), NULL, NULL, (yylsp[0]));
		}
#line 27615 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 823: /* tablesample_entry: sample_count '(' ColId ')'  */
#line 743 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleOptions((yyvsp[-3].node), (yyvsp[-1].str), NULL, (yylsp[-3]));
		}
#line 27623 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 824: /* tablesample_entry: sample_count '(' ColId ',' ICONST ')'  */
#line 747 "third_party/libpg_query/grammar/statements/select.y"
                {
			int seed = (yyvsp[-1].ival);
			(yyval.node) = makeSampleOptions((yyvsp[-5].node), (yyvsp[-3].str), &seed, (yylsp[-5]));
		}
#line 27632 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 825: /* tablesample_clause: TABLESAMPLE tablesample_entry  */
#line 755 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (yyvsp[0].node);
				}
#line 27640 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 826: /* opt_tablesample_clause: tablesample_clause  */
#line 761 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.node) = (yyvsp[0].node); }
#line 27646 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 827: /* opt_tablesample_clause: %empty  */
#line 762 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.node) = NULL; }
#line 27652 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 828: /* opt_repeatable_clause: REPEATABLE '(' ICONST ')'  */
#line 767 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.ival) = (yyvsp[-1].ival); }
#line 27658 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 829: /* opt_repeatable_clause: %empty  */
#line 768 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.ival) = -1; }
#line 27664 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 830: /* select_limit_value: a_expr  */
#line 772 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 27670 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 831: /* select_limit_value: ALL  */
#line 774 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* LIMIT ALL is represented as a NULL constant */
					(yyval.node) = makeNullAConst((yylsp[0]));
				}
#line 27679 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 832: /* select_limit_value: a_expr '%'  */
#line 779 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeLimitPercent((yyvsp[-1].node)); }
#line 27685 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 833: /* select_limit_value: FCONST PERCENT  */
#line 781 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeLimitPercent(makeFloatConst((yyvsp[-1].str),(yylsp[-1]))); }
#line 27691 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 834: /* select_limit_value: ICONST PERCENT  */
#line 783 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeLimitPercent(makeIntConst((yyvsp[-1].ival),(yylsp[-1]))); }
#line 27697 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 835: /* select_offset_value: a_expr  */
#line 787 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 27703 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 836: /* select_fetch_first_value: c_expr  */
#line 807 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 27709 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 837: /* select_fetch_first_value: '+' I_or_F_const  */
#line 809 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", NULL, (yyvsp[0].node), (yylsp[-1])); }
#line 27715 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 838: /* select_fetch_first_value: '-' I_or_F_const  */
#line 811 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = doNegate((yyvsp[0].node), (yylsp[-1])); }
#line 27721 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 839: /* I_or_F_const: Iconst  */
#line 815 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = makeIntConst((yyvsp[0].ival),(yylsp[0])); }
#line 27727 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 840: /* I_or_F_const: FCONST  */
#line 816 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = makeFloatConst((yyvsp[0].str),(yylsp[0])); }
#line 27733 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 841: /* row_or_rows: ROW  */
#line 820 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.ival) = 0; }
#line 27739 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 842: /* row_or_rows: ROWS  */
#line 821 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.ival) = 0; }
#line 27745 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 843: /* first_or_next: FIRST_P  */
#line 824 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.ival) = 0; }
#line 27751 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 844: /* first_or_next: NEXT  */
#line 825 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.ival) = 0; }
#line 27757 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 845: /* group_clause: GROUP_P BY group_by_list_opt_comma  */
#line 850 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 27763 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 846: /* group_clause: GROUP_P BY ALL  */
#line 852 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNode *node = (PGNode *) makeGroupingSet(GROUPING_SET_ALL, NIL, (yylsp[0]));
					(yyval.list) = list_make1(node);
				}
#line 27772 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 847: /* group_clause: %empty  */
#line 856 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 27778 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 848: /* group_by_list: group_by_item  */
#line 860 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 27784 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 849: /* group_by_list: group_by_list ',' group_by_item  */
#line 861 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list),(yyvsp[0].node)); }
#line 27790 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 850: /* group_by_list_opt_comma: group_by_list  */
#line 865 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 27796 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 851: /* group_by_list_opt_comma: group_by_list ','  */
#line 866 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 27802 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 852: /* group_by_item: a_expr  */
#line 870 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 27808 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 853: /* group_by_item: empty_grouping_set  */
#line 871 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 27814 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 854: /* group_by_item: cube_clause  */
#line 872 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 27820 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 855: /* group_by_item: rollup_clause  */
#line 873 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 27826 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 856: /* group_by_item: grouping_sets_clause  */
#line 874 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 27832 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 857: /* empty_grouping_set: '(' ')'  */
#line 879 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeGroupingSet(GROUPING_SET_EMPTY, NIL, (yylsp[-1]));
				}
#line 27840 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 858: /* rollup_clause: ROLLUP '(' expr_list_opt_comma ')'  */
#line 892 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeGroupingSet(GROUPING_SET_ROLLUP, (yyvsp[-1].list), (yylsp[-3]));
				}
#line 27848 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 859: /* cube_clause: CUBE '(' expr_list_opt_comma ')'  */
#line 899 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeGroupingSet(GROUPING_SET_CUBE, (yyvsp[-1].list), (yylsp[-3]));
				}
#line 27856 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 860: /* grouping_sets_clause: GROUPING SETS '(' group_by_list_opt_comma ')'  */
#line 906 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeGroupingSet(GROUPING_SET_SETS, (yyvsp[-1].list), (yylsp[-4]));
				}
#line 27864 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 861: /* grouping_or_grouping_id: GROUPING  */
#line 912 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = NULL; }
#line 27870 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 862: /* grouping_or_grouping_id: GROUPING_ID  */
#line 913 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = NULL; }
#line 27876 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 863: /* having_clause: HAVING a_expr  */
#line 917 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 27882 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 864: /* having_clause: %empty  */
#line 918 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 27888 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 865: /* qualify_clause: QUALIFY a_expr  */
#line 922 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 27894 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 866: /* qualify_clause: %empty  */
#line 923 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 27900 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 867: /* for_locking_clause: for_locking_items  */
#line 927 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 27906 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 868: /* for_locking_clause: FOR READ_P ONLY  */
#line 928 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 27912 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 869: /* opt_for_locking_clause: for_locking_clause  */
#line 932 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 27918 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 870: /* opt_for_locking_clause: %empty  */
#line 933 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = NIL; }
#line 27924 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 871: /* for_locking_items: for_locking_item  */
#line 937 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 27930 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 872: /* for_locking_items: for_locking_items for_locking_item  */
#line 938 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 27936 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 873: /* for_locking_item: for_locking_strength locked_rels_list opt_nowait_or_skip  */
#line 943 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGLockingClause *n = makeNode(PGLockingClause);
					n->lockedRels = (yyvsp[-1].list);
					n->strength = (yyvsp[-2].lockstrength);
					n->waitPolicy = (yyvsp[0].lockwaitpolicy);
					(yyval.node) = (PGNode *) n;
				}
#line 27948 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 874: /* for_locking_strength: FOR UPDATE  */
#line 953 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.lockstrength) = LCS_FORUPDATE; }
#line 27954 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 875: /* for_locking_strength: FOR NO KEY UPDATE  */
#line 954 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.lockstrength) = PG_LCS_FORNOKEYUPDATE; }
#line 27960 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 876: /* for_locking_strength: FOR SHARE  */
#line 955 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.lockstrength) = PG_LCS_FORSHARE; }
#line 27966 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 877: /* for_locking_strength: FOR KEY SHARE  */
#line 956 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.lockstrength) = PG_LCS_FORKEYSHARE; }
#line 27972 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 878: /* locked_rels_list: OF qualified_name_list  */
#line 960 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 27978 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 879: /* locked_rels_list: %empty  */
#line 961 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = NIL; }
#line 27984 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 880: /* opt_nowait_or_skip: NOWAIT  */
#line 966 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.lockwaitpolicy) = LockWaitError; }
#line 27990 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 881: /* opt_nowait_or_skip: SKIP LOCKED  */
#line 967 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.lockwaitpolicy) = PGLockWaitSkip; }
#line 27996 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 882: /* opt_nowait_or_skip: %empty  */
#line 968 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.lockwaitpolicy) = PGLockWaitBlock; }
#line 28002 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 883: /* values_clause: VALUES '(' expr_list_opt_comma ')'  */
#line 978 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *n = makeNode(PGSelectStmt);
					n->valuesLists = list_make1((yyvsp[-1].list));
					(yyval.node) = (PGNode *) n;
				}
#line 28012 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 884: /* values_clause: values_clause ',' '(' expr_list_opt_comma ')'  */
#line 984 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *n = (PGSelectStmt *) (yyvsp[-4].node);
					n->valuesLists = lappend(n->valuesLists, (yyvsp[-1].list));
					(yyval.node) = (PGNode *) n;
				}
#line 28022 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 885: /* values_clause_opt_comma: values_clause  */
#line 992 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.node) = (yyvsp[0].node); }
#line 28028 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 886: /* values_clause_opt_comma: values_clause ','  */
#line 993 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.node) = (yyvsp[-1].node); }
#line 28034 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 887: /* from_clause: FROM from_list_opt_comma  */
#line 1006 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 28040 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 888: /* from_clause: %empty  */
#line 1007 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 28046 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 889: /* from_list: table_ref  */
#line 1011 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 28052 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 890: /* from_list: from_list ',' table_ref  */
#line 1012 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 28058 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 891: /* from_list_opt_comma: from_list  */
#line 1016 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 28064 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 892: /* from_list_opt_comma: from_list ','  */
#line 1017 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 28070 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 893: /* table_ref: relation_expr opt_alias_clause opt_tablesample_clause  */
#line 1024 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyvsp[-2].range)->alias = (yyvsp[-1].alias);
					(yyvsp[-2].range)->sample = (yyvsp[0].node);
					(yyval.node) = (PGNode *) (yyvsp[-2].range);
				}
#line 28080 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 894: /* table_ref: func_table func_alias_clause opt_tablesample_clause  */
#line 1030 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeFunction *n = (PGRangeFunction *) (yyvsp[-2].node);
					n->alias = (PGAlias*) linitial((yyvsp[-1].list));
					n->coldeflist = (PGList*) lsecond((yyvsp[-1].list));
					n->sample = (yyvsp[0].node);
					(yyval.node) = (PGNode *) n;
				}
#line 28092 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 895: /* table_ref: values_clause_opt_comma alias_clause opt_tablesample_clause  */
#line 1038 "third_party/libpg_query/grammar/statements/select.y"
                        {
				PGRangeSubselect *n = makeNode(PGRangeSubselect);
				n->lateral = false;
				n->subquery = (yyvsp[-2].node);
				n->alias = (yyvsp[-1].alias);
				n->sample = (yyvsp[0].node);
				(yyval.node) = (PGNode *) n;
			}
#line 28105 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 896: /* table_ref: LATERAL_P func_table func_alias_clause  */
#line 1047 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeFunction *n = (PGRangeFunction *) (yyvsp[-1].node);
					n->lateral = true;
					n->alias = (PGAlias*) linitial((yyvsp[0].list));
					n->coldeflist = (PGList*) lsecond((yyvsp[0].list));
					(yyval.node) = (PGNode *) n;
				}
#line 28117 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 897: /* table_ref: select_with_parens opt_alias_clause opt_tablesample_clause  */
#line 1055 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeSubselect *n = makeNode(PGRangeSubselect);
					n->lateral = false;
					n->subquery = (yyvsp[-2].node);
					n->alias = (yyvsp[-1].alias);
					n->sample = (yyvsp[0].node);
					(yyval.node) = (PGNode *) n;
				}
#line 28130 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 898: /* table_ref: LATERAL_P select_with_parens opt_alias_clause  */
#line 1064 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeSubselect *n = makeNode(PGRangeSubselect);
					n->lateral = true;
					n->subquery = (yyvsp[-1].node);
					n->alias = (yyvsp[0].alias);
					n->sample = NULL;
					(yyval.node) = (PGNode *) n;
				}
#line 28143 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 899: /* table_ref: joined_table  */
#line 1073 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) (yyvsp[0].jexpr);
				}
#line 28151 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 900: /* table_ref: '(' joined_table ')' alias_clause  */
#line 1077 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyvsp[-2].jexpr)->alias = (yyvsp[0].alias);
					(yyval.node) = (PGNode *) (yyvsp[-2].jexpr);
				}
#line 28160 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 901: /* table_ref: GRAPH_TABLE GraphTableStmt  */
#line 1082 "third_party/libpg_query/grammar/statements/select.y"
                {
                        (yyval.node) = (PGNode *) (yyvsp[0].node);
                }
#line 28168 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 902: /* table_ref: table_ref PIVOT '(' target_list_opt_comma FOR pivot_value_list opt_pivot_group_by ')' opt_alias_clause  */
#line 1086 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGPivotExpr *n = makeNode(PGPivotExpr);
					n->source = (yyvsp[-8].node);
					n->aggrs = (yyvsp[-5].list);
					n->pivots = (yyvsp[-3].list);
					n->groups = (yyvsp[-2].list);
					n->alias = (yyvsp[0].alias);
					n->location = (yylsp[-7]);
					(yyval.node) = (PGNode *) n;
				}
#line 28183 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 903: /* table_ref: table_ref UNPIVOT opt_include_nulls '(' unpivot_header FOR unpivot_value_list ')' opt_alias_clause  */
#line 1097 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGPivotExpr *n = makeNode(PGPivotExpr);
					n->source = (yyvsp[-8].node);
					n->include_nulls = (yyvsp[-6].boolean);
					n->unpivots = (yyvsp[-4].list);
					n->pivots = (yyvsp[-2].list);
					n->alias = (yyvsp[0].alias);
					n->location = (yylsp[-7]);
					(yyval.node) = (PGNode *) n;
				}
#line 28198 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 904: /* opt_pivot_group_by: GROUP_P BY name_list_opt_comma  */
#line 1110 "third_party/libpg_query/grammar/statements/select.y"
                                                { (yyval.list) = (yyvsp[0].list); }
#line 28204 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 905: /* opt_pivot_group_by: %empty  */
#line 1111 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = NULL; }
#line 28210 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 906: /* opt_include_nulls: INCLUDE_P NULLS_P  */
#line 1114 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.boolean) = true; }
#line 28216 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 907: /* opt_include_nulls: EXCLUDE NULLS_P  */
#line 1115 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.boolean) = false; }
#line 28222 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 908: /* opt_include_nulls: %empty  */
#line 1116 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.boolean) = false; }
#line 28228 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 909: /* single_pivot_value: b_expr IN_P '(' target_list_opt_comma ')'  */
#line 1120 "third_party/libpg_query/grammar/statements/select.y"
                {
			PGPivot *n = makeNode(PGPivot);
			n->pivot_columns = list_make1((yyvsp[-4].node));
			n->pivot_value = (yyvsp[-1].list);
			(yyval.node) = (PGNode *) n;
		}
#line 28239 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 910: /* single_pivot_value: b_expr IN_P ColIdOrString  */
#line 1128 "third_party/libpg_query/grammar/statements/select.y"
                {
			PGPivot *n = makeNode(PGPivot);
			n->pivot_columns = list_make1((yyvsp[-2].node));
			n->pivot_enum = (yyvsp[0].str);
			(yyval.node) = (PGNode *) n;
		}
#line 28250 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 912: /* pivot_header: d_expr  */
#line 1137 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 28256 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 913: /* pivot_header: indirection_expr  */
#line 1138 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 28262 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 914: /* pivot_header: '(' c_expr_list_opt_comma ')'  */
#line 1139 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 28268 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 915: /* pivot_value: pivot_header IN_P '(' target_list_opt_comma ')'  */
#line 1143 "third_party/libpg_query/grammar/statements/select.y"
                {
			PGPivot *n = makeNode(PGPivot);
			n->pivot_columns = (yyvsp[-4].list);
			n->pivot_value = (yyvsp[-1].list);
			(yyval.node) = (PGNode *) n;
		}
#line 28279 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 916: /* pivot_value: pivot_header IN_P ColIdOrString  */
#line 1151 "third_party/libpg_query/grammar/statements/select.y"
                {
			PGPivot *n = makeNode(PGPivot);
			n->pivot_columns = (yyvsp[-2].list);
			n->pivot_enum = (yyvsp[0].str);
			(yyval.node) = (PGNode *) n;
		}
#line 28290 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 917: /* pivot_value_list: pivot_value  */
#line 1160 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 28298 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 918: /* pivot_value_list: pivot_value_list pivot_value  */
#line 1164 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node));
				}
#line 28306 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 919: /* unpivot_header: ColIdOrString  */
#line 1170 "third_party/libpg_query/grammar/statements/select.y"
                                                          { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 28312 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 920: /* unpivot_header: '(' name_list_opt_comma ')'  */
#line 1171 "third_party/libpg_query/grammar/statements/select.y"
                                              { (yyval.list) = (yyvsp[-1].list); }
#line 28318 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 921: /* unpivot_value: unpivot_header IN_P '(' target_list_opt_comma ')'  */
#line 1176 "third_party/libpg_query/grammar/statements/select.y"
                {
			PGPivot *n = makeNode(PGPivot);
			n->unpivot_columns = (yyvsp[-4].list);
			n->pivot_value = (yyvsp[-1].list);
			(yyval.node) = (PGNode *) n;
		}
#line 28329 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 922: /* unpivot_value_list: unpivot_value  */
#line 1185 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 28337 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 923: /* unpivot_value_list: unpivot_value_list unpivot_value  */
#line 1189 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node));
				}
#line 28345 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 924: /* joined_table: '(' joined_table ')'  */
#line 1214 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.jexpr) = (yyvsp[-1].jexpr);
				}
#line 28353 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 925: /* joined_table: table_ref CROSS JOIN table_ref  */
#line 1218 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* CROSS JOIN is same as unqualified inner join */
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = PG_JOIN_INNER;
					n->joinreftype = PG_JOIN_REGULAR;
					n->larg = (yyvsp[-3].node);
					n->rarg = (yyvsp[0].node);
					n->usingClause = NIL;
					n->quals = NULL;
					n->location = (yylsp[-2]);
					(yyval.jexpr) = n;
				}
#line 28370 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 926: /* joined_table: table_ref join_type JOIN table_ref join_qual  */
#line 1231 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = (yyvsp[-3].jtype);
					n->joinreftype = PG_JOIN_REGULAR;
					n->larg = (yyvsp[-4].node);
					n->rarg = (yyvsp[-1].node);
					if ((yyvsp[0].node) != NULL && IsA((yyvsp[0].node), PGList))
						n->usingClause = (PGList *) (yyvsp[0].node); /* USING clause */
					else
						n->quals = (yyvsp[0].node); /* ON clause */
					n->location = (yylsp[-3]);
					(yyval.jexpr) = n;
				}
#line 28388 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 927: /* joined_table: table_ref JOIN table_ref join_qual  */
#line 1245 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* letting join_type reduce to empty doesn't work */
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = PG_JOIN_INNER;
					n->joinreftype = PG_JOIN_REGULAR;
					n->larg = (yyvsp[-3].node);
					n->rarg = (yyvsp[-1].node);
					if ((yyvsp[0].node) != NULL && IsA((yyvsp[0].node), PGList))
						n->usingClause = (PGList *) (yyvsp[0].node); /* USING clause */
					else
						n->quals = (yyvsp[0].node); /* ON clause */
					n->location = (yylsp[-2]);
					(yyval.jexpr) = n;
				}
#line 28407 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 928: /* joined_table: table_ref NATURAL join_type JOIN table_ref  */
#line 1260 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = (yyvsp[-2].jtype);
					n->joinreftype = PG_JOIN_NATURAL;
					n->larg = (yyvsp[-4].node);
					n->rarg = (yyvsp[0].node);
					n->usingClause = NIL; /* figure out which columns later... */
					n->quals = NULL; /* fill later */
					n->location = (yylsp[-3]);
					(yyval.jexpr) = n;
				}
#line 28423 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 929: /* joined_table: table_ref NATURAL JOIN table_ref  */
#line 1272 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* letting join_type reduce to empty doesn't work */
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = PG_JOIN_INNER;
					n->joinreftype = PG_JOIN_NATURAL;
					n->larg = (yyvsp[-3].node);
					n->rarg = (yyvsp[0].node);
					n->usingClause = NIL; /* figure out which columns later... */
					n->quals = NULL; /* fill later */
					n->location = (yylsp[-2]);
					(yyval.jexpr) = n;
				}
#line 28440 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 930: /* joined_table: table_ref ASOF join_type JOIN table_ref join_qual  */
#line 1285 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = (yyvsp[-3].jtype);
					n->joinreftype = PG_JOIN_ASOF;
					n->larg = (yyvsp[-5].node);
					n->rarg = (yyvsp[-1].node);
					if ((yyvsp[0].node) != NULL && IsA((yyvsp[0].node), PGList))
						n->usingClause = (PGList *) (yyvsp[0].node); /* USING clause */
					else
						n->quals = (yyvsp[0].node); /* ON clause */
					n->location = (yylsp[-4]);
					(yyval.jexpr) = n;
				}
#line 28458 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 931: /* joined_table: table_ref ASOF JOIN table_ref join_qual  */
#line 1299 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = PG_JOIN_INNER;
					n->joinreftype = PG_JOIN_ASOF;
					n->larg = (yyvsp[-4].node);
					n->rarg = (yyvsp[-1].node);
					if ((yyvsp[0].node) != NULL && IsA((yyvsp[0].node), PGList))
						n->usingClause = (PGList *) (yyvsp[0].node); /* USING clause */
					else
						n->quals = (yyvsp[0].node); /* ON clause */
					n->location = (yylsp[-3]);
					(yyval.jexpr) = n;
				}
#line 28476 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 932: /* joined_table: table_ref POSITIONAL JOIN table_ref  */
#line 1313 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* POSITIONAL JOIN is a coordinated scan */
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = PG_JOIN_POSITION;
					n->joinreftype = PG_JOIN_REGULAR;
					n->larg = (yyvsp[-3].node);
					n->rarg = (yyvsp[0].node);
					n->usingClause = NIL;
					n->quals = NULL;
					n->location = (yylsp[-2]);
					(yyval.jexpr) = n;
				}
#line 28493 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 933: /* joined_table: table_ref ANTI JOIN table_ref join_qual  */
#line 1326 "third_party/libpg_query/grammar/statements/select.y"
                {
                    /* ANTI JOIN is a filter */
                    PGJoinExpr *n = makeNode(PGJoinExpr);
                    n->jointype = PG_JOIN_ANTI;
                    n->joinreftype = PG_JOIN_REGULAR;
                    n->larg = (yyvsp[-4].node);
                    n->rarg = (yyvsp[-1].node);
                    if ((yyvsp[0].node) != NULL && IsA((yyvsp[0].node), PGList))
                        n->usingClause = (PGList *) (yyvsp[0].node); /* USING clause */
                    else
                        n->quals = (yyvsp[0].node); /* ON clause */
                    n->location = (yylsp[-3]);
                    (yyval.jexpr) = n;
                }
#line 28512 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 934: /* joined_table: table_ref SEMI JOIN table_ref join_qual  */
#line 1341 "third_party/libpg_query/grammar/statements/select.y"
               {
                   /* SEMI JOIN is also a filter */
                   PGJoinExpr *n = makeNode(PGJoinExpr);
                   n->jointype = PG_JOIN_SEMI;
                   n->joinreftype = PG_JOIN_REGULAR;
                   n->larg = (yyvsp[-4].node);
                   n->rarg = (yyvsp[-1].node);
                   if ((yyvsp[0].node) != NULL && IsA((yyvsp[0].node), PGList))
                       n->usingClause = (PGList *) (yyvsp[0].node); /* USING clause */
                   else
                       n->quals = (yyvsp[0].node); /* ON clause */
                   n->location = (yylsp[-3]);
                   n->location = (yylsp[-3]);
                   (yyval.jexpr) = n;
               }
#line 28532 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 935: /* alias_clause: AS ColIdOrString '(' name_list_opt_comma ')'  */
#line 1360 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.alias) = makeNode(PGAlias);
					(yyval.alias)->aliasname = (yyvsp[-3].str);
					(yyval.alias)->colnames = (yyvsp[-1].list);
				}
#line 28542 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 936: /* alias_clause: AS ColIdOrString  */
#line 1366 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.alias) = makeNode(PGAlias);
					(yyval.alias)->aliasname = (yyvsp[0].str);
				}
#line 28551 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 937: /* alias_clause: ColId '(' name_list_opt_comma ')'  */
#line 1371 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.alias) = makeNode(PGAlias);
					(yyval.alias)->aliasname = (yyvsp[-3].str);
					(yyval.alias)->colnames = (yyvsp[-1].list);
				}
#line 28561 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 938: /* alias_clause: ColId  */
#line 1377 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.alias) = makeNode(PGAlias);
					(yyval.alias)->aliasname = (yyvsp[0].str);
				}
#line 28570 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 939: /* opt_alias_clause: alias_clause  */
#line 1383 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.alias) = (yyvsp[0].alias); }
#line 28576 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 940: /* opt_alias_clause: %empty  */
#line 1384 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.alias) = NULL; }
#line 28582 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 941: /* func_alias_clause: alias_clause  */
#line 1393 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make2((yyvsp[0].alias), NIL);
				}
#line 28590 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 942: /* func_alias_clause: AS '(' TableFuncElementList ')'  */
#line 1397 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make2(NULL, (yyvsp[-1].list));
				}
#line 28598 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 943: /* func_alias_clause: AS ColIdOrString '(' TableFuncElementList ')'  */
#line 1401 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAlias *a = makeNode(PGAlias);
					a->aliasname = (yyvsp[-3].str);
					(yyval.list) = list_make2(a, (yyvsp[-1].list));
				}
#line 28608 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 944: /* func_alias_clause: ColId '(' TableFuncElementList ')'  */
#line 1407 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAlias *a = makeNode(PGAlias);
					a->aliasname = (yyvsp[-3].str);
					(yyval.list) = list_make2(a, (yyvsp[-1].list));
				}
#line 28618 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 945: /* func_alias_clause: %empty  */
#line 1413 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make2(NULL, NIL);
				}
#line 28626 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 946: /* join_type: FULL join_outer  */
#line 1418 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.jtype) = PG_JOIN_FULL; }
#line 28632 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 947: /* join_type: LEFT join_outer  */
#line 1419 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.jtype) = PG_JOIN_LEFT; }
#line 28638 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 948: /* join_type: RIGHT join_outer  */
#line 1420 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.jtype) = PG_JOIN_RIGHT; }
#line 28644 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 949: /* join_type: SEMI  */
#line 1421 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.jtype) = PG_JOIN_SEMI; }
#line 28650 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 950: /* join_type: ANTI  */
#line 1422 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.jtype) = PG_JOIN_ANTI; }
#line 28656 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 951: /* join_type: INNER_P  */
#line 1423 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.jtype) = PG_JOIN_INNER; }
#line 28662 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 952: /* join_outer: OUTER_P  */
#line 1427 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = NULL; }
#line 28668 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 953: /* join_outer: %empty  */
#line 1428 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 28674 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 954: /* join_qual: USING '(' name_list_opt_comma ')'  */
#line 1440 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (PGNode *) (yyvsp[-1].list); }
#line 28680 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 955: /* join_qual: ON a_expr  */
#line 1441 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 28686 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 956: /* relation_expr: qualified_name  */
#line 1447 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* inheritance query, implicitly */
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->inh = true;
					(yyval.range)->alias = NULL;
				}
#line 28697 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 957: /* relation_expr: qualified_name '*'  */
#line 1454 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* inheritance query, explicitly */
					(yyval.range) = (yyvsp[-1].range);
					(yyval.range)->inh = true;
					(yyval.range)->alias = NULL;
				}
#line 28708 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 958: /* relation_expr: ONLY qualified_name  */
#line 1461 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* no inheritance */
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->inh = false;
					(yyval.range)->alias = NULL;
				}
#line 28719 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 959: /* relation_expr: ONLY '(' qualified_name ')'  */
#line 1468 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* no inheritance, SQL99-style syntax */
					(yyval.range) = (yyvsp[-1].range);
					(yyval.range)->inh = false;
					(yyval.range)->alias = NULL;
				}
#line 28730 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 960: /* func_table: func_expr_windowless opt_ordinality  */
#line 1500 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeFunction *n = makeNode(PGRangeFunction);
					n->lateral = false;
					n->ordinality = (yyvsp[0].boolean);
					n->is_rowsfrom = false;
					n->functions = list_make1(list_make2((yyvsp[-1].node), NIL));
					n->sample = NULL;
					/* alias and coldeflist are set by table_ref production */
					(yyval.node) = (PGNode *) n;
				}
#line 28745 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 961: /* func_table: ROWS FROM '(' rowsfrom_list ')' opt_ordinality  */
#line 1511 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeFunction *n = makeNode(PGRangeFunction);
					n->lateral = false;
					n->ordinality = (yyvsp[0].boolean);
					n->is_rowsfrom = true;
					n->functions = (yyvsp[-2].list);
					n->sample = NULL;
					/* alias and coldeflist are set by table_ref production */
					(yyval.node) = (PGNode *) n;
				}
#line 28760 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 962: /* rowsfrom_item: func_expr_windowless opt_col_def_list  */
#line 1524 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make2((yyvsp[-1].node), (yyvsp[0].list)); }
#line 28766 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 963: /* rowsfrom_list: rowsfrom_item  */
#line 1528 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = list_make1((yyvsp[0].list)); }
#line 28772 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 964: /* rowsfrom_list: rowsfrom_list ',' rowsfrom_item  */
#line 1529 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].list)); }
#line 28778 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 965: /* opt_col_def_list: AS '(' TableFuncElementList ')'  */
#line 1532 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 28784 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 966: /* opt_col_def_list: %empty  */
#line 1533 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 28790 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 967: /* opt_ordinality: WITH_LA ORDINALITY  */
#line 1536 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.boolean) = true; }
#line 28796 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 968: /* opt_ordinality: %empty  */
#line 1537 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 28802 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 969: /* where_clause: WHERE a_expr  */
#line 1542 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 28808 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 970: /* where_clause: %empty  */
#line 1543 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 28814 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 971: /* TableFuncElementList: TableFuncElement  */
#line 1549 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 28822 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 972: /* TableFuncElementList: TableFuncElementList ',' TableFuncElement  */
#line 1553 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 28830 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 973: /* TableFuncElement: ColIdOrString Typename opt_collate_clause  */
#line 1559 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGColumnDef *n = makeNode(PGColumnDef);
					n->colname = (yyvsp[-2].str);
					n->typeName = (yyvsp[-1].typnam);
					n->inhcount = 0;
					n->is_local = true;
					n->is_not_null = false;
					n->is_from_type = false;
					n->storage = 0;
					n->raw_default = NULL;
					n->cooked_default = NULL;
					n->collClause = (PGCollateClause *) (yyvsp[0].node);
					n->collOid = InvalidOid;
					n->constraints = NIL;
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)n;
				}
#line 28852 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 974: /* opt_collate_clause: COLLATE any_name  */
#line 1580 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGCollateClause *n = makeNode(PGCollateClause);
					n->arg = NULL;
					n->collname = (yyvsp[0].list);
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *) n;
				}
#line 28864 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 975: /* opt_collate_clause: %empty  */
#line 1587 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.node) = NULL; }
#line 28870 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 976: /* colid_type_list: ColId Typename  */
#line 1600 "third_party/libpg_query/grammar/statements/select.y"
                             {
             (yyval.list) = list_make1(list_make2(makeString((yyvsp[-1].str)), (yyvsp[0].typnam)));
            }
#line 28878 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 977: /* colid_type_list: colid_type_list ',' ColId Typename  */
#line 1603 "third_party/libpg_query/grammar/statements/select.y"
                                                 {
             (yyval.list) = lappend((yyvsp[-3].list), list_make2(makeString((yyvsp[-1].str)), (yyvsp[0].typnam)));
            }
#line 28886 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 980: /* opt_Typename: Typename  */
#line 1610 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 28892 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 981: /* opt_Typename: %empty  */
#line 1611 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.typnam) = NULL; }
#line 28898 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 982: /* Typename: SimpleTypename opt_array_bounds  */
#line 1614 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-1].typnam);
					(yyval.typnam)->arrayBounds = (yyvsp[0].list);
				}
#line 28907 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 983: /* Typename: SETOF SimpleTypename opt_array_bounds  */
#line 1619 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-1].typnam);
					(yyval.typnam)->arrayBounds = (yyvsp[0].list);
					(yyval.typnam)->setof = true;
				}
#line 28917 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 984: /* Typename: SimpleTypename ARRAY '[' Iconst ']'  */
#line 1626 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-4].typnam);
					(yyval.typnam)->arrayBounds = list_make1(makeInteger((yyvsp[-1].ival)));
				}
#line 28926 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 985: /* Typename: SETOF SimpleTypename ARRAY '[' Iconst ']'  */
#line 1631 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-4].typnam);
					(yyval.typnam)->arrayBounds = list_make1(makeInteger((yyvsp[-1].ival)));
					(yyval.typnam)->setof = true;
				}
#line 28936 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 986: /* Typename: SimpleTypename ARRAY  */
#line 1637 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-1].typnam);
					(yyval.typnam)->arrayBounds = list_make1(makeInteger(-1));
				}
#line 28945 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 987: /* Typename: SETOF SimpleTypename ARRAY  */
#line 1642 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-1].typnam);
					(yyval.typnam)->arrayBounds = list_make1(makeInteger(-1));
					(yyval.typnam)->setof = true;
				}
#line 28955 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 988: /* Typename: qualified_typename  */
#line 1648 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = makeTypeNameFromNameList((yyvsp[0].list));
				}
#line 28963 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 989: /* Typename: RowOrStruct '(' colid_type_list ')' opt_array_bounds  */
#line 1652 "third_party/libpg_query/grammar/statements/select.y"
                                {
				   (yyval.typnam) = SystemTypeName("struct");
				   (yyval.typnam)->arrayBounds = (yyvsp[0].list);
				   (yyval.typnam)->typmods = (yyvsp[-2].list);
				   (yyval.typnam)->location = (yylsp[-4]);
               }
#line 28974 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 990: /* Typename: MAP '(' type_list ')' opt_array_bounds  */
#line 1659 "third_party/libpg_query/grammar/statements/select.y"
                {
				   (yyval.typnam) = SystemTypeName("map");
				   (yyval.typnam)->arrayBounds = (yyvsp[0].list);
				   (yyval.typnam)->typmods = (yyvsp[-2].list);
				   (yyval.typnam)->location = (yylsp[-4]);
				}
#line 28985 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 991: /* Typename: UNION '(' colid_type_list ')' opt_array_bounds  */
#line 1666 "third_party/libpg_query/grammar/statements/select.y"
                                {
				   (yyval.typnam) = SystemTypeName("union");
				   (yyval.typnam)->arrayBounds = (yyvsp[0].list);
				   (yyval.typnam)->typmods = (yyvsp[-2].list);
				   (yyval.typnam)->location = (yylsp[-4]);
				}
#line 28996 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 992: /* qualified_typename: IDENT '.' IDENT  */
#line 1675 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = list_make2(makeString((yyvsp[-2].str)), makeString((yyvsp[0].str))); }
#line 29002 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 993: /* qualified_typename: qualified_typename '.' IDENT  */
#line 1676 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.list) = lappend((yyvsp[-2].list), makeString((yyvsp[0].str))); }
#line 29008 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 994: /* opt_array_bounds: opt_array_bounds '[' ']'  */
#line 1681 "third_party/libpg_query/grammar/statements/select.y"
                                        {  (yyval.list) = lappend((yyvsp[-2].list), makeInteger(-1)); }
#line 29014 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 995: /* opt_array_bounds: opt_array_bounds '[' Iconst ']'  */
#line 1683 "third_party/libpg_query/grammar/statements/select.y"
                                        {  (yyval.list) = lappend((yyvsp[-3].list), makeInteger((yyvsp[-1].ival))); }
#line 29020 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 996: /* opt_array_bounds: %empty  */
#line 1685 "third_party/libpg_query/grammar/statements/select.y"
                                        {  (yyval.list) = NIL; }
#line 29026 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 997: /* SimpleTypename: GenericType  */
#line 1689 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 29032 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 998: /* SimpleTypename: Numeric  */
#line 1690 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 29038 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 999: /* SimpleTypename: Bit  */
#line 1691 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 29044 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1000: /* SimpleTypename: Character  */
#line 1692 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 29050 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1001: /* SimpleTypename: ConstDatetime  */
#line 1693 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.typnam) = (yyvsp[0].typnam); }
#line 29056 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1002: /* SimpleTypename: ConstInterval opt_interval  */
#line 1695 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-1].typnam);
					(yyval.typnam)->typmods = (yyvsp[0].list);
				}
#line 29065 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1003: /* SimpleTypename: ConstInterval '(' Iconst ')'  */
#line 1700 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-3].typnam);
					(yyval.typnam)->typmods = list_make2(makeIntConst(INTERVAL_FULL_RANGE, -1),
											 makeIntConst((yyvsp[-1].ival), (yylsp[-1])));
				}
#line 29075 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1004: /* ConstTypename: Numeric  */
#line 1719 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 29081 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1005: /* ConstTypename: ConstBit  */
#line 1720 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 29087 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1006: /* ConstTypename: ConstCharacter  */
#line 1721 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.typnam) = (yyvsp[0].typnam); }
#line 29093 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1007: /* ConstTypename: ConstDatetime  */
#line 1722 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.typnam) = (yyvsp[0].typnam); }
#line 29099 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1008: /* GenericType: type_name_token opt_type_modifiers  */
#line 1734 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = makeTypeName((yyvsp[-1].str));
					(yyval.typnam)->typmods = (yyvsp[0].list);
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 29109 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1009: /* opt_type_modifiers: '(' opt_expr_list_opt_comma ')'  */
#line 1747 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 29115 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1010: /* opt_type_modifiers: %empty  */
#line 1748 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = NIL; }
#line 29121 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1011: /* Numeric: INT_P  */
#line 1755 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("int4");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 29130 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1012: /* Numeric: INTEGER  */
#line 1760 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("int4");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 29139 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1013: /* Numeric: SMALLINT  */
#line 1765 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("int2");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 29148 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1014: /* Numeric: BIGINT  */
#line 1770 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("int8");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 29157 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1015: /* Numeric: REAL  */
#line 1775 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("float4");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 29166 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1016: /* Numeric: FLOAT_P opt_float  */
#line 1780 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 29175 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1017: /* Numeric: DOUBLE_P PRECISION  */
#line 1785 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("float8");
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 29184 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1018: /* Numeric: DECIMAL_P opt_type_modifiers  */
#line 1790 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("numeric");
					(yyval.typnam)->typmods = (yyvsp[0].list);
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 29194 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1019: /* Numeric: DEC opt_type_modifiers  */
#line 1796 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("numeric");
					(yyval.typnam)->typmods = (yyvsp[0].list);
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 29204 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1020: /* Numeric: NUMERIC opt_type_modifiers  */
#line 1802 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("numeric");
					(yyval.typnam)->typmods = (yyvsp[0].list);
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 29214 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1021: /* Numeric: BOOLEAN_P  */
#line 1808 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("bool");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 29223 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1022: /* opt_float: '(' Iconst ')'  */
#line 1815 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/*
					 * Check FLOAT() precision limits assuming IEEE floating
					 * types - thomas 1997-09-18
					 */
					if ((yyvsp[-1].ival) < 1)
						ereport(ERROR,
								(errcode(PG_ERRCODE_INVALID_PARAMETER_VALUE),
								 errmsg("precision for type float must be at least 1 bit"),
								 parser_errposition((yylsp[-1]))));
					else if ((yyvsp[-1].ival) <= 24)
						(yyval.typnam) = SystemTypeName("float4");
					else if ((yyvsp[-1].ival) <= 53)
						(yyval.typnam) = SystemTypeName("float8");
					else
						ereport(ERROR,
								(errcode(PG_ERRCODE_INVALID_PARAMETER_VALUE),
								 errmsg("precision for type float must be less than 54 bits"),
								 parser_errposition((yylsp[-1]))));
				}
#line 29248 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1023: /* opt_float: %empty  */
#line 1836 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("float4");
				}
#line 29256 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1024: /* Bit: BitWithLength  */
#line 1846 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 29264 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1025: /* Bit: BitWithoutLength  */
#line 1850 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 29272 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1026: /* ConstBit: BitWithLength  */
#line 1858 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 29280 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1027: /* ConstBit: BitWithoutLength  */
#line 1862 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
					(yyval.typnam)->typmods = NIL;
				}
#line 29289 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1028: /* BitWithLength: BIT opt_varying '(' expr_list_opt_comma ')'  */
#line 1870 "third_party/libpg_query/grammar/statements/select.y"
                                {
					const char *typname;

					typname = (yyvsp[-3].boolean) ? "varbit" : "bit";
					(yyval.typnam) = SystemTypeName(typname);
					(yyval.typnam)->typmods = (yyvsp[-1].list);
					(yyval.typnam)->location = (yylsp[-4]);
				}
#line 29302 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1029: /* BitWithoutLength: BIT opt_varying  */
#line 1882 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* bit defaults to bit(1), varbit to no limit */
					if ((yyvsp[0].boolean))
					{
						(yyval.typnam) = SystemTypeName("varbit");
					}
					else
					{
						(yyval.typnam) = SystemTypeName("bit");
						(yyval.typnam)->typmods = list_make1(makeIntConst(1, -1));
					}
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 29320 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1030: /* Character: CharacterWithLength  */
#line 1903 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 29328 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1031: /* Character: CharacterWithoutLength  */
#line 1907 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 29336 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1032: /* ConstCharacter: CharacterWithLength  */
#line 1913 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 29344 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1033: /* ConstCharacter: CharacterWithoutLength  */
#line 1917 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* Length was not specified so allow to be unrestricted.
					 * This handles problems with fixed-length (bpchar) strings
					 * which in column definitions must default to a length
					 * of one, but should not be constrained if the length
					 * was not specified.
					 */
					(yyval.typnam) = (yyvsp[0].typnam);
					(yyval.typnam)->typmods = NIL;
				}
#line 29359 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1034: /* CharacterWithLength: character '(' Iconst ')'  */
#line 1930 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName((yyvsp[-3].conststr));
					(yyval.typnam)->typmods = list_make1(makeIntConst((yyvsp[-1].ival), (yylsp[-1])));
					(yyval.typnam)->location = (yylsp[-3]);
				}
#line 29369 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1035: /* CharacterWithoutLength: character  */
#line 1938 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName((yyvsp[0].conststr));
					/* char defaults to char(1), varchar to no limit */
					if (strcmp((yyvsp[0].conststr), "bpchar") == 0)
						(yyval.typnam)->typmods = list_make1(makeIntConst(1, -1));
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 29381 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1036: /* character: CHARACTER opt_varying  */
#line 1948 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = (yyvsp[0].boolean) ? "varchar": "bpchar"; }
#line 29387 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1037: /* character: CHAR_P opt_varying  */
#line 1950 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = (yyvsp[0].boolean) ? "varchar": "bpchar"; }
#line 29393 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1038: /* character: VARCHAR  */
#line 1952 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = "varchar"; }
#line 29399 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1039: /* character: NATIONAL CHARACTER opt_varying  */
#line 1954 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = (yyvsp[0].boolean) ? "varchar": "bpchar"; }
#line 29405 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1040: /* character: NATIONAL CHAR_P opt_varying  */
#line 1956 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = (yyvsp[0].boolean) ? "varchar": "bpchar"; }
#line 29411 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1041: /* character: NCHAR opt_varying  */
#line 1958 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = (yyvsp[0].boolean) ? "varchar": "bpchar"; }
#line 29417 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1042: /* opt_varying: VARYING  */
#line 1962 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = true; }
#line 29423 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1043: /* opt_varying: %empty  */
#line 1963 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 29429 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1044: /* ConstDatetime: TIMESTAMP '(' Iconst ')' opt_timezone  */
#line 1971 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].boolean))
						(yyval.typnam) = SystemTypeName("timestamptz");
					else
						(yyval.typnam) = SystemTypeName("timestamp");
					(yyval.typnam)->typmods = list_make1(makeIntConst((yyvsp[-2].ival), (yylsp[-2])));
					(yyval.typnam)->location = (yylsp[-4]);
				}
#line 29442 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1045: /* ConstDatetime: TIMESTAMP opt_timezone  */
#line 1980 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].boolean))
						(yyval.typnam) = SystemTypeName("timestamptz");
					else
						(yyval.typnam) = SystemTypeName("timestamp");
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 29454 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1046: /* ConstDatetime: TIME '(' Iconst ')' opt_timezone  */
#line 1988 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].boolean))
						(yyval.typnam) = SystemTypeName("timetz");
					else
						(yyval.typnam) = SystemTypeName("time");
					(yyval.typnam)->typmods = list_make1(makeIntConst((yyvsp[-2].ival), (yylsp[-2])));
					(yyval.typnam)->location = (yylsp[-4]);
				}
#line 29467 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1047: /* ConstDatetime: TIME opt_timezone  */
#line 1997 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].boolean))
						(yyval.typnam) = SystemTypeName("timetz");
					else
						(yyval.typnam) = SystemTypeName("time");
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 29479 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1048: /* ConstInterval: INTERVAL  */
#line 2008 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("interval");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 29488 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1049: /* opt_timezone: WITH_LA TIME ZONE  */
#line 2015 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.boolean) = true; }
#line 29494 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1050: /* opt_timezone: WITHOUT TIME ZONE  */
#line 2016 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.boolean) = false; }
#line 29500 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1051: /* opt_timezone: %empty  */
#line 2017 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 29506 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1076: /* opt_interval: year_keyword  */
#line 2058 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(YEAR), (yylsp[0]))); }
#line 29512 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1077: /* opt_interval: month_keyword  */
#line 2060 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MONTH), (yylsp[0]))); }
#line 29518 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1078: /* opt_interval: day_keyword  */
#line 2062 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(DAY), (yylsp[0]))); }
#line 29524 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1079: /* opt_interval: hour_keyword  */
#line 2064 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(HOUR), (yylsp[0]))); }
#line 29530 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1080: /* opt_interval: minute_keyword  */
#line 2066 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MINUTE), (yylsp[0]))); }
#line 29536 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1081: /* opt_interval: second_keyword  */
#line 2068 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(SECOND), (yylsp[0]))); }
#line 29542 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1082: /* opt_interval: millisecond_keyword  */
#line 2070 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MILLISECOND), (yylsp[0]))); }
#line 29548 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1083: /* opt_interval: microsecond_keyword  */
#line 2072 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MICROSECOND), (yylsp[0]))); }
#line 29554 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1084: /* opt_interval: week_keyword  */
#line 2074 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(WEEK), (yylsp[0]))); }
#line 29560 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1085: /* opt_interval: decade_keyword  */
#line 2076 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(DECADE), (yylsp[0]))); }
#line 29566 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1086: /* opt_interval: century_keyword  */
#line 2078 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(CENTURY), (yylsp[0]))); }
#line 29572 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1087: /* opt_interval: millennium_keyword  */
#line 2080 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MILLENNIUM), (yylsp[0]))); }
#line 29578 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1088: /* opt_interval: year_keyword TO month_keyword  */
#line 2082 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(YEAR) |
												 INTERVAL_MASK(MONTH), (yylsp[-2])));
				}
#line 29587 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1089: /* opt_interval: day_keyword TO hour_keyword  */
#line 2087 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(DAY) |
												 INTERVAL_MASK(HOUR), (yylsp[-2])));
				}
#line 29596 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1090: /* opt_interval: day_keyword TO minute_keyword  */
#line 2092 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(DAY) |
												 INTERVAL_MASK(HOUR) |
												 INTERVAL_MASK(MINUTE), (yylsp[-2])));
				}
#line 29606 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1091: /* opt_interval: day_keyword TO second_keyword  */
#line 2098 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(DAY) |
												 INTERVAL_MASK(HOUR) |
												 INTERVAL_MASK(MINUTE) |
												 INTERVAL_MASK(SECOND), (yylsp[-2])));
				}
#line 29617 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1092: /* opt_interval: hour_keyword TO minute_keyword  */
#line 2105 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(HOUR) |
												 INTERVAL_MASK(MINUTE), (yylsp[-2])));
				}
#line 29626 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1093: /* opt_interval: hour_keyword TO second_keyword  */
#line 2110 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(HOUR) |
												 INTERVAL_MASK(MINUTE) |
												 INTERVAL_MASK(SECOND), (yylsp[-2])));
				}
#line 29636 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1094: /* opt_interval: minute_keyword TO second_keyword  */
#line 2116 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MINUTE) |
												 INTERVAL_MASK(SECOND), (yylsp[-2])));
				}
#line 29645 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1095: /* opt_interval: %empty  */
#line 2121 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = NIL; }
#line 29651 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1096: /* a_expr: c_expr  */
#line 2152 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 29657 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1097: /* a_expr: a_expr TYPECAST Typename  */
#line 2155 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.node) = makeTypeCast((yyvsp[-2].node), (yyvsp[0].typnam), 0, (yylsp[-1])); }
#line 29663 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1098: /* a_expr: a_expr COLLATE any_name  */
#line 2157 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGCollateClause *n = makeNode(PGCollateClause);
					n->arg = (yyvsp[-2].node);
					n->collname = (yyvsp[0].list);
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *) n;
				}
#line 29675 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1099: /* a_expr: a_expr AT TIME ZONE a_expr  */
#line 2165 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("timezone"),
											   list_make2((yyvsp[0].node), (yyvsp[-4].node)),
											   (yylsp[-3]));
				}
#line 29685 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1100: /* a_expr: '+' a_expr  */
#line 2180 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", NULL, (yyvsp[0].node), (yylsp[-1])); }
#line 29691 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1101: /* a_expr: '-' a_expr  */
#line 2182 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = doNegate((yyvsp[0].node), (yylsp[-1])); }
#line 29697 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1102: /* a_expr: a_expr '+' a_expr  */
#line 2184 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 29703 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1103: /* a_expr: a_expr '-' a_expr  */
#line 2186 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "-", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 29709 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1104: /* a_expr: a_expr '*' a_expr  */
#line 2188 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "*", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 29715 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1105: /* a_expr: a_expr '/' a_expr  */
#line 2190 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "/", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 29721 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1106: /* a_expr: a_expr INTEGER_DIVISION a_expr  */
#line 2192 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "//", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 29727 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1107: /* a_expr: a_expr '%' a_expr  */
#line 2194 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "%", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 29733 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1108: /* a_expr: a_expr '^' a_expr  */
#line 2196 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "^", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 29739 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1109: /* a_expr: a_expr POWER_OF a_expr  */
#line 2198 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "**", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 29745 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1110: /* a_expr: a_expr '<' a_expr  */
#line 2200 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 29751 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1111: /* a_expr: a_expr '>' a_expr  */
#line 2202 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, ">", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 29757 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1112: /* a_expr: a_expr '=' a_expr  */
#line 2204 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 29763 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1113: /* a_expr: a_expr LESS_EQUALS a_expr  */
#line 2206 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 29769 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1114: /* a_expr: a_expr GREATER_EQUALS a_expr  */
#line 2208 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, ">=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 29775 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1115: /* a_expr: a_expr NOT_EQUALS a_expr  */
#line 2210 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<>", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 29781 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1116: /* a_expr: a_expr qual_Op a_expr  */
#line 2213 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[-1].list), (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 29787 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1117: /* a_expr: qual_Op a_expr  */
#line 2215 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[-1].list), NULL, (yyvsp[0].node), (yylsp[-1])); }
#line 29793 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1118: /* a_expr: a_expr qual_Op  */
#line 2217 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[0].list), (yyvsp[-1].node), NULL, (yylsp[0])); }
#line 29799 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1119: /* a_expr: a_expr AND a_expr  */
#line 2220 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeAndExpr((yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 29805 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1120: /* a_expr: a_expr OR a_expr  */
#line 2222 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeOrExpr((yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 29811 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1121: /* a_expr: NOT a_expr  */
#line 2224 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeNotExpr((yyvsp[0].node), (yylsp[-1])); }
#line 29817 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1122: /* a_expr: NOT_LA a_expr  */
#line 2226 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeNotExpr((yyvsp[0].node), (yylsp[-1])); }
#line 29823 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1123: /* a_expr: a_expr GLOB a_expr  */
#line 2228 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_GLOB, "~~~",
												   (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
				}
#line 29832 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1124: /* a_expr: a_expr LIKE a_expr  */
#line 2233 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_LIKE, "~~",
												   (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
				}
#line 29841 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1125: /* a_expr: a_expr LIKE a_expr ESCAPE a_expr  */
#line 2238 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("like_escape"),
											   list_make3((yyvsp[-4].node), (yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-3]));
					(yyval.node) = (PGNode *) n;
				}
#line 29852 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1126: /* a_expr: a_expr NOT_LA LIKE a_expr  */
#line 2245 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_LIKE, "!~~",
												   (yyvsp[-3].node), (yyvsp[0].node), (yylsp[-2]));
				}
#line 29861 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1127: /* a_expr: a_expr NOT_LA LIKE a_expr ESCAPE a_expr  */
#line 2250 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("not_like_escape"),
											   list_make3((yyvsp[-5].node), (yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-4]));
					(yyval.node) = (PGNode *) n;
				}
#line 29872 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1128: /* a_expr: a_expr ILIKE a_expr  */
#line 2257 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_ILIKE, "~~*",
												   (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
				}
#line 29881 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1129: /* a_expr: a_expr ILIKE a_expr ESCAPE a_expr  */
#line 2262 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("ilike_escape"),
											   list_make3((yyvsp[-4].node), (yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-3]));
					(yyval.node) = (PGNode *) n;
				}
#line 29892 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1130: /* a_expr: a_expr NOT_LA ILIKE a_expr  */
#line 2269 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_ILIKE, "!~~*",
												   (yyvsp[-3].node), (yyvsp[0].node), (yylsp[-2]));
				}
#line 29901 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1131: /* a_expr: a_expr NOT_LA ILIKE a_expr ESCAPE a_expr  */
#line 2274 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("not_ilike_escape"),
											   list_make3((yyvsp[-5].node), (yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-4]));
					(yyval.node) = (PGNode *) n;
				}
#line 29912 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1132: /* a_expr: a_expr SIMILAR TO a_expr  */
#line 2282 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
											   list_make2((yyvsp[0].node), makeNullAConst(-1)),
											   (yylsp[-2]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "~",
												   (yyvsp[-3].node), (PGNode *) n, (yylsp[-2]));
				}
#line 29924 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1133: /* a_expr: a_expr SIMILAR TO a_expr ESCAPE a_expr  */
#line 2290 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
											   list_make2((yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-4]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "~",
												   (yyvsp[-5].node), (PGNode *) n, (yylsp[-4]));
				}
#line 29936 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1134: /* a_expr: a_expr NOT_LA SIMILAR TO a_expr  */
#line 2298 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
											   list_make2((yyvsp[0].node), makeNullAConst(-1)),
											   (yylsp[-3]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "!~",
												   (yyvsp[-4].node), (PGNode *) n, (yylsp[-3]));
				}
#line 29948 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1135: /* a_expr: a_expr NOT_LA SIMILAR TO a_expr ESCAPE a_expr  */
#line 2306 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
											   list_make2((yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-5]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "!~",
												   (yyvsp[-6].node), (PGNode *) n, (yylsp[-5]));
				}
#line 29960 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1136: /* a_expr: a_expr IS NULL_P  */
#line 2324 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-2].node);
					n->nulltesttype = PG_IS_NULL;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 29972 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1137: /* a_expr: a_expr ISNULL  */
#line 2332 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-1].node);
					n->nulltesttype = PG_IS_NULL;
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 29984 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1138: /* a_expr: a_expr IS NOT NULL_P  */
#line 2340 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-3].node);
					n->nulltesttype = IS_NOT_NULL;
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)n;
				}
#line 29996 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1139: /* a_expr: a_expr NOT NULL_P  */
#line 2348 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-2].node);
					n->nulltesttype = IS_NOT_NULL;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 30008 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1140: /* a_expr: a_expr NOTNULL  */
#line 2356 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-1].node);
					n->nulltesttype = IS_NOT_NULL;
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 30020 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1141: /* a_expr: a_expr LAMBDA_ARROW a_expr  */
#line 2364 "third_party/libpg_query/grammar/statements/select.y"
                        {
				PGLambdaFunction *n = makeNode(PGLambdaFunction);
				n->lhs = (yyvsp[-2].node);
				n->rhs = (yyvsp[0].node);
				n->location = (yylsp[-1]);
				(yyval.node) = (PGNode *) n;
			}
#line 30032 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1142: /* a_expr: a_expr DOUBLE_ARROW a_expr  */
#line 2372 "third_party/libpg_query/grammar/statements/select.y"
                        {
							(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "->>", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
			}
#line 30040 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1143: /* a_expr: row OVERLAPS row  */
#line 2376 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if (list_length((yyvsp[-2].list)) != 2)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("wrong number of parameters on left side of OVERLAPS expression"),
								 parser_errposition((yylsp[-2]))));
					if (list_length((yyvsp[0].list)) != 2)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("wrong number of parameters on right side of OVERLAPS expression"),
								 parser_errposition((yylsp[0]))));
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("overlaps"),
											   list_concat((yyvsp[-2].list), (yyvsp[0].list)),
											   (yylsp[-1]));
				}
#line 30060 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1144: /* a_expr: a_expr IS TRUE_P  */
#line 2392 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-2].node);
					b->booltesttype = PG_IS_TRUE;
					b->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)b;
				}
#line 30072 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1145: /* a_expr: a_expr IS NOT TRUE_P  */
#line 2400 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-3].node);
					b->booltesttype = IS_NOT_TRUE;
					b->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)b;
				}
#line 30084 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1146: /* a_expr: a_expr IS FALSE_P  */
#line 2408 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-2].node);
					b->booltesttype = IS_FALSE;
					b->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)b;
				}
#line 30096 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1147: /* a_expr: a_expr IS NOT FALSE_P  */
#line 2416 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-3].node);
					b->booltesttype = IS_NOT_FALSE;
					b->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)b;
				}
#line 30108 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1148: /* a_expr: a_expr IS UNKNOWN  */
#line 2424 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-2].node);
					b->booltesttype = IS_UNKNOWN;
					b->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)b;
				}
#line 30120 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1149: /* a_expr: a_expr IS NOT UNKNOWN  */
#line 2432 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-3].node);
					b->booltesttype = IS_NOT_UNKNOWN;
					b->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)b;
				}
#line 30132 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1150: /* a_expr: a_expr IS DISTINCT FROM a_expr  */
#line 2440 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_DISTINCT, "=", (yyvsp[-4].node), (yyvsp[0].node), (yylsp[-3]));
				}
#line 30140 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1151: /* a_expr: a_expr IS NOT DISTINCT FROM a_expr  */
#line 2444 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_DISTINCT, "=", (yyvsp[-5].node), (yyvsp[0].node), (yylsp[-4]));
				}
#line 30148 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1152: /* a_expr: a_expr IS OF '(' type_list ')'  */
#line 2448 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OF, "=", (yyvsp[-5].node), (PGNode *) (yyvsp[-1].list), (yylsp[-4]));
				}
#line 30156 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1153: /* a_expr: a_expr IS NOT OF '(' type_list ')'  */
#line 2452 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OF, "<>", (yyvsp[-6].node), (PGNode *) (yyvsp[-1].list), (yylsp[-5]));
				}
#line 30164 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1154: /* a_expr: a_expr BETWEEN opt_asymmetric b_expr AND a_expr  */
#line 2456 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_BETWEEN,
												   "BETWEEN",
												   (yyvsp[-5].node),
												   (PGNode *) list_make2((yyvsp[-2].node), (yyvsp[0].node)),
												   (yylsp[-4]));
				}
#line 30176 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1155: /* a_expr: a_expr NOT_LA BETWEEN opt_asymmetric b_expr AND a_expr  */
#line 2464 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_BETWEEN,
												   "NOT BETWEEN",
												   (yyvsp[-6].node),
												   (PGNode *) list_make2((yyvsp[-2].node), (yyvsp[0].node)),
												   (yylsp[-5]));
				}
#line 30188 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1156: /* a_expr: a_expr BETWEEN SYMMETRIC b_expr AND a_expr  */
#line 2472 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_BETWEEN_SYM,
												   "BETWEEN SYMMETRIC",
												   (yyvsp[-5].node),
												   (PGNode *) list_make2((yyvsp[-2].node), (yyvsp[0].node)),
												   (yylsp[-4]));
				}
#line 30200 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1157: /* a_expr: a_expr NOT_LA BETWEEN SYMMETRIC b_expr AND a_expr  */
#line 2480 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_BETWEEN_SYM,
												   "NOT BETWEEN SYMMETRIC",
												   (yyvsp[-6].node),
												   (PGNode *) list_make2((yyvsp[-2].node), (yyvsp[0].node)),
												   (yylsp[-5]));
				}
#line 30212 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1158: /* a_expr: a_expr IN_P in_expr  */
#line 2488 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* in_expr returns a PGSubLink or a list of a_exprs */
					if (IsA((yyvsp[0].node), PGSubLink))
					{
						/* generate foo = ANY (subquery) */
						PGSubLink *n = (PGSubLink *) (yyvsp[0].node);
						n->subLinkType = PG_ANY_SUBLINK;
						n->subLinkId = 0;
						n->testexpr = (yyvsp[-2].node);
						n->operName = NIL;		/* show it's IN not = ANY */
						n->location = (yylsp[-1]);
						(yyval.node) = (PGNode *)n;
					}
					else
					{
						/* generate scalar IN expression */
						(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_IN, "=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
					}
				}
#line 30236 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1159: /* a_expr: a_expr NOT_LA IN_P in_expr  */
#line 2508 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* in_expr returns a PGSubLink or a list of a_exprs */
					if (IsA((yyvsp[0].node), PGSubLink))
					{
						/* generate NOT (foo = ANY (subquery)) */
						/* Make an = ANY node */
						PGSubLink *n = (PGSubLink *) (yyvsp[0].node);
						n->subLinkType = PG_ANY_SUBLINK;
						n->subLinkId = 0;
						n->testexpr = (yyvsp[-3].node);
						n->operName = NIL;		/* show it's IN not = ANY */
						n->location = (yylsp[-2]);
						/* Stick a NOT on top; must have same parse location */
						(yyval.node) = makeNotExpr((PGNode *) n, (yylsp[-2]));
					}
					else
					{
						/* generate scalar NOT IN expression */
						(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_IN, "<>", (yyvsp[-3].node), (yyvsp[0].node), (yylsp[-2]));
					}
				}
#line 30262 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1160: /* a_expr: a_expr subquery_Op sub_type select_with_parens  */
#line 2530 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSubLink *n = makeNode(PGSubLink);
					n->subLinkType = (yyvsp[-1].subquerytype);
					n->subLinkId = 0;
					n->testexpr = (yyvsp[-3].node);
					n->operName = (yyvsp[-2].list);
					n->subselect = (yyvsp[0].node);
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)n;
				}
#line 30277 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1161: /* a_expr: a_expr subquery_Op sub_type '(' a_expr ')'  */
#line 2541 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[-3].subquerytype) == PG_ANY_SUBLINK)
						(yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP_ANY, (yyvsp[-4].list), (yyvsp[-5].node), (yyvsp[-1].node), (yylsp[-4]));
					else
						(yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP_ALL, (yyvsp[-4].list), (yyvsp[-5].node), (yyvsp[-1].node), (yylsp[-4]));
				}
#line 30288 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1162: /* a_expr: DEFAULT  */
#line 2548 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/*
					 * The SQL spec only allows DEFAULT in "contextually typed
					 * expressions", but for us, it's easier to allow it in
					 * any a_expr and then throw error during parse analysis
					 * if it's in an inappropriate context.  This way also
					 * lets us say something smarter than "syntax error".
					 */
					PGSetToDefault *n = makeNode(PGSetToDefault);
					/* parse analysis will fill in the rest */
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 30306 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1163: /* a_expr: COLUMNS '(' a_expr ')'  */
#line 2562 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAStar *star = makeNode(PGAStar);
					star->expr = (yyvsp[-1].node);
					star->columns = true;
					star->location = (yylsp[-3]);
					(yyval.node) = (PGNode *) star;
				}
#line 30318 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1164: /* a_expr: '*' opt_except_list opt_replace_list  */
#line 2570 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAStar *star = makeNode(PGAStar);
					star->except_list = (yyvsp[-1].list);
					star->replace_list = (yyvsp[0].list);
					star->location = (yylsp[-2]);
					(yyval.node) = (PGNode *) star;
				}
#line 30330 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1165: /* a_expr: ColId '.' '*' opt_except_list opt_replace_list  */
#line 2578 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAStar *star = makeNode(PGAStar);
					star->relation = (yyvsp[-4].str);
					star->except_list = (yyvsp[-1].list);
					star->replace_list = (yyvsp[0].list);
					star->location = (yylsp[-4]);
					(yyval.node) = (PGNode *) star;
				}
#line 30343 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1166: /* b_expr: c_expr  */
#line 2598 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 30349 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1167: /* b_expr: b_expr TYPECAST Typename  */
#line 2600 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeTypeCast((yyvsp[-2].node), (yyvsp[0].typnam), 0, (yylsp[-1])); }
#line 30355 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1168: /* b_expr: '+' b_expr  */
#line 2602 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", NULL, (yyvsp[0].node), (yylsp[-1])); }
#line 30361 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1169: /* b_expr: '-' b_expr  */
#line 2604 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = doNegate((yyvsp[0].node), (yylsp[-1])); }
#line 30367 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1170: /* b_expr: b_expr '+' b_expr  */
#line 2606 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 30373 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1171: /* b_expr: b_expr '-' b_expr  */
#line 2608 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "-", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 30379 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1172: /* b_expr: b_expr '*' b_expr  */
#line 2610 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "*", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 30385 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1173: /* b_expr: b_expr '/' b_expr  */
#line 2612 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "/", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 30391 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1174: /* b_expr: b_expr INTEGER_DIVISION b_expr  */
#line 2614 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "//", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 30397 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1175: /* b_expr: b_expr '%' b_expr  */
#line 2616 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "%", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 30403 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1176: /* b_expr: b_expr '^' b_expr  */
#line 2618 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "^", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 30409 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1177: /* b_expr: b_expr POWER_OF b_expr  */
#line 2620 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "**", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 30415 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1178: /* b_expr: b_expr '<' b_expr  */
#line 2622 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 30421 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1179: /* b_expr: b_expr '>' b_expr  */
#line 2624 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, ">", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 30427 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1180: /* b_expr: b_expr '=' b_expr  */
#line 2626 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 30433 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1181: /* b_expr: b_expr LESS_EQUALS b_expr  */
#line 2628 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 30439 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1182: /* b_expr: b_expr GREATER_EQUALS b_expr  */
#line 2630 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, ">=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 30445 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1183: /* b_expr: b_expr NOT_EQUALS b_expr  */
#line 2632 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<>", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 30451 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1184: /* b_expr: b_expr qual_Op b_expr  */
#line 2634 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[-1].list), (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 30457 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1185: /* b_expr: qual_Op b_expr  */
#line 2636 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[-1].list), NULL, (yyvsp[0].node), (yylsp[-1])); }
#line 30463 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1186: /* b_expr: b_expr qual_Op  */
#line 2638 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[0].list), (yyvsp[-1].node), NULL, (yylsp[0])); }
#line 30469 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1187: /* b_expr: b_expr IS DISTINCT FROM b_expr  */
#line 2640 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_DISTINCT, "=", (yyvsp[-4].node), (yyvsp[0].node), (yylsp[-3]));
				}
#line 30477 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1188: /* b_expr: b_expr IS NOT DISTINCT FROM b_expr  */
#line 2644 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_DISTINCT, "=", (yyvsp[-5].node), (yyvsp[0].node), (yylsp[-4]));
				}
#line 30485 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1189: /* b_expr: b_expr IS OF '(' type_list ')'  */
#line 2648 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OF, "=", (yyvsp[-5].node), (PGNode *) (yyvsp[-1].list), (yylsp[-4]));
				}
#line 30493 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1190: /* b_expr: b_expr IS NOT OF '(' type_list ')'  */
#line 2652 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OF, "<>", (yyvsp[-6].node), (PGNode *) (yyvsp[-1].list), (yylsp[-5]));
				}
#line 30501 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1192: /* c_expr: indirection_expr_or_a_expr opt_extended_indirection  */
#line 2667 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].list))
					{
						PGAIndirection *n = makeNode(PGAIndirection);
						n->arg = (PGNode *) (yyvsp[-1].node);
						n->indirection = check_indirection((yyvsp[0].list), yyscanner);
						(yyval.node) = (PGNode *) n;
					}
					else
						(yyval.node) = (PGNode *) (yyvsp[-1].node);
				}
#line 30517 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1193: /* d_expr: columnref  */
#line 2680 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 30523 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1194: /* d_expr: AexprConst  */
#line 2681 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 30529 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1195: /* d_expr: select_with_parens  */
#line 2683 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSubLink *n = makeNode(PGSubLink);
					n->subLinkType = PG_EXPR_SUBLINK;
					n->subLinkId = 0;
					n->testexpr = NULL;
					n->operName = NIL;
					n->subselect = (yyvsp[0].node);
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 30544 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1196: /* d_expr: select_with_parens indirection  */
#line 2694 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/*
					 * Because the select_with_parens nonterminal is designed
					 * to "eat" as many levels of parens as possible, the
					 * '(' a_expr ')' opt_indirection production above will
					 * fail to match a sub-SELECT with indirection decoration;
					 * the sub-SELECT won't be regarded as an a_expr as long
					 * as there are parens around it.  To support applying
					 * subscripting or field selection to a sub-SELECT result,
					 * we need this redundant-looking production.
					 */
					PGSubLink *n = makeNode(PGSubLink);
					PGAIndirection *a = makeNode(PGAIndirection);
					n->subLinkType = PG_EXPR_SUBLINK;
					n->subLinkId = 0;
					n->testexpr = NULL;
					n->operName = NIL;
					n->subselect = (yyvsp[-1].node);
					n->location = (yylsp[-1]);
					a->arg = (PGNode *)n;
					a->indirection = check_indirection((yyvsp[0].list), yyscanner);
					(yyval.node) = (PGNode *)a;
				}
#line 30572 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1197: /* d_expr: EXISTS select_with_parens  */
#line 2718 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSubLink *n = makeNode(PGSubLink);
					n->subLinkType = PG_EXISTS_SUBLINK;
					n->subLinkId = 0;
					n->testexpr = NULL;
					n->operName = NIL;
					n->subselect = (yyvsp[0].node);
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 30587 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1198: /* d_expr: grouping_or_grouping_id '(' expr_list_opt_comma ')'  */
#line 2729 "third_party/libpg_query/grammar/statements/select.y"
                          {
				  PGGroupingFunc *g = makeNode(PGGroupingFunc);
				  g->args = (yyvsp[-1].list);
				  g->location = (yylsp[-3]);
				  (yyval.node) = (PGNode *)g;
			  }
#line 30598 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1199: /* indirection_expr_or_a_expr: '(' a_expr ')'  */
#line 2739 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (yyvsp[-1].node);
				}
#line 30606 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1200: /* indirection_expr_or_a_expr: indirection_expr  */
#line 2743 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (yyvsp[0].node);
				}
#line 30614 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1201: /* indirection_expr_or_a_expr: row  */
#line 2746 "third_party/libpg_query/grammar/statements/select.y"
                              {
				PGFuncCall *n = makeFuncCall(SystemFuncName("row"), (yyvsp[0].list), (yylsp[0]));
				(yyval.node) = (PGNode *) n;
			}
#line 30623 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1202: /* indirection_expr: '?'  */
#line 2754 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeParamRef(0, (yylsp[0]));
				}
#line 30631 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1203: /* indirection_expr: PARAM  */
#line 2758 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGParamRef *p = makeNode(PGParamRef);
					p->number = (yyvsp[0].ival);
					p->location = (yylsp[0]);
					(yyval.node) = (PGNode *) p;
				}
#line 30642 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1204: /* indirection_expr: struct_expr  */
#line 2765 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (yyvsp[0].node);
				}
#line 30650 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1205: /* indirection_expr: MAP '{' opt_map_arguments_opt_comma '}'  */
#line 2769 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGList *key_list = NULL;
					PGList *value_list = NULL;
					PGListCell *lc;
					PGList *entry_list = (yyvsp[-1].list);
					foreach(lc, entry_list)
					{
						PGList *l = (PGList *) lc->data.ptr_value;
						key_list = lappend(key_list, (PGNode *) l->head->data.ptr_value);
						value_list = lappend(value_list, (PGNode *) l->tail->data.ptr_value);
					}
					PGNode *keys   = (PGNode *) makeFuncCall(SystemFuncName("list_value"), key_list, (yylsp[-1]));
					PGNode *values = (PGNode *) makeFuncCall(SystemFuncName("list_value"), value_list, (yylsp[-1]));
					PGFuncCall *f = makeFuncCall(SystemFuncName("map"), list_make2(keys, values), (yylsp[-1]));
					(yyval.node) = (PGNode *) f;
				}
#line 30671 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1206: /* indirection_expr: func_expr  */
#line 2786 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (yyvsp[0].node);
				}
#line 30679 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1207: /* indirection_expr: case_expr  */
#line 2790 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 30685 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1208: /* indirection_expr: list_expr  */
#line 2791 "third_party/libpg_query/grammar/statements/select.y"
                                     {
                (yyval.node) = (yyvsp[0].node);
			}
#line 30693 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1209: /* indirection_expr: list_comprehension  */
#line 2794 "third_party/libpg_query/grammar/statements/select.y"
                                             {
				(yyval.node) = (yyvsp[0].node);
			}
#line 30701 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1210: /* indirection_expr: ARRAY select_with_parens  */
#line 2798 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSubLink *n = makeNode(PGSubLink);
					n->subLinkType = PG_ARRAY_SUBLINK;
					n->subLinkId = 0;
					n->testexpr = NULL;
					n->operName = NULL;
					n->subselect = (yyvsp[0].node);
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 30716 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1211: /* indirection_expr: ARRAY '[' opt_expr_list_opt_comma ']'  */
#line 2808 "third_party/libpg_query/grammar/statements/select.y"
                                                                {
				PGList *func_name = list_make1(makeString("construct_array"));
				PGFuncCall *n = makeFuncCall(func_name, (yyvsp[-1].list), (yylsp[-3]));
				(yyval.node) = (PGNode *) n;
			}
#line 30726 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1212: /* indirection_expr: '#' ICONST  */
#line 2814 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGPositionalReference *n = makeNode(PGPositionalReference);
					n->position = (yyvsp[0].ival);
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *) n;
				}
#line 30737 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1213: /* indirection_expr: '$' ColLabel  */
#line 2821 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeNamedParamRef((yyvsp[0].str), (yylsp[-1]));
				}
#line 30745 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1214: /* list_expr: '[' opt_expr_list_opt_comma ']'  */
#line 2826 "third_party/libpg_query/grammar/statements/select.y"
                                            {
                PGFuncCall *n = makeFuncCall(SystemFuncName("list_value"), (yyvsp[-1].list), (yylsp[-1]));
                (yyval.node) = (PGNode *) n;
            }
#line 30754 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1215: /* struct_expr: '{' dict_arguments_opt_comma '}'  */
#line 2833 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *f = makeFuncCall(SystemFuncName("struct_pack"), (yyvsp[-1].list), (yylsp[-1]));
					(yyval.node) = (PGNode *) f;
				}
#line 30763 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1216: /* func_application: func_name '(' ')'  */
#line 2842 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall((yyvsp[-2].list), NIL, (yylsp[-2]));
				}
#line 30771 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1217: /* func_application: func_name '(' func_arg_list opt_sort_clause opt_ignore_nulls ')'  */
#line 2846 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall((yyvsp[-5].list), (yyvsp[-3].list), (yylsp[-5]));
					n->agg_order = (yyvsp[-2].list);
					n->agg_ignore_nulls = (yyvsp[-1].ignorenulls);
					(yyval.node) = (PGNode *)n;
				}
#line 30782 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1218: /* func_application: func_name '(' VARIADIC func_arg_expr opt_sort_clause opt_ignore_nulls ')'  */
#line 2853 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall((yyvsp[-6].list), list_make1((yyvsp[-3].node)), (yylsp[-6]));
					n->func_variadic = true;
					n->agg_order = (yyvsp[-2].list);
					n->agg_ignore_nulls = (yyvsp[-1].ignorenulls);
					(yyval.node) = (PGNode *)n;
				}
#line 30794 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1219: /* func_application: func_name '(' func_arg_list ',' VARIADIC func_arg_expr opt_sort_clause opt_ignore_nulls ')'  */
#line 2861 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall((yyvsp[-8].list), lappend((yyvsp[-6].list), (yyvsp[-3].node)), (yylsp[-8]));
					n->func_variadic = true;
					n->agg_order = (yyvsp[-2].list);
					n->agg_ignore_nulls = (yyvsp[-1].ignorenulls);
					(yyval.node) = (PGNode *)n;
				}
#line 30806 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1220: /* func_application: func_name '(' ALL func_arg_list opt_sort_clause opt_ignore_nulls ')'  */
#line 2869 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall((yyvsp[-6].list), (yyvsp[-3].list), (yylsp[-6]));
					n->agg_order = (yyvsp[-2].list);
					n->agg_ignore_nulls = (yyvsp[-1].ignorenulls);
					/* Ideally we'd mark the PGFuncCall node to indicate
					 * "must be an aggregate", but there's no provision
					 * for that in PGFuncCall at the moment.
					 */
					(yyval.node) = (PGNode *)n;
				}
#line 30821 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1221: /* func_application: func_name '(' DISTINCT func_arg_list opt_sort_clause opt_ignore_nulls ')'  */
#line 2880 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall((yyvsp[-6].list), (yyvsp[-3].list), (yylsp[-6]));
					n->agg_order = (yyvsp[-2].list);
					n->agg_ignore_nulls = (yyvsp[-1].ignorenulls);
					n->agg_distinct = true;
					(yyval.node) = (PGNode *)n;
				}
#line 30833 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1222: /* func_expr: func_application within_group_clause filter_clause export_clause over_clause  */
#line 2900 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = (PGFuncCall *) (yyvsp[-4].node);
					/*
					 * The order clause for WITHIN GROUP and the one for
					 * plain-aggregate ORDER BY share a field, so we have to
					 * check here that at most one is present.  We also check
					 * for DISTINCT and VARIADIC here to give a better error
					 * location.  Other consistency checks are deferred to
					 * parse analysis.
					 */
					if ((yyvsp[-3].list) != NIL)
					{
						if (n->agg_order != NIL)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("cannot use multiple ORDER BY clauses with WITHIN GROUP"),
									 parser_errposition((yylsp[-3]))));
						if (n->agg_distinct)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("cannot use DISTINCT with WITHIN GROUP"),
									 parser_errposition((yylsp[-3]))));
						if (n->func_variadic)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("cannot use VARIADIC with WITHIN GROUP"),
									 parser_errposition((yylsp[-3]))));
						n->agg_order = (yyvsp[-3].list);
						n->agg_within_group = true;
					}
					n->agg_filter = (yyvsp[-2].node);
					n->export_state = (yyvsp[-1].boolean);
					n->over = (yyvsp[0].windef);
					(yyval.node) = (PGNode *) n;
				}
#line 30873 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1223: /* func_expr: func_expr_common_subexpr  */
#line 2936 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 30879 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1224: /* func_expr_windowless: func_application  */
#line 2946 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 30885 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1225: /* func_expr_windowless: func_expr_common_subexpr  */
#line 2947 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 30891 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1226: /* func_expr_common_subexpr: COLLATION FOR '(' a_expr ')'  */
#line 2955 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("pg_collation_for"),
											   list_make1((yyvsp[-1].node)),
											   (yylsp[-4]));
				}
#line 30901 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1227: /* func_expr_common_subexpr: CAST '(' a_expr AS Typename ')'  */
#line 2961 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeTypeCast((yyvsp[-3].node), (yyvsp[-1].typnam), 0, (yylsp[-5])); }
#line 30907 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1228: /* func_expr_common_subexpr: TRY_CAST '(' a_expr AS Typename ')'  */
#line 2963 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeTypeCast((yyvsp[-3].node), (yyvsp[-1].typnam), 1, (yylsp[-5])); }
#line 30913 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1229: /* func_expr_common_subexpr: EXTRACT '(' extract_list ')'  */
#line 2965 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("date_part"), (yyvsp[-1].list), (yylsp[-3]));
				}
#line 30921 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1230: /* func_expr_common_subexpr: OVERLAY '(' overlay_list ')'  */
#line 2969 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* overlay(A PLACING B FROM C FOR D) is converted to
					 * overlay(A, B, C, D)
					 * overlay(A PLACING B FROM C) is converted to
					 * overlay(A, B, C)
					 */
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("overlay"), (yyvsp[-1].list), (yylsp[-3]));
				}
#line 30934 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1231: /* func_expr_common_subexpr: POSITION '(' position_list ')'  */
#line 2978 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* position(A in B) is converted to position_inverse(A, B) */
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("__internal_position_operator"), (yyvsp[-1].list), (yylsp[-3]));
				}
#line 30943 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1232: /* func_expr_common_subexpr: SUBSTRING '(' substr_list ')'  */
#line 2983 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* substring(A from B for C) is converted to
					 * substring(A, B, C) - thomas 2000-11-28
					 */
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("substring"), (yyvsp[-1].list), (yylsp[-3]));
				}
#line 30954 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1233: /* func_expr_common_subexpr: TREAT '(' a_expr AS Typename ')'  */
#line 2990 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* TREAT(expr AS target) converts expr of a particular type to target,
					 * which is defined to be a subtype of the original expression.
					 * In SQL99, this is intended for use with structured UDTs,
					 * but let's make this a generally useful form allowing stronger
					 * coercions than are handled by implicit casting.
					 *
					 * Convert SystemTypeName() to SystemFuncName() even though
					 * at the moment they result in the same thing.
					 */
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName(((PGValue *)llast((yyvsp[-1].typnam)->names))->val.str),
												list_make1((yyvsp[-3].node)),
												(yylsp[-5]));
				}
#line 30973 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1234: /* func_expr_common_subexpr: TRIM '(' BOTH trim_list ')'  */
#line 3005 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* various trim expressions are defined in SQL
					 * - thomas 1997-07-19
					 */
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("trim"), (yyvsp[-1].list), (yylsp[-4]));
				}
#line 30984 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1235: /* func_expr_common_subexpr: TRIM '(' LEADING trim_list ')'  */
#line 3012 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("ltrim"), (yyvsp[-1].list), (yylsp[-4]));
				}
#line 30992 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1236: /* func_expr_common_subexpr: TRIM '(' TRAILING trim_list ')'  */
#line 3016 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("rtrim"), (yyvsp[-1].list), (yylsp[-4]));
				}
#line 31000 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1237: /* func_expr_common_subexpr: TRIM '(' trim_list ')'  */
#line 3020 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("trim"), (yyvsp[-1].list), (yylsp[-3]));
				}
#line 31008 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1238: /* func_expr_common_subexpr: NULLIF '(' a_expr ',' a_expr ')'  */
#line 3024 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NULLIF, "=", (yyvsp[-3].node), (yyvsp[-1].node), (yylsp[-5]));
				}
#line 31016 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1239: /* func_expr_common_subexpr: COALESCE '(' expr_list_opt_comma ')'  */
#line 3028 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGCoalesceExpr *c = makeNode(PGCoalesceExpr);
					c->args = (yyvsp[-1].list);
					c->location = (yylsp[-3]);
					(yyval.node) = (PGNode *)c;
				}
#line 31027 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1240: /* list_comprehension: '[' a_expr FOR ColId IN_P a_expr ']'  */
#line 3038 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGLambdaFunction *lambda = makeNode(PGLambdaFunction);
					lambda->lhs = makeColumnRef((yyvsp[-3].str), NIL, (yylsp[-3]), yyscanner);
					lambda->rhs = (yyvsp[-5].node);
					lambda->location = (yylsp[-6]);
					PGFuncCall *n = makeFuncCall(SystemFuncName("list_apply"), list_make2((yyvsp[-1].node), lambda), (yylsp[-6]));
					(yyval.node) = (PGNode *) n;
				}
#line 31040 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1241: /* list_comprehension: '[' a_expr FOR ColId IN_P c_expr IF_P a_expr ']'  */
#line 3047 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGLambdaFunction *lambda = makeNode(PGLambdaFunction);
					lambda->lhs = makeColumnRef((yyvsp[-5].str), NIL, (yylsp[-5]), yyscanner);
					lambda->rhs = (yyvsp[-7].node);
					lambda->location = (yylsp[-8]);

					PGLambdaFunction *lambda_filter = makeNode(PGLambdaFunction);
					lambda_filter->lhs = makeColumnRef((yyvsp[-5].str), NIL, (yylsp[-5]), yyscanner);
					lambda_filter->rhs = (yyvsp[-1].node);
					lambda_filter->location = (yylsp[-1]);
					PGFuncCall *filter = makeFuncCall(SystemFuncName("list_filter"), list_make2((yyvsp[-3].node), lambda_filter), (yylsp[-8]));
					PGFuncCall *n = makeFuncCall(SystemFuncName("list_apply"), list_make2(filter, lambda), (yylsp[-8]));
					(yyval.node) = (PGNode *) n;
				}
#line 31059 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1242: /* within_group_clause: WITHIN GROUP_P '(' sort_clause ')'  */
#line 3068 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 31065 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1243: /* within_group_clause: %empty  */
#line 3069 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 31071 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1244: /* filter_clause: FILTER '(' WHERE a_expr ')'  */
#line 3073 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[-1].node); }
#line 31077 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1245: /* filter_clause: FILTER '(' a_expr ')'  */
#line 3074 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[-1].node); }
#line 31083 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1246: /* filter_clause: %empty  */
#line 3075 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 31089 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1247: /* export_clause: EXPORT_STATE  */
#line 3079 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.boolean) = true; }
#line 31095 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1248: /* export_clause: %empty  */
#line 3080 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 31101 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1249: /* window_clause: WINDOW window_definition_list  */
#line 3087 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 31107 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1250: /* window_clause: %empty  */
#line 3088 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 31113 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1251: /* window_definition_list: window_definition  */
#line 3092 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].windef)); }
#line 31119 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1252: /* window_definition_list: window_definition_list ',' window_definition  */
#line 3094 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].windef)); }
#line 31125 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1253: /* window_definition: ColId AS window_specification  */
#line 3099 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = (yyvsp[0].windef);
					n->name = (yyvsp[-2].str);
					(yyval.windef) = n;
				}
#line 31135 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1254: /* over_clause: OVER window_specification  */
#line 3107 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.windef) = (yyvsp[0].windef); }
#line 31141 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1255: /* over_clause: OVER ColId  */
#line 3109 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->name = (yyvsp[0].str);
					n->refname = NULL;
					n->partitionClause = NIL;
					n->orderClause = NIL;
					n->frameOptions = FRAMEOPTION_DEFAULTS;
					n->startOffset = NULL;
					n->endOffset = NULL;
					n->location = (yylsp[0]);
					(yyval.windef) = n;
				}
#line 31158 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1256: /* over_clause: %empty  */
#line 3122 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.windef) = NULL; }
#line 31164 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1257: /* window_specification: '(' opt_existing_window_name opt_partition_clause opt_sort_clause opt_frame_clause ')'  */
#line 3127 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->name = NULL;
					n->refname = (yyvsp[-4].str);
					n->partitionClause = (yyvsp[-3].list);
					n->orderClause = (yyvsp[-2].list);
					/* copy relevant fields of opt_frame_clause */
					n->frameOptions = (yyvsp[-1].windef)->frameOptions;
					n->startOffset = (yyvsp[-1].windef)->startOffset;
					n->endOffset = (yyvsp[-1].windef)->endOffset;
					n->location = (yylsp[-5]);
					(yyval.windef) = n;
				}
#line 31182 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1258: /* opt_existing_window_name: ColId  */
#line 3152 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 31188 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1259: /* opt_existing_window_name: %empty  */
#line 3153 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = NULL; }
#line 31194 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1260: /* opt_partition_clause: PARTITION BY expr_list  */
#line 3156 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.list) = (yyvsp[0].list); }
#line 31200 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1261: /* opt_partition_clause: %empty  */
#line 3157 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 31206 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1262: /* opt_frame_clause: RANGE frame_extent opt_window_exclusion_clause  */
#line 3166 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = (yyvsp[-1].windef);

					n->frameOptions |= FRAMEOPTION_NONDEFAULT | FRAMEOPTION_RANGE;
					n->frameOptions |= (yyvsp[0].ival);
					(yyval.windef) = n;
				}
#line 31218 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1263: /* opt_frame_clause: ROWS frame_extent opt_window_exclusion_clause  */
#line 3174 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = (yyvsp[-1].windef);

					n->frameOptions |= FRAMEOPTION_NONDEFAULT | FRAMEOPTION_ROWS;
					n->frameOptions |= (yyvsp[0].ival);
					(yyval.windef) = n;
				}
#line 31230 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1264: /* opt_frame_clause: GROUPS frame_extent opt_window_exclusion_clause  */
#line 3182 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = (yyvsp[-1].windef);

					n->frameOptions |= FRAMEOPTION_NONDEFAULT | FRAMEOPTION_GROUPS;
					n->frameOptions |= (yyvsp[0].ival);
					(yyval.windef) = n;
				}
#line 31242 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1265: /* opt_frame_clause: %empty  */
#line 3190 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);

					n->frameOptions = FRAMEOPTION_DEFAULTS;
					n->startOffset = NULL;
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 31255 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1266: /* frame_extent: frame_bound  */
#line 3201 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = (yyvsp[0].windef);

					/* reject invalid cases */
					if (n->frameOptions & FRAMEOPTION_START_UNBOUNDED_FOLLOWING)
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame start cannot be UNBOUNDED FOLLOWING"),
								 parser_errposition((yylsp[0]))));
					if (n->frameOptions & FRAMEOPTION_START_OFFSET_FOLLOWING)
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame starting from following row cannot end with current row"),
								 parser_errposition((yylsp[0]))));
					n->frameOptions |= FRAMEOPTION_END_CURRENT_ROW;
					(yyval.windef) = n;
				}
#line 31277 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1267: /* frame_extent: BETWEEN frame_bound AND frame_bound  */
#line 3219 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n1 = (yyvsp[-2].windef);
					PGWindowDef *n2 = (yyvsp[0].windef);

					/* form merged options */
					int		frameOptions = n1->frameOptions;
					/* shift converts START_ options to END_ options */
					frameOptions |= n2->frameOptions << 1;
					frameOptions |= FRAMEOPTION_BETWEEN;
					/* reject invalid cases */
					if (frameOptions & FRAMEOPTION_START_UNBOUNDED_FOLLOWING)
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame start cannot be UNBOUNDED FOLLOWING"),
								 parser_errposition((yylsp[-2]))));
					if (frameOptions & FRAMEOPTION_END_UNBOUNDED_PRECEDING)
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame end cannot be UNBOUNDED PRECEDING"),
								 parser_errposition((yylsp[0]))));
					if ((frameOptions & FRAMEOPTION_START_CURRENT_ROW) &&
						(frameOptions & FRAMEOPTION_END_OFFSET_PRECEDING))
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame starting from current row cannot have preceding rows"),
								 parser_errposition((yylsp[0]))));
					if ((frameOptions & FRAMEOPTION_START_OFFSET_FOLLOWING) &&
						(frameOptions & (FRAMEOPTION_END_OFFSET_PRECEDING |
										 FRAMEOPTION_END_CURRENT_ROW)))
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame starting from following row cannot have preceding rows"),
								 parser_errposition((yylsp[0]))));
					n1->frameOptions = frameOptions;
					n1->endOffset = n2->startOffset;
					(yyval.windef) = n1;
				}
#line 31319 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1268: /* frame_bound: UNBOUNDED PRECEDING  */
#line 3265 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);

					n->frameOptions = FRAMEOPTION_START_UNBOUNDED_PRECEDING;
					n->startOffset = NULL;
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 31332 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1269: /* frame_bound: UNBOUNDED FOLLOWING  */
#line 3274 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);

					n->frameOptions = FRAMEOPTION_START_UNBOUNDED_FOLLOWING;
					n->startOffset = NULL;
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 31345 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1270: /* frame_bound: CURRENT_P ROW  */
#line 3283 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);

					n->frameOptions = FRAMEOPTION_START_CURRENT_ROW;
					n->startOffset = NULL;
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 31358 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1271: /* frame_bound: a_expr PRECEDING  */
#line 3292 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);

					n->frameOptions = FRAMEOPTION_START_OFFSET_PRECEDING;
					n->startOffset = (yyvsp[-1].node);
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 31371 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1272: /* frame_bound: a_expr FOLLOWING  */
#line 3301 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);

					n->frameOptions = FRAMEOPTION_START_OFFSET_FOLLOWING;
					n->startOffset = (yyvsp[-1].node);
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 31384 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1273: /* opt_window_exclusion_clause: EXCLUDE CURRENT_P ROW  */
#line 3312 "third_party/libpg_query/grammar/statements/select.y"
                                                { (yyval.ival) = FRAMEOPTION_EXCLUDE_CURRENT_ROW; }
#line 31390 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1274: /* opt_window_exclusion_clause: EXCLUDE GROUP_P  */
#line 3313 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.ival) = FRAMEOPTION_EXCLUDE_GROUP; }
#line 31396 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1275: /* opt_window_exclusion_clause: EXCLUDE TIES  */
#line 3314 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.ival) = FRAMEOPTION_EXCLUDE_TIES; }
#line 31402 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1276: /* opt_window_exclusion_clause: EXCLUDE NO OTHERS  */
#line 3315 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.ival) = 0; }
#line 31408 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1277: /* opt_window_exclusion_clause: %empty  */
#line 3316 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.ival) = 0; }
#line 31414 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1278: /* qualified_row: ROW '(' expr_list_opt_comma ')'  */
#line 3330 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 31420 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1279: /* qualified_row: ROW '(' ')'  */
#line 3331 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = NIL; }
#line 31426 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1280: /* row: qualified_row  */
#line 3334 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[0].list);}
#line 31432 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1281: /* row: '(' expr_list ',' a_expr ')'  */
#line 3335 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = lappend((yyvsp[-3].list), (yyvsp[-1].node)); }
#line 31438 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1282: /* dict_arg: ColIdOrString ':' a_expr  */
#line 3340 "third_party/libpg_query/grammar/statements/select.y"
                                                                                {
		PGNamedArgExpr *na = makeNode(PGNamedArgExpr);
		na->name = (yyvsp[-2].str);
		na->arg = (PGExpr *) (yyvsp[0].node);
		na->argnumber = -1;
		na->location = (yylsp[-2]);
		(yyval.node) = (PGNode *) na;
	}
#line 31451 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1283: /* dict_arguments: dict_arg  */
#line 3350 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 31457 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1284: /* dict_arguments: dict_arguments ',' dict_arg  */
#line 3351 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 31463 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1285: /* dict_arguments_opt_comma: dict_arguments  */
#line 3355 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 31469 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1286: /* dict_arguments_opt_comma: dict_arguments ','  */
#line 3356 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 31475 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1287: /* map_arg: a_expr ':' a_expr  */
#line 3361 "third_party/libpg_query/grammar/statements/select.y"
                        {
				(yyval.list) = list_make2((yyvsp[-2].node), (yyvsp[0].node));
			}
#line 31483 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1288: /* map_arguments: map_arg  */
#line 3367 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].list)); }
#line 31489 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1289: /* map_arguments: map_arguments ',' map_arg  */
#line 3368 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].list)); }
#line 31495 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1290: /* map_arguments_opt_comma: map_arguments  */
#line 3373 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 31501 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1291: /* map_arguments_opt_comma: map_arguments ','  */
#line 3374 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 31507 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1292: /* opt_map_arguments_opt_comma: map_arguments_opt_comma  */
#line 3379 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 31513 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1293: /* opt_map_arguments_opt_comma: %empty  */
#line 3380 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = NULL; }
#line 31519 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1294: /* sub_type: ANY  */
#line 3383 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.subquerytype) = PG_ANY_SUBLINK; }
#line 31525 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1295: /* sub_type: SOME  */
#line 3384 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.subquerytype) = PG_ANY_SUBLINK; }
#line 31531 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1296: /* sub_type: ALL  */
#line 3385 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.subquerytype) = PG_ALL_SUBLINK; }
#line 31537 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1297: /* all_Op: Op  */
#line 3388 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 31543 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1298: /* all_Op: MathOp  */
#line 3389 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.str) = (char*) (yyvsp[0].conststr); }
#line 31549 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1299: /* MathOp: '+'  */
#line 3392 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.conststr) = "+"; }
#line 31555 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1300: /* MathOp: '-'  */
#line 3393 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "-"; }
#line 31561 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1301: /* MathOp: '*'  */
#line 3394 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "*"; }
#line 31567 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1302: /* MathOp: '/'  */
#line 3395 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "/"; }
#line 31573 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1303: /* MathOp: INTEGER_DIVISION  */
#line 3396 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.conststr) = "//"; }
#line 31579 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1304: /* MathOp: '%'  */
#line 3397 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "%"; }
#line 31585 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1305: /* MathOp: '^'  */
#line 3398 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "^"; }
#line 31591 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1306: /* MathOp: POWER_OF  */
#line 3399 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "**"; }
#line 31597 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1307: /* MathOp: '<'  */
#line 3400 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "<"; }
#line 31603 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1308: /* MathOp: '>'  */
#line 3401 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = ">"; }
#line 31609 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1309: /* MathOp: '='  */
#line 3402 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "="; }
#line 31615 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1310: /* MathOp: LESS_EQUALS  */
#line 3403 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.conststr) = "<="; }
#line 31621 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1311: /* MathOp: GREATER_EQUALS  */
#line 3404 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.conststr) = ">="; }
#line 31627 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1312: /* MathOp: NOT_EQUALS  */
#line 3405 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.conststr) = "<>"; }
#line 31633 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1313: /* qual_Op: Op  */
#line 3409 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 31639 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1314: /* qual_Op: OPERATOR '(' any_operator ')'  */
#line 3411 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = (yyvsp[-1].list); }
#line 31645 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1315: /* qual_all_Op: all_Op  */
#line 3416 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 31651 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1316: /* qual_all_Op: OPERATOR '(' any_operator ')'  */
#line 3418 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = (yyvsp[-1].list); }
#line 31657 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1317: /* subquery_Op: all_Op  */
#line 3423 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 31663 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1318: /* subquery_Op: OPERATOR '(' any_operator ')'  */
#line 3425 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = (yyvsp[-1].list); }
#line 31669 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1319: /* subquery_Op: LIKE  */
#line 3427 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("~~")); }
#line 31675 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1320: /* subquery_Op: NOT_LA LIKE  */
#line 3429 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("!~~")); }
#line 31681 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1321: /* subquery_Op: GLOB  */
#line 3431 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("~~~")); }
#line 31687 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1322: /* subquery_Op: NOT_LA GLOB  */
#line 3433 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("!~~~")); }
#line 31693 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1323: /* subquery_Op: ILIKE  */
#line 3435 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("~~*")); }
#line 31699 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1324: /* subquery_Op: NOT_LA ILIKE  */
#line 3437 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("!~~*")); }
#line 31705 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1325: /* any_operator: all_Op  */
#line 3451 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 31711 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1326: /* any_operator: ColId '.' any_operator  */
#line 3453 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = lcons(makeString((yyvsp[-2].str)), (yyvsp[0].list)); }
#line 31717 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1327: /* c_expr_list: c_expr  */
#line 3458 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 31725 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1328: /* c_expr_list: c_expr_list ',' c_expr  */
#line 3462 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 31733 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1329: /* c_expr_list_opt_comma: c_expr_list  */
#line 3469 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = (yyvsp[0].list);
				}
#line 31741 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1330: /* c_expr_list_opt_comma: c_expr_list ','  */
#line 3474 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = (yyvsp[-1].list);
				}
#line 31749 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1331: /* expr_list: a_expr  */
#line 3480 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 31757 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1332: /* expr_list: expr_list ',' a_expr  */
#line 3484 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 31765 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1333: /* expr_list_opt_comma: expr_list  */
#line 3491 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = (yyvsp[0].list);
				}
#line 31773 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1334: /* expr_list_opt_comma: expr_list ','  */
#line 3496 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = (yyvsp[-1].list);
				}
#line 31781 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1335: /* opt_expr_list_opt_comma: expr_list_opt_comma  */
#line 3503 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = (yyvsp[0].list);
				}
#line 31789 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1336: /* opt_expr_list_opt_comma: %empty  */
#line 3507 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = NULL;
				}
#line 31797 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1337: /* func_arg_list: func_arg_expr  */
#line 3516 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 31805 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1338: /* func_arg_list: func_arg_list ',' func_arg_expr  */
#line 3520 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 31813 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1339: /* func_arg_expr: a_expr  */
#line 3526 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (yyvsp[0].node);
				}
#line 31821 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1340: /* func_arg_expr: param_name COLON_EQUALS a_expr  */
#line 3530 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNamedArgExpr *na = makeNode(PGNamedArgExpr);
					na->name = (yyvsp[-2].str);
					na->arg = (PGExpr *) (yyvsp[0].node);
					na->argnumber = -1;		/* until determined */
					na->location = (yylsp[-2]);
					(yyval.node) = (PGNode *) na;
				}
#line 31834 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1341: /* func_arg_expr: param_name EQUALS_GREATER a_expr  */
#line 3539 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNamedArgExpr *na = makeNode(PGNamedArgExpr);
					na->name = (yyvsp[-2].str);
					na->arg = (PGExpr *) (yyvsp[0].node);
					na->argnumber = -1;		/* until determined */
					na->location = (yylsp[-2]);
					(yyval.node) = (PGNode *) na;
				}
#line 31847 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1342: /* type_list: Typename  */
#line 3549 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].typnam)); }
#line 31853 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1343: /* type_list: type_list ',' Typename  */
#line 3550 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].typnam)); }
#line 31859 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1344: /* extract_list: extract_arg FROM a_expr  */
#line 3555 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make2(makeStringConst((yyvsp[-2].str), (yylsp[-2])), (yyvsp[0].node));
				}
#line 31867 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1345: /* extract_list: %empty  */
#line 3558 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 31873 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1346: /* extract_arg: IDENT  */
#line 3565 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 31879 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1347: /* extract_arg: year_keyword  */
#line 3566 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "year"; }
#line 31885 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1348: /* extract_arg: month_keyword  */
#line 3567 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "month"; }
#line 31891 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1349: /* extract_arg: day_keyword  */
#line 3568 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "day"; }
#line 31897 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1350: /* extract_arg: hour_keyword  */
#line 3569 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "hour"; }
#line 31903 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1351: /* extract_arg: minute_keyword  */
#line 3570 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "minute"; }
#line 31909 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1352: /* extract_arg: second_keyword  */
#line 3571 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "second"; }
#line 31915 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1353: /* extract_arg: millisecond_keyword  */
#line 3572 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.str) = (char*) "millisecond"; }
#line 31921 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1354: /* extract_arg: microsecond_keyword  */
#line 3573 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.str) = (char*) "microsecond"; }
#line 31927 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1355: /* extract_arg: week_keyword  */
#line 3574 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "week"; }
#line 31933 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1356: /* extract_arg: decade_keyword  */
#line 3575 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "decade"; }
#line 31939 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1357: /* extract_arg: century_keyword  */
#line 3576 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "century"; }
#line 31945 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1358: /* extract_arg: millennium_keyword  */
#line 3577 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.str) = (char*) "millennium"; }
#line 31951 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1359: /* extract_arg: Sconst  */
#line 3578 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 31957 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1360: /* overlay_list: a_expr overlay_placing substr_from substr_for  */
#line 3589 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make4((yyvsp[-3].node), (yyvsp[-2].node), (yyvsp[-1].node), (yyvsp[0].node));
				}
#line 31965 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1361: /* overlay_list: a_expr overlay_placing substr_from  */
#line 3593 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make3((yyvsp[-2].node), (yyvsp[-1].node), (yyvsp[0].node));
				}
#line 31973 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1362: /* overlay_placing: PLACING a_expr  */
#line 3600 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 31979 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1363: /* position_list: b_expr IN_P b_expr  */
#line 3606 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make2((yyvsp[-2].node), (yyvsp[0].node)); }
#line 31985 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1364: /* position_list: %empty  */
#line 3607 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 31991 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1365: /* substr_list: a_expr substr_from substr_for  */
#line 3624 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make3((yyvsp[-2].node), (yyvsp[-1].node), (yyvsp[0].node));
				}
#line 31999 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1366: /* substr_list: a_expr substr_for substr_from  */
#line 3628 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* not legal per SQL99, but might as well allow it */
					(yyval.list) = list_make3((yyvsp[-2].node), (yyvsp[0].node), (yyvsp[-1].node));
				}
#line 32008 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1367: /* substr_list: a_expr substr_from  */
#line 3633 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make2((yyvsp[-1].node), (yyvsp[0].node));
				}
#line 32016 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1368: /* substr_list: a_expr substr_for  */
#line 3637 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/*
					 * Since there are no cases where this syntax allows
					 * a textual FOR value, we forcibly cast the argument
					 * to int4.  The possible matches in pg_proc are
					 * substring(text,int4) and substring(text,text),
					 * and we don't want the parser to choose the latter,
					 * which it is likely to do if the second argument
					 * is unknown or doesn't have an implicit cast to int4.
					 */
					(yyval.list) = list_make3((yyvsp[-1].node), makeIntConst(1, -1),
									makeTypeCast((yyvsp[0].node),
												 SystemTypeName("int4"), 0, -1));
				}
#line 32035 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1369: /* substr_list: expr_list  */
#line 3652 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = (yyvsp[0].list);
				}
#line 32043 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1370: /* substr_list: %empty  */
#line 3656 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = NIL; }
#line 32049 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1371: /* substr_from: FROM a_expr  */
#line 3660 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 32055 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1372: /* substr_for: FOR a_expr  */
#line 3663 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 32061 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1373: /* trim_list: a_expr FROM expr_list_opt_comma  */
#line 3666 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = lappend((yyvsp[0].list), (yyvsp[-2].node)); }
#line 32067 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1374: /* trim_list: FROM expr_list_opt_comma  */
#line 3667 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 32073 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1375: /* trim_list: expr_list_opt_comma  */
#line 3668 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 32079 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1376: /* in_expr: select_with_parens  */
#line 3672 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSubLink *n = makeNode(PGSubLink);
					n->subselect = (yyvsp[0].node);
					/* other fields will be filled later */
					(yyval.node) = (PGNode *)n;
				}
#line 32090 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1377: /* in_expr: '(' expr_list_opt_comma ')'  */
#line 3678 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (PGNode *)(yyvsp[-1].list); }
#line 32096 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1378: /* case_expr: CASE case_arg when_clause_list case_default END_P  */
#line 3689 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGCaseExpr *c = makeNode(PGCaseExpr);
					c->casetype = InvalidOid; /* not analyzed yet */
					c->arg = (PGExpr *) (yyvsp[-3].node);
					c->args = (yyvsp[-2].list);
					c->defresult = (PGExpr *) (yyvsp[-1].node);
					c->location = (yylsp[-4]);
					(yyval.node) = (PGNode *)c;
				}
#line 32110 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1379: /* when_clause_list: when_clause  */
#line 3702 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 32116 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1380: /* when_clause_list: when_clause_list when_clause  */
#line 3703 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 32122 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1381: /* when_clause: WHEN a_expr THEN a_expr  */
#line 3708 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGCaseWhen *w = makeNode(PGCaseWhen);
					w->expr = (PGExpr *) (yyvsp[-2].node);
					w->result = (PGExpr *) (yyvsp[0].node);
					w->location = (yylsp[-3]);
					(yyval.node) = (PGNode *)w;
				}
#line 32134 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1382: /* case_default: ELSE a_expr  */
#line 3718 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 32140 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1383: /* case_default: %empty  */
#line 3719 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 32146 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1384: /* case_arg: a_expr  */
#line 3722 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 32152 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1385: /* case_arg: %empty  */
#line 3723 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 32158 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1386: /* columnref: ColId  */
#line 3727 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeColumnRef((yyvsp[0].str), NIL, (yylsp[0]), yyscanner);
				}
#line 32166 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1387: /* columnref: ColId indirection  */
#line 3731 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeColumnRef((yyvsp[-1].str), (yyvsp[0].list), (yylsp[-1]), yyscanner);
				}
#line 32174 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1388: /* indirection_el: '[' a_expr ']'  */
#line 3738 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAIndices *ai = makeNode(PGAIndices);
					ai->is_slice = false;
					ai->lidx = NULL;
					ai->uidx = (yyvsp[-1].node);
					(yyval.node) = (PGNode *) ai;
				}
#line 32186 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1389: /* indirection_el: '[' opt_slice_bound ':' opt_slice_bound ']'  */
#line 3746 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAIndices *ai = makeNode(PGAIndices);
					ai->is_slice = true;
					ai->lidx = (yyvsp[-3].node);
					ai->uidx = (yyvsp[-1].node);
					(yyval.node) = (PGNode *) ai;
				}
#line 32198 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1390: /* indirection_el: '[' opt_slice_bound ':' opt_slice_bound ':' opt_slice_bound ']'  */
#line 3753 "third_party/libpg_query/grammar/statements/select.y"
                                                                                          {
				    	PGAIndices *ai = makeNode(PGAIndices);
				    	ai->is_slice = true;
				    	ai->lidx = (yyvsp[-5].node);
				    	ai->uidx = (yyvsp[-3].node);
				    	ai->step = (yyvsp[-1].node);
				    	(yyval.node) = (PGNode *) ai;
				}
#line 32211 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1391: /* indirection_el: '[' opt_slice_bound ':' '-' ':' opt_slice_bound ']'  */
#line 3761 "third_party/libpg_query/grammar/statements/select.y"
                                                                              {
					PGAIndices *ai = makeNode(PGAIndices);
					ai->is_slice = true;
					ai->lidx = (yyvsp[-5].node);
					ai->step = (yyvsp[-1].node);
					(yyval.node) = (PGNode *) ai;
				}
#line 32223 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1392: /* opt_slice_bound: a_expr  */
#line 3771 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 32229 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1393: /* opt_slice_bound: %empty  */
#line 3772 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 32235 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1394: /* opt_indirection: %empty  */
#line 3777 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 32241 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1395: /* opt_indirection: opt_indirection indirection_el  */
#line 3778 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 32247 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1396: /* opt_func_arguments: %empty  */
#line 3782 "third_party/libpg_query/grammar/statements/select.y"
                                                { (yyval.list) = NULL; }
#line 32253 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1397: /* opt_func_arguments: '(' ')'  */
#line 3783 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.list) = list_make1(NULL); }
#line 32259 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1398: /* opt_func_arguments: '(' func_arg_list ')'  */
#line 3784 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = (yyvsp[-1].list); }
#line 32265 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1399: /* extended_indirection_el: '.' attr_name opt_func_arguments  */
#line 3789 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].list)) {
						PGFuncCall *n = makeFuncCall(list_make1(makeString((yyvsp[-1].str))), (yyvsp[0].list)->head->data.ptr_value ? (yyvsp[0].list) : NULL, (yylsp[-1]));
						(yyval.node) = (PGNode *) n;
					} else {
						(yyval.node) = (PGNode *) makeString((yyvsp[-1].str));
					}
				}
#line 32278 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1400: /* extended_indirection_el: '[' a_expr ']'  */
#line 3798 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAIndices *ai = makeNode(PGAIndices);
					ai->is_slice = false;
					ai->lidx = NULL;
					ai->uidx = (yyvsp[-1].node);
					(yyval.node) = (PGNode *) ai;
				}
#line 32290 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1401: /* extended_indirection_el: '[' opt_slice_bound ':' opt_slice_bound ']'  */
#line 3806 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAIndices *ai = makeNode(PGAIndices);
					ai->is_slice = true;
					ai->lidx = (yyvsp[-3].node);
					ai->uidx = (yyvsp[-1].node);
					(yyval.node) = (PGNode *) ai;
				}
#line 32302 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1402: /* extended_indirection_el: '[' opt_slice_bound ':' opt_slice_bound ':' opt_slice_bound ']'  */
#line 3813 "third_party/libpg_query/grammar/statements/select.y"
                                                                                          {
					PGAIndices *ai = makeNode(PGAIndices);
					ai->is_slice = true;
					ai->lidx = (yyvsp[-5].node);
					ai->uidx = (yyvsp[-3].node);
					ai->step = (yyvsp[-1].node);
                 			(yyval.node) = (PGNode *) ai;
                		}
#line 32315 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1403: /* extended_indirection_el: '[' opt_slice_bound ':' '-' ':' opt_slice_bound ']'  */
#line 3822 "third_party/libpg_query/grammar/statements/select.y"
                                                                              {
					PGAIndices *ai = makeNode(PGAIndices);
					ai->is_slice = true;
					ai->lidx = (yyvsp[-5].node);
					ai->step = (yyvsp[-1].node);
					(yyval.node) = (PGNode *) ai;
				}
#line 32327 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1404: /* opt_extended_indirection: %empty  */
#line 3837 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                                { (yyval.list) = NIL; }
#line 32333 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1405: /* opt_extended_indirection: opt_extended_indirection extended_indirection_el  */
#line 3838 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 32339 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1408: /* opt_target_list_opt_comma: target_list_opt_comma  */
#line 3854 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 32345 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1409: /* opt_target_list_opt_comma: %empty  */
#line 3855 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = NIL; }
#line 32351 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1410: /* target_list: target_el  */
#line 3859 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].target)); }
#line 32357 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1411: /* target_list: target_list ',' target_el  */
#line 3860 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].target)); }
#line 32363 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1412: /* target_list_opt_comma: target_list  */
#line 3864 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 32369 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1413: /* target_list_opt_comma: target_list ','  */
#line 3865 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 32375 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1414: /* target_el: a_expr AS ColLabelOrString  */
#line 3869 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = (yyvsp[0].str);
					(yyval.target)->indirection = NIL;
					(yyval.target)->val = (PGNode *)(yyvsp[-2].node);
					(yyval.target)->location = (yylsp[-2]);
				}
#line 32387 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1415: /* target_el: a_expr IDENT  */
#line 3885 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = (yyvsp[0].str);
					(yyval.target)->indirection = NIL;
					(yyval.target)->val = (PGNode *)(yyvsp[-1].node);
					(yyval.target)->location = (yylsp[-1]);
				}
#line 32399 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1416: /* target_el: a_expr  */
#line 3893 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = NULL;
					(yyval.target)->indirection = NIL;
					(yyval.target)->val = (PGNode *)(yyvsp[0].node);
					(yyval.target)->location = (yylsp[0]);
				}
#line 32411 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1417: /* except_list: EXCLUDE '(' name_list_opt_comma ')'  */
#line 3902 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 32417 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1418: /* except_list: EXCLUDE ColId  */
#line 3903 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 32423 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1419: /* opt_except_list: except_list  */
#line 3906 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 32429 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1420: /* opt_except_list: %empty  */
#line 3907 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NULL; }
#line 32435 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1421: /* replace_list_el: a_expr AS ColId  */
#line 3910 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = list_make2((yyvsp[-2].node), makeString((yyvsp[0].str))); }
#line 32441 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1422: /* replace_list: replace_list_el  */
#line 3914 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].list)); }
#line 32447 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1423: /* replace_list: replace_list ',' replace_list_el  */
#line 3915 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].list)); }
#line 32453 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1424: /* replace_list_opt_comma: replace_list  */
#line 3919 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 32459 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1425: /* replace_list_opt_comma: replace_list ','  */
#line 3920 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 32465 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1426: /* opt_replace_list: REPLACE '(' replace_list_opt_comma ')'  */
#line 3923 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 32471 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1427: /* opt_replace_list: REPLACE replace_list_el  */
#line 3924 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = list_make1((yyvsp[0].list)); }
#line 32477 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1428: /* opt_replace_list: %empty  */
#line 3925 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NULL; }
#line 32483 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1429: /* qualified_name_list: qualified_name  */
#line 3935 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].range)); }
#line 32489 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1430: /* qualified_name_list: qualified_name_list ',' qualified_name  */
#line 3936 "third_party/libpg_query/grammar/statements/select.y"
                                                                 { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].range)); }
#line 32495 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1431: /* name_list: name  */
#line 3941 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 32501 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1432: /* name_list: name_list ',' name  */
#line 3943 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = lappend((yyvsp[-2].list), makeString((yyvsp[0].str))); }
#line 32507 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1433: /* name_list_opt_comma: name_list  */
#line 3948 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 32513 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1434: /* name_list_opt_comma: name_list ','  */
#line 3949 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 32519 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1435: /* name_list_opt_comma_opt_bracket: name_list_opt_comma  */
#line 3953 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 32525 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1436: /* name_list_opt_comma_opt_bracket: '(' name_list_opt_comma ')'  */
#line 3954 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 32531 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1437: /* name: ColIdOrString  */
#line 3957 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 32537 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1438: /* func_name: function_name_token  */
#line 3969 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 32543 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1439: /* func_name: ColId indirection  */
#line 3972 "third_party/libpg_query/grammar/statements/select.y"
                                        {
						(yyval.list) = check_func_name(lcons(makeString((yyvsp[-1].str)), (yyvsp[0].list)),
											 yyscanner);
					}
#line 32552 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1440: /* AexprConst: Iconst  */
#line 3983 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeIntConst((yyvsp[0].ival), (yylsp[0]));
				}
#line 32560 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1441: /* AexprConst: FCONST  */
#line 3987 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeFloatConst((yyvsp[0].str), (yylsp[0]));
				}
#line 32568 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1442: /* AexprConst: Sconst opt_indirection  */
#line 3991 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].list))
					{
						PGAIndirection *n = makeNode(PGAIndirection);
						n->arg = makeStringConst((yyvsp[-1].str), (yylsp[-1]));
						n->indirection = check_indirection((yyvsp[0].list), yyscanner);
						(yyval.node) = (PGNode *) n;
					}
					else
						(yyval.node) = makeStringConst((yyvsp[-1].str), (yylsp[-1]));
				}
#line 32584 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1443: /* AexprConst: BCONST  */
#line 4003 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeBitStringConst((yyvsp[0].str), (yylsp[0]));
				}
#line 32592 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1444: /* AexprConst: XCONST  */
#line 4007 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* This is a bit constant per SQL99:
					 * Without Feature F511, "BIT data type",
					 * a <general literal> shall not be a
					 * <bit string literal> or a <hex string literal>.
					 */
					(yyval.node) = makeBitStringConst((yyvsp[0].str), (yylsp[0]));
				}
#line 32605 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1445: /* AexprConst: func_name Sconst  */
#line 4016 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* generic type 'literal' syntax */
					PGTypeName *t = makeTypeNameFromNameList((yyvsp[-1].list));
					t->location = (yylsp[-1]);
					(yyval.node) = makeStringConstCast((yyvsp[0].str), (yylsp[0]), t);
				}
#line 32616 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1446: /* AexprConst: func_name '(' func_arg_list opt_sort_clause opt_ignore_nulls ')' Sconst  */
#line 4023 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* generic syntax with a type modifier */
					PGTypeName *t = makeTypeNameFromNameList((yyvsp[-6].list));
					PGListCell *lc;

					/*
					 * We must use func_arg_list and opt_sort_clause in the
					 * production to avoid reduce/reduce conflicts, but we
					 * don't actually wish to allow PGNamedArgExpr in this
					 * context, ORDER BY, nor IGNORE NULLS.
					 */
					foreach(lc, (yyvsp[-4].list))
					{
						PGNamedArgExpr *arg = (PGNamedArgExpr *) lfirst(lc);

						if (IsA(arg, PGNamedArgExpr))
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("type modifier cannot have parameter name"),
									 parser_errposition(arg->location)));
					}
					if ((yyvsp[-3].list) != NIL)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("type modifier cannot have ORDER BY"),
									 parser_errposition((yylsp[-3]))));
					if ((yyvsp[-2].ignorenulls) != false)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("type modifier cannot have IGNORE NULLS"),
									 parser_errposition((yylsp[-2]))));


					t->typmods = (yyvsp[-4].list);
					t->location = (yylsp[-6]);
					(yyval.node) = makeStringConstCast((yyvsp[0].str), (yylsp[0]), t);
				}
#line 32658 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1447: /* AexprConst: ConstTypename Sconst  */
#line 4061 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeStringConstCast((yyvsp[0].str), (yylsp[0]), (yyvsp[-1].typnam));
				}
#line 32666 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1448: /* AexprConst: ConstInterval '(' a_expr ')' opt_interval  */
#line 4065 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeIntervalNode((yyvsp[-2].node), (yylsp[-2]), (yyvsp[0].list));
				}
#line 32674 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1449: /* AexprConst: ConstInterval Iconst opt_interval  */
#line 4069 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeIntervalNode((yyvsp[-1].ival), (yylsp[-1]), (yyvsp[0].list));
				}
#line 32682 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1450: /* AexprConst: ConstInterval Sconst opt_interval  */
#line 4073 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeIntervalNode((yyvsp[-1].str), (yylsp[-1]), (yyvsp[0].list));
				}
#line 32690 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1451: /* AexprConst: TRUE_P  */
#line 4077 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeBoolAConst(true, (yylsp[0]));
				}
#line 32698 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1452: /* AexprConst: FALSE_P  */
#line 4081 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeBoolAConst(false, (yylsp[0]));
				}
#line 32706 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1453: /* AexprConst: NULL_P  */
#line 4085 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeNullAConst((yylsp[0]));
				}
#line 32714 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1454: /* Iconst: ICONST  */
#line 4090 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.ival) = (yyvsp[0].ival); }
#line 32720 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1455: /* type_function_name: IDENT  */
#line 4107 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 32726 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1456: /* type_function_name: unreserved_keyword  */
#line 4108 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 32732 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1457: /* type_function_name: type_func_name_keyword  */
#line 4109 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 32738 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1458: /* type_function_name: pgq_unreserved_keyword  */
#line 4110 "third_party/libpg_query/grammar/statements/select.y"
                                                    { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 32744 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1459: /* function_name_token: IDENT  */
#line 4114 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 32750 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1460: /* function_name_token: unreserved_keyword  */
#line 4115 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 32756 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1461: /* function_name_token: func_name_keyword  */
#line 4116 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 32762 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1462: /* function_name_token: pgq_unreserved_keyword  */
#line 4117 "third_party/libpg_query/grammar/statements/select.y"
                                                    { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 32768 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1463: /* type_name_token: IDENT  */
#line 4121 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 32774 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1464: /* type_name_token: unreserved_keyword  */
#line 4122 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 32780 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1465: /* type_name_token: type_name_keyword  */
#line 4123 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 32786 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1466: /* type_name_token: pgq_unreserved_keyword  */
#line 4124 "third_party/libpg_query/grammar/statements/select.y"
                                                    { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 32792 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1467: /* any_name: ColId  */
#line 4128 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 32798 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1468: /* any_name: ColId attrs  */
#line 4129 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = lcons(makeString((yyvsp[-1].str)), (yyvsp[0].list)); }
#line 32804 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1469: /* attrs: '.' attr_name  */
#line 4133 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 32810 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1470: /* attrs: attrs '.' attr_name  */
#line 4135 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = lappend((yyvsp[-2].list), makeString((yyvsp[0].str))); }
#line 32816 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1471: /* opt_name_list: '(' name_list_opt_comma ')'  */
#line 4139 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 32822 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1472: /* opt_name_list: %empty  */
#line 4140 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 32828 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1474: /* ColLabelOrString: ColLabel  */
#line 4147 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 32834 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1475: /* ColLabelOrString: SCONST  */
#line 4148 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 32840 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1476: /* PrepareStmt: PREPARE name prep_type_clause AS PreparableStmt  */
#line 8 "third_party/libpg_query/grammar/statements/prepare.y"
                                {
					PGPrepareStmt *n = makeNode(PGPrepareStmt);
					n->name = (yyvsp[-3].str);
					n->argtypes = (yyvsp[-2].list);
					n->query = (yyvsp[0].node);
					(yyval.node) = (PGNode *) n;
				}
#line 32852 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1477: /* prep_type_clause: '(' type_list ')'  */
#line 18 "third_party/libpg_query/grammar/statements/prepare.y"
                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 32858 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1478: /* prep_type_clause: %empty  */
#line 19 "third_party/libpg_query/grammar/statements/prepare.y"
                                                                        { (yyval.list) = NIL; }
#line 32864 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1485: /* CreateSchemaStmt: CREATE_P SCHEMA qualified_name OptSchemaEltList  */
#line 8 "third_party/libpg_query/grammar/statements/create_schema.y"
                                {
					PGCreateSchemaStmt *n = makeNode(PGCreateSchemaStmt);
					if ((yyvsp[-1].range)->catalogname) {
						ereport(ERROR,
								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
								 errmsg("CREATE SCHEMA too many dots: expected \"catalog.schema\" or \"schema\""),
								 parser_errposition((yylsp[-1]))));
					}
					if ((yyvsp[-1].range)->schemaname) {
						n->catalogname = (yyvsp[-1].range)->schemaname;
						n->schemaname = (yyvsp[-1].range)->relname;
					} else {
						n->schemaname = (yyvsp[-1].range)->relname;
					}
					n->schemaElts = (yyvsp[0].list);
					n->onconflict = PG_ERROR_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 32887 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1486: /* CreateSchemaStmt: CREATE_P SCHEMA IF_P NOT EXISTS qualified_name OptSchemaEltList  */
#line 27 "third_party/libpg_query/grammar/statements/create_schema.y"
                                {
					PGCreateSchemaStmt *n = makeNode(PGCreateSchemaStmt);
					if ((yyvsp[-1].range)->catalogname) {
						ereport(ERROR,
								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
								 errmsg("CREATE SCHEMA too many dots: expected \"catalog.schema\" or \"schema\""),
								 parser_errposition((yylsp[-1]))));
					}
					if ((yyvsp[-1].range)->schemaname) {
						n->catalogname = (yyvsp[-1].range)->schemaname;
						n->schemaname = (yyvsp[-1].range)->relname;
					} else {
						n->schemaname = (yyvsp[-1].range)->relname;
					}
					if ((yyvsp[0].list) != NIL)
						ereport(ERROR,
								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
								 errmsg("CREATE SCHEMA IF NOT EXISTS cannot include schema elements"),
								 parser_errposition((yylsp[0]))));
					n->schemaElts = (yyvsp[0].list);
					n->onconflict = PG_IGNORE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 32915 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1487: /* CreateSchemaStmt: CREATE_P OR REPLACE SCHEMA qualified_name OptSchemaEltList  */
#line 51 "third_party/libpg_query/grammar/statements/create_schema.y"
                                {
					PGCreateSchemaStmt *n = makeNode(PGCreateSchemaStmt);
					if ((yyvsp[-1].range)->catalogname) {
						ereport(ERROR,
								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
								 errmsg("CREATE SCHEMA too many dots: expected \"catalog.schema\" or \"schema\""),
								 parser_errposition((yylsp[-1]))));
					}
					if ((yyvsp[-1].range)->schemaname) {
						n->catalogname = (yyvsp[-1].range)->schemaname;
						n->schemaname = (yyvsp[-1].range)->relname;
					} else {
						n->schemaname = (yyvsp[-1].range)->relname;
					}
					n->schemaElts = (yyvsp[0].list);
					n->onconflict = PG_REPLACE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 32938 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1488: /* OptSchemaEltList: OptSchemaEltList schema_stmt  */
#line 74 "third_party/libpg_query/grammar/statements/create_schema.y"
                                {
					if ((yyloc) < 0)			/* see comments for YYLLOC_DEFAULT */
						(yyloc) = (yylsp[0]);
					(yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node));
				}
#line 32948 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1489: /* OptSchemaEltList: %empty  */
#line 80 "third_party/libpg_query/grammar/statements/create_schema.y"
                                { (yyval.list) = NIL; }
#line 32954 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1494: /* IndexStmt: CREATE_P opt_unique INDEX opt_concurrently opt_index_name ON qualified_name access_method_clause '(' index_params ')' opt_reloptions where_clause  */
#line 11 "third_party/libpg_query/grammar/statements/index.y"
                                {
					PGIndexStmt *n = makeNode(PGIndexStmt);
					n->unique = (yyvsp[-11].boolean);
					n->concurrent = (yyvsp[-9].boolean);
					n->idxname = (yyvsp[-8].str);
					n->relation = (yyvsp[-6].range);
					n->accessMethod = (yyvsp[-5].str);
					n->indexParams = (yyvsp[-3].list);
					n->options = (yyvsp[-1].list);
					n->whereClause = (yyvsp[0].node);
					n->excludeOpNames = NIL;
					n->idxcomment = NULL;
					n->indexOid = InvalidOid;
					n->oldNode = InvalidOid;
					n->primary = false;
					n->isconstraint = false;
					n->deferrable = false;
					n->initdeferred = false;
					n->transformed = false;
					n->onconflict = PG_ERROR_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 32981 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1495: /* IndexStmt: CREATE_P opt_unique INDEX opt_concurrently IF_P NOT EXISTS index_name ON qualified_name access_method_clause '(' index_params ')' opt_reloptions where_clause  */
#line 36 "third_party/libpg_query/grammar/statements/index.y"
                                {
					PGIndexStmt *n = makeNode(PGIndexStmt);
					n->unique = (yyvsp[-14].boolean);
					n->concurrent = (yyvsp[-12].boolean);
					n->idxname = (yyvsp[-8].str);
					n->relation = (yyvsp[-6].range);
					n->accessMethod = (yyvsp[-5].str);
					n->indexParams = (yyvsp[-3].list);
					n->options = (yyvsp[-1].list);
					n->whereClause = (yyvsp[0].node);
					n->excludeOpNames = NIL;
					n->idxcomment = NULL;
					n->indexOid = InvalidOid;
					n->oldNode = InvalidOid;
					n->primary = false;
					n->isconstraint = false;
					n->deferrable = false;
					n->initdeferred = false;
					n->transformed = false;
					n->onconflict = PG_IGNORE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 33008 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1496: /* access_method: ColId  */
#line 62 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 33014 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1497: /* access_method_clause: USING access_method  */
#line 66 "third_party/libpg_query/grammar/statements/index.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 33020 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1498: /* access_method_clause: %empty  */
#line 67 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.str) = (char*) DEFAULT_INDEX_TYPE; }
#line 33026 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1499: /* opt_concurrently: CONCURRENTLY  */
#line 72 "third_party/libpg_query/grammar/statements/index.y"
                                                                                        { (yyval.boolean) = true; }
#line 33032 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1500: /* opt_concurrently: %empty  */
#line 73 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.boolean) = false; }
#line 33038 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1501: /* opt_index_name: index_name  */
#line 78 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 33044 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1502: /* opt_index_name: %empty  */
#line 79 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.str) = NULL; }
#line 33050 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1503: /* opt_reloptions: WITH reloptions  */
#line 83 "third_party/libpg_query/grammar/statements/index.y"
                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 33056 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1504: /* opt_reloptions: %empty  */
#line 84 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.list) = NIL; }
#line 33062 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1505: /* opt_unique: UNIQUE  */
#line 89 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.boolean) = true; }
#line 33068 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1506: /* opt_unique: %empty  */
#line 90 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.boolean) = false; }
#line 33074 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1507: /* AlterObjectSchemaStmt: ALTER TABLE relation_expr SET SCHEMA name  */
#line 8 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 33087 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1508: /* AlterObjectSchemaStmt: ALTER TABLE IF_P EXISTS relation_expr SET SCHEMA name  */
#line 17 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 33100 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1509: /* AlterObjectSchemaStmt: ALTER SEQUENCE qualified_name SET SCHEMA name  */
#line 26 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_SEQUENCE;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 33113 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1510: /* AlterObjectSchemaStmt: ALTER SEQUENCE IF_P EXISTS qualified_name SET SCHEMA name  */
#line 35 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_SEQUENCE;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 33126 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1511: /* AlterObjectSchemaStmt: ALTER VIEW qualified_name SET SCHEMA name  */
#line 44 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_VIEW;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 33139 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1512: /* AlterObjectSchemaStmt: ALTER VIEW IF_P EXISTS qualified_name SET SCHEMA name  */
#line 53 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_VIEW;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 33152 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1513: /* CheckPointStmt: FORCE CHECKPOINT opt_col_id  */
#line 6 "third_party/libpg_query/grammar/statements/checkpoint.y"
                                {
					PGCheckPointStmt *n = makeNode(PGCheckPointStmt);
					n->force = true;
					n->name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 33163 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1514: /* CheckPointStmt: CHECKPOINT opt_col_id  */
#line 13 "third_party/libpg_query/grammar/statements/checkpoint.y"
                                {
					PGCheckPointStmt *n = makeNode(PGCheckPointStmt);
					n->force = false;
					n->name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 33174 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1515: /* opt_col_id: ColId  */
#line 22 "third_party/libpg_query/grammar/statements/checkpoint.y"
                                                        { (yyval.str) = (yyvsp[0].str); }
#line 33180 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1516: /* opt_col_id: %empty  */
#line 23 "third_party/libpg_query/grammar/statements/checkpoint.y"
                                                { (yyval.str) = NULL; }
#line 33186 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1517: /* CommentOnStmt: COMMENT ON comment_on_type_any_name qualified_name IS comment_value  */
#line 8 "third_party/libpg_query/grammar/statements/comment_on.y"
                                {
					PGCommentOnStmt *n = makeNode(PGCommentOnStmt);
					n->object_type = (yyvsp[-3].objtype);
					n->name = (yyvsp[-2].range);
					n->value = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 33198 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1518: /* CommentOnStmt: COMMENT ON COLUMN a_expr IS comment_value  */
#line 16 "third_party/libpg_query/grammar/statements/comment_on.y"
                {
                    PGCommentOnStmt *n = makeNode(PGCommentOnStmt);
                    n->object_type = PG_OBJECT_COLUMN;
                    n->column_expr = (yyvsp[-2].node);
                    n->value = (yyvsp[0].node);
                    (yyval.node) = (PGNode *)n;
                }
#line 33210 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1519: /* comment_value: Sconst  */
#line 26 "third_party/libpg_query/grammar/statements/comment_on.y"
                                                                { (yyval.node) = makeStringConst((yyvsp[0].str), (yylsp[0])); }
#line 33216 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1520: /* comment_value: NULL_P  */
#line 27 "third_party/libpg_query/grammar/statements/comment_on.y"
                                                                            { (yyval.node) = makeNullAConst((yylsp[0])); }
#line 33222 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1521: /* comment_on_type_any_name: TABLE  */
#line 30 "third_party/libpg_query/grammar/statements/comment_on.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_TABLE; }
#line 33228 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1522: /* comment_on_type_any_name: SEQUENCE  */
#line 31 "third_party/libpg_query/grammar/statements/comment_on.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_SEQUENCE; }
#line 33234 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1523: /* comment_on_type_any_name: FUNCTION  */
#line 32 "third_party/libpg_query/grammar/statements/comment_on.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_FUNCTION; }
#line 33240 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1524: /* comment_on_type_any_name: MACRO  */
#line 33 "third_party/libpg_query/grammar/statements/comment_on.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_FUNCTION; }
#line 33246 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1525: /* comment_on_type_any_name: MACRO TABLE  */
#line 34 "third_party/libpg_query/grammar/statements/comment_on.y"
                                                                { (yyval.objtype) = PG_OBJECT_TABLE_MACRO; }
#line 33252 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1526: /* comment_on_type_any_name: VIEW  */
#line 35 "third_party/libpg_query/grammar/statements/comment_on.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_VIEW; }
#line 33258 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1527: /* comment_on_type_any_name: DATABASE  */
#line 36 "third_party/libpg_query/grammar/statements/comment_on.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_DATABASE; }
#line 33264 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1528: /* comment_on_type_any_name: INDEX  */
#line 37 "third_party/libpg_query/grammar/statements/comment_on.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_INDEX; }
#line 33270 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1529: /* comment_on_type_any_name: SCHEMA  */
#line 38 "third_party/libpg_query/grammar/statements/comment_on.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_SCHEMA; }
#line 33276 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1530: /* comment_on_type_any_name: TYPE_P  */
#line 39 "third_party/libpg_query/grammar/statements/comment_on.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_TYPE; }
#line 33282 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1531: /* ExportStmt: EXPORT_P DATABASE Sconst copy_options  */
#line 8 "third_party/libpg_query/grammar/statements/export.y"
                                {
					PGExportStmt *n = makeNode(PGExportStmt);
					n->database = NULL;
					n->filename = (yyvsp[-1].str);
					n->options = NIL;
					if ((yyvsp[0].list)) {
						n->options = list_concat(n->options, (yyvsp[0].list));
					}
					(yyval.node) = (PGNode *)n;
				}
#line 33297 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1532: /* ExportStmt: EXPORT_P DATABASE ColId TO Sconst copy_options  */
#line 20 "third_party/libpg_query/grammar/statements/export.y"
                                {
					PGExportStmt *n = makeNode(PGExportStmt);
					n->database = (yyvsp[-3].str);
					n->filename = (yyvsp[-1].str);
					n->options = NIL;
					if ((yyvsp[0].list)) {
						n->options = list_concat(n->options, (yyvsp[0].list));
					}
					(yyval.node) = (PGNode *)n;
				}
#line 33312 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1533: /* ImportStmt: IMPORT_P DATABASE Sconst  */
#line 34 "third_party/libpg_query/grammar/statements/export.y"
                                {
					PGImportStmt *n = makeNode(PGImportStmt);
					n->filename = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 33322 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1534: /* ExplainStmt: EXPLAIN ExplainableStmt  */
#line 10 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					PGExplainStmt *n = makeNode(PGExplainStmt);
					n->query = (yyvsp[0].node);
					n->options = NIL;
					(yyval.node) = (PGNode *) n;
				}
#line 33333 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1535: /* ExplainStmt: EXPLAIN analyze_keyword opt_verbose ExplainableStmt  */
#line 17 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					PGExplainStmt *n = makeNode(PGExplainStmt);
					n->query = (yyvsp[0].node);
					n->options = list_make1(makeDefElem("analyze", NULL, (yylsp[-2])));
					if ((yyvsp[-1].boolean))
						n->options = lappend(n->options,
											 makeDefElem("verbose", NULL, (yylsp[-1])));
					(yyval.node) = (PGNode *) n;
				}
#line 33347 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1536: /* ExplainStmt: EXPLAIN VERBOSE ExplainableStmt  */
#line 27 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					PGExplainStmt *n = makeNode(PGExplainStmt);
					n->query = (yyvsp[0].node);
					n->options = list_make1(makeDefElem("verbose", NULL, (yylsp[-1])));
					(yyval.node) = (PGNode *) n;
				}
#line 33358 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1537: /* ExplainStmt: EXPLAIN '(' explain_option_list ')' ExplainableStmt  */
#line 34 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					PGExplainStmt *n = makeNode(PGExplainStmt);
					n->query = (yyvsp[0].node);
					n->options = (yyvsp[-2].list);
					(yyval.node) = (PGNode *) n;
				}
#line 33369 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1538: /* opt_verbose: VERBOSE  */
#line 44 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.boolean) = true; }
#line 33375 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1539: /* opt_verbose: %empty  */
#line 45 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.boolean) = false; }
#line 33381 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1540: /* explain_option_arg: opt_boolean_or_string  */
#line 50 "third_party/libpg_query/grammar/statements/explain.y"
                                                { (yyval.node) = (PGNode *) makeString((yyvsp[0].str)); }
#line 33387 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1541: /* explain_option_arg: NumericOnly  */
#line 51 "third_party/libpg_query/grammar/statements/explain.y"
                                                        { (yyval.node) = (PGNode *) (yyvsp[0].value); }
#line 33393 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1542: /* explain_option_arg: %empty  */
#line 52 "third_party/libpg_query/grammar/statements/explain.y"
                                                        { (yyval.node) = NULL; }
#line 33399 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1573: /* NonReservedWord: IDENT  */
#line 90 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 33405 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1574: /* NonReservedWord: unreserved_keyword  */
#line 91 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 33411 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1575: /* NonReservedWord: other_keyword  */
#line 92 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 33417 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1576: /* NonReservedWord: pgq_unreserved_keyword  */
#line 93 "third_party/libpg_query/grammar/statements/explain.y"
                                                            { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 33423 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1577: /* NonReservedWord_or_Sconst: NonReservedWord  */
#line 98 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 33429 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1578: /* NonReservedWord_or_Sconst: Sconst  */
#line 99 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 33435 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1579: /* explain_option_list: explain_option_elem  */
#line 105 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].defelt));
				}
#line 33443 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1580: /* explain_option_list: explain_option_list ',' explain_option_elem  */
#line 109 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt));
				}
#line 33451 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1581: /* analyze_keyword: ANALYZE  */
#line 116 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                {}
#line 33457 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1582: /* analyze_keyword: ANALYSE  */
#line 117 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                {}
#line 33463 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1583: /* opt_boolean_or_string: TRUE_P  */
#line 122 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.str) = (char*) "true"; }
#line 33469 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1584: /* opt_boolean_or_string: FALSE_P  */
#line 123 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.str) = (char*) "false"; }
#line 33475 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1585: /* opt_boolean_or_string: ON  */
#line 124 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.str) = (char*) "on"; }
#line 33481 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1586: /* opt_boolean_or_string: NonReservedWord_or_Sconst  */
#line 130 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 33487 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1587: /* explain_option_elem: explain_option_name explain_option_arg  */
#line 136 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[-1].str), (yyvsp[0].node), (yylsp[-1]));
				}
#line 33495 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1588: /* explain_option_name: NonReservedWord  */
#line 143 "third_party/libpg_query/grammar/statements/explain.y"
                                                        { (yyval.str) = (yyvsp[0].str); }
#line 33501 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1589: /* explain_option_name: analyze_keyword  */
#line 144 "third_party/libpg_query/grammar/statements/explain.y"
                                                        { (yyval.str) = (char*) "analyze"; }
#line 33507 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1590: /* VariableSetStmt: SET set_rest  */
#line 11 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = (yyvsp[0].vsetstmt);
					n->scope = VAR_SET_SCOPE_DEFAULT;
					(yyval.node) = (PGNode *) n;
				}
#line 33517 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1591: /* VariableSetStmt: SET LOCAL set_rest  */
#line 17 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = (yyvsp[0].vsetstmt);
					n->scope = VAR_SET_SCOPE_LOCAL;
					(yyval.node) = (PGNode *) n;
				}
#line 33527 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1592: /* VariableSetStmt: SET SESSION set_rest  */
#line 23 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = (yyvsp[0].vsetstmt);
					n->scope = VAR_SET_SCOPE_SESSION;
					(yyval.node) = (PGNode *) n;
				}
#line 33537 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1593: /* VariableSetStmt: SET GLOBAL set_rest  */
#line 29 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = (yyvsp[0].vsetstmt);
					n->scope = VAR_SET_SCOPE_GLOBAL;
					(yyval.node) = (PGNode *) n;
				}
#line 33547 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1594: /* set_rest: generic_set  */
#line 38 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                {(yyval.vsetstmt) = (yyvsp[0].vsetstmt);}
#line 33553 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1595: /* set_rest: var_name FROM CURRENT_P  */
#line 40 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_CURRENT;
					n->name = (yyvsp[-2].str);
					(yyval.vsetstmt) = n;
				}
#line 33564 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1596: /* set_rest: TIME ZONE zone_value  */
#line 48 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_VALUE;
					n->name = (char*) "timezone";
					if ((yyvsp[0].node) != NULL)
						n->args = list_make1((yyvsp[0].node));
					else
						n->kind = VAR_SET_DEFAULT;
					(yyval.vsetstmt) = n;
				}
#line 33579 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1597: /* set_rest: SCHEMA Sconst  */
#line 59 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_VALUE;
					n->name = (char*) "search_path";
					n->args = list_make1(makeStringConst((yyvsp[0].str), (yylsp[0])));
					(yyval.vsetstmt) = n;
				}
#line 33591 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1598: /* generic_set: var_name TO var_list  */
#line 71 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_VALUE;
					n->name = (yyvsp[-2].str);
					n->args = (yyvsp[0].list);
					(yyval.vsetstmt) = n;
				}
#line 33603 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1599: /* generic_set: var_name '=' var_list  */
#line 79 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_VALUE;
					n->name = (yyvsp[-2].str);
					n->args = (yyvsp[0].list);
					(yyval.vsetstmt) = n;
				}
#line 33615 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1600: /* var_value: a_expr  */
#line 90 "third_party/libpg_query/grammar/statements/variable_set.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 33621 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1601: /* zone_value: Sconst  */
#line 96 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					(yyval.node) = makeStringConst((yyvsp[0].str), (yylsp[0]));
				}
#line 33629 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1602: /* zone_value: IDENT  */
#line 100 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					(yyval.node) = makeStringConst((yyvsp[0].str), (yylsp[0]));
				}
#line 33637 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1603: /* zone_value: ConstInterval Sconst opt_interval  */
#line 104 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGTypeName *t = (yyvsp[-2].typnam);
					if ((yyvsp[0].list) != NIL)
					{
						PGAConst *n = (PGAConst *) linitial((yyvsp[0].list));
						if ((n->val.val.ival & ~(INTERVAL_MASK(HOUR) | INTERVAL_MASK(MINUTE))) != 0)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("time zone interval must be HOUR or HOUR TO MINUTE"),
									 parser_errposition((yylsp[0]))));
					}
					t->typmods = (yyvsp[0].list);
					(yyval.node) = makeStringConstCast((yyvsp[-1].str), (yylsp[-1]), t);
				}
#line 33656 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1604: /* zone_value: ConstInterval '(' Iconst ')' Sconst  */
#line 119 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGTypeName *t = (yyvsp[-4].typnam);
					t->typmods = list_make2(makeIntConst(INTERVAL_FULL_RANGE, -1),
											makeIntConst((yyvsp[-2].ival), (yylsp[-2])));
					(yyval.node) = makeStringConstCast((yyvsp[0].str), (yylsp[0]), t);
				}
#line 33667 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1605: /* zone_value: NumericOnly  */
#line 125 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                        { (yyval.node) = makeAConst((yyvsp[0].value), (yylsp[0])); }
#line 33673 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1606: /* zone_value: DEFAULT  */
#line 126 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                                { (yyval.node) = NULL; }
#line 33679 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1607: /* zone_value: LOCAL  */
#line 127 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                                { (yyval.node) = NULL; }
#line 33685 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1608: /* var_list: var_value  */
#line 131 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 33691 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1609: /* var_list: var_list ',' var_value  */
#line 132 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 33697 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1610: /* LoadStmt: LOAD file_name  */
#line 8 "third_party/libpg_query/grammar/statements/load.y"
                                {
					PGLoadStmt *n = makeNode(PGLoadStmt);
					n->filename = (yyvsp[0].str);
					n->repository = "";
					n->load_type = PG_LOAD_TYPE_LOAD;
					(yyval.node) = (PGNode *)n;
				}
#line 33709 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1611: /* LoadStmt: INSTALL file_name  */
#line 15 "third_party/libpg_query/grammar/statements/load.y"
                                                  {
                    PGLoadStmt *n = makeNode(PGLoadStmt);
                    n->filename = (yyvsp[0].str);
                    n->repository = "";
                    n->load_type = PG_LOAD_TYPE_INSTALL;
                    (yyval.node) = (PGNode *)n;
				}
#line 33721 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1612: /* LoadStmt: FORCE INSTALL file_name  */
#line 22 "third_party/libpg_query/grammar/statements/load.y"
                                                        {
                      PGLoadStmt *n = makeNode(PGLoadStmt);
                      n->filename = (yyvsp[0].str);
                      n->repository = "";
                      n->load_type = PG_LOAD_TYPE_FORCE_INSTALL;
                      (yyval.node) = (PGNode *)n;
                }
#line 33733 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1613: /* LoadStmt: INSTALL file_name FROM repo_path  */
#line 29 "third_party/libpg_query/grammar/statements/load.y"
                                                {
                      PGLoadStmt *n = makeNode(PGLoadStmt);
                      n->filename = (yyvsp[-2].str);
                      n->repository = (yyvsp[0].str);
                      n->load_type = PG_LOAD_TYPE_INSTALL;
                      (yyval.node) = (PGNode *)n;
                }
#line 33745 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1614: /* LoadStmt: FORCE INSTALL file_name FROM repo_path  */
#line 36 "third_party/libpg_query/grammar/statements/load.y"
                                                       {
                        PGLoadStmt *n = makeNode(PGLoadStmt);
                        n->filename = (yyvsp[-2].str);
                        n->repository = (yyvsp[0].str);
                        n->load_type = PG_LOAD_TYPE_FORCE_INSTALL;
                        (yyval.node) = (PGNode *)n;
                  }
#line 33757 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1615: /* file_name: Sconst  */
#line 45 "third_party/libpg_query/grammar/statements/load.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 33763 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1616: /* file_name: ColId  */
#line 46 "third_party/libpg_query/grammar/statements/load.y"
                                                { (yyval.str) = (yyvsp[0].str); }
#line 33769 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1617: /* repo_path: Sconst  */
#line 48 "third_party/libpg_query/grammar/statements/load.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 33775 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1618: /* repo_path: ColId  */
#line 49 "third_party/libpg_query/grammar/statements/load.y"
                                                { (yyval.str) = (yyvsp[0].str); }
#line 33781 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1619: /* VacuumStmt: VACUUM opt_full opt_freeze opt_verbose  */
#line 9 "third_party/libpg_query/grammar/statements/vacuum.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_VACUUM;
					if ((yyvsp[-2].boolean))
						n->options |= PG_VACOPT_FULL;
					if ((yyvsp[-1].boolean))
						n->options |= PG_VACOPT_FREEZE;
					if ((yyvsp[0].boolean))
						n->options |= PG_VACOPT_VERBOSE;
					n->relation = NULL;
					n->va_cols = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 33799 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1620: /* VacuumStmt: VACUUM opt_full opt_freeze opt_verbose qualified_name opt_name_list  */
#line 23 "third_party/libpg_query/grammar/statements/vacuum.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_VACUUM;
					if ((yyvsp[-4].boolean))
						n->options |= PG_VACOPT_FULL;
					if ((yyvsp[-3].boolean))
						n->options |= PG_VACOPT_FREEZE;
					if ((yyvsp[-2].boolean))
						n->options |= PG_VACOPT_VERBOSE;
					n->relation = (yyvsp[-1].range);
					n->va_cols = (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 33817 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1621: /* VacuumStmt: VACUUM opt_full opt_freeze opt_verbose AnalyzeStmt  */
#line 37 "third_party/libpg_query/grammar/statements/vacuum.y"
                                {
					PGVacuumStmt *n = (PGVacuumStmt *) (yyvsp[0].node);
					n->options |= PG_VACOPT_VACUUM;
					if ((yyvsp[-3].boolean))
						n->options |= PG_VACOPT_FULL;
					if ((yyvsp[-2].boolean))
						n->options |= PG_VACOPT_FREEZE;
					if ((yyvsp[-1].boolean))
						n->options |= PG_VACOPT_VERBOSE;
					(yyval.node) = (PGNode *)n;
				}
#line 33833 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1622: /* VacuumStmt: VACUUM '(' vacuum_option_list ')'  */
#line 49 "third_party/libpg_query/grammar/statements/vacuum.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_VACUUM | (yyvsp[-1].ival);
					n->relation = NULL;
					n->va_cols = NIL;
					(yyval.node) = (PGNode *) n;
				}
#line 33845 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1623: /* VacuumStmt: VACUUM '(' vacuum_option_list ')' qualified_name opt_name_list  */
#line 57 "third_party/libpg_query/grammar/statements/vacuum.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_VACUUM | (yyvsp[-3].ival);
					n->relation = (yyvsp[-1].range);
					n->va_cols = (yyvsp[0].list);
					if (n->va_cols != NIL)	/* implies analyze */
						n->options |= PG_VACOPT_ANALYZE;
					(yyval.node) = (PGNode *) n;
				}
#line 33859 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1624: /* vacuum_option_elem: analyze_keyword  */
#line 70 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                { (yyval.ival) = PG_VACOPT_ANALYZE; }
#line 33865 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1625: /* vacuum_option_elem: VERBOSE  */
#line 71 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                        { (yyval.ival) = PG_VACOPT_VERBOSE; }
#line 33871 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1626: /* vacuum_option_elem: FREEZE  */
#line 72 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                        { (yyval.ival) = PG_VACOPT_FREEZE; }
#line 33877 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1627: /* vacuum_option_elem: FULL  */
#line 73 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                        { (yyval.ival) = PG_VACOPT_FULL; }
#line 33883 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1628: /* vacuum_option_elem: IDENT  */
#line 75 "third_party/libpg_query/grammar/statements/vacuum.y"
                                {
					if (strcmp((yyvsp[0].str), "disable_page_skipping") == 0)
						(yyval.ival) = PG_VACOPT_DISABLE_PAGE_SKIPPING;
					else
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
							 errmsg("unrecognized VACUUM option \"%s\"", (yyvsp[0].str)),
									 parser_errposition((yylsp[0]))));
				}
#line 33897 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1629: /* opt_full: FULL  */
#line 87 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                                                        { (yyval.boolean) = true; }
#line 33903 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1630: /* opt_full: %empty  */
#line 88 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                                                                { (yyval.boolean) = false; }
#line 33909 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1631: /* vacuum_option_list: vacuum_option_elem  */
#line 93 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                                                                        { (yyval.ival) = (yyvsp[0].ival); }
#line 33915 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1632: /* vacuum_option_list: vacuum_option_list ',' vacuum_option_elem  */
#line 94 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                                                { (yyval.ival) = (yyvsp[-2].ival) | (yyvsp[0].ival); }
#line 33921 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1633: /* opt_freeze: FREEZE  */
#line 98 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                                                        { (yyval.boolean) = true; }
#line 33927 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1634: /* opt_freeze: %empty  */
#line 99 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                                                                { (yyval.boolean) = false; }
#line 33933 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1635: /* DeleteStmt: opt_with_clause DELETE_P FROM relation_expr_opt_alias using_clause where_or_current_clause returning_clause  */
#line 9 "third_party/libpg_query/grammar/statements/delete.y"
                                {
					PGDeleteStmt *n = makeNode(PGDeleteStmt);
					n->relation = (yyvsp[-3].range);
					n->usingClause = (yyvsp[-2].list);
					n->whereClause = (yyvsp[-1].node);
					n->returningList = (yyvsp[0].list);
					n->withClause = (yyvsp[-6].with);
					(yyval.node) = (PGNode *)n;
				}
#line 33947 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1636: /* DeleteStmt: TRUNCATE opt_table relation_expr_opt_alias  */
#line 19 "third_party/libpg_query/grammar/statements/delete.y"
                            {
					PGDeleteStmt *n = makeNode(PGDeleteStmt);
					n->relation = (yyvsp[0].range);
					n->usingClause = NULL;
					n->whereClause = NULL;
					n->returningList = NULL;
					n->withClause = NULL;
					(yyval.node) = (PGNode *)n;
			    }
#line 33961 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1637: /* relation_expr_opt_alias: relation_expr  */
#line 32 "third_party/libpg_query/grammar/statements/delete.y"
                                {
					(yyval.range) = (yyvsp[0].range);
				}
#line 33969 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1638: /* relation_expr_opt_alias: relation_expr ColId  */
#line 36 "third_party/libpg_query/grammar/statements/delete.y"
                                {
					PGAlias *alias = makeNode(PGAlias);
					alias->aliasname = (yyvsp[0].str);
					(yyvsp[-1].range)->alias = alias;
					(yyval.range) = (yyvsp[-1].range);
				}
#line 33980 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1639: /* relation_expr_opt_alias: relation_expr AS ColId  */
#line 43 "third_party/libpg_query/grammar/statements/delete.y"
                                {
					PGAlias *alias = makeNode(PGAlias);
					alias->aliasname = (yyvsp[0].str);
					(yyvsp[-2].range)->alias = alias;
					(yyval.range) = (yyvsp[-2].range);
				}
#line 33991 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1640: /* where_or_current_clause: WHERE a_expr  */
#line 53 "third_party/libpg_query/grammar/statements/delete.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 33997 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1641: /* where_or_current_clause: %empty  */
#line 54 "third_party/libpg_query/grammar/statements/delete.y"
                                                                                                { (yyval.node) = NULL; }
#line 34003 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1642: /* using_clause: USING from_list_opt_comma  */
#line 60 "third_party/libpg_query/grammar/statements/delete.y"
                                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 34009 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1643: /* using_clause: %empty  */
#line 61 "third_party/libpg_query/grammar/statements/delete.y"
                                                                                                { (yyval.list) = NIL; }
#line 34015 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1644: /* AnalyzeStmt: analyze_keyword opt_verbose  */
#line 10 "third_party/libpg_query/grammar/statements/analyze.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_ANALYZE;
					if ((yyvsp[0].boolean))
						n->options |= PG_VACOPT_VERBOSE;
					n->relation = NULL;
					n->va_cols = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 34029 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1645: /* AnalyzeStmt: analyze_keyword opt_verbose qualified_name opt_name_list  */
#line 20 "third_party/libpg_query/grammar/statements/analyze.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_ANALYZE;
					if ((yyvsp[-2].boolean))
						n->options |= PG_VACOPT_VERBOSE;
					n->relation = (yyvsp[-1].range);
					n->va_cols = (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 34043 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1646: /* AttachStmt: ATTACH opt_database Sconst opt_database_alias copy_options  */
#line 8 "third_party/libpg_query/grammar/statements/attach.y"
                                {
					PGAttachStmt *n = makeNode(PGAttachStmt);
					n->path = (yyvsp[-2].str);
					n->name = (yyvsp[-1].str);
					n->options = (yyvsp[0].list);
					n->onconflict = PG_ERROR_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 34056 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1647: /* AttachStmt: ATTACH IF_P NOT EXISTS opt_database Sconst opt_database_alias copy_options  */
#line 17 "third_party/libpg_query/grammar/statements/attach.y"
                                {
					PGAttachStmt *n = makeNode(PGAttachStmt);
					n->path = (yyvsp[-2].str);
					n->name = (yyvsp[-1].str);
					n->options = (yyvsp[0].list);
					n->onconflict = PG_IGNORE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 34069 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1648: /* DetachStmt: DETACH ColLabel  */
#line 29 "third_party/libpg_query/grammar/statements/attach.y"
                                {
					PGDetachStmt *n = makeNode(PGDetachStmt);
					n->missing_ok = false;
					n->db_name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 34080 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1649: /* DetachStmt: DETACH DATABASE ColLabel  */
#line 36 "third_party/libpg_query/grammar/statements/attach.y"
                                {
					PGDetachStmt *n = makeNode(PGDetachStmt);
					n->missing_ok = false;
					n->db_name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 34091 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1650: /* DetachStmt: DETACH DATABASE IF_P EXISTS ColLabel  */
#line 43 "third_party/libpg_query/grammar/statements/attach.y"
                                {
					PGDetachStmt *n = makeNode(PGDetachStmt);
					n->missing_ok = true;
					n->db_name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 34102 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1651: /* opt_database: DATABASE  */
#line 51 "third_party/libpg_query/grammar/statements/attach.y"
                                                                                {}
#line 34108 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1652: /* opt_database: %empty  */
#line 52 "third_party/libpg_query/grammar/statements/attach.y"
                                                                                                {}
#line 34114 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1653: /* opt_database_alias: AS ColId  */
#line 56 "third_party/libpg_query/grammar/statements/attach.y"
                                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 34120 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1654: /* opt_database_alias: %empty  */
#line 57 "third_party/libpg_query/grammar/statements/attach.y"
                                                                                                        { (yyval.str) = NULL; }
#line 34126 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1655: /* VariableResetStmt: RESET reset_rest  */
#line 3 "third_party/libpg_query/grammar/statements/variable_reset.y"
                        {
				(yyvsp[0].vsetstmt)->scope = VAR_SET_SCOPE_DEFAULT;
				(yyval.node) = (PGNode *) (yyvsp[0].vsetstmt);
			}
#line 34135 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1656: /* VariableResetStmt: RESET LOCAL reset_rest  */
#line 8 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                {
					(yyvsp[0].vsetstmt)->scope = VAR_SET_SCOPE_LOCAL;
					(yyval.node) = (PGNode *) (yyvsp[0].vsetstmt);
				}
#line 34144 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1657: /* VariableResetStmt: RESET SESSION reset_rest  */
#line 13 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                {
					(yyvsp[0].vsetstmt)->scope = VAR_SET_SCOPE_SESSION;
					(yyval.node) = (PGNode *) (yyvsp[0].vsetstmt);
				}
#line 34153 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1658: /* VariableResetStmt: RESET GLOBAL reset_rest  */
#line 18 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                {
					(yyvsp[0].vsetstmt)->scope = VAR_SET_SCOPE_GLOBAL;
					(yyval.node) = (PGNode *) (yyvsp[0].vsetstmt);
				}
#line 34162 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1659: /* generic_reset: var_name  */
#line 27 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_RESET;
					n->name = (yyvsp[0].str);
					(yyval.vsetstmt) = n;
				}
#line 34173 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1660: /* generic_reset: ALL  */
#line 34 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_RESET_ALL;
					(yyval.vsetstmt) = n;
				}
#line 34183 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1661: /* reset_rest: generic_reset  */
#line 43 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                                                                        { (yyval.vsetstmt) = (yyvsp[0].vsetstmt); }
#line 34189 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1662: /* reset_rest: TIME ZONE  */
#line 45 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_RESET;
					n->name = (char*) "timezone";
					(yyval.vsetstmt) = n;
				}
#line 34200 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1663: /* reset_rest: TRANSACTION ISOLATION LEVEL  */
#line 52 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_RESET;
					n->name = (char*) "transaction_isolation";
					(yyval.vsetstmt) = n;
				}
#line 34211 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1664: /* VariableShowStmt: show_or_describe SelectStmt  */
#line 3 "third_party/libpg_query/grammar/statements/variable_show.y"
                                                    {
				PGVariableShowSelectStmt *n = makeNode(PGVariableShowSelectStmt);
				n->stmt = (yyvsp[0].node);
				n->name = (char*) "select";
				n->is_summary = 0;
				(yyval.node) = (PGNode *) n;
			}
#line 34223 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1665: /* VariableShowStmt: SUMMARIZE SelectStmt  */
#line 10 "third_party/libpg_query/grammar/statements/variable_show.y"
                                        {
				PGVariableShowSelectStmt *n = makeNode(PGVariableShowSelectStmt);
				n->stmt = (yyvsp[0].node);
				n->name = (char*) "select";
				n->is_summary = 1;
				(yyval.node) = (PGNode *) n;
			}
#line 34235 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1666: /* VariableShowStmt: SUMMARIZE table_id  */
#line 18 "third_party/libpg_query/grammar/statements/variable_show.y"
                        {
				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
				n->name = (yyvsp[0].str);
				n->is_summary = 1;
				(yyval.node) = (PGNode *) n;
			}
#line 34246 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1667: /* VariableShowStmt: show_or_describe table_id  */
#line 25 "third_party/libpg_query/grammar/statements/variable_show.y"
                        {
				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
				n->name = (yyvsp[0].str);
				n->is_summary = 0;
				(yyval.node) = (PGNode *) n;
			}
#line 34257 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1668: /* VariableShowStmt: show_or_describe TIME ZONE  */
#line 32 "third_party/libpg_query/grammar/statements/variable_show.y"
                        {
				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
				n->name = (char*) "timezone";
				n->is_summary = 0;
				(yyval.node) = (PGNode *) n;
			}
#line 34268 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1669: /* VariableShowStmt: show_or_describe TRANSACTION ISOLATION LEVEL  */
#line 39 "third_party/libpg_query/grammar/statements/variable_show.y"
                        {
				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
				n->name = (char*) "transaction_isolation";
				n->is_summary = 0;
				(yyval.node) = (PGNode *) n;
			}
#line 34279 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1670: /* VariableShowStmt: show_or_describe ALL opt_tables  */
#line 46 "third_party/libpg_query/grammar/statements/variable_show.y"
                        {
				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
				n->name = (char*) "__show_tables_expanded";
				n->is_summary = 0;
				(yyval.node) = (PGNode *) n;
			}
#line 34290 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1671: /* VariableShowStmt: show_or_describe  */
#line 53 "third_party/libpg_query/grammar/statements/variable_show.y"
                        {
				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
				n->name = (char*) "__show_tables_expanded";
				n->is_summary = 0;
				(yyval.node) = (PGNode *) n;
			}
#line 34301 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1672: /* VariableShowStmt: show_or_describe PROPERTY GRAPH ColId  */
#line 60 "third_party/libpg_query/grammar/statements/variable_show.y"
            {
				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
				n->name = (yyvsp[0].str);
				n->is_summary = 0;
				(yyval.node) = (PGNode *) n;
            }
#line 34312 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1679: /* var_name: ColId  */
#line 74 "third_party/libpg_query/grammar/statements/variable_show.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 34318 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1680: /* var_name: var_name '.' ColId  */
#line 76 "third_party/libpg_query/grammar/statements/variable_show.y"
                                { (yyval.str) = psprintf("%s.%s", (yyvsp[-2].str), (yyvsp[0].str)); }
#line 34324 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1681: /* table_id: ColId  */
#line 79 "third_party/libpg_query/grammar/statements/variable_show.y"
                                                                                { (yyval.str) = psprintf("\"%s\"", (yyvsp[0].str)); }
#line 34330 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1682: /* table_id: table_id '.' ColId  */
#line 81 "third_party/libpg_query/grammar/statements/variable_show.y"
                                { (yyval.str) = psprintf("%s.\"%s\"", (yyvsp[-2].str), (yyvsp[0].str)); }
#line 34336 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1683: /* CallStmt: CALL_P func_application  */
#line 7 "third_party/libpg_query/grammar/statements/call.y"
                                {
					PGCallStmt *n = makeNode(PGCallStmt);
					n->func = (yyvsp[0].node);
					(yyval.node) = (PGNode *) n;
				}
#line 34346 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1684: /* ViewStmt: CREATE_P OptTemp VIEW qualified_name opt_column_list opt_reloptions AS SelectStmt opt_check_option  */
#line 10 "third_party/libpg_query/grammar/statements/view.y"
                                {
					PGViewStmt *n = makeNode(PGViewStmt);
					n->view = (yyvsp[-5].range);
					n->view->relpersistence = (yyvsp[-7].ival);
					n->aliases = (yyvsp[-4].list);
					n->query = (yyvsp[-1].node);
					n->onconflict = PG_ERROR_ON_CONFLICT;
					n->options = (yyvsp[-3].list);
					n->withCheckOption = (yyvsp[0].viewcheckoption);
					(yyval.node) = (PGNode *) n;
				}
#line 34362 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1685: /* ViewStmt: CREATE_P OptTemp VIEW IF_P NOT EXISTS qualified_name opt_column_list opt_reloptions AS SelectStmt opt_check_option  */
#line 23 "third_party/libpg_query/grammar/statements/view.y"
                                {
					PGViewStmt *n = makeNode(PGViewStmt);
					n->view = (yyvsp[-5].range);
					n->view->relpersistence = (yyvsp[-10].ival);
					n->aliases = (yyvsp[-4].list);
					n->query = (yyvsp[-1].node);
					n->onconflict = PG_IGNORE_ON_CONFLICT;
					n->options = (yyvsp[-3].list);
					n->withCheckOption = (yyvsp[0].viewcheckoption);
					(yyval.node) = (PGNode *) n;
				}
#line 34378 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1686: /* ViewStmt: CREATE_P OR REPLACE OptTemp VIEW qualified_name opt_column_list opt_reloptions AS SelectStmt opt_check_option  */
#line 36 "third_party/libpg_query/grammar/statements/view.y"
                                {
					PGViewStmt *n = makeNode(PGViewStmt);
					n->view = (yyvsp[-5].range);
					n->view->relpersistence = (yyvsp[-7].ival);
					n->aliases = (yyvsp[-4].list);
					n->query = (yyvsp[-1].node);
					n->onconflict = PG_REPLACE_ON_CONFLICT;
					n->options = (yyvsp[-3].list);
					n->withCheckOption = (yyvsp[0].viewcheckoption);
					(yyval.node) = (PGNode *) n;
				}
#line 34394 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1687: /* ViewStmt: CREATE_P OptTemp RECURSIVE VIEW qualified_name '(' columnList ')' opt_reloptions AS SelectStmt opt_check_option  */
#line 49 "third_party/libpg_query/grammar/statements/view.y"
                                {
					PGViewStmt *n = makeNode(PGViewStmt);
					n->view = (yyvsp[-7].range);
					n->view->relpersistence = (yyvsp[-10].ival);
					n->aliases = (yyvsp[-5].list);
					n->query = makeRecursiveViewSelect(n->view->relname, n->aliases, (yyvsp[-1].node));
					n->onconflict = PG_ERROR_ON_CONFLICT;
					n->options = (yyvsp[-3].list);
					n->withCheckOption = (yyvsp[0].viewcheckoption);
					if (n->withCheckOption != PG_NO_CHECK_OPTION)
						ereport(ERROR,
								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
								 errmsg("WITH CHECK OPTION not supported on recursive views"),
								 parser_errposition((yylsp[0]))));
					(yyval.node) = (PGNode *) n;
				}
#line 34415 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1688: /* ViewStmt: CREATE_P OR REPLACE OptTemp RECURSIVE VIEW qualified_name '(' columnList ')' opt_reloptions AS SelectStmt opt_check_option  */
#line 67 "third_party/libpg_query/grammar/statements/view.y"
                                {
					PGViewStmt *n = makeNode(PGViewStmt);
					n->view = (yyvsp[-7].range);
					n->view->relpersistence = (yyvsp[-10].ival);
					n->aliases = (yyvsp[-5].list);
					n->query = makeRecursiveViewSelect(n->view->relname, n->aliases, (yyvsp[-1].node));
					n->onconflict = PG_REPLACE_ON_CONFLICT;
					n->options = (yyvsp[-3].list);
					n->withCheckOption = (yyvsp[0].viewcheckoption);
					if (n->withCheckOption != PG_NO_CHECK_OPTION)
						ereport(ERROR,
								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
								 errmsg("WITH CHECK OPTION not supported on recursive views"),
								 parser_errposition((yylsp[0]))));
					(yyval.node) = (PGNode *) n;
				}
#line 34436 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1689: /* opt_check_option: WITH CHECK_P OPTION  */
#line 87 "third_party/libpg_query/grammar/statements/view.y"
                                                                { (yyval.viewcheckoption) = CASCADED_CHECK_OPTION; }
#line 34442 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1690: /* opt_check_option: WITH CASCADED CHECK_P OPTION  */
#line 88 "third_party/libpg_query/grammar/statements/view.y"
                                                { (yyval.viewcheckoption) = CASCADED_CHECK_OPTION; }
#line 34448 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1691: /* opt_check_option: WITH LOCAL CHECK_P OPTION  */
#line 89 "third_party/libpg_query/grammar/statements/view.y"
                                                        { (yyval.viewcheckoption) = PG_LOCAL_CHECK_OPTION; }
#line 34454 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1692: /* opt_check_option: %empty  */
#line 90 "third_party/libpg_query/grammar/statements/view.y"
                                                                { (yyval.viewcheckoption) = PG_NO_CHECK_OPTION; }
#line 34460 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1693: /* CreateAsStmt: CREATE_P OptTemp TABLE create_as_target AS SelectStmt opt_with_data  */
#line 12 "third_party/libpg_query/grammar/statements/create_as.y"
                                {
					PGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);
					ctas->query = (yyvsp[-1].node);
					ctas->into = (yyvsp[-3].into);
					ctas->relkind = PG_OBJECT_TABLE;
					ctas->is_select_into = false;
					ctas->onconflict = PG_ERROR_ON_CONFLICT;
					/* cram additional flags into the PGIntoClause */
					(yyvsp[-3].into)->rel->relpersistence = (yyvsp[-5].ival);
					(yyvsp[-3].into)->skipData = !((yyvsp[0].boolean));
					(yyval.node) = (PGNode *) ctas;
				}
#line 34477 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1694: /* CreateAsStmt: CREATE_P OptTemp TABLE IF_P NOT EXISTS create_as_target AS SelectStmt opt_with_data  */
#line 25 "third_party/libpg_query/grammar/statements/create_as.y"
                                {
					PGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);
					ctas->query = (yyvsp[-1].node);
					ctas->into = (yyvsp[-3].into);
					ctas->relkind = PG_OBJECT_TABLE;
					ctas->is_select_into = false;
					ctas->onconflict = PG_IGNORE_ON_CONFLICT;
					/* cram additional flags into the PGIntoClause */
					(yyvsp[-3].into)->rel->relpersistence = (yyvsp[-8].ival);
					(yyvsp[-3].into)->skipData = !((yyvsp[0].boolean));
					(yyval.node) = (PGNode *) ctas;
				}
#line 34494 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1695: /* CreateAsStmt: CREATE_P OR REPLACE OptTemp TABLE create_as_target AS SelectStmt opt_with_data  */
#line 38 "third_party/libpg_query/grammar/statements/create_as.y"
                                {
					PGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);
					ctas->query = (yyvsp[-1].node);
					ctas->into = (yyvsp[-3].into);
					ctas->relkind = PG_OBJECT_TABLE;
					ctas->is_select_into = false;
					ctas->onconflict = PG_REPLACE_ON_CONFLICT;
					/* cram additional flags into the PGIntoClause */
					(yyvsp[-3].into)->rel->relpersistence = (yyvsp[-5].ival);
					(yyvsp[-3].into)->skipData = !((yyvsp[0].boolean));
					(yyval.node) = (PGNode *) ctas;
				}
#line 34511 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1696: /* opt_with_data: WITH DATA_P  */
#line 54 "third_party/libpg_query/grammar/statements/create_as.y"
                                                                                                { (yyval.boolean) = true; }
#line 34517 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1697: /* opt_with_data: WITH NO DATA_P  */
#line 55 "third_party/libpg_query/grammar/statements/create_as.y"
                                                                                        { (yyval.boolean) = false; }
#line 34523 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1698: /* opt_with_data: %empty  */
#line 56 "third_party/libpg_query/grammar/statements/create_as.y"
                                                                                                { (yyval.boolean) = true; }
#line 34529 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1699: /* create_as_target: qualified_name opt_column_list OptWith OnCommitOption  */
#line 62 "third_party/libpg_query/grammar/statements/create_as.y"
                                {
					(yyval.into) = makeNode(PGIntoClause);
					(yyval.into)->rel = (yyvsp[-3].range);
					(yyval.into)->colNames = (yyvsp[-2].list);
					(yyval.into)->options = (yyvsp[-1].list);
					(yyval.into)->onCommit = (yyvsp[0].oncommit);
					(yyval.into)->viewQuery = NULL;
					(yyval.into)->skipData = false;		/* might get changed later */
				}
#line 34543 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;


#line 34547 "third_party/libpg_query/grammar/grammar_out.cpp"

      default: break;
    }
  /* User semantic actions sometimes alter yychar, and that requires
     that yytoken be updated with the new translation.  We take the
     approach of translating immediately before every use of yytoken.
     One alternative is translating here after every semantic action,
     but that translation would be missed if the semantic action invokes
     YYABORT, YYACCEPT, or YYERROR immediately after altering yychar or
     if it invokes YYBACKUP.  In the case of YYABORT or YYACCEPT, an
     incorrect destructor might then be invoked immediately.  In the
     case of YYERROR or YYBACKUP, subsequent parser actions might lead
     to an incorrect destructor call or verbose syntax error message
     before the lookahead is translated.  */
  YY_SYMBOL_PRINT ("-> $$ =", YY_CAST (yysymbol_kind_t, yyr1[yyn]), &yyval, &yyloc);

  YYPOPSTACK (yylen);
  yylen = 0;

  *++yyvsp = yyval;
  *++yylsp = yyloc;

  /* Now 'shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */
  {
    const int yylhs = yyr1[yyn] - YYNTOKENS;
    const int yyi = yypgoto[yylhs] + *yyssp;
    yystate = (0 <= yyi && yyi <= YYLAST && yycheck[yyi] == *yyssp
               ? yytable[yyi]
               : yydefgoto[yylhs]);
  }

  goto yynewstate;


/*--------------------------------------.
| yyerrlab -- here on detecting error.  |
`--------------------------------------*/
yyerrlab:
  /* Make sure we have latest lookahead translation.  See comments at
     user semantic actions for why this is necessary.  */
  yytoken = yychar == YYEMPTY ? YYSYMBOL_YYEMPTY : YYTRANSLATE (yychar);
  /* If not already recovering from an error, report this error.  */
  if (!yyerrstatus)
    {
      ++yynerrs;
      yyerror (&yylloc, yyscanner, YY_("syntax error"));
    }

  yyerror_range[1] = yylloc;
  if (yyerrstatus == 3)
    {
      /* If just tried and failed to reuse lookahead token after an
         error, discard it.  */

      if (yychar <= YYEOF)
        {
          /* Return failure if at end of input.  */
          if (yychar == YYEOF)
            YYABORT;
        }
      else
        {
          yydestruct ("Error: discarding",
                      yytoken, &yylval, &yylloc, yyscanner);
          yychar = YYEMPTY;
        }
    }

  /* Else will try to reuse lookahead token after shifting the error
     token.  */
  goto yyerrlab1;


/*---------------------------------------------------.
| yyerrorlab -- error raised explicitly by YYERROR.  |
`---------------------------------------------------*/
yyerrorlab:
  /* Pacify compilers when the user code never invokes YYERROR and the
     label yyerrorlab therefore never appears in user code.  */
  if (0)
    YYERROR;
  ++yynerrs;

  /* Do not reclaim the symbols of the rule whose action triggered
     this YYERROR.  */
  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);
  yystate = *yyssp;
  goto yyerrlab1;


/*-------------------------------------------------------------.
| yyerrlab1 -- common code for both syntax error and YYERROR.  |
`-------------------------------------------------------------*/
yyerrlab1:
  yyerrstatus = 3;      /* Each real token shifted decrements this.  */

  /* Pop stack until we find a state that shifts the error token.  */
  for (;;)
    {
      yyn = yypact[yystate];
      if (!yypact_value_is_default (yyn))
        {
          yyn += YYSYMBOL_YYerror;
          if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYSYMBOL_YYerror)
            {
              yyn = yytable[yyn];
              if (0 < yyn)
                break;
            }
        }

      /* Pop the current state because it cannot handle the error token.  */
      if (yyssp == yyss)
        YYABORT;

      yyerror_range[1] = *yylsp;
      yydestruct ("Error: popping",
                  YY_ACCESSING_SYMBOL (yystate), yyvsp, yylsp, yyscanner);
      YYPOPSTACK (1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
    }

  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  *++yyvsp = yylval;
  YY_IGNORE_MAYBE_UNINITIALIZED_END

  yyerror_range[2] = yylloc;
  ++yylsp;
  YYLLOC_DEFAULT (*yylsp, yyerror_range, 2);

  /* Shift the error token.  */
  YY_SYMBOL_PRINT ("Shifting", YY_ACCESSING_SYMBOL (yyn), yyvsp, yylsp);

  yystate = yyn;
  goto yynewstate;


/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/
yyacceptlab:
  yyresult = 0;
  goto yyreturnlab;


/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/
yyabortlab:
  yyresult = 1;
  goto yyreturnlab;


/*-----------------------------------------------------------.
| yyexhaustedlab -- YYNOMEM (memory exhaustion) comes here.  |
`-----------------------------------------------------------*/
yyexhaustedlab:
  yyerror (&yylloc, yyscanner, YY_("memory exhausted"));
  yyresult = 2;
  goto yyreturnlab;


/*----------------------------------------------------------.
| yyreturnlab -- parsing is finished, clean up and return.  |
`----------------------------------------------------------*/
yyreturnlab:
  if (yychar != YYEMPTY)
    {
      /* Make sure we have latest lookahead translation.  See comments at
         user semantic actions for why this is necessary.  */
      yytoken = YYTRANSLATE (yychar);
      yydestruct ("Cleanup: discarding lookahead",
                  yytoken, &yylval, &yylloc, yyscanner);
    }
  /* Do not reclaim the symbols of the rule whose action triggered
     this YYABORT or YYACCEPT.  */
  YYPOPSTACK (yylen);
  YY_STACK_PRINT (yyss, yyssp);
  while (yyssp != yyss)
    {
      yydestruct ("Cleanup: popping",
                  YY_ACCESSING_SYMBOL (+*yyssp), yyvsp, yylsp, yyscanner);
      YYPOPSTACK (1);
    }
#ifndef yyoverflow
  if (yyss != yyssa)
    YYSTACK_FREE (yyss);
#endif

  return yyresult;
}

#line 85 "third_party/libpg_query/grammar/statements/create_as.y"


#line 1 "third_party/libpg_query/grammar/grammar.cpp"
/*
 * The signature of this function is required by bison.  However, we
 * ignore the passed yylloc and instead use the last token position
 * available from the scanner.
 */
static void
base_yyerror(YYLTYPE *yylloc, core_yyscan_t yyscanner, const char *msg)
{
	parser_yyerror(msg);
}

static PGRawStmt *
makeRawStmt(PGNode *stmt, int stmt_location)
{
	PGRawStmt    *rs = makeNode(PGRawStmt);

	rs->stmt = stmt;
	rs->stmt_location = stmt_location;
	rs->stmt_len = 0;			/* might get changed later */
	return rs;
}

/* Adjust a PGRawStmt to reflect that it doesn't run to the end of the string */
static void
updateRawStmtEnd(PGRawStmt *rs, int end_location)
{
	/*
	 * If we already set the length, don't change it.  This is for situations
	 * like "select foo ;; select bar" where the same statement will be last
	 * in the string for more than one semicolon.
	 */
	if (rs->stmt_len > 0)
		return;

	/* OK, update length of PGRawStmt */
	rs->stmt_len = end_location - rs->stmt_location;
}

static PGNode *
makeColumnRef(char *colname, PGList *indirection,
			  int location, core_yyscan_t yyscanner)
{
	/*
	 * Generate a PGColumnRef node, with an PGAIndirection node added if there
	 * is any subscripting in the specified indirection list.  However,
	 * any field selection at the start of the indirection list must be
	 * transposed into the "fields" part of the PGColumnRef node.
	 */
	PGColumnRef  *c = makeNode(PGColumnRef);
	int		nfields = 0;
	PGListCell *l;

	c->location = location;
	foreach(l, indirection)
	{
		if (IsA(lfirst(l), PGAIndices))
		{
			PGAIndirection *i = makeNode(PGAIndirection);

			if (nfields == 0)
			{
				/* easy case - all indirection goes to PGAIndirection */
				c->fields = list_make1(makeString(colname));
				i->indirection = check_indirection(indirection, yyscanner);
			}
			else
			{
				/* got to split the list in two */
				i->indirection = check_indirection(list_copy_tail(indirection,
																  nfields),
												   yyscanner);
				indirection = list_truncate(indirection, nfields);
				c->fields = lcons(makeString(colname), indirection);
			}
			i->arg = (PGNode *) c;
			return (PGNode *) i;
		}
		else if (IsA(lfirst(l), PGAStar))
		{
			/* We only allow '*' at the end of a PGColumnRef */
			if (lnext(l) != NULL)
				parser_yyerror("improper use of \"*\"");
		}
		nfields++;
	}
	/* No subscripting, so all indirection gets added to field list */
	c->fields = lcons(makeString(colname), indirection);
	return (PGNode *) c;
}

static PGNode *
makeTypeCast(PGNode *arg, PGTypeName *tpname, int trycast, int location)
{
	PGTypeCast *n = makeNode(PGTypeCast);
	n->arg = arg;
	n->typeName = tpname;
	n->tryCast = trycast;
	n->location = location;
	return (PGNode *) n;
}

static PGNode *
makeStringConst(char *str, int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGString;
	n->val.val.str = str;
	n->location = location;

	return (PGNode *)n;
}

static PGNode *
makeStringConstCast(char *str, int location, PGTypeName *tpname)
{
	PGNode *s = makeStringConst(str, location);

	return makeTypeCast(s, tpname, 0, -1);
}

static PGNode *
makeIntervalNode(char *str, int location, PGList *typmods) {
	PGIntervalConstant *n = makeNode(PGIntervalConstant);

	n->val_type = T_PGString;
	n->sval = str;
	n->location = location;
	n->typmods = typmods;

	return (PGNode *)n;

}

static PGNode *
makeIntervalNode(int val, int location, PGList *typmods) {
	PGIntervalConstant *n = makeNode(PGIntervalConstant);

	n->val_type = T_PGInteger;
	n->ival = val;
	n->location = location;
	n->typmods = typmods;

	return (PGNode *)n;
}

static PGNode *
makeIntervalNode(PGNode *arg, int location, PGList *typmods) {
	PGIntervalConstant *n = makeNode(PGIntervalConstant);

	n->val_type = T_PGAExpr;
	n->eval = arg;
	n->location = location;
	n->typmods = typmods;

	return (PGNode *)n;
}

static PGNode *
makeSampleSize(PGValue *sample_size, bool is_percentage) {
	PGSampleSize *n = makeNode(PGSampleSize);

	n->sample_size = *sample_size;
	n->is_percentage = is_percentage;

	return (PGNode *)n;
}

static PGNode *
makeSampleOptions(PGNode *sample_size, char *method, int *seed, int location) {
	PGSampleOptions *n = makeNode(PGSampleOptions);

	n->sample_size = sample_size;
	n->method = method;
	if (seed) {
		n->has_seed = true;
		n->seed = *seed;
	}
	n->location = location;

	return (PGNode *)n;
}

/* makeLimitPercent()
 * Make limit percent node
 */
static PGNode *
makeLimitPercent(PGNode *limit_percent) {
	PGLimitPercent *n = makeNode(PGLimitPercent);

	n->limit_percent = limit_percent;

	return (PGNode *)n;
}

static PGNode *
makeIntConst(int val, int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGInteger;
	n->val.val.ival = val;
	n->location = location;

	return (PGNode *)n;
}

static PGNode *
makeFloatConst(char *str, int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGFloat;
	n->val.val.str = str;
	n->location = location;

	return (PGNode *)n;
}

static PGNode *
makeBitStringConst(char *str, int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGBitString;
	n->val.val.str = str;
	n->location = location;

	return (PGNode *)n;
}

static PGNode *
makeNullAConst(int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGNull;
	n->location = location;

	return (PGNode *)n;
}

static PGNode *
makeAConst(PGValue *v, int location)
{
	PGNode *n;

	switch (v->type)
	{
		case T_PGFloat:
			n = makeFloatConst(v->val.str, location);
			break;

		case T_PGInteger:
			n = makeIntConst(v->val.ival, location);
			break;

		case T_PGString:
		default:
			n = makeStringConst(v->val.str, location);
			break;
	}

	return n;
}

/* makeBoolAConst()
 * Create an PGAConst string node and put it inside a boolean cast.
 */
static PGNode *
makeBoolAConst(bool state, int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGString;
	n->val.val.str = (state ? (char*) "t" : (char*) "f");
	n->location = location;

	return makeTypeCast((PGNode *)n, SystemTypeName("bool"), 0, -1);
}

/* check_qualified_name --- check the result of qualified_name production
 *
 * It's easiest to let the grammar production for qualified_name allow
 * subscripts and '*', which we then must reject here.
 */
static void
check_qualified_name(PGList *names, core_yyscan_t yyscanner)
{
	PGListCell   *i;

	foreach(i, names)
	{
		if (!IsA(lfirst(i), PGString))
			parser_yyerror("syntax error");
	}
}

/* check_func_name --- check the result of func_name production
 *
 * It's easiest to let the grammar production for func_name allow subscripts
 * and '*', which we then must reject here.
 */
static PGList *
check_func_name(PGList *names, core_yyscan_t yyscanner)
{
	PGListCell   *i;

	foreach(i, names)
	{
		if (!IsA(lfirst(i), PGString))
			parser_yyerror("syntax error");
	}
	return names;
}

/* check_indirection --- check the result of indirection production
 *
 * We only allow '*' at the end of the list, but it's hard to enforce that
 * in the grammar, so do it here.
 */
static PGList *
check_indirection(PGList *indirection, core_yyscan_t yyscanner)
{
	PGListCell *l;

	foreach(l, indirection)
	{
		if (IsA(lfirst(l), PGAStar))
		{
			if (lnext(l) != NULL)
				parser_yyerror("improper use of \"*\"");
		}
	}
	return indirection;
}

/* makeParamRef
 * Creates a new PGParamRef node
 */
static PGNode* makeParamRef(int number, int location)
{
	PGParamRef *p = makeNode(PGParamRef);
	p->number = number;
	p->location = location;
	p->name = NULL;
	return (PGNode *) p;
}

/* makeNamedParamRef
 * Creates a new PGParamRef node
 */
static PGNode* makeNamedParamRef(char *name, int location)
{
	PGParamRef *p = (PGParamRef *)makeParamRef(0, location);
	p->name = name;
	return (PGNode *) p;
}


/* insertSelectOptions()
 * Insert ORDER BY, etc into an already-constructed SelectStmt.
 *
 * This routine is just to avoid duplicating code in PGSelectStmt productions.
 */
static void
insertSelectOptions(PGSelectStmt *stmt,
					PGList *sortClause, PGList *lockingClause,
					PGNode *limitOffset, PGNode *limitCount,
					PGWithClause *withClause,
					core_yyscan_t yyscanner)
{
	if (stmt->type != T_PGSelectStmt) {
		ereport(ERROR,
				(errcode(PG_ERRCODE_SYNTAX_ERROR),
						errmsg("DESCRIBE/SHOW/SUMMARIZE with CTE/ORDER BY/... not allowed - wrap the statement in a subquery instead"),
						parser_errposition(exprLocation((PGNode *) stmt))));
	}
	Assert(IsA(stmt, PGSelectStmt));

	/*
	 * Tests here are to reject constructs like
	 *	(SELECT foo ORDER BY bar) ORDER BY baz
	 */
	if (sortClause)
	{
		if (stmt->sortClause)
			ereport(ERROR,
					(errcode(PG_ERRCODE_SYNTAX_ERROR),
					 errmsg("multiple ORDER BY clauses not allowed"),
					 parser_errposition(exprLocation((PGNode *) sortClause))));
		stmt->sortClause = sortClause;
	}
	/* We can handle multiple locking clauses, though */
	stmt->lockingClause = list_concat(stmt->lockingClause, lockingClause);
	if (limitOffset)
	{
		if (stmt->limitOffset)
			ereport(ERROR,
					(errcode(PG_ERRCODE_SYNTAX_ERROR),
					 errmsg("multiple OFFSET clauses not allowed"),
					 parser_errposition(exprLocation(limitOffset))));
		stmt->limitOffset = limitOffset;
	}
	if (limitCount)
	{
		if (stmt->limitCount)
			ereport(ERROR,
					(errcode(PG_ERRCODE_SYNTAX_ERROR),
					 errmsg("multiple LIMIT clauses not allowed"),
					 parser_errposition(exprLocation(limitCount))));
		stmt->limitCount = limitCount;
	}
	if (withClause)
	{
		if (stmt->withClause)
			ereport(ERROR,
					(errcode(PG_ERRCODE_SYNTAX_ERROR),
					 errmsg("multiple WITH clauses not allowed"),
					 parser_errposition(exprLocation((PGNode *) withClause))));
		stmt->withClause = withClause;
	}
}

static PGNode *
makeSetOp(PGSetOperation op, bool all, PGNode *larg, PGNode *rarg)
{
	PGSelectStmt *n = makeNode(PGSelectStmt);

	n->op = op;
	n->all = all;
	n->larg = (PGSelectStmt *) larg;
	n->rarg = (PGSelectStmt *) rarg;
	return (PGNode *) n;
}

/* SystemFuncName()
 * Build a properly-qualified reference to a built-in function.
 */
PGList *
SystemFuncName(const char *name)
{
	return list_make2(makeString(DEFAULT_SCHEMA), makeString(name));
}

/* SystemTypeName()
 * Build a properly-qualified reference to a built-in type.
 *
 * typmod is defaulted, but may be changed afterwards by caller.
 * Likewise for the location.
 */
PGTypeName *
SystemTypeName(const char *name)
{
	return makeTypeNameFromNameList(list_make1(makeString(name)));
}

/* doNegate()
 * Handle negation of a numeric constant.
 *
 * Formerly, we did this here because the optimizer couldn't cope with
 * indexquals that looked like "var = -4" --- it wants "var = const"
 * and a unary minus operator applied to a constant didn't qualify.
 * As of Postgres 7.0, that problem doesn't exist anymore because there
 * is a constant-subexpression simplifier in the optimizer.  However,
 * there's still a good reason for doing this here, which is that we can
 * postpone committing to a particular internal representation for simple
 * negative constants.	It's better to leave "-123.456" in string form
 * until we know what the desired type is.
 */
static PGNode *
doNegate(PGNode *n, int location)
{
	if (IsA(n, PGAConst))
	{
		PGAConst *con = (PGAConst *)n;

		/* report the constant's location as that of the '-' sign */
		con->location = location;

		if (con->val.type == T_PGInteger)
		{
			con->val.val.ival = -con->val.val.ival;
			return n;
		}
		if (con->val.type == T_PGFloat)
		{
			doNegateFloat(&con->val);
			return n;
		}
	}

	return (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "-", NULL, n, location);
}

static void
doNegateFloat(PGValue *v)
{
	char   *oldval = v->val.str;

	Assert(IsA(v, PGFloat));
	if (*oldval == '+')
		oldval++;
	if (*oldval == '-')
		v->val.str = oldval+1;	/* just strip the '-' */
	else
		v->val.str = psprintf("-%s", oldval);
}

static PGNode *
makeAndExpr(PGNode *lexpr, PGNode *rexpr, int location)
{
	PGNode	   *lexp = lexpr;

	/* Look through AEXPR_PAREN nodes so they don't affect flattening */
	while (IsA(lexp, PGAExpr) &&
		   ((PGAExpr *) lexp)->kind == AEXPR_PAREN)
		lexp = ((PGAExpr *) lexp)->lexpr;
	/* Flatten "a AND b AND c ..." to a single PGBoolExpr on sight */
	if (IsA(lexp, PGBoolExpr))
	{
		PGBoolExpr *blexpr = (PGBoolExpr *) lexp;

		if (blexpr->boolop == PG_AND_EXPR)
		{
			blexpr->args = lappend(blexpr->args, rexpr);
			return (PGNode *) blexpr;
		}
	}
	return (PGNode *) makeBoolExpr(PG_AND_EXPR, list_make2(lexpr, rexpr), location);
}

static PGNode *
makeOrExpr(PGNode *lexpr, PGNode *rexpr, int location)
{
	PGNode	   *lexp = lexpr;

	/* Look through AEXPR_PAREN nodes so they don't affect flattening */
	while (IsA(lexp, PGAExpr) &&
		   ((PGAExpr *) lexp)->kind == AEXPR_PAREN)
		lexp = ((PGAExpr *) lexp)->lexpr;
	/* Flatten "a OR b OR c ..." to a single PGBoolExpr on sight */
	if (IsA(lexp, PGBoolExpr))
	{
		PGBoolExpr *blexpr = (PGBoolExpr *) lexp;

		if (blexpr->boolop == PG_OR_EXPR)
		{
			blexpr->args = lappend(blexpr->args, rexpr);
			return (PGNode *) blexpr;
		}
	}
	return (PGNode *) makeBoolExpr(PG_OR_EXPR, list_make2(lexpr, rexpr), location);
}

static PGNode *
makeNotExpr(PGNode *expr, int location)
{
	return (PGNode *) makeBoolExpr(PG_NOT_EXPR, list_make1(expr), location);
}

/* Separate PGConstraint nodes from COLLATE clauses in a */
static void
SplitColQualList(PGList *qualList,
				 PGList **constraintList, PGCollateClause **collClause,
				 core_yyscan_t yyscanner)
{
	PGListCell   *cell;
	PGListCell   *prev;
	PGListCell   *next;

	*collClause = NULL;
	prev = NULL;
	for (cell = list_head(qualList); cell; cell = next)
	{
		PGNode   *n = (PGNode *) lfirst(cell);

		next = lnext(cell);
		if (IsA(n, PGConstraint))
		{
			/* keep it in list */
			prev = cell;
			continue;
		}
		if (IsA(n, PGCollateClause))
		{
			PGCollateClause *c = (PGCollateClause *) n;

			if (*collClause)
				ereport(ERROR,
						(errcode(PG_ERRCODE_SYNTAX_ERROR),
						 errmsg("multiple COLLATE clauses not allowed"),
						 parser_errposition(c->location)));
			*collClause = c;
		}
		else
			elog(ERROR, "unexpected node type %d", (int) n->type);
		/* remove non-Constraint nodes from qualList */
		qualList = list_delete_cell(qualList, cell, prev);
	}
	*constraintList = qualList;
}

/*
 * Process result of ConstraintAttributeSpec, and set appropriate bool flags
 * in the output command node.  Pass NULL for any flags the particular
 * command doesn't support.
 */
static void
processCASbits(int cas_bits, int location, const char *constrType,
			   bool *deferrable, bool *initdeferred, bool *not_valid,
			   bool *no_inherit, core_yyscan_t yyscanner)
{
	/* defaults */
	if (deferrable)
		*deferrable = false;
	if (initdeferred)
		*initdeferred = false;
	if (not_valid)
		*not_valid = false;

	if (cas_bits & (CAS_DEFERRABLE | CAS_INITIALLY_DEFERRED))
	{
		if (deferrable)
			*deferrable = true;
		else
			ereport(ERROR,
					(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
					 /* translator: %s is CHECK, UNIQUE, or similar */
					 errmsg("%s constraints cannot be marked DEFERRABLE",
							constrType),
					 parser_errposition(location)));
	}

	if (cas_bits & CAS_INITIALLY_DEFERRED)
	{
		if (initdeferred)
			*initdeferred = true;
		else
			ereport(ERROR,
					(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
					 /* translator: %s is CHECK, UNIQUE, or similar */
					 errmsg("%s constraints cannot be marked DEFERRABLE",
							constrType),
					 parser_errposition(location)));
	}

	if (cas_bits & CAS_NOT_VALID)
	{
		if (not_valid)
			*not_valid = true;
		else
			ereport(ERROR,
					(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
					 /* translator: %s is CHECK, UNIQUE, or similar */
					 errmsg("%s constraints cannot be marked NOT VALID",
							constrType),
					 parser_errposition(location)));
	}

	if (cas_bits & CAS_NO_INHERIT)
	{
		if (no_inherit)
			*no_inherit = true;
		else
			ereport(ERROR,
					(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
					 /* translator: %s is CHECK, UNIQUE, or similar */
					 errmsg("%s constraints cannot be marked NO INHERIT",
							constrType),
					 parser_errposition(location)));
	}
}

/*----------
 * Recursive view transformation
 *
 * Convert
 *
 *     CREATE RECURSIVE VIEW relname (aliases) AS query
 *
 * to
 *
 *     CREATE VIEW relname (aliases) AS
 *         WITH RECURSIVE relname (aliases) AS (query)
 *         SELECT aliases FROM relname
 *
 * Actually, just the WITH ... part, which is then inserted into the original
 * view as the query.
 * ----------
 */
static PGNode *
makeRecursiveViewSelect(char *relname, PGList *aliases, PGNode *query)
{
	PGSelectStmt *s = makeNode(PGSelectStmt);
	PGWithClause *w = makeNode(PGWithClause);
	PGCommonTableExpr *cte = makeNode(PGCommonTableExpr);
	PGList	   *tl = NIL;
	PGListCell   *lc;

	/* create common table expression */
	cte->ctename = relname;
	cte->aliascolnames = aliases;
	cte->ctequery = query;
	cte->location = -1;

	/* create WITH clause and attach CTE */
	w->recursive = true;
	w->ctes = list_make1(cte);
	w->location = -1;

	/* create target list for the new SELECT from the alias list of the
	 * recursive view specification */
	foreach (lc, aliases)
	{
		PGResTarget *rt = makeNode(PGResTarget);

		rt->name = NULL;
		rt->indirection = NIL;
		rt->val = makeColumnRef(strVal(lfirst(lc)), NIL, -1, 0);
		rt->location = -1;

		tl = lappend(tl, rt);
	}

	/* create new SELECT combining WITH clause, target list, and fake FROM
	 * clause */
	s->withClause = w;
	s->targetList = tl;
	s->fromClause = list_make1(makeRangeVar(NULL, relname, -1));

	return (PGNode *) s;
}

/* parser_init()
 * Initialize to parse one query string
 */
void
parser_init(base_yy_extra_type *yyext)
{
	yyext->parsetree = NIL;		/* in case grammar forgets to set it */
}

#undef yyparse
#undef yylex
#undef yyerror
#undef yylval
#undef yychar
#undef yydebug
#undef yynerrs
#undef yylloc

} // namespace duckdb_libpgquery
