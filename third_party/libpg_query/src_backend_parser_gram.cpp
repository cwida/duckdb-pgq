/* A Bison parser, made by GNU Bison 3.8.2.  */

/* Bison implementation for Yacc-like parsers in C

   Copyright (C) 1984, 1989-1990, 2000-2015, 2018-2021 Free Software Foundation,
   Inc.

   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <https://www.gnu.org/licenses/>.  */

/* As a special exception, you may create a larger work that contains
   part or all of the Bison parser skeleton and distribute that work
   under terms of your choice, so long as that work isn't itself a
   parser generator using the skeleton or a modified version thereof
   as a parser skeleton.  Alternatively, if you modify or redistribute
   the parser skeleton itself, you may (at your option) remove this
   special exception, which will cause the skeleton and the resulting
   Bison output files to be licensed under the GNU General Public
   License without this special exception.

   This special exception was added by the Free Software Foundation in
   version 2.2 of Bison.  */

/* C LALR(1) parser skeleton written by Richard Stallman, by
   simplifying the original so-called "semantic" parser.  */

/* DO NOT RELY ON FEATURES THAT ARE NOT DOCUMENTED in the manual,
   especially those whose name start with YY_ or yy_.  They are
   private implementation details that can be changed or removed.  */

/* All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.  */

/* Identify Bison output, and Bison version.  */
#define YYBISON 30802

/* Bison version string.  */
#define YYBISON_VERSION "3.8.2"

/* Skeleton name.  */
#define YYSKELETON_NAME "yacc.c"

/* Pure parsers.  */
#define YYPURE 1

/* Push parsers.  */
#define YYPUSH 0

/* Pull parsers.  */
#define YYPULL 1


/* Substitute the variable and function names.  */
#define yyparse         base_yyparse
#define yylex           base_yylex
#define yyerror         base_yyerror
#define yydebug         base_yydebug
#define yynerrs         base_yynerrs

/* First part of user prologue.  */
#line 1 "third_party/libpg_query/grammar/grammar.y.tmp"

#line 1 "third_party/libpg_query/grammar/grammar.hpp"
/*#define YYDEBUG 1*/
/*-------------------------------------------------------------------------
 *
 * gram.y
 *	  POSTGRESQL BISON rules/actions
 *
 * Portions Copyright (c) 1996-2017, PostgreSQL Global Development PGGroup
 * Portions Copyright (c) 1994, Regents of the University of California
 *
 *
 * IDENTIFICATION
 *	  src/backend/parser/gram.y
 *
 * HISTORY
 *	  AUTHOR			DATE			MAJOR EVENT
 *	  Andrew Yu			Sept, 1994		POSTQUEL to SQL conversion
 *	  Andrew Yu			Oct, 1994		lispy code conversion
 *
 * NOTES
 *	  CAPITALS are used to represent terminal symbols.
 *	  non-capitals are used to represent non-terminals.
 *
 *	  In general, nothing in this file should initiate database accesses
 *	  nor depend on changeable state (such as SET variables).  If you do
 *	  database accesses, your code will fail when we have aborted the
 *	  current transaction and are just parsing commands to find the next
 *	  ROLLBACK or COMMIT.  If you make use of SET variables, then you
 *	  will do the wrong thing in multi-query strings like this:
 *			SET constraint_exclusion TO off; SELECT * FROM foo;
 *	  because the entire string is parsed by gram.y before the SET gets
 *	  executed.  Anything that depends on the database or changeable state
 *	  should be handled during parse analysis so that it happens at the
 *	  right time not the wrong time.
 *
 * WARNINGS
 *	  If you use a list, make sure the datum is a node so that the printing
 *	  routines work.
 *
 *	  Sometimes we assign constants to makeStrings. Make sure we don't free
 *	  those.
 *
 *-------------------------------------------------------------------------
 */
#include "pg_functions.hpp"
#include <string.h>

#include <ctype.h>
#include <limits.h>

#include "nodes/makefuncs.hpp"
#include "nodes/nodeFuncs.hpp"
#include "parser/gramparse.hpp"
#include "parser/parser.hpp"
#include "utils/datetime.hpp"

namespace duckdb_libpgquery {
#define DEFAULT_SCHEMA "main"

/*
 * Location tracking support --- simpler than bison's default, since we only
 * want to track the start position not the end position of each nonterminal.
 */
#define YYLLOC_DEFAULT(Current, Rhs, N) \
	do { \
		if ((N) > 0) \
			(Current) = (Rhs)[1]; \
		else \
			(Current) = (-1); \
	} while (0)

/*
 * The above macro assigns -1 (unknown) as the parse location of any
 * nonterminal that was reduced from an empty rule, or whose leftmost
 * component was reduced from an empty rule.  This is problematic
 * for nonterminals defined like
 *		OptFooList: / * EMPTY * / { ... } | OptFooList Foo { ... } ;
 * because we'll set -1 as the location during the first reduction and then
 * copy it during each subsequent reduction, leaving us with -1 for the
 * location even when the list is not empty.  To fix that, do this in the
 * action for the nonempty rule(s):
 *		if (@$ < 0) @$ = @2;
 * (Although we have many nonterminals that follow this pattern, we only
 * bother with fixing @$ like this when the nonterminal's parse location
 * is actually referenced in some rule.)
 *
 * A cleaner answer would be to make YYLLOC_DEFAULT scan all the Rhs
 * locations until it's found one that's not -1.  Then we'd get a correct
 * location for any nonterminal that isn't entirely empty.  But this way
 * would add overhead to every rule reduction, and so far there's not been
 * a compelling reason to pay that overhead.
 */

/*
 * Bison doesn't allocate anything that needs to live across parser calls,
 * so we can easily have it use palloc instead of malloc.  This prevents
 * memory leaks if we error out during parsing.  Note this only works with
 * bison >= 2.0.  However, in bison 1.875 the default is to use alloca()
 * if possible, so there's not really much problem anyhow, at least if
 * you're building with gcc.
 */
#define YYMALLOC palloc
#define YYFREE   pfree
#define YYINITDEPTH 1000

/* yields an integer bitmask of these flags: */
#define CAS_NOT_DEFERRABLE			0x01
#define CAS_DEFERRABLE				0x02
#define CAS_INITIALLY_IMMEDIATE		0x04
#define CAS_INITIALLY_DEFERRED		0x08
#define CAS_NOT_VALID				0x10
#define CAS_NO_INHERIT				0x20


#define parser_yyerror(msg)  scanner_yyerror(msg, yyscanner)
#define parser_errposition(pos)  scanner_errposition(pos, yyscanner)

static void base_yyerror(YYLTYPE *yylloc, core_yyscan_t yyscanner,
						 const char *msg);
static PGRawStmt *makeRawStmt(PGNode *stmt, int stmt_location);
static void updateRawStmtEnd(PGRawStmt *rs, int end_location);
static PGNode *makeColumnRef(char *colname, PGList *indirection,
						   int location, core_yyscan_t yyscanner);
static PGNode *makeTypeCast(PGNode *arg, PGTypeName *tpname, int trycast, int location);
static PGNode *makeStringConst(char *str, int location);
static PGNode *makeStringConstCast(char *str, int location, PGTypeName *tpname);
static PGNode *makeIntervalNode(char *str, int location, PGList *typmods);
static PGNode *makeIntervalNode(int val, int location, PGList *typmods);
static PGNode *makeIntervalNode(PGNode *arg, int location, PGList *typmods);
static PGNode *makeSampleSize(PGValue *sample_size, bool is_percentage);
static PGNode *makeSampleOptions(PGNode *sample_size, char *method, int *seed, int location);
static PGNode *makeIntConst(int val, int location);
static PGNode *makeFloatConst(char *str, int location);
static PGNode *makeBitStringConst(char *str, int location);
static PGNode *makeNullAConst(int location);
static PGNode *makeAConst(PGValue *v, int location);
static PGNode *makeBoolAConst(bool state, int location);
static PGNode *makeParamRef(int number, int location);
static PGNode *makeNamedParamRef(char* name, int location);
static void check_qualified_name(PGList *names, core_yyscan_t yyscanner);
static PGList *check_func_name(PGList *names, core_yyscan_t yyscanner);
static PGList *check_indirection(PGList *indirection, core_yyscan_t yyscanner);
static void insertSelectOptions(PGSelectStmt *stmt,
								PGList *sortClause, PGList *lockingClause,
								PGNode *limitOffset, PGNode *limitCount,
								PGWithClause *withClause,
								core_yyscan_t yyscanner);
static PGNode *makeSetOp(PGSetOperation op, bool all, PGNode *larg, PGNode *rarg);
static PGNode *doNegate(PGNode *n, int location);
static void doNegateFloat(PGValue *v);
static PGNode *makeAndExpr(PGNode *lexpr, PGNode *rexpr, int location);
static PGNode *makeOrExpr(PGNode *lexpr, PGNode *rexpr, int location);
static PGNode *makeNotExpr(PGNode *expr, int location);
static void SplitColQualList(PGList *qualList,
							 PGList **constraintList, PGCollateClause **collClause,
							 core_yyscan_t yyscanner);
static void processCASbits(int cas_bits, int location, const char *constrType,
			   bool *deferrable, bool *initdeferred, bool *not_valid,
			   bool *no_inherit, core_yyscan_t yyscanner);
static PGNode *makeRecursiveViewSelect(char *relname, PGList *aliases, PGNode *query);
static PGNode *makeLimitPercent(PGNode *limit_percent);


#line 241 "third_party/libpg_query/grammar/grammar_out.cpp"

# ifndef YY_CAST
#  ifdef __cplusplus
#   define YY_CAST(Type, Val) static_cast<Type> (Val)
#   define YY_REINTERPRET_CAST(Type, Val) reinterpret_cast<Type> (Val)
#  else
#   define YY_CAST(Type, Val) ((Type) (Val))
#   define YY_REINTERPRET_CAST(Type, Val) ((Type) (Val))
#  endif
# endif
# ifndef YY_NULLPTR
#  if defined __cplusplus
#   if 201103L <= __cplusplus
#    define YY_NULLPTR nullptr
#   else
#    define YY_NULLPTR 0
#   endif
#  else
#   define YY_NULLPTR ((void*)0)
#  endif
# endif

#include "include/parser/gram.hpp"
/* Symbol kind.  */
enum yysymbol_kind_t
{
  YYSYMBOL_YYEMPTY = -2,
  YYSYMBOL_YYEOF = 0,                      /* "end of file"  */
  YYSYMBOL_YYerror = 1,                    /* error  */
  YYSYMBOL_YYUNDEF = 2,                    /* "invalid token"  */
  YYSYMBOL_IDENT = 3,                      /* IDENT  */
  YYSYMBOL_FCONST = 4,                     /* FCONST  */
  YYSYMBOL_SCONST = 5,                     /* SCONST  */
  YYSYMBOL_BCONST = 6,                     /* BCONST  */
  YYSYMBOL_XCONST = 7,                     /* XCONST  */
  YYSYMBOL_Op = 8,                         /* Op  */
  YYSYMBOL_ICONST = 9,                     /* ICONST  */
  YYSYMBOL_PARAM = 10,                     /* PARAM  */
  YYSYMBOL_TYPECAST = 11,                  /* TYPECAST  */
  YYSYMBOL_DOT_DOT = 12,                   /* DOT_DOT  */
  YYSYMBOL_COLON_EQUALS = 13,              /* COLON_EQUALS  */
  YYSYMBOL_EQUALS_GREATER = 14,            /* EQUALS_GREATER  */
  YYSYMBOL_INTEGER_DIVISION = 15,          /* INTEGER_DIVISION  */
  YYSYMBOL_POWER_OF = 16,                  /* POWER_OF  */
  YYSYMBOL_LAMBDA_ARROW = 17,              /* LAMBDA_ARROW  */
  YYSYMBOL_DOUBLE_ARROW = 18,              /* DOUBLE_ARROW  */
  YYSYMBOL_LESS_EQUALS = 19,               /* LESS_EQUALS  */
  YYSYMBOL_GREATER_EQUALS = 20,            /* GREATER_EQUALS  */
  YYSYMBOL_NOT_EQUALS = 21,                /* NOT_EQUALS  */
  YYSYMBOL_ABORT_P = 22,                   /* ABORT_P  */
  YYSYMBOL_ABSOLUTE_P = 23,                /* ABSOLUTE_P  */
  YYSYMBOL_ACCESS = 24,                    /* ACCESS  */
  YYSYMBOL_ACTION = 25,                    /* ACTION  */
  YYSYMBOL_ACYCLIC = 26,                   /* ACYCLIC  */
  YYSYMBOL_ADD_P = 27,                     /* ADD_P  */
  YYSYMBOL_ADMIN = 28,                     /* ADMIN  */
  YYSYMBOL_AFTER = 29,                     /* AFTER  */
  YYSYMBOL_AGGREGATE = 30,                 /* AGGREGATE  */
  YYSYMBOL_ALL = 31,                       /* ALL  */
  YYSYMBOL_ALSO = 32,                      /* ALSO  */
  YYSYMBOL_ALTER = 33,                     /* ALTER  */
  YYSYMBOL_ALWAYS = 34,                    /* ALWAYS  */
  YYSYMBOL_ANALYSE = 35,                   /* ANALYSE  */
  YYSYMBOL_ANALYZE = 36,                   /* ANALYZE  */
  YYSYMBOL_AND = 37,                       /* AND  */
  YYSYMBOL_ANTI = 38,                      /* ANTI  */
  YYSYMBOL_ANY = 39,                       /* ANY  */
  YYSYMBOL_ARE = 40,                       /* ARE  */
  YYSYMBOL_ARRAY = 41,                     /* ARRAY  */
  YYSYMBOL_AS = 42,                        /* AS  */
  YYSYMBOL_ASC_P = 43,                     /* ASC_P  */
  YYSYMBOL_ASOF = 44,                      /* ASOF  */
  YYSYMBOL_ASSERTION = 45,                 /* ASSERTION  */
  YYSYMBOL_ASSIGNMENT = 46,                /* ASSIGNMENT  */
  YYSYMBOL_ASYMMETRIC = 47,                /* ASYMMETRIC  */
  YYSYMBOL_AT = 48,                        /* AT  */
  YYSYMBOL_ATTACH = 49,                    /* ATTACH  */
  YYSYMBOL_ATTRIBUTE = 50,                 /* ATTRIBUTE  */
  YYSYMBOL_AUTHORIZATION = 51,             /* AUTHORIZATION  */
  YYSYMBOL_BACKWARD = 52,                  /* BACKWARD  */
  YYSYMBOL_BEFORE = 53,                    /* BEFORE  */
  YYSYMBOL_BEGIN_P = 54,                   /* BEGIN_P  */
  YYSYMBOL_BETWEEN = 55,                   /* BETWEEN  */
  YYSYMBOL_BIGINT = 56,                    /* BIGINT  */
  YYSYMBOL_BINARY = 57,                    /* BINARY  */
  YYSYMBOL_BIT = 58,                       /* BIT  */
  YYSYMBOL_BOOLEAN_P = 59,                 /* BOOLEAN_P  */
  YYSYMBOL_BOTH = 60,                      /* BOTH  */
  YYSYMBOL_BY = 61,                        /* BY  */
  YYSYMBOL_CACHE = 62,                     /* CACHE  */
  YYSYMBOL_CALL_P = 63,                    /* CALL_P  */
  YYSYMBOL_CALLED = 64,                    /* CALLED  */
  YYSYMBOL_CASCADE = 65,                   /* CASCADE  */
  YYSYMBOL_CASCADED = 66,                  /* CASCADED  */
  YYSYMBOL_CASE = 67,                      /* CASE  */
  YYSYMBOL_CAST = 68,                      /* CAST  */
  YYSYMBOL_CATALOG_P = 69,                 /* CATALOG_P  */
  YYSYMBOL_CENTURIES_P = 70,               /* CENTURIES_P  */
  YYSYMBOL_CENTURY_P = 71,                 /* CENTURY_P  */
  YYSYMBOL_CHAIN = 72,                     /* CHAIN  */
  YYSYMBOL_CHAR_P = 73,                    /* CHAR_P  */
  YYSYMBOL_CHARACTER = 74,                 /* CHARACTER  */
  YYSYMBOL_CHARACTERISTICS = 75,           /* CHARACTERISTICS  */
  YYSYMBOL_CHECK_P = 76,                   /* CHECK_P  */
  YYSYMBOL_CHECKPOINT = 77,                /* CHECKPOINT  */
  YYSYMBOL_CLASS = 78,                     /* CLASS  */
  YYSYMBOL_CLOSE = 79,                     /* CLOSE  */
  YYSYMBOL_CLUSTER = 80,                   /* CLUSTER  */
  YYSYMBOL_COALESCE = 81,                  /* COALESCE  */
  YYSYMBOL_COLLATE = 82,                   /* COLLATE  */
  YYSYMBOL_COLLATION = 83,                 /* COLLATION  */
  YYSYMBOL_COLUMN = 84,                    /* COLUMN  */
  YYSYMBOL_COLUMNS = 85,                   /* COLUMNS  */
  YYSYMBOL_COMMENT = 86,                   /* COMMENT  */
  YYSYMBOL_COMMENTS = 87,                  /* COMMENTS  */
  YYSYMBOL_COMMIT = 88,                    /* COMMIT  */
  YYSYMBOL_COMMITTED = 89,                 /* COMMITTED  */
  YYSYMBOL_COMPRESSION = 90,               /* COMPRESSION  */
  YYSYMBOL_CONCURRENTLY = 91,              /* CONCURRENTLY  */
  YYSYMBOL_CONFIGURATION = 92,             /* CONFIGURATION  */
  YYSYMBOL_CONFLICT = 93,                  /* CONFLICT  */
  YYSYMBOL_CONNECTION = 94,                /* CONNECTION  */
  YYSYMBOL_CONSTRAINT = 95,                /* CONSTRAINT  */
  YYSYMBOL_CONSTRAINTS = 96,               /* CONSTRAINTS  */
  YYSYMBOL_CONTENT_P = 97,                 /* CONTENT_P  */
  YYSYMBOL_CONTINUE_P = 98,                /* CONTINUE_P  */
  YYSYMBOL_CONVERSION_P = 99,              /* CONVERSION_P  */
  YYSYMBOL_COPY = 100,                     /* COPY  */
  YYSYMBOL_COST = 101,                     /* COST  */
  YYSYMBOL_CREATE_P = 102,                 /* CREATE_P  */
  YYSYMBOL_CROSS = 103,                    /* CROSS  */
  YYSYMBOL_CSV = 104,                      /* CSV  */
  YYSYMBOL_CUBE = 105,                     /* CUBE  */
  YYSYMBOL_CURRENT_P = 106,                /* CURRENT_P  */
  YYSYMBOL_CURSOR = 107,                   /* CURSOR  */
  YYSYMBOL_CYCLE = 108,                    /* CYCLE  */
  YYSYMBOL_DATA_P = 109,                   /* DATA_P  */
  YYSYMBOL_DATABASE = 110,                 /* DATABASE  */
  YYSYMBOL_DAY_P = 111,                    /* DAY_P  */
  YYSYMBOL_DAYS_P = 112,                   /* DAYS_P  */
  YYSYMBOL_DEALLOCATE = 113,               /* DEALLOCATE  */
  YYSYMBOL_DEC = 114,                      /* DEC  */
  YYSYMBOL_DECADE_P = 115,                 /* DECADE_P  */
  YYSYMBOL_DECADES_P = 116,                /* DECADES_P  */
  YYSYMBOL_DECIMAL_P = 117,                /* DECIMAL_P  */
  YYSYMBOL_DECLARE = 118,                  /* DECLARE  */
  YYSYMBOL_DEFAULT = 119,                  /* DEFAULT  */
  YYSYMBOL_DEFAULTS = 120,                 /* DEFAULTS  */
  YYSYMBOL_DEFERRABLE = 121,               /* DEFERRABLE  */
  YYSYMBOL_DEFERRED = 122,                 /* DEFERRED  */
  YYSYMBOL_DEFINER = 123,                  /* DEFINER  */
  YYSYMBOL_DELETE_P = 124,                 /* DELETE_P  */
  YYSYMBOL_DELIMITER = 125,                /* DELIMITER  */
  YYSYMBOL_DELIMITERS = 126,               /* DELIMITERS  */
  YYSYMBOL_DEPENDS = 127,                  /* DEPENDS  */
  YYSYMBOL_DESC_P = 128,                   /* DESC_P  */
  YYSYMBOL_DESCRIBE = 129,                 /* DESCRIBE  */
  YYSYMBOL_DESTINATION = 130,              /* DESTINATION  */
  YYSYMBOL_DETACH = 131,                   /* DETACH  */
  YYSYMBOL_DICTIONARY = 132,               /* DICTIONARY  */
  YYSYMBOL_DISABLE_P = 133,                /* DISABLE_P  */
  YYSYMBOL_DISCARD = 134,                  /* DISCARD  */
  YYSYMBOL_DISTINCT = 135,                 /* DISTINCT  */
  YYSYMBOL_DO = 136,                       /* DO  */
  YYSYMBOL_DOCUMENT_P = 137,               /* DOCUMENT_P  */
  YYSYMBOL_DOMAIN_P = 138,                 /* DOMAIN_P  */
  YYSYMBOL_DOUBLE_P = 139,                 /* DOUBLE_P  */
  YYSYMBOL_DROP = 140,                     /* DROP  */
  YYSYMBOL_EACH = 141,                     /* EACH  */
  YYSYMBOL_EDGE = 142,                     /* EDGE  */
  YYSYMBOL_ELEMENT_ID = 143,               /* ELEMENT_ID  */
  YYSYMBOL_ELSE = 144,                     /* ELSE  */
  YYSYMBOL_ENABLE_P = 145,                 /* ENABLE_P  */
  YYSYMBOL_ENCODING = 146,                 /* ENCODING  */
  YYSYMBOL_ENCRYPTED = 147,                /* ENCRYPTED  */
  YYSYMBOL_END_P = 148,                    /* END_P  */
  YYSYMBOL_ENUM_P = 149,                   /* ENUM_P  */
  YYSYMBOL_ESCAPE = 150,                   /* ESCAPE  */
  YYSYMBOL_EVENT = 151,                    /* EVENT  */
  YYSYMBOL_EXCEPT = 152,                   /* EXCEPT  */
  YYSYMBOL_EXCLUDE = 153,                  /* EXCLUDE  */
  YYSYMBOL_EXCLUDING = 154,                /* EXCLUDING  */
  YYSYMBOL_EXCLUSIVE = 155,                /* EXCLUSIVE  */
  YYSYMBOL_EXECUTE = 156,                  /* EXECUTE  */
  YYSYMBOL_EXISTS = 157,                   /* EXISTS  */
  YYSYMBOL_EXPLAIN = 158,                  /* EXPLAIN  */
  YYSYMBOL_EXPORT_P = 159,                 /* EXPORT_P  */
  YYSYMBOL_EXPORT_STATE = 160,             /* EXPORT_STATE  */
  YYSYMBOL_EXTENSION = 161,                /* EXTENSION  */
  YYSYMBOL_EXTERNAL = 162,                 /* EXTERNAL  */
  YYSYMBOL_EXTRACT = 163,                  /* EXTRACT  */
  YYSYMBOL_FALSE_P = 164,                  /* FALSE_P  */
  YYSYMBOL_FAMILY = 165,                   /* FAMILY  */
  YYSYMBOL_FETCH = 166,                    /* FETCH  */
  YYSYMBOL_FILTER = 167,                   /* FILTER  */
  YYSYMBOL_FIRST_P = 168,                  /* FIRST_P  */
  YYSYMBOL_FLOAT_P = 169,                  /* FLOAT_P  */
  YYSYMBOL_FOLLOWING = 170,                /* FOLLOWING  */
  YYSYMBOL_FOR = 171,                      /* FOR  */
  YYSYMBOL_FORCE = 172,                    /* FORCE  */
  YYSYMBOL_FOREIGN = 173,                  /* FOREIGN  */
  YYSYMBOL_FORWARD = 174,                  /* FORWARD  */
  YYSYMBOL_FREEZE = 175,                   /* FREEZE  */
  YYSYMBOL_FROM = 176,                     /* FROM  */
  YYSYMBOL_FULL = 177,                     /* FULL  */
  YYSYMBOL_FUNCTION = 178,                 /* FUNCTION  */
  YYSYMBOL_FUNCTIONS = 179,                /* FUNCTIONS  */
  YYSYMBOL_GENERATED = 180,                /* GENERATED  */
  YYSYMBOL_GLOB = 181,                     /* GLOB  */
  YYSYMBOL_GLOBAL = 182,                   /* GLOBAL  */
  YYSYMBOL_GRANT = 183,                    /* GRANT  */
  YYSYMBOL_GRANTED = 184,                  /* GRANTED  */
  YYSYMBOL_GRAPH = 185,                    /* GRAPH  */
  YYSYMBOL_GRAPH_TABLE = 186,              /* GRAPH_TABLE  */
  YYSYMBOL_GROUP_P = 187,                  /* GROUP_P  */
  YYSYMBOL_GROUPING = 188,                 /* GROUPING  */
  YYSYMBOL_GROUPING_ID = 189,              /* GROUPING_ID  */
  YYSYMBOL_GROUPS = 190,                   /* GROUPS  */
  YYSYMBOL_HANDLER = 191,                  /* HANDLER  */
  YYSYMBOL_HAVING = 192,                   /* HAVING  */
  YYSYMBOL_HEADER_P = 193,                 /* HEADER_P  */
  YYSYMBOL_HOLD = 194,                     /* HOLD  */
  YYSYMBOL_HOUR_P = 195,                   /* HOUR_P  */
  YYSYMBOL_HOURS_P = 196,                  /* HOURS_P  */
  YYSYMBOL_IDENTITY_P = 197,               /* IDENTITY_P  */
  YYSYMBOL_IF_P = 198,                     /* IF_P  */
  YYSYMBOL_IGNORE_P = 199,                 /* IGNORE_P  */
  YYSYMBOL_ILIKE = 200,                    /* ILIKE  */
  YYSYMBOL_IMMEDIATE = 201,                /* IMMEDIATE  */
  YYSYMBOL_IMMUTABLE = 202,                /* IMMUTABLE  */
  YYSYMBOL_IMPLICIT_P = 203,               /* IMPLICIT_P  */
  YYSYMBOL_IMPORT_P = 204,                 /* IMPORT_P  */
  YYSYMBOL_IN_P = 205,                     /* IN_P  */
  YYSYMBOL_INCLUDE_P = 206,                /* INCLUDE_P  */
  YYSYMBOL_INCLUDING = 207,                /* INCLUDING  */
  YYSYMBOL_INCREMENT = 208,                /* INCREMENT  */
  YYSYMBOL_INDEX = 209,                    /* INDEX  */
  YYSYMBOL_INDEXES = 210,                  /* INDEXES  */
  YYSYMBOL_INHERIT = 211,                  /* INHERIT  */
  YYSYMBOL_INHERITS = 212,                 /* INHERITS  */
  YYSYMBOL_INITIALLY = 213,                /* INITIALLY  */
  YYSYMBOL_INLINE_P = 214,                 /* INLINE_P  */
  YYSYMBOL_INNER_P = 215,                  /* INNER_P  */
  YYSYMBOL_INOUT = 216,                    /* INOUT  */
  YYSYMBOL_INPUT_P = 217,                  /* INPUT_P  */
  YYSYMBOL_INSENSITIVE = 218,              /* INSENSITIVE  */
  YYSYMBOL_INSERT = 219,                   /* INSERT  */
  YYSYMBOL_INSTALL = 220,                  /* INSTALL  */
  YYSYMBOL_INSTEAD = 221,                  /* INSTEAD  */
  YYSYMBOL_INT_P = 222,                    /* INT_P  */
  YYSYMBOL_INTEGER = 223,                  /* INTEGER  */
  YYSYMBOL_INTERSECT = 224,                /* INTERSECT  */
  YYSYMBOL_INTERVAL = 225,                 /* INTERVAL  */
  YYSYMBOL_INTO = 226,                     /* INTO  */
  YYSYMBOL_INVOKER = 227,                  /* INVOKER  */
  YYSYMBOL_IS = 228,                       /* IS  */
  YYSYMBOL_ISNULL = 229,                   /* ISNULL  */
  YYSYMBOL_ISOLATION = 230,                /* ISOLATION  */
  YYSYMBOL_JOIN = 231,                     /* JOIN  */
  YYSYMBOL_JSON = 232,                     /* JSON  */
  YYSYMBOL_KEEP = 233,                     /* KEEP  */
  YYSYMBOL_KEY = 234,                      /* KEY  */
  YYSYMBOL_LABEL = 235,                    /* LABEL  */
  YYSYMBOL_LANGUAGE = 236,                 /* LANGUAGE  */
  YYSYMBOL_LARGE_P = 237,                  /* LARGE_P  */
  YYSYMBOL_LAST_P = 238,                   /* LAST_P  */
  YYSYMBOL_LATERAL_P = 239,                /* LATERAL_P  */
  YYSYMBOL_LEADING = 240,                  /* LEADING  */
  YYSYMBOL_LEAKPROOF = 241,                /* LEAKPROOF  */
  YYSYMBOL_LEFT = 242,                     /* LEFT  */
  YYSYMBOL_LEVEL = 243,                    /* LEVEL  */
  YYSYMBOL_LIKE = 244,                     /* LIKE  */
  YYSYMBOL_LIMIT = 245,                    /* LIMIT  */
  YYSYMBOL_LISTEN = 246,                   /* LISTEN  */
  YYSYMBOL_LOAD = 247,                     /* LOAD  */
  YYSYMBOL_LOCAL = 248,                    /* LOCAL  */
  YYSYMBOL_LOCATION = 249,                 /* LOCATION  */
  YYSYMBOL_LOCK_P = 250,                   /* LOCK_P  */
  YYSYMBOL_LOCKED = 251,                   /* LOCKED  */
  YYSYMBOL_LOGGED = 252,                   /* LOGGED  */
  YYSYMBOL_MACRO = 253,                    /* MACRO  */
  YYSYMBOL_MAP = 254,                      /* MAP  */
  YYSYMBOL_MAPPING = 255,                  /* MAPPING  */
  YYSYMBOL_MATCH = 256,                    /* MATCH  */
  YYSYMBOL_MATERIALIZED = 257,             /* MATERIALIZED  */
  YYSYMBOL_MAXVALUE = 258,                 /* MAXVALUE  */
  YYSYMBOL_METHOD = 259,                   /* METHOD  */
  YYSYMBOL_MICROSECOND_P = 260,            /* MICROSECOND_P  */
  YYSYMBOL_MICROSECONDS_P = 261,           /* MICROSECONDS_P  */
  YYSYMBOL_MILLENNIA_P = 262,              /* MILLENNIA_P  */
  YYSYMBOL_MILLENNIUM_P = 263,             /* MILLENNIUM_P  */
  YYSYMBOL_MILLISECOND_P = 264,            /* MILLISECOND_P  */
  YYSYMBOL_MILLISECONDS_P = 265,           /* MILLISECONDS_P  */
  YYSYMBOL_MINUTE_P = 266,                 /* MINUTE_P  */
  YYSYMBOL_MINUTES_P = 267,                /* MINUTES_P  */
  YYSYMBOL_MINVALUE = 268,                 /* MINVALUE  */
  YYSYMBOL_MODE = 269,                     /* MODE  */
  YYSYMBOL_MONTH_P = 270,                  /* MONTH_P  */
  YYSYMBOL_MONTHS_P = 271,                 /* MONTHS_P  */
  YYSYMBOL_MOVE = 272,                     /* MOVE  */
  YYSYMBOL_NAME_P = 273,                   /* NAME_P  */
  YYSYMBOL_NAMES = 274,                    /* NAMES  */
  YYSYMBOL_NATIONAL = 275,                 /* NATIONAL  */
  YYSYMBOL_NATURAL = 276,                  /* NATURAL  */
  YYSYMBOL_NCHAR = 277,                    /* NCHAR  */
  YYSYMBOL_NEW = 278,                      /* NEW  */
  YYSYMBOL_NEXT = 279,                     /* NEXT  */
  YYSYMBOL_NO = 280,                       /* NO  */
  YYSYMBOL_NODE = 281,                     /* NODE  */
  YYSYMBOL_NONE = 282,                     /* NONE  */
  YYSYMBOL_NOT = 283,                      /* NOT  */
  YYSYMBOL_NOTHING = 284,                  /* NOTHING  */
  YYSYMBOL_NOTIFY = 285,                   /* NOTIFY  */
  YYSYMBOL_NOTNULL = 286,                  /* NOTNULL  */
  YYSYMBOL_NOWAIT = 287,                   /* NOWAIT  */
  YYSYMBOL_NULL_P = 288,                   /* NULL_P  */
  YYSYMBOL_NULLIF = 289,                   /* NULLIF  */
  YYSYMBOL_NULLS_P = 290,                  /* NULLS_P  */
  YYSYMBOL_NUMERIC = 291,                  /* NUMERIC  */
  YYSYMBOL_OBJECT_P = 292,                 /* OBJECT_P  */
  YYSYMBOL_OF = 293,                       /* OF  */
  YYSYMBOL_OFF = 294,                      /* OFF  */
  YYSYMBOL_OFFSET = 295,                   /* OFFSET  */
  YYSYMBOL_OIDS = 296,                     /* OIDS  */
  YYSYMBOL_OLD = 297,                      /* OLD  */
  YYSYMBOL_ON = 298,                       /* ON  */
  YYSYMBOL_ONLY = 299,                     /* ONLY  */
  YYSYMBOL_OPERATOR = 300,                 /* OPERATOR  */
  YYSYMBOL_OPTION = 301,                   /* OPTION  */
  YYSYMBOL_OPTIONS = 302,                  /* OPTIONS  */
  YYSYMBOL_OR = 303,                       /* OR  */
  YYSYMBOL_ORDER = 304,                    /* ORDER  */
  YYSYMBOL_ORDINALITY = 305,               /* ORDINALITY  */
  YYSYMBOL_OTHERS = 306,                   /* OTHERS  */
  YYSYMBOL_OUT_P = 307,                    /* OUT_P  */
  YYSYMBOL_OUTER_P = 308,                  /* OUTER_P  */
  YYSYMBOL_OVER = 309,                     /* OVER  */
  YYSYMBOL_OVERLAPS = 310,                 /* OVERLAPS  */
  YYSYMBOL_OVERLAY = 311,                  /* OVERLAY  */
  YYSYMBOL_OVERRIDING = 312,               /* OVERRIDING  */
  YYSYMBOL_OWNED = 313,                    /* OWNED  */
  YYSYMBOL_OWNER = 314,                    /* OWNER  */
  YYSYMBOL_PARALLEL = 315,                 /* PARALLEL  */
  YYSYMBOL_PARSER = 316,                   /* PARSER  */
  YYSYMBOL_PARTIAL = 317,                  /* PARTIAL  */
  YYSYMBOL_PARTITION = 318,                /* PARTITION  */
  YYSYMBOL_PASSING = 319,                  /* PASSING  */
  YYSYMBOL_PASSWORD = 320,                 /* PASSWORD  */
  YYSYMBOL_PATH = 321,                     /* PATH  */
  YYSYMBOL_PATHS = 322,                    /* PATHS  */
  YYSYMBOL_PERCENT = 323,                  /* PERCENT  */
  YYSYMBOL_PERSISTENT = 324,               /* PERSISTENT  */
  YYSYMBOL_PIVOT = 325,                    /* PIVOT  */
  YYSYMBOL_PIVOT_LONGER = 326,             /* PIVOT_LONGER  */
  YYSYMBOL_PIVOT_WIDER = 327,              /* PIVOT_WIDER  */
  YYSYMBOL_PLACING = 328,                  /* PLACING  */
  YYSYMBOL_PLANS = 329,                    /* PLANS  */
  YYSYMBOL_POLICY = 330,                   /* POLICY  */
  YYSYMBOL_POSITION = 331,                 /* POSITION  */
  YYSYMBOL_POSITIONAL = 332,               /* POSITIONAL  */
  YYSYMBOL_PRAGMA_P = 333,                 /* PRAGMA_P  */
  YYSYMBOL_PRECEDING = 334,                /* PRECEDING  */
  YYSYMBOL_PRECISION = 335,                /* PRECISION  */
  YYSYMBOL_PREPARE = 336,                  /* PREPARE  */
  YYSYMBOL_PREPARED = 337,                 /* PREPARED  */
  YYSYMBOL_PRESERVE = 338,                 /* PRESERVE  */
  YYSYMBOL_PRIMARY = 339,                  /* PRIMARY  */
  YYSYMBOL_PRIOR = 340,                    /* PRIOR  */
  YYSYMBOL_PRIVILEGES = 341,               /* PRIVILEGES  */
  YYSYMBOL_PROCEDURAL = 342,               /* PROCEDURAL  */
  YYSYMBOL_PROCEDURE = 343,                /* PROCEDURE  */
  YYSYMBOL_PROGRAM = 344,                  /* PROGRAM  */
  YYSYMBOL_PROPERTIES = 345,               /* PROPERTIES  */
  YYSYMBOL_PROPERTY = 346,                 /* PROPERTY  */
  YYSYMBOL_PUBLICATION = 347,              /* PUBLICATION  */
  YYSYMBOL_QUALIFY = 348,                  /* QUALIFY  */
  YYSYMBOL_QUOTE = 349,                    /* QUOTE  */
  YYSYMBOL_RANGE = 350,                    /* RANGE  */
  YYSYMBOL_READ_P = 351,                   /* READ_P  */
  YYSYMBOL_REAL = 352,                     /* REAL  */
  YYSYMBOL_REASSIGN = 353,                 /* REASSIGN  */
  YYSYMBOL_RECHECK = 354,                  /* RECHECK  */
  YYSYMBOL_RECURSIVE = 355,                /* RECURSIVE  */
  YYSYMBOL_REF = 356,                      /* REF  */
  YYSYMBOL_REFERENCES = 357,               /* REFERENCES  */
  YYSYMBOL_REFERENCING = 358,              /* REFERENCING  */
  YYSYMBOL_REFRESH = 359,                  /* REFRESH  */
  YYSYMBOL_REINDEX = 360,                  /* REINDEX  */
  YYSYMBOL_RELATIONSHIP = 361,             /* RELATIONSHIP  */
  YYSYMBOL_RELATIVE_P = 362,               /* RELATIVE_P  */
  YYSYMBOL_RELEASE = 363,                  /* RELEASE  */
  YYSYMBOL_RENAME = 364,                   /* RENAME  */
  YYSYMBOL_REPEATABLE = 365,               /* REPEATABLE  */
  YYSYMBOL_REPLACE = 366,                  /* REPLACE  */
  YYSYMBOL_REPLICA = 367,                  /* REPLICA  */
  YYSYMBOL_RESET = 368,                    /* RESET  */
  YYSYMBOL_RESPECT_P = 369,                /* RESPECT_P  */
  YYSYMBOL_RESTART = 370,                  /* RESTART  */
  YYSYMBOL_RESTRICT = 371,                 /* RESTRICT  */
  YYSYMBOL_RETURNING = 372,                /* RETURNING  */
  YYSYMBOL_RETURNS = 373,                  /* RETURNS  */
  YYSYMBOL_REVOKE = 374,                   /* REVOKE  */
  YYSYMBOL_RIGHT = 375,                    /* RIGHT  */
  YYSYMBOL_ROLE = 376,                     /* ROLE  */
  YYSYMBOL_ROLLBACK = 377,                 /* ROLLBACK  */
  YYSYMBOL_ROLLUP = 378,                   /* ROLLUP  */
  YYSYMBOL_ROW = 379,                      /* ROW  */
  YYSYMBOL_ROWS = 380,                     /* ROWS  */
  YYSYMBOL_RULE = 381,                     /* RULE  */
  YYSYMBOL_SAMPLE = 382,                   /* SAMPLE  */
  YYSYMBOL_SAVEPOINT = 383,                /* SAVEPOINT  */
  YYSYMBOL_SCHEMA = 384,                   /* SCHEMA  */
  YYSYMBOL_SCHEMAS = 385,                  /* SCHEMAS  */
  YYSYMBOL_SCOPE = 386,                    /* SCOPE  */
  YYSYMBOL_SCROLL = 387,                   /* SCROLL  */
  YYSYMBOL_SEARCH = 388,                   /* SEARCH  */
  YYSYMBOL_SECOND_P = 389,                 /* SECOND_P  */
  YYSYMBOL_SECONDS_P = 390,                /* SECONDS_P  */
  YYSYMBOL_SECRET = 391,                   /* SECRET  */
  YYSYMBOL_SECURITY = 392,                 /* SECURITY  */
  YYSYMBOL_SELECT = 393,                   /* SELECT  */
  YYSYMBOL_SEMI = 394,                     /* SEMI  */
  YYSYMBOL_SEQUENCE = 395,                 /* SEQUENCE  */
  YYSYMBOL_SEQUENCES = 396,                /* SEQUENCES  */
  YYSYMBOL_SERIALIZABLE = 397,             /* SERIALIZABLE  */
  YYSYMBOL_SERVER = 398,                   /* SERVER  */
  YYSYMBOL_SESSION = 399,                  /* SESSION  */
  YYSYMBOL_SET = 400,                      /* SET  */
  YYSYMBOL_SETOF = 401,                    /* SETOF  */
  YYSYMBOL_SETS = 402,                     /* SETS  */
  YYSYMBOL_SHARE = 403,                    /* SHARE  */
  YYSYMBOL_SHORTEST = 404,                 /* SHORTEST  */
  YYSYMBOL_SHOW = 405,                     /* SHOW  */
  YYSYMBOL_SIMILAR = 406,                  /* SIMILAR  */
  YYSYMBOL_SIMPLE = 407,                   /* SIMPLE  */
  YYSYMBOL_SKIP = 408,                     /* SKIP  */
  YYSYMBOL_SMALLINT = 409,                 /* SMALLINT  */
  YYSYMBOL_SNAPSHOT = 410,                 /* SNAPSHOT  */
  YYSYMBOL_SOME = 411,                     /* SOME  */
  YYSYMBOL_SOURCE = 412,                   /* SOURCE  */
  YYSYMBOL_SQL_P = 413,                    /* SQL_P  */
  YYSYMBOL_STABLE = 414,                   /* STABLE  */
  YYSYMBOL_STANDALONE_P = 415,             /* STANDALONE_P  */
  YYSYMBOL_START = 416,                    /* START  */
  YYSYMBOL_STATEMENT = 417,                /* STATEMENT  */
  YYSYMBOL_STATISTICS = 418,               /* STATISTICS  */
  YYSYMBOL_STDIN = 419,                    /* STDIN  */
  YYSYMBOL_STDOUT = 420,                   /* STDOUT  */
  YYSYMBOL_STORAGE = 421,                  /* STORAGE  */
  YYSYMBOL_STORED = 422,                   /* STORED  */
  YYSYMBOL_STRICT_P = 423,                 /* STRICT_P  */
  YYSYMBOL_STRIP_P = 424,                  /* STRIP_P  */
  YYSYMBOL_STRUCT = 425,                   /* STRUCT  */
  YYSYMBOL_SUBSCRIPTION = 426,             /* SUBSCRIPTION  */
  YYSYMBOL_SUBSTRING = 427,                /* SUBSTRING  */
  YYSYMBOL_SUMMARIZE = 428,                /* SUMMARIZE  */
  YYSYMBOL_SYMMETRIC = 429,                /* SYMMETRIC  */
  YYSYMBOL_SYSID = 430,                    /* SYSID  */
  YYSYMBOL_SYSTEM_P = 431,                 /* SYSTEM_P  */
  YYSYMBOL_TABLE = 432,                    /* TABLE  */
  YYSYMBOL_TABLES = 433,                   /* TABLES  */
  YYSYMBOL_TABLESAMPLE = 434,              /* TABLESAMPLE  */
  YYSYMBOL_TABLESPACE = 435,               /* TABLESPACE  */
  YYSYMBOL_TEMP = 436,                     /* TEMP  */
  YYSYMBOL_TEMPLATE = 437,                 /* TEMPLATE  */
  YYSYMBOL_TEMPORARY = 438,                /* TEMPORARY  */
  YYSYMBOL_TEXT_P = 439,                   /* TEXT_P  */
  YYSYMBOL_THEN = 440,                     /* THEN  */
  YYSYMBOL_TIES = 441,                     /* TIES  */
  YYSYMBOL_TIME = 442,                     /* TIME  */
  YYSYMBOL_TIMESTAMP = 443,                /* TIMESTAMP  */
  YYSYMBOL_TO = 444,                       /* TO  */
  YYSYMBOL_TRAIL = 445,                    /* TRAIL  */
  YYSYMBOL_TRAILING = 446,                 /* TRAILING  */
  YYSYMBOL_TRANSACTION = 447,              /* TRANSACTION  */
  YYSYMBOL_TRANSFORM = 448,                /* TRANSFORM  */
  YYSYMBOL_TREAT = 449,                    /* TREAT  */
  YYSYMBOL_TRIGGER = 450,                  /* TRIGGER  */
  YYSYMBOL_TRIM = 451,                     /* TRIM  */
  YYSYMBOL_TRUE_P = 452,                   /* TRUE_P  */
  YYSYMBOL_TRUNCATE = 453,                 /* TRUNCATE  */
  YYSYMBOL_TRUSTED = 454,                  /* TRUSTED  */
  YYSYMBOL_TRY_CAST = 455,                 /* TRY_CAST  */
  YYSYMBOL_TYPE_P = 456,                   /* TYPE_P  */
  YYSYMBOL_TYPES_P = 457,                  /* TYPES_P  */
  YYSYMBOL_UNBOUNDED = 458,                /* UNBOUNDED  */
  YYSYMBOL_UNCOMMITTED = 459,              /* UNCOMMITTED  */
  YYSYMBOL_UNENCRYPTED = 460,              /* UNENCRYPTED  */
  YYSYMBOL_UNION = 461,                    /* UNION  */
  YYSYMBOL_UNIQUE = 462,                   /* UNIQUE  */
  YYSYMBOL_UNKNOWN = 463,                  /* UNKNOWN  */
  YYSYMBOL_UNLISTEN = 464,                 /* UNLISTEN  */
  YYSYMBOL_UNLOGGED = 465,                 /* UNLOGGED  */
  YYSYMBOL_UNPIVOT = 466,                  /* UNPIVOT  */
  YYSYMBOL_UNTIL = 467,                    /* UNTIL  */
  YYSYMBOL_UPDATE = 468,                   /* UPDATE  */
  YYSYMBOL_USE_P = 469,                    /* USE_P  */
  YYSYMBOL_USER = 470,                     /* USER  */
  YYSYMBOL_USING = 471,                    /* USING  */
  YYSYMBOL_VACUUM = 472,                   /* VACUUM  */
  YYSYMBOL_VALID = 473,                    /* VALID  */
  YYSYMBOL_VALIDATE = 474,                 /* VALIDATE  */
  YYSYMBOL_VALIDATOR = 475,                /* VALIDATOR  */
  YYSYMBOL_VALUE_P = 476,                  /* VALUE_P  */
  YYSYMBOL_VALUES = 477,                   /* VALUES  */
  YYSYMBOL_VARCHAR = 478,                  /* VARCHAR  */
  YYSYMBOL_VARIADIC = 479,                 /* VARIADIC  */
  YYSYMBOL_VARYING = 480,                  /* VARYING  */
  YYSYMBOL_VERBOSE = 481,                  /* VERBOSE  */
  YYSYMBOL_VERSION_P = 482,                /* VERSION_P  */
  YYSYMBOL_VERTEX = 483,                   /* VERTEX  */
  YYSYMBOL_VIEW = 484,                     /* VIEW  */
  YYSYMBOL_VIEWS = 485,                    /* VIEWS  */
  YYSYMBOL_VIRTUAL = 486,                  /* VIRTUAL  */
  YYSYMBOL_VOLATILE = 487,                 /* VOLATILE  */
  YYSYMBOL_WALK = 488,                     /* WALK  */
  YYSYMBOL_WEEK_P = 489,                   /* WEEK_P  */
  YYSYMBOL_WEEKS_P = 490,                  /* WEEKS_P  */
  YYSYMBOL_WHEN = 491,                     /* WHEN  */
  YYSYMBOL_WHERE = 492,                    /* WHERE  */
  YYSYMBOL_WHITESPACE_P = 493,             /* WHITESPACE_P  */
  YYSYMBOL_WINDOW = 494,                   /* WINDOW  */
  YYSYMBOL_WITH = 495,                     /* WITH  */
  YYSYMBOL_WITHIN = 496,                   /* WITHIN  */
  YYSYMBOL_WITHOUT = 497,                  /* WITHOUT  */
  YYSYMBOL_WORK = 498,                     /* WORK  */
  YYSYMBOL_WRAPPER = 499,                  /* WRAPPER  */
  YYSYMBOL_WRITE_P = 500,                  /* WRITE_P  */
  YYSYMBOL_XML_P = 501,                    /* XML_P  */
  YYSYMBOL_XMLATTRIBUTES = 502,            /* XMLATTRIBUTES  */
  YYSYMBOL_XMLCONCAT = 503,                /* XMLCONCAT  */
  YYSYMBOL_XMLELEMENT = 504,               /* XMLELEMENT  */
  YYSYMBOL_XMLEXISTS = 505,                /* XMLEXISTS  */
  YYSYMBOL_XMLFOREST = 506,                /* XMLFOREST  */
  YYSYMBOL_XMLNAMESPACES = 507,            /* XMLNAMESPACES  */
  YYSYMBOL_XMLPARSE = 508,                 /* XMLPARSE  */
  YYSYMBOL_XMLPI = 509,                    /* XMLPI  */
  YYSYMBOL_XMLROOT = 510,                  /* XMLROOT  */
  YYSYMBOL_XMLSERIALIZE = 511,             /* XMLSERIALIZE  */
  YYSYMBOL_XMLTABLE = 512,                 /* XMLTABLE  */
  YYSYMBOL_YEAR_P = 513,                   /* YEAR_P  */
  YYSYMBOL_YEARS_P = 514,                  /* YEARS_P  */
  YYSYMBOL_YES_P = 515,                    /* YES_P  */
  YYSYMBOL_ZONE = 516,                     /* ZONE  */
  YYSYMBOL_NOT_LA = 517,                   /* NOT_LA  */
  YYSYMBOL_NULLS_LA = 518,                 /* NULLS_LA  */
  YYSYMBOL_WITH_LA = 519,                  /* WITH_LA  */
  YYSYMBOL_520_ = 520,                     /* '<'  */
  YYSYMBOL_521_ = 521,                     /* '>'  */
  YYSYMBOL_522_ = 522,                     /* '='  */
  YYSYMBOL_POSTFIXOP = 523,                /* POSTFIXOP  */
  YYSYMBOL_524_ = 524,                     /* '+'  */
  YYSYMBOL_525_ = 525,                     /* '-'  */
  YYSYMBOL_526_ = 526,                     /* '*'  */
  YYSYMBOL_527_ = 527,                     /* '/'  */
  YYSYMBOL_528_ = 528,                     /* '%'  */
  YYSYMBOL_529_ = 529,                     /* '^'  */
  YYSYMBOL_UMINUS = 530,                   /* UMINUS  */
  YYSYMBOL_531_ = 531,                     /* '['  */
  YYSYMBOL_532_ = 532,                     /* ']'  */
  YYSYMBOL_533_ = 533,                     /* '('  */
  YYSYMBOL_534_ = 534,                     /* ')'  */
  YYSYMBOL_535_ = 535,                     /* '.'  */
  YYSYMBOL_536_ = 536,                     /* ';'  */
  YYSYMBOL_537_ = 537,                     /* ','  */
  YYSYMBOL_538_ = 538,                     /* '|'  */
  YYSYMBOL_539_ = 539,                     /* '?'  */
  YYSYMBOL_540_ = 540,                     /* '{'  */
  YYSYMBOL_541_ = 541,                     /* '}'  */
  YYSYMBOL_542_ = 542,                     /* '&'  */
  YYSYMBOL_543_ = 543,                     /* '!'  */
  YYSYMBOL_544_ = 544,                     /* ':'  */
  YYSYMBOL_545_ = 545,                     /* '#'  */
  YYSYMBOL_546_ = 546,                     /* '$'  */
  YYSYMBOL_YYACCEPT = 547,                 /* $accept  */
  YYSYMBOL_stmtblock = 548,                /* stmtblock  */
  YYSYMBOL_stmtmulti = 549,                /* stmtmulti  */
  YYSYMBOL_stmt = 550,                     /* stmt  */
  YYSYMBOL_AlterObjectSchemaStmt = 551,    /* AlterObjectSchemaStmt  */
  YYSYMBOL_AlterSeqStmt = 552,             /* AlterSeqStmt  */
  YYSYMBOL_SeqOptList = 553,               /* SeqOptList  */
  YYSYMBOL_opt_with = 554,                 /* opt_with  */
  YYSYMBOL_NumericOnly = 555,              /* NumericOnly  */
  YYSYMBOL_SeqOptElem = 556,               /* SeqOptElem  */
  YYSYMBOL_opt_by = 557,                   /* opt_by  */
  YYSYMBOL_SignedIconst = 558,             /* SignedIconst  */
  YYSYMBOL_AlterTableStmt = 559,           /* AlterTableStmt  */
  YYSYMBOL_alter_identity_column_option_list = 560, /* alter_identity_column_option_list  */
  YYSYMBOL_alter_column_default = 561,     /* alter_column_default  */
  YYSYMBOL_alter_identity_column_option = 562, /* alter_identity_column_option  */
  YYSYMBOL_alter_generic_option_list = 563, /* alter_generic_option_list  */
  YYSYMBOL_alter_table_cmd = 564,          /* alter_table_cmd  */
  YYSYMBOL_alter_using = 565,              /* alter_using  */
  YYSYMBOL_alter_generic_option_elem = 566, /* alter_generic_option_elem  */
  YYSYMBOL_alter_table_cmds = 567,         /* alter_table_cmds  */
  YYSYMBOL_alter_generic_options = 568,    /* alter_generic_options  */
  YYSYMBOL_opt_set_data = 569,             /* opt_set_data  */
  YYSYMBOL_AnalyzeStmt = 570,              /* AnalyzeStmt  */
  YYSYMBOL_AttachStmt = 571,               /* AttachStmt  */
  YYSYMBOL_DetachStmt = 572,               /* DetachStmt  */
  YYSYMBOL_opt_database = 573,             /* opt_database  */
  YYSYMBOL_opt_database_alias = 574,       /* opt_database_alias  */
  YYSYMBOL_CallStmt = 575,                 /* CallStmt  */
  YYSYMBOL_CheckPointStmt = 576,           /* CheckPointStmt  */
  YYSYMBOL_opt_col_id = 577,               /* opt_col_id  */
  YYSYMBOL_CommentOnStmt = 578,            /* CommentOnStmt  */
  YYSYMBOL_comment_value = 579,            /* comment_value  */
  YYSYMBOL_comment_on_type_any_name = 580, /* comment_on_type_any_name  */
  YYSYMBOL_qualified_name = 581,           /* qualified_name  */
  YYSYMBOL_ColId = 582,                    /* ColId  */
  YYSYMBOL_ColIdOrString = 583,            /* ColIdOrString  */
  YYSYMBOL_Sconst = 584,                   /* Sconst  */
  YYSYMBOL_indirection = 585,              /* indirection  */
  YYSYMBOL_indirection_el = 586,           /* indirection_el  */
  YYSYMBOL_attr_name = 587,                /* attr_name  */
  YYSYMBOL_ColLabel = 588,                 /* ColLabel  */
  YYSYMBOL_CopyStmt = 589,                 /* CopyStmt  */
  YYSYMBOL_copy_database_flag = 590,       /* copy_database_flag  */
  YYSYMBOL_copy_from = 591,                /* copy_from  */
  YYSYMBOL_copy_delimiter = 592,           /* copy_delimiter  */
  YYSYMBOL_copy_generic_opt_arg_list = 593, /* copy_generic_opt_arg_list  */
  YYSYMBOL_opt_using = 594,                /* opt_using  */
  YYSYMBOL_opt_as = 595,                   /* opt_as  */
  YYSYMBOL_opt_program = 596,              /* opt_program  */
  YYSYMBOL_copy_options = 597,             /* copy_options  */
  YYSYMBOL_copy_generic_opt_arg = 598,     /* copy_generic_opt_arg  */
  YYSYMBOL_copy_generic_opt_elem = 599,    /* copy_generic_opt_elem  */
  YYSYMBOL_opt_oids = 600,                 /* opt_oids  */
  YYSYMBOL_copy_opt_list = 601,            /* copy_opt_list  */
  YYSYMBOL_opt_binary = 602,               /* opt_binary  */
  YYSYMBOL_copy_opt_item = 603,            /* copy_opt_item  */
  YYSYMBOL_copy_generic_opt_arg_list_item = 604, /* copy_generic_opt_arg_list_item  */
  YYSYMBOL_copy_file_name = 605,           /* copy_file_name  */
  YYSYMBOL_copy_generic_opt_list = 606,    /* copy_generic_opt_list  */
  YYSYMBOL_CreateStmt = 607,               /* CreateStmt  */
  YYSYMBOL_ConstraintAttributeSpec = 608,  /* ConstraintAttributeSpec  */
  YYSYMBOL_def_arg = 609,                  /* def_arg  */
  YYSYMBOL_OptParenthesizedSeqOptList = 610, /* OptParenthesizedSeqOptList  */
  YYSYMBOL_generic_option_arg = 611,       /* generic_option_arg  */
  YYSYMBOL_key_action = 612,               /* key_action  */
  YYSYMBOL_ColConstraint = 613,            /* ColConstraint  */
  YYSYMBOL_ColConstraintElem = 614,        /* ColConstraintElem  */
  YYSYMBOL_GeneratedColumnType = 615,      /* GeneratedColumnType  */
  YYSYMBOL_opt_GeneratedColumnType = 616,  /* opt_GeneratedColumnType  */
  YYSYMBOL_GeneratedConstraintElem = 617,  /* GeneratedConstraintElem  */
  YYSYMBOL_generic_option_elem = 618,      /* generic_option_elem  */
  YYSYMBOL_key_update = 619,               /* key_update  */
  YYSYMBOL_key_actions = 620,              /* key_actions  */
  YYSYMBOL_OnCommitOption = 621,           /* OnCommitOption  */
  YYSYMBOL_reloptions = 622,               /* reloptions  */
  YYSYMBOL_opt_no_inherit = 623,           /* opt_no_inherit  */
  YYSYMBOL_TableConstraint = 624,          /* TableConstraint  */
  YYSYMBOL_TableLikeOption = 625,          /* TableLikeOption  */
  YYSYMBOL_reloption_list = 626,           /* reloption_list  */
  YYSYMBOL_ExistingIndex = 627,            /* ExistingIndex  */
  YYSYMBOL_ConstraintAttr = 628,           /* ConstraintAttr  */
  YYSYMBOL_OptWith = 629,                  /* OptWith  */
  YYSYMBOL_definition = 630,               /* definition  */
  YYSYMBOL_TableLikeOptionList = 631,      /* TableLikeOptionList  */
  YYSYMBOL_generic_option_name = 632,      /* generic_option_name  */
  YYSYMBOL_ConstraintAttributeElem = 633,  /* ConstraintAttributeElem  */
  YYSYMBOL_columnDef = 634,                /* columnDef  */
  YYSYMBOL_def_list = 635,                 /* def_list  */
  YYSYMBOL_index_name = 636,               /* index_name  */
  YYSYMBOL_TableElement = 637,             /* TableElement  */
  YYSYMBOL_def_elem = 638,                 /* def_elem  */
  YYSYMBOL_opt_definition = 639,           /* opt_definition  */
  YYSYMBOL_OptTableElementList = 640,      /* OptTableElementList  */
  YYSYMBOL_columnElem = 641,               /* columnElem  */
  YYSYMBOL_opt_column_list = 642,          /* opt_column_list  */
  YYSYMBOL_ColQualList = 643,              /* ColQualList  */
  YYSYMBOL_key_delete = 644,               /* key_delete  */
  YYSYMBOL_reloption_elem = 645,           /* reloption_elem  */
  YYSYMBOL_columnList = 646,               /* columnList  */
  YYSYMBOL_columnList_opt_comma = 647,     /* columnList_opt_comma  */
  YYSYMBOL_func_type = 648,                /* func_type  */
  YYSYMBOL_ConstraintElem = 649,           /* ConstraintElem  */
  YYSYMBOL_TableElementList = 650,         /* TableElementList  */
  YYSYMBOL_key_match = 651,                /* key_match  */
  YYSYMBOL_TableLikeClause = 652,          /* TableLikeClause  */
  YYSYMBOL_OptTemp = 653,                  /* OptTemp  */
  YYSYMBOL_generated_when = 654,           /* generated_when  */
  YYSYMBOL_CreateAsStmt = 655,             /* CreateAsStmt  */
  YYSYMBOL_opt_with_data = 656,            /* opt_with_data  */
  YYSYMBOL_create_as_target = 657,         /* create_as_target  */
  YYSYMBOL_unreserved_keyword = 658,       /* unreserved_keyword  */
  YYSYMBOL_col_name_keyword = 659,         /* col_name_keyword  */
  YYSYMBOL_func_name_keyword = 660,        /* func_name_keyword  */
  YYSYMBOL_type_name_keyword = 661,        /* type_name_keyword  */
  YYSYMBOL_other_keyword = 662,            /* other_keyword  */
  YYSYMBOL_type_func_name_keyword = 663,   /* type_func_name_keyword  */
  YYSYMBOL_reserved_keyword = 664,         /* reserved_keyword  */
  YYSYMBOL_pgq_unreserved_keyword = 665,   /* pgq_unreserved_keyword  */
  YYSYMBOL_pgq_col_name_keyword = 666,     /* pgq_col_name_keyword  */
  YYSYMBOL_CreateFunctionStmt = 667,       /* CreateFunctionStmt  */
  YYSYMBOL_macro_alias = 668,              /* macro_alias  */
  YYSYMBOL_param_list = 669,               /* param_list  */
  YYSYMBOL_CreateSchemaStmt = 670,         /* CreateSchemaStmt  */
  YYSYMBOL_OptSchemaEltList = 671,         /* OptSchemaEltList  */
  YYSYMBOL_schema_stmt = 672,              /* schema_stmt  */
  YYSYMBOL_CreateSecretStmt = 673,         /* CreateSecretStmt  */
  YYSYMBOL_opt_secret_name = 674,          /* opt_secret_name  */
  YYSYMBOL_opt_persist = 675,              /* opt_persist  */
  YYSYMBOL_opt_storage_specifier = 676,    /* opt_storage_specifier  */
  YYSYMBOL_CreateSeqStmt = 677,            /* CreateSeqStmt  */
  YYSYMBOL_OptSeqOptList = 678,            /* OptSeqOptList  */
  YYSYMBOL_CreateTypeStmt = 679,           /* CreateTypeStmt  */
  YYSYMBOL_opt_enum_val_list = 680,        /* opt_enum_val_list  */
  YYSYMBOL_enum_val_list = 681,            /* enum_val_list  */
  YYSYMBOL_DeallocateStmt = 682,           /* DeallocateStmt  */
  YYSYMBOL_DeleteStmt = 683,               /* DeleteStmt  */
  YYSYMBOL_relation_expr_opt_alias = 684,  /* relation_expr_opt_alias  */
  YYSYMBOL_where_or_current_clause = 685,  /* where_or_current_clause  */
  YYSYMBOL_using_clause = 686,             /* using_clause  */
  YYSYMBOL_DropStmt = 687,                 /* DropStmt  */
  YYSYMBOL_drop_type_any_name = 688,       /* drop_type_any_name  */
  YYSYMBOL_drop_type_name = 689,           /* drop_type_name  */
  YYSYMBOL_any_name_list = 690,            /* any_name_list  */
  YYSYMBOL_opt_drop_behavior = 691,        /* opt_drop_behavior  */
  YYSYMBOL_drop_type_name_on_any_name = 692, /* drop_type_name_on_any_name  */
  YYSYMBOL_DropSecretStmt = 693,           /* DropSecretStmt  */
  YYSYMBOL_opt_storage_drop_specifier = 694, /* opt_storage_drop_specifier  */
  YYSYMBOL_ExecuteStmt = 695,              /* ExecuteStmt  */
  YYSYMBOL_execute_param_expr = 696,       /* execute_param_expr  */
  YYSYMBOL_execute_param_list = 697,       /* execute_param_list  */
  YYSYMBOL_execute_param_clause = 698,     /* execute_param_clause  */
  YYSYMBOL_ExplainStmt = 699,              /* ExplainStmt  */
  YYSYMBOL_opt_verbose = 700,              /* opt_verbose  */
  YYSYMBOL_explain_option_arg = 701,       /* explain_option_arg  */
  YYSYMBOL_ExplainableStmt = 702,          /* ExplainableStmt  */
  YYSYMBOL_NonReservedWord = 703,          /* NonReservedWord  */
  YYSYMBOL_NonReservedWord_or_Sconst = 704, /* NonReservedWord_or_Sconst  */
  YYSYMBOL_explain_option_list = 705,      /* explain_option_list  */
  YYSYMBOL_analyze_keyword = 706,          /* analyze_keyword  */
  YYSYMBOL_opt_boolean_or_string = 707,    /* opt_boolean_or_string  */
  YYSYMBOL_explain_option_elem = 708,      /* explain_option_elem  */
  YYSYMBOL_explain_option_name = 709,      /* explain_option_name  */
  YYSYMBOL_ExportStmt = 710,               /* ExportStmt  */
  YYSYMBOL_ImportStmt = 711,               /* ImportStmt  */
  YYSYMBOL_IndexStmt = 712,                /* IndexStmt  */
  YYSYMBOL_access_method = 713,            /* access_method  */
  YYSYMBOL_access_method_clause = 714,     /* access_method_clause  */
  YYSYMBOL_opt_concurrently = 715,         /* opt_concurrently  */
  YYSYMBOL_opt_index_name = 716,           /* opt_index_name  */
  YYSYMBOL_opt_reloptions = 717,           /* opt_reloptions  */
  YYSYMBOL_opt_unique = 718,               /* opt_unique  */
  YYSYMBOL_InsertStmt = 719,               /* InsertStmt  */
  YYSYMBOL_insert_rest = 720,              /* insert_rest  */
  YYSYMBOL_insert_target = 721,            /* insert_target  */
  YYSYMBOL_opt_by_name_or_position = 722,  /* opt_by_name_or_position  */
  YYSYMBOL_opt_conf_expr = 723,            /* opt_conf_expr  */
  YYSYMBOL_opt_with_clause = 724,          /* opt_with_clause  */
  YYSYMBOL_insert_column_item = 725,       /* insert_column_item  */
  YYSYMBOL_set_clause = 726,               /* set_clause  */
  YYSYMBOL_opt_or_action = 727,            /* opt_or_action  */
  YYSYMBOL_opt_on_conflict = 728,          /* opt_on_conflict  */
  YYSYMBOL_index_elem = 729,               /* index_elem  */
  YYSYMBOL_returning_clause = 730,         /* returning_clause  */
  YYSYMBOL_override_kind = 731,            /* override_kind  */
  YYSYMBOL_set_target_list = 732,          /* set_target_list  */
  YYSYMBOL_opt_collate = 733,              /* opt_collate  */
  YYSYMBOL_opt_class = 734,                /* opt_class  */
  YYSYMBOL_insert_column_list = 735,       /* insert_column_list  */
  YYSYMBOL_set_clause_list = 736,          /* set_clause_list  */
  YYSYMBOL_set_clause_list_opt_comma = 737, /* set_clause_list_opt_comma  */
  YYSYMBOL_index_params = 738,             /* index_params  */
  YYSYMBOL_set_target = 739,               /* set_target  */
  YYSYMBOL_LoadStmt = 740,                 /* LoadStmt  */
  YYSYMBOL_file_name = 741,                /* file_name  */
  YYSYMBOL_repo_path = 742,                /* repo_path  */
  YYSYMBOL_PGQ_IDENT = 743,                /* PGQ_IDENT  */
  YYSYMBOL_DropPropertyGraphStmt = 744,    /* DropPropertyGraphStmt  */
  YYSYMBOL_VertexOrNode = 745,             /* VertexOrNode  */
  YYSYMBOL_EdgeOrRelationship = 746,       /* EdgeOrRelationship  */
  YYSYMBOL_EdgeTablesClauseOptional = 747, /* EdgeTablesClauseOptional  */
  YYSYMBOL_CreatePropertyGraphStmt = 748,  /* CreatePropertyGraphStmt  */
  YYSYMBOL_VertexTableDefinitionList = 749, /* VertexTableDefinitionList  */
  YYSYMBOL_KeySpecification = 750,         /* KeySpecification  */
  YYSYMBOL_KeyDefinition = 751,            /* KeyDefinition  */
  YYSYMBOL_KeyReference = 752,             /* KeyReference  */
  YYSYMBOL_LabelList = 753,                /* LabelList  */
  YYSYMBOL_LabelOptional = 754,            /* LabelOptional  */
  YYSYMBOL_Discriminator = 755,            /* Discriminator  */
  YYSYMBOL_VertexTableDefinition = 756,    /* VertexTableDefinition  */
  YYSYMBOL_EdgeTableDefinitionList = 757,  /* EdgeTableDefinitionList  */
  YYSYMBOL_EdgeTableDefinition = 758,      /* EdgeTableDefinition  */
  YYSYMBOL_AreOptional = 759,              /* AreOptional  */
  YYSYMBOL_IdentOptionalAs = 760,          /* IdentOptionalAs  */
  YYSYMBOL_QualifiednameOptionalAs = 761,  /* QualifiednameOptionalAs  */
  YYSYMBOL_PropertiesList = 762,           /* PropertiesList  */
  YYSYMBOL_ExceptOptional = 763,           /* ExceptOptional  */
  YYSYMBOL_PropertiesSpec = 764,           /* PropertiesSpec  */
  YYSYMBOL_PropertiesClause = 765,         /* PropertiesClause  */
  YYSYMBOL_GraphTableWhereOptional = 766,  /* GraphTableWhereOptional  */
  YYSYMBOL_GraphTableNameOptional = 767,   /* GraphTableNameOptional  */
  YYSYMBOL_ColumnsOptional = 768,          /* ColumnsOptional  */
  YYSYMBOL_GraphTableStmt = 769,           /* GraphTableStmt  */
  YYSYMBOL_KeepOptional = 770,             /* KeepOptional  */
  YYSYMBOL_PathOrPathsOptional = 771,      /* PathOrPathsOptional  */
  YYSYMBOL_GroupOrGroupsOptional = 772,    /* GroupOrGroupsOptional  */
  YYSYMBOL_PathVariableOptional = 773,     /* PathVariableOptional  */
  YYSYMBOL_PathModeOptional = 774,         /* PathModeOptional  */
  YYSYMBOL_TopKOptional = 775,             /* TopKOptional  */
  YYSYMBOL_PathPrefix = 776,               /* PathPrefix  */
  YYSYMBOL_PathPatternList = 777,          /* PathPatternList  */
  YYSYMBOL_PathPattern = 778,              /* PathPattern  */
  YYSYMBOL_PatternUnion = 779,             /* PatternUnion  */
  YYSYMBOL_KleeneQuantifierOptional = 780, /* KleeneQuantifierOptional  */
  YYSYMBOL_KleeneOptional = 781,           /* KleeneOptional  */
  YYSYMBOL_CostNum = 782,                  /* CostNum  */
  YYSYMBOL_CostDefault = 783,              /* CostDefault  */
  YYSYMBOL_CostOptional = 784,             /* CostOptional  */
  YYSYMBOL_SubPath = 785,                  /* SubPath  */
  YYSYMBOL_EnclosedSubPath = 786,          /* EnclosedSubPath  */
  YYSYMBOL_PathElement = 787,              /* PathElement  */
  YYSYMBOL_PathSequence = 788,             /* PathSequence  */
  YYSYMBOL_PathConcatenation = 789,        /* PathConcatenation  */
  YYSYMBOL_OrLabelExpression = 790,        /* OrLabelExpression  */
  YYSYMBOL_AndLabelExpression = 791,       /* AndLabelExpression  */
  YYSYMBOL_ComposedLabelExpression = 792,  /* ComposedLabelExpression  */
  YYSYMBOL_LabelExpression = 793,          /* LabelExpression  */
  YYSYMBOL_LabelExpressionOptional = 794,  /* LabelExpressionOptional  */
  YYSYMBOL_IsOrColon = 795,                /* IsOrColon  */
  YYSYMBOL_ArrowRight = 796,               /* ArrowRight  */
  YYSYMBOL_ArrowLeftBracket = 797,         /* ArrowLeftBracket  */
  YYSYMBOL_AbbreviatedEdge = 798,          /* AbbreviatedEdge  */
  YYSYMBOL_VariableOptional = 799,         /* VariableOptional  */
  YYSYMBOL_FullElementSpec = 800,          /* FullElementSpec  */
  YYSYMBOL_EdgePattern = 801,              /* EdgePattern  */
  YYSYMBOL_VertexPattern = 802,            /* VertexPattern  */
  YYSYMBOL_pgq_expr = 803,                 /* pgq_expr  */
  YYSYMBOL_PragmaStmt = 804,               /* PragmaStmt  */
  YYSYMBOL_PrepareStmt = 805,              /* PrepareStmt  */
  YYSYMBOL_prep_type_clause = 806,         /* prep_type_clause  */
  YYSYMBOL_PreparableStmt = 807,           /* PreparableStmt  */
  YYSYMBOL_RenameStmt = 808,               /* RenameStmt  */
  YYSYMBOL_opt_column = 809,               /* opt_column  */
  YYSYMBOL_SelectStmt = 810,               /* SelectStmt  */
  YYSYMBOL_select_with_parens = 811,       /* select_with_parens  */
  YYSYMBOL_select_no_parens = 812,         /* select_no_parens  */
  YYSYMBOL_select_clause = 813,            /* select_clause  */
  YYSYMBOL_opt_select = 814,               /* opt_select  */
  YYSYMBOL_simple_select = 815,            /* simple_select  */
  YYSYMBOL_value_or_values = 816,          /* value_or_values  */
  YYSYMBOL_pivot_keyword = 817,            /* pivot_keyword  */
  YYSYMBOL_unpivot_keyword = 818,          /* unpivot_keyword  */
  YYSYMBOL_pivot_column_entry = 819,       /* pivot_column_entry  */
  YYSYMBOL_pivot_column_list_internal = 820, /* pivot_column_list_internal  */
  YYSYMBOL_pivot_column_list = 821,        /* pivot_column_list  */
  YYSYMBOL_with_clause = 822,              /* with_clause  */
  YYSYMBOL_cte_list = 823,                 /* cte_list  */
  YYSYMBOL_common_table_expr = 824,        /* common_table_expr  */
  YYSYMBOL_opt_materialized = 825,         /* opt_materialized  */
  YYSYMBOL_into_clause = 826,              /* into_clause  */
  YYSYMBOL_OptTempTableName = 827,         /* OptTempTableName  */
  YYSYMBOL_opt_table = 828,                /* opt_table  */
  YYSYMBOL_all_or_distinct = 829,          /* all_or_distinct  */
  YYSYMBOL_by_name = 830,                  /* by_name  */
  YYSYMBOL_distinct_clause = 831,          /* distinct_clause  */
  YYSYMBOL_opt_all_clause = 832,           /* opt_all_clause  */
  YYSYMBOL_opt_ignore_nulls = 833,         /* opt_ignore_nulls  */
  YYSYMBOL_opt_sort_clause = 834,          /* opt_sort_clause  */
  YYSYMBOL_sort_clause = 835,              /* sort_clause  */
  YYSYMBOL_sortby_list = 836,              /* sortby_list  */
  YYSYMBOL_sortby = 837,                   /* sortby  */
  YYSYMBOL_opt_asc_desc = 838,             /* opt_asc_desc  */
  YYSYMBOL_opt_nulls_order = 839,          /* opt_nulls_order  */
  YYSYMBOL_select_limit = 840,             /* select_limit  */
  YYSYMBOL_opt_select_limit = 841,         /* opt_select_limit  */
  YYSYMBOL_limit_clause = 842,             /* limit_clause  */
  YYSYMBOL_offset_clause = 843,            /* offset_clause  */
  YYSYMBOL_sample_count = 844,             /* sample_count  */
  YYSYMBOL_sample_clause = 845,            /* sample_clause  */
  YYSYMBOL_opt_sample_func = 846,          /* opt_sample_func  */
  YYSYMBOL_tablesample_entry = 847,        /* tablesample_entry  */
  YYSYMBOL_tablesample_clause = 848,       /* tablesample_clause  */
  YYSYMBOL_opt_tablesample_clause = 849,   /* opt_tablesample_clause  */
  YYSYMBOL_opt_repeatable_clause = 850,    /* opt_repeatable_clause  */
  YYSYMBOL_select_limit_value = 851,       /* select_limit_value  */
  YYSYMBOL_select_offset_value = 852,      /* select_offset_value  */
  YYSYMBOL_select_fetch_first_value = 853, /* select_fetch_first_value  */
  YYSYMBOL_I_or_F_const = 854,             /* I_or_F_const  */
  YYSYMBOL_row_or_rows = 855,              /* row_or_rows  */
  YYSYMBOL_first_or_next = 856,            /* first_or_next  */
  YYSYMBOL_group_clause = 857,             /* group_clause  */
  YYSYMBOL_group_by_list = 858,            /* group_by_list  */
  YYSYMBOL_group_by_list_opt_comma = 859,  /* group_by_list_opt_comma  */
  YYSYMBOL_group_by_item = 860,            /* group_by_item  */
  YYSYMBOL_empty_grouping_set = 861,       /* empty_grouping_set  */
  YYSYMBOL_rollup_clause = 862,            /* rollup_clause  */
  YYSYMBOL_cube_clause = 863,              /* cube_clause  */
  YYSYMBOL_grouping_sets_clause = 864,     /* grouping_sets_clause  */
  YYSYMBOL_grouping_or_grouping_id = 865,  /* grouping_or_grouping_id  */
  YYSYMBOL_having_clause = 866,            /* having_clause  */
  YYSYMBOL_qualify_clause = 867,           /* qualify_clause  */
  YYSYMBOL_for_locking_clause = 868,       /* for_locking_clause  */
  YYSYMBOL_opt_for_locking_clause = 869,   /* opt_for_locking_clause  */
  YYSYMBOL_for_locking_items = 870,        /* for_locking_items  */
  YYSYMBOL_for_locking_item = 871,         /* for_locking_item  */
  YYSYMBOL_for_locking_strength = 872,     /* for_locking_strength  */
  YYSYMBOL_locked_rels_list = 873,         /* locked_rels_list  */
  YYSYMBOL_opt_nowait_or_skip = 874,       /* opt_nowait_or_skip  */
  YYSYMBOL_values_clause = 875,            /* values_clause  */
  YYSYMBOL_values_clause_opt_comma = 876,  /* values_clause_opt_comma  */
  YYSYMBOL_from_clause = 877,              /* from_clause  */
  YYSYMBOL_from_list = 878,                /* from_list  */
  YYSYMBOL_from_list_opt_comma = 879,      /* from_list_opt_comma  */
  YYSYMBOL_table_ref = 880,                /* table_ref  */
  YYSYMBOL_opt_pivot_group_by = 881,       /* opt_pivot_group_by  */
  YYSYMBOL_opt_include_nulls = 882,        /* opt_include_nulls  */
  YYSYMBOL_single_pivot_value = 883,       /* single_pivot_value  */
  YYSYMBOL_pivot_header = 884,             /* pivot_header  */
  YYSYMBOL_pivot_value = 885,              /* pivot_value  */
  YYSYMBOL_pivot_value_list = 886,         /* pivot_value_list  */
  YYSYMBOL_unpivot_header = 887,           /* unpivot_header  */
  YYSYMBOL_unpivot_value = 888,            /* unpivot_value  */
  YYSYMBOL_unpivot_value_list = 889,       /* unpivot_value_list  */
  YYSYMBOL_joined_table = 890,             /* joined_table  */
  YYSYMBOL_alias_clause = 891,             /* alias_clause  */
  YYSYMBOL_opt_alias_clause = 892,         /* opt_alias_clause  */
  YYSYMBOL_func_alias_clause = 893,        /* func_alias_clause  */
  YYSYMBOL_join_type = 894,                /* join_type  */
  YYSYMBOL_join_outer = 895,               /* join_outer  */
  YYSYMBOL_join_qual = 896,                /* join_qual  */
  YYSYMBOL_relation_expr = 897,            /* relation_expr  */
  YYSYMBOL_func_table = 898,               /* func_table  */
  YYSYMBOL_rowsfrom_item = 899,            /* rowsfrom_item  */
  YYSYMBOL_rowsfrom_list = 900,            /* rowsfrom_list  */
  YYSYMBOL_opt_col_def_list = 901,         /* opt_col_def_list  */
  YYSYMBOL_opt_ordinality = 902,           /* opt_ordinality  */
  YYSYMBOL_where_clause = 903,             /* where_clause  */
  YYSYMBOL_TableFuncElementList = 904,     /* TableFuncElementList  */
  YYSYMBOL_TableFuncElement = 905,         /* TableFuncElement  */
  YYSYMBOL_opt_collate_clause = 906,       /* opt_collate_clause  */
  YYSYMBOL_colid_type_list = 907,          /* colid_type_list  */
  YYSYMBOL_RowOrStruct = 908,              /* RowOrStruct  */
  YYSYMBOL_opt_Typename = 909,             /* opt_Typename  */
  YYSYMBOL_Typename = 910,                 /* Typename  */
  YYSYMBOL_qualified_typename = 911,       /* qualified_typename  */
  YYSYMBOL_opt_array_bounds = 912,         /* opt_array_bounds  */
  YYSYMBOL_SimpleTypename = 913,           /* SimpleTypename  */
  YYSYMBOL_ConstTypename = 914,            /* ConstTypename  */
  YYSYMBOL_GenericType = 915,              /* GenericType  */
  YYSYMBOL_opt_type_modifiers = 916,       /* opt_type_modifiers  */
  YYSYMBOL_Numeric = 917,                  /* Numeric  */
  YYSYMBOL_opt_float = 918,                /* opt_float  */
  YYSYMBOL_Bit = 919,                      /* Bit  */
  YYSYMBOL_ConstBit = 920,                 /* ConstBit  */
  YYSYMBOL_BitWithLength = 921,            /* BitWithLength  */
  YYSYMBOL_BitWithoutLength = 922,         /* BitWithoutLength  */
  YYSYMBOL_Character = 923,                /* Character  */
  YYSYMBOL_ConstCharacter = 924,           /* ConstCharacter  */
  YYSYMBOL_CharacterWithLength = 925,      /* CharacterWithLength  */
  YYSYMBOL_CharacterWithoutLength = 926,   /* CharacterWithoutLength  */
  YYSYMBOL_character = 927,                /* character  */
  YYSYMBOL_opt_varying = 928,              /* opt_varying  */
  YYSYMBOL_ConstDatetime = 929,            /* ConstDatetime  */
  YYSYMBOL_ConstInterval = 930,            /* ConstInterval  */
  YYSYMBOL_opt_timezone = 931,             /* opt_timezone  */
  YYSYMBOL_year_keyword = 932,             /* year_keyword  */
  YYSYMBOL_month_keyword = 933,            /* month_keyword  */
  YYSYMBOL_day_keyword = 934,              /* day_keyword  */
  YYSYMBOL_hour_keyword = 935,             /* hour_keyword  */
  YYSYMBOL_minute_keyword = 936,           /* minute_keyword  */
  YYSYMBOL_second_keyword = 937,           /* second_keyword  */
  YYSYMBOL_millisecond_keyword = 938,      /* millisecond_keyword  */
  YYSYMBOL_microsecond_keyword = 939,      /* microsecond_keyword  */
  YYSYMBOL_week_keyword = 940,             /* week_keyword  */
  YYSYMBOL_decade_keyword = 941,           /* decade_keyword  */
  YYSYMBOL_century_keyword = 942,          /* century_keyword  */
  YYSYMBOL_millennium_keyword = 943,       /* millennium_keyword  */
  YYSYMBOL_opt_interval = 944,             /* opt_interval  */
  YYSYMBOL_a_expr = 945,                   /* a_expr  */
  YYSYMBOL_b_expr = 946,                   /* b_expr  */
  YYSYMBOL_c_expr = 947,                   /* c_expr  */
  YYSYMBOL_d_expr = 948,                   /* d_expr  */
  YYSYMBOL_indirection_expr_or_a_expr = 949, /* indirection_expr_or_a_expr  */
  YYSYMBOL_indirection_expr = 950,         /* indirection_expr  */
  YYSYMBOL_struct_expr = 951,              /* struct_expr  */
  YYSYMBOL_func_application = 952,         /* func_application  */
  YYSYMBOL_func_expr = 953,                /* func_expr  */
  YYSYMBOL_func_expr_windowless = 954,     /* func_expr_windowless  */
  YYSYMBOL_func_expr_common_subexpr = 955, /* func_expr_common_subexpr  */
  YYSYMBOL_list_comprehension = 956,       /* list_comprehension  */
  YYSYMBOL_within_group_clause = 957,      /* within_group_clause  */
  YYSYMBOL_filter_clause = 958,            /* filter_clause  */
  YYSYMBOL_export_clause = 959,            /* export_clause  */
  YYSYMBOL_window_clause = 960,            /* window_clause  */
  YYSYMBOL_window_definition_list = 961,   /* window_definition_list  */
  YYSYMBOL_window_definition = 962,        /* window_definition  */
  YYSYMBOL_over_clause = 963,              /* over_clause  */
  YYSYMBOL_window_specification = 964,     /* window_specification  */
  YYSYMBOL_opt_existing_window_name = 965, /* opt_existing_window_name  */
  YYSYMBOL_opt_partition_clause = 966,     /* opt_partition_clause  */
  YYSYMBOL_opt_frame_clause = 967,         /* opt_frame_clause  */
  YYSYMBOL_frame_extent = 968,             /* frame_extent  */
  YYSYMBOL_frame_bound = 969,              /* frame_bound  */
  YYSYMBOL_opt_window_exclusion_clause = 970, /* opt_window_exclusion_clause  */
  YYSYMBOL_qualified_row = 971,            /* qualified_row  */
  YYSYMBOL_row = 972,                      /* row  */
  YYSYMBOL_dict_arg = 973,                 /* dict_arg  */
  YYSYMBOL_dict_arguments = 974,           /* dict_arguments  */
  YYSYMBOL_dict_arguments_opt_comma = 975, /* dict_arguments_opt_comma  */
  YYSYMBOL_map_arg = 976,                  /* map_arg  */
  YYSYMBOL_map_arguments = 977,            /* map_arguments  */
  YYSYMBOL_map_arguments_opt_comma = 978,  /* map_arguments_opt_comma  */
  YYSYMBOL_opt_map_arguments_opt_comma = 979, /* opt_map_arguments_opt_comma  */
  YYSYMBOL_sub_type = 980,                 /* sub_type  */
  YYSYMBOL_all_Op = 981,                   /* all_Op  */
  YYSYMBOL_MathOp = 982,                   /* MathOp  */
  YYSYMBOL_qual_Op = 983,                  /* qual_Op  */
  YYSYMBOL_qual_all_Op = 984,              /* qual_all_Op  */
  YYSYMBOL_subquery_Op = 985,              /* subquery_Op  */
  YYSYMBOL_any_operator = 986,             /* any_operator  */
  YYSYMBOL_c_expr_list = 987,              /* c_expr_list  */
  YYSYMBOL_c_expr_list_opt_comma = 988,    /* c_expr_list_opt_comma  */
  YYSYMBOL_expr_list = 989,                /* expr_list  */
  YYSYMBOL_expr_list_opt_comma = 990,      /* expr_list_opt_comma  */
  YYSYMBOL_opt_expr_list_opt_comma = 991,  /* opt_expr_list_opt_comma  */
  YYSYMBOL_func_arg_list = 992,            /* func_arg_list  */
  YYSYMBOL_func_arg_expr = 993,            /* func_arg_expr  */
  YYSYMBOL_type_list = 994,                /* type_list  */
  YYSYMBOL_extract_list = 995,             /* extract_list  */
  YYSYMBOL_extract_arg = 996,              /* extract_arg  */
  YYSYMBOL_overlay_list = 997,             /* overlay_list  */
  YYSYMBOL_overlay_placing = 998,          /* overlay_placing  */
  YYSYMBOL_position_list = 999,            /* position_list  */
  YYSYMBOL_substr_list = 1000,             /* substr_list  */
  YYSYMBOL_substr_from = 1001,             /* substr_from  */
  YYSYMBOL_substr_for = 1002,              /* substr_for  */
  YYSYMBOL_trim_list = 1003,               /* trim_list  */
  YYSYMBOL_in_expr = 1004,                 /* in_expr  */
  YYSYMBOL_case_expr = 1005,               /* case_expr  */
  YYSYMBOL_when_clause_list = 1006,        /* when_clause_list  */
  YYSYMBOL_when_clause = 1007,             /* when_clause  */
  YYSYMBOL_case_default = 1008,            /* case_default  */
  YYSYMBOL_case_arg = 1009,                /* case_arg  */
  YYSYMBOL_columnref = 1010,               /* columnref  */
  YYSYMBOL_opt_slice_bound = 1011,         /* opt_slice_bound  */
  YYSYMBOL_opt_indirection = 1012,         /* opt_indirection  */
  YYSYMBOL_opt_func_arguments = 1013,      /* opt_func_arguments  */
  YYSYMBOL_extended_indirection_el = 1014, /* extended_indirection_el  */
  YYSYMBOL_opt_extended_indirection = 1015, /* opt_extended_indirection  */
  YYSYMBOL_opt_asymmetric = 1016,          /* opt_asymmetric  */
  YYSYMBOL_opt_target_list_opt_comma = 1017, /* opt_target_list_opt_comma  */
  YYSYMBOL_target_list = 1018,             /* target_list  */
  YYSYMBOL_target_list_opt_comma = 1019,   /* target_list_opt_comma  */
  YYSYMBOL_target_el = 1020,               /* target_el  */
  YYSYMBOL_except_list = 1021,             /* except_list  */
  YYSYMBOL_opt_except_list = 1022,         /* opt_except_list  */
  YYSYMBOL_replace_list_el = 1023,         /* replace_list_el  */
  YYSYMBOL_replace_list = 1024,            /* replace_list  */
  YYSYMBOL_replace_list_opt_comma = 1025,  /* replace_list_opt_comma  */
  YYSYMBOL_opt_replace_list = 1026,        /* opt_replace_list  */
  YYSYMBOL_qualified_name_list = 1027,     /* qualified_name_list  */
  YYSYMBOL_name_list = 1028,               /* name_list  */
  YYSYMBOL_name_list_opt_comma = 1029,     /* name_list_opt_comma  */
  YYSYMBOL_name_list_opt_comma_opt_bracket = 1030, /* name_list_opt_comma_opt_bracket  */
  YYSYMBOL_name = 1031,                    /* name  */
  YYSYMBOL_func_name = 1032,               /* func_name  */
  YYSYMBOL_AexprConst = 1033,              /* AexprConst  */
  YYSYMBOL_Iconst = 1034,                  /* Iconst  */
  YYSYMBOL_type_function_name = 1035,      /* type_function_name  */
  YYSYMBOL_function_name_token = 1036,     /* function_name_token  */
  YYSYMBOL_type_name_token = 1037,         /* type_name_token  */
  YYSYMBOL_any_name = 1038,                /* any_name  */
  YYSYMBOL_attrs = 1039,                   /* attrs  */
  YYSYMBOL_opt_name_list = 1040,           /* opt_name_list  */
  YYSYMBOL_param_name = 1041,              /* param_name  */
  YYSYMBOL_ColLabelOrString = 1042,        /* ColLabelOrString  */
  YYSYMBOL_TransactionStmt = 1043,         /* TransactionStmt  */
  YYSYMBOL_opt_transaction = 1044,         /* opt_transaction  */
  YYSYMBOL_UpdateStmt = 1045,              /* UpdateStmt  */
  YYSYMBOL_UseStmt = 1046,                 /* UseStmt  */
  YYSYMBOL_VacuumStmt = 1047,              /* VacuumStmt  */
  YYSYMBOL_vacuum_option_elem = 1048,      /* vacuum_option_elem  */
  YYSYMBOL_opt_full = 1049,                /* opt_full  */
  YYSYMBOL_vacuum_option_list = 1050,      /* vacuum_option_list  */
  YYSYMBOL_opt_freeze = 1051,              /* opt_freeze  */
  YYSYMBOL_VariableResetStmt = 1052,       /* VariableResetStmt  */
  YYSYMBOL_generic_reset = 1053,           /* generic_reset  */
  YYSYMBOL_reset_rest = 1054,              /* reset_rest  */
  YYSYMBOL_VariableSetStmt = 1055,         /* VariableSetStmt  */
  YYSYMBOL_set_rest = 1056,                /* set_rest  */
  YYSYMBOL_generic_set = 1057,             /* generic_set  */
  YYSYMBOL_var_value = 1058,               /* var_value  */
  YYSYMBOL_zone_value = 1059,              /* zone_value  */
  YYSYMBOL_var_list = 1060,                /* var_list  */
  YYSYMBOL_VariableShowStmt = 1061,        /* VariableShowStmt  */
  YYSYMBOL_describe_or_desc = 1062,        /* describe_or_desc  */
  YYSYMBOL_show_or_describe = 1063,        /* show_or_describe  */
  YYSYMBOL_opt_tables = 1064,              /* opt_tables  */
  YYSYMBOL_var_name = 1065,                /* var_name  */
  YYSYMBOL_table_id = 1066,                /* table_id  */
  YYSYMBOL_ViewStmt = 1067,                /* ViewStmt  */
  YYSYMBOL_opt_check_option = 1068         /* opt_check_option  */
};
typedef enum yysymbol_kind_t yysymbol_kind_t;




#ifdef short
# undef short
#endif

/* On compilers that do not define __PTRDIFF_MAX__ etc., make sure
   <limits.h> and (if available) <stdint.h> are included
   so that the code can choose integer types of a good width.  */

#ifndef __PTRDIFF_MAX__
# include <limits.h> /* INFRINGES ON USER NAME SPACE */
# if defined __STDC_VERSION__ && 199901 <= __STDC_VERSION__
#  include <stdint.h> /* INFRINGES ON USER NAME SPACE */
#  define YY_STDINT_H
# endif
#endif

/* Narrow types that promote to a signed type and that can represent a
   signed or unsigned integer of at least N bits.  In tables they can
   save space and decrease cache pressure.  Promoting to a signed type
   helps avoid bugs in integer arithmetic.  */

#ifdef __INT_LEAST8_MAX__
typedef __INT_LEAST8_TYPE__ yytype_int8;
#elif defined YY_STDINT_H
typedef int_least8_t yytype_int8;
#else
typedef signed char yytype_int8;
#endif

#ifdef __INT_LEAST16_MAX__
typedef __INT_LEAST16_TYPE__ yytype_int16;
#elif defined YY_STDINT_H
typedef int_least16_t yytype_int16;
#else
typedef short yytype_int16;
#endif

/* Work around bug in HP-UX 11.23, which defines these macros
   incorrectly for preprocessor constants.  This workaround can likely
   be removed in 2023, as HPE has promised support for HP-UX 11.23
   (aka HP-UX 11i v2) only through the end of 2022; see Table 2 of
   <https://h20195.www2.hpe.com/V2/getpdf.aspx/4AA4-7673ENW.pdf>.  */
#ifdef __hpux
# undef UINT_LEAST8_MAX
# undef UINT_LEAST16_MAX
# define UINT_LEAST8_MAX 255
# define UINT_LEAST16_MAX 65535
#endif

#if defined __UINT_LEAST8_MAX__ && __UINT_LEAST8_MAX__ <= __INT_MAX__
typedef __UINT_LEAST8_TYPE__ yytype_uint8;
#elif (!defined __UINT_LEAST8_MAX__ && defined YY_STDINT_H \
       && UINT_LEAST8_MAX <= INT_MAX)
typedef uint_least8_t yytype_uint8;
#elif !defined __UINT_LEAST8_MAX__ && UCHAR_MAX <= INT_MAX
typedef unsigned char yytype_uint8;
#else
typedef short yytype_uint8;
#endif

#if defined __UINT_LEAST16_MAX__ && __UINT_LEAST16_MAX__ <= __INT_MAX__
typedef __UINT_LEAST16_TYPE__ yytype_uint16;
#elif (!defined __UINT_LEAST16_MAX__ && defined YY_STDINT_H \
       && UINT_LEAST16_MAX <= INT_MAX)
typedef uint_least16_t yytype_uint16;
#elif !defined __UINT_LEAST16_MAX__ && USHRT_MAX <= INT_MAX
typedef unsigned short yytype_uint16;
#else
typedef int yytype_uint16;
#endif

#ifndef YYPTRDIFF_T
# if defined __PTRDIFF_TYPE__ && defined __PTRDIFF_MAX__
#  define YYPTRDIFF_T __PTRDIFF_TYPE__
#  define YYPTRDIFF_MAXIMUM __PTRDIFF_MAX__
# elif defined PTRDIFF_MAX
#  ifndef ptrdiff_t
#   include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  endif
#  define YYPTRDIFF_T ptrdiff_t
#  define YYPTRDIFF_MAXIMUM PTRDIFF_MAX
# else
#  define YYPTRDIFF_T long
#  define YYPTRDIFF_MAXIMUM LONG_MAX
# endif
#endif

#ifndef YYSIZE_T
# ifdef __SIZE_TYPE__
#  define YYSIZE_T __SIZE_TYPE__
# elif defined size_t
#  define YYSIZE_T size_t
# elif defined __STDC_VERSION__ && 199901 <= __STDC_VERSION__
#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  define YYSIZE_T size_t
# else
#  define YYSIZE_T unsigned
# endif
#endif

#define YYSIZE_MAXIMUM                                  \
  YY_CAST (YYPTRDIFF_T,                                 \
           (YYPTRDIFF_MAXIMUM < YY_CAST (YYSIZE_T, -1)  \
            ? YYPTRDIFF_MAXIMUM                         \
            : YY_CAST (YYSIZE_T, -1)))

#define YYSIZEOF(X) YY_CAST (YYPTRDIFF_T, sizeof (X))


/* Stored state numbers (used for stacks). */
typedef yytype_int16 yy_state_t;

/* State numbers in computations.  */
typedef int yy_state_fast_t;

#ifndef YY_
# if defined YYENABLE_NLS && YYENABLE_NLS
#  if ENABLE_NLS
#   include <libintl.h> /* INFRINGES ON USER NAME SPACE */
#   define YY_(Msgid) dgettext ("bison-runtime", Msgid)
#  endif
# endif
# ifndef YY_
#  define YY_(Msgid) Msgid
# endif
#endif


#ifndef YY_ATTRIBUTE_PURE
# if defined __GNUC__ && 2 < __GNUC__ + (96 <= __GNUC_MINOR__)
#  define YY_ATTRIBUTE_PURE __attribute__ ((__pure__))
# else
#  define YY_ATTRIBUTE_PURE
# endif
#endif

#ifndef YY_ATTRIBUTE_UNUSED
# if defined __GNUC__ && 2 < __GNUC__ + (7 <= __GNUC_MINOR__)
#  define YY_ATTRIBUTE_UNUSED __attribute__ ((__unused__))
# else
#  define YY_ATTRIBUTE_UNUSED
# endif
#endif

/* Suppress unused-variable warnings by "using" E.  */
#if ! defined lint || defined __GNUC__
# define YY_USE(E) ((void) (E))
#else
# define YY_USE(E) /* empty */
#endif

/* Suppress an incorrect diagnostic about yylval being uninitialized.  */
#if defined __GNUC__ && ! defined __ICC && 406 <= __GNUC__ * 100 + __GNUC_MINOR__
# if __GNUC__ * 100 + __GNUC_MINOR__ < 407
#  define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN                           \
    _Pragma ("GCC diagnostic push")                                     \
    _Pragma ("GCC diagnostic ignored \"-Wuninitialized\"")
# else
#  define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN                           \
    _Pragma ("GCC diagnostic push")                                     \
    _Pragma ("GCC diagnostic ignored \"-Wuninitialized\"")              \
    _Pragma ("GCC diagnostic ignored \"-Wmaybe-uninitialized\"")
# endif
# define YY_IGNORE_MAYBE_UNINITIALIZED_END      \
    _Pragma ("GCC diagnostic pop")
#else
# define YY_INITIAL_VALUE(Value) Value
#endif
#ifndef YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_END
#endif
#ifndef YY_INITIAL_VALUE
# define YY_INITIAL_VALUE(Value) /* Nothing. */
#endif

#if defined __cplusplus && defined __GNUC__ && ! defined __ICC && 6 <= __GNUC__
# define YY_IGNORE_USELESS_CAST_BEGIN                          \
    _Pragma ("GCC diagnostic push")                            \
    _Pragma ("GCC diagnostic ignored \"-Wuseless-cast\"")
# define YY_IGNORE_USELESS_CAST_END            \
    _Pragma ("GCC diagnostic pop")
#endif
#ifndef YY_IGNORE_USELESS_CAST_BEGIN
# define YY_IGNORE_USELESS_CAST_BEGIN
# define YY_IGNORE_USELESS_CAST_END
#endif


#define YY_ASSERT(E) ((void) (0 && (E)))

#if !defined yyoverflow

/* The parser invokes alloca or malloc; define the necessary symbols.  */

# ifdef YYSTACK_USE_ALLOCA
#  if YYSTACK_USE_ALLOCA
#   ifdef __GNUC__
#    define YYSTACK_ALLOC __builtin_alloca
#   elif defined __BUILTIN_VA_ARG_INCR
#    include <alloca.h> /* INFRINGES ON USER NAME SPACE */
#   elif defined _AIX
#    define YYSTACK_ALLOC __alloca
#   elif defined _MSC_VER
#    include <malloc.h> /* INFRINGES ON USER NAME SPACE */
#    define alloca _alloca
#   else
#    define YYSTACK_ALLOC alloca
#    if ! defined _ALLOCA_H && ! defined EXIT_SUCCESS
#     include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
      /* Use EXIT_SUCCESS as a witness for stdlib.h.  */
#     ifndef EXIT_SUCCESS
#      define EXIT_SUCCESS 0
#     endif
#    endif
#   endif
#  endif
# endif

# ifdef YYSTACK_ALLOC
   /* Pacify GCC's 'empty if-body' warning.  */
#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (0)
#  ifndef YYSTACK_ALLOC_MAXIMUM
    /* The OS might guarantee only one guard page at the bottom of the stack,
       and a page size can be as small as 4096 bytes.  So we cannot safely
       invoke alloca (N) if N exceeds 4096.  Use a slightly smaller number
       to allow for a few compiler-allocated temporary stack slots.  */
#   define YYSTACK_ALLOC_MAXIMUM 4032 /* reasonable circa 2006 */
#  endif
# else
#  define YYSTACK_ALLOC YYMALLOC
#  define YYSTACK_FREE YYFREE
#  ifndef YYSTACK_ALLOC_MAXIMUM
#   define YYSTACK_ALLOC_MAXIMUM YYSIZE_MAXIMUM
#  endif
#  if (defined __cplusplus && ! defined EXIT_SUCCESS \
       && ! ((defined YYMALLOC || defined malloc) \
             && (defined YYFREE || defined free)))
#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#   ifndef EXIT_SUCCESS
#    define EXIT_SUCCESS 0
#   endif
#  endif
#  ifndef YYMALLOC
#   define YYMALLOC malloc
#   if ! defined malloc && ! defined EXIT_SUCCESS
void *malloc (YYSIZE_T); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
#  ifndef YYFREE
#   define YYFREE free
#   if ! defined free && ! defined EXIT_SUCCESS
void free (void *); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
# endif
#endif /* !defined yyoverflow */

#if (! defined yyoverflow \
     && (! defined __cplusplus \
         || (defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL \
             && defined YYSTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))

/* A type that is properly aligned for any stack member.  */
union yyalloc
{
  yy_state_t yyss_alloc;
  YYSTYPE yyvs_alloc;
  YYLTYPE yyls_alloc;
};

/* The size of the maximum gap between one aligned stack and the next.  */
# define YYSTACK_GAP_MAXIMUM (YYSIZEOF (union yyalloc) - 1)

/* The size of an array large to enough to hold all stacks, each with
   N elements.  */
# define YYSTACK_BYTES(N) \
     ((N) * (YYSIZEOF (yy_state_t) + YYSIZEOF (YYSTYPE) \
             + YYSIZEOF (YYLTYPE)) \
      + 2 * YYSTACK_GAP_MAXIMUM)

# define YYCOPY_NEEDED 1

/* Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */
# define YYSTACK_RELOCATE(Stack_alloc, Stack)                           \
    do                                                                  \
      {                                                                 \
        YYPTRDIFF_T yynewbytes;                                         \
        YYCOPY (&yyptr->Stack_alloc, Stack, yysize);                    \
        Stack = &yyptr->Stack_alloc;                                    \
        yynewbytes = yystacksize * YYSIZEOF (*Stack) + YYSTACK_GAP_MAXIMUM; \
        yyptr += yynewbytes / YYSIZEOF (*yyptr);                        \
      }                                                                 \
    while (0)

#endif

#if defined YYCOPY_NEEDED && YYCOPY_NEEDED
/* Copy COUNT objects from SRC to DST.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if defined __GNUC__ && 1 < __GNUC__
#   define YYCOPY(Dst, Src, Count) \
      __builtin_memcpy (Dst, Src, YY_CAST (YYSIZE_T, (Count)) * sizeof (*(Src)))
#  else
#   define YYCOPY(Dst, Src, Count)              \
      do                                        \
        {                                       \
          YYPTRDIFF_T yyi;                      \
          for (yyi = 0; yyi < (Count); yyi++)   \
            (Dst)[yyi] = (Src)[yyi];            \
        }                                       \
      while (0)
#  endif
# endif
#endif /* !YYCOPY_NEEDED */

/* YYFINAL -- State number of the termination state.  */
#define YYFINAL  953
/* YYLAST -- Last index in YYTABLE.  */
#define YYLAST   80686

/* YYNTOKENS -- Number of terminals.  */
#define YYNTOKENS  547
/* YYNNTS -- Number of nonterminals.  */
#define YYNNTS  522
/* YYNRULES -- Number of rules.  */
#define YYNRULES  2387
/* YYNSTATES -- Number of states.  */
#define YYNSTATES  3978

/* YYMAXUTOK -- Last valid token kind.  */
#define YYMAXUTOK   776


/* YYTRANSLATE(TOKEN-NUM) -- Symbol number corresponding to TOKEN-NUM
   as returned by yylex, with out-of-bounds checking.  */
#define YYTRANSLATE(YYX)                                \
  (0 <= (YYX) && (YYX) <= YYMAXUTOK                     \
   ? YY_CAST (yysymbol_kind_t, yytranslate[YYX])        \
   : YYSYMBOL_YYUNDEF)

/* YYTRANSLATE[TOKEN-NUM] -- Symbol number corresponding to TOKEN-NUM
   as returned by yylex.  */
static const yytype_int16 yytranslate[] =
{
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   543,     2,   545,   546,   528,   542,     2,
     533,   534,   526,   524,   537,   525,   535,   527,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,   544,   536,
     520,   522,   521,   539,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,   531,     2,   532,   529,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   540,   538,   541,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
     125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
     135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,   163,   164,
     165,   166,   167,   168,   169,   170,   171,   172,   173,   174,
     175,   176,   177,   178,   179,   180,   181,   182,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,   196,   197,   198,   199,   200,   201,   202,   203,   204,
     205,   206,   207,   208,   209,   210,   211,   212,   213,   214,
     215,   216,   217,   218,   219,   220,   221,   222,   223,   224,
     225,   226,   227,   228,   229,   230,   231,   232,   233,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,   517,   518,   519,   523,   530
};

#if YYDEBUG
/* YYRLINE[YYN] -- Source line where rule number YYN was defined.  */
static const yytype_int16 yyrline[] =
{
       0,   562,   562,   578,   590,   599,   600,   601,   602,   603,
     604,   605,   606,   607,   608,   609,   610,   611,   612,   613,
     614,   615,   616,   617,   618,   619,   620,   621,   622,   623,
     624,   625,   626,   627,   628,   629,   630,   631,   632,   633,
     634,   635,   636,   637,   638,   639,   640,   641,   643,     9,
      18,    27,    36,    45,    54,    63,    72,    85,    87,    93,
      94,    99,   103,   107,   118,   126,   130,   139,   148,   157,
     166,   175,   184,   192,   200,   209,   218,   227,   236,   253,
     262,   271,   280,   290,   303,   318,   327,   335,   350,   358,
     368,   378,   385,   392,   400,   407,   418,   419,   424,   428,
     433,   438,   446,   447,   452,   456,   457,   458,     7,    13,
      19,    25,     9,    13,    44,    45,    46,    47,    51,    52,
      56,    60,    61,    65,    71,    76,    77,    78,    79,    80,
       6,    15,    25,    35,    45,    55,    65,    75,    85,    95,
     106,   117,   127,   140,   141,     9,    23,    29,    36,    42,
      49,    59,    63,    71,    72,    73,    77,    86,    95,   102,
     103,   108,   120,   125,   150,   155,   160,   166,   176,   186,
     192,   203,   214,   229,   230,   236,   237,   242,   243,   249,
     250,   254,   255,   260,   262,   268,   269,   273,   274,   277,
     278,   283,     7,    16,    25,    46,    47,    50,    54,     7,
      14,    22,     9,    19,    29,    42,    43,     7,    17,    27,
      40,    41,    45,    46,    47,    51,    52,     7,    14,    31,
      51,    55,    65,    69,    75,    76,     9,    17,    29,    30,
      34,    35,    36,    41,    42,    43,    48,    52,    56,    60,
      64,    68,    72,    76,    80,    84,    88,    92,    97,   101,
     105,   112,   113,   117,   118,   119,     7,    16,    28,    29,
       2,     9,    15,    21,    28,    35,    45,    46,    47,     2,
      40,    41,    42,    50,    64,    66,    70,    72,    76,    78,
      82,    95,   110,   113,   117,   121,   125,   129,   130,   134,
     135,   139,   148,   158,   172,   175,   179,   202,   203,   208,
     210,   214,   216,   220,   222,   227,   230,   234,   240,   244,
     246,   249,   258,   260,   264,   266,   270,   273,   281,   318,
     320,   324,   324,   324,   328,   330,   332,   336,   338,   342,
     344,   346,   348,   350,   354,   356,   360,   372,   384,   396,
     408,   421,   435,   437,   442,   467,   469,   473,   475,   480,
     489,   498,   507,   517,   527,   529,   533,   535,   539,   550,
     559,   571,   580,   582,   586,   609,   611,   615,   617,   628,
     630,   641,   643,   654,   656,   665,   676,   684,   693,   697,
     699,   703,   705,   711,   713,   715,   719,   721,   725,   731,
     739,   741,   745,   756,   772,   799,   832,   833,   835,   843,
     858,   860,   862,   864,   866,   868,   870,   872,   874,   876,
     878,   880,   882,   884,   886,   889,   891,   893,   895,   897,
     899,   904,   909,   916,   921,   928,   933,   940,   945,   953,
     961,   969,   977,   995,  1003,  1011,  1019,  1027,  1035,  1043,
    1047,  1063,  1071,  1079,  1087,  1095,  1103,  1111,  1115,  1119,
    1123,  1127,  1135,  1143,  1151,  1159,  1179,     7,    21,    36,
      56,    57,    84,    85,    86,    87,    88,    89,    93,    94,
      99,   104,   105,   106,   107,   108,   113,   120,   121,   122,
     139,   146,   153,   163,   173,   185,   193,   202,   220,   221,
     225,   226,   230,   239,   262,   276,   283,   288,   290,   292,
     294,   297,   300,   301,   302,   303,   308,   312,   313,   318,
     325,   330,   331,   332,   333,   334,   335,   336,   337,   343,
     344,   348,   353,   360,   367,   374,   386,   387,   388,   389,
     393,   398,   399,   400,   405,   410,   411,   412,   413,   414,
     415,   420,   440,   469,   470,   474,   478,   479,   480,   484,
     488,   496,   497,   502,   503,   504,   508,   516,   517,   522,
     523,   527,   532,   536,   540,   545,   553,   554,   558,   559,
     563,   564,   570,   581,   594,   608,   622,   636,   650,   673,
     677,   684,   688,   696,   701,   708,   718,   719,   720,   721,
     722,   729,   736,   737,   742,   743,     9,    19,    29,    39,
      49,    59,    73,    74,    75,    76,    77,    78,    79,    80,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      95,    96,    97,    98,    99,   100,   105,   106,   111,   112,
     113,   118,   119,   120,     8,    20,    33,    46,    58,    70,
      86,    87,    91,    95,     7,     1,    30,    49,    61,    62,
      63,    67,    68,    73,    77,    82,    86,    94,    95,    99,
     100,   105,   106,   110,   111,   116,   117,   118,   119,   120,
     121,   126,   134,   138,   143,   144,   149,   153,   158,   162,
     166,   170,   174,   178,   182,   186,   190,   194,   198,   202,
     206,   210,   214,   218,   226,   231,   232,   233,   234,   235,
     241,   245,    47,    48,    52,    53,    54,    72,    73,    80,
      88,    96,   104,   112,   120,   131,   132,   159,   164,   172,
     188,   205,   222,   239,   240,   259,   263,   267,   271,   275,
     285,   296,   306,   315,   326,   337,   349,   364,   382,   382,
     386,   386,   390,   390,   394,   400,   407,   411,   412,   416,
     417,   431,   438,   445,   455,   456,   459,   472,   473,   474,
     478,   489,   497,   502,   507,   512,   517,   525,   533,   538,
     543,   550,   551,   555,   556,   557,   561,   568,   569,   573,
     574,   578,   579,   580,   584,   585,   589,   590,   606,   607,
     610,   619,   630,   631,   632,   635,   636,   637,   641,   642,
     643,   644,   648,   649,   653,   655,   671,   673,   678,   681,
     689,   693,   697,   701,   705,   709,   716,   721,   728,   729,
     733,   738,   742,   746,   754,   761,   762,   767,   768,   772,
     773,   778,   780,   782,   787,   807,   808,   810,   815,   816,
     820,   821,   824,   825,   850,   851,   856,   860,   861,   865,
     866,   870,   871,   872,   873,   874,   878,   891,   898,   905,
     912,   913,   917,   918,   922,   923,   927,   928,   932,   933,
     937,   938,   942,   953,   954,   955,   956,   960,   961,   966,
     967,   968,   977,   983,   992,   993,  1006,  1007,  1011,  1012,
    1016,  1017,  1023,  1029,  1037,  1046,  1054,  1063,  1072,  1076,
    1081,  1085,  1096,  1110,  1111,  1114,  1115,  1116,  1119,  1127,
    1136,  1137,  1138,  1139,  1142,  1150,  1159,  1163,  1170,  1171,
    1175,  1184,  1188,  1213,  1217,  1230,  1244,  1259,  1271,  1284,
    1298,  1312,  1325,  1340,  1359,  1365,  1370,  1376,  1383,  1384,
    1392,  1396,  1400,  1406,  1413,  1418,  1419,  1420,  1421,  1422,
    1423,  1427,  1428,  1440,  1441,  1446,  1453,  1460,  1467,  1499,
    1510,  1523,  1528,  1529,  1532,  1533,  1536,  1537,  1542,  1543,
    1548,  1552,  1558,  1579,  1587,  1600,  1603,  1607,  1607,  1610,
    1611,  1613,  1618,  1625,  1630,  1636,  1641,  1647,  1651,  1658,
    1665,  1675,  1676,  1680,  1682,  1685,  1689,  1690,  1691,  1692,
    1693,  1694,  1699,  1719,  1720,  1721,  1722,  1733,  1747,  1748,
    1754,  1759,  1764,  1769,  1774,  1779,  1784,  1789,  1795,  1801,
    1807,  1814,  1836,  1845,  1849,  1857,  1861,  1869,  1881,  1902,
    1906,  1912,  1916,  1929,  1937,  1947,  1949,  1951,  1953,  1955,
    1957,  1962,  1963,  1970,  1979,  1987,  1996,  2007,  2015,  2016,
    2017,  2021,  2021,  2024,  2024,  2027,  2027,  2030,  2030,  2033,
    2033,  2036,  2036,  2039,  2039,  2042,  2042,  2045,  2045,  2048,
    2048,  2051,  2051,  2054,  2054,  2057,  2059,  2061,  2063,  2065,
    2067,  2069,  2071,  2073,  2075,  2077,  2079,  2081,  2086,  2091,
    2097,  2104,  2109,  2115,  2121,  2152,  2154,  2156,  2164,  2179,
    2181,  2183,  2185,  2187,  2189,  2191,  2193,  2195,  2197,  2199,
    2201,  2203,  2205,  2207,  2209,  2212,  2214,  2216,  2219,  2221,
    2223,  2225,  2227,  2232,  2237,  2244,  2249,  2256,  2261,  2268,
    2273,  2281,  2289,  2297,  2305,  2323,  2331,  2339,  2347,  2355,
    2363,  2371,  2375,  2391,  2399,  2407,  2415,  2423,  2431,  2439,
    2443,  2447,  2451,  2455,  2463,  2471,  2479,  2487,  2507,  2529,
    2540,  2547,  2561,  2569,  2577,  2597,  2599,  2601,  2603,  2605,
    2607,  2609,  2611,  2613,  2615,  2617,  2619,  2621,  2623,  2625,
    2627,  2629,  2631,  2633,  2635,  2637,  2639,  2643,  2647,  2651,
    2665,  2666,  2680,  2681,  2682,  2693,  2717,  2728,  2738,  2742,
    2746,  2753,  2757,  2764,  2768,  2785,  2789,  2791,  2795,  2798,
    2809,  2814,  2821,  2829,  2838,  2842,  2849,  2857,  2865,  2876,
    2896,  2932,  2943,  2944,  2951,  2957,  2959,  2961,  2965,  2974,
    2979,  2986,  3001,  3008,  3012,  3016,  3020,  3024,  3034,  3043,
    3065,  3066,  3070,  3071,  3072,  3076,  3077,  3084,  3085,  3089,
    3090,  3095,  3103,  3105,  3119,  3122,  3149,  3150,  3153,  3154,
    3162,  3170,  3178,  3187,  3197,  3215,  3261,  3270,  3279,  3288,
    3297,  3309,  3310,  3311,  3312,  3313,  3327,  3328,  3331,  3332,
    3337,  3347,  3348,  3352,  3353,  3357,  3364,  3365,  3370,  3371,
    3376,  3377,  3380,  3381,  3382,  3385,  3386,  3389,  3390,  3391,
    3392,  3393,  3394,  3395,  3396,  3397,  3398,  3399,  3400,  3401,
    3402,  3405,  3407,  3412,  3414,  3419,  3421,  3423,  3425,  3427,
    3429,  3431,  3433,  3447,  3449,  3454,  3458,  3465,  3470,  3476,
    3480,  3487,  3492,  3499,  3504,  3512,  3516,  3522,  3526,  3535,
    3546,  3547,  3551,  3555,  3562,  3563,  3564,  3565,  3566,  3567,
    3568,  3569,  3570,  3571,  3572,  3573,  3574,  3575,  3585,  3589,
    3596,  3603,  3604,  3620,  3624,  3629,  3633,  3648,  3653,  3657,
    3660,  3663,  3664,  3665,  3668,  3675,  3685,  3699,  3700,  3704,
    3715,  3716,  3719,  3720,  3723,  3727,  3734,  3742,  3750,  3758,
    3768,  3769,  3774,  3775,  3779,  3780,  3781,  3785,  3794,  3802,
    3810,  3819,  3834,  3835,  3840,  3841,  3851,  3852,  3856,  3857,
    3861,  3862,  3865,  3881,  3889,  3899,  3900,  3903,  3904,  3907,
    3911,  3912,  3916,  3917,  3920,  3921,  3922,  3932,  3933,  3937,
    3939,  3945,  3946,  3950,  3951,  3954,  3965,  3968,  3979,  3983,
    3987,  3999,  4003,  4012,  4019,  4057,  4061,  4065,  4069,  4073,
    4077,  4081,  4087,  4104,  4105,  4106,  4107,  4111,  4112,  4113,
    4114,  4118,  4119,  4120,  4121,  4125,  4126,  4129,  4131,  4136,
    4137,  4140,  4144,  4145,     7,    18,    19,    23,    24,    25,
      26,    27,    28,     7,    26,    50,    73,    80,    85,    86,
      87,    88,     8,    33,    62,    66,    67,    72,    73,    78,
      79,    83,    84,    89,    90,     7,    16,    25,    34,    43,
      52,     5,    12,    22,    23,     7,    15,    26,    27,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,     7,
      19,    33,     9,    16,    26,    33,    44,    45,    50,    51,
      52,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    90,    91,    92,    93,    98,    99,   104,   108,   116,
     117,   122,   123,   124,   130,   135,   143,   144,    10,    16,
      22,    28,    38,    39,    47,    58,    70,    78,    89,    95,
      99,   103,   118,   125,   126,   127,   131,   132,     7,    15,
      22,    29,    36,    45,    46,    48,    49,     8,    22,    36,
      48,    56,    70,    71,    72,    73,    74,    87,    88,    93,
      94,    98,    99,     7,    18,    31,    35,    42,    53,    54,
      60,    61,     9,    19,     7,    16,    28,    35,    42,    51,
      52,    56,    57,     2,     7,    12,    17,    26,    33,    43,
      44,    51,     3,    10,    17,    24,    31,    38,    45,    52,
      61,    61,    63,    63,    65,    65,    67,    68,    72,    73,
       6,     8,    21,    34,    47,    65,    87,    88,    89,    90,
      11,    24,    37,    54,    55,    56,    61,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    75,    75,    75,    75,    75,    75,
      75,    75,    75,    75,    75,    75,    75,    75,    75,    75,
      75,    75,    75,    75,    75,    75,    75,    75,    75,    75,
      75,    75,    75,    75,    75,    75,    75,    75,    75,    75,
      75,    75,    75,    75,    75,    75,    75,    75,    75,    75,
      75,    75,    75,    75,    75,    75,    75,    75,    76,    76,
      76,    76,    76,    76,    76,    76,    76,    76,    76,    76,
      76,    76,    76,    76,    76,    76,    76,    76,    76,    76,
      76,    76,    76,    76,    76,    76,    77,    77,    77,    77,
      77,    77,    77,    77,    77,    77,    77,    77,    77,    77,
      77,    77,    77,    77,    77,    77,    77,    77,    77,    77,
      77,    77,    77,    77,    77,    78,    78,    78,    78,    78,
      78,    78,    78,    78,    78,    78,    78,    78,    78,    78,
      78,    78,    78,    78,    78,    78,    78,    78,    78,    78,
      78,    78,    78,    78,    78,    78,    78,    78,    78,    78,
      78,    78,    78,    78,    78,    78,    78,    78,    78,    78,
      78,    78,    78,    78,    78,    78,    78,    78,    78,    78,
      78,    78,    78,    78,    78,    78,    78,    78,    78,    78,
      78,    78,    78,    78,    78,    78,    78,    78,    78,    78,
      78,    78,    78,    78,    78,    78,    79,    79,    79,    79,
      79,    79,    79,    79,    79,    79,    79,    79,    79,    79,
      79,    79,    79,    79,    79,    79,    79,    79,    79,    79,
      79,    79,    79,    79,    79,    79,    79,    79,    80,    80,
      80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
      80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
      80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
      80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
      80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
      80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
      80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
      80,    80,    80,    80,    81,    81,    81,    81,    81,    81,
      81,    81,    81,    81,    81,    81,    81,    81,    81,    81,
      81,    81,    81,    81,    81,    82,    82,    82,    82,    82,
      82,    82,    82,    82,    82,    82,    82,    82,    82,    82,
      82,    82,    82,    82,    82,    82,    82,    82,    82,    82,
      82,    82,    82,    82,    82,    82,    82,    82,    82,    82,
      82,    82,    82,    82,    82,    82,    82,    82,    82,    82,
      82,    82,    82,    82,    82,    82,    82,    82
};
#endif

/** Accessing symbol of state STATE.  */
#define YY_ACCESSING_SYMBOL(State) YY_CAST (yysymbol_kind_t, yystos[State])

#if YYDEBUG || 0
/* The user-facing name of the symbol whose (internal) number is
   YYSYMBOL.  No bounds checking.  */
static const char *yysymbol_name (yysymbol_kind_t yysymbol) YY_ATTRIBUTE_UNUSED;

/* YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
   First, the terminals, then, starting at YYNTOKENS, nonterminals.  */
static const char *const yytname[] =
{
  "\"end of file\"", "error", "\"invalid token\"", "IDENT", "FCONST",
  "SCONST", "BCONST", "XCONST", "Op", "ICONST", "PARAM", "TYPECAST",
  "DOT_DOT", "COLON_EQUALS", "EQUALS_GREATER", "INTEGER_DIVISION",
  "POWER_OF", "LAMBDA_ARROW", "DOUBLE_ARROW", "LESS_EQUALS",
  "GREATER_EQUALS", "NOT_EQUALS", "ABORT_P", "ABSOLUTE_P", "ACCESS",
  "ACTION", "ACYCLIC", "ADD_P", "ADMIN", "AFTER", "AGGREGATE", "ALL",
  "ALSO", "ALTER", "ALWAYS", "ANALYSE", "ANALYZE", "AND", "ANTI", "ANY",
  "ARE", "ARRAY", "AS", "ASC_P", "ASOF", "ASSERTION", "ASSIGNMENT",
  "ASYMMETRIC", "AT", "ATTACH", "ATTRIBUTE", "AUTHORIZATION", "BACKWARD",
  "BEFORE", "BEGIN_P", "BETWEEN", "BIGINT", "BINARY", "BIT", "BOOLEAN_P",
  "BOTH", "BY", "CACHE", "CALL_P", "CALLED", "CASCADE", "CASCADED", "CASE",
  "CAST", "CATALOG_P", "CENTURIES_P", "CENTURY_P", "CHAIN", "CHAR_P",
  "CHARACTER", "CHARACTERISTICS", "CHECK_P", "CHECKPOINT", "CLASS",
  "CLOSE", "CLUSTER", "COALESCE", "COLLATE", "COLLATION", "COLUMN",
  "COLUMNS", "COMMENT", "COMMENTS", "COMMIT", "COMMITTED", "COMPRESSION",
  "CONCURRENTLY", "CONFIGURATION", "CONFLICT", "CONNECTION", "CONSTRAINT",
  "CONSTRAINTS", "CONTENT_P", "CONTINUE_P", "CONVERSION_P", "COPY", "COST",
  "CREATE_P", "CROSS", "CSV", "CUBE", "CURRENT_P", "CURSOR", "CYCLE",
  "DATA_P", "DATABASE", "DAY_P", "DAYS_P", "DEALLOCATE", "DEC", "DECADE_P",
  "DECADES_P", "DECIMAL_P", "DECLARE", "DEFAULT", "DEFAULTS", "DEFERRABLE",
  "DEFERRED", "DEFINER", "DELETE_P", "DELIMITER", "DELIMITERS", "DEPENDS",
  "DESC_P", "DESCRIBE", "DESTINATION", "DETACH", "DICTIONARY", "DISABLE_P",
  "DISCARD", "DISTINCT", "DO", "DOCUMENT_P", "DOMAIN_P", "DOUBLE_P",
  "DROP", "EACH", "EDGE", "ELEMENT_ID", "ELSE", "ENABLE_P", "ENCODING",
  "ENCRYPTED", "END_P", "ENUM_P", "ESCAPE", "EVENT", "EXCEPT", "EXCLUDE",
  "EXCLUDING", "EXCLUSIVE", "EXECUTE", "EXISTS", "EXPLAIN", "EXPORT_P",
  "EXPORT_STATE", "EXTENSION", "EXTERNAL", "EXTRACT", "FALSE_P", "FAMILY",
  "FETCH", "FILTER", "FIRST_P", "FLOAT_P", "FOLLOWING", "FOR", "FORCE",
  "FOREIGN", "FORWARD", "FREEZE", "FROM", "FULL", "FUNCTION", "FUNCTIONS",
  "GENERATED", "GLOB", "GLOBAL", "GRANT", "GRANTED", "GRAPH",
  "GRAPH_TABLE", "GROUP_P", "GROUPING", "GROUPING_ID", "GROUPS", "HANDLER",
  "HAVING", "HEADER_P", "HOLD", "HOUR_P", "HOURS_P", "IDENTITY_P", "IF_P",
  "IGNORE_P", "ILIKE", "IMMEDIATE", "IMMUTABLE", "IMPLICIT_P", "IMPORT_P",
  "IN_P", "INCLUDE_P", "INCLUDING", "INCREMENT", "INDEX", "INDEXES",
  "INHERIT", "INHERITS", "INITIALLY", "INLINE_P", "INNER_P", "INOUT",
  "INPUT_P", "INSENSITIVE", "INSERT", "INSTALL", "INSTEAD", "INT_P",
  "INTEGER", "INTERSECT", "INTERVAL", "INTO", "INVOKER", "IS", "ISNULL",
  "ISOLATION", "JOIN", "JSON", "KEEP", "KEY", "LABEL", "LANGUAGE",
  "LARGE_P", "LAST_P", "LATERAL_P", "LEADING", "LEAKPROOF", "LEFT",
  "LEVEL", "LIKE", "LIMIT", "LISTEN", "LOAD", "LOCAL", "LOCATION",
  "LOCK_P", "LOCKED", "LOGGED", "MACRO", "MAP", "MAPPING", "MATCH",
  "MATERIALIZED", "MAXVALUE", "METHOD", "MICROSECOND_P", "MICROSECONDS_P",
  "MILLENNIA_P", "MILLENNIUM_P", "MILLISECOND_P", "MILLISECONDS_P",
  "MINUTE_P", "MINUTES_P", "MINVALUE", "MODE", "MONTH_P", "MONTHS_P",
  "MOVE", "NAME_P", "NAMES", "NATIONAL", "NATURAL", "NCHAR", "NEW", "NEXT",
  "NO", "NODE", "NONE", "NOT", "NOTHING", "NOTIFY", "NOTNULL", "NOWAIT",
  "NULL_P", "NULLIF", "NULLS_P", "NUMERIC", "OBJECT_P", "OF", "OFF",
  "OFFSET", "OIDS", "OLD", "ON", "ONLY", "OPERATOR", "OPTION", "OPTIONS",
  "OR", "ORDER", "ORDINALITY", "OTHERS", "OUT_P", "OUTER_P", "OVER",
  "OVERLAPS", "OVERLAY", "OVERRIDING", "OWNED", "OWNER", "PARALLEL",
  "PARSER", "PARTIAL", "PARTITION", "PASSING", "PASSWORD", "PATH", "PATHS",
  "PERCENT", "PERSISTENT", "PIVOT", "PIVOT_LONGER", "PIVOT_WIDER",
  "PLACING", "PLANS", "POLICY", "POSITION", "POSITIONAL", "PRAGMA_P",
  "PRECEDING", "PRECISION", "PREPARE", "PREPARED", "PRESERVE", "PRIMARY",
  "PRIOR", "PRIVILEGES", "PROCEDURAL", "PROCEDURE", "PROGRAM",
  "PROPERTIES", "PROPERTY", "PUBLICATION", "QUALIFY", "QUOTE", "RANGE",
  "READ_P", "REAL", "REASSIGN", "RECHECK", "RECURSIVE", "REF",
  "REFERENCES", "REFERENCING", "REFRESH", "REINDEX", "RELATIONSHIP",
  "RELATIVE_P", "RELEASE", "RENAME", "REPEATABLE", "REPLACE", "REPLICA",
  "RESET", "RESPECT_P", "RESTART", "RESTRICT", "RETURNING", "RETURNS",
  "REVOKE", "RIGHT", "ROLE", "ROLLBACK", "ROLLUP", "ROW", "ROWS", "RULE",
  "SAMPLE", "SAVEPOINT", "SCHEMA", "SCHEMAS", "SCOPE", "SCROLL", "SEARCH",
  "SECOND_P", "SECONDS_P", "SECRET", "SECURITY", "SELECT", "SEMI",
  "SEQUENCE", "SEQUENCES", "SERIALIZABLE", "SERVER", "SESSION", "SET",
  "SETOF", "SETS", "SHARE", "SHORTEST", "SHOW", "SIMILAR", "SIMPLE",
  "SKIP", "SMALLINT", "SNAPSHOT", "SOME", "SOURCE", "SQL_P", "STABLE",
  "STANDALONE_P", "START", "STATEMENT", "STATISTICS", "STDIN", "STDOUT",
  "STORAGE", "STORED", "STRICT_P", "STRIP_P", "STRUCT", "SUBSCRIPTION",
  "SUBSTRING", "SUMMARIZE", "SYMMETRIC", "SYSID", "SYSTEM_P", "TABLE",
  "TABLES", "TABLESAMPLE", "TABLESPACE", "TEMP", "TEMPLATE", "TEMPORARY",
  "TEXT_P", "THEN", "TIES", "TIME", "TIMESTAMP", "TO", "TRAIL", "TRAILING",
  "TRANSACTION", "TRANSFORM", "TREAT", "TRIGGER", "TRIM", "TRUE_P",
  "TRUNCATE", "TRUSTED", "TRY_CAST", "TYPE_P", "TYPES_P", "UNBOUNDED",
  "UNCOMMITTED", "UNENCRYPTED", "UNION", "UNIQUE", "UNKNOWN", "UNLISTEN",
  "UNLOGGED", "UNPIVOT", "UNTIL", "UPDATE", "USE_P", "USER", "USING",
  "VACUUM", "VALID", "VALIDATE", "VALIDATOR", "VALUE_P", "VALUES",
  "VARCHAR", "VARIADIC", "VARYING", "VERBOSE", "VERSION_P", "VERTEX",
  "VIEW", "VIEWS", "VIRTUAL", "VOLATILE", "WALK", "WEEK_P", "WEEKS_P",
  "WHEN", "WHERE", "WHITESPACE_P", "WINDOW", "WITH", "WITHIN", "WITHOUT",
  "WORK", "WRAPPER", "WRITE_P", "XML_P", "XMLATTRIBUTES", "XMLCONCAT",
  "XMLELEMENT", "XMLEXISTS", "XMLFOREST", "XMLNAMESPACES", "XMLPARSE",
  "XMLPI", "XMLROOT", "XMLSERIALIZE", "XMLTABLE", "YEAR_P", "YEARS_P",
  "YES_P", "ZONE", "NOT_LA", "NULLS_LA", "WITH_LA", "'<'", "'>'", "'='",
  "POSTFIXOP", "'+'", "'-'", "'*'", "'/'", "'%'", "'^'", "UMINUS", "'['",
  "']'", "'('", "')'", "'.'", "';'", "','", "'|'", "'?'", "'{'", "'}'",
  "'&'", "'!'", "':'", "'#'", "'$'", "$accept", "stmtblock", "stmtmulti",
  "stmt", "AlterObjectSchemaStmt", "AlterSeqStmt", "SeqOptList",
  "opt_with", "NumericOnly", "SeqOptElem", "opt_by", "SignedIconst",
  "AlterTableStmt", "alter_identity_column_option_list",
  "alter_column_default", "alter_identity_column_option",
  "alter_generic_option_list", "alter_table_cmd", "alter_using",
  "alter_generic_option_elem", "alter_table_cmds", "alter_generic_options",
  "opt_set_data", "AnalyzeStmt", "AttachStmt", "DetachStmt",
  "opt_database", "opt_database_alias", "CallStmt", "CheckPointStmt",
  "opt_col_id", "CommentOnStmt", "comment_value",
  "comment_on_type_any_name", "qualified_name", "ColId", "ColIdOrString",
  "Sconst", "indirection", "indirection_el", "attr_name", "ColLabel",
  "CopyStmt", "copy_database_flag", "copy_from", "copy_delimiter",
  "copy_generic_opt_arg_list", "opt_using", "opt_as", "opt_program",
  "copy_options", "copy_generic_opt_arg", "copy_generic_opt_elem",
  "opt_oids", "copy_opt_list", "opt_binary", "copy_opt_item",
  "copy_generic_opt_arg_list_item", "copy_file_name",
  "copy_generic_opt_list", "CreateStmt", "ConstraintAttributeSpec",
  "def_arg", "OptParenthesizedSeqOptList", "generic_option_arg",
  "key_action", "ColConstraint", "ColConstraintElem",
  "GeneratedColumnType", "opt_GeneratedColumnType",
  "GeneratedConstraintElem", "generic_option_elem", "key_update",
  "key_actions", "OnCommitOption", "reloptions", "opt_no_inherit",
  "TableConstraint", "TableLikeOption", "reloption_list", "ExistingIndex",
  "ConstraintAttr", "OptWith", "definition", "TableLikeOptionList",
  "generic_option_name", "ConstraintAttributeElem", "columnDef",
  "def_list", "index_name", "TableElement", "def_elem", "opt_definition",
  "OptTableElementList", "columnElem", "opt_column_list", "ColQualList",
  "key_delete", "reloption_elem", "columnList", "columnList_opt_comma",
  "func_type", "ConstraintElem", "TableElementList", "key_match",
  "TableLikeClause", "OptTemp", "generated_when", "CreateAsStmt",
  "opt_with_data", "create_as_target", "unreserved_keyword",
  "col_name_keyword", "func_name_keyword", "type_name_keyword",
  "other_keyword", "type_func_name_keyword", "reserved_keyword",
  "pgq_unreserved_keyword", "pgq_col_name_keyword", "CreateFunctionStmt",
  "macro_alias", "param_list", "CreateSchemaStmt", "OptSchemaEltList",
  "schema_stmt", "CreateSecretStmt", "opt_secret_name", "opt_persist",
  "opt_storage_specifier", "CreateSeqStmt", "OptSeqOptList",
  "CreateTypeStmt", "opt_enum_val_list", "enum_val_list", "DeallocateStmt",
  "DeleteStmt", "relation_expr_opt_alias", "where_or_current_clause",
  "using_clause", "DropStmt", "drop_type_any_name", "drop_type_name",
  "any_name_list", "opt_drop_behavior", "drop_type_name_on_any_name",
  "DropSecretStmt", "opt_storage_drop_specifier", "ExecuteStmt",
  "execute_param_expr", "execute_param_list", "execute_param_clause",
  "ExplainStmt", "opt_verbose", "explain_option_arg", "ExplainableStmt",
  "NonReservedWord", "NonReservedWord_or_Sconst", "explain_option_list",
  "analyze_keyword", "opt_boolean_or_string", "explain_option_elem",
  "explain_option_name", "ExportStmt", "ImportStmt", "IndexStmt",
  "access_method", "access_method_clause", "opt_concurrently",
  "opt_index_name", "opt_reloptions", "opt_unique", "InsertStmt",
  "insert_rest", "insert_target", "opt_by_name_or_position",
  "opt_conf_expr", "opt_with_clause", "insert_column_item", "set_clause",
  "opt_or_action", "opt_on_conflict", "index_elem", "returning_clause",
  "override_kind", "set_target_list", "opt_collate", "opt_class",
  "insert_column_list", "set_clause_list", "set_clause_list_opt_comma",
  "index_params", "set_target", "LoadStmt", "file_name", "repo_path",
  "PGQ_IDENT", "DropPropertyGraphStmt", "VertexOrNode",
  "EdgeOrRelationship", "EdgeTablesClauseOptional",
  "CreatePropertyGraphStmt", "VertexTableDefinitionList",
  "KeySpecification", "KeyDefinition", "KeyReference", "LabelList",
  "LabelOptional", "Discriminator", "VertexTableDefinition",
  "EdgeTableDefinitionList", "EdgeTableDefinition", "AreOptional",
  "IdentOptionalAs", "QualifiednameOptionalAs", "PropertiesList",
  "ExceptOptional", "PropertiesSpec", "PropertiesClause",
  "GraphTableWhereOptional", "GraphTableNameOptional", "ColumnsOptional",
  "GraphTableStmt", "KeepOptional", "PathOrPathsOptional",
  "GroupOrGroupsOptional", "PathVariableOptional", "PathModeOptional",
  "TopKOptional", "PathPrefix", "PathPatternList", "PathPattern",
  "PatternUnion", "KleeneQuantifierOptional", "KleeneOptional", "CostNum",
  "CostDefault", "CostOptional", "SubPath", "EnclosedSubPath",
  "PathElement", "PathSequence", "PathConcatenation", "OrLabelExpression",
  "AndLabelExpression", "ComposedLabelExpression", "LabelExpression",
  "LabelExpressionOptional", "IsOrColon", "ArrowRight", "ArrowLeftBracket",
  "AbbreviatedEdge", "VariableOptional", "FullElementSpec", "EdgePattern",
  "VertexPattern", "pgq_expr", "PragmaStmt", "PrepareStmt",
  "prep_type_clause", "PreparableStmt", "RenameStmt", "opt_column",
  "SelectStmt", "select_with_parens", "select_no_parens", "select_clause",
  "opt_select", "simple_select", "value_or_values", "pivot_keyword",
  "unpivot_keyword", "pivot_column_entry", "pivot_column_list_internal",
  "pivot_column_list", "with_clause", "cte_list", "common_table_expr",
  "opt_materialized", "into_clause", "OptTempTableName", "opt_table",
  "all_or_distinct", "by_name", "distinct_clause", "opt_all_clause",
  "opt_ignore_nulls", "opt_sort_clause", "sort_clause", "sortby_list",
  "sortby", "opt_asc_desc", "opt_nulls_order", "select_limit",
  "opt_select_limit", "limit_clause", "offset_clause", "sample_count",
  "sample_clause", "opt_sample_func", "tablesample_entry",
  "tablesample_clause", "opt_tablesample_clause", "opt_repeatable_clause",
  "select_limit_value", "select_offset_value", "select_fetch_first_value",
  "I_or_F_const", "row_or_rows", "first_or_next", "group_clause",
  "group_by_list", "group_by_list_opt_comma", "group_by_item",
  "empty_grouping_set", "rollup_clause", "cube_clause",
  "grouping_sets_clause", "grouping_or_grouping_id", "having_clause",
  "qualify_clause", "for_locking_clause", "opt_for_locking_clause",
  "for_locking_items", "for_locking_item", "for_locking_strength",
  "locked_rels_list", "opt_nowait_or_skip", "values_clause",
  "values_clause_opt_comma", "from_clause", "from_list",
  "from_list_opt_comma", "table_ref", "opt_pivot_group_by",
  "opt_include_nulls", "single_pivot_value", "pivot_header", "pivot_value",
  "pivot_value_list", "unpivot_header", "unpivot_value",
  "unpivot_value_list", "joined_table", "alias_clause", "opt_alias_clause",
  "func_alias_clause", "join_type", "join_outer", "join_qual",
  "relation_expr", "func_table", "rowsfrom_item", "rowsfrom_list",
  "opt_col_def_list", "opt_ordinality", "where_clause",
  "TableFuncElementList", "TableFuncElement", "opt_collate_clause",
  "colid_type_list", "RowOrStruct", "opt_Typename", "Typename",
  "qualified_typename", "opt_array_bounds", "SimpleTypename",
  "ConstTypename", "GenericType", "opt_type_modifiers", "Numeric",
  "opt_float", "Bit", "ConstBit", "BitWithLength", "BitWithoutLength",
  "Character", "ConstCharacter", "CharacterWithLength",
  "CharacterWithoutLength", "character", "opt_varying", "ConstDatetime",
  "ConstInterval", "opt_timezone", "year_keyword", "month_keyword",
  "day_keyword", "hour_keyword", "minute_keyword", "second_keyword",
  "millisecond_keyword", "microsecond_keyword", "week_keyword",
  "decade_keyword", "century_keyword", "millennium_keyword",
  "opt_interval", "a_expr", "b_expr", "c_expr", "d_expr",
  "indirection_expr_or_a_expr", "indirection_expr", "struct_expr",
  "func_application", "func_expr", "func_expr_windowless",
  "func_expr_common_subexpr", "list_comprehension", "within_group_clause",
  "filter_clause", "export_clause", "window_clause",
  "window_definition_list", "window_definition", "over_clause",
  "window_specification", "opt_existing_window_name",
  "opt_partition_clause", "opt_frame_clause", "frame_extent",
  "frame_bound", "opt_window_exclusion_clause", "qualified_row", "row",
  "dict_arg", "dict_arguments", "dict_arguments_opt_comma", "map_arg",
  "map_arguments", "map_arguments_opt_comma",
  "opt_map_arguments_opt_comma", "sub_type", "all_Op", "MathOp", "qual_Op",
  "qual_all_Op", "subquery_Op", "any_operator", "c_expr_list",
  "c_expr_list_opt_comma", "expr_list", "expr_list_opt_comma",
  "opt_expr_list_opt_comma", "func_arg_list", "func_arg_expr", "type_list",
  "extract_list", "extract_arg", "overlay_list", "overlay_placing",
  "position_list", "substr_list", "substr_from", "substr_for", "trim_list",
  "in_expr", "case_expr", "when_clause_list", "when_clause",
  "case_default", "case_arg", "columnref", "opt_slice_bound",
  "opt_indirection", "opt_func_arguments", "extended_indirection_el",
  "opt_extended_indirection", "opt_asymmetric",
  "opt_target_list_opt_comma", "target_list", "target_list_opt_comma",
  "target_el", "except_list", "opt_except_list", "replace_list_el",
  "replace_list", "replace_list_opt_comma", "opt_replace_list",
  "qualified_name_list", "name_list", "name_list_opt_comma",
  "name_list_opt_comma_opt_bracket", "name", "func_name", "AexprConst",
  "Iconst", "type_function_name", "function_name_token", "type_name_token",
  "any_name", "attrs", "opt_name_list", "param_name", "ColLabelOrString",
  "TransactionStmt", "opt_transaction", "UpdateStmt", "UseStmt",
  "VacuumStmt", "vacuum_option_elem", "opt_full", "vacuum_option_list",
  "opt_freeze", "VariableResetStmt", "generic_reset", "reset_rest",
  "VariableSetStmt", "set_rest", "generic_set", "var_value", "zone_value",
  "var_list", "VariableShowStmt", "describe_or_desc", "show_or_describe",
  "opt_tables", "var_name", "table_id", "ViewStmt", "opt_check_option", YY_NULLPTR
};

static const char *
yysymbol_name (yysymbol_kind_t yysymbol)
{
  return yytname[yysymbol];
}
#endif

#define YYPACT_NINF (-3442)

#define yypact_value_is_default(Yyn) \
  ((Yyn) == YYPACT_NINF)

#define YYTABLE_NINF (-2238)

#define yytable_value_is_error(Yyn) \
  ((Yyn) == YYTABLE_NINF)

/* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
   STATE-NUM.  */
static const int yypact[] =
{
    7962,   519,  1019, -3442, -3442,   322,   519, 56586, 71991,   180,
     519,   194,  4278, 58642, -3442, -3442, 52988,  8869,   519, 61726,
   80136,   387,   308, 38259,   538, 62240, 62240, -3442, -3442, -3442,
   71991, 61726, 62754,   519,   389, 72505, -3442,   519, 40829, 59156,
     411, -3442, 61726,    81,   337, 63268, 61726, 45970,   878,   472,
   -3442, -3442, -3442, -3442, -3442, -3442, -3442, -3442, -3442, -3442,
   -3442, -3442, -3442, -3442, -3442, -3442, -3442, -3442, -3442, -3442,
   -3442, -3442, -3442, -3442,   545, -3442, -3442, -3442, -3442,   136,
   -3442, -3442, -3442, -3442, -3442, -3442, -3442, -3442,   168, -3442,
     771,   171, 38259, 38259,  2302,   523, -3442, -3442, -3442, -3442,
   -3442, -3442, -3442, -3442, -3442, 40315, -3442, -3442, -3442, -3442,
   63782, 61726, 64296, 59670, 64810, -3442,   764,  1075, -3442,   192,
   -3442, -3442, -3442, -3442, -3442, -3442, -3442, -3442, -3442, -3442,
   -3442, -3442, -3442, -3442, -3442, -3442, -3442, -3442, -3442, -3442,
   -3442, -3442, -3442, -3442, -3442, -3442, -3442, -3442, -3442, -3442,
   -3442, -3442, -3442, -3442, -3442, -3442, -3442, -3442, -3442, -3442,
   -3442, -3442, -3442, -3442, -3442, -3442, -3442, -3442, -3442, -3442,
   -3442, -3442, -3442, -3442, -3442, -3442, -3442, -3442, -3442, -3442,
   -3442, -3442, -3442, -3442, -3442, -3442, -3442, -3442, -3442, -3442,
   -3442, -3442, -3442, -3442, -3442, -3442, -3442, -3442, -3442, -3442,
   -3442, -3442, -3442, -3442, -3442, -3442, -3442, -3442, -3442, -3442,
   -3442, -3442, -3442, -3442, -3442, -3442, -3442, -3442, -3442, -3442,
   -3442, -3442, -3442, -3442, -3442, -3442, -3442, -3442, -3442, -3442,
   -3442, -3442, -3442, -3442, -3442, -3442, -3442, -3442, -3442, -3442,
   -3442, -3442, -3442, -3442, -3442, -3442,   202, -3442, -3442, -3442,
   -3442, -3442, -3442, -3442, -3442, -3442, -3442, -3442, -3442, -3442,
   -3442, -3442, -3442, -3442, -3442, -3442, -3442, -3442, -3442, -3442,
   -3442, -3442, -3442, -3442, -3442, -3442, -3442, -3442, -3442, -3442,
   -3442, -3442, -3442, -3442, -3442, -3442, -3442, -3442, -3442, -3442,
   -3442, -3442, -3442, -3442, -3442, -3442, -3442, -3442, -3442, -3442,
   -3442, -3442, -3442, -3442, -3442, -3442, -3442, -3442, -3442,   586,
   -3442, -3442, -3442, -3442, -3442, -3442, -3442, -3442, -3442, -3442,
   -3442, -3442, -3442, -3442, -3442, -3442, -3442, -3442, -3442, -3442,
   -3442, -3442, -3442, -3442, -3442, -3442, -3442, -3442, -3442, -3442,
   -3442, -3442, -3442, -3442, -3442, -3442, -3442, -3442, -3442, -3442,
   -3442, -3442, -3442, -3442, -3442, -3442, -3442, -3442, -3442, -3442,
   -3442, -3442, -3442, -3442, -3442, -3442, -3442, -3442, -3442, -3442,
   -3442, -3442, -3442, -3442, -3442, -3442, -3442, -3442, -3442, -3442,
   -3442, -3442, -3442, -3442, -3442, -3442, -3442, -3442, -3442, -3442,
   -3442, -3442, -3442, -3442, -3442, -3442, -3442, -3442, -3442, -3442,
   -3442, -3442, -3442, -3442, -3442, -3442, -3442, -3442, -3442, -3442,
   -3442, -3442, -3442, -3442, -3442, -3442, -3442, -3442, -3442, -3442,
   -3442, -3442, -3442, -3442, -3442, -3442, -3442, -3442, -3442, -3442,
   -3442, -3442, -3442, -3442, -3442, -3442, -3442, -3442, -3442, -3442,
   -3442, -3442, -3442, -3442, -3442, -3442, -3442, -3442, -3442, -3442,
   -3442, -3442, -3442, -3442, -3442, -3442, -3442, -3442, -3442, -3442,
   -3442,   208, -3442, -3442, -3442, -3442, -3442, -3442, -3442, -3442,
   -3442, -3442, -3442, -3442, -3442, -3442, -3442, -3442, -3442, -3442,
   -3442, -3442, -3442, -3442, -3442, -3442, -3442, -3442, -3442, -3442,
   -3442, -3442, -3442, -3442, -3442, -3442, -3442, -3442, -3442, -3442,
   -3442, -3442, -3442, -3442, -3442, -3442, -3442, -3442, -3442, -3442,
   -3442, -3442, -3442, -3442, -3442, -3442, -3442, -3442, -3442, -3442,
   -3442, -3442, -3442, -3442, -3442, -3442, -3442, -3442, -3442, -3442,
   -3442, -3442, -3442, -3442, -3442, -3442, -3442,   457,   209, -3442,
   -3442,   212, -3442,   631, -3442, -3442, -3442, -3442, -3442, -3442,
   -3442, -3442, -3442,  1024, -3442, -3442,  1086,  1853, 61726,   705,
     774,   837, -3442,  1042, 65324, -3442,   852, 61726, -3442, -3442,
     928,   904,  1102, -3442, -3442, 60184, -3442, -3442, -3442, -3442,
   -3442, -3442, -3442, -3442, -3442, -3442, -3442, -3442, -3442, -3442,
   -3442, -3442, -3442, -3442, -3442, -3442, -3442, -3442, -3442, -3442,
   -3442, -3442, -3442, -3442, -3442, -3442, -3442, -3442, -3442, -3442,
   -3442, -3442, 53502, -3442, -3442, -3442, -3442, -3442, -3442, -3442,
   -3442, -3442, -3442, -3442, -3442, -3442, -3442, -3442, -3442, -3442,
   -3442, -3442, -3442, -3442, -3442, -3442, -3442, -3442, -3442, -3442,
   -3442, -3442, -3442, -3442, -3442, -3442, -3442, -3442, -3442, -3442,
   -3442, -3442, -3442, -3442, -3442, -3442, -3442, -3442, -3442, -3442,
   -3442, -3442, -3442, -3442, -3442, -3442, -3442, -3442, -3442, -3442,
   -3442, -3442, -3442, -3442, -3442, -3442, -3442, -3442, -3442, -3442,
   -3442, -3442, -3442, -3442, -3442, -3442, -3442, -3442, -3442, -3442,
   -3442, -3442, -3442, -3442, -3442, -3442, -3442, -3442, -3442, -3442,
   -3442, -3442, -3442, -3442, -3442, -3442, -3442, -3442, -3442, -3442,
   -3442, -3442, -3442, -3442, -3442, -3442, -3442, -3442, -3442, -3442,
   -3442, -3442, -3442, -3442, -3442, -3442, -3442, -3442, -3442, -3442,
   -3442, -3442, -3442, -3442, -3442, -3442, -3442, -3442, -3442, -3442,
   -3442, -3442, -3442,  1059, -3442, -3442,   914, -3442,   189, -3442,
   -3442,   949,   910, -3442,  1205, -3442, -3442, -3442, -3442, -3442,
   -3442, -3442, -3442,  1011, -3442, -3442, -3442,  1020, 73019, 65838,
   66352, -3442,   889,  1506,  4682, 80153, 37744, -3442, -3442, -3442,
   -3442, -3442, -3442, -3442, -3442, -3442, -3442, -3442, -3442, -3442,
   -3442, -3442, -3442, -3442,   545, -3442, -3442, -3442, -3442, -3442,
   -3442, -3442, -3442, -3442, -3442, -3442, -3442, -3442, -3442, 62240,
   71991, 62240,   896,   900,  1274,   940,   950, 38773,   977, 41344,
    1005,  1044,  1303,  1050,  1054,  1058,  1071,   337, 37230,  1097,
     457, -3442, 66866, 66866,    42,  3743, -3442, 66866, 67380, -3442,
    1109, -3442,  1075, -3442, -3442, -3442,  1455, -3442,   -51,  1106,
   -3442, 67894, 67894, 67894,  1131,  1441, -3442, -3442, -3442,  1149,
   -3442, -3442,  1393, 25388, 25388, 73533, 73533,  1075, 73533,  1212,
   -3442, -3442,    72, -3442,  4132, -3442, -3442,  2302,  1197,   457,
   -3442, -3442, 59156, -3442, -3442,   298,  1559, 25388, 61726,  1199,
   -3442,  1213,  1199, -3442, -3442, -3442, -3442, -3442, -3442, -3442,
   -3442, -3442, -3442, -3442, -3442, -3442, -3442, -3442, -3442, -3442,
   -3442, -3442, -3442, -3442, -3442, -3442, -3442, -3442, -3442, -3442,
   -3442, -3442, -3442, -3442, -3442, -3442, -3442, -3442, -3442, -3442,
   -3442, -3442, -3442, -3442,   337, -3442, -3442, -3442, -3442, -3442,
   -3442, -3442, -3442, -3442, -3442, -3442, -3442, -3442, -3442,  1484,
    1214,  1219,  1226, -3442,  7962, -3442, 61726,  1586,  1466, 59156,
     791,   791,  1710,   791,   694,   766,  3137,  3589, -3442,  1477,
   -3442,  1243,  1347,  1273,  1566, -3442,  1197,  1660,   206,  1463,
    1674,  7624,  1677,  1145,  1679,  1563,  1683,  1800, 25388, 54016,
     457, -3442, 15052, 25388, -3442, -3442, -3442,  1415, -3442, -3442,
   -3442, -3442, -3442, 61726, 71991,  1317,  1322, -3442, -3442, -3442,
   -3442,  1852, 61726,  1576, -3442,  1822, -3442, -3442,  1382, 68408,
   68922, 69436, 69950, 74047,  1784, -3442, -3442,  1715, -3442, -3442,
   -3442,  1386, -3442, -3442, -3442, 61726,   190, 74561,  1734,  1401,
     164, -3442,  1782,   229, -3442,  1793,  1619, 18860, -3442,  1575,
   -3442, -3442, -3442,   337, -3442, -3442, -3442, -3442,   728, -3442,
   -3442, 49672, 80153,  1510,  1427, -3442,  1791, 25388, 25388,  1439,
    9012, 79641, -3442, 66866, 67380, 25388, 61726, -3442, 25388, 30828,
    1443, 25388, 25388, 16140, 25388, 36202, 66866,  3743,  1444, -3442,
     757, 61726,  1448, -3442,  1549,  1549,   389, 38259,  1747, -3442,
     226,  1753,  1678, -3442, 38259,  1678,   946,  1454,  1757,  1678,
   -3442,   787,  1758,  1549, 41858,  1457, -3442,  1549,  1686, -3442,
   -3442, 62240, 25388, 18860, 77131,  1951, -3442, -3442, -3442, -3442,
    1751, 71991,  1462, -3442, -3442, -3442, -3442, -3442, -3442,   825,
    2001,   167,  2002, 25388,   167,   167,  1465,   213,   213, -3442,
    1684,  1485, -3442,   214,  1487,  1488,  2017,  2025,   182,   173,
    1252,   167, 25388, -3442,   213,  1498,  2027,  1500,  2030,   165,
     176, -3442,   215, 25388, 25388, 25388,  1883, 25388, 13964, -3442,
   61726,  2031, 54016,   645, -3442,   457,  1508,  1075, -3442, -3442,
   -3442, -3442, -3442, -3442, -3442,  1509, -3442,   207,  7381, -3442,
   -3442, -3442, -3442, -3442,  1547, -3442, -3442, -3442, -3442,  1729,
   25388, -3442, -3442,  1511,  1747, -3442,   217, -3442, -3442,  1747,
   -3442, -3442, -3442, -3442, -3442,   233,  1939, 25388, 25388, 71991,
     457, -3442, 75075, -3442, -3442, -3442, -3442, -3442, -3442,   737,
   -3442,   545, 51270,  1512,  1513,  1199, 61726, 61726,  2004, 79641,
   -3442, -3442, -3442, -3442,  1213, 59156,   196,  1828,  1656, -3442,
   -3442,  2302,  2302, 19404,  1099,   275,   966, 19948, 25932,  1886,
    1769,   258,   971,  1895, -3442,  1774,  2007, 30828, 25388, 25388,
     694,   766, 25388, -3442, -3442, -3442,  1826, 61726, 57100,   864,
     957,  1538,  1630,  1545,    57,  1977, -3442,  1544, -3442,  1635,
   61726, 79142,   231, -3442,  2019,   231,   231,   667,  2021,  1639,
     259,  1814,   424,   328,  3760, -3442,  1544, 59156,   282,   660,
    1544, 61726,  1645,   703,  1544,  1981, 71991,  1427, 47526,  1548,
   -3442, -3442, -3442,   175, 18860, -3442,  1392,  1440,  1542,   498,
     218,  1652,  1731, 18860,  1737,  1744,   185,  1752,  1760,  1770,
    1773,  1779,  1781,  1787,  1790,   170,  1806,  1808,  1810,  1812,
    1825,  1844, -3442,  1857,   187,  1875,   232, 18860,  1880, -3442,
     191, -3442,   197, 51270,    44, -3442, -3442,  1882, 51322, -3442,
    1866,  1651,  1653, 71991,  1601,  1913, 61726,  1094,  1708,    82,
    1944,  2009, 77630, 61726,  1820,  3760,  1821,  1573,  2070,  1831,
    1322,  1832,  1583,  1836, -3442,  1919, -3442, 75589, 54016, -3442,
     247, -3442, -3442, -3442, -3442,  1976,  1958, 71991, 54016,  1600,
   -3442, -3442, 71991, -3442, 61726, 61726, -3442, 61726, 71991, -3442,
     829, 51270,  2125,   936, 80153, 55558, -3442, -3442, -3442, -3442,
    1249,  1287, -3442, -3442, -3442, -3442, -3442, -3442, -3442, -3442,
   -3442,  1075, 54016, -3442,  3933, 62240, 50308,  1605, 25388, -3442,
   -3442, -3442, -3442, -3442, -3442, -3442, -3442, -3442, -3442, -3442,
   -3442, -3442, -3442, -3442, -3442, -3442, -3442, -3442, -3442, -3442,
   -3442, -3442, -3442, -3442, -3442, -3442, -3442, -3442, -3442, -3442,
   -3442, -3442, -3442, -3442, -3442, -3442, -3442,  1606,  1965, -3442,
   -3442, -3442,  6381,  1609, 50359,  1610, 30828, 30828,   457,  1932,
   -3442, -3442, 30828,  1611, 56072, 50224,  1613,  1614, 50718, 20492,
   25388, 20492, 20492, 50665, -3442,  1617, 50916, 66866,  1621, 61726,
   60698, -3442, -3442, -3442, 25388, 25388,  3743, 61212,  1655, -3442,
   38259, -3442,  1915, 38259, -3442, -3442,  2293, -3442, 38259,  1921,
   25388, 38259, -3442,  1868,  1873,  1623, 38259, -3442, 61726,  1631,
   61726, -3442, -3442, -3442, -3442, -3442, 51270, -3442,  1634,   903,
    1632, -3442, -3442, -3442, -3442, -3442,  1692, -3442,  1692,  1692,
   -3442, -3442, -3442, -3442,  1640,  1640,  1642, -3442, -3442, -3442,
   -3442, -3442, -3442, -3442, -3442, -3442, -3442, -3442, -3442, -3442,
    1648,  1252, -3442,  1692, -3442,  1640, -3442, -3442, -3442, -3442,
   -3442, -3442, -3442, 79142, -3442, -3442, -3442, -3442,   789,   890,
   -3442,  1650, -3442, -3442, -3442, -3442, -3442,  1657, -3442,  1649,
    2146, -3442, -3442, -3442, -3442, -3442, -3442, -3442, -3442, -3442,
    8043,   924,  1640,  3051, -3442, -3442, 25388, 25388, -3442, -3442,
    1658, 51270,  1698, -3442, -3442, 25388, 25388, -3442, -3442, -3442,
   -3442,  2183, -3442, 25388,  1692,  1692, -3442,  8968, -3442, 47004,
   21036,  1755,  1759,  2183, -3442,  2183, -3442,  8968,  2182,  2182,
   44428, -3442,  1834, 50968, -3442,  1672,  1207,  8507,  1668,  1670,
   -3442,  1680,  1675, -3442, -3442, 48130,   156,   457,   457, 25388,
   -3442,  2183, 25388, 10034, 10034, -3442,   230, 77131, 25388, 25388,
   25388, 25388, 25388, 25388, 25388, 25388, 52474,  1778,   225, 71991,
   25388, 25388,  1688,   964, -3442, 25388,  1937, -3442,  1689, 25388,
    1785,   240, 25388, 25388, 25388, 25388, 25388, 25388, 25388, 25388,
   25388, -3442, -3442, 34636,   268,   695,  2043,  2064,   -10,   803,
   25388,  2058, 15052, -3442,  2058, -3442, -3442, -3442, -3442, -3442,
     219, -3442, -3442,  1634,  1634, -3442, 71991, -3442, 61726,   298,
   58128, 25388, -3442, -3442,  1701,  1703,   210,  1718,   366,   103,
   -3442, -3442,  1786, -3442, -3442, 61726, 44942,  2028, -3442,   404,
    1704, -3442, 50183,  1972,  2028,  2302, -3442, -3442, 31916,  1855,
    2022,  1962, -3442, -3442,  1940,  1943, -3442,  1725, 51374, 26476,
   26476, -3442,  1316, 51270,  1529, -3442, -3442, -3442, -3442, -3442,
   -3442,   130, -3442, 61726,   501, 42372, -3442,  1730,   118, -3442,
    2110,  2082,  2044,  1886,   971,  1738, -3442,  1628,  1740, 76103,
   61726,  2037,  1991,  2041,   -34, 77131, -3442, -3442, -3442, -3442,
   61726, 71991, 70464, 76617, 54530, 61726, 54016, -3442, -3442, -3442,
   -3442, 61726,  1007, 61726,  8565, -3442, -3442, -3442, -3442,   231,
   -3442, -3442, -3442, -3442, -3442, 71991, 61726, -3442, -3442,   231,
   71991, 61726,   231, -3442,  1722, 61726, 61726, 61726, 61726,  1859,
   61726, 61726,  1075, -3442, -3442, -3442, 27020,    46,    46,  1974,
   16684,   203, -3442, 25388, 25388,   222,   311, 71991,  1935, -3442,
   -3442,   932,  1985,   153, 61726, -3442,  1802, 61726, 61726, 61726,
   61726, 71991, -3442, -3442,  1851, 61726,  1499, -3442, -3442, -3442,
   -3442, -3442,  1754, -3442,  1756,  2134,  3760, -3442,  2135, 57614,
     967,  2180,  2136,  1799,  2138, 17228,  2254,  2140,  2295,  1766,
    2018, -3442, -3442,  2005, -3442, -3442, 71991,  2297, -3442,   164,
   -3442, 54016, -3442,   229, -3442,  2008,   247, -3442, 18860, 25388,
   -3442, -3442, -3442, -3442, -3442, -3442,  1427, 35683, -3442,   934,
   -3442, -3442,  2260,  1075,  2260,   541, -3442, -3442,  2260, -3442,
    2244,  2260, -3442, -3442, 77131, -3442,  9100, -3442, 25388, 25388,
   -3442, 25388,  2133, -3442,  2300,  2300, 77131, 30828, 30828, 30828,
   30828, 30828, 30828,   717,  1498, 30828, 30828, 30828, 30828, 30828,
   30828, 30828, 30828, 30828, 32460,   376, -3442, -3442,   941,  2271,
   25388, 25388,  2143,  2133, 25388, -3442, 77131,  1788, -3442,  1789,
    1798, 25388, -3442, 77131, -3442, 61726,  1809,    38,    39, -3442,
    1783,  1792, -3442,  1747, -3442,  1068,  1081, 61726,  4048,  4696,
    5176, -3442, -3442, 25388,  2137,  2293, 38259, -3442, 25388,  1794,
   -3442, -3442, 38259,  2149, -3442, -3442, -3442, 42886,  2293, 77131,
     953, -3442, 61726, 77131,   959, 25388, -3442, 18860,  2318, 77131,
    2299, 71991, 71991,  2331,  1811,  1815,  2183,  1903, -3442,  1905,
    1906,  1907, -3442, -3442, -3442, -3442, -3442, -3442, -3442, -3442,
   -3442, 77131, -3442, -3442, -3442, -3442, -3442, -3442, -3442, -3442,
    1818,  1827, 25388, 25388,   133, -3442,  9402,  1819,  1823,  6047,
   -3442,  1817, -3442,  1824, -3442, -3442, -3442, -3442, -3442, -3442,
   -3442, -3442, -3442, -3442, -3442, -3442, -3442, -3442, -3442, -3442,
   -3442,  1829, -3442,  1833, -3442,  1837,  1845,  1847,  1839,  1840,
   61726, -3442, 27564, -3442, 71991, -3442, -3442, 25388, 25388, 61726,
   -3442,  1883, -3442,  1842,  1843,  9737, -3442, -3442, -3442,   265,
     824, 12835,   803,  9794,  9794,  9794,  8968, -3442, -3442, -3442,
    1850, -3442, 30828, 30828, -3442,  1682,  4151, 13964, -3442, -3442,
    2192, -3442,   980, -3442,  1848, -3442, -3442,  4721, -3442, 47004,
    8096, 25388,   227, -3442, 25388,  1688, 25388,  1926,  9794,  9794,
    9794,   510,   510,   265,   265,   265,   824,   803, -3442, -3442,
   -3442,  1849, 25388, 54016, -3442,  1854,  1856,  2224,  1500, 25388,
   -3442, -3442, 38259,  1655,    44,  1655,  2183, 10034, -3442,  1213,
   -3442, -3442,  1213, 51270, 61726, -3442, -3442,  2128,  1858, -3442,
     779,   234,  2379,   157,   366, 79641,  1898, 38259,  1900,  2351,
    2333, 71991, -3442, -3442,  1861,  2058,  1877, -3442, -3442,  1884,
   25388,  1377,  1884, -3442,  2028,    31,  2096,  1295,  1295,  1316,
    2101, -3442, -3442,  1933, -3442, -3442, -3442, 25388, 17772,  1536,
   -3442,  1543, -3442, -3442, -3442, -3442, -3442,  1869, -3442,  2152,
   -3442, 61726, -3442, -3442, 30828,  2344, 25388, 43400,  2346,  2142,
   -3442, -3442, -3442,  1964,  1544, 25388,  2126, -3442,   460,  1878,
    2256,   378,  2213, 71991, -3442,   383,   397, -3442,   861,  2267,
     247,  2268,   247, 54016, 54016, 54016,   961, -3442, -3442, -3442,
    1075, -3442,   349,   981, -3442, -3442, -3442, -3442,  1982,   746,
    3760,  1544, -3442, -3442, -3442, -3442, -3442, -3442, -3442,   309,
     811,  1544,  1984, -3442,  1986, -3442,  1994,   905,  1544, -3442,
   -3442,  1800, 21580, 51270,   -46,   203,   203,   203, 18860, -3442,
    2139,  2145,  1908, 51270, 51270,   160, -3442, -3442, -3442, -3442,
    1904, -3442,   408, -3442, 71991, -3442, -3442, -3442,  1935,    82,
    2009, 61726,  3760,  1910,  2399,  1322,  1583,  1919,  1912, -3442,
    2080,   776,  1700, -3442, 71991, 61726, 61726, 61726, 70978, -3442,
   -3442, -3442,  1914,  1925, -3442,    28,  2151,  2153, 61726,  1954,
   61726,  1545,  2425, 61726, -3442,   991, 22124, 71991, -3442, 54016,
    2315, 61726,  1958, -3442, -3442, -3442, -3442, 71991, -3442, -3442,
   51270, -3442, -3442, 55044, -3442, -3442, -3442, -3442, -3442, 54016,
   -3442,  1075, -3442,  1075,  2185, 71991, 48644,  1075, 49158,  1075,
    1941, -3442, 51270, 10047, 51270,  2143, -3442,   238,  2300,  1286,
    1286,  1286,  6535,  2298,   291,  1946,  1286,  1286,  1286,   368,
     368,   238,   238,   238,  2300,   376,  1109, 56072,  1953, -3442,
   51270, 51270, -3442, -3442,  1942, -3442, -3442, -3442, -3442,  1967,
    1968, -3442, -3442, -3442, -3442, -3442, -3442, 71991,  1330,  1655,
     411,   411,   411,   411, -3442, 61726, 61726, 61726, 51270,  2416,
    2306, -3442,  2293, 51270, 61726, -3442, 33548, 61726, -3442,  2316,
   -3442,  2417, -3442, 61726,   998, -3442, -3442, -3442,  1003,  1978,
    1815, 77131,  1009,  1013, -3442,  2183,   184,  1969,  1654,  1531,
    1046,  1539, -3442, -3442, -3442,  1979, 51020, 25388, -3442,  2362,
   -3442, -3442, -3442, 25388, 25388, -3442, 47004, -3442, -3442, -3442,
   -3442,   -27,   -27,  1980, 13964, 51072, -3442,  2310, 10186, 51270,
   -3442,  1834, -3442, -3442, 10034, 25388,  2721,  3072, 25388,  1983,
   25388,  2335, -3442, -3442,  1988, -3442, -3442, 77131, 25388,  1989,
    5498, 30828, 30828,  5796, -3442,  5839, 25388, 13964, -3442, 47551,
    1975,  1992,  1974, 22668, -3442,  2207,  1990, -3442,  2137,   203,
    2137,  1997, -3442, -3442, -3442, -3442,  3051,  1612, -3442, -3442,
     625,  1612,  1612,  1612, -3442, -3442, -3442,   625,   625,   625,
   -3442,   204,   -44, 79641, 79641,   157,   157,  1995, -3442, -3442,
   79641,   809, -3442, -3442, -3442, -3442, 30284,  2433, -3442, 25388,
    2154, 71991,   183,  2681,  1030, -3442,   457, 44942,  1900, 25388,
     649, -3442, -3442,  1999, -3442,  1884, -3442, -3442, -3442,  2235,
   -3442, -3442, -3442, 61726, -3442,  2010, -3442, 42372,  2349, 14508,
   -3442, 42372, 61726, 61726, 10640,  2384, -3442, 71991, 71991, 71991,
   -3442, 71991,  2006,  2011,   251,  2014,   428, -3442,  2728,   251,
    2368,   255,  1545,   259,  5384,    83, -3442, -3442, -3442,  2086,
   61726, -3442, 71991, -3442, -3442, -3442, -3442, -3442, 54530, -3442,
   -3442, 46489, 54016, -3442, 54016, 61726, 61726, 61726, 61726, 61726,
   61726, 61726, 61726, 61726, 61726,  1427, 25388, -3442, 25388,  2015,
    2016,  2020,  1974, -3442, -3442, -3442,   266, -3442,  2023, -3442,
   -3442, -3442,   328, -3442,   408,  2118,  2024, -3442, 57614,  1853,
    1799,  2511,  2032, 61726,  2009,   371, 71477, -3442,  2026,  2029,
    1032,  3760,  2034,  2513, -3442,   967, 57614, -3442, -3442, -3442,
    2468, -3442,   889,   289, -3442,  1322, -3442,  1853,  1583, -3442,
    1853, 51270,  1919,  1034, 71991,  2090, -3442,   247,  1038, -3442,
   -3442, -3442, -3442, -3442, 71991,  2035, -3442,  2035, -3442, -3442,
    2035, -3442, -3442, -3442, -3442, 30828,  2388,  2038, 77131, -3442,
   -3442, 61726, -3442, -3442, -3442,  1045,  2040,  2137, 61726, 61726,
   61726, 61726, -3442, -3442, -3442, 23212, 25388,  2081, -3442,  2042,
   15596,  2372, -3442, 33004, -3442, -3442,  2046, 42886, 71991, -3442,
   -3442, -3442, -3442,  2183, -3442, -3442, 71991, -3442,  2049, -3442,
    2050, -3442, -3442, -3442, -3442, -3442, -3442, -3442, -3442, -3442,
   25388, 51270, -3442, 51270, -3442, -3442, -3442, -3442, -3442,  7552,
   -3442,  2047,  2052, 71991, 25388, -3442, -3442, -3442,   425, 25388,
   25388,  1682, -3442, 51752, 25388, 77131,  1051,  1682,   357, 25388,
    4296,  4372, 25388, 25388,  6361, 11202, -3442, 28108, 18316, -3442,
    2053, 25388, 11534, 45456, -3442, 38259,  2306,  2054,  2306,  1075,
    2055, -3442, -3442, -3442, -3442, -3442, -3442, -3442,  1304,   572,
   -3442, -3442, -3442,   625,  2051, -3442,    65,  2060, -3442, -3442,
    2068,   157,  2063, -3442, -3442, -3442,  2587, -3442, 30284, 30284,
   30284, 30284, 51624, -3442,  2287,  2066,  2067, 51270, 25388, -3442,
   -3442, -3442, -3442,  2127,    32, 39801,  2304, -3442,  2084, 71991,
   -3442,  2154, 51270, -3442, -3442, 47004, -3442, -3442, -3442, -3442,
   -3442,  2546,  2722,  2074,  2076, -3442,  1469, -3442, -3442, 71991,
    2077, -3442,  2079,   251, -3442, 71991,  2121, -3442,   312,  2408,
     144, -3442, 25388, -3442,  2501,  2579,  2728,  2089, 71991, 61726,
   30828, -3442,   691,   285, -3442,  2390, 61726,  2121,  2536, -3442,
   -3442, -3442,   428, -3442,  2435,  2359, -3442,   231, -3442, 25388,
     428,  2361,   235, 71991, -3442, -3442,  3107, -3442, 77131,   247,
     247, -3442,  1632,  2115,  2116,  2119,  2123,  2124,  2141,  2155,
    2156,  2158,  2159, -3442,  2163,  2167,  2172,  2173,  2174,  2181,
    2186,  2188,  1648,  2189, -3442,  2190,  1999,  2193,  2195,  2196,
    2203,  2204, 78129,  2208,  2209,  2210,  2212,  1650,  2225,  1249,
    1287, -3442, -3442, -3442, -3442,  2226, -3442,  2231, -3442, -3442,
    1401,  2162, -3442, -3442, -3442,  2217, -3442,  2218, -3442, -3442,
   -3442, -3442, -3442, -3442,  2157,  2237, -3442, -3442, -3442,   203,
    2122,  2144, 71991,  1427,   145,  2148, 71991,  2184,  1954,  2629,
   23756, 54016,  2646,  2178,   606,   883,  2434,  2234, -3442,  1075,
    1799, -3442, 57614,  3029,   288,  2153, -3442,   249,  1954, -3442,
    2661,  1799,  2276,  2730, -3442,  2240, -3442,  2476, 71991,  2242,
   -3442, -3442, 55044,  2035,  7691, 30828, 77131,  1064,  1066, -3442,
    2767,  2413,  2306, -3442, -3442, -3442, -3442, -3442,  2247,   -24,
    2249, 13420,  2246, -3442, -3442, -3442, -3442, -3442, -3442, 51270,
   51270, 71991,  2436, -3442, -3442,  2251,  2257, 43914,  2729,  2259,
   -3442, -3442,  2589, -3442, 36716, -3442,  1815,  2264,  1815, 77131,
    1815, -3442, -3442, 51270, 25388, -3442, -3442, 47576,  2599,  1682,
    1682, 51752,  1077, -3442,  1682, 25388, 25388,  1682,  1682, 25388,
   -3442, 24300,   595, -3442,  1078, -3442, 11635, -3442, 78628, -3442,
   -3442,  2081,  1075,  2081, -3442, -3442, -3442, -3442, -3442, -3442,
     157,   809, -3442, -3442,  1898, 35161, -3442,  2270, -3442,   211,
   -3442,  2265, 51807, 51807,  2795,  2795, 77131, 30284, 30284, 30284,
   30284, 30284, 30284, 30284,  2370,   242, 71991, 30284, 30284,  1688,
     976, -3442, 30284,  2525, -3442, 30284,  2371,   391, 30284, 30284,
   30284, 30284, 30284, 30284, 30284, 30284, 30284, 30284,   -10, 25388,
   61726,  2277, -3442, -3442, -3442,  2343, -3442, -3442,  1083,  2727,
    2154, 25388, -3442, -3442,  2288, 42372, -3442, -3442, -3442, -3442,
   42372,   251, -3442,  2464,  2121,  2291, -3442, -3442, -3442, -3442,
   -3442, -3442, 12234, -3442,    95, 25388, -3442,   906,  6535, -3442,
   -3442, -3442, -3442,  2121,  1322, -3442, 61726,  2783,  2672, -3442,
   -3442, 51270, -3442, -3442,  2183,  2183, -3442, -3442,  2417, -3442,
   -3442,  2301, -3442, -3442,  1401,   434, 46489, 61726, 61726, -3442,
   -3442,  2296, -3442, -3442, -3442, -3442, -3442,   328,  2706, 61726,
    1088,   967, -3442,  1853,  1853, 51270,  1090, 79641, 61726,  2305,
    2488,   139,  2605, 61726,  2686, 57614, -3442,  2799,  2311, 61726,
    1954,   221,   221, -3442,  2466, -3442,  2470, -3442, -3442,  2806,
     362, -3442, 24844, 54016, 61726, -3442, -3442, 39287, -3442,  7691,
    1101, -3442, -3442,  2321,  2323, -3442,  2081, 25388,  2325, 25388,
   -3442, 28652,  2817,  2324, -3442, 25388,  2389, 34092, -3442, 25388,
   -3442, 61726, 66866,  2329, 66866, -3442, -3442, -3442, -3442, -3442,
   25388, -3442,  1682,  1682,  1682, 25388, -3442, 25388, -3442, -3442,
   -3442,  2547,  2436, -3442,  2436,  1898, -3442,  2766, 35161, 35161,
   -3442, -3442, -3442,  2347,   809,  2587, -3442,   925, 51676,   826,
   10946, 10946, 10946, 51807,  2356, 30828, 30828, -3442,  4530,  2637,
   -3442,  2700, -3442,   994, -3442,  2352, -3442, -3442,  3088, -3442,
   51706, 30284,   264, 30284,  1688, 30284,  2438, 10946, 10946, 10946,
     530,   530,   267,   267,   267,   925,   826, -3442,  2350, -3442,
   -3442, 25388,  1853,   457,  3295, 71991,    12, -3442, 51270, -3442,
   -3442, -3442, 61726, -3442, 54016, -3442,   251,    33,  2354, 25388,
   12280,  2592, -3442, -3442,  2634, -3442,  2694, -3442,  2423,   614,
    2442, -3442, -3442, -3442, -3442,  1427,  1075,  2178,  1799,  2153,
    2276, -3442, -3442, -3442,  2178,   195, -3442, -3442, 79641,  2868,
   -3442, 79641,  2698,  2374, 61726,  1853,   967,   889, -3442, -3442,
   -3442, -3442, -3442, -3442, -3442, -3442, -3442, -3442, -3442, -3442,
   -3442,  1853,  2828,  2609,  2837,  1853, 51270,  1103,  2090, 25388,
     250, -3442,  1117,  2832, -3442, -3442,  2909,  2436,  2385, 28652,
    2386, -3442,  2391, 71991, 51270,  2539, -3442, -3442,  2392, -3442,
   -3442, 25388, -3442, 47619,  2393,  2395,  2861,  1974,  2389,  2389,
    2766, 30828, -3442,  2394,   823, -3442, -3442,  2382, 30284,  6412,
    6948, 30284, 30284,  2753, -3442, -3442,  2397, -3442, -3442, 77131,
   30284,  5244, 30828, 30828,  6454, -3442,  7119, 30284, -3442, -3442,
      32, -3442, -3442,  2836, 39287,  2796,  1322,   251,  2411,  1126,
   -3442, -3442, -3442, -3442, -3442,  3760, -3442, 12652,  2654,   148,
    2641,  2354, 25388, -3442,  2484, -3442, -3442, -3442,  2409,  2902,
   -3442, -3442, -3442, -3442, -3442,  2512, -3442,  2905, -3442,  1148,
    2863, -3442, 61726, -3442, 57614,  2418,  2276,  2153,  1954,  2276,
    2649, -3442,  2653, -3442, -3442,  2424, 12805, 71991, 71991,  1799,
   39287, 71991,  2422,  2389, -3442,  2428, -3442, -3442, -3442, 60698,
   -3442,  2429, -3442, -3442, -3442, 25388,   150, -3442, -3442, -3442,
    5998, -3442, 35161, 35161, -3442,   871, 30284, 30284,  4530, 51966,
   30284, 77131,  1152,  4530, 30284,  7013,  7198, 30284, 30284,  8041,
    2489, 61726,  1170,    84,  2634, 46489, -3442, 54016,  2684,    33,
    2757, -3442, -3442, -3442, -3442,   166,  2671, -3442,  2678, -3442,
   51270, -3442,   195,  1853,  2437, 79641, -3442, 79641,  2825,  2445,
   57614, -3442, -3442, -3442, -3442, -3442, -3442, 39287,  2832, -3442,
     404, -3442,  1655, -3442,   404, -3442, -3442, -3442, -3442, -3442,
    1613, 29196, 29196, 29196,  2451,  1333, -3442, -3442,  2449, -3442,
    2447,  4530,  4530, 51966,  1172, -3442,  4530, 30284, 30284,  4530,
    4530, 30284,  1853, -3442,  1655, -3442,  2590,  2641, -3442, -3442,
   -3442, -3442, -3442,   237,   237,  2867, -3442,  2526, -3442, -3442,
    2276, 61726, -3442, -3442,  2462, -3442, 79641,  1176, 71991,  1884,
   -3442,  1884, 31372,  2617,   324, 50265,  2846, -3442,  2846,  2846,
   -3442, -3442, -3442, -3442, 35161, 35161, -3442,  4530,  4530,  4530,
   -3442, -3442, 44942, -3442, -3442,  2975, -3442,   271, -3442, -3442,
   -3442,  2465,  2591, 79641, -3442,  1180,  1799,   404, -3442, -3442,
    2964, -3442, -3442, -3442, -3442, -3442,   773, -3442, -3442, -3442,
   -3442, -3442,  1655,   251, -3442, -3442, -3442, 61726,  2471,  2770,
    1182, -3442, 79641,  1655,  1884, 29740,  2630, -3442,  2704, -3442,
   -3442,  2465, -3442,  2480,  2657, 61726, -3442, -3442, -3442, -3442,
   -3442, -3442, -3442, -3442, 61726, -3442, -3442,  2480,  1184,  2889,
   -3442,  2770, 61726,  2480,   606,  2605,  2698, -3442
};

/* YYDEFACT[STATE-NUM] -- Default reduction number in state STATE-NUM.
   Performed when YYTABLE does not specify something else to do.  Zero
   means the default is an error.  */
static const yytype_int16 yydefact[] =
{
     160,   268,     0,  1580,  1579,  1650,   268,     0,  1514,     0,
     268,   677,   593,     0,  1671,  1670,     0,   212,   268,     0,
     160,     0,     0,     0,     0,     0,     0,   740,   743,   741,
       0,     0,     0,   268,   780,     0,  1672,   268,     0,     0,
     772,   742,     0,  1628,     0,     0,     0,     0,     0,     2,
       4,     5,     6,     7,     8,     9,    24,    10,    11,    12,
      13,    20,    14,    15,    17,    18,    19,    21,    22,    23,
      27,    26,    28,    29,  1537,    30,    32,    33,    34,     0,
      35,    25,    16,    31,    36,    37,    38,    39,   716,   702,
     785,   715,     0,     0,   159,   884,   723,    40,    41,    42,
      43,    44,    45,    46,  1673,  1669,    47,   267,   266,   260,
       0,     0,     0,     0,     0,  1649,     0,     0,   261,   114,
    1697,  1698,  1699,  1700,  2314,  1701,  1702,  1703,  1704,  1705,
    1706,  1707,  2315,  2068,  1708,  1709,  1710,  1711,  1712,  2069,
    1713,  1714,  1715,  2014,  2015,  2070,  2016,  2017,  1716,  1717,
    1718,  1719,  1720,  1721,  1722,  1723,  1724,  1725,  2018,  2019,
    1726,  1727,  1728,  1729,  1730,  2020,  2071,  2021,  1731,  1732,
    1733,  1734,  1735,  2072,  1736,  1737,  1738,  1739,  1740,  1741,
    1742,  1743,  2316,  2073,  1744,  1745,  1746,  1747,  1748,  1749,
    1750,  1751,  1752,  1753,  2022,  1754,  1755,  2023,  1756,  1757,
    1758,  1759,  1760,  1761,  1762,  1763,  2317,  1764,  1765,  1766,
    1767,  1768,  1769,  1770,  1771,  1772,  2318,  2319,  1773,  1774,
    1775,  1776,  1777,  1778,  1779,  1780,  1781,  1782,  2024,  1783,
    1784,  1785,  1786,  1787,  2025,  1788,  1789,  1790,  2026,  1791,
    1792,  1793,  2074,  2075,  1794,  1795,  2027,  2077,  1796,  1797,
    2320,  2028,  2029,  2321,  1798,  1799,  1800,  1801,  1802,  1803,
    1804,  1805,  2078,  1806,  1807,  1808,  1809,  1810,  1811,  1812,
    1813,  1814,  1815,  1816,  1817,  2079,  2030,  1818,  1819,  1820,
    1821,  1822,  2031,  2032,  2033,  1823,  2080,  2081,  1824,  2082,
    1825,  2322,  1826,  1827,  1828,  1829,  1830,  1831,  2083,  1832,
    2084,  1833,  1834,  1835,  1836,  1837,  1838,  1839,  1840,  2034,
    1841,  1842,  1843,  1844,  1845,  1846,  1847,  1848,  1849,  1850,
    1851,  1852,  1853,  1854,  1855,  1856,  1857,  1858,  1859,  1860,
    2035,  2086,  2036,  1861,  1862,  1863,  2323,  2037,  1864,  1865,
    2087,  1866,  2038,  1867,  2039,  1868,  1869,  1870,  1871,  1872,
    1873,  1874,  1875,  1876,  1877,  2040,  2088,  1878,  2089,  2041,
    1879,  1880,  1881,  1882,  1883,  1884,  1885,  1886,  1887,  2324,
    2325,  1888,  1889,  1890,  1891,  2042,  2090,  1892,  1893,  2043,
    1894,  1895,  1896,  1897,  1898,  1899,  1900,  1901,  2326,  2327,
    1902,  1903,  1904,  1905,  2044,  1906,  1907,  1908,  1909,  1910,
    1911,  1912,  2328,  1913,  1914,  1915,  1916,  1917,  1918,  1919,
    1920,  1921,  1922,  1923,  1924,  2091,  1925,  1926,  1927,  2045,
    1928,  1929,  1930,  1931,  1932,  1933,  1934,  1935,  1936,  1937,
    1938,  1939,  1940,  1941,  1942,  1943,  1944,  1945,  1946,  2046,
    1947,  1948,  2329,  2092,  2330,  1949,  2047,  1950,  2331,  1951,
    1952,  1953,  1954,  1955,  1956,  1957,  1958,  1959,  1960,  1961,
    1962,  2048,  1963,  2049,  1964,  1965,  1966,  2094,  1967,  1968,
    1969,  1970,  1971,  1972,  2050,  2051,  2332,  1973,  1974,  2052,
    1975,  2053,  1976,  1977,  2054,  1978,  1979,  1980,  1981,  1982,
    1983,  1984,  1985,  1986,  1987,  1988,  1989,  1990,  1991,  1992,
    1993,  1994,  2055,  2056,  1995,  2095,  1996,  2333,  1997,  1998,
    1999,  2000,  2334,  2001,  2002,  2003,  2004,  2005,  2006,  2007,
    2008,  2009,  2057,  2058,  2059,  2060,  2061,  2062,  2063,  2064,
    2065,  2066,  2067,  2010,  2011,  2012,  2013,     0,   115,   116,
    1459,   117,  1680,     0,  1436,   114,  2027,  2034,  2048,  1512,
    1513,   115,   117,     0,   263,   676,     0,     0,     0,     0,
       0,     0,   214,     0,     0,   587,   586,     0,  1503,   592,
       0,     0,     0,   119,   110,  1894,   118,  1435,   108,   125,
    2238,  2239,  2240,  2241,  2125,  2242,  2243,  2244,  2245,  2126,
    2246,  2127,  2128,  2129,  2130,  2131,  2132,  2247,  2248,  2249,
    2134,  2133,  2250,  2135,  2251,  2136,  2252,  2137,  2138,  2253,
    2254,  2139,  1750,  2140,  2141,  2255,  2256,  2257,  2258,  2259,
    2260,  2261,  2262,  2263,  2142,  2143,  2264,  2265,  2144,  2266,
    2267,  2145,  2268,  2146,  2147,  2148,  2269,  2270,  2271,  2149,
    2150,  2272,  2151,  2273,  2274,  2152,  2153,  2156,  2154,  2275,
    2155,  2276,  2157,  2158,  2159,  2277,  2278,  2160,  2161,  2279,
    2162,  2163,  2164,  2165,  2166,  2280,  2167,  2281,  2168,  2169,
    2282,  2283,  2284,  2285,  2286,  2171,  2170,  2172,  2173,  2287,
    2288,  2289,  2290,  2174,  2175,  2176,  2291,  2292,  2177,  2293,
    2294,  2178,  2179,  2295,  2180,  2181,  2296,  2182,  2183,  2297,
    2184,  2185,  2298,  2299,  2300,  2186,  2301,  2187,  2188,  2302,
    2303,  2189,  2190,  2304,  2191,  2305,  2306,  2307,  2308,  2192,
    2193,  2309,  2194,  2310,  2311,  2312,  2313,  2195,  2196,  2197,
    2198,  2199,  2200,  2201,  2202,  2203,  2204,  2205,  1646,   127,
     126,   128,   129,     0,   611,   612,     0,   622,     0,   604,
     609,   605,     0,   631,     0,   624,   632,   613,   603,   625,
     614,   602,   213,     0,   633,   619,   607,     0,     0,     0,
       0,   264,   225,   593,     0,   160,     0,  1541,  1542,  1543,
    1544,  1545,  1546,  1551,  1547,  1548,  1549,  1550,  1552,  1553,
    1554,  1555,  1556,  1532,  1537,  1557,  1558,  1559,  1560,  1561,
    1562,  1563,  1564,  1565,  1566,  1567,  1568,  1569,  1570,     0,
    1514,     0,     0,  2020,  2071,  2025,     0,     0,  2038,     0,
    2041,  2042,  1928,  2049,  2052,  2053,  2054,  2055,     0,   955,
     118,   112,   939,     0,   718,   888,   898,   939,   944,  1222,
     967,  1223,     0,   120,  1614,  1613,  1609,  1608,   199,  1476,
    1658,  1796,  1835,  1945,  2050,  1973,  1676,  1659,  1653,  1657,
     265,   779,   777,     0,  1407,  1796,  1835,  1932,  1945,  2050,
    1588,  1592,     0,   262,     0,  1678,  1663,     0,  1664,   118,
     724,   771,     0,   269,  1627,     0,  1632,     0,  1908,   751,
     754,  1470,   752,   270,  2335,  2336,  2337,  2338,  2339,  2340,
    2341,  2342,  2343,  2344,  2345,  2346,  2347,  2348,  2349,  2350,
    2351,  2352,  2353,  2354,  2355,  2356,  2357,  2358,  2359,  2360,
    2361,  2362,  2363,  2364,  2365,  2366,  2367,  2368,  2369,  2370,
    2371,  2372,  2373,  2374,  2375,  2376,  2377,  2378,  2379,  2380,
    2381,  2382,  2383,  2384,  2385,  2386,  2387,   271,   272,     0,
     716,     0,     0,     1,   160,  1536,  1642,     0,   166,     0,
     775,   775,     0,   775,     0,   708,     0,     0,   716,   711,
     715,   885,  1675,  2050,  1973,  1662,  1665,  1804,     0,     0,
    1804,     0,  1804,     0,  1804,     0,     0,  1652,  1391,     0,
    1437,   121,     0,     0,  1525,  1521,  1526,  1522,  1527,  1520,
    1519,  1528,  1524,     0,     0,     0,   558,   591,   590,   589,
     588,   593,     0,  1804,  1487,     0,   640,   641,     0,     0,
       0,     0,     0,   210,  1498,   111,   109,  1804,  1647,   620,
     621,     0,   610,   606,   608,     0,     0,     0,  1804,  1465,
     630,   626,  1804,   630,  1429,  1804,     0,     0,   217,     0,
     586,  1534,  1571,  2192,  1572,  1573,  1574,  1586,     0,  1587,
    1577,  1540,   160,     0,   675,  1511,  1610,     0,     0,     0,
    1343,     0,   900,   939,   944,     0,     0,   957,     0,  1362,
       0,  1368,     0,     0,     0,   939,   723,     0,   898,   956,
     113,     0,   937,   938,   826,   826,   780,     0,   761,   949,
       0,     0,   952,   950,     0,   952,     0,     0,     0,   952,
     948,   907,     0,   826,     0,   937,   940,   826,     0,   959,
    1531,     0,     0,     0,     0,     0,  1656,  1654,  1655,  1660,
       0,     0,     0,  1439,  1441,  1442,  1311,  1452,  1202,     0,
    2015,  2016,  2017,  1383,  2018,  2019,  2021,  2022,  2023,  1161,
    1770,  2024,  1450,  2026,  2028,  2029,  2031,  2032,  2033,  2034,
    2035,  2036,     0,  1451,  2039,  1873,  2044,  2045,  2047,  2050,
    2051,  1449,  2056,     0,     0,     0,  1418,  1334,     0,  1201,
       0,     0,     0,  1384,  1392,  1194,     0,     0,  1003,  1004,
    1025,  1026,  1005,  1031,  1032,  1034,  1006,     0,  1414,  1095,
    1190,  1402,  1199,  1203,  1241,  1205,  1221,  1208,  1278,  1200,
       0,  1206,  1192,  1410,   761,  1408,     0,  1193,  1438,   761,
    1406,  1591,  1589,  1595,  1590,     0,     0,     0,     0,     0,
     113,  1634,  1635,  1626,  1624,  1625,  1623,  1622,  1629,     0,
    1631,  1537,  1329,  1331,     0,   753,     0,     0,     0,   328,
     705,   704,   706,     3,  1470,     0,     0,     0,     0,   773,
     774,     0,     0,     0,     0,     0,     0,     0,     0,   869,
     800,   801,   803,   866,   870,   878,     0,     0,     0,     0,
       0,   712,     0,  1674,  1668,  1666,     0,     0,     0,   144,
     144,     0,     0,     0,     0,     0,   102,    51,    95,     0,
       0,     0,     0,   239,   252,     0,     0,     0,     0,     0,
     249,     0,     0,   232,   226,   228,    53,     0,   144,     0,
      49,     0,     0,     0,    55,  1650,     0,   675,  1390,     0,
     123,   124,   122,   114,     0,  2206,  2068,  2069,  2070,  2071,
    2021,  2072,  2073,     0,  2074,  2075,  2027,  2077,  2078,  2079,
    2080,  2081,  2082,  2083,  2084,  2034,  2086,  2087,  2088,  2089,
    2090,  2091,  2232,  2092,  2048,  2094,  2054,     0,  2095,  1214,
     115,  1455,   117,  1337,   785,  1335,  1471,     0,     0,  1523,
       0,     0,     0,     0,   673,     0,     0,     0,     0,     0,
       0,  1483,     0,     0,  1804,   206,  1804,   558,     0,  1804,
     558,  1804,     0,  1804,   211,   215,  1497,  1500,     0,   623,
     630,   618,   616,   615,   617,  1804,   258,     0,     0,  1466,
     628,   629,     0,   597,     0,     0,   599,     0,     0,   222,
       0,   220,     0,   593,   160,     0,   233,  1582,  1583,  1581,
       0,     0,  1539,   236,  1576,  1585,  1575,  1584,  1538,   253,
    1533,     0,     0,  1529,   663,     0,     0,     0,     0,  1344,
    1072,  1071,  1055,  1056,  1069,  1070,  1057,  1058,  1065,  1066,
    1074,  1073,  1063,  1064,  1059,  1060,  1053,  1054,  1061,  1062,
    1067,  1068,  1051,  1052,  1357,  1345,  1346,  1347,  1348,  1349,
    1350,  1351,  1352,  1353,  1354,  1355,  1356,     0,     0,  2375,
     897,   895,     0,     0,     0,     0,     0,     0,  1384,     0,
    1165,  1200,     0,     0,     0,  1329,  1367,     0,     0,     0,
       0,     0,     0,  1329,  1373,     0,     0,   923,   935,     0,
     819,   825,   896,   894,     0,  1407,   889,     0,   969,   949,
       0,   948,     0,     0,   951,   945,     0,   946,     0,     0,
       0,     0,   947,     0,     0,     0,     0,   892,     0,   935,
       0,   893,   966,  1616,  1615,  1611,  1598,  1606,   200,     0,
    1461,  2096,  2097,  2098,  1013,  2099,  1042,  1020,  1042,  1042,
    2100,  2101,  2102,  2103,  1009,  1009,  1022,  2104,  2105,  2106,
    2107,  2108,  1010,  1011,  1047,  2109,  2110,  2111,  2112,  2113,
       0,     0,  2114,  1042,  2115,  1009,  2116,  2117,  2118,  1014,
    2119,   977,  2120,     0,  2121,  1012,   978,  2122,  1050,  1050,
    2123,     0,  1037,  2124,  1462,  1463,  1464,     0,  1340,   987,
     995,   996,   997,   998,  1023,  1024,   999,  1029,  1030,  1000,
    1094,     0,  1009,   160,  1661,  1677,     0,  1334,  1209,  1041,
    1028,  1382,     0,  1036,  1035,     0,  1334,  1018,  1017,  1016,
    1196,     0,  1015,  1291,  1042,  1042,  1040,  1120,  1019,     0,
       0,     0,     0,     0,  1046,     0,  1044,  1121,  1099,  1100,
       0,  1417,  1426,  1329,  1333,     0,  1194,  1329,     0,     0,
    1281,  1283,     0,  1211,  1212,     0,  1385,  1440,  1195,     0,
    1445,     0,     0,  1094,  1094,  1413,  1311,     0,  1301,  1304,
       0,     0,  1308,  1309,  1310,     0,     0,     0,  1405,     0,
    1319,  1321,     0,     0,  1136,  1317,     0,  1139,     0,     0,
       0,     0,  1305,  1306,  1307,  1297,  1298,  1299,  1300,  1302,
    1303,  1315,  1296,  1117,     0,  1191,     0,  1244,     0,  1116,
    1411,   887,     0,  1443,   887,  1600,  1604,  1605,  1603,  1599,
       0,  1594,  1593,  1596,  1597,  1679,     0,  1636,  1620,     0,
    1617,  1332,   882,   755,  1431,     0,   759,     0,   341,   320,
     342,  1643,  1641,   165,   164,     0,     0,   728,   727,   794,
     786,   788,   794,     0,   726,     0,   842,   843,     0,     0,
       0,     0,   875,   873,  1439,  1452,   830,   804,   829,     0,
       0,   808,     0,   834,  1095,   868,   710,   798,   799,   802,
     709,     0,   871,     0,   881,     0,   747,   749,   732,   746,
     744,   729,   737,   869,   803,     0,  1667,     0,     0,     0,
       0,     0,  1804,     0,     0,   980,    86,    67,   510,   143,
       0,     0,     0,     0,     0,     0,     0,    94,    91,    92,
      93,     0,     0,     0,     0,  1461,   237,   238,   251,     0,
     242,   243,   240,   244,   245,     0,     0,   230,   231,     0,
       0,     0,     0,   229,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1651,  1644,  1386,  1391,   785,   785,   785,
       0,   783,   784,     0,     0,     0,     0,     0,   662,   556,
     566,     0,     0,     0,     0,  1487,     0,     0,     0,     0,
       0,   210,   275,   274,     0,     0,   593,  1488,  1486,  1490,
    1489,  1491,  1776,   194,     0,     0,   205,   202,     0,   555,
     529,     0,     0,  1502,     0,     0,     0,     0,     0,     0,
    1804,   545,  1499,     0,  1648,   273,     0,     0,   256,   630,
    1467,     0,   627,   630,  1430,     0,   630,   224,     0,     0,
    1535,  1578,   234,   254,   235,   255,   675,   670,   700,     0,
     678,   683,   660,     0,   660,     0,   680,   684,   660,   679,
       0,   660,   674,  1612,     0,  1237,     0,  1227,     0,     0,
     958,     0,     0,  1228,  1167,  1168,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1185,  1184,  1229,   962,     0,   965,
       0,     0,  1365,  1366,     0,  1230,     0,     0,  1372,     0,
       0,     0,  1235,     0,   899,     0,     0,     0,   814,   818,
     821,     0,   824,   761,   717,  1796,  1835,     0,   772,   772,
     772,   770,   760,     0,   846,     0,     0,   924,     0,     0,
     926,   928,     0,     0,   931,   906,   905,     0,     0,     0,
       0,   970,     0,  1435,     0,     0,   201,     0,     0,     0,
     995,     0,     0,     0,   985,   981,     0,  1075,  1076,  1077,
    1078,  1079,  1080,  1081,  1082,  1083,  1084,  1085,  1086,  1001,
    1475,     0,  1007,  1480,  1481,  1478,  1474,  1477,  1479,  1482,
       0,     0,     0,     0,  1381,  1377,     0,     0,     0,     0,
    1286,  1288,  1290,     0,  1039,  1038,  1295,  1301,  1304,  1308,
    1309,  1310,  1305,  1306,  1307,  1297,  1298,  1299,  1300,  1302,
    1303,     0,  1323,     0,  1277,     0,     0,     0,     0,     0,
       0,  1416,     0,  1163,     0,  1207,  1198,     0,     0,  1284,
    1213,  1418,  1393,     0,     0,     0,  1448,  1447,  1096,  1105,
    1108,  1140,  1141,  1112,  1113,  1114,  1118,  1473,  1472,  1412,
       0,  1404,     0,     0,  1097,  1122,  1127,     0,  1374,  1157,
       0,  1145,     0,  1135,     0,  1143,  1147,  1123,  1138,     0,
    1119,     0,  1405,  1320,  1322,     0,  1318,     0,  1109,  1110,
    1111,  1101,  1102,  1103,  1104,  1106,  1107,  1115,  1294,  1292,
    1293,     0,  1391,     0,  1403,     0,     0,  1246,     0,     0,
    1142,  1409,     0,   969,   785,   969,     0,  1094,  1637,  1470,
    1630,  1619,  1470,  1330,  1432,  1469,   757,     0,     0,   327,
     323,   335,     0,   366,   341,   328,   313,     0,  1639,   151,
     155,     0,  1392,   185,   187,   887,     0,   792,   793,   797,
       0,     0,   797,   776,   725,  2045,  1928,     0,     0,     0,
       0,   835,   876,     0,   867,   832,   833,     0,   831,  1439,
     836,  1438,   837,   840,   841,   809,  1427,   877,   879,     0,
     872,     0,  1433,   731,   750,     0,     0,     0,     0,     0,
     714,   713,   883,     0,    52,     0,  1804,    69,     0,     0,
       0,     0,     0,     0,   460,     0,   560,   460,   107,  1804,
     630,  1804,   630,  1701,  1771,  1946,     0,    65,   534,    98,
       0,   137,   563,     0,   519,    88,   103,   130,     0,     0,
     227,    54,   241,   246,   133,   250,   247,  1507,   248,   144,
       0,    50,     0,   131,     0,  1505,     0,     0,    56,   135,
    1509,  1652,     0,  1390,     0,   783,   783,   783,     0,  1336,
       0,     0,     0,  1338,  1339,  1135,  1516,  1517,  1518,  1515,
     648,   661,     0,   557,     0,   672,   651,   652,   662,     0,
    1485,     0,   206,   558,     0,   558,     0,   215,     0,  1487,
       0,     0,   196,   192,     0,     0,     0,     0,   556,   548,
     546,   579,     0,   553,   547,     0,     0,   505,     0,  1695,
       0,     0,     0,     0,   642,     0,     0,   210,   216,     0,
       0,     0,   258,   259,   596,  1468,   598,     0,   600,   223,
     221,  1530,   667,     0,   666,   671,   665,   669,   664,     0,
     659,     0,   693,     0,     0,     0,     0,     0,     0,     0,
       0,  1224,  1342,     0,  1360,  1359,  1166,  1173,  1176,  1180,
    1181,  1182,  1361,     0,     0,     0,  1177,  1178,  1179,  1169,
    1170,  1171,  1172,  1174,  1175,  1183,   967,     0,     0,   961,
    1370,  1369,  1363,  1364,     0,  1232,  1233,  1234,  1371,     0,
       0,   936,   812,   810,   813,   815,   811,     0,     0,   969,
     772,   772,   772,   772,   769,     0,     0,     0,   968,     0,
     863,   930,     0,   954,     0,   927,   910,     0,   918,     0,
     925,   974,   941,     0,     0,   943,  1607,   991,     0,   986,
     982,     0,     0,     0,   992,     0,     0,     0,     0,     0,
       0,     0,  1341,   778,  1210,     0,     0,     0,  1378,     0,
    1162,  1008,  1021,     0,  1289,  1204,     0,  1312,  1276,  1049,
    1048,  1050,  1050,     0,     0,     0,  1425,     0,  1330,  1280,
    1282,  1426,  1197,  1033,  1094,     0,     0,     0,     0,     0,
       0,     0,  1146,  1137,     0,  1144,  1148,     0,     0,     0,
    1131,     0,     0,  1129,  1158,  1125,     0,     0,  1159,  1390,
       0,  1394,     0,     0,  1245,  1254,   890,   886,   846,   783,
     846,     0,  1601,  1621,  1618,   758,   160,   323,   321,   322,
     323,   323,   323,   323,   333,   339,   334,   323,   323,   323,
     385,     0,   383,   328,   391,   366,   366,   367,   344,   389,
     391,   353,   363,   362,   319,   343,     0,   317,  1640,     0,
     174,     0,     0,     0,     0,   177,   191,   188,  1639,     0,
       0,   787,   789,     0,  1313,   797,   791,   839,   838,     0,
     807,   874,   805,     0,   880,     0,   748,     0,   734,     0,
     909,     0,     0,     0,     0,     0,   509,     0,     0,     0,
     460,     0,   568,     0,   575,     0,     0,   560,   541,    87,
       0,     0,     0,    61,   106,    79,    71,    57,    85,     0,
       0,    90,     0,    83,   100,   101,    99,   104,     0,   470,
     495,     0,     0,   506,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   675,  1391,  1387,  1391,     0,
       0,     0,   785,   781,   782,  1215,     0,   647,   699,   696,
     697,   695,   232,   567,     0,     0,     0,   204,   555,     0,
    1502,     0,     0,     0,  1484,   593,     0,   197,     0,   195,
       0,   206,   558,     0,   533,   529,   554,   527,   526,   528,
       0,  1696,   225,     0,  1690,   558,  1501,     0,     0,   643,
       0,   637,   215,     0,     0,  1496,   257,   630,     0,   655,
     694,   701,   681,   686,     0,   692,   688,   687,   682,   690,
     689,   685,  1225,  1236,  1358,     0,     0,     0,     0,   960,
     963,     0,  1231,  1226,   934,     0,     0,   846,     0,     0,
       0,     0,   763,   762,   768,     0,     0,  1248,   929,     0,
       0,     0,   916,   904,   911,   912,     0,     0,     0,   972,
     971,   942,   995,     0,   975,   995,     0,   995,     0,   993,
       0,  1002,  1087,  1088,  1089,  1090,  1091,  1092,  1093,  1027,
       0,  1380,  1376,  1285,  1287,  1324,  1045,  1043,  1415,  1329,
    1420,  1422,     0,     0,     0,  1279,  1164,  1446,  1098,     0,
       0,  1128,  1375,  1149,     0,     0,     0,  1124,  1312,     0,
       0,     0,     0,     0,  1133,     0,  1398,  1391,     0,  1397,
       0,     0,     0,     0,  1220,   891,   863,     0,   863,     0,
       0,   332,   338,   331,   330,   329,   336,   340,   326,   383,
     388,   384,   386,   323,     0,   390,   380,     0,   364,   365,
     345,   366,     0,   350,   349,   351,   348,   393,     0,     0,
       0,     0,   312,   396,  1200,     0,     0,  1638,     0,  1633,
     152,   153,   154,     0,     0,     0,   169,   146,     0,     0,
     186,   174,   162,   795,   796,     0,   790,   806,  1428,  1434,
     733,     0,  1194,     0,     0,   730,     0,   138,   460,     0,
       0,    68,     0,   577,   521,   569,   552,   536,     0,     0,
       0,   461,     0,   594,     0,     0,   542,     0,     0,     0,
       0,   522,     0,     0,   481,     0,     0,   552,     0,   559,
     477,   478,     0,    60,    80,     0,    76,     0,   105,     0,
       0,     0,     0,     0,    63,    75,     0,    58,     0,   630,
     630,    66,  1461,  2096,  2097,  2098,  2099,  2100,  2101,  2102,
    2103,  2104,  2105,  2216,  2106,  2107,  2108,  2109,  2110,  2111,
    2112,  2113,  2225,  2114,   467,  2115,  1873,  2116,  2117,  2118,
    2119,  2120,     0,  2121,   978,  2122,  2123,  2305,  2124,  1297,
    1298,   465,   466,   562,   462,  1462,   463,  1464,   570,   464,
       0,   565,   520,   134,  1508,     0,   132,     0,  1506,   141,
     139,   136,  1510,  1645,     0,     0,  1218,  1219,  1216,   783,
       0,     0,     0,   675,   654,     0,     0,     0,  1695,     0,
       0,     0,   301,   283,   311,     0,  1804,     0,   193,     0,
    1502,   203,   555,     0,   585,   505,   580,     0,  1695,  1693,
       0,  1502,  1689,     0,   634,     0,   207,     0,     0,     0,
     601,   668,     0,   691,  1186,     0,     0,     0,     0,   822,
       0,   828,   863,   767,   766,   765,   764,   845,  1745,  2028,
    1927,     0,   849,   844,   847,   852,   854,   853,   855,   851,
     862,     0,   865,   953,  1325,  1327,     0,     0,     0,     0,
     917,   919,     0,   921,     0,   973,   989,     0,   990,     0,
     988,   983,   994,  1379,  1423,  1424,  1419,     0,  1095,  1155,
    1153,  1150,     0,  1151,  1132,     0,     0,  1130,  1126,     0,
    1160,     0,     0,  1395,     0,  1240,     0,  1243,  1257,  1253,
    1252,  1248,  1215,  1248,  1602,   756,   324,   325,   337,   387,
     366,   353,   381,   382,   313,     0,   395,     0,   368,     0,
     347,     0,   418,   419,   400,   401,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1405,     0,     0,     0,     0,
       0,   434,     0,     0,   437,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     315,   173,   150,   176,   175,     0,  1392,   183,     0,     0,
     174,     0,   178,   644,     0,     0,   745,   908,   738,   739,
       0,   573,    70,     0,   552,     0,   460,   538,   537,   540,
     535,   539,     0,   595,     0,     0,   479,     0,   486,   524,
     525,   523,   480,   552,   558,   482,     0,     0,     0,    72,
      62,    59,    64,    73,     0,     0,    74,    77,   974,    89,
      82,  1461,  2225,  2234,     0,     0,     0,     0,     0,  1389,
    1388,     0,   650,   649,   698,   646,   657,   232,     0,     0,
       0,   529,  1692,     0,     0,   639,     0,     0,     0,     0,
       0,   298,   290,     0,     0,   555,   198,     0,     0,     0,
    1695,     0,     0,   457,     0,   502,     0,   218,  1694,     0,
       0,  1681,     0,     0,     0,  1494,  1495,     0,   656,  1187,
       0,  1188,   964,     0,     0,   820,  1248,     0,     0,     0,
     856,   850,     0,  1247,  1249,     0,   817,  1328,   913,     0,
     915,     0,   939,     0,   939,   922,   984,   976,  1421,  1238,
       0,  1152,  1156,  1154,  1134,  1391,  1399,  1391,  1396,  1242,
    1256,  1259,   865,  1444,   865,   313,   361,   359,     0,     0,
     376,   379,   346,   383,   353,   348,   397,   408,   438,   439,
     412,   413,   414,   416,     0,     0,     0,   398,   420,   425,
     455,     0,   443,     0,   433,     0,   441,   445,   421,   436,
     417,     0,  1405,     0,     0,     0,     0,   409,   410,   411,
     402,   403,   404,   405,   406,   407,   415,   440,     0,   314,
     318,     0,     0,   161,     0,     0,   158,   145,   163,  1314,
     735,   736,     0,   460,     0,   551,   574,   491,   469,     0,
       0,     0,   476,   483,   584,   485,     0,    81,    97,     0,
       0,   564,   142,   140,  1217,   675,     0,   283,  1502,   505,
    1689,   636,   209,   302,   283,   279,   309,   297,     0,     0,
     310,     0,   292,     0,     0,     0,   529,   225,  1691,   518,
     511,   512,   513,   514,   515,   516,   517,   532,   531,   503,
     504,     0,     0,     0,     0,     0,   638,     0,  1496,     0,
     180,   189,     0,   180,  1189,   823,     0,   865,     0,     0,
       0,   848,     0,     0,   864,     0,   721,  1326,     0,   903,
     901,     0,   902,     0,     0,     0,     0,   785,   817,   817,
     359,     0,   392,     0,   373,   377,   394,     0,     0,     0,
       0,     0,     0,     0,   444,   435,     0,   442,   446,     0,
       0,   429,     0,     0,   427,   456,   423,     0,   316,   147,
       0,   148,   184,     0,     0,     0,   558,   576,   550,     0,
     543,   489,   488,   490,   494,     0,   492,     0,   508,     0,
     501,   469,     0,    84,     0,   571,   645,   653,     0,     0,
     459,  1683,   282,   276,   277,     0,   280,   299,   303,     0,
       0,   289,     0,   293,   555,     0,  1689,   505,  1695,  1689,
       0,  1686,     0,   635,   208,     0,     0,     0,   182,  1502,
       0,   182,     0,   817,   858,     0,   857,  1251,  1250,   819,
     914,     0,  1239,  1401,  1400,     0,  1263,   720,   719,   360,
     357,   378,     0,     0,   352,   399,     0,     0,   426,   447,
       0,     0,     0,   422,     0,     0,     0,     0,     0,   431,
       0,     0,     0,     0,   584,     0,   530,     0,     0,   491,
       0,   484,   581,   582,   583,     0,   497,   487,   498,    78,
      96,   572,   279,     0,     0,     0,   308,     0,   306,     0,
     555,  1684,   458,   219,  1682,  1687,  1688,     0,   180,   179,
     794,   181,   969,   190,   794,   827,   722,   859,   816,   920,
    1258,     0,     0,     0,     0,     0,   358,   374,   369,   375,
     371,   453,   451,   448,     0,   449,   430,     0,     0,   428,
     424,     0,     0,   157,   969,   168,     0,   501,   549,   544,
     468,   493,   507,     0,     0,     0,   499,     0,   500,   281,
    1689,     0,   300,   304,     0,   307,     0,     0,   182,   797,
    1492,   797,  2014,  1746,  1980,     0,  1275,  1264,  1275,  1275,
    1255,   355,   354,   356,     0,     0,   450,   454,   452,   432,
     149,   156,     0,   460,   473,     0,   472,     0,   561,   496,
    1685,   295,     0,     0,   287,     0,  1502,   794,   170,   171,
       0,  1268,  1267,  1266,  1270,  1269,     0,  1262,  1260,  1261,
     370,   372,   969,   578,   471,   475,   474,     0,     0,     0,
       0,   291,     0,   969,   797,     0,     0,  1272,     0,  1273,
     167,   295,   278,     0,     0,     0,   305,   288,  1493,   172,
    1265,  1271,  1274,   294,     0,   285,   286,     0,     0,     0,
     284,     0,     0,     0,   311,   290,   292,   296
};

/* YYPGOTO[NTERM-NUM].  */
static const yytype_int16 yypgoto[] =
{
   -3442, -3442, -3442,  2069,    88,    89,  -973, -1270, -1002, -1284,
   -3442,   -40,    91, -3442, -3442,   290, -3442,  1158, -3442,   276,
    -835,   689, -3442,  1258, -3442, -3442,  1705,   648,    92,    94,
    2227, -3442,  1128, -3442,  1041,    -7,  4328,  3039,  -534,  -975,
   -1316,   121,     9, -3442, -3442, -3442, -3442, -3442,  -809,   627,
   -1293, -3442,   567, -3442, -3442, -3442, -3442,  -142,   261, -2369,
       4, -2269, -3160,  -659, -3442,  -818, -3442,  -309, -3442,  -739,
   -3442,  -643,  -747,  -804, -2999, -1218, -3442,  1767,  -363, -3442,
     729, -3442, -2682, -3442, -3442,   718, -3442, -1234, -3442, -1883,
     257,  -721, -2768, -2701, -2253,  -985,   341,  -727,   316, -2190,
    -988, -3442,   743, -3442,  -712, -3442,  -954, -2580,    96, -2991,
   -1688,  2870, -3442, -3442, -3442,  -743, -3442, -2675,  5923, -3442,
      97,  1690, -2175,   101, -1733, -3442, -3442, -1748,    62, -2192,
      11, -2165,   108, -3442, -3442,   111,    26,  -624,   385, -3442,
     114, -3442, -3442,  1661,  -960, -3442, -3442,   629,   120,  1114,
   -3442, -2668, -3442,  -588, -3442,  -645,  -640, -3442, -3442,    30,
    -968,  1662, -3442, -3442, -3442,    13, -3442,  -529, -3442, -3442,
   -2712, -3442,    27, -3442, -3442, -3442, -3442, -3442,  -461,   403,
   -3442, -3442,  -639, -2745,  -578, -3442, -3279, -2950, -3442, -3442,
    -797, -3017, -2126,   127,   123,  1659,     0, -3442,   697, -3442,
    -695, -3442, -2425, -2766, -3442,  -863, -3442,  -865,  -864, -2375,
    -840,  -822, -3442,  -691, -3441,  -785, -3442, -3442,  -845, -2943,
   -3442, -3442,  2314, -3442, -1397, -3442,   468, -2331, -3442,   868,
   -3442,   869, -3442,  -362, -2957, -3442, -3442,  -513, -3442, -3442,
   -3442, -2345,  -132,  -754,  -753, -3442, -3108, -3442, -3442, -2505,
   -3442, -3442, -3442,   471, -3442, -3442,  3849,   128,   132, -3442,
     499,   135, -1219,    14,  1501,   -42,   -43, -3442,   -20, -3442,
   -3442, -3442,   832, -3442, -3442,    36,    76,  1902, -3442, -1067,
   -3442, -1511,   772, -3442,  2056,  2057, -2232,  -920,   -70, -3442,
     870, -1747, -2205,  -667,  1323,  1896,  1916,   640, -2793, -3442,
    -577, -3442,    53, -3442, -3442,   876,  1376, -1607, -1525, -3442,
   -2282, -3442,  -447,  -267, -3442, -3442, -3442, -3442, -3442, -2532,
   -3083,  -658,  1354, -3442,  1918, -3442, -3442, -3442, -3442,    41,
   -1578,  3165,   922,    70, -3442, -3442, -3442, -3442,   319, -3442,
    1116,   -30, -3442,  2367,  -674,  -820,  2129,    85,   279, -1798,
      45,  2381,   699, -3442, -3442,   690, -2176, -1494,   654,  -177,
    1110, -3442, -3442, -1263, -3442, -1969, -1253, -3442, -3442,  -873,
    -509, -3442, -3442, -3442,  1934,  1993, -3442, -3442,  2334,  3128,
   -3442,  -802,  3745,  -874, -1115,  2150, -1005,  2160, -1007, -1009,
   -1012,  2161,  2164,  2166,  2169,  2191,  2194, -1586,  7828,   473,
    8888, -2287, -3442, -2262,  1231,    93, -3442, -1472,   116, -3442,
   -3442, -3442, -3442, -2896, -3442,  -424, -3442,  -421, -3442, -3442,
   -3442, -1876, -2958, -1930, -3442,  9611,  1043, -3442, -3442,   632,
   -3442, -3442, -3442, -3442, -1616, -3442,  8605,   938, -3442, -2085,
   -3442, -3442, -1052,  -806,  -535, -1077, -1297, -1994, -3442, -3442,
   -3442, -3442, -3442, -3442, -1542, -1817,  -176, -2153, -3442, -3442,
    1089, -3442, -3442, -3442, -1783, -2200, -3442, -3442, -3442, -2139,
    1687,   236,  -856, -1706, -3442,  1055, -2463, -3442, -3442,   620,
   -3442,  -767, -1206, -2542,   363,   102, -3442,  3209, -2669, -3442,
   -3442,  -758, -2782, -1164,  -937, -3442,   138,  1449,    37, -3442,
     140,  1456, -3442, -3442, -3442,   141, -3442,   872,   142,   576,
   -3442,  1143, -3442,   742,    40, -3442, -3442, -3442,    77,  3124,
      22, -3241
};

/* YYDEFGOTO[NTERM-NUM].  */
static const yytype_int16 yydefgoto[] =
{
       0,    48,    49,    50,   777,   778,  1936,  1879,  3111,  1315,
    1869,  1443,   779,  2735,  2736,  2737,  2346,  1296,  3703,  2347,
    1297,  1298,  2739,    54,    55,    56,   117,  1327,   780,   781,
     549,    59,  2396,  1003,   829,  1183,   831,  1184,  1698,   991,
    1330,  1331,   782,  2777,  2408,  3397,  2828,  3398,  2471,  2402,
    1453,  2465,  1978,  1913,  1454,   558,  1992,  2829,  2782,  1979,
     783,  2724,  3113,  3696,  2750,  3908,  3049,  3050,  3693,  3694,
    2727,  2349,  3796,  3797,  2811,  1860,  3791,  2429,  3607,  2353,
    2334,  3051,  2437,  3555,  3164,  2350,  3031,  2430,  3689,  1952,
    2431,  3690,  3346,  2432,  1910,  1940,  2728,  3798,  2354,  1911,
    2723,  3114,  1848,  2433,  3700,  2434,   570,  3035,   784,  2814,
    1398,   538,   539,   540,  1625,   740,  1371,   741,   541,   948,
     785,  1022,  1946,   786,  1391,  1928,    65,  1405,   571,  1949,
     787,  1937,   788,  2798,  2799,   789,   790,  1231,  2680,  2268,
     791,   768,   769,  1040,  1423,   770,    71,  1958,   792,  1429,
    1430,  1048,    73,   956,  1445,   793,  1446,  1447,  1058,    74,
    2830,  1060,  1061,    75,    76,   795,  3436,  3179,  1407,  1953,
    2442,   572,   796,  2996,  2270,  2683,  3685,    79,  3327,  2273,
    1257,  3330,  3621,  2989,  3325,  2684,  3738,  3820,  3328,  2274,
    2275,  3622,  2276,   797,   846,  1565,  3490,    81,  1924,  3715,
    3716,    82,  3409,  3965,  3954,  3955,  3915,  3592,  3723,  3153,
    3938,  3911,  3589,  3718,  3154,  3719,  3875,  3590,  3412,  2677,
    3540,  2986,    83,  2266,  2654,  3268,  1778,  2655,  2658,  2263,
    1779,  1780,  2971,  3281,  2977,  3893,  3836,  3652,  2964,  2665,
    2666,  2667,  2668,  3837,  3839,  3653,  3838,  3274,  3275,  2669,
    2670,  2671,  2966,  2967,  2672,  2673,  2982,   798,   799,  1125,
    2116,   800,  1851,   801,  1185,    89,    90,  1098,    91,  3340,
      92,    93,  1826,  1827,  1828,   877,   889,   890,  2258,  1538,
    2062,   882,  1261,  1795,   863,   864,  2392,   964,  1902,  1790,
    1791,  2279,  2691,  1819,  1820,  1270,  1271,  2050,  3636,  2051,
    2052,  1531,  1532,  3445,  1807,  1811,  1812,  2300,  2290,  1798,
    2540,  3202,  3203,  3204,  3205,  3206,  3207,  3208,  1186,  2867,
    3456,  1815,  1816,  1273,  1274,  1275,  1824,  2310,    95,    96,
    2243,  2636,  2637,   835,  3219,  1555,  1829,  2871,  2872,  2873,
    3222,  3223,  3224,   836,  1093,  1094,  1117,  1112,  1545,  2070,
     837,   838,  2027,  2028,  2509,  1119,  2064,  2080,  2081,  2879,
    2562,  1627,  2335,  1628,  1629,  2095,  1630,  1187,  1631,  1657,
    1188,  1662,  1633,  1189,  1190,  1191,  1636,  1192,  1193,  1194,
    1195,  1650,  1196,  1197,  1674,  2097,  2098,  2099,  2100,  2101,
    2102,  2103,  2104,  2105,  2106,  2107,  2108,  2109,  1242,  1830,
    1199,  1200,  1201,  1202,  1203,  1204,  1205,   840,  1206,  1207,
    1747,  2237,  2635,  3212,  3453,  3454,  2944,  3260,  3481,  3647,
    3834,  3886,  3887,  3927,  1208,  1209,  1690,  1691,  1692,  2130,
    2131,  2132,  2133,  2231,  1741,  1742,  1210,  3119,  1744,  2153,
    3215,  3216,  1243,  1524,  1685,  1374,  1375,  1641,  1497,  1498,
    1505,  2002,  1513,  1517,  2032,  2033,  1525,  2199,  1211,  2124,
    2125,  2579,  1652,  1212,  1329,  1697,  2939,  2234,  1745,  2193,
    1219,  1213,  1220,  1215,  1681,  1682,  2596,  2911,  2912,  2163,
    2307,  1774,  2312,  2313,  1044,  1216,  1217,  1218,  1376,   544,
    1642,  3821,  1419,  1248,  1377,  2189,   802,   109,   803,    99,
     804,  1238,   886,  1239,  1241,   805,   857,   858,   806,   870,
     871,  1567,  1761,  1568,   952,   104,   105,  1284,   859,   878,
     808,  3431
};

/* YYTABLE[YYPACT[STATE-NUM]] -- What to do in state STATE-NUM.  If
   positive, shift that token.  If negative, reduce the rule whose
   number is the opposite.  If YYTABLE_NINF, syntax error.  */
static const yytype_int16 yytable[] =
{
     537,   550,  1043,   990,    61,   951,   576,  1214,  1314,    60,
    1041,    66,   576,    77,    87,  1332,   830,  1113,   844,   844,
     965,  1384,   106,   848,   576,   856,    69,    78,   856,  1516,
    1883,   875,   879,  1055,  1894,   879,    94,    98,   576,   576,
     103,  1775,  2029,  1882,  2241,  2282,  1569,   949,  1866,  1280,
     794,   969,   876,  2152,  1847,  1676,    94,  1387,  1490,  1442,
     807,  1489,  2624,  1488,   833,  1486,  2084,  2638,  2729,  2640,
    1899,  1853,  2686,  2622,   970,  1857,  3116,  2696,  3149,   767,
    2823,  1244,  3120,  1426,   880,   830,   830,  3147,    51,    52,
    1781,    53,    57,  1448,    58,  2558,    62,    63,   875,  1887,
     542,    64,  1960,   879,   576,   879,   879,   879,    67,   543,
    1432,    68,   872,  2384,    70,  1332,   839,  2176,  2177,   975,
      72,  2560,   892,  3165,  2619,   543,  1688,    80,    84,  1933,
    1051,  2910,    85,   833,   833,    86,  1057,   738,    97,   841,
     100,   101,   102,  2722,  3168,  2685,  1316,  1751,  1320,   847,
    1324,  2783,  1754,  2769,  2770,  2771,  2960,  3402,   983,  1095,
   -1518, -1437,   966,   967,  1116,  3010,  3423,  3491,  -703,  3015,
   -1050,  -707, -1042,  2417,  2660, -2085,  2245,  3427, -2085,  3587,
   -1457, -1050,  2410, -2225, -2225,   839,   839, -1047, -1453, -1453,
   -2076, -1047, -2093,  1137,   543,   543, -1458, -1457, -2216, -2216,
   -2234, -2234, -1460,  2302, -1454, -1454,  1062, -2076,   841,   841,
   -1456, -1456,   843, -2093, -1458,  2512,  1137, -1460, -1009, -1022,
   -1037,  2660,   843,  1758,   843,  2792,  3571,   843,  2660,  1420,
    2414, -2211, -2211,  1288,  2800,  1436,  1755,  1436,   843,  1289,
    1137,  2791,  1137,  2656,  1137, -2236, -2236,  2787,  1226,  2006,
    1640,   555,  3599,  1500,  2008,  1332,  3333,  1897,   884,  2874,
     957, -1295,  1457,  -232,  1539,  3350,  1898,  2541,  -232, -1295,
    -703,  -658,  2191,  -707,  2191,  1658,  1707,  2577,  3286,  3365,
    2550,  1709,  1411,  3287,  2875,  2835,  2837,  2305,  2840,  2191,
    3863,  1668,  3558,  3272,  1420,  2212,  1090,  1269,  1031,  2228,
    1867,  1233,  3904,  1870,  1871,  2315,  1272,  2229,  3600,  1858,
    3683,  2191,  1420,  1717,  3486,  3294,   843,  3601,  1055,  2952,
    2968,  2969,  1412,  2046,  2807,  3792,  2956,  2957,  2958,  2406,
    -840,  3487,  3737,     3,     4,  1258,  2264,  3713,  3385,  3711,
    3831,  3602,  1653,  1654,  3741,  1230,  1290,  1719,   962,  3296,
     962,  1760,  1756,  2857,  2046,   958,  2946,  2200,  2948,  1666,
    2090,  2522,  2524,  1922,  1799,  3482,  1849,  3484,  3855,  2238,
     556,  1684,  3027,  3424,  3053,  3140,   578,  1885,  3448,  2006,
    3654,  3655,   772,  2007,  2008,   810,  2201,  2006, -1316,  3425,
    3935,  2007,  2008,  1849,   849,  1783, -1316,  2260,  3169,  3648,
    1116,  3649,  2390,  1102,  2757,  2261,  3361,  2947,   891,   891,
    1800,  2778,  1095,   843,  3261,  1943,  3263,  1450,  3603,  2525,
     861,  2213,  1831,  1832,  1265,  2725,  2846,  1640,  3612,  3598,
    3912,  3604,   115,  3384,  3347,  1096,  1707,  2332,  3613,  -979,
    2214,  1103,  3421,  1796,  2178,  2215,  3522,  2277,  3417,  2630,
    1955,  3023,  3054,  2733,  1901,  3691,  2991,  1540,  1594,  3429,
    2485,  3418,  3033,  3323,  3028,  3793,  -703,  2256,  1105,  -707,
    1671,  1122,  3367,  1234,   979,  1235,  1835,  2961,   553,  1387,
    3372,  1757,  1123,  3066,  2216,  3811,  2767,  2962,  3814,  3034,
    3006,  2513,  1672,  2257,  3922,  3422,  3912,   809,  2768,  2333,
    3832,  2905,  3324,  1267,  1676,  2202,  1413,  1719,  1291,  -860,
    2395, -2210, -2210,  3348,  2992,  2204,  1227,  3905,  1640,  3692,
     116,  1707,  1859,  2239,   862,  1708,  1709,  2722,   811,  2722,
    3833,  3029,  2278,  1802,  3030,  1421,  1838,  3656,  3055,  3878,
    -703,  3286,  3650,  -707,  3743,  3684,  3287,  2535,  2536,  2537,
    3627,   879,  3856,   559,  1797,  3794,  3714,   879,  1717,  3936,
     879,  1856,  1784,  2726,  1670,  1923,  2523,  2526,   576,  3170,
    1292,  1005,  2391,  3362,  1293,  3192,  3553,  -979,  3294,  1097,
    3710,  1900,  2336,  2087,  2847,  3547,  2874,  3426,  2554,  2316,
    1856,  3523,  1719,  2152,  1228,  3563,  3524,  2407,  1803,  2398,
    1421,  1109,  3569,  2389,   959,  2327,  1294,  1131,  3906,  3273,
    3614,  2875,  3296,  1833,   885,  1632,  3396,  3351,  1421,   560,
    1541,  1032,  1834,  2926,  2123,  3858,  3278,  1414,  3559,  3910,
    3175,  1782,  3270,  1841,  3864,  3525,  3161,  3907,  2657,  3605,
    2265, -1295,  3606,  3173,  3183,  2455,  2217,  1649,   842,  1696,
    3141,  2647,  1883,  1770,  2192,  3840,  2621,  1963,  3923,  1041,
    3446,  2642,  1671,  -703,  1962,  2694,  -707,  3782,  2844,  1069,
    1966,  3505,  3588,  1671,  2205,  2244,  1858,  2661,  2053,  2230,
    1295,  2302,  2662,  2461,  1672,  2206,  2794,   988,  2663, -1437,
    2664,   989,  1055,  3672,  2073,  1672, -1518,  2688,  1673,  2822,
   -1042,  1422,  -703, -2085,  -703,  -707, -2085,  -707, -1457,  1675,
    1663,  3116,  1658,  1663,  2038, -1047,  2889,  3120, -2076,  3579,
   -2093,  1332,  2172,  1332, -1458, -1457,  1886,   557,  3812,  2959,
   -1460,  2480,  1668,  1028,   951, -2076,  3493,  3813,  2803,  1640,
    1702, -2093, -1458,  2486,  2868, -1460,  1656,  1661, -1037,  3341,
    1752,  1655,  2246,  2758,  1877,  1440,  1441,  1440,  1441,  3374,
    3375,  1039,   576,   576,  2699,  1084,  1425,  2023, -1316,  2112,
    2262,  3468,  2783,  2514,  3494,  1872,  1653,  1654,  1878,  1236,
    2519,   988,  3406,  -232,  -232,   989,   951,  3840,  2308,  1970,
    2389,  3824,  1632,  3550,  1740,  1057,  3316,  3526,  3551,  1843,
    3877,  1666,  1063,   550,   844,  2647,  1059,   565,  1881,  1050,
     537,    94,   879,  3359,  1707,   807,  2551,  3003,  1708,  1709,
    2551,   830,  1259,  1877,  2474,  1092,  1092,  2779,  2780,  2475,
    1092,  1115,   951,  1640,   969,  1707,   569,  3286,  3024,  2520,
    2120,  1684,  3287,   881,   856,   856,   856,  1878,  2572,  2332,
    1684,  1717,  2493,  2044,  3187,  3757,  3758,   970,   856,   856,
    1265,   856,  2134,  2135,  2155,  1266,  3709,  2362,  2445,  1086,
     887,  2751,  1717,  3332,  3294,   879,  2520,  2365,   953,  3946,
    2368,   576,  3286,  1632,  2752,  1719,  3410,  3004,  2730,  1859,
    2476,  2360,  3360,  2173,  2020,  2021,  2022,  2023,  1087,  1281,
    2018,  2019,  2020,  2021,  2022,  2023,  1719,  3391,  3296,  2309,
     839,  2719,  1858,  3226,  3727,  1237,  3228,  2631,  3230,   543,
    3334,   839,  1844,   960,  3920,  1873,  1260,  1232,  3917,  3728,
     543,  3242,  -784,   841,  1066,  1874,  3286,  -784,  1026,  1267,
    1553,  3177,   872,   872,   841,   872,  2648,  2649,  1849,   879,
    3826,  3411,   879,  3296,  2593,  1858,  3400,  1856,    61,  1850,
    3947,  2194,  3570,    60,  1245,    66,   107,    77,    87,  1961,
    2152,  1640,  2421,  3294,  1696,  2464,   106,  2385,  2386,  2387,
      69,    78,  3037,  3134,  1539,  3135,  2529,  3960,   988,  1268,
      94,    98,   989,  1554,   103,   961,   879,  1381,  1858,  2454,
    2494,  2731,  2324,  2456,  1232,   879,  2458,  3296,   954,  2466,
    2495,  -784,   879,   879,   879,   879,  1404,   108,  2917,  2858,
    2859,  2860,  2861,  3147,  3577,  3040,   955,  3822,   879,  2361,
    1416,  1432,  2651,  3584,  1288,  2029,  1737,  1738,  1739,  1740,
    1289,  1849,    51,    52,  1888,    53,    57,   986,    58,  2371,
      62,    63,  1852,  3948,  2378,    64,  3313,  3314,  3315,  3316,
     971,  -784,    67,  1858,  3617,    68,  1092,  1115,    70,   879,
    2652,   949,  1508,  1388,    72,   962,  1883,  3556,  1092,  1092,
     843,    80,    84,   883,   576,  2643,    85,  1891,  2644,    86,
     830,  2772,    97,  2961,   100,   101,   102,   830,    94,  2200,
    2648,  2649,   807,  3269,  1632,  2705,  1016,   576,   993,  3418,
    3116,  3511,  2121,  2653,  1563,  2611,  3120,  2363,   559, -2085,
    1640,  2127,  2366,  1102,  1645,  1859,  3543,  3476,  2201,  3663,
    2756,  1018,  1640,  1046,   994,  2694,   951,  1265,   833,  3477,
    3512,  1007,  3704,  1008,  2612,   833,  3510,  1290,  1533,  1961,
    2759,   978,  3708,   981,  3252,   985,  3506,  1858,  3664,  3712,
    1793,  1103,  1640,  1291,   992,  2336,  1557,  1536,  1859,  1640,
    1561,  1019,  1288,   576,  1546,  2473,   988,  1548,  1289,  2477,
    1695,  1017,  2479,  2650,   560,  1542,  2651,  1688,  1105,  3561,
     839,  1549,  3440,  1856,  3044,  2760,  1004,   839,  1632,   543,
    1799,  3969,   995,  1011,  3943,  1640,   543,  3974,  2796,  1640,
    1009,  1859,  1010,   841,  3949,  1640,  1267,  2808,  1787,  1788,
     841,  1794,  1765,  2816,  2652,  1767,  2232,  1012,   110,  2732,
    2233,  2733,   963,   996,  1055,  2518,  1856,  1640,  1916,   576,
     576,   970,   970,  -213,   970,  3045,  1800,  2202,   879,  1777,
    2951,   891,  2203,  1972,  2953,  2954,  2955,  2204,  1137,  3513,
    1021,  2734,  1434,  3046,  3514,  1435,  1268,  2653,  2613,  3515,
    1508,  1768,  1016,  2614,  1769,    23,  1859,   997,  1917,  1856,
     879,  1845,  3665,  1018,  3687,  1290,  1671,  3666,   988,  2764,
   -1437,  1974,   989,   879,  1136,  1023,  1137,  2006,  2884,  2697,
    1232,  2007,  2008,  1694,  1137, -2238, -2238, -2238,  1672,  1291,
     879,  1024,  1474,  1475,   879,  3413,  2575,  1801,  1029,  1893,
    1386,  1109,  1673,  1019,  2639,  1664,  1665,  1735,  1736,  1737,
    1738,  1739,  1740,  2973,  2047,  2974,  1632,  3891,  2869,  2048,
    1541,  2876,  3892,  2037,  1856,  2039,  2040,  1017,  2975,  2976,
    3311,  3312,  3313,  3314,  3315,  3316,  1647,  3188,   874,  -716,
    1020,  3762,  1884,  1967,  1030,  3763,  1968,  1919,  3047,  1802,
    1859,  3675,   565,  -716,  1050,  1293,  1909,  3048,  -716,   879,
    2741,  1033,  2743,  3673,  1547,  2136,   879,  1671,  1552,  2152,
    1035,  2609,  2137,  2138,  1034,  1927,  2139,  2140,  2141,  1036,
    1951,   569,  1929,   111,  1930, -2207, -2207,  1294,   998,  1672,
    1039,  1037,  1021,  1931,   112,  1039,  2205,   576,   576,   999,
     576,  1039,  1047,  1675,    27,    28,    29,  2206,  3516,  1067,
    2790,  -716,  2615,  1068,  1803,  1478,  1479,  2086,  1856,  3517,
    2087,  1221,  1222,  2616,  1224,  1069,  3667,  1291,  1563,  1916,
    3064,   113,  -716, -2208, -2208,   118,  1000,  3668,  2110,   554,
    2708,  2111,  2435,  3057,  2436,  1059,  2403,   771,  2468,  2404,
      94,  2469,  3133,  1070,   807,  2506,  2906,  2907,  2507,  1080,
    1001,  1295,   860,  1071,  3021,  1632,   873,  2552,  3118,  1917,
    2553,  3266,    34,  2555,  3267,  2747,  2553,  1632,  2748,  1508,
    1508,    88,  -716,   114,  2530,  1508,  2531,   537,  1002,  1318,
    1075,  -716,  3143,  1293,  3056,  2753,  3065,  2532,  2754,  2533,
    1092,    88,   576,  2049,   832,  2819,  1918,  1632,  2087,  1954,
     879,    39,  2881,   830,  1632,  2553,   830,  2882,  1078,    88,
    2111,   830,  1688,  2885,   830,  1319,  2886,  2887,   950,   830,
    2886,   576,  1509,   576,  1640, -2209, -2209,  2895,  2897,  2898,
    2894,  2896,  2893,  2892,  2998,    41,  3160,  2999,  3176,  2404,
    1632,  2469,  3181,  1977,  1632,  3182,    44,  1079,  1919,  3189,
    1632,   833,  3190,  1081,   833,  3243,  2014,  1082,  2111,   833,
    1288,  1083,   833,   832,   832,   968,  1289,   833,  3441,  1006,
    3442,  2111,  1632,  2553,  1084,  1014,    88,   839,  1015,   891,
    2065,  3471,  3478,  2067,  2111,  2087,   543,  3544,  2071,  1295,
    3545,  2074,  3578,  1089,  3582,  2404,  2078,  2469,  1118,   960,
     841,  1121,   874,   839,  3933,  3624,   839,  3734,  2111,  1124,
    2469,   839,   543,  -785,   839,   543,  3880,  1129,  -785,   839,
     543,  3739,  2113,   543,  3740,  1288,   841,  2117,   543,   841,
    3786,  1289,  2151,  3787,   841, -2212, -2212,   841,  -716,  2114,
    2115,  1130,   841,  2161,  3918,  3772,  3919,  2693,  3901,    94,
    2118,   559,  3806,  2119,  1131,  3807,  3845,  1640,   559,  2111,
    1706,  1132,  3644,  1707,  3645,  2303,  2304,  1708,  1709,  2827,
    2744,   961,  2746,  1290,  3854,   843,  3896,  3740, -1504,  2111,
    3916,  2172,  1039,  3740,  3941, -1504,  3956,  3942,  3970,  3807,
    1055,  1425,  -785,  1126,  1127,  1128,  1466,  1467,  1225,  3020,
    1717,  3022,  1229,  1262,  1240,  1264,  1246, -2238,   988,  3959,
    1249,  1250,   989,  1640, -2213, -2213,  1247,   560,  1250,  1288,
   -2214, -2214,  2284,  1251,   560,  1289,  3950, -2215, -2215,  2248,
    1252,   879,  1255,   879,  1719, -2217, -2217,  3958,  1290,  1256,
    2694,  1263,  -785, -2218, -2218,   970,  1282,  3844,   879,  2272,
    1283,   962,  3064, -2219, -2219,  3342, -2220, -2220,  1964,  1285,
    1965,  1508, -2221, -2221, -2222, -2222,  1286,  1474,  1475,  1237,
   -2223, -2223,  2420, -2224, -2224,  3378, -2238, -2238, -2238,  1049,
    2018,  2019,  2020,  2021,  2022,  2023,   879,  1287,   576, -2226,
   -2226, -2227, -2227, -2228, -2228, -2229, -2229,  1299,    14,    15,
    3171,  1300,  1845,   576,  1317,  2241,  1321,  2188, -2230, -2230,
    1325,  3155,  1326,   576,  2338,   576,  2342,  1379,   576,  2090,
    3395,  1382,  3139,  3014,   576,  1383,   576, -2231, -2231,  1390,
    1077,  3254,  1290, -2238,  1392,  1291,  1393,  3180,  1039,   576,
   -2233, -2233,  1408,  1039,   576,  1406,    23,  1640,   576,   576,
     576,   576, -2238,   576,   576,  1409,  1288, -2238, -2235, -2235,
     564,  1417,  1289, -2237, -2237,  1903,  1904,  2142,  2143,  2144,
    2400,  2145,  2146,  2147,  2148,  2149,  2150,   879,  -835,  -835,
     879,   879,   879,   879,  1404,  -839,  -839,  1428,   879,  1632,
    1478,  1479,  -838,  -838,  1476,  1477, -2238,  1322,  1478,  1479,
    1291,  1293,  2428,  2648,  2649,   565,  1418,  1050,   963,  1424,
    1136,  1433,   565,  2006,  1050,  3338,  3339,  2007,  2008,  2452,
    1427,  2009,  2010,  2011,  1451,  2439,  3888,  3889,  3928,  3929,
    1452,   568,   567,  1323,   569,  3623,  3467,  1455,   568,  1763,
    1764,   569,  1458,  1537,  1640,  2348,  1514,  2352,  1527,  2004,
    2005,  1529,  1728,  1530,  1543,  2025,  1544,  1550,  1551,  1556,
    1560,  1562,  2323,  1643,  1644,  1646,  1293,  1254,  1655,  1290,
    1508,  1508,  1508,  1508,  1508,  1508, -1013, -1020,  1508,  1508,
    1508,  1508,  1508,  1508,  1508,  1508,  1508,  1508,   874,  1659,
    -860,  -861, -1010,  3496,  1291,    27,    28,    29,  1294,    23,
   -1011,  1669, -1014,  1670,   559, -1012,  1680,  1295,   576,  1748,
    1693,  1699,  1701,  1746,  1380,  1762,  1776,  1772,  1750,  1771,
     879,  1640,  1632,  1389,  1785,  3370,  1786,  1266,    88,   830,
    1395,  1397,  1400,  1402,  1268,   830,  1821,  1823,  1825,  1836,
     576,  1854,  1861,  3879,  1855,   576,  1410,  3881,  1856,  1863,
    1868,  1862,  1875,  1876,  2561,  2561,  2369,  1880, -2238,  1890,
    1293,   115,  1896,    34,  1906,  1907,  1912,  1908,  1914,  1921,
     560,  1925,  1295,  1935,  1938,    36,  1939,   833,  1632,  3379,
    3380,  1926,  1941,   833,  1942,  1944,  1945,  1503,  1136,  1947,
    3225,  2006,  2370,  3118,  1948,  2007,  2008,  3575,    38,  2009,
    2010,  2011,    39,  1956,  1957,  1961,  2542,  2012,  1969,  1995,
    1997,  1998,  2545,  2000,  2003,  2026,  2066,  2063,  2035,  1688,
    2034,  2042,  2072,   576,  2045,   951,  2077,  2597,  2075,   839,
    2013,  1291,   576,  2076,  2082,   839,    41,  2088,   543,  2694,
    3944,  2085,  1649,  1656,   543,  1661,   562,    44,    27,    28,
      29,  2089,   841,  2091,  2093,  1508,  1508,  2094,   841,  2123,
    2092,  2122,  1137,  1707,  1640,    45,  1295,  2156,  1385, -2238,
    2162,  2157,  2151,  2328,  2165,  2167,  1735,  1736,  1737,  1738,
    1739,  1740,  3623,  2337,  2168,  2340,  2170,  2169,  2351,    46,
    2190,  2197,  2209,  2376,  2355,  2208,  2357,  1293,  1640,  2211,
    2235,  2236,  2014,   874,  2242,   830,  1386,  2255,  2254,  2364,
    2259,  2280,  1632,  -212,  2367,  2283,    34,   576,  2372,  2373,
    2374,  2375,   961,  2379,  2380,  3639,  2293,  2267,  2292,  2377,
     830,  2294,  2297,  2295,  2272,  1777,  2296,  2314,  3623,  2318,
    2319,  2329,  2322,  2325,  2330,  2331,    88,   950,   962,  2401,
    3356,  2405,  3706,   833,  2418,    39,  2411,  2422,   565,  2424,
     566,  2425,  2426,  2440,  2441,  2443,  2446,  2447,  2448,  2449,
    2453,  2450,  2470,  2451,   576,  2478,  2457,  1508,   833,  2031,
     576,  2006,  1640,  2508,  2030,  2317,  2527,   569,  1073,    41,
    2546,  2557,  2515,  2516,  2539,  2528,  1909,  2544,  1837,  1085,
      44,  1099,  2517,  1295,  2564,   839,  2438,  1100,  2013,  1632,
    2559,  1864,  2565,  2521,   543,  3623,  2566,  2568,    45,  2569,
    2570,  2571,  2573,  2581,  2584,  1640,    23,  2582,   841,  2574,
     839,  2589,  1889,  2590,  2586,  2585,  2605,  2587,  2610,   543,
    2626,  2588,    46,  2591,  2592,   950,  2602,  2603,   968,  3564,
     951,  2617,  2627,   841,  2634,  2645,   874,  2632,  2659,  2633,
    2676,  2646,  2679,  2681,  2682,  -841,  1101,  1909,  2687,  2689,
    2700,  2701,  2690,  2704,   879,  2707,  2703,  2711,  2713,  2715,
    2014,  2717,  1640,  2718,  1927,  2712,  1632,  1909,   879,   879,
     879,  1929,  2721,  1930,  2740,  2742,  2755,  1915,  2761,  2773,
    2762,   576,  1931,   879,  1934,  2774,   879,  2776,  2763,  1055,
    1404,  2789,  2775,  2788,   879,  2793,  2795,  2809,  2805,  2813,
    1039,  2810,  2015,  2016,  2017,    88,  2018,  2019,  2020,  2021,
    2022,  2023,  2806,  3538,  2348,  2348,  2348,  2817,  1909,  1909,
    1102,  1909,  2824,  2834,  2845,  2842,  2852,  2865,    23,  2848,
    2487,  2488,  2489,  2490,  2491,  2492,  2851,  2877,  2496,  2497,
    2498,  2499,  2500,  2501,  2502,  2503,  2504,  2505,  2866,  2878,
     537,  2853,  2854,  2891,  1883,    27,    28,    29,  1103,  2883,
    2902,  2924,  1640,  2899,  2908,  2914,  2943,  2922,  2985,  2937,
    2855,  2925,  3118,  2928,  1104,  2938,  2988,  2945,   879,   879,
     879,  2949,  3005,  2970,  3007,  1105,  3011,   576,  3507,  1508,
     576,  3019,  3068,  3025,  3009,  3026,   576,  3032,  3052,  3136,
    3137,  3145,   951,  3150,  3138,  3163,  3167,  3146,  3142,  1632,
    3158,  3178,  2940,    88,  3185,  3151,  3159,  3162,  2172,  1106,
    1977,  3186,  2404,    34,  3191,  3211,  3213,  3217,  2061,  2151,
    3221,  3231,  3232,  3271,  3234,   951,  3235,  3255,  3262,  3265,
    1977,  2068,  3277,  1632,  3276,  3279,  3280,  3318,   832,  3319,
     839,  3320,  3329,  3638,  3322,   832,  3331,  3335,  3336,   543,
    3337,  3343,    39,  3344,  1508,  1508,  3345,  1964,  1107,  3349,
    3353,  3354,  3355,   841,  3363,  1108,  3366,    27,    28,    29,
    2015,  2016,  2017,  3368,  2018,  2019,  2020,  2021,  2022,  2023,
    1648,  3628,  3640,  3630,  3642,  1136,    41,  3369,  3286,  3373,
   -2206, -2207,  1660,  3287, -2208,  2113,  3392,    44, -2209, -2210,
    2117,  3387,  3388,  1777,  2965,  2606,  2607,  3013,  1109,  1508,
    2965,  3403,  2114,  2115,  2990,    45, -2211,  1632,  3393,  1686,
    2272,  3399,    94,  2118,  3386,  3294,  2119,  1110,  3407,  3389,
   -2212, -2213, -2238, -2214, -2215,    34,   879,  2997, -2217,    46,
     576,  3784, -2218,  3830,   576,   576,   576, -2219, -2220, -2221,
    1909,  1845,  1909,   874,  1951,  3408, -2222,  3414,  3401,  3296,
    1632, -2223,  3788, -2224, -2226, -2227,  1301,  3756, -2228,  1136,
   -2229, -2230,  2006,   576,    39,  3070,  2007,  2008, -2231, -2232,
    2009,  2010,  2011, -2233, -2234, -2235,  1302, -2236,   576,   576,
     576,   576,   576,   576,   576,   576,   576,   576,  2919,  1111,
   -2237, -1454,   968,   968,  2069,   968, -1456,  3415,    41,  3390,
    3428,  3430,  3432,  3433,  3434,  3437,  3443,  1632,  3444,    44,
    3447,  2428,  3449,  3451,  3455,  3751,   879,  3661,  3457,   879,
    3461,  3458,  1303,  3462,  3463,  1640,  3466,  3470,  1927,  1845,
    2993,  2812,  3495,  3148,  3037,  1929,  3286,  1930,  3492,  2249,
    3038,  2252,  3504,  3519,  3541,  3521,  1931,  1951, -2238,  3542,
    3546,  3552,  3549,  3039,  3554,  3566,  2269,  1909,   951,  3567,
    3574,  3172,  3576,  3586,  3174,   874, -1453, -2238,  1508,  3585,
    3591,  3595, -2238,  3594,   576,  3596,  3609,  3040,  3611,  3041,
    3610,   879,   879,   879,   879,  3625,  3626,    23,  3629,  3632,
    3635,  3633,  3641,  1508,  2306,  3646,  1508,  3651,  2961,  2348,
     576,  1039,  3658,  3121,  -716,  2352,  3662,  1632,   551,  3229,
    3362, -2238,  3677,   551,  3678,  3669,   739,  3695,  -716,   551,
    3699,  3701,  1304,  -716,  3702,   551,   551,  1640,  3705,  3720,
     551,   551,   551,  3722,  3730,   551,  3236,  3724,   551,   551,
    3731,  1640,   551,  3732,  3737,   551,   551,   947,  3742,  3744,
    3746,  3749,  3755,  3764,  3258,  3753,  3750,  3754,  3761,  3770,
    3771,  3781,  3783,  3785,  3790,    88,  3259,  2014,   830,  3795,
    3801,  3042,  1305,  3802,  3803,  3804,  -716,  3805,  3808,  2013,
    3815,  3810,  1306,   951,  3816,  2409,  3825,  3817,  2412,  2413,
    2415,  2416,  3827,  3829,  1307,  3852,  2419,  -716,  3862,  3865,
    3871,  1508,  1508,  1508,  1508,   551,  3867,  3874,  3876,  3819,
     551,   551,   551,   551,   551,  3890,   833,  3894,  3326,  3895,
    3902,  3863,  2272,  2994,  3864,  3913,  3921,  1308,  2151,  3926,
    3934,  3945,  3937,  3939,  3953,  3952,    27,    28,    29,  3961,
    3962,  3043,  1845,  3964,  3966,  1536,  3044,  -716,  1909,  3971,
    2356,  2014,  3376,  1253,  3071,  3067,  -716,  2738,  2251,  2765,
    1892,  1039,   576,  1508,  2399,  2784,  2831,  1065,   839,   879,
    3438,   832,  3799, -2238,   832,  3144,  3909,   543,  3562,   832,
    3861,  3868,   832,  3903,  1310,  1846,  3377,   832,  1634,  3608,
    2720,   841,  2745,  3166,   845,   845,  3859,  3045,  3036,  3866,
    3122,  2716,  3857,  3001,    34,  3016,  3017,  1920,  1959,  1311,
    1136,  2826,  2459,  2006,  3682,  3046,   990,  2007,  2008,  3735,
    3000,  2009,  2010,  2011,  2930,  2931,  1136,  1971,  2534,  3286,
    1313,  3823,  3780,  3069,  3287,  3932,  2785,  3869,  3972,  2920,
    3976,  3963,  3977,    39,  1993,  3951,  3873,  1635,  3123,  3124,
    3125,  3126,  3127,  3128,  3129,  3130,  3131,  3132,  3940,  3975,
    1072,  2963,  2674,  3657,  2675,  3394,  3294,  3759,  3485,  1909,
    3930,  2972,  3931, -2238,    88,  2950,  2706,    41,  1773,  1301,
    2692,    11,  1534,  1535, -2238,  2428,   987,  2321,    44,   951,
    1632,  3311,  3312,  3313,  3314,  3315,  3316,  1818,  2856,  1302,
    3296,  3435,  3828,  2702,  2289,  1099,    45,  3420,  1508,    14,
      15,  1100,  3745,  -716,  3631,  3419,  1817,  2320,   834,  2678,
    3047,  1822,  3220,  2549,  3465,  1088,  2849,  3968,  1074,  3048,
      46,  3568,  2563,  1501,  3452,    23,  2850,  2880,  2467,  3748,
     576,  3747,  2600,  2578,  2995,  1303,  2904,   576,  3860,  2695,
    1485,  2916,  2054,  2198,  3321,  2250,  2601,    23,  2556,   976,
    1487,  1491,     0,     0,  1492,  1634,  1493,     0,  3670,  1494,
    1101,  2015,  2016,  2017,     0,  2018,  2019,  2020,  2021,  2022,
    2023,  3480,     0,   988,     0,     0,     0,   989,     0,     0,
       0,  1495,  1632,     0,  1496,     0,     0,     0,     0, -2238,
       0,     0,  1977,     0,     0,     0,  1632,     0,     0,     0,
    1508,  1508,  1508,  1508,  1508,  1508,  1508,  3060, -2238,  1039,
    1508,  1508,     0, -2238,  1635,  1508,   968,     0,  1508,     0,
    2013,  1508,  1508,  1508,  1508,  1508,  1508,  1508,  1508,  1508,
    1508,     0,     0,   879,  1102,  1304,     0,     0,  3184,     0,
       0,     0,     0,     0,  1276,     0,  1634,     0,   576,     0,
       0,     0, -2238,   576,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1103,     0,    27,    28,    29,     0,     0,   576,
       0,     0,     0,     0,     0,  1305,     0,     0,  1104,     0,
       0,     0,  2014,     0,     0,  1306,    27,    28,    29,  1105,
     576,   576,     0,     0,     0,  1635,     0,  1307,  2014,     0,
       0,     0,   879,     0,     0,     0,     0,     0,     0,     0,
       0,   879,  3357,     0,     0,     0,   879,  3583,  1845,     0,
       0,     0,   576,  1106,     0,     0,     0,  3580,  3581,     0,
    1308,     0,    34,     0,     0,     0,     0,   879,   551,     0,
    3620,     0,     0,  2423,   551,  1277,     0,   551,     0,     0,
       0,     0,    88,     0,    34,   551,     0,     0,     0,     0,
    1508,     0,  2786,     0,   576,  1092,    36,  1092,  1637,     0,
       0,    39,  1107,     0,     0,     0,  2801,  2802,  2804,  1108,
       0,    23,     0,     0,     0,     0,     0,  1310,     0,    38,
       0,  2815,   739,    39,  2818,     0,     0,     0,     0,     0,
       0,     0,  2825,     0, -2238,    41,     0,     0,  1508,  1508,
       0,     0,  1311,     0,    40,     0,    44,     0,     0,     0,
       0,     0,  1109,  3358,  1508,     0,  1508,    41,  1508,     0,
       0,     0,     0,  1313,    45,     0,     0,     0,    44,     0,
     839,  1110,     0,     0,     0,     0,     0,     0,  3326,   543,
       0,     0,     0,     0,     0,   879,    45,  1634,    46,     0,
       0,     0,     0,   841,  1977,     0,  3679,     0,  3681,     0,
       0,     0,   874,     0,     0,     0,     0,   832,     0,     0,
      46,     0,     0,   832,     0,     0,  2862,  2863,  2864,     0,
       0,     0,     0,     0,   874,     0,     0,   879,  3717,     0,
       0,  3721,  2015,  2016,  2017,     0,  2018,  2019,  2020,  2021,
    2022,  2023,     0,  1111,     0, -2238,  1635,  3680,  1278,  3726,
       0,     0,  3311,  3312,  3313,  3314,  3315,  3316,     0,     0,
      27,    28,    29,     0,     0,  3729,  3452,  1099,     0,  3733,
       0,     0,     0,  1100,     0,  1637,     0,     0,   551,   551,
     551,  1634,     0,     0,  1508,     0,  1054,     0,     0,     0,
       0,  1508,     0,     0,  1508,  1508,     0,     0,  3439,     0,
       0,     0,     0,  1508,     0,  1508,  1508,     0,     0,     0,
    1508,     0,     0,     0,     0,  3688,     0,  3620,     0,   551,
     551,   551,     0,     0,     0,     0,     0,     0,    34,   551,
       0,     0,  1101,     0,     0,     0,     0,     0,  1686,     0,
    1635,     0,   551,   551,     0,     0,     0,   551,   551,     0,
       0,     0,     0,     0,     0,   879,  2198,  1845,     0,     0,
       0,   551,   551,   551,     0,     0,  1637,    39,     0,  3565,
    1039,  1039,  2628,  3620,  1039,   551,   551,     0,   551,     0,
       0,     0,  2049,   832,  3008,     0,     0,     0,     0,     0,
    3572,  3573,   551,     0,     0,     0,     0,     0,   551,  1508,
    1508,    41,     0,  1508,     0,     0,  1102,  1508,   832,     0,
    1508,  1508,    44,     0,   576,     0,     0,   839,     0,  1634,
       0,  1099,  3597,     0,     0,     0,   543,  1100,     0,     0,
      45,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     841,     0,  1301,  1845,  1103,  3872,     0,  3717,     0,     0,
    3620,     0,     0,     0,    46,     0,     0,  3870,     0,     0,
    1104,     0,  1302,     0,     0,     0,   551,     0,   874,   551,
       0,  1105,     0,   839,  3152,     0,     0,  3157,  1635,     0,
    1508,  1508,   543,     0,  1508,     0,  1101,     0,  1064,     0,
     845,     0,     0,     0,     0,     0,   841,     0,     0,   739,
       0,     0,  1370,     0,   879,  1106,  3900,     0,  1303,     0,
       0,  1039,     0,   551,   551,     0,  3914,     0,     0,     0,
       0,  1120,   551,     0,     0,     0,     0,  1279,     0,   551,
     551,   551,   551,   551,     0,  2272,     0,     0,     0,  3193,
    3194,  3195,  3196,     0,     0,   551,  1223,   551,  3688,     0,
     839,     0,     0,  3717,  1107,     0,     0,  1370,     0,   543,
    1102,  1108,     0,   950,     0,     0,     0,     0,  1634,     0,
     879,  1054,     0,   841,     0,     0,     0,     0,     0,     0,
    1634,   947,  3957,   551,   551,     0,   551,  1637,   879,     0,
       0,     0,     0,     0,     0,   551,   551,   576,  1103,     0,
       0,   551,     0,     0,  1109,   879,     0,     0,  1304,     0,
    1634,     0,     0,     0,  1104,     0,     0,  1634,  3659,  3660,
       0,     0,     0,  1110,   551,  1105,     0,  1635,     0,     0,
    1980,   551,     0,  1370,  1624,     0,     0,     0,     0,  1635,
       0,   551,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1634,     0,     0,     0,  1634,  1305,  1106,
       0,     0,     0,  1634,     0,     0,     0,     0,  1306,  1635,
       0,     0,     0,     0,     0,     0,  1635,  1981,     0,     0,
    1307,  1637,     0,     0,     0,  1634,     0,     0, -1968,     0,
     551,     0,   739,     0,     0,  1111,     0,     0,  1982,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1107,     0,
       0,     0,  1635,  1308,     0,  1108,  1635,     0,     0,  1983,
       0,     0,  1635,  1984,     0,     0,     0,  3364,     0,     0,
       0,     0,     0,     0,     0,  1686,     0,     0,     0,   551,
    1444,     0,   551,     0,  1635,  1985,     0,     0,  1986,  1484,
       0,     0,     0,     0,     0,     0,   551,   551,  1109,   947,
       0,     0,     0,     0,  3760,   551,  1987,     0,  1686,     0,
    1310,     0,     0,     0,     0,     0,     0,  1110,     0,     0,
       0,     0,     0,     0,  3853,  3775,  3776,    88,     0,     0,
   -1968,     0,     0,     0,     0,  1311,     0,   551,   551,  1706,
    1564,     0,  1707,     0,     0,     0,  1708,  1709,     0,     0,
     551,  1624,     0,     0,     0,     0,  1313,     0,     0,  1637,
       0,     0,     0,     0,    88,     0,     0,   551,     0,     0,
       0,   551,     0,     0,     0,     0,   551,     0,     0,  1717,
   -1968,     0,     0,     0,  1370,     0, -2238,     0,     0,  1111,
    3012,     0,     0,  1370, -1968,     0,     0,     0,     0, -1968,
       0,  1988,     0,     0, -1968,     0,  1700,     0,     0,  1989,
       0,     0,     0,  1719,     0, -1968,  1703,  1370,     0,     0,
   -1968,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1990,  1638,   551,     0,  1753,   551,     0,     0,     0,
      14,    15,  1624,   551,  1759,     0,     0,     0,     0,     0,
    1449,     0, -1968,     0,     0,     0,     0,   551,   739,     0,
       0,     0,  1991,     0,     0,     0,     0,   551,   739,     0,
      88,     0,   551, -1968,   551,   551,     0,   551,   551,     0,
       0,  2608,     0,     0,  1136,  1054,     0,  2006,    23,     0,
       0,  2007,  2008,     0,     0,  2009,  2010,  2011,    88,     0,
       0,    88,   739,     0,     0,   551,     0,     0,  1637,     0,
       0,     0, -2238,  3245,     0,     0,     0,     0,     0,     0,
    1637,   577,     0, -1968,     0,     0, -1968,   577,     0,     0,
       0, -2238, -1968,     0,     0,     0, -2238,     0,     0,   577,
       0,  3539,  1634,     0,     0,     0,     0,     0,     0,     0,
    1637,  1686,     0,   577,   577,     0,     0,  1637,     0,     0,
    1136,     0,     0,  2006,     0,     0,     0,  2007,  2008,     0,
       0,  2009,  2010,  2011,     0, -2238, -1968,   551,     0,   551,
     551,     0,     0,     0,     0,     0,  1704,   551,     0,  3246,
       0,     0,     0,  1637,     0,     0,     0,  1637,     0,     0,
   -1968,  1635,     0,  1637,     0,     0,     0,     0,   551,  1638,
     551,     0,     0,     0,  1449,     0,     0,     0,     0,   577,
    3152,     0,     0,     0,     0,  1637,   832,     0,     0,  3152,
       0,  1728,     0,     0,  3593,     0,     0,    27,    28,    29,
     559,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  3618,     0,     0,     0,     0,
     881,     0,     0,  1624,     0,     0,     0, -1504,     0,     0,
    1976,     0,     0,     0,  1564,  1634,   950,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0, -1968,
       0,  1449,     0,     0,  1449,  1449,     0,     0,     0, -1968,
    1638,     0,     0,     0,  2013,    34,   560,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    36,  1136,   551,
   -1968,  3286, -1968, -1968,     0,     0,  3287,     0,     0,     0,
     551,  1634,     0,     0,  1635,     0,     0, -2238,     0,     0,
      38,     0,     0,     0,    39,   739,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1624,  3294, -1968,
       0,   561, -1968, -1968, -1968, -2238,   739,     0,     0,   551,
       0,     0,     0,  3686,     0,     0,  2014,     0,    41,     0,
    2013,     0,   562,     0,     0,     0,     0,     0,     0,    44,
    1635,     0,  3296,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1370,     0,   563,     0,     0,    45,     0,     0,
       0,     0,     0,     0,     0,  3725,   551,     0,   551,     0,
     551,     0,     0,     0,     0,     0,     0,     0,     0,  1973,
    1975,    46,     0,     0,     0,   551,   551,     0,     0,     0,
       0,     0,   564,     0,    88,   874,     0,     0, -2238,  -212,
       0,     0,  2014,     0,     0,  1735,  1736,  1737,  1738,  1739,
    1740,     0,     0,     0,     0,  1634,     0,     0,     0,     0,
       0,     0,     0,   551,     0,   551, -1970,     0,     0,     0,
       0,     0,  1686,     0,     0,     0,   743,     0,     0,   551,
     551, -2238,     0,     0,   565,  1624,   566,     0,     0,     0,
     551,   551,   551,   551,   739,   551,   739,     0,     0,  1706,
   -2238,   551,  1707,   551,   567, -2238,  1708,  1709,     0,     0,
     568,  1638,     0,   569,  1635,   551,   551,     0,     0,     0,
     551,   551,     0,     0,     0,   551,   551,   551,   551,     0,
     551,   551,  1637,  3809,     0,   744,     0,     0,     0,  1717,
    1370,     0,     0,     0, -2238,     0, -2238,   551,     0,     0,
       0,   745,  1634,     0,   551,     0,     0,   551,   551,   551,
     551,   551,     0,     0,     0,   551,     0,     0, -1970,  2247,
    2198,     0,     0,  1719,     0,     0,     0,     0,     0,   551,
       0,     0,     0,     0,     0,  1370,  2015,  2016,  2017,     0,
    2018,  2019,  2020,  2021,  2022,  2023,   551,     0,     0,     0,
    2014,   739,     0,   746,     0,  1638,     0,     0,  1370,     0,
       0,  1635,     0,   747,     0,     0,     0,  1054, -1970,     0,
       0,     0,     0,     0,     0,   748,     0,     0,     0,  1634,
     749,     0, -1970,     0,  1624,     0,     0, -1970,     0,  1639,
    2128,  2618, -1970,     0,     0,     0,  1624,     0,     0,     0,
       0,     0,  2158, -1970,  2159,     0,     0,     0, -1970,     0,
       0,   750,  2015,  2016,  2017,  1637,  2018,  2019,  2020,  2021,
    2022,  2023, -2238,   577,    88,    88,  1624,     0,     0,     0,
    2174,     0,  3152,  1624,     0,   551,     0,     0,  1635,     0,
   -1970, -2238,     0,     0,     0,     0, -2238,   551,     0,     0,
       0,  2381,     0,     0,     0,   751, -2238,     0,     0,   752,
       0, -1970,     0,     0,  2397,  2397,     0,   551,     0,  1624,
       0,  1637,   551,  1624,     0,     0,     0,  1370,     0,  1624,
       0,   551,   551,     0,     0, -2238,     0,     0,     0,     0,
       0,     0,     0,  1638,     0,     0,     0,     0,  3152,     0,
       0,  1624,     0,     0,     0,     0,     0,     0,     0,     0,
       0, -1970,     0,     0, -1970,     0,  3967,     0,     0,     0,
   -1970,     0,  1634,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   753,  3973,     0,     0,  1444,     0,  2301,  2301,
       0,  1728,  2472,     0,     0,  2198,     0,     0,     0,   755,
     551,     0,     0,     0,   551,     0,  1634,     0,     0,   551,
       0,     0,     0,    88, -1970,    88,  1639, -2238,     0,     0,
       0,     0,     0,     0,  3311,  3312,  3313,  3314,  3315,  3316,
       0,  1635,     0,   756,     0,     0,   757,     0, -1970,     0,
       0,     0,     0,     0,     0,     0,     0,   758,  1449,   551,
     759,     0,     0,     0,     0,  1637,     0,     0,  1449,     0,
       0,  1449,     0,     0,     0,  1635,    88,   577,   577,     0,
     760,     0,     0,   739,     0,     0,     0,     0,     0,     0,
       0,     0,    88,     0,   761,     0,    88,     0,     0,     0,
    1634,   763,  1638,     0,   551,     0,     0, -2238,   881,     0,
       0,     0,   764,     0,  1638,   947,     0,  1639,   765,     0,
       0,   551,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0, -1970,     0,     0,
       0,     0,     0,  1634,  1638,     0,   766, -1970,     0,     0,
       0,  1638,     0,     0,     0,     0, -1985,     0,     0,  1635,
       0,   551,  1637,     0,     0,     0,  1449,   551, -1970,     0,
   -1970, -1970,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   551,     0,     0,     0,  1638,     0,     0,
       0,  1638,     0,   739,   739,   739,   577,  1638,     0,     0,
    1634,     0,  1635,     0,     0,     0,     0, -1970,     0,     0,
   -1970, -1970, -1970,     0,     0,     0,     0,     0, -2238,  1638,
       0,     0,     0,     0,     0,  1735,  1736,  1737,  1738,  1739,
    1740,     0,  1136,     0,     0,  3286,     0,     0,  1370,  1637,
    3287,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   551,     0,     0,     0, -1985,  1635,
       0,   551,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  3294,     0,   551,   551,   551,   551,  1624, -2238,
       0,     0,     0,     0,    88,  2567,     0,     0,   551,     0,
     551,     0,     0,   551,     0,     0,     0,   551,     0,   739,
    1634,   551,     0,     0,     0,     0,  3296,   551, -1985,     0,
       0,     0,     0,  1054,     0,     0,     0,     0,     0,   739,
       0,     0, -1985,     0,     0,   551,   551, -1985,   551,     0,
       0,     0, -1985,    88,     0,     0,     0,     0,  1639,     0,
       0,     0,     0, -1985,     0,     0,     0,     0, -1985,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1635,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  2749,
       0,     0,     0,     0,  3774,     0,     0,   551,     0,     0,
   -1985,     0,  1637,     0,     0,   551,   551,   551,     0,     0,
       0,     0,     0,     0,   551,     0,     0,   551,     0,  1528,
       0, -1985,     0,   551,     0, -2238,  1301,     0,     0,     0,
       0,  1624,     0,     0,     0,     0,  1637,     0,     0,     0,
       0,  2781,  1559,     0, -2238,     0,  1302,     0,     0, -2238,
       0,     0,  1639,     0,     0,  2641,   551,     0,     0,     0,
       0,  2797,     0,     0,     0,     0,     0,     0,     0,     0,
       0, -1985,     0,     0, -1985,     0,     0,     0,     0,     0,
   -1985,     0,     0,     0,     0,     0,     0,  1624, -2238,     0,
       0,     0,  1303,  3058,     0,     0,  2698,  2698,     0,     0,
       0,     0,  1444,  3059,     0,     0,  1706,     0,  1689,  1707,
    2832,     0,  2833,  1708,  1709,     0,  2838,     0,  2841,     0,
    1637,     0,     0,     0, -1985,     0,     0,     0,     0,     0,
       0,     0,     0,   947,   947,     0,     0,     0,     0,     0,
     947,     0,     0,     0,  2014,     0,  1717,     0, -1985,     0,
       0,   551,     0, -2238,     0,     0,  1638,   551,     0,     0,
       0,     0,     0,  1637,  3060,     0,     0,     0,     0,     0,
       0,     0,     0,   551,   577,   577,     0,   551,     0,     0,
    1719,   551,   551,   551,     0,     0,     0,   551,   551,   551,
    1639,   551,  1304,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1634,     0,     0,     0,     0,   881,     0,
     551,     0,   551,     0,     0,     0,     0,     0,   739,     0,
    1637,  3115,   739,     0,   739,   551,   551,   551,   551,   551,
     551,   551,   551,   551,   551,     0,     0, -1985,     0,     0,
       0,     0,  1305,     0,     0,     0,     0, -1985,  2929,     0,
   -2238,     0,  1306,     0,     0,     0,     0,     0,   551,     0,
       0,     0,  1635,   551,  1307,     0,   551,  3061, -1985,     0,
   -1985, -1985,     0,     0,     0,     0,   551,     0,     0, -2238,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1638,
       0,     0,     0,     0,   551,     0,     0,  1308, -2238,     0,
       0,     0,     0, -2238,   551,  1634,     0, -1985,     0,     0,
   -1985, -1985, -1985,     0,     0,     0,     0,     0,  1624,  1634,
    1637,   551,     0,     0,     0,     0,     0,     0,   551,   551,
     551,   551,     0,     0,     0,     0,     0,     0,     0,  1639,
       0,     0, -2238,     0,     0,  1638,     0,   551,   551,     0,
       0,  1639,   577,   577,  1310,   577,   551,     0,     0,     0,
       0, -2238,     0,     0,  1635,     0,     0,     0,  3311,  3312,
    3313,  3314,  3315,  3316,  2888,  2890,     0,     0,  1635,  1311,
       0,  1639,     0,   551,     0,     0,     0,     0,  1639,     0,
    3112,     0,     0,     0,     0,  1624,     0,     0,  1728,     0,
    1313,     0,  3062,     0,  1706,  3063,     0,  1707,  1370,     0,
       0,  1708,  1709,   551,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  2781,  1639,     0,     0,     0,  1639,     0,
       0,     0,     0,     0,  1639,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1717,     0,     0,  1706,     0,     0,
    1707, -2238,     0,     0,  1708,  1709,  1639,   577,     0,     0,
       0,     0,     0,     0,     0,   551,     0,     0,     0,   551,
       0,     0,     0,     0,     0,   551,     0,     0,  1719,  1638,
       0,     0,     0,     0,     0,     0,  2079,  1717,  2083,   551,
       0,     0,     0,     0, -2238,   551,     0,     0,     0,     0,
       0,     0,     0,     0, -2238,     0,     0,     0,   551,   551,
       0,     0,     0,     0,     0,     0,   551,  1856,     0,     0,
       0,  1719,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   552,     0,   551,     0,     0,   552,     0,  1624,   742,
       0,     0,   552,     0,     0,     0,  2932,     0,   552,   552,
       0,     0,     0,   552,   552,   552,     0,     0,   552,     0,
    1449,   552,   552,     0,     0,   552,     0,     0,   552,   552,
       0,     0,  3115,     0,     0,     0,  1638, -2238,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  3264,  2933,
       0,     0,     0,     0,     0,     0, -2238,     0,     0,     0,
       0, -2238,     0,  1637,     0,     0,  1136,     0,     0,  2006,
       0,     0,   551,  2007,  2008, -2238,   551,  2009,  2010,  2011,
   -2238,   739,  1735,  1736,  1737,  1738,  1739,  1740,   552,     0,
       0,     0,   551,   552,   552,   552,   552,   552,     0, -2238,
   -2238,     0,     0,     0, -2238,     0,     0,     0,   551,     0,
       0,     0,  1054,  1638,     0,  1706,  1624,     0,  1707,     0,
       0,     0,  1708,  1709,  1710,  1711,  1712,  1713,  1714,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   551,     0, -2238,  1715,     0,     0,   551,     0,     0,
       0,     0,  3227,     0,   551,  1717,  1728,     0,     0,  1624,
       0,     0,  1718,     0,     0,  1637,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  3835,     0,  1637,
       0,     0,     0,     0,     0,     0,     0,     0,   551,  1719,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1728,
       0,     0,     0,     0,     0,   947,     0,     0,     0,     0,
       0,     0,     0,   577,     0,     0,  1624,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   551,     0,   577,     0,
       0,     0,     0,  1639,     0,     0,     0,     0,   577,     0,
     577,     0,     0,   577,     0,     0,     0,     0,     0,   577,
     551,   577,     0,     0,     0,     0,  1638,     0,  3416,     0,
       0,     0, -2238,     0,   577,   551,     0,     0,     0,   577,
     551,     0,     0,   577,   577,   577,   577,     0,   577,   577,
       0,  1444,     0,     0,     0,     0,  2013,     0,  1720,     0,
    1638,     0,     0,     0,     0,     0,   551,     0,     0,     0,
       0,     0,     0,     0,     0, -2238,     0,  1721,     0,     0,
       0,     0,  1722,     0,     0,     0,  3115,   551,   551,     0,
       0,     0,     0,     0,     0,     0,  1449,     0,     0,   551,
       0,  1449,     0,     0,     0,  1723,  1724,   947,   551,     0,
       0,     0,     0,   551,     0,   551,     0,     0,     0,   551,
       0,  1725,     0,     0,     0,     0,     0,     0,  2014,     0,
       0,  3483,     0,   739,   551,     0,  1639,     0,     0,     0,
       0,     0,     0, -2238,  1638,     0,     0,     0,  1973,  1975,
    1735,  1736,  1737,  1738,  1739,  1740,     0,     0,     0,     0,
    1726,   551,   551,  1727,   551,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1728,     0,     0,
    1729,     0,     0,     0,     0,     0, -2238,  1638,   947,   947,
       0,     0,  1639,  1735,  1736,  1737,  1738,  1739,  1740,  1706,
       0,     0,  1707,   577,     0,     0,  1708,  1709,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1706,
       0,     0,  1707,     0,     0,     0,  1708,  1709,  1710,  1711,
    1712,  1713,  1714,     0,     0,  2548,     0,     0,     0,  1717,
    2083,     0,     0,     0,  1638,   551, -2238,     0,  1715,     0,
    1136,     0,   551,  2006,   739,  3112,     0,  2007,  2008,  1717,
       0,  2009,  2010,  2011,     0,     0,  1718,     0,     0,     0,
       0,     0,     0,  1719,     0,     0,     0,     0,     0,  3766,
       0,     0,     0,  1730,     0,     0,     0,     0,   947,     0,
       0,   947,  1136,  1719,   551,  3286,     0,     0,     0,     0,
    3287,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   552,     0,     0,     0,     0,     0,   552,   577,     0,
     552,     0,     0,     0,     0,     0,  1639,  1689,   552,     0,
       0,     0,  3294,   551,     0,     0,     0,     0,     0, -2238,
       0,  3249,     0,     0,  1638,     0,     0,     0,  2015,  2016,
    2017,     0,  2018,  2019,  2020,  2021,  2022,  2023,     0,     0,
       0,     0,     0,     0,     0,   742,  3296,     0,     0,  1624,
       0,     0, -2238,  1136,     0,     0,  2006,     0,     0,     0,
    2007,  2008,     0,     0,  2009,  2010,  2011,     0,     0,     0,
       0, -2238,  1720,     0,  1731,     0, -2238,  1732,  1733,  1734,
       0,  1735,  1736,  1737,  1738,  1739,  1740,     0,     0,     0,
       0,  1721,   577,  1973,  1975,     0,  1722,     0,     0,     0,
       0,  2583,   551,  1639,   551,  1449,     0,     0,     0,     0,
       0,     0,     0,     0,  3777, -2238,     0,   551,   551,  1723,
    1724,   551,     0,     0,     0,  3707,     0,     0,     0,   551,
       0,     0,     0,     0,     0,  1725,     0,     0,     0,     0,
       0,     0,   947,   947,     0, -2238,     0,     0,     0,   577,
    2013,  1624,     0,     0,     0,  2710,     0,     0,     0,     0,
       0,   551,     0,     0, -2238,  3115,     0,   739,     0, -2238,
       0,  1728,     0,     0,  1726,     0,     0,  1727,     0,     0,
    1639,     0,     0,     0,     0,   947,     0,   947,     0,     0,
     551,  1728,     0,     0,  1729,     0,     0,     0,     0,     0,
       0,   552,   552,   552,     0,     0,     0,     0, -2238,  1056,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  2014,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   552,   552,   552,     0,     0,     0,     0,     0,
       0,   551,   552,     0,     0,     0,   947,     0,   551,     0,
       0,     0,     0,     0,  2014,   552,   552,     0,     0,     0,
     552,   552,     0,  2013,   947,   947,   577, -2238,     0,     0,
       0,     0,   551,     0,   552,   552,   552,     0,     0,     0,
       0,     0,     0,   947,     0,     0,     0,  1730,   552,   552,
       0,   552,     0,     0,     0,     0,     0,  1638,     0,     0,
       0,     0,     0,     0,     0,   552,     0,   551,     0,     0,
       0,   552,   947,  1639,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  3112,   551,     0,  3282,  3283,  3284,
    3285,     0,     0,     0,   551,  2014,     0,     0,     0,     0,
       0,     0,   551,     0,     0,     0,     0,  1639,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   -2238,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   577,     0,     0,   577,     0,     0, -2238,   552,
       0,  2079,   552,     0,     0,  1735,  1736,  1737,  1738,  1739,
    1740,     0,     0,     0,     0,     0,     0,     0,  1731,  1638,
       0,  1732,  1733,  1734,     0,  1735,  1736,  1737,  1738,  1739,
    1740,     0,   742,  1638,     0,  1372,     0,     0,  1999,     0,
       0,     0,     0,     0,     0,     0,   552,   552,     0,     0,
       0,  1639,  2015,  2016,  2017,   552,  2018,  2019,  2020,  2021,
    2022,  2023,   552,   552,   552,   552,   552,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1136,     0,   552,  2006,
     552,     0,     0,  2007,  2008,     0,     0,  2009,  2010,  2011,
    1372, -2238,     0,     0,  1639,     0,     0,     0,  3311,  3312,
    3313,  3314,  3315,  3316,  1056,  3767,     0,     0,     0,     0,
       0,     0,     0,     0,  1449,     0,   552,   552,     0,   552,
       0,     0,     0,     0,     0,     0,     0,     0,   552,   552,
       0,     0,     0,     0,   552,     0,     0,     0,     0,     0,
       0,  1136,     0,     0,  2006,     0,     0,     0,  2007,  2008,
       0,  1639,  2009,  2010,  2011,   577,     0,   552,     0,   577,
     577,   577,     0,     0,   552,     0,  1372,  1626,     0,     0,
    3847,     0,     0,     0,   552,  2015,  2016,  2017,     0,  2018,
    2019,  2020,  2021,  2022,  2023,     0,     0,     0,   577,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   577,   577,   577,   577,   577,   577,   577,
     577,   577,   577,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   552,     0,   742,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1136,     0,     0,
    3286,  1639,     0,     0,     0,  3287,  3497,  3498,  3499,  3500,
    3501,  3502,  3503,     0,     0,     0,  3508,  3509,     0,     0,
       0,  3518,   552,     0,  3520,   552,     0,  3527,  3528,  3529,
    3530,  3531,  3532,  3533,  3534,  3535,  3536,  3294,     0,   552,
     552,     0,     0,     0, -2238,     0,  2013,     0,   552,  2079,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  3296,     0,     0,     0,  2548,  1136,     0,     0,  2006,
     552,   552,     0,  2007,  2008,     0,     0,  2009,  2010,  2011,
       0,     0,     0,   552,  1626,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  3848,     0,     0,     0,     0,
     552,  2013,     0,     0,   552,     0,     0,     0,  2014,   552,
       0,     0,     0,     0,     0,     0,     0,  1372,     0,     0,
       0,     0,     0,     0,     0,     0,  1372,     0,     0,  3778,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1372,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   -2238,     0,     0,     0,     0,     0,   552,     0,     0,   552,
       0,     0,     0,  2014,     0,  1626,   552,     0,     0, -2238,
       0,     0,     0,     0, -2238,     0,     0,     0,     0,     0,
     552,   742,     0,     0,     0,     0,     0,     0,     0,     0,
     552,   742,     0,     0,     0,   552,     0,   552,   552,     0,
     552,   552,     0,     0,     0,     0,     0,     0,  1056,     0,
       0,     0,     0, -2238,     0,     0,     0,   577,     0,     0,
    3671,     0,  3674,     0,  3676,   742,     0,     0,   552,     0,
       0,     0,     0,     0,  1705,     0,     0,     0,     0,  1706,
       0,     0,  1707,     0,     0,     0,  1708,  1709,  1710,  1711,
    1712,  1713,  1714,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1639,     0,     0,     0,  1715,  2014,
       0,     0,     0,  1716,     0,     0,  2013,     0,     0,  1717,
       0,     0,     0,     0,     0,     0,  1718,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     552,     0,   552,   552,     0,     0,     0,     0,     0,     0,
     552,     0,     0,  1719,     0,     0,     0,     0,  2015,  2016,
    2017,     0,  2018,  2019,  2020,  2021,  2022,  2023,     0,     0,
       0,   552,     0,   552,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  2014,     0,
       0,     0,     0,     0,     0,     0,     0,  3765,     0,     0,
    3768,  3769,     0,     0,     0,     0,  1639,     0,     0,  3773,
       0,     0,     0,     0,     0, -2238,  3779,     0,     0,     0,
    1639,     0,     0,  2015,  2016,  2017,  1626,  2018,  2019,  2020,
    2021,  2022,  2023,     0,     0,  3460,     0,     0,     0,     0,
       0,     0,  2548,     0,     0,     0,     0,     0,     0,     0,
    1706,     0,  1720,  1707,     0,     0,     0,  1708,  1709,  1710,
    1711,  1712,  1713,  1714,     0,     0,     0,     0,     0,     0,
       0,  1721,     0,     0,     0,     0,  1722,     0,     0,  1715,
       0,     0,   552,     0,  2913,     0,     0,     0,     0,     0,
    1717,     0,     0,   552,     0,     0,     0,  1718,     0,  1723,
    1724,     0,     0,     0,     0,  3841,  3842,     0,   742,  3843,
       0,     0,     0,  3846,     0,  1725,  3849,  3850,     0,     0,
    1626,     0,     0,     0,  1719,     0, -2238,     0,     0,   742,
       0,     0,   552,  3311,  3312,  3313,  3314,  3315,  3316,     0,
       0,  1288,     0,     0,     0,     0,     0,  1289,     0,     0,
       0,     0,     0,   577,  1726,     0,  1301,  1727,   577,     0,
       0,     0,     0,     0,     0,  1372,     0,     0,     0,     0,
       0,  1728,     0,     0,  1729,     0,  1302,     0,     0,   552,
       0,   552,     0,   552,   577,     0,  3897,  3898,     0,  1136,
    3899,     0,  2006,     0,     0,     0,  2007,  2008,   552,   552,
    2009,  2010,  2011,     0,     0,   577,   577,     0,  2015,  2016,
    2017,     0,  2018,  2019,  2020,  2021,  2022,  2023,     0,     0,
       0,     0,  1303,  1720,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   552,   577,   552,     0,
       0,     0,  1721,     0,     0,     0,     0,  1722,     0,     0,
       0,     0,   552,   552,  1290,     0,     0,     0,  1626,     0,
       0,     0,     0,   552,   552,   552,   552,   742,   552,   742,
    1723,  1724,     0,     0,   552,     0,   552,  1730,     0,   577,
       0,     0,     0,     0,     0,     0,  1725,     0,   552,   552,
       0,     0,     0,   552,   552,     0,     0,     0,   552,   552,
     552,   552,     0,   552,   552,     0,     0,     0,     0,     0,
       0,     0,     0,  1372,     0,     0,     0,     0,     0,     0,
     552,     0,  1304,     0,     0,  1726,     0,   552,  1727,     0,
     552,   552,   552,   552,   552,     0,     0,     0,   552,     0,
       0,     0,  1728,     0,     0,  1729,     0,     0,     0,     0,
       0,     0,   552,     0,     0,     0,     0,     0,  1372,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   552,
       0,     0,  1305,     0,   742,     0,     0,     0,     0,     0,
       0,  1372,  1306,     0,     0,     0,     0,     0,  1731,     0,
    1056,  1732,  1733,  1734,  1307,  1735,  1736,  1737,  1738,  1739,
    1740,     0,     0,     0,     0,     0,     0,  1626,     0, -2238,
       0,     0,     0,     0,     0,     0,  1291,     0,     0,  1626,
       0,     0,     0,     0,     0,     0,     0,  1308,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1730,  1626,
       0,     0,   -48,     0,     0,     0,  1626,     0,   552,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     552,     0,     0,     0,     1,     0,     0,     0,  1309,     0,
       0,  2014,  1293,     0,  1310,     2,     0,     3,     4,     0,
     552,     0,  1626,     0,     0,   552,  1626,     0,     0,     0,
    1372,     5,  1626,     0,   552,   552,     6,     0,     0,  1311,
       0,     0,     0,     0,  1312,     7,     0,     0,     0,     0,
       0,     0,     0,     0,  1626,     0,     0,     0,     0,     8,
    1313,     0,     0,     0,     0,     0,     0,     0,     9,  1136,
      10,     0,  3286,     0,     0,     0,     0,  3287,     0,     0,
       0,     0,    11,     0,    12,     0,     0,     0,     0,  1731,
       0,     0,  1732,  1733,  1734,    13,  1735,  1736,  1737,  1738,
    1739,  1740,     0,   552,     0,     0,  2166,   552,     0,  3294,
      14,    15,   552,    16,     0,     0, -2238,     0,  1295,     0,
       0,     0,    17,     0,  1706,     0,     0,  1707,     0,   577,
      18,  1708,  1709,  1460,  1461,  1712,  1713,  1714,    19,     0,
      20,    21,     0,  3296,     0,     0,     0,     0,     0,     0,
       0,     0,   552,  1715,    22,     0,     0,     0,    23,     0,
       0,     0,     0,     0,  1717,     0,     0,     0,     0,     0,
       0,  1718,     0,     0,  1462,  1463,   742,     0,  1464,  1465,
       0,     0,     0,     0,     0,     0,    24,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   552,  1719,     0,
       0,     0,    25,     0,     0,     0,     0,     0,     0,     0,
       0,  3851,     0,     0,   552,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    26,
       0,  2015,  2016,  2017,     0,  2018,  2019,  2020,  2021,  2022,
    2023,     0, -2238,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   552,     0,     0,     0,  1466,  1467,
     552, -2238,     0,     0,     0,     0, -2238,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   552,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   742,   742,   742,     0,
       0,     0,     0,     0,     0,     0,     0,  1720,     0,     0,
       0,     0,     0,     0,     0, -2238,     0,    27,    28,    29,
       0,     0,   577,     0,     0,    30,  1721,     0,    31,     0,
       0,  1722,     0,  1468,  1469,  1470,  1471,  1472,  1473,  1474,
    1475,  1372,     0,  1476,  1477,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1723,  1724,     0,   552,     0,     0,
      32,     0,     0,     0,   552,     0,     0,     0,     0,    33,
    1725,  2014,     0,     0,     0,     0,     0,   552,   552,   552,
     552,  1626,     0,     0,     0,    34,     0,     0,     0,     0,
       0,   552,    35,   552,     0,     0,   552,    36,     0,     0,
     552,     0,   742,     0,   552,     0,     0,     0,    37,  1726,
     552,     0,  1727,     0,     0,     0,  1056,     0,     0,     0,
      38,     0,   742,     0,    39,     0,  1728,     0,   552,   552,
       0,   552,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    40,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    41,     0,
       0,    42,  1478,  1479,    43,     0,     0,     0,     0,    44,
       0,     0,     0,     0,     0,     0,     0, -2238,     0,     0,
     552,     0,     0,     0,     0,     0,     0,    45,   552,   552,
     552,     0,     0,     0,     0,     0,     0,   552,     0,     0,
     552,     0,     0,     0,     0,     0,   552,     0,     0,     0,
       0,    46,     0,     0,  1626,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    47,     0,     0,   -48,     0,
       0,     0,  1730,     0,     0,     0,     0,     0,     0,   552,
       0,     0,     0,     0,     0,  1706,     0,     0,  1707,     0,
       0,     0,  1708,  1709,  1710,  1711,  1712,  1713,  1714,     0,
       0,     0,  1480,  1481,     0,     0,     0,     0,     0,     0,
    1626,     0,     0,     0,  1715,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1717,  1482,  1483, -2238,     0,
       0,     0,  1718,     0,     0,  3311,  3312,  3313,  3314,  3315,
    3316,     0,     0,     0,     0,     0,  2096,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1719,
       0,     0,  1288,     0,     0,     0,     0,     0,  1289,     0,
       0,     0,     0,     0,   552,     0,     0,  1301,     0,     0,
     552,     0,     0,  1731,     0,     0,  1732,  1733,  1734,     0,
    1735,  1736,  1737,  1738,  1739,  1740,   552,  1302,     0,     0,
     552,     0,     0,     0,   552,   552,   552,     0,     0,     0,
     552,   552,   552,     0,   552,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   552,     0,   552,     0,     0,     0,     0,
       0,   742,     0,  1303,  3117,   742,     0,   742,   552,   552,
     552,   552,   552,   552,   552,   552,   552,   552,  1720,     0,
       0,  1198,  1198,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1290,     0,  1721,     0,     0,
       0,   552,  1722,     0,     0,     0,   552,     0,     0,   552,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   552,
       0,     0,     0,     0,     0,  1723,  1724,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   552,     0,     0,
       0,  1725,     0,     0,     0,     0,     0,   552,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1626,     0,  1304,   552,     0,     0,     0,     0,     0,
       0,   552,   552,   552,   552,     0,     0,     0,     0,     0,
    1726,     0,     0,  1727,     0,     0,     0,     0,     0,     0,
     552,   552,     0,     0,     0,     0,     0,  1728,     0,   552,
    1729,     0,     0,     0,     0,     0,  1328,     0,     0,     0,
    1373,  1378,     0,  1305,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1306,     0,     0,   552,     0,     0,     0,
       0,     0,     0,     0,     0,  1307,     0,     0,  1626,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1372,     0,     0,     0,     0,   552,  1291,     0,     0,
       0,     0,     0,     0,     0,  1431,     0,     0,  1308,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   743,     0,  1456,     0,     0,     0,     0,
       0,     0,     0,  1502,     0,     0,  1504,     0,     0,  1515,
    1518,  1523,  1526,  1730,     0,     0,     0,     0,   552,     0,
       0,     0,   552,     0,     0,     0,     0,     0,   552,  2358,
       0,     0,     0,  1293,     0,  1310,     0,     0,     0,     0,
       0,     0,   552,     0,     0,     0,     0,     0,   552,     0,
    1566,  1373,   744,     0,     0,     0,     0,     0,     0,     0,
    1311,   552,   552,     0,     0,  2359,     0,     0,   745,   552,
       0,  1651,     0,     0,     0,     0,  1706,     0,     0,  1707,
       0,  1313,     0,  1708,  1709,     0,   552,  1712,  1713,  1714,
    1667,  1626,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1677,  1678,  1679,     0,  1683,  1687,     0,     0,     0,
       0,     0,     0,     0,     0,  1459,  1717,   843,     0,     0,
     746,     0,     0,  1718,  1731,  3117,     0,  1732,  1733,  1734,
     747,  1735,  1736,  1737,  1738,  1739,  1740,     0,  1749,  1295,
       0,  2166,   748,     0,     0,     0,     0,   749,     0,     0,
    1719,     0,     0,     0,     0,  1566,  1566,     0,     0,     0,
       0,     0,     0,     0,     0,   552,     0,     0,     0,   552,
       0,     0,     0,     0,   742,     0,     0,     0,   750,     0,
       0,     0,  1460,  1461,     0,   552,     0,     0,     0,     0,
       0,  1792,     0,     0,     0,  1808,  1813,     0,     0,     0,
       0,   552,     0,     0,     0,  1056,  1198,  1198,  1706,  1626,
       0,  1707,     0,     0,     0,  1708,  1709,  1710,  1711,  1712,
    1713,  1714,   751,  1462,  1463,     0,   752,  1464,  1465,     0,
       0,     0,     0,     0,   552,     0,     0,  1715,     0,     0,
     552,     0,     0,     0,     0,     0,     0,   552,  1717,  1720,
       0,     0,  1626,     0,     0,  1718,     0,     0,     0,     0,
       0,     0,  1373,     0,     0,     0,     0,     0,  1721,     0,
       0,  1373,     0,  1722,     0,     0,     0,     0,     0,     0,
       0,   552,  1719,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   562,     0,  1373,  1723,  1724,     0,   753,
       0,     0,     0,     0,     0,     0,     0,  1466,  1467,  1626,
       0,     0,  1725,     0,     0,   754,   755,     0,     0,   552,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   552,     0,     0,     0,     0,     0,     0,
     756,  1726,     0,   757,  1727,     0,     0,     0,   552,     0,
       0,     0,     0,   552,   758,     0,     0,   759,  1728,     0,
       0,     0,  1468,  1469,  1470,  1471,  1472,  1473,  1474,  1475,
       0,  1720,  1476,  1477,     0,     0,  1996,   760,     0,   552,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1721,   761,     0,     0,     0,  1722,     0,   762,   763,  3117,
     552,   552,     0,     0,     0,     0,     0,     0,     0,   764,
       0,     0,   552,     0,     0,   765,     0,     0,  1723,  1724,
       0,   552,     0,     0,     0,     0,   552,     0,   552,     0,
       0,     0,   552,     0,  1725,     0,     0,  1523,     0,  1523,
    1523,     0,     0,   766,     0,     0,   742,   552,     0,     0,
       0,     0,  1198,  1198,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1730,     0,     0,     0,  1198,     0,
       0,     0,     0,  1726,   552,   552,  1727,   552,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1728,  1478,  1479,  1729,     0,     0,     0,     0,     0,     0,
    1706,     0,     0,  1707,     0,     0,     0,  1708,  1709,  1710,
    1711,  1712,  1713,  1714,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1715,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1717,     0,     0,     0,     0,     0,     0,  1718,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   552,     0,
       0,     0,     0,     0,     0,   552,     0,   742,     0,     0,
       0,     0,     0,  2126,  1719,  1731,     0,     0,  1732,  1733,
    1734,  2129,  1735,  1736,  1737,  1738,  1739,  1740,     0,     0,
       0,  1480,  1481,     0,     0,     0,  1730,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   552,     0,     0,
       0,     0,     0,     0,     0,  1482,  1483,     0,     0,     0,
    2175,     0,     0,     0,     0,     0,  2179,  2180,  2181,  2182,
    2183,  2184,  2185,  2186,     0,     0,     0,     0,  2195,  2196,
       0,     0,     0,  2207,     0,     0,   552,  2210,     0,     0,
    2218,  2219,  2220,  2221,  2222,  2223,  2224,  2225,  2226,     0,
       0,  2227,     0,     0,     0,     0,     0,     0,  1198,     0,
    1373,     0,     0,  1720,     0,     0,     0,     0,     0,     0,
       0,     0,  1626,     0,     0,     0,     0,     0,     0,  2253,
       0,     0,  1721,     0,     0,     0,     0,  1722,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1731,     0,     0,
    1732,  1733,  1734,     0,  1735,  1736,  1737,  1738,  1739,  1740,
    1723,  1724,     0,     0,  2481,     0,     0,  1678,  1679,     0,
       0,     0,     0,     0,     0,   552,  1725,   552,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     552,   552,     0,     0,   552,     0,     0,     0,     0,     0,
       0,     0,   552,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1512,  1726,     0,     0,  1727,     0,
       0,     0,     0,     0,  1626,     0,     0,     0,     0,     0,
       0,     0,  1728,     0,   552,  1729,     0,     0,  3117,     0,
     742,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  2383,     0,     0,     0,  1373,     0,
       0,  2393,  2394,   552,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1706,     0,     0,  1707,     0,
       0,     0,  1708,  1709,  1710,  1711,  1712,  1713,  1714,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1373,  1715,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1717,     0,     0,     0,     0,
       0,     0,  1718,     0,   552,     0,  1431,  2460,     0,     0,
       0,   552,  1706,  1743,     0,  1707,     0,     0,  1730,  1708,
    1709,     0,     0, -2238, -2238, -2238,     0,     0,     0,  1719,
       0,     0,     0,     0,     0,   552,  2482,  2483,     0,  2484,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1717,     0,     0,     0,     0,  1743,     0,  1718,
       0,     0,     0,     0,     0,     0,     0,     0,  2510,  2511,
     552,     0,  2253,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1719,     0,   552,     0,
       0,     0,  1512,     0,     0,     0,     0,   552,     0,     0,
       0,  2538,     0,     0,     0,   552,  2543,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1566,     0,  1373,     0,     0,  1720,  1731,
       0,     0,  1732,  1733,  1734,     0,  1735,  1736,  1737,  1738,
    1739,  1740,     0,  1743,     0,     0,  2580,  1721,     0,     0,
       0,     0,  1722,     0,     0,     0,     0,     0,     0,     0,
       0,  2576,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1723,  1724,  1510,     0,     0,
       0,     0,     0,     0,     0,  1720,     0,     0,  1743,     0,
       0,  1725,     0,  1743,     0,     0,     0,     0,     0,     0,
    2595,     0,     0,     0,  1721,  2598,  2599,     0,     0,  1722,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1726,     0,     0,  1727,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1743,  1728,  1725,  2620,
    1729,     0,  2623,     0,  2625,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1706,     0,     0,  1707,     0,
    2629,  1743,  1708,  1709,  1710,  1711,  1712,  1713,  1714,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1715,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1728,  1717,     0,     0,     0,     0,
       0,     0,  1718,     0,  1460,  1461,     0,  1743,  1792,  1743,
       0,  1512,  1512,     0,  2024,     0,     0,  1512,     0,     0,
    1743,     0,     0,  1743,     0,  1813,  2225,     0,  1743,  1719,
       0,  1743,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1730,  1198,  1462,  1463,     0,     0,  1464,
    1465,     0,     0,  2714,     0,     0,  1814,     0,     0,     0,
       0,     0,     0,     0,     0,  1510,     0,     0,     0,     0,
       0,  1743,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1706,     0,     0,  1707,     0,     0,
    1730,  1708,  1709,  1710,  1711,  1712,  1713,  1714,     0,     0,
    1679,     0,     0,     0,     0,     0,  1373,     0,     0,     0,
       0,     0,     0,  1715,     0,     0,     0,     0,  1720,  1466,
    1467,     0,     0,     0,  1717,     0,     0,     0,     0,     0,
       0,  1718,     0,     0,     0,     0,     0,  1721,     0,     0,
       0,     0,  1722,     0,  1731,     0,  1743,  1732,  1733,  1734,
       0,  1735,  1736,  1737,  1738,  1739,  1740,     0,  1719,     0,
       0,  2604,  1743,     0,  2821,  1723,  1724,     0,     0,     0,
       0,     0,  1743,  1743,  1743,     0,     0,     0,  1743,     0,
       0,  1725,  1743,     0,  1468,  1469,  1470,  1471,  1472,  1473,
    1474,  1475,     0,     0,  1476,  1477,     0,     0,     0,     0,
       0,  1731,     0,     0, -2238, -2238, -2238,     0,  1735,  1736,
    1737,  1738,  1739,  1740,     0,     0,     0,     0,     0,     0,
    1726,     0,     0,  1727,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1728,     0,     0,
    1729,     0,     0,     0,  1743,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1720,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1721,     0,     0,     0,
       0,  1722,     0,     0,  1510,  1510,     0,  1743,     0,     0,
    1510,     0,     0,     0,     0,  2901,     0,     0,     0,     0,
       0,  2903,  2129,  1743,  1723,  1724,     0,     0,  1743,     0,
       0,     0,  2909,  1478,  1479,     0,     0,     0,     0,     0,
    1725,     0,     0,  2918,     0,  2024,  2921,     0,  2923,     0,
       0,     0,     0,     0,     0,     0,  2927,     0,     0,     0,
       0,     0,     0,  1730,  2934,  2935,     0,     0,     0,     0,
       0,  2942,     0,     0,     0,     0,     0,     0,     0,  1726,
       0,     0,  1727,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1728,     0,     0,  1729,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  2987,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  3002,     0,     0,
       0,     0,     0,  1480,  1481,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1198,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1482,  1483,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1731,     0,     0,  1732,  1733,  1734,
       0,  1735,  1736,  1737,  1738,  1739,  1740,     0,     0,     0,
       0,  2843,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1730,     0,  2383,     0,  2383,     0,     0,     0,
       0,  1743,     0,     0,     0,     0,     0,     0,     0,  2024,
    2024,     0,  1512,  1512,  1512,  1512,  1512,  1512,     0,     0,
    1512,  1512,  1512,  1512,  1512,  1512,  1512,  1512,  1512,  1512,
    2024,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1706,     0,
       0,  1707,     0,     0,     0,  1708,  1709,  1710,  1711,  1712,
    1713,  1714,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1715,     0,     0,
       0,     0,     0,     0,     0,     0,  2291,     0,  1717,     0,
    1511,     0,     0,  3209,  3210,  1718,     0,     0,     0,     0,
       0,     0,     0,  1731,     0,     0,  1732,  1733,  1734,     0,
    1735,  1736,  1737,  1738,  1739,  1740,     0,     0,     0,     0,
    2915,     0,  1719,     0,     0,     0,     0,     0,  3233,     0,
       0,  1743,     0,     0,  1743,     0,     0,     0,     0,     0,
       0,     0,  3237,     0,     0,     0,     0,  3239,  3240,     0,
       0,     0,  3241,     0,     0,     0,     0,  3244,     0,     0,
    3247,  3248,     0,     0,     0,  2383,  1373,     0,     0,  3256,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1743,     0,     0,     0,  1743,  1743,  1743,  1743,  1743,  1743,
    1743,  1743,     0,     0,     0,     0,     0,  1512,  1512,     0,
    1743,  1743,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1743,     0,     0,  1743,  1198,     0,     0,     0,
       0,  1720,     0,  1743,  1743,  1743,  1743,  1743,  1743,  1743,
    1743,  1743,  1743,     0,     0,     0,     0,     0,     0,     0,
    1721,     0,     0,     0,     0,  1722,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1743,     0,
    3352,     0,     0,     0,     0,     0,     0,     0,  1723,  1724,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1725,     0,     0,  3371,  1511,     0,
       0,     0,     0,     0,     0,  1510,  1510,  1510,  1510,  1510,
    1510,     0,     0,  1510,  1510,  1510,  1510,  1510,  1510,  1510,
    1510,  1510,  1510,     0,     0,     0,     0,     0,     0,  1512,
       0,     0,     0,  1726,     0,     0,  1727,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1728,     0,     0,  1729,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1136,     0,     0,  3286,     0,     0,
       0,     0,  3287,     0,     0, -2238, -2238, -2238,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  3405,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1743,     0,
       0,     0,     0,     0,  3294,     0,     0,     0,  1743,  1743,
       0,  3295,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  3296,  1687,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1730,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  2595,     0,     0,  1743,     0,     0,     0,     0,
       0,     0,     0,  3472,  3473,     0,     0,  3474,     0,  1679,
    1510,  1510,     0,     0,     0,     0,     0,  1743,  1743,  1743,
       0,     0,  2024,  2024,  2024,  2024,  2024,  2024,     0,     0,
       0,  2024,  2024,  2024,  2024,  2024,  2024,  2024,  2024,  2024,
    2024,     0,     0,     0,     0,  1743,  1743,  1511,  1511,     0,
       0,     0,     0,  1511,     0,     0,     0,  3297,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1743,     0,     0,  3298,  1198,  1743,     0,
       0,  3299,     0,     0,     0,     0,     0,  1731,     0,  3548,
    1732,  1733,  1734,     0,  1735,  1736,  1737,  1738,  1739,  1740,
       0,     0,     0,     0,  3018,     0,     0,     0,     0,     0,
       0,  1743,     0,  3560,     0,     0,     0,     0,     0,     0,
    3302,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1743,     0,  1510,  1743,  1743,     0,     0,     0,     0,     0,
    1706,  2024,  2024,  1707,     0,     0,     0,  1708,  1709,  1710,
    1711,  1712,  1713,  1714,     0,  1743,  1512,  1512,  1743,     0,
    1743,     0,     0,     0,  1743,     0,     0,     0,     0,  1715,
       0,     0,     0,     0,     0,     0,  2014,     0,     0,     0,
    1717,     0,     0,     0,     0,     0,     0,  1718,     0,     0,
    3616,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  3209,
       0,     0,     0,  3634,  1719,     0,     0,  1198,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  3643,     0,
       0,     0,     0,  2383,     0,  2383,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1743,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  3306,     0,     0,     0,     0,     0,     0,  2240,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1198,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1720,     0,     0,     0,  3697,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1721,     0,     0,     0,     0,  1722,     0,  1511,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1743,     0,     0,     0,
    1723,  1724,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1725,  3736,     0,     0,
    1512,     0,     0,     0,     0,     0,     0,  3209,     0,     0,
       0,     0,     0,  3307,     0,     0, -2238, -2238, -2238,  1198,
    3311,  3312,  3313,  3314,  3315,  3316,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1726,     0,     0,  1727,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1728,     0,     0,  1729,  1743,     0,  1743,  1510,
    1510,     0,     0,     0,  1743,     0,     0,     0,     0,     0,
       0,     0,     0,  1743,     0,     0,  1743,     0,  1743,     0,
    3800,     0,  1743,     0,     0,  2024,  2024,     0,     0,  1743,
    1743,     0,  1706,     0,     0,  1707,     0,  1743,     0,  1708,
    1709,  1710,  1711,  1712,  1713,  1714,     0,     0,     0,     0,
       0,     0,     0,     0,  2983,     0,     0,     0,     0,     0,
       0,  1715,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1717,     0,     0,     0,     0,  3317,     0,  1718,
       0,     0,  1743,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1743,  1730,     0,
       0,     0,     0,     0,     0,     0,  1719,     0,  1511,  1511,
    1511,  1511,  1511,  1511,     0,     0,  1511,  1511,  1511,  1511,
    1511,  1511,  1511,  1511,  1511,  1511,     0,     0,     0,     0,
       0,     0,     0,  1706,     0,  1512,  1707,     0,     0,     0,
    1708,  1709,  1710,  1711,  1712,  1713,  1714,     0,     0,  3885,
    3885,  3885,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1715,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1717,     0,     0,     0,     0,     0,     0,
    1718,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    3885,     0,     0,     0,     0,  1720,     0,  1719,     0,  1731,
       0,     0,  1732,  1733,  1734,     0,  1735,  1736,  1737,  1738,
    1739,  1740,     0,  1510,  1721,     0,  3250,     0,     0,  1722,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  3214,     0,
       0,     0,  1723,  1724,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  3885,     0,     0,     0,     0,  1725,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  2024,
    1512,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  3238,  1511,  1511,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1743,  1743,  1720,  1726,     0,     0,
    1727,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1728,  1721,     0,  1729,  1743,     0,
    1722,     0,  1743,     0,  1743,  1743,  1743,     0,     0,  1743,
       0,     0,  1743,  1743,     0,     0,     0,     0,     0,     0,
       0,  1743,     0,  1723,  1724,     0,  2983,  2983,  2983,  2983,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1725,
       0,     0,     0,     0,     0,     0,     0,  3317,  3317,  3317,
    3317,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1726,     0,
       0,  1727,     0,     0,     0,  1511,     0,     0,  1510,     0,
       0,     0,     0,     0,     0,  1728,     0,     0,  1729,     0,
    1730,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1743,     0,     0,
       0,     0,     0,  2024,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1743,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1743,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1730,     0,     0,  2024,     0,     0,     0,     0,     0,
       0,  1731,     0,     0,  1732,  1733,  1734,     0,  1735,  1736,
    1737,  1738,  1739,  1740,     0,     0,     0,     0,  3257,     0,
       0,     0,     0,  1510,     0,     0,     0,  1743,  1743,  1743,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  3317,  3317,  3317,  3317,  3317,  3317,  3317,     0,
    1512,  1512,     0,  3317,  3317,     0,     0,     0,     0,     0,
       0,     0,     0,  3317,     0,  3317,     0,     0,     0,     0,
       0,     0,  3317,  3317,  3317,  3317,  3317,  3317,  3317,  3317,
    3317,  3317,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1731,  1743,     0,  1732,  1733,  1734,     0,  1735,
    1736,  1737,  1738,  1739,  1740,  1743,     0,     0,     0,  3479,
       0,     0,     0,     0,     0,  2983,  2983,  2983,  2983,  2983,
    2983,  2983,     0,     0,     0,  2983,  2983,     0,     0,     0,
    2983,     0,     0,  2983,     0,     0,  2983,  2983,  2983,  2983,
    2983,  2983,  2983,  2983,  2983,  2983,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1743,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1511,  1511,     0,     0,     0,     0,     0,  1743,
       0,     0,  1706,     0,     0,  1707,     0,     0,  1743,  1708,
    1709,  1710,  1711,  1712,  1713,  1714,  1512,     0,     0,     0,
       0,     0,     0,     0,  2024,  2024,     0,     0,     0,     0,
       0,  1715,     0,     0,     0,     0,  3317,  1512,  1512,  3317,
       0,  3317,  1717,     0,     0,     0,     0,  2984,  1706,  1718,
       0,  1707,     0,     0,     0,  1708,  1709,  1710,  1711,  1712,
    1713,  1714,  1743,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1719,  1715,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1717,     0,
       0,     0,     0,     0,     0,  1718,     0,     0,     0,     0,
       0,  1743,     0,     0,     0,  3637,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1719,     0,     0,  2024,     0,     0,     0,     0,
    3317,     0,     0,  3317,  3317,     0,     0,     0,  3317,     0,
    2024,  2024,     0,     0,  3317,     0,     0,     0,     0,     0,
       0,     0,     0,  1510,  1510,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1743,     0,     0,     0,  2983,
       0,  2983,     0,  2983,     0,  1720,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1721,     0,     0,     0,     0,  1722,
       0,     0,     0,     0,     0,     0,  3317,  3317,  3317,     0,
       0,  3317,     0,     0,  3317,  3317,  1511,     0,     0,     0,
       0,  1720,  1723,  1724,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1725,     0,
    1721,  1511,     0,     0,     0,  1722,     0,     0,     0,     0,
    1743,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  3317,  3317,  3317,     0,     0,     0,  1723,  1724,
       0,     0,     0,     0,     0,     0,     0,  1726,     0,     0,
    1727,     0,     0,     0,  1725,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1728,     0,     0,  1729,     0,  1510,
       0,     0,     0,     0,     0,     0,  2983,     0,     0,  2983,
    2983,     0,     0,     0,     0,     0,     0,     0,  2983,     0,
    1510,  1510,     0,  1726,     0,  2983,  1727,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1728,     0,     0,  1729,     0,     0,     0,     0,     0,  2984,
    2984,  2984,  2984,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1730,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1511,     0,     0,  2983,  2983,     0,     0,  2983,     0,
    1706,     0,  2983,  1707,     0,  2983,  2983,  1708,  1709,  1710,
    1711,  1712,  1713,  1714,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1730,     0,     0,  1715,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1717,     0,     0,     0,     0,     0,     0,  1718,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1719,  2983,  2983,     0,     0,  2983,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1731,     0,     0,  1732,  1733,  1734,     0,  1735,  1736,
    1737,  1738,  1739,  1740,     0,     0,     0,     0,  3557,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1511,  1731,     0,     0,
    1732,  1733,  1734,     0,  1735,  1736,  1737,  1738,  1739,  1740,
       0,     0,     0,  1706,  3698,     0,  1707,     0,     0,     0,
    1708,  1709,  1710,  1711,  1712,  1713,  1714,     0,     0,     0,
       0,     0,     0,  1720,     0,     0,     0,     0,     0,     0,
       0,     0,  1715,  1706,     0,     0,  1707,     0,     0,     0,
    1708,  1709,  1721,  1717,  1712,  1713,  1714,  1722,     0,     0,
    1718,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1715,     0,     0,     0,     0,     0,     0,     0,
    1723,  1724,     0,  1717,     0,     0,     0,  1719,     0,     0,
    1718,     0,     0,     0,     0,     0,  1725,     0,  2984,  2984,
    2984,  2984,  2984,  2984,  2984,     0,     0,     0,  2984,  2984,
       0,     0,     0,  2984,     0,     0,  2984,  1719,     0,  2984,
    2984,  2984,  2984,  2984,  2984,  2984,  2984,  2984,  2984,  3537,
       0,     0,     0,     0,     0,  1726,     0,     0,  1727,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1728,     0,     0,  1729,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1720,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1721,     0,     0,     0,     0,
    1722,     0,     0,     0,     0,     0,  1720,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1723,  1724,  1721,     0,     0,     0,     0,
    1722,     0,     0,     0,     0,     0,     0,     0,     0,  1725,
       0,     0,     0,     0,     0,     0,     0,     0,  1730,     0,
       0,     0,     0,  1723,  1724,     0,     0,     0,  1511,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1725,
       0,     0,     0,     0,     0,     0,     0,     0,  1726,     0,
       0,  1727,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1728,     0,     0,  1729,     0,
       0,     0,     0,     0,     0,     0,  1511,  1511,  1726,     0,
       0,  1727,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  2984,     0,  2984,  1728,  2984,     0,  1729,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1731,
       0,     0,  1732,  1733,  1734,     0,  1735,  1736,  1737,  1738,
    1739,  1740,     0,     0,     0,     0,  3789,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1730,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1730,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1511,     0,     0,     0,     0,     0,     0,  2984,
       0,     0,  2984,  2984,     0,     0,     0,     0,     0,     0,
       0,  2984,     0,  1511,  1511,     0,     0,     0,  2984,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1731,     0,     0,  1732,  1733,  1734,     0,  1735,
    1736,  1737,  1738,  1739,  1740,     0,     0,     0,     0,  3818,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1731,     0,     0,  1732,  1733,  1734,     0,  1735,
    1736,  1737,  1738,  1739,  1740,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  2984,  2984,     0,
       0,  2984,     0,     0,     0,  2984,     0,     0,  2984,  2984,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   119,  1133,   843,  1134,  1135,  1136,  1137,
    1138,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   120,   121,   122,   123,   124,   125,   126,   127,
     128,     0,   129,   130,   131,     0,     0,     0,  2984,  2984,
     132,  1139,  2984,     0,   133,   134,   135,     0,   136,   137,
     138,   139,   140,   141,   142,   143,  1140,   145,  1141,  1142,
       0,   148,   149,   150,   151,   152,   153,  1143,   812,   154,
     155,   156,   157,  1144,  1145,   160,     0,   161,   162,   163,
     164,   813,     0,   814,     0,  1146,   168,   169,   170,   171,
     172,   173,   174,   175,   176,     0,   177,   178,   179,   180,
     181,   182,     0,   183,   184,   185,   186,   187,   188,   189,
     190,   191,   192,   193,  1147,   195,   196,  1148,   198,  1149,
     199,     0,   200,   201,   202,   203,   204,   205,    14,    15,
     206,   207,   208,   209,   210,     0,     0,   211,   212,  1150,
     214,   215,   216,   217,     0,   218,   219,   220,     0,   221,
     222,   223,     0,   224,   225,   226,   227,  1151,   229,   230,
     231,   232,   233,   815,  1152,   235,     0,   236,   237,  1153,
     239,     0,   240,     0,   241,   242,    23,   243,   244,   245,
     246,   247,   248,     0,   249,   250,     0,     0,  1154,  1155,
     253,   254,     0,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,     0,   267,   268,   269,   270,
     271,   272,   273,     0,   274,   275,   276,   277,   278,   279,
     280,   281,  1156,  1157,     0,  1158,     0,   285,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,     0,
       0,   297,   298,   299,   300,     0,   301,   302,   303,   304,
     305,   306,   307,   308,  1159,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,  1160,   331,  1161,   333,   334,
     335,   336,   337,  1162,   338,   339,   340,   341,  1163,   818,
     343,  1164,   345,   346,   347,     0,   348,   349,     0,     0,
    1165,   351,   352,     0,     0,   353,   354,   355,   356,   357,
     358,   820,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,   371,   372,    27,    28,    29,     0,   373,
     374,   821,   376,   377,   378,   379,   380,   381,   382,     0,
     383,   384,   385,   386,   387,   388,   389,   390,     0,   391,
     392,   393,  1166,   395,   396,   397,   398,     0,   399,   400,
     401,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,     0,   413,   414,   415,   416,   417,   418,  1167,
     420,   421,   422,   423,   424,   425,   426,   427,   428,   429,
     430,   431,   432,    34,     0,   433,   434,   435,   436,   437,
     438,   439,   440,   441,   442,    36,   443,   444,   445,  1168,
     447,     0,   448,   449,   450,   451,   452,   453,   454,   455,
     456,   457,   458,   459,   460,   461,   462,   823,    38,     0,
     464,   465,    39,   466,   467,   468,   469,   470,   471,   472,
       0,   473,  1169,  1170,     0,   476,     0,   477,   478,   824,
     480,   825,  1171,   482,   483,   826,   485,   486,   487,   488,
     489,     0,     0,   490,   491,   492,    41,   493,   494,   495,
     496,     0,   497,   498,   499,   500,   501,   827,  1172,     0,
     504,   505,   506,   507,   508,   509,   510,   511,   512,   513,
     514,     0,     0,   515,     0,    45,   516,   517,   518,   519,
     520,   521,   522,   523,   524,   525,   526,   527,   528,   529,
     530,   531,   532,   533,   534,   535,   536,  1173,     0,    46,
       0,     0,     0,     0,  1174,  1175,  1176,     0,     0,     0,
       0,  1177,     0,  1178,  3450,     0,     0,     0,     0,  1179,
    1180,     0,     0,     0,     0,  1181,  1182,   119,  1133,   843,
    1134,  1135,  1136,  1137,  1138,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   120,   121,   122,   123,
     124,   125,   126,   127,   128,     0,   129,   130,   131,     0,
       0,     0,     0,     0,   132,  1139,     0,     0,   133,   134,
     135,     0,   136,   137,   138,   139,   140,   141,   142,   143,
    1140,   145,  1141,  1142,     0,   148,   149,   150,   151,   152,
     153,  1143,   812,   154,   155,   156,   157,  1144,  1145,   160,
       0,   161,   162,   163,   164,   813,     0,   814,     0,  1146,
     168,   169,   170,   171,   172,   173,   174,   175,   176,     0,
     177,   178,   179,   180,   181,   182,     0,   183,   184,   185,
     186,   187,   188,   189,   190,   191,   192,   193,  1147,   195,
     196,  1148,   198,  1149,   199,     0,   200,   201,   202,   203,
     204,   205,    14,    15,   206,   207,   208,   209,   210,     0,
       0,   211,   212,  1150,   214,   215,   216,   217,     0,   218,
     219,   220,     0,   221,   222,   223,     0,   224,   225,   226,
     227,  1151,   229,   230,   231,   232,   233,   815,  1152,   235,
       0,   236,   237,  1153,   239,     0,   240,     0,   241,   242,
      23,   243,   244,   245,   246,   247,   248,     0,   249,   250,
       0,     0,  1154,  1155,   253,   254,     0,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,     0,
     267,   268,   269,   270,   271,   272,   273,     0,   274,   275,
     276,   277,   278,   279,   280,   281,  1156,  1157,     0,  1158,
       0,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,     0,     0,   297,   298,   299,   300,     0,
     301,   302,   303,   304,   305,   306,   307,   308,  1159,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,   322,   323,   324,   325,   326,   327,   328,   329,  1160,
     331,  1161,   333,   334,   335,   336,   337,  1162,   338,   339,
     340,   341,  1163,   818,   343,  1164,   345,   346,   347,     0,
     348,   349,     0,     0,  1165,   351,   352,     0,     0,   353,
     354,   355,   356,   357,   358,   820,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,   371,   372,    27,
      28,    29,     0,   373,   374,   821,   376,   377,   378,   379,
     380,   381,   382,     0,   383,   384,   385,   386,   387,   388,
     389,   390,     0,   391,   392,   393,  1166,   395,   396,   397,
     398,     0,   399,   400,   401,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,     0,   413,   414,   415,
     416,   417,   418,  1167,   420,   421,   422,   423,   424,   425,
     426,   427,   428,   429,   430,   431,   432,    34,     0,   433,
     434,   435,   436,   437,   438,   439,   440,   441,   442,    36,
     443,   444,   445,  1168,   447,     0,   448,   449,   450,   451,
     452,   453,   454,   455,   456,   457,   458,   459,   460,   461,
     462,   823,    38,     0,   464,   465,    39,   466,   467,   468,
     469,   470,   471,   472,     0,   473,  1169,  1170,     0,   476,
       0,   477,   478,   824,   480,   825,  1171,   482,   483,   826,
     485,   486,   487,   488,   489,     0,     0,   490,   491,   492,
      41,   493,   494,   495,   496,     0,   497,   498,   499,   500,
     501,   827,  1172,     0,   504,   505,   506,   507,   508,   509,
     510,   511,   512,   513,   514,     0,     0,   515,     0,    45,
     516,   517,   518,   519,   520,   521,   522,   523,   524,   525,
     526,   527,   528,   529,   530,   531,   532,   533,   534,   535,
     536,  1173,     0,    46,     0,     0,     0,     0,  1174,  1175,
    1176,     0,     0,     0,     0,  1177,     0,  1178,     0,     0,
       0,     0,     0,  1179,  1180,     0,     0,     0,     0,  1181,
    1182,   119,  1133,   843,  1134,  1135,  1136,  1137,  1138,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     120,   121,   122,   123,   124,   125,   126,   127,   128,     0,
     129,   130,   131,     0,     0,     0,     0,     0,   132,  1139,
       0,     0,   133,   134,   135,     0,   136,   137,   138,   139,
     140,   141,   142,   143,  1140,   145,  1141,  1142,     0,   148,
     149,   150,   151,   152,   153,  1143,   812,   154,   155,   156,
     157,  1144,  1145,   160,     0,   161,   162,   163,   164,   813,
       0,   814,     0,  1146,   168,   169,   170,   171,   172,   173,
     174,   175,   176,     0,   177,   178,   179,   180,   181,   182,
       0,   183,   184,   185,   186,   187,   188,   189,   190,   191,
     192,   193,  1147,   195,   196,  1148,   198,  1149,   199,     0,
     200,   201,   202,   203,   204,   205,     0,     0,   206,   207,
     208,   209,   210,     0,     0,   211,   212,  1150,   214,   215,
     216,   217,     0,   218,   219,   220,     0,   221,   222,   223,
       0,   224,   225,   226,   227,  1151,   229,   230,   231,   232,
     233,   815,  1152,   235,     0,   236,   237,  1153,   239,     0,
     240,     0,   241,   242,    23,   243,   244,   245,   246,   247,
     248,     0,   249,   250,     0,     0,  1154,  1155,   253,   254,
       0,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,     0,   267,   268,   269,   270,   271,   272,
     273,     0,   274,   275,   276,   277,   278,   279,   280,   281,
    1156,  1157,     0,  1158,     0,   285,   286,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,     0,     0,   297,
     298,   299,   300,     0,   301,   302,   303,   304,   305,   306,
     307,   308,  1159,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,   323,   324,   325,   326,
     327,   328,   329,  1160,   331,  1161,   333,   334,   335,   336,
     337,  1162,   338,   339,   340,   341,  1163,   818,   343,  1164,
     345,   346,   347,     0,   348,   349,     0,     0,  1165,   351,
     352,     0,     0,   353,   354,   355,   356,   357,   358,   820,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
     370,   371,   372,    27,    28,    29,     0,   373,   374,   821,
     376,   377,   378,   379,   380,   381,   382,     0,   383,   384,
     385,   386,   387,   388,   389,   390,     0,   391,   392,   393,
    1166,   395,   396,   397,   398,     0,   399,   400,   401,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
       0,   413,   414,   415,   416,   417,   418,  1167,   420,   421,
     422,   423,   424,   425,   426,   427,   428,   429,   430,   431,
     432,    34,     0,   433,   434,   435,   436,   437,   438,   439,
     440,   441,   442,     0,   443,   444,   445,  1168,   447,     0,
     448,   449,   450,   451,   452,   453,   454,   455,   456,   457,
     458,   459,   460,   461,   462,   823,     0,     0,   464,   465,
      39,   466,   467,   468,   469,   470,   471,   472,     0,   473,
    1169,  1170,     0,   476,     0,   477,   478,   824,   480,   825,
    1171,   482,   483,   826,   485,   486,   487,   488,   489,     0,
       0,   490,   491,   492,    41,   493,   494,   495,   496,     0,
     497,   498,   499,   500,   501,   827,  1172,     0,   504,   505,
     506,   507,   508,   509,   510,   511,   512,   513,   514,     0,
       0,   515,     0,    45,   516,   517,   518,   519,   520,   521,
     522,   523,   524,   525,   526,   527,   528,   529,   530,   531,
     532,   533,   534,   535,   536,  1173,     0,    46,     0,     0,
       0,     0,  1174,  1175,  1176,     0,     0,     0,     0,  1177,
       0,  1178,     0,     0,     0,     0,     0,  1179,  1180,     0,
       0,     0,     0,  1181,  1182,  1333,  1133,   843,  1134,  1135,
    1136,  1137,  1138,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   120,   121,   122,   123,   124,   125,
     126,   127,   128,  1334,   129,   130,   131,     0,     0,     0,
    1335,     0,   132,  1139,     0,     0,  1336,   134,   135,     0,
     136,   137,   138,  1337,   140,   141,   142,   143,  1140,  1338,
    1141,  1142,     0,   148,   149,   150,   151,   152,   153,  1143,
     812,   154,   155,   156,   157,  1144,  1145,   160,     0,   161,
     162,   163,   164,   813,     0,  1339,     0,  1340,   168,   169,
     170,   171,   172,  1341,   174,   175,   176,     0,   177,   178,
     179,   180,   181,   182,     0,  1342,   184,   185,   186,   187,
     188,   189,   190,   191,   192,   193,  1147,   195,   196,  1148,
     198,  1149,   199,     0,   200,   201,   202,   203,   204,   205,
       0,     0,   206,   207,   208,   209,   210,  1343,     0,   211,
     212,  1150,   214,   215,   216,   217,     0,   218,   219,   220,
       0,   221,   222,   223,     0,   224,   225,   226,   227,  1151,
     229,   230,   231,   232,   233,   815,  1152,   235,     0,   236,
     237,  1153,   239,     0,   240,     0,   241,  1344,     0,  1345,
     244,   245,  1346,  1347,   248,     0,   249,   250,     0,     0,
    1154,  1155,   253,   254,     0,   255,   256,   257,   258,   259,
     260,   261,  1348,   263,   264,   265,   266,     0,   267,   268,
     269,   270,   271,   272,   273,     0,   274,  1349,   276,   277,
     278,   279,   280,   281,  1156,  1157,     0,  1158,     0,   285,
    1350,  1351,   288,  1352,   290,   291,   292,   293,   294,   295,
     296,     0,     0,   297,  1353,   299,  1354,     0,   301,   302,
     303,   304,   305,   306,   307,   308,  1355,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
     323,   324,   325,   326,   327,   328,   329,  1160,  1356,  1161,
     333,   334,   335,   336,   337,  1162,   338,   339,  1357,   341,
    1163,   818,   343,  1164,   345,   346,   347,     0,   348,   349,
       0,     0,  1165,   351,   352,     0,     0,   353,   354,   355,
    1358,   357,  1359,   820,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,     0,     0,     0,
       0,   373,   374,   821,  1360,   377,   378,   379,   380,   381,
     382,     0,   383,   384,   385,   386,   387,   388,   389,   390,
       0,   391,   392,   393,  1166,   395,   396,   397,   398,     0,
     399,   400,   401,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,     0,   413,   414,  1361,   416,   417,
     418,  1167,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   429,   430,   431,   432,     0,  1362,   433,   434,   435,
     436,   437,   438,   439,   440,   441,   442,     0,  1363,   444,
     445,  1168,   447,     0,   448,   449,   450,   451,   452,   453,
     454,   455,   456,   457,   458,   459,   460,  1364,   462,   823,
       0,     0,   464,   465,     0,   466,  1365,   468,   469,   470,
     471,   472,     0,   473,  1169,  1170,     0,   476,     0,   477,
     478,   824,   480,   825,  1171,   482,   483,  1366,   485,   486,
     487,   488,   489,     0,     0,   490,   491,   492,     0,   493,
     494,   495,   496,     0,   497,   498,   499,   500,   501,   502,
    1172,  1367,   504,  1368,   506,   507,   508,   509,   510,   511,
     512,   513,   514,     0,     0,   515,     0,     0,   516,   517,
     518,   519,   520,   521,   522,   523,   524,   525,   526,   527,
     528,   529,   530,   531,   532,   533,   534,   535,   536,  1173,
       0,     0,     0,     0,     0,     0,  1174,  1175,  1176,     0,
       0,     0,     0,  1177,     0,  1178,  1369,     0,     0,     0,
       0,  1179,  1180,     0,     0,     0,     0,  1181,  1182,   119,
    1133,   843,  1134,  1135,     0,  1137,  1138,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   120,   121,
     122,   123,   124,   125,   126,   127,   128,     0,   129,   130,
     131,     0,     0,     0,     0,     0,   132,  1139,     0,     0,
     133,   134,   135,     0,   136,   137,   138,   139,   140,   141,
     142,   143,  1140,   145,  1141,  1142,     0,   148,   149,   150,
     151,   152,   153,  1143,   812,   154,   155,   156,   157,  1144,
    1145,   160,     0,   161,   162,   163,   164,   813,     0,   814,
       0,   167,   168,   169,   170,   171,   172,   173,   174,   175,
     176,     0,   177,   178,   179,   180,   181,   182,     0,   183,
     184,   185,   186,   187,   188,   189,   190,   191,   192,   193,
    1147,   195,   196,  1148,   198,     0,   199,     0,   200,   201,
     202,   203,   204,   205,    14,    15,   206,   207,   208,   209,
     210,     0,     0,   211,   212,  1150,   214,   215,   216,   217,
       0,   218,   219,   220,     0,   221,   222,   223,     0,   224,
     225,   226,   227,  1151,   229,   230,   231,   232,   233,   815,
    1152,   235,     0,   236,   237,  1153,   239,     0,   240,     0,
     241,   242,    23,   243,   244,   245,   246,   247,   248,     0,
     249,   250,     0,     0,  1154,  1155,   253,   254,     0,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,     0,   267,   268,   269,   270,   271,   272,   273,     0,
     274,   275,   276,   277,   278,   279,   280,   281,  1156,  1157,
       0,  1158,     0,   285,   286,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,     0,     0,   297,   298,   299,
     300,     0,   301,   302,   303,   304,   305,   306,   307,   308,
    1159,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     329,  1160,   331,  1161,   333,   334,   335,   336,   337,     0,
     338,   339,   340,   341,  1163,   818,   343,  1164,   345,   346,
     347,     0,   348,   349,     0,     0,   350,   351,   352,     0,
       0,   353,   354,   355,   356,   357,   358,   820,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,    27,    28,    29,     0,   373,   374,   821,   376,   377,
     378,   379,   380,   381,   382,     0,   383,   384,   385,   386,
     387,   388,   389,   390,     0,   391,   392,   393,  1166,   395,
     396,   397,   398,     0,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,     0,   413,
     414,   415,   416,   417,   418,  1167,   420,   421,   422,   423,
     424,   425,   426,   427,   428,   429,   430,   431,   432,    34,
       0,   433,   434,   435,   436,   437,   438,   439,   440,   441,
     442,    36,   443,   444,   445,  1168,   447,     0,   448,   449,
     450,   451,   452,   453,   454,   455,   456,   457,   458,   459,
     460,   461,   462,   823,    38,     0,   464,   465,    39,   466,
     467,   468,   469,   470,   471,   472,     0,   473,  1169,  1170,
       0,   476,     0,   477,   478,   824,   480,   825,  1171,   482,
     483,   826,   485,   486,   487,   488,   489,     0,     0,   490,
     491,   492,    41,   493,   494,   495,   496,     0,   497,   498,
     499,   500,   501,   827,  1172,     0,   504,   505,   506,   507,
     508,   509,   510,   511,   512,   513,   514,     0,     0,   515,
       0,    45,   516,   517,   518,   519,   520,   521,   522,   523,
     524,   525,   526,   527,   528,   529,   530,   531,   532,   533,
     534,   535,   536,     0,     0,    46,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1177,     0,  1178,
       0,     0,     0,     0,     0,  1179,  1180,     0,     0,     0,
       0,  1181,  1182,   119,  1133,   843,  1134,  1135,  1136,  1137,
    1138,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   120,   121,   122,   123,   124,   125,   126,   127,
     128,     0,   129,   130,   131,     0,     0,     0,     0,     0,
     132,  1139,     0,     0,   133,   134,   135,     0,   136,   137,
     138,   139,   140,   141,   142,   143,  1140,   145,  1141,  1142,
    1519,   148,   149,   150,   151,   152,   153,  1143,   812,   154,
     155,   156,   157,  1144,  1145,   160,     0,   161,   162,   163,
     164,   813,     0,   814,     0,  1146,   168,   169,   170,   171,
     172,   173,   174,   175,   176,     0,   177,   178,   179,   180,
     181,   182,     0,   183,   184,   185,   186,   187,   188,   189,
     190,   191,   192,   193,  1147,   195,   196,  1148,   198,  1149,
     199,     0,   200,   201,   202,   203,   204,   205,     0,     0,
     206,   207,   208,   209,   210,     0,     0,   211,   212,  1150,
     214,   215,   216,   217,     0,   218,   219,   220,     0,   221,
     222,   223,     0,   224,   225,   226,   227,  1151,   229,   230,
     231,   232,   233,   815,  1152,   235,     0,   236,   237,  1153,
     239,     0,   240,     0,   241,   242,  1520,   243,   244,   245,
     246,   247,   248,     0,   249,   250,     0,     0,  1154,  1155,
     253,   254,     0,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,     0,   267,   268,   269,   270,
     271,   272,   273,     0,   274,   275,   276,   277,   278,   279,
     280,   281,  1156,  1157,     0,  1158,     0,   285,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,     0,
    1521,   297,   298,   299,   300,     0,   301,   302,   303,   304,
     305,   306,   307,   308,  1159,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,  1160,   331,  1161,   333,   334,
     335,   336,   337,  1162,   338,   339,   340,   341,  1163,   818,
     343,  1164,   345,   346,   347,     0,   348,   349,     0,     0,
    1165,   351,   352,     0,     0,   353,   354,   355,   356,   357,
     358,   820,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,   371,   372,     0,     0,     0,     0,   373,
     374,   821,   376,   377,   378,   379,   380,   381,   382,     0,
     383,   384,   385,   386,   387,   388,   389,   390,     0,   391,
     392,   393,  1166,   395,   396,   397,   398,     0,   399,   400,
     401,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,     0,   413,   414,   415,   416,   417,   418,  1167,
     420,   421,   422,   423,   424,   425,   426,   427,   428,   429,
     430,   431,   432,     0,     0,   433,   434,   435,   436,   437,
     438,   439,   440,   441,   442,     0,   443,   444,   445,  1168,
     447,     0,   448,   449,   450,   451,   452,   453,   454,   455,
     456,   457,   458,   459,   460,   461,   462,   823,     0,     0,
     464,   465,     0,   466,   467,   468,   469,   470,   471,   472,
       0,   473,  1169,  1170,     0,   476,  1522,   477,   478,   824,
     480,   825,  1171,   482,   483,   826,   485,   486,   487,   488,
     489,     0,     0,   490,   491,   492,     0,   493,   494,   495,
     496,     0,   497,   498,   499,   500,   501,   502,  1172,     0,
     504,   505,   506,   507,   508,   509,   510,   511,   512,   513,
     514,     0,     0,   515,     0,     0,   516,   517,   518,   519,
     520,   521,   522,   523,   524,   525,   526,   527,   528,   529,
     530,   531,   532,   533,   534,   535,   536,  1173,     0,     0,
       0,     0,     0,     0,  1174,  1175,  1176,     0,     0,     0,
       0,  1177,     0,  1178,     0,     0,     0,     0,     0,  1179,
    1180,     0,     0,     0,     0,  1181,  1182,  1333,  1133,   843,
    1134,  1135,  1136,  1137,  1138,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   120,   121,   122,   123,
     124,   125,   126,   127,   128,     0,   129,   130,   131,     0,
       0,     0,  1335,     0,   132,  1139,     0,     0,  1336,   134,
     135,     0,   136,   137,   138,  1337,   140,   141,   142,   143,
    1140,  1338,  1141,  1142,     0,   148,   149,   150,   151,   152,
     153,  1143,   812,   154,   155,   156,   157,  1144,  1145,   160,
       0,   161,   162,   163,   164,   813,     0,  1339,     0,  1340,
     168,   169,   170,   171,   172,  1341,   174,   175,   176,     0,
     177,   178,   179,   180,   181,   182,     0,  1342,   184,   185,
     186,   187,   188,   189,   190,   191,   192,   193,  1147,   195,
     196,  1148,   198,  1149,   199,     0,   200,   201,   202,   203,
     204,   205,     0,     0,   206,   207,   208,   209,   210,     0,
       0,   211,   212,  1150,   214,   215,   216,   217,     0,   218,
     219,   220,     0,   221,   222,   223,     0,   224,   225,   226,
     227,  1151,   229,   230,   231,   232,   233,   815,  1152,   235,
       0,   236,   237,  1153,   239,     0,   240,     0,   241,  1344,
       0,  1345,   244,   245,  1346,  1347,   248,     0,   249,   250,
       0,     0,  1154,  1155,   253,   254,     0,   255,   256,   257,
     258,   259,   260,   261,  1348,   263,   264,   265,   266,     0,
     267,   268,   269,   270,   271,   272,   273,     0,   274,  1349,
     276,   277,   278,   279,   280,   281,  1156,  1157,     0,  1158,
       0,   285,  1350,  1351,   288,  1352,   290,   291,   292,   293,
     294,   295,   296,     0,     0,   297,  1353,   299,  1354,     0,
     301,   302,   303,   304,   305,   306,   307,   308,  1355,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,   322,   323,   324,   325,   326,   327,   328,   329,  1160,
    1356,  1161,   333,   334,   335,   336,   337,  1162,   338,   339,
    1357,   341,  1163,   818,   343,  1164,   345,   346,   347,     0,
     348,   349,     0,     0,  1165,   351,   352,     0,     0,   353,
     354,   355,  1358,   357,  1359,   820,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,   371,   372,     0,
       0,     0,     0,   373,   374,   821,  1360,   377,   378,   379,
     380,   381,   382,     0,   383,   384,   385,   386,   387,   388,
     389,   390,     0,   391,   392,   393,  1166,   395,   396,   397,
     398,     0,   399,   400,   401,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,     0,   413,   414,  1361,
     416,   417,   418,  1167,   420,   421,   422,   423,   424,   425,
     426,   427,   428,   429,   430,   431,   432,     0,  1362,   433,
     434,   435,   436,   437,   438,   439,   440,   441,   442,     0,
    1363,   444,   445,  1168,   447,     0,   448,   449,   450,   451,
     452,   453,   454,   455,   456,   457,   458,   459,   460,  1364,
     462,   823,     0,     0,   464,   465,     0,   466,  1365,   468,
     469,   470,   471,   472,     0,   473,  1169,  1170,     0,   476,
       0,   477,   478,   824,   480,   825,  1171,   482,   483,  1366,
     485,   486,   487,   488,   489,     0,     0,   490,   491,   492,
       0,   493,   494,   495,   496,     0,   497,   498,   499,   500,
     501,   502,  1172,  2388,   504,  1368,   506,   507,   508,   509,
     510,   511,   512,   513,   514,     0,     0,   515,     0,     0,
     516,   517,   518,   519,   520,   521,   522,   523,   524,   525,
     526,   527,   528,   529,   530,   531,   532,   533,   534,   535,
     536,  1173,     0,     0,     0,     0,     0,     0,  1174,  1175,
    1176,     0,     0,     0,     0,  1177,     0,  1178,     0,     0,
       0,     0,     0,  1179,  1180,     0,     0,     0,     0,  1181,
    1182,  1333,  1133,   843,  1134,  1135,  1136,  1137,  1138,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     120,   121,   122,   123,   124,   125,   126,   127,   128,     0,
     129,   130,   131,     0,     0,     0,  1335,     0,   132,  1139,
       0,     0,  1336,   134,   135,     0,   136,   137,   138,  1337,
     140,   141,   142,   143,  1140,  1338,  1141,  1142,     0,   148,
     149,   150,   151,   152,   153,  1143,   812,   154,   155,   156,
     157,  1144,  1145,   160,     0,   161,   162,   163,   164,   813,
       0,  1339,     0,  1340,   168,   169,   170,   171,   172,  1341,
     174,   175,   176,     0,   177,   178,   179,   180,   181,   182,
       0,  1342,   184,   185,   186,   187,   188,   189,   190,   191,
     192,   193,  1147,   195,   196,  1148,   198,  1149,   199,     0,
     200,   201,   202,   203,   204,   205,     0,     0,   206,   207,
     208,   209,   210,     0,     0,   211,   212,  1150,   214,   215,
     216,   217,     0,   218,   219,   220,     0,   221,   222,   223,
       0,   224,   225,   226,   227,  1151,   229,   230,   231,   232,
     233,   815,  1152,   235,     0,   236,   237,  1153,   239,     0,
     240,     0,   241,  1344,     0,  1345,   244,   245,  1346,  1347,
     248,     0,   249,   250,     0,     0,  1154,  1155,   253,   254,
       0,   255,   256,   257,   258,   259,   260,   261,  1348,   263,
     264,   265,   266,     0,   267,   268,   269,   270,   271,   272,
     273,     0,   274,  1349,   276,   277,   278,   279,   280,   281,
    1156,  1157,     0,  1158,     0,   285,  1350,  1351,   288,  1352,
     290,   291,   292,   293,   294,   295,   296,     0,     0,   297,
    1353,   299,  1354,     0,   301,   302,   303,   304,   305,   306,
     307,   308,  1355,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,   323,   324,   325,   326,
     327,   328,   329,  1160,  1356,  1161,   333,   334,   335,   336,
     337,  1162,   338,   339,  1357,   341,  1163,   818,   343,  1164,
     345,   346,   347,     0,   348,   349,     0,     0,  1165,   351,
     352,     0,     0,   353,   354,   355,  1358,   357,  1359,   820,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
     370,   371,   372,     0,     0,     0,     0,   373,   374,   821,
    1360,   377,   378,   379,   380,   381,   382,     0,   383,   384,
     385,   386,   387,   388,   389,   390,     0,   391,   392,   393,
    1166,   395,   396,   397,   398,     0,   399,   400,   401,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
       0,   413,   414,  1361,   416,   417,   418,  1167,   420,   421,
     422,   423,   424,   425,   426,   427,   428,   429,   430,   431,
     432,     0,  1362,   433,   434,   435,   436,   437,   438,   439,
     440,   441,   442,     0,  1363,   444,   445,  1168,   447,     0,
     448,   449,   450,   451,   452,   453,   454,   455,   456,   457,
     458,   459,   460,  1364,   462,   823,     0,     0,   464,   465,
       0,   466,  1365,   468,   469,   470,   471,   472,     0,   473,
    1169,  1170,     0,   476,     0,   477,   478,   824,   480,   825,
    1171,   482,   483,  1366,   485,   486,   487,   488,   489,     0,
       0,   490,   491,   492,     0,   493,   494,   495,   496,     0,
     497,   498,   499,   500,   501,   502,  1172,     0,   504,  1368,
     506,   507,   508,   509,   510,   511,   512,   513,   514,     0,
       0,   515,     0,     0,   516,   517,   518,   519,   520,   521,
     522,   523,   524,   525,   526,   527,   528,   529,   530,   531,
     532,   533,   534,   535,   536,  1173,     0,     0,     0,     0,
       0,     0,  1174,  1175,  1176,     0,     0,     0,     0,  1177,
       0,  1178,  2444,     0,     0,     0,     0,  1179,  1180,     0,
       0,     0,     0,  1181,  1182,   119,  1133,   843,  1134,  1135,
    1136,  1137,  1138,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   120,   121,   122,   123,   124,   125,
     126,   127,   128, -1302,   129,   130,   131,     0,     0,     0,
       0, -1302,   132,  1139,     0,     0,   133,   134,   135,     0,
     136,   137,   138,   139,   140,   141,   142,   143,  1140,   145,
    1141,  1142,     0,   148,   149,   150,   151,   152,   153,  1143,
     812,   154,   155,   156,   157,  1144,  1145,   160,     0,   161,
     162,   163,   164,   813,     0,   814,     0,  1146,   168,   169,
     170,   171,   172,   173,   174,   175,   176,     0,   177,   178,
     179,   180,   181,   182,     0,   183,   184,   185,   186,   187,
     188,   189,   190,   191,   192,   193,  1147,   195,   196,  1148,
     198,  1149,   199,     0,   200,   201,   202,   203,   204,   205,
       0,     0,   206,   207,   208,   209,   210,     0,     0,   211,
     212,  1150,   214,   215,   216,   217,     0,   218,   219,   220,
       0,   221,   222,   223,     0,   224,   225,   226,   227,  1151,
     229,   230,   231,   232,   233,   815,  1152,   235,     0,   236,
     237,  1153,   239,     0,   240,     0,   241,   242,     0,   243,
     244,   245,   246,   247,   248,     0,   249,   250,     0,     0,
    1154,  1155,   253,   254,     0,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,     0,   267,   268,
     269,   270,   271,   272,   273,     0,   274,   275,   276,   277,
     278,   279,   280,   281,  1156,  1157,     0,  1158,     0,   285,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,     0,     0,   297,   298,   299,   300,     0,   301,   302,
     303,   304,   305,   306,   307,   308,  1159,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
     323,   324,   325,   326,   327,   328,   329,  1160,   331,  1161,
     333,   334,   335,   336,   337,  1162,   338,   339,   340,   341,
    1163,   818,   343,  1164,   345,   346,   347,     0,   348,   349,
       0,     0,  1165,   351,   352,     0,     0,   353,   354,   355,
     356,   357,   358,   820,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,     0,     0,     0,
       0,   373,   374,   821,   376,   377,   378,   379,   380,   381,
     382,     0,   383,   384,   385,   386,   387,   388,   389,   390,
       0,   391,   392,   393,  1166,   395,   396,   397,   398,     0,
     399,   400,   401,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,     0,   413,   414,   415,   416,   417,
     418,  1167,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   429,   430,   431,   432,     0,     0,   433,   434,   435,
     436,   437,   438,   439,   440,   441,   442,     0,   443,   444,
     445,  1168,   447, -1302,   448,   449,   450,   451,   452,   453,
     454,   455,   456,   457,   458,   459,   460,   461,   462,   823,
       0,     0,   464,   465,     0,   466,   467,   468,   469,   470,
     471,   472,     0,   473,  1169,  1170,     0,   476,     0,   477,
     478,   824,   480,   825,  1171,   482,   483,   826,   485,   486,
     487,   488,   489,     0,     0,   490,   491,   492,     0,   493,
     494,   495,   496,     0,   497,   498,   499,   500,   501,   502,
    1172,     0,   504,   505,   506,   507,   508,   509,   510,   511,
     512,   513,   514,     0,     0,   515,     0,     0,   516,   517,
     518,   519,   520,   521,   522,   523,   524,   525,   526,   527,
     528,   529,   530,   531,   532,   533,   534,   535,   536,  1173,
       0,     0,     0,     0,     0,     0,  1174,  1175,  1176,     0,
       0,     0,     0,  1177,     0,  1178,     0,     0,     0,     0,
       0,  1179,  1180,     0,     0,     0,     0,  1181,  1182,  1333,
    1133,   843,  1134,  1135,  1136,  1137,  1138,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   120,   121,
     122,   123,   124,   125,   126,   127,   128,     0,   129,   130,
     131,     0,     0,     0,  1335,     0,   132,  1139,     0,     0,
    1336,   134,   135,     0,   136,   137,   138,  1337,   140,   141,
     142,   143,  1140,  1338,  1141,  1142,     0,   148,   149,   150,
     151,   152,   153,  1143,   812,   154,   155,   156,   157,  1144,
    1145,   160,     0,   161,   162,   163,   164,   813,     0,  1339,
       0,  1340,   168,   169,   170,   171,   172,  1341,   174,   175,
     176,     0,   177,   178,   179,   180,   181,   182,     0,  1342,
     184,   185,   186,   187,   188,   189,   190,   191,   192,   193,
    1147,   195,   196,  1148,   198,  1149,   199,     0,   200,   201,
     202,   203,   204,   205,     0,     0,   206,   207,   208,   209,
     210,     0,     0,   211,   212,  1150,   214,   215,   216,   217,
       0,   218,   219,   220,     0,   221,   222,   223,     0,   224,
     225,   226,   227,  1151,   229,   230,   231,   232,   233,   815,
    1152,   235,     0,   236,   237,  1153,   239,     0,   240,     0,
     241,  1344,     0,  1345,   244,   245,  1346,  1347,   248,     0,
     249,   250,     0,     0,  1154,  1155,   253,   254,     0,   255,
     256,   257,   258,   259,   260,   261,  1348,   263,   264,   265,
     266,     0,   267,   268,   269,   270,   271,   272,   273,     0,
     274,  1349,   276,   277,   278,   279,   280,   281,  1156,  1157,
       0,  1158,     0,   285,  1350,  1351,   288,  1352,   290,   291,
     292,   293,   294,   295,   296,     0,     0,   297,  1353,   299,
    1354,     0,   301,   302,   303,   304,   305,   306,   307,   308,
    1355,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     329,  1160,  1356,  1161,   333,   334,   335,   336,   337,  1162,
     338,   339,  1357,   341,  1163,   818,   343,  1164,   345,   346,
     347,     0,   348,   349,     0,     0,  1165,   351,   352,     0,
       0,   353,   354,   355,  1358,   357,  1359,   820,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,     0,     0,     0,     0,   373,   374,   821,  1360,   377,
     378,   379,   380,   381,   382,     0,   383,   384,   385,   386,
     387,   388,   389,   390,     0,   391,   392,   393,  1166,   395,
     396,   397,   398,     0,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,     0,   413,
     414,  1361,   416,   417,   418,  1167,   420,   421,   422,   423,
     424,   425,   426,   427,   428,   429,   430,   431,   432,     0,
    1362,   433,   434,   435,   436,   437,   438,   439,   440,   441,
     442,     0,  1363,   444,   445,  1168,   447,     0,   448,   449,
     450,   451,   452,   453,   454,   455,   456,   457,   458,   459,
     460,  1364,   462,   823,     0,     0,   464,   465,     0,   466,
    1365,   468,   469,   470,   471,   472,     0,   473,  1169,  1170,
       0,   476,     0,   477,   478,   824,   480,   825,  1171,   482,
     483,  1366,   485,   486,   487,   488,   489,     0,     0,   490,
     491,   492,     0,   493,   494,   495,   496,     0,   497,   498,
     499,   500,   501,   502,  1172,     0,   504,  1368,   506,   507,
     508,   509,   510,   511,   512,   513,   514,     0,     0,   515,
       0,     0,   516,   517,   518,   519,   520,   521,   522,   523,
     524,   525,   526,   527,   528,   529,   530,   531,   532,   533,
     534,   535,   536,  1173,     0,     0,     0,     0,     0,     0,
    1174,  1175,  1176,     0,     0,     0,     0,  1177,     0,  1178,
    3253,     0,     0,     0,     0,  1179,  1180,     0,     0,     0,
       0,  1181,  1182,  1333,  1133,   843,  1134,  1135,  1136,  1137,
    1138,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   120,   121,   122,   123,   124,   125,   126,   127,
     128,     0,   129,   130,   131,     0,     0,     0,  1335,     0,
     132,  1139,     0,     0,  1336,   134,   135,     0,   136,   137,
     138,  1337,   140,   141,   142,   143,  1140,  1338,  1141,  1142,
       0,   148,   149,   150,   151,   152,   153,  1143,   812,   154,
     155,   156,   157,  1144,  1145,   160,     0,   161,   162,   163,
     164,   813,     0,  1339,     0,  1340,   168,   169,   170,   171,
     172,  1341,   174,   175,   176,     0,   177,   178,   179,   180,
     181,   182,     0,  1342,   184,   185,   186,   187,   188,   189,
     190,   191,   192,   193,  1147,   195,   196,  1148,   198,  1149,
     199,     0,   200,   201,   202,   203,   204,   205,     0,     0,
     206,   207,   208,   209,   210,     0,     0,   211,   212,  1150,
     214,   215,   216,   217,     0,   218,   219,   220,     0,   221,
     222,   223,     0,   224,   225,   226,   227,  1151,   229,   230,
     231,   232,   233,   815,  1152,   235,     0,   236,   237,  1153,
     239,     0,   240,     0,   241,  1344,     0,  1345,   244,   245,
    1346,  1347,   248,     0,   249,   250,     0,     0,  1154,  1155,
     253,   254,     0,   255,   256,   257,   258,   259,   260,   261,
    1348,   263,   264,   265,   266,     0,   267,   268,   269,   270,
     271,   272,   273,     0,   274,  1349,   276,   277,   278,   279,
     280,   281,  1156,  1157,     0,  1158,     0,   285,  1350,  1351,
     288,  1352,   290,   291,   292,   293,   294,   295,   296,     0,
       0,   297,  1353,   299,  1354,     0,   301,   302,   303,   304,
     305,   306,   307,   308,  1355,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,  1160,  1356,  1161,   333,   334,
     335,   336,   337,  1162,   338,   339,  1357,   341,  1163,   818,
     343,  1164,   345,   346,   347,     0,   348,   349,     0,     0,
    1165,   351,   352,     0,     0,   353,   354,   355,  1358,   357,
    1359,   820,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,   371,   372,     0,     0,     0,     0,   373,
     374,   821,  1360,   377,   378,   379,   380,   381,   382,     0,
     383,   384,   385,   386,   387,   388,   389,   390,     0,   391,
     392,   393,  1166,   395,   396,   397,   398,     0,   399,   400,
     401,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,     0,   413,   414,  1361,   416,   417,   418,  1167,
     420,   421,   422,   423,   424,   425,   426,   427,   428,   429,
     430,   431,   432,     0,  1362,   433,   434,   435,   436,   437,
     438,   439,   440,   441,   442,     0,  1363,   444,   445,  1168,
     447,     0,   448,   449,   450,   451,   452,   453,   454,   455,
     456,   457,   458,   459,   460,  1364,   462,   823,     0,     0,
     464,   465,     0,   466,  1365,   468,   469,   470,   471,   472,
       0,   473,  1169,  1170,     0,   476,     0,   477,   478,   824,
     480,   825,  1171,   482,   483,  1366,   485,   486,   487,   488,
     489,     0,     0,   490,   491,   492,     0,   493,   494,   495,
     496,     0,   497,   498,   499,   500,   501,   502,  1172,     0,
     504,  1368,   506,   507,   508,   509,   510,   511,   512,   513,
     514,     0,     0,   515,     0,     0,   516,   517,   518,   519,
     520,   521,   522,   523,   524,   525,   526,   527,   528,   529,
     530,   531,   532,   533,   534,   535,   536,  1173,     0,     0,
       0,     0,     0,     0,  1174,  1175,  1176,     0,     0,     0,
       0,  1177,     0,  1178,     0,     0,     0,     0,     0,  1179,
    1180,     0,     0,     0,     0,  1181,  1182,   119,  1133,   843,
    1134,  1135,  1136,  1137,  1138,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   120,   121,   122,   123,
     124,   125,   126,   127,   128,  1789,   129,   130,   131,     0,
       0,     0,     0,     0,   132,  1139,     0,     0,   133,   134,
     135,     0,   136,   137,   138,   139,   140,   141,   142,   143,
    1140,   145,  1141,  1142,     0,   148,   149,   150,   151,   152,
     153,  1143,   812,   154,   155,   156,   157,  1144,  1145,   160,
       0,   161,   162,   163,   164,   813,     0,   814,     0,  1146,
     168,   169,   170,   171,   172,   173,   174,   175,   176,     0,
     177,   178,   179,   180,   181,   182,     0,   183,   184,   185,
     186,   187,   188,   189,   190,   191,   192,   193,  1147,   195,
     196,  1148,   198,  1149,   199,     0,   200,   201,   202,   203,
     204,   205,     0,     0,   206,   207,   208,   209,   210,     0,
       0,   211,   212,  1150,   214,   215,   216,   217,     0,   218,
     219,   220,     0,   221,   222,   223,     0,   224,   225,   226,
     227,  1151,   229,   230,   231,   232,   233,   815,  1152,   235,
       0,   236,   237,  1153,   239,     0,   240,     0,   241,   242,
       0,   243,   244,   245,   246,   247,   248,     0,   249,   250,
       0,     0,  1154,  1155,   253,   254,     0,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,     0,
     267,   268,   269,   270,   271,   272,   273,     0,   274,   275,
     276,   277,   278,   279,   280,   281,  1156,  1157,     0,  1158,
       0,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,     0,     0,   297,   298,   299,   300,     0,
     301,   302,   303,   304,   305,   306,   307,   308,  1159,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,   322,   323,   324,   325,   326,   327,   328,   329,  1160,
     331,  1161,   333,   334,   335,   336,   337,  1162,   338,   339,
     340,   341,  1163,   818,   343,  1164,   345,   346,   347,     0,
     348,   349,     0,     0,  1165,   351,   352,     0,     0,   353,
     354,   355,   356,   357,   358,   820,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,   371,   372,     0,
       0,     0,     0,   373,   374,   821,   376,   377,   378,   379,
     380,   381,   382,     0,   383,   384,   385,   386,   387,   388,
     389,   390,     0,   391,   392,   393,  1166,   395,   396,   397,
     398,     0,   399,   400,   401,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,     0,   413,   414,   415,
     416,   417,   418,  1167,   420,   421,   422,   423,   424,   425,
     426,   427,   428,   429,   430,   431,   432,     0,     0,   433,
     434,   435,   436,   437,   438,   439,   440,   441,   442,     0,
     443,   444,   445,  1168,   447,     0,   448,   449,   450,   451,
     452,   453,   454,   455,   456,   457,   458,   459,   460,   461,
     462,   823,     0,     0,   464,   465,     0,   466,   467,   468,
     469,   470,   471,   472,     0,   473,  1169,  1170,     0,   476,
       0,   477,   478,   824,   480,   825,  1171,   482,   483,   826,
     485,   486,   487,   488,   489,     0,     0,   490,   491,   492,
       0,   493,   494,   495,   496,     0,   497,   498,   499,   500,
     501,   502,  1172,     0,   504,   505,   506,   507,   508,   509,
     510,   511,   512,   513,   514,     0,     0,   515,     0,     0,
     516,   517,   518,   519,   520,   521,   522,   523,   524,   525,
     526,   527,   528,   529,   530,   531,   532,   533,   534,   535,
     536,  1173,     0,     0,     0,     0,     0,     0,  1174,  1175,
    1176,     0,     0,     0,     0,  1177,     0,  1178,     0,     0,
       0,     0,     0,  1179,  1180,     0,     0,     0,     0,  1181,
    1182,   119,  1804,   843,  1134,  1135,  1136,  1805,  1138,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     120,   121,   122,   123,   124,   125,   126,   127,   128,  1806,
     129,   130,   131,     0,     0,     0,     0,     0,   132,  1139,
       0,     0,   133,   134,   135,     0,   136,   137,   138,   139,
     140,   141,   142,   143,  1140,   145,  1141,  1142,     0,   148,
     149,   150,   151,   152,   153,  1143,   812,   154,   155,   156,
     157,  1144,  1145,   160,     0,   161,   162,   163,   164,   813,
       0,   814,     0,  1146,   168,   169,   170,   171,   172,   173,
     174,   175,   176,     0,   177,   178,   179,   180,   181,   182,
       0,   183,   184,   185,   186,   187,   188,   189,   190,   191,
     192,   193,  1147,   195,   196,  1148,   198,  1149,   199,     0,
     200,   201,   202,   203,   204,   205,     0,     0,   206,   207,
     208,   209,   210,     0,     0,   211,   212,  1150,   214,   215,
     216,   217,     0,   218,   219,   220,     0,   221,   222,   223,
       0,   224,   225,   226,   227,  1151,   229,   230,   231,   232,
     233,   815,  1152,   235,     0,   236,   237,  1153,   239,     0,
     240,     0,   241,   242,     0,   243,   244,   245,   246,   247,
     248,     0,   249,   250,     0,     0,  1154,  1155,   253,   254,
       0,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,     0,   267,   268,   269,   270,   271,   272,
     273,     0,   274,   275,   276,   277,   278,   279,   280,   281,
    1156,  1157,     0,  1158,     0,   285,   286,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,     0,     0,   297,
     298,   299,   300,     0,   301,   302,   303,   304,   305,   306,
     307,   308,  1159,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,   323,   324,   325,   326,
     327,   328,   329,  1160,   331,  1161,   333,   334,   335,   336,
     337,  1162,   338,   339,   340,   341,  1163,   818,   343,  1164,
     345,   346,   347,     0,   348,   349,     0,     0,  1165,   351,
     352,     0,     0,   353,   354,   355,   356,   357,   358,   820,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
     370,   371,   372,     0,     0,     0,     0,   373,   374,   821,
     376,   377,   378,   379,   380,   381,   382,     0,   383,   384,
     385,   386,   387,   388,   389,   390,     0,   391,   392,   393,
    1166,   395,   396,   397,   398,     0,   399,   400,   401,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
       0,   413,   414,   415,   416,   417,   418,  1167,   420,   421,
     422,   423,   424,   425,   426,   427,   428,   429,   430,   431,
     432,     0,     0,   433,   434,   435,   436,   437,   438,   439,
     440,   441,   442,     0,   443,   444,   445,  1168,   447,     0,
     448,   449,   450,   451,   452,   453,   454,   455,   456,   457,
     458,   459,   460,   461,   462,   823,     0,     0,   464,   465,
       0,   466,   467,   468,   469,   470,   471,   472,     0,   473,
    1169,  1170,     0,   476,     0,   477,   478,   824,   480,   825,
    1171,   482,   483,   826,   485,   486,   487,   488,   489,     0,
       0,   490,   491,   492,     0,   493,   494,   495,   496,     0,
     497,   498,   499,   500,   501,   502,  1172,     0,   504,   505,
     506,   507,   508,   509,   510,   511,   512,   513,   514,     0,
       0,   515,     0,     0,   516,   517,   518,   519,   520,   521,
     522,   523,   524,   525,   526,   527,   528,   529,   530,   531,
     532,   533,   534,   535,   536,  1173,     0,     0,     0,     0,
       0,     0,  1174,  1175,  1176,     0,     0,     0,     0,  1177,
       0,  1178,     0,     0,     0,     0,     0,  1179,  1180,     0,
       0,     0,     0,  1181,  1182,   119,  1133,   843,  1134,  1135,
    1136,  1137,  1138,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   120,   121,   122,   123,   124,   125,
     126,   127,   128,     0,   129,   130,   131,     0,     0,     0,
       0,     0,   132,  1139,     0,     0,   133,   134,   135,     0,
     136,   137,   138,   139,   140,   141,   142,   143,  1140,   145,
    1141,  1142,     0,   148,   149,   150,   151,   152,   153,  1143,
     812,   154,   155,   156,   157,  1144,  1145,   160,     0,   161,
     162,   163,   164,   813,     0,   814,     0,  1146,   168,   169,
     170,   171,   172,   173,   174,   175,   176,     0,   177,   178,
     179,   180,   181,   182,     0,   183,   184,   185,   186,   187,
     188,   189,   190,   191,   192,   193,  1147,   195,   196,  1148,
     198,  1149,   199,     0,   200,   201,   202,   203,   204,   205,
       0,     0,   206,   207,   208,   209,   210,     0,     0,   211,
     212,  1150,   214,   215,   216,   217,     0,   218,   219,   220,
       0,   221,   222,   223,     0,   224,   225,   226,   227,  1151,
     229,   230,   231,   232,   233,   815,  1152,   235,     0,   236,
     237,  1153,   239,     0,   240,     0,   241,   242,  1520,   243,
     244,   245,   246,   247,   248,     0,   249,   250,     0,     0,
    1154,  1155,   253,   254,     0,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,     0,   267,   268,
     269,   270,   271,   272,   273,     0,   274,   275,   276,   277,
     278,   279,   280,   281,  1156,  1157,     0,  1158,     0,   285,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,     0,     0,   297,   298,   299,   300,     0,   301,   302,
     303,   304,   305,   306,   307,   308,  1159,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
     323,   324,   325,   326,   327,   328,   329,  1160,   331,  1161,
     333,   334,   335,   336,   337,  1162,   338,   339,   340,   341,
    1163,   818,   343,  1164,   345,   346,   347,     0,   348,   349,
       0,     0,  1165,   351,   352,     0,     0,   353,   354,   355,
     356,   357,   358,   820,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,     0,     0,     0,
       0,   373,   374,   821,   376,   377,   378,   379,   380,   381,
     382,     0,   383,   384,   385,   386,   387,   388,   389,   390,
       0,   391,   392,   393,  1166,   395,   396,   397,   398,     0,
     399,   400,   401,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,     0,   413,   414,   415,   416,   417,
     418,  1167,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   429,   430,   431,   432,     0,     0,   433,   434,   435,
     436,   437,   438,   439,   440,   441,   442,     0,   443,   444,
     445,  1168,   447,     0,   448,   449,   450,   451,   452,   453,
     454,   455,   456,   457,   458,   459,   460,   461,   462,   823,
       0,     0,   464,   465,     0,   466,   467,   468,   469,   470,
     471,   472,     0,   473,  1169,  1170,     0,   476,     0,   477,
     478,   824,   480,   825,  1171,   482,   483,   826,   485,   486,
     487,   488,   489,     0,     0,   490,   491,   492,     0,   493,
     494,   495,   496,     0,   497,   498,   499,   500,   501,   502,
    1172,     0,   504,   505,   506,   507,   508,   509,   510,   511,
     512,   513,   514,     0,     0,   515,     0,     0,   516,   517,
     518,   519,   520,   521,   522,   523,   524,   525,   526,   527,
     528,   529,   530,   531,   532,   533,   534,   535,   536,  1173,
       0,     0,     0,     0,     0,     0,  1174,  1175,  1176,     0,
       0,     0,     0,  1177,     0,  1178,     0,     0,     0,     0,
       0,  1179,  1180,     0,     0,     0,     0,  1181,  1182,   119,
    1133,   843,  1134,  1135,  1136,  1137,  1138,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   120,   121,
     122,   123,   124,   125,   126,   127,   128,     0,   129,   130,
     131,     0,     0,     0,     0,     0,   132,  1139,     0,     0,
     133,   134,   135,     0,   136,   137,   138,   139,   140,   141,
     142,   143,  1140,   145,  1141,  1142,     0,   148,   149,   150,
     151,   152,   153,  1143,   812,   154,   155,   156,   157,  1144,
    1145,   160,     0,   161,   162,   163,   164,   813,     0,   814,
       0,  1146,   168,   169,   170,   171,   172,   173,   174,   175,
     176,     0,   177,   178,   179,   180,   181,   182,     0,   183,
     184,   185,   186,   187,   188,   189,   190,   191,   192,   193,
    1147,   195,   196,  1148,   198,  1149,   199,     0,   200,   201,
     202,   203,   204,   205,     0,     0,   206,   207,   208,   209,
     210,     0,     0,   211,   212,  1150,   214,   215,   216,   217,
       0,   218,   219,   220,     0,   221,   222,   223,     0,   224,
     225,   226,   227,  1151,   229,   230,   231,   232,   233,   815,
    1152,   235,     0,   236,   237,  1153,   239,     0,   240,     0,
     241,   242,     0,   243,   244,   245,   246,   247,   248,     0,
     249,   250,     0,     0,  1154,  1155,   253,   254,     0,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,     0,   267,   268,   269,   270,   271,   272,   273,     0,
     274,   275,   276,   277,   278,   279,   280,   281,  1156,  1157,
       0,  1158,     0,   285,   286,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,     0,     0,   297,   298,   299,
     300,     0,   301,   302,   303,   304,   305,   306,   307,   308,
    1159,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     329,  1160,   331,  1161,   333,   334,   335,   336,   337,  1162,
     338,   339,   340,   341,  1163,   818,   343,  1164,   345,   346,
     347,     0,   348,   349,     0,     0,  1165,   351,   352,     0,
       0,   353,   354,   355,   356,   357,   358,   820,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,     0,     0,     0,     0,   373,   374,   821,   376,   377,
     378,   379,   380,   381,   382,     0,   383,   384,   385,   386,
     387,   388,   389,   390,     0,   391,   392,   393,  1166,   395,
     396,   397,   398,     0,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,     0,   413,
     414,   415,   416,   417,   418,  1167,   420,   421,   422,   423,
     424,   425,   426,   427,   428,   429,   430,   431,   432,     0,
       0,   433,   434,   435,   436,   437,   438,   439,   440,   441,
     442,     0,   443,   444,   445,  1168,   447,     0,   448,   449,
     450,   451,   452,   453,   454,   455,   456,   457,   458,   459,
     460,   461,   462,   823,     0,     0,   464,   465,     0,   466,
     467,   468,   469,   470,   471,   472,     0,   473,  1169,  1170,
       0,   476,     0,   477,   478,   824,   480,   825,  1171,   482,
     483,   826,   485,   486,   487,   488,   489,     0,     0,   490,
     491,   492,     0,   493,   494,   495,   496,     0,   497,   498,
     499,   500,   501,   502,  1172,     0,   504,   505,   506,   507,
     508,   509,   510,   511,   512,   513,   514,     0,     0,   515,
       0,     0,   516,   517,   518,   519,   520,   521,   522,   523,
     524,   525,   526,   527,   528,   529,   530,   531,   532,   533,
     534,   535,   536,  1173,     0,     0,     0,     0,     0,     0,
    1174,  1175,  1176,     0,     0,     0,     0,  1177,     0,  1178,
    2154,     0,     0,     0,     0,  1179,  1180,     0,     0,     0,
       0,  1181,  1182,   119,  1133,   843,  1134,  1135,  1136,  1137,
    1138,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   120,   121,   122,   123,   124,   125,   126,   127,
     128,     0,   129,   130,   131,     0,     0,     0,     0,     0,
     132,  1139,     0,     0,   133,   134,   135,     0,   136,   137,
     138,   139,   140,   141,   142,   143,  1140,   145,  1141,  1142,
       0,   148,   149,   150,   151,   152,   153,  1143,   812,   154,
     155,   156,   157,  1144,  1145,   160,     0,   161,   162,   163,
     164,   813,     0,   814,     0,  1146,   168,   169,   170,   171,
     172,   173,   174,   175,   176,     0,   177,   178,   179,   180,
     181,   182,     0,   183,   184,   185,   186,   187,   188,   189,
     190,   191,   192,   193,  1147,   195,   196,  1148,   198,  1149,
     199,     0,   200,   201,   202,   203,   204,   205,     0,     0,
     206,   207,   208,   209,   210,     0,     0,   211,   212,  1150,
     214,   215,   216,   217,     0,   218,   219,   220,     0,   221,
     222,   223,     0,   224,   225,   226,   227,  1151,   229,   230,
     231,   232,   233,   815,  1152,   235,     0,   236,   237,  1153,
     239,     0,   240,     0,   241,   242,     0,   243,   244,   245,
     246,   247,   248,     0,   249,   250,     0,     0,  1154,  1155,
     253,   254,     0,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,     0,   267,   268,   269,   270,
     271,   272,   273,     0,   274,   275,   276,   277,   278,   279,
     280,   281,  1156,  1157,     0,  1158,     0,   285,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,     0,
       0,   297,   298,   299,   300,     0,   301,   302,   303,   304,
     305,   306,   307,   308,  1159,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,  1160,   331,  1161,   333,   334,
     335,   336,   337,  1162,   338,   339,   340,   341,  1163,   818,
     343,  1164,   345,   346,   347,     0,   348,   349,     0,     0,
    1165,   351,   352,     0,     0,   353,   354,   355,   356,   357,
     358,   820,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,   371,   372,     0,     0,     0,     0,   373,
     374,   821,   376,   377,   378,   379,   380,   381,   382,     0,
     383,   384,   385,   386,   387,   388,   389,   390,     0,   391,
     392,   393,  1166,   395,   396,   397,   398,     0,   399,   400,
     401,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,     0,   413,   414,   415,   416,   417,   418,  1167,
     420,   421,   422,   423,   424,   425,   426,   427,   428,   429,
     430,   431,   432,     0,     0,   433,   434,   435,   436,   437,
     438,   439,   440,   441,   442,     0,   443,   444,   445,  1168,
     447,     0,   448,   449,   450,   451,   452,   453,   454,   455,
     456,   457,   458,   459,   460,   461,   462,   823,     0,     0,
     464,   465,     0,   466,   467,   468,   469,   470,   471,   472,
       0,   473,  1169,  1170,     0,   476,     0,   477,   478,   824,
     480,   825,  1171,   482,   483,   826,   485,   486,   487,   488,
     489,     0,     0,   490,   491,   492,     0,   493,   494,   495,
     496,     0,   497,   498,   499,   500,   501,   502,  1172,     0,
     504,   505,   506,   507,   508,   509,   510,   511,   512,   513,
     514,     0,     0,   515,     0,     0,   516,   517,   518,   519,
     520,   521,   522,   523,   524,   525,   526,   527,   528,   529,
     530,   531,   532,   533,   534,   535,   536,  1173,     0,     0,
       0,     0,     0,     0,  1174,  1175,  1176,     0,     0,     0,
       0,  1177,     0,  1178,     0,     0,     0,     0,     0,  1179,
    1180,     0,     0,     0,  2766,  1181,  1182,   119,  1133,   843,
    1134,  1135,  1136,  1137,  1138,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   120,   121,   122,   123,
     124,   125,   126,   127,   128,     0,   129,   130,   131,     0,
       0,     0,     0,     0,   132,  1139,     0,     0,   133,   134,
     135,     0,   136,   137,   138,   139,   140,   141,   142,   143,
    1140,   145,  1141,  1142,     0,   148,   149,   150,   151,   152,
     153,  1143,   812,   154,   155,   156,   157,  1144,  1145,   160,
       0,   161,   162,   163,   164,   813,     0,   814,     0,  1146,
     168,   169,   170,   171,   172,   173,   174,   175,   176,     0,
     177,   178,   179,   180,   181,   182,     0,   183,   184,   185,
     186,   187,   188,   189,   190,   191,   192,   193,  1147,   195,
     196,  1148,   198,  1149,   199,     0,   200,   201,   202,   203,
     204,   205,     0,     0,   206,   207,   208,   209,   210,     0,
       0,   211,   212,  1150,   214,   215,   216,   217,     0,   218,
     219,   220,     0,   221,   222,   223,     0,   224,   225,   226,
     227,  1151,   229,   230,   231,   232,   233,   815,  1152,   235,
       0,   236,   237,  1153,   239,     0,   240,     0,   241,   242,
       0,   243,   244,   245,   246,   247,   248,     0,   249,   250,
       0,     0,  1154,  1155,   253,   254,     0,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,     0,
     267,   268,   269,   270,   271,   272,   273,     0,   274,   275,
     276,   277,   278,   279,   280,   281,  1156,  1157,     0,  1158,
       0,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,     0,     0,   297,   298,   299,   300,     0,
     301,   302,   303,   304,   305,   306,   307,   308,  1159,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,   322,   323,   324,   325,   326,   327,   328,   329,  1160,
     331,  1161,   333,   334,   335,   336,   337,  1162,   338,   339,
     340,   341,  1163,   818,   343,  1164,   345,   346,   347,     0,
     348,   349,     0,     0,  1165,   351,   352,     0,     0,   353,
     354,   355,   356,   357,   358,   820,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,   371,   372,     0,
       0,     0,     0,   373,   374,   821,   376,   377,   378,   379,
     380,   381,   382,     0,   383,   384,   385,   386,   387,   388,
     389,   390,     0,   391,   392,   393,  1166,   395,   396,   397,
     398,     0,   399,   400,   401,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,     0,   413,   414,   415,
     416,   417,   418,  1167,   420,   421,   422,   423,   424,   425,
     426,   427,   428,   429,   430,   431,   432,     0,     0,   433,
     434,   435,   436,   437,   438,   439,   440,   441,   442,     0,
     443,   444,   445,  1168,   447,     0,   448,   449,   450,   451,
     452,   453,   454,   455,   456,   457,   458,   459,   460,   461,
     462,   823,     0,     0,   464,   465,  2820,   466,   467,   468,
     469,   470,   471,   472,     0,   473,  1169,  1170,     0,   476,
       0,   477,   478,   824,   480,   825,  1171,   482,   483,   826,
     485,   486,   487,   488,   489,     0,     0,   490,   491,   492,
       0,   493,   494,   495,   496,     0,   497,   498,   499,   500,
     501,   502,  1172,     0,   504,   505,   506,   507,   508,   509,
     510,   511,   512,   513,   514,     0,     0,   515,     0,     0,
     516,   517,   518,   519,   520,   521,   522,   523,   524,   525,
     526,   527,   528,   529,   530,   531,   532,   533,   534,   535,
     536,  1173,     0,     0,     0,     0,     0,     0,  1174,  1175,
    1176,     0,     0,     0,     0,  1177,     0,  1178,     0,     0,
       0,     0,     0,  1179,  1180,     0,     0,     0,     0,  1181,
    1182,   119,  1133,   843,  1134,  1135,  1136,  1137,  1138,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     120,   121,   122,   123,   124,   125,   126,   127,   128,     0,
     129,   130,   131,     0,     0,     0,     0,     0,   132,  1139,
       0,     0,   133,   134,   135,     0,   136,   137,   138,   139,
     140,   141,   142,   143,  1140,   145,  1141,  1142,     0,   148,
     149,   150,   151,   152,   153,  1143,   812,   154,   155,   156,
     157,  1144,  1145,   160,     0,   161,   162,   163,   164,   813,
       0,   814,     0,  1146,   168,   169,   170,   171,   172,   173,
     174,   175,   176,     0,   177,   178,   179,   180,   181,   182,
       0,   183,   184,   185,   186,   187,   188,   189,   190,   191,
     192,   193,  1147,   195,   196,  1148,   198,  1149,   199,     0,
     200,   201,   202,   203,   204,   205,     0,     0,   206,   207,
     208,   209,   210,     0,     0,   211,   212,  1150,   214,   215,
     216,   217,     0,   218,   219,   220,     0,   221,   222,   223,
       0,   224,   225,   226,   227,  1151,   229,   230,   231,   232,
     233,   815,  1152,   235,     0,   236,   237,  1153,   239,     0,
     240,     0,   241,   242,     0,   243,   244,   245,   246,   247,
     248,     0,   249,   250,     0,     0,  1154,  1155,   253,   254,
       0,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,     0,   267,   268,   269,   270,   271,   272,
     273,     0,   274,   275,   276,   277,   278,   279,   280,   281,
    1156,  1157,     0,  1158,     0,   285,   286,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,     0,     0,   297,
     298,   299,   300,     0,   301,   302,   303,   304,   305,   306,
     307,   308,  1159,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,   323,   324,   325,   326,
     327,   328,   329,  1160,   331,  1161,   333,   334,   335,   336,
     337,  1162,   338,   339,   340,   341,  1163,   818,   343,  1164,
     345,   346,   347,     0,   348,   349,     0,     0,  1165,   351,
     352,     0,     0,   353,   354,   355,   356,   357,   358,   820,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
     370,   371,   372,     0,     0,     0,     0,   373,   374,   821,
     376,   377,   378,   379,   380,   381,   382,     0,   383,   384,
     385,   386,   387,   388,   389,   390,     0,   391,   392,   393,
    1166,   395,   396,   397,   398,     0,   399,   400,   401,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
       0,   413,   414,   415,   416,   417,   418,  1167,   420,   421,
     422,   423,   424,   425,   426,   427,   428,   429,   430,   431,
     432,     0,     0,   433,   434,   435,   436,   437,   438,   439,
     440,   441,   442,     0,   443,   444,   445,  1168,   447,     0,
     448,   449,   450,   451,   452,   453,   454,   455,   456,   457,
     458,   459,   460,   461,   462,   823,     0,     0,   464,   465,
       0,   466,   467,   468,   469,   470,   471,   472,     0,   473,
    1169,  1170,     0,   476,     0,   477,   478,   824,   480,   825,
    1171,   482,   483,   826,   485,   486,   487,   488,   489,     0,
       0,   490,   491,   492,     0,   493,   494,   495,   496,     0,
     497,   498,   499,   500,   501,   502,  1172,     0,   504,   505,
     506,   507,   508,   509,   510,   511,   512,   513,   514,     0,
    2941,   515,     0,     0,   516,   517,   518,   519,   520,   521,
     522,   523,   524,   525,   526,   527,   528,   529,   530,   531,
     532,   533,   534,   535,   536,  1173,     0,     0,     0,     0,
       0,     0,  1174,  1175,  1176,     0,     0,     0,     0,  1177,
       0,  1178,     0,     0,     0,     0,     0,  1179,  1180,     0,
       0,     0,     0,  1181,  1182,   119,  1133,   843,  1134,  1135,
    1136,  1137,  1138,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   120,   121,   122,   123,   124,   125,
     126,   127,   128,  3197,   129,   130,   131,     0,     0,     0,
       0,     0,   132,  1139,     0,     0,   133,   134,   135,     0,
     136,   137,   138,   139,   140,   141,   142,   143,  1140,   145,
    1141,  1142,     0,   148,   149,   150,   151,   152,   153,  1143,
     812,   154,   155,   156,   157,  1144,  1145,   160,     0,   161,
     162,   163,   164,   813,     0,   814,     0,  1146,   168,   169,
     170,   171,   172,   173,   174,   175,   176,     0,   177,   178,
     179,   180,   181,   182,     0,   183,   184,  3198,   186,   187,
     188,   189,   190,   191,   192,   193,  1147,   195,   196,  1148,
     198,  1149,   199,     0,   200,   201,   202,   203,   204,   205,
       0,     0,   206,   207,   208,   209,   210,     0,     0,   211,
     212,  1150,   214,   215,   216,   217,     0,   218,   219,   220,
       0,   221,   222,   223,     0,   224,   225,   226,   227,  1151,
     229,   230,   231,   232,   233,   815,  1152,   235,     0,   236,
     237,  1153,   239,     0,   240,     0,   241,   242,     0,   243,
     244,   245,   246,   247,   248,     0,   249,   250,     0,     0,
    3199,  1155,   253,   254,     0,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,     0,   267,   268,
     269,   270,   271,   272,   273,     0,   274,   275,   276,   277,
     278,   279,   280,   281,  1156,  1157,     0,  1158,     0,   285,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,     0,     0,   297,   298,   299,   300,     0,   301,   302,
     303,   304,   305,   306,   307,   308,  1159,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
     323,   324,   325,   326,   327,   328,   329,  1160,   331,  1161,
     333,   334,   335,   336,   337,  1162,   338,   339,   340,   341,
    1163,   818,   343,  1164,   345,   346,   347,     0,   348,   349,
       0,     0,  1165,   351,   352,     0,     0,   353,   354,   355,
     356,   357,   358,   820,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,     0,     0,     0,
       0,   373,   374,   821,   376,   377,   378,   379,   380,   381,
     382,     0,   383,   384,   385,   386,   387,   388,   389,   390,
       0,   391,   392,   393,  1166,   395,   396,   397,   398,     0,
     399,   400,   401,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,     0,   413,   414,   415,   416,   417,
    3200,  1167,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   429,   430,   431,   432,     0,     0,   433,   434,   435,
     436,   437,   438,   439,   440,   441,   442,     0,   443,   444,
     445,  1168,   447,     0,   448,   449,   450,   451,   452,   453,
     454,   455,   456,   457,   458,   459,   460,   461,   462,   823,
       0,     0,   464,   465,     0,   466,   467,   468,   469,   470,
     471,   472,     0,   473,  1169,  1170,     0,   476,     0,   477,
     478,   824,   480,   825,  1171,   482,   483,   826,   485,   486,
     487,   488,   489,     0,     0,   490,   491,   492,     0,   493,
     494,   495,   496,     0,   497,   498,   499,   500,   501,   502,
    1172,     0,   504,   505,   506,   507,   508,   509,   510,   511,
     512,   513,   514,     0,     0,   515,     0,     0,   516,   517,
     518,   519,   520,   521,   522,   523,   524,   525,   526,   527,
     528,   529,   530,   531,   532,   533,   534,   535,   536,  1173,
       0,     0,     0,     0,     0,     0,  1174,  1175,  1176,     0,
       0,     0,     0,  1177,     0,  3201,     0,     0,     0,     0,
       0,  1179,  1180,     0,     0,     0,     0,  1181,  1182,   119,
    1133,   843,  1134,  1135,  1136,  1137,  1138,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   120,   121,
     122,   123,   124,   125,   126,   127,   128,     0,   129,   130,
     131,     0,     0,     0,     0,     0,   132,  1139,     0,     0,
     133,   134,   135,     0,   136,   137,   138,   139,   140,   141,
     142,   143,  1140,   145,  1141,  1142,     0,   148,   149,   150,
     151,   152,   153,  1143,   812,   154,   155,   156,   157,  1144,
    1145,   160,     0,   161,   162,   163,   164,   813,     0,   814,
       0,  1146,   168,   169,   170,   171,   172,   173,   174,   175,
     176,     0,   177,   178,   179,   180,   181,   182,     0,   183,
     184,   185,   186,   187,   188,   189,   190,   191,   192,   193,
    1147,   195,   196,  1148,   198,  1149,   199,     0,   200,   201,
     202,   203,   204,   205,     0,     0,   206,   207,   208,   209,
     210,     0,     0,   211,   212,  1150,   214,   215,   216,   217,
       0,   218,   219,   220,     0,   221,   222,   223,     0,   224,
     225,   226,   227,  1151,   229,   230,   231,   232,   233,   815,
    1152,   235,     0,   236,   237,  1153,   239,     0,   240,     0,
     241,   242,     0,   243,   244,   245,   246,   247,   248,     0,
     249,   250,     0,     0,  1154,  1155,   253,   254,     0,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,     0,   267,   268,   269,   270,   271,   272,   273,     0,
     274,   275,   276,   277,   278,   279,   280,   281,  1156,  1157,
       0,  1158,     0,   285,   286,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,     0,     0,   297,   298,   299,
     300,     0,   301,   302,   303,   304,   305,   306,   307,   308,
    1159,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     329,  1160,   331,  1161,   333,   334,   335,   336,   337,  1162,
     338,   339,   340,   341,  1163,   818,   343,  1164,   345,   346,
     347,     0,   348,   349,     0,     0,  1165,   351,   352,     0,
       0,   353,   354,   355,   356,   357,   358,   820,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,     0,     0,     0,     0,   373,   374,   821,   376,   377,
     378,   379,   380,   381,   382,     0,   383,   384,   385,   386,
     387,   388,   389,   390,     0,   391,   392,   393,  1166,   395,
     396,   397,   398,     0,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,     0,   413,
     414,   415,   416,   417,   418,  1167,   420,   421,   422,   423,
     424,   425,   426,   427,   428,   429,   430,   431,   432,     0,
       0,   433,   434,   435,   436,   437,   438,   439,   440,   441,
     442,     0,   443,   444,   445,  1168,   447,     0,   448,   449,
     450,   451,   452,   453,   454,   455,   456,   457,   458,   459,
     460,   461,   462,   823,     0,     0,   464,   465,  3404,   466,
     467,   468,   469,   470,   471,   472,     0,   473,  1169,  1170,
       0,   476,     0,   477,   478,   824,   480,   825,  1171,   482,
     483,   826,   485,   486,   487,   488,   489,     0,     0,   490,
     491,   492,     0,   493,   494,   495,   496,     0,   497,   498,
     499,   500,   501,   502,  1172,     0,   504,   505,   506,   507,
     508,   509,   510,   511,   512,   513,   514,     0,     0,   515,
       0,     0,   516,   517,   518,   519,   520,   521,   522,   523,
     524,   525,   526,   527,   528,   529,   530,   531,   532,   533,
     534,   535,   536,  1173,     0,     0,     0,     0,     0,     0,
    1174,  1175,  1176,     0,     0,     0,     0,  1177,     0,  1178,
       0,     0,     0,     0,     0,  1179,  1180,     0,     0,     0,
       0,  1181,  1182,   119,  1133,   843,  1134,  1135,  1136,  1137,
    1138,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   120,   121,   122,   123,   124,   125,   126,   127,
     128,     0,   129,   130,   131,     0,     0,     0,     0,     0,
     132,  1139,     0,     0,   133,   134,   135,     0,   136,   137,
     138,   139,   140,   141,   142,   143,  1140,   145,  1141,  1142,
       0,   148,   149,   150,   151,   152,   153,  1143,   812,   154,
     155,   156,   157,  1144,  1145,   160,     0,   161,   162,   163,
     164,   813,     0,   814,     0,  1146,   168,   169,   170,   171,
     172,   173,   174,   175,   176,     0,   177,   178,   179,   180,
     181,   182,     0,   183,   184,   185,   186,   187,   188,   189,
     190,   191,   192,   193,  1147,   195,   196,  1148,   198,  1149,
     199,     0,   200,   201,   202,   203,   204,   205,     0,     0,
     206,   207,   208,   209,   210,     0,     0,   211,   212,  1150,
     214,   215,   216,   217,     0,   218,   219,   220,     0,   221,
     222,   223,     0,   224,   225,   226,   227,  1151,   229,   230,
     231,   232,   233,   815,  1152,   235,     0,   236,   237,  1153,
     239,     0,   240,     0,   241,   242,     0,   243,   244,   245,
     246,   247,   248,     0,   249,   250,     0,     0,  1154,  1155,
     253,   254,     0,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,     0,   267,   268,   269,   270,
     271,   272,   273,     0,   274,   275,   276,   277,   278,   279,
     280,   281,  1156,  1157,     0,  1158,     0,   285,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,     0,
       0,   297,   298,   299,   300,     0,   301,   302,   303,   304,
     305,   306,   307,   308,  1159,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,  1160,   331,  1161,   333,   334,
     335,   336,   337,  1162,   338,   339,   340,   341,  1163,   818,
     343,  1164,   345,   346,   347,     0,   348,   349,     0,     0,
    1165,   351,   352,     0,     0,   353,   354,   355,   356,   357,
     358,   820,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,   371,   372,     0,     0,     0,     0,   373,
     374,   821,   376,   377,   378,   379,   380,   381,   382,     0,
     383,   384,   385,   386,   387,   388,   389,   390,     0,   391,
     392,   393,  1166,   395,   396,   397,   398,     0,   399,   400,
     401,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,     0,   413,   414,   415,   416,   417,   418,  1167,
     420,   421,   422,   423,   424,   425,   426,   427,   428,   429,
     430,   431,   432,     0,     0,   433,   434,   435,   436,   437,
     438,   439,   440,   441,   442,     0,   443,   444,   445,  1168,
     447,     0,   448,   449,   450,   451,   452,   453,   454,   455,
     456,   457,   458,   459,   460,   461,   462,   823,     0,     0,
     464,   465,     0,   466,   467,   468,   469,   470,   471,   472,
       0,   473,  1169,  1170,     0,   476,     0,   477,   478,   824,
     480,   825,  1171,   482,   483,   826,   485,   486,   487,   488,
     489,     0,     0,   490,   491,   492,     0,   493,   494,   495,
     496,     0,   497,   498,   499,   500,   501,   502,  1172,     0,
     504,   505,   506,   507,   508,   509,   510,   511,   512,   513,
     514,     0,     0,   515,     0,     0,   516,   517,   518,   519,
     520,   521,   522,   523,   524,   525,   526,   527,   528,   529,
     530,   531,   532,   533,   534,   535,   536,  1173,     0,     0,
       0,     0,     0,     0,  1174,  1175,  1176,     0,     0,     0,
       0,  1177,     0,  1178,     0,     0,     0,     0,     0,  1179,
    1180,     0,     0,     0,  3475,  1181,  1182,   119,  1133,   843,
    1134,  1135,  1136,  1137,  1138,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   120,   121,   122,   123,
     124,   125,   126,   127,   128,     0,   129,   130,   131,     0,
       0,     0,     0,     0,   132,  1139,     0,     0,   133,   134,
     135,     0,   136,   137,   138,   139,   140,   141,   142,   143,
    1140,   145,  1141,  1142,     0,   148,   149,   150,   151,   152,
     153,  1143,   812,   154,   155,   156,   157,  1144,  1145,   160,
       0,   161,   162,   163,   164,   813,     0,   814,     0,  1146,
     168,   169,   170,   171,   172,   173,   174,   175,   176,     0,
     177,   178,   179,   180,   181,   182,     0,   183,   184,   185,
     186,   187,   188,   189,   190,   191,   192,   193,  1147,   195,
     196,  1148,   198,  1149,   199,     0,   200,   201,   202,   203,
     204,   205,     0,     0,   206,   207,   208,   209,   210,     0,
       0,   211,   212,  1150,   214,   215,   216,   217,     0,   218,
     219,   220,     0,   221,   222,   223,     0,   224,   225,   226,
     227,  1151,   229,   230,   231,   232,   233,   815,  1152,   235,
       0,   236,   237,  1153,   239,     0,   240,     0,   241,   242,
       0,   243,   244,   245,   246,   247,   248,     0,   249,   250,
       0,     0,  1154,  1155,   253,   254,     0,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,     0,
     267,   268,   269,   270,   271,   272,   273,     0,   274,   275,
     276,   277,   278,   279,   280,   281,  1156,  1157,     0,  1158,
       0,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,     0,     0,   297,   298,   299,   300,     0,
     301,   302,   303,   304,   305,   306,   307,   308,  1159,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,   322,   323,   324,   325,   326,   327,   328,   329,  1160,
     331,  1161,   333,   334,   335,   336,   337,  1162,   338,   339,
     340,   341,  1163,   818,   343,  1164,   345,   346,   347,     0,
     348,   349,     0,     0,  1165,   351,   352,     0,     0,   353,
     354,   355,   356,   357,   358,   820,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,   371,   372,     0,
       0,     0,     0,   373,   374,   821,   376,   377,   378,   379,
     380,   381,   382,     0,   383,   384,   385,   386,   387,   388,
     389,   390,     0,   391,   392,   393,  1166,   395,   396,   397,
     398,     0,   399,   400,   401,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,     0,   413,   414,   415,
     416,   417,   418,  1167,   420,   421,   422,   423,   424,   425,
     426,   427,   428,   429,   430,   431,   432,     0,     0,   433,
     434,   435,   436,   437,   438,   439,   440,   441,   442,     0,
     443,   444,   445,  1168,   447,     0,   448,   449,   450,   451,
     452,   453,   454,   455,   456,   457,   458,   459,   460,   461,
     462,   823,     0,     0,   464,   465,  3615,   466,   467,   468,
     469,   470,   471,   472,     0,   473,  1169,  1170,     0,   476,
       0,   477,   478,   824,   480,   825,  1171,   482,   483,   826,
     485,   486,   487,   488,   489,     0,     0,   490,   491,   492,
       0,   493,   494,   495,   496,     0,   497,   498,   499,   500,
     501,   502,  1172,     0,   504,   505,   506,   507,   508,   509,
     510,   511,   512,   513,   514,     0,     0,   515,     0,     0,
     516,   517,   518,   519,   520,   521,   522,   523,   524,   525,
     526,   527,   528,   529,   530,   531,   532,   533,   534,   535,
     536,  1173,     0,     0,     0,     0,     0,     0,  1174,  1175,
    1176,     0,     0,     0,     0,  1177,     0,  1178,     0,     0,
       0,     0,     0,  1179,  1180,     0,     0,     0,     0,  1181,
    1182,   119,  1133,   843,  1134,  1135,  1136,  1137,  1138,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     120,   121,   122,   123,   124,   125,   126,   127,   128,     0,
     129,   130,   131,     0,     0,     0,     0,     0,   132,  1139,
       0,     0,   133,   134,   135,     0,   136,   137,   138,   139,
     140,   141,   142,   143,  1140,   145,  1141,  1142,     0,   148,
     149,   150,   151,   152,   153,  1143,   812,   154,   155,   156,
     157,  1144,  1145,   160,     0,   161,   162,   163,   164,   813,
       0,   814,     0,  1146,   168,   169,   170,   171,   172,   173,
     174,   175,   176,     0,   177,   178,   179,   180,   181,   182,
       0,   183,   184,   185,   186,   187,   188,   189,   190,   191,
     192,   193,  1147,   195,   196,  1148,   198,  1149,   199,     0,
     200,   201,   202,   203,   204,   205,     0,     0,   206,   207,
     208,   209,   210,     0,     0,   211,   212,  1150,   214,   215,
     216,   217,     0,   218,   219,   220,     0,   221,   222,   223,
       0,   224,   225,   226,   227,  1151,   229,   230,   231,   232,
     233,   815,  1152,   235,     0,   236,   237,  1153,   239,     0,
     240,     0,   241,   242,     0,   243,   244,   245,   246,   247,
     248,     0,   249,   250,     0,     0,  1154,  1155,   253,   254,
       0,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,     0,   267,   268,   269,   270,   271,   272,
     273,     0,   274,   275,   276,   277,   278,   279,   280,   281,
    1156,  1157,     0,  1158,     0,   285,   286,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,     0,     0,   297,
     298,   299,   300,     0,   301,   302,   303,   304,   305,   306,
     307,   308,  1159,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,   323,   324,   325,   326,
     327,   328,   329,  1160,   331,  1161,   333,   334,   335,   336,
     337,  1162,   338,   339,   340,   341,  1163,   818,   343,  1164,
     345,   346,   347,     0,   348,   349,     0,     0,  1165,   351,
     352,     0,     0,   353,   354,   355,   356,   357,   358,   820,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
     370,   371,   372,     0,     0,     0,     0,   373,   374,   821,
     376,   377,   378,   379,   380,   381,   382,     0,   383,   384,
     385,   386,   387,   388,   389,   390,     0,   391,   392,   393,
    1166,   395,   396,   397,   398,     0,   399,   400,   401,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
       0,   413,   414,   415,   416,   417,   418,  1167,   420,   421,
     422,   423,   424,   425,   426,   427,   428,   429,   430,   431,
     432,     0,     0,   433,   434,   435,   436,   437,   438,   439,
     440,   441,   442,     0,   443,   444,   445,  1168,   447,     0,
     448,   449,   450,   451,   452,   453,   454,   455,   456,   457,
     458,   459,   460,   461,   462,   823,     0,     0,   464,   465,
       0,   466,   467,   468,   469,   470,   471,   472,     0,   473,
    1169,  1170,     0,   476,     0,   477,   478,   824,   480,   825,
    1171,   482,   483,   826,   485,   486,   487,   488,   489,     0,
       0,   490,   491,   492,     0,   493,   494,   495,   496,     0,
     497,   498,   499,   500,   501,   502,  1172,     0,   504,   505,
     506,   507,   508,   509,   510,   511,   512,   513,   514,     0,
       0,   515,     0,     0,   516,   517,   518,   519,   520,   521,
     522,   523,   524,   525,   526,   527,   528,   529,   530,   531,
     532,   533,   534,   535,   536,  1173,     0,     0,     0,     0,
       0,     0,  1174,  1175,  1176,     0,     0,     0,     0,  1177,
       0,  1178,     0,     0,     0,     0,     0,  1179,  1180,     0,
       0,     0,     0,  1181,  1182,   119,  1133,   843,  1134,  1135,
    1136,  1137,  1138,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   120,   121,   122,   123,   124,   125,
     126,   127,   128,     0,   129,   130,   131,     0,     0,     0,
       0,     0,   132,  1139,     0,     0,   133,   134,   135,     0,
     136,   137,   138,   139,   140,   141,   142,   143,  1140,   145,
    1141,  1142,     0,   148,   149,   150,   151,   152,   153,  1143,
     812,   154,   155,   156,   157,  1144,  1145,   160,     0,   161,
     162,   163,   164,   813,     0,   814,     0,  1146,   168,   169,
     170,   171,   172,   173,   174,   175,   176,     0,   177,   178,
     179,   180,   181,   182,     0,   183,   184,   185,   186,   187,
     188,   189,   190,   191,   192,   193,  1147,   195,   196,  1148,
     198,  1149,   199,     0,   200,   201,   202,   203,   204,   205,
       0,     0,   206,   207,   208,   209,   210,     0,     0,   211,
     212,  1150,   214,   215,   216,   217,     0,   218,   219,   220,
       0,   221,   222,   223,     0,   224,   225,   226,   227,  1151,
     229,   230,   231,   232,   233,   815,  1152,   235,     0,   236,
     237,  1153,   239,     0,   240,     0,   241,   242,     0,   243,
     244,   245,   246,   247,   248,     0,   249,   250,     0,     0,
    1154,  1155,   253,   254,     0,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,     0,   267,   268,
     269,   270,   271,   272,   273,     0,   274,   275,   276,   277,
     278,   279,   280,   281,  1156,  1157,     0,  1158,     0,   285,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,     0,     0,   297,   298,   299,   300,     0,   301,   302,
     303,   304,   305,   306,   307,   308,  1159,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
     323,   324,   325,   326,   327,   328,   329,  1160,   331,  1161,
     333,   334,   335,   336,   337,  1162,   338,   339,   340,   341,
    1163,   818,   343,  1164,   345,   346,   347,     0,   348,   349,
       0,     0,  1165,   351,   352,     0,     0,   353,   354,   355,
     356,   357,   358,   820,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,     0,     0,     0,
       0,   373,   374,   821,   376,   377,   378,   379,   380,   381,
     382,     0,   383,   384,   385,   386,   387,   388,   389,   390,
       0,   391,   392,   393,  1166,   395,   396,   397,   398,     0,
     399,   400,   401,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,     0,   413,   414,   415,   416,   417,
     418,  1167,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   429,   430,   431,   432,     0,     0,   433,   434,   435,
     436,   437,   438,   439,   440,   441,   442,     0,   443,   444,
     445,  1168,   447,     0,   448,   449,   450,   451,   452,   453,
     454,   455,   456,   457,   458,   459,   460,   461,   462,   823,
       0,     0,   464,   465,     0,   466,   467,   468,   469,   470,
     471,   472,     0,   473,  1169,  1170,     0,   476,     0,   477,
     478,   824,   480,   825,  1171,   482,   483,   826,   485,   486,
     487,   488,   489,     0,     0,   490,   491,   492,     0,   493,
     494,   495,   496,     0,   497,   498,   499,   500,   501,   502,
    1172,     0,   504,   505,   506,   507,   508,   509,   510,   511,
     512,   513,   514,     0,     0,   515,     0,     0,   516,   517,
     518,   519,   520,   521,   522,   523,   524,   525,   526,   527,
     528,   529,   530,   531,   532,   533,   534,   535,   536,  1173,
       0,     0,     0,     0,     0,     0,  1809,  1810,  1176,     0,
       0,     0,     0,  1177,     0,  1178,     0,     0,     0,     0,
       0,  1179,  1180,     0,     0,     0,     0,  1181,  1182,   119,
    2299,   843,  1134,  1135,  1136,  1137,  1138,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   120,   121,
     122,   123,   124,   125,   126,   127,   128,     0,   129,   130,
     131,     0,     0,     0,     0,     0,   132,  1139,     0,     0,
     133,   134,   135,     0,   136,   137,   138,   139,   140,   141,
     142,   143,  1140,   145,  1141,  1142,     0,   148,   149,   150,
     151,   152,   153,  1143,   812,   154,   155,   156,   157,  1144,
    1145,   160,     0,   161,   162,   163,   164,   813,     0,   814,
       0,  1146,   168,   169,   170,   171,   172,   173,   174,   175,
     176,     0,   177,   178,   179,   180,   181,   182,     0,   183,
     184,   185,   186,   187,   188,   189,   190,   191,   192,   193,
    1147,   195,   196,  1148,   198,  1149,   199,     0,   200,   201,
     202,   203,   204,   205,     0,     0,   206,   207,   208,   209,
     210,     0,     0,   211,   212,  1150,   214,   215,   216,   217,
       0,   218,   219,   220,     0,   221,   222,   223,     0,   224,
     225,   226,   227,  1151,   229,   230,   231,   232,   233,   815,
    1152,   235,     0,   236,   237,  1153,   239,     0,   240,     0,
     241,   242,     0,   243,   244,   245,   246,   247,   248,     0,
     249,   250,     0,     0,  1154,  1155,   253,   254,     0,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,     0,   267,   268,   269,   270,   271,   272,   273,     0,
     274,   275,   276,   277,   278,   279,   280,   281,  1156,  1157,
       0,  1158,     0,   285,   286,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,     0,     0,   297,   298,   299,
     300,     0,   301,   302,   303,   304,   305,   306,   307,   308,
    1159,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     329,  1160,   331,  1161,   333,   334,   335,   336,   337,  1162,
     338,   339,   340,   341,  1163,   818,   343,  1164,   345,   346,
     347,     0,   348,   349,     0,     0,  1165,   351,   352,     0,
       0,   353,   354,   355,   356,   357,   358,   820,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,     0,     0,     0,     0,   373,   374,   821,   376,   377,
     378,   379,   380,   381,   382,     0,   383,   384,   385,   386,
     387,   388,   389,   390,     0,   391,   392,   393,  1166,   395,
     396,   397,   398,     0,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,     0,   413,
     414,   415,   416,   417,   418,  1167,   420,   421,   422,   423,
     424,   425,   426,   427,   428,   429,   430,   431,   432,     0,
       0,   433,   434,   435,   436,   437,   438,   439,   440,   441,
     442,     0,   443,   444,   445,  1168,   447,     0,   448,   449,
     450,   451,   452,   453,   454,   455,   456,   457,   458,   459,
     460,   461,   462,   823,     0,     0,   464,   465,     0,   466,
     467,   468,   469,   470,   471,   472,     0,   473,  1169,  1170,
       0,   476,     0,   477,   478,   824,   480,   825,  1171,   482,
     483,   826,   485,   486,   487,   488,   489,     0,     0,   490,
     491,   492,     0,   493,   494,   495,   496,     0,   497,   498,
     499,   500,   501,   502,  1172,     0,   504,   505,   506,   507,
     508,   509,   510,   511,   512,   513,   514,     0,     0,   515,
       0,     0,   516,   517,   518,   519,   520,   521,   522,   523,
     524,   525,   526,   527,   528,   529,   530,   531,   532,   533,
     534,   535,   536,  1173,     0,     0,     0,     0,     0,     0,
    1174,  1175,  1176,     0,     0,     0,     0,  1177,     0,  1178,
       0,     0,     0,     0,     0,  1179,  1180,     0,     0,     0,
       0,  1181,  1182,   119,  1133,   843,  1134,  1135,  1136,  1137,
    1138,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   120,   121,   122,   123,   124,   125,   126,   127,
     128,     0,   129,   130,   131,     0,     0,     0,     0,     0,
     132,  1139,     0,     0,   133,   134,   135,     0,   136,   137,
     138,   139,   140,   141,   142,   143,  1140,   145,  1141,  1142,
       0,   148,   149,   150,   151,   152,   153,  1143,   812,   154,
     155,   156,   157,  1144,  1145,   160,     0,   161,   162,   163,
     164,   813,     0,   814,     0,  1146,   168,   169,   170,   171,
     172,   173,   174,   175,   176,     0,   177,   178,   179,   180,
     181,   182,     0,   183,   184,   185,   186,   187,   188,   189,
     190,   191,   192,   193,  1147,   195,   196,  1148,   198,  1149,
     199,     0,   200,   201,   202,   203,   204,   205,     0,     0,
     206,   207,   208,   209,   210,     0,     0,   211,   212,  1150,
     214,   215,   216,   217,     0,   218,   219,   220,     0,   221,
     222,   223,     0,   224,   225,   226,   227,  1151,   229,   230,
     231,   232,   233,   815,  1152,   235,     0,   236,   237,  1153,
     239,     0,   240,     0,   241,   242,     0,   243,   244,   245,
     246,   247,   248,     0,   249,   250,     0,     0,  1154,  1155,
     253,   254,     0,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,     0,   267,   268,   269,   270,
     271,   272,   273,     0,   274,   275,   276,   277,   278,   279,
     280,   281,  1156,  1157,     0,  1158,     0,   285,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,     0,
       0,   297,   298,   299,   300,     0,   301,   302,   303,   304,
     305,   306,   307,   308,  1159,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,  1160,   331,  1161,   333,   334,
     335,   336,   337,  1162,   338,   339,   340,   341,  1163,   818,
     343,  1164,   345,   346,   347,     0,   348,   349,     0,     0,
    1165,   351,   352,     0,     0,   353,   354,   355,   356,   357,
     358,   820,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,   371,   372,     0,     0,     0,     0,   373,
     374,   821,   376,   377,   378,   379,   380,   381,   382,     0,
     383,   384,   385,   386,   387,   388,   389,   390,     0,   391,
     392,   393,  1166,   395,   396,   397,   398,     0,   399,   400,
     401,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,     0,   413,   414,   415,   416,   417,   418,  1167,
     420,   421,   422,   423,   424,   425,   426,   427,   428,   429,
     430,   431,   432,     0,     0,   433,   434,   435,   436,   437,
     438,   439,   440,   441,   442,     0,   443,   444,   445,  1168,
     447,     0,   448,   449,   450,   451,   452,   453,   454,   455,
     456,   457,   458,   459,   460,   461,   462,   823,     0,     0,
     464,   465,     0,   466,   467,   468,   469,   470,   471,   472,
       0,   473,  1169,  1170,     0,   476,     0,   477,   478,   824,
     480,   825,  1171,   482,   483,   826,   485,   486,   487,   488,
     489,     0,     0,   490,   491,   492,     0,   493,   494,   495,
     496,     0,   497,   498,   499,   500,   501,   502,  1172,     0,
     504,   505,   506,   507,   508,   509,   510,   511,   512,   513,
     514,     0,     0,   515,     0,     0,   516,   517,   518,   519,
     520,   521,   522,   523,   524,   525,   526,   527,   528,   529,
     530,   531,   532,   533,   534,   535,   536,  1173,     0,     0,
       0,     0,     0,     0,  1174,  2382,  1176,     0,     0,     0,
       0,  1177,     0,  1178,     0,     0,     0,     0,     0,  1179,
    1180,     0,     0,     0,     0,  1181,  1182,   119,  1133,   843,
    1134,  1135,  1136,  1137,  1138,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   120,   121,   122,   123,
     124,   125,   126,   127,   128,     0,   129,   130,   131,     0,
       0,     0,     0,     0,   132,  1139,     0,     0,   133,   134,
     135,     0,   136,   137,   138,   139,   140,   141,   142,   143,
    1140,   145,  1141,  1142,     0,   148,   149,   150,   151,   152,
     153,  1143,   812,   154,   155,   156,   157,  1144,  1145,   160,
       0,   161,   162,   163,   164,   813,     0,   814,     0,  1146,
     168,   169,   170,   171,   172,   173,   174,   175,   176,     0,
     177,   178,   179,   180,   181,   182,     0,   183,   184,   185,
     186,   187,   188,   189,   190,   191,   192,   193,  1147,   195,
     196,  1148,   198,  1149,   199,     0,   200,   201,   202,   203,
     204,   205,     0,     0,   206,   207,   208,   209,   210,     0,
       0,   211,   212,  1150,   214,   215,   216,   217,     0,   218,
     219,   220,     0,   221,   222,   223,     0,   224,   225,   226,
     227,  1151,   229,   230,   231,   232,   233,   815,  1152,   235,
       0,   236,   237,  1153,   239,     0,   240,     0,   241,   242,
       0,   243,   244,   245,   246,   247,   248,     0,   249,   250,
       0,     0,  1154,  1155,   253,   254,     0,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,     0,
     267,   268,   269,   270,   271,   272,   273,     0,   274,   275,
     276,   277,   278,   279,   280,   281,  1156,  1157,     0,  1158,
       0,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,     0,     0,   297,   298,   299,   300,     0,
     301,   302,   303,   304,   305,   306,   307,   308,  1159,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,   322,   323,   324,   325,   326,   327,   328,   329,  1160,
     331,  1161,   333,   334,   335,   336,   337,  1162,   338,   339,
     340,   341,  1163,   818,   343,  1164,   345,   346,   347,     0,
     348,   349,     0,     0,  1165,   351,   352,     0,     0,   353,
     354,   355,   356,   357,   358,   820,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,   371,   372,     0,
       0,     0,     0,   373,   374,   821,   376,   377,   378,   379,
     380,   381,   382,     0,   383,   384,   385,   386,   387,   388,
     389,   390,     0,   391,   392,   393,  1166,   395,   396,   397,
     398,     0,   399,   400,   401,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,     0,   413,   414,   415,
     416,   417,   418,  1167,   420,   421,   422,   423,   424,   425,
     426,   427,   428,   429,   430,   431,   432,     0,     0,   433,
     434,   435,   436,   437,   438,   439,   440,   441,   442,     0,
     443,   444,   445,  1168,   447,     0,   448,   449,   450,   451,
     452,   453,   454,   455,   456,   457,   458,   459,   460,   461,
     462,   823,     0,     0,   464,   465,     0,   466,   467,   468,
     469,   470,   471,   472,     0,   473,  1169,  1170,     0,   476,
       0,   477,   478,   824,   480,   825,  1171,   482,   483,   826,
     485,   486,   487,   488,   489,     0,     0,   490,   491,   492,
       0,   493,   494,   495,   496,     0,   497,   498,   499,   500,
     501,   502,  1172,     0,   504,   505,   506,   507,   508,   509,
     510,   511,   512,   513,   514,     0,     0,   515,     0,     0,
     516,   517,   518,   519,   520,   521,   522,   523,   524,   525,
     526,   527,   528,   529,   530,   531,   532,   533,   534,   535,
     536,  1173,     0,     0,     0,     0,     0,     0,  1174,  1175,
    1176,     0,     0,     0,     0,  1177,     0,  2594,     0,     0,
       0,     0,     0,  1179,  1180,     0,     0,     0,     0,  1181,
    1182,   119,  1133,   843,  1134,  1135,  1136,  1137,  1138,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     120,   121,   122,   123,   124,   125,   126,   127,   128,     0,
     129,   130,   131,     0,     0,     0,     0,     0,   132,  1139,
       0,     0,   133,   134,   135,     0,   136,   137,   138,   139,
     140,   141,   142,   143,  1140,   145,  1141,  1142,     0,   148,
     149,   150,   151,   152,   153,  1143,   812,   154,   155,   156,
     157,  1144,  1145,   160,     0,   161,   162,   163,   164,   813,
       0,   814,     0,  1146,   168,   169,   170,   171,   172,   173,
     174,   175,   176,     0,   177,   178,   179,   180,   181,   182,
       0,   183,   184,   185,   186,   187,   188,   189,   190,   191,
     192,   193,  1147,   195,   196,  1148,   198,  1149,   199,     0,
     200,   201,   202,   203,   204,   205,     0,     0,   206,   207,
     208,   209,   210,     0,     0,   211,   212,  1150,   214,   215,
     216,   217,     0,   218,   219,   220,     0,   221,   222,   223,
       0,   224,   225,   226,   227,  1151,   229,   230,   231,   232,
     233,   815,  1152,   235,     0,   236,   237,  1153,   239,     0,
     240,     0,   241,   242,     0,   243,   244,   245,   246,   247,
     248,     0,   249,   250,     0,     0,  1154,  1155,   253,   254,
       0,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,     0,   267,   268,   269,   270,   271,   272,
     273,     0,   274,   275,   276,   277,   278,   279,   280,   281,
    1156,  1157,     0,  1158,     0,   285,   286,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,     0,     0,   297,
     298,   299,   300,     0,   301,   302,   303,   304,   305,   306,
     307,   308,  1159,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,   323,   324,   325,   326,
     327,   328,   329,  1160,   331,  1161,   333,   334,   335,   336,
     337,  1162,   338,   339,   340,   341,  1163,   818,   343,  1164,
     345,   346,   347,     0,   348,   349,     0,     0,  1165,   351,
     352,     0,     0,   353,   354,   355,   356,   357,   358,   820,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
     370,   371,   372,     0,     0,     0,     0,   373,   374,   821,
     376,   377,   378,   379,   380,   381,   382,     0,   383,   384,
     385,   386,   387,   388,   389,   390,     0,   391,   392,   393,
    1166,   395,   396,   397,   398,     0,   399,   400,   401,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
       0,   413,   414,   415,   416,   417,   418,  1167,   420,   421,
     422,   423,   424,   425,   426,   427,   428,   429,   430,   431,
     432,     0,     0,   433,   434,   435,   436,   437,   438,   439,
     440,   441,   442,     0,   443,   444,   445,  1168,   447,     0,
     448,   449,   450,   451,   452,   453,   454,   455,   456,   457,
     458,   459,   460,   461,   462,   823,     0,     0,   464,   465,
       0,   466,   467,   468,   469,   470,   471,   472,     0,   473,
    1169,  1170,     0,   476,     0,   477,   478,   824,   480,   825,
    1171,   482,   483,   826,   485,   486,   487,   488,   489,     0,
       0,   490,   491,   492,     0,   493,   494,   495,   496,     0,
     497,   498,   499,   500,   501,   502,  1172,     0,   504,   505,
     506,   507,   508,   509,   510,   511,   512,   513,   514,     0,
       0,   515,     0,     0,   516,   517,   518,   519,   520,   521,
     522,   523,   524,   525,   526,   527,   528,   529,   530,   531,
     532,   533,   534,   535,   536,  1173,     0,     0,     0,     0,
       0,     0,  1174,  3251,  1176,     0,     0,     0,     0,  1177,
       0,  1178,     0,     0,     0,     0,     0,  1179,  1180,     0,
       0,     0,     0,  1181,  1182,   119,  1133,   843,  1134,  1135,
    1136,  1137,  1138,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   120,   121,   122,   123,   124,   125,
     126,   127,   128,     0,   129,   130,   131,     0,     0,     0,
       0,     0,   132,  1139,     0,     0,   133,   134,   135,     0,
     136,   137,   138,   139,   140,   141,   142,   143,  1140,   145,
    1141,  1142,     0,   148,   149,   150,   151,   152,   153,  1143,
     812,   154,   155,   156,   157,  1144,  1145,   160,     0,   161,
     162,   163,   164,   813,     0,   814,     0,  1146,   168,   169,
     170,   171,   172,   173,   174,   175,   176,     0,   177,   178,
     179,   180,   181,   182,     0,   183,   184,  3198,   186,   187,
     188,   189,   190,   191,   192,   193,  1147,   195,   196,  1148,
     198,  1149,   199,     0,   200,   201,   202,   203,   204,   205,
       0,     0,   206,   207,   208,   209,   210,     0,     0,   211,
     212,  1150,   214,   215,   216,   217,     0,   218,   219,   220,
       0,   221,   222,   223,     0,   224,   225,   226,   227,  1151,
     229,   230,   231,   232,   233,   815,  1152,   235,     0,   236,
     237,  1153,   239,     0,   240,     0,   241,   242,     0,   243,
     244,   245,   246,   247,   248,     0,   249,   250,     0,     0,
    3199,  1155,   253,   254,     0,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,     0,   267,   268,
     269,   270,   271,   272,   273,     0,   274,   275,   276,   277,
     278,   279,   280,   281,  1156,  1157,     0,  1158,     0,   285,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,     0,     0,   297,   298,   299,   300,     0,   301,   302,
     303,   304,   305,   306,   307,   308,  1159,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
     323,   324,   325,   326,   327,   328,   329,  1160,   331,  1161,
     333,   334,   335,   336,   337,  1162,   338,   339,   340,   341,
    1163,   818,   343,  1164,   345,   346,   347,     0,   348,   349,
       0,     0,  1165,   351,   352,     0,     0,   353,   354,   355,
     356,   357,   358,   820,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,     0,     0,     0,
       0,   373,   374,   821,   376,   377,   378,   379,   380,   381,
     382,     0,   383,   384,   385,   386,   387,   388,   389,   390,
       0,   391,   392,   393,  1166,   395,   396,   397,   398,     0,
     399,   400,   401,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,     0,   413,   414,   415,   416,   417,
    3200,  1167,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   429,   430,   431,   432,     0,     0,   433,   434,   435,
     436,   437,   438,   439,   440,   441,   442,     0,   443,   444,
     445,  1168,   447,     0,   448,   449,   450,   451,   452,   453,
     454,   455,   456,   457,   458,   459,   460,   461,   462,   823,
       0,     0,   464,   465,     0,   466,   467,   468,   469,   470,
     471,   472,     0,   473,  1169,  1170,     0,   476,     0,   477,
     478,   824,   480,   825,  1171,   482,   483,   826,   485,   486,
     487,   488,   489,     0,     0,   490,   491,   492,     0,   493,
     494,   495,   496,     0,   497,   498,   499,   500,   501,   502,
    1172,     0,   504,   505,   506,   507,   508,   509,   510,   511,
     512,   513,   514,     0,     0,   515,     0,     0,   516,   517,
     518,   519,   520,   521,   522,   523,   524,   525,   526,   527,
     528,   529,   530,   531,   532,   533,   534,   535,   536,  1173,
       0,     0,     0,     0,     0,     0,  1174,  1175,  1176,     0,
       0,     0,     0,  1177,     0,  3201,     0,     0,     0,     0,
       0,  1179,  1180,     0,     0,     0,     0,  1181,  1182,   119,
    1133,   843,  1134,  1135,  1136,  1137,  1138,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   120,   121,
     122,   123,   124,   125,   126,   127,   128,     0,   129,   130,
     131,     0,     0,     0,     0,     0,   132,  1139,     0,     0,
     133,   134,   135,     0,   136,   137,   138,   139,   140,   141,
     142,  3882,  1140,   145,  1141,  1142,     0,   148,   149,   150,
     151,   152,   153,  1143,   812,   154,   155,   156,   157,  1144,
    1145,   160,     0,   161,   162,   163,   164,   813,     0,   814,
       0,  1146,   168,   169,   170,   171,   172,   173,   174,   175,
     176,     0,   177,   178,   179,   180,   181,   182,     0,   183,
     184,   185,  3883,   187,   188,   189,   190,   191,   192,   193,
    1147,   195,   196,  1148,   198,  1149,   199,     0,   200,   201,
     202,   203,   204,   205,     0,     0,   206,   207,   208,   209,
     210,     0,     0,   211,   212,  1150,   214,   215,   216,   217,
       0,   218,   219,   220,     0,   221,   222,   223,     0,   224,
     225,   226,   227,  1151,   229,   230,   231,   232,   233,   815,
    1152,   235,     0,   236,   237,  1153,   239,     0,   240,     0,
     241,   242,     0,   243,   244,   245,   246,   247,   248,     0,
     249,   250,     0,     0,  1154,  1155,   253,   254,     0,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,     0,   267,   268,   269,   270,   271,   272,   273,     0,
     274,   275,   276,   277,   278,   279,   280,   281,  1156,  1157,
       0,  1158,     0,   285,   286,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,     0,     0,   297,   298,   299,
     300,     0,   301,   302,   303,   304,   305,   306,   307,   308,
    1159,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     329,  1160,   331,  1161,   333,   334,   335,   336,   337,  1162,
     338,   339,   340,   341,  1163,   818,   343,  1164,   345,   346,
     347,     0,   348,   349,     0,     0,  1165,   351,   352,     0,
       0,   353,   354,   355,   356,   357,   358,   820,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,     0,     0,     0,     0,   373,   374,   821,   376,   377,
     378,   379,   380,   381,   382,     0,   383,   384,   385,   386,
     387,   388,   389,   390,     0,   391,   392,   393,  1166,   395,
     396,   397,   398,     0,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,     0,   413,
     414,   415,   416,   417,   418,  1167,   420,   421,   422,   423,
     424,   425,   426,   427,   428,   429,   430,   431,   432,     0,
       0,   433,   434,   435,   436,   437,   438,   439,   440,   441,
     442,     0,   443,   444,   445,  1168,   447,     0,   448,   449,
     450,   451,   452,   453,   454,   455,   456,   457,   458,   459,
     460,   461,   462,   823,     0,     0,   464,   465,     0,   466,
     467,   468,   469,   470,   471,   472,     0,   473,  1169,  1170,
       0,   476,     0,   477,   478,   824,   480,   825,  1171,   482,
     483,   826,   485,   486,  3884,   488,   489,     0,     0,   490,
     491,   492,     0,   493,   494,   495,   496,     0,   497,   498,
     499,   500,   501,   502,  1172,     0,   504,   505,   506,   507,
     508,   509,   510,   511,   512,   513,   514,     0,     0,   515,
       0,     0,   516,   517,   518,   519,   520,   521,   522,   523,
     524,   525,   526,   527,   528,   529,   530,   531,   532,   533,
     534,   535,   536,  1173,     0,     0,     0,     0,     0,     0,
    1174,  1175,  1176,     0,     0,     0,     0,  1177,     0,  1178,
       0,     0,     0,     0,     0,  1179,  1180,     0,     0,     0,
       0,  1181,  1182,   119,  1133,   843,  1134,  1135,  1136,  1137,
    1138,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   120,   121,   122,   123,   124,   125,   126,   127,
     128,     0,   129,   130,   131,     0,     0,     0,     0,     0,
     132,  1139,     0,     0,   133,   134,   135,     0,   136,   137,
     138,   139,   140,   141,   142,   143,  1140,   145,  1141,  1142,
       0,   148,   149,   150,   151,   152,   153,  1143,   812,   154,
     155,   156,   157,  1144,  1145,   160,     0,   161,   162,   163,
     164,   813,     0,   814,     0,  1146,   168,   169,   170,   171,
     172,   173,   174,   175,   176,     0,   177,   178,   179,   180,
     181,   182,     0,   183,   184,   185,  3883,   187,   188,   189,
     190,   191,   192,   193,  1147,   195,   196,  1148,   198,  1149,
     199,     0,   200,   201,   202,   203,   204,   205,     0,     0,
     206,   207,   208,   209,   210,     0,     0,   211,   212,  1150,
     214,   215,   216,   217,     0,   218,   219,   220,     0,   221,
     222,   223,     0,   224,   225,   226,   227,  1151,   229,   230,
     231,   232,   233,   815,  1152,   235,     0,   236,   237,  1153,
     239,     0,   240,     0,   241,   242,     0,   243,   244,   245,
     246,   247,   248,     0,   249,   250,     0,     0,  1154,  1155,
     253,   254,     0,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,     0,   267,   268,   269,   270,
     271,   272,   273,     0,   274,   275,   276,   277,   278,   279,
     280,   281,  1156,  1157,     0,  1158,     0,   285,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,     0,
       0,   297,   298,   299,   300,     0,   301,   302,   303,   304,
     305,   306,   307,   308,  1159,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,  1160,   331,  1161,   333,   334,
     335,   336,   337,  1162,   338,   339,   340,   341,  1163,   818,
     343,  1164,   345,   346,   347,     0,   348,   349,     0,     0,
    1165,   351,   352,     0,     0,   353,   354,   355,   356,   357,
     358,   820,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,   371,   372,     0,     0,     0,     0,   373,
     374,   821,   376,   377,   378,   379,   380,   381,   382,     0,
     383,   384,   385,   386,   387,   388,   389,   390,     0,   391,
     392,   393,  1166,   395,   396,   397,   398,     0,   399,   400,
     401,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,     0,   413,   414,   415,   416,   417,   418,  1167,
     420,   421,   422,   423,   424,   425,   426,   427,   428,   429,
     430,   431,   432,     0,     0,   433,   434,   435,   436,   437,
     438,   439,   440,   441,   442,     0,   443,   444,   445,  1168,
     447,     0,   448,   449,   450,   451,   452,   453,   454,   455,
     456,   457,   458,   459,   460,   461,   462,   823,     0,     0,
     464,   465,     0,   466,   467,   468,   469,   470,   471,   472,
       0,   473,  1169,  1170,     0,   476,     0,   477,   478,   824,
     480,   825,  1171,   482,   483,   826,   485,   486,  3884,   488,
     489,     0,     0,   490,   491,   492,     0,   493,   494,   495,
     496,     0,   497,   498,   499,   500,   501,   502,  1172,     0,
     504,   505,   506,   507,   508,   509,   510,   511,   512,   513,
     514,     0,     0,   515,     0,     0,   516,   517,   518,   519,
     520,   521,   522,   523,   524,   525,   526,   527,   528,   529,
     530,   531,   532,   533,   534,   535,   536,  1173,     0,     0,
       0,     0,     0,     0,  1174,  1175,  1176,     0,     0,     0,
       0,  1177,     0,  1178,     0,     0,     0,     0,     0,  1179,
    1180,     0,     0,     0,     0,  1181,  1182,   119,  1133,   843,
    1134,  1135,     0,  1137,  1138,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   120,   121,   122,   123,
     124,   125,   126,   127,   128,     0,   129,   130,   131,     0,
       0,     0,     0,     0,   132,  1139,     0,     0,   133,   134,
     135,     0,   136,   137,   138,   139,   140,   141,   142,   143,
    1140,   145,  1141,  1142,     0,   148,   149,   150,   151,   152,
     153,  1143,   812,   154,   155,   156,   157,  1144,  1145,   160,
       0,   161,   162,   163,   164,   813,     0,   814,     0,   167,
     168,   169,   170,   171,   172,   173,   174,   175,   176,     0,
     177,   178,   179,   180,   181,   182,     0,   183,   184,   185,
     186,   187,   188,   189,   190,   191,   192,   193,  1147,   195,
     196,  1148,   198,     0,   199,     0,   200,   201,   202,   203,
     204,   205,     0,     0,   206,   207,   208,   209,   210,     0,
       0,   211,   212,  1150,   214,   215,   216,   217,     0,   218,
     219,   220,     0,   221,   222,   223,     0,   224,   225,   226,
     227,  1151,   229,   230,   231,   232,   233,   815,  1152,   235,
       0,   236,   237,  1153,   239,     0,   240,     0,   241,   242,
       0,   243,   244,   245,   246,   247,   248,     0,   249,   250,
       0,     0,  1154,  1155,   253,   254,     0,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,     0,
     267,   268,   269,   270,   271,   272,   273,     0,   274,   275,
     276,   277,   278,   279,   280,   281,  1156,  1157,     0,  1158,
       0,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,     0,     0,   297,   298,   299,   300,     0,
     301,   302,   303,   304,   305,   306,   307,   308,  1159,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,   322,   323,   324,   325,   326,   327,   328,   329,  1160,
     331,  1161,   333,   334,   335,   336,   337,  2978,   338,   339,
     340,   341,  1163,   818,   343,  1164,   345,   346,   347,     0,
     348,   349,     0,     0,   350,   351,   352,     0,     0,   353,
     354,   355,   356,   357,   358,   820,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,   371,   372,     0,
       0,     0,     0,   373,   374,   821,   376,   377,   378,   379,
     380,   381,   382,     0,   383,   384,   385,   386,   387,   388,
     389,   390,     0,   391,   392,   393,  1166,   395,   396,   397,
     398,     0,   399,   400,   401,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,     0,   413,   414,   415,
     416,   417,   418,  1167,   420,   421,   422,   423,   424,   425,
     426,   427,   428,   429,   430,   431,   432,     0,     0,   433,
     434,   435,   436,   437,   438,   439,   440,   441,   442,     0,
     443,   444,   445,  1168,   447,     0,   448,   449,   450,   451,
     452,   453,   454,   455,   456,   457,   458,   459,   460,   461,
     462,   823,     0,     0,   464,   465,     0,   466,   467,   468,
     469,   470,   471,   472,     0,   473,  1169,  1170,     0,   476,
       0,   477,   478,   824,   480,   825,  1171,   482,   483,   826,
     485,   486,   487,   488,   489,     0,     0,   490,   491,   492,
       0,   493,   494,   495,   496,     0,   497,   498,   499,   500,
     501,   502,  1172,     0,   504,   505,   506,   507,   508,   509,
     510,   511,   512,   513,   514,     0,     0,   515,     0,     0,
     516,   517,   518,   519,   520,   521,   522,   523,   524,   525,
     526,   527,   528,   529,   530,   531,   532,   533,   534,   535,
     536,  2979,     0,     0,     0,     0,     0,     0,  2980,  2981,
       0,     0,     0,     0,     0,  1177,     0,  1178,     0,     0,
       0,     0,     0,  1179,  1180,     0,     0,     0,     0,  1181,
    1182,   119,  1133,   843,  1134,  1135,  1136,  1137,  1138,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     120,   121,   122,   123,   124,   125,   126,   127,   128,     0,
     129,   130,   131,     0,     0,     0,     0,     0,   132,  1139,
       0,     0,   133,   134,   135,     0,   136,   137,   138,   139,
     140,   141,   142,   143,  1140,   145,  1141,  1142,     0,   148,
     149,   150,   151,   152,   153,  1143,   812,   154,   155,   156,
     157,  1144,  1145,   160,     0,   161,   162,   163,   164,   813,
       0,   814,     0,   167,   168,   169,   170,   171,   172,   173,
     174,   175,   176,     0,   177,   178,   179,   180,   181,   182,
       0,   183,   184,   185,   186,   187,   188,   189,   190,   191,
     192,   193,  1147,   195,   196,  1148,   198,     0,   199,     0,
     200,   201,   202,   203,   204,   205,     0,     0,   206,   207,
     208,   209,   210,     0,     0,   211,   212,  1150,   214,   215,
     216,   217,     0,   218,   219,   220,     0,   221,   222,   223,
       0,   224,   225,   226,   227,  1151,   229,   230,   231,   232,
     233,   815,  1152,   235,     0,   236,   237,  1153,   239,     0,
     240,     0,   241,   242,     0,   243,   244,   245,   246,   247,
     248,     0,   249,   250,     0,     0,  1154,  1155,   253,   254,
       0,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,     0,   267,   268,   269,   270,   271,   272,
     273,     0,   274,   275,   276,   277,   278,   279,   280,   281,
    1156,  1157,     0,  1158,     0,   285,   286,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,     0,     0,   297,
     298,   299,   300,     0,   301,   302,   303,   304,   305,   306,
     307,   308,  1159,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,   323,   324,   325,   326,
     327,   328,   329,  1160,   331,  1161,   333,   334,   335,   336,
     337,     0,   338,   339,   340,   341,  1163,   818,   343,  1164,
     345,   346,   347,     0,   348,   349,     0,     0,  1165,   351,
     352,     0,     0,   353,   354,   355,   356,   357,   358,   820,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
     370,   371,   372,     0,     0,     0,     0,   373,   374,   821,
     376,   377,   378,   379,   380,   381,   382,     0,   383,   384,
     385,   386,   387,   388,   389,   390,     0,   391,   392,   393,
    1166,   395,   396,   397,   398,     0,   399,   400,   401,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
       0,   413,   414,   415,   416,   417,   418,  1167,   420,   421,
     422,   423,   424,   425,   426,   427,   428,   429,   430,   431,
     432,     0,     0,   433,   434,   435,   436,   437,   438,   439,
     440,   441,   442,     0,   443,   444,   445,  1168,   447,     0,
     448,   449,   450,   451,   452,   453,   454,   455,   456,   457,
     458,   459,   460,   461,   462,   823,     0,     0,   464,   465,
       0,   466,   467,   468,   469,   470,   471,   472,     0,   473,
    1169,  1170,     0,   476,     0,   477,   478,   824,   480,   825,
    1171,   482,   483,   826,   485,   486,   487,   488,   489,     0,
       0,   490,   491,   492,     0,   493,   494,   495,   496,     0,
     497,   498,   499,   500,   501,   502,  1172,     0,   504,   505,
     506,   507,   508,   509,   510,   511,   512,   513,   514,     0,
       0,   515,     0,     0,   516,   517,   518,   519,   520,   521,
     522,   523,   524,   525,   526,   527,   528,   529,   530,   531,
     532,   533,   534,   535,   536,     0,     0,     0,     0,     0,
       0,     0,  1506,  1507,     0,     0,     0,     0,     0,  1177,
       0,  1178,     0,     0,     0,     0,     0,  1179,  1180,     0,
       0,     0,     0,  1181,  1182,   119,  1133,   843,  1134,  1135,
    1136,  1137,  1138,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   120,   121,   122,   123,   124,   125,
     126,   127,   128,     0,   129,   130,   131,     0,     0,     0,
       0,     0,   132,  1139,     0,     0,   133,   134,   135,     0,
     136,   137,   138,   139,   140,   141,   142, -2238,  1140,   145,
    1141,  1142,     0,   148,   149,   150,   151,   152,   153,  1143,
     812,   154,   155,   156,   157,  1144,  1145,   160,     0,   161,
     162,   163,   164,   813,     0,   814,     0,  1146,   168,   169,
     170,   171,   172,   173,   174,   175,   176,     0,   177,   178,
     179,   180,   181,   182,     0,   183,   184,   185,  3883,   187,
     188,   189,   190,   191,   192,   193,  1147,   195,   196,  1148,
     198,  1149,   199,     0,   200,   201,   202,   203,   204,   205,
       0,     0,   206,   207,   208,   209,   210,     0,     0,   211,
     212,  1150,   214,   215,   216,   217,     0,   218,   219,   220,
       0,   221,   222,   223,     0,   224,   225,   226,   227,  1151,
     229,   230,   231,   232,   233,   815,  1152,   235,     0,   236,
     237,  1153,   239,     0,   240,     0,   241,   242,     0,   243,
     244,   245,   246, -2238,   248,     0,   249,   250,     0,     0,
    1154,  1155,   253,   254,     0,   255,   256,   257,   258,   259,
     260,   261, -2238,   263,   264,   265,   266,     0,   267,   268,
     269,   270,   271,   272,   273,     0,   274,   275,   276,   277,
     278,   279,   280,   281,  1156,  1157,     0,  1158,     0,   285,
       0,     0,   288,   289,   290,   291,   292,   293,   294,   295,
     296,     0,     0,   297,   298,   299, -2238,     0,   301,   302,
     303,   304,   305,   306,   307,   308,  1159,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
     323,   324,   325,   326,   327,   328,   329,  1160,   331,  1161,
     333,   334,   335,   336,   337,     0,   338,   339,     0,   341,
    1163,   818,   343,  1164,   345,   346,   347,     0,   348,   349,
       0,     0,  1165,   351,   352,     0,     0,   353,   354,   355,
     356,   357,   358,   820,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,     0,     0,     0,
       0,   373,   374,   821,   376,   377,   378,   379,   380,   381,
     382,     0,   383,   384,   385,   386,   387,   388,   389,   390,
       0,   391,   392,   393,  1166,   395,   396,   397,   398,     0,
     399,   400,   401,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,     0,   413,   414,   415,   416,   417,
     418,  1167,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   429,   430,   431,   432,     0,     0,   433,   434,   435,
     436,   437,   438,   439,   440,   441,   442,     0, -2238,   444,
     445,  1168,   447,     0,   448,   449,   450,   451,   452,   453,
     454,   455,   456,   457,   458,   459,   460,   461,   462,   823,
       0,     0,   464,   465,     0,   466,   467,   468,   469,   470,
     471,   472,     0,   473,  1169,  1170,     0,   476,     0,   477,
     478,   824,   480,   825,  1171,   482,   483,   826,   485,   486,
    3884,   488,   489,     0,     0,   490,   491,   492,     0,   493,
     494,   495,   496,     0,   497,   498,   499,   500,   501,   502,
    1172,     0,   504,   505,   506,   507,   508,   509,   510,   511,
     512,   513,   514,     0,     0,   515,     0,     0,   516,   517,
     518,   519,   520,   521,   522,   523,   524,   525,   526,   527,
     528,   529,   530,   531,   532,   533,   534,   535,   536, -2238,
       0,     0,     0,     0,     0,     0,  1174,  1175,  1176,     0,
       0,     0,     0,  1177,     0,  1178,     0,     0,     0,     0,
       0,  1179,  1180,     0,     0,     0,     0,  1181,  1182,   119,
    1133,   843,  1134,  1135,     0,  1137,  1138,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   120,   121,
     122,   123,   124,   125,   126,   127,   128,     0,   129,   130,
     131,     0,     0,     0,     0,     0,   132,  1139,     0,     0,
     133,   134,   135,     0,   136,   137,   138,   139,   140,   141,
     142,   143,  1140,   145,  1141,  1142,     0,   148,   149,   150,
     151,   152,   153,  1143,   812,   154,   155,   156,   157,  1144,
    1145,   160,     0,   161,   162,   163,   164,   813,     0,   814,
       0,   167,   168,   169,   170,   171,   172,   173,   174,   175,
     176,     0,   177,   178,   179,   180,   181,   182,     0,   183,
     184,   185,   186,   187,   188,   189,   190,   191,   192,   193,
    1147,   195,   196,  1148,   198,     0,   199,     0,   200,   201,
     202,   203,   204,   205,     0,     0,   206,   207,   208,   209,
     210,     0,     0,   211,   212,  1150,   214,   215,   216,   217,
       0,   218,   219,   220,     0,   221,   222,   223,     0,   224,
     225,   226,   227,  1151,   229,   230,   231,   232,   233,   815,
    1152,   235,     0,   236,   237,  1153,   239,     0,   240,     0,
     241,   242,     0,   243,   244,   245,   246,   247,   248,     0,
     249,   250,     0,     0,  1154,  1155,   253,   254,     0,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,     0,   267,   268,   269,   270,   271,   272,   273,     0,
     274,   275,   276,   277,   278,   279,   280,   281,  1156,  1157,
       0,  1158,     0,   285,   286,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,     0,     0,   297,   298,   299,
     300,     0,   301,   302,   303,   304,   305,   306,   307,   308,
    1159,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     329,  1160,   331,  1161,   333,   334,   335,   336,   337,     0,
     338,   339,   340,   341,  1163,   818,   343,  1164,   345,   346,
     347,     0,   348,   349,     0,     0,   350,   351,   352,     0,
       0,   353,   354,   355,   356,   357,   358,   820,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,     0,     0,     0,     0,   373,   374,   821,   376,   377,
     378,   379,   380,   381,   382,     0,   383,   384,   385,   386,
     387,   388,   389,   390,     0,   391,   392,   393,  1166,   395,
     396,   397,   398,     0,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,     0,   413,
     414,   415,   416,   417,   418,  2285,  2286,   421,   422,   423,
     424,   425,   426,   427,   428,   429,   430,   431,   432,     0,
       0,   433,   434,   435,   436,   437,   438,   439,   440,   441,
     442,     0,   443,   444,   445,  1168,   447,     0,   448,   449,
     450,   451,   452,   453,   454,   455,   456,   457,   458,   459,
     460,   461,   462,   823,     0,     0,   464,   465,     0,   466,
     467,   468,   469,   470,   471,   472,     0,   473,  1169,  1170,
       0,   476,     0,   477,   478,   824,   480,   825,  1171,   482,
     483,   826,   485,   486,   487,   488,   489,     0,     0,   490,
     491,   492,     0,   493,   494,   495,   496,     0,   497,   498,
     499,   500,   501,   502,  1172,     0,   504,   505,   506,   507,
     508,   509,   510,   511,   512,   513,   514,     0,     0,   515,
       0,     0,   516,   517,   518,   519,   520,   521,   522,   523,
     524,   525,   526,   527,   528,   529,   530,   531,   532,   533,
     534,   535,   536,     0,     0,     0,     0,     0,     0,     0,
    2287,  2288,     0,     0,     0,     0,     0,  1177,     0,  1178,
       0,     0,     0,     0,     0,  1179,  1180,     0,     0,     0,
       0,  1181,  1182,   119,  1133,   843,  1134,  1135,  1136,  1137,
    1138,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   120,   121,   122,   123,   124,   125,   126,   127,
     128,     0,   129,   130,   131,     0,     0,     0,     0,     0,
     132,  1139,     0,     0,   133,   134,   135,     0,   136,   137,
     138,   139,   140,   141,   142,   143,  1140,   145,  1141,  1142,
       0,   148,   149,   150,   151,   152,   153,  1143,   812,   154,
     155,   156,   157,  1144,  1145,   160,     0,   161,   162,   163,
     164,   813,     0,   814,     0,   167,   168,   169,   170,   171,
     172,   173,   174,   175,   176,     0,   177,   178,   179,   180,
     181,   182,     0,   183,   184,   185,   186,   187,   188,   189,
     190,   191,   192,   193,  1147,   195,   196,  1148,   198,     0,
     199,     0,   200,   201,   202,   203,   204,   205,     0,     0,
     206,   207,   208,   209,   210,     0,     0,   211,   212,  1150,
     214,   215,   216,   217,     0,   218,   219,   220,     0,   221,
     222,   223,     0,   224,   225,   226,   227,  1151,   229,   230,
     231,   232,   233,   815,  1152,   235,     0,   236,   237,  1153,
     239,     0,   240,     0,   241,   242,     0,   243,   244,   245,
     246,   247,   248,     0,   249,   250,     0,     0,  1154,  1155,
     253,   254,     0,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,     0,   267,   268,   269,   270,
     271,   272,   273,     0,   274,   275,   276,   277,   278,   279,
     280,   281,  1156,  1157,     0,  1158,     0,   285,     0,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,     0,
       0,   297,   298,   299,   300,     0,   301,   302,   303,   304,
     305,   306,   307,   308,  1159,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,  1160,   331,  1161,   333,   334,
     335,   336,   337,     0,   338,   339,   340,   341,  1163,   818,
     343,  1164,   345,   346,   347,     0,   348,   349,     0,     0,
    1165,   351,   352,     0,     0,   353,   354,   355,   356,   357,
     358,   820,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,   371,   372,     0,     0,     0,     0,   373,
     374,   821,   376,   377,   378,   379,   380,   381,   382,     0,
     383,   384,   385,   386,   387,   388,   389,   390,     0,   391,
     392,   393,  1166,   395,   396,   397,   398,     0,   399,   400,
     401,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,     0,   413,   414,   415,   416,   417,   418,  1167,
     420,   421,   422,   423,   424,   425,   426,   427,   428,   429,
     430,   431,   432,     0,     0,   433,   434,   435,   436,   437,
     438,   439,   440,   441,   442,     0,   443,   444,   445,  1168,
     447,     0,   448,   449,   450,   451,   452,   453,   454,   455,
     456,   457,   458,   459,   460,   461,   462,   823,     0,     0,
     464,   465,     0,   466,   467,   468,   469,   470,   471,   472,
       0,   473,  1169,  1170,     0,   476,     0,   477,   478,   824,
     480,   825,  1171,   482,   483,   826,   485,   486,   487,   488,
     489,     0,     0,   490,   491,   492,     0,   493,   494,   495,
     496,     0,   497,   498,   499,   500,   501,   502,  1172,     0,
     504,   505,   506,   507,   508,   509,   510,   511,   512,   513,
     514,     0,     0,   515,     0,     0,   516,   517,   518,   519,
     520,   521,   522,   523,   524,   525,   526,   527,   528,   529,
     530,   531,   532,   533,   534,   535,   536,     0,     0,     0,
       0,     0,     0,     0,  1506,  1507,     0,     0,     0,     0,
       0,  1177,     0,  1178,     0,     0,     0,     0,     0,  1179,
    1180,     0,     0,     0,     0,  1181,  1182,   119,  1133,   843,
    1134,  1135,     0,  1137,  1138,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   120,   121,   122,   123,
     124,   125,   126,   127,   128,     0,   129,   130,   131,     0,
       0,     0,     0,     0,   132,  1139,     0,     0,   133,   134,
     135,     0,   136,   137,   138,   139,   140,   141,   142,   143,
    1140,   145,  1141,  1142,     0,   148,   149,   150,   151,   152,
     153,  1143,   812,   154,   155,   156,   157,  1144,  1145,   160,
       0,   161,   162,   163,   164,   813,     0,   814,     0,   167,
     168,   169,   170,   171,   172,   173,   174,   175,   176,     0,
     177,   178,   179,   180,   181,   182,     0,   183,   184,   185,
     186,   187,   188,   189,   190,   191,   192,   193,  1147,   195,
     196,  1148,   198,     0,   199,     0,   200,   201,   202,   203,
     204,   205,     0,     0,   206,   207,   208,   209,   210,     0,
       0,   211,   212,  1150,   214,   215,   216,   217,     0,   218,
     219,   220,     0,   221,   222,   223,     0,   224,   225,   226,
     227,  1151,   229,   230,   231,   232,   233,   815,  1152,   235,
       0,   236,   237,  1153,   239,     0,   240,     0,   241,   242,
       0,   243,   244,   245,   246,   247,   248,     0,   249,   250,
       0,  3218,  1154,  1155,   253,   254,     0,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,  -910,
     267,   268,   269,   270,   271,   272,   273,     0,   274,   275,
     276,   277,   278,   279,   280,   281,  1156,  1157,     0,  1158,
       0,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,     0,     0,   297,   298,   299,   300,     0,
     301,   302,   303,   304,   305,   306,   307,   308,  1159,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,   322,   323,   324,   325,   326,   327,   328,   329,  1160,
     331,  1161,   333,   334,   335,   336,   337,     0,   338,   339,
     340,   341,  1163,   818,   343,  1164,   345,   346,   347,     0,
     348,   349,     0,     0,   350,   351,   352,     0,     0,   353,
     354,   355,   356,   357,   358,   820,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,   371,   372,     0,
       0,     0,     0,   373,   374,   821,   376,   377,   378,   379,
     380,   381,   382,     0,   383,   384,   385,   386,   387,   388,
     389,   390,     0,   391,   392,   393,  1166,   395,   396,   397,
     398,     0,   399,   400,   401,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,     0,   413,   414,   415,
     416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,   428,   429,   430,   431,   432,     0,     0,   433,
     434,   435,   436,   437,   438,   439,   440,   441,   442,     0,
     443,   444,   445,  1168,   447,     0,   448,   449,   450,   451,
     452,   453,   454,   455,   456,   457,   458,   459,   460,   461,
     462,   823,     0,     0,   464,   465,     0,   466,   467,   468,
     469,   470,   471,   472,     0,   473,  1169,  1170,     0,   476,
       0,   477,   478,   824,   480,   825,  1171,   482,   483,   826,
     485,   486,   487,   488,   489,     0,     0,   490,   491,   492,
       0,   493,   494,   495,   496,     0,   497,   498,   499,   500,
     501,   502,  1172,     0,   504,   505,   506,   507,   508,   509,
     510,   511,   512,   513,   514,     0,     0,   515,     0,     0,
     516,   517,   518,   519,   520,   521,   522,   523,   524,   525,
     526,   527,   528,   529,   530,   531,   532,   533,   534,   535,
     536,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1177,     0,  2870,     0,     0,
       0,     0,     0,  1179,  1180,     0,     0,     0,     0,  1181,
    1182,   119,  1133,   843,  1134,  1135,     0,  1137,  1138,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     120,   121,   122,   123,   124,   125,   126,   127,   128,     0,
     129,   130,   131,     0,     0,     0,     0,     0,   132,  1139,
       0,     0,   133,   134,   135,     0,   136,   137,   138,   139,
     140,   141,   142,   143,  1140,   145,  1141,  1142,     0,   148,
     149,   150,   151,   152,   153,  1143,   812,   154,   155,   156,
     157,  1144,  1145,   160,     0,   161,   162,   163,   164,   813,
       0,   814,     0,   167,   168,   169,   170,   171,   172,   173,
     174,   175,   176,     0,   177,   178,   179,   180,   181,   182,
       0,   183,   184,   185,   186,   187,   188,   189,   190,   191,
     192,   193,  1147,   195,   196,  1148,   198,     0,   199,     0,
     200,   201,   202,   203,   204,   205,     0,     0,   206,   207,
     208,   209,   210,     0,     0,   211,   212,  1150,   214,   215,
     216,   217,     0,   218,   219,   220,     0,   221,   222,   223,
       0,   224,   225,   226,   227,  1151,   229,   230,   231,   232,
     233,   815,  1152,   235,     0,   236,   237,  1153,   239,     0,
     240,     0,   241,   242,     0,   243,   244,   245,   246,   247,
     248,     0,   249,   250,     0,     0,  1154,  1155,   253,   254,
       0,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,     0,   267,   268,   269,   270,   271,   272,
     273,     0,   274,   275,   276,   277,   278,   279,   280,   281,
    1156,  1157,     0,  1158,     0,   285,   286,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,     0,     0,   297,
     298,   299,   300,     0,   301,   302,   303,   304,   305,   306,
     307,   308,  1159,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,   323,   324,   325,   326,
     327,   328,   329,  1160,   331,  1161,   333,   334,   335,   336,
     337,     0,   338,   339,   340,   341,  1163,   818,   343,  1164,
     345,   346,   347,     0,   348,   349,     0,     0,   350,   351,
     352,     0,     0,   353,   354,   355,   356,   357,   358,   820,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
     370,   371,   372,     0,     0,     0,     0,   373,   374,   821,
     376,   377,   378,   379,   380,   381,   382,     0,   383,   384,
     385,   386,   387,   388,   389,   390,     0,   391,   392,   393,
    1166,   395,   396,   397,   398,     0,   399,   400,   401,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
       0,   413,   414,   415,   416,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,   428,   429,   430,   431,
     432,     0,     0,   433,   434,   435,   436,   437,   438,   439,
     440,   441,   442,     0,   443,   444,   445,  1168,   447,     0,
     448,   449,   450,   451,   452,   453,   454,   455,   456,   457,
     458,   459,   460,   461,   462,   823,     0,     0,   464,   465,
       0,   466,   467,   468,   469,   470,   471,   472,     0,   473,
    1169,  1170,     0,   476,     0,   477,   478,   824,   480,   825,
    1171,   482,   483,   826,   485,   486,   487,   488,   489,     0,
       0,   490,   491,   492,     0,   493,   494,   495,   496,     0,
     497,   498,   499,   500,   501,   502,  1172,     0,   504,   505,
     506,   507,   508,   509,   510,   511,   512,   513,   514,     0,
       0,   515,     0,     0,   516,   517,   518,   519,   520,   521,
     522,   523,   524,   525,   526,   527,   528,   529,   530,   531,
     532,   533,   534,   535,   536,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1177,
       0,  2870,     0,     0,     0,     0,     0,  1179,  1180,     0,
       0,     0,     0,  1181,  1182,   119,  1133,   843,  1134,  1135,
       0,  1137,  1138,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   120,   121,   122,   123,   124,   125,
     126,   127,   128,     0,   129,   130,   131,     0,     0,     0,
       0,     0,   132,  1139,     0,     0,   133,   134,   135,     0,
     136,   137,   138,   139,   140,   141,   142,   143,  1140,   145,
    1141,  1142,     0,   148,   149,   150,   151,   152,   153,  1143,
     812,   154,   155,   156,   157,  1144,  1145,   160,     0,   161,
     162,   163,   164,   813,     0,   814,     0,   167,   168,   169,
     170,   171,   172,   173,   174,   175,   176,     0,   177,   178,
     179,   180,   181,   182,     0,   183,   184,   185,   186,   187,
     188,   189,   190,   191,   192,   193,  1147,   195,   196,  1148,
     198,     0,   199,     0,   200,   201,   202,   203,   204,   205,
       0,     0,   206,   207,   208,   209,   210,     0,     0,   211,
     212,  1150,   214,   215,   216,   217,     0,   218,   219,   220,
       0,   221,   222,   223,     0,   224,   225,   226,   227,  1151,
     229,   230,   231,   232,   233,   815,  1152,   235,     0,   236,
     237,  1153,   239,     0,   240,     0,   241,   242,     0,   243,
     244,   245,   246,   247,   248,     0,   249,   250,     0,     0,
    1154,  1155,   253,   254,     0,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,     0,   267,   268,
     269,   270,   271,   272,   273,     0,   274,   275,   276,   277,
     278,   279,   280,   281,  1156,  1157,     0,  1158,     0,   285,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,     0,     0,   297,   298,   299,   300,     0,   301,   302,
     303,   304,   305,   306,   307,   308,  1159,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
     323,   324,   325,   326,   327,   328,   329,  1160,   331,  1161,
     333,   334,   335,   336,   337,     0,   338,   339,   340,   341,
    1163,   818,   343,  1164,   345,   346,   347,     0,   348,   349,
       0,     0,   350,   351,   352,     0,     0,   353,   354,   355,
     356,   357,   358,   820,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,     0,     0,     0,
       0,   373,   374,   821,   376,   377,   378,   379,   380,   381,
     382,     0,   383,   384,   385,   386,   387,   388,   389,   390,
       0,   391,   392,   393,  1166,   395,   396,   397,   398,     0,
     399,   400,   401,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,     0,   413,   414,   415,   416,   417,
     418,  1167,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   429,   430,   431,   432,     0,     0,   433,   434,   435,
     436,   437,   438,   439,   440,   441,   442,     0,   443,   444,
     445,  1168,   447,     0,   448,   449,   450,   451,   452,   453,
     454,   455,   456,   457,   458,   459,   460,   461,   462,   823,
       0,     0,   464,   465,     0,   466,   467,   468,   469,   470,
     471,   472,     0,   473,  1169,  1170,     0,   476,     0,   477,
     478,   824,   480,   825,  1171,   482,   483,   826,   485,   486,
     487,   488,   489,     0,     0,   490,   491,   492,     0,   493,
     494,   495,   496,     0,   497,   498,   499,   500,   501,   502,
    1172,     0,   504,   505,   506,   507,   508,   509,   510,   511,
     512,   513,   514,     0,     0,   515,     0,     0,   516,   517,
     518,   519,   520,   521,   522,   523,   524,   525,   526,   527,
     528,   529,   530,   531,   532,   533,   534,   535,   536,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1177,     0,  1178,     0,     0,     0,     0,
       0,  1179,  1180,     0,     0,     0,     0,  1181,  1182,   119,
    1133,   843,  1134,  1135,  1136,  1137,  1138,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   120,   121,
     122,   123,   124,   125,   126,   127,   128,     0,   129,   130,
     131,     0,     0,     0,     0,     0,   132,  1139,     0,     0,
     133,   134,   135,     0,   136,   137,   138,   139,   140,   141,
     142,     0,  1140,   145,  1141,  1142,     0,   148,   149,   150,
     151,   152,   153,  1143,   812,   154,   155,   156,   157,  1144,
    1145,   160,     0,   161,   162,   163,   164,   813,     0,   814,
       0,  1146,   168,   169,   170,   171,   172,   173,   174,   175,
     176,     0,   177,   178,   179,   180,   181,   182,     0,   183,
     184,   185,   186,   187,   188,   189,   190,   191,   192,   193,
    1147,   195,   196,  1148,   198,  1149,   199,     0,   200,   201,
     202,   203,   204,   205,     0,     0,   206,   207,   208,   209,
     210,     0,     0,   211,   212,  1150,   214,   215,   216,   217,
       0,   218,   219,   220,     0,   221,     0,   223,     0,   224,
     225,   226,   227,  1151,   229,   230,   231,   232,   233,   815,
    1152,   235,     0,   236,   237,  1153,   239,     0,   240,     0,
     241,   242,     0,   243,   244,   245,   246,     0,   248,     0,
     249,   250,     0,     0,  1154,  1155,   253,   254,     0,   255,
     256,   257,   258,   259,   260,   261,     0,   263,   264,   265,
     266,     0,   267,   268,   269,   270,   271,   272,   273,     0,
     274,   275,   276,   277,   278,   279,   280,   281,  1156,  1157,
       0,  1158,     0,   285,     0,     0,   288,   289,   290,   291,
     292,   293,   294,   295,   296,     0,     0,   297,   298,   299,
       0,     0,   301,   302,   303,   304,   305,   306,   307,   308,
    1159,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     329,  1160,   331,  1161,   333,   334,   335,   336,   337,     0,
     338,   339,     0,   341,  1163,   818,   343,  1164,   345,   346,
     347,     0,   348,   349,     0,     0,  1165,   351,   352,     0,
       0,   353,   354,   355,   356,   357,   358,   820,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,     0,     0,     0,     0,   373,   374,   821,   376,   377,
     378,   379,   380,   381,   382,     0,   383,   384,   385,   386,
     387,   388,   389,   390,     0,   391,   392,   393,  1166,   395,
     396,   397,   398,     0,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,     0,   413,
     414,   415,   416,   417,   418,  1167,   420,   421,   422,   423,
     424,   425,   426,   427,   428,   429,   430,   431,   432,     0,
       0,   433,   434,   435,   436,   437,   438,   439,   440,   441,
     442,     0,     0,   444,   445,  1168,   447,     0,   448,   449,
     450,   451,   452,   453,   454,   455,   456,   457,   458,   459,
     460,   461,   462,   823,     0,     0,   464,   465,     0,   466,
     467,   468,   469,   470,   471,   472,     0,   473,  1169,  1170,
       0,   476,     0,   477,   478,   824,   480,   825,  1171,   482,
     483,   826,   485,   486,   487,   488,   489,     0,     0,   490,
     491,   492,     0,   493,   494,   495,   496,     0,   497,   498,
     499,   500,   501,   502,  1172,     0,   504,   505,   506,   507,
     508,   509,   510,   511,   512,   513,   514,     0,     0,   515,
       0,     0,   516,   517,   518,   519,   520,   521,   522,   523,
     524,   525,   526,   527,   528,   529,   530,   531,   532,   533,
     534,   535,   536,     0,     0,     0,     0,     0,     0,     0,
    1174,  1175,  1176,     0,   893,     0,     0,  1177,     0,  1178,
       0,     0,     0,     0,     0,  1179,  1180,     0,     0,     0,
       0,  1181,  1182,   120,   121,   122,   123,     0,   125,   126,
     127,   128,     0,   129,   130,   131,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   134,   135,     0,   136,
     137,   138,     0,   140,   141,   142,   894,   895,     0,   896,
     897,     0,   148,   149,   150,   151,   152,   153,     0,     0,
     154,   155,   156,   157,   898,   899,   160,     0,   161,   162,
     163,   164,   900,     0,     0,     0,     0,   168,   169,   170,
     171,   172,     0,   174,   175,   176,     0,   177,   178,   179,
     180,   181,     0,     0,     0,   184,   185,   186,   187,   188,
     189,   190,   191,   192,   193,   901,   195,   196,   902,   198,
       0,   199,     0,   200,   201,   202,   203,   204,   205,     0,
       0,     0,   207,   208,   209,   210,     0,     0,   211,   212,
     213,   214,   215,     0,     0,     0,   218,   219,   220,     0,
     221,   222,   223,     0,   224,   225,   226,   227,   903,   229,
     230,   231,   232,   233,   904,     0,   235,     0,   236,   237,
     905,   239,     0,   240,     0,   241,     0,     0,     0,   244,
     245,   906,     0,   248,     0,   249,     0,     0,     0,   907,
     908,     0,   254,     0,   255,   256,   257,   258,   259,   260,
     261,     0,   263,   264,   265,   266,     0,   267,   268,   269,
     270,   271,   272,   273,     0,   274,     0,   909,   277,   278,
     279,   280,   281,   910,   911,     0,   912,     0,   285,     0,
       0,   288,     0,   290,     0,   292,   293,   294,   295,   296,
       0,     0,   297,     0,   299,     0,     0,   301,   302,   303,
     304,   305,   306,   307,   308,   913,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,   329,   914,     0,   915,   333,
     334,   335,     0,   916,     0,   338,   339,     0,   341,     0,
     917,   343,   918,   345,   346,   347,     0,   348,   349,     0,
       0,   350,   351,   352,     0,     0,   353,   354,   919,     0,
     357,     0,   920,   360,   361,   362,   363,   364,   365,   366,
     367,   368,     0,     0,   371,   372,     0,     0,     0,     0,
     373,   374,   921,     0,   377,   378,   922,   380,   381,   382,
       0,   383,   384,   385,   386,   387,     0,     0,   390,     0,
     391,   392,   393,   923,   395,   396,   397,   398,     0,   399,
     400,   401,     0,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,     0,   413,   414,     0,   416,   417,   418,
     924,   420,   421,   422,   423,   424,   425,   426,   427,   428,
     429,   430,   431,   432,     0,     0,   433,   434,   435,   436,
     437,   438,   925,   440,   441,     0,     0,     0,     0,   445,
     926,   447,     0,     0,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   927,   462,   928,     0,
       0,   464,   465,     0,   466,     0,   468,   469,   470,   471,
     472,     0,   473,   929,   930,     0,     0,     0,   477,   478,
     931,   480,   932,     0,   482,   483,   933,   485,   486,   487,
     488,   489,     0,     0,   490,   491,   492,     0,   493,   494,
     495,   496,     0,   497,   498,   499,   500,   501,  1499,   935,
       0,   504,     0,   506,     0,   508,   509,   510,   511,     0,
     513,   514,     0,     0,   515,     0,     0,   516,   517,   518,
     519,   520,   521,   936,   937,   938,   939,   940,   941,   942,
     943,   944,   945,   946,   533,   534,   535,   536,     0,     0,
       0,     0,     0,     0,     0,     0,  1052,  1436,   843,     0,
       0,     0,  1137,     0,  3488,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  3489,   120,   121,   122,   123,   124,
     125,   126,   127,   128,     0,   129,   130,   131,     0,     0,
       0,   584,     0,   132,     0,     0,     0,   589,   134,   135,
       0,   136,   137,   138,   591,   140,   141,   142,   592,   593,
     594,   595,   596,     0,   148,   149,   150,   151,   152,   153,
       0,     0,   154,   155,   156,   157,   600,   601,   160,     0,
     161,   162,   163,   164,   603,     0,   605,     0,   607,   168,
     169,   170,   171,   172,   608,   174,   175,   176,     0,   177,
     178,   179,   180,   181,   182,     0,   611,   184,   185,   186,
     187,   188,   189,   190,   191,   192,   193,   613,   195,   196,
     614,   198,     0,   199,     0,   200,   201,   202,   203,   204,
     205,     0,     0,   206,   207,   208,   209,   210,     0,     0,
     211,   212,   213,   214,   215,   216,   217,     0,   218,   219,
     220,     0,   221,   222,   223,     0,   224,   225,   226,   227,
     624,   229,   230,   231,   232,   233,   625,  1437,   235,     0,
     236,   237,   628,   239,     0,   240,     0,   241,   631,     0,
     633,   244,   245,   634,   635,   248,     0,   249,   250,     0,
       0,   639,   640,   253,   254,     0,   255,   256,   257,   258,
     259,   260,   261,   642,   263,   264,   265,   266,     0,   267,
     268,   269,   270,   271,   272,   273,     0,   274,   645,   646,
     277,   278,   279,   280,   281,   647,   648,     0,   650,     0,
     285,   652,   653,   288,   654,   290,   291,   292,   293,   294,
     295,   296,     0,     0,   297,   657,   299,   658,     0,   301,
     302,   303,   304,   305,   306,   307,   308,   660,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,   323,   324,   325,   326,   327,   328,   329,   661,   662,
     663,   333,   334,   335,   336,   664,     0,   338,   339,   666,
     341,     0,   668,   343,   669,   345,   346,   347,     0,   348,
     349,  1438,     0,   350,   351,   352,     0,     0,   353,   354,
     675,   676,   357,   677,   678,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,     0,     0,
       0,     0,   373,   374,   683,   684,   377,   378,   685,   380,
     381,   382,     0,   383,   384,   385,   386,   387,   388,   389,
     390,     0,   391,   392,   393,   688,   395,   396,   397,   398,
       0,   399,   400,   401,   402,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,     0,   413,   414,   691,   416,
     417,   418,   692,   420,   421,   422,   423,   424,   425,   426,
     427,   428,   429,   430,   431,   432,     0,   694,   433,   434,
     435,   436,   437,   438,   695,   440,   441,   442,     0,   697,
     444,   445,   698,   447,     0,   448,   449,   450,   451,   452,
     453,   454,   455,   456,   457,   458,   459,   460,   700,   462,
     701,     0,     0,   464,   465,     0,   466,   705,   468,   469,
     470,   471,   472,     0,   473,   707,   708,     0,   476,     0,
     477,   478,   711,   480,   712,  1439,   482,   483,   714,   485,
     486,   487,   488,   489,     0,     0,   490,   491,   492,     0,
     493,   494,   495,   496,     0,   497,   498,   499,   500,   501,
     719,   720,     0,   504,   722,   506,   507,   508,   509,   510,
     511,   512,   513,   514,     0,     0,   515,     0,     0,   516,
     517,   518,   519,   520,   521,   727,   728,   729,   730,   731,
     732,   733,   734,   735,   736,   737,   533,   534,   535,   536,
       0,     0,     0,     0,     0,   545,     0,  1440,  1441,  2462,
       0,     0,     0,     0,     0,     0,  2463,     0,     0,     0,
       0,     0,     0,  1180,   120,   121,   122,   123,   124,   125,
     126,   127,   128,     0,   129,   130,   131,     0,     0,     0,
       0,     0,   132,     0,  1091,     0,     0,   134,   135,     0,
     136,   137,   138,     0,   140,   141,   142,   143,   144,     0,
     146,   147,     0,   148,   149,   150,   151,   152,   153,     0,
       0,   154,   155,   156,   157,   158,   159,   160,     0,   161,
     162,   163,   164,   165,     0,     0,     0,   167,   168,   169,
     170,   171,   172,     0,   174,   175,   176,     0,   177,   178,
     179,   180,   181,   182,     0,     0,   184,   185,   186,   187,
     188,   189,   190,   191,   192,   193,   194,   195,   196,   197,
     198,     0,   199,     0,   200,   201,   202,   203,   204,   205,
       0,     0,   206,   207,   208,   209,   210,     0,     0,   211,
     212,   213,   214,   215,   216,   217,     0,   218,   219,   220,
       0,   221,   222,   223,  -716,   224,   225,   226,   227,   228,
     229,   230,   231,   232,   233,   234,     0,   235,  -716,   236,
     237,   238,   239,  -716,   240,     0,   241,     0,     0,     0,
     244,   245,   546,     0,   248,     0,   249,   250,     0,     0,
     251,   252,   253,   254,     0,   255,   256,   257,   258,   259,
     260,   261,     0,   263,   264,   265,   266,     0,   267,   268,
     269,   270,   271,   272,   273,     0,   274,     0,   276,   277,
     278,   279,   280,   281,   282,   283,  -716,   284,     0,   285,
       0,     0,   288,     0,   290,   291,   292,   293,   294,   295,
     296,     0,     0,   297,     0,   299,     0,  -716,   301,   302,
     303,   304,   305,   306,   307,   308,   547,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
     323,   324,   325,   326,   327,   328,   329,   330,     0,   332,
     333,   334,   335,   336,   337,     0,   338,   339,     0,   341,
       0,   342,   343,   344,   345,   346,   347,  -716,   348,   349,
       0,     0,   350,   351,   352,     0,  -716,   353,   354,   355,
       0,   357,     0,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,     0,     0,     0,
       0,   373,   374,   375,     0,   377,   378,   379,   380,   381,
     382,     0,   383,   384,   385,   386,   387,   388,   389,   390,
       0,   391,   392,   393,   394,   395,   396,   397,   398,     0,
     399,   400,   401,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,     0,   413,   414,     0,   416,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   429,   430,   431,   432,     0,     0,   433,   434,   435,
     436,   437,   438,   439,   440,   441,   442,     0,     0,   444,
     445,   446,   447,     0,   448,   449,   450,   451,   452,   453,
     454,   455,   456,   457,   458,   459,   460,   548,   462,   463,
       0,     0,   464,   465,     0,   466,     0,   468,   469,   470,
     471,   472,     0,   473,   474,   475,     0,   476,     0,   477,
     478,   479,   480,   481,     0,   482,   483,   484,   485,   486,
     487,   488,   489,  -716,     0,   490,   491,   492,     0,   493,
     494,   495,   496,     0,   497,   498,   499,   500,   501,   502,
     503,     0,   504,     0,   506,   507,   508,   509,   510,   511,
     512,   513,   514,     0,     0,   515,     0,     0,   516,   517,
     518,   519,   520,   521,   522,   523,   524,   525,   526,   527,
     528,   529,   530,   531,   532,   533,   534,   535,   536,   545,
       0,   573,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1250,     0,   120,   121,
     122,   123,   124,   125,   126,   127,   128,     0,   129,   130,
     131,     0,     0,     0,     0,     0,   132,     0,     0,     0,
       0,   134,   135,     0,   136,   137,   138,     0,   140,   141,
     142,   143,   144,     0,   146,   147,     0,   148,   149,   150,
     151,   152,   153,     0,     0,   154,   155,   156,   157,   158,
     159,   160,     0,   161,   162,   163,   164,   165,     0,     0,
       0,   167,   168,   169,   170,   171,   172,     0,   174,   175,
     176,     0,   177,   178,   179,   180,   181,   182,     0,     0,
     184,   185,   186,   187,   188,   189,   190,   191,   192,   193,
     194,   195,   196,   197,   198,     0,   199,     0,   200,   201,
     202,   203,   204,   205,     0,     0,   206,   207,   208,   209,
     210,     0,     0,   211,   212,   213,   214,   215,   216,   217,
       0,   218,   219,   220,     0,   221,   222,   223,     0,   224,
     225,   226,   227,   228,   229,   230,   231,   232,   233,   234,
       0,   235,     0,   236,   237,   238,   239,     0,   240,     0,
     241,     0,     0,     0,   244,   245,   546,     0,   248,     0,
     249,   250,     0,     0,   251,   252,   253,   254,     0,   255,
     256,   257,   258,   259,   260,   261,     0,   263,   264,   265,
     266,     0,   267,   268,   269,   270,   271,   272,   273,     0,
     274,     0,   276,   277,   278,   279,   280,   281,   282,   283,
       0,   284,     0,   285,     0,     0,   288,     0,   290,   291,
     292,   293,   294,   295,   296,     0,     0,   297,     0,   299,
       0,     0,   301,   302,   303,   304,   305,   306,   307,   308,
     547,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     329,   330,     0,   332,   333,   334,   335,   336,   337,     0,
     338,   339,     0,   341,     0,   342,   343,   344,   345,   346,
     347,     0,   348,   349,     0,     0,   350,   351,   352,     0,
       0,   353,   354,   355,     0,   357,     0,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,     0,     0,     0,     0,   373,   374,   375,     0,   377,
     378,   379,   380,   381,   382,     0,   383,   384,   385,   386,
     387,   388,   389,   390,     0,   391,   392,   393,   394,   395,
     396,   397,   398,     0,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,     0,   413,
     414,     0,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,   428,   429,   430,   431,   432,     0,
       0,   433,   434,   435,   436,   437,   438,   439,   440,   441,
     442,     0,     0,   444,   445,   446,   447,     0,   448,   449,
     450,   451,   452,   453,   454,   455,   456,   457,   458,   459,
     460,   548,   462,   463,     0,     0,   464,   465,     0,   466,
       0,   468,   469,   470,   471,   472,     0,   473,   474,   475,
       0,   476,     0,   477,   478,   479,   480,   481,     0,   482,
     483,   484,   485,   486,   487,   488,   489,     0,     0,   490,
     491,   492,     0,   493,   494,   495,   496,     0,   497,   498,
     499,   500,   501,   502,   503,     0,   504,     0,   506,   507,
     508,   509,   510,   511,   512,   513,   514,     0,     0,   515,
       0,     0,   516,   517,   518,   519,   520,   521,   522,   523,
     524,   525,   526,   527,   528,   529,   530,   531,   532,   533,
     534,   535,   536,   119,     0,   573,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  2547,
    3464,     0,   120,   121,   122,   123,   124,   125,   126,   127,
     128,     0,   129,   130,   131,     0,     0,     0,     0,     0,
     132,     0,     0,     0,   133,   134,   135,     0,   136,   137,
     138,   139,   140,   141,   142,   143,   144,   145,   146,   147,
       0,   148,   149,   150,   151,   152,   153,     0,   812,   154,
     155,   156,   157,   158,   159,   160,     0,   161,   162,   163,
     164,   813,     0,   814,     0,   167,   168,   169,   170,   171,
     172,   173,   174,   175,   176,     0,   177,   178,   179,   180,
     181,   182,     0,   183,   184,   185,   186,   187,   188,   189,
     190,   191,   192,   193,   194,   195,   196,   197,   198,     0,
     199,     0,   200,   201,   202,   203,   204,   205,    14,    15,
     206,   207,   208,   209,   210,     0,     0,   211,   212,   213,
     214,   215,   216,   217,     0,   218,   219,   220,     0,   221,
     222,   223,     0,   224,   225,   226,   227,   228,   229,   230,
     231,   232,   233,   815,     0,   235,     0,   236,   237,   238,
     239,     0,   240,     0,   241,   242,    23,   243,   244,   245,
     246,   247,   248,     0,   249,   250,   816,     0,   251,   252,
     253,   254,     0,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,     0,   267,   268,   269,   270,
     271,   272,   273,     0,   274,   275,   276,   277,   278,   279,
     280,   281,   282,   283,     0,   284,     0,   285,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   817,
       0,   297,   298,   299,   300,     0,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,     0,   338,   339,   340,   341,     0,   818,
     343,   344,   345,   346,   347,     0,   348,   349,     0,   819,
     350,   351,   352,     0,     0,   353,   354,   355,   356,   357,
     358,   820,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,   371,   372,    27,    28,    29,     0,   373,
     374,   821,   376,   377,   378,   379,   380,   381,   382,     0,
     383,   384,   385,   386,   387,   388,   389,   390,     0,   391,
     392,   393,   394,   395,   396,   397,   398,     0,   399,   400,
     401,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,     0,   413,   414,   415,   416,   417,   418,   419,
     822,   421,   422,   423,   424,   425,   426,   427,   428,   429,
     430,   431,   432,    34,     0,   433,   434,   435,   436,   437,
     438,   439,   440,   441,   442,    36,   443,   444,   445,   446,
     447,     0,   448,   449,   450,   451,   452,   453,   454,   455,
     456,   457,   458,   459,   460,   461,   462,   823,    38,     0,
     464,   465,    39,   466,   467,   468,   469,   470,   471,   472,
       0,   473,   474,   475,     0,   476,     0,   477,   478,   824,
     480,   825,     0,   482,   483,   826,   485,   486,   487,   488,
     489,     0,     0,   490,   491,   492,    41,   493,   494,   495,
     496,     0,   497,   498,   499,   500,   501,   827,   503,     0,
     504,   505,   506,   507,   508,   509,   510,   511,   512,   513,
     514,     0,     0,   515,     0,    45,   516,   517,   518,   519,
     520,   521,   522,   523,   524,   525,   526,   527,   528,   529,
     530,   531,   532,   533,   534,   535,   536,  1052,     0,    46,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   828,     0,     0,   120,   121,   122,   123,
     124,   125,   126,   127,   128,     0,   129,   130,   131,     3,
       4,     0,   584,     0,   132,     0,     0,     0,   589,   134,
     135,     0,   136,   137,   138,   591,   140,   141,   142,   592,
     593,   594,   595,   596,     0,   148,   149,   150,   151,   152,
     153,     0,     0,   154,   155,   156,   157,   600,   601,   160,
       0,   161,   162,   163,   164,   603,     0,   605,     0,   607,
     168,   169,   170,   171,   172,   608,   174,   175,   176,     0,
     177,   178,   179,   180,   181,   182,     0,   611,   184,   185,
     186,   187,   188,   189,   190,   191,   192,   193,   613,   195,
     196,   614,   198,     0,   199,     0,   200,   201,   202,   203,
     204,   205,    14,    15,   206,   207,   208,   209,   210,     0,
       0,   211,   212,   213,   214,   215,   216,   217,     0,   218,
     219,   220,     0,   221,   222,   223,     0,   224,   225,   226,
     227,   624,   229,   230,   231,   232,   233,   625,     0,   235,
       0,   236,   237,   628,   239,     0,   240,     0,   241,   631,
      23,   633,   244,   245,   634,   635,   248,     0,   249,   250,
       0,     0,   639,   640,   253,   254,     0,   255,   256,   257,
     258,   259,   260,   261,   642,   263,   264,   265,   266,     0,
     267,   268,   269,   270,   271,   272,   273,     0,   274,   645,
     646,   277,   278,   279,   280,   281,   647,   648,     0,   650,
       0,   285,   652,   653,   288,   654,   290,   291,   292,   293,
     294,   295,   296,     0,     0,   297,   657,   299,   658,     0,
     301,   302,   303,   304,   305,   306,   307,   308,   660,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,   322,   323,   324,   325,   326,   327,   328,   329,   661,
     662,   663,   333,   334,   335,   336,   664,     0,   338,   339,
     666,   341,     0,   668,   343,   669,   345,   346,   347,     0,
     348,   349,     0,     0,   350,   351,   352,     0,     0,   353,
     354,   675,   676,   357,   677,   678,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,   371,   372,    27,
      28,    29,     0,   373,   374,   683,   684,   377,   378,   685,
     380,   381,   382,     0,   383,   384,   385,   386,   387,   388,
     389,   390,     0,   391,   392,   393,   688,   395,   396,   397,
     398,     0,   399,   400,   401,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,     0,   413,   414,   691,
     416,   417,   418,   692,   420,   421,   422,   423,   424,   425,
     426,   427,   428,   429,   430,   431,   432,    34,   694,   433,
     434,   435,   436,   437,   438,   695,   440,   441,   442,    36,
     697,   444,   445,   698,   447,     0,   448,   449,   450,   451,
     452,   453,   454,   455,   456,   457,   458,   459,   460,   700,
     462,   701,    38,     0,   464,   465,    39,   466,   705,   468,
     469,   470,   471,   472,     0,   473,   707,   708,     0,   476,
       0,   477,   478,   711,   480,   712,     0,   482,   483,   714,
     485,   486,   487,   488,   489,     0,     0,   490,   491,   492,
      41,   493,   494,   495,   496,     0,   497,   498,   499,   500,
     501,  1053,   720,     0,   504,   722,   506,   507,   508,   509,
     510,   511,   512,   513,   514,     0,     0,   515,     0,    45,
     516,   517,   518,   519,   520,   521,   727,   728,   729,   730,
     731,   732,   733,   734,   735,   736,   737,   533,   534,   535,
     536,     0,   119,    46,   573,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   874,     0,     0,
       0,   120,   121,   122,   123,   124,   125,   126,   127,   128,
       0,   129,   130,   131,     0,     0,     0,     0,     0,   132,
       0,     0,     0,   133,   134,   135,     0,   136,   137,   138,
     139,   140,   141,   142,   143,   144,   145,   146,   147,     0,
     148,   149,   150,   151,   152,   153,     0,   812,   154,   155,
     156,   157,   158,   159,   160,     0,   161,   162,   163,   164,
     813,     0,   814,     0,   167,   168,   169,   170,   171,   172,
     173,   174,   175,   176,     0,   177,   178,   179,   180,   181,
     182,     0,   183,   184,   185,   186,   187,   188,   189,   190,
     191,   192,   193,   194,   195,   196,   197,   198,     0,   199,
       0,   200,   201,   202,   203,   204,   205,     0,     0,   206,
     207,   208,   209,   210,     0,     0,   211,   212,   213,   214,
     215,   216,   217,     0,   218,   219,   220,     0,   221,   222,
     223,     0,   224,   225,   226,   227,   228,   229,   230,   231,
     232,   233,   815,     0,   235,     0,   236,   237,   238,   239,
       0,   240,     0,   241,   242,     0,   243,   244,   245,   246,
     247,   248,     0,   249,   250,   816,     0,   251,   252,   253,
     254,     0,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,     0,   267,   268,   269,   270,   271,
     272,   273,     0,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,     0,   284,     0,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   817,     0,
     297,   298,   299,   300,     0,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
     326,   327,   328,   329,   330,   331,   332,   333,   334,   335,
     336,   337,     0,   338,   339,   340,   341,     0,   818,   343,
     344,   345,   346,   347,     0,   348,   349,     0,   819,   350,
     351,   352,     0,     0,   353,   354,   355,   356,   357,   358,
     820,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,     0,     0,     0,     0,   373,   374,
     821,   376,   377,   378,   379,   380,   381,   382,     0,   383,
     384,   385,   386,   387,   388,   389,   390,     0,   391,   392,
     393,   394,   395,   396,   397,   398,     0,   399,   400,   401,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,     0,   413,   414,   415,   416,   417,   418,   419,   822,
     421,   422,   423,   424,   425,   426,   427,   428,   429,   430,
     431,   432,     0,     0,   433,   434,   435,   436,   437,   438,
     439,   440,   441,   442,     0,   443,   444,   445,   446,   447,
       0,   448,   449,   450,   451,   452,   453,   454,   455,   456,
     457,   458,   459,   460,   461,   462,   823,     0,     0,   464,
     465,     0,   466,   467,   468,   469,   470,   471,   472,     0,
     473,   474,   475,     0,   476,     0,   477,   478,   824,   480,
     825,     0,   482,   483,   826,   485,   486,   487,   488,   489,
       0,     0,   490,   491,   492,     0,   493,   494,   495,   496,
       0,   497,   498,   499,   500,   501,   827,   503,     0,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
       0,     0,   515,     0,     0,   516,   517,   518,   519,   520,
     521,   522,   523,   524,   525,   526,   527,   528,   529,   530,
     531,   532,   533,   534,   535,   536,   119,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   828,     0,     0,   120,   121,   122,   123,   124,
     125,   126,   127,   128,     0,   129,   130,   131,     0,     0,
       0,     0,     0,   132,     0,     0,     0,   133,   134,   135,
       0,   136,   137,   138,   139,   140,   141,   142,   143,   144,
     145,   146,   147,     0,   148,   149,   150,   151,   152,   153,
       0,   812,   154,   155,   156,   157,   158,   159,   160,     0,
     161,   162,   163,   164,   813,     0,   814,     0,   167,   168,
     169,   170,   171,   172,   173,   174,   175,   176,     0,   177,
     178,   179,   180,   181,   182,     0,   183,   184,   185,   186,
     187,   188,   189,   190,   191,   192,   193,   194,   195,   196,
     197,   198,     0,   199,     0,   200,   201,   202,   203,   204,
     205,     0,     0,   206,   207,   208,   209,   210,     0,     0,
     211,   212,   213,   214,   215,   216,   217,     0,   218,   219,
     220,     0,   221,   222,   223,     0,   224,   225,   226,   227,
     228,   229,   230,   231,   232,   233,   815,     0,   235,     0,
     236,   237,   238,   239,     0,   240,     0,   241,   242,     0,
     243,   244,   245,   246,   247,   248,     0,   249,   250,     0,
       0,   251,   252,   253,   254,     0,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,     0,   267,
     268,   269,   270,   271,   272,   273,     0,   274,   275,   276,
     277,   278,   279,   280,   281,   282,   283,     0,   284,     0,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,     0,     0,   297,   298,   299,   300,     0,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,   323,   324,   325,   326,   327,   328,   329,   330,   331,
     332,   333,   334,   335,   336,   337,     0,   338,   339,   340,
     341,     0,   818,   343,   344,   345,   346,   347,     0,   348,
     349,     0,     0,   350,   351,   352,     0,     0,   353,   354,
     355,   356,   357,   358,   820,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,     0,     0,
       0,     0,   373,   374,   821,   376,   377,   378,   379,   380,
     381,   382,     0,   383,   384,   385,   386,   387,   388,   389,
     390,     0,   391,   392,   393,   394,   395,   396,   397,   398,
       0,   399,   400,   401,   402,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,     0,   413,   414,   415,   416,
     417,   418,   419,   822,   421,   422,   423,   424,   425,   426,
     427,   428,   429,   430,   431,   432,     0,     0,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,     0,   443,
     444,   445,   446,   447,     0,   448,   449,   450,   451,   452,
     453,   454,   455,   456,   457,   458,   459,   460,   461,   462,
     823,     0,     0,   464,   465,     0,   466,   467,   468,   469,
     470,   471,   472,     0,   473,   474,   475,     0,   476,     0,
     477,   478,   824,   480,   825,     0,   482,   483,   826,   485,
     486,   487,   488,   489,     0,     0,   490,   491,   492,     0,
     493,   494,   495,   496,     0,   497,   498,   499,   500,   501,
     502,   503,     0,   504,   505,   506,   507,   508,   509,   510,
     511,   512,   513,   514,     0,     0,   515,     0,     0,   516,
     517,   518,   519,   520,   521,   522,   523,   524,   525,   526,
     527,   528,   529,   530,   531,   532,   533,   534,   535,   536,
     119,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   874,     0,     0,   120,
     121,   122,   123,   124,   125,   126,   127,   128,     0,   129,
     130,   131,     0,     0,     0,     0,     0,   132,     0,     0,
       0,   133,   134,   135,     0,   136,   137,   138,   139,   140,
     141,   142,   143,   144,   145,   146,   147,     0,   148,   149,
     150,   151,   152,   153,     0,   812,   154,   155,   156,   157,
     158,   159,   160,     0,   161,   162,   163,   164,   813,     0,
     814,     0,   167,   168,   169,   170,   171,   172,   173,   174,
     175,   176,     0,   177,   178,   179,   180,   181,   182,     0,
     183,   184,   185,   186,   187,   188,   189,   190,   191,   192,
     193,   194,   195,   196,   197,   198,     0,   199,     0,   200,
     201,   202,   203,   204,   205,     0,     0,   206,   207,   208,
     209,   210,     0,     0,   211,   212,   213,   214,   215,   216,
     217,     0,   218,   219,   220,     0,   221,   222,   223,     0,
     224,   225,   226,   227,   228,   229,   230,   231,   232,   233,
     815,     0,   235,     0,   236,   237,   238,   239,     0,   240,
       0,   241,   242,     0,   243,   244,   245,   246,   247,   248,
       0,   249,   250,     0,     0,   251,   252,   253,   254,     0,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,     0,   267,   268,   269,   270,   271,   272,   273,
       0,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     283,     0,   284,     0,   285,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,     0,     0,   297,   298,
     299,   300,     0,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323,   324,   325,   326,   327,
     328,   329,   330,   331,   332,   333,   334,   335,   336,   337,
       0,   338,   339,   340,   341,     0,   818,   343,   344,   345,
     346,   347,     0,   348,   349,     0,     0,   350,   351,   352,
       0,     0,   353,   354,   355,   356,   357,   358,   820,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,     0,     0,     0,     0,   373,   374,   821,   376,
     377,   378,   379,   380,   381,   382,     0,   383,   384,   385,
     386,   387,   388,   389,   390,     0,   391,   392,   393,   394,
     395,   396,   397,   398,     0,   399,   400,   401,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,     0,
     413,   414,   415,   416,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,   427,   428,   429,   430,   431,   432,
       0,     0,   433,   434,   435,   436,   437,   438,   439,   440,
     441,   442,     0,   443,   444,   445,   446,   447,     0,   448,
     449,   450,   451,   452,   453,   454,   455,   456,   457,   458,
     459,   460,   461,   462,   823,     0,     0,   464,   465,     0,
     466,   467,   468,   469,   470,   471,   472,     0,   473,   474,
     475,     0,   476,     0,   477,   478,   824,   480,   825,     0,
     482,   483,   826,   485,   486,   487,   488,   489,     0,     0,
     490,   491,   492,     0,   493,   494,   495,   496,     0,   497,
     498,   499,   500,   501,   502,   503,     0,   504,   505,   506,
     507,   508,   509,   510,   511,   512,   513,   514,     0,     0,
     515,     0,     0,   516,   517,   518,   519,   520,   521,   522,
     523,   524,   525,   526,   527,   528,   529,   530,   531,   532,
     533,   534,   535,   536,   545,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    3619,     0,     0,   120,   121,   122,   123,   124,   125,   126,
     127,   128,     0,   129,   130,   131,     0,     0,     0,     0,
       0,   132,     0,     0,     0,     0,   134,   135,     0,   136,
     137,   138,     0,   140,   141,   142,   143,   144,     0,   146,
     147,     0,   148,   149,   150,   151,   152,   153,     0,     0,
     154,   155,   156,   157,   158,   159,   160,     0,   161,   162,
     163,   164,   165,     0,     0,     0,   167,   168,   169,   170,
     171,   172,     0,   174,   175,   176,     0,   177,   178,   179,
     180,   181,   182,     0,     0,   184,   185,   186,   187,   188,
     189,   190,   191,   192,   193,   194,   195,   196,   197,   198,
       0,   199,     0,   200,   201,   202,   203,   204,   205,    14,
      15,   206,   207,   208,   209,   210,     0,     0,   211,   212,
     213,   214,   215,   216,   217,     0,   218,   219,   220,     0,
     221,   222,   223,     0,   224,   225,   226,   227,   228,   229,
     230,   231,   232,   233,   234,     0,   235,     0,   236,   237,
     238,   239,     0,   240,     0,   241,     0,    23,     0,   244,
     245,   546,     0,   248,     0,   249,   250,     0,     0,   251,
     252,   253,   254,     0,   255,   256,   257,   258,   259,   260,
     261,     0,   263,   264,   265,   266,     0,   267,   268,   269,
     270,   271,   272,   273,     0,   274,     0,   276,   277,   278,
     279,   280,   281,   282,   283,     0,   284,     0,   285,     0,
       0,   288,     0,   290,   291,   292,   293,   294,   295,   296,
       0,     0,   297,     0,   299,     0,     0,   301,   302,   303,
     304,   305,   306,   307,   308,   547,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,   329,   330,     0,   332,   333,
     334,   335,   336,   337,     0,   338,   339,     0,   341,     0,
     342,   343,   344,   345,   346,   347,     0,   348,   349,     0,
       0,   350,   351,   352,     0,     0,   353,   354,   355,     0,
     357,     0,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,    27,    28,    29,     0,
     373,   374,   375,     0,   377,   378,   379,   380,   381,   382,
       0,   383,   384,   385,   386,   387,   388,   389,   390,     0,
     391,   392,   393,   394,   395,   396,   397,   398,     0,   399,
     400,   401,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,     0,   413,   414,     0,   416,   417,   418,
     419,   420,   421,   422,   423,   424,   425,   426,   427,   428,
     429,   430,   431,   432,    34,     0,   433,   434,   435,   436,
     437,   438,   439,   440,   441,   442,    36,     0,   444,   445,
     446,   447,     0,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   548,   462,   463,    38,
       0,   464,   465,    39,   466,     0,   468,   469,   470,   471,
     472,     0,   473,   474,   475,     0,   476,     0,   477,   478,
     479,   480,   481,     0,   482,   483,   484,   485,   486,   487,
     488,   489,     0,     0,   490,   491,   492,    41,   493,   494,
     495,   496,     0,   497,   498,   499,   500,   501,   827,   503,
       0,   504,     0,   506,   507,   508,   509,   510,   511,   512,
     513,   514,     0,     0,   515,     0,    45,   516,   517,   518,
     519,   520,   521,   522,   523,   524,   525,   526,   527,   528,
     529,   530,   531,   532,   533,   534,   535,   536,   545,     0,
      46,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   874,     0,     0,   120,   121,   122,
     123,   124,   125,   126,   127,   128,   972,   129,   130,   131,
       0,     0,     0,     0,     0,   132,     0,     0,     0,     0,
     134,   135,     0,   136,   137,   138,     0,   140,   141,   142,
     143,   144,     0,   146,   147,     0,   148,   149,   150,   151,
     152,   153,     0,     0,   154,   155,   156,   157,   158,   159,
     160,     0,   161,   162,   163,   164,   165,     0,     0,     0,
     167,   168,   169,   170,   171,   172,     0,   174,   175,   176,
       0,   177,   178,   179,   180,   181,   182,     0,     0,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,   196,   197,   198,     0,   199,     0,   200,   201,   202,
     203,   204,   205,     0,     0,   206,   207,   208,   209,   210,
       0,     0,   211,   212,   213,   214,   215,   216,   217,     0,
     218,   219,   220,     0,   221,   222,   223,     0,   224,   225,
     226,   227,   228,   229,   230,   231,   232,   233,   234,     0,
     235,     0,   236,   237,   238,   239,     0,   240,     0,   241,
       0,    23,     0,   244,   245,   546,     0,   248,     0,   249,
     250,     0,     0,   251,   252,   253,   254,     0,   255,   256,
     257,   258,   259,   260,   261,     0,   263,   264,   265,   266,
       0,   267,   268,   269,   270,   271,   272,   273,     0,   274,
       0,   276,   277,   278,   279,   280,   281,   282,   283,     0,
     284,     0,   285,     0,     0,   288,     0,   290,   291,   292,
     293,   294,   295,   296,     0,     0,   297,     0,   299,     0,
       0,   301,   302,   303,   304,   305,   306,   307,   308,   547,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,   323,   324,   325,   326,   327,   328,   329,
     330,     0,   332,   333,   334,   335,   336,   337,     0,   338,
     339,     0,   341,     0,   342,   343,   344,   345,   346,   347,
       0,   348,   349,     0,     0,   350,   351,   352,     0,     0,
     353,   354,   355,     0,   357,     0,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
      27,    28,    29,     0,   373,   374,   375,     0,   377,   378,
     379,   380,   381,   382,     0,   383,   384,   385,   386,   387,
     388,   389,   390,     0,   391,   392,   393,   394,   395,   396,
     397,   398,     0,   399,   400,   401,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,     0,   413,   414,
       0,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,    34,     0,
     433,   434,   435,   436,   437,   438,   439,   440,   441,   442,
       0,     0,   444,   445,   446,   447,     0,   448,   449,   450,
     451,   452,   453,   454,   455,   456,   457,   458,   459,   460,
     548,   462,   463,     0,     0,   464,   465,    39,   466,     0,
     468,   469,   470,   471,   472,     0,   473,   973,   475,     0,
     476,     0,   974,   478,   479,   480,   481,     0,   482,   483,
     484,   485,   486,   487,   488,   489,     0,     0,   490,   491,
     492,    41,   493,   494,   495,   496,     0,   497,   498,   499,
     500,   501,   827,   503,     0,   504,     0,   506,   507,   508,
     509,   510,   511,   512,   513,   514,     0,     0,   515,     0,
      45,   516,   517,   518,   519,   520,   521,   522,   523,   524,
     525,   526,   527,   528,   529,   530,   531,   532,   533,   534,
     535,   536,   545,     0,    46,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   874,     0,
       0,   120,   121,   122,   123,   124,   125,   126,   127,   128,
       0,   129,   130,   131,     0,     0,     0,     0,     0,   132,
       0,     0,     0,     0,   134,   135,     0,   136,   137,   138,
       0,   140,   141,   142,   143,   144,     0,   146,   147,     0,
     148,   149,   150,   151,   152,   153,     0,     0,   154,   155,
     156,   157,   158,   159,   160,     0,   161,   162,   163,   164,
     165,     0,     0,     0,   167,   168,   169,   170,   171,   172,
       0,   174,   175,   176,     0,   177,   178,   179,   180,   181,
     182,     0,     0,   184,   185,   186,   187,   188,   189,   190,
     191,   192,   193,   194,   195,   196,   197,   198,     0,   199,
       0,   200,   201,   202,   203,   204,   205,     0,     0,   206,
     207,   208,   209,   210,     0,     0,   211,   212,   213,   214,
     215,   216,   217,     0,   218,   219,   220,     0,   221,   222,
     223,     0,   224,   225,   226,   227,   228,   229,   230,   231,
     232,   233,   234,     0,   235,     0,   236,   237,   238,   239,
       0,   240,     0,   241,     0,    23,     0,   244,   245,   546,
       0,   248,     0,   249,   250,     0,     0,   251,   252,   253,
     254,     0,   255,   256,   257,   258,   259,   260,   261,     0,
     263,   264,   265,   266,     0,   267,   268,   269,   270,   271,
     272,   273,     0,   274,     0,   276,   277,   278,   279,   280,
     281,   282,   283,     0,   284,     0,   285,     0,     0,   288,
       0,   290,   291,   292,   293,   294,   295,   296,     0,     0,
     297,     0,   299,     0,     0,   301,   302,   303,   304,   305,
     306,   307,   308,   547,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
     326,   327,   328,   329,   330,     0,   332,   333,   334,   335,
     336,   337,     0,   338,   339,     0,   341,     0,   342,   343,
     344,   345,   346,   347,     0,   348,   349,     0,     0,   350,
     351,   352,     0,     0,   353,   354,   355,     0,   357,     0,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,    27,    28,    29,     0,   373,   374,
     375,     0,   377,   378,   379,   380,   381,   382,     0,   383,
     384,   385,   386,   387,   388,   389,   390,     0,   391,   392,
     393,   394,   395,   396,   397,   398,     0,   399,   400,   401,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,     0,   413,   414,     0,   416,   417,   418,   419,   420,
     421,   422,   423,   424,   425,   426,   427,   428,   429,   430,
     431,   432,    34,     0,   433,   434,   435,   436,   437,   438,
     439,   440,   441,   442,     0,     0,   444,   445,   446,   447,
       0,   448,   449,   450,   451,   452,   453,   454,   455,   456,
     457,   458,   459,   460,   548,   462,   463,     0,     0,   464,
     465,    39,   466,     0,   468,   469,   470,   471,   472,     0,
     473,   474,   475,     0,   476,     0,   477,   478,   479,   480,
     481,     0,   482,   483,   484,   485,   486,   487,   488,   489,
       0,     0,   490,   491,   492,    41,   493,   494,   495,   496,
       0,   497,   498,   499,   500,   501,   827,   503,     0,   504,
       0,   506,   507,   508,   509,   510,   511,   512,   513,   514,
       0,     0,   515,     0,    45,   516,   517,   518,   519,   520,
     521,   522,   523,   524,   525,   526,   527,   528,   529,   530,
     531,   532,   533,   534,   535,   536,     0,   545,    46,   573,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   874,     0,     0,     0,   120,   121,   122,   123,
     124,   125,   126,   127,   128,     0,   129,   130,   131,     0,
       0,     0,     0,     0,   132,     0,     0,     0,     0,   134,
     135,     0,   136,   137,   138,     0,   140,   141,   142,   143,
     144,     0,   146,   147,     0,   148,   149,   150,   151,   152,
     153,     0,     0,   154,   155,   156,   157,   158,   159,   160,
       0,   161,   162,   163,   164,   165,     0,     0,     0,   167,
     168,   169,   170,   171,   172,     0,   174,   175,   176,     0,
     177,   178,   179,   180,   181,   182,     0,     0,   184,   185,
     186,   187,   188,   189,   190,   191,   192,   193,   194,   195,
     196,   197,   198,     0,   199,     0,   200,   201,   202,   203,
     204,   205,     0,     0,   206,   207,   208,   209,   210,     0,
       0,   211,   212,   213,   214,   215,   216,   217,     0,   218,
     219,   220,     0,   221,   222,   223,     0,   224,   225,   226,
     227,   228,   229,   230,   231,   232,   233,   234,     0,   235,
       0,   236,   237,   238,   239,     0,   240,     0,   241,     0,
       0,     0,   244,   245,   546,     0,   248,     0,   249,   250,
       0,     0,   251,   252,   253,   254,     0,   255,   256,   257,
     258,   259,   260,   261,     0,   263,   264,   265,   266,     0,
     267,   268,   269,   270,   271,   272,   273,     0,   274,     0,
     276,   277,   278,   279,   280,   281,   282,   283,     0,   284,
       0,   285,     0,     0,   288,     0,   290,   291,   292,   293,
     294,   295,   296,     0,     0,   297,     0,   299,     0,     0,
     301,   302,   303,   304,   305,   306,   307,   308,   547,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,   322,   323,   324,   325,   326,   327,   328,   329,   330,
       0,   332,   333,   334,   335,   336,   337,     0,   338,   339,
       0,   341,     0,   342,   343,   344,   345,   346,   347,     0,
     348,   349,     0,     0,   350,   351,   352,     0,     0,   353,
     354,   355,     0,   357,     0,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,   371,   372,     0,
       0,     0,     0,   373,   374,   375,     0,   377,   378,   379,
     380,   381,   382,     0,   383,   384,   385,   386,   387,   388,
     389,   390,     0,   391,   392,   393,   394,   395,   396,   397,
     398,     0,   399,   400,   401,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,     0,   413,   414,     0,
     416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,   428,   429,   430,   431,   432,     0,     0,   433,
     434,   435,   436,   437,   438,   439,   440,   441,   442,     0,
       0,   444,   445,   446,   447,     0,   448,   449,   450,   451,
     452,   453,   454,   455,   456,   457,   458,   459,   460,   548,
     462,   463,     0,     0,   464,   465,     0,   466,     0,   468,
     469,   470,   471,   472,     0,   473,   474,   475,     0,   476,
       0,   477,   478,   479,   480,   481,     0,   482,   483,   484,
     485,   486,   487,   488,   489,     0,     0,   490,   491,   492,
       0,   493,   494,   495,   496,     0,   497,   498,   499,   500,
     501,   502,   503,     0,   504,     0,   506,   507,   508,   509,
     510,   511,   512,   513,   514,     0,     0,   515,     0,     0,
     516,   517,   518,   519,   520,   521,   522,   523,   524,   525,
     526,   527,   528,   529,   530,   531,   532,   533,   534,   535,
     536,   545,     0,   573,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1076,     0,     0,
     120,   121,   122,   123,   124,   125,   126,   127,   128,     0,
     129,   130,   131,     0,     0,     0,     0,     0,   132,     0,
       0,     0,     0,   134,   135,     0,   136,   137,   138,     0,
     140,   141,   142,   143,   144,     0,   146,   147,     0,   148,
     149,   150,   151,   152,   153,     0,     0,   154,   155,   156,
     157,   158,   159,   160,     0,   161,   162,   163,   164,   165,
       0,     0,     0,   167,   168,   169,   170,   171,   172,     0,
     174,   175,   176,     0,   177,   178,   179,   180,   181,   182,
       0,     0,   184,   185,   186,   187,   188,   189,   190,   191,
     192,   193,   194,   195,   196,   197,   198,     0,   199,     0,
     200,   201,   202,   203,   204,   205,     0,     0,   206,   207,
     208,   209,   210,     0,     0,   211,   212,   213,   214,   215,
     216,   217,     0,   218,   219,   220,     0,   221,   222,   223,
       0,   224,   225,   226,   227,   228,   229,   230,   231,   232,
     233,   234,     0,   235,     0,   236,   237,   238,   239,     0,
     240,     0,   241,     0,     0,     0,   244,   245,   546,     0,
     248,     0,   249,   250,     0,     0,   251,   252,   253,   254,
       0,   255,   256,   257,   258,   259,   260,   261,     0,   263,
     264,   265,   266,     0,   267,   268,   269,   270,   271,   272,
     273,     0,   274,     0,   276,   277,   278,   279,   280,   281,
     282,   283,     0,   284,     0,   285,     0,     0,   288,     0,
     290,   291,   292,   293,   294,   295,   296,     0,     0,   297,
       0,   299,     0,     0,   301,   302,   303,   304,   305,   306,
     307,   308,   547,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,   323,   324,   325,   326,
     327,   328,   329,   330,     0,   332,   333,   334,   335,   336,
     337,     0,   338,   339,     0,   341,     0,   342,   343,   344,
     345,   346,   347,     0,   348,   349,     0,     0,   350,   351,
     352,     0,     0,   353,   354,   355,     0,   357,     0,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
     370,   371,   372,     0,     0,     0,     0,   373,   374,   375,
       0,   377,   378,   379,   380,   381,   382,     0,   383,   384,
     385,   386,   387,   388,   389,   390,     0,   391,   392,   393,
     394,   395,   396,   397,   398,     0,   399,   400,   401,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
       0,   413,   414,     0,   416,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,   428,   429,   430,   431,
     432,     0,     0,   433,   434,   435,   436,   437,   438,   439,
     440,   441,   442,     0,     0,   444,   445,   446,   447,     0,
     448,   449,   450,   451,   452,   453,   454,   455,   456,   457,
     458,   459,   460,   548,   462,   463,     0,     0,   464,   465,
       0,   466,     0,   468,   469,   470,   471,   472,     0,   473,
     474,   475,     0,   476,     0,   477,   478,   479,   480,   481,
       0,   482,   483,   484,   485,   486,   487,   488,   489,     0,
       0,   490,   491,   492,     0,   493,   494,   495,   496,     0,
     497,   498,   499,   500,   501,   502,   503,     0,   504,     0,
     506,   507,   508,   509,   510,   511,   512,   513,   514,     0,
       0,   515,     0,     0,   516,   517,   518,   519,   520,   521,
     522,   523,   524,   525,   526,   527,   528,   529,   530,   531,
     532,   533,   534,   535,   536,   545,     0,   573,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1558,     0,     0,   120,   121,   122,   123,   124,   125,
     126,   127,   128,     0,   129,   130,   131,     0,     0,     0,
       0,     0,   132,     0,     0,     0,     0,   134,   135,     0,
     136,   137,   138,     0,   140,   141,   142,   143,   144,     0,
     146,   147,     0,   148,   149,   150,   151,   152,   153,     0,
       0,   154,   155,   156,   157,   158,   159,   160,     0,   161,
     162,   163,   164,   165,     0,     0,     0,   167,   168,   169,
     170,   171,   172,     0,   174,   175,   176,     0,   177,   178,
     179,   180,   181,   182,     0,     0,   184,   185,   186,   187,
     188,   189,   190,   191,   192,   193,   194,   195,   196,   197,
     198,     0,   199,     0,   200,   201,   202,   203,   204,   205,
       0,     0,   206,   207,   208,   209,   210,     0,     0,   211,
     212,   213,   214,   215,   216,   217,     0,   218,   219,   220,
       0,   221,   222,   223,     0,   224,   225,   226,   227,   228,
     229,   230,   231,   232,   233,   234,     0,   235,     0,   236,
     237,   238,   239,     0,   240,     0,   241,     0,     0,     0,
     244,   245,   546,     0,   248,     0,   249,   250,     0,     0,
     251,   252,   253,   254,     0,   255,   256,   257,   258,   259,
     260,   261,     0,   263,   264,   265,   266,     0,   267,   268,
     269,   270,   271,   272,   273,     0,   274,     0,   276,   277,
     278,   279,   280,   281,   282,   283,     0,   284,     0,   285,
       0,     0,   288,     0,   290,   291,   292,   293,   294,   295,
     296,     0,     0,   297,     0,   299,     0,     0,   301,   302,
     303,   304,   305,   306,   307,   308,   547,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
     323,   324,   325,   326,   327,   328,   329,   330,     0,   332,
     333,   334,   335,   336,   337,     0,   338,   339,     0,   341,
       0,   342,   343,   344,   345,   346,   347,     0,   348,   349,
       0,     0,   350,   351,   352,     0,     0,   353,   354,   355,
       0,   357,     0,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,     0,     0,     0,
       0,   373,   374,   375,     0,   377,   378,   379,   380,   381,
     382,     0,   383,   384,   385,   386,   387,   388,   389,   390,
       0,   391,   392,   393,   394,   395,   396,   397,   398,     0,
     399,   400,   401,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,     0,   413,   414,     0,   416,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   429,   430,   431,   432,     0,     0,   433,   434,   435,
     436,   437,   438,   439,   440,   441,   442,     0,     0,   444,
     445,   446,   447,     0,   448,   449,   450,   451,   452,   453,
     454,   455,   456,   457,   458,   459,   460,   548,   462,   463,
       0,     0,   464,   465,     0,   466,     0,   468,   469,   470,
     471,   472,     0,   473,   474,   475,     0,   476,     0,   477,
     478,   479,   480,   481,     0,   482,   483,   484,   485,   486,
     487,   488,   489,     0,     0,   490,   491,   492,     0,   493,
     494,   495,   496,     0,   497,   498,   499,   500,   501,   502,
     503,     0,   504,     0,   506,   507,   508,   509,   510,   511,
     512,   513,   514,     0,     0,   515,     0,     0,   516,   517,
     518,   519,   520,   521,   522,   523,   524,   525,   526,   527,
     528,   529,   530,   531,   532,   533,   534,   535,   536,   545,
       0,   573,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  2311,     0,     0,   120,   121,
     122,   123,   124,   125,   126,   127,   128,     0,   129,   130,
     131,     0,     0,     0,     0,     0,   132,     0,     0,     0,
       0,   134,   135,     0,   136,   137,   138,     0,   140,   141,
     142,   143,   144,     0,   146,   147,     0,   148,   149,   150,
     151,   152,   153,     0,     0,   154,   155,   156,   157,   158,
     159,   160,     0,   161,   162,   163,   164,   165,     0,     0,
       0,   167,   168,   169,   170,   171,   172,     0,   174,   175,
     176,     0,   177,   178,   179,   180,   181,   182,     0,     0,
     184,   185,   186,   187,   188,   189,   190,   191,   192,   193,
     194,   195,   196,   197,   198,     0,   199,     0,   200,   201,
     202,   203,   204,   205,     0,     0,   206,   207,   208,   209,
     210,     0,     0,   211,   212,   213,   214,   215,   216,   217,
       0,   218,   219,   220,     0,   221,   222,   223,     0,   224,
     225,   226,   227,   228,   229,   230,   231,   232,   233,   234,
       0,   235,     0,   236,   237,   238,   239,     0,   240,     0,
     241,     0,     0,     0,   244,   245,   546,     0,   248,     0,
     249,   250,     0,     0,   251,   252,   253,   254,     0,   255,
     256,   257,   258,   259,   260,   261,     0,   263,   264,   265,
     266,     0,   267,   268,   269,   270,   271,   272,   273,     0,
     274,     0,   276,   277,   278,   279,   280,   281,   282,   283,
       0,   284,     0,   285,     0,     0,   288,     0,   290,   291,
     292,   293,   294,   295,   296,     0,     0,   297,     0,   299,
       0,     0,   301,   302,   303,   304,   305,   306,   307,   308,
     547,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     329,   330,     0,   332,   333,   334,   335,   336,   337,     0,
     338,   339,     0,   341,     0,   342,   343,   344,   345,   346,
     347,     0,   348,   349,     0,     0,   350,   351,   352,     0,
       0,   353,   354,   355,     0,   357,     0,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,     0,     0,     0,     0,   373,   374,   375,     0,   377,
     378,   379,   380,   381,   382,     0,   383,   384,   385,   386,
     387,   388,   389,   390,     0,   391,   392,   393,   394,   395,
     396,   397,   398,     0,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,     0,   413,
     414,     0,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,   428,   429,   430,   431,   432,     0,
       0,   433,   434,   435,   436,   437,   438,   439,   440,   441,
     442,     0,     0,   444,   445,   446,   447,     0,   448,   449,
     450,   451,   452,   453,   454,   455,   456,   457,   458,   459,
     460,   548,   462,   463,     0,     0,   464,   465,     0,   466,
       0,   468,   469,   470,   471,   472,     0,   473,   474,   475,
       0,   476,     0,   477,   478,   479,   480,   481,     0,   482,
     483,   484,   485,   486,   487,   488,   489,     0,     0,   490,
     491,   492,     0,   493,   494,   495,   496,     0,   497,   498,
     499,   500,   501,   502,   503,     0,   504,     0,   506,   507,
     508,   509,   510,   511,   512,   513,   514,     0,     0,   515,
       0,     0,   516,   517,   518,   519,   520,   521,   522,   523,
     524,   525,   526,   527,   528,   529,   530,   531,   532,   533,
     534,   535,   536,   545,     0,   573,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  2547,
       0,     0,   120,   121,   122,   123,   124,   125,   126,   127,
     128,     0,   129,   130,   131,     0,     0,     0,     0,     0,
     132,     0,     0,     0,     0,   134,   135,     0,   136,   137,
     138,     0,   140,   141,   142,   143,   144,     0,   146,   147,
       0,   148,   149,   150,   151,   152,   153,     0,     0,   154,
     155,   156,   157,   158,   159,   160,     0,   161,   162,   163,
     164,   165,     0,     0,     0,   167,   168,   169,   170,   171,
     172,     0,   174,   175,   176,     0,   177,   178,   179,   180,
     181,   182,     0,     0,   184,   185,   186,   187,   188,   189,
     190,   191,   192,   193,   194,   195,   196,   197,   198,     0,
     199,     0,   200,   201,   202,   203,   204,   205,     0,     0,
     206,   207,   208,   209,   210,     0,     0,   211,   212,   213,
     214,   215,   216,   217,     0,   218,   219,   220,     0,   221,
     222,   223,     0,   224,   225,   226,   227,   228,   229,   230,
     231,   232,   233,   234,     0,   235,     0,   236,   237,   238,
     239,     0,   240,     0,   241,     0,     0,     0,   244,   245,
     546,     0,   248,     0,   249,   250,     0,     0,   251,   252,
     253,   254,     0,   255,   256,   257,   258,   259,   260,   261,
       0,   263,   264,   265,   266,     0,   267,   268,   269,   270,
     271,   272,   273,     0,   274,     0,   276,   277,   278,   279,
     280,   281,   282,   283,     0,   284,     0,   285,     0,     0,
     288,     0,   290,   291,   292,   293,   294,   295,   296,     0,
       0,   297,     0,   299,     0,     0,   301,   302,   303,   304,
     305,   306,   307,   308,   547,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,     0,   332,   333,   334,
     335,   336,   337,     0,   338,   339,     0,   341,     0,   342,
     343,   344,   345,   346,   347,     0,   348,   349,     0,     0,
     350,   351,   352,     0,     0,   353,   354,   355,     0,   357,
       0,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,   371,   372,     0,     0,     0,     0,   373,
     374,   375,     0,   377,   378,   379,   380,   381,   382,     0,
     383,   384,   385,   386,   387,   388,   389,   390,     0,   391,
     392,   393,   394,   395,   396,   397,   398,     0,   399,   400,
     401,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,     0,   413,   414,     0,   416,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,   428,   429,
     430,   431,   432,     0,     0,   433,   434,   435,   436,   437,
     438,   439,   440,   441,   442,     0,     0,   444,   445,   446,
     447,     0,   448,   449,   450,   451,   452,   453,   454,   455,
     456,   457,   458,   459,   460,   548,   462,   463,     0,     0,
     464,   465,     0,   466,     0,   468,   469,   470,   471,   472,
       0,   473,   474,   475,     0,   476,     0,   477,   478,   479,
     480,   481,     0,   482,   483,   484,   485,   486,   487,   488,
     489,     0,     0,   490,   491,   492,     0,   493,   494,   495,
     496,     0,   497,   498,   499,   500,   501,   502,   503,     0,
     504,     0,   506,   507,   508,   509,   510,   511,   512,   513,
     514,     0,     0,   515,     0,     0,   516,   517,   518,   519,
     520,   521,   522,   523,   524,   525,   526,   527,   528,   529,
     530,   531,   532,   533,   534,   535,   536,   545,     0,   573,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  2709,     0,     0,   120,   121,   122,   123,
     124,   125,   126,   127,   128,     0,   129,   130,   131,     0,
       0,     0,     0,     0,   132,     0,     0,     0,     0,   134,
     135,     0,   136,   137,   138,     0,   140,   141,   142,   143,
     144,     0,   146,   147,     0,   148,   149,   150,   151,   152,
     153,     0,     0,   154,   155,   156,   157,   158,   159,   160,
       0,   161,   162,   163,   164,   165,     0,     0,     0,   167,
     168,   169,   170,   171,   172,     0,   174,   175,   176,     0,
     177,   178,   179,   180,   181,   182,     0,     0,   184,   185,
     186,   187,   188,   189,   190,   191,   192,   193,   194,   195,
     196,   197,   198,     0,   199,     0,   200,   201,   202,   203,
     204,   205,     0,     0,   206,   207,   208,   209,   210,     0,
       0,   211,   212,   213,   214,   215,   216,   217,     0,   218,
     219,   220,     0,   221,   222,   223,     0,   224,   225,   226,
     227,   228,   229,   230,   231,   232,   233,   234,     0,   235,
       0,   236,   237,   238,   239,     0,   240,     0,   241,     0,
       0,     0,   244,   245,   546,     0,   248,     0,   249,   250,
       0,     0,   251,   252,   253,   254,     0,   255,   256,   257,
     258,   259,   260,   261,     0,   263,   264,   265,   266,     0,
     267,   268,   269,   270,   271,   272,   273,     0,   274,     0,
     276,   277,   278,   279,   280,   281,   282,   283,     0,   284,
       0,   285,     0,     0,   288,     0,   290,   291,   292,   293,
     294,   295,   296,     0,     0,   297,     0,   299,     0,     0,
     301,   302,   303,   304,   305,   306,   307,   308,   547,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,   322,   323,   324,   325,   326,   327,   328,   329,   330,
       0,   332,   333,   334,   335,   336,   337,     0,   338,   339,
       0,   341,     0,   342,   343,   344,   345,   346,   347,     0,
     348,   349,     0,     0,   350,   351,   352,     0,     0,   353,
     354,   355,     0,   357,     0,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,   371,   372,     0,
       0,     0,     0,   373,   374,   375,     0,   377,   378,   379,
     380,   381,   382,     0,   383,   384,   385,   386,   387,   388,
     389,   390,     0,   391,   392,   393,   394,   395,   396,   397,
     398,     0,   399,   400,   401,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,     0,   413,   414,     0,
     416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,   428,   429,   430,   431,   432,     0,     0,   433,
     434,   435,   436,   437,   438,   439,   440,   441,   442,     0,
       0,   444,   445,   446,   447,     0,   448,   449,   450,   451,
     452,   453,   454,   455,   456,   457,   458,   459,   460,   548,
     462,   463,     0,     0,   464,   465,     0,   466,     0,   468,
     469,   470,   471,   472,     0,   473,   474,   475,     0,   476,
       0,   477,   478,   479,   480,   481,     0,   482,   483,   484,
     485,   486,   487,   488,   489,     0,     0,   490,   491,   492,
       0,   493,   494,   495,   496,     0,   497,   498,   499,   500,
     501,   502,   503,     0,   504,     0,   506,   507,   508,   509,
     510,   511,   512,   513,   514,     0,     0,   515,     0,     0,
     516,   517,   518,   519,   520,   521,   522,   523,   524,   525,
     526,   527,   528,   529,   530,   531,   532,   533,   534,   535,
     536,   545,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  3459,     0,     0,
     120,   121,   122,   123,   124,   125,   126,   127,   128,     0,
     129,   130,   131,     0,     0,     0,     0,     0,   132,     0,
       0,     0,     0,   134,   135,     0,   136,   137,   138,     0,
     140,   141,   142,   143,   144,     0,   146,   147,     0,   148,
     149,   150,   151,   152,   153,     0,     0,   154,   155,   156,
     157,   158,   159,   160,     0,   161,   162,   163,   164,   165,
       0,     0,     0,   167,   168,   169,   170,   171,   172,     0,
     174,   175,   176,     0,   177,   178,   179,   180,   181,   182,
       0,     0,   184,   185,   186,   187,   188,   189,   190,   191,
     192,   193,   194,   195,   196,   197,   198,     0,   199,     0,
     200,   201,   202,   203,   204,   205,     0,     0,   206,   207,
     208,   209,   210,     0,     0,   211,   212,   213,   214,   215,
     216,   217,     0,   218,   219,   220,     0,   221,   222,   223,
       0,   224,   225,   226,   227,   228,   229,   230,   231,   232,
     233,   234,     0,   235,     0,   236,   237,   238,   239,     0,
     240,     0,   241,     0,     0,     0,   244,   245,   546,     0,
     248,     0,   249,   250,     0,     0,   251,   252,   253,   254,
       0,   255,   256,   257,   258,   259,   260,   261,     0,   263,
     264,   265,   266,     0,   267,   268,   269,   270,   271,   272,
     273,     0,   274,     0,   276,   277,   278,   279,   280,   281,
     282,   283,     0,   284,     0,   285,     0,     0,   288,     0,
     290,   291,   292,   293,   294,   295,   296,     0,     0,   297,
       0,   299,     0,     0,   301,   302,   303,   304,   305,   306,
     307,   308,   547,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,   323,   324,   325,   326,
     327,   328,   329,   330,     0,   332,   333,   334,   335,   336,
     337,     0,   338,   339,     0,   341,     0,   342,   343,   344,
     345,   346,   347,     0,   348,   349,     0,     0,   350,   351,
     352,     0,     0,   353,   354,   355,     0,   357,     0,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
     370,   371,   372,     0,     0,     0,     0,   373,   374,   375,
       0,   377,   378,   379,   380,   381,   382,     0,   383,   384,
     385,   386,   387,   388,   389,   390,     0,   391,   392,   393,
     394,   395,   396,   397,   398,     0,   399,   400,   401,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
       0,   413,   414,     0,   416,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,   428,   429,   430,   431,
     432,     0,     0,   433,   434,   435,   436,   437,   438,   439,
     440,   441,   442,     0,     0,   444,   445,   446,   447,     0,
     448,   449,   450,   451,   452,   453,   454,   455,   456,   457,
     458,   459,   460,   548,   462,   463,     0,     0,   464,   465,
       0,   466,     0,   468,   469,   470,   471,   472,     0,   473,
     474,   475,     0,   476,     0,   477,   478,   479,   480,   481,
       0,   482,   483,   484,   485,   486,   487,   488,   489,     0,
       0,   490,   491,   492,     0,   493,   494,   495,   496,     0,
     497,   498,   499,   500,   501,   502,   503,     0,   504,     0,
     506,   507,   508,   509,   510,   511,   512,   513,   514,     0,
       0,   515,     0,     0,   516,   517,   518,   519,   520,   521,
     522,   523,   524,   525,   526,   527,   528,   529,   530,   531,
     532,   533,   534,   535,   536,   545,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  2160,     0,     0,   120,   121,   122,   123,   124,   125,
     126,   127,   128,     0,   129,   130,   131,     0,     0,     0,
       0,     0,   132,     0,     0,     0,     0,   134,   135,     0,
     136,   137,   138,     0,   140,   141,   142,   143,   144,     0,
     146,   147,     0,   148,   149,   150,   151,   152,   153,     0,
       0,   154,   155,   156,   157,   158,   159,   160,     0,   161,
     162,   163,   164,   165,     0,     0,     0,   167,   168,   169,
     170,   171,   172,     0,   174,   175,   176,     0,   177,   178,
     179,   180,   181,   182,     0,     0,   184,   185,   186,   187,
     188,   189,   190,   191,   192,   193,   194,   195,   196,   197,
     198,     0,   199,     0,   200,   201,   202,   203,   204,   205,
       0,     0,   206,   207,   208,   209,   210,     0,     0,   211,
     212,   213,   214,   215,   216,   217,     0,   218,   219,   220,
       0,   221,   222,   223,     0,   224,   225,   226,   227,   228,
     229,   230,   231,   232,   233,   234,     0,   235,     0,   236,
     237,   238,   239,     0,   240,     0,   241,     0,     0,     0,
     244,   245,   546,     0,   248,     0,   249,   250,     0,     0,
     251,   252,   253,   254,     0,   255,   256,   257,   258,   259,
     260,   261,     0,   263,   264,   265,   266,     0,   267,   268,
     269,   270,   271,   272,   273,     0,   274,     0,   276,   277,
     278,   279,   280,   281,   282,   283,     0,   284,     0,   285,
       0,     0,   288,     0,   290,   291,   292,   293,   294,   295,
     296,     0,     0,   297,     0,   299,     0,     0,   301,   302,
     303,   304,   305,   306,   307,   308,   547,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
     323,   324,   325,   326,   327,   328,   329,   330,     0,   332,
     333,   334,   335,   336,   337,     0,   338,   339,     0,   341,
       0,   342,   343,   344,   345,   346,   347,     0,   348,   349,
       0,     0,   350,   351,   352,     0,     0,   353,   354,   355,
       0,   357,     0,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,     0,     0,     0,
       0,   373,   374,   375,     0,   377,   378,   379,   380,   381,
     382,     0,   383,   384,   385,   386,   387,   388,   389,   390,
       0,   391,   392,   393,   394,   395,   396,   397,   398,     0,
     399,   400,   401,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,     0,   413,   414,     0,   416,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   429,   430,   431,   432,     0,     0,   433,   434,   435,
     436,   437,   438,   439,   440,   441,   442,     0,     0,   444,
     445,   446,   447,     0,   448,   449,   450,   451,   452,   453,
     454,   455,   456,   457,   458,   459,   460,   548,   462,   463,
       0,     0,   464,   465,     0,   466,     0,   468,   469,   470,
     471,   472,     0,   473,   474,   475,     0,   476,     0,   477,
     478,   479,   480,   481,     0,   482,   483,   484,   485,   486,
     487,   488,   489,     0,     0,   490,   491,   492,     0,   493,
     494,   495,   496,     0,   497,   498,   499,   500,   501,   502,
     503,     0,   504,     0,   506,   507,   508,   509,   510,   511,
     512,   513,   514,     0,     0,   515,     0,     0,   516,   517,
     518,   519,   520,   521,   522,   523,   524,   525,   526,   527,
     528,   529,   530,   531,   532,   533,   534,   535,   536,   545,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  2271,     0,     0,   120,   121,
     122,   123,   124,   125,   126,   127,   128,     0,   129,   130,
     131,     0,     0,     0,     0,     0,   132,     0,     0,     0,
       0,   134,   135,     0,   136,   137,   138,     0,   140,   141,
     142,   143,   144,     0,   146,   147,     0,   148,   149,   150,
     151,   152,   153,     0,     0,   154,   155,   156,   157,   158,
     159,   160,     0,   161,   162,   163,   164,   165,     0,     0,
       0,   167,   168,   169,   170,   171,   172,     0,   174,   175,
     176,     0,   177,   178,   179,   180,   181,   182,     0,     0,
     184,   185,   186,   187,   188,   189,   190,   191,   192,   193,
     194,   195,   196,   197,   198,     0,   199,     0,   200,   201,
     202,   203,   204,   205,     0,     0,   206,   207,   208,   209,
     210,     0,     0,   211,   212,   213,   214,   215,   216,   217,
       0,   218,   219,   220,     0,   221,   222,   223,     0,   224,
     225,   226,   227,   228,   229,   230,   231,   232,   233,   234,
       0,   235,     0,   236,   237,   238,   239,     0,   240,     0,
     241,     0,     0,     0,   244,   245,   546,     0,   248,     0,
     249,   250,     0,     0,   251,   252,   253,   254,     0,   255,
     256,   257,   258,   259,   260,   261,     0,   263,   264,   265,
     266,     0,   267,   268,   269,   270,   271,   272,   273,     0,
     274,     0,   276,   277,   278,   279,   280,   281,   282,   283,
       0,   284,     0,   285,     0,     0,   288,     0,   290,   291,
     292,   293,   294,   295,   296,     0,     0,   297,     0,   299,
       0,     0,   301,   302,   303,   304,   305,   306,   307,   308,
     547,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     329,   330,     0,   332,   333,   334,   335,   336,   337,     0,
     338,   339,     0,   341,     0,   342,   343,   344,   345,   346,
     347,     0,   348,   349,     0,     0,   350,   351,   352,     0,
       0,   353,   354,   355,     0,   357,     0,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,     0,     0,     0,     0,   373,   374,   375,     0,   377,
     378,   379,   380,   381,   382,     0,   383,   384,   385,   386,
     387,   388,   389,   390,     0,   391,   392,   393,   394,   395,
     396,   397,   398,     0,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,     0,   413,
     414,     0,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,   428,   429,   430,   431,   432,     0,
       0,   433,   434,   435,   436,   437,   438,   439,   440,   441,
     442,     0,     0,   444,   445,   446,   447,     0,   448,   449,
     450,   451,   452,   453,   454,   455,   456,   457,   458,   459,
     460,   548,   462,   463,     0,     0,   464,   465,     0,   466,
       0,   468,   469,   470,   471,   472,     0,   473,   474,   475,
       0,   476,     0,   477,   478,   479,   480,   481,     0,   482,
     483,   484,   485,   486,   487,   488,   489,     0,     0,   490,
     491,   492,     0,   493,   494,   495,   496,     0,   497,   498,
     499,   500,   501,   502,   503,     0,   504,     0,   506,   507,
     508,   509,   510,   511,   512,   513,   514,     0,     0,   515,
       0,     0,   516,   517,   518,   519,   520,   521,   522,   523,
     524,   525,   526,   527,   528,   529,   530,   531,   532,   533,
     534,   535,   536,   893,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  3258,
       0,     0,   120,   121,   122,   123,     0,   125,   126,   127,
     128,     0,   129,   130,   131,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   134,   135,     0,   136,   137,
     138,     0,   140,   141,   142,   894,   895,     0,   896,   897,
       0,   148,   149,   150,   151,   152,   153,     0,     0,   154,
     155,   156,   157,   898,   899,   160,     0,   161,   162,   163,
     164,   900,     0,     0,     0,     0,   168,   169,   170,   171,
     172,     0,   174,   175,   176,     0,   177,   178,   179,   180,
     181,     0,     0,     0,   184,   185,   186,   187,   188,   189,
     190,   191,   192,   193,   901,   195,   196,   902,   198,     0,
     199,     0,   200,   201,   202,   203,   204,   205,    14,    15,
       0,   207,   208,   209,   210,     0,     0,   211,   212,   213,
     214,   215,     0,     0,     0,   218,   219,   220,     0,   221,
     222,   223,     0,   224,   225,   226,   227,   903,   229,   230,
     231,   232,   233,   904,     0,   235,     0,   236,   237,   905,
     239,     0,   240,     0,   241,     0,    23,     0,   244,   245,
     906,     0,   248,     0,   249,     0,     0,     0,   907,   908,
       0,   254,     0,   255,   256,   257,   258,   259,   260,   261,
       0,   263,   264,   265,   266,     0,   267,   268,   269,   270,
     271,   272,   273,     0,   274,     0,   909,   277,   278,   279,
     280,   281,   910,   911,     0,   912,     0,   285,     0,     0,
     288,     0,   290,     0,   292,   293,   294,   295,   296,     0,
       0,   297,     0,   299,     0,     0,   301,   302,   303,   304,
     305,   306,   307,   308,   913,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   914,     0,   915,   333,   334,
     335,     0,   916,     0,   338,   339,     0,   341,     0,   917,
     343,   918,   345,   346,   347,     0,   348,   349,     0,     0,
     350,   351,   352,     0,     0,   353,   354,   919,     0,   357,
       0,   920,   360,   361,   362,   363,   364,   365,   366,   367,
     368,     0,     0,   371,   372,    27,    28,    29,     0,   373,
     374,   921,     0,   377,   378,   922,   380,   381,   382,     0,
     383,   384,   385,   386,   387,     0,     0,   390,     0,   391,
     392,   393,   923,   395,   396,   397,   398,     0,   399,   400,
     401,     0,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,     0,   413,   414,     0,   416,   417,   418,   924,
     420,   421,   422,   423,   424,   425,   426,   427,   428,   429,
     430,   431,   432,    34,     0,   433,   434,   435,   436,   437,
     438,   925,   440,   441,     0,    36,     0,     0,   445,   926,
     447,     0,     0,   449,   450,   451,   452,   453,   454,   455,
     456,   457,   458,   459,   460,   927,   462,   928,    38,     0,
     464,   465,    39,   466,     0,   468,   469,   470,   471,   472,
       0,   473,   929,   930,     0,     0,     0,   477,   478,   931,
     480,   932,     0,   482,   483,   933,   485,   486,   487,   488,
     489,     0,     0,   490,   491,   492,    41,   493,   494,   495,
     496,     0,   497,   498,   499,   500,   501,   934,   935,     0,
     504,     0,   506,     0,   508,   509,   510,   511,     0,   513,
     514,     0,     0,   515,     0,    45,   516,   517,   518,   519,
     520,   521,   936,   937,   938,   939,   940,   941,   942,   943,
     944,   945,   946,   533,   534,   535,   536,     0,     0,    46,
       0,     0,  3072,  1436,   843,     0,     0,  2136,  1137,     0,
       0,     0,     0,   874,  2137,  2138,     0,     0,  2139,  2140,
    2141,   120,   121,   122,   123,   124,   125,   126,   127,   128,
     580,   129,   130,   131,   581,   582,   583,  3073,   585,   132,
     586,   587,   588,  3074,   134,   135,   590,   136,   137,   138,
    3075,   140,   141,   142,     0,  1574,  3076,  1576,  1577,   597,
     148,   149,   150,   151,   152,   153,   598,   599,   154,   155,
     156,   157,  1578,  1579,   160,   602,   161,   162,   163,   164,
       0,   604,  3077,   606,  3078,   168,   169,   170,   171,   172,
    3079,   174,   175,   176,   609,   177,   178,   179,   180,   181,
     182,   610,  3080,   184,   185,   186,   187,   188,   189,   190,
     191,   192,   193,  1584,   195,   196,  1585,   198,   615,   199,
     616,   200,   201,   202,   203,   204,   205,   617,   618,   206,
     207,   208,   209,   210,   619,   620,   211,   212,  1150,   214,
     215,   216,   217,   621,   218,   219,   220,   622,   221,   222,
     223,   623,   224,   225,   226,   227,     0,   229,   230,   231,
     232,   233,     0,   626,   235,   627,   236,   237,  1586,   239,
     629,   240,   630,   241,  3081,   632,  3082,   244,   245,  3083,
    3084,   248,   636,   249,   250,   637,   638,     0,     0,   253,
     254,   641,   255,   256,   257,   258,   259,   260,   261,  3085,
     263,   264,   265,   266,   643,   267,   268,   269,   270,   271,
     272,   273,   644,   274,  3086,     0,   277,   278,   279,   280,
     281,  1592,  1593,   649,  1594,   651,   285,  3087,  3088,   288,
    3089,   290,   291,   292,   293,   294,   295,   296,   655,   656,
     297,  3090,   299,  3091,   659,   301,   302,   303,   304,   305,
     306,   307,   308,  3092,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
     326,   327,   328,   329,  1601,  3093,  1603,   333,   334,   335,
     336,  3094,   665,   338,   339,  3095,   341,   667,     0,   343,
    1605,   345,   346,   347,   670,   348,   349,   671,   672,  3096,
     351,   352,   673,   674,   353,   354,     0,  3097,   357,  3098,
       0,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,   679,   680,   681,   682,   373,   374,
       0,  3099,   377,   378,     0,   380,   381,   382,   686,   383,
     384,   385,   386,   387,   388,   389,   390,   687,   391,   392,
     393,  1609,   395,   396,   397,   398,   689,   399,   400,   401,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   690,   413,   414,  3100,   416,   417,   418,  1611,   420,
     421,   422,   423,   424,   425,   426,   427,   428,   429,   430,
     431,   432,   693,  3101,   433,   434,   435,   436,   437,   438,
    3102,   440,   441,   442,   696,  3103,   444,   445,  1615,   447,
     699,   448,   449,   450,   451,   452,   453,   454,   455,   456,
     457,   458,   459,   460,  3104,   462,     0,   702,   703,   464,
     465,   704,   466,  3105,   468,   469,   470,   471,   472,   706,
     473,  1618,  1619,   709,   476,   710,   477,   478,     0,   480,
       0,   713,   482,   483,  3106,   485,   486,   487,   488,   489,
    3107,   716,   490,   491,   492,   717,   493,   494,   495,   496,
     718,   497,   498,   499,   500,   501,     0,  1622,   721,   504,
    3108,   506,   507,   508,   509,   510,   511,   512,   513,   514,
     723,   724,   515,   725,   726,   516,   517,   518,   519,   520,
     521,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   533,   534,   535,   536,     0,   545,     0,  2142,
    2143,  2144,  2136,  3109,  3110,  2147,  2148,  2149,  2150,  2137,
    2138,     0,     0,  2139,  2140,  2141,   120,   121,   122,   123,
     124,   125,   126,   127,   128,     0,   129,   130,   131,     0,
       0,     0,     0,     0,   132,     0,     0,     0,     0,   134,
     135,     0,   136,   137,   138,     0,   140,   141,   142,   143,
     144,     0,   146,   147,     0,   148,   149,   150,   151,   152,
     153,     0,     0,   154,   155,   156,   157,   158,   159,   160,
       0,   161,   162,   163,   164,   165,     0,     0,     0,   167,
     168,   169,   170,   171,   172,     0,   174,   175,   176,     0,
     177,   178,   179,   180,   181,   182,     0,     0,   184,   185,
     186,   187,   188,   189,   190,   191,   192,   193,   194,   195,
     196,   197,   198,     0,   199,     0,   200,   201,   202,   203,
     204,   205,     0,     0,   206,   207,   208,   209,   210,     0,
       0,   211,   212,   213,   214,   215,   216,   217,     0,   218,
     219,   220,     0,   221,   222,   223,     0,   224,   225,   226,
     227,   228,   229,   230,   231,   232,   233,   234,     0,   235,
       0,   236,   237,   238,   239,     0,   240,     0,   241,     0,
       0,     0,   244,   245,   546,     0,   248,     0,   249,   250,
       0,     0,   251,   252,   253,   254,     0,   255,   256,   257,
     258,   259,   260,   261,     0,   263,   264,   265,   266,     0,
     267,   268,   269,   270,   271,   272,   273,     0,   274,     0,
     276,   277,   278,   279,   280,   281,   282,   283,     0,   284,
       0,   285,     0,     0,   288,     0,   290,   291,   292,   293,
     294,   295,   296,     0,     0,   297,     0,   299,     0,     0,
     301,   302,   303,   304,   305,   306,   307,   308,   547,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,   322,   323,   324,   325,   326,   327,   328,   329,   330,
       0,   332,   333,   334,   335,   336,   337,     0,   338,   339,
       0,   341,     0,   342,   343,   344,   345,   346,   347,     0,
     348,   349,     0,     0,   350,   351,   352,     0,     0,   353,
     354,   355,     0,   357,     0,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,   371,   372,     0,
       0,     0,     0,   373,   374,   375,     0,   377,   378,   379,
     380,   381,   382,     0,   383,   384,   385,   386,   387,   388,
     389,   390,     0,   391,   392,   393,   394,   395,   396,   397,
     398,     0,   399,   400,   401,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,     0,   413,   414,     0,
     416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,   428,   429,   430,   431,   432,     0,     0,   433,
     434,   435,   436,   437,   438,   439,   440,   441,   442,     0,
       0,   444,   445,   446,   447,     0,   448,   449,   450,   451,
     452,   453,   454,   455,   456,   457,   458,   459,   460,   548,
     462,   463,     0,     0,   464,   465,     0,   466,     0,   468,
     469,   470,   471,   472,     0,   473,   474,   475,     0,   476,
       0,   477,   478,   479,   480,   481,     0,   482,   483,   484,
     485,   486,   487,   488,   489,     0,     0,   490,   491,   492,
       0,   493,   494,   495,   496,     0,   497,   498,   499,   500,
     501,   502,   503,     0,   504,     0,   506,   507,   508,   509,
     510,   511,   512,   513,   514,     0,     0,   515,     0,     0,
     516,   517,   518,   519,   520,   521,   522,   523,   524,   525,
     526,   527,   528,   529,   530,   531,   532,   533,   534,   535,
     536,     0,     0,     0,  2142,  2143,  2144,     0,  2145,  2146,
    2147,  2148,  2149,  2150,  1706,     0,     0,  1707,     0,     0,
       0,  1708,  1709,  1710,  1711,  1712,  1713,  1714,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1706,
       0,     0,  1707,  1715,     0,     0,  1708,  1709,  1710,  1711,
    1712,  1713,  1714,     0,  1717,     0,     0,     0,     0,     0,
       0,  1718,     0,     0,  1706,     0,     0,  1707,  1715,     0,
       0,  1708,  1709,  1710,  1711,  1712,  1713,  1714,     0,  1717,
       0,     0,     0,     0,     0,     0,  1718,     0,  1719,     0,
       0,     0,     0,  1715,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1717,     0,     0,  1706,     0,     0,
    1707,  1718,     0,  1719,  1708,  1709,  1710,  1711,  1712,  1713,
    1714,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1715,     0,  1719,     0,
       0,     0,     0,     0,     0,     0,     0,  1717,     0,     0,
       0,     0,     0,     0,  1718,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1719,     0,     0,     0,     0,     0,  1720,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1721,     0,     0,     0,
       0,  1722,  1720,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1721,     0,     0,  1723,  1724,  1722,  1720,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1725,     0,     0,     0,     0,     0,  1721,     0,     0,  1723,
    1724,  1722,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1725,     0,     0,     0,     0,
    1720,     0,     0,     0,  1723,  1724,     0,     0,     0,  1726,
       0,     0,  1727,     0,     0,     0,     0,     0,     0,  1721,
    1725,     0,     0,     0,  1722,     0,  1728,     0,     0,  1729,
       0,     0,     0,     0,  1726,     0,     0,  1727,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1723,  1724,     0,
       0,  1728,     0,     0,  1729,     0,     0,     0,     0,  1726,
       0,     0,  1727,  1725,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1728,     0,     0,  1729,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1726,     0,     0,  1727,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1728,
       0,     0,  1729,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1730,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1730,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1730,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1730,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1731,     0,     0,  1732,  1733,  1734,     0,
    1735,  1736,  1737,  1738,  1739,  1740,     0,     0,  1895,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1731,     0,
       0,  1732,  1733,  1734,     0,  1735,  1736,  1737,  1738,  1739,
    1740,     0,     0,  2936,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1731,     0,     0,  1732,  1733,  1734,     0,
    1735,  1736,  1737,  1738,  1739,  1740,     0,     0,  3469,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   579,     0,     0,  1731,     0,     0,  1732,
    1733,  1734,     0,  1735,  1736,  1737,  1738,  1739,  1740,     0,
       0,  3752,   120,   121,   122,   123,   124,   125,   126,   127,
     128,   580,   129,   130,   131,   581,   582,   583,   584,   585,
     132,   586,   587,   588,   589,   134,   135,   590,   136,   137,
     138,   591,   140,   141,   142,   592,   593,   594,   595,   596,
     597,   148,   149,   150,   151,   152,   153,   598,   599,   154,
     155,   156,   157,   600,   601,   160,   602,   161,   162,   163,
     164,   603,   604,   605,   606,   607,   168,   169,   170,   171,
     172,   608,   174,   175,   176,   609,   177,   178,   179,   180,
     181,   182,   610,   611,   184,   185,   186,   187,   188,   189,
     190,   191,   192,   193,   613,   195,   196,   614,   198,   615,
     199,   616,   200,   201,   202,   203,   204,   205,   617,   618,
     206,   207,   208,   209,   210,   619,   620,   211,   212,   213,
     214,   215,   216,   217,   621,   218,   219,   220,   622,   221,
     222,   223,   623,   224,   225,   226,   227,   624,   229,   230,
     231,   232,   233,   625,   626,   235,   627,   236,   237,   628,
     239,   629,   240,   630,   241,   631,   632,   633,   244,   245,
     634,   635,   248,   636,   249,   250,   637,   638,   639,   640,
     253,   254,   641,   255,   256,   257,   258,   259,   260,   261,
     642,   263,   264,   265,   266,   643,   267,   268,   269,   270,
     271,   272,   273,   644,   274,   645,   646,   277,   278,   279,
     280,   281,   647,   648,   649,   650,   651,   285,   652,   653,
     288,   654,   290,   291,   292,   293,   294,   295,   296,   655,
     656,   297,   657,   299,   658,   659,   301,   302,   303,   304,
     305,   306,   307,   308,   660,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   661,   662,   663,   333,   334,
     335,   336,   664,   665,   338,   339,   666,   341,   667,   668,
     343,   669,   345,   346,   347,   670,   348,   349,   671,   672,
     350,   351,   352,   673,   674,   353,   354,   675,   676,   357,
     677,   678,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,   371,   372,   679,   680,   681,   682,   373,
     374,   683,   684,   377,   378,   685,   380,   381,   382,   686,
     383,   384,   385,   386,   387,   388,   389,   390,   687,   391,
     392,   393,   688,   395,   396,   397,   398,   689,   399,   400,
     401,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,   690,   413,   414,   691,   416,   417,   418,   692,
     420,   421,   422,   423,   424,   425,   426,   427,   428,   429,
     430,   431,   432,   693,   694,   433,   434,   435,   436,   437,
     438,   695,   440,   441,   442,   696,   697,   444,   445,   698,
     447,   699,   448,   449,   450,   451,   452,   453,   454,   455,
     456,   457,   458,   459,   460,   700,   462,   701,   702,   703,
     464,   465,   704,   466,   705,   468,   469,   470,   471,   472,
     706,   473,   707,   708,   709,   476,   710,   477,   478,   711,
     480,   712,   713,   482,   483,   714,   485,   486,   487,   488,
     489,   715,   716,   490,   491,   492,   717,   493,   494,   495,
     496,   718,   497,   498,   499,   500,   501,   719,   720,   721,
     504,   722,   506,   507,   508,   509,   510,   511,   512,   513,
     514,   723,   724,   515,   725,   726,   516,   517,   518,   519,
     520,   521,   727,   728,   729,   730,   731,   732,   733,   734,
     735,   736,   737,   533,   534,   535,   536,   545,     0,     0,
       0,     0,     0,     0,     0,     0,  2171,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   120,   121,   122,   123,
     124,   125,   126,   127,   128,     0,   129,   130,   131,     0,
       0,     0,     0,     0,   132,     0,     0,     0,     0,   134,
     135,     0,   136,   137,   138,     0,   140,   141,   142,   143,
     144,     0,   146,   147,     0,   148,   149,   150,   151,   152,
     153,     0,     0,   154,   155,   156,   157,   158,   159,   160,
       0,   161,   162,   163,   164,   165,     0,     0,     0,   167,
     168,   169,   170,   171,   172,     0,   174,   175,   176,     0,
     177,   178,   179,   180,   181,   182,     0,     0,   184,   185,
     186,   187,   188,   189,   190,   191,   192,   193,   194,   195,
     196,   197,   198,     0,   199,     0,   200,   201,   202,   203,
     204,   205,     0,     0,   206,   207,   208,   209,   210,     0,
       0,   211,   212,   213,   214,   215,   216,   217,     0,   218,
     219,   220,     0,   221,   222,   223,     0,   224,   225,   226,
     227,   228,   229,   230,   231,   232,   233,   234,     0,   235,
       0,   236,   237,   238,   239,     0,   240,     0,   241,     0,
       0,     0,   244,   245,   546,     0,   248,     0,   249,   250,
       0,     0,   251,   252,   253,   254,     0,   255,   256,   257,
     258,   259,   260,   261,     0,   263,   264,   265,   266,     0,
     267,   268,   269,   270,   271,   272,   273,     0,   274,     0,
     276,   277,   278,   279,   280,   281,   282,   283,     0,   284,
       0,   285,     0,     0,   288,     0,   290,   291,   292,   293,
     294,   295,   296,     0,     0,   297,     0,   299,     0,     0,
     301,   302,   303,   304,   305,   306,   307,   308,   547,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,   322,   323,   324,   325,   326,   327,   328,   329,   330,
       0,   332,   333,   334,   335,   336,   337,     0,   338,   339,
       0,   341,     0,   342,   343,   344,   345,   346,   347,     0,
     348,   349,     0,     0,   350,   351,   352,     0,     0,   353,
     354,   355,     0,   357,     0,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,   371,   372,     0,
       0,     0,     0,   373,   374,   375,     0,   377,   378,   379,
     380,   381,   382,     0,   383,   384,   385,   386,   387,   388,
     389,   390,     0,   391,   392,   393,   394,   395,   396,   397,
     398,     0,   399,   400,   401,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,     0,   413,   414,     0,
     416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,   428,   429,   430,   431,   432,     0,     0,   433,
     434,   435,   436,   437,   438,   439,   440,   441,   442,     0,
       0,   444,   445,   446,   447,     0,   448,   449,   450,   451,
     452,   453,   454,   455,   456,   457,   458,   459,   460,   548,
     462,   463,     0,     0,   464,   465,     0,   466,     0,   468,
     469,   470,   471,   472,     0,   473,   474,   475,     0,   476,
       0,   477,   478,   479,   480,   481,     0,   482,   483,   484,
     485,   486,   487,   488,   489,     0,     0,   490,   491,   492,
       0,   493,   494,   495,   496,     0,   497,   498,   499,   500,
     501,   502,   503,     0,   504,     0,   506,   507,   508,   509,
     510,   511,   512,   513,   514,     0,     0,   515,     0,     0,
     516,   517,   518,   519,   520,   521,   522,   523,   524,   525,
     526,   527,   528,   529,   530,   531,   532,   533,   534,   535,
     536,   545,     0,     0,     0,     0,     0,     0,     0,     0,
    2836,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     120,   121,   122,   123,   124,   125,   126,   127,   128,     0,
     129,   130,   131,     0,     0,     0,     0,     0,   132,     0,
       0,     0,     0,   134,   135,     0,   136,   137,   138,     0,
     140,   141,   142,   143,   144,     0,   146,   147,     0,   148,
     149,   150,   151,   152,   153,     0,     0,   154,   155,   156,
     157,   158,   159,   160,     0,   161,   162,   163,   164,   165,
       0,     0,     0,   167,   168,   169,   170,   171,   172,     0,
     174,   175,   176,     0,   177,   178,   179,   180,   181,   182,
       0,     0,   184,   185,   186,   187,   188,   189,   190,   191,
     192,   193,   194,   195,   196,   197,   198,     0,   199,     0,
     200,   201,   202,   203,   204,   205,     0,     0,   206,   207,
     208,   209,   210,     0,     0,   211,   212,   213,   214,   215,
     216,   217,     0,   218,   219,   220,     0,   221,   222,   223,
       0,   224,   225,   226,   227,   228,   229,   230,   231,   232,
     233,   234,     0,   235,     0,   236,   237,   238,   239,     0,
     240,     0,   241,     0,     0,     0,   244,   245,   546,     0,
     248,     0,   249,   250,     0,     0,   251,   252,   253,   254,
       0,   255,   256,   257,   258,   259,   260,   261,     0,   263,
     264,   265,   266,     0,   267,   268,   269,   270,   271,   272,
     273,     0,   274,     0,   276,   277,   278,   279,   280,   281,
     282,   283,     0,   284,     0,   285,     0,     0,   288,     0,
     290,   291,   292,   293,   294,   295,   296,     0,     0,   297,
       0,   299,     0,     0,   301,   302,   303,   304,   305,   306,
     307,   308,   547,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,   323,   324,   325,   326,
     327,   328,   329,   330,     0,   332,   333,   334,   335,   336,
     337,     0,   338,   339,     0,   341,     0,   342,   343,   344,
     345,   346,   347,     0,   348,   349,     0,     0,   350,   351,
     352,     0,     0,   353,   354,   355,     0,   357,     0,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
     370,   371,   372,     0,     0,     0,     0,   373,   374,   375,
       0,   377,   378,   379,   380,   381,   382,     0,   383,   384,
     385,   386,   387,   388,   389,   390,     0,   391,   392,   393,
     394,   395,   396,   397,   398,     0,   399,   400,   401,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
       0,   413,   414,     0,   416,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,   428,   429,   430,   431,
     432,     0,     0,   433,   434,   435,   436,   437,   438,   439,
     440,   441,   442,     0,     0,   444,   445,   446,   447,     0,
     448,   449,   450,   451,   452,   453,   454,   455,   456,   457,
     458,   459,   460,   548,   462,   463,     0,     0,   464,   465,
       0,   466,     0,   468,   469,   470,   471,   472,     0,   473,
     474,   475,     0,   476,     0,   477,   478,   479,   480,   481,
       0,   482,   483,   484,   485,   486,   487,   488,   489,     0,
       0,   490,   491,   492,     0,   493,   494,   495,   496,     0,
     497,   498,   499,   500,   501,   502,   503,     0,   504,     0,
     506,   507,   508,   509,   510,   511,   512,   513,   514,     0,
       0,   515,     0,     0,   516,   517,   518,   519,   520,   521,
     522,   523,   524,   525,   526,   527,   528,   529,   530,   531,
     532,   533,   534,   535,   536,  1052,  1436,   843,     0,     0,
       0,  1137,     0,     0,  2839,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   120,   121,   122,   123,   124,   125,
     126,   127,   128,     0,   129,   130,   131,     0,     0,     0,
     584,     0,   132,     0,     0,     0,   589,   134,   135,     0,
     136,   137,   138,   591,   140,   141,   142,   592,   593,   594,
     595,   596,     0,   148,   149,   150,   151,   152,   153,     0,
       0,   154,   155,   156,   157,   600,   601,   160,     0,   161,
     162,   163,   164,   603,     0,   605,     0,   607,   168,   169,
     170,   171,   172,   608,   174,   175,   176,     0,   177,   178,
     179,   180,   181,   182,     0,   611,   184,   185,   186,   187,
     188,   189,   190,   191,   192,   193,   613,   195,   196,   614,
     198,     0,   199,     0,   200,   201,   202,   203,   204,   205,
       0,     0,   206,   207,   208,   209,   210,     0,     0,   211,
     212,   213,   214,   215,   216,   217,     0,   218,   219,   220,
       0,   221,   222,   223,     0,   224,   225,   226,   227,   624,
     229,   230,   231,   232,   233,   625,  1437,   235,     0,   236,
     237,   628,   239,     0,   240,     0,   241,   631,     0,   633,
     244,   245,   634,   635,   248,     0,   249,   250,     0,     0,
     639,   640,   253,   254,     0,   255,   256,   257,   258,   259,
     260,   261,   642,   263,   264,   265,   266,     0,   267,   268,
     269,   270,   271,   272,   273,     0,   274,   645,   646,   277,
     278,   279,   280,   281,   647,   648,     0,   650,     0,   285,
     652,   653,   288,   654,   290,   291,   292,   293,   294,   295,
     296,     0,     0,   297,   657,   299,   658,     0,   301,   302,
     303,   304,   305,   306,   307,   308,   660,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
     323,   324,   325,   326,   327,   328,   329,   661,   662,   663,
     333,   334,   335,   336,   664,     0,   338,   339,   666,   341,
       0,   668,   343,   669,   345,   346,   347,     0,   348,   349,
    1438,     0,   350,   351,   352,     0,     0,   353,   354,   675,
     676,   357,   677,   678,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,     0,     0,     0,
       0,   373,   374,   683,   684,   377,   378,   685,   380,   381,
     382,     0,   383,   384,   385,   386,   387,   388,   389,   390,
       0,   391,   392,   393,   688,   395,   396,   397,   398,     0,
     399,   400,   401,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,     0,   413,   414,   691,   416,   417,
     418,   692,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   429,   430,   431,   432,     0,   694,   433,   434,   435,
     436,   437,   438,   695,   440,   441,   442,     0,   697,   444,
     445,   698,   447,     0,   448,   449,   450,   451,   452,   453,
     454,   455,   456,   457,   458,   459,   460,   700,   462,   701,
       0,     0,   464,   465,     0,   466,   705,   468,   469,   470,
     471,   472,     0,   473,   707,   708,     0,   476,     0,   477,
     478,   711,   480,   712,  1439,   482,   483,   714,   485,   486,
     487,   488,   489,     0,     0,   490,   491,   492,     0,   493,
     494,   495,   496,     0,   497,   498,   499,   500,   501,   719,
     720,     0,   504,   722,   506,   507,   508,   509,   510,   511,
     512,   513,   514,     0,     0,   515,     0,     0,   516,   517,
     518,   519,   520,   521,   727,   728,   729,   730,   731,   732,
     733,   734,   735,   736,   737,   533,   534,   535,   536,     0,
       0,  1706,     0,     0,  1707,     0,  1440,  1441,  1708,  1709,
    1710,  1711,  1712,  1713,  1714,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1715,     0,     0,     0,     0,     0,  2277,     0,     0,     0,
       0,  1717,  1706,     0,     0,  1707,     0,     0,  1718,  1708,
    1709,  1710,  1711,  1712,  1713,  1714,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1715,     0,     0,     0,  1719,     0,     0,     0,     0,
       0,     0,  1717,  1706,     0,     0,  1707,     0,     0,  1718,
    1708,  1709,  1710,  1711,  1712,  1713,  1714,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1715,     0,     0,     0,  1719,     0,     0,     0,
       0,  2278,     0,  1717,     0,     0,  1706,     0,     0,  1707,
    1718,     0,     0,  1708,  1709,  1710,  1711,  1712,  1713,  1714,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1715,     0,  1719,     0,     0,
    1994,     0,     0,     0,     0,     0,  1717,     0,     0,     0,
       0,     0,     0,  1718,  1720,     0,     0,  1706,     0,     0,
    1707,     0,     0,     0,  1708,  1709,  1710,  1711,  1712,  1713,
    1714,     0,     0,  1721,     0,     0,     0,     0,  1722,     0,
    1719,     0,     0,     0,     0,  2030,  1715,     0,     0,     0,
    2031,     0,     0,     0,     0,  1720,     0,  1717,     0,     0,
       0,  1723,  1724,     0,  1718,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1721,     0,     0,  1725,     0,  1722,
       0,     0,     0,     0,     0,  3924,     0,     0,     0,     0,
       0,  1719,     0,     0,     0,     0,  1720,     0,     0,     0,
       0,     0,  1723,  1724,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1721,  1726,     0,  1725,  1727,
    1722,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1728,     0,     0,  1729,     0,     0,  1720,
       0,     0,     0,  1723,  1724,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1726,  1721,  1725,
    1727,     0,     0,  1722,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1728,     0,     0,  1729,     0,     0,
       0,     0,     0,     0,     0,     0,  1723,  1724,     0,     0,
    1720,     0,     0,     0,     0,     0,     0,     0,  1726,     0,
       0,  1727,  1725,     0,     0,     0,     0,     0,     0,  1721,
       0,     0,     0,     0,  1722,  1728,     0,     0,  1729,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1723,  1724,  1730,
       0,  1726,     0,     0,  1727,     0,     0,     0,     0,  3925,
       0,     0,     0,  1725,     0,     0,     0,     0,  1728,     0,
       0,  1729,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1730,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1726,     0,     0,  1727,     0,     0,     0,     0,
       0,     0,     0,     0,  2281,     0,     0,     0,     0,  1728,
       0,     0,  1729,     0,     0,     0,     0,     0,     0,     0,
       0,  1730,     0,  1706,     0,     0,  1707,     0,     0,     0,
    1708,  1709,  1710,  1711,  1712,  1713,  1714,  2001,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1731,     0,  1715,  1732,  1733,  1734,     0,  1735,  1736,  1737,
    1738,  1739,  1740,  1717,  1730,     0,     0,     0,     0,     0,
    1718,     0,     0,     0,     0,     0,  1706,     0,     0,  1707,
       0,     0,     0,  1708,  1709,  1710,  1711,  1712,  1713,  1714,
       0,  1731,     0,     0,  1732,  1733,  1734,  1719,  1735,  1736,
    1737,  1738,  1739,  1740,     0,  1715,     0,     0,     0,     0,
    2036,     0,     0,     0,     0,  1730,  1717,     0,     0,     0,
       0,     0,     0,  1718,     0,     0,     0,     0,     0,     0,
       0,     0,  1731,     0,     0,  1732,  1733,  1734,     0,  1735,
    1736,  1737,  1738,  1739,  1740,     0,     0,     0,     0,     0,
    1719,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1731,     0,     0,  1732,  1733,
    1734,     0,  1735,  1736,  1737,  1738,  1739,  1740,     0,     0,
       0,  2041,     0,     0,     0,     0,  1720,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1721,     0,     0,     0,     0,
    1722,     0,     0,     0,     0,     0,  1731,     0,     0,  1732,
    1733,  1734,     0,  1735,  1736,  1737,  1738,  1739,  1740,     0,
       0,     0,     0,  1723,  1724,     0,     0,     0,     0,  1720,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1725,
       0,     0,     0,     0,     0,     0,     0,     0,  1721,     0,
       0,     0,     0,  1722,  1706,     0,     0,  1707,     0,     0,
       0,  1708,  1709,  1710,  1711,  1712,  1713,  1714,     0,     0,
       0,     0,     0,     0,     0,     0,  1723,  1724,  1726,     0,
       0,  1727,     0,  1715,     0,     0,     0,     0,  2043,     0,
       0,     0,  1725,     0,  1717,  1728,     0,     0,  1729,     0,
       0,  1718,     0,     0,     0,     0,  1706,     0,     0,  1707,
       0,     0,     0,  1708,  1709,  1710,  1711,  1712,  1713,  1714,
       0,     0,     0,     0,     0,     0,     0,     0,  1719,     0,
       0,  1726,     0,     0,  1727,  1715,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1717,     0,  1728,     0,
       0,  1729,     0,  1718,     0,     0,     0,     0,  1706,     0,
       0,  1707,     0,     0,     0,  1708,  1709,  1710,  1711,  1712,
    1713,  1714,     0,     0,     0,     0,     0,     0,     0,     0,
    1719,     0,     0,     0,     0,     0,     0,  1715,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1717,     0,
       0,  1730,     0,     0,     0,  1718,     0,     0,     0,     0,
    1706,     0,     0,  1707,     0,     0,     0,  1708,  1709,  1710,
    1711,  1712,  1713,  1714,     0,     0,     0,  1720,     0,     0,
       0,     0,  1719,     0,     0,     0,     0,     0,     0,  1715,
       0,     0,     0,     0,  2913,     0,  1721,     0,     0,     0,
    1717,  1722,     0,     0,  1730,     0,     0,  1718,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  2164,
       0,     0,     0,     0,  1723,  1724,     0,     0,     0,  1720,
       0,     0,     0,     0,  1719,     0,     0,     0,     0,     0,
    1725,     0,     0,     0,     0,     0,     0,     0,  1721,     0,
       0,     0,     0,  1722,     0,     0,     0,     0,     0,     0,
       0,     0,  1731,     0,     0,  1732,  1733,  1734,     0,  1735,
    1736,  1737,  1738,  1739,  1740,     0,  1723,  1724,     0,  1726,
       0,  1720,  1727,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1725,     0,     0,     0,  1728,     0,     0,  1729,
    1721,     0,     0,     0,     0,  1722,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1731,     0,     0,  1732,  1733,
    1734,     0,  1735,  1736,  1737,  1738,  1739,  1740,  1723,  1724,
       0,  1726,     0,  1720,  1727,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1725,     0,     0,     0,  1728,     0,
       0,  1729,  1721,     0,     0,     0,     0,  1722,  1706,     0,
       0,  1707,     0,     0,     0,  1708,  1709,  1710,  1711,  1712,
    1713,  1714,     0,     0,     0,     0,     0,     0,     0,     0,
    1723,  1724,     0,  1726,     0,     0,  1727,  1715,     0,     0,
       0,     0,     0,     0,     0,     0,  1725,     0,  1717,     0,
    1728,     0,  1730,  1729,     0,  1718,     0,     0,     0,     0,
    1706,     0,     0,  1707,     0,     0,     0,  1708,  1709,  1710,
    1711,  1712,  1713,  1714,     0,     0,     0,     0,     0,     0,
       0,     0,  1719,     0,     0,  1726,     0,     0,  1727,  1715,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1717,     0,  1728,     0,  1730,  1729,     0,  1718,     0,     0,
       0,     0,  1706,     0,     0,  1707,     0,     0,     0,  1708,
    1709,  1710,  1711,  1712,  1713,  1714,     0,     0,     0,     0,
       0,     0,     0,     0,  1719,     0,     0,     0,     0,     0,
       0,  1715,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1717,     0,     0,     0,  1730,     0,     0,  1718,
       0,     0,     0,  1731,     0,     0,  1732,  1733,  1734,     0,
    1735,  1736,  1737,  1738,  1739,  1740,     0,     0,     0,     0,
       0,  1720,     0,     0,     0,     0,  1719,     0,     0,     0,
    2900,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1721,     0,     0,     0,     0,  1722,     0,     0,  1730,     0,
       0,     0,     0,     0,     0,  1731,     0,     0,  1732,  1733,
    1734,     0,  1735,  1736,  1737,  1738,  1739,  1740,  1723,  1724,
       0,     0,     0,  1720,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1725,     0,     0,     0,     0,     0,
       0,     0,  1721,     0,     0,     0,     0,  1722,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1731,     0,     0,
    1732,  1733,  1734,     0,  1735,  1736,  1737,  1738,  1739,  1740,
    1905,  1724,     0,  1726,     0,  1720,  1727,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1725,     0,     0,     0,
    1728,     0,     0,  1729,  1721,     0,     0,     0,     0,  1722,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1731,
       0,     0,  1732,  1733,  1734,     0,  1735,  1736,  1737,  1738,
    1739,  1740,  1723,  1724,     0,  1726,     0,     0,  1727,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1725,     0,
       0,     0,  1728,     0,     0,  1729,     0,     0,     0,     0,
       0,     0,  1136,     0,     0,  3286,     0,     0,     0,     0,
    3287,  3288,  3289,  3290,  3291,  3292,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1726,     0,     0,
    1727,  3293,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  3294,     0,  1728,     0,  1730,  1729,     0,  3295,
       0,     0,     0,     0,  1136,     0,     0,  3286,     0,     0,
       0,     0,  3287,     0,     0,  3290,  3291,  3292,     0,     0,
       0,     0,     0,     0,     0,     0,  3296,     0,     0,     0,
       0,     0,     0,  3293,  1136,     0,     0,  3286,     0,     0,
       0,     0,  3287,     0,  3294,  3290,  3291,  3292,  1730,     0,
       0,  3295,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  3293,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  3294,     0,     0,     0,  3296,     0,
    1706,  3295,     0,  1707,     0,     0,     0,  1708,  1709,     0,
       0,  1712,  1713,  1714,     0,     0,     0,     0,     0,     0,
    1730,     0,     0,     0,     0,     0,     0,  1731,  3296,     0,
    1732,  1733,  1734,     0,  1735,  1736,  1737,  1738,  1739,  1740,
    1717,     0,     0,     0,     0,  3297,     0,  1718,     0,     0,
       0,     0,     0,     0,     0,  1136,     0,     0,  3286,     0,
       0,     0,     0,  3287,  3298,     0,  3290,  3291,  3292,  3299,
       0,     0,     0,     0,  1719,     0,     0,     0,     0,  1731,
       0,     0,  1732,  1733,  1734,     0,  1735,  1736,  1737,  1738,
    1739,  1740,  3300,  3301,     0,  3294,     0,  3297,     0,     0,
       0,     0,  3295,     0,     0,     0,     0,     0,  3302,     0,
       0,     0,     0,     0,     0,     0,  3298,     0,     0,     0,
       0,  3299,     0,     0,     0,     0,     0,  3297,     0,  3296,
       0,  1731,     0,     0,  1732,  1733,  1734,     0,  1735,  1736,
    1737,  1738,  2298,  1740,  3300,  3301,  3298,  3303,     0,     0,
    3304,  3299,     0,     0,     0,     0,     0,     0,     0,     0,
    3302,     0,     0,     0,  2014,     0,     0,  3305,     0,     0,
       0,     0,     0,  1720,  3300,  3301,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    3302,     0,  1721,     0,     0,     0,     0,  1722,     0,  3303,
       0,     0,  3304,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1136,     0,  2014,  3286,     0,  3305,
   -2238, -2238,  3287,     0,     0,  3290,  3291,  3292,  3297,  3303,
       0,     0,  3304,     0,     0,     0,  1725,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  2014,  3298,     0,     0,
       0,     0,  3299,     0,  3294,     0,     0,     0,     0,     0,
       0,  3295,     0,     0,     0,     0,     0,     0,     0,     0,
    3306,     0,     0,     0,     0,  3300,  3301,     0, -2238,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  3296,     0,
       0,  3302,  1728,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  3306,     0,     0,     0,     0,     0,     0,     0,
    3303,     0,     0,  3304,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  2014,     0,     0,
       0,     0,  3306,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  3307,     0,     0,  3308,  3309,  3310,  3297,  3311,  3312,
    3313,  3314,  3315,  3316,     0,     0,     0,     0,  1730,     0,
       0,     0,     0,     0,     0,     0,  3298,     0,     0,     0,
       0,  3299,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  3307, -2238, -2238,  3308,  3309,  3310,     0,
    3311,  3312,  3313,  3314,  3315,  3316,     0,     0,     0,     0,
    3302,     0,     0,  3306,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  3307,     0,     0,  3308,  3309,  3310,     0,
    3311,  3312,  3313,  3314,  3315,  3316,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0, -2238,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  2014,     0,     0,  1731,
       0,     0,  1732,  1733,  1734,     0,  1735,  1736,  1737,  1738,
    1739,  1740,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  3307,     0,     0,  3308,  3309,  3310,
       0,  3311,  3312,  3313,  3314,  3315,  3316,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  3306,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   579,     0,  2187,
       0,     0,     0,  3307,     0,     0,  3308,  3309,  3310,     0,
    3311,  3312,  3313,  3314,  3315,  3316,   120,   121,   122,   123,
     124,   125,   126,   127,   128,   580,   129,   130,   131,   581,
     582,   583,   584,   585,   132,   586,   587,   588,   589,   134,
     135,   590,   136,   137,   138,   591,   140,   141,   142,   592,
     593,   594,   595,   596,   597,   148,   149,   150,   151,   152,
     153,   598,   599,   154,   155,   156,   157,   600,   601,   160,
     602,   161,   162,   163,   164,   603,   604,   605,   606,   607,
     168,   169,   170,   171,   172,   608,   174,   175,   176,   609,
     177,   178,   179,   180,   181,   182,   610,   611,   184,   185,
     186,   187,   188,   189,   190,   191,   192,   193,   613,   195,
     196,   614,   198,   615,   199,   616,   200,   201,   202,   203,
     204,   205,   617,   618,   206,   207,   208,   209,   210,   619,
     620,   211,   212,   213,   214,   215,   216,   217,   621,   218,
     219,   220,   622,   221,   222,   223,   623,   224,   225,   226,
     227,   624,   229,   230,   231,   232,   233,   625,   626,   235,
     627,   236,   237,   628,   239,   629,   240,   630,   241,   631,
     632,   633,   244,   245,   634,   635,   248,   636,   249,   250,
     637,   638,   639,   640,   253,   254,   641,   255,   256,   257,
     258,   259,   260,   261,   642,   263,   264,   265,   266,   643,
     267,   268,   269,   270,   271,   272,   273,   644,   274,   645,
     646,   277,   278,   279,   280,   281,   647,   648,   649,   650,
     651,   285,   652,   653,   288,   654,   290,   291,   292,   293,
     294,   295,   296,   655,   656,   297,   657,   299,   658,   659,
     301,   302,   303,   304,   305,   306,   307,   308,   660,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,   322,   323,   324,   325,   326,   327,   328,   329,   661,
     662,   663,   333,   334,   335,   336,   664,   665,   338,   339,
     666,   341,   667,   668,   343,   669,   345,   346,   347,   670,
     348,   349,   671,   672,   350,   351,   352,   673,   674,   353,
     354,   675,   676,   357,   677,   678,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,   371,   372,   679,
     680,   681,   682,   373,   374,   683,   684,   377,   378,   685,
     380,   381,   382,   686,   383,   384,   385,   386,   387,   388,
     389,   390,   687,   391,   392,   393,   688,   395,   396,   397,
     398,   689,   399,   400,   401,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   690,   413,   414,   691,
     416,   417,   418,   692,   420,   421,   422,   423,   424,   425,
     426,   427,   428,   429,   430,   431,   432,   693,   694,   433,
     434,   435,   436,   437,   438,   695,   440,   441,   442,   696,
     697,   444,   445,   698,   447,   699,   448,   449,   450,   451,
     452,   453,   454,   455,   456,   457,   458,   459,   460,   700,
     462,   701,   702,   703,   464,   465,   704,   466,   705,   468,
     469,   470,   471,   472,   706,   473,   707,   708,   709,   476,
     710,   477,   478,   711,   480,   712,   713,   482,   483,   714,
     485,   486,   487,   488,   489,   715,   716,   490,   491,   492,
     717,   493,   494,   495,   496,   718,   497,   498,   499,   500,
     501,   719,   720,   721,   504,   722,   506,   507,   508,   509,
     510,   511,   512,   513,   514,   723,   724,   515,   725,   726,
     516,   517,   518,   519,   520,   521,   727,   728,   729,   730,
     731,   732,   733,   734,   735,   736,   737,   533,   534,   535,
     536,   579,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     120,   121,   122,   123,   124,   125,   126,   127,   128,   580,
     129,   130,   131,   581,   582,   583,   584,   585,   132,   586,
     587,   588,   589,   134,   135,   590,   136,   137,   138,   591,
     140,   141,   142,   592,   593,   594,   595,   596,   597,   148,
     149,   150,   151,   152,   153,   598,   599,   154,   155,   156,
     157,   600,   601,   160,   602,   161,   162,   163,   164,   603,
     604,   605,   606,   607,   168,   169,   170,   171,   172,   608,
     174,   175,   176,   609,   177,   178,   179,   180,   181,   182,
     610,   611,   184,   185,   186,   187,   188,   189,   612,   191,
     192,   193,   613,   195,   196,   614,   198,   615,   199,   616,
     200,   201,   202,   203,   204,   205,   617,   618,   206,   207,
     208,   209,   210,   619,   620,   211,   212,   213,   214,   215,
     216,   217,   621,   218,   219,   220,   622,   221,   222,   223,
     623,   224,   225,   226,   227,   624,   229,   230,   231,   232,
     233,   625,   626,   235,   627,   236,   237,   628,   239,   629,
     240,   630,   241,   631,   632,   633,   244,   245,   634,   635,
     248,   636,   249,   250,   637,   638,   639,   640,   253,   254,
     641,   255,   256,   257,   258,   259,   260,   261,   642,   263,
     264,   265,   266,   643,   267,   268,   269,   270,   271,   272,
     273,   644,   274,   645,   646,   277,   278,   279,   280,   281,
     647,   648,   649,   650,   651,   285,   652,   653,   288,   654,
     290,   291,   292,   293,   294,   295,   296,   655,   656,   297,
     657,   299,   658,   659,   301,   302,   303,   304,   305,   306,
     307,   308,   660,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,   323,   324,   325,   326,
     327,   328,   329,   661,   662,   663,   333,   334,   335,   336,
     664,   665,   338,   339,   666,   341,   667,   668,   343,   669,
     345,   346,   347,   670,   348,   349,   671,   672,   350,   351,
     352,   673,   674,   353,   354,   675,   676,   357,   677,   678,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
     370,   371,   372,   679,   680,   681,   682,   373,   374,   683,
     684,   377,   378,   685,   380,   381,   382,   686,   383,   384,
     385,   386,   387,   388,   389,   390,   687,   391,   392,   393,
     688,   395,   396,   397,   398,   689,   399,   400,   401,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     690,   413,   414,   691,   416,   417,   418,   692,   420,   421,
     422,   423,   424,   425,   426,   427,   428,   429,   430,   431,
     432,   693,   694,   433,   434,   435,   436,   437,   438,   695,
     440,   441,   442,   696,   697,   444,   445,   698,   447,   699,
     448,   449,   450,   451,   452,   453,   454,   455,   456,   457,
     458,   459,   460,   700,   462,   701,   702,   703,   464,   465,
     704,   466,   705,   468,   469,   470,   471,   472,   706,   473,
     707,   708,   709,   476,   710,   477,   478,   711,   480,   712,
     713,   482,   483,   714,   485,   486,   487,   488,   489,   715,
     716,   490,   491,   492,   717,   493,   494,   495,   496,   718,
     497,   498,   499,   500,   501,   719,   720,   721,   504,   722,
     506,   507,   508,   509,   510,   511,   512,   513,   514,   723,
     724,   515,   725,   726,   516,   517,   518,   519,   520,   521,
     727,   728,   729,   730,   731,   732,   733,   734,   735,   736,
     737,   533,   534,   535,   536,   579,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   120,   121,   122,   123,   124,   125,
     126,   127,   128,   580,   129,   130,   131,   581,   582,   583,
     584,   585,   132,   586,   587,   588,   589,   134,   135,   590,
     136,   137,   138,   591,   140,   141,   142,   592,   593,   594,
     595,   596,   597,   148,   149,   150,   151,   152,   153,   598,
     599,   154,   155,   156,   157,   600,   601,   160,   602,   161,
     162,   163,   164,   603,   604,   605,   606,   607,   168,   169,
     170,   171,   172,   608,   174,   175,   176,   609,   177,   178,
     179,   180,   181,   182,   610,   611,   184,   185,   186,   187,
     188,   189,   190,   191,   192,   193,   613,   195,   196,   614,
     198,   615,   199,   616,   200,   201,   202,   203,   204,   205,
     617,   618,   206,   207,   208,   209,   210,   619,   620,   211,
     212,   213,   214,   215,   216,   217,   621,   218,   219,   220,
     622,   221,   222,   223,   623,   224,   225,   226,   227,   624,
     229,   230,   231,   232,   233,   625,   626,   235,   627,   236,
     237,   628,   239,   629,   240,   630,   241,   631,   632,   633,
     244,   245,   634,   635,   248,   636,   249,   250,   637,   638,
     639,   640,   253,   254,   641,   255,   256,   257,   258,   259,
    1027,   261,   642,   263,   264,   265,   266,   643,   267,   268,
     269,   270,   271,   272,   273,   644,   274,   645,   646,   277,
     278,   279,   280,   281,   647,   648,   649,   650,   651,   285,
     652,   653,   288,   654,   290,   291,   292,   293,   294,   295,
     296,   655,   656,   297,   657,   299,   658,   659,   301,   302,
     303,   304,   305,   306,   307,   308,   660,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
     323,   324,   325,   326,   327,   328,   329,   661,   662,   663,
     333,   334,   335,   336,   664,   665,   338,   339,   666,   341,
     667,   668,   343,   669,   345,   346,   347,   670,   348,   349,
     671,   672,   350,   351,   352,   673,   674,   353,   354,   675,
     676,   357,   677,   678,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,   679,   680,   681,
     682,   373,   374,   683,   684,   377,   378,   685,   380,   381,
     382,   686,   383,   384,   385,   386,   387,   388,   389,   390,
     687,   391,   392,   393,   688,   395,   396,   397,   398,   689,
     399,   400,   401,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   690,   413,   414,   691,   416,   417,
     418,   692,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   429,   430,   431,   432,   693,   694,   433,   434,   435,
     436,   437,   438,   695,   440,   441,   442,   696,   697,   444,
     445,   698,   447,   699,   448,   449,   450,   451,   452,   453,
     454,   455,   456,   457,   458,   459,   460,   700,   462,   701,
     702,   703,   464,   465,   704,   466,   705,   468,   469,   470,
     471,   472,   706,   473,   707,   708,   709,   476,   710,   477,
     478,   711,   480,   712,   713,   482,   483,   714,   485,   486,
     487,   488,   489,   715,   716,   490,   491,   492,   717,   493,
     494,   495,   496,   718,   497,   498,   499,   500,   501,   719,
     720,   721,   504,   722,   506,   507,   508,   509,   510,   511,
     512,   513,   514,   723,   724,   515,   725,   726,   516,   517,
     518,   519,   520,   521,   727,   728,   729,   730,   731,   732,
     733,   734,   735,   736,   737,   533,   534,   535,   536,   579,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   120,   121,
     122,   123,   124,   125,   126,   127,   128,   580,   129,   130,
     131,   581,   582,   583,   584,   585,   132,   586,   587,   588,
     589,   134,   135,   590,   136,   137,   138,   591,   140,   141,
     142,   592,   593,   594,   595,   596,   597,   148,   149,   150,
     151,   152,   153,   598,   599,   154,   155,   156,   157,   600,
     601,   160,   602,   161,   162,   163,   164,   603,   604,   605,
     606,   607,   168,   169,   170,   171,   172,   608,   174,   175,
     176,   609,   177,   178,   179,   180,   181,   182,   610,   611,
     184,   185,   186,   187,   188,   189,   190,   191,   192,   193,
     613,   195,   196,   614,   198,   615,   199,   616,   200,   201,
     202,   203,   204,   205,   617,   618,   206,   207,   208,   209,
     210,   619,   620,   211,   212,   213,   214,   215,   216,   217,
     621,   218,   219,   220,   622,   221,   222,   223,   623,   224,
     225,   226,   227,   624,   229,   230,   231,   232,   233,   625,
     626,   235,   627,   236,   237,   628,   239,   629,   240,   630,
     241,   631,   632,   633,   244,   245,   634,   635,   248,   636,
     249,   250,   637,   638,   639,   640,   253,   254,   641,   255,
     256,   257,   258,   259,   260,   261,   642,   263,   264,   265,
     266,   643,   267,   268,   269,   270,   271,   272,   273,   644,
     274,   645,   646,   277,   278,   279,   280,   281,   647,   648,
     649,   650,   651,   285,   652,   653,   288,   654,   290,   291,
     292,   293,   294,   295,   296,   655,   656,   297,   657,   299,
     658,   659,   301,   302,   303,   304,   305,   306,   307,   308,
     660,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     329,   661,   662,   663,   333,   334,   335,   336,   664,   665,
     338,   339,   666,   341,   667,   668,   343,   669,   345,   346,
     347,   670,   348,   349,   671,   672,   350,   351,   352,   673,
     674,   353,   354,   675,   676,   357,   677,   678,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,   679,   680,   681,   682,   373,   374,   683,   684,   377,
     378,   685,   380,   381,   382,   686,   383,   384,   385,   386,
     387,   388,   389,   390,   687,   391,   392,   393,   688,   395,
     396,   397,   398,   689,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   690,   413,
     414,   691,   416,   417,   418,   692,   420,   421,   422,   423,
     424,   425,   426,   427,   428,   429,   430,   431,   432,   693,
     694,   433,   434,   435,   436,   437,   438,   695,   440,   441,
     442,   696,   697,   444,   445,   698,   447,   699,   448,   449,
     450,   451,   452,   453,   454,   455,   456,   457,   458,   459,
     460,   700,   462,   701,   702,   703,   464,   465,   704,   466,
     705,   468,   469,   470,   471,   472,   706,   473,   707,   708,
     709,   476,   710,   477,   478,   711,   480,   712,   713,   482,
     483,   714,   485,   486,   487,   488,   489,   715,   716,   490,
     491,   492,   717,   493,   494,   495,   496,   718,   497,   498,
     499,   500,   501,   719,   720,   721,   504,   722,   506,   507,
     508,   509,   510,   511,   512,   513,   514,   723,   724,   515,
     725,   726,   516,   517,   518,   519,   520,   521,   727,   728,
     729,   730,   731,   732,   733,   734,   735,   736,   737,   533,
     534,   535,   536,   579,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   120,   121,   122,   123,   124,  2343,   126,   127,
     128,   580,   129,   130,   131,   581,   582,   583,   584,   585,
     132,   586,   587,   588,   589,   134,   135,   590,   136,   137,
     138,   591,   140,   141,   142,   592,   593,   594,   595,   596,
     597,   148,   149,   150,   151,   152,   153,   598,   599,   154,
     155,   156,   157,   600,   601,   160,   602,   161,   162,   163,
     164,   603,   604,   605,   606,   607,   168,   169,   170,   171,
     172,   608,   174,   175,   176,   609,   177,   178,   179,   180,
     181,   182,   610,   611,   184,   185,   186,   187,   188,   189,
     190,   191,   192,   193,   613,   195,   196,   614,   198,   615,
     199,   616,   200,   201,   202,   203,   204,   205,   617,   618,
     206,   207,   208,   209,   210,   619,   620,   211,   212,   213,
    2344,   215,   216,   217,   621,   218,   219,   220,   622,   221,
     222,   223,   623,   224,   225,   226,   227,   624,   229,   230,
     231,   232,   233,   625,   626,   235,   627,   236,   237,   628,
     239,   629,   240,   630,   241,   631,   632,   633,   244,   245,
     634,   635,   248,   636,   249,   250,   637,   638,   639,   640,
     253,   254,   641,   255,   256,   257,   258,   259,   260,   261,
     642,   263,   264,   265,   266,   643,   267,   268,   269,   270,
     271,   272,   273,   644,   274,   645,   646,   277,   278,   279,
     280,   281,   647,   648,   649,   650,   651,   285,   652,   653,
     288,   654,   290,   291,   292,   293,   294,   295,   296,   655,
     656,   297,   657,   299,   658,   659,   301,   302,   303,   304,
     305,   306,   307,   308,   660,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   661,   662,   663,   333,   334,
     335,   336,   664,   665,   338,   339,   666,   341,   667,   668,
     343,   669,   345,   346,   347,   670,   348,   349,   671,   672,
     350,   351,   352,   673,   674,   353,   354,   675,   676,   357,
     677,   678,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,   371,   372,   679,   680,   681,   682,   373,
     374,   683,   684,   377,   378,   685,   380,   381,   382,   686,
     383,   384,   385,   386,   387,   388,   389,   390,   687,   391,
     392,   393,   688,   395,   396,   397,   398,   689,   399,   400,
     401,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,   690,   413,   414,   691,   416,   417,   418,   692,
     420,   421,   422,   423,   424,   425,   426,   427,   428,   429,
     430,   431,   432,   693,   694,   433,   434,   435,   436,   437,
    2345,   695,   440,   441,   442,   696,   697,   444,   445,   698,
     447,   699,   448,   449,   450,   451,   452,   453,   454,   455,
     456,   457,   458,   459,   460,   700,   462,   701,   702,   703,
     464,   465,   704,   466,   705,   468,   469,   470,   471,   472,
     706,   473,   707,   708,   709,   476,   710,   477,   478,   711,
     480,   712,   713,   482,   483,   714,   485,   486,   487,   488,
     489,   715,   716,   490,   491,   492,   717,   493,   494,   495,
     496,   718,   497,   498,   499,   500,   501,   719,   720,   721,
     504,   722,   506,   507,   508,   509,   510,   511,   512,   513,
     514,   723,   724,   515,   725,   726,   516,   517,   518,   519,
     520,   521,   727,   728,   729,   730,   731,   732,   733,   734,
     735,   736,   737,   533,   534,   535,   536,  1052,     0,   843,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   120,   121,   122,   123,
     124,   125,   126,   127,   128,     0,   129,   130,   131,     0,
       0,     0,   584,     0,   132,     0,     0,     0,   589,   134,
     135,     0,   136,   137,   138,   591,   140,   141,   142,   592,
     593,   594,   595,   596,     0,   148,   149,   150,   151,   152,
     153,     0,     0,   154,   155,   156,   157,   600,   601,   160,
       0,   161,   162,   163,   164,   603,     0,   605,     0,   607,
     168,   169,   170,   171,   172,   608,   174,   175,   176,     0,
     177,   178,   179,   180,   181,   182,     0,   611,   184,   185,
     186,   187,   188,   189,   190,   191,   192,   193,   613,   195,
     196,   614,   198,     0,   199,     0,   200,   201,   202,   203,
     204,   205,     0,     0,   206,   207,   208,   209,   210,     0,
       0,   211,   212,   213,   214,   215,   216,   217,     0,   218,
     219,   220,     0,   221,   222,   223,     0,   224,   225,   226,
     227,   624,   229,   230,   231,   232,   233,   625,  1437,   235,
       0,   236,   237,   628,   239,     0,   240,     0,   241,   631,
       0,   633,   244,   245,   634,   635,   248,     0,   249,   250,
       0,     0,   639,   640,   253,   254,     0,   255,   256,   257,
     258,   259,   260,   261,   642,   263,   264,   265,   266,     0,
     267,   268,   269,   270,   271,   272,   273,     0,   274,   645,
     646,   277,   278,   279,   280,   281,   647,   648,     0,   650,
       0,   285,   652,   653,   288,   654,   290,   291,   292,   293,
     294,   295,   296,     0,     0,   297,   657,   299,   658,     0,
     301,   302,   303,   304,   305,   306,   307,   308,   660,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,   322,   323,   324,   325,   326,   327,   328,   329,   661,
     662,   663,   333,   334,   335,   336,   664,     0,   338,   339,
     666,   341,     0,   668,   343,   669,   345,   346,   347,     0,
     348,   349,  1438,     0,   350,   351,   352,     0,     0,   353,
     354,   675,   676,   357,   677,   678,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,   371,   372,     0,
       0,     0,     0,   373,   374,   683,   684,   377,   378,   685,
     380,   381,   382,     0,   383,   384,   385,   386,   387,   388,
     389,   390,     0,   391,   392,   393,   688,   395,   396,   397,
     398,     0,   399,   400,   401,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,     0,   413,   414,   691,
     416,   417,   418,   692,   420,   421,   422,   423,   424,   425,
     426,   427,   428,   429,   430,   431,   432,     0,   694,   433,
     434,   435,   436,   437,   438,   695,   440,   441,   442,     0,
     697,   444,   445,   698,   447,     0,   448,   449,   450,   451,
     452,   453,   454,   455,   456,   457,   458,   459,   460,   700,
     462,   701,     0,     0,   464,   465,     0,   466,   705,   468,
     469,   470,   471,   472,     0,   473,   707,   708,     0,   476,
       0,   477,   478,   711,   480,   712,  1439,   482,   483,   714,
     485,   486,   487,   488,   489,     0,     0,   490,   491,   492,
       0,   493,   494,   495,   496,     0,   497,   498,   499,   500,
     501,   719,   720,     0,   504,   722,   506,   507,   508,   509,
     510,   511,   512,   513,   514,     0,     0,   515,     0,     0,
     516,   517,   518,   519,   520,   521,   727,   728,   729,   730,
     731,   732,   733,   734,   735,   736,   737,   533,   534,   535,
     536,  1052,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     120,   121,   122,   123,   124,   125,   126,   127,   128,     0,
     129,   130,   131,     3,     4,     0,   584,     0,   132,     0,
       0,     0,   589,   134,   135,     0,   136,   137,   138,   591,
     140,   141,   142,   592,   593,   594,   595,   596,     0,   148,
     149,   150,   151,   152,   153,     0,     0,   154,   155,   156,
     157,   600,   601,   160,     0,   161,   162,   163,   164,   603,
       0,   605,     0,   607,   168,   169,   170,   171,   172,   608,
     174,   175,   176,     0,   177,   178,   179,   180,   181,   182,
       0,   611,   184,   185,   186,   187,   188,   189,   190,   191,
     192,   193,   613,   195,   196,   614,   198,     0,   199,     0,
     200,   201,   202,   203,   204,   205,     0,     0,   206,   207,
     208,   209,   210,     0,     0,   211,   212,   213,   214,   215,
     216,   217,     0,   218,   219,   220,     0,   221,   222,   223,
       0,   224,   225,   226,   227,   624,   229,   230,   231,   232,
     233,   625,     0,   235,     0,   236,   237,   628,   239,     0,
     240,     0,   241,   631,     0,   633,   244,   245,   634,   635,
     248,     0,   249,   250,     0,     0,   639,   640,   253,   254,
       0,   255,   256,   257,   258,   259,   260,   261,   642,   263,
     264,   265,   266,     0,   267,   268,   269,   270,   271,   272,
     273,     0,   274,   645,   646,   277,   278,   279,   280,   281,
     647,   648,     0,   650,     0,   285,   652,   653,   288,   654,
     290,   291,   292,   293,   294,   295,   296,     0,     0,   297,
     657,   299,   658,     0,   301,   302,   303,   304,   305,   306,
     307,   308,   660,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,   323,   324,   325,   326,
     327,   328,   329,   661,   662,   663,   333,   334,   335,   336,
     664,     0,   338,   339,   666,   341,     0,   668,   343,   669,
     345,   346,   347,     0,   348,   349,     0,     0,   350,   351,
     352,     0,     0,   353,   354,   675,   676,   357,   677,   678,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
     370,   371,   372,     0,     0,     0,     0,   373,   374,   683,
     684,   377,   378,   685,   380,   381,   382,     0,   383,   384,
     385,   386,   387,   388,   389,   390,     0,   391,   392,   393,
     688,   395,   396,   397,   398,     0,   399,   400,   401,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
       0,   413,   414,   691,   416,   417,   418,   692,   420,   421,
     422,   423,   424,   425,   426,   427,   428,   429,   430,   431,
     432,     0,   694,   433,   434,   435,   436,   437,   438,   695,
     440,   441,   442,     0,   697,   444,   445,   698,   447,     0,
     448,   449,   450,   451,   452,   453,   454,   455,   456,   457,
     458,   459,   460,   700,   462,   701,     0,     0,   464,   465,
       0,   466,   705,   468,   469,   470,   471,   472,     0,   473,
     707,   708,     0,   476,     0,   477,   478,   711,   480,   712,
       0,   482,   483,   714,   485,   486,   487,   488,   489,     0,
       0,   490,   491,   492,     0,   493,   494,   495,   496,     0,
     497,   498,   499,   500,   501,   719,   720,     0,   504,   722,
     506,   507,   508,   509,   510,   511,   512,   513,   514,     0,
       0,   515,     0,     0,   516,   517,   518,   519,   520,   521,
     727,   728,   729,   730,   731,   732,   733,   734,   735,   736,
     737,   533,   534,   535,   536,   119,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   120,   121,   122,   123,   124,   125,
     126,   127,   128,     0,   129,   130,   131,     0,     0,     0,
       0,     0,   132,     0,     0,     0,   133,   134,   135,     0,
     136,   137,   138,   139,   140,   141,   142,   143,   144,   145,
     146,   147,     0,   148,   149,   150,   151,   152,   153,     0,
     812,   154,   155,   156,   157,   158,   159,   160,     0,   161,
     162,   163,   164,   813,     0,   814,     0,   167,   168,   169,
     170,   171,   172,   173,   174,   175,   176,     0,   177,   178,
     179,   180,   181,   182,     0,   183,   184,   185,   186,   187,
     188,   189,   190,   191,   192,   193,   194,   195,   196,   197,
     198,     0,   199,     0,   200,   201,   202,   203,   204,   205,
       0,     0,   206,   207,   208,   209,   210,     0,     0,   211,
     212,   213,   214,   215,   216,   217,     0,   218,   219,   220,
       0,   221,   222,   223,     0,   224,   225,   226,   227,   228,
     229,   230,   231,   232,   233,   815,     0,   235,     0,   236,
     237,   238,   239,     0,   240,     0,   241,   242,     0,   243,
     244,   245,   246,   247,   248,     0,   249,   250,     0,     0,
     251,   252,   253,   254,     0,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,     0,   267,   268,
     269,   270,   271,   272,   273,     0,   274,   275,   276,   277,
     278,   279,   280,   281,   282,   283,     0,   284,     0,   285,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,     0,     0,   297,   298,   299,   300,     0,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
     323,   324,   325,   326,   327,   328,   329,   330,   331,   332,
     333,   334,   335,   336,   337,     0,   338,   339,   340,   341,
       0,   818,   343,   344,   345,   346,   347,     0,   348,   349,
       0,     0,   350,   351,   352,     0,     0,   353,   354,   355,
     356,   357,   358,   820,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,     0,     0,     0,
       0,   373,   374,   821,   376,   377,   378,   379,   380,   381,
     382,     0,   383,   384,   385,   386,   387,   388,   389,   390,
       0,   391,   392,   393,   394,   395,   396,   397,   398,     0,
     399,   400,   401,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,     0,   413,   414,   415,   416,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   429,   430,   431,   432,     0,     0,   433,   434,   435,
     436,   437,   438,   439,   440,   441,   442,     0,   443,   444,
     445,   446,   447,     0,   448,   449,   450,   451,   452,   453,
     454,   455,   456,   457,   458,   459,   460,   461,   462,   823,
       0,     0,   464,   465,     0,   466,   467,   468,   469,   470,
     471,   472,     0,   473,   474,   475,     0,   476,     0,   477,
     478,   824,   480,   825,     0,   482,   483,   826,   485,   486,
     487,   488,   489,     0,     0,   490,   491,   492,     0,   493,
     494,   495,   496,     0,   497,   498,   499,   500,   501,   502,
     503,     0,   504,   505,   506,   507,   508,   509,   510,   511,
     512,   513,   514,     0,     0,   515,     0,     0,   516,   517,
     518,   519,   520,   521,   522,   523,   524,   525,   526,   527,
     528,   529,   530,   531,   532,   533,   534,   535,   536,   119,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   120,   121,
     122,   123,   124,   125,   126,   127,   128,     0,   129,   130,
     131,     0,     0,     0,     0,     0,   132,     0,     0,     0,
     133,   134,   135,     0,   136,   137,   138,   139,   140,   141,
     142,   143,   144,   145,   146,   147,     0,   148,   149,   150,
     151,   152,   153,     0,     0,   154,   155,   156,   157,   158,
     159,   160,     0,   161,   162,   163,   164,   165,     0,   166,
       0,   167,   168,   169,   170,   171,   172,   173,   174,   175,
     176,     0,   177,   178,   179,   180,   181,   182,     0,   183,
     184,   185,   186,   187,   188,   189,   190,   191,   192,   193,
     194,   195,   196,   197,   198,     0,   199,     0,   200,   201,
     202,   203,   204,   205,     0,     0,   206,   207,   208,   209,
     210,     0,     0,   211,   212,   213,   214,   215,   216,   217,
       0,   218,   219,   220,     0,   221,   222,   223,     0,   224,
     225,   226,   227,   228,   229,   230,   231,   232,   233,   234,
       0,   235,     0,   236,   237,   238,   239,     0,   240,     0,
     241,   242,     0,   243,   244,   245,   246,   247,   248,     0,
     249,   250,     0,     0,   251,   252,   253,   254,     0,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,     0,   267,   268,   269,   270,   271,   272,   273,     0,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
       0,   284,     0,   285,   286,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,     0,     0,   297,   298,   299,
     300,     0,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     329,   330,   331,   332,   333,   334,   335,   336,   337,     0,
     338,   339,   340,   341,     0,   342,   343,   344,   345,   346,
     347,     0,   348,   349,     0,     0,   350,   351,   352,     0,
       0,   353,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,     0,     0,     0,     0,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,     0,   383,   384,   385,   386,
     387,   388,   389,   390,     0,   391,   392,   393,   394,   395,
     396,   397,   398,     0,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,     0,   413,
     414,   415,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,   428,   429,   430,   431,   432,     0,
       0,   433,   434,   435,   436,   437,   438,   439,   440,   441,
     442,     0,   443,   444,   445,   446,   447,     0,   448,   449,
     450,   451,   452,   453,   454,   455,   456,   457,   458,   459,
     460,   461,   462,   463,     0,     0,   464,   465,     0,   466,
     467,   468,   469,   470,   471,   472,     0,   473,   474,   475,
       0,   476,     0,   477,   478,   479,   480,   481,     0,   482,
     483,   484,   485,   486,   487,   488,   489,     0,     0,   490,
     491,   492,     0,   493,   494,   495,   496,     0,   497,   498,
     499,   500,   501,   502,   503,     0,   504,   505,   506,   507,
     508,   509,   510,   511,   512,   513,   514,     0,     0,   515,
       0,     0,   516,   517,   518,   519,   520,   521,   522,   523,
     524,   525,   526,   527,   528,   529,   530,   531,   532,   533,
     534,   535,   536,   545,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   120,   121,   122,   123,   124,   125,   126,   127,
     128,     0,   129,   130,   131,     0,     0,     0,     0,     0,
     132,     0,     0,     0,     0,   134,   135,     0,   136,   137,
     138,     0,   140,   141,   142,   143,   144,     0,   146,   147,
       0,   148,   149,   150,   151,   152,   153,     0,     0,   154,
     155,   156,   157,   158,   159,   160,  1838,   161,   162,   163,
     164,   165,     0,     0,  1839,   167,   168,   169,   170,   171,
     172,     0,   174,   175,   176,  1840,   177,   178,   179,   180,
     181,   182,     0,     0,   184,   185,   186,   187,   188,   189,
     190,   191,   192,   193,   194,   195,   196,   197,   198,     0,
     199,     0,   200,   201,   202,   203,   204,   205,     0,     0,
     206,   207,   208,   209,   210,     0,     0,   211,   212,   213,
     214,   215,   216,   217,     0,   218,   219,   220,     0,   221,
     222,   223,     0,   224,   225,   226,   227,   228,   229,   230,
     231,   232,   233,   234,     0,   235,     0,   236,   237,   238,
     239,     0,   240,  1841,   241,     0,     0,     0,   244,   245,
     546,     0,   248,     0,   249,   250,     0,     0,   251,   252,
     253,   254,     0,   255,   256,   257,   258,   259,  1842,   261,
       0,   263,   264,   265,   266,     0,   267,   268,   269,   270,
     271,   272,   273,     0,   274,     0,   276,   277,   278,   279,
     280,   281,   282,   283,     0,   284,     0,   285,     0,     0,
     288,     0,   290,   291,   292,   293,   294,   295,   296,     0,
       0,   297,     0,   299,     0,     0,   301,   302,   303,   304,
     305,   306,   307,   308,   547,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,     0,   332,   333,   334,
     335,   336,   337,     0,   338,   339,     0,   341,     0,   342,
     343,   344,   345,   346,   347,     0,   348,   349,     0,     0,
     350,   351,   352,     0,     0,   353,   354,   355,     0,   357,
       0,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,   371,   372,     0,     0,     0,     0,   373,
     374,   375,     0,   377,   378,   379,   380,   381,   382,  1843,
     383,   384,   385,   386,   387,   388,   389,   390,     0,   391,
     392,   393,   394,   395,   396,   397,   398,     0,   399,   400,
     401,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,     0,   413,   414,     0,   416,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,   428,   429,
     430,   431,   432,     0,     0,   433,   434,   435,   436,   437,
     438,   439,   440,   441,   442,     0,     0,   444,   445,   446,
     447,     0,   448,   449,   450,   451,   452,   453,   454,   455,
     456,   457,   458,   459,   460,   548,   462,   463,     0,     0,
     464,   465,     0,   466,     0,   468,   469,   470,   471,   472,
       0,   473,   474,   475,     0,   476,     0,   477,   478,   479,
     480,   481,     0,   482,   483,   484,   485,   486,   487,   488,
     489,     0,  1844,   490,   491,   492,     0,   493,   494,   495,
     496,     0,   497,   498,   499,   500,   501,   502,   503,     0,
     504,     0,   506,   507,   508,   509,   510,   511,   512,   513,
     514,     0,     0,   515,     0,     0,   516,   517,   518,   519,
     520,   521,   522,   523,   524,   525,   526,   527,   528,   529,
     530,   531,   532,   533,   534,   535,   536,   545,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   120,   121,   122,   123,
     124,   125,   126,   127,   128,     0,   129,   130,   131,     0,
       0,     0,     0,     0,   132,     0,     0,     0,     0,   134,
     135,     0,   136,   137,   138,     0,   140,   141,   142,   143,
     144,     0,   146,   147,     0,   148,   149,   150,   151,   152,
     153,     0,     0,   154,   155,   156,   157,   158,   159,   160,
    1838,   161,   162,   163,   164,   165,     0,     0,     0,   167,
     168,   169,   170,   171,   172,     0,   174,   175,   176,  1840,
     177,   178,   179,   180,   181,   182,     0,     0,   184,   185,
     186,   187,   188,   189,   190,   191,   192,   193,   194,   195,
     196,   197,   198,     0,   199,     0,   200,   201,   202,   203,
     204,   205,     0,     0,   206,   207,   208,   209,   210,     0,
       0,   211,   212,   213,   214,   215,   216,   217,     0,   218,
     219,   220,     0,   221,   222,   223,     0,   224,   225,   226,
     227,   228,   229,   230,   231,   232,   233,   234,     0,   235,
       0,   236,   237,   238,   239,     0,   240,  1841,   241,     0,
       0,     0,   244,   245,   546,     0,   248,     0,   249,   250,
       0,     0,   251,   252,   253,   254,     0,   255,   256,   257,
     258,   259,   260,   261,     0,   263,   264,   265,   266,     0,
     267,   268,   269,   270,   271,   272,   273,     0,   274,     0,
     276,   277,   278,   279,   280,   281,   282,   283,     0,   284,
       0,   285,     0,     0,   288,     0,   290,   291,   292,   293,
     294,   295,   296,     0,     0,   297,     0,   299,  2427,     0,
     301,   302,   303,   304,   305,   306,   307,   308,   547,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,   322,   323,   324,   325,   326,   327,   328,   329,   330,
       0,   332,   333,   334,   335,   336,   337,     0,   338,   339,
       0,   341,     0,   342,   343,   344,   345,   346,   347,     0,
     348,   349,     0,     0,   350,   351,   352,     0,     0,   353,
     354,   355,     0,   357,     0,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,   371,   372,     0,
       0,     0,     0,   373,   374,   375,     0,   377,   378,   379,
     380,   381,   382,  1843,   383,   384,   385,   386,   387,   388,
     389,   390,     0,   391,   392,   393,   394,   395,   396,   397,
     398,     0,   399,   400,   401,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,     0,   413,   414,     0,
     416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,   428,   429,   430,   431,   432,     0,     0,   433,
     434,   435,   436,   437,   438,   439,   440,   441,   442,     0,
       0,   444,   445,   446,   447,     0,   448,   449,   450,   451,
     452,   453,   454,   455,   456,   457,   458,   459,   460,   548,
     462,   463,     0,     0,   464,   465,     0,   466,     0,   468,
     469,   470,   471,   472,     0,   473,   474,   475,     0,   476,
       0,   477,   478,   479,   480,   481,     0,   482,   483,   484,
     485,   486,   487,   488,   489,     0,  1844,   490,   491,   492,
       0,   493,   494,   495,   496,     0,   497,   498,   499,   500,
     501,   502,   503,     0,   504,     0,   506,   507,   508,   509,
     510,   511,   512,   513,   514,     0,     0,   515,     0,     0,
     516,   517,   518,   519,   520,   521,   522,   523,   524,   525,
     526,   527,   528,   529,   530,   531,   532,   533,   534,   535,
     536,   545,     0,   573,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     120,   121,   122,   123,   124,   125,   126,   127,   128,     0,
     129,   130,   131,     3,     4,     0,     0,     0,   132,     0,
       0,     0,     0,   134,   135,     0,   136,   137,   138,     0,
     140,   141,   142,   143,   144,     0,   146,   147,     0,   148,
     149,   150,   151,   152,   153,     0,     0,   154,   155,   156,
     157,   158,   159,   160,     0,   161,   162,   163,   164,   165,
       0,     0,     0,   167,   168,   169,   170,   171,   172,     0,
     174,   175,   176,     0,   177,   178,   179,   180,   181,   182,
       0,     0,   184,   185,   186,   187,   188,   189,   190,   191,
     192,   193,   194,   195,   196,   197,   198,     0,   199,     0,
     200,   201,   202,   203,   204,   205,     0,     0,   206,   207,
     208,   209,   210,     0,     0,   211,   212,   213,   214,   215,
     216,   217,     0,   218,   219,   220,     0,   221,   222,   223,
       0,   224,   225,   226,   227,   228,   229,   230,   231,   232,
     233,   234,     0,   235,     0,   236,   237,   238,   239,     0,
     240,     0,   241,     0,     0,     0,   244,   245,   546,     0,
     248,     0,   249,   250,     0,     0,   251,   252,   253,   254,
       0,   255,   256,   257,   258,   259,   260,   261,     0,   263,
     264,   265,   266,     0,   267,   268,   269,   270,   271,   272,
     273,     0,   274,     0,   276,   277,   278,   279,   280,   281,
     282,   283,     0,   284,     0,   285,     0,     0,   288,     0,
     290,   291,   292,   293,   294,   295,   296,     0,     0,   297,
       0,   299,     0,     0,   301,   302,   303,   304,   305,   306,
     307,   308,   547,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,   323,   324,   325,   326,
     327,   328,   329,   330,     0,   332,   333,   334,   335,   336,
     337,     0,   338,   339,     0,   341,     0,   342,   343,   344,
     345,   346,   347,     0,   348,   349,     0,     0,   350,   351,
     352,     0,     0,   353,   354,   355,     0,   357,     0,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
     370,   371,   372,     0,     0,     0,     0,   373,   374,   375,
       0,   377,   378,   379,   380,   381,   382,     0,   383,   384,
     385,   386,   387,   388,   389,   390,     0,   391,   392,   393,
     394,   395,   396,   397,   398,     0,   399,   400,   401,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
       0,   413,   414,     0,   416,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,   428,   429,   430,   431,
     432,     0,     0,   433,   434,   435,   436,   437,   438,   439,
     440,   441,   442,     0,     0,   444,   445,   446,   447,     0,
     448,   449,   450,   451,   452,   453,   454,   455,   456,   457,
     458,   459,   460,   548,   462,   463,     0,     0,   464,   465,
       0,   466,     0,   468,   469,   470,   471,   472,     0,   473,
     474,   475,     0,   476,     0,   477,   478,   479,   480,   481,
       0,   482,   483,   484,   485,   486,   487,   488,   489,     0,
       0,   490,   491,   492,     0,   493,   494,   495,   496,     0,
     497,   498,   499,   500,   501,   502,   503,     0,   504,     0,
     506,   507,   508,   509,   510,   511,   512,   513,   514,     0,
       0,   515,     0,     0,   516,   517,   518,   519,   520,   521,
     522,   523,   524,   525,   526,   527,   528,   529,   530,   531,
     532,   533,   534,   535,   536,   545,     0,   573,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   120,   121,   122,   123,   124,   125,
     126,   127,   128,   574,   129,   130,   131,     0,     0,     0,
       0,     0,   132,     0,     0,     0,     0,   134,   135,     0,
     136,   137,   138,     0,   140,   141,   142,   143,   144,     0,
     146,   147,     0,   148,   149,   150,   151,   152,   153,     0,
       0,   154,   155,   156,   157,   158,   159,   160,     0,   161,
     162,   163,   164,   165,     0,     0,     0,   167,   168,   169,
     170,   171,   172,     0,   174,   175,   176,     0,   177,   178,
     179,   180,   181,   182,     0,     0,   184,   185,   186,   187,
     188,   189,   190,   191,   192,   193,   194,   195,   196,   197,
     198,     0,   199,     0,   200,   201,   202,   203,   204,   205,
       0,     0,   206,   207,   208,   209,   210,     0,     0,   211,
     212,   213,   214,   215,   216,   217,     0,   218,   219,   220,
       0,   221,   222,   223,     0,   224,   225,   226,   227,   228,
     229,   230,   231,   232,   233,   234,     0,   235,     0,   236,
     237,   238,   239,     0,   240,     0,   241,     0,     0,     0,
     244,   245,   546,     0,   248,     0,   249,   250,     0,     0,
     251,   252,   253,   254,     0,   255,   256,   257,   258,   259,
     260,   261,     0,   263,   264,   265,   266,     0,   267,   268,
     269,   270,   271,   272,   273,     0,   274,     0,   276,   277,
     278,   279,   280,   281,   282,   283,     0,   284,     0,   285,
       0,     0,   288,     0,   290,   291,   292,   293,   294,   295,
     296,     0,     0,   297,     0,   299,     0,     0,   301,   302,
     303,   304,   305,   306,   307,   308,   547,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
     323,   324,   325,   326,   327,   328,   329,   330,     0,   332,
     333,   334,   335,   336,   337,     0,   338,   339,     0,   341,
       0,   342,   343,   344,   345,   346,   347,     0,   348,   349,
       0,     0,   350,   351,   352,     0,     0,   353,   354,   355,
       0,   357,     0,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,     0,     0,     0,
       0,   373,   374,   375,     0,   377,   378,   379,   575,   381,
     382,     0,   383,   384,   385,   386,   387,   388,   389,   390,
       0,   391,   392,   393,   394,   395,   396,   397,   398,     0,
     399,   400,   401,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,     0,   413,   414,     0,   416,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   429,   430,   431,   432,     0,     0,   433,   434,   435,
     436,   437,   438,   439,   440,   441,   442,     0,     0,   444,
     445,   446,   447,     0,   448,   449,   450,   451,   452,   453,
     454,   455,   456,   457,   458,   459,   460,   548,   462,   463,
       0,     0,   464,   465,     0,   466,     0,   468,   469,   470,
     471,   472,     0,   473,   474,   475,     0,   476,     0,   477,
     478,   479,   480,   481,     0,   482,   483,   484,   485,   486,
     487,   488,   489,     0,     0,   490,   491,   492,     0,   493,
     494,   495,   496,     0,   497,   498,   499,   500,   501,   502,
     503,     0,   504,     0,   506,   507,   508,   509,   510,   511,
     512,   513,   514,     0,     0,   515,     0,     0,   516,   517,
     518,   519,   520,   521,   522,   523,   524,   525,   526,   527,
     528,   529,   530,   531,   532,   533,   534,   535,   536,   545,
       0,   573,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   120,   121,
     122,   123,   124,   125,   126,   127,   128,     0,   129,   130,
     131,     0,     0,     0,     0,     0,   132,     0,     0,     0,
       0,   134,   135,     0,   136,   137,   138,     0,   140,   141,
     142,   143,   144,     0,   146,   147,     0,   148,   149,   150,
     151,   152,   153,     0,     0,   154,   155,   156,   157,   158,
     159,   160,     0,   161,   162,   163,   164,   165,     0,     0,
       0,   167,   168,   169,   170,   171,   172,     0,   174,   175,
     176,     0,   177,   178,   179,   180,   181,   182,     0,     0,
     184,   185,   186,   187,   188,   189,   190,   191,   192,   193,
     194,   195,   196,   197,   198,     0,   199,     0,   200,   201,
     202,   203,   204,   205,     0,     0,   206,   207,   208,   209,
     210,     0,     0,   211,   212,   213,   214,   215,   216,   217,
       0,   218,   219,   220,     0,   221,   222,   223,     0,   224,
     225,   226,   227,   228,   229,   230,   231,   232,   233,   234,
       0,   235,     0,   236,   237,   238,   239,     0,   240,     0,
     241,     0,     0,     0,   244,   245,   546,     0,   248,     0,
     249,   250,     0,     0,   251,   252,   253,   254,     0,   255,
     256,   257,   258,   259,   260,   261,     0,   263,   264,   265,
     266,     0,   267,   268,   269,   270,   271,   272,   273,     0,
     274,     0,   276,   277,   278,   279,   280,   281,   282,   283,
       0,   284,     0,   285,     0,     0,   288,     0,   290,   291,
     292,   293,   294,   295,   296,     0,     0,   297,     0,   299,
       0,     0,   301,   302,   303,   304,   305,   306,   307,   308,
     547,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     329,   330,     0,   332,   333,   334,   335,   336,   337,     0,
     338,   339,     0,   341,     0,   342,   343,   344,   345,   346,
     347,     0,   348,   349,     0,   819,   350,   351,   352,     0,
       0,   353,   354,   355,     0,   357,     0,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,     0,     0,     0,     0,   373,   374,   375,     0,   377,
     378,   379,   380,   381,   382,     0,   383,   384,   385,   386,
     387,   388,   389,   390,     0,   391,   392,   393,   394,   395,
     396,   397,   398,     0,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,     0,   413,
     414,     0,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,   428,   429,   430,   431,   432,     0,
       0,   433,   434,   435,   436,   437,   438,   439,   440,   441,
     442,     0,     0,   444,   445,   446,   447,     0,   448,   449,
     450,   451,   452,   453,   454,   455,   456,   457,   458,   459,
     460,   548,   462,   463,     0,     0,   464,   465,     0,   466,
       0,   468,   469,   470,   471,   472,     0,   473,   474,   475,
       0,   476,     0,   477,   478,   479,   480,   481,     0,   482,
     483,   484,   485,   486,   487,   488,   489,     0,     0,   490,
     491,   492,     0,   493,   494,   495,   496,     0,   497,   498,
     499,   500,   501,   502,   503,     0,   504,     0,   506,   507,
     508,   509,   510,   511,   512,   513,   514,     0,     0,   515,
       0,     0,   516,   517,   518,   519,   520,   521,   522,   523,
     524,   525,   526,   527,   528,   529,   530,   531,   532,   533,
     534,   535,   536,   545,     0,   573,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   120,   121,   122,   123,   124,   125,   126,   127,
     128,     0,   129,   130,   131,     0,     0,     0,     0,     0,
     132,     0,     0,     0,     0,   134,   135,     0,   136,   137,
     138,     0,   140,   141,   142,   143,   144,     0,   146,   147,
       0,   148,   149,   150,   151,   152,   153,     0,     0,   154,
     155,   156,   157,   158,   159,   160,     0,   161,   162,   163,
     164,   165,     0,     0,     0,   167,   168,   169,   170,   171,
     172,     0,   174,   175,   176,     0,   177,   178,   179,   180,
     181,   182,     0,     0,   184,   185,   186,   187,   188,   189,
     190,   191,   192,   193,   194,   195,   196,   197,   198,     0,
     199,     0,   200,   201,   202,   203,   204,   205,     0,     0,
     206,   207,   208,   209,   210,     0,     0,   211,   212,   213,
     214,   215,   216,   217,     0,   218,   219,   220,     0,   221,
     222,   223,     0,   224,   225,   226,   227,   228,   229,   230,
     231,   232,   233,   234,     0,   235,     0,   236,   237,   238,
     239,     0,   240,     0,   241,     0,     0,     0,   244,   245,
     546,     0,   248,     0,   249,   250,     0,     0,   251,   252,
     253,   254,     0,   255,   256,   257,   258,   259,   982,   261,
       0,   263,   264,   265,   266,     0,   267,   268,   269,   270,
     271,   272,   273,     0,   274,     0,   276,   277,   278,   279,
     280,   281,   282,   283,     0,   284,     0,   285,     0,     0,
     288,     0,   290,   291,   292,   293,   294,   295,   296,     0,
       0,   297,     0,   299,     0,     0,   301,   302,   303,   304,
     305,   306,   307,   308,   547,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,     0,   332,   333,   334,
     335,   336,   337,     0,   338,   339,     0,   341,     0,   342,
     343,   344,   345,   346,   347,     0,   348,   349,     0,   819,
     350,   351,   352,     0,     0,   353,   354,   355,     0,   357,
       0,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,   371,   372,     0,     0,     0,     0,   373,
     374,   375,     0,   377,   378,   379,   380,   381,   382,     0,
     383,   384,   385,   386,   387,   388,   389,   390,     0,   391,
     392,   393,   394,   395,   396,   397,   398,     0,   399,   400,
     401,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,     0,   413,   414,     0,   416,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,   428,   429,
     430,   431,   432,     0,     0,   433,   434,   435,   436,   437,
     438,   439,   440,   441,   442,     0,     0,   444,   445,   446,
     447,     0,   448,   449,   450,   451,   452,   453,   454,   455,
     456,   457,   458,   459,   460,   548,   462,   463,     0,     0,
     464,   465,     0,   466,     0,   468,   469,   470,   471,   472,
       0,   473,   474,   475,     0,   476,     0,   477,   478,   479,
     480,   481,     0,   482,   483,   484,   485,   486,   487,   488,
     489,     0,     0,   490,   491,   492,     0,   493,   494,   495,
     496,     0,   497,   498,   499,   500,   501,   502,   503,     0,
     504,     0,   506,   507,   508,   509,   510,   511,   512,   513,
     514,     0,     0,   515,     0,     0,   516,   517,   518,   519,
     520,   521,   522,   523,   524,   525,   526,   527,   528,   529,
     530,   531,   532,   533,   534,   535,   536,   545,     0,   573,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   120,   121,   122,   123,
     124,   125,   126,   127,   128,  1025,   129,   130,   131,     0,
       0,     0,     0,     0,   132,     0,     0,     0,     0,   134,
     135,     0,   136,   137,   138,     0,   140,   141,   142,   143,
     144,     0,   146,   147,     0,   148,   149,   150,   151,   152,
     153,     0,     0,   154,   155,   156,   157,   158,   159,   160,
       0,   161,   162,   163,   164,   165,     0,     0,     0,   167,
     168,   169,   170,   171,   172,     0,   174,   175,   176,     0,
     177,   178,   179,   180,   181,   182,     0,     0,   184,   185,
     186,   187,   188,   189,   190,   191,   192,   193,   194,   195,
     196,   197,   198,     0,   199,     0,   200,   201,   202,   203,
     204,   205,     0,     0,   206,   207,   208,   209,   210,     0,
       0,   211,   212,   213,   214,   215,   216,   217,     0,   218,
     219,   220,     0,   221,   222,   223,     0,   224,   225,   226,
     227,   228,   229,   230,   231,   232,   233,   234,     0,   235,
       0,   236,   237,   238,   239,     0,   240,     0,   241,     0,
       0,     0,   244,   245,   546,     0,   248,     0,   249,   250,
       0,     0,   251,   252,   253,   254,     0,   255,   256,   257,
     258,   259,   260,   261,     0,   263,   264,   265,   266,     0,
     267,   268,   269,   270,   271,   272,   273,     0,   274,     0,
     276,   277,   278,   279,   280,   281,   282,   283,     0,   284,
       0,   285,     0,     0,   288,     0,   290,   291,   292,   293,
     294,   295,   296,     0,     0,   297,     0,   299,     0,     0,
     301,   302,   303,   304,   305,   306,   307,   308,   547,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,   322,   323,   324,   325,   326,   327,   328,   329,   330,
       0,   332,   333,   334,   335,   336,   337,     0,   338,   339,
       0,   341,     0,   342,   343,   344,   345,   346,   347,     0,
     348,   349,     0,     0,   350,   351,   352,     0,     0,   353,
     354,   355,     0,   357,     0,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,   371,   372,     0,
       0,     0,     0,   373,   374,   375,     0,   377,   378,   379,
     380,   381,   382,     0,   383,   384,   385,   386,   387,   388,
     389,   390,     0,   391,   392,   393,   394,   395,   396,   397,
     398,     0,   399,   400,   401,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,     0,   413,   414,     0,
     416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,   428,   429,   430,   431,   432,     0,     0,   433,
     434,   435,   436,   437,   438,   439,   440,   441,   442,     0,
       0,   444,   445,   446,   447,     0,   448,   449,   450,   451,
     452,   453,   454,   455,   456,   457,   458,   459,   460,   548,
     462,   463,     0,     0,   464,   465,     0,   466,     0,   468,
     469,   470,   471,   472,     0,   473,   474,   475,     0,   476,
       0,   477,   478,   479,   480,   481,     0,   482,   483,   484,
     485,   486,   487,   488,   489,     0,     0,   490,   491,   492,
       0,   493,   494,   495,   496,     0,   497,   498,   499,   500,
     501,   502,   503,     0,   504,     0,   506,   507,   508,   509,
     510,   511,   512,   513,   514,     0,     0,   515,     0,     0,
     516,   517,   518,   519,   520,   521,   522,   523,   524,   525,
     526,   527,   528,   529,   530,   531,   532,   533,   534,   535,
     536,   545,  2047,     0,     0,     0,     0,  2048,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     120,   121,   122,   123,   124,   125,   126,   127,   128,     0,
     129,   130,   131,     0,     0,     0,     0,     0,   132,     0,
       0,     0,     0,   134,   135,     0,   136,   137,   138,     0,
     140,   141,   142,   143,   144,     0,   146,   147,     0,   148,
     149,   150,   151,   152,   153,     0,     0,   154,   155,   156,
     157,   158,   159,   160,     0,   161,   162,   163,   164,   165,
       0,     0,     0,   167,   168,   169,   170,   171,   172,     0,
     174,   175,   176,     0,   177,   178,   179,   180,   181,   182,
       0,     0,   184,   185,   186,   187,   188,   189,   190,   191,
     192,   193,   194,   195,   196,   197,   198,     0,   199,     0,
     200,   201,   202,   203,   204,   205,     0,     0,   206,   207,
     208,   209,   210,     0,     0,   211,   212,   213,   214,   215,
     216,   217,     0,   218,   219,   220,     0,   221,   222,   223,
       0,   224,   225,   226,   227,   228,   229,   230,   231,   232,
     233,   234,     0,   235,     0,   236,   237,   238,   239,     0,
     240,     0,   241,     0,     0,     0,   244,   245,   546,     0,
     248,     0,   249,   250,     0,     0,   251,   252,   253,   254,
       0,   255,   256,   257,   258,   259,   260,   261,     0,   263,
     264,   265,   266,     0,   267,   268,   269,   270,   271,   272,
     273,     0,   274,     0,   276,   277,   278,   279,   280,   281,
     282,   283,     0,   284,     0,   285,     0,     0,   288,     0,
     290,   291,   292,   293,   294,   295,   296,     0,     0,   297,
       0,   299,     0,     0,   301,   302,   303,   304,   305,   306,
     307,   308,   547,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,   323,   324,   325,   326,
     327,   328,   329,   330,     0,   332,   333,   334,   335,   336,
     337,     0,   338,   339,     0,   341,     0,   342,   343,   344,
     345,   346,   347,     0,   348,   349,     0,     0,   350,   351,
     352,     0,     0,   353,   354,   355,     0,   357,     0,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
     370,   371,   372,     0,     0,     0,     0,   373,   374,   375,
       0,   377,   378,   379,   380,   381,   382,     0,   383,   384,
     385,   386,   387,   388,   389,   390,     0,   391,   392,   393,
     394,   395,   396,   397,   398,     0,   399,   400,   401,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
       0,   413,   414,     0,   416,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,   428,   429,   430,   431,
     432,     0,     0,   433,   434,   435,   436,   437,   438,   439,
     440,   441,   442,     0,     0,   444,   445,   446,   447,     0,
     448,   449,   450,   451,   452,   453,   454,   455,   456,   457,
     458,   459,   460,   548,   462,   463,     0,     0,   464,   465,
       0,   466,     0,   468,   469,   470,   471,   472,     0,   473,
     474,   475,     0,   476,     0,   477,   478,   479,   480,   481,
       0,   482,   483,   484,   485,   486,   487,   488,   489,     0,
       0,   490,   491,   492,     0,   493,   494,   495,   496,     0,
     497,   498,   499,   500,   501,   502,   503,     0,   504,     0,
     506,   507,   508,   509,   510,   511,   512,   513,   514,     0,
       0,   515,     0,     0,   516,   517,   518,   519,   520,   521,
     522,   523,   524,   525,   526,   527,   528,   529,   530,   531,
     532,   533,   534,   535,   536,   545,     0,   573,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   120,   121,   122,   123,   124,   125,
     126,   127,   128,     0,   129,   130,   131,     0,     0,     0,
       0,     0,   132,     0,     0,     0,     0,   134,   135,     0,
     136,   137,   138,     0,   140,   141,   142,   143,   144,     0,
     146,   147,     0,   148,   149,   150,   151,   152,   153,     0,
       0,   154,   155,   156,   157,   158,   159,   160,     0,   161,
     162,   163,   164,   165,     0,     0,     0,   167,   168,   169,
     170,   171,   172,     0,   174,   175,   176,     0,   177,   178,
     179,   180,   181,   182,     0,     0,   184,   185,   186,   187,
     188,   189,   190,   191,   192,   193,   194,   195,   196,   197,
     198,     0,   199,     0,   200,   201,   202,   203,   204,   205,
       0,     0,   206,   207,   208,   209,   210,     0,     0,   211,
     212,   213,   214,   215,   216,   217,     0,   218,   219,   220,
       0,   221,   222,   223,     0,   224,   225,   226,   227,   228,
     229,   230,   231,   232,   233,   234,     0,   235,     0,   236,
     237,   238,   239,     0,   240,     0,   241,     0,     0,     0,
     244,   245,   546,     0,  2055,     0,   249,   250,     0,     0,
     251,   252,   253,   254,     0,   255,   256,   257,   258,   259,
     260,   261,     0,   263,   264,   265,   266,     0,   267,   268,
     269,   270,   271,   272,   273,     0,   274,     0,   276,   277,
     278,   279,   280,   281,   282,   283,     0,   284,     0,   285,
       0,     0,   288,     0,   290,   291,   292,   293,   294,   295,
     296,     0,     0,   297,     0,   299,     0,     0,   301,   302,
    2056,   304,   305,   306,   307,   308,   547,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
     323,   324,   325,   326,   327,   328,   329,   330,     0,   332,
     333,   334,   335,   336,   337,     0,   338,   339,     0,   341,
       0,   342,   343,   344,   345,   346,   347,     0,   348,   349,
       0,     0,   350,   351,   352,     0,     0,   353,   354,   355,
       0,   357,     0,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,     0,     0,     0,
       0,   373,   374,   375,     0,   377,   378,   379,   380,   381,
     382,     0,   383,   384,   385,   386,   387,   388,   389,   390,
       0,   391,   392,   393,   394,   395,   396,   397,   398,     0,
     399,   400,   401,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,     0,   413,   414,     0,   416,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   429,   430,   431,   432,     0,     0,   433,   434,   435,
     436,   437,   438,   439,   440,   441,   442,     0,     0,   444,
     445,   446,   447,     0,   448,   449,   450,   451,   452,   453,
     454,   455,   456,   457,   458,   459,   460,   548,   462,   463,
       0,     0,   464,   465,  2057,   466,     0,   468,  2058,   470,
    2059,   472,     0,   473,   474,   475,     0,   476,     0,   477,
     478,   479,   480,   481,     0,   482,   483,   484,   485,   486,
     487,   488,   489,     0,     0,   490,   491,  2060,     0,   493,
     494,   495,   496,     0,   497,   498,   499,   500,   501,   502,
     503,     0,   504,     0,   506,   507,   508,   509,   510,   511,
     512,   513,   514,     0,     0,   515,     0,     0,   516,   517,
     518,   519,   520,   521,   522,   523,   524,   525,   526,   527,
     528,   529,   530,   531,   532,   533,   534,   535,   536,   545,
       0,   573,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   120,   121,
     122,   123,   124,   125,   126,   127,   128,     0,   129,   130,
     131,     0,     0,     0,     0,     0,   132,     0,     0,     0,
       0,   134,   135,     0,   136,   137,   138,     0,   140,   141,
     142,   143,   144,     0,   146,   147,     0,   148,   149,   150,
     151,   152,   153,     0,     0,   154,   155,   156,   157,   158,
     159,   160,     0,   161,   162,   163,   164,   165,     0,     0,
       0,   167,   168,   169,   170,   171,   172,     0,   174,   175,
     176,     0,   177,   178,   179,   180,   181,   182,     0,     0,
     184,   185,   186,   187,   188,   189,   190,   191,   192,   193,
     194,   195,   196,   197,   198,     0,   199,     0,   200,   201,
     202,   203,   204,   205,     0,     0,   206,   207,   208,   209,
     210,     0,     0,   211,   212,   213,   214,   215,   216,   217,
       0,   218,   219,   220,     0,   221,   222,   223,     0,   224,
     225,   226,   227,   228,   229,   230,   231,   232,   233,   234,
       0,   235,     0,   236,   237,   238,   239,     0,   240,     0,
     241,     0,     0,     0,   244,   245,   546,     0,   248,     0,
     249,   250,     0,     0,   251,   252,   253,   254,     0,   255,
     256,   257,   258,   259,   260,   261,     0,   263,   264,   265,
     266,     0,   267,   268,   269,   270,   271,   272,   273,     0,
     274,     0,   276,   277,   278,   279,   280,   281,   282,   283,
       0,   284,     0,   285,     0,     0,   288,     0,   290,   291,
     292,   293,   294,   295,   296,     0,     0,   297,     0,   299,
       0,     0,   301,   302,   303,   304,   305,   306,   307,   308,
     547,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     329,   330,     0,   332,   333,   334,   335,   336,   337,     0,
     338,   339,     0,   341,     0,   342,   343,   344,   345,   346,
     347,     0,   348,   349,     0,     0,   350,   351,   352,     0,
       0,   353,   354,   355,     0,   357,     0,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,     0,     0,     0,     0,   373,   374,   375,     0,   377,
     378,   379,   380,   381,   382,     0,   383,   384,   385,   386,
     387,   388,   389,   390,     0,   391,   392,   393,   394,   395,
     396,   397,   398,     0,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,     0,   413,
     414,     0,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,   428,   429,   430,   431,   432,     0,
       0,   433,   434,   435,   436,   437,   438,   439,   440,   441,
     442,     0,     0,   444,   445,   446,   447,     0,   448,   449,
     450,   451,   452,   453,   454,   455,   456,   457,   458,   459,
     460,   548,   462,   463,     0,     0,   464,   465,     0,   466,
       0,   468,   469,   470,   471,   472,     0,   473,   474,   475,
       0,   476,     0,   477,   478,   479,   480,   481,     0,   482,
     483,   484,   485,   486,   487,   488,   489,     0,     0,   490,
     491,   492,     0,   493,   494,   495,   496,     0,   497,   498,
     499,   500,   501,   502,   503,     0,   504,     0,   506,   507,
     508,   509,   510,   511,   512,   513,   514,     0,     0,   515,
       0,     0,   516,   517,   518,   519,   520,   521,   522,   523,
     524,   525,   526,   527,   528,   529,   530,   531,   532,   533,
     534,   535,   536,   545,     0,   843,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   120,   121,   122,   123,   124,   125,   126,   127,
     128,     0,   129,   130,   131,     0,     0,     0,     0,     0,
     132,     0,     0,     0,     0,   134,   135,     0,   136,   137,
     138,     0,   140,   141,   142,   143,   144,     0,   146,   147,
       0,   148,   149,   150,   151,   152,   153,     0,     0,   154,
     155,   156,   157,   158,   159,   160,     0,   161,   162,   163,
     164,   165,     0,     0,     0,   167,   168,   169,   170,   171,
     172,     0,   174,   175,   176,     0,   177,   178,   179,   180,
     181,   182,     0,     0,   184,   185,   186,   187,   188,   189,
     190,   191,   192,   193,   194,   195,   196,   197,   198,     0,
     199,     0,   200,   201,   202,   203,   204,   205,     0,     0,
     206,   207,   208,   209,   210,     0,     0,   211,   212,   213,
     214,   215,   216,   217,     0,   218,   219,   220,     0,   221,
     222,   223,     0,   224,   225,   226,   227,   228,   229,   230,
     231,   232,   233,   234,     0,   235,     0,   236,   237,   238,
     239,     0,   240,     0,   241,     0,     0,     0,   244,   245,
     546,     0,   248,     0,   249,   250,     0,     0,   251,   252,
     253,   254,     0,   255,   256,   257,   258,   259,   260,   261,
       0,   263,   264,   265,   266,     0,   267,   268,   269,   270,
     271,   272,   273,     0,   274,     0,   276,   277,   278,   279,
     280,   281,   282,   283,     0,   284,     0,   285,     0,     0,
     288,     0,   290,   291,   292,   293,   294,   295,   296,     0,
       0,   297,     0,   299,     0,     0,   301,   302,   303,   304,
     305,   306,   307,   308,   547,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,     0,   332,   333,   334,
     335,   336,   337,     0,   338,   339,     0,   341,     0,   342,
     343,   344,   345,   346,   347,     0,   348,   349,     0,     0,
     350,   351,   352,     0,     0,   353,   354,   355,     0,   357,
       0,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,   371,   372,     0,     0,     0,     0,   373,
     374,   375,     0,   377,   378,   379,   380,   381,   382,     0,
     383,   384,   385,   386,   387,   388,   389,   390,     0,   391,
     392,   393,   394,   395,   396,   397,   398,     0,   399,   400,
     401,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,     0,   413,   414,     0,   416,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,   428,   429,
     430,   431,   432,     0,     0,   433,   434,   435,   436,   437,
     438,   439,   440,   441,   442,     0,     0,   444,   445,   446,
     447,     0,   448,   449,   450,   451,   452,   453,   454,   455,
     456,   457,   458,   459,   460,   548,   462,   463,     0,     0,
     464,   465,     0,   466,     0,   468,   469,   470,   471,   472,
       0,   473,   474,   475,     0,   476,     0,   477,   478,   479,
     480,   481,     0,   482,   483,   484,   485,   486,   487,   488,
     489,     0,     0,   490,   491,   492,     0,   493,   494,   495,
     496,     0,   497,   498,   499,   500,   501,   502,   503,     0,
     504,     0,   506,   507,   508,   509,   510,   511,   512,   513,
     514,     0,     0,   515,     0,     0,   516,   517,   518,   519,
     520,   521,   522,   523,   524,   525,   526,   527,   528,   529,
     530,   531,   532,   533,   534,   535,   536,   545,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   120,   121,   122,   123,
     124,   125,   126,   127,   128,   850,   129,   130,   131,     0,
       0,     0,     0,     0,   132,     0,     0,     0,     0,   134,
     135,     0,   136,   137,   138,     0,   140,   141,   142,   143,
     144,     0,   146,   147,     0,   148,   149,   150,   151,   152,
     153,     0,     0,   154,   155,   156,   157,   158,   159,   160,
       0,   161,   162,   163,   164,   165,     0,     0,     0,   167,
     168,   169,   170,   171,   172,     0,   174,   175,   176,     0,
     177,   178,   179,   180,   181,   182,     0,     0,   184,   185,
     186,   187,   188,   189,   190,   191,   192,   193,   194,   195,
     196,   197,   198,     0,   199,     0,   200,   201,   202,   203,
     204,   205,     0,     0,   206,   207,   208,   209,   210,     0,
       0,   211,   212,   213,   214,   215,   216,   217,     0,   218,
     219,   220,     0,   221,   222,   223,     0,   224,   225,   226,
     227,   228,   229,   230,   231,   232,   233,   234,     0,   235,
       0,   236,   237,   238,   239,     0,   240,     0,   241,     0,
       0,     0,   244,   245,   546,     0,   851,     0,   249,   250,
       0,     0,   251,   252,   253,   254,     0,   255,   256,   257,
     258,   259,   260,   261,     0,   263,   264,   265,   266,     0,
     267,   268,   269,   270,   271,   272,   273,     0,   274,     0,
     276,   277,   278,   279,   280,   281,   282,   283,     0,   284,
       0,   285,     0,     0,   288,     0,   290,   291,   292,   293,
     294,   295,   296,     0,     0,   297,     0,   299,     0,     0,
     301,   302,   852,   304,   305,   306,   307,   308,   547,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,   322,   323,   324,   325,   326,   327,   328,   329,   330,
       0,   332,   333,   334,   335,   336,   337,     0,   338,   339,
       0,   341,     0,   342,   343,   344,   345,   346,   347,     0,
     348,   349,     0,     0,   350,   351,   352,     0,     0,   353,
     354,   355,     0,   357,     0,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,   371,   372,     0,
       0,     0,     0,   373,   374,   375,     0,   377,   378,   379,
     380,   381,   382,     0,   383,   384,   385,   386,   387,   388,
     389,   390,     0,   391,   392,   393,   394,   395,   396,   397,
     398,     0,   399,   400,   401,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,     0,   413,   414,     0,
     416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,   428,   429,   430,   431,   432,     0,     0,   433,
     434,   435,   436,   853,   438,   439,   440,   441,   442,     0,
       0,   444,   445,   446,   447,     0,   448,   449,   450,   451,
     452,   453,   454,   455,   456,   457,   458,   459,   460,   548,
     462,   463,     0,     0,   464,   465,     0,   466,     0,   468,
     469,   470,   471,   472,     0,   473,   854,   475,     0,   476,
       0,   855,   478,   479,   480,   481,     0,   482,   483,   484,
     485,   486,   487,   488,   489,     0,     0,   490,   491,   492,
       0,   493,   494,   495,   496,     0,   497,   498,   499,   500,
     501,   502,   503,     0,   504,     0,   506,   507,   508,   509,
     510,   511,   512,   513,   514,     0,     0,   515,     0,     0,
     516,   517,   518,   519,   520,   521,   522,   523,   524,   525,
     526,   527,   528,   529,   530,   531,   532,   533,   534,   535,
     536,   545,     0,   573,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     120,   121,   122,   123,   124,   125,   126,   127,   128,     0,
     129,   130,   131,     0,     0,     0,     0,     0,   132,     0,
       0,     0,     0,   134,   135,     0,   136,   137,   138,     0,
     140,   141,   142,   143,   144,     0,   146,   147,     0,   148,
     149,   150,   151,   152,   153,     0,     0,   154,   155,   156,
     157,   158,   159,   160,     0,   161,   162,   163,   164,   165,
       0,     0,     0,   167,   168,   169,   170,   171,   172,     0,
     174,   175,   176,     0,   177,   178,   179,   180,   181,   182,
       0,     0,   184,   185,   186,   187,   188,   189,   190,   191,
     192,   193,   194,   195,   196,   197,   198,     0,   199,     0,
     200,   201,   202,   203,   204,   205,     0,     0,   206,   207,
     208,   209,   210,     0,     0,   211,   212,   213,   214,   215,
     216,   217,     0,   218,   219,   220,     0,   221,   222,   223,
       0,   224,   225,   226,   227,   228,   229,   230,   231,   232,
     233,   234,     0,   235,     0,   236,   237,   238,   239,     0,
     240,     0,   241,     0,     0,     0,   244,   245,   546,     0,
     248,     0,   249,   250,     0,     0,   251,   252,   253,   254,
       0,   255,   256,   257,   258,   259,   260,   261,     0,   263,
     264,   265,   266,     0,   267,   268,   269,   270,   271,   272,
     273,     0,   274,     0,   276,   277,   278,   279,   280,   281,
     282,   283,     0,   284,     0,   285,     0,     0,   288,     0,
     290,   291,   292,   293,   294,   295,   296,     0,     0,   297,
       0,   299,     0,     0,   301,   302,   303,   304,   305,   306,
     307,   308,   547,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,   323,   324,   325,   326,
     327,   328,   329,   330,     0,   332,   333,   334,   335,   336,
     337,     0,   338,   339,     0,   341,     0,   342,   343,   344,
     345,   346,   347,     0,   348,   349,     0,     0,   350,   351,
     352,     0,     0,   353,   354,   355,     0,   357,     0,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
     370,   371,   372,     0,     0,     0,     0,   373,   374,   375,
       0,   377,   378,   379,   380,   381,   382,     0,   383,   384,
     385,   386,   387,   388,   389,   390,     0,   391,   392,   393,
     394,   395,   396,   888,   398,     0,   399,   400,   401,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
       0,   413,   414,     0,   416,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,   428,   429,   430,   431,
     432,     0,     0,   433,   434,   435,   436,   437,   438,   439,
     440,   441,   442,     0,     0,   444,   445,   446,   447,     0,
     448,   449,   450,   451,   452,   453,   454,   455,   456,   457,
     458,   459,   460,   548,   462,   463,     0,     0,   464,   465,
       0,   466,     0,   468,   469,   470,   471,   472,     0,   473,
     474,   475,     0,   476,     0,   477,   478,   479,   480,   481,
       0,   482,   483,   484,   485,   486,   487,   488,   489,     0,
       0,   490,   491,   492,     0,   493,   494,   495,   496,     0,
     497,   498,   499,   500,   501,   502,   503,     0,   504,     0,
     506,   507,   508,   509,   510,   511,   512,   513,   514,     0,
       0,   515,     0,     0,   516,   517,   518,   519,   520,   521,
     522,   523,   524,   525,   526,   527,   528,   529,   530,   531,
     532,   533,   534,   535,   536,   545,     0,   573,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   120,   121,   122,   123,   124,   125,
     126,   127,   128,     0,   129,   130,   131,     0,     0,     0,
       0,     0,   132,     0,     0,     0,     0,   134,   135,     0,
     136,   137,   138,     0,   140,   141,   142,   143,   144,     0,
     146,   147,     0,   148,   149,   150,   151,   152,   153,     0,
       0,   154,   155,   156,   157,   158,   159,   160,     0,   161,
     162,   163,   164,   165,     0,     0,     0,   167,   168,   169,
     170,   171,   172,     0,   174,   175,   176,     0,   177,   178,
     179,   180,   181,   182,     0,     0,   184,   185,   186,   187,
     188,   189,   190,   191,   192,   193,   194,   195,   196,   197,
     198,     0,   199,     0,   200,   201,   202,   203,   204,   205,
       0,     0,   206,   207,   208,   209,   210,     0,     0,   211,
     212,   213,   214,   215,   216,   217,     0,   218,   219,   220,
       0,   221,   222,   223,     0,   224,   225,   226,   227,   228,
     229,   230,   231,   232,   233,   234,     0,   235,     0,   236,
     237,   238,   239,     0,   240,     0,   241,     0,     0,     0,
     244,   245,   546,     0,   248,     0,   249,   250,     0,     0,
     251,   252,   253,   254,     0,   255,   256,   257,   258,   259,
     977,   261,     0,   263,   264,   265,   266,     0,   267,   268,
     269,   270,   271,   272,   273,     0,   274,     0,   276,   277,
     278,   279,   280,   281,   282,   283,     0,   284,     0,   285,
       0,     0,   288,     0,   290,   291,   292,   293,   294,   295,
     296,     0,     0,   297,     0,   299,     0,     0,   301,   302,
     303,   304,   305,   306,   307,   308,   547,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
     323,   324,   325,   326,   327,   328,   329,   330,     0,   332,
     333,   334,   335,   336,   337,     0,   338,   339,     0,   341,
       0,   342,   343,   344,   345,   346,   347,     0,   348,   349,
       0,     0,   350,   351,   352,     0,     0,   353,   354,   355,
       0,   357,     0,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,     0,     0,     0,
       0,   373,   374,   375,     0,   377,   378,   379,   380,   381,
     382,     0,   383,   384,   385,   386,   387,   388,   389,   390,
       0,   391,   392,   393,   394,   395,   396,   397,   398,     0,
     399,   400,   401,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,     0,   413,   414,     0,   416,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   429,   430,   431,   432,     0,     0,   433,   434,   435,
     436,   437,   438,   439,   440,   441,   442,     0,     0,   444,
     445,   446,   447,     0,   448,   449,   450,   451,   452,   453,
     454,   455,   456,   457,   458,   459,   460,   548,   462,   463,
       0,     0,   464,   465,     0,   466,     0,   468,   469,   470,
     471,   472,     0,   473,   474,   475,     0,   476,     0,   477,
     478,   479,   480,   481,     0,   482,   483,   484,   485,   486,
     487,   488,   489,     0,     0,   490,   491,   492,     0,   493,
     494,   495,   496,     0,   497,   498,   499,   500,   501,   502,
     503,     0,   504,     0,   506,   507,   508,   509,   510,   511,
     512,   513,   514,     0,     0,   515,     0,     0,   516,   517,
     518,   519,   520,   521,   522,   523,   524,   525,   526,   527,
     528,   529,   530,   531,   532,   533,   534,   535,   536,   545,
       0,   573,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   120,   121,
     122,   123,   124,   125,   126,   127,   128,     0,   129,   130,
     131,     0,     0,     0,     0,     0,   132,     0,     0,     0,
       0,   134,   135,     0,   136,   137,   138,     0,   140,   141,
     142,   143,   144,     0,   146,   147,     0,   148,   149,   150,
     151,   152,   153,     0,     0,   154,   155,   156,   157,   158,
     159,   160,     0,   161,   162,   163,   164,   165,     0,     0,
       0,   167,   168,   169,   170,   171,   172,     0,   174,   175,
     176,     0,   177,   178,   179,   180,   181,   182,     0,     0,
     184,   185,   186,   187,   188,   189,   190,   191,   192,   193,
     194,   195,   196,   197,   198,     0,   199,     0,   200,   201,
     202,   203,   204,   205,     0,     0,   206,   207,   208,   209,
     210,     0,     0,   211,   212,   213,   214,   215,   216,   217,
       0,   218,   219,   220,     0,   221,   222,   223,     0,   224,
     225,   226,   227,   228,   229,   230,   231,   232,   233,   234,
       0,   235,     0,   236,   237,   238,   239,     0,   240,     0,
     241,     0,     0,     0,   244,   245,   546,     0,   248,     0,
     249,   250,     0,     0,   251,   252,   253,   254,     0,   255,
     256,   257,   258,   259,   980,   261,     0,   263,   264,   265,
     266,     0,   267,   268,   269,   270,   271,   272,   273,     0,
     274,     0,   276,   277,   278,   279,   280,   281,   282,   283,
       0,   284,     0,   285,     0,     0,   288,     0,   290,   291,
     292,   293,   294,   295,   296,     0,     0,   297,     0,   299,
       0,     0,   301,   302,   303,   304,   305,   306,   307,   308,
     547,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     329,   330,     0,   332,   333,   334,   335,   336,   337,     0,
     338,   339,     0,   341,     0,   342,   343,   344,   345,   346,
     347,     0,   348,   349,     0,     0,   350,   351,   352,     0,
       0,   353,   354,   355,     0,   357,     0,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,     0,     0,     0,     0,   373,   374,   375,     0,   377,
     378,   379,   380,   381,   382,     0,   383,   384,   385,   386,
     387,   388,   389,   390,     0,   391,   392,   393,   394,   395,
     396,   397,   398,     0,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,     0,   413,
     414,     0,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,   428,   429,   430,   431,   432,     0,
       0,   433,   434,   435,   436,   437,   438,   439,   440,   441,
     442,     0,     0,   444,   445,   446,   447,     0,   448,   449,
     450,   451,   452,   453,   454,   455,   456,   457,   458,   459,
     460,   548,   462,   463,     0,     0,   464,   465,     0,   466,
       0,   468,   469,   470,   471,   472,     0,   473,   474,   475,
       0,   476,     0,   477,   478,   479,   480,   481,     0,   482,
     483,   484,   485,   486,   487,   488,   489,     0,     0,   490,
     491,   492,     0,   493,   494,   495,   496,     0,   497,   498,
     499,   500,   501,   502,   503,     0,   504,     0,   506,   507,
     508,   509,   510,   511,   512,   513,   514,     0,     0,   515,
       0,     0,   516,   517,   518,   519,   520,   521,   522,   523,
     524,   525,   526,   527,   528,   529,   530,   531,   532,   533,
     534,   535,   536,   545,     0,   573,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   120,   121,   122,   123,   124,   125,   126,   127,
     128,     0,   129,   130,   131,     0,     0,     0,     0,     0,
     132,     0,     0,     0,     0,   134,   135,     0,   136,   137,
     138,     0,   140,   141,   142,   143,   144,     0,   146,   147,
       0,   148,   149,   150,   151,   152,   153,     0,     0,   154,
     155,   156,   157,   158,   159,   160,     0,   161,   162,   163,
     164,   165,     0,     0,     0,   167,   168,   169,   170,   171,
     172,     0,   174,   175,   176,     0,   177,   178,   179,   180,
     181,   182,     0,     0,   184,   185,   186,   187,   188,   189,
     190,   191,   192,   193,   194,   195,   196,   197,   198,     0,
     199,     0,   200,   201,   202,   203,   204,   205,     0,     0,
     206,   207,   208,   209,   210,     0,     0,   211,   212,   213,
     214,   215,   216,   217,     0,   218,   219,   220,     0,   221,
     222,   223,     0,   224,   225,   226,   227,   228,   229,   230,
     231,   232,   233,   234,     0,   235,     0,   236,   237,   238,
     239,     0,   240,     0,   241,     0,     0,     0,   244,   245,
     546,     0,   248,     0,   249,   250,     0,     0,   251,   252,
     253,   254,     0,   255,   256,   257,   258,   259,   984,   261,
       0,   263,   264,   265,   266,     0,   267,   268,   269,   270,
     271,   272,   273,     0,   274,     0,   276,   277,   278,   279,
     280,   281,   282,   283,     0,   284,     0,   285,     0,     0,
     288,     0,   290,   291,   292,   293,   294,   295,   296,     0,
       0,   297,     0,   299,     0,     0,   301,   302,   303,   304,
     305,   306,   307,   308,   547,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,     0,   332,   333,   334,
     335,   336,   337,     0,   338,   339,     0,   341,     0,   342,
     343,   344,   345,   346,   347,     0,   348,   349,     0,     0,
     350,   351,   352,     0,     0,   353,   354,   355,     0,   357,
       0,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,   371,   372,     0,     0,     0,     0,   373,
     374,   375,     0,   377,   378,   379,   380,   381,   382,     0,
     383,   384,   385,   386,   387,   388,   389,   390,     0,   391,
     392,   393,   394,   395,   396,   397,   398,     0,   399,   400,
     401,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,     0,   413,   414,     0,   416,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,   428,   429,
     430,   431,   432,     0,     0,   433,   434,   435,   436,   437,
     438,   439,   440,   441,   442,     0,     0,   444,   445,   446,
     447,     0,   448,   449,   450,   451,   452,   453,   454,   455,
     456,   457,   458,   459,   460,   548,   462,   463,     0,     0,
     464,   465,     0,   466,     0,   468,   469,   470,   471,   472,
       0,   473,   474,   475,     0,   476,     0,   477,   478,   479,
     480,   481,     0,   482,   483,   484,   485,   486,   487,   488,
     489,     0,     0,   490,   491,   492,     0,   493,   494,   495,
     496,     0,   497,   498,   499,   500,   501,   502,   503,     0,
     504,     0,   506,   507,   508,   509,   510,   511,   512,   513,
     514,     0,     0,   515,     0,     0,   516,   517,   518,   519,
     520,   521,   522,   523,   524,   525,   526,   527,   528,   529,
     530,   531,   532,   533,   534,   535,   536,   545,     0,   573,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   120,   121,   122,   123,
     124,   125,   126,   127,   128,     0,   129,   130,   131,     0,
       0,     0,     0,     0,   132,     0,     0,     0,     0,   134,
     135,     0,   136,   137,   138,     0,   140,   141,   142,   143,
     144,     0,   146,   147,     0,   148,   149,   150,   151,   152,
     153,     0,     0,   154,   155,   156,   157,   158,   159,   160,
       0,   161,   162,   163,   164,   165,     0,     0,     0,   167,
     168,   169,   170,   171,   172,     0,   174,   175,   176,     0,
     177,   178,   179,   180,   181,   182,     0,     0,   184,   185,
     186,   187,   188,   189,   190,   191,   192,   193,   194,   195,
     196,   197,   198,     0,   199,     0,   200,   201,   202,   203,
     204,   205,     0,     0,   206,   207,   208,   209,   210,     0,
       0,   211,   212,   213,   214,   215,   216,   217,     0,   218,
     219,   220,     0,   221,   222,   223,     0,   224,   225,   226,
     227,   228,   229,   230,   231,   232,   233,   234,     0,   235,
       0,   236,   237,   238,   239,     0,   240,     0,   241,     0,
       0,     0,   244,   245,   546,     0,   248,     0,   249,   250,
       0,     0,   251,   252,   253,   254,     0,   255,   256,   257,
     258,   259,  1013,   261,     0,   263,   264,   265,   266,     0,
     267,   268,   269,   270,   271,   272,   273,     0,   274,     0,
     276,   277,   278,   279,   280,   281,   282,   283,     0,   284,
       0,   285,     0,     0,   288,     0,   290,   291,   292,   293,
     294,   295,   296,     0,     0,   297,     0,   299,     0,     0,
     301,   302,   303,   304,   305,   306,   307,   308,   547,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,   322,   323,   324,   325,   326,   327,   328,   329,   330,
       0,   332,   333,   334,   335,   336,   337,     0,   338,   339,
       0,   341,     0,   342,   343,   344,   345,   346,   347,     0,
     348,   349,     0,     0,   350,   351,   352,     0,     0,   353,
     354,   355,     0,   357,     0,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,   371,   372,     0,
       0,     0,     0,   373,   374,   375,     0,   377,   378,   379,
     380,   381,   382,     0,   383,   384,   385,   386,   387,   388,
     389,   390,     0,   391,   392,   393,   394,   395,   396,   397,
     398,     0,   399,   400,   401,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,     0,   413,   414,     0,
     416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,   428,   429,   430,   431,   432,     0,     0,   433,
     434,   435,   436,   437,   438,   439,   440,   441,   442,     0,
       0,   444,   445,   446,   447,     0,   448,   449,   450,   451,
     452,   453,   454,   455,   456,   457,   458,   459,   460,   548,
     462,   463,     0,     0,   464,   465,     0,   466,     0,   468,
     469,   470,   471,   472,     0,   473,   474,   475,     0,   476,
       0,   477,   478,   479,   480,   481,     0,   482,   483,   484,
     485,   486,   487,   488,   489,     0,     0,   490,   491,   492,
       0,   493,   494,   495,   496,     0,   497,   498,   499,   500,
     501,   502,   503,     0,   504,     0,   506,   507,   508,   509,
     510,   511,   512,   513,   514,     0,     0,   515,     0,     0,
     516,   517,   518,   519,   520,   521,   522,   523,   524,   525,
     526,   527,   528,   529,   530,   531,   532,   533,   534,   535,
     536,   545,     0,   573,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     120,   121,   122,   123,   124,   125,   126,   127,   128,     0,
     129,   130,   131,     0,     0,     0,     0,     0,   132,     0,
       0,     0,     0,   134,   135,     0,   136,   137,   138,     0,
     140,   141,   142,   143,   144,     0,   146,   147,     0,   148,
     149,   150,   151,   152,   153,     0,     0,   154,   155,   156,
     157,   158,   159,   160,     0,   161,   162,   163,   164,   165,
       0,     0,     0,   167,   168,   169,   170,   171,   172,     0,
     174,   175,   176,     0,   177,   178,   179,   180,   181,   182,
       0,     0,   184,   185,   186,   187,   188,   189,   190,   191,
     192,   193,   194,   195,   196,   197,   198,     0,   199,     0,
     200,   201,   202,   203,   204,   205,     0,     0,   206,   207,
     208,   209,   210,     0,     0,   211,   212,   213,   214,   215,
     216,   217,     0,   218,   219,   220,     0,   221,   222,   223,
       0,   224,   225,   226,   227,   228,   229,   230,   231,   232,
     233,   234,     0,   235,     0,   236,   237,   238,   239,     0,
     240,     0,   241,     0,     0,     0,   244,   245,   546,     0,
     248,     0,   249,   250,     0,     0,   251,   252,   253,   254,
       0,   255,   256,   257,   258,   259,  1042,   261,     0,   263,
     264,   265,   266,     0,   267,   268,   269,   270,   271,   272,
     273,     0,   274,     0,   276,   277,   278,   279,   280,   281,
     282,   283,     0,   284,     0,   285,     0,     0,   288,     0,
     290,   291,   292,   293,   294,   295,   296,     0,     0,   297,
       0,   299,     0,     0,   301,   302,   303,   304,   305,   306,
     307,   308,   547,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,   323,   324,   325,   326,
     327,   328,   329,   330,     0,   332,   333,   334,   335,   336,
     337,     0,   338,   339,     0,   341,     0,   342,   343,   344,
     345,   346,   347,     0,   348,   349,     0,     0,   350,   351,
     352,     0,     0,   353,   354,   355,     0,   357,     0,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
     370,   371,   372,     0,     0,     0,     0,   373,   374,   375,
       0,   377,   378,   379,   380,   381,   382,     0,   383,   384,
     385,   386,   387,   388,   389,   390,     0,   391,   392,   393,
     394,   395,   396,   397,   398,     0,   399,   400,   401,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
       0,   413,   414,     0,   416,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,   428,   429,   430,   431,
     432,     0,     0,   433,   434,   435,   436,   437,   438,   439,
     440,   441,   442,     0,     0,   444,   445,   446,   447,     0,
     448,   449,   450,   451,   452,   453,   454,   455,   456,   457,
     458,   459,   460,   548,   462,   463,     0,     0,   464,   465,
       0,   466,     0,   468,   469,   470,   471,   472,     0,   473,
     474,   475,     0,   476,     0,   477,   478,   479,   480,   481,
       0,   482,   483,   484,   485,   486,   487,   488,   489,     0,
       0,   490,   491,   492,     0,   493,   494,   495,   496,     0,
     497,   498,   499,   500,   501,   502,   503,     0,   504,     0,
     506,   507,   508,   509,   510,   511,   512,   513,   514,     0,
       0,   515,     0,     0,   516,   517,   518,   519,   520,   521,
     522,   523,   524,   525,   526,   527,   528,   529,   530,   531,
     532,   533,   534,   535,   536,   545,     0,   573,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   120,   121,   122,   123,   124,   125,
     126,   127,   128,     0,   129,   130,   131,     0,     0,     0,
       0,     0,   132,     0,     0,     0,     0,   134,   135,     0,
     136,   137,   138,     0,   140,   141,   142,   143,   144,     0,
     146,   147,     0,   148,   149,   150,   151,   152,   153,     0,
       0,   154,   155,   156,   157,   158,   159,   160,     0,   161,
     162,   163,   164,   165,     0,     0,     0,   167,   168,   169,
     170,   171,   172,     0,   174,   175,   176,     0,   177,   178,
     179,   180,   181,   182,     0,     0,   184,   185,   186,   187,
     188,   189,   190,   191,   192,   193,   194,   195,   196,   197,
     198,     0,   199,     0,   200,   201,   202,   203,   204,   205,
       0,     0,   206,   207,   208,   209,   210,     0,     0,   211,
     212,   213,   214,   215,   216,   217,     0,   218,   219,   220,
       0,   221,   222,   223,     0,   224,   225,   226,   227,   228,
     229,   230,   231,   232,   233,   234,     0,   235,     0,   236,
     237,   238,   239,     0,   240,     0,   241,     0,     0,     0,
     244,   245,   546,     0,   248,     0,   249,   250,     0,     0,
     251,   252,   253,   254,     0,   255,   256,   257,   258,   259,
    1045,   261,     0,   263,   264,   265,   266,     0,   267,   268,
     269,   270,   271,   272,   273,     0,   274,     0,   276,   277,
     278,   279,   280,   281,   282,   283,     0,   284,     0,   285,
       0,     0,   288,     0,   290,   291,   292,   293,   294,   295,
     296,     0,     0,   297,     0,   299,     0,     0,   301,   302,
     303,   304,   305,   306,   307,   308,   547,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
     323,   324,   325,   326,   327,   328,   329,   330,     0,   332,
     333,   334,   335,   336,   337,     0,   338,   339,     0,   341,
       0,   342,   343,   344,   345,   346,   347,     0,   348,   349,
       0,     0,   350,   351,   352,     0,     0,   353,   354,   355,
       0,   357,     0,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,     0,     0,     0,
       0,   373,   374,   375,     0,   377,   378,   379,   380,   381,
     382,     0,   383,   384,   385,   386,   387,   388,   389,   390,
       0,   391,   392,   393,   394,   395,   396,   397,   398,     0,
     399,   400,   401,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,     0,   413,   414,     0,   416,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   429,   430,   431,   432,     0,     0,   433,   434,   435,
     436,   437,   438,   439,   440,   441,   442,     0,     0,   444,
     445,   446,   447,     0,   448,   449,   450,   451,   452,   453,
     454,   455,   456,   457,   458,   459,   460,   548,   462,   463,
       0,     0,   464,   465,     0,   466,     0,   468,   469,   470,
     471,   472,     0,   473,   474,   475,     0,   476,     0,   477,
     478,   479,   480,   481,     0,   482,   483,   484,   485,   486,
     487,   488,   489,     0,     0,   490,   491,   492,     0,   493,
     494,   495,   496,     0,   497,   498,   499,   500,   501,   502,
     503,     0,   504,     0,   506,   507,   508,   509,   510,   511,
     512,   513,   514,     0,     0,   515,     0,     0,   516,   517,
     518,   519,   520,   521,   522,   523,   524,   525,   526,   527,
     528,   529,   530,   531,   532,   533,   534,   535,   536,   545,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   120,   121,
     122,   123,   124,   125,   126,   127,   128,     0,   129,   130,
     131,     0,     0,     0,     0,     0,   132,     0,  1091,     0,
       0,   134,   135,     0,   136,   137,   138,     0,   140,   141,
     142,   143,   144,     0,   146,   147,     0,   148,   149,   150,
     151,   152,   153,     0,     0,   154,   155,   156,   157,   158,
     159,   160,     0,   161,   162,   163,   164,   165,     0,     0,
       0,   167,   168,   169,   170,   171,   172,     0,   174,   175,
     176,     0,   177,   178,   179,   180,   181,   182,     0,     0,
     184,   185,   186,   187,   188,   189,   190,   191,   192,   193,
     194,   195,   196,   197,   198,     0,   199,     0,   200,   201,
     202,   203,   204,   205,     0,     0,   206,   207,   208,   209,
     210,     0,     0,   211,   212,   213,   214,   215,   216,   217,
       0,   218,   219,   220,     0,   221,   222,   223,     0,   224,
     225,   226,   227,   228,   229,   230,   231,   232,   233,   234,
       0,   235,     0,   236,   237,   238,   239,     0,   240,     0,
     241,     0,     0,     0,   244,   245,   546,     0,   248,     0,
     249,   250,     0,     0,   251,   252,   253,   254,     0,   255,
     256,   257,   258,   259,   260,   261,     0,   263,   264,   265,
     266,     0,   267,   268,   269,   270,   271,   272,   273,     0,
     274,     0,   276,   277,   278,   279,   280,   281,   282,   283,
       0,   284,     0,   285,     0,     0,   288,     0,   290,   291,
     292,   293,   294,   295,   296,     0,     0,   297,     0,   299,
       0,     0,   301,   302,   303,   304,   305,   306,   307,   308,
     547,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     329,   330,     0,   332,   333,   334,   335,   336,   337,     0,
     338,   339,     0,   341,     0,   342,   343,   344,   345,   346,
     347,     0,   348,   349,     0,     0,   350,   351,   352,     0,
       0,   353,   354,   355,     0,   357,     0,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,     0,     0,     0,     0,   373,   374,   375,     0,   377,
     378,   379,   380,   381,   382,     0,   383,   384,   385,   386,
     387,   388,   389,   390,     0,   391,   392,   393,   394,   395,
     396,   397,   398,     0,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,     0,   413,
     414,     0,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,   428,   429,   430,   431,   432,     0,
       0,   433,   434,   435,   436,   437,   438,   439,   440,   441,
     442,     0,     0,   444,   445,   446,   447,     0,   448,   449,
     450,   451,   452,   453,   454,   455,   456,   457,   458,   459,
     460,   548,   462,   463,     0,     0,   464,   465,     0,   466,
       0,   468,   469,   470,   471,   472,     0,   473,   474,   475,
       0,   476,     0,   477,   478,   479,   480,   481,     0,   482,
     483,   484,   485,   486,   487,   488,   489,     0,     0,   490,
     491,   492,     0,   493,   494,   495,   496,     0,   497,   498,
     499,   500,   501,   502,   503,     0,   504,     0,   506,   507,
     508,   509,   510,   511,   512,   513,   514,     0,     0,   515,
       0,     0,   516,   517,   518,   519,   520,   521,   522,   523,
     524,   525,   526,   527,   528,   529,   530,   531,   532,   533,
     534,   535,   536,   545,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   120,   121,   122,   123,   124,   125,   126,   127,
     128,     0,   129,   130,   131,     0,     0,     0,     0,     0,
     132,     0,  1114,     0,     0,   134,   135,     0,   136,   137,
     138,     0,   140,   141,   142,   143,   144,     0,   146,   147,
       0,   148,   149,   150,   151,   152,   153,     0,     0,   154,
     155,   156,   157,   158,   159,   160,     0,   161,   162,   163,
     164,   165,     0,     0,     0,   167,   168,   169,   170,   171,
     172,     0,   174,   175,   176,     0,   177,   178,   179,   180,
     181,   182,     0,     0,   184,   185,   186,   187,   188,   189,
     190,   191,   192,   193,   194,   195,   196,   197,   198,     0,
     199,     0,   200,   201,   202,   203,   204,   205,     0,     0,
     206,   207,   208,   209,   210,     0,     0,   211,   212,   213,
     214,   215,   216,   217,     0,   218,   219,   220,     0,   221,
     222,   223,     0,   224,   225,   226,   227,   228,   229,   230,
     231,   232,   233,   234,     0,   235,     0,   236,   237,   238,
     239,     0,   240,     0,   241,     0,     0,     0,   244,   245,
     546,     0,   248,     0,   249,   250,     0,     0,   251,   252,
     253,   254,     0,   255,   256,   257,   258,   259,   260,   261,
       0,   263,   264,   265,   266,     0,   267,   268,   269,   270,
     271,   272,   273,     0,   274,     0,   276,   277,   278,   279,
     280,   281,   282,   283,     0,   284,     0,   285,     0,     0,
     288,     0,   290,   291,   292,   293,   294,   295,   296,     0,
       0,   297,     0,   299,     0,     0,   301,   302,   303,   304,
     305,   306,   307,   308,   547,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,     0,   332,   333,   334,
     335,   336,   337,     0,   338,   339,     0,   341,     0,   342,
     343,   344,   345,   346,   347,     0,   348,   349,     0,     0,
     350,   351,   352,     0,     0,   353,   354,   355,     0,   357,
       0,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,   371,   372,     0,     0,     0,     0,   373,
     374,   375,     0,   377,   378,   379,   380,   381,   382,     0,
     383,   384,   385,   386,   387,   388,   389,   390,     0,   391,
     392,   393,   394,   395,   396,   397,   398,     0,   399,   400,
     401,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,     0,   413,   414,     0,   416,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,   428,   429,
     430,   431,   432,     0,     0,   433,   434,   435,   436,   437,
     438,   439,   440,   441,   442,     0,     0,   444,   445,   446,
     447,     0,   448,   449,   450,   451,   452,   453,   454,   455,
     456,   457,   458,   459,   460,   548,   462,   463,     0,     0,
     464,   465,     0,   466,     0,   468,   469,   470,   471,   472,
       0,   473,   474,   475,     0,   476,     0,   477,   478,   479,
     480,   481,     0,   482,   483,   484,   485,   486,   487,   488,
     489,     0,     0,   490,   491,   492,     0,   493,   494,   495,
     496,     0,   497,   498,   499,   500,   501,   502,   503,     0,
     504,     0,   506,   507,   508,   509,   510,   511,   512,   513,
     514,     0,     0,   515,     0,     0,   516,   517,   518,   519,
     520,   521,   522,   523,   524,   525,   526,   527,   528,   529,
     530,   531,   532,   533,   534,   535,   536,   545,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   120,   121,   122,   123,
     124,   125,   126,   127,   128,   850,   129,   130,   131,     0,
       0,     0,     0,     0,   132,     0,     0,     0,     0,   134,
     135,     0,   136,   137,   138,     0,   140,   141,   142,   143,
     144,     0,   146,   147,     0,   148,   149,   150,   151,   152,
     153,     0,     0,   154,   155,   156,   157,   158,   159,   160,
       0,   161,   162,   163,   164,   165,     0,     0,     0,   167,
     168,   169,   170,   171,   172,     0,   174,   175,   176,     0,
     177,   178,   179,   180,   181,   182,     0,     0,   184,   185,
     186,   187,   188,   189,   190,   191,   192,   193,   194,   195,
     196,   197,   198,     0,   199,     0,   200,   201,   202,   203,
     204,   205,     0,     0,   206,   207,   208,   209,   210,     0,
       0,   211,   212,   213,   214,   215,   216,   217,     0,   218,
     219,   220,     0,   221,   222,   223,     0,   224,   225,   226,
     227,   228,   229,   230,   231,   232,   233,   234,     0,   235,
       0,   236,   237,   238,   239,     0,   240,     0,   241,     0,
       0,     0,   244,   245,   546,     0,   248,     0,   249,   250,
       0,     0,   251,   252,   253,   254,     0,   255,   256,   257,
     258,   259,   260,   261,     0,   263,   264,   265,   266,     0,
     267,   268,   269,   270,   271,   272,   273,     0,   274,     0,
     276,   277,   278,   279,   280,   281,   282,   283,     0,   284,
       0,   285,     0,     0,   288,     0,   290,   291,   292,   293,
     294,   295,   296,     0,     0,   297,     0,   299,     0,     0,
     301,   302,   303,   304,   305,   306,   307,   308,   547,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,   322,   323,   324,   325,   326,   327,   328,   329,   330,
       0,   332,   333,   334,   335,   336,   337,     0,   338,   339,
       0,   341,     0,   342,   343,   344,   345,   346,   347,     0,
     348,   349,     0,     0,   350,   351,   352,     0,     0,   353,
     354,   355,     0,   357,     0,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,   371,   372,     0,
       0,     0,     0,   373,   374,   375,     0,   377,   378,   379,
     380,   381,   382,     0,   383,   384,   385,   386,   387,   388,
     389,   390,     0,   391,   392,   393,   394,   395,   396,   397,
     398,     0,   399,   400,   401,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,     0,   413,   414,     0,
     416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,   428,   429,   430,   431,   432,     0,     0,   433,
     434,   435,   436,   437,   438,   439,   440,   441,   442,     0,
       0,   444,   445,   446,   447,     0,   448,   449,   450,   451,
     452,   453,   454,   455,   456,   457,   458,   459,   460,   548,
     462,   463,     0,     0,   464,   465,     0,   466,     0,   468,
     469,   470,   471,   472,     0,   473,   854,   475,     0,   476,
       0,   855,   478,   479,   480,   481,     0,   482,   483,   484,
     485,   486,   487,   488,   489,     0,     0,   490,   491,   492,
       0,   493,   494,   495,   496,     0,   497,   498,   499,   500,
     501,   502,   503,     0,   504,     0,   506,   507,   508,   509,
     510,   511,   512,   513,   514,     0,     0,   515,     0,     0,
     516,   517,   518,   519,   520,   521,   522,   523,   524,   525,
     526,   527,   528,   529,   530,   531,   532,   533,   534,   535,
     536,   545,     0,   573,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     120,   121,   122,   123,   124,   125,   126,   127,   128,     0,
     129,   130,   131,     0,     0,     0,     0,     0,   132,     0,
       0,     0,     0,   134,   135,     0,   136,   137,   138,     0,
     140,   141,   142,   143,   144,     0,   146,   147,     0,   148,
     149,   150,   151,   152,   153,     0,     0,   154,   155,   156,
     157,   158,   159,   160,     0,   161,   162,   163,   164,   165,
       0,     0,     0,   167,   168,   169,   170,   171,   172,     0,
     174,   175,   176,     0,   177,   178,   179,   180,   181,   182,
       0,     0,   184,   185,   186,   187,   188,   189,   190,   191,
     192,   193,   194,   195,   196,   197,   198,     0,   199,     0,
     200,   201,   202,   203,   204,   205,     0,     0,   206,   207,
     208,   209,   210,     0,     0,   211,   212,   213,   214,   215,
     216,   217,     0,   218,   219,   220,     0,   221,   222,   223,
       0,   224,   225,   226,   227,   228,   229,   230,   231,   232,
     233,   234,     0,   235,     0,   236,   237,   238,   239,     0,
     240,     0,   241,     0,     0,     0,   244,   245,   546,     0,
     248,     0,   249,   250,     0,     0,   251,   252,   253,   254,
       0,   255,   256,   257,   258,   259,  1394,   261,     0,   263,
     264,   265,   266,     0,   267,   268,   269,   270,   271,   272,
     273,     0,   274,     0,   276,   277,   278,   279,   280,   281,
     282,   283,     0,   284,     0,   285,     0,     0,   288,     0,
     290,   291,   292,   293,   294,   295,   296,     0,     0,   297,
       0,   299,     0,     0,   301,   302,   303,   304,   305,   306,
     307,   308,   547,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,   323,   324,   325,   326,
     327,   328,   329,   330,     0,   332,   333,   334,   335,   336,
     337,     0,   338,   339,     0,   341,     0,   342,   343,   344,
     345,   346,   347,     0,   348,   349,     0,     0,   350,   351,
     352,     0,     0,   353,   354,   355,     0,   357,     0,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
     370,   371,   372,     0,     0,     0,     0,   373,   374,   375,
       0,   377,   378,   379,   380,   381,   382,     0,   383,   384,
     385,   386,   387,   388,   389,   390,     0,   391,   392,   393,
     394,   395,   396,   397,   398,     0,   399,   400,   401,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
       0,   413,   414,     0,   416,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,   428,   429,   430,   431,
     432,     0,     0,   433,   434,   435,   436,   437,   438,   439,
     440,   441,   442,     0,     0,   444,   445,   446,   447,     0,
     448,   449,   450,   451,   452,   453,   454,   455,   456,   457,
     458,   459,   460,   548,   462,   463,     0,     0,   464,   465,
       0,   466,     0,   468,   469,   470,   471,   472,     0,   473,
     474,   475,     0,   476,     0,   477,   478,   479,   480,   481,
       0,   482,   483,   484,   485,   486,   487,   488,   489,     0,
       0,   490,   491,   492,     0,   493,   494,   495,   496,     0,
     497,   498,   499,   500,   501,   502,   503,     0,   504,     0,
     506,   507,   508,   509,   510,   511,   512,   513,   514,     0,
       0,   515,     0,     0,   516,   517,   518,   519,   520,   521,
     522,   523,   524,   525,   526,   527,   528,   529,   530,   531,
     532,   533,   534,   535,   536,   545,     0,   573,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   120,   121,   122,   123,   124,   125,
     126,   127,   128,     0,   129,   130,   131,     0,     0,     0,
       0,     0,   132,     0,     0,     0,     0,   134,   135,     0,
     136,   137,   138,     0,   140,   141,   142,   143,   144,     0,
     146,   147,     0,   148,   149,   150,   151,   152,   153,     0,
       0,   154,   155,   156,   157,   158,   159,   160,     0,   161,
     162,   163,   164,   165,     0,     0,     0,   167,   168,   169,
     170,   171,   172,     0,   174,   175,   176,     0,   177,   178,
     179,   180,   181,   182,     0,     0,   184,   185,   186,   187,
     188,   189,   190,   191,   192,   193,   194,   195,   196,   197,
     198,     0,   199,     0,   200,   201,   202,   203,   204,   205,
       0,     0,   206,   207,   208,   209,   210,     0,     0,   211,
     212,   213,   214,   215,   216,   217,     0,   218,   219,   220,
       0,   221,   222,   223,     0,   224,   225,   226,   227,   228,
     229,   230,   231,   232,   233,   234,     0,   235,     0,   236,
     237,   238,   239,     0,   240,     0,   241,     0,     0,     0,
     244,   245,   546,     0,   248,     0,   249,   250,     0,     0,
     251,   252,   253,   254,     0,   255,   256,   257,   258,   259,
    1396,   261,     0,   263,   264,   265,   266,     0,   267,   268,
     269,   270,   271,   272,   273,     0,   274,     0,   276,   277,
     278,   279,   280,   281,   282,   283,     0,   284,     0,   285,
       0,     0,   288,     0,   290,   291,   292,   293,   294,   295,
     296,     0,     0,   297,     0,   299,     0,     0,   301,   302,
     303,   304,   305,   306,   307,   308,   547,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
     323,   324,   325,   326,   327,   328,   329,   330,     0,   332,
     333,   334,   335,   336,   337,     0,   338,   339,     0,   341,
       0,   342,   343,   344,   345,   346,   347,     0,   348,   349,
       0,     0,   350,   351,   352,     0,     0,   353,   354,   355,
       0,   357,     0,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,     0,     0,     0,
       0,   373,   374,   375,     0,   377,   378,   379,   380,   381,
     382,     0,   383,   384,   385,   386,   387,   388,   389,   390,
       0,   391,   392,   393,   394,   395,   396,   397,   398,     0,
     399,   400,   401,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,     0,   413,   414,     0,   416,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   429,   430,   431,   432,     0,     0,   433,   434,   435,
     436,   437,   438,   439,   440,   441,   442,     0,     0,   444,
     445,   446,   447,     0,   448,   449,   450,   451,   452,   453,
     454,   455,   456,   457,   458,   459,   460,   548,   462,   463,
       0,     0,   464,   465,     0,   466,     0,   468,   469,   470,
     471,   472,     0,   473,   474,   475,     0,   476,     0,   477,
     478,   479,   480,   481,     0,   482,   483,   484,   485,   486,
     487,   488,   489,     0,     0,   490,   491,   492,     0,   493,
     494,   495,   496,     0,   497,   498,   499,   500,   501,   502,
     503,     0,   504,     0,   506,   507,   508,   509,   510,   511,
     512,   513,   514,     0,     0,   515,     0,     0,   516,   517,
     518,   519,   520,   521,   522,   523,   524,   525,   526,   527,
     528,   529,   530,   531,   532,   533,   534,   535,   536,   545,
       0,   573,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   120,   121,
     122,   123,   124,   125,   126,   127,   128,     0,   129,   130,
     131,     0,     0,     0,     0,     0,   132,     0,     0,     0,
       0,   134,   135,     0,   136,   137,   138,     0,   140,   141,
     142,   143,   144,     0,   146,   147,     0,   148,   149,   150,
     151,   152,   153,     0,     0,   154,   155,   156,   157,   158,
     159,   160,     0,   161,   162,   163,   164,   165,     0,     0,
       0,   167,   168,   169,   170,   171,   172,     0,   174,   175,
     176,     0,   177,   178,   179,   180,   181,   182,     0,     0,
     184,   185,   186,   187,   188,   189,   190,   191,   192,   193,
     194,   195,   196,   197,   198,     0,   199,     0,   200,   201,
     202,   203,   204,   205,     0,     0,   206,   207,   208,   209,
     210,     0,     0,   211,   212,   213,   214,   215,   216,   217,
       0,   218,   219,   220,     0,   221,   222,   223,     0,   224,
     225,   226,   227,   228,   229,   230,   231,   232,   233,   234,
       0,   235,     0,   236,   237,   238,   239,     0,   240,     0,
     241,     0,     0,     0,   244,   245,   546,     0,   248,     0,
     249,   250,     0,     0,   251,   252,   253,   254,     0,   255,
     256,   257,   258,   259,  1399,   261,     0,   263,   264,   265,
     266,     0,   267,   268,   269,   270,   271,   272,   273,     0,
     274,     0,   276,   277,   278,   279,   280,   281,   282,   283,
       0,   284,     0,   285,     0,     0,   288,     0,   290,   291,
     292,   293,   294,   295,   296,     0,     0,   297,     0,   299,
       0,     0,   301,   302,   303,   304,   305,   306,   307,   308,
     547,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     329,   330,     0,   332,   333,   334,   335,   336,   337,     0,
     338,   339,     0,   341,     0,   342,   343,   344,   345,   346,
     347,     0,   348,   349,     0,     0,   350,   351,   352,     0,
       0,   353,   354,   355,     0,   357,     0,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,     0,     0,     0,     0,   373,   374,   375,     0,   377,
     378,   379,   380,   381,   382,     0,   383,   384,   385,   386,
     387,   388,   389,   390,     0,   391,   392,   393,   394,   395,
     396,   397,   398,     0,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,     0,   413,
     414,     0,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,   428,   429,   430,   431,   432,     0,
       0,   433,   434,   435,   436,   437,   438,   439,   440,   441,
     442,     0,     0,   444,   445,   446,   447,     0,   448,   449,
     450,   451,   452,   453,   454,   455,   456,   457,   458,   459,
     460,   548,   462,   463,     0,     0,   464,   465,     0,   466,
       0,   468,   469,   470,   471,   472,     0,   473,   474,   475,
       0,   476,     0,   477,   478,   479,   480,   481,     0,   482,
     483,   484,   485,   486,   487,   488,   489,     0,     0,   490,
     491,   492,     0,   493,   494,   495,   496,     0,   497,   498,
     499,   500,   501,   502,   503,     0,   504,     0,   506,   507,
     508,   509,   510,   511,   512,   513,   514,     0,     0,   515,
       0,     0,   516,   517,   518,   519,   520,   521,   522,   523,
     524,   525,   526,   527,   528,   529,   530,   531,   532,   533,
     534,   535,   536,   545,     0,   573,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   120,   121,   122,   123,   124,   125,   126,   127,
     128,     0,   129,   130,   131,     0,     0,     0,     0,     0,
     132,     0,     0,     0,     0,   134,   135,     0,   136,   137,
     138,     0,   140,   141,   142,   143,   144,     0,   146,   147,
       0,   148,   149,   150,   151,   152,   153,     0,     0,   154,
     155,   156,   157,   158,   159,   160,     0,   161,   162,   163,
     164,   165,     0,     0,     0,   167,   168,   169,   170,   171,
     172,     0,   174,   175,   176,     0,   177,   178,   179,   180,
     181,   182,     0,     0,   184,   185,   186,   187,   188,   189,
     190,   191,   192,   193,   194,   195,   196,   197,   198,     0,
     199,     0,   200,   201,   202,   203,   204,   205,     0,     0,
     206,   207,   208,   209,   210,     0,     0,   211,   212,   213,
     214,   215,   216,   217,     0,   218,   219,   220,     0,   221,
     222,   223,     0,   224,   225,   226,   227,   228,   229,   230,
     231,   232,   233,   234,     0,   235,     0,   236,   237,   238,
     239,     0,   240,     0,   241,     0,     0,     0,   244,   245,
     546,     0,   248,     0,   249,   250,     0,     0,   251,   252,
     253,   254,     0,   255,   256,   257,   258,   259,  1401,   261,
       0,   263,   264,   265,   266,     0,   267,   268,   269,   270,
     271,   272,   273,     0,   274,     0,   276,   277,   278,   279,
     280,   281,   282,   283,     0,   284,     0,   285,     0,     0,
     288,     0,   290,   291,   292,   293,   294,   295,   296,     0,
       0,   297,     0,   299,     0,     0,   301,   302,   303,   304,
     305,   306,   307,   308,   547,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,     0,   332,   333,   334,
     335,   336,   337,     0,   338,   339,     0,   341,     0,   342,
     343,   344,   345,   346,   347,     0,   348,   349,     0,     0,
     350,   351,   352,     0,     0,   353,   354,   355,     0,   357,
       0,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,   371,   372,     0,     0,     0,     0,   373,
     374,   375,     0,   377,   378,   379,   380,   381,   382,     0,
     383,   384,   385,   386,   387,   388,   389,   390,     0,   391,
     392,   393,   394,   395,   396,   397,   398,     0,   399,   400,
     401,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,     0,   413,   414,     0,   416,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,   428,   429,
     430,   431,   432,     0,     0,   433,   434,   435,   436,   437,
     438,   439,   440,   441,   442,     0,     0,   444,   445,   446,
     447,     0,   448,   449,   450,   451,   452,   453,   454,   455,
     456,   457,   458,   459,   460,   548,   462,   463,     0,     0,
     464,   465,     0,   466,     0,   468,   469,   470,   471,   472,
       0,   473,   474,   475,     0,   476,     0,   477,   478,   479,
     480,   481,     0,   482,   483,   484,   485,   486,   487,   488,
     489,     0,     0,   490,   491,   492,     0,   493,   494,   495,
     496,     0,   497,   498,   499,   500,   501,   502,   503,     0,
     504,     0,   506,   507,   508,   509,   510,   511,   512,   513,
     514,     0,     0,   515,     0,     0,   516,   517,   518,   519,
     520,   521,   522,   523,   524,   525,   526,   527,   528,   529,
     530,   531,   532,   533,   534,   535,   536,   545,     0,   573,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   120,   121,   122,   123,
     124,   125,   126,   127,   128,     0,   129,   130,   131,     0,
       0,     0,     0,     0,   132,     0,     0,     0,     0,   134,
     135,     0,   136,   137,   138,     0,   140,   141,   142,   143,
     144,     0,   146,   147,     0,   148,   149,   150,   151,   152,
     153,     0,     0,   154,   155,   156,   157,   158,   159,   160,
       0,   161,   162,   163,   164,   165,     0,     0,     0,   167,
     168,   169,   170,   171,   172,     0,   174,   175,   176,     0,
     177,   178,   179,   180,   181,   182,     0,     0,   184,   185,
     186,   187,   188,   189,   190,   191,   192,   193,   194,   195,
     196,   197,   198,     0,   199,     0,   200,   201,   202,   203,
     204,   205,     0,     0,   206,   207,   208,   209,   210,     0,
       0,   211,   212,   213,   214,   215,   216,   217,     0,   218,
     219,   220,     0,   221,   222,   223,     0,   224,   225,   226,
     227,   228,   229,   230,   231,   232,   233,   234,     0,   235,
       0,   236,   237,   238,   239,     0,   240,     0,   241,     0,
       0,     0,   244,   245,   546,     0,   248,     0,   249,   250,
       0,     0,   251,   252,   253,   254,     0,   255,   256,   257,
     258,   259,  2339,   261,     0,   263,   264,   265,   266,     0,
     267,   268,   269,   270,   271,   272,   273,     0,   274,     0,
     276,   277,   278,   279,   280,   281,   282,   283,     0,   284,
       0,   285,     0,     0,   288,     0,   290,   291,   292,   293,
     294,   295,   296,     0,     0,   297,     0,   299,     0,     0,
     301,   302,   303,   304,   305,   306,   307,   308,   547,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,   322,   323,   324,   325,   326,   327,   328,   329,   330,
       0,   332,   333,   334,   335,   336,   337,     0,   338,   339,
       0,   341,     0,   342,   343,   344,   345,   346,   347,     0,
     348,   349,     0,     0,   350,   351,   352,     0,     0,   353,
     354,   355,     0,   357,     0,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,   371,   372,     0,
       0,     0,     0,   373,   374,   375,     0,   377,   378,   379,
     380,   381,   382,     0,   383,   384,   385,   386,   387,   388,
     389,   390,     0,   391,   392,   393,   394,   395,   396,   397,
     398,     0,   399,   400,   401,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,     0,   413,   414,     0,
     416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,   428,   429,   430,   431,   432,     0,     0,   433,
     434,   435,   436,   437,   438,   439,   440,   441,   442,     0,
       0,   444,   445,   446,   447,     0,   448,   449,   450,   451,
     452,   453,   454,   455,   456,   457,   458,   459,   460,   548,
     462,   463,     0,     0,   464,   465,     0,   466,     0,   468,
     469,   470,   471,   472,     0,   473,   474,   475,     0,   476,
       0,   477,   478,   479,   480,   481,     0,   482,   483,   484,
     485,   486,   487,   488,   489,     0,     0,   490,   491,   492,
       0,   493,   494,   495,   496,     0,   497,   498,   499,   500,
     501,   502,   503,     0,   504,     0,   506,   507,   508,   509,
     510,   511,   512,   513,   514,     0,     0,   515,     0,     0,
     516,   517,   518,   519,   520,   521,   522,   523,   524,   525,
     526,   527,   528,   529,   530,   531,   532,   533,   534,   535,
     536,  1570,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     120,   121,   122,   123,   124,   125,   126,   127,   128,     0,
     129,   130,   131,     0,     0,     0,  1571,     0,   132,     0,
    -980,     0,  1572,   134,   135,     0,   136,   137,   138,  1573,
     140,   141,   142,     0,  1574,  1575,  1576,  1577,     0,   148,
     149,   150,   151,   152,   153,     0,     0,   154,   155,   156,
     157,  1578,  1579,   160,     0,   161,   162,   163,   164,     0,
       0,  1580,     0,  1581,   168,   169,   170,   171,   172,  1582,
     174,   175,   176,     0,   177,   178,   179,   180,   181,   182,
       0,  1583,   184,   185,   186,   187,   188,   189,   190,   191,
     192,   193,  1584,   195,   196,  1585,   198,     0,   199,     0,
     200,   201,   202,   203,   204,   205,     0,     0,   206,   207,
     208,   209,   210,     0,     0,   211,   212,  1150,   214,   215,
     216,   217,     0,   218,   219,   220,     0,   221,   222,   223,
       0,   224,   225,   226,   227,     0,   229,   230,   231,   232,
     233,     0,     0,   235,     0,   236,   237,  1586,   239,     0,
     240,     0,   241,  1587,     0,  1588,   244,   245,  -980,  1589,
     248,     0,   249,   250,     0,     0,     0,     0,   253,   254,
       0,   255,   256,   257,   258,   259,   260,   261,  1590,   263,
     264,   265,   266,     0,   267,   268,   269,   270,   271,   272,
     273,     0,   274,  1591,     0,   277,   278,   279,   280,   281,
    1592,  1593,     0,  1594,     0,   285,  1595,  1596,   288,  1597,
     290,   291,   292,   293,   294,   295,   296,     0,     0,   297,
    1598,   299,  1599,     0,   301,   302,   303,   304,   305,   306,
     307,   308,  1600,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,   323,   324,   325,   326,
     327,   328,   329,  1601,  1602,  1603,   333,   334,   335,   336,
       0,     0,   338,   339,  1604,   341,     0,     0,   343,  1605,
     345,   346,   347,     0,   348,   349,     0,     0,   350,   351,
     352,     0,     0,   353,   354,     0,  1606,   357,  1607,     0,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
     370,   371,   372,     0,     0,     0,     0,   373,   374,     0,
    1608,   377,   378,     0,   380,   381,   382,     0,   383,   384,
     385,   386,   387,   388,   389,   390,     0,   391,   392,   393,
    1609,   395,   396,   397,   398,     0,   399,   400,   401,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
       0,   413,   414,  1610,   416,   417,   418,  1611,   420,   421,
     422,   423,   424,   425,   426,   427,   428,   429,   430,   431,
     432,     0,  1612,   433,   434,   435,   436,   437,   438,  1613,
     440,   441,   442,     0,  1614,   444,   445,  1615,   447,     0,
     448,   449,   450,   451,   452,   453,   454,   455,   456,   457,
     458,   459,   460,  1616,   462,     0,     0,     0,   464,   465,
       0,   466,  1617,   468,   469,   470,   471,   472,     0,   473,
    1618,  1619,     0,   476,     0,   477,   478,     0,   480,     0,
       0,   482,   483,  1620,   485,   486,   487,   488,   489,  1621,
       0,   490,   491,   492,     0,   493,   494,   495,   496,     0,
     497,   498,   499,   500,   501,     0,  1622,     0,   504,  1623,
     506,   507,   508,   509,   510,   511,   512,   513,   514,     0,
       0,   515,     0,     0,   516,   517,   518,   519,   520,   521,
     545,     0,   573,     0,     0,     0,     0,     0,     0,     0,
       0,   533,   534,   535,   536,     0,     0,     0,     0,   120,
     121,   122,   123,   124,   125,   126,   127,   128,     0,   129,
     130,   131,     0,     0,     0,     0,     0,   132,     0,     0,
       0,     0,   134,   135,     0,   136,   137,   138,     0,   140,
     141,   142,   143,   144,     0,   146,   147,     0,   148,   149,
     150,   151,   152,   153,     0,     0,   154,   155,   156,   157,
     158,   159,   160,     0,   161,   162,   163,   164,   165,     0,
       0,     0,   167,   168,   169,   170,   171,   172,     0,   174,
     175,   176,     0,   177,   178,   179,   180,   181,   182,     0,
       0,   184,   185,   186,   187,   188,   189,   190,   191,   192,
     193,   194,   195,   196,   197,   198,     0,   199,     0,   200,
     201,   202,   203,   204,   205,     0,     0,   206,   207,   208,
     209,   210,     0,     0,   211,   212,   213,   214,   215,   216,
     217,     0,   218,   219,   220,     0,   221,   222,   223,     0,
     224,   225,   226,   227,   228,   229,   230,   231,   232,   233,
     234,     0,   235,     0,   236,   237,   238,   239,     0,   240,
       0,   241,     0,     0,     0,   244,   245,   546,     0,   248,
       0,   249,   250,     0,     0,   251,   252,   253,   254,     0,
     255,   256,   257,   258,   259,  3156,   261,     0,   263,   264,
     265,   266,     0,   267,   268,   269,   270,   271,   272,   273,
       0,   274,     0,   276,   277,   278,   279,   280,   281,   282,
     283,     0,   284,     0,   285,     0,     0,   288,     0,   290,
     291,   292,   293,   294,   295,   296,     0,     0,   297,     0,
     299,     0,     0,   301,   302,   303,   304,   305,   306,   307,
     308,   547,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323,   324,   325,   326,   327,
     328,   329,   330,     0,   332,   333,   334,   335,   336,   337,
       0,   338,   339,     0,   341,     0,   342,   343,   344,   345,
     346,   347,     0,   348,   349,     0,     0,   350,   351,   352,
       0,     0,   353,   354,   355,     0,   357,     0,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,     0,     0,     0,     0,   373,   374,   375,     0,
     377,   378,   379,   380,   381,   382,     0,   383,   384,   385,
     386,   387,   388,   389,   390,     0,   391,   392,   393,   394,
     395,   396,   397,   398,     0,   399,   400,   401,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,     0,
     413,   414,     0,   416,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,   427,   428,   429,   430,   431,   432,
       0,     0,   433,   434,   435,   436,   437,   438,   439,   440,
     441,   442,     0,     0,   444,   445,   446,   447,     0,   448,
     449,   450,   451,   452,   453,   454,   455,   456,   457,   458,
     459,   460,   548,   462,   463,     0,     0,   464,   465,     0,
     466,     0,   468,   469,   470,   471,   472,     0,   473,   474,
     475,     0,   476,     0,   477,   478,   479,   480,   481,     0,
     482,   483,   484,   485,   486,   487,   488,   489,     0,     0,
     490,   491,   492,     0,   493,   494,   495,   496,     0,   497,
     498,   499,   500,   501,   502,   503,     0,   504,     0,   506,
     507,   508,   509,   510,   511,   512,   513,   514,     0,     0,
     515,     0,     0,   516,   517,   518,   519,   520,   521,   522,
     523,   524,   525,   526,   527,   528,   529,   530,   531,   532,
     533,   534,   535,   536,   545,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   120,   121,   122,   123,   124,   125,   126,
     127,   128,     0,   129,   130,   131,     0,     0,     0,     0,
       0,   132,     0,     0,     0,     0,   134,   135,     0,   136,
     137,   138,     0,   140,   141,   142,   143,   144,     0,   146,
     147,     0,   148,   149,   150,   151,   152,   153,     0,     0,
     154,   155,   156,   157,   158,   159,   160,     0,   161,   162,
     163,   164,   165,     0,     0,     0,   167,   168,   169,   170,
     171,   172,     0,   174,   175,   176,     0,   177,   178,   179,
     180,   181,   182,     0,     0,   184,   185,   186,   187,   188,
     189,   190,   191,   192,   193,   194,   195,   196,   197,   198,
       0,   199,     0,   200,   201,   202,   203,   204,   205,     0,
       0,   206,   207,   208,   209,   210,     0,     0,   211,   212,
     213,   214,   215,   216,   217,     0,   218,   219,   220,     0,
     221,   222,   223,     0,   224,   225,   226,   227,   228,   229,
     230,   231,   232,   233,   234,     0,   235,     0,   236,   237,
     238,   239,     0,   240,     0,   241,     0,     0,     0,   244,
     245,   546,     0,   248,     0,   249,   250,     0,     0,   251,
     252,   253,   254,     0,   255,   256,   257,   258,   259,   260,
     261,     0,   263,   264,   265,   266,     0,   267,   268,   269,
     270,   271,   272,   273,     0,   274,     0,   276,   277,   278,
     279,   280,   281,   282,   283,     0,   284,     0,   285,     0,
       0,   288,     0,   290,   291,   292,   293,   294,   295,   296,
       0,     0,   297,     0,   299,     0,     0,   301,   302,   303,
     304,   305,   306,   307,   308,   547,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,   329,   330,     0,   332,   333,
     334,   335,   336,   337,     0,   338,   339,     0,   341,     0,
     342,   343,   344,   345,   346,   347,     0,   348,   349,     0,
       0,   350,   351,   352,     0,     0,   353,   354,   355,     0,
     357,     0,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,     0,     0,     0,     0,
     373,   374,   375,     0,   377,   378,   379,   380,   381,   382,
       0,   383,   384,   385,   386,   387,   388,   389,   390,     0,
     391,   392,   393,   394,   395,   396,   397,   398,     0,   399,
     400,   401,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,     0,   413,   414,     0,   416,   417,   418,
     419,   420,   421,   422,   423,   424,   425,   426,   427,   428,
     429,   430,   431,   432,     0,     0,   433,   434,   435,   436,
     437,   438,   439,   440,   441,   442,     0,     0,   444,   445,
     446,   447,     0,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   548,   462,   463,     0,
       0,   464,   465,     0,   466,     0,   468,   469,   470,   471,
     472,     0,   473,   474,   475,     0,   476,     0,   477,   478,
     479,   480,   481,     0,   482,   483,   484,   485,   486,   487,
     488,   489,     0,     0,   490,   491,   492,     0,   493,   494,
     495,   496,     0,   497,   498,   499,   500,   501,   502,   503,
       0,   504,     0,   506,   507,   508,   509,   510,   511,   512,
     513,   514,     0,     0,   515,     0,     0,   516,   517,   518,
     519,   520,   521,   522,   523,   524,   525,   526,   527,   528,
     529,   530,   531,   532,   533,   534,   535,   536,   545,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   120,   121,   122,
     123,   124,   125,   126,   127,   128,     0,   129,   130,   131,
       0,     0,     0,     0,     0,   132,     0,     0,     0,     0,
     134,   135,     0,   136,   137,   138,     0,   140,   141,   142,
     143,   144,     0,   146,   147,     0,   148,   149,   150,   151,
     152,   153,     0,     0,   154,   155,   156,   157,   158,   159,
     160,     0,   161,   162,   163,   164,   165,     0,     0,     0,
     167,   168,   169,   170,   171,   172,     0,   174,   175,   176,
       0,   177,   178,   179,   180,   181,   182,     0,     0,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,   196,   197,   198,     0,   199,     0,   200,   201,   202,
     203,   204,   205,     0,     0,   206,   207,   208,   209,   210,
       0,     0,   211,   212,   213,   214,   215,   216,   217,     0,
     218,   219,   220,     0,   221,   222,   223,     0,   224,   225,
     226,   227,   228,   229,   230,   231,   232,   233,   234,     0,
     235,     0,   236,   237,   238,   239,     0,   240,     0,   241,
       0,     0,     0,   244,   245,   546,     0,   865,     0,   249,
     250,     0,     0,   251,   252,   253,   254,     0,   255,   256,
     257,   258,   259,   260,   261,     0,   263,   264,   265,   266,
       0,   267,   268,   269,   270,   271,   272,   273,     0,   274,
       0,   276,   277,   278,   279,   280,   281,   282,   283,     0,
     284,     0,   285,     0,     0,   288,     0,   290,   291,   292,
     293,   294,   295,   296,     0,     0,   297,     0,   299,     0,
       0,   301,   302,   866,   304,   305,   306,   307,   308,   547,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,   323,   324,   325,   326,   327,   328,   329,
     330,     0,   332,   333,   334,   335,   336,   337,     0,   338,
     339,     0,   341,     0,   342,   343,   344,   345,   346,   347,
       0,   348,   349,     0,     0,   350,   351,   352,     0,     0,
     353,   354,   355,     0,   357,     0,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
       0,     0,     0,     0,   373,   374,   375,     0,   377,   378,
     379,   380,   381,   382,     0,   383,   384,   385,   386,   387,
     388,   389,   390,     0,   391,   392,   393,   394,   395,   396,
     397,   398,     0,   399,   400,   401,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,     0,   413,   414,
       0,   416,   417,   418,   419,   420,   421,   422,   423,   867,
     425,   426,   427,   428,   429,   430,   431,   432,     0,     0,
     433,   434,   435,   436,   868,   438,   439,   440,   441,   442,
       0,     0,   444,   445,   446,   447,     0,   448,   449,   450,
     451,   452,   453,   454,   455,   456,   457,   458,   459,   460,
     548,   462,   463,     0,     0,   464,   465,     0,   466,     0,
     468,   469,   470,   471,   472,     0,   473,   869,   475,     0,
     476,     0,   477,   478,   479,   480,   481,     0,   482,   483,
     484,   485,   486,   487,   488,   489,     0,     0,   490,   491,
     492,     0,   493,   494,   495,   496,     0,   497,   498,   499,
     500,   501,   502,   503,     0,   504,     0,   506,   507,   508,
     509,   510,   511,   512,   513,   514,     0,     0,   515,     0,
       0,   516,   517,   518,   519,   520,   521,   522,   523,   524,
     525,   526,   527,   528,   529,   530,   531,   532,   533,   534,
     535,   536,   545,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   120,   121,   122,   123,   124,   125,   126,   127,   128,
       0,   129,   130,   131,     0,     0,     0,     0,     0,   132,
       0,     0,     0,     0,   134,   135,     0,   136,   137,   138,
       0,   140,   141,   142,   143,   144,     0,   146,   147,     0,
     148,   149,   150,   151,   152,   153,     0,     0,   154,   155,
     156,   157,   158,   159,   160,     0,   161,   162,   163,   164,
     165,     0,     0,     0,   167,   168,   169,   170,   171,   172,
       0,   174,   175,   176,     0,   177,   178,   179,   180,   181,
     182,     0,     0,   184,   185,   186,   187,   188,   189,   190,
     191,   192,   193,   194,   195,   196,   197,   198,     0,   199,
       0,   200,   201,   202,   203,   204,   205,     0,     0,   206,
     207,   208,   209,   210,     0,     0,   211,   212,   213,   214,
     215,   216,   217,     0,   218,   219,   220,     0,   221,   222,
     223,     0,   224,   225,   226,   227,   228,   229,   230,   231,
     232,   233,   234,     0,   235,     0,   236,   237,   238,   239,
       0,   240,     0,   241,     0,     0,     0,   244,   245,   546,
       0,   248,     0,   249,   250,     0,     0,   251,   252,   253,
     254,     0,   255,   256,   257,   258,   259,  1038,   261,     0,
     263,   264,   265,   266,     0,   267,   268,   269,   270,   271,
     272,   273,     0,   274,     0,   276,   277,   278,   279,   280,
     281,   282,   283,     0,   284,     0,   285,     0,     0,   288,
       0,   290,   291,   292,   293,   294,   295,   296,     0,     0,
     297,     0,   299,     0,     0,   301,   302,   303,   304,   305,
     306,   307,   308,   547,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
     326,   327,   328,   329,   330,     0,   332,   333,   334,   335,
     336,   337,     0,   338,   339,     0,   341,     0,   342,   343,
     344,   345,   346,   347,     0,   348,   349,     0,     0,   350,
     351,   352,     0,     0,   353,   354,   355,     0,   357,     0,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,     0,     0,     0,     0,   373,   374,
     375,     0,   377,   378,   379,   380,   381,   382,     0,   383,
     384,   385,   386,   387,   388,   389,   390,     0,   391,   392,
     393,   394,   395,   396,   397,   398,     0,   399,   400,   401,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,     0,   413,   414,     0,   416,   417,   418,   419,   420,
     421,   422,   423,   424,   425,   426,   427,   428,   429,   430,
     431,   432,     0,     0,   433,   434,   435,   436,   437,   438,
     439,   440,   441,   442,     0,     0,   444,   445,   446,   447,
       0,   448,   449,   450,   451,   452,   453,   454,   455,   456,
     457,   458,   459,   460,   548,   462,   463,     0,     0,   464,
     465,     0,   466,     0,   468,   469,   470,   471,   472,     0,
     473,   474,   475,     0,   476,     0,   477,   478,   479,   480,
     481,     0,   482,   483,   484,   485,   486,   487,   488,   489,
       0,     0,   490,   491,   492,     0,   493,   494,   495,   496,
       0,   497,   498,   499,   500,   501,   502,   503,     0,   504,
       0,   506,   507,   508,   509,   510,   511,   512,   513,   514,
       0,     0,   515,     0,     0,   516,   517,   518,   519,   520,
     521,   522,   523,   524,   525,   526,   527,   528,   529,   530,
     531,   532,   533,   534,   535,   536,   545,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   120,   121,   122,   123,   124,
     125,   126,   127,   128,     0,   129,   130,   131,     0,     0,
       0,     0,     0,   132,     0,     0,     0,     0,   134,   135,
       0,   136,   137,   138,     0,   140,   141,   142,   143,   144,
       0,   146,   147,     0,   148,   149,   150,   151,   152,   153,
       0,     0,   154,   155,   156,   157,   158,   159,   160,     0,
     161,   162,   163,   164,   165,     0,     0,     0,   167,   168,
     169,   170,   171,   172,     0,   174,   175,   176,     0,   177,
     178,   179,   180,   181,   182,     0,     0,   184,   185,   186,
     187,   188,   189,   190,   191,   192,   193,   194,   195,   196,
     197,   198,     0,   199,     0,   200,   201,   202,   203,   204,
     205,     0,     0,   206,   207,   208,   209,   210,     0,     0,
     211,   212,   213,   214,   215,   216,   217,     0,   218,   219,
     220,     0,   221,   222,   223,     0,   224,   225,   226,   227,
     228,   229,   230,   231,   232,   233,   234,     0,   235,     0,
     236,   237,   238,   239,     0,   240,     0,   241,     0,     0,
       0,   244,   245,   546,     0,   248,     0,   249,   250,     0,
       0,   251,   252,   253,   254,     0,   255,   256,   257,   258,
     259,   260,   261,     0,   263,   264,   265,   266,     0,   267,
     268,   269,   270,   271,   272,   273,     0,   274,     0,   276,
     277,   278,   279,   280,   281,   282,   283,     0,   284,     0,
     285,     0,     0,   288,     0,   290,   291,   292,   293,   294,
     295,   296,     0,     0,   297,     0,   299,     0,     0,   301,
     302,   303,   304,   305,   306,   307,   308,   547,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,   323,   324,   325,   326,   327,   328,   329,   330,     0,
     332,   333,   334,   335,   336,   337,     0,   338,   339,     0,
     341,     0,   342,   343,   344,   345,   346,   347,     0,   348,
     349,     0,     0,   350,   351,   352,     0,     0,   353,   354,
     355,     0,   357,     0,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,     0,     0,
       0,     0,   373,   374,   375,     0,   377,   378,   379,   380,
     381,   382,     0,   383,   384,   385,   386,   387,   388,   389,
     390,     0,   391,   392,   393,   394,   395,   396,   397,   398,
       0,   399,   400,   401,   402,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,     0,   413,   414,     0,   416,
     417,   418,   419,   420,   421,   422,   423,   867,   425,   426,
     427,   428,   429,   430,   431,   432,     0,     0,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,     0,     0,
     444,   445,   446,   447,     0,   448,   449,   450,   451,   452,
     453,   454,   455,   456,   457,   458,   459,   460,   548,   462,
     463,     0,     0,   464,   465,     0,   466,     0,   468,   469,
     470,   471,   472,     0,   473,   869,   475,     0,   476,     0,
     477,   478,   479,   480,   481,     0,   482,   483,   484,   485,
     486,   487,   488,   489,     0,     0,   490,   491,   492,     0,
     493,   494,   495,   496,     0,   497,   498,   499,   500,   501,
     502,   503,     0,   504,     0,   506,   507,   508,   509,   510,
     511,   512,   513,   514,     0,     0,   515,     0,     0,   516,
     517,   518,   519,   520,   521,   522,   523,   524,   525,   526,
     527,   528,   529,   530,   531,   532,   533,   534,   535,   536,
     545,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   120,
     121,   122,   123,   124,   125,   126,   127,   128,     0,   129,
     130,   131,     0,     0,     0,     0,     0,   132,     0,     0,
       0,     0,   134,   135,     0,   136,   137,   138,     0,   140,
     141,   142,   143,   144,     0,   146,   147,     0,   148,   149,
     150,   151,   152,   153,     0,     0,   154,   155,   156,   157,
     158,   159,   160,     0,   161,   162,   163,   164,   165,     0,
       0,     0,   167,   168,   169,   170,   171,   172,     0,   174,
     175,   176,     0,   177,   178,   179,   180,   181,   182,     0,
       0,   184,   185,   186,   187,   188,   189,   190,   191,   192,
     193,   194,   195,   196,   197,   198,     0,   199,     0,   200,
     201,   202,   203,   204,   205,     0,     0,   206,   207,   208,
     209,   210,     0,     0,   211,   212,   213,   214,   215,   216,
     217,     0,   218,   219,   220,     0,   221,   222,   223,     0,
     224,   225,   226,   227,   228,   229,   230,   231,   232,   233,
     234,     0,   235,     0,   236,   237,   238,   239,     0,   240,
       0,   241,     0,     0,     0,   244,   245,   546,     0,   248,
       0,   249,   250,     0,     0,   251,   252,   253,   254,     0,
     255,   256,   257,   258,   259,  1403,   261,     0,   263,   264,
     265,   266,     0,   267,   268,   269,   270,   271,   272,   273,
       0,   274,     0,   276,   277,   278,   279,   280,   281,   282,
     283,     0,   284,     0,   285,     0,     0,   288,     0,   290,
     291,   292,   293,   294,   295,   296,     0,     0,   297,     0,
     299,     0,     0,   301,   302,   303,   304,   305,   306,   307,
     308,   547,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323,   324,   325,   326,   327,
     328,   329,   330,     0,   332,   333,   334,   335,   336,   337,
       0,   338,   339,     0,   341,     0,   342,   343,   344,   345,
     346,   347,     0,   348,   349,     0,     0,   350,   351,   352,
       0,     0,   353,   354,   355,     0,   357,     0,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,     0,     0,     0,     0,   373,   374,   375,     0,
     377,   378,   379,   380,   381,   382,     0,   383,   384,   385,
     386,   387,   388,   389,   390,     0,   391,   392,   393,   394,
     395,   396,   397,   398,     0,   399,   400,   401,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,     0,
     413,   414,     0,   416,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,   427,   428,   429,   430,   431,   432,
       0,     0,   433,   434,   435,   436,   437,   438,   439,   440,
     441,   442,     0,     0,   444,   445,   446,   447,     0,   448,
     449,   450,   451,   452,   453,   454,   455,   456,   457,   458,
     459,   460,   548,   462,   463,     0,     0,   464,   465,     0,
     466,     0,   468,   469,   470,   471,   472,     0,   473,   474,
     475,     0,   476,     0,   477,   478,   479,   480,   481,     0,
     482,   483,   484,   485,   486,   487,   488,   489,     0,     0,
     490,   491,   492,     0,   493,   494,   495,   496,     0,   497,
     498,   499,   500,   501,   502,   503,     0,   504,     0,   506,
     507,   508,   509,   510,   511,   512,   513,   514,     0,     0,
     515,     0,     0,   516,   517,   518,   519,   520,   521,   522,
     523,   524,   525,   526,   527,   528,   529,   530,   531,   532,
     533,   534,   535,   536,   545,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   120,   121,   122,   123,   124,   125,   126,
     127,   128,     0,   129,   130,   131,     0,     0,     0,     0,
       0,   132,     0,     0,     0,     0,   134,   135,     0,   136,
     137,   138,     0,   140,   141,   142,   143,   144,     0,   146,
     147,     0,   148,   149,   150,   151,   152,   153,     0,     0,
     154,   155,   156,   157,   158,   159,   160,     0,   161,   162,
     163,   164,   165,     0,     0,     0,   167,   168,   169,   170,
     171,   172,     0,   174,   175,   176,     0,   177,   178,   179,
     180,   181,   182,     0,     0,   184,   185,   186,   187,   188,
     189,   190,   191,   192,   193,   194,   195,   196,   197,   198,
       0,   199,     0,   200,   201,   202,   203,   204,   205,     0,
       0,   206,   207,   208,   209,   210,     0,     0,   211,   212,
     213,   214,   215,   216,   217,     0,   218,   219,   220,     0,
     221,   222,   223,     0,   224,   225,   226,   227,   228,   229,
     230,   231,   232,   233,   234,     0,   235,     0,   236,   237,
     238,   239,     0,   240,     0,   241,     0,     0,     0,   244,
     245,   546,     0,   248,     0,   249,   250,     0,     0,   251,
     252,   253,   254,     0,   255,   256,   257,   258,   259,  1415,
     261,     0,   263,   264,   265,   266,     0,   267,   268,   269,
     270,   271,   272,   273,     0,   274,     0,   276,   277,   278,
     279,   280,   281,   282,   283,     0,   284,     0,   285,     0,
       0,   288,     0,   290,   291,   292,   293,   294,   295,   296,
       0,     0,   297,     0,   299,     0,     0,   301,   302,   303,
     304,   305,   306,   307,   308,   547,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,   329,   330,     0,   332,   333,
     334,   335,   336,   337,     0,   338,   339,     0,   341,     0,
     342,   343,   344,   345,   346,   347,     0,   348,   349,     0,
       0,   350,   351,   352,     0,     0,   353,   354,   355,     0,
     357,     0,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,     0,     0,     0,     0,
     373,   374,   375,     0,   377,   378,   379,   380,   381,   382,
       0,   383,   384,   385,   386,   387,   388,   389,   390,     0,
     391,   392,   393,   394,   395,   396,   397,   398,     0,   399,
     400,   401,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,     0,   413,   414,     0,   416,   417,   418,
     419,   420,   421,   422,   423,   424,   425,   426,   427,   428,
     429,   430,   431,   432,     0,     0,   433,   434,   435,   436,
     437,   438,   439,   440,   441,   442,     0,     0,   444,   445,
     446,   447,     0,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   548,   462,   463,     0,
       0,   464,   465,     0,   466,     0,   468,   469,   470,   471,
     472,     0,   473,   474,   475,     0,   476,     0,   477,   478,
     479,   480,   481,     0,   482,   483,   484,   485,   486,   487,
     488,   489,     0,     0,   490,   491,   492,     0,   493,   494,
     495,   496,     0,   497,   498,   499,   500,   501,   502,   503,
       0,   504,     0,   506,   507,   508,   509,   510,   511,   512,
     513,   514,     0,     0,   515,     0,     0,   516,   517,   518,
     519,   520,   521,   522,   523,   524,   525,   526,   527,   528,
     529,   530,   531,   532,   533,   534,   535,   536,   545,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   120,   121,   122,
     123,   124,   125,   126,   127,   128,     0,   129,   130,   131,
       0,     0,     0,     0,     0,   132,     0,  1766,     0,     0,
     134,   135,     0,   136,   137,   138,     0,   140,   141,   142,
     143,   144,     0,   146,   147,     0,   148,   149,   150,   151,
     152,   153,     0,     0,   154,   155,   156,   157,   158,   159,
     160,     0,   161,   162,   163,   164,   165,     0,     0,     0,
     167,   168,   169,   170,   171,   172,     0,   174,   175,   176,
       0,   177,   178,   179,   180,   181,   182,     0,     0,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,   196,   197,   198,     0,   199,     0,   200,   201,   202,
     203,   204,   205,     0,     0,   206,   207,   208,   209,   210,
       0,     0,   211,   212,   213,   214,   215,   216,   217,     0,
     218,   219,   220,     0,   221,   222,   223,     0,   224,   225,
     226,   227,   228,   229,   230,   231,   232,   233,   234,     0,
     235,     0,   236,   237,   238,   239,     0,   240,     0,   241,
       0,     0,     0,   244,   245,   546,     0,   248,     0,   249,
     250,     0,     0,   251,   252,   253,   254,     0,   255,   256,
     257,   258,   259,   260,   261,     0,   263,   264,   265,   266,
       0,   267,   268,   269,   270,   271,   272,   273,     0,   274,
       0,   276,   277,   278,   279,   280,   281,   282,   283,     0,
     284,     0,   285,     0,     0,   288,     0,   290,   291,   292,
     293,   294,   295,   296,     0,     0,   297,     0,   299,     0,
       0,   301,   302,   303,   304,   305,   306,   307,   308,   547,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,   323,   324,   325,   326,   327,   328,   329,
     330,     0,   332,   333,   334,   335,   336,   337,     0,   338,
     339,     0,   341,     0,   342,   343,   344,   345,   346,   347,
       0,   348,   349,     0,     0,   350,   351,   352,     0,     0,
     353,   354,   355,     0,   357,     0,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
       0,     0,     0,     0,   373,   374,   375,     0,   377,   378,
     379,   380,   381,   382,     0,   383,   384,   385,   386,   387,
     388,   389,   390,     0,   391,   392,   393,   394,   395,   396,
     397,   398,     0,   399,   400,   401,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,     0,   413,   414,
       0,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,     0,     0,
     433,   434,   435,   436,   437,     0,   439,   440,   441,   442,
       0,     0,   444,   445,   446,   447,     0,   448,   449,   450,
     451,   452,   453,   454,   455,   456,   457,   458,   459,   460,
     548,   462,   463,     0,     0,   464,   465,     0,   466,     0,
     468,   469,   470,   471,   472,     0,   473,   474,   475,     0,
     476,     0,   477,   478,   479,   480,   481,     0,   482,   483,
     484,   485,   486,   487,   488,   489,     0,     0,   490,   491,
     492,     0,   493,   494,   495,   496,     0,   497,   498,   499,
     500,   501,   502,   503,     0,   504,     0,   506,   507,   508,
     509,   510,   511,   512,   513,   514,     0,     0,   515,     0,
       0,   516,   517,   518,   519,   520,   521,   522,   523,   524,
     525,   526,   527,   528,   529,   530,   531,   532,   533,   534,
     535,   536,   545,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   120,   121,   122,   123,   124,   125,   126,   127,   128,
       0,   129,   130,   131,     0,     0,     0,     0,     0,   132,
       0,     0,     0,     0,   134,   135,     0,   136,   137,   138,
       0,   140,   141,   142,   143,   144,     0,   146,   147,     0,
     148,   149,   150,   151,   152,   153,     0,     0,   154,   155,
     156,   157,   158,   159,   160,     0,   161,   162,   163,   164,
     165,     0,     0,     0,   167,   168,   169,   170,   171,   172,
       0,   174,   175,   176,     0,   177,   178,   179,   180,   181,
     182,     0,     0,   184,   185,   186,   187,   188,   189,   190,
     191,   192,   193,   194,   195,   196,   197,   198,     0,   199,
       0,   200,   201,   202,   203,   204,   205,     0,     0,   206,
     207,   208,   209,   210,     0,     0,   211,   212,   213,   214,
     215,   216,   217,     0,   218,   219,   220,     0,   221,   222,
     223,     0,   224,   225,   226,   227,   228,   229,   230,   231,
     232,   233,   234,     0,   235,     0,   236,   237,   238,   239,
       0,   240,     0,   241,     0,     0,     0,   244,   245,   546,
       0,   248,     0,   249,   250,     0,     0,   251,   252,   253,
     254,     0,   255,   256,   257,   258,   259,  1950,   261,     0,
     263,   264,   265,   266,     0,   267,   268,   269,   270,   271,
     272,   273,     0,   274,     0,   276,   277,   278,   279,   280,
     281,   282,   283,     0,   284,     0,   285,     0,     0,   288,
       0,   290,   291,   292,   293,   294,   295,   296,     0,     0,
     297,     0,   299,     0,     0,   301,   302,   303,   304,   305,
     306,   307,   308,   547,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
     326,   327,   328,   329,   330,     0,   332,   333,   334,   335,
     336,   337,     0,   338,   339,     0,   341,     0,   342,   343,
     344,   345,   346,   347,     0,   348,   349,     0,     0,   350,
     351,   352,     0,     0,   353,   354,   355,     0,   357,     0,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,     0,     0,     0,     0,   373,   374,
     375,     0,   377,   378,   379,   380,   381,   382,     0,   383,
     384,   385,   386,   387,   388,   389,   390,     0,   391,   392,
     393,   394,   395,   396,   397,   398,     0,   399,   400,   401,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,     0,   413,   414,     0,   416,   417,   418,   419,   420,
     421,   422,   423,   424,   425,   426,   427,   428,   429,   430,
     431,   432,     0,     0,   433,   434,   435,   436,   437,   438,
     439,   440,   441,   442,     0,     0,   444,   445,   446,   447,
       0,   448,   449,   450,   451,   452,   453,   454,   455,   456,
     457,   458,   459,   460,   548,   462,   463,     0,     0,   464,
     465,     0,   466,     0,   468,   469,   470,   471,   472,     0,
     473,   474,   475,     0,   476,     0,   477,   478,   479,   480,
     481,     0,   482,   483,   484,   485,   486,   487,   488,   489,
       0,     0,   490,   491,   492,     0,   493,   494,   495,   496,
       0,   497,   498,   499,   500,   501,   502,   503,     0,   504,
       0,   506,   507,   508,   509,   510,   511,   512,   513,   514,
       0,     0,   515,     0,     0,   516,   517,   518,   519,   520,
     521,   522,   523,   524,   525,   526,   527,   528,   529,   530,
     531,   532,   533,   534,   535,   536,   545,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   120,   121,   122,   123,   124,
     125,   126,   127,   128,     0,   129,   130,   131,     0,     0,
       0,     0,     0,   132,     0,     0,     0,     0,   134,   135,
       0,   136,   137,   138,     0,   140,   141,   142,   143,   144,
       0,   146,   147,     0,   148,   149,   150,   151,   152,   153,
       0,     0,   154,   155,   156,   157,   158,   159,   160,     0,
     161,   162,   163,   164,   165,     0,     0,     0,   167,   168,
     169,   170,   171,   172,     0,   174,   175,   176,     0,   177,
     178,   179,   180,   181,   182,     0,     0,   184,   185,   186,
     187,   188,   189,   190,   191,   192,   193,   194,   195,   196,
     197,   198,     0,   199,     0,   200,   201,   202,   203,   204,
     205,     0,     0,   206,   207,   208,   209,   210,     0,     0,
     211,   212,   213,   214,   215,   216,   217,     0,   218,   219,
     220,     0,   221,   222,   223,     0,   224,   225,   226,   227,
     228,   229,   230,   231,   232,   233,   234,     0,   235,     0,
     236,   237,   238,   239,     0,   240,     0,   241,     0,     0,
       0,   244,   245,   546,     0,   248,     0,   249,   250,     0,
       0,   251,   252,   253,   254,     0,   255,   256,   257,   258,
     259,  2326,   261,     0,   263,   264,   265,   266,     0,   267,
     268,   269,   270,   271,   272,   273,     0,   274,     0,   276,
     277,   278,   279,   280,   281,   282,   283,     0,   284,     0,
     285,     0,     0,   288,     0,   290,   291,   292,   293,   294,
     295,   296,     0,     0,   297,     0,   299,     0,     0,   301,
     302,   303,   304,   305,   306,   307,   308,   547,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,   323,   324,   325,   326,   327,   328,   329,   330,     0,
     332,   333,   334,   335,   336,   337,     0,   338,   339,     0,
     341,     0,   342,   343,   344,   345,   346,   347,     0,   348,
     349,     0,     0,   350,   351,   352,     0,     0,   353,   354,
     355,     0,   357,     0,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,     0,     0,
       0,     0,   373,   374,   375,     0,   377,   378,   379,   380,
     381,   382,     0,   383,   384,   385,   386,   387,   388,   389,
     390,     0,   391,   392,   393,   394,   395,   396,   397,   398,
       0,   399,   400,   401,   402,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,     0,   413,   414,     0,   416,
     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
     427,   428,   429,   430,   431,   432,     0,     0,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,     0,     0,
     444,   445,   446,   447,     0,   448,   449,   450,   451,   452,
     453,   454,   455,   456,   457,   458,   459,   460,   548,   462,
     463,     0,     0,   464,   465,     0,   466,     0,   468,   469,
     470,   471,   472,     0,   473,   474,   475,     0,   476,     0,
     477,   478,   479,   480,   481,     0,   482,   483,   484,   485,
     486,   487,   488,   489,     0,     0,   490,   491,   492,     0,
     493,   494,   495,   496,     0,   497,   498,   499,   500,   501,
     502,   503,     0,   504,     0,   506,   507,   508,   509,   510,
     511,   512,   513,   514,     0,     0,   515,     0,     0,   516,
     517,   518,   519,   520,   521,   522,   523,   524,   525,   526,
     527,   528,   529,   530,   531,   532,   533,   534,   535,   536,
     545,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   120,
     121,   122,   123,   124,   125,   126,   127,   128,     0,   129,
     130,   131,     0,     0,     0,     0,     0,   132,     0,     0,
       0,     0,   134,   135,     0,   136,   137,   138,     0,   140,
     141,   142,   143,   144,     0,   146,   147,     0,   148,   149,
     150,   151,   152,   153,     0,     0,   154,   155,   156,   157,
     158,   159,   160,     0,   161,   162,   163,   164,   165,     0,
       0,     0,   167,   168,   169,   170,   171,   172,     0,   174,
     175,   176,     0,   177,   178,   179,   180,   181,   182,     0,
       0,   184,   185,   186,   187,   188,   189,   190,   191,   192,
     193,   194,   195,   196,   197,   198,     0,   199,     0,   200,
     201,   202,   203,   204,   205,     0,     0,   206,   207,   208,
     209,   210,     0,     0,   211,   212,   213,   214,   215,   216,
     217,     0,   218,   219,   220,     0,   221,   222,   223,     0,
     224,   225,   226,   227,   228,   229,   230,   231,   232,   233,
     234,     0,   235,     0,   236,   237,   238,   239,     0,   240,
       0,   241,     0,     0,     0,   244,   245,   546,     0,   248,
       0,   249,   250,     0,     0,   251,   252,   253,   254,     0,
     255,   256,   257,   258,   259,  2341,   261,     0,   263,   264,
     265,   266,     0,   267,   268,   269,   270,   271,   272,   273,
       0,   274,     0,   276,   277,   278,   279,   280,   281,   282,
     283,     0,   284,     0,   285,     0,     0,   288,     0,   290,
     291,   292,   293,   294,   295,   296,     0,     0,   297,     0,
     299,     0,     0,   301,   302,   303,   304,   305,   306,   307,
     308,   547,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323,   324,   325,   326,   327,
     328,   329,   330,     0,   332,   333,   334,   335,   336,   337,
       0,   338,   339,     0,   341,     0,   342,   343,   344,   345,
     346,   347,     0,   348,   349,     0,     0,   350,   351,   352,
       0,     0,   353,   354,   355,     0,   357,     0,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,     0,     0,     0,     0,   373,   374,   375,     0,
     377,   378,   379,   380,   381,   382,     0,   383,   384,   385,
     386,   387,   388,   389,   390,     0,   391,   392,   393,   394,
     395,   396,   397,   398,     0,   399,   400,   401,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,     0,
     413,   414,     0,   416,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,   427,   428,   429,   430,   431,   432,
       0,     0,   433,   434,   435,   436,   437,   438,   439,   440,
     441,   442,     0,     0,   444,   445,   446,   447,     0,   448,
     449,   450,   451,   452,   453,   454,   455,   456,   457,   458,
     459,   460,   548,   462,   463,     0,     0,   464,   465,     0,
     466,     0,   468,   469,   470,   471,   472,     0,   473,   474,
     475,     0,   476,     0,   477,   478,   479,   480,   481,     0,
     482,   483,   484,   485,   486,   487,   488,   489,     0,     0,
     490,   491,   492,     0,   493,   494,   495,   496,     0,   497,
     498,   499,   500,   501,   502,   503,     0,   504,     0,   506,
     507,   508,   509,   510,   511,   512,   513,   514,     0,     0,
     515,     0,     0,   516,   517,   518,   519,   520,   521,   522,
     523,   524,   525,   526,   527,   528,   529,   530,   531,   532,
     533,   534,   535,   536,  1570,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   120,   121,   122,   123,   124,   125,   126,
     127,   128,     0,   129,   130,   131,     0,     0,     0,  1571,
       0,   132,     0,     0,     0,  1572,   134,   135,     0,   136,
     137,   138,  1573,   140,   141,   142,     0,  1574,  1575,  1576,
    1577,     0,   148,   149,   150,   151,   152,   153,     0,     0,
     154,   155,   156,   157,  1578,  1579,   160,     0,   161,   162,
     163,   164,     0,     0,  1580,     0,  1581,   168,   169,   170,
     171,   172,  1582,   174,   175,   176,     0,   177,   178,   179,
     180,   181,   182,     0,  1583,   184,   185,   186,   187,   188,
     189,   190,   191,   192,   193,  1584,   195,   196,  1585,   198,
       0,   199,     0,   200,   201,   202,   203,   204,   205,     0,
       0,   206,   207,   208,   209,   210,     0,     0,   211,   212,
    1150,   214,   215,   216,   217,     0,   218,   219,   220,     0,
     221,   222,   223,     0,   224,   225,   226,   227,     0,   229,
     230,   231,   232,   233,     0,     0,   235,     0,   236,   237,
    1586,   239,     0,   240,     0,   241,  1587,     0,  1588,   244,
     245,     0,  1589,   248,     0,   249,   250,     0,     0,     0,
       0,   253,   254,     0,   255,   256,   257,   258,   259,   260,
     261,  1590,   263,   264,   265,   266,     0,   267,   268,   269,
     270,   271,   272,   273,     0,   274,  1591,     0,   277,   278,
     279,   280,   281,  1592,  1593,     0,  1594,     0,   285,  1595,
    1596,   288,  1597,   290,   291,   292,   293,   294,   295,   296,
       0,     0,   297,  1598,   299,  1599,     0,   301,   302,   303,
     304,   305,   306,   307,   308,  1600,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,   329,  1601,  1602,  1603,   333,
     334,   335,   336,     0,     0,   338,   339,  1604,   341,     0,
       0,   343,  1605,   345,   346,   347,     0,   348,   349,     0,
       0,   350,   351,   352,     0,     0,   353,   354,     0,  1606,
     357,  1607,     0,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,     0,     0,     0,     0,
     373,   374,     0,  1608,   377,   378,     0,   380,   381,   382,
       0,   383,   384,   385,   386,   387,   388,   389,   390,     0,
     391,   392,   393,  1609,   395,   396,   397,   398,     0,   399,
     400,   401,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,     0,   413,   414,  1610,   416,   417,   418,
    1611,   420,   421,   422,   423,   424,   425,   426,   427,   428,
     429,   430,   431,   432,     0,  1612,   433,   434,   435,   436,
     437,   438,  1613,   440,   441,   442,     0,  1614,   444,   445,
    1615,   447,     0,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,  1616,   462,     0,     0,
       0,   464,   465,     0,   466,  1617,   468,   469,   470,   471,
     472,     0,   473,  1618,  1619,     0,   476,     0,   477,   478,
       0,   480,     0,     0,   482,   483,  1620,   485,   486,   487,
     488,   489,  1621,     0,   490,   491,   492,     0,   493,   494,
     495,   496,     0,   497,   498,   499,   500,   501,     0,  1622,
       0,   504,  1623,   506,   507,   508,   509,   510,   511,   512,
     513,   514,     0,     0,   515,     0,     0,   516,   517,   518,
     519,   520,   521,  1570,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   533,   534,   535,   536,     0,     0,
       0,     0,   120,   121,   122,   123,   124,   125,   126,   127,
     128,     0,   129,   130,   131,     0,     0,     0,  1571,     0,
     132,     0,     0,     0,  1572,   134,   135,     0,   136,   137,
     138,  1573,   140,   141,   142,     0,  1574,  1575,  1576,  1577,
       0,   148,   149,   150,   151,   152,   153,     0,     0,   154,
     155,   156,   157,  1578,  1579,   160,     0,   161,   162,   163,
     164,     0,     0,  1580,     0,  1581,   168,   169,   170,   171,
     172,  1582,   174,   175,   176,     0,   177,   178,   179,   180,
     181,   182,     0,  1583,   184,   185,   186,   187,   188,   189,
     190,   191,   192,   193,  1584,   195,   196,  1585,   198,     0,
     199,     0,   200,   201,   202,   203,   204,   205,     0,     0,
     206,   207,   208,   209,   210,     0,     0,   211,   212,  1150,
     214,   215,   216,   217,     0,   218,   219,   220,     0,  1932,
     222,   223,     0,   224,   225,   226,   227,     0,   229,   230,
     231,   232,   233,     0,     0,   235,     0,   236,   237,  1586,
     239,     0,   240,     0,   241,  1587,     0,  1588,   244,   245,
       0,  1589,   248,     0,   249,   250,     0,     0,     0,     0,
     253,   254,     0,   255,   256,   257,   258,   259,   260,   261,
    1590,   263,   264,   265,   266,     0,   267,   268,   269,   270,
     271,   272,   273,     0,   274,  1591,     0,   277,   278,   279,
     280,   281,  1592,  1593,     0,  1594,     0,   285,  1595,  1596,
     288,  1597,   290,   291,   292,   293,   294,   295,   296,     0,
       0,   297,  1598,   299,  1599,     0,   301,   302,   303,   304,
     305,   306,   307,   308,  1600,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,  1601,  1602,  1603,   333,   334,
     335,   336,     0,     0,   338,   339,  1604,   341,     0,     0,
     343,  1605,   345,   346,   347,     0,   348,   349,     0,     0,
     350,   351,   352,     0,     0,   353,   354,     0,  1606,   357,
    1607,     0,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,   371,   372,     0,     0,     0,     0,   373,
     374,     0,  1608,   377,   378,     0,   380,   381,   382,     0,
     383,   384,   385,   386,   387,   388,   389,   390,     0,   391,
     392,   393,  1609,   395,   396,   397,   398,     0,   399,   400,
     401,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,     0,   413,   414,  1610,   416,   417,   418,  1611,
     420,   421,   422,   423,   424,   425,   426,   427,   428,   429,
     430,   431,   432,     0,  1612,   433,   434,   435,   436,   437,
     438,  1613,   440,   441,   442,     0,  1614,   444,   445,  1615,
     447,     0,   448,   449,   450,   451,   452,   453,   454,   455,
     456,   457,   458,   459,   460,  1616,   462,     0,     0,     0,
     464,   465,     0,   466,  1617,   468,   469,   470,   471,   472,
       0,   473,  1618,  1619,     0,   476,     0,   477,   478,     0,
     480,     0,     0,   482,   483,  1620,   485,   486,   487,   488,
     489,  1621,     0,   490,   491,   492,     0,   493,   494,   495,
     496,     0,   497,   498,   499,   500,   501,     0,  1622,     0,
     504,  1623,   506,   507,   508,   509,   510,   511,   512,   513,
     514,     0,     0,   515,     0,     0,   516,   517,   518,   519,
     520,   521,  3381,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   533,   534,   535,   536,     0,     0,     0,
       0,   120,   121,   122,   123,   124,   125,   126,   127,   128,
       0,   129,   130,   131,     0,     0,     0,  3073,     0,   132,
       0,     0,     0,  3074,   134,   135,     0,   136,   137,   138,
    3075,   140,   141,   142,     0,  1574,  3076,  1576,  1577,     0,
     148,   149,   150,   151,   152,   153,     0,     0,   154,   155,
     156,   157,  1578,  1579,   160,     0,   161,   162,   163,   164,
       0,     0,  3077,     0,  3078,   168,   169,   170,   171,   172,
    3079,   174,   175,   176,     0,   177,   178,   179,   180,   181,
     182,     0,  3080,   184,   185,   186,   187,   188,   189,   190,
     191,   192,   193,  1584,   195,   196,  1585,   198,     0,   199,
       0,   200,   201,   202,   203,   204,   205,     0,     0,   206,
     207,   208,   209,   210,     0,     0,   211,   212,  1150,   214,
     215,   216,   217,     0,   218,   219,   220,     0,   221,   222,
     223,     0,   224,   225,   226,   227,     0,   229,   230,   231,
     232,   233,     0,     0,   235,     0,   236,   237,  1586,   239,
       0,   240,     0,   241,  3081,     0,  3082,   244,   245,  3083,
    3084,   248,     0,   249,   250,     0,     0,     0,     0,   253,
     254,     0,   255,   256,   257,   258,   259,   260,   261,  3085,
     263,   264,   265,   266,     0,   267,   268,   269,   270,   271,
     272,   273,     0,   274,  3086,     0,   277,   278,   279,   280,
     281,  1592,  1593,     0,  1594,     0,   285,  3087,  3088,   288,
    3089,   290,   291,   292,   293,   294,   295,   296,     0,     0,
     297,  3090,   299,  3091,     0,   301,   302,   303,   304,   305,
     306,   307,   308,  3382,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
     326,   327,   328,   329,  1601,  3093,  1603,   333,   334,   335,
     336,     0,     0,   338,   339,  3095,   341,     0,     0,   343,
    1605,   345,   346,   347,     0,   348,   349,     0,     0,   350,
     351,   352,     0,     0,   353,   354,     0,  3097,   357,  3098,
       0,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,     0,     0,     0,     0,   373,   374,
       0,  3099,   377,   378,     0,   380,   381,   382,     0,   383,
     384,   385,   386,   387,   388,   389,   390,     0,   391,   392,
     393,  1609,   395,   396,   397,   398,     0,   399,   400,   401,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,     0,   413,   414,  3100,   416,   417,   418,     0,   420,
     421,   422,   423,   424,   425,   426,   427,   428,   429,   430,
     431,   432,     0,  3101,   433,   434,   435,   436,   437,   438,
       0,   440,   441,   442,     0,  3103,   444,   445,  1615,   447,
       0,   448,   449,   450,   451,   452,   453,   454,   455,   456,
     457,   458,   459,   460,  3383,   462,     0,     0,     0,   464,
     465,     0,   466,  3105,   468,   469,   470,   471,   472,     0,
     473,  1618,  1619,     0,   476,     0,   477,   478,     0,   480,
       0,     0,   482,   483,  3106,   485,   486,   487,   488,   489,
       0,     0,   490,   491,   492,     0,   493,   494,   495,   496,
       0,   497,   498,   499,   500,   501,     0,  1622,     0,   504,
    3108,   506,   507,   508,   509,   510,   511,   512,   513,   514,
       0,     0,   515,     0,     0,   516,   517,   518,   519,   520,
     521,   545,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   533,   534,   535,   536,     0,     0,     0,     0,
     120,   121,   122,   123,   124,   125,   126,   127,   128,     0,
     129,   130,   131,     0,     0,     0,     0,     0,   132,     0,
       0,     0,     0,   134,   135,     0,   136,   137,   138,     0,
     140,   141,   142,   143,   144,     0,   146,   147,     0,   148,
     149,   150,   151,   152,   153,     0,     0,   154,   155,   156,
     157,   158,   159,   160,     0,   161,   162,   163,   164,   165,
       0,     0,     0,   167,   168,   169,   170,   171,   172,     0,
     174,   175,   176,     0,   177,   178,   179,   180,   181,   182,
       0,     0,   184,   185,   186,   187,   188,   189,   190,   191,
     192,   193,   194,   195,   196,   197,   198,     0,   199,     0,
     200,   201,   202,   203,   204,   205,     0,     0,   206,   207,
     208,   209,   210,     0,     0,   211,   212,   213,   214,   215,
     216,   217,     0,   218,   219,   220,     0,   221,   222,   223,
       0,   224,   225,   226,   227,   228,   229,   230,   231,   232,
     233,   234,     0,   235,     0,   236,   237,   238,   239,     0,
     240,     0,   241,     0,     0,     0,   244,   245,   546,     0,
     248,     0,   249,   250,     0,     0,   251,   252,     0,   254,
       0,   255,   256,   257,   258,   259,   260,   261,     0,   263,
     264,   265,   266,     0,   267,   268,   269,   270,   271,   272,
     273,     0,   274,     0,   276,   277,   278,   279,   280,   281,
     282,   283,     0,   284,     0,   285,     0,     0,   288,     0,
     290,   291,   292,   293,   294,   295,   296,     0,     0,   297,
       0,   299,     0,     0,   301,   302,   303,   304,   305,   306,
     307,   308,   547,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,   323,   324,   325,   326,
     327,   328,   329,   330,     0,   332,   333,   334,   335,   336,
     337,     0,   338,   339,     0,   341,     0,   342,   343,   344,
     345,   346,   347,     0,   348,   349,     0,     0,   350,   351,
     352,     0,     0,   353,   354,   355,     0,   357,     0,   359,
     360,   361,   362,   363,   364,   365,     0,   367,   368,   369,
     370,   371,   372,     0,     0,     0,     0,   373,   374,   375,
       0,   377,   378,   379,   380,   381,   382,     0,   383,   384,
     385,   386,   387,   388,   389,   390,     0,   391,     0,   393,
     394,   395,   396,   397,   398,     0,   399,   400,   401,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
       0,   413,   414,     0,   416,   417,   418,   419,     0,   421,
     422,   423,   424,   425,   426,   427,   428,   429,   430,   431,
     432,     0,     0,   433,   434,   435,   436,   437,   438,   439,
     440,   441,   442,     0,     0,   444,   445,   446,   447,     0,
     448,   449,   450,   451,   452,   453,   454,   455,   456,   457,
     458,   459,   460,   548,   462,   463,     0,     0,   464,   465,
       0,   466,     0,   468,   469,   470,   471,   472,     0,   473,
     474,   475,     0,   476,     0,   477,   478,   479,   480,   481,
       0,   482,   483,   484,   485,   486,   487,   488,   489,     0,
       0,   490,   491,   492,     0,   493,   494,   495,   496,     0,
     497,   498,   499,   500,   501,   502,   503,     0,   504,     0,
     506,   507,   508,   509,   510,   511,   512,   513,   514,     0,
       0,   515,     0,     0,   516,   517,   518,   519,   520,   521,
     522,   523,   524,   525,   526,   527,   528,   529,   530,   531,
     532,   533,   534,   535,   536,  1865,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   120,   121,   122,   123,   124,   125,
     126,   127,   128,     0,   129,   130,   131,     0,     0,     0,
    1571,     0,   132,     0,     0,     0,  1572,   134,   135,     0,
     136,   137,   138,  1573,   140,   141,   142,     0,  1574,  1575,
    1576,  1577,     0,   148,   149,   150,   151,   152,   153,     0,
       0,   154,   155,   156,   157,  1578,  1579,   160,     0,   161,
     162,   163,   164,     0,     0,  1580,     0,  1581,   168,   169,
     170,   171,   172,  1582,   174,   175,   176,     0,   177,   178,
     179,   180,   181,   182,     0,  1583,   184,   185,   186,   187,
     188,   189,   190,   191,   192,   193,  1584,   195,   196,  1585,
     198,     0,   199,     0,   200,   201,   202,   203,   204,   205,
       0,     0,   206,   207,   208,   209,   210,     0,     0,   211,
     212,  1150,   214,   215,   216,   217,     0,   218,   219,   220,
       0,   221,   222,   223,     0,   224,   225,   226,   227,     0,
     229,   230,   231,   232,   233,     0,     0,   235,     0,   236,
     237,  1586,   239,     0,   240,     0,   241,  1587,     0,  1588,
     244,   245,     0,  1589,   248,     0,   249,   250,     0,     0,
       0,     0,   253,   254,     0,   255,   256,   257,   258,   259,
     260,   261,  1590,   263,   264,   265,   266,     0,   267,   268,
     269,   270,   271,   272,   273,     0,   274,  1591,     0,   277,
     278,   279,   280,   281,  1592,  1593,     0,  1594,     0,   285,
    1595,  1596,   288,  1597,   290,   291,   292,   293,   294,   295,
     296,     0,     0,   297,  1598,   299,  1599,     0,   301,   302,
     303,   304,   305,   306,   307,   308,     0,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
     323,   324,   325,   326,   327,   328,   329,  1601,  1602,  1603,
     333,   334,   335,   336,     0,     0,   338,   339,  1604,   341,
       0,     0,   343,  1605,   345,   346,   347,     0,   348,   349,
       0,     0,   350,   351,   352,     0,     0,   353,   354,     0,
    1606,   357,  1607,     0,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,     0,     0,     0,
       0,   373,   374,     0,  1608,   377,   378,     0,   380,   381,
     382,     0,   383,   384,   385,   386,   387,   388,   389,   390,
       0,   391,   392,   393,  1609,   395,   396,   397,   398,     0,
     399,   400,   401,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,     0,   413,   414,  1610,   416,   417,
     418,     0,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   429,   430,   431,   432,     0,  1612,   433,   434,   435,
     436,   437,   438,     0,   440,   441,   442,     0,  1614,   444,
     445,  1615,   447,     0,   448,   449,   450,   451,   452,   453,
     454,   455,   456,   457,   458,   459,   460,     0,   462,     0,
       0,     0,   464,   465,     0,   466,  1617,   468,   469,   470,
     471,   472,     0,   473,  1618,  1619,     0,   476,     0,   477,
     478,     0,   480,     0,     0,   482,   483,  1620,   485,   486,
     487,   488,   489,     0,     0,   490,   491,   492,     0,   493,
     494,   495,   496,     0,   497,   498,   499,   500,   501,     0,
    1622,     0,   504,  1623,   506,   507,   508,   509,   510,   511,
     512,   513,   514,     0,     0,   515,     0,     0,   516,   517,
     518,   519,   520,   521,   893,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   533,   534,   535,   536,     0,
       0,     0,     0,   120,   121,   122,   123,     0,   125,   126,
     127,   128,     0,   129,   130,   131,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   134,   135,     0,   136,
     137,   138,     0,   140,   141,   142,   894,   895,     0,   896,
     897,     0,   148,   149,   150,   151,   152,   153,     0,     0,
     154,   155,   156,   157,   898,   899,   160,     0,   161,   162,
     163,   164,   900,     0,     0,     0,     0,   168,   169,   170,
     171,   172,     0,   174,   175,   176,     0,   177,   178,   179,
     180,   181,     0,     0,     0,   184,   185,   186,   187,   188,
     189,   190,   191,   192,   193,   901,   195,   196,   902,   198,
       0,   199,     0,   200,   201,   202,   203,   204,   205,     0,
       0,     0,   207,   208,   209,   210,     0,     0,   211,   212,
     213,   214,   215,     0,     0,     0,   218,   219,   220,     0,
     221,   222,   223,     0,   224,   225,   226,   227,   903,   229,
     230,   231,   232,   233,   904,     0,   235,     0,   236,   237,
     905,   239,     0,   240,     0,   241,     0,     0,     0,   244,
     245,   906,     0,   248,     0,   249,     0,     0,     0,   907,
     908,     0,   254,     0,   255,   256,   257,   258,   259,   260,
     261,     0,   263,   264,   265,   266,     0,   267,   268,   269,
     270,   271,   272,   273,     0,   274,     0,   909,   277,   278,
     279,   280,   281,   910,   911,     0,   912,     0,   285,     0,
       0,   288,     0,   290,     0,   292,   293,   294,   295,   296,
       0,     0,   297,     0,   299,     0,     0,   301,   302,   303,
     304,   305,   306,   307,   308,   913,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,   329,   914,     0,   915,   333,
     334,   335,     0,   916,     0,   338,   339,     0,   341,     0,
     917,   343,   918,   345,   346,   347,     0,   348,   349,     0,
       0,   350,   351,   352,     0,     0,   353,   354,   919,     0,
     357,     0,   920,   360,   361,   362,   363,   364,   365,   366,
     367,   368,     0,     0,   371,   372,     0,     0,     0,     0,
     373,   374,   921,     0,   377,   378,   922,   380,   381,   382,
       0,   383,   384,   385,   386,   387,     0,     0,   390,     0,
     391,   392,   393,   923,   395,   396,   397,   398,     0,   399,
     400,   401,     0,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,     0,   413,   414,     0,   416,   417,   418,
     924,   420,   421,   422,   423,   424,   425,   426,   427,   428,
     429,   430,   431,   432,     0,     0,   433,   434,   435,   436,
     437,   438,   925,   440,   441,     0,     0,     0,     0,   445,
     926,   447,     0,     0,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   927,   462,   928,     0,
       0,   464,   465,     0,   466,     0,   468,   469,   470,   471,
     472,     0,   473,   929,   930,     0,     0,     0,   477,   478,
     931,   480,   932,     0,   482,   483,   933,   485,   486,   487,
     488,   489,     0,     0,   490,   491,   492,     0,   493,   494,
     495,   496,     0,   497,   498,   499,   500,   501,  1499,   935,
       0,   504,     0,   506,     0,   508,   509,   510,   511,     0,
     513,   514,     0,     0,   515,     0,     0,   516,   517,   518,
     519,   520,   521,   936,   937,   938,   939,   940,   941,   942,
     943,   944,   945,   946,   533,   534,   535,   536,     1,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     2,
       0,     3,     4,     0,     0,     1,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     2,     0,     0,     0,
       6,     0,     0,     0,     0,     0,     0,     0,     0,     7,
       0,     0,     0,     0,     0,     0,     0,     6,     0,     0,
       0,     0,     0,     8,     0,     0,     7,     0,     0,     0,
       0,     0,     0,     0,    10,     0,     0,     0,     0,     0,
       8,     0,     0,     0,     0,     0,    11,     0,   773,     0,
       0,    10,     0,     0,     0,     0,     0,     0,     0,    13,
       0,     0,     0,    11,     0,   773,     0,     0,     0,     0,
       0,     0,     0,     0,    14,    15,    13,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   774,     0,     0,     0,
       0,    14,    15,     0,    18,     0,     0,     0,     0,     0,
       0,     0,    19,   774,     0,     0,     0,     0,     0,     0,
       0,    18,     0,     0,     0,     0,     0,     0,    22,    19,
       0,     0,    23,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    22,     0,     0,     0,    23,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    25,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    25,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    26,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      26,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    27,    28,    29,     0,     0,     0,     0,     0,    30,
       0,     0,    31,     0,     0,     0,     0,     0,    27,    28,
      29,     0,     0,     0,     0,     0,    30,     0,     0,    31,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    32,     0,     0,     0,     0,     0,
       0,     0,     0,    33,     0,     0,     0,     0,     0,     0,
       0,    32,     0,     0,     0,     0,     0,     0,     0,    34,
      33,     0,     0,     0,     0,     0,    35,     0,     0,     0,
       0,    36,     0,     0,     0,     0,    34,     0,     0,     0,
       0,     0,    37,    35,     0,     0,     0,     0,    36,     0,
       0,     0,     0,     0,    38,     0,     0,     0,    39,    37,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    38,     0,     0,     0,    39,     0,     0,     0,    40,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    41,     0,     0,     0,    40,     0,    43,     0,
       0,     0,     0,    44,     0,     0,     0,   775,     0,    41,
       0,     0,     0,     0,     0,    43,     0,     0,     0,     0,
      44,    45,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    45,     0,
       0,     0,     0,     0,     0,    46,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   776,
       0,     0,    46,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   874
};

static const yytype_int16 yycheck[] =
{
       7,     8,   769,   537,     0,    47,    13,   863,   981,     0,
     768,     0,    19,     0,     0,   990,    23,   837,    25,    26,
      90,  1006,     0,    30,    31,    32,     0,     0,    35,  1081,
    1314,    38,    39,   776,  1327,    42,     0,     0,    45,    46,
       0,  1247,  1514,  1313,  1750,  1792,  1123,    47,  1301,   969,
      20,    94,    38,  1669,  1288,  1170,    20,  1011,  1070,  1061,
      20,  1070,  2215,  1070,    23,  1070,  1560,  2243,  2337,  2245,
    1367,  1290,  2272,  2212,    94,  1293,  2751,  2282,  2790,    17,
    2449,   887,  2751,  1043,    39,    92,    93,  2788,     0,     0,
    1254,     0,     0,  1061,     0,  2089,     0,     0,   105,  1318,
       7,     0,  1418,   110,   111,   112,   113,   114,     0,     7,
    1047,     0,    35,  1896,     0,  1090,    23,  1703,  1704,   105,
       0,  2090,    46,  2805,  2209,    23,  1178,     0,     0,  1392,
     775,  2594,     0,    92,    93,     0,   776,    16,     0,    23,
       0,     0,     0,  2333,  2812,  2271,   981,  1214,   983,    26,
     985,  2404,  1219,  2385,  2386,  2387,  2661,  3148,   113,   833,
       0,     5,    92,    93,   838,  2707,  3165,  3275,     0,  2711,
       5,     0,     5,  1921,    17,     5,  1754,  3168,     5,    40,
       5,     5,  1915,    13,    14,    92,    93,     5,    13,    14,
       5,     9,     5,     9,    92,    93,     5,     5,    13,    14,
      13,    14,     5,  1810,    13,    14,   794,     5,    92,    93,
      13,    14,     5,     5,     5,  2032,     9,     5,     5,     5,
       5,    17,     5,  1225,     5,  2417,  3386,     5,    17,    65,
    1918,    13,    14,    27,  2424,     4,     3,     4,     5,    33,
       9,  2416,     9,     9,     9,    13,    14,  2412,   176,    11,
    1124,    57,    31,  1073,    16,  1230,  3001,  1334,   177,  2546,
     124,    31,  1068,     4,    38,   121,  1343,  2065,     9,    39,
     102,   126,    47,   102,    47,  1148,    11,   144,    11,  3047,
    2078,    16,    92,    16,  2546,  2475,  2476,  1812,  2478,    47,
     124,  1164,   197,   228,    65,    55,   830,   964,   109,    31,
    1302,     3,    65,  1305,  1306,   187,   964,    39,    87,   252,
     298,    47,    65,    48,  3271,    48,     5,    96,  1061,  2650,
    2665,  2666,   132,  1529,   296,   177,  2657,  2658,  2659,   176,
     299,  3274,    82,    35,    36,   959,   233,   142,  3120,  3580,
     190,   120,  1144,  1145,  3623,   879,   140,    82,   304,    82,
     304,  1225,   119,  2529,  1560,   219,  2638,   135,  2640,  1161,
    1613,   323,   323,   281,   234,  3261,    84,  3263,   284,   379,
     176,  1177,   121,   124,   119,   109,    13,    95,   402,    11,
    3488,  3489,    19,    15,    16,    77,   164,    11,    31,   140,
     119,    15,    16,    84,    31,   199,    39,    31,   109,  3482,
    1074,  3484,   199,   177,    95,    39,   121,  2639,    45,    46,
     280,     3,  1086,     5,  2946,  1400,  2948,  1062,   197,   380,
      31,   181,  1278,  1279,   166,    42,   135,  1301,    66,  3420,
    3871,   210,   110,  3102,   122,   393,    11,   471,    76,    42,
     200,   215,   154,   168,  1707,   205,    55,    43,  3160,  2232,
    1410,  2720,   197,   370,  1374,   422,   273,   231,   225,  3171,
    2002,  3162,    34,   431,   213,   317,   298,   257,   242,   298,
     497,   522,  3052,   175,   111,   177,  1282,   521,   298,  1433,
    3060,   248,   533,   400,   244,  3726,   532,   531,  3729,    61,
    2695,  2033,   519,   283,   170,   207,  3937,   110,   544,   533,
     350,  2586,   470,   245,  1619,   283,   316,    82,   302,   533,
     288,    13,    14,   201,   331,   293,   444,   280,  1392,   486,
     198,    11,   465,   533,   135,    15,    16,  2717,   220,  2719,
     380,   280,   128,   403,   283,   371,    76,  3494,   283,  3818,
     372,    11,  3485,   372,  3627,   533,    16,  2058,  2059,  2060,
    3446,   558,   468,   182,   279,   407,   361,   564,    48,   288,
     567,   533,   366,   180,   533,   483,   528,   528,   575,   280,
     364,   557,   369,   288,   368,  2857,  3344,   180,    48,   537,
    3579,   537,  1845,   537,   293,  3330,  2873,   338,  2082,   471,
     533,   200,    82,  2209,   522,  3363,   205,   444,   468,   288,
     371,   375,  3384,  1900,   468,  1839,   400,   535,   371,   544,
     248,  2873,    82,  1280,   533,  1124,   471,   473,   371,   248,
     394,   432,  1280,  2617,   491,  3785,  2971,   437,   533,  3870,
    2822,  1255,  2963,   173,   468,   244,  2801,   400,   404,   418,
     537,   411,   421,  2818,  2834,  1961,   406,   480,   110,  1183,
     384,    26,  1936,  1241,   429,  3763,   429,  1424,   334,  1417,
    3192,  2247,   497,   495,  1422,  2281,   495,  3684,  2485,   171,
    1428,   429,   533,   497,   452,  1752,   252,   520,  1534,   411,
     474,  2288,   525,  1976,   519,   463,  2419,   531,   531,   533,
     533,   535,  1435,   429,  1550,   519,   536,  2275,   533,  2447,
     533,   537,   534,   533,   536,   534,   533,   536,   533,   533,
     540,  3386,  1585,   540,  1520,   533,   532,  3386,   533,  3401,
     533,  1696,  1697,  1698,   533,   533,   444,   533,  3727,   525,
     533,  1994,  1605,   612,   776,   533,   525,  3728,  2426,  1613,
     533,   533,   533,  2006,  2542,   533,   533,   533,   533,  3018,
     533,   533,   533,   444,   495,   524,   525,   524,   525,   524,
     525,   768,   769,   770,  2289,   533,   537,   529,   411,  1642,
     404,  3234,  3025,  2036,  3279,   108,  1578,  1579,   519,   481,
    2043,   531,  3151,   524,   525,   535,   828,  3895,   287,  1434,
    2087,  3741,  1301,  3335,   529,  1435,   529,   406,  3340,   339,
    3817,  1603,   809,   810,   811,    26,   776,   436,   384,   438,
     817,   775,   819,   122,    11,   775,  2079,   168,    15,    16,
    2083,   828,    31,   495,   283,   832,   833,   419,   420,   288,
     837,   838,   874,  1707,   877,    11,   465,    11,  2721,  2045,
    1646,  1647,    16,   432,   851,   852,   853,   519,  2111,   471,
    1656,    48,   135,  1527,  2848,  3648,  3649,   877,   865,   866,
     166,   868,  1664,  1665,  1670,   171,  3578,  1869,  1945,   828,
     533,   522,    48,  2999,    48,   882,  2082,  1879,     0,   106,
    1882,   888,    11,  1392,   535,    82,   280,   238,    27,   465,
     349,  1864,   201,  1699,   526,   527,   528,   529,   828,   969,
     524,   525,   526,   527,   528,   529,    82,  3139,    82,   408,
     817,   533,   252,  2882,  3596,   885,  2885,  2233,  2887,   817,
    3005,   828,   462,   152,  3882,   258,   135,   882,  3878,  3597,
     828,  2925,   166,   817,   811,   268,    11,   171,   575,   245,
     153,  2824,   865,   866,   828,   868,   321,   322,    84,   956,
    3743,   345,   959,    82,  2160,   252,  3146,   533,   954,    95,
     187,  1719,   528,   954,   888,   954,   447,   954,   954,   535,
    2586,  1845,  1926,    48,  1508,  1977,   954,  1897,  1898,  1899,
     954,   954,    76,  2766,    38,  2768,  2053,  3945,   531,   295,
     954,   954,   535,   206,   954,   224,  1003,  1004,   252,  1959,
     283,   140,  1837,  1963,   959,  1012,  1966,    82,   536,  1977,
     293,   245,  1019,  1020,  1021,  1022,  1023,   498,  2604,  2530,
    2531,  2532,  2533,  3724,  3399,   119,   481,  3739,  1035,  1864,
    1037,  1968,   407,  3408,    27,  2507,   526,   527,   528,   529,
      33,    84,   954,   954,   384,   954,   954,   283,   954,  1884,
     954,   954,    95,   280,  1889,   954,   526,   527,   528,   529,
     537,   295,   954,   252,  3433,   954,  1073,  1074,   954,  1076,
     445,  1071,  1079,  1011,   954,   304,  2360,  3346,  1085,  1086,
       5,   954,   954,    42,  1091,  2249,   954,   384,  2252,   954,
    1097,  2388,   954,   521,   954,   954,   954,  1104,  1062,   135,
     321,   322,  1062,   531,  1613,  2311,   178,  1114,    84,  3810,
    3785,   135,  1647,   488,  1121,   135,  3785,  1875,   182,   533,
    1994,  1656,  1880,   177,  1131,   465,  3326,   532,   164,   135,
     384,   355,  2006,   770,   110,  2751,  1178,   166,  1097,   544,
     164,   436,   528,   438,   164,  1104,  3299,   140,  1095,   535,
    2369,   110,  3577,   112,  2937,   114,  3295,   252,   164,  3584,
      61,   215,  2036,   302,   533,  2428,  1113,  1097,   465,  2043,
    1117,   395,    27,  1180,  1104,  1984,   531,   231,    33,  1988,
     535,   253,  1991,   404,   248,  1100,   407,  2239,   242,   283,
    1097,  1106,  3186,   533,   288,   384,   110,  1104,  1707,  1097,
     234,  3967,   178,   366,  3916,  2079,  1104,  3973,   432,  2083,
     436,   465,   438,  1097,   441,  2089,   245,  2435,  1261,  1262,
    1104,  1264,  1229,  2441,   445,  1232,   531,   185,   209,   368,
     535,   370,   461,   209,  1977,  2041,   533,  2111,   355,  1246,
    1247,  1261,  1262,   391,  1264,   339,   280,   283,  1255,  1249,
    2647,   888,   288,     4,  2651,  2652,  2653,   293,     9,   283,
     484,   400,   534,   357,   288,   537,   295,   488,   288,   293,
    1277,   534,   178,   293,   537,   176,   465,   253,   395,   533,
    1287,  1288,   288,   355,  3553,   140,   497,   293,   531,   384,
     533,     4,   535,  1300,     8,   391,     9,    11,  2561,     4,
    1255,    15,    16,  1182,     9,    19,    20,    21,   519,   302,
    1317,   209,   266,   267,  1321,   432,  2122,   351,   259,  1326,
     384,   375,   533,   395,  2244,    73,    74,   524,   525,   526,
     527,   528,   529,   524,     4,   526,  1845,     4,  2544,     9,
     394,  2547,     9,  1519,   533,  1521,  1522,   253,   539,   540,
     524,   525,   526,   527,   528,   529,   531,  2851,   533,   152,
     432,   538,  1317,   534,   450,   542,   537,   484,   462,   403,
     465,  3524,   436,   166,   438,   368,  1383,   471,   171,  1386,
    2340,   432,  2342,  3522,  1105,     8,  1393,   497,  1109,  3005,
     185,  2197,    15,    16,   484,  1391,    19,    20,    21,   388,
    1407,   465,  1391,   384,  1391,    13,    14,   400,   384,   519,
    1417,   391,   484,  1391,   395,  1422,   452,  1424,  1425,   395,
    1427,  1428,   533,   533,   325,   326,   327,   463,   452,   533,
    2415,   224,   452,   533,   468,   389,   390,   534,   533,   463,
     537,   865,   866,   463,   868,   171,   452,   302,  1455,   355,
    2734,   432,   245,    13,    14,     6,   432,   463,   534,    10,
    2316,   537,   495,  2733,   497,  1435,   534,    18,   534,   537,
    1434,   537,  2765,   533,  1434,   534,  2591,  2592,   537,   176,
     456,   474,    33,   533,  2718,  1994,    37,   534,  2751,   395,
     537,   187,   393,   534,   190,   534,   537,  2006,   537,  1506,
    1507,     0,   295,   484,   436,  1512,   438,  1514,   484,   364,
     533,   304,  2782,   368,  2732,   534,  2734,   436,   537,   438,
    1527,    20,  1529,  1530,    23,   534,   432,  2036,   537,  1408,
    1537,   432,   534,  1540,  2043,   537,  1543,   534,   533,    38,
     537,  1548,  2594,   534,  1551,   400,   537,   534,    47,  1556,
     537,  1558,  1079,  1560,  2428,    13,    14,  2569,  2570,  2571,
    2569,  2570,  2569,  2568,   534,   466,   534,   537,   534,   537,
    2079,   537,   534,  1452,  2083,   537,   477,   533,   484,   534,
    2089,  1540,   537,   533,  1543,   534,   300,   533,   537,  1548,
      27,   533,  1551,    92,    93,    94,    33,  1556,   534,   558,
     534,   537,  2111,   537,   533,   564,   105,  1514,   567,  1246,
    1540,   534,   534,  1543,   537,   537,  1514,   534,  1548,   474,
     537,  1551,   534,   526,   534,   537,  1556,   537,   519,   152,
    1514,   176,   533,  1540,  3903,   534,  1543,   534,   537,   533,
     537,  1548,  1540,   166,  1551,  1543,  3822,   516,   171,  1556,
    1548,   534,  1643,  1551,   537,    27,  1540,  1643,  1556,  1543,
     534,    33,  1669,   537,  1548,    13,    14,  1551,   461,  1643,
    1643,   230,  1556,  1680,  3879,  3669,  3881,   300,  3854,  1643,
    1643,   182,   534,  1643,   535,   537,   534,  2561,   182,   537,
       8,   298,  3475,    11,  3477,   379,   380,    15,    16,  2457,
    2343,   224,  2345,   140,   534,     5,   534,   537,   209,   537,
     534,  2686,  1719,   537,   534,   209,   534,   537,   534,   537,
    2463,   537,   245,   851,   852,   853,   195,   196,   516,  2717,
      48,  2719,   535,   961,   175,   963,   537,    55,   531,  3944,
     256,   534,   535,  2617,    13,    14,   533,   248,   534,    27,
      13,    14,  1795,   534,   248,    33,  3932,    13,    14,  1766,
     534,  1768,   176,  1770,    82,    13,    14,  3943,   140,   303,
    3386,    61,   295,    13,    14,  1795,   533,  3771,  1785,  1786,
     433,   304,  3066,    13,    14,  3019,    13,    14,  1425,   516,
    1427,  1798,    13,    14,    13,    14,   230,   266,   267,  1769,
      13,    14,   303,    13,    14,  3068,   520,   521,   522,   303,
     524,   525,   526,   527,   528,   529,  1823,   157,  1825,    13,
      14,    13,    14,    13,    14,    13,    14,   364,   128,   129,
    2815,   157,  1839,  1840,   157,  3541,   157,  1716,    13,    14,
     157,  2795,    42,  1850,  1851,  1852,  1853,   432,  1855,  3102,
    3143,   534,  2772,  2709,  1861,   533,  1863,    13,    14,   283,
     819,  2938,   140,   181,    42,   302,   484,  2827,  1875,  1876,
      13,    14,   157,  1880,  1881,    91,   176,  2751,  1885,  1886,
    1887,  1888,   200,  1890,  1891,   499,    27,   205,    13,    14,
     384,   157,    33,    13,    14,    13,    14,   520,   521,   522,
    1907,   524,   525,   526,   527,   528,   529,  1914,   379,   380,
    1917,  1918,  1919,  1920,  1921,   379,   380,   298,  1925,  2428,
     389,   390,   379,   380,   270,   271,   244,   364,   389,   390,
     302,   368,  1939,   321,   322,   436,   535,   438,   461,   157,
       8,   366,   436,    11,   438,   476,   477,    15,    16,  1956,
     157,    19,    20,    21,   444,  1941,  3832,  3833,  3888,  3889,
     533,   462,   456,   400,   465,  3437,  3229,   176,   462,  1227,
    1228,   465,   533,   226,  2848,  1854,   533,  1856,   534,  1506,
    1507,   533,   300,   434,   231,  1512,   308,   533,   231,   231,
     533,   305,   364,    42,   243,   533,   368,   956,   533,   140,
    2007,  2008,  2009,  2010,  2011,  2012,     5,     5,  2015,  2016,
    2017,  2018,  2019,  2020,  2021,  2022,  2023,  2024,   533,   335,
     533,   533,     5,  3286,   302,   325,   326,   327,   400,   176,
       5,   533,     5,   533,   182,     5,   153,   474,  2045,   310,
       9,   533,   533,   496,  1003,   106,    42,   534,   537,   537,
    2057,  2925,  2561,  1012,   226,  3057,   400,   171,   557,  2066,
    1019,  1020,  1021,  1022,   295,  2072,   171,   293,    61,   243,
    2077,   533,    95,  3820,   444,  2082,  1035,  3824,   533,   444,
      61,   537,    61,   444,  2091,  2092,   364,   273,   406,   444,
     368,   110,   544,   393,   228,   444,   495,   444,   185,   391,
     248,   157,   474,   283,   283,   405,   533,  2066,  2617,  3069,
    3070,   102,    42,  2072,   283,   283,   533,  1076,     8,   283,
    2878,    11,   400,  3386,   205,    15,    16,  3397,   428,    19,
      20,    21,   432,   157,   176,   535,  2066,   205,    13,   534,
     534,   176,  2072,   534,   534,   534,   231,   492,   534,  3201,
     537,   534,   231,  2160,   533,  2197,   533,  2164,   290,  2066,
     228,   302,  2169,   290,   533,  2072,   466,   535,  2066,  3785,
    3917,   537,   480,   533,  2072,   533,   324,   477,   325,   326,
     327,   533,  2066,   533,   535,  2192,  2193,    41,  2072,   491,
     533,   533,     9,    11,  3068,   495,   474,   442,   346,   517,
     366,   442,  2209,  1840,   532,   537,   524,   525,   526,   527,
     528,   529,  3684,  1850,   544,  1852,   541,   537,  1855,   519,
     442,   533,   533,   364,  1861,   288,  1863,   368,  3102,   444,
     187,   167,   300,   533,   176,  2242,   384,   534,   537,  1876,
     522,   537,  2751,   391,  1881,   273,   393,  2254,  1885,  1886,
    1887,  1888,   224,  1890,  1891,  3461,   234,   471,   403,   400,
    2267,   299,   537,   323,  2271,  2265,   323,   537,  3740,   187,
     226,   234,   534,   533,   283,   234,   775,   776,   304,   344,
    3038,   296,  3575,  2242,   433,   432,   484,   533,   436,   533,
     438,   157,   157,   157,   495,   157,    42,   157,     3,   533,
       3,   283,    42,   298,  2311,    61,   298,  2314,  2267,   176,
    2317,    11,  3186,    42,   171,   205,   533,   465,   817,   466,
     171,     3,   534,   534,   187,   533,  2333,   533,  1287,   828,
     477,    38,   534,   474,     3,  2242,   156,    44,   228,  2848,
      41,  1300,   531,   534,  2242,  3817,   531,   444,   495,   444,
     444,   444,   534,   534,   537,  3229,   176,   534,  2242,   532,
    2267,   516,  1321,   516,   535,   541,   516,   534,   176,  2267,
     444,   534,   519,   534,   534,   874,   534,   534,   877,  3364,
    2422,   533,   533,  2267,   160,   257,   533,   533,     9,   533,
     492,   533,   492,    42,    61,   299,   103,  2404,   537,   522,
     299,   468,   518,   251,  2411,    61,   537,    61,   444,   283,
     300,   533,  3286,   157,  2410,   273,  2925,  2424,  2425,  2426,
    2427,  2410,   209,  2410,   157,   157,   444,  1386,   444,   290,
     444,  2438,  2410,  2440,  1393,   290,  2443,   533,   444,  3182,
    2447,    42,   534,   533,  2451,   533,   366,   296,   534,   495,
    2457,   298,   520,   521,   522,   954,   524,   525,   526,   527,
     528,   529,   537,  3319,  2343,  2344,  2345,    42,  2475,  2476,
     177,  2478,   157,   288,   176,   534,   534,    61,   176,   533,
    2007,  2008,  2009,  2010,  2011,  2012,   533,   171,  2015,  2016,
    2017,  2018,  2019,  2020,  2021,  2022,  2023,  2024,   192,    82,
    2507,   534,   534,   534,  3788,   325,   326,   327,   215,   531,
     148,   176,  3386,   534,   534,   205,   309,   534,    85,   544,
    2527,   533,  3785,   534,   231,   533,   372,   537,  2535,  2536,
    2537,   534,   533,   538,   299,   242,   187,  2544,  3296,  2546,
    2547,   157,   456,   537,   534,   534,  2553,   533,   180,   534,
     534,   433,  2594,    42,   534,    42,    88,   533,   535,  3068,
     534,   471,  2632,  1062,   176,   533,   537,   533,  3543,   276,
    2449,   533,   537,   393,   534,   494,   534,   205,  1537,  2586,
     534,   532,   532,   532,   537,  2627,   534,   534,   534,   534,
    2469,   298,   524,  3102,   534,   532,     9,   310,  1097,   533,
    2507,   534,   298,  3459,   477,  1104,   522,    61,   534,  2507,
     534,   534,   432,   534,  2621,  2622,   495,  2254,   325,   211,
     119,    42,   533,  2507,   234,   332,    90,   325,   326,   327,
     520,   521,   522,   198,   524,   525,   526,   527,   528,   529,
    1139,  3447,  3462,  3449,  3464,     8,   466,   288,    11,   288,
     535,   535,  1151,    16,   535,  2646,   534,   477,   535,   535,
    2646,   444,   444,  2663,  2664,  2192,  2193,  2709,   375,  2676,
    2670,    42,  2646,  2646,  2681,   495,   535,  3186,   534,  1178,
    2687,   533,  2646,  2646,   522,    48,  2646,   394,    42,   532,
     535,   535,    55,   535,   535,   393,  2703,  2683,   535,   519,
    2707,  3686,   535,  3755,  2711,  2712,  2713,   535,   535,   535,
    2717,  2718,  2719,   533,  2721,   537,   535,   283,   534,    82,
    3229,   535,  3695,   535,   535,   535,    42,  3647,   535,     8,
     535,   535,    11,  2740,   432,  2742,    15,    16,   535,   535,
      19,    20,    21,   535,   535,   535,    62,   535,  2755,  2756,
    2757,  2758,  2759,  2760,  2761,  2762,  2763,  2764,    37,   466,
     535,   535,  1261,  1262,   471,  1264,   535,   533,   466,   532,
     109,   495,    42,   533,   298,   533,     9,  3286,   365,   477,
     533,  2788,   533,   537,   348,  3641,  2793,   150,   537,  2796,
      61,   534,   108,   534,   205,  3669,   532,   198,  2794,  2806,
     119,  2438,   537,  2789,    76,  2794,    11,  2794,   538,  1768,
      82,  1770,   442,   288,   537,   444,  2794,  2824,   181,   476,
      93,   357,   534,    95,   533,    42,  1785,  2834,  2870,   157,
     534,  2817,   126,   345,  2820,   533,   535,   200,  2845,   534,
     235,    42,   205,   157,  2851,   534,   380,   119,    42,   121,
     380,  2858,  2859,  2860,  2861,   534,   533,   176,   533,    42,
     471,   537,   533,  2870,  1823,   318,  2873,   101,   521,  2748,
    2877,  2878,   516,  2752,   152,  2754,   176,  3386,     8,  2886,
     288,   244,   444,    13,   534,   533,    16,   533,   166,    19,
     256,   197,   208,   171,   471,    25,    26,  3771,   456,    31,
      30,    31,    32,   205,    76,    35,  2913,   533,    38,    39,
     301,  3785,    42,    76,    82,    45,    46,    47,     9,   534,
     534,   382,    61,   541,   533,   532,   534,   532,   534,   176,
     533,    95,   136,   522,   280,  1434,  2943,   300,  2945,   298,
     456,   213,   258,   534,    42,   433,   224,    42,    85,   228,
     301,   533,   268,  2995,   301,  1914,   534,   533,  1917,  1918,
    1919,  1920,   534,   534,   280,   476,  1925,   245,   211,   298,
     533,  2978,  2979,  2980,  2981,   105,   298,   152,   533,  3737,
     110,   111,   112,   113,   114,   534,  2945,   538,  2995,   542,
     400,   124,  2999,   312,   468,   533,   379,   313,  3005,   153,
      25,    37,   537,   412,   234,   534,   325,   326,   327,   379,
     306,   283,  3019,   533,   357,  2945,   288,   295,  3025,   130,
    1862,   300,  3062,   954,  2748,  2735,   304,  2338,  1770,  2381,
    1325,  3038,  3039,  3040,  1906,  2408,  2469,   810,  2945,  3046,
    3182,  1540,  3701,   406,  1543,  2784,  3864,  2945,  3357,  1548,
    3789,  3798,  1551,  3857,   370,  1288,  3063,  1556,  1124,  3422,
    2331,  2945,  2344,  2806,    25,    26,  3787,   339,  2727,  3796,
    2754,  2328,  3784,  2688,   393,  2712,  2713,  1387,  1417,   395,
       8,  2452,  1968,    11,  3545,   357,  3620,    15,    16,  3618,
    2687,    19,    20,    21,  2621,  2622,     8,  1435,  2057,    11,
     416,  3740,  3680,  2740,    16,  3902,  2409,  3802,  3971,    37,
    3975,  3951,  3976,   432,  1455,  3937,  3807,  1124,  2755,  2756,
    2757,  2758,  2759,  2760,  2761,  2762,  2763,  2764,  3913,  3974,
     816,  2663,  2264,  3495,  2265,  3142,    48,  3650,  3270,  3146,
    3894,  2670,  3895,    55,  1643,  2646,  2314,   466,  1246,    42,
    2280,   100,  1096,  1096,   517,  3162,   117,  1834,   477,  3201,
    3669,   524,   525,   526,   527,   528,   529,  1271,  2528,    62,
      82,  3178,  3749,  2297,  1798,    38,   495,  3163,  3185,   128,
     129,    44,  3629,   461,  3451,   156,  1270,  1833,    23,  2267,
     462,  1273,  2873,  2077,  3224,   828,  2506,  3964,   817,   471,
     519,  3378,  2092,  1074,  3211,   176,  2507,  2553,  1977,  3633,
    3217,  3632,  2169,  2124,   533,   108,  2584,  3224,   534,  2281,
    1070,  2601,  1535,  1722,  2988,  1769,  2171,   176,  2085,   105,
    1070,  1070,    -1,    -1,  1070,  1301,  1070,    -1,   150,  1070,
     103,   520,   521,   522,    -1,   524,   525,   526,   527,   528,
     529,  3258,    -1,   531,    -1,    -1,    -1,   535,    -1,    -1,
      -1,  1070,  3771,    -1,  1070,    -1,    -1,    -1,    -1,   181,
      -1,    -1,  3151,    -1,    -1,    -1,  3785,    -1,    -1,    -1,
    3287,  3288,  3289,  3290,  3291,  3292,  3293,   180,   200,  3296,
    3297,  3298,    -1,   205,  1301,  3302,  1795,    -1,  3305,    -1,
     228,  3308,  3309,  3310,  3311,  3312,  3313,  3314,  3315,  3316,
    3317,    -1,    -1,  3320,   177,   208,    -1,    -1,  2845,    -1,
      -1,    -1,    -1,    -1,   187,    -1,  1392,    -1,  3335,    -1,
      -1,    -1,   244,  3340,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   215,    -1,   325,   326,   327,    -1,    -1,  3366,
      -1,    -1,    -1,    -1,    -1,   258,    -1,    -1,   231,    -1,
      -1,    -1,   300,    -1,    -1,   268,   325,   326,   327,   242,
    3387,  3388,    -1,    -1,    -1,  1392,    -1,   280,   300,    -1,
      -1,    -1,  3399,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  3408,  3039,    -1,    -1,    -1,  3413,  3407,  3415,    -1,
      -1,    -1,  3419,   276,    -1,    -1,    -1,  3403,  3404,    -1,
     313,    -1,   393,    -1,    -1,    -1,    -1,  3434,   558,    -1,
    3437,    -1,    -1,  1932,   564,   298,    -1,   567,    -1,    -1,
      -1,    -1,  1941,    -1,   393,   575,    -1,    -1,    -1,    -1,
    3457,    -1,  2411,    -1,  3461,  3462,   405,  3464,  1124,    -1,
      -1,   432,   325,    -1,    -1,    -1,  2425,  2426,  2427,   332,
      -1,   176,    -1,    -1,    -1,    -1,    -1,   370,    -1,   428,
      -1,  2440,   612,   432,  2443,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2451,    -1,   406,   466,    -1,    -1,  3505,  3506,
      -1,    -1,   395,    -1,   453,    -1,   477,    -1,    -1,    -1,
      -1,    -1,   375,  3040,  3521,    -1,  3523,   466,  3525,    -1,
      -1,    -1,    -1,   416,   495,    -1,    -1,    -1,   477,    -1,
    3437,   394,    -1,    -1,    -1,    -1,    -1,    -1,  3545,  3437,
      -1,    -1,    -1,    -1,    -1,  3552,   495,  1613,   519,    -1,
      -1,    -1,    -1,  3437,  3433,    -1,  3542,    -1,  3544,    -1,
      -1,    -1,   533,    -1,    -1,    -1,    -1,  2066,    -1,    -1,
     519,    -1,    -1,  2072,    -1,    -1,  2535,  2536,  2537,    -1,
      -1,    -1,    -1,    -1,   533,    -1,    -1,  3594,  3588,    -1,
      -1,  3591,   520,   521,   522,    -1,   524,   525,   526,   527,
     528,   529,    -1,   466,    -1,   517,  1613,   312,   471,  3595,
      -1,    -1,   524,   525,   526,   527,   528,   529,    -1,    -1,
     325,   326,   327,    -1,    -1,  3611,  3633,    38,    -1,  3615,
      -1,    -1,    -1,    44,    -1,  1301,    -1,    -1,   768,   769,
     770,  1707,    -1,    -1,  3651,    -1,   776,    -1,    -1,    -1,
      -1,  3658,    -1,    -1,  3661,  3662,    -1,    -1,  3185,    -1,
      -1,    -1,    -1,  3670,    -1,  3672,  3673,    -1,    -1,    -1,
    3677,    -1,    -1,    -1,    -1,  3554,    -1,  3684,    -1,   809,
     810,   811,    -1,    -1,    -1,    -1,    -1,    -1,   393,   819,
      -1,    -1,   103,    -1,    -1,    -1,    -1,    -1,  2197,    -1,
    1707,    -1,   832,   833,    -1,    -1,    -1,   837,   838,    -1,
      -1,    -1,    -1,    -1,    -1,  3722,  2215,  3724,    -1,    -1,
      -1,   851,   852,   853,    -1,    -1,  1392,   432,    -1,  3366,
    3737,  3738,  2231,  3740,  3741,   865,   866,    -1,   868,    -1,
      -1,    -1,  3749,  2242,  2703,    -1,    -1,    -1,    -1,    -1,
    3387,  3388,   882,    -1,    -1,    -1,    -1,    -1,   888,  3766,
    3767,   466,    -1,  3770,    -1,    -1,   177,  3774,  2267,    -1,
    3777,  3778,   477,    -1,  3781,    -1,    -1,  3684,    -1,  1845,
      -1,    38,  3419,    -1,    -1,    -1,  3684,    44,    -1,    -1,
     495,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    3684,    -1,    42,  3810,   215,  3805,    -1,  3807,    -1,    -1,
    3817,    -1,    -1,    -1,   519,    -1,    -1,  3803,    -1,    -1,
     231,    -1,    62,    -1,    -1,    -1,   956,    -1,   533,   959,
      -1,   242,    -1,  3740,  2793,    -1,    -1,  2796,  1845,    -1,
    3847,  3848,  3740,    -1,  3851,    -1,   103,    -1,   809,    -1,
     811,    -1,    -1,    -1,    -1,    -1,  3740,    -1,    -1,   989,
      -1,    -1,   992,    -1,  3871,   276,  3852,    -1,   108,    -1,
      -1,  3878,    -1,  1003,  1004,    -1,  3876,    -1,    -1,    -1,
      -1,   842,  1012,    -1,    -1,    -1,    -1,   298,    -1,  1019,
    1020,  1021,  1022,  1023,    -1,  3902,    -1,    -1,    -1,  2858,
    2859,  2860,  2861,    -1,    -1,  1035,   867,  1037,  3787,    -1,
    3817,    -1,    -1,  3913,   325,    -1,    -1,  1047,    -1,  3817,
     177,   332,    -1,  2422,    -1,    -1,    -1,    -1,  1994,    -1,
    3937,  1061,    -1,  3817,    -1,    -1,    -1,    -1,    -1,    -1,
    2006,  1071,  3942,  1073,  1074,    -1,  1076,  1613,  3955,    -1,
      -1,    -1,    -1,    -1,    -1,  1085,  1086,  3964,   215,    -1,
      -1,  1091,    -1,    -1,   375,  3972,    -1,    -1,   208,    -1,
    2036,    -1,    -1,    -1,   231,    -1,    -1,  2043,  3505,  3506,
      -1,    -1,    -1,   394,  1114,   242,    -1,  1994,    -1,    -1,
      57,  1121,    -1,  1123,  1124,    -1,    -1,    -1,    -1,  2006,
      -1,  1131,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  2079,    -1,    -1,    -1,  2083,   258,   276,
      -1,    -1,    -1,  2089,    -1,    -1,    -1,    -1,   268,  2036,
      -1,    -1,    -1,    -1,    -1,    -1,  2043,   104,    -1,    -1,
     280,  1707,    -1,    -1,    -1,  2111,    -1,    -1,     0,    -1,
    1180,    -1,  1182,    -1,    -1,   466,    -1,    -1,   125,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   325,    -1,
      -1,    -1,  2079,   313,    -1,   332,  2083,    -1,    -1,   146,
      -1,    -1,  2089,   150,    -1,    -1,    -1,  3046,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2594,    -1,    -1,    -1,  1229,
    1061,    -1,  1232,    -1,  2111,   172,    -1,    -1,   175,  1070,
      -1,    -1,    -1,    -1,    -1,    -1,  1246,  1247,   375,  1249,
      -1,    -1,    -1,    -1,  3651,  1255,   193,    -1,  2627,    -1,
     370,    -1,    -1,    -1,    -1,    -1,    -1,   394,    -1,    -1,
      -1,    -1,    -1,    -1,  3781,  3672,  3673,  2646,    -1,    -1,
     102,    -1,    -1,    -1,    -1,   395,    -1,  1287,  1288,     8,
    1121,    -1,    11,    -1,    -1,    -1,    15,    16,    -1,    -1,
    1300,  1301,    -1,    -1,    -1,    -1,   416,    -1,    -1,  1845,
      -1,    -1,    -1,    -1,  2683,    -1,    -1,  1317,    -1,    -1,
      -1,  1321,    -1,    -1,    -1,    -1,  1326,    -1,    -1,    48,
     152,    -1,    -1,    -1,  1334,    -1,    55,    -1,    -1,   466,
    2709,    -1,    -1,  1343,   166,    -1,    -1,    -1,    -1,   171,
      -1,   288,    -1,    -1,   176,    -1,  1187,    -1,    -1,   296,
      -1,    -1,    -1,    82,    -1,   187,  1197,  1367,    -1,    -1,
     192,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   318,  1124,  1383,    -1,  1216,  1386,    -1,    -1,    -1,
     128,   129,  1392,  1393,  1225,    -1,    -1,    -1,    -1,    -1,
    1061,    -1,   224,    -1,    -1,    -1,    -1,  1407,  1408,    -1,
      -1,    -1,   349,    -1,    -1,    -1,    -1,  1417,  1418,    -1,
    2789,    -1,  1422,   245,  1424,  1425,    -1,  1427,  1428,    -1,
      -1,   150,    -1,    -1,     8,  1435,    -1,    11,   176,    -1,
      -1,    15,    16,    -1,    -1,    19,    20,    21,  2817,    -1,
      -1,  2820,  1452,    -1,    -1,  1455,    -1,    -1,  1994,    -1,
      -1,    -1,   181,    37,    -1,    -1,    -1,    -1,    -1,    -1,
    2006,    13,    -1,   295,    -1,    -1,   298,    19,    -1,    -1,
      -1,   200,   304,    -1,    -1,    -1,   205,    -1,    -1,    31,
      -1,  3320,  2428,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2036,  2870,    -1,    45,    46,    -1,    -1,  2043,    -1,    -1,
       8,    -1,    -1,    11,    -1,    -1,    -1,    15,    16,    -1,
      -1,    19,    20,    21,    -1,   244,   348,  1527,    -1,  1529,
    1530,    -1,    -1,    -1,    -1,    -1,  1197,  1537,    -1,    37,
      -1,    -1,    -1,  2079,    -1,    -1,    -1,  2083,    -1,    -1,
     372,  2428,    -1,  2089,    -1,    -1,    -1,    -1,  1558,  1301,
    1560,    -1,    -1,    -1,  1225,    -1,    -1,    -1,    -1,   111,
    3399,    -1,    -1,    -1,    -1,  2111,  2945,    -1,    -1,  3408,
      -1,   300,    -1,    -1,  3413,    -1,    -1,   325,   326,   327,
     182,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  3434,    -1,    -1,    -1,    -1,
     432,    -1,    -1,  1613,    -1,    -1,    -1,   209,    -1,    -1,
    1451,    -1,    -1,    -1,  1455,  2561,  2995,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   461,
      -1,  1302,    -1,    -1,  1305,  1306,    -1,    -1,    -1,   471,
    1392,    -1,    -1,    -1,   228,   393,   248,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   405,     8,  1669,
     492,    11,   494,   495,    -1,    -1,    16,    -1,    -1,    -1,
    1680,  2617,    -1,    -1,  2561,    -1,    -1,   406,    -1,    -1,
     428,    -1,    -1,    -1,   432,  1695,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1707,    48,   531,
      -1,   303,   534,   535,   536,    55,  1716,    -1,    -1,  1719,
      -1,    -1,    -1,  3552,    -1,    -1,   300,    -1,   466,    -1,
     228,    -1,   324,    -1,    -1,    -1,    -1,    -1,    -1,   477,
    2617,    -1,    82,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1752,    -1,   346,    -1,    -1,   495,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  3594,  1766,    -1,  1768,    -1,
    1770,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1440,
    1441,   519,    -1,    -1,    -1,  1785,  1786,    -1,    -1,    -1,
      -1,    -1,   384,    -1,  3163,   533,    -1,    -1,   517,   391,
      -1,    -1,   300,    -1,    -1,   524,   525,   526,   527,   528,
     529,    -1,    -1,    -1,    -1,  2751,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1823,    -1,  1825,     0,    -1,    -1,    -1,
      -1,    -1,  3201,    -1,    -1,    -1,    24,    -1,    -1,  1839,
    1840,   181,    -1,    -1,   436,  1845,   438,    -1,    -1,    -1,
    1850,  1851,  1852,  1853,  1854,  1855,  1856,    -1,    -1,     8,
     200,  1861,    11,  1863,   456,   205,    15,    16,    -1,    -1,
     462,  1613,    -1,   465,  2751,  1875,  1876,    -1,    -1,    -1,
    1880,  1881,    -1,    -1,    -1,  1885,  1886,  1887,  1888,    -1,
    1890,  1891,  2428,  3722,    -1,    83,    -1,    -1,    -1,    48,
    1900,    -1,    -1,    -1,   244,    -1,    55,  1907,    -1,    -1,
      -1,    99,  2848,    -1,  1914,    -1,    -1,  1917,  1918,  1919,
    1920,  1921,    -1,    -1,    -1,  1925,    -1,    -1,   102,  1760,
    3299,    -1,    -1,    82,    -1,    -1,    -1,    -1,    -1,  1939,
      -1,    -1,    -1,    -1,    -1,  1945,   520,   521,   522,    -1,
     524,   525,   526,   527,   528,   529,  1956,    -1,    -1,    -1,
     300,  1961,    -1,   151,    -1,  1707,    -1,    -1,  1968,    -1,
      -1,  2848,    -1,   161,    -1,    -1,    -1,  1977,   152,    -1,
      -1,    -1,    -1,    -1,    -1,   173,    -1,    -1,    -1,  2925,
     178,    -1,   166,    -1,  1994,    -1,    -1,   171,    -1,  1124,
    1661,   150,   176,    -1,    -1,    -1,  2006,    -1,    -1,    -1,
      -1,    -1,  1673,   187,  1675,    -1,    -1,    -1,   192,    -1,
      -1,   209,   520,   521,   522,  2561,   524,   525,   526,   527,
     528,   529,   181,   575,  3403,  3404,  2036,    -1,    -1,    -1,
    1701,    -1,  3871,  2043,    -1,  2045,    -1,    -1,  2925,    -1,
     224,   200,    -1,    -1,    -1,    -1,   205,  2057,    -1,    -1,
      -1,  1892,    -1,    -1,    -1,   253,   406,    -1,    -1,   257,
      -1,   245,    -1,    -1,  1905,  1906,    -1,  2077,    -1,  2079,
      -1,  2617,  2082,  2083,    -1,    -1,    -1,  2087,    -1,  2089,
      -1,  2091,  2092,    -1,    -1,   244,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1845,    -1,    -1,    -1,    -1,  3937,    -1,
      -1,  2111,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   295,    -1,    -1,   298,    -1,  3955,    -1,    -1,    -1,
     304,    -1,  3068,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   330,  3972,    -1,    -1,  1977,    -1,  1809,  1810,
      -1,   300,  1983,    -1,    -1,  3524,    -1,    -1,    -1,   347,
    2160,    -1,    -1,    -1,  2164,    -1,  3102,    -1,    -1,  2169,
      -1,    -1,    -1,  3542,   348,  3544,  1301,   517,    -1,    -1,
      -1,    -1,    -1,    -1,   524,   525,   526,   527,   528,   529,
      -1,  3068,    -1,   381,    -1,    -1,   384,    -1,   372,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   395,  1869,  2209,
     398,    -1,    -1,    -1,    -1,  2751,    -1,    -1,  1879,    -1,
      -1,  1882,    -1,    -1,    -1,  3102,  3595,   769,   770,    -1,
     418,    -1,    -1,  2233,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  3611,    -1,   432,    -1,  3615,    -1,    -1,    -1,
    3186,   439,  1994,    -1,  2254,    -1,    -1,   406,   432,    -1,
      -1,    -1,   450,    -1,  2006,  2265,    -1,  1392,   456,    -1,
      -1,  2271,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   461,    -1,    -1,
      -1,    -1,    -1,  3229,  2036,    -1,   484,   471,    -1,    -1,
      -1,  2043,    -1,    -1,    -1,    -1,     0,    -1,    -1,  3186,
      -1,  2311,  2848,    -1,    -1,    -1,  1977,  2317,   492,    -1,
     494,   495,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  2333,    -1,    -1,    -1,  2079,    -1,    -1,
      -1,  2083,    -1,  2343,  2344,  2345,   888,  2089,    -1,    -1,
    3286,    -1,  3229,    -1,    -1,    -1,    -1,   531,    -1,    -1,
     534,   535,   536,    -1,    -1,    -1,    -1,    -1,   517,  2111,
      -1,    -1,    -1,    -1,    -1,   524,   525,   526,   527,   528,
     529,    -1,     8,    -1,    -1,    11,    -1,    -1,  2388,  2925,
      16,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2404,    -1,    -1,    -1,   102,  3286,
      -1,  2411,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    48,    -1,  2424,  2425,  2426,  2427,  2428,    55,
      -1,    -1,    -1,    -1,  3803,  2096,    -1,    -1,  2438,    -1,
    2440,    -1,    -1,  2443,    -1,    -1,    -1,  2447,    -1,  2449,
    3386,  2451,    -1,    -1,    -1,    -1,    82,  2457,   152,    -1,
      -1,    -1,    -1,  2463,    -1,    -1,    -1,    -1,    -1,  2469,
      -1,    -1,   166,    -1,    -1,  2475,  2476,   171,  2478,    -1,
      -1,    -1,   176,  3852,    -1,    -1,    -1,    -1,  1613,    -1,
      -1,    -1,    -1,   187,    -1,    -1,    -1,    -1,   192,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3386,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2350,
      -1,    -1,    -1,    -1,   150,    -1,    -1,  2527,    -1,    -1,
     224,    -1,  3068,    -1,    -1,  2535,  2536,  2537,    -1,    -1,
      -1,    -1,    -1,    -1,  2544,    -1,    -1,  2547,    -1,  1091,
      -1,   245,    -1,  2553,    -1,   181,    42,    -1,    -1,    -1,
      -1,  2561,    -1,    -1,    -1,    -1,  3102,    -1,    -1,    -1,
      -1,  2402,  1114,    -1,   200,    -1,    62,    -1,    -1,   205,
      -1,    -1,  1707,    -1,    -1,  2246,  2586,    -1,    -1,    -1,
      -1,  2422,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   295,    -1,    -1,   298,    -1,    -1,    -1,    -1,    -1,
     304,    -1,    -1,    -1,    -1,    -1,    -1,  2617,   244,    -1,
      -1,    -1,   108,   109,    -1,    -1,  2287,  2288,    -1,    -1,
      -1,    -1,  2463,   119,    -1,    -1,     8,    -1,  1180,    11,
    2471,    -1,  2473,    15,    16,    -1,  2477,    -1,  2479,    -1,
    3186,    -1,    -1,    -1,   348,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  2663,  2664,    -1,    -1,    -1,    -1,    -1,
    2670,    -1,    -1,    -1,   300,    -1,    48,    -1,   372,    -1,
      -1,  2681,    -1,    55,    -1,    -1,  2428,  2687,    -1,    -1,
      -1,    -1,    -1,  3229,   180,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  2703,  1246,  1247,    -1,  2707,    -1,    -1,
      82,  2711,  2712,  2713,    -1,    -1,    -1,  2717,  2718,  2719,
    1845,  2721,   208,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  3669,    -1,    -1,    -1,    -1,   432,    -1,
    2740,    -1,  2742,    -1,    -1,    -1,    -1,    -1,  2748,    -1,
    3286,  2751,  2752,    -1,  2754,  2755,  2756,  2757,  2758,  2759,
    2760,  2761,  2762,  2763,  2764,    -1,    -1,   461,    -1,    -1,
      -1,    -1,   258,    -1,    -1,    -1,    -1,   471,   150,    -1,
     406,    -1,   268,    -1,    -1,    -1,    -1,    -1,  2788,    -1,
      -1,    -1,  3669,  2793,   280,    -1,  2796,   283,   492,    -1,
     494,   495,    -1,    -1,    -1,    -1,  2806,    -1,    -1,   181,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2561,
      -1,    -1,    -1,    -1,  2824,    -1,    -1,   313,   200,    -1,
      -1,    -1,    -1,   205,  2834,  3771,    -1,   531,    -1,    -1,
     534,   535,   536,    -1,    -1,    -1,    -1,    -1,  2848,  3785,
    3386,  2851,    -1,    -1,    -1,    -1,    -1,    -1,  2858,  2859,
    2860,  2861,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1994,
      -1,    -1,   244,    -1,    -1,  2617,    -1,  2877,  2878,    -1,
      -1,  2006,  1424,  1425,   370,  1427,  2886,    -1,    -1,    -1,
      -1,   517,    -1,    -1,  3771,    -1,    -1,    -1,   524,   525,
     526,   527,   528,   529,  2565,  2566,    -1,    -1,  3785,   395,
      -1,  2036,    -1,  2913,    -1,    -1,    -1,    -1,  2043,    -1,
    2751,    -1,    -1,    -1,    -1,  2925,    -1,    -1,   300,    -1,
     416,    -1,   418,    -1,     8,   421,    -1,    11,  2938,    -1,
      -1,    15,    16,  2943,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  2784,  2079,    -1,    -1,    -1,  2083,    -1,
      -1,    -1,    -1,    -1,  2089,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    48,    -1,    -1,     8,    -1,    -1,
      11,    55,    -1,    -1,    15,    16,  2111,  1529,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2995,    -1,    -1,    -1,  2999,
      -1,    -1,    -1,    -1,    -1,  3005,    -1,    -1,    82,  2751,
      -1,    -1,    -1,    -1,    -1,    -1,  1558,    48,  1560,  3019,
      -1,    -1,    -1,    -1,    55,  3025,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   406,    -1,    -1,    -1,  3038,  3039,
      -1,    -1,    -1,    -1,    -1,    -1,  3046,   533,    -1,    -1,
      -1,    82,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,     8,    -1,  3063,    -1,    -1,    13,    -1,  3068,    16,
      -1,    -1,    19,    -1,    -1,    -1,   150,    -1,    25,    26,
      -1,    -1,    -1,    30,    31,    32,    -1,    -1,    35,    -1,
    2751,    38,    39,    -1,    -1,    42,    -1,    -1,    45,    46,
      -1,    -1,  3102,    -1,    -1,    -1,  2848,   181,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2949,   150,
      -1,    -1,    -1,    -1,    -1,    -1,   200,    -1,    -1,    -1,
      -1,   205,    -1,  3669,    -1,    -1,     8,    -1,    -1,    11,
      -1,    -1,  3142,    15,    16,   517,  3146,    19,    20,    21,
     181,  3151,   524,   525,   526,   527,   528,   529,   105,    -1,
      -1,    -1,  3162,   110,   111,   112,   113,   114,    -1,   200,
     244,    -1,    -1,    -1,   205,    -1,    -1,    -1,  3178,    -1,
      -1,    -1,  3182,  2925,    -1,     8,  3186,    -1,    11,    -1,
      -1,    -1,    15,    16,    17,    18,    19,    20,    21,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  3211,    -1,   244,    37,    -1,    -1,  3217,    -1,    -1,
      -1,    -1,  2883,    -1,  3224,    48,   300,    -1,    -1,  3229,
      -1,    -1,    55,    -1,    -1,  3771,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   119,    -1,  3785,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3258,    82,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   300,
      -1,    -1,    -1,    -1,    -1,  3275,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1825,    -1,    -1,  3286,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  3296,    -1,  1840,    -1,
      -1,    -1,    -1,  2428,    -1,    -1,    -1,    -1,  1850,    -1,
    1852,    -1,    -1,  1855,    -1,    -1,    -1,    -1,    -1,  1861,
    3320,  1863,    -1,    -1,    -1,    -1,  3068,    -1,  3159,    -1,
      -1,    -1,   406,    -1,  1876,  3335,    -1,    -1,    -1,  1881,
    3340,    -1,    -1,  1885,  1886,  1887,  1888,    -1,  1890,  1891,
      -1,  3182,    -1,    -1,    -1,    -1,   228,    -1,   181,    -1,
    3102,    -1,    -1,    -1,    -1,    -1,  3366,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   406,    -1,   200,    -1,    -1,
      -1,    -1,   205,    -1,    -1,    -1,  3386,  3387,  3388,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  3057,    -1,    -1,  3399,
      -1,  3062,    -1,    -1,    -1,   228,   229,  3407,  3408,    -1,
      -1,    -1,    -1,  3413,    -1,  3415,    -1,    -1,    -1,  3419,
      -1,   244,    -1,    -1,    -1,    -1,    -1,    -1,   300,    -1,
      -1,  3262,    -1,  3433,  3434,    -1,  2561,    -1,    -1,    -1,
      -1,    -1,    -1,   517,  3186,    -1,    -1,    -1,  3109,  3110,
     524,   525,   526,   527,   528,   529,    -1,    -1,    -1,    -1,
     283,  3461,  3462,   286,  3464,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   300,    -1,    -1,
     303,    -1,    -1,    -1,    -1,    -1,   517,  3229,  3488,  3489,
      -1,    -1,  2617,   524,   525,   526,   527,   528,   529,     8,
      -1,    -1,    11,  2045,    -1,    -1,    15,    16,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     8,
      -1,    -1,    11,    -1,    -1,    -1,    15,    16,    17,    18,
      19,    20,    21,    -1,    -1,  2077,    -1,    -1,    -1,    48,
    2082,    -1,    -1,    -1,  3286,  3545,    55,    -1,    37,    -1,
       8,    -1,  3552,    11,  3554,  3386,    -1,    15,    16,    48,
      -1,    19,    20,    21,    -1,    -1,    55,    -1,    -1,    -1,
      -1,    -1,    -1,    82,    -1,    -1,    -1,    -1,    -1,    37,
      -1,    -1,    -1,   406,    -1,    -1,    -1,    -1,  3588,    -1,
      -1,  3591,     8,    82,  3594,    11,    -1,    -1,    -1,    -1,
      16,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   558,    -1,    -1,    -1,    -1,    -1,   564,  2160,    -1,
     567,    -1,    -1,    -1,    -1,    -1,  2751,  2169,   575,    -1,
      -1,    -1,    48,  3633,    -1,    -1,    -1,    -1,    -1,    55,
      -1,   150,    -1,    -1,  3386,    -1,    -1,    -1,   520,   521,
     522,    -1,   524,   525,   526,   527,   528,   529,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   612,    82,    -1,    -1,  3669,
      -1,    -1,   181,     8,    -1,    -1,    11,    -1,    -1,    -1,
      15,    16,    -1,    -1,    19,    20,    21,    -1,    -1,    -1,
      -1,   200,   181,    -1,   517,    -1,   205,   520,   521,   522,
      -1,   524,   525,   526,   527,   528,   529,    -1,    -1,    -1,
      -1,   200,  2254,  3374,  3375,    -1,   205,    -1,    -1,    -1,
      -1,   544,  3722,  2848,  3724,  3386,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   150,   244,    -1,  3737,  3738,   228,
     229,  3741,    -1,    -1,    -1,  3576,    -1,    -1,    -1,  3749,
      -1,    -1,    -1,    -1,    -1,   244,    -1,    -1,    -1,    -1,
      -1,    -1,  3762,  3763,    -1,   181,    -1,    -1,    -1,  2311,
     228,  3771,    -1,    -1,    -1,  2317,    -1,    -1,    -1,    -1,
      -1,  3781,    -1,    -1,   200,  3785,    -1,  3787,    -1,   205,
      -1,   300,    -1,    -1,   283,    -1,    -1,   286,    -1,    -1,
    2925,    -1,    -1,    -1,    -1,  3805,    -1,  3807,    -1,    -1,
    3810,   300,    -1,    -1,   303,    -1,    -1,    -1,    -1,    -1,
      -1,   768,   769,   770,    -1,    -1,    -1,    -1,   244,   776,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   300,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   809,   810,   811,    -1,    -1,    -1,    -1,    -1,
      -1,  3871,   819,    -1,    -1,    -1,  3876,    -1,  3878,    -1,
      -1,    -1,    -1,    -1,   300,   832,   833,    -1,    -1,    -1,
     837,   838,    -1,   228,  3894,  3895,  2438,   406,    -1,    -1,
      -1,    -1,  3902,    -1,   851,   852,   853,    -1,    -1,    -1,
      -1,    -1,    -1,  3913,    -1,    -1,    -1,   406,   865,   866,
      -1,   868,    -1,    -1,    -1,    -1,    -1,  3669,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   882,    -1,  3937,    -1,    -1,
      -1,   888,  3942,  3068,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  3785,  3955,    -1,  2978,  2979,  2980,
    2981,    -1,    -1,    -1,  3964,   300,    -1,    -1,    -1,    -1,
      -1,    -1,  3972,    -1,    -1,    -1,    -1,  3102,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     406,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2544,    -1,    -1,  2547,    -1,    -1,   517,   956,
      -1,  2553,   959,    -1,    -1,   524,   525,   526,   527,   528,
     529,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   517,  3771,
      -1,   520,   521,   522,    -1,   524,   525,   526,   527,   528,
     529,    -1,   989,  3785,    -1,   992,    -1,    -1,   537,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1003,  1004,    -1,    -1,
      -1,  3186,   520,   521,   522,  1012,   524,   525,   526,   527,
     528,   529,  1019,  1020,  1021,  1022,  1023,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,     8,    -1,  1035,    11,
    1037,    -1,    -1,    15,    16,    -1,    -1,    19,    20,    21,
    1047,   517,    -1,    -1,  3229,    -1,    -1,    -1,   524,   525,
     526,   527,   528,   529,  1061,    37,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  3785,    -1,  1073,  1074,    -1,  1076,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1085,  1086,
      -1,    -1,    -1,    -1,  1091,    -1,    -1,    -1,    -1,    -1,
      -1,     8,    -1,    -1,    11,    -1,    -1,    -1,    15,    16,
      -1,  3286,    19,    20,    21,  2707,    -1,  1114,    -1,  2711,
    2712,  2713,    -1,    -1,  1121,    -1,  1123,  1124,    -1,    -1,
      37,    -1,    -1,    -1,  1131,   520,   521,   522,    -1,   524,
     525,   526,   527,   528,   529,    -1,    -1,    -1,  2740,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  2755,  2756,  2757,  2758,  2759,  2760,  2761,
    2762,  2763,  2764,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1180,    -1,  1182,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,     8,    -1,    -1,
      11,  3386,    -1,    -1,    -1,    16,  3287,  3288,  3289,  3290,
    3291,  3292,  3293,    -1,    -1,    -1,  3297,  3298,    -1,    -1,
      -1,  3302,  1229,    -1,  3305,  1232,    -1,  3308,  3309,  3310,
    3311,  3312,  3313,  3314,  3315,  3316,  3317,    48,    -1,  1246,
    1247,    -1,    -1,    -1,    55,    -1,   228,    -1,  1255,  2851,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    82,    -1,    -1,    -1,  2877,     8,    -1,    -1,    11,
    1287,  1288,    -1,    15,    16,    -1,    -1,    19,    20,    21,
      -1,    -1,    -1,  1300,  1301,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    37,    -1,    -1,    -1,    -1,
    1317,   228,    -1,    -1,  1321,    -1,    -1,    -1,   300,  1326,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1334,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1343,    -1,    -1,   150,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1367,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     181,    -1,    -1,    -1,    -1,    -1,  1383,    -1,    -1,  1386,
      -1,    -1,    -1,   300,    -1,  1392,  1393,    -1,    -1,   200,
      -1,    -1,    -1,    -1,   205,    -1,    -1,    -1,    -1,    -1,
    1407,  1408,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1417,  1418,    -1,    -1,    -1,  1422,    -1,  1424,  1425,    -1,
    1427,  1428,    -1,    -1,    -1,    -1,    -1,    -1,  1435,    -1,
      -1,    -1,    -1,   244,    -1,    -1,    -1,  3039,    -1,    -1,
    3521,    -1,  3523,    -1,  3525,  1452,    -1,    -1,  1455,    -1,
      -1,    -1,    -1,    -1,     3,    -1,    -1,    -1,    -1,     8,
      -1,    -1,    11,    -1,    -1,    -1,    15,    16,    17,    18,
      19,    20,    21,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  3669,    -1,    -1,    -1,    37,   300,
      -1,    -1,    -1,    42,    -1,    -1,   228,    -1,    -1,    48,
      -1,    -1,    -1,    -1,    -1,    -1,    55,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1527,    -1,  1529,  1530,    -1,    -1,    -1,    -1,    -1,    -1,
    1537,    -1,    -1,    82,    -1,    -1,    -1,    -1,   520,   521,
     522,    -1,   524,   525,   526,   527,   528,   529,    -1,    -1,
      -1,  1558,    -1,  1560,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   300,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  3658,    -1,    -1,
    3661,  3662,    -1,    -1,    -1,    -1,  3771,    -1,    -1,  3670,
      -1,    -1,    -1,    -1,    -1,   406,  3677,    -1,    -1,    -1,
    3785,    -1,    -1,   520,   521,   522,  1613,   524,   525,   526,
     527,   528,   529,    -1,    -1,  3217,    -1,    -1,    -1,    -1,
      -1,    -1,  3224,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
       8,    -1,   181,    11,    -1,    -1,    -1,    15,    16,    17,
      18,    19,    20,    21,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   200,    -1,    -1,    -1,    -1,   205,    -1,    -1,    37,
      -1,    -1,  1669,    -1,    42,    -1,    -1,    -1,    -1,    -1,
      48,    -1,    -1,  1680,    -1,    -1,    -1,    55,    -1,   228,
     229,    -1,    -1,    -1,    -1,  3766,  3767,    -1,  1695,  3770,
      -1,    -1,    -1,  3774,    -1,   244,  3777,  3778,    -1,    -1,
    1707,    -1,    -1,    -1,    82,    -1,   517,    -1,    -1,  1716,
      -1,    -1,  1719,   524,   525,   526,   527,   528,   529,    -1,
      -1,    27,    -1,    -1,    -1,    -1,    -1,    33,    -1,    -1,
      -1,    -1,    -1,  3335,   283,    -1,    42,   286,  3340,    -1,
      -1,    -1,    -1,    -1,    -1,  1752,    -1,    -1,    -1,    -1,
      -1,   300,    -1,    -1,   303,    -1,    62,    -1,    -1,  1766,
      -1,  1768,    -1,  1770,  3366,    -1,  3847,  3848,    -1,     8,
    3851,    -1,    11,    -1,    -1,    -1,    15,    16,  1785,  1786,
      19,    20,    21,    -1,    -1,  3387,  3388,    -1,   520,   521,
     522,    -1,   524,   525,   526,   527,   528,   529,    -1,    -1,
      -1,    -1,   108,   181,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1823,  3419,  1825,    -1,
      -1,    -1,   200,    -1,    -1,    -1,    -1,   205,    -1,    -1,
      -1,    -1,  1839,  1840,   140,    -1,    -1,    -1,  1845,    -1,
      -1,    -1,    -1,  1850,  1851,  1852,  1853,  1854,  1855,  1856,
     228,   229,    -1,    -1,  1861,    -1,  1863,   406,    -1,  3461,
      -1,    -1,    -1,    -1,    -1,    -1,   244,    -1,  1875,  1876,
      -1,    -1,    -1,  1880,  1881,    -1,    -1,    -1,  1885,  1886,
    1887,  1888,    -1,  1890,  1891,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1900,    -1,    -1,    -1,    -1,    -1,    -1,
    1907,    -1,   208,    -1,    -1,   283,    -1,  1914,   286,    -1,
    1917,  1918,  1919,  1920,  1921,    -1,    -1,    -1,  1925,    -1,
      -1,    -1,   300,    -1,    -1,   303,    -1,    -1,    -1,    -1,
      -1,    -1,  1939,    -1,    -1,    -1,    -1,    -1,  1945,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1956,
      -1,    -1,   258,    -1,  1961,    -1,    -1,    -1,    -1,    -1,
      -1,  1968,   268,    -1,    -1,    -1,    -1,    -1,   517,    -1,
    1977,   520,   521,   522,   280,   524,   525,   526,   527,   528,
     529,    -1,    -1,    -1,    -1,    -1,    -1,  1994,    -1,   228,
      -1,    -1,    -1,    -1,    -1,    -1,   302,    -1,    -1,  2006,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   313,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   406,  2036,
      -1,    -1,     0,    -1,    -1,    -1,  2043,    -1,  2045,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2057,    -1,    -1,    -1,    22,    -1,    -1,    -1,   364,    -1,
      -1,   300,   368,    -1,   370,    33,    -1,    35,    36,    -1,
    2077,    -1,  2079,    -1,    -1,  2082,  2083,    -1,    -1,    -1,
    2087,    49,  2089,    -1,  2091,  2092,    54,    -1,    -1,   395,
      -1,    -1,    -1,    -1,   400,    63,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2111,    -1,    -1,    -1,    -1,    77,
     416,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    86,     8,
      88,    -1,    11,    -1,    -1,    -1,    -1,    16,    -1,    -1,
      -1,    -1,   100,    -1,   102,    -1,    -1,    -1,    -1,   517,
      -1,    -1,   520,   521,   522,   113,   524,   525,   526,   527,
     528,   529,    -1,  2160,    -1,    -1,   534,  2164,    -1,    48,
     128,   129,  2169,   131,    -1,    -1,    55,    -1,   474,    -1,
      -1,    -1,   140,    -1,     8,    -1,    -1,    11,    -1,  3781,
     148,    15,    16,    70,    71,    19,    20,    21,   156,    -1,
     158,   159,    -1,    82,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2209,    37,   172,    -1,    -1,    -1,   176,    -1,
      -1,    -1,    -1,    -1,    48,    -1,    -1,    -1,    -1,    -1,
      -1,    55,    -1,    -1,   111,   112,  2233,    -1,   115,   116,
      -1,    -1,    -1,    -1,    -1,    -1,   204,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2254,    82,    -1,
      -1,    -1,   220,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   150,    -1,    -1,  2271,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   247,
      -1,   520,   521,   522,    -1,   524,   525,   526,   527,   528,
     529,    -1,   181,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2311,    -1,    -1,    -1,   195,   196,
    2317,   200,    -1,    -1,    -1,    -1,   205,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2333,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2343,  2344,  2345,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   181,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   244,    -1,   325,   326,   327,
      -1,    -1,  3964,    -1,    -1,   333,   200,    -1,   336,    -1,
      -1,   205,    -1,   260,   261,   262,   263,   264,   265,   266,
     267,  2388,    -1,   270,   271,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   228,   229,    -1,  2404,    -1,    -1,
     368,    -1,    -1,    -1,  2411,    -1,    -1,    -1,    -1,   377,
     244,   300,    -1,    -1,    -1,    -1,    -1,  2424,  2425,  2426,
    2427,  2428,    -1,    -1,    -1,   393,    -1,    -1,    -1,    -1,
      -1,  2438,   400,  2440,    -1,    -1,  2443,   405,    -1,    -1,
    2447,    -1,  2449,    -1,  2451,    -1,    -1,    -1,   416,   283,
    2457,    -1,   286,    -1,    -1,    -1,  2463,    -1,    -1,    -1,
     428,    -1,  2469,    -1,   432,    -1,   300,    -1,  2475,  2476,
      -1,  2478,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   453,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   466,    -1,
      -1,   469,   389,   390,   472,    -1,    -1,    -1,    -1,   477,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   406,    -1,    -1,
    2527,    -1,    -1,    -1,    -1,    -1,    -1,   495,  2535,  2536,
    2537,    -1,    -1,    -1,    -1,    -1,    -1,  2544,    -1,    -1,
    2547,    -1,    -1,    -1,    -1,    -1,  2553,    -1,    -1,    -1,
      -1,   519,    -1,    -1,  2561,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   533,    -1,    -1,   536,    -1,
      -1,    -1,   406,    -1,    -1,    -1,    -1,    -1,    -1,  2586,
      -1,    -1,    -1,    -1,    -1,     8,    -1,    -1,    11,    -1,
      -1,    -1,    15,    16,    17,    18,    19,    20,    21,    -1,
      -1,    -1,   489,   490,    -1,    -1,    -1,    -1,    -1,    -1,
    2617,    -1,    -1,    -1,    37,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    48,   513,   514,   517,    -1,
      -1,    -1,    55,    -1,    -1,   524,   525,   526,   527,   528,
     529,    -1,    -1,    -1,    -1,    -1,   533,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    82,
      -1,    -1,    27,    -1,    -1,    -1,    -1,    -1,    33,    -1,
      -1,    -1,    -1,    -1,  2681,    -1,    -1,    42,    -1,    -1,
    2687,    -1,    -1,   517,    -1,    -1,   520,   521,   522,    -1,
     524,   525,   526,   527,   528,   529,  2703,    62,    -1,    -1,
    2707,    -1,    -1,    -1,  2711,  2712,  2713,    -1,    -1,    -1,
    2717,  2718,  2719,    -1,  2721,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  2740,    -1,  2742,    -1,    -1,    -1,    -1,
      -1,  2748,    -1,   108,  2751,  2752,    -1,  2754,  2755,  2756,
    2757,  2758,  2759,  2760,  2761,  2762,  2763,  2764,   181,    -1,
      -1,   863,   864,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   140,    -1,   200,    -1,    -1,
      -1,  2788,   205,    -1,    -1,    -1,  2793,    -1,    -1,  2796,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2806,
      -1,    -1,    -1,    -1,    -1,   228,   229,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2824,    -1,    -1,
      -1,   244,    -1,    -1,    -1,    -1,    -1,  2834,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2848,    -1,   208,  2851,    -1,    -1,    -1,    -1,    -1,
      -1,  2858,  2859,  2860,  2861,    -1,    -1,    -1,    -1,    -1,
     283,    -1,    -1,   286,    -1,    -1,    -1,    -1,    -1,    -1,
    2877,  2878,    -1,    -1,    -1,    -1,    -1,   300,    -1,  2886,
     303,    -1,    -1,    -1,    -1,    -1,   988,    -1,    -1,    -1,
     992,   993,    -1,   258,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   268,    -1,    -1,  2913,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   280,    -1,    -1,  2925,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2938,    -1,    -1,    -1,    -1,  2943,   302,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1047,    -1,    -1,   313,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    24,    -1,  1067,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1075,    -1,    -1,  1078,    -1,    -1,  1081,
    1082,  1083,  1084,   406,    -1,    -1,    -1,    -1,  2995,    -1,
      -1,    -1,  2999,    -1,    -1,    -1,    -1,    -1,  3005,   364,
      -1,    -1,    -1,   368,    -1,   370,    -1,    -1,    -1,    -1,
      -1,    -1,  3019,    -1,    -1,    -1,    -1,    -1,  3025,    -1,
    1122,  1123,    83,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     395,  3038,  3039,    -1,    -1,   400,    -1,    -1,    99,  3046,
      -1,  1143,    -1,    -1,    -1,    -1,     8,    -1,    -1,    11,
      -1,   416,    -1,    15,    16,    -1,  3063,    19,    20,    21,
    1162,  3068,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1173,  1174,  1175,    -1,  1177,  1178,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,     3,    48,     5,    -1,    -1,
     151,    -1,    -1,    55,   517,  3102,    -1,   520,   521,   522,
     161,   524,   525,   526,   527,   528,   529,    -1,  1210,   474,
      -1,   534,   173,    -1,    -1,    -1,    -1,   178,    -1,    -1,
      82,    -1,    -1,    -1,    -1,  1227,  1228,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  3142,    -1,    -1,    -1,  3146,
      -1,    -1,    -1,    -1,  3151,    -1,    -1,    -1,   209,    -1,
      -1,    -1,    70,    71,    -1,  3162,    -1,    -1,    -1,    -1,
      -1,  1263,    -1,    -1,    -1,  1267,  1268,    -1,    -1,    -1,
      -1,  3178,    -1,    -1,    -1,  3182,  1278,  1279,     8,  3186,
      -1,    11,    -1,    -1,    -1,    15,    16,    17,    18,    19,
      20,    21,   253,   111,   112,    -1,   257,   115,   116,    -1,
      -1,    -1,    -1,    -1,  3211,    -1,    -1,    37,    -1,    -1,
    3217,    -1,    -1,    -1,    -1,    -1,    -1,  3224,    48,   181,
      -1,    -1,  3229,    -1,    -1,    55,    -1,    -1,    -1,    -1,
      -1,    -1,  1334,    -1,    -1,    -1,    -1,    -1,   200,    -1,
      -1,  1343,    -1,   205,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  3258,    82,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   324,    -1,  1367,   228,   229,    -1,   330,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   195,   196,  3286,
      -1,    -1,   244,    -1,    -1,   346,   347,    -1,    -1,  3296,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  3320,    -1,    -1,    -1,    -1,    -1,    -1,
     381,   283,    -1,   384,   286,    -1,    -1,    -1,  3335,    -1,
      -1,    -1,    -1,  3340,   395,    -1,    -1,   398,   300,    -1,
      -1,    -1,   260,   261,   262,   263,   264,   265,   266,   267,
      -1,   181,   270,   271,    -1,    -1,  1458,   418,    -1,  3366,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     200,   432,    -1,    -1,    -1,   205,    -1,   438,   439,  3386,
    3387,  3388,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   450,
      -1,    -1,  3399,    -1,    -1,   456,    -1,    -1,   228,   229,
      -1,  3408,    -1,    -1,    -1,    -1,  3413,    -1,  3415,    -1,
      -1,    -1,  3419,    -1,   244,    -1,    -1,  1519,    -1,  1521,
    1522,    -1,    -1,   484,    -1,    -1,  3433,  3434,    -1,    -1,
      -1,    -1,  1534,  1535,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   406,    -1,    -1,    -1,  1550,    -1,
      -1,    -1,    -1,   283,  3461,  3462,   286,  3464,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     300,   389,   390,   303,    -1,    -1,    -1,    -1,    -1,    -1,
       8,    -1,    -1,    11,    -1,    -1,    -1,    15,    16,    17,
      18,    19,    20,    21,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    37,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      48,    -1,    -1,    -1,    -1,    -1,    -1,    55,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3545,    -1,
      -1,    -1,    -1,    -1,    -1,  3552,    -1,  3554,    -1,    -1,
      -1,    -1,    -1,  1655,    82,   517,    -1,    -1,   520,   521,
     522,  1663,   524,   525,   526,   527,   528,   529,    -1,    -1,
      -1,   489,   490,    -1,    -1,    -1,   406,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  3594,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   513,   514,    -1,    -1,    -1,
    1702,    -1,    -1,    -1,    -1,    -1,  1708,  1709,  1710,  1711,
    1712,  1713,  1714,  1715,    -1,    -1,    -1,    -1,  1720,  1721,
      -1,    -1,    -1,  1725,    -1,    -1,  3633,  1729,    -1,    -1,
    1732,  1733,  1734,  1735,  1736,  1737,  1738,  1739,  1740,    -1,
      -1,  1743,    -1,    -1,    -1,    -1,    -1,    -1,  1750,    -1,
    1752,    -1,    -1,   181,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  3669,    -1,    -1,    -1,    -1,    -1,    -1,  1771,
      -1,    -1,   200,    -1,    -1,    -1,    -1,   205,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   517,    -1,    -1,
     520,   521,   522,    -1,   524,   525,   526,   527,   528,   529,
     228,   229,    -1,    -1,   534,    -1,    -1,  1809,  1810,    -1,
      -1,    -1,    -1,    -1,    -1,  3722,   244,  3724,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    3737,  3738,    -1,    -1,  3741,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  3749,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1079,   283,    -1,    -1,   286,    -1,
      -1,    -1,    -1,    -1,  3771,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   300,    -1,  3781,   303,    -1,    -1,  3785,    -1,
    3787,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1896,    -1,    -1,    -1,  1900,    -1,
      -1,  1903,  1904,  3810,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,     8,    -1,    -1,    11,    -1,
      -1,    -1,    15,    16,    17,    18,    19,    20,    21,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1945,    37,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    48,    -1,    -1,    -1,    -1,
      -1,    -1,    55,    -1,  3871,    -1,  1968,  1969,    -1,    -1,
      -1,  3878,     8,  1198,    -1,    11,    -1,    -1,   406,    15,
      16,    -1,    -1,    19,    20,    21,    -1,    -1,    -1,    82,
      -1,    -1,    -1,    -1,    -1,  3902,  1998,  1999,    -1,  2001,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    48,    -1,    -1,    -1,    -1,  1242,    -1,    55,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2030,  2031,
    3937,    -1,  2034,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    82,    -1,  3955,    -1,
      -1,    -1,  1277,    -1,    -1,    -1,    -1,  3964,    -1,    -1,
      -1,  2063,    -1,    -1,    -1,  3972,  2068,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  2085,    -1,  2087,    -1,    -1,   181,   517,
      -1,    -1,   520,   521,   522,    -1,   524,   525,   526,   527,
     528,   529,    -1,  1328,    -1,    -1,   534,   200,    -1,    -1,
      -1,    -1,   205,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2123,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   228,   229,  1079,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   181,    -1,    -1,  1373,    -1,
      -1,   244,    -1,  1378,    -1,    -1,    -1,    -1,    -1,    -1,
    2162,    -1,    -1,    -1,   200,  2167,  2168,    -1,    -1,   205,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     283,    -1,    -1,   286,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1431,   300,   244,  2211,
     303,    -1,  2214,    -1,  2216,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,     8,    -1,    -1,    11,    -1,
    2232,  1456,    15,    16,    17,    18,    19,    20,    21,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    37,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   300,    48,    -1,    -1,    -1,    -1,
      -1,    -1,    55,    -1,    70,    71,    -1,  1502,  2280,  1504,
      -1,  1506,  1507,    -1,  1509,    -1,    -1,  1512,    -1,    -1,
    1515,    -1,    -1,  1518,    -1,  2297,  2298,    -1,  1523,    82,
      -1,  1526,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   406,  2316,   111,   112,    -1,    -1,   115,
     116,    -1,    -1,  2325,    -1,    -1,  1268,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1277,    -1,    -1,    -1,    -1,
      -1,  1566,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,     8,    -1,    -1,    11,    -1,    -1,
     406,    15,    16,    17,    18,    19,    20,    21,    -1,    -1,
    2382,    -1,    -1,    -1,    -1,    -1,  2388,    -1,    -1,    -1,
      -1,    -1,    -1,    37,    -1,    -1,    -1,    -1,   181,   195,
     196,    -1,    -1,    -1,    48,    -1,    -1,    -1,    -1,    -1,
      -1,    55,    -1,    -1,    -1,    -1,    -1,   200,    -1,    -1,
      -1,    -1,   205,    -1,   517,    -1,  1651,   520,   521,   522,
      -1,   524,   525,   526,   527,   528,   529,    -1,    82,    -1,
      -1,   534,  1667,    -1,  2446,   228,   229,    -1,    -1,    -1,
      -1,    -1,  1677,  1678,  1679,    -1,    -1,    -1,  1683,    -1,
      -1,   244,  1687,    -1,   260,   261,   262,   263,   264,   265,
     266,   267,    -1,    -1,   270,   271,    -1,    -1,    -1,    -1,
      -1,   517,    -1,    -1,   520,   521,   522,    -1,   524,   525,
     526,   527,   528,   529,    -1,    -1,    -1,    -1,    -1,    -1,
     283,    -1,    -1,   286,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   300,    -1,    -1,
     303,    -1,    -1,    -1,  1749,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   181,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   200,    -1,    -1,    -1,
      -1,   205,    -1,    -1,  1506,  1507,    -1,  1792,    -1,    -1,
    1512,    -1,    -1,    -1,    -1,  2577,    -1,    -1,    -1,    -1,
      -1,  2583,  2584,  1808,   228,   229,    -1,    -1,  1813,    -1,
      -1,    -1,  2594,   389,   390,    -1,    -1,    -1,    -1,    -1,
     244,    -1,    -1,  2605,    -1,  1830,  2608,    -1,  2610,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2618,    -1,    -1,    -1,
      -1,    -1,    -1,   406,  2626,  2627,    -1,    -1,    -1,    -1,
      -1,  2633,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   283,
      -1,    -1,   286,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   300,    -1,    -1,   303,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2679,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2689,    -1,    -1,
      -1,    -1,    -1,   489,   490,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2709,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   513,   514,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   517,    -1,    -1,   520,   521,   522,
      -1,   524,   525,   526,   527,   528,   529,    -1,    -1,    -1,
      -1,   534,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   406,    -1,  2766,    -1,  2768,    -1,    -1,    -1,
      -1,  1996,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2004,
    2005,    -1,  2007,  2008,  2009,  2010,  2011,  2012,    -1,    -1,
    2015,  2016,  2017,  2018,  2019,  2020,  2021,  2022,  2023,  2024,
    2025,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     8,    -1,
      -1,    11,    -1,    -1,    -1,    15,    16,    17,    18,    19,
      20,    21,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    37,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1798,    -1,    48,    -1,
    1079,    -1,    -1,  2865,  2866,    55,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   517,    -1,    -1,   520,   521,   522,    -1,
     524,   525,   526,   527,   528,   529,    -1,    -1,    -1,    -1,
     534,    -1,    82,    -1,    -1,    -1,    -1,    -1,  2900,    -1,
      -1,  2126,    -1,    -1,  2129,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2914,    -1,    -1,    -1,    -1,  2919,  2920,    -1,
      -1,    -1,  2924,    -1,    -1,    -1,    -1,  2929,    -1,    -1,
    2932,  2933,    -1,    -1,    -1,  2937,  2938,    -1,    -1,  2941,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2175,    -1,    -1,    -1,  2179,  2180,  2181,  2182,  2183,  2184,
    2185,  2186,    -1,    -1,    -1,    -1,    -1,  2192,  2193,    -1,
    2195,  2196,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2207,    -1,    -1,  2210,  2988,    -1,    -1,    -1,
      -1,   181,    -1,  2218,  2219,  2220,  2221,  2222,  2223,  2224,
    2225,  2226,  2227,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     200,    -1,    -1,    -1,    -1,   205,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2253,    -1,
    3032,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   228,   229,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   244,    -1,    -1,  3059,  1277,    -1,
      -1,    -1,    -1,    -1,    -1,  2007,  2008,  2009,  2010,  2011,
    2012,    -1,    -1,  2015,  2016,  2017,  2018,  2019,  2020,  2021,
    2022,  2023,  2024,    -1,    -1,    -1,    -1,    -1,    -1,  2314,
      -1,    -1,    -1,   283,    -1,    -1,   286,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     300,    -1,    -1,   303,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,     8,    -1,    -1,    11,    -1,    -1,
      -1,    -1,    16,    -1,    -1,    19,    20,    21,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3150,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2383,    -1,
      -1,    -1,    -1,    -1,    48,    -1,    -1,    -1,  2393,  2394,
      -1,    55,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    82,  3201,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   406,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  3234,    -1,    -1,  2460,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  3245,  3246,    -1,    -1,  3249,    -1,  3251,
    2192,  2193,    -1,    -1,    -1,    -1,    -1,  2482,  2483,  2484,
      -1,    -1,  2487,  2488,  2489,  2490,  2491,  2492,    -1,    -1,
      -1,  2496,  2497,  2498,  2499,  2500,  2501,  2502,  2503,  2504,
    2505,    -1,    -1,    -1,    -1,  2510,  2511,  1506,  1507,    -1,
      -1,    -1,    -1,  1512,    -1,    -1,    -1,   181,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  2538,    -1,    -1,   200,  3319,  2543,    -1,
      -1,   205,    -1,    -1,    -1,    -1,    -1,   517,    -1,  3331,
     520,   521,   522,    -1,   524,   525,   526,   527,   528,   529,
      -1,    -1,    -1,    -1,   534,    -1,    -1,    -1,    -1,    -1,
      -1,  2576,    -1,  3355,    -1,    -1,    -1,    -1,    -1,    -1,
     244,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2595,    -1,  2314,  2598,  2599,    -1,    -1,    -1,    -1,    -1,
       8,  2606,  2607,    11,    -1,    -1,    -1,    15,    16,    17,
      18,    19,    20,    21,    -1,  2620,  2621,  2622,  2623,    -1,
    2625,    -1,    -1,    -1,  2629,    -1,    -1,    -1,    -1,    37,
      -1,    -1,    -1,    -1,    -1,    -1,   300,    -1,    -1,    -1,
      48,    -1,    -1,    -1,    -1,    -1,    -1,    55,    -1,    -1,
    3432,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3451,
      -1,    -1,    -1,  3455,    82,    -1,    -1,  3459,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3470,    -1,
      -1,    -1,    -1,  3475,    -1,  3477,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2714,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   406,    -1,    -1,    -1,    -1,    -1,    -1,  1748,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3541,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   181,    -1,    -1,    -1,  3559,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   200,    -1,    -1,    -1,    -1,   205,    -1,  1798,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2821,    -1,    -1,    -1,
     228,   229,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   244,  3619,    -1,    -1,
    2845,    -1,    -1,    -1,    -1,    -1,    -1,  3629,    -1,    -1,
      -1,    -1,    -1,   517,    -1,    -1,   520,   521,   522,  3641,
     524,   525,   526,   527,   528,   529,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   283,    -1,    -1,   286,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   300,    -1,    -1,   303,  2901,    -1,  2903,  2621,
    2622,    -1,    -1,    -1,  2909,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  2918,    -1,    -1,  2921,    -1,  2923,    -1,
    3702,    -1,  2927,    -1,    -1,  2930,  2931,    -1,    -1,  2934,
    2935,    -1,     8,    -1,    -1,    11,    -1,  2942,    -1,    15,
      16,    17,    18,    19,    20,    21,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2676,    -1,    -1,    -1,    -1,    -1,
      -1,    37,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    48,    -1,    -1,    -1,    -1,  2982,    -1,    55,
      -1,    -1,  2987,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  3002,   406,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    82,    -1,  2007,  2008,
    2009,  2010,  2011,  2012,    -1,    -1,  2015,  2016,  2017,  2018,
    2019,  2020,  2021,  2022,  2023,  2024,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,     8,    -1,  3040,    11,    -1,    -1,    -1,
      15,    16,    17,    18,    19,    20,    21,    -1,    -1,  3831,
    3832,  3833,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    37,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    48,    -1,    -1,    -1,    -1,    -1,    -1,
      55,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    3882,    -1,    -1,    -1,    -1,   181,    -1,    82,    -1,   517,
      -1,    -1,   520,   521,   522,    -1,   524,   525,   526,   527,
     528,   529,    -1,  2845,   200,    -1,   534,    -1,    -1,   205,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2870,    -1,
      -1,    -1,   228,   229,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  3945,    -1,    -1,    -1,    -1,   244,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3184,
    3185,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2914,  2192,  2193,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  3209,  3210,   181,   283,    -1,    -1,
     286,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   300,   200,    -1,   303,  3233,    -1,
     205,    -1,  3237,    -1,  3239,  3240,  3241,    -1,    -1,  3244,
      -1,    -1,  3247,  3248,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  3256,    -1,   228,   229,    -1,  2978,  2979,  2980,  2981,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   244,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  3282,  3283,  3284,
    3285,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   283,    -1,
      -1,   286,    -1,    -1,    -1,  2314,    -1,    -1,  3040,    -1,
      -1,    -1,    -1,    -1,    -1,   300,    -1,    -1,   303,    -1,
     406,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  3352,    -1,    -1,
      -1,    -1,    -1,  3358,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  3371,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    3405,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   406,    -1,    -1,  3439,    -1,    -1,    -1,    -1,    -1,
      -1,   517,    -1,    -1,   520,   521,   522,    -1,   524,   525,
     526,   527,   528,   529,    -1,    -1,    -1,    -1,   534,    -1,
      -1,    -1,    -1,  3185,    -1,    -1,    -1,  3472,  3473,  3474,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  3497,  3498,  3499,  3500,  3501,  3502,  3503,    -1,
    3505,  3506,    -1,  3508,  3509,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  3518,    -1,  3520,    -1,    -1,    -1,    -1,
      -1,    -1,  3527,  3528,  3529,  3530,  3531,  3532,  3533,  3534,
    3535,  3536,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   517,  3548,    -1,   520,   521,   522,    -1,   524,
     525,   526,   527,   528,   529,  3560,    -1,    -1,    -1,   534,
      -1,    -1,    -1,    -1,    -1,  3287,  3288,  3289,  3290,  3291,
    3292,  3293,    -1,    -1,    -1,  3297,  3298,    -1,    -1,    -1,
    3302,    -1,    -1,  3305,    -1,    -1,  3308,  3309,  3310,  3311,
    3312,  3313,  3314,  3315,  3316,  3317,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  3616,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2621,  2622,    -1,    -1,    -1,    -1,    -1,  3634,
      -1,    -1,     8,    -1,    -1,    11,    -1,    -1,  3643,    15,
      16,    17,    18,    19,    20,    21,  3651,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  3659,  3660,    -1,    -1,    -1,    -1,
      -1,    37,    -1,    -1,    -1,    -1,  3671,  3672,  3673,  3674,
      -1,  3676,    48,    -1,    -1,    -1,    -1,  2676,     8,    55,
      -1,    11,    -1,    -1,    -1,    15,    16,    17,    18,    19,
      20,    21,  3697,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    82,    37,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    48,    -1,
      -1,    -1,    -1,    -1,    -1,    55,    -1,    -1,    -1,    -1,
      -1,  3736,    -1,    -1,    -1,  3457,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    82,    -1,    -1,  3760,    -1,    -1,    -1,    -1,
    3765,    -1,    -1,  3768,  3769,    -1,    -1,    -1,  3773,    -1,
    3775,  3776,    -1,    -1,  3779,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  3505,  3506,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  3800,    -1,    -1,    -1,  3521,
      -1,  3523,    -1,  3525,    -1,   181,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   200,    -1,    -1,    -1,    -1,   205,
      -1,    -1,    -1,    -1,    -1,    -1,  3841,  3842,  3843,    -1,
      -1,  3846,    -1,    -1,  3849,  3850,  2845,    -1,    -1,    -1,
      -1,   181,   228,   229,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   244,    -1,
     200,  2870,    -1,    -1,    -1,   205,    -1,    -1,    -1,    -1,
    3885,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  3897,  3898,  3899,    -1,    -1,    -1,   228,   229,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   283,    -1,    -1,
     286,    -1,    -1,    -1,   244,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   300,    -1,    -1,   303,    -1,  3651,
      -1,    -1,    -1,    -1,    -1,    -1,  3658,    -1,    -1,  3661,
    3662,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3670,    -1,
    3672,  3673,    -1,   283,    -1,  3677,   286,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     300,    -1,    -1,   303,    -1,    -1,    -1,    -1,    -1,  2978,
    2979,  2980,  2981,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     406,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  3040,    -1,    -1,  3766,  3767,    -1,    -1,  3770,    -1,
       8,    -1,  3774,    11,    -1,  3777,  3778,    15,    16,    17,
      18,    19,    20,    21,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   406,    -1,    -1,    37,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      48,    -1,    -1,    -1,    -1,    -1,    -1,    55,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    82,  3847,  3848,    -1,    -1,  3851,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   517,    -1,    -1,   520,   521,   522,    -1,   524,   525,
     526,   527,   528,   529,    -1,    -1,    -1,    -1,   534,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  3185,   517,    -1,    -1,
     520,   521,   522,    -1,   524,   525,   526,   527,   528,   529,
      -1,    -1,    -1,     8,   534,    -1,    11,    -1,    -1,    -1,
      15,    16,    17,    18,    19,    20,    21,    -1,    -1,    -1,
      -1,    -1,    -1,   181,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    37,     8,    -1,    -1,    11,    -1,    -1,    -1,
      15,    16,   200,    48,    19,    20,    21,   205,    -1,    -1,
      55,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    37,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     228,   229,    -1,    48,    -1,    -1,    -1,    82,    -1,    -1,
      55,    -1,    -1,    -1,    -1,    -1,   244,    -1,  3287,  3288,
    3289,  3290,  3291,  3292,  3293,    -1,    -1,    -1,  3297,  3298,
      -1,    -1,    -1,  3302,    -1,    -1,  3305,    82,    -1,  3308,
    3309,  3310,  3311,  3312,  3313,  3314,  3315,  3316,  3317,  3318,
      -1,    -1,    -1,    -1,    -1,   283,    -1,    -1,   286,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   300,    -1,    -1,   303,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   181,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   200,    -1,    -1,    -1,    -1,
     205,    -1,    -1,    -1,    -1,    -1,   181,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   228,   229,   200,    -1,    -1,    -1,    -1,
     205,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   244,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   406,    -1,
      -1,    -1,    -1,   228,   229,    -1,    -1,    -1,  3457,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   244,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   283,    -1,
      -1,   286,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   300,    -1,    -1,   303,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  3505,  3506,   283,    -1,
      -1,   286,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  3521,    -1,  3523,   300,  3525,    -1,   303,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   517,
      -1,    -1,   520,   521,   522,    -1,   524,   525,   526,   527,
     528,   529,    -1,    -1,    -1,    -1,   534,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   406,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   406,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  3651,    -1,    -1,    -1,    -1,    -1,    -1,  3658,
      -1,    -1,  3661,  3662,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  3670,    -1,  3672,  3673,    -1,    -1,    -1,  3677,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   517,    -1,    -1,   520,   521,   522,    -1,   524,
     525,   526,   527,   528,   529,    -1,    -1,    -1,    -1,   534,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   517,    -1,    -1,   520,   521,   522,    -1,   524,
     525,   526,   527,   528,   529,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  3766,  3767,    -1,
      -1,  3770,    -1,    -1,    -1,  3774,    -1,    -1,  3777,  3778,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,     3,     4,     5,     6,     7,     8,     9,
      10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    -1,    32,    33,    34,    -1,    -1,    -1,  3847,  3848,
      40,    41,  3851,    -1,    44,    45,    46,    -1,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
      -1,    61,    62,    63,    64,    65,    66,    67,    68,    69,
      70,    71,    72,    73,    74,    75,    -1,    77,    78,    79,
      80,    81,    -1,    83,    -1,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    -1,    96,    97,    98,    99,
     100,   101,    -1,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
     120,    -1,   122,   123,   124,   125,   126,   127,   128,   129,
     130,   131,   132,   133,   134,    -1,    -1,   137,   138,   139,
     140,   141,   142,   143,    -1,   145,   146,   147,    -1,   149,
     150,   151,    -1,   153,   154,   155,   156,   157,   158,   159,
     160,   161,   162,   163,   164,   165,    -1,   167,   168,   169,
     170,    -1,   172,    -1,   174,   175,   176,   177,   178,   179,
     180,   181,   182,    -1,   184,   185,    -1,    -1,   188,   189,
     190,   191,    -1,   193,   194,   195,   196,   197,   198,   199,
     200,   201,   202,   203,   204,    -1,   206,   207,   208,   209,
     210,   211,   212,    -1,   214,   215,   216,   217,   218,   219,
     220,   221,   222,   223,    -1,   225,    -1,   227,   228,   229,
     230,   231,   232,   233,   234,   235,   236,   237,   238,    -1,
      -1,   241,   242,   243,   244,    -1,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
     280,   281,   282,   283,   284,   285,   286,   287,   288,   289,
     290,   291,   292,   293,   294,    -1,   296,   297,    -1,    -1,
     300,   301,   302,    -1,    -1,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,   323,   324,   325,   326,   327,    -1,   329,
     330,   331,   332,   333,   334,   335,   336,   337,   338,    -1,
     340,   341,   342,   343,   344,   345,   346,   347,    -1,   349,
     350,   351,   352,   353,   354,   355,   356,    -1,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
     370,   371,    -1,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,   386,   387,   388,   389,
     390,   391,   392,   393,    -1,   395,   396,   397,   398,   399,
     400,   401,   402,   403,   404,   405,   406,   407,   408,   409,
     410,    -1,   412,   413,   414,   415,   416,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,   428,    -1,
     430,   431,   432,   433,   434,   435,   436,   437,   438,   439,
      -1,   441,   442,   443,    -1,   445,    -1,   447,   448,   449,
     450,   451,   452,   453,   454,   455,   456,   457,   458,   459,
     460,    -1,    -1,   463,   464,   465,   466,   467,   468,   469,
     470,    -1,   472,   473,   474,   475,   476,   477,   478,    -1,
     480,   481,   482,   483,   484,   485,   486,   487,   488,   489,
     490,    -1,    -1,   493,    -1,   495,   496,   497,   498,   499,
     500,   501,   502,   503,   504,   505,   506,   507,   508,   509,
     510,   511,   512,   513,   514,   515,   516,   517,    -1,   519,
      -1,    -1,    -1,    -1,   524,   525,   526,    -1,    -1,    -1,
      -1,   531,    -1,   533,   534,    -1,    -1,    -1,    -1,   539,
     540,    -1,    -1,    -1,    -1,   545,   546,     3,     4,     5,
       6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    -1,    32,    33,    34,    -1,
      -1,    -1,    -1,    -1,    40,    41,    -1,    -1,    44,    45,
      46,    -1,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    -1,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
      -1,    77,    78,    79,    80,    81,    -1,    83,    -1,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    -1,
      96,    97,    98,    99,   100,   101,    -1,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,   120,    -1,   122,   123,   124,   125,
     126,   127,   128,   129,   130,   131,   132,   133,   134,    -1,
      -1,   137,   138,   139,   140,   141,   142,   143,    -1,   145,
     146,   147,    -1,   149,   150,   151,    -1,   153,   154,   155,
     156,   157,   158,   159,   160,   161,   162,   163,   164,   165,
      -1,   167,   168,   169,   170,    -1,   172,    -1,   174,   175,
     176,   177,   178,   179,   180,   181,   182,    -1,   184,   185,
      -1,    -1,   188,   189,   190,   191,    -1,   193,   194,   195,
     196,   197,   198,   199,   200,   201,   202,   203,   204,    -1,
     206,   207,   208,   209,   210,   211,   212,    -1,   214,   215,
     216,   217,   218,   219,   220,   221,   222,   223,    -1,   225,
      -1,   227,   228,   229,   230,   231,   232,   233,   234,   235,
     236,   237,   238,    -1,    -1,   241,   242,   243,   244,    -1,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
     286,   287,   288,   289,   290,   291,   292,   293,   294,    -1,
     296,   297,    -1,    -1,   300,   301,   302,    -1,    -1,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
     326,   327,    -1,   329,   330,   331,   332,   333,   334,   335,
     336,   337,   338,    -1,   340,   341,   342,   343,   344,   345,
     346,   347,    -1,   349,   350,   351,   352,   353,   354,   355,
     356,    -1,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,    -1,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,   385,
     386,   387,   388,   389,   390,   391,   392,   393,    -1,   395,
     396,   397,   398,   399,   400,   401,   402,   403,   404,   405,
     406,   407,   408,   409,   410,    -1,   412,   413,   414,   415,
     416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,   428,    -1,   430,   431,   432,   433,   434,   435,
     436,   437,   438,   439,    -1,   441,   442,   443,    -1,   445,
      -1,   447,   448,   449,   450,   451,   452,   453,   454,   455,
     456,   457,   458,   459,   460,    -1,    -1,   463,   464,   465,
     466,   467,   468,   469,   470,    -1,   472,   473,   474,   475,
     476,   477,   478,    -1,   480,   481,   482,   483,   484,   485,
     486,   487,   488,   489,   490,    -1,    -1,   493,    -1,   495,
     496,   497,   498,   499,   500,   501,   502,   503,   504,   505,
     506,   507,   508,   509,   510,   511,   512,   513,   514,   515,
     516,   517,    -1,   519,    -1,    -1,    -1,    -1,   524,   525,
     526,    -1,    -1,    -1,    -1,   531,    -1,   533,    -1,    -1,
      -1,    -1,    -1,   539,   540,    -1,    -1,    -1,    -1,   545,
     546,     3,     4,     5,     6,     7,     8,     9,    10,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    -1,
      32,    33,    34,    -1,    -1,    -1,    -1,    -1,    40,    41,
      -1,    -1,    44,    45,    46,    -1,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    58,    59,    -1,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
      72,    73,    74,    75,    -1,    77,    78,    79,    80,    81,
      -1,    83,    -1,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    -1,    96,    97,    98,    99,   100,   101,
      -1,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,   119,   120,    -1,
     122,   123,   124,   125,   126,   127,    -1,    -1,   130,   131,
     132,   133,   134,    -1,    -1,   137,   138,   139,   140,   141,
     142,   143,    -1,   145,   146,   147,    -1,   149,   150,   151,
      -1,   153,   154,   155,   156,   157,   158,   159,   160,   161,
     162,   163,   164,   165,    -1,   167,   168,   169,   170,    -1,
     172,    -1,   174,   175,   176,   177,   178,   179,   180,   181,
     182,    -1,   184,   185,    -1,    -1,   188,   189,   190,   191,
      -1,   193,   194,   195,   196,   197,   198,   199,   200,   201,
     202,   203,   204,    -1,   206,   207,   208,   209,   210,   211,
     212,    -1,   214,   215,   216,   217,   218,   219,   220,   221,
     222,   223,    -1,   225,    -1,   227,   228,   229,   230,   231,
     232,   233,   234,   235,   236,   237,   238,    -1,    -1,   241,
     242,   243,   244,    -1,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     282,   283,   284,   285,   286,   287,   288,   289,   290,   291,
     292,   293,   294,    -1,   296,   297,    -1,    -1,   300,   301,
     302,    -1,    -1,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,   323,   324,   325,   326,   327,    -1,   329,   330,   331,
     332,   333,   334,   335,   336,   337,   338,    -1,   340,   341,
     342,   343,   344,   345,   346,   347,    -1,   349,   350,   351,
     352,   353,   354,   355,   356,    -1,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
      -1,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,   386,   387,   388,   389,   390,   391,
     392,   393,    -1,   395,   396,   397,   398,   399,   400,   401,
     402,   403,   404,    -1,   406,   407,   408,   409,   410,    -1,
     412,   413,   414,   415,   416,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,    -1,    -1,   430,   431,
     432,   433,   434,   435,   436,   437,   438,   439,    -1,   441,
     442,   443,    -1,   445,    -1,   447,   448,   449,   450,   451,
     452,   453,   454,   455,   456,   457,   458,   459,   460,    -1,
      -1,   463,   464,   465,   466,   467,   468,   469,   470,    -1,
     472,   473,   474,   475,   476,   477,   478,    -1,   480,   481,
     482,   483,   484,   485,   486,   487,   488,   489,   490,    -1,
      -1,   493,    -1,   495,   496,   497,   498,   499,   500,   501,
     502,   503,   504,   505,   506,   507,   508,   509,   510,   511,
     512,   513,   514,   515,   516,   517,    -1,   519,    -1,    -1,
      -1,    -1,   524,   525,   526,    -1,    -1,    -1,    -1,   531,
      -1,   533,    -1,    -1,    -1,    -1,    -1,   539,   540,    -1,
      -1,    -1,    -1,   545,   546,     3,     4,     5,     6,     7,
       8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    33,    34,    -1,    -1,    -1,
      38,    -1,    40,    41,    -1,    -1,    44,    45,    46,    -1,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      58,    59,    -1,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    72,    73,    74,    75,    -1,    77,
      78,    79,    80,    81,    -1,    83,    -1,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    -1,    96,    97,
      98,    99,   100,   101,    -1,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,   119,   120,    -1,   122,   123,   124,   125,   126,   127,
      -1,    -1,   130,   131,   132,   133,   134,   135,    -1,   137,
     138,   139,   140,   141,   142,   143,    -1,   145,   146,   147,
      -1,   149,   150,   151,    -1,   153,   154,   155,   156,   157,
     158,   159,   160,   161,   162,   163,   164,   165,    -1,   167,
     168,   169,   170,    -1,   172,    -1,   174,   175,    -1,   177,
     178,   179,   180,   181,   182,    -1,   184,   185,    -1,    -1,
     188,   189,   190,   191,    -1,   193,   194,   195,   196,   197,
     198,   199,   200,   201,   202,   203,   204,    -1,   206,   207,
     208,   209,   210,   211,   212,    -1,   214,   215,   216,   217,
     218,   219,   220,   221,   222,   223,    -1,   225,    -1,   227,
     228,   229,   230,   231,   232,   233,   234,   235,   236,   237,
     238,    -1,    -1,   241,   242,   243,   244,    -1,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
     288,   289,   290,   291,   292,   293,   294,    -1,   296,   297,
      -1,    -1,   300,   301,   302,    -1,    -1,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323,   324,    -1,    -1,    -1,
      -1,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     338,    -1,   340,   341,   342,   343,   344,   345,   346,   347,
      -1,   349,   350,   351,   352,   353,   354,   355,   356,    -1,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,   371,    -1,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,   386,   387,
     388,   389,   390,   391,   392,    -1,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,    -1,   406,   407,
     408,   409,   410,    -1,   412,   413,   414,   415,   416,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
      -1,    -1,   430,   431,    -1,   433,   434,   435,   436,   437,
     438,   439,    -1,   441,   442,   443,    -1,   445,    -1,   447,
     448,   449,   450,   451,   452,   453,   454,   455,   456,   457,
     458,   459,   460,    -1,    -1,   463,   464,   465,    -1,   467,
     468,   469,   470,    -1,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,   483,   484,   485,   486,   487,
     488,   489,   490,    -1,    -1,   493,    -1,    -1,   496,   497,
     498,   499,   500,   501,   502,   503,   504,   505,   506,   507,
     508,   509,   510,   511,   512,   513,   514,   515,   516,   517,
      -1,    -1,    -1,    -1,    -1,    -1,   524,   525,   526,    -1,
      -1,    -1,    -1,   531,    -1,   533,   534,    -1,    -1,    -1,
      -1,   539,   540,    -1,    -1,    -1,    -1,   545,   546,     3,
       4,     5,     6,     7,    -1,     9,    10,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    -1,    32,    33,
      34,    -1,    -1,    -1,    -1,    -1,    40,    41,    -1,    -1,
      44,    45,    46,    -1,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    58,    59,    -1,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
      74,    75,    -1,    77,    78,    79,    80,    81,    -1,    83,
      -1,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    -1,    96,    97,    98,    99,   100,   101,    -1,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,    -1,   120,    -1,   122,   123,
     124,   125,   126,   127,   128,   129,   130,   131,   132,   133,
     134,    -1,    -1,   137,   138,   139,   140,   141,   142,   143,
      -1,   145,   146,   147,    -1,   149,   150,   151,    -1,   153,
     154,   155,   156,   157,   158,   159,   160,   161,   162,   163,
     164,   165,    -1,   167,   168,   169,   170,    -1,   172,    -1,
     174,   175,   176,   177,   178,   179,   180,   181,   182,    -1,
     184,   185,    -1,    -1,   188,   189,   190,   191,    -1,   193,
     194,   195,   196,   197,   198,   199,   200,   201,   202,   203,
     204,    -1,   206,   207,   208,   209,   210,   211,   212,    -1,
     214,   215,   216,   217,   218,   219,   220,   221,   222,   223,
      -1,   225,    -1,   227,   228,   229,   230,   231,   232,   233,
     234,   235,   236,   237,   238,    -1,    -1,   241,   242,   243,
     244,    -1,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,    -1,
     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     294,    -1,   296,   297,    -1,    -1,   300,   301,   302,    -1,
      -1,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   327,    -1,   329,   330,   331,   332,   333,
     334,   335,   336,   337,   338,    -1,   340,   341,   342,   343,
     344,   345,   346,   347,    -1,   349,   350,   351,   352,   353,
     354,   355,   356,    -1,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,   371,    -1,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,   385,   386,   387,   388,   389,   390,   391,   392,   393,
      -1,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,   405,   406,   407,   408,   409,   410,    -1,   412,   413,
     414,   415,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,   428,    -1,   430,   431,   432,   433,
     434,   435,   436,   437,   438,   439,    -1,   441,   442,   443,
      -1,   445,    -1,   447,   448,   449,   450,   451,   452,   453,
     454,   455,   456,   457,   458,   459,   460,    -1,    -1,   463,
     464,   465,   466,   467,   468,   469,   470,    -1,   472,   473,
     474,   475,   476,   477,   478,    -1,   480,   481,   482,   483,
     484,   485,   486,   487,   488,   489,   490,    -1,    -1,   493,
      -1,   495,   496,   497,   498,   499,   500,   501,   502,   503,
     504,   505,   506,   507,   508,   509,   510,   511,   512,   513,
     514,   515,   516,    -1,    -1,   519,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   531,    -1,   533,
      -1,    -1,    -1,    -1,    -1,   539,   540,    -1,    -1,    -1,
      -1,   545,   546,     3,     4,     5,     6,     7,     8,     9,
      10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    -1,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,
      40,    41,    -1,    -1,    44,    45,    46,    -1,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
      70,    71,    72,    73,    74,    75,    -1,    77,    78,    79,
      80,    81,    -1,    83,    -1,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    -1,    96,    97,    98,    99,
     100,   101,    -1,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
     120,    -1,   122,   123,   124,   125,   126,   127,    -1,    -1,
     130,   131,   132,   133,   134,    -1,    -1,   137,   138,   139,
     140,   141,   142,   143,    -1,   145,   146,   147,    -1,   149,
     150,   151,    -1,   153,   154,   155,   156,   157,   158,   159,
     160,   161,   162,   163,   164,   165,    -1,   167,   168,   169,
     170,    -1,   172,    -1,   174,   175,   176,   177,   178,   179,
     180,   181,   182,    -1,   184,   185,    -1,    -1,   188,   189,
     190,   191,    -1,   193,   194,   195,   196,   197,   198,   199,
     200,   201,   202,   203,   204,    -1,   206,   207,   208,   209,
     210,   211,   212,    -1,   214,   215,   216,   217,   218,   219,
     220,   221,   222,   223,    -1,   225,    -1,   227,   228,   229,
     230,   231,   232,   233,   234,   235,   236,   237,   238,    -1,
     240,   241,   242,   243,   244,    -1,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
     280,   281,   282,   283,   284,   285,   286,   287,   288,   289,
     290,   291,   292,   293,   294,    -1,   296,   297,    -1,    -1,
     300,   301,   302,    -1,    -1,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,   323,   324,    -1,    -1,    -1,    -1,   329,
     330,   331,   332,   333,   334,   335,   336,   337,   338,    -1,
     340,   341,   342,   343,   344,   345,   346,   347,    -1,   349,
     350,   351,   352,   353,   354,   355,   356,    -1,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
     370,   371,    -1,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,   386,   387,   388,   389,
     390,   391,   392,    -1,    -1,   395,   396,   397,   398,   399,
     400,   401,   402,   403,   404,    -1,   406,   407,   408,   409,
     410,    -1,   412,   413,   414,   415,   416,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,    -1,    -1,
     430,   431,    -1,   433,   434,   435,   436,   437,   438,   439,
      -1,   441,   442,   443,    -1,   445,   446,   447,   448,   449,
     450,   451,   452,   453,   454,   455,   456,   457,   458,   459,
     460,    -1,    -1,   463,   464,   465,    -1,   467,   468,   469,
     470,    -1,   472,   473,   474,   475,   476,   477,   478,    -1,
     480,   481,   482,   483,   484,   485,   486,   487,   488,   489,
     490,    -1,    -1,   493,    -1,    -1,   496,   497,   498,   499,
     500,   501,   502,   503,   504,   505,   506,   507,   508,   509,
     510,   511,   512,   513,   514,   515,   516,   517,    -1,    -1,
      -1,    -1,    -1,    -1,   524,   525,   526,    -1,    -1,    -1,
      -1,   531,    -1,   533,    -1,    -1,    -1,    -1,    -1,   539,
     540,    -1,    -1,    -1,    -1,   545,   546,     3,     4,     5,
       6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    -1,    32,    33,    34,    -1,
      -1,    -1,    38,    -1,    40,    41,    -1,    -1,    44,    45,
      46,    -1,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    -1,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
      -1,    77,    78,    79,    80,    81,    -1,    83,    -1,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    -1,
      96,    97,    98,    99,   100,   101,    -1,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,   120,    -1,   122,   123,   124,   125,
     126,   127,    -1,    -1,   130,   131,   132,   133,   134,    -1,
      -1,   137,   138,   139,   140,   141,   142,   143,    -1,   145,
     146,   147,    -1,   149,   150,   151,    -1,   153,   154,   155,
     156,   157,   158,   159,   160,   161,   162,   163,   164,   165,
      -1,   167,   168,   169,   170,    -1,   172,    -1,   174,   175,
      -1,   177,   178,   179,   180,   181,   182,    -1,   184,   185,
      -1,    -1,   188,   189,   190,   191,    -1,   193,   194,   195,
     196,   197,   198,   199,   200,   201,   202,   203,   204,    -1,
     206,   207,   208,   209,   210,   211,   212,    -1,   214,   215,
     216,   217,   218,   219,   220,   221,   222,   223,    -1,   225,
      -1,   227,   228,   229,   230,   231,   232,   233,   234,   235,
     236,   237,   238,    -1,    -1,   241,   242,   243,   244,    -1,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
     286,   287,   288,   289,   290,   291,   292,   293,   294,    -1,
     296,   297,    -1,    -1,   300,   301,   302,    -1,    -1,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,   323,   324,    -1,
      -1,    -1,    -1,   329,   330,   331,   332,   333,   334,   335,
     336,   337,   338,    -1,   340,   341,   342,   343,   344,   345,
     346,   347,    -1,   349,   350,   351,   352,   353,   354,   355,
     356,    -1,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,    -1,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,   385,
     386,   387,   388,   389,   390,   391,   392,    -1,   394,   395,
     396,   397,   398,   399,   400,   401,   402,   403,   404,    -1,
     406,   407,   408,   409,   410,    -1,   412,   413,   414,   415,
     416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,    -1,    -1,   430,   431,    -1,   433,   434,   435,
     436,   437,   438,   439,    -1,   441,   442,   443,    -1,   445,
      -1,   447,   448,   449,   450,   451,   452,   453,   454,   455,
     456,   457,   458,   459,   460,    -1,    -1,   463,   464,   465,
      -1,   467,   468,   469,   470,    -1,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   482,   483,   484,   485,
     486,   487,   488,   489,   490,    -1,    -1,   493,    -1,    -1,
     496,   497,   498,   499,   500,   501,   502,   503,   504,   505,
     506,   507,   508,   509,   510,   511,   512,   513,   514,   515,
     516,   517,    -1,    -1,    -1,    -1,    -1,    -1,   524,   525,
     526,    -1,    -1,    -1,    -1,   531,    -1,   533,    -1,    -1,
      -1,    -1,    -1,   539,   540,    -1,    -1,    -1,    -1,   545,
     546,     3,     4,     5,     6,     7,     8,     9,    10,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    -1,
      32,    33,    34,    -1,    -1,    -1,    38,    -1,    40,    41,
      -1,    -1,    44,    45,    46,    -1,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    58,    59,    -1,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
      72,    73,    74,    75,    -1,    77,    78,    79,    80,    81,
      -1,    83,    -1,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    -1,    96,    97,    98,    99,   100,   101,
      -1,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,   119,   120,    -1,
     122,   123,   124,   125,   126,   127,    -1,    -1,   130,   131,
     132,   133,   134,    -1,    -1,   137,   138,   139,   140,   141,
     142,   143,    -1,   145,   146,   147,    -1,   149,   150,   151,
      -1,   153,   154,   155,   156,   157,   158,   159,   160,   161,
     162,   163,   164,   165,    -1,   167,   168,   169,   170,    -1,
     172,    -1,   174,   175,    -1,   177,   178,   179,   180,   181,
     182,    -1,   184,   185,    -1,    -1,   188,   189,   190,   191,
      -1,   193,   194,   195,   196,   197,   198,   199,   200,   201,
     202,   203,   204,    -1,   206,   207,   208,   209,   210,   211,
     212,    -1,   214,   215,   216,   217,   218,   219,   220,   221,
     222,   223,    -1,   225,    -1,   227,   228,   229,   230,   231,
     232,   233,   234,   235,   236,   237,   238,    -1,    -1,   241,
     242,   243,   244,    -1,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     282,   283,   284,   285,   286,   287,   288,   289,   290,   291,
     292,   293,   294,    -1,   296,   297,    -1,    -1,   300,   301,
     302,    -1,    -1,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,   323,   324,    -1,    -1,    -1,    -1,   329,   330,   331,
     332,   333,   334,   335,   336,   337,   338,    -1,   340,   341,
     342,   343,   344,   345,   346,   347,    -1,   349,   350,   351,
     352,   353,   354,   355,   356,    -1,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
      -1,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,   386,   387,   388,   389,   390,   391,
     392,    -1,   394,   395,   396,   397,   398,   399,   400,   401,
     402,   403,   404,    -1,   406,   407,   408,   409,   410,    -1,
     412,   413,   414,   415,   416,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,    -1,    -1,   430,   431,
      -1,   433,   434,   435,   436,   437,   438,   439,    -1,   441,
     442,   443,    -1,   445,    -1,   447,   448,   449,   450,   451,
     452,   453,   454,   455,   456,   457,   458,   459,   460,    -1,
      -1,   463,   464,   465,    -1,   467,   468,   469,   470,    -1,
     472,   473,   474,   475,   476,   477,   478,    -1,   480,   481,
     482,   483,   484,   485,   486,   487,   488,   489,   490,    -1,
      -1,   493,    -1,    -1,   496,   497,   498,   499,   500,   501,
     502,   503,   504,   505,   506,   507,   508,   509,   510,   511,
     512,   513,   514,   515,   516,   517,    -1,    -1,    -1,    -1,
      -1,    -1,   524,   525,   526,    -1,    -1,    -1,    -1,   531,
      -1,   533,   534,    -1,    -1,    -1,    -1,   539,   540,    -1,
      -1,    -1,    -1,   545,   546,     3,     4,     5,     6,     7,
       8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    33,    34,    -1,    -1,    -1,
      -1,    39,    40,    41,    -1,    -1,    44,    45,    46,    -1,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      58,    59,    -1,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    72,    73,    74,    75,    -1,    77,
      78,    79,    80,    81,    -1,    83,    -1,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    -1,    96,    97,
      98,    99,   100,   101,    -1,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,   119,   120,    -1,   122,   123,   124,   125,   126,   127,
      -1,    -1,   130,   131,   132,   133,   134,    -1,    -1,   137,
     138,   139,   140,   141,   142,   143,    -1,   145,   146,   147,
      -1,   149,   150,   151,    -1,   153,   154,   155,   156,   157,
     158,   159,   160,   161,   162,   163,   164,   165,    -1,   167,
     168,   169,   170,    -1,   172,    -1,   174,   175,    -1,   177,
     178,   179,   180,   181,   182,    -1,   184,   185,    -1,    -1,
     188,   189,   190,   191,    -1,   193,   194,   195,   196,   197,
     198,   199,   200,   201,   202,   203,   204,    -1,   206,   207,
     208,   209,   210,   211,   212,    -1,   214,   215,   216,   217,
     218,   219,   220,   221,   222,   223,    -1,   225,    -1,   227,
     228,   229,   230,   231,   232,   233,   234,   235,   236,   237,
     238,    -1,    -1,   241,   242,   243,   244,    -1,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
     288,   289,   290,   291,   292,   293,   294,    -1,   296,   297,
      -1,    -1,   300,   301,   302,    -1,    -1,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323,   324,    -1,    -1,    -1,
      -1,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     338,    -1,   340,   341,   342,   343,   344,   345,   346,   347,
      -1,   349,   350,   351,   352,   353,   354,   355,   356,    -1,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,   371,    -1,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,   386,   387,
     388,   389,   390,   391,   392,    -1,    -1,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,    -1,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
      -1,    -1,   430,   431,    -1,   433,   434,   435,   436,   437,
     438,   439,    -1,   441,   442,   443,    -1,   445,    -1,   447,
     448,   449,   450,   451,   452,   453,   454,   455,   456,   457,
     458,   459,   460,    -1,    -1,   463,   464,   465,    -1,   467,
     468,   469,   470,    -1,   472,   473,   474,   475,   476,   477,
     478,    -1,   480,   481,   482,   483,   484,   485,   486,   487,
     488,   489,   490,    -1,    -1,   493,    -1,    -1,   496,   497,
     498,   499,   500,   501,   502,   503,   504,   505,   506,   507,
     508,   509,   510,   511,   512,   513,   514,   515,   516,   517,
      -1,    -1,    -1,    -1,    -1,    -1,   524,   525,   526,    -1,
      -1,    -1,    -1,   531,    -1,   533,    -1,    -1,    -1,    -1,
      -1,   539,   540,    -1,    -1,    -1,    -1,   545,   546,     3,
       4,     5,     6,     7,     8,     9,    10,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    -1,    32,    33,
      34,    -1,    -1,    -1,    38,    -1,    40,    41,    -1,    -1,
      44,    45,    46,    -1,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    58,    59,    -1,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
      74,    75,    -1,    77,    78,    79,    80,    81,    -1,    83,
      -1,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    -1,    96,    97,    98,    99,   100,   101,    -1,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,    -1,   122,   123,
     124,   125,   126,   127,    -1,    -1,   130,   131,   132,   133,
     134,    -1,    -1,   137,   138,   139,   140,   141,   142,   143,
      -1,   145,   146,   147,    -1,   149,   150,   151,    -1,   153,
     154,   155,   156,   157,   158,   159,   160,   161,   162,   163,
     164,   165,    -1,   167,   168,   169,   170,    -1,   172,    -1,
     174,   175,    -1,   177,   178,   179,   180,   181,   182,    -1,
     184,   185,    -1,    -1,   188,   189,   190,   191,    -1,   193,
     194,   195,   196,   197,   198,   199,   200,   201,   202,   203,
     204,    -1,   206,   207,   208,   209,   210,   211,   212,    -1,
     214,   215,   216,   217,   218,   219,   220,   221,   222,   223,
      -1,   225,    -1,   227,   228,   229,   230,   231,   232,   233,
     234,   235,   236,   237,   238,    -1,    -1,   241,   242,   243,
     244,    -1,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     294,    -1,   296,   297,    -1,    -1,   300,   301,   302,    -1,
      -1,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,    -1,    -1,    -1,    -1,   329,   330,   331,   332,   333,
     334,   335,   336,   337,   338,    -1,   340,   341,   342,   343,
     344,   345,   346,   347,    -1,   349,   350,   351,   352,   353,
     354,   355,   356,    -1,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,   371,    -1,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,   385,   386,   387,   388,   389,   390,   391,   392,    -1,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,    -1,   406,   407,   408,   409,   410,    -1,   412,   413,
     414,   415,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,    -1,    -1,   430,   431,    -1,   433,
     434,   435,   436,   437,   438,   439,    -1,   441,   442,   443,
      -1,   445,    -1,   447,   448,   449,   450,   451,   452,   453,
     454,   455,   456,   457,   458,   459,   460,    -1,    -1,   463,
     464,   465,    -1,   467,   468,   469,   470,    -1,   472,   473,
     474,   475,   476,   477,   478,    -1,   480,   481,   482,   483,
     484,   485,   486,   487,   488,   489,   490,    -1,    -1,   493,
      -1,    -1,   496,   497,   498,   499,   500,   501,   502,   503,
     504,   505,   506,   507,   508,   509,   510,   511,   512,   513,
     514,   515,   516,   517,    -1,    -1,    -1,    -1,    -1,    -1,
     524,   525,   526,    -1,    -1,    -1,    -1,   531,    -1,   533,
     534,    -1,    -1,    -1,    -1,   539,   540,    -1,    -1,    -1,
      -1,   545,   546,     3,     4,     5,     6,     7,     8,     9,
      10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    -1,    32,    33,    34,    -1,    -1,    -1,    38,    -1,
      40,    41,    -1,    -1,    44,    45,    46,    -1,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
      -1,    61,    62,    63,    64,    65,    66,    67,    68,    69,
      70,    71,    72,    73,    74,    75,    -1,    77,    78,    79,
      80,    81,    -1,    83,    -1,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    -1,    96,    97,    98,    99,
     100,   101,    -1,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
     120,    -1,   122,   123,   124,   125,   126,   127,    -1,    -1,
     130,   131,   132,   133,   134,    -1,    -1,   137,   138,   139,
     140,   141,   142,   143,    -1,   145,   146,   147,    -1,   149,
     150,   151,    -1,   153,   154,   155,   156,   157,   158,   159,
     160,   161,   162,   163,   164,   165,    -1,   167,   168,   169,
     170,    -1,   172,    -1,   174,   175,    -1,   177,   178,   179,
     180,   181,   182,    -1,   184,   185,    -1,    -1,   188,   189,
     190,   191,    -1,   193,   194,   195,   196,   197,   198,   199,
     200,   201,   202,   203,   204,    -1,   206,   207,   208,   209,
     210,   211,   212,    -1,   214,   215,   216,   217,   218,   219,
     220,   221,   222,   223,    -1,   225,    -1,   227,   228,   229,
     230,   231,   232,   233,   234,   235,   236,   237,   238,    -1,
      -1,   241,   242,   243,   244,    -1,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
     280,   281,   282,   283,   284,   285,   286,   287,   288,   289,
     290,   291,   292,   293,   294,    -1,   296,   297,    -1,    -1,
     300,   301,   302,    -1,    -1,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,   323,   324,    -1,    -1,    -1,    -1,   329,
     330,   331,   332,   333,   334,   335,   336,   337,   338,    -1,
     340,   341,   342,   343,   344,   345,   346,   347,    -1,   349,
     350,   351,   352,   353,   354,   355,   356,    -1,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
     370,   371,    -1,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,   386,   387,   388,   389,
     390,   391,   392,    -1,   394,   395,   396,   397,   398,   399,
     400,   401,   402,   403,   404,    -1,   406,   407,   408,   409,
     410,    -1,   412,   413,   414,   415,   416,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,    -1,    -1,
     430,   431,    -1,   433,   434,   435,   436,   437,   438,   439,
      -1,   441,   442,   443,    -1,   445,    -1,   447,   448,   449,
     450,   451,   452,   453,   454,   455,   456,   457,   458,   459,
     460,    -1,    -1,   463,   464,   465,    -1,   467,   468,   469,
     470,    -1,   472,   473,   474,   475,   476,   477,   478,    -1,
     480,   481,   482,   483,   484,   485,   486,   487,   488,   489,
     490,    -1,    -1,   493,    -1,    -1,   496,   497,   498,   499,
     500,   501,   502,   503,   504,   505,   506,   507,   508,   509,
     510,   511,   512,   513,   514,   515,   516,   517,    -1,    -1,
      -1,    -1,    -1,    -1,   524,   525,   526,    -1,    -1,    -1,
      -1,   531,    -1,   533,    -1,    -1,    -1,    -1,    -1,   539,
     540,    -1,    -1,    -1,    -1,   545,   546,     3,     4,     5,
       6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    34,    -1,
      -1,    -1,    -1,    -1,    40,    41,    -1,    -1,    44,    45,
      46,    -1,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    -1,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
      -1,    77,    78,    79,    80,    81,    -1,    83,    -1,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    -1,
      96,    97,    98,    99,   100,   101,    -1,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,   120,    -1,   122,   123,   124,   125,
     126,   127,    -1,    -1,   130,   131,   132,   133,   134,    -1,
      -1,   137,   138,   139,   140,   141,   142,   143,    -1,   145,
     146,   147,    -1,   149,   150,   151,    -1,   153,   154,   155,
     156,   157,   158,   159,   160,   161,   162,   163,   164,   165,
      -1,   167,   168,   169,   170,    -1,   172,    -1,   174,   175,
      -1,   177,   178,   179,   180,   181,   182,    -1,   184,   185,
      -1,    -1,   188,   189,   190,   191,    -1,   193,   194,   195,
     196,   197,   198,   199,   200,   201,   202,   203,   204,    -1,
     206,   207,   208,   209,   210,   211,   212,    -1,   214,   215,
     216,   217,   218,   219,   220,   221,   222,   223,    -1,   225,
      -1,   227,   228,   229,   230,   231,   232,   233,   234,   235,
     236,   237,   238,    -1,    -1,   241,   242,   243,   244,    -1,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
     286,   287,   288,   289,   290,   291,   292,   293,   294,    -1,
     296,   297,    -1,    -1,   300,   301,   302,    -1,    -1,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,   323,   324,    -1,
      -1,    -1,    -1,   329,   330,   331,   332,   333,   334,   335,
     336,   337,   338,    -1,   340,   341,   342,   343,   344,   345,
     346,   347,    -1,   349,   350,   351,   352,   353,   354,   355,
     356,    -1,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,    -1,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,   385,
     386,   387,   388,   389,   390,   391,   392,    -1,    -1,   395,
     396,   397,   398,   399,   400,   401,   402,   403,   404,    -1,
     406,   407,   408,   409,   410,    -1,   412,   413,   414,   415,
     416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,    -1,    -1,   430,   431,    -1,   433,   434,   435,
     436,   437,   438,   439,    -1,   441,   442,   443,    -1,   445,
      -1,   447,   448,   449,   450,   451,   452,   453,   454,   455,
     456,   457,   458,   459,   460,    -1,    -1,   463,   464,   465,
      -1,   467,   468,   469,   470,    -1,   472,   473,   474,   475,
     476,   477,   478,    -1,   480,   481,   482,   483,   484,   485,
     486,   487,   488,   489,   490,    -1,    -1,   493,    -1,    -1,
     496,   497,   498,   499,   500,   501,   502,   503,   504,   505,
     506,   507,   508,   509,   510,   511,   512,   513,   514,   515,
     516,   517,    -1,    -1,    -1,    -1,    -1,    -1,   524,   525,
     526,    -1,    -1,    -1,    -1,   531,    -1,   533,    -1,    -1,
      -1,    -1,    -1,   539,   540,    -1,    -1,    -1,    -1,   545,
     546,     3,     4,     5,     6,     7,     8,     9,    10,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
      32,    33,    34,    -1,    -1,    -1,    -1,    -1,    40,    41,
      -1,    -1,    44,    45,    46,    -1,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    58,    59,    -1,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
      72,    73,    74,    75,    -1,    77,    78,    79,    80,    81,
      -1,    83,    -1,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    -1,    96,    97,    98,    99,   100,   101,
      -1,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,   119,   120,    -1,
     122,   123,   124,   125,   126,   127,    -1,    -1,   130,   131,
     132,   133,   134,    -1,    -1,   137,   138,   139,   140,   141,
     142,   143,    -1,   145,   146,   147,    -1,   149,   150,   151,
      -1,   153,   154,   155,   156,   157,   158,   159,   160,   161,
     162,   163,   164,   165,    -1,   167,   168,   169,   170,    -1,
     172,    -1,   174,   175,    -1,   177,   178,   179,   180,   181,
     182,    -1,   184,   185,    -1,    -1,   188,   189,   190,   191,
      -1,   193,   194,   195,   196,   197,   198,   199,   200,   201,
     202,   203,   204,    -1,   206,   207,   208,   209,   210,   211,
     212,    -1,   214,   215,   216,   217,   218,   219,   220,   221,
     222,   223,    -1,   225,    -1,   227,   228,   229,   230,   231,
     232,   233,   234,   235,   236,   237,   238,    -1,    -1,   241,
     242,   243,   244,    -1,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     282,   283,   284,   285,   286,   287,   288,   289,   290,   291,
     292,   293,   294,    -1,   296,   297,    -1,    -1,   300,   301,
     302,    -1,    -1,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,   323,   324,    -1,    -1,    -1,    -1,   329,   330,   331,
     332,   333,   334,   335,   336,   337,   338,    -1,   340,   341,
     342,   343,   344,   345,   346,   347,    -1,   349,   350,   351,
     352,   353,   354,   355,   356,    -1,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
      -1,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,   386,   387,   388,   389,   390,   391,
     392,    -1,    -1,   395,   396,   397,   398,   399,   400,   401,
     402,   403,   404,    -1,   406,   407,   408,   409,   410,    -1,
     412,   413,   414,   415,   416,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,    -1,    -1,   430,   431,
      -1,   433,   434,   435,   436,   437,   438,   439,    -1,   441,
     442,   443,    -1,   445,    -1,   447,   448,   449,   450,   451,
     452,   453,   454,   455,   456,   457,   458,   459,   460,    -1,
      -1,   463,   464,   465,    -1,   467,   468,   469,   470,    -1,
     472,   473,   474,   475,   476,   477,   478,    -1,   480,   481,
     482,   483,   484,   485,   486,   487,   488,   489,   490,    -1,
      -1,   493,    -1,    -1,   496,   497,   498,   499,   500,   501,
     502,   503,   504,   505,   506,   507,   508,   509,   510,   511,
     512,   513,   514,   515,   516,   517,    -1,    -1,    -1,    -1,
      -1,    -1,   524,   525,   526,    -1,    -1,    -1,    -1,   531,
      -1,   533,    -1,    -1,    -1,    -1,    -1,   539,   540,    -1,
      -1,    -1,    -1,   545,   546,     3,     4,     5,     6,     7,
       8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    -1,    32,    33,    34,    -1,    -1,    -1,
      -1,    -1,    40,    41,    -1,    -1,    44,    45,    46,    -1,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      58,    59,    -1,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    72,    73,    74,    75,    -1,    77,
      78,    79,    80,    81,    -1,    83,    -1,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    -1,    96,    97,
      98,    99,   100,   101,    -1,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,   119,   120,    -1,   122,   123,   124,   125,   126,   127,
      -1,    -1,   130,   131,   132,   133,   134,    -1,    -1,   137,
     138,   139,   140,   141,   142,   143,    -1,   145,   146,   147,
      -1,   149,   150,   151,    -1,   153,   154,   155,   156,   157,
     158,   159,   160,   161,   162,   163,   164,   165,    -1,   167,
     168,   169,   170,    -1,   172,    -1,   174,   175,   176,   177,
     178,   179,   180,   181,   182,    -1,   184,   185,    -1,    -1,
     188,   189,   190,   191,    -1,   193,   194,   195,   196,   197,
     198,   199,   200,   201,   202,   203,   204,    -1,   206,   207,
     208,   209,   210,   211,   212,    -1,   214,   215,   216,   217,
     218,   219,   220,   221,   222,   223,    -1,   225,    -1,   227,
     228,   229,   230,   231,   232,   233,   234,   235,   236,   237,
     238,    -1,    -1,   241,   242,   243,   244,    -1,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
     288,   289,   290,   291,   292,   293,   294,    -1,   296,   297,
      -1,    -1,   300,   301,   302,    -1,    -1,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323,   324,    -1,    -1,    -1,
      -1,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     338,    -1,   340,   341,   342,   343,   344,   345,   346,   347,
      -1,   349,   350,   351,   352,   353,   354,   355,   356,    -1,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,   371,    -1,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,   386,   387,
     388,   389,   390,   391,   392,    -1,    -1,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,    -1,   406,   407,
     408,   409,   410,    -1,   412,   413,   414,   415,   416,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
      -1,    -1,   430,   431,    -1,   433,   434,   435,   436,   437,
     438,   439,    -1,   441,   442,   443,    -1,   445,    -1,   447,
     448,   449,   450,   451,   452,   453,   454,   455,   456,   457,
     458,   459,   460,    -1,    -1,   463,   464,   465,    -1,   467,
     468,   469,   470,    -1,   472,   473,   474,   475,   476,   477,
     478,    -1,   480,   481,   482,   483,   484,   485,   486,   487,
     488,   489,   490,    -1,    -1,   493,    -1,    -1,   496,   497,
     498,   499,   500,   501,   502,   503,   504,   505,   506,   507,
     508,   509,   510,   511,   512,   513,   514,   515,   516,   517,
      -1,    -1,    -1,    -1,    -1,    -1,   524,   525,   526,    -1,
      -1,    -1,    -1,   531,    -1,   533,    -1,    -1,    -1,    -1,
      -1,   539,   540,    -1,    -1,    -1,    -1,   545,   546,     3,
       4,     5,     6,     7,     8,     9,    10,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    -1,    32,    33,
      34,    -1,    -1,    -1,    -1,    -1,    40,    41,    -1,    -1,
      44,    45,    46,    -1,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    58,    59,    -1,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
      74,    75,    -1,    77,    78,    79,    80,    81,    -1,    83,
      -1,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    -1,    96,    97,    98,    99,   100,   101,    -1,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,    -1,   122,   123,
     124,   125,   126,   127,    -1,    -1,   130,   131,   132,   133,
     134,    -1,    -1,   137,   138,   139,   140,   141,   142,   143,
      -1,   145,   146,   147,    -1,   149,   150,   151,    -1,   153,
     154,   155,   156,   157,   158,   159,   160,   161,   162,   163,
     164,   165,    -1,   167,   168,   169,   170,    -1,   172,    -1,
     174,   175,    -1,   177,   178,   179,   180,   181,   182,    -1,
     184,   185,    -1,    -1,   188,   189,   190,   191,    -1,   193,
     194,   195,   196,   197,   198,   199,   200,   201,   202,   203,
     204,    -1,   206,   207,   208,   209,   210,   211,   212,    -1,
     214,   215,   216,   217,   218,   219,   220,   221,   222,   223,
      -1,   225,    -1,   227,   228,   229,   230,   231,   232,   233,
     234,   235,   236,   237,   238,    -1,    -1,   241,   242,   243,
     244,    -1,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     294,    -1,   296,   297,    -1,    -1,   300,   301,   302,    -1,
      -1,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,    -1,    -1,    -1,    -1,   329,   330,   331,   332,   333,
     334,   335,   336,   337,   338,    -1,   340,   341,   342,   343,
     344,   345,   346,   347,    -1,   349,   350,   351,   352,   353,
     354,   355,   356,    -1,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,   371,    -1,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,   385,   386,   387,   388,   389,   390,   391,   392,    -1,
      -1,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,    -1,   406,   407,   408,   409,   410,    -1,   412,   413,
     414,   415,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,    -1,    -1,   430,   431,    -1,   433,
     434,   435,   436,   437,   438,   439,    -1,   441,   442,   443,
      -1,   445,    -1,   447,   448,   449,   450,   451,   452,   453,
     454,   455,   456,   457,   458,   459,   460,    -1,    -1,   463,
     464,   465,    -1,   467,   468,   469,   470,    -1,   472,   473,
     474,   475,   476,   477,   478,    -1,   480,   481,   482,   483,
     484,   485,   486,   487,   488,   489,   490,    -1,    -1,   493,
      -1,    -1,   496,   497,   498,   499,   500,   501,   502,   503,
     504,   505,   506,   507,   508,   509,   510,   511,   512,   513,
     514,   515,   516,   517,    -1,    -1,    -1,    -1,    -1,    -1,
     524,   525,   526,    -1,    -1,    -1,    -1,   531,    -1,   533,
     534,    -1,    -1,    -1,    -1,   539,   540,    -1,    -1,    -1,
      -1,   545,   546,     3,     4,     5,     6,     7,     8,     9,
      10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    -1,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,
      40,    41,    -1,    -1,    44,    45,    46,    -1,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
      -1,    61,    62,    63,    64,    65,    66,    67,    68,    69,
      70,    71,    72,    73,    74,    75,    -1,    77,    78,    79,
      80,    81,    -1,    83,    -1,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    -1,    96,    97,    98,    99,
     100,   101,    -1,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
     120,    -1,   122,   123,   124,   125,   126,   127,    -1,    -1,
     130,   131,   132,   133,   134,    -1,    -1,   137,   138,   139,
     140,   141,   142,   143,    -1,   145,   146,   147,    -1,   149,
     150,   151,    -1,   153,   154,   155,   156,   157,   158,   159,
     160,   161,   162,   163,   164,   165,    -1,   167,   168,   169,
     170,    -1,   172,    -1,   174,   175,    -1,   177,   178,   179,
     180,   181,   182,    -1,   184,   185,    -1,    -1,   188,   189,
     190,   191,    -1,   193,   194,   195,   196,   197,   198,   199,
     200,   201,   202,   203,   204,    -1,   206,   207,   208,   209,
     210,   211,   212,    -1,   214,   215,   216,   217,   218,   219,
     220,   221,   222,   223,    -1,   225,    -1,   227,   228,   229,
     230,   231,   232,   233,   234,   235,   236,   237,   238,    -1,
      -1,   241,   242,   243,   244,    -1,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
     280,   281,   282,   283,   284,   285,   286,   287,   288,   289,
     290,   291,   292,   293,   294,    -1,   296,   297,    -1,    -1,
     300,   301,   302,    -1,    -1,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,   323,   324,    -1,    -1,    -1,    -1,   329,
     330,   331,   332,   333,   334,   335,   336,   337,   338,    -1,
     340,   341,   342,   343,   344,   345,   346,   347,    -1,   349,
     350,   351,   352,   353,   354,   355,   356,    -1,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
     370,   371,    -1,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,   386,   387,   388,   389,
     390,   391,   392,    -1,    -1,   395,   396,   397,   398,   399,
     400,   401,   402,   403,   404,    -1,   406,   407,   408,   409,
     410,    -1,   412,   413,   414,   415,   416,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,    -1,    -1,
     430,   431,    -1,   433,   434,   435,   436,   437,   438,   439,
      -1,   441,   442,   443,    -1,   445,    -1,   447,   448,   449,
     450,   451,   452,   453,   454,   455,   456,   457,   458,   459,
     460,    -1,    -1,   463,   464,   465,    -1,   467,   468,   469,
     470,    -1,   472,   473,   474,   475,   476,   477,   478,    -1,
     480,   481,   482,   483,   484,   485,   486,   487,   488,   489,
     490,    -1,    -1,   493,    -1,    -1,   496,   497,   498,   499,
     500,   501,   502,   503,   504,   505,   506,   507,   508,   509,
     510,   511,   512,   513,   514,   515,   516,   517,    -1,    -1,
      -1,    -1,    -1,    -1,   524,   525,   526,    -1,    -1,    -1,
      -1,   531,    -1,   533,    -1,    -1,    -1,    -1,    -1,   539,
     540,    -1,    -1,    -1,   544,   545,   546,     3,     4,     5,
       6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    -1,    32,    33,    34,    -1,
      -1,    -1,    -1,    -1,    40,    41,    -1,    -1,    44,    45,
      46,    -1,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    -1,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
      -1,    77,    78,    79,    80,    81,    -1,    83,    -1,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    -1,
      96,    97,    98,    99,   100,   101,    -1,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,   120,    -1,   122,   123,   124,   125,
     126,   127,    -1,    -1,   130,   131,   132,   133,   134,    -1,
      -1,   137,   138,   139,   140,   141,   142,   143,    -1,   145,
     146,   147,    -1,   149,   150,   151,    -1,   153,   154,   155,
     156,   157,   158,   159,   160,   161,   162,   163,   164,   165,
      -1,   167,   168,   169,   170,    -1,   172,    -1,   174,   175,
      -1,   177,   178,   179,   180,   181,   182,    -1,   184,   185,
      -1,    -1,   188,   189,   190,   191,    -1,   193,   194,   195,
     196,   197,   198,   199,   200,   201,   202,   203,   204,    -1,
     206,   207,   208,   209,   210,   211,   212,    -1,   214,   215,
     216,   217,   218,   219,   220,   221,   222,   223,    -1,   225,
      -1,   227,   228,   229,   230,   231,   232,   233,   234,   235,
     236,   237,   238,    -1,    -1,   241,   242,   243,   244,    -1,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
     286,   287,   288,   289,   290,   291,   292,   293,   294,    -1,
     296,   297,    -1,    -1,   300,   301,   302,    -1,    -1,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,   323,   324,    -1,
      -1,    -1,    -1,   329,   330,   331,   332,   333,   334,   335,
     336,   337,   338,    -1,   340,   341,   342,   343,   344,   345,
     346,   347,    -1,   349,   350,   351,   352,   353,   354,   355,
     356,    -1,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,    -1,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,   385,
     386,   387,   388,   389,   390,   391,   392,    -1,    -1,   395,
     396,   397,   398,   399,   400,   401,   402,   403,   404,    -1,
     406,   407,   408,   409,   410,    -1,   412,   413,   414,   415,
     416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,    -1,    -1,   430,   431,   432,   433,   434,   435,
     436,   437,   438,   439,    -1,   441,   442,   443,    -1,   445,
      -1,   447,   448,   449,   450,   451,   452,   453,   454,   455,
     456,   457,   458,   459,   460,    -1,    -1,   463,   464,   465,
      -1,   467,   468,   469,   470,    -1,   472,   473,   474,   475,
     476,   477,   478,    -1,   480,   481,   482,   483,   484,   485,
     486,   487,   488,   489,   490,    -1,    -1,   493,    -1,    -1,
     496,   497,   498,   499,   500,   501,   502,   503,   504,   505,
     506,   507,   508,   509,   510,   511,   512,   513,   514,   515,
     516,   517,    -1,    -1,    -1,    -1,    -1,    -1,   524,   525,
     526,    -1,    -1,    -1,    -1,   531,    -1,   533,    -1,    -1,
      -1,    -1,    -1,   539,   540,    -1,    -1,    -1,    -1,   545,
     546,     3,     4,     5,     6,     7,     8,     9,    10,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    -1,
      32,    33,    34,    -1,    -1,    -1,    -1,    -1,    40,    41,
      -1,    -1,    44,    45,    46,    -1,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    58,    59,    -1,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
      72,    73,    74,    75,    -1,    77,    78,    79,    80,    81,
      -1,    83,    -1,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    -1,    96,    97,    98,    99,   100,   101,
      -1,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,   119,   120,    -1,
     122,   123,   124,   125,   126,   127,    -1,    -1,   130,   131,
     132,   133,   134,    -1,    -1,   137,   138,   139,   140,   141,
     142,   143,    -1,   145,   146,   147,    -1,   149,   150,   151,
      -1,   153,   154,   155,   156,   157,   158,   159,   160,   161,
     162,   163,   164,   165,    -1,   167,   168,   169,   170,    -1,
     172,    -1,   174,   175,    -1,   177,   178,   179,   180,   181,
     182,    -1,   184,   185,    -1,    -1,   188,   189,   190,   191,
      -1,   193,   194,   195,   196,   197,   198,   199,   200,   201,
     202,   203,   204,    -1,   206,   207,   208,   209,   210,   211,
     212,    -1,   214,   215,   216,   217,   218,   219,   220,   221,
     222,   223,    -1,   225,    -1,   227,   228,   229,   230,   231,
     232,   233,   234,   235,   236,   237,   238,    -1,    -1,   241,
     242,   243,   244,    -1,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     282,   283,   284,   285,   286,   287,   288,   289,   290,   291,
     292,   293,   294,    -1,   296,   297,    -1,    -1,   300,   301,
     302,    -1,    -1,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,   323,   324,    -1,    -1,    -1,    -1,   329,   330,   331,
     332,   333,   334,   335,   336,   337,   338,    -1,   340,   341,
     342,   343,   344,   345,   346,   347,    -1,   349,   350,   351,
     352,   353,   354,   355,   356,    -1,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
      -1,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,   386,   387,   388,   389,   390,   391,
     392,    -1,    -1,   395,   396,   397,   398,   399,   400,   401,
     402,   403,   404,    -1,   406,   407,   408,   409,   410,    -1,
     412,   413,   414,   415,   416,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,    -1,    -1,   430,   431,
      -1,   433,   434,   435,   436,   437,   438,   439,    -1,   441,
     442,   443,    -1,   445,    -1,   447,   448,   449,   450,   451,
     452,   453,   454,   455,   456,   457,   458,   459,   460,    -1,
      -1,   463,   464,   465,    -1,   467,   468,   469,   470,    -1,
     472,   473,   474,   475,   476,   477,   478,    -1,   480,   481,
     482,   483,   484,   485,   486,   487,   488,   489,   490,    -1,
     492,   493,    -1,    -1,   496,   497,   498,   499,   500,   501,
     502,   503,   504,   505,   506,   507,   508,   509,   510,   511,
     512,   513,   514,   515,   516,   517,    -1,    -1,    -1,    -1,
      -1,    -1,   524,   525,   526,    -1,    -1,    -1,    -1,   531,
      -1,   533,    -1,    -1,    -1,    -1,    -1,   539,   540,    -1,
      -1,    -1,    -1,   545,   546,     3,     4,     5,     6,     7,
       8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    33,    34,    -1,    -1,    -1,
      -1,    -1,    40,    41,    -1,    -1,    44,    45,    46,    -1,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      58,    59,    -1,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    72,    73,    74,    75,    -1,    77,
      78,    79,    80,    81,    -1,    83,    -1,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    -1,    96,    97,
      98,    99,   100,   101,    -1,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,   119,   120,    -1,   122,   123,   124,   125,   126,   127,
      -1,    -1,   130,   131,   132,   133,   134,    -1,    -1,   137,
     138,   139,   140,   141,   142,   143,    -1,   145,   146,   147,
      -1,   149,   150,   151,    -1,   153,   154,   155,   156,   157,
     158,   159,   160,   161,   162,   163,   164,   165,    -1,   167,
     168,   169,   170,    -1,   172,    -1,   174,   175,    -1,   177,
     178,   179,   180,   181,   182,    -1,   184,   185,    -1,    -1,
     188,   189,   190,   191,    -1,   193,   194,   195,   196,   197,
     198,   199,   200,   201,   202,   203,   204,    -1,   206,   207,
     208,   209,   210,   211,   212,    -1,   214,   215,   216,   217,
     218,   219,   220,   221,   222,   223,    -1,   225,    -1,   227,
     228,   229,   230,   231,   232,   233,   234,   235,   236,   237,
     238,    -1,    -1,   241,   242,   243,   244,    -1,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
     288,   289,   290,   291,   292,   293,   294,    -1,   296,   297,
      -1,    -1,   300,   301,   302,    -1,    -1,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323,   324,    -1,    -1,    -1,
      -1,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     338,    -1,   340,   341,   342,   343,   344,   345,   346,   347,
      -1,   349,   350,   351,   352,   353,   354,   355,   356,    -1,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,   371,    -1,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,   386,   387,
     388,   389,   390,   391,   392,    -1,    -1,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,    -1,   406,   407,
     408,   409,   410,    -1,   412,   413,   414,   415,   416,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
      -1,    -1,   430,   431,    -1,   433,   434,   435,   436,   437,
     438,   439,    -1,   441,   442,   443,    -1,   445,    -1,   447,
     448,   449,   450,   451,   452,   453,   454,   455,   456,   457,
     458,   459,   460,    -1,    -1,   463,   464,   465,    -1,   467,
     468,   469,   470,    -1,   472,   473,   474,   475,   476,   477,
     478,    -1,   480,   481,   482,   483,   484,   485,   486,   487,
     488,   489,   490,    -1,    -1,   493,    -1,    -1,   496,   497,
     498,   499,   500,   501,   502,   503,   504,   505,   506,   507,
     508,   509,   510,   511,   512,   513,   514,   515,   516,   517,
      -1,    -1,    -1,    -1,    -1,    -1,   524,   525,   526,    -1,
      -1,    -1,    -1,   531,    -1,   533,    -1,    -1,    -1,    -1,
      -1,   539,   540,    -1,    -1,    -1,    -1,   545,   546,     3,
       4,     5,     6,     7,     8,     9,    10,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    -1,    32,    33,
      34,    -1,    -1,    -1,    -1,    -1,    40,    41,    -1,    -1,
      44,    45,    46,    -1,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    58,    59,    -1,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
      74,    75,    -1,    77,    78,    79,    80,    81,    -1,    83,
      -1,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    -1,    96,    97,    98,    99,   100,   101,    -1,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,    -1,   122,   123,
     124,   125,   126,   127,    -1,    -1,   130,   131,   132,   133,
     134,    -1,    -1,   137,   138,   139,   140,   141,   142,   143,
      -1,   145,   146,   147,    -1,   149,   150,   151,    -1,   153,
     154,   155,   156,   157,   158,   159,   160,   161,   162,   163,
     164,   165,    -1,   167,   168,   169,   170,    -1,   172,    -1,
     174,   175,    -1,   177,   178,   179,   180,   181,   182,    -1,
     184,   185,    -1,    -1,   188,   189,   190,   191,    -1,   193,
     194,   195,   196,   197,   198,   199,   200,   201,   202,   203,
     204,    -1,   206,   207,   208,   209,   210,   211,   212,    -1,
     214,   215,   216,   217,   218,   219,   220,   221,   222,   223,
      -1,   225,    -1,   227,   228,   229,   230,   231,   232,   233,
     234,   235,   236,   237,   238,    -1,    -1,   241,   242,   243,
     244,    -1,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     294,    -1,   296,   297,    -1,    -1,   300,   301,   302,    -1,
      -1,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,    -1,    -1,    -1,    -1,   329,   330,   331,   332,   333,
     334,   335,   336,   337,   338,    -1,   340,   341,   342,   343,
     344,   345,   346,   347,    -1,   349,   350,   351,   352,   353,
     354,   355,   356,    -1,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,   371,    -1,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,   385,   386,   387,   388,   389,   390,   391,   392,    -1,
      -1,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,    -1,   406,   407,   408,   409,   410,    -1,   412,   413,
     414,   415,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,    -1,    -1,   430,   431,   432,   433,
     434,   435,   436,   437,   438,   439,    -1,   441,   442,   443,
      -1,   445,    -1,   447,   448,   449,   450,   451,   452,   453,
     454,   455,   456,   457,   458,   459,   460,    -1,    -1,   463,
     464,   465,    -1,   467,   468,   469,   470,    -1,   472,   473,
     474,   475,   476,   477,   478,    -1,   480,   481,   482,   483,
     484,   485,   486,   487,   488,   489,   490,    -1,    -1,   493,
      -1,    -1,   496,   497,   498,   499,   500,   501,   502,   503,
     504,   505,   506,   507,   508,   509,   510,   511,   512,   513,
     514,   515,   516,   517,    -1,    -1,    -1,    -1,    -1,    -1,
     524,   525,   526,    -1,    -1,    -1,    -1,   531,    -1,   533,
      -1,    -1,    -1,    -1,    -1,   539,   540,    -1,    -1,    -1,
      -1,   545,   546,     3,     4,     5,     6,     7,     8,     9,
      10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    -1,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,
      40,    41,    -1,    -1,    44,    45,    46,    -1,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
      -1,    61,    62,    63,    64,    65,    66,    67,    68,    69,
      70,    71,    72,    73,    74,    75,    -1,    77,    78,    79,
      80,    81,    -1,    83,    -1,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    -1,    96,    97,    98,    99,
     100,   101,    -1,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
     120,    -1,   122,   123,   124,   125,   126,   127,    -1,    -1,
     130,   131,   132,   133,   134,    -1,    -1,   137,   138,   139,
     140,   141,   142,   143,    -1,   145,   146,   147,    -1,   149,
     150,   151,    -1,   153,   154,   155,   156,   157,   158,   159,
     160,   161,   162,   163,   164,   165,    -1,   167,   168,   169,
     170,    -1,   172,    -1,   174,   175,    -1,   177,   178,   179,
     180,   181,   182,    -1,   184,   185,    -1,    -1,   188,   189,
     190,   191,    -1,   193,   194,   195,   196,   197,   198,   199,
     200,   201,   202,   203,   204,    -1,   206,   207,   208,   209,
     210,   211,   212,    -1,   214,   215,   216,   217,   218,   219,
     220,   221,   222,   223,    -1,   225,    -1,   227,   228,   229,
     230,   231,   232,   233,   234,   235,   236,   237,   238,    -1,
      -1,   241,   242,   243,   244,    -1,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
     280,   281,   282,   283,   284,   285,   286,   287,   288,   289,
     290,   291,   292,   293,   294,    -1,   296,   297,    -1,    -1,
     300,   301,   302,    -1,    -1,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,   323,   324,    -1,    -1,    -1,    -1,   329,
     330,   331,   332,   333,   334,   335,   336,   337,   338,    -1,
     340,   341,   342,   343,   344,   345,   346,   347,    -1,   349,
     350,   351,   352,   353,   354,   355,   356,    -1,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
     370,   371,    -1,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,   386,   387,   388,   389,
     390,   391,   392,    -1,    -1,   395,   396,   397,   398,   399,
     400,   401,   402,   403,   404,    -1,   406,   407,   408,   409,
     410,    -1,   412,   413,   414,   415,   416,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,    -1,    -1,
     430,   431,    -1,   433,   434,   435,   436,   437,   438,   439,
      -1,   441,   442,   443,    -1,   445,    -1,   447,   448,   449,
     450,   451,   452,   453,   454,   455,   456,   457,   458,   459,
     460,    -1,    -1,   463,   464,   465,    -1,   467,   468,   469,
     470,    -1,   472,   473,   474,   475,   476,   477,   478,    -1,
     480,   481,   482,   483,   484,   485,   486,   487,   488,   489,
     490,    -1,    -1,   493,    -1,    -1,   496,   497,   498,   499,
     500,   501,   502,   503,   504,   505,   506,   507,   508,   509,
     510,   511,   512,   513,   514,   515,   516,   517,    -1,    -1,
      -1,    -1,    -1,    -1,   524,   525,   526,    -1,    -1,    -1,
      -1,   531,    -1,   533,    -1,    -1,    -1,    -1,    -1,   539,
     540,    -1,    -1,    -1,   544,   545,   546,     3,     4,     5,
       6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    -1,    32,    33,    34,    -1,
      -1,    -1,    -1,    -1,    40,    41,    -1,    -1,    44,    45,
      46,    -1,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    -1,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
      -1,    77,    78,    79,    80,    81,    -1,    83,    -1,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    -1,
      96,    97,    98,    99,   100,   101,    -1,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,   120,    -1,   122,   123,   124,   125,
     126,   127,    -1,    -1,   130,   131,   132,   133,   134,    -1,
      -1,   137,   138,   139,   140,   141,   142,   143,    -1,   145,
     146,   147,    -1,   149,   150,   151,    -1,   153,   154,   155,
     156,   157,   158,   159,   160,   161,   162,   163,   164,   165,
      -1,   167,   168,   169,   170,    -1,   172,    -1,   174,   175,
      -1,   177,   178,   179,   180,   181,   182,    -1,   184,   185,
      -1,    -1,   188,   189,   190,   191,    -1,   193,   194,   195,
     196,   197,   198,   199,   200,   201,   202,   203,   204,    -1,
     206,   207,   208,   209,   210,   211,   212,    -1,   214,   215,
     216,   217,   218,   219,   220,   221,   222,   223,    -1,   225,
      -1,   227,   228,   229,   230,   231,   232,   233,   234,   235,
     236,   237,   238,    -1,    -1,   241,   242,   243,   244,    -1,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
     286,   287,   288,   289,   290,   291,   292,   293,   294,    -1,
     296,   297,    -1,    -1,   300,   301,   302,    -1,    -1,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,   323,   324,    -1,
      -1,    -1,    -1,   329,   330,   331,   332,   333,   334,   335,
     336,   337,   338,    -1,   340,   341,   342,   343,   344,   345,
     346,   347,    -1,   349,   350,   351,   352,   353,   354,   355,
     356,    -1,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,    -1,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,   385,
     386,   387,   388,   389,   390,   391,   392,    -1,    -1,   395,
     396,   397,   398,   399,   400,   401,   402,   403,   404,    -1,
     406,   407,   408,   409,   410,    -1,   412,   413,   414,   415,
     416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,    -1,    -1,   430,   431,   432,   433,   434,   435,
     436,   437,   438,   439,    -1,   441,   442,   443,    -1,   445,
      -1,   447,   448,   449,   450,   451,   452,   453,   454,   455,
     456,   457,   458,   459,   460,    -1,    -1,   463,   464,   465,
      -1,   467,   468,   469,   470,    -1,   472,   473,   474,   475,
     476,   477,   478,    -1,   480,   481,   482,   483,   484,   485,
     486,   487,   488,   489,   490,    -1,    -1,   493,    -1,    -1,
     496,   497,   498,   499,   500,   501,   502,   503,   504,   505,
     506,   507,   508,   509,   510,   511,   512,   513,   514,   515,
     516,   517,    -1,    -1,    -1,    -1,    -1,    -1,   524,   525,
     526,    -1,    -1,    -1,    -1,   531,    -1,   533,    -1,    -1,
      -1,    -1,    -1,   539,   540,    -1,    -1,    -1,    -1,   545,
     546,     3,     4,     5,     6,     7,     8,     9,    10,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    -1,
      32,    33,    34,    -1,    -1,    -1,    -1,    -1,    40,    41,
      -1,    -1,    44,    45,    46,    -1,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    58,    59,    -1,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
      72,    73,    74,    75,    -1,    77,    78,    79,    80,    81,
      -1,    83,    -1,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    -1,    96,    97,    98,    99,   100,   101,
      -1,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,   119,   120,    -1,
     122,   123,   124,   125,   126,   127,    -1,    -1,   130,   131,
     132,   133,   134,    -1,    -1,   137,   138,   139,   140,   141,
     142,   143,    -1,   145,   146,   147,    -1,   149,   150,   151,
      -1,   153,   154,   155,   156,   157,   158,   159,   160,   161,
     162,   163,   164,   165,    -1,   167,   168,   169,   170,    -1,
     172,    -1,   174,   175,    -1,   177,   178,   179,   180,   181,
     182,    -1,   184,   185,    -1,    -1,   188,   189,   190,   191,
      -1,   193,   194,   195,   196,   197,   198,   199,   200,   201,
     202,   203,   204,    -1,   206,   207,   208,   209,   210,   211,
     212,    -1,   214,   215,   216,   217,   218,   219,   220,   221,
     222,   223,    -1,   225,    -1,   227,   228,   229,   230,   231,
     232,   233,   234,   235,   236,   237,   238,    -1,    -1,   241,
     242,   243,   244,    -1,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     282,   283,   284,   285,   286,   287,   288,   289,   290,   291,
     292,   293,   294,    -1,   296,   297,    -1,    -1,   300,   301,
     302,    -1,    -1,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,   323,   324,    -1,    -1,    -1,    -1,   329,   330,   331,
     332,   333,   334,   335,   336,   337,   338,    -1,   340,   341,
     342,   343,   344,   345,   346,   347,    -1,   349,   350,   351,
     352,   353,   354,   355,   356,    -1,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
      -1,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,   386,   387,   388,   389,   390,   391,
     392,    -1,    -1,   395,   396,   397,   398,   399,   400,   401,
     402,   403,   404,    -1,   406,   407,   408,   409,   410,    -1,
     412,   413,   414,   415,   416,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,    -1,    -1,   430,   431,
      -1,   433,   434,   435,   436,   437,   438,   439,    -1,   441,
     442,   443,    -1,   445,    -1,   447,   448,   449,   450,   451,
     452,   453,   454,   455,   456,   457,   458,   459,   460,    -1,
      -1,   463,   464,   465,    -1,   467,   468,   469,   470,    -1,
     472,   473,   474,   475,   476,   477,   478,    -1,   480,   481,
     482,   483,   484,   485,   486,   487,   488,   489,   490,    -1,
      -1,   493,    -1,    -1,   496,   497,   498,   499,   500,   501,
     502,   503,   504,   505,   506,   507,   508,   509,   510,   511,
     512,   513,   514,   515,   516,   517,    -1,    -1,    -1,    -1,
      -1,    -1,   524,   525,   526,    -1,    -1,    -1,    -1,   531,
      -1,   533,    -1,    -1,    -1,    -1,    -1,   539,   540,    -1,
      -1,    -1,    -1,   545,   546,     3,     4,     5,     6,     7,
       8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    -1,    32,    33,    34,    -1,    -1,    -1,
      -1,    -1,    40,    41,    -1,    -1,    44,    45,    46,    -1,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      58,    59,    -1,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    72,    73,    74,    75,    -1,    77,
      78,    79,    80,    81,    -1,    83,    -1,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    -1,    96,    97,
      98,    99,   100,   101,    -1,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,   119,   120,    -1,   122,   123,   124,   125,   126,   127,
      -1,    -1,   130,   131,   132,   133,   134,    -1,    -1,   137,
     138,   139,   140,   141,   142,   143,    -1,   145,   146,   147,
      -1,   149,   150,   151,    -1,   153,   154,   155,   156,   157,
     158,   159,   160,   161,   162,   163,   164,   165,    -1,   167,
     168,   169,   170,    -1,   172,    -1,   174,   175,    -1,   177,
     178,   179,   180,   181,   182,    -1,   184,   185,    -1,    -1,
     188,   189,   190,   191,    -1,   193,   194,   195,   196,   197,
     198,   199,   200,   201,   202,   203,   204,    -1,   206,   207,
     208,   209,   210,   211,   212,    -1,   214,   215,   216,   217,
     218,   219,   220,   221,   222,   223,    -1,   225,    -1,   227,
     228,   229,   230,   231,   232,   233,   234,   235,   236,   237,
     238,    -1,    -1,   241,   242,   243,   244,    -1,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
     288,   289,   290,   291,   292,   293,   294,    -1,   296,   297,
      -1,    -1,   300,   301,   302,    -1,    -1,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323,   324,    -1,    -1,    -1,
      -1,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     338,    -1,   340,   341,   342,   343,   344,   345,   346,   347,
      -1,   349,   350,   351,   352,   353,   354,   355,   356,    -1,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,   371,    -1,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,   386,   387,
     388,   389,   390,   391,   392,    -1,    -1,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,    -1,   406,   407,
     408,   409,   410,    -1,   412,   413,   414,   415,   416,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
      -1,    -1,   430,   431,    -1,   433,   434,   435,   436,   437,
     438,   439,    -1,   441,   442,   443,    -1,   445,    -1,   447,
     448,   449,   450,   451,   452,   453,   454,   455,   456,   457,
     458,   459,   460,    -1,    -1,   463,   464,   465,    -1,   467,
     468,   469,   470,    -1,   472,   473,   474,   475,   476,   477,
     478,    -1,   480,   481,   482,   483,   484,   485,   486,   487,
     488,   489,   490,    -1,    -1,   493,    -1,    -1,   496,   497,
     498,   499,   500,   501,   502,   503,   504,   505,   506,   507,
     508,   509,   510,   511,   512,   513,   514,   515,   516,   517,
      -1,    -1,    -1,    -1,    -1,    -1,   524,   525,   526,    -1,
      -1,    -1,    -1,   531,    -1,   533,    -1,    -1,    -1,    -1,
      -1,   539,   540,    -1,    -1,    -1,    -1,   545,   546,     3,
       4,     5,     6,     7,     8,     9,    10,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    -1,    32,    33,
      34,    -1,    -1,    -1,    -1,    -1,    40,    41,    -1,    -1,
      44,    45,    46,    -1,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    58,    59,    -1,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
      74,    75,    -1,    77,    78,    79,    80,    81,    -1,    83,
      -1,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    -1,    96,    97,    98,    99,   100,   101,    -1,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,    -1,   122,   123,
     124,   125,   126,   127,    -1,    -1,   130,   131,   132,   133,
     134,    -1,    -1,   137,   138,   139,   140,   141,   142,   143,
      -1,   145,   146,   147,    -1,   149,   150,   151,    -1,   153,
     154,   155,   156,   157,   158,   159,   160,   161,   162,   163,
     164,   165,    -1,   167,   168,   169,   170,    -1,   172,    -1,
     174,   175,    -1,   177,   178,   179,   180,   181,   182,    -1,
     184,   185,    -1,    -1,   188,   189,   190,   191,    -1,   193,
     194,   195,   196,   197,   198,   199,   200,   201,   202,   203,
     204,    -1,   206,   207,   208,   209,   210,   211,   212,    -1,
     214,   215,   216,   217,   218,   219,   220,   221,   222,   223,
      -1,   225,    -1,   227,   228,   229,   230,   231,   232,   233,
     234,   235,   236,   237,   238,    -1,    -1,   241,   242,   243,
     244,    -1,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     294,    -1,   296,   297,    -1,    -1,   300,   301,   302,    -1,
      -1,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,    -1,    -1,    -1,    -1,   329,   330,   331,   332,   333,
     334,   335,   336,   337,   338,    -1,   340,   341,   342,   343,
     344,   345,   346,   347,    -1,   349,   350,   351,   352,   353,
     354,   355,   356,    -1,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,   371,    -1,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,   385,   386,   387,   388,   389,   390,   391,   392,    -1,
      -1,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,    -1,   406,   407,   408,   409,   410,    -1,   412,   413,
     414,   415,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,    -1,    -1,   430,   431,    -1,   433,
     434,   435,   436,   437,   438,   439,    -1,   441,   442,   443,
      -1,   445,    -1,   447,   448,   449,   450,   451,   452,   453,
     454,   455,   456,   457,   458,   459,   460,    -1,    -1,   463,
     464,   465,    -1,   467,   468,   469,   470,    -1,   472,   473,
     474,   475,   476,   477,   478,    -1,   480,   481,   482,   483,
     484,   485,   486,   487,   488,   489,   490,    -1,    -1,   493,
      -1,    -1,   496,   497,   498,   499,   500,   501,   502,   503,
     504,   505,   506,   507,   508,   509,   510,   511,   512,   513,
     514,   515,   516,   517,    -1,    -1,    -1,    -1,    -1,    -1,
     524,   525,   526,    -1,    -1,    -1,    -1,   531,    -1,   533,
      -1,    -1,    -1,    -1,    -1,   539,   540,    -1,    -1,    -1,
      -1,   545,   546,     3,     4,     5,     6,     7,     8,     9,
      10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    -1,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,
      40,    41,    -1,    -1,    44,    45,    46,    -1,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
      -1,    61,    62,    63,    64,    65,    66,    67,    68,    69,
      70,    71,    72,    73,    74,    75,    -1,    77,    78,    79,
      80,    81,    -1,    83,    -1,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    -1,    96,    97,    98,    99,
     100,   101,    -1,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
     120,    -1,   122,   123,   124,   125,   126,   127,    -1,    -1,
     130,   131,   132,   133,   134,    -1,    -1,   137,   138,   139,
     140,   141,   142,   143,    -1,   145,   146,   147,    -1,   149,
     150,   151,    -1,   153,   154,   155,   156,   157,   158,   159,
     160,   161,   162,   163,   164,   165,    -1,   167,   168,   169,
     170,    -1,   172,    -1,   174,   175,    -1,   177,   178,   179,
     180,   181,   182,    -1,   184,   185,    -1,    -1,   188,   189,
     190,   191,    -1,   193,   194,   195,   196,   197,   198,   199,
     200,   201,   202,   203,   204,    -1,   206,   207,   208,   209,
     210,   211,   212,    -1,   214,   215,   216,   217,   218,   219,
     220,   221,   222,   223,    -1,   225,    -1,   227,   228,   229,
     230,   231,   232,   233,   234,   235,   236,   237,   238,    -1,
      -1,   241,   242,   243,   244,    -1,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
     280,   281,   282,   283,   284,   285,   286,   287,   288,   289,
     290,   291,   292,   293,   294,    -1,   296,   297,    -1,    -1,
     300,   301,   302,    -1,    -1,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,   323,   324,    -1,    -1,    -1,    -1,   329,
     330,   331,   332,   333,   334,   335,   336,   337,   338,    -1,
     340,   341,   342,   343,   344,   345,   346,   347,    -1,   349,
     350,   351,   352,   353,   354,   355,   356,    -1,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
     370,   371,    -1,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,   386,   387,   388,   389,
     390,   391,   392,    -1,    -1,   395,   396,   397,   398,   399,
     400,   401,   402,   403,   404,    -1,   406,   407,   408,   409,
     410,    -1,   412,   413,   414,   415,   416,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,    -1,    -1,
     430,   431,    -1,   433,   434,   435,   436,   437,   438,   439,
      -1,   441,   442,   443,    -1,   445,    -1,   447,   448,   449,
     450,   451,   452,   453,   454,   455,   456,   457,   458,   459,
     460,    -1,    -1,   463,   464,   465,    -1,   467,   468,   469,
     470,    -1,   472,   473,   474,   475,   476,   477,   478,    -1,
     480,   481,   482,   483,   484,   485,   486,   487,   488,   489,
     490,    -1,    -1,   493,    -1,    -1,   496,   497,   498,   499,
     500,   501,   502,   503,   504,   505,   506,   507,   508,   509,
     510,   511,   512,   513,   514,   515,   516,   517,    -1,    -1,
      -1,    -1,    -1,    -1,   524,   525,   526,    -1,    -1,    -1,
      -1,   531,    -1,   533,    -1,    -1,    -1,    -1,    -1,   539,
     540,    -1,    -1,    -1,    -1,   545,   546,     3,     4,     5,
       6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    -1,    32,    33,    34,    -1,
      -1,    -1,    -1,    -1,    40,    41,    -1,    -1,    44,    45,
      46,    -1,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    -1,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
      -1,    77,    78,    79,    80,    81,    -1,    83,    -1,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    -1,
      96,    97,    98,    99,   100,   101,    -1,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,   120,    -1,   122,   123,   124,   125,
     126,   127,    -1,    -1,   130,   131,   132,   133,   134,    -1,
      -1,   137,   138,   139,   140,   141,   142,   143,    -1,   145,
     146,   147,    -1,   149,   150,   151,    -1,   153,   154,   155,
     156,   157,   158,   159,   160,   161,   162,   163,   164,   165,
      -1,   167,   168,   169,   170,    -1,   172,    -1,   174,   175,
      -1,   177,   178,   179,   180,   181,   182,    -1,   184,   185,
      -1,    -1,   188,   189,   190,   191,    -1,   193,   194,   195,
     196,   197,   198,   199,   200,   201,   202,   203,   204,    -1,
     206,   207,   208,   209,   210,   211,   212,    -1,   214,   215,
     216,   217,   218,   219,   220,   221,   222,   223,    -1,   225,
      -1,   227,   228,   229,   230,   231,   232,   233,   234,   235,
     236,   237,   238,    -1,    -1,   241,   242,   243,   244,    -1,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
     286,   287,   288,   289,   290,   291,   292,   293,   294,    -1,
     296,   297,    -1,    -1,   300,   301,   302,    -1,    -1,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,   323,   324,    -1,
      -1,    -1,    -1,   329,   330,   331,   332,   333,   334,   335,
     336,   337,   338,    -1,   340,   341,   342,   343,   344,   345,
     346,   347,    -1,   349,   350,   351,   352,   353,   354,   355,
     356,    -1,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,    -1,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,   385,
     386,   387,   388,   389,   390,   391,   392,    -1,    -1,   395,
     396,   397,   398,   399,   400,   401,   402,   403,   404,    -1,
     406,   407,   408,   409,   410,    -1,   412,   413,   414,   415,
     416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,    -1,    -1,   430,   431,    -1,   433,   434,   435,
     436,   437,   438,   439,    -1,   441,   442,   443,    -1,   445,
      -1,   447,   448,   449,   450,   451,   452,   453,   454,   455,
     456,   457,   458,   459,   460,    -1,    -1,   463,   464,   465,
      -1,   467,   468,   469,   470,    -1,   472,   473,   474,   475,
     476,   477,   478,    -1,   480,   481,   482,   483,   484,   485,
     486,   487,   488,   489,   490,    -1,    -1,   493,    -1,    -1,
     496,   497,   498,   499,   500,   501,   502,   503,   504,   505,
     506,   507,   508,   509,   510,   511,   512,   513,   514,   515,
     516,   517,    -1,    -1,    -1,    -1,    -1,    -1,   524,   525,
     526,    -1,    -1,    -1,    -1,   531,    -1,   533,    -1,    -1,
      -1,    -1,    -1,   539,   540,    -1,    -1,    -1,    -1,   545,
     546,     3,     4,     5,     6,     7,     8,     9,    10,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    -1,
      32,    33,    34,    -1,    -1,    -1,    -1,    -1,    40,    41,
      -1,    -1,    44,    45,    46,    -1,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    58,    59,    -1,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
      72,    73,    74,    75,    -1,    77,    78,    79,    80,    81,
      -1,    83,    -1,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    -1,    96,    97,    98,    99,   100,   101,
      -1,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,   119,   120,    -1,
     122,   123,   124,   125,   126,   127,    -1,    -1,   130,   131,
     132,   133,   134,    -1,    -1,   137,   138,   139,   140,   141,
     142,   143,    -1,   145,   146,   147,    -1,   149,   150,   151,
      -1,   153,   154,   155,   156,   157,   158,   159,   160,   161,
     162,   163,   164,   165,    -1,   167,   168,   169,   170,    -1,
     172,    -1,   174,   175,    -1,   177,   178,   179,   180,   181,
     182,    -1,   184,   185,    -1,    -1,   188,   189,   190,   191,
      -1,   193,   194,   195,   196,   197,   198,   199,   200,   201,
     202,   203,   204,    -1,   206,   207,   208,   209,   210,   211,
     212,    -1,   214,   215,   216,   217,   218,   219,   220,   221,
     222,   223,    -1,   225,    -1,   227,   228,   229,   230,   231,
     232,   233,   234,   235,   236,   237,   238,    -1,    -1,   241,
     242,   243,   244,    -1,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     282,   283,   284,   285,   286,   287,   288,   289,   290,   291,
     292,   293,   294,    -1,   296,   297,    -1,    -1,   300,   301,
     302,    -1,    -1,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,   323,   324,    -1,    -1,    -1,    -1,   329,   330,   331,
     332,   333,   334,   335,   336,   337,   338,    -1,   340,   341,
     342,   343,   344,   345,   346,   347,    -1,   349,   350,   351,
     352,   353,   354,   355,   356,    -1,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
      -1,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,   386,   387,   388,   389,   390,   391,
     392,    -1,    -1,   395,   396,   397,   398,   399,   400,   401,
     402,   403,   404,    -1,   406,   407,   408,   409,   410,    -1,
     412,   413,   414,   415,   416,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,    -1,    -1,   430,   431,
      -1,   433,   434,   435,   436,   437,   438,   439,    -1,   441,
     442,   443,    -1,   445,    -1,   447,   448,   449,   450,   451,
     452,   453,   454,   455,   456,   457,   458,   459,   460,    -1,
      -1,   463,   464,   465,    -1,   467,   468,   469,   470,    -1,
     472,   473,   474,   475,   476,   477,   478,    -1,   480,   481,
     482,   483,   484,   485,   486,   487,   488,   489,   490,    -1,
      -1,   493,    -1,    -1,   496,   497,   498,   499,   500,   501,
     502,   503,   504,   505,   506,   507,   508,   509,   510,   511,
     512,   513,   514,   515,   516,   517,    -1,    -1,    -1,    -1,
      -1,    -1,   524,   525,   526,    -1,    -1,    -1,    -1,   531,
      -1,   533,    -1,    -1,    -1,    -1,    -1,   539,   540,    -1,
      -1,    -1,    -1,   545,   546,     3,     4,     5,     6,     7,
       8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    -1,    32,    33,    34,    -1,    -1,    -1,
      -1,    -1,    40,    41,    -1,    -1,    44,    45,    46,    -1,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      58,    59,    -1,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    72,    73,    74,    75,    -1,    77,
      78,    79,    80,    81,    -1,    83,    -1,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    -1,    96,    97,
      98,    99,   100,   101,    -1,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,   119,   120,    -1,   122,   123,   124,   125,   126,   127,
      -1,    -1,   130,   131,   132,   133,   134,    -1,    -1,   137,
     138,   139,   140,   141,   142,   143,    -1,   145,   146,   147,
      -1,   149,   150,   151,    -1,   153,   154,   155,   156,   157,
     158,   159,   160,   161,   162,   163,   164,   165,    -1,   167,
     168,   169,   170,    -1,   172,    -1,   174,   175,    -1,   177,
     178,   179,   180,   181,   182,    -1,   184,   185,    -1,    -1,
     188,   189,   190,   191,    -1,   193,   194,   195,   196,   197,
     198,   199,   200,   201,   202,   203,   204,    -1,   206,   207,
     208,   209,   210,   211,   212,    -1,   214,   215,   216,   217,
     218,   219,   220,   221,   222,   223,    -1,   225,    -1,   227,
     228,   229,   230,   231,   232,   233,   234,   235,   236,   237,
     238,    -1,    -1,   241,   242,   243,   244,    -1,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
     288,   289,   290,   291,   292,   293,   294,    -1,   296,   297,
      -1,    -1,   300,   301,   302,    -1,    -1,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323,   324,    -1,    -1,    -1,
      -1,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     338,    -1,   340,   341,   342,   343,   344,   345,   346,   347,
      -1,   349,   350,   351,   352,   353,   354,   355,   356,    -1,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,   371,    -1,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,   386,   387,
     388,   389,   390,   391,   392,    -1,    -1,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,    -1,   406,   407,
     408,   409,   410,    -1,   412,   413,   414,   415,   416,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
      -1,    -1,   430,   431,    -1,   433,   434,   435,   436,   437,
     438,   439,    -1,   441,   442,   443,    -1,   445,    -1,   447,
     448,   449,   450,   451,   452,   453,   454,   455,   456,   457,
     458,   459,   460,    -1,    -1,   463,   464,   465,    -1,   467,
     468,   469,   470,    -1,   472,   473,   474,   475,   476,   477,
     478,    -1,   480,   481,   482,   483,   484,   485,   486,   487,
     488,   489,   490,    -1,    -1,   493,    -1,    -1,   496,   497,
     498,   499,   500,   501,   502,   503,   504,   505,   506,   507,
     508,   509,   510,   511,   512,   513,   514,   515,   516,   517,
      -1,    -1,    -1,    -1,    -1,    -1,   524,   525,   526,    -1,
      -1,    -1,    -1,   531,    -1,   533,    -1,    -1,    -1,    -1,
      -1,   539,   540,    -1,    -1,    -1,    -1,   545,   546,     3,
       4,     5,     6,     7,     8,     9,    10,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    -1,    32,    33,
      34,    -1,    -1,    -1,    -1,    -1,    40,    41,    -1,    -1,
      44,    45,    46,    -1,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    58,    59,    -1,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
      74,    75,    -1,    77,    78,    79,    80,    81,    -1,    83,
      -1,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    -1,    96,    97,    98,    99,   100,   101,    -1,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,    -1,   122,   123,
     124,   125,   126,   127,    -1,    -1,   130,   131,   132,   133,
     134,    -1,    -1,   137,   138,   139,   140,   141,   142,   143,
      -1,   145,   146,   147,    -1,   149,   150,   151,    -1,   153,
     154,   155,   156,   157,   158,   159,   160,   161,   162,   163,
     164,   165,    -1,   167,   168,   169,   170,    -1,   172,    -1,
     174,   175,    -1,   177,   178,   179,   180,   181,   182,    -1,
     184,   185,    -1,    -1,   188,   189,   190,   191,    -1,   193,
     194,   195,   196,   197,   198,   199,   200,   201,   202,   203,
     204,    -1,   206,   207,   208,   209,   210,   211,   212,    -1,
     214,   215,   216,   217,   218,   219,   220,   221,   222,   223,
      -1,   225,    -1,   227,   228,   229,   230,   231,   232,   233,
     234,   235,   236,   237,   238,    -1,    -1,   241,   242,   243,
     244,    -1,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     294,    -1,   296,   297,    -1,    -1,   300,   301,   302,    -1,
      -1,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,    -1,    -1,    -1,    -1,   329,   330,   331,   332,   333,
     334,   335,   336,   337,   338,    -1,   340,   341,   342,   343,
     344,   345,   346,   347,    -1,   349,   350,   351,   352,   353,
     354,   355,   356,    -1,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,   371,    -1,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,   385,   386,   387,   388,   389,   390,   391,   392,    -1,
      -1,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,    -1,   406,   407,   408,   409,   410,    -1,   412,   413,
     414,   415,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,    -1,    -1,   430,   431,    -1,   433,
     434,   435,   436,   437,   438,   439,    -1,   441,   442,   443,
      -1,   445,    -1,   447,   448,   449,   450,   451,   452,   453,
     454,   455,   456,   457,   458,   459,   460,    -1,    -1,   463,
     464,   465,    -1,   467,   468,   469,   470,    -1,   472,   473,
     474,   475,   476,   477,   478,    -1,   480,   481,   482,   483,
     484,   485,   486,   487,   488,   489,   490,    -1,    -1,   493,
      -1,    -1,   496,   497,   498,   499,   500,   501,   502,   503,
     504,   505,   506,   507,   508,   509,   510,   511,   512,   513,
     514,   515,   516,   517,    -1,    -1,    -1,    -1,    -1,    -1,
     524,   525,   526,    -1,    -1,    -1,    -1,   531,    -1,   533,
      -1,    -1,    -1,    -1,    -1,   539,   540,    -1,    -1,    -1,
      -1,   545,   546,     3,     4,     5,     6,     7,     8,     9,
      10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    -1,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,
      40,    41,    -1,    -1,    44,    45,    46,    -1,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
      -1,    61,    62,    63,    64,    65,    66,    67,    68,    69,
      70,    71,    72,    73,    74,    75,    -1,    77,    78,    79,
      80,    81,    -1,    83,    -1,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    -1,    96,    97,    98,    99,
     100,   101,    -1,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
     120,    -1,   122,   123,   124,   125,   126,   127,    -1,    -1,
     130,   131,   132,   133,   134,    -1,    -1,   137,   138,   139,
     140,   141,   142,   143,    -1,   145,   146,   147,    -1,   149,
     150,   151,    -1,   153,   154,   155,   156,   157,   158,   159,
     160,   161,   162,   163,   164,   165,    -1,   167,   168,   169,
     170,    -1,   172,    -1,   174,   175,    -1,   177,   178,   179,
     180,   181,   182,    -1,   184,   185,    -1,    -1,   188,   189,
     190,   191,    -1,   193,   194,   195,   196,   197,   198,   199,
     200,   201,   202,   203,   204,    -1,   206,   207,   208,   209,
     210,   211,   212,    -1,   214,   215,   216,   217,   218,   219,
     220,   221,   222,   223,    -1,   225,    -1,   227,   228,   229,
     230,   231,   232,   233,   234,   235,   236,   237,   238,    -1,
      -1,   241,   242,   243,   244,    -1,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
     280,   281,   282,   283,   284,   285,   286,   287,   288,   289,
     290,   291,   292,   293,   294,    -1,   296,   297,    -1,    -1,
     300,   301,   302,    -1,    -1,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,   323,   324,    -1,    -1,    -1,    -1,   329,
     330,   331,   332,   333,   334,   335,   336,   337,   338,    -1,
     340,   341,   342,   343,   344,   345,   346,   347,    -1,   349,
     350,   351,   352,   353,   354,   355,   356,    -1,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
     370,   371,    -1,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,   386,   387,   388,   389,
     390,   391,   392,    -1,    -1,   395,   396,   397,   398,   399,
     400,   401,   402,   403,   404,    -1,   406,   407,   408,   409,
     410,    -1,   412,   413,   414,   415,   416,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,    -1,    -1,
     430,   431,    -1,   433,   434,   435,   436,   437,   438,   439,
      -1,   441,   442,   443,    -1,   445,    -1,   447,   448,   449,
     450,   451,   452,   453,   454,   455,   456,   457,   458,   459,
     460,    -1,    -1,   463,   464,   465,    -1,   467,   468,   469,
     470,    -1,   472,   473,   474,   475,   476,   477,   478,    -1,
     480,   481,   482,   483,   484,   485,   486,   487,   488,   489,
     490,    -1,    -1,   493,    -1,    -1,   496,   497,   498,   499,
     500,   501,   502,   503,   504,   505,   506,   507,   508,   509,
     510,   511,   512,   513,   514,   515,   516,   517,    -1,    -1,
      -1,    -1,    -1,    -1,   524,   525,   526,    -1,    -1,    -1,
      -1,   531,    -1,   533,    -1,    -1,    -1,    -1,    -1,   539,
     540,    -1,    -1,    -1,    -1,   545,   546,     3,     4,     5,
       6,     7,    -1,     9,    10,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    -1,    32,    33,    34,    -1,
      -1,    -1,    -1,    -1,    40,    41,    -1,    -1,    44,    45,
      46,    -1,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    -1,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
      -1,    77,    78,    79,    80,    81,    -1,    83,    -1,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    -1,
      96,    97,    98,    99,   100,   101,    -1,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,    -1,   120,    -1,   122,   123,   124,   125,
     126,   127,    -1,    -1,   130,   131,   132,   133,   134,    -1,
      -1,   137,   138,   139,   140,   141,   142,   143,    -1,   145,
     146,   147,    -1,   149,   150,   151,    -1,   153,   154,   155,
     156,   157,   158,   159,   160,   161,   162,   163,   164,   165,
      -1,   167,   168,   169,   170,    -1,   172,    -1,   174,   175,
      -1,   177,   178,   179,   180,   181,   182,    -1,   184,   185,
      -1,    -1,   188,   189,   190,   191,    -1,   193,   194,   195,
     196,   197,   198,   199,   200,   201,   202,   203,   204,    -1,
     206,   207,   208,   209,   210,   211,   212,    -1,   214,   215,
     216,   217,   218,   219,   220,   221,   222,   223,    -1,   225,
      -1,   227,   228,   229,   230,   231,   232,   233,   234,   235,
     236,   237,   238,    -1,    -1,   241,   242,   243,   244,    -1,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
     286,   287,   288,   289,   290,   291,   292,   293,   294,    -1,
     296,   297,    -1,    -1,   300,   301,   302,    -1,    -1,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,   323,   324,    -1,
      -1,    -1,    -1,   329,   330,   331,   332,   333,   334,   335,
     336,   337,   338,    -1,   340,   341,   342,   343,   344,   345,
     346,   347,    -1,   349,   350,   351,   352,   353,   354,   355,
     356,    -1,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,    -1,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,   385,
     386,   387,   388,   389,   390,   391,   392,    -1,    -1,   395,
     396,   397,   398,   399,   400,   401,   402,   403,   404,    -1,
     406,   407,   408,   409,   410,    -1,   412,   413,   414,   415,
     416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,    -1,    -1,   430,   431,    -1,   433,   434,   435,
     436,   437,   438,   439,    -1,   441,   442,   443,    -1,   445,
      -1,   447,   448,   449,   450,   451,   452,   453,   454,   455,
     456,   457,   458,   459,   460,    -1,    -1,   463,   464,   465,
      -1,   467,   468,   469,   470,    -1,   472,   473,   474,   475,
     476,   477,   478,    -1,   480,   481,   482,   483,   484,   485,
     486,   487,   488,   489,   490,    -1,    -1,   493,    -1,    -1,
     496,   497,   498,   499,   500,   501,   502,   503,   504,   505,
     506,   507,   508,   509,   510,   511,   512,   513,   514,   515,
     516,   517,    -1,    -1,    -1,    -1,    -1,    -1,   524,   525,
      -1,    -1,    -1,    -1,    -1,   531,    -1,   533,    -1,    -1,
      -1,    -1,    -1,   539,   540,    -1,    -1,    -1,    -1,   545,
     546,     3,     4,     5,     6,     7,     8,     9,    10,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    -1,
      32,    33,    34,    -1,    -1,    -1,    -1,    -1,    40,    41,
      -1,    -1,    44,    45,    46,    -1,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    58,    59,    -1,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
      72,    73,    74,    75,    -1,    77,    78,    79,    80,    81,
      -1,    83,    -1,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    -1,    96,    97,    98,    99,   100,   101,
      -1,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,    -1,   120,    -1,
     122,   123,   124,   125,   126,   127,    -1,    -1,   130,   131,
     132,   133,   134,    -1,    -1,   137,   138,   139,   140,   141,
     142,   143,    -1,   145,   146,   147,    -1,   149,   150,   151,
      -1,   153,   154,   155,   156,   157,   158,   159,   160,   161,
     162,   163,   164,   165,    -1,   167,   168,   169,   170,    -1,
     172,    -1,   174,   175,    -1,   177,   178,   179,   180,   181,
     182,    -1,   184,   185,    -1,    -1,   188,   189,   190,   191,
      -1,   193,   194,   195,   196,   197,   198,   199,   200,   201,
     202,   203,   204,    -1,   206,   207,   208,   209,   210,   211,
     212,    -1,   214,   215,   216,   217,   218,   219,   220,   221,
     222,   223,    -1,   225,    -1,   227,   228,   229,   230,   231,
     232,   233,   234,   235,   236,   237,   238,    -1,    -1,   241,
     242,   243,   244,    -1,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     282,    -1,   284,   285,   286,   287,   288,   289,   290,   291,
     292,   293,   294,    -1,   296,   297,    -1,    -1,   300,   301,
     302,    -1,    -1,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,   323,   324,    -1,    -1,    -1,    -1,   329,   330,   331,
     332,   333,   334,   335,   336,   337,   338,    -1,   340,   341,
     342,   343,   344,   345,   346,   347,    -1,   349,   350,   351,
     352,   353,   354,   355,   356,    -1,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
      -1,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,   386,   387,   388,   389,   390,   391,
     392,    -1,    -1,   395,   396,   397,   398,   399,   400,   401,
     402,   403,   404,    -1,   406,   407,   408,   409,   410,    -1,
     412,   413,   414,   415,   416,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,    -1,    -1,   430,   431,
      -1,   433,   434,   435,   436,   437,   438,   439,    -1,   441,
     442,   443,    -1,   445,    -1,   447,   448,   449,   450,   451,
     452,   453,   454,   455,   456,   457,   458,   459,   460,    -1,
      -1,   463,   464,   465,    -1,   467,   468,   469,   470,    -1,
     472,   473,   474,   475,   476,   477,   478,    -1,   480,   481,
     482,   483,   484,   485,   486,   487,   488,   489,   490,    -1,
      -1,   493,    -1,    -1,   496,   497,   498,   499,   500,   501,
     502,   503,   504,   505,   506,   507,   508,   509,   510,   511,
     512,   513,   514,   515,   516,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   524,   525,    -1,    -1,    -1,    -1,    -1,   531,
      -1,   533,    -1,    -1,    -1,    -1,    -1,   539,   540,    -1,
      -1,    -1,    -1,   545,   546,     3,     4,     5,     6,     7,
       8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    -1,    32,    33,    34,    -1,    -1,    -1,
      -1,    -1,    40,    41,    -1,    -1,    44,    45,    46,    -1,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      58,    59,    -1,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    72,    73,    74,    75,    -1,    77,
      78,    79,    80,    81,    -1,    83,    -1,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    -1,    96,    97,
      98,    99,   100,   101,    -1,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,   119,   120,    -1,   122,   123,   124,   125,   126,   127,
      -1,    -1,   130,   131,   132,   133,   134,    -1,    -1,   137,
     138,   139,   140,   141,   142,   143,    -1,   145,   146,   147,
      -1,   149,   150,   151,    -1,   153,   154,   155,   156,   157,
     158,   159,   160,   161,   162,   163,   164,   165,    -1,   167,
     168,   169,   170,    -1,   172,    -1,   174,   175,    -1,   177,
     178,   179,   180,   181,   182,    -1,   184,   185,    -1,    -1,
     188,   189,   190,   191,    -1,   193,   194,   195,   196,   197,
     198,   199,   200,   201,   202,   203,   204,    -1,   206,   207,
     208,   209,   210,   211,   212,    -1,   214,   215,   216,   217,
     218,   219,   220,   221,   222,   223,    -1,   225,    -1,   227,
      -1,    -1,   230,   231,   232,   233,   234,   235,   236,   237,
     238,    -1,    -1,   241,   242,   243,   244,    -1,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,   280,   281,   282,    -1,   284,   285,    -1,   287,
     288,   289,   290,   291,   292,   293,   294,    -1,   296,   297,
      -1,    -1,   300,   301,   302,    -1,    -1,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323,   324,    -1,    -1,    -1,
      -1,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     338,    -1,   340,   341,   342,   343,   344,   345,   346,   347,
      -1,   349,   350,   351,   352,   353,   354,   355,   356,    -1,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,   371,    -1,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,   386,   387,
     388,   389,   390,   391,   392,    -1,    -1,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,    -1,   406,   407,
     408,   409,   410,    -1,   412,   413,   414,   415,   416,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
      -1,    -1,   430,   431,    -1,   433,   434,   435,   436,   437,
     438,   439,    -1,   441,   442,   443,    -1,   445,    -1,   447,
     448,   449,   450,   451,   452,   453,   454,   455,   456,   457,
     458,   459,   460,    -1,    -1,   463,   464,   465,    -1,   467,
     468,   469,   470,    -1,   472,   473,   474,   475,   476,   477,
     478,    -1,   480,   481,   482,   483,   484,   485,   486,   487,
     488,   489,   490,    -1,    -1,   493,    -1,    -1,   496,   497,
     498,   499,   500,   501,   502,   503,   504,   505,   506,   507,
     508,   509,   510,   511,   512,   513,   514,   515,   516,   517,
      -1,    -1,    -1,    -1,    -1,    -1,   524,   525,   526,    -1,
      -1,    -1,    -1,   531,    -1,   533,    -1,    -1,    -1,    -1,
      -1,   539,   540,    -1,    -1,    -1,    -1,   545,   546,     3,
       4,     5,     6,     7,    -1,     9,    10,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    -1,    32,    33,
      34,    -1,    -1,    -1,    -1,    -1,    40,    41,    -1,    -1,
      44,    45,    46,    -1,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    58,    59,    -1,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
      74,    75,    -1,    77,    78,    79,    80,    81,    -1,    83,
      -1,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    -1,    96,    97,    98,    99,   100,   101,    -1,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,    -1,   120,    -1,   122,   123,
     124,   125,   126,   127,    -1,    -1,   130,   131,   132,   133,
     134,    -1,    -1,   137,   138,   139,   140,   141,   142,   143,
      -1,   145,   146,   147,    -1,   149,   150,   151,    -1,   153,
     154,   155,   156,   157,   158,   159,   160,   161,   162,   163,
     164,   165,    -1,   167,   168,   169,   170,    -1,   172,    -1,
     174,   175,    -1,   177,   178,   179,   180,   181,   182,    -1,
     184,   185,    -1,    -1,   188,   189,   190,   191,    -1,   193,
     194,   195,   196,   197,   198,   199,   200,   201,   202,   203,
     204,    -1,   206,   207,   208,   209,   210,   211,   212,    -1,
     214,   215,   216,   217,   218,   219,   220,   221,   222,   223,
      -1,   225,    -1,   227,   228,   229,   230,   231,   232,   233,
     234,   235,   236,   237,   238,    -1,    -1,   241,   242,   243,
     244,    -1,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,    -1,
     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     294,    -1,   296,   297,    -1,    -1,   300,   301,   302,    -1,
      -1,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,    -1,    -1,    -1,    -1,   329,   330,   331,   332,   333,
     334,   335,   336,   337,   338,    -1,   340,   341,   342,   343,
     344,   345,   346,   347,    -1,   349,   350,   351,   352,   353,
     354,   355,   356,    -1,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,   371,    -1,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,   385,   386,   387,   388,   389,   390,   391,   392,    -1,
      -1,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,    -1,   406,   407,   408,   409,   410,    -1,   412,   413,
     414,   415,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,    -1,    -1,   430,   431,    -1,   433,
     434,   435,   436,   437,   438,   439,    -1,   441,   442,   443,
      -1,   445,    -1,   447,   448,   449,   450,   451,   452,   453,
     454,   455,   456,   457,   458,   459,   460,    -1,    -1,   463,
     464,   465,    -1,   467,   468,   469,   470,    -1,   472,   473,
     474,   475,   476,   477,   478,    -1,   480,   481,   482,   483,
     484,   485,   486,   487,   488,   489,   490,    -1,    -1,   493,
      -1,    -1,   496,   497,   498,   499,   500,   501,   502,   503,
     504,   505,   506,   507,   508,   509,   510,   511,   512,   513,
     514,   515,   516,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     524,   525,    -1,    -1,    -1,    -1,    -1,   531,    -1,   533,
      -1,    -1,    -1,    -1,    -1,   539,   540,    -1,    -1,    -1,
      -1,   545,   546,     3,     4,     5,     6,     7,     8,     9,
      10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    -1,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,
      40,    41,    -1,    -1,    44,    45,    46,    -1,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
      -1,    61,    62,    63,    64,    65,    66,    67,    68,    69,
      70,    71,    72,    73,    74,    75,    -1,    77,    78,    79,
      80,    81,    -1,    83,    -1,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    -1,    96,    97,    98,    99,
     100,   101,    -1,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,    -1,
     120,    -1,   122,   123,   124,   125,   126,   127,    -1,    -1,
     130,   131,   132,   133,   134,    -1,    -1,   137,   138,   139,
     140,   141,   142,   143,    -1,   145,   146,   147,    -1,   149,
     150,   151,    -1,   153,   154,   155,   156,   157,   158,   159,
     160,   161,   162,   163,   164,   165,    -1,   167,   168,   169,
     170,    -1,   172,    -1,   174,   175,    -1,   177,   178,   179,
     180,   181,   182,    -1,   184,   185,    -1,    -1,   188,   189,
     190,   191,    -1,   193,   194,   195,   196,   197,   198,   199,
     200,   201,   202,   203,   204,    -1,   206,   207,   208,   209,
     210,   211,   212,    -1,   214,   215,   216,   217,   218,   219,
     220,   221,   222,   223,    -1,   225,    -1,   227,    -1,   229,
     230,   231,   232,   233,   234,   235,   236,   237,   238,    -1,
      -1,   241,   242,   243,   244,    -1,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
     280,   281,   282,    -1,   284,   285,   286,   287,   288,   289,
     290,   291,   292,   293,   294,    -1,   296,   297,    -1,    -1,
     300,   301,   302,    -1,    -1,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,   323,   324,    -1,    -1,    -1,    -1,   329,
     330,   331,   332,   333,   334,   335,   336,   337,   338,    -1,
     340,   341,   342,   343,   344,   345,   346,   347,    -1,   349,
     350,   351,   352,   353,   354,   355,   356,    -1,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
     370,   371,    -1,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,   386,   387,   388,   389,
     390,   391,   392,    -1,    -1,   395,   396,   397,   398,   399,
     400,   401,   402,   403,   404,    -1,   406,   407,   408,   409,
     410,    -1,   412,   413,   414,   415,   416,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,    -1,    -1,
     430,   431,    -1,   433,   434,   435,   436,   437,   438,   439,
      -1,   441,   442,   443,    -1,   445,    -1,   447,   448,   449,
     450,   451,   452,   453,   454,   455,   456,   457,   458,   459,
     460,    -1,    -1,   463,   464,   465,    -1,   467,   468,   469,
     470,    -1,   472,   473,   474,   475,   476,   477,   478,    -1,
     480,   481,   482,   483,   484,   485,   486,   487,   488,   489,
     490,    -1,    -1,   493,    -1,    -1,   496,   497,   498,   499,
     500,   501,   502,   503,   504,   505,   506,   507,   508,   509,
     510,   511,   512,   513,   514,   515,   516,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   524,   525,    -1,    -1,    -1,    -1,
      -1,   531,    -1,   533,    -1,    -1,    -1,    -1,    -1,   539,
     540,    -1,    -1,    -1,    -1,   545,   546,     3,     4,     5,
       6,     7,    -1,     9,    10,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    -1,    32,    33,    34,    -1,
      -1,    -1,    -1,    -1,    40,    41,    -1,    -1,    44,    45,
      46,    -1,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    -1,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
      -1,    77,    78,    79,    80,    81,    -1,    83,    -1,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    -1,
      96,    97,    98,    99,   100,   101,    -1,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,    -1,   120,    -1,   122,   123,   124,   125,
     126,   127,    -1,    -1,   130,   131,   132,   133,   134,    -1,
      -1,   137,   138,   139,   140,   141,   142,   143,    -1,   145,
     146,   147,    -1,   149,   150,   151,    -1,   153,   154,   155,
     156,   157,   158,   159,   160,   161,   162,   163,   164,   165,
      -1,   167,   168,   169,   170,    -1,   172,    -1,   174,   175,
      -1,   177,   178,   179,   180,   181,   182,    -1,   184,   185,
      -1,   187,   188,   189,   190,   191,    -1,   193,   194,   195,
     196,   197,   198,   199,   200,   201,   202,   203,   204,   205,
     206,   207,   208,   209,   210,   211,   212,    -1,   214,   215,
     216,   217,   218,   219,   220,   221,   222,   223,    -1,   225,
      -1,   227,   228,   229,   230,   231,   232,   233,   234,   235,
     236,   237,   238,    -1,    -1,   241,   242,   243,   244,    -1,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,   280,   281,   282,    -1,   284,   285,
     286,   287,   288,   289,   290,   291,   292,   293,   294,    -1,
     296,   297,    -1,    -1,   300,   301,   302,    -1,    -1,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,   323,   324,    -1,
      -1,    -1,    -1,   329,   330,   331,   332,   333,   334,   335,
     336,   337,   338,    -1,   340,   341,   342,   343,   344,   345,
     346,   347,    -1,   349,   350,   351,   352,   353,   354,   355,
     356,    -1,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,    -1,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,   385,
     386,   387,   388,   389,   390,   391,   392,    -1,    -1,   395,
     396,   397,   398,   399,   400,   401,   402,   403,   404,    -1,
     406,   407,   408,   409,   410,    -1,   412,   413,   414,   415,
     416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,    -1,    -1,   430,   431,    -1,   433,   434,   435,
     436,   437,   438,   439,    -1,   441,   442,   443,    -1,   445,
      -1,   447,   448,   449,   450,   451,   452,   453,   454,   455,
     456,   457,   458,   459,   460,    -1,    -1,   463,   464,   465,
      -1,   467,   468,   469,   470,    -1,   472,   473,   474,   475,
     476,   477,   478,    -1,   480,   481,   482,   483,   484,   485,
     486,   487,   488,   489,   490,    -1,    -1,   493,    -1,    -1,
     496,   497,   498,   499,   500,   501,   502,   503,   504,   505,
     506,   507,   508,   509,   510,   511,   512,   513,   514,   515,
     516,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   531,    -1,   533,    -1,    -1,
      -1,    -1,    -1,   539,   540,    -1,    -1,    -1,    -1,   545,
     546,     3,     4,     5,     6,     7,    -1,     9,    10,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    -1,
      32,    33,    34,    -1,    -1,    -1,    -1,    -1,    40,    41,
      -1,    -1,    44,    45,    46,    -1,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    58,    59,    -1,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
      72,    73,    74,    75,    -1,    77,    78,    79,    80,    81,
      -1,    83,    -1,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    -1,    96,    97,    98,    99,   100,   101,
      -1,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,    -1,   120,    -1,
     122,   123,   124,   125,   126,   127,    -1,    -1,   130,   131,
     132,   133,   134,    -1,    -1,   137,   138,   139,   140,   141,
     142,   143,    -1,   145,   146,   147,    -1,   149,   150,   151,
      -1,   153,   154,   155,   156,   157,   158,   159,   160,   161,
     162,   163,   164,   165,    -1,   167,   168,   169,   170,    -1,
     172,    -1,   174,   175,    -1,   177,   178,   179,   180,   181,
     182,    -1,   184,   185,    -1,    -1,   188,   189,   190,   191,
      -1,   193,   194,   195,   196,   197,   198,   199,   200,   201,
     202,   203,   204,    -1,   206,   207,   208,   209,   210,   211,
     212,    -1,   214,   215,   216,   217,   218,   219,   220,   221,
     222,   223,    -1,   225,    -1,   227,   228,   229,   230,   231,
     232,   233,   234,   235,   236,   237,   238,    -1,    -1,   241,
     242,   243,   244,    -1,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     282,    -1,   284,   285,   286,   287,   288,   289,   290,   291,
     292,   293,   294,    -1,   296,   297,    -1,    -1,   300,   301,
     302,    -1,    -1,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,   323,   324,    -1,    -1,    -1,    -1,   329,   330,   331,
     332,   333,   334,   335,   336,   337,   338,    -1,   340,   341,
     342,   343,   344,   345,   346,   347,    -1,   349,   350,   351,
     352,   353,   354,   355,   356,    -1,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
      -1,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,   386,   387,   388,   389,   390,   391,
     392,    -1,    -1,   395,   396,   397,   398,   399,   400,   401,
     402,   403,   404,    -1,   406,   407,   408,   409,   410,    -1,
     412,   413,   414,   415,   416,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,    -1,    -1,   430,   431,
      -1,   433,   434,   435,   436,   437,   438,   439,    -1,   441,
     442,   443,    -1,   445,    -1,   447,   448,   449,   450,   451,
     452,   453,   454,   455,   456,   457,   458,   459,   460,    -1,
      -1,   463,   464,   465,    -1,   467,   468,   469,   470,    -1,
     472,   473,   474,   475,   476,   477,   478,    -1,   480,   481,
     482,   483,   484,   485,   486,   487,   488,   489,   490,    -1,
      -1,   493,    -1,    -1,   496,   497,   498,   499,   500,   501,
     502,   503,   504,   505,   506,   507,   508,   509,   510,   511,
     512,   513,   514,   515,   516,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   531,
      -1,   533,    -1,    -1,    -1,    -1,    -1,   539,   540,    -1,
      -1,    -1,    -1,   545,   546,     3,     4,     5,     6,     7,
      -1,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    -1,    32,    33,    34,    -1,    -1,    -1,
      -1,    -1,    40,    41,    -1,    -1,    44,    45,    46,    -1,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      58,    59,    -1,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    72,    73,    74,    75,    -1,    77,
      78,    79,    80,    81,    -1,    83,    -1,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    -1,    96,    97,
      98,    99,   100,   101,    -1,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,    -1,   120,    -1,   122,   123,   124,   125,   126,   127,
      -1,    -1,   130,   131,   132,   133,   134,    -1,    -1,   137,
     138,   139,   140,   141,   142,   143,    -1,   145,   146,   147,
      -1,   149,   150,   151,    -1,   153,   154,   155,   156,   157,
     158,   159,   160,   161,   162,   163,   164,   165,    -1,   167,
     168,   169,   170,    -1,   172,    -1,   174,   175,    -1,   177,
     178,   179,   180,   181,   182,    -1,   184,   185,    -1,    -1,
     188,   189,   190,   191,    -1,   193,   194,   195,   196,   197,
     198,   199,   200,   201,   202,   203,   204,    -1,   206,   207,
     208,   209,   210,   211,   212,    -1,   214,   215,   216,   217,
     218,   219,   220,   221,   222,   223,    -1,   225,    -1,   227,
     228,   229,   230,   231,   232,   233,   234,   235,   236,   237,
     238,    -1,    -1,   241,   242,   243,   244,    -1,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,   280,   281,   282,    -1,   284,   285,   286,   287,
     288,   289,   290,   291,   292,   293,   294,    -1,   296,   297,
      -1,    -1,   300,   301,   302,    -1,    -1,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323,   324,    -1,    -1,    -1,
      -1,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     338,    -1,   340,   341,   342,   343,   344,   345,   346,   347,
      -1,   349,   350,   351,   352,   353,   354,   355,   356,    -1,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,   371,    -1,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,   386,   387,
     388,   389,   390,   391,   392,    -1,    -1,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,    -1,   406,   407,
     408,   409,   410,    -1,   412,   413,   414,   415,   416,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
      -1,    -1,   430,   431,    -1,   433,   434,   435,   436,   437,
     438,   439,    -1,   441,   442,   443,    -1,   445,    -1,   447,
     448,   449,   450,   451,   452,   453,   454,   455,   456,   457,
     458,   459,   460,    -1,    -1,   463,   464,   465,    -1,   467,
     468,   469,   470,    -1,   472,   473,   474,   475,   476,   477,
     478,    -1,   480,   481,   482,   483,   484,   485,   486,   487,
     488,   489,   490,    -1,    -1,   493,    -1,    -1,   496,   497,
     498,   499,   500,   501,   502,   503,   504,   505,   506,   507,
     508,   509,   510,   511,   512,   513,   514,   515,   516,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   531,    -1,   533,    -1,    -1,    -1,    -1,
      -1,   539,   540,    -1,    -1,    -1,    -1,   545,   546,     3,
       4,     5,     6,     7,     8,     9,    10,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    -1,    32,    33,
      34,    -1,    -1,    -1,    -1,    -1,    40,    41,    -1,    -1,
      44,    45,    46,    -1,    48,    49,    50,    51,    52,    53,
      54,    -1,    56,    57,    58,    59,    -1,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
      74,    75,    -1,    77,    78,    79,    80,    81,    -1,    83,
      -1,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    -1,    96,    97,    98,    99,   100,   101,    -1,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,    -1,   122,   123,
     124,   125,   126,   127,    -1,    -1,   130,   131,   132,   133,
     134,    -1,    -1,   137,   138,   139,   140,   141,   142,   143,
      -1,   145,   146,   147,    -1,   149,    -1,   151,    -1,   153,
     154,   155,   156,   157,   158,   159,   160,   161,   162,   163,
     164,   165,    -1,   167,   168,   169,   170,    -1,   172,    -1,
     174,   175,    -1,   177,   178,   179,   180,    -1,   182,    -1,
     184,   185,    -1,    -1,   188,   189,   190,   191,    -1,   193,
     194,   195,   196,   197,   198,   199,    -1,   201,   202,   203,
     204,    -1,   206,   207,   208,   209,   210,   211,   212,    -1,
     214,   215,   216,   217,   218,   219,   220,   221,   222,   223,
      -1,   225,    -1,   227,    -1,    -1,   230,   231,   232,   233,
     234,   235,   236,   237,   238,    -1,    -1,   241,   242,   243,
      -1,    -1,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,    -1,
     284,   285,    -1,   287,   288,   289,   290,   291,   292,   293,
     294,    -1,   296,   297,    -1,    -1,   300,   301,   302,    -1,
      -1,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,    -1,    -1,    -1,    -1,   329,   330,   331,   332,   333,
     334,   335,   336,   337,   338,    -1,   340,   341,   342,   343,
     344,   345,   346,   347,    -1,   349,   350,   351,   352,   353,
     354,   355,   356,    -1,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,   371,    -1,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,   385,   386,   387,   388,   389,   390,   391,   392,    -1,
      -1,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,    -1,    -1,   407,   408,   409,   410,    -1,   412,   413,
     414,   415,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,    -1,    -1,   430,   431,    -1,   433,
     434,   435,   436,   437,   438,   439,    -1,   441,   442,   443,
      -1,   445,    -1,   447,   448,   449,   450,   451,   452,   453,
     454,   455,   456,   457,   458,   459,   460,    -1,    -1,   463,
     464,   465,    -1,   467,   468,   469,   470,    -1,   472,   473,
     474,   475,   476,   477,   478,    -1,   480,   481,   482,   483,
     484,   485,   486,   487,   488,   489,   490,    -1,    -1,   493,
      -1,    -1,   496,   497,   498,   499,   500,   501,   502,   503,
     504,   505,   506,   507,   508,   509,   510,   511,   512,   513,
     514,   515,   516,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     524,   525,   526,    -1,     3,    -1,    -1,   531,    -1,   533,
      -1,    -1,    -1,    -1,    -1,   539,   540,    -1,    -1,    -1,
      -1,   545,   546,    22,    23,    24,    25,    -1,    27,    28,
      29,    30,    -1,    32,    33,    34,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    45,    46,    -1,    48,
      49,    50,    -1,    52,    53,    54,    55,    56,    -1,    58,
      59,    -1,    61,    62,    63,    64,    65,    66,    -1,    -1,
      69,    70,    71,    72,    73,    74,    75,    -1,    77,    78,
      79,    80,    81,    -1,    -1,    -1,    -1,    86,    87,    88,
      89,    90,    -1,    92,    93,    94,    -1,    96,    97,    98,
      99,   100,    -1,    -1,    -1,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
      -1,   120,    -1,   122,   123,   124,   125,   126,   127,    -1,
      -1,    -1,   131,   132,   133,   134,    -1,    -1,   137,   138,
     139,   140,   141,    -1,    -1,    -1,   145,   146,   147,    -1,
     149,   150,   151,    -1,   153,   154,   155,   156,   157,   158,
     159,   160,   161,   162,   163,    -1,   165,    -1,   167,   168,
     169,   170,    -1,   172,    -1,   174,    -1,    -1,    -1,   178,
     179,   180,    -1,   182,    -1,   184,    -1,    -1,    -1,   188,
     189,    -1,   191,    -1,   193,   194,   195,   196,   197,   198,
     199,    -1,   201,   202,   203,   204,    -1,   206,   207,   208,
     209,   210,   211,   212,    -1,   214,    -1,   216,   217,   218,
     219,   220,   221,   222,   223,    -1,   225,    -1,   227,    -1,
      -1,   230,    -1,   232,    -1,   234,   235,   236,   237,   238,
      -1,    -1,   241,    -1,   243,    -1,    -1,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,    -1,   277,   278,
     279,   280,    -1,   282,    -1,   284,   285,    -1,   287,    -1,
     289,   290,   291,   292,   293,   294,    -1,   296,   297,    -1,
      -1,   300,   301,   302,    -1,    -1,   305,   306,   307,    -1,
     309,    -1,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,    -1,    -1,   323,   324,    -1,    -1,    -1,    -1,
     329,   330,   331,    -1,   333,   334,   335,   336,   337,   338,
      -1,   340,   341,   342,   343,   344,    -1,    -1,   347,    -1,
     349,   350,   351,   352,   353,   354,   355,   356,    -1,   358,
     359,   360,    -1,   362,   363,   364,   365,   366,   367,   368,
     369,   370,   371,    -1,   373,   374,    -1,   376,   377,   378,
     379,   380,   381,   382,   383,   384,   385,   386,   387,   388,
     389,   390,   391,   392,    -1,    -1,   395,   396,   397,   398,
     399,   400,   401,   402,   403,    -1,    -1,    -1,    -1,   408,
     409,   410,    -1,    -1,   413,   414,   415,   416,   417,   418,
     419,   420,   421,   422,   423,   424,   425,   426,   427,    -1,
      -1,   430,   431,    -1,   433,    -1,   435,   436,   437,   438,
     439,    -1,   441,   442,   443,    -1,    -1,    -1,   447,   448,
     449,   450,   451,    -1,   453,   454,   455,   456,   457,   458,
     459,   460,    -1,    -1,   463,   464,   465,    -1,   467,   468,
     469,   470,    -1,   472,   473,   474,   475,   476,   477,   478,
      -1,   480,    -1,   482,    -1,   484,   485,   486,   487,    -1,
     489,   490,    -1,    -1,   493,    -1,    -1,   496,   497,   498,
     499,   500,   501,   502,   503,   504,   505,   506,   507,   508,
     509,   510,   511,   512,   513,   514,   515,   516,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,     3,     4,     5,    -1,
      -1,    -1,     9,    -1,   533,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   543,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    -1,    32,    33,    34,    -1,    -1,
      -1,    38,    -1,    40,    -1,    -1,    -1,    44,    45,    46,
      -1,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    58,    59,    -1,    61,    62,    63,    64,    65,    66,
      -1,    -1,    69,    70,    71,    72,    73,    74,    75,    -1,
      77,    78,    79,    80,    81,    -1,    83,    -1,    85,    86,
      87,    88,    89,    90,    91,    92,    93,    94,    -1,    96,
      97,    98,    99,   100,   101,    -1,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,   118,    -1,   120,    -1,   122,   123,   124,   125,   126,
     127,    -1,    -1,   130,   131,   132,   133,   134,    -1,    -1,
     137,   138,   139,   140,   141,   142,   143,    -1,   145,   146,
     147,    -1,   149,   150,   151,    -1,   153,   154,   155,   156,
     157,   158,   159,   160,   161,   162,   163,   164,   165,    -1,
     167,   168,   169,   170,    -1,   172,    -1,   174,   175,    -1,
     177,   178,   179,   180,   181,   182,    -1,   184,   185,    -1,
      -1,   188,   189,   190,   191,    -1,   193,   194,   195,   196,
     197,   198,   199,   200,   201,   202,   203,   204,    -1,   206,
     207,   208,   209,   210,   211,   212,    -1,   214,   215,   216,
     217,   218,   219,   220,   221,   222,   223,    -1,   225,    -1,
     227,   228,   229,   230,   231,   232,   233,   234,   235,   236,
     237,   238,    -1,    -1,   241,   242,   243,   244,    -1,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,    -1,   284,   285,   286,
     287,    -1,   289,   290,   291,   292,   293,   294,    -1,   296,
     297,   298,    -1,   300,   301,   302,    -1,    -1,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,   323,   324,    -1,    -1,
      -1,    -1,   329,   330,   331,   332,   333,   334,   335,   336,
     337,   338,    -1,   340,   341,   342,   343,   344,   345,   346,
     347,    -1,   349,   350,   351,   352,   353,   354,   355,   356,
      -1,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,   370,   371,    -1,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,   386,
     387,   388,   389,   390,   391,   392,    -1,   394,   395,   396,
     397,   398,   399,   400,   401,   402,   403,   404,    -1,   406,
     407,   408,   409,   410,    -1,   412,   413,   414,   415,   416,
     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
     427,    -1,    -1,   430,   431,    -1,   433,   434,   435,   436,
     437,   438,   439,    -1,   441,   442,   443,    -1,   445,    -1,
     447,   448,   449,   450,   451,   452,   453,   454,   455,   456,
     457,   458,   459,   460,    -1,    -1,   463,   464,   465,    -1,
     467,   468,   469,   470,    -1,   472,   473,   474,   475,   476,
     477,   478,    -1,   480,   481,   482,   483,   484,   485,   486,
     487,   488,   489,   490,    -1,    -1,   493,    -1,    -1,   496,
     497,   498,   499,   500,   501,   502,   503,   504,   505,   506,
     507,   508,   509,   510,   511,   512,   513,   514,   515,   516,
      -1,    -1,    -1,    -1,    -1,     3,    -1,   524,   525,   526,
      -1,    -1,    -1,    -1,    -1,    -1,   533,    -1,    -1,    -1,
      -1,    -1,    -1,   540,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    -1,    32,    33,    34,    -1,    -1,    -1,
      -1,    -1,    40,    -1,    42,    -1,    -1,    45,    46,    -1,
      48,    49,    50,    -1,    52,    53,    54,    55,    56,    -1,
      58,    59,    -1,    61,    62,    63,    64,    65,    66,    -1,
      -1,    69,    70,    71,    72,    73,    74,    75,    -1,    77,
      78,    79,    80,    81,    -1,    -1,    -1,    85,    86,    87,
      88,    89,    90,    -1,    92,    93,    94,    -1,    96,    97,
      98,    99,   100,   101,    -1,    -1,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,    -1,   120,    -1,   122,   123,   124,   125,   126,   127,
      -1,    -1,   130,   131,   132,   133,   134,    -1,    -1,   137,
     138,   139,   140,   141,   142,   143,    -1,   145,   146,   147,
      -1,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,   159,   160,   161,   162,   163,    -1,   165,   166,   167,
     168,   169,   170,   171,   172,    -1,   174,    -1,    -1,    -1,
     178,   179,   180,    -1,   182,    -1,   184,   185,    -1,    -1,
     188,   189,   190,   191,    -1,   193,   194,   195,   196,   197,
     198,   199,    -1,   201,   202,   203,   204,    -1,   206,   207,
     208,   209,   210,   211,   212,    -1,   214,    -1,   216,   217,
     218,   219,   220,   221,   222,   223,   224,   225,    -1,   227,
      -1,    -1,   230,    -1,   232,   233,   234,   235,   236,   237,
     238,    -1,    -1,   241,    -1,   243,    -1,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,    -1,   277,
     278,   279,   280,   281,   282,    -1,   284,   285,    -1,   287,
      -1,   289,   290,   291,   292,   293,   294,   295,   296,   297,
      -1,    -1,   300,   301,   302,    -1,   304,   305,   306,   307,
      -1,   309,    -1,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323,   324,    -1,    -1,    -1,
      -1,   329,   330,   331,    -1,   333,   334,   335,   336,   337,
     338,    -1,   340,   341,   342,   343,   344,   345,   346,   347,
      -1,   349,   350,   351,   352,   353,   354,   355,   356,    -1,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,   371,    -1,   373,   374,    -1,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,   386,   387,
     388,   389,   390,   391,   392,    -1,    -1,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,    -1,    -1,   407,
     408,   409,   410,    -1,   412,   413,   414,   415,   416,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
      -1,    -1,   430,   431,    -1,   433,    -1,   435,   436,   437,
     438,   439,    -1,   441,   442,   443,    -1,   445,    -1,   447,
     448,   449,   450,   451,    -1,   453,   454,   455,   456,   457,
     458,   459,   460,   461,    -1,   463,   464,   465,    -1,   467,
     468,   469,   470,    -1,   472,   473,   474,   475,   476,   477,
     478,    -1,   480,    -1,   482,   483,   484,   485,   486,   487,
     488,   489,   490,    -1,    -1,   493,    -1,    -1,   496,   497,
     498,   499,   500,   501,   502,   503,   504,   505,   506,   507,
     508,   509,   510,   511,   512,   513,   514,   515,   516,     3,
      -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   534,    -1,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    -1,    32,    33,
      34,    -1,    -1,    -1,    -1,    -1,    40,    -1,    -1,    -1,
      -1,    45,    46,    -1,    48,    49,    50,    -1,    52,    53,
      54,    55,    56,    -1,    58,    59,    -1,    61,    62,    63,
      64,    65,    66,    -1,    -1,    69,    70,    71,    72,    73,
      74,    75,    -1,    77,    78,    79,    80,    81,    -1,    -1,
      -1,    85,    86,    87,    88,    89,    90,    -1,    92,    93,
      94,    -1,    96,    97,    98,    99,   100,   101,    -1,    -1,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,    -1,   120,    -1,   122,   123,
     124,   125,   126,   127,    -1,    -1,   130,   131,   132,   133,
     134,    -1,    -1,   137,   138,   139,   140,   141,   142,   143,
      -1,   145,   146,   147,    -1,   149,   150,   151,    -1,   153,
     154,   155,   156,   157,   158,   159,   160,   161,   162,   163,
      -1,   165,    -1,   167,   168,   169,   170,    -1,   172,    -1,
     174,    -1,    -1,    -1,   178,   179,   180,    -1,   182,    -1,
     184,   185,    -1,    -1,   188,   189,   190,   191,    -1,   193,
     194,   195,   196,   197,   198,   199,    -1,   201,   202,   203,
     204,    -1,   206,   207,   208,   209,   210,   211,   212,    -1,
     214,    -1,   216,   217,   218,   219,   220,   221,   222,   223,
      -1,   225,    -1,   227,    -1,    -1,   230,    -1,   232,   233,
     234,   235,   236,   237,   238,    -1,    -1,   241,    -1,   243,
      -1,    -1,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,    -1,   277,   278,   279,   280,   281,   282,    -1,
     284,   285,    -1,   287,    -1,   289,   290,   291,   292,   293,
     294,    -1,   296,   297,    -1,    -1,   300,   301,   302,    -1,
      -1,   305,   306,   307,    -1,   309,    -1,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,    -1,    -1,    -1,    -1,   329,   330,   331,    -1,   333,
     334,   335,   336,   337,   338,    -1,   340,   341,   342,   343,
     344,   345,   346,   347,    -1,   349,   350,   351,   352,   353,
     354,   355,   356,    -1,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,   371,    -1,   373,
     374,    -1,   376,   377,   378,   379,   380,   381,   382,   383,
     384,   385,   386,   387,   388,   389,   390,   391,   392,    -1,
      -1,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,    -1,    -1,   407,   408,   409,   410,    -1,   412,   413,
     414,   415,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,    -1,    -1,   430,   431,    -1,   433,
      -1,   435,   436,   437,   438,   439,    -1,   441,   442,   443,
      -1,   445,    -1,   447,   448,   449,   450,   451,    -1,   453,
     454,   455,   456,   457,   458,   459,   460,    -1,    -1,   463,
     464,   465,    -1,   467,   468,   469,   470,    -1,   472,   473,
     474,   475,   476,   477,   478,    -1,   480,    -1,   482,   483,
     484,   485,   486,   487,   488,   489,   490,    -1,    -1,   493,
      -1,    -1,   496,   497,   498,   499,   500,   501,   502,   503,
     504,   505,   506,   507,   508,   509,   510,   511,   512,   513,
     514,   515,   516,     3,    -1,     5,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   533,
     534,    -1,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    -1,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,
      40,    -1,    -1,    -1,    44,    45,    46,    -1,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
      -1,    61,    62,    63,    64,    65,    66,    -1,    68,    69,
      70,    71,    72,    73,    74,    75,    -1,    77,    78,    79,
      80,    81,    -1,    83,    -1,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    -1,    96,    97,    98,    99,
     100,   101,    -1,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,    -1,
     120,    -1,   122,   123,   124,   125,   126,   127,   128,   129,
     130,   131,   132,   133,   134,    -1,    -1,   137,   138,   139,
     140,   141,   142,   143,    -1,   145,   146,   147,    -1,   149,
     150,   151,    -1,   153,   154,   155,   156,   157,   158,   159,
     160,   161,   162,   163,    -1,   165,    -1,   167,   168,   169,
     170,    -1,   172,    -1,   174,   175,   176,   177,   178,   179,
     180,   181,   182,    -1,   184,   185,   186,    -1,   188,   189,
     190,   191,    -1,   193,   194,   195,   196,   197,   198,   199,
     200,   201,   202,   203,   204,    -1,   206,   207,   208,   209,
     210,   211,   212,    -1,   214,   215,   216,   217,   218,   219,
     220,   221,   222,   223,    -1,   225,    -1,   227,   228,   229,
     230,   231,   232,   233,   234,   235,   236,   237,   238,   239,
      -1,   241,   242,   243,   244,    -1,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
     280,   281,   282,    -1,   284,   285,   286,   287,    -1,   289,
     290,   291,   292,   293,   294,    -1,   296,   297,    -1,   299,
     300,   301,   302,    -1,    -1,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,   323,   324,   325,   326,   327,    -1,   329,
     330,   331,   332,   333,   334,   335,   336,   337,   338,    -1,
     340,   341,   342,   343,   344,   345,   346,   347,    -1,   349,
     350,   351,   352,   353,   354,   355,   356,    -1,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
     370,   371,    -1,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,   386,   387,   388,   389,
     390,   391,   392,   393,    -1,   395,   396,   397,   398,   399,
     400,   401,   402,   403,   404,   405,   406,   407,   408,   409,
     410,    -1,   412,   413,   414,   415,   416,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,   428,    -1,
     430,   431,   432,   433,   434,   435,   436,   437,   438,   439,
      -1,   441,   442,   443,    -1,   445,    -1,   447,   448,   449,
     450,   451,    -1,   453,   454,   455,   456,   457,   458,   459,
     460,    -1,    -1,   463,   464,   465,   466,   467,   468,   469,
     470,    -1,   472,   473,   474,   475,   476,   477,   478,    -1,
     480,   481,   482,   483,   484,   485,   486,   487,   488,   489,
     490,    -1,    -1,   493,    -1,   495,   496,   497,   498,   499,
     500,   501,   502,   503,   504,   505,   506,   507,   508,   509,
     510,   511,   512,   513,   514,   515,   516,     3,    -1,   519,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   533,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    -1,    32,    33,    34,    35,
      36,    -1,    38,    -1,    40,    -1,    -1,    -1,    44,    45,
      46,    -1,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    -1,    61,    62,    63,    64,    65,
      66,    -1,    -1,    69,    70,    71,    72,    73,    74,    75,
      -1,    77,    78,    79,    80,    81,    -1,    83,    -1,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    -1,
      96,    97,    98,    99,   100,   101,    -1,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,    -1,   120,    -1,   122,   123,   124,   125,
     126,   127,   128,   129,   130,   131,   132,   133,   134,    -1,
      -1,   137,   138,   139,   140,   141,   142,   143,    -1,   145,
     146,   147,    -1,   149,   150,   151,    -1,   153,   154,   155,
     156,   157,   158,   159,   160,   161,   162,   163,    -1,   165,
      -1,   167,   168,   169,   170,    -1,   172,    -1,   174,   175,
     176,   177,   178,   179,   180,   181,   182,    -1,   184,   185,
      -1,    -1,   188,   189,   190,   191,    -1,   193,   194,   195,
     196,   197,   198,   199,   200,   201,   202,   203,   204,    -1,
     206,   207,   208,   209,   210,   211,   212,    -1,   214,   215,
     216,   217,   218,   219,   220,   221,   222,   223,    -1,   225,
      -1,   227,   228,   229,   230,   231,   232,   233,   234,   235,
     236,   237,   238,    -1,    -1,   241,   242,   243,   244,    -1,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,   280,   281,   282,    -1,   284,   285,
     286,   287,    -1,   289,   290,   291,   292,   293,   294,    -1,
     296,   297,    -1,    -1,   300,   301,   302,    -1,    -1,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
     326,   327,    -1,   329,   330,   331,   332,   333,   334,   335,
     336,   337,   338,    -1,   340,   341,   342,   343,   344,   345,
     346,   347,    -1,   349,   350,   351,   352,   353,   354,   355,
     356,    -1,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,    -1,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,   385,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,   403,   404,   405,
     406,   407,   408,   409,   410,    -1,   412,   413,   414,   415,
     416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,   428,    -1,   430,   431,   432,   433,   434,   435,
     436,   437,   438,   439,    -1,   441,   442,   443,    -1,   445,
      -1,   447,   448,   449,   450,   451,    -1,   453,   454,   455,
     456,   457,   458,   459,   460,    -1,    -1,   463,   464,   465,
     466,   467,   468,   469,   470,    -1,   472,   473,   474,   475,
     476,   477,   478,    -1,   480,   481,   482,   483,   484,   485,
     486,   487,   488,   489,   490,    -1,    -1,   493,    -1,   495,
     496,   497,   498,   499,   500,   501,   502,   503,   504,   505,
     506,   507,   508,   509,   510,   511,   512,   513,   514,   515,
     516,    -1,     3,   519,     5,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   533,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    30,
      -1,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,    40,
      -1,    -1,    -1,    44,    45,    46,    -1,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    58,    59,    -1,
      61,    62,    63,    64,    65,    66,    -1,    68,    69,    70,
      71,    72,    73,    74,    75,    -1,    77,    78,    79,    80,
      81,    -1,    83,    -1,    85,    86,    87,    88,    89,    90,
      91,    92,    93,    94,    -1,    96,    97,    98,    99,   100,
     101,    -1,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,    -1,   120,
      -1,   122,   123,   124,   125,   126,   127,    -1,    -1,   130,
     131,   132,   133,   134,    -1,    -1,   137,   138,   139,   140,
     141,   142,   143,    -1,   145,   146,   147,    -1,   149,   150,
     151,    -1,   153,   154,   155,   156,   157,   158,   159,   160,
     161,   162,   163,    -1,   165,    -1,   167,   168,   169,   170,
      -1,   172,    -1,   174,   175,    -1,   177,   178,   179,   180,
     181,   182,    -1,   184,   185,   186,    -1,   188,   189,   190,
     191,    -1,   193,   194,   195,   196,   197,   198,   199,   200,
     201,   202,   203,   204,    -1,   206,   207,   208,   209,   210,
     211,   212,    -1,   214,   215,   216,   217,   218,   219,   220,
     221,   222,   223,    -1,   225,    -1,   227,   228,   229,   230,
     231,   232,   233,   234,   235,   236,   237,   238,   239,    -1,
     241,   242,   243,   244,    -1,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,    -1,   284,   285,   286,   287,    -1,   289,   290,
     291,   292,   293,   294,    -1,   296,   297,    -1,   299,   300,
     301,   302,    -1,    -1,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,   322,   323,   324,    -1,    -1,    -1,    -1,   329,   330,
     331,   332,   333,   334,   335,   336,   337,   338,    -1,   340,
     341,   342,   343,   344,   345,   346,   347,    -1,   349,   350,
     351,   352,   353,   354,   355,   356,    -1,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,    -1,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,   385,   386,   387,   388,   389,   390,
     391,   392,    -1,    -1,   395,   396,   397,   398,   399,   400,
     401,   402,   403,   404,    -1,   406,   407,   408,   409,   410,
      -1,   412,   413,   414,   415,   416,   417,   418,   419,   420,
     421,   422,   423,   424,   425,   426,   427,    -1,    -1,   430,
     431,    -1,   433,   434,   435,   436,   437,   438,   439,    -1,
     441,   442,   443,    -1,   445,    -1,   447,   448,   449,   450,
     451,    -1,   453,   454,   455,   456,   457,   458,   459,   460,
      -1,    -1,   463,   464,   465,    -1,   467,   468,   469,   470,
      -1,   472,   473,   474,   475,   476,   477,   478,    -1,   480,
     481,   482,   483,   484,   485,   486,   487,   488,   489,   490,
      -1,    -1,   493,    -1,    -1,   496,   497,   498,   499,   500,
     501,   502,   503,   504,   505,   506,   507,   508,   509,   510,
     511,   512,   513,   514,   515,   516,     3,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   533,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    -1,    32,    33,    34,    -1,    -1,
      -1,    -1,    -1,    40,    -1,    -1,    -1,    44,    45,    46,
      -1,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    58,    59,    -1,    61,    62,    63,    64,    65,    66,
      -1,    68,    69,    70,    71,    72,    73,    74,    75,    -1,
      77,    78,    79,    80,    81,    -1,    83,    -1,    85,    86,
      87,    88,    89,    90,    91,    92,    93,    94,    -1,    96,
      97,    98,    99,   100,   101,    -1,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,   118,    -1,   120,    -1,   122,   123,   124,   125,   126,
     127,    -1,    -1,   130,   131,   132,   133,   134,    -1,    -1,
     137,   138,   139,   140,   141,   142,   143,    -1,   145,   146,
     147,    -1,   149,   150,   151,    -1,   153,   154,   155,   156,
     157,   158,   159,   160,   161,   162,   163,    -1,   165,    -1,
     167,   168,   169,   170,    -1,   172,    -1,   174,   175,    -1,
     177,   178,   179,   180,   181,   182,    -1,   184,   185,    -1,
      -1,   188,   189,   190,   191,    -1,   193,   194,   195,   196,
     197,   198,   199,   200,   201,   202,   203,   204,    -1,   206,
     207,   208,   209,   210,   211,   212,    -1,   214,   215,   216,
     217,   218,   219,   220,   221,   222,   223,    -1,   225,    -1,
     227,   228,   229,   230,   231,   232,   233,   234,   235,   236,
     237,   238,    -1,    -1,   241,   242,   243,   244,    -1,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,    -1,   284,   285,   286,
     287,    -1,   289,   290,   291,   292,   293,   294,    -1,   296,
     297,    -1,    -1,   300,   301,   302,    -1,    -1,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,   323,   324,    -1,    -1,
      -1,    -1,   329,   330,   331,   332,   333,   334,   335,   336,
     337,   338,    -1,   340,   341,   342,   343,   344,   345,   346,
     347,    -1,   349,   350,   351,   352,   353,   354,   355,   356,
      -1,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,   370,   371,    -1,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,   386,
     387,   388,   389,   390,   391,   392,    -1,    -1,   395,   396,
     397,   398,   399,   400,   401,   402,   403,   404,    -1,   406,
     407,   408,   409,   410,    -1,   412,   413,   414,   415,   416,
     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
     427,    -1,    -1,   430,   431,    -1,   433,   434,   435,   436,
     437,   438,   439,    -1,   441,   442,   443,    -1,   445,    -1,
     447,   448,   449,   450,   451,    -1,   453,   454,   455,   456,
     457,   458,   459,   460,    -1,    -1,   463,   464,   465,    -1,
     467,   468,   469,   470,    -1,   472,   473,   474,   475,   476,
     477,   478,    -1,   480,   481,   482,   483,   484,   485,   486,
     487,   488,   489,   490,    -1,    -1,   493,    -1,    -1,   496,
     497,   498,   499,   500,   501,   502,   503,   504,   505,   506,
     507,   508,   509,   510,   511,   512,   513,   514,   515,   516,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   533,    -1,    -1,    22,
      23,    24,    25,    26,    27,    28,    29,    30,    -1,    32,
      33,    34,    -1,    -1,    -1,    -1,    -1,    40,    -1,    -1,
      -1,    44,    45,    46,    -1,    48,    49,    50,    51,    52,
      53,    54,    55,    56,    57,    58,    59,    -1,    61,    62,
      63,    64,    65,    66,    -1,    68,    69,    70,    71,    72,
      73,    74,    75,    -1,    77,    78,    79,    80,    81,    -1,
      83,    -1,    85,    86,    87,    88,    89,    90,    91,    92,
      93,    94,    -1,    96,    97,    98,    99,   100,   101,    -1,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,   117,   118,    -1,   120,    -1,   122,
     123,   124,   125,   126,   127,    -1,    -1,   130,   131,   132,
     133,   134,    -1,    -1,   137,   138,   139,   140,   141,   142,
     143,    -1,   145,   146,   147,    -1,   149,   150,   151,    -1,
     153,   154,   155,   156,   157,   158,   159,   160,   161,   162,
     163,    -1,   165,    -1,   167,   168,   169,   170,    -1,   172,
      -1,   174,   175,    -1,   177,   178,   179,   180,   181,   182,
      -1,   184,   185,    -1,    -1,   188,   189,   190,   191,    -1,
     193,   194,   195,   196,   197,   198,   199,   200,   201,   202,
     203,   204,    -1,   206,   207,   208,   209,   210,   211,   212,
      -1,   214,   215,   216,   217,   218,   219,   220,   221,   222,
     223,    -1,   225,    -1,   227,   228,   229,   230,   231,   232,
     233,   234,   235,   236,   237,   238,    -1,    -1,   241,   242,
     243,   244,    -1,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
      -1,   284,   285,   286,   287,    -1,   289,   290,   291,   292,
     293,   294,    -1,   296,   297,    -1,    -1,   300,   301,   302,
      -1,    -1,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
     323,   324,    -1,    -1,    -1,    -1,   329,   330,   331,   332,
     333,   334,   335,   336,   337,   338,    -1,   340,   341,   342,
     343,   344,   345,   346,   347,    -1,   349,   350,   351,   352,
     353,   354,   355,   356,    -1,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,   371,    -1,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,   385,   386,   387,   388,   389,   390,   391,   392,
      -1,    -1,   395,   396,   397,   398,   399,   400,   401,   402,
     403,   404,    -1,   406,   407,   408,   409,   410,    -1,   412,
     413,   414,   415,   416,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,   427,    -1,    -1,   430,   431,    -1,
     433,   434,   435,   436,   437,   438,   439,    -1,   441,   442,
     443,    -1,   445,    -1,   447,   448,   449,   450,   451,    -1,
     453,   454,   455,   456,   457,   458,   459,   460,    -1,    -1,
     463,   464,   465,    -1,   467,   468,   469,   470,    -1,   472,
     473,   474,   475,   476,   477,   478,    -1,   480,   481,   482,
     483,   484,   485,   486,   487,   488,   489,   490,    -1,    -1,
     493,    -1,    -1,   496,   497,   498,   499,   500,   501,   502,
     503,   504,   505,   506,   507,   508,   509,   510,   511,   512,
     513,   514,   515,   516,     3,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     533,    -1,    -1,    22,    23,    24,    25,    26,    27,    28,
      29,    30,    -1,    32,    33,    34,    -1,    -1,    -1,    -1,
      -1,    40,    -1,    -1,    -1,    -1,    45,    46,    -1,    48,
      49,    50,    -1,    52,    53,    54,    55,    56,    -1,    58,
      59,    -1,    61,    62,    63,    64,    65,    66,    -1,    -1,
      69,    70,    71,    72,    73,    74,    75,    -1,    77,    78,
      79,    80,    81,    -1,    -1,    -1,    85,    86,    87,    88,
      89,    90,    -1,    92,    93,    94,    -1,    96,    97,    98,
      99,   100,   101,    -1,    -1,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
      -1,   120,    -1,   122,   123,   124,   125,   126,   127,   128,
     129,   130,   131,   132,   133,   134,    -1,    -1,   137,   138,
     139,   140,   141,   142,   143,    -1,   145,   146,   147,    -1,
     149,   150,   151,    -1,   153,   154,   155,   156,   157,   158,
     159,   160,   161,   162,   163,    -1,   165,    -1,   167,   168,
     169,   170,    -1,   172,    -1,   174,    -1,   176,    -1,   178,
     179,   180,    -1,   182,    -1,   184,   185,    -1,    -1,   188,
     189,   190,   191,    -1,   193,   194,   195,   196,   197,   198,
     199,    -1,   201,   202,   203,   204,    -1,   206,   207,   208,
     209,   210,   211,   212,    -1,   214,    -1,   216,   217,   218,
     219,   220,   221,   222,   223,    -1,   225,    -1,   227,    -1,
      -1,   230,    -1,   232,   233,   234,   235,   236,   237,   238,
      -1,    -1,   241,    -1,   243,    -1,    -1,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,    -1,   277,   278,
     279,   280,   281,   282,    -1,   284,   285,    -1,   287,    -1,
     289,   290,   291,   292,   293,   294,    -1,   296,   297,    -1,
      -1,   300,   301,   302,    -1,    -1,   305,   306,   307,    -1,
     309,    -1,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,   325,   326,   327,    -1,
     329,   330,   331,    -1,   333,   334,   335,   336,   337,   338,
      -1,   340,   341,   342,   343,   344,   345,   346,   347,    -1,
     349,   350,   351,   352,   353,   354,   355,   356,    -1,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,   371,    -1,   373,   374,    -1,   376,   377,   378,
     379,   380,   381,   382,   383,   384,   385,   386,   387,   388,
     389,   390,   391,   392,   393,    -1,   395,   396,   397,   398,
     399,   400,   401,   402,   403,   404,   405,    -1,   407,   408,
     409,   410,    -1,   412,   413,   414,   415,   416,   417,   418,
     419,   420,   421,   422,   423,   424,   425,   426,   427,   428,
      -1,   430,   431,   432,   433,    -1,   435,   436,   437,   438,
     439,    -1,   441,   442,   443,    -1,   445,    -1,   447,   448,
     449,   450,   451,    -1,   453,   454,   455,   456,   457,   458,
     459,   460,    -1,    -1,   463,   464,   465,   466,   467,   468,
     469,   470,    -1,   472,   473,   474,   475,   476,   477,   478,
      -1,   480,    -1,   482,   483,   484,   485,   486,   487,   488,
     489,   490,    -1,    -1,   493,    -1,   495,   496,   497,   498,
     499,   500,   501,   502,   503,   504,   505,   506,   507,   508,
     509,   510,   511,   512,   513,   514,   515,   516,     3,    -1,
     519,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   533,    -1,    -1,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      -1,    -1,    -1,    -1,    -1,    40,    -1,    -1,    -1,    -1,
      45,    46,    -1,    48,    49,    50,    -1,    52,    53,    54,
      55,    56,    -1,    58,    59,    -1,    61,    62,    63,    64,
      65,    66,    -1,    -1,    69,    70,    71,    72,    73,    74,
      75,    -1,    77,    78,    79,    80,    81,    -1,    -1,    -1,
      85,    86,    87,    88,    89,    90,    -1,    92,    93,    94,
      -1,    96,    97,    98,    99,   100,   101,    -1,    -1,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,    -1,   120,    -1,   122,   123,   124,
     125,   126,   127,    -1,    -1,   130,   131,   132,   133,   134,
      -1,    -1,   137,   138,   139,   140,   141,   142,   143,    -1,
     145,   146,   147,    -1,   149,   150,   151,    -1,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,   163,    -1,
     165,    -1,   167,   168,   169,   170,    -1,   172,    -1,   174,
      -1,   176,    -1,   178,   179,   180,    -1,   182,    -1,   184,
     185,    -1,    -1,   188,   189,   190,   191,    -1,   193,   194,
     195,   196,   197,   198,   199,    -1,   201,   202,   203,   204,
      -1,   206,   207,   208,   209,   210,   211,   212,    -1,   214,
      -1,   216,   217,   218,   219,   220,   221,   222,   223,    -1,
     225,    -1,   227,    -1,    -1,   230,    -1,   232,   233,   234,
     235,   236,   237,   238,    -1,    -1,   241,    -1,   243,    -1,
      -1,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,    -1,   277,   278,   279,   280,   281,   282,    -1,   284,
     285,    -1,   287,    -1,   289,   290,   291,   292,   293,   294,
      -1,   296,   297,    -1,    -1,   300,   301,   302,    -1,    -1,
     305,   306,   307,    -1,   309,    -1,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,    -1,   329,   330,   331,    -1,   333,   334,
     335,   336,   337,   338,    -1,   340,   341,   342,   343,   344,
     345,   346,   347,    -1,   349,   350,   351,   352,   353,   354,
     355,   356,    -1,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,    -1,   373,   374,
      -1,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,    -1,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
      -1,    -1,   407,   408,   409,   410,    -1,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,    -1,    -1,   430,   431,   432,   433,    -1,
     435,   436,   437,   438,   439,    -1,   441,   442,   443,    -1,
     445,    -1,   447,   448,   449,   450,   451,    -1,   453,   454,
     455,   456,   457,   458,   459,   460,    -1,    -1,   463,   464,
     465,   466,   467,   468,   469,   470,    -1,   472,   473,   474,
     475,   476,   477,   478,    -1,   480,    -1,   482,   483,   484,
     485,   486,   487,   488,   489,   490,    -1,    -1,   493,    -1,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,     3,    -1,   519,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   533,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    30,
      -1,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,    40,
      -1,    -1,    -1,    -1,    45,    46,    -1,    48,    49,    50,
      -1,    52,    53,    54,    55,    56,    -1,    58,    59,    -1,
      61,    62,    63,    64,    65,    66,    -1,    -1,    69,    70,
      71,    72,    73,    74,    75,    -1,    77,    78,    79,    80,
      81,    -1,    -1,    -1,    85,    86,    87,    88,    89,    90,
      -1,    92,    93,    94,    -1,    96,    97,    98,    99,   100,
     101,    -1,    -1,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,    -1,   120,
      -1,   122,   123,   124,   125,   126,   127,    -1,    -1,   130,
     131,   132,   133,   134,    -1,    -1,   137,   138,   139,   140,
     141,   142,   143,    -1,   145,   146,   147,    -1,   149,   150,
     151,    -1,   153,   154,   155,   156,   157,   158,   159,   160,
     161,   162,   163,    -1,   165,    -1,   167,   168,   169,   170,
      -1,   172,    -1,   174,    -1,   176,    -1,   178,   179,   180,
      -1,   182,    -1,   184,   185,    -1,    -1,   188,   189,   190,
     191,    -1,   193,   194,   195,   196,   197,   198,   199,    -1,
     201,   202,   203,   204,    -1,   206,   207,   208,   209,   210,
     211,   212,    -1,   214,    -1,   216,   217,   218,   219,   220,
     221,   222,   223,    -1,   225,    -1,   227,    -1,    -1,   230,
      -1,   232,   233,   234,   235,   236,   237,   238,    -1,    -1,
     241,    -1,   243,    -1,    -1,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,    -1,   277,   278,   279,   280,
     281,   282,    -1,   284,   285,    -1,   287,    -1,   289,   290,
     291,   292,   293,   294,    -1,   296,   297,    -1,    -1,   300,
     301,   302,    -1,    -1,   305,   306,   307,    -1,   309,    -1,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,   322,   323,   324,   325,   326,   327,    -1,   329,   330,
     331,    -1,   333,   334,   335,   336,   337,   338,    -1,   340,
     341,   342,   343,   344,   345,   346,   347,    -1,   349,   350,
     351,   352,   353,   354,   355,   356,    -1,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,    -1,   373,   374,    -1,   376,   377,   378,   379,   380,
     381,   382,   383,   384,   385,   386,   387,   388,   389,   390,
     391,   392,   393,    -1,   395,   396,   397,   398,   399,   400,
     401,   402,   403,   404,    -1,    -1,   407,   408,   409,   410,
      -1,   412,   413,   414,   415,   416,   417,   418,   419,   420,
     421,   422,   423,   424,   425,   426,   427,    -1,    -1,   430,
     431,   432,   433,    -1,   435,   436,   437,   438,   439,    -1,
     441,   442,   443,    -1,   445,    -1,   447,   448,   449,   450,
     451,    -1,   453,   454,   455,   456,   457,   458,   459,   460,
      -1,    -1,   463,   464,   465,   466,   467,   468,   469,   470,
      -1,   472,   473,   474,   475,   476,   477,   478,    -1,   480,
      -1,   482,   483,   484,   485,   486,   487,   488,   489,   490,
      -1,    -1,   493,    -1,   495,   496,   497,   498,   499,   500,
     501,   502,   503,   504,   505,   506,   507,   508,   509,   510,
     511,   512,   513,   514,   515,   516,    -1,     3,   519,     5,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   533,    -1,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    -1,    32,    33,    34,    -1,
      -1,    -1,    -1,    -1,    40,    -1,    -1,    -1,    -1,    45,
      46,    -1,    48,    49,    50,    -1,    52,    53,    54,    55,
      56,    -1,    58,    59,    -1,    61,    62,    63,    64,    65,
      66,    -1,    -1,    69,    70,    71,    72,    73,    74,    75,
      -1,    77,    78,    79,    80,    81,    -1,    -1,    -1,    85,
      86,    87,    88,    89,    90,    -1,    92,    93,    94,    -1,
      96,    97,    98,    99,   100,   101,    -1,    -1,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,    -1,   120,    -1,   122,   123,   124,   125,
     126,   127,    -1,    -1,   130,   131,   132,   133,   134,    -1,
      -1,   137,   138,   139,   140,   141,   142,   143,    -1,   145,
     146,   147,    -1,   149,   150,   151,    -1,   153,   154,   155,
     156,   157,   158,   159,   160,   161,   162,   163,    -1,   165,
      -1,   167,   168,   169,   170,    -1,   172,    -1,   174,    -1,
      -1,    -1,   178,   179,   180,    -1,   182,    -1,   184,   185,
      -1,    -1,   188,   189,   190,   191,    -1,   193,   194,   195,
     196,   197,   198,   199,    -1,   201,   202,   203,   204,    -1,
     206,   207,   208,   209,   210,   211,   212,    -1,   214,    -1,
     216,   217,   218,   219,   220,   221,   222,   223,    -1,   225,
      -1,   227,    -1,    -1,   230,    -1,   232,   233,   234,   235,
     236,   237,   238,    -1,    -1,   241,    -1,   243,    -1,    -1,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
      -1,   277,   278,   279,   280,   281,   282,    -1,   284,   285,
      -1,   287,    -1,   289,   290,   291,   292,   293,   294,    -1,
     296,   297,    -1,    -1,   300,   301,   302,    -1,    -1,   305,
     306,   307,    -1,   309,    -1,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,   323,   324,    -1,
      -1,    -1,    -1,   329,   330,   331,    -1,   333,   334,   335,
     336,   337,   338,    -1,   340,   341,   342,   343,   344,   345,
     346,   347,    -1,   349,   350,   351,   352,   353,   354,   355,
     356,    -1,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,    -1,   373,   374,    -1,
     376,   377,   378,   379,   380,   381,   382,   383,   384,   385,
     386,   387,   388,   389,   390,   391,   392,    -1,    -1,   395,
     396,   397,   398,   399,   400,   401,   402,   403,   404,    -1,
      -1,   407,   408,   409,   410,    -1,   412,   413,   414,   415,
     416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,    -1,    -1,   430,   431,    -1,   433,    -1,   435,
     436,   437,   438,   439,    -1,   441,   442,   443,    -1,   445,
      -1,   447,   448,   449,   450,   451,    -1,   453,   454,   455,
     456,   457,   458,   459,   460,    -1,    -1,   463,   464,   465,
      -1,   467,   468,   469,   470,    -1,   472,   473,   474,   475,
     476,   477,   478,    -1,   480,    -1,   482,   483,   484,   485,
     486,   487,   488,   489,   490,    -1,    -1,   493,    -1,    -1,
     496,   497,   498,   499,   500,   501,   502,   503,   504,   505,
     506,   507,   508,   509,   510,   511,   512,   513,   514,   515,
     516,     3,    -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   533,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    -1,
      32,    33,    34,    -1,    -1,    -1,    -1,    -1,    40,    -1,
      -1,    -1,    -1,    45,    46,    -1,    48,    49,    50,    -1,
      52,    53,    54,    55,    56,    -1,    58,    59,    -1,    61,
      62,    63,    64,    65,    66,    -1,    -1,    69,    70,    71,
      72,    73,    74,    75,    -1,    77,    78,    79,    80,    81,
      -1,    -1,    -1,    85,    86,    87,    88,    89,    90,    -1,
      92,    93,    94,    -1,    96,    97,    98,    99,   100,   101,
      -1,    -1,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,    -1,   120,    -1,
     122,   123,   124,   125,   126,   127,    -1,    -1,   130,   131,
     132,   133,   134,    -1,    -1,   137,   138,   139,   140,   141,
     142,   143,    -1,   145,   146,   147,    -1,   149,   150,   151,
      -1,   153,   154,   155,   156,   157,   158,   159,   160,   161,
     162,   163,    -1,   165,    -1,   167,   168,   169,   170,    -1,
     172,    -1,   174,    -1,    -1,    -1,   178,   179,   180,    -1,
     182,    -1,   184,   185,    -1,    -1,   188,   189,   190,   191,
      -1,   193,   194,   195,   196,   197,   198,   199,    -1,   201,
     202,   203,   204,    -1,   206,   207,   208,   209,   210,   211,
     212,    -1,   214,    -1,   216,   217,   218,   219,   220,   221,
     222,   223,    -1,   225,    -1,   227,    -1,    -1,   230,    -1,
     232,   233,   234,   235,   236,   237,   238,    -1,    -1,   241,
      -1,   243,    -1,    -1,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,    -1,   277,   278,   279,   280,   281,
     282,    -1,   284,   285,    -1,   287,    -1,   289,   290,   291,
     292,   293,   294,    -1,   296,   297,    -1,    -1,   300,   301,
     302,    -1,    -1,   305,   306,   307,    -1,   309,    -1,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,   323,   324,    -1,    -1,    -1,    -1,   329,   330,   331,
      -1,   333,   334,   335,   336,   337,   338,    -1,   340,   341,
     342,   343,   344,   345,   346,   347,    -1,   349,   350,   351,
     352,   353,   354,   355,   356,    -1,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
      -1,   373,   374,    -1,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,   386,   387,   388,   389,   390,   391,
     392,    -1,    -1,   395,   396,   397,   398,   399,   400,   401,
     402,   403,   404,    -1,    -1,   407,   408,   409,   410,    -1,
     412,   413,   414,   415,   416,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,    -1,    -1,   430,   431,
      -1,   433,    -1,   435,   436,   437,   438,   439,    -1,   441,
     442,   443,    -1,   445,    -1,   447,   448,   449,   450,   451,
      -1,   453,   454,   455,   456,   457,   458,   459,   460,    -1,
      -1,   463,   464,   465,    -1,   467,   468,   469,   470,    -1,
     472,   473,   474,   475,   476,   477,   478,    -1,   480,    -1,
     482,   483,   484,   485,   486,   487,   488,   489,   490,    -1,
      -1,   493,    -1,    -1,   496,   497,   498,   499,   500,   501,
     502,   503,   504,   505,   506,   507,   508,   509,   510,   511,
     512,   513,   514,   515,   516,     3,    -1,     5,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   533,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    -1,    32,    33,    34,    -1,    -1,    -1,
      -1,    -1,    40,    -1,    -1,    -1,    -1,    45,    46,    -1,
      48,    49,    50,    -1,    52,    53,    54,    55,    56,    -1,
      58,    59,    -1,    61,    62,    63,    64,    65,    66,    -1,
      -1,    69,    70,    71,    72,    73,    74,    75,    -1,    77,
      78,    79,    80,    81,    -1,    -1,    -1,    85,    86,    87,
      88,    89,    90,    -1,    92,    93,    94,    -1,    96,    97,
      98,    99,   100,   101,    -1,    -1,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,    -1,   120,    -1,   122,   123,   124,   125,   126,   127,
      -1,    -1,   130,   131,   132,   133,   134,    -1,    -1,   137,
     138,   139,   140,   141,   142,   143,    -1,   145,   146,   147,
      -1,   149,   150,   151,    -1,   153,   154,   155,   156,   157,
     158,   159,   160,   161,   162,   163,    -1,   165,    -1,   167,
     168,   169,   170,    -1,   172,    -1,   174,    -1,    -1,    -1,
     178,   179,   180,    -1,   182,    -1,   184,   185,    -1,    -1,
     188,   189,   190,   191,    -1,   193,   194,   195,   196,   197,
     198,   199,    -1,   201,   202,   203,   204,    -1,   206,   207,
     208,   209,   210,   211,   212,    -1,   214,    -1,   216,   217,
     218,   219,   220,   221,   222,   223,    -1,   225,    -1,   227,
      -1,    -1,   230,    -1,   232,   233,   234,   235,   236,   237,
     238,    -1,    -1,   241,    -1,   243,    -1,    -1,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,    -1,   277,
     278,   279,   280,   281,   282,    -1,   284,   285,    -1,   287,
      -1,   289,   290,   291,   292,   293,   294,    -1,   296,   297,
      -1,    -1,   300,   301,   302,    -1,    -1,   305,   306,   307,
      -1,   309,    -1,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323,   324,    -1,    -1,    -1,
      -1,   329,   330,   331,    -1,   333,   334,   335,   336,   337,
     338,    -1,   340,   341,   342,   343,   344,   345,   346,   347,
      -1,   349,   350,   351,   352,   353,   354,   355,   356,    -1,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,   371,    -1,   373,   374,    -1,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,   386,   387,
     388,   389,   390,   391,   392,    -1,    -1,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,    -1,    -1,   407,
     408,   409,   410,    -1,   412,   413,   414,   415,   416,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
      -1,    -1,   430,   431,    -1,   433,    -1,   435,   436,   437,
     438,   439,    -1,   441,   442,   443,    -1,   445,    -1,   447,
     448,   449,   450,   451,    -1,   453,   454,   455,   456,   457,
     458,   459,   460,    -1,    -1,   463,   464,   465,    -1,   467,
     468,   469,   470,    -1,   472,   473,   474,   475,   476,   477,
     478,    -1,   480,    -1,   482,   483,   484,   485,   486,   487,
     488,   489,   490,    -1,    -1,   493,    -1,    -1,   496,   497,
     498,   499,   500,   501,   502,   503,   504,   505,   506,   507,
     508,   509,   510,   511,   512,   513,   514,   515,   516,     3,
      -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   533,    -1,    -1,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    -1,    32,    33,
      34,    -1,    -1,    -1,    -1,    -1,    40,    -1,    -1,    -1,
      -1,    45,    46,    -1,    48,    49,    50,    -1,    52,    53,
      54,    55,    56,    -1,    58,    59,    -1,    61,    62,    63,
      64,    65,    66,    -1,    -1,    69,    70,    71,    72,    73,
      74,    75,    -1,    77,    78,    79,    80,    81,    -1,    -1,
      -1,    85,    86,    87,    88,    89,    90,    -1,    92,    93,
      94,    -1,    96,    97,    98,    99,   100,   101,    -1,    -1,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,    -1,   120,    -1,   122,   123,
     124,   125,   126,   127,    -1,    -1,   130,   131,   132,   133,
     134,    -1,    -1,   137,   138,   139,   140,   141,   142,   143,
      -1,   145,   146,   147,    -1,   149,   150,   151,    -1,   153,
     154,   155,   156,   157,   158,   159,   160,   161,   162,   163,
      -1,   165,    -1,   167,   168,   169,   170,    -1,   172,    -1,
     174,    -1,    -1,    -1,   178,   179,   180,    -1,   182,    -1,
     184,   185,    -1,    -1,   188,   189,   190,   191,    -1,   193,
     194,   195,   196,   197,   198,   199,    -1,   201,   202,   203,
     204,    -1,   206,   207,   208,   209,   210,   211,   212,    -1,
     214,    -1,   216,   217,   218,   219,   220,   221,   222,   223,
      -1,   225,    -1,   227,    -1,    -1,   230,    -1,   232,   233,
     234,   235,   236,   237,   238,    -1,    -1,   241,    -1,   243,
      -1,    -1,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,    -1,   277,   278,   279,   280,   281,   282,    -1,
     284,   285,    -1,   287,    -1,   289,   290,   291,   292,   293,
     294,    -1,   296,   297,    -1,    -1,   300,   301,   302,    -1,
      -1,   305,   306,   307,    -1,   309,    -1,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,    -1,    -1,    -1,    -1,   329,   330,   331,    -1,   333,
     334,   335,   336,   337,   338,    -1,   340,   341,   342,   343,
     344,   345,   346,   347,    -1,   349,   350,   351,   352,   353,
     354,   355,   356,    -1,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,   371,    -1,   373,
     374,    -1,   376,   377,   378,   379,   380,   381,   382,   383,
     384,   385,   386,   387,   388,   389,   390,   391,   392,    -1,
      -1,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,    -1,    -1,   407,   408,   409,   410,    -1,   412,   413,
     414,   415,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,    -1,    -1,   430,   431,    -1,   433,
      -1,   435,   436,   437,   438,   439,    -1,   441,   442,   443,
      -1,   445,    -1,   447,   448,   449,   450,   451,    -1,   453,
     454,   455,   456,   457,   458,   459,   460,    -1,    -1,   463,
     464,   465,    -1,   467,   468,   469,   470,    -1,   472,   473,
     474,   475,   476,   477,   478,    -1,   480,    -1,   482,   483,
     484,   485,   486,   487,   488,   489,   490,    -1,    -1,   493,
      -1,    -1,   496,   497,   498,   499,   500,   501,   502,   503,
     504,   505,   506,   507,   508,   509,   510,   511,   512,   513,
     514,   515,   516,     3,    -1,     5,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   533,
      -1,    -1,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    -1,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,
      40,    -1,    -1,    -1,    -1,    45,    46,    -1,    48,    49,
      50,    -1,    52,    53,    54,    55,    56,    -1,    58,    59,
      -1,    61,    62,    63,    64,    65,    66,    -1,    -1,    69,
      70,    71,    72,    73,    74,    75,    -1,    77,    78,    79,
      80,    81,    -1,    -1,    -1,    85,    86,    87,    88,    89,
      90,    -1,    92,    93,    94,    -1,    96,    97,    98,    99,
     100,   101,    -1,    -1,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,    -1,
     120,    -1,   122,   123,   124,   125,   126,   127,    -1,    -1,
     130,   131,   132,   133,   134,    -1,    -1,   137,   138,   139,
     140,   141,   142,   143,    -1,   145,   146,   147,    -1,   149,
     150,   151,    -1,   153,   154,   155,   156,   157,   158,   159,
     160,   161,   162,   163,    -1,   165,    -1,   167,   168,   169,
     170,    -1,   172,    -1,   174,    -1,    -1,    -1,   178,   179,
     180,    -1,   182,    -1,   184,   185,    -1,    -1,   188,   189,
     190,   191,    -1,   193,   194,   195,   196,   197,   198,   199,
      -1,   201,   202,   203,   204,    -1,   206,   207,   208,   209,
     210,   211,   212,    -1,   214,    -1,   216,   217,   218,   219,
     220,   221,   222,   223,    -1,   225,    -1,   227,    -1,    -1,
     230,    -1,   232,   233,   234,   235,   236,   237,   238,    -1,
      -1,   241,    -1,   243,    -1,    -1,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,    -1,   277,   278,   279,
     280,   281,   282,    -1,   284,   285,    -1,   287,    -1,   289,
     290,   291,   292,   293,   294,    -1,   296,   297,    -1,    -1,
     300,   301,   302,    -1,    -1,   305,   306,   307,    -1,   309,
      -1,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,   323,   324,    -1,    -1,    -1,    -1,   329,
     330,   331,    -1,   333,   334,   335,   336,   337,   338,    -1,
     340,   341,   342,   343,   344,   345,   346,   347,    -1,   349,
     350,   351,   352,   353,   354,   355,   356,    -1,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
     370,   371,    -1,   373,   374,    -1,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,   386,   387,   388,   389,
     390,   391,   392,    -1,    -1,   395,   396,   397,   398,   399,
     400,   401,   402,   403,   404,    -1,    -1,   407,   408,   409,
     410,    -1,   412,   413,   414,   415,   416,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,    -1,    -1,
     430,   431,    -1,   433,    -1,   435,   436,   437,   438,   439,
      -1,   441,   442,   443,    -1,   445,    -1,   447,   448,   449,
     450,   451,    -1,   453,   454,   455,   456,   457,   458,   459,
     460,    -1,    -1,   463,   464,   465,    -1,   467,   468,   469,
     470,    -1,   472,   473,   474,   475,   476,   477,   478,    -1,
     480,    -1,   482,   483,   484,   485,   486,   487,   488,   489,
     490,    -1,    -1,   493,    -1,    -1,   496,   497,   498,   499,
     500,   501,   502,   503,   504,   505,   506,   507,   508,   509,
     510,   511,   512,   513,   514,   515,   516,     3,    -1,     5,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   533,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    -1,    32,    33,    34,    -1,
      -1,    -1,    -1,    -1,    40,    -1,    -1,    -1,    -1,    45,
      46,    -1,    48,    49,    50,    -1,    52,    53,    54,    55,
      56,    -1,    58,    59,    -1,    61,    62,    63,    64,    65,
      66,    -1,    -1,    69,    70,    71,    72,    73,    74,    75,
      -1,    77,    78,    79,    80,    81,    -1,    -1,    -1,    85,
      86,    87,    88,    89,    90,    -1,    92,    93,    94,    -1,
      96,    97,    98,    99,   100,   101,    -1,    -1,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,    -1,   120,    -1,   122,   123,   124,   125,
     126,   127,    -1,    -1,   130,   131,   132,   133,   134,    -1,
      -1,   137,   138,   139,   140,   141,   142,   143,    -1,   145,
     146,   147,    -1,   149,   150,   151,    -1,   153,   154,   155,
     156,   157,   158,   159,   160,   161,   162,   163,    -1,   165,
      -1,   167,   168,   169,   170,    -1,   172,    -1,   174,    -1,
      -1,    -1,   178,   179,   180,    -1,   182,    -1,   184,   185,
      -1,    -1,   188,   189,   190,   191,    -1,   193,   194,   195,
     196,   197,   198,   199,    -1,   201,   202,   203,   204,    -1,
     206,   207,   208,   209,   210,   211,   212,    -1,   214,    -1,
     216,   217,   218,   219,   220,   221,   222,   223,    -1,   225,
      -1,   227,    -1,    -1,   230,    -1,   232,   233,   234,   235,
     236,   237,   238,    -1,    -1,   241,    -1,   243,    -1,    -1,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
      -1,   277,   278,   279,   280,   281,   282,    -1,   284,   285,
      -1,   287,    -1,   289,   290,   291,   292,   293,   294,    -1,
     296,   297,    -1,    -1,   300,   301,   302,    -1,    -1,   305,
     306,   307,    -1,   309,    -1,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,   323,   324,    -1,
      -1,    -1,    -1,   329,   330,   331,    -1,   333,   334,   335,
     336,   337,   338,    -1,   340,   341,   342,   343,   344,   345,
     346,   347,    -1,   349,   350,   351,   352,   353,   354,   355,
     356,    -1,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,    -1,   373,   374,    -1,
     376,   377,   378,   379,   380,   381,   382,   383,   384,   385,
     386,   387,   388,   389,   390,   391,   392,    -1,    -1,   395,
     396,   397,   398,   399,   400,   401,   402,   403,   404,    -1,
      -1,   407,   408,   409,   410,    -1,   412,   413,   414,   415,
     416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,    -1,    -1,   430,   431,    -1,   433,    -1,   435,
     436,   437,   438,   439,    -1,   441,   442,   443,    -1,   445,
      -1,   447,   448,   449,   450,   451,    -1,   453,   454,   455,
     456,   457,   458,   459,   460,    -1,    -1,   463,   464,   465,
      -1,   467,   468,   469,   470,    -1,   472,   473,   474,   475,
     476,   477,   478,    -1,   480,    -1,   482,   483,   484,   485,
     486,   487,   488,   489,   490,    -1,    -1,   493,    -1,    -1,
     496,   497,   498,   499,   500,   501,   502,   503,   504,   505,
     506,   507,   508,   509,   510,   511,   512,   513,   514,   515,
     516,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   533,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    -1,
      32,    33,    34,    -1,    -1,    -1,    -1,    -1,    40,    -1,
      -1,    -1,    -1,    45,    46,    -1,    48,    49,    50,    -1,
      52,    53,    54,    55,    56,    -1,    58,    59,    -1,    61,
      62,    63,    64,    65,    66,    -1,    -1,    69,    70,    71,
      72,    73,    74,    75,    -1,    77,    78,    79,    80,    81,
      -1,    -1,    -1,    85,    86,    87,    88,    89,    90,    -1,
      92,    93,    94,    -1,    96,    97,    98,    99,   100,   101,
      -1,    -1,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,    -1,   120,    -1,
     122,   123,   124,   125,   126,   127,    -1,    -1,   130,   131,
     132,   133,   134,    -1,    -1,   137,   138,   139,   140,   141,
     142,   143,    -1,   145,   146,   147,    -1,   149,   150,   151,
      -1,   153,   154,   155,   156,   157,   158,   159,   160,   161,
     162,   163,    -1,   165,    -1,   167,   168,   169,   170,    -1,
     172,    -1,   174,    -1,    -1,    -1,   178,   179,   180,    -1,
     182,    -1,   184,   185,    -1,    -1,   188,   189,   190,   191,
      -1,   193,   194,   195,   196,   197,   198,   199,    -1,   201,
     202,   203,   204,    -1,   206,   207,   208,   209,   210,   211,
     212,    -1,   214,    -1,   216,   217,   218,   219,   220,   221,
     222,   223,    -1,   225,    -1,   227,    -1,    -1,   230,    -1,
     232,   233,   234,   235,   236,   237,   238,    -1,    -1,   241,
      -1,   243,    -1,    -1,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,    -1,   277,   278,   279,   280,   281,
     282,    -1,   284,   285,    -1,   287,    -1,   289,   290,   291,
     292,   293,   294,    -1,   296,   297,    -1,    -1,   300,   301,
     302,    -1,    -1,   305,   306,   307,    -1,   309,    -1,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,   323,   324,    -1,    -1,    -1,    -1,   329,   330,   331,
      -1,   333,   334,   335,   336,   337,   338,    -1,   340,   341,
     342,   343,   344,   345,   346,   347,    -1,   349,   350,   351,
     352,   353,   354,   355,   356,    -1,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
      -1,   373,   374,    -1,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,   386,   387,   388,   389,   390,   391,
     392,    -1,    -1,   395,   396,   397,   398,   399,   400,   401,
     402,   403,   404,    -1,    -1,   407,   408,   409,   410,    -1,
     412,   413,   414,   415,   416,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,    -1,    -1,   430,   431,
      -1,   433,    -1,   435,   436,   437,   438,   439,    -1,   441,
     442,   443,    -1,   445,    -1,   447,   448,   449,   450,   451,
      -1,   453,   454,   455,   456,   457,   458,   459,   460,    -1,
      -1,   463,   464,   465,    -1,   467,   468,   469,   470,    -1,
     472,   473,   474,   475,   476,   477,   478,    -1,   480,    -1,
     482,   483,   484,   485,   486,   487,   488,   489,   490,    -1,
      -1,   493,    -1,    -1,   496,   497,   498,   499,   500,   501,
     502,   503,   504,   505,   506,   507,   508,   509,   510,   511,
     512,   513,   514,   515,   516,     3,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   533,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    -1,    32,    33,    34,    -1,    -1,    -1,
      -1,    -1,    40,    -1,    -1,    -1,    -1,    45,    46,    -1,
      48,    49,    50,    -1,    52,    53,    54,    55,    56,    -1,
      58,    59,    -1,    61,    62,    63,    64,    65,    66,    -1,
      -1,    69,    70,    71,    72,    73,    74,    75,    -1,    77,
      78,    79,    80,    81,    -1,    -1,    -1,    85,    86,    87,
      88,    89,    90,    -1,    92,    93,    94,    -1,    96,    97,
      98,    99,   100,   101,    -1,    -1,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,    -1,   120,    -1,   122,   123,   124,   125,   126,   127,
      -1,    -1,   130,   131,   132,   133,   134,    -1,    -1,   137,
     138,   139,   140,   141,   142,   143,    -1,   145,   146,   147,
      -1,   149,   150,   151,    -1,   153,   154,   155,   156,   157,
     158,   159,   160,   161,   162,   163,    -1,   165,    -1,   167,
     168,   169,   170,    -1,   172,    -1,   174,    -1,    -1,    -1,
     178,   179,   180,    -1,   182,    -1,   184,   185,    -1,    -1,
     188,   189,   190,   191,    -1,   193,   194,   195,   196,   197,
     198,   199,    -1,   201,   202,   203,   204,    -1,   206,   207,
     208,   209,   210,   211,   212,    -1,   214,    -1,   216,   217,
     218,   219,   220,   221,   222,   223,    -1,   225,    -1,   227,
      -1,    -1,   230,    -1,   232,   233,   234,   235,   236,   237,
     238,    -1,    -1,   241,    -1,   243,    -1,    -1,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,    -1,   277,
     278,   279,   280,   281,   282,    -1,   284,   285,    -1,   287,
      -1,   289,   290,   291,   292,   293,   294,    -1,   296,   297,
      -1,    -1,   300,   301,   302,    -1,    -1,   305,   306,   307,
      -1,   309,    -1,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323,   324,    -1,    -1,    -1,
      -1,   329,   330,   331,    -1,   333,   334,   335,   336,   337,
     338,    -1,   340,   341,   342,   343,   344,   345,   346,   347,
      -1,   349,   350,   351,   352,   353,   354,   355,   356,    -1,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,   371,    -1,   373,   374,    -1,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,   386,   387,
     388,   389,   390,   391,   392,    -1,    -1,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,    -1,    -1,   407,
     408,   409,   410,    -1,   412,   413,   414,   415,   416,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
      -1,    -1,   430,   431,    -1,   433,    -1,   435,   436,   437,
     438,   439,    -1,   441,   442,   443,    -1,   445,    -1,   447,
     448,   449,   450,   451,    -1,   453,   454,   455,   456,   457,
     458,   459,   460,    -1,    -1,   463,   464,   465,    -1,   467,
     468,   469,   470,    -1,   472,   473,   474,   475,   476,   477,
     478,    -1,   480,    -1,   482,   483,   484,   485,   486,   487,
     488,   489,   490,    -1,    -1,   493,    -1,    -1,   496,   497,
     498,   499,   500,   501,   502,   503,   504,   505,   506,   507,
     508,   509,   510,   511,   512,   513,   514,   515,   516,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   533,    -1,    -1,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    -1,    32,    33,
      34,    -1,    -1,    -1,    -1,    -1,    40,    -1,    -1,    -1,
      -1,    45,    46,    -1,    48,    49,    50,    -1,    52,    53,
      54,    55,    56,    -1,    58,    59,    -1,    61,    62,    63,
      64,    65,    66,    -1,    -1,    69,    70,    71,    72,    73,
      74,    75,    -1,    77,    78,    79,    80,    81,    -1,    -1,
      -1,    85,    86,    87,    88,    89,    90,    -1,    92,    93,
      94,    -1,    96,    97,    98,    99,   100,   101,    -1,    -1,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,    -1,   120,    -1,   122,   123,
     124,   125,   126,   127,    -1,    -1,   130,   131,   132,   133,
     134,    -1,    -1,   137,   138,   139,   140,   141,   142,   143,
      -1,   145,   146,   147,    -1,   149,   150,   151,    -1,   153,
     154,   155,   156,   157,   158,   159,   160,   161,   162,   163,
      -1,   165,    -1,   167,   168,   169,   170,    -1,   172,    -1,
     174,    -1,    -1,    -1,   178,   179,   180,    -1,   182,    -1,
     184,   185,    -1,    -1,   188,   189,   190,   191,    -1,   193,
     194,   195,   196,   197,   198,   199,    -1,   201,   202,   203,
     204,    -1,   206,   207,   208,   209,   210,   211,   212,    -1,
     214,    -1,   216,   217,   218,   219,   220,   221,   222,   223,
      -1,   225,    -1,   227,    -1,    -1,   230,    -1,   232,   233,
     234,   235,   236,   237,   238,    -1,    -1,   241,    -1,   243,
      -1,    -1,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,    -1,   277,   278,   279,   280,   281,   282,    -1,
     284,   285,    -1,   287,    -1,   289,   290,   291,   292,   293,
     294,    -1,   296,   297,    -1,    -1,   300,   301,   302,    -1,
      -1,   305,   306,   307,    -1,   309,    -1,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,    -1,    -1,    -1,    -1,   329,   330,   331,    -1,   333,
     334,   335,   336,   337,   338,    -1,   340,   341,   342,   343,
     344,   345,   346,   347,    -1,   349,   350,   351,   352,   353,
     354,   355,   356,    -1,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,   371,    -1,   373,
     374,    -1,   376,   377,   378,   379,   380,   381,   382,   383,
     384,   385,   386,   387,   388,   389,   390,   391,   392,    -1,
      -1,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,    -1,    -1,   407,   408,   409,   410,    -1,   412,   413,
     414,   415,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,    -1,    -1,   430,   431,    -1,   433,
      -1,   435,   436,   437,   438,   439,    -1,   441,   442,   443,
      -1,   445,    -1,   447,   448,   449,   450,   451,    -1,   453,
     454,   455,   456,   457,   458,   459,   460,    -1,    -1,   463,
     464,   465,    -1,   467,   468,   469,   470,    -1,   472,   473,
     474,   475,   476,   477,   478,    -1,   480,    -1,   482,   483,
     484,   485,   486,   487,   488,   489,   490,    -1,    -1,   493,
      -1,    -1,   496,   497,   498,   499,   500,   501,   502,   503,
     504,   505,   506,   507,   508,   509,   510,   511,   512,   513,
     514,   515,   516,     3,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   533,
      -1,    -1,    22,    23,    24,    25,    -1,    27,    28,    29,
      30,    -1,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    45,    46,    -1,    48,    49,
      50,    -1,    52,    53,    54,    55,    56,    -1,    58,    59,
      -1,    61,    62,    63,    64,    65,    66,    -1,    -1,    69,
      70,    71,    72,    73,    74,    75,    -1,    77,    78,    79,
      80,    81,    -1,    -1,    -1,    -1,    86,    87,    88,    89,
      90,    -1,    92,    93,    94,    -1,    96,    97,    98,    99,
     100,    -1,    -1,    -1,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,    -1,
     120,    -1,   122,   123,   124,   125,   126,   127,   128,   129,
      -1,   131,   132,   133,   134,    -1,    -1,   137,   138,   139,
     140,   141,    -1,    -1,    -1,   145,   146,   147,    -1,   149,
     150,   151,    -1,   153,   154,   155,   156,   157,   158,   159,
     160,   161,   162,   163,    -1,   165,    -1,   167,   168,   169,
     170,    -1,   172,    -1,   174,    -1,   176,    -1,   178,   179,
     180,    -1,   182,    -1,   184,    -1,    -1,    -1,   188,   189,
      -1,   191,    -1,   193,   194,   195,   196,   197,   198,   199,
      -1,   201,   202,   203,   204,    -1,   206,   207,   208,   209,
     210,   211,   212,    -1,   214,    -1,   216,   217,   218,   219,
     220,   221,   222,   223,    -1,   225,    -1,   227,    -1,    -1,
     230,    -1,   232,    -1,   234,   235,   236,   237,   238,    -1,
      -1,   241,    -1,   243,    -1,    -1,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,    -1,   277,   278,   279,
     280,    -1,   282,    -1,   284,   285,    -1,   287,    -1,   289,
     290,   291,   292,   293,   294,    -1,   296,   297,    -1,    -1,
     300,   301,   302,    -1,    -1,   305,   306,   307,    -1,   309,
      -1,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,    -1,    -1,   323,   324,   325,   326,   327,    -1,   329,
     330,   331,    -1,   333,   334,   335,   336,   337,   338,    -1,
     340,   341,   342,   343,   344,    -1,    -1,   347,    -1,   349,
     350,   351,   352,   353,   354,   355,   356,    -1,   358,   359,
     360,    -1,   362,   363,   364,   365,   366,   367,   368,   369,
     370,   371,    -1,   373,   374,    -1,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,   386,   387,   388,   389,
     390,   391,   392,   393,    -1,   395,   396,   397,   398,   399,
     400,   401,   402,   403,    -1,   405,    -1,    -1,   408,   409,
     410,    -1,    -1,   413,   414,   415,   416,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,   428,    -1,
     430,   431,   432,   433,    -1,   435,   436,   437,   438,   439,
      -1,   441,   442,   443,    -1,    -1,    -1,   447,   448,   449,
     450,   451,    -1,   453,   454,   455,   456,   457,   458,   459,
     460,    -1,    -1,   463,   464,   465,   466,   467,   468,   469,
     470,    -1,   472,   473,   474,   475,   476,   477,   478,    -1,
     480,    -1,   482,    -1,   484,   485,   486,   487,    -1,   489,
     490,    -1,    -1,   493,    -1,   495,   496,   497,   498,   499,
     500,   501,   502,   503,   504,   505,   506,   507,   508,   509,
     510,   511,   512,   513,   514,   515,   516,    -1,    -1,   519,
      -1,    -1,     3,     4,     5,    -1,    -1,     8,     9,    -1,
      -1,    -1,    -1,   533,    15,    16,    -1,    -1,    19,    20,
      21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    -1,    56,    57,    58,    59,    60,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    72,    73,    74,    75,    76,    77,    78,    79,    80,
      -1,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    93,    94,    95,    96,    97,    98,    99,   100,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
     121,   122,   123,   124,   125,   126,   127,   128,   129,   130,
     131,   132,   133,   134,   135,   136,   137,   138,   139,   140,
     141,   142,   143,   144,   145,   146,   147,   148,   149,   150,
     151,   152,   153,   154,   155,   156,    -1,   158,   159,   160,
     161,   162,    -1,   164,   165,   166,   167,   168,   169,   170,
     171,   172,   173,   174,   175,   176,   177,   178,   179,   180,
     181,   182,   183,   184,   185,   186,   187,    -1,    -1,   190,
     191,   192,   193,   194,   195,   196,   197,   198,   199,   200,
     201,   202,   203,   204,   205,   206,   207,   208,   209,   210,
     211,   212,   213,   214,   215,    -1,   217,   218,   219,   220,
     221,   222,   223,   224,   225,   226,   227,   228,   229,   230,
     231,   232,   233,   234,   235,   236,   237,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,   287,   288,    -1,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,    -1,   308,   309,   310,
      -1,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,   322,   323,   324,   325,   326,   327,   328,   329,   330,
      -1,   332,   333,   334,    -1,   336,   337,   338,   339,   340,
     341,   342,   343,   344,   345,   346,   347,   348,   349,   350,
     351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,   417,   418,   419,   420,
     421,   422,   423,   424,   425,   426,    -1,   428,   429,   430,
     431,   432,   433,   434,   435,   436,   437,   438,   439,   440,
     441,   442,   443,   444,   445,   446,   447,   448,    -1,   450,
      -1,   452,   453,   454,   455,   456,   457,   458,   459,   460,
     461,   462,   463,   464,   465,   466,   467,   468,   469,   470,
     471,   472,   473,   474,   475,   476,    -1,   478,   479,   480,
     481,   482,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,   499,   500,
     501,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   513,   514,   515,   516,    -1,     3,    -1,   520,
     521,   522,     8,   524,   525,   526,   527,   528,   529,    15,
      16,    -1,    -1,    19,    20,    21,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    -1,    32,    33,    34,    -1,
      -1,    -1,    -1,    -1,    40,    -1,    -1,    -1,    -1,    45,
      46,    -1,    48,    49,    50,    -1,    52,    53,    54,    55,
      56,    -1,    58,    59,    -1,    61,    62,    63,    64,    65,
      66,    -1,    -1,    69,    70,    71,    72,    73,    74,    75,
      -1,    77,    78,    79,    80,    81,    -1,    -1,    -1,    85,
      86,    87,    88,    89,    90,    -1,    92,    93,    94,    -1,
      96,    97,    98,    99,   100,   101,    -1,    -1,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,    -1,   120,    -1,   122,   123,   124,   125,
     126,   127,    -1,    -1,   130,   131,   132,   133,   134,    -1,
      -1,   137,   138,   139,   140,   141,   142,   143,    -1,   145,
     146,   147,    -1,   149,   150,   151,    -1,   153,   154,   155,
     156,   157,   158,   159,   160,   161,   162,   163,    -1,   165,
      -1,   167,   168,   169,   170,    -1,   172,    -1,   174,    -1,
      -1,    -1,   178,   179,   180,    -1,   182,    -1,   184,   185,
      -1,    -1,   188,   189,   190,   191,    -1,   193,   194,   195,
     196,   197,   198,   199,    -1,   201,   202,   203,   204,    -1,
     206,   207,   208,   209,   210,   211,   212,    -1,   214,    -1,
     216,   217,   218,   219,   220,   221,   222,   223,    -1,   225,
      -1,   227,    -1,    -1,   230,    -1,   232,   233,   234,   235,
     236,   237,   238,    -1,    -1,   241,    -1,   243,    -1,    -1,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
      -1,   277,   278,   279,   280,   281,   282,    -1,   284,   285,
      -1,   287,    -1,   289,   290,   291,   292,   293,   294,    -1,
     296,   297,    -1,    -1,   300,   301,   302,    -1,    -1,   305,
     306,   307,    -1,   309,    -1,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,   323,   324,    -1,
      -1,    -1,    -1,   329,   330,   331,    -1,   333,   334,   335,
     336,   337,   338,    -1,   340,   341,   342,   343,   344,   345,
     346,   347,    -1,   349,   350,   351,   352,   353,   354,   355,
     356,    -1,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,    -1,   373,   374,    -1,
     376,   377,   378,   379,   380,   381,   382,   383,   384,   385,
     386,   387,   388,   389,   390,   391,   392,    -1,    -1,   395,
     396,   397,   398,   399,   400,   401,   402,   403,   404,    -1,
      -1,   407,   408,   409,   410,    -1,   412,   413,   414,   415,
     416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,    -1,    -1,   430,   431,    -1,   433,    -1,   435,
     436,   437,   438,   439,    -1,   441,   442,   443,    -1,   445,
      -1,   447,   448,   449,   450,   451,    -1,   453,   454,   455,
     456,   457,   458,   459,   460,    -1,    -1,   463,   464,   465,
      -1,   467,   468,   469,   470,    -1,   472,   473,   474,   475,
     476,   477,   478,    -1,   480,    -1,   482,   483,   484,   485,
     486,   487,   488,   489,   490,    -1,    -1,   493,    -1,    -1,
     496,   497,   498,   499,   500,   501,   502,   503,   504,   505,
     506,   507,   508,   509,   510,   511,   512,   513,   514,   515,
     516,    -1,    -1,    -1,   520,   521,   522,    -1,   524,   525,
     526,   527,   528,   529,     8,    -1,    -1,    11,    -1,    -1,
      -1,    15,    16,    17,    18,    19,    20,    21,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     8,
      -1,    -1,    11,    37,    -1,    -1,    15,    16,    17,    18,
      19,    20,    21,    -1,    48,    -1,    -1,    -1,    -1,    -1,
      -1,    55,    -1,    -1,     8,    -1,    -1,    11,    37,    -1,
      -1,    15,    16,    17,    18,    19,    20,    21,    -1,    48,
      -1,    -1,    -1,    -1,    -1,    -1,    55,    -1,    82,    -1,
      -1,    -1,    -1,    37,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    48,    -1,    -1,     8,    -1,    -1,
      11,    55,    -1,    82,    15,    16,    17,    18,    19,    20,
      21,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    37,    -1,    82,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    48,    -1,    -1,
      -1,    -1,    -1,    -1,    55,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    82,    -1,    -1,    -1,    -1,    -1,   181,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   200,    -1,    -1,    -1,
      -1,   205,   181,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   200,    -1,    -1,   228,   229,   205,   181,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     244,    -1,    -1,    -1,    -1,    -1,   200,    -1,    -1,   228,
     229,   205,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   244,    -1,    -1,    -1,    -1,
     181,    -1,    -1,    -1,   228,   229,    -1,    -1,    -1,   283,
      -1,    -1,   286,    -1,    -1,    -1,    -1,    -1,    -1,   200,
     244,    -1,    -1,    -1,   205,    -1,   300,    -1,    -1,   303,
      -1,    -1,    -1,    -1,   283,    -1,    -1,   286,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   228,   229,    -1,
      -1,   300,    -1,    -1,   303,    -1,    -1,    -1,    -1,   283,
      -1,    -1,   286,   244,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   300,    -1,    -1,   303,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   283,    -1,    -1,   286,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   300,
      -1,    -1,   303,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   406,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   406,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   406,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   406,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   517,    -1,    -1,   520,   521,   522,    -1,
     524,   525,   526,   527,   528,   529,    -1,    -1,   532,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   517,    -1,
      -1,   520,   521,   522,    -1,   524,   525,   526,   527,   528,
     529,    -1,    -1,   532,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   517,    -1,    -1,   520,   521,   522,    -1,
     524,   525,   526,   527,   528,   529,    -1,    -1,   532,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,     3,    -1,    -1,   517,    -1,    -1,   520,
     521,   522,    -1,   524,   525,   526,   527,   528,   529,    -1,
      -1,   532,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
      70,    71,    72,    73,    74,    75,    76,    77,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    95,    96,    97,    98,    99,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
     120,   121,   122,   123,   124,   125,   126,   127,   128,   129,
     130,   131,   132,   133,   134,   135,   136,   137,   138,   139,
     140,   141,   142,   143,   144,   145,   146,   147,   148,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
     160,   161,   162,   163,   164,   165,   166,   167,   168,   169,
     170,   171,   172,   173,   174,   175,   176,   177,   178,   179,
     180,   181,   182,   183,   184,   185,   186,   187,   188,   189,
     190,   191,   192,   193,   194,   195,   196,   197,   198,   199,
     200,   201,   202,   203,   204,   205,   206,   207,   208,   209,
     210,   211,   212,   213,   214,   215,   216,   217,   218,   219,
     220,   221,   222,   223,   224,   225,   226,   227,   228,   229,
     230,   231,   232,   233,   234,   235,   236,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
     280,   281,   282,   283,   284,   285,   286,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,   323,   324,   325,   326,   327,   328,   329,
     330,   331,   332,   333,   334,   335,   336,   337,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   347,   348,   349,
     350,   351,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,   428,   429,
     430,   431,   432,   433,   434,   435,   436,   437,   438,   439,
     440,   441,   442,   443,   444,   445,   446,   447,   448,   449,
     450,   451,   452,   453,   454,   455,   456,   457,   458,   459,
     460,   461,   462,   463,   464,   465,   466,   467,   468,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,   482,   483,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,   498,   499,
     500,   501,   502,   503,   504,   505,   506,   507,   508,   509,
     510,   511,   512,   513,   514,   515,   516,     3,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   526,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    -1,    32,    33,    34,    -1,
      -1,    -1,    -1,    -1,    40,    -1,    -1,    -1,    -1,    45,
      46,    -1,    48,    49,    50,    -1,    52,    53,    54,    55,
      56,    -1,    58,    59,    -1,    61,    62,    63,    64,    65,
      66,    -1,    -1,    69,    70,    71,    72,    73,    74,    75,
      -1,    77,    78,    79,    80,    81,    -1,    -1,    -1,    85,
      86,    87,    88,    89,    90,    -1,    92,    93,    94,    -1,
      96,    97,    98,    99,   100,   101,    -1,    -1,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,    -1,   120,    -1,   122,   123,   124,   125,
     126,   127,    -1,    -1,   130,   131,   132,   133,   134,    -1,
      -1,   137,   138,   139,   140,   141,   142,   143,    -1,   145,
     146,   147,    -1,   149,   150,   151,    -1,   153,   154,   155,
     156,   157,   158,   159,   160,   161,   162,   163,    -1,   165,
      -1,   167,   168,   169,   170,    -1,   172,    -1,   174,    -1,
      -1,    -1,   178,   179,   180,    -1,   182,    -1,   184,   185,
      -1,    -1,   188,   189,   190,   191,    -1,   193,   194,   195,
     196,   197,   198,   199,    -1,   201,   202,   203,   204,    -1,
     206,   207,   208,   209,   210,   211,   212,    -1,   214,    -1,
     216,   217,   218,   219,   220,   221,   222,   223,    -1,   225,
      -1,   227,    -1,    -1,   230,    -1,   232,   233,   234,   235,
     236,   237,   238,    -1,    -1,   241,    -1,   243,    -1,    -1,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
      -1,   277,   278,   279,   280,   281,   282,    -1,   284,   285,
      -1,   287,    -1,   289,   290,   291,   292,   293,   294,    -1,
     296,   297,    -1,    -1,   300,   301,   302,    -1,    -1,   305,
     306,   307,    -1,   309,    -1,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,   323,   324,    -1,
      -1,    -1,    -1,   329,   330,   331,    -1,   333,   334,   335,
     336,   337,   338,    -1,   340,   341,   342,   343,   344,   345,
     346,   347,    -1,   349,   350,   351,   352,   353,   354,   355,
     356,    -1,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,    -1,   373,   374,    -1,
     376,   377,   378,   379,   380,   381,   382,   383,   384,   385,
     386,   387,   388,   389,   390,   391,   392,    -1,    -1,   395,
     396,   397,   398,   399,   400,   401,   402,   403,   404,    -1,
      -1,   407,   408,   409,   410,    -1,   412,   413,   414,   415,
     416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,    -1,    -1,   430,   431,    -1,   433,    -1,   435,
     436,   437,   438,   439,    -1,   441,   442,   443,    -1,   445,
      -1,   447,   448,   449,   450,   451,    -1,   453,   454,   455,
     456,   457,   458,   459,   460,    -1,    -1,   463,   464,   465,
      -1,   467,   468,   469,   470,    -1,   472,   473,   474,   475,
     476,   477,   478,    -1,   480,    -1,   482,   483,   484,   485,
     486,   487,   488,   489,   490,    -1,    -1,   493,    -1,    -1,
     496,   497,   498,   499,   500,   501,   502,   503,   504,   505,
     506,   507,   508,   509,   510,   511,   512,   513,   514,   515,
     516,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     526,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    -1,
      32,    33,    34,    -1,    -1,    -1,    -1,    -1,    40,    -1,
      -1,    -1,    -1,    45,    46,    -1,    48,    49,    50,    -1,
      52,    53,    54,    55,    56,    -1,    58,    59,    -1,    61,
      62,    63,    64,    65,    66,    -1,    -1,    69,    70,    71,
      72,    73,    74,    75,    -1,    77,    78,    79,    80,    81,
      -1,    -1,    -1,    85,    86,    87,    88,    89,    90,    -1,
      92,    93,    94,    -1,    96,    97,    98,    99,   100,   101,
      -1,    -1,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,    -1,   120,    -1,
     122,   123,   124,   125,   126,   127,    -1,    -1,   130,   131,
     132,   133,   134,    -1,    -1,   137,   138,   139,   140,   141,
     142,   143,    -1,   145,   146,   147,    -1,   149,   150,   151,
      -1,   153,   154,   155,   156,   157,   158,   159,   160,   161,
     162,   163,    -1,   165,    -1,   167,   168,   169,   170,    -1,
     172,    -1,   174,    -1,    -1,    -1,   178,   179,   180,    -1,
     182,    -1,   184,   185,    -1,    -1,   188,   189,   190,   191,
      -1,   193,   194,   195,   196,   197,   198,   199,    -1,   201,
     202,   203,   204,    -1,   206,   207,   208,   209,   210,   211,
     212,    -1,   214,    -1,   216,   217,   218,   219,   220,   221,
     222,   223,    -1,   225,    -1,   227,    -1,    -1,   230,    -1,
     232,   233,   234,   235,   236,   237,   238,    -1,    -1,   241,
      -1,   243,    -1,    -1,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,    -1,   277,   278,   279,   280,   281,
     282,    -1,   284,   285,    -1,   287,    -1,   289,   290,   291,
     292,   293,   294,    -1,   296,   297,    -1,    -1,   300,   301,
     302,    -1,    -1,   305,   306,   307,    -1,   309,    -1,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,   323,   324,    -1,    -1,    -1,    -1,   329,   330,   331,
      -1,   333,   334,   335,   336,   337,   338,    -1,   340,   341,
     342,   343,   344,   345,   346,   347,    -1,   349,   350,   351,
     352,   353,   354,   355,   356,    -1,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
      -1,   373,   374,    -1,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,   386,   387,   388,   389,   390,   391,
     392,    -1,    -1,   395,   396,   397,   398,   399,   400,   401,
     402,   403,   404,    -1,    -1,   407,   408,   409,   410,    -1,
     412,   413,   414,   415,   416,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,    -1,    -1,   430,   431,
      -1,   433,    -1,   435,   436,   437,   438,   439,    -1,   441,
     442,   443,    -1,   445,    -1,   447,   448,   449,   450,   451,
      -1,   453,   454,   455,   456,   457,   458,   459,   460,    -1,
      -1,   463,   464,   465,    -1,   467,   468,   469,   470,    -1,
     472,   473,   474,   475,   476,   477,   478,    -1,   480,    -1,
     482,   483,   484,   485,   486,   487,   488,   489,   490,    -1,
      -1,   493,    -1,    -1,   496,   497,   498,   499,   500,   501,
     502,   503,   504,   505,   506,   507,   508,   509,   510,   511,
     512,   513,   514,   515,   516,     3,     4,     5,    -1,    -1,
      -1,     9,    -1,    -1,   526,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    -1,    32,    33,    34,    -1,    -1,    -1,
      38,    -1,    40,    -1,    -1,    -1,    44,    45,    46,    -1,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      58,    59,    -1,    61,    62,    63,    64,    65,    66,    -1,
      -1,    69,    70,    71,    72,    73,    74,    75,    -1,    77,
      78,    79,    80,    81,    -1,    83,    -1,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    -1,    96,    97,
      98,    99,   100,   101,    -1,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,    -1,   120,    -1,   122,   123,   124,   125,   126,   127,
      -1,    -1,   130,   131,   132,   133,   134,    -1,    -1,   137,
     138,   139,   140,   141,   142,   143,    -1,   145,   146,   147,
      -1,   149,   150,   151,    -1,   153,   154,   155,   156,   157,
     158,   159,   160,   161,   162,   163,   164,   165,    -1,   167,
     168,   169,   170,    -1,   172,    -1,   174,   175,    -1,   177,
     178,   179,   180,   181,   182,    -1,   184,   185,    -1,    -1,
     188,   189,   190,   191,    -1,   193,   194,   195,   196,   197,
     198,   199,   200,   201,   202,   203,   204,    -1,   206,   207,
     208,   209,   210,   211,   212,    -1,   214,   215,   216,   217,
     218,   219,   220,   221,   222,   223,    -1,   225,    -1,   227,
     228,   229,   230,   231,   232,   233,   234,   235,   236,   237,
     238,    -1,    -1,   241,   242,   243,   244,    -1,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,   280,   281,   282,    -1,   284,   285,   286,   287,
      -1,   289,   290,   291,   292,   293,   294,    -1,   296,   297,
     298,    -1,   300,   301,   302,    -1,    -1,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323,   324,    -1,    -1,    -1,
      -1,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     338,    -1,   340,   341,   342,   343,   344,   345,   346,   347,
      -1,   349,   350,   351,   352,   353,   354,   355,   356,    -1,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,   371,    -1,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,   386,   387,
     388,   389,   390,   391,   392,    -1,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,    -1,   406,   407,
     408,   409,   410,    -1,   412,   413,   414,   415,   416,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
      -1,    -1,   430,   431,    -1,   433,   434,   435,   436,   437,
     438,   439,    -1,   441,   442,   443,    -1,   445,    -1,   447,
     448,   449,   450,   451,   452,   453,   454,   455,   456,   457,
     458,   459,   460,    -1,    -1,   463,   464,   465,    -1,   467,
     468,   469,   470,    -1,   472,   473,   474,   475,   476,   477,
     478,    -1,   480,   481,   482,   483,   484,   485,   486,   487,
     488,   489,   490,    -1,    -1,   493,    -1,    -1,   496,   497,
     498,   499,   500,   501,   502,   503,   504,   505,   506,   507,
     508,   509,   510,   511,   512,   513,   514,   515,   516,    -1,
      -1,     8,    -1,    -1,    11,    -1,   524,   525,    15,    16,
      17,    18,    19,    20,    21,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      37,    -1,    -1,    -1,    -1,    -1,    43,    -1,    -1,    -1,
      -1,    48,     8,    -1,    -1,    11,    -1,    -1,    55,    15,
      16,    17,    18,    19,    20,    21,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    37,    -1,    -1,    -1,    82,    -1,    -1,    -1,    -1,
      -1,    -1,    48,     8,    -1,    -1,    11,    -1,    -1,    55,
      15,    16,    17,    18,    19,    20,    21,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    37,    -1,    -1,    -1,    82,    -1,    -1,    -1,
      -1,   128,    -1,    48,    -1,    -1,     8,    -1,    -1,    11,
      55,    -1,    -1,    15,    16,    17,    18,    19,    20,    21,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    37,    -1,    82,    -1,    -1,
      42,    -1,    -1,    -1,    -1,    -1,    48,    -1,    -1,    -1,
      -1,    -1,    -1,    55,   181,    -1,    -1,     8,    -1,    -1,
      11,    -1,    -1,    -1,    15,    16,    17,    18,    19,    20,
      21,    -1,    -1,   200,    -1,    -1,    -1,    -1,   205,    -1,
      82,    -1,    -1,    -1,    -1,   171,    37,    -1,    -1,    -1,
     176,    -1,    -1,    -1,    -1,   181,    -1,    48,    -1,    -1,
      -1,   228,   229,    -1,    55,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   200,    -1,    -1,   244,    -1,   205,
      -1,    -1,    -1,    -1,    -1,   170,    -1,    -1,    -1,    -1,
      -1,    82,    -1,    -1,    -1,    -1,   181,    -1,    -1,    -1,
      -1,    -1,   228,   229,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   200,   283,    -1,   244,   286,
     205,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   300,    -1,    -1,   303,    -1,    -1,   181,
      -1,    -1,    -1,   228,   229,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   283,   200,   244,
     286,    -1,    -1,   205,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   300,    -1,    -1,   303,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   228,   229,    -1,    -1,
     181,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   283,    -1,
      -1,   286,   244,    -1,    -1,    -1,    -1,    -1,    -1,   200,
      -1,    -1,    -1,    -1,   205,   300,    -1,    -1,   303,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   228,   229,   406,
      -1,   283,    -1,    -1,   286,    -1,    -1,    -1,    -1,   334,
      -1,    -1,    -1,   244,    -1,    -1,    -1,    -1,   300,    -1,
      -1,   303,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     406,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   283,    -1,    -1,   286,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   471,    -1,    -1,    -1,    -1,   300,
      -1,    -1,   303,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   406,    -1,     8,    -1,    -1,    11,    -1,    -1,    -1,
      15,    16,    17,    18,    19,    20,    21,   328,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     517,    -1,    37,   520,   521,   522,    -1,   524,   525,   526,
     527,   528,   529,    48,   406,    -1,    -1,    -1,    -1,    -1,
      55,    -1,    -1,    -1,    -1,    -1,     8,    -1,    -1,    11,
      -1,    -1,    -1,    15,    16,    17,    18,    19,    20,    21,
      -1,   517,    -1,    -1,   520,   521,   522,    82,   524,   525,
     526,   527,   528,   529,    -1,    37,    -1,    -1,    -1,    -1,
      42,    -1,    -1,    -1,    -1,   406,    48,    -1,    -1,    -1,
      -1,    -1,    -1,    55,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   517,    -1,    -1,   520,   521,   522,    -1,   524,
     525,   526,   527,   528,   529,    -1,    -1,    -1,    -1,    -1,
      82,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   517,    -1,    -1,   520,   521,
     522,    -1,   524,   525,   526,   527,   528,   529,    -1,    -1,
      -1,   176,    -1,    -1,    -1,    -1,   181,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   200,    -1,    -1,    -1,    -1,
     205,    -1,    -1,    -1,    -1,    -1,   517,    -1,    -1,   520,
     521,   522,    -1,   524,   525,   526,   527,   528,   529,    -1,
      -1,    -1,    -1,   228,   229,    -1,    -1,    -1,    -1,   181,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   244,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   200,    -1,
      -1,    -1,    -1,   205,     8,    -1,    -1,    11,    -1,    -1,
      -1,    15,    16,    17,    18,    19,    20,    21,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   228,   229,   283,    -1,
      -1,   286,    -1,    37,    -1,    -1,    -1,    -1,    42,    -1,
      -1,    -1,   244,    -1,    48,   300,    -1,    -1,   303,    -1,
      -1,    55,    -1,    -1,    -1,    -1,     8,    -1,    -1,    11,
      -1,    -1,    -1,    15,    16,    17,    18,    19,    20,    21,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    82,    -1,
      -1,   283,    -1,    -1,   286,    37,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    48,    -1,   300,    -1,
      -1,   303,    -1,    55,    -1,    -1,    -1,    -1,     8,    -1,
      -1,    11,    -1,    -1,    -1,    15,    16,    17,    18,    19,
      20,    21,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      82,    -1,    -1,    -1,    -1,    -1,    -1,    37,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    48,    -1,
      -1,   406,    -1,    -1,    -1,    55,    -1,    -1,    -1,    -1,
       8,    -1,    -1,    11,    -1,    -1,    -1,    15,    16,    17,
      18,    19,    20,    21,    -1,    -1,    -1,   181,    -1,    -1,
      -1,    -1,    82,    -1,    -1,    -1,    -1,    -1,    -1,    37,
      -1,    -1,    -1,    -1,    42,    -1,   200,    -1,    -1,    -1,
      48,   205,    -1,    -1,   406,    -1,    -1,    55,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   171,
      -1,    -1,    -1,    -1,   228,   229,    -1,    -1,    -1,   181,
      -1,    -1,    -1,    -1,    82,    -1,    -1,    -1,    -1,    -1,
     244,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   200,    -1,
      -1,    -1,    -1,   205,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   517,    -1,    -1,   520,   521,   522,    -1,   524,
     525,   526,   527,   528,   529,    -1,   228,   229,    -1,   283,
      -1,   181,   286,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   244,    -1,    -1,    -1,   300,    -1,    -1,   303,
     200,    -1,    -1,    -1,    -1,   205,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   517,    -1,    -1,   520,   521,
     522,    -1,   524,   525,   526,   527,   528,   529,   228,   229,
      -1,   283,    -1,   181,   286,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   244,    -1,    -1,    -1,   300,    -1,
      -1,   303,   200,    -1,    -1,    -1,    -1,   205,     8,    -1,
      -1,    11,    -1,    -1,    -1,    15,    16,    17,    18,    19,
      20,    21,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     228,   229,    -1,   283,    -1,    -1,   286,    37,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   244,    -1,    48,    -1,
     300,    -1,   406,   303,    -1,    55,    -1,    -1,    -1,    -1,
       8,    -1,    -1,    11,    -1,    -1,    -1,    15,    16,    17,
      18,    19,    20,    21,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    82,    -1,    -1,   283,    -1,    -1,   286,    37,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      48,    -1,   300,    -1,   406,   303,    -1,    55,    -1,    -1,
      -1,    -1,     8,    -1,    -1,    11,    -1,    -1,    -1,    15,
      16,    17,    18,    19,    20,    21,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    82,    -1,    -1,    -1,    -1,    -1,
      -1,    37,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    48,    -1,    -1,    -1,   406,    -1,    -1,    55,
      -1,    -1,    -1,   517,    -1,    -1,   520,   521,   522,    -1,
     524,   525,   526,   527,   528,   529,    -1,    -1,    -1,    -1,
      -1,   181,    -1,    -1,    -1,    -1,    82,    -1,    -1,    -1,
     440,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     200,    -1,    -1,    -1,    -1,   205,    -1,    -1,   406,    -1,
      -1,    -1,    -1,    -1,    -1,   517,    -1,    -1,   520,   521,
     522,    -1,   524,   525,   526,   527,   528,   529,   228,   229,
      -1,    -1,    -1,   181,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   244,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   200,    -1,    -1,    -1,    -1,   205,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   517,    -1,    -1,
     520,   521,   522,    -1,   524,   525,   526,   527,   528,   529,
     228,   229,    -1,   283,    -1,   181,   286,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   244,    -1,    -1,    -1,
     300,    -1,    -1,   303,   200,    -1,    -1,    -1,    -1,   205,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   517,
      -1,    -1,   520,   521,   522,    -1,   524,   525,   526,   527,
     528,   529,   228,   229,    -1,   283,    -1,    -1,   286,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   244,    -1,
      -1,    -1,   300,    -1,    -1,   303,    -1,    -1,    -1,    -1,
      -1,    -1,     8,    -1,    -1,    11,    -1,    -1,    -1,    -1,
      16,    17,    18,    19,    20,    21,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   283,    -1,    -1,
     286,    37,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    48,    -1,   300,    -1,   406,   303,    -1,    55,
      -1,    -1,    -1,    -1,     8,    -1,    -1,    11,    -1,    -1,
      -1,    -1,    16,    -1,    -1,    19,    20,    21,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    82,    -1,    -1,    -1,
      -1,    -1,    -1,    37,     8,    -1,    -1,    11,    -1,    -1,
      -1,    -1,    16,    -1,    48,    19,    20,    21,   406,    -1,
      -1,    55,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    37,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    48,    -1,    -1,    -1,    82,    -1,
       8,    55,    -1,    11,    -1,    -1,    -1,    15,    16,    -1,
      -1,    19,    20,    21,    -1,    -1,    -1,    -1,    -1,    -1,
     406,    -1,    -1,    -1,    -1,    -1,    -1,   517,    82,    -1,
     520,   521,   522,    -1,   524,   525,   526,   527,   528,   529,
      48,    -1,    -1,    -1,    -1,   181,    -1,    55,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,     8,    -1,    -1,    11,    -1,
      -1,    -1,    -1,    16,   200,    -1,    19,    20,    21,   205,
      -1,    -1,    -1,    -1,    82,    -1,    -1,    -1,    -1,   517,
      -1,    -1,   520,   521,   522,    -1,   524,   525,   526,   527,
     528,   529,   228,   229,    -1,    48,    -1,   181,    -1,    -1,
      -1,    -1,    55,    -1,    -1,    -1,    -1,    -1,   244,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   200,    -1,    -1,    -1,
      -1,   205,    -1,    -1,    -1,    -1,    -1,   181,    -1,    82,
      -1,   517,    -1,    -1,   520,   521,   522,    -1,   524,   525,
     526,   527,   528,   529,   228,   229,   200,   283,    -1,    -1,
     286,   205,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     244,    -1,    -1,    -1,   300,    -1,    -1,   303,    -1,    -1,
      -1,    -1,    -1,   181,   228,   229,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     244,    -1,   200,    -1,    -1,    -1,    -1,   205,    -1,   283,
      -1,    -1,   286,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,     8,    -1,   300,    11,    -1,   303,
     228,   229,    16,    -1,    -1,    19,    20,    21,   181,   283,
      -1,    -1,   286,    -1,    -1,    -1,   244,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   300,   200,    -1,    -1,
      -1,    -1,   205,    -1,    48,    -1,    -1,    -1,    -1,    -1,
      -1,    55,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     406,    -1,    -1,    -1,    -1,   228,   229,    -1,   286,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    82,    -1,
      -1,   244,   300,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   406,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     283,    -1,    -1,   286,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   300,    -1,    -1,
      -1,    -1,   406,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   517,    -1,    -1,   520,   521,   522,   181,   524,   525,
     526,   527,   528,   529,    -1,    -1,    -1,    -1,   406,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   200,    -1,    -1,    -1,
      -1,   205,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   517,   228,   229,   520,   521,   522,    -1,
     524,   525,   526,   527,   528,   529,    -1,    -1,    -1,    -1,
     244,    -1,    -1,   406,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   517,    -1,    -1,   520,   521,   522,    -1,
     524,   525,   526,   527,   528,   529,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   286,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   300,    -1,    -1,   517,
      -1,    -1,   520,   521,   522,    -1,   524,   525,   526,   527,
     528,   529,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   517,    -1,    -1,   520,   521,   522,
      -1,   524,   525,   526,   527,   528,   529,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   406,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,     3,    -1,     5,
      -1,    -1,    -1,   517,    -1,    -1,   520,   521,   522,    -1,
     524,   525,   526,   527,   528,   529,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
      96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
     126,   127,   128,   129,   130,   131,   132,   133,   134,   135,
     136,   137,   138,   139,   140,   141,   142,   143,   144,   145,
     146,   147,   148,   149,   150,   151,   152,   153,   154,   155,
     156,   157,   158,   159,   160,   161,   162,   163,   164,   165,
     166,   167,   168,   169,   170,   171,   172,   173,   174,   175,
     176,   177,   178,   179,   180,   181,   182,   183,   184,   185,
     186,   187,   188,   189,   190,   191,   192,   193,   194,   195,
     196,   197,   198,   199,   200,   201,   202,   203,   204,   205,
     206,   207,   208,   209,   210,   211,   212,   213,   214,   215,
     216,   217,   218,   219,   220,   221,   222,   223,   224,   225,
     226,   227,   228,   229,   230,   231,   232,   233,   234,   235,
     236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
     326,   327,   328,   329,   330,   331,   332,   333,   334,   335,
     336,   337,   338,   339,   340,   341,   342,   343,   344,   345,
     346,   347,   348,   349,   350,   351,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,   385,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,   428,   429,   430,   431,   432,   433,   434,   435,
     436,   437,   438,   439,   440,   441,   442,   443,   444,   445,
     446,   447,   448,   449,   450,   451,   452,   453,   454,   455,
     456,   457,   458,   459,   460,   461,   462,   463,   464,   465,
     466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   482,   483,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,   498,   499,   500,   501,   502,   503,   504,   505,
     506,   507,   508,   509,   510,   511,   512,   513,   514,   515,
     516,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
      72,    73,    74,    75,    76,    77,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    95,    96,    97,    98,    99,   100,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
     122,   123,   124,   125,   126,   127,   128,   129,   130,   131,
     132,   133,   134,   135,   136,   137,   138,   139,   140,   141,
     142,   143,   144,   145,   146,   147,   148,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,   160,   161,
     162,   163,   164,   165,   166,   167,   168,   169,   170,   171,
     172,   173,   174,   175,   176,   177,   178,   179,   180,   181,
     182,   183,   184,   185,   186,   187,   188,   189,   190,   191,
     192,   193,   194,   195,   196,   197,   198,   199,   200,   201,
     202,   203,   204,   205,   206,   207,   208,   209,   210,   211,
     212,   213,   214,   215,   216,   217,   218,   219,   220,   221,
     222,   223,   224,   225,   226,   227,   228,   229,   230,   231,
     232,   233,   234,   235,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     282,   283,   284,   285,   286,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,   323,   324,   325,   326,   327,   328,   329,   330,   331,
     332,   333,   334,   335,   336,   337,   338,   339,   340,   341,
     342,   343,   344,   345,   346,   347,   348,   349,   350,   351,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,   428,   429,   430,   431,
     432,   433,   434,   435,   436,   437,   438,   439,   440,   441,
     442,   443,   444,   445,   446,   447,   448,   449,   450,   451,
     452,   453,   454,   455,   456,   457,   458,   459,   460,   461,
     462,   463,   464,   465,   466,   467,   468,   469,   470,   471,
     472,   473,   474,   475,   476,   477,   478,   479,   480,   481,
     482,   483,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,   498,   499,   500,   501,
     502,   503,   504,   505,   506,   507,   508,   509,   510,   511,
     512,   513,   514,   515,   516,     3,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    72,    73,    74,    75,    76,    77,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    95,    96,    97,
      98,    99,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,   119,   120,   121,   122,   123,   124,   125,   126,   127,
     128,   129,   130,   131,   132,   133,   134,   135,   136,   137,
     138,   139,   140,   141,   142,   143,   144,   145,   146,   147,
     148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,   159,   160,   161,   162,   163,   164,   165,   166,   167,
     168,   169,   170,   171,   172,   173,   174,   175,   176,   177,
     178,   179,   180,   181,   182,   183,   184,   185,   186,   187,
     188,   189,   190,   191,   192,   193,   194,   195,   196,   197,
     198,   199,   200,   201,   202,   203,   204,   205,   206,   207,
     208,   209,   210,   211,   212,   213,   214,   215,   216,   217,
     218,   219,   220,   221,   222,   223,   224,   225,   226,   227,
     228,   229,   230,   231,   232,   233,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323,   324,   325,   326,   327,
     328,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,   351,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   429,   430,   431,   432,   433,   434,   435,   436,   437,
     438,   439,   440,   441,   442,   443,   444,   445,   446,   447,
     448,   449,   450,   451,   452,   453,   454,   455,   456,   457,
     458,   459,   460,   461,   462,   463,   464,   465,   466,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,   483,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,   499,   500,   501,   502,   503,   504,   505,   506,   507,
     508,   509,   510,   511,   512,   513,   514,   515,   516,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
      74,    75,    76,    77,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    95,    96,    97,    98,    99,   100,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
     124,   125,   126,   127,   128,   129,   130,   131,   132,   133,
     134,   135,   136,   137,   138,   139,   140,   141,   142,   143,
     144,   145,   146,   147,   148,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,   159,   160,   161,   162,   163,
     164,   165,   166,   167,   168,   169,   170,   171,   172,   173,
     174,   175,   176,   177,   178,   179,   180,   181,   182,   183,
     184,   185,   186,   187,   188,   189,   190,   191,   192,   193,
     194,   195,   196,   197,   198,   199,   200,   201,   202,   203,
     204,   205,   206,   207,   208,   209,   210,   211,   212,   213,
     214,   215,   216,   217,   218,   219,   220,   221,   222,   223,
     224,   225,   226,   227,   228,   229,   230,   231,   232,   233,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,   329,   330,   331,   332,   333,
     334,   335,   336,   337,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,   348,   349,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,   428,   429,   430,   431,   432,   433,
     434,   435,   436,   437,   438,   439,   440,   441,   442,   443,
     444,   445,   446,   447,   448,   449,   450,   451,   452,   453,
     454,   455,   456,   457,   458,   459,   460,   461,   462,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,   483,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,   499,   500,   501,   502,   503,
     504,   505,   506,   507,   508,   509,   510,   511,   512,   513,
     514,   515,   516,     3,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
      70,    71,    72,    73,    74,    75,    76,    77,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    95,    96,    97,    98,    99,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
     120,   121,   122,   123,   124,   125,   126,   127,   128,   129,
     130,   131,   132,   133,   134,   135,   136,   137,   138,   139,
     140,   141,   142,   143,   144,   145,   146,   147,   148,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
     160,   161,   162,   163,   164,   165,   166,   167,   168,   169,
     170,   171,   172,   173,   174,   175,   176,   177,   178,   179,
     180,   181,   182,   183,   184,   185,   186,   187,   188,   189,
     190,   191,   192,   193,   194,   195,   196,   197,   198,   199,
     200,   201,   202,   203,   204,   205,   206,   207,   208,   209,
     210,   211,   212,   213,   214,   215,   216,   217,   218,   219,
     220,   221,   222,   223,   224,   225,   226,   227,   228,   229,
     230,   231,   232,   233,   234,   235,   236,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
     280,   281,   282,   283,   284,   285,   286,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,   323,   324,   325,   326,   327,   328,   329,
     330,   331,   332,   333,   334,   335,   336,   337,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   347,   348,   349,
     350,   351,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,   428,   429,
     430,   431,   432,   433,   434,   435,   436,   437,   438,   439,
     440,   441,   442,   443,   444,   445,   446,   447,   448,   449,
     450,   451,   452,   453,   454,   455,   456,   457,   458,   459,
     460,   461,   462,   463,   464,   465,   466,   467,   468,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,   482,   483,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,   498,   499,
     500,   501,   502,   503,   504,   505,   506,   507,   508,   509,
     510,   511,   512,   513,   514,   515,   516,     3,    -1,     5,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    -1,    32,    33,    34,    -1,
      -1,    -1,    38,    -1,    40,    -1,    -1,    -1,    44,    45,
      46,    -1,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    -1,    61,    62,    63,    64,    65,
      66,    -1,    -1,    69,    70,    71,    72,    73,    74,    75,
      -1,    77,    78,    79,    80,    81,    -1,    83,    -1,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    -1,
      96,    97,    98,    99,   100,   101,    -1,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,    -1,   120,    -1,   122,   123,   124,   125,
     126,   127,    -1,    -1,   130,   131,   132,   133,   134,    -1,
      -1,   137,   138,   139,   140,   141,   142,   143,    -1,   145,
     146,   147,    -1,   149,   150,   151,    -1,   153,   154,   155,
     156,   157,   158,   159,   160,   161,   162,   163,   164,   165,
      -1,   167,   168,   169,   170,    -1,   172,    -1,   174,   175,
      -1,   177,   178,   179,   180,   181,   182,    -1,   184,   185,
      -1,    -1,   188,   189,   190,   191,    -1,   193,   194,   195,
     196,   197,   198,   199,   200,   201,   202,   203,   204,    -1,
     206,   207,   208,   209,   210,   211,   212,    -1,   214,   215,
     216,   217,   218,   219,   220,   221,   222,   223,    -1,   225,
      -1,   227,   228,   229,   230,   231,   232,   233,   234,   235,
     236,   237,   238,    -1,    -1,   241,   242,   243,   244,    -1,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,   280,   281,   282,    -1,   284,   285,
     286,   287,    -1,   289,   290,   291,   292,   293,   294,    -1,
     296,   297,   298,    -1,   300,   301,   302,    -1,    -1,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,   323,   324,    -1,
      -1,    -1,    -1,   329,   330,   331,   332,   333,   334,   335,
     336,   337,   338,    -1,   340,   341,   342,   343,   344,   345,
     346,   347,    -1,   349,   350,   351,   352,   353,   354,   355,
     356,    -1,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,    -1,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,   385,
     386,   387,   388,   389,   390,   391,   392,    -1,   394,   395,
     396,   397,   398,   399,   400,   401,   402,   403,   404,    -1,
     406,   407,   408,   409,   410,    -1,   412,   413,   414,   415,
     416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,    -1,    -1,   430,   431,    -1,   433,   434,   435,
     436,   437,   438,   439,    -1,   441,   442,   443,    -1,   445,
      -1,   447,   448,   449,   450,   451,   452,   453,   454,   455,
     456,   457,   458,   459,   460,    -1,    -1,   463,   464,   465,
      -1,   467,   468,   469,   470,    -1,   472,   473,   474,   475,
     476,   477,   478,    -1,   480,   481,   482,   483,   484,   485,
     486,   487,   488,   489,   490,    -1,    -1,   493,    -1,    -1,
     496,   497,   498,   499,   500,   501,   502,   503,   504,   505,
     506,   507,   508,   509,   510,   511,   512,   513,   514,   515,
     516,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    -1,
      32,    33,    34,    35,    36,    -1,    38,    -1,    40,    -1,
      -1,    -1,    44,    45,    46,    -1,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    58,    59,    -1,    61,
      62,    63,    64,    65,    66,    -1,    -1,    69,    70,    71,
      72,    73,    74,    75,    -1,    77,    78,    79,    80,    81,
      -1,    83,    -1,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    -1,    96,    97,    98,    99,   100,   101,
      -1,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,    -1,   120,    -1,
     122,   123,   124,   125,   126,   127,    -1,    -1,   130,   131,
     132,   133,   134,    -1,    -1,   137,   138,   139,   140,   141,
     142,   143,    -1,   145,   146,   147,    -1,   149,   150,   151,
      -1,   153,   154,   155,   156,   157,   158,   159,   160,   161,
     162,   163,    -1,   165,    -1,   167,   168,   169,   170,    -1,
     172,    -1,   174,   175,    -1,   177,   178,   179,   180,   181,
     182,    -1,   184,   185,    -1,    -1,   188,   189,   190,   191,
      -1,   193,   194,   195,   196,   197,   198,   199,   200,   201,
     202,   203,   204,    -1,   206,   207,   208,   209,   210,   211,
     212,    -1,   214,   215,   216,   217,   218,   219,   220,   221,
     222,   223,    -1,   225,    -1,   227,   228,   229,   230,   231,
     232,   233,   234,   235,   236,   237,   238,    -1,    -1,   241,
     242,   243,   244,    -1,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     282,    -1,   284,   285,   286,   287,    -1,   289,   290,   291,
     292,   293,   294,    -1,   296,   297,    -1,    -1,   300,   301,
     302,    -1,    -1,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,   323,   324,    -1,    -1,    -1,    -1,   329,   330,   331,
     332,   333,   334,   335,   336,   337,   338,    -1,   340,   341,
     342,   343,   344,   345,   346,   347,    -1,   349,   350,   351,
     352,   353,   354,   355,   356,    -1,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
      -1,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,   386,   387,   388,   389,   390,   391,
     392,    -1,   394,   395,   396,   397,   398,   399,   400,   401,
     402,   403,   404,    -1,   406,   407,   408,   409,   410,    -1,
     412,   413,   414,   415,   416,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,    -1,    -1,   430,   431,
      -1,   433,   434,   435,   436,   437,   438,   439,    -1,   441,
     442,   443,    -1,   445,    -1,   447,   448,   449,   450,   451,
      -1,   453,   454,   455,   456,   457,   458,   459,   460,    -1,
      -1,   463,   464,   465,    -1,   467,   468,   469,   470,    -1,
     472,   473,   474,   475,   476,   477,   478,    -1,   480,   481,
     482,   483,   484,   485,   486,   487,   488,   489,   490,    -1,
      -1,   493,    -1,    -1,   496,   497,   498,   499,   500,   501,
     502,   503,   504,   505,   506,   507,   508,   509,   510,   511,
     512,   513,   514,   515,   516,     3,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    -1,    32,    33,    34,    -1,    -1,    -1,
      -1,    -1,    40,    -1,    -1,    -1,    44,    45,    46,    -1,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      58,    59,    -1,    61,    62,    63,    64,    65,    66,    -1,
      68,    69,    70,    71,    72,    73,    74,    75,    -1,    77,
      78,    79,    80,    81,    -1,    83,    -1,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    -1,    96,    97,
      98,    99,   100,   101,    -1,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,    -1,   120,    -1,   122,   123,   124,   125,   126,   127,
      -1,    -1,   130,   131,   132,   133,   134,    -1,    -1,   137,
     138,   139,   140,   141,   142,   143,    -1,   145,   146,   147,
      -1,   149,   150,   151,    -1,   153,   154,   155,   156,   157,
     158,   159,   160,   161,   162,   163,    -1,   165,    -1,   167,
     168,   169,   170,    -1,   172,    -1,   174,   175,    -1,   177,
     178,   179,   180,   181,   182,    -1,   184,   185,    -1,    -1,
     188,   189,   190,   191,    -1,   193,   194,   195,   196,   197,
     198,   199,   200,   201,   202,   203,   204,    -1,   206,   207,
     208,   209,   210,   211,   212,    -1,   214,   215,   216,   217,
     218,   219,   220,   221,   222,   223,    -1,   225,    -1,   227,
     228,   229,   230,   231,   232,   233,   234,   235,   236,   237,
     238,    -1,    -1,   241,   242,   243,   244,    -1,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,   280,   281,   282,    -1,   284,   285,   286,   287,
      -1,   289,   290,   291,   292,   293,   294,    -1,   296,   297,
      -1,    -1,   300,   301,   302,    -1,    -1,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323,   324,    -1,    -1,    -1,
      -1,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     338,    -1,   340,   341,   342,   343,   344,   345,   346,   347,
      -1,   349,   350,   351,   352,   353,   354,   355,   356,    -1,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,   371,    -1,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,   386,   387,
     388,   389,   390,   391,   392,    -1,    -1,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,    -1,   406,   407,
     408,   409,   410,    -1,   412,   413,   414,   415,   416,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
      -1,    -1,   430,   431,    -1,   433,   434,   435,   436,   437,
     438,   439,    -1,   441,   442,   443,    -1,   445,    -1,   447,
     448,   449,   450,   451,    -1,   453,   454,   455,   456,   457,
     458,   459,   460,    -1,    -1,   463,   464,   465,    -1,   467,
     468,   469,   470,    -1,   472,   473,   474,   475,   476,   477,
     478,    -1,   480,   481,   482,   483,   484,   485,   486,   487,
     488,   489,   490,    -1,    -1,   493,    -1,    -1,   496,   497,
     498,   499,   500,   501,   502,   503,   504,   505,   506,   507,
     508,   509,   510,   511,   512,   513,   514,   515,   516,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    -1,    32,    33,
      34,    -1,    -1,    -1,    -1,    -1,    40,    -1,    -1,    -1,
      44,    45,    46,    -1,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    58,    59,    -1,    61,    62,    63,
      64,    65,    66,    -1,    -1,    69,    70,    71,    72,    73,
      74,    75,    -1,    77,    78,    79,    80,    81,    -1,    83,
      -1,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    -1,    96,    97,    98,    99,   100,   101,    -1,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,    -1,   120,    -1,   122,   123,
     124,   125,   126,   127,    -1,    -1,   130,   131,   132,   133,
     134,    -1,    -1,   137,   138,   139,   140,   141,   142,   143,
      -1,   145,   146,   147,    -1,   149,   150,   151,    -1,   153,
     154,   155,   156,   157,   158,   159,   160,   161,   162,   163,
      -1,   165,    -1,   167,   168,   169,   170,    -1,   172,    -1,
     174,   175,    -1,   177,   178,   179,   180,   181,   182,    -1,
     184,   185,    -1,    -1,   188,   189,   190,   191,    -1,   193,
     194,   195,   196,   197,   198,   199,   200,   201,   202,   203,
     204,    -1,   206,   207,   208,   209,   210,   211,   212,    -1,
     214,   215,   216,   217,   218,   219,   220,   221,   222,   223,
      -1,   225,    -1,   227,   228,   229,   230,   231,   232,   233,
     234,   235,   236,   237,   238,    -1,    -1,   241,   242,   243,
     244,    -1,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,    -1,
     284,   285,   286,   287,    -1,   289,   290,   291,   292,   293,
     294,    -1,   296,   297,    -1,    -1,   300,   301,   302,    -1,
      -1,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,    -1,    -1,    -1,    -1,   329,   330,   331,   332,   333,
     334,   335,   336,   337,   338,    -1,   340,   341,   342,   343,
     344,   345,   346,   347,    -1,   349,   350,   351,   352,   353,
     354,   355,   356,    -1,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,   371,    -1,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,   385,   386,   387,   388,   389,   390,   391,   392,    -1,
      -1,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,    -1,   406,   407,   408,   409,   410,    -1,   412,   413,
     414,   415,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,    -1,    -1,   430,   431,    -1,   433,
     434,   435,   436,   437,   438,   439,    -1,   441,   442,   443,
      -1,   445,    -1,   447,   448,   449,   450,   451,    -1,   453,
     454,   455,   456,   457,   458,   459,   460,    -1,    -1,   463,
     464,   465,    -1,   467,   468,   469,   470,    -1,   472,   473,
     474,   475,   476,   477,   478,    -1,   480,   481,   482,   483,
     484,   485,   486,   487,   488,   489,   490,    -1,    -1,   493,
      -1,    -1,   496,   497,   498,   499,   500,   501,   502,   503,
     504,   505,   506,   507,   508,   509,   510,   511,   512,   513,
     514,   515,   516,     3,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    -1,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,
      40,    -1,    -1,    -1,    -1,    45,    46,    -1,    48,    49,
      50,    -1,    52,    53,    54,    55,    56,    -1,    58,    59,
      -1,    61,    62,    63,    64,    65,    66,    -1,    -1,    69,
      70,    71,    72,    73,    74,    75,    76,    77,    78,    79,
      80,    81,    -1,    -1,    84,    85,    86,    87,    88,    89,
      90,    -1,    92,    93,    94,    95,    96,    97,    98,    99,
     100,   101,    -1,    -1,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,    -1,
     120,    -1,   122,   123,   124,   125,   126,   127,    -1,    -1,
     130,   131,   132,   133,   134,    -1,    -1,   137,   138,   139,
     140,   141,   142,   143,    -1,   145,   146,   147,    -1,   149,
     150,   151,    -1,   153,   154,   155,   156,   157,   158,   159,
     160,   161,   162,   163,    -1,   165,    -1,   167,   168,   169,
     170,    -1,   172,   173,   174,    -1,    -1,    -1,   178,   179,
     180,    -1,   182,    -1,   184,   185,    -1,    -1,   188,   189,
     190,   191,    -1,   193,   194,   195,   196,   197,   198,   199,
      -1,   201,   202,   203,   204,    -1,   206,   207,   208,   209,
     210,   211,   212,    -1,   214,    -1,   216,   217,   218,   219,
     220,   221,   222,   223,    -1,   225,    -1,   227,    -1,    -1,
     230,    -1,   232,   233,   234,   235,   236,   237,   238,    -1,
      -1,   241,    -1,   243,    -1,    -1,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,    -1,   277,   278,   279,
     280,   281,   282,    -1,   284,   285,    -1,   287,    -1,   289,
     290,   291,   292,   293,   294,    -1,   296,   297,    -1,    -1,
     300,   301,   302,    -1,    -1,   305,   306,   307,    -1,   309,
      -1,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,   323,   324,    -1,    -1,    -1,    -1,   329,
     330,   331,    -1,   333,   334,   335,   336,   337,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   347,    -1,   349,
     350,   351,   352,   353,   354,   355,   356,    -1,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
     370,   371,    -1,   373,   374,    -1,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,   386,   387,   388,   389,
     390,   391,   392,    -1,    -1,   395,   396,   397,   398,   399,
     400,   401,   402,   403,   404,    -1,    -1,   407,   408,   409,
     410,    -1,   412,   413,   414,   415,   416,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,    -1,    -1,
     430,   431,    -1,   433,    -1,   435,   436,   437,   438,   439,
      -1,   441,   442,   443,    -1,   445,    -1,   447,   448,   449,
     450,   451,    -1,   453,   454,   455,   456,   457,   458,   459,
     460,    -1,   462,   463,   464,   465,    -1,   467,   468,   469,
     470,    -1,   472,   473,   474,   475,   476,   477,   478,    -1,
     480,    -1,   482,   483,   484,   485,   486,   487,   488,   489,
     490,    -1,    -1,   493,    -1,    -1,   496,   497,   498,   499,
     500,   501,   502,   503,   504,   505,   506,   507,   508,   509,
     510,   511,   512,   513,   514,   515,   516,     3,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    -1,    32,    33,    34,    -1,
      -1,    -1,    -1,    -1,    40,    -1,    -1,    -1,    -1,    45,
      46,    -1,    48,    49,    50,    -1,    52,    53,    54,    55,
      56,    -1,    58,    59,    -1,    61,    62,    63,    64,    65,
      66,    -1,    -1,    69,    70,    71,    72,    73,    74,    75,
      76,    77,    78,    79,    80,    81,    -1,    -1,    -1,    85,
      86,    87,    88,    89,    90,    -1,    92,    93,    94,    95,
      96,    97,    98,    99,   100,   101,    -1,    -1,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,    -1,   120,    -1,   122,   123,   124,   125,
     126,   127,    -1,    -1,   130,   131,   132,   133,   134,    -1,
      -1,   137,   138,   139,   140,   141,   142,   143,    -1,   145,
     146,   147,    -1,   149,   150,   151,    -1,   153,   154,   155,
     156,   157,   158,   159,   160,   161,   162,   163,    -1,   165,
      -1,   167,   168,   169,   170,    -1,   172,   173,   174,    -1,
      -1,    -1,   178,   179,   180,    -1,   182,    -1,   184,   185,
      -1,    -1,   188,   189,   190,   191,    -1,   193,   194,   195,
     196,   197,   198,   199,    -1,   201,   202,   203,   204,    -1,
     206,   207,   208,   209,   210,   211,   212,    -1,   214,    -1,
     216,   217,   218,   219,   220,   221,   222,   223,    -1,   225,
      -1,   227,    -1,    -1,   230,    -1,   232,   233,   234,   235,
     236,   237,   238,    -1,    -1,   241,    -1,   243,   244,    -1,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
      -1,   277,   278,   279,   280,   281,   282,    -1,   284,   285,
      -1,   287,    -1,   289,   290,   291,   292,   293,   294,    -1,
     296,   297,    -1,    -1,   300,   301,   302,    -1,    -1,   305,
     306,   307,    -1,   309,    -1,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,   323,   324,    -1,
      -1,    -1,    -1,   329,   330,   331,    -1,   333,   334,   335,
     336,   337,   338,   339,   340,   341,   342,   343,   344,   345,
     346,   347,    -1,   349,   350,   351,   352,   353,   354,   355,
     356,    -1,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,    -1,   373,   374,    -1,
     376,   377,   378,   379,   380,   381,   382,   383,   384,   385,
     386,   387,   388,   389,   390,   391,   392,    -1,    -1,   395,
     396,   397,   398,   399,   400,   401,   402,   403,   404,    -1,
      -1,   407,   408,   409,   410,    -1,   412,   413,   414,   415,
     416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,    -1,    -1,   430,   431,    -1,   433,    -1,   435,
     436,   437,   438,   439,    -1,   441,   442,   443,    -1,   445,
      -1,   447,   448,   449,   450,   451,    -1,   453,   454,   455,
     456,   457,   458,   459,   460,    -1,   462,   463,   464,   465,
      -1,   467,   468,   469,   470,    -1,   472,   473,   474,   475,
     476,   477,   478,    -1,   480,    -1,   482,   483,   484,   485,
     486,   487,   488,   489,   490,    -1,    -1,   493,    -1,    -1,
     496,   497,   498,   499,   500,   501,   502,   503,   504,   505,
     506,   507,   508,   509,   510,   511,   512,   513,   514,   515,
     516,     3,    -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    -1,
      32,    33,    34,    35,    36,    -1,    -1,    -1,    40,    -1,
      -1,    -1,    -1,    45,    46,    -1,    48,    49,    50,    -1,
      52,    53,    54,    55,    56,    -1,    58,    59,    -1,    61,
      62,    63,    64,    65,    66,    -1,    -1,    69,    70,    71,
      72,    73,    74,    75,    -1,    77,    78,    79,    80,    81,
      -1,    -1,    -1,    85,    86,    87,    88,    89,    90,    -1,
      92,    93,    94,    -1,    96,    97,    98,    99,   100,   101,
      -1,    -1,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,    -1,   120,    -1,
     122,   123,   124,   125,   126,   127,    -1,    -1,   130,   131,
     132,   133,   134,    -1,    -1,   137,   138,   139,   140,   141,
     142,   143,    -1,   145,   146,   147,    -1,   149,   150,   151,
      -1,   153,   154,   155,   156,   157,   158,   159,   160,   161,
     162,   163,    -1,   165,    -1,   167,   168,   169,   170,    -1,
     172,    -1,   174,    -1,    -1,    -1,   178,   179,   180,    -1,
     182,    -1,   184,   185,    -1,    -1,   188,   189,   190,   191,
      -1,   193,   194,   195,   196,   197,   198,   199,    -1,   201,
     202,   203,   204,    -1,   206,   207,   208,   209,   210,   211,
     212,    -1,   214,    -1,   216,   217,   218,   219,   220,   221,
     222,   223,    -1,   225,    -1,   227,    -1,    -1,   230,    -1,
     232,   233,   234,   235,   236,   237,   238,    -1,    -1,   241,
      -1,   243,    -1,    -1,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,    -1,   277,   278,   279,   280,   281,
     282,    -1,   284,   285,    -1,   287,    -1,   289,   290,   291,
     292,   293,   294,    -1,   296,   297,    -1,    -1,   300,   301,
     302,    -1,    -1,   305,   306,   307,    -1,   309,    -1,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,   323,   324,    -1,    -1,    -1,    -1,   329,   330,   331,
      -1,   333,   334,   335,   336,   337,   338,    -1,   340,   341,
     342,   343,   344,   345,   346,   347,    -1,   349,   350,   351,
     352,   353,   354,   355,   356,    -1,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
      -1,   373,   374,    -1,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,   386,   387,   388,   389,   390,   391,
     392,    -1,    -1,   395,   396,   397,   398,   399,   400,   401,
     402,   403,   404,    -1,    -1,   407,   408,   409,   410,    -1,
     412,   413,   414,   415,   416,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,    -1,    -1,   430,   431,
      -1,   433,    -1,   435,   436,   437,   438,   439,    -1,   441,
     442,   443,    -1,   445,    -1,   447,   448,   449,   450,   451,
      -1,   453,   454,   455,   456,   457,   458,   459,   460,    -1,
      -1,   463,   464,   465,    -1,   467,   468,   469,   470,    -1,
     472,   473,   474,   475,   476,   477,   478,    -1,   480,    -1,
     482,   483,   484,   485,   486,   487,   488,   489,   490,    -1,
      -1,   493,    -1,    -1,   496,   497,   498,   499,   500,   501,
     502,   503,   504,   505,   506,   507,   508,   509,   510,   511,
     512,   513,   514,   515,   516,     3,    -1,     5,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    33,    34,    -1,    -1,    -1,
      -1,    -1,    40,    -1,    -1,    -1,    -1,    45,    46,    -1,
      48,    49,    50,    -1,    52,    53,    54,    55,    56,    -1,
      58,    59,    -1,    61,    62,    63,    64,    65,    66,    -1,
      -1,    69,    70,    71,    72,    73,    74,    75,    -1,    77,
      78,    79,    80,    81,    -1,    -1,    -1,    85,    86,    87,
      88,    89,    90,    -1,    92,    93,    94,    -1,    96,    97,
      98,    99,   100,   101,    -1,    -1,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,    -1,   120,    -1,   122,   123,   124,   125,   126,   127,
      -1,    -1,   130,   131,   132,   133,   134,    -1,    -1,   137,
     138,   139,   140,   141,   142,   143,    -1,   145,   146,   147,
      -1,   149,   150,   151,    -1,   153,   154,   155,   156,   157,
     158,   159,   160,   161,   162,   163,    -1,   165,    -1,   167,
     168,   169,   170,    -1,   172,    -1,   174,    -1,    -1,    -1,
     178,   179,   180,    -1,   182,    -1,   184,   185,    -1,    -1,
     188,   189,   190,   191,    -1,   193,   194,   195,   196,   197,
     198,   199,    -1,   201,   202,   203,   204,    -1,   206,   207,
     208,   209,   210,   211,   212,    -1,   214,    -1,   216,   217,
     218,   219,   220,   221,   222,   223,    -1,   225,    -1,   227,
      -1,    -1,   230,    -1,   232,   233,   234,   235,   236,   237,
     238,    -1,    -1,   241,    -1,   243,    -1,    -1,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,    -1,   277,
     278,   279,   280,   281,   282,    -1,   284,   285,    -1,   287,
      -1,   289,   290,   291,   292,   293,   294,    -1,   296,   297,
      -1,    -1,   300,   301,   302,    -1,    -1,   305,   306,   307,
      -1,   309,    -1,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323,   324,    -1,    -1,    -1,
      -1,   329,   330,   331,    -1,   333,   334,   335,   336,   337,
     338,    -1,   340,   341,   342,   343,   344,   345,   346,   347,
      -1,   349,   350,   351,   352,   353,   354,   355,   356,    -1,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,   371,    -1,   373,   374,    -1,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,   386,   387,
     388,   389,   390,   391,   392,    -1,    -1,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,    -1,    -1,   407,
     408,   409,   410,    -1,   412,   413,   414,   415,   416,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
      -1,    -1,   430,   431,    -1,   433,    -1,   435,   436,   437,
     438,   439,    -1,   441,   442,   443,    -1,   445,    -1,   447,
     448,   449,   450,   451,    -1,   453,   454,   455,   456,   457,
     458,   459,   460,    -1,    -1,   463,   464,   465,    -1,   467,
     468,   469,   470,    -1,   472,   473,   474,   475,   476,   477,
     478,    -1,   480,    -1,   482,   483,   484,   485,   486,   487,
     488,   489,   490,    -1,    -1,   493,    -1,    -1,   496,   497,
     498,   499,   500,   501,   502,   503,   504,   505,   506,   507,
     508,   509,   510,   511,   512,   513,   514,   515,   516,     3,
      -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    -1,    32,    33,
      34,    -1,    -1,    -1,    -1,    -1,    40,    -1,    -1,    -1,
      -1,    45,    46,    -1,    48,    49,    50,    -1,    52,    53,
      54,    55,    56,    -1,    58,    59,    -1,    61,    62,    63,
      64,    65,    66,    -1,    -1,    69,    70,    71,    72,    73,
      74,    75,    -1,    77,    78,    79,    80,    81,    -1,    -1,
      -1,    85,    86,    87,    88,    89,    90,    -1,    92,    93,
      94,    -1,    96,    97,    98,    99,   100,   101,    -1,    -1,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,    -1,   120,    -1,   122,   123,
     124,   125,   126,   127,    -1,    -1,   130,   131,   132,   133,
     134,    -1,    -1,   137,   138,   139,   140,   141,   142,   143,
      -1,   145,   146,   147,    -1,   149,   150,   151,    -1,   153,
     154,   155,   156,   157,   158,   159,   160,   161,   162,   163,
      -1,   165,    -1,   167,   168,   169,   170,    -1,   172,    -1,
     174,    -1,    -1,    -1,   178,   179,   180,    -1,   182,    -1,
     184,   185,    -1,    -1,   188,   189,   190,   191,    -1,   193,
     194,   195,   196,   197,   198,   199,    -1,   201,   202,   203,
     204,    -1,   206,   207,   208,   209,   210,   211,   212,    -1,
     214,    -1,   216,   217,   218,   219,   220,   221,   222,   223,
      -1,   225,    -1,   227,    -1,    -1,   230,    -1,   232,   233,
     234,   235,   236,   237,   238,    -1,    -1,   241,    -1,   243,
      -1,    -1,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,    -1,   277,   278,   279,   280,   281,   282,    -1,
     284,   285,    -1,   287,    -1,   289,   290,   291,   292,   293,
     294,    -1,   296,   297,    -1,   299,   300,   301,   302,    -1,
      -1,   305,   306,   307,    -1,   309,    -1,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,    -1,    -1,    -1,    -1,   329,   330,   331,    -1,   333,
     334,   335,   336,   337,   338,    -1,   340,   341,   342,   343,
     344,   345,   346,   347,    -1,   349,   350,   351,   352,   353,
     354,   355,   356,    -1,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,   371,    -1,   373,
     374,    -1,   376,   377,   378,   379,   380,   381,   382,   383,
     384,   385,   386,   387,   388,   389,   390,   391,   392,    -1,
      -1,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,    -1,    -1,   407,   408,   409,   410,    -1,   412,   413,
     414,   415,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,    -1,    -1,   430,   431,    -1,   433,
      -1,   435,   436,   437,   438,   439,    -1,   441,   442,   443,
      -1,   445,    -1,   447,   448,   449,   450,   451,    -1,   453,
     454,   455,   456,   457,   458,   459,   460,    -1,    -1,   463,
     464,   465,    -1,   467,   468,   469,   470,    -1,   472,   473,
     474,   475,   476,   477,   478,    -1,   480,    -1,   482,   483,
     484,   485,   486,   487,   488,   489,   490,    -1,    -1,   493,
      -1,    -1,   496,   497,   498,   499,   500,   501,   502,   503,
     504,   505,   506,   507,   508,   509,   510,   511,   512,   513,
     514,   515,   516,     3,    -1,     5,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    -1,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,
      40,    -1,    -1,    -1,    -1,    45,    46,    -1,    48,    49,
      50,    -1,    52,    53,    54,    55,    56,    -1,    58,    59,
      -1,    61,    62,    63,    64,    65,    66,    -1,    -1,    69,
      70,    71,    72,    73,    74,    75,    -1,    77,    78,    79,
      80,    81,    -1,    -1,    -1,    85,    86,    87,    88,    89,
      90,    -1,    92,    93,    94,    -1,    96,    97,    98,    99,
     100,   101,    -1,    -1,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,    -1,
     120,    -1,   122,   123,   124,   125,   126,   127,    -1,    -1,
     130,   131,   132,   133,   134,    -1,    -1,   137,   138,   139,
     140,   141,   142,   143,    -1,   145,   146,   147,    -1,   149,
     150,   151,    -1,   153,   154,   155,   156,   157,   158,   159,
     160,   161,   162,   163,    -1,   165,    -1,   167,   168,   169,
     170,    -1,   172,    -1,   174,    -1,    -1,    -1,   178,   179,
     180,    -1,   182,    -1,   184,   185,    -1,    -1,   188,   189,
     190,   191,    -1,   193,   194,   195,   196,   197,   198,   199,
      -1,   201,   202,   203,   204,    -1,   206,   207,   208,   209,
     210,   211,   212,    -1,   214,    -1,   216,   217,   218,   219,
     220,   221,   222,   223,    -1,   225,    -1,   227,    -1,    -1,
     230,    -1,   232,   233,   234,   235,   236,   237,   238,    -1,
      -1,   241,    -1,   243,    -1,    -1,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,    -1,   277,   278,   279,
     280,   281,   282,    -1,   284,   285,    -1,   287,    -1,   289,
     290,   291,   292,   293,   294,    -1,   296,   297,    -1,   299,
     300,   301,   302,    -1,    -1,   305,   306,   307,    -1,   309,
      -1,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,   323,   324,    -1,    -1,    -1,    -1,   329,
     330,   331,    -1,   333,   334,   335,   336,   337,   338,    -1,
     340,   341,   342,   343,   344,   345,   346,   347,    -1,   349,
     350,   351,   352,   353,   354,   355,   356,    -1,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
     370,   371,    -1,   373,   374,    -1,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,   386,   387,   388,   389,
     390,   391,   392,    -1,    -1,   395,   396,   397,   398,   399,
     400,   401,   402,   403,   404,    -1,    -1,   407,   408,   409,
     410,    -1,   412,   413,   414,   415,   416,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,    -1,    -1,
     430,   431,    -1,   433,    -1,   435,   436,   437,   438,   439,
      -1,   441,   442,   443,    -1,   445,    -1,   447,   448,   449,
     450,   451,    -1,   453,   454,   455,   456,   457,   458,   459,
     460,    -1,    -1,   463,   464,   465,    -1,   467,   468,   469,
     470,    -1,   472,   473,   474,   475,   476,   477,   478,    -1,
     480,    -1,   482,   483,   484,   485,   486,   487,   488,   489,
     490,    -1,    -1,   493,    -1,    -1,   496,   497,   498,   499,
     500,   501,   502,   503,   504,   505,   506,   507,   508,   509,
     510,   511,   512,   513,   514,   515,   516,     3,    -1,     5,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    34,    -1,
      -1,    -1,    -1,    -1,    40,    -1,    -1,    -1,    -1,    45,
      46,    -1,    48,    49,    50,    -1,    52,    53,    54,    55,
      56,    -1,    58,    59,    -1,    61,    62,    63,    64,    65,
      66,    -1,    -1,    69,    70,    71,    72,    73,    74,    75,
      -1,    77,    78,    79,    80,    81,    -1,    -1,    -1,    85,
      86,    87,    88,    89,    90,    -1,    92,    93,    94,    -1,
      96,    97,    98,    99,   100,   101,    -1,    -1,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,    -1,   120,    -1,   122,   123,   124,   125,
     126,   127,    -1,    -1,   130,   131,   132,   133,   134,    -1,
      -1,   137,   138,   139,   140,   141,   142,   143,    -1,   145,
     146,   147,    -1,   149,   150,   151,    -1,   153,   154,   155,
     156,   157,   158,   159,   160,   161,   162,   163,    -1,   165,
      -1,   167,   168,   169,   170,    -1,   172,    -1,   174,    -1,
      -1,    -1,   178,   179,   180,    -1,   182,    -1,   184,   185,
      -1,    -1,   188,   189,   190,   191,    -1,   193,   194,   195,
     196,   197,   198,   199,    -1,   201,   202,   203,   204,    -1,
     206,   207,   208,   209,   210,   211,   212,    -1,   214,    -1,
     216,   217,   218,   219,   220,   221,   222,   223,    -1,   225,
      -1,   227,    -1,    -1,   230,    -1,   232,   233,   234,   235,
     236,   237,   238,    -1,    -1,   241,    -1,   243,    -1,    -1,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
      -1,   277,   278,   279,   280,   281,   282,    -1,   284,   285,
      -1,   287,    -1,   289,   290,   291,   292,   293,   294,    -1,
     296,   297,    -1,    -1,   300,   301,   302,    -1,    -1,   305,
     306,   307,    -1,   309,    -1,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,   323,   324,    -1,
      -1,    -1,    -1,   329,   330,   331,    -1,   333,   334,   335,
     336,   337,   338,    -1,   340,   341,   342,   343,   344,   345,
     346,   347,    -1,   349,   350,   351,   352,   353,   354,   355,
     356,    -1,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,    -1,   373,   374,    -1,
     376,   377,   378,   379,   380,   381,   382,   383,   384,   385,
     386,   387,   388,   389,   390,   391,   392,    -1,    -1,   395,
     396,   397,   398,   399,   400,   401,   402,   403,   404,    -1,
      -1,   407,   408,   409,   410,    -1,   412,   413,   414,   415,
     416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,    -1,    -1,   430,   431,    -1,   433,    -1,   435,
     436,   437,   438,   439,    -1,   441,   442,   443,    -1,   445,
      -1,   447,   448,   449,   450,   451,    -1,   453,   454,   455,
     456,   457,   458,   459,   460,    -1,    -1,   463,   464,   465,
      -1,   467,   468,   469,   470,    -1,   472,   473,   474,   475,
     476,   477,   478,    -1,   480,    -1,   482,   483,   484,   485,
     486,   487,   488,   489,   490,    -1,    -1,   493,    -1,    -1,
     496,   497,   498,   499,   500,   501,   502,   503,   504,   505,
     506,   507,   508,   509,   510,   511,   512,   513,   514,   515,
     516,     3,     4,    -1,    -1,    -1,    -1,     9,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    -1,
      32,    33,    34,    -1,    -1,    -1,    -1,    -1,    40,    -1,
      -1,    -1,    -1,    45,    46,    -1,    48,    49,    50,    -1,
      52,    53,    54,    55,    56,    -1,    58,    59,    -1,    61,
      62,    63,    64,    65,    66,    -1,    -1,    69,    70,    71,
      72,    73,    74,    75,    -1,    77,    78,    79,    80,    81,
      -1,    -1,    -1,    85,    86,    87,    88,    89,    90,    -1,
      92,    93,    94,    -1,    96,    97,    98,    99,   100,   101,
      -1,    -1,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,    -1,   120,    -1,
     122,   123,   124,   125,   126,   127,    -1,    -1,   130,   131,
     132,   133,   134,    -1,    -1,   137,   138,   139,   140,   141,
     142,   143,    -1,   145,   146,   147,    -1,   149,   150,   151,
      -1,   153,   154,   155,   156,   157,   158,   159,   160,   161,
     162,   163,    -1,   165,    -1,   167,   168,   169,   170,    -1,
     172,    -1,   174,    -1,    -1,    -1,   178,   179,   180,    -1,
     182,    -1,   184,   185,    -1,    -1,   188,   189,   190,   191,
      -1,   193,   194,   195,   196,   197,   198,   199,    -1,   201,
     202,   203,   204,    -1,   206,   207,   208,   209,   210,   211,
     212,    -1,   214,    -1,   216,   217,   218,   219,   220,   221,
     222,   223,    -1,   225,    -1,   227,    -1,    -1,   230,    -1,
     232,   233,   234,   235,   236,   237,   238,    -1,    -1,   241,
      -1,   243,    -1,    -1,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,    -1,   277,   278,   279,   280,   281,
     282,    -1,   284,   285,    -1,   287,    -1,   289,   290,   291,
     292,   293,   294,    -1,   296,   297,    -1,    -1,   300,   301,
     302,    -1,    -1,   305,   306,   307,    -1,   309,    -1,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,   323,   324,    -1,    -1,    -1,    -1,   329,   330,   331,
      -1,   333,   334,   335,   336,   337,   338,    -1,   340,   341,
     342,   343,   344,   345,   346,   347,    -1,   349,   350,   351,
     352,   353,   354,   355,   356,    -1,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
      -1,   373,   374,    -1,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,   386,   387,   388,   389,   390,   391,
     392,    -1,    -1,   395,   396,   397,   398,   399,   400,   401,
     402,   403,   404,    -1,    -1,   407,   408,   409,   410,    -1,
     412,   413,   414,   415,   416,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,    -1,    -1,   430,   431,
      -1,   433,    -1,   435,   436,   437,   438,   439,    -1,   441,
     442,   443,    -1,   445,    -1,   447,   448,   449,   450,   451,
      -1,   453,   454,   455,   456,   457,   458,   459,   460,    -1,
      -1,   463,   464,   465,    -1,   467,   468,   469,   470,    -1,
     472,   473,   474,   475,   476,   477,   478,    -1,   480,    -1,
     482,   483,   484,   485,   486,   487,   488,   489,   490,    -1,
      -1,   493,    -1,    -1,   496,   497,   498,   499,   500,   501,
     502,   503,   504,   505,   506,   507,   508,   509,   510,   511,
     512,   513,   514,   515,   516,     3,    -1,     5,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    -1,    32,    33,    34,    -1,    -1,    -1,
      -1,    -1,    40,    -1,    -1,    -1,    -1,    45,    46,    -1,
      48,    49,    50,    -1,    52,    53,    54,    55,    56,    -1,
      58,    59,    -1,    61,    62,    63,    64,    65,    66,    -1,
      -1,    69,    70,    71,    72,    73,    74,    75,    -1,    77,
      78,    79,    80,    81,    -1,    -1,    -1,    85,    86,    87,
      88,    89,    90,    -1,    92,    93,    94,    -1,    96,    97,
      98,    99,   100,   101,    -1,    -1,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,    -1,   120,    -1,   122,   123,   124,   125,   126,   127,
      -1,    -1,   130,   131,   132,   133,   134,    -1,    -1,   137,
     138,   139,   140,   141,   142,   143,    -1,   145,   146,   147,
      -1,   149,   150,   151,    -1,   153,   154,   155,   156,   157,
     158,   159,   160,   161,   162,   163,    -1,   165,    -1,   167,
     168,   169,   170,    -1,   172,    -1,   174,    -1,    -1,    -1,
     178,   179,   180,    -1,   182,    -1,   184,   185,    -1,    -1,
     188,   189,   190,   191,    -1,   193,   194,   195,   196,   197,
     198,   199,    -1,   201,   202,   203,   204,    -1,   206,   207,
     208,   209,   210,   211,   212,    -1,   214,    -1,   216,   217,
     218,   219,   220,   221,   222,   223,    -1,   225,    -1,   227,
      -1,    -1,   230,    -1,   232,   233,   234,   235,   236,   237,
     238,    -1,    -1,   241,    -1,   243,    -1,    -1,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,    -1,   277,
     278,   279,   280,   281,   282,    -1,   284,   285,    -1,   287,
      -1,   289,   290,   291,   292,   293,   294,    -1,   296,   297,
      -1,    -1,   300,   301,   302,    -1,    -1,   305,   306,   307,
      -1,   309,    -1,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323,   324,    -1,    -1,    -1,
      -1,   329,   330,   331,    -1,   333,   334,   335,   336,   337,
     338,    -1,   340,   341,   342,   343,   344,   345,   346,   347,
      -1,   349,   350,   351,   352,   353,   354,   355,   356,    -1,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,   371,    -1,   373,   374,    -1,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,   386,   387,
     388,   389,   390,   391,   392,    -1,    -1,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,    -1,    -1,   407,
     408,   409,   410,    -1,   412,   413,   414,   415,   416,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
      -1,    -1,   430,   431,   432,   433,    -1,   435,   436,   437,
     438,   439,    -1,   441,   442,   443,    -1,   445,    -1,   447,
     448,   449,   450,   451,    -1,   453,   454,   455,   456,   457,
     458,   459,   460,    -1,    -1,   463,   464,   465,    -1,   467,
     468,   469,   470,    -1,   472,   473,   474,   475,   476,   477,
     478,    -1,   480,    -1,   482,   483,   484,   485,   486,   487,
     488,   489,   490,    -1,    -1,   493,    -1,    -1,   496,   497,
     498,   499,   500,   501,   502,   503,   504,   505,   506,   507,
     508,   509,   510,   511,   512,   513,   514,   515,   516,     3,
      -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    -1,    32,    33,
      34,    -1,    -1,    -1,    -1,    -1,    40,    -1,    -1,    -1,
      -1,    45,    46,    -1,    48,    49,    50,    -1,    52,    53,
      54,    55,    56,    -1,    58,    59,    -1,    61,    62,    63,
      64,    65,    66,    -1,    -1,    69,    70,    71,    72,    73,
      74,    75,    -1,    77,    78,    79,    80,    81,    -1,    -1,
      -1,    85,    86,    87,    88,    89,    90,    -1,    92,    93,
      94,    -1,    96,    97,    98,    99,   100,   101,    -1,    -1,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,    -1,   120,    -1,   122,   123,
     124,   125,   126,   127,    -1,    -1,   130,   131,   132,   133,
     134,    -1,    -1,   137,   138,   139,   140,   141,   142,   143,
      -1,   145,   146,   147,    -1,   149,   150,   151,    -1,   153,
     154,   155,   156,   157,   158,   159,   160,   161,   162,   163,
      -1,   165,    -1,   167,   168,   169,   170,    -1,   172,    -1,
     174,    -1,    -1,    -1,   178,   179,   180,    -1,   182,    -1,
     184,   185,    -1,    -1,   188,   189,   190,   191,    -1,   193,
     194,   195,   196,   197,   198,   199,    -1,   201,   202,   203,
     204,    -1,   206,   207,   208,   209,   210,   211,   212,    -1,
     214,    -1,   216,   217,   218,   219,   220,   221,   222,   223,
      -1,   225,    -1,   227,    -1,    -1,   230,    -1,   232,   233,
     234,   235,   236,   237,   238,    -1,    -1,   241,    -1,   243,
      -1,    -1,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,    -1,   277,   278,   279,   280,   281,   282,    -1,
     284,   285,    -1,   287,    -1,   289,   290,   291,   292,   293,
     294,    -1,   296,   297,    -1,    -1,   300,   301,   302,    -1,
      -1,   305,   306,   307,    -1,   309,    -1,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,    -1,    -1,    -1,    -1,   329,   330,   331,    -1,   333,
     334,   335,   336,   337,   338,    -1,   340,   341,   342,   343,
     344,   345,   346,   347,    -1,   349,   350,   351,   352,   353,
     354,   355,   356,    -1,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,   371,    -1,   373,
     374,    -1,   376,   377,   378,   379,   380,   381,   382,   383,
     384,   385,   386,   387,   388,   389,   390,   391,   392,    -1,
      -1,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,    -1,    -1,   407,   408,   409,   410,    -1,   412,   413,
     414,   415,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,    -1,    -1,   430,   431,    -1,   433,
      -1,   435,   436,   437,   438,   439,    -1,   441,   442,   443,
      -1,   445,    -1,   447,   448,   449,   450,   451,    -1,   453,
     454,   455,   456,   457,   458,   459,   460,    -1,    -1,   463,
     464,   465,    -1,   467,   468,   469,   470,    -1,   472,   473,
     474,   475,   476,   477,   478,    -1,   480,    -1,   482,   483,
     484,   485,   486,   487,   488,   489,   490,    -1,    -1,   493,
      -1,    -1,   496,   497,   498,   499,   500,   501,   502,   503,
     504,   505,   506,   507,   508,   509,   510,   511,   512,   513,
     514,   515,   516,     3,    -1,     5,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    -1,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,
      40,    -1,    -1,    -1,    -1,    45,    46,    -1,    48,    49,
      50,    -1,    52,    53,    54,    55,    56,    -1,    58,    59,
      -1,    61,    62,    63,    64,    65,    66,    -1,    -1,    69,
      70,    71,    72,    73,    74,    75,    -1,    77,    78,    79,
      80,    81,    -1,    -1,    -1,    85,    86,    87,    88,    89,
      90,    -1,    92,    93,    94,    -1,    96,    97,    98,    99,
     100,   101,    -1,    -1,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,    -1,
     120,    -1,   122,   123,   124,   125,   126,   127,    -1,    -1,
     130,   131,   132,   133,   134,    -1,    -1,   137,   138,   139,
     140,   141,   142,   143,    -1,   145,   146,   147,    -1,   149,
     150,   151,    -1,   153,   154,   155,   156,   157,   158,   159,
     160,   161,   162,   163,    -1,   165,    -1,   167,   168,   169,
     170,    -1,   172,    -1,   174,    -1,    -1,    -1,   178,   179,
     180,    -1,   182,    -1,   184,   185,    -1,    -1,   188,   189,
     190,   191,    -1,   193,   194,   195,   196,   197,   198,   199,
      -1,   201,   202,   203,   204,    -1,   206,   207,   208,   209,
     210,   211,   212,    -1,   214,    -1,   216,   217,   218,   219,
     220,   221,   222,   223,    -1,   225,    -1,   227,    -1,    -1,
     230,    -1,   232,   233,   234,   235,   236,   237,   238,    -1,
      -1,   241,    -1,   243,    -1,    -1,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,    -1,   277,   278,   279,
     280,   281,   282,    -1,   284,   285,    -1,   287,    -1,   289,
     290,   291,   292,   293,   294,    -1,   296,   297,    -1,    -1,
     300,   301,   302,    -1,    -1,   305,   306,   307,    -1,   309,
      -1,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,   323,   324,    -1,    -1,    -1,    -1,   329,
     330,   331,    -1,   333,   334,   335,   336,   337,   338,    -1,
     340,   341,   342,   343,   344,   345,   346,   347,    -1,   349,
     350,   351,   352,   353,   354,   355,   356,    -1,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
     370,   371,    -1,   373,   374,    -1,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,   386,   387,   388,   389,
     390,   391,   392,    -1,    -1,   395,   396,   397,   398,   399,
     400,   401,   402,   403,   404,    -1,    -1,   407,   408,   409,
     410,    -1,   412,   413,   414,   415,   416,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,    -1,    -1,
     430,   431,    -1,   433,    -1,   435,   436,   437,   438,   439,
      -1,   441,   442,   443,    -1,   445,    -1,   447,   448,   449,
     450,   451,    -1,   453,   454,   455,   456,   457,   458,   459,
     460,    -1,    -1,   463,   464,   465,    -1,   467,   468,   469,
     470,    -1,   472,   473,   474,   475,   476,   477,   478,    -1,
     480,    -1,   482,   483,   484,   485,   486,   487,   488,   489,
     490,    -1,    -1,   493,    -1,    -1,   496,   497,   498,   499,
     500,   501,   502,   503,   504,   505,   506,   507,   508,   509,
     510,   511,   512,   513,   514,   515,   516,     3,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    34,    -1,
      -1,    -1,    -1,    -1,    40,    -1,    -1,    -1,    -1,    45,
      46,    -1,    48,    49,    50,    -1,    52,    53,    54,    55,
      56,    -1,    58,    59,    -1,    61,    62,    63,    64,    65,
      66,    -1,    -1,    69,    70,    71,    72,    73,    74,    75,
      -1,    77,    78,    79,    80,    81,    -1,    -1,    -1,    85,
      86,    87,    88,    89,    90,    -1,    92,    93,    94,    -1,
      96,    97,    98,    99,   100,   101,    -1,    -1,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,    -1,   120,    -1,   122,   123,   124,   125,
     126,   127,    -1,    -1,   130,   131,   132,   133,   134,    -1,
      -1,   137,   138,   139,   140,   141,   142,   143,    -1,   145,
     146,   147,    -1,   149,   150,   151,    -1,   153,   154,   155,
     156,   157,   158,   159,   160,   161,   162,   163,    -1,   165,
      -1,   167,   168,   169,   170,    -1,   172,    -1,   174,    -1,
      -1,    -1,   178,   179,   180,    -1,   182,    -1,   184,   185,
      -1,    -1,   188,   189,   190,   191,    -1,   193,   194,   195,
     196,   197,   198,   199,    -1,   201,   202,   203,   204,    -1,
     206,   207,   208,   209,   210,   211,   212,    -1,   214,    -1,
     216,   217,   218,   219,   220,   221,   222,   223,    -1,   225,
      -1,   227,    -1,    -1,   230,    -1,   232,   233,   234,   235,
     236,   237,   238,    -1,    -1,   241,    -1,   243,    -1,    -1,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
      -1,   277,   278,   279,   280,   281,   282,    -1,   284,   285,
      -1,   287,    -1,   289,   290,   291,   292,   293,   294,    -1,
     296,   297,    -1,    -1,   300,   301,   302,    -1,    -1,   305,
     306,   307,    -1,   309,    -1,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,   323,   324,    -1,
      -1,    -1,    -1,   329,   330,   331,    -1,   333,   334,   335,
     336,   337,   338,    -1,   340,   341,   342,   343,   344,   345,
     346,   347,    -1,   349,   350,   351,   352,   353,   354,   355,
     356,    -1,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,    -1,   373,   374,    -1,
     376,   377,   378,   379,   380,   381,   382,   383,   384,   385,
     386,   387,   388,   389,   390,   391,   392,    -1,    -1,   395,
     396,   397,   398,   399,   400,   401,   402,   403,   404,    -1,
      -1,   407,   408,   409,   410,    -1,   412,   413,   414,   415,
     416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,    -1,    -1,   430,   431,    -1,   433,    -1,   435,
     436,   437,   438,   439,    -1,   441,   442,   443,    -1,   445,
      -1,   447,   448,   449,   450,   451,    -1,   453,   454,   455,
     456,   457,   458,   459,   460,    -1,    -1,   463,   464,   465,
      -1,   467,   468,   469,   470,    -1,   472,   473,   474,   475,
     476,   477,   478,    -1,   480,    -1,   482,   483,   484,   485,
     486,   487,   488,   489,   490,    -1,    -1,   493,    -1,    -1,
     496,   497,   498,   499,   500,   501,   502,   503,   504,   505,
     506,   507,   508,   509,   510,   511,   512,   513,   514,   515,
     516,     3,    -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    -1,
      32,    33,    34,    -1,    -1,    -1,    -1,    -1,    40,    -1,
      -1,    -1,    -1,    45,    46,    -1,    48,    49,    50,    -1,
      52,    53,    54,    55,    56,    -1,    58,    59,    -1,    61,
      62,    63,    64,    65,    66,    -1,    -1,    69,    70,    71,
      72,    73,    74,    75,    -1,    77,    78,    79,    80,    81,
      -1,    -1,    -1,    85,    86,    87,    88,    89,    90,    -1,
      92,    93,    94,    -1,    96,    97,    98,    99,   100,   101,
      -1,    -1,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,    -1,   120,    -1,
     122,   123,   124,   125,   126,   127,    -1,    -1,   130,   131,
     132,   133,   134,    -1,    -1,   137,   138,   139,   140,   141,
     142,   143,    -1,   145,   146,   147,    -1,   149,   150,   151,
      -1,   153,   154,   155,   156,   157,   158,   159,   160,   161,
     162,   163,    -1,   165,    -1,   167,   168,   169,   170,    -1,
     172,    -1,   174,    -1,    -1,    -1,   178,   179,   180,    -1,
     182,    -1,   184,   185,    -1,    -1,   188,   189,   190,   191,
      -1,   193,   194,   195,   196,   197,   198,   199,    -1,   201,
     202,   203,   204,    -1,   206,   207,   208,   209,   210,   211,
     212,    -1,   214,    -1,   216,   217,   218,   219,   220,   221,
     222,   223,    -1,   225,    -1,   227,    -1,    -1,   230,    -1,
     232,   233,   234,   235,   236,   237,   238,    -1,    -1,   241,
      -1,   243,    -1,    -1,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,    -1,   277,   278,   279,   280,   281,
     282,    -1,   284,   285,    -1,   287,    -1,   289,   290,   291,
     292,   293,   294,    -1,   296,   297,    -1,    -1,   300,   301,
     302,    -1,    -1,   305,   306,   307,    -1,   309,    -1,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,   323,   324,    -1,    -1,    -1,    -1,   329,   330,   331,
      -1,   333,   334,   335,   336,   337,   338,    -1,   340,   341,
     342,   343,   344,   345,   346,   347,    -1,   349,   350,   351,
     352,   353,   354,   355,   356,    -1,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
      -1,   373,   374,    -1,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,   386,   387,   388,   389,   390,   391,
     392,    -1,    -1,   395,   396,   397,   398,   399,   400,   401,
     402,   403,   404,    -1,    -1,   407,   408,   409,   410,    -1,
     412,   413,   414,   415,   416,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,    -1,    -1,   430,   431,
      -1,   433,    -1,   435,   436,   437,   438,   439,    -1,   441,
     442,   443,    -1,   445,    -1,   447,   448,   449,   450,   451,
      -1,   453,   454,   455,   456,   457,   458,   459,   460,    -1,
      -1,   463,   464,   465,    -1,   467,   468,   469,   470,    -1,
     472,   473,   474,   475,   476,   477,   478,    -1,   480,    -1,
     482,   483,   484,   485,   486,   487,   488,   489,   490,    -1,
      -1,   493,    -1,    -1,   496,   497,   498,   499,   500,   501,
     502,   503,   504,   505,   506,   507,   508,   509,   510,   511,
     512,   513,   514,   515,   516,     3,    -1,     5,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    -1,    32,    33,    34,    -1,    -1,    -1,
      -1,    -1,    40,    -1,    -1,    -1,    -1,    45,    46,    -1,
      48,    49,    50,    -1,    52,    53,    54,    55,    56,    -1,
      58,    59,    -1,    61,    62,    63,    64,    65,    66,    -1,
      -1,    69,    70,    71,    72,    73,    74,    75,    -1,    77,
      78,    79,    80,    81,    -1,    -1,    -1,    85,    86,    87,
      88,    89,    90,    -1,    92,    93,    94,    -1,    96,    97,
      98,    99,   100,   101,    -1,    -1,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,    -1,   120,    -1,   122,   123,   124,   125,   126,   127,
      -1,    -1,   130,   131,   132,   133,   134,    -1,    -1,   137,
     138,   139,   140,   141,   142,   143,    -1,   145,   146,   147,
      -1,   149,   150,   151,    -1,   153,   154,   155,   156,   157,
     158,   159,   160,   161,   162,   163,    -1,   165,    -1,   167,
     168,   169,   170,    -1,   172,    -1,   174,    -1,    -1,    -1,
     178,   179,   180,    -1,   182,    -1,   184,   185,    -1,    -1,
     188,   189,   190,   191,    -1,   193,   194,   195,   196,   197,
     198,   199,    -1,   201,   202,   203,   204,    -1,   206,   207,
     208,   209,   210,   211,   212,    -1,   214,    -1,   216,   217,
     218,   219,   220,   221,   222,   223,    -1,   225,    -1,   227,
      -1,    -1,   230,    -1,   232,   233,   234,   235,   236,   237,
     238,    -1,    -1,   241,    -1,   243,    -1,    -1,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,    -1,   277,
     278,   279,   280,   281,   282,    -1,   284,   285,    -1,   287,
      -1,   289,   290,   291,   292,   293,   294,    -1,   296,   297,
      -1,    -1,   300,   301,   302,    -1,    -1,   305,   306,   307,
      -1,   309,    -1,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323,   324,    -1,    -1,    -1,
      -1,   329,   330,   331,    -1,   333,   334,   335,   336,   337,
     338,    -1,   340,   341,   342,   343,   344,   345,   346,   347,
      -1,   349,   350,   351,   352,   353,   354,   355,   356,    -1,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,   371,    -1,   373,   374,    -1,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,   386,   387,
     388,   389,   390,   391,   392,    -1,    -1,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,    -1,    -1,   407,
     408,   409,   410,    -1,   412,   413,   414,   415,   416,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
      -1,    -1,   430,   431,    -1,   433,    -1,   435,   436,   437,
     438,   439,    -1,   441,   442,   443,    -1,   445,    -1,   447,
     448,   449,   450,   451,    -1,   453,   454,   455,   456,   457,
     458,   459,   460,    -1,    -1,   463,   464,   465,    -1,   467,
     468,   469,   470,    -1,   472,   473,   474,   475,   476,   477,
     478,    -1,   480,    -1,   482,   483,   484,   485,   486,   487,
     488,   489,   490,    -1,    -1,   493,    -1,    -1,   496,   497,
     498,   499,   500,   501,   502,   503,   504,   505,   506,   507,
     508,   509,   510,   511,   512,   513,   514,   515,   516,     3,
      -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    -1,    32,    33,
      34,    -1,    -1,    -1,    -1,    -1,    40,    -1,    -1,    -1,
      -1,    45,    46,    -1,    48,    49,    50,    -1,    52,    53,
      54,    55,    56,    -1,    58,    59,    -1,    61,    62,    63,
      64,    65,    66,    -1,    -1,    69,    70,    71,    72,    73,
      74,    75,    -1,    77,    78,    79,    80,    81,    -1,    -1,
      -1,    85,    86,    87,    88,    89,    90,    -1,    92,    93,
      94,    -1,    96,    97,    98,    99,   100,   101,    -1,    -1,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,    -1,   120,    -1,   122,   123,
     124,   125,   126,   127,    -1,    -1,   130,   131,   132,   133,
     134,    -1,    -1,   137,   138,   139,   140,   141,   142,   143,
      -1,   145,   146,   147,    -1,   149,   150,   151,    -1,   153,
     154,   155,   156,   157,   158,   159,   160,   161,   162,   163,
      -1,   165,    -1,   167,   168,   169,   170,    -1,   172,    -1,
     174,    -1,    -1,    -1,   178,   179,   180,    -1,   182,    -1,
     184,   185,    -1,    -1,   188,   189,   190,   191,    -1,   193,
     194,   195,   196,   197,   198,   199,    -1,   201,   202,   203,
     204,    -1,   206,   207,   208,   209,   210,   211,   212,    -1,
     214,    -1,   216,   217,   218,   219,   220,   221,   222,   223,
      -1,   225,    -1,   227,    -1,    -1,   230,    -1,   232,   233,
     234,   235,   236,   237,   238,    -1,    -1,   241,    -1,   243,
      -1,    -1,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,    -1,   277,   278,   279,   280,   281,   282,    -1,
     284,   285,    -1,   287,    -1,   289,   290,   291,   292,   293,
     294,    -1,   296,   297,    -1,    -1,   300,   301,   302,    -1,
      -1,   305,   306,   307,    -1,   309,    -1,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,    -1,    -1,    -1,    -1,   329,   330,   331,    -1,   333,
     334,   335,   336,   337,   338,    -1,   340,   341,   342,   343,
     344,   345,   346,   347,    -1,   349,   350,   351,   352,   353,
     354,   355,   356,    -1,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,   371,    -1,   373,
     374,    -1,   376,   377,   378,   379,   380,   381,   382,   383,
     384,   385,   386,   387,   388,   389,   390,   391,   392,    -1,
      -1,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,    -1,    -1,   407,   408,   409,   410,    -1,   412,   413,
     414,   415,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,    -1,    -1,   430,   431,    -1,   433,
      -1,   435,   436,   437,   438,   439,    -1,   441,   442,   443,
      -1,   445,    -1,   447,   448,   449,   450,   451,    -1,   453,
     454,   455,   456,   457,   458,   459,   460,    -1,    -1,   463,
     464,   465,    -1,   467,   468,   469,   470,    -1,   472,   473,
     474,   475,   476,   477,   478,    -1,   480,    -1,   482,   483,
     484,   485,   486,   487,   488,   489,   490,    -1,    -1,   493,
      -1,    -1,   496,   497,   498,   499,   500,   501,   502,   503,
     504,   505,   506,   507,   508,   509,   510,   511,   512,   513,
     514,   515,   516,     3,    -1,     5,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    -1,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,
      40,    -1,    -1,    -1,    -1,    45,    46,    -1,    48,    49,
      50,    -1,    52,    53,    54,    55,    56,    -1,    58,    59,
      -1,    61,    62,    63,    64,    65,    66,    -1,    -1,    69,
      70,    71,    72,    73,    74,    75,    -1,    77,    78,    79,
      80,    81,    -1,    -1,    -1,    85,    86,    87,    88,    89,
      90,    -1,    92,    93,    94,    -1,    96,    97,    98,    99,
     100,   101,    -1,    -1,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,    -1,
     120,    -1,   122,   123,   124,   125,   126,   127,    -1,    -1,
     130,   131,   132,   133,   134,    -1,    -1,   137,   138,   139,
     140,   141,   142,   143,    -1,   145,   146,   147,    -1,   149,
     150,   151,    -1,   153,   154,   155,   156,   157,   158,   159,
     160,   161,   162,   163,    -1,   165,    -1,   167,   168,   169,
     170,    -1,   172,    -1,   174,    -1,    -1,    -1,   178,   179,
     180,    -1,   182,    -1,   184,   185,    -1,    -1,   188,   189,
     190,   191,    -1,   193,   194,   195,   196,   197,   198,   199,
      -1,   201,   202,   203,   204,    -1,   206,   207,   208,   209,
     210,   211,   212,    -1,   214,    -1,   216,   217,   218,   219,
     220,   221,   222,   223,    -1,   225,    -1,   227,    -1,    -1,
     230,    -1,   232,   233,   234,   235,   236,   237,   238,    -1,
      -1,   241,    -1,   243,    -1,    -1,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,    -1,   277,   278,   279,
     280,   281,   282,    -1,   284,   285,    -1,   287,    -1,   289,
     290,   291,   292,   293,   294,    -1,   296,   297,    -1,    -1,
     300,   301,   302,    -1,    -1,   305,   306,   307,    -1,   309,
      -1,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,   323,   324,    -1,    -1,    -1,    -1,   329,
     330,   331,    -1,   333,   334,   335,   336,   337,   338,    -1,
     340,   341,   342,   343,   344,   345,   346,   347,    -1,   349,
     350,   351,   352,   353,   354,   355,   356,    -1,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
     370,   371,    -1,   373,   374,    -1,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,   386,   387,   388,   389,
     390,   391,   392,    -1,    -1,   395,   396,   397,   398,   399,
     400,   401,   402,   403,   404,    -1,    -1,   407,   408,   409,
     410,    -1,   412,   413,   414,   415,   416,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,    -1,    -1,
     430,   431,    -1,   433,    -1,   435,   436,   437,   438,   439,
      -1,   441,   442,   443,    -1,   445,    -1,   447,   448,   449,
     450,   451,    -1,   453,   454,   455,   456,   457,   458,   459,
     460,    -1,    -1,   463,   464,   465,    -1,   467,   468,   469,
     470,    -1,   472,   473,   474,   475,   476,   477,   478,    -1,
     480,    -1,   482,   483,   484,   485,   486,   487,   488,   489,
     490,    -1,    -1,   493,    -1,    -1,   496,   497,   498,   499,
     500,   501,   502,   503,   504,   505,   506,   507,   508,   509,
     510,   511,   512,   513,   514,   515,   516,     3,    -1,     5,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    -1,    32,    33,    34,    -1,
      -1,    -1,    -1,    -1,    40,    -1,    -1,    -1,    -1,    45,
      46,    -1,    48,    49,    50,    -1,    52,    53,    54,    55,
      56,    -1,    58,    59,    -1,    61,    62,    63,    64,    65,
      66,    -1,    -1,    69,    70,    71,    72,    73,    74,    75,
      -1,    77,    78,    79,    80,    81,    -1,    -1,    -1,    85,
      86,    87,    88,    89,    90,    -1,    92,    93,    94,    -1,
      96,    97,    98,    99,   100,   101,    -1,    -1,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,    -1,   120,    -1,   122,   123,   124,   125,
     126,   127,    -1,    -1,   130,   131,   132,   133,   134,    -1,
      -1,   137,   138,   139,   140,   141,   142,   143,    -1,   145,
     146,   147,    -1,   149,   150,   151,    -1,   153,   154,   155,
     156,   157,   158,   159,   160,   161,   162,   163,    -1,   165,
      -1,   167,   168,   169,   170,    -1,   172,    -1,   174,    -1,
      -1,    -1,   178,   179,   180,    -1,   182,    -1,   184,   185,
      -1,    -1,   188,   189,   190,   191,    -1,   193,   194,   195,
     196,   197,   198,   199,    -1,   201,   202,   203,   204,    -1,
     206,   207,   208,   209,   210,   211,   212,    -1,   214,    -1,
     216,   217,   218,   219,   220,   221,   222,   223,    -1,   225,
      -1,   227,    -1,    -1,   230,    -1,   232,   233,   234,   235,
     236,   237,   238,    -1,    -1,   241,    -1,   243,    -1,    -1,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
      -1,   277,   278,   279,   280,   281,   282,    -1,   284,   285,
      -1,   287,    -1,   289,   290,   291,   292,   293,   294,    -1,
     296,   297,    -1,    -1,   300,   301,   302,    -1,    -1,   305,
     306,   307,    -1,   309,    -1,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,   323,   324,    -1,
      -1,    -1,    -1,   329,   330,   331,    -1,   333,   334,   335,
     336,   337,   338,    -1,   340,   341,   342,   343,   344,   345,
     346,   347,    -1,   349,   350,   351,   352,   353,   354,   355,
     356,    -1,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,    -1,   373,   374,    -1,
     376,   377,   378,   379,   380,   381,   382,   383,   384,   385,
     386,   387,   388,   389,   390,   391,   392,    -1,    -1,   395,
     396,   397,   398,   399,   400,   401,   402,   403,   404,    -1,
      -1,   407,   408,   409,   410,    -1,   412,   413,   414,   415,
     416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,    -1,    -1,   430,   431,    -1,   433,    -1,   435,
     436,   437,   438,   439,    -1,   441,   442,   443,    -1,   445,
      -1,   447,   448,   449,   450,   451,    -1,   453,   454,   455,
     456,   457,   458,   459,   460,    -1,    -1,   463,   464,   465,
      -1,   467,   468,   469,   470,    -1,   472,   473,   474,   475,
     476,   477,   478,    -1,   480,    -1,   482,   483,   484,   485,
     486,   487,   488,   489,   490,    -1,    -1,   493,    -1,    -1,
     496,   497,   498,   499,   500,   501,   502,   503,   504,   505,
     506,   507,   508,   509,   510,   511,   512,   513,   514,   515,
     516,     3,    -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    -1,
      32,    33,    34,    -1,    -1,    -1,    -1,    -1,    40,    -1,
      -1,    -1,    -1,    45,    46,    -1,    48,    49,    50,    -1,
      52,    53,    54,    55,    56,    -1,    58,    59,    -1,    61,
      62,    63,    64,    65,    66,    -1,    -1,    69,    70,    71,
      72,    73,    74,    75,    -1,    77,    78,    79,    80,    81,
      -1,    -1,    -1,    85,    86,    87,    88,    89,    90,    -1,
      92,    93,    94,    -1,    96,    97,    98,    99,   100,   101,
      -1,    -1,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,    -1,   120,    -1,
     122,   123,   124,   125,   126,   127,    -1,    -1,   130,   131,
     132,   133,   134,    -1,    -1,   137,   138,   139,   140,   141,
     142,   143,    -1,   145,   146,   147,    -1,   149,   150,   151,
      -1,   153,   154,   155,   156,   157,   158,   159,   160,   161,
     162,   163,    -1,   165,    -1,   167,   168,   169,   170,    -1,
     172,    -1,   174,    -1,    -1,    -1,   178,   179,   180,    -1,
     182,    -1,   184,   185,    -1,    -1,   188,   189,   190,   191,
      -1,   193,   194,   195,   196,   197,   198,   199,    -1,   201,
     202,   203,   204,    -1,   206,   207,   208,   209,   210,   211,
     212,    -1,   214,    -1,   216,   217,   218,   219,   220,   221,
     222,   223,    -1,   225,    -1,   227,    -1,    -1,   230,    -1,
     232,   233,   234,   235,   236,   237,   238,    -1,    -1,   241,
      -1,   243,    -1,    -1,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,    -1,   277,   278,   279,   280,   281,
     282,    -1,   284,   285,    -1,   287,    -1,   289,   290,   291,
     292,   293,   294,    -1,   296,   297,    -1,    -1,   300,   301,
     302,    -1,    -1,   305,   306,   307,    -1,   309,    -1,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,   323,   324,    -1,    -1,    -1,    -1,   329,   330,   331,
      -1,   333,   334,   335,   336,   337,   338,    -1,   340,   341,
     342,   343,   344,   345,   346,   347,    -1,   349,   350,   351,
     352,   353,   354,   355,   356,    -1,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
      -1,   373,   374,    -1,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,   386,   387,   388,   389,   390,   391,
     392,    -1,    -1,   395,   396,   397,   398,   399,   400,   401,
     402,   403,   404,    -1,    -1,   407,   408,   409,   410,    -1,
     412,   413,   414,   415,   416,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,    -1,    -1,   430,   431,
      -1,   433,    -1,   435,   436,   437,   438,   439,    -1,   441,
     442,   443,    -1,   445,    -1,   447,   448,   449,   450,   451,
      -1,   453,   454,   455,   456,   457,   458,   459,   460,    -1,
      -1,   463,   464,   465,    -1,   467,   468,   469,   470,    -1,
     472,   473,   474,   475,   476,   477,   478,    -1,   480,    -1,
     482,   483,   484,   485,   486,   487,   488,   489,   490,    -1,
      -1,   493,    -1,    -1,   496,   497,   498,   499,   500,   501,
     502,   503,   504,   505,   506,   507,   508,   509,   510,   511,
     512,   513,   514,   515,   516,     3,    -1,     5,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    -1,    32,    33,    34,    -1,    -1,    -1,
      -1,    -1,    40,    -1,    -1,    -1,    -1,    45,    46,    -1,
      48,    49,    50,    -1,    52,    53,    54,    55,    56,    -1,
      58,    59,    -1,    61,    62,    63,    64,    65,    66,    -1,
      -1,    69,    70,    71,    72,    73,    74,    75,    -1,    77,
      78,    79,    80,    81,    -1,    -1,    -1,    85,    86,    87,
      88,    89,    90,    -1,    92,    93,    94,    -1,    96,    97,
      98,    99,   100,   101,    -1,    -1,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,    -1,   120,    -1,   122,   123,   124,   125,   126,   127,
      -1,    -1,   130,   131,   132,   133,   134,    -1,    -1,   137,
     138,   139,   140,   141,   142,   143,    -1,   145,   146,   147,
      -1,   149,   150,   151,    -1,   153,   154,   155,   156,   157,
     158,   159,   160,   161,   162,   163,    -1,   165,    -1,   167,
     168,   169,   170,    -1,   172,    -1,   174,    -1,    -1,    -1,
     178,   179,   180,    -1,   182,    -1,   184,   185,    -1,    -1,
     188,   189,   190,   191,    -1,   193,   194,   195,   196,   197,
     198,   199,    -1,   201,   202,   203,   204,    -1,   206,   207,
     208,   209,   210,   211,   212,    -1,   214,    -1,   216,   217,
     218,   219,   220,   221,   222,   223,    -1,   225,    -1,   227,
      -1,    -1,   230,    -1,   232,   233,   234,   235,   236,   237,
     238,    -1,    -1,   241,    -1,   243,    -1,    -1,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,    -1,   277,
     278,   279,   280,   281,   282,    -1,   284,   285,    -1,   287,
      -1,   289,   290,   291,   292,   293,   294,    -1,   296,   297,
      -1,    -1,   300,   301,   302,    -1,    -1,   305,   306,   307,
      -1,   309,    -1,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323,   324,    -1,    -1,    -1,
      -1,   329,   330,   331,    -1,   333,   334,   335,   336,   337,
     338,    -1,   340,   341,   342,   343,   344,   345,   346,   347,
      -1,   349,   350,   351,   352,   353,   354,   355,   356,    -1,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,   371,    -1,   373,   374,    -1,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,   386,   387,
     388,   389,   390,   391,   392,    -1,    -1,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,    -1,    -1,   407,
     408,   409,   410,    -1,   412,   413,   414,   415,   416,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
      -1,    -1,   430,   431,    -1,   433,    -1,   435,   436,   437,
     438,   439,    -1,   441,   442,   443,    -1,   445,    -1,   447,
     448,   449,   450,   451,    -1,   453,   454,   455,   456,   457,
     458,   459,   460,    -1,    -1,   463,   464,   465,    -1,   467,
     468,   469,   470,    -1,   472,   473,   474,   475,   476,   477,
     478,    -1,   480,    -1,   482,   483,   484,   485,   486,   487,
     488,   489,   490,    -1,    -1,   493,    -1,    -1,   496,   497,
     498,   499,   500,   501,   502,   503,   504,   505,   506,   507,
     508,   509,   510,   511,   512,   513,   514,   515,   516,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    -1,    32,    33,
      34,    -1,    -1,    -1,    -1,    -1,    40,    -1,    42,    -1,
      -1,    45,    46,    -1,    48,    49,    50,    -1,    52,    53,
      54,    55,    56,    -1,    58,    59,    -1,    61,    62,    63,
      64,    65,    66,    -1,    -1,    69,    70,    71,    72,    73,
      74,    75,    -1,    77,    78,    79,    80,    81,    -1,    -1,
      -1,    85,    86,    87,    88,    89,    90,    -1,    92,    93,
      94,    -1,    96,    97,    98,    99,   100,   101,    -1,    -1,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,    -1,   120,    -1,   122,   123,
     124,   125,   126,   127,    -1,    -1,   130,   131,   132,   133,
     134,    -1,    -1,   137,   138,   139,   140,   141,   142,   143,
      -1,   145,   146,   147,    -1,   149,   150,   151,    -1,   153,
     154,   155,   156,   157,   158,   159,   160,   161,   162,   163,
      -1,   165,    -1,   167,   168,   169,   170,    -1,   172,    -1,
     174,    -1,    -1,    -1,   178,   179,   180,    -1,   182,    -1,
     184,   185,    -1,    -1,   188,   189,   190,   191,    -1,   193,
     194,   195,   196,   197,   198,   199,    -1,   201,   202,   203,
     204,    -1,   206,   207,   208,   209,   210,   211,   212,    -1,
     214,    -1,   216,   217,   218,   219,   220,   221,   222,   223,
      -1,   225,    -1,   227,    -1,    -1,   230,    -1,   232,   233,
     234,   235,   236,   237,   238,    -1,    -1,   241,    -1,   243,
      -1,    -1,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,    -1,   277,   278,   279,   280,   281,   282,    -1,
     284,   285,    -1,   287,    -1,   289,   290,   291,   292,   293,
     294,    -1,   296,   297,    -1,    -1,   300,   301,   302,    -1,
      -1,   305,   306,   307,    -1,   309,    -1,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,    -1,    -1,    -1,    -1,   329,   330,   331,    -1,   333,
     334,   335,   336,   337,   338,    -1,   340,   341,   342,   343,
     344,   345,   346,   347,    -1,   349,   350,   351,   352,   353,
     354,   355,   356,    -1,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,   371,    -1,   373,
     374,    -1,   376,   377,   378,   379,   380,   381,   382,   383,
     384,   385,   386,   387,   388,   389,   390,   391,   392,    -1,
      -1,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,    -1,    -1,   407,   408,   409,   410,    -1,   412,   413,
     414,   415,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,    -1,    -1,   430,   431,    -1,   433,
      -1,   435,   436,   437,   438,   439,    -1,   441,   442,   443,
      -1,   445,    -1,   447,   448,   449,   450,   451,    -1,   453,
     454,   455,   456,   457,   458,   459,   460,    -1,    -1,   463,
     464,   465,    -1,   467,   468,   469,   470,    -1,   472,   473,
     474,   475,   476,   477,   478,    -1,   480,    -1,   482,   483,
     484,   485,   486,   487,   488,   489,   490,    -1,    -1,   493,
      -1,    -1,   496,   497,   498,   499,   500,   501,   502,   503,
     504,   505,   506,   507,   508,   509,   510,   511,   512,   513,
     514,   515,   516,     3,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    -1,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,
      40,    -1,    42,    -1,    -1,    45,    46,    -1,    48,    49,
      50,    -1,    52,    53,    54,    55,    56,    -1,    58,    59,
      -1,    61,    62,    63,    64,    65,    66,    -1,    -1,    69,
      70,    71,    72,    73,    74,    75,    -1,    77,    78,    79,
      80,    81,    -1,    -1,    -1,    85,    86,    87,    88,    89,
      90,    -1,    92,    93,    94,    -1,    96,    97,    98,    99,
     100,   101,    -1,    -1,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,    -1,
     120,    -1,   122,   123,   124,   125,   126,   127,    -1,    -1,
     130,   131,   132,   133,   134,    -1,    -1,   137,   138,   139,
     140,   141,   142,   143,    -1,   145,   146,   147,    -1,   149,
     150,   151,    -1,   153,   154,   155,   156,   157,   158,   159,
     160,   161,   162,   163,    -1,   165,    -1,   167,   168,   169,
     170,    -1,   172,    -1,   174,    -1,    -1,    -1,   178,   179,
     180,    -1,   182,    -1,   184,   185,    -1,    -1,   188,   189,
     190,   191,    -1,   193,   194,   195,   196,   197,   198,   199,
      -1,   201,   202,   203,   204,    -1,   206,   207,   208,   209,
     210,   211,   212,    -1,   214,    -1,   216,   217,   218,   219,
     220,   221,   222,   223,    -1,   225,    -1,   227,    -1,    -1,
     230,    -1,   232,   233,   234,   235,   236,   237,   238,    -1,
      -1,   241,    -1,   243,    -1,    -1,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,    -1,   277,   278,   279,
     280,   281,   282,    -1,   284,   285,    -1,   287,    -1,   289,
     290,   291,   292,   293,   294,    -1,   296,   297,    -1,    -1,
     300,   301,   302,    -1,    -1,   305,   306,   307,    -1,   309,
      -1,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,   323,   324,    -1,    -1,    -1,    -1,   329,
     330,   331,    -1,   333,   334,   335,   336,   337,   338,    -1,
     340,   341,   342,   343,   344,   345,   346,   347,    -1,   349,
     350,   351,   352,   353,   354,   355,   356,    -1,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
     370,   371,    -1,   373,   374,    -1,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,   386,   387,   388,   389,
     390,   391,   392,    -1,    -1,   395,   396,   397,   398,   399,
     400,   401,   402,   403,   404,    -1,    -1,   407,   408,   409,
     410,    -1,   412,   413,   414,   415,   416,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,    -1,    -1,
     430,   431,    -1,   433,    -1,   435,   436,   437,   438,   439,
      -1,   441,   442,   443,    -1,   445,    -1,   447,   448,   449,
     450,   451,    -1,   453,   454,   455,   456,   457,   458,   459,
     460,    -1,    -1,   463,   464,   465,    -1,   467,   468,   469,
     470,    -1,   472,   473,   474,   475,   476,   477,   478,    -1,
     480,    -1,   482,   483,   484,   485,   486,   487,   488,   489,
     490,    -1,    -1,   493,    -1,    -1,   496,   497,   498,   499,
     500,   501,   502,   503,   504,   505,   506,   507,   508,   509,
     510,   511,   512,   513,   514,   515,   516,     3,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    34,    -1,
      -1,    -1,    -1,    -1,    40,    -1,    -1,    -1,    -1,    45,
      46,    -1,    48,    49,    50,    -1,    52,    53,    54,    55,
      56,    -1,    58,    59,    -1,    61,    62,    63,    64,    65,
      66,    -1,    -1,    69,    70,    71,    72,    73,    74,    75,
      -1,    77,    78,    79,    80,    81,    -1,    -1,    -1,    85,
      86,    87,    88,    89,    90,    -1,    92,    93,    94,    -1,
      96,    97,    98,    99,   100,   101,    -1,    -1,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,    -1,   120,    -1,   122,   123,   124,   125,
     126,   127,    -1,    -1,   130,   131,   132,   133,   134,    -1,
      -1,   137,   138,   139,   140,   141,   142,   143,    -1,   145,
     146,   147,    -1,   149,   150,   151,    -1,   153,   154,   155,
     156,   157,   158,   159,   160,   161,   162,   163,    -1,   165,
      -1,   167,   168,   169,   170,    -1,   172,    -1,   174,    -1,
      -1,    -1,   178,   179,   180,    -1,   182,    -1,   184,   185,
      -1,    -1,   188,   189,   190,   191,    -1,   193,   194,   195,
     196,   197,   198,   199,    -1,   201,   202,   203,   204,    -1,
     206,   207,   208,   209,   210,   211,   212,    -1,   214,    -1,
     216,   217,   218,   219,   220,   221,   222,   223,    -1,   225,
      -1,   227,    -1,    -1,   230,    -1,   232,   233,   234,   235,
     236,   237,   238,    -1,    -1,   241,    -1,   243,    -1,    -1,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
      -1,   277,   278,   279,   280,   281,   282,    -1,   284,   285,
      -1,   287,    -1,   289,   290,   291,   292,   293,   294,    -1,
     296,   297,    -1,    -1,   300,   301,   302,    -1,    -1,   305,
     306,   307,    -1,   309,    -1,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,   323,   324,    -1,
      -1,    -1,    -1,   329,   330,   331,    -1,   333,   334,   335,
     336,   337,   338,    -1,   340,   341,   342,   343,   344,   345,
     346,   347,    -1,   349,   350,   351,   352,   353,   354,   355,
     356,    -1,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,    -1,   373,   374,    -1,
     376,   377,   378,   379,   380,   381,   382,   383,   384,   385,
     386,   387,   388,   389,   390,   391,   392,    -1,    -1,   395,
     396,   397,   398,   399,   400,   401,   402,   403,   404,    -1,
      -1,   407,   408,   409,   410,    -1,   412,   413,   414,   415,
     416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,    -1,    -1,   430,   431,    -1,   433,    -1,   435,
     436,   437,   438,   439,    -1,   441,   442,   443,    -1,   445,
      -1,   447,   448,   449,   450,   451,    -1,   453,   454,   455,
     456,   457,   458,   459,   460,    -1,    -1,   463,   464,   465,
      -1,   467,   468,   469,   470,    -1,   472,   473,   474,   475,
     476,   477,   478,    -1,   480,    -1,   482,   483,   484,   485,
     486,   487,   488,   489,   490,    -1,    -1,   493,    -1,    -1,
     496,   497,   498,   499,   500,   501,   502,   503,   504,   505,
     506,   507,   508,   509,   510,   511,   512,   513,   514,   515,
     516,     3,    -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    -1,
      32,    33,    34,    -1,    -1,    -1,    -1,    -1,    40,    -1,
      -1,    -1,    -1,    45,    46,    -1,    48,    49,    50,    -1,
      52,    53,    54,    55,    56,    -1,    58,    59,    -1,    61,
      62,    63,    64,    65,    66,    -1,    -1,    69,    70,    71,
      72,    73,    74,    75,    -1,    77,    78,    79,    80,    81,
      -1,    -1,    -1,    85,    86,    87,    88,    89,    90,    -1,
      92,    93,    94,    -1,    96,    97,    98,    99,   100,   101,
      -1,    -1,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,    -1,   120,    -1,
     122,   123,   124,   125,   126,   127,    -1,    -1,   130,   131,
     132,   133,   134,    -1,    -1,   137,   138,   139,   140,   141,
     142,   143,    -1,   145,   146,   147,    -1,   149,   150,   151,
      -1,   153,   154,   155,   156,   157,   158,   159,   160,   161,
     162,   163,    -1,   165,    -1,   167,   168,   169,   170,    -1,
     172,    -1,   174,    -1,    -1,    -1,   178,   179,   180,    -1,
     182,    -1,   184,   185,    -1,    -1,   188,   189,   190,   191,
      -1,   193,   194,   195,   196,   197,   198,   199,    -1,   201,
     202,   203,   204,    -1,   206,   207,   208,   209,   210,   211,
     212,    -1,   214,    -1,   216,   217,   218,   219,   220,   221,
     222,   223,    -1,   225,    -1,   227,    -1,    -1,   230,    -1,
     232,   233,   234,   235,   236,   237,   238,    -1,    -1,   241,
      -1,   243,    -1,    -1,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,    -1,   277,   278,   279,   280,   281,
     282,    -1,   284,   285,    -1,   287,    -1,   289,   290,   291,
     292,   293,   294,    -1,   296,   297,    -1,    -1,   300,   301,
     302,    -1,    -1,   305,   306,   307,    -1,   309,    -1,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,   323,   324,    -1,    -1,    -1,    -1,   329,   330,   331,
      -1,   333,   334,   335,   336,   337,   338,    -1,   340,   341,
     342,   343,   344,   345,   346,   347,    -1,   349,   350,   351,
     352,   353,   354,   355,   356,    -1,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
      -1,   373,   374,    -1,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,   386,   387,   388,   389,   390,   391,
     392,    -1,    -1,   395,   396,   397,   398,   399,   400,   401,
     402,   403,   404,    -1,    -1,   407,   408,   409,   410,    -1,
     412,   413,   414,   415,   416,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,    -1,    -1,   430,   431,
      -1,   433,    -1,   435,   436,   437,   438,   439,    -1,   441,
     442,   443,    -1,   445,    -1,   447,   448,   449,   450,   451,
      -1,   453,   454,   455,   456,   457,   458,   459,   460,    -1,
      -1,   463,   464,   465,    -1,   467,   468,   469,   470,    -1,
     472,   473,   474,   475,   476,   477,   478,    -1,   480,    -1,
     482,   483,   484,   485,   486,   487,   488,   489,   490,    -1,
      -1,   493,    -1,    -1,   496,   497,   498,   499,   500,   501,
     502,   503,   504,   505,   506,   507,   508,   509,   510,   511,
     512,   513,   514,   515,   516,     3,    -1,     5,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    -1,    32,    33,    34,    -1,    -1,    -1,
      -1,    -1,    40,    -1,    -1,    -1,    -1,    45,    46,    -1,
      48,    49,    50,    -1,    52,    53,    54,    55,    56,    -1,
      58,    59,    -1,    61,    62,    63,    64,    65,    66,    -1,
      -1,    69,    70,    71,    72,    73,    74,    75,    -1,    77,
      78,    79,    80,    81,    -1,    -1,    -1,    85,    86,    87,
      88,    89,    90,    -1,    92,    93,    94,    -1,    96,    97,
      98,    99,   100,   101,    -1,    -1,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,    -1,   120,    -1,   122,   123,   124,   125,   126,   127,
      -1,    -1,   130,   131,   132,   133,   134,    -1,    -1,   137,
     138,   139,   140,   141,   142,   143,    -1,   145,   146,   147,
      -1,   149,   150,   151,    -1,   153,   154,   155,   156,   157,
     158,   159,   160,   161,   162,   163,    -1,   165,    -1,   167,
     168,   169,   170,    -1,   172,    -1,   174,    -1,    -1,    -1,
     178,   179,   180,    -1,   182,    -1,   184,   185,    -1,    -1,
     188,   189,   190,   191,    -1,   193,   194,   195,   196,   197,
     198,   199,    -1,   201,   202,   203,   204,    -1,   206,   207,
     208,   209,   210,   211,   212,    -1,   214,    -1,   216,   217,
     218,   219,   220,   221,   222,   223,    -1,   225,    -1,   227,
      -1,    -1,   230,    -1,   232,   233,   234,   235,   236,   237,
     238,    -1,    -1,   241,    -1,   243,    -1,    -1,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,    -1,   277,
     278,   279,   280,   281,   282,    -1,   284,   285,    -1,   287,
      -1,   289,   290,   291,   292,   293,   294,    -1,   296,   297,
      -1,    -1,   300,   301,   302,    -1,    -1,   305,   306,   307,
      -1,   309,    -1,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323,   324,    -1,    -1,    -1,
      -1,   329,   330,   331,    -1,   333,   334,   335,   336,   337,
     338,    -1,   340,   341,   342,   343,   344,   345,   346,   347,
      -1,   349,   350,   351,   352,   353,   354,   355,   356,    -1,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,   371,    -1,   373,   374,    -1,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,   386,   387,
     388,   389,   390,   391,   392,    -1,    -1,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,    -1,    -1,   407,
     408,   409,   410,    -1,   412,   413,   414,   415,   416,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
      -1,    -1,   430,   431,    -1,   433,    -1,   435,   436,   437,
     438,   439,    -1,   441,   442,   443,    -1,   445,    -1,   447,
     448,   449,   450,   451,    -1,   453,   454,   455,   456,   457,
     458,   459,   460,    -1,    -1,   463,   464,   465,    -1,   467,
     468,   469,   470,    -1,   472,   473,   474,   475,   476,   477,
     478,    -1,   480,    -1,   482,   483,   484,   485,   486,   487,
     488,   489,   490,    -1,    -1,   493,    -1,    -1,   496,   497,
     498,   499,   500,   501,   502,   503,   504,   505,   506,   507,
     508,   509,   510,   511,   512,   513,   514,   515,   516,     3,
      -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    -1,    32,    33,
      34,    -1,    -1,    -1,    -1,    -1,    40,    -1,    -1,    -1,
      -1,    45,    46,    -1,    48,    49,    50,    -1,    52,    53,
      54,    55,    56,    -1,    58,    59,    -1,    61,    62,    63,
      64,    65,    66,    -1,    -1,    69,    70,    71,    72,    73,
      74,    75,    -1,    77,    78,    79,    80,    81,    -1,    -1,
      -1,    85,    86,    87,    88,    89,    90,    -1,    92,    93,
      94,    -1,    96,    97,    98,    99,   100,   101,    -1,    -1,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,    -1,   120,    -1,   122,   123,
     124,   125,   126,   127,    -1,    -1,   130,   131,   132,   133,
     134,    -1,    -1,   137,   138,   139,   140,   141,   142,   143,
      -1,   145,   146,   147,    -1,   149,   150,   151,    -1,   153,
     154,   155,   156,   157,   158,   159,   160,   161,   162,   163,
      -1,   165,    -1,   167,   168,   169,   170,    -1,   172,    -1,
     174,    -1,    -1,    -1,   178,   179,   180,    -1,   182,    -1,
     184,   185,    -1,    -1,   188,   189,   190,   191,    -1,   193,
     194,   195,   196,   197,   198,   199,    -1,   201,   202,   203,
     204,    -1,   206,   207,   208,   209,   210,   211,   212,    -1,
     214,    -1,   216,   217,   218,   219,   220,   221,   222,   223,
      -1,   225,    -1,   227,    -1,    -1,   230,    -1,   232,   233,
     234,   235,   236,   237,   238,    -1,    -1,   241,    -1,   243,
      -1,    -1,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,    -1,   277,   278,   279,   280,   281,   282,    -1,
     284,   285,    -1,   287,    -1,   289,   290,   291,   292,   293,
     294,    -1,   296,   297,    -1,    -1,   300,   301,   302,    -1,
      -1,   305,   306,   307,    -1,   309,    -1,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,    -1,    -1,    -1,    -1,   329,   330,   331,    -1,   333,
     334,   335,   336,   337,   338,    -1,   340,   341,   342,   343,
     344,   345,   346,   347,    -1,   349,   350,   351,   352,   353,
     354,   355,   356,    -1,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,   371,    -1,   373,
     374,    -1,   376,   377,   378,   379,   380,   381,   382,   383,
     384,   385,   386,   387,   388,   389,   390,   391,   392,    -1,
      -1,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,    -1,    -1,   407,   408,   409,   410,    -1,   412,   413,
     414,   415,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,    -1,    -1,   430,   431,    -1,   433,
      -1,   435,   436,   437,   438,   439,    -1,   441,   442,   443,
      -1,   445,    -1,   447,   448,   449,   450,   451,    -1,   453,
     454,   455,   456,   457,   458,   459,   460,    -1,    -1,   463,
     464,   465,    -1,   467,   468,   469,   470,    -1,   472,   473,
     474,   475,   476,   477,   478,    -1,   480,    -1,   482,   483,
     484,   485,   486,   487,   488,   489,   490,    -1,    -1,   493,
      -1,    -1,   496,   497,   498,   499,   500,   501,   502,   503,
     504,   505,   506,   507,   508,   509,   510,   511,   512,   513,
     514,   515,   516,     3,    -1,     5,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    -1,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,
      40,    -1,    -1,    -1,    -1,    45,    46,    -1,    48,    49,
      50,    -1,    52,    53,    54,    55,    56,    -1,    58,    59,
      -1,    61,    62,    63,    64,    65,    66,    -1,    -1,    69,
      70,    71,    72,    73,    74,    75,    -1,    77,    78,    79,
      80,    81,    -1,    -1,    -1,    85,    86,    87,    88,    89,
      90,    -1,    92,    93,    94,    -1,    96,    97,    98,    99,
     100,   101,    -1,    -1,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,    -1,
     120,    -1,   122,   123,   124,   125,   126,   127,    -1,    -1,
     130,   131,   132,   133,   134,    -1,    -1,   137,   138,   139,
     140,   141,   142,   143,    -1,   145,   146,   147,    -1,   149,
     150,   151,    -1,   153,   154,   155,   156,   157,   158,   159,
     160,   161,   162,   163,    -1,   165,    -1,   167,   168,   169,
     170,    -1,   172,    -1,   174,    -1,    -1,    -1,   178,   179,
     180,    -1,   182,    -1,   184,   185,    -1,    -1,   188,   189,
     190,   191,    -1,   193,   194,   195,   196,   197,   198,   199,
      -1,   201,   202,   203,   204,    -1,   206,   207,   208,   209,
     210,   211,   212,    -1,   214,    -1,   216,   217,   218,   219,
     220,   221,   222,   223,    -1,   225,    -1,   227,    -1,    -1,
     230,    -1,   232,   233,   234,   235,   236,   237,   238,    -1,
      -1,   241,    -1,   243,    -1,    -1,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,    -1,   277,   278,   279,
     280,   281,   282,    -1,   284,   285,    -1,   287,    -1,   289,
     290,   291,   292,   293,   294,    -1,   296,   297,    -1,    -1,
     300,   301,   302,    -1,    -1,   305,   306,   307,    -1,   309,
      -1,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,   323,   324,    -1,    -1,    -1,    -1,   329,
     330,   331,    -1,   333,   334,   335,   336,   337,   338,    -1,
     340,   341,   342,   343,   344,   345,   346,   347,    -1,   349,
     350,   351,   352,   353,   354,   355,   356,    -1,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
     370,   371,    -1,   373,   374,    -1,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,   386,   387,   388,   389,
     390,   391,   392,    -1,    -1,   395,   396,   397,   398,   399,
     400,   401,   402,   403,   404,    -1,    -1,   407,   408,   409,
     410,    -1,   412,   413,   414,   415,   416,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,    -1,    -1,
     430,   431,    -1,   433,    -1,   435,   436,   437,   438,   439,
      -1,   441,   442,   443,    -1,   445,    -1,   447,   448,   449,
     450,   451,    -1,   453,   454,   455,   456,   457,   458,   459,
     460,    -1,    -1,   463,   464,   465,    -1,   467,   468,   469,
     470,    -1,   472,   473,   474,   475,   476,   477,   478,    -1,
     480,    -1,   482,   483,   484,   485,   486,   487,   488,   489,
     490,    -1,    -1,   493,    -1,    -1,   496,   497,   498,   499,
     500,   501,   502,   503,   504,   505,   506,   507,   508,   509,
     510,   511,   512,   513,   514,   515,   516,     3,    -1,     5,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    -1,    32,    33,    34,    -1,
      -1,    -1,    -1,    -1,    40,    -1,    -1,    -1,    -1,    45,
      46,    -1,    48,    49,    50,    -1,    52,    53,    54,    55,
      56,    -1,    58,    59,    -1,    61,    62,    63,    64,    65,
      66,    -1,    -1,    69,    70,    71,    72,    73,    74,    75,
      -1,    77,    78,    79,    80,    81,    -1,    -1,    -1,    85,
      86,    87,    88,    89,    90,    -1,    92,    93,    94,    -1,
      96,    97,    98,    99,   100,   101,    -1,    -1,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,    -1,   120,    -1,   122,   123,   124,   125,
     126,   127,    -1,    -1,   130,   131,   132,   133,   134,    -1,
      -1,   137,   138,   139,   140,   141,   142,   143,    -1,   145,
     146,   147,    -1,   149,   150,   151,    -1,   153,   154,   155,
     156,   157,   158,   159,   160,   161,   162,   163,    -1,   165,
      -1,   167,   168,   169,   170,    -1,   172,    -1,   174,    -1,
      -1,    -1,   178,   179,   180,    -1,   182,    -1,   184,   185,
      -1,    -1,   188,   189,   190,   191,    -1,   193,   194,   195,
     196,   197,   198,   199,    -1,   201,   202,   203,   204,    -1,
     206,   207,   208,   209,   210,   211,   212,    -1,   214,    -1,
     216,   217,   218,   219,   220,   221,   222,   223,    -1,   225,
      -1,   227,    -1,    -1,   230,    -1,   232,   233,   234,   235,
     236,   237,   238,    -1,    -1,   241,    -1,   243,    -1,    -1,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
      -1,   277,   278,   279,   280,   281,   282,    -1,   284,   285,
      -1,   287,    -1,   289,   290,   291,   292,   293,   294,    -1,
     296,   297,    -1,    -1,   300,   301,   302,    -1,    -1,   305,
     306,   307,    -1,   309,    -1,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,   323,   324,    -1,
      -1,    -1,    -1,   329,   330,   331,    -1,   333,   334,   335,
     336,   337,   338,    -1,   340,   341,   342,   343,   344,   345,
     346,   347,    -1,   349,   350,   351,   352,   353,   354,   355,
     356,    -1,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,    -1,   373,   374,    -1,
     376,   377,   378,   379,   380,   381,   382,   383,   384,   385,
     386,   387,   388,   389,   390,   391,   392,    -1,    -1,   395,
     396,   397,   398,   399,   400,   401,   402,   403,   404,    -1,
      -1,   407,   408,   409,   410,    -1,   412,   413,   414,   415,
     416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,    -1,    -1,   430,   431,    -1,   433,    -1,   435,
     436,   437,   438,   439,    -1,   441,   442,   443,    -1,   445,
      -1,   447,   448,   449,   450,   451,    -1,   453,   454,   455,
     456,   457,   458,   459,   460,    -1,    -1,   463,   464,   465,
      -1,   467,   468,   469,   470,    -1,   472,   473,   474,   475,
     476,   477,   478,    -1,   480,    -1,   482,   483,   484,   485,
     486,   487,   488,   489,   490,    -1,    -1,   493,    -1,    -1,
     496,   497,   498,   499,   500,   501,   502,   503,   504,   505,
     506,   507,   508,   509,   510,   511,   512,   513,   514,   515,
     516,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    -1,
      32,    33,    34,    -1,    -1,    -1,    38,    -1,    40,    -1,
      42,    -1,    44,    45,    46,    -1,    48,    49,    50,    51,
      52,    53,    54,    -1,    56,    57,    58,    59,    -1,    61,
      62,    63,    64,    65,    66,    -1,    -1,    69,    70,    71,
      72,    73,    74,    75,    -1,    77,    78,    79,    80,    -1,
      -1,    83,    -1,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    -1,    96,    97,    98,    99,   100,   101,
      -1,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,    -1,   120,    -1,
     122,   123,   124,   125,   126,   127,    -1,    -1,   130,   131,
     132,   133,   134,    -1,    -1,   137,   138,   139,   140,   141,
     142,   143,    -1,   145,   146,   147,    -1,   149,   150,   151,
      -1,   153,   154,   155,   156,    -1,   158,   159,   160,   161,
     162,    -1,    -1,   165,    -1,   167,   168,   169,   170,    -1,
     172,    -1,   174,   175,    -1,   177,   178,   179,   180,   181,
     182,    -1,   184,   185,    -1,    -1,    -1,    -1,   190,   191,
      -1,   193,   194,   195,   196,   197,   198,   199,   200,   201,
     202,   203,   204,    -1,   206,   207,   208,   209,   210,   211,
     212,    -1,   214,   215,    -1,   217,   218,   219,   220,   221,
     222,   223,    -1,   225,    -1,   227,   228,   229,   230,   231,
     232,   233,   234,   235,   236,   237,   238,    -1,    -1,   241,
     242,   243,   244,    -1,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
      -1,    -1,   284,   285,   286,   287,    -1,    -1,   290,   291,
     292,   293,   294,    -1,   296,   297,    -1,    -1,   300,   301,
     302,    -1,    -1,   305,   306,    -1,   308,   309,   310,    -1,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,   323,   324,    -1,    -1,    -1,    -1,   329,   330,    -1,
     332,   333,   334,    -1,   336,   337,   338,    -1,   340,   341,
     342,   343,   344,   345,   346,   347,    -1,   349,   350,   351,
     352,   353,   354,   355,   356,    -1,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
      -1,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,   386,   387,   388,   389,   390,   391,
     392,    -1,   394,   395,   396,   397,   398,   399,   400,   401,
     402,   403,   404,    -1,   406,   407,   408,   409,   410,    -1,
     412,   413,   414,   415,   416,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,    -1,    -1,    -1,   430,   431,
      -1,   433,   434,   435,   436,   437,   438,   439,    -1,   441,
     442,   443,    -1,   445,    -1,   447,   448,    -1,   450,    -1,
      -1,   453,   454,   455,   456,   457,   458,   459,   460,   461,
      -1,   463,   464,   465,    -1,   467,   468,   469,   470,    -1,
     472,   473,   474,   475,   476,    -1,   478,    -1,   480,   481,
     482,   483,   484,   485,   486,   487,   488,   489,   490,    -1,
      -1,   493,    -1,    -1,   496,   497,   498,   499,   500,   501,
       3,    -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   513,   514,   515,   516,    -1,    -1,    -1,    -1,    22,
      23,    24,    25,    26,    27,    28,    29,    30,    -1,    32,
      33,    34,    -1,    -1,    -1,    -1,    -1,    40,    -1,    -1,
      -1,    -1,    45,    46,    -1,    48,    49,    50,    -1,    52,
      53,    54,    55,    56,    -1,    58,    59,    -1,    61,    62,
      63,    64,    65,    66,    -1,    -1,    69,    70,    71,    72,
      73,    74,    75,    -1,    77,    78,    79,    80,    81,    -1,
      -1,    -1,    85,    86,    87,    88,    89,    90,    -1,    92,
      93,    94,    -1,    96,    97,    98,    99,   100,   101,    -1,
      -1,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,   117,   118,    -1,   120,    -1,   122,
     123,   124,   125,   126,   127,    -1,    -1,   130,   131,   132,
     133,   134,    -1,    -1,   137,   138,   139,   140,   141,   142,
     143,    -1,   145,   146,   147,    -1,   149,   150,   151,    -1,
     153,   154,   155,   156,   157,   158,   159,   160,   161,   162,
     163,    -1,   165,    -1,   167,   168,   169,   170,    -1,   172,
      -1,   174,    -1,    -1,    -1,   178,   179,   180,    -1,   182,
      -1,   184,   185,    -1,    -1,   188,   189,   190,   191,    -1,
     193,   194,   195,   196,   197,   198,   199,    -1,   201,   202,
     203,   204,    -1,   206,   207,   208,   209,   210,   211,   212,
      -1,   214,    -1,   216,   217,   218,   219,   220,   221,   222,
     223,    -1,   225,    -1,   227,    -1,    -1,   230,    -1,   232,
     233,   234,   235,   236,   237,   238,    -1,    -1,   241,    -1,
     243,    -1,    -1,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,    -1,   277,   278,   279,   280,   281,   282,
      -1,   284,   285,    -1,   287,    -1,   289,   290,   291,   292,
     293,   294,    -1,   296,   297,    -1,    -1,   300,   301,   302,
      -1,    -1,   305,   306,   307,    -1,   309,    -1,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
     323,   324,    -1,    -1,    -1,    -1,   329,   330,   331,    -1,
     333,   334,   335,   336,   337,   338,    -1,   340,   341,   342,
     343,   344,   345,   346,   347,    -1,   349,   350,   351,   352,
     353,   354,   355,   356,    -1,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,   371,    -1,
     373,   374,    -1,   376,   377,   378,   379,   380,   381,   382,
     383,   384,   385,   386,   387,   388,   389,   390,   391,   392,
      -1,    -1,   395,   396,   397,   398,   399,   400,   401,   402,
     403,   404,    -1,    -1,   407,   408,   409,   410,    -1,   412,
     413,   414,   415,   416,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,   427,    -1,    -1,   430,   431,    -1,
     433,    -1,   435,   436,   437,   438,   439,    -1,   441,   442,
     443,    -1,   445,    -1,   447,   448,   449,   450,   451,    -1,
     453,   454,   455,   456,   457,   458,   459,   460,    -1,    -1,
     463,   464,   465,    -1,   467,   468,   469,   470,    -1,   472,
     473,   474,   475,   476,   477,   478,    -1,   480,    -1,   482,
     483,   484,   485,   486,   487,   488,   489,   490,    -1,    -1,
     493,    -1,    -1,   496,   497,   498,   499,   500,   501,   502,
     503,   504,   505,   506,   507,   508,   509,   510,   511,   512,
     513,   514,   515,   516,     3,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    22,    23,    24,    25,    26,    27,    28,
      29,    30,    -1,    32,    33,    34,    -1,    -1,    -1,    -1,
      -1,    40,    -1,    -1,    -1,    -1,    45,    46,    -1,    48,
      49,    50,    -1,    52,    53,    54,    55,    56,    -1,    58,
      59,    -1,    61,    62,    63,    64,    65,    66,    -1,    -1,
      69,    70,    71,    72,    73,    74,    75,    -1,    77,    78,
      79,    80,    81,    -1,    -1,    -1,    85,    86,    87,    88,
      89,    90,    -1,    92,    93,    94,    -1,    96,    97,    98,
      99,   100,   101,    -1,    -1,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
      -1,   120,    -1,   122,   123,   124,   125,   126,   127,    -1,
      -1,   130,   131,   132,   133,   134,    -1,    -1,   137,   138,
     139,   140,   141,   142,   143,    -1,   145,   146,   147,    -1,
     149,   150,   151,    -1,   153,   154,   155,   156,   157,   158,
     159,   160,   161,   162,   163,    -1,   165,    -1,   167,   168,
     169,   170,    -1,   172,    -1,   174,    -1,    -1,    -1,   178,
     179,   180,    -1,   182,    -1,   184,   185,    -1,    -1,   188,
     189,   190,   191,    -1,   193,   194,   195,   196,   197,   198,
     199,    -1,   201,   202,   203,   204,    -1,   206,   207,   208,
     209,   210,   211,   212,    -1,   214,    -1,   216,   217,   218,
     219,   220,   221,   222,   223,    -1,   225,    -1,   227,    -1,
      -1,   230,    -1,   232,   233,   234,   235,   236,   237,   238,
      -1,    -1,   241,    -1,   243,    -1,    -1,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,    -1,   277,   278,
     279,   280,   281,   282,    -1,   284,   285,    -1,   287,    -1,
     289,   290,   291,   292,   293,   294,    -1,   296,   297,    -1,
      -1,   300,   301,   302,    -1,    -1,   305,   306,   307,    -1,
     309,    -1,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,    -1,    -1,    -1,    -1,
     329,   330,   331,    -1,   333,   334,   335,   336,   337,   338,
      -1,   340,   341,   342,   343,   344,   345,   346,   347,    -1,
     349,   350,   351,   352,   353,   354,   355,   356,    -1,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,   371,    -1,   373,   374,    -1,   376,   377,   378,
     379,   380,   381,   382,   383,   384,   385,   386,   387,   388,
     389,   390,   391,   392,    -1,    -1,   395,   396,   397,   398,
     399,   400,   401,   402,   403,   404,    -1,    -1,   407,   408,
     409,   410,    -1,   412,   413,   414,   415,   416,   417,   418,
     419,   420,   421,   422,   423,   424,   425,   426,   427,    -1,
      -1,   430,   431,    -1,   433,    -1,   435,   436,   437,   438,
     439,    -1,   441,   442,   443,    -1,   445,    -1,   447,   448,
     449,   450,   451,    -1,   453,   454,   455,   456,   457,   458,
     459,   460,    -1,    -1,   463,   464,   465,    -1,   467,   468,
     469,   470,    -1,   472,   473,   474,   475,   476,   477,   478,
      -1,   480,    -1,   482,   483,   484,   485,   486,   487,   488,
     489,   490,    -1,    -1,   493,    -1,    -1,   496,   497,   498,
     499,   500,   501,   502,   503,   504,   505,   506,   507,   508,
     509,   510,   511,   512,   513,   514,   515,   516,     3,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    -1,    32,    33,    34,
      -1,    -1,    -1,    -1,    -1,    40,    -1,    -1,    -1,    -1,
      45,    46,    -1,    48,    49,    50,    -1,    52,    53,    54,
      55,    56,    -1,    58,    59,    -1,    61,    62,    63,    64,
      65,    66,    -1,    -1,    69,    70,    71,    72,    73,    74,
      75,    -1,    77,    78,    79,    80,    81,    -1,    -1,    -1,
      85,    86,    87,    88,    89,    90,    -1,    92,    93,    94,
      -1,    96,    97,    98,    99,   100,   101,    -1,    -1,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,    -1,   120,    -1,   122,   123,   124,
     125,   126,   127,    -1,    -1,   130,   131,   132,   133,   134,
      -1,    -1,   137,   138,   139,   140,   141,   142,   143,    -1,
     145,   146,   147,    -1,   149,   150,   151,    -1,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,   163,    -1,
     165,    -1,   167,   168,   169,   170,    -1,   172,    -1,   174,
      -1,    -1,    -1,   178,   179,   180,    -1,   182,    -1,   184,
     185,    -1,    -1,   188,   189,   190,   191,    -1,   193,   194,
     195,   196,   197,   198,   199,    -1,   201,   202,   203,   204,
      -1,   206,   207,   208,   209,   210,   211,   212,    -1,   214,
      -1,   216,   217,   218,   219,   220,   221,   222,   223,    -1,
     225,    -1,   227,    -1,    -1,   230,    -1,   232,   233,   234,
     235,   236,   237,   238,    -1,    -1,   241,    -1,   243,    -1,
      -1,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,    -1,   277,   278,   279,   280,   281,   282,    -1,   284,
     285,    -1,   287,    -1,   289,   290,   291,   292,   293,   294,
      -1,   296,   297,    -1,    -1,   300,   301,   302,    -1,    -1,
     305,   306,   307,    -1,   309,    -1,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
      -1,    -1,    -1,    -1,   329,   330,   331,    -1,   333,   334,
     335,   336,   337,   338,    -1,   340,   341,   342,   343,   344,
     345,   346,   347,    -1,   349,   350,   351,   352,   353,   354,
     355,   356,    -1,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,    -1,   373,   374,
      -1,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,    -1,    -1,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
      -1,    -1,   407,   408,   409,   410,    -1,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,    -1,    -1,   430,   431,    -1,   433,    -1,
     435,   436,   437,   438,   439,    -1,   441,   442,   443,    -1,
     445,    -1,   447,   448,   449,   450,   451,    -1,   453,   454,
     455,   456,   457,   458,   459,   460,    -1,    -1,   463,   464,
     465,    -1,   467,   468,   469,   470,    -1,   472,   473,   474,
     475,   476,   477,   478,    -1,   480,    -1,   482,   483,   484,
     485,   486,   487,   488,   489,   490,    -1,    -1,   493,    -1,
      -1,   496,   497,   498,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    30,
      -1,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,    40,
      -1,    -1,    -1,    -1,    45,    46,    -1,    48,    49,    50,
      -1,    52,    53,    54,    55,    56,    -1,    58,    59,    -1,
      61,    62,    63,    64,    65,    66,    -1,    -1,    69,    70,
      71,    72,    73,    74,    75,    -1,    77,    78,    79,    80,
      81,    -1,    -1,    -1,    85,    86,    87,    88,    89,    90,
      -1,    92,    93,    94,    -1,    96,    97,    98,    99,   100,
     101,    -1,    -1,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,    -1,   120,
      -1,   122,   123,   124,   125,   126,   127,    -1,    -1,   130,
     131,   132,   133,   134,    -1,    -1,   137,   138,   139,   140,
     141,   142,   143,    -1,   145,   146,   147,    -1,   149,   150,
     151,    -1,   153,   154,   155,   156,   157,   158,   159,   160,
     161,   162,   163,    -1,   165,    -1,   167,   168,   169,   170,
      -1,   172,    -1,   174,    -1,    -1,    -1,   178,   179,   180,
      -1,   182,    -1,   184,   185,    -1,    -1,   188,   189,   190,
     191,    -1,   193,   194,   195,   196,   197,   198,   199,    -1,
     201,   202,   203,   204,    -1,   206,   207,   208,   209,   210,
     211,   212,    -1,   214,    -1,   216,   217,   218,   219,   220,
     221,   222,   223,    -1,   225,    -1,   227,    -1,    -1,   230,
      -1,   232,   233,   234,   235,   236,   237,   238,    -1,    -1,
     241,    -1,   243,    -1,    -1,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,    -1,   277,   278,   279,   280,
     281,   282,    -1,   284,   285,    -1,   287,    -1,   289,   290,
     291,   292,   293,   294,    -1,   296,   297,    -1,    -1,   300,
     301,   302,    -1,    -1,   305,   306,   307,    -1,   309,    -1,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,   322,   323,   324,    -1,    -1,    -1,    -1,   329,   330,
     331,    -1,   333,   334,   335,   336,   337,   338,    -1,   340,
     341,   342,   343,   344,   345,   346,   347,    -1,   349,   350,
     351,   352,   353,   354,   355,   356,    -1,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,    -1,   373,   374,    -1,   376,   377,   378,   379,   380,
     381,   382,   383,   384,   385,   386,   387,   388,   389,   390,
     391,   392,    -1,    -1,   395,   396,   397,   398,   399,   400,
     401,   402,   403,   404,    -1,    -1,   407,   408,   409,   410,
      -1,   412,   413,   414,   415,   416,   417,   418,   419,   420,
     421,   422,   423,   424,   425,   426,   427,    -1,    -1,   430,
     431,    -1,   433,    -1,   435,   436,   437,   438,   439,    -1,
     441,   442,   443,    -1,   445,    -1,   447,   448,   449,   450,
     451,    -1,   453,   454,   455,   456,   457,   458,   459,   460,
      -1,    -1,   463,   464,   465,    -1,   467,   468,   469,   470,
      -1,   472,   473,   474,   475,   476,   477,   478,    -1,   480,
      -1,   482,   483,   484,   485,   486,   487,   488,   489,   490,
      -1,    -1,   493,    -1,    -1,   496,   497,   498,   499,   500,
     501,   502,   503,   504,   505,   506,   507,   508,   509,   510,
     511,   512,   513,   514,   515,   516,     3,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    -1,    32,    33,    34,    -1,    -1,
      -1,    -1,    -1,    40,    -1,    -1,    -1,    -1,    45,    46,
      -1,    48,    49,    50,    -1,    52,    53,    54,    55,    56,
      -1,    58,    59,    -1,    61,    62,    63,    64,    65,    66,
      -1,    -1,    69,    70,    71,    72,    73,    74,    75,    -1,
      77,    78,    79,    80,    81,    -1,    -1,    -1,    85,    86,
      87,    88,    89,    90,    -1,    92,    93,    94,    -1,    96,
      97,    98,    99,   100,   101,    -1,    -1,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,   118,    -1,   120,    -1,   122,   123,   124,   125,   126,
     127,    -1,    -1,   130,   131,   132,   133,   134,    -1,    -1,
     137,   138,   139,   140,   141,   142,   143,    -1,   145,   146,
     147,    -1,   149,   150,   151,    -1,   153,   154,   155,   156,
     157,   158,   159,   160,   161,   162,   163,    -1,   165,    -1,
     167,   168,   169,   170,    -1,   172,    -1,   174,    -1,    -1,
      -1,   178,   179,   180,    -1,   182,    -1,   184,   185,    -1,
      -1,   188,   189,   190,   191,    -1,   193,   194,   195,   196,
     197,   198,   199,    -1,   201,   202,   203,   204,    -1,   206,
     207,   208,   209,   210,   211,   212,    -1,   214,    -1,   216,
     217,   218,   219,   220,   221,   222,   223,    -1,   225,    -1,
     227,    -1,    -1,   230,    -1,   232,   233,   234,   235,   236,
     237,   238,    -1,    -1,   241,    -1,   243,    -1,    -1,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,    -1,
     277,   278,   279,   280,   281,   282,    -1,   284,   285,    -1,
     287,    -1,   289,   290,   291,   292,   293,   294,    -1,   296,
     297,    -1,    -1,   300,   301,   302,    -1,    -1,   305,   306,
     307,    -1,   309,    -1,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,   323,   324,    -1,    -1,
      -1,    -1,   329,   330,   331,    -1,   333,   334,   335,   336,
     337,   338,    -1,   340,   341,   342,   343,   344,   345,   346,
     347,    -1,   349,   350,   351,   352,   353,   354,   355,   356,
      -1,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,   370,   371,    -1,   373,   374,    -1,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,   386,
     387,   388,   389,   390,   391,   392,    -1,    -1,   395,   396,
     397,   398,   399,   400,   401,   402,   403,   404,    -1,    -1,
     407,   408,   409,   410,    -1,   412,   413,   414,   415,   416,
     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
     427,    -1,    -1,   430,   431,    -1,   433,    -1,   435,   436,
     437,   438,   439,    -1,   441,   442,   443,    -1,   445,    -1,
     447,   448,   449,   450,   451,    -1,   453,   454,   455,   456,
     457,   458,   459,   460,    -1,    -1,   463,   464,   465,    -1,
     467,   468,   469,   470,    -1,   472,   473,   474,   475,   476,
     477,   478,    -1,   480,    -1,   482,   483,   484,   485,   486,
     487,   488,   489,   490,    -1,    -1,   493,    -1,    -1,   496,
     497,   498,   499,   500,   501,   502,   503,   504,   505,   506,
     507,   508,   509,   510,   511,   512,   513,   514,   515,   516,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,
      23,    24,    25,    26,    27,    28,    29,    30,    -1,    32,
      33,    34,    -1,    -1,    -1,    -1,    -1,    40,    -1,    -1,
      -1,    -1,    45,    46,    -1,    48,    49,    50,    -1,    52,
      53,    54,    55,    56,    -1,    58,    59,    -1,    61,    62,
      63,    64,    65,    66,    -1,    -1,    69,    70,    71,    72,
      73,    74,    75,    -1,    77,    78,    79,    80,    81,    -1,
      -1,    -1,    85,    86,    87,    88,    89,    90,    -1,    92,
      93,    94,    -1,    96,    97,    98,    99,   100,   101,    -1,
      -1,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,   117,   118,    -1,   120,    -1,   122,
     123,   124,   125,   126,   127,    -1,    -1,   130,   131,   132,
     133,   134,    -1,    -1,   137,   138,   139,   140,   141,   142,
     143,    -1,   145,   146,   147,    -1,   149,   150,   151,    -1,
     153,   154,   155,   156,   157,   158,   159,   160,   161,   162,
     163,    -1,   165,    -1,   167,   168,   169,   170,    -1,   172,
      -1,   174,    -1,    -1,    -1,   178,   179,   180,    -1,   182,
      -1,   184,   185,    -1,    -1,   188,   189,   190,   191,    -1,
     193,   194,   195,   196,   197,   198,   199,    -1,   201,   202,
     203,   204,    -1,   206,   207,   208,   209,   210,   211,   212,
      -1,   214,    -1,   216,   217,   218,   219,   220,   221,   222,
     223,    -1,   225,    -1,   227,    -1,    -1,   230,    -1,   232,
     233,   234,   235,   236,   237,   238,    -1,    -1,   241,    -1,
     243,    -1,    -1,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,    -1,   277,   278,   279,   280,   281,   282,
      -1,   284,   285,    -1,   287,    -1,   289,   290,   291,   292,
     293,   294,    -1,   296,   297,    -1,    -1,   300,   301,   302,
      -1,    -1,   305,   306,   307,    -1,   309,    -1,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
     323,   324,    -1,    -1,    -1,    -1,   329,   330,   331,    -1,
     333,   334,   335,   336,   337,   338,    -1,   340,   341,   342,
     343,   344,   345,   346,   347,    -1,   349,   350,   351,   352,
     353,   354,   355,   356,    -1,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,   371,    -1,
     373,   374,    -1,   376,   377,   378,   379,   380,   381,   382,
     383,   384,   385,   386,   387,   388,   389,   390,   391,   392,
      -1,    -1,   395,   396,   397,   398,   399,   400,   401,   402,
     403,   404,    -1,    -1,   407,   408,   409,   410,    -1,   412,
     413,   414,   415,   416,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,   427,    -1,    -1,   430,   431,    -1,
     433,    -1,   435,   436,   437,   438,   439,    -1,   441,   442,
     443,    -1,   445,    -1,   447,   448,   449,   450,   451,    -1,
     453,   454,   455,   456,   457,   458,   459,   460,    -1,    -1,
     463,   464,   465,    -1,   467,   468,   469,   470,    -1,   472,
     473,   474,   475,   476,   477,   478,    -1,   480,    -1,   482,
     483,   484,   485,   486,   487,   488,   489,   490,    -1,    -1,
     493,    -1,    -1,   496,   497,   498,   499,   500,   501,   502,
     503,   504,   505,   506,   507,   508,   509,   510,   511,   512,
     513,   514,   515,   516,     3,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    22,    23,    24,    25,    26,    27,    28,
      29,    30,    -1,    32,    33,    34,    -1,    -1,    -1,    -1,
      -1,    40,    -1,    -1,    -1,    -1,    45,    46,    -1,    48,
      49,    50,    -1,    52,    53,    54,    55,    56,    -1,    58,
      59,    -1,    61,    62,    63,    64,    65,    66,    -1,    -1,
      69,    70,    71,    72,    73,    74,    75,    -1,    77,    78,
      79,    80,    81,    -1,    -1,    -1,    85,    86,    87,    88,
      89,    90,    -1,    92,    93,    94,    -1,    96,    97,    98,
      99,   100,   101,    -1,    -1,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
      -1,   120,    -1,   122,   123,   124,   125,   126,   127,    -1,
      -1,   130,   131,   132,   133,   134,    -1,    -1,   137,   138,
     139,   140,   141,   142,   143,    -1,   145,   146,   147,    -1,
     149,   150,   151,    -1,   153,   154,   155,   156,   157,   158,
     159,   160,   161,   162,   163,    -1,   165,    -1,   167,   168,
     169,   170,    -1,   172,    -1,   174,    -1,    -1,    -1,   178,
     179,   180,    -1,   182,    -1,   184,   185,    -1,    -1,   188,
     189,   190,   191,    -1,   193,   194,   195,   196,   197,   198,
     199,    -1,   201,   202,   203,   204,    -1,   206,   207,   208,
     209,   210,   211,   212,    -1,   214,    -1,   216,   217,   218,
     219,   220,   221,   222,   223,    -1,   225,    -1,   227,    -1,
      -1,   230,    -1,   232,   233,   234,   235,   236,   237,   238,
      -1,    -1,   241,    -1,   243,    -1,    -1,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,    -1,   277,   278,
     279,   280,   281,   282,    -1,   284,   285,    -1,   287,    -1,
     289,   290,   291,   292,   293,   294,    -1,   296,   297,    -1,
      -1,   300,   301,   302,    -1,    -1,   305,   306,   307,    -1,
     309,    -1,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,    -1,    -1,    -1,    -1,
     329,   330,   331,    -1,   333,   334,   335,   336,   337,   338,
      -1,   340,   341,   342,   343,   344,   345,   346,   347,    -1,
     349,   350,   351,   352,   353,   354,   355,   356,    -1,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,   371,    -1,   373,   374,    -1,   376,   377,   378,
     379,   380,   381,   382,   383,   384,   385,   386,   387,   388,
     389,   390,   391,   392,    -1,    -1,   395,   396,   397,   398,
     399,   400,   401,   402,   403,   404,    -1,    -1,   407,   408,
     409,   410,    -1,   412,   413,   414,   415,   416,   417,   418,
     419,   420,   421,   422,   423,   424,   425,   426,   427,    -1,
      -1,   430,   431,    -1,   433,    -1,   435,   436,   437,   438,
     439,    -1,   441,   442,   443,    -1,   445,    -1,   447,   448,
     449,   450,   451,    -1,   453,   454,   455,   456,   457,   458,
     459,   460,    -1,    -1,   463,   464,   465,    -1,   467,   468,
     469,   470,    -1,   472,   473,   474,   475,   476,   477,   478,
      -1,   480,    -1,   482,   483,   484,   485,   486,   487,   488,
     489,   490,    -1,    -1,   493,    -1,    -1,   496,   497,   498,
     499,   500,   501,   502,   503,   504,   505,   506,   507,   508,
     509,   510,   511,   512,   513,   514,   515,   516,     3,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    -1,    32,    33,    34,
      -1,    -1,    -1,    -1,    -1,    40,    -1,    42,    -1,    -1,
      45,    46,    -1,    48,    49,    50,    -1,    52,    53,    54,
      55,    56,    -1,    58,    59,    -1,    61,    62,    63,    64,
      65,    66,    -1,    -1,    69,    70,    71,    72,    73,    74,
      75,    -1,    77,    78,    79,    80,    81,    -1,    -1,    -1,
      85,    86,    87,    88,    89,    90,    -1,    92,    93,    94,
      -1,    96,    97,    98,    99,   100,   101,    -1,    -1,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,    -1,   120,    -1,   122,   123,   124,
     125,   126,   127,    -1,    -1,   130,   131,   132,   133,   134,
      -1,    -1,   137,   138,   139,   140,   141,   142,   143,    -1,
     145,   146,   147,    -1,   149,   150,   151,    -1,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,   163,    -1,
     165,    -1,   167,   168,   169,   170,    -1,   172,    -1,   174,
      -1,    -1,    -1,   178,   179,   180,    -1,   182,    -1,   184,
     185,    -1,    -1,   188,   189,   190,   191,    -1,   193,   194,
     195,   196,   197,   198,   199,    -1,   201,   202,   203,   204,
      -1,   206,   207,   208,   209,   210,   211,   212,    -1,   214,
      -1,   216,   217,   218,   219,   220,   221,   222,   223,    -1,
     225,    -1,   227,    -1,    -1,   230,    -1,   232,   233,   234,
     235,   236,   237,   238,    -1,    -1,   241,    -1,   243,    -1,
      -1,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,    -1,   277,   278,   279,   280,   281,   282,    -1,   284,
     285,    -1,   287,    -1,   289,   290,   291,   292,   293,   294,
      -1,   296,   297,    -1,    -1,   300,   301,   302,    -1,    -1,
     305,   306,   307,    -1,   309,    -1,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
      -1,    -1,    -1,    -1,   329,   330,   331,    -1,   333,   334,
     335,   336,   337,   338,    -1,   340,   341,   342,   343,   344,
     345,   346,   347,    -1,   349,   350,   351,   352,   353,   354,
     355,   356,    -1,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,    -1,   373,   374,
      -1,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,    -1,    -1,
     395,   396,   397,   398,   399,    -1,   401,   402,   403,   404,
      -1,    -1,   407,   408,   409,   410,    -1,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,    -1,    -1,   430,   431,    -1,   433,    -1,
     435,   436,   437,   438,   439,    -1,   441,   442,   443,    -1,
     445,    -1,   447,   448,   449,   450,   451,    -1,   453,   454,
     455,   456,   457,   458,   459,   460,    -1,    -1,   463,   464,
     465,    -1,   467,   468,   469,   470,    -1,   472,   473,   474,
     475,   476,   477,   478,    -1,   480,    -1,   482,   483,   484,
     485,   486,   487,   488,   489,   490,    -1,    -1,   493,    -1,
      -1,   496,   497,   498,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    30,
      -1,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,    40,
      -1,    -1,    -1,    -1,    45,    46,    -1,    48,    49,    50,
      -1,    52,    53,    54,    55,    56,    -1,    58,    59,    -1,
      61,    62,    63,    64,    65,    66,    -1,    -1,    69,    70,
      71,    72,    73,    74,    75,    -1,    77,    78,    79,    80,
      81,    -1,    -1,    -1,    85,    86,    87,    88,    89,    90,
      -1,    92,    93,    94,    -1,    96,    97,    98,    99,   100,
     101,    -1,    -1,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,    -1,   120,
      -1,   122,   123,   124,   125,   126,   127,    -1,    -1,   130,
     131,   132,   133,   134,    -1,    -1,   137,   138,   139,   140,
     141,   142,   143,    -1,   145,   146,   147,    -1,   149,   150,
     151,    -1,   153,   154,   155,   156,   157,   158,   159,   160,
     161,   162,   163,    -1,   165,    -1,   167,   168,   169,   170,
      -1,   172,    -1,   174,    -1,    -1,    -1,   178,   179,   180,
      -1,   182,    -1,   184,   185,    -1,    -1,   188,   189,   190,
     191,    -1,   193,   194,   195,   196,   197,   198,   199,    -1,
     201,   202,   203,   204,    -1,   206,   207,   208,   209,   210,
     211,   212,    -1,   214,    -1,   216,   217,   218,   219,   220,
     221,   222,   223,    -1,   225,    -1,   227,    -1,    -1,   230,
      -1,   232,   233,   234,   235,   236,   237,   238,    -1,    -1,
     241,    -1,   243,    -1,    -1,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,    -1,   277,   278,   279,   280,
     281,   282,    -1,   284,   285,    -1,   287,    -1,   289,   290,
     291,   292,   293,   294,    -1,   296,   297,    -1,    -1,   300,
     301,   302,    -1,    -1,   305,   306,   307,    -1,   309,    -1,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,   322,   323,   324,    -1,    -1,    -1,    -1,   329,   330,
     331,    -1,   333,   334,   335,   336,   337,   338,    -1,   340,
     341,   342,   343,   344,   345,   346,   347,    -1,   349,   350,
     351,   352,   353,   354,   355,   356,    -1,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,    -1,   373,   374,    -1,   376,   377,   378,   379,   380,
     381,   382,   383,   384,   385,   386,   387,   388,   389,   390,
     391,   392,    -1,    -1,   395,   396,   397,   398,   399,   400,
     401,   402,   403,   404,    -1,    -1,   407,   408,   409,   410,
      -1,   412,   413,   414,   415,   416,   417,   418,   419,   420,
     421,   422,   423,   424,   425,   426,   427,    -1,    -1,   430,
     431,    -1,   433,    -1,   435,   436,   437,   438,   439,    -1,
     441,   442,   443,    -1,   445,    -1,   447,   448,   449,   450,
     451,    -1,   453,   454,   455,   456,   457,   458,   459,   460,
      -1,    -1,   463,   464,   465,    -1,   467,   468,   469,   470,
      -1,   472,   473,   474,   475,   476,   477,   478,    -1,   480,
      -1,   482,   483,   484,   485,   486,   487,   488,   489,   490,
      -1,    -1,   493,    -1,    -1,   496,   497,   498,   499,   500,
     501,   502,   503,   504,   505,   506,   507,   508,   509,   510,
     511,   512,   513,   514,   515,   516,     3,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    -1,    32,    33,    34,    -1,    -1,
      -1,    -1,    -1,    40,    -1,    -1,    -1,    -1,    45,    46,
      -1,    48,    49,    50,    -1,    52,    53,    54,    55,    56,
      -1,    58,    59,    -1,    61,    62,    63,    64,    65,    66,
      -1,    -1,    69,    70,    71,    72,    73,    74,    75,    -1,
      77,    78,    79,    80,    81,    -1,    -1,    -1,    85,    86,
      87,    88,    89,    90,    -1,    92,    93,    94,    -1,    96,
      97,    98,    99,   100,   101,    -1,    -1,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,   118,    -1,   120,    -1,   122,   123,   124,   125,   126,
     127,    -1,    -1,   130,   131,   132,   133,   134,    -1,    -1,
     137,   138,   139,   140,   141,   142,   143,    -1,   145,   146,
     147,    -1,   149,   150,   151,    -1,   153,   154,   155,   156,
     157,   158,   159,   160,   161,   162,   163,    -1,   165,    -1,
     167,   168,   169,   170,    -1,   172,    -1,   174,    -1,    -1,
      -1,   178,   179,   180,    -1,   182,    -1,   184,   185,    -1,
      -1,   188,   189,   190,   191,    -1,   193,   194,   195,   196,
     197,   198,   199,    -1,   201,   202,   203,   204,    -1,   206,
     207,   208,   209,   210,   211,   212,    -1,   214,    -1,   216,
     217,   218,   219,   220,   221,   222,   223,    -1,   225,    -1,
     227,    -1,    -1,   230,    -1,   232,   233,   234,   235,   236,
     237,   238,    -1,    -1,   241,    -1,   243,    -1,    -1,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,    -1,
     277,   278,   279,   280,   281,   282,    -1,   284,   285,    -1,
     287,    -1,   289,   290,   291,   292,   293,   294,    -1,   296,
     297,    -1,    -1,   300,   301,   302,    -1,    -1,   305,   306,
     307,    -1,   309,    -1,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,   323,   324,    -1,    -1,
      -1,    -1,   329,   330,   331,    -1,   333,   334,   335,   336,
     337,   338,    -1,   340,   341,   342,   343,   344,   345,   346,
     347,    -1,   349,   350,   351,   352,   353,   354,   355,   356,
      -1,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,   370,   371,    -1,   373,   374,    -1,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,   386,
     387,   388,   389,   390,   391,   392,    -1,    -1,   395,   396,
     397,   398,   399,   400,   401,   402,   403,   404,    -1,    -1,
     407,   408,   409,   410,    -1,   412,   413,   414,   415,   416,
     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
     427,    -1,    -1,   430,   431,    -1,   433,    -1,   435,   436,
     437,   438,   439,    -1,   441,   442,   443,    -1,   445,    -1,
     447,   448,   449,   450,   451,    -1,   453,   454,   455,   456,
     457,   458,   459,   460,    -1,    -1,   463,   464,   465,    -1,
     467,   468,   469,   470,    -1,   472,   473,   474,   475,   476,
     477,   478,    -1,   480,    -1,   482,   483,   484,   485,   486,
     487,   488,   489,   490,    -1,    -1,   493,    -1,    -1,   496,
     497,   498,   499,   500,   501,   502,   503,   504,   505,   506,
     507,   508,   509,   510,   511,   512,   513,   514,   515,   516,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,
      23,    24,    25,    26,    27,    28,    29,    30,    -1,    32,
      33,    34,    -1,    -1,    -1,    -1,    -1,    40,    -1,    -1,
      -1,    -1,    45,    46,    -1,    48,    49,    50,    -1,    52,
      53,    54,    55,    56,    -1,    58,    59,    -1,    61,    62,
      63,    64,    65,    66,    -1,    -1,    69,    70,    71,    72,
      73,    74,    75,    -1,    77,    78,    79,    80,    81,    -1,
      -1,    -1,    85,    86,    87,    88,    89,    90,    -1,    92,
      93,    94,    -1,    96,    97,    98,    99,   100,   101,    -1,
      -1,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,   117,   118,    -1,   120,    -1,   122,
     123,   124,   125,   126,   127,    -1,    -1,   130,   131,   132,
     133,   134,    -1,    -1,   137,   138,   139,   140,   141,   142,
     143,    -1,   145,   146,   147,    -1,   149,   150,   151,    -1,
     153,   154,   155,   156,   157,   158,   159,   160,   161,   162,
     163,    -1,   165,    -1,   167,   168,   169,   170,    -1,   172,
      -1,   174,    -1,    -1,    -1,   178,   179,   180,    -1,   182,
      -1,   184,   185,    -1,    -1,   188,   189,   190,   191,    -1,
     193,   194,   195,   196,   197,   198,   199,    -1,   201,   202,
     203,   204,    -1,   206,   207,   208,   209,   210,   211,   212,
      -1,   214,    -1,   216,   217,   218,   219,   220,   221,   222,
     223,    -1,   225,    -1,   227,    -1,    -1,   230,    -1,   232,
     233,   234,   235,   236,   237,   238,    -1,    -1,   241,    -1,
     243,    -1,    -1,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,    -1,   277,   278,   279,   280,   281,   282,
      -1,   284,   285,    -1,   287,    -1,   289,   290,   291,   292,
     293,   294,    -1,   296,   297,    -1,    -1,   300,   301,   302,
      -1,    -1,   305,   306,   307,    -1,   309,    -1,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
     323,   324,    -1,    -1,    -1,    -1,   329,   330,   331,    -1,
     333,   334,   335,   336,   337,   338,    -1,   340,   341,   342,
     343,   344,   345,   346,   347,    -1,   349,   350,   351,   352,
     353,   354,   355,   356,    -1,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,   371,    -1,
     373,   374,    -1,   376,   377,   378,   379,   380,   381,   382,
     383,   384,   385,   386,   387,   388,   389,   390,   391,   392,
      -1,    -1,   395,   396,   397,   398,   399,   400,   401,   402,
     403,   404,    -1,    -1,   407,   408,   409,   410,    -1,   412,
     413,   414,   415,   416,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,   427,    -1,    -1,   430,   431,    -1,
     433,    -1,   435,   436,   437,   438,   439,    -1,   441,   442,
     443,    -1,   445,    -1,   447,   448,   449,   450,   451,    -1,
     453,   454,   455,   456,   457,   458,   459,   460,    -1,    -1,
     463,   464,   465,    -1,   467,   468,   469,   470,    -1,   472,
     473,   474,   475,   476,   477,   478,    -1,   480,    -1,   482,
     483,   484,   485,   486,   487,   488,   489,   490,    -1,    -1,
     493,    -1,    -1,   496,   497,   498,   499,   500,   501,   502,
     503,   504,   505,   506,   507,   508,   509,   510,   511,   512,
     513,   514,   515,   516,     3,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    22,    23,    24,    25,    26,    27,    28,
      29,    30,    -1,    32,    33,    34,    -1,    -1,    -1,    38,
      -1,    40,    -1,    -1,    -1,    44,    45,    46,    -1,    48,
      49,    50,    51,    52,    53,    54,    -1,    56,    57,    58,
      59,    -1,    61,    62,    63,    64,    65,    66,    -1,    -1,
      69,    70,    71,    72,    73,    74,    75,    -1,    77,    78,
      79,    80,    -1,    -1,    83,    -1,    85,    86,    87,    88,
      89,    90,    91,    92,    93,    94,    -1,    96,    97,    98,
      99,   100,   101,    -1,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
      -1,   120,    -1,   122,   123,   124,   125,   126,   127,    -1,
      -1,   130,   131,   132,   133,   134,    -1,    -1,   137,   138,
     139,   140,   141,   142,   143,    -1,   145,   146,   147,    -1,
     149,   150,   151,    -1,   153,   154,   155,   156,    -1,   158,
     159,   160,   161,   162,    -1,    -1,   165,    -1,   167,   168,
     169,   170,    -1,   172,    -1,   174,   175,    -1,   177,   178,
     179,    -1,   181,   182,    -1,   184,   185,    -1,    -1,    -1,
      -1,   190,   191,    -1,   193,   194,   195,   196,   197,   198,
     199,   200,   201,   202,   203,   204,    -1,   206,   207,   208,
     209,   210,   211,   212,    -1,   214,   215,    -1,   217,   218,
     219,   220,   221,   222,   223,    -1,   225,    -1,   227,   228,
     229,   230,   231,   232,   233,   234,   235,   236,   237,   238,
      -1,    -1,   241,   242,   243,   244,    -1,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,   280,   281,    -1,    -1,   284,   285,   286,   287,    -1,
      -1,   290,   291,   292,   293,   294,    -1,   296,   297,    -1,
      -1,   300,   301,   302,    -1,    -1,   305,   306,    -1,   308,
     309,   310,    -1,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,    -1,    -1,    -1,    -1,
     329,   330,    -1,   332,   333,   334,    -1,   336,   337,   338,
      -1,   340,   341,   342,   343,   344,   345,   346,   347,    -1,
     349,   350,   351,   352,   353,   354,   355,   356,    -1,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,   371,    -1,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,   385,   386,   387,   388,
     389,   390,   391,   392,    -1,   394,   395,   396,   397,   398,
     399,   400,   401,   402,   403,   404,    -1,   406,   407,   408,
     409,   410,    -1,   412,   413,   414,   415,   416,   417,   418,
     419,   420,   421,   422,   423,   424,   425,   426,    -1,    -1,
      -1,   430,   431,    -1,   433,   434,   435,   436,   437,   438,
     439,    -1,   441,   442,   443,    -1,   445,    -1,   447,   448,
      -1,   450,    -1,    -1,   453,   454,   455,   456,   457,   458,
     459,   460,   461,    -1,   463,   464,   465,    -1,   467,   468,
     469,   470,    -1,   472,   473,   474,   475,   476,    -1,   478,
      -1,   480,   481,   482,   483,   484,   485,   486,   487,   488,
     489,   490,    -1,    -1,   493,    -1,    -1,   496,   497,   498,
     499,   500,   501,     3,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   513,   514,   515,   516,    -1,    -1,
      -1,    -1,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    -1,    32,    33,    34,    -1,    -1,    -1,    38,    -1,
      40,    -1,    -1,    -1,    44,    45,    46,    -1,    48,    49,
      50,    51,    52,    53,    54,    -1,    56,    57,    58,    59,
      -1,    61,    62,    63,    64,    65,    66,    -1,    -1,    69,
      70,    71,    72,    73,    74,    75,    -1,    77,    78,    79,
      80,    -1,    -1,    83,    -1,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    -1,    96,    97,    98,    99,
     100,   101,    -1,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,    -1,
     120,    -1,   122,   123,   124,   125,   126,   127,    -1,    -1,
     130,   131,   132,   133,   134,    -1,    -1,   137,   138,   139,
     140,   141,   142,   143,    -1,   145,   146,   147,    -1,   149,
     150,   151,    -1,   153,   154,   155,   156,    -1,   158,   159,
     160,   161,   162,    -1,    -1,   165,    -1,   167,   168,   169,
     170,    -1,   172,    -1,   174,   175,    -1,   177,   178,   179,
      -1,   181,   182,    -1,   184,   185,    -1,    -1,    -1,    -1,
     190,   191,    -1,   193,   194,   195,   196,   197,   198,   199,
     200,   201,   202,   203,   204,    -1,   206,   207,   208,   209,
     210,   211,   212,    -1,   214,   215,    -1,   217,   218,   219,
     220,   221,   222,   223,    -1,   225,    -1,   227,   228,   229,
     230,   231,   232,   233,   234,   235,   236,   237,   238,    -1,
      -1,   241,   242,   243,   244,    -1,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
     280,   281,    -1,    -1,   284,   285,   286,   287,    -1,    -1,
     290,   291,   292,   293,   294,    -1,   296,   297,    -1,    -1,
     300,   301,   302,    -1,    -1,   305,   306,    -1,   308,   309,
     310,    -1,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,   323,   324,    -1,    -1,    -1,    -1,   329,
     330,    -1,   332,   333,   334,    -1,   336,   337,   338,    -1,
     340,   341,   342,   343,   344,   345,   346,   347,    -1,   349,
     350,   351,   352,   353,   354,   355,   356,    -1,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
     370,   371,    -1,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,   386,   387,   388,   389,
     390,   391,   392,    -1,   394,   395,   396,   397,   398,   399,
     400,   401,   402,   403,   404,    -1,   406,   407,   408,   409,
     410,    -1,   412,   413,   414,   415,   416,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,    -1,    -1,    -1,
     430,   431,    -1,   433,   434,   435,   436,   437,   438,   439,
      -1,   441,   442,   443,    -1,   445,    -1,   447,   448,    -1,
     450,    -1,    -1,   453,   454,   455,   456,   457,   458,   459,
     460,   461,    -1,   463,   464,   465,    -1,   467,   468,   469,
     470,    -1,   472,   473,   474,   475,   476,    -1,   478,    -1,
     480,   481,   482,   483,   484,   485,   486,   487,   488,   489,
     490,    -1,    -1,   493,    -1,    -1,   496,   497,   498,   499,
     500,   501,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   513,   514,   515,   516,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    30,
      -1,    32,    33,    34,    -1,    -1,    -1,    38,    -1,    40,
      -1,    -1,    -1,    44,    45,    46,    -1,    48,    49,    50,
      51,    52,    53,    54,    -1,    56,    57,    58,    59,    -1,
      61,    62,    63,    64,    65,    66,    -1,    -1,    69,    70,
      71,    72,    73,    74,    75,    -1,    77,    78,    79,    80,
      -1,    -1,    83,    -1,    85,    86,    87,    88,    89,    90,
      91,    92,    93,    94,    -1,    96,    97,    98,    99,   100,
     101,    -1,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,    -1,   120,
      -1,   122,   123,   124,   125,   126,   127,    -1,    -1,   130,
     131,   132,   133,   134,    -1,    -1,   137,   138,   139,   140,
     141,   142,   143,    -1,   145,   146,   147,    -1,   149,   150,
     151,    -1,   153,   154,   155,   156,    -1,   158,   159,   160,
     161,   162,    -1,    -1,   165,    -1,   167,   168,   169,   170,
      -1,   172,    -1,   174,   175,    -1,   177,   178,   179,   180,
     181,   182,    -1,   184,   185,    -1,    -1,    -1,    -1,   190,
     191,    -1,   193,   194,   195,   196,   197,   198,   199,   200,
     201,   202,   203,   204,    -1,   206,   207,   208,   209,   210,
     211,   212,    -1,   214,   215,    -1,   217,   218,   219,   220,
     221,   222,   223,    -1,   225,    -1,   227,   228,   229,   230,
     231,   232,   233,   234,   235,   236,   237,   238,    -1,    -1,
     241,   242,   243,   244,    -1,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     281,    -1,    -1,   284,   285,   286,   287,    -1,    -1,   290,
     291,   292,   293,   294,    -1,   296,   297,    -1,    -1,   300,
     301,   302,    -1,    -1,   305,   306,    -1,   308,   309,   310,
      -1,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,   322,   323,   324,    -1,    -1,    -1,    -1,   329,   330,
      -1,   332,   333,   334,    -1,   336,   337,   338,    -1,   340,
     341,   342,   343,   344,   345,   346,   347,    -1,   349,   350,
     351,   352,   353,   354,   355,   356,    -1,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,    -1,   373,   374,   375,   376,   377,   378,    -1,   380,
     381,   382,   383,   384,   385,   386,   387,   388,   389,   390,
     391,   392,    -1,   394,   395,   396,   397,   398,   399,   400,
      -1,   402,   403,   404,    -1,   406,   407,   408,   409,   410,
      -1,   412,   413,   414,   415,   416,   417,   418,   419,   420,
     421,   422,   423,   424,   425,   426,    -1,    -1,    -1,   430,
     431,    -1,   433,   434,   435,   436,   437,   438,   439,    -1,
     441,   442,   443,    -1,   445,    -1,   447,   448,    -1,   450,
      -1,    -1,   453,   454,   455,   456,   457,   458,   459,   460,
      -1,    -1,   463,   464,   465,    -1,   467,   468,   469,   470,
      -1,   472,   473,   474,   475,   476,    -1,   478,    -1,   480,
     481,   482,   483,   484,   485,   486,   487,   488,   489,   490,
      -1,    -1,   493,    -1,    -1,   496,   497,   498,   499,   500,
     501,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   513,   514,   515,   516,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    -1,
      32,    33,    34,    -1,    -1,    -1,    -1,    -1,    40,    -1,
      -1,    -1,    -1,    45,    46,    -1,    48,    49,    50,    -1,
      52,    53,    54,    55,    56,    -1,    58,    59,    -1,    61,
      62,    63,    64,    65,    66,    -1,    -1,    69,    70,    71,
      72,    73,    74,    75,    -1,    77,    78,    79,    80,    81,
      -1,    -1,    -1,    85,    86,    87,    88,    89,    90,    -1,
      92,    93,    94,    -1,    96,    97,    98,    99,   100,   101,
      -1,    -1,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,    -1,   120,    -1,
     122,   123,   124,   125,   126,   127,    -1,    -1,   130,   131,
     132,   133,   134,    -1,    -1,   137,   138,   139,   140,   141,
     142,   143,    -1,   145,   146,   147,    -1,   149,   150,   151,
      -1,   153,   154,   155,   156,   157,   158,   159,   160,   161,
     162,   163,    -1,   165,    -1,   167,   168,   169,   170,    -1,
     172,    -1,   174,    -1,    -1,    -1,   178,   179,   180,    -1,
     182,    -1,   184,   185,    -1,    -1,   188,   189,    -1,   191,
      -1,   193,   194,   195,   196,   197,   198,   199,    -1,   201,
     202,   203,   204,    -1,   206,   207,   208,   209,   210,   211,
     212,    -1,   214,    -1,   216,   217,   218,   219,   220,   221,
     222,   223,    -1,   225,    -1,   227,    -1,    -1,   230,    -1,
     232,   233,   234,   235,   236,   237,   238,    -1,    -1,   241,
      -1,   243,    -1,    -1,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,    -1,   277,   278,   279,   280,   281,
     282,    -1,   284,   285,    -1,   287,    -1,   289,   290,   291,
     292,   293,   294,    -1,   296,   297,    -1,    -1,   300,   301,
     302,    -1,    -1,   305,   306,   307,    -1,   309,    -1,   311,
     312,   313,   314,   315,   316,   317,    -1,   319,   320,   321,
     322,   323,   324,    -1,    -1,    -1,    -1,   329,   330,   331,
      -1,   333,   334,   335,   336,   337,   338,    -1,   340,   341,
     342,   343,   344,   345,   346,   347,    -1,   349,    -1,   351,
     352,   353,   354,   355,   356,    -1,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
      -1,   373,   374,    -1,   376,   377,   378,   379,    -1,   381,
     382,   383,   384,   385,   386,   387,   388,   389,   390,   391,
     392,    -1,    -1,   395,   396,   397,   398,   399,   400,   401,
     402,   403,   404,    -1,    -1,   407,   408,   409,   410,    -1,
     412,   413,   414,   415,   416,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,    -1,    -1,   430,   431,
      -1,   433,    -1,   435,   436,   437,   438,   439,    -1,   441,
     442,   443,    -1,   445,    -1,   447,   448,   449,   450,   451,
      -1,   453,   454,   455,   456,   457,   458,   459,   460,    -1,
      -1,   463,   464,   465,    -1,   467,   468,   469,   470,    -1,
     472,   473,   474,   475,   476,   477,   478,    -1,   480,    -1,
     482,   483,   484,   485,   486,   487,   488,   489,   490,    -1,
      -1,   493,    -1,    -1,   496,   497,   498,   499,   500,   501,
     502,   503,   504,   505,   506,   507,   508,   509,   510,   511,
     512,   513,   514,   515,   516,     3,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    -1,    32,    33,    34,    -1,    -1,    -1,
      38,    -1,    40,    -1,    -1,    -1,    44,    45,    46,    -1,
      48,    49,    50,    51,    52,    53,    54,    -1,    56,    57,
      58,    59,    -1,    61,    62,    63,    64,    65,    66,    -1,
      -1,    69,    70,    71,    72,    73,    74,    75,    -1,    77,
      78,    79,    80,    -1,    -1,    83,    -1,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    -1,    96,    97,
      98,    99,   100,   101,    -1,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,    -1,   120,    -1,   122,   123,   124,   125,   126,   127,
      -1,    -1,   130,   131,   132,   133,   134,    -1,    -1,   137,
     138,   139,   140,   141,   142,   143,    -1,   145,   146,   147,
      -1,   149,   150,   151,    -1,   153,   154,   155,   156,    -1,
     158,   159,   160,   161,   162,    -1,    -1,   165,    -1,   167,
     168,   169,   170,    -1,   172,    -1,   174,   175,    -1,   177,
     178,   179,    -1,   181,   182,    -1,   184,   185,    -1,    -1,
      -1,    -1,   190,   191,    -1,   193,   194,   195,   196,   197,
     198,   199,   200,   201,   202,   203,   204,    -1,   206,   207,
     208,   209,   210,   211,   212,    -1,   214,   215,    -1,   217,
     218,   219,   220,   221,   222,   223,    -1,   225,    -1,   227,
     228,   229,   230,   231,   232,   233,   234,   235,   236,   237,
     238,    -1,    -1,   241,   242,   243,   244,    -1,   246,   247,
     248,   249,   250,   251,   252,   253,    -1,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,   280,   281,    -1,    -1,   284,   285,   286,   287,
      -1,    -1,   290,   291,   292,   293,   294,    -1,   296,   297,
      -1,    -1,   300,   301,   302,    -1,    -1,   305,   306,    -1,
     308,   309,   310,    -1,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323,   324,    -1,    -1,    -1,
      -1,   329,   330,    -1,   332,   333,   334,    -1,   336,   337,
     338,    -1,   340,   341,   342,   343,   344,   345,   346,   347,
      -1,   349,   350,   351,   352,   353,   354,   355,   356,    -1,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,   371,    -1,   373,   374,   375,   376,   377,
     378,    -1,   380,   381,   382,   383,   384,   385,   386,   387,
     388,   389,   390,   391,   392,    -1,   394,   395,   396,   397,
     398,   399,   400,    -1,   402,   403,   404,    -1,   406,   407,
     408,   409,   410,    -1,   412,   413,   414,   415,   416,   417,
     418,   419,   420,   421,   422,   423,   424,    -1,   426,    -1,
      -1,    -1,   430,   431,    -1,   433,   434,   435,   436,   437,
     438,   439,    -1,   441,   442,   443,    -1,   445,    -1,   447,
     448,    -1,   450,    -1,    -1,   453,   454,   455,   456,   457,
     458,   459,   460,    -1,    -1,   463,   464,   465,    -1,   467,
     468,   469,   470,    -1,   472,   473,   474,   475,   476,    -1,
     478,    -1,   480,   481,   482,   483,   484,   485,   486,   487,
     488,   489,   490,    -1,    -1,   493,    -1,    -1,   496,   497,
     498,   499,   500,   501,     3,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   513,   514,   515,   516,    -1,
      -1,    -1,    -1,    22,    23,    24,    25,    -1,    27,    28,
      29,    30,    -1,    32,    33,    34,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    45,    46,    -1,    48,
      49,    50,    -1,    52,    53,    54,    55,    56,    -1,    58,
      59,    -1,    61,    62,    63,    64,    65,    66,    -1,    -1,
      69,    70,    71,    72,    73,    74,    75,    -1,    77,    78,
      79,    80,    81,    -1,    -1,    -1,    -1,    86,    87,    88,
      89,    90,    -1,    92,    93,    94,    -1,    96,    97,    98,
      99,   100,    -1,    -1,    -1,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
      -1,   120,    -1,   122,   123,   124,   125,   126,   127,    -1,
      -1,    -1,   131,   132,   133,   134,    -1,    -1,   137,   138,
     139,   140,   141,    -1,    -1,    -1,   145,   146,   147,    -1,
     149,   150,   151,    -1,   153,   154,   155,   156,   157,   158,
     159,   160,   161,   162,   163,    -1,   165,    -1,   167,   168,
     169,   170,    -1,   172,    -1,   174,    -1,    -1,    -1,   178,
     179,   180,    -1,   182,    -1,   184,    -1,    -1,    -1,   188,
     189,    -1,   191,    -1,   193,   194,   195,   196,   197,   198,
     199,    -1,   201,   202,   203,   204,    -1,   206,   207,   208,
     209,   210,   211,   212,    -1,   214,    -1,   216,   217,   218,
     219,   220,   221,   222,   223,    -1,   225,    -1,   227,    -1,
      -1,   230,    -1,   232,    -1,   234,   235,   236,   237,   238,
      -1,    -1,   241,    -1,   243,    -1,    -1,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,    -1,   277,   278,
     279,   280,    -1,   282,    -1,   284,   285,    -1,   287,    -1,
     289,   290,   291,   292,   293,   294,    -1,   296,   297,    -1,
      -1,   300,   301,   302,    -1,    -1,   305,   306,   307,    -1,
     309,    -1,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,    -1,    -1,   323,   324,    -1,    -1,    -1,    -1,
     329,   330,   331,    -1,   333,   334,   335,   336,   337,   338,
      -1,   340,   341,   342,   343,   344,    -1,    -1,   347,    -1,
     349,   350,   351,   352,   353,   354,   355,   356,    -1,   358,
     359,   360,    -1,   362,   363,   364,   365,   366,   367,   368,
     369,   370,   371,    -1,   373,   374,    -1,   376,   377,   378,
     379,   380,   381,   382,   383,   384,   385,   386,   387,   388,
     389,   390,   391,   392,    -1,    -1,   395,   396,   397,   398,
     399,   400,   401,   402,   403,    -1,    -1,    -1,    -1,   408,
     409,   410,    -1,    -1,   413,   414,   415,   416,   417,   418,
     419,   420,   421,   422,   423,   424,   425,   426,   427,    -1,
      -1,   430,   431,    -1,   433,    -1,   435,   436,   437,   438,
     439,    -1,   441,   442,   443,    -1,    -1,    -1,   447,   448,
     449,   450,   451,    -1,   453,   454,   455,   456,   457,   458,
     459,   460,    -1,    -1,   463,   464,   465,    -1,   467,   468,
     469,   470,    -1,   472,   473,   474,   475,   476,   477,   478,
      -1,   480,    -1,   482,    -1,   484,   485,   486,   487,    -1,
     489,   490,    -1,    -1,   493,    -1,    -1,   496,   497,   498,
     499,   500,   501,   502,   503,   504,   505,   506,   507,   508,
     509,   510,   511,   512,   513,   514,   515,   516,    22,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    33,
      -1,    35,    36,    -1,    -1,    22,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    33,    -1,    -1,    -1,
      54,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    63,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    54,    -1,    -1,
      -1,    -1,    -1,    77,    -1,    -1,    63,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    88,    -1,    -1,    -1,    -1,    -1,
      77,    -1,    -1,    -1,    -1,    -1,   100,    -1,   102,    -1,
      -1,    88,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   113,
      -1,    -1,    -1,   100,    -1,   102,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   128,   129,   113,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   140,    -1,    -1,    -1,
      -1,   128,   129,    -1,   148,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   156,   140,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   148,    -1,    -1,    -1,    -1,    -1,    -1,   172,   156,
      -1,    -1,   176,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   172,    -1,    -1,    -1,   176,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   220,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   220,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   247,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     247,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   325,   326,   327,    -1,    -1,    -1,    -1,    -1,   333,
      -1,    -1,   336,    -1,    -1,    -1,    -1,    -1,   325,   326,
     327,    -1,    -1,    -1,    -1,    -1,   333,    -1,    -1,   336,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   368,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   377,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   368,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   393,
     377,    -1,    -1,    -1,    -1,    -1,   400,    -1,    -1,    -1,
      -1,   405,    -1,    -1,    -1,    -1,   393,    -1,    -1,    -1,
      -1,    -1,   416,   400,    -1,    -1,    -1,    -1,   405,    -1,
      -1,    -1,    -1,    -1,   428,    -1,    -1,    -1,   432,   416,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   428,    -1,    -1,    -1,   432,    -1,    -1,    -1,   453,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   466,    -1,    -1,    -1,   453,    -1,   472,    -1,
      -1,    -1,    -1,   477,    -1,    -1,    -1,   481,    -1,   466,
      -1,    -1,    -1,    -1,    -1,   472,    -1,    -1,    -1,    -1,
     477,   495,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   495,    -1,
      -1,    -1,    -1,    -1,    -1,   519,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   533,
      -1,    -1,   519,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   533
};

/* YYSTOS[STATE-NUM] -- The symbol kind of the accessing symbol of
   state STATE-NUM.  */
static const yytype_int16 yystos[] =
{
       0,    22,    33,    35,    36,    49,    54,    63,    77,    86,
      88,   100,   102,   113,   128,   129,   131,   140,   148,   156,
     158,   159,   172,   176,   204,   220,   247,   325,   326,   327,
     333,   336,   368,   377,   393,   400,   405,   416,   428,   432,
     453,   466,   469,   472,   477,   495,   519,   533,   548,   549,
     550,   551,   552,   559,   570,   571,   572,   575,   576,   578,
     589,   607,   655,   667,   670,   673,   677,   679,   682,   683,
     687,   693,   695,   699,   706,   710,   711,   712,   719,   724,
     740,   744,   748,   769,   804,   805,   808,   810,   811,   812,
     813,   815,   817,   818,   822,   875,   876,  1043,  1045,  1046,
    1047,  1052,  1055,  1061,  1062,  1063,  1067,   447,   498,  1044,
     209,   384,   395,   432,   484,   110,   198,   573,  1044,     3,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    32,
      33,    34,    40,    44,    45,    46,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    58,    59,    61,    62,
      63,    64,    65,    66,    69,    70,    71,    72,    73,    74,
      75,    77,    78,    79,    80,    81,    83,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    96,    97,    98,
      99,   100,   101,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,   120,
     122,   123,   124,   125,   126,   127,   130,   131,   132,   133,
     134,   137,   138,   139,   140,   141,   142,   143,   145,   146,
     147,   149,   150,   151,   153,   154,   155,   156,   157,   158,
     159,   160,   161,   162,   163,   165,   167,   168,   169,   170,
     172,   174,   175,   177,   178,   179,   180,   181,   182,   184,
     185,   188,   189,   190,   191,   193,   194,   195,   196,   197,
     198,   199,   200,   201,   202,   203,   204,   206,   207,   208,
     209,   210,   211,   212,   214,   215,   216,   217,   218,   219,
     220,   221,   222,   223,   225,   227,   228,   229,   230,   231,
     232,   233,   234,   235,   236,   237,   238,   241,   242,   243,
     244,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   284,   285,
     286,   287,   289,   290,   291,   292,   293,   294,   296,   297,
     300,   301,   302,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,   323,   324,   329,   330,   331,   332,   333,   334,   335,
     336,   337,   338,   340,   341,   342,   343,   344,   345,   346,
     347,   349,   350,   351,   352,   353,   354,   355,   356,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,   386,   387,   388,   389,
     390,   391,   392,   395,   396,   397,   398,   399,   400,   401,
     402,   403,   404,   406,   407,   408,   409,   410,   412,   413,
     414,   415,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,   430,   431,   433,   434,   435,   436,
     437,   438,   439,   441,   442,   443,   445,   447,   448,   449,
     450,   451,   453,   454,   455,   456,   457,   458,   459,   460,
     463,   464,   465,   467,   468,   469,   470,   472,   473,   474,
     475,   476,   477,   478,   480,   481,   482,   483,   484,   485,
     486,   487,   488,   489,   490,   493,   496,   497,   498,   499,
     500,   501,   502,   503,   504,   505,   506,   507,   508,   509,
     510,   511,   512,   513,   514,   515,   516,   582,   658,   659,
     660,   665,   952,  1032,  1036,     3,   180,   254,   425,   577,
     582,   658,   665,   298,  1044,    57,   176,   533,   602,   182,
     248,   303,   324,   346,   384,   436,   438,   456,   462,   465,
     653,   675,   718,     5,    31,   336,   582,   583,  1031,     3,
      31,    35,    36,    37,    38,    39,    41,    42,    43,    44,
      47,    51,    55,    56,    57,    58,    59,    60,    67,    68,
      73,    74,    76,    81,    82,    83,    84,    85,    91,    95,
     102,   103,   110,   114,   117,   119,   121,   128,   129,   135,
     136,   144,   148,   152,   157,   163,   164,   166,   169,   171,
     173,   175,   176,   177,   180,   181,   183,   186,   187,   188,
     189,   192,   200,   205,   213,   215,   216,   222,   223,   224,
     225,   226,   228,   229,   231,   239,   240,   242,   244,   245,
     254,   275,   276,   277,   282,   283,   286,   288,   289,   291,
     295,   298,   299,   303,   304,   307,   308,   310,   311,   325,
     326,   327,   328,   331,   332,   335,   339,   348,   352,   357,
     372,   375,   379,   393,   394,   401,   405,   406,   409,   411,
     425,   427,   428,   429,   432,   434,   440,   442,   443,   444,
     446,   449,   451,   452,   455,   461,   462,   466,   471,   477,
     478,   479,   481,   491,   492,   494,   495,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   588,   658,
     662,   664,   665,    24,    83,    99,   151,   161,   173,   178,
     209,   253,   257,   330,   346,   347,   381,   384,   395,   398,
     418,   432,   438,   439,   450,   456,   484,   675,   688,   689,
     692,  1044,  1031,   102,   140,   481,   533,   551,   552,   559,
     575,   576,   589,   607,   655,   667,   670,   677,   679,   682,
     683,   687,   695,   702,   706,   712,   719,   740,   804,   805,
     808,   810,  1043,  1045,  1047,  1052,  1055,  1061,  1067,   110,
      77,   220,    68,    81,    83,   163,   186,   239,   289,   299,
     311,   331,   380,   427,   449,   451,   455,   477,   533,   581,
     582,   583,   811,   876,   878,   880,   890,   897,   898,   952,
     954,   955,   110,     5,   582,   584,   741,   741,   582,  1031,
      31,   182,   248,   399,   442,   447,   582,  1053,  1054,  1065,
    1044,    31,   135,   831,   832,   182,   248,   384,   399,   442,
    1056,  1057,  1065,  1044,   533,   582,   810,   822,  1066,   582,
     897,   432,   828,   581,   177,   533,  1049,   533,   355,   823,
     824,  1031,   823,     3,    55,    56,    58,    59,    73,    74,
      81,   114,   117,   157,   163,   169,   180,   188,   189,   216,
     222,   223,   225,   254,   275,   277,   282,   289,   291,   307,
     311,   331,   335,   352,   379,   401,   409,   425,   427,   442,
     443,   449,   451,   455,   477,   478,   502,   503,   504,   505,
     506,   507,   508,   509,   510,   511,   512,   658,   666,   743,
     811,   812,  1061,     0,   536,   481,   700,   124,   219,   468,
     152,   224,   304,   461,   834,   835,   880,   880,   811,   813,
     815,   537,    31,   442,   447,   810,  1066,   198,   581,  1031,
     198,   581,   198,   897,   198,   581,   283,   584,   531,   535,
     585,   586,   533,    84,   110,   178,   209,   253,   384,   395,
     432,   456,   484,   580,   110,   810,   581,   436,   438,   436,
     438,   366,   185,   198,   581,   581,   178,   253,   355,   395,
     432,   484,   668,   391,   209,    31,  1031,   198,   588,   259,
     450,   109,   432,   432,   484,   185,   388,   391,   198,   582,
     690,  1038,   198,  1028,  1031,   198,  1031,   533,   698,   303,
     438,   702,     3,   477,   658,   662,   665,   703,   705,   706,
     708,   709,   700,   582,   584,   577,   741,   533,   533,   171,
     533,   533,   769,   811,   898,   533,   533,   581,   533,   533,
     176,   533,   533,   533,   533,   811,   876,   880,   890,   526,
     585,    42,   582,   891,   892,   891,   393,   537,   814,    38,
      44,   103,   177,   215,   231,   242,   276,   325,   332,   375,
     394,   466,   894,   892,    42,   582,   891,   893,   519,   902,
     584,   176,   522,   533,   533,   806,  1054,  1054,  1054,   516,
     230,   535,   298,     4,     6,     7,     8,     9,    10,    41,
      56,    58,    59,    67,    73,    74,    85,   114,   117,   119,
     139,   157,   164,   169,   188,   189,   222,   223,   225,   254,
     275,   277,   283,   288,   291,   300,   352,   379,   409,   442,
     443,   452,   478,   517,   524,   525,   526,   531,   533,   539,
     540,   545,   546,   582,   584,   811,   865,   914,   917,   920,
     921,   922,   924,   925,   926,   927,   929,   930,   945,   947,
     948,   949,   950,   951,   952,   953,   955,   956,   971,   972,
     983,  1005,  1010,  1018,  1019,  1020,  1032,  1033,  1034,  1017,
    1019,  1056,  1056,   584,  1056,   516,   176,   444,   522,   535,
     585,   684,   897,     3,   175,   177,   481,   706,  1048,  1050,
     175,  1051,   945,   989,   990,   823,   537,   533,  1040,   256,
     534,   534,   534,   550,   581,   176,   303,   727,   684,    31,
     135,   829,   829,    61,   829,   166,   171,   245,   295,   840,
     842,   843,   868,   870,   871,   872,   187,   298,   471,   298,
     834,   835,   533,   433,  1064,   516,   230,   157,    27,    33,
     140,   302,   364,   368,   400,   474,   564,   567,   568,   364,
     157,    42,    62,   108,   208,   258,   268,   280,   313,   364,
     370,   395,   400,   416,   553,   556,   567,   157,   364,   400,
     567,   157,   364,   400,   567,   157,    42,   574,   945,  1011,
     587,   588,   586,     3,    31,    38,    44,    51,    57,    83,
      85,    91,   103,   135,   175,   177,   180,   181,   200,   215,
     228,   229,   231,   242,   244,   254,   276,   286,   308,   310,
     332,   375,   394,   406,   425,   434,   455,   479,   481,   534,
     658,   663,   665,   945,   992,   993,  1035,  1041,   945,   432,
     581,   582,   534,   533,   642,   346,   384,   653,   675,   581,
     283,   671,    42,   484,   198,   581,   198,   581,   657,   198,
     581,   198,   581,   198,   582,   674,    91,   715,   157,   499,
     581,    92,   132,   316,   437,   198,   582,   157,   535,  1039,
      65,   371,   537,   691,   157,   537,   691,   157,   298,   696,
     697,   945,  1041,   366,   534,   537,     4,   164,   298,   452,
     524,   525,   555,   558,   584,   701,   703,   704,   707,  1034,
     702,   444,   533,   597,   601,   176,   945,   990,   533,     3,
      70,    71,   111,   112,   115,   116,   195,   196,   260,   261,
     262,   263,   264,   265,   266,   267,   270,   271,   389,   390,
     489,   490,   513,   514,   584,   932,   933,   934,   935,   936,
     937,   938,   939,   940,   941,   942,   943,   995,   996,   477,
     892,   893,   945,   581,   945,   997,   524,   525,   582,   946,
     947,   972,   983,   999,   533,   945,   989,  1000,   945,    60,
     176,   240,   446,   945,   990,  1003,   945,   534,   583,   533,
     434,   848,   849,   849,   831,   832,   880,   226,   826,    38,
     231,   394,   894,   231,   308,   895,   880,   895,   231,   894,
     533,   231,   895,   153,   206,   882,   231,   849,   533,   583,
     533,   849,   305,   582,   584,   742,   945,  1058,  1060,   992,
       3,    38,    44,    51,    56,    57,    58,    59,    73,    74,
      83,    85,    91,   103,   114,   117,   169,   175,   177,   181,
     200,   215,   222,   223,   225,   228,   229,   231,   242,   244,
     254,   275,   276,   277,   286,   291,   308,   310,   332,   352,
     375,   379,   394,   401,   406,   409,   425,   434,   442,   443,
     455,   461,   478,   481,   658,   661,   665,   908,   910,   911,
     913,   915,   917,   919,   921,   922,   923,   925,   926,   929,
     930,   994,  1037,    42,   243,   582,   533,   531,   811,   480,
     928,   945,  1009,   928,   928,   533,   533,   916,   916,   335,
     811,   533,   918,   540,    73,    74,   928,   945,   916,   533,
     533,   497,   519,   533,   931,   533,   931,   945,   945,   945,
     153,  1021,  1022,   945,   990,   991,   811,   945,   989,   583,
     973,   974,   975,     9,   588,   535,   585,  1012,   585,   533,
     584,   533,   533,   584,  1034,     3,     8,    11,    15,    16,
      17,    18,    19,    20,    21,    37,    42,    48,    55,    82,
     181,   200,   205,   228,   229,   244,   283,   286,   300,   303,
     406,   517,   520,   521,   522,   524,   525,   526,   527,   528,
     529,   981,   982,   983,   985,  1015,   496,   957,   310,   945,
     537,   826,   533,   584,   826,     3,   119,   248,   555,   584,
     930,  1059,   106,  1060,  1060,   582,    42,   582,   534,   537,
     700,   537,   534,   824,  1028,  1029,    42,   743,   773,   777,
     778,  1040,   684,   199,   366,   226,   400,   813,   813,    31,
     836,   837,   945,    61,   813,   830,   168,   279,   856,   234,
     280,   351,   403,   468,     4,     9,    31,   851,   945,   524,
     525,   852,   853,   945,   947,   868,   869,   843,   842,   840,
     841,   171,   871,   293,   873,    61,   819,   820,   821,   883,
     946,  1019,  1019,   840,   868,   990,   243,   581,    76,    84,
      95,   173,   198,   339,   462,   582,   624,   634,   649,    84,
      95,   809,    95,   809,   533,   444,   533,   622,   252,   465,
     622,    95,   537,   444,   581,     3,   913,   555,    61,   557,
     555,   555,   108,   258,   268,    61,   444,   495,   519,   554,
     273,   384,   554,   556,   897,    95,   444,   809,   384,   581,
     444,   384,   573,   582,   597,   532,   544,   992,   992,   993,
     537,   834,   835,    13,    14,   228,   228,   444,   444,   582,
     641,   646,   495,   600,   185,   581,   355,   395,   432,   484,
     668,   391,   281,   483,   745,   157,   102,   607,   672,   677,
     712,  1067,   149,   910,   581,   283,   553,   678,   283,   533,
     642,    42,   283,   642,   283,   533,   669,   283,   205,   676,
     198,   582,   636,   716,   588,   691,   157,   176,   694,   690,
     587,   535,  1038,  1028,  1031,  1031,  1038,   534,   537,    13,
     702,   708,     4,  1034,     4,  1034,   584,   588,   599,   606,
      57,   104,   125,   146,   150,   172,   175,   193,   288,   296,
     318,   349,   603,   742,    42,   534,   945,   534,   176,   537,
     534,   328,   998,   534,   946,   946,    11,    15,    16,    19,
      20,    21,   205,   228,   300,   520,   521,   522,   524,   525,
     526,   527,   528,   529,   983,   946,   534,   899,   900,   954,
     171,   176,  1001,  1002,   537,   534,    42,  1003,   990,  1003,
    1003,   176,   534,    42,   891,   533,  1029,     4,     9,   582,
     844,   846,   847,  1019,  1017,   182,   248,   432,   436,   438,
     465,   581,   827,   492,   903,   880,   231,   880,   298,   471,
     896,   880,   231,  1019,   880,   290,   290,   533,   880,   583,
     904,   905,   533,   583,   904,   537,   534,   537,   535,   533,
     913,   533,   533,   535,    41,   912,   533,   932,   933,   934,
     935,   936,   937,   938,   939,   940,   941,   942,   943,   944,
     534,   537,   916,   589,   683,   719,   807,   810,  1045,  1061,
     990,   991,   533,   491,  1006,  1007,   945,   991,  1034,   945,
     976,   977,   978,   979,   928,   928,     8,    15,    16,    19,
      20,    21,   520,   521,   522,   524,   525,   526,   527,   528,
     529,   582,   981,   986,   534,   990,   442,   442,  1034,  1034,
     533,   582,   366,  1026,   171,   532,   534,   537,   544,   537,
     541,   526,   586,   990,  1034,   945,   944,   944,   910,   945,
     945,   945,   945,   945,   945,   945,   945,     5,   588,  1042,
     442,    47,   429,  1016,  1038,   945,   945,   533,   811,  1004,
     135,   164,   283,   288,   293,   452,   463,   945,   288,   533,
     945,   444,    55,   181,   200,   205,   244,   406,   945,   945,
     945,   945,   945,   945,   945,   945,   945,   945,    31,    39,
     411,   980,   531,   535,  1014,   187,   167,   958,   379,   533,
     972,  1020,   176,   877,   992,   877,   533,   584,   582,   581,
    1048,   570,   581,   945,   537,   534,   257,   283,   825,   522,
      31,    39,   404,   776,   233,   537,   770,   471,   686,   581,
     721,   533,   582,   726,   736,   737,   739,    43,   128,   838,
     537,   471,   838,   273,   813,   379,   380,   524,   525,   853,
     855,   947,   403,   234,   299,   323,   323,   537,   528,     4,
     854,  1034,   854,   379,   380,   855,   581,  1027,   287,   408,
     874,   533,  1029,  1030,   537,   187,   471,   205,   187,   226,
     869,   841,   534,   364,   567,   533,   198,   634,  1031,   234,
     283,   234,   471,   533,   627,   909,   910,  1031,   582,   198,
    1031,   198,   582,    27,   140,   400,   563,   566,   588,   618,
     632,  1031,   588,   626,   645,  1031,   564,  1031,   364,   400,
     553,   567,   555,  1038,  1031,   555,  1038,  1031,   555,   364,
     400,   567,  1031,  1031,  1031,  1031,   364,   400,   567,  1031,
    1031,   584,   525,   945,  1011,   834,   834,   834,   479,   993,
     199,   369,   833,   945,   945,   288,   579,   584,   288,   579,
     582,   344,   596,   534,   537,   296,   176,   444,   591,   581,
     671,   484,   581,   581,   657,   581,   581,   674,   433,   581,
     303,   653,   533,   811,   533,   157,   157,   244,   582,   624,
     634,   637,   640,   650,   652,   495,   497,   629,   156,   810,
     157,   495,   717,   157,   534,   992,    42,   157,     3,   533,
     283,   298,   582,     3,   691,   587,   691,   298,   691,   696,
     945,   597,   526,   533,   555,   598,   707,   951,   534,   537,
      42,   595,   584,   595,   283,   288,   349,   595,    61,   595,
     910,   534,   945,   945,   945,  1001,   910,   946,   946,   946,
     946,   946,   946,   135,   283,   293,   946,   946,   946,   946,
     946,   946,   946,   946,   946,   946,   534,   537,    42,   901,
     945,   945,  1002,  1001,   910,   534,   534,   534,   990,   910,
    1029,   534,   323,   528,   323,   380,   528,   533,   533,   826,
     436,   438,   436,   438,   581,   828,   828,   828,   945,   187,
     857,   896,   880,   945,   533,   880,   171,   533,   583,   887,
     896,   910,   534,   537,   904,   534,  1058,     3,   994,    41,
     912,   582,   907,   907,     3,   531,   531,  1034,   444,   444,
     444,   444,   910,   534,   532,   990,   945,   144,  1007,  1008,
     534,   534,   534,   544,   537,   541,   535,   534,   534,   516,
     516,   534,   534,  1029,   533,   945,  1023,   582,   945,   945,
     973,  1022,   534,   534,   534,   516,   946,   946,   150,   990,
     176,   135,   164,   288,   293,   452,   463,   533,   150,   986,
     945,   429,  1016,   945,  1004,   945,   444,   533,   811,   945,
    1011,   587,   533,   533,   160,   959,   878,   879,   903,   834,
     903,  1034,   944,  1040,  1040,   257,   533,    26,   321,   322,
     404,   407,   445,   488,   771,   774,     9,   404,   775,     9,
      17,   520,   525,   531,   533,   786,   787,   788,   789,   796,
     797,   798,   801,   802,   776,   778,   492,   766,   879,   492,
     685,    42,    61,   722,   732,   739,  1012,   537,   877,   522,
     518,   839,   837,   300,   981,   984,   839,     4,  1034,   855,
     299,   468,   852,   537,   251,  1029,   819,    61,  1019,   533,
     583,    61,   273,   444,   945,   283,   649,   533,   157,   533,
     627,   209,   646,   647,   608,    42,   180,   617,   643,   608,
      27,   140,   368,   370,   400,   560,   561,   562,   568,   569,
     157,   691,   157,   691,   618,   632,   618,   534,   537,   584,
     611,   522,   535,   534,   537,   444,   384,    95,   444,   809,
     384,   444,   444,   444,   384,   574,   544,   532,   544,   833,
     833,   833,   993,   290,   290,   534,   533,   590,     3,   419,
     420,   584,   605,   641,   596,   745,   581,   678,   533,    42,
     642,   669,   676,   533,   671,   366,   432,   584,   680,   681,
     646,   581,   581,   657,   581,   534,   537,   296,   622,   296,
     298,   621,  1031,   495,   656,   581,   622,    42,   581,   534,
     432,   945,   674,   606,   157,   581,   694,  1038,   593,   604,
     707,   599,   584,   584,   288,   646,   526,   646,   584,   526,
     646,   584,   534,   534,  1002,   176,   135,   293,   533,   902,
     899,   533,   534,   534,   534,   582,   844,   903,   828,   828,
     828,   828,   581,   581,   581,    61,   192,   866,   896,  1029,
     533,   884,   885,   886,   948,   950,  1029,   171,    82,   906,
     905,   534,   534,   531,   910,   534,   537,   534,  1034,   532,
    1034,   534,   933,   935,   936,   937,   936,   937,   937,   534,
     440,   945,   148,   945,   976,   986,   931,   931,   534,   945,
    1023,  1024,  1025,    42,   205,   534,  1026,   944,   945,    37,
      37,   945,   534,   945,   176,   533,   994,   945,   534,   150,
     946,   946,   150,   150,   945,   945,   532,   544,   533,  1013,
     835,   492,   945,   309,   963,   537,   857,   833,   857,   534,
     807,   771,   774,   771,   771,   771,   774,   774,   774,   525,
     796,   521,   531,   773,   785,   743,   799,   800,   788,   788,
     538,   779,   800,   524,   526,   539,   540,   781,   283,   517,
     524,   525,   803,   947,   972,    85,   768,   945,   372,   730,
     582,   273,   331,   119,   312,   533,   720,   810,   534,   537,
     726,   685,   945,   168,   238,   533,   839,   299,   581,   534,
    1030,   187,   811,   812,  1019,  1030,  1031,  1031,   534,   157,
     647,   634,   647,   608,   636,   537,   534,   121,   213,   280,
     283,   633,   533,    34,    61,   654,   643,    76,    82,    95,
     119,   121,   213,   283,   288,   339,   357,   462,   471,   613,
     614,   628,   180,   119,   197,   283,   622,   554,   109,   119,
     180,   283,   418,   421,   556,   622,   400,   562,   456,  1031,
     582,   566,     3,    38,    44,    51,    57,    83,    85,    91,
     103,   175,   177,   180,   181,   200,   215,   228,   229,   231,
     242,   244,   254,   276,   282,   286,   300,   308,   310,   332,
     375,   394,   401,   406,   425,   434,   455,   461,   481,   524,
     525,   555,   584,   609,   648,   658,   664,   665,   910,   984,
    1035,   588,   645,  1031,  1031,  1031,  1031,  1031,  1031,  1031,
    1031,  1031,  1031,   597,  1011,  1011,   534,   534,   534,   834,
     109,   384,   535,   554,   605,   433,   533,   640,   810,   717,
      42,   533,   581,   756,   761,   653,   198,   581,   534,   537,
     534,   678,   533,    42,   631,   629,   637,    88,   698,   109,
     280,   642,   810,   669,   810,   676,   534,   636,   471,   714,
     691,   534,   537,   646,   946,   176,   533,   994,   904,   534,
     537,   534,   857,   581,   581,   581,   581,    31,   105,   188,
     378,   533,   858,   859,   860,   861,   862,   863,   864,   945,
     945,   494,   960,   534,   947,   987,   988,   205,   187,   881,
     885,   534,   887,   888,   889,  1038,   912,  1034,   912,   582,
     912,   532,   532,   945,   537,   534,   582,   945,   947,   945,
     945,   945,   994,   534,   945,    37,    37,   945,   945,   150,
     534,   525,  1011,   534,   992,   534,   945,   534,   533,   582,
     964,   866,   534,   866,   584,   534,   187,   190,   772,   531,
     774,   532,   228,   544,   794,   795,   534,   524,   788,   532,
       9,   780,   803,   803,   803,   803,    11,    16,    17,    18,
      19,    20,    21,    37,    48,    55,    82,   181,   200,   205,
     228,   229,   244,   283,   286,   303,   406,   517,   520,   521,
     522,   524,   525,   526,   527,   528,   529,   983,   310,   533,
     534,  1018,   477,   431,   470,   731,   582,   725,   735,   298,
     728,   522,   739,   730,   986,    61,   534,   534,   476,   477,
     816,   608,   634,   534,   534,   495,   639,   122,   201,   211,
     121,   473,   945,   119,    42,   533,  1038,  1031,   946,   122,
     201,   121,   288,   234,   581,   639,    90,   654,   198,   288,
     555,   945,   654,   288,   524,   525,   558,   582,   910,   691,
     691,     3,   254,   425,  1035,  1039,   522,   444,   444,   532,
     532,   833,   534,   534,   582,   597,   471,   592,   594,   533,
     646,   534,   656,    42,   432,   945,   606,    42,   537,   749,
     280,   345,   765,   432,   283,   533,   584,   717,   640,   156,
     810,   154,   207,   621,   124,   140,   338,   656,   109,   717,
     495,  1068,    42,   533,   298,   582,   713,   533,   604,   946,
     994,   534,   534,     9,   365,   850,   866,   533,   402,   533,
     534,   537,   582,   961,   962,   348,   867,   537,   534,   533,
     583,    61,   534,   205,   534,   888,   532,   910,  1023,   532,
     198,   534,   945,   945,   945,   544,   532,   544,   534,   534,
     582,   965,   960,   584,   960,   789,   781,   766,   533,   543,
     743,   793,   538,   525,   796,   537,   910,   803,   803,   803,
     803,   803,   803,   803,   442,   429,  1016,  1038,   803,   803,
    1004,   135,   164,   283,   288,   293,   452,   463,   803,   288,
     803,   444,    55,   200,   205,   244,   406,   803,   803,   803,
     803,   803,   803,   803,   803,   803,   803,   972,  1019,   581,
     767,   537,   476,  1012,   534,   537,    93,   730,   945,   534,
    1030,  1030,   357,   639,   533,   630,   608,   534,   197,   533,
     945,   283,   614,   639,   642,  1031,    42,   157,   906,  1039,
     528,   609,  1031,  1031,   534,   554,   126,   756,   534,   629,
     810,   810,   534,   743,   756,   534,   345,    40,   533,   759,
     764,   235,   754,   581,   157,    42,   534,  1031,   656,    31,
      87,    96,   120,   197,   210,   418,   421,   625,   625,   380,
     380,    42,    66,    76,   248,   432,   945,   606,   581,   533,
     582,   729,   738,   954,   534,   534,   533,   960,   990,   533,
     990,   860,    42,   537,   945,   471,   845,   947,  1019,  1029,
     892,   533,   892,   945,  1011,  1011,   318,   966,   867,   867,
     766,   101,   784,   792,   793,   793,   781,   780,   516,   946,
     946,   150,   176,   135,   164,   288,   293,   452,   463,   533,
     150,   803,   429,  1016,   803,  1004,   803,   444,   534,   810,
     312,   810,   725,   298,   533,   723,   581,   608,   588,   635,
     638,   422,   486,   615,   616,   533,   610,   945,   534,   256,
     651,   197,   471,   565,   528,   456,   597,   584,   749,   717,
     621,  1068,   749,   142,   361,   746,   747,   743,   760,   762,
      31,   743,   205,   755,   533,   581,   810,   629,   698,   810,
      76,   301,    76,   810,   534,   714,   945,    82,   733,   534,
     537,   733,     9,   867,   534,   859,   534,   964,   962,   382,
     534,  1019,   532,   532,   532,    61,   834,   845,   845,   784,
     946,   534,   538,   542,   541,   803,    37,    37,   803,   803,
     176,   533,   994,   803,   150,   946,   946,   150,   150,   803,
     731,    95,   738,   136,   642,   522,   534,   537,   553,   534,
     280,   623,   177,   317,   407,   298,   619,   620,   644,   610,
     945,   456,   534,    42,   433,    42,   534,   537,    85,   581,
     533,  1068,   621,   656,  1068,   301,   301,   533,   534,  1038,
     734,  1038,   717,   729,   734,   534,   845,   534,   847,   534,
     989,   190,   350,   380,   967,   119,   783,   790,   793,   791,
     793,   803,   803,   803,   994,   534,   803,    37,    37,   803,
     803,   150,   476,  1031,   534,   284,   468,   651,   609,   638,
     534,   616,   211,   124,   468,   298,   644,   298,   619,   747,
     810,   533,   743,   760,   152,   763,   533,   738,   733,   838,
     903,   838,    55,   106,   458,   945,   968,   969,   968,   968,
     534,     4,     9,   782,   538,   542,   534,   803,   803,   803,
     810,   903,   400,   620,    65,   280,   371,   400,   612,   612,
    1068,   758,   761,   533,   743,   753,   534,   734,   839,   839,
     969,   379,   170,   334,   170,   334,   153,   970,   970,   970,
     790,   791,   737,   608,    25,   119,   288,   537,   757,   412,
     762,   534,   537,   717,   838,    37,   106,   187,   280,   441,
     903,   758,   534,   234,   751,   752,   534,   743,   903,   839,
     969,   379,   306,   757,   533,   750,   357,   581,  1028,   750,
     534,   130,   752,   581,   750,   765,   754,   755
};

/* YYR1[RULE-NUM] -- Symbol kind of the left-hand side of rule RULE-NUM.  */
static const yytype_int16 yyr1[] =
{
       0,   547,   548,   549,   549,   550,   550,   550,   550,   550,
     550,   550,   550,   550,   550,   550,   550,   550,   550,   550,
     550,   550,   550,   550,   550,   550,   550,   550,   550,   550,
     550,   550,   550,   550,   550,   550,   550,   550,   550,   550,
     550,   550,   550,   550,   550,   550,   550,   550,   550,   559,
     559,   559,   559,   559,   559,   559,   559,   560,   560,   561,
     561,   562,   562,   562,   562,   563,   563,   564,   564,   564,
     564,   564,   564,   564,   564,   564,   564,   564,   564,   564,
     564,   564,   564,   564,   564,   564,   564,   564,   564,   564,
     564,   564,   564,   564,   564,   564,   565,   565,   566,   566,
     566,   566,   567,   567,   568,   569,   569,   569,   682,   682,
     682,   682,   581,   581,   582,   582,   582,   582,   583,   583,
     584,   585,   585,   586,   587,   588,   588,   588,   588,   588,
     808,   808,   808,   808,   808,   808,   808,   808,   808,   808,
     808,   808,   808,   809,   809,   719,   720,   720,   720,   720,
     720,   721,   721,   722,   722,   722,   723,   723,   723,   724,
     724,   725,   726,   726,   727,   727,   727,   728,   728,   728,
     729,   729,   729,   730,   730,   731,   731,   732,   732,   733,
     733,   734,   734,   735,   735,   736,   736,   737,   737,   738,
     738,   739,   679,   679,   679,   680,   680,   681,   681,   804,
     804,   804,   677,   677,   677,   678,   678,   673,   673,   673,
     674,   674,   675,   675,   675,   676,   676,   695,   695,   695,
     696,   696,   697,   697,   698,   698,   552,   552,   553,   553,
     554,   554,   554,   555,   555,   555,   555,   556,   556,   556,
     556,   556,   556,   556,   556,   556,   556,   556,   556,   556,
     556,   557,   557,   558,   558,   558,   693,   693,   694,   694,
    1043,  1043,  1043,  1043,  1043,  1043,  1044,  1044,  1044,  1046,
     743,   743,   743,   744,   745,   745,   746,   746,   747,   747,
     748,   748,   749,   749,   750,   751,   752,   753,   753,   754,
     754,   755,   755,   756,   757,   757,   758,   759,   759,   760,
     760,   761,   761,   762,   762,   763,   763,   764,   764,   765,
     765,   765,   766,   766,   767,   767,   768,   768,   769,   770,
     770,   771,   771,   771,   772,   772,   772,   773,   773,   774,
     774,   774,   774,   774,   775,   775,   776,   776,   776,   776,
     776,   776,   777,   777,   778,   779,   779,   780,   780,   781,
     781,   781,   781,   781,   782,   782,   783,   783,   784,   784,
     785,   786,   787,   787,   788,   788,   788,   789,   789,   790,
     790,   791,   791,   792,   792,   792,   793,   793,   793,   794,
     794,   795,   795,   796,   796,   796,   797,   797,   798,   798,
     799,   799,   800,   801,   801,   802,   803,   803,   803,   803,
     803,   803,   803,   803,   803,   803,   803,   803,   803,   803,
     803,   803,   803,   803,   803,   803,   803,   803,   803,   803,
     803,   803,   803,   803,   803,   803,   803,   803,   803,   803,
     803,   803,   803,   803,   803,   803,   803,   803,   803,   803,
     803,   803,   803,   803,   803,   803,   803,   803,   803,   803,
     803,   803,   803,   803,   803,   803,   803,   607,   607,   607,
     608,   608,   609,   609,   609,   609,   609,   609,   610,   610,
     611,   612,   612,   612,   612,   612,   613,   613,   613,   613,
     614,   614,   614,   614,   614,   614,   614,   614,   615,   615,
     616,   616,   617,   617,   617,   618,   619,   620,   620,   620,
     620,   620,   621,   621,   621,   621,   622,   623,   623,   624,
     624,   625,   625,   625,   625,   625,   625,   625,   625,   626,
     626,   627,   628,   628,   628,   628,   629,   629,   629,   629,
     630,   631,   631,   631,   632,   633,   633,   633,   633,   633,
     633,   634,   634,   635,   635,   636,   637,   637,   637,   638,
     638,   639,   639,   640,   640,   640,   641,   642,   642,   643,
     643,   644,   645,   645,   645,   645,   646,   646,   647,   647,
     648,   648,   648,   649,   649,   649,   649,   649,   649,   650,
     650,   651,   651,   651,   651,   652,   653,   653,   653,   653,
     653,   653,   653,   653,   654,   654,   687,   687,   687,   687,
     687,   687,   688,   688,   688,   688,   688,   688,   688,   688,
     688,   688,   688,   688,   688,   688,   688,   688,   688,   688,
     689,   689,   689,   689,   689,   689,   690,   690,   691,   691,
     691,   692,   692,   692,   667,   667,   667,   667,   667,   667,
     668,   668,   669,   669,  1045,   589,   589,   589,   590,   590,
     590,   591,   591,   592,   592,   593,   593,   594,   594,   595,
     595,   596,   596,   597,   597,   598,   598,   598,   598,   598,
     598,   599,   600,   600,   601,   601,   602,   602,   603,   603,
     603,   603,   603,   603,   603,   603,   603,   603,   603,   603,
     603,   603,   603,   603,   604,   605,   605,   605,   605,   605,
     606,   606,   810,   810,   811,   811,   811,   812,   812,   812,
     812,   812,   812,   812,   812,   813,   813,   814,   814,   815,
     815,   815,   815,   815,   815,   815,   815,   815,   815,   815,
     815,   815,   815,   815,   815,   815,   815,   815,   816,   816,
     817,   817,   818,   818,   819,   819,   819,   820,   820,   821,
     821,   822,   822,   822,   823,   823,   824,   825,   825,   825,
     826,   826,   827,   827,   827,   827,   827,   827,   827,   827,
     827,   828,   828,   829,   829,   829,   830,   831,   831,   832,
     832,   833,   833,   833,   834,   834,   835,   835,   836,   836,
     837,   837,   838,   838,   838,   839,   839,   839,   840,   840,
     840,   840,   841,   841,   842,   842,   842,   842,   843,   843,
     844,   844,   844,   844,   844,   844,   845,   845,   846,   846,
     847,   847,   847,   847,   848,   849,   849,   850,   850,   851,
     851,   851,   851,   851,   852,   853,   853,   853,   854,   854,
     855,   855,   856,   856,   857,   857,   857,   858,   858,   859,
     859,   860,   860,   860,   860,   860,   861,   862,   863,   864,
     865,   865,   866,   866,   867,   867,   868,   868,   869,   869,
     870,   870,   871,   872,   872,   872,   872,   873,   873,   874,
     874,   874,   875,   875,   876,   876,   877,   877,   878,   878,
     879,   879,   880,   880,   880,   880,   880,   880,   880,   880,
     880,   880,   880,   881,   881,   882,   882,   882,   883,   883,
     884,   884,   884,   884,   885,   885,   886,   886,   887,   887,
     888,   889,   889,   890,   890,   890,   890,   890,   890,   890,
     890,   890,   890,   890,   891,   891,   891,   891,   892,   892,
     893,   893,   893,   893,   893,   894,   894,   894,   894,   894,
     894,   895,   895,   896,   896,   897,   897,   897,   897,   898,
     898,   899,   900,   900,   901,   901,   902,   902,   903,   903,
     904,   904,   905,   906,   906,   907,   907,   908,   908,   909,
     909,   910,   910,   910,   910,   910,   910,   910,   910,   910,
     910,   911,   911,   912,   912,   912,   913,   913,   913,   913,
     913,   913,   913,   914,   914,   914,   914,   915,   916,   916,
     917,   917,   917,   917,   917,   917,   917,   917,   917,   917,
     917,   918,   918,   919,   919,   920,   920,   921,   922,   923,
     923,   924,   924,   925,   926,   927,   927,   927,   927,   927,
     927,   928,   928,   929,   929,   929,   929,   930,   931,   931,
     931,   932,   932,   933,   933,   934,   934,   935,   935,   936,
     936,   937,   937,   938,   938,   939,   939,   940,   940,   941,
     941,   942,   942,   943,   943,   944,   944,   944,   944,   944,
     944,   944,   944,   944,   944,   944,   944,   944,   944,   944,
     944,   944,   944,   944,   944,   945,   945,   945,   945,   945,
     945,   945,   945,   945,   945,   945,   945,   945,   945,   945,
     945,   945,   945,   945,   945,   945,   945,   945,   945,   945,
     945,   945,   945,   945,   945,   945,   945,   945,   945,   945,
     945,   945,   945,   945,   945,   945,   945,   945,   945,   945,
     945,   945,   945,   945,   945,   945,   945,   945,   945,   945,
     945,   945,   945,   945,   945,   945,   945,   945,   945,   945,
     945,   945,   945,   945,   945,   946,   946,   946,   946,   946,
     946,   946,   946,   946,   946,   946,   946,   946,   946,   946,
     946,   946,   946,   946,   946,   946,   946,   946,   946,   946,
     947,   947,   948,   948,   948,   948,   948,   948,   949,   949,
     949,   950,   950,   950,   950,   950,   950,   950,   950,   950,
     950,   950,   950,   951,   952,   952,   952,   952,   952,   952,
     953,   953,   954,   954,   955,   955,   955,   955,   955,   955,
     955,   955,   955,   955,   955,   955,   955,   955,   956,   956,
     957,   957,   958,   958,   958,   959,   959,   960,   960,   961,
     961,   962,   963,   963,   963,   964,   965,   965,   966,   966,
     967,   967,   967,   967,   968,   968,   969,   969,   969,   969,
     969,   970,   970,   970,   970,   970,   971,   971,   972,   972,
     973,   974,   974,   975,   975,   976,   977,   977,   978,   978,
     979,   979,   980,   980,   980,   981,   981,   982,   982,   982,
     982,   982,   982,   982,   982,   982,   982,   982,   982,   982,
     982,   983,   983,   984,   984,   985,   985,   985,   985,   985,
     985,   985,   985,   986,   986,   987,   987,   988,   988,   989,
     989,   990,   990,   991,   991,   992,   992,   993,   993,   993,
     994,   994,   995,   995,   996,   996,   996,   996,   996,   996,
     996,   996,   996,   996,   996,   996,   996,   996,   997,   997,
     998,   999,   999,  1000,  1000,  1000,  1000,  1000,  1000,  1001,
    1002,  1003,  1003,  1003,  1004,  1004,  1005,  1006,  1006,  1007,
    1008,  1008,  1009,  1009,  1010,  1010,   586,   586,   586,   586,
    1011,  1011,  1012,  1012,  1013,  1013,  1013,  1014,  1014,  1014,
    1014,  1014,  1015,  1015,  1016,  1016,  1017,  1017,  1018,  1018,
    1019,  1019,  1020,  1020,  1020,  1021,  1021,  1022,  1022,  1023,
    1024,  1024,  1025,  1025,  1026,  1026,  1026,  1027,  1027,  1028,
    1028,  1029,  1029,  1030,  1030,  1031,  1032,  1032,  1033,  1033,
    1033,  1033,  1033,  1033,  1033,  1033,  1033,  1033,  1033,  1033,
    1033,  1033,  1034,  1035,  1035,  1035,  1035,  1036,  1036,  1036,
    1036,  1037,  1037,  1037,  1037,  1038,  1038,  1039,  1039,  1040,
    1040,  1041,  1042,  1042,   805,   806,   806,   807,   807,   807,
     807,   807,   807,   670,   670,   670,   671,   671,   672,   672,
     672,   672,   712,   712,   713,   714,   714,   715,   715,   716,
     716,   717,   717,   718,   718,   551,   551,   551,   551,   551,
     551,   576,   576,   577,   577,   578,   578,   579,   579,   580,
     580,   580,   580,   580,   580,   580,   580,   580,   580,   710,
     710,   711,   699,   699,   699,   699,   700,   700,   701,   701,
     701,   702,   702,   702,   702,   702,   702,   702,   702,   702,
     702,   702,   702,   702,   702,   702,   702,   702,   702,   702,
     702,   702,   702,   702,   702,   702,   702,   702,   702,   702,
     702,   703,   703,   703,   703,   704,   704,   705,   705,   706,
     706,   707,   707,   707,   707,   708,   709,   709,  1055,  1055,
    1055,  1055,  1056,  1056,  1056,  1056,  1057,  1057,  1058,  1059,
    1059,  1059,  1059,  1059,  1059,  1059,  1060,  1060,   740,   740,
     740,   740,   740,   741,   741,   742,   742,  1047,  1047,  1047,
    1047,  1047,  1048,  1048,  1048,  1048,  1048,  1049,  1049,  1050,
    1050,  1051,  1051,   683,   683,   684,   684,   684,   685,   685,
     686,   686,   570,   570,   571,   571,   572,   572,   572,   573,
     573,   574,   574,  1052,  1052,  1052,  1052,  1053,  1053,  1054,
    1054,  1054,  1061,  1061,  1061,  1061,  1061,  1061,  1061,  1061,
    1062,  1062,  1063,  1063,  1064,  1064,  1065,  1065,  1066,  1066,
     575,  1067,  1067,  1067,  1067,  1067,  1068,  1068,  1068,  1068,
     655,   655,   655,   656,   656,   656,   657,   658,   658,   658,
     658,   658,   658,   658,   658,   658,   658,   658,   658,   658,
     658,   658,   658,   658,   658,   658,   658,   658,   658,   658,
     658,   658,   658,   658,   658,   658,   658,   658,   658,   658,
     658,   658,   658,   658,   658,   658,   658,   658,   658,   658,
     658,   658,   658,   658,   658,   658,   658,   658,   658,   658,
     658,   658,   658,   658,   658,   658,   658,   658,   658,   658,
     658,   658,   658,   658,   658,   658,   658,   658,   658,   658,
     658,   658,   658,   658,   658,   658,   658,   658,   658,   658,
     658,   658,   658,   658,   658,   658,   658,   658,   658,   658,
     658,   658,   658,   658,   658,   658,   658,   658,   658,   658,
     658,   658,   658,   658,   658,   658,   658,   658,   658,   658,
     658,   658,   658,   658,   658,   658,   658,   658,   658,   658,
     658,   658,   658,   658,   658,   658,   658,   658,   658,   658,
     658,   658,   658,   658,   658,   658,   658,   658,   658,   658,
     658,   658,   658,   658,   658,   658,   658,   658,   658,   658,
     658,   658,   658,   658,   658,   658,   658,   658,   658,   658,
     658,   658,   658,   658,   658,   658,   658,   658,   658,   658,
     658,   658,   658,   658,   658,   658,   658,   658,   658,   658,
     658,   658,   658,   658,   658,   658,   658,   658,   658,   658,
     658,   658,   658,   658,   658,   658,   658,   658,   658,   658,
     658,   658,   658,   658,   658,   658,   658,   658,   658,   658,
     658,   658,   658,   658,   658,   658,   658,   658,   658,   658,
     658,   658,   658,   658,   658,   658,   658,   658,   658,   658,
     658,   658,   658,   658,   658,   658,   658,   658,   658,   658,
     658,   658,   658,   658,   658,   658,   658,   658,   658,   658,
     658,   658,   658,   658,   658,   658,   658,   658,   658,   658,
     658,   658,   658,   658,   658,   658,   658,   658,   658,   658,
     658,   658,   658,   658,   658,   658,   658,   658,   658,   658,
     658,   658,   658,   658,   658,   658,   658,   658,   658,   658,
     658,   658,   658,   658,   658,   658,   658,   658,   658,   658,
     658,   658,   658,   658,   658,   658,   658,   658,   658,   658,
     658,   658,   658,   658,   659,   659,   659,   659,   659,   659,
     659,   659,   659,   659,   659,   659,   659,   659,   659,   659,
     659,   659,   659,   659,   659,   659,   659,   659,   659,   659,
     659,   659,   659,   659,   659,   659,   659,   659,   659,   659,
     659,   659,   659,   659,   659,   659,   659,   659,   659,   659,
     659,   659,   659,   659,   659,   659,   659,   659,   660,   660,
     660,   660,   660,   660,   660,   660,   660,   660,   660,   660,
     660,   660,   660,   660,   660,   660,   660,   660,   660,   660,
     660,   660,   660,   660,   660,   660,   661,   661,   661,   661,
     661,   661,   661,   661,   661,   661,   661,   661,   661,   661,
     661,   661,   661,   661,   661,   661,   661,   661,   661,   661,
     661,   661,   661,   661,   661,   662,   662,   662,   662,   662,
     662,   662,   662,   662,   662,   662,   662,   662,   662,   662,
     662,   662,   662,   662,   662,   662,   662,   662,   662,   662,
     662,   662,   662,   662,   662,   662,   662,   662,   662,   662,
     662,   662,   662,   662,   662,   662,   662,   662,   662,   662,
     662,   662,   662,   662,   662,   662,   662,   662,   662,   662,
     662,   662,   662,   662,   662,   662,   662,   662,   662,   662,
     662,   662,   662,   662,   662,   662,   662,   662,   662,   662,
     662,   662,   662,   662,   662,   662,   663,   663,   663,   663,
     663,   663,   663,   663,   663,   663,   663,   663,   663,   663,
     663,   663,   663,   663,   663,   663,   663,   663,   663,   663,
     663,   663,   663,   663,   663,   663,   663,   663,   664,   664,
     664,   664,   664,   664,   664,   664,   664,   664,   664,   664,
     664,   664,   664,   664,   664,   664,   664,   664,   664,   664,
     664,   664,   664,   664,   664,   664,   664,   664,   664,   664,
     664,   664,   664,   664,   664,   664,   664,   664,   664,   664,
     664,   664,   664,   664,   664,   664,   664,   664,   664,   664,
     664,   664,   664,   664,   664,   664,   664,   664,   664,   664,
     664,   664,   664,   664,   664,   664,   664,   664,   664,   664,
     664,   664,   664,   664,   665,   665,   665,   665,   665,   665,
     665,   665,   665,   665,   665,   665,   665,   665,   665,   665,
     665,   665,   665,   665,   665,   666,   666,   666,   666,   666,
     666,   666,   666,   666,   666,   666,   666,   666,   666,   666,
     666,   666,   666,   666,   666,   666,   666,   666,   666,   666,
     666,   666,   666,   666,   666,   666,   666,   666,   666,   666,
     666,   666,   666,   666,   666,   666,   666,   666,   666,   666,
     666,   666,   666,   666,   666,   666,   666,   666
};

/* YYR2[RULE-NUM] -- Number of symbols on the right-hand side of rule RULE-NUM.  */
static const yytype_int8 yyr2[] =
{
       0,     2,     1,     3,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     0,     4,
       6,     4,     6,     4,     6,     4,     6,     1,     2,     3,
       2,     1,     3,     2,     3,     1,     3,     2,     5,     3,
       6,     4,     6,     6,     6,     5,     5,     6,     9,     4,
       5,     7,     6,     4,     8,     4,     2,     4,     3,     6,
       4,     2,     2,     2,     2,     1,     2,     0,     1,     2,
       2,     2,     1,     3,     4,     2,     1,     0,     2,     3,
       2,     3,     1,     2,     1,     1,     1,     1,     1,     1,
       1,     1,     2,     2,     1,     1,     1,     1,     1,     1,
       6,     6,     8,     6,     8,     6,     8,     6,     8,     8,
      10,     8,    10,     1,     0,     9,     1,     4,     4,     7,
       2,     1,     3,     2,     2,     0,     4,     3,     0,     1,
       0,     2,     3,     5,     2,     2,     0,     8,     5,     0,
       5,     5,     7,     2,     0,     1,     1,     1,     3,     2,
       0,     1,     0,     1,     3,     1,     3,     1,     2,     1,
       3,     2,     6,     8,     5,     1,     0,     1,     3,     2,
       4,     5,     5,     8,     7,     1,     0,     8,    11,    10,
       0,     1,     0,     1,     1,     0,     2,     3,     9,    12,
       1,     3,     1,     3,     3,     0,     4,     6,     1,     2,
       1,     1,     0,     1,     2,     2,     1,     2,     2,     1,
       2,     3,     2,     2,     2,     2,     3,     3,     3,     1,
       3,     1,     0,     1,     2,     2,     5,     7,     0,     2,
       2,     2,     2,     2,     2,     2,     1,     1,     0,     2,
       1,     1,     1,     5,     1,     1,     1,     1,     6,     0,
      11,    13,     3,     0,     3,     2,     2,     1,     3,     2,
       0,     5,     0,     4,     3,     0,    12,     1,     0,     1,
       3,     1,     3,     1,     3,     4,     0,     4,     3,     2,
       2,     0,     2,     0,     1,     0,     4,     0,     9,     2,
       0,     1,     1,     0,     1,     1,     0,     2,     0,     2,
       2,     2,     2,     1,     1,     0,     3,     4,     3,     2,
       3,     0,     1,     3,     3,     1,     3,     1,     0,     1,
       1,     1,     5,     0,     1,     1,     2,     0,     3,     0,
       5,     4,     1,     1,     2,     2,     0,     1,     3,     1,
       3,     1,     3,     1,     3,     3,     1,     2,     3,     2,
       0,     1,     1,     1,     2,     1,     2,     3,     2,     1,
       1,     0,     4,     2,     5,     3,     1,     3,     3,     5,
       2,     2,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     2,     2,
       3,     3,     5,     4,     6,     3,     5,     4,     6,     4,
       6,     5,     7,     3,     2,     4,     3,     2,     3,     3,
       3,     3,     4,     3,     4,     3,     4,     5,     6,     6,
       7,     6,     7,     6,     7,     3,     4,     9,    12,    11,
       0,     2,     1,     1,     1,     1,     1,     1,     3,     0,
       1,     2,     1,     1,     2,     2,     3,     1,     1,     2,
       2,     1,     2,     3,     5,     3,     2,     5,     1,     1,
       1,     0,     5,     7,     5,     2,     3,     1,     1,     2,
       2,     0,     3,     4,     4,     0,     3,     2,     0,     3,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       3,     3,     1,     2,     2,     2,     2,     2,     2,     0,
       3,     3,     3,     0,     1,     2,     1,     2,     2,     2,
       2,     3,     4,     1,     3,     1,     1,     1,     1,     3,
       1,     2,     0,     1,     2,     0,     1,     3,     0,     2,
       0,     3,     3,     1,     5,     3,     1,     3,     1,     2,
       1,     4,     5,     5,     6,     3,     7,     4,    11,     1,
       3,     2,     2,     2,     0,     3,     1,     1,     2,     2,
       2,     2,     1,     0,     1,     2,     6,     4,     6,     4,
       6,     8,     1,     1,     1,     1,     2,     1,     2,     1,
       2,     1,     1,     1,     1,     3,     3,     3,     3,     1,
       2,     2,     1,     3,     1,     1,     1,     3,     1,     1,
       0,     1,     1,     1,     8,    11,    10,     7,    10,     9,
       1,     1,     2,     3,     8,    11,     9,     7,     0,     3,
       3,     1,     1,     3,     0,     1,     3,     1,     0,     1,
       0,     1,     0,     1,     3,     1,     1,     1,     3,     1,
       0,     2,     2,     0,     2,     0,     1,     0,     1,     1,
       1,     3,     3,     1,     1,     3,     3,     3,     3,     3,
       3,     4,     3,     2,     1,     1,     1,     1,     3,     1,
       1,     3,     1,     1,     3,     3,     3,     1,     2,     4,
       4,     2,     3,     5,     5,     1,     1,     3,     0,    11,
      11,    10,    12,     1,     2,     5,     4,     4,     4,     4,
       7,     5,     4,     7,     6,     9,     9,     4,     1,     1,
       1,     1,     1,     1,     1,     5,     1,     1,     3,     1,
       2,     2,     2,     3,     1,     3,     7,     1,     2,     0,
       2,     0,     3,     3,     4,     4,     4,     4,     3,     2,
       1,     1,     0,     1,     1,     0,     2,     1,     5,     1,
       0,     2,     2,     0,     1,     0,     3,     5,     1,     3,
       4,     3,     1,     1,     0,     2,     2,     0,     2,     2,
       1,     1,     1,     0,     2,     4,     5,     4,     2,     3,
       2,     2,     2,     2,     1,     2,     3,     0,     1,     0,
       5,     1,     4,     6,     2,     1,     0,     4,     0,     1,
       1,     2,     2,     2,     1,     1,     2,     2,     1,     1,
       1,     1,     1,     1,     3,     3,     0,     1,     3,     1,
       2,     1,     1,     1,     1,     1,     2,     4,     4,     5,
       1,     1,     2,     0,     2,     0,     1,     3,     1,     0,
       1,     2,     3,     2,     4,     2,     3,     2,     0,     1,
       2,     0,     4,     5,     1,     2,     2,     0,     1,     3,
       1,     2,     3,     3,     3,     3,     3,     3,     1,     4,
       2,     9,     9,     3,     0,     2,     2,     0,     5,     3,
       0,     1,     1,     3,     5,     3,     1,     2,     1,     3,
       5,     1,     2,     3,     4,     5,     4,     5,     4,     6,
       5,     4,     5,     5,     5,     2,     4,     1,     1,     0,
       1,     4,     5,     4,     0,     2,     2,     2,     1,     1,
       1,     1,     0,     4,     2,     1,     2,     2,     4,     2,
       6,     2,     1,     3,     4,     0,     2,     0,     2,     0,
       1,     3,     3,     2,     0,     2,     4,     1,     1,     1,
       0,     2,     3,     5,     6,     2,     3,     1,     5,     5,
       5,     3,     3,     3,     4,     0,     1,     1,     1,     1,
       1,     2,     4,     1,     1,     1,     1,     2,     3,     0,
       1,     1,     1,     1,     1,     2,     2,     2,     2,     2,
       1,     3,     0,     1,     1,     1,     1,     5,     2,     1,
       1,     1,     1,     4,     1,     2,     2,     1,     3,     3,
       2,     1,     0,     5,     2,     5,     2,     1,     3,     3,
       0,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     3,     3,     3,
       3,     3,     3,     3,     0,     1,     3,     3,     5,     2,
       2,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     2,     2,     3,     3,
       2,     2,     3,     3,     5,     4,     6,     3,     5,     4,
       6,     4,     6,     5,     7,     3,     2,     4,     3,     2,
       3,     3,     3,     3,     4,     3,     4,     3,     4,     5,
       6,     6,     7,     6,     7,     6,     7,     3,     4,     4,
       6,     1,     4,     3,     5,     1,     3,     2,     2,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     2,     2,     5,     6,     6,     7,
       1,     2,     1,     1,     1,     2,     2,     4,     3,     1,
       1,     1,     1,     1,     4,     1,     1,     3,     1,     2,
       4,     2,     2,     3,     3,     6,     7,     9,     7,     7,
       5,     1,     1,     1,     5,     6,     6,     4,     4,     4,
       4,     6,     5,     5,     5,     4,     6,     4,     7,     9,
       5,     0,     5,     4,     0,     1,     0,     2,     0,     1,
       3,     3,     2,     2,     0,     6,     1,     0,     3,     0,
       3,     3,     3,     0,     1,     4,     2,     2,     2,     2,
       2,     3,     2,     2,     3,     0,     4,     3,     1,     5,
       3,     1,     3,     1,     2,     3,     1,     3,     1,     2,
       1,     0,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     4,     1,     4,     1,     4,     1,     2,     1,
       2,     1,     2,     1,     3,     1,     3,     1,     2,     1,
       3,     1,     2,     1,     0,     1,     3,     1,     3,     3,
       1,     3,     3,     0,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     4,     3,
       2,     3,     0,     3,     3,     2,     2,     1,     0,     2,
       2,     3,     2,     1,     1,     3,     5,     1,     2,     4,
       2,     0,     1,     0,     1,     2,     3,     5,     7,     7,
       1,     0,     0,     2,     0,     2,     3,     3,     3,     5,
       7,     7,     0,     2,     1,     0,     1,     0,     1,     3,
       1,     2,     3,     2,     1,     4,     2,     1,     0,     3,
       1,     3,     1,     2,     4,     2,     0,     1,     3,     1,
       3,     1,     2,     1,     3,     1,     1,     2,     1,     1,
       2,     1,     1,     2,     7,     2,     5,     3,     3,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     2,     2,     3,     3,
       0,     1,     1,     1,     5,     3,     0,     1,     1,     1,
       1,     1,     1,     4,     7,     6,     2,     0,     1,     1,
       1,     1,    13,    16,     1,     2,     0,     1,     0,     1,
       0,     2,     0,     1,     0,     6,     8,     6,     8,     6,
       8,     3,     2,     1,     0,     6,     6,     1,     1,     1,
       1,     1,     1,     2,     1,     1,     1,     1,     1,     4,
       6,     3,     2,     4,     3,     5,     1,     0,     1,     1,
       0,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     3,     1,
       1,     1,     1,     1,     1,     2,     1,     1,     2,     3,
       3,     3,     1,     3,     3,     2,     3,     3,     1,     1,
       1,     3,     5,     1,     1,     1,     1,     3,     2,     2,
       3,     4,     5,     1,     1,     1,     1,     4,     6,     5,
       4,     6,     1,     1,     1,     1,     1,     1,     0,     1,
       3,     1,     0,     7,     3,     1,     2,     3,     2,     0,
       2,     0,     2,     4,     5,     8,     2,     3,     5,     1,
       0,     2,     0,     2,     3,     3,     3,     1,     1,     1,
       2,     3,     2,     2,     2,     2,     3,     4,     3,     1,
       1,     1,     1,     1,     1,     0,     1,     3,     1,     3,
       2,     9,    12,    11,    12,    14,     3,     4,     4,     0,
       7,    10,     9,     2,     3,     0,     4,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1
};


enum { YYENOMEM = -2 };

#define yyerrok         (yyerrstatus = 0)
#define yyclearin       (yychar = YYEMPTY)

#define YYACCEPT        goto yyacceptlab
#define YYABORT         goto yyabortlab
#define YYERROR         goto yyerrorlab
#define YYNOMEM         goto yyexhaustedlab


#define YYRECOVERING()  (!!yyerrstatus)

#define YYBACKUP(Token, Value)                                    \
  do                                                              \
    if (yychar == YYEMPTY)                                        \
      {                                                           \
        yychar = (Token);                                         \
        yylval = (Value);                                         \
        YYPOPSTACK (yylen);                                       \
        yystate = *yyssp;                                         \
        goto yybackup;                                            \
      }                                                           \
    else                                                          \
      {                                                           \
        yyerror (&yylloc, yyscanner, YY_("syntax error: cannot back up")); \
        YYERROR;                                                  \
      }                                                           \
  while (0)

/* Backward compatibility with an undocumented macro.
   Use YYerror or YYUNDEF. */
#define YYERRCODE YYUNDEF

/* YYLLOC_DEFAULT -- Set CURRENT to span from RHS[1] to RHS[N].
   If N is 0, then set CURRENT to the empty location which ends
   the previous symbol: RHS[0] (always defined).  */

#ifndef YYLLOC_DEFAULT
# define YYLLOC_DEFAULT(Current, Rhs, N)                                \
    do                                                                  \
      if (N)                                                            \
        {                                                               \
          (Current).first_line   = YYRHSLOC (Rhs, 1).first_line;        \
          (Current).first_column = YYRHSLOC (Rhs, 1).first_column;      \
          (Current).last_line    = YYRHSLOC (Rhs, N).last_line;         \
          (Current).last_column  = YYRHSLOC (Rhs, N).last_column;       \
        }                                                               \
      else                                                              \
        {                                                               \
          (Current).first_line   = (Current).last_line   =              \
            YYRHSLOC (Rhs, 0).last_line;                                \
          (Current).first_column = (Current).last_column =              \
            YYRHSLOC (Rhs, 0).last_column;                              \
        }                                                               \
    while (0)
#endif

#define YYRHSLOC(Rhs, K) ((Rhs)[K])


/* Enable debugging if requested.  */
#if YYDEBUG

# ifndef YYFPRINTF
#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#  define YYFPRINTF fprintf
# endif

# define YYDPRINTF(Args)                        \
do {                                            \
  if (yydebug)                                  \
    YYFPRINTF Args;                             \
} while (0)


/* YYLOCATION_PRINT -- Print the location on the stream.
   This macro was not mandated originally: define only if we know
   we won't break user code: when these are the locations we know.  */

# ifndef YYLOCATION_PRINT

#  if defined YY_LOCATION_PRINT

   /* Temporary convenience wrapper in case some people defined the
      undocumented and private YY_LOCATION_PRINT macros.  */
#   define YYLOCATION_PRINT(File, Loc)  YY_LOCATION_PRINT(File, *(Loc))

#  elif defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL

/* Print *YYLOCP on YYO.  Private, do not rely on its existence. */

YY_ATTRIBUTE_UNUSED
static int
yy_location_print_ (FILE *yyo, YYLTYPE const * const yylocp)
{
  int res = 0;
  int end_col = 0 != yylocp->last_column ? yylocp->last_column - 1 : 0;
  if (0 <= yylocp->first_line)
    {
      res += YYFPRINTF (yyo, "%d", yylocp->first_line);
      if (0 <= yylocp->first_column)
        res += YYFPRINTF (yyo, ".%d", yylocp->first_column);
    }
  if (0 <= yylocp->last_line)
    {
      if (yylocp->first_line < yylocp->last_line)
        {
          res += YYFPRINTF (yyo, "-%d", yylocp->last_line);
          if (0 <= end_col)
            res += YYFPRINTF (yyo, ".%d", end_col);
        }
      else if (0 <= end_col && yylocp->first_column < end_col)
        res += YYFPRINTF (yyo, "-%d", end_col);
    }
  return res;
}

#   define YYLOCATION_PRINT  yy_location_print_

    /* Temporary convenience wrapper in case some people defined the
       undocumented and private YY_LOCATION_PRINT macros.  */
#   define YY_LOCATION_PRINT(File, Loc)  YYLOCATION_PRINT(File, &(Loc))

#  else

#   define YYLOCATION_PRINT(File, Loc) ((void) 0)
    /* Temporary convenience wrapper in case some people defined the
       undocumented and private YY_LOCATION_PRINT macros.  */
#   define YY_LOCATION_PRINT  YYLOCATION_PRINT

#  endif
# endif /* !defined YYLOCATION_PRINT */


# define YY_SYMBOL_PRINT(Title, Kind, Value, Location)                    \
do {                                                                      \
  if (yydebug)                                                            \
    {                                                                     \
      YYFPRINTF (stderr, "%s ", Title);                                   \
      yy_symbol_print (stderr,                                            \
                  Kind, Value, Location, yyscanner); \
      YYFPRINTF (stderr, "\n");                                           \
    }                                                                     \
} while (0)


/*-----------------------------------.
| Print this symbol's value on YYO.  |
`-----------------------------------*/

static void
yy_symbol_value_print (FILE *yyo,
                       yysymbol_kind_t yykind, YYSTYPE const * const yyvaluep, YYLTYPE const * const yylocationp, core_yyscan_t yyscanner)
{
  FILE *yyoutput = yyo;
  YY_USE (yyoutput);
  YY_USE (yylocationp);
  YY_USE (yyscanner);
  if (!yyvaluep)
    return;
  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  YY_USE (yykind);
  YY_IGNORE_MAYBE_UNINITIALIZED_END
}


/*---------------------------.
| Print this symbol on YYO.  |
`---------------------------*/

static void
yy_symbol_print (FILE *yyo,
                 yysymbol_kind_t yykind, YYSTYPE const * const yyvaluep, YYLTYPE const * const yylocationp, core_yyscan_t yyscanner)
{
  YYFPRINTF (yyo, "%s %s (",
             yykind < YYNTOKENS ? "token" : "nterm", yysymbol_name (yykind));

  YYLOCATION_PRINT (yyo, yylocationp);
  YYFPRINTF (yyo, ": ");
  yy_symbol_value_print (yyo, yykind, yyvaluep, yylocationp, yyscanner);
  YYFPRINTF (yyo, ")");
}

/*------------------------------------------------------------------.
| yy_stack_print -- Print the state stack from its BOTTOM up to its |
| TOP (included).                                                   |
`------------------------------------------------------------------*/

static void
yy_stack_print (yy_state_t *yybottom, yy_state_t *yytop)
{
  YYFPRINTF (stderr, "Stack now");
  for (; yybottom <= yytop; yybottom++)
    {
      int yybot = *yybottom;
      YYFPRINTF (stderr, " %d", yybot);
    }
  YYFPRINTF (stderr, "\n");
}

# define YY_STACK_PRINT(Bottom, Top)                            \
do {                                                            \
  if (yydebug)                                                  \
    yy_stack_print ((Bottom), (Top));                           \
} while (0)


/*------------------------------------------------.
| Report that the YYRULE is going to be reduced.  |
`------------------------------------------------*/

static void
yy_reduce_print (yy_state_t *yyssp, YYSTYPE *yyvsp, YYLTYPE *yylsp,
                 int yyrule, core_yyscan_t yyscanner)
{
  int yylno = yyrline[yyrule];
  int yynrhs = yyr2[yyrule];
  int yyi;
  YYFPRINTF (stderr, "Reducing stack by rule %d (line %d):\n",
             yyrule - 1, yylno);
  /* The symbols being reduced.  */
  for (yyi = 0; yyi < yynrhs; yyi++)
    {
      YYFPRINTF (stderr, "   $%d = ", yyi + 1);
      yy_symbol_print (stderr,
                       YY_ACCESSING_SYMBOL (+yyssp[yyi + 1 - yynrhs]),
                       &yyvsp[(yyi + 1) - (yynrhs)],
                       &(yylsp[(yyi + 1) - (yynrhs)]), yyscanner);
      YYFPRINTF (stderr, "\n");
    }
}

# define YY_REDUCE_PRINT(Rule)          \
do {                                    \
  if (yydebug)                          \
    yy_reduce_print (yyssp, yyvsp, yylsp, Rule, yyscanner); \
} while (0)

/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
int yydebug;
#else /* !YYDEBUG */
# define YYDPRINTF(Args) ((void) 0)
# define YY_SYMBOL_PRINT(Title, Kind, Value, Location)
# define YY_STACK_PRINT(Bottom, Top)
# define YY_REDUCE_PRINT(Rule)
#endif /* !YYDEBUG */


/* YYINITDEPTH -- initial size of the parser's stacks.  */
#ifndef YYINITDEPTH
# define YYINITDEPTH 200
#endif

/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   YYSTACK_ALLOC_MAXIMUM < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.  */

#ifndef YYMAXDEPTH
# define YYMAXDEPTH 10000
#endif






/*-----------------------------------------------.
| Release the memory associated to this symbol.  |
`-----------------------------------------------*/

static void
yydestruct (const char *yymsg,
            yysymbol_kind_t yykind, YYSTYPE *yyvaluep, YYLTYPE *yylocationp, core_yyscan_t yyscanner)
{
  YY_USE (yyvaluep);
  YY_USE (yylocationp);
  YY_USE (yyscanner);
  if (!yymsg)
    yymsg = "Deleting";
  YY_SYMBOL_PRINT (yymsg, yykind, yyvaluep, yylocationp);

  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  YY_USE (yykind);
  YY_IGNORE_MAYBE_UNINITIALIZED_END
}






/*----------.
| yyparse.  |
`----------*/

int
yyparse (core_yyscan_t yyscanner)
{
/* Lookahead token kind.  */
int yychar;


/* The semantic value of the lookahead symbol.  */
/* Default value used for initialization, for pacifying older GCCs
   or non-GCC compilers.  */
YY_INITIAL_VALUE (static YYSTYPE yyval_default;)
YYSTYPE yylval YY_INITIAL_VALUE (= yyval_default);

/* Location data for the lookahead symbol.  */
static YYLTYPE yyloc_default
# if defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL
  = { 1, 1, 1, 1 }
# endif
;
YYLTYPE yylloc = yyloc_default;

    /* Number of syntax errors so far.  */
    int yynerrs = 0; (void)yynerrs;

    yy_state_fast_t yystate = 0;
    /* Number of tokens to shift before error messages enabled.  */
    int yyerrstatus = 0;

    /* Refer to the stacks through separate pointers, to allow yyoverflow
       to reallocate them elsewhere.  */

    /* Their size.  */
    YYPTRDIFF_T yystacksize = YYINITDEPTH;

    /* The state stack: array, bottom, top.  */
    yy_state_t yyssa[YYINITDEPTH];
    yy_state_t *yyss = yyssa;
    yy_state_t *yyssp = yyss;

    /* The semantic value stack: array, bottom, top.  */
    YYSTYPE yyvsa[YYINITDEPTH];
    YYSTYPE *yyvs = yyvsa;
    YYSTYPE *yyvsp = yyvs;

    /* The location stack: array, bottom, top.  */
    YYLTYPE yylsa[YYINITDEPTH];
    YYLTYPE *yyls = yylsa;
    YYLTYPE *yylsp = yyls;

  int yyn;
  /* The return value of yyparse.  */
  int yyresult;
  /* Lookahead symbol kind.  */
  yysymbol_kind_t yytoken = YYSYMBOL_YYEMPTY;
  /* The variables used to return semantic value and location from the
     action routines.  */
  YYSTYPE yyval;
  YYLTYPE yyloc;

  /* The locations where the error started and ended.  */
  YYLTYPE yyerror_range[3];



#define YYPOPSTACK(N)   (yyvsp -= (N), yyssp -= (N), yylsp -= (N))

  /* The number of symbols on the RHS of the reduced rule.
     Keep to zero when no symbol should be popped.  */
  int yylen = 0;

  YYDPRINTF ((stderr, "Starting parse\n"));

  yychar = YYEMPTY; /* Cause a token to be read.  */

  yylsp[0] = yylloc;
  goto yysetstate;


/*------------------------------------------------------------.
| yynewstate -- push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
yynewstate:
  /* In all cases, when you get here, the value and location stacks
     have just been pushed.  So pushing a state here evens the stacks.  */
  yyssp++;


/*--------------------------------------------------------------------.
| yysetstate -- set current state (the top of the stack) to yystate.  |
`--------------------------------------------------------------------*/
yysetstate:
  YYDPRINTF ((stderr, "Entering state %d\n", yystate));
  YY_ASSERT (0 <= yystate && yystate < YYNSTATES);
  YY_IGNORE_USELESS_CAST_BEGIN
  *yyssp = YY_CAST (yy_state_t, yystate);
  YY_IGNORE_USELESS_CAST_END
  YY_STACK_PRINT (yyss, yyssp);

  if (yyss + yystacksize - 1 <= yyssp)
#if !defined yyoverflow && !defined YYSTACK_RELOCATE
    YYNOMEM;
#else
    {
      /* Get the current used size of the three stacks, in elements.  */
      YYPTRDIFF_T yysize = yyssp - yyss + 1;

# if defined yyoverflow
      {
        /* Give user a chance to reallocate the stack.  Use copies of
           these so that the &'s don't force the real ones into
           memory.  */
        yy_state_t *yyss1 = yyss;
        YYSTYPE *yyvs1 = yyvs;
        YYLTYPE *yyls1 = yyls;

        /* Each stack pointer address is followed by the size of the
           data in use in that stack, in bytes.  This used to be a
           conditional around just the two extra args, but that might
           be undefined if yyoverflow is a macro.  */
        yyoverflow (YY_("memory exhausted"),
                    &yyss1, yysize * YYSIZEOF (*yyssp),
                    &yyvs1, yysize * YYSIZEOF (*yyvsp),
                    &yyls1, yysize * YYSIZEOF (*yylsp),
                    &yystacksize);
        yyss = yyss1;
        yyvs = yyvs1;
        yyls = yyls1;
      }
# else /* defined YYSTACK_RELOCATE */
      /* Extend the stack our own way.  */
      if (YYMAXDEPTH <= yystacksize)
        YYNOMEM;
      yystacksize *= 2;
      if (YYMAXDEPTH < yystacksize)
        yystacksize = YYMAXDEPTH;

      {
        yy_state_t *yyss1 = yyss;
        union yyalloc *yyptr =
          YY_CAST (union yyalloc *,
                   YYSTACK_ALLOC (YY_CAST (YYSIZE_T, YYSTACK_BYTES (yystacksize))));
        if (! yyptr)
          YYNOMEM;
        YYSTACK_RELOCATE (yyss_alloc, yyss);
        YYSTACK_RELOCATE (yyvs_alloc, yyvs);
        YYSTACK_RELOCATE (yyls_alloc, yyls);
#  undef YYSTACK_RELOCATE
        if (yyss1 != yyssa)
          YYSTACK_FREE (yyss1);
      }
# endif

      yyssp = yyss + yysize - 1;
      yyvsp = yyvs + yysize - 1;
      yylsp = yyls + yysize - 1;

      YY_IGNORE_USELESS_CAST_BEGIN
      YYDPRINTF ((stderr, "Stack size increased to %ld\n",
                  YY_CAST (long, yystacksize)));
      YY_IGNORE_USELESS_CAST_END

      if (yyss + yystacksize - 1 <= yyssp)
        YYABORT;
    }
#endif /* !defined yyoverflow && !defined YYSTACK_RELOCATE */


  if (yystate == YYFINAL)
    YYACCEPT;

  goto yybackup;


/*-----------.
| yybackup.  |
`-----------*/
yybackup:
  /* Do appropriate processing given the current state.  Read a
     lookahead token if we need one and don't already have one.  */

  /* First try to decide what to do without reference to lookahead token.  */
  yyn = yypact[yystate];
  if (yypact_value_is_default (yyn))
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* YYCHAR is either empty, or end-of-input, or a valid lookahead.  */
  if (yychar == YYEMPTY)
    {
      YYDPRINTF ((stderr, "Reading a token\n"));
      yychar = yylex (&yylval, &yylloc, yyscanner);
    }

  if (yychar <= YYEOF)
    {
      yychar = YYEOF;
      yytoken = YYSYMBOL_YYEOF;
      YYDPRINTF ((stderr, "Now at end of input.\n"));
    }
  else if (yychar == YYerror)
    {
      /* The scanner already issued an error message, process directly
         to error recovery.  But do not keep the error token as
         lookahead, it is too special and may lead us to an endless
         loop in error recovery. */
      yychar = YYUNDEF;
      yytoken = YYSYMBOL_YYerror;
      yyerror_range[1] = yylloc;
      goto yyerrlab1;
    }
  else
    {
      yytoken = YYTRANSLATE (yychar);
      YY_SYMBOL_PRINT ("Next token is", yytoken, &yylval, &yylloc);
    }

  /* If the proper action on seeing token YYTOKEN is to reduce or to
     detect an error, take that action.  */
  yyn += yytoken;
  if (yyn < 0 || YYLAST < yyn || yycheck[yyn] != yytoken)
    goto yydefault;
  yyn = yytable[yyn];
  if (yyn <= 0)
    {
      if (yytable_value_is_error (yyn))
        goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }

  /* Count tokens shifted since error; after three, turn off error
     status.  */
  if (yyerrstatus)
    yyerrstatus--;

  /* Shift the lookahead token.  */
  YY_SYMBOL_PRINT ("Shifting", yytoken, &yylval, &yylloc);
  yystate = yyn;
  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  *++yyvsp = yylval;
  YY_IGNORE_MAYBE_UNINITIALIZED_END
  *++yylsp = yylloc;

  /* Discard the shifted token.  */
  yychar = YYEMPTY;
  goto yynewstate;


/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
yydefault:
  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;
  goto yyreduce;


/*-----------------------------.
| yyreduce -- do a reduction.  |
`-----------------------------*/
yyreduce:
  /* yyn is the number of a rule to reduce with.  */
  yylen = yyr2[yyn];

  /* If YYLEN is nonzero, implement the default value of the action:
     '$$ = $1'.

     Otherwise, the following line sets YYVAL to garbage.
     This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */
  yyval = yyvsp[1-yylen];

  /* Default location. */
  YYLLOC_DEFAULT (yyloc, (yylsp - yylen), yylen);
  yyerror_range[1] = yyloc;
  YY_REDUCE_PRINT (yyn);
  switch (yyn)
    {
  case 2: /* stmtblock: stmtmulti  */
#line 563 "third_party/libpg_query/grammar/grammar.y"
                        {
				pg_yyget_extra(yyscanner)->parsetree = (yyvsp[0].list);
			}
#line 20838 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 3: /* stmtmulti: stmtmulti ';' stmt  */
#line 579 "third_party/libpg_query/grammar/grammar.y"
                                {
					if ((yyvsp[-2].list) != NIL)
					{
						/* update length of previous stmt */
						updateRawStmtEnd(llast_node(PGRawStmt, (yyvsp[-2].list)), (yylsp[-1]));
					}
					if ((yyvsp[0].node) != NULL)
						(yyval.list) = lappend((yyvsp[-2].list), makeRawStmt((yyvsp[0].node), (yylsp[-1]) + 1));
					else
						(yyval.list) = (yyvsp[-2].list);
				}
#line 20854 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 4: /* stmtmulti: stmt  */
#line 591 "third_party/libpg_query/grammar/grammar.y"
                                {
					if ((yyvsp[0].node) != NULL)
						(yyval.list) = list_make1(makeRawStmt((yyvsp[0].node), 0));
					else
						(yyval.list) = NIL;
				}
#line 20865 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 48: /* stmt: %empty  */
#line 643 "third_party/libpg_query/grammar/grammar.y"
        { (yyval.node) = NULL; }
#line 20871 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 49: /* AlterTableStmt: ALTER TABLE relation_expr alter_table_cmds  */
#line 10 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_TABLE;
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 20884 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 50: /* AlterTableStmt: ALTER TABLE IF_P EXISTS relation_expr alter_table_cmds  */
#line 19 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_TABLE;
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 20897 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 51: /* AlterTableStmt: ALTER INDEX qualified_name alter_table_cmds  */
#line 28 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_INDEX;
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 20910 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 52: /* AlterTableStmt: ALTER INDEX IF_P EXISTS qualified_name alter_table_cmds  */
#line 37 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_INDEX;
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 20923 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 53: /* AlterTableStmt: ALTER SEQUENCE qualified_name alter_table_cmds  */
#line 46 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_SEQUENCE;
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 20936 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 54: /* AlterTableStmt: ALTER SEQUENCE IF_P EXISTS qualified_name alter_table_cmds  */
#line 55 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_SEQUENCE;
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 20949 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 55: /* AlterTableStmt: ALTER VIEW qualified_name alter_table_cmds  */
#line 64 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_VIEW;
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 20962 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 56: /* AlterTableStmt: ALTER VIEW IF_P EXISTS qualified_name alter_table_cmds  */
#line 73 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_VIEW;
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 20975 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 57: /* alter_identity_column_option_list: alter_identity_column_option  */
#line 86 "third_party/libpg_query/grammar/statements/alter_table.y"
                                { (yyval.list) = list_make1((yyvsp[0].defelt)); }
#line 20981 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 58: /* alter_identity_column_option_list: alter_identity_column_option_list alter_identity_column_option  */
#line 88 "third_party/libpg_query/grammar/statements/alter_table.y"
                                { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].defelt)); }
#line 20987 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 59: /* alter_column_default: SET DEFAULT a_expr  */
#line 93 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                { (yyval.node) = (yyvsp[0].node); }
#line 20993 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 60: /* alter_column_default: DROP DEFAULT  */
#line 94 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                { (yyval.node) = NULL; }
#line 20999 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 61: /* alter_identity_column_option: RESTART  */
#line 100 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = makeDefElem("restart", NULL, (yylsp[0]));
				}
#line 21007 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 62: /* alter_identity_column_option: RESTART opt_with NumericOnly  */
#line 104 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = makeDefElem("restart", (PGNode *)(yyvsp[0].value), (yylsp[-2]));
				}
#line 21015 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 63: /* alter_identity_column_option: SET SeqOptElem  */
#line 108 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					if (strcmp((yyvsp[0].defelt)->defname, "as") == 0 ||
						strcmp((yyvsp[0].defelt)->defname, "restart") == 0 ||
						strcmp((yyvsp[0].defelt)->defname, "owned_by") == 0)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("sequence option \"%s\" not supported here", (yyvsp[0].defelt)->defname),
								 parser_errposition((yylsp[0]))));
					(yyval.defelt) = (yyvsp[0].defelt);
				}
#line 21030 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 64: /* alter_identity_column_option: SET GENERATED generated_when  */
#line 119 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = makeDefElem("generated", (PGNode *) makeInteger((yyvsp[0].ival)), (yylsp[-2]));
				}
#line 21038 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 65: /* alter_generic_option_list: alter_generic_option_elem  */
#line 127 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].defelt));
				}
#line 21046 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 66: /* alter_generic_option_list: alter_generic_option_list ',' alter_generic_option_elem  */
#line 131 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt));
				}
#line 21054 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 67: /* alter_table_cmd: ADD_P columnDef  */
#line 140 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AddColumn;
					n->def = (yyvsp[0].node);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 21066 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 68: /* alter_table_cmd: ADD_P IF_P NOT EXISTS columnDef  */
#line 149 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AddColumn;
					n->def = (yyvsp[0].node);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 21078 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 69: /* alter_table_cmd: ADD_P COLUMN columnDef  */
#line 158 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AddColumn;
					n->def = (yyvsp[0].node);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 21090 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 70: /* alter_table_cmd: ADD_P COLUMN IF_P NOT EXISTS columnDef  */
#line 167 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AddColumn;
					n->def = (yyvsp[0].node);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 21102 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 71: /* alter_table_cmd: ALTER opt_column ColId alter_column_default  */
#line 176 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_ColumnDefault;
					n->name = (yyvsp[-1].str);
					n->def = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 21114 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 72: /* alter_table_cmd: ALTER opt_column ColId DROP NOT NULL_P  */
#line 185 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_DropNotNull;
					n->name = (yyvsp[-3].str);
					(yyval.node) = (PGNode *)n;
				}
#line 21125 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 73: /* alter_table_cmd: ALTER opt_column ColId SET NOT NULL_P  */
#line 193 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetNotNull;
					n->name = (yyvsp[-3].str);
					(yyval.node) = (PGNode *)n;
				}
#line 21136 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 74: /* alter_table_cmd: ALTER opt_column ColId SET STATISTICS SignedIconst  */
#line 201 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetStatistics;
					n->name = (yyvsp[-3].str);
					n->def = (PGNode *) makeInteger((yyvsp[0].ival));
					(yyval.node) = (PGNode *)n;
				}
#line 21148 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 75: /* alter_table_cmd: ALTER opt_column ColId SET reloptions  */
#line 210 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetOptions;
					n->name = (yyvsp[-2].str);
					n->def = (PGNode *) (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 21160 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 76: /* alter_table_cmd: ALTER opt_column ColId RESET reloptions  */
#line 219 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_ResetOptions;
					n->name = (yyvsp[-2].str);
					n->def = (PGNode *) (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 21172 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 77: /* alter_table_cmd: ALTER opt_column ColId SET STORAGE ColId  */
#line 228 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetStorage;
					n->name = (yyvsp[-3].str);
					n->def = (PGNode *) makeString((yyvsp[0].str));
					(yyval.node) = (PGNode *)n;
				}
#line 21184 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 78: /* alter_table_cmd: ALTER opt_column ColId ADD_P GENERATED generated_when AS IDENTITY_P OptParenthesizedSeqOptList  */
#line 237 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					PGConstraint *c = makeNode(PGConstraint);

					c->contype = PG_CONSTR_IDENTITY;
					c->generated_when = (yyvsp[-3].ival);
					c->options = (yyvsp[0].list);
					c->location = (yylsp[-4]);

					n->subtype = PG_AT_AddIdentity;
					n->name = (yyvsp[-6].str);
					n->def = (PGNode *) c;

					(yyval.node) = (PGNode *)n;
				}
#line 21204 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 79: /* alter_table_cmd: ALTER opt_column ColId alter_identity_column_option_list  */
#line 254 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetIdentity;
					n->name = (yyvsp[-1].str);
					n->def = (PGNode *) (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 21216 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 80: /* alter_table_cmd: ALTER opt_column ColId DROP IDENTITY_P  */
#line 263 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = AT_DropIdentity;
					n->name = (yyvsp[-2].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 21228 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 81: /* alter_table_cmd: ALTER opt_column ColId DROP IDENTITY_P IF_P EXISTS  */
#line 272 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = AT_DropIdentity;
					n->name = (yyvsp[-4].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 21240 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 82: /* alter_table_cmd: DROP opt_column IF_P EXISTS ColId opt_drop_behavior  */
#line 281 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_DropColumn;
					n->name = (yyvsp[-1].str);
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 21253 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 83: /* alter_table_cmd: DROP opt_column ColId opt_drop_behavior  */
#line 291 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_DropColumn;
					n->name = (yyvsp[-1].str);
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 21266 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 84: /* alter_table_cmd: ALTER opt_column ColId opt_set_data TYPE_P Typename opt_collate_clause alter_using  */
#line 304 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					PGColumnDef *def = makeNode(PGColumnDef);
					n->subtype = PG_AT_AlterColumnType;
					n->name = (yyvsp[-5].str);
					n->def = (PGNode *) def;
					/* We only use these fields of the PGColumnDef node */
					def->typeName = (yyvsp[-2].typnam);
					def->collClause = (PGCollateClause *) (yyvsp[-1].node);
					def->raw_default = (yyvsp[0].node);
					def->location = (yylsp[-5]);
					(yyval.node) = (PGNode *)n;
				}
#line 21284 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 85: /* alter_table_cmd: ALTER opt_column ColId alter_generic_options  */
#line 319 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AlterColumnGenericOptions;
					n->name = (yyvsp[-1].str);
					n->def = (PGNode *) (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 21296 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 86: /* alter_table_cmd: ADD_P TableConstraint  */
#line 328 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AddConstraint;
					n->def = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 21307 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 87: /* alter_table_cmd: ALTER CONSTRAINT name ConstraintAttributeSpec  */
#line 336 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					PGConstraint *c = makeNode(PGConstraint);
					n->subtype = PG_AT_AlterConstraint;
					n->def = (PGNode *) c;
					c->contype = PG_CONSTR_FOREIGN; /* others not supported, yet */
					c->conname = (yyvsp[-1].str);
					processCASbits((yyvsp[0].ival), (yylsp[0]), "ALTER CONSTRAINT statement",
									&c->deferrable,
									&c->initdeferred,
									NULL, NULL, yyscanner);
					(yyval.node) = (PGNode *)n;
				}
#line 21325 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 88: /* alter_table_cmd: VALIDATE CONSTRAINT name  */
#line 351 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_ValidateConstraint;
					n->name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 21336 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 89: /* alter_table_cmd: DROP CONSTRAINT IF_P EXISTS name opt_drop_behavior  */
#line 359 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_DropConstraint;
					n->name = (yyvsp[-1].str);
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 21349 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 90: /* alter_table_cmd: DROP CONSTRAINT name opt_drop_behavior  */
#line 369 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_DropConstraint;
					n->name = (yyvsp[-1].str);
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 21362 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 91: /* alter_table_cmd: SET LOGGED  */
#line 379 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetLogged;
					(yyval.node) = (PGNode *)n;
				}
#line 21372 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 92: /* alter_table_cmd: SET UNLOGGED  */
#line 386 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetUnLogged;
					(yyval.node) = (PGNode *)n;
				}
#line 21382 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 93: /* alter_table_cmd: SET reloptions  */
#line 393 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetRelOptions;
					n->def = (PGNode *)(yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 21393 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 94: /* alter_table_cmd: RESET reloptions  */
#line 401 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_ResetRelOptions;
					n->def = (PGNode *)(yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 21404 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 95: /* alter_table_cmd: alter_generic_options  */
#line 408 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_GenericOptions;
					n->def = (PGNode *)(yyvsp[0].list);
					(yyval.node) = (PGNode *) n;
				}
#line 21415 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 96: /* alter_using: USING a_expr  */
#line 418 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                { (yyval.node) = (yyvsp[0].node); }
#line 21421 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 97: /* alter_using: %empty  */
#line 419 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                { (yyval.node) = NULL; }
#line 21427 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 98: /* alter_generic_option_elem: generic_option_elem  */
#line 425 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = (yyvsp[0].defelt);
				}
#line 21435 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 99: /* alter_generic_option_elem: SET generic_option_elem  */
#line 429 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = (yyvsp[0].defelt);
					(yyval.defelt)->defaction = PG_DEFELEM_SET;
				}
#line 21444 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 100: /* alter_generic_option_elem: ADD_P generic_option_elem  */
#line 434 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = (yyvsp[0].defelt);
					(yyval.defelt)->defaction = PG_DEFELEM_ADD;
				}
#line 21453 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 101: /* alter_generic_option_elem: DROP generic_option_name  */
#line 439 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = makeDefElemExtended(NULL, (yyvsp[0].str), NULL, DEFELEM_DROP, (yylsp[0]));
				}
#line 21461 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 102: /* alter_table_cmds: alter_table_cmd  */
#line 446 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 21467 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 103: /* alter_table_cmds: alter_table_cmds ',' alter_table_cmd  */
#line 447 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 21473 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 104: /* alter_generic_options: OPTIONS '(' alter_generic_option_list ')'  */
#line 452 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 21479 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 105: /* opt_set_data: SET DATA_P  */
#line 456 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                                { (yyval.ival) = 1; }
#line 21485 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 106: /* opt_set_data: SET  */
#line 457 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                                                { (yyval.ival) = 0; }
#line 21491 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 107: /* opt_set_data: %empty  */
#line 458 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                                                { (yyval.ival) = 0; }
#line 21497 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 108: /* DeallocateStmt: DEALLOCATE name  */
#line 8 "third_party/libpg_query/grammar/statements/deallocate.y"
                                        {
						PGDeallocateStmt *n = makeNode(PGDeallocateStmt);
						n->name = (yyvsp[0].str);
						(yyval.node) = (PGNode *) n;
					}
#line 21507 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 109: /* DeallocateStmt: DEALLOCATE PREPARE name  */
#line 14 "third_party/libpg_query/grammar/statements/deallocate.y"
                                        {
						PGDeallocateStmt *n = makeNode(PGDeallocateStmt);
						n->name = (yyvsp[0].str);
						(yyval.node) = (PGNode *) n;
					}
#line 21517 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 110: /* DeallocateStmt: DEALLOCATE ALL  */
#line 20 "third_party/libpg_query/grammar/statements/deallocate.y"
                                        {
						PGDeallocateStmt *n = makeNode(PGDeallocateStmt);
						n->name = NULL;
						(yyval.node) = (PGNode *) n;
					}
#line 21527 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 111: /* DeallocateStmt: DEALLOCATE PREPARE ALL  */
#line 26 "third_party/libpg_query/grammar/statements/deallocate.y"
                                        {
						PGDeallocateStmt *n = makeNode(PGDeallocateStmt);
						n->name = NULL;
						(yyval.node) = (PGNode *) n;
					}
#line 21537 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 112: /* qualified_name: ColIdOrString  */
#line 10 "third_party/libpg_query/grammar/statements/common.y"
                                {
					(yyval.range) = makeRangeVar(NULL, (yyvsp[0].str), (yylsp[0]));
				}
#line 21545 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 113: /* qualified_name: ColId indirection  */
#line 14 "third_party/libpg_query/grammar/statements/common.y"
                                {
					check_qualified_name((yyvsp[0].list), yyscanner);
					(yyval.range) = makeRangeVar(NULL, NULL, (yylsp[-1]));
					switch (list_length((yyvsp[0].list)))
					{
						case 1:
							(yyval.range)->catalogname = NULL;
							(yyval.range)->schemaname = (yyvsp[-1].str);
							(yyval.range)->relname = strVal(linitial((yyvsp[0].list)));
							break;
						case 2:
							(yyval.range)->catalogname = (yyvsp[-1].str);
							(yyval.range)->schemaname = strVal(linitial((yyvsp[0].list)));
							(yyval.range)->relname = strVal(lsecond((yyvsp[0].list)));
							break;
						case 3:
						default:
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("improper qualified name (too many dotted names): %s",
											NameListToString(lcons(makeString((yyvsp[-1].str)), (yyvsp[0].list)))),
									 parser_errposition((yylsp[-1]))));
							break;
					}
				}
#line 21575 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 114: /* ColId: IDENT  */
#line 44 "third_party/libpg_query/grammar/statements/common.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 21581 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 115: /* ColId: unreserved_keyword  */
#line 45 "third_party/libpg_query/grammar/statements/common.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 21587 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 116: /* ColId: col_name_keyword  */
#line 46 "third_party/libpg_query/grammar/statements/common.y"
                                                                                        { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 21593 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 117: /* ColId: pgq_unreserved_keyword  */
#line 47 "third_party/libpg_query/grammar/statements/common.y"
                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 21599 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 118: /* ColIdOrString: ColId  */
#line 51 "third_party/libpg_query/grammar/statements/common.y"
                                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 21605 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 119: /* ColIdOrString: SCONST  */
#line 52 "third_party/libpg_query/grammar/statements/common.y"
                                                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 21611 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 120: /* Sconst: SCONST  */
#line 56 "third_party/libpg_query/grammar/statements/common.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 21617 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 121: /* indirection: indirection_el  */
#line 60 "third_party/libpg_query/grammar/statements/common.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 21623 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 122: /* indirection: indirection indirection_el  */
#line 61 "third_party/libpg_query/grammar/statements/common.y"
                                                                        { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 21629 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 123: /* indirection_el: '.' attr_name  */
#line 66 "third_party/libpg_query/grammar/statements/common.y"
                                {
					(yyval.node) = (PGNode *) makeString((yyvsp[0].str));
				}
#line 21637 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 124: /* attr_name: ColLabel  */
#line 71 "third_party/libpg_query/grammar/statements/common.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 21643 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 125: /* ColLabel: IDENT  */
#line 76 "third_party/libpg_query/grammar/statements/common.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 21649 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 126: /* ColLabel: other_keyword  */
#line 77 "third_party/libpg_query/grammar/statements/common.y"
                                                                                        { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 21655 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 127: /* ColLabel: unreserved_keyword  */
#line 78 "third_party/libpg_query/grammar/statements/common.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 21661 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 128: /* ColLabel: reserved_keyword  */
#line 79 "third_party/libpg_query/grammar/statements/common.y"
                                                                                        { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 21667 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 129: /* ColLabel: pgq_unreserved_keyword  */
#line 80 "third_party/libpg_query/grammar/statements/common.y"
                                                    { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 21673 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 130: /* RenameStmt: ALTER SCHEMA name RENAME TO name  */
#line 7 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_SCHEMA;
					n->subname = (yyvsp[-3].str);
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 21686 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 131: /* RenameStmt: ALTER TABLE relation_expr RENAME TO name  */
#line 16 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 21700 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 132: /* RenameStmt: ALTER TABLE IF_P EXISTS relation_expr RENAME TO name  */
#line 26 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 21714 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 133: /* RenameStmt: ALTER SEQUENCE qualified_name RENAME TO name  */
#line 36 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_SEQUENCE;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 21728 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 134: /* RenameStmt: ALTER SEQUENCE IF_P EXISTS qualified_name RENAME TO name  */
#line 46 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_SEQUENCE;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 21742 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 135: /* RenameStmt: ALTER VIEW qualified_name RENAME TO name  */
#line 56 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_VIEW;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 21756 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 136: /* RenameStmt: ALTER VIEW IF_P EXISTS qualified_name RENAME TO name  */
#line 66 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_VIEW;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 21770 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 137: /* RenameStmt: ALTER INDEX qualified_name RENAME TO name  */
#line 76 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_INDEX;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 21784 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 138: /* RenameStmt: ALTER INDEX IF_P EXISTS qualified_name RENAME TO name  */
#line 86 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_INDEX;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 21798 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 139: /* RenameStmt: ALTER TABLE relation_expr RENAME opt_column name TO name  */
#line 96 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_COLUMN;
					n->relationType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-5].range);
					n->subname = (yyvsp[-2].str);
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 21813 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 140: /* RenameStmt: ALTER TABLE IF_P EXISTS relation_expr RENAME opt_column name TO name  */
#line 107 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_COLUMN;
					n->relationType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-5].range);
					n->subname = (yyvsp[-2].str);
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 21828 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 141: /* RenameStmt: ALTER TABLE relation_expr RENAME CONSTRAINT name TO name  */
#line 118 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_TABCONSTRAINT;
					n->relation = (yyvsp[-5].range);
					n->subname = (yyvsp[-2].str);
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 21842 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 142: /* RenameStmt: ALTER TABLE IF_P EXISTS relation_expr RENAME CONSTRAINT name TO name  */
#line 128 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_TABCONSTRAINT;
					n->relation = (yyvsp[-5].range);
					n->subname = (yyvsp[-2].str);
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 21856 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 143: /* opt_column: COLUMN  */
#line 140 "third_party/libpg_query/grammar/statements/rename.y"
                                                                                        { (yyval.ival) = COLUMN; }
#line 21862 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 144: /* opt_column: %empty  */
#line 141 "third_party/libpg_query/grammar/statements/rename.y"
                                                                                                { (yyval.ival) = 0; }
#line 21868 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 145: /* InsertStmt: opt_with_clause INSERT opt_or_action INTO insert_target opt_by_name_or_position insert_rest opt_on_conflict returning_clause  */
#line 11 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyvsp[-2].istmt)->relation = (yyvsp[-4].range);
					(yyvsp[-2].istmt)->onConflictAlias = (yyvsp[-6].onconflictshorthand);
					(yyvsp[-2].istmt)->onConflictClause = (yyvsp[-1].onconflict);
					(yyvsp[-2].istmt)->returningList = (yyvsp[0].list);
					(yyvsp[-2].istmt)->withClause = (yyvsp[-8].with);
					(yyvsp[-2].istmt)->insert_column_order = (yyvsp[-3].bynameorposition);
					(yyval.node) = (PGNode *) (yyvsp[-2].istmt);
				}
#line 21882 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 146: /* insert_rest: SelectStmt  */
#line 24 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.istmt) = makeNode(PGInsertStmt);
					(yyval.istmt)->cols = NIL;
					(yyval.istmt)->selectStmt = (yyvsp[0].node);
				}
#line 21892 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 147: /* insert_rest: OVERRIDING override_kind VALUE_P SelectStmt  */
#line 30 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.istmt) = makeNode(PGInsertStmt);
					(yyval.istmt)->cols = NIL;
					(yyval.istmt)->override = (yyvsp[-2].override);
					(yyval.istmt)->selectStmt = (yyvsp[0].node);
				}
#line 21903 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 148: /* insert_rest: '(' insert_column_list ')' SelectStmt  */
#line 37 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.istmt) = makeNode(PGInsertStmt);
					(yyval.istmt)->cols = (yyvsp[-2].list);
					(yyval.istmt)->selectStmt = (yyvsp[0].node);
				}
#line 21913 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 149: /* insert_rest: '(' insert_column_list ')' OVERRIDING override_kind VALUE_P SelectStmt  */
#line 43 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.istmt) = makeNode(PGInsertStmt);
					(yyval.istmt)->cols = (yyvsp[-5].list);
					(yyval.istmt)->override = (yyvsp[-2].override);
					(yyval.istmt)->selectStmt = (yyvsp[0].node);
				}
#line 21924 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 150: /* insert_rest: DEFAULT VALUES  */
#line 50 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.istmt) = makeNode(PGInsertStmt);
					(yyval.istmt)->cols = NIL;
					(yyval.istmt)->selectStmt = NULL;
				}
#line 21934 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 151: /* insert_target: qualified_name  */
#line 60 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.range) = (yyvsp[0].range);
				}
#line 21942 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 152: /* insert_target: qualified_name AS ColId  */
#line 64 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyvsp[-2].range)->alias = makeAlias((yyvsp[0].str), NIL);
					(yyval.range) = (yyvsp[-2].range);
				}
#line 21951 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 153: /* opt_by_name_or_position: BY NAME_P  */
#line 71 "third_party/libpg_query/grammar/statements/insert.y"
                                                        { (yyval.bynameorposition) = PG_INSERT_BY_NAME; }
#line 21957 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 154: /* opt_by_name_or_position: BY POSITION  */
#line 72 "third_party/libpg_query/grammar/statements/insert.y"
                                                { (yyval.bynameorposition) = PG_INSERT_BY_POSITION; }
#line 21963 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 155: /* opt_by_name_or_position: %empty  */
#line 73 "third_party/libpg_query/grammar/statements/insert.y"
                                                { (yyval.bynameorposition) = PG_INSERT_BY_POSITION; }
#line 21969 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 156: /* opt_conf_expr: '(' index_params ')' where_clause  */
#line 78 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.infer) = makeNode(PGInferClause);
					(yyval.infer)->indexElems = (yyvsp[-2].list);
					(yyval.infer)->whereClause = (yyvsp[0].node);
					(yyval.infer)->conname = NULL;
					(yyval.infer)->location = (yylsp[-3]);
				}
#line 21981 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 157: /* opt_conf_expr: ON CONSTRAINT name  */
#line 87 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.infer) = makeNode(PGInferClause);
					(yyval.infer)->indexElems = NIL;
					(yyval.infer)->whereClause = NULL;
					(yyval.infer)->conname = (yyvsp[0].str);
					(yyval.infer)->location = (yylsp[-2]);
				}
#line 21993 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 158: /* opt_conf_expr: %empty  */
#line 95 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.infer) = NULL;
				}
#line 22001 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 159: /* opt_with_clause: with_clause  */
#line 102 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                        { (yyval.with) = (yyvsp[0].with); }
#line 22007 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 160: /* opt_with_clause: %empty  */
#line 103 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                        { (yyval.with) = NULL; }
#line 22013 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 161: /* insert_column_item: ColId opt_indirection  */
#line 109 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = (yyvsp[-1].str);
					(yyval.target)->indirection = check_indirection((yyvsp[0].list), yyscanner);
					(yyval.target)->val = NULL;
					(yyval.target)->location = (yylsp[-1]);
				}
#line 22025 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 162: /* set_clause: set_target '=' a_expr  */
#line 121 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyvsp[-2].target)->val = (PGNode *) (yyvsp[0].node);
					(yyval.list) = list_make1((yyvsp[-2].target));
				}
#line 22034 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 163: /* set_clause: '(' set_target_list ')' '=' a_expr  */
#line 126 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					int ncolumns = list_length((yyvsp[-3].list));
					int i = 1;
					PGListCell *col_cell;

					/* Create a PGMultiAssignRef source for each target */
					foreach(col_cell, (yyvsp[-3].list))
					{
						PGResTarget *res_col = (PGResTarget *) lfirst(col_cell);
						PGMultiAssignRef *r = makeNode(PGMultiAssignRef);

						r->source = (PGNode *) (yyvsp[0].node);
						r->colno = i;
						r->ncolumns = ncolumns;
						res_col->val = (PGNode *) r;
						i++;
					}

					(yyval.list) = (yyvsp[-3].list);
				}
#line 22059 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 164: /* opt_or_action: OR REPLACE  */
#line 151 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.onconflictshorthand) = PG_ONCONFLICT_ALIAS_REPLACE;
				}
#line 22067 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 165: /* opt_or_action: OR IGNORE_P  */
#line 156 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.onconflictshorthand) = PG_ONCONFLICT_ALIAS_IGNORE;
				}
#line 22075 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 166: /* opt_or_action: %empty  */
#line 160 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.onconflictshorthand) = PG_ONCONFLICT_ALIAS_NONE;
				}
#line 22083 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 167: /* opt_on_conflict: ON CONFLICT opt_conf_expr DO UPDATE SET set_clause_list_opt_comma where_clause  */
#line 167 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.onconflict) = makeNode(PGOnConflictClause);
					(yyval.onconflict)->action = PG_ONCONFLICT_UPDATE;
					(yyval.onconflict)->infer = (yyvsp[-5].infer);
					(yyval.onconflict)->targetList = (yyvsp[-1].list);
					(yyval.onconflict)->whereClause = (yyvsp[0].node);
					(yyval.onconflict)->location = (yylsp[-7]);
				}
#line 22096 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 168: /* opt_on_conflict: ON CONFLICT opt_conf_expr DO NOTHING  */
#line 177 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.onconflict) = makeNode(PGOnConflictClause);
					(yyval.onconflict)->action = PG_ONCONFLICT_NOTHING;
					(yyval.onconflict)->infer = (yyvsp[-2].infer);
					(yyval.onconflict)->targetList = NIL;
					(yyval.onconflict)->whereClause = NULL;
					(yyval.onconflict)->location = (yylsp[-4]);
				}
#line 22109 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 169: /* opt_on_conflict: %empty  */
#line 186 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.onconflict) = NULL;
				}
#line 22117 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 170: /* index_elem: ColId opt_collate opt_class opt_asc_desc opt_nulls_order  */
#line 193 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.ielem) = makeNode(PGIndexElem);
					(yyval.ielem)->name = (yyvsp[-4].str);
					(yyval.ielem)->expr = NULL;
					(yyval.ielem)->indexcolname = NULL;
					(yyval.ielem)->collation = (yyvsp[-3].list);
					(yyval.ielem)->opclass = (yyvsp[-2].list);
					(yyval.ielem)->ordering = (yyvsp[-1].sortorder);
					(yyval.ielem)->nulls_ordering = (yyvsp[0].nullorder);
				}
#line 22132 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 171: /* index_elem: func_expr_windowless opt_collate opt_class opt_asc_desc opt_nulls_order  */
#line 204 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.ielem) = makeNode(PGIndexElem);
					(yyval.ielem)->name = NULL;
					(yyval.ielem)->expr = (yyvsp[-4].node);
					(yyval.ielem)->indexcolname = NULL;
					(yyval.ielem)->collation = (yyvsp[-3].list);
					(yyval.ielem)->opclass = (yyvsp[-2].list);
					(yyval.ielem)->ordering = (yyvsp[-1].sortorder);
					(yyval.ielem)->nulls_ordering = (yyvsp[0].nullorder);
				}
#line 22147 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 172: /* index_elem: '(' a_expr ')' opt_collate opt_class opt_asc_desc opt_nulls_order  */
#line 215 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.ielem) = makeNode(PGIndexElem);
					(yyval.ielem)->name = NULL;
					(yyval.ielem)->expr = (yyvsp[-5].node);
					(yyval.ielem)->indexcolname = NULL;
					(yyval.ielem)->collation = (yyvsp[-3].list);
					(yyval.ielem)->opclass = (yyvsp[-2].list);
					(yyval.ielem)->ordering = (yyvsp[-1].sortorder);
					(yyval.ielem)->nulls_ordering = (yyvsp[0].nullorder);
				}
#line 22162 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 173: /* returning_clause: RETURNING target_list  */
#line 229 "third_party/libpg_query/grammar/statements/insert.y"
                                                        { (yyval.list) = (yyvsp[0].list); }
#line 22168 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 174: /* returning_clause: %empty  */
#line 230 "third_party/libpg_query/grammar/statements/insert.y"
                                                                { (yyval.list) = NIL; }
#line 22174 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 175: /* override_kind: USER  */
#line 236 "third_party/libpg_query/grammar/statements/insert.y"
                                        { (yyval.override) = PG_OVERRIDING_USER_VALUE; }
#line 22180 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 176: /* override_kind: SYSTEM_P  */
#line 237 "third_party/libpg_query/grammar/statements/insert.y"
                                        { (yyval.override) = OVERRIDING_SYSTEM_VALUE; }
#line 22186 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 177: /* set_target_list: set_target  */
#line 242 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].target)); }
#line 22192 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 178: /* set_target_list: set_target_list ',' set_target  */
#line 243 "third_party/libpg_query/grammar/statements/insert.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list),(yyvsp[0].target)); }
#line 22198 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 179: /* opt_collate: COLLATE any_name  */
#line 249 "third_party/libpg_query/grammar/statements/insert.y"
                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 22204 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 180: /* opt_collate: %empty  */
#line 250 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                                { (yyval.list) = NIL; }
#line 22210 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 181: /* opt_class: any_name  */
#line 254 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 22216 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 182: /* opt_class: %empty  */
#line 255 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                                { (yyval.list) = NIL; }
#line 22222 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 183: /* insert_column_list: insert_column_item  */
#line 261 "third_party/libpg_query/grammar/statements/insert.y"
                                        { (yyval.list) = list_make1((yyvsp[0].target)); }
#line 22228 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 184: /* insert_column_list: insert_column_list ',' insert_column_item  */
#line 263 "third_party/libpg_query/grammar/statements/insert.y"
                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].target)); }
#line 22234 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 185: /* set_clause_list: set_clause  */
#line 268 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 22240 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 186: /* set_clause_list: set_clause_list ',' set_clause  */
#line 269 "third_party/libpg_query/grammar/statements/insert.y"
                                                                { (yyval.list) = list_concat((yyvsp[-2].list),(yyvsp[0].list)); }
#line 22246 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 187: /* set_clause_list_opt_comma: set_clause_list  */
#line 273 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 22252 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 188: /* set_clause_list_opt_comma: set_clause_list ','  */
#line 274 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 22258 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 189: /* index_params: index_elem  */
#line 277 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                { (yyval.list) = list_make1((yyvsp[0].ielem)); }
#line 22264 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 190: /* index_params: index_params ',' index_elem  */
#line 278 "third_party/libpg_query/grammar/statements/insert.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].ielem)); }
#line 22270 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 191: /* set_target: ColId opt_indirection  */
#line 284 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = (yyvsp[-1].str);
					(yyval.target)->indirection = check_indirection((yyvsp[0].list), yyscanner);
					(yyval.target)->val = NULL;	/* upper production sets this */
					(yyval.target)->location = (yylsp[-1]);
				}
#line 22282 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 192: /* CreateTypeStmt: CREATE_P TYPE_P qualified_name AS ENUM_P select_with_parens  */
#line 8 "third_party/libpg_query/grammar/statements/create_type.y"
                                {
					PGCreateTypeStmt *n = makeNode(PGCreateTypeStmt);
					n->typeName = (yyvsp[-3].range);
					n->kind = PG_NEWTYPE_ENUM;
					n->query = (yyvsp[0].node);
					n->vals = NULL;
					(yyval.node) = (PGNode *)n;
				}
#line 22295 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 193: /* CreateTypeStmt: CREATE_P TYPE_P qualified_name AS ENUM_P '(' opt_enum_val_list ')'  */
#line 17 "third_party/libpg_query/grammar/statements/create_type.y"
                                {
					PGCreateTypeStmt *n = makeNode(PGCreateTypeStmt);
					n->typeName = (yyvsp[-5].range);
					n->kind = PG_NEWTYPE_ENUM;
					n->vals = (yyvsp[-1].list);
					n->query = NULL;
					(yyval.node) = (PGNode *)n;
				}
#line 22308 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 194: /* CreateTypeStmt: CREATE_P TYPE_P qualified_name AS Typename  */
#line 26 "third_party/libpg_query/grammar/statements/create_type.y"
                                {
					PGCreateTypeStmt *n = makeNode(PGCreateTypeStmt);
					n->typeName = (yyvsp[-2].range);
					n->query = NULL;
					auto name = std::string(reinterpret_cast<PGValue *>((yyvsp[0].typnam)->names->tail->data.ptr_value)->val.str);
					if (name == "enum") {
						n->kind = PG_NEWTYPE_ENUM;
						n->vals = (yyvsp[0].typnam)->typmods;
					} else {
						n->kind = PG_NEWTYPE_ALIAS;
						n->ofType = (yyvsp[0].typnam);
					}
					(yyval.node) = (PGNode *)n;
				}
#line 22327 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 195: /* opt_enum_val_list: enum_val_list  */
#line 46 "third_party/libpg_query/grammar/statements/create_type.y"
                                      { (yyval.list) = (yyvsp[0].list);}
#line 22333 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 196: /* opt_enum_val_list: %empty  */
#line 47 "third_party/libpg_query/grammar/statements/create_type.y"
                                                        {(yyval.list) = NIL;}
#line 22339 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 197: /* enum_val_list: Sconst  */
#line 51 "third_party/libpg_query/grammar/statements/create_type.y"
                                {
					(yyval.list) = list_make1(makeStringConst((yyvsp[0].str), (yylsp[0])));
				}
#line 22347 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 198: /* enum_val_list: enum_val_list ',' Sconst  */
#line 55 "third_party/libpg_query/grammar/statements/create_type.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), makeStringConst((yyvsp[0].str), (yylsp[0])));
				}
#line 22355 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 199: /* PragmaStmt: PRAGMA_P ColId  */
#line 8 "third_party/libpg_query/grammar/statements/pragma.y"
                                {
					PGPragmaStmt *n = makeNode(PGPragmaStmt);
					n->kind = PG_PRAGMA_TYPE_NOTHING;
					n->name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 22366 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 200: /* PragmaStmt: PRAGMA_P ColId '=' var_list  */
#line 15 "third_party/libpg_query/grammar/statements/pragma.y"
                                {
					PGPragmaStmt *n = makeNode(PGPragmaStmt);
					n->kind = PG_PRAGMA_TYPE_ASSIGNMENT;
					n->name = (yyvsp[-2].str);
					n->args = (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 22378 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 201: /* PragmaStmt: PRAGMA_P ColId '(' func_arg_list ')'  */
#line 23 "third_party/libpg_query/grammar/statements/pragma.y"
                                {
					PGPragmaStmt *n = makeNode(PGPragmaStmt);
					n->kind = PG_PRAGMA_TYPE_CALL;
					n->name = (yyvsp[-3].str);
					n->args = (yyvsp[-1].list);
					(yyval.node) = (PGNode *)n;
				}
#line 22390 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 202: /* CreateSeqStmt: CREATE_P OptTemp SEQUENCE qualified_name OptSeqOptList  */
#line 10 "third_party/libpg_query/grammar/statements/create_sequence.y"
                                {
					PGCreateSeqStmt *n = makeNode(PGCreateSeqStmt);
					(yyvsp[-1].range)->relpersistence = (yyvsp[-3].ival);
					n->sequence = (yyvsp[-1].range);
					n->options = (yyvsp[0].list);
					n->ownerId = InvalidOid;
					n->onconflict = PG_ERROR_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 22404 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 203: /* CreateSeqStmt: CREATE_P OptTemp SEQUENCE IF_P NOT EXISTS qualified_name OptSeqOptList  */
#line 20 "third_party/libpg_query/grammar/statements/create_sequence.y"
                                {
					PGCreateSeqStmt *n = makeNode(PGCreateSeqStmt);
					(yyvsp[-1].range)->relpersistence = (yyvsp[-6].ival);
					n->sequence = (yyvsp[-1].range);
					n->options = (yyvsp[0].list);
					n->ownerId = InvalidOid;
					n->onconflict = PG_IGNORE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 22418 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 204: /* CreateSeqStmt: CREATE_P OR REPLACE OptTemp SEQUENCE qualified_name OptSeqOptList  */
#line 30 "third_party/libpg_query/grammar/statements/create_sequence.y"
                                {
					PGCreateSeqStmt *n = makeNode(PGCreateSeqStmt);
					(yyvsp[-1].range)->relpersistence = (yyvsp[-3].ival);
					n->sequence = (yyvsp[-1].range);
					n->options = (yyvsp[0].list);
					n->ownerId = InvalidOid;
					n->onconflict = PG_REPLACE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 22432 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 205: /* OptSeqOptList: SeqOptList  */
#line 42 "third_party/libpg_query/grammar/statements/create_sequence.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 22438 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 206: /* OptSeqOptList: %empty  */
#line 43 "third_party/libpg_query/grammar/statements/create_sequence.y"
                                                                                                { (yyval.list) = NIL; }
#line 22444 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 207: /* CreateSecretStmt: CREATE_P opt_persist SECRET opt_secret_name opt_storage_specifier '(' copy_generic_opt_list ')'  */
#line 8 "third_party/libpg_query/grammar/statements/create_secret.y"
                                {
					PGCreateSecretStmt *n = makeNode(PGCreateSecretStmt);
					n->persist_type = (yyvsp[-6].str);
					n->secret_name = (yyvsp[-4].str);
					n->secret_storage = (yyvsp[-3].str);
					n->options = (yyvsp[-1].list);
					n->onconflict = PG_ERROR_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 22458 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 208: /* CreateSecretStmt: CREATE_P opt_persist SECRET IF_P NOT EXISTS opt_secret_name opt_storage_specifier '(' copy_generic_opt_list ')'  */
#line 18 "third_party/libpg_query/grammar/statements/create_secret.y"
                                {
					PGCreateSecretStmt *n = makeNode(PGCreateSecretStmt);
					n->persist_type = (yyvsp[-9].str);
					n->secret_name = (yyvsp[-4].str);
					n->secret_storage = (yyvsp[-3].str);
					n->options = (yyvsp[-1].list);
					n->onconflict = PG_IGNORE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 22472 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 209: /* CreateSecretStmt: CREATE_P OR REPLACE opt_persist SECRET opt_secret_name opt_storage_specifier '(' copy_generic_opt_list ')'  */
#line 28 "third_party/libpg_query/grammar/statements/create_secret.y"
                                {
					PGCreateSecretStmt *n = makeNode(PGCreateSecretStmt);
					n->persist_type = (yyvsp[-6].str);
					n->secret_name = (yyvsp[-4].str);
					n->secret_storage = (yyvsp[-3].str);
					n->options = (yyvsp[-1].list);
					n->onconflict = PG_REPLACE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 22486 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 210: /* opt_secret_name: %empty  */
#line 40 "third_party/libpg_query/grammar/statements/create_secret.y"
                    { (yyval.str) = NULL; }
#line 22492 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 211: /* opt_secret_name: ColId  */
#line 41 "third_party/libpg_query/grammar/statements/create_secret.y"
                { (yyval.str) = (yyvsp[0].str); }
#line 22498 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 212: /* opt_persist: %empty  */
#line 45 "third_party/libpg_query/grammar/statements/create_secret.y"
                                                    { (yyval.str) = pstrdup("default"); }
#line 22504 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 213: /* opt_persist: TEMPORARY  */
#line 46 "third_party/libpg_query/grammar/statements/create_secret.y"
                                                    { (yyval.str) = pstrdup("temporary"); }
#line 22510 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 214: /* opt_persist: PERSISTENT  */
#line 47 "third_party/libpg_query/grammar/statements/create_secret.y"
                                                    { (yyval.str) = pstrdup("persistent"); }
#line 22516 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 215: /* opt_storage_specifier: %empty  */
#line 51 "third_party/libpg_query/grammar/statements/create_secret.y"
                                                    { (yyval.str) = pstrdup(""); }
#line 22522 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 216: /* opt_storage_specifier: IN_P IDENT  */
#line 52 "third_party/libpg_query/grammar/statements/create_secret.y"
                                                    { (yyval.str) = (yyvsp[0].str); }
#line 22528 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 217: /* ExecuteStmt: EXECUTE name execute_param_clause  */
#line 8 "third_party/libpg_query/grammar/statements/execute.y"
                                {
					PGExecuteStmt *n = makeNode(PGExecuteStmt);
					n->name = (yyvsp[-1].str);
					n->params = (yyvsp[0].list);
					(yyval.node) = (PGNode *) n;
				}
#line 22539 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 218: /* ExecuteStmt: CREATE_P OptTemp TABLE create_as_target AS EXECUTE name execute_param_clause opt_with_data  */
#line 16 "third_party/libpg_query/grammar/statements/execute.y"
                                {
					PGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);
					PGExecuteStmt *n = makeNode(PGExecuteStmt);
					n->name = (yyvsp[-2].str);
					n->params = (yyvsp[-1].list);
					ctas->query = (PGNode *) n;
					ctas->into = (yyvsp[-5].into);
					ctas->relkind = PG_OBJECT_TABLE;
					ctas->is_select_into = false;
					ctas->onconflict = PG_ERROR_ON_CONFLICT;
					/* cram additional flags into the PGIntoClause */
					(yyvsp[-5].into)->rel->relpersistence = (yyvsp[-7].ival);
					(yyvsp[-5].into)->skipData = !((yyvsp[0].boolean));
					(yyval.node) = (PGNode *) ctas;
				}
#line 22559 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 219: /* ExecuteStmt: CREATE_P OptTemp TABLE IF_P NOT EXISTS create_as_target AS EXECUTE name execute_param_clause opt_with_data  */
#line 33 "third_party/libpg_query/grammar/statements/execute.y"
                                {
					PGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);
					PGExecuteStmt *n = makeNode(PGExecuteStmt);
					n->name = (yyvsp[-2].str);
					n->params = (yyvsp[-1].list);
					ctas->query = (PGNode *) n;
					ctas->into = (yyvsp[-5].into);
					ctas->relkind = PG_OBJECT_TABLE;
					ctas->is_select_into = false;
					ctas->onconflict = PG_IGNORE_ON_CONFLICT;
					/* cram additional flags into the PGIntoClause */
					(yyvsp[-5].into)->rel->relpersistence = (yyvsp[-10].ival);
					(yyvsp[-5].into)->skipData = !((yyvsp[0].boolean));
					(yyval.node) = (PGNode *) ctas;
				}
#line 22579 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 220: /* execute_param_expr: a_expr  */
#line 52 "third_party/libpg_query/grammar/statements/execute.y"
                                {
					(yyval.node) = (yyvsp[0].node);
				}
#line 22587 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 221: /* execute_param_expr: param_name COLON_EQUALS a_expr  */
#line 56 "third_party/libpg_query/grammar/statements/execute.y"
                                {
					PGNamedArgExpr *na = makeNode(PGNamedArgExpr);
					na->name = (yyvsp[-2].str);
					na->arg = (PGExpr *) (yyvsp[0].node);
					na->argnumber = -1;		/* until determined */
					na->location = (yylsp[-2]);
					(yyval.node) = (PGNode *) na;
				}
#line 22600 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 222: /* execute_param_list: execute_param_expr  */
#line 66 "third_party/libpg_query/grammar/statements/execute.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 22608 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 223: /* execute_param_list: execute_param_list ',' execute_param_expr  */
#line 70 "third_party/libpg_query/grammar/statements/execute.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 22616 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 224: /* execute_param_clause: '(' execute_param_list ')'  */
#line 75 "third_party/libpg_query/grammar/statements/execute.y"
                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 22622 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 225: /* execute_param_clause: %empty  */
#line 76 "third_party/libpg_query/grammar/statements/execute.y"
                                                                                        { (yyval.list) = NIL; }
#line 22628 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 226: /* AlterSeqStmt: ALTER SEQUENCE qualified_name SeqOptList  */
#line 10 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					PGAlterSeqStmt *n = makeNode(PGAlterSeqStmt);
					n->sequence = (yyvsp[-1].range);
					n->options = (yyvsp[0].list);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 22640 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 227: /* AlterSeqStmt: ALTER SEQUENCE IF_P EXISTS qualified_name SeqOptList  */
#line 18 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					PGAlterSeqStmt *n = makeNode(PGAlterSeqStmt);
					n->sequence = (yyvsp[-1].range);
					n->options = (yyvsp[0].list);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 22652 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 228: /* SeqOptList: SeqOptElem  */
#line 29 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                { (yyval.list) = list_make1((yyvsp[0].defelt)); }
#line 22658 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 229: /* SeqOptList: SeqOptList SeqOptElem  */
#line 30 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].defelt)); }
#line 22664 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 230: /* opt_with: WITH  */
#line 34 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                        {}
#line 22670 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 231: /* opt_with: WITH_LA  */
#line 35 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                                {}
#line 22676 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 232: /* opt_with: %empty  */
#line 36 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                                {}
#line 22682 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 233: /* NumericOnly: FCONST  */
#line 41 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                        { (yyval.value) = makeFloat((yyvsp[0].str)); }
#line 22688 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 234: /* NumericOnly: '+' FCONST  */
#line 42 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                { (yyval.value) = makeFloat((yyvsp[0].str)); }
#line 22694 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 235: /* NumericOnly: '-' FCONST  */
#line 44 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.value) = makeFloat((yyvsp[0].str));
					doNegateFloat((yyval.value));
				}
#line 22703 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 236: /* NumericOnly: SignedIconst  */
#line 48 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                { (yyval.value) = makeInteger((yyvsp[0].ival)); }
#line 22709 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 237: /* SeqOptElem: AS SimpleTypename  */
#line 53 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("as", (PGNode *)(yyvsp[0].typnam), (yylsp[-1]));
				}
#line 22717 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 238: /* SeqOptElem: CACHE NumericOnly  */
#line 57 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("cache", (PGNode *)(yyvsp[0].value), (yylsp[-1]));
				}
#line 22725 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 239: /* SeqOptElem: CYCLE  */
#line 61 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("cycle", (PGNode *)makeInteger(true), (yylsp[0]));
				}
#line 22733 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 240: /* SeqOptElem: NO CYCLE  */
#line 65 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("cycle", (PGNode *)makeInteger(false), (yylsp[-1]));
				}
#line 22741 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 241: /* SeqOptElem: INCREMENT opt_by NumericOnly  */
#line 69 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("increment", (PGNode *)(yyvsp[0].value), (yylsp[-2]));
				}
#line 22749 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 242: /* SeqOptElem: MAXVALUE NumericOnly  */
#line 73 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("maxvalue", (PGNode *)(yyvsp[0].value), (yylsp[-1]));
				}
#line 22757 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 243: /* SeqOptElem: MINVALUE NumericOnly  */
#line 77 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("minvalue", (PGNode *)(yyvsp[0].value), (yylsp[-1]));
				}
#line 22765 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 244: /* SeqOptElem: NO MAXVALUE  */
#line 81 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("maxvalue", NULL, (yylsp[-1]));
				}
#line 22773 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 245: /* SeqOptElem: NO MINVALUE  */
#line 85 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("minvalue", NULL, (yylsp[-1]));
				}
#line 22781 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 246: /* SeqOptElem: OWNED BY any_name  */
#line 89 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("owned_by", (PGNode *)(yyvsp[0].list), (yylsp[-2]));
				}
#line 22789 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 247: /* SeqOptElem: SEQUENCE NAME_P any_name  */
#line 93 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					/* not documented, only used by pg_dump */
					(yyval.defelt) = makeDefElem("sequence_name", (PGNode *)(yyvsp[0].list), (yylsp[-2]));
				}
#line 22798 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 248: /* SeqOptElem: START opt_with NumericOnly  */
#line 98 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("start", (PGNode *)(yyvsp[0].value), (yylsp[-2]));
				}
#line 22806 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 249: /* SeqOptElem: RESTART  */
#line 102 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("restart", NULL, (yylsp[0]));
				}
#line 22814 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 250: /* SeqOptElem: RESTART opt_with NumericOnly  */
#line 106 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("restart", (PGNode *)(yyvsp[0].value), (yylsp[-2]));
				}
#line 22822 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 251: /* opt_by: BY  */
#line 112 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                {}
#line 22828 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 252: /* opt_by: %empty  */
#line 113 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                        {}
#line 22834 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 253: /* SignedIconst: Iconst  */
#line 117 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                { (yyval.ival) = (yyvsp[0].ival); }
#line 22840 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 254: /* SignedIconst: '+' Iconst  */
#line 118 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                        { (yyval.ival) = + (yyvsp[0].ival); }
#line 22846 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 255: /* SignedIconst: '-' Iconst  */
#line 119 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                        { (yyval.ival) = - (yyvsp[0].ival); }
#line 22852 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 256: /* DropSecretStmt: DROP opt_persist SECRET ColId opt_storage_drop_specifier  */
#line 8 "third_party/libpg_query/grammar/statements/drop_secret.y"
                                {
					PGDropSecretStmt *n = makeNode(PGDropSecretStmt);
					n->persist_type = (yyvsp[-3].str);
					n->secret_name = (yyvsp[-1].str);
					n->secret_storage = (yyvsp[0].str);
					n->missing_ok  = false;
					(yyval.node) = (PGNode *)n;
				}
#line 22865 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 257: /* DropSecretStmt: DROP opt_persist SECRET IF_P EXISTS ColId opt_storage_drop_specifier  */
#line 17 "third_party/libpg_query/grammar/statements/drop_secret.y"
                {
                    PGDropSecretStmt *n = makeNode(PGDropSecretStmt);
                    n->persist_type = (yyvsp[-5].str);
                    n->secret_name = (yyvsp[-1].str);
                    n->secret_storage = (yyvsp[0].str);
                    n->missing_ok  = true;
                    (yyval.node) = (PGNode *)n;
                }
#line 22878 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 258: /* opt_storage_drop_specifier: %empty  */
#line 28 "third_party/libpg_query/grammar/statements/drop_secret.y"
                                                    { (yyval.str) = pstrdup(""); }
#line 22884 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 259: /* opt_storage_drop_specifier: FROM IDENT  */
#line 29 "third_party/libpg_query/grammar/statements/drop_secret.y"
                                                    { (yyval.str) = (yyvsp[0].str); }
#line 22890 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 260: /* TransactionStmt: ABORT_P opt_transaction  */
#line 3 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_ROLLBACK;
					n->options = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 22901 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 261: /* TransactionStmt: BEGIN_P opt_transaction  */
#line 10 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_BEGIN;
					(yyval.node) = (PGNode *)n;
				}
#line 22911 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 262: /* TransactionStmt: START opt_transaction  */
#line 16 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_START;
					(yyval.node) = (PGNode *)n;
				}
#line 22921 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 263: /* TransactionStmt: COMMIT opt_transaction  */
#line 22 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_COMMIT;
					n->options = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 22932 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 264: /* TransactionStmt: END_P opt_transaction  */
#line 29 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_COMMIT;
					n->options = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 22943 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 265: /* TransactionStmt: ROLLBACK opt_transaction  */
#line 36 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_ROLLBACK;
					n->options = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 22954 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 266: /* opt_transaction: WORK  */
#line 45 "third_party/libpg_query/grammar/statements/transaction.y"
                                                                                {}
#line 22960 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 267: /* opt_transaction: TRANSACTION  */
#line 46 "third_party/libpg_query/grammar/statements/transaction.y"
                                                                                        {}
#line 22966 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 268: /* opt_transaction: %empty  */
#line 47 "third_party/libpg_query/grammar/statements/transaction.y"
                                                                                                {}
#line 22972 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 269: /* UseStmt: USE_P qualified_name  */
#line 3 "third_party/libpg_query/grammar/statements/use.y"
                                {
					PGUseStmt *n = makeNode(PGUseStmt);
					n->name = (yyvsp[0].range);
					(yyval.node) = (PGNode *) n;
				}
#line 22982 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 270: /* PGQ_IDENT: IDENT  */
#line 40 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 22988 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 271: /* PGQ_IDENT: unreserved_keyword  */
#line 41 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 22994 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 272: /* PGQ_IDENT: pgq_col_name_keyword  */
#line 42 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                                        { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 23000 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 273: /* DropPropertyGraphStmt: DROP PROPERTY GRAPH qualified_name opt_drop_behavior  */
#line 51 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGDropPropertyGraphStmt *n = makeNode(PGDropPropertyGraphStmt);
				n->name = (yyvsp[-1].range);
				n->behavior = (yyvsp[0].dbehavior);
				(yyval.node) = (PGNode *)n;
			}
#line 23011 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 278: /* EdgeTablesClauseOptional: EdgeOrRelationship TABLES '(' EdgeTableDefinition EdgeTableDefinitionList ')'  */
#line 76 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                                    { (yyval.list) = (yyvsp[-1].list)?lappend((yyvsp[-1].list),(yyvsp[-2].node)):list_make1((yyvsp[-2].node)); }
#line 23017 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 279: /* EdgeTablesClauseOptional: %empty  */
#line 78 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                                    { (yyval.list) = NULL; }
#line 23023 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 280: /* CreatePropertyGraphStmt: CREATE_P PROPERTY GRAPH qualified_name VertexOrNode TABLES '(' VertexTableDefinition VertexTableDefinitionList ')' EdgeTablesClauseOptional  */
#line 85 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGCreatePropertyGraphStmt *n = makeNode(PGCreatePropertyGraphStmt);
				n->name = (yyvsp[-7].range);
				n->vertex_tables = (yyvsp[-2].list)?lappend((yyvsp[-2].list),(yyvsp[-3].node)):list_make1((yyvsp[-3].node));
				n->edge_tables = (yyvsp[0].list);
				n->onconflict = PG_ERROR_ON_CONFLICT;
				(yyval.node) = (PGNode *)n;
			}
#line 23036 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 281: /* CreatePropertyGraphStmt: CREATE_P OR REPLACE PROPERTY GRAPH qualified_name VertexOrNode TABLES '(' VertexTableDefinition VertexTableDefinitionList ')' EdgeTablesClauseOptional  */
#line 98 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
        				PGCreatePropertyGraphStmt *n = makeNode(PGCreatePropertyGraphStmt);
        				n->name = (yyvsp[-7].range);
        				n->vertex_tables = (yyvsp[-2].list)?lappend((yyvsp[-2].list),(yyvsp[-3].node)):list_make1((yyvsp[-3].node));
        				n->edge_tables = (yyvsp[0].list);
        				n->onconflict = PG_REPLACE_ON_CONFLICT;
        				(yyval.node) = (PGNode *)n;
        			}
#line 23049 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 282: /* VertexTableDefinitionList: ',' VertexTableDefinition VertexTableDefinitionList  */
#line 111 "third_party/libpg_query/grammar/statements/pgq.y"
                                                { (yyval.list) = (yyvsp[0].list)?lappend((yyvsp[0].list),(yyvsp[-1].node)):list_make1((yyvsp[-1].node)); }
#line 23055 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 283: /* VertexTableDefinitionList: %empty  */
#line 113 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.list) = NULL; }
#line 23061 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 284: /* KeySpecification: '(' name_list ')'  */
#line 117 "third_party/libpg_query/grammar/statements/pgq.y"
                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 23067 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 285: /* KeyDefinition: KEY KeySpecification  */
#line 121 "third_party/libpg_query/grammar/statements/pgq.y"
                                                { (yyval.list) = (yyvsp[0].list); }
#line 23073 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 286: /* KeyReference: KeyDefinition REFERENCES  */
#line 125 "third_party/libpg_query/grammar/statements/pgq.y"
                                                { (yyval.list) = (yyvsp[-1].list); }
#line 23079 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 287: /* LabelList: PGQ_IDENT  */
#line 129 "third_party/libpg_query/grammar/statements/pgq.y"
                                    { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 23085 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 288: /* LabelList: LabelList ',' PGQ_IDENT  */
#line 130 "third_party/libpg_query/grammar/statements/pgq.y"
                                    { (yyval.list) = lappend((yyvsp[-2].list), makeString((yyvsp[0].str))); }
#line 23091 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 289: /* LabelOptional: LABEL PGQ_IDENT  */
#line 134 "third_party/libpg_query/grammar/statements/pgq.y"
                    { (yyval.str) = (yyvsp[0].str); }
#line 23097 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 290: /* LabelOptional: %empty  */
#line 135 "third_party/libpg_query/grammar/statements/pgq.y"
                    { (yyval.str) = NULL; }
#line 23103 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 291: /* Discriminator: IN_P qualified_name '(' LabelList ')'  */
#line 140 "third_party/libpg_query/grammar/statements/pgq.y"
                        { 
				PGPropertyGraphTable *n = makeNode(PGPropertyGraphTable);
				n->discriminator = (yyvsp[-3].range); /* a BIGINT column with 64 bits to set detailed label membership */
				n->labels = (yyvsp[-1].list); /* there is a list of up to 64 labels */
				(yyval.node) = (PGNode*) n;
			}
#line 23114 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 292: /* Discriminator: %empty  */
#line 148 "third_party/libpg_query/grammar/statements/pgq.y"
                        { 
				PGPropertyGraphTable *n = makeNode(PGPropertyGraphTable);
				n->discriminator = NULL; /* no discriminator */
				n->labels = NULL; /* no list, just the single staring PGQ_IDENT */
				(yyval.node) = (PGNode*) n;
			}
#line 23125 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 293: /* VertexTableDefinition: QualifiednameOptionalAs PropertiesClause LabelOptional Discriminator  */
#line 159 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGPropertyGraphTable *n = (PGPropertyGraphTable*) (yyvsp[0].node);
				n->table = (yyvsp[-3].list);
				n->properties = (yyvsp[-2].list);
				/* Xth label in list is set iff discriminator Xth-bit==1 */
				if (n->labels) n->labels = lappend(n->labels,makeString((yyvsp[-1].str)));
				else n->labels = list_make1(makeString((yyvsp[-1].str)));
				n->is_vertex_table = true;
				(yyval.node) = (PGNode *) n;
			}
#line 23140 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 294: /* EdgeTableDefinitionList: ',' EdgeTableDefinition EdgeTableDefinitionList  */
#line 173 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                        { (yyval.list) = (yyvsp[0].list)?lappend((yyvsp[0].list),(yyvsp[-1].node)):list_make1((yyvsp[-1].node)); }
#line 23146 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 295: /* EdgeTableDefinitionList: %empty  */
#line 175 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.list) = NULL; }
#line 23152 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 296: /* EdgeTableDefinition: QualifiednameOptionalAs SOURCE KeyReference qualified_name KeySpecification DESTINATION KeyReference qualified_name KeySpecification PropertiesClause LabelOptional Discriminator  */
#line 183 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGPropertyGraphTable *n = (PGPropertyGraphTable*) (yyvsp[0].node);
				n->table = (yyvsp[-11].list);
				n->is_vertex_table = false;
				n->src_fk = (yyvsp[-9].list);
				n->src_name = (yyvsp[-8].range);
				n->src_pk = (yyvsp[-7].list);
				n->dst_fk = (yyvsp[-5].list);
				n->dst_name = (yyvsp[-4].range);
				n->dst_pk = (yyvsp[-3].list);
				n->properties = (yyvsp[-2].list);
				/* Xth label in list is set iff discriminator Xth-bit==1 */
				if (n->labels) n->labels = lappend(n->labels,makeString((yyvsp[-1].str)));
				else n->labels = list_make1(makeString((yyvsp[-1].str)));
				(yyval.node) = (PGNode *) n;
			}
#line 23173 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 299: /* IdentOptionalAs: PGQ_IDENT  */
#line 208 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                    { (yyval.list) = list_make2(makeString((yyvsp[0].str)), makeString((yyvsp[0].str))); }
#line 23179 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 300: /* IdentOptionalAs: PGQ_IDENT AS PGQ_IDENT  */
#line 210 "third_party/libpg_query/grammar/statements/pgq.y"
                                                        { (yyval.list) = list_make2(makeString((yyvsp[-2].str)), makeString((yyvsp[0].str))); }
#line 23185 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 301: /* QualifiednameOptionalAs: qualified_name  */
#line 214 "third_party/libpg_query/grammar/statements/pgq.y"
                                        { (yyval.list) = list_make2((yyvsp[0].range), makeString("")); }
#line 23191 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 302: /* QualifiednameOptionalAs: qualified_name AS PGQ_IDENT  */
#line 216 "third_party/libpg_query/grammar/statements/pgq.y"
                                        { (yyval.list) = list_make2((yyvsp[-2].range), makeString((yyvsp[0].str))); }
#line 23197 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 303: /* PropertiesList: IdentOptionalAs  */
#line 220 "third_party/libpg_query/grammar/statements/pgq.y"
                                                { (yyval.list) = list_make1((yyvsp[0].list)); }
#line 23203 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 304: /* PropertiesList: PropertiesList ',' IdentOptionalAs  */
#line 223 "third_party/libpg_query/grammar/statements/pgq.y"
                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].list)); }
#line 23209 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 305: /* ExceptOptional: EXCEPT '(' PropertiesList ')'  */
#line 228 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 23215 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 306: /* ExceptOptional: %empty  */
#line 230 "third_party/libpg_query/grammar/statements/pgq.y"
                                                        { (yyval.list) = NULL; }
#line 23221 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 307: /* PropertiesSpec: AreOptional ALL COLUMNS ExceptOptional  */
#line 235 "third_party/libpg_query/grammar/statements/pgq.y"
                        { 
				(yyval.list) = list_make1(list_make2(makeString("*"), makeString("*")));
				if ((yyvsp[0].list)) (yyval.list) = list_concat((yyval.list),(yyvsp[0].list)); 
			}
#line 23230 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 308: /* PropertiesSpec: '(' PropertiesList ')'  */
#line 240 "third_party/libpg_query/grammar/statements/pgq.y"
                                        { (yyval.list) = (yyvsp[-1].list); }
#line 23236 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 309: /* PropertiesClause: NO PROPERTIES  */
#line 244 "third_party/libpg_query/grammar/statements/pgq.y"
                                                { (yyval.list) = NULL; }
#line 23242 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 310: /* PropertiesClause: PROPERTIES PropertiesSpec  */
#line 247 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.list) = (yyvsp[0].list); }
#line 23248 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 311: /* PropertiesClause: %empty  */
#line 249 "third_party/libpg_query/grammar/statements/pgq.y"
                                                        { (yyval.list) = list_make1(list_make2(makeString("*"), makeString("*"))); }
#line 23254 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 312: /* GraphTableWhereOptional: WHERE pgq_expr  */
#line 258 "third_party/libpg_query/grammar/statements/pgq.y"
                                                { (yyval.node) = (yyvsp[0].node); }
#line 23260 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 313: /* GraphTableWhereOptional: %empty  */
#line 260 "third_party/libpg_query/grammar/statements/pgq.y"
                                                        { (yyval.node) = NULL; }
#line 23266 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 314: /* GraphTableNameOptional: qualified_name  */
#line 264 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.range) = (yyvsp[0].range); }
#line 23272 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 315: /* GraphTableNameOptional: %empty  */
#line 266 "third_party/libpg_query/grammar/statements/pgq.y"
                                                { (yyval.range) = NULL; }
#line 23278 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 316: /* ColumnsOptional: COLUMNS '(' target_list_opt_comma ')'  */
#line 270 "third_party/libpg_query/grammar/statements/pgq.y"
                                              { (yyval.list) = (yyvsp[-1].list); }
#line 23284 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 317: /* ColumnsOptional: %empty  */
#line 273 "third_party/libpg_query/grammar/statements/pgq.y"
            {
                PGAStar *star = makeNode(PGAStar);
                (yyval.list) = list_make1(star);
            }
#line 23293 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 318: /* GraphTableStmt: '(' PGQ_IDENT MATCH PathPatternList KeepOptional GraphTableWhereOptional ColumnsOptional ')' GraphTableNameOptional  */
#line 283 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGMatchClause *n = makeNode(PGMatchClause);
				n->pg_name = (yyvsp[-7].str);
				n->paths = (yyvsp[-5].list);
				if ((yyvsp[-4].node)) {
					/* we massage away 'keep' functionality immediately */
					PGPathPattern *keep = (PGPathPattern*) (yyvsp[-4].node);
					PGListCell *list = list_head(n->paths);
					while(list) {
						PGPathPattern *p = (PGPathPattern*) lfirst(list);
						PGList *backup = p->path;
						*p = *keep; /* copy path spec into all paths */
						p->path = backup; /* restore */
						list = lnext(list);
					}
				}
				n->where_clause = (yyvsp[-3].node);
				n->columns = (yyvsp[-2].list);
				n->graph_table = (yyvsp[0].range);
				(yyval.node) = (PGNode *) n;
			}
#line 23319 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 319: /* KeepOptional: KEEP PathPrefix  */
#line 318 "third_party/libpg_query/grammar/statements/pgq.y"
                                                        { (yyval.node) = (yyvsp[0].node); }
#line 23325 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 320: /* KeepOptional: %empty  */
#line 320 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.node) = NULL; }
#line 23331 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 324: /* GroupOrGroupsOptional: GROUP_P  */
#line 328 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.ival) = 1; }
#line 23337 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 325: /* GroupOrGroupsOptional: GROUPS  */
#line 330 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.ival) = 1; }
#line 23343 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 326: /* GroupOrGroupsOptional: %empty  */
#line 332 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.ival) = 0; }
#line 23349 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 327: /* PathVariableOptional: PGQ_IDENT '='  */
#line 336 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.keyword) = (yyvsp[-1].str); }
#line 23355 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 328: /* PathVariableOptional: %empty  */
#line 338 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.keyword) = NULL;}
#line 23361 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 329: /* PathModeOptional: WALK PathOrPathsOptional  */
#line 342 "third_party/libpg_query/grammar/statements/pgq.y"
                                                { (yyval.ival) = PG_PATHMODE_WALK; }
#line 23367 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 330: /* PathModeOptional: TRAIL PathOrPathsOptional  */
#line 344 "third_party/libpg_query/grammar/statements/pgq.y"
                                                { (yyval.ival) = PG_PATHMODE_TRAIL; }
#line 23373 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 331: /* PathModeOptional: SIMPLE PathOrPathsOptional  */
#line 346 "third_party/libpg_query/grammar/statements/pgq.y"
                                                { (yyval.ival) = PG_PATHMODE_SIMPLE; }
#line 23379 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 332: /* PathModeOptional: ACYCLIC PathOrPathsOptional  */
#line 348 "third_party/libpg_query/grammar/statements/pgq.y"
                                                { (yyval.ival) = PG_PATHMODE_ACYCLIC; }
#line 23385 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 333: /* PathModeOptional: PathOrPathsOptional  */
#line 350 "third_party/libpg_query/grammar/statements/pgq.y"
                                                        { (yyval.ival) = PG_PATHMODE_WALK; }
#line 23391 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 334: /* TopKOptional: ICONST  */
#line 354 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.ival) = (yyvsp[0].ival); }
#line 23397 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 335: /* TopKOptional: %empty  */
#line 356 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.ival) = 0; }
#line 23403 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 336: /* PathPrefix: ANY SHORTEST PathModeOptional  */
#line 361 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGPathPattern *n = makeNode(PGPathPattern);
				n->path = NULL;
				n->all = false;
				n->group = false;
				n->shortest = true;
				n->mode = (PGPathMode) (yyvsp[0].ival);
				n->topk = 1;
				(yyval.node) = (PGNode*) n;
			}
#line 23418 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 337: /* PathPrefix: SHORTEST ICONST PathModeOptional GroupOrGroupsOptional  */
#line 373 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGPathPattern *n = makeNode(PGPathPattern);
				n->path = NULL;
				n->all = false;
				n->group = (yyvsp[0].ival);
				n->shortest = true;
				n->mode = (PGPathMode) (yyvsp[-1].ival);
				n->topk = (yyvsp[-2].ival);
				(yyval.node) = (PGNode*) n;
			}
#line 23433 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 338: /* PathPrefix: ALL SHORTEST PathModeOptional  */
#line 385 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGPathPattern *n = makeNode(PGPathPattern);
				n->path = NULL;
				n->all = true;
				n->group = false;
				n->shortest = true;
				n->mode = (PGPathMode) (yyvsp[0].ival);
				n->topk = 0;
				(yyval.node) = (PGNode*) n;
			}
#line 23448 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 339: /* PathPrefix: ALL PathModeOptional  */
#line 397 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGPathPattern *n = makeNode(PGPathPattern);
				n->path = NULL;
				n->all = true;
				n->group = false;
				n->shortest = false;
				n->mode = (PGPathMode) (yyvsp[0].ival);
				n->topk = 0;
				(yyval.node) = (PGNode*) n;
			}
#line 23463 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 340: /* PathPrefix: ANY TopKOptional PathModeOptional  */
#line 409 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGPathPattern *n = makeNode(PGPathPattern);
				n->path = NULL;
				n->all = false;
				n->group = false;
				n->shortest = false;
				n->mode = (PGPathMode) (yyvsp[0].ival);
				n->topk = (yyvsp[-1].ival);
				(yyval.node) = (PGNode*) n;
			}
#line 23478 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 341: /* PathPrefix: %empty  */
#line 421 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGPathPattern *n = makeNode(PGPathPattern);
				n->path = NULL;
				n->all = true;
				n->group = false;
				n->shortest = false;
				n->mode = PG_PATHMODE_WALK;
				n->topk = 0;
				(yyval.node) = (PGNode*) n;
			}
#line 23493 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 342: /* PathPatternList: PathPattern  */
#line 435 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 23499 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 343: /* PathPatternList: PathPatternList ',' PathPattern  */
#line 438 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 23505 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 344: /* PathPattern: PathVariableOptional PathPrefix PathConcatenation  */
#line 443 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGPathPattern *n = (PGPathPattern*) (yyvsp[-1].node);
				PGList *l = (PGList *) (yyvsp[0].list);
				PGSubPath *p = (PGSubPath *) lfirst(list_head(l));

				(yyval.node) = (PGNode*) n;
				if ((yyvsp[-2].keyword) == NULL) {
					n->path = (yyvsp[0].list);
				} else if (list_length(l)==1 && p->type==T_PGSubPath && !p->path_var)  {
					p->path_var = (yyvsp[-2].keyword);
					(yyval.node) = (PGNode*) p;
				} else {
					/* generate a named subpath because of the variable */
					p = makeNode(PGSubPath);
					p->mode = n->mode;
					p->lower = p->upper = p->single_bind = 1;
					p->path_var = (yyvsp[-2].keyword);
					p->path = (yyvsp[0].list);
					n->path = list_make1(p);
				}
			}
#line 23531 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 345: /* PatternUnion: '|'  */
#line 467 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                        { (yyval.ival) = 0; }
#line 23537 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 346: /* PatternUnion: '|' '+' '|'  */
#line 469 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.ival) = 1; }
#line 23543 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 347: /* KleeneQuantifierOptional: ICONST  */
#line 473 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.ival) = (yyvsp[0].ival); }
#line 23549 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 348: /* KleeneQuantifierOptional: %empty  */
#line 475 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.ival) = -1; }
#line 23555 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 349: /* KleeneOptional: '*'  */
#line 481 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGSubPath *n = makeNode(PGSubPath);
				n->single_bind = 0;
				n->lower = 0;
				n->upper = (1<<30);
				(yyval.node) = (PGNode*) n;
			}
#line 23567 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 350: /* KleeneOptional: '+'  */
#line 490 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGSubPath *n = makeNode(PGSubPath);
				n->single_bind = 0;
				n->lower = 1;
				n->upper = (1<<30);
				(yyval.node) = (PGNode*) n;
			}
#line 23579 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 351: /* KleeneOptional: '?'  */
#line 499 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGSubPath *n = makeNode(PGSubPath);
				n->single_bind = 1;
				n->lower = 0;
				n->upper = 1;
				(yyval.node) = (PGNode*) n;
			}
#line 23591 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 352: /* KleeneOptional: '{' KleeneQuantifierOptional ',' KleeneQuantifierOptional '}'  */
#line 508 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGSubPath *n = makeNode(PGSubPath);
				n->single_bind = 0;
				n->lower = ((yyvsp[-3].ival)>=0)?(yyvsp[-3].ival):0;
				n->upper = ((yyvsp[-1].ival)>=0)?(yyvsp[-1].ival):(1<<30);
				(yyval.node) = (PGNode*) n;
			}
#line 23603 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 353: /* KleeneOptional: %empty  */
#line 517 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGSubPath *n = makeNode(PGSubPath);
				n->single_bind = 1;
				n->lower = 1;
				n->upper = 1;
				(yyval.node) = (PGNode*) n;
			}
#line 23615 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 354: /* CostNum: ICONST  */
#line 527 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.ival) = (yyvsp[0].ival); }
#line 23621 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 355: /* CostNum: FCONST  */
#line 529 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.ival) = atof((yyvsp[0].str)); }
#line 23627 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 356: /* CostDefault: DEFAULT CostNum  */
#line 533 "third_party/libpg_query/grammar/statements/pgq.y"
                                                        { (yyval.ival) = (yyvsp[0].ival); }
#line 23633 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 357: /* CostDefault: %empty  */
#line 535 "third_party/libpg_query/grammar/statements/pgq.y"
                                                        { (yyval.ival) = NULL; }
#line 23639 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 358: /* CostOptional: COST b_expr CostDefault  */
#line 540 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGPathInfo *n = makeNode(PGPathInfo);
				PGAConst *d = (PGAConst*) (yyvsp[0].ival);
				n->cost_expr = (yyvsp[-1].node);
				n->default_value = d?((d->val.type == T_PGInteger)?
					((double) d->val.val.ival):strtod(d->val.val.str,NULL)):1;
				(yyval.node) = (PGNode*) n;
			}
#line 23652 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 359: /* CostOptional: %empty  */
#line 550 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGPathInfo *n = makeNode(PGPathInfo);
				n->cost_expr = NULL;
				n->default_value = 1;
				(yyval.node) = (PGNode*) n;
			}
#line 23663 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 360: /* SubPath: PathVariableOptional PathModeOptional PathConcatenation GraphTableWhereOptional CostOptional  */
#line 560 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGPathInfo *n = (PGPathInfo*) (yyvsp[0].node);
				n->var_name = (yyvsp[-4].keyword);
				n->mode = (PGPathMode) (yyvsp[-3].ival);
				n->path = (yyvsp[-2].list);
				n->where_clause = (yyvsp[-1].node);
				(yyval.node) = (PGNode*) n;
			}
#line 23676 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 361: /* EnclosedSubPath: '[' SubPath ']' KleeneOptional  */
#line 572 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGSubPath *p = (PGSubPath*) (yyvsp[0].node);
				p->path = list_make1((yyvsp[-2].node));
				(yyval.node) = (PGNode*) p;
			}
#line 23686 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 362: /* PathElement: VertexPattern  */
#line 580 "third_party/libpg_query/grammar/statements/pgq.y"
                                                        { (yyval.list) = (yyvsp[0].list); }
#line 23692 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 363: /* PathElement: EdgePattern  */
#line 582 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.list) = (yyvsp[0].list); }
#line 23698 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 364: /* PathSequence: EnclosedSubPath PathSequence  */
#line 587 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGSubPath *n = (PGSubPath*) (yyvsp[-1].node);
				PGPathInfo *i = (PGPathInfo*) n->path;
				PGList* p = (PGList*) i->path;

				if (i->var_name == NULL && i->mode <= PG_PATHMODE_WALK &&
					i->where_clause == NULL && i->cost_expr == NULL)
				{
					/* there is no need for a SubPath */
					(yyval.list) = (yyvsp[0].list)?list_concat(p,(yyvsp[0].list)):p;
				} else {
        			n->path_var = i->var_name;
					n->mode = i->mode;
					n->path = p;
					n->where_clause = i->where_clause;
					n->cost_expr = i->cost_expr;
					n->default_value = i->default_value;
					(yyval.list) = list_make1(n);
					if ((yyvsp[0].list)) (yyval.list) = list_concat((yyval.list),(yyvsp[0].list));
				}
			}
#line 23724 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 365: /* PathSequence: PathElement PathSequence  */
#line 609 "third_party/libpg_query/grammar/statements/pgq.y"
                                                { (yyval.list) = (yyvsp[-1].list)?list_concat((yyvsp[-1].list),(yyvsp[0].list)):(yyvsp[0].list); }
#line 23730 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 366: /* PathSequence: %empty  */
#line 611 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.list) = NULL; }
#line 23736 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 367: /* PathConcatenation: PathSequence  */
#line 615 "third_party/libpg_query/grammar/statements/pgq.y"
                                                        { (yyval.list) = (yyvsp[0].list); }
#line 23742 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 368: /* PathConcatenation: PathSequence PatternUnion PathSequence  */
#line 618 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGPathUnion *n = makeNode(PGPathUnion);
				n->multiset = (yyvsp[-1].ival);
				n->path1 = (yyvsp[-2].list);
				n->path2 = (yyvsp[0].list);
				(yyval.list) = list_make1(n);
			}
#line 23754 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 369: /* OrLabelExpression: LabelExpression  */
#line 628 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 23760 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 370: /* OrLabelExpression: LabelExpression '|' OrLabelExpression  */
#line 631 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGLabelTest *n = makeNode(PGLabelTest);
				n->name = "|";
				n->left = (PGLabelTest*) (yyvsp[-2].node);
				n->right = (PGLabelTest*) (yyvsp[0].node);
				(yyval.node) = (PGNode*) n;
			}
#line 23772 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 371: /* AndLabelExpression: LabelExpression  */
#line 641 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 23778 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 372: /* AndLabelExpression: LabelExpression '&' AndLabelExpression  */
#line 644 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGLabelTest *n = makeNode(PGLabelTest);
				n->name = "|";
				n->left = (PGLabelTest*) (yyvsp[-2].node);
				n->right = (PGLabelTest*) (yyvsp[0].node);
				(yyval.node) = (PGNode*) n;
			}
#line 23790 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 373: /* ComposedLabelExpression: LabelExpression  */
#line 654 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 23796 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 374: /* ComposedLabelExpression: LabelExpression '|' OrLabelExpression  */
#line 657 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGLabelTest *n = makeNode(PGLabelTest);
				n->name = "|";
				n->left = (PGLabelTest*) (yyvsp[-2].node);
				n->right = (PGLabelTest*) (yyvsp[0].node);
				(yyval.node) = (PGNode*) n;
			}
#line 23808 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 375: /* ComposedLabelExpression: LabelExpression '&' AndLabelExpression  */
#line 666 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGLabelTest *n = makeNode(PGLabelTest);
				n->name = "&";
				n->left = (PGLabelTest*) (yyvsp[-2].node);
				n->right = (PGLabelTest*) (yyvsp[0].node);
				(yyval.node) = (PGNode*) n;
			}
#line 23820 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 376: /* LabelExpression: PGQ_IDENT  */
#line 677 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGLabelTest *n = makeNode(PGLabelTest);
				n->name = (yyvsp[0].str);
				n->left = n->right = NULL;
				(yyval.node) = (PGNode*) n;
			}
#line 23831 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 377: /* LabelExpression: '!' LabelExpression  */
#line 685 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGLabelTest *n = makeNode(PGLabelTest);
				n->name = "!";
				n->left = (PGLabelTest*) (yyvsp[0].node);
				n->right = NULL;
				(yyval.node) = (PGNode*) n;
			}
#line 23843 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 378: /* LabelExpression: '(' ComposedLabelExpression ')'  */
#line 693 "third_party/libpg_query/grammar/statements/pgq.y"
                                                { (yyval.node) = (yyvsp[-1].node); }
#line 23849 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 379: /* LabelExpressionOptional: IsOrColon LabelExpression  */
#line 697 "third_party/libpg_query/grammar/statements/pgq.y"
                                                { (yyval.node) = (yyvsp[0].node); }
#line 23855 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 380: /* LabelExpressionOptional: %empty  */
#line 699 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.node) = NULL; }
#line 23861 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 383: /* ArrowRight: '-'  */
#line 711 "third_party/libpg_query/grammar/statements/pgq.y"
                                                { (yyval.str) = "-"; }
#line 23867 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 384: /* ArrowRight: '-' '>'  */
#line 713 "third_party/libpg_query/grammar/statements/pgq.y"
                                                { (yyval.str) = "->"; }
#line 23873 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 385: /* ArrowRight: LAMBDA_ARROW  */
#line 715 "third_party/libpg_query/grammar/statements/pgq.y"
                                                        { (yyval.str) = "->"; }
#line 23879 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 386: /* ArrowLeftBracket: '-' '['  */
#line 719 "third_party/libpg_query/grammar/statements/pgq.y"
                                                { (yyval.str) = "-"; }
#line 23885 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 387: /* ArrowLeftBracket: '<' '-' '['  */
#line 721 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.str) = "<-"; }
#line 23891 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 388: /* AbbreviatedEdge: '<' ArrowRight  */
#line 726 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				char* dir = (yyvsp[0].str);
				(yyval.ival) = (dir[1] == '>')?PG_MATCH_EDGE_LEFT_RIGHT:PG_MATCH_EDGE_LEFT;
			}
#line 23900 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 389: /* AbbreviatedEdge: ArrowRight  */
#line 732 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				char* dir = (yyvsp[0].str);
				(yyval.ival) = (dir[1] == '>')?PG_MATCH_EDGE_RIGHT:PG_MATCH_EDGE_ANY;
			}
#line 23909 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 390: /* VariableOptional: PGQ_IDENT  */
#line 739 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 23915 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 391: /* VariableOptional: %empty  */
#line 741 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.str) = NULL;}
#line 23921 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 392: /* FullElementSpec: VariableOptional LabelExpressionOptional GraphTableWhereOptional CostOptional  */
#line 746 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGPathInfo *n = (PGPathInfo*) (yyvsp[0].node);
				n->var_name = (yyvsp[-3].str);
				n->where_clause = (yyvsp[-1].node);
				n->label_expr = (PGLabelTest*) (yyvsp[-2].node);
				(yyval.node) = (PGNode*) n;
			}
#line 23933 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 393: /* EdgePattern: AbbreviatedEdge KleeneOptional  */
#line 757 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGSubPath *p = (PGSubPath*) (yyvsp[0].node);
				PGPathElement *n = makeNode(PGPathElement);
				n->label_expr = NULL;
				n->element_var = NULL;
				n->match_type = (PGMatchType) (yyvsp[-1].ival);
				(yyval.list) = list_make1(n);
				if (p->lower != 1 || !p->single_bind) {
					/* return a subpath consisting of one edge (element) */
					p->path = (yyval.list);
					p->path_var = NULL;
					(yyval.list) = list_make1(p);
				}
			}
#line 23952 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 394: /* EdgePattern: ArrowLeftBracket FullElementSpec ']' ArrowRight KleeneOptional  */
#line 773 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				char *left = (yyvsp[-4].str), *right = (yyvsp[-1].str);
				PGPathInfo* i = (PGPathInfo*) (yyvsp[-3].node);
				PGSubPath *p = (PGSubPath*) (yyvsp[0].node);
				PGPathElement *n = makeNode(PGPathElement);

				n->match_type =
					(right[1] == '>')?
						((left[0] == '<')?PG_MATCH_EDGE_LEFT_RIGHT:PG_MATCH_EDGE_RIGHT):
						((left[0] == '<')?PG_MATCH_EDGE_LEFT:PG_MATCH_EDGE_ANY);
				n->element_var = i->var_name;
				n->label_expr = i->label_expr;
				(yyval.list) = list_make1(n);
				if (i->where_clause || i->cost_expr || p->lower != 1 || !p->single_bind) {
					/* return a subpath consisting of one edge (element) */
					p->where_clause = i->where_clause;
					p->cost_expr = i->cost_expr;
					p->default_value = i->default_value;
					p->path = (yyval.list);
					p->path_var = NULL;
					(yyval.list) = list_make1(p);
				}
			}
#line 23980 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 395: /* VertexPattern: '(' FullElementSpec ')'  */
#line 800 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGPathElement *n = makeNode(PGPathElement);
				PGPathInfo* i = (PGPathInfo*) (yyvsp[-1].node);

				n->element_var = i->var_name;
				n->label_expr = i->label_expr;
				n->match_type = PG_MATCH_VERTEX;
				(yyval.list) = list_make1(n);
				if (i->where_clause || i->cost_expr) {
					PGSubPath *p = makeNode(PGSubPath);
					p->mode = PG_PATHMODE_NONE;
					p->lower = p->upper = p->single_bind = 1;
					p->where_clause = i->where_clause;
					p->cost_expr = i->cost_expr;
					p->default_value = i->default_value;
					p->path = (yyval.list);
					p->path_var = NULL;
					(yyval.list) = list_make1(p);
				}
			}
#line 24005 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 396: /* pgq_expr: c_expr  */
#line 832 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 24011 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 397: /* pgq_expr: pgq_expr TYPECAST Typename  */
#line 834 "third_party/libpg_query/grammar/statements/pgq.y"
                                        { (yyval.node) = makeTypeCast((yyvsp[-2].node), (yyvsp[0].typnam), 0, (yylsp[-1])); }
#line 24017 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 398: /* pgq_expr: pgq_expr COLLATE any_name  */
#line 836 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					PGCollateClause *n = makeNode(PGCollateClause);
					n->arg = (yyvsp[-2].node);
					n->collname = (yyvsp[0].list);
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *) n;
				}
#line 24029 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 399: /* pgq_expr: pgq_expr AT TIME ZONE pgq_expr  */
#line 844 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("timezone"),
											   list_make2((yyvsp[0].node), (yyvsp[-4].node)),
											   (yylsp[-3]));
				}
#line 24039 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 400: /* pgq_expr: '+' pgq_expr  */
#line 859 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", NULL, (yyvsp[0].node), (yylsp[-1])); }
#line 24045 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 401: /* pgq_expr: '-' pgq_expr  */
#line 861 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = doNegate((yyvsp[0].node), (yylsp[-1])); }
#line 24051 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 402: /* pgq_expr: pgq_expr '+' pgq_expr  */
#line 863 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 24057 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 403: /* pgq_expr: pgq_expr '-' pgq_expr  */
#line 865 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "-", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 24063 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 404: /* pgq_expr: pgq_expr '*' pgq_expr  */
#line 867 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "*", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 24069 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 405: /* pgq_expr: pgq_expr '/' pgq_expr  */
#line 869 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "/", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 24075 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 406: /* pgq_expr: pgq_expr '%' pgq_expr  */
#line 871 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "%", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 24081 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 407: /* pgq_expr: pgq_expr '^' pgq_expr  */
#line 873 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "^", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 24087 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 408: /* pgq_expr: pgq_expr POWER_OF pgq_expr  */
#line 875 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "**", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 24093 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 409: /* pgq_expr: pgq_expr '<' pgq_expr  */
#line 877 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 24099 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 410: /* pgq_expr: pgq_expr '>' pgq_expr  */
#line 879 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, ">", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 24105 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 411: /* pgq_expr: pgq_expr '=' pgq_expr  */
#line 881 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 24111 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 412: /* pgq_expr: pgq_expr LESS_EQUALS pgq_expr  */
#line 883 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 24117 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 413: /* pgq_expr: pgq_expr GREATER_EQUALS pgq_expr  */
#line 885 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, ">=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 24123 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 414: /* pgq_expr: pgq_expr NOT_EQUALS pgq_expr  */
#line 887 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<>", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 24129 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 415: /* pgq_expr: pgq_expr qual_Op pgq_expr  */
#line 890 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[-1].list), (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 24135 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 416: /* pgq_expr: pgq_expr AND pgq_expr  */
#line 892 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = makeAndExpr((yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 24141 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 417: /* pgq_expr: pgq_expr OR pgq_expr  */
#line 894 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = makeOrExpr((yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 24147 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 418: /* pgq_expr: NOT pgq_expr  */
#line 896 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = makeNotExpr((yyvsp[0].node), (yylsp[-1])); }
#line 24153 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 419: /* pgq_expr: NOT_LA pgq_expr  */
#line 898 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = makeNotExpr((yyvsp[0].node), (yylsp[-1])); }
#line 24159 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 420: /* pgq_expr: pgq_expr GLOB pgq_expr  */
#line 900 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_GLOB, "~~~",
												   (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
				}
#line 24168 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 421: /* pgq_expr: pgq_expr LIKE pgq_expr  */
#line 905 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_LIKE, "~~",
												   (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
				}
#line 24177 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 422: /* pgq_expr: pgq_expr LIKE pgq_expr ESCAPE pgq_expr  */
#line 910 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("like_escape"),
											   list_make3((yyvsp[-4].node), (yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-3]));
					(yyval.node) = (PGNode *) n;
				}
#line 24188 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 423: /* pgq_expr: pgq_expr NOT_LA LIKE pgq_expr  */
#line 917 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_LIKE, "!~~",
												   (yyvsp[-3].node), (yyvsp[0].node), (yylsp[-2]));
				}
#line 24197 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 424: /* pgq_expr: pgq_expr NOT_LA LIKE pgq_expr ESCAPE pgq_expr  */
#line 922 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("not_like_escape"),
											   list_make3((yyvsp[-5].node), (yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-4]));
					(yyval.node) = (PGNode *) n;
				}
#line 24208 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 425: /* pgq_expr: pgq_expr ILIKE pgq_expr  */
#line 929 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_ILIKE, "~~*",
												   (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
				}
#line 24217 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 426: /* pgq_expr: pgq_expr ILIKE pgq_expr ESCAPE pgq_expr  */
#line 934 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("ilike_escape"),
											   list_make3((yyvsp[-4].node), (yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-3]));
					(yyval.node) = (PGNode *) n;
				}
#line 24228 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 427: /* pgq_expr: pgq_expr NOT_LA ILIKE pgq_expr  */
#line 941 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_ILIKE, "!~~*",
												   (yyvsp[-3].node), (yyvsp[0].node), (yylsp[-2]));
				}
#line 24237 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 428: /* pgq_expr: pgq_expr NOT_LA ILIKE pgq_expr ESCAPE pgq_expr  */
#line 946 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("not_ilike_escape"),
											   list_make3((yyvsp[-5].node), (yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-4]));
					(yyval.node) = (PGNode *) n;
				}
#line 24248 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 429: /* pgq_expr: pgq_expr SIMILAR TO pgq_expr  */
#line 954 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
											   list_make2((yyvsp[0].node), makeNullAConst(-1)),
											   (yylsp[-2]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "~",
												   (yyvsp[-3].node), (PGNode *) n, (yylsp[-2]));
				}
#line 24260 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 430: /* pgq_expr: pgq_expr SIMILAR TO pgq_expr ESCAPE pgq_expr  */
#line 962 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
											   list_make2((yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-4]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "~",
												   (yyvsp[-5].node), (PGNode *) n, (yylsp[-4]));
				}
#line 24272 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 431: /* pgq_expr: pgq_expr NOT_LA SIMILAR TO pgq_expr  */
#line 970 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
											   list_make2((yyvsp[0].node), makeNullAConst(-1)),
											   (yylsp[-3]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "!~",
												   (yyvsp[-4].node), (PGNode *) n, (yylsp[-3]));
				}
#line 24284 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 432: /* pgq_expr: pgq_expr NOT_LA SIMILAR TO pgq_expr ESCAPE pgq_expr  */
#line 978 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
											   list_make2((yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-5]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "!~",
												   (yyvsp[-6].node), (PGNode *) n, (yylsp[-5]));
				}
#line 24296 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 433: /* pgq_expr: pgq_expr IS NULL_P  */
#line 996 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-2].node);
					n->nulltesttype = PG_IS_NULL;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 24308 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 434: /* pgq_expr: pgq_expr ISNULL  */
#line 1004 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-1].node);
					n->nulltesttype = PG_IS_NULL;
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 24320 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 435: /* pgq_expr: pgq_expr IS NOT NULL_P  */
#line 1012 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-3].node);
					n->nulltesttype = IS_NOT_NULL;
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)n;
				}
#line 24332 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 436: /* pgq_expr: pgq_expr NOT NULL_P  */
#line 1020 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-2].node);
					n->nulltesttype = IS_NOT_NULL;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 24344 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 437: /* pgq_expr: pgq_expr NOTNULL  */
#line 1028 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-1].node);
					n->nulltesttype = IS_NOT_NULL;
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 24356 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 438: /* pgq_expr: pgq_expr LAMBDA_ARROW pgq_expr  */
#line 1036 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGLambdaFunction *n = makeNode(PGLambdaFunction);
				n->lhs = (yyvsp[-2].node);
				n->rhs = (yyvsp[0].node);
				n->location = (yylsp[-1]);
				(yyval.node) = (PGNode *) n;
			}
#line 24368 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 439: /* pgq_expr: pgq_expr DOUBLE_ARROW pgq_expr  */
#line 1044 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
							(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "->>", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
			}
#line 24376 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 440: /* pgq_expr: row OVERLAPS row  */
#line 1048 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					if (list_length((yyvsp[-2].list)) != 2)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("wrong number of parameters on left side of OVERLAPS expression"),
								 parser_errposition((yylsp[-2]))));
					if (list_length((yyvsp[0].list)) != 2)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("wrong number of parameters on right side of OVERLAPS expression"),
								 parser_errposition((yylsp[0]))));
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("overlaps"),
											   list_concat((yyvsp[-2].list), (yyvsp[0].list)),
											   (yylsp[-1]));
				}
#line 24396 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 441: /* pgq_expr: pgq_expr IS TRUE_P  */
#line 1064 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-2].node);
					b->booltesttype = PG_IS_TRUE;
					b->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)b;
				}
#line 24408 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 442: /* pgq_expr: pgq_expr IS NOT TRUE_P  */
#line 1072 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-3].node);
					b->booltesttype = IS_NOT_TRUE;
					b->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)b;
				}
#line 24420 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 443: /* pgq_expr: pgq_expr IS FALSE_P  */
#line 1080 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-2].node);
					b->booltesttype = IS_FALSE;
					b->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)b;
				}
#line 24432 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 444: /* pgq_expr: pgq_expr IS NOT FALSE_P  */
#line 1088 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-3].node);
					b->booltesttype = IS_NOT_FALSE;
					b->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)b;
				}
#line 24444 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 445: /* pgq_expr: pgq_expr IS UNKNOWN  */
#line 1096 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-2].node);
					b->booltesttype = IS_UNKNOWN;
					b->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)b;
				}
#line 24456 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 446: /* pgq_expr: pgq_expr IS NOT UNKNOWN  */
#line 1104 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-3].node);
					b->booltesttype = IS_NOT_UNKNOWN;
					b->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)b;
				}
#line 24468 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 447: /* pgq_expr: pgq_expr IS DISTINCT FROM pgq_expr  */
#line 1112 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_DISTINCT, "=", (yyvsp[-4].node), (yyvsp[0].node), (yylsp[-3]));
				}
#line 24476 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 448: /* pgq_expr: pgq_expr IS NOT DISTINCT FROM pgq_expr  */
#line 1116 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_DISTINCT, "=", (yyvsp[-5].node), (yyvsp[0].node), (yylsp[-4]));
				}
#line 24484 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 449: /* pgq_expr: pgq_expr IS OF '(' type_list ')'  */
#line 1120 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OF, "=", (yyvsp[-5].node), (PGNode *) (yyvsp[-1].list), (yylsp[-4]));
				}
#line 24492 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 450: /* pgq_expr: pgq_expr IS NOT OF '(' type_list ')'  */
#line 1124 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OF, "<>", (yyvsp[-6].node), (PGNode *) (yyvsp[-1].list), (yylsp[-5]));
				}
#line 24500 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 451: /* pgq_expr: pgq_expr BETWEEN opt_asymmetric b_expr AND pgq_expr  */
#line 1128 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_BETWEEN,
												   "BETWEEN",
												   (yyvsp[-5].node),
												   (PGNode *) list_make2((yyvsp[-2].node), (yyvsp[0].node)),
												   (yylsp[-4]));
				}
#line 24512 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 452: /* pgq_expr: pgq_expr NOT_LA BETWEEN opt_asymmetric b_expr AND pgq_expr  */
#line 1136 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_BETWEEN,
												   "NOT BETWEEN",
												   (yyvsp[-6].node),
												   (PGNode *) list_make2((yyvsp[-2].node), (yyvsp[0].node)),
												   (yylsp[-5]));
				}
#line 24524 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 453: /* pgq_expr: pgq_expr BETWEEN SYMMETRIC b_expr AND pgq_expr  */
#line 1144 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_BETWEEN_SYM,
												   "BETWEEN SYMMETRIC",
												   (yyvsp[-5].node),
												   (PGNode *) list_make2((yyvsp[-2].node), (yyvsp[0].node)),
												   (yylsp[-4]));
				}
#line 24536 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 454: /* pgq_expr: pgq_expr NOT_LA BETWEEN SYMMETRIC b_expr AND pgq_expr  */
#line 1152 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_BETWEEN_SYM,
												   "NOT BETWEEN SYMMETRIC",
												   (yyvsp[-6].node),
												   (PGNode *) list_make2((yyvsp[-2].node), (yyvsp[0].node)),
												   (yylsp[-5]));
				}
#line 24548 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 455: /* pgq_expr: pgq_expr IN_P in_expr  */
#line 1160 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					/* in_expr returns a PGSubLink or a list of pgq_exprs */
					if (IsA((yyvsp[0].node), PGSubLink))
					{
						/* generate foo = ANY (subquery) */
						PGSubLink *n = (PGSubLink *) (yyvsp[0].node);
						n->subLinkType = PG_ANY_SUBLINK;
						n->subLinkId = 0;
						n->testexpr = (yyvsp[-2].node);
						n->operName = NIL;		/* show it's IN not = ANY */
						n->location = (yylsp[-1]);
						(yyval.node) = (PGNode *)n;
					}
					else
					{
						/* generate scalar IN expression */
						(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_IN, "=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
					}
				}
#line 24572 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 456: /* pgq_expr: pgq_expr NOT_LA IN_P in_expr  */
#line 1180 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					/* in_expr returns a PGSubLink or a list of pgq_exprs */
					if (IsA((yyvsp[0].node), PGSubLink))
					{
						/* generate NOT (foo = ANY (subquery)) */
						/* Make an = ANY node */
						PGSubLink *n = (PGSubLink *) (yyvsp[0].node);
						n->subLinkType = PG_ANY_SUBLINK;
						n->subLinkId = 0;
						n->testexpr = (yyvsp[-3].node);
						n->operName = NIL;		/* show it's IN not = ANY */
						n->location = (yylsp[-2]);
						/* Stick a NOT on top; must have same parse location */
						(yyval.node) = makeNotExpr((PGNode *) n, (yylsp[-2]));
					}
					else
					{
						/* generate scalar NOT IN expression */
						(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_IN, "<>", (yyvsp[-3].node), (yyvsp[0].node), (yylsp[-2]));
					}
				}
#line 24598 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 457: /* CreateStmt: CREATE_P OptTemp TABLE qualified_name '(' OptTableElementList ')' OptWith OnCommitOption  */
#line 9 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGCreateStmt *n = makeNode(PGCreateStmt);
					(yyvsp[-5].range)->relpersistence = (yyvsp[-7].ival);
					n->relation = (yyvsp[-5].range);
					n->tableElts = (yyvsp[-3].list);
					n->ofTypename = NULL;
					n->constraints = NIL;
					n->options = (yyvsp[-1].list);
					n->oncommit = (yyvsp[0].oncommit);
					n->onconflict = PG_ERROR_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 24615 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 458: /* CreateStmt: CREATE_P OptTemp TABLE IF_P NOT EXISTS qualified_name '(' OptTableElementList ')' OptWith OnCommitOption  */
#line 24 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGCreateStmt *n = makeNode(PGCreateStmt);
					(yyvsp[-5].range)->relpersistence = (yyvsp[-10].ival);
					n->relation = (yyvsp[-5].range);
					n->tableElts = (yyvsp[-3].list);
					n->ofTypename = NULL;
					n->constraints = NIL;
					n->options = (yyvsp[-1].list);
					n->oncommit = (yyvsp[0].oncommit);
					n->onconflict = PG_IGNORE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 24632 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 459: /* CreateStmt: CREATE_P OR REPLACE OptTemp TABLE qualified_name '(' OptTableElementList ')' OptWith OnCommitOption  */
#line 39 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGCreateStmt *n = makeNode(PGCreateStmt);
					(yyvsp[-5].range)->relpersistence = (yyvsp[-7].ival);
					n->relation = (yyvsp[-5].range);
					n->tableElts = (yyvsp[-3].list);
					n->ofTypename = NULL;
					n->constraints = NIL;
					n->options = (yyvsp[-1].list);
					n->oncommit = (yyvsp[0].oncommit);
					n->onconflict = PG_REPLACE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 24649 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 460: /* ConstraintAttributeSpec: %empty  */
#line 56 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = 0; }
#line 24655 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 461: /* ConstraintAttributeSpec: ConstraintAttributeSpec ConstraintAttributeElem  */
#line 58 "third_party/libpg_query/grammar/statements/create.y"
                                {
					/*
					 * We must complain about conflicting options.
					 * We could, but choose not to, complain about redundant
					 * options (ie, where $2's bit is already set in $1).
					 */
					int		newspec = (yyvsp[-1].ival) | (yyvsp[0].ival);

					/* special message for this case */
					if ((newspec & (CAS_NOT_DEFERRABLE | CAS_INITIALLY_DEFERRED)) == (CAS_NOT_DEFERRABLE | CAS_INITIALLY_DEFERRED))
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("constraint declared INITIALLY DEFERRED must be DEFERRABLE"),
								 parser_errposition((yylsp[0]))));
					/* generic message for other conflicts */
					if ((newspec & (CAS_NOT_DEFERRABLE | CAS_DEFERRABLE)) == (CAS_NOT_DEFERRABLE | CAS_DEFERRABLE) ||
						(newspec & (CAS_INITIALLY_IMMEDIATE | CAS_INITIALLY_DEFERRED)) == (CAS_INITIALLY_IMMEDIATE | CAS_INITIALLY_DEFERRED))
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("conflicting constraint properties"),
								 parser_errposition((yylsp[0]))));
					(yyval.ival) = newspec;
				}
#line 24683 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 462: /* def_arg: func_type  */
#line 84 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.node) = (PGNode *)(yyvsp[0].typnam); }
#line 24689 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 463: /* def_arg: reserved_keyword  */
#line 85 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.node) = (PGNode *)makeString(pstrdup((yyvsp[0].keyword))); }
#line 24695 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 464: /* def_arg: qual_all_Op  */
#line 86 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.node) = (PGNode *)(yyvsp[0].list); }
#line 24701 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 465: /* def_arg: NumericOnly  */
#line 87 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.node) = (PGNode *)(yyvsp[0].value); }
#line 24707 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 466: /* def_arg: Sconst  */
#line 88 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.node) = (PGNode *)makeString((yyvsp[0].str)); }
#line 24713 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 467: /* def_arg: NONE  */
#line 89 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.node) = (PGNode *)makeString(pstrdup((yyvsp[0].keyword))); }
#line 24719 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 468: /* OptParenthesizedSeqOptList: '(' SeqOptList ')'  */
#line 93 "third_party/libpg_query/grammar/statements/create.y"
                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 24725 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 469: /* OptParenthesizedSeqOptList: %empty  */
#line 94 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                { (yyval.list) = NIL; }
#line 24731 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 470: /* generic_option_arg: Sconst  */
#line 99 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.node) = (PGNode *) makeString((yyvsp[0].str)); }
#line 24737 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 471: /* key_action: NO ACTION  */
#line 104 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = PG_FKCONSTR_ACTION_NOACTION; }
#line 24743 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 472: /* key_action: RESTRICT  */
#line 105 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = PG_FKCONSTR_ACTION_RESTRICT; }
#line 24749 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 473: /* key_action: CASCADE  */
#line 106 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = PG_FKCONSTR_ACTION_CASCADE; }
#line 24755 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 474: /* key_action: SET NULL_P  */
#line 107 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_FKCONSTR_ACTION_SETNULL; }
#line 24761 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 475: /* key_action: SET DEFAULT  */
#line 108 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_FKCONSTR_ACTION_SETDEFAULT; }
#line 24767 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 476: /* ColConstraint: CONSTRAINT name ColConstraintElem  */
#line 114 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = castNode(PGConstraint, (yyvsp[0].node));
					n->conname = (yyvsp[-1].str);
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *) n;
				}
#line 24778 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 477: /* ColConstraint: ColConstraintElem  */
#line 120 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 24784 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 478: /* ColConstraint: ConstraintAttr  */
#line 121 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 24790 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 479: /* ColConstraint: COLLATE any_name  */
#line 123 "third_party/libpg_query/grammar/statements/create.y"
                                {
					/*
					 * Note: the PGCollateClause is momentarily included in
					 * the list built by ColQualList, but we split it out
					 * again in SplitColQualList.
					 */
					PGCollateClause *n = makeNode(PGCollateClause);
					n->arg = NULL;
					n->collname = (yyvsp[0].list);
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *) n;
				}
#line 24807 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 480: /* ColConstraintElem: NOT NULL_P  */
#line 140 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_NOTNULL;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 24818 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 481: /* ColConstraintElem: NULL_P  */
#line 147 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_NULL;
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 24829 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 482: /* ColConstraintElem: UNIQUE opt_definition  */
#line 154 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_UNIQUE;
					n->location = (yylsp[-1]);
					n->keys = NULL;
					n->options = (yyvsp[0].list);
					n->indexname = NULL;
					(yyval.node) = (PGNode *)n;
				}
#line 24843 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 483: /* ColConstraintElem: PRIMARY KEY opt_definition  */
#line 164 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_PRIMARY;
					n->location = (yylsp[-2]);
					n->keys = NULL;
					n->options = (yyvsp[0].list);
					n->indexname = NULL;
					(yyval.node) = (PGNode *)n;
				}
#line 24857 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 484: /* ColConstraintElem: CHECK_P '(' a_expr ')' opt_no_inherit  */
#line 174 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_CHECK;
					n->location = (yylsp[-4]);
					n->is_no_inherit = (yyvsp[0].boolean);
					n->raw_expr = (yyvsp[-2].node);
					n->cooked_expr = NULL;
					n->skip_validation = false;
					n->initially_valid = true;
					(yyval.node) = (PGNode *)n;
				}
#line 24873 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 485: /* ColConstraintElem: USING COMPRESSION name  */
#line 186 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_COMPRESSION;
					n->location = (yylsp[-2]);
					n->compression_name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 24885 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 486: /* ColConstraintElem: DEFAULT b_expr  */
#line 194 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_DEFAULT;
					n->location = (yylsp[-1]);
					n->raw_expr = (yyvsp[0].node);
					n->cooked_expr = NULL;
					(yyval.node) = (PGNode *)n;
				}
#line 24898 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 487: /* ColConstraintElem: REFERENCES qualified_name opt_column_list key_match key_actions  */
#line 203 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_FOREIGN;
					n->location = (yylsp[-4]);
					n->pktable			= (yyvsp[-3].range);
					n->fk_attrs			= NIL;
					n->pk_attrs			= (yyvsp[-2].list);
					n->fk_matchtype		= (yyvsp[-1].ival);
					n->fk_upd_action	= (char) ((yyvsp[0].ival) >> 8);
					n->fk_del_action	= (char) ((yyvsp[0].ival) & 0xFF);
					n->skip_validation  = false;
					n->initially_valid  = true;
					(yyval.node) = (PGNode *)n;
				}
#line 24917 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 488: /* GeneratedColumnType: VIRTUAL  */
#line 220 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.constr) = PG_CONSTR_GENERATED_VIRTUAL; }
#line 24923 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 489: /* GeneratedColumnType: STORED  */
#line 221 "third_party/libpg_query/grammar/statements/create.y"
                                 { (yyval.constr) = PG_CONSTR_GENERATED_STORED; }
#line 24929 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 490: /* opt_GeneratedColumnType: GeneratedColumnType  */
#line 225 "third_party/libpg_query/grammar/statements/create.y"
                                            { (yyval.constr) = (yyvsp[0].constr); }
#line 24935 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 491: /* opt_GeneratedColumnType: %empty  */
#line 226 "third_party/libpg_query/grammar/statements/create.y"
                                      { (yyval.constr) = PG_CONSTR_GENERATED_VIRTUAL; }
#line 24941 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 492: /* GeneratedConstraintElem: GENERATED generated_when AS IDENTITY_P OptParenthesizedSeqOptList  */
#line 231 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_IDENTITY;
					n->generated_when = (yyvsp[-3].ival);
					n->options = (yyvsp[0].list);
					n->location = (yylsp[-4]);
					(yyval.node) = (PGNode *)n;
				}
#line 24954 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 493: /* GeneratedConstraintElem: GENERATED generated_when AS '(' a_expr ')' opt_GeneratedColumnType  */
#line 240 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = (yyvsp[0].constr);
					n->generated_when = (yyvsp[-5].ival);
					n->raw_expr = (yyvsp[-2].node);
					n->cooked_expr = NULL;
					n->location = (yylsp[-6]);

					/*
					 * Can't do this in the grammar because of shift/reduce
					 * conflicts.  (IDENTITY allows both ALWAYS and BY
					 * DEFAULT, but generated columns only allow ALWAYS.)  We
					 * can also give a more useful error message and location.
					 */
					if ((yyvsp[-5].ival) != PG_ATTRIBUTE_IDENTITY_ALWAYS)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("for a generated column, GENERATED ALWAYS must be specified"),
								 parser_errposition((yylsp[-5]))));

					(yyval.node) = (PGNode *)n;
				}
#line 24981 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 494: /* GeneratedConstraintElem: AS '(' a_expr ')' opt_GeneratedColumnType  */
#line 263 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = (yyvsp[0].constr);
					n->generated_when = PG_ATTRIBUTE_IDENTITY_ALWAYS;
					n->raw_expr = (yyvsp[-2].node);
					n->cooked_expr = NULL;
					n->location = (yylsp[-4]);
					(yyval.node) = (PGNode *)n;
				}
#line 24995 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 495: /* generic_option_elem: generic_option_name generic_option_arg  */
#line 277 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[-1].str), (yyvsp[0].node), (yylsp[-1]));
				}
#line 25003 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 496: /* key_update: ON UPDATE key_action  */
#line 283 "third_party/libpg_query/grammar/statements/create.y"
                                                { (yyval.ival) = (yyvsp[0].ival); }
#line 25009 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 497: /* key_actions: key_update  */
#line 289 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = ((yyvsp[0].ival) << 8) | (PG_FKCONSTR_ACTION_NOACTION & 0xFF); }
#line 25015 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 498: /* key_actions: key_delete  */
#line 291 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = (PG_FKCONSTR_ACTION_NOACTION << 8) | ((yyvsp[0].ival) & 0xFF); }
#line 25021 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 499: /* key_actions: key_update key_delete  */
#line 293 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = ((yyvsp[-1].ival) << 8) | ((yyvsp[0].ival) & 0xFF); }
#line 25027 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 500: /* key_actions: key_delete key_update  */
#line 295 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = ((yyvsp[0].ival) << 8) | ((yyvsp[-1].ival) & 0xFF); }
#line 25033 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 501: /* key_actions: %empty  */
#line 297 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = (PG_FKCONSTR_ACTION_NOACTION << 8) | (PG_FKCONSTR_ACTION_NOACTION & 0xFF); }
#line 25039 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 502: /* OnCommitOption: ON COMMIT DROP  */
#line 300 "third_party/libpg_query/grammar/statements/create.y"
                                                        { (yyval.oncommit) = ONCOMMIT_DROP; }
#line 25045 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 503: /* OnCommitOption: ON COMMIT DELETE_P ROWS  */
#line 301 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.oncommit) = PG_ONCOMMIT_DELETE_ROWS; }
#line 25051 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 504: /* OnCommitOption: ON COMMIT PRESERVE ROWS  */
#line 302 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.oncommit) = PG_ONCOMMIT_PRESERVE_ROWS; }
#line 25057 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 505: /* OnCommitOption: %empty  */
#line 303 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.oncommit) = PG_ONCOMMIT_NOOP; }
#line 25063 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 506: /* reloptions: '(' reloption_list ')'  */
#line 308 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 25069 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 507: /* opt_no_inherit: NO INHERIT  */
#line 312 "third_party/libpg_query/grammar/statements/create.y"
                                                                                {  (yyval.boolean) = true; }
#line 25075 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 508: /* opt_no_inherit: %empty  */
#line 313 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        {  (yyval.boolean) = false; }
#line 25081 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 509: /* TableConstraint: CONSTRAINT name ConstraintElem  */
#line 319 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = castNode(PGConstraint, (yyvsp[0].node));
					n->conname = (yyvsp[-1].str);
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *) n;
				}
#line 25092 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 510: /* TableConstraint: ConstraintElem  */
#line 325 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 25098 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 511: /* TableLikeOption: COMMENTS  */
#line 330 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_CREATE_TABLE_LIKE_COMMENTS; }
#line 25104 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 512: /* TableLikeOption: CONSTRAINTS  */
#line 331 "third_party/libpg_query/grammar/statements/create.y"
                                                        { (yyval.ival) = PG_CREATE_TABLE_LIKE_CONSTRAINTS; }
#line 25110 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 513: /* TableLikeOption: DEFAULTS  */
#line 332 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_CREATE_TABLE_LIKE_DEFAULTS; }
#line 25116 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 514: /* TableLikeOption: IDENTITY_P  */
#line 333 "third_party/libpg_query/grammar/statements/create.y"
                                                        { (yyval.ival) = PG_CREATE_TABLE_LIKE_IDENTITY; }
#line 25122 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 515: /* TableLikeOption: INDEXES  */
#line 334 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_CREATE_TABLE_LIKE_INDEXES; }
#line 25128 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 516: /* TableLikeOption: STATISTICS  */
#line 335 "third_party/libpg_query/grammar/statements/create.y"
                                                        { (yyval.ival) = PG_CREATE_TABLE_LIKE_STATISTICS; }
#line 25134 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 517: /* TableLikeOption: STORAGE  */
#line 336 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_CREATE_TABLE_LIKE_STORAGE; }
#line 25140 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 518: /* TableLikeOption: ALL  */
#line 337 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_CREATE_TABLE_LIKE_ALL; }
#line 25146 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 519: /* reloption_list: reloption_elem  */
#line 343 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].defelt)); }
#line 25152 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 520: /* reloption_list: reloption_list ',' reloption_elem  */
#line 344 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt)); }
#line 25158 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 521: /* ExistingIndex: USING INDEX index_name  */
#line 348 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.str) = (yyvsp[0].str); }
#line 25164 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 522: /* ConstraintAttr: DEFERRABLE  */
#line 354 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_ATTR_DEFERRABLE;
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 25175 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 523: /* ConstraintAttr: NOT DEFERRABLE  */
#line 361 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_ATTR_NOT_DEFERRABLE;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 25186 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 524: /* ConstraintAttr: INITIALLY DEFERRED  */
#line 368 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_ATTR_DEFERRED;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 25197 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 525: /* ConstraintAttr: INITIALLY IMMEDIATE  */
#line 375 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_ATTR_IMMEDIATE;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 25208 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 526: /* OptWith: WITH reloptions  */
#line 386 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.list) = (yyvsp[0].list); }
#line 25214 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 527: /* OptWith: WITH OIDS  */
#line 387 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.list) = list_make1(makeDefElem("oids", (PGNode *) makeInteger(true), (yylsp[-1]))); }
#line 25220 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 528: /* OptWith: WITHOUT OIDS  */
#line 388 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.list) = list_make1(makeDefElem("oids", (PGNode *) makeInteger(false), (yylsp[-1]))); }
#line 25226 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 529: /* OptWith: %empty  */
#line 389 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.list) = NIL; }
#line 25232 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 530: /* definition: '(' def_list ')'  */
#line 393 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 25238 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 531: /* TableLikeOptionList: TableLikeOptionList INCLUDING TableLikeOption  */
#line 398 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.ival) = (yyvsp[-2].ival) | (yyvsp[0].ival); }
#line 25244 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 532: /* TableLikeOptionList: TableLikeOptionList EXCLUDING TableLikeOption  */
#line 399 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.ival) = (yyvsp[-2].ival) & ~(yyvsp[0].ival); }
#line 25250 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 533: /* TableLikeOptionList: %empty  */
#line 400 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.ival) = 0; }
#line 25256 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 534: /* generic_option_name: ColLabel  */
#line 405 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.str) = (yyvsp[0].str); }
#line 25262 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 535: /* ConstraintAttributeElem: NOT DEFERRABLE  */
#line 410 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = CAS_NOT_DEFERRABLE; }
#line 25268 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 536: /* ConstraintAttributeElem: DEFERRABLE  */
#line 411 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = CAS_DEFERRABLE; }
#line 25274 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 537: /* ConstraintAttributeElem: INITIALLY IMMEDIATE  */
#line 412 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = CAS_INITIALLY_IMMEDIATE; }
#line 25280 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 538: /* ConstraintAttributeElem: INITIALLY DEFERRED  */
#line 413 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = CAS_INITIALLY_DEFERRED; }
#line 25286 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 539: /* ConstraintAttributeElem: NOT VALID  */
#line 414 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.ival) = CAS_NOT_VALID; }
#line 25292 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 540: /* ConstraintAttributeElem: NO INHERIT  */
#line 415 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = CAS_NO_INHERIT; }
#line 25298 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 541: /* columnDef: ColId Typename ColQualList  */
#line 421 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGColumnDef *n = makeNode(PGColumnDef);
					n->category = COL_STANDARD;
					n->colname = (yyvsp[-2].str);
					n->typeName = (yyvsp[-1].typnam);
					n->inhcount = 0;
					n->is_local = true;
					n->is_not_null = false;
					n->is_from_type = false;
					n->storage = 0;
					n->raw_default = NULL;
					n->cooked_default = NULL;
					n->collOid = InvalidOid;
					SplitColQualList((yyvsp[0].list), &n->constraints, &n->collClause,
									 yyscanner);
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)n;
			}
#line 25321 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 542: /* columnDef: ColId opt_Typename GeneratedConstraintElem ColQualList  */
#line 441 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGColumnDef *n = makeNode(PGColumnDef);
					n->category = COL_GENERATED;
					n->colname = (yyvsp[-3].str);
					n->typeName = (yyvsp[-2].typnam);
					n->inhcount = 0;
					n->is_local = true;
					n->is_not_null = false;
					n->is_from_type = false;
					n->storage = 0;
					n->raw_default = NULL;
					n->cooked_default = NULL;
					n->collOid = InvalidOid;
					// merge the constraints with the generated column constraint
					auto constraints = (yyvsp[0].list);
					if (constraints) {
					    constraints = lappend(constraints, (yyvsp[-1].node));
					} else {
					    constraints = list_make1((yyvsp[-1].node));
					}
					SplitColQualList(constraints, &n->constraints, &n->collClause,
									 yyscanner);
					n->location = (yylsp[-3]);
					(yyval.node) = (PGNode *)n;
			}
#line 25351 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 543: /* def_list: def_elem  */
#line 469 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].defelt)); }
#line 25357 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 544: /* def_list: def_list ',' def_elem  */
#line 470 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt)); }
#line 25363 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 545: /* index_name: ColId  */
#line 474 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 25369 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 546: /* TableElement: columnDef  */
#line 478 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 25375 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 547: /* TableElement: TableLikeClause  */
#line 479 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 25381 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 548: /* TableElement: TableConstraint  */
#line 480 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 25387 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 549: /* def_elem: ColLabel '=' def_arg  */
#line 485 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[-2].str), (PGNode *) (yyvsp[0].node), (yylsp[-2]));
				}
#line 25395 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 550: /* def_elem: ColLabel  */
#line 489 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[0].str), NULL, (yylsp[0]));
				}
#line 25403 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 551: /* opt_definition: WITH definition  */
#line 496 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 25409 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 552: /* opt_definition: %empty  */
#line 497 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                { (yyval.list) = NIL; }
#line 25415 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 553: /* OptTableElementList: TableElementList  */
#line 502 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 25421 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 554: /* OptTableElementList: TableElementList ','  */
#line 503 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 25427 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 555: /* OptTableElementList: %empty  */
#line 504 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.list) = NIL; }
#line 25433 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 556: /* columnElem: ColId  */
#line 509 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.node) = (PGNode *) makeString((yyvsp[0].str));
				}
#line 25441 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 557: /* opt_column_list: '(' columnList ')'  */
#line 516 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 25447 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 558: /* opt_column_list: %empty  */
#line 517 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                { (yyval.list) = NIL; }
#line 25453 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 559: /* ColQualList: ColQualList ColConstraint  */
#line 522 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 25459 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 560: /* ColQualList: %empty  */
#line 523 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                { (yyval.list) = NIL; }
#line 25465 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 561: /* key_delete: ON DELETE_P key_action  */
#line 527 "third_party/libpg_query/grammar/statements/create.y"
                                                { (yyval.ival) = (yyvsp[0].ival); }
#line 25471 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 562: /* reloption_elem: ColLabel '=' def_arg  */
#line 533 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[-2].str), (PGNode *) (yyvsp[0].node), (yylsp[-2]));
				}
#line 25479 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 563: /* reloption_elem: ColLabel  */
#line 537 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[0].str), NULL, (yylsp[0]));
				}
#line 25487 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 564: /* reloption_elem: ColLabel '.' ColLabel '=' def_arg  */
#line 541 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElemExtended((yyvsp[-4].str), (yyvsp[-2].str), (PGNode *) (yyvsp[0].node),
											 PG_DEFELEM_UNSPEC, (yylsp[-4]));
				}
#line 25496 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 565: /* reloption_elem: ColLabel '.' ColLabel  */
#line 546 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElemExtended((yyvsp[-2].str), (yyvsp[0].str), NULL, PG_DEFELEM_UNSPEC, (yylsp[-2]));
				}
#line 25504 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 566: /* columnList: columnElem  */
#line 553 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 25510 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 567: /* columnList: columnList ',' columnElem  */
#line 554 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 25516 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 568: /* columnList_opt_comma: columnList  */
#line 558 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 25522 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 569: /* columnList_opt_comma: columnList ','  */
#line 559 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 25528 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 570: /* func_type: Typename  */
#line 563 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.typnam) = (yyvsp[0].typnam); }
#line 25534 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 571: /* func_type: type_function_name attrs '%' TYPE_P  */
#line 565 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.typnam) = makeTypeNameFromNameList(lcons(makeString((yyvsp[-3].str)), (yyvsp[-2].list)));
					(yyval.typnam)->pct_type = true;
					(yyval.typnam)->location = (yylsp[-3]);
				}
#line 25544 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 572: /* func_type: SETOF type_function_name attrs '%' TYPE_P  */
#line 571 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.typnam) = makeTypeNameFromNameList(lcons(makeString((yyvsp[-3].str)), (yyvsp[-2].list)));
					(yyval.typnam)->pct_type = true;
					(yyval.typnam)->setof = true;
					(yyval.typnam)->location = (yylsp[-3]);
				}
#line 25555 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 573: /* ConstraintElem: CHECK_P '(' a_expr ')' ConstraintAttributeSpec  */
#line 582 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_CHECK;
					n->location = (yylsp[-4]);
					n->raw_expr = (yyvsp[-2].node);
					n->cooked_expr = NULL;
					processCASbits((yyvsp[0].ival), (yylsp[0]), "CHECK",
								   NULL, NULL, &n->skip_validation,
								   &n->is_no_inherit, yyscanner);
					n->initially_valid = !n->skip_validation;
					(yyval.node) = (PGNode *)n;
				}
#line 25572 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 574: /* ConstraintElem: UNIQUE '(' columnList_opt_comma ')' opt_definition ConstraintAttributeSpec  */
#line 596 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_UNIQUE;
					n->location = (yylsp[-5]);
					n->keys = (yyvsp[-3].list);
					n->options = (yyvsp[-1].list);
					n->indexname = NULL;
					processCASbits((yyvsp[0].ival), (yylsp[0]), "UNIQUE",
								   &n->deferrable, &n->initdeferred, NULL,
								   NULL, yyscanner);
					(yyval.node) = (PGNode *)n;
				}
#line 25589 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 575: /* ConstraintElem: UNIQUE ExistingIndex ConstraintAttributeSpec  */
#line 609 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_UNIQUE;
					n->location = (yylsp[-2]);
					n->keys = NIL;
					n->options = NIL;
					n->indexname = (yyvsp[-1].str);
					n->indexspace = NULL;
					processCASbits((yyvsp[0].ival), (yylsp[0]), "UNIQUE",
								   &n->deferrable, &n->initdeferred, NULL,
								   NULL, yyscanner);
					(yyval.node) = (PGNode *)n;
				}
#line 25607 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 576: /* ConstraintElem: PRIMARY KEY '(' columnList_opt_comma ')' opt_definition ConstraintAttributeSpec  */
#line 624 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_PRIMARY;
					n->location = (yylsp[-6]);
					n->keys = (yyvsp[-3].list);
					n->options = (yyvsp[-1].list);
					n->indexname = NULL;
					processCASbits((yyvsp[0].ival), (yylsp[0]), "PRIMARY KEY",
								   &n->deferrable, &n->initdeferred, NULL,
								   NULL, yyscanner);
					(yyval.node) = (PGNode *)n;
				}
#line 25624 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 577: /* ConstraintElem: PRIMARY KEY ExistingIndex ConstraintAttributeSpec  */
#line 637 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_PRIMARY;
					n->location = (yylsp[-3]);
					n->keys = NIL;
					n->options = NIL;
					n->indexname = (yyvsp[-1].str);
					n->indexspace = NULL;
					processCASbits((yyvsp[0].ival), (yylsp[0]), "PRIMARY KEY",
								   &n->deferrable, &n->initdeferred, NULL,
								   NULL, yyscanner);
					(yyval.node) = (PGNode *)n;
				}
#line 25642 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 578: /* ConstraintElem: FOREIGN KEY '(' columnList_opt_comma ')' REFERENCES qualified_name opt_column_list key_match key_actions ConstraintAttributeSpec  */
#line 652 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_FOREIGN;
					n->location = (yylsp[-10]);
					n->pktable			= (yyvsp[-4].range);
					n->fk_attrs			= (yyvsp[-7].list);
					n->pk_attrs			= (yyvsp[-3].list);
					n->fk_matchtype		= (yyvsp[-2].ival);
					n->fk_upd_action	= (char) ((yyvsp[-1].ival) >> 8);
					n->fk_del_action	= (char) ((yyvsp[-1].ival) & 0xFF);
					processCASbits((yyvsp[0].ival), (yylsp[0]), "FOREIGN KEY",
								   &n->deferrable, &n->initdeferred,
								   &n->skip_validation, NULL,
								   yyscanner);
					n->initially_valid = !n->skip_validation;
					(yyval.node) = (PGNode *)n;
				}
#line 25664 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 579: /* TableElementList: TableElement  */
#line 674 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 25672 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 580: /* TableElementList: TableElementList ',' TableElement  */
#line 678 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 25680 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 581: /* key_match: MATCH FULL  */
#line 685 "third_party/libpg_query/grammar/statements/create.y"
                        {
				(yyval.ival) = PG_FKCONSTR_MATCH_FULL;
			}
#line 25688 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 582: /* key_match: MATCH PARTIAL  */
#line 689 "third_party/libpg_query/grammar/statements/create.y"
                        {
				ereport(ERROR,
						(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
						 errmsg("MATCH PARTIAL not yet implemented"),
						 parser_errposition((yylsp[-1]))));
				(yyval.ival) = PG_FKCONSTR_MATCH_PARTIAL;
			}
#line 25700 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 583: /* key_match: MATCH SIMPLE  */
#line 697 "third_party/libpg_query/grammar/statements/create.y"
                        {
				(yyval.ival) = PG_FKCONSTR_MATCH_SIMPLE;
			}
#line 25708 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 584: /* key_match: %empty  */
#line 701 "third_party/libpg_query/grammar/statements/create.y"
                        {
				(yyval.ival) = PG_FKCONSTR_MATCH_SIMPLE;
			}
#line 25716 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 585: /* TableLikeClause: LIKE qualified_name TableLikeOptionList  */
#line 709 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGTableLikeClause *n = makeNode(PGTableLikeClause);
					n->relation = (yyvsp[-1].range);
					n->options = (yyvsp[0].ival);
					(yyval.node) = (PGNode *)n;
				}
#line 25727 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 586: /* OptTemp: TEMPORARY  */
#line 718 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_RELPERSISTENCE_TEMP; }
#line 25733 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 587: /* OptTemp: TEMP  */
#line 719 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = PG_RELPERSISTENCE_TEMP; }
#line 25739 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 588: /* OptTemp: LOCAL TEMPORARY  */
#line 720 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_RELPERSISTENCE_TEMP; }
#line 25745 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 589: /* OptTemp: LOCAL TEMP  */
#line 721 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_RELPERSISTENCE_TEMP; }
#line 25751 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 590: /* OptTemp: GLOBAL TEMPORARY  */
#line 723 "third_party/libpg_query/grammar/statements/create.y"
                                {
					ereport(PGWARNING,
							(errmsg("GLOBAL is deprecated in temporary table creation"),
							 parser_errposition((yylsp[-1]))));
					(yyval.ival) = PG_RELPERSISTENCE_TEMP;
				}
#line 25762 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 591: /* OptTemp: GLOBAL TEMP  */
#line 730 "third_party/libpg_query/grammar/statements/create.y"
                                {
					ereport(PGWARNING,
							(errmsg("GLOBAL is deprecated in temporary table creation"),
							 parser_errposition((yylsp[-1]))));
					(yyval.ival) = PG_RELPERSISTENCE_TEMP;
				}
#line 25773 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 592: /* OptTemp: UNLOGGED  */
#line 736 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = PG_RELPERSISTENCE_UNLOGGED; }
#line 25779 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 593: /* OptTemp: %empty  */
#line 737 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = RELPERSISTENCE_PERMANENT; }
#line 25785 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 594: /* generated_when: ALWAYS  */
#line 742 "third_party/libpg_query/grammar/statements/create.y"
                                                { (yyval.ival) = PG_ATTRIBUTE_IDENTITY_ALWAYS; }
#line 25791 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 595: /* generated_when: BY DEFAULT  */
#line 743 "third_party/libpg_query/grammar/statements/create.y"
                                        { (yyval.ival) = ATTRIBUTE_IDENTITY_BY_DEFAULT; }
#line 25797 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 596: /* DropStmt: DROP drop_type_any_name IF_P EXISTS any_name_list opt_drop_behavior  */
#line 10 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-4].objtype);
					n->missing_ok = true;
					n->objects = (yyvsp[-1].list);
					n->behavior = (yyvsp[0].dbehavior);
					n->concurrent = false;
					(yyval.node) = (PGNode *)n;
				}
#line 25811 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 597: /* DropStmt: DROP drop_type_any_name any_name_list opt_drop_behavior  */
#line 20 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-2].objtype);
					n->missing_ok = false;
					n->objects = (yyvsp[-1].list);
					n->behavior = (yyvsp[0].dbehavior);
					n->concurrent = false;
					(yyval.node) = (PGNode *)n;
				}
#line 25825 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 598: /* DropStmt: DROP drop_type_name IF_P EXISTS name_list opt_drop_behavior  */
#line 30 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-4].objtype);
					n->missing_ok = true;
					n->objects = (yyvsp[-1].list);
					n->behavior = (yyvsp[0].dbehavior);
					n->concurrent = false;
					(yyval.node) = (PGNode *)n;
				}
#line 25839 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 599: /* DropStmt: DROP drop_type_name name_list opt_drop_behavior  */
#line 40 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-2].objtype);
					n->missing_ok = false;
					n->objects = (yyvsp[-1].list);
					n->behavior = (yyvsp[0].dbehavior);
					n->concurrent = false;
					(yyval.node) = (PGNode *)n;
				}
#line 25853 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 600: /* DropStmt: DROP drop_type_name_on_any_name name ON any_name opt_drop_behavior  */
#line 50 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-4].objtype);
					n->objects = list_make1(lappend((yyvsp[-1].list), makeString((yyvsp[-3].str))));
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = false;
					n->concurrent = false;
					(yyval.node) = (PGNode *) n;
				}
#line 25867 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 601: /* DropStmt: DROP drop_type_name_on_any_name IF_P EXISTS name ON any_name opt_drop_behavior  */
#line 60 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-6].objtype);
					n->objects = list_make1(lappend((yyvsp[-1].list), makeString((yyvsp[-3].str))));
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = true;
					n->concurrent = false;
					(yyval.node) = (PGNode *) n;
				}
#line 25881 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 602: /* drop_type_any_name: TABLE  */
#line 73 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_TABLE; }
#line 25887 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 603: /* drop_type_any_name: SEQUENCE  */
#line 74 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_SEQUENCE; }
#line 25893 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 604: /* drop_type_any_name: FUNCTION  */
#line 75 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_FUNCTION; }
#line 25899 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 605: /* drop_type_any_name: MACRO  */
#line 76 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_FUNCTION; }
#line 25905 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 606: /* drop_type_any_name: MACRO TABLE  */
#line 77 "third_party/libpg_query/grammar/statements/drop.y"
                                                                { (yyval.objtype) = PG_OBJECT_TABLE_MACRO; }
#line 25911 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 607: /* drop_type_any_name: VIEW  */
#line 78 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_VIEW; }
#line 25917 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 608: /* drop_type_any_name: MATERIALIZED VIEW  */
#line 79 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_MATVIEW; }
#line 25923 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 609: /* drop_type_any_name: INDEX  */
#line 80 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_INDEX; }
#line 25929 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 610: /* drop_type_any_name: FOREIGN TABLE  */
#line 81 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_FOREIGN_TABLE; }
#line 25935 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 611: /* drop_type_any_name: COLLATION  */
#line 82 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_COLLATION; }
#line 25941 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 612: /* drop_type_any_name: CONVERSION_P  */
#line 83 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_CONVERSION; }
#line 25947 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 613: /* drop_type_any_name: SCHEMA  */
#line 84 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_SCHEMA; }
#line 25953 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 614: /* drop_type_any_name: STATISTICS  */
#line 85 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_STATISTIC_EXT; }
#line 25959 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 615: /* drop_type_any_name: TEXT_P SEARCH PARSER  */
#line 86 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                { (yyval.objtype) = PG_OBJECT_TSPARSER; }
#line 25965 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 616: /* drop_type_any_name: TEXT_P SEARCH DICTIONARY  */
#line 87 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                { (yyval.objtype) = PG_OBJECT_TSDICTIONARY; }
#line 25971 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 617: /* drop_type_any_name: TEXT_P SEARCH TEMPLATE  */
#line 88 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                { (yyval.objtype) = PG_OBJECT_TSTEMPLATE; }
#line 25977 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 618: /* drop_type_any_name: TEXT_P SEARCH CONFIGURATION  */
#line 89 "third_party/libpg_query/grammar/statements/drop.y"
                                                                        { (yyval.objtype) = PG_OBJECT_TSCONFIGURATION; }
#line 25983 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 619: /* drop_type_any_name: TYPE_P  */
#line 90 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_TYPE; }
#line 25989 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 620: /* drop_type_name: ACCESS METHOD  */
#line 95 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_ACCESS_METHOD; }
#line 25995 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 621: /* drop_type_name: EVENT TRIGGER  */
#line 96 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_EVENT_TRIGGER; }
#line 26001 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 622: /* drop_type_name: EXTENSION  */
#line 97 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_EXTENSION; }
#line 26007 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 623: /* drop_type_name: FOREIGN DATA_P WRAPPER  */
#line 98 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                { (yyval.objtype) = PG_OBJECT_FDW; }
#line 26013 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 624: /* drop_type_name: PUBLICATION  */
#line 99 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_PUBLICATION; }
#line 26019 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 625: /* drop_type_name: SERVER  */
#line 100 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_FOREIGN_SERVER; }
#line 26025 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 626: /* any_name_list: any_name  */
#line 105 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].list)); }
#line 26031 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 627: /* any_name_list: any_name_list ',' any_name  */
#line 106 "third_party/libpg_query/grammar/statements/drop.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].list)); }
#line 26037 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 628: /* opt_drop_behavior: CASCADE  */
#line 111 "third_party/libpg_query/grammar/statements/drop.y"
                                                                        { (yyval.dbehavior) = PG_DROP_CASCADE; }
#line 26043 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 629: /* opt_drop_behavior: RESTRICT  */
#line 112 "third_party/libpg_query/grammar/statements/drop.y"
                                                                        { (yyval.dbehavior) = PG_DROP_RESTRICT; }
#line 26049 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 630: /* opt_drop_behavior: %empty  */
#line 113 "third_party/libpg_query/grammar/statements/drop.y"
                                                                { (yyval.dbehavior) = PG_DROP_RESTRICT; /* default */ }
#line 26055 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 631: /* drop_type_name_on_any_name: POLICY  */
#line 118 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_POLICY; }
#line 26061 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 632: /* drop_type_name_on_any_name: RULE  */
#line 119 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_RULE; }
#line 26067 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 633: /* drop_type_name_on_any_name: TRIGGER  */
#line 120 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_TRIGGER; }
#line 26073 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 634: /* CreateFunctionStmt: CREATE_P OptTemp macro_alias qualified_name param_list AS TABLE SelectStmt  */
#line 9 "third_party/libpg_query/grammar/statements/create_function.y"
                        {
				PGCreateFunctionStmt *n = makeNode(PGCreateFunctionStmt);
				(yyvsp[-4].range)->relpersistence = (yyvsp[-6].ival);
				n->name = (yyvsp[-4].range);
				n->params = (yyvsp[-3].list);
				n->function = NULL;
				n->query = (yyvsp[0].node);
				n->onconflict = PG_ERROR_ON_CONFLICT;
				(yyval.node) = (PGNode *)n;
			}
#line 26088 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 635: /* CreateFunctionStmt: CREATE_P OptTemp macro_alias IF_P NOT EXISTS qualified_name param_list AS TABLE SelectStmt  */
#line 21 "third_party/libpg_query/grammar/statements/create_function.y"
                        {
				PGCreateFunctionStmt *n = makeNode(PGCreateFunctionStmt);
				(yyvsp[-4].range)->relpersistence = (yyvsp[-9].ival);
				n->name = (yyvsp[-4].range);
				n->params = (yyvsp[-3].list);
				n->function = NULL;
				n->query = (yyvsp[0].node);
				n->onconflict = PG_IGNORE_ON_CONFLICT;
				(yyval.node) = (PGNode *)n;

			}
#line 26104 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 636: /* CreateFunctionStmt: CREATE_P OR REPLACE OptTemp macro_alias qualified_name param_list AS TABLE SelectStmt  */
#line 34 "third_party/libpg_query/grammar/statements/create_function.y"
                        {
				PGCreateFunctionStmt *n = makeNode(PGCreateFunctionStmt);
				(yyvsp[-4].range)->relpersistence = (yyvsp[-6].ival);
				n->name = (yyvsp[-4].range);
				n->params = (yyvsp[-3].list);
				n->function = NULL;
				n->query = (yyvsp[0].node);
				n->onconflict = PG_REPLACE_ON_CONFLICT;
				(yyval.node) = (PGNode *)n;

			}
#line 26120 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 637: /* CreateFunctionStmt: CREATE_P OptTemp macro_alias qualified_name param_list AS a_expr  */
#line 47 "third_party/libpg_query/grammar/statements/create_function.y"
                         {
				PGCreateFunctionStmt *n = makeNode(PGCreateFunctionStmt);
				(yyvsp[-3].range)->relpersistence = (yyvsp[-5].ival);
				n->name = (yyvsp[-3].range);
				n->params = (yyvsp[-2].list);
				n->function = (yyvsp[0].node);
				n->query = NULL;
				n->onconflict = PG_ERROR_ON_CONFLICT;
				(yyval.node) = (PGNode *)n;
                         }
#line 26135 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 638: /* CreateFunctionStmt: CREATE_P OptTemp macro_alias IF_P NOT EXISTS qualified_name param_list AS a_expr  */
#line 59 "third_party/libpg_query/grammar/statements/create_function.y"
                         {
				PGCreateFunctionStmt *n = makeNode(PGCreateFunctionStmt);
				(yyvsp[-3].range)->relpersistence = (yyvsp[-8].ival);
				n->name = (yyvsp[-3].range);
				n->params = (yyvsp[-2].list);
				n->function = (yyvsp[0].node);
				n->query = NULL;
				n->onconflict = PG_IGNORE_ON_CONFLICT;
				(yyval.node) = (PGNode *)n;
			 }
#line 26150 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 639: /* CreateFunctionStmt: CREATE_P OR REPLACE OptTemp macro_alias qualified_name param_list AS a_expr  */
#line 71 "third_party/libpg_query/grammar/statements/create_function.y"
                         {
				PGCreateFunctionStmt *n = makeNode(PGCreateFunctionStmt);
				(yyvsp[-3].range)->relpersistence = (yyvsp[-5].ival);
				n->name = (yyvsp[-3].range);
				n->params = (yyvsp[-2].list);
				n->function = (yyvsp[0].node);
				n->query = NULL;
				n->onconflict = PG_REPLACE_ON_CONFLICT;
				(yyval.node) = (PGNode *)n;
			 }
#line 26165 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 642: /* param_list: '(' ')'  */
#line 92 "third_party/libpg_query/grammar/statements/create_function.y"
                        {
				(yyval.list) = NIL;
			}
#line 26173 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 643: /* param_list: '(' func_arg_list ')'  */
#line 96 "third_party/libpg_query/grammar/statements/create_function.y"
                        {
				(yyval.list) = (yyvsp[-1].list);
			}
#line 26181 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 644: /* UpdateStmt: opt_with_clause UPDATE relation_expr_opt_alias SET set_clause_list_opt_comma from_clause where_or_current_clause returning_clause  */
#line 12 "third_party/libpg_query/grammar/statements/update.y"
                                {
					PGUpdateStmt *n = makeNode(PGUpdateStmt);
					n->relation = (yyvsp[-5].range);
					n->targetList = (yyvsp[-3].list);
					n->fromClause = (yyvsp[-2].list);
					n->whereClause = (yyvsp[-1].node);
					n->returningList = (yyvsp[0].list);
					n->withClause = (yyvsp[-7].with);
					(yyval.node) = (PGNode *)n;
				}
#line 26196 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 645: /* CopyStmt: COPY opt_binary qualified_name opt_column_list opt_oids copy_from opt_program copy_file_name copy_delimiter opt_with copy_options  */
#line 3 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					PGCopyStmt *n = makeNode(PGCopyStmt);
					n->relation = (yyvsp[-8].range);
					n->query = NULL;
					n->attlist = (yyvsp[-7].list);
					n->is_from = (yyvsp[-5].boolean);
					n->is_program = (yyvsp[-4].boolean);
					n->filename = (yyvsp[-3].str);

					if (n->is_program && n->filename == NULL)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("STDIN/STDOUT not allowed with PROGRAM"),
								 parser_errposition((yylsp[-3]))));

					n->options = NIL;
					/* Concatenate user-supplied flags */
					if ((yyvsp[-9].defelt))
						n->options = lappend(n->options, (yyvsp[-9].defelt));
					if ((yyvsp[-6].defelt))
						n->options = lappend(n->options, (yyvsp[-6].defelt));
					if ((yyvsp[-2].defelt))
						n->options = lappend(n->options, (yyvsp[-2].defelt));
					if ((yyvsp[0].list))
						n->options = list_concat(n->options, (yyvsp[0].list));
					(yyval.node) = (PGNode *)n;
				}
#line 26228 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 646: /* CopyStmt: COPY '(' SelectStmt ')' TO opt_program copy_file_name opt_with copy_options  */
#line 31 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					PGCopyStmt *n = makeNode(PGCopyStmt);
					n->relation = NULL;
					n->query = (yyvsp[-6].node);
					n->attlist = NIL;
					n->is_from = false;
					n->is_program = (yyvsp[-3].boolean);
					n->filename = (yyvsp[-2].str);
					n->options = (yyvsp[0].list);

					if (n->is_program && n->filename == NULL)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("STDIN/STDOUT not allowed with PROGRAM"),
								 parser_errposition((yylsp[-4]))));

					(yyval.node) = (PGNode *)n;
				}
#line 26251 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 647: /* CopyStmt: COPY FROM DATABASE ColId TO ColId copy_database_flag  */
#line 50 "third_party/libpg_query/grammar/statements/copy.y"
                {
				PGCopyDatabaseStmt *n = makeNode(PGCopyDatabaseStmt);
				n->from_database = (yyvsp[-3].str);
				n->to_database = (yyvsp[-1].str);
				n->copy_database_flag = (yyvsp[0].conststr);
				(yyval.node) = (PGNode *)n;
			}
#line 26263 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 648: /* copy_database_flag: %empty  */
#line 61 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                        { (yyval.conststr) = NULL; }
#line 26269 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 649: /* copy_database_flag: '(' SCHEMA ')'  */
#line 62 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.conststr) = "schema"; }
#line 26275 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 650: /* copy_database_flag: '(' DATA_P ')'  */
#line 63 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.conststr) = "data"; }
#line 26281 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 651: /* copy_from: FROM  */
#line 67 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.boolean) = true; }
#line 26287 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 652: /* copy_from: TO  */
#line 68 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.boolean) = false; }
#line 26293 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 653: /* copy_delimiter: opt_using DELIMITERS Sconst  */
#line 74 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("delimiter", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-1]));
				}
#line 26301 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 654: /* copy_delimiter: %empty  */
#line 77 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.defelt) = NULL; }
#line 26307 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 655: /* copy_generic_opt_arg_list: copy_generic_opt_arg_list_item  */
#line 83 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 26315 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 656: /* copy_generic_opt_arg_list: copy_generic_opt_arg_list ',' copy_generic_opt_arg_list_item  */
#line 87 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 26323 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 657: /* opt_using: USING  */
#line 94 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                {}
#line 26329 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 658: /* opt_using: %empty  */
#line 95 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                {}
#line 26335 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 659: /* opt_as: AS  */
#line 99 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                {}
#line 26341 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 660: /* opt_as: %empty  */
#line 100 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                        {}
#line 26347 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 661: /* opt_program: PROGRAM  */
#line 105 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.boolean) = true; }
#line 26353 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 662: /* opt_program: %empty  */
#line 106 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                        { (yyval.boolean) = false; }
#line 26359 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 663: /* copy_options: copy_opt_list  */
#line 110 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 26365 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 664: /* copy_options: '(' copy_generic_opt_list ')'  */
#line 111 "third_party/libpg_query/grammar/statements/copy.y"
                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 26371 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 665: /* copy_generic_opt_arg: opt_boolean_or_string  */
#line 116 "third_party/libpg_query/grammar/statements/copy.y"
                                                                { (yyval.node) = (PGNode *) makeString((yyvsp[0].str)); }
#line 26377 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 666: /* copy_generic_opt_arg: NumericOnly  */
#line 117 "third_party/libpg_query/grammar/statements/copy.y"
                                                                        { (yyval.node) = (PGNode *) (yyvsp[0].value); }
#line 26383 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 667: /* copy_generic_opt_arg: '*'  */
#line 118 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                { (yyval.node) = (PGNode *) makeNode(PGAStar); }
#line 26389 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 668: /* copy_generic_opt_arg: '(' copy_generic_opt_arg_list ')'  */
#line 119 "third_party/libpg_query/grammar/statements/copy.y"
                                                                        { (yyval.node) = (PGNode *) (yyvsp[-1].list); }
#line 26395 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 669: /* copy_generic_opt_arg: struct_expr  */
#line 120 "third_party/libpg_query/grammar/statements/copy.y"
                                                                        { (yyval.node) = (PGNode *) (yyvsp[0].node); }
#line 26401 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 670: /* copy_generic_opt_arg: %empty  */
#line 121 "third_party/libpg_query/grammar/statements/copy.y"
                                                                        { (yyval.node) = NULL; }
#line 26407 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 671: /* copy_generic_opt_elem: ColLabel copy_generic_opt_arg  */
#line 127 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[-1].str), (yyvsp[0].node), (yylsp[-1]));
				}
#line 26415 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 672: /* opt_oids: WITH OIDS  */
#line 135 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("oids", (PGNode *)makeInteger(true), (yylsp[-1]));
				}
#line 26423 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 673: /* opt_oids: %empty  */
#line 138 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.defelt) = NULL; }
#line 26429 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 674: /* copy_opt_list: copy_opt_list copy_opt_item  */
#line 143 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].defelt)); }
#line 26435 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 675: /* copy_opt_list: %empty  */
#line 144 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                        { (yyval.list) = NIL; }
#line 26441 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 676: /* opt_binary: BINARY  */
#line 150 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("format", (PGNode *)makeString("binary"), (yylsp[0]));
				}
#line 26449 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 677: /* opt_binary: %empty  */
#line 153 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.defelt) = NULL; }
#line 26455 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 678: /* copy_opt_item: BINARY  */
#line 159 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("format", (PGNode *)makeString("binary"), (yylsp[0]));
				}
#line 26463 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 679: /* copy_opt_item: OIDS  */
#line 163 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("oids", (PGNode *)makeInteger(true), (yylsp[0]));
				}
#line 26471 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 680: /* copy_opt_item: FREEZE  */
#line 167 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("freeze", (PGNode *)makeInteger(true), (yylsp[0]));
				}
#line 26479 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 681: /* copy_opt_item: DELIMITER opt_as Sconst  */
#line 171 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("delimiter", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-2]));
				}
#line 26487 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 682: /* copy_opt_item: NULL_P opt_as Sconst  */
#line 175 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("null", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-2]));
				}
#line 26495 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 683: /* copy_opt_item: CSV  */
#line 179 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("format", (PGNode *)makeString("csv"), (yylsp[0]));
				}
#line 26503 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 684: /* copy_opt_item: HEADER_P  */
#line 183 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("header", (PGNode *)makeInteger(true), (yylsp[0]));
				}
#line 26511 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 685: /* copy_opt_item: QUOTE opt_as Sconst  */
#line 187 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("quote", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-2]));
				}
#line 26519 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 686: /* copy_opt_item: ESCAPE opt_as Sconst  */
#line 191 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("escape", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-2]));
				}
#line 26527 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 687: /* copy_opt_item: FORCE QUOTE columnList  */
#line 195 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("force_quote", (PGNode *)(yyvsp[0].list), (yylsp[-2]));
				}
#line 26535 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 688: /* copy_opt_item: FORCE QUOTE '*'  */
#line 199 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("force_quote", (PGNode *)makeNode(PGAStar), (yylsp[-2]));
				}
#line 26543 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 689: /* copy_opt_item: PARTITION BY columnList  */
#line 203 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("partition_by", (PGNode *)(yyvsp[0].list), (yylsp[-2]));
				}
#line 26551 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 690: /* copy_opt_item: PARTITION BY '*'  */
#line 207 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("partition_by", (PGNode *)makeNode(PGAStar), (yylsp[-2]));
				}
#line 26559 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 691: /* copy_opt_item: FORCE NOT NULL_P columnList  */
#line 211 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("force_not_null", (PGNode *)(yyvsp[0].list), (yylsp[-3]));
				}
#line 26567 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 692: /* copy_opt_item: FORCE NULL_P columnList  */
#line 215 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("force_null", (PGNode *)(yyvsp[0].list), (yylsp[-2]));
				}
#line 26575 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 693: /* copy_opt_item: ENCODING Sconst  */
#line 219 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("encoding", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-1]));
				}
#line 26583 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 694: /* copy_generic_opt_arg_list_item: opt_boolean_or_string  */
#line 226 "third_party/libpg_query/grammar/statements/copy.y"
                                                { (yyval.node) = (PGNode *) makeString((yyvsp[0].str)); }
#line 26589 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 695: /* copy_file_name: Sconst  */
#line 231 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 26595 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 696: /* copy_file_name: STDIN  */
#line 232 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.str) = NULL; }
#line 26601 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 697: /* copy_file_name: STDOUT  */
#line 233 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.str) = NULL; }
#line 26607 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 698: /* copy_file_name: IDENT '.' ColId  */
#line 234 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                        { (yyval.str) = psprintf("%s.%s", (yyvsp[-2].str), (yyvsp[0].str)); }
#line 26613 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 699: /* copy_file_name: IDENT  */
#line 235 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 26619 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 700: /* copy_generic_opt_list: copy_generic_opt_elem  */
#line 242 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].defelt));
				}
#line 26627 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 701: /* copy_generic_opt_list: copy_generic_opt_list ',' copy_generic_opt_elem  */
#line 246 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt));
				}
#line 26635 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 704: /* select_with_parens: '(' select_no_parens ')'  */
#line 52 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[-1].node); }
#line 26641 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 705: /* select_with_parens: '(' select_with_parens ')'  */
#line 53 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.node) = (yyvsp[-1].node); }
#line 26647 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 706: /* select_with_parens: '(' VariableShowStmt ')'  */
#line 55 "third_party/libpg_query/grammar/statements/select.y"
                    {
		    	(yyval.node) = (yyvsp[-1].node);
			}
#line 26655 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 707: /* select_no_parens: simple_select  */
#line 72 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 26661 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 708: /* select_no_parens: select_clause sort_clause  */
#line 74 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-1].node), (yyvsp[0].list), NIL,
										NULL, NULL, NULL,
										yyscanner);
					(yyval.node) = (yyvsp[-1].node);
				}
#line 26672 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 709: /* select_no_parens: select_clause opt_sort_clause for_locking_clause opt_select_limit  */
#line 81 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-3].node), (yyvsp[-2].list), (yyvsp[-1].list),
										(PGNode*) list_nth((yyvsp[0].list), 0), (PGNode*) list_nth((yyvsp[0].list), 1),
										NULL,
										yyscanner);
					(yyval.node) = (yyvsp[-3].node);
				}
#line 26684 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 710: /* select_no_parens: select_clause opt_sort_clause select_limit opt_for_locking_clause  */
#line 89 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-3].node), (yyvsp[-2].list), (yyvsp[0].list),
										(PGNode*) list_nth((yyvsp[-1].list), 0), (PGNode*) list_nth((yyvsp[-1].list), 1),
										NULL,
										yyscanner);
					(yyval.node) = (yyvsp[-3].node);
				}
#line 26696 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 711: /* select_no_parens: with_clause select_clause  */
#line 97 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[0].node), NULL, NIL,
										NULL, NULL,
										(yyvsp[-1].with),
										yyscanner);
					(yyval.node) = (yyvsp[0].node);
				}
#line 26708 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 712: /* select_no_parens: with_clause select_clause sort_clause  */
#line 105 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-1].node), (yyvsp[0].list), NIL,
										NULL, NULL,
										(yyvsp[-2].with),
										yyscanner);
					(yyval.node) = (yyvsp[-1].node);
				}
#line 26720 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 713: /* select_no_parens: with_clause select_clause opt_sort_clause for_locking_clause opt_select_limit  */
#line 113 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-3].node), (yyvsp[-2].list), (yyvsp[-1].list),
										(PGNode*) list_nth((yyvsp[0].list), 0), (PGNode*) list_nth((yyvsp[0].list), 1),
										(yyvsp[-4].with),
										yyscanner);
					(yyval.node) = (yyvsp[-3].node);
				}
#line 26732 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 714: /* select_no_parens: with_clause select_clause opt_sort_clause select_limit opt_for_locking_clause  */
#line 121 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-3].node), (yyvsp[-2].list), (yyvsp[0].list),
										(PGNode*) list_nth((yyvsp[-1].list), 0), (PGNode*) list_nth((yyvsp[-1].list), 1),
										(yyvsp[-4].with),
										yyscanner);
					(yyval.node) = (yyvsp[-3].node);
				}
#line 26744 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 715: /* select_clause: simple_select  */
#line 131 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 26750 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 716: /* select_clause: select_with_parens  */
#line 132 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 26756 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 717: /* opt_select: SELECT opt_all_clause opt_target_list_opt_comma  */
#line 160 "third_party/libpg_query/grammar/statements/select.y"
                        {
				(yyval.list) = (yyvsp[0].list);
			}
#line 26764 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 718: /* opt_select: %empty  */
#line 164 "third_party/libpg_query/grammar/statements/select.y"
                        {
				PGAStar *star = makeNode(PGAStar);
				(yyval.list) = list_make1(star);
			}
#line 26773 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 719: /* simple_select: SELECT opt_all_clause opt_target_list_opt_comma into_clause from_clause where_clause group_clause having_clause window_clause qualify_clause sample_clause  */
#line 175 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *n = makeNode(PGSelectStmt);
					n->targetList = (yyvsp[-8].list);
					n->intoClause = (yyvsp[-7].into);
					n->fromClause = (yyvsp[-6].list);
					n->whereClause = (yyvsp[-5].node);
					n->groupClause = (yyvsp[-4].list);
					n->havingClause = (yyvsp[-3].node);
					n->windowClause = (yyvsp[-2].list);
					n->qualifyClause = (yyvsp[-1].node);
					n->sampleOptions = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 26791 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 720: /* simple_select: SELECT distinct_clause target_list_opt_comma into_clause from_clause where_clause group_clause having_clause window_clause qualify_clause sample_clause  */
#line 191 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *n = makeNode(PGSelectStmt);
					n->distinctClause = (yyvsp[-9].list);
					n->targetList = (yyvsp[-8].list);
					n->intoClause = (yyvsp[-7].into);
					n->fromClause = (yyvsp[-6].list);
					n->whereClause = (yyvsp[-5].node);
					n->groupClause = (yyvsp[-4].list);
					n->havingClause = (yyvsp[-3].node);
					n->windowClause = (yyvsp[-2].list);
					n->qualifyClause = (yyvsp[-1].node);
					n->sampleOptions = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 26810 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 721: /* simple_select: FROM from_list opt_select into_clause where_clause group_clause having_clause window_clause qualify_clause sample_clause  */
#line 208 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *n = makeNode(PGSelectStmt);
					n->targetList = (yyvsp[-7].list);
					n->fromClause = (yyvsp[-8].list);
					n->intoClause = (yyvsp[-6].into);
					n->whereClause = (yyvsp[-5].node);
					n->groupClause = (yyvsp[-4].list);
					n->havingClause = (yyvsp[-3].node);
					n->windowClause = (yyvsp[-2].list);
					n->qualifyClause = (yyvsp[-1].node);
					n->sampleOptions = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 26828 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 722: /* simple_select: FROM from_list SELECT distinct_clause target_list_opt_comma into_clause where_clause group_clause having_clause window_clause qualify_clause sample_clause  */
#line 225 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *n = makeNode(PGSelectStmt);
					n->targetList = (yyvsp[-7].list);
					n->distinctClause = (yyvsp[-8].list);
					n->fromClause = (yyvsp[-10].list);
					n->intoClause = (yyvsp[-6].into);
					n->whereClause = (yyvsp[-5].node);
					n->groupClause = (yyvsp[-4].list);
					n->havingClause = (yyvsp[-3].node);
					n->windowClause = (yyvsp[-2].list);
					n->qualifyClause = (yyvsp[-1].node);
					n->sampleOptions = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 26847 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 723: /* simple_select: values_clause_opt_comma  */
#line 239 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 26853 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 724: /* simple_select: TABLE relation_expr  */
#line 241 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* same as SELECT * FROM relation_expr */
					PGColumnRef *cr = makeNode(PGColumnRef);
					PGResTarget *rt = makeNode(PGResTarget);
					PGSelectStmt *n = makeNode(PGSelectStmt);

					cr->fields = list_make1(makeNode(PGAStar));
					cr->location = -1;

					rt->name = NULL;
					rt->indirection = NIL;
					rt->val = (PGNode *)cr;
					rt->location = -1;

					n->targetList = list_make1(rt);
					n->fromClause = list_make1((yyvsp[0].range));
					(yyval.node) = (PGNode *)n;
				}
#line 26876 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 725: /* simple_select: select_clause UNION all_or_distinct by_name select_clause  */
#line 260 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSetOp(PG_SETOP_UNION_BY_NAME, (yyvsp[-2].boolean), (yyvsp[-4].node), (yyvsp[0].node));
				}
#line 26884 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 726: /* simple_select: select_clause UNION all_or_distinct select_clause  */
#line 264 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSetOp(PG_SETOP_UNION, (yyvsp[-1].boolean), (yyvsp[-3].node), (yyvsp[0].node));
				}
#line 26892 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 727: /* simple_select: select_clause INTERSECT all_or_distinct select_clause  */
#line 268 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSetOp(PG_SETOP_INTERSECT, (yyvsp[-1].boolean), (yyvsp[-3].node), (yyvsp[0].node));
				}
#line 26900 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 728: /* simple_select: select_clause EXCEPT all_or_distinct select_clause  */
#line 272 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSetOp(PG_SETOP_EXCEPT, (yyvsp[-1].boolean), (yyvsp[-3].node), (yyvsp[0].node));
				}
#line 26908 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 729: /* simple_select: pivot_keyword table_ref USING target_list_opt_comma  */
#line 276 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *res = makeNode(PGSelectStmt);
					PGPivotStmt *n = makeNode(PGPivotStmt);
					n->source = (yyvsp[-2].node);
					n->aggrs = (yyvsp[0].list);
					n->location = (yylsp[-3]);
					res->pivot = n;
					(yyval.node) = (PGNode *)res;
				}
#line 26922 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 730: /* simple_select: pivot_keyword table_ref USING target_list_opt_comma GROUP_P BY name_list_opt_comma_opt_bracket  */
#line 286 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *res = makeNode(PGSelectStmt);
					PGPivotStmt *n = makeNode(PGPivotStmt);
					n->source = (yyvsp[-5].node);
					n->aggrs = (yyvsp[-3].list);
					n->groups = (yyvsp[0].list);
					n->location = (yylsp[-6]);
					res->pivot = n;
					(yyval.node) = (PGNode *)res;
				}
#line 26937 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 731: /* simple_select: pivot_keyword table_ref GROUP_P BY name_list_opt_comma_opt_bracket  */
#line 297 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *res = makeNode(PGSelectStmt);
					PGPivotStmt *n = makeNode(PGPivotStmt);
					n->source = (yyvsp[-3].node);
					n->groups = (yyvsp[0].list);
					n->location = (yylsp[-4]);
					res->pivot = n;
					(yyval.node) = (PGNode *)res;
				}
#line 26951 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 732: /* simple_select: pivot_keyword table_ref ON pivot_column_list  */
#line 307 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *res = makeNode(PGSelectStmt);
					PGPivotStmt *n = makeNode(PGPivotStmt);
					n->source = (yyvsp[-2].node);
					n->columns = (yyvsp[0].list);
					res->pivot = n;
					(yyval.node) = (PGNode *)res;
				}
#line 26964 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 733: /* simple_select: pivot_keyword table_ref ON pivot_column_list GROUP_P BY name_list_opt_comma_opt_bracket  */
#line 316 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *res = makeNode(PGSelectStmt);
					PGPivotStmt *n = makeNode(PGPivotStmt);
					n->source = (yyvsp[-5].node);
					n->columns = (yyvsp[-3].list);
					n->groups = (yyvsp[0].list);
					n->location = (yylsp[-6]);
					res->pivot = n;
					(yyval.node) = (PGNode *)res;
				}
#line 26979 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 734: /* simple_select: pivot_keyword table_ref ON pivot_column_list USING target_list_opt_comma  */
#line 327 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *res = makeNode(PGSelectStmt);
					PGPivotStmt *n = makeNode(PGPivotStmt);
					n->source = (yyvsp[-4].node);
					n->columns = (yyvsp[-2].list);
					n->aggrs = (yyvsp[0].list);
					n->location = (yylsp[-5]);
					res->pivot = n;
					(yyval.node) = (PGNode *)res;
				}
#line 26994 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 735: /* simple_select: pivot_keyword table_ref ON pivot_column_list USING target_list_opt_comma GROUP_P BY name_list_opt_comma_opt_bracket  */
#line 338 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *res = makeNode(PGSelectStmt);
					PGPivotStmt *n = makeNode(PGPivotStmt);
					n->source = (yyvsp[-7].node);
					n->columns = (yyvsp[-5].list);
					n->aggrs = (yyvsp[-3].list);
					n->groups = (yyvsp[0].list);
					n->location = (yylsp[-8]);
					res->pivot = n;
					(yyval.node) = (PGNode *)res;
				}
#line 27010 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 736: /* simple_select: unpivot_keyword table_ref ON target_list_opt_comma INTO NAME_P name value_or_values name_list_opt_comma_opt_bracket  */
#line 350 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *res = makeNode(PGSelectStmt);
					PGPivotStmt *n = makeNode(PGPivotStmt);
					n->source = (yyvsp[-7].node);
					n->unpivots = (yyvsp[0].list);
					n->location = (yylsp[-8]);
					PGPivot *piv = makeNode(PGPivot);
					piv->unpivot_columns = list_make1(makeString((yyvsp[-2].str)));
					piv->pivot_value = (yyvsp[-5].list);
					n->columns = list_make1(piv);

					res->pivot = n;
					(yyval.node) = (PGNode *)res;
				}
#line 27029 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 737: /* simple_select: unpivot_keyword table_ref ON target_list_opt_comma  */
#line 365 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *res = makeNode(PGSelectStmt);
					PGPivotStmt *n = makeNode(PGPivotStmt);
					n->source = (yyvsp[-2].node);
					n->unpivots = list_make1(makeString("value"));
					n->location = (yylsp[-3]);
					PGPivot *piv = makeNode(PGPivot);
					piv->unpivot_columns = list_make1(makeString("name"));
					piv->pivot_value = (yyvsp[0].list);
					n->columns = list_make1(piv);

					res->pivot = n;
					(yyval.node) = (PGNode *)res;
				}
#line 27048 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 744: /* pivot_column_entry: b_expr  */
#line 395 "third_party/libpg_query/grammar/statements/select.y"
                        {
				PGPivot *n = makeNode(PGPivot);
				n->pivot_columns = list_make1((yyvsp[0].node));
				(yyval.node) = (PGNode *) n;
			}
#line 27058 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 745: /* pivot_column_entry: b_expr IN_P '(' select_no_parens ')'  */
#line 401 "third_party/libpg_query/grammar/statements/select.y"
                        {
				PGPivot *n = makeNode(PGPivot);
				n->pivot_columns = list_make1((yyvsp[-4].node));
				n->subquery = (yyvsp[-1].node);
				(yyval.node) = (PGNode *) n;
			}
#line 27069 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 746: /* pivot_column_entry: single_pivot_value  */
#line 407 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 27075 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 747: /* pivot_column_list_internal: pivot_column_entry  */
#line 411 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 27081 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 748: /* pivot_column_list_internal: pivot_column_list_internal ',' pivot_column_entry  */
#line 412 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 27087 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 749: /* pivot_column_list: pivot_column_list_internal  */
#line 416 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 27093 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 750: /* pivot_column_list: pivot_column_list_internal ','  */
#line 417 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 27099 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 751: /* with_clause: WITH cte_list  */
#line 432 "third_party/libpg_query/grammar/statements/select.y"
                        {
				(yyval.with) = makeNode(PGWithClause);
				(yyval.with)->ctes = (yyvsp[0].list);
				(yyval.with)->recursive = false;
				(yyval.with)->location = (yylsp[-1]);
			}
#line 27110 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 752: /* with_clause: WITH_LA cte_list  */
#line 439 "third_party/libpg_query/grammar/statements/select.y"
                        {
				(yyval.with) = makeNode(PGWithClause);
				(yyval.with)->ctes = (yyvsp[0].list);
				(yyval.with)->recursive = false;
				(yyval.with)->location = (yylsp[-1]);
			}
#line 27121 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 753: /* with_clause: WITH RECURSIVE cte_list  */
#line 446 "third_party/libpg_query/grammar/statements/select.y"
                        {
				(yyval.with) = makeNode(PGWithClause);
				(yyval.with)->ctes = (yyvsp[0].list);
				(yyval.with)->recursive = true;
				(yyval.with)->location = (yylsp[-2]);
			}
#line 27132 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 754: /* cte_list: common_table_expr  */
#line 455 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 27138 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 755: /* cte_list: cte_list ',' common_table_expr  */
#line 456 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 27144 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 756: /* common_table_expr: name opt_name_list AS opt_materialized '(' PreparableStmt ')'  */
#line 460 "third_party/libpg_query/grammar/statements/select.y"
                        {
				PGCommonTableExpr *n = makeNode(PGCommonTableExpr);
				n->ctename = (yyvsp[-6].str);
				n->aliascolnames = (yyvsp[-5].list);
				n->ctematerialized = (yyvsp[-3].ctematerialize);
				n->ctequery = (yyvsp[-1].node);
				n->location = (yylsp[-6]);
				(yyval.node) = (PGNode *) n;
			}
#line 27158 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 757: /* opt_materialized: MATERIALIZED  */
#line 472 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.ctematerialize) = PGCTEMaterializeAlways; }
#line 27164 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 758: /* opt_materialized: NOT MATERIALIZED  */
#line 473 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.ctematerialize) = PGCTEMaterializeNever; }
#line 27170 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 759: /* opt_materialized: %empty  */
#line 474 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.ctematerialize) = PGCTEMaterializeDefault; }
#line 27176 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 760: /* into_clause: INTO OptTempTableName  */
#line 479 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.into) = makeNode(PGIntoClause);
					(yyval.into)->rel = (yyvsp[0].range);
					(yyval.into)->colNames = NIL;
					(yyval.into)->options = NIL;
					(yyval.into)->onCommit = PG_ONCOMMIT_NOOP;
					(yyval.into)->viewQuery = NULL;
					(yyval.into)->skipData = false;
				}
#line 27190 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 761: /* into_clause: %empty  */
#line 489 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.into) = NULL; }
#line 27196 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 762: /* OptTempTableName: TEMPORARY opt_table qualified_name  */
#line 498 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 27205 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 763: /* OptTempTableName: TEMP opt_table qualified_name  */
#line 503 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 27214 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 764: /* OptTempTableName: LOCAL TEMPORARY opt_table qualified_name  */
#line 508 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 27223 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 765: /* OptTempTableName: LOCAL TEMP opt_table qualified_name  */
#line 513 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 27232 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 766: /* OptTempTableName: GLOBAL TEMPORARY opt_table qualified_name  */
#line 518 "third_party/libpg_query/grammar/statements/select.y"
                                {
					ereport(PGWARNING,
							(errmsg("GLOBAL is deprecated in temporary table creation"),
							 parser_errposition((yylsp[-3]))));
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 27244 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 767: /* OptTempTableName: GLOBAL TEMP opt_table qualified_name  */
#line 526 "third_party/libpg_query/grammar/statements/select.y"
                                {
					ereport(PGWARNING,
							(errmsg("GLOBAL is deprecated in temporary table creation"),
							 parser_errposition((yylsp[-3]))));
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 27256 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 768: /* OptTempTableName: UNLOGGED opt_table qualified_name  */
#line 534 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_UNLOGGED;
				}
#line 27265 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 769: /* OptTempTableName: TABLE qualified_name  */
#line 539 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = RELPERSISTENCE_PERMANENT;
				}
#line 27274 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 770: /* OptTempTableName: qualified_name  */
#line 544 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = RELPERSISTENCE_PERMANENT;
				}
#line 27283 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 771: /* opt_table: TABLE  */
#line 550 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        {}
#line 27289 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 772: /* opt_table: %empty  */
#line 551 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                {}
#line 27295 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 773: /* all_or_distinct: ALL  */
#line 555 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.boolean) = true; }
#line 27301 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 774: /* all_or_distinct: DISTINCT  */
#line 556 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 27307 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 775: /* all_or_distinct: %empty  */
#line 557 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 27313 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 776: /* by_name: BY NAME_P  */
#line 561 "third_party/libpg_query/grammar/statements/select.y"
                                                          { }
#line 27319 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 777: /* distinct_clause: DISTINCT  */
#line 568 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1(NIL); }
#line 27325 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 778: /* distinct_clause: DISTINCT ON '(' expr_list_opt_comma ')'  */
#line 569 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 27331 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 779: /* opt_all_clause: ALL  */
#line 573 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.list) = NIL;}
#line 27337 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 780: /* opt_all_clause: %empty  */
#line 574 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 27343 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 781: /* opt_ignore_nulls: IGNORE_P NULLS_P  */
#line 578 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.boolean) = true;}
#line 27349 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 782: /* opt_ignore_nulls: RESPECT_P NULLS_P  */
#line 579 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.boolean) = false;}
#line 27355 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 783: /* opt_ignore_nulls: %empty  */
#line 580 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 27361 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 784: /* opt_sort_clause: sort_clause  */
#line 584 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list);}
#line 27367 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 785: /* opt_sort_clause: %empty  */
#line 585 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 27373 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 786: /* sort_clause: ORDER BY sortby_list  */
#line 589 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 27379 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 787: /* sort_clause: ORDER BY ALL opt_asc_desc opt_nulls_order  */
#line 591 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSortBy *sort = makeNode(PGSortBy);
					PGAStar *star = makeNode(PGAStar);
					star->columns = true;
					star->location = (yylsp[-2]);
					sort->node = (PGNode *) star;
					sort->sortby_dir = (yyvsp[-1].sortorder);
					sort->sortby_nulls = (yyvsp[0].nullorder);
					sort->useOp = NIL;
					sort->location = -1;		/* no operator */
					(yyval.list) = list_make1(sort);
				}
#line 27396 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 788: /* sortby_list: sortby  */
#line 606 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].sortby)); }
#line 27402 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 789: /* sortby_list: sortby_list ',' sortby  */
#line 607 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].sortby)); }
#line 27408 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 790: /* sortby: a_expr USING qual_all_Op opt_nulls_order  */
#line 611 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.sortby) = makeNode(PGSortBy);
					(yyval.sortby)->node = (yyvsp[-3].node);
					(yyval.sortby)->sortby_dir = SORTBY_USING;
					(yyval.sortby)->sortby_nulls = (yyvsp[0].nullorder);
					(yyval.sortby)->useOp = (yyvsp[-1].list);
					(yyval.sortby)->location = (yylsp[-1]);
				}
#line 27421 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 791: /* sortby: a_expr opt_asc_desc opt_nulls_order  */
#line 620 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.sortby) = makeNode(PGSortBy);
					(yyval.sortby)->node = (yyvsp[-2].node);
					(yyval.sortby)->sortby_dir = (yyvsp[-1].sortorder);
					(yyval.sortby)->sortby_nulls = (yyvsp[0].nullorder);
					(yyval.sortby)->useOp = NIL;
					(yyval.sortby)->location = -1;		/* no operator */
				}
#line 27434 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 792: /* opt_asc_desc: ASC_P  */
#line 630 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.sortorder) = PG_SORTBY_ASC; }
#line 27440 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 793: /* opt_asc_desc: DESC_P  */
#line 631 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.sortorder) = PG_SORTBY_DESC; }
#line 27446 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 794: /* opt_asc_desc: %empty  */
#line 632 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.sortorder) = PG_SORTBY_DEFAULT; }
#line 27452 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 795: /* opt_nulls_order: NULLS_LA FIRST_P  */
#line 635 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.nullorder) = PG_SORTBY_NULLS_FIRST; }
#line 27458 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 796: /* opt_nulls_order: NULLS_LA LAST_P  */
#line 636 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.nullorder) = PG_SORTBY_NULLS_LAST; }
#line 27464 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 797: /* opt_nulls_order: %empty  */
#line 637 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.nullorder) = PG_SORTBY_NULLS_DEFAULT; }
#line 27470 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 798: /* select_limit: limit_clause offset_clause  */
#line 641 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = list_make2((yyvsp[0].node), (yyvsp[-1].node)); }
#line 27476 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 799: /* select_limit: offset_clause limit_clause  */
#line 642 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = list_make2((yyvsp[-1].node), (yyvsp[0].node)); }
#line 27482 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 800: /* select_limit: limit_clause  */
#line 643 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = list_make2(NULL, (yyvsp[0].node)); }
#line 27488 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 801: /* select_limit: offset_clause  */
#line 644 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = list_make2((yyvsp[0].node), NULL); }
#line 27494 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 802: /* opt_select_limit: select_limit  */
#line 648 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 27500 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 803: /* opt_select_limit: %empty  */
#line 649 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = list_make2(NULL,NULL); }
#line 27506 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 804: /* limit_clause: LIMIT select_limit_value  */
#line 654 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 27512 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 805: /* limit_clause: LIMIT select_limit_value ',' select_offset_value  */
#line 656 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* Disabled because it was too confusing, bjm 2002-02-18 */
					ereport(ERROR,
							(errcode(PG_ERRCODE_SYNTAX_ERROR),
							 errmsg("LIMIT #,# syntax is not supported"),
							 errhint("Use separate LIMIT and OFFSET clauses."),
							 parser_errposition((yylsp[-3]))));
				}
#line 27525 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 806: /* limit_clause: FETCH first_or_next select_fetch_first_value row_or_rows ONLY  */
#line 672 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[-2].node); }
#line 27531 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 807: /* limit_clause: FETCH first_or_next row_or_rows ONLY  */
#line 674 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeIntConst(1, -1); }
#line 27537 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 808: /* offset_clause: OFFSET select_offset_value  */
#line 679 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 27543 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 809: /* offset_clause: OFFSET select_fetch_first_value row_or_rows  */
#line 682 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[-1].node); }
#line 27549 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 810: /* sample_count: FCONST '%'  */
#line 690 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleSize(makeFloat((yyvsp[-1].str)), true);
		}
#line 27557 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 811: /* sample_count: ICONST '%'  */
#line 694 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleSize(makeInteger((yyvsp[-1].ival)), true);
		}
#line 27565 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 812: /* sample_count: FCONST PERCENT  */
#line 698 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleSize(makeFloat((yyvsp[-1].str)), true);
		}
#line 27573 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 813: /* sample_count: ICONST PERCENT  */
#line 702 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleSize(makeInteger((yyvsp[-1].ival)), true);
		}
#line 27581 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 814: /* sample_count: ICONST  */
#line 706 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleSize(makeInteger((yyvsp[0].ival)), false);
		}
#line 27589 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 815: /* sample_count: ICONST ROWS  */
#line 710 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleSize(makeInteger((yyvsp[-1].ival)), false);
		}
#line 27597 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 816: /* sample_clause: USING SAMPLE tablesample_entry  */
#line 717 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (yyvsp[0].node);
				}
#line 27605 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 817: /* sample_clause: %empty  */
#line 721 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = NULL; }
#line 27611 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 818: /* opt_sample_func: ColId  */
#line 728 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.str) = (yyvsp[0].str); }
#line 27617 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 819: /* opt_sample_func: %empty  */
#line 729 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.str) = NULL; }
#line 27623 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 820: /* tablesample_entry: opt_sample_func '(' sample_count ')' opt_repeatable_clause  */
#line 734 "third_party/libpg_query/grammar/statements/select.y"
                                {
					int seed = (yyvsp[0].ival);
					(yyval.node) = makeSampleOptions((yyvsp[-2].node), (yyvsp[-4].str), &seed, (yylsp[-4]));
				}
#line 27632 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 821: /* tablesample_entry: sample_count  */
#line 739 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleOptions((yyvsp[0].node), NULL, NULL, (yylsp[0]));
		}
#line 27640 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 822: /* tablesample_entry: sample_count '(' ColId ')'  */
#line 743 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleOptions((yyvsp[-3].node), (yyvsp[-1].str), NULL, (yylsp[-3]));
		}
#line 27648 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 823: /* tablesample_entry: sample_count '(' ColId ',' ICONST ')'  */
#line 747 "third_party/libpg_query/grammar/statements/select.y"
                {
			int seed = (yyvsp[-1].ival);
			(yyval.node) = makeSampleOptions((yyvsp[-5].node), (yyvsp[-3].str), &seed, (yylsp[-5]));
		}
#line 27657 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 824: /* tablesample_clause: TABLESAMPLE tablesample_entry  */
#line 755 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (yyvsp[0].node);
				}
#line 27665 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 825: /* opt_tablesample_clause: tablesample_clause  */
#line 761 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.node) = (yyvsp[0].node); }
#line 27671 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 826: /* opt_tablesample_clause: %empty  */
#line 762 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.node) = NULL; }
#line 27677 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 827: /* opt_repeatable_clause: REPEATABLE '(' ICONST ')'  */
#line 767 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.ival) = (yyvsp[-1].ival); }
#line 27683 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 828: /* opt_repeatable_clause: %empty  */
#line 768 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.ival) = -1; }
#line 27689 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 829: /* select_limit_value: a_expr  */
#line 772 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 27695 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 830: /* select_limit_value: ALL  */
#line 774 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* LIMIT ALL is represented as a NULL constant */
					(yyval.node) = makeNullAConst((yylsp[0]));
				}
#line 27704 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 831: /* select_limit_value: a_expr '%'  */
#line 779 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeLimitPercent((yyvsp[-1].node)); }
#line 27710 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 832: /* select_limit_value: FCONST PERCENT  */
#line 781 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeLimitPercent(makeFloatConst((yyvsp[-1].str),(yylsp[-1]))); }
#line 27716 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 833: /* select_limit_value: ICONST PERCENT  */
#line 783 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeLimitPercent(makeIntConst((yyvsp[-1].ival),(yylsp[-1]))); }
#line 27722 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 834: /* select_offset_value: a_expr  */
#line 787 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 27728 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 835: /* select_fetch_first_value: c_expr  */
#line 807 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 27734 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 836: /* select_fetch_first_value: '+' I_or_F_const  */
#line 809 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", NULL, (yyvsp[0].node), (yylsp[-1])); }
#line 27740 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 837: /* select_fetch_first_value: '-' I_or_F_const  */
#line 811 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = doNegate((yyvsp[0].node), (yylsp[-1])); }
#line 27746 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 838: /* I_or_F_const: Iconst  */
#line 815 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = makeIntConst((yyvsp[0].ival),(yylsp[0])); }
#line 27752 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 839: /* I_or_F_const: FCONST  */
#line 816 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = makeFloatConst((yyvsp[0].str),(yylsp[0])); }
#line 27758 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 840: /* row_or_rows: ROW  */
#line 820 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.ival) = 0; }
#line 27764 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 841: /* row_or_rows: ROWS  */
#line 821 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.ival) = 0; }
#line 27770 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 842: /* first_or_next: FIRST_P  */
#line 824 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.ival) = 0; }
#line 27776 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 843: /* first_or_next: NEXT  */
#line 825 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.ival) = 0; }
#line 27782 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 844: /* group_clause: GROUP_P BY group_by_list_opt_comma  */
#line 850 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 27788 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 845: /* group_clause: GROUP_P BY ALL  */
#line 852 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNode *node = (PGNode *) makeGroupingSet(GROUPING_SET_ALL, NIL, (yylsp[0]));
					(yyval.list) = list_make1(node);
				}
#line 27797 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 846: /* group_clause: %empty  */
#line 856 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 27803 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 847: /* group_by_list: group_by_item  */
#line 860 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 27809 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 848: /* group_by_list: group_by_list ',' group_by_item  */
#line 861 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list),(yyvsp[0].node)); }
#line 27815 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 849: /* group_by_list_opt_comma: group_by_list  */
#line 865 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 27821 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 850: /* group_by_list_opt_comma: group_by_list ','  */
#line 866 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 27827 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 851: /* group_by_item: a_expr  */
#line 870 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 27833 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 852: /* group_by_item: empty_grouping_set  */
#line 871 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 27839 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 853: /* group_by_item: cube_clause  */
#line 872 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 27845 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 854: /* group_by_item: rollup_clause  */
#line 873 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 27851 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 855: /* group_by_item: grouping_sets_clause  */
#line 874 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 27857 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 856: /* empty_grouping_set: '(' ')'  */
#line 879 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeGroupingSet(GROUPING_SET_EMPTY, NIL, (yylsp[-1]));
				}
#line 27865 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 857: /* rollup_clause: ROLLUP '(' expr_list_opt_comma ')'  */
#line 892 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeGroupingSet(GROUPING_SET_ROLLUP, (yyvsp[-1].list), (yylsp[-3]));
				}
#line 27873 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 858: /* cube_clause: CUBE '(' expr_list_opt_comma ')'  */
#line 899 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeGroupingSet(GROUPING_SET_CUBE, (yyvsp[-1].list), (yylsp[-3]));
				}
#line 27881 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 859: /* grouping_sets_clause: GROUPING SETS '(' group_by_list_opt_comma ')'  */
#line 906 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeGroupingSet(GROUPING_SET_SETS, (yyvsp[-1].list), (yylsp[-4]));
				}
#line 27889 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 860: /* grouping_or_grouping_id: GROUPING  */
#line 912 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = NULL; }
#line 27895 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 861: /* grouping_or_grouping_id: GROUPING_ID  */
#line 913 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = NULL; }
#line 27901 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 862: /* having_clause: HAVING a_expr  */
#line 917 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 27907 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 863: /* having_clause: %empty  */
#line 918 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 27913 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 864: /* qualify_clause: QUALIFY a_expr  */
#line 922 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 27919 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 865: /* qualify_clause: %empty  */
#line 923 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 27925 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 866: /* for_locking_clause: for_locking_items  */
#line 927 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 27931 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 867: /* for_locking_clause: FOR READ_P ONLY  */
#line 928 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 27937 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 868: /* opt_for_locking_clause: for_locking_clause  */
#line 932 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 27943 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 869: /* opt_for_locking_clause: %empty  */
#line 933 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = NIL; }
#line 27949 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 870: /* for_locking_items: for_locking_item  */
#line 937 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 27955 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 871: /* for_locking_items: for_locking_items for_locking_item  */
#line 938 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 27961 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 872: /* for_locking_item: for_locking_strength locked_rels_list opt_nowait_or_skip  */
#line 943 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGLockingClause *n = makeNode(PGLockingClause);
					n->lockedRels = (yyvsp[-1].list);
					n->strength = (yyvsp[-2].lockstrength);
					n->waitPolicy = (yyvsp[0].lockwaitpolicy);
					(yyval.node) = (PGNode *) n;
				}
#line 27973 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 873: /* for_locking_strength: FOR UPDATE  */
#line 953 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.lockstrength) = LCS_FORUPDATE; }
#line 27979 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 874: /* for_locking_strength: FOR NO KEY UPDATE  */
#line 954 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.lockstrength) = PG_LCS_FORNOKEYUPDATE; }
#line 27985 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 875: /* for_locking_strength: FOR SHARE  */
#line 955 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.lockstrength) = PG_LCS_FORSHARE; }
#line 27991 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 876: /* for_locking_strength: FOR KEY SHARE  */
#line 956 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.lockstrength) = PG_LCS_FORKEYSHARE; }
#line 27997 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 877: /* locked_rels_list: OF qualified_name_list  */
#line 960 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 28003 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 878: /* locked_rels_list: %empty  */
#line 961 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = NIL; }
#line 28009 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 879: /* opt_nowait_or_skip: NOWAIT  */
#line 966 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.lockwaitpolicy) = LockWaitError; }
#line 28015 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 880: /* opt_nowait_or_skip: SKIP LOCKED  */
#line 967 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.lockwaitpolicy) = PGLockWaitSkip; }
#line 28021 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 881: /* opt_nowait_or_skip: %empty  */
#line 968 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.lockwaitpolicy) = PGLockWaitBlock; }
#line 28027 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 882: /* values_clause: VALUES '(' expr_list_opt_comma ')'  */
#line 978 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *n = makeNode(PGSelectStmt);
					n->valuesLists = list_make1((yyvsp[-1].list));
					(yyval.node) = (PGNode *) n;
				}
#line 28037 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 883: /* values_clause: values_clause ',' '(' expr_list_opt_comma ')'  */
#line 984 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *n = (PGSelectStmt *) (yyvsp[-4].node);
					n->valuesLists = lappend(n->valuesLists, (yyvsp[-1].list));
					(yyval.node) = (PGNode *) n;
				}
#line 28047 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 884: /* values_clause_opt_comma: values_clause  */
#line 992 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.node) = (yyvsp[0].node); }
#line 28053 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 885: /* values_clause_opt_comma: values_clause ','  */
#line 993 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.node) = (yyvsp[-1].node); }
#line 28059 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 886: /* from_clause: FROM from_list_opt_comma  */
#line 1006 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 28065 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 887: /* from_clause: %empty  */
#line 1007 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 28071 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 888: /* from_list: table_ref  */
#line 1011 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 28077 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 889: /* from_list: from_list ',' table_ref  */
#line 1012 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 28083 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 890: /* from_list_opt_comma: from_list  */
#line 1016 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 28089 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 891: /* from_list_opt_comma: from_list ','  */
#line 1017 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 28095 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 892: /* table_ref: relation_expr opt_alias_clause opt_tablesample_clause  */
#line 1024 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyvsp[-2].range)->alias = (yyvsp[-1].alias);
					(yyvsp[-2].range)->sample = (yyvsp[0].node);
					(yyval.node) = (PGNode *) (yyvsp[-2].range);
				}
#line 28105 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 893: /* table_ref: func_table func_alias_clause opt_tablesample_clause  */
#line 1030 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeFunction *n = (PGRangeFunction *) (yyvsp[-2].node);
					n->alias = (PGAlias*) linitial((yyvsp[-1].list));
					n->coldeflist = (PGList*) lsecond((yyvsp[-1].list));
					n->sample = (yyvsp[0].node);
					(yyval.node) = (PGNode *) n;
				}
#line 28117 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 894: /* table_ref: values_clause_opt_comma alias_clause opt_tablesample_clause  */
#line 1038 "third_party/libpg_query/grammar/statements/select.y"
                        {
				PGRangeSubselect *n = makeNode(PGRangeSubselect);
				n->lateral = false;
				n->subquery = (yyvsp[-2].node);
				n->alias = (yyvsp[-1].alias);
				n->sample = (yyvsp[0].node);
				(yyval.node) = (PGNode *) n;
			}
#line 28130 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 895: /* table_ref: LATERAL_P func_table func_alias_clause  */
#line 1047 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeFunction *n = (PGRangeFunction *) (yyvsp[-1].node);
					n->lateral = true;
					n->alias = (PGAlias*) linitial((yyvsp[0].list));
					n->coldeflist = (PGList*) lsecond((yyvsp[0].list));
					(yyval.node) = (PGNode *) n;
				}
#line 28142 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 896: /* table_ref: select_with_parens opt_alias_clause opt_tablesample_clause  */
#line 1055 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeSubselect *n = makeNode(PGRangeSubselect);
					n->lateral = false;
					n->subquery = (yyvsp[-2].node);
					n->alias = (yyvsp[-1].alias);
					n->sample = (yyvsp[0].node);
					(yyval.node) = (PGNode *) n;
				}
#line 28155 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 897: /* table_ref: LATERAL_P select_with_parens opt_alias_clause  */
#line 1064 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeSubselect *n = makeNode(PGRangeSubselect);
					n->lateral = true;
					n->subquery = (yyvsp[-1].node);
					n->alias = (yyvsp[0].alias);
					n->sample = NULL;
					(yyval.node) = (PGNode *) n;
				}
#line 28168 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 898: /* table_ref: joined_table  */
#line 1073 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) (yyvsp[0].jexpr);
				}
#line 28176 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 899: /* table_ref: '(' joined_table ')' alias_clause  */
#line 1077 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyvsp[-2].jexpr)->alias = (yyvsp[0].alias);
					(yyval.node) = (PGNode *) (yyvsp[-2].jexpr);
				}
#line 28185 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 900: /* table_ref: GRAPH_TABLE GraphTableStmt  */
#line 1082 "third_party/libpg_query/grammar/statements/select.y"
                {
                        (yyval.node) = (PGNode *) (yyvsp[0].node);
                }
#line 28193 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 901: /* table_ref: table_ref PIVOT '(' target_list_opt_comma FOR pivot_value_list opt_pivot_group_by ')' opt_alias_clause  */
#line 1086 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGPivotExpr *n = makeNode(PGPivotExpr);
					n->source = (yyvsp[-8].node);
					n->aggrs = (yyvsp[-5].list);
					n->pivots = (yyvsp[-3].list);
					n->groups = (yyvsp[-2].list);
					n->alias = (yyvsp[0].alias);
					n->location = (yylsp[-7]);
					(yyval.node) = (PGNode *) n;
				}
#line 28208 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 902: /* table_ref: table_ref UNPIVOT opt_include_nulls '(' unpivot_header FOR unpivot_value_list ')' opt_alias_clause  */
#line 1097 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGPivotExpr *n = makeNode(PGPivotExpr);
					n->source = (yyvsp[-8].node);
					n->include_nulls = (yyvsp[-6].boolean);
					n->unpivots = (yyvsp[-4].list);
					n->pivots = (yyvsp[-2].list);
					n->alias = (yyvsp[0].alias);
					n->location = (yylsp[-7]);
					(yyval.node) = (PGNode *) n;
				}
#line 28223 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 903: /* opt_pivot_group_by: GROUP_P BY name_list_opt_comma  */
#line 1110 "third_party/libpg_query/grammar/statements/select.y"
                                                { (yyval.list) = (yyvsp[0].list); }
#line 28229 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 904: /* opt_pivot_group_by: %empty  */
#line 1111 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = NULL; }
#line 28235 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 905: /* opt_include_nulls: INCLUDE_P NULLS_P  */
#line 1114 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.boolean) = true; }
#line 28241 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 906: /* opt_include_nulls: EXCLUDE NULLS_P  */
#line 1115 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.boolean) = false; }
#line 28247 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 907: /* opt_include_nulls: %empty  */
#line 1116 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.boolean) = false; }
#line 28253 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 908: /* single_pivot_value: b_expr IN_P '(' target_list_opt_comma ')'  */
#line 1120 "third_party/libpg_query/grammar/statements/select.y"
                {
			PGPivot *n = makeNode(PGPivot);
			n->pivot_columns = list_make1((yyvsp[-4].node));
			n->pivot_value = (yyvsp[-1].list);
			(yyval.node) = (PGNode *) n;
		}
#line 28264 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 909: /* single_pivot_value: b_expr IN_P ColIdOrString  */
#line 1128 "third_party/libpg_query/grammar/statements/select.y"
                {
			PGPivot *n = makeNode(PGPivot);
			n->pivot_columns = list_make1((yyvsp[-2].node));
			n->pivot_enum = (yyvsp[0].str);
			(yyval.node) = (PGNode *) n;
		}
#line 28275 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 911: /* pivot_header: d_expr  */
#line 1137 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 28281 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 912: /* pivot_header: indirection_expr  */
#line 1138 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 28287 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 913: /* pivot_header: '(' c_expr_list_opt_comma ')'  */
#line 1139 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 28293 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 914: /* pivot_value: pivot_header IN_P '(' target_list_opt_comma ')'  */
#line 1143 "third_party/libpg_query/grammar/statements/select.y"
                {
			PGPivot *n = makeNode(PGPivot);
			n->pivot_columns = (yyvsp[-4].list);
			n->pivot_value = (yyvsp[-1].list);
			(yyval.node) = (PGNode *) n;
		}
#line 28304 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 915: /* pivot_value: pivot_header IN_P ColIdOrString  */
#line 1151 "third_party/libpg_query/grammar/statements/select.y"
                {
			PGPivot *n = makeNode(PGPivot);
			n->pivot_columns = (yyvsp[-2].list);
			n->pivot_enum = (yyvsp[0].str);
			(yyval.node) = (PGNode *) n;
		}
#line 28315 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 916: /* pivot_value_list: pivot_value  */
#line 1160 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 28323 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 917: /* pivot_value_list: pivot_value_list pivot_value  */
#line 1164 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node));
				}
#line 28331 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 918: /* unpivot_header: ColIdOrString  */
#line 1170 "third_party/libpg_query/grammar/statements/select.y"
                                                          { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 28337 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 919: /* unpivot_header: '(' name_list_opt_comma ')'  */
#line 1171 "third_party/libpg_query/grammar/statements/select.y"
                                              { (yyval.list) = (yyvsp[-1].list); }
#line 28343 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 920: /* unpivot_value: unpivot_header IN_P '(' target_list_opt_comma ')'  */
#line 1176 "third_party/libpg_query/grammar/statements/select.y"
                {
			PGPivot *n = makeNode(PGPivot);
			n->unpivot_columns = (yyvsp[-4].list);
			n->pivot_value = (yyvsp[-1].list);
			(yyval.node) = (PGNode *) n;
		}
#line 28354 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 921: /* unpivot_value_list: unpivot_value  */
#line 1185 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 28362 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 922: /* unpivot_value_list: unpivot_value_list unpivot_value  */
#line 1189 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node));
				}
#line 28370 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 923: /* joined_table: '(' joined_table ')'  */
#line 1214 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.jexpr) = (yyvsp[-1].jexpr);
				}
#line 28378 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 924: /* joined_table: table_ref CROSS JOIN table_ref  */
#line 1218 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* CROSS JOIN is same as unqualified inner join */
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = PG_JOIN_INNER;
					n->joinreftype = PG_JOIN_REGULAR;
					n->larg = (yyvsp[-3].node);
					n->rarg = (yyvsp[0].node);
					n->usingClause = NIL;
					n->quals = NULL;
					n->location = (yylsp[-2]);
					(yyval.jexpr) = n;
				}
#line 28395 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 925: /* joined_table: table_ref join_type JOIN table_ref join_qual  */
#line 1231 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = (yyvsp[-3].jtype);
					n->joinreftype = PG_JOIN_REGULAR;
					n->larg = (yyvsp[-4].node);
					n->rarg = (yyvsp[-1].node);
					if ((yyvsp[0].node) != NULL && IsA((yyvsp[0].node), PGList))
						n->usingClause = (PGList *) (yyvsp[0].node); /* USING clause */
					else
						n->quals = (yyvsp[0].node); /* ON clause */
					n->location = (yylsp[-3]);
					(yyval.jexpr) = n;
				}
#line 28413 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 926: /* joined_table: table_ref JOIN table_ref join_qual  */
#line 1245 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* letting join_type reduce to empty doesn't work */
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = PG_JOIN_INNER;
					n->joinreftype = PG_JOIN_REGULAR;
					n->larg = (yyvsp[-3].node);
					n->rarg = (yyvsp[-1].node);
					if ((yyvsp[0].node) != NULL && IsA((yyvsp[0].node), PGList))
						n->usingClause = (PGList *) (yyvsp[0].node); /* USING clause */
					else
						n->quals = (yyvsp[0].node); /* ON clause */
					n->location = (yylsp[-2]);
					(yyval.jexpr) = n;
				}
#line 28432 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 927: /* joined_table: table_ref NATURAL join_type JOIN table_ref  */
#line 1260 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = (yyvsp[-2].jtype);
					n->joinreftype = PG_JOIN_NATURAL;
					n->larg = (yyvsp[-4].node);
					n->rarg = (yyvsp[0].node);
					n->usingClause = NIL; /* figure out which columns later... */
					n->quals = NULL; /* fill later */
					n->location = (yylsp[-3]);
					(yyval.jexpr) = n;
				}
#line 28448 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 928: /* joined_table: table_ref NATURAL JOIN table_ref  */
#line 1272 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* letting join_type reduce to empty doesn't work */
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = PG_JOIN_INNER;
					n->joinreftype = PG_JOIN_NATURAL;
					n->larg = (yyvsp[-3].node);
					n->rarg = (yyvsp[0].node);
					n->usingClause = NIL; /* figure out which columns later... */
					n->quals = NULL; /* fill later */
					n->location = (yylsp[-2]);
					(yyval.jexpr) = n;
				}
#line 28465 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 929: /* joined_table: table_ref ASOF join_type JOIN table_ref join_qual  */
#line 1285 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = (yyvsp[-3].jtype);
					n->joinreftype = PG_JOIN_ASOF;
					n->larg = (yyvsp[-5].node);
					n->rarg = (yyvsp[-1].node);
					if ((yyvsp[0].node) != NULL && IsA((yyvsp[0].node), PGList))
						n->usingClause = (PGList *) (yyvsp[0].node); /* USING clause */
					else
						n->quals = (yyvsp[0].node); /* ON clause */
					n->location = (yylsp[-4]);
					(yyval.jexpr) = n;
				}
#line 28483 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 930: /* joined_table: table_ref ASOF JOIN table_ref join_qual  */
#line 1299 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = PG_JOIN_INNER;
					n->joinreftype = PG_JOIN_ASOF;
					n->larg = (yyvsp[-4].node);
					n->rarg = (yyvsp[-1].node);
					if ((yyvsp[0].node) != NULL && IsA((yyvsp[0].node), PGList))
						n->usingClause = (PGList *) (yyvsp[0].node); /* USING clause */
					else
						n->quals = (yyvsp[0].node); /* ON clause */
					n->location = (yylsp[-3]);
					(yyval.jexpr) = n;
				}
#line 28501 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 931: /* joined_table: table_ref POSITIONAL JOIN table_ref  */
#line 1313 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* POSITIONAL JOIN is a coordinated scan */
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = PG_JOIN_POSITION;
					n->joinreftype = PG_JOIN_REGULAR;
					n->larg = (yyvsp[-3].node);
					n->rarg = (yyvsp[0].node);
					n->usingClause = NIL;
					n->quals = NULL;
					n->location = (yylsp[-2]);
					(yyval.jexpr) = n;
				}
#line 28518 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 932: /* joined_table: table_ref ANTI JOIN table_ref join_qual  */
#line 1326 "third_party/libpg_query/grammar/statements/select.y"
                {
                    /* ANTI JOIN is a filter */
                    PGJoinExpr *n = makeNode(PGJoinExpr);
                    n->jointype = PG_JOIN_ANTI;
                    n->joinreftype = PG_JOIN_REGULAR;
                    n->larg = (yyvsp[-4].node);
                    n->rarg = (yyvsp[-1].node);
                    if ((yyvsp[0].node) != NULL && IsA((yyvsp[0].node), PGList))
                        n->usingClause = (PGList *) (yyvsp[0].node); /* USING clause */
                    else
                        n->quals = (yyvsp[0].node); /* ON clause */
                    n->location = (yylsp[-3]);
                    (yyval.jexpr) = n;
                }
#line 28537 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 933: /* joined_table: table_ref SEMI JOIN table_ref join_qual  */
#line 1341 "third_party/libpg_query/grammar/statements/select.y"
               {
                   /* SEMI JOIN is also a filter */
                   PGJoinExpr *n = makeNode(PGJoinExpr);
                   n->jointype = PG_JOIN_SEMI;
                   n->joinreftype = PG_JOIN_REGULAR;
                   n->larg = (yyvsp[-4].node);
                   n->rarg = (yyvsp[-1].node);
                   if ((yyvsp[0].node) != NULL && IsA((yyvsp[0].node), PGList))
                       n->usingClause = (PGList *) (yyvsp[0].node); /* USING clause */
                   else
                       n->quals = (yyvsp[0].node); /* ON clause */
                   n->location = (yylsp[-3]);
                   n->location = (yylsp[-3]);
                   (yyval.jexpr) = n;
               }
#line 28557 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 934: /* alias_clause: AS ColIdOrString '(' name_list_opt_comma ')'  */
#line 1360 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.alias) = makeNode(PGAlias);
					(yyval.alias)->aliasname = (yyvsp[-3].str);
					(yyval.alias)->colnames = (yyvsp[-1].list);
				}
#line 28567 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 935: /* alias_clause: AS ColIdOrString  */
#line 1366 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.alias) = makeNode(PGAlias);
					(yyval.alias)->aliasname = (yyvsp[0].str);
				}
#line 28576 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 936: /* alias_clause: ColId '(' name_list_opt_comma ')'  */
#line 1371 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.alias) = makeNode(PGAlias);
					(yyval.alias)->aliasname = (yyvsp[-3].str);
					(yyval.alias)->colnames = (yyvsp[-1].list);
				}
#line 28586 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 937: /* alias_clause: ColId  */
#line 1377 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.alias) = makeNode(PGAlias);
					(yyval.alias)->aliasname = (yyvsp[0].str);
				}
#line 28595 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 938: /* opt_alias_clause: alias_clause  */
#line 1383 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.alias) = (yyvsp[0].alias); }
#line 28601 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 939: /* opt_alias_clause: %empty  */
#line 1384 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.alias) = NULL; }
#line 28607 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 940: /* func_alias_clause: alias_clause  */
#line 1393 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make2((yyvsp[0].alias), NIL);
				}
#line 28615 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 941: /* func_alias_clause: AS '(' TableFuncElementList ')'  */
#line 1397 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make2(NULL, (yyvsp[-1].list));
				}
#line 28623 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 942: /* func_alias_clause: AS ColIdOrString '(' TableFuncElementList ')'  */
#line 1401 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAlias *a = makeNode(PGAlias);
					a->aliasname = (yyvsp[-3].str);
					(yyval.list) = list_make2(a, (yyvsp[-1].list));
				}
#line 28633 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 943: /* func_alias_clause: ColId '(' TableFuncElementList ')'  */
#line 1407 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAlias *a = makeNode(PGAlias);
					a->aliasname = (yyvsp[-3].str);
					(yyval.list) = list_make2(a, (yyvsp[-1].list));
				}
#line 28643 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 944: /* func_alias_clause: %empty  */
#line 1413 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make2(NULL, NIL);
				}
#line 28651 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 945: /* join_type: FULL join_outer  */
#line 1418 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.jtype) = PG_JOIN_FULL; }
#line 28657 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 946: /* join_type: LEFT join_outer  */
#line 1419 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.jtype) = PG_JOIN_LEFT; }
#line 28663 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 947: /* join_type: RIGHT join_outer  */
#line 1420 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.jtype) = PG_JOIN_RIGHT; }
#line 28669 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 948: /* join_type: SEMI  */
#line 1421 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.jtype) = PG_JOIN_SEMI; }
#line 28675 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 949: /* join_type: ANTI  */
#line 1422 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.jtype) = PG_JOIN_ANTI; }
#line 28681 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 950: /* join_type: INNER_P  */
#line 1423 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.jtype) = PG_JOIN_INNER; }
#line 28687 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 951: /* join_outer: OUTER_P  */
#line 1427 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = NULL; }
#line 28693 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 952: /* join_outer: %empty  */
#line 1428 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 28699 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 953: /* join_qual: USING '(' name_list_opt_comma ')'  */
#line 1440 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (PGNode *) (yyvsp[-1].list); }
#line 28705 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 954: /* join_qual: ON a_expr  */
#line 1441 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 28711 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 955: /* relation_expr: qualified_name  */
#line 1447 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* inheritance query, implicitly */
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->inh = true;
					(yyval.range)->alias = NULL;
				}
#line 28722 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 956: /* relation_expr: qualified_name '*'  */
#line 1454 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* inheritance query, explicitly */
					(yyval.range) = (yyvsp[-1].range);
					(yyval.range)->inh = true;
					(yyval.range)->alias = NULL;
				}
#line 28733 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 957: /* relation_expr: ONLY qualified_name  */
#line 1461 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* no inheritance */
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->inh = false;
					(yyval.range)->alias = NULL;
				}
#line 28744 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 958: /* relation_expr: ONLY '(' qualified_name ')'  */
#line 1468 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* no inheritance, SQL99-style syntax */
					(yyval.range) = (yyvsp[-1].range);
					(yyval.range)->inh = false;
					(yyval.range)->alias = NULL;
				}
#line 28755 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 959: /* func_table: func_expr_windowless opt_ordinality  */
#line 1500 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeFunction *n = makeNode(PGRangeFunction);
					n->lateral = false;
					n->ordinality = (yyvsp[0].boolean);
					n->is_rowsfrom = false;
					n->functions = list_make1(list_make2((yyvsp[-1].node), NIL));
					n->sample = NULL;
					/* alias and coldeflist are set by table_ref production */
					(yyval.node) = (PGNode *) n;
				}
#line 28770 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 960: /* func_table: ROWS FROM '(' rowsfrom_list ')' opt_ordinality  */
#line 1511 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeFunction *n = makeNode(PGRangeFunction);
					n->lateral = false;
					n->ordinality = (yyvsp[0].boolean);
					n->is_rowsfrom = true;
					n->functions = (yyvsp[-2].list);
					n->sample = NULL;
					/* alias and coldeflist are set by table_ref production */
					(yyval.node) = (PGNode *) n;
				}
#line 28785 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 961: /* rowsfrom_item: func_expr_windowless opt_col_def_list  */
#line 1524 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make2((yyvsp[-1].node), (yyvsp[0].list)); }
#line 28791 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 962: /* rowsfrom_list: rowsfrom_item  */
#line 1528 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = list_make1((yyvsp[0].list)); }
#line 28797 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 963: /* rowsfrom_list: rowsfrom_list ',' rowsfrom_item  */
#line 1529 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].list)); }
#line 28803 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 964: /* opt_col_def_list: AS '(' TableFuncElementList ')'  */
#line 1532 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 28809 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 965: /* opt_col_def_list: %empty  */
#line 1533 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 28815 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 966: /* opt_ordinality: WITH_LA ORDINALITY  */
#line 1536 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.boolean) = true; }
#line 28821 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 967: /* opt_ordinality: %empty  */
#line 1537 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 28827 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 968: /* where_clause: WHERE a_expr  */
#line 1542 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 28833 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 969: /* where_clause: %empty  */
#line 1543 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 28839 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 970: /* TableFuncElementList: TableFuncElement  */
#line 1549 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 28847 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 971: /* TableFuncElementList: TableFuncElementList ',' TableFuncElement  */
#line 1553 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 28855 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 972: /* TableFuncElement: ColIdOrString Typename opt_collate_clause  */
#line 1559 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGColumnDef *n = makeNode(PGColumnDef);
					n->colname = (yyvsp[-2].str);
					n->typeName = (yyvsp[-1].typnam);
					n->inhcount = 0;
					n->is_local = true;
					n->is_not_null = false;
					n->is_from_type = false;
					n->storage = 0;
					n->raw_default = NULL;
					n->cooked_default = NULL;
					n->collClause = (PGCollateClause *) (yyvsp[0].node);
					n->collOid = InvalidOid;
					n->constraints = NIL;
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)n;
				}
#line 28877 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 973: /* opt_collate_clause: COLLATE any_name  */
#line 1580 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGCollateClause *n = makeNode(PGCollateClause);
					n->arg = NULL;
					n->collname = (yyvsp[0].list);
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *) n;
				}
#line 28889 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 974: /* opt_collate_clause: %empty  */
#line 1587 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.node) = NULL; }
#line 28895 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 975: /* colid_type_list: ColId Typename  */
#line 1600 "third_party/libpg_query/grammar/statements/select.y"
                             {
             (yyval.list) = list_make1(list_make2(makeString((yyvsp[-1].str)), (yyvsp[0].typnam)));
            }
#line 28903 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 976: /* colid_type_list: colid_type_list ',' ColId Typename  */
#line 1603 "third_party/libpg_query/grammar/statements/select.y"
                                                 {
             (yyval.list) = lappend((yyvsp[-3].list), list_make2(makeString((yyvsp[-1].str)), (yyvsp[0].typnam)));
            }
#line 28911 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 979: /* opt_Typename: Typename  */
#line 1610 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 28917 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 980: /* opt_Typename: %empty  */
#line 1611 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.typnam) = NULL; }
#line 28923 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 981: /* Typename: SimpleTypename opt_array_bounds  */
#line 1614 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-1].typnam);
					(yyval.typnam)->arrayBounds = (yyvsp[0].list);
				}
#line 28932 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 982: /* Typename: SETOF SimpleTypename opt_array_bounds  */
#line 1619 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-1].typnam);
					(yyval.typnam)->arrayBounds = (yyvsp[0].list);
					(yyval.typnam)->setof = true;
				}
#line 28942 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 983: /* Typename: SimpleTypename ARRAY '[' Iconst ']'  */
#line 1626 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-4].typnam);
					(yyval.typnam)->arrayBounds = list_make1(makeInteger((yyvsp[-1].ival)));
				}
#line 28951 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 984: /* Typename: SETOF SimpleTypename ARRAY '[' Iconst ']'  */
#line 1631 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-4].typnam);
					(yyval.typnam)->arrayBounds = list_make1(makeInteger((yyvsp[-1].ival)));
					(yyval.typnam)->setof = true;
				}
#line 28961 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 985: /* Typename: SimpleTypename ARRAY  */
#line 1637 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-1].typnam);
					(yyval.typnam)->arrayBounds = list_make1(makeInteger(-1));
				}
#line 28970 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 986: /* Typename: SETOF SimpleTypename ARRAY  */
#line 1642 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-1].typnam);
					(yyval.typnam)->arrayBounds = list_make1(makeInteger(-1));
					(yyval.typnam)->setof = true;
				}
#line 28980 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 987: /* Typename: qualified_typename  */
#line 1648 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = makeTypeNameFromNameList((yyvsp[0].list));
				}
#line 28988 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 988: /* Typename: RowOrStruct '(' colid_type_list ')' opt_array_bounds  */
#line 1652 "third_party/libpg_query/grammar/statements/select.y"
                                {
				   (yyval.typnam) = SystemTypeName("struct");
				   (yyval.typnam)->arrayBounds = (yyvsp[0].list);
				   (yyval.typnam)->typmods = (yyvsp[-2].list);
				   (yyval.typnam)->location = (yylsp[-4]);
               }
#line 28999 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 989: /* Typename: MAP '(' type_list ')' opt_array_bounds  */
#line 1659 "third_party/libpg_query/grammar/statements/select.y"
                {
				   (yyval.typnam) = SystemTypeName("map");
				   (yyval.typnam)->arrayBounds = (yyvsp[0].list);
				   (yyval.typnam)->typmods = (yyvsp[-2].list);
				   (yyval.typnam)->location = (yylsp[-4]);
				}
#line 29010 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 990: /* Typename: UNION '(' colid_type_list ')' opt_array_bounds  */
#line 1666 "third_party/libpg_query/grammar/statements/select.y"
                                {
				   (yyval.typnam) = SystemTypeName("union");
				   (yyval.typnam)->arrayBounds = (yyvsp[0].list);
				   (yyval.typnam)->typmods = (yyvsp[-2].list);
				   (yyval.typnam)->location = (yylsp[-4]);
				}
#line 29021 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 991: /* qualified_typename: IDENT '.' IDENT  */
#line 1675 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = list_make2(makeString((yyvsp[-2].str)), makeString((yyvsp[0].str))); }
#line 29027 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 992: /* qualified_typename: qualified_typename '.' IDENT  */
#line 1676 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.list) = lappend((yyvsp[-2].list), makeString((yyvsp[0].str))); }
#line 29033 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 993: /* opt_array_bounds: opt_array_bounds '[' ']'  */
#line 1681 "third_party/libpg_query/grammar/statements/select.y"
                                        {  (yyval.list) = lappend((yyvsp[-2].list), makeInteger(-1)); }
#line 29039 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 994: /* opt_array_bounds: opt_array_bounds '[' Iconst ']'  */
#line 1683 "third_party/libpg_query/grammar/statements/select.y"
                                        {  (yyval.list) = lappend((yyvsp[-3].list), makeInteger((yyvsp[-1].ival))); }
#line 29045 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 995: /* opt_array_bounds: %empty  */
#line 1685 "third_party/libpg_query/grammar/statements/select.y"
                                        {  (yyval.list) = NIL; }
#line 29051 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 996: /* SimpleTypename: GenericType  */
#line 1689 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 29057 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 997: /* SimpleTypename: Numeric  */
#line 1690 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 29063 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 998: /* SimpleTypename: Bit  */
#line 1691 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 29069 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 999: /* SimpleTypename: Character  */
#line 1692 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 29075 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1000: /* SimpleTypename: ConstDatetime  */
#line 1693 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.typnam) = (yyvsp[0].typnam); }
#line 29081 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1001: /* SimpleTypename: ConstInterval opt_interval  */
#line 1695 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-1].typnam);
					(yyval.typnam)->typmods = (yyvsp[0].list);
				}
#line 29090 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1002: /* SimpleTypename: ConstInterval '(' Iconst ')'  */
#line 1700 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-3].typnam);
					(yyval.typnam)->typmods = list_make2(makeIntConst(INTERVAL_FULL_RANGE, -1),
											 makeIntConst((yyvsp[-1].ival), (yylsp[-1])));
				}
#line 29100 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1003: /* ConstTypename: Numeric  */
#line 1719 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 29106 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1004: /* ConstTypename: ConstBit  */
#line 1720 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 29112 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1005: /* ConstTypename: ConstCharacter  */
#line 1721 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.typnam) = (yyvsp[0].typnam); }
#line 29118 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1006: /* ConstTypename: ConstDatetime  */
#line 1722 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.typnam) = (yyvsp[0].typnam); }
#line 29124 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1007: /* GenericType: type_name_token opt_type_modifiers  */
#line 1734 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = makeTypeName((yyvsp[-1].str));
					(yyval.typnam)->typmods = (yyvsp[0].list);
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 29134 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1008: /* opt_type_modifiers: '(' opt_expr_list_opt_comma ')'  */
#line 1747 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 29140 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1009: /* opt_type_modifiers: %empty  */
#line 1748 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = NIL; }
#line 29146 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1010: /* Numeric: INT_P  */
#line 1755 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("int4");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 29155 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1011: /* Numeric: INTEGER  */
#line 1760 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("int4");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 29164 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1012: /* Numeric: SMALLINT  */
#line 1765 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("int2");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 29173 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1013: /* Numeric: BIGINT  */
#line 1770 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("int8");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 29182 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1014: /* Numeric: REAL  */
#line 1775 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("float4");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 29191 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1015: /* Numeric: FLOAT_P opt_float  */
#line 1780 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 29200 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1016: /* Numeric: DOUBLE_P PRECISION  */
#line 1785 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("float8");
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 29209 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1017: /* Numeric: DECIMAL_P opt_type_modifiers  */
#line 1790 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("numeric");
					(yyval.typnam)->typmods = (yyvsp[0].list);
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 29219 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1018: /* Numeric: DEC opt_type_modifiers  */
#line 1796 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("numeric");
					(yyval.typnam)->typmods = (yyvsp[0].list);
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 29229 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1019: /* Numeric: NUMERIC opt_type_modifiers  */
#line 1802 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("numeric");
					(yyval.typnam)->typmods = (yyvsp[0].list);
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 29239 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1020: /* Numeric: BOOLEAN_P  */
#line 1808 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("bool");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 29248 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1021: /* opt_float: '(' Iconst ')'  */
#line 1815 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/*
					 * Check FLOAT() precision limits assuming IEEE floating
					 * types - thomas 1997-09-18
					 */
					if ((yyvsp[-1].ival) < 1)
						ereport(ERROR,
								(errcode(PG_ERRCODE_INVALID_PARAMETER_VALUE),
								 errmsg("precision for type float must be at least 1 bit"),
								 parser_errposition((yylsp[-1]))));
					else if ((yyvsp[-1].ival) <= 24)
						(yyval.typnam) = SystemTypeName("float4");
					else if ((yyvsp[-1].ival) <= 53)
						(yyval.typnam) = SystemTypeName("float8");
					else
						ereport(ERROR,
								(errcode(PG_ERRCODE_INVALID_PARAMETER_VALUE),
								 errmsg("precision for type float must be less than 54 bits"),
								 parser_errposition((yylsp[-1]))));
				}
#line 29273 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1022: /* opt_float: %empty  */
#line 1836 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("float4");
				}
#line 29281 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1023: /* Bit: BitWithLength  */
#line 1846 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 29289 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1024: /* Bit: BitWithoutLength  */
#line 1850 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 29297 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1025: /* ConstBit: BitWithLength  */
#line 1858 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 29305 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1026: /* ConstBit: BitWithoutLength  */
#line 1862 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
					(yyval.typnam)->typmods = NIL;
				}
#line 29314 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1027: /* BitWithLength: BIT opt_varying '(' expr_list_opt_comma ')'  */
#line 1870 "third_party/libpg_query/grammar/statements/select.y"
                                {
					const char *typname;

					typname = (yyvsp[-3].boolean) ? "varbit" : "bit";
					(yyval.typnam) = SystemTypeName(typname);
					(yyval.typnam)->typmods = (yyvsp[-1].list);
					(yyval.typnam)->location = (yylsp[-4]);
				}
#line 29327 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1028: /* BitWithoutLength: BIT opt_varying  */
#line 1882 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* bit defaults to bit(1), varbit to no limit */
					if ((yyvsp[0].boolean))
					{
						(yyval.typnam) = SystemTypeName("varbit");
					}
					else
					{
						(yyval.typnam) = SystemTypeName("bit");
						(yyval.typnam)->typmods = list_make1(makeIntConst(1, -1));
					}
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 29345 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1029: /* Character: CharacterWithLength  */
#line 1903 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 29353 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1030: /* Character: CharacterWithoutLength  */
#line 1907 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 29361 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1031: /* ConstCharacter: CharacterWithLength  */
#line 1913 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 29369 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1032: /* ConstCharacter: CharacterWithoutLength  */
#line 1917 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* Length was not specified so allow to be unrestricted.
					 * This handles problems with fixed-length (bpchar) strings
					 * which in column definitions must default to a length
					 * of one, but should not be constrained if the length
					 * was not specified.
					 */
					(yyval.typnam) = (yyvsp[0].typnam);
					(yyval.typnam)->typmods = NIL;
				}
#line 29384 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1033: /* CharacterWithLength: character '(' Iconst ')'  */
#line 1930 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName((yyvsp[-3].conststr));
					(yyval.typnam)->typmods = list_make1(makeIntConst((yyvsp[-1].ival), (yylsp[-1])));
					(yyval.typnam)->location = (yylsp[-3]);
				}
#line 29394 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1034: /* CharacterWithoutLength: character  */
#line 1938 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName((yyvsp[0].conststr));
					/* char defaults to char(1), varchar to no limit */
					if (strcmp((yyvsp[0].conststr), "bpchar") == 0)
						(yyval.typnam)->typmods = list_make1(makeIntConst(1, -1));
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 29406 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1035: /* character: CHARACTER opt_varying  */
#line 1948 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = (yyvsp[0].boolean) ? "varchar": "bpchar"; }
#line 29412 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1036: /* character: CHAR_P opt_varying  */
#line 1950 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = (yyvsp[0].boolean) ? "varchar": "bpchar"; }
#line 29418 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1037: /* character: VARCHAR  */
#line 1952 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = "varchar"; }
#line 29424 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1038: /* character: NATIONAL CHARACTER opt_varying  */
#line 1954 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = (yyvsp[0].boolean) ? "varchar": "bpchar"; }
#line 29430 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1039: /* character: NATIONAL CHAR_P opt_varying  */
#line 1956 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = (yyvsp[0].boolean) ? "varchar": "bpchar"; }
#line 29436 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1040: /* character: NCHAR opt_varying  */
#line 1958 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = (yyvsp[0].boolean) ? "varchar": "bpchar"; }
#line 29442 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1041: /* opt_varying: VARYING  */
#line 1962 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = true; }
#line 29448 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1042: /* opt_varying: %empty  */
#line 1963 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 29454 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1043: /* ConstDatetime: TIMESTAMP '(' Iconst ')' opt_timezone  */
#line 1971 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].boolean))
						(yyval.typnam) = SystemTypeName("timestamptz");
					else
						(yyval.typnam) = SystemTypeName("timestamp");
					(yyval.typnam)->typmods = list_make1(makeIntConst((yyvsp[-2].ival), (yylsp[-2])));
					(yyval.typnam)->location = (yylsp[-4]);
				}
#line 29467 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1044: /* ConstDatetime: TIMESTAMP opt_timezone  */
#line 1980 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].boolean))
						(yyval.typnam) = SystemTypeName("timestamptz");
					else
						(yyval.typnam) = SystemTypeName("timestamp");
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 29479 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1045: /* ConstDatetime: TIME '(' Iconst ')' opt_timezone  */
#line 1988 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].boolean))
						(yyval.typnam) = SystemTypeName("timetz");
					else
						(yyval.typnam) = SystemTypeName("time");
					(yyval.typnam)->typmods = list_make1(makeIntConst((yyvsp[-2].ival), (yylsp[-2])));
					(yyval.typnam)->location = (yylsp[-4]);
				}
#line 29492 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1046: /* ConstDatetime: TIME opt_timezone  */
#line 1997 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].boolean))
						(yyval.typnam) = SystemTypeName("timetz");
					else
						(yyval.typnam) = SystemTypeName("time");
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 29504 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1047: /* ConstInterval: INTERVAL  */
#line 2008 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("interval");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 29513 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1048: /* opt_timezone: WITH_LA TIME ZONE  */
#line 2015 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.boolean) = true; }
#line 29519 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1049: /* opt_timezone: WITHOUT TIME ZONE  */
#line 2016 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.boolean) = false; }
#line 29525 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1050: /* opt_timezone: %empty  */
#line 2017 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 29531 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1075: /* opt_interval: year_keyword  */
#line 2058 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(YEAR), (yylsp[0]))); }
#line 29537 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1076: /* opt_interval: month_keyword  */
#line 2060 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MONTH), (yylsp[0]))); }
#line 29543 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1077: /* opt_interval: day_keyword  */
#line 2062 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(DAY), (yylsp[0]))); }
#line 29549 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1078: /* opt_interval: hour_keyword  */
#line 2064 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(HOUR), (yylsp[0]))); }
#line 29555 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1079: /* opt_interval: minute_keyword  */
#line 2066 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MINUTE), (yylsp[0]))); }
#line 29561 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1080: /* opt_interval: second_keyword  */
#line 2068 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(SECOND), (yylsp[0]))); }
#line 29567 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1081: /* opt_interval: millisecond_keyword  */
#line 2070 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MILLISECOND), (yylsp[0]))); }
#line 29573 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1082: /* opt_interval: microsecond_keyword  */
#line 2072 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MICROSECOND), (yylsp[0]))); }
#line 29579 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1083: /* opt_interval: week_keyword  */
#line 2074 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(WEEK), (yylsp[0]))); }
#line 29585 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1084: /* opt_interval: decade_keyword  */
#line 2076 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(DECADE), (yylsp[0]))); }
#line 29591 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1085: /* opt_interval: century_keyword  */
#line 2078 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(CENTURY), (yylsp[0]))); }
#line 29597 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1086: /* opt_interval: millennium_keyword  */
#line 2080 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MILLENNIUM), (yylsp[0]))); }
#line 29603 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1087: /* opt_interval: year_keyword TO month_keyword  */
#line 2082 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(YEAR) |
												 INTERVAL_MASK(MONTH), (yylsp[-2])));
				}
#line 29612 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1088: /* opt_interval: day_keyword TO hour_keyword  */
#line 2087 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(DAY) |
												 INTERVAL_MASK(HOUR), (yylsp[-2])));
				}
#line 29621 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1089: /* opt_interval: day_keyword TO minute_keyword  */
#line 2092 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(DAY) |
												 INTERVAL_MASK(HOUR) |
												 INTERVAL_MASK(MINUTE), (yylsp[-2])));
				}
#line 29631 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1090: /* opt_interval: day_keyword TO second_keyword  */
#line 2098 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(DAY) |
												 INTERVAL_MASK(HOUR) |
												 INTERVAL_MASK(MINUTE) |
												 INTERVAL_MASK(SECOND), (yylsp[-2])));
				}
#line 29642 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1091: /* opt_interval: hour_keyword TO minute_keyword  */
#line 2105 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(HOUR) |
												 INTERVAL_MASK(MINUTE), (yylsp[-2])));
				}
#line 29651 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1092: /* opt_interval: hour_keyword TO second_keyword  */
#line 2110 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(HOUR) |
												 INTERVAL_MASK(MINUTE) |
												 INTERVAL_MASK(SECOND), (yylsp[-2])));
				}
#line 29661 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1093: /* opt_interval: minute_keyword TO second_keyword  */
#line 2116 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MINUTE) |
												 INTERVAL_MASK(SECOND), (yylsp[-2])));
				}
#line 29670 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1094: /* opt_interval: %empty  */
#line 2121 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = NIL; }
#line 29676 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1095: /* a_expr: c_expr  */
#line 2152 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 29682 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1096: /* a_expr: a_expr TYPECAST Typename  */
#line 2155 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.node) = makeTypeCast((yyvsp[-2].node), (yyvsp[0].typnam), 0, (yylsp[-1])); }
#line 29688 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1097: /* a_expr: a_expr COLLATE any_name  */
#line 2157 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGCollateClause *n = makeNode(PGCollateClause);
					n->arg = (yyvsp[-2].node);
					n->collname = (yyvsp[0].list);
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *) n;
				}
#line 29700 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1098: /* a_expr: a_expr AT TIME ZONE a_expr  */
#line 2165 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("timezone"),
											   list_make2((yyvsp[0].node), (yyvsp[-4].node)),
											   (yylsp[-3]));
				}
#line 29710 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1099: /* a_expr: '+' a_expr  */
#line 2180 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", NULL, (yyvsp[0].node), (yylsp[-1])); }
#line 29716 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1100: /* a_expr: '-' a_expr  */
#line 2182 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = doNegate((yyvsp[0].node), (yylsp[-1])); }
#line 29722 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1101: /* a_expr: a_expr '+' a_expr  */
#line 2184 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 29728 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1102: /* a_expr: a_expr '-' a_expr  */
#line 2186 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "-", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 29734 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1103: /* a_expr: a_expr '*' a_expr  */
#line 2188 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "*", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 29740 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1104: /* a_expr: a_expr '/' a_expr  */
#line 2190 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "/", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 29746 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1105: /* a_expr: a_expr INTEGER_DIVISION a_expr  */
#line 2192 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "//", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 29752 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1106: /* a_expr: a_expr '%' a_expr  */
#line 2194 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "%", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 29758 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1107: /* a_expr: a_expr '^' a_expr  */
#line 2196 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "^", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 29764 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1108: /* a_expr: a_expr POWER_OF a_expr  */
#line 2198 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "**", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 29770 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1109: /* a_expr: a_expr '<' a_expr  */
#line 2200 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 29776 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1110: /* a_expr: a_expr '>' a_expr  */
#line 2202 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, ">", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 29782 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1111: /* a_expr: a_expr '=' a_expr  */
#line 2204 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 29788 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1112: /* a_expr: a_expr LESS_EQUALS a_expr  */
#line 2206 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 29794 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1113: /* a_expr: a_expr GREATER_EQUALS a_expr  */
#line 2208 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, ">=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 29800 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1114: /* a_expr: a_expr NOT_EQUALS a_expr  */
#line 2210 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<>", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 29806 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1115: /* a_expr: a_expr qual_Op a_expr  */
#line 2213 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[-1].list), (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 29812 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1116: /* a_expr: qual_Op a_expr  */
#line 2215 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[-1].list), NULL, (yyvsp[0].node), (yylsp[-1])); }
#line 29818 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1117: /* a_expr: a_expr qual_Op  */
#line 2217 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[0].list), (yyvsp[-1].node), NULL, (yylsp[0])); }
#line 29824 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1118: /* a_expr: a_expr AND a_expr  */
#line 2220 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeAndExpr((yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 29830 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1119: /* a_expr: a_expr OR a_expr  */
#line 2222 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeOrExpr((yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 29836 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1120: /* a_expr: NOT a_expr  */
#line 2224 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeNotExpr((yyvsp[0].node), (yylsp[-1])); }
#line 29842 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1121: /* a_expr: NOT_LA a_expr  */
#line 2226 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeNotExpr((yyvsp[0].node), (yylsp[-1])); }
#line 29848 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1122: /* a_expr: a_expr GLOB a_expr  */
#line 2228 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_GLOB, "~~~",
												   (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
				}
#line 29857 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1123: /* a_expr: a_expr LIKE a_expr  */
#line 2233 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_LIKE, "~~",
												   (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
				}
#line 29866 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1124: /* a_expr: a_expr LIKE a_expr ESCAPE a_expr  */
#line 2238 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("like_escape"),
											   list_make3((yyvsp[-4].node), (yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-3]));
					(yyval.node) = (PGNode *) n;
				}
#line 29877 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1125: /* a_expr: a_expr NOT_LA LIKE a_expr  */
#line 2245 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_LIKE, "!~~",
												   (yyvsp[-3].node), (yyvsp[0].node), (yylsp[-2]));
				}
#line 29886 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1126: /* a_expr: a_expr NOT_LA LIKE a_expr ESCAPE a_expr  */
#line 2250 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("not_like_escape"),
											   list_make3((yyvsp[-5].node), (yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-4]));
					(yyval.node) = (PGNode *) n;
				}
#line 29897 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1127: /* a_expr: a_expr ILIKE a_expr  */
#line 2257 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_ILIKE, "~~*",
												   (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
				}
#line 29906 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1128: /* a_expr: a_expr ILIKE a_expr ESCAPE a_expr  */
#line 2262 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("ilike_escape"),
											   list_make3((yyvsp[-4].node), (yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-3]));
					(yyval.node) = (PGNode *) n;
				}
#line 29917 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1129: /* a_expr: a_expr NOT_LA ILIKE a_expr  */
#line 2269 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_ILIKE, "!~~*",
												   (yyvsp[-3].node), (yyvsp[0].node), (yylsp[-2]));
				}
#line 29926 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1130: /* a_expr: a_expr NOT_LA ILIKE a_expr ESCAPE a_expr  */
#line 2274 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("not_ilike_escape"),
											   list_make3((yyvsp[-5].node), (yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-4]));
					(yyval.node) = (PGNode *) n;
				}
#line 29937 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1131: /* a_expr: a_expr SIMILAR TO a_expr  */
#line 2282 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
											   list_make2((yyvsp[0].node), makeNullAConst(-1)),
											   (yylsp[-2]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "~",
												   (yyvsp[-3].node), (PGNode *) n, (yylsp[-2]));
				}
#line 29949 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1132: /* a_expr: a_expr SIMILAR TO a_expr ESCAPE a_expr  */
#line 2290 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
											   list_make2((yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-4]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "~",
												   (yyvsp[-5].node), (PGNode *) n, (yylsp[-4]));
				}
#line 29961 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1133: /* a_expr: a_expr NOT_LA SIMILAR TO a_expr  */
#line 2298 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
											   list_make2((yyvsp[0].node), makeNullAConst(-1)),
											   (yylsp[-3]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "!~",
												   (yyvsp[-4].node), (PGNode *) n, (yylsp[-3]));
				}
#line 29973 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1134: /* a_expr: a_expr NOT_LA SIMILAR TO a_expr ESCAPE a_expr  */
#line 2306 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
											   list_make2((yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-5]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "!~",
												   (yyvsp[-6].node), (PGNode *) n, (yylsp[-5]));
				}
#line 29985 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1135: /* a_expr: a_expr IS NULL_P  */
#line 2324 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-2].node);
					n->nulltesttype = PG_IS_NULL;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 29997 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1136: /* a_expr: a_expr ISNULL  */
#line 2332 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-1].node);
					n->nulltesttype = PG_IS_NULL;
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 30009 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1137: /* a_expr: a_expr IS NOT NULL_P  */
#line 2340 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-3].node);
					n->nulltesttype = IS_NOT_NULL;
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)n;
				}
#line 30021 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1138: /* a_expr: a_expr NOT NULL_P  */
#line 2348 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-2].node);
					n->nulltesttype = IS_NOT_NULL;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 30033 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1139: /* a_expr: a_expr NOTNULL  */
#line 2356 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-1].node);
					n->nulltesttype = IS_NOT_NULL;
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 30045 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1140: /* a_expr: a_expr LAMBDA_ARROW a_expr  */
#line 2364 "third_party/libpg_query/grammar/statements/select.y"
                        {
				PGLambdaFunction *n = makeNode(PGLambdaFunction);
				n->lhs = (yyvsp[-2].node);
				n->rhs = (yyvsp[0].node);
				n->location = (yylsp[-1]);
				(yyval.node) = (PGNode *) n;
			}
#line 30057 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1141: /* a_expr: a_expr DOUBLE_ARROW a_expr  */
#line 2372 "third_party/libpg_query/grammar/statements/select.y"
                        {
							(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "->>", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
			}
#line 30065 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1142: /* a_expr: row OVERLAPS row  */
#line 2376 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if (list_length((yyvsp[-2].list)) != 2)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("wrong number of parameters on left side of OVERLAPS expression"),
								 parser_errposition((yylsp[-2]))));
					if (list_length((yyvsp[0].list)) != 2)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("wrong number of parameters on right side of OVERLAPS expression"),
								 parser_errposition((yylsp[0]))));
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("overlaps"),
											   list_concat((yyvsp[-2].list), (yyvsp[0].list)),
											   (yylsp[-1]));
				}
#line 30085 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1143: /* a_expr: a_expr IS TRUE_P  */
#line 2392 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-2].node);
					b->booltesttype = PG_IS_TRUE;
					b->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)b;
				}
#line 30097 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1144: /* a_expr: a_expr IS NOT TRUE_P  */
#line 2400 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-3].node);
					b->booltesttype = IS_NOT_TRUE;
					b->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)b;
				}
#line 30109 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1145: /* a_expr: a_expr IS FALSE_P  */
#line 2408 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-2].node);
					b->booltesttype = IS_FALSE;
					b->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)b;
				}
#line 30121 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1146: /* a_expr: a_expr IS NOT FALSE_P  */
#line 2416 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-3].node);
					b->booltesttype = IS_NOT_FALSE;
					b->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)b;
				}
#line 30133 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1147: /* a_expr: a_expr IS UNKNOWN  */
#line 2424 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-2].node);
					b->booltesttype = IS_UNKNOWN;
					b->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)b;
				}
#line 30145 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1148: /* a_expr: a_expr IS NOT UNKNOWN  */
#line 2432 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-3].node);
					b->booltesttype = IS_NOT_UNKNOWN;
					b->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)b;
				}
#line 30157 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1149: /* a_expr: a_expr IS DISTINCT FROM a_expr  */
#line 2440 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_DISTINCT, "=", (yyvsp[-4].node), (yyvsp[0].node), (yylsp[-3]));
				}
#line 30165 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1150: /* a_expr: a_expr IS NOT DISTINCT FROM a_expr  */
#line 2444 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_DISTINCT, "=", (yyvsp[-5].node), (yyvsp[0].node), (yylsp[-4]));
				}
#line 30173 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1151: /* a_expr: a_expr IS OF '(' type_list ')'  */
#line 2448 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OF, "=", (yyvsp[-5].node), (PGNode *) (yyvsp[-1].list), (yylsp[-4]));
				}
#line 30181 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1152: /* a_expr: a_expr IS NOT OF '(' type_list ')'  */
#line 2452 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OF, "<>", (yyvsp[-6].node), (PGNode *) (yyvsp[-1].list), (yylsp[-5]));
				}
#line 30189 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1153: /* a_expr: a_expr BETWEEN opt_asymmetric b_expr AND a_expr  */
#line 2456 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_BETWEEN,
												   "BETWEEN",
												   (yyvsp[-5].node),
												   (PGNode *) list_make2((yyvsp[-2].node), (yyvsp[0].node)),
												   (yylsp[-4]));
				}
#line 30201 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1154: /* a_expr: a_expr NOT_LA BETWEEN opt_asymmetric b_expr AND a_expr  */
#line 2464 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_BETWEEN,
												   "NOT BETWEEN",
												   (yyvsp[-6].node),
												   (PGNode *) list_make2((yyvsp[-2].node), (yyvsp[0].node)),
												   (yylsp[-5]));
				}
#line 30213 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1155: /* a_expr: a_expr BETWEEN SYMMETRIC b_expr AND a_expr  */
#line 2472 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_BETWEEN_SYM,
												   "BETWEEN SYMMETRIC",
												   (yyvsp[-5].node),
												   (PGNode *) list_make2((yyvsp[-2].node), (yyvsp[0].node)),
												   (yylsp[-4]));
				}
#line 30225 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1156: /* a_expr: a_expr NOT_LA BETWEEN SYMMETRIC b_expr AND a_expr  */
#line 2480 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_BETWEEN_SYM,
												   "NOT BETWEEN SYMMETRIC",
												   (yyvsp[-6].node),
												   (PGNode *) list_make2((yyvsp[-2].node), (yyvsp[0].node)),
												   (yylsp[-5]));
				}
#line 30237 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1157: /* a_expr: a_expr IN_P in_expr  */
#line 2488 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* in_expr returns a PGSubLink or a list of a_exprs */
					if (IsA((yyvsp[0].node), PGSubLink))
					{
						/* generate foo = ANY (subquery) */
						PGSubLink *n = (PGSubLink *) (yyvsp[0].node);
						n->subLinkType = PG_ANY_SUBLINK;
						n->subLinkId = 0;
						n->testexpr = (yyvsp[-2].node);
						n->operName = NIL;		/* show it's IN not = ANY */
						n->location = (yylsp[-1]);
						(yyval.node) = (PGNode *)n;
					}
					else
					{
						/* generate scalar IN expression */
						(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_IN, "=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
					}
				}
#line 30261 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1158: /* a_expr: a_expr NOT_LA IN_P in_expr  */
#line 2508 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* in_expr returns a PGSubLink or a list of a_exprs */
					if (IsA((yyvsp[0].node), PGSubLink))
					{
						/* generate NOT (foo = ANY (subquery)) */
						/* Make an = ANY node */
						PGSubLink *n = (PGSubLink *) (yyvsp[0].node);
						n->subLinkType = PG_ANY_SUBLINK;
						n->subLinkId = 0;
						n->testexpr = (yyvsp[-3].node);
						n->operName = NIL;		/* show it's IN not = ANY */
						n->location = (yylsp[-2]);
						/* Stick a NOT on top; must have same parse location */
						(yyval.node) = makeNotExpr((PGNode *) n, (yylsp[-2]));
					}
					else
					{
						/* generate scalar NOT IN expression */
						(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_IN, "<>", (yyvsp[-3].node), (yyvsp[0].node), (yylsp[-2]));
					}
				}
#line 30287 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1159: /* a_expr: a_expr subquery_Op sub_type select_with_parens  */
#line 2530 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSubLink *n = makeNode(PGSubLink);
					n->subLinkType = (yyvsp[-1].subquerytype);
					n->subLinkId = 0;
					n->testexpr = (yyvsp[-3].node);
					n->operName = (yyvsp[-2].list);
					n->subselect = (yyvsp[0].node);
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)n;
				}
#line 30302 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1160: /* a_expr: a_expr subquery_Op sub_type '(' a_expr ')'  */
#line 2541 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[-3].subquerytype) == PG_ANY_SUBLINK)
						(yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP_ANY, (yyvsp[-4].list), (yyvsp[-5].node), (yyvsp[-1].node), (yylsp[-4]));
					else
						(yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP_ALL, (yyvsp[-4].list), (yyvsp[-5].node), (yyvsp[-1].node), (yylsp[-4]));
				}
#line 30313 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1161: /* a_expr: DEFAULT  */
#line 2548 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/*
					 * The SQL spec only allows DEFAULT in "contextually typed
					 * expressions", but for us, it's easier to allow it in
					 * any a_expr and then throw error during parse analysis
					 * if it's in an inappropriate context.  This way also
					 * lets us say something smarter than "syntax error".
					 */
					PGSetToDefault *n = makeNode(PGSetToDefault);
					/* parse analysis will fill in the rest */
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 30331 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1162: /* a_expr: COLUMNS '(' a_expr ')'  */
#line 2562 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAStar *star = makeNode(PGAStar);
					star->expr = (yyvsp[-1].node);
					star->columns = true;
					star->location = (yylsp[-3]);
					(yyval.node) = (PGNode *) star;
				}
#line 30343 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1163: /* a_expr: '*' opt_except_list opt_replace_list  */
#line 2570 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAStar *star = makeNode(PGAStar);
					star->except_list = (yyvsp[-1].list);
					star->replace_list = (yyvsp[0].list);
					star->location = (yylsp[-2]);
					(yyval.node) = (PGNode *) star;
				}
#line 30355 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1164: /* a_expr: ColId '.' '*' opt_except_list opt_replace_list  */
#line 2578 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAStar *star = makeNode(PGAStar);
					star->relation = (yyvsp[-4].str);
					star->except_list = (yyvsp[-1].list);
					star->replace_list = (yyvsp[0].list);
					star->location = (yylsp[-4]);
					(yyval.node) = (PGNode *) star;
				}
#line 30368 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1165: /* b_expr: c_expr  */
#line 2598 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 30374 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1166: /* b_expr: b_expr TYPECAST Typename  */
#line 2600 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeTypeCast((yyvsp[-2].node), (yyvsp[0].typnam), 0, (yylsp[-1])); }
#line 30380 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1167: /* b_expr: '+' b_expr  */
#line 2602 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", NULL, (yyvsp[0].node), (yylsp[-1])); }
#line 30386 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1168: /* b_expr: '-' b_expr  */
#line 2604 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = doNegate((yyvsp[0].node), (yylsp[-1])); }
#line 30392 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1169: /* b_expr: b_expr '+' b_expr  */
#line 2606 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 30398 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1170: /* b_expr: b_expr '-' b_expr  */
#line 2608 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "-", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 30404 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1171: /* b_expr: b_expr '*' b_expr  */
#line 2610 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "*", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 30410 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1172: /* b_expr: b_expr '/' b_expr  */
#line 2612 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "/", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 30416 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1173: /* b_expr: b_expr INTEGER_DIVISION b_expr  */
#line 2614 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "//", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 30422 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1174: /* b_expr: b_expr '%' b_expr  */
#line 2616 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "%", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 30428 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1175: /* b_expr: b_expr '^' b_expr  */
#line 2618 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "^", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 30434 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1176: /* b_expr: b_expr POWER_OF b_expr  */
#line 2620 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "**", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 30440 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1177: /* b_expr: b_expr '<' b_expr  */
#line 2622 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 30446 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1178: /* b_expr: b_expr '>' b_expr  */
#line 2624 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, ">", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 30452 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1179: /* b_expr: b_expr '=' b_expr  */
#line 2626 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 30458 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1180: /* b_expr: b_expr LESS_EQUALS b_expr  */
#line 2628 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 30464 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1181: /* b_expr: b_expr GREATER_EQUALS b_expr  */
#line 2630 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, ">=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 30470 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1182: /* b_expr: b_expr NOT_EQUALS b_expr  */
#line 2632 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<>", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 30476 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1183: /* b_expr: b_expr qual_Op b_expr  */
#line 2634 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[-1].list), (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 30482 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1184: /* b_expr: qual_Op b_expr  */
#line 2636 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[-1].list), NULL, (yyvsp[0].node), (yylsp[-1])); }
#line 30488 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1185: /* b_expr: b_expr qual_Op  */
#line 2638 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[0].list), (yyvsp[-1].node), NULL, (yylsp[0])); }
#line 30494 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1186: /* b_expr: b_expr IS DISTINCT FROM b_expr  */
#line 2640 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_DISTINCT, "=", (yyvsp[-4].node), (yyvsp[0].node), (yylsp[-3]));
				}
#line 30502 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1187: /* b_expr: b_expr IS NOT DISTINCT FROM b_expr  */
#line 2644 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_DISTINCT, "=", (yyvsp[-5].node), (yyvsp[0].node), (yylsp[-4]));
				}
#line 30510 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1188: /* b_expr: b_expr IS OF '(' type_list ')'  */
#line 2648 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OF, "=", (yyvsp[-5].node), (PGNode *) (yyvsp[-1].list), (yylsp[-4]));
				}
#line 30518 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1189: /* b_expr: b_expr IS NOT OF '(' type_list ')'  */
#line 2652 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OF, "<>", (yyvsp[-6].node), (PGNode *) (yyvsp[-1].list), (yylsp[-5]));
				}
#line 30526 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1191: /* c_expr: indirection_expr_or_a_expr opt_extended_indirection  */
#line 2667 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].list))
					{
						PGAIndirection *n = makeNode(PGAIndirection);
						n->arg = (PGNode *) (yyvsp[-1].node);
						n->indirection = check_indirection((yyvsp[0].list), yyscanner);
						(yyval.node) = (PGNode *) n;
					}
					else
						(yyval.node) = (PGNode *) (yyvsp[-1].node);
				}
#line 30542 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1192: /* d_expr: columnref  */
#line 2680 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 30548 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1193: /* d_expr: AexprConst  */
#line 2681 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 30554 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1194: /* d_expr: select_with_parens  */
#line 2683 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSubLink *n = makeNode(PGSubLink);
					n->subLinkType = PG_EXPR_SUBLINK;
					n->subLinkId = 0;
					n->testexpr = NULL;
					n->operName = NIL;
					n->subselect = (yyvsp[0].node);
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 30569 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1195: /* d_expr: select_with_parens indirection  */
#line 2694 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/*
					 * Because the select_with_parens nonterminal is designed
					 * to "eat" as many levels of parens as possible, the
					 * '(' a_expr ')' opt_indirection production above will
					 * fail to match a sub-SELECT with indirection decoration;
					 * the sub-SELECT won't be regarded as an a_expr as long
					 * as there are parens around it.  To support applying
					 * subscripting or field selection to a sub-SELECT result,
					 * we need this redundant-looking production.
					 */
					PGSubLink *n = makeNode(PGSubLink);
					PGAIndirection *a = makeNode(PGAIndirection);
					n->subLinkType = PG_EXPR_SUBLINK;
					n->subLinkId = 0;
					n->testexpr = NULL;
					n->operName = NIL;
					n->subselect = (yyvsp[-1].node);
					n->location = (yylsp[-1]);
					a->arg = (PGNode *)n;
					a->indirection = check_indirection((yyvsp[0].list), yyscanner);
					(yyval.node) = (PGNode *)a;
				}
#line 30597 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1196: /* d_expr: EXISTS select_with_parens  */
#line 2718 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSubLink *n = makeNode(PGSubLink);
					n->subLinkType = PG_EXISTS_SUBLINK;
					n->subLinkId = 0;
					n->testexpr = NULL;
					n->operName = NIL;
					n->subselect = (yyvsp[0].node);
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 30612 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1197: /* d_expr: grouping_or_grouping_id '(' expr_list_opt_comma ')'  */
#line 2729 "third_party/libpg_query/grammar/statements/select.y"
                          {
				  PGGroupingFunc *g = makeNode(PGGroupingFunc);
				  g->args = (yyvsp[-1].list);
				  g->location = (yylsp[-3]);
				  (yyval.node) = (PGNode *)g;
			  }
#line 30623 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1198: /* indirection_expr_or_a_expr: '(' a_expr ')'  */
#line 2739 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (yyvsp[-1].node);
				}
#line 30631 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1199: /* indirection_expr_or_a_expr: indirection_expr  */
#line 2743 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (yyvsp[0].node);
				}
#line 30639 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1200: /* indirection_expr_or_a_expr: row  */
#line 2746 "third_party/libpg_query/grammar/statements/select.y"
                              {
				PGFuncCall *n = makeFuncCall(SystemFuncName("row"), (yyvsp[0].list), (yylsp[0]));
				(yyval.node) = (PGNode *) n;
			}
#line 30648 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1201: /* indirection_expr: '?'  */
#line 2754 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeParamRef(0, (yylsp[0]));
				}
#line 30656 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1202: /* indirection_expr: PARAM  */
#line 2758 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGParamRef *p = makeNode(PGParamRef);
					p->number = (yyvsp[0].ival);
					p->location = (yylsp[0]);
					(yyval.node) = (PGNode *) p;
				}
#line 30667 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1203: /* indirection_expr: struct_expr  */
#line 2765 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (yyvsp[0].node);
				}
#line 30675 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1204: /* indirection_expr: MAP '{' opt_map_arguments_opt_comma '}'  */
#line 2769 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGList *key_list = NULL;
					PGList *value_list = NULL;
					PGListCell *lc;
					PGList *entry_list = (yyvsp[-1].list);
					foreach(lc, entry_list)
					{
						PGList *l = (PGList *) lc->data.ptr_value;
						key_list = lappend(key_list, (PGNode *) l->head->data.ptr_value);
						value_list = lappend(value_list, (PGNode *) l->tail->data.ptr_value);
					}
					PGNode *keys   = (PGNode *) makeFuncCall(SystemFuncName("list_value"), key_list, (yylsp[-1]));
					PGNode *values = (PGNode *) makeFuncCall(SystemFuncName("list_value"), value_list, (yylsp[-1]));
					PGFuncCall *f = makeFuncCall(SystemFuncName("map"), list_make2(keys, values), (yylsp[-1]));
					(yyval.node) = (PGNode *) f;
				}
#line 30696 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1205: /* indirection_expr: func_expr  */
#line 2786 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (yyvsp[0].node);
				}
#line 30704 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1206: /* indirection_expr: case_expr  */
#line 2790 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 30710 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1207: /* indirection_expr: '[' opt_expr_list_opt_comma ']'  */
#line 2791 "third_party/libpg_query/grammar/statements/select.y"
                                                          {
				PGFuncCall *n = makeFuncCall(SystemFuncName("list_value"), (yyvsp[-1].list), (yylsp[-1]));
				(yyval.node) = (PGNode *) n;
			}
#line 30719 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1208: /* indirection_expr: list_comprehension  */
#line 2795 "third_party/libpg_query/grammar/statements/select.y"
                                             {
				(yyval.node) = (yyvsp[0].node);
			}
#line 30727 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1209: /* indirection_expr: ARRAY select_with_parens  */
#line 2799 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSubLink *n = makeNode(PGSubLink);
					n->subLinkType = PG_ARRAY_SUBLINK;
					n->subLinkId = 0;
					n->testexpr = NULL;
					n->operName = NULL;
					n->subselect = (yyvsp[0].node);
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 30742 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1210: /* indirection_expr: ARRAY '[' opt_expr_list_opt_comma ']'  */
#line 2809 "third_party/libpg_query/grammar/statements/select.y"
                                                                {
				PGList *func_name = list_make1(makeString("construct_array"));
				PGFuncCall *n = makeFuncCall(func_name, (yyvsp[-1].list), (yylsp[-3]));
				(yyval.node) = (PGNode *) n;
			}
#line 30752 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1211: /* indirection_expr: '#' ICONST  */
#line 2815 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGPositionalReference *n = makeNode(PGPositionalReference);
					n->position = (yyvsp[0].ival);
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *) n;
				}
#line 30763 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1212: /* indirection_expr: '$' ColLabel  */
#line 2822 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeNamedParamRef((yyvsp[0].str), (yylsp[-1]));
				}
#line 30771 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1213: /* struct_expr: '{' dict_arguments_opt_comma '}'  */
#line 2830 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *f = makeFuncCall(SystemFuncName("struct_pack"), (yyvsp[-1].list), (yylsp[-1]));
					(yyval.node) = (PGNode *) f;
				}
#line 30780 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1214: /* func_application: func_name '(' ')'  */
#line 2839 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall((yyvsp[-2].list), NIL, (yylsp[-2]));
				}
#line 30788 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1215: /* func_application: func_name '(' func_arg_list opt_sort_clause opt_ignore_nulls ')'  */
#line 2843 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall((yyvsp[-5].list), (yyvsp[-3].list), (yylsp[-5]));
					n->agg_order = (yyvsp[-2].list);
					n->agg_ignore_nulls = (yyvsp[-1].boolean);
					(yyval.node) = (PGNode *)n;
				}
#line 30799 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1216: /* func_application: func_name '(' VARIADIC func_arg_expr opt_sort_clause opt_ignore_nulls ')'  */
#line 2850 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall((yyvsp[-6].list), list_make1((yyvsp[-3].node)), (yylsp[-6]));
					n->func_variadic = true;
					n->agg_order = (yyvsp[-2].list);
					n->agg_ignore_nulls = (yyvsp[-1].boolean);
					(yyval.node) = (PGNode *)n;
				}
#line 30811 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1217: /* func_application: func_name '(' func_arg_list ',' VARIADIC func_arg_expr opt_sort_clause opt_ignore_nulls ')'  */
#line 2858 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall((yyvsp[-8].list), lappend((yyvsp[-6].list), (yyvsp[-3].node)), (yylsp[-8]));
					n->func_variadic = true;
					n->agg_order = (yyvsp[-2].list);
					n->agg_ignore_nulls = (yyvsp[-1].boolean);
					(yyval.node) = (PGNode *)n;
				}
#line 30823 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1218: /* func_application: func_name '(' ALL func_arg_list opt_sort_clause opt_ignore_nulls ')'  */
#line 2866 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall((yyvsp[-6].list), (yyvsp[-3].list), (yylsp[-6]));
					n->agg_order = (yyvsp[-2].list);
					n->agg_ignore_nulls = (yyvsp[-1].boolean);
					/* Ideally we'd mark the PGFuncCall node to indicate
					 * "must be an aggregate", but there's no provision
					 * for that in PGFuncCall at the moment.
					 */
					(yyval.node) = (PGNode *)n;
				}
#line 30838 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1219: /* func_application: func_name '(' DISTINCT func_arg_list opt_sort_clause opt_ignore_nulls ')'  */
#line 2877 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall((yyvsp[-6].list), (yyvsp[-3].list), (yylsp[-6]));
					n->agg_order = (yyvsp[-2].list);
					n->agg_ignore_nulls = (yyvsp[-1].boolean);
					n->agg_distinct = true;
					(yyval.node) = (PGNode *)n;
				}
#line 30850 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1220: /* func_expr: func_application within_group_clause filter_clause export_clause over_clause  */
#line 2897 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = (PGFuncCall *) (yyvsp[-4].node);
					/*
					 * The order clause for WITHIN GROUP and the one for
					 * plain-aggregate ORDER BY share a field, so we have to
					 * check here that at most one is present.  We also check
					 * for DISTINCT and VARIADIC here to give a better error
					 * location.  Other consistency checks are deferred to
					 * parse analysis.
					 */
					if ((yyvsp[-3].list) != NIL)
					{
						if (n->agg_order != NIL)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("cannot use multiple ORDER BY clauses with WITHIN GROUP"),
									 parser_errposition((yylsp[-3]))));
						if (n->agg_distinct)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("cannot use DISTINCT with WITHIN GROUP"),
									 parser_errposition((yylsp[-3]))));
						if (n->func_variadic)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("cannot use VARIADIC with WITHIN GROUP"),
									 parser_errposition((yylsp[-3]))));
						n->agg_order = (yyvsp[-3].list);
						n->agg_within_group = true;
					}
					n->agg_filter = (yyvsp[-2].node);
					n->export_state = (yyvsp[-1].boolean);
					n->over = (yyvsp[0].windef);
					(yyval.node) = (PGNode *) n;
				}
#line 30890 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1221: /* func_expr: func_expr_common_subexpr  */
#line 2933 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 30896 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1222: /* func_expr_windowless: func_application  */
#line 2943 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 30902 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1223: /* func_expr_windowless: func_expr_common_subexpr  */
#line 2944 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 30908 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1224: /* func_expr_common_subexpr: COLLATION FOR '(' a_expr ')'  */
#line 2952 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("pg_collation_for"),
											   list_make1((yyvsp[-1].node)),
											   (yylsp[-4]));
				}
#line 30918 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1225: /* func_expr_common_subexpr: CAST '(' a_expr AS Typename ')'  */
#line 2958 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeTypeCast((yyvsp[-3].node), (yyvsp[-1].typnam), 0, (yylsp[-5])); }
#line 30924 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1226: /* func_expr_common_subexpr: TRY_CAST '(' a_expr AS Typename ')'  */
#line 2960 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeTypeCast((yyvsp[-3].node), (yyvsp[-1].typnam), 1, (yylsp[-5])); }
#line 30930 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1227: /* func_expr_common_subexpr: EXTRACT '(' extract_list ')'  */
#line 2962 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("date_part"), (yyvsp[-1].list), (yylsp[-3]));
				}
#line 30938 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1228: /* func_expr_common_subexpr: OVERLAY '(' overlay_list ')'  */
#line 2966 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* overlay(A PLACING B FROM C FOR D) is converted to
					 * overlay(A, B, C, D)
					 * overlay(A PLACING B FROM C) is converted to
					 * overlay(A, B, C)
					 */
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("overlay"), (yyvsp[-1].list), (yylsp[-3]));
				}
#line 30951 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1229: /* func_expr_common_subexpr: POSITION '(' position_list ')'  */
#line 2975 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* position(A in B) is converted to position(B, A) */
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("position"), (yyvsp[-1].list), (yylsp[-3]));
				}
#line 30960 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1230: /* func_expr_common_subexpr: SUBSTRING '(' substr_list ')'  */
#line 2980 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* substring(A from B for C) is converted to
					 * substring(A, B, C) - thomas 2000-11-28
					 */
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("substring"), (yyvsp[-1].list), (yylsp[-3]));
				}
#line 30971 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1231: /* func_expr_common_subexpr: TREAT '(' a_expr AS Typename ')'  */
#line 2987 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* TREAT(expr AS target) converts expr of a particular type to target,
					 * which is defined to be a subtype of the original expression.
					 * In SQL99, this is intended for use with structured UDTs,
					 * but let's make this a generally useful form allowing stronger
					 * coercions than are handled by implicit casting.
					 *
					 * Convert SystemTypeName() to SystemFuncName() even though
					 * at the moment they result in the same thing.
					 */
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName(((PGValue *)llast((yyvsp[-1].typnam)->names))->val.str),
												list_make1((yyvsp[-3].node)),
												(yylsp[-5]));
				}
#line 30990 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1232: /* func_expr_common_subexpr: TRIM '(' BOTH trim_list ')'  */
#line 3002 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* various trim expressions are defined in SQL
					 * - thomas 1997-07-19
					 */
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("trim"), (yyvsp[-1].list), (yylsp[-4]));
				}
#line 31001 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1233: /* func_expr_common_subexpr: TRIM '(' LEADING trim_list ')'  */
#line 3009 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("ltrim"), (yyvsp[-1].list), (yylsp[-4]));
				}
#line 31009 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1234: /* func_expr_common_subexpr: TRIM '(' TRAILING trim_list ')'  */
#line 3013 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("rtrim"), (yyvsp[-1].list), (yylsp[-4]));
				}
#line 31017 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1235: /* func_expr_common_subexpr: TRIM '(' trim_list ')'  */
#line 3017 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("trim"), (yyvsp[-1].list), (yylsp[-3]));
				}
#line 31025 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1236: /* func_expr_common_subexpr: NULLIF '(' a_expr ',' a_expr ')'  */
#line 3021 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NULLIF, "=", (yyvsp[-3].node), (yyvsp[-1].node), (yylsp[-5]));
				}
#line 31033 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1237: /* func_expr_common_subexpr: COALESCE '(' expr_list_opt_comma ')'  */
#line 3025 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGCoalesceExpr *c = makeNode(PGCoalesceExpr);
					c->args = (yyvsp[-1].list);
					c->location = (yylsp[-3]);
					(yyval.node) = (PGNode *)c;
				}
#line 31044 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1238: /* list_comprehension: '[' a_expr FOR ColId IN_P a_expr ']'  */
#line 3035 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGLambdaFunction *lambda = makeNode(PGLambdaFunction);
					lambda->lhs = makeColumnRef((yyvsp[-3].str), NIL, (yylsp[-3]), yyscanner);
					lambda->rhs = (yyvsp[-5].node);
					lambda->location = (yylsp[-6]);
					PGFuncCall *n = makeFuncCall(SystemFuncName("list_apply"), list_make2((yyvsp[-1].node), lambda), (yylsp[-6]));
					(yyval.node) = (PGNode *) n;
				}
#line 31057 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1239: /* list_comprehension: '[' a_expr FOR ColId IN_P c_expr IF_P a_expr ']'  */
#line 3044 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGLambdaFunction *lambda = makeNode(PGLambdaFunction);
					lambda->lhs = makeColumnRef((yyvsp[-5].str), NIL, (yylsp[-5]), yyscanner);
					lambda->rhs = (yyvsp[-7].node);
					lambda->location = (yylsp[-8]);

					PGLambdaFunction *lambda_filter = makeNode(PGLambdaFunction);
					lambda_filter->lhs = makeColumnRef((yyvsp[-5].str), NIL, (yylsp[-5]), yyscanner);
					lambda_filter->rhs = (yyvsp[-1].node);
					lambda_filter->location = (yylsp[-1]);
					PGFuncCall *filter = makeFuncCall(SystemFuncName("list_filter"), list_make2((yyvsp[-3].node), lambda_filter), (yylsp[-8]));
					PGFuncCall *n = makeFuncCall(SystemFuncName("list_apply"), list_make2(filter, lambda), (yylsp[-8]));
					(yyval.node) = (PGNode *) n;
				}
#line 31076 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1240: /* within_group_clause: WITHIN GROUP_P '(' sort_clause ')'  */
#line 3065 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 31082 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1241: /* within_group_clause: %empty  */
#line 3066 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 31088 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1242: /* filter_clause: FILTER '(' WHERE a_expr ')'  */
#line 3070 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[-1].node); }
#line 31094 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1243: /* filter_clause: FILTER '(' a_expr ')'  */
#line 3071 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[-1].node); }
#line 31100 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1244: /* filter_clause: %empty  */
#line 3072 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 31106 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1245: /* export_clause: EXPORT_STATE  */
#line 3076 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.boolean) = true; }
#line 31112 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1246: /* export_clause: %empty  */
#line 3077 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 31118 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1247: /* window_clause: WINDOW window_definition_list  */
#line 3084 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 31124 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1248: /* window_clause: %empty  */
#line 3085 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 31130 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1249: /* window_definition_list: window_definition  */
#line 3089 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].windef)); }
#line 31136 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1250: /* window_definition_list: window_definition_list ',' window_definition  */
#line 3091 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].windef)); }
#line 31142 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1251: /* window_definition: ColId AS window_specification  */
#line 3096 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = (yyvsp[0].windef);
					n->name = (yyvsp[-2].str);
					(yyval.windef) = n;
				}
#line 31152 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1252: /* over_clause: OVER window_specification  */
#line 3104 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.windef) = (yyvsp[0].windef); }
#line 31158 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1253: /* over_clause: OVER ColId  */
#line 3106 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->name = (yyvsp[0].str);
					n->refname = NULL;
					n->partitionClause = NIL;
					n->orderClause = NIL;
					n->frameOptions = FRAMEOPTION_DEFAULTS;
					n->startOffset = NULL;
					n->endOffset = NULL;
					n->location = (yylsp[0]);
					(yyval.windef) = n;
				}
#line 31175 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1254: /* over_clause: %empty  */
#line 3119 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.windef) = NULL; }
#line 31181 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1255: /* window_specification: '(' opt_existing_window_name opt_partition_clause opt_sort_clause opt_frame_clause ')'  */
#line 3124 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->name = NULL;
					n->refname = (yyvsp[-4].str);
					n->partitionClause = (yyvsp[-3].list);
					n->orderClause = (yyvsp[-2].list);
					/* copy relevant fields of opt_frame_clause */
					n->frameOptions = (yyvsp[-1].windef)->frameOptions;
					n->startOffset = (yyvsp[-1].windef)->startOffset;
					n->endOffset = (yyvsp[-1].windef)->endOffset;
					n->location = (yylsp[-5]);
					(yyval.windef) = n;
				}
#line 31199 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1256: /* opt_existing_window_name: ColId  */
#line 3149 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 31205 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1257: /* opt_existing_window_name: %empty  */
#line 3150 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = NULL; }
#line 31211 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1258: /* opt_partition_clause: PARTITION BY expr_list  */
#line 3153 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.list) = (yyvsp[0].list); }
#line 31217 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1259: /* opt_partition_clause: %empty  */
#line 3154 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 31223 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1260: /* opt_frame_clause: RANGE frame_extent opt_window_exclusion_clause  */
#line 3163 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = (yyvsp[-1].windef);

					n->frameOptions |= FRAMEOPTION_NONDEFAULT | FRAMEOPTION_RANGE;
					n->frameOptions |= (yyvsp[0].ival);
					(yyval.windef) = n;
				}
#line 31235 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1261: /* opt_frame_clause: ROWS frame_extent opt_window_exclusion_clause  */
#line 3171 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = (yyvsp[-1].windef);

					n->frameOptions |= FRAMEOPTION_NONDEFAULT | FRAMEOPTION_ROWS;
					n->frameOptions |= (yyvsp[0].ival);
					(yyval.windef) = n;
				}
#line 31247 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1262: /* opt_frame_clause: GROUPS frame_extent opt_window_exclusion_clause  */
#line 3179 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = (yyvsp[-1].windef);

					n->frameOptions |= FRAMEOPTION_NONDEFAULT | FRAMEOPTION_GROUPS;
					n->frameOptions |= (yyvsp[0].ival);
					(yyval.windef) = n;
				}
#line 31259 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1263: /* opt_frame_clause: %empty  */
#line 3187 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);

					n->frameOptions = FRAMEOPTION_DEFAULTS;
					n->startOffset = NULL;
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 31272 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1264: /* frame_extent: frame_bound  */
#line 3198 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = (yyvsp[0].windef);

					/* reject invalid cases */
					if (n->frameOptions & FRAMEOPTION_START_UNBOUNDED_FOLLOWING)
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame start cannot be UNBOUNDED FOLLOWING"),
								 parser_errposition((yylsp[0]))));
					if (n->frameOptions & FRAMEOPTION_START_OFFSET_FOLLOWING)
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame starting from following row cannot end with current row"),
								 parser_errposition((yylsp[0]))));
					n->frameOptions |= FRAMEOPTION_END_CURRENT_ROW;
					(yyval.windef) = n;
				}
#line 31294 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1265: /* frame_extent: BETWEEN frame_bound AND frame_bound  */
#line 3216 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n1 = (yyvsp[-2].windef);
					PGWindowDef *n2 = (yyvsp[0].windef);

					/* form merged options */
					int		frameOptions = n1->frameOptions;
					/* shift converts START_ options to END_ options */
					frameOptions |= n2->frameOptions << 1;
					frameOptions |= FRAMEOPTION_BETWEEN;
					/* reject invalid cases */
					if (frameOptions & FRAMEOPTION_START_UNBOUNDED_FOLLOWING)
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame start cannot be UNBOUNDED FOLLOWING"),
								 parser_errposition((yylsp[-2]))));
					if (frameOptions & FRAMEOPTION_END_UNBOUNDED_PRECEDING)
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame end cannot be UNBOUNDED PRECEDING"),
								 parser_errposition((yylsp[0]))));
					if ((frameOptions & FRAMEOPTION_START_CURRENT_ROW) &&
						(frameOptions & FRAMEOPTION_END_OFFSET_PRECEDING))
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame starting from current row cannot have preceding rows"),
								 parser_errposition((yylsp[0]))));
					if ((frameOptions & FRAMEOPTION_START_OFFSET_FOLLOWING) &&
						(frameOptions & (FRAMEOPTION_END_OFFSET_PRECEDING |
										 FRAMEOPTION_END_CURRENT_ROW)))
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame starting from following row cannot have preceding rows"),
								 parser_errposition((yylsp[0]))));
					n1->frameOptions = frameOptions;
					n1->endOffset = n2->startOffset;
					(yyval.windef) = n1;
				}
#line 31336 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1266: /* frame_bound: UNBOUNDED PRECEDING  */
#line 3262 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);

					n->frameOptions = FRAMEOPTION_START_UNBOUNDED_PRECEDING;
					n->startOffset = NULL;
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 31349 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1267: /* frame_bound: UNBOUNDED FOLLOWING  */
#line 3271 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);

					n->frameOptions = FRAMEOPTION_START_UNBOUNDED_FOLLOWING;
					n->startOffset = NULL;
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 31362 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1268: /* frame_bound: CURRENT_P ROW  */
#line 3280 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);

					n->frameOptions = FRAMEOPTION_START_CURRENT_ROW;
					n->startOffset = NULL;
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 31375 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1269: /* frame_bound: a_expr PRECEDING  */
#line 3289 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);

					n->frameOptions = FRAMEOPTION_START_OFFSET_PRECEDING;
					n->startOffset = (yyvsp[-1].node);
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 31388 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1270: /* frame_bound: a_expr FOLLOWING  */
#line 3298 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);

					n->frameOptions = FRAMEOPTION_START_OFFSET_FOLLOWING;
					n->startOffset = (yyvsp[-1].node);
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 31401 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1271: /* opt_window_exclusion_clause: EXCLUDE CURRENT_P ROW  */
#line 3309 "third_party/libpg_query/grammar/statements/select.y"
                                                { (yyval.ival) = FRAMEOPTION_EXCLUDE_CURRENT_ROW; }
#line 31407 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1272: /* opt_window_exclusion_clause: EXCLUDE GROUP_P  */
#line 3310 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.ival) = FRAMEOPTION_EXCLUDE_GROUP; }
#line 31413 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1273: /* opt_window_exclusion_clause: EXCLUDE TIES  */
#line 3311 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.ival) = FRAMEOPTION_EXCLUDE_TIES; }
#line 31419 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1274: /* opt_window_exclusion_clause: EXCLUDE NO OTHERS  */
#line 3312 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.ival) = 0; }
#line 31425 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1275: /* opt_window_exclusion_clause: %empty  */
#line 3313 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.ival) = 0; }
#line 31431 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1276: /* qualified_row: ROW '(' expr_list_opt_comma ')'  */
#line 3327 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 31437 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1277: /* qualified_row: ROW '(' ')'  */
#line 3328 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = NIL; }
#line 31443 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1278: /* row: qualified_row  */
#line 3331 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[0].list);}
#line 31449 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1279: /* row: '(' expr_list ',' a_expr ')'  */
#line 3332 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = lappend((yyvsp[-3].list), (yyvsp[-1].node)); }
#line 31455 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1280: /* dict_arg: ColIdOrString ':' a_expr  */
#line 3337 "third_party/libpg_query/grammar/statements/select.y"
                                                                                {
		PGNamedArgExpr *na = makeNode(PGNamedArgExpr);
		na->name = (yyvsp[-2].str);
		na->arg = (PGExpr *) (yyvsp[0].node);
		na->argnumber = -1;
		na->location = (yylsp[-2]);
		(yyval.node) = (PGNode *) na;
	}
#line 31468 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1281: /* dict_arguments: dict_arg  */
#line 3347 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 31474 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1282: /* dict_arguments: dict_arguments ',' dict_arg  */
#line 3348 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 31480 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1283: /* dict_arguments_opt_comma: dict_arguments  */
#line 3352 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 31486 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1284: /* dict_arguments_opt_comma: dict_arguments ','  */
#line 3353 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 31492 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1285: /* map_arg: a_expr ':' a_expr  */
#line 3358 "third_party/libpg_query/grammar/statements/select.y"
                        {
				(yyval.list) = list_make2((yyvsp[-2].node), (yyvsp[0].node));
			}
#line 31500 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1286: /* map_arguments: map_arg  */
#line 3364 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].list)); }
#line 31506 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1287: /* map_arguments: map_arguments ',' map_arg  */
#line 3365 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].list)); }
#line 31512 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1288: /* map_arguments_opt_comma: map_arguments  */
#line 3370 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 31518 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1289: /* map_arguments_opt_comma: map_arguments ','  */
#line 3371 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 31524 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1290: /* opt_map_arguments_opt_comma: map_arguments_opt_comma  */
#line 3376 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 31530 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1291: /* opt_map_arguments_opt_comma: %empty  */
#line 3377 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = NULL; }
#line 31536 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1292: /* sub_type: ANY  */
#line 3380 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.subquerytype) = PG_ANY_SUBLINK; }
#line 31542 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1293: /* sub_type: SOME  */
#line 3381 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.subquerytype) = PG_ANY_SUBLINK; }
#line 31548 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1294: /* sub_type: ALL  */
#line 3382 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.subquerytype) = PG_ALL_SUBLINK; }
#line 31554 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1295: /* all_Op: Op  */
#line 3385 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 31560 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1296: /* all_Op: MathOp  */
#line 3386 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.str) = (char*) (yyvsp[0].conststr); }
#line 31566 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1297: /* MathOp: '+'  */
#line 3389 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.conststr) = "+"; }
#line 31572 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1298: /* MathOp: '-'  */
#line 3390 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "-"; }
#line 31578 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1299: /* MathOp: '*'  */
#line 3391 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "*"; }
#line 31584 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1300: /* MathOp: '/'  */
#line 3392 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "/"; }
#line 31590 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1301: /* MathOp: INTEGER_DIVISION  */
#line 3393 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.conststr) = "//"; }
#line 31596 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1302: /* MathOp: '%'  */
#line 3394 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "%"; }
#line 31602 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1303: /* MathOp: '^'  */
#line 3395 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "^"; }
#line 31608 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1304: /* MathOp: POWER_OF  */
#line 3396 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "**"; }
#line 31614 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1305: /* MathOp: '<'  */
#line 3397 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "<"; }
#line 31620 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1306: /* MathOp: '>'  */
#line 3398 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = ">"; }
#line 31626 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1307: /* MathOp: '='  */
#line 3399 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "="; }
#line 31632 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1308: /* MathOp: LESS_EQUALS  */
#line 3400 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.conststr) = "<="; }
#line 31638 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1309: /* MathOp: GREATER_EQUALS  */
#line 3401 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.conststr) = ">="; }
#line 31644 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1310: /* MathOp: NOT_EQUALS  */
#line 3402 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.conststr) = "<>"; }
#line 31650 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1311: /* qual_Op: Op  */
#line 3406 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 31656 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1312: /* qual_Op: OPERATOR '(' any_operator ')'  */
#line 3408 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = (yyvsp[-1].list); }
#line 31662 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1313: /* qual_all_Op: all_Op  */
#line 3413 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 31668 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1314: /* qual_all_Op: OPERATOR '(' any_operator ')'  */
#line 3415 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = (yyvsp[-1].list); }
#line 31674 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1315: /* subquery_Op: all_Op  */
#line 3420 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 31680 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1316: /* subquery_Op: OPERATOR '(' any_operator ')'  */
#line 3422 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = (yyvsp[-1].list); }
#line 31686 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1317: /* subquery_Op: LIKE  */
#line 3424 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("~~")); }
#line 31692 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1318: /* subquery_Op: NOT_LA LIKE  */
#line 3426 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("!~~")); }
#line 31698 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1319: /* subquery_Op: GLOB  */
#line 3428 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("~~~")); }
#line 31704 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1320: /* subquery_Op: NOT_LA GLOB  */
#line 3430 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("!~~~")); }
#line 31710 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1321: /* subquery_Op: ILIKE  */
#line 3432 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("~~*")); }
#line 31716 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1322: /* subquery_Op: NOT_LA ILIKE  */
#line 3434 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("!~~*")); }
#line 31722 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1323: /* any_operator: all_Op  */
#line 3448 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 31728 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1324: /* any_operator: ColId '.' any_operator  */
#line 3450 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = lcons(makeString((yyvsp[-2].str)), (yyvsp[0].list)); }
#line 31734 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1325: /* c_expr_list: c_expr  */
#line 3455 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 31742 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1326: /* c_expr_list: c_expr_list ',' c_expr  */
#line 3459 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 31750 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1327: /* c_expr_list_opt_comma: c_expr_list  */
#line 3466 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = (yyvsp[0].list);
				}
#line 31758 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1328: /* c_expr_list_opt_comma: c_expr_list ','  */
#line 3471 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = (yyvsp[-1].list);
				}
#line 31766 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1329: /* expr_list: a_expr  */
#line 3477 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 31774 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1330: /* expr_list: expr_list ',' a_expr  */
#line 3481 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 31782 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1331: /* expr_list_opt_comma: expr_list  */
#line 3488 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = (yyvsp[0].list);
				}
#line 31790 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1332: /* expr_list_opt_comma: expr_list ','  */
#line 3493 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = (yyvsp[-1].list);
				}
#line 31798 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1333: /* opt_expr_list_opt_comma: expr_list_opt_comma  */
#line 3500 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = (yyvsp[0].list);
				}
#line 31806 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1334: /* opt_expr_list_opt_comma: %empty  */
#line 3504 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = NULL;
				}
#line 31814 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1335: /* func_arg_list: func_arg_expr  */
#line 3513 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 31822 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1336: /* func_arg_list: func_arg_list ',' func_arg_expr  */
#line 3517 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 31830 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1337: /* func_arg_expr: a_expr  */
#line 3523 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (yyvsp[0].node);
				}
#line 31838 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1338: /* func_arg_expr: param_name COLON_EQUALS a_expr  */
#line 3527 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNamedArgExpr *na = makeNode(PGNamedArgExpr);
					na->name = (yyvsp[-2].str);
					na->arg = (PGExpr *) (yyvsp[0].node);
					na->argnumber = -1;		/* until determined */
					na->location = (yylsp[-2]);
					(yyval.node) = (PGNode *) na;
				}
#line 31851 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1339: /* func_arg_expr: param_name EQUALS_GREATER a_expr  */
#line 3536 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNamedArgExpr *na = makeNode(PGNamedArgExpr);
					na->name = (yyvsp[-2].str);
					na->arg = (PGExpr *) (yyvsp[0].node);
					na->argnumber = -1;		/* until determined */
					na->location = (yylsp[-2]);
					(yyval.node) = (PGNode *) na;
				}
#line 31864 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1340: /* type_list: Typename  */
#line 3546 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].typnam)); }
#line 31870 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1341: /* type_list: type_list ',' Typename  */
#line 3547 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].typnam)); }
#line 31876 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1342: /* extract_list: extract_arg FROM a_expr  */
#line 3552 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make2(makeStringConst((yyvsp[-2].str), (yylsp[-2])), (yyvsp[0].node));
				}
#line 31884 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1343: /* extract_list: %empty  */
#line 3555 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 31890 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1344: /* extract_arg: IDENT  */
#line 3562 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 31896 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1345: /* extract_arg: year_keyword  */
#line 3563 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "year"; }
#line 31902 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1346: /* extract_arg: month_keyword  */
#line 3564 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "month"; }
#line 31908 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1347: /* extract_arg: day_keyword  */
#line 3565 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "day"; }
#line 31914 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1348: /* extract_arg: hour_keyword  */
#line 3566 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "hour"; }
#line 31920 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1349: /* extract_arg: minute_keyword  */
#line 3567 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "minute"; }
#line 31926 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1350: /* extract_arg: second_keyword  */
#line 3568 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "second"; }
#line 31932 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1351: /* extract_arg: millisecond_keyword  */
#line 3569 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.str) = (char*) "millisecond"; }
#line 31938 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1352: /* extract_arg: microsecond_keyword  */
#line 3570 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.str) = (char*) "microsecond"; }
#line 31944 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1353: /* extract_arg: week_keyword  */
#line 3571 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "week"; }
#line 31950 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1354: /* extract_arg: decade_keyword  */
#line 3572 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "decade"; }
#line 31956 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1355: /* extract_arg: century_keyword  */
#line 3573 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "century"; }
#line 31962 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1356: /* extract_arg: millennium_keyword  */
#line 3574 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.str) = (char*) "millennium"; }
#line 31968 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1357: /* extract_arg: Sconst  */
#line 3575 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 31974 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1358: /* overlay_list: a_expr overlay_placing substr_from substr_for  */
#line 3586 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make4((yyvsp[-3].node), (yyvsp[-2].node), (yyvsp[-1].node), (yyvsp[0].node));
				}
#line 31982 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1359: /* overlay_list: a_expr overlay_placing substr_from  */
#line 3590 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make3((yyvsp[-2].node), (yyvsp[-1].node), (yyvsp[0].node));
				}
#line 31990 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1360: /* overlay_placing: PLACING a_expr  */
#line 3597 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 31996 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1361: /* position_list: b_expr IN_P b_expr  */
#line 3603 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make2((yyvsp[0].node), (yyvsp[-2].node)); }
#line 32002 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1362: /* position_list: %empty  */
#line 3604 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 32008 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1363: /* substr_list: a_expr substr_from substr_for  */
#line 3621 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make3((yyvsp[-2].node), (yyvsp[-1].node), (yyvsp[0].node));
				}
#line 32016 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1364: /* substr_list: a_expr substr_for substr_from  */
#line 3625 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* not legal per SQL99, but might as well allow it */
					(yyval.list) = list_make3((yyvsp[-2].node), (yyvsp[0].node), (yyvsp[-1].node));
				}
#line 32025 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1365: /* substr_list: a_expr substr_from  */
#line 3630 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make2((yyvsp[-1].node), (yyvsp[0].node));
				}
#line 32033 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1366: /* substr_list: a_expr substr_for  */
#line 3634 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/*
					 * Since there are no cases where this syntax allows
					 * a textual FOR value, we forcibly cast the argument
					 * to int4.  The possible matches in pg_proc are
					 * substring(text,int4) and substring(text,text),
					 * and we don't want the parser to choose the latter,
					 * which it is likely to do if the second argument
					 * is unknown or doesn't have an implicit cast to int4.
					 */
					(yyval.list) = list_make3((yyvsp[-1].node), makeIntConst(1, -1),
									makeTypeCast((yyvsp[0].node),
												 SystemTypeName("int4"), 0, -1));
				}
#line 32052 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1367: /* substr_list: expr_list  */
#line 3649 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = (yyvsp[0].list);
				}
#line 32060 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1368: /* substr_list: %empty  */
#line 3653 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = NIL; }
#line 32066 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1369: /* substr_from: FROM a_expr  */
#line 3657 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 32072 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1370: /* substr_for: FOR a_expr  */
#line 3660 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 32078 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1371: /* trim_list: a_expr FROM expr_list_opt_comma  */
#line 3663 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = lappend((yyvsp[0].list), (yyvsp[-2].node)); }
#line 32084 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1372: /* trim_list: FROM expr_list_opt_comma  */
#line 3664 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 32090 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1373: /* trim_list: expr_list_opt_comma  */
#line 3665 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 32096 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1374: /* in_expr: select_with_parens  */
#line 3669 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSubLink *n = makeNode(PGSubLink);
					n->subselect = (yyvsp[0].node);
					/* other fields will be filled later */
					(yyval.node) = (PGNode *)n;
				}
#line 32107 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1375: /* in_expr: '(' expr_list_opt_comma ')'  */
#line 3675 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (PGNode *)(yyvsp[-1].list); }
#line 32113 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1376: /* case_expr: CASE case_arg when_clause_list case_default END_P  */
#line 3686 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGCaseExpr *c = makeNode(PGCaseExpr);
					c->casetype = InvalidOid; /* not analyzed yet */
					c->arg = (PGExpr *) (yyvsp[-3].node);
					c->args = (yyvsp[-2].list);
					c->defresult = (PGExpr *) (yyvsp[-1].node);
					c->location = (yylsp[-4]);
					(yyval.node) = (PGNode *)c;
				}
#line 32127 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1377: /* when_clause_list: when_clause  */
#line 3699 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 32133 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1378: /* when_clause_list: when_clause_list when_clause  */
#line 3700 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 32139 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1379: /* when_clause: WHEN a_expr THEN a_expr  */
#line 3705 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGCaseWhen *w = makeNode(PGCaseWhen);
					w->expr = (PGExpr *) (yyvsp[-2].node);
					w->result = (PGExpr *) (yyvsp[0].node);
					w->location = (yylsp[-3]);
					(yyval.node) = (PGNode *)w;
				}
#line 32151 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1380: /* case_default: ELSE a_expr  */
#line 3715 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 32157 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1381: /* case_default: %empty  */
#line 3716 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 32163 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1382: /* case_arg: a_expr  */
#line 3719 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 32169 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1383: /* case_arg: %empty  */
#line 3720 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 32175 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1384: /* columnref: ColId  */
#line 3724 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeColumnRef((yyvsp[0].str), NIL, (yylsp[0]), yyscanner);
				}
#line 32183 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1385: /* columnref: ColId indirection  */
#line 3728 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeColumnRef((yyvsp[-1].str), (yyvsp[0].list), (yylsp[-1]), yyscanner);
				}
#line 32191 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1386: /* indirection_el: '[' a_expr ']'  */
#line 3735 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAIndices *ai = makeNode(PGAIndices);
					ai->is_slice = false;
					ai->lidx = NULL;
					ai->uidx = (yyvsp[-1].node);
					(yyval.node) = (PGNode *) ai;
				}
#line 32203 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1387: /* indirection_el: '[' opt_slice_bound ':' opt_slice_bound ']'  */
#line 3743 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAIndices *ai = makeNode(PGAIndices);
					ai->is_slice = true;
					ai->lidx = (yyvsp[-3].node);
					ai->uidx = (yyvsp[-1].node);
					(yyval.node) = (PGNode *) ai;
				}
#line 32215 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1388: /* indirection_el: '[' opt_slice_bound ':' opt_slice_bound ':' opt_slice_bound ']'  */
#line 3750 "third_party/libpg_query/grammar/statements/select.y"
                                                                                          {
				    	PGAIndices *ai = makeNode(PGAIndices);
				    	ai->is_slice = true;
				    	ai->lidx = (yyvsp[-5].node);
				    	ai->uidx = (yyvsp[-3].node);
				    	ai->step = (yyvsp[-1].node);
				    	(yyval.node) = (PGNode *) ai;
				}
#line 32228 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1389: /* indirection_el: '[' opt_slice_bound ':' '-' ':' opt_slice_bound ']'  */
#line 3758 "third_party/libpg_query/grammar/statements/select.y"
                                                                              {
					PGAIndices *ai = makeNode(PGAIndices);
					ai->is_slice = true;
					ai->lidx = (yyvsp[-5].node);
					ai->step = (yyvsp[-1].node);
					(yyval.node) = (PGNode *) ai;
				}
#line 32240 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1390: /* opt_slice_bound: a_expr  */
#line 3768 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 32246 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1391: /* opt_slice_bound: %empty  */
#line 3769 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 32252 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1392: /* opt_indirection: %empty  */
#line 3774 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 32258 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1393: /* opt_indirection: opt_indirection indirection_el  */
#line 3775 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 32264 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1394: /* opt_func_arguments: %empty  */
#line 3779 "third_party/libpg_query/grammar/statements/select.y"
                                                { (yyval.list) = NULL; }
#line 32270 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1395: /* opt_func_arguments: '(' ')'  */
#line 3780 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.list) = list_make1(NULL); }
#line 32276 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1396: /* opt_func_arguments: '(' func_arg_list ')'  */
#line 3781 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = (yyvsp[-1].list); }
#line 32282 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1397: /* extended_indirection_el: '.' attr_name opt_func_arguments  */
#line 3786 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].list)) {
						PGFuncCall *n = makeFuncCall(list_make1(makeString((yyvsp[-1].str))), (yyvsp[0].list)->head->data.ptr_value ? (yyvsp[0].list) : NULL, (yylsp[-1]));
						(yyval.node) = (PGNode *) n;
					} else {
						(yyval.node) = (PGNode *) makeString((yyvsp[-1].str));
					}
				}
#line 32295 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1398: /* extended_indirection_el: '[' a_expr ']'  */
#line 3795 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAIndices *ai = makeNode(PGAIndices);
					ai->is_slice = false;
					ai->lidx = NULL;
					ai->uidx = (yyvsp[-1].node);
					(yyval.node) = (PGNode *) ai;
				}
#line 32307 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1399: /* extended_indirection_el: '[' opt_slice_bound ':' opt_slice_bound ']'  */
#line 3803 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAIndices *ai = makeNode(PGAIndices);
					ai->is_slice = true;
					ai->lidx = (yyvsp[-3].node);
					ai->uidx = (yyvsp[-1].node);
					(yyval.node) = (PGNode *) ai;
				}
#line 32319 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1400: /* extended_indirection_el: '[' opt_slice_bound ':' opt_slice_bound ':' opt_slice_bound ']'  */
#line 3810 "third_party/libpg_query/grammar/statements/select.y"
                                                                                          {
					PGAIndices *ai = makeNode(PGAIndices);
					ai->is_slice = true;
					ai->lidx = (yyvsp[-5].node);
					ai->uidx = (yyvsp[-3].node);
					ai->step = (yyvsp[-1].node);
                 			(yyval.node) = (PGNode *) ai;
                		}
#line 32332 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1401: /* extended_indirection_el: '[' opt_slice_bound ':' '-' ':' opt_slice_bound ']'  */
#line 3819 "third_party/libpg_query/grammar/statements/select.y"
                                                                              {
					PGAIndices *ai = makeNode(PGAIndices);
					ai->is_slice = true;
					ai->lidx = (yyvsp[-5].node);
					ai->step = (yyvsp[-1].node);
					(yyval.node) = (PGNode *) ai;
				}
#line 32344 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1402: /* opt_extended_indirection: %empty  */
#line 3834 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                                { (yyval.list) = NIL; }
#line 32350 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1403: /* opt_extended_indirection: opt_extended_indirection extended_indirection_el  */
#line 3835 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 32356 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1406: /* opt_target_list_opt_comma: target_list_opt_comma  */
#line 3851 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 32362 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1407: /* opt_target_list_opt_comma: %empty  */
#line 3852 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = NIL; }
#line 32368 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1408: /* target_list: target_el  */
#line 3856 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].target)); }
#line 32374 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1409: /* target_list: target_list ',' target_el  */
#line 3857 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].target)); }
#line 32380 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1410: /* target_list_opt_comma: target_list  */
#line 3861 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 32386 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1411: /* target_list_opt_comma: target_list ','  */
#line 3862 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 32392 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1412: /* target_el: a_expr AS ColLabelOrString  */
#line 3866 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = (yyvsp[0].str);
					(yyval.target)->indirection = NIL;
					(yyval.target)->val = (PGNode *)(yyvsp[-2].node);
					(yyval.target)->location = (yylsp[-2]);
				}
#line 32404 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1413: /* target_el: a_expr IDENT  */
#line 3882 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = (yyvsp[0].str);
					(yyval.target)->indirection = NIL;
					(yyval.target)->val = (PGNode *)(yyvsp[-1].node);
					(yyval.target)->location = (yylsp[-1]);
				}
#line 32416 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1414: /* target_el: a_expr  */
#line 3890 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = NULL;
					(yyval.target)->indirection = NIL;
					(yyval.target)->val = (PGNode *)(yyvsp[0].node);
					(yyval.target)->location = (yylsp[0]);
				}
#line 32428 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1415: /* except_list: EXCLUDE '(' name_list_opt_comma ')'  */
#line 3899 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 32434 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1416: /* except_list: EXCLUDE ColId  */
#line 3900 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 32440 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1417: /* opt_except_list: except_list  */
#line 3903 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 32446 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1418: /* opt_except_list: %empty  */
#line 3904 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NULL; }
#line 32452 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1419: /* replace_list_el: a_expr AS ColId  */
#line 3907 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = list_make2((yyvsp[-2].node), makeString((yyvsp[0].str))); }
#line 32458 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1420: /* replace_list: replace_list_el  */
#line 3911 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].list)); }
#line 32464 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1421: /* replace_list: replace_list ',' replace_list_el  */
#line 3912 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].list)); }
#line 32470 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1422: /* replace_list_opt_comma: replace_list  */
#line 3916 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 32476 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1423: /* replace_list_opt_comma: replace_list ','  */
#line 3917 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 32482 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1424: /* opt_replace_list: REPLACE '(' replace_list_opt_comma ')'  */
#line 3920 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 32488 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1425: /* opt_replace_list: REPLACE replace_list_el  */
#line 3921 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = list_make1((yyvsp[0].list)); }
#line 32494 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1426: /* opt_replace_list: %empty  */
#line 3922 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NULL; }
#line 32500 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1427: /* qualified_name_list: qualified_name  */
#line 3932 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].range)); }
#line 32506 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1428: /* qualified_name_list: qualified_name_list ',' qualified_name  */
#line 3933 "third_party/libpg_query/grammar/statements/select.y"
                                                                 { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].range)); }
#line 32512 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1429: /* name_list: name  */
#line 3938 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 32518 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1430: /* name_list: name_list ',' name  */
#line 3940 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = lappend((yyvsp[-2].list), makeString((yyvsp[0].str))); }
#line 32524 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1431: /* name_list_opt_comma: name_list  */
#line 3945 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 32530 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1432: /* name_list_opt_comma: name_list ','  */
#line 3946 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 32536 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1433: /* name_list_opt_comma_opt_bracket: name_list_opt_comma  */
#line 3950 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 32542 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1434: /* name_list_opt_comma_opt_bracket: '(' name_list_opt_comma ')'  */
#line 3951 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 32548 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1435: /* name: ColIdOrString  */
#line 3954 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 32554 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1436: /* func_name: function_name_token  */
#line 3966 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 32560 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1437: /* func_name: ColId indirection  */
#line 3969 "third_party/libpg_query/grammar/statements/select.y"
                                        {
						(yyval.list) = check_func_name(lcons(makeString((yyvsp[-1].str)), (yyvsp[0].list)),
											 yyscanner);
					}
#line 32569 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1438: /* AexprConst: Iconst  */
#line 3980 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeIntConst((yyvsp[0].ival), (yylsp[0]));
				}
#line 32577 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1439: /* AexprConst: FCONST  */
#line 3984 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeFloatConst((yyvsp[0].str), (yylsp[0]));
				}
#line 32585 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1440: /* AexprConst: Sconst opt_indirection  */
#line 3988 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].list))
					{
						PGAIndirection *n = makeNode(PGAIndirection);
						n->arg = makeStringConst((yyvsp[-1].str), (yylsp[-1]));
						n->indirection = check_indirection((yyvsp[0].list), yyscanner);
						(yyval.node) = (PGNode *) n;
					}
					else
						(yyval.node) = makeStringConst((yyvsp[-1].str), (yylsp[-1]));
				}
#line 32601 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1441: /* AexprConst: BCONST  */
#line 4000 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeBitStringConst((yyvsp[0].str), (yylsp[0]));
				}
#line 32609 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1442: /* AexprConst: XCONST  */
#line 4004 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* This is a bit constant per SQL99:
					 * Without Feature F511, "BIT data type",
					 * a <general literal> shall not be a
					 * <bit string literal> or a <hex string literal>.
					 */
					(yyval.node) = makeBitStringConst((yyvsp[0].str), (yylsp[0]));
				}
#line 32622 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1443: /* AexprConst: func_name Sconst  */
#line 4013 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* generic type 'literal' syntax */
					PGTypeName *t = makeTypeNameFromNameList((yyvsp[-1].list));
					t->location = (yylsp[-1]);
					(yyval.node) = makeStringConstCast((yyvsp[0].str), (yylsp[0]), t);
				}
#line 32633 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1444: /* AexprConst: func_name '(' func_arg_list opt_sort_clause opt_ignore_nulls ')' Sconst  */
#line 4020 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* generic syntax with a type modifier */
					PGTypeName *t = makeTypeNameFromNameList((yyvsp[-6].list));
					PGListCell *lc;

					/*
					 * We must use func_arg_list and opt_sort_clause in the
					 * production to avoid reduce/reduce conflicts, but we
					 * don't actually wish to allow PGNamedArgExpr in this
					 * context, ORDER BY, nor IGNORE NULLS.
					 */
					foreach(lc, (yyvsp[-4].list))
					{
						PGNamedArgExpr *arg = (PGNamedArgExpr *) lfirst(lc);

						if (IsA(arg, PGNamedArgExpr))
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("type modifier cannot have parameter name"),
									 parser_errposition(arg->location)));
					}
					if ((yyvsp[-3].list) != NIL)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("type modifier cannot have ORDER BY"),
									 parser_errposition((yylsp[-3]))));
					if ((yyvsp[-2].boolean) != false)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("type modifier cannot have IGNORE NULLS"),
									 parser_errposition((yylsp[-2]))));


					t->typmods = (yyvsp[-4].list);
					t->location = (yylsp[-6]);
					(yyval.node) = makeStringConstCast((yyvsp[0].str), (yylsp[0]), t);
				}
#line 32675 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1445: /* AexprConst: ConstTypename Sconst  */
#line 4058 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeStringConstCast((yyvsp[0].str), (yylsp[0]), (yyvsp[-1].typnam));
				}
#line 32683 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1446: /* AexprConst: ConstInterval '(' a_expr ')' opt_interval  */
#line 4062 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeIntervalNode((yyvsp[-2].node), (yylsp[-2]), (yyvsp[0].list));
				}
#line 32691 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1447: /* AexprConst: ConstInterval Iconst opt_interval  */
#line 4066 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeIntervalNode((yyvsp[-1].ival), (yylsp[-1]), (yyvsp[0].list));
				}
#line 32699 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1448: /* AexprConst: ConstInterval Sconst opt_interval  */
#line 4070 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeIntervalNode((yyvsp[-1].str), (yylsp[-1]), (yyvsp[0].list));
				}
#line 32707 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1449: /* AexprConst: TRUE_P  */
#line 4074 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeBoolAConst(true, (yylsp[0]));
				}
#line 32715 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1450: /* AexprConst: FALSE_P  */
#line 4078 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeBoolAConst(false, (yylsp[0]));
				}
#line 32723 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1451: /* AexprConst: NULL_P  */
#line 4082 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeNullAConst((yylsp[0]));
				}
#line 32731 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1452: /* Iconst: ICONST  */
#line 4087 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.ival) = (yyvsp[0].ival); }
#line 32737 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1453: /* type_function_name: IDENT  */
#line 4104 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 32743 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1454: /* type_function_name: unreserved_keyword  */
#line 4105 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 32749 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1455: /* type_function_name: type_func_name_keyword  */
#line 4106 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 32755 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1456: /* type_function_name: pgq_unreserved_keyword  */
#line 4107 "third_party/libpg_query/grammar/statements/select.y"
                                                    { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 32761 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1457: /* function_name_token: IDENT  */
#line 4111 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 32767 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1458: /* function_name_token: unreserved_keyword  */
#line 4112 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 32773 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1459: /* function_name_token: func_name_keyword  */
#line 4113 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 32779 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1460: /* function_name_token: pgq_unreserved_keyword  */
#line 4114 "third_party/libpg_query/grammar/statements/select.y"
                                                    { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 32785 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1461: /* type_name_token: IDENT  */
#line 4118 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 32791 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1462: /* type_name_token: unreserved_keyword  */
#line 4119 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 32797 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1463: /* type_name_token: type_name_keyword  */
#line 4120 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 32803 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1464: /* type_name_token: pgq_unreserved_keyword  */
#line 4121 "third_party/libpg_query/grammar/statements/select.y"
                                                    { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 32809 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1465: /* any_name: ColId  */
#line 4125 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 32815 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1466: /* any_name: ColId attrs  */
#line 4126 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = lcons(makeString((yyvsp[-1].str)), (yyvsp[0].list)); }
#line 32821 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1467: /* attrs: '.' attr_name  */
#line 4130 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 32827 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1468: /* attrs: attrs '.' attr_name  */
#line 4132 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = lappend((yyvsp[-2].list), makeString((yyvsp[0].str))); }
#line 32833 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1469: /* opt_name_list: '(' name_list_opt_comma ')'  */
#line 4136 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 32839 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1470: /* opt_name_list: %empty  */
#line 4137 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 32845 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1472: /* ColLabelOrString: ColLabel  */
#line 4144 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 32851 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1473: /* ColLabelOrString: SCONST  */
#line 4145 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 32857 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1474: /* PrepareStmt: PREPARE name prep_type_clause AS PreparableStmt  */
#line 8 "third_party/libpg_query/grammar/statements/prepare.y"
                                {
					PGPrepareStmt *n = makeNode(PGPrepareStmt);
					n->name = (yyvsp[-3].str);
					n->argtypes = (yyvsp[-2].list);
					n->query = (yyvsp[0].node);
					(yyval.node) = (PGNode *) n;
				}
#line 32869 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1475: /* prep_type_clause: '(' type_list ')'  */
#line 18 "third_party/libpg_query/grammar/statements/prepare.y"
                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 32875 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1476: /* prep_type_clause: %empty  */
#line 19 "third_party/libpg_query/grammar/statements/prepare.y"
                                                                        { (yyval.list) = NIL; }
#line 32881 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1483: /* CreateSchemaStmt: CREATE_P SCHEMA qualified_name OptSchemaEltList  */
#line 8 "third_party/libpg_query/grammar/statements/create_schema.y"
                                {
					PGCreateSchemaStmt *n = makeNode(PGCreateSchemaStmt);
					if ((yyvsp[-1].range)->catalogname) {
						ereport(ERROR,
								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
								 errmsg("CREATE SCHEMA too many dots: expected \"catalog.schema\" or \"schema\""),
								 parser_errposition((yylsp[-1]))));
					}
					if ((yyvsp[-1].range)->schemaname) {
						n->catalogname = (yyvsp[-1].range)->schemaname;
						n->schemaname = (yyvsp[-1].range)->relname;
					} else {
						n->schemaname = (yyvsp[-1].range)->relname;
					}
					n->schemaElts = (yyvsp[0].list);
					n->onconflict = PG_ERROR_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 32904 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1484: /* CreateSchemaStmt: CREATE_P SCHEMA IF_P NOT EXISTS qualified_name OptSchemaEltList  */
#line 27 "third_party/libpg_query/grammar/statements/create_schema.y"
                                {
					PGCreateSchemaStmt *n = makeNode(PGCreateSchemaStmt);
					if ((yyvsp[-1].range)->catalogname) {
						ereport(ERROR,
								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
								 errmsg("CREATE SCHEMA too many dots: expected \"catalog.schema\" or \"schema\""),
								 parser_errposition((yylsp[-1]))));
					}
					if ((yyvsp[-1].range)->schemaname) {
						n->catalogname = (yyvsp[-1].range)->schemaname;
						n->schemaname = (yyvsp[-1].range)->relname;
					} else {
						n->schemaname = (yyvsp[-1].range)->relname;
					}
					if ((yyvsp[0].list) != NIL)
						ereport(ERROR,
								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
								 errmsg("CREATE SCHEMA IF NOT EXISTS cannot include schema elements"),
								 parser_errposition((yylsp[0]))));
					n->schemaElts = (yyvsp[0].list);
					n->onconflict = PG_IGNORE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 32932 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1485: /* CreateSchemaStmt: CREATE_P OR REPLACE SCHEMA qualified_name OptSchemaEltList  */
#line 51 "third_party/libpg_query/grammar/statements/create_schema.y"
                                {
					PGCreateSchemaStmt *n = makeNode(PGCreateSchemaStmt);
					if ((yyvsp[-1].range)->catalogname) {
						ereport(ERROR,
								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
								 errmsg("CREATE SCHEMA too many dots: expected \"catalog.schema\" or \"schema\""),
								 parser_errposition((yylsp[-1]))));
					}
					if ((yyvsp[-1].range)->schemaname) {
						n->catalogname = (yyvsp[-1].range)->schemaname;
						n->schemaname = (yyvsp[-1].range)->relname;
					} else {
						n->schemaname = (yyvsp[-1].range)->relname;
					}
					n->schemaElts = (yyvsp[0].list);
					n->onconflict = PG_REPLACE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 32955 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1486: /* OptSchemaEltList: OptSchemaEltList schema_stmt  */
#line 74 "third_party/libpg_query/grammar/statements/create_schema.y"
                                {
					if ((yyloc) < 0)			/* see comments for YYLLOC_DEFAULT */
						(yyloc) = (yylsp[0]);
					(yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node));
				}
#line 32965 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1487: /* OptSchemaEltList: %empty  */
#line 80 "third_party/libpg_query/grammar/statements/create_schema.y"
                                { (yyval.list) = NIL; }
#line 32971 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1492: /* IndexStmt: CREATE_P opt_unique INDEX opt_concurrently opt_index_name ON qualified_name access_method_clause '(' index_params ')' opt_reloptions where_clause  */
#line 11 "third_party/libpg_query/grammar/statements/index.y"
                                {
					PGIndexStmt *n = makeNode(PGIndexStmt);
					n->unique = (yyvsp[-11].boolean);
					n->concurrent = (yyvsp[-9].boolean);
					n->idxname = (yyvsp[-8].str);
					n->relation = (yyvsp[-6].range);
					n->accessMethod = (yyvsp[-5].str);
					n->indexParams = (yyvsp[-3].list);
					n->options = (yyvsp[-1].list);
					n->whereClause = (yyvsp[0].node);
					n->excludeOpNames = NIL;
					n->idxcomment = NULL;
					n->indexOid = InvalidOid;
					n->oldNode = InvalidOid;
					n->primary = false;
					n->isconstraint = false;
					n->deferrable = false;
					n->initdeferred = false;
					n->transformed = false;
					n->onconflict = PG_ERROR_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 32998 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1493: /* IndexStmt: CREATE_P opt_unique INDEX opt_concurrently IF_P NOT EXISTS index_name ON qualified_name access_method_clause '(' index_params ')' opt_reloptions where_clause  */
#line 36 "third_party/libpg_query/grammar/statements/index.y"
                                {
					PGIndexStmt *n = makeNode(PGIndexStmt);
					n->unique = (yyvsp[-14].boolean);
					n->concurrent = (yyvsp[-12].boolean);
					n->idxname = (yyvsp[-8].str);
					n->relation = (yyvsp[-6].range);
					n->accessMethod = (yyvsp[-5].str);
					n->indexParams = (yyvsp[-3].list);
					n->options = (yyvsp[-1].list);
					n->whereClause = (yyvsp[0].node);
					n->excludeOpNames = NIL;
					n->idxcomment = NULL;
					n->indexOid = InvalidOid;
					n->oldNode = InvalidOid;
					n->primary = false;
					n->isconstraint = false;
					n->deferrable = false;
					n->initdeferred = false;
					n->transformed = false;
					n->onconflict = PG_IGNORE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 33025 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1494: /* access_method: ColId  */
#line 62 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 33031 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1495: /* access_method_clause: USING access_method  */
#line 66 "third_party/libpg_query/grammar/statements/index.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 33037 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1496: /* access_method_clause: %empty  */
#line 67 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.str) = (char*) DEFAULT_INDEX_TYPE; }
#line 33043 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1497: /* opt_concurrently: CONCURRENTLY  */
#line 72 "third_party/libpg_query/grammar/statements/index.y"
                                                                                        { (yyval.boolean) = true; }
#line 33049 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1498: /* opt_concurrently: %empty  */
#line 73 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.boolean) = false; }
#line 33055 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1499: /* opt_index_name: index_name  */
#line 78 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 33061 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1500: /* opt_index_name: %empty  */
#line 79 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.str) = NULL; }
#line 33067 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1501: /* opt_reloptions: WITH reloptions  */
#line 83 "third_party/libpg_query/grammar/statements/index.y"
                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 33073 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1502: /* opt_reloptions: %empty  */
#line 84 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.list) = NIL; }
#line 33079 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1503: /* opt_unique: UNIQUE  */
#line 89 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.boolean) = true; }
#line 33085 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1504: /* opt_unique: %empty  */
#line 90 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.boolean) = false; }
#line 33091 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1505: /* AlterObjectSchemaStmt: ALTER TABLE relation_expr SET SCHEMA name  */
#line 8 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 33104 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1506: /* AlterObjectSchemaStmt: ALTER TABLE IF_P EXISTS relation_expr SET SCHEMA name  */
#line 17 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 33117 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1507: /* AlterObjectSchemaStmt: ALTER SEQUENCE qualified_name SET SCHEMA name  */
#line 26 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_SEQUENCE;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 33130 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1508: /* AlterObjectSchemaStmt: ALTER SEQUENCE IF_P EXISTS qualified_name SET SCHEMA name  */
#line 35 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_SEQUENCE;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 33143 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1509: /* AlterObjectSchemaStmt: ALTER VIEW qualified_name SET SCHEMA name  */
#line 44 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_VIEW;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 33156 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1510: /* AlterObjectSchemaStmt: ALTER VIEW IF_P EXISTS qualified_name SET SCHEMA name  */
#line 53 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_VIEW;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 33169 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1511: /* CheckPointStmt: FORCE CHECKPOINT opt_col_id  */
#line 6 "third_party/libpg_query/grammar/statements/checkpoint.y"
                                {
					PGCheckPointStmt *n = makeNode(PGCheckPointStmt);
					n->force = true;
					n->name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 33180 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1512: /* CheckPointStmt: CHECKPOINT opt_col_id  */
#line 13 "third_party/libpg_query/grammar/statements/checkpoint.y"
                                {
					PGCheckPointStmt *n = makeNode(PGCheckPointStmt);
					n->force = false;
					n->name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 33191 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1513: /* opt_col_id: ColId  */
#line 22 "third_party/libpg_query/grammar/statements/checkpoint.y"
                                                        { (yyval.str) = (yyvsp[0].str); }
#line 33197 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1514: /* opt_col_id: %empty  */
#line 23 "third_party/libpg_query/grammar/statements/checkpoint.y"
                                                { (yyval.str) = NULL; }
#line 33203 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1515: /* CommentOnStmt: COMMENT ON comment_on_type_any_name qualified_name IS comment_value  */
#line 8 "third_party/libpg_query/grammar/statements/comment_on.y"
                                {
					PGCommentOnStmt *n = makeNode(PGCommentOnStmt);
					n->object_type = (yyvsp[-3].objtype);
					n->name = (yyvsp[-2].range);
					n->value = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 33215 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1516: /* CommentOnStmt: COMMENT ON COLUMN a_expr IS comment_value  */
#line 16 "third_party/libpg_query/grammar/statements/comment_on.y"
                {
                    PGCommentOnStmt *n = makeNode(PGCommentOnStmt);
                    n->object_type = PG_OBJECT_COLUMN;
                    n->column_expr = (yyvsp[-2].node);
                    n->value = (yyvsp[0].node);
                    (yyval.node) = (PGNode *)n;
                }
#line 33227 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1517: /* comment_value: Sconst  */
#line 26 "third_party/libpg_query/grammar/statements/comment_on.y"
                                                                { (yyval.node) = makeStringConst((yyvsp[0].str), (yylsp[0])); }
#line 33233 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1518: /* comment_value: NULL_P  */
#line 27 "third_party/libpg_query/grammar/statements/comment_on.y"
                                                                            { (yyval.node) = makeNullAConst((yylsp[0])); }
#line 33239 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1519: /* comment_on_type_any_name: TABLE  */
#line 30 "third_party/libpg_query/grammar/statements/comment_on.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_TABLE; }
#line 33245 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1520: /* comment_on_type_any_name: SEQUENCE  */
#line 31 "third_party/libpg_query/grammar/statements/comment_on.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_SEQUENCE; }
#line 33251 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1521: /* comment_on_type_any_name: FUNCTION  */
#line 32 "third_party/libpg_query/grammar/statements/comment_on.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_FUNCTION; }
#line 33257 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1522: /* comment_on_type_any_name: MACRO  */
#line 33 "third_party/libpg_query/grammar/statements/comment_on.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_FUNCTION; }
#line 33263 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1523: /* comment_on_type_any_name: MACRO TABLE  */
#line 34 "third_party/libpg_query/grammar/statements/comment_on.y"
                                                                { (yyval.objtype) = PG_OBJECT_TABLE_MACRO; }
#line 33269 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1524: /* comment_on_type_any_name: VIEW  */
#line 35 "third_party/libpg_query/grammar/statements/comment_on.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_VIEW; }
#line 33275 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1525: /* comment_on_type_any_name: DATABASE  */
#line 36 "third_party/libpg_query/grammar/statements/comment_on.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_DATABASE; }
#line 33281 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1526: /* comment_on_type_any_name: INDEX  */
#line 37 "third_party/libpg_query/grammar/statements/comment_on.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_INDEX; }
#line 33287 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1527: /* comment_on_type_any_name: SCHEMA  */
#line 38 "third_party/libpg_query/grammar/statements/comment_on.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_SCHEMA; }
#line 33293 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1528: /* comment_on_type_any_name: TYPE_P  */
#line 39 "third_party/libpg_query/grammar/statements/comment_on.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_TYPE; }
#line 33299 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1529: /* ExportStmt: EXPORT_P DATABASE Sconst copy_options  */
#line 8 "third_party/libpg_query/grammar/statements/export.y"
                                {
					PGExportStmt *n = makeNode(PGExportStmt);
					n->database = NULL;
					n->filename = (yyvsp[-1].str);
					n->options = NIL;
					if ((yyvsp[0].list)) {
						n->options = list_concat(n->options, (yyvsp[0].list));
					}
					(yyval.node) = (PGNode *)n;
				}
#line 33314 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1530: /* ExportStmt: EXPORT_P DATABASE ColId TO Sconst copy_options  */
#line 20 "third_party/libpg_query/grammar/statements/export.y"
                                {
					PGExportStmt *n = makeNode(PGExportStmt);
					n->database = (yyvsp[-3].str);
					n->filename = (yyvsp[-1].str);
					n->options = NIL;
					if ((yyvsp[0].list)) {
						n->options = list_concat(n->options, (yyvsp[0].list));
					}
					(yyval.node) = (PGNode *)n;
				}
#line 33329 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1531: /* ImportStmt: IMPORT_P DATABASE Sconst  */
#line 34 "third_party/libpg_query/grammar/statements/export.y"
                                {
					PGImportStmt *n = makeNode(PGImportStmt);
					n->filename = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 33339 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1532: /* ExplainStmt: EXPLAIN ExplainableStmt  */
#line 10 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					PGExplainStmt *n = makeNode(PGExplainStmt);
					n->query = (yyvsp[0].node);
					n->options = NIL;
					(yyval.node) = (PGNode *) n;
				}
#line 33350 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1533: /* ExplainStmt: EXPLAIN analyze_keyword opt_verbose ExplainableStmt  */
#line 17 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					PGExplainStmt *n = makeNode(PGExplainStmt);
					n->query = (yyvsp[0].node);
					n->options = list_make1(makeDefElem("analyze", NULL, (yylsp[-2])));
					if ((yyvsp[-1].boolean))
						n->options = lappend(n->options,
											 makeDefElem("verbose", NULL, (yylsp[-1])));
					(yyval.node) = (PGNode *) n;
				}
#line 33364 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1534: /* ExplainStmt: EXPLAIN VERBOSE ExplainableStmt  */
#line 27 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					PGExplainStmt *n = makeNode(PGExplainStmt);
					n->query = (yyvsp[0].node);
					n->options = list_make1(makeDefElem("verbose", NULL, (yylsp[-1])));
					(yyval.node) = (PGNode *) n;
				}
#line 33375 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1535: /* ExplainStmt: EXPLAIN '(' explain_option_list ')' ExplainableStmt  */
#line 34 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					PGExplainStmt *n = makeNode(PGExplainStmt);
					n->query = (yyvsp[0].node);
					n->options = (yyvsp[-2].list);
					(yyval.node) = (PGNode *) n;
				}
#line 33386 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1536: /* opt_verbose: VERBOSE  */
#line 44 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.boolean) = true; }
#line 33392 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1537: /* opt_verbose: %empty  */
#line 45 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.boolean) = false; }
#line 33398 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1538: /* explain_option_arg: opt_boolean_or_string  */
#line 50 "third_party/libpg_query/grammar/statements/explain.y"
                                                { (yyval.node) = (PGNode *) makeString((yyvsp[0].str)); }
#line 33404 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1539: /* explain_option_arg: NumericOnly  */
#line 51 "third_party/libpg_query/grammar/statements/explain.y"
                                                        { (yyval.node) = (PGNode *) (yyvsp[0].value); }
#line 33410 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1540: /* explain_option_arg: %empty  */
#line 52 "third_party/libpg_query/grammar/statements/explain.y"
                                                        { (yyval.node) = NULL; }
#line 33416 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1571: /* NonReservedWord: IDENT  */
#line 90 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 33422 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1572: /* NonReservedWord: unreserved_keyword  */
#line 91 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 33428 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1573: /* NonReservedWord: other_keyword  */
#line 92 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 33434 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1574: /* NonReservedWord: pgq_unreserved_keyword  */
#line 93 "third_party/libpg_query/grammar/statements/explain.y"
                                                            { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 33440 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1575: /* NonReservedWord_or_Sconst: NonReservedWord  */
#line 98 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 33446 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1576: /* NonReservedWord_or_Sconst: Sconst  */
#line 99 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 33452 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1577: /* explain_option_list: explain_option_elem  */
#line 105 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].defelt));
				}
#line 33460 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1578: /* explain_option_list: explain_option_list ',' explain_option_elem  */
#line 109 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt));
				}
#line 33468 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1579: /* analyze_keyword: ANALYZE  */
#line 116 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                {}
#line 33474 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1580: /* analyze_keyword: ANALYSE  */
#line 117 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                {}
#line 33480 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1581: /* opt_boolean_or_string: TRUE_P  */
#line 122 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.str) = (char*) "true"; }
#line 33486 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1582: /* opt_boolean_or_string: FALSE_P  */
#line 123 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.str) = (char*) "false"; }
#line 33492 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1583: /* opt_boolean_or_string: ON  */
#line 124 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.str) = (char*) "on"; }
#line 33498 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1584: /* opt_boolean_or_string: NonReservedWord_or_Sconst  */
#line 130 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 33504 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1585: /* explain_option_elem: explain_option_name explain_option_arg  */
#line 136 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[-1].str), (yyvsp[0].node), (yylsp[-1]));
				}
#line 33512 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1586: /* explain_option_name: NonReservedWord  */
#line 143 "third_party/libpg_query/grammar/statements/explain.y"
                                                        { (yyval.str) = (yyvsp[0].str); }
#line 33518 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1587: /* explain_option_name: analyze_keyword  */
#line 144 "third_party/libpg_query/grammar/statements/explain.y"
                                                        { (yyval.str) = (char*) "analyze"; }
#line 33524 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1588: /* VariableSetStmt: SET set_rest  */
#line 11 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = (yyvsp[0].vsetstmt);
					n->scope = VAR_SET_SCOPE_DEFAULT;
					(yyval.node) = (PGNode *) n;
				}
#line 33534 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1589: /* VariableSetStmt: SET LOCAL set_rest  */
#line 17 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = (yyvsp[0].vsetstmt);
					n->scope = VAR_SET_SCOPE_LOCAL;
					(yyval.node) = (PGNode *) n;
				}
#line 33544 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1590: /* VariableSetStmt: SET SESSION set_rest  */
#line 23 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = (yyvsp[0].vsetstmt);
					n->scope = VAR_SET_SCOPE_SESSION;
					(yyval.node) = (PGNode *) n;
				}
#line 33554 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1591: /* VariableSetStmt: SET GLOBAL set_rest  */
#line 29 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = (yyvsp[0].vsetstmt);
					n->scope = VAR_SET_SCOPE_GLOBAL;
					(yyval.node) = (PGNode *) n;
				}
#line 33564 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1592: /* set_rest: generic_set  */
#line 38 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                {(yyval.vsetstmt) = (yyvsp[0].vsetstmt);}
#line 33570 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1593: /* set_rest: var_name FROM CURRENT_P  */
#line 40 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_CURRENT;
					n->name = (yyvsp[-2].str);
					(yyval.vsetstmt) = n;
				}
#line 33581 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1594: /* set_rest: TIME ZONE zone_value  */
#line 48 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_VALUE;
					n->name = (char*) "timezone";
					if ((yyvsp[0].node) != NULL)
						n->args = list_make1((yyvsp[0].node));
					else
						n->kind = VAR_SET_DEFAULT;
					(yyval.vsetstmt) = n;
				}
#line 33596 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1595: /* set_rest: SCHEMA Sconst  */
#line 59 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_VALUE;
					n->name = (char*) "search_path";
					n->args = list_make1(makeStringConst((yyvsp[0].str), (yylsp[0])));
					(yyval.vsetstmt) = n;
				}
#line 33608 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1596: /* generic_set: var_name TO var_list  */
#line 71 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_VALUE;
					n->name = (yyvsp[-2].str);
					n->args = (yyvsp[0].list);
					(yyval.vsetstmt) = n;
				}
#line 33620 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1597: /* generic_set: var_name '=' var_list  */
#line 79 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_VALUE;
					n->name = (yyvsp[-2].str);
					n->args = (yyvsp[0].list);
					(yyval.vsetstmt) = n;
				}
#line 33632 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1598: /* var_value: a_expr  */
#line 90 "third_party/libpg_query/grammar/statements/variable_set.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 33638 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1599: /* zone_value: Sconst  */
#line 96 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					(yyval.node) = makeStringConst((yyvsp[0].str), (yylsp[0]));
				}
#line 33646 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1600: /* zone_value: IDENT  */
#line 100 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					(yyval.node) = makeStringConst((yyvsp[0].str), (yylsp[0]));
				}
#line 33654 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1601: /* zone_value: ConstInterval Sconst opt_interval  */
#line 104 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGTypeName *t = (yyvsp[-2].typnam);
					if ((yyvsp[0].list) != NIL)
					{
						PGAConst *n = (PGAConst *) linitial((yyvsp[0].list));
						if ((n->val.val.ival & ~(INTERVAL_MASK(HOUR) | INTERVAL_MASK(MINUTE))) != 0)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("time zone interval must be HOUR or HOUR TO MINUTE"),
									 parser_errposition((yylsp[0]))));
					}
					t->typmods = (yyvsp[0].list);
					(yyval.node) = makeStringConstCast((yyvsp[-1].str), (yylsp[-1]), t);
				}
#line 33673 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1602: /* zone_value: ConstInterval '(' Iconst ')' Sconst  */
#line 119 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGTypeName *t = (yyvsp[-4].typnam);
					t->typmods = list_make2(makeIntConst(INTERVAL_FULL_RANGE, -1),
											makeIntConst((yyvsp[-2].ival), (yylsp[-2])));
					(yyval.node) = makeStringConstCast((yyvsp[0].str), (yylsp[0]), t);
				}
#line 33684 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1603: /* zone_value: NumericOnly  */
#line 125 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                        { (yyval.node) = makeAConst((yyvsp[0].value), (yylsp[0])); }
#line 33690 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1604: /* zone_value: DEFAULT  */
#line 126 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                                { (yyval.node) = NULL; }
#line 33696 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1605: /* zone_value: LOCAL  */
#line 127 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                                { (yyval.node) = NULL; }
#line 33702 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1606: /* var_list: var_value  */
#line 131 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 33708 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1607: /* var_list: var_list ',' var_value  */
#line 132 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 33714 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1608: /* LoadStmt: LOAD file_name  */
#line 8 "third_party/libpg_query/grammar/statements/load.y"
                                {
					PGLoadStmt *n = makeNode(PGLoadStmt);
					n->filename = (yyvsp[0].str);
					n->repository = "";
					n->load_type = PG_LOAD_TYPE_LOAD;
					(yyval.node) = (PGNode *)n;
				}
#line 33726 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1609: /* LoadStmt: INSTALL file_name  */
#line 15 "third_party/libpg_query/grammar/statements/load.y"
                                                  {
                    PGLoadStmt *n = makeNode(PGLoadStmt);
                    n->filename = (yyvsp[0].str);
                    n->repository = "";
                    n->load_type = PG_LOAD_TYPE_INSTALL;
                    (yyval.node) = (PGNode *)n;
				}
#line 33738 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1610: /* LoadStmt: FORCE INSTALL file_name  */
#line 22 "third_party/libpg_query/grammar/statements/load.y"
                                                        {
                      PGLoadStmt *n = makeNode(PGLoadStmt);
                      n->filename = (yyvsp[0].str);
                      n->repository = "";
                      n->load_type = PG_LOAD_TYPE_FORCE_INSTALL;
                      (yyval.node) = (PGNode *)n;
                }
#line 33750 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1611: /* LoadStmt: INSTALL file_name FROM repo_path  */
#line 29 "third_party/libpg_query/grammar/statements/load.y"
                                                {
                      PGLoadStmt *n = makeNode(PGLoadStmt);
                      n->filename = (yyvsp[-2].str);
                      n->repository = (yyvsp[0].str);
                      n->load_type = PG_LOAD_TYPE_INSTALL;
                      (yyval.node) = (PGNode *)n;
                }
#line 33762 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1612: /* LoadStmt: FORCE INSTALL file_name FROM repo_path  */
#line 36 "third_party/libpg_query/grammar/statements/load.y"
                                                       {
                        PGLoadStmt *n = makeNode(PGLoadStmt);
                        n->filename = (yyvsp[-2].str);
                        n->repository = (yyvsp[0].str);
                        n->load_type = PG_LOAD_TYPE_FORCE_INSTALL;
                        (yyval.node) = (PGNode *)n;
                  }
#line 33774 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1613: /* file_name: Sconst  */
#line 45 "third_party/libpg_query/grammar/statements/load.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 33780 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1614: /* file_name: ColId  */
#line 46 "third_party/libpg_query/grammar/statements/load.y"
                                                { (yyval.str) = (yyvsp[0].str); }
#line 33786 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1615: /* repo_path: Sconst  */
#line 48 "third_party/libpg_query/grammar/statements/load.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 33792 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1616: /* repo_path: ColId  */
#line 49 "third_party/libpg_query/grammar/statements/load.y"
                                                { (yyval.str) = (yyvsp[0].str); }
#line 33798 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1617: /* VacuumStmt: VACUUM opt_full opt_freeze opt_verbose  */
#line 9 "third_party/libpg_query/grammar/statements/vacuum.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_VACUUM;
					if ((yyvsp[-2].boolean))
						n->options |= PG_VACOPT_FULL;
					if ((yyvsp[-1].boolean))
						n->options |= PG_VACOPT_FREEZE;
					if ((yyvsp[0].boolean))
						n->options |= PG_VACOPT_VERBOSE;
					n->relation = NULL;
					n->va_cols = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 33816 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1618: /* VacuumStmt: VACUUM opt_full opt_freeze opt_verbose qualified_name opt_name_list  */
#line 23 "third_party/libpg_query/grammar/statements/vacuum.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_VACUUM;
					if ((yyvsp[-4].boolean))
						n->options |= PG_VACOPT_FULL;
					if ((yyvsp[-3].boolean))
						n->options |= PG_VACOPT_FREEZE;
					if ((yyvsp[-2].boolean))
						n->options |= PG_VACOPT_VERBOSE;
					n->relation = (yyvsp[-1].range);
					n->va_cols = (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 33834 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1619: /* VacuumStmt: VACUUM opt_full opt_freeze opt_verbose AnalyzeStmt  */
#line 37 "third_party/libpg_query/grammar/statements/vacuum.y"
                                {
					PGVacuumStmt *n = (PGVacuumStmt *) (yyvsp[0].node);
					n->options |= PG_VACOPT_VACUUM;
					if ((yyvsp[-3].boolean))
						n->options |= PG_VACOPT_FULL;
					if ((yyvsp[-2].boolean))
						n->options |= PG_VACOPT_FREEZE;
					if ((yyvsp[-1].boolean))
						n->options |= PG_VACOPT_VERBOSE;
					(yyval.node) = (PGNode *)n;
				}
#line 33850 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1620: /* VacuumStmt: VACUUM '(' vacuum_option_list ')'  */
#line 49 "third_party/libpg_query/grammar/statements/vacuum.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_VACUUM | (yyvsp[-1].ival);
					n->relation = NULL;
					n->va_cols = NIL;
					(yyval.node) = (PGNode *) n;
				}
#line 33862 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1621: /* VacuumStmt: VACUUM '(' vacuum_option_list ')' qualified_name opt_name_list  */
#line 57 "third_party/libpg_query/grammar/statements/vacuum.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_VACUUM | (yyvsp[-3].ival);
					n->relation = (yyvsp[-1].range);
					n->va_cols = (yyvsp[0].list);
					if (n->va_cols != NIL)	/* implies analyze */
						n->options |= PG_VACOPT_ANALYZE;
					(yyval.node) = (PGNode *) n;
				}
#line 33876 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1622: /* vacuum_option_elem: analyze_keyword  */
#line 70 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                { (yyval.ival) = PG_VACOPT_ANALYZE; }
#line 33882 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1623: /* vacuum_option_elem: VERBOSE  */
#line 71 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                        { (yyval.ival) = PG_VACOPT_VERBOSE; }
#line 33888 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1624: /* vacuum_option_elem: FREEZE  */
#line 72 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                        { (yyval.ival) = PG_VACOPT_FREEZE; }
#line 33894 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1625: /* vacuum_option_elem: FULL  */
#line 73 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                        { (yyval.ival) = PG_VACOPT_FULL; }
#line 33900 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1626: /* vacuum_option_elem: IDENT  */
#line 75 "third_party/libpg_query/grammar/statements/vacuum.y"
                                {
					if (strcmp((yyvsp[0].str), "disable_page_skipping") == 0)
						(yyval.ival) = PG_VACOPT_DISABLE_PAGE_SKIPPING;
					else
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
							 errmsg("unrecognized VACUUM option \"%s\"", (yyvsp[0].str)),
									 parser_errposition((yylsp[0]))));
				}
#line 33914 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1627: /* opt_full: FULL  */
#line 87 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                                                        { (yyval.boolean) = true; }
#line 33920 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1628: /* opt_full: %empty  */
#line 88 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                                                                { (yyval.boolean) = false; }
#line 33926 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1629: /* vacuum_option_list: vacuum_option_elem  */
#line 93 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                                                                        { (yyval.ival) = (yyvsp[0].ival); }
#line 33932 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1630: /* vacuum_option_list: vacuum_option_list ',' vacuum_option_elem  */
#line 94 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                                                { (yyval.ival) = (yyvsp[-2].ival) | (yyvsp[0].ival); }
#line 33938 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1631: /* opt_freeze: FREEZE  */
#line 98 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                                                        { (yyval.boolean) = true; }
#line 33944 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1632: /* opt_freeze: %empty  */
#line 99 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                                                                { (yyval.boolean) = false; }
#line 33950 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1633: /* DeleteStmt: opt_with_clause DELETE_P FROM relation_expr_opt_alias using_clause where_or_current_clause returning_clause  */
#line 9 "third_party/libpg_query/grammar/statements/delete.y"
                                {
					PGDeleteStmt *n = makeNode(PGDeleteStmt);
					n->relation = (yyvsp[-3].range);
					n->usingClause = (yyvsp[-2].list);
					n->whereClause = (yyvsp[-1].node);
					n->returningList = (yyvsp[0].list);
					n->withClause = (yyvsp[-6].with);
					(yyval.node) = (PGNode *)n;
				}
#line 33964 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1634: /* DeleteStmt: TRUNCATE opt_table relation_expr_opt_alias  */
#line 19 "third_party/libpg_query/grammar/statements/delete.y"
                            {
					PGDeleteStmt *n = makeNode(PGDeleteStmt);
					n->relation = (yyvsp[0].range);
					n->usingClause = NULL;
					n->whereClause = NULL;
					n->returningList = NULL;
					n->withClause = NULL;
					(yyval.node) = (PGNode *)n;
			    }
#line 33978 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1635: /* relation_expr_opt_alias: relation_expr  */
#line 32 "third_party/libpg_query/grammar/statements/delete.y"
                                {
					(yyval.range) = (yyvsp[0].range);
				}
#line 33986 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1636: /* relation_expr_opt_alias: relation_expr ColId  */
#line 36 "third_party/libpg_query/grammar/statements/delete.y"
                                {
					PGAlias *alias = makeNode(PGAlias);
					alias->aliasname = (yyvsp[0].str);
					(yyvsp[-1].range)->alias = alias;
					(yyval.range) = (yyvsp[-1].range);
				}
#line 33997 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1637: /* relation_expr_opt_alias: relation_expr AS ColId  */
#line 43 "third_party/libpg_query/grammar/statements/delete.y"
                                {
					PGAlias *alias = makeNode(PGAlias);
					alias->aliasname = (yyvsp[0].str);
					(yyvsp[-2].range)->alias = alias;
					(yyval.range) = (yyvsp[-2].range);
				}
#line 34008 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1638: /* where_or_current_clause: WHERE a_expr  */
#line 53 "third_party/libpg_query/grammar/statements/delete.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 34014 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1639: /* where_or_current_clause: %empty  */
#line 54 "third_party/libpg_query/grammar/statements/delete.y"
                                                                                                { (yyval.node) = NULL; }
#line 34020 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1640: /* using_clause: USING from_list_opt_comma  */
#line 60 "third_party/libpg_query/grammar/statements/delete.y"
                                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 34026 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1641: /* using_clause: %empty  */
#line 61 "third_party/libpg_query/grammar/statements/delete.y"
                                                                                                { (yyval.list) = NIL; }
#line 34032 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1642: /* AnalyzeStmt: analyze_keyword opt_verbose  */
#line 10 "third_party/libpg_query/grammar/statements/analyze.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_ANALYZE;
					if ((yyvsp[0].boolean))
						n->options |= PG_VACOPT_VERBOSE;
					n->relation = NULL;
					n->va_cols = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 34046 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1643: /* AnalyzeStmt: analyze_keyword opt_verbose qualified_name opt_name_list  */
#line 20 "third_party/libpg_query/grammar/statements/analyze.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_ANALYZE;
					if ((yyvsp[-2].boolean))
						n->options |= PG_VACOPT_VERBOSE;
					n->relation = (yyvsp[-1].range);
					n->va_cols = (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 34060 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1644: /* AttachStmt: ATTACH opt_database Sconst opt_database_alias copy_options  */
#line 8 "third_party/libpg_query/grammar/statements/attach.y"
                                {
					PGAttachStmt *n = makeNode(PGAttachStmt);
					n->path = (yyvsp[-2].str);
					n->name = (yyvsp[-1].str);
					n->options = (yyvsp[0].list);
					n->onconflict = PG_ERROR_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 34073 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1645: /* AttachStmt: ATTACH IF_P NOT EXISTS opt_database Sconst opt_database_alias copy_options  */
#line 17 "third_party/libpg_query/grammar/statements/attach.y"
                                {
					PGAttachStmt *n = makeNode(PGAttachStmt);
					n->path = (yyvsp[-2].str);
					n->name = (yyvsp[-1].str);
					n->options = (yyvsp[0].list);
					n->onconflict = PG_IGNORE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 34086 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1646: /* DetachStmt: DETACH ColLabel  */
#line 29 "third_party/libpg_query/grammar/statements/attach.y"
                                {
					PGDetachStmt *n = makeNode(PGDetachStmt);
					n->missing_ok = false;
					n->db_name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 34097 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1647: /* DetachStmt: DETACH DATABASE ColLabel  */
#line 36 "third_party/libpg_query/grammar/statements/attach.y"
                                {
					PGDetachStmt *n = makeNode(PGDetachStmt);
					n->missing_ok = false;
					n->db_name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 34108 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1648: /* DetachStmt: DETACH DATABASE IF_P EXISTS ColLabel  */
#line 43 "third_party/libpg_query/grammar/statements/attach.y"
                                {
					PGDetachStmt *n = makeNode(PGDetachStmt);
					n->missing_ok = true;
					n->db_name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 34119 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1649: /* opt_database: DATABASE  */
#line 51 "third_party/libpg_query/grammar/statements/attach.y"
                                                                                {}
#line 34125 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1650: /* opt_database: %empty  */
#line 52 "third_party/libpg_query/grammar/statements/attach.y"
                                                                                                {}
#line 34131 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1651: /* opt_database_alias: AS ColId  */
#line 56 "third_party/libpg_query/grammar/statements/attach.y"
                                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 34137 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1652: /* opt_database_alias: %empty  */
#line 57 "third_party/libpg_query/grammar/statements/attach.y"
                                                                                                        { (yyval.str) = NULL; }
#line 34143 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1653: /* VariableResetStmt: RESET reset_rest  */
#line 3 "third_party/libpg_query/grammar/statements/variable_reset.y"
                        {
				(yyvsp[0].vsetstmt)->scope = VAR_SET_SCOPE_DEFAULT;
				(yyval.node) = (PGNode *) (yyvsp[0].vsetstmt);
			}
#line 34152 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1654: /* VariableResetStmt: RESET LOCAL reset_rest  */
#line 8 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                {
					(yyvsp[0].vsetstmt)->scope = VAR_SET_SCOPE_LOCAL;
					(yyval.node) = (PGNode *) (yyvsp[0].vsetstmt);
				}
#line 34161 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1655: /* VariableResetStmt: RESET SESSION reset_rest  */
#line 13 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                {
					(yyvsp[0].vsetstmt)->scope = VAR_SET_SCOPE_SESSION;
					(yyval.node) = (PGNode *) (yyvsp[0].vsetstmt);
				}
#line 34170 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1656: /* VariableResetStmt: RESET GLOBAL reset_rest  */
#line 18 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                {
					(yyvsp[0].vsetstmt)->scope = VAR_SET_SCOPE_GLOBAL;
					(yyval.node) = (PGNode *) (yyvsp[0].vsetstmt);
				}
#line 34179 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1657: /* generic_reset: var_name  */
#line 27 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_RESET;
					n->name = (yyvsp[0].str);
					(yyval.vsetstmt) = n;
				}
#line 34190 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1658: /* generic_reset: ALL  */
#line 34 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_RESET_ALL;
					(yyval.vsetstmt) = n;
				}
#line 34200 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1659: /* reset_rest: generic_reset  */
#line 43 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                                                                        { (yyval.vsetstmt) = (yyvsp[0].vsetstmt); }
#line 34206 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1660: /* reset_rest: TIME ZONE  */
#line 45 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_RESET;
					n->name = (char*) "timezone";
					(yyval.vsetstmt) = n;
				}
#line 34217 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1661: /* reset_rest: TRANSACTION ISOLATION LEVEL  */
#line 52 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_RESET;
					n->name = (char*) "transaction_isolation";
					(yyval.vsetstmt) = n;
				}
#line 34228 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1662: /* VariableShowStmt: show_or_describe SelectStmt  */
#line 3 "third_party/libpg_query/grammar/statements/variable_show.y"
                                                    {
				PGVariableShowSelectStmt *n = makeNode(PGVariableShowSelectStmt);
				n->stmt = (yyvsp[0].node);
				n->name = (char*) "select";
				n->is_summary = 0;
				(yyval.node) = (PGNode *) n;
			}
#line 34240 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1663: /* VariableShowStmt: SUMMARIZE SelectStmt  */
#line 10 "third_party/libpg_query/grammar/statements/variable_show.y"
                                        {
				PGVariableShowSelectStmt *n = makeNode(PGVariableShowSelectStmt);
				n->stmt = (yyvsp[0].node);
				n->name = (char*) "select";
				n->is_summary = 1;
				(yyval.node) = (PGNode *) n;
			}
#line 34252 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1664: /* VariableShowStmt: SUMMARIZE table_id  */
#line 18 "third_party/libpg_query/grammar/statements/variable_show.y"
                        {
				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
				n->name = (yyvsp[0].str);
				n->is_summary = 1;
				(yyval.node) = (PGNode *) n;
			}
#line 34263 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1665: /* VariableShowStmt: show_or_describe table_id  */
#line 25 "third_party/libpg_query/grammar/statements/variable_show.y"
                        {
				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
				n->name = (yyvsp[0].str);
				n->is_summary = 0;
				(yyval.node) = (PGNode *) n;
			}
#line 34274 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1666: /* VariableShowStmt: show_or_describe TIME ZONE  */
#line 32 "third_party/libpg_query/grammar/statements/variable_show.y"
                        {
				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
				n->name = (char*) "timezone";
				n->is_summary = 0;
				(yyval.node) = (PGNode *) n;
			}
#line 34285 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1667: /* VariableShowStmt: show_or_describe TRANSACTION ISOLATION LEVEL  */
#line 39 "third_party/libpg_query/grammar/statements/variable_show.y"
                        {
				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
				n->name = (char*) "transaction_isolation";
				n->is_summary = 0;
				(yyval.node) = (PGNode *) n;
			}
#line 34296 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1668: /* VariableShowStmt: show_or_describe ALL opt_tables  */
#line 46 "third_party/libpg_query/grammar/statements/variable_show.y"
                        {
				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
				n->name = (char*) "__show_tables_expanded";
				n->is_summary = 0;
				(yyval.node) = (PGNode *) n;
			}
#line 34307 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1669: /* VariableShowStmt: show_or_describe  */
#line 53 "third_party/libpg_query/grammar/statements/variable_show.y"
                        {
				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
				n->name = (char*) "__show_tables_expanded";
				n->is_summary = 0;
				(yyval.node) = (PGNode *) n;
			}
#line 34318 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1676: /* var_name: ColId  */
#line 67 "third_party/libpg_query/grammar/statements/variable_show.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 34324 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1677: /* var_name: var_name '.' ColId  */
#line 69 "third_party/libpg_query/grammar/statements/variable_show.y"
                                { (yyval.str) = psprintf("%s.%s", (yyvsp[-2].str), (yyvsp[0].str)); }
#line 34330 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1678: /* table_id: ColId  */
#line 72 "third_party/libpg_query/grammar/statements/variable_show.y"
                                                                                { (yyval.str) = psprintf("\"%s\"", (yyvsp[0].str)); }
#line 34336 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1679: /* table_id: table_id '.' ColId  */
#line 74 "third_party/libpg_query/grammar/statements/variable_show.y"
                                { (yyval.str) = psprintf("%s.\"%s\"", (yyvsp[-2].str), (yyvsp[0].str)); }
#line 34342 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1680: /* CallStmt: CALL_P func_application  */
#line 7 "third_party/libpg_query/grammar/statements/call.y"
                                {
					PGCallStmt *n = makeNode(PGCallStmt);
					n->func = (yyvsp[0].node);
					(yyval.node) = (PGNode *) n;
				}
#line 34352 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1681: /* ViewStmt: CREATE_P OptTemp VIEW qualified_name opt_column_list opt_reloptions AS SelectStmt opt_check_option  */
#line 10 "third_party/libpg_query/grammar/statements/view.y"
                                {
					PGViewStmt *n = makeNode(PGViewStmt);
					n->view = (yyvsp[-5].range);
					n->view->relpersistence = (yyvsp[-7].ival);
					n->aliases = (yyvsp[-4].list);
					n->query = (yyvsp[-1].node);
					n->onconflict = PG_ERROR_ON_CONFLICT;
					n->options = (yyvsp[-3].list);
					n->withCheckOption = (yyvsp[0].viewcheckoption);
					(yyval.node) = (PGNode *) n;
				}
#line 34368 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1682: /* ViewStmt: CREATE_P OptTemp VIEW IF_P NOT EXISTS qualified_name opt_column_list opt_reloptions AS SelectStmt opt_check_option  */
#line 23 "third_party/libpg_query/grammar/statements/view.y"
                                {
					PGViewStmt *n = makeNode(PGViewStmt);
					n->view = (yyvsp[-5].range);
					n->view->relpersistence = (yyvsp[-10].ival);
					n->aliases = (yyvsp[-4].list);
					n->query = (yyvsp[-1].node);
					n->onconflict = PG_IGNORE_ON_CONFLICT;
					n->options = (yyvsp[-3].list);
					n->withCheckOption = (yyvsp[0].viewcheckoption);
					(yyval.node) = (PGNode *) n;
				}
#line 34384 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1683: /* ViewStmt: CREATE_P OR REPLACE OptTemp VIEW qualified_name opt_column_list opt_reloptions AS SelectStmt opt_check_option  */
#line 36 "third_party/libpg_query/grammar/statements/view.y"
                                {
					PGViewStmt *n = makeNode(PGViewStmt);
					n->view = (yyvsp[-5].range);
					n->view->relpersistence = (yyvsp[-7].ival);
					n->aliases = (yyvsp[-4].list);
					n->query = (yyvsp[-1].node);
					n->onconflict = PG_REPLACE_ON_CONFLICT;
					n->options = (yyvsp[-3].list);
					n->withCheckOption = (yyvsp[0].viewcheckoption);
					(yyval.node) = (PGNode *) n;
				}
#line 34400 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1684: /* ViewStmt: CREATE_P OptTemp RECURSIVE VIEW qualified_name '(' columnList ')' opt_reloptions AS SelectStmt opt_check_option  */
#line 49 "third_party/libpg_query/grammar/statements/view.y"
                                {
					PGViewStmt *n = makeNode(PGViewStmt);
					n->view = (yyvsp[-7].range);
					n->view->relpersistence = (yyvsp[-10].ival);
					n->aliases = (yyvsp[-5].list);
					n->query = makeRecursiveViewSelect(n->view->relname, n->aliases, (yyvsp[-1].node));
					n->onconflict = PG_ERROR_ON_CONFLICT;
					n->options = (yyvsp[-3].list);
					n->withCheckOption = (yyvsp[0].viewcheckoption);
					if (n->withCheckOption != PG_NO_CHECK_OPTION)
						ereport(ERROR,
								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
								 errmsg("WITH CHECK OPTION not supported on recursive views"),
								 parser_errposition((yylsp[0]))));
					(yyval.node) = (PGNode *) n;
				}
#line 34421 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1685: /* ViewStmt: CREATE_P OR REPLACE OptTemp RECURSIVE VIEW qualified_name '(' columnList ')' opt_reloptions AS SelectStmt opt_check_option  */
#line 67 "third_party/libpg_query/grammar/statements/view.y"
                                {
					PGViewStmt *n = makeNode(PGViewStmt);
					n->view = (yyvsp[-7].range);
					n->view->relpersistence = (yyvsp[-10].ival);
					n->aliases = (yyvsp[-5].list);
					n->query = makeRecursiveViewSelect(n->view->relname, n->aliases, (yyvsp[-1].node));
					n->onconflict = PG_REPLACE_ON_CONFLICT;
					n->options = (yyvsp[-3].list);
					n->withCheckOption = (yyvsp[0].viewcheckoption);
					if (n->withCheckOption != PG_NO_CHECK_OPTION)
						ereport(ERROR,
								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
								 errmsg("WITH CHECK OPTION not supported on recursive views"),
								 parser_errposition((yylsp[0]))));
					(yyval.node) = (PGNode *) n;
				}
#line 34442 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1686: /* opt_check_option: WITH CHECK_P OPTION  */
#line 87 "third_party/libpg_query/grammar/statements/view.y"
                                                                { (yyval.viewcheckoption) = CASCADED_CHECK_OPTION; }
#line 34448 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1687: /* opt_check_option: WITH CASCADED CHECK_P OPTION  */
#line 88 "third_party/libpg_query/grammar/statements/view.y"
                                                { (yyval.viewcheckoption) = CASCADED_CHECK_OPTION; }
#line 34454 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1688: /* opt_check_option: WITH LOCAL CHECK_P OPTION  */
#line 89 "third_party/libpg_query/grammar/statements/view.y"
                                                        { (yyval.viewcheckoption) = PG_LOCAL_CHECK_OPTION; }
#line 34460 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1689: /* opt_check_option: %empty  */
#line 90 "third_party/libpg_query/grammar/statements/view.y"
                                                                { (yyval.viewcheckoption) = PG_NO_CHECK_OPTION; }
#line 34466 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1690: /* CreateAsStmt: CREATE_P OptTemp TABLE create_as_target AS SelectStmt opt_with_data  */
#line 12 "third_party/libpg_query/grammar/statements/create_as.y"
                                {
					PGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);
					ctas->query = (yyvsp[-1].node);
					ctas->into = (yyvsp[-3].into);
					ctas->relkind = PG_OBJECT_TABLE;
					ctas->is_select_into = false;
					ctas->onconflict = PG_ERROR_ON_CONFLICT;
					/* cram additional flags into the PGIntoClause */
					(yyvsp[-3].into)->rel->relpersistence = (yyvsp[-5].ival);
					(yyvsp[-3].into)->skipData = !((yyvsp[0].boolean));
					(yyval.node) = (PGNode *) ctas;
				}
#line 34483 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1691: /* CreateAsStmt: CREATE_P OptTemp TABLE IF_P NOT EXISTS create_as_target AS SelectStmt opt_with_data  */
#line 25 "third_party/libpg_query/grammar/statements/create_as.y"
                                {
					PGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);
					ctas->query = (yyvsp[-1].node);
					ctas->into = (yyvsp[-3].into);
					ctas->relkind = PG_OBJECT_TABLE;
					ctas->is_select_into = false;
					ctas->onconflict = PG_IGNORE_ON_CONFLICT;
					/* cram additional flags into the PGIntoClause */
					(yyvsp[-3].into)->rel->relpersistence = (yyvsp[-8].ival);
					(yyvsp[-3].into)->skipData = !((yyvsp[0].boolean));
					(yyval.node) = (PGNode *) ctas;
				}
#line 34500 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1692: /* CreateAsStmt: CREATE_P OR REPLACE OptTemp TABLE create_as_target AS SelectStmt opt_with_data  */
#line 38 "third_party/libpg_query/grammar/statements/create_as.y"
                                {
					PGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);
					ctas->query = (yyvsp[-1].node);
					ctas->into = (yyvsp[-3].into);
					ctas->relkind = PG_OBJECT_TABLE;
					ctas->is_select_into = false;
					ctas->onconflict = PG_REPLACE_ON_CONFLICT;
					/* cram additional flags into the PGIntoClause */
					(yyvsp[-3].into)->rel->relpersistence = (yyvsp[-5].ival);
					(yyvsp[-3].into)->skipData = !((yyvsp[0].boolean));
					(yyval.node) = (PGNode *) ctas;
				}
#line 34517 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1693: /* opt_with_data: WITH DATA_P  */
#line 54 "third_party/libpg_query/grammar/statements/create_as.y"
                                                                                                { (yyval.boolean) = true; }
#line 34523 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1694: /* opt_with_data: WITH NO DATA_P  */
#line 55 "third_party/libpg_query/grammar/statements/create_as.y"
                                                                                        { (yyval.boolean) = false; }
#line 34529 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1695: /* opt_with_data: %empty  */
#line 56 "third_party/libpg_query/grammar/statements/create_as.y"
                                                                                                { (yyval.boolean) = true; }
#line 34535 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1696: /* create_as_target: qualified_name opt_column_list OptWith OnCommitOption  */
#line 62 "third_party/libpg_query/grammar/statements/create_as.y"
                                {
					(yyval.into) = makeNode(PGIntoClause);
					(yyval.into)->rel = (yyvsp[-3].range);
					(yyval.into)->colNames = (yyvsp[-2].list);
					(yyval.into)->options = (yyvsp[-1].list);
					(yyval.into)->onCommit = (yyvsp[0].oncommit);
					(yyval.into)->viewQuery = NULL;
					(yyval.into)->skipData = false;		/* might get changed later */
				}
#line 34549 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;


#line 34553 "third_party/libpg_query/grammar/grammar_out.cpp"

      default: break;
    }
  /* User semantic actions sometimes alter yychar, and that requires
     that yytoken be updated with the new translation.  We take the
     approach of translating immediately before every use of yytoken.
     One alternative is translating here after every semantic action,
     but that translation would be missed if the semantic action invokes
     YYABORT, YYACCEPT, or YYERROR immediately after altering yychar or
     if it invokes YYBACKUP.  In the case of YYABORT or YYACCEPT, an
     incorrect destructor might then be invoked immediately.  In the
     case of YYERROR or YYBACKUP, subsequent parser actions might lead
     to an incorrect destructor call or verbose syntax error message
     before the lookahead is translated.  */
  YY_SYMBOL_PRINT ("-> $$ =", YY_CAST (yysymbol_kind_t, yyr1[yyn]), &yyval, &yyloc);

  YYPOPSTACK (yylen);
  yylen = 0;

  *++yyvsp = yyval;
  *++yylsp = yyloc;

  /* Now 'shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */
  {
    const int yylhs = yyr1[yyn] - YYNTOKENS;
    const int yyi = yypgoto[yylhs] + *yyssp;
    yystate = (0 <= yyi && yyi <= YYLAST && yycheck[yyi] == *yyssp
               ? yytable[yyi]
               : yydefgoto[yylhs]);
  }

  goto yynewstate;


/*--------------------------------------.
| yyerrlab -- here on detecting error.  |
`--------------------------------------*/
yyerrlab:
  /* Make sure we have latest lookahead translation.  See comments at
     user semantic actions for why this is necessary.  */
  yytoken = yychar == YYEMPTY ? YYSYMBOL_YYEMPTY : YYTRANSLATE (yychar);
  /* If not already recovering from an error, report this error.  */
  if (!yyerrstatus)
    {
      ++yynerrs;
      yyerror (&yylloc, yyscanner, YY_("syntax error"));
    }

  yyerror_range[1] = yylloc;
  if (yyerrstatus == 3)
    {
      /* If just tried and failed to reuse lookahead token after an
         error, discard it.  */

      if (yychar <= YYEOF)
        {
          /* Return failure if at end of input.  */
          if (yychar == YYEOF)
            YYABORT;
        }
      else
        {
          yydestruct ("Error: discarding",
                      yytoken, &yylval, &yylloc, yyscanner);
          yychar = YYEMPTY;
        }
    }

  /* Else will try to reuse lookahead token after shifting the error
     token.  */
  goto yyerrlab1;


/*---------------------------------------------------.
| yyerrorlab -- error raised explicitly by YYERROR.  |
`---------------------------------------------------*/
yyerrorlab:
  /* Pacify compilers when the user code never invokes YYERROR and the
     label yyerrorlab therefore never appears in user code.  */
  if (0)
    YYERROR;
  ++yynerrs;

  /* Do not reclaim the symbols of the rule whose action triggered
     this YYERROR.  */
  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);
  yystate = *yyssp;
  goto yyerrlab1;


/*-------------------------------------------------------------.
| yyerrlab1 -- common code for both syntax error and YYERROR.  |
`-------------------------------------------------------------*/
yyerrlab1:
  yyerrstatus = 3;      /* Each real token shifted decrements this.  */

  /* Pop stack until we find a state that shifts the error token.  */
  for (;;)
    {
      yyn = yypact[yystate];
      if (!yypact_value_is_default (yyn))
        {
          yyn += YYSYMBOL_YYerror;
          if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYSYMBOL_YYerror)
            {
              yyn = yytable[yyn];
              if (0 < yyn)
                break;
            }
        }

      /* Pop the current state because it cannot handle the error token.  */
      if (yyssp == yyss)
        YYABORT;

      yyerror_range[1] = *yylsp;
      yydestruct ("Error: popping",
                  YY_ACCESSING_SYMBOL (yystate), yyvsp, yylsp, yyscanner);
      YYPOPSTACK (1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
    }

  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  *++yyvsp = yylval;
  YY_IGNORE_MAYBE_UNINITIALIZED_END

  yyerror_range[2] = yylloc;
  ++yylsp;
  YYLLOC_DEFAULT (*yylsp, yyerror_range, 2);

  /* Shift the error token.  */
  YY_SYMBOL_PRINT ("Shifting", YY_ACCESSING_SYMBOL (yyn), yyvsp, yylsp);

  yystate = yyn;
  goto yynewstate;


/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/
yyacceptlab:
  yyresult = 0;
  goto yyreturnlab;


/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/
yyabortlab:
  yyresult = 1;
  goto yyreturnlab;


/*-----------------------------------------------------------.
| yyexhaustedlab -- YYNOMEM (memory exhaustion) comes here.  |
`-----------------------------------------------------------*/
yyexhaustedlab:
  yyerror (&yylloc, yyscanner, YY_("memory exhausted"));
  yyresult = 2;
  goto yyreturnlab;


/*----------------------------------------------------------.
| yyreturnlab -- parsing is finished, clean up and return.  |
`----------------------------------------------------------*/
yyreturnlab:
  if (yychar != YYEMPTY)
    {
      /* Make sure we have latest lookahead translation.  See comments at
         user semantic actions for why this is necessary.  */
      yytoken = YYTRANSLATE (yychar);
      yydestruct ("Cleanup: discarding lookahead",
                  yytoken, &yylval, &yylloc, yyscanner);
    }
  /* Do not reclaim the symbols of the rule whose action triggered
     this YYABORT or YYACCEPT.  */
  YYPOPSTACK (yylen);
  YY_STACK_PRINT (yyss, yyssp);
  while (yyssp != yyss)
    {
      yydestruct ("Cleanup: popping",
                  YY_ACCESSING_SYMBOL (+*yyssp), yyvsp, yylsp, yyscanner);
      YYPOPSTACK (1);
    }
#ifndef yyoverflow
  if (yyss != yyssa)
    YYSTACK_FREE (yyss);
#endif

  return yyresult;
}

#line 85 "third_party/libpg_query/grammar/statements/create_as.y"


#line 1 "third_party/libpg_query/grammar/grammar.cpp"
/*
 * The signature of this function is required by bison.  However, we
 * ignore the passed yylloc and instead use the last token position
 * available from the scanner.
 */
static void
base_yyerror(YYLTYPE *yylloc, core_yyscan_t yyscanner, const char *msg)
{
	parser_yyerror(msg);
}

static PGRawStmt *
makeRawStmt(PGNode *stmt, int stmt_location)
{
	PGRawStmt    *rs = makeNode(PGRawStmt);

	rs->stmt = stmt;
	rs->stmt_location = stmt_location;
	rs->stmt_len = 0;			/* might get changed later */
	return rs;
}

/* Adjust a PGRawStmt to reflect that it doesn't run to the end of the string */
static void
updateRawStmtEnd(PGRawStmt *rs, int end_location)
{
	/*
	 * If we already set the length, don't change it.  This is for situations
	 * like "select foo ;; select bar" where the same statement will be last
	 * in the string for more than one semicolon.
	 */
	if (rs->stmt_len > 0)
		return;

	/* OK, update length of PGRawStmt */
	rs->stmt_len = end_location - rs->stmt_location;
}

static PGNode *
makeColumnRef(char *colname, PGList *indirection,
			  int location, core_yyscan_t yyscanner)
{
	/*
	 * Generate a PGColumnRef node, with an PGAIndirection node added if there
	 * is any subscripting in the specified indirection list.  However,
	 * any field selection at the start of the indirection list must be
	 * transposed into the "fields" part of the PGColumnRef node.
	 */
	PGColumnRef  *c = makeNode(PGColumnRef);
	int		nfields = 0;
	PGListCell *l;

	c->location = location;
	foreach(l, indirection)
	{
		if (IsA(lfirst(l), PGAIndices))
		{
			PGAIndirection *i = makeNode(PGAIndirection);

			if (nfields == 0)
			{
				/* easy case - all indirection goes to PGAIndirection */
				c->fields = list_make1(makeString(colname));
				i->indirection = check_indirection(indirection, yyscanner);
			}
			else
			{
				/* got to split the list in two */
				i->indirection = check_indirection(list_copy_tail(indirection,
																  nfields),
												   yyscanner);
				indirection = list_truncate(indirection, nfields);
				c->fields = lcons(makeString(colname), indirection);
			}
			i->arg = (PGNode *) c;
			return (PGNode *) i;
		}
		else if (IsA(lfirst(l), PGAStar))
		{
			/* We only allow '*' at the end of a PGColumnRef */
			if (lnext(l) != NULL)
				parser_yyerror("improper use of \"*\"");
		}
		nfields++;
	}
	/* No subscripting, so all indirection gets added to field list */
	c->fields = lcons(makeString(colname), indirection);
	return (PGNode *) c;
}

static PGNode *
makeTypeCast(PGNode *arg, PGTypeName *tpname, int trycast, int location)
{
	PGTypeCast *n = makeNode(PGTypeCast);
	n->arg = arg;
	n->typeName = tpname;
	n->tryCast = trycast;
	n->location = location;
	return (PGNode *) n;
}

static PGNode *
makeStringConst(char *str, int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGString;
	n->val.val.str = str;
	n->location = location;

	return (PGNode *)n;
}

static PGNode *
makeStringConstCast(char *str, int location, PGTypeName *tpname)
{
	PGNode *s = makeStringConst(str, location);

	return makeTypeCast(s, tpname, 0, -1);
}

static PGNode *
makeIntervalNode(char *str, int location, PGList *typmods) {
	PGIntervalConstant *n = makeNode(PGIntervalConstant);

	n->val_type = T_PGString;
	n->sval = str;
	n->location = location;
	n->typmods = typmods;

	return (PGNode *)n;

}

static PGNode *
makeIntervalNode(int val, int location, PGList *typmods) {
	PGIntervalConstant *n = makeNode(PGIntervalConstant);

	n->val_type = T_PGInteger;
	n->ival = val;
	n->location = location;
	n->typmods = typmods;

	return (PGNode *)n;
}

static PGNode *
makeIntervalNode(PGNode *arg, int location, PGList *typmods) {
	PGIntervalConstant *n = makeNode(PGIntervalConstant);

	n->val_type = T_PGAExpr;
	n->eval = arg;
	n->location = location;
	n->typmods = typmods;

	return (PGNode *)n;
}

static PGNode *
makeSampleSize(PGValue *sample_size, bool is_percentage) {
	PGSampleSize *n = makeNode(PGSampleSize);

	n->sample_size = *sample_size;
	n->is_percentage = is_percentage;

	return (PGNode *)n;
}

static PGNode *
makeSampleOptions(PGNode *sample_size, char *method, int *seed, int location) {
	PGSampleOptions *n = makeNode(PGSampleOptions);

	n->sample_size = sample_size;
	n->method = method;
	if (seed) {
		n->has_seed = true;
		n->seed = *seed;
	}
	n->location = location;

	return (PGNode *)n;
}

/* makeLimitPercent()
 * Make limit percent node
 */
static PGNode *
makeLimitPercent(PGNode *limit_percent) {
	PGLimitPercent *n = makeNode(PGLimitPercent);

	n->limit_percent = limit_percent;

	return (PGNode *)n;
}

static PGNode *
makeIntConst(int val, int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGInteger;
	n->val.val.ival = val;
	n->location = location;

	return (PGNode *)n;
}

static PGNode *
makeFloatConst(char *str, int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGFloat;
	n->val.val.str = str;
	n->location = location;

	return (PGNode *)n;
}

static PGNode *
makeBitStringConst(char *str, int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGBitString;
	n->val.val.str = str;
	n->location = location;

	return (PGNode *)n;
}

static PGNode *
makeNullAConst(int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGNull;
	n->location = location;

	return (PGNode *)n;
}

static PGNode *
makeAConst(PGValue *v, int location)
{
	PGNode *n;

	switch (v->type)
	{
		case T_PGFloat:
			n = makeFloatConst(v->val.str, location);
			break;

		case T_PGInteger:
			n = makeIntConst(v->val.ival, location);
			break;

		case T_PGString:
		default:
			n = makeStringConst(v->val.str, location);
			break;
	}

	return n;
}

/* makeBoolAConst()
 * Create an PGAConst string node and put it inside a boolean cast.
 */
static PGNode *
makeBoolAConst(bool state, int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGString;
	n->val.val.str = (state ? (char*) "t" : (char*) "f");
	n->location = location;

	return makeTypeCast((PGNode *)n, SystemTypeName("bool"), 0, -1);
}

/* check_qualified_name --- check the result of qualified_name production
 *
 * It's easiest to let the grammar production for qualified_name allow
 * subscripts and '*', which we then must reject here.
 */
static void
check_qualified_name(PGList *names, core_yyscan_t yyscanner)
{
	PGListCell   *i;

	foreach(i, names)
	{
		if (!IsA(lfirst(i), PGString))
			parser_yyerror("syntax error");
	}
}

/* check_func_name --- check the result of func_name production
 *
 * It's easiest to let the grammar production for func_name allow subscripts
 * and '*', which we then must reject here.
 */
static PGList *
check_func_name(PGList *names, core_yyscan_t yyscanner)
{
	PGListCell   *i;

	foreach(i, names)
	{
		if (!IsA(lfirst(i), PGString))
			parser_yyerror("syntax error");
	}
	return names;
}

/* check_indirection --- check the result of indirection production
 *
 * We only allow '*' at the end of the list, but it's hard to enforce that
 * in the grammar, so do it here.
 */
static PGList *
check_indirection(PGList *indirection, core_yyscan_t yyscanner)
{
	PGListCell *l;

	foreach(l, indirection)
	{
		if (IsA(lfirst(l), PGAStar))
		{
			if (lnext(l) != NULL)
				parser_yyerror("improper use of \"*\"");
		}
	}
	return indirection;
}

/* makeParamRef
 * Creates a new PGParamRef node
 */
static PGNode* makeParamRef(int number, int location)
{
	PGParamRef *p = makeNode(PGParamRef);
	p->number = number;
	p->location = location;
	p->name = NULL;
	return (PGNode *) p;
}

/* makeNamedParamRef
 * Creates a new PGParamRef node
 */
static PGNode* makeNamedParamRef(char *name, int location)
{
	PGParamRef *p = (PGParamRef *)makeParamRef(0, location);
	p->name = name;
	return (PGNode *) p;
}


/* insertSelectOptions()
 * Insert ORDER BY, etc into an already-constructed SelectStmt.
 *
 * This routine is just to avoid duplicating code in PGSelectStmt productions.
 */
static void
insertSelectOptions(PGSelectStmt *stmt,
					PGList *sortClause, PGList *lockingClause,
					PGNode *limitOffset, PGNode *limitCount,
					PGWithClause *withClause,
					core_yyscan_t yyscanner)
{
	if (stmt->type != T_PGSelectStmt) {
		ereport(ERROR,
				(errcode(PG_ERRCODE_SYNTAX_ERROR),
						errmsg("DESCRIBE/SHOW/SUMMARIZE with CTE/ORDER BY/... not allowed - wrap the statement in a subquery instead"),
						parser_errposition(exprLocation((PGNode *) stmt))));
	}
	Assert(IsA(stmt, PGSelectStmt));

	/*
	 * Tests here are to reject constructs like
	 *	(SELECT foo ORDER BY bar) ORDER BY baz
	 */
	if (sortClause)
	{
		if (stmt->sortClause)
			ereport(ERROR,
					(errcode(PG_ERRCODE_SYNTAX_ERROR),
					 errmsg("multiple ORDER BY clauses not allowed"),
					 parser_errposition(exprLocation((PGNode *) sortClause))));
		stmt->sortClause = sortClause;
	}
	/* We can handle multiple locking clauses, though */
	stmt->lockingClause = list_concat(stmt->lockingClause, lockingClause);
	if (limitOffset)
	{
		if (stmt->limitOffset)
			ereport(ERROR,
					(errcode(PG_ERRCODE_SYNTAX_ERROR),
					 errmsg("multiple OFFSET clauses not allowed"),
					 parser_errposition(exprLocation(limitOffset))));
		stmt->limitOffset = limitOffset;
	}
	if (limitCount)
	{
		if (stmt->limitCount)
			ereport(ERROR,
					(errcode(PG_ERRCODE_SYNTAX_ERROR),
					 errmsg("multiple LIMIT clauses not allowed"),
					 parser_errposition(exprLocation(limitCount))));
		stmt->limitCount = limitCount;
	}
	if (withClause)
	{
		if (stmt->withClause)
			ereport(ERROR,
					(errcode(PG_ERRCODE_SYNTAX_ERROR),
					 errmsg("multiple WITH clauses not allowed"),
					 parser_errposition(exprLocation((PGNode *) withClause))));
		stmt->withClause = withClause;
	}
}

static PGNode *
makeSetOp(PGSetOperation op, bool all, PGNode *larg, PGNode *rarg)
{
	PGSelectStmt *n = makeNode(PGSelectStmt);

	n->op = op;
	n->all = all;
	n->larg = (PGSelectStmt *) larg;
	n->rarg = (PGSelectStmt *) rarg;
	return (PGNode *) n;
}

/* SystemFuncName()
 * Build a properly-qualified reference to a built-in function.
 */
PGList *
SystemFuncName(const char *name)
{
	return list_make2(makeString(DEFAULT_SCHEMA), makeString(name));
}

/* SystemTypeName()
 * Build a properly-qualified reference to a built-in type.
 *
 * typmod is defaulted, but may be changed afterwards by caller.
 * Likewise for the location.
 */
PGTypeName *
SystemTypeName(const char *name)
{
	return makeTypeNameFromNameList(list_make1(makeString(name)));
}

/* doNegate()
 * Handle negation of a numeric constant.
 *
 * Formerly, we did this here because the optimizer couldn't cope with
 * indexquals that looked like "var = -4" --- it wants "var = const"
 * and a unary minus operator applied to a constant didn't qualify.
 * As of Postgres 7.0, that problem doesn't exist anymore because there
 * is a constant-subexpression simplifier in the optimizer.  However,
 * there's still a good reason for doing this here, which is that we can
 * postpone committing to a particular internal representation for simple
 * negative constants.	It's better to leave "-123.456" in string form
 * until we know what the desired type is.
 */
static PGNode *
doNegate(PGNode *n, int location)
{
	if (IsA(n, PGAConst))
	{
		PGAConst *con = (PGAConst *)n;

		/* report the constant's location as that of the '-' sign */
		con->location = location;

		if (con->val.type == T_PGInteger)
		{
			con->val.val.ival = -con->val.val.ival;
			return n;
		}
		if (con->val.type == T_PGFloat)
		{
			doNegateFloat(&con->val);
			return n;
		}
	}

	return (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "-", NULL, n, location);
}

static void
doNegateFloat(PGValue *v)
{
	char   *oldval = v->val.str;

	Assert(IsA(v, PGFloat));
	if (*oldval == '+')
		oldval++;
	if (*oldval == '-')
		v->val.str = oldval+1;	/* just strip the '-' */
	else
		v->val.str = psprintf("-%s", oldval);
}

static PGNode *
makeAndExpr(PGNode *lexpr, PGNode *rexpr, int location)
{
	PGNode	   *lexp = lexpr;

	/* Look through AEXPR_PAREN nodes so they don't affect flattening */
	while (IsA(lexp, PGAExpr) &&
		   ((PGAExpr *) lexp)->kind == AEXPR_PAREN)
		lexp = ((PGAExpr *) lexp)->lexpr;
	/* Flatten "a AND b AND c ..." to a single PGBoolExpr on sight */
	if (IsA(lexp, PGBoolExpr))
	{
		PGBoolExpr *blexpr = (PGBoolExpr *) lexp;

		if (blexpr->boolop == PG_AND_EXPR)
		{
			blexpr->args = lappend(blexpr->args, rexpr);
			return (PGNode *) blexpr;
		}
	}
	return (PGNode *) makeBoolExpr(PG_AND_EXPR, list_make2(lexpr, rexpr), location);
}

static PGNode *
makeOrExpr(PGNode *lexpr, PGNode *rexpr, int location)
{
	PGNode	   *lexp = lexpr;

	/* Look through AEXPR_PAREN nodes so they don't affect flattening */
	while (IsA(lexp, PGAExpr) &&
		   ((PGAExpr *) lexp)->kind == AEXPR_PAREN)
		lexp = ((PGAExpr *) lexp)->lexpr;
	/* Flatten "a OR b OR c ..." to a single PGBoolExpr on sight */
	if (IsA(lexp, PGBoolExpr))
	{
		PGBoolExpr *blexpr = (PGBoolExpr *) lexp;

		if (blexpr->boolop == PG_OR_EXPR)
		{
			blexpr->args = lappend(blexpr->args, rexpr);
			return (PGNode *) blexpr;
		}
	}
	return (PGNode *) makeBoolExpr(PG_OR_EXPR, list_make2(lexpr, rexpr), location);
}

static PGNode *
makeNotExpr(PGNode *expr, int location)
{
	return (PGNode *) makeBoolExpr(PG_NOT_EXPR, list_make1(expr), location);
}

/* Separate PGConstraint nodes from COLLATE clauses in a */
static void
SplitColQualList(PGList *qualList,
				 PGList **constraintList, PGCollateClause **collClause,
				 core_yyscan_t yyscanner)
{
	PGListCell   *cell;
	PGListCell   *prev;
	PGListCell   *next;

	*collClause = NULL;
	prev = NULL;
	for (cell = list_head(qualList); cell; cell = next)
	{
		PGNode   *n = (PGNode *) lfirst(cell);

		next = lnext(cell);
		if (IsA(n, PGConstraint))
		{
			/* keep it in list */
			prev = cell;
			continue;
		}
		if (IsA(n, PGCollateClause))
		{
			PGCollateClause *c = (PGCollateClause *) n;

			if (*collClause)
				ereport(ERROR,
						(errcode(PG_ERRCODE_SYNTAX_ERROR),
						 errmsg("multiple COLLATE clauses not allowed"),
						 parser_errposition(c->location)));
			*collClause = c;
		}
		else
			elog(ERROR, "unexpected node type %d", (int) n->type);
		/* remove non-Constraint nodes from qualList */
		qualList = list_delete_cell(qualList, cell, prev);
	}
	*constraintList = qualList;
}

/*
 * Process result of ConstraintAttributeSpec, and set appropriate bool flags
 * in the output command node.  Pass NULL for any flags the particular
 * command doesn't support.
 */
static void
processCASbits(int cas_bits, int location, const char *constrType,
			   bool *deferrable, bool *initdeferred, bool *not_valid,
			   bool *no_inherit, core_yyscan_t yyscanner)
{
	/* defaults */
	if (deferrable)
		*deferrable = false;
	if (initdeferred)
		*initdeferred = false;
	if (not_valid)
		*not_valid = false;

	if (cas_bits & (CAS_DEFERRABLE | CAS_INITIALLY_DEFERRED))
	{
		if (deferrable)
			*deferrable = true;
		else
			ereport(ERROR,
					(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
					 /* translator: %s is CHECK, UNIQUE, or similar */
					 errmsg("%s constraints cannot be marked DEFERRABLE",
							constrType),
					 parser_errposition(location)));
	}

	if (cas_bits & CAS_INITIALLY_DEFERRED)
	{
		if (initdeferred)
			*initdeferred = true;
		else
			ereport(ERROR,
					(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
					 /* translator: %s is CHECK, UNIQUE, or similar */
					 errmsg("%s constraints cannot be marked DEFERRABLE",
							constrType),
					 parser_errposition(location)));
	}

	if (cas_bits & CAS_NOT_VALID)
	{
		if (not_valid)
			*not_valid = true;
		else
			ereport(ERROR,
					(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
					 /* translator: %s is CHECK, UNIQUE, or similar */
					 errmsg("%s constraints cannot be marked NOT VALID",
							constrType),
					 parser_errposition(location)));
	}

	if (cas_bits & CAS_NO_INHERIT)
	{
		if (no_inherit)
			*no_inherit = true;
		else
			ereport(ERROR,
					(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
					 /* translator: %s is CHECK, UNIQUE, or similar */
					 errmsg("%s constraints cannot be marked NO INHERIT",
							constrType),
					 parser_errposition(location)));
	}
}

/*----------
 * Recursive view transformation
 *
 * Convert
 *
 *     CREATE RECURSIVE VIEW relname (aliases) AS query
 *
 * to
 *
 *     CREATE VIEW relname (aliases) AS
 *         WITH RECURSIVE relname (aliases) AS (query)
 *         SELECT aliases FROM relname
 *
 * Actually, just the WITH ... part, which is then inserted into the original
 * view as the query.
 * ----------
 */
static PGNode *
makeRecursiveViewSelect(char *relname, PGList *aliases, PGNode *query)
{
	PGSelectStmt *s = makeNode(PGSelectStmt);
	PGWithClause *w = makeNode(PGWithClause);
	PGCommonTableExpr *cte = makeNode(PGCommonTableExpr);
	PGList	   *tl = NIL;
	PGListCell   *lc;

	/* create common table expression */
	cte->ctename = relname;
	cte->aliascolnames = aliases;
	cte->ctequery = query;
	cte->location = -1;

	/* create WITH clause and attach CTE */
	w->recursive = true;
	w->ctes = list_make1(cte);
	w->location = -1;

	/* create target list for the new SELECT from the alias list of the
	 * recursive view specification */
	foreach (lc, aliases)
	{
		PGResTarget *rt = makeNode(PGResTarget);

		rt->name = NULL;
		rt->indirection = NIL;
		rt->val = makeColumnRef(strVal(lfirst(lc)), NIL, -1, 0);
		rt->location = -1;

		tl = lappend(tl, rt);
	}

	/* create new SELECT combining WITH clause, target list, and fake FROM
	 * clause */
	s->withClause = w;
	s->targetList = tl;
	s->fromClause = list_make1(makeRangeVar(NULL, relname, -1));

	return (PGNode *) s;
}

/* parser_init()
 * Initialize to parse one query string
 */
void
parser_init(base_yy_extra_type *yyext)
{
	yyext->parsetree = NIL;		/* in case grammar forgets to set it */
}

#undef yyparse
#undef yylex
#undef yyerror
#undef yylval
#undef yychar
#undef yydebug
#undef yynerrs
#undef yylloc

} // namespace duckdb_libpgquery
