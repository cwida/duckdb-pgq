/* A Bison parser, made by GNU Bison 3.8.2.  */

/* Bison implementation for Yacc-like parsers in C

   Copyright (C) 1984, 1989-1990, 2000-2015, 2018-2021 Free Software Foundation,
   Inc.

   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <https://www.gnu.org/licenses/>.  */

/* As a special exception, you may create a larger work that contains
   part or all of the Bison parser skeleton and distribute that work
   under terms of your choice, so long as that work isn't itself a
   parser generator using the skeleton or a modified version thereof
   as a parser skeleton.  Alternatively, if you modify or redistribute
   the parser skeleton itself, you may (at your option) remove this
   special exception, which will cause the skeleton and the resulting
   Bison output files to be licensed under the GNU General Public
   License without this special exception.

   This special exception was added by the Free Software Foundation in
   version 2.2 of Bison.  */

/* C LALR(1) parser skeleton written by Richard Stallman, by
   simplifying the original so-called "semantic" parser.  */

/* DO NOT RELY ON FEATURES THAT ARE NOT DOCUMENTED in the manual,
   especially those whose name start with YY_ or yy_.  They are
   private implementation details that can be changed or removed.  */

/* All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.  */

/* Identify Bison output, and Bison version.  */
#define YYBISON 30802

/* Bison version string.  */
#define YYBISON_VERSION "3.8.2"

/* Skeleton name.  */
#define YYSKELETON_NAME "yacc.c"

/* Pure parsers.  */
#define YYPURE 1

/* Push parsers.  */
#define YYPUSH 0

/* Pull parsers.  */
#define YYPULL 1


/* Substitute the variable and function names.  */
#define yyparse         base_yyparse
#define yylex           base_yylex
#define yyerror         base_yyerror
#define yydebug         base_yydebug
#define yynerrs         base_yynerrs

/* First part of user prologue.  */
#line 1 "third_party/libpg_query/grammar/grammar.y.tmp"

#line 1 "third_party/libpg_query/grammar/grammar.hpp"
/*#define YYDEBUG 1*/
/*-------------------------------------------------------------------------
 *
 * gram.y
 *	  POSTGRESQL BISON rules/actions
 *
 * Portions Copyright (c) 1996-2017, PostgreSQL Global Development PGGroup
 * Portions Copyright (c) 1994, Regents of the University of California
 *
 *
 * IDENTIFICATION
 *	  src/backend/parser/gram.y
 *
 * HISTORY
 *	  AUTHOR			DATE			MAJOR EVENT
 *	  Andrew Yu			Sept, 1994		POSTQUEL to SQL conversion
 *	  Andrew Yu			Oct, 1994		lispy code conversion
 *
 * NOTES
 *	  CAPITALS are used to represent terminal symbols.
 *	  non-capitals are used to represent non-terminals.
 *
 *	  In general, nothing in this file should initiate database accesses
 *	  nor depend on changeable state (such as SET variables).  If you do
 *	  database accesses, your code will fail when we have aborted the
 *	  current transaction and are just parsing commands to find the next
 *	  ROLLBACK or COMMIT.  If you make use of SET variables, then you
 *	  will do the wrong thing in multi-query strings like this:
 *			SET constraint_exclusion TO off; SELECT * FROM foo;
 *	  because the entire string is parsed by gram.y before the SET gets
 *	  executed.  Anything that depends on the database or changeable state
 *	  should be handled during parse analysis so that it happens at the
 *	  right time not the wrong time.
 *
 * WARNINGS
 *	  If you use a list, make sure the datum is a node so that the printing
 *	  routines work.
 *
 *	  Sometimes we assign constants to makeStrings. Make sure we don't free
 *	  those.
 *
 *-------------------------------------------------------------------------
 */
#include "pg_functions.hpp"
#include <string.h>

#include <ctype.h>
#include <limits.h>

#include "nodes/makefuncs.hpp"
#include "nodes/nodeFuncs.hpp"
#include "parser/gramparse.hpp"
#include "parser/parser.hpp"
#include "utils/datetime.hpp"

namespace duckdb_libpgquery {
#define DEFAULT_SCHEMA "main"

/*
 * Location tracking support --- simpler than bison's default, since we only
 * want to track the start position not the end position of each nonterminal.
 */
#define YYLLOC_DEFAULT(Current, Rhs, N) \
	do { \
		if ((N) > 0) \
			(Current) = (Rhs)[1]; \
		else \
			(Current) = (-1); \
	} while (0)

/*
 * The above macro assigns -1 (unknown) as the parse location of any
 * nonterminal that was reduced from an empty rule, or whose leftmost
 * component was reduced from an empty rule.  This is problematic
 * for nonterminals defined like
 *		OptFooList: / * EMPTY * / { ... } | OptFooList Foo { ... } ;
 * because we'll set -1 as the location during the first reduction and then
 * copy it during each subsequent reduction, leaving us with -1 for the
 * location even when the list is not empty.  To fix that, do this in the
 * action for the nonempty rule(s):
 *		if (@$ < 0) @$ = @2;
 * (Although we have many nonterminals that follow this pattern, we only
 * bother with fixing @$ like this when the nonterminal's parse location
 * is actually referenced in some rule.)
 *
 * A cleaner answer would be to make YYLLOC_DEFAULT scan all the Rhs
 * locations until it's found one that's not -1.  Then we'd get a correct
 * location for any nonterminal that isn't entirely empty.  But this way
 * would add overhead to every rule reduction, and so far there's not been
 * a compelling reason to pay that overhead.
 */

/*
 * Bison doesn't allocate anything that needs to live across parser calls,
 * so we can easily have it use palloc instead of malloc.  This prevents
 * memory leaks if we error out during parsing.  Note this only works with
 * bison >= 2.0.  However, in bison 1.875 the default is to use alloca()
 * if possible, so there's not really much problem anyhow, at least if
 * you're building with gcc.
 */
#define YYMALLOC palloc
#define YYFREE   pfree
#define YYINITDEPTH 1000

/* yields an integer bitmask of these flags: */
#define CAS_NOT_DEFERRABLE			0x01
#define CAS_DEFERRABLE				0x02
#define CAS_INITIALLY_IMMEDIATE		0x04
#define CAS_INITIALLY_DEFERRED		0x08
#define CAS_NOT_VALID				0x10
#define CAS_NO_INHERIT				0x20


#define parser_yyerror(msg)  scanner_yyerror(msg, yyscanner)
#define parser_errposition(pos)  scanner_errposition(pos, yyscanner)

static void base_yyerror(YYLTYPE *yylloc, core_yyscan_t yyscanner,
						 const char *msg);
static PGRawStmt *makeRawStmt(PGNode *stmt, int stmt_location);
static void updateRawStmtEnd(PGRawStmt *rs, int end_location);
static PGNode *makeColumnRef(char *colname, PGList *indirection,
						   int location, core_yyscan_t yyscanner);
static PGNode *makeTypeCast(PGNode *arg, PGTypeName *tpname, int trycast, int location);
static PGNode *makeStringConst(char *str, int location);
static PGNode *makeStringConstCast(char *str, int location, PGTypeName *tpname);
static PGNode *makeIntervalNode(char *str, int location, PGList *typmods);
static PGNode *makeIntervalNode(int val, int location, PGList *typmods);
static PGNode *makeIntervalNode(PGNode *arg, int location, PGList *typmods);
static PGNode *makeSampleSize(PGValue *sample_size, bool is_percentage);
static PGNode *makeSampleOptions(PGNode *sample_size, char *method, int *seed, int location);
static PGNode *makeIntConst(int val, int location);
static PGNode *makeFloatConst(char *str, int location);
static PGNode *makeBitStringConst(char *str, int location);
static PGNode *makeNullAConst(int location);
static PGNode *makeAConst(PGValue *v, int location);
static PGNode *makeBoolAConst(bool state, int location);
static PGNode *makeParamRef(int number, int location);
static PGNode *makeNamedParamRef(char* name, int location);
static void check_qualified_name(PGList *names, core_yyscan_t yyscanner);
static PGList *check_func_name(PGList *names, core_yyscan_t yyscanner);
static PGList *check_indirection(PGList *indirection, core_yyscan_t yyscanner);
static void insertSelectOptions(PGSelectStmt *stmt,
								PGList *sortClause, PGList *lockingClause,
								PGNode *limitOffset, PGNode *limitCount,
								PGWithClause *withClause,
								core_yyscan_t yyscanner);
static PGNode *makeSetOp(PGSetOperation op, bool all, PGNode *larg, PGNode *rarg);
static PGNode *doNegate(PGNode *n, int location);
static void doNegateFloat(PGValue *v);
static PGNode *makeAndExpr(PGNode *lexpr, PGNode *rexpr, int location);
static PGNode *makeOrExpr(PGNode *lexpr, PGNode *rexpr, int location);
static PGNode *makeNotExpr(PGNode *expr, int location);
static void SplitColQualList(PGList *qualList,
							 PGList **constraintList, PGCollateClause **collClause,
							 core_yyscan_t yyscanner);
static void processCASbits(int cas_bits, int location, const char *constrType,
			   bool *deferrable, bool *initdeferred, bool *not_valid,
			   bool *no_inherit, core_yyscan_t yyscanner);
static PGNode *makeRecursiveViewSelect(char *relname, PGList *aliases, PGNode *query);
static PGNode *makeLimitPercent(PGNode *limit_percent);


#line 241 "third_party/libpg_query/grammar/grammar_out.cpp"

# ifndef YY_CAST
#  ifdef __cplusplus
#   define YY_CAST(Type, Val) static_cast<Type> (Val)
#   define YY_REINTERPRET_CAST(Type, Val) reinterpret_cast<Type> (Val)
#  else
#   define YY_CAST(Type, Val) ((Type) (Val))
#   define YY_REINTERPRET_CAST(Type, Val) ((Type) (Val))
#  endif
# endif
# ifndef YY_NULLPTR
#  if defined __cplusplus
#   if 201103L <= __cplusplus
#    define YY_NULLPTR nullptr
#   else
#    define YY_NULLPTR 0
#   endif
#  else
#   define YY_NULLPTR ((void*)0)
#  endif
# endif

#include "include/parser/gram.hpp"
/* Symbol kind.  */
enum yysymbol_kind_t
{
  YYSYMBOL_YYEMPTY = -2,
  YYSYMBOL_YYEOF = 0,                      /* "end of file"  */
  YYSYMBOL_YYerror = 1,                    /* error  */
  YYSYMBOL_YYUNDEF = 2,                    /* "invalid token"  */
  YYSYMBOL_IDENT = 3,                      /* IDENT  */
  YYSYMBOL_FCONST = 4,                     /* FCONST  */
  YYSYMBOL_SCONST = 5,                     /* SCONST  */
  YYSYMBOL_BCONST = 6,                     /* BCONST  */
  YYSYMBOL_XCONST = 7,                     /* XCONST  */
  YYSYMBOL_Op = 8,                         /* Op  */
  YYSYMBOL_ICONST = 9,                     /* ICONST  */
  YYSYMBOL_PARAM = 10,                     /* PARAM  */
  YYSYMBOL_TYPECAST = 11,                  /* TYPECAST  */
  YYSYMBOL_DOT_DOT = 12,                   /* DOT_DOT  */
  YYSYMBOL_COLON_EQUALS = 13,              /* COLON_EQUALS  */
  YYSYMBOL_EQUALS_GREATER = 14,            /* EQUALS_GREATER  */
  YYSYMBOL_INTEGER_DIVISION = 15,          /* INTEGER_DIVISION  */
  YYSYMBOL_POWER_OF = 16,                  /* POWER_OF  */
  YYSYMBOL_LAMBDA_ARROW = 17,              /* LAMBDA_ARROW  */
  YYSYMBOL_DOUBLE_ARROW = 18,              /* DOUBLE_ARROW  */
  YYSYMBOL_LESS_EQUALS = 19,               /* LESS_EQUALS  */
  YYSYMBOL_GREATER_EQUALS = 20,            /* GREATER_EQUALS  */
  YYSYMBOL_NOT_EQUALS = 21,                /* NOT_EQUALS  */
  YYSYMBOL_ABORT_P = 22,                   /* ABORT_P  */
  YYSYMBOL_ABSOLUTE_P = 23,                /* ABSOLUTE_P  */
  YYSYMBOL_ACCESS = 24,                    /* ACCESS  */
  YYSYMBOL_ACTION = 25,                    /* ACTION  */
  YYSYMBOL_ACYCLIC = 26,                   /* ACYCLIC  */
  YYSYMBOL_ADD_P = 27,                     /* ADD_P  */
  YYSYMBOL_ADMIN = 28,                     /* ADMIN  */
  YYSYMBOL_AFTER = 29,                     /* AFTER  */
  YYSYMBOL_AGGREGATE = 30,                 /* AGGREGATE  */
  YYSYMBOL_ALL = 31,                       /* ALL  */
  YYSYMBOL_ALSO = 32,                      /* ALSO  */
  YYSYMBOL_ALTER = 33,                     /* ALTER  */
  YYSYMBOL_ALWAYS = 34,                    /* ALWAYS  */
  YYSYMBOL_ANALYSE = 35,                   /* ANALYSE  */
  YYSYMBOL_ANALYZE = 36,                   /* ANALYZE  */
  YYSYMBOL_AND = 37,                       /* AND  */
  YYSYMBOL_ANTI = 38,                      /* ANTI  */
  YYSYMBOL_ANY = 39,                       /* ANY  */
  YYSYMBOL_ARE = 40,                       /* ARE  */
  YYSYMBOL_ARRAY = 41,                     /* ARRAY  */
  YYSYMBOL_AS = 42,                        /* AS  */
  YYSYMBOL_ASC_P = 43,                     /* ASC_P  */
  YYSYMBOL_ASOF = 44,                      /* ASOF  */
  YYSYMBOL_ASSERTION = 45,                 /* ASSERTION  */
  YYSYMBOL_ASSIGNMENT = 46,                /* ASSIGNMENT  */
  YYSYMBOL_ASYMMETRIC = 47,                /* ASYMMETRIC  */
  YYSYMBOL_AT = 48,                        /* AT  */
  YYSYMBOL_ATTACH = 49,                    /* ATTACH  */
  YYSYMBOL_ATTRIBUTE = 50,                 /* ATTRIBUTE  */
  YYSYMBOL_AUTHORIZATION = 51,             /* AUTHORIZATION  */
  YYSYMBOL_BACKWARD = 52,                  /* BACKWARD  */
  YYSYMBOL_BEFORE = 53,                    /* BEFORE  */
  YYSYMBOL_BEGIN_P = 54,                   /* BEGIN_P  */
  YYSYMBOL_BETWEEN = 55,                   /* BETWEEN  */
  YYSYMBOL_BIGINT = 56,                    /* BIGINT  */
  YYSYMBOL_BINARY = 57,                    /* BINARY  */
  YYSYMBOL_BIT = 58,                       /* BIT  */
  YYSYMBOL_BOOLEAN_P = 59,                 /* BOOLEAN_P  */
  YYSYMBOL_BOTH = 60,                      /* BOTH  */
  YYSYMBOL_BY = 61,                        /* BY  */
  YYSYMBOL_CACHE = 62,                     /* CACHE  */
  YYSYMBOL_CALL_P = 63,                    /* CALL_P  */
  YYSYMBOL_CALLED = 64,                    /* CALLED  */
  YYSYMBOL_CASCADE = 65,                   /* CASCADE  */
  YYSYMBOL_CASCADED = 66,                  /* CASCADED  */
  YYSYMBOL_CASE = 67,                      /* CASE  */
  YYSYMBOL_CAST = 68,                      /* CAST  */
  YYSYMBOL_CATALOG_P = 69,                 /* CATALOG_P  */
  YYSYMBOL_CHAIN = 70,                     /* CHAIN  */
  YYSYMBOL_CHAR_P = 71,                    /* CHAR_P  */
  YYSYMBOL_CHARACTER = 72,                 /* CHARACTER  */
  YYSYMBOL_CHARACTERISTICS = 73,           /* CHARACTERISTICS  */
  YYSYMBOL_CHECK_P = 74,                   /* CHECK_P  */
  YYSYMBOL_CHECKPOINT = 75,                /* CHECKPOINT  */
  YYSYMBOL_CLASS = 76,                     /* CLASS  */
  YYSYMBOL_CLOSE = 77,                     /* CLOSE  */
  YYSYMBOL_CLUSTER = 78,                   /* CLUSTER  */
  YYSYMBOL_COALESCE = 79,                  /* COALESCE  */
  YYSYMBOL_COLLATE = 80,                   /* COLLATE  */
  YYSYMBOL_COLLATION = 81,                 /* COLLATION  */
  YYSYMBOL_COLUMN = 82,                    /* COLUMN  */
  YYSYMBOL_COLUMNS = 83,                   /* COLUMNS  */
  YYSYMBOL_COMMENT = 84,                   /* COMMENT  */
  YYSYMBOL_COMMENTS = 85,                  /* COMMENTS  */
  YYSYMBOL_COMMIT = 86,                    /* COMMIT  */
  YYSYMBOL_COMMITTED = 87,                 /* COMMITTED  */
  YYSYMBOL_COMPRESSION = 88,               /* COMPRESSION  */
  YYSYMBOL_CONCURRENTLY = 89,              /* CONCURRENTLY  */
  YYSYMBOL_CONFIGURATION = 90,             /* CONFIGURATION  */
  YYSYMBOL_CONFLICT = 91,                  /* CONFLICT  */
  YYSYMBOL_CONNECTION = 92,                /* CONNECTION  */
  YYSYMBOL_CONSTRAINT = 93,                /* CONSTRAINT  */
  YYSYMBOL_CONSTRAINTS = 94,               /* CONSTRAINTS  */
  YYSYMBOL_CONTENT_P = 95,                 /* CONTENT_P  */
  YYSYMBOL_CONTINUE_P = 96,                /* CONTINUE_P  */
  YYSYMBOL_CONVERSION_P = 97,              /* CONVERSION_P  */
  YYSYMBOL_COPY = 98,                      /* COPY  */
  YYSYMBOL_COST = 99,                      /* COST  */
  YYSYMBOL_CREATE_P = 100,                 /* CREATE_P  */
  YYSYMBOL_CROSS = 101,                    /* CROSS  */
  YYSYMBOL_CSV = 102,                      /* CSV  */
  YYSYMBOL_CUBE = 103,                     /* CUBE  */
  YYSYMBOL_CURRENT_P = 104,                /* CURRENT_P  */
  YYSYMBOL_CURSOR = 105,                   /* CURSOR  */
  YYSYMBOL_CYCLE = 106,                    /* CYCLE  */
  YYSYMBOL_DATA_P = 107,                   /* DATA_P  */
  YYSYMBOL_DATABASE = 108,                 /* DATABASE  */
  YYSYMBOL_DAY_P = 109,                    /* DAY_P  */
  YYSYMBOL_DAYS_P = 110,                   /* DAYS_P  */
  YYSYMBOL_DEALLOCATE = 111,               /* DEALLOCATE  */
  YYSYMBOL_DEC = 112,                      /* DEC  */
  YYSYMBOL_DECIMAL_P = 113,                /* DECIMAL_P  */
  YYSYMBOL_DECLARE = 114,                  /* DECLARE  */
  YYSYMBOL_DEFAULT = 115,                  /* DEFAULT  */
  YYSYMBOL_DEFAULTS = 116,                 /* DEFAULTS  */
  YYSYMBOL_DEFERRABLE = 117,               /* DEFERRABLE  */
  YYSYMBOL_DEFERRED = 118,                 /* DEFERRED  */
  YYSYMBOL_DEFINER = 119,                  /* DEFINER  */
  YYSYMBOL_DELETE_P = 120,                 /* DELETE_P  */
  YYSYMBOL_DELIMITER = 121,                /* DELIMITER  */
  YYSYMBOL_DELIMITERS = 122,               /* DELIMITERS  */
  YYSYMBOL_DEPENDS = 123,                  /* DEPENDS  */
  YYSYMBOL_DESC_P = 124,                   /* DESC_P  */
  YYSYMBOL_DESCRIBE = 125,                 /* DESCRIBE  */
  YYSYMBOL_DESTINATION = 126,              /* DESTINATION  */
  YYSYMBOL_DETACH = 127,                   /* DETACH  */
  YYSYMBOL_DICTIONARY = 128,               /* DICTIONARY  */
  YYSYMBOL_DISABLE_P = 129,                /* DISABLE_P  */
  YYSYMBOL_DISCARD = 130,                  /* DISCARD  */
  YYSYMBOL_DISTINCT = 131,                 /* DISTINCT  */
  YYSYMBOL_DO = 132,                       /* DO  */
  YYSYMBOL_DOCUMENT_P = 133,               /* DOCUMENT_P  */
  YYSYMBOL_DOMAIN_P = 134,                 /* DOMAIN_P  */
  YYSYMBOL_DOUBLE_P = 135,                 /* DOUBLE_P  */
  YYSYMBOL_DROP = 136,                     /* DROP  */
  YYSYMBOL_EACH = 137,                     /* EACH  */
  YYSYMBOL_EDGE = 138,                     /* EDGE  */
  YYSYMBOL_ELEMENT_ID = 139,               /* ELEMENT_ID  */
  YYSYMBOL_ELSE = 140,                     /* ELSE  */
  YYSYMBOL_ENABLE_P = 141,                 /* ENABLE_P  */
  YYSYMBOL_ENCODING = 142,                 /* ENCODING  */
  YYSYMBOL_ENCRYPTED = 143,                /* ENCRYPTED  */
  YYSYMBOL_END_P = 144,                    /* END_P  */
  YYSYMBOL_ENUM_P = 145,                   /* ENUM_P  */
  YYSYMBOL_ESCAPE = 146,                   /* ESCAPE  */
  YYSYMBOL_EVENT = 147,                    /* EVENT  */
  YYSYMBOL_EXCEPT = 148,                   /* EXCEPT  */
  YYSYMBOL_EXCLUDE = 149,                  /* EXCLUDE  */
  YYSYMBOL_EXCLUDING = 150,                /* EXCLUDING  */
  YYSYMBOL_EXCLUSIVE = 151,                /* EXCLUSIVE  */
  YYSYMBOL_EXECUTE = 152,                  /* EXECUTE  */
  YYSYMBOL_EXISTS = 153,                   /* EXISTS  */
  YYSYMBOL_EXPLAIN = 154,                  /* EXPLAIN  */
  YYSYMBOL_EXPORT_P = 155,                 /* EXPORT_P  */
  YYSYMBOL_EXPORT_STATE = 156,             /* EXPORT_STATE  */
  YYSYMBOL_EXTENSION = 157,                /* EXTENSION  */
  YYSYMBOL_EXTERNAL = 158,                 /* EXTERNAL  */
  YYSYMBOL_EXTRACT = 159,                  /* EXTRACT  */
  YYSYMBOL_FALSE_P = 160,                  /* FALSE_P  */
  YYSYMBOL_FAMILY = 161,                   /* FAMILY  */
  YYSYMBOL_FETCH = 162,                    /* FETCH  */
  YYSYMBOL_FILTER = 163,                   /* FILTER  */
  YYSYMBOL_FIRST_P = 164,                  /* FIRST_P  */
  YYSYMBOL_FLOAT_P = 165,                  /* FLOAT_P  */
  YYSYMBOL_FOLLOWING = 166,                /* FOLLOWING  */
  YYSYMBOL_FOR = 167,                      /* FOR  */
  YYSYMBOL_FORCE = 168,                    /* FORCE  */
  YYSYMBOL_FOREIGN = 169,                  /* FOREIGN  */
  YYSYMBOL_FORWARD = 170,                  /* FORWARD  */
  YYSYMBOL_FREEZE = 171,                   /* FREEZE  */
  YYSYMBOL_FROM = 172,                     /* FROM  */
  YYSYMBOL_FULL = 173,                     /* FULL  */
  YYSYMBOL_FUNCTION = 174,                 /* FUNCTION  */
  YYSYMBOL_FUNCTIONS = 175,                /* FUNCTIONS  */
  YYSYMBOL_GENERATED = 176,                /* GENERATED  */
  YYSYMBOL_GLOB = 177,                     /* GLOB  */
  YYSYMBOL_GLOBAL = 178,                   /* GLOBAL  */
  YYSYMBOL_GRANT = 179,                    /* GRANT  */
  YYSYMBOL_GRANTED = 180,                  /* GRANTED  */
  YYSYMBOL_GRAPH = 181,                    /* GRAPH  */
  YYSYMBOL_GRAPH_TABLE = 182,              /* GRAPH_TABLE  */
  YYSYMBOL_GROUP_P = 183,                  /* GROUP_P  */
  YYSYMBOL_GROUPING = 184,                 /* GROUPING  */
  YYSYMBOL_GROUPING_ID = 185,              /* GROUPING_ID  */
  YYSYMBOL_GROUPS = 186,                   /* GROUPS  */
  YYSYMBOL_HANDLER = 187,                  /* HANDLER  */
  YYSYMBOL_HAVING = 188,                   /* HAVING  */
  YYSYMBOL_HEADER_P = 189,                 /* HEADER_P  */
  YYSYMBOL_HOLD = 190,                     /* HOLD  */
  YYSYMBOL_HOUR_P = 191,                   /* HOUR_P  */
  YYSYMBOL_HOURS_P = 192,                  /* HOURS_P  */
  YYSYMBOL_IDENTITY_P = 193,               /* IDENTITY_P  */
  YYSYMBOL_IF_P = 194,                     /* IF_P  */
  YYSYMBOL_IGNORE_P = 195,                 /* IGNORE_P  */
  YYSYMBOL_ILIKE = 196,                    /* ILIKE  */
  YYSYMBOL_IMMEDIATE = 197,                /* IMMEDIATE  */
  YYSYMBOL_IMMUTABLE = 198,                /* IMMUTABLE  */
  YYSYMBOL_IMPLICIT_P = 199,               /* IMPLICIT_P  */
  YYSYMBOL_IMPORT_P = 200,                 /* IMPORT_P  */
  YYSYMBOL_IN_P = 201,                     /* IN_P  */
  YYSYMBOL_INCLUDE_P = 202,                /* INCLUDE_P  */
  YYSYMBOL_INCLUDING = 203,                /* INCLUDING  */
  YYSYMBOL_INCREMENT = 204,                /* INCREMENT  */
  YYSYMBOL_INDEX = 205,                    /* INDEX  */
  YYSYMBOL_INDEXES = 206,                  /* INDEXES  */
  YYSYMBOL_INHERIT = 207,                  /* INHERIT  */
  YYSYMBOL_INHERITS = 208,                 /* INHERITS  */
  YYSYMBOL_INITIALLY = 209,                /* INITIALLY  */
  YYSYMBOL_INLINE_P = 210,                 /* INLINE_P  */
  YYSYMBOL_INNER_P = 211,                  /* INNER_P  */
  YYSYMBOL_INOUT = 212,                    /* INOUT  */
  YYSYMBOL_INPUT_P = 213,                  /* INPUT_P  */
  YYSYMBOL_INSENSITIVE = 214,              /* INSENSITIVE  */
  YYSYMBOL_INSERT = 215,                   /* INSERT  */
  YYSYMBOL_INSTALL = 216,                  /* INSTALL  */
  YYSYMBOL_INSTEAD = 217,                  /* INSTEAD  */
  YYSYMBOL_INT_P = 218,                    /* INT_P  */
  YYSYMBOL_INTEGER = 219,                  /* INTEGER  */
  YYSYMBOL_INTERSECT = 220,                /* INTERSECT  */
  YYSYMBOL_INTERVAL = 221,                 /* INTERVAL  */
  YYSYMBOL_INTO = 222,                     /* INTO  */
  YYSYMBOL_INVOKER = 223,                  /* INVOKER  */
  YYSYMBOL_IS = 224,                       /* IS  */
  YYSYMBOL_ISNULL = 225,                   /* ISNULL  */
  YYSYMBOL_ISOLATION = 226,                /* ISOLATION  */
  YYSYMBOL_JOIN = 227,                     /* JOIN  */
  YYSYMBOL_JSON = 228,                     /* JSON  */
  YYSYMBOL_KEEP = 229,                     /* KEEP  */
  YYSYMBOL_KEY = 230,                      /* KEY  */
  YYSYMBOL_LABEL = 231,                    /* LABEL  */
  YYSYMBOL_LANGUAGE = 232,                 /* LANGUAGE  */
  YYSYMBOL_LARGE_P = 233,                  /* LARGE_P  */
  YYSYMBOL_LAST_P = 234,                   /* LAST_P  */
  YYSYMBOL_LATERAL_P = 235,                /* LATERAL_P  */
  YYSYMBOL_LEADING = 236,                  /* LEADING  */
  YYSYMBOL_LEAKPROOF = 237,                /* LEAKPROOF  */
  YYSYMBOL_LEFT = 238,                     /* LEFT  */
  YYSYMBOL_LEVEL = 239,                    /* LEVEL  */
  YYSYMBOL_LIKE = 240,                     /* LIKE  */
  YYSYMBOL_LIMIT = 241,                    /* LIMIT  */
  YYSYMBOL_LISTEN = 242,                   /* LISTEN  */
  YYSYMBOL_LOAD = 243,                     /* LOAD  */
  YYSYMBOL_LOCAL = 244,                    /* LOCAL  */
  YYSYMBOL_LOCATION = 245,                 /* LOCATION  */
  YYSYMBOL_LOCK_P = 246,                   /* LOCK_P  */
  YYSYMBOL_LOCKED = 247,                   /* LOCKED  */
  YYSYMBOL_LOGGED = 248,                   /* LOGGED  */
  YYSYMBOL_MACRO = 249,                    /* MACRO  */
  YYSYMBOL_MAP = 250,                      /* MAP  */
  YYSYMBOL_MAPPING = 251,                  /* MAPPING  */
  YYSYMBOL_MATCH = 252,                    /* MATCH  */
  YYSYMBOL_MATERIALIZED = 253,             /* MATERIALIZED  */
  YYSYMBOL_MAXVALUE = 254,                 /* MAXVALUE  */
  YYSYMBOL_METHOD = 255,                   /* METHOD  */
  YYSYMBOL_MICROSECOND_P = 256,            /* MICROSECOND_P  */
  YYSYMBOL_MICROSECONDS_P = 257,           /* MICROSECONDS_P  */
  YYSYMBOL_MILLISECOND_P = 258,            /* MILLISECOND_P  */
  YYSYMBOL_MILLISECONDS_P = 259,           /* MILLISECONDS_P  */
  YYSYMBOL_MINUTE_P = 260,                 /* MINUTE_P  */
  YYSYMBOL_MINUTES_P = 261,                /* MINUTES_P  */
  YYSYMBOL_MINVALUE = 262,                 /* MINVALUE  */
  YYSYMBOL_MODE = 263,                     /* MODE  */
  YYSYMBOL_MONTH_P = 264,                  /* MONTH_P  */
  YYSYMBOL_MONTHS_P = 265,                 /* MONTHS_P  */
  YYSYMBOL_MOVE = 266,                     /* MOVE  */
  YYSYMBOL_NAME_P = 267,                   /* NAME_P  */
  YYSYMBOL_NAMES = 268,                    /* NAMES  */
  YYSYMBOL_NATIONAL = 269,                 /* NATIONAL  */
  YYSYMBOL_NATURAL = 270,                  /* NATURAL  */
  YYSYMBOL_NCHAR = 271,                    /* NCHAR  */
  YYSYMBOL_NEW = 272,                      /* NEW  */
  YYSYMBOL_NEXT = 273,                     /* NEXT  */
  YYSYMBOL_NO = 274,                       /* NO  */
  YYSYMBOL_NODE = 275,                     /* NODE  */
  YYSYMBOL_NONE = 276,                     /* NONE  */
  YYSYMBOL_NOT = 277,                      /* NOT  */
  YYSYMBOL_NOTHING = 278,                  /* NOTHING  */
  YYSYMBOL_NOTIFY = 279,                   /* NOTIFY  */
  YYSYMBOL_NOTNULL = 280,                  /* NOTNULL  */
  YYSYMBOL_NOWAIT = 281,                   /* NOWAIT  */
  YYSYMBOL_NULL_P = 282,                   /* NULL_P  */
  YYSYMBOL_NULLIF = 283,                   /* NULLIF  */
  YYSYMBOL_NULLS_P = 284,                  /* NULLS_P  */
  YYSYMBOL_NUMERIC = 285,                  /* NUMERIC  */
  YYSYMBOL_OBJECT_P = 286,                 /* OBJECT_P  */
  YYSYMBOL_OF = 287,                       /* OF  */
  YYSYMBOL_OFF = 288,                      /* OFF  */
  YYSYMBOL_OFFSET = 289,                   /* OFFSET  */
  YYSYMBOL_OIDS = 290,                     /* OIDS  */
  YYSYMBOL_OLD = 291,                      /* OLD  */
  YYSYMBOL_ON = 292,                       /* ON  */
  YYSYMBOL_ONLY = 293,                     /* ONLY  */
  YYSYMBOL_OPERATOR = 294,                 /* OPERATOR  */
  YYSYMBOL_OPTION = 295,                   /* OPTION  */
  YYSYMBOL_OPTIONS = 296,                  /* OPTIONS  */
  YYSYMBOL_OR = 297,                       /* OR  */
  YYSYMBOL_ORDER = 298,                    /* ORDER  */
  YYSYMBOL_ORDINALITY = 299,               /* ORDINALITY  */
  YYSYMBOL_OUT_P = 300,                    /* OUT_P  */
  YYSYMBOL_OUTER_P = 301,                  /* OUTER_P  */
  YYSYMBOL_OVER = 302,                     /* OVER  */
  YYSYMBOL_OVERLAPS = 303,                 /* OVERLAPS  */
  YYSYMBOL_OVERLAY = 304,                  /* OVERLAY  */
  YYSYMBOL_OVERRIDING = 305,               /* OVERRIDING  */
  YYSYMBOL_OWNED = 306,                    /* OWNED  */
  YYSYMBOL_OWNER = 307,                    /* OWNER  */
  YYSYMBOL_PARALLEL = 308,                 /* PARALLEL  */
  YYSYMBOL_PARSER = 309,                   /* PARSER  */
  YYSYMBOL_PARTIAL = 310,                  /* PARTIAL  */
  YYSYMBOL_PARTITION = 311,                /* PARTITION  */
  YYSYMBOL_PASSING = 312,                  /* PASSING  */
  YYSYMBOL_PASSWORD = 313,                 /* PASSWORD  */
  YYSYMBOL_PATH = 314,                     /* PATH  */
  YYSYMBOL_PATHS = 315,                    /* PATHS  */
  YYSYMBOL_PERCENT = 316,                  /* PERCENT  */
  YYSYMBOL_PIVOT = 317,                    /* PIVOT  */
  YYSYMBOL_PIVOT_LONGER = 318,             /* PIVOT_LONGER  */
  YYSYMBOL_PIVOT_WIDER = 319,              /* PIVOT_WIDER  */
  YYSYMBOL_PLACING = 320,                  /* PLACING  */
  YYSYMBOL_PLANS = 321,                    /* PLANS  */
  YYSYMBOL_POLICY = 322,                   /* POLICY  */
  YYSYMBOL_POSITION = 323,                 /* POSITION  */
  YYSYMBOL_POSITIONAL = 324,               /* POSITIONAL  */
  YYSYMBOL_PRAGMA_P = 325,                 /* PRAGMA_P  */
  YYSYMBOL_PRECEDING = 326,                /* PRECEDING  */
  YYSYMBOL_PRECISION = 327,                /* PRECISION  */
  YYSYMBOL_PREPARE = 328,                  /* PREPARE  */
  YYSYMBOL_PREPARED = 329,                 /* PREPARED  */
  YYSYMBOL_PRESERVE = 330,                 /* PRESERVE  */
  YYSYMBOL_PRIMARY = 331,                  /* PRIMARY  */
  YYSYMBOL_PRIOR = 332,                    /* PRIOR  */
  YYSYMBOL_PRIVILEGES = 333,               /* PRIVILEGES  */
  YYSYMBOL_PROCEDURAL = 334,               /* PROCEDURAL  */
  YYSYMBOL_PROCEDURE = 335,                /* PROCEDURE  */
  YYSYMBOL_PROGRAM = 336,                  /* PROGRAM  */
  YYSYMBOL_PROPERTIES = 337,               /* PROPERTIES  */
  YYSYMBOL_PROPERTY = 338,                 /* PROPERTY  */
  YYSYMBOL_PUBLICATION = 339,              /* PUBLICATION  */
  YYSYMBOL_QUALIFY = 340,                  /* QUALIFY  */
  YYSYMBOL_QUOTE = 341,                    /* QUOTE  */
  YYSYMBOL_RANGE = 342,                    /* RANGE  */
  YYSYMBOL_READ_P = 343,                   /* READ_P  */
  YYSYMBOL_REAL = 344,                     /* REAL  */
  YYSYMBOL_REASSIGN = 345,                 /* REASSIGN  */
  YYSYMBOL_RECHECK = 346,                  /* RECHECK  */
  YYSYMBOL_RECURSIVE = 347,                /* RECURSIVE  */
  YYSYMBOL_REF = 348,                      /* REF  */
  YYSYMBOL_REFERENCES = 349,               /* REFERENCES  */
  YYSYMBOL_REFERENCING = 350,              /* REFERENCING  */
  YYSYMBOL_REFRESH = 351,                  /* REFRESH  */
  YYSYMBOL_REINDEX = 352,                  /* REINDEX  */
  YYSYMBOL_RELATIONSHIP = 353,             /* RELATIONSHIP  */
  YYSYMBOL_RELATIVE_P = 354,               /* RELATIVE_P  */
  YYSYMBOL_RELEASE = 355,                  /* RELEASE  */
  YYSYMBOL_RENAME = 356,                   /* RENAME  */
  YYSYMBOL_REPEATABLE = 357,               /* REPEATABLE  */
  YYSYMBOL_REPLACE = 358,                  /* REPLACE  */
  YYSYMBOL_REPLICA = 359,                  /* REPLICA  */
  YYSYMBOL_RESET = 360,                    /* RESET  */
  YYSYMBOL_RESPECT_P = 361,                /* RESPECT_P  */
  YYSYMBOL_RESTART = 362,                  /* RESTART  */
  YYSYMBOL_RESTRICT = 363,                 /* RESTRICT  */
  YYSYMBOL_RETURNING = 364,                /* RETURNING  */
  YYSYMBOL_RETURNS = 365,                  /* RETURNS  */
  YYSYMBOL_REVOKE = 366,                   /* REVOKE  */
  YYSYMBOL_RIGHT = 367,                    /* RIGHT  */
  YYSYMBOL_ROLE = 368,                     /* ROLE  */
  YYSYMBOL_ROLLBACK = 369,                 /* ROLLBACK  */
  YYSYMBOL_ROLLUP = 370,                   /* ROLLUP  */
  YYSYMBOL_ROW = 371,                      /* ROW  */
  YYSYMBOL_ROWS = 372,                     /* ROWS  */
  YYSYMBOL_RULE = 373,                     /* RULE  */
  YYSYMBOL_SAMPLE = 374,                   /* SAMPLE  */
  YYSYMBOL_SAVEPOINT = 375,                /* SAVEPOINT  */
  YYSYMBOL_SCHEMA = 376,                   /* SCHEMA  */
  YYSYMBOL_SCHEMAS = 377,                  /* SCHEMAS  */
  YYSYMBOL_SCROLL = 378,                   /* SCROLL  */
  YYSYMBOL_SEARCH = 379,                   /* SEARCH  */
  YYSYMBOL_SECOND_P = 380,                 /* SECOND_P  */
  YYSYMBOL_SECONDS_P = 381,                /* SECONDS_P  */
  YYSYMBOL_SECURITY = 382,                 /* SECURITY  */
  YYSYMBOL_SELECT = 383,                   /* SELECT  */
  YYSYMBOL_SEMI = 384,                     /* SEMI  */
  YYSYMBOL_SEQUENCE = 385,                 /* SEQUENCE  */
  YYSYMBOL_SEQUENCES = 386,                /* SEQUENCES  */
  YYSYMBOL_SERIALIZABLE = 387,             /* SERIALIZABLE  */
  YYSYMBOL_SERVER = 388,                   /* SERVER  */
  YYSYMBOL_SESSION = 389,                  /* SESSION  */
  YYSYMBOL_SET = 390,                      /* SET  */
  YYSYMBOL_SETOF = 391,                    /* SETOF  */
  YYSYMBOL_SETS = 392,                     /* SETS  */
  YYSYMBOL_SHARE = 393,                    /* SHARE  */
  YYSYMBOL_SHORTEST = 394,                 /* SHORTEST  */
  YYSYMBOL_SHOW = 395,                     /* SHOW  */
  YYSYMBOL_SIMILAR = 396,                  /* SIMILAR  */
  YYSYMBOL_SIMPLE = 397,                   /* SIMPLE  */
  YYSYMBOL_SKIP = 398,                     /* SKIP  */
  YYSYMBOL_SMALLINT = 399,                 /* SMALLINT  */
  YYSYMBOL_SNAPSHOT = 400,                 /* SNAPSHOT  */
  YYSYMBOL_SOME = 401,                     /* SOME  */
  YYSYMBOL_SOURCE = 402,                   /* SOURCE  */
  YYSYMBOL_SQL_P = 403,                    /* SQL_P  */
  YYSYMBOL_STABLE = 404,                   /* STABLE  */
  YYSYMBOL_STANDALONE_P = 405,             /* STANDALONE_P  */
  YYSYMBOL_START = 406,                    /* START  */
  YYSYMBOL_STATEMENT = 407,                /* STATEMENT  */
  YYSYMBOL_STATISTICS = 408,               /* STATISTICS  */
  YYSYMBOL_STDIN = 409,                    /* STDIN  */
  YYSYMBOL_STDOUT = 410,                   /* STDOUT  */
  YYSYMBOL_STORAGE = 411,                  /* STORAGE  */
  YYSYMBOL_STORED = 412,                   /* STORED  */
  YYSYMBOL_STRICT_P = 413,                 /* STRICT_P  */
  YYSYMBOL_STRIP_P = 414,                  /* STRIP_P  */
  YYSYMBOL_STRUCT = 415,                   /* STRUCT  */
  YYSYMBOL_SUBSCRIPTION = 416,             /* SUBSCRIPTION  */
  YYSYMBOL_SUBSTRING = 417,                /* SUBSTRING  */
  YYSYMBOL_SUMMARIZE = 418,                /* SUMMARIZE  */
  YYSYMBOL_SYMMETRIC = 419,                /* SYMMETRIC  */
  YYSYMBOL_SYSID = 420,                    /* SYSID  */
  YYSYMBOL_SYSTEM_P = 421,                 /* SYSTEM_P  */
  YYSYMBOL_TABLE = 422,                    /* TABLE  */
  YYSYMBOL_TABLES = 423,                   /* TABLES  */
  YYSYMBOL_TABLESAMPLE = 424,              /* TABLESAMPLE  */
  YYSYMBOL_TABLESPACE = 425,               /* TABLESPACE  */
  YYSYMBOL_TEMP = 426,                     /* TEMP  */
  YYSYMBOL_TEMPLATE = 427,                 /* TEMPLATE  */
  YYSYMBOL_TEMPORARY = 428,                /* TEMPORARY  */
  YYSYMBOL_TEXT_P = 429,                   /* TEXT_P  */
  YYSYMBOL_THEN = 430,                     /* THEN  */
  YYSYMBOL_TIME = 431,                     /* TIME  */
  YYSYMBOL_TIMESTAMP = 432,                /* TIMESTAMP  */
  YYSYMBOL_TO = 433,                       /* TO  */
  YYSYMBOL_TRAIL = 434,                    /* TRAIL  */
  YYSYMBOL_TRAILING = 435,                 /* TRAILING  */
  YYSYMBOL_TRANSACTION = 436,              /* TRANSACTION  */
  YYSYMBOL_TRANSFORM = 437,                /* TRANSFORM  */
  YYSYMBOL_TREAT = 438,                    /* TREAT  */
  YYSYMBOL_TRIGGER = 439,                  /* TRIGGER  */
  YYSYMBOL_TRIM = 440,                     /* TRIM  */
  YYSYMBOL_TRUE_P = 441,                   /* TRUE_P  */
  YYSYMBOL_TRUNCATE = 442,                 /* TRUNCATE  */
  YYSYMBOL_TRUSTED = 443,                  /* TRUSTED  */
  YYSYMBOL_TRY_CAST = 444,                 /* TRY_CAST  */
  YYSYMBOL_TYPE_P = 445,                   /* TYPE_P  */
  YYSYMBOL_TYPES_P = 446,                  /* TYPES_P  */
  YYSYMBOL_UNBOUNDED = 447,                /* UNBOUNDED  */
  YYSYMBOL_UNCOMMITTED = 448,              /* UNCOMMITTED  */
  YYSYMBOL_UNENCRYPTED = 449,              /* UNENCRYPTED  */
  YYSYMBOL_UNION = 450,                    /* UNION  */
  YYSYMBOL_UNIQUE = 451,                   /* UNIQUE  */
  YYSYMBOL_UNKNOWN = 452,                  /* UNKNOWN  */
  YYSYMBOL_UNLISTEN = 453,                 /* UNLISTEN  */
  YYSYMBOL_UNLOGGED = 454,                 /* UNLOGGED  */
  YYSYMBOL_UNPIVOT = 455,                  /* UNPIVOT  */
  YYSYMBOL_UNTIL = 456,                    /* UNTIL  */
  YYSYMBOL_UPDATE = 457,                   /* UPDATE  */
  YYSYMBOL_USE_P = 458,                    /* USE_P  */
  YYSYMBOL_USER = 459,                     /* USER  */
  YYSYMBOL_USING = 460,                    /* USING  */
  YYSYMBOL_VACUUM = 461,                   /* VACUUM  */
  YYSYMBOL_VALID = 462,                    /* VALID  */
  YYSYMBOL_VALIDATE = 463,                 /* VALIDATE  */
  YYSYMBOL_VALIDATOR = 464,                /* VALIDATOR  */
  YYSYMBOL_VALUE_P = 465,                  /* VALUE_P  */
  YYSYMBOL_VALUES = 466,                   /* VALUES  */
  YYSYMBOL_VARCHAR = 467,                  /* VARCHAR  */
  YYSYMBOL_VARIADIC = 468,                 /* VARIADIC  */
  YYSYMBOL_VARYING = 469,                  /* VARYING  */
  YYSYMBOL_VERBOSE = 470,                  /* VERBOSE  */
  YYSYMBOL_VERSION_P = 471,                /* VERSION_P  */
  YYSYMBOL_VERTEX = 472,                   /* VERTEX  */
  YYSYMBOL_VIEW = 473,                     /* VIEW  */
  YYSYMBOL_VIEWS = 474,                    /* VIEWS  */
  YYSYMBOL_VIRTUAL = 475,                  /* VIRTUAL  */
  YYSYMBOL_VOLATILE = 476,                 /* VOLATILE  */
  YYSYMBOL_WALK = 477,                     /* WALK  */
  YYSYMBOL_WHEN = 478,                     /* WHEN  */
  YYSYMBOL_WHERE = 479,                    /* WHERE  */
  YYSYMBOL_WHITESPACE_P = 480,             /* WHITESPACE_P  */
  YYSYMBOL_WINDOW = 481,                   /* WINDOW  */
  YYSYMBOL_WITH = 482,                     /* WITH  */
  YYSYMBOL_WITHIN = 483,                   /* WITHIN  */
  YYSYMBOL_WITHOUT = 484,                  /* WITHOUT  */
  YYSYMBOL_WORK = 485,                     /* WORK  */
  YYSYMBOL_WRAPPER = 486,                  /* WRAPPER  */
  YYSYMBOL_WRITE_P = 487,                  /* WRITE_P  */
  YYSYMBOL_XML_P = 488,                    /* XML_P  */
  YYSYMBOL_XMLATTRIBUTES = 489,            /* XMLATTRIBUTES  */
  YYSYMBOL_XMLCONCAT = 490,                /* XMLCONCAT  */
  YYSYMBOL_XMLELEMENT = 491,               /* XMLELEMENT  */
  YYSYMBOL_XMLEXISTS = 492,                /* XMLEXISTS  */
  YYSYMBOL_XMLFOREST = 493,                /* XMLFOREST  */
  YYSYMBOL_XMLNAMESPACES = 494,            /* XMLNAMESPACES  */
  YYSYMBOL_XMLPARSE = 495,                 /* XMLPARSE  */
  YYSYMBOL_XMLPI = 496,                    /* XMLPI  */
  YYSYMBOL_XMLROOT = 497,                  /* XMLROOT  */
  YYSYMBOL_XMLSERIALIZE = 498,             /* XMLSERIALIZE  */
  YYSYMBOL_XMLTABLE = 499,                 /* XMLTABLE  */
  YYSYMBOL_YEAR_P = 500,                   /* YEAR_P  */
  YYSYMBOL_YEARS_P = 501,                  /* YEARS_P  */
  YYSYMBOL_YES_P = 502,                    /* YES_P  */
  YYSYMBOL_ZONE = 503,                     /* ZONE  */
  YYSYMBOL_NOT_LA = 504,                   /* NOT_LA  */
  YYSYMBOL_NULLS_LA = 505,                 /* NULLS_LA  */
  YYSYMBOL_WITH_LA = 506,                  /* WITH_LA  */
  YYSYMBOL_507_ = 507,                     /* '<'  */
  YYSYMBOL_508_ = 508,                     /* '>'  */
  YYSYMBOL_509_ = 509,                     /* '='  */
  YYSYMBOL_POSTFIXOP = 510,                /* POSTFIXOP  */
  YYSYMBOL_511_ = 511,                     /* '+'  */
  YYSYMBOL_512_ = 512,                     /* '-'  */
  YYSYMBOL_513_ = 513,                     /* '*'  */
  YYSYMBOL_514_ = 514,                     /* '/'  */
  YYSYMBOL_515_ = 515,                     /* '%'  */
  YYSYMBOL_516_ = 516,                     /* '^'  */
  YYSYMBOL_UMINUS = 517,                   /* UMINUS  */
  YYSYMBOL_518_ = 518,                     /* '['  */
  YYSYMBOL_519_ = 519,                     /* ']'  */
  YYSYMBOL_520_ = 520,                     /* '('  */
  YYSYMBOL_521_ = 521,                     /* ')'  */
  YYSYMBOL_522_ = 522,                     /* '.'  */
  YYSYMBOL_523_ = 523,                     /* ';'  */
  YYSYMBOL_524_ = 524,                     /* ','  */
  YYSYMBOL_525_ = 525,                     /* '|'  */
  YYSYMBOL_526_ = 526,                     /* '?'  */
  YYSYMBOL_527_ = 527,                     /* '{'  */
  YYSYMBOL_528_ = 528,                     /* '}'  */
  YYSYMBOL_529_ = 529,                     /* '&'  */
  YYSYMBOL_530_ = 530,                     /* '!'  */
  YYSYMBOL_531_ = 531,                     /* ':'  */
  YYSYMBOL_532_ = 532,                     /* '#'  */
  YYSYMBOL_533_ = 533,                     /* '$'  */
  YYSYMBOL_YYACCEPT = 534,                 /* $accept  */
  YYSYMBOL_stmtblock = 535,                /* stmtblock  */
  YYSYMBOL_stmtmulti = 536,                /* stmtmulti  */
  YYSYMBOL_stmt = 537,                     /* stmt  */
  YYSYMBOL_AlterObjectSchemaStmt = 538,    /* AlterObjectSchemaStmt  */
  YYSYMBOL_AlterSeqStmt = 539,             /* AlterSeqStmt  */
  YYSYMBOL_SeqOptList = 540,               /* SeqOptList  */
  YYSYMBOL_opt_with = 541,                 /* opt_with  */
  YYSYMBOL_NumericOnly = 542,              /* NumericOnly  */
  YYSYMBOL_SeqOptElem = 543,               /* SeqOptElem  */
  YYSYMBOL_opt_by = 544,                   /* opt_by  */
  YYSYMBOL_SignedIconst = 545,             /* SignedIconst  */
  YYSYMBOL_AlterTableStmt = 546,           /* AlterTableStmt  */
  YYSYMBOL_alter_identity_column_option_list = 547, /* alter_identity_column_option_list  */
  YYSYMBOL_alter_column_default = 548,     /* alter_column_default  */
  YYSYMBOL_alter_identity_column_option = 549, /* alter_identity_column_option  */
  YYSYMBOL_alter_generic_option_list = 550, /* alter_generic_option_list  */
  YYSYMBOL_alter_table_cmd = 551,          /* alter_table_cmd  */
  YYSYMBOL_alter_using = 552,              /* alter_using  */
  YYSYMBOL_alter_generic_option_elem = 553, /* alter_generic_option_elem  */
  YYSYMBOL_alter_table_cmds = 554,         /* alter_table_cmds  */
  YYSYMBOL_alter_generic_options = 555,    /* alter_generic_options  */
  YYSYMBOL_opt_set_data = 556,             /* opt_set_data  */
  YYSYMBOL_AnalyzeStmt = 557,              /* AnalyzeStmt  */
  YYSYMBOL_AttachStmt = 558,               /* AttachStmt  */
  YYSYMBOL_DetachStmt = 559,               /* DetachStmt  */
  YYSYMBOL_opt_database = 560,             /* opt_database  */
  YYSYMBOL_opt_database_alias = 561,       /* opt_database_alias  */
  YYSYMBOL_CallStmt = 562,                 /* CallStmt  */
  YYSYMBOL_CheckPointStmt = 563,           /* CheckPointStmt  */
  YYSYMBOL_opt_col_id = 564,               /* opt_col_id  */
  YYSYMBOL_qualified_name = 565,           /* qualified_name  */
  YYSYMBOL_ColId = 566,                    /* ColId  */
  YYSYMBOL_ColIdOrString = 567,            /* ColIdOrString  */
  YYSYMBOL_Sconst = 568,                   /* Sconst  */
  YYSYMBOL_indirection = 569,              /* indirection  */
  YYSYMBOL_indirection_el = 570,           /* indirection_el  */
  YYSYMBOL_attr_name = 571,                /* attr_name  */
  YYSYMBOL_ColLabel = 572,                 /* ColLabel  */
  YYSYMBOL_CopyStmt = 573,                 /* CopyStmt  */
  YYSYMBOL_copy_from = 574,                /* copy_from  */
  YYSYMBOL_copy_delimiter = 575,           /* copy_delimiter  */
  YYSYMBOL_copy_generic_opt_arg_list = 576, /* copy_generic_opt_arg_list  */
  YYSYMBOL_opt_using = 577,                /* opt_using  */
  YYSYMBOL_opt_as = 578,                   /* opt_as  */
  YYSYMBOL_opt_program = 579,              /* opt_program  */
  YYSYMBOL_copy_options = 580,             /* copy_options  */
  YYSYMBOL_copy_generic_opt_arg = 581,     /* copy_generic_opt_arg  */
  YYSYMBOL_copy_generic_opt_elem = 582,    /* copy_generic_opt_elem  */
  YYSYMBOL_opt_oids = 583,                 /* opt_oids  */
  YYSYMBOL_copy_opt_list = 584,            /* copy_opt_list  */
  YYSYMBOL_opt_binary = 585,               /* opt_binary  */
  YYSYMBOL_copy_opt_item = 586,            /* copy_opt_item  */
  YYSYMBOL_copy_generic_opt_arg_list_item = 587, /* copy_generic_opt_arg_list_item  */
  YYSYMBOL_copy_file_name = 588,           /* copy_file_name  */
  YYSYMBOL_copy_generic_opt_list = 589,    /* copy_generic_opt_list  */
  YYSYMBOL_CreateStmt = 590,               /* CreateStmt  */
  YYSYMBOL_ConstraintAttributeSpec = 591,  /* ConstraintAttributeSpec  */
  YYSYMBOL_def_arg = 592,                  /* def_arg  */
  YYSYMBOL_OptParenthesizedSeqOptList = 593, /* OptParenthesizedSeqOptList  */
  YYSYMBOL_generic_option_arg = 594,       /* generic_option_arg  */
  YYSYMBOL_key_action = 595,               /* key_action  */
  YYSYMBOL_ColConstraint = 596,            /* ColConstraint  */
  YYSYMBOL_ColConstraintElem = 597,        /* ColConstraintElem  */
  YYSYMBOL_GeneratedColumnType = 598,      /* GeneratedColumnType  */
  YYSYMBOL_opt_GeneratedColumnType = 599,  /* opt_GeneratedColumnType  */
  YYSYMBOL_GeneratedConstraintElem = 600,  /* GeneratedConstraintElem  */
  YYSYMBOL_generic_option_elem = 601,      /* generic_option_elem  */
  YYSYMBOL_key_update = 602,               /* key_update  */
  YYSYMBOL_key_actions = 603,              /* key_actions  */
  YYSYMBOL_OnCommitOption = 604,           /* OnCommitOption  */
  YYSYMBOL_reloptions = 605,               /* reloptions  */
  YYSYMBOL_opt_no_inherit = 606,           /* opt_no_inherit  */
  YYSYMBOL_TableConstraint = 607,          /* TableConstraint  */
  YYSYMBOL_TableLikeOption = 608,          /* TableLikeOption  */
  YYSYMBOL_reloption_list = 609,           /* reloption_list  */
  YYSYMBOL_ExistingIndex = 610,            /* ExistingIndex  */
  YYSYMBOL_ConstraintAttr = 611,           /* ConstraintAttr  */
  YYSYMBOL_OptWith = 612,                  /* OptWith  */
  YYSYMBOL_definition = 613,               /* definition  */
  YYSYMBOL_TableLikeOptionList = 614,      /* TableLikeOptionList  */
  YYSYMBOL_generic_option_name = 615,      /* generic_option_name  */
  YYSYMBOL_ConstraintAttributeElem = 616,  /* ConstraintAttributeElem  */
  YYSYMBOL_columnDef = 617,                /* columnDef  */
  YYSYMBOL_def_list = 618,                 /* def_list  */
  YYSYMBOL_index_name = 619,               /* index_name  */
  YYSYMBOL_TableElement = 620,             /* TableElement  */
  YYSYMBOL_def_elem = 621,                 /* def_elem  */
  YYSYMBOL_opt_definition = 622,           /* opt_definition  */
  YYSYMBOL_OptTableElementList = 623,      /* OptTableElementList  */
  YYSYMBOL_columnElem = 624,               /* columnElem  */
  YYSYMBOL_opt_column_list = 625,          /* opt_column_list  */
  YYSYMBOL_ColQualList = 626,              /* ColQualList  */
  YYSYMBOL_key_delete = 627,               /* key_delete  */
  YYSYMBOL_reloption_elem = 628,           /* reloption_elem  */
  YYSYMBOL_columnList = 629,               /* columnList  */
  YYSYMBOL_columnList_opt_comma = 630,     /* columnList_opt_comma  */
  YYSYMBOL_func_type = 631,                /* func_type  */
  YYSYMBOL_ConstraintElem = 632,           /* ConstraintElem  */
  YYSYMBOL_TableElementList = 633,         /* TableElementList  */
  YYSYMBOL_key_match = 634,                /* key_match  */
  YYSYMBOL_TableLikeClause = 635,          /* TableLikeClause  */
  YYSYMBOL_OptTemp = 636,                  /* OptTemp  */
  YYSYMBOL_generated_when = 637,           /* generated_when  */
  YYSYMBOL_CreateAsStmt = 638,             /* CreateAsStmt  */
  YYSYMBOL_opt_with_data = 639,            /* opt_with_data  */
  YYSYMBOL_create_as_target = 640,         /* create_as_target  */
  YYSYMBOL_unreserved_keyword = 641,       /* unreserved_keyword  */
  YYSYMBOL_col_name_keyword = 642,         /* col_name_keyword  */
  YYSYMBOL_func_name_keyword = 643,        /* func_name_keyword  */
  YYSYMBOL_type_name_keyword = 644,        /* type_name_keyword  */
  YYSYMBOL_other_keyword = 645,            /* other_keyword  */
  YYSYMBOL_type_func_name_keyword = 646,   /* type_func_name_keyword  */
  YYSYMBOL_reserved_keyword = 647,         /* reserved_keyword  */
  YYSYMBOL_pgq_col_name_keyword = 648,     /* pgq_col_name_keyword  */
  YYSYMBOL_CreateFunctionStmt = 649,       /* CreateFunctionStmt  */
  YYSYMBOL_macro_alias = 650,              /* macro_alias  */
  YYSYMBOL_param_list = 651,               /* param_list  */
  YYSYMBOL_CreateSchemaStmt = 652,         /* CreateSchemaStmt  */
  YYSYMBOL_OptSchemaEltList = 653,         /* OptSchemaEltList  */
  YYSYMBOL_schema_stmt = 654,              /* schema_stmt  */
  YYSYMBOL_CreateSeqStmt = 655,            /* CreateSeqStmt  */
  YYSYMBOL_OptSeqOptList = 656,            /* OptSeqOptList  */
  YYSYMBOL_CreateTypeStmt = 657,           /* CreateTypeStmt  */
  YYSYMBOL_opt_enum_val_list = 658,        /* opt_enum_val_list  */
  YYSYMBOL_enum_val_list = 659,            /* enum_val_list  */
  YYSYMBOL_DeallocateStmt = 660,           /* DeallocateStmt  */
  YYSYMBOL_DeleteStmt = 661,               /* DeleteStmt  */
  YYSYMBOL_relation_expr_opt_alias = 662,  /* relation_expr_opt_alias  */
  YYSYMBOL_where_or_current_clause = 663,  /* where_or_current_clause  */
  YYSYMBOL_using_clause = 664,             /* using_clause  */
  YYSYMBOL_DropStmt = 665,                 /* DropStmt  */
  YYSYMBOL_drop_type_any_name = 666,       /* drop_type_any_name  */
  YYSYMBOL_drop_type_name = 667,           /* drop_type_name  */
  YYSYMBOL_any_name_list = 668,            /* any_name_list  */
  YYSYMBOL_opt_drop_behavior = 669,        /* opt_drop_behavior  */
  YYSYMBOL_drop_type_name_on_any_name = 670, /* drop_type_name_on_any_name  */
  YYSYMBOL_type_name_list = 671,           /* type_name_list  */
  YYSYMBOL_ExecuteStmt = 672,              /* ExecuteStmt  */
  YYSYMBOL_execute_param_clause = 673,     /* execute_param_clause  */
  YYSYMBOL_ExplainStmt = 674,              /* ExplainStmt  */
  YYSYMBOL_opt_verbose = 675,              /* opt_verbose  */
  YYSYMBOL_explain_option_arg = 676,       /* explain_option_arg  */
  YYSYMBOL_ExplainableStmt = 677,          /* ExplainableStmt  */
  YYSYMBOL_NonReservedWord = 678,          /* NonReservedWord  */
  YYSYMBOL_NonReservedWord_or_Sconst = 679, /* NonReservedWord_or_Sconst  */
  YYSYMBOL_explain_option_list = 680,      /* explain_option_list  */
  YYSYMBOL_analyze_keyword = 681,          /* analyze_keyword  */
  YYSYMBOL_opt_boolean_or_string = 682,    /* opt_boolean_or_string  */
  YYSYMBOL_explain_option_elem = 683,      /* explain_option_elem  */
  YYSYMBOL_explain_option_name = 684,      /* explain_option_name  */
  YYSYMBOL_ExportStmt = 685,               /* ExportStmt  */
  YYSYMBOL_ImportStmt = 686,               /* ImportStmt  */
  YYSYMBOL_IndexStmt = 687,                /* IndexStmt  */
  YYSYMBOL_access_method = 688,            /* access_method  */
  YYSYMBOL_access_method_clause = 689,     /* access_method_clause  */
  YYSYMBOL_opt_concurrently = 690,         /* opt_concurrently  */
  YYSYMBOL_opt_index_name = 691,           /* opt_index_name  */
  YYSYMBOL_opt_reloptions = 692,           /* opt_reloptions  */
  YYSYMBOL_opt_unique = 693,               /* opt_unique  */
  YYSYMBOL_InsertStmt = 694,               /* InsertStmt  */
  YYSYMBOL_insert_rest = 695,              /* insert_rest  */
  YYSYMBOL_insert_target = 696,            /* insert_target  */
  YYSYMBOL_opt_by_name_or_position = 697,  /* opt_by_name_or_position  */
  YYSYMBOL_opt_conf_expr = 698,            /* opt_conf_expr  */
  YYSYMBOL_opt_with_clause = 699,          /* opt_with_clause  */
  YYSYMBOL_insert_column_item = 700,       /* insert_column_item  */
  YYSYMBOL_set_clause = 701,               /* set_clause  */
  YYSYMBOL_opt_or_action = 702,            /* opt_or_action  */
  YYSYMBOL_opt_on_conflict = 703,          /* opt_on_conflict  */
  YYSYMBOL_index_elem = 704,               /* index_elem  */
  YYSYMBOL_returning_clause = 705,         /* returning_clause  */
  YYSYMBOL_override_kind = 706,            /* override_kind  */
  YYSYMBOL_set_target_list = 707,          /* set_target_list  */
  YYSYMBOL_opt_collate = 708,              /* opt_collate  */
  YYSYMBOL_opt_class = 709,                /* opt_class  */
  YYSYMBOL_insert_column_list = 710,       /* insert_column_list  */
  YYSYMBOL_set_clause_list = 711,          /* set_clause_list  */
  YYSYMBOL_set_clause_list_opt_comma = 712, /* set_clause_list_opt_comma  */
  YYSYMBOL_index_params = 713,             /* index_params  */
  YYSYMBOL_set_target = 714,               /* set_target  */
  YYSYMBOL_LoadStmt = 715,                 /* LoadStmt  */
  YYSYMBOL_file_name = 716,                /* file_name  */
  YYSYMBOL_PGQ_IDENT = 717,                /* PGQ_IDENT  */
  YYSYMBOL_DropPropertyGraphStmt = 718,    /* DropPropertyGraphStmt  */
  YYSYMBOL_VertexOrNode = 719,             /* VertexOrNode  */
  YYSYMBOL_EdgeOrRelationship = 720,       /* EdgeOrRelationship  */
  YYSYMBOL_CreatePropertyGraphStmt = 721,  /* CreatePropertyGraphStmt  */
  YYSYMBOL_VertexTableDefinitionList = 722, /* VertexTableDefinitionList  */
  YYSYMBOL_KeySpecification = 723,         /* KeySpecification  */
  YYSYMBOL_KeyDefinition = 724,            /* KeyDefinition  */
  YYSYMBOL_KeyReference = 725,             /* KeyReference  */
  YYSYMBOL_LabelList = 726,                /* LabelList  */
  YYSYMBOL_Discriminator = 727,            /* Discriminator  */
  YYSYMBOL_VertexTableDefinition = 728,    /* VertexTableDefinition  */
  YYSYMBOL_EdgeTableDefinitionList = 729,  /* EdgeTableDefinitionList  */
  YYSYMBOL_EdgeTableDefinition = 730,      /* EdgeTableDefinition  */
  YYSYMBOL_AreOptional = 731,              /* AreOptional  */
  YYSYMBOL_IdentOptionalAs = 732,          /* IdentOptionalAs  */
  YYSYMBOL_QualifiednameOptionalAs = 733,  /* QualifiednameOptionalAs  */
  YYSYMBOL_PropertiesList = 734,           /* PropertiesList  */
  YYSYMBOL_ExceptOptional = 735,           /* ExceptOptional  */
  YYSYMBOL_PropertiesSpec = 736,           /* PropertiesSpec  */
  YYSYMBOL_PropertiesClause = 737,         /* PropertiesClause  */
  YYSYMBOL_GraphTableWhereOptional = 738,  /* GraphTableWhereOptional  */
  YYSYMBOL_GraphTableStmt = 739,           /* GraphTableStmt  */
  YYSYMBOL_ColumnSpec = 740,               /* ColumnSpec  */
  YYSYMBOL_ColumnList = 741,               /* ColumnList  */
  YYSYMBOL_KeepOptional = 742,             /* KeepOptional  */
  YYSYMBOL_PathOrPathsOptional = 743,      /* PathOrPathsOptional  */
  YYSYMBOL_GroupOrGroupsOptional = 744,    /* GroupOrGroupsOptional  */
  YYSYMBOL_PathVariableOptional = 745,     /* PathVariableOptional  */
  YYSYMBOL_PathModeOptional = 746,         /* PathModeOptional  */
  YYSYMBOL_TopKOptional = 747,             /* TopKOptional  */
  YYSYMBOL_PathPrefix = 748,               /* PathPrefix  */
  YYSYMBOL_PathPatternList = 749,          /* PathPatternList  */
  YYSYMBOL_PathPattern = 750,              /* PathPattern  */
  YYSYMBOL_PatternUnion = 751,             /* PatternUnion  */
  YYSYMBOL_KleeneQuantifierOptional = 752, /* KleeneQuantifierOptional  */
  YYSYMBOL_KleeneOptional = 753,           /* KleeneOptional  */
  YYSYMBOL_CostNum = 754,                  /* CostNum  */
  YYSYMBOL_CostDefault = 755,              /* CostDefault  */
  YYSYMBOL_CostOptional = 756,             /* CostOptional  */
  YYSYMBOL_SubPath = 757,                  /* SubPath  */
  YYSYMBOL_EnclosedSubPath = 758,          /* EnclosedSubPath  */
  YYSYMBOL_PathElement = 759,              /* PathElement  */
  YYSYMBOL_PathSequence = 760,             /* PathSequence  */
  YYSYMBOL_PathConcatenation = 761,        /* PathConcatenation  */
  YYSYMBOL_OrLabelExpression = 762,        /* OrLabelExpression  */
  YYSYMBOL_AndLabelExpression = 763,       /* AndLabelExpression  */
  YYSYMBOL_ComposedLabelExpression = 764,  /* ComposedLabelExpression  */
  YYSYMBOL_LabelExpression = 765,          /* LabelExpression  */
  YYSYMBOL_LabelExpressionOptional = 766,  /* LabelExpressionOptional  */
  YYSYMBOL_IsOrColon = 767,                /* IsOrColon  */
  YYSYMBOL_ArrowRight = 768,               /* ArrowRight  */
  YYSYMBOL_ArrowLeftBracket = 769,         /* ArrowLeftBracket  */
  YYSYMBOL_AbbreviatedEdge = 770,          /* AbbreviatedEdge  */
  YYSYMBOL_VariableOptional = 771,         /* VariableOptional  */
  YYSYMBOL_FullElementSpec = 772,          /* FullElementSpec  */
  YYSYMBOL_EdgePattern = 773,              /* EdgePattern  */
  YYSYMBOL_VertexPattern = 774,            /* VertexPattern  */
  YYSYMBOL_pgq_expr = 775,                 /* pgq_expr  */
  YYSYMBOL_PragmaStmt = 776,               /* PragmaStmt  */
  YYSYMBOL_PrepareStmt = 777,              /* PrepareStmt  */
  YYSYMBOL_prep_type_clause = 778,         /* prep_type_clause  */
  YYSYMBOL_PreparableStmt = 779,           /* PreparableStmt  */
  YYSYMBOL_RenameStmt = 780,               /* RenameStmt  */
  YYSYMBOL_opt_column = 781,               /* opt_column  */
  YYSYMBOL_SelectStmt = 782,               /* SelectStmt  */
  YYSYMBOL_select_with_parens = 783,       /* select_with_parens  */
  YYSYMBOL_select_no_parens = 784,         /* select_no_parens  */
  YYSYMBOL_select_clause = 785,            /* select_clause  */
  YYSYMBOL_opt_select = 786,               /* opt_select  */
  YYSYMBOL_simple_select = 787,            /* simple_select  */
  YYSYMBOL_value_or_values = 788,          /* value_or_values  */
  YYSYMBOL_pivot_keyword = 789,            /* pivot_keyword  */
  YYSYMBOL_unpivot_keyword = 790,          /* unpivot_keyword  */
  YYSYMBOL_pivot_column_entry = 791,       /* pivot_column_entry  */
  YYSYMBOL_pivot_column_list_internal = 792, /* pivot_column_list_internal  */
  YYSYMBOL_pivot_column_list = 793,        /* pivot_column_list  */
  YYSYMBOL_with_clause = 794,              /* with_clause  */
  YYSYMBOL_cte_list = 795,                 /* cte_list  */
  YYSYMBOL_common_table_expr = 796,        /* common_table_expr  */
  YYSYMBOL_into_clause = 797,              /* into_clause  */
  YYSYMBOL_OptTempTableName = 798,         /* OptTempTableName  */
  YYSYMBOL_opt_table = 799,                /* opt_table  */
  YYSYMBOL_all_or_distinct = 800,          /* all_or_distinct  */
  YYSYMBOL_by_name = 801,                  /* by_name  */
  YYSYMBOL_distinct_clause = 802,          /* distinct_clause  */
  YYSYMBOL_opt_all_clause = 803,           /* opt_all_clause  */
  YYSYMBOL_opt_ignore_nulls = 804,         /* opt_ignore_nulls  */
  YYSYMBOL_opt_sort_clause = 805,          /* opt_sort_clause  */
  YYSYMBOL_sort_clause = 806,              /* sort_clause  */
  YYSYMBOL_sortby_list = 807,              /* sortby_list  */
  YYSYMBOL_sortby = 808,                   /* sortby  */
  YYSYMBOL_opt_asc_desc = 809,             /* opt_asc_desc  */
  YYSYMBOL_opt_nulls_order = 810,          /* opt_nulls_order  */
  YYSYMBOL_select_limit = 811,             /* select_limit  */
  YYSYMBOL_opt_select_limit = 812,         /* opt_select_limit  */
  YYSYMBOL_limit_clause = 813,             /* limit_clause  */
  YYSYMBOL_offset_clause = 814,            /* offset_clause  */
  YYSYMBOL_sample_count = 815,             /* sample_count  */
  YYSYMBOL_sample_clause = 816,            /* sample_clause  */
  YYSYMBOL_opt_sample_func = 817,          /* opt_sample_func  */
  YYSYMBOL_tablesample_entry = 818,        /* tablesample_entry  */
  YYSYMBOL_tablesample_clause = 819,       /* tablesample_clause  */
  YYSYMBOL_opt_tablesample_clause = 820,   /* opt_tablesample_clause  */
  YYSYMBOL_opt_repeatable_clause = 821,    /* opt_repeatable_clause  */
  YYSYMBOL_select_limit_value = 822,       /* select_limit_value  */
  YYSYMBOL_select_offset_value = 823,      /* select_offset_value  */
  YYSYMBOL_select_fetch_first_value = 824, /* select_fetch_first_value  */
  YYSYMBOL_I_or_F_const = 825,             /* I_or_F_const  */
  YYSYMBOL_row_or_rows = 826,              /* row_or_rows  */
  YYSYMBOL_first_or_next = 827,            /* first_or_next  */
  YYSYMBOL_group_clause = 828,             /* group_clause  */
  YYSYMBOL_group_by_list = 829,            /* group_by_list  */
  YYSYMBOL_group_by_list_opt_comma = 830,  /* group_by_list_opt_comma  */
  YYSYMBOL_group_by_item = 831,            /* group_by_item  */
  YYSYMBOL_empty_grouping_set = 832,       /* empty_grouping_set  */
  YYSYMBOL_rollup_clause = 833,            /* rollup_clause  */
  YYSYMBOL_cube_clause = 834,              /* cube_clause  */
  YYSYMBOL_grouping_sets_clause = 835,     /* grouping_sets_clause  */
  YYSYMBOL_grouping_or_grouping_id = 836,  /* grouping_or_grouping_id  */
  YYSYMBOL_having_clause = 837,            /* having_clause  */
  YYSYMBOL_qualify_clause = 838,           /* qualify_clause  */
  YYSYMBOL_for_locking_clause = 839,       /* for_locking_clause  */
  YYSYMBOL_opt_for_locking_clause = 840,   /* opt_for_locking_clause  */
  YYSYMBOL_for_locking_items = 841,        /* for_locking_items  */
  YYSYMBOL_for_locking_item = 842,         /* for_locking_item  */
  YYSYMBOL_for_locking_strength = 843,     /* for_locking_strength  */
  YYSYMBOL_locked_rels_list = 844,         /* locked_rels_list  */
  YYSYMBOL_opt_nowait_or_skip = 845,       /* opt_nowait_or_skip  */
  YYSYMBOL_values_clause = 846,            /* values_clause  */
  YYSYMBOL_values_clause_opt_comma = 847,  /* values_clause_opt_comma  */
  YYSYMBOL_from_clause = 848,              /* from_clause  */
  YYSYMBOL_from_list = 849,                /* from_list  */
  YYSYMBOL_from_list_opt_comma = 850,      /* from_list_opt_comma  */
  YYSYMBOL_table_ref = 851,                /* table_ref  */
  YYSYMBOL_opt_pivot_group_by = 852,       /* opt_pivot_group_by  */
  YYSYMBOL_opt_include_nulls = 853,        /* opt_include_nulls  */
  YYSYMBOL_single_pivot_value = 854,       /* single_pivot_value  */
  YYSYMBOL_pivot_header = 855,             /* pivot_header  */
  YYSYMBOL_pivot_value = 856,              /* pivot_value  */
  YYSYMBOL_pivot_value_list = 857,         /* pivot_value_list  */
  YYSYMBOL_unpivot_header = 858,           /* unpivot_header  */
  YYSYMBOL_unpivot_value = 859,            /* unpivot_value  */
  YYSYMBOL_unpivot_value_list = 860,       /* unpivot_value_list  */
  YYSYMBOL_joined_table = 861,             /* joined_table  */
  YYSYMBOL_alias_clause = 862,             /* alias_clause  */
  YYSYMBOL_opt_alias_clause = 863,         /* opt_alias_clause  */
  YYSYMBOL_func_alias_clause = 864,        /* func_alias_clause  */
  YYSYMBOL_join_type = 865,                /* join_type  */
  YYSYMBOL_join_outer = 866,               /* join_outer  */
  YYSYMBOL_join_qual = 867,                /* join_qual  */
  YYSYMBOL_relation_expr = 868,            /* relation_expr  */
  YYSYMBOL_func_table = 869,               /* func_table  */
  YYSYMBOL_rowsfrom_item = 870,            /* rowsfrom_item  */
  YYSYMBOL_rowsfrom_list = 871,            /* rowsfrom_list  */
  YYSYMBOL_opt_col_def_list = 872,         /* opt_col_def_list  */
  YYSYMBOL_opt_ordinality = 873,           /* opt_ordinality  */
  YYSYMBOL_where_clause = 874,             /* where_clause  */
  YYSYMBOL_TableFuncElementList = 875,     /* TableFuncElementList  */
  YYSYMBOL_TableFuncElement = 876,         /* TableFuncElement  */
  YYSYMBOL_opt_collate_clause = 877,       /* opt_collate_clause  */
  YYSYMBOL_colid_type_list = 878,          /* colid_type_list  */
  YYSYMBOL_RowOrStruct = 879,              /* RowOrStruct  */
  YYSYMBOL_opt_Typename = 880,             /* opt_Typename  */
  YYSYMBOL_Typename = 881,                 /* Typename  */
  YYSYMBOL_opt_array_bounds = 882,         /* opt_array_bounds  */
  YYSYMBOL_SimpleTypename = 883,           /* SimpleTypename  */
  YYSYMBOL_ConstTypename = 884,            /* ConstTypename  */
  YYSYMBOL_GenericType = 885,              /* GenericType  */
  YYSYMBOL_opt_type_modifiers = 886,       /* opt_type_modifiers  */
  YYSYMBOL_Numeric = 887,                  /* Numeric  */
  YYSYMBOL_opt_float = 888,                /* opt_float  */
  YYSYMBOL_Bit = 889,                      /* Bit  */
  YYSYMBOL_ConstBit = 890,                 /* ConstBit  */
  YYSYMBOL_BitWithLength = 891,            /* BitWithLength  */
  YYSYMBOL_BitWithoutLength = 892,         /* BitWithoutLength  */
  YYSYMBOL_Character = 893,                /* Character  */
  YYSYMBOL_ConstCharacter = 894,           /* ConstCharacter  */
  YYSYMBOL_CharacterWithLength = 895,      /* CharacterWithLength  */
  YYSYMBOL_CharacterWithoutLength = 896,   /* CharacterWithoutLength  */
  YYSYMBOL_character = 897,                /* character  */
  YYSYMBOL_opt_varying = 898,              /* opt_varying  */
  YYSYMBOL_ConstDatetime = 899,            /* ConstDatetime  */
  YYSYMBOL_ConstInterval = 900,            /* ConstInterval  */
  YYSYMBOL_opt_timezone = 901,             /* opt_timezone  */
  YYSYMBOL_year_keyword = 902,             /* year_keyword  */
  YYSYMBOL_month_keyword = 903,            /* month_keyword  */
  YYSYMBOL_day_keyword = 904,              /* day_keyword  */
  YYSYMBOL_hour_keyword = 905,             /* hour_keyword  */
  YYSYMBOL_minute_keyword = 906,           /* minute_keyword  */
  YYSYMBOL_second_keyword = 907,           /* second_keyword  */
  YYSYMBOL_millisecond_keyword = 908,      /* millisecond_keyword  */
  YYSYMBOL_microsecond_keyword = 909,      /* microsecond_keyword  */
  YYSYMBOL_opt_interval = 910,             /* opt_interval  */
  YYSYMBOL_a_expr = 911,                   /* a_expr  */
  YYSYMBOL_b_expr = 912,                   /* b_expr  */
  YYSYMBOL_c_expr = 913,                   /* c_expr  */
  YYSYMBOL_d_expr = 914,                   /* d_expr  */
  YYSYMBOL_indirection_expr = 915,         /* indirection_expr  */
  YYSYMBOL_func_application = 916,         /* func_application  */
  YYSYMBOL_func_expr = 917,                /* func_expr  */
  YYSYMBOL_func_expr_windowless = 918,     /* func_expr_windowless  */
  YYSYMBOL_func_expr_common_subexpr = 919, /* func_expr_common_subexpr  */
  YYSYMBOL_list_comprehension = 920,       /* list_comprehension  */
  YYSYMBOL_within_group_clause = 921,      /* within_group_clause  */
  YYSYMBOL_filter_clause = 922,            /* filter_clause  */
  YYSYMBOL_export_clause = 923,            /* export_clause  */
  YYSYMBOL_window_clause = 924,            /* window_clause  */
  YYSYMBOL_window_definition_list = 925,   /* window_definition_list  */
  YYSYMBOL_window_definition = 926,        /* window_definition  */
  YYSYMBOL_over_clause = 927,              /* over_clause  */
  YYSYMBOL_window_specification = 928,     /* window_specification  */
  YYSYMBOL_opt_existing_window_name = 929, /* opt_existing_window_name  */
  YYSYMBOL_opt_partition_clause = 930,     /* opt_partition_clause  */
  YYSYMBOL_opt_frame_clause = 931,         /* opt_frame_clause  */
  YYSYMBOL_frame_extent = 932,             /* frame_extent  */
  YYSYMBOL_frame_bound = 933,              /* frame_bound  */
  YYSYMBOL_qualified_row = 934,            /* qualified_row  */
  YYSYMBOL_row = 935,                      /* row  */
  YYSYMBOL_dict_arg = 936,                 /* dict_arg  */
  YYSYMBOL_dict_arguments = 937,           /* dict_arguments  */
  YYSYMBOL_dict_arguments_opt_comma = 938, /* dict_arguments_opt_comma  */
  YYSYMBOL_map_arg = 939,                  /* map_arg  */
  YYSYMBOL_map_arguments = 940,            /* map_arguments  */
  YYSYMBOL_map_arguments_opt_comma = 941,  /* map_arguments_opt_comma  */
  YYSYMBOL_opt_map_arguments_opt_comma = 942, /* opt_map_arguments_opt_comma  */
  YYSYMBOL_sub_type = 943,                 /* sub_type  */
  YYSYMBOL_all_Op = 944,                   /* all_Op  */
  YYSYMBOL_MathOp = 945,                   /* MathOp  */
  YYSYMBOL_qual_Op = 946,                  /* qual_Op  */
  YYSYMBOL_qual_all_Op = 947,              /* qual_all_Op  */
  YYSYMBOL_subquery_Op = 948,              /* subquery_Op  */
  YYSYMBOL_any_operator = 949,             /* any_operator  */
  YYSYMBOL_c_expr_list = 950,              /* c_expr_list  */
  YYSYMBOL_c_expr_list_opt_comma = 951,    /* c_expr_list_opt_comma  */
  YYSYMBOL_expr_list = 952,                /* expr_list  */
  YYSYMBOL_expr_list_opt_comma = 953,      /* expr_list_opt_comma  */
  YYSYMBOL_opt_expr_list_opt_comma = 954,  /* opt_expr_list_opt_comma  */
  YYSYMBOL_func_arg_list = 955,            /* func_arg_list  */
  YYSYMBOL_func_arg_expr = 956,            /* func_arg_expr  */
  YYSYMBOL_type_list = 957,                /* type_list  */
  YYSYMBOL_extract_list = 958,             /* extract_list  */
  YYSYMBOL_extract_arg = 959,              /* extract_arg  */
  YYSYMBOL_overlay_list = 960,             /* overlay_list  */
  YYSYMBOL_overlay_placing = 961,          /* overlay_placing  */
  YYSYMBOL_position_list = 962,            /* position_list  */
  YYSYMBOL_substr_list = 963,              /* substr_list  */
  YYSYMBOL_substr_from = 964,              /* substr_from  */
  YYSYMBOL_substr_for = 965,               /* substr_for  */
  YYSYMBOL_trim_list = 966,                /* trim_list  */
  YYSYMBOL_in_expr = 967,                  /* in_expr  */
  YYSYMBOL_case_expr = 968,                /* case_expr  */
  YYSYMBOL_when_clause_list = 969,         /* when_clause_list  */
  YYSYMBOL_when_clause = 970,              /* when_clause  */
  YYSYMBOL_case_default = 971,             /* case_default  */
  YYSYMBOL_case_arg = 972,                 /* case_arg  */
  YYSYMBOL_columnref = 973,                /* columnref  */
  YYSYMBOL_opt_slice_bound = 974,          /* opt_slice_bound  */
  YYSYMBOL_opt_indirection = 975,          /* opt_indirection  */
  YYSYMBOL_opt_func_arguments = 976,       /* opt_func_arguments  */
  YYSYMBOL_extended_indirection_el = 977,  /* extended_indirection_el  */
  YYSYMBOL_opt_extended_indirection = 978, /* opt_extended_indirection  */
  YYSYMBOL_opt_asymmetric = 979,           /* opt_asymmetric  */
  YYSYMBOL_opt_target_list_opt_comma = 980, /* opt_target_list_opt_comma  */
  YYSYMBOL_target_list = 981,              /* target_list  */
  YYSYMBOL_target_list_opt_comma = 982,    /* target_list_opt_comma  */
  YYSYMBOL_target_el = 983,                /* target_el  */
  YYSYMBOL_except_list = 984,              /* except_list  */
  YYSYMBOL_opt_except_list = 985,          /* opt_except_list  */
  YYSYMBOL_replace_list_el = 986,          /* replace_list_el  */
  YYSYMBOL_replace_list = 987,             /* replace_list  */
  YYSYMBOL_replace_list_opt_comma = 988,   /* replace_list_opt_comma  */
  YYSYMBOL_opt_replace_list = 989,         /* opt_replace_list  */
  YYSYMBOL_qualified_name_list = 990,      /* qualified_name_list  */
  YYSYMBOL_name_list = 991,                /* name_list  */
  YYSYMBOL_name_list_opt_comma = 992,      /* name_list_opt_comma  */
  YYSYMBOL_name_list_opt_comma_opt_bracket = 993, /* name_list_opt_comma_opt_bracket  */
  YYSYMBOL_name = 994,                     /* name  */
  YYSYMBOL_func_name = 995,                /* func_name  */
  YYSYMBOL_AexprConst = 996,               /* AexprConst  */
  YYSYMBOL_Iconst = 997,                   /* Iconst  */
  YYSYMBOL_type_function_name = 998,       /* type_function_name  */
  YYSYMBOL_function_name_token = 999,      /* function_name_token  */
  YYSYMBOL_type_name_token = 1000,         /* type_name_token  */
  YYSYMBOL_any_name = 1001,                /* any_name  */
  YYSYMBOL_attrs = 1002,                   /* attrs  */
  YYSYMBOL_opt_name_list = 1003,           /* opt_name_list  */
  YYSYMBOL_param_name = 1004,              /* param_name  */
  YYSYMBOL_ColLabelOrString = 1005,        /* ColLabelOrString  */
  YYSYMBOL_TransactionStmt = 1006,         /* TransactionStmt  */
  YYSYMBOL_opt_transaction = 1007,         /* opt_transaction  */
  YYSYMBOL_UpdateStmt = 1008,              /* UpdateStmt  */
  YYSYMBOL_UseStmt = 1009,                 /* UseStmt  */
  YYSYMBOL_VacuumStmt = 1010,              /* VacuumStmt  */
  YYSYMBOL_vacuum_option_elem = 1011,      /* vacuum_option_elem  */
  YYSYMBOL_opt_full = 1012,                /* opt_full  */
  YYSYMBOL_vacuum_option_list = 1013,      /* vacuum_option_list  */
  YYSYMBOL_opt_freeze = 1014,              /* opt_freeze  */
  YYSYMBOL_VariableResetStmt = 1015,       /* VariableResetStmt  */
  YYSYMBOL_generic_reset = 1016,           /* generic_reset  */
  YYSYMBOL_reset_rest = 1017,              /* reset_rest  */
  YYSYMBOL_VariableSetStmt = 1018,         /* VariableSetStmt  */
  YYSYMBOL_set_rest = 1019,                /* set_rest  */
  YYSYMBOL_generic_set = 1020,             /* generic_set  */
  YYSYMBOL_var_value = 1021,               /* var_value  */
  YYSYMBOL_zone_value = 1022,              /* zone_value  */
  YYSYMBOL_var_list = 1023,                /* var_list  */
  YYSYMBOL_VariableShowStmt = 1024,        /* VariableShowStmt  */
  YYSYMBOL_show_or_describe = 1025,        /* show_or_describe  */
  YYSYMBOL_opt_tables = 1026,              /* opt_tables  */
  YYSYMBOL_var_name = 1027,                /* var_name  */
  YYSYMBOL_table_id = 1028,                /* table_id  */
  YYSYMBOL_ViewStmt = 1029,                /* ViewStmt  */
  YYSYMBOL_opt_check_option = 1030         /* opt_check_option  */
};
typedef enum yysymbol_kind_t yysymbol_kind_t;




#ifdef short
# undef short
#endif

/* On compilers that do not define __PTRDIFF_MAX__ etc., make sure
   <limits.h> and (if available) <stdint.h> are included
   so that the code can choose integer types of a good width.  */

#ifndef __PTRDIFF_MAX__
# include <limits.h> /* INFRINGES ON USER NAME SPACE */
# if defined __STDC_VERSION__ && 199901 <= __STDC_VERSION__
#  include <stdint.h> /* INFRINGES ON USER NAME SPACE */
#  define YY_STDINT_H
# endif
#endif

/* Narrow types that promote to a signed type and that can represent a
   signed or unsigned integer of at least N bits.  In tables they can
   save space and decrease cache pressure.  Promoting to a signed type
   helps avoid bugs in integer arithmetic.  */

#ifdef __INT_LEAST8_MAX__
typedef __INT_LEAST8_TYPE__ yytype_int8;
#elif defined YY_STDINT_H
typedef int_least8_t yytype_int8;
#else
typedef signed char yytype_int8;
#endif

#ifdef __INT_LEAST16_MAX__
typedef __INT_LEAST16_TYPE__ yytype_int16;
#elif defined YY_STDINT_H
typedef int_least16_t yytype_int16;
#else
typedef short yytype_int16;
#endif

/* Work around bug in HP-UX 11.23, which defines these macros
   incorrectly for preprocessor constants.  This workaround can likely
   be removed in 2023, as HPE has promised support for HP-UX 11.23
   (aka HP-UX 11i v2) only through the end of 2022; see Table 2 of
   <https://h20195.www2.hpe.com/V2/getpdf.aspx/4AA4-7673ENW.pdf>.  */
#ifdef __hpux
# undef UINT_LEAST8_MAX
# undef UINT_LEAST16_MAX
# define UINT_LEAST8_MAX 255
# define UINT_LEAST16_MAX 65535
#endif

#if defined __UINT_LEAST8_MAX__ && __UINT_LEAST8_MAX__ <= __INT_MAX__
typedef __UINT_LEAST8_TYPE__ yytype_uint8;
#elif (!defined __UINT_LEAST8_MAX__ && defined YY_STDINT_H \
       && UINT_LEAST8_MAX <= INT_MAX)
typedef uint_least8_t yytype_uint8;
#elif !defined __UINT_LEAST8_MAX__ && UCHAR_MAX <= INT_MAX
typedef unsigned char yytype_uint8;
#else
typedef short yytype_uint8;
#endif

#if defined __UINT_LEAST16_MAX__ && __UINT_LEAST16_MAX__ <= __INT_MAX__
typedef __UINT_LEAST16_TYPE__ yytype_uint16;
#elif (!defined __UINT_LEAST16_MAX__ && defined YY_STDINT_H \
       && UINT_LEAST16_MAX <= INT_MAX)
typedef uint_least16_t yytype_uint16;
#elif !defined __UINT_LEAST16_MAX__ && USHRT_MAX <= INT_MAX
typedef unsigned short yytype_uint16;
#else
typedef int yytype_uint16;
#endif

#ifndef YYPTRDIFF_T
# if defined __PTRDIFF_TYPE__ && defined __PTRDIFF_MAX__
#  define YYPTRDIFF_T __PTRDIFF_TYPE__
#  define YYPTRDIFF_MAXIMUM __PTRDIFF_MAX__
# elif defined PTRDIFF_MAX
#  ifndef ptrdiff_t
#   include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  endif
#  define YYPTRDIFF_T ptrdiff_t
#  define YYPTRDIFF_MAXIMUM PTRDIFF_MAX
# else
#  define YYPTRDIFF_T long
#  define YYPTRDIFF_MAXIMUM LONG_MAX
# endif
#endif

#ifndef YYSIZE_T
# ifdef __SIZE_TYPE__
#  define YYSIZE_T __SIZE_TYPE__
# elif defined size_t
#  define YYSIZE_T size_t
# elif defined __STDC_VERSION__ && 199901 <= __STDC_VERSION__
#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  define YYSIZE_T size_t
# else
#  define YYSIZE_T unsigned
# endif
#endif

#define YYSIZE_MAXIMUM                                  \
  YY_CAST (YYPTRDIFF_T,                                 \
           (YYPTRDIFF_MAXIMUM < YY_CAST (YYSIZE_T, -1)  \
            ? YYPTRDIFF_MAXIMUM                         \
            : YY_CAST (YYSIZE_T, -1)))

#define YYSIZEOF(X) YY_CAST (YYPTRDIFF_T, sizeof (X))


/* Stored state numbers (used for stacks). */
typedef yytype_int16 yy_state_t;

/* State numbers in computations.  */
typedef int yy_state_fast_t;

#ifndef YY_
# if defined YYENABLE_NLS && YYENABLE_NLS
#  if ENABLE_NLS
#   include <libintl.h> /* INFRINGES ON USER NAME SPACE */
#   define YY_(Msgid) dgettext ("bison-runtime", Msgid)
#  endif
# endif
# ifndef YY_
#  define YY_(Msgid) Msgid
# endif
#endif


#ifndef YY_ATTRIBUTE_PURE
# if defined __GNUC__ && 2 < __GNUC__ + (96 <= __GNUC_MINOR__)
#  define YY_ATTRIBUTE_PURE __attribute__ ((__pure__))
# else
#  define YY_ATTRIBUTE_PURE
# endif
#endif

#ifndef YY_ATTRIBUTE_UNUSED
# if defined __GNUC__ && 2 < __GNUC__ + (7 <= __GNUC_MINOR__)
#  define YY_ATTRIBUTE_UNUSED __attribute__ ((__unused__))
# else
#  define YY_ATTRIBUTE_UNUSED
# endif
#endif

/* Suppress unused-variable warnings by "using" E.  */
#if ! defined lint || defined __GNUC__
# define YY_USE(E) ((void) (E))
#else
# define YY_USE(E) /* empty */
#endif

/* Suppress an incorrect diagnostic about yylval being uninitialized.  */
#if defined __GNUC__ && ! defined __ICC && 406 <= __GNUC__ * 100 + __GNUC_MINOR__
# if __GNUC__ * 100 + __GNUC_MINOR__ < 407
#  define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN                           \
    _Pragma ("GCC diagnostic push")                                     \
    _Pragma ("GCC diagnostic ignored \"-Wuninitialized\"")
# else
#  define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN                           \
    _Pragma ("GCC diagnostic push")                                     \
    _Pragma ("GCC diagnostic ignored \"-Wuninitialized\"")              \
    _Pragma ("GCC diagnostic ignored \"-Wmaybe-uninitialized\"")
# endif
# define YY_IGNORE_MAYBE_UNINITIALIZED_END      \
    _Pragma ("GCC diagnostic pop")
#else
# define YY_INITIAL_VALUE(Value) Value
#endif
#ifndef YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_END
#endif
#ifndef YY_INITIAL_VALUE
# define YY_INITIAL_VALUE(Value) /* Nothing. */
#endif

#if defined __cplusplus && defined __GNUC__ && ! defined __ICC && 6 <= __GNUC__
# define YY_IGNORE_USELESS_CAST_BEGIN                          \
    _Pragma ("GCC diagnostic push")                            \
    _Pragma ("GCC diagnostic ignored \"-Wuseless-cast\"")
# define YY_IGNORE_USELESS_CAST_END            \
    _Pragma ("GCC diagnostic pop")
#endif
#ifndef YY_IGNORE_USELESS_CAST_BEGIN
# define YY_IGNORE_USELESS_CAST_BEGIN
# define YY_IGNORE_USELESS_CAST_END
#endif


#define YY_ASSERT(E) ((void) (0 && (E)))

#if !defined yyoverflow

/* The parser invokes alloca or malloc; define the necessary symbols.  */

# ifdef YYSTACK_USE_ALLOCA
#  if YYSTACK_USE_ALLOCA
#   ifdef __GNUC__
#    define YYSTACK_ALLOC __builtin_alloca
#   elif defined __BUILTIN_VA_ARG_INCR
#    include <alloca.h> /* INFRINGES ON USER NAME SPACE */
#   elif defined _AIX
#    define YYSTACK_ALLOC __alloca
#   elif defined _MSC_VER
#    include <malloc.h> /* INFRINGES ON USER NAME SPACE */
#    define alloca _alloca
#   else
#    define YYSTACK_ALLOC alloca
#    if ! defined _ALLOCA_H && ! defined EXIT_SUCCESS
#     include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
      /* Use EXIT_SUCCESS as a witness for stdlib.h.  */
#     ifndef EXIT_SUCCESS
#      define EXIT_SUCCESS 0
#     endif
#    endif
#   endif
#  endif
# endif

# ifdef YYSTACK_ALLOC
   /* Pacify GCC's 'empty if-body' warning.  */
#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (0)
#  ifndef YYSTACK_ALLOC_MAXIMUM
    /* The OS might guarantee only one guard page at the bottom of the stack,
       and a page size can be as small as 4096 bytes.  So we cannot safely
       invoke alloca (N) if N exceeds 4096.  Use a slightly smaller number
       to allow for a few compiler-allocated temporary stack slots.  */
#   define YYSTACK_ALLOC_MAXIMUM 4032 /* reasonable circa 2006 */
#  endif
# else
#  define YYSTACK_ALLOC YYMALLOC
#  define YYSTACK_FREE YYFREE
#  ifndef YYSTACK_ALLOC_MAXIMUM
#   define YYSTACK_ALLOC_MAXIMUM YYSIZE_MAXIMUM
#  endif
#  if (defined __cplusplus && ! defined EXIT_SUCCESS \
       && ! ((defined YYMALLOC || defined malloc) \
             && (defined YYFREE || defined free)))
#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#   ifndef EXIT_SUCCESS
#    define EXIT_SUCCESS 0
#   endif
#  endif
#  ifndef YYMALLOC
#   define YYMALLOC malloc
#   if ! defined malloc && ! defined EXIT_SUCCESS
void *malloc (YYSIZE_T); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
#  ifndef YYFREE
#   define YYFREE free
#   if ! defined free && ! defined EXIT_SUCCESS
void free (void *); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
# endif
#endif /* !defined yyoverflow */

#if (! defined yyoverflow \
     && (! defined __cplusplus \
         || (defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL \
             && defined YYSTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))

/* A type that is properly aligned for any stack member.  */
union yyalloc
{
  yy_state_t yyss_alloc;
  YYSTYPE yyvs_alloc;
  YYLTYPE yyls_alloc;
};

/* The size of the maximum gap between one aligned stack and the next.  */
# define YYSTACK_GAP_MAXIMUM (YYSIZEOF (union yyalloc) - 1)

/* The size of an array large to enough to hold all stacks, each with
   N elements.  */
# define YYSTACK_BYTES(N) \
     ((N) * (YYSIZEOF (yy_state_t) + YYSIZEOF (YYSTYPE) \
             + YYSIZEOF (YYLTYPE)) \
      + 2 * YYSTACK_GAP_MAXIMUM)

# define YYCOPY_NEEDED 1

/* Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */
# define YYSTACK_RELOCATE(Stack_alloc, Stack)                           \
    do                                                                  \
      {                                                                 \
        YYPTRDIFF_T yynewbytes;                                         \
        YYCOPY (&yyptr->Stack_alloc, Stack, yysize);                    \
        Stack = &yyptr->Stack_alloc;                                    \
        yynewbytes = yystacksize * YYSIZEOF (*Stack) + YYSTACK_GAP_MAXIMUM; \
        yyptr += yynewbytes / YYSIZEOF (*yyptr);                        \
      }                                                                 \
    while (0)

#endif

#if defined YYCOPY_NEEDED && YYCOPY_NEEDED
/* Copy COUNT objects from SRC to DST.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if defined __GNUC__ && 1 < __GNUC__
#   define YYCOPY(Dst, Src, Count) \
      __builtin_memcpy (Dst, Src, YY_CAST (YYSIZE_T, (Count)) * sizeof (*(Src)))
#  else
#   define YYCOPY(Dst, Src, Count)              \
      do                                        \
        {                                       \
          YYPTRDIFF_T yyi;                      \
          for (yyi = 0; yyi < (Count); yyi++)   \
            (Dst)[yyi] = (Src)[yyi];            \
        }                                       \
      while (0)
#  endif
# endif
#endif /* !YYCOPY_NEEDED */

/* YYFINAL -- State number of the termination state.  */
#define YYFINAL  741
/* YYLAST -- Last index in YYTABLE.  */
#define YYLAST   72543

/* YYNTOKENS -- Number of terminals.  */
#define YYNTOKENS  534
/* YYNNTS -- Number of nonterminals.  */
#define YYNNTS  497
/* YYNRULES -- Number of rules.  */
#define YYNRULES  2256
/* YYNSTATES -- Number of states.  */
#define YYNSTATES  3778

/* YYMAXUTOK -- Last valid token kind.  */
#define YYMAXUTOK   763


/* YYTRANSLATE(TOKEN-NUM) -- Symbol number corresponding to TOKEN-NUM
   as returned by yylex, with out-of-bounds checking.  */
#define YYTRANSLATE(YYX)                                \
  (0 <= (YYX) && (YYX) <= YYMAXUTOK                     \
   ? YY_CAST (yysymbol_kind_t, yytranslate[YYX])        \
   : YYSYMBOL_YYUNDEF)

/* YYTRANSLATE[TOKEN-NUM] -- Symbol number corresponding to TOKEN-NUM
   as returned by yylex.  */
static const yytype_int16 yytranslate[] =
{
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   530,     2,   532,   533,   515,   529,     2,
     520,   521,   513,   511,   524,   512,   522,   514,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,   531,   523,
     507,   509,   508,   526,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,   518,     2,   519,   516,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   527,   525,   528,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
     125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
     135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,   163,   164,
     165,   166,   167,   168,   169,   170,   171,   172,   173,   174,
     175,   176,   177,   178,   179,   180,   181,   182,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,   196,   197,   198,   199,   200,   201,   202,   203,   204,
     205,   206,   207,   208,   209,   210,   211,   212,   213,   214,
     215,   216,   217,   218,   219,   220,   221,   222,   223,   224,
     225,   226,   227,   228,   229,   230,   231,   232,   233,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
     505,   506,   510,   517
};

#if YYDEBUG
/* YYRLINE[YYN] -- Source line where rule number YYN was defined.  */
static const yytype_int16 yyrline[] =
{
       0,   547,   547,   563,   575,   584,   585,   586,   587,   588,
     589,   590,   591,   592,   593,   594,   595,   596,   597,   598,
     599,   600,   601,   602,   603,   604,   605,   606,   607,   608,
     609,   610,   611,   612,   613,   614,   615,   616,   617,   618,
     619,   620,   621,   622,   623,   625,     9,    18,    27,    36,
      45,    54,    63,    72,    85,    87,    93,    94,    99,   103,
     107,   118,   126,   130,   139,   148,   157,   166,   175,   184,
     192,   200,   209,   218,   227,   236,   253,   262,   271,   280,
     290,   303,   318,   327,   335,   350,   358,   368,   378,   385,
     392,   400,   407,   418,   419,   424,   428,   433,   438,   446,
     447,   452,   456,   457,   458,     7,    13,    19,    25,     9,
      13,    44,    45,    46,    50,    51,    55,    59,    60,    64,
      70,    75,    76,    77,    78,     6,    15,    25,    35,    45,
      55,    65,    75,    85,    95,   106,   117,   127,   140,   141,
       9,    23,    29,    36,    42,    49,    59,    63,    71,    72,
      73,    77,    86,    95,   102,   103,   108,   120,   125,   150,
     155,   160,   166,   176,   186,   192,   203,   214,   229,   230,
     236,   237,   242,   243,   249,   250,   254,   255,   260,   262,
     268,   269,   273,   274,   277,   278,   283,     7,    16,    25,
      46,    47,    50,    54,     7,    14,    22,     9,    19,    29,
      42,    43,     7,    14,    31,    51,    52,     9,    17,    29,
      30,    34,    35,    36,    41,    42,    43,    48,    52,    56,
      60,    64,    68,    72,    76,    80,    84,    88,    92,    97,
     101,   105,   112,   113,   117,   118,   119,     2,     9,    15,
      21,    28,    35,    45,    46,    47,     2,    40,    41,    42,
      50,    64,    66,    70,    72,    76,    89,    92,    96,   100,
     104,   108,   109,   113,   122,   132,   146,   149,   153,   176,
     177,   182,   184,   188,   190,   194,   196,   201,   204,   208,
     214,   218,   220,   223,   232,   234,   238,   264,   268,   270,
     274,   276,   280,   280,   280,   284,   286,   288,   292,   294,
     298,   300,   302,   304,   306,   310,   312,   316,   328,   340,
     352,   364,   377,   391,   393,   398,   423,   425,   429,   431,
     436,   445,   454,   463,   473,   483,   485,   489,   491,   495,
     506,   515,   527,   536,   538,   542,   565,   567,   571,   573,
     584,   586,   597,   599,   610,   612,   621,   632,   640,   649,
     653,   655,   659,   661,   667,   669,   671,   675,   677,   681,
     687,   695,   697,   701,   712,   728,   755,   788,   789,   791,
     799,   814,   816,   818,   820,   822,   824,   826,   828,   830,
     832,   834,   836,   838,   840,   842,   845,   847,   849,   851,
     853,   855,   860,   865,   872,   877,   884,   889,   896,   901,
     909,   917,   925,   933,   951,   959,   967,   975,   983,   991,
     999,  1003,  1019,  1027,  1035,  1043,  1051,  1059,  1067,  1071,
    1075,  1079,  1083,  1091,  1099,  1107,  1115,  1135,     7,    21,
      36,    56,    57,    84,    85,    86,    87,    88,    89,    93,
      94,    99,   104,   105,   106,   107,   108,   113,   120,   121,
     122,   139,   146,   153,   163,   173,   185,   193,   202,   220,
     221,   225,   226,   230,   239,   262,   276,   283,   288,   290,
     292,   294,   297,   300,   301,   302,   303,   308,   312,   313,
     318,   325,   330,   331,   332,   333,   334,   335,   336,   337,
     343,   344,   348,   353,   360,   367,   374,   386,   387,   388,
     389,   393,   398,   399,   400,   405,   410,   411,   412,   413,
     414,   415,   420,   440,   469,   470,   474,   478,   479,   480,
     484,   488,   496,   497,   502,   503,   504,   508,   516,   517,
     522,   523,   527,   532,   536,   540,   545,   553,   554,   558,
     559,   563,   564,   570,   581,   594,   608,   622,   636,   650,
     673,   677,   684,   688,   696,   701,   708,   718,   719,   720,
     721,   722,   729,   736,   737,   742,   743,     9,    19,    29,
      39,    49,    59,    69,    79,    93,    94,    95,    96,    97,
      98,    99,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   114,   115,   116,   117,   118,   119,   124,   125,
     130,   131,   132,   137,   138,   139,   142,   143,     8,    20,
      33,    46,    58,    70,    86,    87,    91,    95,     7,     1,
      30,    53,    54,    59,    63,    68,    72,    80,    81,    85,
      86,    91,    92,    96,    97,   102,   103,   104,   105,   106,
     111,   119,   123,   128,   129,   134,   138,   143,   147,   151,
     155,   159,   163,   167,   171,   175,   179,   183,   187,   191,
     195,   199,   203,   211,   217,   218,   219,   224,   228,    47,
      48,    52,    53,    68,    69,    76,    84,    92,   100,   108,
     116,   127,   128,   155,   160,   168,   184,   201,   218,   235,
     236,   255,   259,   263,   267,   271,   280,   290,   299,   308,
     318,   328,   339,   353,   370,   370,   374,   374,   378,   378,
     382,   388,   395,   399,   400,   404,   405,   419,   426,   433,
     443,   444,   447,   459,   470,   478,   483,   488,   493,   498,
     506,   514,   519,   524,   531,   532,   536,   537,   538,   542,
     549,   550,   554,   555,   559,   560,   561,   565,   566,   570,
     571,   587,   588,   591,   600,   611,   612,   613,   616,   617,
     618,   622,   623,   624,   625,   629,   630,   634,   636,   652,
     654,   659,   662,   670,   674,   678,   682,   686,   690,   697,
     702,   709,   710,   714,   719,   723,   727,   735,   742,   743,
     748,   749,   753,   754,   759,   761,   763,   768,   788,   789,
     791,   796,   797,   801,   802,   805,   806,   831,   832,   837,
     841,   842,   846,   847,   851,   852,   853,   854,   855,   859,
     872,   879,   886,   893,   894,   898,   899,   903,   904,   908,
     909,   913,   914,   918,   919,   923,   934,   935,   936,   937,
     941,   942,   947,   948,   949,   958,   964,   973,   974,   987,
     988,   992,   993,   997,   998,  1004,  1010,  1018,  1027,  1035,
    1044,  1053,  1057,  1062,  1066,  1076,  1089,  1090,  1093,  1094,
    1095,  1098,  1106,  1116,  1117,  1120,  1128,  1137,  1141,  1148,
    1149,  1153,  1162,  1166,  1191,  1195,  1208,  1222,  1237,  1249,
    1262,  1276,  1290,  1303,  1318,  1337,  1343,  1348,  1354,  1361,
    1362,  1370,  1374,  1378,  1384,  1391,  1396,  1397,  1398,  1399,
    1400,  1401,  1405,  1406,  1418,  1419,  1424,  1431,  1438,  1445,
    1477,  1488,  1501,  1506,  1507,  1510,  1511,  1514,  1515,  1520,
    1521,  1526,  1530,  1536,  1557,  1565,  1578,  1581,  1585,  1585,
    1588,  1589,  1591,  1596,  1603,  1608,  1614,  1619,  1625,  1631,
    1637,  1646,  1648,  1651,  1655,  1656,  1657,  1658,  1659,  1660,
    1665,  1685,  1686,  1687,  1688,  1699,  1713,  1714,  1720,  1725,
    1730,  1735,  1740,  1745,  1750,  1755,  1761,  1767,  1773,  1780,
    1802,  1811,  1815,  1823,  1827,  1835,  1847,  1868,  1872,  1878,
    1882,  1895,  1903,  1913,  1915,  1917,  1919,  1921,  1923,  1928,
    1929,  1936,  1945,  1953,  1962,  1973,  1981,  1982,  1983,  1987,
    1987,  1990,  1990,  1993,  1993,  1996,  1996,  1999,  1999,  2002,
    2002,  2005,  2005,  2008,  2008,  2011,  2013,  2015,  2017,  2019,
    2021,  2023,  2025,  2027,  2032,  2037,  2043,  2050,  2055,  2061,
    2067,  2098,  2100,  2102,  2110,  2125,  2127,  2129,  2131,  2133,
    2135,  2137,  2139,  2141,  2143,  2145,  2147,  2149,  2151,  2153,
    2155,  2158,  2160,  2162,  2165,  2167,  2169,  2171,  2173,  2178,
    2183,  2190,  2195,  2202,  2207,  2214,  2219,  2227,  2235,  2243,
    2251,  2269,  2277,  2285,  2293,  2301,  2309,  2317,  2321,  2337,
    2345,  2353,  2361,  2369,  2377,  2385,  2389,  2393,  2397,  2401,
    2409,  2417,  2425,  2433,  2453,  2475,  2486,  2493,  2507,  2515,
    2523,  2543,  2545,  2547,  2549,  2551,  2553,  2555,  2557,  2559,
    2561,  2563,  2565,  2567,  2569,  2571,  2573,  2575,  2577,  2579,
    2581,  2583,  2585,  2589,  2593,  2597,  2611,  2612,  2616,  2630,
    2631,  2632,  2639,  2643,  2647,  2650,  2661,  2666,  2668,  2679,
    2703,  2714,  2725,  2729,  2736,  2740,  2745,  2762,  2768,  2772,
    2779,  2787,  2795,  2806,  2826,  2862,  2873,  2874,  2881,  2887,
    2889,  2891,  2895,  2904,  2909,  2916,  2931,  2938,  2942,  2946,
    2950,  2954,  2964,  2973,  2995,  2996,  3000,  3001,  3002,  3006,
    3007,  3014,  3015,  3019,  3020,  3025,  3033,  3035,  3049,  3052,
    3079,  3080,  3083,  3084,  3095,  3101,  3108,  3117,  3134,  3179,
    3187,  3195,  3203,  3211,  3232,  3233,  3236,  3237,  3241,  3251,
    3252,  3256,  3257,  3261,  3268,  3269,  3274,  3275,  3280,  3281,
    3284,  3285,  3286,  3289,  3290,  3293,  3294,  3295,  3296,  3297,
    3298,  3299,  3300,  3301,  3302,  3303,  3304,  3305,  3306,  3309,
    3311,  3316,  3318,  3323,  3325,  3327,  3329,  3331,  3333,  3335,
    3337,  3351,  3353,  3358,  3362,  3369,  3374,  3380,  3384,  3391,
    3396,  3403,  3408,  3416,  3420,  3426,  3430,  3439,  3450,  3451,
    3455,  3459,  3466,  3467,  3468,  3469,  3470,  3471,  3472,  3473,
    3474,  3475,  3485,  3489,  3496,  3503,  3504,  3520,  3524,  3529,
    3533,  3548,  3553,  3557,  3560,  3563,  3564,  3565,  3568,  3575,
    3585,  3599,  3600,  3604,  3615,  3616,  3619,  3620,  3623,  3627,
    3634,  3642,  3653,  3654,  3659,  3660,  3664,  3665,  3666,  3670,
    3679,  3687,  3703,  3704,  3709,  3710,  3720,  3721,  3725,  3726,
    3730,  3731,  3734,  3750,  3758,  3768,  3769,  3772,  3773,  3776,
    3780,  3781,  3785,  3786,  3789,  3790,  3791,  3801,  3802,  3806,
    3808,  3814,  3815,  3819,  3820,  3823,  3834,  3837,  3848,  3852,
    3856,  3868,  3872,  3881,  3888,  3926,  3930,  3934,  3938,  3942,
    3946,  3950,  3956,  3973,  3974,  3975,  3978,  3979,  3980,  3983,
    3984,  3985,  3988,  3989,  3992,  3994,  3999,  4000,  4003,  4007,
    4008,     7,    18,    19,    23,    24,    25,    26,    27,     7,
      26,    50,    73,    80,    85,    86,    87,    88,     8,    33,
      62,    66,    67,    72,    73,    78,    79,    83,    84,    89,
      90,     7,    16,    25,    34,    43,    52,     5,    12,    22,
      23,     7,    19,    33,     9,    16,    26,    33,    44,    45,
      50,    51,    52,    57,    58,    59,    60,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
      74,    75,    76,    77,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    90,    91,    92,    97,    98,   103,   107,
     115,   116,   121,   122,   123,   129,   134,   142,   143,    10,
      16,    22,    28,    38,    39,    47,    58,    70,    78,    86,
      93,   103,   105,   111,   115,   119,   134,   141,   142,   143,
     147,   148,     7,    14,    20,    28,    29,     8,    22,    36,
      48,    56,    70,    71,    72,    73,    74,    87,    88,    93,
      94,    98,    99,     7,    18,    31,    35,    42,    53,    54,
      60,    61,     9,    19,     7,    18,    25,    34,    35,    39,
      40,     2,     7,    15,    26,    27,    34,     3,    10,    17,
      24,    31,    38,    45,    52,    61,    61,    63,    63,    65,
      66,    70,    71,     6,     8,    21,    34,    47,    65,    87,
      88,    89,    90,    11,    24,    37,    54,    55,    56,    61,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    75,    75,    75,
      75,    75,    75,    75,    75,    75,    75,    75,    75,    75,
      75,    75,    75,    75,    75,    75,    75,    75,    75,    75,
      75,    75,    75,    75,    75,    75,    75,    75,    75,    75,
      75,    75,    75,    75,    75,    75,    75,    75,    75,    75,
      75,    75,    75,    75,    75,    75,    75,    75,    75,    75,
      75,    76,    76,    76,    76,    76,    76,    76,    76,    76,
      76,    76,    76,    76,    76,    76,    76,    76,    76,    76,
      76,    76,    76,    76,    76,    76,    76,    76,    76,    77,
      77,    77,    77,    77,    77,    77,    77,    77,    77,    77,
      77,    77,    77,    77,    77,    77,    77,    77,    77,    77,
      77,    77,    77,    77,    77,    77,    77,    77,    78,    78,
      78,    78,    78,    78,    78,    78,    78,    78,    78,    78,
      78,    78,    78,    78,    78,    78,    78,    78,    78,    78,
      78,    78,    78,    78,    78,    78,    78,    78,    78,    78,
      78,    78,    78,    78,    78,    78,    78,    78,    78,    78,
      78,    78,    78,    78,    78,    78,    78,    78,    78,    78,
      78,    78,    78,    78,    78,    78,    78,    78,    78,    78,
      78,    78,    78,    78,    78,    78,    78,    78,    78,    78,
      78,    78,    78,    78,    78,    78,    78,    78,    78,    79,
      79,    79,    79,    79,    79,    79,    79,    79,    79,    79,
      79,    79,    79,    79,    79,    79,    79,    79,    79,    79,
      79,    79,    79,    79,    79,    79,    79,    79,    79,    79,
      79,    80,    80,    80,    80,    80,    80,    80,    80,    80,
      80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
      80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
      80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
      80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
      80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
      80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
      80,    80,    80,    80,    82,    82,    82,    82,    82,    82,
      82,    82,    82,    82,    82,    82,    82,    82,    82,    82,
      82,    82,    82,    82,    82,    82,    82,    82,    82,    82,
      82,    82,    82,    82,    82,    82,    82,    82,    82,    82,
      82,    82,    82,    82,    82,    82,    82,    82,    82,    82,
      82,    82,    82,    82,    82,    82,    82
};
#endif

/** Accessing symbol of state STATE.  */
#define YY_ACCESSING_SYMBOL(State) YY_CAST (yysymbol_kind_t, yystos[State])

#if YYDEBUG || 0
/* The user-facing name of the symbol whose (internal) number is
   YYSYMBOL.  No bounds checking.  */
static const char *yysymbol_name (yysymbol_kind_t yysymbol) YY_ATTRIBUTE_UNUSED;

/* YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
   First, the terminals, then, starting at YYNTOKENS, nonterminals.  */
static const char *const yytname[] =
{
  "\"end of file\"", "error", "\"invalid token\"", "IDENT", "FCONST",
  "SCONST", "BCONST", "XCONST", "Op", "ICONST", "PARAM", "TYPECAST",
  "DOT_DOT", "COLON_EQUALS", "EQUALS_GREATER", "INTEGER_DIVISION",
  "POWER_OF", "LAMBDA_ARROW", "DOUBLE_ARROW", "LESS_EQUALS",
  "GREATER_EQUALS", "NOT_EQUALS", "ABORT_P", "ABSOLUTE_P", "ACCESS",
  "ACTION", "ACYCLIC", "ADD_P", "ADMIN", "AFTER", "AGGREGATE", "ALL",
  "ALSO", "ALTER", "ALWAYS", "ANALYSE", "ANALYZE", "AND", "ANTI", "ANY",
  "ARE", "ARRAY", "AS", "ASC_P", "ASOF", "ASSERTION", "ASSIGNMENT",
  "ASYMMETRIC", "AT", "ATTACH", "ATTRIBUTE", "AUTHORIZATION", "BACKWARD",
  "BEFORE", "BEGIN_P", "BETWEEN", "BIGINT", "BINARY", "BIT", "BOOLEAN_P",
  "BOTH", "BY", "CACHE", "CALL_P", "CALLED", "CASCADE", "CASCADED", "CASE",
  "CAST", "CATALOG_P", "CHAIN", "CHAR_P", "CHARACTER", "CHARACTERISTICS",
  "CHECK_P", "CHECKPOINT", "CLASS", "CLOSE", "CLUSTER", "COALESCE",
  "COLLATE", "COLLATION", "COLUMN", "COLUMNS", "COMMENT", "COMMENTS",
  "COMMIT", "COMMITTED", "COMPRESSION", "CONCURRENTLY", "CONFIGURATION",
  "CONFLICT", "CONNECTION", "CONSTRAINT", "CONSTRAINTS", "CONTENT_P",
  "CONTINUE_P", "CONVERSION_P", "COPY", "COST", "CREATE_P", "CROSS", "CSV",
  "CUBE", "CURRENT_P", "CURSOR", "CYCLE", "DATA_P", "DATABASE", "DAY_P",
  "DAYS_P", "DEALLOCATE", "DEC", "DECIMAL_P", "DECLARE", "DEFAULT",
  "DEFAULTS", "DEFERRABLE", "DEFERRED", "DEFINER", "DELETE_P", "DELIMITER",
  "DELIMITERS", "DEPENDS", "DESC_P", "DESCRIBE", "DESTINATION", "DETACH",
  "DICTIONARY", "DISABLE_P", "DISCARD", "DISTINCT", "DO", "DOCUMENT_P",
  "DOMAIN_P", "DOUBLE_P", "DROP", "EACH", "EDGE", "ELEMENT_ID", "ELSE",
  "ENABLE_P", "ENCODING", "ENCRYPTED", "END_P", "ENUM_P", "ESCAPE",
  "EVENT", "EXCEPT", "EXCLUDE", "EXCLUDING", "EXCLUSIVE", "EXECUTE",
  "EXISTS", "EXPLAIN", "EXPORT_P", "EXPORT_STATE", "EXTENSION", "EXTERNAL",
  "EXTRACT", "FALSE_P", "FAMILY", "FETCH", "FILTER", "FIRST_P", "FLOAT_P",
  "FOLLOWING", "FOR", "FORCE", "FOREIGN", "FORWARD", "FREEZE", "FROM",
  "FULL", "FUNCTION", "FUNCTIONS", "GENERATED", "GLOB", "GLOBAL", "GRANT",
  "GRANTED", "GRAPH", "GRAPH_TABLE", "GROUP_P", "GROUPING", "GROUPING_ID",
  "GROUPS", "HANDLER", "HAVING", "HEADER_P", "HOLD", "HOUR_P", "HOURS_P",
  "IDENTITY_P", "IF_P", "IGNORE_P", "ILIKE", "IMMEDIATE", "IMMUTABLE",
  "IMPLICIT_P", "IMPORT_P", "IN_P", "INCLUDE_P", "INCLUDING", "INCREMENT",
  "INDEX", "INDEXES", "INHERIT", "INHERITS", "INITIALLY", "INLINE_P",
  "INNER_P", "INOUT", "INPUT_P", "INSENSITIVE", "INSERT", "INSTALL",
  "INSTEAD", "INT_P", "INTEGER", "INTERSECT", "INTERVAL", "INTO",
  "INVOKER", "IS", "ISNULL", "ISOLATION", "JOIN", "JSON", "KEEP", "KEY",
  "LABEL", "LANGUAGE", "LARGE_P", "LAST_P", "LATERAL_P", "LEADING",
  "LEAKPROOF", "LEFT", "LEVEL", "LIKE", "LIMIT", "LISTEN", "LOAD", "LOCAL",
  "LOCATION", "LOCK_P", "LOCKED", "LOGGED", "MACRO", "MAP", "MAPPING",
  "MATCH", "MATERIALIZED", "MAXVALUE", "METHOD", "MICROSECOND_P",
  "MICROSECONDS_P", "MILLISECOND_P", "MILLISECONDS_P", "MINUTE_P",
  "MINUTES_P", "MINVALUE", "MODE", "MONTH_P", "MONTHS_P", "MOVE", "NAME_P",
  "NAMES", "NATIONAL", "NATURAL", "NCHAR", "NEW", "NEXT", "NO", "NODE",
  "NONE", "NOT", "NOTHING", "NOTIFY", "NOTNULL", "NOWAIT", "NULL_P",
  "NULLIF", "NULLS_P", "NUMERIC", "OBJECT_P", "OF", "OFF", "OFFSET",
  "OIDS", "OLD", "ON", "ONLY", "OPERATOR", "OPTION", "OPTIONS", "OR",
  "ORDER", "ORDINALITY", "OUT_P", "OUTER_P", "OVER", "OVERLAPS", "OVERLAY",
  "OVERRIDING", "OWNED", "OWNER", "PARALLEL", "PARSER", "PARTIAL",
  "PARTITION", "PASSING", "PASSWORD", "PATH", "PATHS", "PERCENT", "PIVOT",
  "PIVOT_LONGER", "PIVOT_WIDER", "PLACING", "PLANS", "POLICY", "POSITION",
  "POSITIONAL", "PRAGMA_P", "PRECEDING", "PRECISION", "PREPARE",
  "PREPARED", "PRESERVE", "PRIMARY", "PRIOR", "PRIVILEGES", "PROCEDURAL",
  "PROCEDURE", "PROGRAM", "PROPERTIES", "PROPERTY", "PUBLICATION",
  "QUALIFY", "QUOTE", "RANGE", "READ_P", "REAL", "REASSIGN", "RECHECK",
  "RECURSIVE", "REF", "REFERENCES", "REFERENCING", "REFRESH", "REINDEX",
  "RELATIONSHIP", "RELATIVE_P", "RELEASE", "RENAME", "REPEATABLE",
  "REPLACE", "REPLICA", "RESET", "RESPECT_P", "RESTART", "RESTRICT",
  "RETURNING", "RETURNS", "REVOKE", "RIGHT", "ROLE", "ROLLBACK", "ROLLUP",
  "ROW", "ROWS", "RULE", "SAMPLE", "SAVEPOINT", "SCHEMA", "SCHEMAS",
  "SCROLL", "SEARCH", "SECOND_P", "SECONDS_P", "SECURITY", "SELECT",
  "SEMI", "SEQUENCE", "SEQUENCES", "SERIALIZABLE", "SERVER", "SESSION",
  "SET", "SETOF", "SETS", "SHARE", "SHORTEST", "SHOW", "SIMILAR", "SIMPLE",
  "SKIP", "SMALLINT", "SNAPSHOT", "SOME", "SOURCE", "SQL_P", "STABLE",
  "STANDALONE_P", "START", "STATEMENT", "STATISTICS", "STDIN", "STDOUT",
  "STORAGE", "STORED", "STRICT_P", "STRIP_P", "STRUCT", "SUBSCRIPTION",
  "SUBSTRING", "SUMMARIZE", "SYMMETRIC", "SYSID", "SYSTEM_P", "TABLE",
  "TABLES", "TABLESAMPLE", "TABLESPACE", "TEMP", "TEMPLATE", "TEMPORARY",
  "TEXT_P", "THEN", "TIME", "TIMESTAMP", "TO", "TRAIL", "TRAILING",
  "TRANSACTION", "TRANSFORM", "TREAT", "TRIGGER", "TRIM", "TRUE_P",
  "TRUNCATE", "TRUSTED", "TRY_CAST", "TYPE_P", "TYPES_P", "UNBOUNDED",
  "UNCOMMITTED", "UNENCRYPTED", "UNION", "UNIQUE", "UNKNOWN", "UNLISTEN",
  "UNLOGGED", "UNPIVOT", "UNTIL", "UPDATE", "USE_P", "USER", "USING",
  "VACUUM", "VALID", "VALIDATE", "VALIDATOR", "VALUE_P", "VALUES",
  "VARCHAR", "VARIADIC", "VARYING", "VERBOSE", "VERSION_P", "VERTEX",
  "VIEW", "VIEWS", "VIRTUAL", "VOLATILE", "WALK", "WHEN", "WHERE",
  "WHITESPACE_P", "WINDOW", "WITH", "WITHIN", "WITHOUT", "WORK", "WRAPPER",
  "WRITE_P", "XML_P", "XMLATTRIBUTES", "XMLCONCAT", "XMLELEMENT",
  "XMLEXISTS", "XMLFOREST", "XMLNAMESPACES", "XMLPARSE", "XMLPI",
  "XMLROOT", "XMLSERIALIZE", "XMLTABLE", "YEAR_P", "YEARS_P", "YES_P",
  "ZONE", "NOT_LA", "NULLS_LA", "WITH_LA", "'<'", "'>'", "'='",
  "POSTFIXOP", "'+'", "'-'", "'*'", "'/'", "'%'", "'^'", "UMINUS", "'['",
  "']'", "'('", "')'", "'.'", "';'", "','", "'|'", "'?'", "'{'", "'}'",
  "'&'", "'!'", "':'", "'#'", "'$'", "$accept", "stmtblock", "stmtmulti",
  "stmt", "AlterObjectSchemaStmt", "AlterSeqStmt", "SeqOptList",
  "opt_with", "NumericOnly", "SeqOptElem", "opt_by", "SignedIconst",
  "AlterTableStmt", "alter_identity_column_option_list",
  "alter_column_default", "alter_identity_column_option",
  "alter_generic_option_list", "alter_table_cmd", "alter_using",
  "alter_generic_option_elem", "alter_table_cmds", "alter_generic_options",
  "opt_set_data", "AnalyzeStmt", "AttachStmt", "DetachStmt",
  "opt_database", "opt_database_alias", "CallStmt", "CheckPointStmt",
  "opt_col_id", "qualified_name", "ColId", "ColIdOrString", "Sconst",
  "indirection", "indirection_el", "attr_name", "ColLabel", "CopyStmt",
  "copy_from", "copy_delimiter", "copy_generic_opt_arg_list", "opt_using",
  "opt_as", "opt_program", "copy_options", "copy_generic_opt_arg",
  "copy_generic_opt_elem", "opt_oids", "copy_opt_list", "opt_binary",
  "copy_opt_item", "copy_generic_opt_arg_list_item", "copy_file_name",
  "copy_generic_opt_list", "CreateStmt", "ConstraintAttributeSpec",
  "def_arg", "OptParenthesizedSeqOptList", "generic_option_arg",
  "key_action", "ColConstraint", "ColConstraintElem",
  "GeneratedColumnType", "opt_GeneratedColumnType",
  "GeneratedConstraintElem", "generic_option_elem", "key_update",
  "key_actions", "OnCommitOption", "reloptions", "opt_no_inherit",
  "TableConstraint", "TableLikeOption", "reloption_list", "ExistingIndex",
  "ConstraintAttr", "OptWith", "definition", "TableLikeOptionList",
  "generic_option_name", "ConstraintAttributeElem", "columnDef",
  "def_list", "index_name", "TableElement", "def_elem", "opt_definition",
  "OptTableElementList", "columnElem", "opt_column_list", "ColQualList",
  "key_delete", "reloption_elem", "columnList", "columnList_opt_comma",
  "func_type", "ConstraintElem", "TableElementList", "key_match",
  "TableLikeClause", "OptTemp", "generated_when", "CreateAsStmt",
  "opt_with_data", "create_as_target", "unreserved_keyword",
  "col_name_keyword", "func_name_keyword", "type_name_keyword",
  "other_keyword", "type_func_name_keyword", "reserved_keyword",
  "pgq_col_name_keyword", "CreateFunctionStmt", "macro_alias",
  "param_list", "CreateSchemaStmt", "OptSchemaEltList", "schema_stmt",
  "CreateSeqStmt", "OptSeqOptList", "CreateTypeStmt", "opt_enum_val_list",
  "enum_val_list", "DeallocateStmt", "DeleteStmt",
  "relation_expr_opt_alias", "where_or_current_clause", "using_clause",
  "DropStmt", "drop_type_any_name", "drop_type_name", "any_name_list",
  "opt_drop_behavior", "drop_type_name_on_any_name", "type_name_list",
  "ExecuteStmt", "execute_param_clause", "ExplainStmt", "opt_verbose",
  "explain_option_arg", "ExplainableStmt", "NonReservedWord",
  "NonReservedWord_or_Sconst", "explain_option_list", "analyze_keyword",
  "opt_boolean_or_string", "explain_option_elem", "explain_option_name",
  "ExportStmt", "ImportStmt", "IndexStmt", "access_method",
  "access_method_clause", "opt_concurrently", "opt_index_name",
  "opt_reloptions", "opt_unique", "InsertStmt", "insert_rest",
  "insert_target", "opt_by_name_or_position", "opt_conf_expr",
  "opt_with_clause", "insert_column_item", "set_clause", "opt_or_action",
  "opt_on_conflict", "index_elem", "returning_clause", "override_kind",
  "set_target_list", "opt_collate", "opt_class", "insert_column_list",
  "set_clause_list", "set_clause_list_opt_comma", "index_params",
  "set_target", "LoadStmt", "file_name", "PGQ_IDENT",
  "DropPropertyGraphStmt", "VertexOrNode", "EdgeOrRelationship",
  "CreatePropertyGraphStmt", "VertexTableDefinitionList",
  "KeySpecification", "KeyDefinition", "KeyReference", "LabelList",
  "Discriminator", "VertexTableDefinition", "EdgeTableDefinitionList",
  "EdgeTableDefinition", "AreOptional", "IdentOptionalAs",
  "QualifiednameOptionalAs", "PropertiesList", "ExceptOptional",
  "PropertiesSpec", "PropertiesClause", "GraphTableWhereOptional",
  "GraphTableStmt", "ColumnSpec", "ColumnList", "KeepOptional",
  "PathOrPathsOptional", "GroupOrGroupsOptional", "PathVariableOptional",
  "PathModeOptional", "TopKOptional", "PathPrefix", "PathPatternList",
  "PathPattern", "PatternUnion", "KleeneQuantifierOptional",
  "KleeneOptional", "CostNum", "CostDefault", "CostOptional", "SubPath",
  "EnclosedSubPath", "PathElement", "PathSequence", "PathConcatenation",
  "OrLabelExpression", "AndLabelExpression", "ComposedLabelExpression",
  "LabelExpression", "LabelExpressionOptional", "IsOrColon", "ArrowRight",
  "ArrowLeftBracket", "AbbreviatedEdge", "VariableOptional",
  "FullElementSpec", "EdgePattern", "VertexPattern", "pgq_expr",
  "PragmaStmt", "PrepareStmt", "prep_type_clause", "PreparableStmt",
  "RenameStmt", "opt_column", "SelectStmt", "select_with_parens",
  "select_no_parens", "select_clause", "opt_select", "simple_select",
  "value_or_values", "pivot_keyword", "unpivot_keyword",
  "pivot_column_entry", "pivot_column_list_internal", "pivot_column_list",
  "with_clause", "cte_list", "common_table_expr", "into_clause",
  "OptTempTableName", "opt_table", "all_or_distinct", "by_name",
  "distinct_clause", "opt_all_clause", "opt_ignore_nulls",
  "opt_sort_clause", "sort_clause", "sortby_list", "sortby",
  "opt_asc_desc", "opt_nulls_order", "select_limit", "opt_select_limit",
  "limit_clause", "offset_clause", "sample_count", "sample_clause",
  "opt_sample_func", "tablesample_entry", "tablesample_clause",
  "opt_tablesample_clause", "opt_repeatable_clause", "select_limit_value",
  "select_offset_value", "select_fetch_first_value", "I_or_F_const",
  "row_or_rows", "first_or_next", "group_clause", "group_by_list",
  "group_by_list_opt_comma", "group_by_item", "empty_grouping_set",
  "rollup_clause", "cube_clause", "grouping_sets_clause",
  "grouping_or_grouping_id", "having_clause", "qualify_clause",
  "for_locking_clause", "opt_for_locking_clause", "for_locking_items",
  "for_locking_item", "for_locking_strength", "locked_rels_list",
  "opt_nowait_or_skip", "values_clause", "values_clause_opt_comma",
  "from_clause", "from_list", "from_list_opt_comma", "table_ref",
  "opt_pivot_group_by", "opt_include_nulls", "single_pivot_value",
  "pivot_header", "pivot_value", "pivot_value_list", "unpivot_header",
  "unpivot_value", "unpivot_value_list", "joined_table", "alias_clause",
  "opt_alias_clause", "func_alias_clause", "join_type", "join_outer",
  "join_qual", "relation_expr", "func_table", "rowsfrom_item",
  "rowsfrom_list", "opt_col_def_list", "opt_ordinality", "where_clause",
  "TableFuncElementList", "TableFuncElement", "opt_collate_clause",
  "colid_type_list", "RowOrStruct", "opt_Typename", "Typename",
  "opt_array_bounds", "SimpleTypename", "ConstTypename", "GenericType",
  "opt_type_modifiers", "Numeric", "opt_float", "Bit", "ConstBit",
  "BitWithLength", "BitWithoutLength", "Character", "ConstCharacter",
  "CharacterWithLength", "CharacterWithoutLength", "character",
  "opt_varying", "ConstDatetime", "ConstInterval", "opt_timezone",
  "year_keyword", "month_keyword", "day_keyword", "hour_keyword",
  "minute_keyword", "second_keyword", "millisecond_keyword",
  "microsecond_keyword", "opt_interval", "a_expr", "b_expr", "c_expr",
  "d_expr", "indirection_expr", "func_application", "func_expr",
  "func_expr_windowless", "func_expr_common_subexpr", "list_comprehension",
  "within_group_clause", "filter_clause", "export_clause", "window_clause",
  "window_definition_list", "window_definition", "over_clause",
  "window_specification", "opt_existing_window_name",
  "opt_partition_clause", "opt_frame_clause", "frame_extent",
  "frame_bound", "qualified_row", "row", "dict_arg", "dict_arguments",
  "dict_arguments_opt_comma", "map_arg", "map_arguments",
  "map_arguments_opt_comma", "opt_map_arguments_opt_comma", "sub_type",
  "all_Op", "MathOp", "qual_Op", "qual_all_Op", "subquery_Op",
  "any_operator", "c_expr_list", "c_expr_list_opt_comma", "expr_list",
  "expr_list_opt_comma", "opt_expr_list_opt_comma", "func_arg_list",
  "func_arg_expr", "type_list", "extract_list", "extract_arg",
  "overlay_list", "overlay_placing", "position_list", "substr_list",
  "substr_from", "substr_for", "trim_list", "in_expr", "case_expr",
  "when_clause_list", "when_clause", "case_default", "case_arg",
  "columnref", "opt_slice_bound", "opt_indirection", "opt_func_arguments",
  "extended_indirection_el", "opt_extended_indirection", "opt_asymmetric",
  "opt_target_list_opt_comma", "target_list", "target_list_opt_comma",
  "target_el", "except_list", "opt_except_list", "replace_list_el",
  "replace_list", "replace_list_opt_comma", "opt_replace_list",
  "qualified_name_list", "name_list", "name_list_opt_comma",
  "name_list_opt_comma_opt_bracket", "name", "func_name", "AexprConst",
  "Iconst", "type_function_name", "function_name_token", "type_name_token",
  "any_name", "attrs", "opt_name_list", "param_name", "ColLabelOrString",
  "TransactionStmt", "opt_transaction", "UpdateStmt", "UseStmt",
  "VacuumStmt", "vacuum_option_elem", "opt_full", "vacuum_option_list",
  "opt_freeze", "VariableResetStmt", "generic_reset", "reset_rest",
  "VariableSetStmt", "set_rest", "generic_set", "var_value", "zone_value",
  "var_list", "VariableShowStmt", "show_or_describe", "opt_tables",
  "var_name", "table_id", "ViewStmt", "opt_check_option", YY_NULLPTR
};

static const char *
yysymbol_name (yysymbol_kind_t yysymbol)
{
  return yytname[yysymbol];
}
#endif

#define YYPACT_NINF (-3284)

#define yypact_value_is_default(Yyn) \
  ((Yyn) == YYPACT_NINF)

#define YYTABLE_NINF (-2131)

#define yytable_value_is_error(Yyn) \
  ((Yyn) == YYTABLE_NINF)

/* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
   STATE-NUM.  */
static const int yypact[] =
{
    8860,   -67,  1265, -3284, -3284,   492,   -67, 50082, 64596,   -67,
     183,  2139, 52086, -3284,   524,  8580,   -67, 55092, 72006,   656,
     289, 31617,   708, 55593, 55593, -3284, -3284, -3284, 64596, 55092,
   56094,   -67,   318, 65097, -3284,   -67, 33621, 52587,   533, -3284,
   55092,   206,   426, 56595, 55092, 34122,  1013,   498, -3284, -3284,
   -3284, -3284, -3284, -3284, -3284, -3284, -3284, -3284, -3284, -3284,
   -3284, -3284, -3284, -3284, -3284, -3284, -3284, -3284, -3284,   561,
   -3284, -3284, -3284, -3284,   172, -3284, -3284, -3284, -3284, -3284,
   -3284, -3284, -3284,   161, -3284,   804,   169, 31617, 31617,  1513,
     542, -3284, -3284, -3284, -3284, -3284, -3284, -3284, -3284, 33120,
   -3284, -3284, -3284, -3284, 57096, 55092, 57597, 53088, 58098, -3284,
    1079, -3284,   204, -3284, -3284, -3284, -3284, -3284, -3284, -3284,
   -3284, -3284, -3284, -3284, -3284, -3284, -3284, -3284, -3284, -3284,
   -3284, -3284, -3284, -3284, -3284, -3284, -3284, -3284, -3284, -3284,
   -3284, -3284, -3284, -3284, -3284, -3284, -3284, -3284, -3284, -3284,
   -3284, -3284, -3284, -3284, -3284, -3284, -3284, -3284, -3284, -3284,
   -3284, -3284, -3284, -3284, -3284, -3284, -3284, -3284, -3284, -3284,
   -3284, -3284, -3284, -3284, -3284, -3284, -3284, -3284, -3284, -3284,
   -3284, -3284, -3284, -3284, -3284, -3284, -3284, -3284, -3284, -3284,
   -3284, -3284, -3284, -3284, -3284, -3284, -3284, -3284, -3284, -3284,
   -3284, -3284, -3284, -3284, -3284, -3284, -3284, -3284, -3284, -3284,
   -3284, -3284, -3284, -3284, -3284, -3284, -3284, -3284, -3284, -3284,
   -3284, -3284, -3284, -3284, -3284, -3284, -3284, -3284, -3284, -3284,
     210, -3284, -3284, -3284, -3284, -3284, -3284, -3284, -3284, -3284,
   -3284, -3284, -3284, -3284, -3284, -3284, -3284, -3284, -3284, -3284,
   -3284, -3284, -3284, -3284, -3284, -3284, -3284, -3284, -3284, -3284,
   -3284, -3284, -3284, -3284, -3284, -3284, -3284, -3284, -3284, -3284,
   -3284, -3284, -3284, -3284, -3284, -3284, -3284, -3284, -3284, -3284,
   -3284, -3284, -3284, -3284, -3284, -3284, -3284, -3284, -3284, -3284,
     212, -3284, -3284, -3284, -3284, -3284, -3284, -3284, -3284, -3284,
   -3284, -3284, -3284, -3284, -3284, -3284, -3284, -3284, -3284, -3284,
   -3284, -3284, -3284, -3284, -3284, -3284, -3284, -3284, -3284, -3284,
   -3284, -3284, -3284, -3284, -3284, -3284, -3284, -3284, -3284, -3284,
   -3284, -3284, -3284, -3284, -3284, -3284, -3284, -3284, -3284, -3284,
   -3284, -3284, -3284, -3284, -3284, -3284, -3284, -3284, -3284, -3284,
   -3284, -3284, -3284, -3284, -3284, -3284, -3284, -3284, -3284, -3284,
   -3284, -3284, -3284, -3284, -3284, -3284, -3284, -3284, -3284, -3284,
   -3284, -3284, -3284, -3284, -3284, -3284, -3284, -3284, -3284, -3284,
   -3284, -3284, -3284, -3284, -3284, -3284, -3284, -3284, -3284, -3284,
   -3284, -3284, -3284, -3284, -3284, -3284, -3284, -3284, -3284, -3284,
   -3284, -3284, -3284, -3284, -3284, -3284, -3284, -3284, -3284, -3284,
   -3284, -3284, -3284, -3284, -3284, -3284, -3284, -3284, -3284, -3284,
   -3284, -3284, -3284, -3284, -3284, -3284, -3284, -3284,   213, -3284,
   -3284, -3284, -3284, -3284, -3284, -3284, -3284, -3284, -3284, -3284,
   -3284, -3284, -3284, -3284, -3284, -3284, -3284, -3284, -3284, -3284,
   -3284, -3284, -3284, -3284, -3284, -3284, -3284, -3284, -3284, -3284,
   -3284, -3284, -3284, -3284, -3284, -3284, -3284, -3284, -3284, -3284,
   -3284, -3284, -3284, -3284, -3284, -3284, -3284, -3284, -3284, -3284,
   -3284, -3284, -3284, -3284, -3284, -3284, -3284, -3284, -3284, -3284,
   -3284, -3284, -3284, -3284, -3284, -3284, -3284, -3284, -3284,   335,
     214, -3284, -3284, -3284,   577, -3284, -3284, -3284, -3284, -3284,
   -3284, -3284, -3284, -3284, -3284,  2523, 55092,   355,   980,   757,
     950, 58599, -3284, -3284, 55092, -3284, -3284,   868,   991, -3284,
   -3284, 53589, -3284, -3284, -3284,  1008,  1208,  1060, -3284, -3284,
     864, -3284,   170, -3284, -3284,   910,   876, -3284,  1212, -3284,
   -3284, -3284, -3284, -3284, -3284, -3284,   958, -3284, 68604, -3284,
   65598, 59100, 59601, -3284,   863,  2157,  9518, 72023, 30612, -3284,
   -3284, -3284, -3284, -3284, -3284, -3284, -3284, -3284, -3284, -3284,
   -3284, -3284, -3284, -3284, -3284, -3284,   561, -3284, -3284, -3284,
   -3284, -3284, -3284, -3284, -3284, -3284, -3284, -3284, -3284, -3284,
   -3284, 55593, 64596, 55593,   896,   922,  1283,   965,  1010, 32118,
    1015, 34624,  1035,  1040,  1328,  1045,  1057,  1074,  1085,   426,
   30111,  1103,   335, -3284, 60102, 60102,   382,  4231, -3284, 60102,
   60603, -3284,  1147, -3284,  1079, -3284, -3284, -3284, -3284, -3284,
     697,  1137, -3284,  1161,  1433, -3284, -3284, -3284,  1164, -3284,
   -3284,  1399, 20141, 20141, 66099, 66099,  1079, 66099,  1190, -3284,
   -3284,    59, -3284,  2523, -3284, -3284,  1513,  1175,   335, -3284,
   -3284, 52587, -3284, -3284,   299,  1535, 20141, 55092,  1192, -3284,
    1233,  1192, -3284, -3284, -3284, -3284, -3284, -3284, -3284, -3284,
   -3284, -3284, -3284, -3284, -3284, -3284, -3284, -3284, -3284, -3284,
   -3284, -3284, -3284, -3284, -3284, -3284, -3284, -3284, -3284, -3284,
   -3284, -3284, -3284, -3284, -3284, -3284, -3284, -3284, -3284, -3284,
   -3284, -3284, -3284,   426, -3284, -3284, -3284, -3284, -3284, -3284,
   -3284, -3284, -3284, -3284, -3284, -3284, -3284, -3284,  1480,  1215,
    1220, -3284,  8860, -3284, 55092,  1589,  1495, 52587,   786,   786,
    1760,   786,  1037,  1089,  2465,  4527, -3284,  1109, -3284,  1307,
    1406,  1342,  1623, -3284,  1175,  1705,  1185,  1514,  1719,  2862,
    1721,  1216,  1723,  1477,  1836, 20141, 47577,   335, -3284, 11114,
    1367,  1372, -3284, -3284, -3284, -3284,   762, 55092,  1629, -3284,
    1890, -3284, -3284,  1465, 61104, 61605, 62106, 62607,  1859, -3284,
   -3284,  1799, -3284, -3284, -3284,  1469, -3284, -3284, -3284, 55092,
     814, -3284, -3284, -3284, -3284, -3284, -3284,  1488, -3284,  1488,
    1488, -3284, -3284, -3284, -3284,  1441,  1441,  1636,  1447, -3284,
   -3284, -3284,  1834, -3284, -3284, -3284, -3284, -3284, -3284, -3284,
   -3284, -3284, -3284,  1466,  1076, -3284,  1488, -3284,  1441, -3284,
   -3284, -3284, -3284, -3284, -3284, -3284, 71550, -3284, -3284, -3284,
   -3284,   707,   799, -3284,  1471, -3284, -3284, -3284, -3284,   147,
    1474, -3284,  1948, -3284, -3284, -3284, -3284, -3284, -3284, -3284,
   -3284,  1479, -3284,  5612,  1441,  1848,  1481,   256, -3284,  1852,
     291, -3284,  1855,  1718, 20141, -3284, -3284, -3284, -3284, -3284,
   -3284, -3284, -3284, -3284, -3284, -3284, -3284, -3284, -3284, -3284,
   -3284, -3284, -3284, -3284, -3284, -3284, -3284, -3284, -3284, -3284,
   -3284, -3284, -3284, -3284, -3284, -3284, -3284, -3284, -3284, -3284,
   -3284, -3284, -3284, -3284, -3284, -3284, -3284, -3284, -3284, -3284,
   -3284, -3284, -3284, -3284, -3284, -3284, -3284, -3284, -3284, -3284,
   -3284, -3284, -3284, -3284, -3284, -3284, -3284, -3284, -3284, -3284,
   -3284, -3284, -3284, -3284, -3284,   426, -3284, -3284, -3284, -3284,
   -3284, -3284, -3284, -3284, -3284, -3284, -3284, -3284, -3284, -3284,
   -3284, -3284,   -73, -3284, -3284, 44355, 72023,  1580,  1492, -3284,
   -3284, 20141, 20141,  1501,  1759, 69090, -3284, 60102, 60603, 20141,
   55092, -3284, 20141, 24389,  1509, 20141, 20141, 11645, 20141, 29109,
   60102,  4231,  1493, -3284,   883, 55092,  1510, -3284,  1607,  1607,
     318, 31617,  1810, -3284,   809,  1807,  1741, -3284, 31617,  1741,
     871,  1523,  1808,  1741, -3284,   241,  1818,  1607, 35125,  1527,
   -3284,  1607,  1749, -3284, -3284, 44355, 14300, 69591,  2014, -3284,
    1820, 64596,  1537, -3284, -3284, -3284, -3284, -3284, -3284,   913,
    2056,   190,  2059, 20141,   190,   190,  1545,   215,   215, -3284,
    1549, -3284,   217,  1550,  1553,  2070,  2075,   199,   168,  1076,
     190, 20141, -3284,   215,  1561,  2078,  1567,  2080,   191,   194,
   -3284,   218, 20141, 20141, 20141,  1941, 20141, 10583, -3284, 55092,
    2084, 47577,   692, -3284,   335,  1574,  1079, -3284, -3284, -3284,
   -3284, -3284, -3284, -3284, -3284,   202,  6870, -3284, -3284, -3284,
    1612, -3284, -3284, -3284, -3284,  1793, 20141, -3284, -3284,  1573,
    1810, -3284,   220, -3284, -3284,  1810, -3284, -3284, -3284, -3284,
   -3284,   246,  1994, 43353, 43854, 64596,   335, -3284, 66600, -3284,
   -3284, -3284, -3284, -3284, -3284,   899, -3284,   561, 45968,  1575,
    1582,  1192, 55092, 55092,  2058, 69090, -3284, -3284, -3284,  1233,
   52587,   197,  1879,  1715, -3284, -3284,  1513,  1513, 15362,   119,
     626,   970, 15893, 20672,  1939,  1827,   227,   738,  1940, -3284,
    1822,  2049, 24389, 20141, 20141,  1037,  1089, 20141, -3284, -3284,
   -3284,  1880, 55092, 50583,  1168,  1182,  1598,  1688,  1602,   725,
    2030, -3284,  1600, -3284,  1692, 55092, 71550,   261, -3284,  2067,
     261,   261,   328,  2068,  1697,   285,  1865,   825,   528,  1334,
   -3284,  1600, 52587,   164,   846,  1600, 55092,  1708,   894,  1600,
   64596,  1492, 41228,  1614, -3284, -3284, -3284, -3284, -3284, -3284,
   -3284, -3284, -3284, -3284, -3284, -3284, -3284, -3284, -3284, -3284,
   -3284, -3284, -3284, -3284, -3284, -3284, -3284, -3284, -3284, -3284,
   -3284, -3284, -3284, -3284, -3284, -3284, -3284, -3284, -3284, -3284,
   -3284, -3284, -3284, -3284, -3284, -3284, -3284, -3284, -3284, -3284,
   -3284, -3284, -3284, -3284, -3284, -3284, -3284, -3284, -3284, -3284,
   -3284, -3284, -3284, -3284, -3284, -3284, -3284, -3284, -3284, -3284,
   -3284, -3284, -3284, -3284, -3284, -3284, -3284, -3284, -3284, -3284,
   -3284, -3284, -3284, -3284, -3284,   176, 14300, -3284,   397,  1252,
    1450,   368,   200,  1494,  1500, 14300,  1556,  1616,   187,  1630,
    1701,  1734,  1738,  1756,  1762,  1768,  1806,   174,  1821,  1885,
    1887,  1889,  1895,  1898, -3284,  1902,   189,  1904,   224, 14300,
    1908, -3284,   192, -3284, 45968,    13, -3284, -3284,  1913,  1710,
   64596,  1656, 55092,   912,   100,  1993,  2052, 70077, 55092,  1870,
    1334,  1872,  1633,  2112,  1881,  1372,  1882,  1637, -3284, 67101,
    2160, -3284,   392, -3284, -3284, -3284, -3284, -3284,  1640, -3284,
   -3284, 20141, -3284, -3284, -3284,  2156, -3284, 69591, 69591,  1488,
    1488, -3284, -3284,  2125,  1736,  1737,  2156, -3284,  2156, -3284,
   64596, -3284, -3284, 69591, -3284, 64596,  1652,  1653,  2156, -3284,
   -3284, -3284, -3284, -3284, -3284, -3284, -3284, -3284, -3284, -3284,
   -3284, -3284, -3284, -3284, -3284,  2156,  1739, -3284,  1742,  1743,
    1745, -3284, -3284, -3284, -3284, -3284, 64596, 47577,  1647, 64596,
   -3284, 55092, 55092, -3284, 55092, 64596,  1662, 72023, 49080, -3284,
   -3284, -3284, -3284,  1140,  1227, -3284, -3284, -3284, -3284, -3284,
   -3284, -3284, -3284, -3284,  1079, 47577, -3284,  5373, 44976,  1663,
   20141, -3284, -3284, -3284, -3284, -3284, -3284, -3284, -3284, -3284,
   -3284,  1664,  2002, -3284, -3284, -3284,  5876,  1668, 45026,  1669,
   24389, 24389,   335,   297, -3284, -3284, 24389,  1671, 49581, 44894,
    1667,  1678, 45375, 16424, 20141, 16424, 16424, 45416, -3284,  1683,
   45506, 60102,  1685, 55092, 54090, -3284, -3284, -3284, 20141, 20141,
    4231, 54591,  1727, -3284, 31617, -3284,  1980, 31617, -3284, -3284,
    2756, -3284, 31617,  1984, 20141, 31617, -3284,  1928,  1929,  1694,
   31617, -3284, 55092,  1695, 55092, -3284, -3284, -3284, -3284, -3284,
    1707,   904, -3284,   923,  3329, -3284, -3284, 20141, 20141, -3284,
   45968,  1740, 20141, -3284, 20141, 46091, 39636, 16955, 46091,  2205,
    2205, 37630, -3284,  1884, 45548, -3284,  1726,  1989,  7339,  1722,
    1716, -3284,  1725,  1724, -3284, -3284, 41850,   171,   335,   335,
   20141, -3284, 20141,  6240,  6240, -3284,   267, 69591, 20141, 20141,
   20141, 20141, 20141, 20141, 20141, 20141, 47076,  1819,   182, 64596,
   20141, 20141,  1731,   943, -3284, 20141,  1971, -3284,  1744, 20141,
    1824,   743, 20141, 20141, 20141, 20141, 20141, 20141, 20141, 20141,
   20141, -3284, -3284, 27562,   315,   763,  2079,  2095,   -20,   411,
   20141,  2089, 11114, -3284,  2089, -3284, -3284, -3284, -3284, -3284,
     221, -3284, -3284, -3284,  1707, -3284,  1707, -3284, 64596, -3284,
   55092,   299, 51585, 20141, -3284, -3284,  1746,  1748,  1747,  1757,
     268,    25, -3284, -3284,  1812, -3284, -3284, 55092, 38131,  2055,
   -3284,   317,  1752, -3284, 44853,  2010,  2055,  1513, -3284, -3284,
   25451,  1888,  2050,  1990, -3284, -3284,  1966,  1968, -3284,  1764,
   46060, 21203, 21203, -3284,  1565, 45968,  1570, -3284, -3284, -3284,
   -3284, -3284, -3284,    85, -3284, 55092,    87, 35626, -3284,  1765,
     126, -3284,  2047,  2107,  2077,  1939,   738,  1776, -3284,  1515,
    1781, 67602, 55092,  2072,  2026,  2076,   -97, 69591, -3284, -3284,
   -3284, -3284, 55092, 64596, 63108, 68103, 48078, 55092, 47577, -3284,
   -3284, -3284, -3284, 55092,  1255, 55092,  5957, -3284, -3284, -3284,
     261, -3284, -3284, -3284, -3284, -3284, 64596, 55092, -3284, -3284,
     261, 64596, 55092,   261, -3284,  1564, 55092, 55092, 55092, 55092,
    1651, 55092, 55092, -3284, -3284, -3284, 20141,    16,    16,  2015,
   12176,   226, -3284, 20141, 20141,  1972, -3284, -3284,   934,  2022,
      95, -3284,  1841, 55092, 55092, 55092, 55092, -3284, -3284,  1893,
   55092,  1043, -3284, -3284, -3284, -3284, -3284,  1798, -3284,  1800,
    2166,  1334, -3284,  2168, 51084,   994,  4147,  2169,  1842,  2170,
   12707,  2283,  2053, -3284, -3284,  2034, -3284, -3284, 20141,  1811,
    1816,   147,  1016, -3284, -3284,  1809,  1653,  1828,  1830,  1825,
    1826, 69591,  1025, -3284,  1026,  2156,   158,  1829,  1831,  1680,
    1670,   652,  1579,   256, -3284, 47577, -3284,   291, -3284,  2048,
     392, -3284, -3284, -3284, -3284, -3284, -3284, -3284,  1492, 31116,
   -3284,  1065, -3284, -3284,  2297,  1079,  2297,   981, -3284, -3284,
    2297, -3284,  2281,  2297, -3284, 69591, -3284,  8306, -3284, 20141,
   20141, -3284, 20141,  2171, -3284,  2337,  2337, 69591, 24389, 24389,
   24389, 24389, 24389, 24389,   837,  1561, 24389, 24389, 24389, 24389,
   24389, 24389, 24389, 24389, 24389, 25982,   325, -3284, -3284,  1078,
    2309, 20141, 20141,  2186,  2171, 20141, -3284, 69591,  1835, -3284,
    1838,  1844, 20141, -3284, 69591, -3284, 55092,  1847,    -6,    23,
   -3284,  1837,  1849, -3284,  1810, -3284,  1067,  1073, 55092,  2972,
    3854,  3900, -3284, -3284, 20141,  2187,  2756, 31617, -3284, 20141,
    1854, -3284, -3284, 31617,  2210, -3284, -3284, -3284, 36127,  2756,
   69591,  1083, -3284, 55092, 69591,  1096, 44355, -3284, 14300, -3284,
   69591, -3284, -3284, -3284, -3284, -3284, -3284,  1851,  1860, 20141,
      93, -3284,  9147,  5179, -3284,  1856, -3284,  1853, -3284, -3284,
   -3284, -3284, -3284, -3284, -3284, -3284, -3284, -3284, -3284, -3284,
   -3284, -3284, -3284,  1862, -3284,  1861, -3284,  1866, 55092, -3284,
   21734, -3284, 64596, -3284, -3284, 20141, 20141, 55092, -3284,  1941,
   -3284,  1867, 40145, -3284, -3284, -3284,   205,   391,  4562,   411,
    9290,  9290,  9290, 46091, -3284, -3284, -3284,  1883, -3284, 24389,
   24389, -3284,  3449,  3278, 10583, -3284, -3284,  2219, -3284,  1197,
   -3284,  1873, -3284, -3284,  5121, -3284, 39636,  6928, 20141,   211,
   -3284, 20141,  1731, 20141,  1961,  9290,  9290,  9290,   554,   554,
     205,   205,   205,   391,   411, -3284, -3284, -3284,  1875, 20141,
   47577, -3284,  1876,  1878,  2243,  1567, 20141, -3284, -3284, 31617,
    1727,    13,  1727,  2156,  6240, -3284,  1233, -3284, -3284,  1233,
   45968, 55092, -3284,  3329, -3284,   792,   232,  2391,   338,   268,
   69090,  1924, 31617,  1927,  2366,  2348, 64596, -3284, -3284,  1886,
    2089,  1906, -3284, -3284,  1912, 20141,  1339,  1912, -3284,  2055,
       4,  2118,  1231,  1231,  1565,  2120, -3284, -3284,  1962, -3284,
   -3284, -3284, 20141, 13238,  1594, -3284,  1601, -3284, -3284, -3284,
   -3284, -3284,  1894, -3284,  2176, -3284, 55092, -3284, -3284, 24389,
    2363, 20141, 36628,  2364,  2161, -3284, -3284, -3284,  2001,  1600,
   20141,  2150, -3284,   201,  1917,  2287,   488,  2236, 64596, -3284,
     387,   444, -3284,   815,  2289,   392,  2290,   392, 47577, 47577,
   47577,  1104, -3284, -3284, -3284,  1079, -3284,  -106,  1115, -3284,
   -3284, -3284, -3284,  2013,  1048,  1334,  1600, -3284, -3284, -3284,
   -3284, -3284, -3284, -3284,   284,  1127,  1600,  2016, -3284,  2017,
   -3284,  2019,  1204,  1600, -3284, -3284, 45968,  1936,   226,   226,
     226, 14300, -3284,  2164,  2172,  1942, 45968, 45968, -3284,   247,
   -3284, 64596, -3284, -3284, -3284,  1972,  2052, 55092,  1334,  1937,
    2419,  1372,  1637,  1944, -3284,  2104,   619,   348, -3284, 64596,
   55092, 55092, 55092, 63609, -3284, -3284, -3284,  1947,  1945, -3284,
      11,  2181,  2180, 55092,  1991, 55092,  1602,  2433, 55092, -3284,
    1131, 17486,  2323, 55092,  1957, -3284, -3284, -3284, -3284,  2156,
   -3284, -3284,   437,   437, -3284, -3284, 64596, -3284,  1963, -3284,
    1964, -3284, -3284, -3284, -3284, -3284, -3284, -3284, -3284, -3284,
   -3284, -3284, -3284, 64596, -3284, -3284, -3284, 48579, -3284, -3284,
   -3284, -3284, 47577, -3284,  1079, -3284,  1079,  2198, 64596, 42351,
    1079, 42852,  1079,  1960, -3284, 45968, 40186, 45968,  2186, -3284,
     231,  2337,   312,   312,   312,  3155,  2312,   195,  1965,   312,
     312,   312,   417,   417,   231,   231,   231,  2337,   325,  1147,
   49581,  1969, -3284, 45968, 45968, -3284, -3284,  1967, -3284, -3284,
   -3284, -3284,  1974,  1975, -3284, -3284, -3284, -3284, -3284, -3284,
   64596,  1285,  1727,   533,   533,   533,   533, -3284, 55092, 55092,
   55092, 45968,  2425,  2302, -3284,  2756, 45968, 55092, -3284, 28093,
   55092, -3284,  2325, -3284,  2418, -3284, 55092,  1142, -3284, -3284,
   -3284, -3284, -3284, 45671, 20141, -3284,  2355, -3284, 20141, 20141,
   -3284, 39636, -3284, -3284,  1981, 10583, 45897, -3284,  2303, 40227,
   45968, -3284,  1884, -3284,  6240, 20141,  2793,  2897, 20141,  1987,
   20141,  2333, -3284, -3284,  1992, -3284, -3284, 69591, 20141,  1995,
    7412, 24389, 24389,  7826, -3284,  8611, 20141, 10583, -3284, 41270,
    1982,  1997,  2015, 18017, -3284,  2212,  1996, -3284,  2187,   226,
    2187,  1998, -3284, -3284, -3284,  2000,  1660, -3284, -3284,   165,
    1660,  1660,  1660, -3284, -3284, -3284,   165,   165,   165, -3284,
     148,   -99, 69090, 69090,   338,   338,  2003, -3284, -3284, 69090,
     812, -3284, -3284, -3284, -3284, 23858,  2435, -3284, 20141,  2158,
   64596,   647,  1201,  1144, -3284,   335, 38131,  1927, 20141,   216,
   -3284, -3284,  2006, -3284,  1912, -3284, -3284, -3284,  2230, -3284,
   -3284, -3284, 55092, -3284,  2009, -3284, 35626,  2344, 10583, -3284,
   35626, 55092, 55092, 40268,  2379, -3284, 64596, 64596, 64596, -3284,
   64596,  2011,  2018,   245,  2020,   363, -3284,  1657,   245,  2358,
     659,  1602,   285,  4654,   723, -3284, -3284, -3284,  2092, 55092,
   -3284, 64596, -3284, -3284, -3284, -3284, -3284, 48078, -3284, -3284,
   39134, 47577, -3284, 47577, 55092, 55092, 55092, 55092, 55092, 55092,
   55092, 55092, 55092, 55092, -3284,  2023,  2024,  2028,  2015, -3284,
   -3284, -3284, -3284, -3284, -3284,   528, -3284,   247,  2021, -3284,
   51084,  2523,  1842,  2496, 55092,  2052,   730, 64095, -3284,  2029,
    2027,  1152,  1334,  2032,  2501, -3284,   994, 51084, -3284, -3284,
   -3284,  2461, -3284,   863,   230, -3284,  1372, -3284,  2523,  1637,
   -3284,  2523, 45968, 64596,  2093, -3284,  1653,  2051, -3284, -3284,
    1653, 69591,  1653, -3284, -3284,   392,  1156, -3284, -3284, -3284,
   -3284, -3284, 64596,  2057, -3284,  2057, -3284, -3284,  2057, -3284,
   -3284, -3284, -3284, 24389,  2403,  2066, 69591, -3284, -3284, 55092,
   -3284, -3284, -3284,  1171,  2071,  2187, 55092, 55092, 55092, 55092,
   -3284, -3284, -3284, 18548, 20141,  2106, -3284,  2073, 14831,  2375,
   -3284, 27044, -3284,   223,  2083, 36127, 64596, -3284, -3284, -3284,
   20141, 45968, -3284, 45968, -3284, -3284, -3284,  7960, -3284,  2064,
    2085, 64596, 20141, -3284, -3284, -3284,   401, 20141, 20141,  3449,
   -3284,  4729, 20141, 69591,  1184,  3449,   347, 20141,  3127,  3876,
   20141, 20141,  9320, 40310, -3284, 20141, 13769, -3284,  2086, 20141,
   40666, 38632, -3284, 31617,  2302,  2105,  2302,  1079, -3284, -3284,
   -3284, -3284, -3284, -3284, -3284, -3284,  1206,   429, -3284, -3284,
   -3284,   165,  2081, -3284,    48,  2108, -3284, -3284,  2088,   338,
    2091, -3284, -3284, -3284,  2580, -3284, 23858, 23858, 23858, 23858,
    7288, -3284,  2288,  2110, 45968, 20141, -3284, -3284, -3284, -3284,
    2130,   -28, 33621,  2305, -3284,  2096, 64596, -3284,  2158, 45968,
   -3284, -3284, 39636, -3284, -3284, -3284, -3284, -3284,  2567,  1124,
    2111,  2113, -3284,  1517, -3284, -3284, 64596,  2114, -3284,  2116,
     245, -3284, 64596,  2149, -3284,   753,  2426,   115, -3284, 20141,
   -3284,  2524,  2598,  1657,  2121, 64596, 55092, 24389, -3284,   784,
     207, -3284,  2415, 55092,  2149,  2559, -3284, -3284, -3284,   363,
   -3284,  2456,  2369, -3284,   261, -3284, 20141,   363,  2370,   251,
   64596, -3284, -3284,  1619, -3284, 69591,   392,   392, -3284,  2131,
    2132,  2133,  2138,  2140,  2141,  2144,  2146,  2155,  2159,  2162,
   -3284,  2163,  2165,  2167,  2177,  2179,  2182,  2188,  2190,  1466,
    2191, -3284,  2192,  2006,  2194,  2200,  2201,  2202,  2206, 70563,
    2208,  2211,  2217,  2222,  1471,  2223,  1140,  1227, -3284, -3284,
   -3284, -3284,  2228, -3284, -3284, -3284,  1481,  2173, -3284, -3284,
   -3284,  2239, -3284,  2245, -3284, -3284, -3284, -3284, -3284, -3284,
   -3284, -3284,   226,  1492,   173, 64596,  2213,  1991,  2638, 19079,
    2644,  2174,   110,   957,  2411,  2189, -3284,  1079,  1842, -3284,
   51084,  5160,   785,  2180, -3284,   209,  1991, -3284,  2583,  1842,
    2209,  2651, -3284,  2440, 64596,  2221, -3284, -3284, -3284, -3284,
   48579,  2057,  5516, 24389, 69591,  1202,  1209, -3284,  2745,  2401,
    2302, -3284, -3284, -3284, -3284, -3284,  2240,   451,  2241, 10052,
    2242, -3284, -3284, -3284, -3284, -3284, -3284, 45968, 45968, 64596,
    2424, -3284, -3284,  2244,  2246, 37129,  2708,  2249, -3284, 14300,
   -3284,  2570, -3284, 29610, -3284, 45968, 20141, -3284, -3284, 41311,
    2578,  3449,  3449,  4729,  1221, -3284,  3449, 20141, 20141,  3449,
    3449, 20141, -3284,  2255, -3284,  1242, -3284, 40707, -3284, 71049,
   -3284, -3284,  2106,  1079,  2106, -3284, -3284, -3284, -3284, -3284,
     338,   812, -3284, -3284,  1924, 28605, -3284,  2250, -3284,   160,
   -3284,  2256,  5315,  5315,  2768,  2768, 69591, 23858, 23858, 23858,
   23858, 23858, 23858, 23858,  2350,   219, 64596, 23858, 23858,  1731,
    1802, -3284, 23858,  2509, -3284, 23858,  2359,   856, 23858, 23858,
   23858, 23858, 23858, 23858, 23858, 23858, 23858, 23858,   -20, 20141,
    2269, -3284, -3284, -3284,  2330, -3284, -3284,  1256,  2705,  2158,
   20141, -3284, -3284,  2276, 35626, -3284, -3284, -3284, -3284, 35626,
     245, -3284,  2450,  2149,  2282, -3284, -3284, -3284, -3284, -3284,
   -3284, 40748, -3284,    78, 20141, -3284,   124,  3155, -3284, -3284,
   -3284, -3284,  2149,  1372, -3284, 55092,  2761,  2652, -3284, -3284,
   45968, -3284, -3284,  2156,  2156, -3284, -3284,  2418, -3284, -3284,
   -3284, -3284,  1481,  -108, 39134, 55092, 55092,  2294, -3284, -3284,
     528,  2689,  1275,   994, -3284,  2523,  2523, 45968, 69090, 55092,
    2295,  2480,   184,  2588, 55092,  2668, 51084, -3284,  2780,  2308,
   55092,  1991,   884,   884, -3284,  2459, -3284,  2463, -3284, -3284,
    2791,   710, -3284, 19610, 55092, -3284, -3284, 32619, -3284,  5516,
    1276, -3284, -3284,  2315,  2317, -3284,  2106, 20141,  2319, 20141,
   -3284, 22265,  2801,  2321, -3284, 20141,  2386, 26513, -3284, 20141,
   -3284, 55092, 60102,    16,  2327, 60102, -3284, -3284, -3284, 20141,
   -3284,  3449,  3449,  3449, -3284, -3284, -3284, -3284,  2537,  2424,
   -3284,  2424,  1924, -3284,  2751, 28605, 28605, -3284, -3284, -3284,
    2343,   812,  2580, -3284,  1266,  8559,   447, 46293, 46293, 46293,
    5315,  2349, 24389, 24389, -3284,  3813,  4166, -3284,  2681, -3284,
    1833, -3284,  2334, -3284, -3284,  7663, -3284, 46222, 23858,   239,
   23858,  1731, 23858,  2423, 46293, 46293, 46293,   535,   535,   277,
     277,   277,  1266,   447, -3284, -3284,  1277, -3284, 20141,  2523,
     335,  5768, 64596,    -2, -3284, 45968, -3284, -3284, -3284, 55092,
   -3284, 47577, -3284,   245,   422,  2339, 20141, 40790,  2579, -3284,
   -3284,  2610, -3284,  2670, -3284,  2405,   612,  2421, -3284, -3284,
   -3284, -3284,  1492,  1079,  1842,  2180,  2209, -3284, -3284,  2174,
     162, -3284, -3284, 69090,  2836, -3284, 69090,  2351, 55092,  2523,
     994,   863, -3284, -3284, -3284, -3284, -3284, -3284, -3284, -3284,
   -3284, -3284, -3284, -3284, -3284,  2523,  2794,  2574,  2796,  2523,
   45968,  2093, 20141,   311, -3284,  1284,  2792, -3284, -3284,  2864,
    2424,  2353, 22265,  2354, -3284,  2356, 64596, 45968,  2505, -3284,
   -3284,  2360, -3284, -3284,   226, 20141, -3284, 41352,  2819,  2015,
    2386,  2386,  2751, 24389, -3284,  2362,   806, -3284, -3284,  2368,
   23858,  4024,  4710, 23858, 23858,  2710, -3284, -3284,  2367, -3284,
   -3284, 69591, 23858, 45615, 24389, 24389, 46314, -3284, 46384, 23858,
    2373, 20141, -3284,   -28, -3284, -3284,  2795, 32619,  2752,  1372,
     245,  2381,  1289, -3284, -3284, -3284, -3284, -3284,  1334, -3284,
   40831,  2617,   146,  2605,  2339, 20141, -3284,  2453, -3284, -3284,
   -3284,  2857, -3284, -3284, -3284, -3284, -3284,  2477,  2859, -3284,
    1304,  2820,  2709, 51084,  2389,  2209,  2180,  1991,  2209,  2616,
   -3284,  2619, -3284,  2395, 41187, 64596, 64596,  1842, 32619, 64596,
    2398,  2386, -3284,  2400, -3284, -3284, -3284, 54090, -3284,  2406,
    2409, -3284, 20141,   103, -3284, -3284, -3284,  3688, -3284, 28605,
   28605, -3284,  1061, 23858, 23858,  3813, 46142, 23858, 69591,  1319,
    3813, 23858,  4774,  4876, 23858, 23858, 46581, 55092, -3284,  2457,
   55092,  1320,    26,  2610, 39134, -3284, 47577,  1167,   422,  2724,
   -3284, -3284, -3284, -3284,   116,  2634, -3284,  2640, -3284, 45968,
   -3284,  2523,  2413, 69090, -3284, 69090,  2787, 55092, -3284, 51084,
   -3284, -3284, -3284, -3284, -3284, -3284, 32619,  2792, -3284,   317,
   -3284,  1727, -3284,   317, -3284, -3284, -3284, -3284,  1079, -3284,
    1667, 22796, 22796,  2416,  1303, -3284, -3284,  2417, -3284,  2414,
    3813,  3813, 46142,  1335, -3284,  3813, 23858, 23858,  3813,  3813,
   23858, -3284,  2523, -3284,  1727, -3284,  2550,  2605, -3284, -3284,
   -3284, -3284, -3284,   720,   720,  2824, -3284,  2489, -3284,  2209,
   55092, -3284, -3284,  2427, -3284,  2428,  1359, 64596,  1912, -3284,
    1912, 24920,  2581,   222, 44935, -3284, -3284, -3284, -3284, -3284,
   -3284, -3284, 28605, 28605, -3284,  3813,  3813,  3813, -3284, -3284,
   38131, -3284, -3284,  2924, -3284,   229, -3284, -3284, -3284,  2429,
    2549, 69090, 69090,  1842,   317, -3284, -3284,  2917, -3284, -3284,
   -3284, -3284, -3284, -3284, -3284,  1727,   245, -3284, -3284, -3284,
   55092,  2434,  2726,  1361, -3284,  1365,  1727,  1912, 23327, -3284,
    2429, -3284,  2437,  2609, 55092, -3284, -3284, 69090, -3284, -3284,
   -3284, -3284, 55092, -3284, -3284,  2437, -3284,  1366,  2833, -3284,
    2726, 55092,  2437,   110,  2729, 69090,  2709, -3284
};

/* YYDEFACT[STATE-NUM] -- Default reduction number in state STATE-NUM.
   Performed when YYTABLE does not specify something else to do.  Zero
   means the default is an error.  */
static const yytype_int16 yydefact[] =
{
     155,   245,     0,  1491,  1490,  1558,   245,     0,  1440,   245,
     646,   564,     0,  1576,  1558,     0,   245,     0,   155,     0,
       0,     0,     0,     0,     0,   706,   709,   707,     0,     0,
       0,   245,   743,     0,  1575,   245,     0,     0,   735,   708,
       0,  1538,     0,     0,     0,     0,     0,     2,     4,     5,
       6,     7,     8,     9,    22,    10,    11,    12,    18,    13,
      14,    16,    17,    19,    20,    21,    24,    25,    26,  1449,
      27,    29,    30,    31,     0,    32,    23,    15,    28,    33,
      34,    35,    36,   682,   669,   748,   681,     0,     0,   154,
     847,   689,    37,    38,    39,    40,    41,    42,    43,  1574,
      44,   244,   243,   237,     0,     0,     0,     0,     0,  1557,
       0,   238,   111,  1600,  1601,  1602,  1603,  1604,  1605,  1606,
    1607,  1608,  1609,  1610,  1961,  1611,  1612,  1613,  1614,  1615,
    1962,  1616,  1617,  1618,  1907,  1908,  1963,  1909,  1910,  1619,
    1620,  1621,  1622,  1623,  1624,  1625,  1626,  1911,  1912,  1627,
    1628,  1629,  1630,  1631,  1913,  1964,  1914,  1632,  1633,  1634,
    1635,  1636,  1965,  1637,  1638,  1639,  1640,  1641,  1642,  1643,
    1644,  1966,  1645,  1646,  1647,  1648,  1649,  1650,  1651,  1652,
    1653,  1654,  1915,  1916,  1655,  1656,  1657,  1658,  1659,  1660,
    1661,  1662,  1663,  1664,  1665,  1666,  1667,  1668,  1669,  1670,
    1671,  1672,  1673,  1674,  1675,  1676,  1677,  1678,  1679,  1680,
    1681,  1682,  1917,  1683,  1684,  1685,  1686,  1687,  1918,  1688,
    1689,  1690,  1919,  1691,  1692,  1693,  1967,  1968,  1694,  1695,
    1920,  1970,  1696,  1697,  1921,  1922,  1698,  1699,  1700,  1701,
    1702,  1703,  1704,  1705,  1971,  1706,  1707,  1708,  1709,  1710,
    1711,  1712,  1713,  1714,  1715,  1716,  1717,  1972,  1923,  1718,
    1719,  1720,  1721,  1722,  1924,  1925,  1926,  1723,  1973,  1974,
    1724,  1975,  1725,  1726,  1727,  1728,  1729,  1730,  1731,  1976,
    1732,  1977,  1733,  1734,  1735,  1736,  1737,  1738,  1739,  1740,
    1927,  1741,  1742,  1743,  1744,  1745,  1746,  1747,  1748,  1749,
    1750,  1751,  1752,  1753,  1754,  1755,  1756,  1757,  1758,  1928,
    1979,  1929,  1759,  1760,  1761,  1930,  1762,  1763,  1980,  1764,
    1931,  1765,  1932,  1766,  1767,  1768,  1769,  1770,  1771,  1772,
    1773,  1774,  1933,  1981,  1775,  1982,  1934,  1776,  1777,  1778,
    1779,  1780,  1781,  1782,  1783,  1784,  1785,  1786,  1787,  1935,
    1983,  1788,  1789,  1936,  1790,  1791,  1792,  1793,  1794,  1795,
    1796,  1797,  1798,  1799,  1800,  1801,  1937,  1802,  1803,  1804,
    1805,  1806,  1807,  1808,  1809,  1810,  1811,  1812,  1813,  1814,
    1815,  1816,  1817,  1818,  1819,  1820,  1984,  1821,  1822,  1823,
    1938,  1824,  1825,  1826,  1827,  1828,  1829,  1830,  1831,  1832,
    1833,  1834,  1835,  1836,  1837,  1838,  1839,  1840,  1939,  1841,
    1842,  1843,  1985,  1844,  1940,  1845,  1846,  1847,  1848,  1849,
    1850,  1851,  1852,  1853,  1854,  1855,  1856,  1857,  1941,  1858,
    1942,  1859,  1860,  1861,  1862,  1987,  1863,  1864,  1865,  1866,
    1867,  1943,  1944,  1868,  1869,  1945,  1870,  1946,  1871,  1872,
    1947,  1873,  1874,  1875,  1876,  1877,  1878,  1879,  1880,  1881,
    1882,  1883,  1884,  1885,  1886,  1887,  1888,  1889,  1948,  1949,
    1890,  1988,  1891,  1892,  1893,  1894,  1895,  1896,  1897,  1898,
    1899,  1900,  1901,  1902,  1950,  1951,  1952,  1953,  1954,  1955,
    1956,  1957,  1958,  1959,  1960,  1903,  1904,  1905,  1906,     0,
     112,   113,  1388,  1583,     0,  1366,   111,  1920,  1927,  1941,
    1438,  1439,   112,   240,   645,     0,     0,     0,     0,     0,
       0,     0,   558,   557,     0,  1429,   563,     0,     0,   115,
     107,  1790,   114,  1365,   105,  1557,     0,     0,   584,   585,
       0,   594,     0,   577,   582,   578,     0,   603,     0,   596,
     604,   586,   576,   597,   587,   575,     0,   605,     0,   580,
       0,     0,     0,   241,   206,   564,     0,   155,     0,  1453,
    1454,  1455,  1456,  1457,  1458,  1463,  1459,  1460,  1461,  1462,
    1464,  1465,  1466,  1467,  1468,  1444,  1449,  1469,  1470,  1471,
    1472,  1473,  1474,  1475,  1476,  1477,  1478,  1479,  1480,  1481,
    1482,     0,  1440,     0,     0,  1913,  1964,  1918,     0,     0,
    1931,     0,  1934,  1935,  1824,  1942,  1945,  1946,  1947,  1948,
       0,   916,   114,   109,   900,     0,   684,   851,   861,   900,
     905,  1166,   928,  1167,     0,   116,  1526,  1525,  1523,  1522,
     194,  1403,  1563,  1943,  1868,  1579,  1564,  1561,  1562,   242,
     742,   740,     0,  1337,  1696,  1735,  1828,  1839,  1943,  1499,
    1503,     0,   239,     0,  1581,  1568,     0,  1569,   114,   690,
     734,     0,   246,  1537,     0,  1542,     0,  1804,   717,   720,
    1397,   718,   247,  2204,  2205,  2206,  2207,  2208,  2209,  2210,
    2211,  2212,  2213,  2214,  2215,  2216,  2217,  2218,  2219,  2220,
    2221,  2222,  2223,  2224,  2225,  2226,  2227,  2228,  2229,  2230,
    2231,  2232,  2233,  2234,  2235,  2236,  2237,  2238,  2239,  2240,
    2241,  2242,  2243,  2244,  2245,  2246,  2247,  2248,  2249,  2250,
    2251,  2252,  2253,  2254,  2255,  2256,   248,   249,     0,   682,
       0,     1,   155,  1448,  1552,     0,   161,     0,   738,   738,
       0,   738,     0,   674,     0,     0,   682,   677,   681,   848,
    1578,  1943,  1868,  1567,  1570,  1704,     0,     0,  1704,     0,
    1704,     0,  1704,     0,  1560,  1323,     0,  1367,   117,     0,
       0,   529,   562,   561,   560,   559,   564,     0,  1704,  1413,
       0,   614,   615,     0,     0,     0,     0,     0,  1424,   108,
     106,     0,  1555,   592,   593,     0,   583,   579,   581,     0,
       0,  1389,  1989,  1990,  1991,   971,  1992,  1000,   978,  1000,
    1000,  1993,  1994,  1995,  1996,   967,   967,  1670,   980,  1997,
    1998,  1999,  1704,  2000,  2001,   968,   969,  1005,  2002,  2003,
    2004,  2005,  2006,     0,     0,  2007,  1000,  2008,   967,  2009,
    2010,  2011,   972,  2012,   938,  2013,     0,  2014,   970,   939,
    2015,  1008,  1008,  2016,     0,   995,  2017,  1390,  1391,   602,
       0,   606,   953,   954,   955,   956,   981,   982,   957,   987,
     988,   992,   958,  1040,   967,  1704,  1392,   602,   598,  1704,
     602,  1359,  1704,     0,     0,   202,  1446,  1483,  2018,  2019,
    2020,  2021,  2022,  2023,  2024,  2025,  2027,  2026,  2028,  2029,
    2030,  2031,  2032,  2033,  2034,  2035,  2036,  2037,  2038,  2039,
    2040,  2041,  2042,  2043,  2044,  2045,  2046,  2049,  2047,  2048,
    2050,  2051,  2052,  2053,  2054,  2055,  2056,  2057,  2058,  2059,
    2060,  2061,  2062,  2064,  2063,  2065,  2066,  2067,  2068,  2069,
    2070,  2071,  2072,  2073,  2074,  2075,  2076,  2077,  2078,  2079,
    2080,  2081,  2082,  2083,  2084,  2085,  2086,  2087,  2088,  2089,
    2090,  2091,  2092,  2093,  2094,  2095,  2096,  2097,  2098,  1484,
    1485,  1497,     0,  1498,  1488,  1452,   155,     0,   644,  1437,
    1524,     0,     0,     0,  1281,     0,   863,   900,   905,     0,
       0,   918,     0,  1296,     0,  1302,     0,     0,     0,   900,
     689,     0,   861,   917,   110,     0,   898,   899,   789,   789,
     743,     0,   724,   910,     0,     0,   913,   911,     0,   913,
       0,     0,     0,   913,   909,   870,     0,   789,     0,   898,
     901,   789,     0,   920,  1443,     0,     0,     0,     0,  1565,
       0,     0,     0,  1369,  1371,  1372,  1249,  1382,  1153,     0,
    1908,  1909,  1910,  1317,  1911,  1912,  1914,  1915,  1916,  1107,
    1917,  1380,  1919,  1921,  1922,  1924,  1925,  1926,  1927,  1928,
    1929,     0,  1381,  1932,  1771,  1937,  1938,  1940,  1943,  1944,
    1379,  1949,     0,     0,     0,  1348,  1272,     0,  1152,     0,
       0,     0,  1318,  1324,  1148,     0,     0,   961,   962,   983,
     984,   963,   989,   990,   964,     0,  1344,  1041,  1136,  1332,
    1185,  1157,  1165,  1144,  1216,  1137,     0,  1147,  1139,  1340,
     724,  1338,     0,  1140,  1368,   724,  1336,  1502,  1500,  1506,
    1501,     0,     0,     0,     0,     0,   110,  1544,  1545,  1536,
    1534,  1535,  1533,  1532,  1539,     0,  1541,  1449,  1267,  1269,
       0,   719,     0,     0,     0,   299,   672,   671,     3,  1397,
       0,     0,     0,     0,   736,   737,     0,     0,     0,     0,
       0,     0,     0,     0,   832,   763,   764,   766,   829,   833,
     841,     0,     0,     0,     0,     0,   678,     0,  1577,  1573,
    1571,     0,     0,     0,   139,   139,     0,     0,     0,     0,
       0,    99,    48,    92,     0,     0,     0,     0,   220,   233,
       0,     0,     0,     0,     0,   230,     0,     0,   213,   207,
     209,    50,     0,   139,     0,    46,     0,     0,     0,    52,
       0,   644,  1322,     0,   121,  2131,  2132,  2133,  2134,  2135,
    2136,  2137,  2138,  2139,  2140,  2141,  2142,  2143,  2144,  2145,
    2146,  2147,  2148,  2149,  2150,  2151,  2152,  2153,  2154,  2155,
    2156,  2157,  2158,  2159,  2160,  2161,  2162,  2163,  2164,  2165,
    2166,  2167,  2168,  2169,  2170,  2171,  2172,  2173,  2174,  2175,
    2176,  2177,  2178,  2179,  2180,  2181,  2182,  2183,  2184,  2185,
    2186,  2187,  2188,  2189,  2190,  2191,  2192,  2193,  2194,  2195,
    2196,  2197,  2198,  2085,  2199,  2200,  2201,  2202,  2203,   119,
     120,   123,   122,   124,   118,   111,     0,  2099,  1961,  1962,
    1963,  1964,  1914,  1965,  1966,     0,  1967,  1968,  1920,  1970,
    1971,  1972,  1973,  1974,  1975,  1976,  1977,  1927,  1979,  1980,
    1981,  1982,  1983,  1984,  2125,  1985,  1941,  1987,  1947,     0,
    1988,  1158,   112,  1385,  1275,   748,  1273,  1398,     0,     0,
       0,   642,     0,     0,     0,     0,  1409,     0,     0,  1704,
     201,  1704,   529,     0,  1704,   529,  1704,     0,  1423,  1426,
       0,   595,   602,   591,   589,   588,   590,   999,   986,   994,
     993,  1272,   976,   975,   974,     0,   973,     0,     0,  1000,
    1000,   998,   977,   953,     0,     0,     0,  1004,     0,  1002,
       0,   600,   601,     0,   573,     0,   946,   942,     0,  1013,
    1014,  1015,  1016,  1023,  1024,  1021,  1022,  1017,  1018,  1011,
    1012,  1019,  1020,  1009,  1010,     0,  1025,  1026,  1027,  1028,
    1029,  1030,  1031,  1032,   959,   965,     0,     0,  1393,     0,
     568,     0,     0,   570,     0,     0,     0,   155,     0,   214,
    1493,  1494,  1492,     0,     0,  1451,   217,  1487,  1496,  1486,
    1495,  1450,   234,  1445,     0,     0,  1441,   633,     0,     0,
       0,  1282,  1291,  1283,  1284,  1285,  1286,  1287,  1288,  1289,
    1290,     0,     0,  2244,   860,   858,     0,     0,     0,     0,
       0,     0,  1318,     0,  1111,  1137,     0,     0,     0,  1267,
    1301,     0,     0,     0,     0,     0,     0,  1267,  1307,     0,
       0,   884,   896,     0,   782,   788,   859,   857,     0,  1337,
     852,     0,   930,   910,     0,   909,     0,     0,   912,   906,
       0,   907,     0,     0,     0,     0,   908,     0,     0,     0,
       0,   855,     0,   896,     0,   856,   927,  1512,  1511,  1520,
     195,     0,  1278,     0,   155,  1566,  1580,     0,  1272,  1145,
    1316,     0,     0,  1150,  1229,  1066,     0,     0,  1067,  1045,
    1046,     0,  1347,  1356,  1267,  1271,     0,  1148,  1267,     0,
       0,  1219,  1221,     0,  1141,  1142,     0,  1319,  1370,  1149,
       0,  1375,     0,  1040,  1040,  1343,  1249,     0,  1239,  1242,
       0,     0,  1246,  1247,  1248,     0,     0,     0,  1335,     0,
    1257,  1259,     0,     0,  1082,  1255,     0,  1085,     0,     0,
       0,     0,  1243,  1244,  1245,  1235,  1236,  1237,  1238,  1240,
    1241,  1253,  1234,  1063,     0,  1138,     0,  1188,     0,  1062,
    1341,   850,     0,  1373,   850,  1514,  1518,  1519,  1517,  1513,
       0,  1505,  1504,  1509,  1507,  1510,  1508,  1582,     0,  1546,
    1530,     0,  1527,  1270,   845,   721,  1361,     0,     0,     0,
     312,   291,   313,  1553,  1551,   160,   159,     0,     0,   694,
     693,   757,   749,   751,   757,     0,   692,     0,   805,   806,
       0,     0,     0,     0,   838,   836,  1369,  1382,   793,   767,
     792,     0,     0,   771,     0,   797,  1041,   831,   676,   761,
     762,   765,   675,     0,   834,     0,   844,     0,   713,   715,
     698,   712,   710,   695,   703,   832,   766,     0,  1572,     0,
       0,     0,     0,     0,  1704,     0,     0,   941,    83,    64,
     481,   138,     0,     0,     0,     0,     0,     0,     0,    91,
      88,    89,    90,     0,     0,     0,     0,   218,   219,   232,
       0,   223,   224,   221,   225,   226,     0,     0,   211,   212,
       0,     0,     0,     0,   210,     0,     0,     0,     0,     0,
       0,     0,     0,  1559,  1554,  1320,  1323,   748,   748,   748,
       0,   746,   747,     0,     0,   632,   527,   537,     0,     0,
       0,  1413,     0,     0,     0,     0,     0,   252,   251,     0,
       0,   564,  1414,  1412,  1416,  1415,  1417,  1676,   189,     0,
       0,   200,   197,     0,   526,   500,     0,     0,  1428,     0,
       0,     0,  1704,   516,  1425,     0,  1556,   250,     0,     0,
       0,   602,     0,   997,   996,   947,   943,     0,     0,     0,
       0,     0,     0,   607,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   602,  1394,     0,   599,   602,  1360,     0,
     602,   205,  1447,  1489,   215,   235,   216,   236,   644,   639,
     667,     0,   647,   652,   630,     0,   630,     0,   649,   653,
     630,   648,     0,   630,   643,     0,  1181,     0,  1171,     0,
       0,   919,     0,     0,  1172,  1113,  1114,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1131,  1130,  1173,   923,     0,
     926,     0,     0,  1299,  1300,     0,  1174,     0,     0,  1306,
       0,     0,     0,  1179,     0,   862,     0,     0,     0,   777,
     781,   784,     0,   787,   724,   683,  1696,  1735,     0,   735,
     735,   735,   733,   723,     0,   809,     0,     0,   885,     0,
       0,   887,   889,     0,     0,   892,   869,   868,     0,     0,
       0,     0,   931,     0,  1365,     0,     0,   196,     0,  1402,
       0,  1407,  1408,  1405,  1401,  1404,  1406,     0,     0,     0,
    1315,  1311,     0,     0,  1224,  1226,  1228,     0,  1233,  1239,
    1242,  1246,  1247,  1248,  1243,  1244,  1245,  1235,  1236,  1237,
    1238,  1240,  1241,     0,  1261,     0,  1215,     0,     0,  1346,
       0,  1109,     0,  1143,  1154,     0,     0,  1222,  1155,  1348,
    1325,     0,     0,  1378,  1377,  1042,  1051,  1054,  1086,  1087,
    1058,  1059,  1060,  1064,  1400,  1399,  1342,     0,  1334,     0,
       0,  1043,  1068,  1073,     0,  1308,  1103,     0,  1091,     0,
    1081,     0,  1089,  1093,  1069,  1084,     0,  1065,     0,  1335,
    1258,  1260,     0,  1256,     0,  1055,  1056,  1057,  1047,  1048,
    1049,  1050,  1052,  1053,  1061,  1232,  1230,  1231,     0,  1323,
       0,  1333,     0,     0,  1190,     0,     0,  1088,  1339,     0,
     930,   748,   930,     0,  1040,  1547,  1397,  1540,  1529,  1397,
    1268,  1362,  1396,   155,   298,   294,   306,     0,   337,   312,
     299,   285,     0,  1549,   146,   150,     0,  1324,   180,   182,
     850,     0,   755,   756,   760,     0,     0,   760,   739,   691,
    1938,  1824,     0,     0,     0,     0,   798,   839,     0,   830,
     795,   796,     0,   794,  1369,   799,  1368,   800,   803,   804,
     772,  1357,   840,   842,     0,   835,     0,  1363,   697,   716,
       0,     0,     0,     0,     0,   680,   679,   846,     0,    49,
       0,  1704,    66,     0,     0,     0,     0,     0,     0,   431,
       0,   531,   431,   104,  1704,   602,  1704,   602,  1604,  1671,
    1840,     0,    62,   505,    95,     0,   132,   534,     0,   490,
      85,   100,   125,     0,     0,   208,    51,   222,   227,   128,
     231,   228,  1433,   229,   139,     0,    47,     0,   126,     0,
    1431,     0,     0,    53,   130,  1435,  1322,     0,   746,   746,
     746,     0,  1274,     0,     0,     0,  1276,  1277,   631,     0,
     528,     0,   641,   621,   622,   632,  1411,     0,   201,   529,
       0,   529,     0,     0,  1413,     0,     0,   191,   187,     0,
       0,     0,     0,   527,   519,   517,   550,     0,   524,   518,
       0,     0,   476,     0,  1598,     0,     0,     0,     0,   616,
       0,     0,     0,     0,     0,   966,   979,   574,   953,     0,
    1007,  1006,  1008,  1008,   936,   953,     0,   953,     0,   951,
       0,   991,   960,  1033,  1034,  1035,  1036,  1037,  1038,  1039,
     567,  1395,   569,     0,   571,  1442,   637,     0,   636,   640,
     635,   634,     0,   629,     0,   662,     0,     0,     0,     0,
       0,     0,     0,     0,  1168,  1280,     0,  1294,  1293,  1112,
    1119,  1122,  1126,  1127,  1128,  1295,     0,     0,     0,  1123,
    1124,  1125,  1115,  1116,  1117,  1118,  1120,  1121,  1129,   928,
       0,     0,   922,  1304,  1303,  1297,  1298,     0,  1176,  1177,
    1178,  1305,     0,     0,   897,   775,   773,   776,   778,   774,
       0,     0,   930,   735,   735,   735,   735,   732,     0,     0,
       0,   929,     0,   826,   891,     0,   915,     0,   888,     0,
       0,   879,     0,   886,   935,   902,     0,     0,   904,  1521,
    1279,   741,  1146,     0,     0,  1312,     0,  1108,     0,  1227,
    1156,     0,  1250,  1214,     0,     0,     0,  1355,     0,  1268,
    1218,  1220,  1356,  1151,  1040,     0,     0,     0,     0,     0,
       0,     0,  1092,  1083,     0,  1090,  1094,     0,     0,     0,
    1077,     0,     0,  1075,  1104,  1071,     0,     0,  1105,  1322,
       0,  1326,     0,     0,  1189,  1198,   853,   849,   809,   746,
     809,     0,  1515,  1531,  1528,     0,   294,   292,   293,   294,
     294,   294,   294,   304,   310,   305,   294,   294,   294,   356,
       0,   354,   299,   362,   337,   337,   338,   315,   360,   362,
     324,   334,   333,   290,   314,     0,     0,  1550,     0,   169,
       0,     0,     0,     0,   172,   186,   183,  1549,     0,     0,
     750,   752,     0,  1251,   760,   754,   802,   801,     0,   770,
     837,   768,     0,   843,     0,   714,     0,   700,     0,   872,
       0,     0,     0,     0,     0,   480,     0,     0,     0,   431,
       0,   539,     0,   546,     0,     0,   531,   512,    84,     0,
       0,     0,    58,   103,    76,    68,    54,    82,     0,     0,
      87,     0,    80,    97,    98,    96,   101,     0,   441,   466,
       0,     0,   477,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1321,     0,     0,     0,   748,   744,
     745,  1159,   665,   666,   664,   213,   538,     0,     0,   199,
     526,     0,  1428,     0,     0,  1410,   564,     0,   192,     0,
     190,     0,   201,   529,     0,   504,   500,   525,   498,   497,
     499,     0,  1599,   206,     0,  1593,   529,  1427,     0,     0,
     617,     0,   611,     0,  1422,   985,   949,     0,  1003,  1001,
     950,     0,   948,   944,   952,   602,     0,   625,   663,   668,
     650,   655,     0,   661,   657,   656,   651,   659,   658,   654,
    1169,  1180,  1292,     0,     0,     0,     0,   921,   924,     0,
    1175,  1170,   895,     0,     0,   809,     0,     0,     0,     0,
     726,   725,   731,     0,     0,  1192,   890,     0,     0,     0,
     877,   867,   873,     0,     0,     0,     0,   933,   932,   903,
       0,  1314,  1310,  1223,  1225,  1262,  1345,  1267,  1350,  1352,
       0,     0,     0,  1217,  1110,  1376,  1044,     0,     0,  1074,
    1309,  1095,     0,     0,     0,  1070,  1250,     0,     0,     0,
       0,     0,  1079,     0,  1330,  1323,     0,  1329,     0,     0,
       0,     0,  1164,   854,   826,     0,   826,     0,   722,   303,
     309,   302,   301,   300,   307,   311,   297,   354,   359,   355,
     357,   294,     0,   361,   351,     0,   335,   336,   316,   337,
       0,   321,   320,   322,   319,   364,     0,     0,     0,     0,
     284,   367,  1137,     0,  1548,     0,  1543,   147,   148,   149,
       0,     0,     0,   164,   141,     0,     0,   181,   169,   157,
     758,   759,     0,   753,   769,  1358,  1364,   699,     0,  1148,
       0,     0,   696,     0,   133,   431,     0,     0,    65,     0,
     548,   492,   540,   523,   507,     0,     0,     0,   432,     0,
     565,     0,     0,   513,     0,     0,     0,     0,   493,     0,
       0,   452,     0,     0,   523,     0,   530,   448,   449,     0,
      57,    77,     0,    73,     0,   102,     0,     0,     0,     0,
       0,    60,    72,     0,    55,     0,   602,   602,    63,  1389,
    1989,  1990,  1991,  1992,  1993,  1994,  1995,  1996,  1997,  1998,
    2109,  1999,  2000,  2001,  2002,  2003,  2004,  2005,  2006,  2118,
    2007,   438,  2008,  1771,  2009,  2010,  2011,  2012,  2013,     0,
    2014,   939,  2015,  2016,  2195,  2017,  1235,  1236,   436,   437,
     533,   433,  1390,   434,   541,   435,     0,   536,   491,   129,
    1434,     0,   127,     0,  1432,   136,   134,   131,  1436,  1162,
    1163,  1160,   746,   644,   624,     0,     0,  1598,     0,     0,
     273,   257,   283,     0,  1704,     0,   188,     0,  1428,   198,
     526,     0,   556,   476,   551,     0,  1598,  1596,     0,  1428,
    1592,     0,   608,     0,     0,     0,   945,   937,   572,   638,
       0,   660,  1132,     0,     0,     0,     0,   785,     0,   791,
     826,   730,   729,   728,   727,   808,  1646,  1921,  1823,     0,
     812,   807,   810,   815,   817,   816,   818,   814,   825,     0,
     828,   914,  1263,  1265,     0,     0,     0,     0,   878,     0,
     880,     0,   882,     0,   934,  1313,  1353,  1354,  1349,     0,
    1041,  1101,  1099,  1096,     0,  1097,  1078,     0,     0,  1076,
    1072,     0,  1106,     0,  1327,     0,  1184,     0,  1187,  1201,
    1197,  1196,  1192,  1159,  1192,  1516,   295,   296,   308,   358,
     337,   324,   352,   353,   285,     0,   366,     0,   339,     0,
     318,     0,   389,   390,   371,   372,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1335,     0,     0,     0,     0,
       0,   405,     0,     0,   408,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     168,   145,   171,   170,     0,  1324,   178,     0,     0,   169,
       0,   173,   618,     0,     0,   711,   871,   704,   705,     0,
     544,    67,     0,   523,     0,   431,   509,   508,   511,   506,
     510,     0,   566,     0,     0,   450,     0,   457,   495,   496,
     494,   451,   523,   529,   453,     0,     0,     0,    69,    59,
      56,    61,    70,     0,     0,    71,    74,   935,    86,    79,
    2118,  2127,     0,     0,     0,     0,     0,     0,   620,   627,
     213,     0,     0,   500,  1595,     0,     0,   613,     0,     0,
       0,     0,   270,     0,     0,     0,   526,   193,     0,     0,
       0,  1598,     0,     0,   428,     0,   473,     0,   203,  1597,
       0,     0,  1584,     0,     0,  1420,  1421,     0,   626,  1133,
       0,  1134,   925,     0,     0,   783,  1192,     0,     0,     0,
     819,   813,     0,  1191,  1193,     0,   780,  1266,   874,     0,
     876,     0,   900,   748,     0,   900,   883,  1351,  1182,     0,
    1098,  1102,  1100,  1080,  1331,  1328,  1186,  1200,  1203,   828,
    1374,   828,   285,   332,   330,     0,     0,   347,   350,   317,
     354,   324,   319,   368,   379,   409,   410,   383,   384,   385,
     387,     0,     0,     0,   369,   391,   396,   426,     0,   414,
       0,   404,     0,   412,   416,   392,   407,   388,     0,  1335,
       0,     0,     0,     0,   380,   381,   382,   373,   374,   375,
     376,   377,   378,   386,   411,   288,     0,   287,     0,     0,
     156,     0,     0,   153,   140,   158,  1252,   701,   702,     0,
     431,     0,   522,   545,   462,   440,     0,     0,     0,   447,
     454,   555,   456,     0,    78,    94,     0,     0,   535,   137,
     135,  1161,   644,     0,  1428,   476,  1592,   610,   274,   257,
       0,   281,   269,     0,     0,   282,     0,     0,     0,     0,
     500,   206,  1594,   489,   482,   483,   484,   485,   486,   487,
     488,   503,   502,   474,   475,     0,     0,     0,     0,     0,
     612,  1422,     0,   175,   184,     0,   175,  1135,   786,     0,
     828,     0,     0,     0,   811,     0,     0,   827,     0,   687,
    1264,     0,   866,   864,   746,     0,   865,     0,     0,   748,
     780,   780,   330,     0,   363,     0,   344,   348,   365,     0,
       0,     0,     0,     0,     0,     0,   415,   406,     0,   413,
     417,     0,     0,   400,     0,     0,   398,   427,   394,     0,
       0,     0,   142,     0,   143,   179,     0,     0,     0,   529,
     547,   521,     0,   514,   460,   459,   461,   465,     0,   463,
       0,   479,     0,   472,   440,     0,    81,     0,   542,   619,
     623,     0,   430,  1586,   256,   253,   254,     0,   271,   275,
       0,     0,   264,   526,     0,  1592,   476,  1598,  1592,     0,
    1589,     0,   609,     0,     0,     0,   177,  1428,     0,   177,
       0,   780,   821,     0,   820,  1195,  1194,   782,   875,     0,
       0,  1183,     0,  1206,   686,   685,   331,   328,   349,     0,
       0,   323,   370,     0,     0,   397,   418,     0,     0,     0,
     393,     0,     0,     0,     0,     0,   402,     0,   289,     0,
       0,     0,     0,   555,     0,   501,     0,     0,   462,     0,
     455,   552,   553,   554,     0,   468,   458,   469,    75,    93,
     543,     0,     0,     0,   280,     0,   278,     0,   265,   526,
    1587,   429,   204,  1585,  1590,  1591,     0,   175,   174,   757,
     176,   930,   185,   757,   790,   688,   822,   779,     0,   881,
    1202,     0,     0,     0,     0,   329,   345,   340,   346,   342,
     424,   422,   419,     0,   420,   401,     0,     0,   399,   395,
       0,   286,     0,   152,   930,   163,     0,   472,   520,   515,
     439,   464,   478,     0,     0,     0,   470,     0,   471,  1592,
       0,   272,   276,     0,   279,     0,     0,   177,   760,  1418,
     760,  1907,  1647,  1875,     0,  1204,  1207,  1205,  1199,   326,
     325,   327,     0,     0,   421,   425,   423,   403,   144,   151,
       0,   431,   444,     0,   443,     0,   532,   467,  1588,   267,
       0,     0,     0,  1428,   757,   165,   166,     0,  1211,  1210,
    1209,  1213,  1212,   341,   343,   930,   549,   442,   446,   445,
       0,     0,     0,     0,   261,     0,   930,   760,     0,   162,
     267,   255,     0,     0,     0,   277,   263,     0,  1419,   167,
    1208,   266,     0,   259,   260,     0,   262,     0,     0,   258,
       0,     0,     0,   283,     0,     0,   264,   268
};

/* YYPGOTO[NTERM-NUM].  */
static const yytype_int16 yypgoto[] =
{
   -3284, -3284, -3284,  2220,   113,   127,  -762, -1183,  -958, -1167,
   -3284,    55,   128, -3284, -3284,   357, -3284,  1191, -3284,   349,
    -603,   746, -3284,  1288, -3284, -3284,  2957, -3284,   131,   132,
    2374,   356,  2719,  3964,  1223,  -497,  -746, -1338, -1060,    50,
   -3284, -3284, -3284, -3284,  -788,   688, -1215, -3284,   613, -3284,
   -3284, -3284, -3284,   -41,   334, -3284,    10, -2147, -2966,  -532,
   -3284,  -690, -3284,  -201, -3284,  -612, -3284,  -706,  -620,  -679,
   -2831, -1129, -3284,  1787,  -250, -3284,   779, -3284, -2559, -3284,
   -3284,   770, -3284, -1155, -3284, -2207,   333,  -595, -2616, -2548,
   -2143,  -748,   406,  -602,   381, -2089,  -976, -3284,   795, -3284,
    -582, -3284,  -742, -1888,   133, -2824, -1660,    -8, -3284, -3284,
   -3284,  -519, -3284, -2533, -3284,   134,  1641, -2065,   136, -1646,
   -3284,    12, -2054,   137, -3284, -3284,   139,    52,  -563,   458,
   -3284,   140, -3284, -3284,  1562,  -782, -3284,  1615,   142, -2567,
   -3284,  -429, -3284,  -474,  -465, -3284, -3284,    41,  -946,  1551,
   -3284, -3284, -3284,    14, -3284,  -410, -3284, -3284, -2563, -3284,
      57, -3284, -3284, -3284, -3284, -3284,  -339,   468, -3284, -3284,
    -523, -2592,  -466, -3284, -3140, -3199, -3284, -3284,  -682, -3112,
   -2039,   143,   122,   -39, -3284, -3284, -3284, -3284,  -369, -2398,
   -3284,  -738, -3284,  -743,  -194,  -714,  -701, -3284,  -575, -2700,
    -677, -3284, -3284,  -731, -2801,  2438,  -446, -3284, -3284, -1055,
   -3284,   517, -1407, -3284,   901, -3284,   902, -3284,  -259, -2837,
   -3284, -3284,  -408, -3284, -3284, -3284, -2041,   -44,  -645,  -644,
   -3284, -2958, -3284, -3284, -2382, -3284, -3284, -3284,   519, -3284,
   -3284,  3684,   144,   145, -3284,   918,   149, -1138,    19,  2371,
     -32,   -13, -3284,    -5, -3284, -3284, -3284,   865, -3284, -3284,
      60,    76,  1900, -1009, -3284, -1115,   886, -3284,  2043,  2045,
   -2187,  -754,   -55, -3284,   903, -1653, -2087,  -522,  1321,  1891,
    1901,   648, -2227, -3284,  -487, -3284,   243, -3284, -3284,   889,
    1364, -1537, -1489, -3284, -2136, -3284,  -367,  -193, -3284, -3284,
   -3284, -3284, -3284, -2513, -2934,  -509,  1343, -3284,  1903, -3284,
   -3284, -3284, -3284,   -16, -1490,  3058,   937,   -64, -3284, -3284,
   -3284, -3284,   351, -3284,  1092,    30, -3284,  2474,  -514,  -621,
    2097,    -1,   339, -1712,    28,  2487,   698, -3284, -3284,   700,
   -2064, -1500,   654,  -105,  1676, -3284, -3284,  -489, -1319,  -822,
   -3284, -3284,   319,    82, -3284, -3284, -3284,   487,  2963, -3284,
   -3284,  3745,  4045, -3284,  -660,  4364,  -518,  -816,  2109,  -893,
    2115,  -904,  -882,  -885,  2117,  2123, -1499,  5132,   296,  5566,
   -2163, -3284,    67, -3284, -1471,   157, -3284, -3284, -3284, -3284,
   -2721, -3284,  -342, -3284,  -335, -3284, -3284, -3284,  -530, -3283,
   -3284,  6435,  1058, -3284, -3284,   655, -3284, -3284, -3284, -3284,
   -1516, -3284,  6159,   953, -3284, -1992, -3284, -3284,  -967,  -552,
   -1071,  -983, -1249, -1355, -3284, -3284, -3284, -3284, -3284, -3284,
   -1524, -1760,  -343, -2048, -3284, -3284,  1105, -3284, -3284, -3284,
   -1721, -2080, -3284, -3284, -3284, -2038,  1587,   292,  -635, -1587,
   -3284,  1070, -2324, -3284, -3284,   658, -3284,  -560, -1120, -2418,
    2361,    35, -3284,  5427, -2534, -3284, -3284,  -549, -2682, -1077,
   -3284, -3284,   150,  1704,    58, -3284,   151,  1451, -3284, -3284,
   -3284,   152, -3284, -3284,   153,   780, -3284,  1125, -3284,   841,
     156, -3284, -3284,  3103,  3038,    18, -2405
};

/* YYDEFGOTO[NTERM-NUM].  */
static const yytype_int16 yydefgoto[] =
{
       0,    46,    47,    48,   569,   570,  1841,  1790,  1567,  1230,
    1780,  1476,   571,  2604,  2605,  2606,  2231,  1211,  3516,  2232,
    1212,  1213,  2608,    52,    53,    54,   110,  1241,   572,   573,
     510,   621,  1102,   623,  1103,  1609,   778,  1319,  1320,   574,
    2285,  3220,  2696,  3221,  2364,  2279,  1486,  2359,  1900,  1820,
    1487,   516,  1914,  2697,  2645,  1901,   575,  2593,  2960,  3509,
    2619,  3716,  2896,  2897,  3506,  3507,  2596,  2234,  3605,  3606,
    2672,  1772,  3600,  2304,  3421,  2238,  2219,  2898,  2312,  3372,
    3002,  2235,  2878,  2305,  3502,  1854,  2306,  3503,  3175,  2307,
    1817,  1845,  2597,  3607,  2239,  1818,  2592,  2961,  1760,  2308,
    3513,  2309,   527,  2882,   576,  2675,  1383,   500,   501,   502,
     868,  1322,  1363,  1323,   737,   577,   797,  1851,   578,  1376,
    1833,   579,  1842,   580,  2659,  2660,   581,   582,  1147,  2549,
    2153,   583,   560,   561,   887,  1424,   562,   869,   584,   895,
      68,   744,  1478,   585,  1479,  1480,   982,    69,  1568,   984,
     985,    70,    71,   587,  3256,  3015,  1389,  1855,  2317,   528,
     588,  2843,  2155,  2552,  3498,    74,  3156,  2158,  1172,  3159,
    3434,  2836,  3154,  2553,  3546,  3629,  3157,  2159,  2160,  3435,
    2161,   589,   638,  3307,    76,  1829,  3527,    77,  3230,  3763,
    3753,  3754,  3745,  3618,  2991,  3741,  3719,  3404,  3529,  2992,
    3530,  3684,  3405,  3233,  2546,    78,  3355,  3356,  2151,  2523,
    3098,  1690,  2524,  2527,  2148,  1691,  1692,  2819,  3111,  2825,
    3701,  3645,  3464,  2812,  2534,  2535,  2536,  2537,  3646,  3648,
    3465,  3647,  3104,  3105,  2538,  2539,  2540,  2814,  2815,  2541,
    2542,  2830,   590,   591,  1048,  2014,   592,  1763,   593,  1104,
      84,    85,  1022,    86,  3169,    87,    88,  1738,  1739,  1740,
     666,   678,   679,  1542,  1983,   671,  1176,  1707,   652,   653,
    2275,   752,  1812,  1702,  1703,  2164,  2560,  1731,  1732,  1185,
    1186,  1971,  3449,  1972,  1973,  1535,  1536,  3265,  1719,  1723,
    1724,  2185,  2175,  1710,  2433,  3040,  3041,  3042,  3043,  3044,
    3045,  3046,  1105,  2735,  3276,  1727,  1728,  1188,  1189,  1190,
    1736,  2195,    90,    91,  2130,  2506,  2507,   627,  3057,  1559,
    1741,  2739,  2740,  2741,  3061,  3062,  3063,   628,  1017,  1018,
    1041,  1036,  1549,  1991,   629,   630,  1948,  1949,  2402,  1043,
    1985,  2001,  2002,  2747,  1872,   870,  2220,  1572,  1427,   872,
    1106,   873,  1402,  1107,  1406,   875,  1108,  1109,  1110,   878,
    1111,  1112,  1113,   881,  1398,  1114,  1115,  1417,  1446,  1447,
    1448,  1449,  1450,  1451,  1452,  1453,  1454,  1158,  1742,  1117,
    1118,  1119,  1120,  1121,   632,  1122,  1123,  1657,  2124,  2505,
    3050,  3273,  3274,  2792,  3091,  3298,  3459,  3643,  3695,  3696,
    1124,  1125,  1601,  1602,  1603,  2024,  2025,  2026,  2027,  2118,
    1651,  1652,  1126,  2965,  1654,  2045,  3053,  3054,  1159,  1528,
    1596,  1365,  1366,  1573,  1501,  1502,  1509,  1923,  1517,  1521,
    1953,  1954,  1529,  2086,  1127,  2020,  2021,  2456,  1581,  1128,
    1243,  1608,  2787,  2121,  1655,  2080,  1135,  1129,  1136,  1131,
    1592,  1593,  2467,  2759,  2760,  2051,  2192,  1686,  2197,  2198,
     891,  1132,  1133,  1134,  1367,   505,   884,  3630,  1458,  1164,
    1368,  2076,   594,   103,   595,    94,   596,  1154,   675,  1155,
    1157,   597,   646,   647,   598,   659,   660,  1569,  1671,  1570,
     599,    99,  1199,   661,   667,   600,  3252
};

/* YYTABLE[YYPACT[STATE-NUM]] -- What to do in state STATE-NUM.  If
   positive, shift that token.  If negative, reduce the rule whose
   number is the opposite.  If YYTABLE_NINF, syntax error.  */
static const yytype_int16 yytable[] =
{
     512,   890,   777,  1195,   512,   625,   738,  1229,  1037,   512,
      58,   888,    62,   740,    72,   512,   512,  1130,   100,    82,
     512,   512,   512,   754,   755,   512,  1804,  1475,   512,   512,
     753,  1324,   512,  1371,  1413,   512,   512,   736,  1520,  1481,
     883,  1605,   504,  1687,  1373,  1793,  1419,  1950,  1759,   980,
      57,  2167,    65,  1862,  2494,   665,   504,    73,    93,   586,
      89,  2492,  1794,  1571,  2005,   669,  2508,  1765,  2510,   871,
    2044,   625,   625,  2128,   503,  2598,   757,  2555,    89,  1769,
    2565,  2635,  2636,  2637,   758,  2267,  2966,  2963,   631,  2988,
    1496,   512,  1693,   896,  1866,  1798,   512,   512,   512,   512,
     512,  1494,  2986,   981,  2489,  1460,  3006,  3003,  1463,  1498,
    1809,  1019,  1497,    49,  2063,  2064,  1040,  2554,   763,  1884,
     681,  1661,   504,   504,  1160,  1014,  1664,    50,    51,  2591,
    1599,    55,    56,    59,    60,   771,    61,    63,  2646,    64,
      66,  2758,    67,    75,    79,    80,   639,  3308,  2808,    81,
      92,    95,    96,    97,   631,   631,    98,   986,  2857,  1399,
    1400,  -670,  2862,  3224,  2290,  2529,  1231,  1057,  1235,  -673,
    1239,  1146,  3244, -1978,  2132,  2286, -1367,  2529,   633, -1978,
    1705, -1386,  3248,  1668,  1173,  2187,  1411, -2118, -2118, -1383,
   -1383,  2516, -1969,  2405, -1986, -1000, -1008, -1387,  2884, -1008,
   -2109, -2109, -2127, -2127, -1005, -1384, -1384,   635, -1005, -1386,
    2661,  1057,  1421, -2104, -2104, -1969,  1617, -1978, -1986, -1387,
    -967,  1619,  -980,  -995,  3402,   635,   635,  2653,   635,  2078,
    1184,  1142,  3179,  2454,  2649,  2190,  3673, -2129, -2129,  2887,
     514,  2525,  1927,  1187,   633,   633,  1761,  1929,  3388,  1665,
    1469,   635,   635,  1627,  2149,  1057,  3162,  1796,  2078,  1778,
    1057,  -670,  1781,  1782,  3303,  1469,  2078,  2283,  1324,  -673,
    1057,  3375,  3102,  1419,  2434,  1750,  2742,   805,  3194,  2703,
    2705,  3092,  2708,  3094,  3213,  1629,  2078,  2443,  3116,  -213,
    3496,    21,   745,  3117,  -213,  -628,  3549,  -803, -1233,  2145,
    3525,  2668,  1149,  3304,  3665,  1056, -1233,  2146,  1927,  2200,
    2415,   750,  1928,  1929,   750,  1711,  1930,  1931,  1932,  3601,
    1056,  1421,  2795,  1927,  3190,  3124,  2714,  1928,  1929,  3245,
    1859, -2131, -2131, -2131,     3,     4,  1927,  3007,   883,  2417,
    1928,  1929,  1466,  1807,  3738,  3246,  2115,  3466,  3467,   650,
    3633,  2125,  1808,   635,  2116,  2529,  1421,  3126,  2725,  1712,
    2162,  1666,  2874,  2217,   602,  3460,  1761,  3461,  2193,   101,
    1753,  3299,  2794,  3301,  2796,  1827,  1504,  2626, -1254,   673,
    2850, -2103, -2103,  2871,  3231,  3591, -1254,   746,  3729,  1180,
    1557,  3545,  1695,  3152,  1777,  2418,   672,  2880,  2500,  2378,
    1324,  3378,  1617,  2620,  1399,  1400,  2891,  3387,  3727,  2809,
   -2100, -2100,  1617,  1967,  1885,  3212,  2621,  3412,   102,  2810,
    1411,  2273,  1617,  2218,  2881,  1899,  1618,  1619,  1927,  2594,
    2406,  3153,  1928,  1929,  1783,  3238,    25,    26,    27,  1627,
    1489,  2163,  2870,  1558,  1967,  3641,  3250,  3232,  1467,   651,
    2851,  1468,  3239,  -670,  2875,  2892,  3602,  1421,  3116,  1627,
     766,  -673,   769,  3117,   773,  3760,   980,   837,  1182,  2755,
    1150,  1629,  1151,  2893,  3468,  3642,  3013,  2853,  1714,  2517,
    2518,  1629,  2715,  3666,  1040,  2194,  -940,  3687,  3724,  3191,
    1667,  1629,  1143,  2816,  2817,  3124,  1019,  2591,  1933,  2591,
    2126,  3462,    32,  2447,  3008,   603,  3551,  2018,   512,  2416,
    1422,  3739,  1483,   512,  3686,  3526,   512,  3266,  3497,  2876,
      21,  1934,  2877,   512,  1587,  -670,   980,  3126,  2284,   883,
    3386,  1768,  1755,  -673,   780,   993,   740,  1810,  2419,  3247,
    2008,    37,  1715,  3603,  1595,  3440,  3116,  2351,  3730,  2150,
     867,  3117,   512,   512,   512,  1696,  1011,  3370,  1743,  1744,
     979,  2272,  2520,  2595,  3522,  1617,  2075,  3364,  1144,  1618,
    1619,  2019,  1828,  3674,    39,  2894,  3380,  3180,  2742,  3103,
    2044,  1051,  1784,  3124,  2895,    42,  2201,  2274,   740,  3030,
    1785,  1935,   806,   512,   512,   512,  2212,  1797,  3376,  2521,
     109,  2079,  1627,   512,  1010,  1607,  1935,  1694,  2999,   983,
    1857,  1811,  3649,  3021,  3011,  3126,   512,   512,  2712,  1422,
    -940,   512,   512,  1670,   980,   980,  2526,    89,  3668,   747,
    2491,   740,   535,  3219,  1629,  2512,  2187,  1848,  3322,   663,
     874,  2664,  2522,  -670,   504,  1747,   512,   512,  2655,   512,
    2563,  -673,  1756,   757,  1422,   504,  2642,  2643,  3484,  1397,
    2807,   758,  2147,   512,  3395,    25,    26,    27, -1233,   512,
    2557,  1423,  3310,  1745,  1794,  1414,   631,  2339,  1414,  2131,
    2966,  2963,  -670,  2355,  -670,  2568,  1746,   631, -1978,   775,
    -673, -1367,  -673,   776, -1978,  1584, -1386,  1415,   883,  1148,
    1415,  1584,  1196,   515,  3403,  3621,  2233, -1969,  2237, -1986,
   -1000,  1416, -1387,  3622,  1418,  1153,  2117,  2627,  3170, -1005,
    1582,  1650,  1612,  2736, -1386,   990,   674,  3311,  1682,  2646,
   -1969,    32, -1978, -1986, -1387,  1401,   512,  1405,  -995,   512,
    1662,  2133,  3287,  3059,  1008,  3649,  3367,  1944, -1254,  1863,
    1864,  3368,    58,  1161,    62,  1422,    72,  1473,  1474,  2272,
     100,    82,  3203,  3204,   601,  1020,   633,  1788,  1321,  1152,
      37,  1362,  1473,  1474,  2900,  1148,  3426,   633,  3108,   512,
    1459,   782,  2501,   783,  3427,  3712,   512,   512,   512,   512,
    1708,  1789,    57,  3146,    65,  3217,  -213,  -213,  2099,    73,
      93,   512,    89,    39,  1936,  1937,  1938,  3161,  1939,  1940,
    1941,  1942,  1943,  1944,    42,  1462,   634,  1174,  2516, -2131,
   -2131, -2131,  2247,  1939,  1940,  1941,  1942,  1943,  1944,   775,
      43,  3521,  2250,   776,  3504,  2253,  1939,  1940,  1941,  1942,
    1943,  1944,  2599,  3268,  3537,  2530,  2413,  1543,   867,  1595,
    2531,  3536,  2901,   775,    44,    49,  2532,   776,  2533,   883,
    3163,  1324,  2060,  1324,  2428,  2429,  2430,  2320,   663,    50,
      51,  3176,   781,    55,    56,    59,    60,   789,    61,    63,
     790,    64,    66,  2413,    67,    75,    79,    80,  1838,   883,
     883,    81,    92,    95,    96,    97,  3222,  3505,    98,  1709,
    1180,  1887,  3188,  1974,  1393,   883,  1021,   888,   517,  1543,
    1886,  3339,  1437,  1438,  2838,  3413,  1890,  1175,   871,  1994,
    2100,  1414,  1645,  1646,  1647,  1648,  1649,  1650,  2464,  1950,
    1941,  1942,  1943,  1944,  1873,  3242,  2902,  2809,   874,  2101,
     517,  2358,  1394,  1415,  2102,  2044,   676,  3099,  2217,   980,
    3177,  2600,   748,  2360,  3428,   670,   738,  1540,  3141,  3142,
    3143,  3144,  3145,  3146,  1550,  2422,   793,  1001,  2386,  3414,
    2839,  -823,  1959,  1770,   518,  2765,  2344,   979,  3415,  1182,
    3720,  3189,  1026,  2103,  3631,  2986,  2343,   736,  3243,   512,
     512,  3523,   512,  1892,  3713,  2346,  2348,  2349,  2345,  2347,
    3416,   512,   512,   981,   794,   625,   518,   512,  2588,  2686,
    1788,  3196,   625,   741,  2245,  1607,  2690,  1965,  2692,  3201,
    1027,   742,  2638,  1546,   749,  2017,  1595,  1183,  3373,  1553,
     512,   743,  1441,  1442,  1789,  2047,  1544,   979,  1362,   867,
    3720,  2657,   791,   512,  1026,   876,    89,  1029,  3143,  3144,
    3145,  3146,  3340,  2268,  2269,  2270,   504,  3341,  2061,  2513,
    2966,  2963,  2514,   504,  3083,   740,   759,  1647,  1648,  1649,
    1650,  3239,  3116,  1770,  2087,  3360,  2574,  3417,  1794,  2327,
    2081,  3327,  1027,  3714,   635,  2602,   791,  3323,   631,  2296,
    3418,   512,   796,  1321,  1770,   631,  3342,   779,  1552,   883,
    1169,  2350,   750,  2088,  2563,  2352,  2517,  2518,  2354,  1029,
    3715,  1206,  2800,  2913,  2387,   786,  2628,   792,  2366,  2804,
    2805,  2806,  2370,  1395,  2388,  2372,  1689,  3517,  2065,   874,
    3620,   787,  2774,  3623,  1885,   979,   979,   512,  1372,  2104,
     512,  3126,  1770,  1374,  1894,  1403,  2209,  1409,  1410,  1057,
    1380,  1382,  1385,  1387,   512,   512,   522,   736,   523,  1599,
    3746,   792,   512,  1699,  1700,  1392,  1706,  1412,  2233,  2233,
    2233,   758,   758,  2246,   758,  2601,  1033,  2602,   633,  1771,
    1958,  2669,  1960,  1961,   526,   633,  2519,  2677,   522,  2520,
     523,  1414,  2256,  1545,   512,   512,   798,  2263,  1148,  1180,
    1711,  1792,   801,  1455,  1181,  2603,  1045,   512,   867,  1216,
     775,   802,  1203,  1415,  1606,   793,   526,  1046,  1204,  3026,
    2089,   517,  1799,  3500,   512,  2090,  2521,  1416,   512,  1217,
    2091,  1896,   512,  3564,  3565,  2566,  1057,  2248,  1033,   883,
    1057,  1396,  2251,  1203,  1712,  1768,   637,   637, -1430,  1204,
    1761,  -747,  3343,   794,   751,  1545,  -747,   748,  2367,  1822,
    1795,  1762,  1537,  2368,  1761, -2101, -2101,  3559,  2221,  2522,
    1802,  -748,  -682,  1218,  3718,  1764,  -748,  3116,  1182,  1771,
    1561,  2119,  1203,  1414,  1565,  2120,  -682,   518,  1204,  1968,
     795,  -682,  3419,  3487,  1969,  3420,  1770,  1823,   874,  1513,
    1771,  3485,  1899,   804,  1822,  1415,  2324,  3699,  2726,  2727,
    2728,  2729,  3700,  1713,  3124,   803,  2840,  2737,  1362,  1418,
    2744,  1205,  2369,  2821,  3635,  2822,  1183,  1362,  2481,   749,
    -747,  3569,   807,   774,  1824,  3570,  2044,   810,  2823,  2824,
    2295,   796,  1823,   876,  -682,  1768,  3126,  2028,  1771,   808,
    -748,  1362,  1205,   883,  2029,  2030,  1507,  2482,  2031,  2032,
    2033,  3025,   512,  1714,   512,  -682,  1768,  3768,  1551,   867,
     512,  1219,  1556,    21,  3773,  1770,  1216,  2509,  -747,  3234,
     980,   512,  2334,   894,  2092,  1825,  1832,  1403,  1834,  3096,
    1835,  1205,  3097,   809,  1836,  2093,  1217,   883,  -748,   867,
     867,   775,  1412, -1367,  3100,   776,   784,   750,   785,   883,
    2411,  2698,   512,  -682,  1768,   867,   991,   512,  3074,  2904,
    1680,  1220,  -682,  1681,  2625,  2007,  2373,  1715,  2008,  1221,
    1825,  1578,  2868,   663,  1137,  1138,  2911,  1140,  2379,   883,
    1218,  1222,   992,  2610,  2009,  2612,   883,  2010,   512,  1321,
     993,   512,  1770,   512,   512,  2280,   512,   512,  2281,   874,
     979,  2799,  2983, -2102, -2102,  2801,  2802,  2803,  2407,   522,
     104,   523,  2903,  1223,  2912,  2412,  2310,  1321,  2311,  2483,
    1986,  1206,   883,  1988,  2484,   994,   883,   980,  1992,   874,
     874,  1995,   883,  2423,   525,  2424,  1999,   526,  1599,  2425,
    1004,  2426,  1771,  2629,  1203,   874,  2841, -2105, -2105,   983,
    1204,  2444,  1206, -2106, -2106,  2444,  2688,  2689,    25,    26,
      27,  2450,  2613,   512,  2615,   512,   512,    89,   625,  1225,
     995,   625,  2479,   512,   876,   999,   625,  2328,  1219,   625,
    2010,  1207,  1203,  2652,   625,  1208,  2335,  2337,  1204,  2336,
    2336,  1206,  1226,   504,   512,  1002,   512,  2233,  1749,   751,
    1003,  2967,  3357,  2237,  3736,  1005,  2577,  3689,  1768, -2107,
   -2107,  1776,  1233,  1228,  -682,  1209,  1208,  1006,   512,   504,
    2633,  1771,   504,   512,    32,   631,  2361,   504,  1220,  2362,
     504,  1203,  1800,  2015,  1007,   504,  1221,  1204,  1321,  2399,
    3709,  3725,  2400,  3726,  2445,  1008,  1234,  2446,  1222,   867,
    2867,   631,  2869,  1205,   631,  1208,  1013,  2448,  1321,   631,
    2446,   512,   631,    37,  2011,  2616,  2012,   631,  2617, -2108,
   -2108,  2013,  2016,  2562,    89,  1177,  2622,  1179,  2485,  2623,
    1223,   105,   775, -2110, -2110,  1209,   776,  1768,  1210,  2486,
     106,  1205,  2680,  1042,  1362,  2008,    39,  1047,  1771,  1050,
    3759,  1216,  2958,  2749,  1049,  2845,  2446,    42,  2846,  3260,
     512,  3749,   512,  2998,   512,   633,  2281,  3019,  1203,  1210,
    3020,  1217,  3758,    43,  1204,    21,  1051,   107,  3670,   512,
     512,  1052,  3027,  1141,  2169,  3028,  1225,  1145,  2563,   874,
    1205,   633,   758,   876,   633,  3075,  1156,    44,  2010,   633,
     111,  3171,   633,   513, -2111, -2111,  1162,   633,  1210,  1226,
     563,  2842,  1153,  3261,  1768,  1218,  2010,   512,  1821,   512,
    3262,  2884,  1165,  2446,  1839,   649,  1166,  2885,   108,   662,
    1228,  1167,  3290,   512,   512,  2010,  2911, -2112, -2112,   867,
    2886, -2113, -2113,  1163,   512,   512,   512,   512,  1321,   512,
    1321,  1170,  1491,  3295,   635,   512,  2008,   512,  3218, -2114,
   -2114,  2128,  2887,  1206,  2888, -2115, -2115,  3361,   512,   512,
    3362, -2116, -2116,   512,   512,   883,  3436,  1205,   512,   512,
     512,   512,  1171,   512,   512,  2907,  3394,  3437,  3490,  2281,
    2010,  3491,  1362,  3085,  2695,  3547,  1925,  1926,  3548,  2060,
    3595,  1206,  1946,  3596,  2221,   512,   512,   512,   512, -2117,
   -2117,  1178,   512,  1219,   988,  3614,   637,  1197,  3615,  1198,
      25,    26,    27,  1237, -2119, -2119,   512,  1208,   980,   874,
    3654,  3664,  1362,  2010,  3548,  1200,  2034,  2035,  2036,  1201,
    2037,  2038,  2039,  2040,  2041,  2042,  3704,  1044,  1202,  2010,
    1206,  1431,  1432,   867,   876,  2314,  2889,  1238,  1429,  1430,
    1214,  2208,  1215,  1220,  1232,  1208,  1236,  1321,  1240,  1139,
    3723,  1221,  3755,  3548,  2982,  3615,  3756,  3769,  1369,  3757,
    1462,   979,  1370,  1222,   876,   876,    32,  1982, -2120, -2120,
   -2121, -2121, -2122, -2122,  3357,  1209,  1375,   867, -2123, -2123,
     876, -2124, -2124,  3018,  2993, -2126, -2126, -2128, -2128,   867,
    2254, -2130, -2130,  2435,  1208,  1223,  1813,  1814,  3009,  2438,
    1437,  1438,  1377,  3328,  2890,    37,  2188,  2189,  1378,  2891,
    1210,  -798,  -798,  2861,  1439,  1440,  3199,  1206,  1388,   867,
    1431,  1432,  1390,   874,  2255,  1391,   867,  1397,   512,  1441,
    1442,  1401,  3329,  1404,  3475,  -802,  -802,  1405,    39,   883,
     512,   625,  -801,  -801,  2517,  2518,  3688,   625,  1210,    42,
    3690,  1225,  3167,  3168,  1674,  1676,  1408,  1407,  2892,  1426,
     512,  1420,   867,  3476,  1425,   512,   867,   874,   979,  1428,
    1362,  1456,   867,  1457,  1226,  1461,  2893,  2261,  1464,   874,
    1465,  1208,  1485,  1484,  1531,  1433,  1434,  1435,  1436,  1437,
    1438,  1490,   504,  1439,  1440,  1228,  3436,  1210,   504,  1518,
    1533,  1534,  1541,   663,  1547,  1555,  2136,  3392,  2139,   874,
     512,  2262,  1548,  1554,   512,  1560,   874,  1564,  1566,   512,
    1441,  1442,   740,  2154,   631,  1056,  1574,  1577,  1927,  1575,
     631,  -971,  1928,  1929,  -978,  1582,  1930,  1931,  1932,   663,
    -823,  3747,  1599,  -824,  2698,  -968,  3283,  3436,  2563,  3330,
    -969,  1586,   874,  -972,  3331,  -970,   874,  1587,   512,  3332,
    1591,  2191,   874,  1604,  1610,  1656,  1658,  1660,  1672,  1683,
    1688,  1697,   883,  1684,   876,  1698,  1181,  1733,  2894,  1735,
    1737,  1689,  1321,   625,  1210,  3477,  1183,  2895,  1766,  1748,
    3478,  1767,  1768,  1773,  1774,  1775,  3579,  1413,  1779,  1786,
    1787,  2964,  1791,   512,  3208,  3209,   625,  -682,  1819,  1441,
    1442,  1801,   736,  1815,   633,  1806,  1830,  1840,   512,  1843,
     633,  -682,  1831,  1844,  1846,  3436,  -682,  1850,  1847,  1849,
    1858,  3452,  2015,  1856,   504,  1057,  1865,  1867,  1868,  1885,
    1875,  1876,  1879,   883,  1919,  1880,  1881,  3519,  1882,  2288,
    2289,  2291,  2292,  1891,  1916,  1918,  2294,   504,   512,  1921,
    1924,  1955,  1947,  2011,   512,  2012,   631,  3064,   883,  1956,
    2013,  2016,  3017,    89,  1963,  1966,  1984,  1987,  1477,  -682,
     512,  1993,  1996,  1997,  1998,  2003,  1617,  1492,  2019,   631,
    1321,  1321,  1321,  3653,  2380,  2381,  2382,  2383,  2384,  2385,
    -682,  2006,  2389,  2390,  2391,  2392,  2393,  2394,  2395,  2396,
    2397,  2398,  2050,  3333,   876,  2053,  2055,  2056,  2202,  2057,
    2077,  2084,  2058,  2095,  3334,   883,  2958,  2098,  2123,  1443,
    1444,  2129,  2122,  1362,  2096,   740,  2144,  2143,  1477,  2142,
    2141,  1934,  2152,   512,  3479,   749,  2165,  2168,  -682,   512,
    2178,  2177,  2180,  2179,  2181,  3480,   633,  -682,  2182,  2199,
    2203,   512,   512,   512,   512,   867,  1832,  2207,  1834,  2204,
    1835,  2210,  2214,  2215,  1836,   512,  2216,   512,  2278,   633,
     512,  3501,  2282,   750,  2287,   512,  2293,   517,  2297,  2300,
    2299,  2301,  2315,  2318,  2316,  2321,  2323,  2329,   512,  1611,
    2322,  2330,  2325,  2331,  2427,   517,  3185,  2326,  1613,  2363,
    2353,  1935,  2371,  1952, -1430,   512,  2332,  2333,  1927,   979,
    2341,  2401,  2342,  1951,  1321,  1663,  2408,  2420,   876,  2409,
     512,   512, -1430,   512,  1669,  2410,  1477,  1477,  2414,  2421,
    2432,    83,  2451,   534,  2437,  2476,  2477,  2439,   564,  2452,
    2459,  2460,  2462,   518,  2461,   874,  2475,  2463,  2473,    83,
     641,  2480,   624,  2487,  2496,  2497,  2502,   883,  2503,  2504,
    2528,   518,   876,  2545,   680,   680,  2548,    83,  2550,  2551,
    2556,  -804,   512,  2569,   876,  2558,   739,  2559,  2572,  2570,
     512,   512,   512,  2573,  2576,  2580,  3207,  2584,  2581,   512,
    1794,   883,   512,   740,  2582,   504,   519,  2586,   512,  -682,
    2587,  2590,  2609,  2611,   876,  3381,  2624,  2788,  2639,  2630,
    2631,   876,  2632,   512,   519,  2634,  2640,  2650,   624,   624,
     756,  2651,  2656,  2641,  2654,   740,   767,   631,  2666,  2667,
      83,  2670,  2671,  2674,  2743,  2678,  2683,   520,  2685,   867,
    2702,  2710,  2693,  2694,  2713,  2716,  2733,   876,  2720,  2719,
    2734,   876,  2745,  1689,  2813,  2721,  2722,   876,  2746,  2752,
    2813,   980,  2756,  1023,  2762,  2772,   883,   775,  2770,  1024,
    1166,   776,  2773,  2785,  2791,   521,  2776,  2786,  2833,  2797,
    2793,  2798,  2835,  2854,   736,   736,  2852,  2858,  2818,  3454,
    2856,   736,  2866,   521,  2899,  2872,  3501,  2915,  2989,  2873,
    2879,  2985,   512,  3001,  2979,  2980,  2860,  3005,   512,  2981,
    2996,  2997,  3000,  3014,  1936,  1937,  1938,   633,  1939,  1940,
    1941,  1942,  1943,  1944,   512,   522,  1025,   523,   512,   874,
    3016,  2844,   512,   512,   512,  3023,  3055,  3324,   512,   512,
     512,  2281,   512,   522,   524,   523,  3024,  3049,  3066,  3110,
     525,  3148,  3029,   526,  3051,  3640,  3151,  3158,   883,  3107,
    3101,   512,   524,   512,  3060,  3160,  3067,  3086,   525,  1321,
    3109,   526,  2962,  1321,  2060,  1321,   512,   512,   512,   512,
     512,   512,   512,   512,   512,   512,  3093,  3313,  3164,  3106,
    3149,  3174,  3165,  3178,  3166,  3172,  2958,  3173,  1026,  3182,
    3183,  3184,   512,  2648,  3451,  3192,   512,  3195,  1191,   512,
    3197,  3198,  3202, -1383, -2099, -2100,  2662,  2663,  2665,   512,
   -2101,  3453, -2102, -2103,  3456,  1832, -2104,  1834, -2105,  1835,
    2987,  2676,  3215,  1836,  2679,   512,  1027, -2106,  3216,  2684,
    3225, -2107,  3214,   867, -2108, -2110,  3228, -2111,  3235, -2112,
    3249,  3251,  1028,  3253,   512,    21,   883,  3010,  3229, -2113,
    3012, -2114,   874,  1029, -2115,  3563,   740,  1898,   867,  3236,
   -2116,   512, -2117, -2119, -2120,  3441, -2121,  3443,   512,   512,
     512,   512, -2122, -2123, -2124,  2964,   499,   511, -2125,  1540,
   -2126,   532,  3254, -2127,  3223,  1030,   532,   512,   512, -2128,
     622,  3257,   636,   636, -2129, -2130,  3597,   640,   532,   645,
   -1384,  3593,   645,   512,  3263,   664,   668,  1192,  3264,   668,
    3267,  3269,   532,   532,  3275,   867,  3271,  3278,  3277,  3281,
    3282,  3284,  3289,   874,  3294,  3309,  2743,   625,  1362,  3116,
    3312,  3321,  1031,   512,  2730,  2731,  2732,  2778,  2779,  1032,
     876,  3336,  3338,  3358,  1023,  3359,  3363,  3366,   874,  3369,
    1024,  1056,  3371,  3383,  1927,  3384,   622,   622,  1928,  1929,
     740,  3393,  1930,  1931,  1932,  3391,  3400,  3401,   664,  3406,
    3560,  3408,  3409,   668,   532,   668,   668,   668,   504,  3410,
    2767,  3423,  1033,  3425,   512,  3424,  3438,  3439,   512,  3442,
      25,    26,    27,  3445,   512,  3446,  3448,  3455,  3458,  1034,
    3463,  2809,  3470,  3474,  3481,   874,  3489,  1025,   512,  3508,
     631,  3191,  3512,  3514,   512,  3515,  3518,  3531,  3539,  3540,
    3541,  3533,  3545,  3550,  3552,  3554,  3089,   512,   512,  3557,
    3562,  3558,  3577,  3568,  3592,   512,    83,  3578,  3590,  1203,
    3594,  3599,   800,  2134,  3587,  1204,  3571,  3604,  3610,  3611,
    3612,  3613,   512,  3616,  1216,  1056,    32,   867,  1927,  3619,
    3617,  3624,  1928,  1929,  3625,  3626,  1930,  1931,  1932,  3634,
    1035,  3636,  3662,   893,  1217,  1193,  3675,  3638,  2855,  1026,
    3639,  3672,  3677,  3680,  2768,  3683,   777,  3698,    83,   739,
    3710,  2962,  3702,  3703,  3673,    37,  3674,  3721,  3722,  3737,
     633,  3742,  3728,  3740,  3748,  3751,  3752,  3762,  3764,  3770,
    3775,  2914,  1168,   883,  3205,  2241,  2918,  1027,  1218,  2607,
    2138,   536, -1864,  2647,   876,  2699,   989,   512,    39,  3258,
     997,  2984,  3608,  1028,  3717,  3379,  3671,  3678,  3711,    42,
    1758,  1009,   512,  3422,  1029,  2589,  3628,   874,  1205,  2614,
    3004,  3669,  2883,  3676,  2968,    43,   512,   740,  2585,  3022,
    2990,  3667,   979,  2995,  1826,  2848,   867,  1934,  1883,  1893,
    3241,  3543,  1861,  3495,  2847,  3632,  1030,  3589,  3735,    44,
    3524,   874,  3771,  3777,   739,  3399,  3761,   756,   680,  3750,
    3682,   512,  3774,   663,  3743,  3588,   996,   512,  1989,  2811,
    2543,  1362,  2544,  3469,  3566,   512,  3302,  3733,  2820,  3734,
     883,  2515,  1685,  1538,  2575,  1539,  1219,  2206,  2561,  2724,
    3637,  2571, -1864,  1031,  2174,  3553,   883,  1730,  3444,   626,
    1032,   512,  3031,  3032,  3033,  3034,  1729,  1935,  2205,  2547,
    2442,  1734,  3058,  3286,  1012,  1505,   998,   736,  2718,  2717,
    2748,  1874,  3385,  1493,  3556,  2964,   874,   876,   867,  1495,
    3555,  1499,  3697,    83,  2754,  2471,  1220,  1500,   512,  2564,
   -1864,  1934,  1477,  1033,  1221,  2455,  1975,  3150,  2365,  2472,
    2764,  2449,  2137,   648, -1864,  1056,  1222,   764,  1927, -1864,
    1034,     0,  1928,  1929, -1864,     0,  1930,  1931,  1932,     0,
       0,     0,     0,     0,     0, -1864,   512,     0,  1206,     0,
   -1864,   512,     0,  1056,  3077,     0,  1927,     0,  1223,     0,
    1928,  1929,     0,     0,  1930,  1931,  1932,     0,   876,     0,
       0,     0,     0,  3187,     0,     0,     0,   512,     0,  3398,
       0,  1935, -1864,     0,     0,     0,     0,     0,   874,     0,
       0,     0,  3767,   876,     0,     0,  2962,   512,   512,     0,
       0,  1035,     0, -1864,     0,     0,  1990,     0,  1224,     0,
     736,   512,  1208,     0,  1225,     0,   512,     0,   512,  1477,
       0,     0,   512,     0,     0,   668,     0,     0,     0,     0,
     668,     0,     0,   668,  3396,  3397,   512,  1226,     0,  3193,
     532,     0,  1227,     0,     0,     0,     0,     0,     0,     0,
     876, -1864,     0,     0, -1864,     0,     0,     0,  1228,     0,
   -1864,     0,     0,   512,   512,     0,     0,   512,     0,   886,
     532,   532,     0,     0,     0,     0,  1616,     0,     0,  1617,
       0,     0,   504,  1618,  1619,     0,   874,   736,   736,     0,
    1936,  1937,  1938,     0,  1939,  1940,  1941,  1942,  1943,  1944,
       0,     0, -1864,     0,     0,     0,     0,     0,     0,  3259,
     987,   511,   636,     0,   631,  1210,  1627,     0,   499,     0,
     668,     0,     0, -2131,     0,     0, -1864,     0,     0,   622,
       0,     0,     0,  1016,  1016,     0,     0,     0,  1016,  1039,
       0,  1934,     0,     0,   512,     0,     0,    83,  1629,     0,
       0,   512,     0,  1321,  3528,     0,     0,  3532,     0,     0,
       0,     0,     0,   645,   645,     0,   645,     0,  3492,  1934,
    3494,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     668,     0,   624,     0,   670,   736,   532,     0,   736,   624,
     512,     0,   876,     0,  1936,  1937,  1938,     0,  1939,  1940,
    1941,  1942,  1943,  1944,   633,     0,     0,     0,     0,     0,
       0,  1935, -1864,     0,  2478,     0,     0,    10,  3535,     0,
    1579,     0, -1864,     0,     0,     0,   876,     0,   512,     0,
       0,  1583,     0,     0,  3538,     0,     0,     0,  3542,  1935,
       0, -1864,     0, -1864, -1864, -2131,     0,  1616,  2618,     0,
    1617,     0,     0,   668,  1618,  1619,   668,     0,  1597,     0,
       0,     0,     0,   867, -2131,     0,     0,     0,     0, -2131,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   -1864,     0,     0, -1864, -1864, -1864,     0,  1627,     0,     0,
       0,    21,  2644,     0, -2131,     0,   668,     0,     0,     0,
       0,   876,     0,   668,   668,   668,   668,     0, -2131,     0,
    2658,   877,     0,   680,     0,   512,     0,     0,   668,  1629,
       0,     0,   504,     0,     0,     0,     0,   512,   512,     0,
       0,   512,     0,     0,     0,     0,     0,   756,   756,   512,
     756,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   736,   736,   874,   631,     0,     0,     0,     0,     0,
     867,     0,  1638,     0,  3681,     0,  3528,     0,     0,   512,
    1477,     0,   512,   504,     0,  2990,  2962,  2700,  1321,  2701,
    3407,     0,     0,  2706,     0,  2709,     0,     0,     0,     0,
       0,     0,     0,   876,     0,   736,     0,   736,     0,   512,
    3431,   512,     0,     0,     0,   631,     0,     0,  3471,  3472,
       0,     0,     0,     0,     0,     0, -2131,     0,     0,     0,
    3679,     0,     0,     0,  1936,  1937,  1938,     0,  1939,  1940,
    1941,  1942,  1943,  1944,     0, -2131,    25,    26,    27,     0,
   -2131,     0,     0,     0,   633,     0,     0,     0,     0,     0,
     874,   504,  1936,  1937,  1938,     0,  1939,  1940,  1941,  1942,
    1943,  1944,   512,     0, -2131,     0,   874,     0,     0,   512,
       0,  3708,  3528,  3744,     0,     0,     0,     0,     0, -2131,
       0,     0,     0,   631,   736,   736,  1056,     0,     0,  1927,
       0,   876,   512,  1928,  1929,   633,     0,  1930,  1931,  1932,
       0,     0,    32,   736,   736,     0,  1016,  1039,  3766,   668,
       0,     0,  1512,     0,     0,  3499,     0,     0,  1016,  1016,
       0,     0,   512,     0,   532,     0,  3776,     0,     0,     0,
     622,     0,     0,  1638,     0,     0,   512,   622,     0,   736,
       0,    37,     0,     0,   512,     0,     0,   532,     0,  3567,
       0,     0,     0,   512,  3534,     0,     0,   736,     0,     0,
    1576,    38,     0,     0,     0,     0,     0,     0,     0,     0,
    3582,  3583, -2131,   633,    39,     0,     0,     0,     0,  1645,
    1646,  1647,  1648,  1649,  1650,    42,     0,     0,     0,     0,
       0,     0,     0,  3644,     0,     0,     0,     0,     0,     0,
       0,    43,     0,     0,     0,     0,     0,     0,   532,   877,
       0,  1056,     0,  1888,  3116,  1889,     0,     0,     0,  3117,
       0,     0,     0,     0,     0,    44,     0,     0,    83,     0,
       0,     0,     0,  2959,     0, -2131,     0,     0,     0,   663,
       0,     0,     0,     0, -1866,     0,     0,     0,     0,     0,
       0,  3124,     0,     0,  1677,     0,     0,  1679, -2131,     0,
    2644,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   532,   532,     0,  1056,     0,     0,  1927,     0,   668,
       0,  1928,  1929,  3126,     0,  1930,  1931,  1932,     0,     0,
   -1880,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1512,  1934,  3078,     0,   624,     0,     0,   624,     0,
       0,   668,  1757,   624,     0,     0,   624,     0,     0,     0,
       0,   624,     0,     0,   668,     0,     0,     0,     0,     0,
       0,     0,     0,  3661,     0,    83,     0,     0,     0,     0,
       0,   668,     0, -2131, -1866,   668,     0,     0,     0,  1803,
    1645,  1646,  1647,  1648,  1649,  1650,  1663,     0,   876,     0,
       0,     0,     0,  3685,     0,     0,   533,     0,     0,     0,
       0,   533,  1935,     0,     0,     0,     0,     0,     0,     0,
   -2131,     0,     0,   533,     0,     0,     0,     0,     0,     0,
   -1880,     0, -1866,  2085,     0,     0,     0,   533,   533, -2131,
     877,     0,     0,     0, -2131,     0, -1866,     0,     0,     0,
    3095, -1866,     0,     0,     0,     0, -1866,     0,     0,     0,
       0,     0,  1056,     0,     0,  1927,  2990, -1866,     0,  1928,
    1929,     0, -1866,  1930,  1931,  1932,     0,     0, -1880,     0,
       0,     0,     0, -2131,     0,     0,     0,     0,     0,     0,
       0,  3573, -1880,     0,     0,   876,     0, -1880,     0,   533,
       0,     0, -1880,     0, -1866,     0,     0,     0,   756,     0,
       0,   876,     0, -1880,     0,     0,     0,     0, -1880,  1816,
       0,   668,     0,     0,     0, -1866,  2990,   668,     0,     0,
    1934,     0,     0,     0,     0,     0,     0,  1935,  1853,     0,
    3765,     0,     0,  2213,     0,     0,     0,     0,     0,     0,
   -1880,     0,     0,  2222,     0,  2225,     0,  3772,  2236,     0,
       0,     0,     0,     0,  2240,     0,  2242,     0,     0,  1871,
       0, -1880,     0, -1866,  1871,     0, -1866,     0,  2249,     0,
       0,     0, -1866,  2252,     0,     0,     0,  2257,  2258,  2259,
    2260,     0,  2264,  2265,     0,     0,     0,     0,     0,     0,
    1935,     0,     0,     0,  1056,   886,     0,  3116,   886,   877,
     532,   532,  3117,   532,   886,     0,     0,     0,     0, -1880,
       0,     0, -1880,     0, -1866,  1936,  1937,  1938, -1880,  1939,
    1940,  1941,  1942,  1943,  1944,     0,     0,     0,  2298, -2131,
       0,     0,     0,     0,  3124,     0,     0,    83, -1866,     0,
    3237, -2131,     0,     0,     0,     0,     0,     0,     0,  1512,
    1512,     0,     0,     0,     0,  1512,     0,   499,     0,     0,
   -1880,     0,     0,  1477,     0,     0,  3126,     0,  1934,     0,
    1016,     0,   532,  1970,     0,     0,     0,     0,     0,     0,
     668,     0,     0,   622, -1880,     0,   622,     0,     0,  1023,
       0,   622,     0,     0,   622,  1024,   670,     0,     0,   622,
       0,   532,     0,   532,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  2313,
       0,     0,     0,   879, -1866,  2043,     0,     0,     0,     0,
    2049,     0,  3473,     0, -1866,     0,  3300, -2131,  1935,    21,
       0,     0,   670,     0,  3141,  3142,  3143,  3144,  3145,  3146,
       0,     0,  1025, -1866,     0, -1866, -1866,     0,     0,     0,
     877,     0,     0, -2131,     0,     0,     0,     0,   886,     0,
   -1880,     0,     0,     0,     0,     0,     0,     0,   624,     0,
   -1880,     0, -2131,     0,   624,     0,     0, -2131,     0,     0,
     877,   877, -1866,     0,     0, -1866, -1866, -1866,     0, -1880,
       0, -1880, -1880,  1936,  1937,  1938,   877,  1939,  1940,  1941,
    1942,  1943,  1944,     0,     0,     0,     0,  2135,     0,   668,
       0,   668,     0,     0,  1026,     0, -2131,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   668,  2157, -1880,     0,
       0, -1880, -1880, -1880,     0,     0,     0,     0,     0,  1512,
       0,     0,     0,     0,     0,     0,     0,  2959,     0,     0,
       0,     0,  1027,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   668,  1597,   532,     0,  1028,     0,
    1935,     0,     0,     0,    25,    26,    27,     0,     0,  1029,
    1757,   532,     0,  2085,     0,     0,     0,     0,     0,     0,
       0,   532,  2223,   532,  2227,     0,   532,     0,     0,  2498,
       0,     0,   532,     0,   532,   533,     0,     0,     0,     0,
     624,  1030,  1888,     0,     0,   886,   532,     0,     0,     0,
     886,   532,     0,     0,    83,   532,   532,   532,   532,     0,
     532,   532,     0,   624,     0,   533,   533,     0,     0,     0,
      32,  1936,  1937,  1938,     0,  1939,  1940,  1941,  1942,  1943,
    1944,     0,   668,   668,   668,   668,     0,     0,  1031,   668,
       0,     0,     0,     0,     0,  1032,     0,     0,     0,     0,
       0,     0, -2131,  2303,     0,  1023,     0,     0,     0,    37,
    1616,  1024,     0,  1617,     0,     0,     0,  1618,  1619,     0,
     877,  1622,  1623,  1624,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1033,  1625,
       0,   879,    39,   880,     0,     0,     0,     0,     0,     0,
    1627,     0,     0,    42,     0,  1034,  3520,  1628,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1025,    43,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   533,  1629,     0,     0,     0,     0,  1512,  1512,  1512,
    1512,  1512,  1512,    44,     0,  1512,  1512,  1512,  1512,  1512,
    1512,  1512,  1512,  1512,  1512,     0,     0,   663,   739,     0,
   -2131,     0,     0,     0,  2673,     0,     0,  3141,  3142,  3143,
    3144,  3145,  3146,     0,     0,   532,  1035,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1216,   668,     0,     0,
    1026,     0,     0,     0,     0,     0,   622,     0,     0,     0,
       0,     0,   622,     0,     0,     0,  1217,   532,  1056,     0,
     877,  1927,   532,     0,     0,  1928,  1929,     0,     0,  1930,
    1931,  1932,     0,     0,     0,     0,     0,  1616,  1027,  1630,
    1617,     0,     0,     0,  1618,  1619,     0,  3574,  1622,  1623,
    1624,     0,     0,     0,  1028,     0,     0,     0,  1631,     0,
    1218,  2905,     0,  1632,     0,  1029,     0,   532,     0,  2906,
       0,  2468,     0,     0,     0,     0,   532,  1627,     0,     0,
       0,     0,  1056,     0,  1628,  1927,  1633,  1634,     0,  1928,
    1929,     0,   879,  1930,  1931,  1932,     0,  1030,  1512,  1512,
       0,     0,  1635,     0,     0,     0,     0,     0,     0,  1629,
       0,  3656,     0,     0,     0,  2043,     0,  2959,     0,  1194,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    2907,     0,     0,     0,   877,     0,  1597,     0,     0,  1636,
       0,     0,  1637,     0,  1031,     0,     0,     0,   622,     0,
       0,  1032,     0,     0,     0,     0,  1638,     0,  1219,  1639,
     532,  3300,     0,     0,     0,     0,     0,     0,  1597,     0,
       0,   622,     0,     0,     0,  2157,     0,     0,   877,     0,
       0,     0,     0,     0,  1056,     0,     0,  1927,     0,     0,
     877,  1928,  1929,     0,  1033,  1930,  1931,  1932,     0,     0,
       0,   880,     0,     0,     0,     0,  1630,     0,  1220,     0,
       0,  1034,     0,  3657,     0,   532,  1221,     0,  1512,     0,
     877,   532,   882,    83,     0,  1631,     0,   877,  1222,     0,
    1632,  2908,     0,     0,  1934,     0,     0,  1816,     0,     0,
       0,     0,  2863,  2864,     0,     0,     0,     0,     0,  2859,
       0,     0,     0, -2131, -2131,     0,     0,     0,  1640,     0,
    1223,   879,     0,   877,     0,     0,     0,   877,     0,  1635,
    2916,     0,     0,   877,     0,     0,     0,     0,     0,  1532,
       0,     0,  1035,     0,     0,  2969,  2970,  2971,  2972,  2973,
    2974,  2975,  2976,  2977,  2978,     0,     0,     0,  1934,     0,
    1816,     0,  1563,     0,  1935,     0,   668,     0,     0, -2131,
       0,     0,     0,     0,     0,     0,  1225,     0,  1816,   668,
     668,   668,    83,  1638,     0,     0,     0,     0,     0,     0,
       0,     0,   532,     0,   668,     0,     0,   668,     0,  1226,
       0,     0,   668,     0,     0,     0,     0,     0,     0,    83,
       0,     0,    83,     0,     0,  2691,     0,     0,     0,     0,
    1228,     0,  2909,  1600,     0,  2910,  1641,     0,  1935,  1642,
    1643,  1644,   886,  1645,  1646,  1647,  1648,  1649,  1650,     0,
       0,     0,     0,     0,     0,     0,     0,  1816,  1816,     0,
    1816,     0,   880,     0,     0,     0,     0,     0,     0,     0,
    1934,     0,     0,     0,     0,     0,     0,     0,     0,  1597,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   499,
       0,     0,   879,     0,     0,  1640,   533,   533,     0,  1616,
       0,     0,  1617,     0,     0,     0,  1618,  1619,     0,  2723,
       0,     0,     0,     0,     0,     0,     0,   668,   668,   668,
       0,     0,   879,   879,     0,     0,   532,     0,  1512,   532,
       0,     0,     0,     0,   624,   532,     0,     0,   879,  1627,
    1935,     0,     0,     0,  1768,     0, -2131,     0,     0,     0,
    2043,     0,     0,     0,     0,     0,     0,  1616,     0,     0,
    1617,     0,     0,     0,  1618,  1619,  1620,  1621,  1622,  1623,
    1624,  1629,     0,     0,     0,     0,     0,     0,     0,     0,
    1512,  1512,     0,   739,     0,     0,  1625,  1936,  1937,  1938,
     882,  1939,  1940,  1941,  1942,  1943,  1944,  1627,     0,     0,
       0,     0,     0,  1641,  1628,     0,  1642,  1643,  1644,     0,
    1645,  1646,  1647,  1648,  1649,  1650,     0,  3186,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1629,
       0,   880,     0,     0,  1512,     0,   877,  2488,     0,  2837,
       0,     0,     0,     0,     0,  2157,     0,     0,     0,     0,
       0,  1936,  1937,  1938,     0,  1939,  1940,  1941,  1942,  1943,
    1944,   668,     0,     0,     0,   532,     0,     0, -2131,   532,
     532,   532,     0,     0,     0,  1816,  1757,  1816,     0,  1853,
       0,     0,  3240,     0,     0,     0,     0, -2131,     0,     0,
       0,     0, -2131,  1056,     0,     0,  3116,     0,   532,     0,
    2917,  3117,    21,     0,  3120,  3121,  3122,     0,     0,     0,
       0,     0,     0,   532,   532,   532,   532,   532,   532,   532,
     532,   532,   532,     0,     0,     0,  1630,     0,     0,     0,
       0, -2131,   879,  3124,     0,     0,     0,     0,     0,  2303,
    3125,     0,    83,   668,     0,  1631,   668,     0,     0,     0,
    1632,     0,     0,  1936,  1937,  1938,  1757,  1939,  1940,  1941,
    1942,  1943,  1944,     0,     0,  3126,     0,     0,     0,     0,
       0,     0,  1853,  1633,  1634,     0,     0,     0,     0,     0,
    1597,   882,     0,     0,     0,  1638,     0,     0,     0,  1635,
       0,  1816,   880,     0,     0,   533,   533,     0,   533,     0,
    1902,     0,  1512,     0,     0,     0,     0,     0,   532,     0,
       0,     0,     0,     0,     0,   668,   668,   668,   668,     0,
     877,     0,   880,   880,     0,     0,  1636,  1512,     0,  1637,
    1512,     0,     0,     0,   532,   886,     0,     0,   880,     0,
       0,     0,     0,  1638,     0,  1903,  1639,    25,    26,    27,
    3068,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  3127,     0,  1904,     0,     0,   533,     0,     0,
    2085,     0,   879,     0,     0,     0,     0,     0,     0,     0,
    3090,  3128,   622,     0,     0,  1905,  3129, -2131,     0,  1906,
       0,     0,     0,     0,  1056,     0,  2000,  1927,  2004,     0,
       0,  1928,  1929,     0,     0,  1930,  1931,  1932,     0,  3130,
    3131,  1907,     0,    32,  1908,  1512,  1512,  1512,  1512,     0,
       0,     0,     0,     0,     0,  3132,  3382,     0,     0,     0,
       0,  3155,  1909,     0,     0,  2157,     0,     0,     0,     0,
       0,  2043,     0,     0,     0,  1640,  3389,  3390,     0,     0,
     882,     0,    37,   877,     0,  1757,     0,     0,     0,     0,
       0,  1816,  3133,     0,     0,  3134,    83,    83,     0,     0,
       0,  3411,     0,     0,   886,   532,  1512,     0,     0,  1935,
       0,     0,   668,     0,     0,    39,   879,     0,     0,     0,
       0,     0,     0,     0,     0, -2131,    42,     0,     0,  3206,
       0,     0,  1645,  1646,  1647,  1648,  1649,  1650,     0,     0,
       0,     0,    43,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   877,  1910,     0,     0,     0,     0,
     879,     0,   880,  1911,     0,     0,    44,     0,     0,     0,
       0,     0,   879,     0,     0,     0,     0,     0,     0,   877,
     663,     0,     0,  1641,  1912,     0,  1642,  1643,  1644,     0,
    1645,  1646,  1647,  1648,  1649,  1650,     0,     0,     0,     0,
       0,   533,   879,     0,  1816,     0,     0,     0,     0,   879,
    2458,  3136,  2085,     0,  1913,     0,   533,     0,     0,  2303,
       0,  1429,  1430,     0,     0,     0,   533,     0,   533,     0,
      83,   533,    83,  3255,     0,     0,   877,   533,     0,   533,
   -2131,   882,  1512,     0,     0,   879,     0,     0,     0,   879,
       0,   533,     0,     0,     0,   879,   533,     0,     0,     0,
     533,   533,   533,   533,     0,   533,   533,     0,  3272,     0,
       0,   882,   882,     0,   532,     0,     0,     0,     0,     0,
      83,     0,   532,     0,  1116,  1116,     0,   882,     0,     0,
       0,     0,     0,     0,     0,     0,    83,     0,     0,     0,
      83,     0,   880,  1431,  1432,     0,     0,     0,  3297,     0,
    1935,     0,     0,     0,     0,     0,     0,     0,     0,  3137,
       0,     0,  3138,  3139,  3140,     0,  3141,  3142,  3143,  3144,
    3145,  3146,     0,     0,     0,     0,  1512,  1512,  1512,  1512,
    1512,  1512,  1512,     0,     0,   886,  1512,  1512,     0,     0,
       0,  1512,     0,     0,  1512,     0,     0,  1512,  1512,  1512,
    1512,  1512,  1512,  1512,  1512,  1512,  1512,     0,  1433,  1434,
    1435,  1436,  1437,  1438,     0,     0,  1439,  1440,   877,     0,
       0,     0,     0,   532,  1616,     0,     0,  1617,   532,     0,
       0,  1618,  1619,  1620,  1621,  1622,  1623,  1624,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1242,     0,     0,
       0,  1364,   877,  1625,   532,     0,   880,     0,     0,     0,
       0,     0,     0,     0,  1627,     0,     0,     0,     0,     0,
     533,  1628,     0,     0,   532,   532,     0,     0,     0,     0,
      21,     0,     0,     0,     0,     0,     0,     0,   668,     0,
       0,  3663,     0,   668,     0,  1757,  1629,     0,     0,   532,
     880,     0,  2441,     0,     0,     0,     0,  2004,     0,     0,
       0,     0,   880,   668,     0,     0,  3433,     0,     0,     0,
       0,   882,    83,     0,  1203,     0,     0,   877,     0,     0,
    1204,     0,  1441,  1442,     0,     0,  1512,     0,     0,  1216,
     532,  1016,   880,     0,  1016,     0,     0,     0,     0,   880,
       0,     0,   533,     0,     0,     0,     0,     0,     0,  1217,
       0,  1600,     0,  1936,  1937,  1938,     0,  1939,  1940,  1941,
    1942,  1943,  1944,    83,     0,     0,     0,     0,     0,     0,
       0,  1512,  1512,     0,     0,   880,     0,     0,   879,   880,
       0,     0,     0,  1630,     0,   880,     0,  1512,     0,  1512,
       0,  1512,     0,  1218,     0,     0,     0,     0,     0,     0,
       0,     0,  1631,  3493,     0,     0,     0,  1632,     0,   877,
       0,  3155,     0,     0,     0,    25,    26,    27,   668,     0,
       0,     0,     0,  1205,     0,     0,     0,     0,     0,     0,
    1633,  1634,     0,     0,     0,   533,     0,     0,     0,     0,
       0,     0,  1443,  1444,     0,     0,  1635,     0,     0,     0,
       0,   882,     0,  1488,     0,     0,     0,   668,     0,     0,
       0,  1506,  1445,     0,  1508,     0,     0,  1519,  1522,  1527,
    1530,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    32,     0,  1636,     0,     0,  1637,     0,     0,     0,
     533,  1219,     0,     0,     0,  3272,  2579,     0,     0,     0,
    1638,     0,     0,  1639,     0,     0,     0,   877,  1364,     0,
       0,     0,  1512,     0,     0,     0,     0,     0,     0,  1512,
      37,     0,  1512,  1512,     0,  1580,     0,     0,     0,     0,
       0,  1512,     0,  1512,  1512,     0,     0,     0,  1512,     0,
       0,  1220,     0,  1585,     0,     0,  3433,     0,     0,  1221,
       0,     0,     0,    39,  1588,  1589,  1590,     0,  1594,  1598,
       0,  1222,   879,     0,    42,   882,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      43,     0,  1757,  1206,     0,     0,     0,     0,  1659,     0,
       0,     0,     0,  1223,   886,   886,     0,  3433,   886,     0,
       0,     0,  1640,     0,    44,     0,  1970,   533,     0,   882,
       0,     0,     0,     0,     0,     0,     0,     0,   663,     0,
       0,   882,  1512,  1512,     0,     0,  1512,     0,     0,     0,
    1512,     0,     0,  1512,  1512,     0,   668,     0,     0,   532,
    1704,     0,     0,  2243,  1720,  1725,     0,  1208,     0,  1225,
       0,   882,     0,     0,     0,  1116,  1116,     0,   882,     0,
       0,     0,     0,     0,     0,     0,   668,     0,  1757,     0,
       0,     0,  1226,     0,     0,  3433,     0,  2244,   880,  1429,
    1430,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1228,   882,   879,     0,     0,   882,     0,
       0,     0,     0,     0,   882,  1512,  1512,     0,     0,  1512,
    1641,     0,     0,  1642,  1643,  1644,     0,  1645,  1646,  1647,
    1648,  1649,  1650,     0,     0,     0,     0,     0,     0,   668,
    1920,   533,     0,     0,   533,     0,   886,     0,     0,     0,
    2000,     0,  1482,     0,     0,     0,     0,     0,     0,     0,
    1210,     0,     0,     0,     0,     0,     0,     0,     0,  2157,
       0,  1431,  1432,     0,     0,     0,   879,     0,     0,     0,
       0,     0,     0,     0,   877,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1364,   668,
       0,   879,     0,     0,     0,     0,     0,  1364,     0,     0,
       0,     0,  1482,   668,     0,     0,     0,     0,     0,     0,
       0,   532,     0,     0,     0,     0,     0,     0,     0,     0,
     668,  1364,     0,     0,     0,     0,  1433,  1434,  1435,  1436,
    1437,  1438,     0,     0,  1439,  1440,     0,     0,     0,     0,
    3112,  3113,  3114,  3115,     0,     0,     0,     0,   879,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   880,     0,     0,     0,     0,     0,     0,     0,
     533,   877,  1614,     0,   533,   533,   533,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   877,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1482,  1514,
    1482,  1482,     0,   533,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   533,   533,
     533,   533,   533,   533,   533,   533,   533,   533,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1441,  1442,  1917,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1482,     0,     0,  1482,  1482,     0,
       0,     0,     0,     0,     0,  1527,     0,  1527,  1527,     0,
     879,     0,     0,     0,     0,   880,     0,   882,     0,     0,
    1116,  1116,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  2000,     0,     0,  1116,     0,     0,     0,
       0,     0,     0,     0,   879,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  2441,
       0,     0,     0,     0,  2022,     0,  2023,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   880,     0,     0,     0,
    1443,  1444,     0,     0,  2062,     0,     0,     0,     0,  1726,
    2066,  2067,  2068,  2069,  2070,  2071,  2072,  2073,  1514,     0,
       0,   880,  2082,  2083,     0,     0,     0,  2094,     0,   879,
       0,  2097,     0,     0,  2105,  2106,  2107,  2108,  2109,  2110,
    2111,  2112,  2113,     0,     0,  2114,     0,     0,     0,     0,
       0,     0,  1116,     0,  1364,     0,     0,     0,     0,     0,
       0,  3314,  3315,  3316,  3317,  3318,  3319,  3320,     0,     0,
       0,  3325,  3326,     0,     0,  2140,  3335,     0,   880,  3337,
       0,     0,  3344,  3345,  3346,  3347,  3348,  3349,  3350,  3351,
    3352,  3353,  1860,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1869,     0,  1870,     0,     0,     0,     0,
     533,   882,     0,  1589,  1590,  1877,     0,     0,     0,     0,
       0,   879,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1878,  1615,     0,     0,     0,     0,  1616,     0,
       0,  1617,     0,     0,     0,  1618,  1619,  1620,  1621,  1622,
    1623,  1624,     0,     0,     0,     0,     0,     0,     0,     0,
    1895,  1897,     0,     0,     0,     0,     0,  1625,     0,     0,
       0,     0,  1626,     0,     0,     0,     0,     0,  1627,     0,
       0,     0,     0,     0,     0,  1628,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1616,     0,  2266,  1617,
       0,     0,  1364,  1618,  1619,  2276,  2277,  1622,  1623,  1624,
    1629,     0,     0,     0,     0,     0,     0,     0,     0,   879,
     880,     0,     0,     0,     0,  1625,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1627,     0,     0,     0,
       0,     0,  1364,  1628,   882,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   880,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1629,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  3280,
       0,     0,  3483,     0,  3486,     0,  3488,  2441,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1630,     0,     0,
       0,  2375,  2376,     0,  2377,   882,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1631,     0,     0,   880,
       0,  1632,     0,     0,     0,     0,  1514,  1514,     0,     0,
     882,     0,  1514,  2403,  2404,     0,     0,  2140,     0,     0,
       0,     0,     0,     0,  1633,  1634,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1630,     0,     0,     0,     0,
    1635,     0,     0,     0,     0,     0,  2431,     0,     0,     0,
       0,  2436,     0,     0,  1631,     0,     0,     0,   533,  1632,
       0,     0,     0,   533,     0,     0,     0,   882,     0,     0,
    1364,     0,     0,     0,     0,     0,     0,  1636,  2186,  2186,
    1637,  2453,  1633,  1634,  3572,     0,     0,  3575,  3576,   533,
       0,   880,  1516,     0,  1638,     0,  3580,  1639,  1635,     0,
       0,     0,     0,  3586,     0,     0,     0,     0,     0,   533,
     533,     0,  2466,     0,     0,     0,     0,  2469,  2470,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   533,  1636,     0,  1482,  1637,     0,
       0,     0,     0,     0,     0,     0,     0,  1482,     0,     0,
    1482,     0,  1638,     0,     0,     0,   879,     0,     0,     0,
    2490,     0,     0,  2493,     0,  2495,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   533,     0,     0,     0,     0,
       0,  2499,     0,     0,     0,     0,     0,  3650,  3651,   880,
       0,  3652,     0,     0,     0,  3655,  1640,     0,  3658,  3659,
       0,     0,     0,     0,     0,  1653,  2176,     0,     0,   882,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1056,  1704,     0,  3116,
       0,     0,  2338,  2340,  3117,  3118,  3119,  3120,  3121,  3122,
       0,     0,     0,   882,  1725,  2112,     0,  1653,     0,     0,
       0,     0,     0,   879,  1640,  3123,  1482,     0,     0,     0,
       0,     0,     0,  1116,     0,     0,  3124,     0,     0,   879,
    3705,  3706,  2583,  3125,  3707,     0,     0,  1616,     0,     0,
    1617,  1516,     0,     0,  1618,  1619,  1620,  1621,  1622,  1623,
    1624,     0,     0,     0,     0,     0,     0,     0,  3126,     0,
       0,     0,     0,     0,  1641,     0,  1625,  1642,  1643,  1644,
       0,  1645,  1646,  1647,  1648,  1649,  1650,  1627,   882,     0,
       0,     0,     0,     0,  1628,     0,     0,     0,     0,     0,
       0,  1653,     0,  1364,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1629,
    1616,     0,     0,  1617,     0,     0,     0,  1618,  1619,     0,
       0,     0,  1641,  1482,     0,  1642,  1643,  1644,  1515,  1645,
    1646,  1647,  1648,  1649,  1650,     0,     0,     0,     0,     0,
       0,     0,     0,  2682,     0,     0,     0,     0,     0,     0,
    1627,     0,     0,     0,     0,  3127,     0, -2131,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     882,     0,     0,     0,  3128,     0,     0,     0,     0,  3129,
       0,     0,  1629,     0,  1514,  1514,  1514,  1514,  1514,  1514,
       0,     0,  1514,  1514,  1514,  1514,  1514,  1514,  1514,  1514,
    1514,  1514,  3130,  3131,     0,     0,  1630,     0,     0,     0,
       0,     0,     0,  1653,     0,     0,   880,     0,  3132,     0,
       0,     0,     0,     0,     0,  1631,     0,     0,     0,     0,
    1632,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   533,     0,     0,     0,  2777,     0,
    2511,     0,     0,  1633,  1634,  3133,     0,     0,  3134,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   882,  1635,
       0,     0,  1935,     0,     0,  3135,  2751,     0,     0, -2131,
    2753,  2023,     0,     0,     0,     0,     0,  2757,     0,  2567,
    2567,     0,     0,     0,     0,     0,     0,  2766, -2131,     0,
    2769,     0,  2771, -2131,     0,     0,  1636,     0,     0,  1637,
    2775,     0,     0,   880,     0,     0,     0,  1515,  2782,  2783,
       0,     0,     0,  1638,     0,  2790,  1639,     0,     0,   880,
       0,     0,     0,     0,     0,  1514,  1514,  1653,     0,     0,
       0,     0, -2131,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1653,     0,  1653,     0,  1516,
    1516,  1056,  1945,     0,  3116,  1516,     0,     0,  1653,  3117,
    2834,  1653,     0,     0,  3136,     0,  1653,     0,     0,  1653,
    2849,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1638,     0,     0,     0,
    1116,  3124,     0,     0,     0,     0,     0,     0, -2131,     0,
       0,     0,     0,     0,     0,     0,   533,     0,     0,     0,
       0,     0,     0,     0,     0,  1640,     0,     0,     0,  1653,
       0,     0,     0,  3126,  1653,     0,     0,  1653,  1653,  1653,
       0,     0,     0,  1653,     0,     0,  2687,  1653,     0,     0,
       0,     0,     0,     0,     0,  1514,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  3137,     0,     0,  3138,  3139,  3140,     0,  3141,
    3142,  3143,  3144,  3145,  3146,     0,     0,     0, -2131,  3482,
       0,     0,     0,     0,     0,     0,     0,     0,  1653,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1616,     0,     0,  1617,     0,     0,
   -2131,  1618,  1619,  1641,     0,   882,  1642,  1643,  1644,     0,
    1645,  1646,  1647,  1648,  1649,  1650,     0,     0,     0, -2131,
    2054,     0,     0,  1653, -2131,  3047,  3048,     0,     0,     0,
       0,     0,     0,     0,  1627,     0,     0,     0,     0,  1653,
       0, -2131,  3065,     0,  1653,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  3069,     0,     0,     0,     0,  3071,
    3072,  1945,     0, -2131,  3073,     0,  1629,     0,     0,  3076,
       0,     0,  3079,  3080,     0,     0, -2131,  2266,  1364,     0,
       0,  3087,     0,  1645,  1646,  1647,  1648,  1649,  1650,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   882,     0,     0,  1515,  1515,     0,     0,     0,
       0,  1515,     0,     0,     0,     0,     0,  1935,   882,     0,
       0,     0,     0,     0,     0,     0,     0,  1116,  1616,     0,
       0,  1617,  2780,     0,     0,  1618,  1619,  1620,  1621,  1622,
    1623,  1624,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1625,     0,     0,
       0,     0,  2761, -2131,     0,     0,     0,     0,  1627,     0,
       0,  3181,     0,     0,     0,  1628,     0,     0,     0,     0,
       0,     0, -2131,     0,     0,     0,     0, -2131,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  3200,     0,
    1629,     0,     0,     0,     0,     0,     0,  1482,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1514,  1514, -2131,
       0,     0,     0,     0,     0,     0, -2131,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1653,     0,     0,     0,
       0,     0,     0,     0,  1945,  1945,     0,  1516,  1516,  1516,
    1516,  1516,  1516,  2127,     0,  1516,  1516,  1516,  1516,  1516,
    1516,  1516,  1516,  1516,  1516,  1945,     0,     0,     0,     0,
       0,  2831,     0,     0,     0,     0,     0,     0,     0,     0,
    1638,  3227,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1630,     0,     0,
       0,     0,     0,     0,     0,  1515,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1631,     0,     0,     0,
       0,  1632,     0,     0,     0,     0,     0, -2131,     0,     0,
       0,  1598,     0,     0,  3141,  3142,  3143,  3144,  3145,  3146,
       0,  1653,  1653,     0,  1633,  1634,     0,     0,     0,     0,
       0,  1364,     0,     0,     0,     0,     0,     0,  2466,     0,
    1635,     0,     0,     0,     0,     0,     0,     0,     0,  3291,
    3292,     0,     0,  3293,     0,     0,     0,     0,     0,     0,
       0,  1653, -2131,     0,     0,  1653,  1653,  1653,  1653,  1653,
    1653,  1653,  1653,     0,     0,     0,     0,  1636,  1516,  1516,
    1637,  1653,  1653,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1653,  1638,     0,  1653,  1639,     0,     0,
       0,     0,     0,     0,  1653,  1653,  1653,  1653,  1653,  1653,
    1653,  1653,  1653,  1653,     0,     0,     0,     0,     0,  1514,
       0,  1116,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  3365,     0,     0,     0,     0,     0,     0,  1653,
       0,     0,     0,     0,  3052,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1616,     0,  3377,  1617,     0,     0,
       0,  1618,  1619,  1620,  1621,  1622,  1623,  1624,  3070,     0,
   -2131,  1482,     0,     0,     0,     0,  1482,  1645,  1646,  1647,
    1648,  1649,  1650,  1625,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1627,     0,  1640,     0,  1516,     0,
       0,  1628,     0,  1515,  1515,  1515,  1515,  1515,  1515,     0,
       0,  1515,  1515,  1515,  1515,  1515,  1515,  1515,  1515,  1515,
    1515,     0,     0,  1895,  1897,  3430,  1629,     0,     0,     0,
       0,     0,  2831,  2831,  2831,  2831,     0,     0,     0,     0,
       0,     0,     0,  3047,     0,     0,     0,  3447,     0,     0,
       0,  1116,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  3457,     0,     0,     0,  1653,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1653,  1653,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1514,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1641,     0,     0,  1642,  1643,  1644,
       0,  1645,  1646,  1647,  1648,  1649,  1650,     0,     0,     0,
       0,  2054,     0,  1630,     0,     0,     0,     0,     0,     0,
    1116,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1631,     0,     0,     0,     0,  1632,  3510,     0,
       0,     0,     0,     0,  1515,  1515,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1633,  1634,     0,     0,  1653,  1653,  1653,     0,     0,  1945,
    1945,  1945,  1945,  1945,  1945,     0,  1635,     0,  1945,  1945,
    1945,  1945,  1945,  1945,  1945,  1945,  1945,  1945,     0,     0,
       0,     0,  1653,  1653,  3544,     0,     0,  1056,     0,     0,
    3116,     0,     0,     0,  3047,  3117,     0,     0,  3120,  3121,
    3122,     0,     0,  1636,     0,     0,  1637,  1116,     0,  1514,
    1653,     0,     0,     0,     0,  1653,  3123,     0,     0,     0,
    1638,     0,     0,  1639,   537,     0,     0,  3124,     0,     0,
       0,     0,  1653,     0,  3125,     0,     0,     0,     0,  1616,
       0,     0,  1617,  1116,     0,  1653,  1618,  1619,  1653,  1653,
    1895,  1897,     0,     0,  1515,  1945,  1945,     0,     0,  3126,
       0,  1482,     0,     0,     0,     0,     0,  3609,     0,  1653,
    1516,  1516,  1653,     0,  1653,     0,     0,     0,  1653,  1627,
       0,   538,     0,     0,     0,     0, -2131,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   539,     0,     0,
       0,     0,     0,  2831,  2831,  2831,  2831,  2831,  2831,  2831,
       0,  1629,     0,  2831,  2831,     0,     0,     0,  2831,     0,
       0,  2831,  1640,     0,  2831,  2831,  2831,  2831,  2831,  2831,
    2831,  2831,  2831,  2831,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   540,     0,     0,
       0,     0,     0,     0,     0,     0,  3127,   541,     0,     0,
       0,     0,  1653,     0,     0,     0,     0,     0,     0,   542,
       0,     0,     0,     0,   543,  3128,     0,  2781,     0,     0,
    3129,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  3694,  3694,     0,     0,     0,     0,     0,
       0,     0,     0,  3130,  3131,   544,     0,     0, -2131,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  3132,
       0,     0,     0,     0,     0,     0,     0, -2131,     0,     0,
    1641,     0, -2131,  1642,  1643,  1644,     0,  1645,  1646,  1647,
    1648,  1649,  1650,  3694,     0,     0,     0,  2374,     0,   545,
       0,     0,     0,   546,     0,     0,  3133,     0,     0,  3134,
       0,  1653,     0,  3450,     0,     0,     0,     0,     0,     0,
       0, -2131,     0,  1935,     0,     0,  3135,     0,     0,     0,
     -45,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1516,     0,     0,     0,     0,     0,     0,     0,
    3694,     0,     1,     0,     0,     0,     0,     0,  1514,  1514,
       0,     0,     0,     2,     0,     3,     4,     0,     0,     0,
       0,     0,   547,     0,  2831,  1638,  2831,     0,  2831,     5,
    1653,     0,  1653,     0,     6,     0,  1653,     0,   548,   549,
       0,     0,     0,     7,     0,  1653,  1515,  1515,  1653,     0,
    1653,     0,     0,     0,  1653,     8,     0,  1945,  1945,     0,
       0,  1653,  1653,     0,     0,     0,     9,     0,     0,  1653,
       0,     0,     0,   550,     0,  3136,   551,     0,    10,     0,
      11,     0,     0,     0,     0,   552,     0,     0,   553,     0,
       0,    12,     0,     0,     0,     0,     0,     0,     0,     0,
    2832,     0,     0,     0,     0,    13,     0,    14,   554,  3147,
       0,     0,     0,  1653,     0,     0,    15,     0,     0,     0,
       0,     0,   555,     0,    16,     0,     0, -2131,  1653,   556,
       0,     0,    17,     0,    18,    19,     0,     0,     0,   557,
       0,  1482,     0,     0,     0,   558,     0,     0,    20,  1514,
       0,     0,    21,     0,     0,     0,  2831,     0,     0,  2831,
    2831,     0,     0,     0,     0,     0,  1516,     0,  2831,     0,
    1514,  1514,     0,   559,     0,  2831,     0,     0,     0,     0,
      22,     0,     0,  3137,     0,     0,  3138,  3139,  3140,     0,
    3141,  3142,  3143,  3144,  3145,  3146,    23,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    24,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0, -2131,     0,     0,     0,     0,
       0,     0,  1645,  1646,  1647,  1648,  1649,  1650,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  2831,
    2831,     0,     0,  2831,     0,     0,     0,  2831,  1515,     0,
    2831,  2831,     0,     0,     0,  1616,     0,     0,  1617,     0,
       0,     0,  1618,  1619,  1620,  1621,  1622,  1623,  1624,     0,
       0,     0,     0,  1515,     0,     0,     0,    25,    26,    27,
       0,  1945,  1516,     0,  1625,    28,     0,     0,    29,     0,
       0,     0,     0,     0,     0,  1627,     0,     0,     0,     0,
       0,     0,  1628,     0,     0,     0,  1653,  1653,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      30,     0,  2831,  2831,  1653,     0,  2831,  1629,  1653,    31,
    1653,  1653,  1653,     0,     0,  1653,     0,     0,  1653,  1653,
       0,     0,     0,    32,     0,     0,  1653,     0,     0,     0,
      33,     0,     0,     0,     0,    34,     0,     0,     0,     0,
       0,  2832,  2832,  2832,  2832,     0,    35,     0,     0,     0,
       0,  3147,  3147,  3147,  3147,     0,     0,     0,    36,     0,
       0,     0,    37,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1616,     0,
       0,  1617,    38,     0,     0,  1618,  1619,     0,     0, -2131,
   -2131, -2131,     0,     0,     0,    39,     0,     0,    40,     0,
       0,    41,  1515,     0,  1630,     0,    42,     0,  1616,     0,
       0,  1617,     0,     0,     0,  1618,  1619,     0,  1627,     0,
    1653,     0,    43,  1631,     0,  1628,  1945,     0,  1632,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1653,
       0,     0,     0,     0,     0,     0,    44,     0,  1627,     0,
    1629,  1633,  1634,     0,     0, -2131,     0,     0,     0,     0,
      45,     0,     0,   -45,     0,     0,  1653,  1635,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1629,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1945,     0,
       0,     0,     0,     0,  1636,     0,     0,  1637,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1638,     0,     0,  1639,     0,     0,     0,     0,     0,
    1653,  1653,  1653,     0,     0,     0,     0,     0,  1515,     0,
       0,     0,     0,     0,     0,     0,  3081,  1630,     0,     0,
       0,     0,     0,  3147,  3147,  3147,  3147,  3147,  3147,  3147,
       0,  1516,  1516,     0,  3147,  3147,  1631,     0,     0,     0,
       0,  1632,     0,     0,  3147,     0,  3147, -2131,     0,     0,
       0,     0,     0,  3147,  3147,  3147,  3147,  3147,  3147,  3147,
    3147,  3147,  3147,     0,     0,     0, -2131,     0,     0,     0,
       0, -2131,     0,     0,  1653,     0,     0,     0,     0,     0,
    1635,     0,     0,     0,     0,     0,  1653,     0,     0,     0,
       0,     0,   537,  1640,     0,     0,     0,     0,     0,     0,
       0,     0,  2832,  2832,  2832,  2832,  2832,  2832,  2832,     0,
   -2131,     0,  2832,  2832,     0,     0,     0,  2832,     0,     0,
    2832,     0,     0,  2832,  2832,  2832,  2832,  2832,  2832,  2832,
    2832,  2832,  2832,  3354,  1638,     0,     0,     0,     0,  1653,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   538,
       0,     0,     0,     0,     0,     0,  1653,     0,     0,     0,
       0,     0,     0,     0,  1638,   539,  1653,     0,     0,     0,
       0,     0,  1516,     0,     0,     0,     0,     0,     0,     0,
    1945,  1945,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  3147,  1516,  1516,  3147,     0,  3147,     0,     0,
       0,  1641,     0,     0,  1642,  1643,  1644,     0,  1645,  1646,
    1647,  1648,  1649,  1650,     0,   540,     0,     0,  2457,  1653,
       0,     0,     0,     0,     0,   541,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1640,   542,     0,     0,
       0,     0,   543,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1653,     0,     0,     0,     0,     0,     0,
       0,     0,  1515,     0,     0,     0, -2131,     0,     0,     0,
       0,     0,     0,   544,     0,     0,  1945,     0,     0,     0,
       0,  3147,     0,     0,  3147,  3147,     0,     0,     0,  3147,
       0,  1945,  1945,     0,     0,  3147,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1515,  1515,     0,
       0,     0,     0,     0,     0,     0,     0,   545,  1653,     0,
       0,   546,     0,  2832,     0,  2832,     0,  2832,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1641,     0,     0, -2131, -2131, -2131,
       0,  1645,  1646,  1647,  1648,  1649,  1650,     0,     0,  3147,
    3147,  3147,     0,     0,  3147,     0,     0,  3147,  3147,     0,
       0,     0,     0,     0, -2131,     0,     0,     0,     0,     0,
       0,  1645,  1646,  1647,  1648,  1649,  1650,     0,     0,     0,
     547,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1653,     0,     0,     0,   549,     0,     0,
       0,     0,     0,     0,  3147,  3147,  3147,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   550,     0,     0,   551,     0,     0,     0,  1515,     0,
       0,     0,     0,   552,     0,  2832,   553,     0,  2832,  2832,
       0,     0,     0,     0,     0,     0,     0,  2832,     0,  1515,
    1515,     0,     0,     0,  2832,     0,   554,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     555,     0,     0,     0,     0,     0,     0,   556,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   557,     0,     0,
       0,     0,     0,   558,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   559,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  2832,  2832,
       0,     0,  2832,     0,     0,     0,  2832,     0,     0,  2832,
    2832,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   112,  1053,   635,  1054,  1055,
    1056,  1057,  1058,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   113,   114,   115,   116,     0,   117,
     118,   119,   120,     0,   121,   122,   123,     0,     0,     0,
       0,  2832,  2832,  1059,     0,  2832,   124,   125,   126,     0,
     127,   128,   129,   130,   131,   132,   133,   134,  1060,   136,
    1061,  1062,     0,   139,   140,   141,   142,   143,   144,  1063,
     604,   145,   146,  1064,  1065,   149,     0,   150,   151,   152,
     153,   605,     0,   606,     0,  1066,   157,   158,   159,   160,
     161,   162,   163,   164,   165,     0,   166,   167,   168,   169,
     170,     0,     0,   171,   172,   173,   174,   175,   176,   177,
     178,   179,   180,   181,  1067,  1068,   184,  1069,   185,     0,
     186,   187,   188,   189,   190,   191,     0,   192,     0,   193,
     194,   195,   196,     0,     0,   197,   198,   827,   200,   201,
       0,     0,     0,   202,   203,   204,     0,   205,   206,   207,
       0,   208,   209,   210,   211,  1070,   213,   214,   215,   216,
     217,   607,  1071,   219,     0,   220,   221,  1072,   223,     0,
     224,     0,   225,   226,    21,   227,   228,   229,   230,   231,
     232,     0,   233,     0,     0,     0,  1073,  1074,     0,   236,
       0,   237,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,     0,   249,   250,   251,   252,   253,   254,
     255,     0,   256,   257,   258,   259,   260,   261,   262,   263,
    1075,  1076,     0,  1077,     0,   267,   268,   269,   270,   271,
     272,     0,   273,   274,   275,   276,   277,     0,     0,   278,
     279,   280,   281,     0,   282,   283,   284,   285,   286,   287,
     288,   289,  1078,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,  1079,   310,  1080,   312,   313,   314,     0,   315,  1081,
     316,   317,   318,   319,  1082,   610,   321,  1083,   323,   324,
     325,     0,   326,   327,     0,     0,  1084,   329,   330,     0,
       0,   331,   332,   333,   334,   335,   612,   337,   338,   339,
     340,   341,   342,   343,   344,   345,     0,     0,   346,    25,
      26,    27,     0,   347,   348,   613,   350,   351,   352,   353,
     354,   355,   356,     0,   357,   358,   359,   360,   361,     0,
       0,   362,     0,   363,   364,   365,  1085,   367,   368,   369,
     370,     0,   371,   372,   373,     0,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,     0,   384,   385,   386,
     387,   388,   389,  1086,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,    32,     0,   402,   403,   404,
     405,   406,   407,   408,   409,   410,     0,   411,   412,     0,
     413,  1087,   415,     0,     0,   416,   417,   418,   419,   420,
     421,   422,   423,   424,   425,   426,   427,   428,   429,   615,
     431,     0,   432,   433,    37,   434,   435,   436,   437,   438,
     439,   440,     0,  1088,  1089,     0,     0,     0,   443,   444,
     616,   446,   617,  1090,   448,   449,   618,   451,   452,   453,
     454,   455,     0,     0,   456,   457,   458,    39,   459,   460,
     461,   462,     0,   463,   464,   465,   466,   467,   619,  1091,
       0,   470,   471,   472,     0,   473,   474,   475,   476,     0,
       0,     0,   477,     0,    43,   478,   479,   480,   481,   482,
     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,  1092,     0,    44,     0,
       0,     0,     0,  1093,  1094,  1095,     0,     0,     0,     0,
    1096,     0,  1097,  3270,     0,     0,     0,     0,  1098,  1099,
       0,     0,     0,     0,  1100,  1101,   112,  1053,   635,  1054,
    1055,  1056,  1057,  1058,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   113,   114,   115,   116,     0,
     117,   118,   119,   120,     0,   121,   122,   123,     0,     0,
       0,     0,     0,     0,  1059,     0,     0,   124,   125,   126,
       0,   127,   128,   129,   130,   131,   132,   133,   134,  1060,
     136,  1061,  1062,     0,   139,   140,   141,   142,   143,   144,
    1063,   604,   145,   146,  1064,  1065,   149,     0,   150,   151,
     152,   153,   605,     0,   606,     0,  1066,   157,   158,   159,
     160,   161,   162,   163,   164,   165,     0,   166,   167,   168,
     169,   170,     0,     0,   171,   172,   173,   174,   175,   176,
     177,   178,   179,   180,   181,  1067,  1068,   184,  1069,   185,
       0,   186,   187,   188,   189,   190,   191,     0,   192,     0,
     193,   194,   195,   196,     0,     0,   197,   198,   827,   200,
     201,     0,     0,     0,   202,   203,   204,     0,   205,   206,
     207,     0,   208,   209,   210,   211,  1070,   213,   214,   215,
     216,   217,   607,  1071,   219,     0,   220,   221,  1072,   223,
       0,   224,     0,   225,   226,    21,   227,   228,   229,   230,
     231,   232,     0,   233,     0,     0,     0,  1073,  1074,     0,
     236,     0,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,     0,   249,   250,   251,   252,   253,
     254,   255,     0,   256,   257,   258,   259,   260,   261,   262,
     263,  1075,  1076,     0,  1077,     0,   267,   268,   269,   270,
     271,   272,     0,   273,   274,   275,   276,   277,     0,     0,
     278,   279,   280,   281,     0,   282,   283,   284,   285,   286,
     287,   288,   289,  1078,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,  1079,   310,  1080,   312,   313,   314,     0,   315,
    1081,   316,   317,   318,   319,  1082,   610,   321,  1083,   323,
     324,   325,     0,   326,   327,     0,     0,  1084,   329,   330,
       0,     0,   331,   332,   333,   334,   335,   612,   337,   338,
     339,   340,   341,   342,   343,   344,   345,     0,     0,   346,
      25,    26,    27,     0,   347,   348,   613,   350,   351,   352,
     353,   354,   355,   356,     0,   357,   358,   359,   360,   361,
       0,     0,   362,     0,   363,   364,   365,  1085,   367,   368,
     369,   370,     0,   371,   372,   373,     0,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,     0,   384,   385,
     386,   387,   388,   389,  1086,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,    32,     0,   402,   403,
     404,   405,   406,   407,   408,   409,   410,     0,   411,   412,
       0,   413,  1087,   415,     0,     0,   416,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,   428,   429,
     615,   431,     0,   432,   433,    37,   434,   435,   436,   437,
     438,   439,   440,     0,  1088,  1089,     0,     0,     0,   443,
     444,   616,   446,   617,  1090,   448,   449,   618,   451,   452,
     453,   454,   455,     0,     0,   456,   457,   458,    39,   459,
     460,   461,   462,     0,   463,   464,   465,   466,   467,   619,
    1091,     0,   470,   471,   472,     0,   473,   474,   475,   476,
       0,     0,     0,   477,     0,    43,   478,   479,   480,   481,
     482,   483,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,   498,  1092,     0,    44,
       0,     0,     0,     0,  1093,  1094,  1095,     0,     0,     0,
       0,  1096,     0,  1097,     0,     0,     0,     0,     0,  1098,
    1099,     0,     0,     0,     0,  1100,  1101,  1325,  1053,   635,
    1054,  1055,  1056,  1057,  1058,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   113,   114,   115,   116,
       0,   117,   118,   119,   120,  1326,   121,   122,   123,     0,
       0,     0,  1327,     0,     0,  1059,     0,     0,  1328,   125,
     126,     0,   127,   128,   129,  1329,   131,   132,   133,   134,
    1060,  1330,  1061,  1062,     0,   139,   140,   141,   142,   143,
     144,  1063,   604,   145,   146,  1064,  1065,   149,     0,   150,
     151,   152,   153,   605,     0,  1331,     0,  1332,   157,   158,
     159,   160,   161,  1333,   163,   164,   165,     0,   166,   167,
     168,   169,   170,     0,     0,  1334,   172,   173,   174,   175,
     176,   177,   178,   179,   180,   181,  1067,  1068,   184,  1069,
     185,     0,   186,   187,   188,   189,   190,   191,     0,   192,
       0,   193,   194,   195,   196,  1335,     0,   197,   198,   827,
     200,   201,     0,     0,     0,   202,   203,   204,     0,   205,
     206,   207,     0,   208,   209,   210,   211,  1070,   213,   214,
     215,   216,   217,   607,  1071,   219,     0,   220,   221,  1072,
     223,     0,   224,     0,   225,  1336,     0,  1337,   228,   229,
    1338,  1339,   232,     0,   233,     0,     0,     0,  1073,  1074,
       0,   236,     0,   237,   238,   239,   240,   241,   242,   243,
    1340,   245,   246,   247,   248,     0,   249,   250,   251,   252,
     253,   254,   255,     0,   256,  1341,   258,   259,   260,   261,
     262,   263,  1075,  1076,     0,  1077,     0,   267,  1342,  1343,
     270,  1344,   272,     0,   273,   274,   275,   276,   277,     0,
       0,   278,  1345,   280,  1346,     0,   282,   283,   284,   285,
     286,   287,   288,   289,  1347,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,  1079,  1348,  1080,   312,   313,   314,     0,
     315,  1081,   316,   317,  1349,   319,  1082,   610,   321,  1083,
     323,   324,   325,     0,   326,   327,     0,     0,  1084,   329,
     330,     0,     0,   331,   332,  1350,   334,  1351,   612,   337,
     338,   339,   340,   341,   342,   343,   344,   345,     0,     0,
     346,     0,     0,     0,     0,   347,   348,   613,  1352,   351,
     352,   353,   354,   355,   356,     0,   357,   358,   359,   360,
     361,     0,     0,   362,     0,   363,   364,   365,  1085,   367,
     368,   369,   370,     0,   371,   372,   373,     0,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,     0,   384,
     385,  1353,   387,   388,   389,  1086,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,     0,  1354,   402,
     403,   404,   405,   406,   407,   408,   409,   410,     0,   411,
    1355,     0,   413,  1087,   415,     0,     0,   416,   417,   418,
     419,   420,   421,   422,   423,   424,   425,   426,   427,  1356,
     429,   615,   431,     0,   432,   433,     0,   434,  1357,   436,
     437,   438,   439,   440,     0,  1088,  1089,     0,     0,     0,
     443,   444,   616,   446,   617,  1090,   448,   449,  1358,   451,
     452,   453,   454,   455,     0,     0,   456,   457,   458,     0,
     459,   460,   461,   462,     0,   463,   464,   465,   466,   467,
     468,  1091,  1359,   470,  1360,   472,     0,   473,   474,   475,
     476,     0,     0,     0,   477,     0,     0,   478,   479,   480,
     481,   482,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,  1092,     0,
       0,     0,     0,     0,     0,  1093,  1094,  1095,     0,     0,
       0,     0,  1096,     0,  1097,  1361,     0,     0,     0,     0,
    1098,  1099,     0,     0,     0,     0,  1100,  1101,   112,  1053,
     635,  1054,  1055,  1056,  1057,  1058,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   113,   114,   115,
     116,     0,   117,   118,   119,   120,     0,   121,   122,   123,
       0,     0,     0,     0,     0,     0,  1059,     0,     0,   124,
     125,   126,     0,   127,   128,   129,   130,   131,   132,   133,
     134,  1060,   136,  1061,  1062,  1523,   139,   140,   141,   142,
     143,   144,  1063,   604,   145,   146,  1064,  1065,   149,     0,
     150,   151,   152,   153,   605,     0,   606,     0,  1066,   157,
     158,   159,   160,   161,   162,   163,   164,   165,     0,   166,
     167,   168,   169,   170,     0,     0,   171,   172,   173,   174,
     175,   176,   177,   178,   179,   180,   181,  1067,  1068,   184,
    1069,   185,     0,   186,   187,   188,   189,   190,   191,     0,
     192,     0,   193,   194,   195,   196,     0,     0,   197,   198,
     827,   200,   201,     0,     0,     0,   202,   203,   204,     0,
     205,   206,   207,     0,   208,   209,   210,   211,  1070,   213,
     214,   215,   216,   217,   607,  1071,   219,     0,   220,   221,
    1072,   223,     0,   224,     0,   225,   226,  1524,   227,   228,
     229,   230,   231,   232,     0,   233,     0,     0,     0,  1073,
    1074,     0,   236,     0,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,     0,   249,   250,   251,
     252,   253,   254,   255,     0,   256,   257,   258,   259,   260,
     261,   262,   263,  1075,  1076,     0,  1077,     0,   267,   268,
     269,   270,   271,   272,     0,   273,   274,   275,   276,   277,
       0,  1525,   278,   279,   280,   281,     0,   282,   283,   284,
     285,   286,   287,   288,   289,  1078,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,  1079,   310,  1080,   312,   313,   314,
       0,   315,  1081,   316,   317,   318,   319,  1082,   610,   321,
    1083,   323,   324,   325,     0,   326,   327,     0,     0,  1084,
     329,   330,     0,     0,   331,   332,   333,   334,   335,   612,
     337,   338,   339,   340,   341,   342,   343,   344,   345,     0,
       0,   346,     0,     0,     0,     0,   347,   348,   613,   350,
     351,   352,   353,   354,   355,   356,     0,   357,   358,   359,
     360,   361,     0,     0,   362,     0,   363,   364,   365,  1085,
     367,   368,   369,   370,     0,   371,   372,   373,     0,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,     0,
     384,   385,   386,   387,   388,   389,  1086,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,     0,     0,
     402,   403,   404,   405,   406,   407,   408,   409,   410,     0,
     411,   412,     0,   413,  1087,   415,     0,     0,   416,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   429,   615,   431,     0,   432,   433,     0,   434,   435,
     436,   437,   438,   439,   440,     0,  1088,  1089,     0,     0,
    1526,   443,   444,   616,   446,   617,  1090,   448,   449,   618,
     451,   452,   453,   454,   455,     0,     0,   456,   457,   458,
       0,   459,   460,   461,   462,     0,   463,   464,   465,   466,
     467,   468,  1091,     0,   470,   471,   472,     0,   473,   474,
     475,   476,     0,     0,     0,   477,     0,     0,   478,   479,
     480,   481,   482,   483,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,   498,  1092,
       0,     0,     0,     0,     0,     0,  1093,  1094,  1095,     0,
       0,     0,     0,  1096,     0,  1097,     0,     0,     0,     0,
       0,  1098,  1099,     0,     0,     0,     0,  1100,  1101,  1325,
    1053,   635,  1054,  1055,  1056,  1057,  1058,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   113,   114,
     115,   116,     0,   117,   118,   119,   120,     0,   121,   122,
     123,     0,     0,     0,  1327,     0,     0,  1059,     0,     0,
    1328,   125,   126,     0,   127,   128,   129,  1329,   131,   132,
     133,   134,  1060,  1330,  1061,  1062,     0,   139,   140,   141,
     142,   143,   144,  1063,   604,   145,   146,  1064,  1065,   149,
       0,   150,   151,   152,   153,   605,     0,  1331,     0,  1332,
     157,   158,   159,   160,   161,  1333,   163,   164,   165,     0,
     166,   167,   168,   169,   170,     0,     0,  1334,   172,   173,
     174,   175,   176,   177,   178,   179,   180,   181,  1067,  1068,
     184,  1069,   185,     0,   186,   187,   188,   189,   190,   191,
       0,   192,     0,   193,   194,   195,   196,     0,     0,   197,
     198,   827,   200,   201,     0,     0,     0,   202,   203,   204,
       0,   205,   206,   207,     0,   208,   209,   210,   211,  1070,
     213,   214,   215,   216,   217,   607,  1071,   219,     0,   220,
     221,  1072,   223,     0,   224,     0,   225,  1336,     0,  1337,
     228,   229,  1338,  1339,   232,     0,   233,     0,     0,     0,
    1073,  1074,     0,   236,     0,   237,   238,   239,   240,   241,
     242,   243,  1340,   245,   246,   247,   248,     0,   249,   250,
     251,   252,   253,   254,   255,     0,   256,  1341,   258,   259,
     260,   261,   262,   263,  1075,  1076,     0,  1077,     0,   267,
    1342,  1343,   270,  1344,   272,     0,   273,   274,   275,   276,
     277,     0,     0,   278,  1345,   280,  1346,     0,   282,   283,
     284,   285,   286,   287,   288,   289,  1347,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,  1079,  1348,  1080,   312,   313,
     314,     0,   315,  1081,   316,   317,  1349,   319,  1082,   610,
     321,  1083,   323,   324,   325,     0,   326,   327,     0,     0,
    1084,   329,   330,     0,     0,   331,   332,  1350,   334,  1351,
     612,   337,   338,   339,   340,   341,   342,   343,   344,   345,
       0,     0,   346,     0,     0,     0,     0,   347,   348,   613,
    1352,   351,   352,   353,   354,   355,   356,     0,   357,   358,
     359,   360,   361,     0,     0,   362,     0,   363,   364,   365,
    1085,   367,   368,   369,   370,     0,   371,   372,   373,     0,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
       0,   384,   385,  1353,   387,   388,   389,  1086,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,     0,
    1354,   402,   403,   404,   405,   406,   407,   408,   409,   410,
       0,   411,  1355,     0,   413,  1087,   415,     0,     0,   416,
     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
     427,  1356,   429,   615,   431,     0,   432,   433,     0,   434,
    1357,   436,   437,   438,   439,   440,     0,  1088,  1089,     0,
       0,     0,   443,   444,   616,   446,   617,  1090,   448,   449,
    1358,   451,   452,   453,   454,   455,     0,     0,   456,   457,
     458,     0,   459,   460,   461,   462,     0,   463,   464,   465,
     466,   467,   468,  1091,  2271,   470,  1360,   472,     0,   473,
     474,   475,   476,     0,     0,     0,   477,     0,     0,   478,
     479,   480,   481,   482,   483,   484,   485,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
    1092,     0,     0,     0,     0,     0,     0,  1093,  1094,  1095,
       0,     0,     0,     0,  1096,     0,  1097,     0,     0,     0,
       0,     0,  1098,  1099,     0,     0,     0,     0,  1100,  1101,
    1325,  1053,   635,  1054,  1055,  1056,  1057,  1058,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   113,
     114,   115,   116,     0,   117,   118,   119,   120,     0,   121,
     122,   123,     0,     0,     0,  1327,     0,     0,  1059,     0,
       0,  1328,   125,   126,     0,   127,   128,   129,  1329,   131,
     132,   133,   134,  1060,  1330,  1061,  1062,     0,   139,   140,
     141,   142,   143,   144,  1063,   604,   145,   146,  1064,  1065,
     149,     0,   150,   151,   152,   153,   605,     0,  1331,     0,
    1332,   157,   158,   159,   160,   161,  1333,   163,   164,   165,
       0,   166,   167,   168,   169,   170,     0,     0,  1334,   172,
     173,   174,   175,   176,   177,   178,   179,   180,   181,  1067,
    1068,   184,  1069,   185,     0,   186,   187,   188,   189,   190,
     191,     0,   192,     0,   193,   194,   195,   196,     0,     0,
     197,   198,   827,   200,   201,     0,     0,     0,   202,   203,
     204,     0,   205,   206,   207,     0,   208,   209,   210,   211,
    1070,   213,   214,   215,   216,   217,   607,  1071,   219,     0,
     220,   221,  1072,   223,     0,   224,     0,   225,  1336,     0,
    1337,   228,   229,  1338,  1339,   232,     0,   233,     0,     0,
       0,  1073,  1074,     0,   236,     0,   237,   238,   239,   240,
     241,   242,   243,  1340,   245,   246,   247,   248,     0,   249,
     250,   251,   252,   253,   254,   255,     0,   256,  1341,   258,
     259,   260,   261,   262,   263,  1075,  1076,     0,  1077,     0,
     267,  1342,  1343,   270,  1344,   272,     0,   273,   274,   275,
     276,   277,     0,     0,   278,  1345,   280,  1346,     0,   282,
     283,   284,   285,   286,   287,   288,   289,  1347,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,  1079,  1348,  1080,   312,
     313,   314,     0,   315,  1081,   316,   317,  1349,   319,  1082,
     610,   321,  1083,   323,   324,   325,     0,   326,   327,     0,
       0,  1084,   329,   330,     0,     0,   331,   332,  1350,   334,
    1351,   612,   337,   338,   339,   340,   341,   342,   343,   344,
     345,     0,     0,   346,     0,     0,     0,     0,   347,   348,
     613,  1352,   351,   352,   353,   354,   355,   356,     0,   357,
     358,   359,   360,   361,     0,     0,   362,     0,   363,   364,
     365,  1085,   367,   368,   369,   370,     0,   371,   372,   373,
       0,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,     0,   384,   385,  1353,   387,   388,   389,  1086,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
       0,  1354,   402,   403,   404,   405,   406,   407,   408,   409,
     410,     0,   411,  1355,     0,   413,  1087,   415,     0,     0,
     416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,  1356,   429,   615,   431,     0,   432,   433,     0,
     434,  1357,   436,   437,   438,   439,   440,     0,  1088,  1089,
       0,     0,     0,   443,   444,   616,   446,   617,  1090,   448,
     449,  1358,   451,   452,   453,   454,   455,     0,     0,   456,
     457,   458,     0,   459,   460,   461,   462,     0,   463,   464,
     465,   466,   467,   468,  1091,     0,   470,  1360,   472,     0,
     473,   474,   475,   476,     0,     0,     0,   477,     0,     0,
     478,   479,   480,   481,   482,   483,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,  1092,     0,     0,     0,     0,     0,     0,  1093,  1094,
    1095,     0,     0,     0,     0,  1096,     0,  1097,  2319,     0,
       0,     0,     0,  1098,  1099,     0,     0,     0,     0,  1100,
    1101,   112,  1053,   635,  1054,  1055,  1056,  1057,  1058,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     113,   114,   115,   116,     0,   117,   118,   119,   120, -1240,
     121,   122,   123,     0,     0,     0,     0, -1240,     0,  1059,
       0,     0,   124,   125,   126,     0,   127,   128,   129,   130,
     131,   132,   133,   134,  1060,   136,  1061,  1062,     0,   139,
     140,   141,   142,   143,   144,  1063,   604,   145,   146,  1064,
    1065,   149,     0,   150,   151,   152,   153,   605,     0,   606,
       0,  1066,   157,   158,   159,   160,   161,   162,   163,   164,
     165,     0,   166,   167,   168,   169,   170,     0,     0,   171,
     172,   173,   174,   175,   176,   177,   178,   179,   180,   181,
    1067,  1068,   184,  1069,   185,     0,   186,   187,   188,   189,
     190,   191,     0,   192,     0,   193,   194,   195,   196,     0,
       0,   197,   198,   827,   200,   201,     0,     0,     0,   202,
     203,   204,     0,   205,   206,   207,     0,   208,   209,   210,
     211,  1070,   213,   214,   215,   216,   217,   607,  1071,   219,
       0,   220,   221,  1072,   223,     0,   224,     0,   225,   226,
       0,   227,   228,   229,   230,   231,   232,     0,   233,     0,
       0,     0,  1073,  1074,     0,   236,     0,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,     0,
     249,   250,   251,   252,   253,   254,   255,     0,   256,   257,
     258,   259,   260,   261,   262,   263,  1075,  1076,     0,  1077,
       0,   267,   268,   269,   270,   271,   272,     0,   273,   274,
     275,   276,   277,     0,     0,   278,   279,   280,   281,     0,
     282,   283,   284,   285,   286,   287,   288,   289,  1078,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,  1079,   310,  1080,
     312,   313,   314,     0,   315,  1081,   316,   317,   318,   319,
    1082,   610,   321,  1083,   323,   324,   325,     0,   326,   327,
       0,     0,  1084,   329,   330,     0,     0,   331,   332,   333,
     334,   335,   612,   337,   338,   339,   340,   341,   342,   343,
     344,   345,     0,     0,   346,     0,     0,     0,     0,   347,
     348,   613,   350,   351,   352,   353,   354,   355,   356,     0,
     357,   358,   359,   360,   361,     0,     0,   362,     0,   363,
     364,   365,  1085,   367,   368,   369,   370,     0,   371,   372,
     373,     0,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,     0,   384,   385,   386,   387,   388,   389,  1086,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,     0,     0,   402,   403,   404,   405,   406,   407,   408,
     409,   410,     0,   411,   412,     0,   413,  1087,   415, -1240,
       0,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   615,   431,     0,   432,   433,
       0,   434,   435,   436,   437,   438,   439,   440,     0,  1088,
    1089,     0,     0,     0,   443,   444,   616,   446,   617,  1090,
     448,   449,   618,   451,   452,   453,   454,   455,     0,     0,
     456,   457,   458,     0,   459,   460,   461,   462,     0,   463,
     464,   465,   466,   467,   468,  1091,     0,   470,   471,   472,
       0,   473,   474,   475,   476,     0,     0,     0,   477,     0,
       0,   478,   479,   480,   481,   482,   483,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,   498,  1092,     0,     0,     0,     0,     0,     0,  1093,
    1094,  1095,     0,     0,     0,     0,  1096,     0,  1097,     0,
       0,     0,     0,     0,  1098,  1099,     0,     0,     0,     0,
    1100,  1101,  1325,  1053,   635,  1054,  1055,  1056,  1057,  1058,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   113,   114,   115,   116,     0,   117,   118,   119,   120,
       0,   121,   122,   123,     0,     0,     0,  1327,     0,     0,
    1059,     0,     0,  1328,   125,   126,     0,   127,   128,   129,
    1329,   131,   132,   133,   134,  1060,  1330,  1061,  1062,     0,
     139,   140,   141,   142,   143,   144,  1063,   604,   145,   146,
    1064,  1065,   149,     0,   150,   151,   152,   153,   605,     0,
    1331,     0,  1332,   157,   158,   159,   160,   161,  1333,   163,
     164,   165,     0,   166,   167,   168,   169,   170,     0,     0,
    1334,   172,   173,   174,   175,   176,   177,   178,   179,   180,
     181,  1067,  1068,   184,  1069,   185,     0,   186,   187,   188,
     189,   190,   191,     0,   192,     0,   193,   194,   195,   196,
       0,     0,   197,   198,   827,   200,   201,     0,     0,     0,
     202,   203,   204,     0,   205,   206,   207,     0,   208,   209,
     210,   211,  1070,   213,   214,   215,   216,   217,   607,  1071,
     219,     0,   220,   221,  1072,   223,     0,   224,     0,   225,
    1336,     0,  1337,   228,   229,  1338,  1339,   232,     0,   233,
       0,     0,     0,  1073,  1074,     0,   236,     0,   237,   238,
     239,   240,   241,   242,   243,  1340,   245,   246,   247,   248,
       0,   249,   250,   251,   252,   253,   254,   255,     0,   256,
    1341,   258,   259,   260,   261,   262,   263,  1075,  1076,     0,
    1077,     0,   267,  1342,  1343,   270,  1344,   272,     0,   273,
     274,   275,   276,   277,     0,     0,   278,  1345,   280,  1346,
       0,   282,   283,   284,   285,   286,   287,   288,   289,  1347,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,  1079,  1348,
    1080,   312,   313,   314,     0,   315,  1081,   316,   317,  1349,
     319,  1082,   610,   321,  1083,   323,   324,   325,     0,   326,
     327,     0,     0,  1084,   329,   330,     0,     0,   331,   332,
    1350,   334,  1351,   612,   337,   338,   339,   340,   341,   342,
     343,   344,   345,     0,     0,   346,     0,     0,     0,     0,
     347,   348,   613,  1352,   351,   352,   353,   354,   355,   356,
       0,   357,   358,   359,   360,   361,     0,     0,   362,     0,
     363,   364,   365,  1085,   367,   368,   369,   370,     0,   371,
     372,   373,     0,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,     0,   384,   385,  1353,   387,   388,   389,
    1086,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,     0,  1354,   402,   403,   404,   405,   406,   407,
     408,   409,   410,     0,   411,  1355,     0,   413,  1087,   415,
       0,     0,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,  1356,   429,   615,   431,     0,   432,
     433,     0,   434,  1357,   436,   437,   438,   439,   440,     0,
    1088,  1089,     0,     0,     0,   443,   444,   616,   446,   617,
    1090,   448,   449,  1358,   451,   452,   453,   454,   455,     0,
       0,   456,   457,   458,     0,   459,   460,   461,   462,     0,
     463,   464,   465,   466,   467,   468,  1091,     0,   470,  1360,
     472,     0,   473,   474,   475,   476,     0,     0,     0,   477,
       0,     0,   478,   479,   480,   481,   482,   483,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,   498,  1092,     0,     0,     0,     0,     0,     0,
    1093,  1094,  1095,     0,     0,     0,     0,  1096,     0,  1097,
    3084,     0,     0,     0,     0,  1098,  1099,     0,     0,     0,
       0,  1100,  1101,  1325,  1053,   635,  1054,  1055,  1056,  1057,
    1058,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   113,   114,   115,   116,     0,   117,   118,   119,
     120,     0,   121,   122,   123,     0,     0,     0,  1327,     0,
       0,  1059,     0,     0,  1328,   125,   126,     0,   127,   128,
     129,  1329,   131,   132,   133,   134,  1060,  1330,  1061,  1062,
       0,   139,   140,   141,   142,   143,   144,  1063,   604,   145,
     146,  1064,  1065,   149,     0,   150,   151,   152,   153,   605,
       0,  1331,     0,  1332,   157,   158,   159,   160,   161,  1333,
     163,   164,   165,     0,   166,   167,   168,   169,   170,     0,
       0,  1334,   172,   173,   174,   175,   176,   177,   178,   179,
     180,   181,  1067,  1068,   184,  1069,   185,     0,   186,   187,
     188,   189,   190,   191,     0,   192,     0,   193,   194,   195,
     196,     0,     0,   197,   198,   827,   200,   201,     0,     0,
       0,   202,   203,   204,     0,   205,   206,   207,     0,   208,
     209,   210,   211,  1070,   213,   214,   215,   216,   217,   607,
    1071,   219,     0,   220,   221,  1072,   223,     0,   224,     0,
     225,  1336,     0,  1337,   228,   229,  1338,  1339,   232,     0,
     233,     0,     0,     0,  1073,  1074,     0,   236,     0,   237,
     238,   239,   240,   241,   242,   243,  1340,   245,   246,   247,
     248,     0,   249,   250,   251,   252,   253,   254,   255,     0,
     256,  1341,   258,   259,   260,   261,   262,   263,  1075,  1076,
       0,  1077,     0,   267,  1342,  1343,   270,  1344,   272,     0,
     273,   274,   275,   276,   277,     0,     0,   278,  1345,   280,
    1346,     0,   282,   283,   284,   285,   286,   287,   288,   289,
    1347,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,  1079,
    1348,  1080,   312,   313,   314,     0,   315,  1081,   316,   317,
    1349,   319,  1082,   610,   321,  1083,   323,   324,   325,     0,
     326,   327,     0,     0,  1084,   329,   330,     0,     0,   331,
     332,  1350,   334,  1351,   612,   337,   338,   339,   340,   341,
     342,   343,   344,   345,     0,     0,   346,     0,     0,     0,
       0,   347,   348,   613,  1352,   351,   352,   353,   354,   355,
     356,     0,   357,   358,   359,   360,   361,     0,     0,   362,
       0,   363,   364,   365,  1085,   367,   368,   369,   370,     0,
     371,   372,   373,     0,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,     0,   384,   385,  1353,   387,   388,
     389,  1086,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,     0,  1354,   402,   403,   404,   405,   406,
     407,   408,   409,   410,     0,   411,  1355,     0,   413,  1087,
     415,     0,     0,   416,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,   427,  1356,   429,   615,   431,     0,
     432,   433,     0,   434,  1357,   436,   437,   438,   439,   440,
       0,  1088,  1089,     0,     0,     0,   443,   444,   616,   446,
     617,  1090,   448,   449,  1358,   451,   452,   453,   454,   455,
       0,     0,   456,   457,   458,     0,   459,   460,   461,   462,
       0,   463,   464,   465,   466,   467,   468,  1091,     0,   470,
    1360,   472,     0,   473,   474,   475,   476,     0,     0,     0,
     477,     0,     0,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,  1092,     0,     0,     0,     0,     0,
       0,  1093,  1094,  1095,     0,     0,     0,     0,  1096,     0,
    1097,     0,     0,     0,     0,     0,  1098,  1099,     0,     0,
       0,     0,  1100,  1101,   112,  1053,   635,  1054,  1055,     0,
    1057,  1058,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   113,   114,   115,   116,     0,   117,   118,
     119,   120,     0,   121,   122,   123,     0,     0,     0,     0,
       0,     0,  1059,     0,     0,   124,   125,   126,     0,   127,
     128,   129,   130,   131,   132,   133,   134,  1060,   136,  1061,
    1062,     0,   139,   140,   141,   142,   143,   144,  1063,   604,
     145,   146,  1064,  1065,   149,     0,   150,   151,   152,   153,
     605,     0,   606,     0,   156,   157,   158,   159,   160,   161,
     162,   163,   164,   165,     0,   166,   167,   168,   169,   170,
       0,     0,   171,   172,   173,   174,   175,   176,   177,   178,
     179,   180,   181,  1067,  1068,   184,     0,   185,     0,   186,
     187,   188,   189,   190,   191,     0,   192,     0,   193,   194,
     195,   196,     0,     0,   197,   198,   827,   200,   201,     0,
       0,     0,   202,   203,   204,     0,   205,   206,   207,     0,
     208,   209,   210,   211,  1070,   213,   214,   215,   216,   217,
     607,  1071,   219,     0,   220,   221,  1072,   223,     0,   224,
       0,   225,   226,    21,   227,   228,   229,   230,   231,   232,
       0,   233,     0,     0,     0,  1073,  1074,     0,   236,     0,
     237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,     0,   249,   250,   251,   252,   253,   254,   255,
       0,   256,   257,   258,   259,   260,   261,   262,   263,  1075,
    1076,     0,  1077,     0,   267,   268,   269,   270,   271,   272,
       0,   273,   274,   275,   276,   277,     0,     0,   278,   279,
     280,   281,     0,   282,   283,   284,   285,   286,   287,   288,
     289,  1078,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
    1079,   310,  1080,   312,   313,   314,     0,   315,     0,   316,
     317,   318,   319,  1082,   610,   321,  1083,   323,   324,   325,
       0,   326,   327,     0,     0,   328,   329,   330,     0,     0,
     331,   332,   333,   334,   335,   612,   337,   338,   339,   340,
     341,   342,   343,   344,   345,     0,     0,   346,    25,    26,
      27,     0,   347,   348,   613,   350,   351,   352,   353,   354,
     355,   356,     0,   357,   358,   359,   360,   361,     0,     0,
     362,     0,   363,   364,   365,  1085,   367,   368,   369,   370,
       0,   371,   372,   373,     0,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,     0,   384,   385,   386,   387,
     388,   389,  1086,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,    32,     0,   402,   403,   404,   405,
     406,   407,   408,   409,   410,     0,   411,   412,     0,   413,
    1087,   415,     0,     0,   416,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,   428,   429,   615,   431,
       0,   432,   433,    37,   434,   435,   436,   437,   438,   439,
     440,     0,  1088,  1089,     0,     0,     0,   443,   444,   616,
     446,   617,  1090,   448,   449,   618,   451,   452,   453,   454,
     455,     0,     0,   456,   457,   458,    39,   459,   460,   461,
     462,     0,   463,   464,   465,   466,   467,   619,  1091,     0,
     470,   471,   472,     0,   473,   474,   475,   476,     0,     0,
       0,   477,     0,    43,   478,   479,   480,   481,   482,   483,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,     0,     0,    44,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1096,
       0,  1097,     0,     0,     0,     0,     0,  1098,  1099,     0,
       0,     0,     0,  1100,  1101,   112,  1053,   635,  1054,  1055,
    1056,  1057,  1058,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   113,   114,   115,   116,     0,   117,
     118,   119,   120,  1701,   121,   122,   123,     0,     0,     0,
       0,     0,     0,  1059,     0,     0,   124,   125,   126,     0,
     127,   128,   129,   130,   131,   132,   133,   134,  1060,   136,
    1061,  1062,     0,   139,   140,   141,   142,   143,   144,  1063,
     604,   145,   146,  1064,  1065,   149,     0,   150,   151,   152,
     153,   605,     0,   606,     0,  1066,   157,   158,   159,   160,
     161,   162,   163,   164,   165,     0,   166,   167,   168,   169,
     170,     0,     0,   171,   172,   173,   174,   175,   176,   177,
     178,   179,   180,   181,  1067,  1068,   184,  1069,   185,     0,
     186,   187,   188,   189,   190,   191,     0,   192,     0,   193,
     194,   195,   196,     0,     0,   197,   198,   827,   200,   201,
       0,     0,     0,   202,   203,   204,     0,   205,   206,   207,
       0,   208,   209,   210,   211,  1070,   213,   214,   215,   216,
     217,   607,  1071,   219,     0,   220,   221,  1072,   223,     0,
     224,     0,   225,   226,     0,   227,   228,   229,   230,   231,
     232,     0,   233,     0,     0,     0,  1073,  1074,     0,   236,
       0,   237,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,     0,   249,   250,   251,   252,   253,   254,
     255,     0,   256,   257,   258,   259,   260,   261,   262,   263,
    1075,  1076,     0,  1077,     0,   267,   268,   269,   270,   271,
     272,     0,   273,   274,   275,   276,   277,     0,     0,   278,
     279,   280,   281,     0,   282,   283,   284,   285,   286,   287,
     288,   289,  1078,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,  1079,   310,  1080,   312,   313,   314,     0,   315,  1081,
     316,   317,   318,   319,  1082,   610,   321,  1083,   323,   324,
     325,     0,   326,   327,     0,     0,  1084,   329,   330,     0,
       0,   331,   332,   333,   334,   335,   612,   337,   338,   339,
     340,   341,   342,   343,   344,   345,     0,     0,   346,     0,
       0,     0,     0,   347,   348,   613,   350,   351,   352,   353,
     354,   355,   356,     0,   357,   358,   359,   360,   361,     0,
       0,   362,     0,   363,   364,   365,  1085,   367,   368,   369,
     370,     0,   371,   372,   373,     0,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,     0,   384,   385,   386,
     387,   388,   389,  1086,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,     0,     0,   402,   403,   404,
     405,   406,   407,   408,   409,   410,     0,   411,   412,     0,
     413,  1087,   415,     0,     0,   416,   417,   418,   419,   420,
     421,   422,   423,   424,   425,   426,   427,   428,   429,   615,
     431,     0,   432,   433,     0,   434,   435,   436,   437,   438,
     439,   440,     0,  1088,  1089,     0,     0,     0,   443,   444,
     616,   446,   617,  1090,   448,   449,   618,   451,   452,   453,
     454,   455,     0,     0,   456,   457,   458,     0,   459,   460,
     461,   462,     0,   463,   464,   465,   466,   467,   468,  1091,
       0,   470,   471,   472,     0,   473,   474,   475,   476,     0,
       0,     0,   477,     0,     0,   478,   479,   480,   481,   482,
     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,  1092,     0,     0,     0,
       0,     0,     0,  1093,  1094,  1095,     0,     0,     0,     0,
    1096,     0,  1097,     0,     0,     0,     0,     0,  1098,  1099,
       0,     0,     0,     0,  1100,  1101,   112,  1716,   635,  1054,
    1055,  1056,  1717,  1058,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   113,   114,   115,   116,     0,
     117,   118,   119,   120,  1718,   121,   122,   123,     0,     0,
       0,     0,     0,     0,  1059,     0,     0,   124,   125,   126,
       0,   127,   128,   129,   130,   131,   132,   133,   134,  1060,
     136,  1061,  1062,     0,   139,   140,   141,   142,   143,   144,
    1063,   604,   145,   146,  1064,  1065,   149,     0,   150,   151,
     152,   153,   605,     0,   606,     0,  1066,   157,   158,   159,
     160,   161,   162,   163,   164,   165,     0,   166,   167,   168,
     169,   170,     0,     0,   171,   172,   173,   174,   175,   176,
     177,   178,   179,   180,   181,  1067,  1068,   184,  1069,   185,
       0,   186,   187,   188,   189,   190,   191,     0,   192,     0,
     193,   194,   195,   196,     0,     0,   197,   198,   827,   200,
     201,     0,     0,     0,   202,   203,   204,     0,   205,   206,
     207,     0,   208,   209,   210,   211,  1070,   213,   214,   215,
     216,   217,   607,  1071,   219,     0,   220,   221,  1072,   223,
       0,   224,     0,   225,   226,     0,   227,   228,   229,   230,
     231,   232,     0,   233,     0,     0,     0,  1073,  1074,     0,
     236,     0,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,     0,   249,   250,   251,   252,   253,
     254,   255,     0,   256,   257,   258,   259,   260,   261,   262,
     263,  1075,  1076,     0,  1077,     0,   267,   268,   269,   270,
     271,   272,     0,   273,   274,   275,   276,   277,     0,     0,
     278,   279,   280,   281,     0,   282,   283,   284,   285,   286,
     287,   288,   289,  1078,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,  1079,   310,  1080,   312,   313,   314,     0,   315,
    1081,   316,   317,   318,   319,  1082,   610,   321,  1083,   323,
     324,   325,     0,   326,   327,     0,     0,  1084,   329,   330,
       0,     0,   331,   332,   333,   334,   335,   612,   337,   338,
     339,   340,   341,   342,   343,   344,   345,     0,     0,   346,
       0,     0,     0,     0,   347,   348,   613,   350,   351,   352,
     353,   354,   355,   356,     0,   357,   358,   359,   360,   361,
       0,     0,   362,     0,   363,   364,   365,  1085,   367,   368,
     369,   370,     0,   371,   372,   373,     0,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,     0,   384,   385,
     386,   387,   388,   389,  1086,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,     0,     0,   402,   403,
     404,   405,   406,   407,   408,   409,   410,     0,   411,   412,
       0,   413,  1087,   415,     0,     0,   416,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,   428,   429,
     615,   431,     0,   432,   433,     0,   434,   435,   436,   437,
     438,   439,   440,     0,  1088,  1089,     0,     0,     0,   443,
     444,   616,   446,   617,  1090,   448,   449,   618,   451,   452,
     453,   454,   455,     0,     0,   456,   457,   458,     0,   459,
     460,   461,   462,     0,   463,   464,   465,   466,   467,   468,
    1091,     0,   470,   471,   472,     0,   473,   474,   475,   476,
       0,     0,     0,   477,     0,     0,   478,   479,   480,   481,
     482,   483,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,   498,  1092,     0,     0,
       0,     0,     0,     0,  1093,  1094,  1095,     0,     0,     0,
       0,  1096,     0,  1097,     0,     0,     0,     0,     0,  1098,
    1099,     0,     0,     0,     0,  1100,  1101,   112,  1053,   635,
    1054,  1055,  1056,  1057,  1058,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   113,   114,   115,   116,
       0,   117,   118,   119,   120,     0,   121,   122,   123,     0,
       0,     0,     0,     0,     0,  1059,     0,     0,   124,   125,
     126,     0,   127,   128,   129,   130,   131,   132,   133,   134,
    1060,   136,  1061,  1062,     0,   139,   140,   141,   142,   143,
     144,  1063,   604,   145,   146,  1064,  1065,   149,     0,   150,
     151,   152,   153,   605,     0,   606,     0,  1066,   157,   158,
     159,   160,   161,   162,   163,   164,   165,     0,   166,   167,
     168,   169,   170,     0,     0,   171,   172,   173,   174,   175,
     176,   177,   178,   179,   180,   181,  1067,  1068,   184,  1069,
     185,     0,   186,   187,   188,   189,   190,   191,     0,   192,
       0,   193,   194,   195,   196,     0,     0,   197,   198,   827,
     200,   201,     0,     0,     0,   202,   203,   204,     0,   205,
     206,   207,     0,   208,   209,   210,   211,  1070,   213,   214,
     215,   216,   217,   607,  1071,   219,     0,   220,   221,  1072,
     223,     0,   224,     0,   225,   226,  1524,   227,   228,   229,
     230,   231,   232,     0,   233,     0,     0,     0,  1073,  1074,
       0,   236,     0,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,     0,   249,   250,   251,   252,
     253,   254,   255,     0,   256,   257,   258,   259,   260,   261,
     262,   263,  1075,  1076,     0,  1077,     0,   267,   268,   269,
     270,   271,   272,     0,   273,   274,   275,   276,   277,     0,
       0,   278,   279,   280,   281,     0,   282,   283,   284,   285,
     286,   287,   288,   289,  1078,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,  1079,   310,  1080,   312,   313,   314,     0,
     315,  1081,   316,   317,   318,   319,  1082,   610,   321,  1083,
     323,   324,   325,     0,   326,   327,     0,     0,  1084,   329,
     330,     0,     0,   331,   332,   333,   334,   335,   612,   337,
     338,   339,   340,   341,   342,   343,   344,   345,     0,     0,
     346,     0,     0,     0,     0,   347,   348,   613,   350,   351,
     352,   353,   354,   355,   356,     0,   357,   358,   359,   360,
     361,     0,     0,   362,     0,   363,   364,   365,  1085,   367,
     368,   369,   370,     0,   371,   372,   373,     0,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,     0,   384,
     385,   386,   387,   388,   389,  1086,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,     0,     0,   402,
     403,   404,   405,   406,   407,   408,   409,   410,     0,   411,
     412,     0,   413,  1087,   415,     0,     0,   416,   417,   418,
     419,   420,   421,   422,   423,   424,   425,   426,   427,   428,
     429,   615,   431,     0,   432,   433,     0,   434,   435,   436,
     437,   438,   439,   440,     0,  1088,  1089,     0,     0,     0,
     443,   444,   616,   446,   617,  1090,   448,   449,   618,   451,
     452,   453,   454,   455,     0,     0,   456,   457,   458,     0,
     459,   460,   461,   462,     0,   463,   464,   465,   466,   467,
     468,  1091,     0,   470,   471,   472,     0,   473,   474,   475,
     476,     0,     0,     0,   477,     0,     0,   478,   479,   480,
     481,   482,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,  1092,     0,
       0,     0,     0,     0,     0,  1093,  1094,  1095,     0,     0,
       0,     0,  1096,     0,  1097,     0,     0,     0,     0,     0,
    1098,  1099,     0,     0,     0,     0,  1100,  1101,   112,  1053,
     635,  1054,  1055,  1056,  1057,  1058,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   113,   114,   115,
     116,     0,   117,   118,   119,   120,     0,   121,   122,   123,
       0,     0,     0,     0,     0,     0,  1059,     0,     0,   124,
     125,   126,     0,   127,   128,   129,   130,   131,   132,   133,
     134,  1060,   136,  1061,  1062,     0,   139,   140,   141,   142,
     143,   144,  1063,   604,   145,   146,  1064,  1065,   149,     0,
     150,   151,   152,   153,   605,     0,   606,     0,  1066,   157,
     158,   159,   160,   161,   162,   163,   164,   165,     0,   166,
     167,   168,   169,   170,     0,     0,   171,   172,   173,   174,
     175,   176,   177,   178,   179,   180,   181,  1067,  1068,   184,
    1069,   185,     0,   186,   187,   188,   189,   190,   191,     0,
     192,     0,   193,   194,   195,   196,     0,     0,   197,   198,
     827,   200,   201,     0,     0,     0,   202,   203,   204,     0,
     205,   206,   207,     0,   208,   209,   210,   211,  1070,   213,
     214,   215,   216,   217,   607,  1071,   219,     0,   220,   221,
    1072,   223,     0,   224,     0,   225,   226,     0,   227,   228,
     229,   230,   231,   232,     0,   233,     0,     0,     0,  1073,
    1074,     0,   236,     0,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,     0,   249,   250,   251,
     252,   253,   254,   255,     0,   256,   257,   258,   259,   260,
     261,   262,   263,  1075,  1076,     0,  1077,     0,   267,   268,
     269,   270,   271,   272,     0,   273,   274,   275,   276,   277,
       0,     0,   278,   279,   280,   281,     0,   282,   283,   284,
     285,   286,   287,   288,   289,  1078,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,  1079,   310,  1080,   312,   313,   314,
       0,   315,  1081,   316,   317,   318,   319,  1082,   610,   321,
    1083,   323,   324,   325,     0,   326,   327,     0,     0,  1084,
     329,   330,     0,     0,   331,   332,   333,   334,   335,   612,
     337,   338,   339,   340,   341,   342,   343,   344,   345,     0,
       0,   346,     0,     0,     0,     0,   347,   348,   613,   350,
     351,   352,   353,   354,   355,   356,     0,   357,   358,   359,
     360,   361,     0,     0,   362,     0,   363,   364,   365,  1085,
     367,   368,   369,   370,     0,   371,   372,   373,     0,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,     0,
     384,   385,   386,   387,   388,   389,  1086,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,     0,     0,
     402,   403,   404,   405,   406,   407,   408,   409,   410,     0,
     411,   412,     0,   413,  1087,   415,     0,     0,   416,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   429,   615,   431,     0,   432,   433,     0,   434,   435,
     436,   437,   438,   439,   440,     0,  1088,  1089,     0,     0,
       0,   443,   444,   616,   446,   617,  1090,   448,   449,   618,
     451,   452,   453,   454,   455,     0,     0,   456,   457,   458,
       0,   459,   460,   461,   462,     0,   463,   464,   465,   466,
     467,   468,  1091,     0,   470,   471,   472,     0,   473,   474,
     475,   476,     0,     0,     0,   477,     0,     0,   478,   479,
     480,   481,   482,   483,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,   498,  1092,
       0,     0,     0,     0,     0,     0,  1093,  1094,  1095,     0,
       0,     0,     0,  1096,     0,  1097,  2046,     0,     0,     0,
       0,  1098,  1099,     0,     0,     0,     0,  1100,  1101,   112,
    1053,   635,  1054,  1055,  1056,  1057,  1058,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   113,   114,
     115,   116,     0,   117,   118,   119,   120,     0,   121,   122,
     123,     0,     0,     0,     0,     0,     0,  1059,     0,     0,
     124,   125,   126,     0,   127,   128,   129,   130,   131,   132,
     133,   134,  1060,   136,  1061,  1062,     0,   139,   140,   141,
     142,   143,   144,  1063,   604,   145,   146,  1064,  1065,   149,
       0,   150,   151,   152,   153,   605,     0,   606,     0,  1066,
     157,   158,   159,   160,   161,   162,   163,   164,   165,     0,
     166,   167,   168,   169,   170,     0,     0,   171,   172,   173,
     174,   175,   176,   177,   178,   179,   180,   181,  1067,  1068,
     184,  1069,   185,     0,   186,   187,   188,   189,   190,   191,
       0,   192,     0,   193,   194,   195,   196,     0,     0,   197,
     198,   827,   200,   201,     0,     0,     0,   202,   203,   204,
       0,   205,   206,   207,     0,   208,   209,   210,   211,  1070,
     213,   214,   215,   216,   217,   607,  1071,   219,     0,   220,
     221,  1072,   223,     0,   224,     0,   225,   226,     0,   227,
     228,   229,   230,   231,   232,     0,   233,     0,     0,     0,
    1073,  1074,     0,   236,     0,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,     0,   249,   250,
     251,   252,   253,   254,   255,     0,   256,   257,   258,   259,
     260,   261,   262,   263,  1075,  1076,     0,  1077,     0,   267,
     268,   269,   270,   271,   272,     0,   273,   274,   275,   276,
     277,     0,     0,   278,   279,   280,   281,     0,   282,   283,
     284,   285,   286,   287,   288,   289,  1078,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,  1079,   310,  1080,   312,   313,
     314,     0,   315,  1081,   316,   317,   318,   319,  1082,   610,
     321,  1083,   323,   324,   325,     0,   326,   327,     0,     0,
    1084,   329,   330,     0,     0,   331,   332,   333,   334,   335,
     612,   337,   338,   339,   340,   341,   342,   343,   344,   345,
       0,     0,   346,     0,     0,     0,     0,   347,   348,   613,
     350,   351,   352,   353,   354,   355,   356,     0,   357,   358,
     359,   360,   361,     0,     0,   362,     0,   363,   364,   365,
    1085,   367,   368,   369,   370,     0,   371,   372,   373,     0,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
       0,   384,   385,   386,   387,   388,   389,  1086,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,     0,
       0,   402,   403,   404,   405,   406,   407,   408,   409,   410,
       0,   411,   412,     0,   413,  1087,   415,     0,     0,   416,
     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
     427,   428,   429,   615,   431,     0,   432,   433,  2681,   434,
     435,   436,   437,   438,   439,   440,     0,  1088,  1089,     0,
       0,     0,   443,   444,   616,   446,   617,  1090,   448,   449,
     618,   451,   452,   453,   454,   455,     0,     0,   456,   457,
     458,     0,   459,   460,   461,   462,     0,   463,   464,   465,
     466,   467,   468,  1091,     0,   470,   471,   472,     0,   473,
     474,   475,   476,     0,     0,     0,   477,     0,     0,   478,
     479,   480,   481,   482,   483,   484,   485,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
    1092,     0,     0,     0,     0,     0,     0,  1093,  1094,  1095,
       0,     0,     0,     0,  1096,     0,  1097,     0,     0,     0,
       0,     0,  1098,  1099,     0,     0,     0,     0,  1100,  1101,
     112,  1053,   635,  1054,  1055,  1056,  1057,  1058,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   113,
     114,   115,   116,     0,   117,   118,   119,   120,     0,   121,
     122,   123,     0,     0,     0,     0,     0,     0,  1059,     0,
       0,   124,   125,   126,     0,   127,   128,   129,   130,   131,
     132,   133,   134,  1060,   136,  1061,  1062,     0,   139,   140,
     141,   142,   143,   144,  1063,   604,   145,   146,  1064,  1065,
     149,     0,   150,   151,   152,   153,   605,     0,   606,     0,
    1066,   157,   158,   159,   160,   161,   162,   163,   164,   165,
       0,   166,   167,   168,   169,   170,     0,     0,   171,   172,
     173,   174,   175,   176,   177,   178,   179,   180,   181,  1067,
    1068,   184,  1069,   185,     0,   186,   187,   188,   189,   190,
     191,     0,   192,     0,   193,   194,   195,   196,     0,     0,
     197,   198,   827,   200,   201,     0,     0,     0,   202,   203,
     204,     0,   205,   206,   207,     0,   208,   209,   210,   211,
    1070,   213,   214,   215,   216,   217,   607,  1071,   219,     0,
     220,   221,  1072,   223,     0,   224,     0,   225,   226,     0,
     227,   228,   229,   230,   231,   232,     0,   233,     0,     0,
       0,  1073,  1074,     0,   236,     0,   237,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,     0,   249,
     250,   251,   252,   253,   254,   255,     0,   256,   257,   258,
     259,   260,   261,   262,   263,  1075,  1076,     0,  1077,     0,
     267,   268,   269,   270,   271,   272,     0,   273,   274,   275,
     276,   277,     0,     0,   278,   279,   280,   281,     0,   282,
     283,   284,   285,   286,   287,   288,   289,  1078,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,  1079,   310,  1080,   312,
     313,   314,     0,   315,  1081,   316,   317,   318,   319,  1082,
     610,   321,  1083,   323,   324,   325,     0,   326,   327,     0,
       0,  1084,   329,   330,     0,     0,   331,   332,   333,   334,
     335,   612,   337,   338,   339,   340,   341,   342,   343,   344,
     345,     0,     0,   346,     0,     0,     0,     0,   347,   348,
     613,   350,   351,   352,   353,   354,   355,   356,     0,   357,
     358,   359,   360,   361,     0,     0,   362,     0,   363,   364,
     365,  1085,   367,   368,   369,   370,     0,   371,   372,   373,
       0,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,     0,   384,   385,   386,   387,   388,   389,  1086,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
       0,     0,   402,   403,   404,   405,   406,   407,   408,   409,
     410,     0,   411,   412,     0,   413,  1087,   415,     0,     0,
     416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,   428,   429,   615,   431,     0,   432,   433,     0,
     434,   435,   436,   437,   438,   439,   440,     0,  1088,  1089,
       0,     0,     0,   443,   444,   616,   446,   617,  1090,   448,
     449,   618,   451,   452,   453,   454,   455,     0,     0,   456,
     457,   458,     0,   459,   460,   461,   462,     0,   463,   464,
     465,   466,   467,   468,  1091,     0,   470,   471,   472,     0,
     473,   474,   475,   476,     0,     0,  2789,   477,     0,     0,
     478,   479,   480,   481,   482,   483,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,  1092,     0,     0,     0,     0,     0,     0,  1093,  1094,
    1095,     0,     0,     0,     0,  1096,     0,  1097,     0,     0,
       0,     0,     0,  1098,  1099,     0,     0,     0,     0,  1100,
    1101,   112,  1053,   635,  1054,  1055,  1056,  1057,  1058,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     113,   114,   115,   116,     0,   117,   118,   119,   120,  3035,
     121,   122,   123,     0,     0,     0,     0,     0,     0,  1059,
       0,     0,   124,   125,   126,     0,   127,   128,   129,   130,
     131,   132,   133,   134,  1060,   136,  1061,  1062,     0,   139,
     140,   141,   142,   143,   144,  1063,   604,   145,   146,  1064,
    1065,   149,     0,   150,   151,   152,   153,   605,     0,   606,
       0,  1066,   157,   158,   159,   160,   161,   162,   163,   164,
     165,     0,   166,   167,   168,   169,   170,     0,     0,   171,
     172,  3036,   174,   175,   176,   177,   178,   179,   180,   181,
    1067,  1068,   184,  1069,   185,     0,   186,   187,   188,   189,
     190,   191,     0,   192,     0,   193,   194,   195,   196,     0,
       0,   197,   198,   827,   200,   201,     0,     0,     0,   202,
     203,   204,     0,   205,   206,   207,     0,   208,   209,   210,
     211,  1070,   213,   214,   215,   216,   217,   607,  1071,   219,
       0,   220,   221,  1072,   223,     0,   224,     0,   225,   226,
       0,   227,   228,   229,   230,   231,   232,     0,   233,     0,
       0,     0,  3037,  1074,     0,   236,     0,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,     0,
     249,   250,   251,   252,   253,   254,   255,     0,   256,   257,
     258,   259,   260,   261,   262,   263,  1075,  1076,     0,  1077,
       0,   267,   268,   269,   270,   271,   272,     0,   273,   274,
     275,   276,   277,     0,     0,   278,   279,   280,   281,     0,
     282,   283,   284,   285,   286,   287,   288,   289,  1078,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,  1079,   310,  1080,
     312,   313,   314,     0,   315,  1081,   316,   317,   318,   319,
    1082,   610,   321,  1083,   323,   324,   325,     0,   326,   327,
       0,     0,  1084,   329,   330,     0,     0,   331,   332,   333,
     334,   335,   612,   337,   338,   339,   340,   341,   342,   343,
     344,   345,     0,     0,   346,     0,     0,     0,     0,   347,
     348,   613,   350,   351,   352,   353,   354,   355,   356,     0,
     357,   358,   359,   360,   361,     0,     0,   362,     0,   363,
     364,   365,  1085,   367,   368,   369,   370,     0,   371,   372,
     373,     0,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,     0,   384,   385,   386,   387,   388,  3038,  1086,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,     0,     0,   402,   403,   404,   405,   406,   407,   408,
     409,   410,     0,   411,   412,     0,   413,  1087,   415,     0,
       0,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   615,   431,     0,   432,   433,
       0,   434,   435,   436,   437,   438,   439,   440,     0,  1088,
    1089,     0,     0,     0,   443,   444,   616,   446,   617,  1090,
     448,   449,   618,   451,   452,   453,   454,   455,     0,     0,
     456,   457,   458,     0,   459,   460,   461,   462,     0,   463,
     464,   465,   466,   467,   468,  1091,     0,   470,   471,   472,
       0,   473,   474,   475,   476,     0,     0,     0,   477,     0,
       0,   478,   479,   480,   481,   482,   483,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,   498,  1092,     0,     0,     0,     0,     0,     0,  1093,
    1094,  1095,     0,     0,     0,     0,  1096,     0,  3039,     0,
       0,     0,     0,     0,  1098,  1099,     0,     0,     0,     0,
    1100,  1101,   112,  1053,   635,  1054,  1055,  1056,  1057,  1058,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   113,   114,   115,   116,     0,   117,   118,   119,   120,
       0,   121,   122,   123,     0,     0,     0,     0,     0,     0,
    1059,     0,     0,   124,   125,   126,     0,   127,   128,   129,
     130,   131,   132,   133,   134,  1060,   136,  1061,  1062,     0,
     139,   140,   141,   142,   143,   144,  1063,   604,   145,   146,
    1064,  1065,   149,     0,   150,   151,   152,   153,   605,     0,
     606,     0,  1066,   157,   158,   159,   160,   161,   162,   163,
     164,   165,     0,   166,   167,   168,   169,   170,     0,     0,
     171,   172,   173,   174,   175,   176,   177,   178,   179,   180,
     181,  1067,  1068,   184,  1069,   185,     0,   186,   187,   188,
     189,   190,   191,     0,   192,     0,   193,   194,   195,   196,
       0,     0,   197,   198,   827,   200,   201,     0,     0,     0,
     202,   203,   204,     0,   205,   206,   207,     0,   208,   209,
     210,   211,  1070,   213,   214,   215,   216,   217,   607,  1071,
     219,     0,   220,   221,  1072,   223,     0,   224,     0,   225,
     226,     0,   227,   228,   229,   230,   231,   232,     0,   233,
       0,     0,     0,  1073,  1074,     0,   236,     0,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
       0,   249,   250,   251,   252,   253,   254,   255,     0,   256,
     257,   258,   259,   260,   261,   262,   263,  1075,  1076,     0,
    1077,     0,   267,   268,   269,   270,   271,   272,     0,   273,
     274,   275,   276,   277,     0,     0,   278,   279,   280,   281,
       0,   282,   283,   284,   285,   286,   287,   288,   289,  1078,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,  1079,   310,
    1080,   312,   313,   314,     0,   315,  1081,   316,   317,   318,
     319,  1082,   610,   321,  1083,   323,   324,   325,     0,   326,
     327,     0,     0,  1084,   329,   330,     0,     0,   331,   332,
     333,   334,   335,   612,   337,   338,   339,   340,   341,   342,
     343,   344,   345,     0,     0,   346,     0,     0,     0,     0,
     347,   348,   613,   350,   351,   352,   353,   354,   355,   356,
       0,   357,   358,   359,   360,   361,     0,     0,   362,     0,
     363,   364,   365,  1085,   367,   368,   369,   370,     0,   371,
     372,   373,     0,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,     0,   384,   385,   386,   387,   388,   389,
    1086,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,     0,     0,   402,   403,   404,   405,   406,   407,
     408,   409,   410,     0,   411,   412,     0,   413,  1087,   415,
       0,     0,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,   428,   429,   615,   431,     0,   432,
     433,  3226,   434,   435,   436,   437,   438,   439,   440,     0,
    1088,  1089,     0,     0,     0,   443,   444,   616,   446,   617,
    1090,   448,   449,   618,   451,   452,   453,   454,   455,     0,
       0,   456,   457,   458,     0,   459,   460,   461,   462,     0,
     463,   464,   465,   466,   467,   468,  1091,     0,   470,   471,
     472,     0,   473,   474,   475,   476,     0,     0,     0,   477,
       0,     0,   478,   479,   480,   481,   482,   483,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,   498,  1092,     0,     0,     0,     0,     0,     0,
    1093,  1094,  1095,     0,     0,     0,     0,  1096,     0,  1097,
       0,     0,     0,     0,     0,  1098,  1099,     0,     0,     0,
       0,  1100,  1101,   112,  1053,   635,  1054,  1055,  1056,  1057,
    1058,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   113,   114,   115,   116,     0,   117,   118,   119,
     120,     0,   121,   122,   123,     0,     0,     0,     0,     0,
       0,  1059,     0,     0,   124,   125,   126,     0,   127,   128,
     129,   130,   131,   132,   133,   134,  1060,   136,  1061,  1062,
       0,   139,   140,   141,   142,   143,   144,  1063,   604,   145,
     146,  1064,  1065,   149,     0,   150,   151,   152,   153,   605,
       0,   606,     0,  1066,   157,   158,   159,   160,   161,   162,
     163,   164,   165,     0,   166,   167,   168,   169,   170,     0,
       0,   171,   172,   173,   174,   175,   176,   177,   178,   179,
     180,   181,  1067,  1068,   184,  1069,   185,     0,   186,   187,
     188,   189,   190,   191,     0,   192,     0,   193,   194,   195,
     196,     0,     0,   197,   198,   827,   200,   201,     0,     0,
       0,   202,   203,   204,     0,   205,   206,   207,     0,   208,
     209,   210,   211,  1070,   213,   214,   215,   216,   217,   607,
    1071,   219,     0,   220,   221,  1072,   223,     0,   224,     0,
     225,   226,     0,   227,   228,   229,   230,   231,   232,     0,
     233,     0,     0,     0,  1073,  1074,     0,   236,     0,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,     0,   249,   250,   251,   252,   253,   254,   255,     0,
     256,   257,   258,   259,   260,   261,   262,   263,  1075,  1076,
       0,  1077,     0,   267,   268,   269,   270,   271,   272,     0,
     273,   274,   275,   276,   277,     0,     0,   278,   279,   280,
     281,     0,   282,   283,   284,   285,   286,   287,   288,   289,
    1078,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,  1079,
     310,  1080,   312,   313,   314,     0,   315,  1081,   316,   317,
     318,   319,  1082,   610,   321,  1083,   323,   324,   325,     0,
     326,   327,     0,     0,  1084,   329,   330,     0,     0,   331,
     332,   333,   334,   335,   612,   337,   338,   339,   340,   341,
     342,   343,   344,   345,     0,     0,   346,     0,     0,     0,
       0,   347,   348,   613,   350,   351,   352,   353,   354,   355,
     356,     0,   357,   358,   359,   360,   361,     0,     0,   362,
       0,   363,   364,   365,  1085,   367,   368,   369,   370,     0,
     371,   372,   373,     0,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,     0,   384,   385,   386,   387,   388,
     389,  1086,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,     0,     0,   402,   403,   404,   405,   406,
     407,   408,   409,   410,     0,   411,   412,     0,   413,  1087,
     415,     0,     0,   416,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,   427,   428,   429,   615,   431,     0,
     432,   433,  3429,   434,   435,   436,   437,   438,   439,   440,
       0,  1088,  1089,     0,     0,     0,   443,   444,   616,   446,
     617,  1090,   448,   449,   618,   451,   452,   453,   454,   455,
       0,     0,   456,   457,   458,     0,   459,   460,   461,   462,
       0,   463,   464,   465,   466,   467,   468,  1091,     0,   470,
     471,   472,     0,   473,   474,   475,   476,     0,     0,     0,
     477,     0,     0,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,  1092,     0,     0,     0,     0,     0,
       0,  1093,  1094,  1095,     0,     0,     0,     0,  1096,     0,
    1097,     0,     0,     0,     0,     0,  1098,  1099,     0,     0,
       0,     0,  1100,  1101,   112,  1053,   635,  1054,  1055,  1056,
    1057,  1058,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   113,   114,   115,   116,     0,   117,   118,
     119,   120,     0,   121,   122,   123,     0,     0,     0,     0,
       0,     0,  1059,     0,     0,   124,   125,   126,     0,   127,
     128,   129,   130,   131,   132,   133,   134,  1060,   136,  1061,
    1062,     0,   139,   140,   141,   142,   143,   144,  1063,   604,
     145,   146,  1064,  1065,   149,     0,   150,   151,   152,   153,
     605,     0,   606,     0,  1066,   157,   158,   159,   160,   161,
     162,   163,   164,   165,     0,   166,   167,   168,   169,   170,
       0,     0,   171,   172,   173,   174,   175,   176,   177,   178,
     179,   180,   181,  1067,  1068,   184,  1069,   185,     0,   186,
     187,   188,   189,   190,   191,     0,   192,     0,   193,   194,
     195,   196,     0,     0,   197,   198,   827,   200,   201,     0,
       0,     0,   202,   203,   204,     0,   205,   206,   207,     0,
     208,   209,   210,   211,  1070,   213,   214,   215,   216,   217,
     607,  1071,   219,     0,   220,   221,  1072,   223,     0,   224,
       0,   225,   226,     0,   227,   228,   229,   230,   231,   232,
       0,   233,     0,     0,     0,  1073,  1074,     0,   236,     0,
     237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,     0,   249,   250,   251,   252,   253,   254,   255,
       0,   256,   257,   258,   259,   260,   261,   262,   263,  1075,
    1076,     0,  1077,     0,   267,   268,   269,   270,   271,   272,
       0,   273,   274,   275,   276,   277,     0,     0,   278,   279,
     280,   281,     0,   282,   283,   284,   285,   286,   287,   288,
     289,  1078,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
    1079,   310,  1080,   312,   313,   314,     0,   315,  1081,   316,
     317,   318,   319,  1082,   610,   321,  1083,   323,   324,   325,
       0,   326,   327,     0,     0,  1084,   329,   330,     0,     0,
     331,   332,   333,   334,   335,   612,   337,   338,   339,   340,
     341,   342,   343,   344,   345,     0,     0,   346,     0,     0,
       0,     0,   347,   348,   613,   350,   351,   352,   353,   354,
     355,   356,     0,   357,   358,   359,   360,   361,     0,     0,
     362,     0,   363,   364,   365,  1085,   367,   368,   369,   370,
       0,   371,   372,   373,     0,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,     0,   384,   385,   386,   387,
     388,   389,  1086,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,     0,     0,   402,   403,   404,   405,
     406,   407,   408,   409,   410,     0,   411,   412,     0,   413,
    1087,   415,     0,     0,   416,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,   428,   429,   615,   431,
       0,   432,   433,     0,   434,   435,   436,   437,   438,   439,
     440,     0,  1088,  1089,     0,     0,     0,   443,   444,   616,
     446,   617,  1090,   448,   449,   618,   451,   452,   453,   454,
     455,     0,     0,   456,   457,   458,     0,   459,   460,   461,
     462,     0,   463,   464,   465,   466,   467,   468,  1091,     0,
     470,   471,   472,     0,   473,   474,   475,   476,     0,     0,
       0,   477,     0,     0,   478,   479,   480,   481,   482,   483,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,  1092,     0,     0,     0,     0,
       0,     0,  1093,  1094,  1095,     0,     0,     0,     0,  1096,
       0,  1097,     0,     0,     0,     0,     0,  1098,  1099,     0,
       0,     0,     0,  1100,  1101,   112,  1053,   635,  1054,  1055,
    1056,  1057,  1058,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   113,   114,   115,   116,     0,   117,
     118,   119,   120,     0,   121,   122,   123,     0,     0,     0,
       0,     0,     0,  1059,     0,     0,   124,   125,   126,     0,
     127,   128,   129,   130,   131,   132,   133,   134,  1060,   136,
    1061,  1062,     0,   139,   140,   141,   142,   143,   144,  1063,
     604,   145,   146,  1064,  1065,   149,     0,   150,   151,   152,
     153,   605,     0,   606,     0,  1066,   157,   158,   159,   160,
     161,   162,   163,   164,   165,     0,   166,   167,   168,   169,
     170,     0,     0,   171,   172,   173,   174,   175,   176,   177,
     178,   179,   180,   181,  1067,  1068,   184,  1069,   185,     0,
     186,   187,   188,   189,   190,   191,     0,   192,     0,   193,
     194,   195,   196,     0,     0,   197,   198,   827,   200,   201,
       0,     0,     0,   202,   203,   204,     0,   205,   206,   207,
       0,   208,   209,   210,   211,  1070,   213,   214,   215,   216,
     217,   607,  1071,   219,     0,   220,   221,  1072,   223,     0,
     224,     0,   225,   226,     0,   227,   228,   229,   230,   231,
     232,     0,   233,     0,     0,     0,  1073,  1074,     0,   236,
       0,   237,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,     0,   249,   250,   251,   252,   253,   254,
     255,     0,   256,   257,   258,   259,   260,   261,   262,   263,
    1075,  1076,     0,  1077,     0,   267,   268,   269,   270,   271,
     272,     0,   273,   274,   275,   276,   277,     0,     0,   278,
     279,   280,   281,     0,   282,   283,   284,   285,   286,   287,
     288,   289,  1078,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,  1079,   310,  1080,   312,   313,   314,     0,   315,  1081,
     316,   317,   318,   319,  1082,   610,   321,  1083,   323,   324,
     325,     0,   326,   327,     0,     0,  1084,   329,   330,     0,
       0,   331,   332,   333,   334,   335,   612,   337,   338,   339,
     340,   341,   342,   343,   344,   345,     0,     0,   346,     0,
       0,     0,     0,   347,   348,   613,   350,   351,   352,   353,
     354,   355,   356,     0,   357,   358,   359,   360,   361,     0,
       0,   362,     0,   363,   364,   365,  1085,   367,   368,   369,
     370,     0,   371,   372,   373,     0,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,     0,   384,   385,   386,
     387,   388,   389,  1086,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,     0,     0,   402,   403,   404,
     405,   406,   407,   408,   409,   410,     0,   411,   412,     0,
     413,  1087,   415,     0,     0,   416,   417,   418,   419,   420,
     421,   422,   423,   424,   425,   426,   427,   428,   429,   615,
     431,     0,   432,   433,     0,   434,   435,   436,   437,   438,
     439,   440,     0,  1088,  1089,     0,     0,     0,   443,   444,
     616,   446,   617,  1090,   448,   449,   618,   451,   452,   453,
     454,   455,     0,     0,   456,   457,   458,     0,   459,   460,
     461,   462,     0,   463,   464,   465,   466,   467,   468,  1091,
       0,   470,   471,   472,     0,   473,   474,   475,   476,     0,
       0,     0,   477,     0,     0,   478,   479,   480,   481,   482,
     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,  1092,     0,     0,     0,
       0,     0,     0,  1721,  1722,  1095,     0,     0,     0,     0,
    1096,     0,  1097,     0,     0,     0,     0,     0,  1098,  1099,
       0,     0,     0,     0,  1100,  1101,   112,  2184,   635,  1054,
    1055,  1056,  1057,  1058,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   113,   114,   115,   116,     0,
     117,   118,   119,   120,     0,   121,   122,   123,     0,     0,
       0,     0,     0,     0,  1059,     0,     0,   124,   125,   126,
       0,   127,   128,   129,   130,   131,   132,   133,   134,  1060,
     136,  1061,  1062,     0,   139,   140,   141,   142,   143,   144,
    1063,   604,   145,   146,  1064,  1065,   149,     0,   150,   151,
     152,   153,   605,     0,   606,     0,  1066,   157,   158,   159,
     160,   161,   162,   163,   164,   165,     0,   166,   167,   168,
     169,   170,     0,     0,   171,   172,   173,   174,   175,   176,
     177,   178,   179,   180,   181,  1067,  1068,   184,  1069,   185,
       0,   186,   187,   188,   189,   190,   191,     0,   192,     0,
     193,   194,   195,   196,     0,     0,   197,   198,   827,   200,
     201,     0,     0,     0,   202,   203,   204,     0,   205,   206,
     207,     0,   208,   209,   210,   211,  1070,   213,   214,   215,
     216,   217,   607,  1071,   219,     0,   220,   221,  1072,   223,
       0,   224,     0,   225,   226,     0,   227,   228,   229,   230,
     231,   232,     0,   233,     0,     0,     0,  1073,  1074,     0,
     236,     0,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,     0,   249,   250,   251,   252,   253,
     254,   255,     0,   256,   257,   258,   259,   260,   261,   262,
     263,  1075,  1076,     0,  1077,     0,   267,   268,   269,   270,
     271,   272,     0,   273,   274,   275,   276,   277,     0,     0,
     278,   279,   280,   281,     0,   282,   283,   284,   285,   286,
     287,   288,   289,  1078,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,  1079,   310,  1080,   312,   313,   314,     0,   315,
    1081,   316,   317,   318,   319,  1082,   610,   321,  1083,   323,
     324,   325,     0,   326,   327,     0,     0,  1084,   329,   330,
       0,     0,   331,   332,   333,   334,   335,   612,   337,   338,
     339,   340,   341,   342,   343,   344,   345,     0,     0,   346,
       0,     0,     0,     0,   347,   348,   613,   350,   351,   352,
     353,   354,   355,   356,     0,   357,   358,   359,   360,   361,
       0,     0,   362,     0,   363,   364,   365,  1085,   367,   368,
     369,   370,     0,   371,   372,   373,     0,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,     0,   384,   385,
     386,   387,   388,   389,  1086,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,     0,     0,   402,   403,
     404,   405,   406,   407,   408,   409,   410,     0,   411,   412,
       0,   413,  1087,   415,     0,     0,   416,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,   428,   429,
     615,   431,     0,   432,   433,     0,   434,   435,   436,   437,
     438,   439,   440,     0,  1088,  1089,     0,     0,     0,   443,
     444,   616,   446,   617,  1090,   448,   449,   618,   451,   452,
     453,   454,   455,     0,     0,   456,   457,   458,     0,   459,
     460,   461,   462,     0,   463,   464,   465,   466,   467,   468,
    1091,     0,   470,   471,   472,     0,   473,   474,   475,   476,
       0,     0,     0,   477,     0,     0,   478,   479,   480,   481,
     482,   483,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,   498,  1092,     0,     0,
       0,     0,     0,     0,  1093,  1094,  1095,     0,     0,     0,
       0,  1096,     0,  1097,     0,     0,     0,     0,     0,  1098,
    1099,     0,     0,     0,     0,  1100,  1101,   112,  1053,   635,
    1054,  1055,  1056,  1057,  1058,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   113,   114,   115,   116,
       0,   117,   118,   119,   120,     0,   121,   122,   123,     0,
       0,     0,     0,     0,     0,  1059,     0,     0,   124,   125,
     126,     0,   127,   128,   129,   130,   131,   132,   133,   134,
    1060,   136,  1061,  1062,     0,   139,   140,   141,   142,   143,
     144,  1063,   604,   145,   146,  1064,  1065,   149,     0,   150,
     151,   152,   153,   605,     0,   606,     0,  1066,   157,   158,
     159,   160,   161,   162,   163,   164,   165,     0,   166,   167,
     168,   169,   170,     0,     0,   171,   172,   173,   174,   175,
     176,   177,   178,   179,   180,   181,  1067,  1068,   184,  1069,
     185,     0,   186,   187,   188,   189,   190,   191,     0,   192,
       0,   193,   194,   195,   196,     0,     0,   197,   198,   827,
     200,   201,     0,     0,     0,   202,   203,   204,     0,   205,
     206,   207,     0,   208,   209,   210,   211,  1070,   213,   214,
     215,   216,   217,   607,  1071,   219,     0,   220,   221,  1072,
     223,     0,   224,     0,   225,   226,     0,   227,   228,   229,
     230,   231,   232,     0,   233,     0,     0,     0,  1073,  1074,
       0,   236,     0,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,     0,   249,   250,   251,   252,
     253,   254,   255,     0,   256,   257,   258,   259,   260,   261,
     262,   263,  1075,  1076,     0,  1077,     0,   267,   268,   269,
     270,   271,   272,     0,   273,   274,   275,   276,   277,     0,
       0,   278,   279,   280,   281,     0,   282,   283,   284,   285,
     286,   287,   288,   289,  1078,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,  1079,   310,  1080,   312,   313,   314,     0,
     315,  1081,   316,   317,   318,   319,  1082,   610,   321,  1083,
     323,   324,   325,     0,   326,   327,     0,     0,  1084,   329,
     330,     0,     0,   331,   332,   333,   334,   335,   612,   337,
     338,   339,   340,   341,   342,   343,   344,   345,     0,     0,
     346,     0,     0,     0,     0,   347,   348,   613,   350,   351,
     352,   353,   354,   355,   356,     0,   357,   358,   359,   360,
     361,     0,     0,   362,     0,   363,   364,   365,  1085,   367,
     368,   369,   370,     0,   371,   372,   373,     0,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,     0,   384,
     385,   386,   387,   388,   389,  1086,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,     0,     0,   402,
     403,   404,   405,   406,   407,   408,   409,   410,     0,   411,
     412,     0,   413,  1087,   415,     0,     0,   416,   417,   418,
     419,   420,   421,   422,   423,   424,   425,   426,   427,   428,
     429,   615,   431,     0,   432,   433,     0,   434,   435,   436,
     437,   438,   439,   440,     0,  1088,  1089,     0,     0,     0,
     443,   444,   616,   446,   617,  1090,   448,   449,   618,   451,
     452,   453,   454,   455,     0,     0,   456,   457,   458,     0,
     459,   460,   461,   462,     0,   463,   464,   465,   466,   467,
     468,  1091,     0,   470,   471,   472,     0,   473,   474,   475,
     476,     0,     0,     0,   477,     0,     0,   478,   479,   480,
     481,   482,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,  1092,     0,
       0,     0,     0,     0,     0,  1093,  1094,  1095,     0,     0,
       0,     0,  1096,     0,  2465,     0,     0,     0,     0,     0,
    1098,  1099,     0,     0,     0,     0,  1100,  1101,   112,  1053,
     635,  1054,  1055,  1056,  1057,  1058,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   113,   114,   115,
     116,     0,   117,   118,   119,   120,     0,   121,   122,   123,
       0,     0,     0,     0,     0,     0,  1059,     0,     0,   124,
     125,   126,     0,   127,   128,   129,   130,   131,   132,   133,
     134,  1060,   136,  1061,  1062,     0,   139,   140,   141,   142,
     143,   144,  1063,   604,   145,   146,  1064,  1065,   149,     0,
     150,   151,   152,   153,   605,     0,   606,     0,  1066,   157,
     158,   159,   160,   161,   162,   163,   164,   165,     0,   166,
     167,   168,   169,   170,     0,     0,   171,   172,  3036,   174,
     175,   176,   177,   178,   179,   180,   181,  1067,  1068,   184,
    1069,   185,     0,   186,   187,   188,   189,   190,   191,     0,
     192,     0,   193,   194,   195,   196,     0,     0,   197,   198,
     827,   200,   201,     0,     0,     0,   202,   203,   204,     0,
     205,   206,   207,     0,   208,   209,   210,   211,  1070,   213,
     214,   215,   216,   217,   607,  1071,   219,     0,   220,   221,
    1072,   223,     0,   224,     0,   225,   226,     0,   227,   228,
     229,   230,   231,   232,     0,   233,     0,     0,     0,  3037,
    1074,     0,   236,     0,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,     0,   249,   250,   251,
     252,   253,   254,   255,     0,   256,   257,   258,   259,   260,
     261,   262,   263,  1075,  1076,     0,  1077,     0,   267,   268,
     269,   270,   271,   272,     0,   273,   274,   275,   276,   277,
       0,     0,   278,   279,   280,   281,     0,   282,   283,   284,
     285,   286,   287,   288,   289,  1078,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,  1079,   310,  1080,   312,   313,   314,
       0,   315,  1081,   316,   317,   318,   319,  1082,   610,   321,
    1083,   323,   324,   325,     0,   326,   327,     0,     0,  1084,
     329,   330,     0,     0,   331,   332,   333,   334,   335,   612,
     337,   338,   339,   340,   341,   342,   343,   344,   345,     0,
       0,   346,     0,     0,     0,     0,   347,   348,   613,   350,
     351,   352,   353,   354,   355,   356,     0,   357,   358,   359,
     360,   361,     0,     0,   362,     0,   363,   364,   365,  1085,
     367,   368,   369,   370,     0,   371,   372,   373,     0,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,     0,
     384,   385,   386,   387,   388,  3038,  1086,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,     0,     0,
     402,   403,   404,   405,   406,   407,   408,   409,   410,     0,
     411,   412,     0,   413,  1087,   415,     0,     0,   416,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   429,   615,   431,     0,   432,   433,     0,   434,   435,
     436,   437,   438,   439,   440,     0,  1088,  1089,     0,     0,
       0,   443,   444,   616,   446,   617,  1090,   448,   449,   618,
     451,   452,   453,   454,   455,     0,     0,   456,   457,   458,
       0,   459,   460,   461,   462,     0,   463,   464,   465,   466,
     467,   468,  1091,     0,   470,   471,   472,     0,   473,   474,
     475,   476,     0,     0,     0,   477,     0,     0,   478,   479,
     480,   481,   482,   483,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,   498,  1092,
       0,     0,     0,     0,     0,     0,  1093,  1094,  1095,     0,
       0,     0,     0,  1096,     0,  3039,     0,     0,     0,     0,
       0,  1098,  1099,     0,     0,     0,     0,  1100,  1101,   112,
    1053,   635,  1054,  1055,  1056,  1057,  1058,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   113,   114,
     115,   116,     0,   117,   118,   119,   120,     0,   121,   122,
     123,     0,     0,     0,     0,     0,     0,  1059,     0,     0,
     124,   125,   126,     0,   127,   128,   129,   130,   131,   132,
     133,  3691,  1060,   136,  1061,  1062,     0,   139,   140,   141,
     142,   143,   144,  1063,   604,   145,   146,  1064,  1065,   149,
       0,   150,   151,   152,   153,   605,     0,   606,     0,  1066,
     157,   158,   159,   160,   161,   162,   163,   164,   165,     0,
     166,   167,   168,   169,   170,     0,     0,   171,   172,   173,
    3692,   175,   176,   177,   178,   179,   180,   181,  1067,  1068,
     184,  1069,   185,     0,   186,   187,   188,   189,   190,   191,
       0,   192,     0,   193,   194,   195,   196,     0,     0,   197,
     198,   827,   200,   201,     0,     0,     0,   202,   203,   204,
       0,   205,   206,   207,     0,   208,   209,   210,   211,  1070,
     213,   214,   215,   216,   217,   607,  1071,   219,     0,   220,
     221,  1072,   223,     0,   224,     0,   225,   226,     0,   227,
     228,   229,   230,   231,   232,     0,   233,     0,     0,     0,
    1073,  1074,     0,   236,     0,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,     0,   249,   250,
     251,   252,   253,   254,   255,     0,   256,   257,   258,   259,
     260,   261,   262,   263,  1075,  1076,     0,  1077,     0,   267,
     268,   269,   270,   271,   272,     0,   273,   274,   275,   276,
     277,     0,     0,   278,   279,   280,   281,     0,   282,   283,
     284,   285,   286,   287,   288,   289,  1078,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,  1079,   310,  1080,   312,   313,
     314,     0,   315,  1081,   316,   317,   318,   319,  1082,   610,
     321,  1083,   323,   324,   325,     0,   326,   327,     0,     0,
    1084,   329,   330,     0,     0,   331,   332,   333,   334,   335,
     612,   337,   338,   339,   340,   341,   342,   343,   344,   345,
       0,     0,   346,     0,     0,     0,     0,   347,   348,   613,
     350,   351,   352,   353,   354,   355,   356,     0,   357,   358,
     359,   360,   361,     0,     0,   362,     0,   363,   364,   365,
    1085,   367,   368,   369,   370,     0,   371,   372,   373,     0,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
       0,   384,   385,   386,   387,   388,   389,  1086,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,     0,
       0,   402,   403,   404,   405,   406,   407,   408,   409,   410,
       0,   411,   412,     0,   413,  1087,   415,     0,     0,   416,
     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
     427,   428,   429,   615,   431,     0,   432,   433,     0,   434,
     435,   436,   437,   438,   439,   440,     0,  1088,  1089,     0,
       0,     0,   443,   444,   616,   446,   617,  1090,   448,   449,
     618,   451,   452,  3693,   454,   455,     0,     0,   456,   457,
     458,     0,   459,   460,   461,   462,     0,   463,   464,   465,
     466,   467,   468,  1091,     0,   470,   471,   472,     0,   473,
     474,   475,   476,     0,     0,     0,   477,     0,     0,   478,
     479,   480,   481,   482,   483,   484,   485,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
    1092,     0,     0,     0,     0,     0,     0,  1093,  1094,  1095,
       0,     0,     0,     0,  1096,     0,  1097,     0,     0,     0,
       0,     0,  1098,  1099,     0,     0,     0,     0,  1100,  1101,
     112,  1053,   635,  1054,  1055,  1056,  1057,  1058,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   113,
     114,   115,   116,     0,   117,   118,   119,   120,     0,   121,
     122,   123,     0,     0,     0,     0,     0,     0,  1059,     0,
       0,   124,   125,   126,     0,   127,   128,   129,   130,   131,
     132,   133,   134,  1060,   136,  1061,  1062,     0,   139,   140,
     141,   142,   143,   144,  1063,   604,   145,   146,  1064,  1065,
     149,     0,   150,   151,   152,   153,   605,     0,   606,     0,
    1066,   157,   158,   159,   160,   161,   162,   163,   164,   165,
       0,   166,   167,   168,   169,   170,     0,     0,   171,   172,
     173,  3692,   175,   176,   177,   178,   179,   180,   181,  1067,
    1068,   184,  1069,   185,     0,   186,   187,   188,   189,   190,
     191,     0,   192,     0,   193,   194,   195,   196,     0,     0,
     197,   198,   827,   200,   201,     0,     0,     0,   202,   203,
     204,     0,   205,   206,   207,     0,   208,   209,   210,   211,
    1070,   213,   214,   215,   216,   217,   607,  1071,   219,     0,
     220,   221,  1072,   223,     0,   224,     0,   225,   226,     0,
     227,   228,   229,   230,   231,   232,     0,   233,     0,     0,
       0,  1073,  1074,     0,   236,     0,   237,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,     0,   249,
     250,   251,   252,   253,   254,   255,     0,   256,   257,   258,
     259,   260,   261,   262,   263,  1075,  1076,     0,  1077,     0,
     267,   268,   269,   270,   271,   272,     0,   273,   274,   275,
     276,   277,     0,     0,   278,   279,   280,   281,     0,   282,
     283,   284,   285,   286,   287,   288,   289,  1078,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,  1079,   310,  1080,   312,
     313,   314,     0,   315,  1081,   316,   317,   318,   319,  1082,
     610,   321,  1083,   323,   324,   325,     0,   326,   327,     0,
       0,  1084,   329,   330,     0,     0,   331,   332,   333,   334,
     335,   612,   337,   338,   339,   340,   341,   342,   343,   344,
     345,     0,     0,   346,     0,     0,     0,     0,   347,   348,
     613,   350,   351,   352,   353,   354,   355,   356,     0,   357,
     358,   359,   360,   361,     0,     0,   362,     0,   363,   364,
     365,  1085,   367,   368,   369,   370,     0,   371,   372,   373,
       0,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,     0,   384,   385,   386,   387,   388,   389,  1086,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
       0,     0,   402,   403,   404,   405,   406,   407,   408,   409,
     410,     0,   411,   412,     0,   413,  1087,   415,     0,     0,
     416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,   428,   429,   615,   431,     0,   432,   433,     0,
     434,   435,   436,   437,   438,   439,   440,     0,  1088,  1089,
       0,     0,     0,   443,   444,   616,   446,   617,  1090,   448,
     449,   618,   451,   452,  3693,   454,   455,     0,     0,   456,
     457,   458,     0,   459,   460,   461,   462,     0,   463,   464,
     465,   466,   467,   468,  1091,     0,   470,   471,   472,     0,
     473,   474,   475,   476,     0,     0,     0,   477,     0,     0,
     478,   479,   480,   481,   482,   483,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,  1092,     0,     0,     0,     0,     0,     0,  1093,  1094,
    1095,     0,     0,     0,     0,  1096,     0,  1097,     0,     0,
       0,     0,     0,  1098,  1099,     0,     0,     0,     0,  1100,
    1101,   112,  1053,   635,  1054,  1055,     0,  1057,  1058,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     113,   114,   115,   116,     0,   117,   118,   119,   120,     0,
     121,   122,   123,     0,     0,     0,     0,     0,     0,  1059,
       0,     0,   124,   125,   126,     0,   127,   128,   129,   130,
     131,   132,   133,   134,  1060,   136,  1061,  1062,     0,   139,
     140,   141,   142,   143,   144,  1063,   604,   145,   146,  1064,
    1065,   149,     0,   150,   151,   152,   153,   605,     0,   606,
       0,   156,   157,   158,   159,   160,   161,   162,   163,   164,
     165,     0,   166,   167,   168,   169,   170,     0,     0,   171,
     172,   173,   174,   175,   176,   177,   178,   179,   180,   181,
    1067,  1068,   184,     0,   185,     0,   186,   187,   188,   189,
     190,   191,     0,   192,     0,   193,   194,   195,   196,     0,
       0,   197,   198,   827,   200,   201,     0,     0,     0,   202,
     203,   204,     0,   205,   206,   207,     0,   208,   209,   210,
     211,  1070,   213,   214,   215,   216,   217,   607,  1071,   219,
       0,   220,   221,  1072,   223,     0,   224,     0,   225,   226,
       0,   227,   228,   229,   230,   231,   232,     0,   233,     0,
       0,     0,  1073,  1074,     0,   236,     0,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,     0,
     249,   250,   251,   252,   253,   254,   255,     0,   256,   257,
     258,   259,   260,   261,   262,   263,  1075,  1076,     0,  1077,
       0,   267,   268,   269,   270,   271,   272,     0,   273,   274,
     275,   276,   277,     0,     0,   278,   279,   280,   281,     0,
     282,   283,   284,   285,   286,   287,   288,   289,  1078,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,  1079,   310,  1080,
     312,   313,   314,     0,   315,  2826,   316,   317,   318,   319,
    1082,   610,   321,  1083,   323,   324,   325,     0,   326,   327,
       0,     0,   328,   329,   330,     0,     0,   331,   332,   333,
     334,   335,   612,   337,   338,   339,   340,   341,   342,   343,
     344,   345,     0,     0,   346,     0,     0,     0,     0,   347,
     348,   613,   350,   351,   352,   353,   354,   355,   356,     0,
     357,   358,   359,   360,   361,     0,     0,   362,     0,   363,
     364,   365,  1085,   367,   368,   369,   370,     0,   371,   372,
     373,     0,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,     0,   384,   385,   386,   387,   388,   389,  1086,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,     0,     0,   402,   403,   404,   405,   406,   407,   408,
     409,   410,     0,   411,   412,     0,   413,  1087,   415,     0,
       0,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   615,   431,     0,   432,   433,
       0,   434,   435,   436,   437,   438,   439,   440,     0,  1088,
    1089,     0,     0,     0,   443,   444,   616,   446,   617,  1090,
     448,   449,   618,   451,   452,   453,   454,   455,     0,     0,
     456,   457,   458,     0,   459,   460,   461,   462,     0,   463,
     464,   465,   466,   467,   468,  1091,     0,   470,   471,   472,
       0,   473,   474,   475,   476,     0,     0,     0,   477,     0,
       0,   478,   479,   480,   481,   482,   483,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,   498,  2827,     0,     0,     0,     0,     0,     0,  2828,
    2829,     0,     0,     0,     0,     0,  1096,     0,  1097,     0,
       0,     0,     0,     0,  1098,  1099,     0,     0,     0,     0,
    1100,  1101,   112,  1053,   635,  1054,  1055,  1056,  1057,  1058,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   113,   114,   115,   116,     0,   117,   118,   119,   120,
       0,   121,   122,   123,     0,     0,     0,     0,     0,     0,
    1059,     0,     0,   124,   125,   126,     0,   127,   128,   129,
     130,   131,   132,   133,   134,  1060,   136,  1061,  1062,     0,
     139,   140,   141,   142,   143,   144,  1063,   604,   145,   146,
    1064,  1065,   149,     0,   150,   151,   152,   153,   605,     0,
     606,     0,   156,   157,   158,   159,   160,   161,   162,   163,
     164,   165,     0,   166,   167,   168,   169,   170,     0,     0,
     171,   172,   173,   174,   175,   176,   177,   178,   179,   180,
     181,  1067,  1068,   184,     0,   185,     0,   186,   187,   188,
     189,   190,   191,     0,   192,     0,   193,   194,   195,   196,
       0,     0,   197,   198,   827,   200,   201,     0,     0,     0,
     202,   203,   204,     0,   205,   206,   207,     0,   208,   209,
     210,   211,  1070,   213,   214,   215,   216,   217,   607,  1071,
     219,     0,   220,   221,  1072,   223,     0,   224,     0,   225,
     226,     0,   227,   228,   229,   230,   231,   232,     0,   233,
       0,     0,     0,  1073,  1074,     0,   236,     0,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
       0,   249,   250,   251,   252,   253,   254,   255,     0,   256,
     257,   258,   259,   260,   261,   262,   263,  1075,  1076,     0,
    1077,     0,   267,   268,   269,   270,   271,   272,     0,   273,
     274,   275,   276,   277,     0,     0,   278,   279,   280,   281,
       0,   282,   283,   284,   285,   286,   287,   288,   289,  1078,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,  1079,   310,
    1080,   312,   313,   314,     0,   315,     0,   316,   317,   318,
     319,  1082,   610,   321,  1083,   323,   324,   325,     0,   326,
     327,     0,     0,  1084,   329,   330,     0,     0,   331,   332,
     333,   334,   335,   612,   337,   338,   339,   340,   341,   342,
     343,   344,   345,     0,     0,   346,     0,     0,     0,     0,
     347,   348,   613,   350,   351,   352,   353,   354,   355,   356,
       0,   357,   358,   359,   360,   361,     0,     0,   362,     0,
     363,   364,   365,  1085,   367,   368,   369,   370,     0,   371,
     372,   373,     0,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,     0,   384,   385,   386,   387,   388,   389,
    1086,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,     0,     0,   402,   403,   404,   405,   406,   407,
     408,   409,   410,     0,   411,   412,     0,   413,  1087,   415,
       0,     0,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,   428,   429,   615,   431,     0,   432,
     433,     0,   434,   435,   436,   437,   438,   439,   440,     0,
    1088,  1089,     0,     0,     0,   443,   444,   616,   446,   617,
    1090,   448,   449,   618,   451,   452,   453,   454,   455,     0,
       0,   456,   457,   458,     0,   459,   460,   461,   462,     0,
     463,   464,   465,   466,   467,   468,  1091,     0,   470,   471,
     472,     0,   473,   474,   475,   476,     0,     0,     0,   477,
       0,     0,   478,   479,   480,   481,   482,   483,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,   498,     0,     0,     0,     0,     0,     0,     0,
    1510,  1511,     0,     0,     0,     0,     0,  1096,     0,  1097,
       0,     0,     0,     0,     0,  1098,  1099,     0,     0,     0,
       0,  1100,  1101,   112,  1053,   635,  1054,  1055,  1056,  1057,
    1058,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   113,   114,   115,   116,     0,   117,   118,   119,
     120,     0,   121,   122,   123,     0,     0,     0,     0,     0,
       0,  1059,     0,     0,   124,   125,   126,     0,   127,   128,
     129,   130,   131,   132,   133, -2131,  1060,   136,  1061,  1062,
       0,   139,   140,   141,   142,   143,   144,  1063,   604,   145,
     146,  1064,  1065,   149,     0,   150,   151,   152,   153,   605,
       0,   606,     0,  1066,   157,   158,   159,   160,   161,   162,
     163,   164,   165,     0,   166,   167,   168,   169,   170,     0,
       0,   171,   172,   173,  3692,   175,   176,   177,   178,   179,
     180,   181,  1067,  1068,   184,  1069,   185,     0,   186,   187,
     188,   189,   190,   191,     0,   192,     0,   193,   194,   195,
     196,     0,     0,   197,   198,   827,   200,   201,     0,     0,
       0,   202,   203,   204,     0,   205,   206,   207,     0,   208,
     209,   210,   211,  1070,   213,   214,   215,   216,   217,   607,
    1071,   219,     0,   220,   221,  1072,   223,     0,   224,     0,
     225,   226,     0,   227,   228,   229,   230, -2131,   232,     0,
     233,     0,     0,     0,  1073,  1074,     0,   236,     0,   237,
     238,   239,   240,   241,   242,   243, -2131,   245,   246,   247,
     248,     0,   249,   250,   251,   252,   253,   254,   255,     0,
     256,   257,   258,   259,   260,   261,   262,   263,  1075,  1076,
       0,  1077,     0,   267,     0,     0,   270,   271,   272,     0,
     273,   274,   275,   276,   277,     0,     0,   278,   279,   280,
   -2131,     0,   282,   283,   284,   285,   286,   287,   288,   289,
    1078,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,  1079,
     310,  1080,   312,   313,   314,     0,   315,     0,   316,   317,
       0,   319,  1082,   610,   321,  1083,   323,   324,   325,     0,
     326,   327,     0,     0,  1084,   329,   330,     0,     0,   331,
     332,   333,   334,   335,   612,   337,   338,   339,   340,   341,
     342,   343,   344,   345,     0,     0,   346,     0,     0,     0,
       0,   347,   348,   613,   350,   351,   352,   353,   354,   355,
     356,     0,   357,   358,   359,   360,   361,     0,     0,   362,
       0,   363,   364,   365,  1085,   367,   368,   369,   370,     0,
     371,   372,   373,     0,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,     0,   384,   385,   386,   387,   388,
     389,  1086,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,     0,     0,   402,   403,   404,   405,   406,
     407,   408,   409,   410,     0,   411, -2131,     0,   413,  1087,
     415,     0,     0,   416,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,   427,   428,   429,   615,   431,     0,
     432,   433,     0,   434,   435,   436,   437,   438,   439,   440,
       0,  1088,  1089,     0,     0,     0,   443,   444,   616,   446,
     617,  1090,   448,   449,   618,   451,   452,  3693,   454,   455,
       0,     0,   456,   457,   458,     0,   459,   460,   461,   462,
       0,   463,   464,   465,   466,   467,   468,  1091,     0,   470,
     471,   472,     0,   473,   474,   475,   476,     0,     0,     0,
     477,     0,     0,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498, -2131,     0,     0,     0,     0,     0,
       0,  1093,  1094,  1095,     0,     0,     0,     0,  1096,     0,
    1097,     0,     0,     0,     0,     0,  1098,  1099,     0,     0,
       0,     0,  1100,  1101,   112,  1053,   635,  1054,  1055,     0,
    1057,  1058,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   113,   114,   115,   116,     0,   117,   118,
     119,   120,     0,   121,   122,   123,     0,     0,     0,     0,
       0,     0,  1059,     0,     0,   124,   125,   126,     0,   127,
     128,   129,   130,   131,   132,   133,   134,  1060,   136,  1061,
    1062,     0,   139,   140,   141,   142,   143,   144,  1063,   604,
     145,   146,  1064,  1065,   149,     0,   150,   151,   152,   153,
     605,     0,   606,     0,   156,   157,   158,   159,   160,   161,
     162,   163,   164,   165,     0,   166,   167,   168,   169,   170,
       0,     0,   171,   172,   173,   174,   175,   176,   177,   178,
     179,   180,   181,  1067,  1068,   184,     0,   185,     0,   186,
     187,   188,   189,   190,   191,     0,   192,     0,   193,   194,
     195,   196,     0,     0,   197,   198,   827,   200,   201,     0,
       0,     0,   202,   203,   204,     0,   205,   206,   207,     0,
     208,   209,   210,   211,  1070,   213,   214,   215,   216,   217,
     607,  1071,   219,     0,   220,   221,  1072,   223,     0,   224,
       0,   225,   226,     0,   227,   228,   229,   230,   231,   232,
       0,   233,     0,     0,     0,  1073,  1074,     0,   236,     0,
     237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,     0,   249,   250,   251,   252,   253,   254,   255,
       0,   256,   257,   258,   259,   260,   261,   262,   263,  1075,
    1076,     0,  1077,     0,   267,   268,   269,   270,   271,   272,
       0,   273,   274,   275,   276,   277,     0,     0,   278,   279,
     280,   281,     0,   282,   283,   284,   285,   286,   287,   288,
     289,  1078,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
    1079,   310,  1080,   312,   313,   314,     0,   315,     0,   316,
     317,   318,   319,  1082,   610,   321,  1083,   323,   324,   325,
       0,   326,   327,     0,     0,   328,   329,   330,     0,     0,
     331,   332,   333,   334,   335,   612,   337,   338,   339,   340,
     341,   342,   343,   344,   345,     0,     0,   346,     0,     0,
       0,     0,   347,   348,   613,   350,   351,   352,   353,   354,
     355,   356,     0,   357,   358,   359,   360,   361,     0,     0,
     362,     0,   363,   364,   365,  1085,   367,   368,   369,   370,
       0,   371,   372,   373,     0,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,     0,   384,   385,   386,   387,
     388,   389,  2170,  2171,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,     0,     0,   402,   403,   404,   405,
     406,   407,   408,   409,   410,     0,   411,   412,     0,   413,
    1087,   415,     0,     0,   416,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,   428,   429,   615,   431,
       0,   432,   433,     0,   434,   435,   436,   437,   438,   439,
     440,     0,  1088,  1089,     0,     0,     0,   443,   444,   616,
     446,   617,  1090,   448,   449,   618,   451,   452,   453,   454,
     455,     0,     0,   456,   457,   458,     0,   459,   460,   461,
     462,     0,   463,   464,   465,   466,   467,   468,  1091,     0,
     470,   471,   472,     0,   473,   474,   475,   476,     0,     0,
       0,   477,     0,     0,   478,   479,   480,   481,   482,   483,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,     0,     0,     0,     0,     0,
       0,     0,  2172,  2173,     0,     0,     0,     0,     0,  1096,
       0,  1097,     0,     0,     0,     0,     0,  1098,  1099,     0,
       0,     0,     0,  1100,  1101,   112,  1053,   635,  1054,  1055,
    1056,  1057,  1058,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   113,   114,   115,   116,     0,   117,
     118,   119,   120,     0,   121,   122,   123,     0,     0,     0,
       0,     0,     0,  1059,     0,     0,   124,   125,   126,     0,
     127,   128,   129,   130,   131,   132,   133,   134,  1060,   136,
    1061,  1062,     0,   139,   140,   141,   142,   143,   144,  1063,
     604,   145,   146,  1064,  1065,   149,     0,   150,   151,   152,
     153,   605,     0,   606,     0,   156,   157,   158,   159,   160,
     161,   162,   163,   164,   165,     0,   166,   167,   168,   169,
     170,     0,     0,   171,   172,   173,   174,   175,   176,   177,
     178,   179,   180,   181,  1067,  1068,   184,     0,   185,     0,
     186,   187,   188,   189,   190,   191,     0,   192,     0,   193,
     194,   195,   196,     0,     0,   197,   198,   827,   200,   201,
       0,     0,     0,   202,   203,   204,     0,   205,   206,   207,
       0,   208,   209,   210,   211,  1070,   213,   214,   215,   216,
     217,   607,  1071,   219,     0,   220,   221,  1072,   223,     0,
     224,     0,   225,   226,     0,   227,   228,   229,   230,   231,
     232,     0,   233,     0,     0,     0,  1073,  1074,     0,   236,
       0,   237,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,     0,   249,   250,   251,   252,   253,   254,
     255,     0,   256,   257,   258,   259,   260,   261,   262,   263,
    1075,  1076,     0,  1077,     0,   267,     0,   269,   270,   271,
     272,     0,   273,   274,   275,   276,   277,     0,     0,   278,
     279,   280,   281,     0,   282,   283,   284,   285,   286,   287,
     288,   289,  1078,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,  1079,   310,  1080,   312,   313,   314,     0,   315,     0,
     316,   317,   318,   319,  1082,   610,   321,  1083,   323,   324,
     325,     0,   326,   327,     0,     0,  1084,   329,   330,     0,
       0,   331,   332,   333,   334,   335,   612,   337,   338,   339,
     340,   341,   342,   343,   344,   345,     0,     0,   346,     0,
       0,     0,     0,   347,   348,   613,   350,   351,   352,   353,
     354,   355,   356,     0,   357,   358,   359,   360,   361,     0,
       0,   362,     0,   363,   364,   365,  1085,   367,   368,   369,
     370,     0,   371,   372,   373,     0,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,     0,   384,   385,   386,
     387,   388,   389,  1086,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,     0,     0,   402,   403,   404,
     405,   406,   407,   408,   409,   410,     0,   411,   412,     0,
     413,  1087,   415,     0,     0,   416,   417,   418,   419,   420,
     421,   422,   423,   424,   425,   426,   427,   428,   429,   615,
     431,     0,   432,   433,     0,   434,   435,   436,   437,   438,
     439,   440,     0,  1088,  1089,     0,     0,     0,   443,   444,
     616,   446,   617,  1090,   448,   449,   618,   451,   452,   453,
     454,   455,     0,     0,   456,   457,   458,     0,   459,   460,
     461,   462,     0,   463,   464,   465,   466,   467,   468,  1091,
       0,   470,   471,   472,     0,   473,   474,   475,   476,     0,
       0,     0,   477,     0,     0,   478,   479,   480,   481,   482,
     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,     0,     0,     0,     0,
       0,     0,     0,  1510,  1511,     0,     0,     0,     0,     0,
    1096,     0,  1097,     0,     0,     0,     0,     0,  1098,  1099,
       0,     0,     0,     0,  1100,  1101,   112,  1053,   635,  1054,
    1055,     0,  1057,  1058,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   113,   114,   115,   116,     0,
     117,   118,   119,   120,     0,   121,   122,   123,     0,     0,
       0,     0,     0,     0,  1059,     0,     0,   124,   125,   126,
       0,   127,   128,   129,   130,   131,   132,   133,   134,  1060,
     136,  1061,  1062,     0,   139,   140,   141,   142,   143,   144,
    1063,   604,   145,   146,  1064,  1065,   149,     0,   150,   151,
     152,   153,   605,     0,   606,     0,   156,   157,   158,   159,
     160,   161,   162,   163,   164,   165,     0,   166,   167,   168,
     169,   170,     0,     0,   171,   172,   173,   174,   175,   176,
     177,   178,   179,   180,   181,  1067,  1068,   184,     0,   185,
       0,   186,   187,   188,   189,   190,   191,     0,   192,     0,
     193,   194,   195,   196,     0,     0,   197,   198,   827,   200,
     201,     0,     0,     0,   202,   203,   204,     0,   205,   206,
     207,     0,   208,   209,   210,   211,  1070,   213,   214,   215,
     216,   217,   607,  1071,   219,     0,   220,   221,  1072,   223,
       0,   224,     0,   225,   226,     0,   227,   228,   229,   230,
     231,   232,     0,   233,     0,     0,     0,  1073,  1074,     0,
     236,     0,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,     0,   249,   250,   251,   252,   253,
     254,   255,     0,   256,   257,   258,   259,   260,   261,   262,
     263,  1075,  1076,     0,  1077,     0,   267,   268,   269,   270,
     271,   272,     0,   273,   274,   275,   276,   277,     0,     0,
     278,   279,   280,   281,     0,   282,   283,   284,   285,   286,
     287,   288,   289,  1078,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,  1079,   310,  1080,   312,   313,   314,     0,   315,
       0,   316,   317,   318,   319,  1082,   610,   321,  1083,   323,
     324,   325,     0,   326,   327,     0,     0,   328,   329,   330,
       0,     0,   331,   332,   333,   334,   335,   612,   337,   338,
     339,   340,   341,   342,   343,   344,   345,     0,     0,   346,
       0,     0,     0,     0,   347,   348,   613,   350,   351,   352,
     353,   354,   355,   356,     0,   357,   358,   359,   360,   361,
       0,     0,   362,     0,   363,   364,   365,  1085,   367,   368,
     369,   370,     0,   371,   372,   373,     0,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,     0,   384,   385,
     386,   387,   388,   389,  1086,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,     0,     0,   402,   403,
     404,   405,   406,   407,   408,   409,   410,     0,   411,   412,
       0,   413,  1087,   415,     0,     0,   416,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,   428,   429,
     615,   431,     0,   432,   433,     0,   434,   435,   436,   437,
     438,   439,   440,     0,  1088,  1089,     0,     0,     0,   443,
     444,   616,   446,   617,  1090,   448,   449,   618,   451,   452,
     453,   454,   455,     0,     0,   456,   457,   458,     0,   459,
     460,   461,   462,     0,   463,   464,   465,   466,   467,   468,
    1091,     0,   470,   471,   472,     0,   473,   474,   475,   476,
       0,     0,     0,   477,     0,     0,   478,   479,   480,   481,
     482,   483,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,   498,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1096,     0,  1097,     0,     0,     0,     0,     0,  1098,
    1099,     0,     0,     0,     0,  1100,  1101,   112,  1053,   635,
    1054,  1055,     0,  1057,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   113,   114,   115,   116,
       0,   117,   118,   119,   120,     0,   121,   122,   123,     0,
       0,     0,     0,     0,     0,  1059,     0,     0,   124,   125,
     126,     0,   127,   128,   129,   130,   131,   132,   133,   134,
    1060,   136,  1061,  1062,     0,   139,   140,   141,   142,   143,
     144,  1063,     0,   145,   146,  1064,  1065,   149,     0,   150,
     151,   152,   153,   154,     0,   155,     0,   156,   157,   158,
     159,   160,   161,   162,   163,   164,   165,     0,   166,   167,
     168,   169,   170,     0,     0,   171,   172,   173,   174,   175,
     176,   177,   178,   179,   180,   181,  1067,  1068,   184,     0,
     185,     0,   186,   187,   188,   189,   190,   191,     0,   192,
       0,   193,   194,   195,   196,     0,     0,   197,   198,   827,
     200,   201,     0,     0,     0,   202,   203,   204,     0,   205,
     206,   207,     0,   208,   209,   210,   211,  1070,   213,   214,
     215,   216,   217,   218,  1071,   219,     0,   220,   221,  1072,
     223,     0,   224,     0,   225,   226,     0,   227,   228,   229,
     230,   231,   232,     0,   233,     0,     0,  3056,  1073,  1074,
       0,   236,     0,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,     0,   249,   250,   251,   252,
     253,   254,   255,     0,   256,   257,   258,   259,   260,   261,
     262,   263,  1075,  1076,     0,  1077,     0,   267,   268,   269,
     270,   271,   272,     0,   273,   274,   275,   276,   277,     0,
       0,   278,   279,   280,   281,     0,   282,   283,   284,   285,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,  1079,   310,  1080,   312,   313,   314,     0,
     315,     0,   316,   317,   318,   319,  1082,   320,   321,  1083,
     323,   324,   325,     0,   326,   327,     0,     0,   328,   329,
     330,     0,     0,   331,   332,   333,   334,   335,   336,   337,
     338,   339,   340,   341,   342,   343,   344,   345,     0,     0,
     346,     0,     0,     0,     0,   347,   348,   349,   350,   351,
     352,   353,   354,   355,   356,     0,   357,   358,   359,   360,
     361,     0,     0,   362,     0,   363,   364,   365,  1085,   367,
     368,   369,   370,     0,   371,   372,   373,     0,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,     0,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,     0,     0,   402,
     403,   404,   405,   406,   407,   408,   409,   410,     0,   411,
     412,     0,   413,  1087,   415,     0,     0,   416,   417,   418,
     419,   420,   421,   422,   423,   424,   425,   426,   427,   428,
     429,   430,   431,     0,   432,   433,     0,   434,   435,   436,
     437,   438,   439,   440,     0,  1088,  1089,     0,     0,     0,
     443,   444,   445,   446,   447,  1090,   448,   449,   450,   451,
     452,   453,   454,   455,     0,     0,   456,   457,   458,     0,
     459,   460,   461,   462,     0,   463,   464,   465,   466,   467,
     468,  1091,     0,   470,   471,   472,     0,   473,   474,   475,
     476,     0,     0,     0,   477,     0,     0,   478,   479,   480,
     481,   482,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1096,     0,  2738,   112,  1053,   635,  1054,  1055,
    1056,  1057,  1058,     0,     0,     0,  1100,  1101,     0,     0,
       0,     0,     0,     0,   113,   114,   115,   116,     0,   117,
     118,   119,   120,     0,   121,   122,   123,     0,     0,     0,
       0,     0,     0,  1059,     0,     0,   124,   125,   126,     0,
     127,   128,   129,   130,   131,   132,   133,     0,  1060,   136,
    1061,  1062,     0,   139,   140,   141,   142,   143,   144,  1063,
     604,   145,   146,  1064,  1065,   149,     0,   150,   151,   152,
     153,   605,     0,   606,     0,  1066,   157,   158,   159,   160,
     161,   162,   163,   164,   165,     0,   166,   167,   168,   169,
     170,     0,     0,   171,   172,   173,   174,   175,   176,   177,
     178,   179,   180,   181,  1067,  1068,   184,  1069,   185,     0,
     186,   187,   188,   189,   190,   191,     0,   192,     0,   193,
     194,   195,   196,     0,     0,   197,   198,   827,   200,   201,
       0,     0,     0,   202,   203,   204,     0,   205,     0,   207,
       0,   208,   209,   210,   211,  1070,   213,   214,   215,   216,
     217,   607,  1071,   219,     0,   220,   221,  1072,   223,     0,
     224,     0,   225,   226,     0,   227,   228,   229,   230,     0,
     232,     0,   233,     0,     0,     0,  1073,  1074,     0,   236,
       0,   237,   238,   239,   240,   241,   242,   243,     0,   245,
     246,   247,   248,     0,   249,   250,   251,   252,   253,   254,
     255,     0,   256,   257,   258,   259,   260,   261,   262,   263,
    1075,  1076,     0,  1077,     0,   267,     0,     0,   270,   271,
     272,     0,   273,   274,   275,   276,   277,     0,     0,   278,
     279,   280,     0,     0,   282,   283,   284,   285,   286,   287,
     288,   289,  1078,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,  1079,   310,  1080,   312,   313,   314,     0,   315,     0,
     316,   317,     0,   319,  1082,   610,   321,  1083,   323,   324,
     325,     0,   326,   327,     0,     0,  1084,   329,   330,     0,
       0,   331,   332,   333,   334,   335,   612,   337,   338,   339,
     340,   341,   342,   343,   344,   345,     0,     0,   346,     0,
       0,     0,     0,   347,   348,   613,   350,   351,   352,   353,
     354,   355,   356,     0,   357,   358,   359,   360,   361,     0,
       0,   362,     0,   363,   364,   365,  1085,   367,   368,   369,
     370,     0,   371,   372,   373,     0,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,     0,   384,   385,   386,
     387,   388,   389,  1086,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,     0,     0,   402,   403,   404,
     405,   406,   407,   408,   409,   410,     0,   411,     0,     0,
     413,  1087,   415,     0,     0,   416,   417,   418,   419,   420,
     421,   422,   423,   424,   425,   426,   427,   428,   429,   615,
     431,     0,   432,   433,     0,   434,   435,   436,   437,   438,
     439,   440,     0,  1088,  1089,     0,     0,     0,   443,   444,
     616,   446,   617,  1090,   448,   449,   618,   451,   452,   453,
     454,   455,     0,     0,   456,   457,   458,     0,   459,   460,
     461,   462,     0,   463,   464,   465,   466,   467,   468,  1091,
       0,   470,   471,   472,     0,   473,   474,   475,   476,     0,
       0,     0,   477,     0,     0,   478,   479,   480,   481,   482,
     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,     0,     0,     0,     0,
       0,     0,     0,  1093,  1094,  1095,     0,     0,     0,     0,
    1096,     0,  1097,     0,     0,     0,     0,     0,  1098,  1099,
       0,     0,     0,     0,  1100,  1101,   112,  1053,   635,  1054,
    1055,     0,  1057,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   113,   114,   115,   116,     0,
     117,   118,   119,   120,     0,   121,   122,   123,     0,     0,
       0,     0,     0,     0,  1059,     0,     0,   124,   125,   126,
       0,   127,   128,   129,   130,   131,   132,   133,   134,  1060,
     136,  1061,  1062,     0,   139,   140,   141,   142,   143,   144,
    1063,     0,   145,   146,  1064,  1065,   149,     0,   150,   151,
     152,   153,   154,     0,   155,     0,   156,   157,   158,   159,
     160,   161,   162,   163,   164,   165,     0,   166,   167,   168,
     169,   170,     0,     0,   171,   172,   173,   174,   175,   176,
     177,   178,   179,   180,   181,  1067,  1068,   184,     0,   185,
       0,   186,   187,   188,   189,   190,   191,     0,   192,     0,
     193,   194,   195,   196,     0,     0,   197,   198,   827,   200,
     201,     0,     0,     0,   202,   203,   204,     0,   205,   206,
     207,     0,   208,   209,   210,   211,  1070,   213,   214,   215,
     216,   217,   218,  1071,   219,     0,   220,   221,  1072,   223,
       0,   224,     0,   225,   226,     0,   227,   228,   229,   230,
     231,   232,     0,   233,     0,     0,     0,  1073,  1074,     0,
     236,     0,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,     0,   249,   250,   251,   252,   253,
     254,   255,     0,   256,   257,   258,   259,   260,   261,   262,
     263,  1075,  1076,     0,  1077,     0,   267,   268,   269,   270,
     271,   272,     0,   273,   274,   275,   276,   277,     0,     0,
     278,   279,   280,   281,     0,   282,   283,   284,   285,   286,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,  1079,   310,  1080,   312,   313,   314,     0,   315,
       0,   316,   317,   318,   319,  1082,   320,   321,  1083,   323,
     324,   325,     0,   326,   327,     0,     0,   328,   329,   330,
       0,     0,   331,   332,   333,   334,   335,   336,   337,   338,
     339,   340,   341,   342,   343,   344,   345,     0,     0,   346,
       0,     0,     0,     0,   347,   348,   349,   350,   351,   352,
     353,   354,   355,   356,     0,   357,   358,   359,   360,   361,
       0,     0,   362,     0,   363,   364,   365,  1085,   367,   368,
     369,   370,     0,   371,   372,   373,     0,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,     0,   384,   385,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,     0,     0,   402,   403,
     404,   405,   406,   407,   408,   409,   410,     0,   411,   412,
       0,   413,  1087,   415,     0,     0,   416,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,   428,   429,
     430,   431,     0,   432,   433,     0,   434,   435,   436,   437,
     438,   439,   440,     0,  1088,  1089,     0,     0,     0,   443,
     444,   445,   446,   447,  1090,   448,   449,   450,   451,   452,
     453,   454,   455,     0,     0,   456,   457,   458,     0,   459,
     460,   461,   462,     0,   463,   464,   465,   466,   467,   468,
    1091,     0,   470,   471,   472,     0,   473,   474,   475,   476,
       0,     0,     0,   477,     0,     0,   478,   479,   480,   481,
     482,   483,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,   498,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   682,     0,
       0,  1096,     0,  2738,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1100,  1101,   113,   114,   115,
     116,     0,   117,   118,   119,   120,     0,   121,   122,   123,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     125,   126,     0,   127,   128,   129,     0,   131,   132,   133,
     683,   684,     0,   685,   686,     0,   139,   140,   141,   142,
     143,   144,     0,     0,   145,   146,   687,   688,   149,     0,
     150,   151,   152,   153,   689,     0,     0,     0,     0,   157,
     158,   159,   160,   161,     0,   163,   164,   165,     0,   166,
     167,   168,   169,   170,     0,     0,     0,   172,   173,   174,
     175,   176,   177,   178,   179,   180,   181,   690,   691,   184,
       0,   185,     0,   186,   187,   188,   189,   190,   191,     0,
     192,     0,   193,   194,   195,   196,     0,     0,   197,   198,
     199,   200,   201,     0,     0,     0,   202,   203,   204,     0,
     205,   206,   207,     0,   208,   209,   210,   211,   692,   213,
     214,   215,   216,   217,   693,     0,   219,     0,   220,   221,
     694,   223,     0,   224,     0,   225,     0,     0,     0,   228,
     229,   695,     0,   232,     0,   233,     0,     0,     0,   696,
     697,     0,   236,     0,   237,   238,   239,   240,   241,   242,
     243,     0,   245,   246,   247,   248,     0,   249,   250,   251,
     252,   253,   254,   255,     0,   256,     0,   698,   259,   260,
     261,   262,   263,   699,   700,     0,   701,     0,   267,     0,
       0,   270,     0,   272,     0,   273,   274,   275,   276,   277,
       0,     0,   278,     0,   280,     0,     0,   282,   283,   284,
     285,   286,   287,   288,   289,   702,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   703,     0,   704,   312,   313,   314,
       0,   705,     0,   316,   317,     0,   319,     0,   706,   321,
     707,   323,   324,   325,     0,   326,   327,     0,     0,   328,
     329,   330,     0,     0,   331,   708,     0,   334,     0,   709,
     337,   338,   339,   340,   341,   342,   343,   344,   345,     0,
       0,   346,     0,     0,     0,     0,   347,   348,   710,     0,
     351,   352,   711,   354,   355,   356,     0,   357,   358,   359,
     360,   361,     0,     0,   362,     0,   363,   364,   365,   712,
     367,   368,   369,   370,     0,   371,   372,   373,     0,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,     0,
     384,   385,     0,   387,   388,   389,   713,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,     0,     0,
     402,   403,   404,   405,   406,   407,   714,   409,   410,     0,
     411,     0,     0,   413,   715,   415,     0,     0,   416,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     716,   429,   717,   431,     0,   432,   433,     0,   434,     0,
     436,   437,   438,   439,   440,     0,   718,   719,     0,     0,
       0,   443,   444,   720,   446,   721,     0,   448,   449,   722,
     451,   452,   453,   454,   455,     0,     0,   456,   457,   458,
       0,   459,   460,   461,   462,     0,   463,   464,   465,   466,
     467,  1503,   724,     0,   470,     0,   472,     0,   473,   474,
     475,   476,     0,     0,     0,   477,     0,     0,   478,   479,
     480,   481,   482,   483,   725,   726,   727,   728,   729,   730,
     731,   732,   733,   734,   735,   495,   496,   497,   498,     0,
       0,     0,   506,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  3305,     0,     0,     0,     0,
       0,   113,   114,   115,   116,  3306,   117,   118,   119,   120,
       0,   121,   122,   123,     0,     0,     0,     0,     0,     0,
       0,  1015,     0,     0,   125,   126,     0,   127,   128,   129,
       0,   131,   132,   133,   134,   135,     0,   137,   138,     0,
     139,   140,   141,   142,   143,   144,     0,     0,   145,   146,
     147,   148,   149,     0,   150,   151,   152,   153,   154,     0,
       0,     0,   156,   157,   158,   159,   160,   161,     0,   163,
     164,   165,     0,   166,   167,   168,   169,   170,     0,     0,
       0,   172,   173,   174,   175,   176,   177,   178,   179,   180,
     181,   182,   183,   184,     0,   185,     0,   186,   187,   188,
     189,   190,   191,     0,   192,     0,   193,   194,   195,   196,
       0,     0,   197,   198,   199,   200,   201,     0,     0,     0,
     202,   203,   204,     0,   205,   206,   207,  -682,   208,   209,
     210,   211,   212,   213,   214,   215,   216,   217,   218,     0,
     219,  -682,   220,   221,   222,   223,  -682,   224,     0,   225,
       0,     0,     0,   228,   229,   507,     0,   232,     0,   233,
       0,     0,     0,   234,   235,     0,   236,     0,   237,   238,
     239,   240,   241,   242,   243,     0,   245,   246,   247,   248,
       0,   249,   250,   251,   252,   253,   254,   255,     0,   256,
       0,   258,   259,   260,   261,   262,   263,   264,   265,  -682,
     266,     0,   267,     0,     0,   270,     0,   272,     0,   273,
     274,   275,   276,   277,     0,     0,   278,     0,   280,     0,
    -682,   282,   283,   284,   285,   286,   287,   288,   289,   508,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,     0,
     311,   312,   313,   314,     0,   315,     0,   316,   317,     0,
     319,     0,   320,   321,   322,   323,   324,   325,  -682,   326,
     327,     0,     0,   328,   329,   330,     0,  -682,   331,   332,
       0,   334,     0,   336,   337,   338,   339,   340,   341,   342,
     343,   344,   345,     0,     0,   346,     0,     0,     0,     0,
     347,   348,   349,     0,   351,   352,   353,   354,   355,   356,
       0,   357,   358,   359,   360,   361,     0,     0,   362,     0,
     363,   364,   365,   366,   367,   368,   369,   370,     0,   371,
     372,   373,     0,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,     0,   384,   385,     0,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,     0,     0,   402,   403,   404,   405,   406,   407,
     408,   409,   410,     0,   411,     0,     0,   413,   414,   415,
       0,     0,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,   509,   429,   430,   431,     0,   432,
     433,     0,   434,     0,   436,   437,   438,   439,   440,     0,
     441,   442,     0,     0,     0,   443,   444,   445,   446,   447,
       0,   448,   449,   450,   451,   452,   453,   454,   455,  -682,
       0,   456,   457,   458,     0,   459,   460,   461,   462,     0,
     463,   464,   465,   466,   467,   468,   469,     0,   470,     0,
     472,     0,   473,   474,   475,   476,     0,     0,     0,   477,
       0,     0,   478,   479,   480,   481,   482,   483,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,   498,   506,     0,   529,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1166,     0,   113,   114,   115,   116,     0,   117,   118,   119,
     120,     0,   121,   122,   123,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   125,   126,     0,   127,   128,
     129,     0,   131,   132,   133,   134,   135,     0,   137,   138,
       0,   139,   140,   141,   142,   143,   144,     0,     0,   145,
     146,   147,   148,   149,     0,   150,   151,   152,   153,   154,
       0,     0,     0,   156,   157,   158,   159,   160,   161,     0,
     163,   164,   165,     0,   166,   167,   168,   169,   170,     0,
       0,     0,   172,   173,   174,   175,   176,   177,   178,   179,
     180,   181,   182,   183,   184,     0,   185,     0,   186,   187,
     188,   189,   190,   191,     0,   192,     0,   193,   194,   195,
     196,     0,     0,   197,   198,   199,   200,   201,     0,     0,
       0,   202,   203,   204,     0,   205,   206,   207,     0,   208,
     209,   210,   211,   212,   213,   214,   215,   216,   217,   218,
       0,   219,     0,   220,   221,   222,   223,     0,   224,     0,
     225,     0,     0,     0,   228,   229,   507,     0,   232,     0,
     233,     0,     0,     0,   234,   235,     0,   236,     0,   237,
     238,   239,   240,   241,   242,   243,     0,   245,   246,   247,
     248,     0,   249,   250,   251,   252,   253,   254,   255,     0,
     256,     0,   258,   259,   260,   261,   262,   263,   264,   265,
       0,   266,     0,   267,     0,     0,   270,     0,   272,     0,
     273,   274,   275,   276,   277,     0,     0,   278,     0,   280,
       0,     0,   282,   283,   284,   285,   286,   287,   288,   289,
     508,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
       0,   311,   312,   313,   314,     0,   315,     0,   316,   317,
       0,   319,     0,   320,   321,   322,   323,   324,   325,     0,
     326,   327,     0,     0,   328,   329,   330,     0,     0,   331,
     332,     0,   334,     0,   336,   337,   338,   339,   340,   341,
     342,   343,   344,   345,     0,     0,   346,     0,     0,     0,
       0,   347,   348,   349,     0,   351,   352,   353,   354,   355,
     356,     0,   357,   358,   359,   360,   361,     0,     0,   362,
       0,   363,   364,   365,   366,   367,   368,   369,   370,     0,
     371,   372,   373,     0,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,     0,   384,   385,     0,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,     0,     0,   402,   403,   404,   405,   406,
     407,   408,   409,   410,     0,   411,     0,     0,   413,   414,
     415,     0,     0,   416,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,   427,   509,   429,   430,   431,     0,
     432,   433,     0,   434,     0,   436,   437,   438,   439,   440,
       0,   441,   442,     0,     0,     0,   443,   444,   445,   446,
     447,     0,   448,   449,   450,   451,   452,   453,   454,   455,
       0,     0,   456,   457,   458,     0,   459,   460,   461,   462,
       0,   463,   464,   465,   466,   467,   468,   469,     0,   470,
       0,   472,     0,   473,   474,   475,   476,     0,     0,     0,
     477,     0,     0,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   112,     0,   529,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    2440,  3285,     0,   113,   114,   115,   116,     0,   117,   118,
     119,   120,     0,   121,   122,   123,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   124,   125,   126,     0,   127,
     128,   129,   130,   131,   132,   133,   134,   135,   136,   137,
     138,     0,   139,   140,   141,   142,   143,   144,     0,   604,
     145,   146,   147,   148,   149,     0,   150,   151,   152,   153,
     605,     0,   606,     0,   156,   157,   158,   159,   160,   161,
     162,   163,   164,   165,     0,   166,   167,   168,   169,   170,
       0,     0,   171,   172,   173,   174,   175,   176,   177,   178,
     179,   180,   181,   182,   183,   184,     0,   185,     0,   186,
     187,   188,   189,   190,   191,     0,   192,     0,   193,   194,
     195,   196,     0,     0,   197,   198,   199,   200,   201,     0,
       0,     0,   202,   203,   204,     0,   205,   206,   207,     0,
     208,   209,   210,   211,   212,   213,   214,   215,   216,   217,
     607,     0,   219,     0,   220,   221,   222,   223,     0,   224,
       0,   225,   226,    21,   227,   228,   229,   230,   231,   232,
       0,   233,     0,   608,     0,   234,   235,     0,   236,     0,
     237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,     0,   249,   250,   251,   252,   253,   254,   255,
       0,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,     0,   266,     0,   267,   268,   269,   270,   271,   272,
       0,   273,   274,   275,   276,   277,   609,     0,   278,   279,
     280,   281,     0,   282,   283,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,     0,   315,     0,   316,
     317,   318,   319,     0,   610,   321,   322,   323,   324,   325,
       0,   326,   327,     0,   611,   328,   329,   330,     0,     0,
     331,   332,   333,   334,   335,   612,   337,   338,   339,   340,
     341,   342,   343,   344,   345,     0,     0,   346,    25,    26,
      27,     0,   347,   348,   613,   350,   351,   352,   353,   354,
     355,   356,     0,   357,   358,   359,   360,   361,     0,     0,
     362,     0,   363,   364,   365,   366,   367,   368,   369,   370,
       0,   371,   372,   373,     0,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,     0,   384,   385,   386,   387,
     388,   389,   390,   614,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,    32,     0,   402,   403,   404,   405,
     406,   407,   408,   409,   410,     0,   411,   412,     0,   413,
     414,   415,     0,     0,   416,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,   428,   429,   615,   431,
       0,   432,   433,    37,   434,   435,   436,   437,   438,   439,
     440,     0,   441,   442,     0,     0,     0,   443,   444,   616,
     446,   617,     0,   448,   449,   618,   451,   452,   453,   454,
     455,     0,     0,   456,   457,   458,    39,   459,   460,   461,
     462,     0,   463,   464,   465,   466,   467,   619,   469,     0,
     470,   471,   472,     0,   473,   474,   475,   476,     0,     0,
       0,   477,     0,    43,   478,   479,   480,   481,   482,   483,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,   897,     0,    44,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   620,     0,     0,   113,   114,   115,   116,     0,   117,
     118,   119,   120,     0,   121,   122,   123,     3,     4,     0,
     898,     0,     0,     0,     0,     0,   899,   125,   126,     0,
     127,   128,   129,   900,   131,   132,   133,   901,   902,   903,
     904,   905,     0,   139,   140,   141,   142,   143,   144,     0,
       0,   145,   146,   906,   907,   149,     0,   150,   151,   152,
     153,   908,     0,   909,     0,   910,   157,   158,   159,   160,
     161,   911,   163,   164,   165,     0,   166,   167,   168,   169,
     170,     0,     0,   912,   172,   173,   174,   175,   176,   177,
     178,   179,   180,   181,   913,   914,   184,     0,   185,     0,
     186,   187,   188,   189,   190,   191,     0,   192,     0,   193,
     194,   195,   196,     0,     0,   197,   198,   199,   200,   201,
       0,     0,     0,   202,   203,   204,     0,   205,   206,   207,
       0,   208,   209,   210,   211,   915,   213,   214,   215,   216,
     217,   916,     0,   219,     0,   220,   221,   917,   223,     0,
     224,     0,   225,   918,    21,   919,   228,   229,   920,   921,
     232,     0,   233,     0,     0,     0,   922,   923,     0,   236,
       0,   237,   238,   239,   240,   241,   242,   243,   924,   245,
     246,   247,   248,     0,   249,   250,   251,   252,   253,   254,
     255,     0,   256,   925,   926,   259,   260,   261,   262,   263,
     927,   928,     0,   929,     0,   267,   930,   931,   270,   932,
     272,     0,   273,   274,   275,   276,   277,     0,     0,   278,
     933,   280,   934,     0,   282,   283,   284,   285,   286,   287,
     288,   289,   935,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   936,   937,   938,   312,   313,   314,     0,   939,     0,
     316,   317,   940,   319,     0,   941,   321,   942,   323,   324,
     325,     0,   326,   327,     0,     0,   328,   329,   330,     0,
       0,   331,   943,   944,   334,   945,   946,   337,   338,   339,
     340,   341,   342,   343,   344,   345,     0,     0,   346,    25,
      26,    27,     0,   347,   348,   947,   948,   351,   352,   949,
     354,   355,   356,     0,   357,   358,   359,   360,   361,     0,
       0,   362,     0,   363,   364,   365,   950,   367,   368,   369,
     370,     0,   371,   372,   373,     0,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,     0,   384,   385,   951,
     387,   388,   389,   952,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,    32,   953,   402,   403,   404,
     405,   406,   407,   954,   409,   410,     0,   411,   955,     0,
     413,   956,   415,     0,     0,   416,   417,   418,   419,   420,
     421,   422,   423,   424,   425,   426,   427,   957,   429,   958,
     431,     0,   432,   433,    37,   434,   959,   436,   437,   438,
     439,   440,     0,   960,   961,     0,     0,     0,   443,   444,
     962,   446,   963,     0,   448,   449,   964,   451,   452,   453,
     454,   455,     0,     0,   456,   457,   458,    39,   459,   460,
     461,   462,     0,   463,   464,   465,   466,   467,   965,   966,
       0,   470,   967,   472,     0,   473,   474,   475,   476,     0,
       0,     0,   477,     0,    43,   478,   479,   480,   481,   482,
     483,   968,   969,   970,   971,   972,   973,   974,   975,   976,
     977,   978,   495,   496,   497,   498,     0,     0,    44,   897,
    1469,   635,     0,     0,     0,  1057,     0,     0,     0,     0,
       0,     0,   663,     0,     0,     0,     0,     0,   113,   114,
     115,   116,     0,   117,   118,   119,   120,     0,   121,   122,
     123,     0,     0,     0,   898,     0,     0,     0,     0,     0,
     899,   125,   126,     0,   127,   128,   129,   900,   131,   132,
     133,   901,   902,   903,   904,   905,     0,   139,   140,   141,
     142,   143,   144,     0,     0,   145,   146,   906,   907,   149,
       0,   150,   151,   152,   153,   908,     0,   909,     0,   910,
     157,   158,   159,   160,   161,   911,   163,   164,   165,     0,
     166,   167,   168,   169,   170,     0,     0,   912,   172,   173,
     174,   175,   176,   177,   178,   179,   180,   181,   913,   914,
     184,     0,   185,     0,   186,   187,   188,   189,   190,   191,
       0,   192,     0,   193,   194,   195,   196,     0,     0,   197,
     198,   199,   200,   201,     0,     0,     0,   202,   203,   204,
       0,   205,   206,   207,     0,   208,   209,   210,   211,   915,
     213,   214,   215,   216,   217,   916,  1470,   219,     0,   220,
     221,   917,   223,     0,   224,     0,   225,   918,     0,   919,
     228,   229,   920,   921,   232,     0,   233,     0,     0,     0,
     922,   923,     0,   236,     0,   237,   238,   239,   240,   241,
     242,   243,   924,   245,   246,   247,   248,     0,   249,   250,
     251,   252,   253,   254,   255,     0,   256,   925,   926,   259,
     260,   261,   262,   263,   927,   928,     0,   929,     0,   267,
     930,   931,   270,   932,   272,     0,   273,   274,   275,   276,
     277,     0,     0,   278,   933,   280,   934,     0,   282,   283,
     284,   285,   286,   287,   288,   289,   935,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   936,   937,   938,   312,   313,
     314,     0,   939,     0,   316,   317,   940,   319,     0,   941,
     321,   942,   323,   324,   325,     0,   326,   327,  1471,     0,
     328,   329,   330,     0,     0,   331,   943,   944,   334,   945,
     946,   337,   338,   339,   340,   341,   342,   343,   344,   345,
       0,     0,   346,     0,     0,     0,     0,   347,   348,   947,
     948,   351,   352,   949,   354,   355,   356,     0,   357,   358,
     359,   360,   361,     0,     0,   362,     0,   363,   364,   365,
     950,   367,   368,   369,   370,     0,   371,   372,   373,     0,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
       0,   384,   385,   951,   387,   388,   389,   952,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,     0,
     953,   402,   403,   404,   405,   406,   407,   954,   409,   410,
       0,   411,   955,     0,   413,   956,   415,     0,     0,   416,
     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
     427,   957,   429,   958,   431,     0,   432,   433,     0,   434,
     959,   436,   437,   438,   439,   440,     0,   960,   961,     0,
       0,     0,   443,   444,   962,   446,   963,  1472,   448,   449,
     964,   451,   452,   453,   454,   455,     0,     0,   456,   457,
     458,     0,   459,   460,   461,   462,     0,   463,   464,   465,
     466,   467,  1313,   966,     0,   470,   967,   472,     0,   473,
     474,   475,   476,     0,     0,     0,   477,     0,     0,   478,
     479,   480,   481,   482,   483,   968,   969,   970,   971,   972,
     973,   974,   975,   976,   977,   978,   495,   496,   497,   498,
     112,     0,   529,     0,     0,     0,     0,  1473,  1474,  2356,
       0,     0,     0,     0,     0,     0,  2357,     0,     0,   113,
     114,   115,   116,     0,   117,   118,   119,   120,     0,   121,
     122,   123,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   124,   125,   126,     0,   127,   128,   129,   130,   131,
     132,   133,   134,   135,   136,   137,   138,     0,   139,   140,
     141,   142,   143,   144,     0,   604,   145,   146,   147,   148,
     149,     0,   150,   151,   152,   153,   605,     0,   606,     0,
     156,   157,   158,   159,   160,   161,   162,   163,   164,   165,
       0,   166,   167,   168,   169,   170,     0,     0,   171,   172,
     173,   174,   175,   176,   177,   178,   179,   180,   181,   182,
     183,   184,     0,   185,     0,   186,   187,   188,   189,   190,
     191,     0,   192,     0,   193,   194,   195,   196,     0,     0,
     197,   198,   199,   200,   201,     0,     0,     0,   202,   203,
     204,     0,   205,   206,   207,     0,   208,   209,   210,   211,
     212,   213,   214,   215,   216,   217,   607,     0,   219,     0,
     220,   221,   222,   223,     0,   224,     0,   225,   226,     0,
     227,   228,   229,   230,   231,   232,     0,   233,     0,   608,
       0,   234,   235,     0,   236,     0,   237,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,     0,   249,
     250,   251,   252,   253,   254,   255,     0,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,     0,   266,     0,
     267,   268,   269,   270,   271,   272,     0,   273,   274,   275,
     276,   277,   609,     0,   278,   279,   280,   281,     0,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,     0,   315,     0,   316,   317,   318,   319,     0,
     610,   321,   322,   323,   324,   325,     0,   326,   327,     0,
     611,   328,   329,   330,     0,     0,   331,   332,   333,   334,
     335,   612,   337,   338,   339,   340,   341,   342,   343,   344,
     345,     0,     0,   346,     0,     0,     0,     0,   347,   348,
     613,   350,   351,   352,   353,   354,   355,   356,     0,   357,
     358,   359,   360,   361,     0,     0,   362,     0,   363,   364,
     365,   366,   367,   368,   369,   370,     0,   371,   372,   373,
       0,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,     0,   384,   385,   386,   387,   388,   389,   390,   614,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
       0,     0,   402,   403,   404,   405,   406,   407,   408,   409,
     410,     0,   411,   412,     0,   413,   414,   415,     0,     0,
     416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,   428,   429,   615,   431,     0,   432,   433,     0,
     434,   435,   436,   437,   438,   439,   440,     0,   441,   442,
       0,     0,     0,   443,   444,   616,   446,   617,     0,   448,
     449,   618,   451,   452,   453,   454,   455,     0,     0,   456,
     457,   458,     0,   459,   460,   461,   462,     0,   463,   464,
     465,   466,   467,   619,   469,     0,   470,   471,   472,     0,
     473,   474,   475,   476,     0,     0,     0,   477,     0,     0,
     478,   479,   480,   481,   482,   483,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,   112,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   620,     0,     0,
     113,   114,   115,   116,     0,   117,   118,   119,   120,     0,
     121,   122,   123,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   124,   125,   126,     0,   127,   128,   129,   130,
     131,   132,   133,   134,   135,   136,   137,   138,     0,   139,
     140,   141,   142,   143,   144,     0,   604,   145,   146,   147,
     148,   149,     0,   150,   151,   152,   153,   605,     0,   606,
       0,   156,   157,   158,   159,   160,   161,   162,   163,   164,
     165,     0,   166,   167,   168,   169,   170,     0,     0,   171,
     172,   173,   174,   175,   176,   177,   178,   179,   180,   181,
     182,   183,   184,     0,   185,     0,   186,   187,   188,   189,
     190,   191,     0,   192,     0,   193,   194,   195,   196,     0,
       0,   197,   198,   199,   200,   201,     0,     0,     0,   202,
     203,   204,     0,   205,   206,   207,     0,   208,   209,   210,
     211,   212,   213,   214,   215,   216,   217,   607,     0,   219,
       0,   220,   221,   222,   223,     0,   224,     0,   225,   226,
       0,   227,   228,   229,   230,   231,   232,     0,   233,     0,
       0,     0,   234,   235,     0,   236,     0,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,     0,
     249,   250,   251,   252,   253,   254,   255,     0,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,     0,   266,
       0,   267,   268,   269,   270,   271,   272,     0,   273,   274,
     275,   276,   277,     0,     0,   278,   279,   280,   281,     0,
     282,   283,   284,   285,   286,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,     0,   315,     0,   316,   317,   318,   319,
       0,   610,   321,   322,   323,   324,   325,     0,   326,   327,
       0,     0,   328,   329,   330,     0,     0,   331,   332,   333,
     334,   335,   612,   337,   338,   339,   340,   341,   342,   343,
     344,   345,     0,     0,   346,     0,     0,     0,     0,   347,
     348,   613,   350,   351,   352,   353,   354,   355,   356,     0,
     357,   358,   359,   360,   361,     0,     0,   362,     0,   363,
     364,   365,   366,   367,   368,   369,   370,     0,   371,   372,
     373,     0,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,     0,   384,   385,   386,   387,   388,   389,   390,
     614,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,     0,     0,   402,   403,   404,   405,   406,   407,   408,
     409,   410,     0,   411,   412,     0,   413,   414,   415,     0,
       0,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   615,   431,     0,   432,   433,
       0,   434,   435,   436,   437,   438,   439,   440,     0,   441,
     442,     0,     0,     0,   443,   444,   616,   446,   617,     0,
     448,   449,   618,   451,   452,   453,   454,   455,     0,     0,
     456,   457,   458,     0,   459,   460,   461,   462,     0,   463,
     464,   465,   466,   467,   468,   469,     0,   470,   471,   472,
       0,   473,   474,   475,   476,     0,     0,     0,   477,     0,
       0,   478,   479,   480,   481,   482,   483,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,   498,   112,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   663,     0,
       0,   113,   114,   115,   116,     0,   117,   118,   119,   120,
       0,   121,   122,   123,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   124,   125,   126,     0,   127,   128,   129,
     130,   131,   132,   133,   134,   135,   136,   137,   138,     0,
     139,   140,   141,   142,   143,   144,     0,   604,   145,   146,
     147,   148,   149,     0,   150,   151,   152,   153,   605,     0,
     606,     0,   156,   157,   158,   159,   160,   161,   162,   163,
     164,   165,     0,   166,   167,   168,   169,   170,     0,     0,
     171,   172,   173,   174,   175,   176,   177,   178,   179,   180,
     181,   182,   183,   184,     0,   185,     0,   186,   187,   188,
     189,   190,   191,     0,   192,     0,   193,   194,   195,   196,
       0,     0,   197,   198,   199,   200,   201,     0,     0,     0,
     202,   203,   204,     0,   205,   206,   207,     0,   208,   209,
     210,   211,   212,   213,   214,   215,   216,   217,   607,     0,
     219,     0,   220,   221,   222,   223,     0,   224,     0,   225,
     226,     0,   227,   228,   229,   230,   231,   232,     0,   233,
       0,     0,     0,   234,   235,     0,   236,     0,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
       0,   249,   250,   251,   252,   253,   254,   255,     0,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,     0,
     266,     0,   267,   268,   269,   270,   271,   272,     0,   273,
     274,   275,   276,   277,     0,     0,   278,   279,   280,   281,
       0,   282,   283,   284,   285,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,     0,   315,     0,   316,   317,   318,
     319,     0,   610,   321,   322,   323,   324,   325,     0,   326,
     327,     0,     0,   328,   329,   330,     0,     0,   331,   332,
     333,   334,   335,   612,   337,   338,   339,   340,   341,   342,
     343,   344,   345,     0,     0,   346,     0,     0,     0,     0,
     347,   348,   613,   350,   351,   352,   353,   354,   355,   356,
       0,   357,   358,   359,   360,   361,     0,     0,   362,     0,
     363,   364,   365,   366,   367,   368,   369,   370,     0,   371,
     372,   373,     0,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,     0,   384,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,     0,     0,   402,   403,   404,   405,   406,   407,
     408,   409,   410,     0,   411,   412,     0,   413,   414,   415,
       0,     0,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,   428,   429,   615,   431,     0,   432,
     433,     0,   434,   435,   436,   437,   438,   439,   440,     0,
     441,   442,     0,     0,     0,   443,   444,   616,   446,   617,
       0,   448,   449,   618,   451,   452,   453,   454,   455,     0,
       0,   456,   457,   458,     0,   459,   460,   461,   462,     0,
     463,   464,   465,   466,   467,   468,   469,     0,   470,   471,
     472,     0,   473,   474,   475,   476,     0,     0,     0,   477,
       0,     0,   478,   479,   480,   481,   482,   483,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,   498,   506,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  3432,
       0,     0,   113,   114,   115,   116,     0,   117,   118,   119,
     120,   760,   121,   122,   123,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   125,   126,     0,   127,   128,
     129,     0,   131,   132,   133,   134,   135,     0,   137,   138,
       0,   139,   140,   141,   142,   143,   144,     0,     0,   145,
     146,   147,   148,   149,     0,   150,   151,   152,   153,   154,
       0,     0,     0,   156,   157,   158,   159,   160,   161,     0,
     163,   164,   165,     0,   166,   167,   168,   169,   170,     0,
       0,     0,   172,   173,   174,   175,   176,   177,   178,   179,
     180,   181,   182,   183,   184,     0,   185,     0,   186,   187,
     188,   189,   190,   191,     0,   192,     0,   193,   194,   195,
     196,     0,     0,   197,   198,   199,   200,   201,     0,     0,
       0,   202,   203,   204,     0,   205,   206,   207,     0,   208,
     209,   210,   211,   212,   213,   214,   215,   216,   217,   218,
       0,   219,     0,   220,   221,   222,   223,     0,   224,     0,
     225,     0,    21,     0,   228,   229,   507,     0,   232,     0,
     233,     0,     0,     0,   234,   235,     0,   236,     0,   237,
     238,   239,   240,   241,   242,   243,     0,   245,   246,   247,
     248,     0,   249,   250,   251,   252,   253,   254,   255,     0,
     256,     0,   258,   259,   260,   261,   262,   263,   264,   265,
       0,   266,     0,   267,     0,     0,   270,     0,   272,     0,
     273,   274,   275,   276,   277,     0,     0,   278,     0,   280,
       0,     0,   282,   283,   284,   285,   286,   287,   288,   289,
     508,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
       0,   311,   312,   313,   314,     0,   315,     0,   316,   317,
       0,   319,     0,   320,   321,   322,   323,   324,   325,     0,
     326,   327,     0,     0,   328,   329,   330,     0,     0,   331,
     332,     0,   334,     0,   336,   337,   338,   339,   340,   341,
     342,   343,   344,   345,     0,     0,   346,    25,    26,    27,
       0,   347,   348,   349,     0,   351,   352,   353,   354,   355,
     356,     0,   357,   358,   359,   360,   361,     0,     0,   362,
       0,   363,   364,   365,   366,   367,   368,   369,   370,     0,
     371,   372,   373,     0,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,     0,   384,   385,     0,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,    32,     0,   402,   403,   404,   405,   406,
     407,   408,   409,   410,     0,   411,     0,     0,   413,   414,
     415,     0,     0,   416,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,   427,   509,   429,   430,   431,     0,
     432,   433,    37,   434,     0,   436,   437,   438,   439,   440,
       0,   761,   442,     0,     0,     0,   762,   444,   445,   446,
     447,     0,   448,   449,   450,   451,   452,   453,   454,   455,
       0,     0,   456,   457,   458,    39,   459,   460,   461,   462,
       0,   463,   464,   465,   466,   467,   619,   469,     0,   470,
       0,   472,     0,   473,   474,   475,   476,     0,     0,     0,
     477,     0,    43,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   506,     0,    44,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     663,     0,     0,   113,   114,   115,   116,     0,   117,   118,
     119,   120,     0,   121,   122,   123,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   125,   126,     0,   127,
     128,   129,     0,   131,   132,   133,   134,   135,     0,   137,
     138,     0,   139,   140,   141,   142,   143,   144,     0,     0,
     145,   146,   147,   148,   149,     0,   150,   151,   152,   153,
     154,     0,     0,     0,   156,   157,   158,   159,   160,   161,
       0,   163,   164,   165,     0,   166,   167,   168,   169,   170,
       0,     0,     0,   172,   173,   174,   175,   176,   177,   178,
     179,   180,   181,   182,   183,   184,     0,   185,     0,   186,
     187,   188,   189,   190,   191,     0,   192,     0,   193,   194,
     195,   196,     0,     0,   197,   198,   199,   200,   201,     0,
       0,     0,   202,   203,   204,     0,   205,   206,   207,     0,
     208,   209,   210,   211,   212,   213,   214,   215,   216,   217,
     218,     0,   219,     0,   220,   221,   222,   223,     0,   224,
       0,   225,     0,    21,     0,   228,   229,   507,     0,   232,
       0,   233,     0,     0,     0,   234,   235,     0,   236,     0,
     237,   238,   239,   240,   241,   242,   243,     0,   245,   246,
     247,   248,     0,   249,   250,   251,   252,   253,   254,   255,
       0,   256,     0,   258,   259,   260,   261,   262,   263,   264,
     265,     0,   266,     0,   267,     0,     0,   270,     0,   272,
       0,   273,   274,   275,   276,   277,     0,     0,   278,     0,
     280,     0,     0,   282,   283,   284,   285,   286,   287,   288,
     289,   508,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,     0,   311,   312,   313,   314,     0,   315,     0,   316,
     317,     0,   319,     0,   320,   321,   322,   323,   324,   325,
       0,   326,   327,     0,     0,   328,   329,   330,     0,     0,
     331,   332,     0,   334,     0,   336,   337,   338,   339,   340,
     341,   342,   343,   344,   345,     0,     0,   346,    25,    26,
      27,     0,   347,   348,   349,     0,   351,   352,   353,   354,
     355,   356,     0,   357,   358,   359,   360,   361,     0,     0,
     362,     0,   363,   364,   365,   366,   367,   368,   369,   370,
       0,   371,   372,   373,     0,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,     0,   384,   385,     0,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,    32,     0,   402,   403,   404,   405,
     406,   407,   408,   409,   410,     0,   411,     0,     0,   413,
     414,   415,     0,     0,   416,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,   509,   429,   430,   431,
       0,   432,   433,    37,   434,     0,   436,   437,   438,   439,
     440,     0,   441,   442,     0,     0,     0,   443,   444,   445,
     446,   447,     0,   448,   449,   450,   451,   452,   453,   454,
     455,     0,     0,   456,   457,   458,    39,   459,   460,   461,
     462,     0,   463,   464,   465,   466,   467,   619,   469,     0,
     470,     0,   472,     0,   473,   474,   475,   476,     0,     0,
       0,   477,     0,    43,   478,   479,   480,   481,   482,   483,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,   682,     0,    44,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   663,     0,     0,   113,   114,   115,   116,     0,   117,
     118,   119,   120,     0,   121,   122,   123,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   125,   126,     0,
     127,   128,   129,     0,   131,   132,   133,   683,   684,     0,
     685,   686,     0,   139,   140,   141,   142,   143,   144,     0,
       0,   145,   146,   687,   688,   149,     0,   150,   151,   152,
     153,   689,     0,     0,     0,     0,   157,   158,   159,   160,
     161,     0,   163,   164,   165,     0,   166,   167,   168,   169,
     170,     0,     0,     0,   172,   173,   174,   175,   176,   177,
     178,   179,   180,   181,   690,   691,   184,     0,   185,     0,
     186,   187,   188,   189,   190,   191,     0,   192,     0,   193,
     194,   195,   196,     0,     0,   197,   198,   199,   200,   201,
       0,     0,     0,   202,   203,   204,     0,   205,   206,   207,
       0,   208,   209,   210,   211,   692,   213,   214,   215,   216,
     217,   693,     0,   219,     0,   220,   221,   694,   223,     0,
     224,     0,   225,     0,    21,     0,   228,   229,   695,     0,
     232,     0,   233,     0,     0,     0,   696,   697,     0,   236,
       0,   237,   238,   239,   240,   241,   242,   243,     0,   245,
     246,   247,   248,     0,   249,   250,   251,   252,   253,   254,
     255,     0,   256,     0,   698,   259,   260,   261,   262,   263,
     699,   700,     0,   701,     0,   267,     0,     0,   270,     0,
     272,     0,   273,   274,   275,   276,   277,     0,     0,   278,
       0,   280,     0,     0,   282,   283,   284,   285,   286,   287,
     288,   289,   702,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   703,     0,   704,   312,   313,   314,     0,   705,     0,
     316,   317,     0,   319,     0,   706,   321,   707,   323,   324,
     325,     0,   326,   327,     0,     0,   328,   329,   330,     0,
       0,   331,   708,     0,   334,     0,   709,   337,   338,   339,
     340,   341,   342,   343,   344,   345,     0,     0,   346,    25,
      26,    27,     0,   347,   348,   710,     0,   351,   352,   711,
     354,   355,   356,     0,   357,   358,   359,   360,   361,     0,
       0,   362,     0,   363,   364,   365,   712,   367,   368,   369,
     370,     0,   371,   372,   373,     0,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,     0,   384,   385,     0,
     387,   388,   389,   713,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,    32,     0,   402,   403,   404,
     405,   406,   407,   714,   409,   410,     0,   411,     0,     0,
     413,   715,   415,     0,     0,   416,   417,   418,   419,   420,
     421,   422,   423,   424,   425,   426,   427,   716,   429,   717,
     431,     0,   432,   433,    37,   434,     0,   436,   437,   438,
     439,   440,     0,   718,   719,     0,     0,     0,   443,   444,
     720,   446,   721,     0,   448,   449,   722,   451,   452,   453,
     454,   455,     0,     0,   456,   457,   458,    39,   459,   460,
     461,   462,     0,   463,   464,   465,   466,   467,   723,   724,
       0,   470,     0,   472,     0,   473,   474,   475,   476,     0,
       0,     0,   477,     0,    43,   478,   479,   480,   481,   482,
     483,   725,   726,   727,   728,   729,   730,   731,   732,   733,
     734,   735,   495,   496,   497,   498,     0,   506,    44,   529,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   663,     0,     0,     0,   113,   114,   115,   116,
       0,   117,   118,   119,   120,     0,   121,   122,   123,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   125,
     126,     0,   127,   128,   129,     0,   131,   132,   133,   134,
     135,     0,   137,   138,     0,   139,   140,   141,   142,   143,
     144,     0,     0,   145,   146,   147,   148,   149,     0,   150,
     151,   152,   153,   154,     0,     0,     0,   156,   157,   158,
     159,   160,   161,     0,   163,   164,   165,     0,   166,   167,
     168,   169,   170,     0,     0,     0,   172,   173,   174,   175,
     176,   177,   178,   179,   180,   181,   182,   183,   184,     0,
     185,     0,   186,   187,   188,   189,   190,   191,     0,   192,
       0,   193,   194,   195,   196,     0,     0,   197,   198,   199,
     200,   201,     0,     0,     0,   202,   203,   204,     0,   205,
     206,   207,     0,   208,   209,   210,   211,   212,   213,   214,
     215,   216,   217,   218,     0,   219,     0,   220,   221,   222,
     223,     0,   224,     0,   225,     0,     0,     0,   228,   229,
     507,     0,   232,     0,   233,     0,     0,     0,   234,   235,
       0,   236,     0,   237,   238,   239,   240,   241,   242,   243,
       0,   245,   246,   247,   248,     0,   249,   250,   251,   252,
     253,   254,   255,     0,   256,     0,   258,   259,   260,   261,
     262,   263,   264,   265,     0,   266,     0,   267,     0,     0,
     270,     0,   272,     0,   273,   274,   275,   276,   277,     0,
       0,   278,     0,   280,     0,     0,   282,   283,   284,   285,
     286,   287,   288,   289,   508,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,     0,   311,   312,   313,   314,     0,
     315,     0,   316,   317,     0,   319,     0,   320,   321,   322,
     323,   324,   325,     0,   326,   327,     0,     0,   328,   329,
     330,     0,     0,   331,   332,     0,   334,     0,   336,   337,
     338,   339,   340,   341,   342,   343,   344,   345,     0,     0,
     346,     0,     0,     0,     0,   347,   348,   349,     0,   351,
     352,   353,   354,   355,   356,     0,   357,   358,   359,   360,
     361,     0,     0,   362,     0,   363,   364,   365,   366,   367,
     368,   369,   370,     0,   371,   372,   373,     0,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,     0,   384,
     385,     0,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,     0,     0,   402,
     403,   404,   405,   406,   407,   408,   409,   410,     0,   411,
       0,     0,   413,   414,   415,     0,     0,   416,   417,   418,
     419,   420,   421,   422,   423,   424,   425,   426,   427,   509,
     429,   430,   431,     0,   432,   433,     0,   434,     0,   436,
     437,   438,   439,   440,     0,   441,   442,     0,     0,     0,
     443,   444,   445,   446,   447,     0,   448,   449,   450,   451,
     452,   453,   454,   455,     0,     0,   456,   457,   458,     0,
     459,   460,   461,   462,     0,   463,   464,   465,   466,   467,
     468,   469,     0,   470,     0,   472,     0,   473,   474,   475,
     476,     0,     0,     0,   477,     0,     0,   478,   479,   480,
     481,   482,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,   506,     0,
     529,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1000,     0,     0,   113,   114,   115,
     116,     0,   117,   118,   119,   120,     0,   121,   122,   123,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     125,   126,     0,   127,   128,   129,     0,   131,   132,   133,
     134,   135,     0,   137,   138,     0,   139,   140,   141,   142,
     143,   144,     0,     0,   145,   146,   147,   148,   149,     0,
     150,   151,   152,   153,   154,     0,     0,     0,   156,   157,
     158,   159,   160,   161,     0,   163,   164,   165,     0,   166,
     167,   168,   169,   170,     0,     0,     0,   172,   173,   174,
     175,   176,   177,   178,   179,   180,   181,   182,   183,   184,
       0,   185,     0,   186,   187,   188,   189,   190,   191,     0,
     192,     0,   193,   194,   195,   196,     0,     0,   197,   198,
     199,   200,   201,     0,     0,     0,   202,   203,   204,     0,
     205,   206,   207,     0,   208,   209,   210,   211,   212,   213,
     214,   215,   216,   217,   218,     0,   219,     0,   220,   221,
     222,   223,     0,   224,     0,   225,     0,     0,     0,   228,
     229,   507,     0,   232,     0,   233,     0,     0,     0,   234,
     235,     0,   236,     0,   237,   238,   239,   240,   241,   242,
     243,     0,   245,   246,   247,   248,     0,   249,   250,   251,
     252,   253,   254,   255,     0,   256,     0,   258,   259,   260,
     261,   262,   263,   264,   265,     0,   266,     0,   267,     0,
       0,   270,     0,   272,     0,   273,   274,   275,   276,   277,
       0,     0,   278,     0,   280,     0,     0,   282,   283,   284,
     285,   286,   287,   288,   289,   508,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,     0,   311,   312,   313,   314,
       0,   315,     0,   316,   317,     0,   319,     0,   320,   321,
     322,   323,   324,   325,     0,   326,   327,     0,     0,   328,
     329,   330,     0,     0,   331,   332,     0,   334,     0,   336,
     337,   338,   339,   340,   341,   342,   343,   344,   345,     0,
       0,   346,     0,     0,     0,     0,   347,   348,   349,     0,
     351,   352,   353,   354,   355,   356,     0,   357,   358,   359,
     360,   361,     0,     0,   362,     0,   363,   364,   365,   366,
     367,   368,   369,   370,     0,   371,   372,   373,     0,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,     0,
     384,   385,     0,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,     0,     0,
     402,   403,   404,   405,   406,   407,   408,   409,   410,     0,
     411,     0,     0,   413,   414,   415,     0,     0,   416,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     509,   429,   430,   431,     0,   432,   433,     0,   434,     0,
     436,   437,   438,   439,   440,     0,   441,   442,     0,     0,
       0,   443,   444,   445,   446,   447,     0,   448,   449,   450,
     451,   452,   453,   454,   455,     0,     0,   456,   457,   458,
       0,   459,   460,   461,   462,     0,   463,   464,   465,   466,
     467,   468,   469,     0,   470,     0,   472,     0,   473,   474,
     475,   476,     0,     0,     0,   477,     0,     0,   478,   479,
     480,   481,   482,   483,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,   498,   506,
       0,   529,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1562,     0,     0,   113,   114,
     115,   116,     0,   117,   118,   119,   120,     0,   121,   122,
     123,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   125,   126,     0,   127,   128,   129,     0,   131,   132,
     133,   134,   135,     0,   137,   138,     0,   139,   140,   141,
     142,   143,   144,     0,     0,   145,   146,   147,   148,   149,
       0,   150,   151,   152,   153,   154,     0,     0,     0,   156,
     157,   158,   159,   160,   161,     0,   163,   164,   165,     0,
     166,   167,   168,   169,   170,     0,     0,     0,   172,   173,
     174,   175,   176,   177,   178,   179,   180,   181,   182,   183,
     184,     0,   185,     0,   186,   187,   188,   189,   190,   191,
       0,   192,     0,   193,   194,   195,   196,     0,     0,   197,
     198,   199,   200,   201,     0,     0,     0,   202,   203,   204,
       0,   205,   206,   207,     0,   208,   209,   210,   211,   212,
     213,   214,   215,   216,   217,   218,     0,   219,     0,   220,
     221,   222,   223,     0,   224,     0,   225,     0,     0,     0,
     228,   229,   507,     0,   232,     0,   233,     0,     0,     0,
     234,   235,     0,   236,     0,   237,   238,   239,   240,   241,
     242,   243,     0,   245,   246,   247,   248,     0,   249,   250,
     251,   252,   253,   254,   255,     0,   256,     0,   258,   259,
     260,   261,   262,   263,   264,   265,     0,   266,     0,   267,
       0,     0,   270,     0,   272,     0,   273,   274,   275,   276,
     277,     0,     0,   278,     0,   280,     0,     0,   282,   283,
     284,   285,   286,   287,   288,   289,   508,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,     0,   311,   312,   313,
     314,     0,   315,     0,   316,   317,     0,   319,     0,   320,
     321,   322,   323,   324,   325,     0,   326,   327,     0,     0,
     328,   329,   330,     0,     0,   331,   332,     0,   334,     0,
     336,   337,   338,   339,   340,   341,   342,   343,   344,   345,
       0,     0,   346,     0,     0,     0,     0,   347,   348,   349,
       0,   351,   352,   353,   354,   355,   356,     0,   357,   358,
     359,   360,   361,     0,     0,   362,     0,   363,   364,   365,
     366,   367,   368,   369,   370,     0,   371,   372,   373,     0,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
       0,   384,   385,     0,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,     0,
       0,   402,   403,   404,   405,   406,   407,   408,   409,   410,
       0,   411,     0,     0,   413,   414,   415,     0,     0,   416,
     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
     427,   509,   429,   430,   431,     0,   432,   433,     0,   434,
       0,   436,   437,   438,   439,   440,     0,   441,   442,     0,
       0,     0,   443,   444,   445,   446,   447,     0,   448,   449,
     450,   451,   452,   453,   454,   455,     0,     0,   456,   457,
     458,     0,   459,   460,   461,   462,     0,   463,   464,   465,
     466,   467,   468,   469,     0,   470,     0,   472,     0,   473,
     474,   475,   476,     0,     0,     0,   477,     0,     0,   478,
     479,   480,   481,   482,   483,   484,   485,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
     506,     0,   529,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  2196,     0,     0,   113,
     114,   115,   116,     0,   117,   118,   119,   120,     0,   121,
     122,   123,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   125,   126,     0,   127,   128,   129,     0,   131,
     132,   133,   134,   135,     0,   137,   138,     0,   139,   140,
     141,   142,   143,   144,     0,     0,   145,   146,   147,   148,
     149,     0,   150,   151,   152,   153,   154,     0,     0,     0,
     156,   157,   158,   159,   160,   161,     0,   163,   164,   165,
       0,   166,   167,   168,   169,   170,     0,     0,     0,   172,
     173,   174,   175,   176,   177,   178,   179,   180,   181,   182,
     183,   184,     0,   185,     0,   186,   187,   188,   189,   190,
     191,     0,   192,     0,   193,   194,   195,   196,     0,     0,
     197,   198,   199,   200,   201,     0,     0,     0,   202,   203,
     204,     0,   205,   206,   207,     0,   208,   209,   210,   211,
     212,   213,   214,   215,   216,   217,   218,     0,   219,     0,
     220,   221,   222,   223,     0,   224,     0,   225,     0,     0,
       0,   228,   229,   507,     0,   232,     0,   233,     0,     0,
       0,   234,   235,     0,   236,     0,   237,   238,   239,   240,
     241,   242,   243,     0,   245,   246,   247,   248,     0,   249,
     250,   251,   252,   253,   254,   255,     0,   256,     0,   258,
     259,   260,   261,   262,   263,   264,   265,     0,   266,     0,
     267,     0,     0,   270,     0,   272,     0,   273,   274,   275,
     276,   277,     0,     0,   278,     0,   280,     0,     0,   282,
     283,   284,   285,   286,   287,   288,   289,   508,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,     0,   311,   312,
     313,   314,     0,   315,     0,   316,   317,     0,   319,     0,
     320,   321,   322,   323,   324,   325,     0,   326,   327,     0,
       0,   328,   329,   330,     0,     0,   331,   332,     0,   334,
       0,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,     0,     0,   346,     0,     0,     0,     0,   347,   348,
     349,     0,   351,   352,   353,   354,   355,   356,     0,   357,
     358,   359,   360,   361,     0,     0,   362,     0,   363,   364,
     365,   366,   367,   368,   369,   370,     0,   371,   372,   373,
       0,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,     0,   384,   385,     0,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
       0,     0,   402,   403,   404,   405,   406,   407,   408,   409,
     410,     0,   411,     0,     0,   413,   414,   415,     0,     0,
     416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,   509,   429,   430,   431,     0,   432,   433,     0,
     434,     0,   436,   437,   438,   439,   440,     0,   441,   442,
       0,     0,     0,   443,   444,   445,   446,   447,     0,   448,
     449,   450,   451,   452,   453,   454,   455,     0,     0,   456,
     457,   458,     0,   459,   460,   461,   462,     0,   463,   464,
     465,   466,   467,   468,   469,     0,   470,     0,   472,     0,
     473,   474,   475,   476,     0,     0,     0,   477,     0,     0,
     478,   479,   480,   481,   482,   483,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,   506,     0,   529,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  2440,     0,     0,
     113,   114,   115,   116,     0,   117,   118,   119,   120,     0,
     121,   122,   123,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   125,   126,     0,   127,   128,   129,     0,
     131,   132,   133,   134,   135,     0,   137,   138,     0,   139,
     140,   141,   142,   143,   144,     0,     0,   145,   146,   147,
     148,   149,     0,   150,   151,   152,   153,   154,     0,     0,
       0,   156,   157,   158,   159,   160,   161,     0,   163,   164,
     165,     0,   166,   167,   168,   169,   170,     0,     0,     0,
     172,   173,   174,   175,   176,   177,   178,   179,   180,   181,
     182,   183,   184,     0,   185,     0,   186,   187,   188,   189,
     190,   191,     0,   192,     0,   193,   194,   195,   196,     0,
       0,   197,   198,   199,   200,   201,     0,     0,     0,   202,
     203,   204,     0,   205,   206,   207,     0,   208,   209,   210,
     211,   212,   213,   214,   215,   216,   217,   218,     0,   219,
       0,   220,   221,   222,   223,     0,   224,     0,   225,     0,
       0,     0,   228,   229,   507,     0,   232,     0,   233,     0,
       0,     0,   234,   235,     0,   236,     0,   237,   238,   239,
     240,   241,   242,   243,     0,   245,   246,   247,   248,     0,
     249,   250,   251,   252,   253,   254,   255,     0,   256,     0,
     258,   259,   260,   261,   262,   263,   264,   265,     0,   266,
       0,   267,     0,     0,   270,     0,   272,     0,   273,   274,
     275,   276,   277,     0,     0,   278,     0,   280,     0,     0,
     282,   283,   284,   285,   286,   287,   288,   289,   508,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,     0,   311,
     312,   313,   314,     0,   315,     0,   316,   317,     0,   319,
       0,   320,   321,   322,   323,   324,   325,     0,   326,   327,
       0,     0,   328,   329,   330,     0,     0,   331,   332,     0,
     334,     0,   336,   337,   338,   339,   340,   341,   342,   343,
     344,   345,     0,     0,   346,     0,     0,     0,     0,   347,
     348,   349,     0,   351,   352,   353,   354,   355,   356,     0,
     357,   358,   359,   360,   361,     0,     0,   362,     0,   363,
     364,   365,   366,   367,   368,   369,   370,     0,   371,   372,
     373,     0,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,     0,   384,   385,     0,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,     0,     0,   402,   403,   404,   405,   406,   407,   408,
     409,   410,     0,   411,     0,     0,   413,   414,   415,     0,
       0,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   509,   429,   430,   431,     0,   432,   433,
       0,   434,     0,   436,   437,   438,   439,   440,     0,   441,
     442,     0,     0,     0,   443,   444,   445,   446,   447,     0,
     448,   449,   450,   451,   452,   453,   454,   455,     0,     0,
     456,   457,   458,     0,   459,   460,   461,   462,     0,   463,
     464,   465,   466,   467,   468,   469,     0,   470,     0,   472,
       0,   473,   474,   475,   476,     0,     0,     0,   477,     0,
       0,   478,   479,   480,   481,   482,   483,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,   498,   506,     0,   529,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  2578,     0,
       0,   113,   114,   115,   116,     0,   117,   118,   119,   120,
       0,   121,   122,   123,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   125,   126,     0,   127,   128,   129,
       0,   131,   132,   133,   134,   135,     0,   137,   138,     0,
     139,   140,   141,   142,   143,   144,     0,     0,   145,   146,
     147,   148,   149,     0,   150,   151,   152,   153,   154,     0,
       0,     0,   156,   157,   158,   159,   160,   161,     0,   163,
     164,   165,     0,   166,   167,   168,   169,   170,     0,     0,
       0,   172,   173,   174,   175,   176,   177,   178,   179,   180,
     181,   182,   183,   184,     0,   185,     0,   186,   187,   188,
     189,   190,   191,     0,   192,     0,   193,   194,   195,   196,
       0,     0,   197,   198,   199,   200,   201,     0,     0,     0,
     202,   203,   204,     0,   205,   206,   207,     0,   208,   209,
     210,   211,   212,   213,   214,   215,   216,   217,   218,     0,
     219,     0,   220,   221,   222,   223,     0,   224,     0,   225,
       0,     0,     0,   228,   229,   507,     0,   232,     0,   233,
       0,     0,     0,   234,   235,     0,   236,     0,   237,   238,
     239,   240,   241,   242,   243,     0,   245,   246,   247,   248,
       0,   249,   250,   251,   252,   253,   254,   255,     0,   256,
       0,   258,   259,   260,   261,   262,   263,   264,   265,     0,
     266,     0,   267,     0,     0,   270,     0,   272,     0,   273,
     274,   275,   276,   277,     0,     0,   278,     0,   280,     0,
       0,   282,   283,   284,   285,   286,   287,   288,   289,   508,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,     0,
     311,   312,   313,   314,     0,   315,     0,   316,   317,     0,
     319,     0,   320,   321,   322,   323,   324,   325,     0,   326,
     327,     0,     0,   328,   329,   330,     0,     0,   331,   332,
       0,   334,     0,   336,   337,   338,   339,   340,   341,   342,
     343,   344,   345,     0,     0,   346,     0,     0,     0,     0,
     347,   348,   349,     0,   351,   352,   353,   354,   355,   356,
       0,   357,   358,   359,   360,   361,     0,     0,   362,     0,
     363,   364,   365,   366,   367,   368,   369,   370,     0,   371,
     372,   373,     0,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,     0,   384,   385,     0,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,     0,     0,   402,   403,   404,   405,   406,   407,
     408,   409,   410,     0,   411,     0,     0,   413,   414,   415,
       0,     0,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,   509,   429,   430,   431,     0,   432,
     433,     0,   434,     0,   436,   437,   438,   439,   440,     0,
     441,   442,     0,     0,     0,   443,   444,   445,   446,   447,
       0,   448,   449,   450,   451,   452,   453,   454,   455,     0,
       0,   456,   457,   458,     0,   459,   460,   461,   462,     0,
     463,   464,   465,   466,   467,   468,   469,     0,   470,     0,
     472,     0,   473,   474,   475,   476,     0,     0,     0,   477,
       0,     0,   478,   479,   480,   481,   482,   483,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,   498,   506,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  3279,
       0,     0,   113,   114,   115,   116,     0,   117,   118,   119,
     120,     0,   121,   122,   123,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   125,   126,     0,   127,   128,
     129,     0,   131,   132,   133,   134,   135,     0,   137,   138,
       0,   139,   140,   141,   142,   143,   144,     0,     0,   145,
     146,   147,   148,   149,     0,   150,   151,   152,   153,   154,
       0,     0,     0,   156,   157,   158,   159,   160,   161,     0,
     163,   164,   165,     0,   166,   167,   168,   169,   170,     0,
       0,     0,   172,   173,   174,   175,   176,   177,   178,   179,
     180,   181,   182,   183,   184,     0,   185,     0,   186,   187,
     188,   189,   190,   191,     0,   192,     0,   193,   194,   195,
     196,     0,     0,   197,   198,   199,   200,   201,     0,     0,
       0,   202,   203,   204,     0,   205,   206,   207,     0,   208,
     209,   210,   211,   212,   213,   214,   215,   216,   217,   218,
       0,   219,     0,   220,   221,   222,   223,     0,   224,     0,
     225,     0,     0,     0,   228,   229,   507,     0,   232,     0,
     233,     0,     0,     0,   234,   235,     0,   236,     0,   237,
     238,   239,   240,   241,   242,   243,     0,   245,   246,   247,
     248,     0,   249,   250,   251,   252,   253,   254,   255,     0,
     256,     0,   258,   259,   260,   261,   262,   263,   264,   265,
       0,   266,     0,   267,     0,     0,   270,     0,   272,     0,
     273,   274,   275,   276,   277,     0,     0,   278,     0,   280,
       0,     0,   282,   283,   284,   285,   286,   287,   288,   289,
     508,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
       0,   311,   312,   313,   314,     0,   315,     0,   316,   317,
       0,   319,     0,   320,   321,   322,   323,   324,   325,     0,
     326,   327,     0,     0,   328,   329,   330,     0,     0,   331,
     332,     0,   334,     0,   336,   337,   338,   339,   340,   341,
     342,   343,   344,   345,     0,     0,   346,     0,     0,     0,
       0,   347,   348,   349,     0,   351,   352,   353,   354,   355,
     356,     0,   357,   358,   359,   360,   361,     0,     0,   362,
       0,   363,   364,   365,   366,   367,   368,   369,   370,     0,
     371,   372,   373,     0,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,     0,   384,   385,     0,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,     0,     0,   402,   403,   404,   405,   406,
     407,   408,   409,   410,     0,   411,     0,     0,   413,   414,
     415,     0,     0,   416,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,   427,   509,   429,   430,   431,     0,
     432,   433,     0,   434,     0,   436,   437,   438,   439,   440,
       0,   441,   442,     0,     0,     0,   443,   444,   445,   446,
     447,     0,   448,   449,   450,   451,   452,   453,   454,   455,
       0,     0,   456,   457,   458,     0,   459,   460,   461,   462,
       0,   463,   464,   465,   466,   467,   468,   469,     0,   470,
       0,   472,     0,   473,   474,   475,   476,     0,     0,     0,
     477,     0,     0,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   506,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    2048,     0,     0,   113,   114,   115,   116,     0,   117,   118,
     119,   120,     0,   121,   122,   123,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   125,   126,     0,   127,
     128,   129,     0,   131,   132,   133,   134,   135,     0,   137,
     138,     0,   139,   140,   141,   142,   143,   144,     0,     0,
     145,   146,   147,   148,   149,     0,   150,   151,   152,   153,
     154,     0,     0,     0,   156,   157,   158,   159,   160,   161,
       0,   163,   164,   165,     0,   166,   167,   168,   169,   170,
       0,     0,     0,   172,   173,   174,   175,   176,   177,   178,
     179,   180,   181,   182,   183,   184,     0,   185,     0,   186,
     187,   188,   189,   190,   191,     0,   192,     0,   193,   194,
     195,   196,     0,     0,   197,   198,   199,   200,   201,     0,
       0,     0,   202,   203,   204,     0,   205,   206,   207,     0,
     208,   209,   210,   211,   212,   213,   214,   215,   216,   217,
     218,     0,   219,     0,   220,   221,   222,   223,     0,   224,
       0,   225,     0,     0,     0,   228,   229,   507,     0,   232,
       0,   233,     0,     0,     0,   234,   235,     0,   236,     0,
     237,   238,   239,   240,   241,   242,   243,     0,   245,   246,
     247,   248,     0,   249,   250,   251,   252,   253,   254,   255,
       0,   256,     0,   258,   259,   260,   261,   262,   263,   264,
     265,     0,   266,     0,   267,     0,     0,   270,     0,   272,
       0,   273,   274,   275,   276,   277,     0,     0,   278,     0,
     280,     0,     0,   282,   283,   284,   285,   286,   287,   288,
     289,   508,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,     0,   311,   312,   313,   314,     0,   315,     0,   316,
     317,     0,   319,     0,   320,   321,   322,   323,   324,   325,
       0,   326,   327,     0,     0,   328,   329,   330,     0,     0,
     331,   332,     0,   334,     0,   336,   337,   338,   339,   340,
     341,   342,   343,   344,   345,     0,     0,   346,     0,     0,
       0,     0,   347,   348,   349,     0,   351,   352,   353,   354,
     355,   356,     0,   357,   358,   359,   360,   361,     0,     0,
     362,     0,   363,   364,   365,   366,   367,   368,   369,   370,
       0,   371,   372,   373,     0,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,     0,   384,   385,     0,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,     0,     0,   402,   403,   404,   405,
     406,   407,   408,   409,   410,     0,   411,     0,     0,   413,
     414,   415,     0,     0,   416,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,   509,   429,   430,   431,
       0,   432,   433,     0,   434,     0,   436,   437,   438,   439,
     440,     0,   441,   442,     0,     0,     0,   443,   444,   445,
     446,   447,     0,   448,   449,   450,   451,   452,   453,   454,
     455,     0,     0,   456,   457,   458,     0,   459,   460,   461,
     462,     0,   463,   464,   465,   466,   467,   468,   469,     0,
     470,     0,   472,     0,   473,   474,   475,   476,     0,     0,
       0,   477,     0,     0,   478,   479,   480,   481,   482,   483,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,   506,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  2156,     0,     0,   113,   114,   115,   116,     0,   117,
     118,   119,   120,     0,   121,   122,   123,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   125,   126,     0,
     127,   128,   129,     0,   131,   132,   133,   134,   135,     0,
     137,   138,     0,   139,   140,   141,   142,   143,   144,     0,
       0,   145,   146,   147,   148,   149,     0,   150,   151,   152,
     153,   154,     0,     0,     0,   156,   157,   158,   159,   160,
     161,     0,   163,   164,   165,     0,   166,   167,   168,   169,
     170,     0,     0,     0,   172,   173,   174,   175,   176,   177,
     178,   179,   180,   181,   182,   183,   184,     0,   185,     0,
     186,   187,   188,   189,   190,   191,     0,   192,     0,   193,
     194,   195,   196,     0,     0,   197,   198,   199,   200,   201,
       0,     0,     0,   202,   203,   204,     0,   205,   206,   207,
       0,   208,   209,   210,   211,   212,   213,   214,   215,   216,
     217,   218,     0,   219,     0,   220,   221,   222,   223,     0,
     224,     0,   225,     0,     0,     0,   228,   229,   507,     0,
     232,     0,   233,     0,     0,     0,   234,   235,     0,   236,
       0,   237,   238,   239,   240,   241,   242,   243,     0,   245,
     246,   247,   248,     0,   249,   250,   251,   252,   253,   254,
     255,     0,   256,     0,   258,   259,   260,   261,   262,   263,
     264,   265,     0,   266,     0,   267,     0,     0,   270,     0,
     272,     0,   273,   274,   275,   276,   277,     0,     0,   278,
       0,   280,     0,     0,   282,   283,   284,   285,   286,   287,
     288,   289,   508,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,     0,   311,   312,   313,   314,     0,   315,     0,
     316,   317,     0,   319,     0,   320,   321,   322,   323,   324,
     325,     0,   326,   327,     0,     0,   328,   329,   330,     0,
       0,   331,   332,     0,   334,     0,   336,   337,   338,   339,
     340,   341,   342,   343,   344,   345,     0,     0,   346,     0,
       0,     0,     0,   347,   348,   349,     0,   351,   352,   353,
     354,   355,   356,     0,   357,   358,   359,   360,   361,     0,
       0,   362,     0,   363,   364,   365,   366,   367,   368,   369,
     370,     0,   371,   372,   373,     0,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,     0,   384,   385,     0,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,     0,     0,   402,   403,   404,
     405,   406,   407,   408,   409,   410,     0,   411,     0,     0,
     413,   414,   415,     0,     0,   416,   417,   418,   419,   420,
     421,   422,   423,   424,   425,   426,   427,   509,   429,   430,
     431,     0,   432,   433,     0,   434,     0,   436,   437,   438,
     439,   440,     0,   441,   442,     0,     0,     0,   443,   444,
     445,   446,   447,     0,   448,   449,   450,   451,   452,   453,
     454,   455,     0,     0,   456,   457,   458,     0,   459,   460,
     461,   462,     0,   463,   464,   465,   466,   467,   468,   469,
       0,   470,     0,   472,     0,   473,   474,   475,   476,     0,
       0,     0,   477,     0,     0,   478,   479,   480,   481,   482,
     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,     0,  2919,  1469,   635,
       0,     0,  2028,  1057,     0,     0,     0,     0,     0,  2029,
    2030,     0,  3089,  2031,  2032,  2033,   113,   114,   115,   116,
       0,   117,   118,   119,   120,  1245,   121,   122,   123,  1246,
    1247,  1248,  2920,  1249,     0,  1250,  1251,  1252,  2921,   125,
     126,  1253,   127,   128,   129,  2922,   131,   132,   133,     0,
     815,  2923,   817,   818,  1254,   139,   140,   141,   142,   143,
     144,  1255,  1256,   145,   146,   819,   820,   149,  1257,   150,
     151,   152,   153,     0,  1258,  2924,  1259,  2925,   157,   158,
     159,   160,   161,  2926,   163,   164,   165,  1260,   166,   167,
     168,   169,   170,     0,  1261,  2927,   172,   173,   174,   175,
     176,   177,   178,   179,   180,   181,   825,   826,   184,  1262,
     185,  1263,   186,   187,   188,   189,   190,   191,  1264,   192,
       0,   193,   194,   195,   196,  1265,  1266,   197,   198,   827,
     200,   201,     0,     0,  1267,   202,   203,   204,  1268,   205,
     206,   207,  1269,   208,   209,   210,   211,     0,   213,   214,
     215,   216,   217,     0,  1270,   219,  1271,   220,   221,   828,
     223,  1272,   224,  1273,   225,  2928,  1274,  2929,   228,   229,
    2930,  2931,   232,  1275,   233,     0,  1276,  1277,     0,     0,
       0,   236,  1278,   237,   238,   239,   240,   241,   242,   243,
    2932,   245,   246,   247,   248,  1279,   249,   250,   251,   252,
     253,   254,   255,  1280,   256,  2933,     0,   259,   260,   261,
     262,   263,   835,   836,  1281,   837,  1282,   267,  2934,  2935,
     270,  2936,   272,     0,   273,   274,   275,   276,   277,  1283,
    1284,   278,  2937,   280,  2938,  1285,   282,   283,   284,   285,
     286,   287,   288,   289,  2939,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   844,  2940,   846,   312,   313,   314,     0,
    2941,  1286,   316,   317,  2942,   319,  1287,     0,   321,   848,
     323,   324,   325,  1288,   326,   327,  1289,  1290,  2943,   329,
     330,  1291,  1292,   331,     0,  2944,   334,  2945,     0,   337,
     338,   339,   340,   341,   342,   343,   344,   345,     0,     0,
     346,  1293,  1294,  1295,  1296,   347,   348,     0,  2946,   351,
     352,     0,   354,   355,   356,  1297,   357,   358,   359,   360,
     361,     0,     0,   362,  1298,   363,   364,   365,   852,   367,
     368,   369,   370,  1299,   371,   372,   373,     0,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,  1300,   384,
     385,  2947,   387,   388,   389,   854,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,  1301,  2948,   402,
     403,   404,   405,   406,   407,  2949,   409,   410,     0,   411,
    2950,     0,   413,   858,   415,  1302,     0,   416,   417,   418,
     419,   420,   421,   422,   423,   424,   425,   426,   427,  2951,
     429,     0,   431,  1303,   432,   433,  1304,   434,  2952,   436,
     437,   438,   439,   440,  1305,   861,   862,  1306,     0,  1307,
     443,   444,     0,   446,     0,  1308,   448,   449,  2953,   451,
     452,   453,   454,   455,  2954,  1310,   456,   457,   458,  1311,
     459,   460,   461,   462,  1312,   463,   464,   465,   466,   467,
       0,   865,  1314,   470,  2955,   472,     0,   473,   474,   475,
     476,     0,  1315,  1316,   477,  1317,  1318,   478,   479,   480,
     481,   482,   483,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   495,   496,   497,   498,     0,   506,
       0,  2034,  2035,  2036,  2028,  2956,  2957,  2039,  2040,  2041,
    2042,  2029,  2030,     0,     0,  2031,  2032,  2033,   113,   114,
     115,   116,     0,   117,   118,   119,   120,     0,   121,   122,
     123,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   125,   126,     0,   127,   128,   129,     0,   131,   132,
     133,   134,   135,     0,   137,   138,     0,   139,   140,   141,
     142,   143,   144,     0,     0,   145,   146,   147,   148,   149,
       0,   150,   151,   152,   153,   154,     0,     0,     0,   156,
     157,   158,   159,   160,   161,     0,   163,   164,   165,     0,
     166,   167,   168,   169,   170,     0,     0,     0,   172,   173,
     174,   175,   176,   177,   178,   179,   180,   181,   182,   183,
     184,     0,   185,     0,   186,   187,   188,   189,   190,   191,
       0,   192,     0,   193,   194,   195,   196,     0,     0,   197,
     198,   199,   200,   201,     0,     0,     0,   202,   203,   204,
       0,   205,   206,   207,     0,   208,   209,   210,   211,   212,
     213,   214,   215,   216,   217,   218,     0,   219,     0,   220,
     221,   222,   223,     0,   224,     0,   225,     0,     0,     0,
     228,   229,   507,     0,   232,     0,   233,     0,     0,     0,
     234,   235,     0,   236,     0,   237,   238,   239,   240,   241,
     242,   243,     0,   245,   246,   247,   248,     0,   249,   250,
     251,   252,   253,   254,   255,     0,   256,     0,   258,   259,
     260,   261,   262,   263,   264,   265,     0,   266,     0,   267,
       0,     0,   270,     0,   272,     0,   273,   274,   275,   276,
     277,     0,     0,   278,     0,   280,     0,     0,   282,   283,
     284,   285,   286,   287,   288,   289,   508,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,     0,   311,   312,   313,
     314,     0,   315,     0,   316,   317,     0,   319,     0,   320,
     321,   322,   323,   324,   325,     0,   326,   327,     0,     0,
     328,   329,   330,     0,     0,   331,   332,     0,   334,     0,
     336,   337,   338,   339,   340,   341,   342,   343,   344,   345,
       0,     0,   346,     0,     0,     0,     0,   347,   348,   349,
       0,   351,   352,   353,   354,   355,   356,     0,   357,   358,
     359,   360,   361,     0,     0,   362,     0,   363,   364,   365,
     366,   367,   368,   369,   370,     0,   371,   372,   373,     0,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
       0,   384,   385,     0,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,     0,
       0,   402,   403,   404,   405,   406,   407,   408,   409,   410,
       0,   411,     0,     0,   413,   414,   415,     0,     0,   416,
     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
     427,   509,   429,   430,   431,     0,   432,   433,     0,   434,
       0,   436,   437,   438,   439,   440,     0,   441,   442,     0,
       0,     0,   443,   444,   445,   446,   447,     0,   448,   449,
     450,   451,   452,   453,   454,   455,     0,     0,   456,   457,
     458,     0,   459,   460,   461,   462,     0,   463,   464,   465,
     466,   467,   468,   469,     0,   470,     0,   472,     0,   473,
     474,   475,   476,     0,     0,     0,   477,     0,     0,   478,
     479,   480,   481,   482,   483,   484,   485,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
       0,     0,     0,  2034,  2035,  2036,     0,  2037,  2038,  2039,
    2040,  2041,  2042,  1616,     0,     0,  1617,     0,     0,     0,
    1618,  1619,  1620,  1621,  1622,  1623,  1624,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1625,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1627,  1616,     0,     0,  1617,     0,     0,
    1628,  1618,  1619,  1620,  1621,  1622,  1623,  1624,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1625,     0,  1629,     0,     0,     0,     0,
       0,     0,     0,     0,  1627,  1616,     0,     0,  1617,     0,
       0,  1628,  1618,  1619,  1620,  1621,  1622,  1623,  1624,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1625,     0,  1629,     0,     0,     0,
       0,     0,     0,     0,     0,  1627,  1616,     0,     0,  1617,
       0,     0,  1628,  1618,  1619,  1620,  1621,  1622,  1623,  1624,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1625,     0,  1629,     0,     0,
       0,     0,     0,     0,     0,     0,  1627,     0,  1616,     0,
       0,  1617,  1630,  1628,     0,  1618,  1619,  1620,  1621,  1622,
    1623,  1624,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1631,     0,     0,     0,     0,  1632,  1625,  1629,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1627,     0,
       0,     0,     0,  1630,     0,  1628,     0,     0,     0,  1633,
    1634,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1631,     0,     0,  1635,     0,  1632,     0,     0,
    1629,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1630,     0,     0,     0,     0,     0,
    1633,  1634,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1636,  1631,     0,  1637,  1635,     0,  1632,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1638,
       0,     0,  1639,     0,     0,  1630,     0,     0,     0,     0,
       0,  1633,  1634,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1636,  1631,     0,  1637,  1635,     0,  1632,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1638,     0,     0,  1639,     0,     0,     0,  1630,     0,     0,
       0,     0,  1633,  1634,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1636,     0,  1631,  1637,  1635,     0,
       0,  1632,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1638,     0,     0,  1639,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1633,  1634,     0,     0,     0,     0,
       0,  1640,     0,     0,     0,  1636,     0,     0,  1637,     0,
    1635,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1638,     0,     0,  1639,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1640,     0,     0,     0,     0,  1636,     0,     0,
    1637,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1638,     0,     0,  1639,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1640,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1641,
       0,     0,  1642,  1643,  1644,     0,  1645,  1646,  1647,  1648,
    1649,  1650,     0,     0,  1640,     0,  2474,     0,     0,     0,
       0,     0,     0,     0,  1616,     0,     0,  1617,     0,     0,
       0,  1618,  1619,  1620,  1621,  1622,  1623,  1624,     0,     0,
    1641,     0,     0,  1642,  1643,  1644,     0,  1645,  1646,  1647,
    1648,  1649,  1650,  1625,     0,     0,  1640,  2711,     0,     0,
       0,     0,     0,     0,  1627,  1616,     0,     0,  1617,     0,
       0,  1628,  1618,  1619,  1620,  1621,  1622,  1623,  1624,     0,
       0,  1641,     0,     0,  1642,  1643,  1644,     0,  1645,  1646,
    1647,  1648,  1649,  1650,  1625,     0,  1629,     0,  2763,     0,
       0,     0,     0,     0,     0,  1627,  1616,     0,     0,  1617,
       0,     0,  1628,  1618,  1619,  1620,  1621,  1622,  1623,  1624,
       0,     0,  1641,     0,     0,  1642,  1643,  1644,     0,  1645,
    1646,  1647,  1648,  1649,  1650,  1625,     0,  1629,     0,  2865,
       0,     0,     0,     0,     0,     0,  1627,     0,  1616,     0,
       0,  1617,     0,  1628,     0,  1618,  1619,  1620,  1621,  1622,
    1623,  1624,     0,     0,  1641,     0,     0,  1642,  1643,  1644,
       0,  1645,  1646,  1647,  1648,  1649,  1650,  1625,  1629,     0,
       0,  3082,     0,     0,     0,     0,     0,     0,  1627,  1616,
       0,     0,  1617,  1630,     0,  1628,  1618,  1619,  1620,  1621,
    1622,  1623,  1624,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1631,     0,     0,     0,     0,  1632,  1625,     0,
    1629,     0,     0,     0,     0,     0,     0,     0,     0,  1627,
       0,     0,     0,     0,  1630,     0,  1628,     0,     0,     0,
    1633,  1634,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1631,     0,     0,  1635,     0,  1632,     0,
       0,  1629,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1630,     0,     0,     0,     0,
       0,  1633,  1634,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1636,  1631,     0,  1637,  1635,     0,  1632,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1638,     0,     0,  1639,     0,     0,     0,  1630,     0,     0,
       0,     0,  1633,  1634,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1636,     0,  1631,  1637,  1635,     0,
       0,  1632,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1638,     0,     0,  1639,     0,     0,     0,  1630,     0,
       0,     0,     0,     0,  1633,  1634,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1636,     0,  1631,  1637,     0,
    1635,     0,  1632,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1638,     0,     0,  1639,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1633,  1634,     0,     0,     0,
       0,     0,  1640,     0,     0,     0,     0,  1636,     0,     0,
    1637,  1635,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1638,     0,     0,  1639,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1640,     0,     0,     0,     0,  1636,     0,
       0,  1637,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1638,     0,     0,  1639,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1640,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1641,     0,     0,  1642,  1643,  1644,     0,  1645,  1646,  1647,
    1648,  1649,  1650,     0,     0,     0,  1640,  3088,     0,     0,
       0,     0,     0,     0,     0,  1616,     0,     0,  1617,     0,
       0,     0,  1618,  1619,  1620,  1621,  1622,  1623,  1624,     0,
       0,  1641,     0,     0,  1642,  1643,  1644,     0,  1645,  1646,
    1647,  1648,  1649,  1650,  1625,     0,     0,  1640,  3296,     0,
       0,     0,     0,     0,     0,  1627,  1616,     0,     0,  1617,
       0,     0,  1628,  1618,  1619,  1620,  1621,  1622,  1623,  1624,
       0,     0,  1641,     0,     0,  1642,  1643,  1644,     0,  1645,
    1646,  1647,  1648,  1649,  1650,  1625,     0,  1629,     0,  3374,
       0,     0,     0,     0,     0,     0,  1627,     0,  1616,     0,
       0,  1617,     0,  1628,     0,  1618,  1619,  1620,  1621,  1622,
    1623,  1624,     0,     0,  1641,     0,     0,  1642,  1643,  1644,
       0,  1645,  1646,  1647,  1648,  1649,  1650,  1625,  1629,     0,
       0,  3511,     0,     0,     0,     0,     0,     0,  1627,  1616,
       0,     0,  1617,     0,     0,  1628,  1618,  1619,  1620,  1621,
    1622,  1623,  1624,     0,     0,  1641,     0,     0,  1642,  1643,
    1644,     0,  1645,  1646,  1647,  1648,  1649,  1650,  1625,     0,
    1629,     0,  3598,     0,     0,     0,     0,     0,     0,  1627,
    1616,     0,     0,  1617,  1630,     0,  1628,  1618,  1619,  1620,
    1621,  1622,  1623,  1624,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1631,     0,     0,     0,     0,  1632,  1625,
       0,  1629,     0,     0,     0,     0,     0,     0,     0,     0,
    1627,     0,     0,     0,     0,  1630,     0,  1628,     0,     0,
       0,  1633,  1634,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1631,     0,     0,  1635,     0,  1632,
       0,     0,  1629,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1630,     0,     0,
       0,     0,  1633,  1634,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1636,     0,  1631,  1637,  1635,     0,
       0,  1632,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1638,     0,     0,  1639,     0,     0,     0,  1630,     0,
       0,     0,     0,     0,  1633,  1634,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1636,     0,  1631,  1637,     0,
    1635,     0,  1632,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1638,     0,     0,  1639,     0,     0,     0,  1630,
       0,     0,     0,     0,     0,  1633,  1634,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1636,  1631,     0,
    1637,  1635,     0,  1632,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1638,     0,     0,  1639,     0,     0,
       0,     0,     0,     0,     0,     0,  1633,  1634,     0,     0,
       0,     0,     0,  1640,     0,     0,     0,     0,  1636,     0,
       0,  1637,  1635,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1638,     0,     0,  1639,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1640,     0,     0,     0,     0,  1636,
       0,     0,  1637,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1638,     0,     0,  1639,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1640,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1641,     0,     0,  1642,  1643,  1644,     0,  1645,  1646,
    1647,  1648,  1649,  1650,     0,     0,     0,  1640,  3627,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1641,     0,     0,  1642,  1643,  1644,     0,  1645,
    1646,  1647,  1648,  1649,  1650,     0,     0,  1805,  1640,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1641,     0,     0,  1642,  1643,  1644,
       0,  1645,  1646,  1647,  1648,  1649,  1650,     0,     0,  2784,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1641,     0,     0,  1642,  1643,
    1644,     0,  1645,  1646,  1647,  1648,  1649,  1650,     0,     0,
    3288,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1244,     0,     0,  1641,     0,     0,  1642,
    1643,  1644,     0,  1645,  1646,  1647,  1648,  1649,  1650,     0,
       0,  3561,   113,   114,   115,   116,     0,   117,   118,   119,
     120,  1245,   121,   122,   123,  1246,  1247,  1248,   898,  1249,
       0,  1250,  1251,  1252,   899,   125,   126,  1253,   127,   128,
     129,   900,   131,   132,   133,   901,   902,   903,   904,   905,
    1254,   139,   140,   141,   142,   143,   144,  1255,  1256,   145,
     146,   906,   907,   149,  1257,   150,   151,   152,   153,   908,
    1258,   909,  1259,   910,   157,   158,   159,   160,   161,   911,
     163,   164,   165,  1260,   166,   167,   168,   169,   170,     0,
    1261,   912,   172,   173,   174,   175,   176,   177,   178,   179,
     180,   181,   913,   914,   184,  1262,   185,  1263,   186,   187,
     188,   189,   190,   191,  1264,   192,     0,   193,   194,   195,
     196,  1265,  1266,   197,   198,   199,   200,   201,     0,     0,
    1267,   202,   203,   204,  1268,   205,   206,   207,  1269,   208,
     209,   210,   211,   915,   213,   214,   215,   216,   217,   916,
    1270,   219,  1271,   220,   221,   917,   223,  1272,   224,  1273,
     225,   918,  1274,   919,   228,   229,   920,   921,   232,  1275,
     233,     0,  1276,  1277,   922,   923,     0,   236,  1278,   237,
     238,   239,   240,   241,   242,   243,   924,   245,   246,   247,
     248,  1279,   249,   250,   251,   252,   253,   254,   255,  1280,
     256,   925,   926,   259,   260,   261,   262,   263,   927,   928,
    1281,   929,  1282,   267,   930,   931,   270,   932,   272,     0,
     273,   274,   275,   276,   277,  1283,  1284,   278,   933,   280,
     934,  1285,   282,   283,   284,   285,   286,   287,   288,   289,
     935,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   936,
     937,   938,   312,   313,   314,     0,   939,  1286,   316,   317,
     940,   319,  1287,   941,   321,   942,   323,   324,   325,  1288,
     326,   327,  1289,  1290,   328,   329,   330,  1291,  1292,   331,
     943,   944,   334,   945,   946,   337,   338,   339,   340,   341,
     342,   343,   344,   345,     0,     0,   346,  1293,  1294,  1295,
    1296,   347,   348,   947,   948,   351,   352,   949,   354,   355,
     356,  1297,   357,   358,   359,   360,   361,     0,     0,   362,
    1298,   363,   364,   365,   950,   367,   368,   369,   370,  1299,
     371,   372,   373,     0,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,  1300,   384,   385,   951,   387,   388,
     389,   952,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,  1301,   953,   402,   403,   404,   405,   406,
     407,   954,   409,   410,     0,   411,   955,     0,   413,   956,
     415,  1302,     0,   416,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,   427,   957,   429,   958,   431,  1303,
     432,   433,  1304,   434,   959,   436,   437,   438,   439,   440,
    1305,   960,   961,  1306,     0,  1307,   443,   444,   962,   446,
     963,  1308,   448,   449,   964,   451,   452,   453,   454,   455,
    1309,  1310,   456,   457,   458,  1311,   459,   460,   461,   462,
    1312,   463,   464,   465,   466,   467,  1313,   966,  1314,   470,
     967,   472,     0,   473,   474,   475,   476,     0,  1315,  1316,
     477,  1317,  1318,   478,   479,   480,   481,   482,   483,   968,
     969,   970,   971,   972,   973,   974,   975,   976,   977,   978,
     495,   496,   497,   498,   506,     0,     0,     0,     0,     0,
       0,     0,     0,  2059,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   113,   114,   115,   116,     0,   117,   118,
     119,   120,     0,   121,   122,   123,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   125,   126,     0,   127,
     128,   129,     0,   131,   132,   133,   134,   135,     0,   137,
     138,     0,   139,   140,   141,   142,   143,   144,     0,     0,
     145,   146,   147,   148,   149,     0,   150,   151,   152,   153,
     154,     0,     0,     0,   156,   157,   158,   159,   160,   161,
       0,   163,   164,   165,     0,   166,   167,   168,   169,   170,
       0,     0,     0,   172,   173,   174,   175,   176,   177,   178,
     179,   180,   181,   182,   183,   184,     0,   185,     0,   186,
     187,   188,   189,   190,   191,     0,   192,     0,   193,   194,
     195,   196,     0,     0,   197,   198,   199,   200,   201,     0,
       0,     0,   202,   203,   204,     0,   205,   206,   207,     0,
     208,   209,   210,   211,   212,   213,   214,   215,   216,   217,
     218,     0,   219,     0,   220,   221,   222,   223,     0,   224,
       0,   225,     0,     0,     0,   228,   229,   507,     0,   232,
       0,   233,     0,     0,     0,   234,   235,     0,   236,     0,
     237,   238,   239,   240,   241,   242,   243,     0,   245,   246,
     247,   248,     0,   249,   250,   251,   252,   253,   254,   255,
       0,   256,     0,   258,   259,   260,   261,   262,   263,   264,
     265,     0,   266,     0,   267,     0,     0,   270,     0,   272,
       0,   273,   274,   275,   276,   277,     0,     0,   278,     0,
     280,     0,     0,   282,   283,   284,   285,   286,   287,   288,
     289,   508,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,     0,   311,   312,   313,   314,     0,   315,     0,   316,
     317,     0,   319,     0,   320,   321,   322,   323,   324,   325,
       0,   326,   327,     0,     0,   328,   329,   330,     0,     0,
     331,   332,     0,   334,     0,   336,   337,   338,   339,   340,
     341,   342,   343,   344,   345,     0,     0,   346,     0,     0,
       0,     0,   347,   348,   349,     0,   351,   352,   353,   354,
     355,   356,     0,   357,   358,   359,   360,   361,     0,     0,
     362,     0,   363,   364,   365,   366,   367,   368,   369,   370,
       0,   371,   372,   373,     0,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,     0,   384,   385,     0,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,     0,     0,   402,   403,   404,   405,
     406,   407,   408,   409,   410,     0,   411,     0,     0,   413,
     414,   415,     0,     0,   416,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,   509,   429,   430,   431,
       0,   432,   433,     0,   434,     0,   436,   437,   438,   439,
     440,     0,   441,   442,     0,     0,     0,   443,   444,   445,
     446,   447,     0,   448,   449,   450,   451,   452,   453,   454,
     455,     0,     0,   456,   457,   458,     0,   459,   460,   461,
     462,     0,   463,   464,   465,   466,   467,   468,   469,     0,
     470,     0,   472,     0,   473,   474,   475,   476,     0,     0,
       0,   477,     0,     0,   478,   479,   480,   481,   482,   483,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,   506,     0,     0,     0,     0,
       0,     0,     0,     0,  2704,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   113,   114,   115,   116,     0,   117,
     118,   119,   120,     0,   121,   122,   123,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   125,   126,     0,
     127,   128,   129,     0,   131,   132,   133,   134,   135,     0,
     137,   138,     0,   139,   140,   141,   142,   143,   144,     0,
       0,   145,   146,   147,   148,   149,     0,   150,   151,   152,
     153,   154,     0,     0,     0,   156,   157,   158,   159,   160,
     161,     0,   163,   164,   165,     0,   166,   167,   168,   169,
     170,     0,     0,     0,   172,   173,   174,   175,   176,   177,
     178,   179,   180,   181,   182,   183,   184,     0,   185,     0,
     186,   187,   188,   189,   190,   191,     0,   192,     0,   193,
     194,   195,   196,     0,     0,   197,   198,   199,   200,   201,
       0,     0,     0,   202,   203,   204,     0,   205,   206,   207,
       0,   208,   209,   210,   211,   212,   213,   214,   215,   216,
     217,   218,     0,   219,     0,   220,   221,   222,   223,     0,
     224,     0,   225,     0,     0,     0,   228,   229,   507,     0,
     232,     0,   233,     0,     0,     0,   234,   235,     0,   236,
       0,   237,   238,   239,   240,   241,   242,   243,     0,   245,
     246,   247,   248,     0,   249,   250,   251,   252,   253,   254,
     255,     0,   256,     0,   258,   259,   260,   261,   262,   263,
     264,   265,     0,   266,     0,   267,     0,     0,   270,     0,
     272,     0,   273,   274,   275,   276,   277,     0,     0,   278,
       0,   280,     0,     0,   282,   283,   284,   285,   286,   287,
     288,   289,   508,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,     0,   311,   312,   313,   314,     0,   315,     0,
     316,   317,     0,   319,     0,   320,   321,   322,   323,   324,
     325,     0,   326,   327,     0,     0,   328,   329,   330,     0,
       0,   331,   332,     0,   334,     0,   336,   337,   338,   339,
     340,   341,   342,   343,   344,   345,     0,     0,   346,     0,
       0,     0,     0,   347,   348,   349,     0,   351,   352,   353,
     354,   355,   356,     0,   357,   358,   359,   360,   361,     0,
       0,   362,     0,   363,   364,   365,   366,   367,   368,   369,
     370,     0,   371,   372,   373,     0,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,     0,   384,   385,     0,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,     0,     0,   402,   403,   404,
     405,   406,   407,   408,   409,   410,     0,   411,     0,     0,
     413,   414,   415,     0,     0,   416,   417,   418,   419,   420,
     421,   422,   423,   424,   425,   426,   427,   509,   429,   430,
     431,     0,   432,   433,     0,   434,     0,   436,   437,   438,
     439,   440,     0,   441,   442,     0,     0,     0,   443,   444,
     445,   446,   447,     0,   448,   449,   450,   451,   452,   453,
     454,   455,     0,     0,   456,   457,   458,     0,   459,   460,
     461,   462,     0,   463,   464,   465,   466,   467,   468,   469,
       0,   470,     0,   472,     0,   473,   474,   475,   476,     0,
       0,     0,   477,     0,     0,   478,   479,   480,   481,   482,
     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   897,  1469,   635,     0,
       0,     0,  1057,     0,     0,  2707,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   113,   114,   115,   116,     0,
     117,   118,   119,   120,     0,   121,   122,   123,     0,     0,
       0,   898,     0,     0,     0,     0,     0,   899,   125,   126,
       0,   127,   128,   129,   900,   131,   132,   133,   901,   902,
     903,   904,   905,     0,   139,   140,   141,   142,   143,   144,
       0,     0,   145,   146,   906,   907,   149,     0,   150,   151,
     152,   153,   908,     0,   909,     0,   910,   157,   158,   159,
     160,   161,   911,   163,   164,   165,     0,   166,   167,   168,
     169,   170,     0,     0,   912,   172,   173,   174,   175,   176,
     177,   178,   179,   180,   181,   913,   914,   184,  1673,   185,
       0,   186,   187,   188,   189,   190,   191,     0,   192,     0,
     193,   194,   195,   196,     0,     0,   197,   198,   199,   200,
     201,     0,     0,     0,   202,   203,   204,     0,   205,   206,
     207,     0,   208,   209,   210,   211,   915,   213,   214,   215,
     216,   217,   916,  1470,   219,     0,   220,   221,   917,   223,
       0,   224,     0,   225,   918,     0,   919,   228,   229,   920,
     921,   232,     0,   233,     0,     0,     0,   922,   923,     0,
     236,     0,   237,   238,   239,   240,   241,   242,   243,   924,
     245,   246,   247,   248,     0,   249,   250,   251,   252,   253,
     254,   255,     0,   256,   925,   926,   259,   260,   261,   262,
     263,   927,   928,     0,   929,     0,   267,   930,   931,   270,
     932,   272,     0,   273,   274,   275,   276,   277,     0,     0,
     278,   933,   280,   934,     0,   282,   283,   284,   285,   286,
     287,   288,   289,   935,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   936,   937,   938,   312,   313,   314,     0,   939,
       0,   316,   317,   940,   319,     0,   941,   321,   942,   323,
     324,   325,     0,   326,   327,  1471,     0,   328,   329,   330,
       0,     0,   331,   943,   944,   334,   945,   946,   337,   338,
     339,   340,   341,   342,   343,   344,   345,     0,     0,   346,
       0,     0,     0,     0,   347,   348,   947,   948,   351,   352,
     949,   354,   355,   356,     0,   357,   358,   359,   360,   361,
       0,     0,   362,     0,   363,   364,   365,   950,   367,   368,
     369,   370,     0,   371,   372,   373,     0,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,     0,   384,   385,
     951,   387,   388,   389,   952,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,     0,   953,   402,   403,
     404,   405,   406,   407,   954,   409,   410,     0,   411,   955,
       0,   413,   956,   415,     0,     0,   416,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,   957,   429,
     958,   431,     0,   432,   433,     0,   434,   959,   436,   437,
     438,   439,   440,     0,   960,   961,     0,     0,     0,   443,
     444,   962,   446,   963,  1472,   448,   449,   964,   451,   452,
     453,   454,   455,     0,     0,   456,   457,   458,     0,   459,
     460,   461,   462,     0,   463,   464,   465,   466,   467,  1313,
     966,     0,   470,   967,   472,     0,   473,   474,   475,   476,
       0,     0,     0,   477,     0,     0,   478,   479,   480,   481,
     482,   483,   968,   969,   970,   971,   972,   973,   974,   975,
     976,   977,   978,   495,   496,   497,   498,   897,  1469,   635,
       0,     0,     0,  1057,  1473,  1474,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   113,   114,   115,   116,
       0,   117,   118,   119,   120,     0,   121,   122,   123,     0,
       0,     0,   898,     0,     0,     0,     0,     0,   899,   125,
     126,     0,   127,   128,   129,   900,   131,   132,   133,   901,
     902,   903,   904,   905,     0,   139,   140,   141,   142,   143,
     144,     0,     0,   145,   146,   906,   907,   149,     0,   150,
     151,   152,   153,   908,     0,   909,     0,   910,   157,   158,
     159,   160,   161,   911,   163,   164,   165,     0,   166,   167,
     168,   169,   170,     0,     0,   912,   172,   173,   174,   175,
     176,   177,   178,   179,   180,   181,   913,   914,   184,  1675,
     185,     0,   186,   187,   188,   189,   190,   191,     0,   192,
       0,   193,   194,   195,   196,     0,     0,   197,   198,   199,
     200,   201,     0,     0,     0,   202,   203,   204,     0,   205,
     206,   207,     0,   208,   209,   210,   211,   915,   213,   214,
     215,   216,   217,   916,  1470,   219,     0,   220,   221,   917,
     223,     0,   224,     0,   225,   918,     0,   919,   228,   229,
     920,   921,   232,     0,   233,     0,     0,     0,   922,   923,
       0,   236,     0,   237,   238,   239,   240,   241,   242,   243,
     924,   245,   246,   247,   248,     0,   249,   250,   251,   252,
     253,   254,   255,     0,   256,   925,   926,   259,   260,   261,
     262,   263,   927,   928,     0,   929,     0,   267,   930,   931,
     270,   932,   272,     0,   273,   274,   275,   276,   277,     0,
       0,   278,   933,   280,   934,     0,   282,   283,   284,   285,
     286,   287,   288,   289,   935,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   936,   937,   938,   312,   313,   314,     0,
     939,     0,   316,   317,   940,   319,     0,   941,   321,   942,
     323,   324,   325,     0,   326,   327,  1471,     0,   328,   329,
     330,     0,     0,   331,   943,   944,   334,   945,   946,   337,
     338,   339,   340,   341,   342,   343,   344,   345,     0,     0,
     346,     0,     0,     0,     0,   347,   348,   947,   948,   351,
     352,   949,   354,   355,   356,     0,   357,   358,   359,   360,
     361,     0,     0,   362,     0,   363,   364,   365,   950,   367,
     368,   369,   370,     0,   371,   372,   373,     0,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,     0,   384,
     385,   951,   387,   388,   389,   952,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,     0,   953,   402,
     403,   404,   405,   406,   407,   954,   409,   410,     0,   411,
     955,     0,   413,   956,   415,     0,     0,   416,   417,   418,
     419,   420,   421,   422,   423,   424,   425,   426,   427,   957,
     429,   958,   431,     0,   432,   433,     0,   434,   959,   436,
     437,   438,   439,   440,     0,   960,   961,     0,     0,     0,
     443,   444,   962,   446,   963,  1472,   448,   449,   964,   451,
     452,   453,   454,   455,     0,     0,   456,   457,   458,     0,
     459,   460,   461,   462,     0,   463,   464,   465,   466,   467,
    1313,   966,     0,   470,   967,   472,     0,   473,   474,   475,
     476,     0,     0,     0,   477,     0,     0,   478,   479,   480,
     481,   482,   483,   968,   969,   970,   971,   972,   973,   974,
     975,   976,   977,   978,   495,   496,   497,   498,   897,  1469,
     635,     0,     0,     0,  1057,  1473,  1474,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   113,   114,   115,
     116,     0,   117,   118,   119,   120,     0,   121,   122,   123,
       0,     0,     0,   898,     0,     0,     0,     0,     0,   899,
     125,   126,     0,   127,   128,   129,   900,   131,   132,   133,
     901,   902,   903,   904,   905,     0,   139,   140,   141,   142,
     143,   144,     0,     0,   145,   146,   906,   907,   149,     0,
     150,   151,   152,   153,   908,     0,   909,     0,   910,   157,
     158,   159,   160,   161,   911,   163,   164,   165,     0,   166,
     167,   168,   169,   170,     0,     0,   912,   172,   173,   174,
     175,   176,   177,   178,   179,   180,   181,   913,   914,   184,
       0,   185,     0,   186,   187,   188,   189,   190,   191,     0,
     192,     0,   193,   194,   195,   196,     0,     0,   197,   198,
     199,   200,   201,     0,     0,     0,   202,   203,   204,     0,
     205,   206,   207,     0,   208,   209,   210,   211,   915,   213,
     214,   215,   216,   217,   916,  1470,   219,     0,   220,   221,
     917,   223,     0,   224,     0,   225,   918,     0,   919,   228,
     229,   920,   921,   232,     0,   233,     0,     0,     0,   922,
     923,     0,   236,     0,   237,   238,   239,   240,   241,   242,
     243,   924,   245,   246,   247,   248,     0,   249,   250,   251,
     252,   253,   254,   255,     0,   256,   925,   926,   259,   260,
     261,   262,   263,   927,   928,     0,   929,     0,   267,   930,
     931,   270,   932,   272,     0,   273,   274,   275,   276,   277,
       0,     0,   278,   933,   280,   934,     0,   282,   283,   284,
     285,   286,   287,   288,   289,   935,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   936,   937,   938,   312,   313,   314,
       0,   939,     0,   316,   317,   940,   319,     0,   941,   321,
     942,   323,   324,   325,     0,   326,   327,  1471,     0,   328,
     329,   330,     0,     0,   331,   943,   944,   334,   945,   946,
     337,   338,   339,   340,   341,   342,   343,   344,   345,     0,
       0,   346,     0,     0,     0,     0,   347,   348,   947,   948,
     351,   352,   949,   354,   355,   356,     0,   357,   358,   359,
     360,   361,     0,     0,   362,     0,   363,   364,   365,   950,
     367,   368,   369,   370,     0,   371,   372,   373,     0,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,     0,
     384,   385,   951,   387,   388,   389,   952,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,     0,   953,
     402,   403,   404,   405,   406,   407,   954,   409,   410,     0,
     411,   955,     0,   413,   956,   415,     0,     0,   416,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     957,   429,   958,   431,     0,   432,   433,     0,   434,   959,
     436,   437,   438,   439,   440,     0,   960,   961,     0,     0,
       0,   443,   444,   962,   446,   963,  1472,   448,   449,   964,
     451,   452,   453,   454,   455,     0,     0,   456,   457,   458,
       0,   459,   460,   461,   462,     0,   463,   464,   465,   466,
     467,  1313,   966,     0,   470,   967,   472,     0,   473,   474,
     475,   476,     0,     0,     0,   477,     0,     0,   478,   479,
     480,   481,   482,   483,   968,   969,   970,   971,   972,   973,
     974,   975,   976,   977,   978,   495,   496,   497,   498,     0,
       0,  1616,     0,     0,  1617,     0,  1473,  1474,  1618,  1619,
    1620,  1621,  1622,  1623,  1624,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1625,     0,     0,     0,     0,     0,  2162,     0,     0,     0,
       0,  1627,  1616,     0,     0,  1617,     0,     0,  1628,  1618,
    1619,  1620,  1621,  1622,  1623,  1624,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1625,     0,  1629,     0,     0,     0,     0,     0,     0,
       0,     0,  1627,  1616,     0,     0,  1617,     0,     0,  1628,
    1618,  1619,  1620,  1621,  1622,  1623,  1624,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1625,     0,  1629,     0,     0,  2163,     0,     0,
       0,     0,     0,  1627,  1616,     0,     0,  1617,     0,     0,
    1628,  1618,  1619,  1620,  1621,  1622,  1623,  1624,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1625,     0,  1629,     0,     0,  1915,     0,
       0,     0,     0,     0,  1627,     0,     0,     0,     0,     0,
    1630,  1628,     0,     0,  1616,     0,     0,  1617,     0,     0,
       0,  1618,  1619,  1620,  1621,  1622,  1623,  1624,     0,  1631,
       0,     0,     0,     0,  1632,     0,  1629,     0,     0,     0,
       0,  1951,     0,  1625,     0,     0,  1952,     0,     0,     0,
       0,  1630,     0,     0,  1627,     0,     0,  1633,  1634,     0,
       0,  1628,     0,     0,     0,     0,     0,     0,     0,     0,
    1631,     0,     0,  1635,     0,  1632,     0,     0,     0,     0,
       0,  3731,     0,     0,     0,     0,  1629,     0,     0,     0,
       0,     0,  1630,     0,     0,     0,     0,     0,  1633,  1634,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1636,  1631,     0,  1637,  1635,     0,  1632,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1638,     0,     0,
    1639,     0,     0,  1630,     0,     0,     0,     0,     0,  1633,
    1634,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1636,  1631,     0,  1637,  1635,     0,  1632,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1638,     0,
       0,  1639,     0,     0,     0,     0,     0,     0,     0,     0,
    1633,  1634,     0,  1630,     0,     0,     0,     0,     0,     0,
       0,     0,  1636,     0,     0,  1637,  1635,     0,     0,     0,
       0,     0,  1631,     0,     0,     0,     0,  1632,     0,  1638,
       0,     0,  1639,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1640,
    1633,  1634,     0,  1636,     0,     0,  1637,     0,     0,     0,
       0,  3732,     0,     0,     0,     0,  1635,     0,     0,     0,
    1638,     0,     0,  1639,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1640,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1636,     0,     0,  1637,     0,     0,     0,
       0,     0,     0,  2166,     0,     0,     0,     0,     0,     0,
    1638,     0,     0,  1639,     0,     0,     0,     0,     0,     0,
       0,  1640,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1922,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1641,     0,     0,
    1642,  1643,  1644,     0,  1645,  1646,  1647,  1648,  1649,  1650,
       0,     0,  1640,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1616,     0,     0,  1617,     0,     0,     0,
    1618,  1619,  1620,  1621,  1622,  1623,  1624,     0,  1641,     0,
       0,  1642,  1643,  1644,     0,  1645,  1646,  1647,  1648,  1649,
    1650,     0,  1625,     0,     0,     0,     0,  1957,     0,     0,
       0,     0,  1640,  1627,  1616,     0,     0,  1617,     0,     0,
    1628,  1618,  1619,  1620,  1621,  1622,  1623,  1624,     0,  1641,
       0,     0,  1642,  1643,  1644,     0,  1645,  1646,  1647,  1648,
    1649,  1650,     0,  1625,     0,  1629,     0,     0,     0,     0,
       0,     0,     0,     0,  1627,     0,     0,     0,     0,     0,
       0,  1628,     0,     0,     0,     0,     0,     0,     0,     0,
    1641,     0,     0,  1642,  1643,  1644,     0,  1645,  1646,  1647,
    1648,  1649,  1650,     0,     0,     0,  1629,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1616,     0,     0,  1617,     0,     0,
       0,  1618,  1619,  1620,  1621,  1622,  1623,  1624,     0,     0,
    1641,     0,     0,  1642,  1643,  1644,     0,  1645,  1646,  1647,
    1648,  1649,  1650,  1625,     0,     0,     0,     0,  1964,     0,
       0,     0,  1630,     0,  1627,     0,  1616,     0,     0,  1617,
       0,  1628,     0,  1618,  1619,  1620,  1621,  1622,  1623,  1624,
       0,  1631,     0,     0,     0,     0,  1632,     0,     0,     0,
       0,     0,     0,     0,     0,  1625,  1629,     0,  1962,     0,
       0,     0,     0,  1630,     0,     0,  1627,     0,     0,  1633,
    1634,     0,     0,  1628,     0,     0,     0,     0,     0,     0,
       0,     0,  1631,     0,     0,  1635,     0,  1632,     0,     0,
       0,     0,     0,  1056,     0,     0,  3116,     0,  1629,     0,
       0,  3117,     0,     0,     0,     0,     0,     0,     0,     0,
    1633,  1634,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1636,     0,     0,  1637,  1635,     0,     0,     0,
       0,     0,     0,  3124,     0,     0,     0,     0,     0,  1638,
   -2131,     0,  1639,     0,     0,     0,     0,     0,     0,  1616,
       0,     0,  1617,  1630,     0,     0,  1618,  1619,  1620,  1621,
    1622,  1623,  1624,  1636,     0,  3126,  1637,     0,     0,     0,
       0,     0,  1631,     0,     0,     0,     0,  1632,  1625,     0,
    1638,     0,     0,  1639,     0,  2052,     0,     0,     0,  1627,
       0,     0,     0,     0,     0,  1630,  1628,     0,     0,     0,
    1633,  1634,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1631,     0,  1635,     0,     0,  1632,
       0,  1629,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  3581,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1640,  1633,  1634,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1636,     0,     0,  1637,     0,  1635,     0,
       0,     0, -2131,     0,     0,     0,     0,     0,     0,     0,
    1638,     0,     0,  1639,     0,     0,     0,     0,     0,     0,
       0, -2131,  1640,     0,     0,     0, -2131,     0,     0,     0,
       0,     0,     0,     0,     0,  1636,     0,     0,  1637,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1638,     0,     0,  1639,     0,     0,  1630,     0,
       0,     0,     0,     0,     0, -2131,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1631,     0,     0,
       0,     0,  1632,     0,     0,     0,     0,     0,     0,  1641,
       0,     0,  1642,  1643,  1644,     0,  1645,  1646,  1647,  1648,
    1649,  1650,     0,     0,     0,  1633,  1634,     0,     0,     0,
       0,     0,  1640,     0,     0,  1616,     0,     0,  1617,  1935,
       0,  1635,  1618,  1619,  1620,  1621,  1622,  1623,  1624,     0,
    1641,     0,     0,  1642,  1643,  1644,     0,  1645,  1646,  1647,
    1648,  1649,  1650,     0,  1625,     0,     0,     0,     0,  2761,
       0,     0,     0,     0,  1640,  1627,     0,     0,  1636,     0,
       0,  1637,  1628,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1638,     0,     0,  1639,     0,
       0,     0,     0,     0,     0,     0,  1616,  1629,     0,  1617,
       0,     0,     0,  1618,  1619,  1620,  1621,  1622,  1623,  1624,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1625,     0,     0,     0,     0,
    1641, -2131,     0,  1642,  1643,  1644,  1627,  1645,  1646,  1647,
    1648,  1649,  1650,  1628,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1629,     0,
       0,     0,  1641,     0,     0,  1642,  1643,  1644,     0,  1645,
    1646,  1647,  1648,  1649,  1650,     0,     0,  1640,  1616,     0,
       0,  1617,     0,     0,  1630,  1618,  1619,  1620,  1621,  1622,
    1623,  1624,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1631,     0,     0,     0,  1625,  1632,  1616,
       0,  2750,  1617,     0,     0,     0,  1618,  1619,  1627,     0,
    1622,  1623,  1624,     0,     0,  1628,     0,     0,     0, -2131,
       0,  1633,  1634,     0,     0,     0,  3141,  3142,  3143,  3144,
    3145,  3146,     0,     0,     0,     0,     0,  1635,     0,  1627,
    1629,     0,     0,     0,     0,  1630,  1628,     0,     0,     0,
    1056,     0,     0,  3116,     0,     0,     0,     0,  3117,     0,
       0,  3120,  3121,  3122,  1631,     0,     0,     0,     0,  1632,
       0,  1629,     0,     0,  1636,  1641,     0,  1637,  1642,  1643,
    1644,     0,  1645,  1646,  1647,  1648,  1649,  1650,     0,     0,
    3124,  1638,  1633,  1634,  1639,     0,     0,  3125,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1635,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  3126,     0,     0,     0,     0,     0,     0,     0,
    1056,     0,     0,  3116,     0,     0,     0,  1630,  3117,     0,
       0,  3120,  3121,  3122,     0,  1636,     0,     0,  1637,     0,
       0,     0,     0,     0,     0,     0,  1631,     0,     0,  3123,
       0,  1632,  1638,     0,     0,  1639,     0,     0,  1630,     0,
    3124,     0,     0,     0,     0,     0,     0,  3125,     0,     0,
       0,     0,     0,     0,  1633,  1634,     0,  1631,     0,     0,
       0,     0,  1632,  1640,     0,     0,     0,     0,     0,     0,
    1635,  1056,  3126,     0,  3116,     0,     0,     0,     0,  3117,
       0,     0, -2131, -2131, -2131,  1633,  1634,     0,     0,  3127,
       0,     0,  1056,     0,     0,  3116,     0,     0,     0,     0,
    3117,  1635,     0,     0,     0,     0,     0,  1636,  3128,     0,
    1637,  3124,     0,  3129,     0,     0,     0,     0,  3125,     0,
       0,     0,     0,     0,  1638,     0,     0,  1639,     0,     0,
       0,     0,  3124,     0,  1640,     0, -2131, -2131,  1636, -2131,
       0,  1637,     0,  3126,     0,     0,     0,     0,     0,     0,
       0,     0,  3132,     0,     0,  1638,     0,     0,     0,     0,
       0,     0,  1056,     0,  3126,  3116,     0,     0,     0,  3127,
    3117,  1641,     0,     0,  1642,  1643,  1644,     0,  1645,  1646,
    1647,  1648,  1649,  1650,     0,     0,     0,     0,  3128,     0,
       0,     0, -2131,  3129,     0,     0,     0,     0,     0,     0,
       0,     0,  3124,     0,     0,     0,  1935,     0,     0, -2131,
       0,     0,     0,     0,     0,     0,  3130,  3131,     0,     0,
       0,     0,     0,     0,     0,     0,  1640,     0,     0,     0,
    3584,     0,  3132,     0,  3126,     0,     0,     0,     0,     0,
    3127,     0,  1641,     0,     0,  1642,  1643,  1644,     0,  1645,
    1646,  1647,  1648,  1649,  1650,     0,     0,  1640,     0,  3128,
       0, -2131,     0,     0,  3129,     0,     0,     0,     0,  3133,
       0,     0,  3134,     0,     0,     0,     0,     0,     0,     0,
   -2131,     0,     0,     0,     0, -2131,  1935,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    3585,     0,     0,  3132,     0,     0,     0,     0,  3136,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0, -2131,     0,     0,     0,     0,     0,
       0, -2131,     0,     0,  1641,     0,     0,  1642,  1643,  1644,
       0,  1645,  1646,  1647,  1648,  2183,  1650,     0,     0,     0,
   -2131,     0,     0,     0,     0, -2131,     0,  1935,     0,  1056,
       0,     0,  3116,     0,     0,  1641,     0,  3117,  1642,  1643,
    1644,     0,  1645,  1646,  1647,  1648,  1649,  1650,  1935,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  3136,     0,
       0,     0,     0,     0, -2131,     0,     0,     0,     0,  3124,
       0,     0,     0,     0,     0,     0, -2131,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  3137,     0,     0,  3138,
    3139,  3140,     0,  3141,  3142,  3143,  3144,  3145,  3146,     0,
       0,  3126,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1935,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  3136,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   -2131,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  3137,  3660,     0,  3138,
    3139,  3140,     0,  3141,  3142,  3143,  3144,  3145,  3146,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0, -2131,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0, -2131,     0,     0,
   -2131,     0, -2131,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  3137,     0,     0,
   -2131, -2131, -2131,     0,  3141,  3142,  3143,  3144,  3145,  3146,
       0,     0,     0,     0,     0,     0,     0,     0, -2131,     0,
       0, -2131,     0,     0,     0,  3141,  3142,  3143,  3144,  3145,
    3146,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1935,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0, -2131,     0,
       0,     0,     0,     0,     0,  3141,  3142,  3143,  3144,  3145,
    3146,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0, -2131,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1244,
       0,  2074,     0,     0,     0, -2131,     0,     0,     0,     0,
       0,     0,  3141,  3142,  3143,  3144,  3145,  3146,   113,   114,
     115,   116,     0,   117,   118,   119,   120,  1245,   121,   122,
     123,  1246,  1247,  1248,   898,  1249,     0,  1250,  1251,  1252,
     899,   125,   126,  1253,   127,   128,   129,   900,   131,   132,
     133,   901,   902,   903,   904,   905,  1254,   139,   140,   141,
     142,   143,   144,  1255,  1256,   145,   146,   906,   907,   149,
    1257,   150,   151,   152,   153,   908,  1258,   909,  1259,   910,
     157,   158,   159,   160,   161,   911,   163,   164,   165,  1260,
     166,   167,   168,   169,   170,     0,  1261,   912,   172,   173,
     174,   175,   176,   177,   178,   179,   180,   181,   913,   914,
     184,  1262,   185,  1263,   186,   187,   188,   189,   190,   191,
    1264,   192,     0,   193,   194,   195,   196,  1265,  1266,   197,
     198,   199,   200,   201,     0,     0,  1267,   202,   203,   204,
    1268,   205,   206,   207,  1269,   208,   209,   210,   211,   915,
     213,   214,   215,   216,   217,   916,  1270,   219,  1271,   220,
     221,   917,   223,  1272,   224,  1273,   225,   918,  1274,   919,
     228,   229,   920,   921,   232,  1275,   233,     0,  1276,  1277,
     922,   923,     0,   236,  1278,   237,   238,   239,   240,   241,
     242,   243,   924,   245,   246,   247,   248,  1279,   249,   250,
     251,   252,   253,   254,   255,  1280,   256,   925,   926,   259,
     260,   261,   262,   263,   927,   928,  1281,   929,  1282,   267,
     930,   931,   270,   932,   272,     0,   273,   274,   275,   276,
     277,  1283,  1284,   278,   933,   280,   934,  1285,   282,   283,
     284,   285,   286,   287,   288,   289,   935,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   936,   937,   938,   312,   313,
     314,     0,   939,  1286,   316,   317,   940,   319,  1287,   941,
     321,   942,   323,   324,   325,  1288,   326,   327,  1289,  1290,
     328,   329,   330,  1291,  1292,   331,   943,   944,   334,   945,
     946,   337,   338,   339,   340,   341,   342,   343,   344,   345,
       0,     0,   346,  1293,  1294,  1295,  1296,   347,   348,   947,
     948,   351,   352,   949,   354,   355,   356,  1297,   357,   358,
     359,   360,   361,     0,     0,   362,  1298,   363,   364,   365,
     950,   367,   368,   369,   370,  1299,   371,   372,   373,     0,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
    1300,   384,   385,   951,   387,   388,   389,   952,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,  1301,
     953,   402,   403,   404,   405,   406,   407,   954,   409,   410,
       0,   411,   955,     0,   413,   956,   415,  1302,     0,   416,
     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
     427,   957,   429,   958,   431,  1303,   432,   433,  1304,   434,
     959,   436,   437,   438,   439,   440,  1305,   960,   961,  1306,
       0,  1307,   443,   444,   962,   446,   963,  1308,   448,   449,
     964,   451,   452,   453,   454,   455,  1309,  1310,   456,   457,
     458,  1311,   459,   460,   461,   462,  1312,   463,   464,   465,
     466,   467,  1313,   966,  1314,   470,   967,   472,     0,   473,
     474,   475,   476,     0,  1315,  1316,   477,  1317,  1318,   478,
     479,   480,   481,   482,   483,   968,   969,   970,   971,   972,
     973,   974,   975,   976,   977,   978,   495,   496,   497,   498,
    1244,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   113,
     114,   115,   116,     0,   117,   118,   119,   120,  1245,   121,
     122,   123,  1246,  1247,  1248,   898,  1249,     0,  1250,  1251,
    1252,   899,   125,   126,  1253,   127,   128,   129,   900,   131,
     132,   133,   901,   902,   903,   904,   905,  1254,   139,   140,
     141,   142,   143,   144,  1255,  1256,   145,   146,   906,   907,
     149,  1257,   150,   151,   152,   153,   908,  1258,   909,  1259,
     910,   157,   158,   159,   160,   161,   911,   163,   164,   165,
    1260,   166,   167,   168,   169,   170,     0,  1261,   912,   172,
     173,   174,   175,   176,   177,   178,   179,   180,   181,   913,
     914,   184,  1262,   185,  1263,   186,   187,   188,   189,   190,
     191,  1264,   192,     0,   193,   194,   195,   196,  1265,  1266,
     197,   198,   199,   200,   201,     0,     0,  1267,   202,   203,
     204,  1268,   205,   206,   207,  1269,   208,   209,   210,   211,
     915,   213,   214,   215,   216,   217,   916,  1270,   219,  1271,
     220,   221,   917,   223,  1272,   224,  1273,   225,   918,  1274,
     919,   228,   229,   920,   921,   232,  1275,   233,     0,  1276,
    1277,   922,   923,     0,   236,  1278,   237,   238,   239,   240,
     241,   242,   243,   924,   245,   246,   247,   248,  1279,   249,
     250,   251,   252,   253,   254,   255,  1280,   256,   925,   926,
     259,   260,   261,   262,   263,   927,   928,  1281,   929,  1282,
     267,   930,   931,   270,   932,   272,     0,   273,   274,   275,
     276,   277,  1283,  1284,   278,   933,   280,   934,  1285,   282,
     283,   284,   285,   286,   287,   288,   289,   935,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   936,   937,   938,   312,
     313,   314,     0,   939,  1286,   316,   317,   940,   319,  1287,
     941,   321,   942,   323,   324,   325,  1288,   326,   327,  1289,
    1290,   328,   329,   330,  1291,  1292,   331,   943,   944,   334,
     945,   946,   337,   338,   339,   340,   341,   342,   343,   344,
     345,     0,     0,   346,  1293,  1294,  1295,  1296,   347,   348,
     947,   948,   351,   352,   949,   354,   355,   356,  1297,   357,
     358,   359,   360,   361,     0,     0,   362,  1298,   363,   364,
     365,   950,   367,   368,   369,   370,  1299,   371,   372,   373,
       0,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,  1300,   384,   385,   951,   387,   388,   389,   952,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
    1301,   953,   402,   403,   404,   405,   406,   407,   954,   409,
     410,     0,   411,   955,     0,   413,   956,   415,  1302,     0,
     416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,   957,   429,   958,   431,  1303,   432,   433,  1304,
     434,   959,   436,   437,   438,   439,   440,  1305,   960,   961,
    1306,     0,  1307,   443,   444,   962,   446,   963,  1308,   448,
     449,   964,   451,   452,   453,   454,   455,  1309,  1310,   456,
     457,   458,  1311,   459,   460,   461,   462,  1312,   463,   464,
     465,   466,   467,  1313,   966,  1314,   470,   967,   472,     0,
     473,   474,   475,   476,     0,  1315,  1316,   477,  1317,  1318,
     478,   479,   480,   481,   482,   483,   968,   969,   970,   971,
     972,   973,   974,   975,   976,   977,   978,   495,   496,   497,
     498,  1244,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     113,   114,   115,   116,     0,  2228,   118,   119,   120,  1245,
     121,   122,   123,  1246,  1247,  1248,   898,  1249,     0,  1250,
    1251,  1252,   899,   125,   126,  1253,   127,   128,   129,   900,
     131,   132,   133,   901,   902,   903,   904,   905,  1254,   139,
     140,   141,   142,   143,   144,  1255,  1256,   145,   146,   906,
     907,   149,  1257,   150,   151,   152,   153,   908,  1258,   909,
    1259,   910,   157,   158,   159,   160,   161,   911,   163,   164,
     165,  1260,   166,   167,   168,   169,   170,     0,  1261,   912,
     172,   173,   174,   175,   176,   177,   178,   179,   180,   181,
     913,   914,   184,  1262,   185,  1263,   186,   187,   188,   189,
     190,   191,  1264,   192,     0,   193,   194,   195,   196,  1265,
    1266,   197,   198,   199,  2229,   201,     0,     0,  1267,   202,
     203,   204,  1268,   205,   206,   207,  1269,   208,   209,   210,
     211,   915,   213,   214,   215,   216,   217,   916,  1270,   219,
    1271,   220,   221,   917,   223,  1272,   224,  1273,   225,   918,
    1274,   919,   228,   229,   920,   921,   232,  1275,   233,     0,
    1276,  1277,   922,   923,     0,   236,  1278,   237,   238,   239,
     240,   241,   242,   243,   924,   245,   246,   247,   248,  1279,
     249,   250,   251,   252,   253,   254,   255,  1280,   256,   925,
     926,   259,   260,   261,   262,   263,   927,   928,  1281,   929,
    1282,   267,   930,   931,   270,   932,   272,     0,   273,   274,
     275,   276,   277,  1283,  1284,   278,   933,   280,   934,  1285,
     282,   283,   284,   285,   286,   287,   288,   289,   935,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   936,   937,   938,
     312,   313,   314,     0,   939,  1286,   316,   317,   940,   319,
    1287,   941,   321,   942,   323,   324,   325,  1288,   326,   327,
    1289,  1290,   328,   329,   330,  1291,  1292,   331,   943,   944,
     334,   945,   946,   337,   338,   339,   340,   341,   342,   343,
     344,   345,     0,     0,   346,  1293,  1294,  1295,  1296,   347,
     348,   947,   948,   351,   352,   949,   354,   355,   356,  1297,
     357,   358,   359,   360,   361,     0,     0,   362,  1298,   363,
     364,   365,   950,   367,   368,   369,   370,  1299,   371,   372,
     373,     0,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,  1300,   384,   385,   951,   387,   388,   389,   952,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,  1301,   953,   402,   403,   404,   405,   406,  2230,   954,
     409,   410,     0,   411,   955,     0,   413,   956,   415,  1302,
       0,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   957,   429,   958,   431,  1303,   432,   433,
    1304,   434,   959,   436,   437,   438,   439,   440,  1305,   960,
     961,  1306,     0,  1307,   443,   444,   962,   446,   963,  1308,
     448,   449,   964,   451,   452,   453,   454,   455,  1309,  1310,
     456,   457,   458,  1311,   459,   460,   461,   462,  1312,   463,
     464,   465,   466,   467,  1313,   966,  1314,   470,   967,   472,
       0,   473,   474,   475,   476,     0,  1315,  1316,   477,  1317,
    1318,   478,   479,   480,   481,   482,   483,   968,   969,   970,
     971,   972,   973,   974,   975,   976,   977,   978,   495,   496,
     497,   498,   897,     0,   635,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   113,   114,   115,   116,     0,   117,   118,   119,   120,
       0,   121,   122,   123,     0,     0,     0,   898,     0,     0,
       0,     0,     0,   899,   125,   126,     0,   127,   128,   129,
     900,   131,   132,   133,   901,   902,   903,   904,   905,     0,
     139,   140,   141,   142,   143,   144,     0,     0,   145,   146,
     906,   907,   149,     0,   150,   151,   152,   153,   908,     0,
     909,     0,   910,   157,   158,   159,   160,   161,   911,   163,
     164,   165,     0,   166,   167,   168,   169,   170,     0,     0,
     912,   172,   173,   174,   175,   176,   177,   178,   179,   180,
     181,   913,   914,   184,     0,   185,     0,   186,   187,   188,
     189,   190,   191,     0,   192,     0,   193,   194,   195,   196,
       0,     0,   197,   198,   199,   200,   201,     0,     0,     0,
     202,   203,   204,     0,   205,   206,   207,     0,   208,   209,
     210,   211,   915,   213,   214,   215,   216,   217,   916,  1470,
     219,     0,   220,   221,   917,   223,     0,   224,     0,   225,
     918,     0,   919,   228,   229,   920,   921,   232,     0,   233,
       0,     0,     0,   922,   923,     0,   236,     0,   237,   238,
     239,   240,   241,   242,   243,   924,   245,   246,   247,   248,
       0,   249,   250,   251,   252,   253,   254,   255,     0,   256,
     925,   926,   259,   260,   261,   262,   263,   927,   928,     0,
     929,     0,   267,   930,   931,   270,   932,   272,     0,   273,
     274,   275,   276,   277,     0,     0,   278,   933,   280,   934,
       0,   282,   283,   284,   285,   286,   287,   288,   289,   935,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   936,   937,
     938,   312,   313,   314,     0,   939,     0,   316,   317,   940,
     319,     0,   941,   321,   942,   323,   324,   325,     0,   326,
     327,  1471,     0,   328,   329,   330,     0,     0,   331,   943,
     944,   334,   945,   946,   337,   338,   339,   340,   341,   342,
     343,   344,   345,     0,     0,   346,     0,     0,     0,     0,
     347,   348,   947,   948,   351,   352,   949,   354,   355,   356,
       0,   357,   358,   359,   360,   361,     0,     0,   362,     0,
     363,   364,   365,   950,   367,   368,   369,   370,     0,   371,
     372,   373,     0,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,     0,   384,   385,   951,   387,   388,   389,
     952,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,     0,   953,   402,   403,   404,   405,   406,   407,
     954,   409,   410,     0,   411,   955,     0,   413,   956,   415,
       0,     0,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,   957,   429,   958,   431,     0,   432,
     433,     0,   434,   959,   436,   437,   438,   439,   440,     0,
     960,   961,     0,     0,     0,   443,   444,   962,   446,   963,
    1472,   448,   449,   964,   451,   452,   453,   454,   455,     0,
       0,   456,   457,   458,     0,   459,   460,   461,   462,     0,
     463,   464,   465,   466,   467,  1313,   966,     0,   470,   967,
     472,     0,   473,   474,   475,   476,     0,     0,     0,   477,
       0,     0,   478,   479,   480,   481,   482,   483,   968,   969,
     970,   971,   972,   973,   974,   975,   976,   977,   978,   495,
     496,   497,   498,   897,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   113,   114,   115,   116,     0,   117,   118,   119,
     120,     0,   121,   122,   123,     3,     4,     0,   898,     0,
       0,     0,     0,     0,   899,   125,   126,     0,   127,   128,
     129,   900,   131,   132,   133,   901,   902,   903,   904,   905,
       0,   139,   140,   141,   142,   143,   144,     0,     0,   145,
     146,   906,   907,   149,     0,   150,   151,   152,   153,   908,
       0,   909,     0,   910,   157,   158,   159,   160,   161,   911,
     163,   164,   165,     0,   166,   167,   168,   169,   170,     0,
       0,   912,   172,   173,   174,   175,   176,   177,   178,   179,
     180,   181,   913,   914,   184,     0,   185,     0,   186,   187,
     188,   189,   190,   191,     0,   192,     0,   193,   194,   195,
     196,     0,     0,   197,   198,   199,   200,   201,     0,     0,
       0,   202,   203,   204,     0,   205,   206,   207,     0,   208,
     209,   210,   211,   915,   213,   214,   215,   216,   217,   916,
       0,   219,     0,   220,   221,   917,   223,     0,   224,     0,
     225,   918,     0,   919,   228,   229,   920,   921,   232,     0,
     233,     0,     0,     0,   922,   923,     0,   236,     0,   237,
     238,   239,   240,   241,   242,   243,   924,   245,   246,   247,
     248,     0,   249,   250,   251,   252,   253,   254,   255,     0,
     256,   925,   926,   259,   260,   261,   262,   263,   927,   928,
       0,   929,     0,   267,   930,   931,   270,   932,   272,     0,
     273,   274,   275,   276,   277,     0,     0,   278,   933,   280,
     934,     0,   282,   283,   284,   285,   286,   287,   288,   289,
     935,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   936,
     937,   938,   312,   313,   314,     0,   939,     0,   316,   317,
     940,   319,     0,   941,   321,   942,   323,   324,   325,     0,
     326,   327,     0,     0,   328,   329,   330,     0,     0,   331,
     943,   944,   334,   945,   946,   337,   338,   339,   340,   341,
     342,   343,   344,   345,     0,     0,   346,     0,     0,     0,
       0,   347,   348,   947,   948,   351,   352,   949,   354,   355,
     356,     0,   357,   358,   359,   360,   361,     0,     0,   362,
       0,   363,   364,   365,   950,   367,   368,   369,   370,     0,
     371,   372,   373,     0,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,     0,   384,   385,   951,   387,   388,
     389,   952,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,     0,   953,   402,   403,   404,   405,   406,
     407,   954,   409,   410,     0,   411,   955,     0,   413,   956,
     415,     0,     0,   416,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,   427,   957,   429,   958,   431,     0,
     432,   433,     0,   434,   959,   436,   437,   438,   439,   440,
       0,   960,   961,     0,     0,     0,   443,   444,   962,   446,
     963,     0,   448,   449,   964,   451,   452,   453,   454,   455,
       0,     0,   456,   457,   458,     0,   459,   460,   461,   462,
       0,   463,   464,   465,   466,   467,  1313,   966,     0,   470,
     967,   472,     0,   473,   474,   475,   476,     0,     0,     0,
     477,     0,     0,   478,   479,   480,   481,   482,   483,   968,
     969,   970,   971,   972,   973,   974,   975,   976,   977,   978,
     495,   496,   497,   498,   112,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   113,   114,   115,   116,     0,   117,   118,
     119,   120,     0,   121,   122,   123,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   124,   125,   126,     0,   127,
     128,   129,   130,   131,   132,   133,   134,   135,   136,   137,
     138,     0,   139,   140,   141,   142,   143,   144,     0,   604,
     145,   146,   147,   148,   149,     0,   150,   151,   152,   153,
     605,     0,   606,     0,   156,   157,   158,   159,   160,   161,
     162,   163,   164,   165,     0,   166,   167,   168,   169,   170,
       0,     0,   171,   172,   173,   174,   175,   176,   177,   178,
     179,   180,   181,   182,   183,   184,     0,   185,     0,   186,
     187,   188,   189,   190,   191,     0,   192,     0,   193,   194,
     195,   196,     0,     0,   197,   198,   199,   200,   201,     0,
       0,     0,   202,   203,   204,     0,   205,   206,   207,     0,
     208,   209,   210,   211,   212,   213,   214,   215,   216,   217,
     607,     0,   219,     0,   220,   221,   222,   223,     0,   224,
       0,   225,   226,     0,   227,   228,   229,   230,   231,   232,
       0,   233,     0,     0,     0,   234,   235,     0,   236,     0,
     237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,     0,   249,   250,   251,   252,   253,   254,   255,
       0,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,     0,   266,     0,   267,   268,   269,   270,   271,   272,
       0,   273,   274,   275,   276,   277,     0,     0,   278,   279,
     280,   281,     0,   282,   283,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,     0,   315,     0,   316,
     317,   318,   319,     0,   610,   321,   322,   323,   324,   325,
       0,   326,   327,     0,     0,   328,   329,   330,     0,     0,
     331,   332,   333,   334,   335,   612,   337,   338,   339,   340,
     341,   342,   343,   344,   345,     0,     0,   346,     0,     0,
       0,     0,   347,   348,   613,   350,   351,   352,   353,   354,
     355,   356,     0,   357,   358,   359,   360,   361,     0,     0,
     362,     0,   363,   364,   365,   366,   367,   368,   369,   370,
       0,   371,   372,   373,     0,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,     0,   384,   385,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,     0,     0,   402,   403,   404,   405,
     406,   407,   408,   409,   410,     0,   411,   412,     0,   413,
     414,   415,     0,     0,   416,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,   428,   429,   615,   431,
       0,   432,   433,     0,   434,   435,   436,   437,   438,   439,
     440,     0,   441,   442,     0,     0,     0,   443,   444,   616,
     446,   617,     0,   448,   449,   618,   451,   452,   453,   454,
     455,     0,     0,   456,   457,   458,     0,   459,   460,   461,
     462,     0,   463,   464,   465,   466,   467,   468,   469,     0,
     470,   471,   472,     0,   473,   474,   475,   476,     0,     0,
       0,   477,     0,     0,   478,   479,   480,   481,   482,   483,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,   112,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   113,   114,   115,   116,     0,   117,
     118,   119,   120,     0,   121,   122,   123,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   124,   125,   126,     0,
     127,   128,   129,   130,   131,   132,   133,   134,   135,   136,
     137,   138,     0,   139,   140,   141,   142,   143,   144,     0,
       0,   145,   146,   147,   148,   149,     0,   150,   151,   152,
     153,   154,     0,   155,     0,   156,   157,   158,   159,   160,
     161,   162,   163,   164,   165,     0,   166,   167,   168,   169,
     170,     0,     0,   171,   172,   173,   174,   175,   176,   177,
     178,   179,   180,   181,   182,   183,   184,     0,   185,     0,
     186,   187,   188,   189,   190,   191,     0,   192,     0,   193,
     194,   195,   196,     0,     0,   197,   198,   199,   200,   201,
       0,     0,     0,   202,   203,   204,     0,   205,   206,   207,
       0,   208,   209,   210,   211,   212,   213,   214,   215,   216,
     217,   218,     0,   219,     0,   220,   221,   222,   223,     0,
     224,     0,   225,   226,     0,   227,   228,   229,   230,   231,
     232,     0,   233,     0,     0,     0,   234,   235,     0,   236,
       0,   237,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,     0,   249,   250,   251,   252,   253,   254,
     255,     0,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,     0,   266,     0,   267,   268,   269,   270,   271,
     272,     0,   273,   274,   275,   276,   277,     0,     0,   278,
     279,   280,   281,     0,   282,   283,   284,   285,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,     0,   315,     0,
     316,   317,   318,   319,     0,   320,   321,   322,   323,   324,
     325,     0,   326,   327,     0,     0,   328,   329,   330,     0,
       0,   331,   332,   333,   334,   335,   336,   337,   338,   339,
     340,   341,   342,   343,   344,   345,     0,     0,   346,     0,
       0,     0,     0,   347,   348,   349,   350,   351,   352,   353,
     354,   355,   356,     0,   357,   358,   359,   360,   361,     0,
       0,   362,     0,   363,   364,   365,   366,   367,   368,   369,
     370,     0,   371,   372,   373,     0,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,     0,   384,   385,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,     0,     0,   402,   403,   404,
     405,   406,   407,   408,   409,   410,     0,   411,   412,     0,
     413,   414,   415,     0,     0,   416,   417,   418,   419,   420,
     421,   422,   423,   424,   425,   426,   427,   428,   429,   430,
     431,     0,   432,   433,     0,   434,   435,   436,   437,   438,
     439,   440,     0,   441,   442,     0,     0,     0,   443,   444,
     445,   446,   447,     0,   448,   449,   450,   451,   452,   453,
     454,   455,     0,     0,   456,   457,   458,     0,   459,   460,
     461,   462,     0,   463,   464,   465,   466,   467,   468,   469,
       0,   470,   471,   472,     0,   473,   474,   475,   476,     0,
       0,     0,   477,     0,     0,   478,   479,   480,   481,   482,
     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   506,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   113,   114,   115,   116,     0,
     117,   118,   119,   120,     0,   121,   122,   123,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   125,   126,
       0,   127,   128,   129,     0,   131,   132,   133,   134,   135,
       0,   137,   138,     0,   139,   140,   141,   142,   143,   144,
       0,     0,   145,   146,   147,   148,   149,  1750,   150,   151,
     152,   153,   154,     0,     0,  1751,   156,   157,   158,   159,
     160,   161,     0,   163,   164,   165,  1752,   166,   167,   168,
     169,   170,     0,     0,     0,   172,   173,   174,   175,   176,
     177,   178,   179,   180,   181,   182,   183,   184,     0,   185,
       0,   186,   187,   188,   189,   190,   191,     0,   192,     0,
     193,   194,   195,   196,     0,     0,   197,   198,   199,   200,
     201,     0,     0,     0,   202,   203,   204,     0,   205,   206,
     207,     0,   208,   209,   210,   211,   212,   213,   214,   215,
     216,   217,   218,     0,   219,     0,   220,   221,   222,   223,
       0,   224,  1753,   225,     0,     0,     0,   228,   229,   507,
       0,   232,     0,   233,     0,     0,     0,   234,   235,     0,
     236,     0,   237,   238,   239,   240,   241,  1754,   243,     0,
     245,   246,   247,   248,     0,   249,   250,   251,   252,   253,
     254,   255,     0,   256,     0,   258,   259,   260,   261,   262,
     263,   264,   265,     0,   266,     0,   267,     0,     0,   270,
       0,   272,     0,   273,   274,   275,   276,   277,     0,     0,
     278,     0,   280,     0,     0,   282,   283,   284,   285,   286,
     287,   288,   289,   508,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,     0,   311,   312,   313,   314,     0,   315,
       0,   316,   317,     0,   319,     0,   320,   321,   322,   323,
     324,   325,     0,   326,   327,     0,     0,   328,   329,   330,
       0,     0,   331,   332,     0,   334,     0,   336,   337,   338,
     339,   340,   341,   342,   343,   344,   345,     0,     0,   346,
       0,     0,     0,     0,   347,   348,   349,     0,   351,   352,
     353,   354,   355,   356,  1755,   357,   358,   359,   360,   361,
       0,     0,   362,     0,   363,   364,   365,   366,   367,   368,
     369,   370,     0,   371,   372,   373,     0,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,     0,   384,   385,
       0,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,     0,     0,   402,   403,
     404,   405,   406,   407,   408,   409,   410,     0,   411,     0,
       0,   413,   414,   415,     0,     0,   416,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,   509,   429,
     430,   431,     0,   432,   433,     0,   434,     0,   436,   437,
     438,   439,   440,     0,   441,   442,     0,     0,     0,   443,
     444,   445,   446,   447,     0,   448,   449,   450,   451,   452,
     453,   454,   455,     0,  1756,   456,   457,   458,     0,   459,
     460,   461,   462,     0,   463,   464,   465,   466,   467,   468,
     469,     0,   470,     0,   472,     0,   473,   474,   475,   476,
       0,     0,     0,   477,     0,     0,   478,   479,   480,   481,
     482,   483,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,   498,   506,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   113,   114,   115,   116,
       0,   117,   118,   119,   120,     0,   121,   122,   123,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   125,
     126,     0,   127,   128,   129,     0,   131,   132,   133,   134,
     135,     0,   137,   138,     0,   139,   140,   141,   142,   143,
     144,     0,     0,   145,   146,   147,   148,   149,  1750,   150,
     151,   152,   153,   154,     0,     0,     0,   156,   157,   158,
     159,   160,   161,     0,   163,   164,   165,  1752,   166,   167,
     168,   169,   170,     0,     0,     0,   172,   173,   174,   175,
     176,   177,   178,   179,   180,   181,   182,   183,   184,     0,
     185,     0,   186,   187,   188,   189,   190,   191,     0,   192,
       0,   193,   194,   195,   196,     0,     0,   197,   198,   199,
     200,   201,     0,     0,     0,   202,   203,   204,     0,   205,
     206,   207,     0,   208,   209,   210,   211,   212,   213,   214,
     215,   216,   217,   218,     0,   219,     0,   220,   221,   222,
     223,     0,   224,  1753,   225,     0,     0,     0,   228,   229,
     507,     0,   232,     0,   233,     0,     0,     0,   234,   235,
       0,   236,     0,   237,   238,   239,   240,   241,   242,   243,
       0,   245,   246,   247,   248,     0,   249,   250,   251,   252,
     253,   254,   255,     0,   256,     0,   258,   259,   260,   261,
     262,   263,   264,   265,     0,   266,     0,   267,     0,     0,
     270,     0,   272,     0,   273,   274,   275,   276,   277,     0,
       0,   278,     0,   280,  2302,     0,   282,   283,   284,   285,
     286,   287,   288,   289,   508,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,     0,   311,   312,   313,   314,     0,
     315,     0,   316,   317,     0,   319,     0,   320,   321,   322,
     323,   324,   325,     0,   326,   327,     0,     0,   328,   329,
     330,     0,     0,   331,   332,     0,   334,     0,   336,   337,
     338,   339,   340,   341,   342,   343,   344,   345,     0,     0,
     346,     0,     0,     0,     0,   347,   348,   349,     0,   351,
     352,   353,   354,   355,   356,  1755,   357,   358,   359,   360,
     361,     0,     0,   362,     0,   363,   364,   365,   366,   367,
     368,   369,   370,     0,   371,   372,   373,     0,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,     0,   384,
     385,     0,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,     0,     0,   402,
     403,   404,   405,   406,   407,   408,   409,   410,     0,   411,
       0,     0,   413,   414,   415,     0,     0,   416,   417,   418,
     419,   420,   421,   422,   423,   424,   425,   426,   427,   509,
     429,   430,   431,     0,   432,   433,     0,   434,     0,   436,
     437,   438,   439,   440,     0,   441,   442,     0,     0,     0,
     443,   444,   445,   446,   447,     0,   448,   449,   450,   451,
     452,   453,   454,   455,     0,  1756,   456,   457,   458,     0,
     459,   460,   461,   462,     0,   463,   464,   465,   466,   467,
     468,   469,     0,   470,     0,   472,     0,   473,   474,   475,
     476,     0,     0,     0,   477,     0,     0,   478,   479,   480,
     481,   482,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,   506,     0,
     529,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   113,   114,   115,
     116,     0,   117,   118,   119,   120,     0,   121,   122,   123,
       3,     4,     0,     0,     0,     0,     0,     0,     0,     0,
     125,   126,     0,   127,   128,   129,     0,   131,   132,   133,
     134,   135,     0,   137,   138,     0,   139,   140,   141,   142,
     143,   144,     0,     0,   145,   146,   147,   148,   149,     0,
     150,   151,   152,   153,   154,     0,     0,     0,   156,   157,
     158,   159,   160,   161,     0,   163,   164,   165,     0,   166,
     167,   168,   169,   170,     0,     0,     0,   172,   173,   174,
     175,   176,   177,   178,   179,   180,   181,   182,   183,   184,
       0,   185,     0,   186,   187,   188,   189,   190,   191,     0,
     192,     0,   193,   194,   195,   196,     0,     0,   197,   198,
     199,   200,   201,     0,     0,     0,   202,   203,   204,     0,
     205,   206,   207,     0,   208,   209,   210,   211,   212,   213,
     214,   215,   216,   217,   218,     0,   219,     0,   220,   221,
     222,   223,     0,   224,     0,   225,     0,     0,     0,   228,
     229,   507,     0,   232,     0,   233,     0,     0,     0,   234,
     235,     0,   236,     0,   237,   238,   239,   240,   241,   242,
     243,     0,   245,   246,   247,   248,     0,   249,   250,   251,
     252,   253,   254,   255,     0,   256,     0,   258,   259,   260,
     261,   262,   263,   264,   265,     0,   266,     0,   267,     0,
       0,   270,     0,   272,     0,   273,   274,   275,   276,   277,
       0,     0,   278,     0,   280,     0,     0,   282,   283,   284,
     285,   286,   287,   288,   289,   508,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,     0,   311,   312,   313,   314,
       0,   315,     0,   316,   317,     0,   319,     0,   320,   321,
     322,   323,   324,   325,     0,   326,   327,     0,     0,   328,
     329,   330,     0,     0,   331,   332,     0,   334,     0,   336,
     337,   338,   339,   340,   341,   342,   343,   344,   345,     0,
       0,   346,     0,     0,     0,     0,   347,   348,   349,     0,
     351,   352,   353,   354,   355,   356,     0,   357,   358,   359,
     360,   361,     0,     0,   362,     0,   363,   364,   365,   366,
     367,   368,   369,   370,     0,   371,   372,   373,     0,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,     0,
     384,   385,     0,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,     0,     0,
     402,   403,   404,   405,   406,   407,   408,   409,   410,     0,
     411,     0,     0,   413,   414,   415,     0,     0,   416,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     509,   429,   430,   431,     0,   432,   433,     0,   434,     0,
     436,   437,   438,   439,   440,     0,   441,   442,     0,     0,
       0,   443,   444,   445,   446,   447,     0,   448,   449,   450,
     451,   452,   453,   454,   455,     0,     0,   456,   457,   458,
       0,   459,   460,   461,   462,     0,   463,   464,   465,   466,
     467,   468,   469,     0,   470,     0,   472,     0,   473,   474,
     475,   476,     0,     0,     0,   477,     0,     0,   478,   479,
     480,   481,   482,   483,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,   498,   506,
       0,   529,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   113,   114,
     115,   116,     0,   117,   118,   119,   120,   530,   121,   122,
     123,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   125,   126,     0,   127,   128,   129,     0,   131,   132,
     133,   134,   135,     0,   137,   138,     0,   139,   140,   141,
     142,   143,   144,     0,     0,   145,   146,   147,   148,   149,
       0,   150,   151,   152,   153,   154,     0,     0,     0,   156,
     157,   158,   159,   160,   161,     0,   163,   164,   165,     0,
     166,   167,   168,   169,   170,     0,     0,     0,   172,   173,
     174,   175,   176,   177,   178,   179,   180,   181,   182,   183,
     184,     0,   185,     0,   186,   187,   188,   189,   190,   191,
       0,   192,     0,   193,   194,   195,   196,     0,     0,   197,
     198,   199,   200,   201,     0,     0,     0,   202,   203,   204,
       0,   205,   206,   207,     0,   208,   209,   210,   211,   212,
     213,   214,   215,   216,   217,   218,     0,   219,     0,   220,
     221,   222,   223,     0,   224,     0,   225,     0,     0,     0,
     228,   229,   507,     0,   232,     0,   233,     0,     0,     0,
     234,   235,     0,   236,     0,   237,   238,   239,   240,   241,
     242,   243,     0,   245,   246,   247,   248,     0,   249,   250,
     251,   252,   253,   254,   255,     0,   256,     0,   258,   259,
     260,   261,   262,   263,   264,   265,     0,   266,     0,   267,
       0,     0,   270,     0,   272,     0,   273,   274,   275,   276,
     277,     0,     0,   278,     0,   280,     0,     0,   282,   283,
     284,   285,   286,   287,   288,   289,   508,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,     0,   311,   312,   313,
     314,     0,   315,     0,   316,   317,     0,   319,     0,   320,
     321,   322,   323,   324,   325,     0,   326,   327,     0,     0,
     328,   329,   330,     0,     0,   331,   332,     0,   334,     0,
     336,   337,   338,   339,   340,   341,   342,   343,   344,   345,
       0,     0,   346,     0,     0,     0,     0,   347,   348,   349,
       0,   351,   352,   353,   531,   355,   356,     0,   357,   358,
     359,   360,   361,     0,     0,   362,     0,   363,   364,   365,
     366,   367,   368,   369,   370,     0,   371,   372,   373,     0,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
       0,   384,   385,     0,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,     0,
       0,   402,   403,   404,   405,   406,   407,   408,   409,   410,
       0,   411,     0,     0,   413,   414,   415,     0,     0,   416,
     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
     427,   509,   429,   430,   431,     0,   432,   433,     0,   434,
       0,   436,   437,   438,   439,   440,     0,   441,   442,     0,
       0,     0,   443,   444,   445,   446,   447,     0,   448,   449,
     450,   451,   452,   453,   454,   455,     0,     0,   456,   457,
     458,     0,   459,   460,   461,   462,     0,   463,   464,   465,
     466,   467,   468,   469,     0,   470,     0,   472,     0,   473,
     474,   475,   476,     0,     0,     0,   477,     0,     0,   478,
     479,   480,   481,   482,   483,   484,   485,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
     506,     0,   529,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   113,
     114,   115,   116,     0,   117,   118,   119,   120,     0,   121,
     122,   123,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   125,   126,     0,   127,   128,   129,     0,   131,
     132,   133,   134,   135,     0,   137,   138,     0,   139,   140,
     141,   142,   143,   144,     0,     0,   145,   146,   147,   148,
     149,     0,   150,   151,   152,   153,   154,     0,     0,     0,
     156,   157,   158,   159,   160,   161,     0,   163,   164,   165,
       0,   166,   167,   168,   169,   170,     0,     0,     0,   172,
     173,   174,   175,   176,   177,   178,   179,   180,   181,   182,
     183,   184,     0,   185,     0,   186,   187,   188,   189,   190,
     191,     0,   192,     0,   193,   194,   195,   196,     0,     0,
     197,   198,   199,   200,   201,     0,     0,     0,   202,   203,
     204,     0,   205,   206,   207,     0,   208,   209,   210,   211,
     212,   213,   214,   215,   216,   217,   218,     0,   219,     0,
     220,   221,   222,   223,     0,   224,     0,   225,     0,     0,
       0,   228,   229,   507,     0,   232,     0,   233,     0,     0,
       0,   234,   235,     0,   236,     0,   237,   238,   239,   240,
     241,   242,   243,     0,   245,   246,   247,   248,     0,   249,
     250,   251,   252,   253,   254,   255,     0,   256,     0,   258,
     259,   260,   261,   262,   263,   264,   265,     0,   266,     0,
     267,     0,     0,   270,     0,   272,     0,   273,   274,   275,
     276,   277,     0,     0,   278,     0,   280,     0,     0,   282,
     283,   284,   285,   286,   287,   288,   289,   508,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,     0,   311,   312,
     313,   314,     0,   315,     0,   316,   317,     0,   319,     0,
     320,   321,   322,   323,   324,   325,     0,   326,   327,     0,
     611,   328,   329,   330,     0,     0,   331,   332,     0,   334,
       0,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,     0,     0,   346,     0,     0,     0,     0,   347,   348,
     349,     0,   351,   352,   353,   354,   355,   356,     0,   357,
     358,   359,   360,   361,     0,     0,   362,     0,   363,   364,
     365,   366,   367,   368,   369,   370,     0,   371,   372,   373,
       0,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,     0,   384,   385,     0,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
       0,     0,   402,   403,   404,   405,   406,   407,   408,   409,
     410,     0,   411,     0,     0,   413,   414,   415,     0,     0,
     416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,   509,   429,   430,   431,     0,   432,   433,     0,
     434,     0,   436,   437,   438,   439,   440,     0,   441,   442,
       0,     0,     0,   443,   444,   445,   446,   447,     0,   448,
     449,   450,   451,   452,   453,   454,   455,     0,     0,   456,
     457,   458,     0,   459,   460,   461,   462,     0,   463,   464,
     465,   466,   467,   468,   469,     0,   470,     0,   472,     0,
     473,   474,   475,   476,     0,     0,     0,   477,     0,     0,
     478,   479,   480,   481,   482,   483,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,   506,     0,   529,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     113,   114,   115,   116,     0,   117,   118,   119,   120,     0,
     121,   122,   123,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   125,   126,     0,   127,   128,   129,     0,
     131,   132,   133,   134,   135,     0,   137,   138,     0,   139,
     140,   141,   142,   143,   144,     0,     0,   145,   146,   147,
     148,   149,     0,   150,   151,   152,   153,   154,     0,     0,
       0,   156,   157,   158,   159,   160,   161,     0,   163,   164,
     165,     0,   166,   167,   168,   169,   170,     0,     0,     0,
     172,   173,   174,   175,   176,   177,   178,   179,   180,   181,
     182,   183,   184,     0,   185,     0,   186,   187,   188,   189,
     190,   191,     0,   192,     0,   193,   194,   195,   196,     0,
       0,   197,   198,   199,   200,   201,     0,     0,     0,   202,
     203,   204,     0,   205,   206,   207,     0,   208,   209,   210,
     211,   212,   213,   214,   215,   216,   217,   218,     0,   219,
       0,   220,   221,   222,   223,     0,   224,     0,   225,     0,
       0,     0,   228,   229,   507,     0,   232,     0,   233,     0,
       0,     0,   234,   235,     0,   236,     0,   237,   238,   239,
     240,   241,   770,   243,     0,   245,   246,   247,   248,     0,
     249,   250,   251,   252,   253,   254,   255,     0,   256,     0,
     258,   259,   260,   261,   262,   263,   264,   265,     0,   266,
       0,   267,     0,     0,   270,     0,   272,     0,   273,   274,
     275,   276,   277,     0,     0,   278,     0,   280,     0,     0,
     282,   283,   284,   285,   286,   287,   288,   289,   508,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,     0,   311,
     312,   313,   314,     0,   315,     0,   316,   317,     0,   319,
       0,   320,   321,   322,   323,   324,   325,     0,   326,   327,
       0,   611,   328,   329,   330,     0,     0,   331,   332,     0,
     334,     0,   336,   337,   338,   339,   340,   341,   342,   343,
     344,   345,     0,     0,   346,     0,     0,     0,     0,   347,
     348,   349,     0,   351,   352,   353,   354,   355,   356,     0,
     357,   358,   359,   360,   361,     0,     0,   362,     0,   363,
     364,   365,   366,   367,   368,   369,   370,     0,   371,   372,
     373,     0,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,     0,   384,   385,     0,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,     0,     0,   402,   403,   404,   405,   406,   407,   408,
     409,   410,     0,   411,     0,     0,   413,   414,   415,     0,
       0,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   509,   429,   430,   431,     0,   432,   433,
       0,   434,     0,   436,   437,   438,   439,   440,     0,   441,
     442,     0,     0,     0,   443,   444,   445,   446,   447,     0,
     448,   449,   450,   451,   452,   453,   454,   455,     0,     0,
     456,   457,   458,     0,   459,   460,   461,   462,     0,   463,
     464,   465,   466,   467,   468,   469,     0,   470,     0,   472,
       0,   473,   474,   475,   476,     0,     0,     0,   477,     0,
       0,   478,   479,   480,   481,   482,   483,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,   498,   506,     0,   529,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   113,   114,   115,   116,     0,   117,   118,   119,   120,
     799,   121,   122,   123,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   125,   126,     0,   127,   128,   129,
       0,   131,   132,   133,   134,   135,     0,   137,   138,     0,
     139,   140,   141,   142,   143,   144,     0,     0,   145,   146,
     147,   148,   149,     0,   150,   151,   152,   153,   154,     0,
       0,     0,   156,   157,   158,   159,   160,   161,     0,   163,
     164,   165,     0,   166,   167,   168,   169,   170,     0,     0,
       0,   172,   173,   174,   175,   176,   177,   178,   179,   180,
     181,   182,   183,   184,     0,   185,     0,   186,   187,   188,
     189,   190,   191,     0,   192,     0,   193,   194,   195,   196,
       0,     0,   197,   198,   199,   200,   201,     0,     0,     0,
     202,   203,   204,     0,   205,   206,   207,     0,   208,   209,
     210,   211,   212,   213,   214,   215,   216,   217,   218,     0,
     219,     0,   220,   221,   222,   223,     0,   224,     0,   225,
       0,     0,     0,   228,   229,   507,     0,   232,     0,   233,
       0,     0,     0,   234,   235,     0,   236,     0,   237,   238,
     239,   240,   241,   242,   243,     0,   245,   246,   247,   248,
       0,   249,   250,   251,   252,   253,   254,   255,     0,   256,
       0,   258,   259,   260,   261,   262,   263,   264,   265,     0,
     266,     0,   267,     0,     0,   270,     0,   272,     0,   273,
     274,   275,   276,   277,     0,     0,   278,     0,   280,     0,
       0,   282,   283,   284,   285,   286,   287,   288,   289,   508,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,     0,
     311,   312,   313,   314,     0,   315,     0,   316,   317,     0,
     319,     0,   320,   321,   322,   323,   324,   325,     0,   326,
     327,     0,     0,   328,   329,   330,     0,     0,   331,   332,
       0,   334,     0,   336,   337,   338,   339,   340,   341,   342,
     343,   344,   345,     0,     0,   346,     0,     0,     0,     0,
     347,   348,   349,     0,   351,   352,   353,   354,   355,   356,
       0,   357,   358,   359,   360,   361,     0,     0,   362,     0,
     363,   364,   365,   366,   367,   368,   369,   370,     0,   371,
     372,   373,     0,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,     0,   384,   385,     0,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,     0,     0,   402,   403,   404,   405,   406,   407,
     408,   409,   410,     0,   411,     0,     0,   413,   414,   415,
       0,     0,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,   509,   429,   430,   431,     0,   432,
     433,     0,   434,     0,   436,   437,   438,   439,   440,     0,
     441,   442,     0,     0,     0,   443,   444,   445,   446,   447,
       0,   448,   449,   450,   451,   452,   453,   454,   455,     0,
       0,   456,   457,   458,     0,   459,   460,   461,   462,     0,
     463,   464,   465,   466,   467,   468,   469,     0,   470,     0,
     472,     0,   473,   474,   475,   476,     0,     0,     0,   477,
       0,     0,   478,   479,   480,   481,   482,   483,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,   498,   506,  1968,     0,     0,     0,     0,  1969,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   113,   114,   115,   116,     0,   117,   118,   119,
     120,     0,   121,   122,   123,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   125,   126,     0,   127,   128,
     129,     0,   131,   132,   133,   134,   135,     0,   137,   138,
       0,   139,   140,   141,   142,   143,   144,     0,     0,   145,
     146,   147,   148,   149,     0,   150,   151,   152,   153,   154,
       0,     0,     0,   156,   157,   158,   159,   160,   161,     0,
     163,   164,   165,     0,   166,   167,   168,   169,   170,     0,
       0,     0,   172,   173,   174,   175,   176,   177,   178,   179,
     180,   181,   182,   183,   184,     0,   185,     0,   186,   187,
     188,   189,   190,   191,     0,   192,     0,   193,   194,   195,
     196,     0,     0,   197,   198,   199,   200,   201,     0,     0,
       0,   202,   203,   204,     0,   205,   206,   207,     0,   208,
     209,   210,   211,   212,   213,   214,   215,   216,   217,   218,
       0,   219,     0,   220,   221,   222,   223,     0,   224,     0,
     225,     0,     0,     0,   228,   229,   507,     0,   232,     0,
     233,     0,     0,     0,   234,   235,     0,   236,     0,   237,
     238,   239,   240,   241,   242,   243,     0,   245,   246,   247,
     248,     0,   249,   250,   251,   252,   253,   254,   255,     0,
     256,     0,   258,   259,   260,   261,   262,   263,   264,   265,
       0,   266,     0,   267,     0,     0,   270,     0,   272,     0,
     273,   274,   275,   276,   277,     0,     0,   278,     0,   280,
       0,     0,   282,   283,   284,   285,   286,   287,   288,   289,
     508,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
       0,   311,   312,   313,   314,     0,   315,     0,   316,   317,
       0,   319,     0,   320,   321,   322,   323,   324,   325,     0,
     326,   327,     0,     0,   328,   329,   330,     0,     0,   331,
     332,     0,   334,     0,   336,   337,   338,   339,   340,   341,
     342,   343,   344,   345,     0,     0,   346,     0,     0,     0,
       0,   347,   348,   349,     0,   351,   352,   353,   354,   355,
     356,     0,   357,   358,   359,   360,   361,     0,     0,   362,
       0,   363,   364,   365,   366,   367,   368,   369,   370,     0,
     371,   372,   373,     0,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,     0,   384,   385,     0,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,     0,     0,   402,   403,   404,   405,   406,
     407,   408,   409,   410,     0,   411,     0,     0,   413,   414,
     415,     0,     0,   416,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,   427,   509,   429,   430,   431,     0,
     432,   433,     0,   434,     0,   436,   437,   438,   439,   440,
       0,   441,   442,     0,     0,     0,   443,   444,   445,   446,
     447,     0,   448,   449,   450,   451,   452,   453,   454,   455,
       0,     0,   456,   457,   458,     0,   459,   460,   461,   462,
       0,   463,   464,   465,   466,   467,   468,   469,     0,   470,
       0,   472,     0,   473,   474,   475,   476,     0,     0,     0,
     477,     0,     0,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   506,     0,   529,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   113,   114,   115,   116,     0,   117,   118,
     119,   120,     0,   121,   122,   123,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   125,   126,     0,   127,
     128,   129,     0,   131,   132,   133,   134,   135,     0,   137,
     138,     0,   139,   140,   141,   142,   143,   144,     0,     0,
     145,   146,   147,   148,   149,     0,   150,   151,   152,   153,
     154,     0,     0,     0,   156,   157,   158,   159,   160,   161,
       0,   163,   164,   165,     0,   166,   167,   168,   169,   170,
       0,     0,     0,   172,   173,   174,   175,   176,   177,   178,
     179,   180,   181,   182,   183,   184,     0,   185,     0,   186,
     187,   188,   189,   190,   191,     0,   192,     0,   193,   194,
     195,   196,     0,     0,   197,   198,   199,   200,   201,     0,
       0,     0,   202,   203,   204,     0,   205,   206,   207,     0,
     208,   209,   210,   211,   212,   213,   214,   215,   216,   217,
     218,     0,   219,     0,   220,   221,   222,   223,     0,   224,
       0,   225,     0,     0,     0,   228,   229,   507,     0,  1976,
       0,   233,     0,     0,     0,   234,   235,     0,   236,     0,
     237,   238,   239,   240,   241,   242,   243,     0,   245,   246,
     247,   248,     0,   249,   250,   251,   252,   253,   254,   255,
       0,   256,     0,   258,   259,   260,   261,   262,   263,   264,
     265,     0,   266,     0,   267,     0,     0,   270,     0,   272,
       0,   273,   274,   275,   276,   277,     0,     0,   278,     0,
     280,     0,     0,   282,   283,  1977,   285,   286,   287,   288,
     289,   508,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,     0,   311,   312,   313,   314,     0,   315,     0,   316,
     317,     0,   319,     0,   320,   321,   322,   323,   324,   325,
       0,   326,   327,     0,     0,   328,   329,   330,     0,     0,
     331,   332,     0,   334,     0,   336,   337,   338,   339,   340,
     341,   342,   343,   344,   345,     0,     0,   346,     0,     0,
       0,     0,   347,   348,   349,     0,   351,   352,   353,   354,
     355,   356,     0,   357,   358,   359,   360,   361,     0,     0,
     362,     0,   363,   364,   365,   366,   367,   368,   369,   370,
       0,   371,   372,   373,     0,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,     0,   384,   385,     0,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,     0,     0,   402,   403,   404,   405,
     406,   407,   408,   409,   410,     0,   411,     0,     0,   413,
     414,   415,     0,     0,   416,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,   509,   429,   430,   431,
       0,   432,   433,  1978,   434,     0,   436,  1979,   438,  1980,
     440,     0,   441,   442,     0,     0,     0,   443,   444,   445,
     446,   447,     0,   448,   449,   450,   451,   452,   453,   454,
     455,     0,     0,   456,   457,  1981,     0,   459,   460,   461,
     462,     0,   463,   464,   465,   466,   467,   468,   469,     0,
     470,     0,   472,     0,   473,   474,   475,   476,     0,     0,
       0,   477,     0,     0,   478,   479,   480,   481,   482,   483,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,   506,     0,   529,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   113,   114,   115,   116,     0,   117,
     118,   119,   120,     0,   121,   122,   123,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   125,   126,     0,
     127,   128,   129,     0,   131,   132,   133,   134,   135,     0,
     137,   138,     0,   139,   140,   141,   142,   143,   144,     0,
       0,   145,   146,   147,   148,   149,     0,   150,   151,   152,
     153,   154,     0,     0,     0,   156,   157,   158,   159,   160,
     161,     0,   163,   164,   165,     0,   166,   167,   168,   169,
     170,     0,     0,     0,   172,   173,   174,   175,   176,   177,
     178,   179,   180,   181,   182,   183,   184,     0,   185,     0,
     186,   187,   188,   189,   190,   191,     0,   192,     0,   193,
     194,   195,   196,     0,     0,   197,   198,   199,   200,   201,
       0,     0,     0,   202,   203,   204,     0,   205,   206,   207,
       0,   208,   209,   210,   211,   212,   213,   214,   215,   216,
     217,   218,     0,   219,     0,   220,   221,   222,   223,     0,
     224,     0,   225,     0,     0,     0,   228,   229,   507,     0,
     232,     0,   233,     0,     0,     0,   234,   235,     0,   236,
       0,   237,   238,   239,   240,   241,   242,   243,     0,   245,
     246,   247,   248,     0,   249,   250,   251,   252,   253,   254,
     255,     0,   256,     0,   258,   259,   260,   261,   262,   263,
     264,   265,     0,   266,     0,   267,     0,     0,   270,     0,
     272,     0,   273,   274,   275,   276,   277,     0,     0,   278,
       0,   280,     0,     0,   282,   283,   284,   285,   286,   287,
     288,   289,   508,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,     0,   311,   312,   313,   314,     0,   315,     0,
     316,   317,     0,   319,     0,   320,   321,   322,   323,   324,
     325,     0,   326,   327,     0,     0,   328,   329,   330,     0,
       0,   331,   332,     0,   334,     0,   336,   337,   338,   339,
     340,   341,   342,   343,   344,   345,     0,     0,   346,     0,
       0,     0,     0,   347,   348,   349,     0,   351,   352,   353,
     354,   355,   356,     0,   357,   358,   359,   360,   361,     0,
       0,   362,     0,   363,   364,   365,   366,   367,   368,   369,
     370,     0,   371,   372,   373,     0,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,     0,   384,   385,     0,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,     0,     0,   402,   403,   404,
     405,   406,   407,   408,   409,   410,     0,   411,     0,     0,
     413,   414,   415,     0,     0,   416,   417,   418,   419,   420,
     421,   422,   423,   424,   425,   426,   427,   509,   429,   430,
     431,     0,   432,   433,     0,   434,     0,   436,   437,   438,
     439,   440,     0,   441,   442,     0,     0,     0,   443,   444,
     445,   446,   447,     0,   448,   449,   450,   451,   452,   453,
     454,   455,     0,     0,   456,   457,   458,     0,   459,   460,
     461,   462,     0,   463,   464,   465,   466,   467,   468,   469,
       0,   470,     0,   472,     0,   473,   474,   475,   476,     0,
       0,     0,   477,     0,     0,   478,   479,   480,   481,   482,
     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   506,     0,   635,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   113,   114,   115,   116,     0,
     117,   118,   119,   120,     0,   121,   122,   123,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   125,   126,
       0,   127,   128,   129,     0,   131,   132,   133,   134,   135,
       0,   137,   138,     0,   139,   140,   141,   142,   143,   144,
       0,     0,   145,   146,   147,   148,   149,     0,   150,   151,
     152,   153,   154,     0,     0,     0,   156,   157,   158,   159,
     160,   161,     0,   163,   164,   165,     0,   166,   167,   168,
     169,   170,     0,     0,     0,   172,   173,   174,   175,   176,
     177,   178,   179,   180,   181,   182,   183,   184,     0,   185,
       0,   186,   187,   188,   189,   190,   191,     0,   192,     0,
     193,   194,   195,   196,     0,     0,   197,   198,   199,   200,
     201,     0,     0,     0,   202,   203,   204,     0,   205,   206,
     207,     0,   208,   209,   210,   211,   212,   213,   214,   215,
     216,   217,   218,     0,   219,     0,   220,   221,   222,   223,
       0,   224,     0,   225,     0,     0,     0,   228,   229,   507,
       0,   232,     0,   233,     0,     0,     0,   234,   235,     0,
     236,     0,   237,   238,   239,   240,   241,   242,   243,     0,
     245,   246,   247,   248,     0,   249,   250,   251,   252,   253,
     254,   255,     0,   256,     0,   258,   259,   260,   261,   262,
     263,   264,   265,     0,   266,     0,   267,     0,     0,   270,
       0,   272,     0,   273,   274,   275,   276,   277,     0,     0,
     278,     0,   280,     0,     0,   282,   283,   284,   285,   286,
     287,   288,   289,   508,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,     0,   311,   312,   313,   314,     0,   315,
       0,   316,   317,     0,   319,     0,   320,   321,   322,   323,
     324,   325,     0,   326,   327,     0,     0,   328,   329,   330,
       0,     0,   331,   332,     0,   334,     0,   336,   337,   338,
     339,   340,   341,   342,   343,   344,   345,     0,     0,   346,
       0,     0,     0,     0,   347,   348,   349,     0,   351,   352,
     353,   354,   355,   356,     0,   357,   358,   359,   360,   361,
       0,     0,   362,     0,   363,   364,   365,   366,   367,   368,
     369,   370,     0,   371,   372,   373,     0,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,     0,   384,   385,
       0,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,     0,     0,   402,   403,
     404,   405,   406,   407,   408,   409,   410,     0,   411,     0,
       0,   413,   414,   415,     0,     0,   416,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,   509,   429,
     430,   431,     0,   432,   433,     0,   434,     0,   436,   437,
     438,   439,   440,     0,   441,   442,     0,     0,     0,   443,
     444,   445,   446,   447,     0,   448,   449,   450,   451,   452,
     453,   454,   455,     0,     0,   456,   457,   458,     0,   459,
     460,   461,   462,     0,   463,   464,   465,   466,   467,   468,
     469,     0,   470,     0,   472,     0,   473,   474,   475,   476,
       0,     0,     0,   477,     0,     0,   478,   479,   480,   481,
     482,   483,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,   498,   506,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   113,   114,   115,   116,
       0,   117,   118,   119,   120,   642,   121,   122,   123,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   125,
     126,     0,   127,   128,   129,     0,   131,   132,   133,   134,
     135,     0,   137,   138,     0,   139,   140,   141,   142,   143,
     144,     0,     0,   145,   146,   147,   148,   149,     0,   150,
     151,   152,   153,   154,     0,     0,     0,   156,   157,   158,
     159,   160,   161,     0,   163,   164,   165,     0,   166,   167,
     168,   169,   170,     0,     0,     0,   172,   173,   174,   175,
     176,   177,   178,   179,   180,   181,   182,   183,   184,     0,
     185,     0,   186,   187,   188,   189,   190,   191,     0,   192,
       0,   193,   194,   195,   196,     0,     0,   197,   198,   199,
     200,   201,     0,     0,     0,   202,   203,   204,     0,   205,
     206,   207,     0,   208,   209,   210,   211,   212,   213,   214,
     215,   216,   217,   218,     0,   219,     0,   220,   221,   222,
     223,     0,   224,     0,   225,     0,     0,     0,   228,   229,
     507,     0,   232,     0,   233,     0,     0,     0,   234,   235,
       0,   236,     0,   237,   238,   239,   240,   241,   242,   243,
       0,   245,   246,   247,   248,     0,   249,   250,   251,   252,
     253,   254,   255,     0,   256,     0,   258,   259,   260,   261,
     262,   263,   264,   265,     0,   266,     0,   267,     0,     0,
     270,     0,   272,     0,   273,   274,   275,   276,   277,     0,
       0,   278,     0,   280,     0,     0,   282,   283,   284,   285,
     286,   287,   288,   289,   508,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,     0,   311,   312,   313,   314,     0,
     315,     0,   316,   317,     0,   319,     0,   320,   321,   322,
     323,   324,   325,     0,   326,   327,     0,     0,   328,   329,
     330,     0,     0,   331,   332,     0,   334,     0,   336,   337,
     338,   339,   340,   341,   342,   343,   344,   345,     0,     0,
     346,     0,     0,     0,     0,   347,   348,   349,     0,   351,
     352,   353,   354,   355,   356,     0,   357,   358,   359,   360,
     361,     0,     0,   362,     0,   363,   364,   365,   366,   367,
     368,   369,   370,     0,   371,   372,   373,     0,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,     0,   384,
     385,     0,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,     0,     0,   402,
     403,   404,   405,   406,   407,   408,   409,   410,     0,   411,
       0,     0,   413,   414,   415,     0,     0,   416,   417,   418,
     419,   420,   421,   422,   423,   424,   425,   426,   427,   509,
     429,   430,   431,     0,   432,   433,     0,   434,     0,   436,
     437,   438,   439,   440,     0,   643,   442,     0,     0,     0,
     644,   444,   445,   446,   447,     0,   448,   449,   450,   451,
     452,   453,   454,   455,     0,     0,   456,   457,   458,     0,
     459,   460,   461,   462,     0,   463,   464,   465,   466,   467,
     468,   469,     0,   470,     0,   472,     0,   473,   474,   475,
     476,     0,     0,     0,   477,     0,     0,   478,   479,   480,
     481,   482,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,   506,     0,
     529,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   113,   114,   115,
     116,     0,   117,   118,   119,   120,     0,   121,   122,   123,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     125,   126,     0,   127,   128,   129,     0,   131,   132,   133,
     134,   135,     0,   137,   138,     0,   139,   140,   141,   142,
     143,   144,     0,     0,   145,   146,   147,   148,   149,     0,
     150,   151,   152,   153,   154,     0,     0,     0,   156,   157,
     158,   159,   160,   161,     0,   163,   164,   165,     0,   166,
     167,   168,   169,   170,     0,     0,     0,   172,   173,   174,
     175,   176,   177,   178,   179,   180,   181,   182,   183,   184,
       0,   185,     0,   186,   187,   188,   189,   190,   191,     0,
     192,     0,   193,   194,   195,   196,     0,     0,   197,   198,
     199,   200,   201,     0,     0,     0,   202,   203,   204,     0,
     205,   206,   207,     0,   208,   209,   210,   211,   212,   213,
     214,   215,   216,   217,   218,     0,   219,     0,   220,   221,
     222,   223,     0,   224,     0,   225,     0,     0,     0,   228,
     229,   507,     0,   232,     0,   233,     0,     0,     0,   234,
     235,     0,   236,     0,   237,   238,   239,   240,   241,   242,
     243,     0,   245,   246,   247,   248,     0,   249,   250,   251,
     252,   253,   254,   255,     0,   256,     0,   258,   259,   260,
     261,   262,   263,   264,   265,     0,   266,     0,   267,     0,
       0,   270,     0,   272,     0,   273,   274,   275,   276,   277,
       0,     0,   278,     0,   280,     0,     0,   282,   283,   284,
     285,   286,   287,   288,   289,   508,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,     0,   311,   312,   313,   314,
       0,   315,     0,   316,   317,     0,   319,     0,   320,   321,
     322,   323,   324,   325,     0,   326,   327,     0,     0,   328,
     329,   330,     0,     0,   331,   332,     0,   334,     0,   336,
     337,   338,   339,   340,   341,   342,   343,   344,   345,     0,
       0,   346,     0,     0,     0,     0,   347,   348,   349,     0,
     351,   352,   353,   354,   355,   356,     0,   357,   358,   359,
     360,   361,     0,     0,   362,     0,   363,   364,   365,   366,
     367,   368,   677,   370,     0,   371,   372,   373,     0,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,     0,
     384,   385,     0,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,     0,     0,
     402,   403,   404,   405,   406,   407,   408,   409,   410,     0,
     411,     0,     0,   413,   414,   415,     0,     0,   416,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     509,   429,   430,   431,     0,   432,   433,     0,   434,     0,
     436,   437,   438,   439,   440,     0,   441,   442,     0,     0,
       0,   443,   444,   445,   446,   447,     0,   448,   449,   450,
     451,   452,   453,   454,   455,     0,     0,   456,   457,   458,
       0,   459,   460,   461,   462,     0,   463,   464,   465,   466,
     467,   468,   469,     0,   470,     0,   472,     0,   473,   474,
     475,   476,     0,     0,     0,   477,     0,     0,   478,   479,
     480,   481,   482,   483,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,   498,   506,
       0,   529,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   113,   114,
     115,   116,     0,   117,   118,   119,   120,     0,   121,   122,
     123,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   125,   126,     0,   127,   128,   129,     0,   131,   132,
     133,   134,   135,     0,   137,   138,     0,   139,   140,   141,
     142,   143,   144,     0,     0,   145,   146,   147,   148,   149,
       0,   150,   151,   152,   153,   154,     0,     0,     0,   156,
     157,   158,   159,   160,   161,     0,   163,   164,   165,     0,
     166,   167,   168,   169,   170,     0,     0,     0,   172,   173,
     174,   175,   176,   177,   178,   179,   180,   181,   182,   183,
     184,     0,   185,     0,   186,   187,   188,   189,   190,   191,
       0,   192,     0,   193,   194,   195,   196,     0,     0,   197,
     198,   199,   200,   201,     0,     0,     0,   202,   203,   204,
       0,   205,   206,   207,     0,   208,   209,   210,   211,   212,
     213,   214,   215,   216,   217,   218,     0,   219,     0,   220,
     221,   222,   223,     0,   224,     0,   225,     0,     0,     0,
     228,   229,   507,     0,   232,     0,   233,     0,     0,     0,
     234,   235,     0,   236,     0,   237,   238,   239,   240,   241,
     765,   243,     0,   245,   246,   247,   248,     0,   249,   250,
     251,   252,   253,   254,   255,     0,   256,     0,   258,   259,
     260,   261,   262,   263,   264,   265,     0,   266,     0,   267,
       0,     0,   270,     0,   272,     0,   273,   274,   275,   276,
     277,     0,     0,   278,     0,   280,     0,     0,   282,   283,
     284,   285,   286,   287,   288,   289,   508,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,     0,   311,   312,   313,
     314,     0,   315,     0,   316,   317,     0,   319,     0,   320,
     321,   322,   323,   324,   325,     0,   326,   327,     0,     0,
     328,   329,   330,     0,     0,   331,   332,     0,   334,     0,
     336,   337,   338,   339,   340,   341,   342,   343,   344,   345,
       0,     0,   346,     0,     0,     0,     0,   347,   348,   349,
       0,   351,   352,   353,   354,   355,   356,     0,   357,   358,
     359,   360,   361,     0,     0,   362,     0,   363,   364,   365,
     366,   367,   368,   369,   370,     0,   371,   372,   373,     0,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
       0,   384,   385,     0,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,     0,
       0,   402,   403,   404,   405,   406,   407,   408,   409,   410,
       0,   411,     0,     0,   413,   414,   415,     0,     0,   416,
     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
     427,   509,   429,   430,   431,     0,   432,   433,     0,   434,
       0,   436,   437,   438,   439,   440,     0,   441,   442,     0,
       0,     0,   443,   444,   445,   446,   447,     0,   448,   449,
     450,   451,   452,   453,   454,   455,     0,     0,   456,   457,
     458,     0,   459,   460,   461,   462,     0,   463,   464,   465,
     466,   467,   468,   469,     0,   470,     0,   472,     0,   473,
     474,   475,   476,     0,     0,     0,   477,     0,     0,   478,
     479,   480,   481,   482,   483,   484,   485,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
     506,     0,   529,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   113,
     114,   115,   116,     0,   117,   118,   119,   120,     0,   121,
     122,   123,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   125,   126,     0,   127,   128,   129,     0,   131,
     132,   133,   134,   135,     0,   137,   138,     0,   139,   140,
     141,   142,   143,   144,     0,     0,   145,   146,   147,   148,
     149,     0,   150,   151,   152,   153,   154,     0,     0,     0,
     156,   157,   158,   159,   160,   161,     0,   163,   164,   165,
       0,   166,   167,   168,   169,   170,     0,     0,     0,   172,
     173,   174,   175,   176,   177,   178,   179,   180,   181,   182,
     183,   184,     0,   185,     0,   186,   187,   188,   189,   190,
     191,     0,   192,     0,   193,   194,   195,   196,     0,     0,
     197,   198,   199,   200,   201,     0,     0,     0,   202,   203,
     204,     0,   205,   206,   207,     0,   208,   209,   210,   211,
     212,   213,   214,   215,   216,   217,   218,     0,   219,     0,
     220,   221,   222,   223,     0,   224,     0,   225,     0,     0,
       0,   228,   229,   507,     0,   232,     0,   233,     0,     0,
       0,   234,   235,     0,   236,     0,   237,   238,   239,   240,
     241,   768,   243,     0,   245,   246,   247,   248,     0,   249,
     250,   251,   252,   253,   254,   255,     0,   256,     0,   258,
     259,   260,   261,   262,   263,   264,   265,     0,   266,     0,
     267,     0,     0,   270,     0,   272,     0,   273,   274,   275,
     276,   277,     0,     0,   278,     0,   280,     0,     0,   282,
     283,   284,   285,   286,   287,   288,   289,   508,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,     0,   311,   312,
     313,   314,     0,   315,     0,   316,   317,     0,   319,     0,
     320,   321,   322,   323,   324,   325,     0,   326,   327,     0,
       0,   328,   329,   330,     0,     0,   331,   332,     0,   334,
       0,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,     0,     0,   346,     0,     0,     0,     0,   347,   348,
     349,     0,   351,   352,   353,   354,   355,   356,     0,   357,
     358,   359,   360,   361,     0,     0,   362,     0,   363,   364,
     365,   366,   367,   368,   369,   370,     0,   371,   372,   373,
       0,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,     0,   384,   385,     0,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
       0,     0,   402,   403,   404,   405,   406,   407,   408,   409,
     410,     0,   411,     0,     0,   413,   414,   415,     0,     0,
     416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,   509,   429,   430,   431,     0,   432,   433,     0,
     434,     0,   436,   437,   438,   439,   440,     0,   441,   442,
       0,     0,     0,   443,   444,   445,   446,   447,     0,   448,
     449,   450,   451,   452,   453,   454,   455,     0,     0,   456,
     457,   458,     0,   459,   460,   461,   462,     0,   463,   464,
     465,   466,   467,   468,   469,     0,   470,     0,   472,     0,
     473,   474,   475,   476,     0,     0,     0,   477,     0,     0,
     478,   479,   480,   481,   482,   483,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,   506,     0,   529,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     113,   114,   115,   116,     0,   117,   118,   119,   120,     0,
     121,   122,   123,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   125,   126,     0,   127,   128,   129,     0,
     131,   132,   133,   134,   135,     0,   137,   138,     0,   139,
     140,   141,   142,   143,   144,     0,     0,   145,   146,   147,
     148,   149,     0,   150,   151,   152,   153,   154,     0,     0,
       0,   156,   157,   158,   159,   160,   161,     0,   163,   164,
     165,     0,   166,   167,   168,   169,   170,     0,     0,     0,
     172,   173,   174,   175,   176,   177,   178,   179,   180,   181,
     182,   183,   184,     0,   185,     0,   186,   187,   188,   189,
     190,   191,     0,   192,     0,   193,   194,   195,   196,     0,
       0,   197,   198,   199,   200,   201,     0,     0,     0,   202,
     203,   204,     0,   205,   206,   207,     0,   208,   209,   210,
     211,   212,   213,   214,   215,   216,   217,   218,     0,   219,
       0,   220,   221,   222,   223,     0,   224,     0,   225,     0,
       0,     0,   228,   229,   507,     0,   232,     0,   233,     0,
       0,     0,   234,   235,     0,   236,     0,   237,   238,   239,
     240,   241,   772,   243,     0,   245,   246,   247,   248,     0,
     249,   250,   251,   252,   253,   254,   255,     0,   256,     0,
     258,   259,   260,   261,   262,   263,   264,   265,     0,   266,
       0,   267,     0,     0,   270,     0,   272,     0,   273,   274,
     275,   276,   277,     0,     0,   278,     0,   280,     0,     0,
     282,   283,   284,   285,   286,   287,   288,   289,   508,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,     0,   311,
     312,   313,   314,     0,   315,     0,   316,   317,     0,   319,
       0,   320,   321,   322,   323,   324,   325,     0,   326,   327,
       0,     0,   328,   329,   330,     0,     0,   331,   332,     0,
     334,     0,   336,   337,   338,   339,   340,   341,   342,   343,
     344,   345,     0,     0,   346,     0,     0,     0,     0,   347,
     348,   349,     0,   351,   352,   353,   354,   355,   356,     0,
     357,   358,   359,   360,   361,     0,     0,   362,     0,   363,
     364,   365,   366,   367,   368,   369,   370,     0,   371,   372,
     373,     0,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,     0,   384,   385,     0,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,     0,     0,   402,   403,   404,   405,   406,   407,   408,
     409,   410,     0,   411,     0,     0,   413,   414,   415,     0,
       0,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   509,   429,   430,   431,     0,   432,   433,
       0,   434,     0,   436,   437,   438,   439,   440,     0,   441,
     442,     0,     0,     0,   443,   444,   445,   446,   447,     0,
     448,   449,   450,   451,   452,   453,   454,   455,     0,     0,
     456,   457,   458,     0,   459,   460,   461,   462,     0,   463,
     464,   465,   466,   467,   468,   469,     0,   470,     0,   472,
       0,   473,   474,   475,   476,     0,     0,     0,   477,     0,
       0,   478,   479,   480,   481,   482,   483,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,   498,   506,     0,   529,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   113,   114,   115,   116,     0,   117,   118,   119,   120,
       0,   121,   122,   123,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   125,   126,     0,   127,   128,   129,
       0,   131,   132,   133,   134,   135,     0,   137,   138,     0,
     139,   140,   141,   142,   143,   144,     0,     0,   145,   146,
     147,   148,   149,     0,   150,   151,   152,   153,   154,     0,
       0,     0,   156,   157,   158,   159,   160,   161,     0,   163,
     164,   165,     0,   166,   167,   168,   169,   170,     0,     0,
       0,   172,   173,   174,   175,   176,   177,   178,   179,   180,
     181,   182,   183,   184,     0,   185,     0,   186,   187,   188,
     189,   190,   191,     0,   192,     0,   193,   194,   195,   196,
       0,     0,   197,   198,   199,   200,   201,     0,     0,     0,
     202,   203,   204,     0,   205,   206,   207,     0,   208,   209,
     210,   211,   212,   213,   214,   215,   216,   217,   218,     0,
     219,     0,   220,   221,   222,   223,     0,   224,     0,   225,
       0,     0,     0,   228,   229,   507,     0,   232,     0,   233,
       0,     0,     0,   234,   235,     0,   236,     0,   237,   238,
     239,   240,   241,   788,   243,     0,   245,   246,   247,   248,
       0,   249,   250,   251,   252,   253,   254,   255,     0,   256,
       0,   258,   259,   260,   261,   262,   263,   264,   265,     0,
     266,     0,   267,     0,     0,   270,     0,   272,     0,   273,
     274,   275,   276,   277,     0,     0,   278,     0,   280,     0,
       0,   282,   283,   284,   285,   286,   287,   288,   289,   508,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,     0,
     311,   312,   313,   314,     0,   315,     0,   316,   317,     0,
     319,     0,   320,   321,   322,   323,   324,   325,     0,   326,
     327,     0,     0,   328,   329,   330,     0,     0,   331,   332,
       0,   334,     0,   336,   337,   338,   339,   340,   341,   342,
     343,   344,   345,     0,     0,   346,     0,     0,     0,     0,
     347,   348,   349,     0,   351,   352,   353,   354,   355,   356,
       0,   357,   358,   359,   360,   361,     0,     0,   362,     0,
     363,   364,   365,   366,   367,   368,   369,   370,     0,   371,
     372,   373,     0,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,     0,   384,   385,     0,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,     0,     0,   402,   403,   404,   405,   406,   407,
     408,   409,   410,     0,   411,     0,     0,   413,   414,   415,
       0,     0,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,   509,   429,   430,   431,     0,   432,
     433,     0,   434,     0,   436,   437,   438,   439,   440,     0,
     441,   442,     0,     0,     0,   443,   444,   445,   446,   447,
       0,   448,   449,   450,   451,   452,   453,   454,   455,     0,
       0,   456,   457,   458,     0,   459,   460,   461,   462,     0,
     463,   464,   465,   466,   467,   468,   469,     0,   470,     0,
     472,     0,   473,   474,   475,   476,     0,     0,     0,   477,
       0,     0,   478,   479,   480,   481,   482,   483,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,   498,   506,     0,   529,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   113,   114,   115,   116,     0,   117,   118,   119,
     120,     0,   121,   122,   123,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   125,   126,     0,   127,   128,
     129,     0,   131,   132,   133,   134,   135,     0,   137,   138,
       0,   139,   140,   141,   142,   143,   144,     0,     0,   145,
     146,   147,   148,   149,     0,   150,   151,   152,   153,   154,
       0,     0,     0,   156,   157,   158,   159,   160,   161,     0,
     163,   164,   165,     0,   166,   167,   168,   169,   170,     0,
       0,     0,   172,   173,   174,   175,   176,   177,   178,   179,
     180,   181,   182,   183,   184,     0,   185,     0,   186,   187,
     188,   189,   190,   191,     0,   192,     0,   193,   194,   195,
     196,     0,     0,   197,   198,   199,   200,   201,     0,     0,
       0,   202,   203,   204,     0,   205,   206,   207,     0,   208,
     209,   210,   211,   212,   213,   214,   215,   216,   217,   218,
       0,   219,     0,   220,   221,   222,   223,     0,   224,     0,
     225,     0,     0,     0,   228,   229,   507,     0,   232,     0,
     233,     0,     0,     0,   234,   235,     0,   236,     0,   237,
     238,   239,   240,   241,   889,   243,     0,   245,   246,   247,
     248,     0,   249,   250,   251,   252,   253,   254,   255,     0,
     256,     0,   258,   259,   260,   261,   262,   263,   264,   265,
       0,   266,     0,   267,     0,     0,   270,     0,   272,     0,
     273,   274,   275,   276,   277,     0,     0,   278,     0,   280,
       0,     0,   282,   283,   284,   285,   286,   287,   288,   289,
     508,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
       0,   311,   312,   313,   314,     0,   315,     0,   316,   317,
       0,   319,     0,   320,   321,   322,   323,   324,   325,     0,
     326,   327,     0,     0,   328,   329,   330,     0,     0,   331,
     332,     0,   334,     0,   336,   337,   338,   339,   340,   341,
     342,   343,   344,   345,     0,     0,   346,     0,     0,     0,
       0,   347,   348,   349,     0,   351,   352,   353,   354,   355,
     356,     0,   357,   358,   359,   360,   361,     0,     0,   362,
       0,   363,   364,   365,   366,   367,   368,   369,   370,     0,
     371,   372,   373,     0,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,     0,   384,   385,     0,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,     0,     0,   402,   403,   404,   405,   406,
     407,   408,   409,   410,     0,   411,     0,     0,   413,   414,
     415,     0,     0,   416,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,   427,   509,   429,   430,   431,     0,
     432,   433,     0,   434,     0,   436,   437,   438,   439,   440,
       0,   441,   442,     0,     0,     0,   443,   444,   445,   446,
     447,     0,   448,   449,   450,   451,   452,   453,   454,   455,
       0,     0,   456,   457,   458,     0,   459,   460,   461,   462,
       0,   463,   464,   465,   466,   467,   468,   469,     0,   470,
       0,   472,     0,   473,   474,   475,   476,     0,     0,     0,
     477,     0,     0,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   506,     0,   529,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   113,   114,   115,   116,     0,   117,   118,
     119,   120,     0,   121,   122,   123,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   125,   126,     0,   127,
     128,   129,     0,   131,   132,   133,   134,   135,     0,   137,
     138,     0,   139,   140,   141,   142,   143,   144,     0,     0,
     145,   146,   147,   148,   149,     0,   150,   151,   152,   153,
     154,     0,     0,     0,   156,   157,   158,   159,   160,   161,
       0,   163,   164,   165,     0,   166,   167,   168,   169,   170,
       0,     0,     0,   172,   173,   174,   175,   176,   177,   178,
     179,   180,   181,   182,   183,   184,     0,   185,     0,   186,
     187,   188,   189,   190,   191,     0,   192,     0,   193,   194,
     195,   196,     0,     0,   197,   198,   199,   200,   201,     0,
       0,     0,   202,   203,   204,     0,   205,   206,   207,     0,
     208,   209,   210,   211,   212,   213,   214,   215,   216,   217,
     218,     0,   219,     0,   220,   221,   222,   223,     0,   224,
       0,   225,     0,     0,     0,   228,   229,   507,     0,   232,
       0,   233,     0,     0,     0,   234,   235,     0,   236,     0,
     237,   238,   239,   240,   241,   892,   243,     0,   245,   246,
     247,   248,     0,   249,   250,   251,   252,   253,   254,   255,
       0,   256,     0,   258,   259,   260,   261,   262,   263,   264,
     265,     0,   266,     0,   267,     0,     0,   270,     0,   272,
       0,   273,   274,   275,   276,   277,     0,     0,   278,     0,
     280,     0,     0,   282,   283,   284,   285,   286,   287,   288,
     289,   508,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,     0,   311,   312,   313,   314,     0,   315,     0,   316,
     317,     0,   319,     0,   320,   321,   322,   323,   324,   325,
       0,   326,   327,     0,     0,   328,   329,   330,     0,     0,
     331,   332,     0,   334,     0,   336,   337,   338,   339,   340,
     341,   342,   343,   344,   345,     0,     0,   346,     0,     0,
       0,     0,   347,   348,   349,     0,   351,   352,   353,   354,
     355,   356,     0,   357,   358,   359,   360,   361,     0,     0,
     362,     0,   363,   364,   365,   366,   367,   368,   369,   370,
       0,   371,   372,   373,     0,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,     0,   384,   385,     0,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,     0,     0,   402,   403,   404,   405,
     406,   407,   408,   409,   410,     0,   411,     0,     0,   413,
     414,   415,     0,     0,   416,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,   509,   429,   430,   431,
       0,   432,   433,     0,   434,     0,   436,   437,   438,   439,
     440,     0,   441,   442,     0,     0,     0,   443,   444,   445,
     446,   447,     0,   448,   449,   450,   451,   452,   453,   454,
     455,     0,     0,   456,   457,   458,     0,   459,   460,   461,
     462,     0,   463,   464,   465,   466,   467,   468,   469,     0,
     470,     0,   472,     0,   473,   474,   475,   476,     0,     0,
       0,   477,     0,     0,   478,   479,   480,   481,   482,   483,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,   506,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   113,   114,   115,   116,     0,   117,
     118,   119,   120,     0,   121,   122,   123,     0,     0,     0,
       0,     0,     0,     0,  1015,     0,     0,   125,   126,     0,
     127,   128,   129,     0,   131,   132,   133,   134,   135,     0,
     137,   138,     0,   139,   140,   141,   142,   143,   144,     0,
       0,   145,   146,   147,   148,   149,     0,   150,   151,   152,
     153,   154,     0,     0,     0,   156,   157,   158,   159,   160,
     161,     0,   163,   164,   165,     0,   166,   167,   168,   169,
     170,     0,     0,     0,   172,   173,   174,   175,   176,   177,
     178,   179,   180,   181,   182,   183,   184,     0,   185,     0,
     186,   187,   188,   189,   190,   191,     0,   192,     0,   193,
     194,   195,   196,     0,     0,   197,   198,   199,   200,   201,
       0,     0,     0,   202,   203,   204,     0,   205,   206,   207,
       0,   208,   209,   210,   211,   212,   213,   214,   215,   216,
     217,   218,     0,   219,     0,   220,   221,   222,   223,     0,
     224,     0,   225,     0,     0,     0,   228,   229,   507,     0,
     232,     0,   233,     0,     0,     0,   234,   235,     0,   236,
       0,   237,   238,   239,   240,   241,   242,   243,     0,   245,
     246,   247,   248,     0,   249,   250,   251,   252,   253,   254,
     255,     0,   256,     0,   258,   259,   260,   261,   262,   263,
     264,   265,     0,   266,     0,   267,     0,     0,   270,     0,
     272,     0,   273,   274,   275,   276,   277,     0,     0,   278,
       0,   280,     0,     0,   282,   283,   284,   285,   286,   287,
     288,   289,   508,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,     0,   311,   312,   313,   314,     0,   315,     0,
     316,   317,     0,   319,     0,   320,   321,   322,   323,   324,
     325,     0,   326,   327,     0,     0,   328,   329,   330,     0,
       0,   331,   332,     0,   334,     0,   336,   337,   338,   339,
     340,   341,   342,   343,   344,   345,     0,     0,   346,     0,
       0,     0,     0,   347,   348,   349,     0,   351,   352,   353,
     354,   355,   356,     0,   357,   358,   359,   360,   361,     0,
       0,   362,     0,   363,   364,   365,   366,   367,   368,   369,
     370,     0,   371,   372,   373,     0,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,     0,   384,   385,     0,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,     0,     0,   402,   403,   404,
     405,   406,   407,   408,   409,   410,     0,   411,     0,     0,
     413,   414,   415,     0,     0,   416,   417,   418,   419,   420,
     421,   422,   423,   424,   425,   426,   427,   509,   429,   430,
     431,     0,   432,   433,     0,   434,     0,   436,   437,   438,
     439,   440,     0,   441,   442,     0,     0,     0,   443,   444,
     445,   446,   447,     0,   448,   449,   450,   451,   452,   453,
     454,   455,     0,     0,   456,   457,   458,     0,   459,   460,
     461,   462,     0,   463,   464,   465,   466,   467,   468,   469,
       0,   470,     0,   472,     0,   473,   474,   475,   476,     0,
       0,     0,   477,     0,     0,   478,   479,   480,   481,   482,
     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   506,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   113,   114,   115,   116,     0,
     117,   118,   119,   120,     0,   121,   122,   123,     0,     0,
       0,     0,     0,     0,     0,  1038,     0,     0,   125,   126,
       0,   127,   128,   129,     0,   131,   132,   133,   134,   135,
       0,   137,   138,     0,   139,   140,   141,   142,   143,   144,
       0,     0,   145,   146,   147,   148,   149,     0,   150,   151,
     152,   153,   154,     0,     0,     0,   156,   157,   158,   159,
     160,   161,     0,   163,   164,   165,     0,   166,   167,   168,
     169,   170,     0,     0,     0,   172,   173,   174,   175,   176,
     177,   178,   179,   180,   181,   182,   183,   184,     0,   185,
       0,   186,   187,   188,   189,   190,   191,     0,   192,     0,
     193,   194,   195,   196,     0,     0,   197,   198,   199,   200,
     201,     0,     0,     0,   202,   203,   204,     0,   205,   206,
     207,     0,   208,   209,   210,   211,   212,   213,   214,   215,
     216,   217,   218,     0,   219,     0,   220,   221,   222,   223,
       0,   224,     0,   225,     0,     0,     0,   228,   229,   507,
       0,   232,     0,   233,     0,     0,     0,   234,   235,     0,
     236,     0,   237,   238,   239,   240,   241,   242,   243,     0,
     245,   246,   247,   248,     0,   249,   250,   251,   252,   253,
     254,   255,     0,   256,     0,   258,   259,   260,   261,   262,
     263,   264,   265,     0,   266,     0,   267,     0,     0,   270,
       0,   272,     0,   273,   274,   275,   276,   277,     0,     0,
     278,     0,   280,     0,     0,   282,   283,   284,   285,   286,
     287,   288,   289,   508,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,     0,   311,   312,   313,   314,     0,   315,
       0,   316,   317,     0,   319,     0,   320,   321,   322,   323,
     324,   325,     0,   326,   327,     0,     0,   328,   329,   330,
       0,     0,   331,   332,     0,   334,     0,   336,   337,   338,
     339,   340,   341,   342,   343,   344,   345,     0,     0,   346,
       0,     0,     0,     0,   347,   348,   349,     0,   351,   352,
     353,   354,   355,   356,     0,   357,   358,   359,   360,   361,
       0,     0,   362,     0,   363,   364,   365,   366,   367,   368,
     369,   370,     0,   371,   372,   373,     0,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,     0,   384,   385,
       0,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,     0,     0,   402,   403,
     404,   405,   406,   407,   408,   409,   410,     0,   411,     0,
       0,   413,   414,   415,     0,     0,   416,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,   509,   429,
     430,   431,     0,   432,   433,     0,   434,     0,   436,   437,
     438,   439,   440,     0,   441,   442,     0,     0,     0,   443,
     444,   445,   446,   447,     0,   448,   449,   450,   451,   452,
     453,   454,   455,     0,     0,   456,   457,   458,     0,   459,
     460,   461,   462,     0,   463,   464,   465,   466,   467,   468,
     469,     0,   470,     0,   472,     0,   473,   474,   475,   476,
       0,     0,     0,   477,     0,     0,   478,   479,   480,   481,
     482,   483,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,   498,   506,     0,   529,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   113,   114,   115,   116,
       0,   117,   118,   119,   120,     0,   121,   122,   123,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   125,
     126,     0,   127,   128,   129,     0,   131,   132,   133,   134,
     135,     0,   137,   138,     0,   139,   140,   141,   142,   143,
     144,     0,     0,   145,   146,   147,   148,   149,     0,   150,
     151,   152,   153,   154,     0,     0,     0,   156,   157,   158,
     159,   160,   161,     0,   163,   164,   165,     0,   166,   167,
     168,   169,   170,     0,     0,     0,   172,   173,   174,   175,
     176,   177,   178,   179,   180,   181,   182,   183,   184,     0,
     185,     0,   186,   187,   188,   189,   190,   191,     0,   192,
       0,   193,   194,   195,   196,     0,     0,   197,   198,   199,
     200,   201,     0,     0,     0,   202,   203,   204,     0,   205,
     206,   207,     0,   208,   209,   210,   211,   212,   213,   214,
     215,   216,   217,   218,     0,   219,     0,   220,   221,   222,
     223,     0,   224,     0,   225,     0,     0,     0,   228,   229,
     507,     0,   232,     0,   233,     0,     0,     0,   234,   235,
       0,   236,     0,   237,   238,   239,   240,   241,  1379,   243,
       0,   245,   246,   247,   248,     0,   249,   250,   251,   252,
     253,   254,   255,     0,   256,     0,   258,   259,   260,   261,
     262,   263,   264,   265,     0,   266,     0,   267,     0,     0,
     270,     0,   272,     0,   273,   274,   275,   276,   277,     0,
       0,   278,     0,   280,     0,     0,   282,   283,   284,   285,
     286,   287,   288,   289,   508,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,     0,   311,   312,   313,   314,     0,
     315,     0,   316,   317,     0,   319,     0,   320,   321,   322,
     323,   324,   325,     0,   326,   327,     0,     0,   328,   329,
     330,     0,     0,   331,   332,     0,   334,     0,   336,   337,
     338,   339,   340,   341,   342,   343,   344,   345,     0,     0,
     346,     0,     0,     0,     0,   347,   348,   349,     0,   351,
     352,   353,   354,   355,   356,     0,   357,   358,   359,   360,
     361,     0,     0,   362,     0,   363,   364,   365,   366,   367,
     368,   369,   370,     0,   371,   372,   373,     0,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,     0,   384,
     385,     0,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,     0,     0,   402,
     403,   404,   405,   406,   407,   408,   409,   410,     0,   411,
       0,     0,   413,   414,   415,     0,     0,   416,   417,   418,
     419,   420,   421,   422,   423,   424,   425,   426,   427,   509,
     429,   430,   431,     0,   432,   433,     0,   434,     0,   436,
     437,   438,   439,   440,     0,   441,   442,     0,     0,     0,
     443,   444,   445,   446,   447,     0,   448,   449,   450,   451,
     452,   453,   454,   455,     0,     0,   456,   457,   458,     0,
     459,   460,   461,   462,     0,   463,   464,   465,   466,   467,
     468,   469,     0,   470,     0,   472,     0,   473,   474,   475,
     476,     0,     0,     0,   477,     0,     0,   478,   479,   480,
     481,   482,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,   506,     0,
     529,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   113,   114,   115,
     116,     0,   117,   118,   119,   120,     0,   121,   122,   123,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     125,   126,     0,   127,   128,   129,     0,   131,   132,   133,
     134,   135,     0,   137,   138,     0,   139,   140,   141,   142,
     143,   144,     0,     0,   145,   146,   147,   148,   149,     0,
     150,   151,   152,   153,   154,     0,     0,     0,   156,   157,
     158,   159,   160,   161,     0,   163,   164,   165,     0,   166,
     167,   168,   169,   170,     0,     0,     0,   172,   173,   174,
     175,   176,   177,   178,   179,   180,   181,   182,   183,   184,
       0,   185,     0,   186,   187,   188,   189,   190,   191,     0,
     192,     0,   193,   194,   195,   196,     0,     0,   197,   198,
     199,   200,   201,     0,     0,     0,   202,   203,   204,     0,
     205,   206,   207,     0,   208,   209,   210,   211,   212,   213,
     214,   215,   216,   217,   218,     0,   219,     0,   220,   221,
     222,   223,     0,   224,     0,   225,     0,     0,     0,   228,
     229,   507,     0,   232,     0,   233,     0,     0,     0,   234,
     235,     0,   236,     0,   237,   238,   239,   240,   241,  1381,
     243,     0,   245,   246,   247,   248,     0,   249,   250,   251,
     252,   253,   254,   255,     0,   256,     0,   258,   259,   260,
     261,   262,   263,   264,   265,     0,   266,     0,   267,     0,
       0,   270,     0,   272,     0,   273,   274,   275,   276,   277,
       0,     0,   278,     0,   280,     0,     0,   282,   283,   284,
     285,   286,   287,   288,   289,   508,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,     0,   311,   312,   313,   314,
       0,   315,     0,   316,   317,     0,   319,     0,   320,   321,
     322,   323,   324,   325,     0,   326,   327,     0,     0,   328,
     329,   330,     0,     0,   331,   332,     0,   334,     0,   336,
     337,   338,   339,   340,   341,   342,   343,   344,   345,     0,
       0,   346,     0,     0,     0,     0,   347,   348,   349,     0,
     351,   352,   353,   354,   355,   356,     0,   357,   358,   359,
     360,   361,     0,     0,   362,     0,   363,   364,   365,   366,
     367,   368,   369,   370,     0,   371,   372,   373,     0,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,     0,
     384,   385,     0,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,     0,     0,
     402,   403,   404,   405,   406,   407,   408,   409,   410,     0,
     411,     0,     0,   413,   414,   415,     0,     0,   416,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     509,   429,   430,   431,     0,   432,   433,     0,   434,     0,
     436,   437,   438,   439,   440,     0,   441,   442,     0,     0,
       0,   443,   444,   445,   446,   447,     0,   448,   449,   450,
     451,   452,   453,   454,   455,     0,     0,   456,   457,   458,
       0,   459,   460,   461,   462,     0,   463,   464,   465,   466,
     467,   468,   469,     0,   470,     0,   472,     0,   473,   474,
     475,   476,     0,     0,     0,   477,     0,     0,   478,   479,
     480,   481,   482,   483,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,   498,   506,
       0,   529,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   113,   114,
     115,   116,     0,   117,   118,   119,   120,     0,   121,   122,
     123,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   125,   126,     0,   127,   128,   129,     0,   131,   132,
     133,   134,   135,     0,   137,   138,     0,   139,   140,   141,
     142,   143,   144,     0,     0,   145,   146,   147,   148,   149,
       0,   150,   151,   152,   153,   154,     0,     0,     0,   156,
     157,   158,   159,   160,   161,     0,   163,   164,   165,     0,
     166,   167,   168,   169,   170,     0,     0,     0,   172,   173,
     174,   175,   176,   177,   178,   179,   180,   181,   182,   183,
     184,     0,   185,     0,   186,   187,   188,   189,   190,   191,
       0,   192,     0,   193,   194,   195,   196,     0,     0,   197,
     198,   199,   200,   201,     0,     0,     0,   202,   203,   204,
       0,   205,   206,   207,     0,   208,   209,   210,   211,   212,
     213,   214,   215,   216,   217,   218,     0,   219,     0,   220,
     221,   222,   223,     0,   224,     0,   225,     0,     0,     0,
     228,   229,   507,     0,   232,     0,   233,     0,     0,     0,
     234,   235,     0,   236,     0,   237,   238,   239,   240,   241,
    1384,   243,     0,   245,   246,   247,   248,     0,   249,   250,
     251,   252,   253,   254,   255,     0,   256,     0,   258,   259,
     260,   261,   262,   263,   264,   265,     0,   266,     0,   267,
       0,     0,   270,     0,   272,     0,   273,   274,   275,   276,
     277,     0,     0,   278,     0,   280,     0,     0,   282,   283,
     284,   285,   286,   287,   288,   289,   508,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,     0,   311,   312,   313,
     314,     0,   315,     0,   316,   317,     0,   319,     0,   320,
     321,   322,   323,   324,   325,     0,   326,   327,     0,     0,
     328,   329,   330,     0,     0,   331,   332,     0,   334,     0,
     336,   337,   338,   339,   340,   341,   342,   343,   344,   345,
       0,     0,   346,     0,     0,     0,     0,   347,   348,   349,
       0,   351,   352,   353,   354,   355,   356,     0,   357,   358,
     359,   360,   361,     0,     0,   362,     0,   363,   364,   365,
     366,   367,   368,   369,   370,     0,   371,   372,   373,     0,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
       0,   384,   385,     0,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,     0,
       0,   402,   403,   404,   405,   406,   407,   408,   409,   410,
       0,   411,     0,     0,   413,   414,   415,     0,     0,   416,
     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
     427,   509,   429,   430,   431,     0,   432,   433,     0,   434,
       0,   436,   437,   438,   439,   440,     0,   441,   442,     0,
       0,     0,   443,   444,   445,   446,   447,     0,   448,   449,
     450,   451,   452,   453,   454,   455,     0,     0,   456,   457,
     458,     0,   459,   460,   461,   462,     0,   463,   464,   465,
     466,   467,   468,   469,     0,   470,     0,   472,     0,   473,
     474,   475,   476,     0,     0,     0,   477,     0,     0,   478,
     479,   480,   481,   482,   483,   484,   485,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
     506,     0,   529,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   113,
     114,   115,   116,     0,   117,   118,   119,   120,     0,   121,
     122,   123,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   125,   126,     0,   127,   128,   129,     0,   131,
     132,   133,   134,   135,     0,   137,   138,     0,   139,   140,
     141,   142,   143,   144,     0,     0,   145,   146,   147,   148,
     149,     0,   150,   151,   152,   153,   154,     0,     0,     0,
     156,   157,   158,   159,   160,   161,     0,   163,   164,   165,
       0,   166,   167,   168,   169,   170,     0,     0,     0,   172,
     173,   174,   175,   176,   177,   178,   179,   180,   181,   182,
     183,   184,     0,   185,     0,   186,   187,   188,   189,   190,
     191,     0,   192,     0,   193,   194,   195,   196,     0,     0,
     197,   198,   199,   200,   201,     0,     0,     0,   202,   203,
     204,     0,   205,   206,   207,     0,   208,   209,   210,   211,
     212,   213,   214,   215,   216,   217,   218,     0,   219,     0,
     220,   221,   222,   223,     0,   224,     0,   225,     0,     0,
       0,   228,   229,   507,     0,   232,     0,   233,     0,     0,
       0,   234,   235,     0,   236,     0,   237,   238,   239,   240,
     241,  1386,   243,     0,   245,   246,   247,   248,     0,   249,
     250,   251,   252,   253,   254,   255,     0,   256,     0,   258,
     259,   260,   261,   262,   263,   264,   265,     0,   266,     0,
     267,     0,     0,   270,     0,   272,     0,   273,   274,   275,
     276,   277,     0,     0,   278,     0,   280,     0,     0,   282,
     283,   284,   285,   286,   287,   288,   289,   508,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,     0,   311,   312,
     313,   314,     0,   315,     0,   316,   317,     0,   319,     0,
     320,   321,   322,   323,   324,   325,     0,   326,   327,     0,
       0,   328,   329,   330,     0,     0,   331,   332,     0,   334,
       0,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,     0,     0,   346,     0,     0,     0,     0,   347,   348,
     349,     0,   351,   352,   353,   354,   355,   356,     0,   357,
     358,   359,   360,   361,     0,     0,   362,     0,   363,   364,
     365,   366,   367,   368,   369,   370,     0,   371,   372,   373,
       0,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,     0,   384,   385,     0,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
       0,     0,   402,   403,   404,   405,   406,   407,   408,   409,
     410,     0,   411,     0,     0,   413,   414,   415,     0,     0,
     416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,   509,   429,   430,   431,     0,   432,   433,     0,
     434,     0,   436,   437,   438,   439,   440,     0,   441,   442,
       0,     0,     0,   443,   444,   445,   446,   447,     0,   448,
     449,   450,   451,   452,   453,   454,   455,     0,     0,   456,
     457,   458,     0,   459,   460,   461,   462,     0,   463,   464,
     465,   466,   467,   468,   469,     0,   470,     0,   472,     0,
     473,   474,   475,   476,     0,     0,     0,   477,     0,     0,
     478,   479,   480,   481,   482,   483,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,   506,     0,   529,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     113,   114,   115,   116,     0,   117,   118,   119,   120,     0,
     121,   122,   123,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   125,   126,     0,   127,   128,   129,     0,
     131,   132,   133,   134,   135,     0,   137,   138,     0,   139,
     140,   141,   142,   143,   144,     0,     0,   145,   146,   147,
     148,   149,     0,   150,   151,   152,   153,   154,     0,     0,
       0,   156,   157,   158,   159,   160,   161,     0,   163,   164,
     165,     0,   166,   167,   168,   169,   170,     0,     0,     0,
     172,   173,   174,   175,   176,   177,   178,   179,   180,   181,
     182,   183,   184,     0,   185,     0,   186,   187,   188,   189,
     190,   191,     0,   192,     0,   193,   194,   195,   196,     0,
       0,   197,   198,   199,   200,   201,     0,     0,     0,   202,
     203,   204,     0,   205,   206,   207,     0,   208,   209,   210,
     211,   212,   213,   214,   215,   216,   217,   218,     0,   219,
       0,   220,   221,   222,   223,     0,   224,     0,   225,     0,
       0,     0,   228,   229,   507,     0,   232,     0,   233,     0,
       0,     0,   234,   235,     0,   236,     0,   237,   238,   239,
     240,   241,  2224,   243,     0,   245,   246,   247,   248,     0,
     249,   250,   251,   252,   253,   254,   255,     0,   256,     0,
     258,   259,   260,   261,   262,   263,   264,   265,     0,   266,
       0,   267,     0,     0,   270,     0,   272,     0,   273,   274,
     275,   276,   277,     0,     0,   278,     0,   280,     0,     0,
     282,   283,   284,   285,   286,   287,   288,   289,   508,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,     0,   311,
     312,   313,   314,     0,   315,     0,   316,   317,     0,   319,
       0,   320,   321,   322,   323,   324,   325,     0,   326,   327,
       0,     0,   328,   329,   330,     0,     0,   331,   332,     0,
     334,     0,   336,   337,   338,   339,   340,   341,   342,   343,
     344,   345,     0,     0,   346,     0,     0,     0,     0,   347,
     348,   349,     0,   351,   352,   353,   354,   355,   356,     0,
     357,   358,   359,   360,   361,     0,     0,   362,     0,   363,
     364,   365,   366,   367,   368,   369,   370,     0,   371,   372,
     373,     0,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,     0,   384,   385,     0,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,     0,     0,   402,   403,   404,   405,   406,   407,   408,
     409,   410,     0,   411,     0,     0,   413,   414,   415,     0,
       0,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   509,   429,   430,   431,     0,   432,   433,
       0,   434,     0,   436,   437,   438,   439,   440,     0,   441,
     442,     0,     0,     0,   443,   444,   445,   446,   447,     0,
     448,   449,   450,   451,   452,   453,   454,   455,     0,     0,
     456,   457,   458,     0,   459,   460,   461,   462,     0,   463,
     464,   465,   466,   467,   468,   469,     0,   470,     0,   472,
       0,   473,   474,   475,   476,     0,     0,     0,   477,     0,
       0,   478,   479,   480,   481,   482,   483,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,   498,   811,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   113,   114,   115,   116,     0,   117,   118,   119,   120,
       0,   121,   122,   123,     0,     0,     0,   812,     0,     0,
       0,  -941,     0,   813,   125,   126,     0,   127,   128,   129,
     814,   131,   132,   133,     0,   815,   816,   817,   818,     0,
     139,   140,   141,   142,   143,   144,     0,     0,   145,   146,
     819,   820,   149,     0,   150,   151,   152,   153,     0,     0,
     821,     0,   822,   157,   158,   159,   160,   161,   823,   163,
     164,   165,     0,   166,   167,   168,   169,   170,     0,     0,
     824,   172,   173,   174,   175,   176,   177,   178,   179,   180,
     181,   825,   826,   184,     0,   185,     0,   186,   187,   188,
     189,   190,   191,     0,   192,     0,   193,   194,   195,   196,
       0,     0,   197,   198,   827,   200,   201,     0,     0,     0,
     202,   203,   204,     0,   205,   206,   207,     0,   208,   209,
     210,   211,     0,   213,   214,   215,   216,   217,     0,     0,
     219,     0,   220,   221,   828,   223,     0,   224,     0,   225,
     829,     0,   830,   228,   229,  -941,   831,   232,     0,   233,
       0,     0,     0,     0,     0,     0,   236,     0,   237,   238,
     239,   240,   241,   242,   243,   833,   245,   246,   247,   248,
       0,   249,   250,   251,   252,   253,   254,   255,     0,   256,
     834,     0,   259,   260,   261,   262,   263,   835,   836,     0,
     837,     0,   267,   838,   839,   270,   840,   272,     0,   273,
     274,   275,   276,   277,     0,     0,   278,   841,   280,   842,
       0,   282,   283,   284,   285,   286,   287,   288,   289,   843,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   844,   845,
     846,   312,   313,   314,     0,     0,     0,   316,   317,   847,
     319,     0,     0,   321,   848,   323,   324,   325,     0,   326,
     327,     0,     0,   328,   329,   330,     0,     0,   331,     0,
     849,   334,   850,     0,   337,   338,   339,   340,   341,   342,
     343,   344,   345,     0,     0,   346,     0,     0,     0,     0,
     347,   348,     0,   851,   351,   352,     0,   354,   355,   356,
       0,   357,   358,   359,   360,   361,     0,     0,   362,     0,
     363,   364,   365,   852,   367,   368,   369,   370,     0,   371,
     372,   373,     0,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,     0,   384,   385,   853,   387,   388,   389,
     854,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,     0,   855,   402,   403,   404,   405,   406,   407,
     856,   409,   410,     0,   411,   857,     0,   413,   858,   415,
       0,     0,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,   859,   429,     0,   431,     0,   432,
     433,     0,   434,   860,   436,   437,   438,   439,   440,     0,
     861,   862,     0,     0,     0,   443,   444,     0,   446,     0,
       0,   448,   449,   863,   451,   452,   453,   454,   455,   864,
       0,   456,   457,   458,     0,   459,   460,   461,   462,     0,
     463,   464,   465,   466,   467,     0,   865,     0,   470,   866,
     472,     0,   473,   474,   475,   476,     0,     0,     0,   477,
       0,     0,   478,   479,   480,   481,   482,   483,   506,     0,
     529,     0,     0,     0,     0,     0,     0,     0,     0,   495,
     496,   497,   498,     0,     0,     0,     0,   113,   114,   115,
     116,     0,   117,   118,   119,   120,     0,   121,   122,   123,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     125,   126,     0,   127,   128,   129,     0,   131,   132,   133,
     134,   135,     0,   137,   138,     0,   139,   140,   141,   142,
     143,   144,     0,     0,   145,   146,   147,   148,   149,     0,
     150,   151,   152,   153,   154,     0,     0,     0,   156,   157,
     158,   159,   160,   161,     0,   163,   164,   165,     0,   166,
     167,   168,   169,   170,     0,     0,     0,   172,   173,   174,
     175,   176,   177,   178,   179,   180,   181,   182,   183,   184,
       0,   185,     0,   186,   187,   188,   189,   190,   191,     0,
     192,     0,   193,   194,   195,   196,     0,     0,   197,   198,
     199,   200,   201,     0,     0,     0,   202,   203,   204,     0,
     205,   206,   207,     0,   208,   209,   210,   211,   212,   213,
     214,   215,   216,   217,   218,     0,   219,     0,   220,   221,
     222,   223,     0,   224,     0,   225,     0,     0,     0,   228,
     229,   507,     0,   232,     0,   233,     0,     0,     0,   234,
     235,     0,   236,     0,   237,   238,   239,   240,   241,  2994,
     243,     0,   245,   246,   247,   248,     0,   249,   250,   251,
     252,   253,   254,   255,     0,   256,     0,   258,   259,   260,
     261,   262,   263,   264,   265,     0,   266,     0,   267,     0,
       0,   270,     0,   272,     0,   273,   274,   275,   276,   277,
       0,     0,   278,     0,   280,     0,     0,   282,   283,   284,
     285,   286,   287,   288,   289,   508,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,     0,   311,   312,   313,   314,
       0,   315,     0,   316,   317,     0,   319,     0,   320,   321,
     322,   323,   324,   325,     0,   326,   327,     0,     0,   328,
     329,   330,     0,     0,   331,   332,     0,   334,     0,   336,
     337,   338,   339,   340,   341,   342,   343,   344,   345,     0,
       0,   346,     0,     0,     0,     0,   347,   348,   349,     0,
     351,   352,   353,   354,   355,   356,     0,   357,   358,   359,
     360,   361,     0,     0,   362,     0,   363,   364,   365,   366,
     367,   368,   369,   370,     0,   371,   372,   373,     0,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,     0,
     384,   385,     0,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,     0,     0,
     402,   403,   404,   405,   406,   407,   408,   409,   410,     0,
     411,     0,     0,   413,   414,   415,     0,     0,   416,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     509,   429,   430,   431,     0,   432,   433,     0,   434,     0,
     436,   437,   438,   439,   440,     0,   441,   442,     0,     0,
       0,   443,   444,   445,   446,   447,     0,   448,   449,   450,
     451,   452,   453,   454,   455,     0,     0,   456,   457,   458,
       0,   459,   460,   461,   462,     0,   463,   464,   465,   466,
     467,   468,   469,     0,   470,     0,   472,     0,   473,   474,
     475,   476,     0,     0,     0,   477,     0,     0,   478,   479,
     480,   481,   482,   483,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,   498,   506,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   113,   114,
     115,   116,     0,   117,   118,   119,   120,     0,   121,   122,
     123,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   125,   126,     0,   127,   128,   129,     0,   131,   132,
     133,   134,   135,     0,   137,   138,     0,   139,   140,   141,
     142,   143,   144,     0,     0,   145,   146,   147,   148,   149,
       0,   150,   151,   152,   153,   154,     0,     0,     0,   156,
     157,   158,   159,   160,   161,     0,   163,   164,   165,     0,
     166,   167,   168,   169,   170,     0,     0,     0,   172,   173,
     174,   175,   176,   177,   178,   179,   180,   181,   182,   183,
     184,     0,   185,     0,   186,   187,   188,   189,   190,   191,
       0,   192,     0,   193,   194,   195,   196,     0,     0,   197,
     198,   199,   200,   201,     0,     0,     0,   202,   203,   204,
       0,   205,   206,   207,     0,   208,   209,   210,   211,   212,
     213,   214,   215,   216,   217,   218,     0,   219,     0,   220,
     221,   222,   223,     0,   224,     0,   225,     0,     0,     0,
     228,   229,   507,     0,   232,     0,   233,     0,     0,     0,
     234,   235,     0,   236,     0,   237,   238,   239,   240,   241,
     242,   243,     0,   245,   246,   247,   248,     0,   249,   250,
     251,   252,   253,   254,   255,     0,   256,     0,   258,   259,
     260,   261,   262,   263,   264,   265,     0,   266,     0,   267,
       0,     0,   270,     0,   272,     0,   273,   274,   275,   276,
     277,     0,     0,   278,     0,   280,     0,     0,   282,   283,
     284,   285,   286,   287,   288,   289,   508,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,     0,   311,   312,   313,
     314,     0,   315,     0,   316,   317,     0,   319,     0,   320,
     321,   322,   323,   324,   325,     0,   326,   327,     0,     0,
     328,   329,   330,     0,     0,   331,   332,     0,   334,     0,
     336,   337,   338,   339,   340,   341,   342,   343,   344,   345,
       0,     0,   346,     0,     0,     0,     0,   347,   348,   349,
       0,   351,   352,   353,   354,   355,   356,     0,   357,   358,
     359,   360,   361,     0,     0,   362,     0,   363,   364,   365,
     366,   367,   368,   369,   370,     0,   371,   372,   373,     0,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
       0,   384,   385,     0,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,     0,
       0,   402,   403,   404,   405,   406,   407,   408,   409,   410,
       0,   411,     0,     0,   413,   414,   415,     0,     0,   416,
     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
     427,   509,   429,   430,   431,     0,   432,   433,     0,   434,
       0,   436,   437,   438,   439,   440,     0,   441,   442,     0,
       0,     0,   443,   444,   445,   446,   447,     0,   448,   449,
     450,   451,   452,   453,   454,   455,     0,     0,   456,   457,
     458,     0,   459,   460,   461,   462,     0,   463,   464,   465,
     466,   467,   468,   469,     0,   470,     0,   472,     0,   473,
     474,   475,   476,     0,     0,     0,   477,     0,     0,   478,
     479,   480,   481,   482,   483,   484,   485,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
     506,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   113,
     114,   115,   116,     0,   117,   118,   119,   120,     0,   121,
     122,   123,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   125,   126,     0,   127,   128,   129,     0,   131,
     132,   133,   134,   135,     0,   137,   138,     0,   139,   140,
     141,   142,   143,   144,     0,     0,   145,   146,   147,   148,
     149,     0,   150,   151,   152,   153,   154,     0,     0,     0,
     156,   157,   158,   159,   160,   161,     0,   163,   164,   165,
       0,   166,   167,   168,   169,   170,     0,     0,     0,   172,
     173,   174,   175,   176,   177,   178,   179,   180,   181,   182,
     183,   184,     0,   185,     0,   186,   187,   188,   189,   190,
     191,     0,   192,     0,   193,   194,   195,   196,     0,     0,
     197,   198,   199,   200,   201,     0,     0,     0,   202,   203,
     204,     0,   205,   206,   207,     0,   208,   209,   210,   211,
     212,   213,   214,   215,   216,   217,   218,     0,   219,     0,
     220,   221,   222,   223,     0,   224,     0,   225,     0,     0,
       0,   228,   229,   507,     0,   654,     0,   233,     0,     0,
       0,   234,   235,     0,   236,     0,   237,   238,   239,   240,
     241,   242,   243,     0,   245,   246,   247,   248,     0,   249,
     250,   251,   252,   253,   254,   255,     0,   256,     0,   258,
     259,   260,   261,   262,   263,   264,   265,     0,   266,     0,
     267,     0,     0,   270,     0,   272,     0,   273,   274,   275,
     276,   277,     0,     0,   278,     0,   280,     0,     0,   282,
     283,   655,   285,   286,   287,   288,   289,   508,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,     0,   311,   312,
     313,   314,     0,   315,     0,   316,   317,     0,   319,     0,
     320,   321,   322,   323,   324,   325,     0,   326,   327,     0,
       0,   328,   329,   330,     0,     0,   331,   332,     0,   334,
       0,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,     0,     0,   346,     0,     0,     0,     0,   347,   348,
     349,     0,   351,   352,   353,   354,   355,   356,     0,   357,
     358,   359,   360,   361,     0,     0,   362,     0,   363,   364,
     365,   366,   367,   368,   369,   370,     0,   371,   372,   373,
       0,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,     0,   384,   385,     0,   387,   388,   389,   390,   391,
     392,   393,   394,   656,   396,   397,   398,   399,   400,   401,
       0,     0,   402,   403,   404,   405,   657,   407,   408,   409,
     410,     0,   411,     0,     0,   413,   414,   415,     0,     0,
     416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,   509,   429,   430,   431,     0,   432,   433,     0,
     434,     0,   436,   437,   438,   439,   440,     0,   658,   442,
       0,     0,     0,   443,   444,   445,   446,   447,     0,   448,
     449,   450,   451,   452,   453,   454,   455,     0,     0,   456,
     457,   458,     0,   459,   460,   461,   462,     0,   463,   464,
     465,   466,   467,   468,   469,     0,   470,     0,   472,     0,
     473,   474,   475,   476,     0,     0,     0,   477,     0,     0,
     478,   479,   480,   481,   482,   483,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,   506,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     113,   114,   115,   116,     0,   117,   118,   119,   120,     0,
     121,   122,   123,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   125,   126,     0,   127,   128,   129,     0,
     131,   132,   133,   134,   135,     0,   137,   138,     0,   139,
     140,   141,   142,   143,   144,     0,     0,   145,   146,   147,
     148,   149,     0,   150,   151,   152,   153,   154,     0,     0,
       0,   156,   157,   158,   159,   160,   161,     0,   163,   164,
     165,     0,   166,   167,   168,   169,   170,     0,     0,     0,
     172,   173,   174,   175,   176,   177,   178,   179,   180,   181,
     182,   183,   184,     0,   185,     0,   186,   187,   188,   189,
     190,   191,     0,   192,     0,   193,   194,   195,   196,     0,
       0,   197,   198,   199,   200,   201,     0,     0,     0,   202,
     203,   204,     0,   205,   206,   207,     0,   208,   209,   210,
     211,   212,   213,   214,   215,   216,   217,   218,     0,   219,
       0,   220,   221,   222,   223,     0,   224,     0,   225,     0,
       0,     0,   228,   229,   507,     0,   232,     0,   233,     0,
       0,     0,   234,   235,     0,   236,     0,   237,   238,   239,
     240,   241,   885,   243,     0,   245,   246,   247,   248,     0,
     249,   250,   251,   252,   253,   254,   255,     0,   256,     0,
     258,   259,   260,   261,   262,   263,   264,   265,     0,   266,
       0,   267,     0,     0,   270,     0,   272,     0,   273,   274,
     275,   276,   277,     0,     0,   278,     0,   280,     0,     0,
     282,   283,   284,   285,   286,   287,   288,   289,   508,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,     0,   311,
     312,   313,   314,     0,   315,     0,   316,   317,     0,   319,
       0,   320,   321,   322,   323,   324,   325,     0,   326,   327,
       0,     0,   328,   329,   330,     0,     0,   331,   332,     0,
     334,     0,   336,   337,   338,   339,   340,   341,   342,   343,
     344,   345,     0,     0,   346,     0,     0,     0,     0,   347,
     348,   349,     0,   351,   352,   353,   354,   355,   356,     0,
     357,   358,   359,   360,   361,     0,     0,   362,     0,   363,
     364,   365,   366,   367,   368,   369,   370,     0,   371,   372,
     373,     0,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,     0,   384,   385,     0,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,     0,     0,   402,   403,   404,   405,   406,   407,   408,
     409,   410,     0,   411,     0,     0,   413,   414,   415,     0,
       0,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   509,   429,   430,   431,     0,   432,   433,
       0,   434,     0,   436,   437,   438,   439,   440,     0,   441,
     442,     0,     0,     0,   443,   444,   445,   446,   447,     0,
     448,   449,   450,   451,   452,   453,   454,   455,     0,     0,
     456,   457,   458,     0,   459,   460,   461,   462,     0,   463,
     464,   465,   466,   467,   468,   469,     0,   470,     0,   472,
       0,   473,   474,   475,   476,     0,     0,     0,   477,     0,
       0,   478,   479,   480,   481,   482,   483,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,   498,   506,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   113,   114,   115,   116,     0,   117,   118,   119,   120,
       0,   121,   122,   123,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   125,   126,     0,   127,   128,   129,
       0,   131,   132,   133,   134,   135,     0,   137,   138,     0,
     139,   140,   141,   142,   143,   144,     0,     0,   145,   146,
     147,   148,   149,     0,   150,   151,   152,   153,   154,     0,
       0,     0,   156,   157,   158,   159,   160,   161,     0,   163,
     164,   165,     0,   166,   167,   168,   169,   170,     0,     0,
       0,   172,   173,   174,   175,   176,   177,   178,   179,   180,
     181,   182,   183,   184,     0,   185,     0,   186,   187,   188,
     189,   190,   191,     0,   192,     0,   193,   194,   195,   196,
       0,     0,   197,   198,   199,   200,   201,     0,     0,     0,
     202,   203,   204,     0,   205,   206,   207,     0,   208,   209,
     210,   211,   212,   213,   214,   215,   216,   217,   218,     0,
     219,     0,   220,   221,   222,   223,     0,   224,     0,   225,
       0,     0,     0,   228,   229,   507,     0,   232,     0,   233,
       0,     0,     0,   234,   235,     0,   236,     0,   237,   238,
     239,   240,   241,   242,   243,     0,   245,   246,   247,   248,
       0,   249,   250,   251,   252,   253,   254,   255,     0,   256,
       0,   258,   259,   260,   261,   262,   263,   264,   265,     0,
     266,     0,   267,     0,     0,   270,     0,   272,     0,   273,
     274,   275,   276,   277,     0,     0,   278,     0,   280,     0,
       0,   282,   283,   284,   285,   286,   287,   288,   289,   508,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,     0,
     311,   312,   313,   314,     0,   315,     0,   316,   317,     0,
     319,     0,   320,   321,   322,   323,   324,   325,     0,   326,
     327,     0,     0,   328,   329,   330,     0,     0,   331,   332,
       0,   334,     0,   336,   337,   338,   339,   340,   341,   342,
     343,   344,   345,     0,     0,   346,     0,     0,     0,     0,
     347,   348,   349,     0,   351,   352,   353,   354,   355,   356,
       0,   357,   358,   359,   360,   361,     0,     0,   362,     0,
     363,   364,   365,   366,   367,   368,   369,   370,     0,   371,
     372,   373,     0,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,     0,   384,   385,     0,   387,   388,   389,
     390,   391,   392,   393,   394,   656,   396,   397,   398,   399,
     400,   401,     0,     0,   402,   403,   404,   405,   406,   407,
     408,   409,   410,     0,   411,     0,     0,   413,   414,   415,
       0,     0,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,   509,   429,   430,   431,     0,   432,
     433,     0,   434,     0,   436,   437,   438,   439,   440,     0,
     658,   442,     0,     0,     0,   443,   444,   445,   446,   447,
       0,   448,   449,   450,   451,   452,   453,   454,   455,     0,
       0,   456,   457,   458,     0,   459,   460,   461,   462,     0,
     463,   464,   465,   466,   467,   468,   469,     0,   470,     0,
     472,     0,   473,   474,   475,   476,     0,     0,     0,   477,
       0,     0,   478,   479,   480,   481,   482,   483,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,   498,   506,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   113,   114,   115,   116,     0,   117,   118,   119,
     120,     0,   121,   122,   123,     0,     0,     0,     0,     0,
       0,     0,  1678,     0,     0,   125,   126,     0,   127,   128,
     129,     0,   131,   132,   133,   134,   135,     0,   137,   138,
       0,   139,   140,   141,   142,   143,   144,     0,     0,   145,
     146,   147,   148,   149,     0,   150,   151,   152,   153,   154,
       0,     0,     0,   156,   157,   158,   159,   160,   161,     0,
     163,   164,   165,     0,   166,   167,   168,   169,   170,     0,
       0,     0,   172,   173,   174,   175,   176,   177,   178,   179,
     180,   181,   182,   183,   184,     0,   185,     0,   186,   187,
     188,   189,   190,   191,     0,   192,     0,   193,   194,   195,
     196,     0,     0,   197,   198,   199,   200,   201,     0,     0,
       0,   202,   203,   204,     0,   205,   206,   207,     0,   208,
     209,   210,   211,   212,   213,   214,   215,   216,   217,   218,
       0,   219,     0,   220,   221,   222,   223,     0,   224,     0,
     225,     0,     0,     0,   228,   229,   507,     0,   232,     0,
     233,     0,     0,     0,   234,   235,     0,   236,     0,   237,
     238,   239,   240,   241,   242,   243,     0,   245,   246,   247,
     248,     0,   249,   250,   251,   252,   253,   254,   255,     0,
     256,     0,   258,   259,   260,   261,   262,   263,   264,   265,
       0,   266,     0,   267,     0,     0,   270,     0,   272,     0,
     273,   274,   275,   276,   277,     0,     0,   278,     0,   280,
       0,     0,   282,   283,   284,   285,   286,   287,   288,   289,
     508,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
       0,   311,   312,   313,   314,     0,   315,     0,   316,   317,
       0,   319,     0,   320,   321,   322,   323,   324,   325,     0,
     326,   327,     0,     0,   328,   329,   330,     0,     0,   331,
     332,     0,   334,     0,   336,   337,   338,   339,   340,   341,
     342,   343,   344,   345,     0,     0,   346,     0,     0,     0,
       0,   347,   348,   349,     0,   351,   352,   353,   354,   355,
     356,     0,   357,   358,   359,   360,   361,     0,     0,   362,
       0,   363,   364,   365,   366,   367,   368,   369,   370,     0,
     371,   372,   373,     0,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,     0,   384,   385,     0,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,     0,     0,   402,   403,   404,   405,   406,
       0,   408,   409,   410,     0,   411,     0,     0,   413,   414,
     415,     0,     0,   416,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,   427,   509,   429,   430,   431,     0,
     432,   433,     0,   434,     0,   436,   437,   438,   439,   440,
       0,   441,   442,     0,     0,     0,   443,   444,   445,   446,
     447,     0,   448,   449,   450,   451,   452,   453,   454,   455,
       0,     0,   456,   457,   458,     0,   459,   460,   461,   462,
       0,   463,   464,   465,   466,   467,   468,   469,     0,   470,
       0,   472,     0,   473,   474,   475,   476,     0,     0,     0,
     477,     0,     0,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   506,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   113,   114,   115,   116,     0,   117,   118,
     119,   120,     0,   121,   122,   123,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   125,   126,     0,   127,
     128,   129,     0,   131,   132,   133,   134,   135,     0,   137,
     138,     0,   139,   140,   141,   142,   143,   144,     0,     0,
     145,   146,   147,   148,   149,     0,   150,   151,   152,   153,
     154,     0,     0,     0,   156,   157,   158,   159,   160,   161,
       0,   163,   164,   165,     0,   166,   167,   168,   169,   170,
       0,     0,     0,   172,   173,   174,   175,   176,   177,   178,
     179,   180,   181,   182,   183,   184,     0,   185,     0,   186,
     187,   188,   189,   190,   191,     0,   192,     0,   193,   194,
     195,   196,     0,     0,   197,   198,   199,   200,   201,     0,
       0,     0,   202,   203,   204,     0,   205,   206,   207,     0,
     208,   209,   210,   211,   212,   213,   214,   215,   216,   217,
     218,     0,   219,     0,   220,   221,   222,   223,     0,   224,
       0,   225,     0,     0,     0,   228,   229,   507,     0,   232,
       0,   233,     0,     0,     0,   234,   235,     0,   236,     0,
     237,   238,   239,   240,   241,  1852,   243,     0,   245,   246,
     247,   248,     0,   249,   250,   251,   252,   253,   254,   255,
       0,   256,     0,   258,   259,   260,   261,   262,   263,   264,
     265,     0,   266,     0,   267,     0,     0,   270,     0,   272,
       0,   273,   274,   275,   276,   277,     0,     0,   278,     0,
     280,     0,     0,   282,   283,   284,   285,   286,   287,   288,
     289,   508,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,     0,   311,   312,   313,   314,     0,   315,     0,   316,
     317,     0,   319,     0,   320,   321,   322,   323,   324,   325,
       0,   326,   327,     0,     0,   328,   329,   330,     0,     0,
     331,   332,     0,   334,     0,   336,   337,   338,   339,   340,
     341,   342,   343,   344,   345,     0,     0,   346,     0,     0,
       0,     0,   347,   348,   349,     0,   351,   352,   353,   354,
     355,   356,     0,   357,   358,   359,   360,   361,     0,     0,
     362,     0,   363,   364,   365,   366,   367,   368,   369,   370,
       0,   371,   372,   373,     0,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,     0,   384,   385,     0,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,     0,     0,   402,   403,   404,   405,
     406,   407,   408,   409,   410,     0,   411,     0,     0,   413,
     414,   415,     0,     0,   416,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,   509,   429,   430,   431,
       0,   432,   433,     0,   434,     0,   436,   437,   438,   439,
     440,     0,   441,   442,     0,     0,     0,   443,   444,   445,
     446,   447,     0,   448,   449,   450,   451,   452,   453,   454,
     455,     0,     0,   456,   457,   458,     0,   459,   460,   461,
     462,     0,   463,   464,   465,   466,   467,   468,   469,     0,
     470,     0,   472,     0,   473,   474,   475,   476,     0,     0,
       0,   477,     0,     0,   478,   479,   480,   481,   482,   483,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,   506,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   113,   114,   115,   116,     0,   117,
     118,   119,   120,     0,   121,   122,   123,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   125,   126,     0,
     127,   128,   129,     0,   131,   132,   133,   134,   135,     0,
     137,   138,     0,   139,   140,   141,   142,   143,   144,     0,
       0,   145,   146,   147,   148,   149,     0,   150,   151,   152,
     153,   154,     0,     0,     0,   156,   157,   158,   159,   160,
     161,     0,   163,   164,   165,     0,   166,   167,   168,   169,
     170,     0,     0,     0,   172,   173,   174,   175,   176,   177,
     178,   179,   180,   181,   182,   183,   184,     0,   185,     0,
     186,   187,   188,   189,   190,   191,     0,   192,     0,   193,
     194,   195,   196,     0,     0,   197,   198,   199,   200,   201,
       0,     0,     0,   202,   203,   204,     0,   205,   206,   207,
       0,   208,   209,   210,   211,   212,   213,   214,   215,   216,
     217,   218,     0,   219,     0,   220,   221,   222,   223,     0,
     224,     0,   225,     0,     0,     0,   228,   229,   507,     0,
     232,     0,   233,     0,     0,     0,   234,   235,     0,   236,
       0,   237,   238,   239,   240,   241,  2211,   243,     0,   245,
     246,   247,   248,     0,   249,   250,   251,   252,   253,   254,
     255,     0,   256,     0,   258,   259,   260,   261,   262,   263,
     264,   265,     0,   266,     0,   267,     0,     0,   270,     0,
     272,     0,   273,   274,   275,   276,   277,     0,     0,   278,
       0,   280,     0,     0,   282,   283,   284,   285,   286,   287,
     288,   289,   508,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,     0,   311,   312,   313,   314,     0,   315,     0,
     316,   317,     0,   319,     0,   320,   321,   322,   323,   324,
     325,     0,   326,   327,     0,     0,   328,   329,   330,     0,
       0,   331,   332,     0,   334,     0,   336,   337,   338,   339,
     340,   341,   342,   343,   344,   345,     0,     0,   346,     0,
       0,     0,     0,   347,   348,   349,     0,   351,   352,   353,
     354,   355,   356,     0,   357,   358,   359,   360,   361,     0,
       0,   362,     0,   363,   364,   365,   366,   367,   368,   369,
     370,     0,   371,   372,   373,     0,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,     0,   384,   385,     0,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,     0,     0,   402,   403,   404,
     405,   406,   407,   408,   409,   410,     0,   411,     0,     0,
     413,   414,   415,     0,     0,   416,   417,   418,   419,   420,
     421,   422,   423,   424,   425,   426,   427,   509,   429,   430,
     431,     0,   432,   433,     0,   434,     0,   436,   437,   438,
     439,   440,     0,   441,   442,     0,     0,     0,   443,   444,
     445,   446,   447,     0,   448,   449,   450,   451,   452,   453,
     454,   455,     0,     0,   456,   457,   458,     0,   459,   460,
     461,   462,     0,   463,   464,   465,   466,   467,   468,   469,
       0,   470,     0,   472,     0,   473,   474,   475,   476,     0,
       0,     0,   477,     0,     0,   478,   479,   480,   481,   482,
     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   506,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   113,   114,   115,   116,     0,
     117,   118,   119,   120,     0,   121,   122,   123,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   125,   126,
       0,   127,   128,   129,     0,   131,   132,   133,   134,   135,
       0,   137,   138,     0,   139,   140,   141,   142,   143,   144,
       0,     0,   145,   146,   147,   148,   149,     0,   150,   151,
     152,   153,   154,     0,     0,     0,   156,   157,   158,   159,
     160,   161,     0,   163,   164,   165,     0,   166,   167,   168,
     169,   170,     0,     0,     0,   172,   173,   174,   175,   176,
     177,   178,   179,   180,   181,   182,   183,   184,     0,   185,
       0,   186,   187,   188,   189,   190,   191,     0,   192,     0,
     193,   194,   195,   196,     0,     0,   197,   198,   199,   200,
     201,     0,     0,     0,   202,   203,   204,     0,   205,   206,
     207,     0,   208,   209,   210,   211,   212,   213,   214,   215,
     216,   217,   218,     0,   219,     0,   220,   221,   222,   223,
       0,   224,     0,   225,     0,     0,     0,   228,   229,   507,
       0,   232,     0,   233,     0,     0,     0,   234,   235,     0,
     236,     0,   237,   238,   239,   240,   241,  2226,   243,     0,
     245,   246,   247,   248,     0,   249,   250,   251,   252,   253,
     254,   255,     0,   256,     0,   258,   259,   260,   261,   262,
     263,   264,   265,     0,   266,     0,   267,     0,     0,   270,
       0,   272,     0,   273,   274,   275,   276,   277,     0,     0,
     278,     0,   280,     0,     0,   282,   283,   284,   285,   286,
     287,   288,   289,   508,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,     0,   311,   312,   313,   314,     0,   315,
       0,   316,   317,     0,   319,     0,   320,   321,   322,   323,
     324,   325,     0,   326,   327,     0,     0,   328,   329,   330,
       0,     0,   331,   332,     0,   334,     0,   336,   337,   338,
     339,   340,   341,   342,   343,   344,   345,     0,     0,   346,
       0,     0,     0,     0,   347,   348,   349,     0,   351,   352,
     353,   354,   355,   356,     0,   357,   358,   359,   360,   361,
       0,     0,   362,     0,   363,   364,   365,   366,   367,   368,
     369,   370,     0,   371,   372,   373,     0,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,     0,   384,   385,
       0,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,     0,     0,   402,   403,
     404,   405,   406,   407,   408,   409,   410,     0,   411,     0,
       0,   413,   414,   415,     0,     0,   416,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,   509,   429,
     430,   431,     0,   432,   433,     0,   434,     0,   436,   437,
     438,   439,   440,     0,   441,   442,     0,     0,     0,   443,
     444,   445,   446,   447,     0,   448,   449,   450,   451,   452,
     453,   454,   455,     0,     0,   456,   457,   458,     0,   459,
     460,   461,   462,     0,   463,   464,   465,   466,   467,   468,
     469,     0,   470,     0,   472,     0,   473,   474,   475,   476,
       0,     0,     0,   477,     0,     0,   478,   479,   480,   481,
     482,   483,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,   498,   811,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   113,   114,   115,   116,
       0,   117,   118,   119,   120,     0,   121,   122,   123,     0,
       0,     0,   812,     0,     0,     0,     0,     0,   813,   125,
     126,     0,   127,   128,   129,   814,   131,   132,   133,     0,
     815,   816,   817,   818,     0,   139,   140,   141,   142,   143,
     144,     0,     0,   145,   146,   819,   820,   149,     0,   150,
     151,   152,   153,     0,     0,   821,     0,   822,   157,   158,
     159,   160,   161,   823,   163,   164,   165,     0,   166,   167,
     168,   169,   170,     0,     0,   824,   172,   173,   174,   175,
     176,   177,   178,   179,   180,   181,   825,   826,   184,     0,
     185,     0,   186,   187,   188,   189,   190,   191,     0,   192,
       0,   193,   194,   195,   196,     0,     0,   197,   198,   827,
     200,   201,     0,     0,     0,   202,   203,   204,     0,   205,
     206,   207,     0,   208,   209,   210,   211,     0,   213,   214,
     215,   216,   217,     0,     0,   219,     0,   220,   221,   828,
     223,     0,   224,     0,   225,   829,     0,   830,   228,   229,
       0,   831,   232,     0,   233,     0,     0,     0,     0,     0,
       0,   236,     0,   237,   238,   239,   240,   241,   832,   243,
     833,   245,   246,   247,   248,     0,   249,   250,   251,   252,
     253,   254,   255,     0,   256,   834,     0,   259,   260,   261,
     262,   263,   835,   836,     0,   837,     0,   267,   838,   839,
     270,   840,   272,     0,   273,   274,   275,   276,   277,     0,
       0,   278,   841,   280,   842,     0,   282,   283,   284,   285,
     286,   287,   288,   289,   843,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   844,   845,   846,   312,   313,   314,     0,
       0,     0,   316,   317,   847,   319,     0,     0,   321,   848,
     323,   324,   325,     0,   326,   327,     0,     0,   328,   329,
     330,     0,     0,   331,     0,   849,   334,   850,     0,   337,
     338,   339,   340,   341,   342,   343,   344,   345,     0,     0,
     346,     0,     0,     0,     0,   347,   348,     0,   851,   351,
     352,     0,   354,   355,   356,     0,   357,   358,   359,   360,
     361,     0,     0,   362,     0,   363,   364,   365,   852,   367,
     368,   369,   370,     0,   371,   372,   373,     0,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,     0,   384,
     385,   853,   387,   388,   389,   854,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,     0,   855,   402,
     403,   404,   405,   406,   407,   856,   409,   410,     0,   411,
     857,     0,   413,   858,   415,     0,     0,   416,   417,   418,
     419,   420,   421,   422,   423,   424,   425,   426,   427,   859,
     429,     0,   431,     0,   432,   433,     0,   434,   860,   436,
     437,   438,   439,   440,     0,   861,   862,     0,     0,     0,
     443,   444,     0,   446,     0,     0,   448,   449,   863,   451,
     452,   453,   454,   455,   864,     0,   456,   457,   458,     0,
     459,   460,   461,   462,     0,   463,   464,   465,   466,   467,
       0,   865,     0,   470,   866,   472,     0,   473,   474,   475,
     476,     0,     0,     0,   477,     0,     0,   478,   479,   480,
     481,   482,   483,   682,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   495,   496,   497,   498,     0,     0,
       0,     0,   113,   114,   115,   116,     0,   117,   118,   119,
     120,     0,   121,   122,   123,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   125,   126,     0,   127,   128,
     129,     0,   131,   132,   133,   683,   684,     0,   685,   686,
       0,   139,   140,   141,   142,   143,   144,     0,     0,   145,
     146,   687,   688,   149,     0,   150,   151,   152,   153,   689,
       0,     0,     0,     0,   157,   158,   159,   160,   161,     0,
     163,   164,   165,     0,   166,   167,   168,   169,   170,     0,
       0,     0,   172,   173,   174,   175,   176,   177,   178,   179,
     180,   181,   690,   691,   184,     0,   185,     0,   186,   187,
     188,   189,   190,   191,     0,   192,     0,   193,   194,   195,
     196,     0,     0,   197,   198,   199,   200,   201,     0,     0,
       0,   202,   203,   204,     0,   205,   206,   207,     0,   208,
     209,   210,   211,   692,   213,   214,   215,   216,   217,   693,
       0,   219,     0,   220,   221,   694,   223,     0,   224,     0,
     225,     0,     0,     0,   228,   229,   695,     0,   232,     0,
     233,     0,     0,     0,   696,   697,     0,   236,     0,   237,
     238,   239,   240,   241,   242,   243,     0,   245,   246,   247,
     248,     0,   249,   250,   251,   252,   253,   254,   255,     0,
     256,     0,   698,   259,   260,   261,   262,   263,   699,   700,
       0,   701,     0,   267,     0,     0,   270,     0,   272,     0,
     273,   274,   275,   276,   277,     0,     0,   278,     0,   280,
       0,     0,   282,   283,   284,   285,   286,   287,   288,   289,
     702,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   703,
       0,   704,   312,   313,   314,     0,   705,     0,   316,   317,
       0,   319,     0,   706,   321,   707,   323,   324,   325,     0,
     326,   327,     0,     0,   328,   329,   330,     0,     0,   331,
     708,     0,   334,     0,   709,   337,   338,   339,   340,   341,
     342,   343,   344,   345,     0,     0,   346,     0,     0,     0,
       0,   347,   348,   710,     0,   351,   352,   711,   354,   355,
     356,     0,   357,   358,   359,   360,   361,     0,     0,   362,
       0,   363,   364,   365,   712,   367,   368,   369,   370,     0,
     371,   372,   373,     0,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,     0,   384,   385,     0,   387,   388,
     389,   713,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,     0,     0,   402,   403,   404,   405,   406,
     407,   714,   409,   410,     0,   411,     0,     0,   413,   715,
     415,     0,     0,   416,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,   427,   716,   429,   717,   431,     0,
     432,   433,     0,   434,     0,   436,   437,   438,   439,   440,
       0,   718,   719,     0,     0,     0,   443,   444,   720,   446,
     721,     0,   448,   449,   722,   451,   452,   453,   454,   455,
       0,     0,   456,   457,   458,     0,   459,   460,   461,   462,
       0,   463,   464,   465,   466,   467,  1503,   724,     0,   470,
       0,   472,     0,   473,   474,   475,   476,     0,     0,     0,
     477,     0,     0,   478,   479,   480,   481,   482,   483,   725,
     726,   727,   728,   729,   730,   731,   732,   733,   734,   735,
     495,   496,   497,   498,   811,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   113,   114,   115,   116,     0,   117,   118,
     119,   120,     0,   121,   122,   123,     0,     0,     0,   812,
       0,     0,     0,     0,     0,   813,   125,   126,     0,   127,
     128,   129,   814,   131,   132,   133,     0,   815,   816,   817,
     818,     0,   139,   140,   141,   142,   143,   144,     0,     0,
     145,   146,   819,   820,   149,     0,   150,   151,   152,   153,
       0,     0,   821,     0,   822,   157,   158,   159,   160,   161,
     823,   163,   164,   165,     0,   166,   167,   168,   169,   170,
       0,     0,   824,   172,   173,   174,   175,   176,   177,   178,
     179,   180,   181,   825,   826,   184,     0,   185,     0,   186,
     187,   188,   189,   190,   191,     0,   192,     0,   193,   194,
     195,   196,     0,     0,   197,   198,   827,   200,   201,     0,
       0,     0,   202,   203,   204,     0,   205,   206,   207,     0,
     208,   209,   210,   211,     0,   213,   214,   215,   216,   217,
       0,     0,   219,     0,   220,   221,   828,   223,     0,   224,
       0,   225,   829,     0,   830,   228,   229,     0,   831,   232,
       0,   233,     0,     0,     0,     0,     0,     0,   236,     0,
     237,   238,   239,   240,   241,   242,   243,   833,   245,   246,
     247,   248,     0,   249,   250,   251,   252,   253,   254,   255,
       0,   256,   834,     0,   259,   260,   261,   262,   263,   835,
     836,     0,   837,     0,   267,   838,   839,   270,   840,   272,
       0,   273,   274,   275,   276,   277,     0,     0,   278,   841,
     280,   842,     0,   282,   283,   284,   285,   286,   287,   288,
     289,   843,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     844,   845,   846,   312,   313,   314,     0,     0,     0,   316,
     317,   847,   319,     0,     0,   321,   848,   323,   324,   325,
       0,   326,   327,     0,     0,   328,   329,   330,     0,     0,
     331,     0,   849,   334,   850,     0,   337,   338,   339,   340,
     341,   342,   343,   344,   345,     0,     0,   346,     0,     0,
       0,     0,   347,   348,     0,   851,   351,   352,     0,   354,
     355,   356,     0,   357,   358,   359,   360,   361,     0,     0,
     362,     0,   363,   364,   365,   852,   367,   368,   369,   370,
       0,   371,   372,   373,     0,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,     0,   384,   385,   853,   387,
     388,   389,   854,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,     0,   855,   402,   403,   404,   405,
     406,   407,   856,   409,   410,     0,   411,   857,     0,   413,
     858,   415,     0,     0,   416,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,   859,   429,     0,   431,
       0,   432,   433,     0,   434,   860,   436,   437,   438,   439,
     440,     0,   861,   862,     0,     0,     0,   443,   444,     0,
     446,     0,     0,   448,   449,   863,   451,   452,   453,   454,
     455,   864,     0,   456,   457,   458,     0,   459,   460,   461,
     462,     0,   463,   464,   465,   466,   467,     0,   865,     0,
     470,   866,   472,     0,   473,   474,   475,   476,     0,     0,
       0,   477,     0,     0,   478,   479,   480,   481,   482,   483,
     811,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   495,   496,   497,   498,     0,     0,     0,     0,   113,
     114,   115,   116,     0,   117,   118,   119,   120,     0,   121,
     122,   123,     0,     0,     0,   812,     0,     0,     0,     0,
       0,   813,   125,   126,     0,   127,   128,   129,   814,   131,
     132,   133,     0,   815,   816,   817,   818,     0,   139,   140,
     141,   142,   143,   144,     0,     0,   145,   146,   819,   820,
     149,     0,   150,   151,   152,   153,     0,     0,   821,     0,
     822,   157,   158,   159,   160,   161,   823,   163,   164,   165,
       0,   166,   167,   168,   169,   170,     0,     0,   824,   172,
     173,   174,   175,   176,   177,   178,   179,   180,   181,   825,
     826,   184,     0,   185,     0,   186,   187,   188,   189,   190,
     191,     0,   192,     0,   193,   194,   195,   196,     0,     0,
     197,   198,   827,   200,   201,     0,     0,     0,   202,   203,
     204,     0,  1837,   206,   207,     0,   208,   209,   210,   211,
       0,   213,   214,   215,   216,   217,     0,     0,   219,     0,
     220,   221,   828,   223,     0,   224,     0,   225,   829,     0,
     830,   228,   229,     0,   831,   232,     0,   233,     0,     0,
       0,     0,     0,     0,   236,     0,   237,   238,   239,   240,
     241,   242,   243,   833,   245,   246,   247,   248,     0,   249,
     250,   251,   252,   253,   254,   255,     0,   256,   834,     0,
     259,   260,   261,   262,   263,   835,   836,     0,   837,     0,
     267,   838,   839,   270,   840,   272,     0,   273,   274,   275,
     276,   277,     0,     0,   278,   841,   280,   842,     0,   282,
     283,   284,   285,   286,   287,   288,   289,   843,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   844,   845,   846,   312,
     313,   314,     0,     0,     0,   316,   317,   847,   319,     0,
       0,   321,   848,   323,   324,   325,     0,   326,   327,     0,
       0,   328,   329,   330,     0,     0,   331,     0,   849,   334,
     850,     0,   337,   338,   339,   340,   341,   342,   343,   344,
     345,     0,     0,   346,     0,     0,     0,     0,   347,   348,
       0,   851,   351,   352,     0,   354,   355,   356,     0,   357,
     358,   359,   360,   361,     0,     0,   362,     0,   363,   364,
     365,   852,   367,   368,   369,   370,     0,   371,   372,   373,
       0,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,     0,   384,   385,   853,   387,   388,   389,   854,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
       0,   855,   402,   403,   404,   405,   406,   407,   856,   409,
     410,     0,   411,   857,     0,   413,   858,   415,     0,     0,
     416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,   859,   429,     0,   431,     0,   432,   433,     0,
     434,   860,   436,   437,   438,   439,   440,     0,   861,   862,
       0,     0,     0,   443,   444,     0,   446,     0,     0,   448,
     449,   863,   451,   452,   453,   454,   455,   864,     0,   456,
     457,   458,     0,   459,   460,   461,   462,     0,   463,   464,
     465,   466,   467,     0,   865,     0,   470,   866,   472,     0,
     473,   474,   475,   476,     0,     0,     0,   477,     0,     0,
     478,   479,   480,   481,   482,   483,  2919,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   495,   496,   497,
     498,     0,     0,     0,     0,   113,   114,   115,   116,     0,
     117,   118,   119,   120,     0,   121,   122,   123,     0,     0,
       0,  2920,     0,     0,     0,     0,     0,  2921,   125,   126,
       0,   127,   128,   129,  2922,   131,   132,   133,     0,   815,
    2923,   817,   818,     0,   139,   140,   141,   142,   143,   144,
       0,     0,   145,   146,   819,   820,   149,     0,   150,   151,
     152,   153,     0,     0,  2924,     0,  2925,   157,   158,   159,
     160,   161,  2926,   163,   164,   165,     0,   166,   167,   168,
     169,   170,     0,     0,  2927,   172,   173,   174,   175,   176,
     177,   178,   179,   180,   181,   825,   826,   184,     0,   185,
       0,   186,   187,   188,   189,   190,   191,     0,   192,     0,
     193,   194,   195,   196,     0,     0,   197,   198,   827,   200,
     201,     0,     0,     0,   202,   203,   204,     0,   205,   206,
     207,     0,   208,   209,   210,   211,     0,   213,   214,   215,
     216,   217,     0,     0,   219,     0,   220,   221,   828,   223,
       0,   224,     0,   225,  2928,     0,  2929,   228,   229,  2930,
    2931,   232,     0,   233,     0,     0,     0,     0,     0,     0,
     236,     0,   237,   238,   239,   240,   241,   242,   243,  2932,
     245,   246,   247,   248,     0,   249,   250,   251,   252,   253,
     254,   255,     0,   256,  2933,     0,   259,   260,   261,   262,
     263,   835,   836,     0,   837,     0,   267,  2934,  2935,   270,
    2936,   272,     0,   273,   274,   275,   276,   277,     0,     0,
     278,  2937,   280,  2938,     0,   282,   283,   284,   285,   286,
     287,   288,   289,  3210,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   844,  2940,   846,   312,   313,   314,     0,     0,
       0,   316,   317,  2942,   319,     0,     0,   321,   848,   323,
     324,   325,     0,   326,   327,     0,     0,   328,   329,   330,
       0,     0,   331,     0,  2944,   334,  2945,     0,   337,   338,
     339,   340,   341,   342,   343,   344,   345,     0,     0,   346,
       0,     0,     0,     0,   347,   348,     0,  2946,   351,   352,
       0,   354,   355,   356,     0,   357,   358,   359,   360,   361,
       0,     0,   362,     0,   363,   364,   365,   852,   367,   368,
     369,   370,     0,   371,   372,   373,     0,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,     0,   384,   385,
    2947,   387,   388,   389,     0,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,     0,  2948,   402,   403,
     404,   405,   406,   407,     0,   409,   410,     0,   411,  2950,
       0,   413,   858,   415,     0,     0,   416,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,  3211,   429,
       0,   431,     0,   432,   433,     0,   434,  2952,   436,   437,
     438,   439,   440,     0,   861,   862,     0,     0,     0,   443,
     444,     0,   446,     0,     0,   448,   449,  2953,   451,   452,
     453,   454,   455,     0,     0,   456,   457,   458,     0,   459,
     460,   461,   462,     0,   463,   464,   465,   466,   467,     0,
     865,     0,   470,  2955,   472,     0,   473,   474,   475,   476,
       0,     0,     0,   477,     0,     0,   478,   479,   480,   481,
     482,   483,   506,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   495,   496,   497,   498,     0,     0,     0,
       0,   113,   114,   115,   116,     0,   117,   118,   119,   120,
       0,   121,   122,   123,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   125,   126,     0,   127,   128,   129,
       0,   131,   132,   133,   134,   135,     0,   137,   138,     0,
     139,   140,   141,   142,   143,   144,     0,     0,   145,   146,
     147,   148,   149,     0,   150,   151,   152,   153,   154,     0,
       0,     0,   156,   157,   158,   159,   160,   161,     0,   163,
     164,   165,     0,   166,   167,   168,   169,   170,     0,     0,
       0,   172,   173,   174,   175,   176,   177,   178,   179,   180,
     181,   182,   183,   184,     0,   185,     0,   186,   187,   188,
     189,   190,   191,     0,   192,     0,   193,   194,   195,   196,
       0,     0,   197,   198,   199,   200,   201,     0,     0,     0,
     202,   203,   204,     0,   205,   206,   207,     0,   208,   209,
     210,   211,   212,   213,   214,   215,   216,   217,   218,     0,
     219,     0,   220,   221,   222,   223,     0,   224,     0,   225,
       0,     0,     0,   228,   229,   507,     0,   232,     0,   233,
       0,     0,     0,   234,   235,     0,   236,     0,   237,   238,
     239,   240,   241,   242,   243,     0,   245,   246,   247,   248,
       0,   249,   250,   251,   252,   253,   254,   255,     0,   256,
       0,   258,   259,   260,   261,   262,   263,   264,   265,     0,
     266,     0,   267,     0,     0,   270,     0,   272,     0,   273,
     274,   275,   276,   277,     0,     0,   278,     0,   280,     0,
       0,   282,   283,   284,   285,   286,   287,   288,   289,   508,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,     0,
     311,   312,   313,   314,     0,   315,     0,   316,   317,     0,
     319,     0,   320,   321,   322,   323,   324,   325,     0,   326,
     327,     0,     0,   328,   329,   330,     0,     0,   331,   332,
       0,   334,     0,   336,   337,   338,   339,   340,   341,   342,
       0,   344,   345,     0,     0,   346,     0,     0,     0,     0,
     347,   348,   349,     0,   351,   352,   353,   354,   355,   356,
       0,   357,   358,   359,   360,   361,     0,     0,   362,     0,
     363,     0,   365,   366,   367,   368,   369,   370,     0,   371,
     372,   373,     0,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,     0,   384,   385,     0,   387,   388,   389,
     390,     0,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,     0,     0,   402,   403,   404,   405,   406,   407,
     408,   409,   410,     0,   411,     0,     0,   413,   414,   415,
       0,     0,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,   509,   429,   430,   431,     0,   432,
     433,     0,   434,     0,   436,   437,   438,   439,   440,     0,
     441,   442,     0,     0,     0,   443,   444,   445,   446,   447,
       0,   448,   449,   450,   451,   452,   453,   454,   455,     0,
       0,   456,   457,   458,     0,   459,   460,   461,   462,     0,
     463,   464,   465,   466,   467,   468,   469,     0,   470,     0,
     472,     0,   473,   474,   475,   476,     0,     0,     0,   477,
       0,     0,   478,   479,   480,   481,   482,   483,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,   498,   811,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   113,   114,   115,   116,     0,   117,   118,   119,
     120,     0,   121,   122,   123,     0,     0,     0,   812,     0,
       0,     0,     0,     0,   813,   125,   126,     0,   127,   128,
     129,   814,   131,   132,   133,     0,   815,   816,   817,   818,
       0,   139,   140,   141,   142,   143,   144,     0,     0,   145,
     146,   819,   820,   149,     0,   150,   151,   152,   153,     0,
       0,   821,     0,   822,   157,   158,   159,   160,   161,   823,
     163,   164,   165,     0,   166,   167,   168,   169,   170,     0,
       0,   824,   172,   173,   174,   175,   176,   177,   178,   179,
     180,   181,   825,   826,   184,     0,   185,     0,   186,   187,
     188,   189,   190,   191,     0,   192,     0,   193,   194,   195,
     196,     0,     0,   197,   198,   827,   200,   201,     0,     0,
       0,   202,   203,   204,     0,   205,   206,   207,     0,   208,
     209,   210,   211,     0,   213,   214,   215,   216,   217,     0,
       0,   219,     0,   220,   221,   828,   223,     0,   224,     0,
     225,   829,     0,   830,   228,   229,     0,   831,   232,     0,
     233,     0,     0,     0,     0,     0,     0,   236,     0,   237,
     238,   239,   240,   241,   242,   243,   833,   245,   246,   247,
     248,     0,   249,   250,   251,   252,   253,   254,   255,     0,
     256,   834,     0,   259,   260,   261,   262,   263,   835,   836,
       0,   837,     0,   267,   838,   839,   270,   840,   272,     0,
     273,   274,   275,   276,   277,     0,     0,   278,   841,   280,
     842,     0,   282,   283,   284,   285,   286,   287,   288,   289,
       0,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   844,
     845,   846,   312,   313,   314,     0,     0,     0,   316,   317,
     847,   319,     0,     0,   321,   848,   323,   324,   325,     0,
     326,   327,     0,     0,   328,   329,   330,     0,     0,   331,
       0,   849,   334,   850,     0,   337,   338,   339,   340,   341,
     342,   343,   344,   345,     0,     0,   346,     0,     0,     0,
       0,   347,   348,     0,   851,   351,   352,     0,   354,   355,
     356,     0,   357,   358,   359,   360,   361,     0,     0,   362,
       0,   363,   364,   365,   852,   367,   368,   369,   370,     0,
     371,   372,   373,     0,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,     0,   384,   385,   853,   387,   388,
     389,     0,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,     0,   855,   402,   403,   404,   405,   406,
     407,     0,   409,   410,     0,   411,   857,     0,   413,   858,
     415,     0,     0,   416,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,   427,     0,   429,     0,   431,     0,
     432,   433,     0,   434,   860,   436,   437,   438,   439,   440,
       0,   861,   862,     0,     0,     0,   443,   444,     0,   446,
       0,     0,   448,   449,   863,   451,   452,   453,   454,   455,
       0,     0,   456,   457,   458,     0,   459,   460,   461,   462,
       0,   463,   464,   465,   466,   467,     0,   865,     0,   470,
     866,   472,     0,   473,   474,   475,   476,     0,     1,     0,
     477,     0,     0,   478,   479,   480,   481,   482,   483,     2,
       0,     3,     4,     0,     0,     1,     0,     0,     0,     0,
     495,   496,   497,   498,     0,     0,     2,     0,     0,     0,
       6,     0,     0,     0,     0,     0,     0,     0,     0,     7,
       0,     0,     0,     0,     0,     0,     0,     6,     0,     0,
       0,     8,     0,     0,     0,     0,     7,     0,     0,     0,
       0,     0,     9,     0,     0,     0,     0,     0,     8,     0,
       0,     0,     0,     0,    10,     0,   565,     0,     0,     9,
       0,     0,     0,     0,     0,     0,     0,    12,     0,     0,
       0,    10,     0,   565,     0,     0,     0,     0,     0,     0,
       0,    13,     0,     0,    12,     0,     0,     0,     0,     0,
       0,     0,   566,     0,     0,     0,     0,     0,    13,     0,
      16,     0,     0,     0,     0,     0,     0,     0,    17,   566,
       0,     0,     0,     0,     0,     0,     0,    16,     0,     0,
       0,     0,     0,     0,    20,    17,     0,     0,    21,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    20,     0,     0,     0,    21,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    23,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    23,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    24,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    24,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    25,    26,    27,     0,     0,     0,     0,
       0,    28,     0,     0,    29,     0,     0,     0,     0,     0,
      25,    26,    27,     0,     0,     0,     0,     0,    28,     0,
       0,    29,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    30,     0,     0,     0,
       0,     0,     0,     0,     0,    31,     0,     0,     0,     0,
       0,     0,     0,    30,     0,     0,     0,     0,     0,    32,
       0,     0,    31,     0,     0,     0,    33,     0,     0,     0,
       0,    34,     0,     0,     0,     0,    32,     0,     0,     0,
       0,     0,    35,    33,     0,     0,     0,     0,    34,     0,
       0,     0,     0,     0,    36,     0,     0,     0,    37,    35,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    36,     0,     0,     0,    37,     0,     0,    38,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    39,     0,     0,     0,    38,     0,    41,     0,     0,
       0,     0,    42,     0,     0,     0,   567,     0,    39,     0,
       0,     0,     0,     0,    41,     0,     0,     0,    43,    42,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    43,     0,     0,     0,     0,
       0,     0,    44,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   568,     0,     0,    44,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   663
};

static const yytype_int16 yycheck[] =
{
       8,   561,   499,   757,    12,    21,    45,   769,   629,    17,
       0,   560,     0,    45,     0,    23,    24,   652,     0,     0,
      28,    29,    30,    87,    88,    33,  1241,   985,    36,    37,
      85,   777,    40,   781,   856,    43,    44,    45,  1005,   985,
     558,  1101,     7,  1163,   786,  1228,   862,  1518,  1203,   568,
       0,  1704,     0,  1408,  2102,    36,    21,     0,     0,    18,
       0,  2099,  1229,  1046,  1564,    37,  2130,  1205,  2132,   558,
    1586,    87,    88,  1660,     7,  2222,    89,  2157,    18,  1208,
    2167,  2268,  2269,  2270,    89,  1806,  2620,  2620,    21,  2652,
     994,    99,  1169,   567,  1413,  1233,   104,   105,   106,   107,
     108,   994,  2650,   568,  2096,   887,  2673,  2666,   890,   994,
    1359,   625,   994,     0,  1613,  1614,   630,  2156,    99,  1457,
      44,  1130,    87,    88,   676,   622,  1135,     0,     0,  2218,
    1097,     0,     0,     0,     0,   107,     0,     0,  2281,     0,
       0,  2465,     0,     0,     0,     0,    24,  3105,  2530,     0,
       0,     0,     0,     0,    87,    88,     0,   586,  2576,   819,
     820,     0,  2580,  2987,  1824,    17,   769,     9,   771,     0,
     773,   668,  3003,     5,  1664,  1821,     5,    17,    21,     5,
      61,     5,  3006,  1141,   747,  1722,   846,    13,    14,    13,
      14,    26,     5,  1953,     5,     5,     5,     5,    74,     5,
      13,    14,    13,    14,     5,    13,    14,     5,     9,     5,
    2299,     9,    65,    13,    14,     5,    11,     5,     5,     5,
       5,    16,     5,     5,    40,     5,     5,  2292,     5,    47,
     752,   172,   117,   140,  2288,  1724,   120,    13,    14,   115,
      57,     9,    11,   752,    87,    88,    82,    16,  3214,     3,
       4,     5,     5,    48,   229,     9,  2848,    93,    47,  1217,
       9,   100,  1220,  1221,  3101,     4,    47,   172,  1014,   100,
       9,   193,   224,  1089,  1986,    74,  2439,   107,  2894,  2368,
    2369,  2794,  2371,  2796,  2966,    80,    47,  1999,    11,     4,
     292,   172,   120,    16,     9,   122,  3436,   293,    31,    31,
     138,   290,     3,  3104,   278,     8,    39,    39,    11,   183,
     316,   298,    15,    16,   298,   230,    19,    20,    21,   173,
       8,    65,  2509,    11,   117,    48,   131,    15,    16,   120,
    1401,    19,    20,    21,    35,    36,    11,   107,   856,   316,
      15,    16,   894,  1326,   115,   136,    31,  3305,  3306,    31,
    3549,   371,  1335,     5,    39,    17,    65,    80,  2422,   274,
      43,   115,   117,   460,    75,  3299,    82,  3301,   281,   436,
     169,  3092,  2508,  3094,  2510,   275,   997,    93,    31,   173,
     164,    13,    14,  2590,   274,  3497,    39,   215,   166,   162,
     149,    80,   195,   421,  1216,   372,    40,    34,  2119,  1923,
    1146,   277,    11,   509,  1064,  1065,   282,   515,  3691,   508,
      13,    14,    11,  1533,   522,  2949,   522,  3241,   485,   518,
    1080,   195,    11,   520,    61,  1485,    15,    16,    11,    42,
    1954,   459,    15,    16,   106,  2998,   317,   318,   319,    48,
     992,   124,  2589,   202,  1564,   342,  3009,   337,   521,   131,
     234,   524,  3000,   292,   209,   331,   310,    65,    11,    48,
     104,   292,   106,    16,   108,  3748,   985,   221,   241,  2461,
     171,    80,   173,   349,  3311,   372,  2683,  2564,   393,   314,
     315,    80,   287,   457,   998,   398,    42,  3627,  3687,   282,
     244,    80,   433,  2534,  2535,    48,  1010,  2586,   201,  2588,
     520,  3302,   383,  2003,   274,   216,  3440,  1578,   516,   515,
     363,   282,   986,   521,  3626,   353,   524,  3030,   520,   274,
     172,   224,   277,   531,   520,   364,  1045,    80,   433,  1047,
    3212,   520,   331,   364,   515,   167,   568,   524,   515,   330,
     524,   422,   457,   397,  1096,  3266,    11,  1885,   326,   524,
     558,    16,   560,   561,   562,   358,   620,  3173,  1193,  1194,
     568,  1810,   397,   176,  3395,    11,  1626,  3159,   509,    15,
      16,   478,   472,   457,   455,   451,  3192,   462,  2741,   531,
    2096,   522,   254,    48,   460,   466,   460,   361,   620,  2725,
     262,   294,   422,   601,   602,   603,  1751,   433,   520,   434,
     108,   419,    48,   611,   620,  1102,   294,  1170,  2662,   568,
    1392,  1365,  3570,  2702,  2679,    80,   624,   625,  2378,   363,
     176,   629,   630,  1141,  1143,  1144,   394,   567,  3594,   457,
     419,   663,   108,   460,    80,  2134,  2173,  1385,   419,   520,
     558,  2301,   477,   482,   609,  1197,   654,   655,  2294,   657,
    2166,   482,   451,   666,   363,   620,   409,   410,   419,   469,
     512,   666,   394,   671,  3223,   317,   318,   319,   401,   677,
    2160,   524,   512,  1195,  1841,   484,   609,   519,   484,  1662,
    3214,  3214,   521,  1898,   523,  2174,  1195,   620,   520,   518,
     521,   520,   523,   522,   520,   527,   520,   506,  1216,   671,
     506,   527,   757,   520,   520,  3536,  1766,   520,  1768,   520,
     520,   520,   520,  3537,   520,   674,   401,   433,  2865,   520,
     520,   516,   520,  2435,   520,   603,   520,  3109,  1157,  2872,
     520,   383,   520,   520,   520,   520,   744,   520,   520,   747,
     520,   520,  3066,   520,   520,  3703,  3164,   516,   401,  1409,
    1410,  3169,   742,   677,   742,   363,   742,   511,   512,  2008,
     742,   742,   511,   512,   108,   383,   609,   482,   776,   470,
     422,   779,   511,   512,   115,   747,    66,   620,  2819,   787,
     524,   426,  2120,   428,    74,    65,   794,   795,   796,   797,
     164,   506,   742,   516,   742,  2982,   511,   512,    55,   742,
     742,   809,   742,   455,   507,   508,   509,  2846,   511,   512,
     513,   514,   515,   516,   466,   524,   108,    31,    26,   507,
     508,   509,  1780,   511,   512,   513,   514,   515,   516,   518,
     482,  3394,  1790,   522,   412,  1793,   511,   512,   513,   514,
     515,   516,    27,   392,  3411,   507,  1966,    38,   856,  1401,
     512,  3410,   193,   518,   506,   742,   518,   522,   520,  1377,
    2852,  1607,  1608,  1609,  1979,  1980,  1981,  1850,   520,   742,
     742,   118,   516,   742,   742,   742,   742,   521,   742,   742,
     524,   742,   742,  2003,   742,   742,   742,   742,  1377,  1407,
    1408,   742,   742,   742,   742,   742,  2985,   475,   742,   273,
     162,  1461,   118,  1538,    90,  1423,   524,  1456,   178,    38,
    1459,    55,   260,   261,   267,    31,  1465,   131,  1407,  1554,
     177,   484,   511,   512,   513,   514,   515,   516,  2048,  2400,
     513,   514,   515,   516,  1423,   150,   277,   508,   856,   196,
     178,  1899,   128,   506,   201,  2461,   520,   518,   460,  1468,
     197,   136,   148,  1899,   244,   422,   995,  1021,   511,   512,
     513,   514,   515,   516,  1028,  1974,   347,   611,   131,    85,
     323,   520,  1524,   248,   244,  2474,  1880,   985,    94,   241,
    3680,   197,   173,   240,  3547,  3533,  1879,   995,   203,   997,
     998,  3396,  1000,  1467,   274,  1880,  1881,  1882,  1880,  1881,
     116,  1009,  1010,  1468,   385,  1021,   244,  1015,   520,  2328,
     482,  2899,  1028,     0,  1776,  1512,  2335,  1531,  2337,  2907,
     211,   523,  2271,  1024,   220,  1577,  1578,   289,  3175,  1030,
    1038,   470,   380,   381,   506,  1587,   227,  1045,  1046,  1047,
    3740,   422,   174,  1051,   173,   558,   986,   238,   513,   514,
     515,   516,   196,  1807,  1808,  1809,  1021,   201,  1610,  2136,
    3594,  3594,  2139,  1028,  2785,  1097,   524,   513,   514,   515,
     516,  3619,    11,   248,   131,  3155,  2196,   193,  2245,  1861,
    1629,  3129,   211,   363,     5,   362,   174,  3125,  1021,  1831,
     206,  1099,   473,  1101,   248,  1028,   240,   520,   227,  1617,
     744,  1883,   298,   160,  2620,  1887,   314,   315,  1890,   238,
     390,   296,  2519,   390,   277,   358,  2254,   249,  1906,  2526,
    2527,  2528,  1910,   309,   287,  1913,  1165,   515,  1617,  1047,
    3535,   181,  2487,  3538,   522,  1143,  1144,  1145,   376,   396,
    1148,    80,   248,   787,     4,   826,  1749,    71,    72,     9,
     794,   795,   796,   797,  1162,  1163,   426,  1165,   428,  2126,
    3723,   249,  1170,  1176,  1177,   809,  1179,   848,  2228,  2229,
    2230,  1176,  1177,  1776,  1179,   360,   367,   362,  1021,   454,
    1523,  2310,  1525,  1526,   454,  1028,   394,  2316,   426,   397,
     428,   484,  1795,   384,  1202,  1203,   205,  1800,  1170,   162,
     230,   376,   194,   884,   167,   390,   509,  1215,  1216,    42,
     518,     3,    27,   506,   522,   347,   454,   520,    33,  2719,
     277,   178,   376,  3370,  1232,   282,   434,   520,  1236,    62,
     287,     4,  1240,  3460,  3461,     4,     9,  1786,   367,  1757,
       9,   427,  1791,    27,   274,   520,    23,    24,   205,    33,
      82,   162,   396,   385,   450,   384,   167,   148,   277,   347,
    1232,    93,  1019,   282,    82,    13,    14,  3454,  1757,   477,
     376,   162,   148,   106,  3679,    93,   167,    11,   241,   454,
    1037,   518,    27,   484,  1041,   522,   162,   244,    33,     4,
     422,   167,   408,  3341,     9,   411,   248,   385,  1216,  1003,
     454,  3339,  2362,   439,   347,   506,  1858,     4,  2423,  2424,
    2425,  2426,     9,   343,    48,   255,   115,  2437,  1326,   520,
    2440,   136,   341,   511,  3551,   513,   289,  1335,   131,   220,
     241,   525,   422,   110,   422,   529,  2852,   379,   526,   527,
     297,   473,   385,   856,   220,   520,    80,     8,   454,   473,
     241,  1359,   136,  1871,    15,    16,  1000,   160,    19,    20,
      21,  2716,  1370,   393,  1372,   241,   520,  3765,  1029,  1377,
    1378,   204,  1033,   172,  3772,   248,    42,  2131,   289,   422,
    1899,  1389,  1871,   520,   441,   473,  1376,  1068,  1376,   183,
    1376,   136,   186,   181,  1376,   452,    62,  1915,   289,  1407,
    1408,   518,  1083,   520,  2811,   522,   426,   298,   428,  1927,
    1962,  2357,  1420,   289,   520,  1423,   520,  1425,  2773,  2602,
     521,   254,   298,   524,   376,   521,  1915,   457,   524,   262,
     473,   518,  2587,   520,   654,   655,  2603,   657,  1927,  1957,
     106,   274,   520,  2225,   521,  2227,  1964,   524,  1456,  1457,
     167,  1459,   248,  1461,  1462,   521,  1464,  1465,   524,  1377,
    1468,  2516,  2645,    13,    14,  2520,  2521,  2522,  1957,   426,
     205,   428,  2601,   306,  2603,  1964,   482,  1485,   484,   282,
    1544,   296,  2000,  1547,   287,   520,  2004,  2006,  1552,  1407,
    1408,  1555,  2010,   426,   451,   428,  1560,   454,  2465,   426,
     172,   428,   454,   376,    27,  1423,   305,    13,    14,  1468,
      33,  2000,   296,    13,    14,  2004,  2332,  2333,   317,   318,
     319,  2010,  2228,  1531,  2230,  1533,  1534,  1467,  1544,   362,
     520,  1547,  2084,  1541,  1047,   520,  1552,   521,   204,  1555,
     524,   356,    27,  2291,  1560,   360,   521,   521,    33,   524,
     524,   296,   385,  1518,  1562,   520,  1564,  2617,  1202,   450,
     520,  2621,  3149,  2623,  3711,   520,  2201,  3631,   520,    13,
      14,  1215,   356,   406,   450,   390,   360,   520,  1586,  1544,
     376,   454,  1547,  1591,   383,  1518,   521,  1552,   254,   524,
    1555,    27,  1236,  1574,   520,  1560,   262,    33,  1606,   521,
    3664,  3688,   524,  3690,   521,   520,   390,   524,   274,  1617,
    2586,  1544,  2588,   136,  1547,   360,   513,   521,  1626,  1552,
     524,  1629,  1555,   422,  1574,   521,  1574,  1560,   524,    13,
      14,  1574,  1574,   294,  1574,   749,   521,   751,   441,   524,
     306,   376,   518,    13,    14,   390,   522,   520,   463,   452,
     385,   136,   521,   506,  1662,   524,   455,   520,   454,   226,
    3747,    42,  2620,   521,   503,   521,   524,   466,   524,  3024,
    1678,  3735,  1680,   521,  1682,  1518,   524,   521,    27,   463,
     524,    62,  3746,   482,    33,   172,   522,   422,   521,  1697,
    1698,   292,   521,   503,  1707,   524,   362,   522,  3214,  1617,
     136,  1544,  1707,  1216,  1547,   521,   171,   506,   524,  1552,
       6,  2866,  1555,     9,    13,    14,   524,  1560,   463,   385,
      16,   520,  1681,   521,   520,   106,   524,  1735,  1372,  1737,
     521,    74,   252,   524,  1378,    31,   521,    80,   473,    35,
     406,   521,   521,  1751,  1752,   524,  2913,    13,    14,  1757,
      93,    13,    14,   520,  1762,  1763,  1764,  1765,  1766,  1767,
    1768,   172,     3,   521,     5,  1773,   524,  1775,  2983,    13,
      14,  3358,   115,   296,   117,    13,    14,   521,  1786,  1787,
     524,    13,    14,  1791,  1792,  2303,  3257,   136,  1796,  1797,
    1798,  1799,   297,  1801,  1802,   176,   521,   521,   521,   524,
     524,   524,  1810,  2786,  2353,   521,  1510,  1511,   524,  2555,
     521,   296,  1516,   524,  2303,  1823,  1824,  1825,  1826,    13,
      14,    61,  1830,   204,   601,   521,   603,   520,   524,   423,
     317,   318,   319,   356,    13,    14,  1844,   360,  2357,  1757,
     521,   521,  1850,   524,   524,   503,   507,   508,   509,   226,
     511,   512,   513,   514,   515,   516,   521,   634,   153,   524,
     296,   191,   192,  1871,  1377,  1846,   209,   390,   109,   110,
     356,   356,   153,   254,   153,   360,   153,  1885,    42,   656,
     521,   262,   521,   524,  2638,   524,   521,   521,   521,   524,
     524,  1899,   520,   274,  1407,  1408,   383,  1541,    13,    14,
      13,    14,    13,    14,  3491,   390,   277,  1915,    13,    14,
    1423,    13,    14,  2695,  2656,    13,    14,    13,    14,  1927,
     356,    13,    14,  1987,   360,   306,    13,    14,  2676,  1993,
     260,   261,    42,   131,   277,   422,   371,   372,   473,   282,
     463,   371,   372,  2578,   264,   265,  2904,   296,    89,  1957,
     191,   192,   153,  1871,   390,   486,  1964,   469,  1966,   380,
     381,   520,   160,   327,   131,   371,   372,   520,   455,  2487,
    1978,  1987,   371,   372,   314,   315,  3629,  1993,   463,   466,
    3633,   362,   465,   466,  1143,  1144,   520,   153,   331,    41,
    1998,   520,  2000,   160,   520,  2003,  2004,  1915,  2006,   520,
    2008,   153,  2010,   522,   385,   153,   349,   356,   153,  1927,
     292,   360,   520,   433,   521,   256,   257,   258,   259,   260,
     261,   520,  1987,   264,   265,   406,  3497,   463,  1993,   520,
     520,   424,   222,   520,   227,   227,  1680,  3220,  1682,  1957,
    2048,   390,   301,   520,  2052,   227,  1964,   520,   299,  2057,
     380,   381,  2084,  1697,  1987,     8,    42,   520,    11,   239,
    1993,     5,    15,    16,     5,   520,    19,    20,    21,   520,
     520,  3724,  3039,   520,  3020,     5,  3059,  3548,  3594,   277,
       5,   520,  2000,     5,   282,     5,  2004,   520,  2096,   287,
     149,  1735,  2010,     9,   520,   483,   303,   524,   104,   524,
      42,   222,  2620,   521,  1617,   390,   167,   167,   451,   287,
      61,  2150,  2120,  2129,   463,   282,   289,   460,   520,   239,
     287,   433,   520,    93,   524,   433,  3481,  2949,    61,    61,
     433,  2620,   267,  2141,  2916,  2917,  2152,   148,   482,   380,
     381,   433,  2150,   433,  1987,   531,   153,   277,  2156,   277,
    1993,   162,   100,   520,    42,  3626,   167,   520,   277,   277,
     520,  3281,  2143,     3,  2129,     9,    41,   431,   431,   522,
     518,   518,   433,  2691,   172,   433,   433,  3392,   433,  1823,
    1824,  1825,  1826,   521,   521,   521,  1830,  2152,  2196,   521,
     521,   524,   521,  2143,  2202,  2143,  2129,  2746,  2716,   521,
    2143,  2143,  2691,  2143,   521,   520,   479,   227,   985,   220,
    2218,   227,   284,   284,   520,   520,    11,   994,   478,  2152,
    2228,  2229,  2230,  3578,  1928,  1929,  1930,  1931,  1932,  1933,
     241,   524,  1936,  1937,  1938,  1939,  1940,  1941,  1942,  1943,
    1944,  1945,   358,   441,  1757,   519,   524,   531,   201,   524,
     431,   520,   528,   282,   452,  2773,  3214,   433,   163,   500,
     501,   172,   183,  2271,   520,  2297,   509,   520,  1045,   521,
     524,   224,   460,  2281,   441,   220,   524,   267,   289,  2287,
     230,   393,   316,   293,   316,   452,  2129,   298,   524,   524,
     183,  2299,  2300,  2301,  2302,  2303,  2286,   521,  2286,   222,
    2286,   520,   230,   277,  2286,  2313,   230,  2315,   336,  2152,
    2318,  3371,   290,   298,   473,  2323,   423,   178,   520,   153,
     520,   153,   153,   153,   482,    42,   292,   518,  2336,  1106,
     277,   503,   521,   503,  1978,   178,  2885,   521,  1115,    42,
     292,   294,    61,   172,   205,  2353,   521,   521,    11,  2357,
     521,    42,   521,   167,  2362,  1132,   521,   520,  1871,   521,
    2368,  2369,   205,  2371,  1141,   521,  1143,  1144,   521,   520,
     183,     0,   521,    12,   520,  2079,  2080,   167,    17,   519,
     524,   528,   521,   244,   522,  2303,   503,   521,   521,    18,
      29,   172,    21,   520,   433,   520,   520,  2915,   520,   156,
       9,   244,  1915,   479,    43,    44,   479,    36,    42,    61,
     524,   293,  2420,   293,  1927,   509,    45,   505,   524,   457,
    2428,  2429,  2430,   247,    61,    61,  2915,   277,   267,  2437,
    3597,  2949,  2440,  2465,   433,  2400,   297,   520,  2446,   450,
     153,   205,   153,   153,  1957,  3193,   433,  2502,   284,   433,
     433,  1964,   433,  2461,   297,   519,   284,   520,    87,    88,
      89,    42,   358,   521,   520,  2497,   105,  2400,   521,   524,
      99,   290,   292,   482,  2439,    42,   153,   338,   521,  2487,
     282,   521,   519,   519,   172,   520,    61,  2000,   521,   520,
     188,  2004,   167,  2532,  2533,   521,   521,  2010,    80,   144,
    2539,  3020,   521,    38,   201,   172,  3024,   518,   521,    44,
     521,   522,   520,   531,   302,   376,   521,   520,    83,   521,
     524,   521,   364,   293,  2532,  2533,   520,   183,   525,  3283,
     521,  2539,   153,   376,   176,   524,  3596,   445,    42,   521,
     520,   520,  2550,    42,   521,   521,  2578,    86,  2556,   521,
     521,   524,   520,   460,   507,   508,   509,  2400,   511,   512,
     513,   514,   515,   516,  2572,   426,   101,   428,  2576,  2487,
     519,  2552,  2580,  2581,  2582,   172,   201,  3126,  2586,  2587,
    2588,   524,  2590,   426,   445,   428,   520,   481,   524,     9,
     451,   303,   521,   454,   521,  3562,   466,   292,  3116,   511,
     519,  2609,   445,  2611,   521,   509,   521,   521,   451,  2617,
     519,   454,  2620,  2621,  3360,  2623,  2624,  2625,  2626,  2627,
    2628,  2629,  2630,  2631,  2632,  2633,   521,  3116,    61,   521,
     520,   482,   521,   207,   521,   521,  3594,   521,   173,   115,
      42,   520,  2650,  2287,  3279,   230,  2654,    88,   183,  2657,
     194,   282,   282,   522,   522,   522,  2300,  2301,  2302,  2667,
     522,  3282,   522,   522,  3285,  2655,   522,  2655,   522,  2655,
    2651,  2315,   433,  2655,  2318,  2683,   211,   522,   433,  2323,
      42,   522,   509,  2691,   522,   522,    42,   522,   277,   522,
     107,   482,   227,    42,  2702,   172,  3214,  2678,   524,   522,
    2681,   522,  2620,   238,   522,  3459,  2738,  1484,  2716,   520,
     522,  2719,   522,   522,   522,  3267,   522,  3269,  2726,  2727,
    2728,  2729,   522,   522,   522,  3214,     7,     8,   522,  2793,
     522,    12,   292,   522,   521,   270,    17,  2745,  2746,   522,
      21,   520,    23,    24,   522,   522,  3508,    28,    29,    30,
     522,  3499,    33,  2761,     9,    36,    37,   292,   357,    40,
     520,   520,    43,    44,   340,  2773,   524,   521,   524,    61,
     521,   201,   194,  2691,   519,   525,  2741,  2793,  2786,    11,
     524,   431,   317,  2791,  2428,  2429,  2430,  2491,  2492,   324,
    2303,   282,   433,   524,    38,   465,    91,   521,  2716,   349,
      44,     8,   520,    42,    11,   153,    87,    88,    15,    16,
    2842,   122,    19,    20,    21,   521,   521,   337,    99,   231,
    3455,   153,    42,   104,   105,   106,   107,   108,  2793,   521,
      37,   372,   367,    42,  2842,   372,   521,   520,  2846,   520,
     317,   318,   319,    42,  2852,   524,   460,   520,   311,   384,
      99,   508,   503,   172,   520,  2773,   433,   101,  2866,   520,
    2793,   282,   252,   193,  2872,   460,   445,    31,    74,   295,
      74,   520,    80,     9,   521,   521,   520,  2885,  2886,   374,
      61,   521,   172,   521,   132,  2893,   515,   520,    93,    27,
     509,   274,   531,  1670,   521,    33,   528,   292,   445,    42,
     423,    42,  2910,    83,    42,     8,   383,  2915,    11,   520,
     201,   295,    15,    16,   295,   520,    19,    20,    21,   521,
     455,   521,   465,   562,    62,   460,   292,   521,  2572,   173,
     521,   207,   292,   520,    37,   148,  3433,   521,   567,   568,
     390,  2949,   525,   529,   120,   422,   457,   520,   520,    25,
    2793,   402,   371,   524,    37,   521,   230,   520,   349,   126,
     231,  2604,   742,  3481,  2909,  1774,  2617,   211,   106,  2223,
    1682,    14,     0,  2285,  2487,  2362,   602,  2985,   455,  3020,
     609,  2647,  3514,   227,  3674,  3186,  3598,  3607,  3667,   466,
    1203,   620,  3000,  3243,   238,  2216,  3545,  2915,   136,  2229,
    2667,  3596,  2596,  3605,  2623,   482,  3014,  3039,  2213,  2713,
    2654,  3593,  3020,  2657,  1373,  2557,  3024,   224,  1456,  1468,
    3001,  3431,  1407,  3362,  2556,  3548,   270,  3493,  3710,   506,
    3399,  2949,  3770,  3776,   663,  3229,  3750,   666,   677,  3740,
    3615,  3049,  3773,   520,  3721,  3491,   608,  3055,   292,  2532,
    2149,  3059,  2150,  3312,  3462,  3063,  3100,  3702,  2539,  3703,
    3578,  2143,  1162,  1020,  2199,  1020,   204,  1746,  2165,  2421,
    3557,  2182,   100,   317,  1710,  3442,  3594,  1186,  3271,    21,
     324,  3089,  2726,  2727,  2728,  2729,  1185,   294,  1745,  2152,
    1998,  1188,  2741,  3063,   620,   998,   609,  3105,  2400,  2399,
    2446,  1425,  3207,   994,  3446,  3594,  3024,  2620,  3116,   994,
    3445,   994,  3642,   742,  2459,  2057,   254,   994,  3126,  2166,
     148,   224,  1899,   367,   262,  2020,  1539,  2835,  1905,  2059,
    2472,  2006,  1681,    30,   162,     8,   274,    99,    11,   167,
     384,    -1,    15,    16,   172,    -1,    19,    20,    21,    -1,
      -1,    -1,    -1,    -1,    -1,   183,  3164,    -1,   296,    -1,
     188,  3169,    -1,     8,    37,    -1,    11,    -1,   306,    -1,
      15,    16,    -1,    -1,    19,    20,    21,    -1,  2691,    -1,
      -1,    -1,    -1,  2887,    -1,    -1,    -1,  3195,    -1,  3228,
      -1,   294,   220,    -1,    -1,    -1,    -1,    -1,  3116,    -1,
      -1,    -1,  3762,  2716,    -1,    -1,  3214,  3215,  3216,    -1,
      -1,   455,    -1,   241,    -1,    -1,   460,    -1,   356,    -1,
    3228,  3229,   360,    -1,   362,    -1,  3234,    -1,  3236,  2006,
      -1,    -1,  3240,    -1,    -1,   516,    -1,    -1,    -1,    -1,
     521,    -1,    -1,   524,  3225,  3226,  3254,   385,    -1,  2893,
     531,    -1,   390,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2773,   289,    -1,    -1,   292,    -1,    -1,    -1,   406,    -1,
     298,    -1,    -1,  3281,  3282,    -1,    -1,  3285,    -1,   560,
     561,   562,    -1,    -1,    -1,    -1,     8,    -1,    -1,    11,
      -1,    -1,  3257,    15,    16,    -1,  3214,  3305,  3306,    -1,
     507,   508,   509,    -1,   511,   512,   513,   514,   515,   516,
      -1,    -1,   340,    -1,    -1,    -1,    -1,    -1,    -1,  3023,
     601,   602,   603,    -1,  3257,   463,    48,    -1,   609,    -1,
     611,    -1,    -1,    55,    -1,    -1,   364,    -1,    -1,   620,
      -1,    -1,    -1,   624,   625,    -1,    -1,    -1,   629,   630,
      -1,   224,    -1,    -1,  3362,    -1,    -1,   986,    80,    -1,
      -1,  3369,    -1,  3371,  3403,    -1,    -1,  3406,    -1,    -1,
      -1,    -1,    -1,   654,   655,    -1,   657,    -1,  3359,   224,
    3361,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     671,    -1,  1021,    -1,   422,  3403,   677,    -1,  3406,  1028,
    3408,    -1,  2915,    -1,   507,   508,   509,    -1,   511,   512,
     513,   514,   515,   516,  3257,    -1,    -1,    -1,    -1,    -1,
      -1,   294,   450,    -1,   146,    -1,    -1,    98,  3409,    -1,
    1059,    -1,   460,    -1,    -1,    -1,  2949,    -1,  3446,    -1,
      -1,  1070,    -1,    -1,  3425,    -1,    -1,    -1,  3429,   294,
      -1,   479,    -1,   481,   482,   177,    -1,     8,  2235,    -1,
      11,    -1,    -1,   744,    15,    16,   747,    -1,  1097,    -1,
      -1,    -1,    -1,  3481,   196,    -1,    -1,    -1,    -1,   201,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     518,    -1,    -1,   521,   522,   523,    -1,    48,    -1,    -1,
      -1,   172,  2279,    -1,    55,    -1,   787,    -1,    -1,    -1,
      -1,  3024,    -1,   794,   795,   796,   797,    -1,   240,    -1,
    2297,   558,    -1,  1162,    -1,  3533,    -1,    -1,   809,    80,
      -1,    -1,  3497,    -1,    -1,    -1,    -1,  3545,  3546,    -1,
      -1,  3549,    -1,    -1,    -1,    -1,    -1,  1176,  1177,  3557,
    1179,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  3569,  3570,  3481,  3497,    -1,    -1,    -1,    -1,    -1,
    3578,    -1,   294,    -1,  3613,    -1,  3615,    -1,    -1,  3587,
    2357,    -1,  3590,  3548,    -1,  3229,  3594,  2364,  3596,  2366,
    3234,    -1,    -1,  2370,    -1,  2372,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  3116,    -1,  3613,    -1,  3615,    -1,  3617,
    3254,  3619,    -1,    -1,    -1,  3548,    -1,    -1,  3322,  3323,
      -1,    -1,    -1,    -1,    -1,    -1,   177,    -1,    -1,    -1,
    3611,    -1,    -1,    -1,   507,   508,   509,    -1,   511,   512,
     513,   514,   515,   516,    -1,   196,   317,   318,   319,    -1,
     201,    -1,    -1,    -1,  3497,    -1,    -1,    -1,    -1,    -1,
    3578,  3626,   507,   508,   509,    -1,   511,   512,   513,   514,
     515,   516,  3680,    -1,   396,    -1,  3594,    -1,    -1,  3687,
      -1,  3662,  3721,  3722,    -1,    -1,    -1,    -1,    -1,   240,
      -1,    -1,    -1,  3626,  3702,  3703,     8,    -1,    -1,    11,
      -1,  3214,  3710,    15,    16,  3548,    -1,    19,    20,    21,
      -1,    -1,   383,  3721,  3722,    -1,   997,   998,  3757,  1000,
      -1,    -1,  1003,    -1,    -1,  3369,    -1,    -1,  1009,  1010,
      -1,    -1,  3740,    -1,  1015,    -1,  3775,    -1,    -1,    -1,
    1021,    -1,    -1,   294,    -1,    -1,  3754,  1028,    -1,  3757,
      -1,   422,    -1,    -1,  3762,    -1,    -1,  1038,    -1,  3463,
      -1,    -1,    -1,  3771,  3408,    -1,    -1,  3775,    -1,    -1,
    1051,   442,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    3484,  3485,   504,  3626,   455,    -1,    -1,    -1,    -1,   511,
     512,   513,   514,   515,   516,   466,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   115,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   482,    -1,    -1,    -1,    -1,    -1,    -1,  1099,   856,
      -1,     8,    -1,  1462,    11,  1464,    -1,    -1,    -1,    16,
      -1,    -1,    -1,    -1,    -1,   506,    -1,    -1,  1467,    -1,
      -1,    -1,    -1,  2620,    -1,   396,    -1,    -1,    -1,   520,
      -1,    -1,    -1,    -1,     0,    -1,    -1,    -1,    -1,    -1,
      -1,    48,    -1,    -1,  1145,    -1,    -1,  1148,    55,    -1,
    2647,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1162,  1163,    -1,     8,    -1,    -1,    11,    -1,  1170,
      -1,    15,    16,    80,    -1,    19,    20,    21,    -1,    -1,
       0,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1192,   224,    37,    -1,  1544,    -1,    -1,  1547,    -1,
      -1,  1202,  1203,  1552,    -1,    -1,  1555,    -1,    -1,    -1,
      -1,  1560,    -1,    -1,  1215,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  3587,    -1,  1574,    -1,    -1,    -1,    -1,
      -1,  1232,    -1,   504,   100,  1236,    -1,    -1,    -1,  1240,
     511,   512,   513,   514,   515,   516,  2743,    -1,  3481,    -1,
      -1,    -1,    -1,  3617,    -1,    -1,    12,    -1,    -1,    -1,
      -1,    17,   294,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     177,    -1,    -1,    29,    -1,    -1,    -1,    -1,    -1,    -1,
     100,    -1,   148,  1632,    -1,    -1,    -1,    43,    44,   196,
    1047,    -1,    -1,    -1,   201,    -1,   162,    -1,    -1,    -1,
    2797,   167,    -1,    -1,    -1,    -1,   172,    -1,    -1,    -1,
      -1,    -1,     8,    -1,    -1,    11,  3680,   183,    -1,    15,
      16,    -1,   188,    19,    20,    21,    -1,    -1,   148,    -1,
      -1,    -1,    -1,   240,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    37,   162,    -1,    -1,  3578,    -1,   167,    -1,   105,
      -1,    -1,   172,    -1,   220,    -1,    -1,    -1,  1707,    -1,
      -1,  3594,    -1,   183,    -1,    -1,    -1,    -1,   188,  1370,
      -1,  1372,    -1,    -1,    -1,   241,  3740,  1378,    -1,    -1,
     224,    -1,    -1,    -1,    -1,    -1,    -1,   294,  1389,    -1,
    3754,    -1,    -1,  1752,    -1,    -1,    -1,    -1,    -1,    -1,
     220,    -1,    -1,  1762,    -1,  1764,    -1,  3771,  1767,    -1,
      -1,    -1,    -1,    -1,  1773,    -1,  1775,    -1,    -1,  1420,
      -1,   241,    -1,   289,  1425,    -1,   292,    -1,  1787,    -1,
      -1,    -1,   298,  1792,    -1,    -1,    -1,  1796,  1797,  1798,
    1799,    -1,  1801,  1802,    -1,    -1,    -1,    -1,    -1,    -1,
     294,    -1,    -1,    -1,     8,  1456,    -1,    11,  1459,  1216,
    1461,  1462,    16,  1464,  1465,    -1,    -1,    -1,    -1,   289,
      -1,    -1,   292,    -1,   340,   507,   508,   509,   298,   511,
     512,   513,   514,   515,   516,    -1,    -1,    -1,  1837,   396,
      -1,    -1,    -1,    -1,    48,    -1,    -1,  1846,   364,    -1,
    2997,    55,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1510,
    1511,    -1,    -1,    -1,    -1,  1516,    -1,  1518,    -1,    -1,
     340,    -1,    -1,  3020,    -1,    -1,    80,    -1,   224,    -1,
    1531,    -1,  1533,  1534,    -1,    -1,    -1,    -1,    -1,    -1,
    1541,    -1,    -1,  1544,   364,    -1,  1547,    -1,    -1,    38,
      -1,  1552,    -1,    -1,  1555,    44,   422,    -1,    -1,  1560,
      -1,  1562,    -1,  1564,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   152,
      -1,    -1,    -1,   558,   450,  1586,    -1,    -1,    -1,    -1,
    1591,    -1,   146,    -1,   460,    -1,  3093,   504,   294,   172,
      -1,    -1,   422,    -1,   511,   512,   513,   514,   515,   516,
      -1,    -1,   101,   479,    -1,   481,   482,    -1,    -1,    -1,
    1377,    -1,    -1,   177,    -1,    -1,    -1,    -1,  1629,    -1,
     450,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1987,    -1,
     460,    -1,   196,    -1,  1993,    -1,    -1,   201,    -1,    -1,
    1407,  1408,   518,    -1,    -1,   521,   522,   523,    -1,   479,
      -1,   481,   482,   507,   508,   509,  1423,   511,   512,   513,
     514,   515,   516,    -1,    -1,    -1,    -1,  1678,    -1,  1680,
      -1,  1682,    -1,    -1,   173,    -1,   240,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1697,  1698,   518,    -1,
      -1,   521,   522,   523,    -1,    -1,    -1,    -1,    -1,  1710,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  3214,    -1,    -1,
      -1,    -1,   211,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1735,  2084,  1737,    -1,   227,    -1,
     294,    -1,    -1,    -1,   317,   318,   319,    -1,    -1,   238,
    1751,  1752,    -1,  2102,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1762,  1763,  1764,  1765,    -1,  1767,    -1,    -1,  2118,
      -1,    -1,  1773,    -1,  1775,   531,    -1,    -1,    -1,    -1,
    2129,   270,  2141,    -1,    -1,  1786,  1787,    -1,    -1,    -1,
    1791,  1792,    -1,    -1,  2143,  1796,  1797,  1798,  1799,    -1,
    1801,  1802,    -1,  2152,    -1,   561,   562,    -1,    -1,    -1,
     383,   507,   508,   509,    -1,   511,   512,   513,   514,   515,
     516,    -1,  1823,  1824,  1825,  1826,    -1,    -1,   317,  1830,
      -1,    -1,    -1,    -1,    -1,   324,    -1,    -1,    -1,    -1,
      -1,    -1,   396,  1844,    -1,    38,    -1,    -1,    -1,   422,
       8,    44,    -1,    11,    -1,    -1,    -1,    15,    16,    -1,
    1617,    19,    20,    21,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   367,    37,
      -1,   856,   455,   558,    -1,    -1,    -1,    -1,    -1,    -1,
      48,    -1,    -1,   466,    -1,   384,  3393,    55,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   101,   482,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   677,    80,    -1,    -1,    -1,    -1,  1928,  1929,  1930,
    1931,  1932,  1933,   506,    -1,  1936,  1937,  1938,  1939,  1940,
    1941,  1942,  1943,  1944,  1945,    -1,    -1,   520,  2297,    -1,
     504,    -1,    -1,    -1,  2313,    -1,    -1,   511,   512,   513,
     514,   515,   516,    -1,    -1,  1966,   455,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    42,  1978,    -1,    -1,
     173,    -1,    -1,    -1,    -1,    -1,  1987,    -1,    -1,    -1,
      -1,    -1,  1993,    -1,    -1,    -1,    62,  1998,     8,    -1,
    1757,    11,  2003,    -1,    -1,    15,    16,    -1,    -1,    19,
      20,    21,    -1,    -1,    -1,    -1,    -1,     8,   211,   177,
      11,    -1,    -1,    -1,    15,    16,    -1,    37,    19,    20,
      21,    -1,    -1,    -1,   227,    -1,    -1,    -1,   196,    -1,
     106,   107,    -1,   201,    -1,   238,    -1,  2048,    -1,   115,
      -1,  2052,    -1,    -1,    -1,    -1,  2057,    48,    -1,    -1,
      -1,    -1,     8,    -1,    55,    11,   224,   225,    -1,    15,
      16,    -1,  1047,    19,    20,    21,    -1,   270,  2079,  2080,
      -1,    -1,   240,    -1,    -1,    -1,    -1,    -1,    -1,    80,
      -1,    37,    -1,    -1,    -1,  2096,    -1,  3594,    -1,   292,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     176,    -1,    -1,    -1,  1871,    -1,  2465,    -1,    -1,   277,
      -1,    -1,   280,    -1,   317,    -1,    -1,    -1,  2129,    -1,
      -1,   324,    -1,    -1,    -1,    -1,   294,    -1,   204,   297,
    2141,  3638,    -1,    -1,    -1,    -1,    -1,    -1,  2497,    -1,
      -1,  2152,    -1,    -1,    -1,  2156,    -1,    -1,  1915,    -1,
      -1,    -1,    -1,    -1,     8,    -1,    -1,    11,    -1,    -1,
    1927,    15,    16,    -1,   367,    19,    20,    21,    -1,    -1,
      -1,   856,    -1,    -1,    -1,    -1,   177,    -1,   254,    -1,
      -1,   384,    -1,    37,    -1,  2196,   262,    -1,  2199,    -1,
    1957,  2202,   558,  2552,    -1,   196,    -1,  1964,   274,    -1,
     201,   277,    -1,    -1,   224,    -1,    -1,  2218,    -1,    -1,
      -1,    -1,  2581,  2582,    -1,    -1,    -1,    -1,    -1,  2578,
      -1,    -1,    -1,   224,   225,    -1,    -1,    -1,   396,    -1,
     306,  1216,    -1,  2000,    -1,    -1,    -1,  2004,    -1,   240,
    2609,    -1,    -1,  2010,    -1,    -1,    -1,    -1,    -1,  1015,
      -1,    -1,   455,    -1,    -1,  2624,  2625,  2626,  2627,  2628,
    2629,  2630,  2631,  2632,  2633,    -1,    -1,    -1,   224,    -1,
    2281,    -1,  1038,    -1,   294,    -1,  2287,    -1,    -1,   280,
      -1,    -1,    -1,    -1,    -1,    -1,   362,    -1,  2299,  2300,
    2301,  2302,  2651,   294,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2313,    -1,  2315,    -1,    -1,  2318,    -1,   385,
      -1,    -1,  2323,    -1,    -1,    -1,    -1,    -1,    -1,  2678,
      -1,    -1,  2681,    -1,    -1,  2336,    -1,    -1,    -1,    -1,
     406,    -1,   408,  1099,    -1,   411,   504,    -1,   294,   507,
     508,   509,  2353,   511,   512,   513,   514,   515,   516,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2368,  2369,    -1,
    2371,    -1,  1047,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     224,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2738,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2400,
      -1,    -1,  1377,    -1,    -1,   396,  1162,  1163,    -1,     8,
      -1,    -1,    11,    -1,    -1,    -1,    15,    16,    -1,  2420,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2428,  2429,  2430,
      -1,    -1,  1407,  1408,    -1,    -1,  2437,    -1,  2439,  2440,
      -1,    -1,    -1,    -1,  2793,  2446,    -1,    -1,  1423,    48,
     294,    -1,    -1,    -1,   520,    -1,    55,    -1,    -1,    -1,
    2461,    -1,    -1,    -1,    -1,    -1,    -1,     8,    -1,    -1,
      11,    -1,    -1,    -1,    15,    16,    17,    18,    19,    20,
      21,    80,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2491,  2492,    -1,  2842,    -1,    -1,    37,   507,   508,   509,
     856,   511,   512,   513,   514,   515,   516,    48,    -1,    -1,
      -1,    -1,    -1,   504,    55,    -1,   507,   508,   509,    -1,
     511,   512,   513,   514,   515,   516,    -1,  2886,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    80,
      -1,  1216,    -1,    -1,  2545,    -1,  2303,   146,    -1,  2550,
      -1,    -1,    -1,    -1,    -1,  2556,    -1,    -1,    -1,    -1,
      -1,   507,   508,   509,    -1,   511,   512,   513,   514,   515,
     516,  2572,    -1,    -1,    -1,  2576,    -1,    -1,   177,  2580,
    2581,  2582,    -1,    -1,    -1,  2586,  2587,  2588,    -1,  2590,
      -1,    -1,   152,    -1,    -1,    -1,    -1,   196,    -1,    -1,
      -1,    -1,   201,     8,    -1,    -1,    11,    -1,  2609,    -1,
    2611,    16,   172,    -1,    19,    20,    21,    -1,    -1,    -1,
      -1,    -1,    -1,  2624,  2625,  2626,  2627,  2628,  2629,  2630,
    2631,  2632,  2633,    -1,    -1,    -1,   177,    -1,    -1,    -1,
      -1,   240,  1617,    48,    -1,    -1,    -1,    -1,    -1,  2650,
      55,    -1,  3001,  2654,    -1,   196,  2657,    -1,    -1,    -1,
     201,    -1,    -1,   507,   508,   509,  2667,   511,   512,   513,
     514,   515,   516,    -1,    -1,    80,    -1,    -1,    -1,    -1,
      -1,    -1,  2683,   224,   225,    -1,    -1,    -1,    -1,    -1,
    3039,  1047,    -1,    -1,    -1,   294,    -1,    -1,    -1,   240,
      -1,  2702,  1377,    -1,    -1,  1461,  1462,    -1,  1464,    -1,
      57,    -1,  2713,    -1,    -1,    -1,    -1,    -1,  2719,    -1,
      -1,    -1,    -1,    -1,    -1,  2726,  2727,  2728,  2729,    -1,
    2487,    -1,  1407,  1408,    -1,    -1,   277,  2738,    -1,   280,
    2741,    -1,    -1,    -1,  2745,  2746,    -1,    -1,  1423,    -1,
      -1,    -1,    -1,   294,    -1,   102,   297,   317,   318,   319,
    2761,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   177,    -1,   121,    -1,    -1,  1533,    -1,    -1,
    3129,    -1,  1757,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2791,   196,  2793,    -1,    -1,   142,   201,   396,    -1,   146,
      -1,    -1,    -1,    -1,     8,    -1,  1562,    11,  1564,    -1,
      -1,    15,    16,    -1,    -1,    19,    20,    21,    -1,   224,
     225,   168,    -1,   383,   171,  2826,  2827,  2828,  2829,    -1,
      -1,    -1,    -1,    -1,    -1,   240,  3195,    -1,    -1,    -1,
      -1,  2842,   189,    -1,    -1,  2846,    -1,    -1,    -1,    -1,
      -1,  2852,    -1,    -1,    -1,   396,  3215,  3216,    -1,    -1,
    1216,    -1,   422,  2620,    -1,  2866,    -1,    -1,    -1,    -1,
      -1,  2872,   277,    -1,    -1,   280,  3225,  3226,    -1,    -1,
      -1,  3240,    -1,    -1,  2885,  2886,  2887,    -1,    -1,   294,
      -1,    -1,  2893,    -1,    -1,   455,  1871,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   504,   466,    -1,    -1,  2910,
      -1,    -1,   511,   512,   513,   514,   515,   516,    -1,    -1,
      -1,    -1,   482,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2691,   282,    -1,    -1,    -1,    -1,
    1915,    -1,  1617,   290,    -1,    -1,   506,    -1,    -1,    -1,
      -1,    -1,  1927,    -1,    -1,    -1,    -1,    -1,    -1,  2716,
     520,    -1,    -1,   504,   311,    -1,   507,   508,   509,    -1,
     511,   512,   513,   514,   515,   516,    -1,    -1,    -1,    -1,
      -1,  1737,  1957,    -1,  2985,    -1,    -1,    -1,    -1,  1964,
     531,   396,  3341,    -1,   341,    -1,  1752,    -1,    -1,  3000,
      -1,   109,   110,    -1,    -1,    -1,  1762,    -1,  1764,    -1,
    3359,  1767,  3361,  3014,    -1,    -1,  2773,  1773,    -1,  1775,
     224,  1377,  3023,    -1,    -1,  2000,    -1,    -1,    -1,  2004,
      -1,  1787,    -1,    -1,    -1,  2010,  1792,    -1,    -1,    -1,
    1796,  1797,  1798,  1799,    -1,  1801,  1802,    -1,  3049,    -1,
      -1,  1407,  1408,    -1,  3055,    -1,    -1,    -1,    -1,    -1,
    3409,    -1,  3063,    -1,   652,   653,    -1,  1423,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  3425,    -1,    -1,    -1,
    3429,    -1,  1757,   191,   192,    -1,    -1,    -1,  3089,    -1,
     294,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   504,
      -1,    -1,   507,   508,   509,    -1,   511,   512,   513,   514,
     515,   516,    -1,    -1,    -1,    -1,  3117,  3118,  3119,  3120,
    3121,  3122,  3123,    -1,    -1,  3126,  3127,  3128,    -1,    -1,
      -1,  3132,    -1,    -1,  3135,    -1,    -1,  3138,  3139,  3140,
    3141,  3142,  3143,  3144,  3145,  3146,  3147,    -1,   256,   257,
     258,   259,   260,   261,    -1,    -1,   264,   265,  2915,    -1,
      -1,    -1,    -1,  3164,     8,    -1,    -1,    11,  3169,    -1,
      -1,    15,    16,    17,    18,    19,    20,    21,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   775,    -1,    -1,
      -1,   779,  2949,    37,  3195,    -1,  1871,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    48,    -1,    -1,    -1,    -1,    -1,
    1966,    55,    -1,    -1,  3215,  3216,    -1,    -1,    -1,    -1,
     172,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3229,    -1,
      -1,  3590,    -1,  3234,    -1,  3236,    80,    -1,    -1,  3240,
    1915,    -1,  1998,    -1,    -1,    -1,    -1,  2003,    -1,    -1,
      -1,    -1,  1927,  3254,    -1,    -1,  3257,    -1,    -1,    -1,
      -1,  1617,  3611,    -1,    27,    -1,    -1,  3024,    -1,    -1,
      33,    -1,   380,   381,    -1,    -1,  3277,    -1,    -1,    42,
    3281,  3282,  1957,    -1,  3285,    -1,    -1,    -1,    -1,  1964,
      -1,    -1,  2048,    -1,    -1,    -1,    -1,    -1,    -1,    62,
      -1,  2057,    -1,   507,   508,   509,    -1,   511,   512,   513,
     514,   515,   516,  3662,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  3322,  3323,    -1,    -1,  2000,    -1,    -1,  2303,  2004,
      -1,    -1,    -1,   177,    -1,  2010,    -1,  3338,    -1,  3340,
      -1,  3342,    -1,   106,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   196,   305,    -1,    -1,    -1,   201,    -1,  3116,
      -1,  3362,    -1,    -1,    -1,   317,   318,   319,  3369,    -1,
      -1,    -1,    -1,   136,    -1,    -1,    -1,    -1,    -1,    -1,
     224,   225,    -1,    -1,    -1,  2141,    -1,    -1,    -1,    -1,
      -1,    -1,   500,   501,    -1,    -1,   240,    -1,    -1,    -1,
      -1,  1757,    -1,   991,    -1,    -1,    -1,  3408,    -1,    -1,
      -1,   999,   520,    -1,  1002,    -1,    -1,  1005,  1006,  1007,
    1008,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   383,    -1,   277,    -1,    -1,   280,    -1,    -1,    -1,
    2196,   204,    -1,    -1,    -1,  3446,  2202,    -1,    -1,    -1,
     294,    -1,    -1,   297,    -1,    -1,    -1,  3214,  1046,    -1,
      -1,    -1,  3463,    -1,    -1,    -1,    -1,    -1,    -1,  3470,
     422,    -1,  3473,  3474,    -1,  1063,    -1,    -1,    -1,    -1,
      -1,  3482,    -1,  3484,  3485,    -1,    -1,    -1,  3489,    -1,
      -1,   254,    -1,  1081,    -1,    -1,  3497,    -1,    -1,   262,
      -1,    -1,    -1,   455,  1092,  1093,  1094,    -1,  1096,  1097,
      -1,   274,  2487,    -1,   466,  1871,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     482,    -1,  3533,   296,    -1,    -1,    -1,    -1,  1126,    -1,
      -1,    -1,    -1,   306,  3545,  3546,    -1,  3548,  3549,    -1,
      -1,    -1,   396,    -1,   506,    -1,  3557,  2313,    -1,  1915,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   520,    -1,
      -1,  1927,  3573,  3574,    -1,    -1,  3577,    -1,    -1,    -1,
    3581,    -1,    -1,  3584,  3585,    -1,  3587,    -1,    -1,  3590,
    1178,    -1,    -1,   356,  1182,  1183,    -1,   360,    -1,   362,
      -1,  1957,    -1,    -1,    -1,  1193,  1194,    -1,  1964,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  3617,    -1,  3619,    -1,
      -1,    -1,   385,    -1,    -1,  3626,    -1,   390,  2303,   109,
     110,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   406,  2000,  2620,    -1,    -1,  2004,    -1,
      -1,    -1,    -1,    -1,  2010,  3656,  3657,    -1,    -1,  3660,
     504,    -1,    -1,   507,   508,   509,    -1,   511,   512,   513,
     514,   515,   516,    -1,    -1,    -1,    -1,    -1,    -1,  3680,
     524,  2437,    -1,    -1,  2440,    -1,  3687,    -1,    -1,    -1,
    2446,    -1,   985,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     463,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3710,
      -1,   191,   192,    -1,    -1,    -1,  2691,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  3481,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1326,  3740,
      -1,  2716,    -1,    -1,    -1,    -1,    -1,  1335,    -1,    -1,
      -1,    -1,  1045,  3754,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  3762,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    3771,  1359,    -1,    -1,    -1,    -1,   256,   257,   258,   259,
     260,   261,    -1,    -1,   264,   265,    -1,    -1,    -1,    -1,
    2826,  2827,  2828,  2829,    -1,    -1,    -1,    -1,  2773,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2487,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2576,  3578,  1115,    -1,  2580,  2581,  2582,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  3594,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1141,  1003,
    1143,  1144,    -1,  2609,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2624,  2625,
    2626,  2627,  2628,  2629,  2630,  2631,  2632,  2633,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     380,   381,  1490,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1217,    -1,    -1,  1220,  1221,    -1,
      -1,    -1,    -1,    -1,    -1,  1523,    -1,  1525,  1526,    -1,
    2915,    -1,    -1,    -1,    -1,  2620,    -1,  2303,    -1,    -1,
    1538,  1539,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  2719,    -1,    -1,  1554,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2949,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2745,
      -1,    -1,    -1,    -1,  1582,    -1,  1584,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2691,    -1,    -1,    -1,
     500,   501,    -1,    -1,  1612,    -1,    -1,    -1,    -1,  1183,
    1618,  1619,  1620,  1621,  1622,  1623,  1624,  1625,  1192,    -1,
      -1,  2716,  1630,  1631,    -1,    -1,    -1,  1635,    -1,  3024,
      -1,  1639,    -1,    -1,  1642,  1643,  1644,  1645,  1646,  1647,
    1648,  1649,  1650,    -1,    -1,  1653,    -1,    -1,    -1,    -1,
      -1,    -1,  1660,    -1,  1662,    -1,    -1,    -1,    -1,    -1,
      -1,  3117,  3118,  3119,  3120,  3121,  3122,  3123,    -1,    -1,
      -1,  3127,  3128,    -1,    -1,  1683,  3132,    -1,  2773,  3135,
      -1,    -1,  3138,  3139,  3140,  3141,  3142,  3143,  3144,  3145,
    3146,  3147,  1405,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1416,    -1,  1418,    -1,    -1,    -1,    -1,
    2886,  2487,    -1,  1721,  1722,  1428,    -1,    -1,    -1,    -1,
      -1,  3116,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1445,     3,    -1,    -1,    -1,    -1,     8,    -1,
      -1,    11,    -1,    -1,    -1,    15,    16,    17,    18,    19,
      20,    21,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1473,  1474,    -1,    -1,    -1,    -1,    -1,    37,    -1,    -1,
      -1,    -1,    42,    -1,    -1,    -1,    -1,    -1,    48,    -1,
      -1,    -1,    -1,    -1,    -1,    55,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,     8,    -1,  1806,    11,
      -1,    -1,  1810,    15,    16,  1813,  1814,    19,    20,    21,
      80,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3214,
    2915,    -1,    -1,    -1,    -1,    37,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    48,    -1,    -1,    -1,
      -1,    -1,  1850,    55,  2620,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2949,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    80,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3055,
      -1,    -1,  3338,    -1,  3340,    -1,  3342,  3063,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   177,    -1,    -1,
      -1,  1919,  1920,    -1,  1922,  2691,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   196,    -1,    -1,  3024,
      -1,   201,    -1,    -1,    -1,    -1,  1510,  1511,    -1,    -1,
    2716,    -1,  1516,  1951,  1952,    -1,    -1,  1955,    -1,    -1,
      -1,    -1,    -1,    -1,   224,   225,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   177,    -1,    -1,    -1,    -1,
     240,    -1,    -1,    -1,    -1,    -1,  1984,    -1,    -1,    -1,
      -1,  1989,    -1,    -1,   196,    -1,    -1,    -1,  3164,   201,
      -1,    -1,    -1,  3169,    -1,    -1,    -1,  2773,    -1,    -1,
    2008,    -1,    -1,    -1,    -1,    -1,    -1,   277,  1721,  1722,
     280,  2019,   224,   225,  3470,    -1,    -1,  3473,  3474,  3195,
      -1,  3116,  1003,    -1,   294,    -1,  3482,   297,   240,    -1,
      -1,    -1,    -1,  3489,    -1,    -1,    -1,    -1,    -1,  3215,
    3216,    -1,  2050,    -1,    -1,    -1,    -1,  2055,  2056,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  3240,   277,    -1,  1780,   280,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1790,    -1,    -1,
    1793,    -1,   294,    -1,    -1,    -1,  3481,    -1,    -1,    -1,
    2098,    -1,    -1,  2101,    -1,  2103,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  3281,    -1,    -1,    -1,    -1,
      -1,  2119,    -1,    -1,    -1,    -1,    -1,  3573,  3574,  3214,
      -1,  3577,    -1,    -1,    -1,  3581,   396,    -1,  3584,  3585,
      -1,    -1,    -1,    -1,    -1,  1116,  1710,    -1,    -1,  2915,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,     8,  2165,    -1,    11,
      -1,    -1,  1875,  1876,    16,    17,    18,    19,    20,    21,
      -1,    -1,    -1,  2949,  2182,  2183,    -1,  1158,    -1,    -1,
      -1,    -1,    -1,  3578,   396,    37,  1899,    -1,    -1,    -1,
      -1,    -1,    -1,  2201,    -1,    -1,    48,    -1,    -1,  3594,
    3656,  3657,  2210,    55,  3660,    -1,    -1,     8,    -1,    -1,
      11,  1192,    -1,    -1,    15,    16,    17,    18,    19,    20,
      21,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    80,    -1,
      -1,    -1,    -1,    -1,   504,    -1,    37,   507,   508,   509,
      -1,   511,   512,   513,   514,   515,   516,    48,  3024,    -1,
      -1,    -1,    -1,    -1,    55,    -1,    -1,    -1,    -1,    -1,
      -1,  1242,    -1,  2271,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    80,
       8,    -1,    -1,    11,    -1,    -1,    -1,    15,    16,    -1,
      -1,    -1,   504,  2006,    -1,   507,   508,   509,  1003,   511,
     512,   513,   514,   515,   516,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  2321,    -1,    -1,    -1,    -1,    -1,    -1,
      48,    -1,    -1,    -1,    -1,   177,    -1,    55,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    3116,    -1,    -1,    -1,   196,    -1,    -1,    -1,    -1,   201,
      -1,    -1,    80,    -1,  1928,  1929,  1930,  1931,  1932,  1933,
      -1,    -1,  1936,  1937,  1938,  1939,  1940,  1941,  1942,  1943,
    1944,  1945,   224,   225,    -1,    -1,   177,    -1,    -1,    -1,
      -1,    -1,    -1,  1364,    -1,    -1,  3481,    -1,   240,    -1,
      -1,    -1,    -1,    -1,    -1,   196,    -1,    -1,    -1,    -1,
     201,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  3590,    -1,    -1,    -1,   146,    -1,
    2133,    -1,    -1,   224,   225,   277,    -1,    -1,   280,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3214,   240,
      -1,    -1,   294,    -1,    -1,   297,  2454,    -1,    -1,   177,
    2458,  2459,    -1,    -1,    -1,    -1,    -1,  2465,    -1,  2172,
    2173,    -1,    -1,    -1,    -1,    -1,    -1,  2475,   196,    -1,
    2478,    -1,  2480,   201,    -1,    -1,   277,    -1,    -1,   280,
    2488,    -1,    -1,  3578,    -1,    -1,    -1,  1192,  2496,  2497,
      -1,    -1,    -1,   294,    -1,  2503,   297,    -1,    -1,  3594,
      -1,    -1,    -1,    -1,    -1,  2079,  2080,  1488,    -1,    -1,
      -1,    -1,   240,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1506,    -1,  1508,    -1,  1510,
    1511,     8,  1513,    -1,    11,  1516,    -1,    -1,  1519,    16,
    2548,  1522,    -1,    -1,   396,    -1,  1527,    -1,    -1,  1530,
    2558,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   294,    -1,    -1,    -1,
    2578,    48,    -1,    -1,    -1,    -1,    -1,    -1,    55,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  3762,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   396,    -1,    -1,    -1,  1580,
      -1,    -1,    -1,    80,  1585,    -1,    -1,  1588,  1589,  1590,
      -1,    -1,    -1,  1594,    -1,    -1,  2329,  1598,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2199,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   504,    -1,    -1,   507,   508,   509,    -1,   511,
     512,   513,   514,   515,   516,    -1,    -1,    -1,   396,   146,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1659,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,     8,    -1,    -1,    11,    -1,    -1,
     177,    15,    16,   504,    -1,  3481,   507,   508,   509,    -1,
     511,   512,   513,   514,   515,   516,    -1,    -1,    -1,   196,
     521,    -1,    -1,  1704,   201,  2733,  2734,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    48,    -1,    -1,    -1,    -1,  1720,
      -1,    55,  2750,    -1,  1725,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2762,    -1,    -1,    -1,    -1,  2767,
    2768,  1742,    -1,   240,  2772,    -1,    80,    -1,    -1,  2777,
      -1,    -1,  2780,  2781,    -1,    -1,   504,  2785,  2786,    -1,
      -1,  2789,    -1,   511,   512,   513,   514,   515,   516,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  3578,    -1,    -1,  1510,  1511,    -1,    -1,    -1,
      -1,  1516,    -1,    -1,    -1,    -1,    -1,   294,  3594,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2835,     8,    -1,
      -1,    11,   146,    -1,    -1,    15,    16,    17,    18,    19,
      20,    21,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    37,    -1,    -1,
      -1,    -1,    42,   177,    -1,    -1,    -1,    -1,    48,    -1,
      -1,  2879,    -1,    -1,    -1,    55,    -1,    -1,    -1,    -1,
      -1,    -1,   196,    -1,    -1,    -1,    -1,   201,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2906,    -1,
      80,    -1,    -1,    -1,    -1,    -1,    -1,  2620,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2491,  2492,   396,
      -1,    -1,    -1,    -1,    -1,    -1,   240,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1917,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1925,  1926,    -1,  1928,  1929,  1930,
    1931,  1932,  1933,  1658,    -1,  1936,  1937,  1938,  1939,  1940,
    1941,  1942,  1943,  1944,  1945,  1946,    -1,    -1,    -1,    -1,
      -1,  2545,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     294,  2989,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   177,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1710,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   196,    -1,    -1,    -1,
      -1,   201,    -1,    -1,    -1,    -1,    -1,   504,    -1,    -1,
      -1,  3039,    -1,    -1,   511,   512,   513,   514,   515,   516,
      -1,  2022,  2023,    -1,   224,   225,    -1,    -1,    -1,    -1,
      -1,  3059,    -1,    -1,    -1,    -1,    -1,    -1,  3066,    -1,
     240,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3077,
    3078,    -1,    -1,  3081,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2062,   396,    -1,    -1,  2066,  2067,  2068,  2069,  2070,
    2071,  2072,  2073,    -1,    -1,    -1,    -1,   277,  2079,  2080,
     280,  2082,  2083,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  2094,   294,    -1,  2097,   297,    -1,    -1,
      -1,    -1,    -1,    -1,  2105,  2106,  2107,  2108,  2109,  2110,
    2111,  2112,  2113,  2114,    -1,    -1,    -1,    -1,    -1,  2713,
      -1,  3149,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  3160,    -1,    -1,    -1,    -1,    -1,    -1,  2140,
      -1,    -1,    -1,    -1,  2738,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,     8,    -1,  3184,    11,    -1,    -1,
      -1,    15,    16,    17,    18,    19,    20,    21,  2762,    -1,
     504,  2904,    -1,    -1,    -1,    -1,  2909,   511,   512,   513,
     514,   515,   516,    37,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    48,    -1,   396,    -1,  2199,    -1,
      -1,    55,    -1,  1928,  1929,  1930,  1931,  1932,  1933,    -1,
      -1,  1936,  1937,  1938,  1939,  1940,  1941,  1942,  1943,  1944,
    1945,    -1,    -1,  2956,  2957,  3253,    80,    -1,    -1,    -1,
      -1,    -1,  2826,  2827,  2828,  2829,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  3271,    -1,    -1,    -1,  3275,    -1,    -1,
      -1,  3279,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  3289,    -1,    -1,    -1,  2266,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2276,  2277,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  2887,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   504,    -1,    -1,   507,   508,   509,
      -1,   511,   512,   513,   514,   515,   516,    -1,    -1,    -1,
      -1,   521,    -1,   177,    -1,    -1,    -1,    -1,    -1,    -1,
    3358,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   196,    -1,    -1,    -1,    -1,   201,  3376,    -1,
      -1,    -1,    -1,    -1,  2079,  2080,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     224,   225,    -1,    -1,  2375,  2376,  2377,    -1,    -1,  2380,
    2381,  2382,  2383,  2384,  2385,    -1,   240,    -1,  2389,  2390,
    2391,  2392,  2393,  2394,  2395,  2396,  2397,  2398,    -1,    -1,
      -1,    -1,  2403,  2404,  3432,    -1,    -1,     8,    -1,    -1,
      11,    -1,    -1,    -1,  3442,    16,    -1,    -1,    19,    20,
      21,    -1,    -1,   277,    -1,    -1,   280,  3455,    -1,  3023,
    2431,    -1,    -1,    -1,    -1,  2436,    37,    -1,    -1,    -1,
     294,    -1,    -1,   297,    24,    -1,    -1,    48,    -1,    -1,
      -1,    -1,  2453,    -1,    55,    -1,    -1,    -1,    -1,     8,
      -1,    -1,    11,  3491,    -1,  2466,    15,    16,  2469,  2470,
    3203,  3204,    -1,    -1,  2199,  2476,  2477,    -1,    -1,    80,
      -1,  3214,    -1,    -1,    -1,    -1,    -1,  3515,    -1,  2490,
    2491,  2492,  2493,    -1,  2495,    -1,    -1,    -1,  2499,    48,
      -1,    81,    -1,    -1,    -1,    -1,    55,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    97,    -1,    -1,
      -1,    -1,    -1,  3117,  3118,  3119,  3120,  3121,  3122,  3123,
      -1,    80,    -1,  3127,  3128,    -1,    -1,    -1,  3132,    -1,
      -1,  3135,   396,    -1,  3138,  3139,  3140,  3141,  3142,  3143,
    3144,  3145,  3146,  3147,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   147,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   177,   157,    -1,    -1,
      -1,    -1,  2583,    -1,    -1,    -1,    -1,    -1,    -1,   169,
      -1,    -1,    -1,    -1,   174,   196,    -1,   146,    -1,    -1,
     201,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  3641,  3642,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   224,   225,   205,    -1,    -1,   177,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   240,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   196,    -1,    -1,
     504,    -1,   201,   507,   508,   509,    -1,   511,   512,   513,
     514,   515,   516,  3691,    -1,    -1,    -1,   521,    -1,   249,
      -1,    -1,    -1,   253,    -1,    -1,   277,    -1,    -1,   280,
      -1,  2682,    -1,  3277,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   240,    -1,   294,    -1,    -1,   297,    -1,    -1,    -1,
       0,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2713,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    3748,    -1,    22,    -1,    -1,    -1,    -1,    -1,  3322,  3323,
      -1,    -1,    -1,    33,    -1,    35,    36,    -1,    -1,    -1,
      -1,    -1,   322,    -1,  3338,   294,  3340,    -1,  3342,    49,
    2751,    -1,  2753,    -1,    54,    -1,  2757,    -1,   338,   339,
      -1,    -1,    -1,    63,    -1,  2766,  2491,  2492,  2769,    -1,
    2771,    -1,    -1,    -1,  2775,    75,    -1,  2778,  2779,    -1,
      -1,  2782,  2783,    -1,    -1,    -1,    86,    -1,    -1,  2790,
      -1,    -1,    -1,   373,    -1,   396,   376,    -1,    98,    -1,
     100,    -1,    -1,    -1,    -1,   385,    -1,    -1,   388,    -1,
      -1,   111,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2545,    -1,    -1,    -1,    -1,   125,    -1,   127,   408,  2830,
      -1,    -1,    -1,  2834,    -1,    -1,   136,    -1,    -1,    -1,
      -1,    -1,   422,    -1,   144,    -1,    -1,   396,  2849,   429,
      -1,    -1,   152,    -1,   154,   155,    -1,    -1,    -1,   439,
      -1,  3594,    -1,    -1,    -1,   445,    -1,    -1,   168,  3463,
      -1,    -1,   172,    -1,    -1,    -1,  3470,    -1,    -1,  3473,
    3474,    -1,    -1,    -1,    -1,    -1,  2887,    -1,  3482,    -1,
    3484,  3485,    -1,   473,    -1,  3489,    -1,    -1,    -1,    -1,
     200,    -1,    -1,   504,    -1,    -1,   507,   508,   509,    -1,
     511,   512,   513,   514,   515,   516,   216,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   243,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   504,    -1,    -1,    -1,    -1,
      -1,    -1,   511,   512,   513,   514,   515,   516,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3573,
    3574,    -1,    -1,  3577,    -1,    -1,    -1,  3581,  2713,    -1,
    3584,  3585,    -1,    -1,    -1,     8,    -1,    -1,    11,    -1,
      -1,    -1,    15,    16,    17,    18,    19,    20,    21,    -1,
      -1,    -1,    -1,  2738,    -1,    -1,    -1,   317,   318,   319,
      -1,  3022,  3023,    -1,    37,   325,    -1,    -1,   328,    -1,
      -1,    -1,    -1,    -1,    -1,    48,    -1,    -1,    -1,    -1,
      -1,    -1,    55,    -1,    -1,    -1,  3047,  3048,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     360,    -1,  3656,  3657,  3065,    -1,  3660,    80,  3069,   369,
    3071,  3072,  3073,    -1,    -1,  3076,    -1,    -1,  3079,  3080,
      -1,    -1,    -1,   383,    -1,    -1,  3087,    -1,    -1,    -1,
     390,    -1,    -1,    -1,    -1,   395,    -1,    -1,    -1,    -1,
      -1,  2826,  2827,  2828,  2829,    -1,   406,    -1,    -1,    -1,
      -1,  3112,  3113,  3114,  3115,    -1,    -1,    -1,   418,    -1,
      -1,    -1,   422,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     8,    -1,
      -1,    11,   442,    -1,    -1,    15,    16,    -1,    -1,    19,
      20,    21,    -1,    -1,    -1,   455,    -1,    -1,   458,    -1,
      -1,   461,  2887,    -1,   177,    -1,   466,    -1,     8,    -1,
      -1,    11,    -1,    -1,    -1,    15,    16,    -1,    48,    -1,
    3181,    -1,   482,   196,    -1,    55,  3187,    -1,   201,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3200,
      -1,    -1,    -1,    -1,    -1,    -1,   506,    -1,    48,    -1,
      80,   224,   225,    -1,    -1,    55,    -1,    -1,    -1,    -1,
     520,    -1,    -1,   523,    -1,    -1,  3227,   240,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      80,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3259,    -1,
      -1,    -1,    -1,    -1,   277,    -1,    -1,   280,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   294,    -1,    -1,   297,    -1,    -1,    -1,    -1,    -1,
    3291,  3292,  3293,    -1,    -1,    -1,    -1,    -1,  3023,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   146,   177,    -1,    -1,
      -1,    -1,    -1,  3314,  3315,  3316,  3317,  3318,  3319,  3320,
      -1,  3322,  3323,    -1,  3325,  3326,   196,    -1,    -1,    -1,
      -1,   201,    -1,    -1,  3335,    -1,  3337,   177,    -1,    -1,
      -1,    -1,    -1,  3344,  3345,  3346,  3347,  3348,  3349,  3350,
    3351,  3352,  3353,    -1,    -1,    -1,   196,    -1,    -1,    -1,
      -1,   201,    -1,    -1,  3365,    -1,    -1,    -1,    -1,    -1,
     240,    -1,    -1,    -1,    -1,    -1,  3377,    -1,    -1,    -1,
      -1,    -1,    24,   396,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  3117,  3118,  3119,  3120,  3121,  3122,  3123,    -1,
     240,    -1,  3127,  3128,    -1,    -1,    -1,  3132,    -1,    -1,
    3135,    -1,    -1,  3138,  3139,  3140,  3141,  3142,  3143,  3144,
    3145,  3146,  3147,  3148,   294,    -1,    -1,    -1,    -1,  3430,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    81,
      -1,    -1,    -1,    -1,    -1,    -1,  3447,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   294,    97,  3457,    -1,    -1,    -1,
      -1,    -1,  3463,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    3471,  3472,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  3483,  3484,  3485,  3486,    -1,  3488,    -1,    -1,
      -1,   504,    -1,    -1,   507,   508,   509,    -1,   511,   512,
     513,   514,   515,   516,    -1,   147,    -1,    -1,   521,  3510,
      -1,    -1,    -1,    -1,    -1,   157,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   396,   169,    -1,    -1,
      -1,    -1,   174,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  3544,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  3277,    -1,    -1,    -1,   396,    -1,    -1,    -1,
      -1,    -1,    -1,   205,    -1,    -1,  3567,    -1,    -1,    -1,
      -1,  3572,    -1,    -1,  3575,  3576,    -1,    -1,    -1,  3580,
      -1,  3582,  3583,    -1,    -1,  3586,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  3322,  3323,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   249,  3609,    -1,
      -1,   253,    -1,  3338,    -1,  3340,    -1,  3342,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   504,    -1,    -1,   507,   508,   509,
      -1,   511,   512,   513,   514,   515,   516,    -1,    -1,  3650,
    3651,  3652,    -1,    -1,  3655,    -1,    -1,  3658,  3659,    -1,
      -1,    -1,    -1,    -1,   504,    -1,    -1,    -1,    -1,    -1,
      -1,   511,   512,   513,   514,   515,   516,    -1,    -1,    -1,
     322,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  3694,    -1,    -1,    -1,   339,    -1,    -1,
      -1,    -1,    -1,    -1,  3705,  3706,  3707,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   373,    -1,    -1,   376,    -1,    -1,    -1,  3463,    -1,
      -1,    -1,    -1,   385,    -1,  3470,   388,    -1,  3473,  3474,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  3482,    -1,  3484,
    3485,    -1,    -1,    -1,  3489,    -1,   408,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     422,    -1,    -1,    -1,    -1,    -1,    -1,   429,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   439,    -1,    -1,
      -1,    -1,    -1,   445,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   473,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3573,  3574,
      -1,    -1,  3577,    -1,    -1,    -1,  3581,    -1,    -1,  3584,
    3585,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,     3,     4,     5,     6,     7,
       8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    -1,    27,
      28,    29,    30,    -1,    32,    33,    34,    -1,    -1,    -1,
      -1,  3656,  3657,    41,    -1,  3660,    44,    45,    46,    -1,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      58,    59,    -1,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    72,    73,    -1,    75,    76,    77,
      78,    79,    -1,    81,    -1,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    -1,    94,    95,    96,    97,
      98,    -1,    -1,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,    -1,
     118,   119,   120,   121,   122,   123,    -1,   125,    -1,   127,
     128,   129,   130,    -1,    -1,   133,   134,   135,   136,   137,
      -1,    -1,    -1,   141,   142,   143,    -1,   145,   146,   147,
      -1,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,   159,   160,   161,    -1,   163,   164,   165,   166,    -1,
     168,    -1,   170,   171,   172,   173,   174,   175,   176,   177,
     178,    -1,   180,    -1,    -1,    -1,   184,   185,    -1,   187,
      -1,   189,   190,   191,   192,   193,   194,   195,   196,   197,
     198,   199,   200,    -1,   202,   203,   204,   205,   206,   207,
     208,    -1,   210,   211,   212,   213,   214,   215,   216,   217,
     218,   219,    -1,   221,    -1,   223,   224,   225,   226,   227,
     228,    -1,   230,   231,   232,   233,   234,    -1,    -1,   237,
     238,   239,   240,    -1,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,    -1,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
     288,    -1,   290,   291,    -1,    -1,   294,   295,   296,    -1,
      -1,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,    -1,    -1,   316,   317,
     318,   319,    -1,   321,   322,   323,   324,   325,   326,   327,
     328,   329,   330,    -1,   332,   333,   334,   335,   336,    -1,
      -1,   339,    -1,   341,   342,   343,   344,   345,   346,   347,
     348,    -1,   350,   351,   352,    -1,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,    -1,   365,   366,   367,
     368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,    -1,   385,   386,   387,
     388,   389,   390,   391,   392,   393,    -1,   395,   396,    -1,
     398,   399,   400,    -1,    -1,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,   417,
     418,    -1,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   429,    -1,   431,   432,    -1,    -1,    -1,   436,   437,
     438,   439,   440,   441,   442,   443,   444,   445,   446,   447,
     448,   449,    -1,    -1,   452,   453,   454,   455,   456,   457,
     458,   459,    -1,   461,   462,   463,   464,   465,   466,   467,
      -1,   469,   470,   471,    -1,   473,   474,   475,   476,    -1,
      -1,    -1,   480,    -1,   482,   483,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,   499,   500,   501,   502,   503,   504,    -1,   506,    -1,
      -1,    -1,    -1,   511,   512,   513,    -1,    -1,    -1,    -1,
     518,    -1,   520,   521,    -1,    -1,    -1,    -1,   526,   527,
      -1,    -1,    -1,    -1,   532,   533,     3,     4,     5,     6,
       7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    -1,
      27,    28,    29,    30,    -1,    32,    33,    34,    -1,    -1,
      -1,    -1,    -1,    -1,    41,    -1,    -1,    44,    45,    46,
      -1,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    58,    59,    -1,    61,    62,    63,    64,    65,    66,
      67,    68,    69,    70,    71,    72,    73,    -1,    75,    76,
      77,    78,    79,    -1,    81,    -1,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    -1,    94,    95,    96,
      97,    98,    -1,    -1,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
      -1,   118,   119,   120,   121,   122,   123,    -1,   125,    -1,
     127,   128,   129,   130,    -1,    -1,   133,   134,   135,   136,
     137,    -1,    -1,    -1,   141,   142,   143,    -1,   145,   146,
     147,    -1,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,   160,   161,    -1,   163,   164,   165,   166,
      -1,   168,    -1,   170,   171,   172,   173,   174,   175,   176,
     177,   178,    -1,   180,    -1,    -1,    -1,   184,   185,    -1,
     187,    -1,   189,   190,   191,   192,   193,   194,   195,   196,
     197,   198,   199,   200,    -1,   202,   203,   204,   205,   206,
     207,   208,    -1,   210,   211,   212,   213,   214,   215,   216,
     217,   218,   219,    -1,   221,    -1,   223,   224,   225,   226,
     227,   228,    -1,   230,   231,   232,   233,   234,    -1,    -1,
     237,   238,   239,   240,    -1,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,    -1,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     287,   288,    -1,   290,   291,    -1,    -1,   294,   295,   296,
      -1,    -1,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,    -1,    -1,   316,
     317,   318,   319,    -1,   321,   322,   323,   324,   325,   326,
     327,   328,   329,   330,    -1,   332,   333,   334,   335,   336,
      -1,    -1,   339,    -1,   341,   342,   343,   344,   345,   346,
     347,   348,    -1,   350,   351,   352,    -1,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,    -1,   365,   366,
     367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,    -1,   385,   386,
     387,   388,   389,   390,   391,   392,   393,    -1,   395,   396,
      -1,   398,   399,   400,    -1,    -1,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
     417,   418,    -1,   420,   421,   422,   423,   424,   425,   426,
     427,   428,   429,    -1,   431,   432,    -1,    -1,    -1,   436,
     437,   438,   439,   440,   441,   442,   443,   444,   445,   446,
     447,   448,   449,    -1,    -1,   452,   453,   454,   455,   456,
     457,   458,   459,    -1,   461,   462,   463,   464,   465,   466,
     467,    -1,   469,   470,   471,    -1,   473,   474,   475,   476,
      -1,    -1,    -1,   480,    -1,   482,   483,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,   498,   499,   500,   501,   502,   503,   504,    -1,   506,
      -1,    -1,    -1,    -1,   511,   512,   513,    -1,    -1,    -1,
      -1,   518,    -1,   520,    -1,    -1,    -1,    -1,    -1,   526,
     527,    -1,    -1,    -1,    -1,   532,   533,     3,     4,     5,
       6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      -1,    27,    28,    29,    30,    31,    32,    33,    34,    -1,
      -1,    -1,    38,    -1,    -1,    41,    -1,    -1,    44,    45,
      46,    -1,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    -1,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    -1,    75,
      76,    77,    78,    79,    -1,    81,    -1,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    -1,    94,    95,
      96,    97,    98,    -1,    -1,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,    -1,   118,   119,   120,   121,   122,   123,    -1,   125,
      -1,   127,   128,   129,   130,   131,    -1,   133,   134,   135,
     136,   137,    -1,    -1,    -1,   141,   142,   143,    -1,   145,
     146,   147,    -1,   149,   150,   151,   152,   153,   154,   155,
     156,   157,   158,   159,   160,   161,    -1,   163,   164,   165,
     166,    -1,   168,    -1,   170,   171,    -1,   173,   174,   175,
     176,   177,   178,    -1,   180,    -1,    -1,    -1,   184,   185,
      -1,   187,    -1,   189,   190,   191,   192,   193,   194,   195,
     196,   197,   198,   199,   200,    -1,   202,   203,   204,   205,
     206,   207,   208,    -1,   210,   211,   212,   213,   214,   215,
     216,   217,   218,   219,    -1,   221,    -1,   223,   224,   225,
     226,   227,   228,    -1,   230,   231,   232,   233,   234,    -1,
      -1,   237,   238,   239,   240,    -1,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,    -1,
     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
     286,   287,   288,    -1,   290,   291,    -1,    -1,   294,   295,
     296,    -1,    -1,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,    -1,    -1,
     316,    -1,    -1,    -1,    -1,   321,   322,   323,   324,   325,
     326,   327,   328,   329,   330,    -1,   332,   333,   334,   335,
     336,    -1,    -1,   339,    -1,   341,   342,   343,   344,   345,
     346,   347,   348,    -1,   350,   351,   352,    -1,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,    -1,   365,
     366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,    -1,   384,   385,
     386,   387,   388,   389,   390,   391,   392,   393,    -1,   395,
     396,    -1,   398,   399,   400,    -1,    -1,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,   417,   418,    -1,   420,   421,    -1,   423,   424,   425,
     426,   427,   428,   429,    -1,   431,   432,    -1,    -1,    -1,
     436,   437,   438,   439,   440,   441,   442,   443,   444,   445,
     446,   447,   448,   449,    -1,    -1,   452,   453,   454,    -1,
     456,   457,   458,   459,    -1,   461,   462,   463,   464,   465,
     466,   467,   468,   469,   470,   471,    -1,   473,   474,   475,
     476,    -1,    -1,    -1,   480,    -1,    -1,   483,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,   498,   499,   500,   501,   502,   503,   504,    -1,
      -1,    -1,    -1,    -1,    -1,   511,   512,   513,    -1,    -1,
      -1,    -1,   518,    -1,   520,   521,    -1,    -1,    -1,    -1,
     526,   527,    -1,    -1,    -1,    -1,   532,   533,     3,     4,
       5,     6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,
      25,    -1,    27,    28,    29,    30,    -1,    32,    33,    34,
      -1,    -1,    -1,    -1,    -1,    -1,    41,    -1,    -1,    44,
      45,    46,    -1,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    -1,
      75,    76,    77,    78,    79,    -1,    81,    -1,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    -1,    94,
      95,    96,    97,    98,    -1,    -1,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,    -1,   118,   119,   120,   121,   122,   123,    -1,
     125,    -1,   127,   128,   129,   130,    -1,    -1,   133,   134,
     135,   136,   137,    -1,    -1,    -1,   141,   142,   143,    -1,
     145,   146,   147,    -1,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   161,    -1,   163,   164,
     165,   166,    -1,   168,    -1,   170,   171,   172,   173,   174,
     175,   176,   177,   178,    -1,   180,    -1,    -1,    -1,   184,
     185,    -1,   187,    -1,   189,   190,   191,   192,   193,   194,
     195,   196,   197,   198,   199,   200,    -1,   202,   203,   204,
     205,   206,   207,   208,    -1,   210,   211,   212,   213,   214,
     215,   216,   217,   218,   219,    -1,   221,    -1,   223,   224,
     225,   226,   227,   228,    -1,   230,   231,   232,   233,   234,
      -1,   236,   237,   238,   239,   240,    -1,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
      -1,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,    -1,   290,   291,    -1,    -1,   294,
     295,   296,    -1,    -1,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,    -1,
      -1,   316,    -1,    -1,    -1,    -1,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,    -1,   332,   333,   334,
     335,   336,    -1,    -1,   339,    -1,   341,   342,   343,   344,
     345,   346,   347,   348,    -1,   350,   351,   352,    -1,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,    -1,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,    -1,    -1,
     385,   386,   387,   388,   389,   390,   391,   392,   393,    -1,
     395,   396,    -1,   398,   399,   400,    -1,    -1,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,    -1,   420,   421,    -1,   423,   424,
     425,   426,   427,   428,   429,    -1,   431,   432,    -1,    -1,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,    -1,    -1,   452,   453,   454,
      -1,   456,   457,   458,   459,    -1,   461,   462,   463,   464,
     465,   466,   467,    -1,   469,   470,   471,    -1,   473,   474,
     475,   476,    -1,    -1,    -1,   480,    -1,    -1,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
      -1,    -1,    -1,    -1,    -1,    -1,   511,   512,   513,    -1,
      -1,    -1,    -1,   518,    -1,   520,    -1,    -1,    -1,    -1,
      -1,   526,   527,    -1,    -1,    -1,    -1,   532,   533,     3,
       4,     5,     6,     7,     8,     9,    10,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,
      24,    25,    -1,    27,    28,    29,    30,    -1,    32,    33,
      34,    -1,    -1,    -1,    38,    -1,    -1,    41,    -1,    -1,
      44,    45,    46,    -1,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    58,    59,    -1,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
      -1,    75,    76,    77,    78,    79,    -1,    81,    -1,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    -1,
      94,    95,    96,    97,    98,    -1,    -1,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,    -1,   118,   119,   120,   121,   122,   123,
      -1,   125,    -1,   127,   128,   129,   130,    -1,    -1,   133,
     134,   135,   136,   137,    -1,    -1,    -1,   141,   142,   143,
      -1,   145,   146,   147,    -1,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,   159,   160,   161,    -1,   163,
     164,   165,   166,    -1,   168,    -1,   170,   171,    -1,   173,
     174,   175,   176,   177,   178,    -1,   180,    -1,    -1,    -1,
     184,   185,    -1,   187,    -1,   189,   190,   191,   192,   193,
     194,   195,   196,   197,   198,   199,   200,    -1,   202,   203,
     204,   205,   206,   207,   208,    -1,   210,   211,   212,   213,
     214,   215,   216,   217,   218,   219,    -1,   221,    -1,   223,
     224,   225,   226,   227,   228,    -1,   230,   231,   232,   233,
     234,    -1,    -1,   237,   238,   239,   240,    -1,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,    -1,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,    -1,   290,   291,    -1,    -1,
     294,   295,   296,    -1,    -1,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
      -1,    -1,   316,    -1,    -1,    -1,    -1,   321,   322,   323,
     324,   325,   326,   327,   328,   329,   330,    -1,   332,   333,
     334,   335,   336,    -1,    -1,   339,    -1,   341,   342,   343,
     344,   345,   346,   347,   348,    -1,   350,   351,   352,    -1,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
      -1,   365,   366,   367,   368,   369,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,    -1,
     384,   385,   386,   387,   388,   389,   390,   391,   392,   393,
      -1,   395,   396,    -1,   398,   399,   400,    -1,    -1,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,   417,   418,    -1,   420,   421,    -1,   423,
     424,   425,   426,   427,   428,   429,    -1,   431,   432,    -1,
      -1,    -1,   436,   437,   438,   439,   440,   441,   442,   443,
     444,   445,   446,   447,   448,   449,    -1,    -1,   452,   453,
     454,    -1,   456,   457,   458,   459,    -1,   461,   462,   463,
     464,   465,   466,   467,   468,   469,   470,   471,    -1,   473,
     474,   475,   476,    -1,    -1,    -1,   480,    -1,    -1,   483,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,   499,   500,   501,   502,   503,
     504,    -1,    -1,    -1,    -1,    -1,    -1,   511,   512,   513,
      -1,    -1,    -1,    -1,   518,    -1,   520,    -1,    -1,    -1,
      -1,    -1,   526,   527,    -1,    -1,    -1,    -1,   532,   533,
       3,     4,     5,     6,     7,     8,     9,    10,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,
      23,    24,    25,    -1,    27,    28,    29,    30,    -1,    32,
      33,    34,    -1,    -1,    -1,    38,    -1,    -1,    41,    -1,
      -1,    44,    45,    46,    -1,    48,    49,    50,    51,    52,
      53,    54,    55,    56,    57,    58,    59,    -1,    61,    62,
      63,    64,    65,    66,    67,    68,    69,    70,    71,    72,
      73,    -1,    75,    76,    77,    78,    79,    -1,    81,    -1,
      83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      -1,    94,    95,    96,    97,    98,    -1,    -1,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,    -1,   118,   119,   120,   121,   122,
     123,    -1,   125,    -1,   127,   128,   129,   130,    -1,    -1,
     133,   134,   135,   136,   137,    -1,    -1,    -1,   141,   142,
     143,    -1,   145,   146,   147,    -1,   149,   150,   151,   152,
     153,   154,   155,   156,   157,   158,   159,   160,   161,    -1,
     163,   164,   165,   166,    -1,   168,    -1,   170,   171,    -1,
     173,   174,   175,   176,   177,   178,    -1,   180,    -1,    -1,
      -1,   184,   185,    -1,   187,    -1,   189,   190,   191,   192,
     193,   194,   195,   196,   197,   198,   199,   200,    -1,   202,
     203,   204,   205,   206,   207,   208,    -1,   210,   211,   212,
     213,   214,   215,   216,   217,   218,   219,    -1,   221,    -1,
     223,   224,   225,   226,   227,   228,    -1,   230,   231,   232,
     233,   234,    -1,    -1,   237,   238,   239,   240,    -1,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,    -1,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,    -1,   290,   291,    -1,
      -1,   294,   295,   296,    -1,    -1,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,    -1,    -1,   316,    -1,    -1,    -1,    -1,   321,   322,
     323,   324,   325,   326,   327,   328,   329,   330,    -1,   332,
     333,   334,   335,   336,    -1,    -1,   339,    -1,   341,   342,
     343,   344,   345,   346,   347,   348,    -1,   350,   351,   352,
      -1,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,    -1,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
      -1,   384,   385,   386,   387,   388,   389,   390,   391,   392,
     393,    -1,   395,   396,    -1,   398,   399,   400,    -1,    -1,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,   417,   418,    -1,   420,   421,    -1,
     423,   424,   425,   426,   427,   428,   429,    -1,   431,   432,
      -1,    -1,    -1,   436,   437,   438,   439,   440,   441,   442,
     443,   444,   445,   446,   447,   448,   449,    -1,    -1,   452,
     453,   454,    -1,   456,   457,   458,   459,    -1,   461,   462,
     463,   464,   465,   466,   467,    -1,   469,   470,   471,    -1,
     473,   474,   475,   476,    -1,    -1,    -1,   480,    -1,    -1,
     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   500,   501,   502,
     503,   504,    -1,    -1,    -1,    -1,    -1,    -1,   511,   512,
     513,    -1,    -1,    -1,    -1,   518,    -1,   520,   521,    -1,
      -1,    -1,    -1,   526,   527,    -1,    -1,    -1,    -1,   532,
     533,     3,     4,     5,     6,     7,     8,     9,    10,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    -1,    27,    28,    29,    30,    31,
      32,    33,    34,    -1,    -1,    -1,    -1,    39,    -1,    41,
      -1,    -1,    44,    45,    46,    -1,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    58,    59,    -1,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
      72,    73,    -1,    75,    76,    77,    78,    79,    -1,    81,
      -1,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    -1,    94,    95,    96,    97,    98,    -1,    -1,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,    -1,   118,   119,   120,   121,
     122,   123,    -1,   125,    -1,   127,   128,   129,   130,    -1,
      -1,   133,   134,   135,   136,   137,    -1,    -1,    -1,   141,
     142,   143,    -1,   145,   146,   147,    -1,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,   160,   161,
      -1,   163,   164,   165,   166,    -1,   168,    -1,   170,   171,
      -1,   173,   174,   175,   176,   177,   178,    -1,   180,    -1,
      -1,    -1,   184,   185,    -1,   187,    -1,   189,   190,   191,
     192,   193,   194,   195,   196,   197,   198,   199,   200,    -1,
     202,   203,   204,   205,   206,   207,   208,    -1,   210,   211,
     212,   213,   214,   215,   216,   217,   218,   219,    -1,   221,
      -1,   223,   224,   225,   226,   227,   228,    -1,   230,   231,
     232,   233,   234,    -1,    -1,   237,   238,   239,   240,    -1,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,    -1,   276,   277,   278,   279,   280,   281,
     282,   283,   284,   285,   286,   287,   288,    -1,   290,   291,
      -1,    -1,   294,   295,   296,    -1,    -1,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,    -1,    -1,   316,    -1,    -1,    -1,    -1,   321,
     322,   323,   324,   325,   326,   327,   328,   329,   330,    -1,
     332,   333,   334,   335,   336,    -1,    -1,   339,    -1,   341,
     342,   343,   344,   345,   346,   347,   348,    -1,   350,   351,
     352,    -1,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,    -1,   365,   366,   367,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,    -1,    -1,   385,   386,   387,   388,   389,   390,   391,
     392,   393,    -1,   395,   396,    -1,   398,   399,   400,   401,
      -1,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,   417,   418,    -1,   420,   421,
      -1,   423,   424,   425,   426,   427,   428,   429,    -1,   431,
     432,    -1,    -1,    -1,   436,   437,   438,   439,   440,   441,
     442,   443,   444,   445,   446,   447,   448,   449,    -1,    -1,
     452,   453,   454,    -1,   456,   457,   458,   459,    -1,   461,
     462,   463,   464,   465,   466,   467,    -1,   469,   470,   471,
      -1,   473,   474,   475,   476,    -1,    -1,    -1,   480,    -1,
      -1,   483,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,   498,   499,   500,   501,
     502,   503,   504,    -1,    -1,    -1,    -1,    -1,    -1,   511,
     512,   513,    -1,    -1,    -1,    -1,   518,    -1,   520,    -1,
      -1,    -1,    -1,    -1,   526,   527,    -1,    -1,    -1,    -1,
     532,   533,     3,     4,     5,     6,     7,     8,     9,    10,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    -1,    27,    28,    29,    30,
      -1,    32,    33,    34,    -1,    -1,    -1,    38,    -1,    -1,
      41,    -1,    -1,    44,    45,    46,    -1,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    58,    59,    -1,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    72,    73,    -1,    75,    76,    77,    78,    79,    -1,
      81,    -1,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    -1,    94,    95,    96,    97,    98,    -1,    -1,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,    -1,   118,   119,   120,
     121,   122,   123,    -1,   125,    -1,   127,   128,   129,   130,
      -1,    -1,   133,   134,   135,   136,   137,    -1,    -1,    -1,
     141,   142,   143,    -1,   145,   146,   147,    -1,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
     161,    -1,   163,   164,   165,   166,    -1,   168,    -1,   170,
     171,    -1,   173,   174,   175,   176,   177,   178,    -1,   180,
      -1,    -1,    -1,   184,   185,    -1,   187,    -1,   189,   190,
     191,   192,   193,   194,   195,   196,   197,   198,   199,   200,
      -1,   202,   203,   204,   205,   206,   207,   208,    -1,   210,
     211,   212,   213,   214,   215,   216,   217,   218,   219,    -1,
     221,    -1,   223,   224,   225,   226,   227,   228,    -1,   230,
     231,   232,   233,   234,    -1,    -1,   237,   238,   239,   240,
      -1,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,    -1,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,   287,   288,    -1,   290,
     291,    -1,    -1,   294,   295,   296,    -1,    -1,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,    -1,    -1,   316,    -1,    -1,    -1,    -1,
     321,   322,   323,   324,   325,   326,   327,   328,   329,   330,
      -1,   332,   333,   334,   335,   336,    -1,    -1,   339,    -1,
     341,   342,   343,   344,   345,   346,   347,   348,    -1,   350,
     351,   352,    -1,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,    -1,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,    -1,   384,   385,   386,   387,   388,   389,   390,
     391,   392,   393,    -1,   395,   396,    -1,   398,   399,   400,
      -1,    -1,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,   417,   418,    -1,   420,
     421,    -1,   423,   424,   425,   426,   427,   428,   429,    -1,
     431,   432,    -1,    -1,    -1,   436,   437,   438,   439,   440,
     441,   442,   443,   444,   445,   446,   447,   448,   449,    -1,
      -1,   452,   453,   454,    -1,   456,   457,   458,   459,    -1,
     461,   462,   463,   464,   465,   466,   467,    -1,   469,   470,
     471,    -1,   473,   474,   475,   476,    -1,    -1,    -1,   480,
      -1,    -1,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,   499,   500,
     501,   502,   503,   504,    -1,    -1,    -1,    -1,    -1,    -1,
     511,   512,   513,    -1,    -1,    -1,    -1,   518,    -1,   520,
     521,    -1,    -1,    -1,    -1,   526,   527,    -1,    -1,    -1,
      -1,   532,   533,     3,     4,     5,     6,     7,     8,     9,
      10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    22,    23,    24,    25,    -1,    27,    28,    29,
      30,    -1,    32,    33,    34,    -1,    -1,    -1,    38,    -1,
      -1,    41,    -1,    -1,    44,    45,    46,    -1,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
      -1,    61,    62,    63,    64,    65,    66,    67,    68,    69,
      70,    71,    72,    73,    -1,    75,    76,    77,    78,    79,
      -1,    81,    -1,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    -1,    94,    95,    96,    97,    98,    -1,
      -1,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,    -1,   118,   119,
     120,   121,   122,   123,    -1,   125,    -1,   127,   128,   129,
     130,    -1,    -1,   133,   134,   135,   136,   137,    -1,    -1,
      -1,   141,   142,   143,    -1,   145,   146,   147,    -1,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
     160,   161,    -1,   163,   164,   165,   166,    -1,   168,    -1,
     170,   171,    -1,   173,   174,   175,   176,   177,   178,    -1,
     180,    -1,    -1,    -1,   184,   185,    -1,   187,    -1,   189,
     190,   191,   192,   193,   194,   195,   196,   197,   198,   199,
     200,    -1,   202,   203,   204,   205,   206,   207,   208,    -1,
     210,   211,   212,   213,   214,   215,   216,   217,   218,   219,
      -1,   221,    -1,   223,   224,   225,   226,   227,   228,    -1,
     230,   231,   232,   233,   234,    -1,    -1,   237,   238,   239,
     240,    -1,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,    -1,   276,   277,   278,   279,
     280,   281,   282,   283,   284,   285,   286,   287,   288,    -1,
     290,   291,    -1,    -1,   294,   295,   296,    -1,    -1,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,    -1,    -1,   316,    -1,    -1,    -1,
      -1,   321,   322,   323,   324,   325,   326,   327,   328,   329,
     330,    -1,   332,   333,   334,   335,   336,    -1,    -1,   339,
      -1,   341,   342,   343,   344,   345,   346,   347,   348,    -1,
     350,   351,   352,    -1,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,    -1,   365,   366,   367,   368,   369,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,    -1,   384,   385,   386,   387,   388,   389,
     390,   391,   392,   393,    -1,   395,   396,    -1,   398,   399,
     400,    -1,    -1,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,   417,   418,    -1,
     420,   421,    -1,   423,   424,   425,   426,   427,   428,   429,
      -1,   431,   432,    -1,    -1,    -1,   436,   437,   438,   439,
     440,   441,   442,   443,   444,   445,   446,   447,   448,   449,
      -1,    -1,   452,   453,   454,    -1,   456,   457,   458,   459,
      -1,   461,   462,   463,   464,   465,   466,   467,    -1,   469,
     470,   471,    -1,   473,   474,   475,   476,    -1,    -1,    -1,
     480,    -1,    -1,   483,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,   498,   499,
     500,   501,   502,   503,   504,    -1,    -1,    -1,    -1,    -1,
      -1,   511,   512,   513,    -1,    -1,    -1,    -1,   518,    -1,
     520,    -1,    -1,    -1,    -1,    -1,   526,   527,    -1,    -1,
      -1,    -1,   532,   533,     3,     4,     5,     6,     7,    -1,
       9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    22,    23,    24,    25,    -1,    27,    28,
      29,    30,    -1,    32,    33,    34,    -1,    -1,    -1,    -1,
      -1,    -1,    41,    -1,    -1,    44,    45,    46,    -1,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    58,
      59,    -1,    61,    62,    63,    64,    65,    66,    67,    68,
      69,    70,    71,    72,    73,    -1,    75,    76,    77,    78,
      79,    -1,    81,    -1,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    -1,    94,    95,    96,    97,    98,
      -1,    -1,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,    -1,   116,    -1,   118,
     119,   120,   121,   122,   123,    -1,   125,    -1,   127,   128,
     129,   130,    -1,    -1,   133,   134,   135,   136,   137,    -1,
      -1,    -1,   141,   142,   143,    -1,   145,   146,   147,    -1,
     149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
     159,   160,   161,    -1,   163,   164,   165,   166,    -1,   168,
      -1,   170,   171,   172,   173,   174,   175,   176,   177,   178,
      -1,   180,    -1,    -1,    -1,   184,   185,    -1,   187,    -1,
     189,   190,   191,   192,   193,   194,   195,   196,   197,   198,
     199,   200,    -1,   202,   203,   204,   205,   206,   207,   208,
      -1,   210,   211,   212,   213,   214,   215,   216,   217,   218,
     219,    -1,   221,    -1,   223,   224,   225,   226,   227,   228,
      -1,   230,   231,   232,   233,   234,    -1,    -1,   237,   238,
     239,   240,    -1,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,    -1,   276,    -1,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
      -1,   290,   291,    -1,    -1,   294,   295,   296,    -1,    -1,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,    -1,    -1,   316,   317,   318,
     319,    -1,   321,   322,   323,   324,   325,   326,   327,   328,
     329,   330,    -1,   332,   333,   334,   335,   336,    -1,    -1,
     339,    -1,   341,   342,   343,   344,   345,   346,   347,   348,
      -1,   350,   351,   352,    -1,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,    -1,   365,   366,   367,   368,
     369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,    -1,   385,   386,   387,   388,
     389,   390,   391,   392,   393,    -1,   395,   396,    -1,   398,
     399,   400,    -1,    -1,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,   417,   418,
      -1,   420,   421,   422,   423,   424,   425,   426,   427,   428,
     429,    -1,   431,   432,    -1,    -1,    -1,   436,   437,   438,
     439,   440,   441,   442,   443,   444,   445,   446,   447,   448,
     449,    -1,    -1,   452,   453,   454,   455,   456,   457,   458,
     459,    -1,   461,   462,   463,   464,   465,   466,   467,    -1,
     469,   470,   471,    -1,   473,   474,   475,   476,    -1,    -1,
      -1,   480,    -1,   482,   483,   484,   485,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
     499,   500,   501,   502,   503,    -1,    -1,   506,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   518,
      -1,   520,    -1,    -1,    -1,    -1,    -1,   526,   527,    -1,
      -1,    -1,    -1,   532,   533,     3,     4,     5,     6,     7,
       8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    -1,    27,
      28,    29,    30,    31,    32,    33,    34,    -1,    -1,    -1,
      -1,    -1,    -1,    41,    -1,    -1,    44,    45,    46,    -1,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      58,    59,    -1,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    72,    73,    -1,    75,    76,    77,
      78,    79,    -1,    81,    -1,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    -1,    94,    95,    96,    97,
      98,    -1,    -1,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,    -1,
     118,   119,   120,   121,   122,   123,    -1,   125,    -1,   127,
     128,   129,   130,    -1,    -1,   133,   134,   135,   136,   137,
      -1,    -1,    -1,   141,   142,   143,    -1,   145,   146,   147,
      -1,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,   159,   160,   161,    -1,   163,   164,   165,   166,    -1,
     168,    -1,   170,   171,    -1,   173,   174,   175,   176,   177,
     178,    -1,   180,    -1,    -1,    -1,   184,   185,    -1,   187,
      -1,   189,   190,   191,   192,   193,   194,   195,   196,   197,
     198,   199,   200,    -1,   202,   203,   204,   205,   206,   207,
     208,    -1,   210,   211,   212,   213,   214,   215,   216,   217,
     218,   219,    -1,   221,    -1,   223,   224,   225,   226,   227,
     228,    -1,   230,   231,   232,   233,   234,    -1,    -1,   237,
     238,   239,   240,    -1,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,    -1,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
     288,    -1,   290,   291,    -1,    -1,   294,   295,   296,    -1,
      -1,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,    -1,    -1,   316,    -1,
      -1,    -1,    -1,   321,   322,   323,   324,   325,   326,   327,
     328,   329,   330,    -1,   332,   333,   334,   335,   336,    -1,
      -1,   339,    -1,   341,   342,   343,   344,   345,   346,   347,
     348,    -1,   350,   351,   352,    -1,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,    -1,   365,   366,   367,
     368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,    -1,    -1,   385,   386,   387,
     388,   389,   390,   391,   392,   393,    -1,   395,   396,    -1,
     398,   399,   400,    -1,    -1,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,   417,
     418,    -1,   420,   421,    -1,   423,   424,   425,   426,   427,
     428,   429,    -1,   431,   432,    -1,    -1,    -1,   436,   437,
     438,   439,   440,   441,   442,   443,   444,   445,   446,   447,
     448,   449,    -1,    -1,   452,   453,   454,    -1,   456,   457,
     458,   459,    -1,   461,   462,   463,   464,   465,   466,   467,
      -1,   469,   470,   471,    -1,   473,   474,   475,   476,    -1,
      -1,    -1,   480,    -1,    -1,   483,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,   499,   500,   501,   502,   503,   504,    -1,    -1,    -1,
      -1,    -1,    -1,   511,   512,   513,    -1,    -1,    -1,    -1,
     518,    -1,   520,    -1,    -1,    -1,    -1,    -1,   526,   527,
      -1,    -1,    -1,    -1,   532,   533,     3,     4,     5,     6,
       7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    -1,
      27,    28,    29,    30,    31,    32,    33,    34,    -1,    -1,
      -1,    -1,    -1,    -1,    41,    -1,    -1,    44,    45,    46,
      -1,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    58,    59,    -1,    61,    62,    63,    64,    65,    66,
      67,    68,    69,    70,    71,    72,    73,    -1,    75,    76,
      77,    78,    79,    -1,    81,    -1,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    -1,    94,    95,    96,
      97,    98,    -1,    -1,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
      -1,   118,   119,   120,   121,   122,   123,    -1,   125,    -1,
     127,   128,   129,   130,    -1,    -1,   133,   134,   135,   136,
     137,    -1,    -1,    -1,   141,   142,   143,    -1,   145,   146,
     147,    -1,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,   160,   161,    -1,   163,   164,   165,   166,
      -1,   168,    -1,   170,   171,    -1,   173,   174,   175,   176,
     177,   178,    -1,   180,    -1,    -1,    -1,   184,   185,    -1,
     187,    -1,   189,   190,   191,   192,   193,   194,   195,   196,
     197,   198,   199,   200,    -1,   202,   203,   204,   205,   206,
     207,   208,    -1,   210,   211,   212,   213,   214,   215,   216,
     217,   218,   219,    -1,   221,    -1,   223,   224,   225,   226,
     227,   228,    -1,   230,   231,   232,   233,   234,    -1,    -1,
     237,   238,   239,   240,    -1,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,    -1,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     287,   288,    -1,   290,   291,    -1,    -1,   294,   295,   296,
      -1,    -1,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,    -1,    -1,   316,
      -1,    -1,    -1,    -1,   321,   322,   323,   324,   325,   326,
     327,   328,   329,   330,    -1,   332,   333,   334,   335,   336,
      -1,    -1,   339,    -1,   341,   342,   343,   344,   345,   346,
     347,   348,    -1,   350,   351,   352,    -1,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,    -1,   365,   366,
     367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,    -1,    -1,   385,   386,
     387,   388,   389,   390,   391,   392,   393,    -1,   395,   396,
      -1,   398,   399,   400,    -1,    -1,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
     417,   418,    -1,   420,   421,    -1,   423,   424,   425,   426,
     427,   428,   429,    -1,   431,   432,    -1,    -1,    -1,   436,
     437,   438,   439,   440,   441,   442,   443,   444,   445,   446,
     447,   448,   449,    -1,    -1,   452,   453,   454,    -1,   456,
     457,   458,   459,    -1,   461,   462,   463,   464,   465,   466,
     467,    -1,   469,   470,   471,    -1,   473,   474,   475,   476,
      -1,    -1,    -1,   480,    -1,    -1,   483,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,   498,   499,   500,   501,   502,   503,   504,    -1,    -1,
      -1,    -1,    -1,    -1,   511,   512,   513,    -1,    -1,    -1,
      -1,   518,    -1,   520,    -1,    -1,    -1,    -1,    -1,   526,
     527,    -1,    -1,    -1,    -1,   532,   533,     3,     4,     5,
       6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      -1,    27,    28,    29,    30,    -1,    32,    33,    34,    -1,
      -1,    -1,    -1,    -1,    -1,    41,    -1,    -1,    44,    45,
      46,    -1,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    -1,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    -1,    75,
      76,    77,    78,    79,    -1,    81,    -1,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    -1,    94,    95,
      96,    97,    98,    -1,    -1,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,    -1,   118,   119,   120,   121,   122,   123,    -1,   125,
      -1,   127,   128,   129,   130,    -1,    -1,   133,   134,   135,
     136,   137,    -1,    -1,    -1,   141,   142,   143,    -1,   145,
     146,   147,    -1,   149,   150,   151,   152,   153,   154,   155,
     156,   157,   158,   159,   160,   161,    -1,   163,   164,   165,
     166,    -1,   168,    -1,   170,   171,   172,   173,   174,   175,
     176,   177,   178,    -1,   180,    -1,    -1,    -1,   184,   185,
      -1,   187,    -1,   189,   190,   191,   192,   193,   194,   195,
     196,   197,   198,   199,   200,    -1,   202,   203,   204,   205,
     206,   207,   208,    -1,   210,   211,   212,   213,   214,   215,
     216,   217,   218,   219,    -1,   221,    -1,   223,   224,   225,
     226,   227,   228,    -1,   230,   231,   232,   233,   234,    -1,
      -1,   237,   238,   239,   240,    -1,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,    -1,
     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
     286,   287,   288,    -1,   290,   291,    -1,    -1,   294,   295,
     296,    -1,    -1,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,    -1,    -1,
     316,    -1,    -1,    -1,    -1,   321,   322,   323,   324,   325,
     326,   327,   328,   329,   330,    -1,   332,   333,   334,   335,
     336,    -1,    -1,   339,    -1,   341,   342,   343,   344,   345,
     346,   347,   348,    -1,   350,   351,   352,    -1,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,    -1,   365,
     366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,    -1,    -1,   385,
     386,   387,   388,   389,   390,   391,   392,   393,    -1,   395,
     396,    -1,   398,   399,   400,    -1,    -1,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,   417,   418,    -1,   420,   421,    -1,   423,   424,   425,
     426,   427,   428,   429,    -1,   431,   432,    -1,    -1,    -1,
     436,   437,   438,   439,   440,   441,   442,   443,   444,   445,
     446,   447,   448,   449,    -1,    -1,   452,   453,   454,    -1,
     456,   457,   458,   459,    -1,   461,   462,   463,   464,   465,
     466,   467,    -1,   469,   470,   471,    -1,   473,   474,   475,
     476,    -1,    -1,    -1,   480,    -1,    -1,   483,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,   498,   499,   500,   501,   502,   503,   504,    -1,
      -1,    -1,    -1,    -1,    -1,   511,   512,   513,    -1,    -1,
      -1,    -1,   518,    -1,   520,    -1,    -1,    -1,    -1,    -1,
     526,   527,    -1,    -1,    -1,    -1,   532,   533,     3,     4,
       5,     6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,
      25,    -1,    27,    28,    29,    30,    -1,    32,    33,    34,
      -1,    -1,    -1,    -1,    -1,    -1,    41,    -1,    -1,    44,
      45,    46,    -1,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    -1,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    -1,
      75,    76,    77,    78,    79,    -1,    81,    -1,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    -1,    94,
      95,    96,    97,    98,    -1,    -1,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,    -1,   118,   119,   120,   121,   122,   123,    -1,
     125,    -1,   127,   128,   129,   130,    -1,    -1,   133,   134,
     135,   136,   137,    -1,    -1,    -1,   141,   142,   143,    -1,
     145,   146,   147,    -1,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   161,    -1,   163,   164,
     165,   166,    -1,   168,    -1,   170,   171,    -1,   173,   174,
     175,   176,   177,   178,    -1,   180,    -1,    -1,    -1,   184,
     185,    -1,   187,    -1,   189,   190,   191,   192,   193,   194,
     195,   196,   197,   198,   199,   200,    -1,   202,   203,   204,
     205,   206,   207,   208,    -1,   210,   211,   212,   213,   214,
     215,   216,   217,   218,   219,    -1,   221,    -1,   223,   224,
     225,   226,   227,   228,    -1,   230,   231,   232,   233,   234,
      -1,    -1,   237,   238,   239,   240,    -1,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
      -1,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,    -1,   290,   291,    -1,    -1,   294,
     295,   296,    -1,    -1,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,    -1,
      -1,   316,    -1,    -1,    -1,    -1,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,    -1,   332,   333,   334,
     335,   336,    -1,    -1,   339,    -1,   341,   342,   343,   344,
     345,   346,   347,   348,    -1,   350,   351,   352,    -1,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,    -1,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,    -1,    -1,
     385,   386,   387,   388,   389,   390,   391,   392,   393,    -1,
     395,   396,    -1,   398,   399,   400,    -1,    -1,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,    -1,   420,   421,    -1,   423,   424,
     425,   426,   427,   428,   429,    -1,   431,   432,    -1,    -1,
      -1,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,    -1,    -1,   452,   453,   454,
      -1,   456,   457,   458,   459,    -1,   461,   462,   463,   464,
     465,   466,   467,    -1,   469,   470,   471,    -1,   473,   474,
     475,   476,    -1,    -1,    -1,   480,    -1,    -1,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
      -1,    -1,    -1,    -1,    -1,    -1,   511,   512,   513,    -1,
      -1,    -1,    -1,   518,    -1,   520,   521,    -1,    -1,    -1,
      -1,   526,   527,    -1,    -1,    -1,    -1,   532,   533,     3,
       4,     5,     6,     7,     8,     9,    10,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,
      24,    25,    -1,    27,    28,    29,    30,    -1,    32,    33,
      34,    -1,    -1,    -1,    -1,    -1,    -1,    41,    -1,    -1,
      44,    45,    46,    -1,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    58,    59,    -1,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
      -1,    75,    76,    77,    78,    79,    -1,    81,    -1,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    -1,
      94,    95,    96,    97,    98,    -1,    -1,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,    -1,   118,   119,   120,   121,   122,   123,
      -1,   125,    -1,   127,   128,   129,   130,    -1,    -1,   133,
     134,   135,   136,   137,    -1,    -1,    -1,   141,   142,   143,
      -1,   145,   146,   147,    -1,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,   159,   160,   161,    -1,   163,
     164,   165,   166,    -1,   168,    -1,   170,   171,    -1,   173,
     174,   175,   176,   177,   178,    -1,   180,    -1,    -1,    -1,
     184,   185,    -1,   187,    -1,   189,   190,   191,   192,   193,
     194,   195,   196,   197,   198,   199,   200,    -1,   202,   203,
     204,   205,   206,   207,   208,    -1,   210,   211,   212,   213,
     214,   215,   216,   217,   218,   219,    -1,   221,    -1,   223,
     224,   225,   226,   227,   228,    -1,   230,   231,   232,   233,
     234,    -1,    -1,   237,   238,   239,   240,    -1,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,    -1,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,    -1,   290,   291,    -1,    -1,
     294,   295,   296,    -1,    -1,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
      -1,    -1,   316,    -1,    -1,    -1,    -1,   321,   322,   323,
     324,   325,   326,   327,   328,   329,   330,    -1,   332,   333,
     334,   335,   336,    -1,    -1,   339,    -1,   341,   342,   343,
     344,   345,   346,   347,   348,    -1,   350,   351,   352,    -1,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
      -1,   365,   366,   367,   368,   369,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,    -1,
      -1,   385,   386,   387,   388,   389,   390,   391,   392,   393,
      -1,   395,   396,    -1,   398,   399,   400,    -1,    -1,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,   417,   418,    -1,   420,   421,   422,   423,
     424,   425,   426,   427,   428,   429,    -1,   431,   432,    -1,
      -1,    -1,   436,   437,   438,   439,   440,   441,   442,   443,
     444,   445,   446,   447,   448,   449,    -1,    -1,   452,   453,
     454,    -1,   456,   457,   458,   459,    -1,   461,   462,   463,
     464,   465,   466,   467,    -1,   469,   470,   471,    -1,   473,
     474,   475,   476,    -1,    -1,    -1,   480,    -1,    -1,   483,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,   499,   500,   501,   502,   503,
     504,    -1,    -1,    -1,    -1,    -1,    -1,   511,   512,   513,
      -1,    -1,    -1,    -1,   518,    -1,   520,    -1,    -1,    -1,
      -1,    -1,   526,   527,    -1,    -1,    -1,    -1,   532,   533,
       3,     4,     5,     6,     7,     8,     9,    10,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,
      23,    24,    25,    -1,    27,    28,    29,    30,    -1,    32,
      33,    34,    -1,    -1,    -1,    -1,    -1,    -1,    41,    -1,
      -1,    44,    45,    46,    -1,    48,    49,    50,    51,    52,
      53,    54,    55,    56,    57,    58,    59,    -1,    61,    62,
      63,    64,    65,    66,    67,    68,    69,    70,    71,    72,
      73,    -1,    75,    76,    77,    78,    79,    -1,    81,    -1,
      83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      -1,    94,    95,    96,    97,    98,    -1,    -1,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,    -1,   118,   119,   120,   121,   122,
     123,    -1,   125,    -1,   127,   128,   129,   130,    -1,    -1,
     133,   134,   135,   136,   137,    -1,    -1,    -1,   141,   142,
     143,    -1,   145,   146,   147,    -1,   149,   150,   151,   152,
     153,   154,   155,   156,   157,   158,   159,   160,   161,    -1,
     163,   164,   165,   166,    -1,   168,    -1,   170,   171,    -1,
     173,   174,   175,   176,   177,   178,    -1,   180,    -1,    -1,
      -1,   184,   185,    -1,   187,    -1,   189,   190,   191,   192,
     193,   194,   195,   196,   197,   198,   199,   200,    -1,   202,
     203,   204,   205,   206,   207,   208,    -1,   210,   211,   212,
     213,   214,   215,   216,   217,   218,   219,    -1,   221,    -1,
     223,   224,   225,   226,   227,   228,    -1,   230,   231,   232,
     233,   234,    -1,    -1,   237,   238,   239,   240,    -1,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,    -1,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,    -1,   290,   291,    -1,
      -1,   294,   295,   296,    -1,    -1,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,    -1,    -1,   316,    -1,    -1,    -1,    -1,   321,   322,
     323,   324,   325,   326,   327,   328,   329,   330,    -1,   332,
     333,   334,   335,   336,    -1,    -1,   339,    -1,   341,   342,
     343,   344,   345,   346,   347,   348,    -1,   350,   351,   352,
      -1,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,    -1,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
      -1,    -1,   385,   386,   387,   388,   389,   390,   391,   392,
     393,    -1,   395,   396,    -1,   398,   399,   400,    -1,    -1,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,   417,   418,    -1,   420,   421,    -1,
     423,   424,   425,   426,   427,   428,   429,    -1,   431,   432,
      -1,    -1,    -1,   436,   437,   438,   439,   440,   441,   442,
     443,   444,   445,   446,   447,   448,   449,    -1,    -1,   452,
     453,   454,    -1,   456,   457,   458,   459,    -1,   461,   462,
     463,   464,   465,   466,   467,    -1,   469,   470,   471,    -1,
     473,   474,   475,   476,    -1,    -1,   479,   480,    -1,    -1,
     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   500,   501,   502,
     503,   504,    -1,    -1,    -1,    -1,    -1,    -1,   511,   512,
     513,    -1,    -1,    -1,    -1,   518,    -1,   520,    -1,    -1,
      -1,    -1,    -1,   526,   527,    -1,    -1,    -1,    -1,   532,
     533,     3,     4,     5,     6,     7,     8,     9,    10,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    -1,    27,    28,    29,    30,    31,
      32,    33,    34,    -1,    -1,    -1,    -1,    -1,    -1,    41,
      -1,    -1,    44,    45,    46,    -1,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    58,    59,    -1,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
      72,    73,    -1,    75,    76,    77,    78,    79,    -1,    81,
      -1,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    -1,    94,    95,    96,    97,    98,    -1,    -1,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,    -1,   118,   119,   120,   121,
     122,   123,    -1,   125,    -1,   127,   128,   129,   130,    -1,
      -1,   133,   134,   135,   136,   137,    -1,    -1,    -1,   141,
     142,   143,    -1,   145,   146,   147,    -1,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,   160,   161,
      -1,   163,   164,   165,   166,    -1,   168,    -1,   170,   171,
      -1,   173,   174,   175,   176,   177,   178,    -1,   180,    -1,
      -1,    -1,   184,   185,    -1,   187,    -1,   189,   190,   191,
     192,   193,   194,   195,   196,   197,   198,   199,   200,    -1,
     202,   203,   204,   205,   206,   207,   208,    -1,   210,   211,
     212,   213,   214,   215,   216,   217,   218,   219,    -1,   221,
      -1,   223,   224,   225,   226,   227,   228,    -1,   230,   231,
     232,   233,   234,    -1,    -1,   237,   238,   239,   240,    -1,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,    -1,   276,   277,   278,   279,   280,   281,
     282,   283,   284,   285,   286,   287,   288,    -1,   290,   291,
      -1,    -1,   294,   295,   296,    -1,    -1,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,    -1,    -1,   316,    -1,    -1,    -1,    -1,   321,
     322,   323,   324,   325,   326,   327,   328,   329,   330,    -1,
     332,   333,   334,   335,   336,    -1,    -1,   339,    -1,   341,
     342,   343,   344,   345,   346,   347,   348,    -1,   350,   351,
     352,    -1,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,    -1,   365,   366,   367,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,    -1,    -1,   385,   386,   387,   388,   389,   390,   391,
     392,   393,    -1,   395,   396,    -1,   398,   399,   400,    -1,
      -1,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,   417,   418,    -1,   420,   421,
      -1,   423,   424,   425,   426,   427,   428,   429,    -1,   431,
     432,    -1,    -1,    -1,   436,   437,   438,   439,   440,   441,
     442,   443,   444,   445,   446,   447,   448,   449,    -1,    -1,
     452,   453,   454,    -1,   456,   457,   458,   459,    -1,   461,
     462,   463,   464,   465,   466,   467,    -1,   469,   470,   471,
      -1,   473,   474,   475,   476,    -1,    -1,    -1,   480,    -1,
      -1,   483,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,   498,   499,   500,   501,
     502,   503,   504,    -1,    -1,    -1,    -1,    -1,    -1,   511,
     512,   513,    -1,    -1,    -1,    -1,   518,    -1,   520,    -1,
      -1,    -1,    -1,    -1,   526,   527,    -1,    -1,    -1,    -1,
     532,   533,     3,     4,     5,     6,     7,     8,     9,    10,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    -1,    27,    28,    29,    30,
      -1,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,    -1,
      41,    -1,    -1,    44,    45,    46,    -1,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    58,    59,    -1,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    72,    73,    -1,    75,    76,    77,    78,    79,    -1,
      81,    -1,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    -1,    94,    95,    96,    97,    98,    -1,    -1,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,    -1,   118,   119,   120,
     121,   122,   123,    -1,   125,    -1,   127,   128,   129,   130,
      -1,    -1,   133,   134,   135,   136,   137,    -1,    -1,    -1,
     141,   142,   143,    -1,   145,   146,   147,    -1,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
     161,    -1,   163,   164,   165,   166,    -1,   168,    -1,   170,
     171,    -1,   173,   174,   175,   176,   177,   178,    -1,   180,
      -1,    -1,    -1,   184,   185,    -1,   187,    -1,   189,   190,
     191,   192,   193,   194,   195,   196,   197,   198,   199,   200,
      -1,   202,   203,   204,   205,   206,   207,   208,    -1,   210,
     211,   212,   213,   214,   215,   216,   217,   218,   219,    -1,
     221,    -1,   223,   224,   225,   226,   227,   228,    -1,   230,
     231,   232,   233,   234,    -1,    -1,   237,   238,   239,   240,
      -1,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,    -1,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,   287,   288,    -1,   290,
     291,    -1,    -1,   294,   295,   296,    -1,    -1,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,    -1,    -1,   316,    -1,    -1,    -1,    -1,
     321,   322,   323,   324,   325,   326,   327,   328,   329,   330,
      -1,   332,   333,   334,   335,   336,    -1,    -1,   339,    -1,
     341,   342,   343,   344,   345,   346,   347,   348,    -1,   350,
     351,   352,    -1,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,    -1,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,    -1,    -1,   385,   386,   387,   388,   389,   390,
     391,   392,   393,    -1,   395,   396,    -1,   398,   399,   400,
      -1,    -1,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,   417,   418,    -1,   420,
     421,   422,   423,   424,   425,   426,   427,   428,   429,    -1,
     431,   432,    -1,    -1,    -1,   436,   437,   438,   439,   440,
     441,   442,   443,   444,   445,   446,   447,   448,   449,    -1,
      -1,   452,   453,   454,    -1,   456,   457,   458,   459,    -1,
     461,   462,   463,   464,   465,   466,   467,    -1,   469,   470,
     471,    -1,   473,   474,   475,   476,    -1,    -1,    -1,   480,
      -1,    -1,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,   499,   500,
     501,   502,   503,   504,    -1,    -1,    -1,    -1,    -1,    -1,
     511,   512,   513,    -1,    -1,    -1,    -1,   518,    -1,   520,
      -1,    -1,    -1,    -1,    -1,   526,   527,    -1,    -1,    -1,
      -1,   532,   533,     3,     4,     5,     6,     7,     8,     9,
      10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    22,    23,    24,    25,    -1,    27,    28,    29,
      30,    -1,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,
      -1,    41,    -1,    -1,    44,    45,    46,    -1,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
      -1,    61,    62,    63,    64,    65,    66,    67,    68,    69,
      70,    71,    72,    73,    -1,    75,    76,    77,    78,    79,
      -1,    81,    -1,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    -1,    94,    95,    96,    97,    98,    -1,
      -1,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,    -1,   118,   119,
     120,   121,   122,   123,    -1,   125,    -1,   127,   128,   129,
     130,    -1,    -1,   133,   134,   135,   136,   137,    -1,    -1,
      -1,   141,   142,   143,    -1,   145,   146,   147,    -1,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
     160,   161,    -1,   163,   164,   165,   166,    -1,   168,    -1,
     170,   171,    -1,   173,   174,   175,   176,   177,   178,    -1,
     180,    -1,    -1,    -1,   184,   185,    -1,   187,    -1,   189,
     190,   191,   192,   193,   194,   195,   196,   197,   198,   199,
     200,    -1,   202,   203,   204,   205,   206,   207,   208,    -1,
     210,   211,   212,   213,   214,   215,   216,   217,   218,   219,
      -1,   221,    -1,   223,   224,   225,   226,   227,   228,    -1,
     230,   231,   232,   233,   234,    -1,    -1,   237,   238,   239,
     240,    -1,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,    -1,   276,   277,   278,   279,
     280,   281,   282,   283,   284,   285,   286,   287,   288,    -1,
     290,   291,    -1,    -1,   294,   295,   296,    -1,    -1,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,    -1,    -1,   316,    -1,    -1,    -1,
      -1,   321,   322,   323,   324,   325,   326,   327,   328,   329,
     330,    -1,   332,   333,   334,   335,   336,    -1,    -1,   339,
      -1,   341,   342,   343,   344,   345,   346,   347,   348,    -1,
     350,   351,   352,    -1,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,    -1,   365,   366,   367,   368,   369,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,    -1,    -1,   385,   386,   387,   388,   389,
     390,   391,   392,   393,    -1,   395,   396,    -1,   398,   399,
     400,    -1,    -1,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,   417,   418,    -1,
     420,   421,   422,   423,   424,   425,   426,   427,   428,   429,
      -1,   431,   432,    -1,    -1,    -1,   436,   437,   438,   439,
     440,   441,   442,   443,   444,   445,   446,   447,   448,   449,
      -1,    -1,   452,   453,   454,    -1,   456,   457,   458,   459,
      -1,   461,   462,   463,   464,   465,   466,   467,    -1,   469,
     470,   471,    -1,   473,   474,   475,   476,    -1,    -1,    -1,
     480,    -1,    -1,   483,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,   498,   499,
     500,   501,   502,   503,   504,    -1,    -1,    -1,    -1,    -1,
      -1,   511,   512,   513,    -1,    -1,    -1,    -1,   518,    -1,
     520,    -1,    -1,    -1,    -1,    -1,   526,   527,    -1,    -1,
      -1,    -1,   532,   533,     3,     4,     5,     6,     7,     8,
       9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    22,    23,    24,    25,    -1,    27,    28,
      29,    30,    -1,    32,    33,    34,    -1,    -1,    -1,    -1,
      -1,    -1,    41,    -1,    -1,    44,    45,    46,    -1,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    58,
      59,    -1,    61,    62,    63,    64,    65,    66,    67,    68,
      69,    70,    71,    72,    73,    -1,    75,    76,    77,    78,
      79,    -1,    81,    -1,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    -1,    94,    95,    96,    97,    98,
      -1,    -1,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,    -1,   118,
     119,   120,   121,   122,   123,    -1,   125,    -1,   127,   128,
     129,   130,    -1,    -1,   133,   134,   135,   136,   137,    -1,
      -1,    -1,   141,   142,   143,    -1,   145,   146,   147,    -1,
     149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
     159,   160,   161,    -1,   163,   164,   165,   166,    -1,   168,
      -1,   170,   171,    -1,   173,   174,   175,   176,   177,   178,
      -1,   180,    -1,    -1,    -1,   184,   185,    -1,   187,    -1,
     189,   190,   191,   192,   193,   194,   195,   196,   197,   198,
     199,   200,    -1,   202,   203,   204,   205,   206,   207,   208,
      -1,   210,   211,   212,   213,   214,   215,   216,   217,   218,
     219,    -1,   221,    -1,   223,   224,   225,   226,   227,   228,
      -1,   230,   231,   232,   233,   234,    -1,    -1,   237,   238,
     239,   240,    -1,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,    -1,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
      -1,   290,   291,    -1,    -1,   294,   295,   296,    -1,    -1,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,    -1,    -1,   316,    -1,    -1,
      -1,    -1,   321,   322,   323,   324,   325,   326,   327,   328,
     329,   330,    -1,   332,   333,   334,   335,   336,    -1,    -1,
     339,    -1,   341,   342,   343,   344,   345,   346,   347,   348,
      -1,   350,   351,   352,    -1,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,    -1,   365,   366,   367,   368,
     369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,    -1,    -1,   385,   386,   387,   388,
     389,   390,   391,   392,   393,    -1,   395,   396,    -1,   398,
     399,   400,    -1,    -1,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,   417,   418,
      -1,   420,   421,    -1,   423,   424,   425,   426,   427,   428,
     429,    -1,   431,   432,    -1,    -1,    -1,   436,   437,   438,
     439,   440,   441,   442,   443,   444,   445,   446,   447,   448,
     449,    -1,    -1,   452,   453,   454,    -1,   456,   457,   458,
     459,    -1,   461,   462,   463,   464,   465,   466,   467,    -1,
     469,   470,   471,    -1,   473,   474,   475,   476,    -1,    -1,
      -1,   480,    -1,    -1,   483,   484,   485,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
     499,   500,   501,   502,   503,   504,    -1,    -1,    -1,    -1,
      -1,    -1,   511,   512,   513,    -1,    -1,    -1,    -1,   518,
      -1,   520,    -1,    -1,    -1,    -1,    -1,   526,   527,    -1,
      -1,    -1,    -1,   532,   533,     3,     4,     5,     6,     7,
       8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    -1,    27,
      28,    29,    30,    -1,    32,    33,    34,    -1,    -1,    -1,
      -1,    -1,    -1,    41,    -1,    -1,    44,    45,    46,    -1,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      58,    59,    -1,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    72,    73,    -1,    75,    76,    77,
      78,    79,    -1,    81,    -1,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    -1,    94,    95,    96,    97,
      98,    -1,    -1,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,    -1,
     118,   119,   120,   121,   122,   123,    -1,   125,    -1,   127,
     128,   129,   130,    -1,    -1,   133,   134,   135,   136,   137,
      -1,    -1,    -1,   141,   142,   143,    -1,   145,   146,   147,
      -1,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,   159,   160,   161,    -1,   163,   164,   165,   166,    -1,
     168,    -1,   170,   171,    -1,   173,   174,   175,   176,   177,
     178,    -1,   180,    -1,    -1,    -1,   184,   185,    -1,   187,
      -1,   189,   190,   191,   192,   193,   194,   195,   196,   197,
     198,   199,   200,    -1,   202,   203,   204,   205,   206,   207,
     208,    -1,   210,   211,   212,   213,   214,   215,   216,   217,
     218,   219,    -1,   221,    -1,   223,   224,   225,   226,   227,
     228,    -1,   230,   231,   232,   233,   234,    -1,    -1,   237,
     238,   239,   240,    -1,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,    -1,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
     288,    -1,   290,   291,    -1,    -1,   294,   295,   296,    -1,
      -1,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,    -1,    -1,   316,    -1,
      -1,    -1,    -1,   321,   322,   323,   324,   325,   326,   327,
     328,   329,   330,    -1,   332,   333,   334,   335,   336,    -1,
      -1,   339,    -1,   341,   342,   343,   344,   345,   346,   347,
     348,    -1,   350,   351,   352,    -1,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,    -1,   365,   366,   367,
     368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,    -1,    -1,   385,   386,   387,
     388,   389,   390,   391,   392,   393,    -1,   395,   396,    -1,
     398,   399,   400,    -1,    -1,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,   417,
     418,    -1,   420,   421,    -1,   423,   424,   425,   426,   427,
     428,   429,    -1,   431,   432,    -1,    -1,    -1,   436,   437,
     438,   439,   440,   441,   442,   443,   444,   445,   446,   447,
     448,   449,    -1,    -1,   452,   453,   454,    -1,   456,   457,
     458,   459,    -1,   461,   462,   463,   464,   465,   466,   467,
      -1,   469,   470,   471,    -1,   473,   474,   475,   476,    -1,
      -1,    -1,   480,    -1,    -1,   483,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,   499,   500,   501,   502,   503,   504,    -1,    -1,    -1,
      -1,    -1,    -1,   511,   512,   513,    -1,    -1,    -1,    -1,
     518,    -1,   520,    -1,    -1,    -1,    -1,    -1,   526,   527,
      -1,    -1,    -1,    -1,   532,   533,     3,     4,     5,     6,
       7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    -1,
      27,    28,    29,    30,    -1,    32,    33,    34,    -1,    -1,
      -1,    -1,    -1,    -1,    41,    -1,    -1,    44,    45,    46,
      -1,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    58,    59,    -1,    61,    62,    63,    64,    65,    66,
      67,    68,    69,    70,    71,    72,    73,    -1,    75,    76,
      77,    78,    79,    -1,    81,    -1,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    -1,    94,    95,    96,
      97,    98,    -1,    -1,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
      -1,   118,   119,   120,   121,   122,   123,    -1,   125,    -1,
     127,   128,   129,   130,    -1,    -1,   133,   134,   135,   136,
     137,    -1,    -1,    -1,   141,   142,   143,    -1,   145,   146,
     147,    -1,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,   160,   161,    -1,   163,   164,   165,   166,
      -1,   168,    -1,   170,   171,    -1,   173,   174,   175,   176,
     177,   178,    -1,   180,    -1,    -1,    -1,   184,   185,    -1,
     187,    -1,   189,   190,   191,   192,   193,   194,   195,   196,
     197,   198,   199,   200,    -1,   202,   203,   204,   205,   206,
     207,   208,    -1,   210,   211,   212,   213,   214,   215,   216,
     217,   218,   219,    -1,   221,    -1,   223,   224,   225,   226,
     227,   228,    -1,   230,   231,   232,   233,   234,    -1,    -1,
     237,   238,   239,   240,    -1,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,    -1,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     287,   288,    -1,   290,   291,    -1,    -1,   294,   295,   296,
      -1,    -1,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,    -1,    -1,   316,
      -1,    -1,    -1,    -1,   321,   322,   323,   324,   325,   326,
     327,   328,   329,   330,    -1,   332,   333,   334,   335,   336,
      -1,    -1,   339,    -1,   341,   342,   343,   344,   345,   346,
     347,   348,    -1,   350,   351,   352,    -1,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,    -1,   365,   366,
     367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,    -1,    -1,   385,   386,
     387,   388,   389,   390,   391,   392,   393,    -1,   395,   396,
      -1,   398,   399,   400,    -1,    -1,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
     417,   418,    -1,   420,   421,    -1,   423,   424,   425,   426,
     427,   428,   429,    -1,   431,   432,    -1,    -1,    -1,   436,
     437,   438,   439,   440,   441,   442,   443,   444,   445,   446,
     447,   448,   449,    -1,    -1,   452,   453,   454,    -1,   456,
     457,   458,   459,    -1,   461,   462,   463,   464,   465,   466,
     467,    -1,   469,   470,   471,    -1,   473,   474,   475,   476,
      -1,    -1,    -1,   480,    -1,    -1,   483,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,   498,   499,   500,   501,   502,   503,   504,    -1,    -1,
      -1,    -1,    -1,    -1,   511,   512,   513,    -1,    -1,    -1,
      -1,   518,    -1,   520,    -1,    -1,    -1,    -1,    -1,   526,
     527,    -1,    -1,    -1,    -1,   532,   533,     3,     4,     5,
       6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      -1,    27,    28,    29,    30,    -1,    32,    33,    34,    -1,
      -1,    -1,    -1,    -1,    -1,    41,    -1,    -1,    44,    45,
      46,    -1,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    -1,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    -1,    75,
      76,    77,    78,    79,    -1,    81,    -1,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    -1,    94,    95,
      96,    97,    98,    -1,    -1,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,    -1,   118,   119,   120,   121,   122,   123,    -1,   125,
      -1,   127,   128,   129,   130,    -1,    -1,   133,   134,   135,
     136,   137,    -1,    -1,    -1,   141,   142,   143,    -1,   145,
     146,   147,    -1,   149,   150,   151,   152,   153,   154,   155,
     156,   157,   158,   159,   160,   161,    -1,   163,   164,   165,
     166,    -1,   168,    -1,   170,   171,    -1,   173,   174,   175,
     176,   177,   178,    -1,   180,    -1,    -1,    -1,   184,   185,
      -1,   187,    -1,   189,   190,   191,   192,   193,   194,   195,
     196,   197,   198,   199,   200,    -1,   202,   203,   204,   205,
     206,   207,   208,    -1,   210,   211,   212,   213,   214,   215,
     216,   217,   218,   219,    -1,   221,    -1,   223,   224,   225,
     226,   227,   228,    -1,   230,   231,   232,   233,   234,    -1,
      -1,   237,   238,   239,   240,    -1,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,    -1,
     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
     286,   287,   288,    -1,   290,   291,    -1,    -1,   294,   295,
     296,    -1,    -1,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,    -1,    -1,
     316,    -1,    -1,    -1,    -1,   321,   322,   323,   324,   325,
     326,   327,   328,   329,   330,    -1,   332,   333,   334,   335,
     336,    -1,    -1,   339,    -1,   341,   342,   343,   344,   345,
     346,   347,   348,    -1,   350,   351,   352,    -1,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,    -1,   365,
     366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,    -1,    -1,   385,
     386,   387,   388,   389,   390,   391,   392,   393,    -1,   395,
     396,    -1,   398,   399,   400,    -1,    -1,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,   417,   418,    -1,   420,   421,    -1,   423,   424,   425,
     426,   427,   428,   429,    -1,   431,   432,    -1,    -1,    -1,
     436,   437,   438,   439,   440,   441,   442,   443,   444,   445,
     446,   447,   448,   449,    -1,    -1,   452,   453,   454,    -1,
     456,   457,   458,   459,    -1,   461,   462,   463,   464,   465,
     466,   467,    -1,   469,   470,   471,    -1,   473,   474,   475,
     476,    -1,    -1,    -1,   480,    -1,    -1,   483,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,   498,   499,   500,   501,   502,   503,   504,    -1,
      -1,    -1,    -1,    -1,    -1,   511,   512,   513,    -1,    -1,
      -1,    -1,   518,    -1,   520,    -1,    -1,    -1,    -1,    -1,
     526,   527,    -1,    -1,    -1,    -1,   532,   533,     3,     4,
       5,     6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,
      25,    -1,    27,    28,    29,    30,    -1,    32,    33,    34,
      -1,    -1,    -1,    -1,    -1,    -1,    41,    -1,    -1,    44,
      45,    46,    -1,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    -1,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    -1,
      75,    76,    77,    78,    79,    -1,    81,    -1,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    -1,    94,
      95,    96,    97,    98,    -1,    -1,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,    -1,   118,   119,   120,   121,   122,   123,    -1,
     125,    -1,   127,   128,   129,   130,    -1,    -1,   133,   134,
     135,   136,   137,    -1,    -1,    -1,   141,   142,   143,    -1,
     145,   146,   147,    -1,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   161,    -1,   163,   164,
     165,   166,    -1,   168,    -1,   170,   171,    -1,   173,   174,
     175,   176,   177,   178,    -1,   180,    -1,    -1,    -1,   184,
     185,    -1,   187,    -1,   189,   190,   191,   192,   193,   194,
     195,   196,   197,   198,   199,   200,    -1,   202,   203,   204,
     205,   206,   207,   208,    -1,   210,   211,   212,   213,   214,
     215,   216,   217,   218,   219,    -1,   221,    -1,   223,   224,
     225,   226,   227,   228,    -1,   230,   231,   232,   233,   234,
      -1,    -1,   237,   238,   239,   240,    -1,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
      -1,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,    -1,   290,   291,    -1,    -1,   294,
     295,   296,    -1,    -1,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,    -1,
      -1,   316,    -1,    -1,    -1,    -1,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,    -1,   332,   333,   334,
     335,   336,    -1,    -1,   339,    -1,   341,   342,   343,   344,
     345,   346,   347,   348,    -1,   350,   351,   352,    -1,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,    -1,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,    -1,    -1,
     385,   386,   387,   388,   389,   390,   391,   392,   393,    -1,
     395,   396,    -1,   398,   399,   400,    -1,    -1,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,    -1,   420,   421,    -1,   423,   424,
     425,   426,   427,   428,   429,    -1,   431,   432,    -1,    -1,
      -1,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,    -1,    -1,   452,   453,   454,
      -1,   456,   457,   458,   459,    -1,   461,   462,   463,   464,
     465,   466,   467,    -1,   469,   470,   471,    -1,   473,   474,
     475,   476,    -1,    -1,    -1,   480,    -1,    -1,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
      -1,    -1,    -1,    -1,    -1,    -1,   511,   512,   513,    -1,
      -1,    -1,    -1,   518,    -1,   520,    -1,    -1,    -1,    -1,
      -1,   526,   527,    -1,    -1,    -1,    -1,   532,   533,     3,
       4,     5,     6,     7,     8,     9,    10,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,
      24,    25,    -1,    27,    28,    29,    30,    -1,    32,    33,
      34,    -1,    -1,    -1,    -1,    -1,    -1,    41,    -1,    -1,
      44,    45,    46,    -1,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    58,    59,    -1,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
      -1,    75,    76,    77,    78,    79,    -1,    81,    -1,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    -1,
      94,    95,    96,    97,    98,    -1,    -1,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,    -1,   118,   119,   120,   121,   122,   123,
      -1,   125,    -1,   127,   128,   129,   130,    -1,    -1,   133,
     134,   135,   136,   137,    -1,    -1,    -1,   141,   142,   143,
      -1,   145,   146,   147,    -1,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,   159,   160,   161,    -1,   163,
     164,   165,   166,    -1,   168,    -1,   170,   171,    -1,   173,
     174,   175,   176,   177,   178,    -1,   180,    -1,    -1,    -1,
     184,   185,    -1,   187,    -1,   189,   190,   191,   192,   193,
     194,   195,   196,   197,   198,   199,   200,    -1,   202,   203,
     204,   205,   206,   207,   208,    -1,   210,   211,   212,   213,
     214,   215,   216,   217,   218,   219,    -1,   221,    -1,   223,
     224,   225,   226,   227,   228,    -1,   230,   231,   232,   233,
     234,    -1,    -1,   237,   238,   239,   240,    -1,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,    -1,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,    -1,   290,   291,    -1,    -1,
     294,   295,   296,    -1,    -1,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
      -1,    -1,   316,    -1,    -1,    -1,    -1,   321,   322,   323,
     324,   325,   326,   327,   328,   329,   330,    -1,   332,   333,
     334,   335,   336,    -1,    -1,   339,    -1,   341,   342,   343,
     344,   345,   346,   347,   348,    -1,   350,   351,   352,    -1,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
      -1,   365,   366,   367,   368,   369,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,    -1,
      -1,   385,   386,   387,   388,   389,   390,   391,   392,   393,
      -1,   395,   396,    -1,   398,   399,   400,    -1,    -1,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,   417,   418,    -1,   420,   421,    -1,   423,
     424,   425,   426,   427,   428,   429,    -1,   431,   432,    -1,
      -1,    -1,   436,   437,   438,   439,   440,   441,   442,   443,
     444,   445,   446,   447,   448,   449,    -1,    -1,   452,   453,
     454,    -1,   456,   457,   458,   459,    -1,   461,   462,   463,
     464,   465,   466,   467,    -1,   469,   470,   471,    -1,   473,
     474,   475,   476,    -1,    -1,    -1,   480,    -1,    -1,   483,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,   499,   500,   501,   502,   503,
     504,    -1,    -1,    -1,    -1,    -1,    -1,   511,   512,   513,
      -1,    -1,    -1,    -1,   518,    -1,   520,    -1,    -1,    -1,
      -1,    -1,   526,   527,    -1,    -1,    -1,    -1,   532,   533,
       3,     4,     5,     6,     7,     8,     9,    10,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,
      23,    24,    25,    -1,    27,    28,    29,    30,    -1,    32,
      33,    34,    -1,    -1,    -1,    -1,    -1,    -1,    41,    -1,
      -1,    44,    45,    46,    -1,    48,    49,    50,    51,    52,
      53,    54,    55,    56,    57,    58,    59,    -1,    61,    62,
      63,    64,    65,    66,    67,    68,    69,    70,    71,    72,
      73,    -1,    75,    76,    77,    78,    79,    -1,    81,    -1,
      83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      -1,    94,    95,    96,    97,    98,    -1,    -1,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,    -1,   118,   119,   120,   121,   122,
     123,    -1,   125,    -1,   127,   128,   129,   130,    -1,    -1,
     133,   134,   135,   136,   137,    -1,    -1,    -1,   141,   142,
     143,    -1,   145,   146,   147,    -1,   149,   150,   151,   152,
     153,   154,   155,   156,   157,   158,   159,   160,   161,    -1,
     163,   164,   165,   166,    -1,   168,    -1,   170,   171,    -1,
     173,   174,   175,   176,   177,   178,    -1,   180,    -1,    -1,
      -1,   184,   185,    -1,   187,    -1,   189,   190,   191,   192,
     193,   194,   195,   196,   197,   198,   199,   200,    -1,   202,
     203,   204,   205,   206,   207,   208,    -1,   210,   211,   212,
     213,   214,   215,   216,   217,   218,   219,    -1,   221,    -1,
     223,   224,   225,   226,   227,   228,    -1,   230,   231,   232,
     233,   234,    -1,    -1,   237,   238,   239,   240,    -1,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,    -1,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,    -1,   290,   291,    -1,
      -1,   294,   295,   296,    -1,    -1,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,    -1,    -1,   316,    -1,    -1,    -1,    -1,   321,   322,
     323,   324,   325,   326,   327,   328,   329,   330,    -1,   332,
     333,   334,   335,   336,    -1,    -1,   339,    -1,   341,   342,
     343,   344,   345,   346,   347,   348,    -1,   350,   351,   352,
      -1,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,    -1,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
      -1,    -1,   385,   386,   387,   388,   389,   390,   391,   392,
     393,    -1,   395,   396,    -1,   398,   399,   400,    -1,    -1,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,   417,   418,    -1,   420,   421,    -1,
     423,   424,   425,   426,   427,   428,   429,    -1,   431,   432,
      -1,    -1,    -1,   436,   437,   438,   439,   440,   441,   442,
     443,   444,   445,   446,   447,   448,   449,    -1,    -1,   452,
     453,   454,    -1,   456,   457,   458,   459,    -1,   461,   462,
     463,   464,   465,   466,   467,    -1,   469,   470,   471,    -1,
     473,   474,   475,   476,    -1,    -1,    -1,   480,    -1,    -1,
     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   500,   501,   502,
     503,   504,    -1,    -1,    -1,    -1,    -1,    -1,   511,   512,
     513,    -1,    -1,    -1,    -1,   518,    -1,   520,    -1,    -1,
      -1,    -1,    -1,   526,   527,    -1,    -1,    -1,    -1,   532,
     533,     3,     4,     5,     6,     7,    -1,     9,    10,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    -1,    27,    28,    29,    30,    -1,
      32,    33,    34,    -1,    -1,    -1,    -1,    -1,    -1,    41,
      -1,    -1,    44,    45,    46,    -1,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    58,    59,    -1,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
      72,    73,    -1,    75,    76,    77,    78,    79,    -1,    81,
      -1,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    -1,    94,    95,    96,    97,    98,    -1,    -1,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,    -1,   116,    -1,   118,   119,   120,   121,
     122,   123,    -1,   125,    -1,   127,   128,   129,   130,    -1,
      -1,   133,   134,   135,   136,   137,    -1,    -1,    -1,   141,
     142,   143,    -1,   145,   146,   147,    -1,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,   160,   161,
      -1,   163,   164,   165,   166,    -1,   168,    -1,   170,   171,
      -1,   173,   174,   175,   176,   177,   178,    -1,   180,    -1,
      -1,    -1,   184,   185,    -1,   187,    -1,   189,   190,   191,
     192,   193,   194,   195,   196,   197,   198,   199,   200,    -1,
     202,   203,   204,   205,   206,   207,   208,    -1,   210,   211,
     212,   213,   214,   215,   216,   217,   218,   219,    -1,   221,
      -1,   223,   224,   225,   226,   227,   228,    -1,   230,   231,
     232,   233,   234,    -1,    -1,   237,   238,   239,   240,    -1,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,    -1,   276,   277,   278,   279,   280,   281,
     282,   283,   284,   285,   286,   287,   288,    -1,   290,   291,
      -1,    -1,   294,   295,   296,    -1,    -1,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,    -1,    -1,   316,    -1,    -1,    -1,    -1,   321,
     322,   323,   324,   325,   326,   327,   328,   329,   330,    -1,
     332,   333,   334,   335,   336,    -1,    -1,   339,    -1,   341,
     342,   343,   344,   345,   346,   347,   348,    -1,   350,   351,
     352,    -1,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,    -1,   365,   366,   367,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,    -1,    -1,   385,   386,   387,   388,   389,   390,   391,
     392,   393,    -1,   395,   396,    -1,   398,   399,   400,    -1,
      -1,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,   417,   418,    -1,   420,   421,
      -1,   423,   424,   425,   426,   427,   428,   429,    -1,   431,
     432,    -1,    -1,    -1,   436,   437,   438,   439,   440,   441,
     442,   443,   444,   445,   446,   447,   448,   449,    -1,    -1,
     452,   453,   454,    -1,   456,   457,   458,   459,    -1,   461,
     462,   463,   464,   465,   466,   467,    -1,   469,   470,   471,
      -1,   473,   474,   475,   476,    -1,    -1,    -1,   480,    -1,
      -1,   483,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,   498,   499,   500,   501,
     502,   503,   504,    -1,    -1,    -1,    -1,    -1,    -1,   511,
     512,    -1,    -1,    -1,    -1,    -1,   518,    -1,   520,    -1,
      -1,    -1,    -1,    -1,   526,   527,    -1,    -1,    -1,    -1,
     532,   533,     3,     4,     5,     6,     7,     8,     9,    10,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    -1,    27,    28,    29,    30,
      -1,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,    -1,
      41,    -1,    -1,    44,    45,    46,    -1,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    58,    59,    -1,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    72,    73,    -1,    75,    76,    77,    78,    79,    -1,
      81,    -1,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    -1,    94,    95,    96,    97,    98,    -1,    -1,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,    -1,   116,    -1,   118,   119,   120,
     121,   122,   123,    -1,   125,    -1,   127,   128,   129,   130,
      -1,    -1,   133,   134,   135,   136,   137,    -1,    -1,    -1,
     141,   142,   143,    -1,   145,   146,   147,    -1,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
     161,    -1,   163,   164,   165,   166,    -1,   168,    -1,   170,
     171,    -1,   173,   174,   175,   176,   177,   178,    -1,   180,
      -1,    -1,    -1,   184,   185,    -1,   187,    -1,   189,   190,
     191,   192,   193,   194,   195,   196,   197,   198,   199,   200,
      -1,   202,   203,   204,   205,   206,   207,   208,    -1,   210,
     211,   212,   213,   214,   215,   216,   217,   218,   219,    -1,
     221,    -1,   223,   224,   225,   226,   227,   228,    -1,   230,
     231,   232,   233,   234,    -1,    -1,   237,   238,   239,   240,
      -1,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,    -1,   276,    -1,   278,   279,   280,
     281,   282,   283,   284,   285,   286,   287,   288,    -1,   290,
     291,    -1,    -1,   294,   295,   296,    -1,    -1,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,    -1,    -1,   316,    -1,    -1,    -1,    -1,
     321,   322,   323,   324,   325,   326,   327,   328,   329,   330,
      -1,   332,   333,   334,   335,   336,    -1,    -1,   339,    -1,
     341,   342,   343,   344,   345,   346,   347,   348,    -1,   350,
     351,   352,    -1,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,    -1,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,    -1,    -1,   385,   386,   387,   388,   389,   390,
     391,   392,   393,    -1,   395,   396,    -1,   398,   399,   400,
      -1,    -1,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,   417,   418,    -1,   420,
     421,    -1,   423,   424,   425,   426,   427,   428,   429,    -1,
     431,   432,    -1,    -1,    -1,   436,   437,   438,   439,   440,
     441,   442,   443,   444,   445,   446,   447,   448,   449,    -1,
      -1,   452,   453,   454,    -1,   456,   457,   458,   459,    -1,
     461,   462,   463,   464,   465,   466,   467,    -1,   469,   470,
     471,    -1,   473,   474,   475,   476,    -1,    -1,    -1,   480,
      -1,    -1,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,   499,   500,
     501,   502,   503,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     511,   512,    -1,    -1,    -1,    -1,    -1,   518,    -1,   520,
      -1,    -1,    -1,    -1,    -1,   526,   527,    -1,    -1,    -1,
      -1,   532,   533,     3,     4,     5,     6,     7,     8,     9,
      10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    22,    23,    24,    25,    -1,    27,    28,    29,
      30,    -1,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,
      -1,    41,    -1,    -1,    44,    45,    46,    -1,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
      -1,    61,    62,    63,    64,    65,    66,    67,    68,    69,
      70,    71,    72,    73,    -1,    75,    76,    77,    78,    79,
      -1,    81,    -1,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    -1,    94,    95,    96,    97,    98,    -1,
      -1,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,    -1,   118,   119,
     120,   121,   122,   123,    -1,   125,    -1,   127,   128,   129,
     130,    -1,    -1,   133,   134,   135,   136,   137,    -1,    -1,
      -1,   141,   142,   143,    -1,   145,   146,   147,    -1,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
     160,   161,    -1,   163,   164,   165,   166,    -1,   168,    -1,
     170,   171,    -1,   173,   174,   175,   176,   177,   178,    -1,
     180,    -1,    -1,    -1,   184,   185,    -1,   187,    -1,   189,
     190,   191,   192,   193,   194,   195,   196,   197,   198,   199,
     200,    -1,   202,   203,   204,   205,   206,   207,   208,    -1,
     210,   211,   212,   213,   214,   215,   216,   217,   218,   219,
      -1,   221,    -1,   223,    -1,    -1,   226,   227,   228,    -1,
     230,   231,   232,   233,   234,    -1,    -1,   237,   238,   239,
     240,    -1,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,    -1,   276,    -1,   278,   279,
      -1,   281,   282,   283,   284,   285,   286,   287,   288,    -1,
     290,   291,    -1,    -1,   294,   295,   296,    -1,    -1,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,    -1,    -1,   316,    -1,    -1,    -1,
      -1,   321,   322,   323,   324,   325,   326,   327,   328,   329,
     330,    -1,   332,   333,   334,   335,   336,    -1,    -1,   339,
      -1,   341,   342,   343,   344,   345,   346,   347,   348,    -1,
     350,   351,   352,    -1,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,    -1,   365,   366,   367,   368,   369,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,    -1,    -1,   385,   386,   387,   388,   389,
     390,   391,   392,   393,    -1,   395,   396,    -1,   398,   399,
     400,    -1,    -1,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,   417,   418,    -1,
     420,   421,    -1,   423,   424,   425,   426,   427,   428,   429,
      -1,   431,   432,    -1,    -1,    -1,   436,   437,   438,   439,
     440,   441,   442,   443,   444,   445,   446,   447,   448,   449,
      -1,    -1,   452,   453,   454,    -1,   456,   457,   458,   459,
      -1,   461,   462,   463,   464,   465,   466,   467,    -1,   469,
     470,   471,    -1,   473,   474,   475,   476,    -1,    -1,    -1,
     480,    -1,    -1,   483,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,   498,   499,
     500,   501,   502,   503,   504,    -1,    -1,    -1,    -1,    -1,
      -1,   511,   512,   513,    -1,    -1,    -1,    -1,   518,    -1,
     520,    -1,    -1,    -1,    -1,    -1,   526,   527,    -1,    -1,
      -1,    -1,   532,   533,     3,     4,     5,     6,     7,    -1,
       9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    22,    23,    24,    25,    -1,    27,    28,
      29,    30,    -1,    32,    33,    34,    -1,    -1,    -1,    -1,
      -1,    -1,    41,    -1,    -1,    44,    45,    46,    -1,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    58,
      59,    -1,    61,    62,    63,    64,    65,    66,    67,    68,
      69,    70,    71,    72,    73,    -1,    75,    76,    77,    78,
      79,    -1,    81,    -1,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    -1,    94,    95,    96,    97,    98,
      -1,    -1,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,    -1,   116,    -1,   118,
     119,   120,   121,   122,   123,    -1,   125,    -1,   127,   128,
     129,   130,    -1,    -1,   133,   134,   135,   136,   137,    -1,
      -1,    -1,   141,   142,   143,    -1,   145,   146,   147,    -1,
     149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
     159,   160,   161,    -1,   163,   164,   165,   166,    -1,   168,
      -1,   170,   171,    -1,   173,   174,   175,   176,   177,   178,
      -1,   180,    -1,    -1,    -1,   184,   185,    -1,   187,    -1,
     189,   190,   191,   192,   193,   194,   195,   196,   197,   198,
     199,   200,    -1,   202,   203,   204,   205,   206,   207,   208,
      -1,   210,   211,   212,   213,   214,   215,   216,   217,   218,
     219,    -1,   221,    -1,   223,   224,   225,   226,   227,   228,
      -1,   230,   231,   232,   233,   234,    -1,    -1,   237,   238,
     239,   240,    -1,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,    -1,   276,    -1,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
      -1,   290,   291,    -1,    -1,   294,   295,   296,    -1,    -1,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,    -1,    -1,   316,    -1,    -1,
      -1,    -1,   321,   322,   323,   324,   325,   326,   327,   328,
     329,   330,    -1,   332,   333,   334,   335,   336,    -1,    -1,
     339,    -1,   341,   342,   343,   344,   345,   346,   347,   348,
      -1,   350,   351,   352,    -1,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,    -1,   365,   366,   367,   368,
     369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,    -1,    -1,   385,   386,   387,   388,
     389,   390,   391,   392,   393,    -1,   395,   396,    -1,   398,
     399,   400,    -1,    -1,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,   417,   418,
      -1,   420,   421,    -1,   423,   424,   425,   426,   427,   428,
     429,    -1,   431,   432,    -1,    -1,    -1,   436,   437,   438,
     439,   440,   441,   442,   443,   444,   445,   446,   447,   448,
     449,    -1,    -1,   452,   453,   454,    -1,   456,   457,   458,
     459,    -1,   461,   462,   463,   464,   465,   466,   467,    -1,
     469,   470,   471,    -1,   473,   474,   475,   476,    -1,    -1,
      -1,   480,    -1,    -1,   483,   484,   485,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
     499,   500,   501,   502,   503,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   511,   512,    -1,    -1,    -1,    -1,    -1,   518,
      -1,   520,    -1,    -1,    -1,    -1,    -1,   526,   527,    -1,
      -1,    -1,    -1,   532,   533,     3,     4,     5,     6,     7,
       8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    -1,    27,
      28,    29,    30,    -1,    32,    33,    34,    -1,    -1,    -1,
      -1,    -1,    -1,    41,    -1,    -1,    44,    45,    46,    -1,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      58,    59,    -1,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    72,    73,    -1,    75,    76,    77,
      78,    79,    -1,    81,    -1,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    -1,    94,    95,    96,    97,
      98,    -1,    -1,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,    -1,   116,    -1,
     118,   119,   120,   121,   122,   123,    -1,   125,    -1,   127,
     128,   129,   130,    -1,    -1,   133,   134,   135,   136,   137,
      -1,    -1,    -1,   141,   142,   143,    -1,   145,   146,   147,
      -1,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,   159,   160,   161,    -1,   163,   164,   165,   166,    -1,
     168,    -1,   170,   171,    -1,   173,   174,   175,   176,   177,
     178,    -1,   180,    -1,    -1,    -1,   184,   185,    -1,   187,
      -1,   189,   190,   191,   192,   193,   194,   195,   196,   197,
     198,   199,   200,    -1,   202,   203,   204,   205,   206,   207,
     208,    -1,   210,   211,   212,   213,   214,   215,   216,   217,
     218,   219,    -1,   221,    -1,   223,    -1,   225,   226,   227,
     228,    -1,   230,   231,   232,   233,   234,    -1,    -1,   237,
     238,   239,   240,    -1,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,    -1,   276,    -1,
     278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
     288,    -1,   290,   291,    -1,    -1,   294,   295,   296,    -1,
      -1,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,    -1,    -1,   316,    -1,
      -1,    -1,    -1,   321,   322,   323,   324,   325,   326,   327,
     328,   329,   330,    -1,   332,   333,   334,   335,   336,    -1,
      -1,   339,    -1,   341,   342,   343,   344,   345,   346,   347,
     348,    -1,   350,   351,   352,    -1,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,    -1,   365,   366,   367,
     368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,    -1,    -1,   385,   386,   387,
     388,   389,   390,   391,   392,   393,    -1,   395,   396,    -1,
     398,   399,   400,    -1,    -1,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,   417,
     418,    -1,   420,   421,    -1,   423,   424,   425,   426,   427,
     428,   429,    -1,   431,   432,    -1,    -1,    -1,   436,   437,
     438,   439,   440,   441,   442,   443,   444,   445,   446,   447,
     448,   449,    -1,    -1,   452,   453,   454,    -1,   456,   457,
     458,   459,    -1,   461,   462,   463,   464,   465,   466,   467,
      -1,   469,   470,   471,    -1,   473,   474,   475,   476,    -1,
      -1,    -1,   480,    -1,    -1,   483,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,   499,   500,   501,   502,   503,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   511,   512,    -1,    -1,    -1,    -1,    -1,
     518,    -1,   520,    -1,    -1,    -1,    -1,    -1,   526,   527,
      -1,    -1,    -1,    -1,   532,   533,     3,     4,     5,     6,
       7,    -1,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    -1,
      27,    28,    29,    30,    -1,    32,    33,    34,    -1,    -1,
      -1,    -1,    -1,    -1,    41,    -1,    -1,    44,    45,    46,
      -1,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    58,    59,    -1,    61,    62,    63,    64,    65,    66,
      67,    68,    69,    70,    71,    72,    73,    -1,    75,    76,
      77,    78,    79,    -1,    81,    -1,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    -1,    94,    95,    96,
      97,    98,    -1,    -1,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,    -1,   116,
      -1,   118,   119,   120,   121,   122,   123,    -1,   125,    -1,
     127,   128,   129,   130,    -1,    -1,   133,   134,   135,   136,
     137,    -1,    -1,    -1,   141,   142,   143,    -1,   145,   146,
     147,    -1,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,   160,   161,    -1,   163,   164,   165,   166,
      -1,   168,    -1,   170,   171,    -1,   173,   174,   175,   176,
     177,   178,    -1,   180,    -1,    -1,    -1,   184,   185,    -1,
     187,    -1,   189,   190,   191,   192,   193,   194,   195,   196,
     197,   198,   199,   200,    -1,   202,   203,   204,   205,   206,
     207,   208,    -1,   210,   211,   212,   213,   214,   215,   216,
     217,   218,   219,    -1,   221,    -1,   223,   224,   225,   226,
     227,   228,    -1,   230,   231,   232,   233,   234,    -1,    -1,
     237,   238,   239,   240,    -1,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,    -1,   276,
      -1,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     287,   288,    -1,   290,   291,    -1,    -1,   294,   295,   296,
      -1,    -1,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,    -1,    -1,   316,
      -1,    -1,    -1,    -1,   321,   322,   323,   324,   325,   326,
     327,   328,   329,   330,    -1,   332,   333,   334,   335,   336,
      -1,    -1,   339,    -1,   341,   342,   343,   344,   345,   346,
     347,   348,    -1,   350,   351,   352,    -1,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,    -1,   365,   366,
     367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,    -1,    -1,   385,   386,
     387,   388,   389,   390,   391,   392,   393,    -1,   395,   396,
      -1,   398,   399,   400,    -1,    -1,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
     417,   418,    -1,   420,   421,    -1,   423,   424,   425,   426,
     427,   428,   429,    -1,   431,   432,    -1,    -1,    -1,   436,
     437,   438,   439,   440,   441,   442,   443,   444,   445,   446,
     447,   448,   449,    -1,    -1,   452,   453,   454,    -1,   456,
     457,   458,   459,    -1,   461,   462,   463,   464,   465,   466,
     467,    -1,   469,   470,   471,    -1,   473,   474,   475,   476,
      -1,    -1,    -1,   480,    -1,    -1,   483,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,   498,   499,   500,   501,   502,   503,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   518,    -1,   520,    -1,    -1,    -1,    -1,    -1,   526,
     527,    -1,    -1,    -1,    -1,   532,   533,     3,     4,     5,
       6,     7,    -1,     9,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      -1,    27,    28,    29,    30,    -1,    32,    33,    34,    -1,
      -1,    -1,    -1,    -1,    -1,    41,    -1,    -1,    44,    45,
      46,    -1,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    -1,    61,    62,    63,    64,    65,
      66,    67,    -1,    69,    70,    71,    72,    73,    -1,    75,
      76,    77,    78,    79,    -1,    81,    -1,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    -1,    94,    95,
      96,    97,    98,    -1,    -1,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,    -1,
     116,    -1,   118,   119,   120,   121,   122,   123,    -1,   125,
      -1,   127,   128,   129,   130,    -1,    -1,   133,   134,   135,
     136,   137,    -1,    -1,    -1,   141,   142,   143,    -1,   145,
     146,   147,    -1,   149,   150,   151,   152,   153,   154,   155,
     156,   157,   158,   159,   160,   161,    -1,   163,   164,   165,
     166,    -1,   168,    -1,   170,   171,    -1,   173,   174,   175,
     176,   177,   178,    -1,   180,    -1,    -1,   183,   184,   185,
      -1,   187,    -1,   189,   190,   191,   192,   193,   194,   195,
     196,   197,   198,   199,   200,    -1,   202,   203,   204,   205,
     206,   207,   208,    -1,   210,   211,   212,   213,   214,   215,
     216,   217,   218,   219,    -1,   221,    -1,   223,   224,   225,
     226,   227,   228,    -1,   230,   231,   232,   233,   234,    -1,
      -1,   237,   238,   239,   240,    -1,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,    -1,
     276,    -1,   278,   279,   280,   281,   282,   283,   284,   285,
     286,   287,   288,    -1,   290,   291,    -1,    -1,   294,   295,
     296,    -1,    -1,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,    -1,    -1,
     316,    -1,    -1,    -1,    -1,   321,   322,   323,   324,   325,
     326,   327,   328,   329,   330,    -1,   332,   333,   334,   335,
     336,    -1,    -1,   339,    -1,   341,   342,   343,   344,   345,
     346,   347,   348,    -1,   350,   351,   352,    -1,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,    -1,   365,
     366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,    -1,    -1,   385,
     386,   387,   388,   389,   390,   391,   392,   393,    -1,   395,
     396,    -1,   398,   399,   400,    -1,    -1,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,   417,   418,    -1,   420,   421,    -1,   423,   424,   425,
     426,   427,   428,   429,    -1,   431,   432,    -1,    -1,    -1,
     436,   437,   438,   439,   440,   441,   442,   443,   444,   445,
     446,   447,   448,   449,    -1,    -1,   452,   453,   454,    -1,
     456,   457,   458,   459,    -1,   461,   462,   463,   464,   465,
     466,   467,    -1,   469,   470,   471,    -1,   473,   474,   475,
     476,    -1,    -1,    -1,   480,    -1,    -1,   483,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,   498,   499,   500,   501,   502,   503,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   518,    -1,   520,     3,     4,     5,     6,     7,
       8,     9,    10,    -1,    -1,    -1,   532,   533,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    -1,    27,
      28,    29,    30,    -1,    32,    33,    34,    -1,    -1,    -1,
      -1,    -1,    -1,    41,    -1,    -1,    44,    45,    46,    -1,
      48,    49,    50,    51,    52,    53,    54,    -1,    56,    57,
      58,    59,    -1,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    72,    73,    -1,    75,    76,    77,
      78,    79,    -1,    81,    -1,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    -1,    94,    95,    96,    97,
      98,    -1,    -1,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,    -1,
     118,   119,   120,   121,   122,   123,    -1,   125,    -1,   127,
     128,   129,   130,    -1,    -1,   133,   134,   135,   136,   137,
      -1,    -1,    -1,   141,   142,   143,    -1,   145,    -1,   147,
      -1,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,   159,   160,   161,    -1,   163,   164,   165,   166,    -1,
     168,    -1,   170,   171,    -1,   173,   174,   175,   176,    -1,
     178,    -1,   180,    -1,    -1,    -1,   184,   185,    -1,   187,
      -1,   189,   190,   191,   192,   193,   194,   195,    -1,   197,
     198,   199,   200,    -1,   202,   203,   204,   205,   206,   207,
     208,    -1,   210,   211,   212,   213,   214,   215,   216,   217,
     218,   219,    -1,   221,    -1,   223,    -1,    -1,   226,   227,
     228,    -1,   230,   231,   232,   233,   234,    -1,    -1,   237,
     238,   239,    -1,    -1,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,    -1,   276,    -1,
     278,   279,    -1,   281,   282,   283,   284,   285,   286,   287,
     288,    -1,   290,   291,    -1,    -1,   294,   295,   296,    -1,
      -1,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,    -1,    -1,   316,    -1,
      -1,    -1,    -1,   321,   322,   323,   324,   325,   326,   327,
     328,   329,   330,    -1,   332,   333,   334,   335,   336,    -1,
      -1,   339,    -1,   341,   342,   343,   344,   345,   346,   347,
     348,    -1,   350,   351,   352,    -1,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,    -1,   365,   366,   367,
     368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,    -1,    -1,   385,   386,   387,
     388,   389,   390,   391,   392,   393,    -1,   395,    -1,    -1,
     398,   399,   400,    -1,    -1,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,   417,
     418,    -1,   420,   421,    -1,   423,   424,   425,   426,   427,
     428,   429,    -1,   431,   432,    -1,    -1,    -1,   436,   437,
     438,   439,   440,   441,   442,   443,   444,   445,   446,   447,
     448,   449,    -1,    -1,   452,   453,   454,    -1,   456,   457,
     458,   459,    -1,   461,   462,   463,   464,   465,   466,   467,
      -1,   469,   470,   471,    -1,   473,   474,   475,   476,    -1,
      -1,    -1,   480,    -1,    -1,   483,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,   499,   500,   501,   502,   503,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   511,   512,   513,    -1,    -1,    -1,    -1,
     518,    -1,   520,    -1,    -1,    -1,    -1,    -1,   526,   527,
      -1,    -1,    -1,    -1,   532,   533,     3,     4,     5,     6,
       7,    -1,     9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    -1,
      27,    28,    29,    30,    -1,    32,    33,    34,    -1,    -1,
      -1,    -1,    -1,    -1,    41,    -1,    -1,    44,    45,    46,
      -1,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    58,    59,    -1,    61,    62,    63,    64,    65,    66,
      67,    -1,    69,    70,    71,    72,    73,    -1,    75,    76,
      77,    78,    79,    -1,    81,    -1,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    -1,    94,    95,    96,
      97,    98,    -1,    -1,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,    -1,   116,
      -1,   118,   119,   120,   121,   122,   123,    -1,   125,    -1,
     127,   128,   129,   130,    -1,    -1,   133,   134,   135,   136,
     137,    -1,    -1,    -1,   141,   142,   143,    -1,   145,   146,
     147,    -1,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,   160,   161,    -1,   163,   164,   165,   166,
      -1,   168,    -1,   170,   171,    -1,   173,   174,   175,   176,
     177,   178,    -1,   180,    -1,    -1,    -1,   184,   185,    -1,
     187,    -1,   189,   190,   191,   192,   193,   194,   195,   196,
     197,   198,   199,   200,    -1,   202,   203,   204,   205,   206,
     207,   208,    -1,   210,   211,   212,   213,   214,   215,   216,
     217,   218,   219,    -1,   221,    -1,   223,   224,   225,   226,
     227,   228,    -1,   230,   231,   232,   233,   234,    -1,    -1,
     237,   238,   239,   240,    -1,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,    -1,   276,
      -1,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     287,   288,    -1,   290,   291,    -1,    -1,   294,   295,   296,
      -1,    -1,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,    -1,    -1,   316,
      -1,    -1,    -1,    -1,   321,   322,   323,   324,   325,   326,
     327,   328,   329,   330,    -1,   332,   333,   334,   335,   336,
      -1,    -1,   339,    -1,   341,   342,   343,   344,   345,   346,
     347,   348,    -1,   350,   351,   352,    -1,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,    -1,   365,   366,
     367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,    -1,    -1,   385,   386,
     387,   388,   389,   390,   391,   392,   393,    -1,   395,   396,
      -1,   398,   399,   400,    -1,    -1,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
     417,   418,    -1,   420,   421,    -1,   423,   424,   425,   426,
     427,   428,   429,    -1,   431,   432,    -1,    -1,    -1,   436,
     437,   438,   439,   440,   441,   442,   443,   444,   445,   446,
     447,   448,   449,    -1,    -1,   452,   453,   454,    -1,   456,
     457,   458,   459,    -1,   461,   462,   463,   464,   465,   466,
     467,    -1,   469,   470,   471,    -1,   473,   474,   475,   476,
      -1,    -1,    -1,   480,    -1,    -1,   483,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,   498,   499,   500,   501,   502,   503,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     3,    -1,
      -1,   518,    -1,   520,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   532,   533,    22,    23,    24,
      25,    -1,    27,    28,    29,    30,    -1,    32,    33,    34,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      45,    46,    -1,    48,    49,    50,    -1,    52,    53,    54,
      55,    56,    -1,    58,    59,    -1,    61,    62,    63,    64,
      65,    66,    -1,    -1,    69,    70,    71,    72,    73,    -1,
      75,    76,    77,    78,    79,    -1,    -1,    -1,    -1,    84,
      85,    86,    87,    88,    -1,    90,    91,    92,    -1,    94,
      95,    96,    97,    98,    -1,    -1,    -1,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
      -1,   116,    -1,   118,   119,   120,   121,   122,   123,    -1,
     125,    -1,   127,   128,   129,   130,    -1,    -1,   133,   134,
     135,   136,   137,    -1,    -1,    -1,   141,   142,   143,    -1,
     145,   146,   147,    -1,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,    -1,   161,    -1,   163,   164,
     165,   166,    -1,   168,    -1,   170,    -1,    -1,    -1,   174,
     175,   176,    -1,   178,    -1,   180,    -1,    -1,    -1,   184,
     185,    -1,   187,    -1,   189,   190,   191,   192,   193,   194,
     195,    -1,   197,   198,   199,   200,    -1,   202,   203,   204,
     205,   206,   207,   208,    -1,   210,    -1,   212,   213,   214,
     215,   216,   217,   218,   219,    -1,   221,    -1,   223,    -1,
      -1,   226,    -1,   228,    -1,   230,   231,   232,   233,   234,
      -1,    -1,   237,    -1,   239,    -1,    -1,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,    -1,   271,   272,   273,   274,
      -1,   276,    -1,   278,   279,    -1,   281,    -1,   283,   284,
     285,   286,   287,   288,    -1,   290,   291,    -1,    -1,   294,
     295,   296,    -1,    -1,   299,   300,    -1,   302,    -1,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,    -1,
      -1,   316,    -1,    -1,    -1,    -1,   321,   322,   323,    -1,
     325,   326,   327,   328,   329,   330,    -1,   332,   333,   334,
     335,   336,    -1,    -1,   339,    -1,   341,   342,   343,   344,
     345,   346,   347,   348,    -1,   350,   351,   352,    -1,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,    -1,
     365,   366,    -1,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,    -1,    -1,
     385,   386,   387,   388,   389,   390,   391,   392,   393,    -1,
     395,    -1,    -1,   398,   399,   400,    -1,    -1,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,    -1,   420,   421,    -1,   423,    -1,
     425,   426,   427,   428,   429,    -1,   431,   432,    -1,    -1,
      -1,   436,   437,   438,   439,   440,    -1,   442,   443,   444,
     445,   446,   447,   448,   449,    -1,    -1,   452,   453,   454,
      -1,   456,   457,   458,   459,    -1,   461,   462,   463,   464,
     465,   466,   467,    -1,   469,    -1,   471,    -1,   473,   474,
     475,   476,    -1,    -1,    -1,   480,    -1,    -1,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,    -1,
      -1,    -1,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   520,    -1,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,   530,    27,    28,    29,    30,
      -1,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    42,    -1,    -1,    45,    46,    -1,    48,    49,    50,
      -1,    52,    53,    54,    55,    56,    -1,    58,    59,    -1,
      61,    62,    63,    64,    65,    66,    -1,    -1,    69,    70,
      71,    72,    73,    -1,    75,    76,    77,    78,    79,    -1,
      -1,    -1,    83,    84,    85,    86,    87,    88,    -1,    90,
      91,    92,    -1,    94,    95,    96,    97,    98,    -1,    -1,
      -1,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,    -1,   116,    -1,   118,   119,   120,
     121,   122,   123,    -1,   125,    -1,   127,   128,   129,   130,
      -1,    -1,   133,   134,   135,   136,   137,    -1,    -1,    -1,
     141,   142,   143,    -1,   145,   146,   147,   148,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,    -1,
     161,   162,   163,   164,   165,   166,   167,   168,    -1,   170,
      -1,    -1,    -1,   174,   175,   176,    -1,   178,    -1,   180,
      -1,    -1,    -1,   184,   185,    -1,   187,    -1,   189,   190,
     191,   192,   193,   194,   195,    -1,   197,   198,   199,   200,
      -1,   202,   203,   204,   205,   206,   207,   208,    -1,   210,
      -1,   212,   213,   214,   215,   216,   217,   218,   219,   220,
     221,    -1,   223,    -1,    -1,   226,    -1,   228,    -1,   230,
     231,   232,   233,   234,    -1,    -1,   237,    -1,   239,    -1,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,    -1,
     271,   272,   273,   274,    -1,   276,    -1,   278,   279,    -1,
     281,    -1,   283,   284,   285,   286,   287,   288,   289,   290,
     291,    -1,    -1,   294,   295,   296,    -1,   298,   299,   300,
      -1,   302,    -1,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,    -1,    -1,   316,    -1,    -1,    -1,    -1,
     321,   322,   323,    -1,   325,   326,   327,   328,   329,   330,
      -1,   332,   333,   334,   335,   336,    -1,    -1,   339,    -1,
     341,   342,   343,   344,   345,   346,   347,   348,    -1,   350,
     351,   352,    -1,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,    -1,   365,   366,    -1,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,    -1,    -1,   385,   386,   387,   388,   389,   390,
     391,   392,   393,    -1,   395,    -1,    -1,   398,   399,   400,
      -1,    -1,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,   417,   418,    -1,   420,
     421,    -1,   423,    -1,   425,   426,   427,   428,   429,    -1,
     431,   432,    -1,    -1,    -1,   436,   437,   438,   439,   440,
      -1,   442,   443,   444,   445,   446,   447,   448,   449,   450,
      -1,   452,   453,   454,    -1,   456,   457,   458,   459,    -1,
     461,   462,   463,   464,   465,   466,   467,    -1,   469,    -1,
     471,    -1,   473,   474,   475,   476,    -1,    -1,    -1,   480,
      -1,    -1,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,   499,   500,
     501,   502,   503,     3,    -1,     5,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     521,    -1,    22,    23,    24,    25,    -1,    27,    28,    29,
      30,    -1,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    45,    46,    -1,    48,    49,
      50,    -1,    52,    53,    54,    55,    56,    -1,    58,    59,
      -1,    61,    62,    63,    64,    65,    66,    -1,    -1,    69,
      70,    71,    72,    73,    -1,    75,    76,    77,    78,    79,
      -1,    -1,    -1,    83,    84,    85,    86,    87,    88,    -1,
      90,    91,    92,    -1,    94,    95,    96,    97,    98,    -1,
      -1,    -1,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,    -1,   116,    -1,   118,   119,
     120,   121,   122,   123,    -1,   125,    -1,   127,   128,   129,
     130,    -1,    -1,   133,   134,   135,   136,   137,    -1,    -1,
      -1,   141,   142,   143,    -1,   145,   146,   147,    -1,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
      -1,   161,    -1,   163,   164,   165,   166,    -1,   168,    -1,
     170,    -1,    -1,    -1,   174,   175,   176,    -1,   178,    -1,
     180,    -1,    -1,    -1,   184,   185,    -1,   187,    -1,   189,
     190,   191,   192,   193,   194,   195,    -1,   197,   198,   199,
     200,    -1,   202,   203,   204,   205,   206,   207,   208,    -1,
     210,    -1,   212,   213,   214,   215,   216,   217,   218,   219,
      -1,   221,    -1,   223,    -1,    -1,   226,    -1,   228,    -1,
     230,   231,   232,   233,   234,    -1,    -1,   237,    -1,   239,
      -1,    -1,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
      -1,   271,   272,   273,   274,    -1,   276,    -1,   278,   279,
      -1,   281,    -1,   283,   284,   285,   286,   287,   288,    -1,
     290,   291,    -1,    -1,   294,   295,   296,    -1,    -1,   299,
     300,    -1,   302,    -1,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,    -1,    -1,   316,    -1,    -1,    -1,
      -1,   321,   322,   323,    -1,   325,   326,   327,   328,   329,
     330,    -1,   332,   333,   334,   335,   336,    -1,    -1,   339,
      -1,   341,   342,   343,   344,   345,   346,   347,   348,    -1,
     350,   351,   352,    -1,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,    -1,   365,   366,    -1,   368,   369,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,    -1,    -1,   385,   386,   387,   388,   389,
     390,   391,   392,   393,    -1,   395,    -1,    -1,   398,   399,
     400,    -1,    -1,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,   417,   418,    -1,
     420,   421,    -1,   423,    -1,   425,   426,   427,   428,   429,
      -1,   431,   432,    -1,    -1,    -1,   436,   437,   438,   439,
     440,    -1,   442,   443,   444,   445,   446,   447,   448,   449,
      -1,    -1,   452,   453,   454,    -1,   456,   457,   458,   459,
      -1,   461,   462,   463,   464,   465,   466,   467,    -1,   469,
      -1,   471,    -1,   473,   474,   475,   476,    -1,    -1,    -1,
     480,    -1,    -1,   483,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,   498,   499,
     500,   501,   502,   503,     3,    -1,     5,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     520,   521,    -1,    22,    23,    24,    25,    -1,    27,    28,
      29,    30,    -1,    32,    33,    34,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    44,    45,    46,    -1,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    58,
      59,    -1,    61,    62,    63,    64,    65,    66,    -1,    68,
      69,    70,    71,    72,    73,    -1,    75,    76,    77,    78,
      79,    -1,    81,    -1,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    -1,    94,    95,    96,    97,    98,
      -1,    -1,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,    -1,   116,    -1,   118,
     119,   120,   121,   122,   123,    -1,   125,    -1,   127,   128,
     129,   130,    -1,    -1,   133,   134,   135,   136,   137,    -1,
      -1,    -1,   141,   142,   143,    -1,   145,   146,   147,    -1,
     149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
     159,    -1,   161,    -1,   163,   164,   165,   166,    -1,   168,
      -1,   170,   171,   172,   173,   174,   175,   176,   177,   178,
      -1,   180,    -1,   182,    -1,   184,   185,    -1,   187,    -1,
     189,   190,   191,   192,   193,   194,   195,   196,   197,   198,
     199,   200,    -1,   202,   203,   204,   205,   206,   207,   208,
      -1,   210,   211,   212,   213,   214,   215,   216,   217,   218,
     219,    -1,   221,    -1,   223,   224,   225,   226,   227,   228,
      -1,   230,   231,   232,   233,   234,   235,    -1,   237,   238,
     239,   240,    -1,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,    -1,   276,    -1,   278,
     279,   280,   281,    -1,   283,   284,   285,   286,   287,   288,
      -1,   290,   291,    -1,   293,   294,   295,   296,    -1,    -1,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,    -1,    -1,   316,   317,   318,
     319,    -1,   321,   322,   323,   324,   325,   326,   327,   328,
     329,   330,    -1,   332,   333,   334,   335,   336,    -1,    -1,
     339,    -1,   341,   342,   343,   344,   345,   346,   347,   348,
      -1,   350,   351,   352,    -1,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,    -1,   365,   366,   367,   368,
     369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,    -1,   385,   386,   387,   388,
     389,   390,   391,   392,   393,    -1,   395,   396,    -1,   398,
     399,   400,    -1,    -1,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,   417,   418,
      -1,   420,   421,   422,   423,   424,   425,   426,   427,   428,
     429,    -1,   431,   432,    -1,    -1,    -1,   436,   437,   438,
     439,   440,    -1,   442,   443,   444,   445,   446,   447,   448,
     449,    -1,    -1,   452,   453,   454,   455,   456,   457,   458,
     459,    -1,   461,   462,   463,   464,   465,   466,   467,    -1,
     469,   470,   471,    -1,   473,   474,   475,   476,    -1,    -1,
      -1,   480,    -1,   482,   483,   484,   485,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
     499,   500,   501,   502,   503,     3,    -1,   506,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   520,    -1,    -1,    22,    23,    24,    25,    -1,    27,
      28,    29,    30,    -1,    32,    33,    34,    35,    36,    -1,
      38,    -1,    -1,    -1,    -1,    -1,    44,    45,    46,    -1,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      58,    59,    -1,    61,    62,    63,    64,    65,    66,    -1,
      -1,    69,    70,    71,    72,    73,    -1,    75,    76,    77,
      78,    79,    -1,    81,    -1,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    -1,    94,    95,    96,    97,
      98,    -1,    -1,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,    -1,   116,    -1,
     118,   119,   120,   121,   122,   123,    -1,   125,    -1,   127,
     128,   129,   130,    -1,    -1,   133,   134,   135,   136,   137,
      -1,    -1,    -1,   141,   142,   143,    -1,   145,   146,   147,
      -1,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,   159,    -1,   161,    -1,   163,   164,   165,   166,    -1,
     168,    -1,   170,   171,   172,   173,   174,   175,   176,   177,
     178,    -1,   180,    -1,    -1,    -1,   184,   185,    -1,   187,
      -1,   189,   190,   191,   192,   193,   194,   195,   196,   197,
     198,   199,   200,    -1,   202,   203,   204,   205,   206,   207,
     208,    -1,   210,   211,   212,   213,   214,   215,   216,   217,
     218,   219,    -1,   221,    -1,   223,   224,   225,   226,   227,
     228,    -1,   230,   231,   232,   233,   234,    -1,    -1,   237,
     238,   239,   240,    -1,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,    -1,   276,    -1,
     278,   279,   280,   281,    -1,   283,   284,   285,   286,   287,
     288,    -1,   290,   291,    -1,    -1,   294,   295,   296,    -1,
      -1,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,    -1,    -1,   316,   317,
     318,   319,    -1,   321,   322,   323,   324,   325,   326,   327,
     328,   329,   330,    -1,   332,   333,   334,   335,   336,    -1,
      -1,   339,    -1,   341,   342,   343,   344,   345,   346,   347,
     348,    -1,   350,   351,   352,    -1,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,    -1,   365,   366,   367,
     368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,   386,   387,
     388,   389,   390,   391,   392,   393,    -1,   395,   396,    -1,
     398,   399,   400,    -1,    -1,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,   417,
     418,    -1,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   429,    -1,   431,   432,    -1,    -1,    -1,   436,   437,
     438,   439,   440,    -1,   442,   443,   444,   445,   446,   447,
     448,   449,    -1,    -1,   452,   453,   454,   455,   456,   457,
     458,   459,    -1,   461,   462,   463,   464,   465,   466,   467,
      -1,   469,   470,   471,    -1,   473,   474,   475,   476,    -1,
      -1,    -1,   480,    -1,   482,   483,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,   499,   500,   501,   502,   503,    -1,    -1,   506,     3,
       4,     5,    -1,    -1,    -1,     9,    -1,    -1,    -1,    -1,
      -1,    -1,   520,    -1,    -1,    -1,    -1,    -1,    22,    23,
      24,    25,    -1,    27,    28,    29,    30,    -1,    32,    33,
      34,    -1,    -1,    -1,    38,    -1,    -1,    -1,    -1,    -1,
      44,    45,    46,    -1,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    58,    59,    -1,    61,    62,    63,
      64,    65,    66,    -1,    -1,    69,    70,    71,    72,    73,
      -1,    75,    76,    77,    78,    79,    -1,    81,    -1,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    -1,
      94,    95,    96,    97,    98,    -1,    -1,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,    -1,   116,    -1,   118,   119,   120,   121,   122,   123,
      -1,   125,    -1,   127,   128,   129,   130,    -1,    -1,   133,
     134,   135,   136,   137,    -1,    -1,    -1,   141,   142,   143,
      -1,   145,   146,   147,    -1,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,   159,   160,   161,    -1,   163,
     164,   165,   166,    -1,   168,    -1,   170,   171,    -1,   173,
     174,   175,   176,   177,   178,    -1,   180,    -1,    -1,    -1,
     184,   185,    -1,   187,    -1,   189,   190,   191,   192,   193,
     194,   195,   196,   197,   198,   199,   200,    -1,   202,   203,
     204,   205,   206,   207,   208,    -1,   210,   211,   212,   213,
     214,   215,   216,   217,   218,   219,    -1,   221,    -1,   223,
     224,   225,   226,   227,   228,    -1,   230,   231,   232,   233,
     234,    -1,    -1,   237,   238,   239,   240,    -1,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,    -1,   276,    -1,   278,   279,   280,   281,    -1,   283,
     284,   285,   286,   287,   288,    -1,   290,   291,   292,    -1,
     294,   295,   296,    -1,    -1,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
      -1,    -1,   316,    -1,    -1,    -1,    -1,   321,   322,   323,
     324,   325,   326,   327,   328,   329,   330,    -1,   332,   333,
     334,   335,   336,    -1,    -1,   339,    -1,   341,   342,   343,
     344,   345,   346,   347,   348,    -1,   350,   351,   352,    -1,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
      -1,   365,   366,   367,   368,   369,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,    -1,
     384,   385,   386,   387,   388,   389,   390,   391,   392,   393,
      -1,   395,   396,    -1,   398,   399,   400,    -1,    -1,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,   417,   418,    -1,   420,   421,    -1,   423,
     424,   425,   426,   427,   428,   429,    -1,   431,   432,    -1,
      -1,    -1,   436,   437,   438,   439,   440,   441,   442,   443,
     444,   445,   446,   447,   448,   449,    -1,    -1,   452,   453,
     454,    -1,   456,   457,   458,   459,    -1,   461,   462,   463,
     464,   465,   466,   467,    -1,   469,   470,   471,    -1,   473,
     474,   475,   476,    -1,    -1,    -1,   480,    -1,    -1,   483,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,   499,   500,   501,   502,   503,
       3,    -1,     5,    -1,    -1,    -1,    -1,   511,   512,   513,
      -1,    -1,    -1,    -1,    -1,    -1,   520,    -1,    -1,    22,
      23,    24,    25,    -1,    27,    28,    29,    30,    -1,    32,
      33,    34,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    44,    45,    46,    -1,    48,    49,    50,    51,    52,
      53,    54,    55,    56,    57,    58,    59,    -1,    61,    62,
      63,    64,    65,    66,    -1,    68,    69,    70,    71,    72,
      73,    -1,    75,    76,    77,    78,    79,    -1,    81,    -1,
      83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      -1,    94,    95,    96,    97,    98,    -1,    -1,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,    -1,   116,    -1,   118,   119,   120,   121,   122,
     123,    -1,   125,    -1,   127,   128,   129,   130,    -1,    -1,
     133,   134,   135,   136,   137,    -1,    -1,    -1,   141,   142,
     143,    -1,   145,   146,   147,    -1,   149,   150,   151,   152,
     153,   154,   155,   156,   157,   158,   159,    -1,   161,    -1,
     163,   164,   165,   166,    -1,   168,    -1,   170,   171,    -1,
     173,   174,   175,   176,   177,   178,    -1,   180,    -1,   182,
      -1,   184,   185,    -1,   187,    -1,   189,   190,   191,   192,
     193,   194,   195,   196,   197,   198,   199,   200,    -1,   202,
     203,   204,   205,   206,   207,   208,    -1,   210,   211,   212,
     213,   214,   215,   216,   217,   218,   219,    -1,   221,    -1,
     223,   224,   225,   226,   227,   228,    -1,   230,   231,   232,
     233,   234,   235,    -1,   237,   238,   239,   240,    -1,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,    -1,   276,    -1,   278,   279,   280,   281,    -1,
     283,   284,   285,   286,   287,   288,    -1,   290,   291,    -1,
     293,   294,   295,   296,    -1,    -1,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,    -1,    -1,   316,    -1,    -1,    -1,    -1,   321,   322,
     323,   324,   325,   326,   327,   328,   329,   330,    -1,   332,
     333,   334,   335,   336,    -1,    -1,   339,    -1,   341,   342,
     343,   344,   345,   346,   347,   348,    -1,   350,   351,   352,
      -1,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,    -1,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
      -1,    -1,   385,   386,   387,   388,   389,   390,   391,   392,
     393,    -1,   395,   396,    -1,   398,   399,   400,    -1,    -1,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,   417,   418,    -1,   420,   421,    -1,
     423,   424,   425,   426,   427,   428,   429,    -1,   431,   432,
      -1,    -1,    -1,   436,   437,   438,   439,   440,    -1,   442,
     443,   444,   445,   446,   447,   448,   449,    -1,    -1,   452,
     453,   454,    -1,   456,   457,   458,   459,    -1,   461,   462,
     463,   464,   465,   466,   467,    -1,   469,   470,   471,    -1,
     473,   474,   475,   476,    -1,    -1,    -1,   480,    -1,    -1,
     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   500,   501,   502,
     503,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   520,    -1,    -1,
      22,    23,    24,    25,    -1,    27,    28,    29,    30,    -1,
      32,    33,    34,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    44,    45,    46,    -1,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    58,    59,    -1,    61,
      62,    63,    64,    65,    66,    -1,    68,    69,    70,    71,
      72,    73,    -1,    75,    76,    77,    78,    79,    -1,    81,
      -1,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    -1,    94,    95,    96,    97,    98,    -1,    -1,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,    -1,   116,    -1,   118,   119,   120,   121,
     122,   123,    -1,   125,    -1,   127,   128,   129,   130,    -1,
      -1,   133,   134,   135,   136,   137,    -1,    -1,    -1,   141,
     142,   143,    -1,   145,   146,   147,    -1,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,    -1,   161,
      -1,   163,   164,   165,   166,    -1,   168,    -1,   170,   171,
      -1,   173,   174,   175,   176,   177,   178,    -1,   180,    -1,
      -1,    -1,   184,   185,    -1,   187,    -1,   189,   190,   191,
     192,   193,   194,   195,   196,   197,   198,   199,   200,    -1,
     202,   203,   204,   205,   206,   207,   208,    -1,   210,   211,
     212,   213,   214,   215,   216,   217,   218,   219,    -1,   221,
      -1,   223,   224,   225,   226,   227,   228,    -1,   230,   231,
     232,   233,   234,    -1,    -1,   237,   238,   239,   240,    -1,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,    -1,   276,    -1,   278,   279,   280,   281,
      -1,   283,   284,   285,   286,   287,   288,    -1,   290,   291,
      -1,    -1,   294,   295,   296,    -1,    -1,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,    -1,    -1,   316,    -1,    -1,    -1,    -1,   321,
     322,   323,   324,   325,   326,   327,   328,   329,   330,    -1,
     332,   333,   334,   335,   336,    -1,    -1,   339,    -1,   341,
     342,   343,   344,   345,   346,   347,   348,    -1,   350,   351,
     352,    -1,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,    -1,   365,   366,   367,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,    -1,    -1,   385,   386,   387,   388,   389,   390,   391,
     392,   393,    -1,   395,   396,    -1,   398,   399,   400,    -1,
      -1,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,   417,   418,    -1,   420,   421,
      -1,   423,   424,   425,   426,   427,   428,   429,    -1,   431,
     432,    -1,    -1,    -1,   436,   437,   438,   439,   440,    -1,
     442,   443,   444,   445,   446,   447,   448,   449,    -1,    -1,
     452,   453,   454,    -1,   456,   457,   458,   459,    -1,   461,
     462,   463,   464,   465,   466,   467,    -1,   469,   470,   471,
      -1,   473,   474,   475,   476,    -1,    -1,    -1,   480,    -1,
      -1,   483,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,   498,   499,   500,   501,
     502,   503,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   520,    -1,
      -1,    22,    23,    24,    25,    -1,    27,    28,    29,    30,
      -1,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    44,    45,    46,    -1,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    58,    59,    -1,
      61,    62,    63,    64,    65,    66,    -1,    68,    69,    70,
      71,    72,    73,    -1,    75,    76,    77,    78,    79,    -1,
      81,    -1,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    -1,    94,    95,    96,    97,    98,    -1,    -1,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,    -1,   116,    -1,   118,   119,   120,
     121,   122,   123,    -1,   125,    -1,   127,   128,   129,   130,
      -1,    -1,   133,   134,   135,   136,   137,    -1,    -1,    -1,
     141,   142,   143,    -1,   145,   146,   147,    -1,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,    -1,
     161,    -1,   163,   164,   165,   166,    -1,   168,    -1,   170,
     171,    -1,   173,   174,   175,   176,   177,   178,    -1,   180,
      -1,    -1,    -1,   184,   185,    -1,   187,    -1,   189,   190,
     191,   192,   193,   194,   195,   196,   197,   198,   199,   200,
      -1,   202,   203,   204,   205,   206,   207,   208,    -1,   210,
     211,   212,   213,   214,   215,   216,   217,   218,   219,    -1,
     221,    -1,   223,   224,   225,   226,   227,   228,    -1,   230,
     231,   232,   233,   234,    -1,    -1,   237,   238,   239,   240,
      -1,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,    -1,   276,    -1,   278,   279,   280,
     281,    -1,   283,   284,   285,   286,   287,   288,    -1,   290,
     291,    -1,    -1,   294,   295,   296,    -1,    -1,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,    -1,    -1,   316,    -1,    -1,    -1,    -1,
     321,   322,   323,   324,   325,   326,   327,   328,   329,   330,
      -1,   332,   333,   334,   335,   336,    -1,    -1,   339,    -1,
     341,   342,   343,   344,   345,   346,   347,   348,    -1,   350,
     351,   352,    -1,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,    -1,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,    -1,    -1,   385,   386,   387,   388,   389,   390,
     391,   392,   393,    -1,   395,   396,    -1,   398,   399,   400,
      -1,    -1,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,   417,   418,    -1,   420,
     421,    -1,   423,   424,   425,   426,   427,   428,   429,    -1,
     431,   432,    -1,    -1,    -1,   436,   437,   438,   439,   440,
      -1,   442,   443,   444,   445,   446,   447,   448,   449,    -1,
      -1,   452,   453,   454,    -1,   456,   457,   458,   459,    -1,
     461,   462,   463,   464,   465,   466,   467,    -1,   469,   470,
     471,    -1,   473,   474,   475,   476,    -1,    -1,    -1,   480,
      -1,    -1,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,   499,   500,
     501,   502,   503,     3,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   520,
      -1,    -1,    22,    23,    24,    25,    -1,    27,    28,    29,
      30,    31,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    45,    46,    -1,    48,    49,
      50,    -1,    52,    53,    54,    55,    56,    -1,    58,    59,
      -1,    61,    62,    63,    64,    65,    66,    -1,    -1,    69,
      70,    71,    72,    73,    -1,    75,    76,    77,    78,    79,
      -1,    -1,    -1,    83,    84,    85,    86,    87,    88,    -1,
      90,    91,    92,    -1,    94,    95,    96,    97,    98,    -1,
      -1,    -1,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,    -1,   116,    -1,   118,   119,
     120,   121,   122,   123,    -1,   125,    -1,   127,   128,   129,
     130,    -1,    -1,   133,   134,   135,   136,   137,    -1,    -1,
      -1,   141,   142,   143,    -1,   145,   146,   147,    -1,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
      -1,   161,    -1,   163,   164,   165,   166,    -1,   168,    -1,
     170,    -1,   172,    -1,   174,   175,   176,    -1,   178,    -1,
     180,    -1,    -1,    -1,   184,   185,    -1,   187,    -1,   189,
     190,   191,   192,   193,   194,   195,    -1,   197,   198,   199,
     200,    -1,   202,   203,   204,   205,   206,   207,   208,    -1,
     210,    -1,   212,   213,   214,   215,   216,   217,   218,   219,
      -1,   221,    -1,   223,    -1,    -1,   226,    -1,   228,    -1,
     230,   231,   232,   233,   234,    -1,    -1,   237,    -1,   239,
      -1,    -1,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
      -1,   271,   272,   273,   274,    -1,   276,    -1,   278,   279,
      -1,   281,    -1,   283,   284,   285,   286,   287,   288,    -1,
     290,   291,    -1,    -1,   294,   295,   296,    -1,    -1,   299,
     300,    -1,   302,    -1,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,    -1,    -1,   316,   317,   318,   319,
      -1,   321,   322,   323,    -1,   325,   326,   327,   328,   329,
     330,    -1,   332,   333,   334,   335,   336,    -1,    -1,   339,
      -1,   341,   342,   343,   344,   345,   346,   347,   348,    -1,
     350,   351,   352,    -1,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,    -1,   365,   366,    -1,   368,   369,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,    -1,   385,   386,   387,   388,   389,
     390,   391,   392,   393,    -1,   395,    -1,    -1,   398,   399,
     400,    -1,    -1,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,   417,   418,    -1,
     420,   421,   422,   423,    -1,   425,   426,   427,   428,   429,
      -1,   431,   432,    -1,    -1,    -1,   436,   437,   438,   439,
     440,    -1,   442,   443,   444,   445,   446,   447,   448,   449,
      -1,    -1,   452,   453,   454,   455,   456,   457,   458,   459,
      -1,   461,   462,   463,   464,   465,   466,   467,    -1,   469,
      -1,   471,    -1,   473,   474,   475,   476,    -1,    -1,    -1,
     480,    -1,   482,   483,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,   498,   499,
     500,   501,   502,   503,     3,    -1,   506,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     520,    -1,    -1,    22,    23,    24,    25,    -1,    27,    28,
      29,    30,    -1,    32,    33,    34,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    45,    46,    -1,    48,
      49,    50,    -1,    52,    53,    54,    55,    56,    -1,    58,
      59,    -1,    61,    62,    63,    64,    65,    66,    -1,    -1,
      69,    70,    71,    72,    73,    -1,    75,    76,    77,    78,
      79,    -1,    -1,    -1,    83,    84,    85,    86,    87,    88,
      -1,    90,    91,    92,    -1,    94,    95,    96,    97,    98,
      -1,    -1,    -1,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,    -1,   116,    -1,   118,
     119,   120,   121,   122,   123,    -1,   125,    -1,   127,   128,
     129,   130,    -1,    -1,   133,   134,   135,   136,   137,    -1,
      -1,    -1,   141,   142,   143,    -1,   145,   146,   147,    -1,
     149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
     159,    -1,   161,    -1,   163,   164,   165,   166,    -1,   168,
      -1,   170,    -1,   172,    -1,   174,   175,   176,    -1,   178,
      -1,   180,    -1,    -1,    -1,   184,   185,    -1,   187,    -1,
     189,   190,   191,   192,   193,   194,   195,    -1,   197,   198,
     199,   200,    -1,   202,   203,   204,   205,   206,   207,   208,
      -1,   210,    -1,   212,   213,   214,   215,   216,   217,   218,
     219,    -1,   221,    -1,   223,    -1,    -1,   226,    -1,   228,
      -1,   230,   231,   232,   233,   234,    -1,    -1,   237,    -1,
     239,    -1,    -1,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,    -1,   271,   272,   273,   274,    -1,   276,    -1,   278,
     279,    -1,   281,    -1,   283,   284,   285,   286,   287,   288,
      -1,   290,   291,    -1,    -1,   294,   295,   296,    -1,    -1,
     299,   300,    -1,   302,    -1,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,    -1,    -1,   316,   317,   318,
     319,    -1,   321,   322,   323,    -1,   325,   326,   327,   328,
     329,   330,    -1,   332,   333,   334,   335,   336,    -1,    -1,
     339,    -1,   341,   342,   343,   344,   345,   346,   347,   348,
      -1,   350,   351,   352,    -1,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,    -1,   365,   366,    -1,   368,
     369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,    -1,   385,   386,   387,   388,
     389,   390,   391,   392,   393,    -1,   395,    -1,    -1,   398,
     399,   400,    -1,    -1,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,   417,   418,
      -1,   420,   421,   422,   423,    -1,   425,   426,   427,   428,
     429,    -1,   431,   432,    -1,    -1,    -1,   436,   437,   438,
     439,   440,    -1,   442,   443,   444,   445,   446,   447,   448,
     449,    -1,    -1,   452,   453,   454,   455,   456,   457,   458,
     459,    -1,   461,   462,   463,   464,   465,   466,   467,    -1,
     469,    -1,   471,    -1,   473,   474,   475,   476,    -1,    -1,
      -1,   480,    -1,   482,   483,   484,   485,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
     499,   500,   501,   502,   503,     3,    -1,   506,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   520,    -1,    -1,    22,    23,    24,    25,    -1,    27,
      28,    29,    30,    -1,    32,    33,    34,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    45,    46,    -1,
      48,    49,    50,    -1,    52,    53,    54,    55,    56,    -1,
      58,    59,    -1,    61,    62,    63,    64,    65,    66,    -1,
      -1,    69,    70,    71,    72,    73,    -1,    75,    76,    77,
      78,    79,    -1,    -1,    -1,    -1,    84,    85,    86,    87,
      88,    -1,    90,    91,    92,    -1,    94,    95,    96,    97,
      98,    -1,    -1,    -1,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,    -1,   116,    -1,
     118,   119,   120,   121,   122,   123,    -1,   125,    -1,   127,
     128,   129,   130,    -1,    -1,   133,   134,   135,   136,   137,
      -1,    -1,    -1,   141,   142,   143,    -1,   145,   146,   147,
      -1,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,   159,    -1,   161,    -1,   163,   164,   165,   166,    -1,
     168,    -1,   170,    -1,   172,    -1,   174,   175,   176,    -1,
     178,    -1,   180,    -1,    -1,    -1,   184,   185,    -1,   187,
      -1,   189,   190,   191,   192,   193,   194,   195,    -1,   197,
     198,   199,   200,    -1,   202,   203,   204,   205,   206,   207,
     208,    -1,   210,    -1,   212,   213,   214,   215,   216,   217,
     218,   219,    -1,   221,    -1,   223,    -1,    -1,   226,    -1,
     228,    -1,   230,   231,   232,   233,   234,    -1,    -1,   237,
      -1,   239,    -1,    -1,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,    -1,   271,   272,   273,   274,    -1,   276,    -1,
     278,   279,    -1,   281,    -1,   283,   284,   285,   286,   287,
     288,    -1,   290,   291,    -1,    -1,   294,   295,   296,    -1,
      -1,   299,   300,    -1,   302,    -1,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,    -1,    -1,   316,   317,
     318,   319,    -1,   321,   322,   323,    -1,   325,   326,   327,
     328,   329,   330,    -1,   332,   333,   334,   335,   336,    -1,
      -1,   339,    -1,   341,   342,   343,   344,   345,   346,   347,
     348,    -1,   350,   351,   352,    -1,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,    -1,   365,   366,    -1,
     368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,    -1,   385,   386,   387,
     388,   389,   390,   391,   392,   393,    -1,   395,    -1,    -1,
     398,   399,   400,    -1,    -1,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,   417,
     418,    -1,   420,   421,   422,   423,    -1,   425,   426,   427,
     428,   429,    -1,   431,   432,    -1,    -1,    -1,   436,   437,
     438,   439,   440,    -1,   442,   443,   444,   445,   446,   447,
     448,   449,    -1,    -1,   452,   453,   454,   455,   456,   457,
     458,   459,    -1,   461,   462,   463,   464,   465,   466,   467,
      -1,   469,    -1,   471,    -1,   473,   474,   475,   476,    -1,
      -1,    -1,   480,    -1,   482,   483,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,   499,   500,   501,   502,   503,    -1,     3,   506,     5,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   520,    -1,    -1,    -1,    22,    23,    24,    25,
      -1,    27,    28,    29,    30,    -1,    32,    33,    34,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    45,
      46,    -1,    48,    49,    50,    -1,    52,    53,    54,    55,
      56,    -1,    58,    59,    -1,    61,    62,    63,    64,    65,
      66,    -1,    -1,    69,    70,    71,    72,    73,    -1,    75,
      76,    77,    78,    79,    -1,    -1,    -1,    83,    84,    85,
      86,    87,    88,    -1,    90,    91,    92,    -1,    94,    95,
      96,    97,    98,    -1,    -1,    -1,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,    -1,
     116,    -1,   118,   119,   120,   121,   122,   123,    -1,   125,
      -1,   127,   128,   129,   130,    -1,    -1,   133,   134,   135,
     136,   137,    -1,    -1,    -1,   141,   142,   143,    -1,   145,
     146,   147,    -1,   149,   150,   151,   152,   153,   154,   155,
     156,   157,   158,   159,    -1,   161,    -1,   163,   164,   165,
     166,    -1,   168,    -1,   170,    -1,    -1,    -1,   174,   175,
     176,    -1,   178,    -1,   180,    -1,    -1,    -1,   184,   185,
      -1,   187,    -1,   189,   190,   191,   192,   193,   194,   195,
      -1,   197,   198,   199,   200,    -1,   202,   203,   204,   205,
     206,   207,   208,    -1,   210,    -1,   212,   213,   214,   215,
     216,   217,   218,   219,    -1,   221,    -1,   223,    -1,    -1,
     226,    -1,   228,    -1,   230,   231,   232,   233,   234,    -1,
      -1,   237,    -1,   239,    -1,    -1,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,    -1,   271,   272,   273,   274,    -1,
     276,    -1,   278,   279,    -1,   281,    -1,   283,   284,   285,
     286,   287,   288,    -1,   290,   291,    -1,    -1,   294,   295,
     296,    -1,    -1,   299,   300,    -1,   302,    -1,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,    -1,    -1,
     316,    -1,    -1,    -1,    -1,   321,   322,   323,    -1,   325,
     326,   327,   328,   329,   330,    -1,   332,   333,   334,   335,
     336,    -1,    -1,   339,    -1,   341,   342,   343,   344,   345,
     346,   347,   348,    -1,   350,   351,   352,    -1,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,    -1,   365,
     366,    -1,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,    -1,    -1,   385,
     386,   387,   388,   389,   390,   391,   392,   393,    -1,   395,
      -1,    -1,   398,   399,   400,    -1,    -1,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,   417,   418,    -1,   420,   421,    -1,   423,    -1,   425,
     426,   427,   428,   429,    -1,   431,   432,    -1,    -1,    -1,
     436,   437,   438,   439,   440,    -1,   442,   443,   444,   445,
     446,   447,   448,   449,    -1,    -1,   452,   453,   454,    -1,
     456,   457,   458,   459,    -1,   461,   462,   463,   464,   465,
     466,   467,    -1,   469,    -1,   471,    -1,   473,   474,   475,
     476,    -1,    -1,    -1,   480,    -1,    -1,   483,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,   498,   499,   500,   501,   502,   503,     3,    -1,
       5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   520,    -1,    -1,    22,    23,    24,
      25,    -1,    27,    28,    29,    30,    -1,    32,    33,    34,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      45,    46,    -1,    48,    49,    50,    -1,    52,    53,    54,
      55,    56,    -1,    58,    59,    -1,    61,    62,    63,    64,
      65,    66,    -1,    -1,    69,    70,    71,    72,    73,    -1,
      75,    76,    77,    78,    79,    -1,    -1,    -1,    83,    84,
      85,    86,    87,    88,    -1,    90,    91,    92,    -1,    94,
      95,    96,    97,    98,    -1,    -1,    -1,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
      -1,   116,    -1,   118,   119,   120,   121,   122,   123,    -1,
     125,    -1,   127,   128,   129,   130,    -1,    -1,   133,   134,
     135,   136,   137,    -1,    -1,    -1,   141,   142,   143,    -1,
     145,   146,   147,    -1,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,    -1,   161,    -1,   163,   164,
     165,   166,    -1,   168,    -1,   170,    -1,    -1,    -1,   174,
     175,   176,    -1,   178,    -1,   180,    -1,    -1,    -1,   184,
     185,    -1,   187,    -1,   189,   190,   191,   192,   193,   194,
     195,    -1,   197,   198,   199,   200,    -1,   202,   203,   204,
     205,   206,   207,   208,    -1,   210,    -1,   212,   213,   214,
     215,   216,   217,   218,   219,    -1,   221,    -1,   223,    -1,
      -1,   226,    -1,   228,    -1,   230,   231,   232,   233,   234,
      -1,    -1,   237,    -1,   239,    -1,    -1,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,    -1,   271,   272,   273,   274,
      -1,   276,    -1,   278,   279,    -1,   281,    -1,   283,   284,
     285,   286,   287,   288,    -1,   290,   291,    -1,    -1,   294,
     295,   296,    -1,    -1,   299,   300,    -1,   302,    -1,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,    -1,
      -1,   316,    -1,    -1,    -1,    -1,   321,   322,   323,    -1,
     325,   326,   327,   328,   329,   330,    -1,   332,   333,   334,
     335,   336,    -1,    -1,   339,    -1,   341,   342,   343,   344,
     345,   346,   347,   348,    -1,   350,   351,   352,    -1,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,    -1,
     365,   366,    -1,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,    -1,    -1,
     385,   386,   387,   388,   389,   390,   391,   392,   393,    -1,
     395,    -1,    -1,   398,   399,   400,    -1,    -1,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,    -1,   420,   421,    -1,   423,    -1,
     425,   426,   427,   428,   429,    -1,   431,   432,    -1,    -1,
      -1,   436,   437,   438,   439,   440,    -1,   442,   443,   444,
     445,   446,   447,   448,   449,    -1,    -1,   452,   453,   454,
      -1,   456,   457,   458,   459,    -1,   461,   462,   463,   464,
     465,   466,   467,    -1,   469,    -1,   471,    -1,   473,   474,
     475,   476,    -1,    -1,    -1,   480,    -1,    -1,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,     3,
      -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   520,    -1,    -1,    22,    23,
      24,    25,    -1,    27,    28,    29,    30,    -1,    32,    33,
      34,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    45,    46,    -1,    48,    49,    50,    -1,    52,    53,
      54,    55,    56,    -1,    58,    59,    -1,    61,    62,    63,
      64,    65,    66,    -1,    -1,    69,    70,    71,    72,    73,
      -1,    75,    76,    77,    78,    79,    -1,    -1,    -1,    83,
      84,    85,    86,    87,    88,    -1,    90,    91,    92,    -1,
      94,    95,    96,    97,    98,    -1,    -1,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,    -1,   116,    -1,   118,   119,   120,   121,   122,   123,
      -1,   125,    -1,   127,   128,   129,   130,    -1,    -1,   133,
     134,   135,   136,   137,    -1,    -1,    -1,   141,   142,   143,
      -1,   145,   146,   147,    -1,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,   159,    -1,   161,    -1,   163,
     164,   165,   166,    -1,   168,    -1,   170,    -1,    -1,    -1,
     174,   175,   176,    -1,   178,    -1,   180,    -1,    -1,    -1,
     184,   185,    -1,   187,    -1,   189,   190,   191,   192,   193,
     194,   195,    -1,   197,   198,   199,   200,    -1,   202,   203,
     204,   205,   206,   207,   208,    -1,   210,    -1,   212,   213,
     214,   215,   216,   217,   218,   219,    -1,   221,    -1,   223,
      -1,    -1,   226,    -1,   228,    -1,   230,   231,   232,   233,
     234,    -1,    -1,   237,    -1,   239,    -1,    -1,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,    -1,   271,   272,   273,
     274,    -1,   276,    -1,   278,   279,    -1,   281,    -1,   283,
     284,   285,   286,   287,   288,    -1,   290,   291,    -1,    -1,
     294,   295,   296,    -1,    -1,   299,   300,    -1,   302,    -1,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
      -1,    -1,   316,    -1,    -1,    -1,    -1,   321,   322,   323,
      -1,   325,   326,   327,   328,   329,   330,    -1,   332,   333,
     334,   335,   336,    -1,    -1,   339,    -1,   341,   342,   343,
     344,   345,   346,   347,   348,    -1,   350,   351,   352,    -1,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
      -1,   365,   366,    -1,   368,   369,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,    -1,
      -1,   385,   386,   387,   388,   389,   390,   391,   392,   393,
      -1,   395,    -1,    -1,   398,   399,   400,    -1,    -1,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,   417,   418,    -1,   420,   421,    -1,   423,
      -1,   425,   426,   427,   428,   429,    -1,   431,   432,    -1,
      -1,    -1,   436,   437,   438,   439,   440,    -1,   442,   443,
     444,   445,   446,   447,   448,   449,    -1,    -1,   452,   453,
     454,    -1,   456,   457,   458,   459,    -1,   461,   462,   463,
     464,   465,   466,   467,    -1,   469,    -1,   471,    -1,   473,
     474,   475,   476,    -1,    -1,    -1,   480,    -1,    -1,   483,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,   499,   500,   501,   502,   503,
       3,    -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   520,    -1,    -1,    22,
      23,    24,    25,    -1,    27,    28,    29,    30,    -1,    32,
      33,    34,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    45,    46,    -1,    48,    49,    50,    -1,    52,
      53,    54,    55,    56,    -1,    58,    59,    -1,    61,    62,
      63,    64,    65,    66,    -1,    -1,    69,    70,    71,    72,
      73,    -1,    75,    76,    77,    78,    79,    -1,    -1,    -1,
      83,    84,    85,    86,    87,    88,    -1,    90,    91,    92,
      -1,    94,    95,    96,    97,    98,    -1,    -1,    -1,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,    -1,   116,    -1,   118,   119,   120,   121,   122,
     123,    -1,   125,    -1,   127,   128,   129,   130,    -1,    -1,
     133,   134,   135,   136,   137,    -1,    -1,    -1,   141,   142,
     143,    -1,   145,   146,   147,    -1,   149,   150,   151,   152,
     153,   154,   155,   156,   157,   158,   159,    -1,   161,    -1,
     163,   164,   165,   166,    -1,   168,    -1,   170,    -1,    -1,
      -1,   174,   175,   176,    -1,   178,    -1,   180,    -1,    -1,
      -1,   184,   185,    -1,   187,    -1,   189,   190,   191,   192,
     193,   194,   195,    -1,   197,   198,   199,   200,    -1,   202,
     203,   204,   205,   206,   207,   208,    -1,   210,    -1,   212,
     213,   214,   215,   216,   217,   218,   219,    -1,   221,    -1,
     223,    -1,    -1,   226,    -1,   228,    -1,   230,   231,   232,
     233,   234,    -1,    -1,   237,    -1,   239,    -1,    -1,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,    -1,   271,   272,
     273,   274,    -1,   276,    -1,   278,   279,    -1,   281,    -1,
     283,   284,   285,   286,   287,   288,    -1,   290,   291,    -1,
      -1,   294,   295,   296,    -1,    -1,   299,   300,    -1,   302,
      -1,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,    -1,    -1,   316,    -1,    -1,    -1,    -1,   321,   322,
     323,    -1,   325,   326,   327,   328,   329,   330,    -1,   332,
     333,   334,   335,   336,    -1,    -1,   339,    -1,   341,   342,
     343,   344,   345,   346,   347,   348,    -1,   350,   351,   352,
      -1,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,    -1,   365,   366,    -1,   368,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
      -1,    -1,   385,   386,   387,   388,   389,   390,   391,   392,
     393,    -1,   395,    -1,    -1,   398,   399,   400,    -1,    -1,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,   417,   418,    -1,   420,   421,    -1,
     423,    -1,   425,   426,   427,   428,   429,    -1,   431,   432,
      -1,    -1,    -1,   436,   437,   438,   439,   440,    -1,   442,
     443,   444,   445,   446,   447,   448,   449,    -1,    -1,   452,
     453,   454,    -1,   456,   457,   458,   459,    -1,   461,   462,
     463,   464,   465,   466,   467,    -1,   469,    -1,   471,    -1,
     473,   474,   475,   476,    -1,    -1,    -1,   480,    -1,    -1,
     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   500,   501,   502,
     503,     3,    -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   520,    -1,    -1,
      22,    23,    24,    25,    -1,    27,    28,    29,    30,    -1,
      32,    33,    34,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    45,    46,    -1,    48,    49,    50,    -1,
      52,    53,    54,    55,    56,    -1,    58,    59,    -1,    61,
      62,    63,    64,    65,    66,    -1,    -1,    69,    70,    71,
      72,    73,    -1,    75,    76,    77,    78,    79,    -1,    -1,
      -1,    83,    84,    85,    86,    87,    88,    -1,    90,    91,
      92,    -1,    94,    95,    96,    97,    98,    -1,    -1,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,    -1,   116,    -1,   118,   119,   120,   121,
     122,   123,    -1,   125,    -1,   127,   128,   129,   130,    -1,
      -1,   133,   134,   135,   136,   137,    -1,    -1,    -1,   141,
     142,   143,    -1,   145,   146,   147,    -1,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,    -1,   161,
      -1,   163,   164,   165,   166,    -1,   168,    -1,   170,    -1,
      -1,    -1,   174,   175,   176,    -1,   178,    -1,   180,    -1,
      -1,    -1,   184,   185,    -1,   187,    -1,   189,   190,   191,
     192,   193,   194,   195,    -1,   197,   198,   199,   200,    -1,
     202,   203,   204,   205,   206,   207,   208,    -1,   210,    -1,
     212,   213,   214,   215,   216,   217,   218,   219,    -1,   221,
      -1,   223,    -1,    -1,   226,    -1,   228,    -1,   230,   231,
     232,   233,   234,    -1,    -1,   237,    -1,   239,    -1,    -1,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,    -1,   271,
     272,   273,   274,    -1,   276,    -1,   278,   279,    -1,   281,
      -1,   283,   284,   285,   286,   287,   288,    -1,   290,   291,
      -1,    -1,   294,   295,   296,    -1,    -1,   299,   300,    -1,
     302,    -1,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,    -1,    -1,   316,    -1,    -1,    -1,    -1,   321,
     322,   323,    -1,   325,   326,   327,   328,   329,   330,    -1,
     332,   333,   334,   335,   336,    -1,    -1,   339,    -1,   341,
     342,   343,   344,   345,   346,   347,   348,    -1,   350,   351,
     352,    -1,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,    -1,   365,   366,    -1,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,    -1,    -1,   385,   386,   387,   388,   389,   390,   391,
     392,   393,    -1,   395,    -1,    -1,   398,   399,   400,    -1,
      -1,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,   417,   418,    -1,   420,   421,
      -1,   423,    -1,   425,   426,   427,   428,   429,    -1,   431,
     432,    -1,    -1,    -1,   436,   437,   438,   439,   440,    -1,
     442,   443,   444,   445,   446,   447,   448,   449,    -1,    -1,
     452,   453,   454,    -1,   456,   457,   458,   459,    -1,   461,
     462,   463,   464,   465,   466,   467,    -1,   469,    -1,   471,
      -1,   473,   474,   475,   476,    -1,    -1,    -1,   480,    -1,
      -1,   483,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,   498,   499,   500,   501,
     502,   503,     3,    -1,     5,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   520,    -1,
      -1,    22,    23,    24,    25,    -1,    27,    28,    29,    30,
      -1,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    45,    46,    -1,    48,    49,    50,
      -1,    52,    53,    54,    55,    56,    -1,    58,    59,    -1,
      61,    62,    63,    64,    65,    66,    -1,    -1,    69,    70,
      71,    72,    73,    -1,    75,    76,    77,    78,    79,    -1,
      -1,    -1,    83,    84,    85,    86,    87,    88,    -1,    90,
      91,    92,    -1,    94,    95,    96,    97,    98,    -1,    -1,
      -1,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,    -1,   116,    -1,   118,   119,   120,
     121,   122,   123,    -1,   125,    -1,   127,   128,   129,   130,
      -1,    -1,   133,   134,   135,   136,   137,    -1,    -1,    -1,
     141,   142,   143,    -1,   145,   146,   147,    -1,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,    -1,
     161,    -1,   163,   164,   165,   166,    -1,   168,    -1,   170,
      -1,    -1,    -1,   174,   175,   176,    -1,   178,    -1,   180,
      -1,    -1,    -1,   184,   185,    -1,   187,    -1,   189,   190,
     191,   192,   193,   194,   195,    -1,   197,   198,   199,   200,
      -1,   202,   203,   204,   205,   206,   207,   208,    -1,   210,
      -1,   212,   213,   214,   215,   216,   217,   218,   219,    -1,
     221,    -1,   223,    -1,    -1,   226,    -1,   228,    -1,   230,
     231,   232,   233,   234,    -1,    -1,   237,    -1,   239,    -1,
      -1,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,    -1,
     271,   272,   273,   274,    -1,   276,    -1,   278,   279,    -1,
     281,    -1,   283,   284,   285,   286,   287,   288,    -1,   290,
     291,    -1,    -1,   294,   295,   296,    -1,    -1,   299,   300,
      -1,   302,    -1,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,    -1,    -1,   316,    -1,    -1,    -1,    -1,
     321,   322,   323,    -1,   325,   326,   327,   328,   329,   330,
      -1,   332,   333,   334,   335,   336,    -1,    -1,   339,    -1,
     341,   342,   343,   344,   345,   346,   347,   348,    -1,   350,
     351,   352,    -1,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,    -1,   365,   366,    -1,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,    -1,    -1,   385,   386,   387,   388,   389,   390,
     391,   392,   393,    -1,   395,    -1,    -1,   398,   399,   400,
      -1,    -1,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,   417,   418,    -1,   420,
     421,    -1,   423,    -1,   425,   426,   427,   428,   429,    -1,
     431,   432,    -1,    -1,    -1,   436,   437,   438,   439,   440,
      -1,   442,   443,   444,   445,   446,   447,   448,   449,    -1,
      -1,   452,   453,   454,    -1,   456,   457,   458,   459,    -1,
     461,   462,   463,   464,   465,   466,   467,    -1,   469,    -1,
     471,    -1,   473,   474,   475,   476,    -1,    -1,    -1,   480,
      -1,    -1,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,   499,   500,
     501,   502,   503,     3,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   520,
      -1,    -1,    22,    23,    24,    25,    -1,    27,    28,    29,
      30,    -1,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    45,    46,    -1,    48,    49,
      50,    -1,    52,    53,    54,    55,    56,    -1,    58,    59,
      -1,    61,    62,    63,    64,    65,    66,    -1,    -1,    69,
      70,    71,    72,    73,    -1,    75,    76,    77,    78,    79,
      -1,    -1,    -1,    83,    84,    85,    86,    87,    88,    -1,
      90,    91,    92,    -1,    94,    95,    96,    97,    98,    -1,
      -1,    -1,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,    -1,   116,    -1,   118,   119,
     120,   121,   122,   123,    -1,   125,    -1,   127,   128,   129,
     130,    -1,    -1,   133,   134,   135,   136,   137,    -1,    -1,
      -1,   141,   142,   143,    -1,   145,   146,   147,    -1,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
      -1,   161,    -1,   163,   164,   165,   166,    -1,   168,    -1,
     170,    -1,    -1,    -1,   174,   175,   176,    -1,   178,    -1,
     180,    -1,    -1,    -1,   184,   185,    -1,   187,    -1,   189,
     190,   191,   192,   193,   194,   195,    -1,   197,   198,   199,
     200,    -1,   202,   203,   204,   205,   206,   207,   208,    -1,
     210,    -1,   212,   213,   214,   215,   216,   217,   218,   219,
      -1,   221,    -1,   223,    -1,    -1,   226,    -1,   228,    -1,
     230,   231,   232,   233,   234,    -1,    -1,   237,    -1,   239,
      -1,    -1,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
      -1,   271,   272,   273,   274,    -1,   276,    -1,   278,   279,
      -1,   281,    -1,   283,   284,   285,   286,   287,   288,    -1,
     290,   291,    -1,    -1,   294,   295,   296,    -1,    -1,   299,
     300,    -1,   302,    -1,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,    -1,    -1,   316,    -1,    -1,    -1,
      -1,   321,   322,   323,    -1,   325,   326,   327,   328,   329,
     330,    -1,   332,   333,   334,   335,   336,    -1,    -1,   339,
      -1,   341,   342,   343,   344,   345,   346,   347,   348,    -1,
     350,   351,   352,    -1,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,    -1,   365,   366,    -1,   368,   369,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,    -1,    -1,   385,   386,   387,   388,   389,
     390,   391,   392,   393,    -1,   395,    -1,    -1,   398,   399,
     400,    -1,    -1,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,   417,   418,    -1,
     420,   421,    -1,   423,    -1,   425,   426,   427,   428,   429,
      -1,   431,   432,    -1,    -1,    -1,   436,   437,   438,   439,
     440,    -1,   442,   443,   444,   445,   446,   447,   448,   449,
      -1,    -1,   452,   453,   454,    -1,   456,   457,   458,   459,
      -1,   461,   462,   463,   464,   465,   466,   467,    -1,   469,
      -1,   471,    -1,   473,   474,   475,   476,    -1,    -1,    -1,
     480,    -1,    -1,   483,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,   498,   499,
     500,   501,   502,   503,     3,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     520,    -1,    -1,    22,    23,    24,    25,    -1,    27,    28,
      29,    30,    -1,    32,    33,    34,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    45,    46,    -1,    48,
      49,    50,    -1,    52,    53,    54,    55,    56,    -1,    58,
      59,    -1,    61,    62,    63,    64,    65,    66,    -1,    -1,
      69,    70,    71,    72,    73,    -1,    75,    76,    77,    78,
      79,    -1,    -1,    -1,    83,    84,    85,    86,    87,    88,
      -1,    90,    91,    92,    -1,    94,    95,    96,    97,    98,
      -1,    -1,    -1,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,    -1,   116,    -1,   118,
     119,   120,   121,   122,   123,    -1,   125,    -1,   127,   128,
     129,   130,    -1,    -1,   133,   134,   135,   136,   137,    -1,
      -1,    -1,   141,   142,   143,    -1,   145,   146,   147,    -1,
     149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
     159,    -1,   161,    -1,   163,   164,   165,   166,    -1,   168,
      -1,   170,    -1,    -1,    -1,   174,   175,   176,    -1,   178,
      -1,   180,    -1,    -1,    -1,   184,   185,    -1,   187,    -1,
     189,   190,   191,   192,   193,   194,   195,    -1,   197,   198,
     199,   200,    -1,   202,   203,   204,   205,   206,   207,   208,
      -1,   210,    -1,   212,   213,   214,   215,   216,   217,   218,
     219,    -1,   221,    -1,   223,    -1,    -1,   226,    -1,   228,
      -1,   230,   231,   232,   233,   234,    -1,    -1,   237,    -1,
     239,    -1,    -1,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,    -1,   271,   272,   273,   274,    -1,   276,    -1,   278,
     279,    -1,   281,    -1,   283,   284,   285,   286,   287,   288,
      -1,   290,   291,    -1,    -1,   294,   295,   296,    -1,    -1,
     299,   300,    -1,   302,    -1,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,    -1,    -1,   316,    -1,    -1,
      -1,    -1,   321,   322,   323,    -1,   325,   326,   327,   328,
     329,   330,    -1,   332,   333,   334,   335,   336,    -1,    -1,
     339,    -1,   341,   342,   343,   344,   345,   346,   347,   348,
      -1,   350,   351,   352,    -1,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,    -1,   365,   366,    -1,   368,
     369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,    -1,    -1,   385,   386,   387,   388,
     389,   390,   391,   392,   393,    -1,   395,    -1,    -1,   398,
     399,   400,    -1,    -1,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,   417,   418,
      -1,   420,   421,    -1,   423,    -1,   425,   426,   427,   428,
     429,    -1,   431,   432,    -1,    -1,    -1,   436,   437,   438,
     439,   440,    -1,   442,   443,   444,   445,   446,   447,   448,
     449,    -1,    -1,   452,   453,   454,    -1,   456,   457,   458,
     459,    -1,   461,   462,   463,   464,   465,   466,   467,    -1,
     469,    -1,   471,    -1,   473,   474,   475,   476,    -1,    -1,
      -1,   480,    -1,    -1,   483,   484,   485,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
     499,   500,   501,   502,   503,     3,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   520,    -1,    -1,    22,    23,    24,    25,    -1,    27,
      28,    29,    30,    -1,    32,    33,    34,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    45,    46,    -1,
      48,    49,    50,    -1,    52,    53,    54,    55,    56,    -1,
      58,    59,    -1,    61,    62,    63,    64,    65,    66,    -1,
      -1,    69,    70,    71,    72,    73,    -1,    75,    76,    77,
      78,    79,    -1,    -1,    -1,    83,    84,    85,    86,    87,
      88,    -1,    90,    91,    92,    -1,    94,    95,    96,    97,
      98,    -1,    -1,    -1,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,    -1,   116,    -1,
     118,   119,   120,   121,   122,   123,    -1,   125,    -1,   127,
     128,   129,   130,    -1,    -1,   133,   134,   135,   136,   137,
      -1,    -1,    -1,   141,   142,   143,    -1,   145,   146,   147,
      -1,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,   159,    -1,   161,    -1,   163,   164,   165,   166,    -1,
     168,    -1,   170,    -1,    -1,    -1,   174,   175,   176,    -1,
     178,    -1,   180,    -1,    -1,    -1,   184,   185,    -1,   187,
      -1,   189,   190,   191,   192,   193,   194,   195,    -1,   197,
     198,   199,   200,    -1,   202,   203,   204,   205,   206,   207,
     208,    -1,   210,    -1,   212,   213,   214,   215,   216,   217,
     218,   219,    -1,   221,    -1,   223,    -1,    -1,   226,    -1,
     228,    -1,   230,   231,   232,   233,   234,    -1,    -1,   237,
      -1,   239,    -1,    -1,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,    -1,   271,   272,   273,   274,    -1,   276,    -1,
     278,   279,    -1,   281,    -1,   283,   284,   285,   286,   287,
     288,    -1,   290,   291,    -1,    -1,   294,   295,   296,    -1,
      -1,   299,   300,    -1,   302,    -1,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,    -1,    -1,   316,    -1,
      -1,    -1,    -1,   321,   322,   323,    -1,   325,   326,   327,
     328,   329,   330,    -1,   332,   333,   334,   335,   336,    -1,
      -1,   339,    -1,   341,   342,   343,   344,   345,   346,   347,
     348,    -1,   350,   351,   352,    -1,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,    -1,   365,   366,    -1,
     368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,    -1,    -1,   385,   386,   387,
     388,   389,   390,   391,   392,   393,    -1,   395,    -1,    -1,
     398,   399,   400,    -1,    -1,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,   417,
     418,    -1,   420,   421,    -1,   423,    -1,   425,   426,   427,
     428,   429,    -1,   431,   432,    -1,    -1,    -1,   436,   437,
     438,   439,   440,    -1,   442,   443,   444,   445,   446,   447,
     448,   449,    -1,    -1,   452,   453,   454,    -1,   456,   457,
     458,   459,    -1,   461,   462,   463,   464,   465,   466,   467,
      -1,   469,    -1,   471,    -1,   473,   474,   475,   476,    -1,
      -1,    -1,   480,    -1,    -1,   483,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,   499,   500,   501,   502,   503,    -1,     3,     4,     5,
      -1,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    15,
      16,    -1,   520,    19,    20,    21,    22,    23,    24,    25,
      -1,    27,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    -1,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    -1,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
      76,    77,    78,    -1,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
      96,    97,    98,    -1,   100,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
      -1,   127,   128,   129,   130,   131,   132,   133,   134,   135,
     136,   137,    -1,    -1,   140,   141,   142,   143,   144,   145,
     146,   147,   148,   149,   150,   151,   152,    -1,   154,   155,
     156,   157,   158,    -1,   160,   161,   162,   163,   164,   165,
     166,   167,   168,   169,   170,   171,   172,   173,   174,   175,
     176,   177,   178,   179,   180,    -1,   182,   183,    -1,    -1,
      -1,   187,   188,   189,   190,   191,   192,   193,   194,   195,
     196,   197,   198,   199,   200,   201,   202,   203,   204,   205,
     206,   207,   208,   209,   210,   211,    -1,   213,   214,   215,
     216,   217,   218,   219,   220,   221,   222,   223,   224,   225,
     226,   227,   228,    -1,   230,   231,   232,   233,   234,   235,
     236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,    -1,
     276,   277,   278,   279,   280,   281,   282,    -1,   284,   285,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,    -1,   301,   302,   303,    -1,   305,
     306,   307,   308,   309,   310,   311,   312,   313,    -1,    -1,
     316,   317,   318,   319,   320,   321,   322,    -1,   324,   325,
     326,    -1,   328,   329,   330,   331,   332,   333,   334,   335,
     336,    -1,    -1,   339,   340,   341,   342,   343,   344,   345,
     346,   347,   348,   349,   350,   351,   352,    -1,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,   385,
     386,   387,   388,   389,   390,   391,   392,   393,    -1,   395,
     396,    -1,   398,   399,   400,   401,    -1,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,    -1,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,   428,   429,   430,   431,   432,   433,    -1,   435,
     436,   437,    -1,   439,    -1,   441,   442,   443,   444,   445,
     446,   447,   448,   449,   450,   451,   452,   453,   454,   455,
     456,   457,   458,   459,   460,   461,   462,   463,   464,   465,
      -1,   467,   468,   469,   470,   471,    -1,   473,   474,   475,
     476,    -1,   478,   479,   480,   481,   482,   483,   484,   485,
     486,   487,   488,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   500,   501,   502,   503,    -1,     3,
      -1,   507,   508,   509,     8,   511,   512,   513,   514,   515,
     516,    15,    16,    -1,    -1,    19,    20,    21,    22,    23,
      24,    25,    -1,    27,    28,    29,    30,    -1,    32,    33,
      34,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    45,    46,    -1,    48,    49,    50,    -1,    52,    53,
      54,    55,    56,    -1,    58,    59,    -1,    61,    62,    63,
      64,    65,    66,    -1,    -1,    69,    70,    71,    72,    73,
      -1,    75,    76,    77,    78,    79,    -1,    -1,    -1,    83,
      84,    85,    86,    87,    88,    -1,    90,    91,    92,    -1,
      94,    95,    96,    97,    98,    -1,    -1,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,    -1,   116,    -1,   118,   119,   120,   121,   122,   123,
      -1,   125,    -1,   127,   128,   129,   130,    -1,    -1,   133,
     134,   135,   136,   137,    -1,    -1,    -1,   141,   142,   143,
      -1,   145,   146,   147,    -1,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,   159,    -1,   161,    -1,   163,
     164,   165,   166,    -1,   168,    -1,   170,    -1,    -1,    -1,
     174,   175,   176,    -1,   178,    -1,   180,    -1,    -1,    -1,
     184,   185,    -1,   187,    -1,   189,   190,   191,   192,   193,
     194,   195,    -1,   197,   198,   199,   200,    -1,   202,   203,
     204,   205,   206,   207,   208,    -1,   210,    -1,   212,   213,
     214,   215,   216,   217,   218,   219,    -1,   221,    -1,   223,
      -1,    -1,   226,    -1,   228,    -1,   230,   231,   232,   233,
     234,    -1,    -1,   237,    -1,   239,    -1,    -1,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,    -1,   271,   272,   273,
     274,    -1,   276,    -1,   278,   279,    -1,   281,    -1,   283,
     284,   285,   286,   287,   288,    -1,   290,   291,    -1,    -1,
     294,   295,   296,    -1,    -1,   299,   300,    -1,   302,    -1,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
      -1,    -1,   316,    -1,    -1,    -1,    -1,   321,   322,   323,
      -1,   325,   326,   327,   328,   329,   330,    -1,   332,   333,
     334,   335,   336,    -1,    -1,   339,    -1,   341,   342,   343,
     344,   345,   346,   347,   348,    -1,   350,   351,   352,    -1,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
      -1,   365,   366,    -1,   368,   369,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,    -1,
      -1,   385,   386,   387,   388,   389,   390,   391,   392,   393,
      -1,   395,    -1,    -1,   398,   399,   400,    -1,    -1,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,   417,   418,    -1,   420,   421,    -1,   423,
      -1,   425,   426,   427,   428,   429,    -1,   431,   432,    -1,
      -1,    -1,   436,   437,   438,   439,   440,    -1,   442,   443,
     444,   445,   446,   447,   448,   449,    -1,    -1,   452,   453,
     454,    -1,   456,   457,   458,   459,    -1,   461,   462,   463,
     464,   465,   466,   467,    -1,   469,    -1,   471,    -1,   473,
     474,   475,   476,    -1,    -1,    -1,   480,    -1,    -1,   483,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,   499,   500,   501,   502,   503,
      -1,    -1,    -1,   507,   508,   509,    -1,   511,   512,   513,
     514,   515,   516,     8,    -1,    -1,    11,    -1,    -1,    -1,
      15,    16,    17,    18,    19,    20,    21,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    37,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    48,     8,    -1,    -1,    11,    -1,    -1,
      55,    15,    16,    17,    18,    19,    20,    21,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    37,    -1,    80,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    48,     8,    -1,    -1,    11,    -1,
      -1,    55,    15,    16,    17,    18,    19,    20,    21,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    37,    -1,    80,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    48,     8,    -1,    -1,    11,
      -1,    -1,    55,    15,    16,    17,    18,    19,    20,    21,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    37,    -1,    80,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    48,    -1,     8,    -1,
      -1,    11,   177,    55,    -1,    15,    16,    17,    18,    19,
      20,    21,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   196,    -1,    -1,    -1,    -1,   201,    37,    80,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    48,    -1,
      -1,    -1,    -1,   177,    -1,    55,    -1,    -1,    -1,   224,
     225,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   196,    -1,    -1,   240,    -1,   201,    -1,    -1,
      80,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   177,    -1,    -1,    -1,    -1,    -1,
     224,   225,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   277,   196,    -1,   280,   240,    -1,   201,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   294,
      -1,    -1,   297,    -1,    -1,   177,    -1,    -1,    -1,    -1,
      -1,   224,   225,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   277,   196,    -1,   280,   240,    -1,   201,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     294,    -1,    -1,   297,    -1,    -1,    -1,   177,    -1,    -1,
      -1,    -1,   224,   225,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   277,    -1,   196,   280,   240,    -1,
      -1,   201,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   294,    -1,    -1,   297,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   224,   225,    -1,    -1,    -1,    -1,
      -1,   396,    -1,    -1,    -1,   277,    -1,    -1,   280,    -1,
     240,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   294,    -1,    -1,   297,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   396,    -1,    -1,    -1,    -1,   277,    -1,    -1,
     280,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   294,    -1,    -1,   297,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   396,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   504,
      -1,    -1,   507,   508,   509,    -1,   511,   512,   513,   514,
     515,   516,    -1,    -1,   396,    -1,   521,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,     8,    -1,    -1,    11,    -1,    -1,
      -1,    15,    16,    17,    18,    19,    20,    21,    -1,    -1,
     504,    -1,    -1,   507,   508,   509,    -1,   511,   512,   513,
     514,   515,   516,    37,    -1,    -1,   396,   521,    -1,    -1,
      -1,    -1,    -1,    -1,    48,     8,    -1,    -1,    11,    -1,
      -1,    55,    15,    16,    17,    18,    19,    20,    21,    -1,
      -1,   504,    -1,    -1,   507,   508,   509,    -1,   511,   512,
     513,   514,   515,   516,    37,    -1,    80,    -1,   521,    -1,
      -1,    -1,    -1,    -1,    -1,    48,     8,    -1,    -1,    11,
      -1,    -1,    55,    15,    16,    17,    18,    19,    20,    21,
      -1,    -1,   504,    -1,    -1,   507,   508,   509,    -1,   511,
     512,   513,   514,   515,   516,    37,    -1,    80,    -1,   521,
      -1,    -1,    -1,    -1,    -1,    -1,    48,    -1,     8,    -1,
      -1,    11,    -1,    55,    -1,    15,    16,    17,    18,    19,
      20,    21,    -1,    -1,   504,    -1,    -1,   507,   508,   509,
      -1,   511,   512,   513,   514,   515,   516,    37,    80,    -1,
      -1,   521,    -1,    -1,    -1,    -1,    -1,    -1,    48,     8,
      -1,    -1,    11,   177,    -1,    55,    15,    16,    17,    18,
      19,    20,    21,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   196,    -1,    -1,    -1,    -1,   201,    37,    -1,
      80,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    48,
      -1,    -1,    -1,    -1,   177,    -1,    55,    -1,    -1,    -1,
     224,   225,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   196,    -1,    -1,   240,    -1,   201,    -1,
      -1,    80,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   177,    -1,    -1,    -1,    -1,
      -1,   224,   225,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   277,   196,    -1,   280,   240,    -1,   201,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     294,    -1,    -1,   297,    -1,    -1,    -1,   177,    -1,    -1,
      -1,    -1,   224,   225,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   277,    -1,   196,   280,   240,    -1,
      -1,   201,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   294,    -1,    -1,   297,    -1,    -1,    -1,   177,    -1,
      -1,    -1,    -1,    -1,   224,   225,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   277,    -1,   196,   280,    -1,
     240,    -1,   201,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   294,    -1,    -1,   297,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   224,   225,    -1,    -1,    -1,
      -1,    -1,   396,    -1,    -1,    -1,    -1,   277,    -1,    -1,
     280,   240,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   294,    -1,    -1,   297,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   396,    -1,    -1,    -1,    -1,   277,    -1,
      -1,   280,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   294,    -1,    -1,   297,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   396,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     504,    -1,    -1,   507,   508,   509,    -1,   511,   512,   513,
     514,   515,   516,    -1,    -1,    -1,   396,   521,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,     8,    -1,    -1,    11,    -1,
      -1,    -1,    15,    16,    17,    18,    19,    20,    21,    -1,
      -1,   504,    -1,    -1,   507,   508,   509,    -1,   511,   512,
     513,   514,   515,   516,    37,    -1,    -1,   396,   521,    -1,
      -1,    -1,    -1,    -1,    -1,    48,     8,    -1,    -1,    11,
      -1,    -1,    55,    15,    16,    17,    18,    19,    20,    21,
      -1,    -1,   504,    -1,    -1,   507,   508,   509,    -1,   511,
     512,   513,   514,   515,   516,    37,    -1,    80,    -1,   521,
      -1,    -1,    -1,    -1,    -1,    -1,    48,    -1,     8,    -1,
      -1,    11,    -1,    55,    -1,    15,    16,    17,    18,    19,
      20,    21,    -1,    -1,   504,    -1,    -1,   507,   508,   509,
      -1,   511,   512,   513,   514,   515,   516,    37,    80,    -1,
      -1,   521,    -1,    -1,    -1,    -1,    -1,    -1,    48,     8,
      -1,    -1,    11,    -1,    -1,    55,    15,    16,    17,    18,
      19,    20,    21,    -1,    -1,   504,    -1,    -1,   507,   508,
     509,    -1,   511,   512,   513,   514,   515,   516,    37,    -1,
      80,    -1,   521,    -1,    -1,    -1,    -1,    -1,    -1,    48,
       8,    -1,    -1,    11,   177,    -1,    55,    15,    16,    17,
      18,    19,    20,    21,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   196,    -1,    -1,    -1,    -1,   201,    37,
      -1,    80,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      48,    -1,    -1,    -1,    -1,   177,    -1,    55,    -1,    -1,
      -1,   224,   225,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   196,    -1,    -1,   240,    -1,   201,
      -1,    -1,    80,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   177,    -1,    -1,
      -1,    -1,   224,   225,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   277,    -1,   196,   280,   240,    -1,
      -1,   201,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   294,    -1,    -1,   297,    -1,    -1,    -1,   177,    -1,
      -1,    -1,    -1,    -1,   224,   225,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   277,    -1,   196,   280,    -1,
     240,    -1,   201,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   294,    -1,    -1,   297,    -1,    -1,    -1,   177,
      -1,    -1,    -1,    -1,    -1,   224,   225,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   277,   196,    -1,
     280,   240,    -1,   201,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   294,    -1,    -1,   297,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   224,   225,    -1,    -1,
      -1,    -1,    -1,   396,    -1,    -1,    -1,    -1,   277,    -1,
      -1,   280,   240,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   294,    -1,    -1,   297,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   396,    -1,    -1,    -1,    -1,   277,
      -1,    -1,   280,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   294,    -1,    -1,   297,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   396,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   504,    -1,    -1,   507,   508,   509,    -1,   511,   512,
     513,   514,   515,   516,    -1,    -1,    -1,   396,   521,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   504,    -1,    -1,   507,   508,   509,    -1,   511,
     512,   513,   514,   515,   516,    -1,    -1,   519,   396,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   504,    -1,    -1,   507,   508,   509,
      -1,   511,   512,   513,   514,   515,   516,    -1,    -1,   519,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   504,    -1,    -1,   507,   508,
     509,    -1,   511,   512,   513,   514,   515,   516,    -1,    -1,
     519,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,     3,    -1,    -1,   504,    -1,    -1,   507,
     508,   509,    -1,   511,   512,   513,   514,   515,   516,    -1,
      -1,   519,    22,    23,    24,    25,    -1,    27,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      -1,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
      70,    71,    72,    73,    74,    75,    76,    77,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    95,    96,    97,    98,    -1,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
     120,   121,   122,   123,   124,   125,    -1,   127,   128,   129,
     130,   131,   132,   133,   134,   135,   136,   137,    -1,    -1,
     140,   141,   142,   143,   144,   145,   146,   147,   148,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
     160,   161,   162,   163,   164,   165,   166,   167,   168,   169,
     170,   171,   172,   173,   174,   175,   176,   177,   178,   179,
     180,    -1,   182,   183,   184,   185,    -1,   187,   188,   189,
     190,   191,   192,   193,   194,   195,   196,   197,   198,   199,
     200,   201,   202,   203,   204,   205,   206,   207,   208,   209,
     210,   211,   212,   213,   214,   215,   216,   217,   218,   219,
     220,   221,   222,   223,   224,   225,   226,   227,   228,    -1,
     230,   231,   232,   233,   234,   235,   236,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,    -1,   276,   277,   278,   279,
     280,   281,   282,   283,   284,   285,   286,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,    -1,    -1,   316,   317,   318,   319,
     320,   321,   322,   323,   324,   325,   326,   327,   328,   329,
     330,   331,   332,   333,   334,   335,   336,    -1,    -1,   339,
     340,   341,   342,   343,   344,   345,   346,   347,   348,   349,
     350,   351,   352,    -1,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,   386,   387,   388,   389,
     390,   391,   392,   393,    -1,   395,   396,    -1,   398,   399,
     400,   401,    -1,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,   428,   429,
     430,   431,   432,   433,    -1,   435,   436,   437,   438,   439,
     440,   441,   442,   443,   444,   445,   446,   447,   448,   449,
     450,   451,   452,   453,   454,   455,   456,   457,   458,   459,
     460,   461,   462,   463,   464,   465,   466,   467,   468,   469,
     470,   471,    -1,   473,   474,   475,   476,    -1,   478,   479,
     480,   481,   482,   483,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,   498,   499,
     500,   501,   502,   503,     3,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   513,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    22,    23,    24,    25,    -1,    27,    28,
      29,    30,    -1,    32,    33,    34,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    45,    46,    -1,    48,
      49,    50,    -1,    52,    53,    54,    55,    56,    -1,    58,
      59,    -1,    61,    62,    63,    64,    65,    66,    -1,    -1,
      69,    70,    71,    72,    73,    -1,    75,    76,    77,    78,
      79,    -1,    -1,    -1,    83,    84,    85,    86,    87,    88,
      -1,    90,    91,    92,    -1,    94,    95,    96,    97,    98,
      -1,    -1,    -1,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,    -1,   116,    -1,   118,
     119,   120,   121,   122,   123,    -1,   125,    -1,   127,   128,
     129,   130,    -1,    -1,   133,   134,   135,   136,   137,    -1,
      -1,    -1,   141,   142,   143,    -1,   145,   146,   147,    -1,
     149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
     159,    -1,   161,    -1,   163,   164,   165,   166,    -1,   168,
      -1,   170,    -1,    -1,    -1,   174,   175,   176,    -1,   178,
      -1,   180,    -1,    -1,    -1,   184,   185,    -1,   187,    -1,
     189,   190,   191,   192,   193,   194,   195,    -1,   197,   198,
     199,   200,    -1,   202,   203,   204,   205,   206,   207,   208,
      -1,   210,    -1,   212,   213,   214,   215,   216,   217,   218,
     219,    -1,   221,    -1,   223,    -1,    -1,   226,    -1,   228,
      -1,   230,   231,   232,   233,   234,    -1,    -1,   237,    -1,
     239,    -1,    -1,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,    -1,   271,   272,   273,   274,    -1,   276,    -1,   278,
     279,    -1,   281,    -1,   283,   284,   285,   286,   287,   288,
      -1,   290,   291,    -1,    -1,   294,   295,   296,    -1,    -1,
     299,   300,    -1,   302,    -1,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,    -1,    -1,   316,    -1,    -1,
      -1,    -1,   321,   322,   323,    -1,   325,   326,   327,   328,
     329,   330,    -1,   332,   333,   334,   335,   336,    -1,    -1,
     339,    -1,   341,   342,   343,   344,   345,   346,   347,   348,
      -1,   350,   351,   352,    -1,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,    -1,   365,   366,    -1,   368,
     369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,    -1,    -1,   385,   386,   387,   388,
     389,   390,   391,   392,   393,    -1,   395,    -1,    -1,   398,
     399,   400,    -1,    -1,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,   417,   418,
      -1,   420,   421,    -1,   423,    -1,   425,   426,   427,   428,
     429,    -1,   431,   432,    -1,    -1,    -1,   436,   437,   438,
     439,   440,    -1,   442,   443,   444,   445,   446,   447,   448,
     449,    -1,    -1,   452,   453,   454,    -1,   456,   457,   458,
     459,    -1,   461,   462,   463,   464,   465,   466,   467,    -1,
     469,    -1,   471,    -1,   473,   474,   475,   476,    -1,    -1,
      -1,   480,    -1,    -1,   483,   484,   485,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
     499,   500,   501,   502,   503,     3,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   513,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    -1,    27,
      28,    29,    30,    -1,    32,    33,    34,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    45,    46,    -1,
      48,    49,    50,    -1,    52,    53,    54,    55,    56,    -1,
      58,    59,    -1,    61,    62,    63,    64,    65,    66,    -1,
      -1,    69,    70,    71,    72,    73,    -1,    75,    76,    77,
      78,    79,    -1,    -1,    -1,    83,    84,    85,    86,    87,
      88,    -1,    90,    91,    92,    -1,    94,    95,    96,    97,
      98,    -1,    -1,    -1,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,    -1,   116,    -1,
     118,   119,   120,   121,   122,   123,    -1,   125,    -1,   127,
     128,   129,   130,    -1,    -1,   133,   134,   135,   136,   137,
      -1,    -1,    -1,   141,   142,   143,    -1,   145,   146,   147,
      -1,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,   159,    -1,   161,    -1,   163,   164,   165,   166,    -1,
     168,    -1,   170,    -1,    -1,    -1,   174,   175,   176,    -1,
     178,    -1,   180,    -1,    -1,    -1,   184,   185,    -1,   187,
      -1,   189,   190,   191,   192,   193,   194,   195,    -1,   197,
     198,   199,   200,    -1,   202,   203,   204,   205,   206,   207,
     208,    -1,   210,    -1,   212,   213,   214,   215,   216,   217,
     218,   219,    -1,   221,    -1,   223,    -1,    -1,   226,    -1,
     228,    -1,   230,   231,   232,   233,   234,    -1,    -1,   237,
      -1,   239,    -1,    -1,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,    -1,   271,   272,   273,   274,    -1,   276,    -1,
     278,   279,    -1,   281,    -1,   283,   284,   285,   286,   287,
     288,    -1,   290,   291,    -1,    -1,   294,   295,   296,    -1,
      -1,   299,   300,    -1,   302,    -1,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,    -1,    -1,   316,    -1,
      -1,    -1,    -1,   321,   322,   323,    -1,   325,   326,   327,
     328,   329,   330,    -1,   332,   333,   334,   335,   336,    -1,
      -1,   339,    -1,   341,   342,   343,   344,   345,   346,   347,
     348,    -1,   350,   351,   352,    -1,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,    -1,   365,   366,    -1,
     368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,    -1,    -1,   385,   386,   387,
     388,   389,   390,   391,   392,   393,    -1,   395,    -1,    -1,
     398,   399,   400,    -1,    -1,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,   417,
     418,    -1,   420,   421,    -1,   423,    -1,   425,   426,   427,
     428,   429,    -1,   431,   432,    -1,    -1,    -1,   436,   437,
     438,   439,   440,    -1,   442,   443,   444,   445,   446,   447,
     448,   449,    -1,    -1,   452,   453,   454,    -1,   456,   457,
     458,   459,    -1,   461,   462,   463,   464,   465,   466,   467,
      -1,   469,    -1,   471,    -1,   473,   474,   475,   476,    -1,
      -1,    -1,   480,    -1,    -1,   483,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,   499,   500,   501,   502,   503,     3,     4,     5,    -1,
      -1,    -1,     9,    -1,    -1,   513,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    -1,
      27,    28,    29,    30,    -1,    32,    33,    34,    -1,    -1,
      -1,    38,    -1,    -1,    -1,    -1,    -1,    44,    45,    46,
      -1,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    58,    59,    -1,    61,    62,    63,    64,    65,    66,
      -1,    -1,    69,    70,    71,    72,    73,    -1,    75,    76,
      77,    78,    79,    -1,    81,    -1,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    -1,    94,    95,    96,
      97,    98,    -1,    -1,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
      -1,   118,   119,   120,   121,   122,   123,    -1,   125,    -1,
     127,   128,   129,   130,    -1,    -1,   133,   134,   135,   136,
     137,    -1,    -1,    -1,   141,   142,   143,    -1,   145,   146,
     147,    -1,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,   160,   161,    -1,   163,   164,   165,   166,
      -1,   168,    -1,   170,   171,    -1,   173,   174,   175,   176,
     177,   178,    -1,   180,    -1,    -1,    -1,   184,   185,    -1,
     187,    -1,   189,   190,   191,   192,   193,   194,   195,   196,
     197,   198,   199,   200,    -1,   202,   203,   204,   205,   206,
     207,   208,    -1,   210,   211,   212,   213,   214,   215,   216,
     217,   218,   219,    -1,   221,    -1,   223,   224,   225,   226,
     227,   228,    -1,   230,   231,   232,   233,   234,    -1,    -1,
     237,   238,   239,   240,    -1,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,    -1,   276,
      -1,   278,   279,   280,   281,    -1,   283,   284,   285,   286,
     287,   288,    -1,   290,   291,   292,    -1,   294,   295,   296,
      -1,    -1,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,    -1,    -1,   316,
      -1,    -1,    -1,    -1,   321,   322,   323,   324,   325,   326,
     327,   328,   329,   330,    -1,   332,   333,   334,   335,   336,
      -1,    -1,   339,    -1,   341,   342,   343,   344,   345,   346,
     347,   348,    -1,   350,   351,   352,    -1,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,    -1,   365,   366,
     367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,    -1,   384,   385,   386,
     387,   388,   389,   390,   391,   392,   393,    -1,   395,   396,
      -1,   398,   399,   400,    -1,    -1,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
     417,   418,    -1,   420,   421,    -1,   423,   424,   425,   426,
     427,   428,   429,    -1,   431,   432,    -1,    -1,    -1,   436,
     437,   438,   439,   440,   441,   442,   443,   444,   445,   446,
     447,   448,   449,    -1,    -1,   452,   453,   454,    -1,   456,
     457,   458,   459,    -1,   461,   462,   463,   464,   465,   466,
     467,    -1,   469,   470,   471,    -1,   473,   474,   475,   476,
      -1,    -1,    -1,   480,    -1,    -1,   483,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,   498,   499,   500,   501,   502,   503,     3,     4,     5,
      -1,    -1,    -1,     9,   511,   512,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      -1,    27,    28,    29,    30,    -1,    32,    33,    34,    -1,
      -1,    -1,    38,    -1,    -1,    -1,    -1,    -1,    44,    45,
      46,    -1,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    -1,    61,    62,    63,    64,    65,
      66,    -1,    -1,    69,    70,    71,    72,    73,    -1,    75,
      76,    77,    78,    79,    -1,    81,    -1,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    -1,    94,    95,
      96,    97,    98,    -1,    -1,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,    -1,   118,   119,   120,   121,   122,   123,    -1,   125,
      -1,   127,   128,   129,   130,    -1,    -1,   133,   134,   135,
     136,   137,    -1,    -1,    -1,   141,   142,   143,    -1,   145,
     146,   147,    -1,   149,   150,   151,   152,   153,   154,   155,
     156,   157,   158,   159,   160,   161,    -1,   163,   164,   165,
     166,    -1,   168,    -1,   170,   171,    -1,   173,   174,   175,
     176,   177,   178,    -1,   180,    -1,    -1,    -1,   184,   185,
      -1,   187,    -1,   189,   190,   191,   192,   193,   194,   195,
     196,   197,   198,   199,   200,    -1,   202,   203,   204,   205,
     206,   207,   208,    -1,   210,   211,   212,   213,   214,   215,
     216,   217,   218,   219,    -1,   221,    -1,   223,   224,   225,
     226,   227,   228,    -1,   230,   231,   232,   233,   234,    -1,
      -1,   237,   238,   239,   240,    -1,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,    -1,
     276,    -1,   278,   279,   280,   281,    -1,   283,   284,   285,
     286,   287,   288,    -1,   290,   291,   292,    -1,   294,   295,
     296,    -1,    -1,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,    -1,    -1,
     316,    -1,    -1,    -1,    -1,   321,   322,   323,   324,   325,
     326,   327,   328,   329,   330,    -1,   332,   333,   334,   335,
     336,    -1,    -1,   339,    -1,   341,   342,   343,   344,   345,
     346,   347,   348,    -1,   350,   351,   352,    -1,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,    -1,   365,
     366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,    -1,   384,   385,
     386,   387,   388,   389,   390,   391,   392,   393,    -1,   395,
     396,    -1,   398,   399,   400,    -1,    -1,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,   417,   418,    -1,   420,   421,    -1,   423,   424,   425,
     426,   427,   428,   429,    -1,   431,   432,    -1,    -1,    -1,
     436,   437,   438,   439,   440,   441,   442,   443,   444,   445,
     446,   447,   448,   449,    -1,    -1,   452,   453,   454,    -1,
     456,   457,   458,   459,    -1,   461,   462,   463,   464,   465,
     466,   467,    -1,   469,   470,   471,    -1,   473,   474,   475,
     476,    -1,    -1,    -1,   480,    -1,    -1,   483,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,   498,   499,   500,   501,   502,   503,     3,     4,
       5,    -1,    -1,    -1,     9,   511,   512,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,
      25,    -1,    27,    28,    29,    30,    -1,    32,    33,    34,
      -1,    -1,    -1,    38,    -1,    -1,    -1,    -1,    -1,    44,
      45,    46,    -1,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    -1,    61,    62,    63,    64,
      65,    66,    -1,    -1,    69,    70,    71,    72,    73,    -1,
      75,    76,    77,    78,    79,    -1,    81,    -1,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    -1,    94,
      95,    96,    97,    98,    -1,    -1,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
      -1,   116,    -1,   118,   119,   120,   121,   122,   123,    -1,
     125,    -1,   127,   128,   129,   130,    -1,    -1,   133,   134,
     135,   136,   137,    -1,    -1,    -1,   141,   142,   143,    -1,
     145,   146,   147,    -1,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   161,    -1,   163,   164,
     165,   166,    -1,   168,    -1,   170,   171,    -1,   173,   174,
     175,   176,   177,   178,    -1,   180,    -1,    -1,    -1,   184,
     185,    -1,   187,    -1,   189,   190,   191,   192,   193,   194,
     195,   196,   197,   198,   199,   200,    -1,   202,   203,   204,
     205,   206,   207,   208,    -1,   210,   211,   212,   213,   214,
     215,   216,   217,   218,   219,    -1,   221,    -1,   223,   224,
     225,   226,   227,   228,    -1,   230,   231,   232,   233,   234,
      -1,    -1,   237,   238,   239,   240,    -1,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
      -1,   276,    -1,   278,   279,   280,   281,    -1,   283,   284,
     285,   286,   287,   288,    -1,   290,   291,   292,    -1,   294,
     295,   296,    -1,    -1,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,    -1,
      -1,   316,    -1,    -1,    -1,    -1,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,    -1,   332,   333,   334,
     335,   336,    -1,    -1,   339,    -1,   341,   342,   343,   344,
     345,   346,   347,   348,    -1,   350,   351,   352,    -1,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,    -1,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,    -1,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,    -1,
     395,   396,    -1,   398,   399,   400,    -1,    -1,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,    -1,   420,   421,    -1,   423,   424,
     425,   426,   427,   428,   429,    -1,   431,   432,    -1,    -1,
      -1,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,    -1,    -1,   452,   453,   454,
      -1,   456,   457,   458,   459,    -1,   461,   462,   463,   464,
     465,   466,   467,    -1,   469,   470,   471,    -1,   473,   474,
     475,   476,    -1,    -1,    -1,   480,    -1,    -1,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,    -1,
      -1,     8,    -1,    -1,    11,    -1,   511,   512,    15,    16,
      17,    18,    19,    20,    21,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      37,    -1,    -1,    -1,    -1,    -1,    43,    -1,    -1,    -1,
      -1,    48,     8,    -1,    -1,    11,    -1,    -1,    55,    15,
      16,    17,    18,    19,    20,    21,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    37,    -1,    80,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    48,     8,    -1,    -1,    11,    -1,    -1,    55,
      15,    16,    17,    18,    19,    20,    21,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    37,    -1,    80,    -1,    -1,   124,    -1,    -1,
      -1,    -1,    -1,    48,     8,    -1,    -1,    11,    -1,    -1,
      55,    15,    16,    17,    18,    19,    20,    21,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    37,    -1,    80,    -1,    -1,    42,    -1,
      -1,    -1,    -1,    -1,    48,    -1,    -1,    -1,    -1,    -1,
     177,    55,    -1,    -1,     8,    -1,    -1,    11,    -1,    -1,
      -1,    15,    16,    17,    18,    19,    20,    21,    -1,   196,
      -1,    -1,    -1,    -1,   201,    -1,    80,    -1,    -1,    -1,
      -1,   167,    -1,    37,    -1,    -1,   172,    -1,    -1,    -1,
      -1,   177,    -1,    -1,    48,    -1,    -1,   224,   225,    -1,
      -1,    55,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     196,    -1,    -1,   240,    -1,   201,    -1,    -1,    -1,    -1,
      -1,   166,    -1,    -1,    -1,    -1,    80,    -1,    -1,    -1,
      -1,    -1,   177,    -1,    -1,    -1,    -1,    -1,   224,   225,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     277,   196,    -1,   280,   240,    -1,   201,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   294,    -1,    -1,
     297,    -1,    -1,   177,    -1,    -1,    -1,    -1,    -1,   224,
     225,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   277,   196,    -1,   280,   240,    -1,   201,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   294,    -1,
      -1,   297,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     224,   225,    -1,   177,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   277,    -1,    -1,   280,   240,    -1,    -1,    -1,
      -1,    -1,   196,    -1,    -1,    -1,    -1,   201,    -1,   294,
      -1,    -1,   297,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   396,
     224,   225,    -1,   277,    -1,    -1,   280,    -1,    -1,    -1,
      -1,   326,    -1,    -1,    -1,    -1,   240,    -1,    -1,    -1,
     294,    -1,    -1,   297,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     396,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   277,    -1,    -1,   280,    -1,    -1,    -1,
      -1,    -1,    -1,   460,    -1,    -1,    -1,    -1,    -1,    -1,
     294,    -1,    -1,   297,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   396,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   320,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   504,    -1,    -1,
     507,   508,   509,    -1,   511,   512,   513,   514,   515,   516,
      -1,    -1,   396,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,     8,    -1,    -1,    11,    -1,    -1,    -1,
      15,    16,    17,    18,    19,    20,    21,    -1,   504,    -1,
      -1,   507,   508,   509,    -1,   511,   512,   513,   514,   515,
     516,    -1,    37,    -1,    -1,    -1,    -1,    42,    -1,    -1,
      -1,    -1,   396,    48,     8,    -1,    -1,    11,    -1,    -1,
      55,    15,    16,    17,    18,    19,    20,    21,    -1,   504,
      -1,    -1,   507,   508,   509,    -1,   511,   512,   513,   514,
     515,   516,    -1,    37,    -1,    80,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    48,    -1,    -1,    -1,    -1,    -1,
      -1,    55,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     504,    -1,    -1,   507,   508,   509,    -1,   511,   512,   513,
     514,   515,   516,    -1,    -1,    -1,    80,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,     8,    -1,    -1,    11,    -1,    -1,
      -1,    15,    16,    17,    18,    19,    20,    21,    -1,    -1,
     504,    -1,    -1,   507,   508,   509,    -1,   511,   512,   513,
     514,   515,   516,    37,    -1,    -1,    -1,    -1,    42,    -1,
      -1,    -1,   177,    -1,    48,    -1,     8,    -1,    -1,    11,
      -1,    55,    -1,    15,    16,    17,    18,    19,    20,    21,
      -1,   196,    -1,    -1,    -1,    -1,   201,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    37,    80,    -1,   172,    -1,
      -1,    -1,    -1,   177,    -1,    -1,    48,    -1,    -1,   224,
     225,    -1,    -1,    55,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   196,    -1,    -1,   240,    -1,   201,    -1,    -1,
      -1,    -1,    -1,     8,    -1,    -1,    11,    -1,    80,    -1,
      -1,    16,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     224,   225,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   277,    -1,    -1,   280,   240,    -1,    -1,    -1,
      -1,    -1,    -1,    48,    -1,    -1,    -1,    -1,    -1,   294,
      55,    -1,   297,    -1,    -1,    -1,    -1,    -1,    -1,     8,
      -1,    -1,    11,   177,    -1,    -1,    15,    16,    17,    18,
      19,    20,    21,   277,    -1,    80,   280,    -1,    -1,    -1,
      -1,    -1,   196,    -1,    -1,    -1,    -1,   201,    37,    -1,
     294,    -1,    -1,   297,    -1,   167,    -1,    -1,    -1,    48,
      -1,    -1,    -1,    -1,    -1,   177,    55,    -1,    -1,    -1,
     224,   225,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   196,    -1,   240,    -1,    -1,   201,
      -1,    80,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   146,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   396,   224,   225,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   277,    -1,    -1,   280,    -1,   240,    -1,
      -1,    -1,   177,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     294,    -1,    -1,   297,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   196,   396,    -1,    -1,    -1,   201,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   277,    -1,    -1,   280,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   294,    -1,    -1,   297,    -1,    -1,   177,    -1,
      -1,    -1,    -1,    -1,    -1,   240,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   196,    -1,    -1,
      -1,    -1,   201,    -1,    -1,    -1,    -1,    -1,    -1,   504,
      -1,    -1,   507,   508,   509,    -1,   511,   512,   513,   514,
     515,   516,    -1,    -1,    -1,   224,   225,    -1,    -1,    -1,
      -1,    -1,   396,    -1,    -1,     8,    -1,    -1,    11,   294,
      -1,   240,    15,    16,    17,    18,    19,    20,    21,    -1,
     504,    -1,    -1,   507,   508,   509,    -1,   511,   512,   513,
     514,   515,   516,    -1,    37,    -1,    -1,    -1,    -1,    42,
      -1,    -1,    -1,    -1,   396,    48,    -1,    -1,   277,    -1,
      -1,   280,    55,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   294,    -1,    -1,   297,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,     8,    80,    -1,    11,
      -1,    -1,    -1,    15,    16,    17,    18,    19,    20,    21,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    37,    -1,    -1,    -1,    -1,
     504,   396,    -1,   507,   508,   509,    48,   511,   512,   513,
     514,   515,   516,    55,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    80,    -1,
      -1,    -1,   504,    -1,    -1,   507,   508,   509,    -1,   511,
     512,   513,   514,   515,   516,    -1,    -1,   396,     8,    -1,
      -1,    11,    -1,    -1,   177,    15,    16,    17,    18,    19,
      20,    21,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   196,    -1,    -1,    -1,    37,   201,     8,
      -1,   430,    11,    -1,    -1,    -1,    15,    16,    48,    -1,
      19,    20,    21,    -1,    -1,    55,    -1,    -1,    -1,   504,
      -1,   224,   225,    -1,    -1,    -1,   511,   512,   513,   514,
     515,   516,    -1,    -1,    -1,    -1,    -1,   240,    -1,    48,
      80,    -1,    -1,    -1,    -1,   177,    55,    -1,    -1,    -1,
       8,    -1,    -1,    11,    -1,    -1,    -1,    -1,    16,    -1,
      -1,    19,    20,    21,   196,    -1,    -1,    -1,    -1,   201,
      -1,    80,    -1,    -1,   277,   504,    -1,   280,   507,   508,
     509,    -1,   511,   512,   513,   514,   515,   516,    -1,    -1,
      48,   294,   224,   225,   297,    -1,    -1,    55,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   240,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    80,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
       8,    -1,    -1,    11,    -1,    -1,    -1,   177,    16,    -1,
      -1,    19,    20,    21,    -1,   277,    -1,    -1,   280,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   196,    -1,    -1,    37,
      -1,   201,   294,    -1,    -1,   297,    -1,    -1,   177,    -1,
      48,    -1,    -1,    -1,    -1,    -1,    -1,    55,    -1,    -1,
      -1,    -1,    -1,    -1,   224,   225,    -1,   196,    -1,    -1,
      -1,    -1,   201,   396,    -1,    -1,    -1,    -1,    -1,    -1,
     240,     8,    80,    -1,    11,    -1,    -1,    -1,    -1,    16,
      -1,    -1,    19,    20,    21,   224,   225,    -1,    -1,   177,
      -1,    -1,     8,    -1,    -1,    11,    -1,    -1,    -1,    -1,
      16,   240,    -1,    -1,    -1,    -1,    -1,   277,   196,    -1,
     280,    48,    -1,   201,    -1,    -1,    -1,    -1,    55,    -1,
      -1,    -1,    -1,    -1,   294,    -1,    -1,   297,    -1,    -1,
      -1,    -1,    48,    -1,   396,    -1,   224,   225,   277,    55,
      -1,   280,    -1,    80,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   240,    -1,    -1,   294,    -1,    -1,    -1,    -1,
      -1,    -1,     8,    -1,    80,    11,    -1,    -1,    -1,   177,
      16,   504,    -1,    -1,   507,   508,   509,    -1,   511,   512,
     513,   514,   515,   516,    -1,    -1,    -1,    -1,   196,    -1,
      -1,    -1,   280,   201,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    48,    -1,    -1,    -1,   294,    -1,    -1,    55,
      -1,    -1,    -1,    -1,    -1,    -1,   224,   225,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   396,    -1,    -1,    -1,
     146,    -1,   240,    -1,    80,    -1,    -1,    -1,    -1,    -1,
     177,    -1,   504,    -1,    -1,   507,   508,   509,    -1,   511,
     512,   513,   514,   515,   516,    -1,    -1,   396,    -1,   196,
      -1,   177,    -1,    -1,   201,    -1,    -1,    -1,    -1,   277,
      -1,    -1,   280,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     196,    -1,    -1,    -1,    -1,   201,   294,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     146,    -1,    -1,   240,    -1,    -1,    -1,    -1,   396,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   240,    -1,    -1,    -1,    -1,    -1,
      -1,   177,    -1,    -1,   504,    -1,    -1,   507,   508,   509,
      -1,   511,   512,   513,   514,   515,   516,    -1,    -1,    -1,
     196,    -1,    -1,    -1,    -1,   201,    -1,   294,    -1,     8,
      -1,    -1,    11,    -1,    -1,   504,    -1,    16,   507,   508,
     509,    -1,   511,   512,   513,   514,   515,   516,   294,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   396,    -1,
      -1,    -1,    -1,    -1,   240,    -1,    -1,    -1,    -1,    48,
      -1,    -1,    -1,    -1,    -1,    -1,    55,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   504,    -1,    -1,   507,
     508,   509,    -1,   511,   512,   513,   514,   515,   516,    -1,
      -1,    80,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   294,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   396,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     396,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   504,   146,    -1,   507,
     508,   509,    -1,   511,   512,   513,   514,   515,   516,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   177,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   196,    -1,    -1,
     396,    -1,   201,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   504,    -1,    -1,
     507,   508,   509,    -1,   511,   512,   513,   514,   515,   516,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   504,    -1,
      -1,   240,    -1,    -1,    -1,   511,   512,   513,   514,   515,
     516,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   294,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   504,    -1,
      -1,    -1,    -1,    -1,    -1,   511,   512,   513,   514,   515,
     516,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   396,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     3,
      -1,     5,    -1,    -1,    -1,   504,    -1,    -1,    -1,    -1,
      -1,    -1,   511,   512,   513,   514,   515,   516,    22,    23,
      24,    25,    -1,    27,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    -1,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
      74,    75,    76,    77,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    95,    96,    97,    98,    -1,   100,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
     124,   125,    -1,   127,   128,   129,   130,   131,   132,   133,
     134,   135,   136,   137,    -1,    -1,   140,   141,   142,   143,
     144,   145,   146,   147,   148,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,   159,   160,   161,   162,   163,
     164,   165,   166,   167,   168,   169,   170,   171,   172,   173,
     174,   175,   176,   177,   178,   179,   180,    -1,   182,   183,
     184,   185,    -1,   187,   188,   189,   190,   191,   192,   193,
     194,   195,   196,   197,   198,   199,   200,   201,   202,   203,
     204,   205,   206,   207,   208,   209,   210,   211,   212,   213,
     214,   215,   216,   217,   218,   219,   220,   221,   222,   223,
     224,   225,   226,   227,   228,    -1,   230,   231,   232,   233,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,    -1,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
      -1,    -1,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,   329,   330,   331,   332,   333,
     334,   335,   336,    -1,    -1,   339,   340,   341,   342,   343,
     344,   345,   346,   347,   348,   349,   350,   351,   352,    -1,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,   385,   386,   387,   388,   389,   390,   391,   392,   393,
      -1,   395,   396,    -1,   398,   399,   400,   401,    -1,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,   428,   429,   430,   431,   432,   433,
      -1,   435,   436,   437,   438,   439,   440,   441,   442,   443,
     444,   445,   446,   447,   448,   449,   450,   451,   452,   453,
     454,   455,   456,   457,   458,   459,   460,   461,   462,   463,
     464,   465,   466,   467,   468,   469,   470,   471,    -1,   473,
     474,   475,   476,    -1,   478,   479,   480,   481,   482,   483,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,   499,   500,   501,   502,   503,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,
      23,    24,    25,    -1,    27,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    -1,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      53,    54,    55,    56,    57,    58,    59,    60,    61,    62,
      63,    64,    65,    66,    67,    68,    69,    70,    71,    72,
      73,    74,    75,    76,    77,    78,    79,    80,    81,    82,
      83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      93,    94,    95,    96,    97,    98,    -1,   100,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,   117,   118,   119,   120,   121,   122,
     123,   124,   125,    -1,   127,   128,   129,   130,   131,   132,
     133,   134,   135,   136,   137,    -1,    -1,   140,   141,   142,
     143,   144,   145,   146,   147,   148,   149,   150,   151,   152,
     153,   154,   155,   156,   157,   158,   159,   160,   161,   162,
     163,   164,   165,   166,   167,   168,   169,   170,   171,   172,
     173,   174,   175,   176,   177,   178,   179,   180,    -1,   182,
     183,   184,   185,    -1,   187,   188,   189,   190,   191,   192,
     193,   194,   195,   196,   197,   198,   199,   200,   201,   202,
     203,   204,   205,   206,   207,   208,   209,   210,   211,   212,
     213,   214,   215,   216,   217,   218,   219,   220,   221,   222,
     223,   224,   225,   226,   227,   228,    -1,   230,   231,   232,
     233,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,    -1,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,    -1,    -1,   316,   317,   318,   319,   320,   321,   322,
     323,   324,   325,   326,   327,   328,   329,   330,   331,   332,
     333,   334,   335,   336,    -1,    -1,   339,   340,   341,   342,
     343,   344,   345,   346,   347,   348,   349,   350,   351,   352,
      -1,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,   385,   386,   387,   388,   389,   390,   391,   392,
     393,    -1,   395,   396,    -1,   398,   399,   400,   401,    -1,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,   427,   428,   429,   430,   431,   432,
     433,    -1,   435,   436,   437,   438,   439,   440,   441,   442,
     443,   444,   445,   446,   447,   448,   449,   450,   451,   452,
     453,   454,   455,   456,   457,   458,   459,   460,   461,   462,
     463,   464,   465,   466,   467,   468,   469,   470,   471,    -1,
     473,   474,   475,   476,    -1,   478,   479,   480,   481,   482,
     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   500,   501,   502,
     503,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    -1,    27,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    -1,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
      72,    73,    74,    75,    76,    77,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    95,    96,    97,    98,    -1,   100,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
     122,   123,   124,   125,    -1,   127,   128,   129,   130,   131,
     132,   133,   134,   135,   136,   137,    -1,    -1,   140,   141,
     142,   143,   144,   145,   146,   147,   148,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,   160,   161,
     162,   163,   164,   165,   166,   167,   168,   169,   170,   171,
     172,   173,   174,   175,   176,   177,   178,   179,   180,    -1,
     182,   183,   184,   185,    -1,   187,   188,   189,   190,   191,
     192,   193,   194,   195,   196,   197,   198,   199,   200,   201,
     202,   203,   204,   205,   206,   207,   208,   209,   210,   211,
     212,   213,   214,   215,   216,   217,   218,   219,   220,   221,
     222,   223,   224,   225,   226,   227,   228,    -1,   230,   231,
     232,   233,   234,   235,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,    -1,   276,   277,   278,   279,   280,   281,
     282,   283,   284,   285,   286,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,    -1,    -1,   316,   317,   318,   319,   320,   321,
     322,   323,   324,   325,   326,   327,   328,   329,   330,   331,
     332,   333,   334,   335,   336,    -1,    -1,   339,   340,   341,
     342,   343,   344,   345,   346,   347,   348,   349,   350,   351,
     352,    -1,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,   386,   387,   388,   389,   390,   391,
     392,   393,    -1,   395,   396,    -1,   398,   399,   400,   401,
      -1,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,   428,   429,   430,   431,
     432,   433,    -1,   435,   436,   437,   438,   439,   440,   441,
     442,   443,   444,   445,   446,   447,   448,   449,   450,   451,
     452,   453,   454,   455,   456,   457,   458,   459,   460,   461,
     462,   463,   464,   465,   466,   467,   468,   469,   470,   471,
      -1,   473,   474,   475,   476,    -1,   478,   479,   480,   481,
     482,   483,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,   498,   499,   500,   501,
     502,   503,     3,    -1,     5,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    -1,    27,    28,    29,    30,
      -1,    32,    33,    34,    -1,    -1,    -1,    38,    -1,    -1,
      -1,    -1,    -1,    44,    45,    46,    -1,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    58,    59,    -1,
      61,    62,    63,    64,    65,    66,    -1,    -1,    69,    70,
      71,    72,    73,    -1,    75,    76,    77,    78,    79,    -1,
      81,    -1,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    -1,    94,    95,    96,    97,    98,    -1,    -1,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,    -1,   116,    -1,   118,   119,   120,
     121,   122,   123,    -1,   125,    -1,   127,   128,   129,   130,
      -1,    -1,   133,   134,   135,   136,   137,    -1,    -1,    -1,
     141,   142,   143,    -1,   145,   146,   147,    -1,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
     161,    -1,   163,   164,   165,   166,    -1,   168,    -1,   170,
     171,    -1,   173,   174,   175,   176,   177,   178,    -1,   180,
      -1,    -1,    -1,   184,   185,    -1,   187,    -1,   189,   190,
     191,   192,   193,   194,   195,   196,   197,   198,   199,   200,
      -1,   202,   203,   204,   205,   206,   207,   208,    -1,   210,
     211,   212,   213,   214,   215,   216,   217,   218,   219,    -1,
     221,    -1,   223,   224,   225,   226,   227,   228,    -1,   230,
     231,   232,   233,   234,    -1,    -1,   237,   238,   239,   240,
      -1,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,    -1,   276,    -1,   278,   279,   280,
     281,    -1,   283,   284,   285,   286,   287,   288,    -1,   290,
     291,   292,    -1,   294,   295,   296,    -1,    -1,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,    -1,    -1,   316,    -1,    -1,    -1,    -1,
     321,   322,   323,   324,   325,   326,   327,   328,   329,   330,
      -1,   332,   333,   334,   335,   336,    -1,    -1,   339,    -1,
     341,   342,   343,   344,   345,   346,   347,   348,    -1,   350,
     351,   352,    -1,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,    -1,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,    -1,   384,   385,   386,   387,   388,   389,   390,
     391,   392,   393,    -1,   395,   396,    -1,   398,   399,   400,
      -1,    -1,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,   417,   418,    -1,   420,
     421,    -1,   423,   424,   425,   426,   427,   428,   429,    -1,
     431,   432,    -1,    -1,    -1,   436,   437,   438,   439,   440,
     441,   442,   443,   444,   445,   446,   447,   448,   449,    -1,
      -1,   452,   453,   454,    -1,   456,   457,   458,   459,    -1,
     461,   462,   463,   464,   465,   466,   467,    -1,   469,   470,
     471,    -1,   473,   474,   475,   476,    -1,    -1,    -1,   480,
      -1,    -1,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,   499,   500,
     501,   502,   503,     3,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    22,    23,    24,    25,    -1,    27,    28,    29,
      30,    -1,    32,    33,    34,    35,    36,    -1,    38,    -1,
      -1,    -1,    -1,    -1,    44,    45,    46,    -1,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
      -1,    61,    62,    63,    64,    65,    66,    -1,    -1,    69,
      70,    71,    72,    73,    -1,    75,    76,    77,    78,    79,
      -1,    81,    -1,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    -1,    94,    95,    96,    97,    98,    -1,
      -1,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,    -1,   116,    -1,   118,   119,
     120,   121,   122,   123,    -1,   125,    -1,   127,   128,   129,
     130,    -1,    -1,   133,   134,   135,   136,   137,    -1,    -1,
      -1,   141,   142,   143,    -1,   145,   146,   147,    -1,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
      -1,   161,    -1,   163,   164,   165,   166,    -1,   168,    -1,
     170,   171,    -1,   173,   174,   175,   176,   177,   178,    -1,
     180,    -1,    -1,    -1,   184,   185,    -1,   187,    -1,   189,
     190,   191,   192,   193,   194,   195,   196,   197,   198,   199,
     200,    -1,   202,   203,   204,   205,   206,   207,   208,    -1,
     210,   211,   212,   213,   214,   215,   216,   217,   218,   219,
      -1,   221,    -1,   223,   224,   225,   226,   227,   228,    -1,
     230,   231,   232,   233,   234,    -1,    -1,   237,   238,   239,
     240,    -1,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,    -1,   276,    -1,   278,   279,
     280,   281,    -1,   283,   284,   285,   286,   287,   288,    -1,
     290,   291,    -1,    -1,   294,   295,   296,    -1,    -1,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,    -1,    -1,   316,    -1,    -1,    -1,
      -1,   321,   322,   323,   324,   325,   326,   327,   328,   329,
     330,    -1,   332,   333,   334,   335,   336,    -1,    -1,   339,
      -1,   341,   342,   343,   344,   345,   346,   347,   348,    -1,
     350,   351,   352,    -1,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,    -1,   365,   366,   367,   368,   369,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,    -1,   384,   385,   386,   387,   388,   389,
     390,   391,   392,   393,    -1,   395,   396,    -1,   398,   399,
     400,    -1,    -1,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,   417,   418,    -1,
     420,   421,    -1,   423,   424,   425,   426,   427,   428,   429,
      -1,   431,   432,    -1,    -1,    -1,   436,   437,   438,   439,
     440,    -1,   442,   443,   444,   445,   446,   447,   448,   449,
      -1,    -1,   452,   453,   454,    -1,   456,   457,   458,   459,
      -1,   461,   462,   463,   464,   465,   466,   467,    -1,   469,
     470,   471,    -1,   473,   474,   475,   476,    -1,    -1,    -1,
     480,    -1,    -1,   483,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,   498,   499,
     500,   501,   502,   503,     3,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    22,    23,    24,    25,    -1,    27,    28,
      29,    30,    -1,    32,    33,    34,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    44,    45,    46,    -1,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    58,
      59,    -1,    61,    62,    63,    64,    65,    66,    -1,    68,
      69,    70,    71,    72,    73,    -1,    75,    76,    77,    78,
      79,    -1,    81,    -1,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    -1,    94,    95,    96,    97,    98,
      -1,    -1,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,    -1,   116,    -1,   118,
     119,   120,   121,   122,   123,    -1,   125,    -1,   127,   128,
     129,   130,    -1,    -1,   133,   134,   135,   136,   137,    -1,
      -1,    -1,   141,   142,   143,    -1,   145,   146,   147,    -1,
     149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
     159,    -1,   161,    -1,   163,   164,   165,   166,    -1,   168,
      -1,   170,   171,    -1,   173,   174,   175,   176,   177,   178,
      -1,   180,    -1,    -1,    -1,   184,   185,    -1,   187,    -1,
     189,   190,   191,   192,   193,   194,   195,   196,   197,   198,
     199,   200,    -1,   202,   203,   204,   205,   206,   207,   208,
      -1,   210,   211,   212,   213,   214,   215,   216,   217,   218,
     219,    -1,   221,    -1,   223,   224,   225,   226,   227,   228,
      -1,   230,   231,   232,   233,   234,    -1,    -1,   237,   238,
     239,   240,    -1,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,    -1,   276,    -1,   278,
     279,   280,   281,    -1,   283,   284,   285,   286,   287,   288,
      -1,   290,   291,    -1,    -1,   294,   295,   296,    -1,    -1,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,    -1,    -1,   316,    -1,    -1,
      -1,    -1,   321,   322,   323,   324,   325,   326,   327,   328,
     329,   330,    -1,   332,   333,   334,   335,   336,    -1,    -1,
     339,    -1,   341,   342,   343,   344,   345,   346,   347,   348,
      -1,   350,   351,   352,    -1,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,    -1,   365,   366,   367,   368,
     369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,    -1,    -1,   385,   386,   387,   388,
     389,   390,   391,   392,   393,    -1,   395,   396,    -1,   398,
     399,   400,    -1,    -1,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,   417,   418,
      -1,   420,   421,    -1,   423,   424,   425,   426,   427,   428,
     429,    -1,   431,   432,    -1,    -1,    -1,   436,   437,   438,
     439,   440,    -1,   442,   443,   444,   445,   446,   447,   448,
     449,    -1,    -1,   452,   453,   454,    -1,   456,   457,   458,
     459,    -1,   461,   462,   463,   464,   465,   466,   467,    -1,
     469,   470,   471,    -1,   473,   474,   475,   476,    -1,    -1,
      -1,   480,    -1,    -1,   483,   484,   485,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
     499,   500,   501,   502,   503,     3,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    -1,    27,
      28,    29,    30,    -1,    32,    33,    34,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    44,    45,    46,    -1,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      58,    59,    -1,    61,    62,    63,    64,    65,    66,    -1,
      -1,    69,    70,    71,    72,    73,    -1,    75,    76,    77,
      78,    79,    -1,    81,    -1,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    -1,    94,    95,    96,    97,
      98,    -1,    -1,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,    -1,   116,    -1,
     118,   119,   120,   121,   122,   123,    -1,   125,    -1,   127,
     128,   129,   130,    -1,    -1,   133,   134,   135,   136,   137,
      -1,    -1,    -1,   141,   142,   143,    -1,   145,   146,   147,
      -1,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,   159,    -1,   161,    -1,   163,   164,   165,   166,    -1,
     168,    -1,   170,   171,    -1,   173,   174,   175,   176,   177,
     178,    -1,   180,    -1,    -1,    -1,   184,   185,    -1,   187,
      -1,   189,   190,   191,   192,   193,   194,   195,   196,   197,
     198,   199,   200,    -1,   202,   203,   204,   205,   206,   207,
     208,    -1,   210,   211,   212,   213,   214,   215,   216,   217,
     218,   219,    -1,   221,    -1,   223,   224,   225,   226,   227,
     228,    -1,   230,   231,   232,   233,   234,    -1,    -1,   237,
     238,   239,   240,    -1,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,    -1,   276,    -1,
     278,   279,   280,   281,    -1,   283,   284,   285,   286,   287,
     288,    -1,   290,   291,    -1,    -1,   294,   295,   296,    -1,
      -1,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,    -1,    -1,   316,    -1,
      -1,    -1,    -1,   321,   322,   323,   324,   325,   326,   327,
     328,   329,   330,    -1,   332,   333,   334,   335,   336,    -1,
      -1,   339,    -1,   341,   342,   343,   344,   345,   346,   347,
     348,    -1,   350,   351,   352,    -1,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,    -1,   365,   366,   367,
     368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,    -1,    -1,   385,   386,   387,
     388,   389,   390,   391,   392,   393,    -1,   395,   396,    -1,
     398,   399,   400,    -1,    -1,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,   417,
     418,    -1,   420,   421,    -1,   423,   424,   425,   426,   427,
     428,   429,    -1,   431,   432,    -1,    -1,    -1,   436,   437,
     438,   439,   440,    -1,   442,   443,   444,   445,   446,   447,
     448,   449,    -1,    -1,   452,   453,   454,    -1,   456,   457,
     458,   459,    -1,   461,   462,   463,   464,   465,   466,   467,
      -1,   469,   470,   471,    -1,   473,   474,   475,   476,    -1,
      -1,    -1,   480,    -1,    -1,   483,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,   499,   500,   501,   502,   503,     3,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    -1,
      27,    28,    29,    30,    -1,    32,    33,    34,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    45,    46,
      -1,    48,    49,    50,    -1,    52,    53,    54,    55,    56,
      -1,    58,    59,    -1,    61,    62,    63,    64,    65,    66,
      -1,    -1,    69,    70,    71,    72,    73,    74,    75,    76,
      77,    78,    79,    -1,    -1,    82,    83,    84,    85,    86,
      87,    88,    -1,    90,    91,    92,    93,    94,    95,    96,
      97,    98,    -1,    -1,    -1,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,    -1,   116,
      -1,   118,   119,   120,   121,   122,   123,    -1,   125,    -1,
     127,   128,   129,   130,    -1,    -1,   133,   134,   135,   136,
     137,    -1,    -1,    -1,   141,   142,   143,    -1,   145,   146,
     147,    -1,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,    -1,   161,    -1,   163,   164,   165,   166,
      -1,   168,   169,   170,    -1,    -1,    -1,   174,   175,   176,
      -1,   178,    -1,   180,    -1,    -1,    -1,   184,   185,    -1,
     187,    -1,   189,   190,   191,   192,   193,   194,   195,    -1,
     197,   198,   199,   200,    -1,   202,   203,   204,   205,   206,
     207,   208,    -1,   210,    -1,   212,   213,   214,   215,   216,
     217,   218,   219,    -1,   221,    -1,   223,    -1,    -1,   226,
      -1,   228,    -1,   230,   231,   232,   233,   234,    -1,    -1,
     237,    -1,   239,    -1,    -1,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,    -1,   271,   272,   273,   274,    -1,   276,
      -1,   278,   279,    -1,   281,    -1,   283,   284,   285,   286,
     287,   288,    -1,   290,   291,    -1,    -1,   294,   295,   296,
      -1,    -1,   299,   300,    -1,   302,    -1,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,    -1,    -1,   316,
      -1,    -1,    -1,    -1,   321,   322,   323,    -1,   325,   326,
     327,   328,   329,   330,   331,   332,   333,   334,   335,   336,
      -1,    -1,   339,    -1,   341,   342,   343,   344,   345,   346,
     347,   348,    -1,   350,   351,   352,    -1,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,    -1,   365,   366,
      -1,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,    -1,    -1,   385,   386,
     387,   388,   389,   390,   391,   392,   393,    -1,   395,    -1,
      -1,   398,   399,   400,    -1,    -1,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
     417,   418,    -1,   420,   421,    -1,   423,    -1,   425,   426,
     427,   428,   429,    -1,   431,   432,    -1,    -1,    -1,   436,
     437,   438,   439,   440,    -1,   442,   443,   444,   445,   446,
     447,   448,   449,    -1,   451,   452,   453,   454,    -1,   456,
     457,   458,   459,    -1,   461,   462,   463,   464,   465,   466,
     467,    -1,   469,    -1,   471,    -1,   473,   474,   475,   476,
      -1,    -1,    -1,   480,    -1,    -1,   483,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,   498,   499,   500,   501,   502,   503,     3,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      -1,    27,    28,    29,    30,    -1,    32,    33,    34,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    45,
      46,    -1,    48,    49,    50,    -1,    52,    53,    54,    55,
      56,    -1,    58,    59,    -1,    61,    62,    63,    64,    65,
      66,    -1,    -1,    69,    70,    71,    72,    73,    74,    75,
      76,    77,    78,    79,    -1,    -1,    -1,    83,    84,    85,
      86,    87,    88,    -1,    90,    91,    92,    93,    94,    95,
      96,    97,    98,    -1,    -1,    -1,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,    -1,
     116,    -1,   118,   119,   120,   121,   122,   123,    -1,   125,
      -1,   127,   128,   129,   130,    -1,    -1,   133,   134,   135,
     136,   137,    -1,    -1,    -1,   141,   142,   143,    -1,   145,
     146,   147,    -1,   149,   150,   151,   152,   153,   154,   155,
     156,   157,   158,   159,    -1,   161,    -1,   163,   164,   165,
     166,    -1,   168,   169,   170,    -1,    -1,    -1,   174,   175,
     176,    -1,   178,    -1,   180,    -1,    -1,    -1,   184,   185,
      -1,   187,    -1,   189,   190,   191,   192,   193,   194,   195,
      -1,   197,   198,   199,   200,    -1,   202,   203,   204,   205,
     206,   207,   208,    -1,   210,    -1,   212,   213,   214,   215,
     216,   217,   218,   219,    -1,   221,    -1,   223,    -1,    -1,
     226,    -1,   228,    -1,   230,   231,   232,   233,   234,    -1,
      -1,   237,    -1,   239,   240,    -1,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,    -1,   271,   272,   273,   274,    -1,
     276,    -1,   278,   279,    -1,   281,    -1,   283,   284,   285,
     286,   287,   288,    -1,   290,   291,    -1,    -1,   294,   295,
     296,    -1,    -1,   299,   300,    -1,   302,    -1,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,    -1,    -1,
     316,    -1,    -1,    -1,    -1,   321,   322,   323,    -1,   325,
     326,   327,   328,   329,   330,   331,   332,   333,   334,   335,
     336,    -1,    -1,   339,    -1,   341,   342,   343,   344,   345,
     346,   347,   348,    -1,   350,   351,   352,    -1,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,    -1,   365,
     366,    -1,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,    -1,    -1,   385,
     386,   387,   388,   389,   390,   391,   392,   393,    -1,   395,
      -1,    -1,   398,   399,   400,    -1,    -1,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,   417,   418,    -1,   420,   421,    -1,   423,    -1,   425,
     426,   427,   428,   429,    -1,   431,   432,    -1,    -1,    -1,
     436,   437,   438,   439,   440,    -1,   442,   443,   444,   445,
     446,   447,   448,   449,    -1,   451,   452,   453,   454,    -1,
     456,   457,   458,   459,    -1,   461,   462,   463,   464,   465,
     466,   467,    -1,   469,    -1,   471,    -1,   473,   474,   475,
     476,    -1,    -1,    -1,   480,    -1,    -1,   483,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,   498,   499,   500,   501,   502,   503,     3,    -1,
       5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,
      25,    -1,    27,    28,    29,    30,    -1,    32,    33,    34,
      35,    36,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      45,    46,    -1,    48,    49,    50,    -1,    52,    53,    54,
      55,    56,    -1,    58,    59,    -1,    61,    62,    63,    64,
      65,    66,    -1,    -1,    69,    70,    71,    72,    73,    -1,
      75,    76,    77,    78,    79,    -1,    -1,    -1,    83,    84,
      85,    86,    87,    88,    -1,    90,    91,    92,    -1,    94,
      95,    96,    97,    98,    -1,    -1,    -1,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
      -1,   116,    -1,   118,   119,   120,   121,   122,   123,    -1,
     125,    -1,   127,   128,   129,   130,    -1,    -1,   133,   134,
     135,   136,   137,    -1,    -1,    -1,   141,   142,   143,    -1,
     145,   146,   147,    -1,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,    -1,   161,    -1,   163,   164,
     165,   166,    -1,   168,    -1,   170,    -1,    -1,    -1,   174,
     175,   176,    -1,   178,    -1,   180,    -1,    -1,    -1,   184,
     185,    -1,   187,    -1,   189,   190,   191,   192,   193,   194,
     195,    -1,   197,   198,   199,   200,    -1,   202,   203,   204,
     205,   206,   207,   208,    -1,   210,    -1,   212,   213,   214,
     215,   216,   217,   218,   219,    -1,   221,    -1,   223,    -1,
      -1,   226,    -1,   228,    -1,   230,   231,   232,   233,   234,
      -1,    -1,   237,    -1,   239,    -1,    -1,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,    -1,   271,   272,   273,   274,
      -1,   276,    -1,   278,   279,    -1,   281,    -1,   283,   284,
     285,   286,   287,   288,    -1,   290,   291,    -1,    -1,   294,
     295,   296,    -1,    -1,   299,   300,    -1,   302,    -1,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,    -1,
      -1,   316,    -1,    -1,    -1,    -1,   321,   322,   323,    -1,
     325,   326,   327,   328,   329,   330,    -1,   332,   333,   334,
     335,   336,    -1,    -1,   339,    -1,   341,   342,   343,   344,
     345,   346,   347,   348,    -1,   350,   351,   352,    -1,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,    -1,
     365,   366,    -1,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,    -1,    -1,
     385,   386,   387,   388,   389,   390,   391,   392,   393,    -1,
     395,    -1,    -1,   398,   399,   400,    -1,    -1,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,    -1,   420,   421,    -1,   423,    -1,
     425,   426,   427,   428,   429,    -1,   431,   432,    -1,    -1,
      -1,   436,   437,   438,   439,   440,    -1,   442,   443,   444,
     445,   446,   447,   448,   449,    -1,    -1,   452,   453,   454,
      -1,   456,   457,   458,   459,    -1,   461,   462,   463,   464,
     465,   466,   467,    -1,   469,    -1,   471,    -1,   473,   474,
     475,   476,    -1,    -1,    -1,   480,    -1,    -1,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,     3,
      -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,
      24,    25,    -1,    27,    28,    29,    30,    31,    32,    33,
      34,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    45,    46,    -1,    48,    49,    50,    -1,    52,    53,
      54,    55,    56,    -1,    58,    59,    -1,    61,    62,    63,
      64,    65,    66,    -1,    -1,    69,    70,    71,    72,    73,
      -1,    75,    76,    77,    78,    79,    -1,    -1,    -1,    83,
      84,    85,    86,    87,    88,    -1,    90,    91,    92,    -1,
      94,    95,    96,    97,    98,    -1,    -1,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,    -1,   116,    -1,   118,   119,   120,   121,   122,   123,
      -1,   125,    -1,   127,   128,   129,   130,    -1,    -1,   133,
     134,   135,   136,   137,    -1,    -1,    -1,   141,   142,   143,
      -1,   145,   146,   147,    -1,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,   159,    -1,   161,    -1,   163,
     164,   165,   166,    -1,   168,    -1,   170,    -1,    -1,    -1,
     174,   175,   176,    -1,   178,    -1,   180,    -1,    -1,    -1,
     184,   185,    -1,   187,    -1,   189,   190,   191,   192,   193,
     194,   195,    -1,   197,   198,   199,   200,    -1,   202,   203,
     204,   205,   206,   207,   208,    -1,   210,    -1,   212,   213,
     214,   215,   216,   217,   218,   219,    -1,   221,    -1,   223,
      -1,    -1,   226,    -1,   228,    -1,   230,   231,   232,   233,
     234,    -1,    -1,   237,    -1,   239,    -1,    -1,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,    -1,   271,   272,   273,
     274,    -1,   276,    -1,   278,   279,    -1,   281,    -1,   283,
     284,   285,   286,   287,   288,    -1,   290,   291,    -1,    -1,
     294,   295,   296,    -1,    -1,   299,   300,    -1,   302,    -1,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
      -1,    -1,   316,    -1,    -1,    -1,    -1,   321,   322,   323,
      -1,   325,   326,   327,   328,   329,   330,    -1,   332,   333,
     334,   335,   336,    -1,    -1,   339,    -1,   341,   342,   343,
     344,   345,   346,   347,   348,    -1,   350,   351,   352,    -1,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
      -1,   365,   366,    -1,   368,   369,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,    -1,
      -1,   385,   386,   387,   388,   389,   390,   391,   392,   393,
      -1,   395,    -1,    -1,   398,   399,   400,    -1,    -1,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,   417,   418,    -1,   420,   421,    -1,   423,
      -1,   425,   426,   427,   428,   429,    -1,   431,   432,    -1,
      -1,    -1,   436,   437,   438,   439,   440,    -1,   442,   443,
     444,   445,   446,   447,   448,   449,    -1,    -1,   452,   453,
     454,    -1,   456,   457,   458,   459,    -1,   461,   462,   463,
     464,   465,   466,   467,    -1,   469,    -1,   471,    -1,   473,
     474,   475,   476,    -1,    -1,    -1,   480,    -1,    -1,   483,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,   499,   500,   501,   502,   503,
       3,    -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,
      23,    24,    25,    -1,    27,    28,    29,    30,    -1,    32,
      33,    34,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    45,    46,    -1,    48,    49,    50,    -1,    52,
      53,    54,    55,    56,    -1,    58,    59,    -1,    61,    62,
      63,    64,    65,    66,    -1,    -1,    69,    70,    71,    72,
      73,    -1,    75,    76,    77,    78,    79,    -1,    -1,    -1,
      83,    84,    85,    86,    87,    88,    -1,    90,    91,    92,
      -1,    94,    95,    96,    97,    98,    -1,    -1,    -1,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,    -1,   116,    -1,   118,   119,   120,   121,   122,
     123,    -1,   125,    -1,   127,   128,   129,   130,    -1,    -1,
     133,   134,   135,   136,   137,    -1,    -1,    -1,   141,   142,
     143,    -1,   145,   146,   147,    -1,   149,   150,   151,   152,
     153,   154,   155,   156,   157,   158,   159,    -1,   161,    -1,
     163,   164,   165,   166,    -1,   168,    -1,   170,    -1,    -1,
      -1,   174,   175,   176,    -1,   178,    -1,   180,    -1,    -1,
      -1,   184,   185,    -1,   187,    -1,   189,   190,   191,   192,
     193,   194,   195,    -1,   197,   198,   199,   200,    -1,   202,
     203,   204,   205,   206,   207,   208,    -1,   210,    -1,   212,
     213,   214,   215,   216,   217,   218,   219,    -1,   221,    -1,
     223,    -1,    -1,   226,    -1,   228,    -1,   230,   231,   232,
     233,   234,    -1,    -1,   237,    -1,   239,    -1,    -1,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,    -1,   271,   272,
     273,   274,    -1,   276,    -1,   278,   279,    -1,   281,    -1,
     283,   284,   285,   286,   287,   288,    -1,   290,   291,    -1,
     293,   294,   295,   296,    -1,    -1,   299,   300,    -1,   302,
      -1,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,    -1,    -1,   316,    -1,    -1,    -1,    -1,   321,   322,
     323,    -1,   325,   326,   327,   328,   329,   330,    -1,   332,
     333,   334,   335,   336,    -1,    -1,   339,    -1,   341,   342,
     343,   344,   345,   346,   347,   348,    -1,   350,   351,   352,
      -1,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,    -1,   365,   366,    -1,   368,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
      -1,    -1,   385,   386,   387,   388,   389,   390,   391,   392,
     393,    -1,   395,    -1,    -1,   398,   399,   400,    -1,    -1,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,   417,   418,    -1,   420,   421,    -1,
     423,    -1,   425,   426,   427,   428,   429,    -1,   431,   432,
      -1,    -1,    -1,   436,   437,   438,   439,   440,    -1,   442,
     443,   444,   445,   446,   447,   448,   449,    -1,    -1,   452,
     453,   454,    -1,   456,   457,   458,   459,    -1,   461,   462,
     463,   464,   465,   466,   467,    -1,   469,    -1,   471,    -1,
     473,   474,   475,   476,    -1,    -1,    -1,   480,    -1,    -1,
     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   500,   501,   502,
     503,     3,    -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    -1,    27,    28,    29,    30,    -1,
      32,    33,    34,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    45,    46,    -1,    48,    49,    50,    -1,
      52,    53,    54,    55,    56,    -1,    58,    59,    -1,    61,
      62,    63,    64,    65,    66,    -1,    -1,    69,    70,    71,
      72,    73,    -1,    75,    76,    77,    78,    79,    -1,    -1,
      -1,    83,    84,    85,    86,    87,    88,    -1,    90,    91,
      92,    -1,    94,    95,    96,    97,    98,    -1,    -1,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,    -1,   116,    -1,   118,   119,   120,   121,
     122,   123,    -1,   125,    -1,   127,   128,   129,   130,    -1,
      -1,   133,   134,   135,   136,   137,    -1,    -1,    -1,   141,
     142,   143,    -1,   145,   146,   147,    -1,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,    -1,   161,
      -1,   163,   164,   165,   166,    -1,   168,    -1,   170,    -1,
      -1,    -1,   174,   175,   176,    -1,   178,    -1,   180,    -1,
      -1,    -1,   184,   185,    -1,   187,    -1,   189,   190,   191,
     192,   193,   194,   195,    -1,   197,   198,   199,   200,    -1,
     202,   203,   204,   205,   206,   207,   208,    -1,   210,    -1,
     212,   213,   214,   215,   216,   217,   218,   219,    -1,   221,
      -1,   223,    -1,    -1,   226,    -1,   228,    -1,   230,   231,
     232,   233,   234,    -1,    -1,   237,    -1,   239,    -1,    -1,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,    -1,   271,
     272,   273,   274,    -1,   276,    -1,   278,   279,    -1,   281,
      -1,   283,   284,   285,   286,   287,   288,    -1,   290,   291,
      -1,   293,   294,   295,   296,    -1,    -1,   299,   300,    -1,
     302,    -1,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,    -1,    -1,   316,    -1,    -1,    -1,    -1,   321,
     322,   323,    -1,   325,   326,   327,   328,   329,   330,    -1,
     332,   333,   334,   335,   336,    -1,    -1,   339,    -1,   341,
     342,   343,   344,   345,   346,   347,   348,    -1,   350,   351,
     352,    -1,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,    -1,   365,   366,    -1,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,    -1,    -1,   385,   386,   387,   388,   389,   390,   391,
     392,   393,    -1,   395,    -1,    -1,   398,   399,   400,    -1,
      -1,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,   417,   418,    -1,   420,   421,
      -1,   423,    -1,   425,   426,   427,   428,   429,    -1,   431,
     432,    -1,    -1,    -1,   436,   437,   438,   439,   440,    -1,
     442,   443,   444,   445,   446,   447,   448,   449,    -1,    -1,
     452,   453,   454,    -1,   456,   457,   458,   459,    -1,   461,
     462,   463,   464,   465,   466,   467,    -1,   469,    -1,   471,
      -1,   473,   474,   475,   476,    -1,    -1,    -1,   480,    -1,
      -1,   483,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,   498,   499,   500,   501,
     502,   503,     3,    -1,     5,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    -1,    27,    28,    29,    30,
      31,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    45,    46,    -1,    48,    49,    50,
      -1,    52,    53,    54,    55,    56,    -1,    58,    59,    -1,
      61,    62,    63,    64,    65,    66,    -1,    -1,    69,    70,
      71,    72,    73,    -1,    75,    76,    77,    78,    79,    -1,
      -1,    -1,    83,    84,    85,    86,    87,    88,    -1,    90,
      91,    92,    -1,    94,    95,    96,    97,    98,    -1,    -1,
      -1,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,    -1,   116,    -1,   118,   119,   120,
     121,   122,   123,    -1,   125,    -1,   127,   128,   129,   130,
      -1,    -1,   133,   134,   135,   136,   137,    -1,    -1,    -1,
     141,   142,   143,    -1,   145,   146,   147,    -1,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,    -1,
     161,    -1,   163,   164,   165,   166,    -1,   168,    -1,   170,
      -1,    -1,    -1,   174,   175,   176,    -1,   178,    -1,   180,
      -1,    -1,    -1,   184,   185,    -1,   187,    -1,   189,   190,
     191,   192,   193,   194,   195,    -1,   197,   198,   199,   200,
      -1,   202,   203,   204,   205,   206,   207,   208,    -1,   210,
      -1,   212,   213,   214,   215,   216,   217,   218,   219,    -1,
     221,    -1,   223,    -1,    -1,   226,    -1,   228,    -1,   230,
     231,   232,   233,   234,    -1,    -1,   237,    -1,   239,    -1,
      -1,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,    -1,
     271,   272,   273,   274,    -1,   276,    -1,   278,   279,    -1,
     281,    -1,   283,   284,   285,   286,   287,   288,    -1,   290,
     291,    -1,    -1,   294,   295,   296,    -1,    -1,   299,   300,
      -1,   302,    -1,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,    -1,    -1,   316,    -1,    -1,    -1,    -1,
     321,   322,   323,    -1,   325,   326,   327,   328,   329,   330,
      -1,   332,   333,   334,   335,   336,    -1,    -1,   339,    -1,
     341,   342,   343,   344,   345,   346,   347,   348,    -1,   350,
     351,   352,    -1,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,    -1,   365,   366,    -1,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,    -1,    -1,   385,   386,   387,   388,   389,   390,
     391,   392,   393,    -1,   395,    -1,    -1,   398,   399,   400,
      -1,    -1,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,   417,   418,    -1,   420,
     421,    -1,   423,    -1,   425,   426,   427,   428,   429,    -1,
     431,   432,    -1,    -1,    -1,   436,   437,   438,   439,   440,
      -1,   442,   443,   444,   445,   446,   447,   448,   449,    -1,
      -1,   452,   453,   454,    -1,   456,   457,   458,   459,    -1,
     461,   462,   463,   464,   465,   466,   467,    -1,   469,    -1,
     471,    -1,   473,   474,   475,   476,    -1,    -1,    -1,   480,
      -1,    -1,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,   499,   500,
     501,   502,   503,     3,     4,    -1,    -1,    -1,    -1,     9,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    22,    23,    24,    25,    -1,    27,    28,    29,
      30,    -1,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    45,    46,    -1,    48,    49,
      50,    -1,    52,    53,    54,    55,    56,    -1,    58,    59,
      -1,    61,    62,    63,    64,    65,    66,    -1,    -1,    69,
      70,    71,    72,    73,    -1,    75,    76,    77,    78,    79,
      -1,    -1,    -1,    83,    84,    85,    86,    87,    88,    -1,
      90,    91,    92,    -1,    94,    95,    96,    97,    98,    -1,
      -1,    -1,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,    -1,   116,    -1,   118,   119,
     120,   121,   122,   123,    -1,   125,    -1,   127,   128,   129,
     130,    -1,    -1,   133,   134,   135,   136,   137,    -1,    -1,
      -1,   141,   142,   143,    -1,   145,   146,   147,    -1,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
      -1,   161,    -1,   163,   164,   165,   166,    -1,   168,    -1,
     170,    -1,    -1,    -1,   174,   175,   176,    -1,   178,    -1,
     180,    -1,    -1,    -1,   184,   185,    -1,   187,    -1,   189,
     190,   191,   192,   193,   194,   195,    -1,   197,   198,   199,
     200,    -1,   202,   203,   204,   205,   206,   207,   208,    -1,
     210,    -1,   212,   213,   214,   215,   216,   217,   218,   219,
      -1,   221,    -1,   223,    -1,    -1,   226,    -1,   228,    -1,
     230,   231,   232,   233,   234,    -1,    -1,   237,    -1,   239,
      -1,    -1,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
      -1,   271,   272,   273,   274,    -1,   276,    -1,   278,   279,
      -1,   281,    -1,   283,   284,   285,   286,   287,   288,    -1,
     290,   291,    -1,    -1,   294,   295,   296,    -1,    -1,   299,
     300,    -1,   302,    -1,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,    -1,    -1,   316,    -1,    -1,    -1,
      -1,   321,   322,   323,    -1,   325,   326,   327,   328,   329,
     330,    -1,   332,   333,   334,   335,   336,    -1,    -1,   339,
      -1,   341,   342,   343,   344,   345,   346,   347,   348,    -1,
     350,   351,   352,    -1,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,    -1,   365,   366,    -1,   368,   369,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,    -1,    -1,   385,   386,   387,   388,   389,
     390,   391,   392,   393,    -1,   395,    -1,    -1,   398,   399,
     400,    -1,    -1,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,   417,   418,    -1,
     420,   421,    -1,   423,    -1,   425,   426,   427,   428,   429,
      -1,   431,   432,    -1,    -1,    -1,   436,   437,   438,   439,
     440,    -1,   442,   443,   444,   445,   446,   447,   448,   449,
      -1,    -1,   452,   453,   454,    -1,   456,   457,   458,   459,
      -1,   461,   462,   463,   464,   465,   466,   467,    -1,   469,
      -1,   471,    -1,   473,   474,   475,   476,    -1,    -1,    -1,
     480,    -1,    -1,   483,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,   498,   499,
     500,   501,   502,   503,     3,    -1,     5,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    22,    23,    24,    25,    -1,    27,    28,
      29,    30,    -1,    32,    33,    34,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    45,    46,    -1,    48,
      49,    50,    -1,    52,    53,    54,    55,    56,    -1,    58,
      59,    -1,    61,    62,    63,    64,    65,    66,    -1,    -1,
      69,    70,    71,    72,    73,    -1,    75,    76,    77,    78,
      79,    -1,    -1,    -1,    83,    84,    85,    86,    87,    88,
      -1,    90,    91,    92,    -1,    94,    95,    96,    97,    98,
      -1,    -1,    -1,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,    -1,   116,    -1,   118,
     119,   120,   121,   122,   123,    -1,   125,    -1,   127,   128,
     129,   130,    -1,    -1,   133,   134,   135,   136,   137,    -1,
      -1,    -1,   141,   142,   143,    -1,   145,   146,   147,    -1,
     149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
     159,    -1,   161,    -1,   163,   164,   165,   166,    -1,   168,
      -1,   170,    -1,    -1,    -1,   174,   175,   176,    -1,   178,
      -1,   180,    -1,    -1,    -1,   184,   185,    -1,   187,    -1,
     189,   190,   191,   192,   193,   194,   195,    -1,   197,   198,
     199,   200,    -1,   202,   203,   204,   205,   206,   207,   208,
      -1,   210,    -1,   212,   213,   214,   215,   216,   217,   218,
     219,    -1,   221,    -1,   223,    -1,    -1,   226,    -1,   228,
      -1,   230,   231,   232,   233,   234,    -1,    -1,   237,    -1,
     239,    -1,    -1,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,    -1,   271,   272,   273,   274,    -1,   276,    -1,   278,
     279,    -1,   281,    -1,   283,   284,   285,   286,   287,   288,
      -1,   290,   291,    -1,    -1,   294,   295,   296,    -1,    -1,
     299,   300,    -1,   302,    -1,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,    -1,    -1,   316,    -1,    -1,
      -1,    -1,   321,   322,   323,    -1,   325,   326,   327,   328,
     329,   330,    -1,   332,   333,   334,   335,   336,    -1,    -1,
     339,    -1,   341,   342,   343,   344,   345,   346,   347,   348,
      -1,   350,   351,   352,    -1,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,    -1,   365,   366,    -1,   368,
     369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,    -1,    -1,   385,   386,   387,   388,
     389,   390,   391,   392,   393,    -1,   395,    -1,    -1,   398,
     399,   400,    -1,    -1,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,   417,   418,
      -1,   420,   421,   422,   423,    -1,   425,   426,   427,   428,
     429,    -1,   431,   432,    -1,    -1,    -1,   436,   437,   438,
     439,   440,    -1,   442,   443,   444,   445,   446,   447,   448,
     449,    -1,    -1,   452,   453,   454,    -1,   456,   457,   458,
     459,    -1,   461,   462,   463,   464,   465,   466,   467,    -1,
     469,    -1,   471,    -1,   473,   474,   475,   476,    -1,    -1,
      -1,   480,    -1,    -1,   483,   484,   485,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
     499,   500,   501,   502,   503,     3,    -1,     5,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    -1,    27,
      28,    29,    30,    -1,    32,    33,    34,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    45,    46,    -1,
      48,    49,    50,    -1,    52,    53,    54,    55,    56,    -1,
      58,    59,    -1,    61,    62,    63,    64,    65,    66,    -1,
      -1,    69,    70,    71,    72,    73,    -1,    75,    76,    77,
      78,    79,    -1,    -1,    -1,    83,    84,    85,    86,    87,
      88,    -1,    90,    91,    92,    -1,    94,    95,    96,    97,
      98,    -1,    -1,    -1,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,    -1,   116,    -1,
     118,   119,   120,   121,   122,   123,    -1,   125,    -1,   127,
     128,   129,   130,    -1,    -1,   133,   134,   135,   136,   137,
      -1,    -1,    -1,   141,   142,   143,    -1,   145,   146,   147,
      -1,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,   159,    -1,   161,    -1,   163,   164,   165,   166,    -1,
     168,    -1,   170,    -1,    -1,    -1,   174,   175,   176,    -1,
     178,    -1,   180,    -1,    -1,    -1,   184,   185,    -1,   187,
      -1,   189,   190,   191,   192,   193,   194,   195,    -1,   197,
     198,   199,   200,    -1,   202,   203,   204,   205,   206,   207,
     208,    -1,   210,    -1,   212,   213,   214,   215,   216,   217,
     218,   219,    -1,   221,    -1,   223,    -1,    -1,   226,    -1,
     228,    -1,   230,   231,   232,   233,   234,    -1,    -1,   237,
      -1,   239,    -1,    -1,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,    -1,   271,   272,   273,   274,    -1,   276,    -1,
     278,   279,    -1,   281,    -1,   283,   284,   285,   286,   287,
     288,    -1,   290,   291,    -1,    -1,   294,   295,   296,    -1,
      -1,   299,   300,    -1,   302,    -1,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,    -1,    -1,   316,    -1,
      -1,    -1,    -1,   321,   322,   323,    -1,   325,   326,   327,
     328,   329,   330,    -1,   332,   333,   334,   335,   336,    -1,
      -1,   339,    -1,   341,   342,   343,   344,   345,   346,   347,
     348,    -1,   350,   351,   352,    -1,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,    -1,   365,   366,    -1,
     368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,    -1,    -1,   385,   386,   387,
     388,   389,   390,   391,   392,   393,    -1,   395,    -1,    -1,
     398,   399,   400,    -1,    -1,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,   417,
     418,    -1,   420,   421,    -1,   423,    -1,   425,   426,   427,
     428,   429,    -1,   431,   432,    -1,    -1,    -1,   436,   437,
     438,   439,   440,    -1,   442,   443,   444,   445,   446,   447,
     448,   449,    -1,    -1,   452,   453,   454,    -1,   456,   457,
     458,   459,    -1,   461,   462,   463,   464,   465,   466,   467,
      -1,   469,    -1,   471,    -1,   473,   474,   475,   476,    -1,
      -1,    -1,   480,    -1,    -1,   483,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,   499,   500,   501,   502,   503,     3,    -1,     5,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    -1,
      27,    28,    29,    30,    -1,    32,    33,    34,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    45,    46,
      -1,    48,    49,    50,    -1,    52,    53,    54,    55,    56,
      -1,    58,    59,    -1,    61,    62,    63,    64,    65,    66,
      -1,    -1,    69,    70,    71,    72,    73,    -1,    75,    76,
      77,    78,    79,    -1,    -1,    -1,    83,    84,    85,    86,
      87,    88,    -1,    90,    91,    92,    -1,    94,    95,    96,
      97,    98,    -1,    -1,    -1,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,    -1,   116,
      -1,   118,   119,   120,   121,   122,   123,    -1,   125,    -1,
     127,   128,   129,   130,    -1,    -1,   133,   134,   135,   136,
     137,    -1,    -1,    -1,   141,   142,   143,    -1,   145,   146,
     147,    -1,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,    -1,   161,    -1,   163,   164,   165,   166,
      -1,   168,    -1,   170,    -1,    -1,    -1,   174,   175,   176,
      -1,   178,    -1,   180,    -1,    -1,    -1,   184,   185,    -1,
     187,    -1,   189,   190,   191,   192,   193,   194,   195,    -1,
     197,   198,   199,   200,    -1,   202,   203,   204,   205,   206,
     207,   208,    -1,   210,    -1,   212,   213,   214,   215,   216,
     217,   218,   219,    -1,   221,    -1,   223,    -1,    -1,   226,
      -1,   228,    -1,   230,   231,   232,   233,   234,    -1,    -1,
     237,    -1,   239,    -1,    -1,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,    -1,   271,   272,   273,   274,    -1,   276,
      -1,   278,   279,    -1,   281,    -1,   283,   284,   285,   286,
     287,   288,    -1,   290,   291,    -1,    -1,   294,   295,   296,
      -1,    -1,   299,   300,    -1,   302,    -1,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,    -1,    -1,   316,
      -1,    -1,    -1,    -1,   321,   322,   323,    -1,   325,   326,
     327,   328,   329,   330,    -1,   332,   333,   334,   335,   336,
      -1,    -1,   339,    -1,   341,   342,   343,   344,   345,   346,
     347,   348,    -1,   350,   351,   352,    -1,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,    -1,   365,   366,
      -1,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,    -1,    -1,   385,   386,
     387,   388,   389,   390,   391,   392,   393,    -1,   395,    -1,
      -1,   398,   399,   400,    -1,    -1,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
     417,   418,    -1,   420,   421,    -1,   423,    -1,   425,   426,
     427,   428,   429,    -1,   431,   432,    -1,    -1,    -1,   436,
     437,   438,   439,   440,    -1,   442,   443,   444,   445,   446,
     447,   448,   449,    -1,    -1,   452,   453,   454,    -1,   456,
     457,   458,   459,    -1,   461,   462,   463,   464,   465,   466,
     467,    -1,   469,    -1,   471,    -1,   473,   474,   475,   476,
      -1,    -1,    -1,   480,    -1,    -1,   483,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,   498,   499,   500,   501,   502,   503,     3,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      -1,    27,    28,    29,    30,    31,    32,    33,    34,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    45,
      46,    -1,    48,    49,    50,    -1,    52,    53,    54,    55,
      56,    -1,    58,    59,    -1,    61,    62,    63,    64,    65,
      66,    -1,    -1,    69,    70,    71,    72,    73,    -1,    75,
      76,    77,    78,    79,    -1,    -1,    -1,    83,    84,    85,
      86,    87,    88,    -1,    90,    91,    92,    -1,    94,    95,
      96,    97,    98,    -1,    -1,    -1,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,    -1,
     116,    -1,   118,   119,   120,   121,   122,   123,    -1,   125,
      -1,   127,   128,   129,   130,    -1,    -1,   133,   134,   135,
     136,   137,    -1,    -1,    -1,   141,   142,   143,    -1,   145,
     146,   147,    -1,   149,   150,   151,   152,   153,   154,   155,
     156,   157,   158,   159,    -1,   161,    -1,   163,   164,   165,
     166,    -1,   168,    -1,   170,    -1,    -1,    -1,   174,   175,
     176,    -1,   178,    -1,   180,    -1,    -1,    -1,   184,   185,
      -1,   187,    -1,   189,   190,   191,   192,   193,   194,   195,
      -1,   197,   198,   199,   200,    -1,   202,   203,   204,   205,
     206,   207,   208,    -1,   210,    -1,   212,   213,   214,   215,
     216,   217,   218,   219,    -1,   221,    -1,   223,    -1,    -1,
     226,    -1,   228,    -1,   230,   231,   232,   233,   234,    -1,
      -1,   237,    -1,   239,    -1,    -1,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,    -1,   271,   272,   273,   274,    -1,
     276,    -1,   278,   279,    -1,   281,    -1,   283,   284,   285,
     286,   287,   288,    -1,   290,   291,    -1,    -1,   294,   295,
     296,    -1,    -1,   299,   300,    -1,   302,    -1,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,    -1,    -1,
     316,    -1,    -1,    -1,    -1,   321,   322,   323,    -1,   325,
     326,   327,   328,   329,   330,    -1,   332,   333,   334,   335,
     336,    -1,    -1,   339,    -1,   341,   342,   343,   344,   345,
     346,   347,   348,    -1,   350,   351,   352,    -1,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,    -1,   365,
     366,    -1,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,    -1,    -1,   385,
     386,   387,   388,   389,   390,   391,   392,   393,    -1,   395,
      -1,    -1,   398,   399,   400,    -1,    -1,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,   417,   418,    -1,   420,   421,    -1,   423,    -1,   425,
     426,   427,   428,   429,    -1,   431,   432,    -1,    -1,    -1,
     436,   437,   438,   439,   440,    -1,   442,   443,   444,   445,
     446,   447,   448,   449,    -1,    -1,   452,   453,   454,    -1,
     456,   457,   458,   459,    -1,   461,   462,   463,   464,   465,
     466,   467,    -1,   469,    -1,   471,    -1,   473,   474,   475,
     476,    -1,    -1,    -1,   480,    -1,    -1,   483,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,   498,   499,   500,   501,   502,   503,     3,    -1,
       5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,
      25,    -1,    27,    28,    29,    30,    -1,    32,    33,    34,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      45,    46,    -1,    48,    49,    50,    -1,    52,    53,    54,
      55,    56,    -1,    58,    59,    -1,    61,    62,    63,    64,
      65,    66,    -1,    -1,    69,    70,    71,    72,    73,    -1,
      75,    76,    77,    78,    79,    -1,    -1,    -1,    83,    84,
      85,    86,    87,    88,    -1,    90,    91,    92,    -1,    94,
      95,    96,    97,    98,    -1,    -1,    -1,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
      -1,   116,    -1,   118,   119,   120,   121,   122,   123,    -1,
     125,    -1,   127,   128,   129,   130,    -1,    -1,   133,   134,
     135,   136,   137,    -1,    -1,    -1,   141,   142,   143,    -1,
     145,   146,   147,    -1,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,    -1,   161,    -1,   163,   164,
     165,   166,    -1,   168,    -1,   170,    -1,    -1,    -1,   174,
     175,   176,    -1,   178,    -1,   180,    -1,    -1,    -1,   184,
     185,    -1,   187,    -1,   189,   190,   191,   192,   193,   194,
     195,    -1,   197,   198,   199,   200,    -1,   202,   203,   204,
     205,   206,   207,   208,    -1,   210,    -1,   212,   213,   214,
     215,   216,   217,   218,   219,    -1,   221,    -1,   223,    -1,
      -1,   226,    -1,   228,    -1,   230,   231,   232,   233,   234,
      -1,    -1,   237,    -1,   239,    -1,    -1,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,    -1,   271,   272,   273,   274,
      -1,   276,    -1,   278,   279,    -1,   281,    -1,   283,   284,
     285,   286,   287,   288,    -1,   290,   291,    -1,    -1,   294,
     295,   296,    -1,    -1,   299,   300,    -1,   302,    -1,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,    -1,
      -1,   316,    -1,    -1,    -1,    -1,   321,   322,   323,    -1,
     325,   326,   327,   328,   329,   330,    -1,   332,   333,   334,
     335,   336,    -1,    -1,   339,    -1,   341,   342,   343,   344,
     345,   346,   347,   348,    -1,   350,   351,   352,    -1,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,    -1,
     365,   366,    -1,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,    -1,    -1,
     385,   386,   387,   388,   389,   390,   391,   392,   393,    -1,
     395,    -1,    -1,   398,   399,   400,    -1,    -1,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,    -1,   420,   421,    -1,   423,    -1,
     425,   426,   427,   428,   429,    -1,   431,   432,    -1,    -1,
      -1,   436,   437,   438,   439,   440,    -1,   442,   443,   444,
     445,   446,   447,   448,   449,    -1,    -1,   452,   453,   454,
      -1,   456,   457,   458,   459,    -1,   461,   462,   463,   464,
     465,   466,   467,    -1,   469,    -1,   471,    -1,   473,   474,
     475,   476,    -1,    -1,    -1,   480,    -1,    -1,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,     3,
      -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,
      24,    25,    -1,    27,    28,    29,    30,    -1,    32,    33,
      34,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    45,    46,    -1,    48,    49,    50,    -1,    52,    53,
      54,    55,    56,    -1,    58,    59,    -1,    61,    62,    63,
      64,    65,    66,    -1,    -1,    69,    70,    71,    72,    73,
      -1,    75,    76,    77,    78,    79,    -1,    -1,    -1,    83,
      84,    85,    86,    87,    88,    -1,    90,    91,    92,    -1,
      94,    95,    96,    97,    98,    -1,    -1,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,    -1,   116,    -1,   118,   119,   120,   121,   122,   123,
      -1,   125,    -1,   127,   128,   129,   130,    -1,    -1,   133,
     134,   135,   136,   137,    -1,    -1,    -1,   141,   142,   143,
      -1,   145,   146,   147,    -1,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,   159,    -1,   161,    -1,   163,
     164,   165,   166,    -1,   168,    -1,   170,    -1,    -1,    -1,
     174,   175,   176,    -1,   178,    -1,   180,    -1,    -1,    -1,
     184,   185,    -1,   187,    -1,   189,   190,   191,   192,   193,
     194,   195,    -1,   197,   198,   199,   200,    -1,   202,   203,
     204,   205,   206,   207,   208,    -1,   210,    -1,   212,   213,
     214,   215,   216,   217,   218,   219,    -1,   221,    -1,   223,
      -1,    -1,   226,    -1,   228,    -1,   230,   231,   232,   233,
     234,    -1,    -1,   237,    -1,   239,    -1,    -1,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,    -1,   271,   272,   273,
     274,    -1,   276,    -1,   278,   279,    -1,   281,    -1,   283,
     284,   285,   286,   287,   288,    -1,   290,   291,    -1,    -1,
     294,   295,   296,    -1,    -1,   299,   300,    -1,   302,    -1,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
      -1,    -1,   316,    -1,    -1,    -1,    -1,   321,   322,   323,
      -1,   325,   326,   327,   328,   329,   330,    -1,   332,   333,
     334,   335,   336,    -1,    -1,   339,    -1,   341,   342,   343,
     344,   345,   346,   347,   348,    -1,   350,   351,   352,    -1,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
      -1,   365,   366,    -1,   368,   369,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,    -1,
      -1,   385,   386,   387,   388,   389,   390,   391,   392,   393,
      -1,   395,    -1,    -1,   398,   399,   400,    -1,    -1,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,   417,   418,    -1,   420,   421,    -1,   423,
      -1,   425,   426,   427,   428,   429,    -1,   431,   432,    -1,
      -1,    -1,   436,   437,   438,   439,   440,    -1,   442,   443,
     444,   445,   446,   447,   448,   449,    -1,    -1,   452,   453,
     454,    -1,   456,   457,   458,   459,    -1,   461,   462,   463,
     464,   465,   466,   467,    -1,   469,    -1,   471,    -1,   473,
     474,   475,   476,    -1,    -1,    -1,   480,    -1,    -1,   483,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,   499,   500,   501,   502,   503,
       3,    -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,
      23,    24,    25,    -1,    27,    28,    29,    30,    -1,    32,
      33,    34,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    45,    46,    -1,    48,    49,    50,    -1,    52,
      53,    54,    55,    56,    -1,    58,    59,    -1,    61,    62,
      63,    64,    65,    66,    -1,    -1,    69,    70,    71,    72,
      73,    -1,    75,    76,    77,    78,    79,    -1,    -1,    -1,
      83,    84,    85,    86,    87,    88,    -1,    90,    91,    92,
      -1,    94,    95,    96,    97,    98,    -1,    -1,    -1,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,    -1,   116,    -1,   118,   119,   120,   121,   122,
     123,    -1,   125,    -1,   127,   128,   129,   130,    -1,    -1,
     133,   134,   135,   136,   137,    -1,    -1,    -1,   141,   142,
     143,    -1,   145,   146,   147,    -1,   149,   150,   151,   152,
     153,   154,   155,   156,   157,   158,   159,    -1,   161,    -1,
     163,   164,   165,   166,    -1,   168,    -1,   170,    -1,    -1,
      -1,   174,   175,   176,    -1,   178,    -1,   180,    -1,    -1,
      -1,   184,   185,    -1,   187,    -1,   189,   190,   191,   192,
     193,   194,   195,    -1,   197,   198,   199,   200,    -1,   202,
     203,   204,   205,   206,   207,   208,    -1,   210,    -1,   212,
     213,   214,   215,   216,   217,   218,   219,    -1,   221,    -1,
     223,    -1,    -1,   226,    -1,   228,    -1,   230,   231,   232,
     233,   234,    -1,    -1,   237,    -1,   239,    -1,    -1,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,    -1,   271,   272,
     273,   274,    -1,   276,    -1,   278,   279,    -1,   281,    -1,
     283,   284,   285,   286,   287,   288,    -1,   290,   291,    -1,
      -1,   294,   295,   296,    -1,    -1,   299,   300,    -1,   302,
      -1,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,    -1,    -1,   316,    -1,    -1,    -1,    -1,   321,   322,
     323,    -1,   325,   326,   327,   328,   329,   330,    -1,   332,
     333,   334,   335,   336,    -1,    -1,   339,    -1,   341,   342,
     343,   344,   345,   346,   347,   348,    -1,   350,   351,   352,
      -1,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,    -1,   365,   366,    -1,   368,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
      -1,    -1,   385,   386,   387,   388,   389,   390,   391,   392,
     393,    -1,   395,    -1,    -1,   398,   399,   400,    -1,    -1,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,   417,   418,    -1,   420,   421,    -1,
     423,    -1,   425,   426,   427,   428,   429,    -1,   431,   432,
      -1,    -1,    -1,   436,   437,   438,   439,   440,    -1,   442,
     443,   444,   445,   446,   447,   448,   449,    -1,    -1,   452,
     453,   454,    -1,   456,   457,   458,   459,    -1,   461,   462,
     463,   464,   465,   466,   467,    -1,   469,    -1,   471,    -1,
     473,   474,   475,   476,    -1,    -1,    -1,   480,    -1,    -1,
     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   500,   501,   502,
     503,     3,    -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    -1,    27,    28,    29,    30,    -1,
      32,    33,    34,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    45,    46,    -1,    48,    49,    50,    -1,
      52,    53,    54,    55,    56,    -1,    58,    59,    -1,    61,
      62,    63,    64,    65,    66,    -1,    -1,    69,    70,    71,
      72,    73,    -1,    75,    76,    77,    78,    79,    -1,    -1,
      -1,    83,    84,    85,    86,    87,    88,    -1,    90,    91,
      92,    -1,    94,    95,    96,    97,    98,    -1,    -1,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,    -1,   116,    -1,   118,   119,   120,   121,
     122,   123,    -1,   125,    -1,   127,   128,   129,   130,    -1,
      -1,   133,   134,   135,   136,   137,    -1,    -1,    -1,   141,
     142,   143,    -1,   145,   146,   147,    -1,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,    -1,   161,
      -1,   163,   164,   165,   166,    -1,   168,    -1,   170,    -1,
      -1,    -1,   174,   175,   176,    -1,   178,    -1,   180,    -1,
      -1,    -1,   184,   185,    -1,   187,    -1,   189,   190,   191,
     192,   193,   194,   195,    -1,   197,   198,   199,   200,    -1,
     202,   203,   204,   205,   206,   207,   208,    -1,   210,    -1,
     212,   213,   214,   215,   216,   217,   218,   219,    -1,   221,
      -1,   223,    -1,    -1,   226,    -1,   228,    -1,   230,   231,
     232,   233,   234,    -1,    -1,   237,    -1,   239,    -1,    -1,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,    -1,   271,
     272,   273,   274,    -1,   276,    -1,   278,   279,    -1,   281,
      -1,   283,   284,   285,   286,   287,   288,    -1,   290,   291,
      -1,    -1,   294,   295,   296,    -1,    -1,   299,   300,    -1,
     302,    -1,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,    -1,    -1,   316,    -1,    -1,    -1,    -1,   321,
     322,   323,    -1,   325,   326,   327,   328,   329,   330,    -1,
     332,   333,   334,   335,   336,    -1,    -1,   339,    -1,   341,
     342,   343,   344,   345,   346,   347,   348,    -1,   350,   351,
     352,    -1,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,    -1,   365,   366,    -1,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,    -1,    -1,   385,   386,   387,   388,   389,   390,   391,
     392,   393,    -1,   395,    -1,    -1,   398,   399,   400,    -1,
      -1,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,   417,   418,    -1,   420,   421,
      -1,   423,    -1,   425,   426,   427,   428,   429,    -1,   431,
     432,    -1,    -1,    -1,   436,   437,   438,   439,   440,    -1,
     442,   443,   444,   445,   446,   447,   448,   449,    -1,    -1,
     452,   453,   454,    -1,   456,   457,   458,   459,    -1,   461,
     462,   463,   464,   465,   466,   467,    -1,   469,    -1,   471,
      -1,   473,   474,   475,   476,    -1,    -1,    -1,   480,    -1,
      -1,   483,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,   498,   499,   500,   501,
     502,   503,     3,    -1,     5,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    -1,    27,    28,    29,    30,
      -1,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    45,    46,    -1,    48,    49,    50,
      -1,    52,    53,    54,    55,    56,    -1,    58,    59,    -1,
      61,    62,    63,    64,    65,    66,    -1,    -1,    69,    70,
      71,    72,    73,    -1,    75,    76,    77,    78,    79,    -1,
      -1,    -1,    83,    84,    85,    86,    87,    88,    -1,    90,
      91,    92,    -1,    94,    95,    96,    97,    98,    -1,    -1,
      -1,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,    -1,   116,    -1,   118,   119,   120,
     121,   122,   123,    -1,   125,    -1,   127,   128,   129,   130,
      -1,    -1,   133,   134,   135,   136,   137,    -1,    -1,    -1,
     141,   142,   143,    -1,   145,   146,   147,    -1,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,    -1,
     161,    -1,   163,   164,   165,   166,    -1,   168,    -1,   170,
      -1,    -1,    -1,   174,   175,   176,    -1,   178,    -1,   180,
      -1,    -1,    -1,   184,   185,    -1,   187,    -1,   189,   190,
     191,   192,   193,   194,   195,    -1,   197,   198,   199,   200,
      -1,   202,   203,   204,   205,   206,   207,   208,    -1,   210,
      -1,   212,   213,   214,   215,   216,   217,   218,   219,    -1,
     221,    -1,   223,    -1,    -1,   226,    -1,   228,    -1,   230,
     231,   232,   233,   234,    -1,    -1,   237,    -1,   239,    -1,
      -1,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,    -1,
     271,   272,   273,   274,    -1,   276,    -1,   278,   279,    -1,
     281,    -1,   283,   284,   285,   286,   287,   288,    -1,   290,
     291,    -1,    -1,   294,   295,   296,    -1,    -1,   299,   300,
      -1,   302,    -1,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,    -1,    -1,   316,    -1,    -1,    -1,    -1,
     321,   322,   323,    -1,   325,   326,   327,   328,   329,   330,
      -1,   332,   333,   334,   335,   336,    -1,    -1,   339,    -1,
     341,   342,   343,   344,   345,   346,   347,   348,    -1,   350,
     351,   352,    -1,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,    -1,   365,   366,    -1,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,    -1,    -1,   385,   386,   387,   388,   389,   390,
     391,   392,   393,    -1,   395,    -1,    -1,   398,   399,   400,
      -1,    -1,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,   417,   418,    -1,   420,
     421,    -1,   423,    -1,   425,   426,   427,   428,   429,    -1,
     431,   432,    -1,    -1,    -1,   436,   437,   438,   439,   440,
      -1,   442,   443,   444,   445,   446,   447,   448,   449,    -1,
      -1,   452,   453,   454,    -1,   456,   457,   458,   459,    -1,
     461,   462,   463,   464,   465,   466,   467,    -1,   469,    -1,
     471,    -1,   473,   474,   475,   476,    -1,    -1,    -1,   480,
      -1,    -1,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,   499,   500,
     501,   502,   503,     3,    -1,     5,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    22,    23,    24,    25,    -1,    27,    28,    29,
      30,    -1,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    45,    46,    -1,    48,    49,
      50,    -1,    52,    53,    54,    55,    56,    -1,    58,    59,
      -1,    61,    62,    63,    64,    65,    66,    -1,    -1,    69,
      70,    71,    72,    73,    -1,    75,    76,    77,    78,    79,
      -1,    -1,    -1,    83,    84,    85,    86,    87,    88,    -1,
      90,    91,    92,    -1,    94,    95,    96,    97,    98,    -1,
      -1,    -1,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,    -1,   116,    -1,   118,   119,
     120,   121,   122,   123,    -1,   125,    -1,   127,   128,   129,
     130,    -1,    -1,   133,   134,   135,   136,   137,    -1,    -1,
      -1,   141,   142,   143,    -1,   145,   146,   147,    -1,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
      -1,   161,    -1,   163,   164,   165,   166,    -1,   168,    -1,
     170,    -1,    -1,    -1,   174,   175,   176,    -1,   178,    -1,
     180,    -1,    -1,    -1,   184,   185,    -1,   187,    -1,   189,
     190,   191,   192,   193,   194,   195,    -1,   197,   198,   199,
     200,    -1,   202,   203,   204,   205,   206,   207,   208,    -1,
     210,    -1,   212,   213,   214,   215,   216,   217,   218,   219,
      -1,   221,    -1,   223,    -1,    -1,   226,    -1,   228,    -1,
     230,   231,   232,   233,   234,    -1,    -1,   237,    -1,   239,
      -1,    -1,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
      -1,   271,   272,   273,   274,    -1,   276,    -1,   278,   279,
      -1,   281,    -1,   283,   284,   285,   286,   287,   288,    -1,
     290,   291,    -1,    -1,   294,   295,   296,    -1,    -1,   299,
     300,    -1,   302,    -1,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,    -1,    -1,   316,    -1,    -1,    -1,
      -1,   321,   322,   323,    -1,   325,   326,   327,   328,   329,
     330,    -1,   332,   333,   334,   335,   336,    -1,    -1,   339,
      -1,   341,   342,   343,   344,   345,   346,   347,   348,    -1,
     350,   351,   352,    -1,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,    -1,   365,   366,    -1,   368,   369,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,    -1,    -1,   385,   386,   387,   388,   389,
     390,   391,   392,   393,    -1,   395,    -1,    -1,   398,   399,
     400,    -1,    -1,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,   417,   418,    -1,
     420,   421,    -1,   423,    -1,   425,   426,   427,   428,   429,
      -1,   431,   432,    -1,    -1,    -1,   436,   437,   438,   439,
     440,    -1,   442,   443,   444,   445,   446,   447,   448,   449,
      -1,    -1,   452,   453,   454,    -1,   456,   457,   458,   459,
      -1,   461,   462,   463,   464,   465,   466,   467,    -1,   469,
      -1,   471,    -1,   473,   474,   475,   476,    -1,    -1,    -1,
     480,    -1,    -1,   483,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,   498,   499,
     500,   501,   502,   503,     3,    -1,     5,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    22,    23,    24,    25,    -1,    27,    28,
      29,    30,    -1,    32,    33,    34,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    45,    46,    -1,    48,
      49,    50,    -1,    52,    53,    54,    55,    56,    -1,    58,
      59,    -1,    61,    62,    63,    64,    65,    66,    -1,    -1,
      69,    70,    71,    72,    73,    -1,    75,    76,    77,    78,
      79,    -1,    -1,    -1,    83,    84,    85,    86,    87,    88,
      -1,    90,    91,    92,    -1,    94,    95,    96,    97,    98,
      -1,    -1,    -1,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,    -1,   116,    -1,   118,
     119,   120,   121,   122,   123,    -1,   125,    -1,   127,   128,
     129,   130,    -1,    -1,   133,   134,   135,   136,   137,    -1,
      -1,    -1,   141,   142,   143,    -1,   145,   146,   147,    -1,
     149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
     159,    -1,   161,    -1,   163,   164,   165,   166,    -1,   168,
      -1,   170,    -1,    -1,    -1,   174,   175,   176,    -1,   178,
      -1,   180,    -1,    -1,    -1,   184,   185,    -1,   187,    -1,
     189,   190,   191,   192,   193,   194,   195,    -1,   197,   198,
     199,   200,    -1,   202,   203,   204,   205,   206,   207,   208,
      -1,   210,    -1,   212,   213,   214,   215,   216,   217,   218,
     219,    -1,   221,    -1,   223,    -1,    -1,   226,    -1,   228,
      -1,   230,   231,   232,   233,   234,    -1,    -1,   237,    -1,
     239,    -1,    -1,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,    -1,   271,   272,   273,   274,    -1,   276,    -1,   278,
     279,    -1,   281,    -1,   283,   284,   285,   286,   287,   288,
      -1,   290,   291,    -1,    -1,   294,   295,   296,    -1,    -1,
     299,   300,    -1,   302,    -1,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,    -1,    -1,   316,    -1,    -1,
      -1,    -1,   321,   322,   323,    -1,   325,   326,   327,   328,
     329,   330,    -1,   332,   333,   334,   335,   336,    -1,    -1,
     339,    -1,   341,   342,   343,   344,   345,   346,   347,   348,
      -1,   350,   351,   352,    -1,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,    -1,   365,   366,    -1,   368,
     369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,    -1,    -1,   385,   386,   387,   388,
     389,   390,   391,   392,   393,    -1,   395,    -1,    -1,   398,
     399,   400,    -1,    -1,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,   417,   418,
      -1,   420,   421,    -1,   423,    -1,   425,   426,   427,   428,
     429,    -1,   431,   432,    -1,    -1,    -1,   436,   437,   438,
     439,   440,    -1,   442,   443,   444,   445,   446,   447,   448,
     449,    -1,    -1,   452,   453,   454,    -1,   456,   457,   458,
     459,    -1,   461,   462,   463,   464,   465,   466,   467,    -1,
     469,    -1,   471,    -1,   473,   474,   475,   476,    -1,    -1,
      -1,   480,    -1,    -1,   483,   484,   485,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
     499,   500,   501,   502,   503,     3,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    -1,    27,
      28,    29,    30,    -1,    32,    33,    34,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    42,    -1,    -1,    45,    46,    -1,
      48,    49,    50,    -1,    52,    53,    54,    55,    56,    -1,
      58,    59,    -1,    61,    62,    63,    64,    65,    66,    -1,
      -1,    69,    70,    71,    72,    73,    -1,    75,    76,    77,
      78,    79,    -1,    -1,    -1,    83,    84,    85,    86,    87,
      88,    -1,    90,    91,    92,    -1,    94,    95,    96,    97,
      98,    -1,    -1,    -1,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,    -1,   116,    -1,
     118,   119,   120,   121,   122,   123,    -1,   125,    -1,   127,
     128,   129,   130,    -1,    -1,   133,   134,   135,   136,   137,
      -1,    -1,    -1,   141,   142,   143,    -1,   145,   146,   147,
      -1,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,   159,    -1,   161,    -1,   163,   164,   165,   166,    -1,
     168,    -1,   170,    -1,    -1,    -1,   174,   175,   176,    -1,
     178,    -1,   180,    -1,    -1,    -1,   184,   185,    -1,   187,
      -1,   189,   190,   191,   192,   193,   194,   195,    -1,   197,
     198,   199,   200,    -1,   202,   203,   204,   205,   206,   207,
     208,    -1,   210,    -1,   212,   213,   214,   215,   216,   217,
     218,   219,    -1,   221,    -1,   223,    -1,    -1,   226,    -1,
     228,    -1,   230,   231,   232,   233,   234,    -1,    -1,   237,
      -1,   239,    -1,    -1,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,    -1,   271,   272,   273,   274,    -1,   276,    -1,
     278,   279,    -1,   281,    -1,   283,   284,   285,   286,   287,
     288,    -1,   290,   291,    -1,    -1,   294,   295,   296,    -1,
      -1,   299,   300,    -1,   302,    -1,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,    -1,    -1,   316,    -1,
      -1,    -1,    -1,   321,   322,   323,    -1,   325,   326,   327,
     328,   329,   330,    -1,   332,   333,   334,   335,   336,    -1,
      -1,   339,    -1,   341,   342,   343,   344,   345,   346,   347,
     348,    -1,   350,   351,   352,    -1,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,    -1,   365,   366,    -1,
     368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,    -1,    -1,   385,   386,   387,
     388,   389,   390,   391,   392,   393,    -1,   395,    -1,    -1,
     398,   399,   400,    -1,    -1,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,   417,
     418,    -1,   420,   421,    -1,   423,    -1,   425,   426,   427,
     428,   429,    -1,   431,   432,    -1,    -1,    -1,   436,   437,
     438,   439,   440,    -1,   442,   443,   444,   445,   446,   447,
     448,   449,    -1,    -1,   452,   453,   454,    -1,   456,   457,
     458,   459,    -1,   461,   462,   463,   464,   465,   466,   467,
      -1,   469,    -1,   471,    -1,   473,   474,   475,   476,    -1,
      -1,    -1,   480,    -1,    -1,   483,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,   499,   500,   501,   502,   503,     3,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    -1,
      27,    28,    29,    30,    -1,    32,    33,    34,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    42,    -1,    -1,    45,    46,
      -1,    48,    49,    50,    -1,    52,    53,    54,    55,    56,
      -1,    58,    59,    -1,    61,    62,    63,    64,    65,    66,
      -1,    -1,    69,    70,    71,    72,    73,    -1,    75,    76,
      77,    78,    79,    -1,    -1,    -1,    83,    84,    85,    86,
      87,    88,    -1,    90,    91,    92,    -1,    94,    95,    96,
      97,    98,    -1,    -1,    -1,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,    -1,   116,
      -1,   118,   119,   120,   121,   122,   123,    -1,   125,    -1,
     127,   128,   129,   130,    -1,    -1,   133,   134,   135,   136,
     137,    -1,    -1,    -1,   141,   142,   143,    -1,   145,   146,
     147,    -1,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,    -1,   161,    -1,   163,   164,   165,   166,
      -1,   168,    -1,   170,    -1,    -1,    -1,   174,   175,   176,
      -1,   178,    -1,   180,    -1,    -1,    -1,   184,   185,    -1,
     187,    -1,   189,   190,   191,   192,   193,   194,   195,    -1,
     197,   198,   199,   200,    -1,   202,   203,   204,   205,   206,
     207,   208,    -1,   210,    -1,   212,   213,   214,   215,   216,
     217,   218,   219,    -1,   221,    -1,   223,    -1,    -1,   226,
      -1,   228,    -1,   230,   231,   232,   233,   234,    -1,    -1,
     237,    -1,   239,    -1,    -1,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,    -1,   271,   272,   273,   274,    -1,   276,
      -1,   278,   279,    -1,   281,    -1,   283,   284,   285,   286,
     287,   288,    -1,   290,   291,    -1,    -1,   294,   295,   296,
      -1,    -1,   299,   300,    -1,   302,    -1,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,    -1,    -1,   316,
      -1,    -1,    -1,    -1,   321,   322,   323,    -1,   325,   326,
     327,   328,   329,   330,    -1,   332,   333,   334,   335,   336,
      -1,    -1,   339,    -1,   341,   342,   343,   344,   345,   346,
     347,   348,    -1,   350,   351,   352,    -1,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,    -1,   365,   366,
      -1,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,    -1,    -1,   385,   386,
     387,   388,   389,   390,   391,   392,   393,    -1,   395,    -1,
      -1,   398,   399,   400,    -1,    -1,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
     417,   418,    -1,   420,   421,    -1,   423,    -1,   425,   426,
     427,   428,   429,    -1,   431,   432,    -1,    -1,    -1,   436,
     437,   438,   439,   440,    -1,   442,   443,   444,   445,   446,
     447,   448,   449,    -1,    -1,   452,   453,   454,    -1,   456,
     457,   458,   459,    -1,   461,   462,   463,   464,   465,   466,
     467,    -1,   469,    -1,   471,    -1,   473,   474,   475,   476,
      -1,    -1,    -1,   480,    -1,    -1,   483,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,   498,   499,   500,   501,   502,   503,     3,    -1,     5,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      -1,    27,    28,    29,    30,    -1,    32,    33,    34,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    45,
      46,    -1,    48,    49,    50,    -1,    52,    53,    54,    55,
      56,    -1,    58,    59,    -1,    61,    62,    63,    64,    65,
      66,    -1,    -1,    69,    70,    71,    72,    73,    -1,    75,
      76,    77,    78,    79,    -1,    -1,    -1,    83,    84,    85,
      86,    87,    88,    -1,    90,    91,    92,    -1,    94,    95,
      96,    97,    98,    -1,    -1,    -1,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,    -1,
     116,    -1,   118,   119,   120,   121,   122,   123,    -1,   125,
      -1,   127,   128,   129,   130,    -1,    -1,   133,   134,   135,
     136,   137,    -1,    -1,    -1,   141,   142,   143,    -1,   145,
     146,   147,    -1,   149,   150,   151,   152,   153,   154,   155,
     156,   157,   158,   159,    -1,   161,    -1,   163,   164,   165,
     166,    -1,   168,    -1,   170,    -1,    -1,    -1,   174,   175,
     176,    -1,   178,    -1,   180,    -1,    -1,    -1,   184,   185,
      -1,   187,    -1,   189,   190,   191,   192,   193,   194,   195,
      -1,   197,   198,   199,   200,    -1,   202,   203,   204,   205,
     206,   207,   208,    -1,   210,    -1,   212,   213,   214,   215,
     216,   217,   218,   219,    -1,   221,    -1,   223,    -1,    -1,
     226,    -1,   228,    -1,   230,   231,   232,   233,   234,    -1,
      -1,   237,    -1,   239,    -1,    -1,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,    -1,   271,   272,   273,   274,    -1,
     276,    -1,   278,   279,    -1,   281,    -1,   283,   284,   285,
     286,   287,   288,    -1,   290,   291,    -1,    -1,   294,   295,
     296,    -1,    -1,   299,   300,    -1,   302,    -1,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,    -1,    -1,
     316,    -1,    -1,    -1,    -1,   321,   322,   323,    -1,   325,
     326,   327,   328,   329,   330,    -1,   332,   333,   334,   335,
     336,    -1,    -1,   339,    -1,   341,   342,   343,   344,   345,
     346,   347,   348,    -1,   350,   351,   352,    -1,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,    -1,   365,
     366,    -1,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,    -1,    -1,   385,
     386,   387,   388,   389,   390,   391,   392,   393,    -1,   395,
      -1,    -1,   398,   399,   400,    -1,    -1,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,   417,   418,    -1,   420,   421,    -1,   423,    -1,   425,
     426,   427,   428,   429,    -1,   431,   432,    -1,    -1,    -1,
     436,   437,   438,   439,   440,    -1,   442,   443,   444,   445,
     446,   447,   448,   449,    -1,    -1,   452,   453,   454,    -1,
     456,   457,   458,   459,    -1,   461,   462,   463,   464,   465,
     466,   467,    -1,   469,    -1,   471,    -1,   473,   474,   475,
     476,    -1,    -1,    -1,   480,    -1,    -1,   483,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,   498,   499,   500,   501,   502,   503,     3,    -1,
       5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,
      25,    -1,    27,    28,    29,    30,    -1,    32,    33,    34,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      45,    46,    -1,    48,    49,    50,    -1,    52,    53,    54,
      55,    56,    -1,    58,    59,    -1,    61,    62,    63,    64,
      65,    66,    -1,    -1,    69,    70,    71,    72,    73,    -1,
      75,    76,    77,    78,    79,    -1,    -1,    -1,    83,    84,
      85,    86,    87,    88,    -1,    90,    91,    92,    -1,    94,
      95,    96,    97,    98,    -1,    -1,    -1,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
      -1,   116,    -1,   118,   119,   120,   121,   122,   123,    -1,
     125,    -1,   127,   128,   129,   130,    -1,    -1,   133,   134,
     135,   136,   137,    -1,    -1,    -1,   141,   142,   143,    -1,
     145,   146,   147,    -1,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,    -1,   161,    -1,   163,   164,
     165,   166,    -1,   168,    -1,   170,    -1,    -1,    -1,   174,
     175,   176,    -1,   178,    -1,   180,    -1,    -1,    -1,   184,
     185,    -1,   187,    -1,   189,   190,   191,   192,   193,   194,
     195,    -1,   197,   198,   199,   200,    -1,   202,   203,   204,
     205,   206,   207,   208,    -1,   210,    -1,   212,   213,   214,
     215,   216,   217,   218,   219,    -1,   221,    -1,   223,    -1,
      -1,   226,    -1,   228,    -1,   230,   231,   232,   233,   234,
      -1,    -1,   237,    -1,   239,    -1,    -1,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,    -1,   271,   272,   273,   274,
      -1,   276,    -1,   278,   279,    -1,   281,    -1,   283,   284,
     285,   286,   287,   288,    -1,   290,   291,    -1,    -1,   294,
     295,   296,    -1,    -1,   299,   300,    -1,   302,    -1,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,    -1,
      -1,   316,    -1,    -1,    -1,    -1,   321,   322,   323,    -1,
     325,   326,   327,   328,   329,   330,    -1,   332,   333,   334,
     335,   336,    -1,    -1,   339,    -1,   341,   342,   343,   344,
     345,   346,   347,   348,    -1,   350,   351,   352,    -1,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,    -1,
     365,   366,    -1,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,    -1,    -1,
     385,   386,   387,   388,   389,   390,   391,   392,   393,    -1,
     395,    -1,    -1,   398,   399,   400,    -1,    -1,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,    -1,   420,   421,    -1,   423,    -1,
     425,   426,   427,   428,   429,    -1,   431,   432,    -1,    -1,
      -1,   436,   437,   438,   439,   440,    -1,   442,   443,   444,
     445,   446,   447,   448,   449,    -1,    -1,   452,   453,   454,
      -1,   456,   457,   458,   459,    -1,   461,   462,   463,   464,
     465,   466,   467,    -1,   469,    -1,   471,    -1,   473,   474,
     475,   476,    -1,    -1,    -1,   480,    -1,    -1,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,     3,
      -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,
      24,    25,    -1,    27,    28,    29,    30,    -1,    32,    33,
      34,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    45,    46,    -1,    48,    49,    50,    -1,    52,    53,
      54,    55,    56,    -1,    58,    59,    -1,    61,    62,    63,
      64,    65,    66,    -1,    -1,    69,    70,    71,    72,    73,
      -1,    75,    76,    77,    78,    79,    -1,    -1,    -1,    83,
      84,    85,    86,    87,    88,    -1,    90,    91,    92,    -1,
      94,    95,    96,    97,    98,    -1,    -1,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,    -1,   116,    -1,   118,   119,   120,   121,   122,   123,
      -1,   125,    -1,   127,   128,   129,   130,    -1,    -1,   133,
     134,   135,   136,   137,    -1,    -1,    -1,   141,   142,   143,
      -1,   145,   146,   147,    -1,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,   159,    -1,   161,    -1,   163,
     164,   165,   166,    -1,   168,    -1,   170,    -1,    -1,    -1,
     174,   175,   176,    -1,   178,    -1,   180,    -1,    -1,    -1,
     184,   185,    -1,   187,    -1,   189,   190,   191,   192,   193,
     194,   195,    -1,   197,   198,   199,   200,    -1,   202,   203,
     204,   205,   206,   207,   208,    -1,   210,    -1,   212,   213,
     214,   215,   216,   217,   218,   219,    -1,   221,    -1,   223,
      -1,    -1,   226,    -1,   228,    -1,   230,   231,   232,   233,
     234,    -1,    -1,   237,    -1,   239,    -1,    -1,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,    -1,   271,   272,   273,
     274,    -1,   276,    -1,   278,   279,    -1,   281,    -1,   283,
     284,   285,   286,   287,   288,    -1,   290,   291,    -1,    -1,
     294,   295,   296,    -1,    -1,   299,   300,    -1,   302,    -1,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
      -1,    -1,   316,    -1,    -1,    -1,    -1,   321,   322,   323,
      -1,   325,   326,   327,   328,   329,   330,    -1,   332,   333,
     334,   335,   336,    -1,    -1,   339,    -1,   341,   342,   343,
     344,   345,   346,   347,   348,    -1,   350,   351,   352,    -1,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
      -1,   365,   366,    -1,   368,   369,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,    -1,
      -1,   385,   386,   387,   388,   389,   390,   391,   392,   393,
      -1,   395,    -1,    -1,   398,   399,   400,    -1,    -1,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,   417,   418,    -1,   420,   421,    -1,   423,
      -1,   425,   426,   427,   428,   429,    -1,   431,   432,    -1,
      -1,    -1,   436,   437,   438,   439,   440,    -1,   442,   443,
     444,   445,   446,   447,   448,   449,    -1,    -1,   452,   453,
     454,    -1,   456,   457,   458,   459,    -1,   461,   462,   463,
     464,   465,   466,   467,    -1,   469,    -1,   471,    -1,   473,
     474,   475,   476,    -1,    -1,    -1,   480,    -1,    -1,   483,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,   499,   500,   501,   502,   503,
       3,    -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,
      23,    24,    25,    -1,    27,    28,    29,    30,    -1,    32,
      33,    34,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    45,    46,    -1,    48,    49,    50,    -1,    52,
      53,    54,    55,    56,    -1,    58,    59,    -1,    61,    62,
      63,    64,    65,    66,    -1,    -1,    69,    70,    71,    72,
      73,    -1,    75,    76,    77,    78,    79,    -1,    -1,    -1,
      83,    84,    85,    86,    87,    88,    -1,    90,    91,    92,
      -1,    94,    95,    96,    97,    98,    -1,    -1,    -1,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,    -1,   116,    -1,   118,   119,   120,   121,   122,
     123,    -1,   125,    -1,   127,   128,   129,   130,    -1,    -1,
     133,   134,   135,   136,   137,    -1,    -1,    -1,   141,   142,
     143,    -1,   145,   146,   147,    -1,   149,   150,   151,   152,
     153,   154,   155,   156,   157,   158,   159,    -1,   161,    -1,
     163,   164,   165,   166,    -1,   168,    -1,   170,    -1,    -1,
      -1,   174,   175,   176,    -1,   178,    -1,   180,    -1,    -1,
      -1,   184,   185,    -1,   187,    -1,   189,   190,   191,   192,
     193,   194,   195,    -1,   197,   198,   199,   200,    -1,   202,
     203,   204,   205,   206,   207,   208,    -1,   210,    -1,   212,
     213,   214,   215,   216,   217,   218,   219,    -1,   221,    -1,
     223,    -1,    -1,   226,    -1,   228,    -1,   230,   231,   232,
     233,   234,    -1,    -1,   237,    -1,   239,    -1,    -1,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,    -1,   271,   272,
     273,   274,    -1,   276,    -1,   278,   279,    -1,   281,    -1,
     283,   284,   285,   286,   287,   288,    -1,   290,   291,    -1,
      -1,   294,   295,   296,    -1,    -1,   299,   300,    -1,   302,
      -1,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,    -1,    -1,   316,    -1,    -1,    -1,    -1,   321,   322,
     323,    -1,   325,   326,   327,   328,   329,   330,    -1,   332,
     333,   334,   335,   336,    -1,    -1,   339,    -1,   341,   342,
     343,   344,   345,   346,   347,   348,    -1,   350,   351,   352,
      -1,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,    -1,   365,   366,    -1,   368,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
      -1,    -1,   385,   386,   387,   388,   389,   390,   391,   392,
     393,    -1,   395,    -1,    -1,   398,   399,   400,    -1,    -1,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,   417,   418,    -1,   420,   421,    -1,
     423,    -1,   425,   426,   427,   428,   429,    -1,   431,   432,
      -1,    -1,    -1,   436,   437,   438,   439,   440,    -1,   442,
     443,   444,   445,   446,   447,   448,   449,    -1,    -1,   452,
     453,   454,    -1,   456,   457,   458,   459,    -1,   461,   462,
     463,   464,   465,   466,   467,    -1,   469,    -1,   471,    -1,
     473,   474,   475,   476,    -1,    -1,    -1,   480,    -1,    -1,
     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   500,   501,   502,
     503,     3,    -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    -1,    27,    28,    29,    30,    -1,
      32,    33,    34,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    45,    46,    -1,    48,    49,    50,    -1,
      52,    53,    54,    55,    56,    -1,    58,    59,    -1,    61,
      62,    63,    64,    65,    66,    -1,    -1,    69,    70,    71,
      72,    73,    -1,    75,    76,    77,    78,    79,    -1,    -1,
      -1,    83,    84,    85,    86,    87,    88,    -1,    90,    91,
      92,    -1,    94,    95,    96,    97,    98,    -1,    -1,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,    -1,   116,    -1,   118,   119,   120,   121,
     122,   123,    -1,   125,    -1,   127,   128,   129,   130,    -1,
      -1,   133,   134,   135,   136,   137,    -1,    -1,    -1,   141,
     142,   143,    -1,   145,   146,   147,    -1,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,    -1,   161,
      -1,   163,   164,   165,   166,    -1,   168,    -1,   170,    -1,
      -1,    -1,   174,   175,   176,    -1,   178,    -1,   180,    -1,
      -1,    -1,   184,   185,    -1,   187,    -1,   189,   190,   191,
     192,   193,   194,   195,    -1,   197,   198,   199,   200,    -1,
     202,   203,   204,   205,   206,   207,   208,    -1,   210,    -1,
     212,   213,   214,   215,   216,   217,   218,   219,    -1,   221,
      -1,   223,    -1,    -1,   226,    -1,   228,    -1,   230,   231,
     232,   233,   234,    -1,    -1,   237,    -1,   239,    -1,    -1,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,    -1,   271,
     272,   273,   274,    -1,   276,    -1,   278,   279,    -1,   281,
      -1,   283,   284,   285,   286,   287,   288,    -1,   290,   291,
      -1,    -1,   294,   295,   296,    -1,    -1,   299,   300,    -1,
     302,    -1,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,    -1,    -1,   316,    -1,    -1,    -1,    -1,   321,
     322,   323,    -1,   325,   326,   327,   328,   329,   330,    -1,
     332,   333,   334,   335,   336,    -1,    -1,   339,    -1,   341,
     342,   343,   344,   345,   346,   347,   348,    -1,   350,   351,
     352,    -1,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,    -1,   365,   366,    -1,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,    -1,    -1,   385,   386,   387,   388,   389,   390,   391,
     392,   393,    -1,   395,    -1,    -1,   398,   399,   400,    -1,
      -1,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,   417,   418,    -1,   420,   421,
      -1,   423,    -1,   425,   426,   427,   428,   429,    -1,   431,
     432,    -1,    -1,    -1,   436,   437,   438,   439,   440,    -1,
     442,   443,   444,   445,   446,   447,   448,   449,    -1,    -1,
     452,   453,   454,    -1,   456,   457,   458,   459,    -1,   461,
     462,   463,   464,   465,   466,   467,    -1,   469,    -1,   471,
      -1,   473,   474,   475,   476,    -1,    -1,    -1,   480,    -1,
      -1,   483,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,   498,   499,   500,   501,
     502,   503,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    -1,    27,    28,    29,    30,
      -1,    32,    33,    34,    -1,    -1,    -1,    38,    -1,    -1,
      -1,    42,    -1,    44,    45,    46,    -1,    48,    49,    50,
      51,    52,    53,    54,    -1,    56,    57,    58,    59,    -1,
      61,    62,    63,    64,    65,    66,    -1,    -1,    69,    70,
      71,    72,    73,    -1,    75,    76,    77,    78,    -1,    -1,
      81,    -1,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    -1,    94,    95,    96,    97,    98,    -1,    -1,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,    -1,   116,    -1,   118,   119,   120,
     121,   122,   123,    -1,   125,    -1,   127,   128,   129,   130,
      -1,    -1,   133,   134,   135,   136,   137,    -1,    -1,    -1,
     141,   142,   143,    -1,   145,   146,   147,    -1,   149,   150,
     151,   152,    -1,   154,   155,   156,   157,   158,    -1,    -1,
     161,    -1,   163,   164,   165,   166,    -1,   168,    -1,   170,
     171,    -1,   173,   174,   175,   176,   177,   178,    -1,   180,
      -1,    -1,    -1,    -1,    -1,    -1,   187,    -1,   189,   190,
     191,   192,   193,   194,   195,   196,   197,   198,   199,   200,
      -1,   202,   203,   204,   205,   206,   207,   208,    -1,   210,
     211,    -1,   213,   214,   215,   216,   217,   218,   219,    -1,
     221,    -1,   223,   224,   225,   226,   227,   228,    -1,   230,
     231,   232,   233,   234,    -1,    -1,   237,   238,   239,   240,
      -1,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,    -1,    -1,    -1,   278,   279,   280,
     281,    -1,    -1,   284,   285,   286,   287,   288,    -1,   290,
     291,    -1,    -1,   294,   295,   296,    -1,    -1,   299,    -1,
     301,   302,   303,    -1,   305,   306,   307,   308,   309,   310,
     311,   312,   313,    -1,    -1,   316,    -1,    -1,    -1,    -1,
     321,   322,    -1,   324,   325,   326,    -1,   328,   329,   330,
      -1,   332,   333,   334,   335,   336,    -1,    -1,   339,    -1,
     341,   342,   343,   344,   345,   346,   347,   348,    -1,   350,
     351,   352,    -1,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,    -1,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,    -1,   384,   385,   386,   387,   388,   389,   390,
     391,   392,   393,    -1,   395,   396,    -1,   398,   399,   400,
      -1,    -1,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,    -1,   418,    -1,   420,
     421,    -1,   423,   424,   425,   426,   427,   428,   429,    -1,
     431,   432,    -1,    -1,    -1,   436,   437,    -1,   439,    -1,
      -1,   442,   443,   444,   445,   446,   447,   448,   449,   450,
      -1,   452,   453,   454,    -1,   456,   457,   458,   459,    -1,
     461,   462,   463,   464,   465,    -1,   467,    -1,   469,   470,
     471,    -1,   473,   474,   475,   476,    -1,    -1,    -1,   480,
      -1,    -1,   483,   484,   485,   486,   487,   488,     3,    -1,
       5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   500,
     501,   502,   503,    -1,    -1,    -1,    -1,    22,    23,    24,
      25,    -1,    27,    28,    29,    30,    -1,    32,    33,    34,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      45,    46,    -1,    48,    49,    50,    -1,    52,    53,    54,
      55,    56,    -1,    58,    59,    -1,    61,    62,    63,    64,
      65,    66,    -1,    -1,    69,    70,    71,    72,    73,    -1,
      75,    76,    77,    78,    79,    -1,    -1,    -1,    83,    84,
      85,    86,    87,    88,    -1,    90,    91,    92,    -1,    94,
      95,    96,    97,    98,    -1,    -1,    -1,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
      -1,   116,    -1,   118,   119,   120,   121,   122,   123,    -1,
     125,    -1,   127,   128,   129,   130,    -1,    -1,   133,   134,
     135,   136,   137,    -1,    -1,    -1,   141,   142,   143,    -1,
     145,   146,   147,    -1,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,    -1,   161,    -1,   163,   164,
     165,   166,    -1,   168,    -1,   170,    -1,    -1,    -1,   174,
     175,   176,    -1,   178,    -1,   180,    -1,    -1,    -1,   184,
     185,    -1,   187,    -1,   189,   190,   191,   192,   193,   194,
     195,    -1,   197,   198,   199,   200,    -1,   202,   203,   204,
     205,   206,   207,   208,    -1,   210,    -1,   212,   213,   214,
     215,   216,   217,   218,   219,    -1,   221,    -1,   223,    -1,
      -1,   226,    -1,   228,    -1,   230,   231,   232,   233,   234,
      -1,    -1,   237,    -1,   239,    -1,    -1,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,    -1,   271,   272,   273,   274,
      -1,   276,    -1,   278,   279,    -1,   281,    -1,   283,   284,
     285,   286,   287,   288,    -1,   290,   291,    -1,    -1,   294,
     295,   296,    -1,    -1,   299,   300,    -1,   302,    -1,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,    -1,
      -1,   316,    -1,    -1,    -1,    -1,   321,   322,   323,    -1,
     325,   326,   327,   328,   329,   330,    -1,   332,   333,   334,
     335,   336,    -1,    -1,   339,    -1,   341,   342,   343,   344,
     345,   346,   347,   348,    -1,   350,   351,   352,    -1,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,    -1,
     365,   366,    -1,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,    -1,    -1,
     385,   386,   387,   388,   389,   390,   391,   392,   393,    -1,
     395,    -1,    -1,   398,   399,   400,    -1,    -1,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,    -1,   420,   421,    -1,   423,    -1,
     425,   426,   427,   428,   429,    -1,   431,   432,    -1,    -1,
      -1,   436,   437,   438,   439,   440,    -1,   442,   443,   444,
     445,   446,   447,   448,   449,    -1,    -1,   452,   453,   454,
      -1,   456,   457,   458,   459,    -1,   461,   462,   463,   464,
     465,   466,   467,    -1,   469,    -1,   471,    -1,   473,   474,
     475,   476,    -1,    -1,    -1,   480,    -1,    -1,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,
      24,    25,    -1,    27,    28,    29,    30,    -1,    32,    33,
      34,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    45,    46,    -1,    48,    49,    50,    -1,    52,    53,
      54,    55,    56,    -1,    58,    59,    -1,    61,    62,    63,
      64,    65,    66,    -1,    -1,    69,    70,    71,    72,    73,
      -1,    75,    76,    77,    78,    79,    -1,    -1,    -1,    83,
      84,    85,    86,    87,    88,    -1,    90,    91,    92,    -1,
      94,    95,    96,    97,    98,    -1,    -1,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,    -1,   116,    -1,   118,   119,   120,   121,   122,   123,
      -1,   125,    -1,   127,   128,   129,   130,    -1,    -1,   133,
     134,   135,   136,   137,    -1,    -1,    -1,   141,   142,   143,
      -1,   145,   146,   147,    -1,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,   159,    -1,   161,    -1,   163,
     164,   165,   166,    -1,   168,    -1,   170,    -1,    -1,    -1,
     174,   175,   176,    -1,   178,    -1,   180,    -1,    -1,    -1,
     184,   185,    -1,   187,    -1,   189,   190,   191,   192,   193,
     194,   195,    -1,   197,   198,   199,   200,    -1,   202,   203,
     204,   205,   206,   207,   208,    -1,   210,    -1,   212,   213,
     214,   215,   216,   217,   218,   219,    -1,   221,    -1,   223,
      -1,    -1,   226,    -1,   228,    -1,   230,   231,   232,   233,
     234,    -1,    -1,   237,    -1,   239,    -1,    -1,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,    -1,   271,   272,   273,
     274,    -1,   276,    -1,   278,   279,    -1,   281,    -1,   283,
     284,   285,   286,   287,   288,    -1,   290,   291,    -1,    -1,
     294,   295,   296,    -1,    -1,   299,   300,    -1,   302,    -1,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
      -1,    -1,   316,    -1,    -1,    -1,    -1,   321,   322,   323,
      -1,   325,   326,   327,   328,   329,   330,    -1,   332,   333,
     334,   335,   336,    -1,    -1,   339,    -1,   341,   342,   343,
     344,   345,   346,   347,   348,    -1,   350,   351,   352,    -1,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
      -1,   365,   366,    -1,   368,   369,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,    -1,
      -1,   385,   386,   387,   388,   389,   390,   391,   392,   393,
      -1,   395,    -1,    -1,   398,   399,   400,    -1,    -1,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,   417,   418,    -1,   420,   421,    -1,   423,
      -1,   425,   426,   427,   428,   429,    -1,   431,   432,    -1,
      -1,    -1,   436,   437,   438,   439,   440,    -1,   442,   443,
     444,   445,   446,   447,   448,   449,    -1,    -1,   452,   453,
     454,    -1,   456,   457,   458,   459,    -1,   461,   462,   463,
     464,   465,   466,   467,    -1,   469,    -1,   471,    -1,   473,
     474,   475,   476,    -1,    -1,    -1,   480,    -1,    -1,   483,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,   499,   500,   501,   502,   503,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,
      23,    24,    25,    -1,    27,    28,    29,    30,    -1,    32,
      33,    34,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    45,    46,    -1,    48,    49,    50,    -1,    52,
      53,    54,    55,    56,    -1,    58,    59,    -1,    61,    62,
      63,    64,    65,    66,    -1,    -1,    69,    70,    71,    72,
      73,    -1,    75,    76,    77,    78,    79,    -1,    -1,    -1,
      83,    84,    85,    86,    87,    88,    -1,    90,    91,    92,
      -1,    94,    95,    96,    97,    98,    -1,    -1,    -1,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,    -1,   116,    -1,   118,   119,   120,   121,   122,
     123,    -1,   125,    -1,   127,   128,   129,   130,    -1,    -1,
     133,   134,   135,   136,   137,    -1,    -1,    -1,   141,   142,
     143,    -1,   145,   146,   147,    -1,   149,   150,   151,   152,
     153,   154,   155,   156,   157,   158,   159,    -1,   161,    -1,
     163,   164,   165,   166,    -1,   168,    -1,   170,    -1,    -1,
      -1,   174,   175,   176,    -1,   178,    -1,   180,    -1,    -1,
      -1,   184,   185,    -1,   187,    -1,   189,   190,   191,   192,
     193,   194,   195,    -1,   197,   198,   199,   200,    -1,   202,
     203,   204,   205,   206,   207,   208,    -1,   210,    -1,   212,
     213,   214,   215,   216,   217,   218,   219,    -1,   221,    -1,
     223,    -1,    -1,   226,    -1,   228,    -1,   230,   231,   232,
     233,   234,    -1,    -1,   237,    -1,   239,    -1,    -1,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,    -1,   271,   272,
     273,   274,    -1,   276,    -1,   278,   279,    -1,   281,    -1,
     283,   284,   285,   286,   287,   288,    -1,   290,   291,    -1,
      -1,   294,   295,   296,    -1,    -1,   299,   300,    -1,   302,
      -1,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,    -1,    -1,   316,    -1,    -1,    -1,    -1,   321,   322,
     323,    -1,   325,   326,   327,   328,   329,   330,    -1,   332,
     333,   334,   335,   336,    -1,    -1,   339,    -1,   341,   342,
     343,   344,   345,   346,   347,   348,    -1,   350,   351,   352,
      -1,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,    -1,   365,   366,    -1,   368,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
      -1,    -1,   385,   386,   387,   388,   389,   390,   391,   392,
     393,    -1,   395,    -1,    -1,   398,   399,   400,    -1,    -1,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,   417,   418,    -1,   420,   421,    -1,
     423,    -1,   425,   426,   427,   428,   429,    -1,   431,   432,
      -1,    -1,    -1,   436,   437,   438,   439,   440,    -1,   442,
     443,   444,   445,   446,   447,   448,   449,    -1,    -1,   452,
     453,   454,    -1,   456,   457,   458,   459,    -1,   461,   462,
     463,   464,   465,   466,   467,    -1,   469,    -1,   471,    -1,
     473,   474,   475,   476,    -1,    -1,    -1,   480,    -1,    -1,
     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   500,   501,   502,
     503,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    -1,    27,    28,    29,    30,    -1,
      32,    33,    34,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    45,    46,    -1,    48,    49,    50,    -1,
      52,    53,    54,    55,    56,    -1,    58,    59,    -1,    61,
      62,    63,    64,    65,    66,    -1,    -1,    69,    70,    71,
      72,    73,    -1,    75,    76,    77,    78,    79,    -1,    -1,
      -1,    83,    84,    85,    86,    87,    88,    -1,    90,    91,
      92,    -1,    94,    95,    96,    97,    98,    -1,    -1,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,    -1,   116,    -1,   118,   119,   120,   121,
     122,   123,    -1,   125,    -1,   127,   128,   129,   130,    -1,
      -1,   133,   134,   135,   136,   137,    -1,    -1,    -1,   141,
     142,   143,    -1,   145,   146,   147,    -1,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,    -1,   161,
      -1,   163,   164,   165,   166,    -1,   168,    -1,   170,    -1,
      -1,    -1,   174,   175,   176,    -1,   178,    -1,   180,    -1,
      -1,    -1,   184,   185,    -1,   187,    -1,   189,   190,   191,
     192,   193,   194,   195,    -1,   197,   198,   199,   200,    -1,
     202,   203,   204,   205,   206,   207,   208,    -1,   210,    -1,
     212,   213,   214,   215,   216,   217,   218,   219,    -1,   221,
      -1,   223,    -1,    -1,   226,    -1,   228,    -1,   230,   231,
     232,   233,   234,    -1,    -1,   237,    -1,   239,    -1,    -1,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,    -1,   271,
     272,   273,   274,    -1,   276,    -1,   278,   279,    -1,   281,
      -1,   283,   284,   285,   286,   287,   288,    -1,   290,   291,
      -1,    -1,   294,   295,   296,    -1,    -1,   299,   300,    -1,
     302,    -1,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,    -1,    -1,   316,    -1,    -1,    -1,    -1,   321,
     322,   323,    -1,   325,   326,   327,   328,   329,   330,    -1,
     332,   333,   334,   335,   336,    -1,    -1,   339,    -1,   341,
     342,   343,   344,   345,   346,   347,   348,    -1,   350,   351,
     352,    -1,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,    -1,   365,   366,    -1,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,    -1,    -1,   385,   386,   387,   388,   389,   390,   391,
     392,   393,    -1,   395,    -1,    -1,   398,   399,   400,    -1,
      -1,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,   417,   418,    -1,   420,   421,
      -1,   423,    -1,   425,   426,   427,   428,   429,    -1,   431,
     432,    -1,    -1,    -1,   436,   437,   438,   439,   440,    -1,
     442,   443,   444,   445,   446,   447,   448,   449,    -1,    -1,
     452,   453,   454,    -1,   456,   457,   458,   459,    -1,   461,
     462,   463,   464,   465,   466,   467,    -1,   469,    -1,   471,
      -1,   473,   474,   475,   476,    -1,    -1,    -1,   480,    -1,
      -1,   483,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,   498,   499,   500,   501,
     502,   503,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    -1,    27,    28,    29,    30,
      -1,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    45,    46,    -1,    48,    49,    50,
      -1,    52,    53,    54,    55,    56,    -1,    58,    59,    -1,
      61,    62,    63,    64,    65,    66,    -1,    -1,    69,    70,
      71,    72,    73,    -1,    75,    76,    77,    78,    79,    -1,
      -1,    -1,    83,    84,    85,    86,    87,    88,    -1,    90,
      91,    92,    -1,    94,    95,    96,    97,    98,    -1,    -1,
      -1,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,    -1,   116,    -1,   118,   119,   120,
     121,   122,   123,    -1,   125,    -1,   127,   128,   129,   130,
      -1,    -1,   133,   134,   135,   136,   137,    -1,    -1,    -1,
     141,   142,   143,    -1,   145,   146,   147,    -1,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,    -1,
     161,    -1,   163,   164,   165,   166,    -1,   168,    -1,   170,
      -1,    -1,    -1,   174,   175,   176,    -1,   178,    -1,   180,
      -1,    -1,    -1,   184,   185,    -1,   187,    -1,   189,   190,
     191,   192,   193,   194,   195,    -1,   197,   198,   199,   200,
      -1,   202,   203,   204,   205,   206,   207,   208,    -1,   210,
      -1,   212,   213,   214,   215,   216,   217,   218,   219,    -1,
     221,    -1,   223,    -1,    -1,   226,    -1,   228,    -1,   230,
     231,   232,   233,   234,    -1,    -1,   237,    -1,   239,    -1,
      -1,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,    -1,
     271,   272,   273,   274,    -1,   276,    -1,   278,   279,    -1,
     281,    -1,   283,   284,   285,   286,   287,   288,    -1,   290,
     291,    -1,    -1,   294,   295,   296,    -1,    -1,   299,   300,
      -1,   302,    -1,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,    -1,    -1,   316,    -1,    -1,    -1,    -1,
     321,   322,   323,    -1,   325,   326,   327,   328,   329,   330,
      -1,   332,   333,   334,   335,   336,    -1,    -1,   339,    -1,
     341,   342,   343,   344,   345,   346,   347,   348,    -1,   350,
     351,   352,    -1,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,    -1,   365,   366,    -1,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,    -1,    -1,   385,   386,   387,   388,   389,   390,
     391,   392,   393,    -1,   395,    -1,    -1,   398,   399,   400,
      -1,    -1,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,   417,   418,    -1,   420,
     421,    -1,   423,    -1,   425,   426,   427,   428,   429,    -1,
     431,   432,    -1,    -1,    -1,   436,   437,   438,   439,   440,
      -1,   442,   443,   444,   445,   446,   447,   448,   449,    -1,
      -1,   452,   453,   454,    -1,   456,   457,   458,   459,    -1,
     461,   462,   463,   464,   465,   466,   467,    -1,   469,    -1,
     471,    -1,   473,   474,   475,   476,    -1,    -1,    -1,   480,
      -1,    -1,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,   499,   500,
     501,   502,   503,     3,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    22,    23,    24,    25,    -1,    27,    28,    29,
      30,    -1,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    42,    -1,    -1,    45,    46,    -1,    48,    49,
      50,    -1,    52,    53,    54,    55,    56,    -1,    58,    59,
      -1,    61,    62,    63,    64,    65,    66,    -1,    -1,    69,
      70,    71,    72,    73,    -1,    75,    76,    77,    78,    79,
      -1,    -1,    -1,    83,    84,    85,    86,    87,    88,    -1,
      90,    91,    92,    -1,    94,    95,    96,    97,    98,    -1,
      -1,    -1,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,    -1,   116,    -1,   118,   119,
     120,   121,   122,   123,    -1,   125,    -1,   127,   128,   129,
     130,    -1,    -1,   133,   134,   135,   136,   137,    -1,    -1,
      -1,   141,   142,   143,    -1,   145,   146,   147,    -1,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
      -1,   161,    -1,   163,   164,   165,   166,    -1,   168,    -1,
     170,    -1,    -1,    -1,   174,   175,   176,    -1,   178,    -1,
     180,    -1,    -1,    -1,   184,   185,    -1,   187,    -1,   189,
     190,   191,   192,   193,   194,   195,    -1,   197,   198,   199,
     200,    -1,   202,   203,   204,   205,   206,   207,   208,    -1,
     210,    -1,   212,   213,   214,   215,   216,   217,   218,   219,
      -1,   221,    -1,   223,    -1,    -1,   226,    -1,   228,    -1,
     230,   231,   232,   233,   234,    -1,    -1,   237,    -1,   239,
      -1,    -1,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
      -1,   271,   272,   273,   274,    -1,   276,    -1,   278,   279,
      -1,   281,    -1,   283,   284,   285,   286,   287,   288,    -1,
     290,   291,    -1,    -1,   294,   295,   296,    -1,    -1,   299,
     300,    -1,   302,    -1,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,    -1,    -1,   316,    -1,    -1,    -1,
      -1,   321,   322,   323,    -1,   325,   326,   327,   328,   329,
     330,    -1,   332,   333,   334,   335,   336,    -1,    -1,   339,
      -1,   341,   342,   343,   344,   345,   346,   347,   348,    -1,
     350,   351,   352,    -1,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,    -1,   365,   366,    -1,   368,   369,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,    -1,    -1,   385,   386,   387,   388,   389,
      -1,   391,   392,   393,    -1,   395,    -1,    -1,   398,   399,
     400,    -1,    -1,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,   417,   418,    -1,
     420,   421,    -1,   423,    -1,   425,   426,   427,   428,   429,
      -1,   431,   432,    -1,    -1,    -1,   436,   437,   438,   439,
     440,    -1,   442,   443,   444,   445,   446,   447,   448,   449,
      -1,    -1,   452,   453,   454,    -1,   456,   457,   458,   459,
      -1,   461,   462,   463,   464,   465,   466,   467,    -1,   469,
      -1,   471,    -1,   473,   474,   475,   476,    -1,    -1,    -1,
     480,    -1,    -1,   483,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,   498,   499,
     500,   501,   502,   503,     3,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    22,    23,    24,    25,    -1,    27,    28,
      29,    30,    -1,    32,    33,    34,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    45,    46,    -1,    48,
      49,    50,    -1,    52,    53,    54,    55,    56,    -1,    58,
      59,    -1,    61,    62,    63,    64,    65,    66,    -1,    -1,
      69,    70,    71,    72,    73,    -1,    75,    76,    77,    78,
      79,    -1,    -1,    -1,    83,    84,    85,    86,    87,    88,
      -1,    90,    91,    92,    -1,    94,    95,    96,    97,    98,
      -1,    -1,    -1,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,    -1,   116,    -1,   118,
     119,   120,   121,   122,   123,    -1,   125,    -1,   127,   128,
     129,   130,    -1,    -1,   133,   134,   135,   136,   137,    -1,
      -1,    -1,   141,   142,   143,    -1,   145,   146,   147,    -1,
     149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
     159,    -1,   161,    -1,   163,   164,   165,   166,    -1,   168,
      -1,   170,    -1,    -1,    -1,   174,   175,   176,    -1,   178,
      -1,   180,    -1,    -1,    -1,   184,   185,    -1,   187,    -1,
     189,   190,   191,   192,   193,   194,   195,    -1,   197,   198,
     199,   200,    -1,   202,   203,   204,   205,   206,   207,   208,
      -1,   210,    -1,   212,   213,   214,   215,   216,   217,   218,
     219,    -1,   221,    -1,   223,    -1,    -1,   226,    -1,   228,
      -1,   230,   231,   232,   233,   234,    -1,    -1,   237,    -1,
     239,    -1,    -1,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,    -1,   271,   272,   273,   274,    -1,   276,    -1,   278,
     279,    -1,   281,    -1,   283,   284,   285,   286,   287,   288,
      -1,   290,   291,    -1,    -1,   294,   295,   296,    -1,    -1,
     299,   300,    -1,   302,    -1,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,    -1,    -1,   316,    -1,    -1,
      -1,    -1,   321,   322,   323,    -1,   325,   326,   327,   328,
     329,   330,    -1,   332,   333,   334,   335,   336,    -1,    -1,
     339,    -1,   341,   342,   343,   344,   345,   346,   347,   348,
      -1,   350,   351,   352,    -1,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,    -1,   365,   366,    -1,   368,
     369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,    -1,    -1,   385,   386,   387,   388,
     389,   390,   391,   392,   393,    -1,   395,    -1,    -1,   398,
     399,   400,    -1,    -1,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,   417,   418,
      -1,   420,   421,    -1,   423,    -1,   425,   426,   427,   428,
     429,    -1,   431,   432,    -1,    -1,    -1,   436,   437,   438,
     439,   440,    -1,   442,   443,   444,   445,   446,   447,   448,
     449,    -1,    -1,   452,   453,   454,    -1,   456,   457,   458,
     459,    -1,   461,   462,   463,   464,   465,   466,   467,    -1,
     469,    -1,   471,    -1,   473,   474,   475,   476,    -1,    -1,
      -1,   480,    -1,    -1,   483,   484,   485,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
     499,   500,   501,   502,   503,     3,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    -1,    27,
      28,    29,    30,    -1,    32,    33,    34,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    45,    46,    -1,
      48,    49,    50,    -1,    52,    53,    54,    55,    56,    -1,
      58,    59,    -1,    61,    62,    63,    64,    65,    66,    -1,
      -1,    69,    70,    71,    72,    73,    -1,    75,    76,    77,
      78,    79,    -1,    -1,    -1,    83,    84,    85,    86,    87,
      88,    -1,    90,    91,    92,    -1,    94,    95,    96,    97,
      98,    -1,    -1,    -1,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,    -1,   116,    -1,
     118,   119,   120,   121,   122,   123,    -1,   125,    -1,   127,
     128,   129,   130,    -1,    -1,   133,   134,   135,   136,   137,
      -1,    -1,    -1,   141,   142,   143,    -1,   145,   146,   147,
      -1,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,   159,    -1,   161,    -1,   163,   164,   165,   166,    -1,
     168,    -1,   170,    -1,    -1,    -1,   174,   175,   176,    -1,
     178,    -1,   180,    -1,    -1,    -1,   184,   185,    -1,   187,
      -1,   189,   190,   191,   192,   193,   194,   195,    -1,   197,
     198,   199,   200,    -1,   202,   203,   204,   205,   206,   207,
     208,    -1,   210,    -1,   212,   213,   214,   215,   216,   217,
     218,   219,    -1,   221,    -1,   223,    -1,    -1,   226,    -1,
     228,    -1,   230,   231,   232,   233,   234,    -1,    -1,   237,
      -1,   239,    -1,    -1,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,    -1,   271,   272,   273,   274,    -1,   276,    -1,
     278,   279,    -1,   281,    -1,   283,   284,   285,   286,   287,
     288,    -1,   290,   291,    -1,    -1,   294,   295,   296,    -1,
      -1,   299,   300,    -1,   302,    -1,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,    -1,    -1,   316,    -1,
      -1,    -1,    -1,   321,   322,   323,    -1,   325,   326,   327,
     328,   329,   330,    -1,   332,   333,   334,   335,   336,    -1,
      -1,   339,    -1,   341,   342,   343,   344,   345,   346,   347,
     348,    -1,   350,   351,   352,    -1,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,    -1,   365,   366,    -1,
     368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,    -1,    -1,   385,   386,   387,
     388,   389,   390,   391,   392,   393,    -1,   395,    -1,    -1,
     398,   399,   400,    -1,    -1,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,   417,
     418,    -1,   420,   421,    -1,   423,    -1,   425,   426,   427,
     428,   429,    -1,   431,   432,    -1,    -1,    -1,   436,   437,
     438,   439,   440,    -1,   442,   443,   444,   445,   446,   447,
     448,   449,    -1,    -1,   452,   453,   454,    -1,   456,   457,
     458,   459,    -1,   461,   462,   463,   464,   465,   466,   467,
      -1,   469,    -1,   471,    -1,   473,   474,   475,   476,    -1,
      -1,    -1,   480,    -1,    -1,   483,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,   499,   500,   501,   502,   503,     3,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    -1,
      27,    28,    29,    30,    -1,    32,    33,    34,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    45,    46,
      -1,    48,    49,    50,    -1,    52,    53,    54,    55,    56,
      -1,    58,    59,    -1,    61,    62,    63,    64,    65,    66,
      -1,    -1,    69,    70,    71,    72,    73,    -1,    75,    76,
      77,    78,    79,    -1,    -1,    -1,    83,    84,    85,    86,
      87,    88,    -1,    90,    91,    92,    -1,    94,    95,    96,
      97,    98,    -1,    -1,    -1,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,    -1,   116,
      -1,   118,   119,   120,   121,   122,   123,    -1,   125,    -1,
     127,   128,   129,   130,    -1,    -1,   133,   134,   135,   136,
     137,    -1,    -1,    -1,   141,   142,   143,    -1,   145,   146,
     147,    -1,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,    -1,   161,    -1,   163,   164,   165,   166,
      -1,   168,    -1,   170,    -1,    -1,    -1,   174,   175,   176,
      -1,   178,    -1,   180,    -1,    -1,    -1,   184,   185,    -1,
     187,    -1,   189,   190,   191,   192,   193,   194,   195,    -1,
     197,   198,   199,   200,    -1,   202,   203,   204,   205,   206,
     207,   208,    -1,   210,    -1,   212,   213,   214,   215,   216,
     217,   218,   219,    -1,   221,    -1,   223,    -1,    -1,   226,
      -1,   228,    -1,   230,   231,   232,   233,   234,    -1,    -1,
     237,    -1,   239,    -1,    -1,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,    -1,   271,   272,   273,   274,    -1,   276,
      -1,   278,   279,    -1,   281,    -1,   283,   284,   285,   286,
     287,   288,    -1,   290,   291,    -1,    -1,   294,   295,   296,
      -1,    -1,   299,   300,    -1,   302,    -1,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,    -1,    -1,   316,
      -1,    -1,    -1,    -1,   321,   322,   323,    -1,   325,   326,
     327,   328,   329,   330,    -1,   332,   333,   334,   335,   336,
      -1,    -1,   339,    -1,   341,   342,   343,   344,   345,   346,
     347,   348,    -1,   350,   351,   352,    -1,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,    -1,   365,   366,
      -1,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,    -1,    -1,   385,   386,
     387,   388,   389,   390,   391,   392,   393,    -1,   395,    -1,
      -1,   398,   399,   400,    -1,    -1,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
     417,   418,    -1,   420,   421,    -1,   423,    -1,   425,   426,
     427,   428,   429,    -1,   431,   432,    -1,    -1,    -1,   436,
     437,   438,   439,   440,    -1,   442,   443,   444,   445,   446,
     447,   448,   449,    -1,    -1,   452,   453,   454,    -1,   456,
     457,   458,   459,    -1,   461,   462,   463,   464,   465,   466,
     467,    -1,   469,    -1,   471,    -1,   473,   474,   475,   476,
      -1,    -1,    -1,   480,    -1,    -1,   483,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,   498,   499,   500,   501,   502,   503,     3,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      -1,    27,    28,    29,    30,    -1,    32,    33,    34,    -1,
      -1,    -1,    38,    -1,    -1,    -1,    -1,    -1,    44,    45,
      46,    -1,    48,    49,    50,    51,    52,    53,    54,    -1,
      56,    57,    58,    59,    -1,    61,    62,    63,    64,    65,
      66,    -1,    -1,    69,    70,    71,    72,    73,    -1,    75,
      76,    77,    78,    -1,    -1,    81,    -1,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    -1,    94,    95,
      96,    97,    98,    -1,    -1,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,    -1,
     116,    -1,   118,   119,   120,   121,   122,   123,    -1,   125,
      -1,   127,   128,   129,   130,    -1,    -1,   133,   134,   135,
     136,   137,    -1,    -1,    -1,   141,   142,   143,    -1,   145,
     146,   147,    -1,   149,   150,   151,   152,    -1,   154,   155,
     156,   157,   158,    -1,    -1,   161,    -1,   163,   164,   165,
     166,    -1,   168,    -1,   170,   171,    -1,   173,   174,   175,
      -1,   177,   178,    -1,   180,    -1,    -1,    -1,    -1,    -1,
      -1,   187,    -1,   189,   190,   191,   192,   193,   194,   195,
     196,   197,   198,   199,   200,    -1,   202,   203,   204,   205,
     206,   207,   208,    -1,   210,   211,    -1,   213,   214,   215,
     216,   217,   218,   219,    -1,   221,    -1,   223,   224,   225,
     226,   227,   228,    -1,   230,   231,   232,   233,   234,    -1,
      -1,   237,   238,   239,   240,    -1,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,    -1,
      -1,    -1,   278,   279,   280,   281,    -1,    -1,   284,   285,
     286,   287,   288,    -1,   290,   291,    -1,    -1,   294,   295,
     296,    -1,    -1,   299,    -1,   301,   302,   303,    -1,   305,
     306,   307,   308,   309,   310,   311,   312,   313,    -1,    -1,
     316,    -1,    -1,    -1,    -1,   321,   322,    -1,   324,   325,
     326,    -1,   328,   329,   330,    -1,   332,   333,   334,   335,
     336,    -1,    -1,   339,    -1,   341,   342,   343,   344,   345,
     346,   347,   348,    -1,   350,   351,   352,    -1,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,    -1,   365,
     366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,    -1,   384,   385,
     386,   387,   388,   389,   390,   391,   392,   393,    -1,   395,
     396,    -1,   398,   399,   400,    -1,    -1,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,    -1,   418,    -1,   420,   421,    -1,   423,   424,   425,
     426,   427,   428,   429,    -1,   431,   432,    -1,    -1,    -1,
     436,   437,    -1,   439,    -1,    -1,   442,   443,   444,   445,
     446,   447,   448,   449,   450,    -1,   452,   453,   454,    -1,
     456,   457,   458,   459,    -1,   461,   462,   463,   464,   465,
      -1,   467,    -1,   469,   470,   471,    -1,   473,   474,   475,
     476,    -1,    -1,    -1,   480,    -1,    -1,   483,   484,   485,
     486,   487,   488,     3,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   500,   501,   502,   503,    -1,    -1,
      -1,    -1,    22,    23,    24,    25,    -1,    27,    28,    29,
      30,    -1,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    45,    46,    -1,    48,    49,
      50,    -1,    52,    53,    54,    55,    56,    -1,    58,    59,
      -1,    61,    62,    63,    64,    65,    66,    -1,    -1,    69,
      70,    71,    72,    73,    -1,    75,    76,    77,    78,    79,
      -1,    -1,    -1,    -1,    84,    85,    86,    87,    88,    -1,
      90,    91,    92,    -1,    94,    95,    96,    97,    98,    -1,
      -1,    -1,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,    -1,   116,    -1,   118,   119,
     120,   121,   122,   123,    -1,   125,    -1,   127,   128,   129,
     130,    -1,    -1,   133,   134,   135,   136,   137,    -1,    -1,
      -1,   141,   142,   143,    -1,   145,   146,   147,    -1,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
      -1,   161,    -1,   163,   164,   165,   166,    -1,   168,    -1,
     170,    -1,    -1,    -1,   174,   175,   176,    -1,   178,    -1,
     180,    -1,    -1,    -1,   184,   185,    -1,   187,    -1,   189,
     190,   191,   192,   193,   194,   195,    -1,   197,   198,   199,
     200,    -1,   202,   203,   204,   205,   206,   207,   208,    -1,
     210,    -1,   212,   213,   214,   215,   216,   217,   218,   219,
      -1,   221,    -1,   223,    -1,    -1,   226,    -1,   228,    -1,
     230,   231,   232,   233,   234,    -1,    -1,   237,    -1,   239,
      -1,    -1,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
      -1,   271,   272,   273,   274,    -1,   276,    -1,   278,   279,
      -1,   281,    -1,   283,   284,   285,   286,   287,   288,    -1,
     290,   291,    -1,    -1,   294,   295,   296,    -1,    -1,   299,
     300,    -1,   302,    -1,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,    -1,    -1,   316,    -1,    -1,    -1,
      -1,   321,   322,   323,    -1,   325,   326,   327,   328,   329,
     330,    -1,   332,   333,   334,   335,   336,    -1,    -1,   339,
      -1,   341,   342,   343,   344,   345,   346,   347,   348,    -1,
     350,   351,   352,    -1,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,    -1,   365,   366,    -1,   368,   369,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,    -1,    -1,   385,   386,   387,   388,   389,
     390,   391,   392,   393,    -1,   395,    -1,    -1,   398,   399,
     400,    -1,    -1,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,   417,   418,    -1,
     420,   421,    -1,   423,    -1,   425,   426,   427,   428,   429,
      -1,   431,   432,    -1,    -1,    -1,   436,   437,   438,   439,
     440,    -1,   442,   443,   444,   445,   446,   447,   448,   449,
      -1,    -1,   452,   453,   454,    -1,   456,   457,   458,   459,
      -1,   461,   462,   463,   464,   465,   466,   467,    -1,   469,
      -1,   471,    -1,   473,   474,   475,   476,    -1,    -1,    -1,
     480,    -1,    -1,   483,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,   498,   499,
     500,   501,   502,   503,     3,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    22,    23,    24,    25,    -1,    27,    28,
      29,    30,    -1,    32,    33,    34,    -1,    -1,    -1,    38,
      -1,    -1,    -1,    -1,    -1,    44,    45,    46,    -1,    48,
      49,    50,    51,    52,    53,    54,    -1,    56,    57,    58,
      59,    -1,    61,    62,    63,    64,    65,    66,    -1,    -1,
      69,    70,    71,    72,    73,    -1,    75,    76,    77,    78,
      -1,    -1,    81,    -1,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    -1,    94,    95,    96,    97,    98,
      -1,    -1,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,    -1,   116,    -1,   118,
     119,   120,   121,   122,   123,    -1,   125,    -1,   127,   128,
     129,   130,    -1,    -1,   133,   134,   135,   136,   137,    -1,
      -1,    -1,   141,   142,   143,    -1,   145,   146,   147,    -1,
     149,   150,   151,   152,    -1,   154,   155,   156,   157,   158,
      -1,    -1,   161,    -1,   163,   164,   165,   166,    -1,   168,
      -1,   170,   171,    -1,   173,   174,   175,    -1,   177,   178,
      -1,   180,    -1,    -1,    -1,    -1,    -1,    -1,   187,    -1,
     189,   190,   191,   192,   193,   194,   195,   196,   197,   198,
     199,   200,    -1,   202,   203,   204,   205,   206,   207,   208,
      -1,   210,   211,    -1,   213,   214,   215,   216,   217,   218,
     219,    -1,   221,    -1,   223,   224,   225,   226,   227,   228,
      -1,   230,   231,   232,   233,   234,    -1,    -1,   237,   238,
     239,   240,    -1,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,    -1,    -1,    -1,   278,
     279,   280,   281,    -1,    -1,   284,   285,   286,   287,   288,
      -1,   290,   291,    -1,    -1,   294,   295,   296,    -1,    -1,
     299,    -1,   301,   302,   303,    -1,   305,   306,   307,   308,
     309,   310,   311,   312,   313,    -1,    -1,   316,    -1,    -1,
      -1,    -1,   321,   322,    -1,   324,   325,   326,    -1,   328,
     329,   330,    -1,   332,   333,   334,   335,   336,    -1,    -1,
     339,    -1,   341,   342,   343,   344,   345,   346,   347,   348,
      -1,   350,   351,   352,    -1,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,    -1,   365,   366,   367,   368,
     369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,    -1,   384,   385,   386,   387,   388,
     389,   390,   391,   392,   393,    -1,   395,   396,    -1,   398,
     399,   400,    -1,    -1,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,    -1,   418,
      -1,   420,   421,    -1,   423,   424,   425,   426,   427,   428,
     429,    -1,   431,   432,    -1,    -1,    -1,   436,   437,    -1,
     439,    -1,    -1,   442,   443,   444,   445,   446,   447,   448,
     449,   450,    -1,   452,   453,   454,    -1,   456,   457,   458,
     459,    -1,   461,   462,   463,   464,   465,    -1,   467,    -1,
     469,   470,   471,    -1,   473,   474,   475,   476,    -1,    -1,
      -1,   480,    -1,    -1,   483,   484,   485,   486,   487,   488,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   500,   501,   502,   503,    -1,    -1,    -1,    -1,    22,
      23,    24,    25,    -1,    27,    28,    29,    30,    -1,    32,
      33,    34,    -1,    -1,    -1,    38,    -1,    -1,    -1,    -1,
      -1,    44,    45,    46,    -1,    48,    49,    50,    51,    52,
      53,    54,    -1,    56,    57,    58,    59,    -1,    61,    62,
      63,    64,    65,    66,    -1,    -1,    69,    70,    71,    72,
      73,    -1,    75,    76,    77,    78,    -1,    -1,    81,    -1,
      83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      -1,    94,    95,    96,    97,    98,    -1,    -1,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,    -1,   116,    -1,   118,   119,   120,   121,   122,
     123,    -1,   125,    -1,   127,   128,   129,   130,    -1,    -1,
     133,   134,   135,   136,   137,    -1,    -1,    -1,   141,   142,
     143,    -1,   145,   146,   147,    -1,   149,   150,   151,   152,
      -1,   154,   155,   156,   157,   158,    -1,    -1,   161,    -1,
     163,   164,   165,   166,    -1,   168,    -1,   170,   171,    -1,
     173,   174,   175,    -1,   177,   178,    -1,   180,    -1,    -1,
      -1,    -1,    -1,    -1,   187,    -1,   189,   190,   191,   192,
     193,   194,   195,   196,   197,   198,   199,   200,    -1,   202,
     203,   204,   205,   206,   207,   208,    -1,   210,   211,    -1,
     213,   214,   215,   216,   217,   218,   219,    -1,   221,    -1,
     223,   224,   225,   226,   227,   228,    -1,   230,   231,   232,
     233,   234,    -1,    -1,   237,   238,   239,   240,    -1,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,    -1,    -1,    -1,   278,   279,   280,   281,    -1,
      -1,   284,   285,   286,   287,   288,    -1,   290,   291,    -1,
      -1,   294,   295,   296,    -1,    -1,   299,    -1,   301,   302,
     303,    -1,   305,   306,   307,   308,   309,   310,   311,   312,
     313,    -1,    -1,   316,    -1,    -1,    -1,    -1,   321,   322,
      -1,   324,   325,   326,    -1,   328,   329,   330,    -1,   332,
     333,   334,   335,   336,    -1,    -1,   339,    -1,   341,   342,
     343,   344,   345,   346,   347,   348,    -1,   350,   351,   352,
      -1,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,    -1,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
      -1,   384,   385,   386,   387,   388,   389,   390,   391,   392,
     393,    -1,   395,   396,    -1,   398,   399,   400,    -1,    -1,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,    -1,   418,    -1,   420,   421,    -1,
     423,   424,   425,   426,   427,   428,   429,    -1,   431,   432,
      -1,    -1,    -1,   436,   437,    -1,   439,    -1,    -1,   442,
     443,   444,   445,   446,   447,   448,   449,   450,    -1,   452,
     453,   454,    -1,   456,   457,   458,   459,    -1,   461,   462,
     463,   464,   465,    -1,   467,    -1,   469,   470,   471,    -1,
     473,   474,   475,   476,    -1,    -1,    -1,   480,    -1,    -1,
     483,   484,   485,   486,   487,   488,     3,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   500,   501,   502,
     503,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    -1,
      27,    28,    29,    30,    -1,    32,    33,    34,    -1,    -1,
      -1,    38,    -1,    -1,    -1,    -1,    -1,    44,    45,    46,
      -1,    48,    49,    50,    51,    52,    53,    54,    -1,    56,
      57,    58,    59,    -1,    61,    62,    63,    64,    65,    66,
      -1,    -1,    69,    70,    71,    72,    73,    -1,    75,    76,
      77,    78,    -1,    -1,    81,    -1,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    -1,    94,    95,    96,
      97,    98,    -1,    -1,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,    -1,   116,
      -1,   118,   119,   120,   121,   122,   123,    -1,   125,    -1,
     127,   128,   129,   130,    -1,    -1,   133,   134,   135,   136,
     137,    -1,    -1,    -1,   141,   142,   143,    -1,   145,   146,
     147,    -1,   149,   150,   151,   152,    -1,   154,   155,   156,
     157,   158,    -1,    -1,   161,    -1,   163,   164,   165,   166,
      -1,   168,    -1,   170,   171,    -1,   173,   174,   175,   176,
     177,   178,    -1,   180,    -1,    -1,    -1,    -1,    -1,    -1,
     187,    -1,   189,   190,   191,   192,   193,   194,   195,   196,
     197,   198,   199,   200,    -1,   202,   203,   204,   205,   206,
     207,   208,    -1,   210,   211,    -1,   213,   214,   215,   216,
     217,   218,   219,    -1,   221,    -1,   223,   224,   225,   226,
     227,   228,    -1,   230,   231,   232,   233,   234,    -1,    -1,
     237,   238,   239,   240,    -1,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,    -1,    -1,
      -1,   278,   279,   280,   281,    -1,    -1,   284,   285,   286,
     287,   288,    -1,   290,   291,    -1,    -1,   294,   295,   296,
      -1,    -1,   299,    -1,   301,   302,   303,    -1,   305,   306,
     307,   308,   309,   310,   311,   312,   313,    -1,    -1,   316,
      -1,    -1,    -1,    -1,   321,   322,    -1,   324,   325,   326,
      -1,   328,   329,   330,    -1,   332,   333,   334,   335,   336,
      -1,    -1,   339,    -1,   341,   342,   343,   344,   345,   346,
     347,   348,    -1,   350,   351,   352,    -1,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,    -1,   365,   366,
     367,   368,   369,   370,    -1,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,    -1,   384,   385,   386,
     387,   388,   389,   390,    -1,   392,   393,    -1,   395,   396,
      -1,   398,   399,   400,    -1,    -1,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
      -1,   418,    -1,   420,   421,    -1,   423,   424,   425,   426,
     427,   428,   429,    -1,   431,   432,    -1,    -1,    -1,   436,
     437,    -1,   439,    -1,    -1,   442,   443,   444,   445,   446,
     447,   448,   449,    -1,    -1,   452,   453,   454,    -1,   456,
     457,   458,   459,    -1,   461,   462,   463,   464,   465,    -1,
     467,    -1,   469,   470,   471,    -1,   473,   474,   475,   476,
      -1,    -1,    -1,   480,    -1,    -1,   483,   484,   485,   486,
     487,   488,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   500,   501,   502,   503,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    -1,    27,    28,    29,    30,
      -1,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    45,    46,    -1,    48,    49,    50,
      -1,    52,    53,    54,    55,    56,    -1,    58,    59,    -1,
      61,    62,    63,    64,    65,    66,    -1,    -1,    69,    70,
      71,    72,    73,    -1,    75,    76,    77,    78,    79,    -1,
      -1,    -1,    83,    84,    85,    86,    87,    88,    -1,    90,
      91,    92,    -1,    94,    95,    96,    97,    98,    -1,    -1,
      -1,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,    -1,   116,    -1,   118,   119,   120,
     121,   122,   123,    -1,   125,    -1,   127,   128,   129,   130,
      -1,    -1,   133,   134,   135,   136,   137,    -1,    -1,    -1,
     141,   142,   143,    -1,   145,   146,   147,    -1,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,    -1,
     161,    -1,   163,   164,   165,   166,    -1,   168,    -1,   170,
      -1,    -1,    -1,   174,   175,   176,    -1,   178,    -1,   180,
      -1,    -1,    -1,   184,   185,    -1,   187,    -1,   189,   190,
     191,   192,   193,   194,   195,    -1,   197,   198,   199,   200,
      -1,   202,   203,   204,   205,   206,   207,   208,    -1,   210,
      -1,   212,   213,   214,   215,   216,   217,   218,   219,    -1,
     221,    -1,   223,    -1,    -1,   226,    -1,   228,    -1,   230,
     231,   232,   233,   234,    -1,    -1,   237,    -1,   239,    -1,
      -1,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,    -1,
     271,   272,   273,   274,    -1,   276,    -1,   278,   279,    -1,
     281,    -1,   283,   284,   285,   286,   287,   288,    -1,   290,
     291,    -1,    -1,   294,   295,   296,    -1,    -1,   299,   300,
      -1,   302,    -1,   304,   305,   306,   307,   308,   309,   310,
      -1,   312,   313,    -1,    -1,   316,    -1,    -1,    -1,    -1,
     321,   322,   323,    -1,   325,   326,   327,   328,   329,   330,
      -1,   332,   333,   334,   335,   336,    -1,    -1,   339,    -1,
     341,    -1,   343,   344,   345,   346,   347,   348,    -1,   350,
     351,   352,    -1,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,    -1,   365,   366,    -1,   368,   369,   370,
     371,    -1,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,    -1,    -1,   385,   386,   387,   388,   389,   390,
     391,   392,   393,    -1,   395,    -1,    -1,   398,   399,   400,
      -1,    -1,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,   417,   418,    -1,   420,
     421,    -1,   423,    -1,   425,   426,   427,   428,   429,    -1,
     431,   432,    -1,    -1,    -1,   436,   437,   438,   439,   440,
      -1,   442,   443,   444,   445,   446,   447,   448,   449,    -1,
      -1,   452,   453,   454,    -1,   456,   457,   458,   459,    -1,
     461,   462,   463,   464,   465,   466,   467,    -1,   469,    -1,
     471,    -1,   473,   474,   475,   476,    -1,    -1,    -1,   480,
      -1,    -1,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,   499,   500,
     501,   502,   503,     3,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    22,    23,    24,    25,    -1,    27,    28,    29,
      30,    -1,    32,    33,    34,    -1,    -1,    -1,    38,    -1,
      -1,    -1,    -1,    -1,    44,    45,    46,    -1,    48,    49,
      50,    51,    52,    53,    54,    -1,    56,    57,    58,    59,
      -1,    61,    62,    63,    64,    65,    66,    -1,    -1,    69,
      70,    71,    72,    73,    -1,    75,    76,    77,    78,    -1,
      -1,    81,    -1,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    -1,    94,    95,    96,    97,    98,    -1,
      -1,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,    -1,   116,    -1,   118,   119,
     120,   121,   122,   123,    -1,   125,    -1,   127,   128,   129,
     130,    -1,    -1,   133,   134,   135,   136,   137,    -1,    -1,
      -1,   141,   142,   143,    -1,   145,   146,   147,    -1,   149,
     150,   151,   152,    -1,   154,   155,   156,   157,   158,    -1,
      -1,   161,    -1,   163,   164,   165,   166,    -1,   168,    -1,
     170,   171,    -1,   173,   174,   175,    -1,   177,   178,    -1,
     180,    -1,    -1,    -1,    -1,    -1,    -1,   187,    -1,   189,
     190,   191,   192,   193,   194,   195,   196,   197,   198,   199,
     200,    -1,   202,   203,   204,   205,   206,   207,   208,    -1,
     210,   211,    -1,   213,   214,   215,   216,   217,   218,   219,
      -1,   221,    -1,   223,   224,   225,   226,   227,   228,    -1,
     230,   231,   232,   233,   234,    -1,    -1,   237,   238,   239,
     240,    -1,   242,   243,   244,   245,   246,   247,   248,   249,
      -1,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,    -1,    -1,    -1,   278,   279,
     280,   281,    -1,    -1,   284,   285,   286,   287,   288,    -1,
     290,   291,    -1,    -1,   294,   295,   296,    -1,    -1,   299,
      -1,   301,   302,   303,    -1,   305,   306,   307,   308,   309,
     310,   311,   312,   313,    -1,    -1,   316,    -1,    -1,    -1,
      -1,   321,   322,    -1,   324,   325,   326,    -1,   328,   329,
     330,    -1,   332,   333,   334,   335,   336,    -1,    -1,   339,
      -1,   341,   342,   343,   344,   345,   346,   347,   348,    -1,
     350,   351,   352,    -1,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,    -1,   365,   366,   367,   368,   369,
     370,    -1,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,    -1,   384,   385,   386,   387,   388,   389,
     390,    -1,   392,   393,    -1,   395,   396,    -1,   398,   399,
     400,    -1,    -1,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,    -1,   416,    -1,   418,    -1,
     420,   421,    -1,   423,   424,   425,   426,   427,   428,   429,
      -1,   431,   432,    -1,    -1,    -1,   436,   437,    -1,   439,
      -1,    -1,   442,   443,   444,   445,   446,   447,   448,   449,
      -1,    -1,   452,   453,   454,    -1,   456,   457,   458,   459,
      -1,   461,   462,   463,   464,   465,    -1,   467,    -1,   469,
     470,   471,    -1,   473,   474,   475,   476,    -1,    22,    -1,
     480,    -1,    -1,   483,   484,   485,   486,   487,   488,    33,
      -1,    35,    36,    -1,    -1,    22,    -1,    -1,    -1,    -1,
     500,   501,   502,   503,    -1,    -1,    33,    -1,    -1,    -1,
      54,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    63,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    54,    -1,    -1,
      -1,    75,    -1,    -1,    -1,    -1,    63,    -1,    -1,    -1,
      -1,    -1,    86,    -1,    -1,    -1,    -1,    -1,    75,    -1,
      -1,    -1,    -1,    -1,    98,    -1,   100,    -1,    -1,    86,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   111,    -1,    -1,
      -1,    98,    -1,   100,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   125,    -1,    -1,   111,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   136,    -1,    -1,    -1,    -1,    -1,   125,    -1,
     144,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   152,   136,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   144,    -1,    -1,
      -1,    -1,    -1,    -1,   168,   152,    -1,    -1,   172,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   168,    -1,    -1,    -1,   172,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   216,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   216,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   243,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   243,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   317,   318,   319,    -1,    -1,    -1,    -1,
      -1,   325,    -1,    -1,   328,    -1,    -1,    -1,    -1,    -1,
     317,   318,   319,    -1,    -1,    -1,    -1,    -1,   325,    -1,
      -1,   328,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   360,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   369,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   360,    -1,    -1,    -1,    -1,    -1,   383,
      -1,    -1,   369,    -1,    -1,    -1,   390,    -1,    -1,    -1,
      -1,   395,    -1,    -1,    -1,    -1,   383,    -1,    -1,    -1,
      -1,    -1,   406,   390,    -1,    -1,    -1,    -1,   395,    -1,
      -1,    -1,    -1,    -1,   418,    -1,    -1,    -1,   422,   406,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   418,    -1,    -1,    -1,   422,    -1,    -1,   442,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   455,    -1,    -1,    -1,   442,    -1,   461,    -1,    -1,
      -1,    -1,   466,    -1,    -1,    -1,   470,    -1,   455,    -1,
      -1,    -1,    -1,    -1,   461,    -1,    -1,    -1,   482,   466,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   482,    -1,    -1,    -1,    -1,
      -1,    -1,   506,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   520,    -1,    -1,   506,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   520
};

/* YYSTOS[STATE-NUM] -- The symbol kind of the accessing symbol of
   state STATE-NUM.  */
static const yytype_int16 yystos[] =
{
       0,    22,    33,    35,    36,    49,    54,    63,    75,    86,
      98,   100,   111,   125,   127,   136,   144,   152,   154,   155,
     168,   172,   200,   216,   243,   317,   318,   319,   325,   328,
     360,   369,   383,   390,   395,   406,   418,   422,   442,   455,
     458,   461,   466,   482,   506,   520,   535,   536,   537,   538,
     539,   546,   557,   558,   559,   562,   563,   573,   590,   638,
     649,   652,   655,   657,   660,   661,   665,   672,   674,   681,
     685,   686,   687,   694,   699,   715,   718,   721,   739,   776,
     777,   780,   782,   783,   784,   785,   787,   789,   790,   794,
     846,   847,  1006,  1008,  1009,  1010,  1015,  1018,  1024,  1025,
    1029,   436,   485,  1007,   205,   376,   385,   422,   473,   108,
     560,  1007,     3,    22,    23,    24,    25,    27,    28,    29,
      30,    32,    33,    34,    44,    45,    46,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    58,    59,    61,
      62,    63,    64,    65,    66,    69,    70,    71,    72,    73,
      75,    76,    77,    78,    79,    81,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    94,    95,    96,    97,
      98,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   116,   118,   119,   120,   121,
     122,   123,   125,   127,   128,   129,   130,   133,   134,   135,
     136,   137,   141,   142,   143,   145,   146,   147,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,   161,
     163,   164,   165,   166,   168,   170,   171,   173,   174,   175,
     176,   177,   178,   180,   184,   185,   187,   189,   190,   191,
     192,   193,   194,   195,   196,   197,   198,   199,   200,   202,
     203,   204,   205,   206,   207,   208,   210,   211,   212,   213,
     214,   215,   216,   217,   218,   219,   221,   223,   224,   225,
     226,   227,   228,   230,   231,   232,   233,   234,   237,   238,
     239,   240,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   276,   278,   279,   280,   281,
     283,   284,   285,   286,   287,   288,   290,   291,   294,   295,
     296,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   316,   321,   322,   323,
     324,   325,   326,   327,   328,   329,   330,   332,   333,   334,
     335,   336,   339,   341,   342,   343,   344,   345,   346,   347,
     348,   350,   351,   352,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   385,   386,   387,   388,   389,   390,   391,   392,
     393,   395,   396,   398,   399,   400,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
     417,   418,   420,   421,   423,   424,   425,   426,   427,   428,
     429,   431,   432,   436,   437,   438,   439,   440,   442,   443,
     444,   445,   446,   447,   448,   449,   452,   453,   454,   456,
     457,   458,   459,   461,   462,   463,   464,   465,   466,   467,
     469,   470,   471,   473,   474,   475,   476,   480,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   566,
     641,   642,   643,   916,   995,   999,     3,   176,   250,   415,
     564,   566,   641,  1007,    57,   520,   585,   178,   244,   297,
     338,   376,   426,   428,   445,   451,   454,   636,   693,     5,
      31,   328,   566,   567,   994,   108,   560,    24,    81,    97,
     147,   157,   169,   174,   205,   249,   253,   322,   338,   339,
     373,   376,   385,   388,   408,   422,   429,   439,   445,   473,
     666,   667,   670,  1007,   994,   100,   136,   470,   520,   538,
     539,   546,   562,   563,   573,   590,   638,   649,   652,   655,
     657,   660,   661,   665,   672,   677,   681,   687,   694,   715,
     776,   777,   780,   782,  1006,  1008,  1010,  1015,  1018,  1024,
    1029,   108,    75,   216,    68,    79,    81,   159,   182,   235,
     283,   293,   304,   323,   372,   417,   438,   440,   444,   466,
     520,   565,   566,   567,   783,   847,   849,   851,   861,   868,
     869,   916,   918,   919,   108,     5,   566,   568,   716,   716,
     566,   994,    31,   431,   436,   566,  1016,  1017,  1027,  1007,
      31,   131,   802,   803,   178,   244,   376,   389,   431,  1019,
    1020,  1027,  1007,   520,   566,   782,   794,  1028,   566,   868,
     422,   799,   565,   173,   520,  1012,   520,   347,   795,   796,
     994,   795,     3,    55,    56,    58,    59,    71,    72,    79,
     112,   113,   153,   159,   165,   176,   184,   185,   212,   218,
     219,   221,   250,   269,   271,   276,   283,   285,   300,   304,
     323,   327,   344,   371,   391,   399,   415,   417,   431,   432,
     438,   440,   444,   466,   467,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,   499,   641,   648,   717,   783,
     784,     0,   523,   470,   675,   120,   215,   457,   148,   220,
     298,   450,   805,   806,   851,   851,   783,   785,   787,   524,
      31,   431,   436,   782,  1028,   194,   565,   994,   194,   565,
     194,   868,   194,   565,   568,   518,   522,   569,   570,   520,
     782,   565,   426,   428,   426,   428,   358,   181,   194,   565,
     565,   174,   249,   347,   385,   422,   473,   650,   205,    31,
     994,   194,     3,   255,   439,   107,   422,   422,   473,   181,
     379,     3,    38,    44,    51,    56,    57,    58,    59,    71,
      72,    81,    83,    89,   101,   112,   113,   135,   165,   171,
     173,   177,   194,   196,   211,   218,   219,   221,   224,   225,
     227,   238,   240,   250,   269,   270,   271,   280,   285,   301,
     303,   324,   344,   367,   371,   384,   391,   396,   399,   415,
     424,   431,   432,   444,   450,   467,   470,   641,   644,   671,
     879,   881,   883,   885,   887,   889,   891,   892,   893,   895,
     896,   897,   899,   900,  1000,   194,   566,   668,  1001,   194,
     991,   994,   194,   994,   520,   673,   677,     3,    38,    44,
      51,    55,    56,    57,    58,    59,    71,    72,    79,    81,
      83,    89,   101,   112,   113,   153,   159,   165,   171,   173,
     176,   177,   184,   185,   196,   211,   212,   218,   219,   221,
     224,   225,   227,   238,   240,   250,   269,   270,   271,   276,
     280,   283,   285,   300,   301,   303,   304,   323,   324,   327,
     344,   367,   371,   384,   391,   396,   399,   415,   417,   424,
     431,   432,   438,   440,   444,   466,   467,   470,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,   499,   641,
     645,   678,   680,   681,   683,   684,   675,   566,   568,   564,
     716,   520,   520,   167,   520,   520,   739,   783,   869,   520,
     520,   565,   520,   520,   172,   520,   520,   520,   520,   783,
     847,   851,   861,   513,   569,    42,   566,   862,   863,   862,
     383,   524,   786,    38,    44,   101,   173,   211,   227,   238,
     270,   317,   324,   367,   384,   455,   865,   863,    42,   566,
     862,   864,   506,   873,   568,   509,   520,   520,   778,   503,
     226,   522,   292,     4,     6,     7,     8,     9,    10,    41,
      56,    58,    59,    67,    71,    72,    83,   112,   113,   115,
     153,   160,   165,   184,   185,   218,   219,   221,   250,   269,
     271,   277,   282,   285,   294,   344,   371,   399,   431,   432,
     441,   467,   504,   511,   512,   513,   518,   520,   526,   527,
     532,   533,   566,   568,   783,   836,   884,   887,   890,   891,
     892,   894,   895,   896,   899,   900,   911,   913,   914,   915,
     916,   917,   919,   920,   934,   935,   946,   968,   973,   981,
     982,   983,   995,   996,   997,   980,   982,  1019,  1019,   568,
    1019,   503,   172,   433,   509,   522,   569,   662,   868,     3,
     171,   173,   470,   681,  1011,  1013,   171,  1014,   911,   952,
     953,   795,   524,   520,  1003,   252,   521,   521,   537,   565,
     172,   297,   702,   662,    31,   131,   800,   800,    61,   800,
     162,   167,   241,   289,   811,   813,   814,   839,   841,   842,
     843,   183,   292,   460,   292,   805,   806,   520,   423,  1026,
     503,   226,   153,    27,    33,   136,   296,   356,   360,   390,
     463,   551,   554,   555,   356,   153,    42,    62,   106,   204,
     254,   262,   274,   306,   356,   362,   385,   390,   406,   540,
     543,   554,   153,   356,   390,   554,   153,   356,   390,   554,
      42,   561,   911,   974,     3,    31,    35,    36,    37,    39,
      41,    42,    43,    47,    60,    67,    68,    74,    80,    82,
      93,   100,   115,   117,   124,   131,   132,   140,   144,   148,
     160,   162,   167,   169,   172,   179,   182,   183,   188,   201,
     209,   220,   222,   235,   236,   241,   277,   282,   289,   292,
     293,   297,   298,   317,   318,   319,   320,   331,   340,   349,
     364,   383,   401,   419,   422,   430,   433,   435,   441,   450,
     451,   455,   460,   466,   468,   478,   479,   481,   482,   571,
     572,   641,   645,   647,   570,     3,    31,    38,    44,    51,
      57,    81,    83,    89,   101,   131,   171,   173,   176,   177,
     196,   211,   224,   225,   227,   238,   240,   250,   270,   280,
     301,   303,   324,   367,   384,   396,   415,   424,   444,   468,
     470,   521,   641,   646,   911,   955,   956,   998,  1004,   521,
     520,   625,   376,   636,   565,   277,   653,    42,   473,   194,
     565,   194,   565,   640,   194,   565,   194,   565,    89,   690,
     153,   486,   565,    90,   128,   309,   427,   469,   898,   898,
     898,   520,   886,   886,   327,   520,   888,   153,   520,    71,
      72,   898,   886,   883,   484,   506,   520,   901,   520,   901,
     520,    65,   363,   524,   669,   520,    41,   882,   520,   109,
     110,   191,   192,   256,   257,   258,   259,   260,   261,   264,
     265,   380,   381,   500,   501,   520,   902,   903,   904,   905,
     906,   907,   908,   909,   910,   886,   153,   522,  1002,   524,
     669,   153,   524,   669,   153,   292,   953,   521,   524,     4,
     160,   292,   441,   511,   512,   542,   545,   568,   676,   678,
     679,   682,   997,   677,   433,   520,   580,   584,   911,   953,
     520,     3,   568,   902,   903,   904,   905,   906,   907,   908,
     909,   958,   959,   466,   863,   864,   911,   565,   911,   960,
     511,   512,   566,   912,   913,   935,   946,   962,   520,   911,
     952,   963,   911,    60,   172,   236,   435,   911,   953,   966,
     911,   521,   567,   520,   424,   819,   820,   820,   802,   803,
     851,   222,   797,    38,   227,   384,   865,   227,   301,   866,
     851,   866,   227,   865,   520,   227,   866,   149,   202,   853,
     227,   820,   520,   567,   520,   820,   299,   542,   682,  1021,
    1023,   955,   881,   957,    42,   239,   566,   520,   518,   783,
     911,   972,   520,   783,   527,   911,   520,   520,   911,   911,
     911,   149,   984,   985,   911,   953,   954,   783,   911,   952,
     567,   936,   937,   938,     9,   572,   522,   569,   975,   569,
     520,   568,   520,   568,   997,     3,     8,    11,    15,    16,
      17,    18,    19,    20,    21,    37,    42,    48,    55,    80,
     177,   196,   201,   224,   225,   240,   277,   280,   294,   297,
     396,   504,   507,   508,   509,   511,   512,   513,   514,   515,
     516,   944,   945,   946,   948,   978,   483,   921,   303,   911,
     524,   797,   520,   568,   797,     3,   115,   244,   542,   568,
     900,  1022,   104,   115,  1023,   115,  1023,   566,    42,   566,
     521,   524,   675,   524,   521,   796,   991,   992,    42,   717,
     745,   749,   750,  1003,   662,   195,   358,   222,   390,   785,
     785,    31,   807,   808,   911,    61,   785,   801,   164,   273,
     827,   230,   274,   343,   393,   457,     4,     9,    31,   822,
     911,   511,   512,   823,   824,   911,   913,   839,   840,   814,
     813,   811,   812,   167,   842,   287,   844,    61,   791,   792,
     793,   854,   912,   982,   982,   811,   839,   953,   239,   565,
      74,    82,    93,   169,   194,   331,   451,   566,   607,   617,
     632,    82,    93,   781,    93,   781,   520,   433,   520,   605,
     248,   454,   605,    93,   524,   433,   565,   883,   542,    61,
     544,   542,   542,   106,   254,   262,    61,   433,   482,   506,
     541,   267,   376,   541,   543,   868,    93,   433,   781,   376,
     565,   433,   376,   566,   580,   519,   531,   955,   955,   956,
     524,   805,   806,    13,    14,   433,   566,   624,   629,   482,
     583,   565,   347,   385,   422,   473,   650,   275,   472,   719,
     153,   100,   590,   654,   655,   687,  1029,   145,   881,   565,
     277,   540,   656,   277,   520,   625,    42,   277,   625,   277,
     520,   651,   194,   566,   619,   691,     3,   669,   520,   954,
     997,   671,   957,   898,   898,    41,   882,   431,   431,   997,
     997,   566,   878,   881,   878,   518,   518,   997,   997,   433,
     433,   433,   433,   668,   571,   522,  1001,   991,   994,   994,
    1001,   521,   677,   683,     4,   997,     4,   997,   568,   572,
     582,   589,    57,   102,   121,   142,   146,   168,   171,   189,
     282,   290,   311,   341,   586,    42,   521,   911,   521,   172,
     524,   521,   320,   961,   521,   912,   912,    11,    15,    16,
      19,    20,    21,   201,   224,   294,   507,   508,   509,   511,
     512,   513,   514,   515,   516,   946,   912,   521,   870,   871,
     918,   167,   172,   964,   965,   524,   521,    42,   966,   953,
     966,   966,   172,   521,    42,   862,   520,   992,     4,     9,
     566,   815,   817,   818,   982,   980,   178,   244,   422,   426,
     428,   454,   565,   798,   479,   874,   851,   227,   851,   292,
     460,   867,   851,   227,   982,   851,   284,   284,   520,   851,
     567,   875,   876,   520,   567,   875,   524,   521,   524,   521,
     524,   573,   661,   694,   779,   782,  1008,   953,   954,   478,
     969,   970,   911,   911,   939,   940,   941,   942,     8,    15,
      16,    19,    20,    21,   507,   508,   509,   511,   512,   513,
     514,   515,   516,   566,   944,   949,   521,   953,   520,   566,
     358,   989,   167,   519,   521,   524,   531,   524,   528,   513,
     570,   953,   911,   910,   910,   881,   911,   911,   911,   911,
     911,   911,   911,   911,     5,   572,  1005,   431,    47,   419,
     979,  1001,   911,   911,   520,   783,   967,   131,   160,   277,
     282,   287,   441,   452,   911,   282,   520,   911,   433,    55,
     177,   196,   201,   240,   396,   911,   911,   911,   911,   911,
     911,   911,   911,   911,   911,    31,    39,   401,   943,   518,
     522,   977,   183,   163,   922,   371,   520,   935,   983,   172,
     848,   955,   848,   520,   568,   566,   565,  1011,   557,   565,
     911,   524,   521,   520,   509,    31,    39,   394,   748,   229,
     524,   742,   460,   664,   565,   696,   520,   566,   701,   711,
     712,   714,    43,   124,   809,   524,   460,   809,   267,   785,
     371,   372,   511,   512,   824,   826,   913,   393,   230,   293,
     316,   316,   524,   515,     4,   825,   997,   825,   371,   372,
     826,   565,   990,   281,   398,   845,   520,   992,   993,   524,
     183,   460,   201,   183,   222,   840,   812,   521,   356,   554,
     520,   194,   617,   994,   230,   277,   230,   460,   520,   610,
     880,   881,   994,   566,   194,   994,   194,   566,    27,   136,
     390,   550,   553,   572,   601,   615,   994,   572,   609,   628,
     994,   551,   994,   356,   390,   540,   554,   542,  1001,   994,
     542,  1001,   994,   542,   356,   390,   554,   994,   994,   994,
     994,   356,   390,   554,   994,   994,   911,   974,   805,   805,
     805,   468,   956,   195,   361,   804,   911,   911,   336,   579,
     521,   524,   290,   172,   433,   574,   653,   473,   565,   565,
     640,   565,   565,   423,   565,   297,   636,   520,   783,   520,
     153,   153,   240,   566,   607,   617,   620,   623,   633,   635,
     482,   484,   612,   152,   782,   153,   482,   692,   153,   521,
     955,    42,   277,   292,   953,   521,   521,   669,   521,   518,
     503,   503,   521,   521,   881,   521,   524,   521,   997,   519,
     997,   521,   521,   903,   905,   906,   907,   906,   907,   907,
     669,   571,   669,   292,   669,   580,   513,   520,   542,   581,
     682,   521,   524,    42,   578,   568,   578,   277,   282,   341,
     578,    61,   578,   881,   521,   911,   911,   911,   964,   881,
     912,   912,   912,   912,   912,   912,   131,   277,   287,   912,
     912,   912,   912,   912,   912,   912,   912,   912,   912,   521,
     524,    42,   872,   911,   911,   965,   964,   881,   521,   521,
     521,   953,   881,   992,   521,   316,   515,   316,   372,   515,
     520,   520,   797,   426,   428,   426,   428,   565,   799,   799,
     799,   911,   183,   828,   867,   851,   911,   520,   851,   167,
     520,   567,   858,   867,   881,   521,   524,   875,   521,  1021,
     881,   521,   519,   911,   140,   970,   971,   521,   531,   524,
     528,   522,   521,   521,   992,   520,   911,   986,   566,   911,
     911,   936,   985,   521,   521,   503,   912,   912,   146,   953,
     172,   131,   160,   282,   287,   441,   452,   520,   146,   949,
     911,   419,   979,   911,   967,   911,   433,   520,   783,   911,
     974,   571,   520,   520,   156,   923,   849,   850,   874,   805,
     874,   997,   910,  1003,  1003,   779,    26,   314,   315,   394,
     397,   434,   477,   743,   746,     9,   394,   747,     9,    17,
     507,   512,   518,   520,   758,   759,   760,   761,   768,   769,
     770,   773,   774,   748,   750,   479,   738,   850,   479,   663,
      42,    61,   697,   707,   714,   975,   524,   848,   509,   505,
     810,   808,   294,   944,   947,   810,     4,   997,   826,   293,
     457,   823,   524,   247,   992,   791,    61,   982,   520,   567,
      61,   267,   433,   911,   277,   632,   520,   153,   520,   610,
     205,   629,   630,   591,    42,   176,   600,   626,   591,    27,
     136,   360,   362,   390,   547,   548,   549,   555,   556,   153,
     669,   153,   669,   601,   615,   601,   521,   524,   568,   594,
     509,   522,   521,   524,   433,   376,    93,   433,   781,   376,
     433,   433,   433,   376,   519,   804,   804,   804,   956,   284,
     284,   521,   409,   410,   568,   588,   624,   579,   565,   656,
     520,    42,   625,   651,   520,   653,   358,   422,   568,   658,
     659,   629,   565,   565,   640,   565,   521,   524,   290,   605,
     290,   292,   604,   994,   482,   639,   565,   605,    42,   565,
     521,   422,   911,   153,   565,   521,   882,   997,   901,   901,
     882,   566,   882,   519,   519,  1001,   576,   587,   682,   582,
     568,   568,   282,   629,   513,   629,   568,   513,   629,   568,
     521,   521,   965,   172,   131,   287,   520,   873,   870,   520,
     521,   521,   521,   566,   815,   874,   799,   799,   799,   799,
     565,   565,   565,    61,   188,   837,   867,   992,   520,   855,
     856,   857,   914,   995,   992,   167,    80,   877,   876,   521,
     430,   911,   144,   911,   939,   949,   521,   911,   986,   987,
     988,    42,   201,   521,   989,   910,   911,    37,    37,   911,
     521,   911,   172,   520,   957,   911,   521,   146,   912,   912,
     146,   146,   911,   911,   519,   531,   520,   976,   806,   479,
     911,   302,   927,   524,   828,   804,   828,   521,   521,   743,
     746,   743,   743,   743,   746,   746,   746,   512,   768,   508,
     518,   745,   757,   717,   771,   772,   760,   760,   525,   751,
     772,   511,   513,   526,   527,   753,   277,   504,   511,   512,
     775,   913,   935,    83,   911,   364,   705,   566,   267,   323,
     115,   305,   520,   695,   782,   521,   524,   701,   663,   911,
     164,   234,   520,   810,   293,   565,   521,   993,   183,   783,
     784,   982,   993,   994,   994,   521,   153,   630,   617,   630,
     591,   619,   524,   521,   117,   209,   274,   277,   616,   520,
      34,    61,   637,   626,    74,    80,    93,   115,   117,   209,
     277,   282,   331,   349,   451,   460,   596,   597,   611,   176,
     115,   193,   277,   605,   541,   107,   115,   176,   277,   408,
     411,   543,   605,   390,   549,   445,   994,   566,   553,     3,
      38,    44,    51,    57,    81,    83,    89,   101,   171,   173,
     176,   177,   196,   211,   224,   225,   227,   238,   240,   250,
     270,   276,   280,   294,   301,   303,   324,   367,   384,   391,
     396,   415,   424,   444,   450,   470,   511,   512,   542,   568,
     592,   631,   641,   647,   881,   947,   998,   572,   628,   994,
     994,   994,   994,   994,   994,   994,   994,   994,   994,   521,
     521,   521,   805,   541,   588,   520,   623,   782,   692,    42,
     565,   728,   733,   636,   194,   565,   521,   524,   521,   656,
     520,    42,   614,   612,   620,    86,   673,   107,   274,   625,
     782,   651,   782,   619,   460,   689,   519,   881,   669,   521,
     524,   629,   912,   172,   520,   957,   875,   521,   524,   521,
     828,   565,   565,   565,   565,    31,   103,   184,   370,   520,
     829,   830,   831,   832,   833,   834,   835,   911,   911,   481,
     924,   521,   913,   950,   951,   201,   183,   852,   856,   520,
     521,   858,   859,   860,  1001,   911,   524,   521,   566,   911,
     913,   911,   911,   911,   957,   521,   911,    37,    37,   911,
     911,   146,   521,   974,   521,   955,   521,   911,   521,   520,
     566,   928,   837,   521,   837,   568,   183,   186,   744,   518,
     746,   519,   224,   531,   766,   767,   521,   511,   760,   519,
       9,   752,   775,   775,   775,   775,    11,    16,    17,    18,
      19,    20,    21,    37,    48,    55,    80,   177,   196,   201,
     224,   225,   240,   277,   280,   297,   396,   504,   507,   508,
     509,   511,   512,   513,   514,   515,   516,   946,   303,   520,
     981,   466,   421,   459,   706,   566,   700,   710,   292,   703,
     509,   714,   705,   949,    61,   521,   521,   465,   466,   788,
     591,   617,   521,   521,   482,   622,   118,   197,   207,   117,
     462,   911,   115,    42,   520,  1001,   994,   912,   118,   197,
     117,   282,   230,   565,   622,    88,   637,   194,   282,   542,
     911,   637,   282,   511,   512,   545,   566,   881,   669,   669,
     250,   415,   998,  1002,   509,   433,   433,   804,   580,   460,
     575,   577,   629,   521,   639,    42,   422,   911,    42,   524,
     722,   274,   337,   737,   422,   277,   520,   568,   692,   623,
     152,   782,   150,   203,   604,   120,   136,   330,   639,   107,
     692,   482,  1030,    42,   292,   566,   688,   520,   587,   912,
     957,   521,   521,     9,   357,   821,   837,   520,   392,   520,
     521,   524,   566,   925,   926,   340,   838,   524,   521,   520,
     567,    61,   521,   955,   201,   521,   859,   986,   519,   194,
     521,   911,   911,   911,   519,   521,   521,   566,   929,   924,
     568,   924,   761,   753,   738,   520,   530,   717,   765,   525,
     512,   768,   524,   881,   775,   775,   775,   775,   775,   775,
     775,   431,   419,   979,  1001,   775,   775,   967,   131,   160,
     277,   282,   287,   441,   452,   775,   282,   775,   433,    55,
     196,   201,   240,   396,   775,   775,   775,   775,   775,   775,
     775,   775,   775,   775,   935,   740,   741,   983,   524,   465,
     975,   521,   524,    91,   705,   911,   521,   993,   993,   349,
     622,   520,   613,   591,   521,   193,   520,   911,   277,   597,
     622,   625,   994,    42,   153,   877,  1002,   515,   592,   994,
     994,   521,   541,   122,   521,   612,   782,   782,   717,   728,
     521,   337,    40,   520,   731,   736,   231,   565,   153,    42,
     521,   994,   639,    31,    85,    94,   116,   193,   206,   408,
     411,   608,   608,   372,   372,    42,    66,    74,   244,   422,
     911,   565,   520,   566,   704,   713,   918,   521,   521,   520,
     924,   953,   520,   953,   831,    42,   524,   911,   460,   816,
     913,   982,   992,   863,   805,   520,   863,   911,   311,   930,
     838,   838,   738,    99,   756,   764,   765,   765,   753,   752,
     503,   912,   912,   146,   172,   131,   160,   282,   287,   441,
     452,   520,   146,   775,   419,   979,   775,   967,   775,   433,
     521,   524,   782,   305,   782,   700,   292,   520,   698,   565,
     591,   572,   618,   621,   412,   475,   598,   599,   520,   593,
     911,   521,   252,   634,   193,   460,   552,   515,   445,   580,
     568,   692,   604,  1030,   722,   138,   353,   720,   717,   732,
     734,    31,   717,   520,   565,   782,   612,   673,   782,    74,
     295,    74,   782,   689,   911,    80,   708,   521,   524,   708,
       9,   838,   521,   830,   521,   928,   926,   374,   521,   804,
     982,   519,    61,   805,   816,   816,   756,   912,   521,   525,
     529,   528,   775,    37,    37,   775,   775,   172,   520,   957,
     775,   146,   912,   912,   146,   146,   775,   521,   740,   706,
      93,   713,   132,   625,   509,   521,   524,   540,   521,   274,
     606,   173,   310,   397,   292,   602,   603,   627,   593,   911,
     445,    42,   423,    42,   521,   524,    83,   201,   727,   520,
    1030,   604,   639,  1030,   295,   295,   520,   521,  1001,   709,
    1001,   692,   704,   709,   521,   816,   521,   818,   521,   521,
     952,   342,   372,   931,   115,   755,   762,   765,   763,   765,
     775,   775,   775,   957,   521,   775,    37,    37,   775,   775,
     146,   565,   465,   994,   521,   278,   457,   634,   592,   621,
     521,   599,   207,   120,   457,   292,   627,   292,   602,   782,
     520,   717,   732,   148,   735,   565,   713,   708,   809,   874,
     809,    55,   104,   447,   911,   932,   933,   932,   521,     4,
       9,   754,   525,   529,   521,   775,   775,   775,   782,   874,
     390,   603,    65,   274,   363,   390,   595,   595,  1030,   730,
     733,   520,   520,   521,   709,   810,   810,   933,   371,   166,
     326,   166,   326,   762,   763,   712,   591,    25,   115,   282,
     524,   729,   402,   734,   717,   726,   692,   809,    37,   874,
     730,   521,   230,   724,   725,   521,   521,   524,   874,   810,
     933,   729,   520,   723,   349,   565,   717,   991,   723,   521,
     126,   725,   565,   723,   737,   231,   717,   727
};

/* YYR1[RULE-NUM] -- Symbol kind of the left-hand side of rule RULE-NUM.  */
static const yytype_int16 yyr1[] =
{
       0,   534,   535,   536,   536,   537,   537,   537,   537,   537,
     537,   537,   537,   537,   537,   537,   537,   537,   537,   537,
     537,   537,   537,   537,   537,   537,   537,   537,   537,   537,
     537,   537,   537,   537,   537,   537,   537,   537,   537,   537,
     537,   537,   537,   537,   537,   537,   546,   546,   546,   546,
     546,   546,   546,   546,   547,   547,   548,   548,   549,   549,
     549,   549,   550,   550,   551,   551,   551,   551,   551,   551,
     551,   551,   551,   551,   551,   551,   551,   551,   551,   551,
     551,   551,   551,   551,   551,   551,   551,   551,   551,   551,
     551,   551,   551,   552,   552,   553,   553,   553,   553,   554,
     554,   555,   556,   556,   556,   660,   660,   660,   660,   565,
     565,   566,   566,   566,   567,   567,   568,   569,   569,   570,
     571,   572,   572,   572,   572,   780,   780,   780,   780,   780,
     780,   780,   780,   780,   780,   780,   780,   780,   781,   781,
     694,   695,   695,   695,   695,   695,   696,   696,   697,   697,
     697,   698,   698,   698,   699,   699,   700,   701,   701,   702,
     702,   702,   703,   703,   703,   704,   704,   704,   705,   705,
     706,   706,   707,   707,   708,   708,   709,   709,   710,   710,
     711,   711,   712,   712,   713,   713,   714,   657,   657,   657,
     658,   658,   659,   659,   776,   776,   776,   655,   655,   655,
     656,   656,   672,   672,   672,   673,   673,   539,   539,   540,
     540,   541,   541,   541,   542,   542,   542,   542,   543,   543,
     543,   543,   543,   543,   543,   543,   543,   543,   543,   543,
     543,   543,   544,   544,   545,   545,   545,  1006,  1006,  1006,
    1006,  1006,  1006,  1007,  1007,  1007,  1009,   717,   717,   717,
     718,   719,   719,   720,   720,   721,   722,   722,   723,   724,
     725,   726,   726,   727,   727,   728,   729,   729,   730,   731,
     731,   732,   732,   733,   733,   734,   734,   735,   735,   736,
     736,   737,   737,   737,   738,   738,   739,   740,   741,   741,
     742,   742,   743,   743,   743,   744,   744,   744,   745,   745,
     746,   746,   746,   746,   746,   747,   747,   748,   748,   748,
     748,   748,   748,   749,   749,   750,   751,   751,   752,   752,
     753,   753,   753,   753,   753,   754,   754,   755,   755,   756,
     756,   757,   758,   759,   759,   760,   760,   760,   761,   761,
     762,   762,   763,   763,   764,   764,   764,   765,   765,   765,
     766,   766,   767,   767,   768,   768,   768,   769,   769,   770,
     770,   771,   771,   772,   773,   773,   774,   775,   775,   775,
     775,   775,   775,   775,   775,   775,   775,   775,   775,   775,
     775,   775,   775,   775,   775,   775,   775,   775,   775,   775,
     775,   775,   775,   775,   775,   775,   775,   775,   775,   775,
     775,   775,   775,   775,   775,   775,   775,   775,   775,   775,
     775,   775,   775,   775,   775,   775,   775,   775,   775,   775,
     775,   775,   775,   775,   775,   775,   775,   775,   590,   590,
     590,   591,   591,   592,   592,   592,   592,   592,   592,   593,
     593,   594,   595,   595,   595,   595,   595,   596,   596,   596,
     596,   597,   597,   597,   597,   597,   597,   597,   597,   598,
     598,   599,   599,   600,   600,   600,   601,   602,   603,   603,
     603,   603,   603,   604,   604,   604,   604,   605,   606,   606,
     607,   607,   608,   608,   608,   608,   608,   608,   608,   608,
     609,   609,   610,   611,   611,   611,   611,   612,   612,   612,
     612,   613,   614,   614,   614,   615,   616,   616,   616,   616,
     616,   616,   617,   617,   618,   618,   619,   620,   620,   620,
     621,   621,   622,   622,   623,   623,   623,   624,   625,   625,
     626,   626,   627,   628,   628,   628,   628,   629,   629,   630,
     630,   631,   631,   631,   632,   632,   632,   632,   632,   632,
     633,   633,   634,   634,   634,   634,   635,   636,   636,   636,
     636,   636,   636,   636,   636,   637,   637,   665,   665,   665,
     665,   665,   665,   665,   665,   666,   666,   666,   666,   666,
     666,   666,   666,   666,   666,   666,   666,   666,   666,   666,
     666,   666,   667,   667,   667,   667,   667,   667,   668,   668,
     669,   669,   669,   670,   670,   670,   671,   671,   649,   649,
     649,   649,   649,   649,   650,   650,   651,   651,  1008,   573,
     573,   574,   574,   575,   575,   576,   576,   577,   577,   578,
     578,   579,   579,   580,   580,   581,   581,   581,   581,   581,
     582,   583,   583,   584,   584,   585,   585,   586,   586,   586,
     586,   586,   586,   586,   586,   586,   586,   586,   586,   586,
     586,   586,   586,   587,   588,   588,   588,   589,   589,   782,
     782,   783,   783,   784,   784,   784,   784,   784,   784,   784,
     784,   785,   785,   786,   786,   787,   787,   787,   787,   787,
     787,   787,   787,   787,   787,   787,   787,   787,   787,   787,
     787,   787,   787,   787,   788,   788,   789,   789,   790,   790,
     791,   791,   791,   792,   792,   793,   793,   794,   794,   794,
     795,   795,   796,   797,   797,   798,   798,   798,   798,   798,
     798,   798,   798,   798,   799,   799,   800,   800,   800,   801,
     802,   802,   803,   803,   804,   804,   804,   805,   805,   806,
     806,   807,   807,   808,   808,   809,   809,   809,   810,   810,
     810,   811,   811,   811,   811,   812,   812,   813,   813,   813,
     813,   814,   814,   815,   815,   815,   815,   815,   815,   816,
     816,   817,   817,   818,   818,   818,   818,   819,   820,   820,
     821,   821,   822,   822,   822,   822,   822,   823,   824,   824,
     824,   825,   825,   826,   826,   827,   827,   828,   828,   828,
     829,   829,   830,   830,   831,   831,   831,   831,   831,   832,
     833,   834,   835,   836,   836,   837,   837,   838,   838,   839,
     839,   840,   840,   841,   841,   842,   843,   843,   843,   843,
     844,   844,   845,   845,   845,   846,   846,   847,   847,   848,
     848,   849,   849,   850,   850,   851,   851,   851,   851,   851,
     851,   851,   851,   851,   851,   851,   852,   852,   853,   853,
     853,   854,   854,   855,   855,   856,   856,   857,   857,   858,
     858,   859,   860,   860,   861,   861,   861,   861,   861,   861,
     861,   861,   861,   861,   861,   862,   862,   862,   862,   863,
     863,   864,   864,   864,   864,   864,   865,   865,   865,   865,
     865,   865,   866,   866,   867,   867,   868,   868,   868,   868,
     869,   869,   870,   871,   871,   872,   872,   873,   873,   874,
     874,   875,   875,   876,   877,   877,   878,   878,   879,   879,
     880,   880,   881,   881,   881,   881,   881,   881,   881,   881,
     881,   882,   882,   882,   883,   883,   883,   883,   883,   883,
     883,   884,   884,   884,   884,   885,   886,   886,   887,   887,
     887,   887,   887,   887,   887,   887,   887,   887,   887,   888,
     888,   889,   889,   890,   890,   891,   892,   893,   893,   894,
     894,   895,   896,   897,   897,   897,   897,   897,   897,   898,
     898,   899,   899,   899,   899,   900,   901,   901,   901,   902,
     902,   903,   903,   904,   904,   905,   905,   906,   906,   907,
     907,   908,   908,   909,   909,   910,   910,   910,   910,   910,
     910,   910,   910,   910,   910,   910,   910,   910,   910,   910,
     910,   911,   911,   911,   911,   911,   911,   911,   911,   911,
     911,   911,   911,   911,   911,   911,   911,   911,   911,   911,
     911,   911,   911,   911,   911,   911,   911,   911,   911,   911,
     911,   911,   911,   911,   911,   911,   911,   911,   911,   911,
     911,   911,   911,   911,   911,   911,   911,   911,   911,   911,
     911,   911,   911,   911,   911,   911,   911,   911,   911,   911,
     911,   911,   911,   911,   911,   911,   911,   911,   911,   911,
     911,   912,   912,   912,   912,   912,   912,   912,   912,   912,
     912,   912,   912,   912,   912,   912,   912,   912,   912,   912,
     912,   912,   912,   912,   912,   912,   913,   913,   913,   914,
     914,   914,   914,   914,   914,   914,   914,   914,   914,   914,
     914,   914,   915,   915,   915,   915,   915,   915,   916,   916,
     916,   916,   916,   916,   917,   917,   918,   918,   919,   919,
     919,   919,   919,   919,   919,   919,   919,   919,   919,   919,
     919,   919,   920,   920,   921,   921,   922,   922,   922,   923,
     923,   924,   924,   925,   925,   926,   927,   927,   927,   928,
     929,   929,   930,   930,   931,   931,   931,   932,   932,   933,
     933,   933,   933,   933,   934,   934,   935,   935,   936,   937,
     937,   938,   938,   939,   940,   940,   941,   941,   942,   942,
     943,   943,   943,   944,   944,   945,   945,   945,   945,   945,
     945,   945,   945,   945,   945,   945,   945,   945,   945,   946,
     946,   947,   947,   948,   948,   948,   948,   948,   948,   948,
     948,   949,   949,   950,   950,   951,   951,   952,   952,   953,
     953,   954,   954,   955,   955,   956,   956,   956,   957,   957,
     958,   958,   959,   959,   959,   959,   959,   959,   959,   959,
     959,   959,   960,   960,   961,   962,   962,   963,   963,   963,
     963,   963,   963,   964,   965,   966,   966,   966,   967,   967,
     968,   969,   969,   970,   971,   971,   972,   972,   973,   973,
     570,   570,   974,   974,   975,   975,   976,   976,   976,   977,
     977,   977,   978,   978,   979,   979,   980,   980,   981,   981,
     982,   982,   983,   983,   983,   984,   984,   985,   985,   986,
     987,   987,   988,   988,   989,   989,   989,   990,   990,   991,
     991,   992,   992,   993,   993,   994,   995,   995,   996,   996,
     996,   996,   996,   996,   996,   996,   996,   996,   996,   996,
     996,   996,   997,   998,   998,   998,   999,   999,   999,  1000,
    1000,  1000,  1001,  1001,  1002,  1002,  1003,  1003,  1004,  1005,
    1005,   777,   778,   778,   779,   779,   779,   779,   779,   652,
     652,   652,   653,   653,   654,   654,   654,   654,   687,   687,
     688,   689,   689,   690,   690,   691,   691,   692,   692,   693,
     693,   538,   538,   538,   538,   538,   538,   563,   563,   564,
     564,   685,   685,   686,   674,   674,   674,   674,   675,   675,
     676,   676,   676,   677,   677,   677,   677,   677,   677,   677,
     677,   677,   677,   677,   677,   677,   677,   677,   677,   677,
     677,   677,   677,   677,   677,   677,   677,   677,   677,   677,
     677,   677,   677,   678,   678,   678,   679,   679,   680,   680,
     681,   681,   682,   682,   682,   682,   683,   684,   684,  1018,
    1018,  1018,  1018,  1019,  1019,  1019,  1019,  1020,  1020,  1020,
    1020,  1021,  1021,  1022,  1022,  1022,  1022,  1022,  1022,  1022,
    1023,  1023,   715,   715,   715,   716,   716,  1010,  1010,  1010,
    1010,  1010,  1011,  1011,  1011,  1011,  1011,  1012,  1012,  1013,
    1013,  1014,  1014,   661,   661,   662,   662,   662,   663,   663,
     664,   664,   557,   557,   558,   559,   559,   560,   560,   561,
     561,  1015,  1016,  1016,  1017,  1017,  1017,  1024,  1024,  1024,
    1024,  1024,  1024,  1024,  1024,  1025,  1025,  1026,  1026,  1027,
    1027,  1028,  1028,   562,  1029,  1029,  1029,  1029,  1029,  1030,
    1030,  1030,  1030,   638,   638,   638,   639,   639,   639,   640,
     641,   641,   641,   641,   641,   641,   641,   641,   641,   641,
     641,   641,   641,   641,   641,   641,   641,   641,   641,   641,
     641,   641,   641,   641,   641,   641,   641,   641,   641,   641,
     641,   641,   641,   641,   641,   641,   641,   641,   641,   641,
     641,   641,   641,   641,   641,   641,   641,   641,   641,   641,
     641,   641,   641,   641,   641,   641,   641,   641,   641,   641,
     641,   641,   641,   641,   641,   641,   641,   641,   641,   641,
     641,   641,   641,   641,   641,   641,   641,   641,   641,   641,
     641,   641,   641,   641,   641,   641,   641,   641,   641,   641,
     641,   641,   641,   641,   641,   641,   641,   641,   641,   641,
     641,   641,   641,   641,   641,   641,   641,   641,   641,   641,
     641,   641,   641,   641,   641,   641,   641,   641,   641,   641,
     641,   641,   641,   641,   641,   641,   641,   641,   641,   641,
     641,   641,   641,   641,   641,   641,   641,   641,   641,   641,
     641,   641,   641,   641,   641,   641,   641,   641,   641,   641,
     641,   641,   641,   641,   641,   641,   641,   641,   641,   641,
     641,   641,   641,   641,   641,   641,   641,   641,   641,   641,
     641,   641,   641,   641,   641,   641,   641,   641,   641,   641,
     641,   641,   641,   641,   641,   641,   641,   641,   641,   641,
     641,   641,   641,   641,   641,   641,   641,   641,   641,   641,
     641,   641,   641,   641,   641,   641,   641,   641,   641,   641,
     641,   641,   641,   641,   641,   641,   641,   641,   641,   641,
     641,   641,   641,   641,   641,   641,   641,   641,   641,   641,
     641,   641,   641,   641,   641,   641,   641,   641,   641,   641,
     641,   641,   641,   641,   641,   641,   641,   641,   641,   641,
     641,   641,   641,   641,   641,   641,   641,   641,   641,   641,
     641,   641,   641,   641,   641,   641,   641,   641,   641,   641,
     641,   641,   641,   641,   641,   641,   641,   641,   641,   641,
     641,   641,   641,   641,   641,   641,   641,   641,   641,   641,
     641,   641,   641,   641,   641,   641,   641,   641,   641,   641,
     641,   641,   641,   641,   641,   641,   641,   642,   642,   642,
     642,   642,   642,   642,   642,   642,   642,   642,   642,   642,
     642,   642,   642,   642,   642,   642,   642,   642,   642,   642,
     642,   642,   642,   642,   642,   642,   642,   642,   642,   642,
     642,   642,   642,   642,   642,   642,   642,   642,   642,   642,
     642,   642,   642,   642,   642,   642,   642,   642,   642,   642,
     642,   643,   643,   643,   643,   643,   643,   643,   643,   643,
     643,   643,   643,   643,   643,   643,   643,   643,   643,   643,
     643,   643,   643,   643,   643,   643,   643,   643,   643,   644,
     644,   644,   644,   644,   644,   644,   644,   644,   644,   644,
     644,   644,   644,   644,   644,   644,   644,   644,   644,   644,
     644,   644,   644,   644,   644,   644,   644,   644,   645,   645,
     645,   645,   645,   645,   645,   645,   645,   645,   645,   645,
     645,   645,   645,   645,   645,   645,   645,   645,   645,   645,
     645,   645,   645,   645,   645,   645,   645,   645,   645,   645,
     645,   645,   645,   645,   645,   645,   645,   645,   645,   645,
     645,   645,   645,   645,   645,   645,   645,   645,   645,   645,
     645,   645,   645,   645,   645,   645,   645,   645,   645,   645,
     645,   645,   645,   645,   645,   645,   645,   645,   645,   645,
     645,   645,   645,   645,   645,   645,   645,   645,   645,   646,
     646,   646,   646,   646,   646,   646,   646,   646,   646,   646,
     646,   646,   646,   646,   646,   646,   646,   646,   646,   646,
     646,   646,   646,   646,   646,   646,   646,   646,   646,   646,
     646,   647,   647,   647,   647,   647,   647,   647,   647,   647,
     647,   647,   647,   647,   647,   647,   647,   647,   647,   647,
     647,   647,   647,   647,   647,   647,   647,   647,   647,   647,
     647,   647,   647,   647,   647,   647,   647,   647,   647,   647,
     647,   647,   647,   647,   647,   647,   647,   647,   647,   647,
     647,   647,   647,   647,   647,   647,   647,   647,   647,   647,
     647,   647,   647,   647,   647,   647,   647,   647,   647,   647,
     647,   647,   647,   647,   648,   648,   648,   648,   648,   648,
     648,   648,   648,   648,   648,   648,   648,   648,   648,   648,
     648,   648,   648,   648,   648,   648,   648,   648,   648,   648,
     648,   648,   648,   648,   648,   648,   648,   648,   648,   648,
     648,   648,   648,   648,   648,   648,   648,   648,   648,   648,
     648,   648,   648,   648,   648,   648,   648
};

/* YYR2[RULE-NUM] -- Number of symbols on the right-hand side of rule RULE-NUM.  */
static const yytype_int8 yyr2[] =
{
       0,     2,     1,     3,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     0,     4,     6,     4,     6,
       4,     6,     4,     6,     1,     2,     3,     2,     1,     3,
       2,     3,     1,     3,     2,     5,     3,     6,     4,     6,
       6,     6,     5,     5,     6,     9,     4,     5,     7,     6,
       4,     8,     4,     2,     4,     3,     6,     4,     2,     2,
       2,     2,     1,     2,     0,     1,     2,     2,     2,     1,
       3,     4,     2,     1,     0,     2,     3,     2,     3,     1,
       2,     1,     1,     1,     1,     1,     1,     1,     2,     2,
       1,     1,     1,     1,     1,     6,     6,     8,     6,     8,
       6,     8,     6,     8,     8,    10,     8,    10,     1,     0,
       9,     1,     4,     4,     7,     2,     1,     3,     2,     2,
       0,     4,     3,     0,     1,     0,     2,     3,     5,     2,
       2,     0,     8,     5,     0,     5,     5,     7,     2,     0,
       1,     1,     1,     3,     2,     0,     1,     0,     1,     3,
       1,     3,     1,     2,     1,     3,     2,     6,     8,     5,
       1,     0,     1,     3,     2,     4,     5,     5,     8,     7,
       1,     0,     3,     9,    12,     3,     0,     4,     6,     1,
       2,     1,     1,     0,     1,     2,     2,     1,     2,     2,
       1,     2,     3,     2,     2,     2,     2,     3,     3,     3,
       1,     3,     1,     0,     1,     2,     2,     2,     2,     2,
       2,     2,     2,     1,     1,     0,     2,     1,     1,     1,
       5,     1,     1,     1,     1,    16,     3,     0,     3,     2,
       2,     1,     3,     5,     0,     5,     3,     0,    13,     1,
       0,     1,     3,     1,     3,     1,     3,     4,     0,     4,
       3,     2,     2,     0,     2,     0,    12,     1,     1,     3,
       2,     0,     1,     1,     0,     1,     1,     0,     2,     0,
       2,     2,     2,     2,     1,     1,     0,     3,     4,     3,
       2,     3,     0,     1,     3,     3,     1,     3,     1,     0,
       1,     1,     1,     5,     0,     1,     1,     2,     0,     3,
       0,     5,     4,     1,     1,     2,     2,     0,     1,     3,
       1,     3,     1,     3,     1,     3,     3,     1,     2,     3,
       2,     0,     1,     1,     1,     2,     1,     2,     3,     2,
       1,     1,     0,     4,     2,     5,     3,     1,     3,     3,
       5,     2,     2,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     2,
       2,     3,     3,     5,     4,     6,     3,     5,     4,     6,
       4,     6,     5,     7,     3,     2,     4,     3,     2,     3,
       3,     3,     3,     4,     3,     4,     3,     4,     5,     6,
       6,     7,     6,     7,     6,     7,     3,     4,     9,    12,
      11,     0,     2,     1,     1,     1,     1,     1,     1,     3,
       0,     1,     2,     1,     1,     2,     2,     3,     1,     1,
       2,     2,     1,     2,     3,     5,     3,     2,     5,     1,
       1,     1,     0,     5,     7,     5,     2,     3,     1,     1,
       2,     2,     0,     3,     4,     4,     0,     3,     2,     0,
       3,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     3,     3,     1,     2,     2,     2,     2,     2,     2,
       0,     3,     3,     3,     0,     1,     2,     1,     2,     2,
       2,     2,     3,     4,     1,     3,     1,     1,     1,     1,
       3,     1,     2,     0,     1,     2,     0,     1,     3,     0,
       2,     0,     3,     3,     1,     5,     3,     1,     3,     1,
       2,     1,     4,     5,     5,     6,     3,     7,     4,    11,
       1,     3,     2,     2,     2,     0,     3,     1,     1,     2,
       2,     2,     2,     1,     0,     1,     2,     6,     4,     6,
       4,     6,     8,     4,     6,     1,     1,     1,     1,     2,
       1,     2,     1,     2,     1,     1,     1,     1,     3,     3,
       3,     3,     2,     2,     1,     3,     1,     1,     1,     3,
       1,     1,     0,     1,     1,     1,     1,     3,     8,    11,
      10,     7,    10,     9,     1,     1,     2,     3,     8,    11,
       9,     1,     1,     3,     0,     1,     3,     1,     0,     1,
       0,     1,     0,     1,     3,     1,     1,     1,     3,     0,
       2,     2,     0,     2,     0,     1,     0,     1,     1,     1,
       3,     3,     1,     1,     3,     3,     3,     3,     3,     3,
       4,     3,     2,     1,     1,     1,     1,     1,     3,     1,
       1,     3,     3,     1,     2,     4,     4,     2,     3,     5,
       5,     1,     1,     3,     0,    11,    11,    10,    12,     1,
       2,     5,     4,     4,     4,     4,     7,     5,     4,     7,
       6,     9,     9,     4,     1,     1,     1,     1,     1,     1,
       1,     5,     1,     1,     3,     1,     2,     2,     2,     3,
       1,     3,     6,     2,     0,     3,     3,     4,     4,     4,
       4,     3,     2,     1,     1,     0,     1,     1,     0,     2,
       1,     5,     1,     0,     2,     2,     0,     1,     0,     3,
       5,     1,     3,     4,     3,     1,     1,     0,     2,     2,
       0,     2,     2,     1,     1,     1,     0,     2,     4,     5,
       4,     2,     3,     2,     2,     2,     2,     1,     2,     3,
       0,     1,     0,     5,     1,     4,     6,     2,     1,     0,
       4,     0,     1,     1,     2,     2,     2,     1,     1,     2,
       2,     1,     1,     1,     1,     1,     1,     3,     3,     0,
       1,     3,     1,     2,     1,     1,     1,     1,     1,     2,
       4,     4,     5,     1,     1,     2,     0,     2,     0,     1,
       3,     1,     0,     1,     2,     3,     2,     4,     2,     3,
       2,     0,     1,     2,     0,     4,     5,     1,     2,     2,
       0,     1,     3,     1,     2,     3,     3,     3,     3,     3,
       3,     1,     4,     2,     9,     9,     3,     0,     2,     2,
       0,     5,     3,     1,     3,     5,     3,     1,     2,     1,
       3,     5,     1,     2,     3,     4,     5,     4,     5,     4,
       6,     5,     4,     5,     5,     5,     2,     4,     1,     1,
       0,     1,     4,     5,     4,     0,     2,     2,     2,     1,
       1,     1,     1,     0,     4,     2,     1,     2,     2,     4,
       2,     6,     2,     1,     3,     4,     0,     2,     0,     2,
       0,     1,     3,     3,     2,     0,     2,     4,     1,     1,
       1,     0,     2,     3,     5,     6,     2,     3,     5,     5,
       5,     3,     4,     0,     1,     1,     1,     1,     1,     2,
       4,     1,     1,     1,     1,     2,     3,     0,     1,     1,
       1,     1,     1,     2,     2,     2,     2,     2,     1,     3,
       0,     1,     1,     1,     1,     5,     2,     1,     1,     1,
       1,     4,     1,     2,     2,     1,     3,     3,     2,     1,
       0,     5,     2,     5,     2,     1,     3,     3,     0,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     3,     3,     3,     3,     3,     3,     3,
       0,     1,     3,     3,     5,     2,     2,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     2,     2,     3,     3,     2,     2,     3,     3,
       5,     4,     6,     3,     5,     4,     6,     4,     6,     5,
       7,     3,     2,     4,     3,     2,     3,     3,     3,     3,
       4,     3,     4,     3,     4,     5,     6,     6,     7,     6,
       7,     6,     7,     3,     4,     4,     6,     1,     4,     3,
       5,     1,     3,     2,     2,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       2,     2,     5,     6,     6,     7,     1,     1,     2,     1,
       1,     2,     2,     3,     1,     2,     4,     1,     1,     2,
       2,     4,     1,     1,     3,     3,     4,     1,     3,     6,
       7,     9,     7,     7,     5,     1,     1,     1,     5,     6,
       6,     4,     4,     4,     4,     6,     5,     5,     5,     4,
       6,     4,     7,     9,     5,     0,     5,     4,     0,     1,
       0,     2,     0,     1,     3,     3,     2,     2,     0,     6,
       1,     0,     3,     0,     2,     2,     0,     1,     4,     2,
       2,     2,     2,     2,     4,     3,     1,     5,     3,     1,
       3,     1,     2,     3,     1,     3,     1,     2,     1,     0,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       4,     1,     4,     1,     4,     1,     2,     1,     2,     1,
       2,     1,     3,     1,     3,     1,     2,     1,     3,     1,
       2,     1,     0,     1,     3,     1,     3,     3,     1,     3,
       3,     0,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     4,     3,     2,     3,     0,     3,     3,     2,
       2,     1,     0,     2,     2,     3,     2,     1,     1,     3,
       5,     1,     2,     4,     2,     0,     1,     0,     1,     2,
       3,     5,     1,     0,     0,     2,     0,     2,     3,     3,
       3,     5,     0,     2,     1,     0,     1,     0,     1,     3,
       1,     2,     3,     2,     1,     4,     2,     1,     0,     3,
       1,     3,     1,     2,     4,     2,     0,     1,     3,     1,
       3,     1,     2,     1,     3,     1,     1,     2,     1,     1,
       2,     1,     1,     2,     7,     2,     5,     3,     3,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     2,     2,     3,     3,     0,     1,     1,
       1,     5,     3,     0,     1,     1,     1,     1,     1,     4,
       7,     6,     2,     0,     1,     1,     1,     1,    13,    16,
       1,     2,     0,     1,     0,     1,     0,     2,     0,     1,
       0,     6,     8,     6,     8,     6,     8,     3,     2,     1,
       0,     4,     6,     3,     2,     4,     3,     5,     1,     0,
       1,     1,     0,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     3,
       1,     1,     1,     1,     1,     1,     2,     1,     1,     2,
       3,     3,     3,     1,     3,     3,     2,     3,     3,     3,
       3,     1,     1,     1,     1,     3,     5,     1,     1,     1,
       1,     3,     2,     2,     3,     1,     1,     4,     6,     5,
       4,     6,     1,     1,     1,     1,     1,     1,     0,     1,
       3,     1,     0,     7,     3,     1,     2,     3,     2,     0,
       2,     0,     2,     4,     5,     3,     5,     1,     0,     2,
       0,     2,     1,     1,     1,     2,     3,     2,     2,     2,
       2,     3,     4,     3,     1,     1,     1,     1,     0,     1,
       3,     1,     3,     2,     9,    12,    11,    12,    14,     3,
       4,     4,     0,     7,    10,     9,     2,     3,     0,     4,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1
};


enum { YYENOMEM = -2 };

#define yyerrok         (yyerrstatus = 0)
#define yyclearin       (yychar = YYEMPTY)

#define YYACCEPT        goto yyacceptlab
#define YYABORT         goto yyabortlab
#define YYERROR         goto yyerrorlab
#define YYNOMEM         goto yyexhaustedlab


#define YYRECOVERING()  (!!yyerrstatus)

#define YYBACKUP(Token, Value)                                    \
  do                                                              \
    if (yychar == YYEMPTY)                                        \
      {                                                           \
        yychar = (Token);                                         \
        yylval = (Value);                                         \
        YYPOPSTACK (yylen);                                       \
        yystate = *yyssp;                                         \
        goto yybackup;                                            \
      }                                                           \
    else                                                          \
      {                                                           \
        yyerror (&yylloc, yyscanner, YY_("syntax error: cannot back up")); \
        YYERROR;                                                  \
      }                                                           \
  while (0)

/* Backward compatibility with an undocumented macro.
   Use YYerror or YYUNDEF. */
#define YYERRCODE YYUNDEF

/* YYLLOC_DEFAULT -- Set CURRENT to span from RHS[1] to RHS[N].
   If N is 0, then set CURRENT to the empty location which ends
   the previous symbol: RHS[0] (always defined).  */

#ifndef YYLLOC_DEFAULT
# define YYLLOC_DEFAULT(Current, Rhs, N)                                \
    do                                                                  \
      if (N)                                                            \
        {                                                               \
          (Current).first_line   = YYRHSLOC (Rhs, 1).first_line;        \
          (Current).first_column = YYRHSLOC (Rhs, 1).first_column;      \
          (Current).last_line    = YYRHSLOC (Rhs, N).last_line;         \
          (Current).last_column  = YYRHSLOC (Rhs, N).last_column;       \
        }                                                               \
      else                                                              \
        {                                                               \
          (Current).first_line   = (Current).last_line   =              \
            YYRHSLOC (Rhs, 0).last_line;                                \
          (Current).first_column = (Current).last_column =              \
            YYRHSLOC (Rhs, 0).last_column;                              \
        }                                                               \
    while (0)
#endif

#define YYRHSLOC(Rhs, K) ((Rhs)[K])


/* Enable debugging if requested.  */
#if YYDEBUG

# ifndef YYFPRINTF
#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#  define YYFPRINTF fprintf
# endif

# define YYDPRINTF(Args)                        \
do {                                            \
  if (yydebug)                                  \
    YYFPRINTF Args;                             \
} while (0)


/* YYLOCATION_PRINT -- Print the location on the stream.
   This macro was not mandated originally: define only if we know
   we won't break user code: when these are the locations we know.  */

# ifndef YYLOCATION_PRINT

#  if defined YY_LOCATION_PRINT

   /* Temporary convenience wrapper in case some people defined the
      undocumented and private YY_LOCATION_PRINT macros.  */
#   define YYLOCATION_PRINT(File, Loc)  YY_LOCATION_PRINT(File, *(Loc))

#  elif defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL

/* Print *YYLOCP on YYO.  Private, do not rely on its existence. */

YY_ATTRIBUTE_UNUSED
static int
yy_location_print_ (FILE *yyo, YYLTYPE const * const yylocp)
{
  int res = 0;
  int end_col = 0 != yylocp->last_column ? yylocp->last_column - 1 : 0;
  if (0 <= yylocp->first_line)
    {
      res += YYFPRINTF (yyo, "%d", yylocp->first_line);
      if (0 <= yylocp->first_column)
        res += YYFPRINTF (yyo, ".%d", yylocp->first_column);
    }
  if (0 <= yylocp->last_line)
    {
      if (yylocp->first_line < yylocp->last_line)
        {
          res += YYFPRINTF (yyo, "-%d", yylocp->last_line);
          if (0 <= end_col)
            res += YYFPRINTF (yyo, ".%d", end_col);
        }
      else if (0 <= end_col && yylocp->first_column < end_col)
        res += YYFPRINTF (yyo, "-%d", end_col);
    }
  return res;
}

#   define YYLOCATION_PRINT  yy_location_print_

    /* Temporary convenience wrapper in case some people defined the
       undocumented and private YY_LOCATION_PRINT macros.  */
#   define YY_LOCATION_PRINT(File, Loc)  YYLOCATION_PRINT(File, &(Loc))

#  else

#   define YYLOCATION_PRINT(File, Loc) ((void) 0)
    /* Temporary convenience wrapper in case some people defined the
       undocumented and private YY_LOCATION_PRINT macros.  */
#   define YY_LOCATION_PRINT  YYLOCATION_PRINT

#  endif
# endif /* !defined YYLOCATION_PRINT */


# define YY_SYMBOL_PRINT(Title, Kind, Value, Location)                    \
do {                                                                      \
  if (yydebug)                                                            \
    {                                                                     \
      YYFPRINTF (stderr, "%s ", Title);                                   \
      yy_symbol_print (stderr,                                            \
                  Kind, Value, Location, yyscanner); \
      YYFPRINTF (stderr, "\n");                                           \
    }                                                                     \
} while (0)


/*-----------------------------------.
| Print this symbol's value on YYO.  |
`-----------------------------------*/

static void
yy_symbol_value_print (FILE *yyo,
                       yysymbol_kind_t yykind, YYSTYPE const * const yyvaluep, YYLTYPE const * const yylocationp, core_yyscan_t yyscanner)
{
  FILE *yyoutput = yyo;
  YY_USE (yyoutput);
  YY_USE (yylocationp);
  YY_USE (yyscanner);
  if (!yyvaluep)
    return;
  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  YY_USE (yykind);
  YY_IGNORE_MAYBE_UNINITIALIZED_END
}


/*---------------------------.
| Print this symbol on YYO.  |
`---------------------------*/

static void
yy_symbol_print (FILE *yyo,
                 yysymbol_kind_t yykind, YYSTYPE const * const yyvaluep, YYLTYPE const * const yylocationp, core_yyscan_t yyscanner)
{
  YYFPRINTF (yyo, "%s %s (",
             yykind < YYNTOKENS ? "token" : "nterm", yysymbol_name (yykind));

  YYLOCATION_PRINT (yyo, yylocationp);
  YYFPRINTF (yyo, ": ");
  yy_symbol_value_print (yyo, yykind, yyvaluep, yylocationp, yyscanner);
  YYFPRINTF (yyo, ")");
}

/*------------------------------------------------------------------.
| yy_stack_print -- Print the state stack from its BOTTOM up to its |
| TOP (included).                                                   |
`------------------------------------------------------------------*/

static void
yy_stack_print (yy_state_t *yybottom, yy_state_t *yytop)
{
  YYFPRINTF (stderr, "Stack now");
  for (; yybottom <= yytop; yybottom++)
    {
      int yybot = *yybottom;
      YYFPRINTF (stderr, " %d", yybot);
    }
  YYFPRINTF (stderr, "\n");
}

# define YY_STACK_PRINT(Bottom, Top)                            \
do {                                                            \
  if (yydebug)                                                  \
    yy_stack_print ((Bottom), (Top));                           \
} while (0)


/*------------------------------------------------.
| Report that the YYRULE is going to be reduced.  |
`------------------------------------------------*/

static void
yy_reduce_print (yy_state_t *yyssp, YYSTYPE *yyvsp, YYLTYPE *yylsp,
                 int yyrule, core_yyscan_t yyscanner)
{
  int yylno = yyrline[yyrule];
  int yynrhs = yyr2[yyrule];
  int yyi;
  YYFPRINTF (stderr, "Reducing stack by rule %d (line %d):\n",
             yyrule - 1, yylno);
  /* The symbols being reduced.  */
  for (yyi = 0; yyi < yynrhs; yyi++)
    {
      YYFPRINTF (stderr, "   $%d = ", yyi + 1);
      yy_symbol_print (stderr,
                       YY_ACCESSING_SYMBOL (+yyssp[yyi + 1 - yynrhs]),
                       &yyvsp[(yyi + 1) - (yynrhs)],
                       &(yylsp[(yyi + 1) - (yynrhs)]), yyscanner);
      YYFPRINTF (stderr, "\n");
    }
}

# define YY_REDUCE_PRINT(Rule)          \
do {                                    \
  if (yydebug)                          \
    yy_reduce_print (yyssp, yyvsp, yylsp, Rule, yyscanner); \
} while (0)

/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
int yydebug;
#else /* !YYDEBUG */
# define YYDPRINTF(Args) ((void) 0)
# define YY_SYMBOL_PRINT(Title, Kind, Value, Location)
# define YY_STACK_PRINT(Bottom, Top)
# define YY_REDUCE_PRINT(Rule)
#endif /* !YYDEBUG */


/* YYINITDEPTH -- initial size of the parser's stacks.  */
#ifndef YYINITDEPTH
# define YYINITDEPTH 200
#endif

/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   YYSTACK_ALLOC_MAXIMUM < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.  */

#ifndef YYMAXDEPTH
# define YYMAXDEPTH 10000
#endif






/*-----------------------------------------------.
| Release the memory associated to this symbol.  |
`-----------------------------------------------*/

static void
yydestruct (const char *yymsg,
            yysymbol_kind_t yykind, YYSTYPE *yyvaluep, YYLTYPE *yylocationp, core_yyscan_t yyscanner)
{
  YY_USE (yyvaluep);
  YY_USE (yylocationp);
  YY_USE (yyscanner);
  if (!yymsg)
    yymsg = "Deleting";
  YY_SYMBOL_PRINT (yymsg, yykind, yyvaluep, yylocationp);

  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  YY_USE (yykind);
  YY_IGNORE_MAYBE_UNINITIALIZED_END
}






/*----------.
| yyparse.  |
`----------*/

int
yyparse (core_yyscan_t yyscanner)
{
/* Lookahead token kind.  */
int yychar;


/* The semantic value of the lookahead symbol.  */
/* Default value used for initialization, for pacifying older GCCs
   or non-GCC compilers.  */
YY_INITIAL_VALUE (static YYSTYPE yyval_default;)
YYSTYPE yylval YY_INITIAL_VALUE (= yyval_default);

/* Location data for the lookahead symbol.  */
static YYLTYPE yyloc_default
# if defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL
  = { 1, 1, 1, 1 }
# endif
;
YYLTYPE yylloc = yyloc_default;

    /* Number of syntax errors so far.  */
    int yynerrs = 0; (void)yynerrs;

    yy_state_fast_t yystate = 0;
    /* Number of tokens to shift before error messages enabled.  */
    int yyerrstatus = 0;

    /* Refer to the stacks through separate pointers, to allow yyoverflow
       to reallocate them elsewhere.  */

    /* Their size.  */
    YYPTRDIFF_T yystacksize = YYINITDEPTH;

    /* The state stack: array, bottom, top.  */
    yy_state_t yyssa[YYINITDEPTH];
    yy_state_t *yyss = yyssa;
    yy_state_t *yyssp = yyss;

    /* The semantic value stack: array, bottom, top.  */
    YYSTYPE yyvsa[YYINITDEPTH];
    YYSTYPE *yyvs = yyvsa;
    YYSTYPE *yyvsp = yyvs;

    /* The location stack: array, bottom, top.  */
    YYLTYPE yylsa[YYINITDEPTH];
    YYLTYPE *yyls = yylsa;
    YYLTYPE *yylsp = yyls;

  int yyn;
  /* The return value of yyparse.  */
  int yyresult;
  /* Lookahead symbol kind.  */
  yysymbol_kind_t yytoken = YYSYMBOL_YYEMPTY;
  /* The variables used to return semantic value and location from the
     action routines.  */
  YYSTYPE yyval;
  YYLTYPE yyloc;

  /* The locations where the error started and ended.  */
  YYLTYPE yyerror_range[3];



#define YYPOPSTACK(N)   (yyvsp -= (N), yyssp -= (N), yylsp -= (N))

  /* The number of symbols on the RHS of the reduced rule.
     Keep to zero when no symbol should be popped.  */
  int yylen = 0;

  YYDPRINTF ((stderr, "Starting parse\n"));

  yychar = YYEMPTY; /* Cause a token to be read.  */

  yylsp[0] = yylloc;
  goto yysetstate;


/*------------------------------------------------------------.
| yynewstate -- push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
yynewstate:
  /* In all cases, when you get here, the value and location stacks
     have just been pushed.  So pushing a state here evens the stacks.  */
  yyssp++;


/*--------------------------------------------------------------------.
| yysetstate -- set current state (the top of the stack) to yystate.  |
`--------------------------------------------------------------------*/
yysetstate:
  YYDPRINTF ((stderr, "Entering state %d\n", yystate));
  YY_ASSERT (0 <= yystate && yystate < YYNSTATES);
  YY_IGNORE_USELESS_CAST_BEGIN
  *yyssp = YY_CAST (yy_state_t, yystate);
  YY_IGNORE_USELESS_CAST_END
  YY_STACK_PRINT (yyss, yyssp);

  if (yyss + yystacksize - 1 <= yyssp)
#if !defined yyoverflow && !defined YYSTACK_RELOCATE
    YYNOMEM;
#else
    {
      /* Get the current used size of the three stacks, in elements.  */
      YYPTRDIFF_T yysize = yyssp - yyss + 1;

# if defined yyoverflow
      {
        /* Give user a chance to reallocate the stack.  Use copies of
           these so that the &'s don't force the real ones into
           memory.  */
        yy_state_t *yyss1 = yyss;
        YYSTYPE *yyvs1 = yyvs;
        YYLTYPE *yyls1 = yyls;

        /* Each stack pointer address is followed by the size of the
           data in use in that stack, in bytes.  This used to be a
           conditional around just the two extra args, but that might
           be undefined if yyoverflow is a macro.  */
        yyoverflow (YY_("memory exhausted"),
                    &yyss1, yysize * YYSIZEOF (*yyssp),
                    &yyvs1, yysize * YYSIZEOF (*yyvsp),
                    &yyls1, yysize * YYSIZEOF (*yylsp),
                    &yystacksize);
        yyss = yyss1;
        yyvs = yyvs1;
        yyls = yyls1;
      }
# else /* defined YYSTACK_RELOCATE */
      /* Extend the stack our own way.  */
      if (YYMAXDEPTH <= yystacksize)
        YYNOMEM;
      yystacksize *= 2;
      if (YYMAXDEPTH < yystacksize)
        yystacksize = YYMAXDEPTH;

      {
        yy_state_t *yyss1 = yyss;
        union yyalloc *yyptr =
          YY_CAST (union yyalloc *,
                   YYSTACK_ALLOC (YY_CAST (YYSIZE_T, YYSTACK_BYTES (yystacksize))));
        if (! yyptr)
          YYNOMEM;
        YYSTACK_RELOCATE (yyss_alloc, yyss);
        YYSTACK_RELOCATE (yyvs_alloc, yyvs);
        YYSTACK_RELOCATE (yyls_alloc, yyls);
#  undef YYSTACK_RELOCATE
        if (yyss1 != yyssa)
          YYSTACK_FREE (yyss1);
      }
# endif

      yyssp = yyss + yysize - 1;
      yyvsp = yyvs + yysize - 1;
      yylsp = yyls + yysize - 1;

      YY_IGNORE_USELESS_CAST_BEGIN
      YYDPRINTF ((stderr, "Stack size increased to %ld\n",
                  YY_CAST (long, yystacksize)));
      YY_IGNORE_USELESS_CAST_END

      if (yyss + yystacksize - 1 <= yyssp)
        YYABORT;
    }
#endif /* !defined yyoverflow && !defined YYSTACK_RELOCATE */


  if (yystate == YYFINAL)
    YYACCEPT;

  goto yybackup;


/*-----------.
| yybackup.  |
`-----------*/
yybackup:
  /* Do appropriate processing given the current state.  Read a
     lookahead token if we need one and don't already have one.  */

  /* First try to decide what to do without reference to lookahead token.  */
  yyn = yypact[yystate];
  if (yypact_value_is_default (yyn))
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* YYCHAR is either empty, or end-of-input, or a valid lookahead.  */
  if (yychar == YYEMPTY)
    {
      YYDPRINTF ((stderr, "Reading a token\n"));
      yychar = yylex (&yylval, &yylloc, yyscanner);
    }

  if (yychar <= YYEOF)
    {
      yychar = YYEOF;
      yytoken = YYSYMBOL_YYEOF;
      YYDPRINTF ((stderr, "Now at end of input.\n"));
    }
  else if (yychar == YYerror)
    {
      /* The scanner already issued an error message, process directly
         to error recovery.  But do not keep the error token as
         lookahead, it is too special and may lead us to an endless
         loop in error recovery. */
      yychar = YYUNDEF;
      yytoken = YYSYMBOL_YYerror;
      yyerror_range[1] = yylloc;
      goto yyerrlab1;
    }
  else
    {
      yytoken = YYTRANSLATE (yychar);
      YY_SYMBOL_PRINT ("Next token is", yytoken, &yylval, &yylloc);
    }

  /* If the proper action on seeing token YYTOKEN is to reduce or to
     detect an error, take that action.  */
  yyn += yytoken;
  if (yyn < 0 || YYLAST < yyn || yycheck[yyn] != yytoken)
    goto yydefault;
  yyn = yytable[yyn];
  if (yyn <= 0)
    {
      if (yytable_value_is_error (yyn))
        goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }

  /* Count tokens shifted since error; after three, turn off error
     status.  */
  if (yyerrstatus)
    yyerrstatus--;

  /* Shift the lookahead token.  */
  YY_SYMBOL_PRINT ("Shifting", yytoken, &yylval, &yylloc);
  yystate = yyn;
  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  *++yyvsp = yylval;
  YY_IGNORE_MAYBE_UNINITIALIZED_END
  *++yylsp = yylloc;

  /* Discard the shifted token.  */
  yychar = YYEMPTY;
  goto yynewstate;


/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
yydefault:
  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;
  goto yyreduce;


/*-----------------------------.
| yyreduce -- do a reduction.  |
`-----------------------------*/
yyreduce:
  /* yyn is the number of a rule to reduce with.  */
  yylen = yyr2[yyn];

  /* If YYLEN is nonzero, implement the default value of the action:
     '$$ = $1'.

     Otherwise, the following line sets YYVAL to garbage.
     This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */
  yyval = yyvsp[1-yylen];

  /* Default location. */
  YYLLOC_DEFAULT (yyloc, (yylsp - yylen), yylen);
  yyerror_range[1] = yyloc;
  YY_REDUCE_PRINT (yyn);
  switch (yyn)
    {
  case 2: /* stmtblock: stmtmulti  */
#line 548 "third_party/libpg_query/grammar/grammar.y"
                        {
				pg_yyget_extra(yyscanner)->parsetree = (yyvsp[0].list);
			}
#line 19054 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 3: /* stmtmulti: stmtmulti ';' stmt  */
#line 564 "third_party/libpg_query/grammar/grammar.y"
                                {
					if ((yyvsp[-2].list) != NIL)
					{
						/* update length of previous stmt */
						updateRawStmtEnd(llast_node(PGRawStmt, (yyvsp[-2].list)), (yylsp[-1]));
					}
					if ((yyvsp[0].node) != NULL)
						(yyval.list) = lappend((yyvsp[-2].list), makeRawStmt((yyvsp[0].node), (yylsp[-1]) + 1));
					else
						(yyval.list) = (yyvsp[-2].list);
				}
#line 19070 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 4: /* stmtmulti: stmt  */
#line 576 "third_party/libpg_query/grammar/grammar.y"
                                {
					if ((yyvsp[0].node) != NULL)
						(yyval.list) = list_make1(makeRawStmt((yyvsp[0].node), 0));
					else
						(yyval.list) = NIL;
				}
#line 19081 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 45: /* stmt: %empty  */
#line 625 "third_party/libpg_query/grammar/grammar.y"
        { (yyval.node) = NULL; }
#line 19087 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 46: /* AlterTableStmt: ALTER TABLE relation_expr alter_table_cmds  */
#line 10 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_TABLE;
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 19100 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 47: /* AlterTableStmt: ALTER TABLE IF_P EXISTS relation_expr alter_table_cmds  */
#line 19 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_TABLE;
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 19113 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 48: /* AlterTableStmt: ALTER INDEX qualified_name alter_table_cmds  */
#line 28 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_INDEX;
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 19126 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 49: /* AlterTableStmt: ALTER INDEX IF_P EXISTS qualified_name alter_table_cmds  */
#line 37 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_INDEX;
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 19139 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 50: /* AlterTableStmt: ALTER SEQUENCE qualified_name alter_table_cmds  */
#line 46 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_SEQUENCE;
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 19152 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 51: /* AlterTableStmt: ALTER SEQUENCE IF_P EXISTS qualified_name alter_table_cmds  */
#line 55 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_SEQUENCE;
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 19165 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 52: /* AlterTableStmt: ALTER VIEW qualified_name alter_table_cmds  */
#line 64 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_VIEW;
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 19178 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 53: /* AlterTableStmt: ALTER VIEW IF_P EXISTS qualified_name alter_table_cmds  */
#line 73 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_VIEW;
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 19191 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 54: /* alter_identity_column_option_list: alter_identity_column_option  */
#line 86 "third_party/libpg_query/grammar/statements/alter_table.y"
                                { (yyval.list) = list_make1((yyvsp[0].defelt)); }
#line 19197 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 55: /* alter_identity_column_option_list: alter_identity_column_option_list alter_identity_column_option  */
#line 88 "third_party/libpg_query/grammar/statements/alter_table.y"
                                { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].defelt)); }
#line 19203 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 56: /* alter_column_default: SET DEFAULT a_expr  */
#line 93 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                { (yyval.node) = (yyvsp[0].node); }
#line 19209 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 57: /* alter_column_default: DROP DEFAULT  */
#line 94 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                { (yyval.node) = NULL; }
#line 19215 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 58: /* alter_identity_column_option: RESTART  */
#line 100 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = makeDefElem("restart", NULL, (yylsp[0]));
				}
#line 19223 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 59: /* alter_identity_column_option: RESTART opt_with NumericOnly  */
#line 104 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = makeDefElem("restart", (PGNode *)(yyvsp[0].value), (yylsp[-2]));
				}
#line 19231 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 60: /* alter_identity_column_option: SET SeqOptElem  */
#line 108 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					if (strcmp((yyvsp[0].defelt)->defname, "as") == 0 ||
						strcmp((yyvsp[0].defelt)->defname, "restart") == 0 ||
						strcmp((yyvsp[0].defelt)->defname, "owned_by") == 0)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("sequence option \"%s\" not supported here", (yyvsp[0].defelt)->defname),
								 parser_errposition((yylsp[0]))));
					(yyval.defelt) = (yyvsp[0].defelt);
				}
#line 19246 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 61: /* alter_identity_column_option: SET GENERATED generated_when  */
#line 119 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = makeDefElem("generated", (PGNode *) makeInteger((yyvsp[0].ival)), (yylsp[-2]));
				}
#line 19254 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 62: /* alter_generic_option_list: alter_generic_option_elem  */
#line 127 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].defelt));
				}
#line 19262 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 63: /* alter_generic_option_list: alter_generic_option_list ',' alter_generic_option_elem  */
#line 131 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt));
				}
#line 19270 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 64: /* alter_table_cmd: ADD_P columnDef  */
#line 140 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AddColumn;
					n->def = (yyvsp[0].node);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 19282 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 65: /* alter_table_cmd: ADD_P IF_P NOT EXISTS columnDef  */
#line 149 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AddColumn;
					n->def = (yyvsp[0].node);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 19294 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 66: /* alter_table_cmd: ADD_P COLUMN columnDef  */
#line 158 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AddColumn;
					n->def = (yyvsp[0].node);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 19306 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 67: /* alter_table_cmd: ADD_P COLUMN IF_P NOT EXISTS columnDef  */
#line 167 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AddColumn;
					n->def = (yyvsp[0].node);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 19318 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 68: /* alter_table_cmd: ALTER opt_column ColId alter_column_default  */
#line 176 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_ColumnDefault;
					n->name = (yyvsp[-1].str);
					n->def = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 19330 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 69: /* alter_table_cmd: ALTER opt_column ColId DROP NOT NULL_P  */
#line 185 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_DropNotNull;
					n->name = (yyvsp[-3].str);
					(yyval.node) = (PGNode *)n;
				}
#line 19341 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 70: /* alter_table_cmd: ALTER opt_column ColId SET NOT NULL_P  */
#line 193 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetNotNull;
					n->name = (yyvsp[-3].str);
					(yyval.node) = (PGNode *)n;
				}
#line 19352 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 71: /* alter_table_cmd: ALTER opt_column ColId SET STATISTICS SignedIconst  */
#line 201 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetStatistics;
					n->name = (yyvsp[-3].str);
					n->def = (PGNode *) makeInteger((yyvsp[0].ival));
					(yyval.node) = (PGNode *)n;
				}
#line 19364 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 72: /* alter_table_cmd: ALTER opt_column ColId SET reloptions  */
#line 210 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetOptions;
					n->name = (yyvsp[-2].str);
					n->def = (PGNode *) (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 19376 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 73: /* alter_table_cmd: ALTER opt_column ColId RESET reloptions  */
#line 219 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_ResetOptions;
					n->name = (yyvsp[-2].str);
					n->def = (PGNode *) (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 19388 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 74: /* alter_table_cmd: ALTER opt_column ColId SET STORAGE ColId  */
#line 228 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetStorage;
					n->name = (yyvsp[-3].str);
					n->def = (PGNode *) makeString((yyvsp[0].str));
					(yyval.node) = (PGNode *)n;
				}
#line 19400 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 75: /* alter_table_cmd: ALTER opt_column ColId ADD_P GENERATED generated_when AS IDENTITY_P OptParenthesizedSeqOptList  */
#line 237 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					PGConstraint *c = makeNode(PGConstraint);

					c->contype = PG_CONSTR_IDENTITY;
					c->generated_when = (yyvsp[-3].ival);
					c->options = (yyvsp[0].list);
					c->location = (yylsp[-4]);

					n->subtype = PG_AT_AddIdentity;
					n->name = (yyvsp[-6].str);
					n->def = (PGNode *) c;

					(yyval.node) = (PGNode *)n;
				}
#line 19420 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 76: /* alter_table_cmd: ALTER opt_column ColId alter_identity_column_option_list  */
#line 254 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetIdentity;
					n->name = (yyvsp[-1].str);
					n->def = (PGNode *) (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 19432 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 77: /* alter_table_cmd: ALTER opt_column ColId DROP IDENTITY_P  */
#line 263 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = AT_DropIdentity;
					n->name = (yyvsp[-2].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 19444 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 78: /* alter_table_cmd: ALTER opt_column ColId DROP IDENTITY_P IF_P EXISTS  */
#line 272 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = AT_DropIdentity;
					n->name = (yyvsp[-4].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 19456 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 79: /* alter_table_cmd: DROP opt_column IF_P EXISTS ColId opt_drop_behavior  */
#line 281 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_DropColumn;
					n->name = (yyvsp[-1].str);
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 19469 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 80: /* alter_table_cmd: DROP opt_column ColId opt_drop_behavior  */
#line 291 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_DropColumn;
					n->name = (yyvsp[-1].str);
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 19482 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 81: /* alter_table_cmd: ALTER opt_column ColId opt_set_data TYPE_P Typename opt_collate_clause alter_using  */
#line 304 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					PGColumnDef *def = makeNode(PGColumnDef);
					n->subtype = PG_AT_AlterColumnType;
					n->name = (yyvsp[-5].str);
					n->def = (PGNode *) def;
					/* We only use these fields of the PGColumnDef node */
					def->typeName = (yyvsp[-2].typnam);
					def->collClause = (PGCollateClause *) (yyvsp[-1].node);
					def->raw_default = (yyvsp[0].node);
					def->location = (yylsp[-5]);
					(yyval.node) = (PGNode *)n;
				}
#line 19500 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 82: /* alter_table_cmd: ALTER opt_column ColId alter_generic_options  */
#line 319 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AlterColumnGenericOptions;
					n->name = (yyvsp[-1].str);
					n->def = (PGNode *) (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 19512 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 83: /* alter_table_cmd: ADD_P TableConstraint  */
#line 328 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AddConstraint;
					n->def = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 19523 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 84: /* alter_table_cmd: ALTER CONSTRAINT name ConstraintAttributeSpec  */
#line 336 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					PGConstraint *c = makeNode(PGConstraint);
					n->subtype = PG_AT_AlterConstraint;
					n->def = (PGNode *) c;
					c->contype = PG_CONSTR_FOREIGN; /* others not supported, yet */
					c->conname = (yyvsp[-1].str);
					processCASbits((yyvsp[0].ival), (yylsp[0]), "ALTER CONSTRAINT statement",
									&c->deferrable,
									&c->initdeferred,
									NULL, NULL, yyscanner);
					(yyval.node) = (PGNode *)n;
				}
#line 19541 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 85: /* alter_table_cmd: VALIDATE CONSTRAINT name  */
#line 351 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_ValidateConstraint;
					n->name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 19552 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 86: /* alter_table_cmd: DROP CONSTRAINT IF_P EXISTS name opt_drop_behavior  */
#line 359 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_DropConstraint;
					n->name = (yyvsp[-1].str);
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 19565 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 87: /* alter_table_cmd: DROP CONSTRAINT name opt_drop_behavior  */
#line 369 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_DropConstraint;
					n->name = (yyvsp[-1].str);
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 19578 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 88: /* alter_table_cmd: SET LOGGED  */
#line 379 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetLogged;
					(yyval.node) = (PGNode *)n;
				}
#line 19588 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 89: /* alter_table_cmd: SET UNLOGGED  */
#line 386 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetUnLogged;
					(yyval.node) = (PGNode *)n;
				}
#line 19598 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 90: /* alter_table_cmd: SET reloptions  */
#line 393 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetRelOptions;
					n->def = (PGNode *)(yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 19609 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 91: /* alter_table_cmd: RESET reloptions  */
#line 401 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_ResetRelOptions;
					n->def = (PGNode *)(yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 19620 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 92: /* alter_table_cmd: alter_generic_options  */
#line 408 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_GenericOptions;
					n->def = (PGNode *)(yyvsp[0].list);
					(yyval.node) = (PGNode *) n;
				}
#line 19631 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 93: /* alter_using: USING a_expr  */
#line 418 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                { (yyval.node) = (yyvsp[0].node); }
#line 19637 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 94: /* alter_using: %empty  */
#line 419 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                { (yyval.node) = NULL; }
#line 19643 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 95: /* alter_generic_option_elem: generic_option_elem  */
#line 425 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = (yyvsp[0].defelt);
				}
#line 19651 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 96: /* alter_generic_option_elem: SET generic_option_elem  */
#line 429 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = (yyvsp[0].defelt);
					(yyval.defelt)->defaction = PG_DEFELEM_SET;
				}
#line 19660 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 97: /* alter_generic_option_elem: ADD_P generic_option_elem  */
#line 434 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = (yyvsp[0].defelt);
					(yyval.defelt)->defaction = PG_DEFELEM_ADD;
				}
#line 19669 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 98: /* alter_generic_option_elem: DROP generic_option_name  */
#line 439 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = makeDefElemExtended(NULL, (yyvsp[0].str), NULL, DEFELEM_DROP, (yylsp[0]));
				}
#line 19677 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 99: /* alter_table_cmds: alter_table_cmd  */
#line 446 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 19683 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 100: /* alter_table_cmds: alter_table_cmds ',' alter_table_cmd  */
#line 447 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 19689 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 101: /* alter_generic_options: OPTIONS '(' alter_generic_option_list ')'  */
#line 452 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 19695 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 102: /* opt_set_data: SET DATA_P  */
#line 456 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                                { (yyval.ival) = 1; }
#line 19701 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 103: /* opt_set_data: SET  */
#line 457 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                                                { (yyval.ival) = 0; }
#line 19707 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 104: /* opt_set_data: %empty  */
#line 458 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                                                { (yyval.ival) = 0; }
#line 19713 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 105: /* DeallocateStmt: DEALLOCATE name  */
#line 8 "third_party/libpg_query/grammar/statements/deallocate.y"
                                        {
						PGDeallocateStmt *n = makeNode(PGDeallocateStmt);
						n->name = (yyvsp[0].str);
						(yyval.node) = (PGNode *) n;
					}
#line 19723 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 106: /* DeallocateStmt: DEALLOCATE PREPARE name  */
#line 14 "third_party/libpg_query/grammar/statements/deallocate.y"
                                        {
						PGDeallocateStmt *n = makeNode(PGDeallocateStmt);
						n->name = (yyvsp[0].str);
						(yyval.node) = (PGNode *) n;
					}
#line 19733 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 107: /* DeallocateStmt: DEALLOCATE ALL  */
#line 20 "third_party/libpg_query/grammar/statements/deallocate.y"
                                        {
						PGDeallocateStmt *n = makeNode(PGDeallocateStmt);
						n->name = NULL;
						(yyval.node) = (PGNode *) n;
					}
#line 19743 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 108: /* DeallocateStmt: DEALLOCATE PREPARE ALL  */
#line 26 "third_party/libpg_query/grammar/statements/deallocate.y"
                                        {
						PGDeallocateStmt *n = makeNode(PGDeallocateStmt);
						n->name = NULL;
						(yyval.node) = (PGNode *) n;
					}
#line 19753 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 109: /* qualified_name: ColIdOrString  */
#line 10 "third_party/libpg_query/grammar/statements/common.y"
                                {
					(yyval.range) = makeRangeVar(NULL, (yyvsp[0].str), (yylsp[0]));
				}
#line 19761 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 110: /* qualified_name: ColId indirection  */
#line 14 "third_party/libpg_query/grammar/statements/common.y"
                                {
					check_qualified_name((yyvsp[0].list), yyscanner);
					(yyval.range) = makeRangeVar(NULL, NULL, (yylsp[-1]));
					switch (list_length((yyvsp[0].list)))
					{
						case 1:
							(yyval.range)->catalogname = NULL;
							(yyval.range)->schemaname = (yyvsp[-1].str);
							(yyval.range)->relname = strVal(linitial((yyvsp[0].list)));
							break;
						case 2:
							(yyval.range)->catalogname = (yyvsp[-1].str);
							(yyval.range)->schemaname = strVal(linitial((yyvsp[0].list)));
							(yyval.range)->relname = strVal(lsecond((yyvsp[0].list)));
							break;
						case 3:
						default:
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("improper qualified name (too many dotted names): %s",
											NameListToString(lcons(makeString((yyvsp[-1].str)), (yyvsp[0].list)))),
									 parser_errposition((yylsp[-1]))));
							break;
					}
				}
#line 19791 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 111: /* ColId: IDENT  */
#line 44 "third_party/libpg_query/grammar/statements/common.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 19797 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 112: /* ColId: unreserved_keyword  */
#line 45 "third_party/libpg_query/grammar/statements/common.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 19803 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 113: /* ColId: col_name_keyword  */
#line 46 "third_party/libpg_query/grammar/statements/common.y"
                                                                                        { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 19809 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 114: /* ColIdOrString: ColId  */
#line 50 "third_party/libpg_query/grammar/statements/common.y"
                                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 19815 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 115: /* ColIdOrString: SCONST  */
#line 51 "third_party/libpg_query/grammar/statements/common.y"
                                                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 19821 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 116: /* Sconst: SCONST  */
#line 55 "third_party/libpg_query/grammar/statements/common.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 19827 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 117: /* indirection: indirection_el  */
#line 59 "third_party/libpg_query/grammar/statements/common.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 19833 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 118: /* indirection: indirection indirection_el  */
#line 60 "third_party/libpg_query/grammar/statements/common.y"
                                                                        { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 19839 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 119: /* indirection_el: '.' attr_name  */
#line 65 "third_party/libpg_query/grammar/statements/common.y"
                                {
					(yyval.node) = (PGNode *) makeString((yyvsp[0].str));
				}
#line 19847 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 120: /* attr_name: ColLabel  */
#line 70 "third_party/libpg_query/grammar/statements/common.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 19853 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 121: /* ColLabel: IDENT  */
#line 75 "third_party/libpg_query/grammar/statements/common.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 19859 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 122: /* ColLabel: other_keyword  */
#line 76 "third_party/libpg_query/grammar/statements/common.y"
                                                                                        { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 19865 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 123: /* ColLabel: unreserved_keyword  */
#line 77 "third_party/libpg_query/grammar/statements/common.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 19871 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 124: /* ColLabel: reserved_keyword  */
#line 78 "third_party/libpg_query/grammar/statements/common.y"
                                                                                        { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 19877 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 125: /* RenameStmt: ALTER SCHEMA name RENAME TO name  */
#line 7 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_SCHEMA;
					n->subname = (yyvsp[-3].str);
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 19890 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 126: /* RenameStmt: ALTER TABLE relation_expr RENAME TO name  */
#line 16 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 19904 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 127: /* RenameStmt: ALTER TABLE IF_P EXISTS relation_expr RENAME TO name  */
#line 26 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 19918 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 128: /* RenameStmt: ALTER SEQUENCE qualified_name RENAME TO name  */
#line 36 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_SEQUENCE;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 19932 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 129: /* RenameStmt: ALTER SEQUENCE IF_P EXISTS qualified_name RENAME TO name  */
#line 46 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_SEQUENCE;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 19946 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 130: /* RenameStmt: ALTER VIEW qualified_name RENAME TO name  */
#line 56 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_VIEW;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 19960 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 131: /* RenameStmt: ALTER VIEW IF_P EXISTS qualified_name RENAME TO name  */
#line 66 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_VIEW;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 19974 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 132: /* RenameStmt: ALTER INDEX qualified_name RENAME TO name  */
#line 76 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_INDEX;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 19988 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 133: /* RenameStmt: ALTER INDEX IF_P EXISTS qualified_name RENAME TO name  */
#line 86 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_INDEX;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 20002 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 134: /* RenameStmt: ALTER TABLE relation_expr RENAME opt_column name TO name  */
#line 96 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_COLUMN;
					n->relationType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-5].range);
					n->subname = (yyvsp[-2].str);
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 20017 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 135: /* RenameStmt: ALTER TABLE IF_P EXISTS relation_expr RENAME opt_column name TO name  */
#line 107 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_COLUMN;
					n->relationType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-5].range);
					n->subname = (yyvsp[-2].str);
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 20032 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 136: /* RenameStmt: ALTER TABLE relation_expr RENAME CONSTRAINT name TO name  */
#line 118 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_TABCONSTRAINT;
					n->relation = (yyvsp[-5].range);
					n->subname = (yyvsp[-2].str);
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 20046 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 137: /* RenameStmt: ALTER TABLE IF_P EXISTS relation_expr RENAME CONSTRAINT name TO name  */
#line 128 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_TABCONSTRAINT;
					n->relation = (yyvsp[-5].range);
					n->subname = (yyvsp[-2].str);
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 20060 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 138: /* opt_column: COLUMN  */
#line 140 "third_party/libpg_query/grammar/statements/rename.y"
                                                                                        { (yyval.ival) = COLUMN; }
#line 20066 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 139: /* opt_column: %empty  */
#line 141 "third_party/libpg_query/grammar/statements/rename.y"
                                                                                                { (yyval.ival) = 0; }
#line 20072 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 140: /* InsertStmt: opt_with_clause INSERT opt_or_action INTO insert_target opt_by_name_or_position insert_rest opt_on_conflict returning_clause  */
#line 11 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyvsp[-2].istmt)->relation = (yyvsp[-4].range);
					(yyvsp[-2].istmt)->onConflictAlias = (yyvsp[-6].onconflictshorthand);
					(yyvsp[-2].istmt)->onConflictClause = (yyvsp[-1].onconflict);
					(yyvsp[-2].istmt)->returningList = (yyvsp[0].list);
					(yyvsp[-2].istmt)->withClause = (yyvsp[-8].with);
					(yyvsp[-2].istmt)->insert_column_order = (yyvsp[-3].bynameorposition);
					(yyval.node) = (PGNode *) (yyvsp[-2].istmt);
				}
#line 20086 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 141: /* insert_rest: SelectStmt  */
#line 24 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.istmt) = makeNode(PGInsertStmt);
					(yyval.istmt)->cols = NIL;
					(yyval.istmt)->selectStmt = (yyvsp[0].node);
				}
#line 20096 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 142: /* insert_rest: OVERRIDING override_kind VALUE_P SelectStmt  */
#line 30 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.istmt) = makeNode(PGInsertStmt);
					(yyval.istmt)->cols = NIL;
					(yyval.istmt)->override = (yyvsp[-2].override);
					(yyval.istmt)->selectStmt = (yyvsp[0].node);
				}
#line 20107 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 143: /* insert_rest: '(' insert_column_list ')' SelectStmt  */
#line 37 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.istmt) = makeNode(PGInsertStmt);
					(yyval.istmt)->cols = (yyvsp[-2].list);
					(yyval.istmt)->selectStmt = (yyvsp[0].node);
				}
#line 20117 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 144: /* insert_rest: '(' insert_column_list ')' OVERRIDING override_kind VALUE_P SelectStmt  */
#line 43 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.istmt) = makeNode(PGInsertStmt);
					(yyval.istmt)->cols = (yyvsp[-5].list);
					(yyval.istmt)->override = (yyvsp[-2].override);
					(yyval.istmt)->selectStmt = (yyvsp[0].node);
				}
#line 20128 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 145: /* insert_rest: DEFAULT VALUES  */
#line 50 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.istmt) = makeNode(PGInsertStmt);
					(yyval.istmt)->cols = NIL;
					(yyval.istmt)->selectStmt = NULL;
				}
#line 20138 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 146: /* insert_target: qualified_name  */
#line 60 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.range) = (yyvsp[0].range);
				}
#line 20146 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 147: /* insert_target: qualified_name AS ColId  */
#line 64 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyvsp[-2].range)->alias = makeAlias((yyvsp[0].str), NIL);
					(yyval.range) = (yyvsp[-2].range);
				}
#line 20155 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 148: /* opt_by_name_or_position: BY NAME_P  */
#line 71 "third_party/libpg_query/grammar/statements/insert.y"
                                                        { (yyval.bynameorposition) = PG_INSERT_BY_NAME; }
#line 20161 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 149: /* opt_by_name_or_position: BY POSITION  */
#line 72 "third_party/libpg_query/grammar/statements/insert.y"
                                                { (yyval.bynameorposition) = PG_INSERT_BY_POSITION; }
#line 20167 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 150: /* opt_by_name_or_position: %empty  */
#line 73 "third_party/libpg_query/grammar/statements/insert.y"
                                                { (yyval.bynameorposition) = PG_INSERT_BY_POSITION; }
#line 20173 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 151: /* opt_conf_expr: '(' index_params ')' where_clause  */
#line 78 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.infer) = makeNode(PGInferClause);
					(yyval.infer)->indexElems = (yyvsp[-2].list);
					(yyval.infer)->whereClause = (yyvsp[0].node);
					(yyval.infer)->conname = NULL;
					(yyval.infer)->location = (yylsp[-3]);
				}
#line 20185 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 152: /* opt_conf_expr: ON CONSTRAINT name  */
#line 87 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.infer) = makeNode(PGInferClause);
					(yyval.infer)->indexElems = NIL;
					(yyval.infer)->whereClause = NULL;
					(yyval.infer)->conname = (yyvsp[0].str);
					(yyval.infer)->location = (yylsp[-2]);
				}
#line 20197 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 153: /* opt_conf_expr: %empty  */
#line 95 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.infer) = NULL;
				}
#line 20205 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 154: /* opt_with_clause: with_clause  */
#line 102 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                        { (yyval.with) = (yyvsp[0].with); }
#line 20211 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 155: /* opt_with_clause: %empty  */
#line 103 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                        { (yyval.with) = NULL; }
#line 20217 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 156: /* insert_column_item: ColId opt_indirection  */
#line 109 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = (yyvsp[-1].str);
					(yyval.target)->indirection = check_indirection((yyvsp[0].list), yyscanner);
					(yyval.target)->val = NULL;
					(yyval.target)->location = (yylsp[-1]);
				}
#line 20229 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 157: /* set_clause: set_target '=' a_expr  */
#line 121 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyvsp[-2].target)->val = (PGNode *) (yyvsp[0].node);
					(yyval.list) = list_make1((yyvsp[-2].target));
				}
#line 20238 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 158: /* set_clause: '(' set_target_list ')' '=' a_expr  */
#line 126 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					int ncolumns = list_length((yyvsp[-3].list));
					int i = 1;
					PGListCell *col_cell;

					/* Create a PGMultiAssignRef source for each target */
					foreach(col_cell, (yyvsp[-3].list))
					{
						PGResTarget *res_col = (PGResTarget *) lfirst(col_cell);
						PGMultiAssignRef *r = makeNode(PGMultiAssignRef);

						r->source = (PGNode *) (yyvsp[0].node);
						r->colno = i;
						r->ncolumns = ncolumns;
						res_col->val = (PGNode *) r;
						i++;
					}

					(yyval.list) = (yyvsp[-3].list);
				}
#line 20263 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 159: /* opt_or_action: OR REPLACE  */
#line 151 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.onconflictshorthand) = PG_ONCONFLICT_ALIAS_REPLACE;
				}
#line 20271 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 160: /* opt_or_action: OR IGNORE_P  */
#line 156 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.onconflictshorthand) = PG_ONCONFLICT_ALIAS_IGNORE;
				}
#line 20279 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 161: /* opt_or_action: %empty  */
#line 160 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.onconflictshorthand) = PG_ONCONFLICT_ALIAS_NONE;
				}
#line 20287 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 162: /* opt_on_conflict: ON CONFLICT opt_conf_expr DO UPDATE SET set_clause_list_opt_comma where_clause  */
#line 167 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.onconflict) = makeNode(PGOnConflictClause);
					(yyval.onconflict)->action = PG_ONCONFLICT_UPDATE;
					(yyval.onconflict)->infer = (yyvsp[-5].infer);
					(yyval.onconflict)->targetList = (yyvsp[-1].list);
					(yyval.onconflict)->whereClause = (yyvsp[0].node);
					(yyval.onconflict)->location = (yylsp[-7]);
				}
#line 20300 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 163: /* opt_on_conflict: ON CONFLICT opt_conf_expr DO NOTHING  */
#line 177 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.onconflict) = makeNode(PGOnConflictClause);
					(yyval.onconflict)->action = PG_ONCONFLICT_NOTHING;
					(yyval.onconflict)->infer = (yyvsp[-2].infer);
					(yyval.onconflict)->targetList = NIL;
					(yyval.onconflict)->whereClause = NULL;
					(yyval.onconflict)->location = (yylsp[-4]);
				}
#line 20313 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 164: /* opt_on_conflict: %empty  */
#line 186 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.onconflict) = NULL;
				}
#line 20321 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 165: /* index_elem: ColId opt_collate opt_class opt_asc_desc opt_nulls_order  */
#line 193 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.ielem) = makeNode(PGIndexElem);
					(yyval.ielem)->name = (yyvsp[-4].str);
					(yyval.ielem)->expr = NULL;
					(yyval.ielem)->indexcolname = NULL;
					(yyval.ielem)->collation = (yyvsp[-3].list);
					(yyval.ielem)->opclass = (yyvsp[-2].list);
					(yyval.ielem)->ordering = (yyvsp[-1].sortorder);
					(yyval.ielem)->nulls_ordering = (yyvsp[0].nullorder);
				}
#line 20336 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 166: /* index_elem: func_expr_windowless opt_collate opt_class opt_asc_desc opt_nulls_order  */
#line 204 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.ielem) = makeNode(PGIndexElem);
					(yyval.ielem)->name = NULL;
					(yyval.ielem)->expr = (yyvsp[-4].node);
					(yyval.ielem)->indexcolname = NULL;
					(yyval.ielem)->collation = (yyvsp[-3].list);
					(yyval.ielem)->opclass = (yyvsp[-2].list);
					(yyval.ielem)->ordering = (yyvsp[-1].sortorder);
					(yyval.ielem)->nulls_ordering = (yyvsp[0].nullorder);
				}
#line 20351 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 167: /* index_elem: '(' a_expr ')' opt_collate opt_class opt_asc_desc opt_nulls_order  */
#line 215 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.ielem) = makeNode(PGIndexElem);
					(yyval.ielem)->name = NULL;
					(yyval.ielem)->expr = (yyvsp[-5].node);
					(yyval.ielem)->indexcolname = NULL;
					(yyval.ielem)->collation = (yyvsp[-3].list);
					(yyval.ielem)->opclass = (yyvsp[-2].list);
					(yyval.ielem)->ordering = (yyvsp[-1].sortorder);
					(yyval.ielem)->nulls_ordering = (yyvsp[0].nullorder);
				}
#line 20366 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 168: /* returning_clause: RETURNING target_list  */
#line 229 "third_party/libpg_query/grammar/statements/insert.y"
                                                        { (yyval.list) = (yyvsp[0].list); }
#line 20372 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 169: /* returning_clause: %empty  */
#line 230 "third_party/libpg_query/grammar/statements/insert.y"
                                                                { (yyval.list) = NIL; }
#line 20378 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 170: /* override_kind: USER  */
#line 236 "third_party/libpg_query/grammar/statements/insert.y"
                                        { (yyval.override) = PG_OVERRIDING_USER_VALUE; }
#line 20384 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 171: /* override_kind: SYSTEM_P  */
#line 237 "third_party/libpg_query/grammar/statements/insert.y"
                                        { (yyval.override) = OVERRIDING_SYSTEM_VALUE; }
#line 20390 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 172: /* set_target_list: set_target  */
#line 242 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].target)); }
#line 20396 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 173: /* set_target_list: set_target_list ',' set_target  */
#line 243 "third_party/libpg_query/grammar/statements/insert.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list),(yyvsp[0].target)); }
#line 20402 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 174: /* opt_collate: COLLATE any_name  */
#line 249 "third_party/libpg_query/grammar/statements/insert.y"
                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 20408 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 175: /* opt_collate: %empty  */
#line 250 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                                { (yyval.list) = NIL; }
#line 20414 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 176: /* opt_class: any_name  */
#line 254 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 20420 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 177: /* opt_class: %empty  */
#line 255 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                                { (yyval.list) = NIL; }
#line 20426 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 178: /* insert_column_list: insert_column_item  */
#line 261 "third_party/libpg_query/grammar/statements/insert.y"
                                        { (yyval.list) = list_make1((yyvsp[0].target)); }
#line 20432 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 179: /* insert_column_list: insert_column_list ',' insert_column_item  */
#line 263 "third_party/libpg_query/grammar/statements/insert.y"
                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].target)); }
#line 20438 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 180: /* set_clause_list: set_clause  */
#line 268 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 20444 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 181: /* set_clause_list: set_clause_list ',' set_clause  */
#line 269 "third_party/libpg_query/grammar/statements/insert.y"
                                                                { (yyval.list) = list_concat((yyvsp[-2].list),(yyvsp[0].list)); }
#line 20450 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 182: /* set_clause_list_opt_comma: set_clause_list  */
#line 273 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 20456 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 183: /* set_clause_list_opt_comma: set_clause_list ','  */
#line 274 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 20462 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 184: /* index_params: index_elem  */
#line 277 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                { (yyval.list) = list_make1((yyvsp[0].ielem)); }
#line 20468 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 185: /* index_params: index_params ',' index_elem  */
#line 278 "third_party/libpg_query/grammar/statements/insert.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].ielem)); }
#line 20474 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 186: /* set_target: ColId opt_indirection  */
#line 284 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = (yyvsp[-1].str);
					(yyval.target)->indirection = check_indirection((yyvsp[0].list), yyscanner);
					(yyval.target)->val = NULL;	/* upper production sets this */
					(yyval.target)->location = (yylsp[-1]);
				}
#line 20486 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 187: /* CreateTypeStmt: CREATE_P TYPE_P qualified_name AS ENUM_P select_with_parens  */
#line 8 "third_party/libpg_query/grammar/statements/create_type.y"
                                {
					PGCreateTypeStmt *n = makeNode(PGCreateTypeStmt);
					n->typeName = (yyvsp[-3].range);
					n->kind = PG_NEWTYPE_ENUM;
					n->query = (yyvsp[0].node);
					n->vals = NULL;
					(yyval.node) = (PGNode *)n;
				}
#line 20499 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 188: /* CreateTypeStmt: CREATE_P TYPE_P qualified_name AS ENUM_P '(' opt_enum_val_list ')'  */
#line 17 "third_party/libpg_query/grammar/statements/create_type.y"
                                {
					PGCreateTypeStmt *n = makeNode(PGCreateTypeStmt);
					n->typeName = (yyvsp[-5].range);
					n->kind = PG_NEWTYPE_ENUM;
					n->vals = (yyvsp[-1].list);
					n->query = NULL;
					(yyval.node) = (PGNode *)n;
				}
#line 20512 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 189: /* CreateTypeStmt: CREATE_P TYPE_P qualified_name AS Typename  */
#line 26 "third_party/libpg_query/grammar/statements/create_type.y"
                                {
					PGCreateTypeStmt *n = makeNode(PGCreateTypeStmt);
					n->typeName = (yyvsp[-2].range);
					n->query = NULL;
					auto name = std::string(reinterpret_cast<PGValue *>((yyvsp[0].typnam)->names->tail->data.ptr_value)->val.str);
					if (name == "enum") {
						n->kind = PG_NEWTYPE_ENUM;
						n->vals = (yyvsp[0].typnam)->typmods;
					} else {
						n->kind = PG_NEWTYPE_ALIAS;
						n->ofType = (yyvsp[0].typnam);
					}
					(yyval.node) = (PGNode *)n;
				}
#line 20531 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 190: /* opt_enum_val_list: enum_val_list  */
#line 46 "third_party/libpg_query/grammar/statements/create_type.y"
                                      { (yyval.list) = (yyvsp[0].list);}
#line 20537 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 191: /* opt_enum_val_list: %empty  */
#line 47 "third_party/libpg_query/grammar/statements/create_type.y"
                                                        {(yyval.list) = NIL;}
#line 20543 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 192: /* enum_val_list: Sconst  */
#line 51 "third_party/libpg_query/grammar/statements/create_type.y"
                                {
					(yyval.list) = list_make1(makeStringConst((yyvsp[0].str), (yylsp[0])));
				}
#line 20551 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 193: /* enum_val_list: enum_val_list ',' Sconst  */
#line 55 "third_party/libpg_query/grammar/statements/create_type.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), makeStringConst((yyvsp[0].str), (yylsp[0])));
				}
#line 20559 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 194: /* PragmaStmt: PRAGMA_P ColId  */
#line 8 "third_party/libpg_query/grammar/statements/pragma.y"
                                {
					PGPragmaStmt *n = makeNode(PGPragmaStmt);
					n->kind = PG_PRAGMA_TYPE_NOTHING;
					n->name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 20570 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 195: /* PragmaStmt: PRAGMA_P ColId '=' var_list  */
#line 15 "third_party/libpg_query/grammar/statements/pragma.y"
                                {
					PGPragmaStmt *n = makeNode(PGPragmaStmt);
					n->kind = PG_PRAGMA_TYPE_ASSIGNMENT;
					n->name = (yyvsp[-2].str);
					n->args = (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 20582 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 196: /* PragmaStmt: PRAGMA_P ColId '(' func_arg_list ')'  */
#line 23 "third_party/libpg_query/grammar/statements/pragma.y"
                                {
					PGPragmaStmt *n = makeNode(PGPragmaStmt);
					n->kind = PG_PRAGMA_TYPE_CALL;
					n->name = (yyvsp[-3].str);
					n->args = (yyvsp[-1].list);
					(yyval.node) = (PGNode *)n;
				}
#line 20594 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 197: /* CreateSeqStmt: CREATE_P OptTemp SEQUENCE qualified_name OptSeqOptList  */
#line 10 "third_party/libpg_query/grammar/statements/create_sequence.y"
                                {
					PGCreateSeqStmt *n = makeNode(PGCreateSeqStmt);
					(yyvsp[-1].range)->relpersistence = (yyvsp[-3].ival);
					n->sequence = (yyvsp[-1].range);
					n->options = (yyvsp[0].list);
					n->ownerId = InvalidOid;
					n->onconflict = PG_ERROR_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 20608 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 198: /* CreateSeqStmt: CREATE_P OptTemp SEQUENCE IF_P NOT EXISTS qualified_name OptSeqOptList  */
#line 20 "third_party/libpg_query/grammar/statements/create_sequence.y"
                                {
					PGCreateSeqStmt *n = makeNode(PGCreateSeqStmt);
					(yyvsp[-1].range)->relpersistence = (yyvsp[-6].ival);
					n->sequence = (yyvsp[-1].range);
					n->options = (yyvsp[0].list);
					n->ownerId = InvalidOid;
					n->onconflict = PG_IGNORE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 20622 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 199: /* CreateSeqStmt: CREATE_P OR REPLACE OptTemp SEQUENCE qualified_name OptSeqOptList  */
#line 30 "third_party/libpg_query/grammar/statements/create_sequence.y"
                                {
					PGCreateSeqStmt *n = makeNode(PGCreateSeqStmt);
					(yyvsp[-1].range)->relpersistence = (yyvsp[-3].ival);
					n->sequence = (yyvsp[-1].range);
					n->options = (yyvsp[0].list);
					n->ownerId = InvalidOid;
					n->onconflict = PG_REPLACE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 20636 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 200: /* OptSeqOptList: SeqOptList  */
#line 42 "third_party/libpg_query/grammar/statements/create_sequence.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 20642 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 201: /* OptSeqOptList: %empty  */
#line 43 "third_party/libpg_query/grammar/statements/create_sequence.y"
                                                                                                { (yyval.list) = NIL; }
#line 20648 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 202: /* ExecuteStmt: EXECUTE name execute_param_clause  */
#line 8 "third_party/libpg_query/grammar/statements/execute.y"
                                {
					PGExecuteStmt *n = makeNode(PGExecuteStmt);
					n->name = (yyvsp[-1].str);
					n->params = (yyvsp[0].list);
					(yyval.node) = (PGNode *) n;
				}
#line 20659 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 203: /* ExecuteStmt: CREATE_P OptTemp TABLE create_as_target AS EXECUTE name execute_param_clause opt_with_data  */
#line 16 "third_party/libpg_query/grammar/statements/execute.y"
                                {
					PGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);
					PGExecuteStmt *n = makeNode(PGExecuteStmt);
					n->name = (yyvsp[-2].str);
					n->params = (yyvsp[-1].list);
					ctas->query = (PGNode *) n;
					ctas->into = (yyvsp[-5].into);
					ctas->relkind = PG_OBJECT_TABLE;
					ctas->is_select_into = false;
					ctas->onconflict = PG_ERROR_ON_CONFLICT;
					/* cram additional flags into the PGIntoClause */
					(yyvsp[-5].into)->rel->relpersistence = (yyvsp[-7].ival);
					(yyvsp[-5].into)->skipData = !((yyvsp[0].boolean));
					(yyval.node) = (PGNode *) ctas;
				}
#line 20679 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 204: /* ExecuteStmt: CREATE_P OptTemp TABLE IF_P NOT EXISTS create_as_target AS EXECUTE name execute_param_clause opt_with_data  */
#line 33 "third_party/libpg_query/grammar/statements/execute.y"
                                {
					PGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);
					PGExecuteStmt *n = makeNode(PGExecuteStmt);
					n->name = (yyvsp[-2].str);
					n->params = (yyvsp[-1].list);
					ctas->query = (PGNode *) n;
					ctas->into = (yyvsp[-5].into);
					ctas->relkind = PG_OBJECT_TABLE;
					ctas->is_select_into = false;
					ctas->onconflict = PG_IGNORE_ON_CONFLICT;
					/* cram additional flags into the PGIntoClause */
					(yyvsp[-5].into)->rel->relpersistence = (yyvsp[-10].ival);
					(yyvsp[-5].into)->skipData = !((yyvsp[0].boolean));
					(yyval.node) = (PGNode *) ctas;
				}
#line 20699 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 205: /* execute_param_clause: '(' expr_list_opt_comma ')'  */
#line 51 "third_party/libpg_query/grammar/statements/execute.y"
                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 20705 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 206: /* execute_param_clause: %empty  */
#line 52 "third_party/libpg_query/grammar/statements/execute.y"
                                                                                        { (yyval.list) = NIL; }
#line 20711 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 207: /* AlterSeqStmt: ALTER SEQUENCE qualified_name SeqOptList  */
#line 10 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					PGAlterSeqStmt *n = makeNode(PGAlterSeqStmt);
					n->sequence = (yyvsp[-1].range);
					n->options = (yyvsp[0].list);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 20723 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 208: /* AlterSeqStmt: ALTER SEQUENCE IF_P EXISTS qualified_name SeqOptList  */
#line 18 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					PGAlterSeqStmt *n = makeNode(PGAlterSeqStmt);
					n->sequence = (yyvsp[-1].range);
					n->options = (yyvsp[0].list);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 20735 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 209: /* SeqOptList: SeqOptElem  */
#line 29 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                { (yyval.list) = list_make1((yyvsp[0].defelt)); }
#line 20741 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 210: /* SeqOptList: SeqOptList SeqOptElem  */
#line 30 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].defelt)); }
#line 20747 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 211: /* opt_with: WITH  */
#line 34 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                        {}
#line 20753 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 212: /* opt_with: WITH_LA  */
#line 35 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                                {}
#line 20759 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 213: /* opt_with: %empty  */
#line 36 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                                {}
#line 20765 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 214: /* NumericOnly: FCONST  */
#line 41 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                        { (yyval.value) = makeFloat((yyvsp[0].str)); }
#line 20771 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 215: /* NumericOnly: '+' FCONST  */
#line 42 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                { (yyval.value) = makeFloat((yyvsp[0].str)); }
#line 20777 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 216: /* NumericOnly: '-' FCONST  */
#line 44 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.value) = makeFloat((yyvsp[0].str));
					doNegateFloat((yyval.value));
				}
#line 20786 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 217: /* NumericOnly: SignedIconst  */
#line 48 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                { (yyval.value) = makeInteger((yyvsp[0].ival)); }
#line 20792 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 218: /* SeqOptElem: AS SimpleTypename  */
#line 53 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("as", (PGNode *)(yyvsp[0].typnam), (yylsp[-1]));
				}
#line 20800 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 219: /* SeqOptElem: CACHE NumericOnly  */
#line 57 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("cache", (PGNode *)(yyvsp[0].value), (yylsp[-1]));
				}
#line 20808 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 220: /* SeqOptElem: CYCLE  */
#line 61 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("cycle", (PGNode *)makeInteger(true), (yylsp[0]));
				}
#line 20816 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 221: /* SeqOptElem: NO CYCLE  */
#line 65 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("cycle", (PGNode *)makeInteger(false), (yylsp[-1]));
				}
#line 20824 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 222: /* SeqOptElem: INCREMENT opt_by NumericOnly  */
#line 69 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("increment", (PGNode *)(yyvsp[0].value), (yylsp[-2]));
				}
#line 20832 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 223: /* SeqOptElem: MAXVALUE NumericOnly  */
#line 73 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("maxvalue", (PGNode *)(yyvsp[0].value), (yylsp[-1]));
				}
#line 20840 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 224: /* SeqOptElem: MINVALUE NumericOnly  */
#line 77 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("minvalue", (PGNode *)(yyvsp[0].value), (yylsp[-1]));
				}
#line 20848 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 225: /* SeqOptElem: NO MAXVALUE  */
#line 81 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("maxvalue", NULL, (yylsp[-1]));
				}
#line 20856 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 226: /* SeqOptElem: NO MINVALUE  */
#line 85 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("minvalue", NULL, (yylsp[-1]));
				}
#line 20864 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 227: /* SeqOptElem: OWNED BY any_name  */
#line 89 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("owned_by", (PGNode *)(yyvsp[0].list), (yylsp[-2]));
				}
#line 20872 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 228: /* SeqOptElem: SEQUENCE NAME_P any_name  */
#line 93 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					/* not documented, only used by pg_dump */
					(yyval.defelt) = makeDefElem("sequence_name", (PGNode *)(yyvsp[0].list), (yylsp[-2]));
				}
#line 20881 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 229: /* SeqOptElem: START opt_with NumericOnly  */
#line 98 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("start", (PGNode *)(yyvsp[0].value), (yylsp[-2]));
				}
#line 20889 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 230: /* SeqOptElem: RESTART  */
#line 102 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("restart", NULL, (yylsp[0]));
				}
#line 20897 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 231: /* SeqOptElem: RESTART opt_with NumericOnly  */
#line 106 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("restart", (PGNode *)(yyvsp[0].value), (yylsp[-2]));
				}
#line 20905 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 232: /* opt_by: BY  */
#line 112 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                {}
#line 20911 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 233: /* opt_by: %empty  */
#line 113 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                        {}
#line 20917 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 234: /* SignedIconst: Iconst  */
#line 117 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                { (yyval.ival) = (yyvsp[0].ival); }
#line 20923 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 235: /* SignedIconst: '+' Iconst  */
#line 118 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                        { (yyval.ival) = + (yyvsp[0].ival); }
#line 20929 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 236: /* SignedIconst: '-' Iconst  */
#line 119 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                        { (yyval.ival) = - (yyvsp[0].ival); }
#line 20935 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 237: /* TransactionStmt: ABORT_P opt_transaction  */
#line 3 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_ROLLBACK;
					n->options = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 20946 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 238: /* TransactionStmt: BEGIN_P opt_transaction  */
#line 10 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_BEGIN;
					(yyval.node) = (PGNode *)n;
				}
#line 20956 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 239: /* TransactionStmt: START opt_transaction  */
#line 16 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_START;
					(yyval.node) = (PGNode *)n;
				}
#line 20966 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 240: /* TransactionStmt: COMMIT opt_transaction  */
#line 22 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_COMMIT;
					n->options = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 20977 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 241: /* TransactionStmt: END_P opt_transaction  */
#line 29 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_COMMIT;
					n->options = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 20988 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 242: /* TransactionStmt: ROLLBACK opt_transaction  */
#line 36 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_ROLLBACK;
					n->options = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 20999 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 243: /* opt_transaction: WORK  */
#line 45 "third_party/libpg_query/grammar/statements/transaction.y"
                                                                                {}
#line 21005 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 244: /* opt_transaction: TRANSACTION  */
#line 46 "third_party/libpg_query/grammar/statements/transaction.y"
                                                                                        {}
#line 21011 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 245: /* opt_transaction: %empty  */
#line 47 "third_party/libpg_query/grammar/statements/transaction.y"
                                                                                                {}
#line 21017 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 246: /* UseStmt: USE_P qualified_name  */
#line 3 "third_party/libpg_query/grammar/statements/use.y"
                                {
					PGUseStmt *n = makeNode(PGUseStmt);
					n->name = (yyvsp[0].range);
					(yyval.node) = (PGNode *) n;
				}
#line 21027 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 247: /* PGQ_IDENT: IDENT  */
#line 40 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 21033 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 248: /* PGQ_IDENT: unreserved_keyword  */
#line 41 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 21039 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 249: /* PGQ_IDENT: pgq_col_name_keyword  */
#line 42 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                                        { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 21045 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 250: /* DropPropertyGraphStmt: DROP PROPERTY GRAPH qualified_name opt_drop_behavior  */
#line 51 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGDropPropertyGraphStmt *n = makeNode(PGDropPropertyGraphStmt);
				n->name = (yyvsp[-1].range);
				n->behavior = (yyvsp[0].dbehavior);
				(yyval.node) = (PGNode *)n;
			}
#line 21056 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 255: /* CreatePropertyGraphStmt: CREATE_P PROPERTY GRAPH qualified_name VertexOrNode TABLES '(' VertexTableDefinition VertexTableDefinitionList ')' EdgeOrRelationship TABLES '(' EdgeTableDefinition EdgeTableDefinitionList ')'  */
#line 79 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGCreatePropertyGraphStmt *n = makeNode(PGCreatePropertyGraphStmt);
				n->name = (yyvsp[-12].range);
				n->vertex_tables = (yyvsp[-7].list)?lappend((yyvsp[-7].list),(yyvsp[-8].node)):list_make1((yyvsp[-8].node));
				n->edge_tables = (yyvsp[-1].list)?lappend((yyvsp[-1].list),(yyvsp[-2].node)):list_make1((yyvsp[-2].node));
				(yyval.node) = (PGNode *)n;
			}
#line 21068 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 256: /* VertexTableDefinitionList: ',' VertexTableDefinition VertexTableDefinitionList  */
#line 90 "third_party/libpg_query/grammar/statements/pgq.y"
                                                { (yyval.list) = (yyvsp[0].list)?lappend((yyvsp[0].list),(yyvsp[-1].node)):list_make1((yyvsp[-1].node)); }
#line 21074 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 257: /* VertexTableDefinitionList: %empty  */
#line 92 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.list) = NULL; }
#line 21080 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 258: /* KeySpecification: '(' name_list ')'  */
#line 96 "third_party/libpg_query/grammar/statements/pgq.y"
                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 21086 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 259: /* KeyDefinition: KEY KeySpecification  */
#line 100 "third_party/libpg_query/grammar/statements/pgq.y"
                                                { (yyval.list) = (yyvsp[0].list); }
#line 21092 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 260: /* KeyReference: KeyDefinition REFERENCES  */
#line 104 "third_party/libpg_query/grammar/statements/pgq.y"
                                                { (yyval.list) = (yyvsp[-1].list); }
#line 21098 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 261: /* LabelList: PGQ_IDENT  */
#line 108 "third_party/libpg_query/grammar/statements/pgq.y"
                                    { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 21104 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 262: /* LabelList: LabelList ',' PGQ_IDENT  */
#line 109 "third_party/libpg_query/grammar/statements/pgq.y"
                                    { (yyval.list) = lappend((yyvsp[-2].list), makeString((yyvsp[0].str))); }
#line 21110 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 263: /* Discriminator: IN_P qualified_name '(' LabelList ')'  */
#line 114 "third_party/libpg_query/grammar/statements/pgq.y"
                        { 
				PGPropertyGraphTable *n = makeNode(PGPropertyGraphTable);
				n->discriminator = (yyvsp[-3].range); /* a BIGINT column with 64 bits to set detailed label membership */
				n->labels = (yyvsp[-1].list); /* there is a list of up to 64 labels */
				(yyval.node) = (PGNode*) n;
			}
#line 21121 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 264: /* Discriminator: %empty  */
#line 122 "third_party/libpg_query/grammar/statements/pgq.y"
                        { 
				PGPropertyGraphTable *n = makeNode(PGPropertyGraphTable);
				n->discriminator = NULL; /* no discriminator */
				n->labels = NULL; /* no list, just the single staring PGQ_IDENT */
				(yyval.node) = (PGNode*) n;
			}
#line 21132 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 265: /* VertexTableDefinition: QualifiednameOptionalAs PropertiesClause LABEL PGQ_IDENT Discriminator  */
#line 133 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGPropertyGraphTable *n = (PGPropertyGraphTable*) (yyvsp[0].node);
				n->table = (yyvsp[-4].list);
				n->properties = (yyvsp[-3].list);
				/* Xth label in list is set iff discriminator Xth-bit==1 */
				if (n->labels) n->labels = lappend(n->labels,makeString((yyvsp[-1].str)));
				else n->labels = list_make1(makeString((yyvsp[-1].str)));
				n->is_vertex_table = true;
				(yyval.node) = (PGNode *) n;
			}
#line 21147 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 266: /* EdgeTableDefinitionList: ',' EdgeTableDefinition EdgeTableDefinitionList  */
#line 147 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                        { (yyval.list) = (yyvsp[0].list)?lappend((yyvsp[0].list),(yyvsp[-1].node)):list_make1((yyvsp[-1].node)); }
#line 21153 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 267: /* EdgeTableDefinitionList: %empty  */
#line 149 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.list) = NULL; }
#line 21159 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 268: /* EdgeTableDefinition: QualifiednameOptionalAs SOURCE KeyReference qualified_name KeySpecification DESTINATION KeyReference qualified_name KeySpecification PropertiesClause LABEL PGQ_IDENT Discriminator  */
#line 157 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGPropertyGraphTable *n = (PGPropertyGraphTable*) (yyvsp[0].node);
				n->table = (yyvsp[-12].list);
				n->is_vertex_table = false;
				n->src_fk = (yyvsp[-10].list);
				n->src_name = (yyvsp[-9].range);
				n->src_pk = (yyvsp[-8].list);
				n->dst_fk = (yyvsp[-6].list);
				n->dst_name = (yyvsp[-5].range);
				n->dst_pk = (yyvsp[-4].list);
				n->properties = (yyvsp[-3].list);
				/* Xth label in list is set iff discriminator Xth-bit==1 */
				if (n->labels) n->labels = lappend(n->labels,makeString((yyvsp[-1].str)));
				else n->labels = list_make1(makeString((yyvsp[-1].str)));
				(yyval.node) = (PGNode *) n;
			}
#line 21180 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 271: /* IdentOptionalAs: PGQ_IDENT  */
#line 182 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                    { (yyval.list) = list_make2(makeString((yyvsp[0].str)), makeString((yyvsp[0].str))); }
#line 21186 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 272: /* IdentOptionalAs: PGQ_IDENT AS PGQ_IDENT  */
#line 184 "third_party/libpg_query/grammar/statements/pgq.y"
                                                        { (yyval.list) = list_make2(makeString((yyvsp[-2].str)), makeString((yyvsp[0].str))); }
#line 21192 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 273: /* QualifiednameOptionalAs: qualified_name  */
#line 188 "third_party/libpg_query/grammar/statements/pgq.y"
                                        { (yyval.list) = list_make2((yyvsp[0].range), makeString("")); }
#line 21198 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 274: /* QualifiednameOptionalAs: qualified_name AS PGQ_IDENT  */
#line 190 "third_party/libpg_query/grammar/statements/pgq.y"
                                        { (yyval.list) = list_make2((yyvsp[-2].range), makeString((yyvsp[0].str))); }
#line 21204 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 275: /* PropertiesList: IdentOptionalAs  */
#line 194 "third_party/libpg_query/grammar/statements/pgq.y"
                                                { (yyval.list) = list_make1((yyvsp[0].list)); }
#line 21210 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 276: /* PropertiesList: PropertiesList ',' IdentOptionalAs  */
#line 197 "third_party/libpg_query/grammar/statements/pgq.y"
                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].list)); }
#line 21216 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 277: /* ExceptOptional: EXCEPT '(' PropertiesList ')'  */
#line 202 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 21222 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 278: /* ExceptOptional: %empty  */
#line 204 "third_party/libpg_query/grammar/statements/pgq.y"
                                                        { (yyval.list) = NULL; }
#line 21228 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 279: /* PropertiesSpec: AreOptional ALL COLUMNS ExceptOptional  */
#line 209 "third_party/libpg_query/grammar/statements/pgq.y"
                        { 
				(yyval.list) = list_make1(list_make2(makeString("*"), makeString("*")));
				if ((yyvsp[0].list)) (yyval.list) = list_concat((yyval.list),(yyvsp[0].list)); 
			}
#line 21237 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 280: /* PropertiesSpec: '(' PropertiesList ')'  */
#line 214 "third_party/libpg_query/grammar/statements/pgq.y"
                                        { (yyval.list) = (yyvsp[-1].list); }
#line 21243 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 281: /* PropertiesClause: NO PROPERTIES  */
#line 218 "third_party/libpg_query/grammar/statements/pgq.y"
                                                { (yyval.list) = NULL; }
#line 21249 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 282: /* PropertiesClause: PROPERTIES PropertiesSpec  */
#line 221 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.list) = (yyvsp[0].list); }
#line 21255 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 283: /* PropertiesClause: %empty  */
#line 223 "third_party/libpg_query/grammar/statements/pgq.y"
                                                        { (yyval.list) = list_make1(list_make2(makeString("*"), makeString("*"))); }
#line 21261 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 284: /* GraphTableWhereOptional: WHERE pgq_expr  */
#line 232 "third_party/libpg_query/grammar/statements/pgq.y"
                                                { (yyval.node) = (yyvsp[0].node); }
#line 21267 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 285: /* GraphTableWhereOptional: %empty  */
#line 234 "third_party/libpg_query/grammar/statements/pgq.y"
                                                        { (yyval.node) = NULL; }
#line 21273 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 286: /* GraphTableStmt: '(' PGQ_IDENT MATCH PathPatternList KeepOptional GraphTableWhereOptional COLUMNS '(' ColumnList ')' ')' qualified_name  */
#line 240 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGMatchClause *n = makeNode(PGMatchClause);
				n->pg_name = (yyvsp[-10].str);
				n->paths = (yyvsp[-8].list);
				if ((yyvsp[-7].node)) {
					/* we massage away 'keep' functionality immediately */
					PGPathPattern *keep = (PGPathPattern*) (yyvsp[-7].node);
					PGListCell *list = list_head(n->paths);
					while(list) {
						PGPathPattern *p = (PGPathPattern*) lfirst(list);
						PGList *backup = p->path;
						*p = *keep; /* copy path spec into all paths */
						p->path = backup; /* restore */
						list = lnext(list);
					}
				}
				n->where_clause = (yyvsp[-6].node);
				n->columns = (yyvsp[-3].list);
				n->graph_table = (yyvsp[0].range);
				(yyval.node) = (PGNode *) n;
			}
#line 21299 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 287: /* ColumnSpec: target_el  */
#line 264 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.list) = list_make2(makeInteger(PG_COLUMNSPEC_EXPR), (yyvsp[0].target)); }
#line 21305 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 288: /* ColumnList: ColumnSpec  */
#line 268 "third_party/libpg_query/grammar/statements/pgq.y"
                                                        { (yyval.list) = list_make1((yyvsp[0].list)); }
#line 21311 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 289: /* ColumnList: ColumnList ',' ColumnSpec  */
#line 270 "third_party/libpg_query/grammar/statements/pgq.y"
                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].list)); }
#line 21317 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 290: /* KeepOptional: KEEP PathPrefix  */
#line 274 "third_party/libpg_query/grammar/statements/pgq.y"
                                                        { (yyval.node) = (yyvsp[0].node); }
#line 21323 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 291: /* KeepOptional: %empty  */
#line 276 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.node) = NULL; }
#line 21329 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 295: /* GroupOrGroupsOptional: GROUP_P  */
#line 284 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.ival) = 1; }
#line 21335 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 296: /* GroupOrGroupsOptional: GROUPS  */
#line 286 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.ival) = 1; }
#line 21341 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 297: /* GroupOrGroupsOptional: %empty  */
#line 288 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.ival) = 0; }
#line 21347 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 298: /* PathVariableOptional: PGQ_IDENT '='  */
#line 292 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.keyword) = (yyvsp[-1].str); }
#line 21353 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 299: /* PathVariableOptional: %empty  */
#line 294 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.keyword) = NULL;}
#line 21359 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 300: /* PathModeOptional: WALK PathOrPathsOptional  */
#line 298 "third_party/libpg_query/grammar/statements/pgq.y"
                                                { (yyval.ival) = PG_PATHMODE_WALK; }
#line 21365 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 301: /* PathModeOptional: TRAIL PathOrPathsOptional  */
#line 300 "third_party/libpg_query/grammar/statements/pgq.y"
                                                { (yyval.ival) = PG_PATHMODE_TRAIL; }
#line 21371 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 302: /* PathModeOptional: SIMPLE PathOrPathsOptional  */
#line 302 "third_party/libpg_query/grammar/statements/pgq.y"
                                                { (yyval.ival) = PG_PATHMODE_SIMPLE; }
#line 21377 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 303: /* PathModeOptional: ACYCLIC PathOrPathsOptional  */
#line 304 "third_party/libpg_query/grammar/statements/pgq.y"
                                                { (yyval.ival) = PG_PATHMODE_ACYCLIC; }
#line 21383 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 304: /* PathModeOptional: PathOrPathsOptional  */
#line 306 "third_party/libpg_query/grammar/statements/pgq.y"
                                                        { (yyval.ival) = PG_PATHMODE_WALK; }
#line 21389 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 305: /* TopKOptional: ICONST  */
#line 310 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.ival) = (yyvsp[0].ival); }
#line 21395 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 306: /* TopKOptional: %empty  */
#line 312 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.ival) = 0; }
#line 21401 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 307: /* PathPrefix: ANY SHORTEST PathModeOptional  */
#line 317 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGPathPattern *n = makeNode(PGPathPattern);
				n->path = NULL;
				n->all = false;
				n->group = false;
				n->shortest = true;
				n->mode = (PGPathMode) (yyvsp[0].ival);
				n->topk = 1;
				(yyval.node) = (PGNode*) n;
			}
#line 21416 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 308: /* PathPrefix: SHORTEST ICONST PathModeOptional GroupOrGroupsOptional  */
#line 329 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGPathPattern *n = makeNode(PGPathPattern);
				n->path = NULL;
				n->all = false;
				n->group = (yyvsp[0].ival);
				n->shortest = true;
				n->mode = (PGPathMode) (yyvsp[-1].ival);
				n->topk = (yyvsp[-2].ival);
				(yyval.node) = (PGNode*) n;
			}
#line 21431 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 309: /* PathPrefix: ALL SHORTEST PathModeOptional  */
#line 341 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGPathPattern *n = makeNode(PGPathPattern);
				n->path = NULL;
				n->all = true;
				n->group = false;
				n->shortest = true;
				n->mode = (PGPathMode) (yyvsp[0].ival);
				n->topk = 0;
				(yyval.node) = (PGNode*) n;
			}
#line 21446 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 310: /* PathPrefix: ALL PathModeOptional  */
#line 353 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGPathPattern *n = makeNode(PGPathPattern);
				n->path = NULL;
				n->all = true;
				n->group = false;
				n->shortest = false;
				n->mode = (PGPathMode) (yyvsp[0].ival);
				n->topk = 0;
				(yyval.node) = (PGNode*) n;
			}
#line 21461 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 311: /* PathPrefix: ANY TopKOptional PathModeOptional  */
#line 365 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGPathPattern *n = makeNode(PGPathPattern);
				n->path = NULL;
				n->all = false;
				n->group = false;
				n->shortest = false;
				n->mode = (PGPathMode) (yyvsp[0].ival);
				n->topk = (yyvsp[-1].ival);
				(yyval.node) = (PGNode*) n;
			}
#line 21476 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 312: /* PathPrefix: %empty  */
#line 377 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGPathPattern *n = makeNode(PGPathPattern);
				n->path = NULL;
				n->all = true;
				n->group = false;
				n->shortest = false;
				n->mode = PG_PATHMODE_WALK;
				n->topk = 0;
				(yyval.node) = (PGNode*) n;
			}
#line 21491 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 313: /* PathPatternList: PathPattern  */
#line 391 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 21497 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 314: /* PathPatternList: PathPatternList ',' PathPattern  */
#line 394 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 21503 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 315: /* PathPattern: PathVariableOptional PathPrefix PathConcatenation  */
#line 399 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGPathPattern *n = (PGPathPattern*) (yyvsp[-1].node);
				PGList *l = (PGList *) (yyvsp[0].list);
				PGSubPath *p = (PGSubPath *) lfirst(list_head(l));

				(yyval.node) = (PGNode*) n;
				if ((yyvsp[-2].keyword) == NULL) {
					n->path = (yyvsp[0].list);
				} else if (list_length(l)==1 && p->type==T_PGSubPath && !p->path_var)  {
					p->path_var = (yyvsp[-2].keyword);
					(yyval.node) = (PGNode*) p;
				} else {
					/* generate a named subpath because of the variable */
					p = makeNode(PGSubPath);
					p->mode = PG_PATHMODE_NONE;
					p->lower = p->upper = p->single_bind = 1;
					p->path_var = (yyvsp[-2].keyword);
					p->path = (yyvsp[0].list);
					n->path = list_make1(p);
				}
			}
#line 21529 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 316: /* PatternUnion: '|'  */
#line 423 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                        { (yyval.ival) = 0; }
#line 21535 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 317: /* PatternUnion: '|' '+' '|'  */
#line 425 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.ival) = 1; }
#line 21541 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 318: /* KleeneQuantifierOptional: ICONST  */
#line 429 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.ival) = (yyvsp[0].ival); }
#line 21547 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 319: /* KleeneQuantifierOptional: %empty  */
#line 431 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.ival) = -1; }
#line 21553 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 320: /* KleeneOptional: '*'  */
#line 437 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGSubPath *n = makeNode(PGSubPath);
				n->single_bind = 0;
				n->lower = 0;
				n->upper = (1<<30);
				(yyval.node) = (PGNode*) n;
			}
#line 21565 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 321: /* KleeneOptional: '+'  */
#line 446 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGSubPath *n = makeNode(PGSubPath);
				n->single_bind = 0;
				n->lower = 1;
				n->upper = (1<<30);
				(yyval.node) = (PGNode*) n;
			}
#line 21577 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 322: /* KleeneOptional: '?'  */
#line 455 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGSubPath *n = makeNode(PGSubPath);
				n->single_bind = 1;
				n->lower = 0;
				n->upper = 1;
				(yyval.node) = (PGNode*) n;
			}
#line 21589 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 323: /* KleeneOptional: '{' KleeneQuantifierOptional ',' KleeneQuantifierOptional '}'  */
#line 464 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGSubPath *n = makeNode(PGSubPath);
				n->single_bind = 0;
				n->lower = ((yyvsp[-3].ival)>=0)?(yyvsp[-3].ival):0;
				n->upper = ((yyvsp[-1].ival)>=0)?(yyvsp[-1].ival):(1<<30);
				(yyval.node) = (PGNode*) n;
			}
#line 21601 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 324: /* KleeneOptional: %empty  */
#line 473 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGSubPath *n = makeNode(PGSubPath);
				n->single_bind = 1;
				n->lower = 1;
				n->upper = 1;
				(yyval.node) = (PGNode*) n;
			}
#line 21613 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 325: /* CostNum: ICONST  */
#line 483 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.ival) = (yyvsp[0].ival); }
#line 21619 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 326: /* CostNum: FCONST  */
#line 485 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.ival) = atof((yyvsp[0].str)); }
#line 21625 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 327: /* CostDefault: DEFAULT CostNum  */
#line 489 "third_party/libpg_query/grammar/statements/pgq.y"
                                                        { (yyval.ival) = (yyvsp[0].ival); }
#line 21631 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 328: /* CostDefault: %empty  */
#line 491 "third_party/libpg_query/grammar/statements/pgq.y"
                                                        { (yyval.ival) = NULL; }
#line 21637 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 329: /* CostOptional: COST b_expr CostDefault  */
#line 496 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGPathInfo *n = makeNode(PGPathInfo);
				PGAConst *d = (PGAConst*) (yyvsp[0].ival);
				n->cost_expr = (yyvsp[-1].node);
				n->default_value = d?((d->val.type == T_PGInteger)?
					((double) d->val.val.ival):strtod(d->val.val.str,NULL)):1;
				(yyval.node) = (PGNode*) n;
			}
#line 21650 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 330: /* CostOptional: %empty  */
#line 506 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGPathInfo *n = makeNode(PGPathInfo);
				n->cost_expr = NULL;
				n->default_value = 1;
				(yyval.node) = (PGNode*) n;
			}
#line 21661 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 331: /* SubPath: PathVariableOptional PathModeOptional PathConcatenation GraphTableWhereOptional CostOptional  */
#line 516 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGPathInfo *n = (PGPathInfo*) (yyvsp[0].node);
				n->var_name = (yyvsp[-4].keyword);
				n->mode = (PGPathMode) (yyvsp[-3].ival);
				n->path = (yyvsp[-2].list);
				n->where_clause = (yyvsp[-1].node);
				(yyval.node) = (PGNode*) n;
			}
#line 21674 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 332: /* EnclosedSubPath: '[' SubPath ']' KleeneOptional  */
#line 528 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGSubPath *p = (PGSubPath*) (yyvsp[0].node);
				p->path = list_make1((yyvsp[-2].node));
				(yyval.node) = (PGNode*) p;
			}
#line 21684 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 333: /* PathElement: VertexPattern  */
#line 536 "third_party/libpg_query/grammar/statements/pgq.y"
                                                        { (yyval.list) = (yyvsp[0].list); }
#line 21690 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 334: /* PathElement: EdgePattern  */
#line 538 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.list) = (yyvsp[0].list); }
#line 21696 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 335: /* PathSequence: EnclosedSubPath PathSequence  */
#line 543 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGSubPath *n = (PGSubPath*) (yyvsp[-1].node);
				PGPathInfo *i = (PGPathInfo*) n->path;
				PGList* p = (PGList*) i->path;

				if (i->var_name == NULL && i->mode <= PG_PATHMODE_WALK &&
					i->where_clause == NULL && i->cost_expr == NULL)
				{
					/* there is no need for a SubPath */
					(yyval.list) = (yyvsp[0].list)?list_concat(p,(yyvsp[0].list)):p;
				} else {
        			n->path_var = i->var_name;
					n->mode = i->mode;
					n->path = p;
					n->where_clause = i->where_clause;
					n->cost_expr = i->cost_expr;
					n->default_value = i->default_value;
					(yyval.list) = list_make1(n);
					if ((yyvsp[0].list)) (yyval.list) = list_concat((yyval.list),(yyvsp[0].list));
				}
			}
#line 21722 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 336: /* PathSequence: PathElement PathSequence  */
#line 565 "third_party/libpg_query/grammar/statements/pgq.y"
                                                { (yyval.list) = (yyvsp[-1].list)?list_concat((yyvsp[-1].list),(yyvsp[0].list)):(yyvsp[0].list); }
#line 21728 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 337: /* PathSequence: %empty  */
#line 567 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.list) = NULL; }
#line 21734 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 338: /* PathConcatenation: PathSequence  */
#line 571 "third_party/libpg_query/grammar/statements/pgq.y"
                                                        { (yyval.list) = (yyvsp[0].list); }
#line 21740 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 339: /* PathConcatenation: PathSequence PatternUnion PathSequence  */
#line 574 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGPathUnion *n = makeNode(PGPathUnion);
				n->multiset = (yyvsp[-1].ival);
				n->path1 = (yyvsp[-2].list);
				n->path2 = (yyvsp[0].list);
				(yyval.list) = list_make1(n);
			}
#line 21752 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 340: /* OrLabelExpression: LabelExpression  */
#line 584 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 21758 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 341: /* OrLabelExpression: LabelExpression '|' OrLabelExpression  */
#line 587 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGLabelTest *n = makeNode(PGLabelTest);
				n->name = "|";
				n->left = (PGLabelTest*) (yyvsp[-2].node);
				n->right = (PGLabelTest*) (yyvsp[0].node);
				(yyval.node) = (PGNode*) n;
			}
#line 21770 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 342: /* AndLabelExpression: LabelExpression  */
#line 597 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 21776 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 343: /* AndLabelExpression: LabelExpression '&' AndLabelExpression  */
#line 600 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGLabelTest *n = makeNode(PGLabelTest);
				n->name = "|";
				n->left = (PGLabelTest*) (yyvsp[-2].node);
				n->right = (PGLabelTest*) (yyvsp[0].node);
				(yyval.node) = (PGNode*) n;
			}
#line 21788 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 344: /* ComposedLabelExpression: LabelExpression  */
#line 610 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 21794 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 345: /* ComposedLabelExpression: LabelExpression '|' OrLabelExpression  */
#line 613 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGLabelTest *n = makeNode(PGLabelTest);
				n->name = "|";
				n->left = (PGLabelTest*) (yyvsp[-2].node);
				n->right = (PGLabelTest*) (yyvsp[0].node);
				(yyval.node) = (PGNode*) n;
			}
#line 21806 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 346: /* ComposedLabelExpression: LabelExpression '&' AndLabelExpression  */
#line 622 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGLabelTest *n = makeNode(PGLabelTest);
				n->name = "&";
				n->left = (PGLabelTest*) (yyvsp[-2].node);
				n->right = (PGLabelTest*) (yyvsp[0].node);
				(yyval.node) = (PGNode*) n;
			}
#line 21818 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 347: /* LabelExpression: PGQ_IDENT  */
#line 633 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGLabelTest *n = makeNode(PGLabelTest);
				n->name = (yyvsp[0].str);
				n->left = n->right = NULL;
				(yyval.node) = (PGNode*) n;
			}
#line 21829 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 348: /* LabelExpression: '!' LabelExpression  */
#line 641 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGLabelTest *n = makeNode(PGLabelTest);
				n->name = "!";
				n->left = (PGLabelTest*) (yyvsp[0].node);
				n->right = NULL;
				(yyval.node) = (PGNode*) n;
			}
#line 21841 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 349: /* LabelExpression: '(' ComposedLabelExpression ')'  */
#line 649 "third_party/libpg_query/grammar/statements/pgq.y"
                                                { (yyval.node) = (yyvsp[-1].node); }
#line 21847 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 350: /* LabelExpressionOptional: IsOrColon LabelExpression  */
#line 653 "third_party/libpg_query/grammar/statements/pgq.y"
                                                { (yyval.node) = (yyvsp[0].node); }
#line 21853 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 351: /* LabelExpressionOptional: %empty  */
#line 655 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.node) = NULL; }
#line 21859 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 354: /* ArrowRight: '-'  */
#line 667 "third_party/libpg_query/grammar/statements/pgq.y"
                                                { (yyval.str) = "-"; }
#line 21865 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 355: /* ArrowRight: '-' '>'  */
#line 669 "third_party/libpg_query/grammar/statements/pgq.y"
                                                { (yyval.str) = "->"; }
#line 21871 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 356: /* ArrowRight: LAMBDA_ARROW  */
#line 671 "third_party/libpg_query/grammar/statements/pgq.y"
                                                        { (yyval.str) = "->"; }
#line 21877 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 357: /* ArrowLeftBracket: '-' '['  */
#line 675 "third_party/libpg_query/grammar/statements/pgq.y"
                                                { (yyval.str) = "-"; }
#line 21883 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 358: /* ArrowLeftBracket: '<' '-' '['  */
#line 677 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.str) = "<-"; }
#line 21889 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 359: /* AbbreviatedEdge: '<' ArrowRight  */
#line 682 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				char* dir = (yyvsp[0].str);
				(yyval.ival) = (dir[1] == '>')?PG_MATCH_EDGE_LEFT_RIGHT:PG_MATCH_EDGE_LEFT;
			}
#line 21898 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 360: /* AbbreviatedEdge: ArrowRight  */
#line 688 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				char* dir = (yyvsp[0].str);
				(yyval.ival) = (dir[1] == '>')?PG_MATCH_EDGE_RIGHT:PG_MATCH_EDGE_ANY;
			}
#line 21907 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 361: /* VariableOptional: PGQ_IDENT  */
#line 695 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 21913 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 362: /* VariableOptional: %empty  */
#line 697 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.str) = NULL;}
#line 21919 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 363: /* FullElementSpec: VariableOptional LabelExpressionOptional GraphTableWhereOptional CostOptional  */
#line 702 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGPathInfo *n = (PGPathInfo*) (yyvsp[0].node);
				n->var_name = (yyvsp[-3].str);
				n->where_clause = (yyvsp[-1].node);
				n->label_expr = (PGLabelTest*) (yyvsp[-2].node);
				(yyval.node) = (PGNode*) n;
			}
#line 21931 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 364: /* EdgePattern: AbbreviatedEdge KleeneOptional  */
#line 713 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGSubPath *p = (PGSubPath*) (yyvsp[0].node);
				PGPathElement *n = makeNode(PGPathElement);
				n->label_expr = NULL;
				n->element_var = NULL;
				n->match_type = (PGMatchType) (yyvsp[-1].ival);
				(yyval.list) = list_make1(n);
				if (p->lower != 1 || !p->single_bind) {
					/* return a subpath consisting of one edge (element) */
					p->path = (yyval.list);
					p->path_var = NULL;
					(yyval.list) = list_make1(p);
				}
			}
#line 21950 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 365: /* EdgePattern: ArrowLeftBracket FullElementSpec ']' ArrowRight KleeneOptional  */
#line 729 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				char *left = (yyvsp[-4].str), *right = (yyvsp[-1].str);
				PGPathInfo* i = (PGPathInfo*) (yyvsp[-3].node);
				PGSubPath *p = (PGSubPath*) (yyvsp[0].node);
				PGPathElement *n = makeNode(PGPathElement);

				n->match_type =
					(right[1] == '>')?
						((left[0] == '<')?PG_MATCH_EDGE_LEFT_RIGHT:PG_MATCH_EDGE_RIGHT):
						((left[0] == '<')?PG_MATCH_EDGE_LEFT:PG_MATCH_EDGE_ANY);
				n->element_var = i->var_name;
				n->label_expr = i->label_expr;
				(yyval.list) = list_make1(n);
				if (i->where_clause || i->cost_expr || p->lower != 1 || !p->single_bind) {
					/* return a subpath consisting of one edge (element) */
					p->where_clause = i->where_clause;
					p->cost_expr = i->cost_expr;
					p->default_value = i->default_value;
					p->path = (yyval.list);
					p->path_var = NULL;
					(yyval.list) = list_make1(p);
				}
			}
#line 21978 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 366: /* VertexPattern: '(' FullElementSpec ')'  */
#line 756 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGPathElement *n = makeNode(PGPathElement);
				PGPathInfo* i = (PGPathInfo*) (yyvsp[-1].node);

				n->element_var = i->var_name;
				n->label_expr = i->label_expr;
				n->match_type = PG_MATCH_VERTEX;
				(yyval.list) = list_make1(n);
				if (i->where_clause || i->cost_expr) {
					PGSubPath *p = makeNode(PGSubPath);
					p->mode = PG_PATHMODE_NONE;
					p->lower = p->upper = p->single_bind = 1;
					p->where_clause = i->where_clause;
					p->cost_expr = i->cost_expr;
					p->default_value = i->default_value;
					p->path = (yyval.list);
					p->path_var = NULL;
					(yyval.list) = list_make1(p);
				}
			}
#line 22003 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 367: /* pgq_expr: c_expr  */
#line 788 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 22009 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 368: /* pgq_expr: pgq_expr TYPECAST Typename  */
#line 790 "third_party/libpg_query/grammar/statements/pgq.y"
                                        { (yyval.node) = makeTypeCast((yyvsp[-2].node), (yyvsp[0].typnam), 0, (yylsp[-1])); }
#line 22015 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 369: /* pgq_expr: pgq_expr COLLATE any_name  */
#line 792 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					PGCollateClause *n = makeNode(PGCollateClause);
					n->arg = (yyvsp[-2].node);
					n->collname = (yyvsp[0].list);
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *) n;
				}
#line 22027 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 370: /* pgq_expr: pgq_expr AT TIME ZONE pgq_expr  */
#line 800 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("timezone"),
											   list_make2((yyvsp[0].node), (yyvsp[-4].node)),
											   (yylsp[-3]));
				}
#line 22037 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 371: /* pgq_expr: '+' pgq_expr  */
#line 815 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", NULL, (yyvsp[0].node), (yylsp[-1])); }
#line 22043 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 372: /* pgq_expr: '-' pgq_expr  */
#line 817 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = doNegate((yyvsp[0].node), (yylsp[-1])); }
#line 22049 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 373: /* pgq_expr: pgq_expr '+' pgq_expr  */
#line 819 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 22055 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 374: /* pgq_expr: pgq_expr '-' pgq_expr  */
#line 821 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "-", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 22061 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 375: /* pgq_expr: pgq_expr '*' pgq_expr  */
#line 823 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "*", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 22067 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 376: /* pgq_expr: pgq_expr '/' pgq_expr  */
#line 825 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "/", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 22073 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 377: /* pgq_expr: pgq_expr '%' pgq_expr  */
#line 827 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "%", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 22079 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 378: /* pgq_expr: pgq_expr '^' pgq_expr  */
#line 829 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "^", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 22085 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 379: /* pgq_expr: pgq_expr POWER_OF pgq_expr  */
#line 831 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "**", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 22091 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 380: /* pgq_expr: pgq_expr '<' pgq_expr  */
#line 833 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 22097 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 381: /* pgq_expr: pgq_expr '>' pgq_expr  */
#line 835 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, ">", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 22103 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 382: /* pgq_expr: pgq_expr '=' pgq_expr  */
#line 837 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 22109 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 383: /* pgq_expr: pgq_expr LESS_EQUALS pgq_expr  */
#line 839 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 22115 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 384: /* pgq_expr: pgq_expr GREATER_EQUALS pgq_expr  */
#line 841 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, ">=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 22121 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 385: /* pgq_expr: pgq_expr NOT_EQUALS pgq_expr  */
#line 843 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<>", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 22127 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 386: /* pgq_expr: pgq_expr qual_Op pgq_expr  */
#line 846 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[-1].list), (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 22133 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 387: /* pgq_expr: pgq_expr AND pgq_expr  */
#line 848 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = makeAndExpr((yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 22139 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 388: /* pgq_expr: pgq_expr OR pgq_expr  */
#line 850 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = makeOrExpr((yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 22145 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 389: /* pgq_expr: NOT pgq_expr  */
#line 852 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = makeNotExpr((yyvsp[0].node), (yylsp[-1])); }
#line 22151 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 390: /* pgq_expr: NOT_LA pgq_expr  */
#line 854 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = makeNotExpr((yyvsp[0].node), (yylsp[-1])); }
#line 22157 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 391: /* pgq_expr: pgq_expr GLOB pgq_expr  */
#line 856 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_GLOB, "~~~",
												   (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
				}
#line 22166 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 392: /* pgq_expr: pgq_expr LIKE pgq_expr  */
#line 861 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_LIKE, "~~",
												   (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
				}
#line 22175 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 393: /* pgq_expr: pgq_expr LIKE pgq_expr ESCAPE pgq_expr  */
#line 866 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("like_escape"),
											   list_make3((yyvsp[-4].node), (yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-3]));
					(yyval.node) = (PGNode *) n;
				}
#line 22186 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 394: /* pgq_expr: pgq_expr NOT_LA LIKE pgq_expr  */
#line 873 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_LIKE, "!~~",
												   (yyvsp[-3].node), (yyvsp[0].node), (yylsp[-2]));
				}
#line 22195 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 395: /* pgq_expr: pgq_expr NOT_LA LIKE pgq_expr ESCAPE pgq_expr  */
#line 878 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("not_like_escape"),
											   list_make3((yyvsp[-5].node), (yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-4]));
					(yyval.node) = (PGNode *) n;
				}
#line 22206 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 396: /* pgq_expr: pgq_expr ILIKE pgq_expr  */
#line 885 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_ILIKE, "~~*",
												   (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
				}
#line 22215 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 397: /* pgq_expr: pgq_expr ILIKE pgq_expr ESCAPE pgq_expr  */
#line 890 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("ilike_escape"),
											   list_make3((yyvsp[-4].node), (yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-3]));
					(yyval.node) = (PGNode *) n;
				}
#line 22226 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 398: /* pgq_expr: pgq_expr NOT_LA ILIKE pgq_expr  */
#line 897 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_ILIKE, "!~~*",
												   (yyvsp[-3].node), (yyvsp[0].node), (yylsp[-2]));
				}
#line 22235 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 399: /* pgq_expr: pgq_expr NOT_LA ILIKE pgq_expr ESCAPE pgq_expr  */
#line 902 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("not_ilike_escape"),
											   list_make3((yyvsp[-5].node), (yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-4]));
					(yyval.node) = (PGNode *) n;
				}
#line 22246 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 400: /* pgq_expr: pgq_expr SIMILAR TO pgq_expr  */
#line 910 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
											   list_make2((yyvsp[0].node), makeNullAConst(-1)),
											   (yylsp[-2]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "~",
												   (yyvsp[-3].node), (PGNode *) n, (yylsp[-2]));
				}
#line 22258 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 401: /* pgq_expr: pgq_expr SIMILAR TO pgq_expr ESCAPE pgq_expr  */
#line 918 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
											   list_make2((yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-4]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "~",
												   (yyvsp[-5].node), (PGNode *) n, (yylsp[-4]));
				}
#line 22270 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 402: /* pgq_expr: pgq_expr NOT_LA SIMILAR TO pgq_expr  */
#line 926 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
											   list_make2((yyvsp[0].node), makeNullAConst(-1)),
											   (yylsp[-3]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "!~",
												   (yyvsp[-4].node), (PGNode *) n, (yylsp[-3]));
				}
#line 22282 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 403: /* pgq_expr: pgq_expr NOT_LA SIMILAR TO pgq_expr ESCAPE pgq_expr  */
#line 934 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
											   list_make2((yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-5]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "!~",
												   (yyvsp[-6].node), (PGNode *) n, (yylsp[-5]));
				}
#line 22294 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 404: /* pgq_expr: pgq_expr IS NULL_P  */
#line 952 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-2].node);
					n->nulltesttype = PG_IS_NULL;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 22306 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 405: /* pgq_expr: pgq_expr ISNULL  */
#line 960 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-1].node);
					n->nulltesttype = PG_IS_NULL;
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 22318 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 406: /* pgq_expr: pgq_expr IS NOT NULL_P  */
#line 968 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-3].node);
					n->nulltesttype = IS_NOT_NULL;
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)n;
				}
#line 22330 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 407: /* pgq_expr: pgq_expr NOT NULL_P  */
#line 976 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-2].node);
					n->nulltesttype = IS_NOT_NULL;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 22342 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 408: /* pgq_expr: pgq_expr NOTNULL  */
#line 984 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-1].node);
					n->nulltesttype = IS_NOT_NULL;
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 22354 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 409: /* pgq_expr: pgq_expr LAMBDA_ARROW pgq_expr  */
#line 992 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGLambdaFunction *n = makeNode(PGLambdaFunction);
				n->lhs = (yyvsp[-2].node);
				n->rhs = (yyvsp[0].node);
				n->location = (yylsp[-1]);
				(yyval.node) = (PGNode *) n;
			}
#line 22366 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 410: /* pgq_expr: pgq_expr DOUBLE_ARROW pgq_expr  */
#line 1000 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
							(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "->>", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
			}
#line 22374 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 411: /* pgq_expr: row OVERLAPS row  */
#line 1004 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					if (list_length((yyvsp[-2].list)) != 2)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("wrong number of parameters on left side of OVERLAPS expression"),
								 parser_errposition((yylsp[-2]))));
					if (list_length((yyvsp[0].list)) != 2)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("wrong number of parameters on right side of OVERLAPS expression"),
								 parser_errposition((yylsp[0]))));
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("overlaps"),
											   list_concat((yyvsp[-2].list), (yyvsp[0].list)),
											   (yylsp[-1]));
				}
#line 22394 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 412: /* pgq_expr: pgq_expr IS TRUE_P  */
#line 1020 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-2].node);
					b->booltesttype = PG_IS_TRUE;
					b->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)b;
				}
#line 22406 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 413: /* pgq_expr: pgq_expr IS NOT TRUE_P  */
#line 1028 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-3].node);
					b->booltesttype = IS_NOT_TRUE;
					b->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)b;
				}
#line 22418 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 414: /* pgq_expr: pgq_expr IS FALSE_P  */
#line 1036 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-2].node);
					b->booltesttype = IS_FALSE;
					b->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)b;
				}
#line 22430 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 415: /* pgq_expr: pgq_expr IS NOT FALSE_P  */
#line 1044 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-3].node);
					b->booltesttype = IS_NOT_FALSE;
					b->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)b;
				}
#line 22442 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 416: /* pgq_expr: pgq_expr IS UNKNOWN  */
#line 1052 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-2].node);
					b->booltesttype = IS_UNKNOWN;
					b->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)b;
				}
#line 22454 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 417: /* pgq_expr: pgq_expr IS NOT UNKNOWN  */
#line 1060 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-3].node);
					b->booltesttype = IS_NOT_UNKNOWN;
					b->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)b;
				}
#line 22466 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 418: /* pgq_expr: pgq_expr IS DISTINCT FROM pgq_expr  */
#line 1068 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_DISTINCT, "=", (yyvsp[-4].node), (yyvsp[0].node), (yylsp[-3]));
				}
#line 22474 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 419: /* pgq_expr: pgq_expr IS NOT DISTINCT FROM pgq_expr  */
#line 1072 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_DISTINCT, "=", (yyvsp[-5].node), (yyvsp[0].node), (yylsp[-4]));
				}
#line 22482 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 420: /* pgq_expr: pgq_expr IS OF '(' type_list ')'  */
#line 1076 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OF, "=", (yyvsp[-5].node), (PGNode *) (yyvsp[-1].list), (yylsp[-4]));
				}
#line 22490 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 421: /* pgq_expr: pgq_expr IS NOT OF '(' type_list ')'  */
#line 1080 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OF, "<>", (yyvsp[-6].node), (PGNode *) (yyvsp[-1].list), (yylsp[-5]));
				}
#line 22498 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 422: /* pgq_expr: pgq_expr BETWEEN opt_asymmetric b_expr AND pgq_expr  */
#line 1084 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_BETWEEN,
												   "BETWEEN",
												   (yyvsp[-5].node),
												   (PGNode *) list_make2((yyvsp[-2].node), (yyvsp[0].node)),
												   (yylsp[-4]));
				}
#line 22510 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 423: /* pgq_expr: pgq_expr NOT_LA BETWEEN opt_asymmetric b_expr AND pgq_expr  */
#line 1092 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_BETWEEN,
												   "NOT BETWEEN",
												   (yyvsp[-6].node),
												   (PGNode *) list_make2((yyvsp[-2].node), (yyvsp[0].node)),
												   (yylsp[-5]));
				}
#line 22522 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 424: /* pgq_expr: pgq_expr BETWEEN SYMMETRIC b_expr AND pgq_expr  */
#line 1100 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_BETWEEN_SYM,
												   "BETWEEN SYMMETRIC",
												   (yyvsp[-5].node),
												   (PGNode *) list_make2((yyvsp[-2].node), (yyvsp[0].node)),
												   (yylsp[-4]));
				}
#line 22534 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 425: /* pgq_expr: pgq_expr NOT_LA BETWEEN SYMMETRIC b_expr AND pgq_expr  */
#line 1108 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_BETWEEN_SYM,
												   "NOT BETWEEN SYMMETRIC",
												   (yyvsp[-6].node),
												   (PGNode *) list_make2((yyvsp[-2].node), (yyvsp[0].node)),
												   (yylsp[-5]));
				}
#line 22546 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 426: /* pgq_expr: pgq_expr IN_P in_expr  */
#line 1116 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					/* in_expr returns a PGSubLink or a list of pgq_exprs */
					if (IsA((yyvsp[0].node), PGSubLink))
					{
						/* generate foo = ANY (subquery) */
						PGSubLink *n = (PGSubLink *) (yyvsp[0].node);
						n->subLinkType = PG_ANY_SUBLINK;
						n->subLinkId = 0;
						n->testexpr = (yyvsp[-2].node);
						n->operName = NIL;		/* show it's IN not = ANY */
						n->location = (yylsp[-1]);
						(yyval.node) = (PGNode *)n;
					}
					else
					{
						/* generate scalar IN expression */
						(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_IN, "=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
					}
				}
#line 22570 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 427: /* pgq_expr: pgq_expr NOT_LA IN_P in_expr  */
#line 1136 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					/* in_expr returns a PGSubLink or a list of pgq_exprs */
					if (IsA((yyvsp[0].node), PGSubLink))
					{
						/* generate NOT (foo = ANY (subquery)) */
						/* Make an = ANY node */
						PGSubLink *n = (PGSubLink *) (yyvsp[0].node);
						n->subLinkType = PG_ANY_SUBLINK;
						n->subLinkId = 0;
						n->testexpr = (yyvsp[-3].node);
						n->operName = NIL;		/* show it's IN not = ANY */
						n->location = (yylsp[-2]);
						/* Stick a NOT on top; must have same parse location */
						(yyval.node) = makeNotExpr((PGNode *) n, (yylsp[-2]));
					}
					else
					{
						/* generate scalar NOT IN expression */
						(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_IN, "<>", (yyvsp[-3].node), (yyvsp[0].node), (yylsp[-2]));
					}
				}
#line 22596 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 428: /* CreateStmt: CREATE_P OptTemp TABLE qualified_name '(' OptTableElementList ')' OptWith OnCommitOption  */
#line 9 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGCreateStmt *n = makeNode(PGCreateStmt);
					(yyvsp[-5].range)->relpersistence = (yyvsp[-7].ival);
					n->relation = (yyvsp[-5].range);
					n->tableElts = (yyvsp[-3].list);
					n->ofTypename = NULL;
					n->constraints = NIL;
					n->options = (yyvsp[-1].list);
					n->oncommit = (yyvsp[0].oncommit);
					n->onconflict = PG_ERROR_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 22613 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 429: /* CreateStmt: CREATE_P OptTemp TABLE IF_P NOT EXISTS qualified_name '(' OptTableElementList ')' OptWith OnCommitOption  */
#line 24 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGCreateStmt *n = makeNode(PGCreateStmt);
					(yyvsp[-5].range)->relpersistence = (yyvsp[-10].ival);
					n->relation = (yyvsp[-5].range);
					n->tableElts = (yyvsp[-3].list);
					n->ofTypename = NULL;
					n->constraints = NIL;
					n->options = (yyvsp[-1].list);
					n->oncommit = (yyvsp[0].oncommit);
					n->onconflict = PG_IGNORE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 22630 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 430: /* CreateStmt: CREATE_P OR REPLACE OptTemp TABLE qualified_name '(' OptTableElementList ')' OptWith OnCommitOption  */
#line 39 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGCreateStmt *n = makeNode(PGCreateStmt);
					(yyvsp[-5].range)->relpersistence = (yyvsp[-7].ival);
					n->relation = (yyvsp[-5].range);
					n->tableElts = (yyvsp[-3].list);
					n->ofTypename = NULL;
					n->constraints = NIL;
					n->options = (yyvsp[-1].list);
					n->oncommit = (yyvsp[0].oncommit);
					n->onconflict = PG_REPLACE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 22647 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 431: /* ConstraintAttributeSpec: %empty  */
#line 56 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = 0; }
#line 22653 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 432: /* ConstraintAttributeSpec: ConstraintAttributeSpec ConstraintAttributeElem  */
#line 58 "third_party/libpg_query/grammar/statements/create.y"
                                {
					/*
					 * We must complain about conflicting options.
					 * We could, but choose not to, complain about redundant
					 * options (ie, where $2's bit is already set in $1).
					 */
					int		newspec = (yyvsp[-1].ival) | (yyvsp[0].ival);

					/* special message for this case */
					if ((newspec & (CAS_NOT_DEFERRABLE | CAS_INITIALLY_DEFERRED)) == (CAS_NOT_DEFERRABLE | CAS_INITIALLY_DEFERRED))
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("constraint declared INITIALLY DEFERRED must be DEFERRABLE"),
								 parser_errposition((yylsp[0]))));
					/* generic message for other conflicts */
					if ((newspec & (CAS_NOT_DEFERRABLE | CAS_DEFERRABLE)) == (CAS_NOT_DEFERRABLE | CAS_DEFERRABLE) ||
						(newspec & (CAS_INITIALLY_IMMEDIATE | CAS_INITIALLY_DEFERRED)) == (CAS_INITIALLY_IMMEDIATE | CAS_INITIALLY_DEFERRED))
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("conflicting constraint properties"),
								 parser_errposition((yylsp[0]))));
					(yyval.ival) = newspec;
				}
#line 22681 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 433: /* def_arg: func_type  */
#line 84 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.node) = (PGNode *)(yyvsp[0].typnam); }
#line 22687 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 434: /* def_arg: reserved_keyword  */
#line 85 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.node) = (PGNode *)makeString(pstrdup((yyvsp[0].keyword))); }
#line 22693 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 435: /* def_arg: qual_all_Op  */
#line 86 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.node) = (PGNode *)(yyvsp[0].list); }
#line 22699 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 436: /* def_arg: NumericOnly  */
#line 87 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.node) = (PGNode *)(yyvsp[0].value); }
#line 22705 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 437: /* def_arg: Sconst  */
#line 88 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.node) = (PGNode *)makeString((yyvsp[0].str)); }
#line 22711 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 438: /* def_arg: NONE  */
#line 89 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.node) = (PGNode *)makeString(pstrdup((yyvsp[0].keyword))); }
#line 22717 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 439: /* OptParenthesizedSeqOptList: '(' SeqOptList ')'  */
#line 93 "third_party/libpg_query/grammar/statements/create.y"
                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 22723 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 440: /* OptParenthesizedSeqOptList: %empty  */
#line 94 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                { (yyval.list) = NIL; }
#line 22729 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 441: /* generic_option_arg: Sconst  */
#line 99 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.node) = (PGNode *) makeString((yyvsp[0].str)); }
#line 22735 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 442: /* key_action: NO ACTION  */
#line 104 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = PG_FKCONSTR_ACTION_NOACTION; }
#line 22741 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 443: /* key_action: RESTRICT  */
#line 105 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = PG_FKCONSTR_ACTION_RESTRICT; }
#line 22747 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 444: /* key_action: CASCADE  */
#line 106 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = PG_FKCONSTR_ACTION_CASCADE; }
#line 22753 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 445: /* key_action: SET NULL_P  */
#line 107 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_FKCONSTR_ACTION_SETNULL; }
#line 22759 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 446: /* key_action: SET DEFAULT  */
#line 108 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_FKCONSTR_ACTION_SETDEFAULT; }
#line 22765 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 447: /* ColConstraint: CONSTRAINT name ColConstraintElem  */
#line 114 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = castNode(PGConstraint, (yyvsp[0].node));
					n->conname = (yyvsp[-1].str);
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *) n;
				}
#line 22776 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 448: /* ColConstraint: ColConstraintElem  */
#line 120 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 22782 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 449: /* ColConstraint: ConstraintAttr  */
#line 121 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 22788 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 450: /* ColConstraint: COLLATE any_name  */
#line 123 "third_party/libpg_query/grammar/statements/create.y"
                                {
					/*
					 * Note: the PGCollateClause is momentarily included in
					 * the list built by ColQualList, but we split it out
					 * again in SplitColQualList.
					 */
					PGCollateClause *n = makeNode(PGCollateClause);
					n->arg = NULL;
					n->collname = (yyvsp[0].list);
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *) n;
				}
#line 22805 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 451: /* ColConstraintElem: NOT NULL_P  */
#line 140 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_NOTNULL;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 22816 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 452: /* ColConstraintElem: NULL_P  */
#line 147 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_NULL;
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 22827 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 453: /* ColConstraintElem: UNIQUE opt_definition  */
#line 154 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_UNIQUE;
					n->location = (yylsp[-1]);
					n->keys = NULL;
					n->options = (yyvsp[0].list);
					n->indexname = NULL;
					(yyval.node) = (PGNode *)n;
				}
#line 22841 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 454: /* ColConstraintElem: PRIMARY KEY opt_definition  */
#line 164 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_PRIMARY;
					n->location = (yylsp[-2]);
					n->keys = NULL;
					n->options = (yyvsp[0].list);
					n->indexname = NULL;
					(yyval.node) = (PGNode *)n;
				}
#line 22855 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 455: /* ColConstraintElem: CHECK_P '(' a_expr ')' opt_no_inherit  */
#line 174 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_CHECK;
					n->location = (yylsp[-4]);
					n->is_no_inherit = (yyvsp[0].boolean);
					n->raw_expr = (yyvsp[-2].node);
					n->cooked_expr = NULL;
					n->skip_validation = false;
					n->initially_valid = true;
					(yyval.node) = (PGNode *)n;
				}
#line 22871 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 456: /* ColConstraintElem: USING COMPRESSION name  */
#line 186 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_COMPRESSION;
					n->location = (yylsp[-2]);
					n->compression_name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 22883 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 457: /* ColConstraintElem: DEFAULT b_expr  */
#line 194 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_DEFAULT;
					n->location = (yylsp[-1]);
					n->raw_expr = (yyvsp[0].node);
					n->cooked_expr = NULL;
					(yyval.node) = (PGNode *)n;
				}
#line 22896 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 458: /* ColConstraintElem: REFERENCES qualified_name opt_column_list key_match key_actions  */
#line 203 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_FOREIGN;
					n->location = (yylsp[-4]);
					n->pktable			= (yyvsp[-3].range);
					n->fk_attrs			= NIL;
					n->pk_attrs			= (yyvsp[-2].list);
					n->fk_matchtype		= (yyvsp[-1].ival);
					n->fk_upd_action	= (char) ((yyvsp[0].ival) >> 8);
					n->fk_del_action	= (char) ((yyvsp[0].ival) & 0xFF);
					n->skip_validation  = false;
					n->initially_valid  = true;
					(yyval.node) = (PGNode *)n;
				}
#line 22915 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 459: /* GeneratedColumnType: VIRTUAL  */
#line 220 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.constr) = PG_CONSTR_GENERATED_VIRTUAL; }
#line 22921 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 460: /* GeneratedColumnType: STORED  */
#line 221 "third_party/libpg_query/grammar/statements/create.y"
                                 { (yyval.constr) = PG_CONSTR_GENERATED_STORED; }
#line 22927 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 461: /* opt_GeneratedColumnType: GeneratedColumnType  */
#line 225 "third_party/libpg_query/grammar/statements/create.y"
                                            { (yyval.constr) = (yyvsp[0].constr); }
#line 22933 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 462: /* opt_GeneratedColumnType: %empty  */
#line 226 "third_party/libpg_query/grammar/statements/create.y"
                                      { (yyval.constr) = PG_CONSTR_GENERATED_VIRTUAL; }
#line 22939 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 463: /* GeneratedConstraintElem: GENERATED generated_when AS IDENTITY_P OptParenthesizedSeqOptList  */
#line 231 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_IDENTITY;
					n->generated_when = (yyvsp[-3].ival);
					n->options = (yyvsp[0].list);
					n->location = (yylsp[-4]);
					(yyval.node) = (PGNode *)n;
				}
#line 22952 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 464: /* GeneratedConstraintElem: GENERATED generated_when AS '(' a_expr ')' opt_GeneratedColumnType  */
#line 240 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = (yyvsp[0].constr);
					n->generated_when = (yyvsp[-5].ival);
					n->raw_expr = (yyvsp[-2].node);
					n->cooked_expr = NULL;
					n->location = (yylsp[-6]);

					/*
					 * Can't do this in the grammar because of shift/reduce
					 * conflicts.  (IDENTITY allows both ALWAYS and BY
					 * DEFAULT, but generated columns only allow ALWAYS.)  We
					 * can also give a more useful error message and location.
					 */
					if ((yyvsp[-5].ival) != PG_ATTRIBUTE_IDENTITY_ALWAYS)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("for a generated column, GENERATED ALWAYS must be specified"),
								 parser_errposition((yylsp[-5]))));

					(yyval.node) = (PGNode *)n;
				}
#line 22979 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 465: /* GeneratedConstraintElem: AS '(' a_expr ')' opt_GeneratedColumnType  */
#line 263 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = (yyvsp[0].constr);
					n->generated_when = PG_ATTRIBUTE_IDENTITY_ALWAYS;
					n->raw_expr = (yyvsp[-2].node);
					n->cooked_expr = NULL;
					n->location = (yylsp[-4]);
					(yyval.node) = (PGNode *)n;
				}
#line 22993 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 466: /* generic_option_elem: generic_option_name generic_option_arg  */
#line 277 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[-1].str), (yyvsp[0].node), (yylsp[-1]));
				}
#line 23001 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 467: /* key_update: ON UPDATE key_action  */
#line 283 "third_party/libpg_query/grammar/statements/create.y"
                                                { (yyval.ival) = (yyvsp[0].ival); }
#line 23007 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 468: /* key_actions: key_update  */
#line 289 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = ((yyvsp[0].ival) << 8) | (PG_FKCONSTR_ACTION_NOACTION & 0xFF); }
#line 23013 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 469: /* key_actions: key_delete  */
#line 291 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = (PG_FKCONSTR_ACTION_NOACTION << 8) | ((yyvsp[0].ival) & 0xFF); }
#line 23019 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 470: /* key_actions: key_update key_delete  */
#line 293 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = ((yyvsp[-1].ival) << 8) | ((yyvsp[0].ival) & 0xFF); }
#line 23025 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 471: /* key_actions: key_delete key_update  */
#line 295 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = ((yyvsp[0].ival) << 8) | ((yyvsp[-1].ival) & 0xFF); }
#line 23031 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 472: /* key_actions: %empty  */
#line 297 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = (PG_FKCONSTR_ACTION_NOACTION << 8) | (PG_FKCONSTR_ACTION_NOACTION & 0xFF); }
#line 23037 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 473: /* OnCommitOption: ON COMMIT DROP  */
#line 300 "third_party/libpg_query/grammar/statements/create.y"
                                                        { (yyval.oncommit) = ONCOMMIT_DROP; }
#line 23043 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 474: /* OnCommitOption: ON COMMIT DELETE_P ROWS  */
#line 301 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.oncommit) = PG_ONCOMMIT_DELETE_ROWS; }
#line 23049 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 475: /* OnCommitOption: ON COMMIT PRESERVE ROWS  */
#line 302 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.oncommit) = PG_ONCOMMIT_PRESERVE_ROWS; }
#line 23055 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 476: /* OnCommitOption: %empty  */
#line 303 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.oncommit) = PG_ONCOMMIT_NOOP; }
#line 23061 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 477: /* reloptions: '(' reloption_list ')'  */
#line 308 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 23067 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 478: /* opt_no_inherit: NO INHERIT  */
#line 312 "third_party/libpg_query/grammar/statements/create.y"
                                                                                {  (yyval.boolean) = true; }
#line 23073 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 479: /* opt_no_inherit: %empty  */
#line 313 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        {  (yyval.boolean) = false; }
#line 23079 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 480: /* TableConstraint: CONSTRAINT name ConstraintElem  */
#line 319 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = castNode(PGConstraint, (yyvsp[0].node));
					n->conname = (yyvsp[-1].str);
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *) n;
				}
#line 23090 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 481: /* TableConstraint: ConstraintElem  */
#line 325 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 23096 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 482: /* TableLikeOption: COMMENTS  */
#line 330 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_CREATE_TABLE_LIKE_COMMENTS; }
#line 23102 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 483: /* TableLikeOption: CONSTRAINTS  */
#line 331 "third_party/libpg_query/grammar/statements/create.y"
                                                        { (yyval.ival) = PG_CREATE_TABLE_LIKE_CONSTRAINTS; }
#line 23108 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 484: /* TableLikeOption: DEFAULTS  */
#line 332 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_CREATE_TABLE_LIKE_DEFAULTS; }
#line 23114 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 485: /* TableLikeOption: IDENTITY_P  */
#line 333 "third_party/libpg_query/grammar/statements/create.y"
                                                        { (yyval.ival) = PG_CREATE_TABLE_LIKE_IDENTITY; }
#line 23120 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 486: /* TableLikeOption: INDEXES  */
#line 334 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_CREATE_TABLE_LIKE_INDEXES; }
#line 23126 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 487: /* TableLikeOption: STATISTICS  */
#line 335 "third_party/libpg_query/grammar/statements/create.y"
                                                        { (yyval.ival) = PG_CREATE_TABLE_LIKE_STATISTICS; }
#line 23132 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 488: /* TableLikeOption: STORAGE  */
#line 336 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_CREATE_TABLE_LIKE_STORAGE; }
#line 23138 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 489: /* TableLikeOption: ALL  */
#line 337 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_CREATE_TABLE_LIKE_ALL; }
#line 23144 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 490: /* reloption_list: reloption_elem  */
#line 343 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].defelt)); }
#line 23150 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 491: /* reloption_list: reloption_list ',' reloption_elem  */
#line 344 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt)); }
#line 23156 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 492: /* ExistingIndex: USING INDEX index_name  */
#line 348 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.str) = (yyvsp[0].str); }
#line 23162 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 493: /* ConstraintAttr: DEFERRABLE  */
#line 354 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_ATTR_DEFERRABLE;
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 23173 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 494: /* ConstraintAttr: NOT DEFERRABLE  */
#line 361 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_ATTR_NOT_DEFERRABLE;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 23184 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 495: /* ConstraintAttr: INITIALLY DEFERRED  */
#line 368 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_ATTR_DEFERRED;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 23195 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 496: /* ConstraintAttr: INITIALLY IMMEDIATE  */
#line 375 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_ATTR_IMMEDIATE;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 23206 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 497: /* OptWith: WITH reloptions  */
#line 386 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.list) = (yyvsp[0].list); }
#line 23212 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 498: /* OptWith: WITH OIDS  */
#line 387 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.list) = list_make1(makeDefElem("oids", (PGNode *) makeInteger(true), (yylsp[-1]))); }
#line 23218 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 499: /* OptWith: WITHOUT OIDS  */
#line 388 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.list) = list_make1(makeDefElem("oids", (PGNode *) makeInteger(false), (yylsp[-1]))); }
#line 23224 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 500: /* OptWith: %empty  */
#line 389 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.list) = NIL; }
#line 23230 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 501: /* definition: '(' def_list ')'  */
#line 393 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 23236 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 502: /* TableLikeOptionList: TableLikeOptionList INCLUDING TableLikeOption  */
#line 398 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.ival) = (yyvsp[-2].ival) | (yyvsp[0].ival); }
#line 23242 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 503: /* TableLikeOptionList: TableLikeOptionList EXCLUDING TableLikeOption  */
#line 399 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.ival) = (yyvsp[-2].ival) & ~(yyvsp[0].ival); }
#line 23248 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 504: /* TableLikeOptionList: %empty  */
#line 400 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.ival) = 0; }
#line 23254 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 505: /* generic_option_name: ColLabel  */
#line 405 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.str) = (yyvsp[0].str); }
#line 23260 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 506: /* ConstraintAttributeElem: NOT DEFERRABLE  */
#line 410 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = CAS_NOT_DEFERRABLE; }
#line 23266 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 507: /* ConstraintAttributeElem: DEFERRABLE  */
#line 411 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = CAS_DEFERRABLE; }
#line 23272 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 508: /* ConstraintAttributeElem: INITIALLY IMMEDIATE  */
#line 412 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = CAS_INITIALLY_IMMEDIATE; }
#line 23278 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 509: /* ConstraintAttributeElem: INITIALLY DEFERRED  */
#line 413 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = CAS_INITIALLY_DEFERRED; }
#line 23284 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 510: /* ConstraintAttributeElem: NOT VALID  */
#line 414 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.ival) = CAS_NOT_VALID; }
#line 23290 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 511: /* ConstraintAttributeElem: NO INHERIT  */
#line 415 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = CAS_NO_INHERIT; }
#line 23296 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 512: /* columnDef: ColId Typename ColQualList  */
#line 421 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGColumnDef *n = makeNode(PGColumnDef);
					n->category = COL_STANDARD;
					n->colname = (yyvsp[-2].str);
					n->typeName = (yyvsp[-1].typnam);
					n->inhcount = 0;
					n->is_local = true;
					n->is_not_null = false;
					n->is_from_type = false;
					n->storage = 0;
					n->raw_default = NULL;
					n->cooked_default = NULL;
					n->collOid = InvalidOid;
					SplitColQualList((yyvsp[0].list), &n->constraints, &n->collClause,
									 yyscanner);
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)n;
			}
#line 23319 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 513: /* columnDef: ColId opt_Typename GeneratedConstraintElem ColQualList  */
#line 441 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGColumnDef *n = makeNode(PGColumnDef);
					n->category = COL_GENERATED;
					n->colname = (yyvsp[-3].str);
					n->typeName = (yyvsp[-2].typnam);
					n->inhcount = 0;
					n->is_local = true;
					n->is_not_null = false;
					n->is_from_type = false;
					n->storage = 0;
					n->raw_default = NULL;
					n->cooked_default = NULL;
					n->collOid = InvalidOid;
					// merge the constraints with the generated column constraint
					auto constraints = (yyvsp[0].list);
					if (constraints) {
					    constraints = lappend(constraints, (yyvsp[-1].node));
					} else {
					    constraints = list_make1((yyvsp[-1].node));
					}
					SplitColQualList(constraints, &n->constraints, &n->collClause,
									 yyscanner);
					n->location = (yylsp[-3]);
					(yyval.node) = (PGNode *)n;
			}
#line 23349 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 514: /* def_list: def_elem  */
#line 469 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].defelt)); }
#line 23355 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 515: /* def_list: def_list ',' def_elem  */
#line 470 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt)); }
#line 23361 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 516: /* index_name: ColId  */
#line 474 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 23367 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 517: /* TableElement: columnDef  */
#line 478 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 23373 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 518: /* TableElement: TableLikeClause  */
#line 479 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 23379 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 519: /* TableElement: TableConstraint  */
#line 480 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 23385 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 520: /* def_elem: ColLabel '=' def_arg  */
#line 485 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[-2].str), (PGNode *) (yyvsp[0].node), (yylsp[-2]));
				}
#line 23393 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 521: /* def_elem: ColLabel  */
#line 489 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[0].str), NULL, (yylsp[0]));
				}
#line 23401 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 522: /* opt_definition: WITH definition  */
#line 496 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 23407 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 523: /* opt_definition: %empty  */
#line 497 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                { (yyval.list) = NIL; }
#line 23413 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 524: /* OptTableElementList: TableElementList  */
#line 502 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 23419 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 525: /* OptTableElementList: TableElementList ','  */
#line 503 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 23425 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 526: /* OptTableElementList: %empty  */
#line 504 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.list) = NIL; }
#line 23431 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 527: /* columnElem: ColId  */
#line 509 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.node) = (PGNode *) makeString((yyvsp[0].str));
				}
#line 23439 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 528: /* opt_column_list: '(' columnList ')'  */
#line 516 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 23445 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 529: /* opt_column_list: %empty  */
#line 517 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                { (yyval.list) = NIL; }
#line 23451 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 530: /* ColQualList: ColQualList ColConstraint  */
#line 522 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 23457 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 531: /* ColQualList: %empty  */
#line 523 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                { (yyval.list) = NIL; }
#line 23463 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 532: /* key_delete: ON DELETE_P key_action  */
#line 527 "third_party/libpg_query/grammar/statements/create.y"
                                                { (yyval.ival) = (yyvsp[0].ival); }
#line 23469 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 533: /* reloption_elem: ColLabel '=' def_arg  */
#line 533 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[-2].str), (PGNode *) (yyvsp[0].node), (yylsp[-2]));
				}
#line 23477 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 534: /* reloption_elem: ColLabel  */
#line 537 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[0].str), NULL, (yylsp[0]));
				}
#line 23485 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 535: /* reloption_elem: ColLabel '.' ColLabel '=' def_arg  */
#line 541 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElemExtended((yyvsp[-4].str), (yyvsp[-2].str), (PGNode *) (yyvsp[0].node),
											 PG_DEFELEM_UNSPEC, (yylsp[-4]));
				}
#line 23494 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 536: /* reloption_elem: ColLabel '.' ColLabel  */
#line 546 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElemExtended((yyvsp[-2].str), (yyvsp[0].str), NULL, PG_DEFELEM_UNSPEC, (yylsp[-2]));
				}
#line 23502 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 537: /* columnList: columnElem  */
#line 553 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 23508 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 538: /* columnList: columnList ',' columnElem  */
#line 554 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 23514 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 539: /* columnList_opt_comma: columnList  */
#line 558 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 23520 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 540: /* columnList_opt_comma: columnList ','  */
#line 559 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 23526 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 541: /* func_type: Typename  */
#line 563 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.typnam) = (yyvsp[0].typnam); }
#line 23532 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 542: /* func_type: type_function_name attrs '%' TYPE_P  */
#line 565 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.typnam) = makeTypeNameFromNameList(lcons(makeString((yyvsp[-3].str)), (yyvsp[-2].list)));
					(yyval.typnam)->pct_type = true;
					(yyval.typnam)->location = (yylsp[-3]);
				}
#line 23542 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 543: /* func_type: SETOF type_function_name attrs '%' TYPE_P  */
#line 571 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.typnam) = makeTypeNameFromNameList(lcons(makeString((yyvsp[-3].str)), (yyvsp[-2].list)));
					(yyval.typnam)->pct_type = true;
					(yyval.typnam)->setof = true;
					(yyval.typnam)->location = (yylsp[-3]);
				}
#line 23553 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 544: /* ConstraintElem: CHECK_P '(' a_expr ')' ConstraintAttributeSpec  */
#line 582 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_CHECK;
					n->location = (yylsp[-4]);
					n->raw_expr = (yyvsp[-2].node);
					n->cooked_expr = NULL;
					processCASbits((yyvsp[0].ival), (yylsp[0]), "CHECK",
								   NULL, NULL, &n->skip_validation,
								   &n->is_no_inherit, yyscanner);
					n->initially_valid = !n->skip_validation;
					(yyval.node) = (PGNode *)n;
				}
#line 23570 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 545: /* ConstraintElem: UNIQUE '(' columnList_opt_comma ')' opt_definition ConstraintAttributeSpec  */
#line 596 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_UNIQUE;
					n->location = (yylsp[-5]);
					n->keys = (yyvsp[-3].list);
					n->options = (yyvsp[-1].list);
					n->indexname = NULL;
					processCASbits((yyvsp[0].ival), (yylsp[0]), "UNIQUE",
								   &n->deferrable, &n->initdeferred, NULL,
								   NULL, yyscanner);
					(yyval.node) = (PGNode *)n;
				}
#line 23587 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 546: /* ConstraintElem: UNIQUE ExistingIndex ConstraintAttributeSpec  */
#line 609 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_UNIQUE;
					n->location = (yylsp[-2]);
					n->keys = NIL;
					n->options = NIL;
					n->indexname = (yyvsp[-1].str);
					n->indexspace = NULL;
					processCASbits((yyvsp[0].ival), (yylsp[0]), "UNIQUE",
								   &n->deferrable, &n->initdeferred, NULL,
								   NULL, yyscanner);
					(yyval.node) = (PGNode *)n;
				}
#line 23605 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 547: /* ConstraintElem: PRIMARY KEY '(' columnList_opt_comma ')' opt_definition ConstraintAttributeSpec  */
#line 624 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_PRIMARY;
					n->location = (yylsp[-6]);
					n->keys = (yyvsp[-3].list);
					n->options = (yyvsp[-1].list);
					n->indexname = NULL;
					processCASbits((yyvsp[0].ival), (yylsp[0]), "PRIMARY KEY",
								   &n->deferrable, &n->initdeferred, NULL,
								   NULL, yyscanner);
					(yyval.node) = (PGNode *)n;
				}
#line 23622 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 548: /* ConstraintElem: PRIMARY KEY ExistingIndex ConstraintAttributeSpec  */
#line 637 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_PRIMARY;
					n->location = (yylsp[-3]);
					n->keys = NIL;
					n->options = NIL;
					n->indexname = (yyvsp[-1].str);
					n->indexspace = NULL;
					processCASbits((yyvsp[0].ival), (yylsp[0]), "PRIMARY KEY",
								   &n->deferrable, &n->initdeferred, NULL,
								   NULL, yyscanner);
					(yyval.node) = (PGNode *)n;
				}
#line 23640 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 549: /* ConstraintElem: FOREIGN KEY '(' columnList_opt_comma ')' REFERENCES qualified_name opt_column_list key_match key_actions ConstraintAttributeSpec  */
#line 652 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_FOREIGN;
					n->location = (yylsp[-10]);
					n->pktable			= (yyvsp[-4].range);
					n->fk_attrs			= (yyvsp[-7].list);
					n->pk_attrs			= (yyvsp[-3].list);
					n->fk_matchtype		= (yyvsp[-2].ival);
					n->fk_upd_action	= (char) ((yyvsp[-1].ival) >> 8);
					n->fk_del_action	= (char) ((yyvsp[-1].ival) & 0xFF);
					processCASbits((yyvsp[0].ival), (yylsp[0]), "FOREIGN KEY",
								   &n->deferrable, &n->initdeferred,
								   &n->skip_validation, NULL,
								   yyscanner);
					n->initially_valid = !n->skip_validation;
					(yyval.node) = (PGNode *)n;
				}
#line 23662 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 550: /* TableElementList: TableElement  */
#line 674 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 23670 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 551: /* TableElementList: TableElementList ',' TableElement  */
#line 678 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 23678 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 552: /* key_match: MATCH FULL  */
#line 685 "third_party/libpg_query/grammar/statements/create.y"
                        {
				(yyval.ival) = PG_FKCONSTR_MATCH_FULL;
			}
#line 23686 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 553: /* key_match: MATCH PARTIAL  */
#line 689 "third_party/libpg_query/grammar/statements/create.y"
                        {
				ereport(ERROR,
						(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
						 errmsg("MATCH PARTIAL not yet implemented"),
						 parser_errposition((yylsp[-1]))));
				(yyval.ival) = PG_FKCONSTR_MATCH_PARTIAL;
			}
#line 23698 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 554: /* key_match: MATCH SIMPLE  */
#line 697 "third_party/libpg_query/grammar/statements/create.y"
                        {
				(yyval.ival) = PG_FKCONSTR_MATCH_SIMPLE;
			}
#line 23706 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 555: /* key_match: %empty  */
#line 701 "third_party/libpg_query/grammar/statements/create.y"
                        {
				(yyval.ival) = PG_FKCONSTR_MATCH_SIMPLE;
			}
#line 23714 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 556: /* TableLikeClause: LIKE qualified_name TableLikeOptionList  */
#line 709 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGTableLikeClause *n = makeNode(PGTableLikeClause);
					n->relation = (yyvsp[-1].range);
					n->options = (yyvsp[0].ival);
					(yyval.node) = (PGNode *)n;
				}
#line 23725 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 557: /* OptTemp: TEMPORARY  */
#line 718 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_RELPERSISTENCE_TEMP; }
#line 23731 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 558: /* OptTemp: TEMP  */
#line 719 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = PG_RELPERSISTENCE_TEMP; }
#line 23737 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 559: /* OptTemp: LOCAL TEMPORARY  */
#line 720 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_RELPERSISTENCE_TEMP; }
#line 23743 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 560: /* OptTemp: LOCAL TEMP  */
#line 721 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_RELPERSISTENCE_TEMP; }
#line 23749 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 561: /* OptTemp: GLOBAL TEMPORARY  */
#line 723 "third_party/libpg_query/grammar/statements/create.y"
                                {
					ereport(PGWARNING,
							(errmsg("GLOBAL is deprecated in temporary table creation"),
							 parser_errposition((yylsp[-1]))));
					(yyval.ival) = PG_RELPERSISTENCE_TEMP;
				}
#line 23760 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 562: /* OptTemp: GLOBAL TEMP  */
#line 730 "third_party/libpg_query/grammar/statements/create.y"
                                {
					ereport(PGWARNING,
							(errmsg("GLOBAL is deprecated in temporary table creation"),
							 parser_errposition((yylsp[-1]))));
					(yyval.ival) = PG_RELPERSISTENCE_TEMP;
				}
#line 23771 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 563: /* OptTemp: UNLOGGED  */
#line 736 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = PG_RELPERSISTENCE_UNLOGGED; }
#line 23777 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 564: /* OptTemp: %empty  */
#line 737 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = RELPERSISTENCE_PERMANENT; }
#line 23783 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 565: /* generated_when: ALWAYS  */
#line 742 "third_party/libpg_query/grammar/statements/create.y"
                                                { (yyval.ival) = PG_ATTRIBUTE_IDENTITY_ALWAYS; }
#line 23789 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 566: /* generated_when: BY DEFAULT  */
#line 743 "third_party/libpg_query/grammar/statements/create.y"
                                        { (yyval.ival) = ATTRIBUTE_IDENTITY_BY_DEFAULT; }
#line 23795 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 567: /* DropStmt: DROP drop_type_any_name IF_P EXISTS any_name_list opt_drop_behavior  */
#line 10 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-4].objtype);
					n->missing_ok = true;
					n->objects = (yyvsp[-1].list);
					n->behavior = (yyvsp[0].dbehavior);
					n->concurrent = false;
					(yyval.node) = (PGNode *)n;
				}
#line 23809 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 568: /* DropStmt: DROP drop_type_any_name any_name_list opt_drop_behavior  */
#line 20 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-2].objtype);
					n->missing_ok = false;
					n->objects = (yyvsp[-1].list);
					n->behavior = (yyvsp[0].dbehavior);
					n->concurrent = false;
					(yyval.node) = (PGNode *)n;
				}
#line 23823 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 569: /* DropStmt: DROP drop_type_name IF_P EXISTS name_list opt_drop_behavior  */
#line 30 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-4].objtype);
					n->missing_ok = true;
					n->objects = (yyvsp[-1].list);
					n->behavior = (yyvsp[0].dbehavior);
					n->concurrent = false;
					(yyval.node) = (PGNode *)n;
				}
#line 23837 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 570: /* DropStmt: DROP drop_type_name name_list opt_drop_behavior  */
#line 40 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-2].objtype);
					n->missing_ok = false;
					n->objects = (yyvsp[-1].list);
					n->behavior = (yyvsp[0].dbehavior);
					n->concurrent = false;
					(yyval.node) = (PGNode *)n;
				}
#line 23851 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 571: /* DropStmt: DROP drop_type_name_on_any_name name ON any_name opt_drop_behavior  */
#line 50 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-4].objtype);
					n->objects = list_make1(lappend((yyvsp[-1].list), makeString((yyvsp[-3].str))));
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = false;
					n->concurrent = false;
					(yyval.node) = (PGNode *) n;
				}
#line 23865 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 572: /* DropStmt: DROP drop_type_name_on_any_name IF_P EXISTS name ON any_name opt_drop_behavior  */
#line 60 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-6].objtype);
					n->objects = list_make1(lappend((yyvsp[-1].list), makeString((yyvsp[-3].str))));
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = true;
					n->concurrent = false;
					(yyval.node) = (PGNode *) n;
				}
#line 23879 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 573: /* DropStmt: DROP TYPE_P type_name_list opt_drop_behavior  */
#line 70 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = PG_OBJECT_TYPE;
					n->missing_ok = false;
					n->objects = (yyvsp[-1].list);
					n->behavior = (yyvsp[0].dbehavior);
					n->concurrent = false;
					(yyval.node) = (PGNode *) n;
				}
#line 23893 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 574: /* DropStmt: DROP TYPE_P IF_P EXISTS type_name_list opt_drop_behavior  */
#line 80 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = PG_OBJECT_TYPE;
					n->missing_ok = true;
					n->objects = (yyvsp[-1].list);
					n->behavior = (yyvsp[0].dbehavior);
					n->concurrent = false;
					(yyval.node) = (PGNode *) n;
				}
#line 23907 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 575: /* drop_type_any_name: TABLE  */
#line 93 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_TABLE; }
#line 23913 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 576: /* drop_type_any_name: SEQUENCE  */
#line 94 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_SEQUENCE; }
#line 23919 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 577: /* drop_type_any_name: FUNCTION  */
#line 95 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_FUNCTION; }
#line 23925 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 578: /* drop_type_any_name: MACRO  */
#line 96 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_FUNCTION; }
#line 23931 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 579: /* drop_type_any_name: MACRO TABLE  */
#line 97 "third_party/libpg_query/grammar/statements/drop.y"
                                                                { (yyval.objtype) = PG_OBJECT_TABLE_MACRO; }
#line 23937 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 580: /* drop_type_any_name: VIEW  */
#line 98 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_VIEW; }
#line 23943 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 581: /* drop_type_any_name: MATERIALIZED VIEW  */
#line 99 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_MATVIEW; }
#line 23949 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 582: /* drop_type_any_name: INDEX  */
#line 100 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_INDEX; }
#line 23955 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 583: /* drop_type_any_name: FOREIGN TABLE  */
#line 101 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_FOREIGN_TABLE; }
#line 23961 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 584: /* drop_type_any_name: COLLATION  */
#line 102 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_COLLATION; }
#line 23967 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 585: /* drop_type_any_name: CONVERSION_P  */
#line 103 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_CONVERSION; }
#line 23973 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 586: /* drop_type_any_name: SCHEMA  */
#line 104 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_SCHEMA; }
#line 23979 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 587: /* drop_type_any_name: STATISTICS  */
#line 105 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_STATISTIC_EXT; }
#line 23985 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 588: /* drop_type_any_name: TEXT_P SEARCH PARSER  */
#line 106 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                { (yyval.objtype) = PG_OBJECT_TSPARSER; }
#line 23991 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 589: /* drop_type_any_name: TEXT_P SEARCH DICTIONARY  */
#line 107 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                { (yyval.objtype) = PG_OBJECT_TSDICTIONARY; }
#line 23997 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 590: /* drop_type_any_name: TEXT_P SEARCH TEMPLATE  */
#line 108 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                { (yyval.objtype) = PG_OBJECT_TSTEMPLATE; }
#line 24003 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 591: /* drop_type_any_name: TEXT_P SEARCH CONFIGURATION  */
#line 109 "third_party/libpg_query/grammar/statements/drop.y"
                                                                        { (yyval.objtype) = PG_OBJECT_TSCONFIGURATION; }
#line 24009 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 592: /* drop_type_name: ACCESS METHOD  */
#line 114 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_ACCESS_METHOD; }
#line 24015 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 593: /* drop_type_name: EVENT TRIGGER  */
#line 115 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_EVENT_TRIGGER; }
#line 24021 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 594: /* drop_type_name: EXTENSION  */
#line 116 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_EXTENSION; }
#line 24027 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 595: /* drop_type_name: FOREIGN DATA_P WRAPPER  */
#line 117 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                { (yyval.objtype) = PG_OBJECT_FDW; }
#line 24033 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 596: /* drop_type_name: PUBLICATION  */
#line 118 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_PUBLICATION; }
#line 24039 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 597: /* drop_type_name: SERVER  */
#line 119 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_FOREIGN_SERVER; }
#line 24045 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 598: /* any_name_list: any_name  */
#line 124 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].list)); }
#line 24051 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 599: /* any_name_list: any_name_list ',' any_name  */
#line 125 "third_party/libpg_query/grammar/statements/drop.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].list)); }
#line 24057 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 600: /* opt_drop_behavior: CASCADE  */
#line 130 "third_party/libpg_query/grammar/statements/drop.y"
                                                                        { (yyval.dbehavior) = PG_DROP_CASCADE; }
#line 24063 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 601: /* opt_drop_behavior: RESTRICT  */
#line 131 "third_party/libpg_query/grammar/statements/drop.y"
                                                                        { (yyval.dbehavior) = PG_DROP_RESTRICT; }
#line 24069 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 602: /* opt_drop_behavior: %empty  */
#line 132 "third_party/libpg_query/grammar/statements/drop.y"
                                                                { (yyval.dbehavior) = PG_DROP_RESTRICT; /* default */ }
#line 24075 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 603: /* drop_type_name_on_any_name: POLICY  */
#line 137 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_POLICY; }
#line 24081 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 604: /* drop_type_name_on_any_name: RULE  */
#line 138 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_RULE; }
#line 24087 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 605: /* drop_type_name_on_any_name: TRIGGER  */
#line 139 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_TRIGGER; }
#line 24093 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 606: /* type_name_list: Typename  */
#line 142 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].typnam)); }
#line 24099 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 607: /* type_name_list: type_name_list ',' Typename  */
#line 143 "third_party/libpg_query/grammar/statements/drop.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].typnam)); }
#line 24105 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 608: /* CreateFunctionStmt: CREATE_P OptTemp macro_alias qualified_name param_list AS TABLE SelectStmt  */
#line 9 "third_party/libpg_query/grammar/statements/create_function.y"
                        {
				PGCreateFunctionStmt *n = makeNode(PGCreateFunctionStmt);
				(yyvsp[-4].range)->relpersistence = (yyvsp[-6].ival);
				n->name = (yyvsp[-4].range);
				n->params = (yyvsp[-3].list);
				n->function = NULL;
				n->query = (yyvsp[0].node);
				n->onconflict = PG_ERROR_ON_CONFLICT;
				(yyval.node) = (PGNode *)n;
			}
#line 24120 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 609: /* CreateFunctionStmt: CREATE_P OptTemp macro_alias IF_P NOT EXISTS qualified_name param_list AS TABLE SelectStmt  */
#line 21 "third_party/libpg_query/grammar/statements/create_function.y"
                        {
				PGCreateFunctionStmt *n = makeNode(PGCreateFunctionStmt);
				(yyvsp[-4].range)->relpersistence = (yyvsp[-9].ival);
				n->name = (yyvsp[-4].range);
				n->params = (yyvsp[-3].list);
				n->function = NULL;
				n->query = (yyvsp[0].node);
				n->onconflict = PG_IGNORE_ON_CONFLICT;
				(yyval.node) = (PGNode *)n;

			}
#line 24136 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 610: /* CreateFunctionStmt: CREATE_P OR REPLACE OptTemp macro_alias qualified_name param_list AS TABLE SelectStmt  */
#line 34 "third_party/libpg_query/grammar/statements/create_function.y"
                        {
				PGCreateFunctionStmt *n = makeNode(PGCreateFunctionStmt);
				(yyvsp[-4].range)->relpersistence = (yyvsp[-6].ival);
				n->name = (yyvsp[-4].range);
				n->params = (yyvsp[-3].list);
				n->function = NULL;
				n->query = (yyvsp[0].node);
				n->onconflict = PG_REPLACE_ON_CONFLICT;
				(yyval.node) = (PGNode *)n;

			}
#line 24152 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 611: /* CreateFunctionStmt: CREATE_P OptTemp macro_alias qualified_name param_list AS a_expr  */
#line 47 "third_party/libpg_query/grammar/statements/create_function.y"
                         {
				PGCreateFunctionStmt *n = makeNode(PGCreateFunctionStmt);
				(yyvsp[-3].range)->relpersistence = (yyvsp[-5].ival);
				n->name = (yyvsp[-3].range);
				n->params = (yyvsp[-2].list);
				n->function = (yyvsp[0].node);
				n->query = NULL;
				n->onconflict = PG_ERROR_ON_CONFLICT;
				(yyval.node) = (PGNode *)n;
                         }
#line 24167 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 612: /* CreateFunctionStmt: CREATE_P OptTemp macro_alias IF_P NOT EXISTS qualified_name param_list AS a_expr  */
#line 59 "third_party/libpg_query/grammar/statements/create_function.y"
                         {
				PGCreateFunctionStmt *n = makeNode(PGCreateFunctionStmt);
				(yyvsp[-3].range)->relpersistence = (yyvsp[-8].ival);
				n->name = (yyvsp[-3].range);
				n->params = (yyvsp[-2].list);
				n->function = (yyvsp[0].node);
				n->query = NULL;
				n->onconflict = PG_IGNORE_ON_CONFLICT;
				(yyval.node) = (PGNode *)n;
			 }
#line 24182 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 613: /* CreateFunctionStmt: CREATE_P OR REPLACE OptTemp macro_alias qualified_name param_list AS a_expr  */
#line 71 "third_party/libpg_query/grammar/statements/create_function.y"
                         {
				PGCreateFunctionStmt *n = makeNode(PGCreateFunctionStmt);
				(yyvsp[-3].range)->relpersistence = (yyvsp[-5].ival);
				n->name = (yyvsp[-3].range);
				n->params = (yyvsp[-2].list);
				n->function = (yyvsp[0].node);
				n->query = NULL;
				n->onconflict = PG_REPLACE_ON_CONFLICT;
				(yyval.node) = (PGNode *)n;
			 }
#line 24197 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 616: /* param_list: '(' ')'  */
#line 92 "third_party/libpg_query/grammar/statements/create_function.y"
                        {
				(yyval.list) = NIL;
			}
#line 24205 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 617: /* param_list: '(' func_arg_list ')'  */
#line 96 "third_party/libpg_query/grammar/statements/create_function.y"
                        {
				(yyval.list) = (yyvsp[-1].list);
			}
#line 24213 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 618: /* UpdateStmt: opt_with_clause UPDATE relation_expr_opt_alias SET set_clause_list_opt_comma from_clause where_or_current_clause returning_clause  */
#line 12 "third_party/libpg_query/grammar/statements/update.y"
                                {
					PGUpdateStmt *n = makeNode(PGUpdateStmt);
					n->relation = (yyvsp[-5].range);
					n->targetList = (yyvsp[-3].list);
					n->fromClause = (yyvsp[-2].list);
					n->whereClause = (yyvsp[-1].node);
					n->returningList = (yyvsp[0].list);
					n->withClause = (yyvsp[-7].with);
					(yyval.node) = (PGNode *)n;
				}
#line 24228 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 619: /* CopyStmt: COPY opt_binary qualified_name opt_column_list opt_oids copy_from opt_program copy_file_name copy_delimiter opt_with copy_options  */
#line 3 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					PGCopyStmt *n = makeNode(PGCopyStmt);
					n->relation = (yyvsp[-8].range);
					n->query = NULL;
					n->attlist = (yyvsp[-7].list);
					n->is_from = (yyvsp[-5].boolean);
					n->is_program = (yyvsp[-4].boolean);
					n->filename = (yyvsp[-3].str);

					if (n->is_program && n->filename == NULL)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("STDIN/STDOUT not allowed with PROGRAM"),
								 parser_errposition((yylsp[-3]))));

					n->options = NIL;
					/* Concatenate user-supplied flags */
					if ((yyvsp[-9].defelt))
						n->options = lappend(n->options, (yyvsp[-9].defelt));
					if ((yyvsp[-6].defelt))
						n->options = lappend(n->options, (yyvsp[-6].defelt));
					if ((yyvsp[-2].defelt))
						n->options = lappend(n->options, (yyvsp[-2].defelt));
					if ((yyvsp[0].list))
						n->options = list_concat(n->options, (yyvsp[0].list));
					(yyval.node) = (PGNode *)n;
				}
#line 24260 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 620: /* CopyStmt: COPY '(' SelectStmt ')' TO opt_program copy_file_name opt_with copy_options  */
#line 31 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					PGCopyStmt *n = makeNode(PGCopyStmt);
					n->relation = NULL;
					n->query = (yyvsp[-6].node);
					n->attlist = NIL;
					n->is_from = false;
					n->is_program = (yyvsp[-3].boolean);
					n->filename = (yyvsp[-2].str);
					n->options = (yyvsp[0].list);

					if (n->is_program && n->filename == NULL)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("STDIN/STDOUT not allowed with PROGRAM"),
								 parser_errposition((yylsp[-4]))));

					(yyval.node) = (PGNode *)n;
				}
#line 24283 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 621: /* copy_from: FROM  */
#line 53 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.boolean) = true; }
#line 24289 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 622: /* copy_from: TO  */
#line 54 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.boolean) = false; }
#line 24295 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 623: /* copy_delimiter: opt_using DELIMITERS Sconst  */
#line 60 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("delimiter", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-1]));
				}
#line 24303 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 624: /* copy_delimiter: %empty  */
#line 63 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.defelt) = NULL; }
#line 24309 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 625: /* copy_generic_opt_arg_list: copy_generic_opt_arg_list_item  */
#line 69 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 24317 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 626: /* copy_generic_opt_arg_list: copy_generic_opt_arg_list ',' copy_generic_opt_arg_list_item  */
#line 73 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 24325 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 627: /* opt_using: USING  */
#line 80 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                {}
#line 24331 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 628: /* opt_using: %empty  */
#line 81 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                {}
#line 24337 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 629: /* opt_as: AS  */
#line 85 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                {}
#line 24343 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 630: /* opt_as: %empty  */
#line 86 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                        {}
#line 24349 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 631: /* opt_program: PROGRAM  */
#line 91 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.boolean) = true; }
#line 24355 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 632: /* opt_program: %empty  */
#line 92 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                        { (yyval.boolean) = false; }
#line 24361 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 633: /* copy_options: copy_opt_list  */
#line 96 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 24367 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 634: /* copy_options: '(' copy_generic_opt_list ')'  */
#line 97 "third_party/libpg_query/grammar/statements/copy.y"
                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 24373 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 635: /* copy_generic_opt_arg: opt_boolean_or_string  */
#line 102 "third_party/libpg_query/grammar/statements/copy.y"
                                                                { (yyval.node) = (PGNode *) makeString((yyvsp[0].str)); }
#line 24379 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 636: /* copy_generic_opt_arg: NumericOnly  */
#line 103 "third_party/libpg_query/grammar/statements/copy.y"
                                                                        { (yyval.node) = (PGNode *) (yyvsp[0].value); }
#line 24385 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 637: /* copy_generic_opt_arg: '*'  */
#line 104 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                { (yyval.node) = (PGNode *) makeNode(PGAStar); }
#line 24391 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 638: /* copy_generic_opt_arg: '(' copy_generic_opt_arg_list ')'  */
#line 105 "third_party/libpg_query/grammar/statements/copy.y"
                                                                        { (yyval.node) = (PGNode *) (yyvsp[-1].list); }
#line 24397 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 639: /* copy_generic_opt_arg: %empty  */
#line 106 "third_party/libpg_query/grammar/statements/copy.y"
                                                                        { (yyval.node) = NULL; }
#line 24403 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 640: /* copy_generic_opt_elem: ColLabel copy_generic_opt_arg  */
#line 112 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[-1].str), (yyvsp[0].node), (yylsp[-1]));
				}
#line 24411 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 641: /* opt_oids: WITH OIDS  */
#line 120 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("oids", (PGNode *)makeInteger(true), (yylsp[-1]));
				}
#line 24419 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 642: /* opt_oids: %empty  */
#line 123 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.defelt) = NULL; }
#line 24425 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 643: /* copy_opt_list: copy_opt_list copy_opt_item  */
#line 128 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].defelt)); }
#line 24431 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 644: /* copy_opt_list: %empty  */
#line 129 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                        { (yyval.list) = NIL; }
#line 24437 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 645: /* opt_binary: BINARY  */
#line 135 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("format", (PGNode *)makeString("binary"), (yylsp[0]));
				}
#line 24445 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 646: /* opt_binary: %empty  */
#line 138 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.defelt) = NULL; }
#line 24451 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 647: /* copy_opt_item: BINARY  */
#line 144 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("format", (PGNode *)makeString("binary"), (yylsp[0]));
				}
#line 24459 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 648: /* copy_opt_item: OIDS  */
#line 148 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("oids", (PGNode *)makeInteger(true), (yylsp[0]));
				}
#line 24467 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 649: /* copy_opt_item: FREEZE  */
#line 152 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("freeze", (PGNode *)makeInteger(true), (yylsp[0]));
				}
#line 24475 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 650: /* copy_opt_item: DELIMITER opt_as Sconst  */
#line 156 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("delimiter", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-2]));
				}
#line 24483 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 651: /* copy_opt_item: NULL_P opt_as Sconst  */
#line 160 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("null", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-2]));
				}
#line 24491 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 652: /* copy_opt_item: CSV  */
#line 164 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("format", (PGNode *)makeString("csv"), (yylsp[0]));
				}
#line 24499 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 653: /* copy_opt_item: HEADER_P  */
#line 168 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("header", (PGNode *)makeInteger(true), (yylsp[0]));
				}
#line 24507 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 654: /* copy_opt_item: QUOTE opt_as Sconst  */
#line 172 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("quote", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-2]));
				}
#line 24515 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 655: /* copy_opt_item: ESCAPE opt_as Sconst  */
#line 176 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("escape", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-2]));
				}
#line 24523 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 656: /* copy_opt_item: FORCE QUOTE columnList  */
#line 180 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("force_quote", (PGNode *)(yyvsp[0].list), (yylsp[-2]));
				}
#line 24531 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 657: /* copy_opt_item: FORCE QUOTE '*'  */
#line 184 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("force_quote", (PGNode *)makeNode(PGAStar), (yylsp[-2]));
				}
#line 24539 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 658: /* copy_opt_item: PARTITION BY columnList  */
#line 188 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("partition_by", (PGNode *)(yyvsp[0].list), (yylsp[-2]));
				}
#line 24547 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 659: /* copy_opt_item: PARTITION BY '*'  */
#line 192 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("partition_by", (PGNode *)makeNode(PGAStar), (yylsp[-2]));
				}
#line 24555 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 660: /* copy_opt_item: FORCE NOT NULL_P columnList  */
#line 196 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("force_not_null", (PGNode *)(yyvsp[0].list), (yylsp[-3]));
				}
#line 24563 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 661: /* copy_opt_item: FORCE NULL_P columnList  */
#line 200 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("force_null", (PGNode *)(yyvsp[0].list), (yylsp[-2]));
				}
#line 24571 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 662: /* copy_opt_item: ENCODING Sconst  */
#line 204 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("encoding", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-1]));
				}
#line 24579 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 663: /* copy_generic_opt_arg_list_item: opt_boolean_or_string  */
#line 211 "third_party/libpg_query/grammar/statements/copy.y"
                                                { (yyval.node) = (PGNode *) makeString((yyvsp[0].str)); }
#line 24585 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 664: /* copy_file_name: Sconst  */
#line 217 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 24591 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 665: /* copy_file_name: STDIN  */
#line 218 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.str) = NULL; }
#line 24597 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 666: /* copy_file_name: STDOUT  */
#line 219 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.str) = NULL; }
#line 24603 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 667: /* copy_generic_opt_list: copy_generic_opt_elem  */
#line 225 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].defelt));
				}
#line 24611 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 668: /* copy_generic_opt_list: copy_generic_opt_list ',' copy_generic_opt_elem  */
#line 229 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt));
				}
#line 24619 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 671: /* select_with_parens: '(' select_no_parens ')'  */
#line 52 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[-1].node); }
#line 24625 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 672: /* select_with_parens: '(' select_with_parens ')'  */
#line 53 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.node) = (yyvsp[-1].node); }
#line 24631 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 673: /* select_no_parens: simple_select  */
#line 68 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 24637 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 674: /* select_no_parens: select_clause sort_clause  */
#line 70 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-1].node), (yyvsp[0].list), NIL,
										NULL, NULL, NULL,
										yyscanner);
					(yyval.node) = (yyvsp[-1].node);
				}
#line 24648 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 675: /* select_no_parens: select_clause opt_sort_clause for_locking_clause opt_select_limit  */
#line 77 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-3].node), (yyvsp[-2].list), (yyvsp[-1].list),
										(PGNode*) list_nth((yyvsp[0].list), 0), (PGNode*) list_nth((yyvsp[0].list), 1),
										NULL,
										yyscanner);
					(yyval.node) = (yyvsp[-3].node);
				}
#line 24660 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 676: /* select_no_parens: select_clause opt_sort_clause select_limit opt_for_locking_clause  */
#line 85 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-3].node), (yyvsp[-2].list), (yyvsp[0].list),
										(PGNode*) list_nth((yyvsp[-1].list), 0), (PGNode*) list_nth((yyvsp[-1].list), 1),
										NULL,
										yyscanner);
					(yyval.node) = (yyvsp[-3].node);
				}
#line 24672 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 677: /* select_no_parens: with_clause select_clause  */
#line 93 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[0].node), NULL, NIL,
										NULL, NULL,
										(yyvsp[-1].with),
										yyscanner);
					(yyval.node) = (yyvsp[0].node);
				}
#line 24684 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 678: /* select_no_parens: with_clause select_clause sort_clause  */
#line 101 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-1].node), (yyvsp[0].list), NIL,
										NULL, NULL,
										(yyvsp[-2].with),
										yyscanner);
					(yyval.node) = (yyvsp[-1].node);
				}
#line 24696 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 679: /* select_no_parens: with_clause select_clause opt_sort_clause for_locking_clause opt_select_limit  */
#line 109 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-3].node), (yyvsp[-2].list), (yyvsp[-1].list),
										(PGNode*) list_nth((yyvsp[0].list), 0), (PGNode*) list_nth((yyvsp[0].list), 1),
										(yyvsp[-4].with),
										yyscanner);
					(yyval.node) = (yyvsp[-3].node);
				}
#line 24708 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 680: /* select_no_parens: with_clause select_clause opt_sort_clause select_limit opt_for_locking_clause  */
#line 117 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-3].node), (yyvsp[-2].list), (yyvsp[0].list),
										(PGNode*) list_nth((yyvsp[-1].list), 0), (PGNode*) list_nth((yyvsp[-1].list), 1),
										(yyvsp[-4].with),
										yyscanner);
					(yyval.node) = (yyvsp[-3].node);
				}
#line 24720 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 681: /* select_clause: simple_select  */
#line 127 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 24726 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 682: /* select_clause: select_with_parens  */
#line 128 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 24732 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 683: /* opt_select: SELECT opt_all_clause opt_target_list_opt_comma  */
#line 156 "third_party/libpg_query/grammar/statements/select.y"
                        {
				(yyval.list) = (yyvsp[0].list);
			}
#line 24740 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 684: /* opt_select: %empty  */
#line 160 "third_party/libpg_query/grammar/statements/select.y"
                        {
				PGAStar *star = makeNode(PGAStar);
				(yyval.list) = list_make1(star);
			}
#line 24749 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 685: /* simple_select: SELECT opt_all_clause opt_target_list_opt_comma into_clause from_clause where_clause group_clause having_clause window_clause qualify_clause sample_clause  */
#line 171 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *n = makeNode(PGSelectStmt);
					n->targetList = (yyvsp[-8].list);
					n->intoClause = (yyvsp[-7].into);
					n->fromClause = (yyvsp[-6].list);
					n->whereClause = (yyvsp[-5].node);
					n->groupClause = (yyvsp[-4].list);
					n->havingClause = (yyvsp[-3].node);
					n->windowClause = (yyvsp[-2].list);
					n->qualifyClause = (yyvsp[-1].node);
					n->sampleOptions = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 24767 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 686: /* simple_select: SELECT distinct_clause target_list_opt_comma into_clause from_clause where_clause group_clause having_clause window_clause qualify_clause sample_clause  */
#line 187 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *n = makeNode(PGSelectStmt);
					n->distinctClause = (yyvsp[-9].list);
					n->targetList = (yyvsp[-8].list);
					n->intoClause = (yyvsp[-7].into);
					n->fromClause = (yyvsp[-6].list);
					n->whereClause = (yyvsp[-5].node);
					n->groupClause = (yyvsp[-4].list);
					n->havingClause = (yyvsp[-3].node);
					n->windowClause = (yyvsp[-2].list);
					n->qualifyClause = (yyvsp[-1].node);
					n->sampleOptions = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 24786 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 687: /* simple_select: FROM from_list opt_select into_clause where_clause group_clause having_clause window_clause qualify_clause sample_clause  */
#line 204 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *n = makeNode(PGSelectStmt);
					n->targetList = (yyvsp[-7].list);
					n->fromClause = (yyvsp[-8].list);
					n->intoClause = (yyvsp[-6].into);
					n->whereClause = (yyvsp[-5].node);
					n->groupClause = (yyvsp[-4].list);
					n->havingClause = (yyvsp[-3].node);
					n->windowClause = (yyvsp[-2].list);
					n->qualifyClause = (yyvsp[-1].node);
					n->sampleOptions = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 24804 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 688: /* simple_select: FROM from_list SELECT distinct_clause target_list_opt_comma into_clause where_clause group_clause having_clause window_clause qualify_clause sample_clause  */
#line 221 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *n = makeNode(PGSelectStmt);
					n->targetList = (yyvsp[-7].list);
					n->distinctClause = (yyvsp[-8].list);
					n->fromClause = (yyvsp[-10].list);
					n->intoClause = (yyvsp[-6].into);
					n->whereClause = (yyvsp[-5].node);
					n->groupClause = (yyvsp[-4].list);
					n->havingClause = (yyvsp[-3].node);
					n->windowClause = (yyvsp[-2].list);
					n->qualifyClause = (yyvsp[-1].node);
					n->sampleOptions = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 24823 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 689: /* simple_select: values_clause_opt_comma  */
#line 235 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 24829 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 690: /* simple_select: TABLE relation_expr  */
#line 237 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* same as SELECT * FROM relation_expr */
					PGColumnRef *cr = makeNode(PGColumnRef);
					PGResTarget *rt = makeNode(PGResTarget);
					PGSelectStmt *n = makeNode(PGSelectStmt);

					cr->fields = list_make1(makeNode(PGAStar));
					cr->location = -1;

					rt->name = NULL;
					rt->indirection = NIL;
					rt->val = (PGNode *)cr;
					rt->location = -1;

					n->targetList = list_make1(rt);
					n->fromClause = list_make1((yyvsp[0].range));
					(yyval.node) = (PGNode *)n;
				}
#line 24852 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 691: /* simple_select: select_clause UNION all_or_distinct by_name select_clause  */
#line 256 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSetOp(PG_SETOP_UNION_BY_NAME, (yyvsp[-2].boolean), (yyvsp[-4].node), (yyvsp[0].node));
				}
#line 24860 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 692: /* simple_select: select_clause UNION all_or_distinct select_clause  */
#line 260 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSetOp(PG_SETOP_UNION, (yyvsp[-1].boolean), (yyvsp[-3].node), (yyvsp[0].node));
				}
#line 24868 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 693: /* simple_select: select_clause INTERSECT all_or_distinct select_clause  */
#line 264 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSetOp(PG_SETOP_INTERSECT, (yyvsp[-1].boolean), (yyvsp[-3].node), (yyvsp[0].node));
				}
#line 24876 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 694: /* simple_select: select_clause EXCEPT all_or_distinct select_clause  */
#line 268 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSetOp(PG_SETOP_EXCEPT, (yyvsp[-1].boolean), (yyvsp[-3].node), (yyvsp[0].node));
				}
#line 24884 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 695: /* simple_select: pivot_keyword table_ref USING target_list_opt_comma  */
#line 272 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *res = makeNode(PGSelectStmt);
					PGPivotStmt *n = makeNode(PGPivotStmt);
					n->source = (yyvsp[-2].node);
					n->aggrs = (yyvsp[0].list);
					res->pivot = n;
					(yyval.node) = (PGNode *)res;
				}
#line 24897 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 696: /* simple_select: pivot_keyword table_ref USING target_list_opt_comma GROUP_P BY name_list_opt_comma_opt_bracket  */
#line 281 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *res = makeNode(PGSelectStmt);
					PGPivotStmt *n = makeNode(PGPivotStmt);
					n->source = (yyvsp[-5].node);
					n->aggrs = (yyvsp[-3].list);
					n->groups = (yyvsp[0].list);
					res->pivot = n;
					(yyval.node) = (PGNode *)res;
				}
#line 24911 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 697: /* simple_select: pivot_keyword table_ref GROUP_P BY name_list_opt_comma_opt_bracket  */
#line 291 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *res = makeNode(PGSelectStmt);
					PGPivotStmt *n = makeNode(PGPivotStmt);
					n->source = (yyvsp[-3].node);
					n->groups = (yyvsp[0].list);
					res->pivot = n;
					(yyval.node) = (PGNode *)res;
				}
#line 24924 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 698: /* simple_select: pivot_keyword table_ref ON pivot_column_list  */
#line 300 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *res = makeNode(PGSelectStmt);
					PGPivotStmt *n = makeNode(PGPivotStmt);
					n->source = (yyvsp[-2].node);
					n->columns = (yyvsp[0].list);
					res->pivot = n;
					(yyval.node) = (PGNode *)res;
				}
#line 24937 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 699: /* simple_select: pivot_keyword table_ref ON pivot_column_list GROUP_P BY name_list_opt_comma_opt_bracket  */
#line 309 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *res = makeNode(PGSelectStmt);
					PGPivotStmt *n = makeNode(PGPivotStmt);
					n->source = (yyvsp[-5].node);
					n->columns = (yyvsp[-3].list);
					n->groups = (yyvsp[0].list);
					res->pivot = n;
					(yyval.node) = (PGNode *)res;
				}
#line 24951 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 700: /* simple_select: pivot_keyword table_ref ON pivot_column_list USING target_list_opt_comma  */
#line 319 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *res = makeNode(PGSelectStmt);
					PGPivotStmt *n = makeNode(PGPivotStmt);
					n->source = (yyvsp[-4].node);
					n->columns = (yyvsp[-2].list);
					n->aggrs = (yyvsp[0].list);
					res->pivot = n;
					(yyval.node) = (PGNode *)res;
				}
#line 24965 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 701: /* simple_select: pivot_keyword table_ref ON pivot_column_list USING target_list_opt_comma GROUP_P BY name_list_opt_comma_opt_bracket  */
#line 329 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *res = makeNode(PGSelectStmt);
					PGPivotStmt *n = makeNode(PGPivotStmt);
					n->source = (yyvsp[-7].node);
					n->columns = (yyvsp[-5].list);
					n->aggrs = (yyvsp[-3].list);
					n->groups = (yyvsp[0].list);
					res->pivot = n;
					(yyval.node) = (PGNode *)res;
				}
#line 24980 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 702: /* simple_select: unpivot_keyword table_ref ON target_list_opt_comma INTO NAME_P name value_or_values name_list_opt_comma_opt_bracket  */
#line 340 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *res = makeNode(PGSelectStmt);
					PGPivotStmt *n = makeNode(PGPivotStmt);
					n->source = (yyvsp[-7].node);
					n->unpivots = (yyvsp[0].list);
					PGPivot *piv = makeNode(PGPivot);
					piv->unpivot_columns = list_make1(makeString((yyvsp[-2].str)));
					piv->pivot_value = (yyvsp[-5].list);
					n->columns = list_make1(piv);

					res->pivot = n;
					(yyval.node) = (PGNode *)res;
				}
#line 24998 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 703: /* simple_select: unpivot_keyword table_ref ON target_list_opt_comma  */
#line 354 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *res = makeNode(PGSelectStmt);
					PGPivotStmt *n = makeNode(PGPivotStmt);
					n->source = (yyvsp[-2].node);
					n->unpivots = list_make1(makeString("value"));
					PGPivot *piv = makeNode(PGPivot);
					piv->unpivot_columns = list_make1(makeString("name"));
					piv->pivot_value = (yyvsp[0].list);
					n->columns = list_make1(piv);

					res->pivot = n;
					(yyval.node) = (PGNode *)res;
				}
#line 25016 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 710: /* pivot_column_entry: b_expr  */
#line 383 "third_party/libpg_query/grammar/statements/select.y"
                        {
				PGPivot *n = makeNode(PGPivot);
				n->pivot_columns = list_make1((yyvsp[0].node));
				(yyval.node) = (PGNode *) n;
			}
#line 25026 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 711: /* pivot_column_entry: b_expr IN_P '(' select_no_parens ')'  */
#line 389 "third_party/libpg_query/grammar/statements/select.y"
                        {
				PGPivot *n = makeNode(PGPivot);
				n->pivot_columns = list_make1((yyvsp[-4].node));
				n->subquery = (yyvsp[-1].node);
				(yyval.node) = (PGNode *) n;
			}
#line 25037 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 712: /* pivot_column_entry: single_pivot_value  */
#line 395 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 25043 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 713: /* pivot_column_list_internal: pivot_column_entry  */
#line 399 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 25049 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 714: /* pivot_column_list_internal: pivot_column_list_internal ',' pivot_column_entry  */
#line 400 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 25055 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 715: /* pivot_column_list: pivot_column_list_internal  */
#line 404 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 25061 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 716: /* pivot_column_list: pivot_column_list_internal ','  */
#line 405 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 25067 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 717: /* with_clause: WITH cte_list  */
#line 420 "third_party/libpg_query/grammar/statements/select.y"
                        {
				(yyval.with) = makeNode(PGWithClause);
				(yyval.with)->ctes = (yyvsp[0].list);
				(yyval.with)->recursive = false;
				(yyval.with)->location = (yylsp[-1]);
			}
#line 25078 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 718: /* with_clause: WITH_LA cte_list  */
#line 427 "third_party/libpg_query/grammar/statements/select.y"
                        {
				(yyval.with) = makeNode(PGWithClause);
				(yyval.with)->ctes = (yyvsp[0].list);
				(yyval.with)->recursive = false;
				(yyval.with)->location = (yylsp[-1]);
			}
#line 25089 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 719: /* with_clause: WITH RECURSIVE cte_list  */
#line 434 "third_party/libpg_query/grammar/statements/select.y"
                        {
				(yyval.with) = makeNode(PGWithClause);
				(yyval.with)->ctes = (yyvsp[0].list);
				(yyval.with)->recursive = true;
				(yyval.with)->location = (yylsp[-2]);
			}
#line 25100 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 720: /* cte_list: common_table_expr  */
#line 443 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 25106 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 721: /* cte_list: cte_list ',' common_table_expr  */
#line 444 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 25112 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 722: /* common_table_expr: name opt_name_list AS '(' PreparableStmt ')'  */
#line 448 "third_party/libpg_query/grammar/statements/select.y"
                        {
				PGCommonTableExpr *n = makeNode(PGCommonTableExpr);
				n->ctename = (yyvsp[-5].str);
				n->aliascolnames = (yyvsp[-4].list);
				n->ctequery = (yyvsp[-1].node);
				n->location = (yylsp[-5]);
				(yyval.node) = (PGNode *) n;
			}
#line 25125 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 723: /* into_clause: INTO OptTempTableName  */
#line 460 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.into) = makeNode(PGIntoClause);
					(yyval.into)->rel = (yyvsp[0].range);
					(yyval.into)->colNames = NIL;
					(yyval.into)->options = NIL;
					(yyval.into)->onCommit = PG_ONCOMMIT_NOOP;
					(yyval.into)->viewQuery = NULL;
					(yyval.into)->skipData = false;
				}
#line 25139 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 724: /* into_clause: %empty  */
#line 470 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.into) = NULL; }
#line 25145 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 725: /* OptTempTableName: TEMPORARY opt_table qualified_name  */
#line 479 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 25154 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 726: /* OptTempTableName: TEMP opt_table qualified_name  */
#line 484 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 25163 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 727: /* OptTempTableName: LOCAL TEMPORARY opt_table qualified_name  */
#line 489 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 25172 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 728: /* OptTempTableName: LOCAL TEMP opt_table qualified_name  */
#line 494 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 25181 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 729: /* OptTempTableName: GLOBAL TEMPORARY opt_table qualified_name  */
#line 499 "third_party/libpg_query/grammar/statements/select.y"
                                {
					ereport(PGWARNING,
							(errmsg("GLOBAL is deprecated in temporary table creation"),
							 parser_errposition((yylsp[-3]))));
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 25193 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 730: /* OptTempTableName: GLOBAL TEMP opt_table qualified_name  */
#line 507 "third_party/libpg_query/grammar/statements/select.y"
                                {
					ereport(PGWARNING,
							(errmsg("GLOBAL is deprecated in temporary table creation"),
							 parser_errposition((yylsp[-3]))));
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 25205 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 731: /* OptTempTableName: UNLOGGED opt_table qualified_name  */
#line 515 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_UNLOGGED;
				}
#line 25214 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 732: /* OptTempTableName: TABLE qualified_name  */
#line 520 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = RELPERSISTENCE_PERMANENT;
				}
#line 25223 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 733: /* OptTempTableName: qualified_name  */
#line 525 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = RELPERSISTENCE_PERMANENT;
				}
#line 25232 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 734: /* opt_table: TABLE  */
#line 531 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        {}
#line 25238 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 735: /* opt_table: %empty  */
#line 532 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                {}
#line 25244 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 736: /* all_or_distinct: ALL  */
#line 536 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.boolean) = true; }
#line 25250 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 737: /* all_or_distinct: DISTINCT  */
#line 537 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 25256 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 738: /* all_or_distinct: %empty  */
#line 538 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 25262 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 739: /* by_name: BY NAME_P  */
#line 542 "third_party/libpg_query/grammar/statements/select.y"
                                                          { }
#line 25268 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 740: /* distinct_clause: DISTINCT  */
#line 549 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1(NIL); }
#line 25274 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 741: /* distinct_clause: DISTINCT ON '(' expr_list_opt_comma ')'  */
#line 550 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 25280 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 742: /* opt_all_clause: ALL  */
#line 554 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.list) = NIL;}
#line 25286 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 743: /* opt_all_clause: %empty  */
#line 555 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 25292 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 744: /* opt_ignore_nulls: IGNORE_P NULLS_P  */
#line 559 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.boolean) = true;}
#line 25298 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 745: /* opt_ignore_nulls: RESPECT_P NULLS_P  */
#line 560 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.boolean) = false;}
#line 25304 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 746: /* opt_ignore_nulls: %empty  */
#line 561 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 25310 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 747: /* opt_sort_clause: sort_clause  */
#line 565 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list);}
#line 25316 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 748: /* opt_sort_clause: %empty  */
#line 566 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 25322 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 749: /* sort_clause: ORDER BY sortby_list  */
#line 570 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 25328 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 750: /* sort_clause: ORDER BY ALL opt_asc_desc opt_nulls_order  */
#line 572 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSortBy *sort = makeNode(PGSortBy);
					PGAStar *star = makeNode(PGAStar);
					star->columns = true;
					star->location = (yylsp[-2]);
					sort->node = (PGNode *) star;
					sort->sortby_dir = (yyvsp[-1].sortorder);
					sort->sortby_nulls = (yyvsp[0].nullorder);
					sort->useOp = NIL;
					sort->location = -1;		/* no operator */
					(yyval.list) = list_make1(sort);
				}
#line 25345 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 751: /* sortby_list: sortby  */
#line 587 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].sortby)); }
#line 25351 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 752: /* sortby_list: sortby_list ',' sortby  */
#line 588 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].sortby)); }
#line 25357 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 753: /* sortby: a_expr USING qual_all_Op opt_nulls_order  */
#line 592 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.sortby) = makeNode(PGSortBy);
					(yyval.sortby)->node = (yyvsp[-3].node);
					(yyval.sortby)->sortby_dir = SORTBY_USING;
					(yyval.sortby)->sortby_nulls = (yyvsp[0].nullorder);
					(yyval.sortby)->useOp = (yyvsp[-1].list);
					(yyval.sortby)->location = (yylsp[-1]);
				}
#line 25370 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 754: /* sortby: a_expr opt_asc_desc opt_nulls_order  */
#line 601 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.sortby) = makeNode(PGSortBy);
					(yyval.sortby)->node = (yyvsp[-2].node);
					(yyval.sortby)->sortby_dir = (yyvsp[-1].sortorder);
					(yyval.sortby)->sortby_nulls = (yyvsp[0].nullorder);
					(yyval.sortby)->useOp = NIL;
					(yyval.sortby)->location = -1;		/* no operator */
				}
#line 25383 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 755: /* opt_asc_desc: ASC_P  */
#line 611 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.sortorder) = PG_SORTBY_ASC; }
#line 25389 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 756: /* opt_asc_desc: DESC_P  */
#line 612 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.sortorder) = PG_SORTBY_DESC; }
#line 25395 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 757: /* opt_asc_desc: %empty  */
#line 613 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.sortorder) = PG_SORTBY_DEFAULT; }
#line 25401 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 758: /* opt_nulls_order: NULLS_LA FIRST_P  */
#line 616 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.nullorder) = PG_SORTBY_NULLS_FIRST; }
#line 25407 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 759: /* opt_nulls_order: NULLS_LA LAST_P  */
#line 617 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.nullorder) = PG_SORTBY_NULLS_LAST; }
#line 25413 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 760: /* opt_nulls_order: %empty  */
#line 618 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.nullorder) = PG_SORTBY_NULLS_DEFAULT; }
#line 25419 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 761: /* select_limit: limit_clause offset_clause  */
#line 622 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = list_make2((yyvsp[0].node), (yyvsp[-1].node)); }
#line 25425 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 762: /* select_limit: offset_clause limit_clause  */
#line 623 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = list_make2((yyvsp[-1].node), (yyvsp[0].node)); }
#line 25431 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 763: /* select_limit: limit_clause  */
#line 624 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = list_make2(NULL, (yyvsp[0].node)); }
#line 25437 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 764: /* select_limit: offset_clause  */
#line 625 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = list_make2((yyvsp[0].node), NULL); }
#line 25443 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 765: /* opt_select_limit: select_limit  */
#line 629 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 25449 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 766: /* opt_select_limit: %empty  */
#line 630 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = list_make2(NULL,NULL); }
#line 25455 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 767: /* limit_clause: LIMIT select_limit_value  */
#line 635 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 25461 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 768: /* limit_clause: LIMIT select_limit_value ',' select_offset_value  */
#line 637 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* Disabled because it was too confusing, bjm 2002-02-18 */
					ereport(ERROR,
							(errcode(PG_ERRCODE_SYNTAX_ERROR),
							 errmsg("LIMIT #,# syntax is not supported"),
							 errhint("Use separate LIMIT and OFFSET clauses."),
							 parser_errposition((yylsp[-3]))));
				}
#line 25474 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 769: /* limit_clause: FETCH first_or_next select_fetch_first_value row_or_rows ONLY  */
#line 653 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[-2].node); }
#line 25480 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 770: /* limit_clause: FETCH first_or_next row_or_rows ONLY  */
#line 655 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeIntConst(1, -1); }
#line 25486 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 771: /* offset_clause: OFFSET select_offset_value  */
#line 660 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 25492 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 772: /* offset_clause: OFFSET select_fetch_first_value row_or_rows  */
#line 663 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[-1].node); }
#line 25498 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 773: /* sample_count: FCONST '%'  */
#line 671 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleSize(makeFloat((yyvsp[-1].str)), true);
		}
#line 25506 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 774: /* sample_count: ICONST '%'  */
#line 675 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleSize(makeInteger((yyvsp[-1].ival)), true);
		}
#line 25514 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 775: /* sample_count: FCONST PERCENT  */
#line 679 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleSize(makeFloat((yyvsp[-1].str)), true);
		}
#line 25522 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 776: /* sample_count: ICONST PERCENT  */
#line 683 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleSize(makeInteger((yyvsp[-1].ival)), true);
		}
#line 25530 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 777: /* sample_count: ICONST  */
#line 687 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleSize(makeInteger((yyvsp[0].ival)), false);
		}
#line 25538 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 778: /* sample_count: ICONST ROWS  */
#line 691 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleSize(makeInteger((yyvsp[-1].ival)), false);
		}
#line 25546 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 779: /* sample_clause: USING SAMPLE tablesample_entry  */
#line 698 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (yyvsp[0].node);
				}
#line 25554 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 780: /* sample_clause: %empty  */
#line 702 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = NULL; }
#line 25560 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 781: /* opt_sample_func: ColId  */
#line 709 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.str) = (yyvsp[0].str); }
#line 25566 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 782: /* opt_sample_func: %empty  */
#line 710 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.str) = NULL; }
#line 25572 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 783: /* tablesample_entry: opt_sample_func '(' sample_count ')' opt_repeatable_clause  */
#line 715 "third_party/libpg_query/grammar/statements/select.y"
                                {
					int seed = (yyvsp[0].ival);
					(yyval.node) = makeSampleOptions((yyvsp[-2].node), (yyvsp[-4].str), &seed, (yylsp[-4]));
				}
#line 25581 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 784: /* tablesample_entry: sample_count  */
#line 720 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleOptions((yyvsp[0].node), NULL, NULL, (yylsp[0]));
		}
#line 25589 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 785: /* tablesample_entry: sample_count '(' ColId ')'  */
#line 724 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleOptions((yyvsp[-3].node), (yyvsp[-1].str), NULL, (yylsp[-3]));
		}
#line 25597 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 786: /* tablesample_entry: sample_count '(' ColId ',' ICONST ')'  */
#line 728 "third_party/libpg_query/grammar/statements/select.y"
                {
			int seed = (yyvsp[-1].ival);
			(yyval.node) = makeSampleOptions((yyvsp[-5].node), (yyvsp[-3].str), &seed, (yylsp[-5]));
		}
#line 25606 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 787: /* tablesample_clause: TABLESAMPLE tablesample_entry  */
#line 736 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (yyvsp[0].node);
				}
#line 25614 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 788: /* opt_tablesample_clause: tablesample_clause  */
#line 742 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.node) = (yyvsp[0].node); }
#line 25620 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 789: /* opt_tablesample_clause: %empty  */
#line 743 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.node) = NULL; }
#line 25626 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 790: /* opt_repeatable_clause: REPEATABLE '(' ICONST ')'  */
#line 748 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.ival) = (yyvsp[-1].ival); }
#line 25632 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 791: /* opt_repeatable_clause: %empty  */
#line 749 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.ival) = -1; }
#line 25638 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 792: /* select_limit_value: a_expr  */
#line 753 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 25644 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 793: /* select_limit_value: ALL  */
#line 755 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* LIMIT ALL is represented as a NULL constant */
					(yyval.node) = makeNullAConst((yylsp[0]));
				}
#line 25653 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 794: /* select_limit_value: a_expr '%'  */
#line 760 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeLimitPercent((yyvsp[-1].node)); }
#line 25659 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 795: /* select_limit_value: FCONST PERCENT  */
#line 762 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeLimitPercent(makeFloatConst((yyvsp[-1].str),(yylsp[-1]))); }
#line 25665 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 796: /* select_limit_value: ICONST PERCENT  */
#line 764 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeLimitPercent(makeIntConst((yyvsp[-1].ival),(yylsp[-1]))); }
#line 25671 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 797: /* select_offset_value: a_expr  */
#line 768 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 25677 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 798: /* select_fetch_first_value: c_expr  */
#line 788 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 25683 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 799: /* select_fetch_first_value: '+' I_or_F_const  */
#line 790 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", NULL, (yyvsp[0].node), (yylsp[-1])); }
#line 25689 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 800: /* select_fetch_first_value: '-' I_or_F_const  */
#line 792 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = doNegate((yyvsp[0].node), (yylsp[-1])); }
#line 25695 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 801: /* I_or_F_const: Iconst  */
#line 796 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = makeIntConst((yyvsp[0].ival),(yylsp[0])); }
#line 25701 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 802: /* I_or_F_const: FCONST  */
#line 797 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = makeFloatConst((yyvsp[0].str),(yylsp[0])); }
#line 25707 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 803: /* row_or_rows: ROW  */
#line 801 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.ival) = 0; }
#line 25713 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 804: /* row_or_rows: ROWS  */
#line 802 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.ival) = 0; }
#line 25719 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 805: /* first_or_next: FIRST_P  */
#line 805 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.ival) = 0; }
#line 25725 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 806: /* first_or_next: NEXT  */
#line 806 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.ival) = 0; }
#line 25731 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 807: /* group_clause: GROUP_P BY group_by_list_opt_comma  */
#line 831 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 25737 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 808: /* group_clause: GROUP_P BY ALL  */
#line 833 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNode *node = (PGNode *) makeGroupingSet(GROUPING_SET_ALL, NIL, (yylsp[0]));
					(yyval.list) = list_make1(node);
				}
#line 25746 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 809: /* group_clause: %empty  */
#line 837 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 25752 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 810: /* group_by_list: group_by_item  */
#line 841 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 25758 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 811: /* group_by_list: group_by_list ',' group_by_item  */
#line 842 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list),(yyvsp[0].node)); }
#line 25764 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 812: /* group_by_list_opt_comma: group_by_list  */
#line 846 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 25770 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 813: /* group_by_list_opt_comma: group_by_list ','  */
#line 847 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 25776 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 814: /* group_by_item: a_expr  */
#line 851 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 25782 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 815: /* group_by_item: empty_grouping_set  */
#line 852 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 25788 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 816: /* group_by_item: cube_clause  */
#line 853 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 25794 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 817: /* group_by_item: rollup_clause  */
#line 854 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 25800 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 818: /* group_by_item: grouping_sets_clause  */
#line 855 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 25806 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 819: /* empty_grouping_set: '(' ')'  */
#line 860 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeGroupingSet(GROUPING_SET_EMPTY, NIL, (yylsp[-1]));
				}
#line 25814 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 820: /* rollup_clause: ROLLUP '(' expr_list_opt_comma ')'  */
#line 873 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeGroupingSet(GROUPING_SET_ROLLUP, (yyvsp[-1].list), (yylsp[-3]));
				}
#line 25822 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 821: /* cube_clause: CUBE '(' expr_list_opt_comma ')'  */
#line 880 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeGroupingSet(GROUPING_SET_CUBE, (yyvsp[-1].list), (yylsp[-3]));
				}
#line 25830 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 822: /* grouping_sets_clause: GROUPING SETS '(' group_by_list_opt_comma ')'  */
#line 887 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeGroupingSet(GROUPING_SET_SETS, (yyvsp[-1].list), (yylsp[-4]));
				}
#line 25838 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 823: /* grouping_or_grouping_id: GROUPING  */
#line 893 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = NULL; }
#line 25844 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 824: /* grouping_or_grouping_id: GROUPING_ID  */
#line 894 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = NULL; }
#line 25850 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 825: /* having_clause: HAVING a_expr  */
#line 898 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 25856 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 826: /* having_clause: %empty  */
#line 899 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 25862 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 827: /* qualify_clause: QUALIFY a_expr  */
#line 903 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 25868 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 828: /* qualify_clause: %empty  */
#line 904 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 25874 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 829: /* for_locking_clause: for_locking_items  */
#line 908 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 25880 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 830: /* for_locking_clause: FOR READ_P ONLY  */
#line 909 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 25886 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 831: /* opt_for_locking_clause: for_locking_clause  */
#line 913 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 25892 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 832: /* opt_for_locking_clause: %empty  */
#line 914 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = NIL; }
#line 25898 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 833: /* for_locking_items: for_locking_item  */
#line 918 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 25904 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 834: /* for_locking_items: for_locking_items for_locking_item  */
#line 919 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 25910 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 835: /* for_locking_item: for_locking_strength locked_rels_list opt_nowait_or_skip  */
#line 924 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGLockingClause *n = makeNode(PGLockingClause);
					n->lockedRels = (yyvsp[-1].list);
					n->strength = (yyvsp[-2].lockstrength);
					n->waitPolicy = (yyvsp[0].lockwaitpolicy);
					(yyval.node) = (PGNode *) n;
				}
#line 25922 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 836: /* for_locking_strength: FOR UPDATE  */
#line 934 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.lockstrength) = LCS_FORUPDATE; }
#line 25928 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 837: /* for_locking_strength: FOR NO KEY UPDATE  */
#line 935 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.lockstrength) = PG_LCS_FORNOKEYUPDATE; }
#line 25934 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 838: /* for_locking_strength: FOR SHARE  */
#line 936 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.lockstrength) = PG_LCS_FORSHARE; }
#line 25940 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 839: /* for_locking_strength: FOR KEY SHARE  */
#line 937 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.lockstrength) = PG_LCS_FORKEYSHARE; }
#line 25946 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 840: /* locked_rels_list: OF qualified_name_list  */
#line 941 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 25952 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 841: /* locked_rels_list: %empty  */
#line 942 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = NIL; }
#line 25958 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 842: /* opt_nowait_or_skip: NOWAIT  */
#line 947 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.lockwaitpolicy) = LockWaitError; }
#line 25964 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 843: /* opt_nowait_or_skip: SKIP LOCKED  */
#line 948 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.lockwaitpolicy) = PGLockWaitSkip; }
#line 25970 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 844: /* opt_nowait_or_skip: %empty  */
#line 949 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.lockwaitpolicy) = PGLockWaitBlock; }
#line 25976 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 845: /* values_clause: VALUES '(' expr_list_opt_comma ')'  */
#line 959 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *n = makeNode(PGSelectStmt);
					n->valuesLists = list_make1((yyvsp[-1].list));
					(yyval.node) = (PGNode *) n;
				}
#line 25986 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 846: /* values_clause: values_clause ',' '(' expr_list_opt_comma ')'  */
#line 965 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *n = (PGSelectStmt *) (yyvsp[-4].node);
					n->valuesLists = lappend(n->valuesLists, (yyvsp[-1].list));
					(yyval.node) = (PGNode *) n;
				}
#line 25996 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 847: /* values_clause_opt_comma: values_clause  */
#line 973 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.node) = (yyvsp[0].node); }
#line 26002 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 848: /* values_clause_opt_comma: values_clause ','  */
#line 974 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.node) = (yyvsp[-1].node); }
#line 26008 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 849: /* from_clause: FROM from_list_opt_comma  */
#line 987 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 26014 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 850: /* from_clause: %empty  */
#line 988 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 26020 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 851: /* from_list: table_ref  */
#line 992 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 26026 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 852: /* from_list: from_list ',' table_ref  */
#line 993 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 26032 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 853: /* from_list_opt_comma: from_list  */
#line 997 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 26038 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 854: /* from_list_opt_comma: from_list ','  */
#line 998 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 26044 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 855: /* table_ref: relation_expr opt_alias_clause opt_tablesample_clause  */
#line 1005 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyvsp[-2].range)->alias = (yyvsp[-1].alias);
					(yyvsp[-2].range)->sample = (yyvsp[0].node);
					(yyval.node) = (PGNode *) (yyvsp[-2].range);
				}
#line 26054 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 856: /* table_ref: func_table func_alias_clause opt_tablesample_clause  */
#line 1011 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeFunction *n = (PGRangeFunction *) (yyvsp[-2].node);
					n->alias = (PGAlias*) linitial((yyvsp[-1].list));
					n->coldeflist = (PGList*) lsecond((yyvsp[-1].list));
					n->sample = (yyvsp[0].node);
					(yyval.node) = (PGNode *) n;
				}
#line 26066 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 857: /* table_ref: values_clause_opt_comma alias_clause opt_tablesample_clause  */
#line 1019 "third_party/libpg_query/grammar/statements/select.y"
                        {
				PGRangeSubselect *n = makeNode(PGRangeSubselect);
				n->lateral = false;
				n->subquery = (yyvsp[-2].node);
				n->alias = (yyvsp[-1].alias);
				n->sample = (yyvsp[0].node);
				(yyval.node) = (PGNode *) n;
			}
#line 26079 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 858: /* table_ref: LATERAL_P func_table func_alias_clause  */
#line 1028 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeFunction *n = (PGRangeFunction *) (yyvsp[-1].node);
					n->lateral = true;
					n->alias = (PGAlias*) linitial((yyvsp[0].list));
					n->coldeflist = (PGList*) lsecond((yyvsp[0].list));
					(yyval.node) = (PGNode *) n;
				}
#line 26091 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 859: /* table_ref: select_with_parens opt_alias_clause opt_tablesample_clause  */
#line 1036 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeSubselect *n = makeNode(PGRangeSubselect);
					n->lateral = false;
					n->subquery = (yyvsp[-2].node);
					n->alias = (yyvsp[-1].alias);
					n->sample = (yyvsp[0].node);
					(yyval.node) = (PGNode *) n;
				}
#line 26104 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 860: /* table_ref: LATERAL_P select_with_parens opt_alias_clause  */
#line 1045 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeSubselect *n = makeNode(PGRangeSubselect);
					n->lateral = true;
					n->subquery = (yyvsp[-1].node);
					n->alias = (yyvsp[0].alias);
					n->sample = NULL;
					(yyval.node) = (PGNode *) n;
				}
#line 26117 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 861: /* table_ref: joined_table  */
#line 1054 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) (yyvsp[0].jexpr);
				}
#line 26125 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 862: /* table_ref: '(' joined_table ')' alias_clause  */
#line 1058 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyvsp[-2].jexpr)->alias = (yyvsp[0].alias);
					(yyval.node) = (PGNode *) (yyvsp[-2].jexpr);
				}
#line 26134 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 863: /* table_ref: GRAPH_TABLE GraphTableStmt  */
#line 1063 "third_party/libpg_query/grammar/statements/select.y"
                {
                        (yyval.node) = (PGNode *) (yyvsp[0].node);
                }
#line 26142 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 864: /* table_ref: table_ref PIVOT '(' target_list_opt_comma FOR pivot_value_list opt_pivot_group_by ')' opt_alias_clause  */
#line 1067 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGPivotExpr *n = makeNode(PGPivotExpr);
					n->source = (yyvsp[-8].node);
					n->aggrs = (yyvsp[-5].list);
					n->pivots = (yyvsp[-3].list);
					n->groups = (yyvsp[-2].list);
					n->alias = (yyvsp[0].alias);
					(yyval.node) = (PGNode *) n;
				}
#line 26156 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 865: /* table_ref: table_ref UNPIVOT opt_include_nulls '(' unpivot_header FOR unpivot_value_list ')' opt_alias_clause  */
#line 1077 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGPivotExpr *n = makeNode(PGPivotExpr);
					n->source = (yyvsp[-8].node);
					n->include_nulls = (yyvsp[-6].boolean);
					n->unpivots = (yyvsp[-4].list);
					n->pivots = (yyvsp[-2].list);
					n->alias = (yyvsp[0].alias);
					(yyval.node) = (PGNode *) n;
				}
#line 26170 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 866: /* opt_pivot_group_by: GROUP_P BY name_list_opt_comma  */
#line 1089 "third_party/libpg_query/grammar/statements/select.y"
                                                { (yyval.list) = (yyvsp[0].list); }
#line 26176 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 867: /* opt_pivot_group_by: %empty  */
#line 1090 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = NULL; }
#line 26182 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 868: /* opt_include_nulls: INCLUDE_P NULLS_P  */
#line 1093 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.boolean) = true; }
#line 26188 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 869: /* opt_include_nulls: EXCLUDE NULLS_P  */
#line 1094 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.boolean) = false; }
#line 26194 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 870: /* opt_include_nulls: %empty  */
#line 1095 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.boolean) = false; }
#line 26200 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 871: /* single_pivot_value: b_expr IN_P '(' target_list_opt_comma ')'  */
#line 1099 "third_party/libpg_query/grammar/statements/select.y"
                {
			PGPivot *n = makeNode(PGPivot);
			n->pivot_columns = list_make1((yyvsp[-4].node));
			n->pivot_value = (yyvsp[-1].list);
			(yyval.node) = (PGNode *) n;
		}
#line 26211 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 872: /* single_pivot_value: b_expr IN_P ColIdOrString  */
#line 1107 "third_party/libpg_query/grammar/statements/select.y"
                {
			PGPivot *n = makeNode(PGPivot);
			n->pivot_columns = list_make1((yyvsp[-2].node));
			n->pivot_enum = (yyvsp[0].str);
			(yyval.node) = (PGNode *) n;
		}
#line 26222 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 873: /* pivot_header: d_expr  */
#line 1116 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 26228 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 874: /* pivot_header: '(' c_expr_list_opt_comma ')'  */
#line 1117 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 26234 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 875: /* pivot_value: pivot_header IN_P '(' target_list_opt_comma ')'  */
#line 1121 "third_party/libpg_query/grammar/statements/select.y"
                {
			PGPivot *n = makeNode(PGPivot);
			n->pivot_columns = (yyvsp[-4].list);
			n->pivot_value = (yyvsp[-1].list);
			(yyval.node) = (PGNode *) n;
		}
#line 26245 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 876: /* pivot_value: pivot_header IN_P ColIdOrString  */
#line 1129 "third_party/libpg_query/grammar/statements/select.y"
                {
			PGPivot *n = makeNode(PGPivot);
			n->pivot_columns = (yyvsp[-2].list);
			n->pivot_enum = (yyvsp[0].str);
			(yyval.node) = (PGNode *) n;
		}
#line 26256 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 877: /* pivot_value_list: pivot_value  */
#line 1138 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 26264 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 878: /* pivot_value_list: pivot_value_list pivot_value  */
#line 1142 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node));
				}
#line 26272 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 879: /* unpivot_header: ColIdOrString  */
#line 1148 "third_party/libpg_query/grammar/statements/select.y"
                                                          { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 26278 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 880: /* unpivot_header: '(' name_list_opt_comma ')'  */
#line 1149 "third_party/libpg_query/grammar/statements/select.y"
                                              { (yyval.list) = (yyvsp[-1].list); }
#line 26284 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 881: /* unpivot_value: unpivot_header IN_P '(' target_list_opt_comma ')'  */
#line 1154 "third_party/libpg_query/grammar/statements/select.y"
                {
			PGPivot *n = makeNode(PGPivot);
			n->unpivot_columns = (yyvsp[-4].list);
			n->pivot_value = (yyvsp[-1].list);
			(yyval.node) = (PGNode *) n;
		}
#line 26295 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 882: /* unpivot_value_list: unpivot_value  */
#line 1163 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 26303 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 883: /* unpivot_value_list: unpivot_value_list unpivot_value  */
#line 1167 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node));
				}
#line 26311 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 884: /* joined_table: '(' joined_table ')'  */
#line 1192 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.jexpr) = (yyvsp[-1].jexpr);
				}
#line 26319 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 885: /* joined_table: table_ref CROSS JOIN table_ref  */
#line 1196 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* CROSS JOIN is same as unqualified inner join */
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = PG_JOIN_INNER;
					n->joinreftype = PG_JOIN_REGULAR;
					n->larg = (yyvsp[-3].node);
					n->rarg = (yyvsp[0].node);
					n->usingClause = NIL;
					n->quals = NULL;
					n->location = (yylsp[-2]);
					(yyval.jexpr) = n;
				}
#line 26336 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 886: /* joined_table: table_ref join_type JOIN table_ref join_qual  */
#line 1209 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = (yyvsp[-3].jtype);
					n->joinreftype = PG_JOIN_REGULAR;
					n->larg = (yyvsp[-4].node);
					n->rarg = (yyvsp[-1].node);
					if ((yyvsp[0].node) != NULL && IsA((yyvsp[0].node), PGList))
						n->usingClause = (PGList *) (yyvsp[0].node); /* USING clause */
					else
						n->quals = (yyvsp[0].node); /* ON clause */
					n->location = (yylsp[-3]);
					(yyval.jexpr) = n;
				}
#line 26354 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 887: /* joined_table: table_ref JOIN table_ref join_qual  */
#line 1223 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* letting join_type reduce to empty doesn't work */
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = PG_JOIN_INNER;
					n->joinreftype = PG_JOIN_REGULAR;
					n->larg = (yyvsp[-3].node);
					n->rarg = (yyvsp[-1].node);
					if ((yyvsp[0].node) != NULL && IsA((yyvsp[0].node), PGList))
						n->usingClause = (PGList *) (yyvsp[0].node); /* USING clause */
					else
						n->quals = (yyvsp[0].node); /* ON clause */
					n->location = (yylsp[-2]);
					(yyval.jexpr) = n;
				}
#line 26373 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 888: /* joined_table: table_ref NATURAL join_type JOIN table_ref  */
#line 1238 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = (yyvsp[-2].jtype);
					n->joinreftype = PG_JOIN_NATURAL;
					n->larg = (yyvsp[-4].node);
					n->rarg = (yyvsp[0].node);
					n->usingClause = NIL; /* figure out which columns later... */
					n->quals = NULL; /* fill later */
					n->location = (yylsp[-3]);
					(yyval.jexpr) = n;
				}
#line 26389 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 889: /* joined_table: table_ref NATURAL JOIN table_ref  */
#line 1250 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* letting join_type reduce to empty doesn't work */
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = PG_JOIN_INNER;
					n->joinreftype = PG_JOIN_NATURAL;
					n->larg = (yyvsp[-3].node);
					n->rarg = (yyvsp[0].node);
					n->usingClause = NIL; /* figure out which columns later... */
					n->quals = NULL; /* fill later */
					n->location = (yylsp[-2]);
					(yyval.jexpr) = n;
				}
#line 26406 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 890: /* joined_table: table_ref ASOF join_type JOIN table_ref join_qual  */
#line 1263 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = (yyvsp[-3].jtype);
					n->joinreftype = PG_JOIN_ASOF;
					n->larg = (yyvsp[-5].node);
					n->rarg = (yyvsp[-1].node);
					if ((yyvsp[0].node) != NULL && IsA((yyvsp[0].node), PGList))
						n->usingClause = (PGList *) (yyvsp[0].node); /* USING clause */
					else
						n->quals = (yyvsp[0].node); /* ON clause */
					n->location = (yylsp[-4]);
					(yyval.jexpr) = n;
				}
#line 26424 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 891: /* joined_table: table_ref ASOF JOIN table_ref join_qual  */
#line 1277 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = PG_JOIN_INNER;
					n->joinreftype = PG_JOIN_ASOF;
					n->larg = (yyvsp[-4].node);
					n->rarg = (yyvsp[-1].node);
					if ((yyvsp[0].node) != NULL && IsA((yyvsp[0].node), PGList))
						n->usingClause = (PGList *) (yyvsp[0].node); /* USING clause */
					else
						n->quals = (yyvsp[0].node); /* ON clause */
					n->location = (yylsp[-3]);
					(yyval.jexpr) = n;
				}
#line 26442 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 892: /* joined_table: table_ref POSITIONAL JOIN table_ref  */
#line 1291 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* POSITIONAL JOIN is a coordinated scan */
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = PG_JOIN_POSITION;
					n->joinreftype = PG_JOIN_REGULAR;
					n->larg = (yyvsp[-3].node);
					n->rarg = (yyvsp[0].node);
					n->usingClause = NIL;
					n->quals = NULL;
					n->location = (yylsp[-2]);
					(yyval.jexpr) = n;
				}
#line 26459 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 893: /* joined_table: table_ref ANTI JOIN table_ref join_qual  */
#line 1304 "third_party/libpg_query/grammar/statements/select.y"
                {
                    /* ANTI JOIN is a filter */
                    PGJoinExpr *n = makeNode(PGJoinExpr);
                    n->jointype = PG_JOIN_ANTI;
                    n->joinreftype = PG_JOIN_REGULAR;
                    n->larg = (yyvsp[-4].node);
                    n->rarg = (yyvsp[-1].node);
                    if ((yyvsp[0].node) != NULL && IsA((yyvsp[0].node), PGList))
                        n->usingClause = (PGList *) (yyvsp[0].node); /* USING clause */
                    else
                        n->quals = (yyvsp[0].node); /* ON clause */
                    n->location = (yylsp[-3]);
                    (yyval.jexpr) = n;
                }
#line 26478 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 894: /* joined_table: table_ref SEMI JOIN table_ref join_qual  */
#line 1319 "third_party/libpg_query/grammar/statements/select.y"
               {
                   /* SEMI JOIN is also a filter */
                   PGJoinExpr *n = makeNode(PGJoinExpr);
                   n->jointype = PG_JOIN_SEMI;
                   n->joinreftype = PG_JOIN_REGULAR;
                   n->larg = (yyvsp[-4].node);
                   n->rarg = (yyvsp[-1].node);
                   if ((yyvsp[0].node) != NULL && IsA((yyvsp[0].node), PGList))
                       n->usingClause = (PGList *) (yyvsp[0].node); /* USING clause */
                   else
                       n->quals = (yyvsp[0].node); /* ON clause */
                   n->location = (yylsp[-3]);
                   n->location = (yylsp[-3]);
                   (yyval.jexpr) = n;
               }
#line 26498 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 895: /* alias_clause: AS ColIdOrString '(' name_list_opt_comma ')'  */
#line 1338 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.alias) = makeNode(PGAlias);
					(yyval.alias)->aliasname = (yyvsp[-3].str);
					(yyval.alias)->colnames = (yyvsp[-1].list);
				}
#line 26508 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 896: /* alias_clause: AS ColIdOrString  */
#line 1344 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.alias) = makeNode(PGAlias);
					(yyval.alias)->aliasname = (yyvsp[0].str);
				}
#line 26517 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 897: /* alias_clause: ColId '(' name_list_opt_comma ')'  */
#line 1349 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.alias) = makeNode(PGAlias);
					(yyval.alias)->aliasname = (yyvsp[-3].str);
					(yyval.alias)->colnames = (yyvsp[-1].list);
				}
#line 26527 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 898: /* alias_clause: ColId  */
#line 1355 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.alias) = makeNode(PGAlias);
					(yyval.alias)->aliasname = (yyvsp[0].str);
				}
#line 26536 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 899: /* opt_alias_clause: alias_clause  */
#line 1361 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.alias) = (yyvsp[0].alias); }
#line 26542 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 900: /* opt_alias_clause: %empty  */
#line 1362 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.alias) = NULL; }
#line 26548 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 901: /* func_alias_clause: alias_clause  */
#line 1371 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make2((yyvsp[0].alias), NIL);
				}
#line 26556 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 902: /* func_alias_clause: AS '(' TableFuncElementList ')'  */
#line 1375 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make2(NULL, (yyvsp[-1].list));
				}
#line 26564 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 903: /* func_alias_clause: AS ColIdOrString '(' TableFuncElementList ')'  */
#line 1379 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAlias *a = makeNode(PGAlias);
					a->aliasname = (yyvsp[-3].str);
					(yyval.list) = list_make2(a, (yyvsp[-1].list));
				}
#line 26574 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 904: /* func_alias_clause: ColId '(' TableFuncElementList ')'  */
#line 1385 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAlias *a = makeNode(PGAlias);
					a->aliasname = (yyvsp[-3].str);
					(yyval.list) = list_make2(a, (yyvsp[-1].list));
				}
#line 26584 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 905: /* func_alias_clause: %empty  */
#line 1391 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make2(NULL, NIL);
				}
#line 26592 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 906: /* join_type: FULL join_outer  */
#line 1396 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.jtype) = PG_JOIN_FULL; }
#line 26598 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 907: /* join_type: LEFT join_outer  */
#line 1397 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.jtype) = PG_JOIN_LEFT; }
#line 26604 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 908: /* join_type: RIGHT join_outer  */
#line 1398 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.jtype) = PG_JOIN_RIGHT; }
#line 26610 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 909: /* join_type: SEMI  */
#line 1399 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.jtype) = PG_JOIN_SEMI; }
#line 26616 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 910: /* join_type: ANTI  */
#line 1400 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.jtype) = PG_JOIN_ANTI; }
#line 26622 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 911: /* join_type: INNER_P  */
#line 1401 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.jtype) = PG_JOIN_INNER; }
#line 26628 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 912: /* join_outer: OUTER_P  */
#line 1405 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = NULL; }
#line 26634 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 913: /* join_outer: %empty  */
#line 1406 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 26640 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 914: /* join_qual: USING '(' name_list_opt_comma ')'  */
#line 1418 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (PGNode *) (yyvsp[-1].list); }
#line 26646 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 915: /* join_qual: ON a_expr  */
#line 1419 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 26652 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 916: /* relation_expr: qualified_name  */
#line 1425 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* inheritance query, implicitly */
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->inh = true;
					(yyval.range)->alias = NULL;
				}
#line 26663 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 917: /* relation_expr: qualified_name '*'  */
#line 1432 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* inheritance query, explicitly */
					(yyval.range) = (yyvsp[-1].range);
					(yyval.range)->inh = true;
					(yyval.range)->alias = NULL;
				}
#line 26674 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 918: /* relation_expr: ONLY qualified_name  */
#line 1439 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* no inheritance */
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->inh = false;
					(yyval.range)->alias = NULL;
				}
#line 26685 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 919: /* relation_expr: ONLY '(' qualified_name ')'  */
#line 1446 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* no inheritance, SQL99-style syntax */
					(yyval.range) = (yyvsp[-1].range);
					(yyval.range)->inh = false;
					(yyval.range)->alias = NULL;
				}
#line 26696 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 920: /* func_table: func_expr_windowless opt_ordinality  */
#line 1478 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeFunction *n = makeNode(PGRangeFunction);
					n->lateral = false;
					n->ordinality = (yyvsp[0].boolean);
					n->is_rowsfrom = false;
					n->functions = list_make1(list_make2((yyvsp[-1].node), NIL));
					n->sample = NULL;
					/* alias and coldeflist are set by table_ref production */
					(yyval.node) = (PGNode *) n;
				}
#line 26711 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 921: /* func_table: ROWS FROM '(' rowsfrom_list ')' opt_ordinality  */
#line 1489 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeFunction *n = makeNode(PGRangeFunction);
					n->lateral = false;
					n->ordinality = (yyvsp[0].boolean);
					n->is_rowsfrom = true;
					n->functions = (yyvsp[-2].list);
					n->sample = NULL;
					/* alias and coldeflist are set by table_ref production */
					(yyval.node) = (PGNode *) n;
				}
#line 26726 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 922: /* rowsfrom_item: func_expr_windowless opt_col_def_list  */
#line 1502 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make2((yyvsp[-1].node), (yyvsp[0].list)); }
#line 26732 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 923: /* rowsfrom_list: rowsfrom_item  */
#line 1506 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = list_make1((yyvsp[0].list)); }
#line 26738 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 924: /* rowsfrom_list: rowsfrom_list ',' rowsfrom_item  */
#line 1507 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].list)); }
#line 26744 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 925: /* opt_col_def_list: AS '(' TableFuncElementList ')'  */
#line 1510 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 26750 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 926: /* opt_col_def_list: %empty  */
#line 1511 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 26756 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 927: /* opt_ordinality: WITH_LA ORDINALITY  */
#line 1514 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.boolean) = true; }
#line 26762 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 928: /* opt_ordinality: %empty  */
#line 1515 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 26768 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 929: /* where_clause: WHERE a_expr  */
#line 1520 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 26774 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 930: /* where_clause: %empty  */
#line 1521 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 26780 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 931: /* TableFuncElementList: TableFuncElement  */
#line 1527 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 26788 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 932: /* TableFuncElementList: TableFuncElementList ',' TableFuncElement  */
#line 1531 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 26796 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 933: /* TableFuncElement: ColIdOrString Typename opt_collate_clause  */
#line 1537 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGColumnDef *n = makeNode(PGColumnDef);
					n->colname = (yyvsp[-2].str);
					n->typeName = (yyvsp[-1].typnam);
					n->inhcount = 0;
					n->is_local = true;
					n->is_not_null = false;
					n->is_from_type = false;
					n->storage = 0;
					n->raw_default = NULL;
					n->cooked_default = NULL;
					n->collClause = (PGCollateClause *) (yyvsp[0].node);
					n->collOid = InvalidOid;
					n->constraints = NIL;
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)n;
				}
#line 26818 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 934: /* opt_collate_clause: COLLATE any_name  */
#line 1558 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGCollateClause *n = makeNode(PGCollateClause);
					n->arg = NULL;
					n->collname = (yyvsp[0].list);
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *) n;
				}
#line 26830 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 935: /* opt_collate_clause: %empty  */
#line 1565 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.node) = NULL; }
#line 26836 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 936: /* colid_type_list: ColId Typename  */
#line 1578 "third_party/libpg_query/grammar/statements/select.y"
                             {
             (yyval.list) = list_make1(list_make2(makeString((yyvsp[-1].str)), (yyvsp[0].typnam)));
            }
#line 26844 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 937: /* colid_type_list: colid_type_list ',' ColId Typename  */
#line 1581 "third_party/libpg_query/grammar/statements/select.y"
                                                 {
             (yyval.list) = lappend((yyvsp[-3].list), list_make2(makeString((yyvsp[-1].str)), (yyvsp[0].typnam)));
            }
#line 26852 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 940: /* opt_Typename: Typename  */
#line 1588 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 26858 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 941: /* opt_Typename: %empty  */
#line 1589 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.typnam) = NULL; }
#line 26864 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 942: /* Typename: SimpleTypename opt_array_bounds  */
#line 1592 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-1].typnam);
					(yyval.typnam)->arrayBounds = (yyvsp[0].list);
				}
#line 26873 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 943: /* Typename: SETOF SimpleTypename opt_array_bounds  */
#line 1597 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-1].typnam);
					(yyval.typnam)->arrayBounds = (yyvsp[0].list);
					(yyval.typnam)->setof = true;
				}
#line 26883 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 944: /* Typename: SimpleTypename ARRAY '[' Iconst ']'  */
#line 1604 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-4].typnam);
					(yyval.typnam)->arrayBounds = list_make1(makeInteger((yyvsp[-1].ival)));
				}
#line 26892 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 945: /* Typename: SETOF SimpleTypename ARRAY '[' Iconst ']'  */
#line 1609 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-4].typnam);
					(yyval.typnam)->arrayBounds = list_make1(makeInteger((yyvsp[-1].ival)));
					(yyval.typnam)->setof = true;
				}
#line 26902 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 946: /* Typename: SimpleTypename ARRAY  */
#line 1615 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-1].typnam);
					(yyval.typnam)->arrayBounds = list_make1(makeInteger(-1));
				}
#line 26911 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 947: /* Typename: SETOF SimpleTypename ARRAY  */
#line 1620 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-1].typnam);
					(yyval.typnam)->arrayBounds = list_make1(makeInteger(-1));
					(yyval.typnam)->setof = true;
				}
#line 26921 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 948: /* Typename: RowOrStruct '(' colid_type_list ')' opt_array_bounds  */
#line 1625 "third_party/libpg_query/grammar/statements/select.y"
                                                                               {
               (yyval.typnam) = SystemTypeName("struct");
               (yyval.typnam)->arrayBounds = (yyvsp[0].list);
               (yyval.typnam)->typmods = (yyvsp[-2].list);
               (yyval.typnam)->location = (yylsp[-4]);
               }
#line 26932 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 949: /* Typename: MAP '(' type_list ')' opt_array_bounds  */
#line 1631 "third_party/libpg_query/grammar/statements/select.y"
                                                     {
               (yyval.typnam) = SystemTypeName("map");
               (yyval.typnam)->arrayBounds = (yyvsp[0].list);
               (yyval.typnam)->typmods = (yyvsp[-2].list);
               (yyval.typnam)->location = (yylsp[-4]);
			}
#line 26943 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 950: /* Typename: UNION '(' colid_type_list ')' opt_array_bounds  */
#line 1637 "third_party/libpg_query/grammar/statements/select.y"
                                                                         {
			   (yyval.typnam) = SystemTypeName("union");
			   (yyval.typnam)->arrayBounds = (yyvsp[0].list);
			   (yyval.typnam)->typmods = (yyvsp[-2].list);
			   (yyval.typnam)->location = (yylsp[-4]);
			}
#line 26954 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 951: /* opt_array_bounds: opt_array_bounds '[' ']'  */
#line 1647 "third_party/libpg_query/grammar/statements/select.y"
                                        {  (yyval.list) = lappend((yyvsp[-2].list), makeInteger(-1)); }
#line 26960 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 952: /* opt_array_bounds: opt_array_bounds '[' Iconst ']'  */
#line 1649 "third_party/libpg_query/grammar/statements/select.y"
                                        {  (yyval.list) = lappend((yyvsp[-3].list), makeInteger((yyvsp[-1].ival))); }
#line 26966 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 953: /* opt_array_bounds: %empty  */
#line 1651 "third_party/libpg_query/grammar/statements/select.y"
                                        {  (yyval.list) = NIL; }
#line 26972 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 954: /* SimpleTypename: GenericType  */
#line 1655 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 26978 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 955: /* SimpleTypename: Numeric  */
#line 1656 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 26984 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 956: /* SimpleTypename: Bit  */
#line 1657 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 26990 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 957: /* SimpleTypename: Character  */
#line 1658 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 26996 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 958: /* SimpleTypename: ConstDatetime  */
#line 1659 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.typnam) = (yyvsp[0].typnam); }
#line 27002 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 959: /* SimpleTypename: ConstInterval opt_interval  */
#line 1661 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-1].typnam);
					(yyval.typnam)->typmods = (yyvsp[0].list);
				}
#line 27011 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 960: /* SimpleTypename: ConstInterval '(' Iconst ')'  */
#line 1666 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-3].typnam);
					(yyval.typnam)->typmods = list_make2(makeIntConst(INTERVAL_FULL_RANGE, -1),
											 makeIntConst((yyvsp[-1].ival), (yylsp[-1])));
				}
#line 27021 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 961: /* ConstTypename: Numeric  */
#line 1685 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 27027 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 962: /* ConstTypename: ConstBit  */
#line 1686 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 27033 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 963: /* ConstTypename: ConstCharacter  */
#line 1687 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.typnam) = (yyvsp[0].typnam); }
#line 27039 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 964: /* ConstTypename: ConstDatetime  */
#line 1688 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.typnam) = (yyvsp[0].typnam); }
#line 27045 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 965: /* GenericType: type_name_token opt_type_modifiers  */
#line 1700 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = makeTypeName((yyvsp[-1].str));
					(yyval.typnam)->typmods = (yyvsp[0].list);
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 27055 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 966: /* opt_type_modifiers: '(' opt_expr_list_opt_comma ')'  */
#line 1713 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 27061 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 967: /* opt_type_modifiers: %empty  */
#line 1714 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = NIL; }
#line 27067 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 968: /* Numeric: INT_P  */
#line 1721 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("int4");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 27076 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 969: /* Numeric: INTEGER  */
#line 1726 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("int4");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 27085 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 970: /* Numeric: SMALLINT  */
#line 1731 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("int2");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 27094 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 971: /* Numeric: BIGINT  */
#line 1736 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("int8");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 27103 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 972: /* Numeric: REAL  */
#line 1741 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("float4");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 27112 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 973: /* Numeric: FLOAT_P opt_float  */
#line 1746 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 27121 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 974: /* Numeric: DOUBLE_P PRECISION  */
#line 1751 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("float8");
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 27130 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 975: /* Numeric: DECIMAL_P opt_type_modifiers  */
#line 1756 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("numeric");
					(yyval.typnam)->typmods = (yyvsp[0].list);
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 27140 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 976: /* Numeric: DEC opt_type_modifiers  */
#line 1762 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("numeric");
					(yyval.typnam)->typmods = (yyvsp[0].list);
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 27150 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 977: /* Numeric: NUMERIC opt_type_modifiers  */
#line 1768 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("numeric");
					(yyval.typnam)->typmods = (yyvsp[0].list);
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 27160 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 978: /* Numeric: BOOLEAN_P  */
#line 1774 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("bool");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 27169 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 979: /* opt_float: '(' Iconst ')'  */
#line 1781 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/*
					 * Check FLOAT() precision limits assuming IEEE floating
					 * types - thomas 1997-09-18
					 */
					if ((yyvsp[-1].ival) < 1)
						ereport(ERROR,
								(errcode(PG_ERRCODE_INVALID_PARAMETER_VALUE),
								 errmsg("precision for type float must be at least 1 bit"),
								 parser_errposition((yylsp[-1]))));
					else if ((yyvsp[-1].ival) <= 24)
						(yyval.typnam) = SystemTypeName("float4");
					else if ((yyvsp[-1].ival) <= 53)
						(yyval.typnam) = SystemTypeName("float8");
					else
						ereport(ERROR,
								(errcode(PG_ERRCODE_INVALID_PARAMETER_VALUE),
								 errmsg("precision for type float must be less than 54 bits"),
								 parser_errposition((yylsp[-1]))));
				}
#line 27194 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 980: /* opt_float: %empty  */
#line 1802 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("float4");
				}
#line 27202 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 981: /* Bit: BitWithLength  */
#line 1812 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 27210 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 982: /* Bit: BitWithoutLength  */
#line 1816 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 27218 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 983: /* ConstBit: BitWithLength  */
#line 1824 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 27226 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 984: /* ConstBit: BitWithoutLength  */
#line 1828 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
					(yyval.typnam)->typmods = NIL;
				}
#line 27235 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 985: /* BitWithLength: BIT opt_varying '(' expr_list_opt_comma ')'  */
#line 1836 "third_party/libpg_query/grammar/statements/select.y"
                                {
					const char *typname;

					typname = (yyvsp[-3].boolean) ? "varbit" : "bit";
					(yyval.typnam) = SystemTypeName(typname);
					(yyval.typnam)->typmods = (yyvsp[-1].list);
					(yyval.typnam)->location = (yylsp[-4]);
				}
#line 27248 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 986: /* BitWithoutLength: BIT opt_varying  */
#line 1848 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* bit defaults to bit(1), varbit to no limit */
					if ((yyvsp[0].boolean))
					{
						(yyval.typnam) = SystemTypeName("varbit");
					}
					else
					{
						(yyval.typnam) = SystemTypeName("bit");
						(yyval.typnam)->typmods = list_make1(makeIntConst(1, -1));
					}
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 27266 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 987: /* Character: CharacterWithLength  */
#line 1869 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 27274 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 988: /* Character: CharacterWithoutLength  */
#line 1873 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 27282 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 989: /* ConstCharacter: CharacterWithLength  */
#line 1879 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 27290 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 990: /* ConstCharacter: CharacterWithoutLength  */
#line 1883 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* Length was not specified so allow to be unrestricted.
					 * This handles problems with fixed-length (bpchar) strings
					 * which in column definitions must default to a length
					 * of one, but should not be constrained if the length
					 * was not specified.
					 */
					(yyval.typnam) = (yyvsp[0].typnam);
					(yyval.typnam)->typmods = NIL;
				}
#line 27305 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 991: /* CharacterWithLength: character '(' Iconst ')'  */
#line 1896 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName((yyvsp[-3].conststr));
					(yyval.typnam)->typmods = list_make1(makeIntConst((yyvsp[-1].ival), (yylsp[-1])));
					(yyval.typnam)->location = (yylsp[-3]);
				}
#line 27315 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 992: /* CharacterWithoutLength: character  */
#line 1904 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName((yyvsp[0].conststr));
					/* char defaults to char(1), varchar to no limit */
					if (strcmp((yyvsp[0].conststr), "bpchar") == 0)
						(yyval.typnam)->typmods = list_make1(makeIntConst(1, -1));
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 27327 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 993: /* character: CHARACTER opt_varying  */
#line 1914 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = (yyvsp[0].boolean) ? "varchar": "bpchar"; }
#line 27333 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 994: /* character: CHAR_P opt_varying  */
#line 1916 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = (yyvsp[0].boolean) ? "varchar": "bpchar"; }
#line 27339 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 995: /* character: VARCHAR  */
#line 1918 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = "varchar"; }
#line 27345 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 996: /* character: NATIONAL CHARACTER opt_varying  */
#line 1920 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = (yyvsp[0].boolean) ? "varchar": "bpchar"; }
#line 27351 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 997: /* character: NATIONAL CHAR_P opt_varying  */
#line 1922 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = (yyvsp[0].boolean) ? "varchar": "bpchar"; }
#line 27357 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 998: /* character: NCHAR opt_varying  */
#line 1924 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = (yyvsp[0].boolean) ? "varchar": "bpchar"; }
#line 27363 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 999: /* opt_varying: VARYING  */
#line 1928 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = true; }
#line 27369 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1000: /* opt_varying: %empty  */
#line 1929 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 27375 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1001: /* ConstDatetime: TIMESTAMP '(' Iconst ')' opt_timezone  */
#line 1937 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].boolean))
						(yyval.typnam) = SystemTypeName("timestamptz");
					else
						(yyval.typnam) = SystemTypeName("timestamp");
					(yyval.typnam)->typmods = list_make1(makeIntConst((yyvsp[-2].ival), (yylsp[-2])));
					(yyval.typnam)->location = (yylsp[-4]);
				}
#line 27388 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1002: /* ConstDatetime: TIMESTAMP opt_timezone  */
#line 1946 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].boolean))
						(yyval.typnam) = SystemTypeName("timestamptz");
					else
						(yyval.typnam) = SystemTypeName("timestamp");
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 27400 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1003: /* ConstDatetime: TIME '(' Iconst ')' opt_timezone  */
#line 1954 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].boolean))
						(yyval.typnam) = SystemTypeName("timetz");
					else
						(yyval.typnam) = SystemTypeName("time");
					(yyval.typnam)->typmods = list_make1(makeIntConst((yyvsp[-2].ival), (yylsp[-2])));
					(yyval.typnam)->location = (yylsp[-4]);
				}
#line 27413 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1004: /* ConstDatetime: TIME opt_timezone  */
#line 1963 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].boolean))
						(yyval.typnam) = SystemTypeName("timetz");
					else
						(yyval.typnam) = SystemTypeName("time");
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 27425 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1005: /* ConstInterval: INTERVAL  */
#line 1974 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("interval");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 27434 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1006: /* opt_timezone: WITH_LA TIME ZONE  */
#line 1981 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.boolean) = true; }
#line 27440 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1007: /* opt_timezone: WITHOUT TIME ZONE  */
#line 1982 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.boolean) = false; }
#line 27446 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1008: /* opt_timezone: %empty  */
#line 1983 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 27452 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1025: /* opt_interval: year_keyword  */
#line 2012 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(YEAR), (yylsp[0]))); }
#line 27458 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1026: /* opt_interval: month_keyword  */
#line 2014 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MONTH), (yylsp[0]))); }
#line 27464 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1027: /* opt_interval: day_keyword  */
#line 2016 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(DAY), (yylsp[0]))); }
#line 27470 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1028: /* opt_interval: hour_keyword  */
#line 2018 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(HOUR), (yylsp[0]))); }
#line 27476 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1029: /* opt_interval: minute_keyword  */
#line 2020 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MINUTE), (yylsp[0]))); }
#line 27482 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1030: /* opt_interval: second_keyword  */
#line 2022 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(SECOND), (yylsp[0]))); }
#line 27488 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1031: /* opt_interval: millisecond_keyword  */
#line 2024 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MILLISECOND), (yylsp[0]))); }
#line 27494 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1032: /* opt_interval: microsecond_keyword  */
#line 2026 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MICROSECOND), (yylsp[0]))); }
#line 27500 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1033: /* opt_interval: year_keyword TO month_keyword  */
#line 2028 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(YEAR) |
												 INTERVAL_MASK(MONTH), (yylsp[-2])));
				}
#line 27509 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1034: /* opt_interval: day_keyword TO hour_keyword  */
#line 2033 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(DAY) |
												 INTERVAL_MASK(HOUR), (yylsp[-2])));
				}
#line 27518 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1035: /* opt_interval: day_keyword TO minute_keyword  */
#line 2038 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(DAY) |
												 INTERVAL_MASK(HOUR) |
												 INTERVAL_MASK(MINUTE), (yylsp[-2])));
				}
#line 27528 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1036: /* opt_interval: day_keyword TO second_keyword  */
#line 2044 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(DAY) |
												 INTERVAL_MASK(HOUR) |
												 INTERVAL_MASK(MINUTE) |
												 INTERVAL_MASK(SECOND), (yylsp[-2])));
				}
#line 27539 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1037: /* opt_interval: hour_keyword TO minute_keyword  */
#line 2051 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(HOUR) |
												 INTERVAL_MASK(MINUTE), (yylsp[-2])));
				}
#line 27548 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1038: /* opt_interval: hour_keyword TO second_keyword  */
#line 2056 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(HOUR) |
												 INTERVAL_MASK(MINUTE) |
												 INTERVAL_MASK(SECOND), (yylsp[-2])));
				}
#line 27558 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1039: /* opt_interval: minute_keyword TO second_keyword  */
#line 2062 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MINUTE) |
												 INTERVAL_MASK(SECOND), (yylsp[-2])));
				}
#line 27567 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1040: /* opt_interval: %empty  */
#line 2067 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = NIL; }
#line 27573 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1041: /* a_expr: c_expr  */
#line 2098 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 27579 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1042: /* a_expr: a_expr TYPECAST Typename  */
#line 2101 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.node) = makeTypeCast((yyvsp[-2].node), (yyvsp[0].typnam), 0, (yylsp[-1])); }
#line 27585 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1043: /* a_expr: a_expr COLLATE any_name  */
#line 2103 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGCollateClause *n = makeNode(PGCollateClause);
					n->arg = (yyvsp[-2].node);
					n->collname = (yyvsp[0].list);
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *) n;
				}
#line 27597 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1044: /* a_expr: a_expr AT TIME ZONE a_expr  */
#line 2111 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("timezone"),
											   list_make2((yyvsp[0].node), (yyvsp[-4].node)),
											   (yylsp[-3]));
				}
#line 27607 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1045: /* a_expr: '+' a_expr  */
#line 2126 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", NULL, (yyvsp[0].node), (yylsp[-1])); }
#line 27613 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1046: /* a_expr: '-' a_expr  */
#line 2128 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = doNegate((yyvsp[0].node), (yylsp[-1])); }
#line 27619 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1047: /* a_expr: a_expr '+' a_expr  */
#line 2130 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 27625 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1048: /* a_expr: a_expr '-' a_expr  */
#line 2132 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "-", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 27631 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1049: /* a_expr: a_expr '*' a_expr  */
#line 2134 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "*", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 27637 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1050: /* a_expr: a_expr '/' a_expr  */
#line 2136 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "/", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 27643 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1051: /* a_expr: a_expr INTEGER_DIVISION a_expr  */
#line 2138 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "//", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 27649 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1052: /* a_expr: a_expr '%' a_expr  */
#line 2140 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "%", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 27655 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1053: /* a_expr: a_expr '^' a_expr  */
#line 2142 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "^", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 27661 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1054: /* a_expr: a_expr POWER_OF a_expr  */
#line 2144 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "**", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 27667 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1055: /* a_expr: a_expr '<' a_expr  */
#line 2146 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 27673 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1056: /* a_expr: a_expr '>' a_expr  */
#line 2148 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, ">", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 27679 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1057: /* a_expr: a_expr '=' a_expr  */
#line 2150 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 27685 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1058: /* a_expr: a_expr LESS_EQUALS a_expr  */
#line 2152 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 27691 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1059: /* a_expr: a_expr GREATER_EQUALS a_expr  */
#line 2154 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, ">=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 27697 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1060: /* a_expr: a_expr NOT_EQUALS a_expr  */
#line 2156 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<>", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 27703 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1061: /* a_expr: a_expr qual_Op a_expr  */
#line 2159 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[-1].list), (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 27709 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1062: /* a_expr: qual_Op a_expr  */
#line 2161 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[-1].list), NULL, (yyvsp[0].node), (yylsp[-1])); }
#line 27715 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1063: /* a_expr: a_expr qual_Op  */
#line 2163 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[0].list), (yyvsp[-1].node), NULL, (yylsp[0])); }
#line 27721 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1064: /* a_expr: a_expr AND a_expr  */
#line 2166 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeAndExpr((yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 27727 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1065: /* a_expr: a_expr OR a_expr  */
#line 2168 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeOrExpr((yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 27733 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1066: /* a_expr: NOT a_expr  */
#line 2170 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeNotExpr((yyvsp[0].node), (yylsp[-1])); }
#line 27739 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1067: /* a_expr: NOT_LA a_expr  */
#line 2172 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeNotExpr((yyvsp[0].node), (yylsp[-1])); }
#line 27745 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1068: /* a_expr: a_expr GLOB a_expr  */
#line 2174 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_GLOB, "~~~",
												   (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
				}
#line 27754 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1069: /* a_expr: a_expr LIKE a_expr  */
#line 2179 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_LIKE, "~~",
												   (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
				}
#line 27763 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1070: /* a_expr: a_expr LIKE a_expr ESCAPE a_expr  */
#line 2184 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("like_escape"),
											   list_make3((yyvsp[-4].node), (yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-3]));
					(yyval.node) = (PGNode *) n;
				}
#line 27774 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1071: /* a_expr: a_expr NOT_LA LIKE a_expr  */
#line 2191 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_LIKE, "!~~",
												   (yyvsp[-3].node), (yyvsp[0].node), (yylsp[-2]));
				}
#line 27783 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1072: /* a_expr: a_expr NOT_LA LIKE a_expr ESCAPE a_expr  */
#line 2196 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("not_like_escape"),
											   list_make3((yyvsp[-5].node), (yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-4]));
					(yyval.node) = (PGNode *) n;
				}
#line 27794 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1073: /* a_expr: a_expr ILIKE a_expr  */
#line 2203 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_ILIKE, "~~*",
												   (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
				}
#line 27803 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1074: /* a_expr: a_expr ILIKE a_expr ESCAPE a_expr  */
#line 2208 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("ilike_escape"),
											   list_make3((yyvsp[-4].node), (yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-3]));
					(yyval.node) = (PGNode *) n;
				}
#line 27814 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1075: /* a_expr: a_expr NOT_LA ILIKE a_expr  */
#line 2215 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_ILIKE, "!~~*",
												   (yyvsp[-3].node), (yyvsp[0].node), (yylsp[-2]));
				}
#line 27823 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1076: /* a_expr: a_expr NOT_LA ILIKE a_expr ESCAPE a_expr  */
#line 2220 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("not_ilike_escape"),
											   list_make3((yyvsp[-5].node), (yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-4]));
					(yyval.node) = (PGNode *) n;
				}
#line 27834 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1077: /* a_expr: a_expr SIMILAR TO a_expr  */
#line 2228 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
											   list_make2((yyvsp[0].node), makeNullAConst(-1)),
											   (yylsp[-2]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "~",
												   (yyvsp[-3].node), (PGNode *) n, (yylsp[-2]));
				}
#line 27846 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1078: /* a_expr: a_expr SIMILAR TO a_expr ESCAPE a_expr  */
#line 2236 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
											   list_make2((yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-4]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "~",
												   (yyvsp[-5].node), (PGNode *) n, (yylsp[-4]));
				}
#line 27858 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1079: /* a_expr: a_expr NOT_LA SIMILAR TO a_expr  */
#line 2244 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
											   list_make2((yyvsp[0].node), makeNullAConst(-1)),
											   (yylsp[-3]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "!~",
												   (yyvsp[-4].node), (PGNode *) n, (yylsp[-3]));
				}
#line 27870 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1080: /* a_expr: a_expr NOT_LA SIMILAR TO a_expr ESCAPE a_expr  */
#line 2252 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
											   list_make2((yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-5]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "!~",
												   (yyvsp[-6].node), (PGNode *) n, (yylsp[-5]));
				}
#line 27882 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1081: /* a_expr: a_expr IS NULL_P  */
#line 2270 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-2].node);
					n->nulltesttype = PG_IS_NULL;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 27894 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1082: /* a_expr: a_expr ISNULL  */
#line 2278 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-1].node);
					n->nulltesttype = PG_IS_NULL;
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 27906 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1083: /* a_expr: a_expr IS NOT NULL_P  */
#line 2286 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-3].node);
					n->nulltesttype = IS_NOT_NULL;
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)n;
				}
#line 27918 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1084: /* a_expr: a_expr NOT NULL_P  */
#line 2294 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-2].node);
					n->nulltesttype = IS_NOT_NULL;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 27930 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1085: /* a_expr: a_expr NOTNULL  */
#line 2302 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-1].node);
					n->nulltesttype = IS_NOT_NULL;
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 27942 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1086: /* a_expr: a_expr LAMBDA_ARROW a_expr  */
#line 2310 "third_party/libpg_query/grammar/statements/select.y"
                        {
				PGLambdaFunction *n = makeNode(PGLambdaFunction);
				n->lhs = (yyvsp[-2].node);
				n->rhs = (yyvsp[0].node);
				n->location = (yylsp[-1]);
				(yyval.node) = (PGNode *) n;
			}
#line 27954 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1087: /* a_expr: a_expr DOUBLE_ARROW a_expr  */
#line 2318 "third_party/libpg_query/grammar/statements/select.y"
                        {
							(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "->>", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
			}
#line 27962 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1088: /* a_expr: row OVERLAPS row  */
#line 2322 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if (list_length((yyvsp[-2].list)) != 2)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("wrong number of parameters on left side of OVERLAPS expression"),
								 parser_errposition((yylsp[-2]))));
					if (list_length((yyvsp[0].list)) != 2)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("wrong number of parameters on right side of OVERLAPS expression"),
								 parser_errposition((yylsp[0]))));
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("overlaps"),
											   list_concat((yyvsp[-2].list), (yyvsp[0].list)),
											   (yylsp[-1]));
				}
#line 27982 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1089: /* a_expr: a_expr IS TRUE_P  */
#line 2338 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-2].node);
					b->booltesttype = PG_IS_TRUE;
					b->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)b;
				}
#line 27994 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1090: /* a_expr: a_expr IS NOT TRUE_P  */
#line 2346 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-3].node);
					b->booltesttype = IS_NOT_TRUE;
					b->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)b;
				}
#line 28006 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1091: /* a_expr: a_expr IS FALSE_P  */
#line 2354 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-2].node);
					b->booltesttype = IS_FALSE;
					b->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)b;
				}
#line 28018 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1092: /* a_expr: a_expr IS NOT FALSE_P  */
#line 2362 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-3].node);
					b->booltesttype = IS_NOT_FALSE;
					b->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)b;
				}
#line 28030 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1093: /* a_expr: a_expr IS UNKNOWN  */
#line 2370 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-2].node);
					b->booltesttype = IS_UNKNOWN;
					b->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)b;
				}
#line 28042 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1094: /* a_expr: a_expr IS NOT UNKNOWN  */
#line 2378 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-3].node);
					b->booltesttype = IS_NOT_UNKNOWN;
					b->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)b;
				}
#line 28054 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1095: /* a_expr: a_expr IS DISTINCT FROM a_expr  */
#line 2386 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_DISTINCT, "=", (yyvsp[-4].node), (yyvsp[0].node), (yylsp[-3]));
				}
#line 28062 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1096: /* a_expr: a_expr IS NOT DISTINCT FROM a_expr  */
#line 2390 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_DISTINCT, "=", (yyvsp[-5].node), (yyvsp[0].node), (yylsp[-4]));
				}
#line 28070 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1097: /* a_expr: a_expr IS OF '(' type_list ')'  */
#line 2394 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OF, "=", (yyvsp[-5].node), (PGNode *) (yyvsp[-1].list), (yylsp[-4]));
				}
#line 28078 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1098: /* a_expr: a_expr IS NOT OF '(' type_list ')'  */
#line 2398 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OF, "<>", (yyvsp[-6].node), (PGNode *) (yyvsp[-1].list), (yylsp[-5]));
				}
#line 28086 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1099: /* a_expr: a_expr BETWEEN opt_asymmetric b_expr AND a_expr  */
#line 2402 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_BETWEEN,
												   "BETWEEN",
												   (yyvsp[-5].node),
												   (PGNode *) list_make2((yyvsp[-2].node), (yyvsp[0].node)),
												   (yylsp[-4]));
				}
#line 28098 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1100: /* a_expr: a_expr NOT_LA BETWEEN opt_asymmetric b_expr AND a_expr  */
#line 2410 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_BETWEEN,
												   "NOT BETWEEN",
												   (yyvsp[-6].node),
												   (PGNode *) list_make2((yyvsp[-2].node), (yyvsp[0].node)),
												   (yylsp[-5]));
				}
#line 28110 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1101: /* a_expr: a_expr BETWEEN SYMMETRIC b_expr AND a_expr  */
#line 2418 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_BETWEEN_SYM,
												   "BETWEEN SYMMETRIC",
												   (yyvsp[-5].node),
												   (PGNode *) list_make2((yyvsp[-2].node), (yyvsp[0].node)),
												   (yylsp[-4]));
				}
#line 28122 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1102: /* a_expr: a_expr NOT_LA BETWEEN SYMMETRIC b_expr AND a_expr  */
#line 2426 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_BETWEEN_SYM,
												   "NOT BETWEEN SYMMETRIC",
												   (yyvsp[-6].node),
												   (PGNode *) list_make2((yyvsp[-2].node), (yyvsp[0].node)),
												   (yylsp[-5]));
				}
#line 28134 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1103: /* a_expr: a_expr IN_P in_expr  */
#line 2434 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* in_expr returns a PGSubLink or a list of a_exprs */
					if (IsA((yyvsp[0].node), PGSubLink))
					{
						/* generate foo = ANY (subquery) */
						PGSubLink *n = (PGSubLink *) (yyvsp[0].node);
						n->subLinkType = PG_ANY_SUBLINK;
						n->subLinkId = 0;
						n->testexpr = (yyvsp[-2].node);
						n->operName = NIL;		/* show it's IN not = ANY */
						n->location = (yylsp[-1]);
						(yyval.node) = (PGNode *)n;
					}
					else
					{
						/* generate scalar IN expression */
						(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_IN, "=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
					}
				}
#line 28158 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1104: /* a_expr: a_expr NOT_LA IN_P in_expr  */
#line 2454 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* in_expr returns a PGSubLink or a list of a_exprs */
					if (IsA((yyvsp[0].node), PGSubLink))
					{
						/* generate NOT (foo = ANY (subquery)) */
						/* Make an = ANY node */
						PGSubLink *n = (PGSubLink *) (yyvsp[0].node);
						n->subLinkType = PG_ANY_SUBLINK;
						n->subLinkId = 0;
						n->testexpr = (yyvsp[-3].node);
						n->operName = NIL;		/* show it's IN not = ANY */
						n->location = (yylsp[-2]);
						/* Stick a NOT on top; must have same parse location */
						(yyval.node) = makeNotExpr((PGNode *) n, (yylsp[-2]));
					}
					else
					{
						/* generate scalar NOT IN expression */
						(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_IN, "<>", (yyvsp[-3].node), (yyvsp[0].node), (yylsp[-2]));
					}
				}
#line 28184 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1105: /* a_expr: a_expr subquery_Op sub_type select_with_parens  */
#line 2476 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSubLink *n = makeNode(PGSubLink);
					n->subLinkType = (yyvsp[-1].subquerytype);
					n->subLinkId = 0;
					n->testexpr = (yyvsp[-3].node);
					n->operName = (yyvsp[-2].list);
					n->subselect = (yyvsp[0].node);
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)n;
				}
#line 28199 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1106: /* a_expr: a_expr subquery_Op sub_type '(' a_expr ')'  */
#line 2487 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[-3].subquerytype) == PG_ANY_SUBLINK)
						(yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP_ANY, (yyvsp[-4].list), (yyvsp[-5].node), (yyvsp[-1].node), (yylsp[-4]));
					else
						(yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP_ALL, (yyvsp[-4].list), (yyvsp[-5].node), (yyvsp[-1].node), (yylsp[-4]));
				}
#line 28210 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1107: /* a_expr: DEFAULT  */
#line 2494 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/*
					 * The SQL spec only allows DEFAULT in "contextually typed
					 * expressions", but for us, it's easier to allow it in
					 * any a_expr and then throw error during parse analysis
					 * if it's in an inappropriate context.  This way also
					 * lets us say something smarter than "syntax error".
					 */
					PGSetToDefault *n = makeNode(PGSetToDefault);
					/* parse analysis will fill in the rest */
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 28228 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1108: /* a_expr: COLUMNS '(' a_expr ')'  */
#line 2508 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAStar *star = makeNode(PGAStar);
					star->expr = (yyvsp[-1].node);
					star->columns = true;
					star->location = (yylsp[-3]);
					(yyval.node) = (PGNode *) star;
				}
#line 28240 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1109: /* a_expr: '*' opt_except_list opt_replace_list  */
#line 2516 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAStar *star = makeNode(PGAStar);
					star->except_list = (yyvsp[-1].list);
					star->replace_list = (yyvsp[0].list);
					star->location = (yylsp[-2]);
					(yyval.node) = (PGNode *) star;
				}
#line 28252 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1110: /* a_expr: ColId '.' '*' opt_except_list opt_replace_list  */
#line 2524 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAStar *star = makeNode(PGAStar);
					star->relation = (yyvsp[-4].str);
					star->except_list = (yyvsp[-1].list);
					star->replace_list = (yyvsp[0].list);
					star->location = (yylsp[-4]);
					(yyval.node) = (PGNode *) star;
				}
#line 28265 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1111: /* b_expr: c_expr  */
#line 2544 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 28271 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1112: /* b_expr: b_expr TYPECAST Typename  */
#line 2546 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeTypeCast((yyvsp[-2].node), (yyvsp[0].typnam), 0, (yylsp[-1])); }
#line 28277 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1113: /* b_expr: '+' b_expr  */
#line 2548 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", NULL, (yyvsp[0].node), (yylsp[-1])); }
#line 28283 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1114: /* b_expr: '-' b_expr  */
#line 2550 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = doNegate((yyvsp[0].node), (yylsp[-1])); }
#line 28289 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1115: /* b_expr: b_expr '+' b_expr  */
#line 2552 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 28295 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1116: /* b_expr: b_expr '-' b_expr  */
#line 2554 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "-", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 28301 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1117: /* b_expr: b_expr '*' b_expr  */
#line 2556 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "*", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 28307 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1118: /* b_expr: b_expr '/' b_expr  */
#line 2558 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "/", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 28313 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1119: /* b_expr: b_expr INTEGER_DIVISION b_expr  */
#line 2560 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "//", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 28319 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1120: /* b_expr: b_expr '%' b_expr  */
#line 2562 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "%", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 28325 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1121: /* b_expr: b_expr '^' b_expr  */
#line 2564 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "^", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 28331 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1122: /* b_expr: b_expr POWER_OF b_expr  */
#line 2566 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "**", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 28337 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1123: /* b_expr: b_expr '<' b_expr  */
#line 2568 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 28343 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1124: /* b_expr: b_expr '>' b_expr  */
#line 2570 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, ">", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 28349 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1125: /* b_expr: b_expr '=' b_expr  */
#line 2572 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 28355 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1126: /* b_expr: b_expr LESS_EQUALS b_expr  */
#line 2574 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 28361 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1127: /* b_expr: b_expr GREATER_EQUALS b_expr  */
#line 2576 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, ">=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 28367 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1128: /* b_expr: b_expr NOT_EQUALS b_expr  */
#line 2578 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<>", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 28373 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1129: /* b_expr: b_expr qual_Op b_expr  */
#line 2580 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[-1].list), (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 28379 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1130: /* b_expr: qual_Op b_expr  */
#line 2582 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[-1].list), NULL, (yyvsp[0].node), (yylsp[-1])); }
#line 28385 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1131: /* b_expr: b_expr qual_Op  */
#line 2584 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[0].list), (yyvsp[-1].node), NULL, (yylsp[0])); }
#line 28391 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1132: /* b_expr: b_expr IS DISTINCT FROM b_expr  */
#line 2586 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_DISTINCT, "=", (yyvsp[-4].node), (yyvsp[0].node), (yylsp[-3]));
				}
#line 28399 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1133: /* b_expr: b_expr IS NOT DISTINCT FROM b_expr  */
#line 2590 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_DISTINCT, "=", (yyvsp[-5].node), (yyvsp[0].node), (yylsp[-4]));
				}
#line 28407 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1134: /* b_expr: b_expr IS OF '(' type_list ')'  */
#line 2594 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OF, "=", (yyvsp[-5].node), (PGNode *) (yyvsp[-1].list), (yylsp[-4]));
				}
#line 28415 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1135: /* b_expr: b_expr IS NOT OF '(' type_list ')'  */
#line 2598 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OF, "<>", (yyvsp[-6].node), (PGNode *) (yyvsp[-1].list), (yylsp[-5]));
				}
#line 28423 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1137: /* c_expr: row  */
#line 2612 "third_party/libpg_query/grammar/statements/select.y"
                              {
				PGFuncCall *n = makeFuncCall(SystemFuncName("row"), (yyvsp[0].list), (yylsp[0]));
				(yyval.node) = (PGNode *) n;
			}
#line 28432 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1138: /* c_expr: indirection_expr opt_extended_indirection  */
#line 2617 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].list))
					{
						PGAIndirection *n = makeNode(PGAIndirection);
						n->arg = (PGNode *) (yyvsp[-1].node);
						n->indirection = check_indirection((yyvsp[0].list), yyscanner);
						(yyval.node) = (PGNode *) n;
					}
					else
						(yyval.node) = (PGNode *) (yyvsp[-1].node);
				}
#line 28448 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1139: /* d_expr: columnref  */
#line 2630 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 28454 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1140: /* d_expr: AexprConst  */
#line 2631 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 28460 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1141: /* d_expr: '#' ICONST  */
#line 2633 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGPositionalReference *n = makeNode(PGPositionalReference);
					n->position = (yyvsp[0].ival);
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *) n;
				}
#line 28471 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1142: /* d_expr: '$' ColLabel  */
#line 2640 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeNamedParamRef((yyvsp[0].str), (yylsp[-1]));
				}
#line 28479 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1143: /* d_expr: '[' opt_expr_list_opt_comma ']'  */
#line 2643 "third_party/libpg_query/grammar/statements/select.y"
                                                          {
				PGFuncCall *n = makeFuncCall(SystemFuncName("list_value"), (yyvsp[-1].list), (yylsp[-1]));
				(yyval.node) = (PGNode *) n;
			}
#line 28488 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1144: /* d_expr: list_comprehension  */
#line 2647 "third_party/libpg_query/grammar/statements/select.y"
                                             {
				(yyval.node) = (yyvsp[0].node);
			}
#line 28496 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1145: /* d_expr: ARRAY select_with_parens  */
#line 2651 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSubLink *n = makeNode(PGSubLink);
					n->subLinkType = PG_ARRAY_SUBLINK;
					n->subLinkId = 0;
					n->testexpr = NULL;
					n->operName = NULL;
					n->subselect = (yyvsp[0].node);
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 28511 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1146: /* d_expr: ARRAY '[' opt_expr_list_opt_comma ']'  */
#line 2661 "third_party/libpg_query/grammar/statements/select.y"
                                                                {
				PGList *func_name = list_make1(makeString("construct_array"));
				PGFuncCall *n = makeFuncCall(func_name, (yyvsp[-1].list), (yylsp[-3]));
				(yyval.node) = (PGNode *) n;
			}
#line 28521 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1147: /* d_expr: case_expr  */
#line 2667 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 28527 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1148: /* d_expr: select_with_parens  */
#line 2669 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSubLink *n = makeNode(PGSubLink);
					n->subLinkType = PG_EXPR_SUBLINK;
					n->subLinkId = 0;
					n->testexpr = NULL;
					n->operName = NIL;
					n->subselect = (yyvsp[0].node);
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 28542 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1149: /* d_expr: select_with_parens indirection  */
#line 2680 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/*
					 * Because the select_with_parens nonterminal is designed
					 * to "eat" as many levels of parens as possible, the
					 * '(' a_expr ')' opt_indirection production above will
					 * fail to match a sub-SELECT with indirection decoration;
					 * the sub-SELECT won't be regarded as an a_expr as long
					 * as there are parens around it.  To support applying
					 * subscripting or field selection to a sub-SELECT result,
					 * we need this redundant-looking production.
					 */
					PGSubLink *n = makeNode(PGSubLink);
					PGAIndirection *a = makeNode(PGAIndirection);
					n->subLinkType = PG_EXPR_SUBLINK;
					n->subLinkId = 0;
					n->testexpr = NULL;
					n->operName = NIL;
					n->subselect = (yyvsp[-1].node);
					n->location = (yylsp[-1]);
					a->arg = (PGNode *)n;
					a->indirection = check_indirection((yyvsp[0].list), yyscanner);
					(yyval.node) = (PGNode *)a;
				}
#line 28570 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1150: /* d_expr: EXISTS select_with_parens  */
#line 2704 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSubLink *n = makeNode(PGSubLink);
					n->subLinkType = PG_EXISTS_SUBLINK;
					n->subLinkId = 0;
					n->testexpr = NULL;
					n->operName = NIL;
					n->subselect = (yyvsp[0].node);
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 28585 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1151: /* d_expr: grouping_or_grouping_id '(' expr_list_opt_comma ')'  */
#line 2715 "third_party/libpg_query/grammar/statements/select.y"
                          {
				  PGGroupingFunc *g = makeNode(PGGroupingFunc);
				  g->args = (yyvsp[-1].list);
				  g->location = (yylsp[-3]);
				  (yyval.node) = (PGNode *)g;
			  }
#line 28596 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1152: /* indirection_expr: '?'  */
#line 2726 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeParamRef(0, (yylsp[0]));
				}
#line 28604 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1153: /* indirection_expr: PARAM  */
#line 2730 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGParamRef *p = makeNode(PGParamRef);
					p->number = (yyvsp[0].ival);
					p->location = (yylsp[0]);
					(yyval.node) = (PGNode *) p;
				}
#line 28615 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1154: /* indirection_expr: '(' a_expr ')'  */
#line 2737 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (yyvsp[-1].node);
				}
#line 28623 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1155: /* indirection_expr: '{' dict_arguments_opt_comma '}'  */
#line 2741 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *f = makeFuncCall(SystemFuncName("struct_pack"), (yyvsp[-1].list), (yylsp[-1]));
					(yyval.node) = (PGNode *) f;
				}
#line 28632 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1156: /* indirection_expr: MAP '{' opt_map_arguments_opt_comma '}'  */
#line 2746 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGList *key_list = NULL;
					PGList *value_list = NULL;
					PGListCell *lc;
					PGList *entry_list = (yyvsp[-1].list);
					foreach(lc, entry_list)
					{
						PGList *l = (PGList *) lc->data.ptr_value;
						key_list = lappend(key_list, (PGNode *) l->head->data.ptr_value);
						value_list = lappend(value_list, (PGNode *) l->tail->data.ptr_value);
					}
					PGNode *keys   = (PGNode *) makeFuncCall(SystemFuncName("list_value"), key_list, (yylsp[-1]));
					PGNode *values = (PGNode *) makeFuncCall(SystemFuncName("list_value"), value_list, (yylsp[-1]));
					PGFuncCall *f = makeFuncCall(SystemFuncName("map"), list_make2(keys, values), (yylsp[-1]));
					(yyval.node) = (PGNode *) f;
				}
#line 28653 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1157: /* indirection_expr: func_expr  */
#line 2763 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (yyvsp[0].node);
				}
#line 28661 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1158: /* func_application: func_name '(' ')'  */
#line 2769 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall((yyvsp[-2].list), NIL, (yylsp[-2]));
				}
#line 28669 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1159: /* func_application: func_name '(' func_arg_list opt_sort_clause opt_ignore_nulls ')'  */
#line 2773 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall((yyvsp[-5].list), (yyvsp[-3].list), (yylsp[-5]));
					n->agg_order = (yyvsp[-2].list);
					n->agg_ignore_nulls = (yyvsp[-1].boolean);
					(yyval.node) = (PGNode *)n;
				}
#line 28680 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1160: /* func_application: func_name '(' VARIADIC func_arg_expr opt_sort_clause opt_ignore_nulls ')'  */
#line 2780 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall((yyvsp[-6].list), list_make1((yyvsp[-3].node)), (yylsp[-6]));
					n->func_variadic = true;
					n->agg_order = (yyvsp[-2].list);
					n->agg_ignore_nulls = (yyvsp[-1].boolean);
					(yyval.node) = (PGNode *)n;
				}
#line 28692 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1161: /* func_application: func_name '(' func_arg_list ',' VARIADIC func_arg_expr opt_sort_clause opt_ignore_nulls ')'  */
#line 2788 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall((yyvsp[-8].list), lappend((yyvsp[-6].list), (yyvsp[-3].node)), (yylsp[-8]));
					n->func_variadic = true;
					n->agg_order = (yyvsp[-2].list);
					n->agg_ignore_nulls = (yyvsp[-1].boolean);
					(yyval.node) = (PGNode *)n;
				}
#line 28704 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1162: /* func_application: func_name '(' ALL func_arg_list opt_sort_clause opt_ignore_nulls ')'  */
#line 2796 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall((yyvsp[-6].list), (yyvsp[-3].list), (yylsp[-6]));
					n->agg_order = (yyvsp[-2].list);
					n->agg_ignore_nulls = (yyvsp[-1].boolean);
					/* Ideally we'd mark the PGFuncCall node to indicate
					 * "must be an aggregate", but there's no provision
					 * for that in PGFuncCall at the moment.
					 */
					(yyval.node) = (PGNode *)n;
				}
#line 28719 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1163: /* func_application: func_name '(' DISTINCT func_arg_list opt_sort_clause opt_ignore_nulls ')'  */
#line 2807 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall((yyvsp[-6].list), (yyvsp[-3].list), (yylsp[-6]));
					n->agg_order = (yyvsp[-2].list);
					n->agg_ignore_nulls = (yyvsp[-1].boolean);
					n->agg_distinct = true;
					(yyval.node) = (PGNode *)n;
				}
#line 28731 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1164: /* func_expr: func_application within_group_clause filter_clause export_clause over_clause  */
#line 2827 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = (PGFuncCall *) (yyvsp[-4].node);
					/*
					 * The order clause for WITHIN GROUP and the one for
					 * plain-aggregate ORDER BY share a field, so we have to
					 * check here that at most one is present.  We also check
					 * for DISTINCT and VARIADIC here to give a better error
					 * location.  Other consistency checks are deferred to
					 * parse analysis.
					 */
					if ((yyvsp[-3].list) != NIL)
					{
						if (n->agg_order != NIL)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("cannot use multiple ORDER BY clauses with WITHIN GROUP"),
									 parser_errposition((yylsp[-3]))));
						if (n->agg_distinct)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("cannot use DISTINCT with WITHIN GROUP"),
									 parser_errposition((yylsp[-3]))));
						if (n->func_variadic)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("cannot use VARIADIC with WITHIN GROUP"),
									 parser_errposition((yylsp[-3]))));
						n->agg_order = (yyvsp[-3].list);
						n->agg_within_group = true;
					}
					n->agg_filter = (yyvsp[-2].node);
					n->export_state = (yyvsp[-1].boolean);
					n->over = (yyvsp[0].windef);
					(yyval.node) = (PGNode *) n;
				}
#line 28771 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1165: /* func_expr: func_expr_common_subexpr  */
#line 2863 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 28777 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1166: /* func_expr_windowless: func_application  */
#line 2873 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 28783 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1167: /* func_expr_windowless: func_expr_common_subexpr  */
#line 2874 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 28789 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1168: /* func_expr_common_subexpr: COLLATION FOR '(' a_expr ')'  */
#line 2882 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("pg_collation_for"),
											   list_make1((yyvsp[-1].node)),
											   (yylsp[-4]));
				}
#line 28799 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1169: /* func_expr_common_subexpr: CAST '(' a_expr AS Typename ')'  */
#line 2888 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeTypeCast((yyvsp[-3].node), (yyvsp[-1].typnam), 0, (yylsp[-5])); }
#line 28805 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1170: /* func_expr_common_subexpr: TRY_CAST '(' a_expr AS Typename ')'  */
#line 2890 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeTypeCast((yyvsp[-3].node), (yyvsp[-1].typnam), 1, (yylsp[-5])); }
#line 28811 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1171: /* func_expr_common_subexpr: EXTRACT '(' extract_list ')'  */
#line 2892 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("date_part"), (yyvsp[-1].list), (yylsp[-3]));
				}
#line 28819 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1172: /* func_expr_common_subexpr: OVERLAY '(' overlay_list ')'  */
#line 2896 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* overlay(A PLACING B FROM C FOR D) is converted to
					 * overlay(A, B, C, D)
					 * overlay(A PLACING B FROM C) is converted to
					 * overlay(A, B, C)
					 */
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("overlay"), (yyvsp[-1].list), (yylsp[-3]));
				}
#line 28832 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1173: /* func_expr_common_subexpr: POSITION '(' position_list ')'  */
#line 2905 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* position(A in B) is converted to position(B, A) */
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("position"), (yyvsp[-1].list), (yylsp[-3]));
				}
#line 28841 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1174: /* func_expr_common_subexpr: SUBSTRING '(' substr_list ')'  */
#line 2910 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* substring(A from B for C) is converted to
					 * substring(A, B, C) - thomas 2000-11-28
					 */
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("substring"), (yyvsp[-1].list), (yylsp[-3]));
				}
#line 28852 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1175: /* func_expr_common_subexpr: TREAT '(' a_expr AS Typename ')'  */
#line 2917 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* TREAT(expr AS target) converts expr of a particular type to target,
					 * which is defined to be a subtype of the original expression.
					 * In SQL99, this is intended for use with structured UDTs,
					 * but let's make this a generally useful form allowing stronger
					 * coercions than are handled by implicit casting.
					 *
					 * Convert SystemTypeName() to SystemFuncName() even though
					 * at the moment they result in the same thing.
					 */
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName(((PGValue *)llast((yyvsp[-1].typnam)->names))->val.str),
												list_make1((yyvsp[-3].node)),
												(yylsp[-5]));
				}
#line 28871 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1176: /* func_expr_common_subexpr: TRIM '(' BOTH trim_list ')'  */
#line 2932 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* various trim expressions are defined in SQL
					 * - thomas 1997-07-19
					 */
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("trim"), (yyvsp[-1].list), (yylsp[-4]));
				}
#line 28882 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1177: /* func_expr_common_subexpr: TRIM '(' LEADING trim_list ')'  */
#line 2939 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("ltrim"), (yyvsp[-1].list), (yylsp[-4]));
				}
#line 28890 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1178: /* func_expr_common_subexpr: TRIM '(' TRAILING trim_list ')'  */
#line 2943 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("rtrim"), (yyvsp[-1].list), (yylsp[-4]));
				}
#line 28898 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1179: /* func_expr_common_subexpr: TRIM '(' trim_list ')'  */
#line 2947 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("trim"), (yyvsp[-1].list), (yylsp[-3]));
				}
#line 28906 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1180: /* func_expr_common_subexpr: NULLIF '(' a_expr ',' a_expr ')'  */
#line 2951 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NULLIF, "=", (yyvsp[-3].node), (yyvsp[-1].node), (yylsp[-5]));
				}
#line 28914 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1181: /* func_expr_common_subexpr: COALESCE '(' expr_list_opt_comma ')'  */
#line 2955 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGCoalesceExpr *c = makeNode(PGCoalesceExpr);
					c->args = (yyvsp[-1].list);
					c->location = (yylsp[-3]);
					(yyval.node) = (PGNode *)c;
				}
#line 28925 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1182: /* list_comprehension: '[' a_expr FOR ColId IN_P a_expr ']'  */
#line 2965 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGLambdaFunction *lambda = makeNode(PGLambdaFunction);
					lambda->lhs = makeColumnRef((yyvsp[-3].str), NIL, (yylsp[-3]), yyscanner);
					lambda->rhs = (yyvsp[-5].node);
					lambda->location = (yylsp[-6]);
					PGFuncCall *n = makeFuncCall(SystemFuncName("list_apply"), list_make2((yyvsp[-1].node), lambda), (yylsp[-6]));
					(yyval.node) = (PGNode *) n;
				}
#line 28938 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1183: /* list_comprehension: '[' a_expr FOR ColId IN_P c_expr IF_P a_expr ']'  */
#line 2974 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGLambdaFunction *lambda = makeNode(PGLambdaFunction);
					lambda->lhs = makeColumnRef((yyvsp[-5].str), NIL, (yylsp[-5]), yyscanner);
					lambda->rhs = (yyvsp[-7].node);
					lambda->location = (yylsp[-8]);

					PGLambdaFunction *lambda_filter = makeNode(PGLambdaFunction);
					lambda_filter->lhs = makeColumnRef((yyvsp[-5].str), NIL, (yylsp[-5]), yyscanner);
					lambda_filter->rhs = (yyvsp[-1].node);
					lambda_filter->location = (yylsp[-1]);
					PGFuncCall *filter = makeFuncCall(SystemFuncName("list_filter"), list_make2((yyvsp[-3].node), lambda_filter), (yylsp[-8]));
					PGFuncCall *n = makeFuncCall(SystemFuncName("list_apply"), list_make2(filter, lambda), (yylsp[-8]));
					(yyval.node) = (PGNode *) n;
				}
#line 28957 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1184: /* within_group_clause: WITHIN GROUP_P '(' sort_clause ')'  */
#line 2995 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 28963 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1185: /* within_group_clause: %empty  */
#line 2996 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 28969 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1186: /* filter_clause: FILTER '(' WHERE a_expr ')'  */
#line 3000 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[-1].node); }
#line 28975 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1187: /* filter_clause: FILTER '(' a_expr ')'  */
#line 3001 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[-1].node); }
#line 28981 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1188: /* filter_clause: %empty  */
#line 3002 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 28987 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1189: /* export_clause: EXPORT_STATE  */
#line 3006 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.boolean) = true; }
#line 28993 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1190: /* export_clause: %empty  */
#line 3007 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 28999 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1191: /* window_clause: WINDOW window_definition_list  */
#line 3014 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 29005 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1192: /* window_clause: %empty  */
#line 3015 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 29011 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1193: /* window_definition_list: window_definition  */
#line 3019 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].windef)); }
#line 29017 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1194: /* window_definition_list: window_definition_list ',' window_definition  */
#line 3021 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].windef)); }
#line 29023 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1195: /* window_definition: ColId AS window_specification  */
#line 3026 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = (yyvsp[0].windef);
					n->name = (yyvsp[-2].str);
					(yyval.windef) = n;
				}
#line 29033 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1196: /* over_clause: OVER window_specification  */
#line 3034 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.windef) = (yyvsp[0].windef); }
#line 29039 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1197: /* over_clause: OVER ColId  */
#line 3036 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->name = (yyvsp[0].str);
					n->refname = NULL;
					n->partitionClause = NIL;
					n->orderClause = NIL;
					n->frameOptions = FRAMEOPTION_DEFAULTS;
					n->startOffset = NULL;
					n->endOffset = NULL;
					n->location = (yylsp[0]);
					(yyval.windef) = n;
				}
#line 29056 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1198: /* over_clause: %empty  */
#line 3049 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.windef) = NULL; }
#line 29062 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1199: /* window_specification: '(' opt_existing_window_name opt_partition_clause opt_sort_clause opt_frame_clause ')'  */
#line 3054 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->name = NULL;
					n->refname = (yyvsp[-4].str);
					n->partitionClause = (yyvsp[-3].list);
					n->orderClause = (yyvsp[-2].list);
					/* copy relevant fields of opt_frame_clause */
					n->frameOptions = (yyvsp[-1].windef)->frameOptions;
					n->startOffset = (yyvsp[-1].windef)->startOffset;
					n->endOffset = (yyvsp[-1].windef)->endOffset;
					n->location = (yylsp[-5]);
					(yyval.windef) = n;
				}
#line 29080 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1200: /* opt_existing_window_name: ColId  */
#line 3079 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 29086 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1201: /* opt_existing_window_name: %empty  */
#line 3080 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = NULL; }
#line 29092 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1202: /* opt_partition_clause: PARTITION BY expr_list  */
#line 3083 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.list) = (yyvsp[0].list); }
#line 29098 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1203: /* opt_partition_clause: %empty  */
#line 3084 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 29104 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1204: /* opt_frame_clause: RANGE frame_extent  */
#line 3096 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = (yyvsp[0].windef);
					n->frameOptions |= FRAMEOPTION_NONDEFAULT | FRAMEOPTION_RANGE;
					(yyval.windef) = n;
				}
#line 29114 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1205: /* opt_frame_clause: ROWS frame_extent  */
#line 3102 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = (yyvsp[0].windef);
					n->frameOptions |= FRAMEOPTION_NONDEFAULT | FRAMEOPTION_ROWS;
					(yyval.windef) = n;
				}
#line 29124 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1206: /* opt_frame_clause: %empty  */
#line 3108 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->frameOptions = FRAMEOPTION_DEFAULTS;
					n->startOffset = NULL;
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 29136 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1207: /* frame_extent: frame_bound  */
#line 3118 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = (yyvsp[0].windef);
					/* reject invalid cases */
					if (n->frameOptions & FRAMEOPTION_START_UNBOUNDED_FOLLOWING)
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame start cannot be UNBOUNDED FOLLOWING"),
								 parser_errposition((yylsp[0]))));
					if (n->frameOptions & FRAMEOPTION_START_VALUE_FOLLOWING)
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame starting from following row cannot end with current row"),
								 parser_errposition((yylsp[0]))));
					n->frameOptions |= FRAMEOPTION_END_CURRENT_ROW;
					(yyval.windef) = n;
				}
#line 29157 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1208: /* frame_extent: BETWEEN frame_bound AND frame_bound  */
#line 3135 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n1 = (yyvsp[-2].windef);
					PGWindowDef *n2 = (yyvsp[0].windef);
					/* form merged options */
					int		frameOptions = n1->frameOptions;
					/* shift converts START_ options to END_ options */
					frameOptions |= n2->frameOptions << 1;
					frameOptions |= FRAMEOPTION_BETWEEN;
					/* reject invalid cases */
					if (frameOptions & FRAMEOPTION_START_UNBOUNDED_FOLLOWING)
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame start cannot be UNBOUNDED FOLLOWING"),
								 parser_errposition((yylsp[-2]))));
					if (frameOptions & FRAMEOPTION_END_UNBOUNDED_PRECEDING)
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame end cannot be UNBOUNDED PRECEDING"),
								 parser_errposition((yylsp[0]))));
					if ((frameOptions & FRAMEOPTION_START_CURRENT_ROW) &&
						(frameOptions & FRAMEOPTION_END_VALUE_PRECEDING))
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame starting from current row cannot have preceding rows"),
								 parser_errposition((yylsp[0]))));
					if ((frameOptions & FRAMEOPTION_START_VALUE_FOLLOWING) &&
						(frameOptions & (FRAMEOPTION_END_VALUE_PRECEDING |
										 FRAMEOPTION_END_CURRENT_ROW)))
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame starting from following row cannot have preceding rows"),
								 parser_errposition((yylsp[0]))));
					n1->frameOptions = frameOptions;
					n1->endOffset = n2->startOffset;
					(yyval.windef) = n1;
				}
#line 29198 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1209: /* frame_bound: UNBOUNDED PRECEDING  */
#line 3180 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->frameOptions = FRAMEOPTION_START_UNBOUNDED_PRECEDING;
					n->startOffset = NULL;
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 29210 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1210: /* frame_bound: UNBOUNDED FOLLOWING  */
#line 3188 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->frameOptions = FRAMEOPTION_START_UNBOUNDED_FOLLOWING;
					n->startOffset = NULL;
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 29222 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1211: /* frame_bound: CURRENT_P ROW  */
#line 3196 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->frameOptions = FRAMEOPTION_START_CURRENT_ROW;
					n->startOffset = NULL;
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 29234 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1212: /* frame_bound: a_expr PRECEDING  */
#line 3204 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->frameOptions = FRAMEOPTION_START_VALUE_PRECEDING;
					n->startOffset = (yyvsp[-1].node);
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 29246 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1213: /* frame_bound: a_expr FOLLOWING  */
#line 3212 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->frameOptions = FRAMEOPTION_START_VALUE_FOLLOWING;
					n->startOffset = (yyvsp[-1].node);
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 29258 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1214: /* qualified_row: ROW '(' expr_list_opt_comma ')'  */
#line 3232 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 29264 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1215: /* qualified_row: ROW '(' ')'  */
#line 3233 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = NIL; }
#line 29270 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1216: /* row: qualified_row  */
#line 3236 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[0].list);}
#line 29276 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1217: /* row: '(' expr_list ',' a_expr ')'  */
#line 3237 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = lappend((yyvsp[-3].list), (yyvsp[-1].node)); }
#line 29282 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1218: /* dict_arg: ColIdOrString ':' a_expr  */
#line 3241 "third_party/libpg_query/grammar/statements/select.y"
                                                                                {
		PGNamedArgExpr *na = makeNode(PGNamedArgExpr);
		na->name = (yyvsp[-2].str);
		na->arg = (PGExpr *) (yyvsp[0].node);
		na->argnumber = -1;
		na->location = (yylsp[-2]);
		(yyval.node) = (PGNode *) na;
	}
#line 29295 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1219: /* dict_arguments: dict_arg  */
#line 3251 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 29301 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1220: /* dict_arguments: dict_arguments ',' dict_arg  */
#line 3252 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 29307 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1221: /* dict_arguments_opt_comma: dict_arguments  */
#line 3256 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 29313 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1222: /* dict_arguments_opt_comma: dict_arguments ','  */
#line 3257 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 29319 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1223: /* map_arg: a_expr ':' a_expr  */
#line 3262 "third_party/libpg_query/grammar/statements/select.y"
                        {
				(yyval.list) = list_make2((yyvsp[-2].node), (yyvsp[0].node));
			}
#line 29327 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1224: /* map_arguments: map_arg  */
#line 3268 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].list)); }
#line 29333 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1225: /* map_arguments: map_arguments ',' map_arg  */
#line 3269 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].list)); }
#line 29339 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1226: /* map_arguments_opt_comma: map_arguments  */
#line 3274 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 29345 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1227: /* map_arguments_opt_comma: map_arguments ','  */
#line 3275 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 29351 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1228: /* opt_map_arguments_opt_comma: map_arguments_opt_comma  */
#line 3280 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 29357 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1229: /* opt_map_arguments_opt_comma: %empty  */
#line 3281 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = NULL; }
#line 29363 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1230: /* sub_type: ANY  */
#line 3284 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.subquerytype) = PG_ANY_SUBLINK; }
#line 29369 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1231: /* sub_type: SOME  */
#line 3285 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.subquerytype) = PG_ANY_SUBLINK; }
#line 29375 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1232: /* sub_type: ALL  */
#line 3286 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.subquerytype) = PG_ALL_SUBLINK; }
#line 29381 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1233: /* all_Op: Op  */
#line 3289 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 29387 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1234: /* all_Op: MathOp  */
#line 3290 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.str) = (char*) (yyvsp[0].conststr); }
#line 29393 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1235: /* MathOp: '+'  */
#line 3293 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.conststr) = "+"; }
#line 29399 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1236: /* MathOp: '-'  */
#line 3294 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "-"; }
#line 29405 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1237: /* MathOp: '*'  */
#line 3295 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "*"; }
#line 29411 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1238: /* MathOp: '/'  */
#line 3296 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "/"; }
#line 29417 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1239: /* MathOp: INTEGER_DIVISION  */
#line 3297 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.conststr) = "//"; }
#line 29423 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1240: /* MathOp: '%'  */
#line 3298 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "%"; }
#line 29429 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1241: /* MathOp: '^'  */
#line 3299 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "^"; }
#line 29435 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1242: /* MathOp: POWER_OF  */
#line 3300 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "**"; }
#line 29441 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1243: /* MathOp: '<'  */
#line 3301 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "<"; }
#line 29447 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1244: /* MathOp: '>'  */
#line 3302 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = ">"; }
#line 29453 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1245: /* MathOp: '='  */
#line 3303 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "="; }
#line 29459 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1246: /* MathOp: LESS_EQUALS  */
#line 3304 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.conststr) = "<="; }
#line 29465 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1247: /* MathOp: GREATER_EQUALS  */
#line 3305 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.conststr) = ">="; }
#line 29471 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1248: /* MathOp: NOT_EQUALS  */
#line 3306 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.conststr) = "<>"; }
#line 29477 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1249: /* qual_Op: Op  */
#line 3310 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 29483 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1250: /* qual_Op: OPERATOR '(' any_operator ')'  */
#line 3312 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = (yyvsp[-1].list); }
#line 29489 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1251: /* qual_all_Op: all_Op  */
#line 3317 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 29495 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1252: /* qual_all_Op: OPERATOR '(' any_operator ')'  */
#line 3319 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = (yyvsp[-1].list); }
#line 29501 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1253: /* subquery_Op: all_Op  */
#line 3324 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 29507 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1254: /* subquery_Op: OPERATOR '(' any_operator ')'  */
#line 3326 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = (yyvsp[-1].list); }
#line 29513 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1255: /* subquery_Op: LIKE  */
#line 3328 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("~~")); }
#line 29519 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1256: /* subquery_Op: NOT_LA LIKE  */
#line 3330 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("!~~")); }
#line 29525 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1257: /* subquery_Op: GLOB  */
#line 3332 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("~~~")); }
#line 29531 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1258: /* subquery_Op: NOT_LA GLOB  */
#line 3334 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("!~~~")); }
#line 29537 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1259: /* subquery_Op: ILIKE  */
#line 3336 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("~~*")); }
#line 29543 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1260: /* subquery_Op: NOT_LA ILIKE  */
#line 3338 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("!~~*")); }
#line 29549 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1261: /* any_operator: all_Op  */
#line 3352 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 29555 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1262: /* any_operator: ColId '.' any_operator  */
#line 3354 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = lcons(makeString((yyvsp[-2].str)), (yyvsp[0].list)); }
#line 29561 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1263: /* c_expr_list: c_expr  */
#line 3359 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 29569 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1264: /* c_expr_list: c_expr_list ',' c_expr  */
#line 3363 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 29577 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1265: /* c_expr_list_opt_comma: c_expr_list  */
#line 3370 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = (yyvsp[0].list);
				}
#line 29585 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1266: /* c_expr_list_opt_comma: c_expr_list ','  */
#line 3375 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = (yyvsp[-1].list);
				}
#line 29593 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1267: /* expr_list: a_expr  */
#line 3381 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 29601 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1268: /* expr_list: expr_list ',' a_expr  */
#line 3385 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 29609 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1269: /* expr_list_opt_comma: expr_list  */
#line 3392 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = (yyvsp[0].list);
				}
#line 29617 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1270: /* expr_list_opt_comma: expr_list ','  */
#line 3397 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = (yyvsp[-1].list);
				}
#line 29625 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1271: /* opt_expr_list_opt_comma: expr_list_opt_comma  */
#line 3404 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = (yyvsp[0].list);
				}
#line 29633 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1272: /* opt_expr_list_opt_comma: %empty  */
#line 3408 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = NULL;
				}
#line 29641 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1273: /* func_arg_list: func_arg_expr  */
#line 3417 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 29649 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1274: /* func_arg_list: func_arg_list ',' func_arg_expr  */
#line 3421 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 29657 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1275: /* func_arg_expr: a_expr  */
#line 3427 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (yyvsp[0].node);
				}
#line 29665 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1276: /* func_arg_expr: param_name COLON_EQUALS a_expr  */
#line 3431 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNamedArgExpr *na = makeNode(PGNamedArgExpr);
					na->name = (yyvsp[-2].str);
					na->arg = (PGExpr *) (yyvsp[0].node);
					na->argnumber = -1;		/* until determined */
					na->location = (yylsp[-2]);
					(yyval.node) = (PGNode *) na;
				}
#line 29678 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1277: /* func_arg_expr: param_name EQUALS_GREATER a_expr  */
#line 3440 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNamedArgExpr *na = makeNode(PGNamedArgExpr);
					na->name = (yyvsp[-2].str);
					na->arg = (PGExpr *) (yyvsp[0].node);
					na->argnumber = -1;		/* until determined */
					na->location = (yylsp[-2]);
					(yyval.node) = (PGNode *) na;
				}
#line 29691 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1278: /* type_list: Typename  */
#line 3450 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].typnam)); }
#line 29697 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1279: /* type_list: type_list ',' Typename  */
#line 3451 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].typnam)); }
#line 29703 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1280: /* extract_list: extract_arg FROM a_expr  */
#line 3456 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make2(makeStringConst((yyvsp[-2].str), (yylsp[-2])), (yyvsp[0].node));
				}
#line 29711 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1281: /* extract_list: %empty  */
#line 3459 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 29717 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1282: /* extract_arg: IDENT  */
#line 3466 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 29723 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1283: /* extract_arg: year_keyword  */
#line 3467 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "year"; }
#line 29729 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1284: /* extract_arg: month_keyword  */
#line 3468 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "month"; }
#line 29735 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1285: /* extract_arg: day_keyword  */
#line 3469 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "day"; }
#line 29741 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1286: /* extract_arg: hour_keyword  */
#line 3470 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "hour"; }
#line 29747 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1287: /* extract_arg: minute_keyword  */
#line 3471 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "minute"; }
#line 29753 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1288: /* extract_arg: second_keyword  */
#line 3472 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "second"; }
#line 29759 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1289: /* extract_arg: millisecond_keyword  */
#line 3473 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.str) = (char*) "millisecond"; }
#line 29765 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1290: /* extract_arg: microsecond_keyword  */
#line 3474 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.str) = (char*) "microsecond"; }
#line 29771 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1291: /* extract_arg: Sconst  */
#line 3475 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 29777 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1292: /* overlay_list: a_expr overlay_placing substr_from substr_for  */
#line 3486 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make4((yyvsp[-3].node), (yyvsp[-2].node), (yyvsp[-1].node), (yyvsp[0].node));
				}
#line 29785 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1293: /* overlay_list: a_expr overlay_placing substr_from  */
#line 3490 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make3((yyvsp[-2].node), (yyvsp[-1].node), (yyvsp[0].node));
				}
#line 29793 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1294: /* overlay_placing: PLACING a_expr  */
#line 3497 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 29799 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1295: /* position_list: b_expr IN_P b_expr  */
#line 3503 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make2((yyvsp[0].node), (yyvsp[-2].node)); }
#line 29805 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1296: /* position_list: %empty  */
#line 3504 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 29811 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1297: /* substr_list: a_expr substr_from substr_for  */
#line 3521 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make3((yyvsp[-2].node), (yyvsp[-1].node), (yyvsp[0].node));
				}
#line 29819 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1298: /* substr_list: a_expr substr_for substr_from  */
#line 3525 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* not legal per SQL99, but might as well allow it */
					(yyval.list) = list_make3((yyvsp[-2].node), (yyvsp[0].node), (yyvsp[-1].node));
				}
#line 29828 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1299: /* substr_list: a_expr substr_from  */
#line 3530 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make2((yyvsp[-1].node), (yyvsp[0].node));
				}
#line 29836 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1300: /* substr_list: a_expr substr_for  */
#line 3534 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/*
					 * Since there are no cases where this syntax allows
					 * a textual FOR value, we forcibly cast the argument
					 * to int4.  The possible matches in pg_proc are
					 * substring(text,int4) and substring(text,text),
					 * and we don't want the parser to choose the latter,
					 * which it is likely to do if the second argument
					 * is unknown or doesn't have an implicit cast to int4.
					 */
					(yyval.list) = list_make3((yyvsp[-1].node), makeIntConst(1, -1),
									makeTypeCast((yyvsp[0].node),
												 SystemTypeName("int4"), 0, -1));
				}
#line 29855 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1301: /* substr_list: expr_list  */
#line 3549 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = (yyvsp[0].list);
				}
#line 29863 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1302: /* substr_list: %empty  */
#line 3553 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = NIL; }
#line 29869 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1303: /* substr_from: FROM a_expr  */
#line 3557 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 29875 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1304: /* substr_for: FOR a_expr  */
#line 3560 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 29881 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1305: /* trim_list: a_expr FROM expr_list_opt_comma  */
#line 3563 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = lappend((yyvsp[0].list), (yyvsp[-2].node)); }
#line 29887 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1306: /* trim_list: FROM expr_list_opt_comma  */
#line 3564 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 29893 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1307: /* trim_list: expr_list_opt_comma  */
#line 3565 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 29899 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1308: /* in_expr: select_with_parens  */
#line 3569 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSubLink *n = makeNode(PGSubLink);
					n->subselect = (yyvsp[0].node);
					/* other fields will be filled later */
					(yyval.node) = (PGNode *)n;
				}
#line 29910 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1309: /* in_expr: '(' expr_list_opt_comma ')'  */
#line 3575 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (PGNode *)(yyvsp[-1].list); }
#line 29916 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1310: /* case_expr: CASE case_arg when_clause_list case_default END_P  */
#line 3586 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGCaseExpr *c = makeNode(PGCaseExpr);
					c->casetype = InvalidOid; /* not analyzed yet */
					c->arg = (PGExpr *) (yyvsp[-3].node);
					c->args = (yyvsp[-2].list);
					c->defresult = (PGExpr *) (yyvsp[-1].node);
					c->location = (yylsp[-4]);
					(yyval.node) = (PGNode *)c;
				}
#line 29930 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1311: /* when_clause_list: when_clause  */
#line 3599 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 29936 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1312: /* when_clause_list: when_clause_list when_clause  */
#line 3600 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 29942 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1313: /* when_clause: WHEN a_expr THEN a_expr  */
#line 3605 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGCaseWhen *w = makeNode(PGCaseWhen);
					w->expr = (PGExpr *) (yyvsp[-2].node);
					w->result = (PGExpr *) (yyvsp[0].node);
					w->location = (yylsp[-3]);
					(yyval.node) = (PGNode *)w;
				}
#line 29954 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1314: /* case_default: ELSE a_expr  */
#line 3615 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 29960 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1315: /* case_default: %empty  */
#line 3616 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 29966 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1316: /* case_arg: a_expr  */
#line 3619 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 29972 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1317: /* case_arg: %empty  */
#line 3620 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 29978 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1318: /* columnref: ColId  */
#line 3624 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeColumnRef((yyvsp[0].str), NIL, (yylsp[0]), yyscanner);
				}
#line 29986 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1319: /* columnref: ColId indirection  */
#line 3628 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeColumnRef((yyvsp[-1].str), (yyvsp[0].list), (yylsp[-1]), yyscanner);
				}
#line 29994 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1320: /* indirection_el: '[' a_expr ']'  */
#line 3635 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAIndices *ai = makeNode(PGAIndices);
					ai->is_slice = false;
					ai->lidx = NULL;
					ai->uidx = (yyvsp[-1].node);
					(yyval.node) = (PGNode *) ai;
				}
#line 30006 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1321: /* indirection_el: '[' opt_slice_bound ':' opt_slice_bound ']'  */
#line 3643 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAIndices *ai = makeNode(PGAIndices);
					ai->is_slice = true;
					ai->lidx = (yyvsp[-3].node);
					ai->uidx = (yyvsp[-1].node);
					(yyval.node) = (PGNode *) ai;
				}
#line 30018 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1322: /* opt_slice_bound: a_expr  */
#line 3653 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 30024 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1323: /* opt_slice_bound: %empty  */
#line 3654 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 30030 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1324: /* opt_indirection: %empty  */
#line 3659 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 30036 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1325: /* opt_indirection: opt_indirection indirection_el  */
#line 3660 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 30042 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1326: /* opt_func_arguments: %empty  */
#line 3664 "third_party/libpg_query/grammar/statements/select.y"
                                                { (yyval.list) = NULL; }
#line 30048 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1327: /* opt_func_arguments: '(' ')'  */
#line 3665 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.list) = list_make1(NULL); }
#line 30054 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1328: /* opt_func_arguments: '(' func_arg_list ')'  */
#line 3666 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = (yyvsp[-1].list); }
#line 30060 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1329: /* extended_indirection_el: '.' attr_name opt_func_arguments  */
#line 3671 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].list)) {
						PGFuncCall *n = makeFuncCall(list_make1(makeString((yyvsp[-1].str))), (yyvsp[0].list)->head->data.ptr_value ? (yyvsp[0].list) : NULL, (yylsp[-1]));
						(yyval.node) = (PGNode *) n;
					} else {
						(yyval.node) = (PGNode *) makeString((yyvsp[-1].str));
					}
				}
#line 30073 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1330: /* extended_indirection_el: '[' a_expr ']'  */
#line 3680 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAIndices *ai = makeNode(PGAIndices);
					ai->is_slice = false;
					ai->lidx = NULL;
					ai->uidx = (yyvsp[-1].node);
					(yyval.node) = (PGNode *) ai;
				}
#line 30085 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1331: /* extended_indirection_el: '[' opt_slice_bound ':' opt_slice_bound ']'  */
#line 3688 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAIndices *ai = makeNode(PGAIndices);
					ai->is_slice = true;
					ai->lidx = (yyvsp[-3].node);
					ai->uidx = (yyvsp[-1].node);
					(yyval.node) = (PGNode *) ai;
				}
#line 30097 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1332: /* opt_extended_indirection: %empty  */
#line 3703 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                                { (yyval.list) = NIL; }
#line 30103 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1333: /* opt_extended_indirection: opt_extended_indirection extended_indirection_el  */
#line 3704 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 30109 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1336: /* opt_target_list_opt_comma: target_list_opt_comma  */
#line 3720 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 30115 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1337: /* opt_target_list_opt_comma: %empty  */
#line 3721 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = NIL; }
#line 30121 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1338: /* target_list: target_el  */
#line 3725 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].target)); }
#line 30127 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1339: /* target_list: target_list ',' target_el  */
#line 3726 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].target)); }
#line 30133 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1340: /* target_list_opt_comma: target_list  */
#line 3730 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 30139 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1341: /* target_list_opt_comma: target_list ','  */
#line 3731 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 30145 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1342: /* target_el: a_expr AS ColLabelOrString  */
#line 3735 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = (yyvsp[0].str);
					(yyval.target)->indirection = NIL;
					(yyval.target)->val = (PGNode *)(yyvsp[-2].node);
					(yyval.target)->location = (yylsp[-2]);
				}
#line 30157 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1343: /* target_el: a_expr IDENT  */
#line 3751 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = (yyvsp[0].str);
					(yyval.target)->indirection = NIL;
					(yyval.target)->val = (PGNode *)(yyvsp[-1].node);
					(yyval.target)->location = (yylsp[-1]);
				}
#line 30169 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1344: /* target_el: a_expr  */
#line 3759 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = NULL;
					(yyval.target)->indirection = NIL;
					(yyval.target)->val = (PGNode *)(yyvsp[0].node);
					(yyval.target)->location = (yylsp[0]);
				}
#line 30181 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1345: /* except_list: EXCLUDE '(' name_list_opt_comma ')'  */
#line 3768 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 30187 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1346: /* except_list: EXCLUDE ColId  */
#line 3769 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 30193 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1347: /* opt_except_list: except_list  */
#line 3772 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 30199 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1348: /* opt_except_list: %empty  */
#line 3773 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NULL; }
#line 30205 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1349: /* replace_list_el: a_expr AS ColId  */
#line 3776 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = list_make2((yyvsp[-2].node), makeString((yyvsp[0].str))); }
#line 30211 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1350: /* replace_list: replace_list_el  */
#line 3780 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].list)); }
#line 30217 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1351: /* replace_list: replace_list ',' replace_list_el  */
#line 3781 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].list)); }
#line 30223 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1352: /* replace_list_opt_comma: replace_list  */
#line 3785 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 30229 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1353: /* replace_list_opt_comma: replace_list ','  */
#line 3786 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 30235 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1354: /* opt_replace_list: REPLACE '(' replace_list_opt_comma ')'  */
#line 3789 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 30241 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1355: /* opt_replace_list: REPLACE replace_list_el  */
#line 3790 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = list_make1((yyvsp[0].list)); }
#line 30247 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1356: /* opt_replace_list: %empty  */
#line 3791 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NULL; }
#line 30253 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1357: /* qualified_name_list: qualified_name  */
#line 3801 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].range)); }
#line 30259 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1358: /* qualified_name_list: qualified_name_list ',' qualified_name  */
#line 3802 "third_party/libpg_query/grammar/statements/select.y"
                                                                 { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].range)); }
#line 30265 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1359: /* name_list: name  */
#line 3807 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 30271 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1360: /* name_list: name_list ',' name  */
#line 3809 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = lappend((yyvsp[-2].list), makeString((yyvsp[0].str))); }
#line 30277 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1361: /* name_list_opt_comma: name_list  */
#line 3814 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 30283 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1362: /* name_list_opt_comma: name_list ','  */
#line 3815 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 30289 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1363: /* name_list_opt_comma_opt_bracket: name_list_opt_comma  */
#line 3819 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 30295 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1364: /* name_list_opt_comma_opt_bracket: '(' name_list_opt_comma ')'  */
#line 3820 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 30301 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1365: /* name: ColIdOrString  */
#line 3823 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 30307 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1366: /* func_name: function_name_token  */
#line 3835 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 30313 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1367: /* func_name: ColId indirection  */
#line 3838 "third_party/libpg_query/grammar/statements/select.y"
                                        {
						(yyval.list) = check_func_name(lcons(makeString((yyvsp[-1].str)), (yyvsp[0].list)),
											 yyscanner);
					}
#line 30322 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1368: /* AexprConst: Iconst  */
#line 3849 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeIntConst((yyvsp[0].ival), (yylsp[0]));
				}
#line 30330 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1369: /* AexprConst: FCONST  */
#line 3853 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeFloatConst((yyvsp[0].str), (yylsp[0]));
				}
#line 30338 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1370: /* AexprConst: Sconst opt_indirection  */
#line 3857 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].list))
					{
						PGAIndirection *n = makeNode(PGAIndirection);
						n->arg = makeStringConst((yyvsp[-1].str), (yylsp[-1]));
						n->indirection = check_indirection((yyvsp[0].list), yyscanner);
						(yyval.node) = (PGNode *) n;
					}
					else
						(yyval.node) = makeStringConst((yyvsp[-1].str), (yylsp[-1]));
				}
#line 30354 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1371: /* AexprConst: BCONST  */
#line 3869 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeBitStringConst((yyvsp[0].str), (yylsp[0]));
				}
#line 30362 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1372: /* AexprConst: XCONST  */
#line 3873 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* This is a bit constant per SQL99:
					 * Without Feature F511, "BIT data type",
					 * a <general literal> shall not be a
					 * <bit string literal> or a <hex string literal>.
					 */
					(yyval.node) = makeBitStringConst((yyvsp[0].str), (yylsp[0]));
				}
#line 30375 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1373: /* AexprConst: func_name Sconst  */
#line 3882 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* generic type 'literal' syntax */
					PGTypeName *t = makeTypeNameFromNameList((yyvsp[-1].list));
					t->location = (yylsp[-1]);
					(yyval.node) = makeStringConstCast((yyvsp[0].str), (yylsp[0]), t);
				}
#line 30386 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1374: /* AexprConst: func_name '(' func_arg_list opt_sort_clause opt_ignore_nulls ')' Sconst  */
#line 3889 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* generic syntax with a type modifier */
					PGTypeName *t = makeTypeNameFromNameList((yyvsp[-6].list));
					PGListCell *lc;

					/*
					 * We must use func_arg_list and opt_sort_clause in the
					 * production to avoid reduce/reduce conflicts, but we
					 * don't actually wish to allow PGNamedArgExpr in this
					 * context, ORDER BY, nor IGNORE NULLS.
					 */
					foreach(lc, (yyvsp[-4].list))
					{
						PGNamedArgExpr *arg = (PGNamedArgExpr *) lfirst(lc);

						if (IsA(arg, PGNamedArgExpr))
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("type modifier cannot have parameter name"),
									 parser_errposition(arg->location)));
					}
					if ((yyvsp[-3].list) != NIL)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("type modifier cannot have ORDER BY"),
									 parser_errposition((yylsp[-3]))));
					if ((yyvsp[-2].boolean) != false)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("type modifier cannot have IGNORE NULLS"),
									 parser_errposition((yylsp[-2]))));


					t->typmods = (yyvsp[-4].list);
					t->location = (yylsp[-6]);
					(yyval.node) = makeStringConstCast((yyvsp[0].str), (yylsp[0]), t);
				}
#line 30428 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1375: /* AexprConst: ConstTypename Sconst  */
#line 3927 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeStringConstCast((yyvsp[0].str), (yylsp[0]), (yyvsp[-1].typnam));
				}
#line 30436 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1376: /* AexprConst: ConstInterval '(' a_expr ')' opt_interval  */
#line 3931 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeIntervalNode((yyvsp[-2].node), (yylsp[-2]), (yyvsp[0].list));
				}
#line 30444 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1377: /* AexprConst: ConstInterval Iconst opt_interval  */
#line 3935 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeIntervalNode((yyvsp[-1].ival), (yylsp[-1]), (yyvsp[0].list));
				}
#line 30452 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1378: /* AexprConst: ConstInterval Sconst opt_interval  */
#line 3939 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeIntervalNode((yyvsp[-1].str), (yylsp[-1]), (yyvsp[0].list));
				}
#line 30460 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1379: /* AexprConst: TRUE_P  */
#line 3943 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeBoolAConst(true, (yylsp[0]));
				}
#line 30468 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1380: /* AexprConst: FALSE_P  */
#line 3947 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeBoolAConst(false, (yylsp[0]));
				}
#line 30476 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1381: /* AexprConst: NULL_P  */
#line 3951 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeNullAConst((yylsp[0]));
				}
#line 30484 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1382: /* Iconst: ICONST  */
#line 3956 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.ival) = (yyvsp[0].ival); }
#line 30490 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1383: /* type_function_name: IDENT  */
#line 3973 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 30496 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1384: /* type_function_name: unreserved_keyword  */
#line 3974 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 30502 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1385: /* type_function_name: type_func_name_keyword  */
#line 3975 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 30508 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1386: /* function_name_token: IDENT  */
#line 3978 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 30514 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1387: /* function_name_token: unreserved_keyword  */
#line 3979 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 30520 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1388: /* function_name_token: func_name_keyword  */
#line 3980 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 30526 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1389: /* type_name_token: IDENT  */
#line 3983 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 30532 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1390: /* type_name_token: unreserved_keyword  */
#line 3984 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 30538 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1391: /* type_name_token: type_name_keyword  */
#line 3985 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 30544 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1392: /* any_name: ColId  */
#line 3988 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 30550 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1393: /* any_name: ColId attrs  */
#line 3989 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = lcons(makeString((yyvsp[-1].str)), (yyvsp[0].list)); }
#line 30556 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1394: /* attrs: '.' attr_name  */
#line 3993 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 30562 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1395: /* attrs: attrs '.' attr_name  */
#line 3995 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = lappend((yyvsp[-2].list), makeString((yyvsp[0].str))); }
#line 30568 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1396: /* opt_name_list: '(' name_list_opt_comma ')'  */
#line 3999 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 30574 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1397: /* opt_name_list: %empty  */
#line 4000 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 30580 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1399: /* ColLabelOrString: ColLabel  */
#line 4007 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 30586 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1400: /* ColLabelOrString: SCONST  */
#line 4008 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 30592 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1401: /* PrepareStmt: PREPARE name prep_type_clause AS PreparableStmt  */
#line 8 "third_party/libpg_query/grammar/statements/prepare.y"
                                {
					PGPrepareStmt *n = makeNode(PGPrepareStmt);
					n->name = (yyvsp[-3].str);
					n->argtypes = (yyvsp[-2].list);
					n->query = (yyvsp[0].node);
					(yyval.node) = (PGNode *) n;
				}
#line 30604 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1402: /* prep_type_clause: '(' type_list ')'  */
#line 18 "third_party/libpg_query/grammar/statements/prepare.y"
                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 30610 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1403: /* prep_type_clause: %empty  */
#line 19 "third_party/libpg_query/grammar/statements/prepare.y"
                                                                        { (yyval.list) = NIL; }
#line 30616 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1409: /* CreateSchemaStmt: CREATE_P SCHEMA qualified_name OptSchemaEltList  */
#line 8 "third_party/libpg_query/grammar/statements/create_schema.y"
                                {
					PGCreateSchemaStmt *n = makeNode(PGCreateSchemaStmt);
					if ((yyvsp[-1].range)->catalogname) {
						ereport(ERROR,
								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
								 errmsg("CREATE SCHEMA too many dots: expected \"catalog.schema\" or \"schema\""),
								 parser_errposition((yylsp[-1]))));
					}
					if ((yyvsp[-1].range)->schemaname) {
						n->catalogname = (yyvsp[-1].range)->schemaname;
						n->schemaname = (yyvsp[-1].range)->relname;
					} else {
						n->schemaname = (yyvsp[-1].range)->relname;
					}
					n->schemaElts = (yyvsp[0].list);
					n->onconflict = PG_ERROR_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 30639 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1410: /* CreateSchemaStmt: CREATE_P SCHEMA IF_P NOT EXISTS qualified_name OptSchemaEltList  */
#line 27 "third_party/libpg_query/grammar/statements/create_schema.y"
                                {
					PGCreateSchemaStmt *n = makeNode(PGCreateSchemaStmt);
					if ((yyvsp[-1].range)->catalogname) {
						ereport(ERROR,
								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
								 errmsg("CREATE SCHEMA too many dots: expected \"catalog.schema\" or \"schema\""),
								 parser_errposition((yylsp[-1]))));
					}
					if ((yyvsp[-1].range)->schemaname) {
						n->catalogname = (yyvsp[-1].range)->schemaname;
						n->schemaname = (yyvsp[-1].range)->relname;
					} else {
						n->schemaname = (yyvsp[-1].range)->relname;
					}
					if ((yyvsp[0].list) != NIL)
						ereport(ERROR,
								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
								 errmsg("CREATE SCHEMA IF NOT EXISTS cannot include schema elements"),
								 parser_errposition((yylsp[0]))));
					n->schemaElts = (yyvsp[0].list);
					n->onconflict = PG_IGNORE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 30667 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1411: /* CreateSchemaStmt: CREATE_P OR REPLACE SCHEMA qualified_name OptSchemaEltList  */
#line 51 "third_party/libpg_query/grammar/statements/create_schema.y"
                                {
					PGCreateSchemaStmt *n = makeNode(PGCreateSchemaStmt);
					if ((yyvsp[-1].range)->catalogname) {
						ereport(ERROR,
								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
								 errmsg("CREATE SCHEMA too many dots: expected \"catalog.schema\" or \"schema\""),
								 parser_errposition((yylsp[-1]))));
					}
					if ((yyvsp[-1].range)->schemaname) {
						n->catalogname = (yyvsp[-1].range)->schemaname;
						n->schemaname = (yyvsp[-1].range)->relname;
					} else {
						n->schemaname = (yyvsp[-1].range)->relname;
					}
					n->schemaElts = (yyvsp[0].list);
					n->onconflict = PG_REPLACE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 30690 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1412: /* OptSchemaEltList: OptSchemaEltList schema_stmt  */
#line 74 "third_party/libpg_query/grammar/statements/create_schema.y"
                                {
					if ((yyloc) < 0)			/* see comments for YYLLOC_DEFAULT */
						(yyloc) = (yylsp[0]);
					(yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node));
				}
#line 30700 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1413: /* OptSchemaEltList: %empty  */
#line 80 "third_party/libpg_query/grammar/statements/create_schema.y"
                                { (yyval.list) = NIL; }
#line 30706 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1418: /* IndexStmt: CREATE_P opt_unique INDEX opt_concurrently opt_index_name ON qualified_name access_method_clause '(' index_params ')' opt_reloptions where_clause  */
#line 11 "third_party/libpg_query/grammar/statements/index.y"
                                {
					PGIndexStmt *n = makeNode(PGIndexStmt);
					n->unique = (yyvsp[-11].boolean);
					n->concurrent = (yyvsp[-9].boolean);
					n->idxname = (yyvsp[-8].str);
					n->relation = (yyvsp[-6].range);
					n->accessMethod = (yyvsp[-5].str);
					n->indexParams = (yyvsp[-3].list);
					n->options = (yyvsp[-1].list);
					n->whereClause = (yyvsp[0].node);
					n->excludeOpNames = NIL;
					n->idxcomment = NULL;
					n->indexOid = InvalidOid;
					n->oldNode = InvalidOid;
					n->primary = false;
					n->isconstraint = false;
					n->deferrable = false;
					n->initdeferred = false;
					n->transformed = false;
					n->onconflict = PG_ERROR_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 30733 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1419: /* IndexStmt: CREATE_P opt_unique INDEX opt_concurrently IF_P NOT EXISTS index_name ON qualified_name access_method_clause '(' index_params ')' opt_reloptions where_clause  */
#line 36 "third_party/libpg_query/grammar/statements/index.y"
                                {
					PGIndexStmt *n = makeNode(PGIndexStmt);
					n->unique = (yyvsp[-14].boolean);
					n->concurrent = (yyvsp[-12].boolean);
					n->idxname = (yyvsp[-8].str);
					n->relation = (yyvsp[-6].range);
					n->accessMethod = (yyvsp[-5].str);
					n->indexParams = (yyvsp[-3].list);
					n->options = (yyvsp[-1].list);
					n->whereClause = (yyvsp[0].node);
					n->excludeOpNames = NIL;
					n->idxcomment = NULL;
					n->indexOid = InvalidOid;
					n->oldNode = InvalidOid;
					n->primary = false;
					n->isconstraint = false;
					n->deferrable = false;
					n->initdeferred = false;
					n->transformed = false;
					n->onconflict = PG_IGNORE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 30760 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1420: /* access_method: ColId  */
#line 62 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 30766 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1421: /* access_method_clause: USING access_method  */
#line 66 "third_party/libpg_query/grammar/statements/index.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 30772 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1422: /* access_method_clause: %empty  */
#line 67 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.str) = (char*) DEFAULT_INDEX_TYPE; }
#line 30778 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1423: /* opt_concurrently: CONCURRENTLY  */
#line 72 "third_party/libpg_query/grammar/statements/index.y"
                                                                                        { (yyval.boolean) = true; }
#line 30784 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1424: /* opt_concurrently: %empty  */
#line 73 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.boolean) = false; }
#line 30790 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1425: /* opt_index_name: index_name  */
#line 78 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 30796 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1426: /* opt_index_name: %empty  */
#line 79 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.str) = NULL; }
#line 30802 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1427: /* opt_reloptions: WITH reloptions  */
#line 83 "third_party/libpg_query/grammar/statements/index.y"
                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 30808 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1428: /* opt_reloptions: %empty  */
#line 84 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.list) = NIL; }
#line 30814 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1429: /* opt_unique: UNIQUE  */
#line 89 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.boolean) = true; }
#line 30820 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1430: /* opt_unique: %empty  */
#line 90 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.boolean) = false; }
#line 30826 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1431: /* AlterObjectSchemaStmt: ALTER TABLE relation_expr SET SCHEMA name  */
#line 8 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 30839 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1432: /* AlterObjectSchemaStmt: ALTER TABLE IF_P EXISTS relation_expr SET SCHEMA name  */
#line 17 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 30852 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1433: /* AlterObjectSchemaStmt: ALTER SEQUENCE qualified_name SET SCHEMA name  */
#line 26 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_SEQUENCE;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 30865 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1434: /* AlterObjectSchemaStmt: ALTER SEQUENCE IF_P EXISTS qualified_name SET SCHEMA name  */
#line 35 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_SEQUENCE;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 30878 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1435: /* AlterObjectSchemaStmt: ALTER VIEW qualified_name SET SCHEMA name  */
#line 44 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_VIEW;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 30891 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1436: /* AlterObjectSchemaStmt: ALTER VIEW IF_P EXISTS qualified_name SET SCHEMA name  */
#line 53 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_VIEW;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 30904 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1437: /* CheckPointStmt: FORCE CHECKPOINT opt_col_id  */
#line 6 "third_party/libpg_query/grammar/statements/checkpoint.y"
                                {
					PGCheckPointStmt *n = makeNode(PGCheckPointStmt);
					n->force = true;
					n->name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 30915 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1438: /* CheckPointStmt: CHECKPOINT opt_col_id  */
#line 13 "third_party/libpg_query/grammar/statements/checkpoint.y"
                                {
					PGCheckPointStmt *n = makeNode(PGCheckPointStmt);
					n->force = false;
					n->name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 30926 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1439: /* opt_col_id: ColId  */
#line 22 "third_party/libpg_query/grammar/statements/checkpoint.y"
                                                        { (yyval.str) = (yyvsp[0].str); }
#line 30932 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1440: /* opt_col_id: %empty  */
#line 23 "third_party/libpg_query/grammar/statements/checkpoint.y"
                                                { (yyval.str) = NULL; }
#line 30938 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1441: /* ExportStmt: EXPORT_P DATABASE Sconst copy_options  */
#line 8 "third_party/libpg_query/grammar/statements/export.y"
                                {
					PGExportStmt *n = makeNode(PGExportStmt);
					n->database = NULL;
					n->filename = (yyvsp[-1].str);
					n->options = NIL;
					if ((yyvsp[0].list)) {
						n->options = list_concat(n->options, (yyvsp[0].list));
					}
					(yyval.node) = (PGNode *)n;
				}
#line 30953 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1442: /* ExportStmt: EXPORT_P DATABASE ColId TO Sconst copy_options  */
#line 20 "third_party/libpg_query/grammar/statements/export.y"
                                {
					PGExportStmt *n = makeNode(PGExportStmt);
					n->database = (yyvsp[-3].str);
					n->filename = (yyvsp[-1].str);
					n->options = NIL;
					if ((yyvsp[0].list)) {
						n->options = list_concat(n->options, (yyvsp[0].list));
					}
					(yyval.node) = (PGNode *)n;
				}
#line 30968 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1443: /* ImportStmt: IMPORT_P DATABASE Sconst  */
#line 34 "third_party/libpg_query/grammar/statements/export.y"
                                {
					PGImportStmt *n = makeNode(PGImportStmt);
					n->filename = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 30978 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1444: /* ExplainStmt: EXPLAIN ExplainableStmt  */
#line 10 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					PGExplainStmt *n = makeNode(PGExplainStmt);
					n->query = (yyvsp[0].node);
					n->options = NIL;
					(yyval.node) = (PGNode *) n;
				}
#line 30989 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1445: /* ExplainStmt: EXPLAIN analyze_keyword opt_verbose ExplainableStmt  */
#line 17 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					PGExplainStmt *n = makeNode(PGExplainStmt);
					n->query = (yyvsp[0].node);
					n->options = list_make1(makeDefElem("analyze", NULL, (yylsp[-2])));
					if ((yyvsp[-1].boolean))
						n->options = lappend(n->options,
											 makeDefElem("verbose", NULL, (yylsp[-1])));
					(yyval.node) = (PGNode *) n;
				}
#line 31003 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1446: /* ExplainStmt: EXPLAIN VERBOSE ExplainableStmt  */
#line 27 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					PGExplainStmt *n = makeNode(PGExplainStmt);
					n->query = (yyvsp[0].node);
					n->options = list_make1(makeDefElem("verbose", NULL, (yylsp[-1])));
					(yyval.node) = (PGNode *) n;
				}
#line 31014 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1447: /* ExplainStmt: EXPLAIN '(' explain_option_list ')' ExplainableStmt  */
#line 34 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					PGExplainStmt *n = makeNode(PGExplainStmt);
					n->query = (yyvsp[0].node);
					n->options = (yyvsp[-2].list);
					(yyval.node) = (PGNode *) n;
				}
#line 31025 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1448: /* opt_verbose: VERBOSE  */
#line 44 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.boolean) = true; }
#line 31031 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1449: /* opt_verbose: %empty  */
#line 45 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.boolean) = false; }
#line 31037 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1450: /* explain_option_arg: opt_boolean_or_string  */
#line 50 "third_party/libpg_query/grammar/statements/explain.y"
                                                { (yyval.node) = (PGNode *) makeString((yyvsp[0].str)); }
#line 31043 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1451: /* explain_option_arg: NumericOnly  */
#line 51 "third_party/libpg_query/grammar/statements/explain.y"
                                                        { (yyval.node) = (PGNode *) (yyvsp[0].value); }
#line 31049 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1452: /* explain_option_arg: %empty  */
#line 52 "third_party/libpg_query/grammar/statements/explain.y"
                                                        { (yyval.node) = NULL; }
#line 31055 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1483: /* NonReservedWord: IDENT  */
#line 90 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 31061 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1484: /* NonReservedWord: unreserved_keyword  */
#line 91 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 31067 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1485: /* NonReservedWord: other_keyword  */
#line 92 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 31073 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1486: /* NonReservedWord_or_Sconst: NonReservedWord  */
#line 97 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 31079 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1487: /* NonReservedWord_or_Sconst: Sconst  */
#line 98 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 31085 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1488: /* explain_option_list: explain_option_elem  */
#line 104 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].defelt));
				}
#line 31093 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1489: /* explain_option_list: explain_option_list ',' explain_option_elem  */
#line 108 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt));
				}
#line 31101 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1490: /* analyze_keyword: ANALYZE  */
#line 115 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                {}
#line 31107 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1491: /* analyze_keyword: ANALYSE  */
#line 116 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                {}
#line 31113 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1492: /* opt_boolean_or_string: TRUE_P  */
#line 121 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.str) = (char*) "true"; }
#line 31119 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1493: /* opt_boolean_or_string: FALSE_P  */
#line 122 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.str) = (char*) "false"; }
#line 31125 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1494: /* opt_boolean_or_string: ON  */
#line 123 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.str) = (char*) "on"; }
#line 31131 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1495: /* opt_boolean_or_string: NonReservedWord_or_Sconst  */
#line 129 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 31137 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1496: /* explain_option_elem: explain_option_name explain_option_arg  */
#line 135 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[-1].str), (yyvsp[0].node), (yylsp[-1]));
				}
#line 31145 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1497: /* explain_option_name: NonReservedWord  */
#line 142 "third_party/libpg_query/grammar/statements/explain.y"
                                                        { (yyval.str) = (yyvsp[0].str); }
#line 31151 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1498: /* explain_option_name: analyze_keyword  */
#line 143 "third_party/libpg_query/grammar/statements/explain.y"
                                                        { (yyval.str) = (char*) "analyze"; }
#line 31157 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1499: /* VariableSetStmt: SET set_rest  */
#line 11 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = (yyvsp[0].vsetstmt);
					n->scope = VAR_SET_SCOPE_DEFAULT;
					(yyval.node) = (PGNode *) n;
				}
#line 31167 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1500: /* VariableSetStmt: SET LOCAL set_rest  */
#line 17 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = (yyvsp[0].vsetstmt);
					n->scope = VAR_SET_SCOPE_LOCAL;
					(yyval.node) = (PGNode *) n;
				}
#line 31177 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1501: /* VariableSetStmt: SET SESSION set_rest  */
#line 23 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = (yyvsp[0].vsetstmt);
					n->scope = VAR_SET_SCOPE_SESSION;
					(yyval.node) = (PGNode *) n;
				}
#line 31187 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1502: /* VariableSetStmt: SET GLOBAL set_rest  */
#line 29 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = (yyvsp[0].vsetstmt);
					n->scope = VAR_SET_SCOPE_GLOBAL;
					(yyval.node) = (PGNode *) n;
				}
#line 31197 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1503: /* set_rest: generic_set  */
#line 38 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                {(yyval.vsetstmt) = (yyvsp[0].vsetstmt);}
#line 31203 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1504: /* set_rest: var_name FROM CURRENT_P  */
#line 40 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_CURRENT;
					n->name = (yyvsp[-2].str);
					(yyval.vsetstmt) = n;
				}
#line 31214 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1505: /* set_rest: TIME ZONE zone_value  */
#line 48 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_VALUE;
					n->name = (char*) "timezone";
					if ((yyvsp[0].node) != NULL)
						n->args = list_make1((yyvsp[0].node));
					else
						n->kind = VAR_SET_DEFAULT;
					(yyval.vsetstmt) = n;
				}
#line 31229 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1506: /* set_rest: SCHEMA Sconst  */
#line 59 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_VALUE;
					n->name = (char*) "search_path";
					n->args = list_make1(makeStringConst((yyvsp[0].str), (yylsp[0])));
					(yyval.vsetstmt) = n;
				}
#line 31241 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1507: /* generic_set: var_name TO var_list  */
#line 71 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_VALUE;
					n->name = (yyvsp[-2].str);
					n->args = (yyvsp[0].list);
					(yyval.vsetstmt) = n;
				}
#line 31253 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1508: /* generic_set: var_name '=' var_list  */
#line 79 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_VALUE;
					n->name = (yyvsp[-2].str);
					n->args = (yyvsp[0].list);
					(yyval.vsetstmt) = n;
				}
#line 31265 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1509: /* generic_set: var_name TO DEFAULT  */
#line 87 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_DEFAULT;
					n->name = (yyvsp[-2].str);
					(yyval.vsetstmt) = n;
				}
#line 31276 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1510: /* generic_set: var_name '=' DEFAULT  */
#line 94 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_DEFAULT;
					n->name = (yyvsp[-2].str);
					(yyval.vsetstmt) = n;
				}
#line 31287 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1511: /* var_value: opt_boolean_or_string  */
#line 104 "third_party/libpg_query/grammar/statements/variable_set.y"
                                { (yyval.node) = makeStringConst((yyvsp[0].str), (yylsp[0])); }
#line 31293 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1512: /* var_value: NumericOnly  */
#line 106 "third_party/libpg_query/grammar/statements/variable_set.y"
                                { (yyval.node) = makeAConst((yyvsp[0].value), (yylsp[0])); }
#line 31299 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1513: /* zone_value: Sconst  */
#line 112 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					(yyval.node) = makeStringConst((yyvsp[0].str), (yylsp[0]));
				}
#line 31307 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1514: /* zone_value: IDENT  */
#line 116 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					(yyval.node) = makeStringConst((yyvsp[0].str), (yylsp[0]));
				}
#line 31315 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1515: /* zone_value: ConstInterval Sconst opt_interval  */
#line 120 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGTypeName *t = (yyvsp[-2].typnam);
					if ((yyvsp[0].list) != NIL)
					{
						PGAConst *n = (PGAConst *) linitial((yyvsp[0].list));
						if ((n->val.val.ival & ~(INTERVAL_MASK(HOUR) | INTERVAL_MASK(MINUTE))) != 0)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("time zone interval must be HOUR or HOUR TO MINUTE"),
									 parser_errposition((yylsp[0]))));
					}
					t->typmods = (yyvsp[0].list);
					(yyval.node) = makeStringConstCast((yyvsp[-1].str), (yylsp[-1]), t);
				}
#line 31334 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1516: /* zone_value: ConstInterval '(' Iconst ')' Sconst  */
#line 135 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGTypeName *t = (yyvsp[-4].typnam);
					t->typmods = list_make2(makeIntConst(INTERVAL_FULL_RANGE, -1),
											makeIntConst((yyvsp[-2].ival), (yylsp[-2])));
					(yyval.node) = makeStringConstCast((yyvsp[0].str), (yylsp[0]), t);
				}
#line 31345 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1517: /* zone_value: NumericOnly  */
#line 141 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                        { (yyval.node) = makeAConst((yyvsp[0].value), (yylsp[0])); }
#line 31351 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1518: /* zone_value: DEFAULT  */
#line 142 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                                { (yyval.node) = NULL; }
#line 31357 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1519: /* zone_value: LOCAL  */
#line 143 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                                { (yyval.node) = NULL; }
#line 31363 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1520: /* var_list: var_value  */
#line 147 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 31369 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1521: /* var_list: var_list ',' var_value  */
#line 148 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 31375 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1522: /* LoadStmt: LOAD file_name  */
#line 8 "third_party/libpg_query/grammar/statements/load.y"
                                {
					PGLoadStmt *n = makeNode(PGLoadStmt);
					n->filename = (yyvsp[0].str);
					n->load_type = PG_LOAD_TYPE_LOAD;
					(yyval.node) = (PGNode *)n;
				}
#line 31386 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1523: /* LoadStmt: INSTALL file_name  */
#line 14 "third_party/libpg_query/grammar/statements/load.y"
                                                  {
                    PGLoadStmt *n = makeNode(PGLoadStmt);
                    n->filename = (yyvsp[0].str);
                    n->load_type = PG_LOAD_TYPE_INSTALL;
                    (yyval.node) = (PGNode *)n;
				}
#line 31397 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1524: /* LoadStmt: FORCE INSTALL file_name  */
#line 20 "third_party/libpg_query/grammar/statements/load.y"
                                                        {
                      PGLoadStmt *n = makeNode(PGLoadStmt);
                      n->filename = (yyvsp[0].str);
                      n->load_type = PG_LOAD_TYPE_FORCE_INSTALL;
                      (yyval.node) = (PGNode *)n;
                }
#line 31408 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1525: /* file_name: Sconst  */
#line 28 "third_party/libpg_query/grammar/statements/load.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 31414 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1526: /* file_name: ColId  */
#line 29 "third_party/libpg_query/grammar/statements/load.y"
                                                { (yyval.str) = (yyvsp[0].str); }
#line 31420 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1527: /* VacuumStmt: VACUUM opt_full opt_freeze opt_verbose  */
#line 9 "third_party/libpg_query/grammar/statements/vacuum.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_VACUUM;
					if ((yyvsp[-2].boolean))
						n->options |= PG_VACOPT_FULL;
					if ((yyvsp[-1].boolean))
						n->options |= PG_VACOPT_FREEZE;
					if ((yyvsp[0].boolean))
						n->options |= PG_VACOPT_VERBOSE;
					n->relation = NULL;
					n->va_cols = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 31438 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1528: /* VacuumStmt: VACUUM opt_full opt_freeze opt_verbose qualified_name opt_name_list  */
#line 23 "third_party/libpg_query/grammar/statements/vacuum.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_VACUUM;
					if ((yyvsp[-4].boolean))
						n->options |= PG_VACOPT_FULL;
					if ((yyvsp[-3].boolean))
						n->options |= PG_VACOPT_FREEZE;
					if ((yyvsp[-2].boolean))
						n->options |= PG_VACOPT_VERBOSE;
					n->relation = (yyvsp[-1].range);
					n->va_cols = (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 31456 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1529: /* VacuumStmt: VACUUM opt_full opt_freeze opt_verbose AnalyzeStmt  */
#line 37 "third_party/libpg_query/grammar/statements/vacuum.y"
                                {
					PGVacuumStmt *n = (PGVacuumStmt *) (yyvsp[0].node);
					n->options |= PG_VACOPT_VACUUM;
					if ((yyvsp[-3].boolean))
						n->options |= PG_VACOPT_FULL;
					if ((yyvsp[-2].boolean))
						n->options |= PG_VACOPT_FREEZE;
					if ((yyvsp[-1].boolean))
						n->options |= PG_VACOPT_VERBOSE;
					(yyval.node) = (PGNode *)n;
				}
#line 31472 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1530: /* VacuumStmt: VACUUM '(' vacuum_option_list ')'  */
#line 49 "third_party/libpg_query/grammar/statements/vacuum.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_VACUUM | (yyvsp[-1].ival);
					n->relation = NULL;
					n->va_cols = NIL;
					(yyval.node) = (PGNode *) n;
				}
#line 31484 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1531: /* VacuumStmt: VACUUM '(' vacuum_option_list ')' qualified_name opt_name_list  */
#line 57 "third_party/libpg_query/grammar/statements/vacuum.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_VACUUM | (yyvsp[-3].ival);
					n->relation = (yyvsp[-1].range);
					n->va_cols = (yyvsp[0].list);
					if (n->va_cols != NIL)	/* implies analyze */
						n->options |= PG_VACOPT_ANALYZE;
					(yyval.node) = (PGNode *) n;
				}
#line 31498 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1532: /* vacuum_option_elem: analyze_keyword  */
#line 70 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                { (yyval.ival) = PG_VACOPT_ANALYZE; }
#line 31504 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1533: /* vacuum_option_elem: VERBOSE  */
#line 71 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                        { (yyval.ival) = PG_VACOPT_VERBOSE; }
#line 31510 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1534: /* vacuum_option_elem: FREEZE  */
#line 72 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                        { (yyval.ival) = PG_VACOPT_FREEZE; }
#line 31516 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1535: /* vacuum_option_elem: FULL  */
#line 73 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                        { (yyval.ival) = PG_VACOPT_FULL; }
#line 31522 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1536: /* vacuum_option_elem: IDENT  */
#line 75 "third_party/libpg_query/grammar/statements/vacuum.y"
                                {
					if (strcmp((yyvsp[0].str), "disable_page_skipping") == 0)
						(yyval.ival) = PG_VACOPT_DISABLE_PAGE_SKIPPING;
					else
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
							 errmsg("unrecognized VACUUM option \"%s\"", (yyvsp[0].str)),
									 parser_errposition((yylsp[0]))));
				}
#line 31536 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1537: /* opt_full: FULL  */
#line 87 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                                                        { (yyval.boolean) = true; }
#line 31542 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1538: /* opt_full: %empty  */
#line 88 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                                                                { (yyval.boolean) = false; }
#line 31548 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1539: /* vacuum_option_list: vacuum_option_elem  */
#line 93 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                                                                        { (yyval.ival) = (yyvsp[0].ival); }
#line 31554 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1540: /* vacuum_option_list: vacuum_option_list ',' vacuum_option_elem  */
#line 94 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                                                { (yyval.ival) = (yyvsp[-2].ival) | (yyvsp[0].ival); }
#line 31560 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1541: /* opt_freeze: FREEZE  */
#line 98 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                                                        { (yyval.boolean) = true; }
#line 31566 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1542: /* opt_freeze: %empty  */
#line 99 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                                                                { (yyval.boolean) = false; }
#line 31572 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1543: /* DeleteStmt: opt_with_clause DELETE_P FROM relation_expr_opt_alias using_clause where_or_current_clause returning_clause  */
#line 9 "third_party/libpg_query/grammar/statements/delete.y"
                                {
					PGDeleteStmt *n = makeNode(PGDeleteStmt);
					n->relation = (yyvsp[-3].range);
					n->usingClause = (yyvsp[-2].list);
					n->whereClause = (yyvsp[-1].node);
					n->returningList = (yyvsp[0].list);
					n->withClause = (yyvsp[-6].with);
					(yyval.node) = (PGNode *)n;
				}
#line 31586 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1544: /* DeleteStmt: TRUNCATE opt_table relation_expr_opt_alias  */
#line 19 "third_party/libpg_query/grammar/statements/delete.y"
                            {
					PGDeleteStmt *n = makeNode(PGDeleteStmt);
					n->relation = (yyvsp[0].range);
					n->usingClause = NULL;
					n->whereClause = NULL;
					n->returningList = NULL;
					n->withClause = NULL;
					(yyval.node) = (PGNode *)n;
			    }
#line 31600 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1545: /* relation_expr_opt_alias: relation_expr  */
#line 32 "third_party/libpg_query/grammar/statements/delete.y"
                                {
					(yyval.range) = (yyvsp[0].range);
				}
#line 31608 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1546: /* relation_expr_opt_alias: relation_expr ColId  */
#line 36 "third_party/libpg_query/grammar/statements/delete.y"
                                {
					PGAlias *alias = makeNode(PGAlias);
					alias->aliasname = (yyvsp[0].str);
					(yyvsp[-1].range)->alias = alias;
					(yyval.range) = (yyvsp[-1].range);
				}
#line 31619 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1547: /* relation_expr_opt_alias: relation_expr AS ColId  */
#line 43 "third_party/libpg_query/grammar/statements/delete.y"
                                {
					PGAlias *alias = makeNode(PGAlias);
					alias->aliasname = (yyvsp[0].str);
					(yyvsp[-2].range)->alias = alias;
					(yyval.range) = (yyvsp[-2].range);
				}
#line 31630 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1548: /* where_or_current_clause: WHERE a_expr  */
#line 53 "third_party/libpg_query/grammar/statements/delete.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 31636 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1549: /* where_or_current_clause: %empty  */
#line 54 "third_party/libpg_query/grammar/statements/delete.y"
                                                                                                { (yyval.node) = NULL; }
#line 31642 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1550: /* using_clause: USING from_list_opt_comma  */
#line 60 "third_party/libpg_query/grammar/statements/delete.y"
                                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 31648 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1551: /* using_clause: %empty  */
#line 61 "third_party/libpg_query/grammar/statements/delete.y"
                                                                                                { (yyval.list) = NIL; }
#line 31654 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1552: /* AnalyzeStmt: analyze_keyword opt_verbose  */
#line 10 "third_party/libpg_query/grammar/statements/analyze.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_ANALYZE;
					if ((yyvsp[0].boolean))
						n->options |= PG_VACOPT_VERBOSE;
					n->relation = NULL;
					n->va_cols = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 31668 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1553: /* AnalyzeStmt: analyze_keyword opt_verbose qualified_name opt_name_list  */
#line 20 "third_party/libpg_query/grammar/statements/analyze.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_ANALYZE;
					if ((yyvsp[-2].boolean))
						n->options |= PG_VACOPT_VERBOSE;
					n->relation = (yyvsp[-1].range);
					n->va_cols = (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 31682 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1554: /* AttachStmt: ATTACH opt_database Sconst opt_database_alias copy_options  */
#line 8 "third_party/libpg_query/grammar/statements/attach.y"
                                {
					PGAttachStmt *n = makeNode(PGAttachStmt);
					n->path = (yyvsp[-2].str);
					n->name = (yyvsp[-1].str);
					n->options = (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 31694 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1555: /* DetachStmt: DETACH opt_database IDENT  */
#line 19 "third_party/libpg_query/grammar/statements/attach.y"
                                {
					PGDetachStmt *n = makeNode(PGDetachStmt);
					n->missing_ok = false;
					n->db_name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 31705 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1556: /* DetachStmt: DETACH DATABASE IF_P EXISTS IDENT  */
#line 26 "third_party/libpg_query/grammar/statements/attach.y"
                                {
					PGDetachStmt *n = makeNode(PGDetachStmt);
					n->missing_ok = true;
					n->db_name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 31716 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1557: /* opt_database: DATABASE  */
#line 34 "third_party/libpg_query/grammar/statements/attach.y"
                                                                                {}
#line 31722 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1558: /* opt_database: %empty  */
#line 35 "third_party/libpg_query/grammar/statements/attach.y"
                                                                                                {}
#line 31728 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1559: /* opt_database_alias: AS ColId  */
#line 39 "third_party/libpg_query/grammar/statements/attach.y"
                                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 31734 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1560: /* opt_database_alias: %empty  */
#line 40 "third_party/libpg_query/grammar/statements/attach.y"
                                                                                                        { (yyval.str) = NULL; }
#line 31740 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1561: /* VariableResetStmt: RESET reset_rest  */
#line 2 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                                                                        { (yyval.node) = (PGNode *) (yyvsp[0].vsetstmt); }
#line 31746 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1562: /* generic_reset: var_name  */
#line 8 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_RESET;
					n->scope = VAR_SET_SCOPE_GLOBAL;
					n->name = (yyvsp[0].str);
					(yyval.vsetstmt) = n;
				}
#line 31758 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1563: /* generic_reset: ALL  */
#line 16 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_RESET_ALL;
					n->scope = VAR_SET_SCOPE_GLOBAL;
					(yyval.vsetstmt) = n;
				}
#line 31769 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1564: /* reset_rest: generic_reset  */
#line 26 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                                                                        { (yyval.vsetstmt) = (yyvsp[0].vsetstmt); }
#line 31775 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1565: /* reset_rest: TIME ZONE  */
#line 28 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_RESET;
					n->name = (char*) "timezone";
					(yyval.vsetstmt) = n;
				}
#line 31786 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1566: /* reset_rest: TRANSACTION ISOLATION LEVEL  */
#line 35 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_RESET;
					n->name = (char*) "transaction_isolation";
					(yyval.vsetstmt) = n;
				}
#line 31797 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1567: /* VariableShowStmt: show_or_describe SelectStmt  */
#line 3 "third_party/libpg_query/grammar/statements/variable_show.y"
                                                    {
				PGVariableShowSelectStmt *n = makeNode(PGVariableShowSelectStmt);
				n->stmt = (yyvsp[0].node);
				n->name = (char*) "select";
				n->is_summary = 0;
				(yyval.node) = (PGNode *) n;
			}
#line 31809 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1568: /* VariableShowStmt: SUMMARIZE SelectStmt  */
#line 10 "third_party/libpg_query/grammar/statements/variable_show.y"
                                        {
				PGVariableShowSelectStmt *n = makeNode(PGVariableShowSelectStmt);
				n->stmt = (yyvsp[0].node);
				n->name = (char*) "select";
				n->is_summary = 1;
				(yyval.node) = (PGNode *) n;
			}
#line 31821 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1569: /* VariableShowStmt: SUMMARIZE table_id  */
#line 18 "third_party/libpg_query/grammar/statements/variable_show.y"
                        {
				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
				n->name = (yyvsp[0].str);
				n->is_summary = 1;
				(yyval.node) = (PGNode *) n;
			}
#line 31832 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1570: /* VariableShowStmt: show_or_describe table_id  */
#line 25 "third_party/libpg_query/grammar/statements/variable_show.y"
                        {
				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
				n->name = (yyvsp[0].str);
				n->is_summary = 0;
				(yyval.node) = (PGNode *) n;
			}
#line 31843 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1571: /* VariableShowStmt: show_or_describe TIME ZONE  */
#line 32 "third_party/libpg_query/grammar/statements/variable_show.y"
                        {
				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
				n->name = (char*) "timezone";
				n->is_summary = 0;
				(yyval.node) = (PGNode *) n;
			}
#line 31854 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1572: /* VariableShowStmt: show_or_describe TRANSACTION ISOLATION LEVEL  */
#line 39 "third_party/libpg_query/grammar/statements/variable_show.y"
                        {
				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
				n->name = (char*) "transaction_isolation";
				n->is_summary = 0;
				(yyval.node) = (PGNode *) n;
			}
#line 31865 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1573: /* VariableShowStmt: show_or_describe ALL opt_tables  */
#line 46 "third_party/libpg_query/grammar/statements/variable_show.y"
                        {
				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
				n->name = (char*) "__show_tables_expanded";
				n->is_summary = 0;
				(yyval.node) = (PGNode *) n;
			}
#line 31876 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1574: /* VariableShowStmt: show_or_describe  */
#line 53 "third_party/libpg_query/grammar/statements/variable_show.y"
                        {
				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
				n->name = (char*) "__show_tables_expanded";
				n->is_summary = 0;
				(yyval.node) = (PGNode *) n;
			}
#line 31887 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1579: /* var_name: ColId  */
#line 65 "third_party/libpg_query/grammar/statements/variable_show.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 31893 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1580: /* var_name: var_name '.' ColId  */
#line 67 "third_party/libpg_query/grammar/statements/variable_show.y"
                                { (yyval.str) = psprintf("%s.%s", (yyvsp[-2].str), (yyvsp[0].str)); }
#line 31899 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1581: /* table_id: ColId  */
#line 70 "third_party/libpg_query/grammar/statements/variable_show.y"
                                                                                { (yyval.str) = psprintf("\"%s\"", (yyvsp[0].str)); }
#line 31905 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1582: /* table_id: table_id '.' ColId  */
#line 72 "third_party/libpg_query/grammar/statements/variable_show.y"
                                { (yyval.str) = psprintf("%s.\"%s\"", (yyvsp[-2].str), (yyvsp[0].str)); }
#line 31911 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1583: /* CallStmt: CALL_P func_application  */
#line 7 "third_party/libpg_query/grammar/statements/call.y"
                                {
					PGCallStmt *n = makeNode(PGCallStmt);
					n->func = (yyvsp[0].node);
					(yyval.node) = (PGNode *) n;
				}
#line 31921 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1584: /* ViewStmt: CREATE_P OptTemp VIEW qualified_name opt_column_list opt_reloptions AS SelectStmt opt_check_option  */
#line 10 "third_party/libpg_query/grammar/statements/view.y"
                                {
					PGViewStmt *n = makeNode(PGViewStmt);
					n->view = (yyvsp[-5].range);
					n->view->relpersistence = (yyvsp[-7].ival);
					n->aliases = (yyvsp[-4].list);
					n->query = (yyvsp[-1].node);
					n->onconflict = PG_ERROR_ON_CONFLICT;
					n->options = (yyvsp[-3].list);
					n->withCheckOption = (yyvsp[0].viewcheckoption);
					(yyval.node) = (PGNode *) n;
				}
#line 31937 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1585: /* ViewStmt: CREATE_P OptTemp VIEW IF_P NOT EXISTS qualified_name opt_column_list opt_reloptions AS SelectStmt opt_check_option  */
#line 23 "third_party/libpg_query/grammar/statements/view.y"
                                {
					PGViewStmt *n = makeNode(PGViewStmt);
					n->view = (yyvsp[-5].range);
					n->view->relpersistence = (yyvsp[-10].ival);
					n->aliases = (yyvsp[-4].list);
					n->query = (yyvsp[-1].node);
					n->onconflict = PG_IGNORE_ON_CONFLICT;
					n->options = (yyvsp[-3].list);
					n->withCheckOption = (yyvsp[0].viewcheckoption);
					(yyval.node) = (PGNode *) n;
				}
#line 31953 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1586: /* ViewStmt: CREATE_P OR REPLACE OptTemp VIEW qualified_name opt_column_list opt_reloptions AS SelectStmt opt_check_option  */
#line 36 "third_party/libpg_query/grammar/statements/view.y"
                                {
					PGViewStmt *n = makeNode(PGViewStmt);
					n->view = (yyvsp[-5].range);
					n->view->relpersistence = (yyvsp[-7].ival);
					n->aliases = (yyvsp[-4].list);
					n->query = (yyvsp[-1].node);
					n->onconflict = PG_REPLACE_ON_CONFLICT;
					n->options = (yyvsp[-3].list);
					n->withCheckOption = (yyvsp[0].viewcheckoption);
					(yyval.node) = (PGNode *) n;
				}
#line 31969 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1587: /* ViewStmt: CREATE_P OptTemp RECURSIVE VIEW qualified_name '(' columnList ')' opt_reloptions AS SelectStmt opt_check_option  */
#line 49 "third_party/libpg_query/grammar/statements/view.y"
                                {
					PGViewStmt *n = makeNode(PGViewStmt);
					n->view = (yyvsp[-7].range);
					n->view->relpersistence = (yyvsp[-10].ival);
					n->aliases = (yyvsp[-5].list);
					n->query = makeRecursiveViewSelect(n->view->relname, n->aliases, (yyvsp[-1].node));
					n->onconflict = PG_ERROR_ON_CONFLICT;
					n->options = (yyvsp[-3].list);
					n->withCheckOption = (yyvsp[0].viewcheckoption);
					if (n->withCheckOption != PG_NO_CHECK_OPTION)
						ereport(ERROR,
								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
								 errmsg("WITH CHECK OPTION not supported on recursive views"),
								 parser_errposition((yylsp[0]))));
					(yyval.node) = (PGNode *) n;
				}
#line 31990 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1588: /* ViewStmt: CREATE_P OR REPLACE OptTemp RECURSIVE VIEW qualified_name '(' columnList ')' opt_reloptions AS SelectStmt opt_check_option  */
#line 67 "third_party/libpg_query/grammar/statements/view.y"
                                {
					PGViewStmt *n = makeNode(PGViewStmt);
					n->view = (yyvsp[-7].range);
					n->view->relpersistence = (yyvsp[-10].ival);
					n->aliases = (yyvsp[-5].list);
					n->query = makeRecursiveViewSelect(n->view->relname, n->aliases, (yyvsp[-1].node));
					n->onconflict = PG_REPLACE_ON_CONFLICT;
					n->options = (yyvsp[-3].list);
					n->withCheckOption = (yyvsp[0].viewcheckoption);
					if (n->withCheckOption != PG_NO_CHECK_OPTION)
						ereport(ERROR,
								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
								 errmsg("WITH CHECK OPTION not supported on recursive views"),
								 parser_errposition((yylsp[0]))));
					(yyval.node) = (PGNode *) n;
				}
#line 32011 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1589: /* opt_check_option: WITH CHECK_P OPTION  */
#line 87 "third_party/libpg_query/grammar/statements/view.y"
                                                                { (yyval.viewcheckoption) = CASCADED_CHECK_OPTION; }
#line 32017 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1590: /* opt_check_option: WITH CASCADED CHECK_P OPTION  */
#line 88 "third_party/libpg_query/grammar/statements/view.y"
                                                { (yyval.viewcheckoption) = CASCADED_CHECK_OPTION; }
#line 32023 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1591: /* opt_check_option: WITH LOCAL CHECK_P OPTION  */
#line 89 "third_party/libpg_query/grammar/statements/view.y"
                                                        { (yyval.viewcheckoption) = PG_LOCAL_CHECK_OPTION; }
#line 32029 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1592: /* opt_check_option: %empty  */
#line 90 "third_party/libpg_query/grammar/statements/view.y"
                                                                { (yyval.viewcheckoption) = PG_NO_CHECK_OPTION; }
#line 32035 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1593: /* CreateAsStmt: CREATE_P OptTemp TABLE create_as_target AS SelectStmt opt_with_data  */
#line 12 "third_party/libpg_query/grammar/statements/create_as.y"
                                {
					PGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);
					ctas->query = (yyvsp[-1].node);
					ctas->into = (yyvsp[-3].into);
					ctas->relkind = PG_OBJECT_TABLE;
					ctas->is_select_into = false;
					ctas->onconflict = PG_ERROR_ON_CONFLICT;
					/* cram additional flags into the PGIntoClause */
					(yyvsp[-3].into)->rel->relpersistence = (yyvsp[-5].ival);
					(yyvsp[-3].into)->skipData = !((yyvsp[0].boolean));
					(yyval.node) = (PGNode *) ctas;
				}
#line 32052 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1594: /* CreateAsStmt: CREATE_P OptTemp TABLE IF_P NOT EXISTS create_as_target AS SelectStmt opt_with_data  */
#line 25 "third_party/libpg_query/grammar/statements/create_as.y"
                                {
					PGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);
					ctas->query = (yyvsp[-1].node);
					ctas->into = (yyvsp[-3].into);
					ctas->relkind = PG_OBJECT_TABLE;
					ctas->is_select_into = false;
					ctas->onconflict = PG_IGNORE_ON_CONFLICT;
					/* cram additional flags into the PGIntoClause */
					(yyvsp[-3].into)->rel->relpersistence = (yyvsp[-8].ival);
					(yyvsp[-3].into)->skipData = !((yyvsp[0].boolean));
					(yyval.node) = (PGNode *) ctas;
				}
#line 32069 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1595: /* CreateAsStmt: CREATE_P OR REPLACE OptTemp TABLE create_as_target AS SelectStmt opt_with_data  */
#line 38 "third_party/libpg_query/grammar/statements/create_as.y"
                                {
					PGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);
					ctas->query = (yyvsp[-1].node);
					ctas->into = (yyvsp[-3].into);
					ctas->relkind = PG_OBJECT_TABLE;
					ctas->is_select_into = false;
					ctas->onconflict = PG_REPLACE_ON_CONFLICT;
					/* cram additional flags into the PGIntoClause */
					(yyvsp[-3].into)->rel->relpersistence = (yyvsp[-5].ival);
					(yyvsp[-3].into)->skipData = !((yyvsp[0].boolean));
					(yyval.node) = (PGNode *) ctas;
				}
#line 32086 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1596: /* opt_with_data: WITH DATA_P  */
#line 54 "third_party/libpg_query/grammar/statements/create_as.y"
                                                                                                { (yyval.boolean) = true; }
#line 32092 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1597: /* opt_with_data: WITH NO DATA_P  */
#line 55 "third_party/libpg_query/grammar/statements/create_as.y"
                                                                                        { (yyval.boolean) = false; }
#line 32098 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1598: /* opt_with_data: %empty  */
#line 56 "third_party/libpg_query/grammar/statements/create_as.y"
                                                                                                { (yyval.boolean) = true; }
#line 32104 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1599: /* create_as_target: qualified_name opt_column_list OptWith OnCommitOption  */
#line 62 "third_party/libpg_query/grammar/statements/create_as.y"
                                {
					(yyval.into) = makeNode(PGIntoClause);
					(yyval.into)->rel = (yyvsp[-3].range);
					(yyval.into)->colNames = (yyvsp[-2].list);
					(yyval.into)->options = (yyvsp[-1].list);
					(yyval.into)->onCommit = (yyvsp[0].oncommit);
					(yyval.into)->viewQuery = NULL;
					(yyval.into)->skipData = false;		/* might get changed later */
				}
#line 32118 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;


#line 32122 "third_party/libpg_query/grammar/grammar_out.cpp"

      default: break;
    }
  /* User semantic actions sometimes alter yychar, and that requires
     that yytoken be updated with the new translation.  We take the
     approach of translating immediately before every use of yytoken.
     One alternative is translating here after every semantic action,
     but that translation would be missed if the semantic action invokes
     YYABORT, YYACCEPT, or YYERROR immediately after altering yychar or
     if it invokes YYBACKUP.  In the case of YYABORT or YYACCEPT, an
     incorrect destructor might then be invoked immediately.  In the
     case of YYERROR or YYBACKUP, subsequent parser actions might lead
     to an incorrect destructor call or verbose syntax error message
     before the lookahead is translated.  */
  YY_SYMBOL_PRINT ("-> $$ =", YY_CAST (yysymbol_kind_t, yyr1[yyn]), &yyval, &yyloc);

  YYPOPSTACK (yylen);
  yylen = 0;

  *++yyvsp = yyval;
  *++yylsp = yyloc;

  /* Now 'shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */
  {
    const int yylhs = yyr1[yyn] - YYNTOKENS;
    const int yyi = yypgoto[yylhs] + *yyssp;
    yystate = (0 <= yyi && yyi <= YYLAST && yycheck[yyi] == *yyssp
               ? yytable[yyi]
               : yydefgoto[yylhs]);
  }

  goto yynewstate;


/*--------------------------------------.
| yyerrlab -- here on detecting error.  |
`--------------------------------------*/
yyerrlab:
  /* Make sure we have latest lookahead translation.  See comments at
     user semantic actions for why this is necessary.  */
  yytoken = yychar == YYEMPTY ? YYSYMBOL_YYEMPTY : YYTRANSLATE (yychar);
  /* If not already recovering from an error, report this error.  */
  if (!yyerrstatus)
    {
      ++yynerrs;
      yyerror (&yylloc, yyscanner, YY_("syntax error"));
    }

  yyerror_range[1] = yylloc;
  if (yyerrstatus == 3)
    {
      /* If just tried and failed to reuse lookahead token after an
         error, discard it.  */

      if (yychar <= YYEOF)
        {
          /* Return failure if at end of input.  */
          if (yychar == YYEOF)
            YYABORT;
        }
      else
        {
          yydestruct ("Error: discarding",
                      yytoken, &yylval, &yylloc, yyscanner);
          yychar = YYEMPTY;
        }
    }

  /* Else will try to reuse lookahead token after shifting the error
     token.  */
  goto yyerrlab1;


/*---------------------------------------------------.
| yyerrorlab -- error raised explicitly by YYERROR.  |
`---------------------------------------------------*/
yyerrorlab:
  /* Pacify compilers when the user code never invokes YYERROR and the
     label yyerrorlab therefore never appears in user code.  */
  if (0)
    YYERROR;
  ++yynerrs;

  /* Do not reclaim the symbols of the rule whose action triggered
     this YYERROR.  */
  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);
  yystate = *yyssp;
  goto yyerrlab1;


/*-------------------------------------------------------------.
| yyerrlab1 -- common code for both syntax error and YYERROR.  |
`-------------------------------------------------------------*/
yyerrlab1:
  yyerrstatus = 3;      /* Each real token shifted decrements this.  */

  /* Pop stack until we find a state that shifts the error token.  */
  for (;;)
    {
      yyn = yypact[yystate];
      if (!yypact_value_is_default (yyn))
        {
          yyn += YYSYMBOL_YYerror;
          if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYSYMBOL_YYerror)
            {
              yyn = yytable[yyn];
              if (0 < yyn)
                break;
            }
        }

      /* Pop the current state because it cannot handle the error token.  */
      if (yyssp == yyss)
        YYABORT;

      yyerror_range[1] = *yylsp;
      yydestruct ("Error: popping",
                  YY_ACCESSING_SYMBOL (yystate), yyvsp, yylsp, yyscanner);
      YYPOPSTACK (1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
    }

  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  *++yyvsp = yylval;
  YY_IGNORE_MAYBE_UNINITIALIZED_END

  yyerror_range[2] = yylloc;
  ++yylsp;
  YYLLOC_DEFAULT (*yylsp, yyerror_range, 2);

  /* Shift the error token.  */
  YY_SYMBOL_PRINT ("Shifting", YY_ACCESSING_SYMBOL (yyn), yyvsp, yylsp);

  yystate = yyn;
  goto yynewstate;


/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/
yyacceptlab:
  yyresult = 0;
  goto yyreturnlab;


/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/
yyabortlab:
  yyresult = 1;
  goto yyreturnlab;


/*-----------------------------------------------------------.
| yyexhaustedlab -- YYNOMEM (memory exhaustion) comes here.  |
`-----------------------------------------------------------*/
yyexhaustedlab:
  yyerror (&yylloc, yyscanner, YY_("memory exhausted"));
  yyresult = 2;
  goto yyreturnlab;


/*----------------------------------------------------------.
| yyreturnlab -- parsing is finished, clean up and return.  |
`----------------------------------------------------------*/
yyreturnlab:
  if (yychar != YYEMPTY)
    {
      /* Make sure we have latest lookahead translation.  See comments at
         user semantic actions for why this is necessary.  */
      yytoken = YYTRANSLATE (yychar);
      yydestruct ("Cleanup: discarding lookahead",
                  yytoken, &yylval, &yylloc, yyscanner);
    }
  /* Do not reclaim the symbols of the rule whose action triggered
     this YYABORT or YYACCEPT.  */
  YYPOPSTACK (yylen);
  YY_STACK_PRINT (yyss, yyssp);
  while (yyssp != yyss)
    {
      yydestruct ("Cleanup: popping",
                  YY_ACCESSING_SYMBOL (+*yyssp), yyvsp, yylsp, yyscanner);
      YYPOPSTACK (1);
    }
#ifndef yyoverflow
  if (yyss != yyssa)
    YYSTACK_FREE (yyss);
#endif

  return yyresult;
}

#line 85 "third_party/libpg_query/grammar/statements/create_as.y"


#line 1 "third_party/libpg_query/grammar/grammar.cpp"
/*
 * The signature of this function is required by bison.  However, we
 * ignore the passed yylloc and instead use the last token position
 * available from the scanner.
 */
static void
base_yyerror(YYLTYPE *yylloc, core_yyscan_t yyscanner, const char *msg)
{
	parser_yyerror(msg);
}

static PGRawStmt *
makeRawStmt(PGNode *stmt, int stmt_location)
{
	PGRawStmt    *rs = makeNode(PGRawStmt);

	rs->stmt = stmt;
	rs->stmt_location = stmt_location;
	rs->stmt_len = 0;			/* might get changed later */
	return rs;
}

/* Adjust a PGRawStmt to reflect that it doesn't run to the end of the string */
static void
updateRawStmtEnd(PGRawStmt *rs, int end_location)
{
	/*
	 * If we already set the length, don't change it.  This is for situations
	 * like "select foo ;; select bar" where the same statement will be last
	 * in the string for more than one semicolon.
	 */
	if (rs->stmt_len > 0)
		return;

	/* OK, update length of PGRawStmt */
	rs->stmt_len = end_location - rs->stmt_location;
}

static PGNode *
makeColumnRef(char *colname, PGList *indirection,
			  int location, core_yyscan_t yyscanner)
{
	/*
	 * Generate a PGColumnRef node, with an PGAIndirection node added if there
	 * is any subscripting in the specified indirection list.  However,
	 * any field selection at the start of the indirection list must be
	 * transposed into the "fields" part of the PGColumnRef node.
	 */
	PGColumnRef  *c = makeNode(PGColumnRef);
	int		nfields = 0;
	PGListCell *l;

	c->location = location;
	foreach(l, indirection)
	{
		if (IsA(lfirst(l), PGAIndices))
		{
			PGAIndirection *i = makeNode(PGAIndirection);

			if (nfields == 0)
			{
				/* easy case - all indirection goes to PGAIndirection */
				c->fields = list_make1(makeString(colname));
				i->indirection = check_indirection(indirection, yyscanner);
			}
			else
			{
				/* got to split the list in two */
				i->indirection = check_indirection(list_copy_tail(indirection,
																  nfields),
												   yyscanner);
				indirection = list_truncate(indirection, nfields);
				c->fields = lcons(makeString(colname), indirection);
			}
			i->arg = (PGNode *) c;
			return (PGNode *) i;
		}
		else if (IsA(lfirst(l), PGAStar))
		{
			/* We only allow '*' at the end of a PGColumnRef */
			if (lnext(l) != NULL)
				parser_yyerror("improper use of \"*\"");
		}
		nfields++;
	}
	/* No subscripting, so all indirection gets added to field list */
	c->fields = lcons(makeString(colname), indirection);
	return (PGNode *) c;
}

static PGNode *
makeTypeCast(PGNode *arg, PGTypeName *tpname, int trycast, int location)
{
	PGTypeCast *n = makeNode(PGTypeCast);
	n->arg = arg;
	n->typeName = tpname;
	n->tryCast = trycast;
	n->location = location;
	return (PGNode *) n;
}

static PGNode *
makeStringConst(char *str, int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGString;
	n->val.val.str = str;
	n->location = location;

	return (PGNode *)n;
}

static PGNode *
makeStringConstCast(char *str, int location, PGTypeName *tpname)
{
	PGNode *s = makeStringConst(str, location);

	return makeTypeCast(s, tpname, 0, -1);
}

static PGNode *
makeIntervalNode(char *str, int location, PGList *typmods) {
	PGIntervalConstant *n = makeNode(PGIntervalConstant);

	n->val_type = T_PGString;
	n->sval = str;
	n->location = location;
	n->typmods = typmods;

	return (PGNode *)n;

}

static PGNode *
makeIntervalNode(int val, int location, PGList *typmods) {
	PGIntervalConstant *n = makeNode(PGIntervalConstant);

	n->val_type = T_PGInteger;
	n->ival = val;
	n->location = location;
	n->typmods = typmods;

	return (PGNode *)n;
}

static PGNode *
makeIntervalNode(PGNode *arg, int location, PGList *typmods) {
	PGIntervalConstant *n = makeNode(PGIntervalConstant);

	n->val_type = T_PGAExpr;
	n->eval = arg;
	n->location = location;
	n->typmods = typmods;

	return (PGNode *)n;
}

static PGNode *
makeSampleSize(PGValue *sample_size, bool is_percentage) {
	PGSampleSize *n = makeNode(PGSampleSize);

	n->sample_size = *sample_size;
	n->is_percentage = is_percentage;

	return (PGNode *)n;
}

static PGNode *
makeSampleOptions(PGNode *sample_size, char *method, int *seed, int location) {
	PGSampleOptions *n = makeNode(PGSampleOptions);

	n->sample_size = sample_size;
	n->method = method;
	if (seed) {
		n->has_seed = true;
		n->seed = *seed;
	}
	n->location = location;

	return (PGNode *)n;
}

/* makeLimitPercent()
 * Make limit percent node
 */
static PGNode *
makeLimitPercent(PGNode *limit_percent) {
	PGLimitPercent *n = makeNode(PGLimitPercent);

	n->limit_percent = limit_percent;

	return (PGNode *)n;
}

static PGNode *
makeIntConst(int val, int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGInteger;
	n->val.val.ival = val;
	n->location = location;

	return (PGNode *)n;
}

static PGNode *
makeFloatConst(char *str, int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGFloat;
	n->val.val.str = str;
	n->location = location;

	return (PGNode *)n;
}

static PGNode *
makeBitStringConst(char *str, int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGBitString;
	n->val.val.str = str;
	n->location = location;

	return (PGNode *)n;
}

static PGNode *
makeNullAConst(int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGNull;
	n->location = location;

	return (PGNode *)n;
}

static PGNode *
makeAConst(PGValue *v, int location)
{
	PGNode *n;

	switch (v->type)
	{
		case T_PGFloat:
			n = makeFloatConst(v->val.str, location);
			break;

		case T_PGInteger:
			n = makeIntConst(v->val.ival, location);
			break;

		case T_PGString:
		default:
			n = makeStringConst(v->val.str, location);
			break;
	}

	return n;
}

/* makeBoolAConst()
 * Create an PGAConst string node and put it inside a boolean cast.
 */
static PGNode *
makeBoolAConst(bool state, int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGString;
	n->val.val.str = (state ? (char*) "t" : (char*) "f");
	n->location = location;

	return makeTypeCast((PGNode *)n, SystemTypeName("bool"), 0, -1);
}

/* check_qualified_name --- check the result of qualified_name production
 *
 * It's easiest to let the grammar production for qualified_name allow
 * subscripts and '*', which we then must reject here.
 */
static void
check_qualified_name(PGList *names, core_yyscan_t yyscanner)
{
	PGListCell   *i;

	foreach(i, names)
	{
		if (!IsA(lfirst(i), PGString))
			parser_yyerror("syntax error");
	}
}

/* check_func_name --- check the result of func_name production
 *
 * It's easiest to let the grammar production for func_name allow subscripts
 * and '*', which we then must reject here.
 */
static PGList *
check_func_name(PGList *names, core_yyscan_t yyscanner)
{
	PGListCell   *i;

	foreach(i, names)
	{
		if (!IsA(lfirst(i), PGString))
			parser_yyerror("syntax error");
	}
	return names;
}

/* check_indirection --- check the result of indirection production
 *
 * We only allow '*' at the end of the list, but it's hard to enforce that
 * in the grammar, so do it here.
 */
static PGList *
check_indirection(PGList *indirection, core_yyscan_t yyscanner)
{
	PGListCell *l;

	foreach(l, indirection)
	{
		if (IsA(lfirst(l), PGAStar))
		{
			if (lnext(l) != NULL)
				parser_yyerror("improper use of \"*\"");
		}
	}
	return indirection;
}

/* makeParamRef
 * Creates a new PGParamRef node
 */
static PGNode* makeParamRef(int number, int location)
{
	PGParamRef *p = makeNode(PGParamRef);
	p->number = number;
	p->location = location;
	p->name = NULL;
	return (PGNode *) p;
}

/* makeNamedParamRef
 * Creates a new PGParamRef node
 */
static PGNode* makeNamedParamRef(char *name, int location)
{
	PGParamRef *p = (PGParamRef *)makeParamRef(0, location);
	p->name = name;
	return (PGNode *) p;
}


/* insertSelectOptions()
 * Insert ORDER BY, etc into an already-constructed SelectStmt.
 *
 * This routine is just to avoid duplicating code in PGSelectStmt productions.
 */
static void
insertSelectOptions(PGSelectStmt *stmt,
					PGList *sortClause, PGList *lockingClause,
					PGNode *limitOffset, PGNode *limitCount,
					PGWithClause *withClause,
					core_yyscan_t yyscanner)
{
	Assert(IsA(stmt, PGSelectStmt));

	/*
	 * Tests here are to reject constructs like
	 *	(SELECT foo ORDER BY bar) ORDER BY baz
	 */
	if (sortClause)
	{
		if (stmt->sortClause)
			ereport(ERROR,
					(errcode(PG_ERRCODE_SYNTAX_ERROR),
					 errmsg("multiple ORDER BY clauses not allowed"),
					 parser_errposition(exprLocation((PGNode *) sortClause))));
		stmt->sortClause = sortClause;
	}
	/* We can handle multiple locking clauses, though */
	stmt->lockingClause = list_concat(stmt->lockingClause, lockingClause);
	if (limitOffset)
	{
		if (stmt->limitOffset)
			ereport(ERROR,
					(errcode(PG_ERRCODE_SYNTAX_ERROR),
					 errmsg("multiple OFFSET clauses not allowed"),
					 parser_errposition(exprLocation(limitOffset))));
		stmt->limitOffset = limitOffset;
	}
	if (limitCount)
	{
		if (stmt->limitCount)
			ereport(ERROR,
					(errcode(PG_ERRCODE_SYNTAX_ERROR),
					 errmsg("multiple LIMIT clauses not allowed"),
					 parser_errposition(exprLocation(limitCount))));
		stmt->limitCount = limitCount;
	}
	if (withClause)
	{
		if (stmt->withClause)
			ereport(ERROR,
					(errcode(PG_ERRCODE_SYNTAX_ERROR),
					 errmsg("multiple WITH clauses not allowed"),
					 parser_errposition(exprLocation((PGNode *) withClause))));
		stmt->withClause = withClause;
	}
}

static PGNode *
makeSetOp(PGSetOperation op, bool all, PGNode *larg, PGNode *rarg)
{
	PGSelectStmt *n = makeNode(PGSelectStmt);

	n->op = op;
	n->all = all;
	n->larg = (PGSelectStmt *) larg;
	n->rarg = (PGSelectStmt *) rarg;
	return (PGNode *) n;
}

/* SystemFuncName()
 * Build a properly-qualified reference to a built-in function.
 */
PGList *
SystemFuncName(const char *name)
{
	return list_make2(makeString(DEFAULT_SCHEMA), makeString(name));
}

/* SystemTypeName()
 * Build a properly-qualified reference to a built-in type.
 *
 * typmod is defaulted, but may be changed afterwards by caller.
 * Likewise for the location.
 */
PGTypeName *
SystemTypeName(const char *name)
{
	return makeTypeNameFromNameList(list_make2(makeString(DEFAULT_SCHEMA),
											   makeString(name)));
}

/* doNegate()
 * Handle negation of a numeric constant.
 *
 * Formerly, we did this here because the optimizer couldn't cope with
 * indexquals that looked like "var = -4" --- it wants "var = const"
 * and a unary minus operator applied to a constant didn't qualify.
 * As of Postgres 7.0, that problem doesn't exist anymore because there
 * is a constant-subexpression simplifier in the optimizer.  However,
 * there's still a good reason for doing this here, which is that we can
 * postpone committing to a particular internal representation for simple
 * negative constants.	It's better to leave "-123.456" in string form
 * until we know what the desired type is.
 */
static PGNode *
doNegate(PGNode *n, int location)
{
	if (IsA(n, PGAConst))
	{
		PGAConst *con = (PGAConst *)n;

		/* report the constant's location as that of the '-' sign */
		con->location = location;

		if (con->val.type == T_PGInteger)
		{
			con->val.val.ival = -con->val.val.ival;
			return n;
		}
		if (con->val.type == T_PGFloat)
		{
			doNegateFloat(&con->val);
			return n;
		}
	}

	return (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "-", NULL, n, location);
}

static void
doNegateFloat(PGValue *v)
{
	char   *oldval = v->val.str;

	Assert(IsA(v, PGFloat));
	if (*oldval == '+')
		oldval++;
	if (*oldval == '-')
		v->val.str = oldval+1;	/* just strip the '-' */
	else
		v->val.str = psprintf("-%s", oldval);
}

static PGNode *
makeAndExpr(PGNode *lexpr, PGNode *rexpr, int location)
{
	PGNode	   *lexp = lexpr;

	/* Look through AEXPR_PAREN nodes so they don't affect flattening */
	while (IsA(lexp, PGAExpr) &&
		   ((PGAExpr *) lexp)->kind == AEXPR_PAREN)
		lexp = ((PGAExpr *) lexp)->lexpr;
	/* Flatten "a AND b AND c ..." to a single PGBoolExpr on sight */
	if (IsA(lexp, PGBoolExpr))
	{
		PGBoolExpr *blexpr = (PGBoolExpr *) lexp;

		if (blexpr->boolop == PG_AND_EXPR)
		{
			blexpr->args = lappend(blexpr->args, rexpr);
			return (PGNode *) blexpr;
		}
	}
	return (PGNode *) makeBoolExpr(PG_AND_EXPR, list_make2(lexpr, rexpr), location);
}

static PGNode *
makeOrExpr(PGNode *lexpr, PGNode *rexpr, int location)
{
	PGNode	   *lexp = lexpr;

	/* Look through AEXPR_PAREN nodes so they don't affect flattening */
	while (IsA(lexp, PGAExpr) &&
		   ((PGAExpr *) lexp)->kind == AEXPR_PAREN)
		lexp = ((PGAExpr *) lexp)->lexpr;
	/* Flatten "a OR b OR c ..." to a single PGBoolExpr on sight */
	if (IsA(lexp, PGBoolExpr))
	{
		PGBoolExpr *blexpr = (PGBoolExpr *) lexp;

		if (blexpr->boolop == PG_OR_EXPR)
		{
			blexpr->args = lappend(blexpr->args, rexpr);
			return (PGNode *) blexpr;
		}
	}
	return (PGNode *) makeBoolExpr(PG_OR_EXPR, list_make2(lexpr, rexpr), location);
}

static PGNode *
makeNotExpr(PGNode *expr, int location)
{
	return (PGNode *) makeBoolExpr(PG_NOT_EXPR, list_make1(expr), location);
}

/* Separate PGConstraint nodes from COLLATE clauses in a */
static void
SplitColQualList(PGList *qualList,
				 PGList **constraintList, PGCollateClause **collClause,
				 core_yyscan_t yyscanner)
{
	PGListCell   *cell;
	PGListCell   *prev;
	PGListCell   *next;

	*collClause = NULL;
	prev = NULL;
	for (cell = list_head(qualList); cell; cell = next)
	{
		PGNode   *n = (PGNode *) lfirst(cell);

		next = lnext(cell);
		if (IsA(n, PGConstraint))
		{
			/* keep it in list */
			prev = cell;
			continue;
		}
		if (IsA(n, PGCollateClause))
		{
			PGCollateClause *c = (PGCollateClause *) n;

			if (*collClause)
				ereport(ERROR,
						(errcode(PG_ERRCODE_SYNTAX_ERROR),
						 errmsg("multiple COLLATE clauses not allowed"),
						 parser_errposition(c->location)));
			*collClause = c;
		}
		else
			elog(ERROR, "unexpected node type %d", (int) n->type);
		/* remove non-Constraint nodes from qualList */
		qualList = list_delete_cell(qualList, cell, prev);
	}
	*constraintList = qualList;
}

/*
 * Process result of ConstraintAttributeSpec, and set appropriate bool flags
 * in the output command node.  Pass NULL for any flags the particular
 * command doesn't support.
 */
static void
processCASbits(int cas_bits, int location, const char *constrType,
			   bool *deferrable, bool *initdeferred, bool *not_valid,
			   bool *no_inherit, core_yyscan_t yyscanner)
{
	/* defaults */
	if (deferrable)
		*deferrable = false;
	if (initdeferred)
		*initdeferred = false;
	if (not_valid)
		*not_valid = false;

	if (cas_bits & (CAS_DEFERRABLE | CAS_INITIALLY_DEFERRED))
	{
		if (deferrable)
			*deferrable = true;
		else
			ereport(ERROR,
					(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
					 /* translator: %s is CHECK, UNIQUE, or similar */
					 errmsg("%s constraints cannot be marked DEFERRABLE",
							constrType),
					 parser_errposition(location)));
	}

	if (cas_bits & CAS_INITIALLY_DEFERRED)
	{
		if (initdeferred)
			*initdeferred = true;
		else
			ereport(ERROR,
					(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
					 /* translator: %s is CHECK, UNIQUE, or similar */
					 errmsg("%s constraints cannot be marked DEFERRABLE",
							constrType),
					 parser_errposition(location)));
	}

	if (cas_bits & CAS_NOT_VALID)
	{
		if (not_valid)
			*not_valid = true;
		else
			ereport(ERROR,
					(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
					 /* translator: %s is CHECK, UNIQUE, or similar */
					 errmsg("%s constraints cannot be marked NOT VALID",
							constrType),
					 parser_errposition(location)));
	}

	if (cas_bits & CAS_NO_INHERIT)
	{
		if (no_inherit)
			*no_inherit = true;
		else
			ereport(ERROR,
					(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
					 /* translator: %s is CHECK, UNIQUE, or similar */
					 errmsg("%s constraints cannot be marked NO INHERIT",
							constrType),
					 parser_errposition(location)));
	}
}

/*----------
 * Recursive view transformation
 *
 * Convert
 *
 *     CREATE RECURSIVE VIEW relname (aliases) AS query
 *
 * to
 *
 *     CREATE VIEW relname (aliases) AS
 *         WITH RECURSIVE relname (aliases) AS (query)
 *         SELECT aliases FROM relname
 *
 * Actually, just the WITH ... part, which is then inserted into the original
 * view as the query.
 * ----------
 */
static PGNode *
makeRecursiveViewSelect(char *relname, PGList *aliases, PGNode *query)
{
	PGSelectStmt *s = makeNode(PGSelectStmt);
	PGWithClause *w = makeNode(PGWithClause);
	PGCommonTableExpr *cte = makeNode(PGCommonTableExpr);
	PGList	   *tl = NIL;
	PGListCell   *lc;

	/* create common table expression */
	cte->ctename = relname;
	cte->aliascolnames = aliases;
	cte->ctequery = query;
	cte->location = -1;

	/* create WITH clause and attach CTE */
	w->recursive = true;
	w->ctes = list_make1(cte);
	w->location = -1;

	/* create target list for the new SELECT from the alias list of the
	 * recursive view specification */
	foreach (lc, aliases)
	{
		PGResTarget *rt = makeNode(PGResTarget);

		rt->name = NULL;
		rt->indirection = NIL;
		rt->val = makeColumnRef(strVal(lfirst(lc)), NIL, -1, 0);
		rt->location = -1;

		tl = lappend(tl, rt);
	}

	/* create new SELECT combining WITH clause, target list, and fake FROM
	 * clause */
	s->withClause = w;
	s->targetList = tl;
	s->fromClause = list_make1(makeRangeVar(NULL, relname, -1));

	return (PGNode *) s;
}

/* parser_init()
 * Initialize to parse one query string
 */
void
parser_init(base_yy_extra_type *yyext)
{
	yyext->parsetree = NIL;		/* in case grammar forgets to set it */
}

#undef yyparse
#undef yylex
#undef yyerror
#undef yylval
#undef yychar
#undef yydebug
#undef yynerrs
#undef yylloc

} // namespace duckdb_libpgquery
